
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20002e18 	.word	0x20002e18

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00000fd5 	.word	0x00000fd5
       8:	00001025 	.word	0x00001025
       c:	00000e6d 	.word	0x00000e6d
      10:	00000e6d 	.word	0x00000e6d
      14:	00000e6d 	.word	0x00000e6d
      18:	00000e6d 	.word	0x00000e6d
      1c:	00000e6d 	.word	0x00000e6d
      20:	00000e6d 	.word	0x00000e6d
      24:	00000e6d 	.word	0x00000e6d
      28:	00000e6d 	.word	0x00000e6d
      2c:	00000a61 	.word	0x00000a61
      30:	00000e6d 	.word	0x00000e6d
      34:	00000e6d 	.word	0x00000e6d
      38:	00000a1d 	.word	0x00000a1d
      3c:	00000e6d 	.word	0x00000e6d

00000040 <_irq_vector_table>:
      40:	00000f99 0000a31f 00000f99 00000f99     ................
      50:	00000f99 00000f99 00000f99 00000f99     ................
      60:	00000f99 00000f99 00000f99 00000f99     ................
      70:	00000f99 00000f99 00000f99 00000f99     ................
      80:	00000f99 00000f99 00000f99 00000f99     ................
      90:	00000f99 00000f99 00000f99 00000f99     ................
      a0:	00000f99 00000f99 00000f99 00000f99     ................
      b0:	00000f99 00000f99 00000f99 00000f99     ................
      c0:	00000f99 00000f99 00000f99 00000f99     ................
      d0:	00000f99 00000f99 00000f99 00000f99     ................
      e0:	00000f99 00000f99 00000f99 00000f99     ................
      f0:	00000f99 00000f99                       ........

000000f8 <_sw_isr_table>:
      f8:	00000000 000016ed 00000000 00000de5     ................
     108:	00000000 00000de5 00000000 00000de5     ................
     118:	00000000 00000de5 00000000 00000de5     ................
     128:	20003e84 000018d1 00000000 00000de5     .>. ............
     138:	00000000 00000de5 00000000 00000de5     ................
     148:	00000000 00000de5 00000000 0000a2e5     ................
     158:	00000000 00000de5 20003e60 00001c99     ........`>. ....
     168:	00000000 00000de5 00000000 00000de5     ................
     178:	00000000 00000de5 00000000 00001dd9     ................
     188:	00000000 00000de5 00000000 00000de5     ................
     198:	00000000 00000de5 00000000 00000de5     ................
     1a8:	00000000 00000de5 00000000 00000de5     ................
     1b8:	00000000 0000a319 00000000 00000de5     ................
     1c8:	00000000 00000de5 00000000 00000de5     ................
     1d8:	00000000 00000de5 00000000 00000de5     ................
     1e8:	00000000 00000de5 00000000 00000de5     ................
     1f8:	00000000 00000de5 00000000 00000de5     ................
     208:	00000000 00000de5 00000000 00000de5     ................
     218:	00000000 00000de5 00000000 00000de5     ................
     228:	00000000 00000de5 00000000 00000de5     ................
     238:	00000000 00000de5 00000000 00000de5     ................
     248:	00000000 00000de5 00000000 00000de5     ................
     258:	00000000 00000de5 00000000 00000de5     ................

00000268 <__aeabi_uldivmod>:
     268:	b953      	cbnz	r3, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26a:	b94a      	cbnz	r2, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26c:	2900      	cmp	r1, #0
     26e:	bf08      	it	eq
     270:	2800      	cmpeq	r0, #0
     272:	bf1c      	itt	ne
     274:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     278:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     27c:	f000 b98e 	b.w	59c <__aeabi_idiv0>
     280:	f1ad 0c08 	sub.w	ip, sp, #8
     284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     288:	f000 f81a 	bl	2c0 <__udivmoddi4>
     28c:	f8dd e004 	ldr.w	lr, [sp, #4]
     290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     294:	b004      	add	sp, #16
     296:	4770      	bx	lr

00000298 <__popcountsi2>:
     298:	0843      	lsrs	r3, r0, #1
     29a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     29e:	1ac0      	subs	r0, r0, r3
     2a0:	0883      	lsrs	r3, r0, #2
     2a2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     2a6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     2aa:	4418      	add	r0, r3
     2ac:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     2b0:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     2b4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     2b8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     2bc:	0e00      	lsrs	r0, r0, #24
     2be:	4770      	bx	lr

000002c0 <__udivmoddi4>:
     2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2c4:	468c      	mov	ip, r1
     2c6:	460d      	mov	r5, r1
     2c8:	4604      	mov	r4, r0
     2ca:	9e08      	ldr	r6, [sp, #32]
     2cc:	2b00      	cmp	r3, #0
     2ce:	d151      	bne.n	374 <__udivmoddi4+0xb4>
     2d0:	428a      	cmp	r2, r1
     2d2:	4617      	mov	r7, r2
     2d4:	d96d      	bls.n	3b2 <__udivmoddi4+0xf2>
     2d6:	fab2 fe82 	clz	lr, r2
     2da:	f1be 0f00 	cmp.w	lr, #0
     2de:	d00b      	beq.n	2f8 <__udivmoddi4+0x38>
     2e0:	f1ce 0c20 	rsb	ip, lr, #32
     2e4:	fa01 f50e 	lsl.w	r5, r1, lr
     2e8:	fa20 fc0c 	lsr.w	ip, r0, ip
     2ec:	fa02 f70e 	lsl.w	r7, r2, lr
     2f0:	ea4c 0c05 	orr.w	ip, ip, r5
     2f4:	fa00 f40e 	lsl.w	r4, r0, lr
     2f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2fc:	0c25      	lsrs	r5, r4, #16
     2fe:	fbbc f8fa 	udiv	r8, ip, sl
     302:	fa1f f987 	uxth.w	r9, r7
     306:	fb0a cc18 	mls	ip, sl, r8, ip
     30a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     30e:	fb08 f309 	mul.w	r3, r8, r9
     312:	42ab      	cmp	r3, r5
     314:	d90a      	bls.n	32c <__udivmoddi4+0x6c>
     316:	19ed      	adds	r5, r5, r7
     318:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     31c:	f080 8123 	bcs.w	566 <CONFIG_BT_RX_STACK_SIZE+0x166>
     320:	42ab      	cmp	r3, r5
     322:	f240 8120 	bls.w	566 <CONFIG_BT_RX_STACK_SIZE+0x166>
     326:	f1a8 0802 	sub.w	r8, r8, #2
     32a:	443d      	add	r5, r7
     32c:	1aed      	subs	r5, r5, r3
     32e:	b2a4      	uxth	r4, r4
     330:	fbb5 f0fa 	udiv	r0, r5, sl
     334:	fb0a 5510 	mls	r5, sl, r0, r5
     338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     33c:	fb00 f909 	mul.w	r9, r0, r9
     340:	45a1      	cmp	r9, r4
     342:	d909      	bls.n	358 <__udivmoddi4+0x98>
     344:	19e4      	adds	r4, r4, r7
     346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     34a:	f080 810a 	bcs.w	562 <CONFIG_BT_RX_STACK_SIZE+0x162>
     34e:	45a1      	cmp	r9, r4
     350:	f240 8107 	bls.w	562 <CONFIG_BT_RX_STACK_SIZE+0x162>
     354:	3802      	subs	r0, #2
     356:	443c      	add	r4, r7
     358:	eba4 0409 	sub.w	r4, r4, r9
     35c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     360:	2100      	movs	r1, #0
     362:	2e00      	cmp	r6, #0
     364:	d061      	beq.n	42a <CONFIG_BT_RX_STACK_SIZE+0x2a>
     366:	fa24 f40e 	lsr.w	r4, r4, lr
     36a:	2300      	movs	r3, #0
     36c:	6034      	str	r4, [r6, #0]
     36e:	6073      	str	r3, [r6, #4]
     370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     374:	428b      	cmp	r3, r1
     376:	d907      	bls.n	388 <__udivmoddi4+0xc8>
     378:	2e00      	cmp	r6, #0
     37a:	d054      	beq.n	426 <CONFIG_BT_RX_STACK_SIZE+0x26>
     37c:	2100      	movs	r1, #0
     37e:	e886 0021 	stmia.w	r6, {r0, r5}
     382:	4608      	mov	r0, r1
     384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     388:	fab3 f183 	clz	r1, r3
     38c:	2900      	cmp	r1, #0
     38e:	f040 808e 	bne.w	4ae <CONFIG_BT_RX_STACK_SIZE+0xae>
     392:	42ab      	cmp	r3, r5
     394:	d302      	bcc.n	39c <__udivmoddi4+0xdc>
     396:	4282      	cmp	r2, r0
     398:	f200 80fa 	bhi.w	590 <CONFIG_BT_RX_STACK_SIZE+0x190>
     39c:	1a84      	subs	r4, r0, r2
     39e:	eb65 0503 	sbc.w	r5, r5, r3
     3a2:	2001      	movs	r0, #1
     3a4:	46ac      	mov	ip, r5
     3a6:	2e00      	cmp	r6, #0
     3a8:	d03f      	beq.n	42a <CONFIG_BT_RX_STACK_SIZE+0x2a>
     3aa:	e886 1010 	stmia.w	r6, {r4, ip}
     3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3b2:	b912      	cbnz	r2, 3ba <__udivmoddi4+0xfa>
     3b4:	2701      	movs	r7, #1
     3b6:	fbb7 f7f2 	udiv	r7, r7, r2
     3ba:	fab7 fe87 	clz	lr, r7
     3be:	f1be 0f00 	cmp.w	lr, #0
     3c2:	d134      	bne.n	42e <CONFIG_BT_RX_STACK_SIZE+0x2e>
     3c4:	1beb      	subs	r3, r5, r7
     3c6:	0c3a      	lsrs	r2, r7, #16
     3c8:	fa1f fc87 	uxth.w	ip, r7
     3cc:	2101      	movs	r1, #1
     3ce:	fbb3 f8f2 	udiv	r8, r3, r2
     3d2:	0c25      	lsrs	r5, r4, #16
     3d4:	fb02 3318 	mls	r3, r2, r8, r3
     3d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     3dc:	fb0c f308 	mul.w	r3, ip, r8
     3e0:	42ab      	cmp	r3, r5
     3e2:	d907      	bls.n	3f4 <__udivmoddi4+0x134>
     3e4:	19ed      	adds	r5, r5, r7
     3e6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     3ea:	d202      	bcs.n	3f2 <__udivmoddi4+0x132>
     3ec:	42ab      	cmp	r3, r5
     3ee:	f200 80d1 	bhi.w	594 <CONFIG_BT_RX_STACK_SIZE+0x194>
     3f2:	4680      	mov	r8, r0
     3f4:	1aed      	subs	r5, r5, r3
     3f6:	b2a3      	uxth	r3, r4
     3f8:	fbb5 f0f2 	udiv	r0, r5, r2
     3fc:	fb02 5510 	mls	r5, r2, r0, r5
     400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     404:	fb0c fc00 	mul.w	ip, ip, r0
     408:	45a4      	cmp	ip, r4
     40a:	d907      	bls.n	41c <CONFIG_BT_RX_STACK_SIZE+0x1c>
     40c:	19e4      	adds	r4, r4, r7
     40e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     412:	d202      	bcs.n	41a <CONFIG_BT_RX_STACK_SIZE+0x1a>
     414:	45a4      	cmp	ip, r4
     416:	f200 80b8 	bhi.w	58a <CONFIG_BT_RX_STACK_SIZE+0x18a>
     41a:	4618      	mov	r0, r3
     41c:	eba4 040c 	sub.w	r4, r4, ip
     420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     424:	e79d      	b.n	362 <__udivmoddi4+0xa2>
     426:	4631      	mov	r1, r6
     428:	4630      	mov	r0, r6
     42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     42e:	f1ce 0420 	rsb	r4, lr, #32
     432:	fa05 f30e 	lsl.w	r3, r5, lr
     436:	fa07 f70e 	lsl.w	r7, r7, lr
     43a:	fa20 f804 	lsr.w	r8, r0, r4
     43e:	0c3a      	lsrs	r2, r7, #16
     440:	fa25 f404 	lsr.w	r4, r5, r4
     444:	ea48 0803 	orr.w	r8, r8, r3
     448:	fbb4 f1f2 	udiv	r1, r4, r2
     44c:	ea4f 4518 	mov.w	r5, r8, lsr #16
     450:	fb02 4411 	mls	r4, r2, r1, r4
     454:	fa1f fc87 	uxth.w	ip, r7
     458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     45c:	fb01 f30c 	mul.w	r3, r1, ip
     460:	42ab      	cmp	r3, r5
     462:	fa00 f40e 	lsl.w	r4, r0, lr
     466:	d909      	bls.n	47c <CONFIG_BT_RX_STACK_SIZE+0x7c>
     468:	19ed      	adds	r5, r5, r7
     46a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     46e:	f080 808a 	bcs.w	586 <CONFIG_BT_RX_STACK_SIZE+0x186>
     472:	42ab      	cmp	r3, r5
     474:	f240 8087 	bls.w	586 <CONFIG_BT_RX_STACK_SIZE+0x186>
     478:	3902      	subs	r1, #2
     47a:	443d      	add	r5, r7
     47c:	1aeb      	subs	r3, r5, r3
     47e:	fa1f f588 	uxth.w	r5, r8
     482:	fbb3 f0f2 	udiv	r0, r3, r2
     486:	fb02 3310 	mls	r3, r2, r0, r3
     48a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     48e:	fb00 f30c 	mul.w	r3, r0, ip
     492:	42ab      	cmp	r3, r5
     494:	d907      	bls.n	4a6 <CONFIG_BT_RX_STACK_SIZE+0xa6>
     496:	19ed      	adds	r5, r5, r7
     498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     49c:	d26f      	bcs.n	57e <CONFIG_BT_RX_STACK_SIZE+0x17e>
     49e:	42ab      	cmp	r3, r5
     4a0:	d96d      	bls.n	57e <CONFIG_BT_RX_STACK_SIZE+0x17e>
     4a2:	3802      	subs	r0, #2
     4a4:	443d      	add	r5, r7
     4a6:	1aeb      	subs	r3, r5, r3
     4a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     4ac:	e78f      	b.n	3ce <__udivmoddi4+0x10e>
     4ae:	f1c1 0720 	rsb	r7, r1, #32
     4b2:	fa22 f807 	lsr.w	r8, r2, r7
     4b6:	408b      	lsls	r3, r1
     4b8:	fa05 f401 	lsl.w	r4, r5, r1
     4bc:	ea48 0303 	orr.w	r3, r8, r3
     4c0:	fa20 fe07 	lsr.w	lr, r0, r7
     4c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     4c8:	40fd      	lsrs	r5, r7
     4ca:	ea4e 0e04 	orr.w	lr, lr, r4
     4ce:	fbb5 f9fc 	udiv	r9, r5, ip
     4d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
     4d6:	fb0c 5519 	mls	r5, ip, r9, r5
     4da:	fa1f f883 	uxth.w	r8, r3
     4de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     4e2:	fb09 f408 	mul.w	r4, r9, r8
     4e6:	42ac      	cmp	r4, r5
     4e8:	fa02 f201 	lsl.w	r2, r2, r1
     4ec:	fa00 fa01 	lsl.w	sl, r0, r1
     4f0:	d908      	bls.n	504 <CONFIG_BT_RX_STACK_SIZE+0x104>
     4f2:	18ed      	adds	r5, r5, r3
     4f4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4f8:	d243      	bcs.n	582 <CONFIG_BT_RX_STACK_SIZE+0x182>
     4fa:	42ac      	cmp	r4, r5
     4fc:	d941      	bls.n	582 <CONFIG_BT_RX_STACK_SIZE+0x182>
     4fe:	f1a9 0902 	sub.w	r9, r9, #2
     502:	441d      	add	r5, r3
     504:	1b2d      	subs	r5, r5, r4
     506:	fa1f fe8e 	uxth.w	lr, lr
     50a:	fbb5 f0fc 	udiv	r0, r5, ip
     50e:	fb0c 5510 	mls	r5, ip, r0, r5
     512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     516:	fb00 f808 	mul.w	r8, r0, r8
     51a:	45a0      	cmp	r8, r4
     51c:	d907      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     51e:	18e4      	adds	r4, r4, r3
     520:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     524:	d229      	bcs.n	57a <CONFIG_BT_RX_STACK_SIZE+0x17a>
     526:	45a0      	cmp	r8, r4
     528:	d927      	bls.n	57a <CONFIG_BT_RX_STACK_SIZE+0x17a>
     52a:	3802      	subs	r0, #2
     52c:	441c      	add	r4, r3
     52e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     532:	eba4 0408 	sub.w	r4, r4, r8
     536:	fba0 8902 	umull	r8, r9, r0, r2
     53a:	454c      	cmp	r4, r9
     53c:	46c6      	mov	lr, r8
     53e:	464d      	mov	r5, r9
     540:	d315      	bcc.n	56e <CONFIG_BT_RX_STACK_SIZE+0x16e>
     542:	d012      	beq.n	56a <CONFIG_BT_RX_STACK_SIZE+0x16a>
     544:	b156      	cbz	r6, 55c <CONFIG_BT_RX_STACK_SIZE+0x15c>
     546:	ebba 030e 	subs.w	r3, sl, lr
     54a:	eb64 0405 	sbc.w	r4, r4, r5
     54e:	fa04 f707 	lsl.w	r7, r4, r7
     552:	40cb      	lsrs	r3, r1
     554:	431f      	orrs	r7, r3
     556:	40cc      	lsrs	r4, r1
     558:	6037      	str	r7, [r6, #0]
     55a:	6074      	str	r4, [r6, #4]
     55c:	2100      	movs	r1, #0
     55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     562:	4618      	mov	r0, r3
     564:	e6f8      	b.n	358 <__udivmoddi4+0x98>
     566:	4690      	mov	r8, r2
     568:	e6e0      	b.n	32c <__udivmoddi4+0x6c>
     56a:	45c2      	cmp	sl, r8
     56c:	d2ea      	bcs.n	544 <CONFIG_BT_RX_STACK_SIZE+0x144>
     56e:	ebb8 0e02 	subs.w	lr, r8, r2
     572:	eb69 0503 	sbc.w	r5, r9, r3
     576:	3801      	subs	r0, #1
     578:	e7e4      	b.n	544 <CONFIG_BT_RX_STACK_SIZE+0x144>
     57a:	4628      	mov	r0, r5
     57c:	e7d7      	b.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     57e:	4640      	mov	r0, r8
     580:	e791      	b.n	4a6 <CONFIG_BT_RX_STACK_SIZE+0xa6>
     582:	4681      	mov	r9, r0
     584:	e7be      	b.n	504 <CONFIG_BT_RX_STACK_SIZE+0x104>
     586:	4601      	mov	r1, r0
     588:	e778      	b.n	47c <CONFIG_BT_RX_STACK_SIZE+0x7c>
     58a:	3802      	subs	r0, #2
     58c:	443c      	add	r4, r7
     58e:	e745      	b.n	41c <CONFIG_BT_RX_STACK_SIZE+0x1c>
     590:	4608      	mov	r0, r1
     592:	e708      	b.n	3a6 <__udivmoddi4+0xe6>
     594:	f1a8 0802 	sub.w	r8, r8, #2
     598:	443d      	add	r5, r7
     59a:	e72b      	b.n	3f4 <__udivmoddi4+0x134>

0000059c <__aeabi_idiv0>:
     59c:	4770      	bx	lr
     59e:	bf00      	nop

000005a0 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
     5a0:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
     5a2:	4603      	mov	r3, r0
     5a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     5a8:	b90a      	cbnz	r2, 5ae <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
     5aa:	701a      	strb	r2, [r3, #0]

	return dest;
}
     5ac:	4770      	bx	lr
		*d = *s;
     5ae:	f803 2b01 	strb.w	r2, [r3], #1
     5b2:	e7f7      	b.n	5a4 <strcpy+0x4>

000005b4 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
     5b4:	3801      	subs	r0, #1
     5b6:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
     5b8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     5bc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     5c0:	4293      	cmp	r3, r2
     5c2:	d102      	bne.n	5ca <strcmp+0x16>
     5c4:	2b00      	cmp	r3, #0
     5c6:	d1f7      	bne.n	5b8 <strcmp+0x4>
     5c8:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
     5ca:	1a98      	subs	r0, r3, r2
     5cc:	4770      	bx	lr

000005ce <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     5ce:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
     5d0:	b182      	cbz	r2, 5f4 <CONFIG_BT_CTLR_COMPANY_ID+0x3>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     5d2:	3a01      	subs	r2, #1
     5d4:	460c      	mov	r4, r1
     5d6:	4603      	mov	r3, r0
     5d8:	d103      	bne.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
		c1++;
		c2++;
	}

	return *c1 - *c2;
     5da:	781a      	ldrb	r2, [r3, #0]
     5dc:	7820      	ldrb	r0, [r4, #0]
     5de:	1a10      	subs	r0, r2, r0
     5e0:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
     5e2:	781e      	ldrb	r6, [r3, #0]
     5e4:	7825      	ldrb	r5, [r4, #0]
     5e6:	42ae      	cmp	r6, r5
     5e8:	f100 0001 	add.w	r0, r0, #1
     5ec:	f101 0101 	add.w	r1, r1, #1
     5f0:	d0ef      	beq.n	5d2 <memcmp+0x4>
     5f2:	e7f2      	b.n	5da <memcmp+0xc>
		return 0;
     5f4:	4610      	mov	r0, r2
}
     5f6:	bd70      	pop	{r4, r5, r6, pc}

000005f8 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     5f8:	ea81 0300 	eor.w	r3, r1, r0
     5fc:	f013 0f03 	tst.w	r3, #3
{
     600:	b570      	push	{r4, r5, r6, lr}
     602:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     604:	d00b      	beq.n	61e <memcpy+0x26>
     606:	3b01      	subs	r3, #1
     608:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
     60a:	4291      	cmp	r1, r2
     60c:	d11b      	bne.n	646 <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
     60e:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
     610:	2a00      	cmp	r2, #0
     612:	d0fc      	beq.n	60e <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
     614:	f811 4b01 	ldrb.w	r4, [r1], #1
     618:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
     61c:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
     61e:	079c      	lsls	r4, r3, #30
     620:	d1f6      	bne.n	610 <memcpy+0x18>
     622:	1f1e      	subs	r6, r3, #4
     624:	460d      	mov	r5, r1
     626:	1b54      	subs	r4, r2, r5
     628:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
     62a:	2c03      	cmp	r4, #3
     62c:	d806      	bhi.n	63c <memcpy+0x44>
     62e:	f022 0403 	bic.w	r4, r2, #3
     632:	4421      	add	r1, r4
     634:	4423      	add	r3, r4
     636:	f002 0203 	and.w	r2, r2, #3
     63a:	e7e4      	b.n	606 <memcpy+0xe>
			*(d_word++) = *(s_word++);
     63c:	f855 4b04 	ldr.w	r4, [r5], #4
     640:	f846 4f04 	str.w	r4, [r6, #4]!
     644:	e7ef      	b.n	626 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
     646:	f811 4b01 	ldrb.w	r4, [r1], #1
     64a:	f803 4f01 	strb.w	r4, [r3, #1]!
     64e:	e7dc      	b.n	60a <memcpy+0x12>

00000650 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
     650:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
     652:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
     654:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
     656:	079c      	lsls	r4, r3, #30
     658:	d111      	bne.n	67e <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
     65a:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
     65e:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
     662:	461e      	mov	r6, r3
     664:	1b95      	subs	r5, r2, r6
     666:	441d      	add	r5, r3
     668:	2d03      	cmp	r5, #3
     66a:	d80e      	bhi.n	68a <memset+0x3a>
     66c:	f022 0403 	bic.w	r4, r2, #3
     670:	4423      	add	r3, r4
     672:	f002 0203 	and.w	r2, r2, #3
     676:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
     678:	4293      	cmp	r3, r2
     67a:	d109      	bne.n	690 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
     67c:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
     67e:	2a00      	cmp	r2, #0
     680:	d0fc      	beq.n	67c <memset+0x2c>
		*(d_byte++) = c_byte;
     682:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
     686:	3a01      	subs	r2, #1
     688:	e7e5      	b.n	656 <memset+0x6>
		*(d_word++) = c_word;
     68a:	f846 4b04 	str.w	r4, [r6], #4
     68e:	e7e9      	b.n	664 <memset+0x14>
		*(d_byte++) = c_byte;
     690:	f803 1b01 	strb.w	r1, [r3], #1
     694:	e7f0      	b.n	678 <memset+0x28>
	...

00000698 <scan_cb>:
	BT_DATA(BT_DATA_MANUFACTURER_DATA, mfg_data, 10),
};

static void scan_cb(const bt_addr_le_t *addr, s8_t rssi, u8_t adv_type,
		    struct net_buf_simple *buf)
{	
     698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     69c:	b090      	sub	sp, #64	; 0x40
     69e:	461d      	mov	r5, r3
	



	int n = 0;
	u8_t data[buf->len];
     6a0:	889b      	ldrh	r3, [r3, #4]
     6a2:	3307      	adds	r3, #7
     6a4:	f023 0307 	bic.w	r3, r3, #7
{	
     6a8:	af06      	add	r7, sp, #24
	
	char addr_str[BT_ADDR_LE_STR_LEN];

	if(adv_type == 0x03){
     6aa:	2a03      	cmp	r2, #3
	u8_t data[buf->len];
     6ac:	ebad 0d03 	sub.w	sp, sp, r3
{	
     6b0:	4604      	mov	r4, r0
     6b2:	4688      	mov	r8, r1
	u8_t data[buf->len];
     6b4:	ae06      	add	r6, sp, #24
	if(adv_type == 0x03){
     6b6:	d13e      	bne.n	736 <scan_cb+0x9e>
		printk("scan report adv_type : %d \n", adv_type);
     6b8:	4611      	mov	r1, r2
     6ba:	482d      	ldr	r0, [pc, #180]	; (770 <scan_cb+0xd8>)
     6bc:	f000 fea2 	bl	1404 <printk>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     6c0:	7823      	ldrb	r3, [r4, #0]
     6c2:	2b03      	cmp	r3, #3
     6c4:	d841      	bhi.n	74a <scan_cb+0xb2>
     6c6:	e8df f003 	tbb	[pc, r3]
     6ca:	3a02      	.short	0x3a02
     6cc:	3e3c      	.short	0x3e3c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     6ce:	4929      	ldr	r1, [pc, #164]	; (774 <scan_cb+0xdc>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     6d0:	4638      	mov	r0, r7
     6d2:	f7ff ff65 	bl	5a0 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     6d6:	79a3      	ldrb	r3, [r4, #6]
     6d8:	9705      	str	r7, [sp, #20]
     6da:	7862      	ldrb	r2, [r4, #1]
     6dc:	9204      	str	r2, [sp, #16]
     6de:	78a2      	ldrb	r2, [r4, #2]
     6e0:	9203      	str	r2, [sp, #12]
     6e2:	78e2      	ldrb	r2, [r4, #3]
     6e4:	9202      	str	r2, [sp, #8]
     6e6:	7922      	ldrb	r2, [r4, #4]
     6e8:	9201      	str	r2, [sp, #4]
     6ea:	7962      	ldrb	r2, [r4, #5]
     6ec:	9200      	str	r2, [sp, #0]
     6ee:	211b      	movs	r1, #27
     6f0:	4a21      	ldr	r2, [pc, #132]	; (778 <scan_cb+0xe0>)
     6f2:	f107 000c 	add.w	r0, r7, #12
     6f6:	f000 fe93 	bl	1420 <snprintk>
		bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
		printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
     6fa:	4642      	mov	r2, r8
     6fc:	f107 010c 	add.w	r1, r7, #12
     700:	481e      	ldr	r0, [pc, #120]	; (77c <scan_cb+0xe4>)
     702:	f000 fe7f 	bl	1404 <printk>
		printk("buffer len : %d \n", buf->len);
     706:	88a9      	ldrh	r1, [r5, #4]
     708:	481d      	ldr	r0, [pc, #116]	; (780 <scan_cb+0xe8>)
     70a:	f000 fe7b 	bl	1404 <printk>
	//	snprintk(data ,buf->len, buf->data);
		for( int i=0 ; i<= buf->len; i++){
     70e:	f8b5 8004 	ldrh.w	r8, [r5, #4]
     712:	4633      	mov	r3, r6
     714:	1b9a      	subs	r2, r3, r6
     716:	4590      	cmp	r8, r2
     718:	da1d      	bge.n	756 <scan_cb+0xbe>
		//char buffer[buf->len];
		//bzero(buffer, buf->len);
		//n = read(buf->data,buffer,buf->len);
		//if (n < 0) printf("ERROR reading from socket");
		n = buf->len;
		printk("Here is the message: \n");
     71a:	481a      	ldr	r0, [pc, #104]	; (784 <scan_cb+0xec>)
		for (int i = 0; i < n; i++)
		{
			printk("0x%02X ", data[i]);
     71c:	4d1a      	ldr	r5, [pc, #104]	; (788 <scan_cb+0xf0>)
		printk("Here is the message: \n");
     71e:	f000 fe71 	bl	1404 <printk>
		for (int i = 0; i < n; i++)
     722:	4634      	mov	r4, r6
     724:	1ba3      	subs	r3, r4, r6
     726:	4598      	cmp	r8, r3
     728:	dc1c      	bgt.n	764 <scan_cb+0xcc>
		}
		printk("\n");
     72a:	4818      	ldr	r0, [pc, #96]	; (78c <scan_cb+0xf4>)
     72c:	f000 fe6a 	bl	1404 <printk>
		printk("\n");
     730:	4816      	ldr	r0, [pc, #88]	; (78c <scan_cb+0xf4>)
     732:	f000 fe67 	bl	1404 <printk>
			printk("%d ", data[i]);
		}
		printk(" \n");
	*/
	}
}
     736:	3728      	adds	r7, #40	; 0x28
     738:	46bd      	mov	sp, r7
     73a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		strcpy(type, "random");
     73e:	4914      	ldr	r1, [pc, #80]	; (790 <scan_cb+0xf8>)
     740:	e7c6      	b.n	6d0 <scan_cb+0x38>
		strcpy(type, "public id");
     742:	4914      	ldr	r1, [pc, #80]	; (794 <scan_cb+0xfc>)
     744:	e7c4      	b.n	6d0 <scan_cb+0x38>
		strcpy(type, "random id");
     746:	4914      	ldr	r1, [pc, #80]	; (798 <scan_cb+0x100>)
     748:	e7c2      	b.n	6d0 <scan_cb+0x38>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     74a:	4a14      	ldr	r2, [pc, #80]	; (79c <scan_cb+0x104>)
     74c:	210a      	movs	r1, #10
     74e:	4638      	mov	r0, r7
     750:	f000 fe66 	bl	1420 <snprintk>
     754:	e7bf      	b.n	6d6 <scan_cb+0x3e>
			data[i] = *(buf->data ++);
     756:	682a      	ldr	r2, [r5, #0]
     758:	1c51      	adds	r1, r2, #1
     75a:	6029      	str	r1, [r5, #0]
     75c:	7812      	ldrb	r2, [r2, #0]
     75e:	f803 2b01 	strb.w	r2, [r3], #1
     762:	e7d7      	b.n	714 <scan_cb+0x7c>
			printk("0x%02X ", data[i]);
     764:	f814 1b01 	ldrb.w	r1, [r4], #1
     768:	4628      	mov	r0, r5
     76a:	f000 fe4b 	bl	1404 <printk>
     76e:	e7d9      	b.n	724 <scan_cb+0x8c>
     770:	0000ce43 	.word	0x0000ce43
     774:	0000ce5f 	.word	0x0000ce5f
     778:	0000ce88 	.word	0x0000ce88
     77c:	0000ceab 	.word	0x0000ceab
     780:	0000cec7 	.word	0x0000cec7
     784:	0000ced9 	.word	0x0000ced9
     788:	0000cef0 	.word	0x0000cef0
     78c:	0000ceee 	.word	0x0000ceee
     790:	0000ce66 	.word	0x0000ce66
     794:	0000ce6d 	.word	0x0000ce6d
     798:	0000ce77 	.word	0x0000ce77
     79c:	0000ce81 	.word	0x0000ce81

000007a0 <main>:

void main(void)
{
     7a0:	b510      	push	{r4, lr}
	struct bt_le_scan_param scan_param = {
     7a2:	4b21      	ldr	r3, [pc, #132]	; (828 <CONFIG_ISR_STACK_SIZE+0x28>)
{
     7a4:	b088      	sub	sp, #32
	struct bt_le_scan_param scan_param = {
     7a6:	6818      	ldr	r0, [r3, #0]
     7a8:	9003      	str	r0, [sp, #12]
     7aa:	889b      	ldrh	r3, [r3, #4]
		.interval   = 0x0010,
		.window     = 0x0010,
	};
	int err;

	printk("Starting Scanner/Advertiser Demo\n");
     7ac:	481f      	ldr	r0, [pc, #124]	; (82c <CONFIG_ISR_STACK_SIZE+0x2c>)
	struct bt_le_scan_param scan_param = {
     7ae:	f8ad 3010 	strh.w	r3, [sp, #16]
	printk("Starting Scanner/Advertiser Demo\n");
     7b2:	f000 fe27 	bl	1404 <printk>

	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(NULL);
     7b6:	2000      	movs	r0, #0
     7b8:	f002 fbb0 	bl	2f1c <bt_enable>
	if (err) {
     7bc:	4601      	mov	r1, r0
     7be:	b120      	cbz	r0, 7ca <main+0x2a>
		printk("Bluetooth init failed (err %d)\n", err);
     7c0:	481b      	ldr	r0, [pc, #108]	; (830 <CONFIG_ISR_STACK_SIZE+0x30>)
		//printk("Advertising started\n");
		k_sleep(K_MSEC(400));

		err = bt_le_adv_stop();
		if (err) {
			printk("Advertising failed to stop (err %d)\n", err);
     7c2:	f000 fe1f 	bl	1404 <printk>
			return;
		}
	} while (1);
}
     7c6:	b008      	add	sp, #32
     7c8:	bd10      	pop	{r4, pc}
	printk("Bluetooth initialized\n");
     7ca:	481a      	ldr	r0, [pc, #104]	; (834 <CONFIG_ISR_STACK_SIZE+0x34>)
     7cc:	f000 fe1a 	bl	1404 <printk>
	err = bt_le_scan_start(&scan_param, scan_cb);
     7d0:	4919      	ldr	r1, [pc, #100]	; (838 <CONFIG_ISR_STACK_SIZE+0x38>)
     7d2:	a803      	add	r0, sp, #12
     7d4:	f002 fcf4 	bl	31c0 <bt_le_scan_start>
	if (err) {
     7d8:	4601      	mov	r1, r0
     7da:	b9c0      	cbnz	r0, 80e <CONFIG_ISR_STACK_SIZE+0xe>
		err = bt_le_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad),
     7dc:	4c17      	ldr	r4, [pc, #92]	; (83c <CONFIG_ISR_STACK_SIZE+0x3c>)

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_OBJECT_ACCESS_REVOKE, k_object_access_revoke, void *, object, struct k_thread *, thread);

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
     7de:	f44f 70c8 	mov.w	r0, #400	; 0x190
     7e2:	f00b fccb 	bl	c17c <_impl_k_sleep>
     7e6:	2300      	movs	r3, #0
     7e8:	22a0      	movs	r2, #160	; 0xa0
     7ea:	9305      	str	r3, [sp, #20]
     7ec:	f8ad 2016 	strh.w	r2, [sp, #22]
     7f0:	22f0      	movs	r2, #240	; 0xf0
     7f2:	9306      	str	r3, [sp, #24]
     7f4:	4621      	mov	r1, r4
     7f6:	f8ad 2018 	strh.w	r2, [sp, #24]
     7fa:	9300      	str	r3, [sp, #0]
     7fc:	2201      	movs	r2, #1
     7fe:	a805      	add	r0, sp, #20
     800:	9307      	str	r3, [sp, #28]
     802:	f002 fc01 	bl	3008 <bt_le_adv_start>
		if (err) {
     806:	4601      	mov	r1, r0
     808:	b118      	cbz	r0, 812 <CONFIG_ISR_STACK_SIZE+0x12>
			printk("Advertising failed to start (err %d)\n", err);
     80a:	480d      	ldr	r0, [pc, #52]	; (840 <CONFIG_ISR_STACK_SIZE+0x40>)
     80c:	e7d9      	b.n	7c2 <main+0x22>
		printk("Starting scanning failed (err %d)\n", err);
     80e:	480d      	ldr	r0, [pc, #52]	; (844 <CONFIG_ISR_STACK_SIZE+0x44>)
     810:	e7d7      	b.n	7c2 <main+0x22>
     812:	f44f 70c8 	mov.w	r0, #400	; 0x190
     816:	f00b fcb1 	bl	c17c <_impl_k_sleep>
		err = bt_le_adv_stop();
     81a:	f002 fc99 	bl	3150 <bt_le_adv_stop>
		if (err) {
     81e:	4601      	mov	r1, r0
     820:	2800      	cmp	r0, #0
     822:	d0dc      	beq.n	7de <main+0x3e>
			printk("Advertising failed to stop (err %d)\n", err);
     824:	4808      	ldr	r0, [pc, #32]	; (848 <CONFIG_ISR_STACK_SIZE+0x48>)
     826:	e7cc      	b.n	7c2 <main+0x22>
     828:	0000cd1c 	.word	0x0000cd1c
     82c:	0000cd7c 	.word	0x0000cd7c
     830:	0000cd9e 	.word	0x0000cd9e
     834:	0000cdbe 	.word	0x0000cdbe
     838:	00000699 	.word	0x00000699
     83c:	0000cd74 	.word	0x0000cd74
     840:	0000cdf8 	.word	0x0000cdf8
     844:	0000cdd5 	.word	0x0000cdd5
     848:	0000ce1e 	.word	0x0000ce1e

0000084c <errata_103>:
	return false;
}

static bool errata_136_nrf52840(void)
{
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     84c:	4b05      	ldr	r3, [pc, #20]	; (864 <errata_103+0x18>)
     84e:	681b      	ldr	r3, [r3, #0]
     850:	2b08      	cmp	r3, #8
	    (*(u32_t *)0x10000134ul == 0x0ul)) {
     852:	bf01      	itttt	eq
     854:	4b04      	ldreq	r3, [pc, #16]	; (868 <errata_103+0x1c>)
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     856:	6818      	ldreq	r0, [r3, #0]
     858:	fab0 f080 	clzeq	r0, r0
     85c:	0940      	lsreq	r0, r0, #5
		return true;
	}

	return false;
     85e:	bf18      	it	ne
     860:	2000      	movne	r0, #0
}
     862:	4770      	bx	lr
     864:	10000130 	.word	0x10000130
     868:	10000134 	.word	0x10000134

0000086c <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     86c:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     86e:	f04f 0320 	mov.w	r3, #32
     872:	f3ef 8111 	mrs	r1, BASEPRI
     876:	f383 8811 	msr	BASEPRI, r3
	if (errata_36()) {
     87a:	f7ff ffe7 	bl	84c <errata_103>
     87e:	b140      	cbz	r0, 892 <nordicsemi_nrf52_init+0x26>
		NRF_CLOCK->EVENTS_DONE = 0;
     880:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     884:	2200      	movs	r2, #0
     886:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     88a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		NRF_CLOCK->CTIV = 0;
     88e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	if (errata_98()) {
     892:	f7ff ffdb 	bl	84c <errata_103>
     896:	b110      	cbz	r0, 89e <nordicsemi_nrf52_init+0x32>
		*(volatile u32_t *)0x4000568Cul = 0x00038148ul;
     898:	4b38      	ldr	r3, [pc, #224]	; (97c <nordicsemi_nrf52_init+0x110>)
     89a:	4a39      	ldr	r2, [pc, #228]	; (980 <nordicsemi_nrf52_init+0x114>)
     89c:	601a      	str	r2, [r3, #0]
	if (errata_103()) {
     89e:	f7ff ffd5 	bl	84c <errata_103>
     8a2:	b118      	cbz	r0, 8ac <nordicsemi_nrf52_init+0x40>
		NRF_CCM->MAXPACKETSIZE = 0xFBul;
     8a4:	4b37      	ldr	r3, [pc, #220]	; (984 <nordicsemi_nrf52_init+0x118>)
     8a6:	22fb      	movs	r2, #251	; 0xfb
     8a8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	if (errata_115()) {
     8ac:	f7ff ffce 	bl	84c <errata_103>
     8b0:	b148      	cbz	r0, 8c6 <nordicsemi_nrf52_init+0x5a>
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     8b2:	4835      	ldr	r0, [pc, #212]	; (988 <nordicsemi_nrf52_init+0x11c>)
			(*(u32_t *)0x10000258 & 0x0000000F);
     8b4:	4b35      	ldr	r3, [pc, #212]	; (98c <nordicsemi_nrf52_init+0x120>)
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     8b6:	6802      	ldr	r2, [r0, #0]
			(*(u32_t *)0x10000258 & 0x0000000F);
     8b8:	681b      	ldr	r3, [r3, #0]
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     8ba:	f022 020f 	bic.w	r2, r2, #15
			(*(u32_t *)0x10000258 & 0x0000000F);
     8be:	f003 030f 	and.w	r3, r3, #15
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     8c2:	4313      	orrs	r3, r2
		*(volatile u32_t *)0x40000EE4 =
     8c4:	6003      	str	r3, [r0, #0]
	if (errata_120()) {
     8c6:	f7ff ffc1 	bl	84c <errata_103>
     8ca:	b118      	cbz	r0, 8d4 <nordicsemi_nrf52_init+0x68>
		*(volatile u32_t *)0x40029640ul = 0x200ul;
     8cc:	4b30      	ldr	r3, [pc, #192]	; (990 <nordicsemi_nrf52_init+0x124>)
     8ce:	f44f 7200 	mov.w	r2, #512	; 0x200
     8d2:	601a      	str	r2, [r3, #0]
	if (errata_136_nrf52840()) {
     8d4:	f7ff ffba 	bl	84c <errata_103>
     8d8:	b148      	cbz	r0, 8ee <nordicsemi_nrf52_init+0x82>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     8da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     8de:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     8e2:	07d2      	lsls	r2, r2, #31
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     8e4:	bf44      	itt	mi
     8e6:	f06f 0201 	mvnmi.w	r2, #1
     8ea:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     8ee:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     8f2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     8f6:	2a00      	cmp	r2, #0
     8f8:	db03      	blt.n	902 <nordicsemi_nrf52_init+0x96>
	    ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) !=
     8fa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     8fe:	2b00      	cmp	r3, #0
     900:	da2f      	bge.n	962 <nordicsemi_nrf52_init+0xf6>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     902:	4b24      	ldr	r3, [pc, #144]	; (994 <nordicsemi_nrf52_init+0x128>)
     904:	2201      	movs	r2, #1
     906:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     90a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     90e:	2a00      	cmp	r2, #0
     910:	d0fb      	beq.n	90a <nordicsemi_nrf52_init+0x9e>
		NRF_UICR->PSELRESET[0] = 18;
     912:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     916:	2112      	movs	r1, #18
     918:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     91c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     920:	2a00      	cmp	r2, #0
     922:	d0fb      	beq.n	91c <nordicsemi_nrf52_init+0xb0>
		NRF_UICR->PSELRESET[1] = 18;
     924:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     928:	2212      	movs	r2, #18
     92a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     92e:	4b19      	ldr	r3, [pc, #100]	; (994 <nordicsemi_nrf52_init+0x128>)
     930:	461a      	mov	r2, r3
     932:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     936:	2900      	cmp	r1, #0
     938:	d0fb      	beq.n	932 <nordicsemi_nrf52_init+0xc6>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     93a:	2100      	movs	r1, #0
     93c:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     940:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     944:	2b00      	cmp	r3, #0
     946:	d0fb      	beq.n	940 <nordicsemi_nrf52_init+0xd4>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     948:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     94c:	4912      	ldr	r1, [pc, #72]	; (998 <nordicsemi_nrf52_init+0x12c>)
     94e:	4b13      	ldr	r3, [pc, #76]	; (99c <nordicsemi_nrf52_init+0x130>)
     950:	68ca      	ldr	r2, [r1, #12]
     952:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     956:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     958:	60cb      	str	r3, [r1, #12]
     95a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     95e:	bf00      	nop
     960:	e7fd      	b.n	95e <nordicsemi_nrf52_init+0xf2>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     962:	4b0d      	ldr	r3, [pc, #52]	; (998 <nordicsemi_nrf52_init+0x12c>)
     964:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     968:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     96a:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     96c:	4b0c      	ldr	r3, [pc, #48]	; (9a0 <nordicsemi_nrf52_init+0x134>)
     96e:	4a0d      	ldr	r2, [pc, #52]	; (9a4 <nordicsemi_nrf52_init+0x138>)
     970:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     972:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     976:	2000      	movs	r0, #0
     978:	bd08      	pop	{r3, pc}
     97a:	bf00      	nop
     97c:	4000568c 	.word	0x4000568c
     980:	00038148 	.word	0x00038148
     984:	4000f000 	.word	0x4000f000
     988:	40000ee4 	.word	0x40000ee4
     98c:	10000258 	.word	0x10000258
     990:	40029640 	.word	0x40029640
     994:	4001e000 	.word	0x4001e000
     998:	e000ed00 	.word	0xe000ed00
     99c:	05fa0004 	.word	0x05fa0004
     9a0:	20003ba8 	.word	0x20003ba8
     9a4:	03d09000 	.word	0x03d09000

000009a8 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     9a8:	4808      	ldr	r0, [pc, #32]	; (9cc <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
     9aa:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
     9ac:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
     9ae:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
     9b0:	d80b      	bhi.n	9ca <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
     9b2:	69c0      	ldr	r0, [r0, #28]
    cmp r0, r1
     9b4:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     9b6:	d008      	beq.n	9ca <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
     9b8:	b500      	push	{lr}
    bl _update_time_slice_before_swap
     9ba:	f00b fc31 	bl	c220 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
     9be:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     9c2:	4903      	ldr	r1, [pc, #12]	; (9d0 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
     9c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
     9c8:	600a      	str	r2, [r1, #0]

000009ca <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
     9ca:	4770      	bx	lr
    ldr r0, =_kernel
     9cc:	2000199c 	.word	0x2000199c
    ldr r1, =_SCS_ICSR
     9d0:	e000ed04 	.word	0xe000ed04

000009d4 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     9d4:	4804      	ldr	r0, [pc, #16]	; (9e8 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
     9d6:	2300      	movs	r3, #0
     9d8:	2120      	movs	r1, #32
     9da:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
     9dc:	3301      	adds	r3, #1
     9de:	2b2e      	cmp	r3, #46	; 0x2e
     9e0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
     9e4:	d1f9      	bne.n	9da <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
     9e6:	4770      	bx	lr
     9e8:	e000e100 	.word	0xe000e100

000009ec <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     9ec:	4a08      	ldr	r2, [pc, #32]	; (a10 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
     9ee:	4909      	ldr	r1, [pc, #36]	; (a14 <__swap+0x28>)
	_current->arch.basepri = key;
     9f0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     9f2:	6809      	ldr	r1, [r1, #0]
     9f4:	6659      	str	r1, [r3, #100]	; 0x64

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     9f6:	4908      	ldr	r1, [pc, #32]	; (a18 <__swap+0x2c>)
	_current->arch.basepri = key;
     9f8:	6618      	str	r0, [r3, #96]	; 0x60
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     9fa:	684b      	ldr	r3, [r1, #4]
     9fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     a00:	604b      	str	r3, [r1, #4]
     a02:	2300      	movs	r3, #0
     a04:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
     a08:	6893      	ldr	r3, [r2, #8]
}
     a0a:	6e58      	ldr	r0, [r3, #100]	; 0x64
     a0c:	4770      	bx	lr
     a0e:	bf00      	nop
     a10:	2000199c 	.word	0x2000199c
     a14:	0000f090 	.word	0x0000f090
     a18:	e000ed00 	.word	0xe000ed00

00000a1c <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     a1c:	490e      	ldr	r1, [pc, #56]	; (a58 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
     a1e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     a20:	2028      	movs	r0, #40	; 0x28
    add r0, r2
     a22:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
     a24:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     a28:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
     a2c:	4f0b      	ldr	r7, [pc, #44]	; (a5c <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     a2e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     a32:	2020      	movs	r0, #32
    msr BASEPRI, r0
     a34:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
     a38:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
     a3a:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
     a3c:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
     a3e:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
     a40:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     a42:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     a44:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     a48:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
     a4c:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
     a50:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
     a54:	4770      	bx	lr
     a56:	0000      	.short	0x0000
    ldr r1, =_kernel
     a58:	2000199c 	.word	0x2000199c
    ldr v4, =_SCS_ICSR
     a5c:	e000ed04 	.word	0xe000ed04

00000a60 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
     a60:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     a64:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     a66:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     a6a:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     a6e:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
     a70:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
     a74:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

    cmp r1, #0
#endif
    beq _context_switch
     a78:	d001      	beq.n	a7e <_context_switch>

    cmp r1, #2
     a7a:	2902      	cmp	r1, #2
    beq _oops
     a7c:	d007      	beq.n	a8e <_oops>

00000a7e <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
     a7e:	4040      	eors	r0, r0
    msr BASEPRI, r0
     a80:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
     a84:	4904      	ldr	r1, [pc, #16]	; (a98 <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
     a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
     a8a:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
     a8c:	4770      	bx	lr

00000a8e <_oops>:

_oops:
    push {lr}
     a8e:	b500      	push	{lr}
    blx _do_kernel_oops
     a90:	f000 fa2c 	bl	eec <_do_kernel_oops>
    pop {pc}
     a94:	bd00      	pop	{pc}
     a96:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
     a98:	e000ed04 	.word	0xe000ed04

00000a9c <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
     a9c:	b510      	push	{r4, lr}
     a9e:	4604      	mov	r4, r0

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     aa0:	f00b fb94 	bl	c1cc <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
     aa4:	6822      	ldr	r2, [r4, #0]
     aa6:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
     aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
     aac:	4801      	ldr	r0, [pc, #4]	; (ab4 <_FaultThreadShow.isra.2+0x18>)
     aae:	f000 bca9 	b.w	1404 <printk>
     ab2:	bf00      	nop
     ab4:	0000d05d 	.word	0x0000d05d

00000ab8 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _UsageFault(const NANO_ESF *esf)
{
     ab8:	b510      	push	{r4, lr}
     aba:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
     abc:	481a      	ldr	r0, [pc, #104]	; (b28 <_UsageFault+0x70>)
     abe:	f000 fca1 	bl	1404 <printk>

	_FaultThreadShow(esf);
     ac2:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     ac6:	4c19      	ldr	r4, [pc, #100]	; (b2c <_UsageFault+0x74>)
	_FaultThreadShow(esf);
     ac8:	f7ff ffe8 	bl	a9c <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     acc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ace:	019a      	lsls	r2, r3, #6
     ad0:	d502      	bpl.n	ad8 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
     ad2:	4817      	ldr	r0, [pc, #92]	; (b30 <_UsageFault+0x78>)
     ad4:	f000 fc96 	bl	1404 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
     ad8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ada:	01db      	lsls	r3, r3, #7
     adc:	d502      	bpl.n	ae4 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
     ade:	4815      	ldr	r0, [pc, #84]	; (b34 <_UsageFault+0x7c>)
     ae0:	f000 fc90 	bl	1404 <printk>
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if (SCB->CFSR & SCB_CFSR_STKOF_Msk) {
		PR_EXC("  Stack overflow\n");
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
     ae4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ae6:	0318      	lsls	r0, r3, #12
     ae8:	d502      	bpl.n	af0 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
     aea:	4813      	ldr	r0, [pc, #76]	; (b38 <_UsageFault+0x80>)
     aec:	f000 fc8a 	bl	1404 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
     af0:	4c0e      	ldr	r4, [pc, #56]	; (b2c <_UsageFault+0x74>)
     af2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     af4:	0359      	lsls	r1, r3, #13
     af6:	d502      	bpl.n	afe <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
     af8:	4810      	ldr	r0, [pc, #64]	; (b3c <_UsageFault+0x84>)
     afa:	f000 fc83 	bl	1404 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
     afe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b00:	039a      	lsls	r2, r3, #14
     b02:	d502      	bpl.n	b0a <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
     b04:	480e      	ldr	r0, [pc, #56]	; (b40 <_UsageFault+0x88>)
     b06:	f000 fc7d 	bl	1404 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
     b0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b0c:	03db      	lsls	r3, r3, #15
     b0e:	d502      	bpl.n	b16 <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
     b10:	480c      	ldr	r0, [pc, #48]	; (b44 <_UsageFault+0x8c>)
     b12:	f000 fc77 	bl	1404 <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
     b16:	4a05      	ldr	r2, [pc, #20]	; (b2c <_UsageFault+0x74>)
     b18:	6a93      	ldr	r3, [r2, #40]	; 0x28
     b1a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
     b1e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
     b22:	6293      	str	r3, [r2, #40]	; 0x28
     b24:	bd10      	pop	{r4, pc}
     b26:	bf00      	nop
     b28:	0000d15e 	.word	0x0000d15e
     b2c:	e000ed00 	.word	0xe000ed00
     b30:	0000d177 	.word	0x0000d177
     b34:	0000d18b 	.word	0x0000d18b
     b38:	0000d1a6 	.word	0x0000d1a6
     b3c:	0000d1c5 	.word	0x0000d1c5
     b40:	0000d1eb 	.word	0x0000d1eb
     b44:	0000d206 	.word	0x0000d206

00000b48 <_MpuFault>:
{
     b48:	b538      	push	{r3, r4, r5, lr}
     b4a:	4604      	mov	r4, r0
	PR_EXC("***** MPU FAULT *****\n");
     b4c:	4819      	ldr	r0, [pc, #100]	; (bb4 <_MpuFault+0x6c>)
{
     b4e:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
     b50:	f000 fc58 	bl	1404 <printk>
	_FaultThreadShow(esf);
     b54:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     b58:	4c17      	ldr	r4, [pc, #92]	; (bb8 <_MpuFault+0x70>)
	_FaultThreadShow(esf);
     b5a:	f7ff ff9f 	bl	a9c <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     b5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b60:	06d9      	lsls	r1, r3, #27
     b62:	d504      	bpl.n	b6e <_MpuFault+0x26>
		PR_EXC("  Stacking error\n");
     b64:	4815      	ldr	r0, [pc, #84]	; (bbc <_MpuFault+0x74>)
}
     b66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
     b6a:	f000 bc4b 	b.w	1404 <printk>
	} else if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
     b6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b70:	071a      	lsls	r2, r3, #28
     b72:	d501      	bpl.n	b78 <_MpuFault+0x30>
		PR_EXC("  Unstacking error\n");
     b74:	4812      	ldr	r0, [pc, #72]	; (bc0 <_MpuFault+0x78>)
     b76:	e7f6      	b.n	b66 <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
     b78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b7a:	079b      	lsls	r3, r3, #30
     b7c:	d50f      	bpl.n	b9e <_MpuFault+0x56>
		PR_EXC("  Data Access Violation\n");
     b7e:	4811      	ldr	r0, [pc, #68]	; (bc4 <_MpuFault+0x7c>)
     b80:	f000 fc40 	bl	1404 <printk>
		STORE_xFAR(mmfar, SCB->MMFAR);
     b84:	6b61      	ldr	r1, [r4, #52]	; 0x34
		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
     b86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b88:	0618      	lsls	r0, r3, #24
     b8a:	d512      	bpl.n	bb2 <_MpuFault+0x6a>
			PR_EXC("  Address: 0x%x\n", mmfar);
     b8c:	480e      	ldr	r0, [pc, #56]	; (bc8 <_MpuFault+0x80>)
     b8e:	f000 fc39 	bl	1404 <printk>
			if (fromHardFault) {
     b92:	b175      	cbz	r5, bb2 <_MpuFault+0x6a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
     b94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     b9a:	62a3      	str	r3, [r4, #40]	; 0x28
     b9c:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
     b9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ba0:	07da      	lsls	r2, r3, #31
     ba2:	d501      	bpl.n	ba8 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
     ba4:	4809      	ldr	r0, [pc, #36]	; (bcc <_MpuFault+0x84>)
     ba6:	e7de      	b.n	b66 <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
     ba8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     baa:	069b      	lsls	r3, r3, #26
     bac:	d501      	bpl.n	bb2 <_MpuFault+0x6a>
		PR_EXC("  Floating-point lazy state preservation error\n");
     bae:	4808      	ldr	r0, [pc, #32]	; (bd0 <_MpuFault+0x88>)
     bb0:	e7d9      	b.n	b66 <_MpuFault+0x1e>
     bb2:	bd38      	pop	{r3, r4, r5, pc}
     bb4:	0000d0a7 	.word	0x0000d0a7
     bb8:	e000ed00 	.word	0xe000ed00
     bbc:	0000d0be 	.word	0x0000d0be
     bc0:	0000d0d0 	.word	0x0000d0d0
     bc4:	0000d0e4 	.word	0x0000d0e4
     bc8:	0000d0fd 	.word	0x0000d0fd
     bcc:	0000d10e 	.word	0x0000d10e
     bd0:	0000d12e 	.word	0x0000d12e

00000bd4 <_BusFault>:
{
     bd4:	b538      	push	{r3, r4, r5, lr}
     bd6:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
     bd8:	481d      	ldr	r0, [pc, #116]	; (c50 <_BusFault+0x7c>)
{
     bda:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
     bdc:	f000 fc12 	bl	1404 <printk>
	_FaultThreadShow(esf);
     be0:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     be4:	4c1b      	ldr	r4, [pc, #108]	; (c54 <_BusFault+0x80>)
	_FaultThreadShow(esf);
     be6:	f7ff ff59 	bl	a9c <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     bea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     bec:	04d8      	lsls	r0, r3, #19
     bee:	d504      	bpl.n	bfa <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
     bf0:	4819      	ldr	r0, [pc, #100]	; (c58 <_BusFault+0x84>)
}
     bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
     bf6:	f000 bc05 	b.w	1404 <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
     bfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     bfc:	0519      	lsls	r1, r3, #20
     bfe:	d501      	bpl.n	c04 <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
     c00:	4816      	ldr	r0, [pc, #88]	; (c5c <_BusFault+0x88>)
     c02:	e7f6      	b.n	bf2 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
     c04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c06:	059a      	lsls	r2, r3, #22
     c08:	d514      	bpl.n	c34 <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
     c0a:	4815      	ldr	r0, [pc, #84]	; (c60 <_BusFault+0x8c>)
     c0c:	f000 fbfa 	bl	1404 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
     c10:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
     c12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c14:	041b      	lsls	r3, r3, #16
     c16:	d507      	bpl.n	c28 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
     c18:	4812      	ldr	r0, [pc, #72]	; (c64 <_BusFault+0x90>)
     c1a:	f000 fbf3 	bl	1404 <printk>
			if (fromHardFault) {
     c1e:	b11d      	cbz	r5, c28 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
     c20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
     c26:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     c28:	4b0a      	ldr	r3, [pc, #40]	; (c54 <_BusFault+0x80>)
     c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     c2c:	0558      	lsls	r0, r3, #21
     c2e:	d50e      	bpl.n	c4e <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
     c30:	480d      	ldr	r0, [pc, #52]	; (c68 <_BusFault+0x94>)
     c32:	e7de      	b.n	bf2 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     c34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c36:	0559      	lsls	r1, r3, #21
     c38:	d4fa      	bmi.n	c30 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
     c3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c3c:	05da      	lsls	r2, r3, #23
     c3e:	d501      	bpl.n	c44 <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
     c40:	480a      	ldr	r0, [pc, #40]	; (c6c <_BusFault+0x98>)
     c42:	e7d6      	b.n	bf2 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
     c44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c46:	049b      	lsls	r3, r3, #18
     c48:	d501      	bpl.n	c4e <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
     c4a:	4809      	ldr	r0, [pc, #36]	; (c70 <_BusFault+0x9c>)
     c4c:	e7d1      	b.n	bf2 <_BusFault+0x1e>
     c4e:	bd38      	pop	{r3, r4, r5, pc}
     c50:	0000cf24 	.word	0x0000cf24
     c54:	e000ed00 	.word	0xe000ed00
     c58:	0000d0be 	.word	0x0000d0be
     c5c:	0000d0d0 	.word	0x0000d0d0
     c60:	0000cf3b 	.word	0x0000cf3b
     c64:	0000d0fd 	.word	0x0000d0fd
     c68:	0000cf55 	.word	0x0000cf55
     c6c:	0000cf71 	.word	0x0000cf71
     c70:	0000d12e 	.word	0x0000d12e

00000c74 <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
     c74:	b538      	push	{r3, r4, r5, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     c76:	4d27      	ldr	r5, [pc, #156]	; (d14 <_Fault+0xa0>)
     c78:	686b      	ldr	r3, [r5, #4]
     c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
     c7e:	1eda      	subs	r2, r3, #3
{
     c80:	4604      	mov	r4, r0
	switch (fault) {
     c82:	2a09      	cmp	r2, #9
     c84:	d83a      	bhi.n	cfc <_Fault+0x88>
     c86:	e8df f002 	tbb	[pc, r2]
     c8a:	3305      	.short	0x3305
     c8c:	39392f35 	.word	0x39392f35
     c90:	37393939 	.word	0x37393939
	PR_EXC("***** HARD FAULT *****\n");
     c94:	4820      	ldr	r0, [pc, #128]	; (d18 <_Fault+0xa4>)
     c96:	f000 fbb5 	bl	1404 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
     c9a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     c9c:	079a      	lsls	r2, r3, #30
     c9e:	d503      	bpl.n	ca8 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
     ca0:	481e      	ldr	r0, [pc, #120]	; (d1c <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
     ca2:	f000 fbaf 	bl	1404 <printk>
     ca6:	e00c      	b.n	cc2 <_Fault+0x4e>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
     ca8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     caa:	005b      	lsls	r3, r3, #1
     cac:	d509      	bpl.n	cc2 <_Fault+0x4e>
		PR_EXC("  Fault escalation (see below)\n");
     cae:	481c      	ldr	r0, [pc, #112]	; (d20 <_Fault+0xac>)
     cb0:	f000 fba8 	bl	1404 <printk>
		if (SCB_MMFSR) {
     cb4:	4b1b      	ldr	r3, [pc, #108]	; (d24 <_Fault+0xb0>)
     cb6:	781b      	ldrb	r3, [r3, #0]
     cb8:	b14b      	cbz	r3, cce <_Fault+0x5a>
			_MpuFault(esf, 1);
     cba:	2101      	movs	r1, #1
		_MpuFault(esf, 0);
     cbc:	4620      	mov	r0, r4
     cbe:	f7ff ff43 	bl	b48 <_MpuFault>

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     cc2:	4621      	mov	r1, r4
     cc4:	2000      	movs	r0, #0
}
     cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     cca:	f000 b913 	b.w	ef4 <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
     cce:	4b16      	ldr	r3, [pc, #88]	; (d28 <_Fault+0xb4>)
     cd0:	781b      	ldrb	r3, [r3, #0]
     cd2:	b123      	cbz	r3, cde <_Fault+0x6a>
			_BusFault(esf, 1);
     cd4:	2101      	movs	r1, #1
		_BusFault(esf, 0);
     cd6:	4620      	mov	r0, r4
     cd8:	f7ff ff7c 	bl	bd4 <_BusFault>
     cdc:	e7f1      	b.n	cc2 <_Fault+0x4e>
		} else if (SCB_UFSR) {
     cde:	4b13      	ldr	r3, [pc, #76]	; (d2c <_Fault+0xb8>)
     ce0:	881b      	ldrh	r3, [r3, #0]
     ce2:	b29b      	uxth	r3, r3
     ce4:	2b00      	cmp	r3, #0
     ce6:	d0ec      	beq.n	cc2 <_Fault+0x4e>
		_UsageFault(esf);
     ce8:	4620      	mov	r0, r4
     cea:	f7ff fee5 	bl	ab8 <_UsageFault>
     cee:	e7e8      	b.n	cc2 <_Fault+0x4e>
		_MpuFault(esf, 0);
     cf0:	2100      	movs	r1, #0
     cf2:	e7e3      	b.n	cbc <_Fault+0x48>
		_BusFault(esf, 0);
     cf4:	2100      	movs	r1, #0
     cf6:	e7ee      	b.n	cd6 <_Fault+0x62>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
     cf8:	480d      	ldr	r0, [pc, #52]	; (d30 <_Fault+0xbc>)
     cfa:	e7d2      	b.n	ca2 <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
     cfc:	480d      	ldr	r0, [pc, #52]	; (d34 <_Fault+0xc0>)
     cfe:	490e      	ldr	r1, [pc, #56]	; (d38 <_Fault+0xc4>)
     d00:	f1a3 0210 	sub.w	r2, r3, #16
     d04:	2b0f      	cmp	r3, #15
     d06:	bfd8      	it	le
     d08:	4601      	movle	r1, r0
     d0a:	480c      	ldr	r0, [pc, #48]	; (d3c <_Fault+0xc8>)
     d0c:	f000 fb7a 	bl	1404 <printk>
     d10:	e7d7      	b.n	cc2 <_Fault+0x4e>
     d12:	bf00      	nop
     d14:	e000ed00 	.word	0xe000ed00
     d18:	0000cfb8 	.word	0x0000cfb8
     d1c:	0000cfd0 	.word	0x0000cfd0
     d20:	0000cff2 	.word	0x0000cff2
     d24:	e000ed28 	.word	0xe000ed28
     d28:	e000ed29 	.word	0xe000ed29
     d2c:	e000ed2a 	.word	0xe000ed2a
     d30:	0000d012 	.word	0x0000d012
     d34:	0000cf8a 	.word	0x0000cf8a
     d38:	0000cf9f 	.word	0x0000cf9f
     d3c:	0000d049 	.word	0x0000d049

00000d40 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
     d40:	4a02      	ldr	r2, [pc, #8]	; (d4c <_FaultInit+0xc>)
     d42:	6953      	ldr	r3, [r2, #20]
     d44:	f043 0310 	orr.w	r3, r3, #16
     d48:	6153      	str	r3, [r2, #20]
     d4a:	4770      	bx	lr
     d4c:	e000ed00 	.word	0xe000ed00

00000d50 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     d50:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     d52:	2b00      	cmp	r3, #0
     d54:	db08      	blt.n	d68 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d56:	2201      	movs	r2, #1
     d58:	f000 001f 	and.w	r0, r0, #31
     d5c:	fa02 f000 	lsl.w	r0, r2, r0
     d60:	095b      	lsrs	r3, r3, #5
     d62:	4a02      	ldr	r2, [pc, #8]	; (d6c <_arch_irq_enable+0x1c>)
     d64:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     d68:	4770      	bx	lr
     d6a:	bf00      	nop
     d6c:	e000e100 	.word	0xe000e100

00000d70 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
     d70:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     d72:	2b00      	cmp	r3, #0
     d74:	db0d      	blt.n	d92 <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d76:	2201      	movs	r2, #1
     d78:	095b      	lsrs	r3, r3, #5
     d7a:	f000 001f 	and.w	r0, r0, #31
     d7e:	fa02 f000 	lsl.w	r0, r2, r0
     d82:	3320      	adds	r3, #32
     d84:	4a03      	ldr	r2, [pc, #12]	; (d94 <_arch_irq_disable+0x24>)
     d86:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     d8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     d8e:	f3bf 8f6f 	isb	sy
     d92:	4770      	bx	lr
     d94:	e000e100 	.word	0xe000e100

00000d98 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
     d98:	0942      	lsrs	r2, r0, #5
     d9a:	4b05      	ldr	r3, [pc, #20]	; (db0 <_arch_irq_is_enabled+0x18>)
     d9c:	f000 001f 	and.w	r0, r0, #31
     da0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     da4:	2301      	movs	r3, #1
     da6:	fa03 f000 	lsl.w	r0, r3, r0
}
     daa:	4010      	ands	r0, r2
     dac:	4770      	bx	lr
     dae:	bf00      	nop
     db0:	e000e100 	.word	0xe000e100

00000db4 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     db4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     db6:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     db8:	bfa8      	it	ge
     dba:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
     dbe:	f101 0101 	add.w	r1, r1, #1
     dc2:	ea4f 1141 	mov.w	r1, r1, lsl #5
     dc6:	bfad      	iteet	ge
     dc8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     dcc:	f000 000f 	andlt.w	r0, r0, #15
     dd0:	4b03      	ldrlt	r3, [pc, #12]	; (de0 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     dd2:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     dd4:	bfb6      	itet	lt
     dd6:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     dd8:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ddc:	5419      	strblt	r1, [r3, r0]
     dde:	4770      	bx	lr
     de0:	e000ed14 	.word	0xe000ed14

00000de4 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
     de4:	f000 b842 	b.w	e6c <__bus_fault>

00000de8 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
     de8:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
     dea:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
     dec:	4b04      	ldr	r3, [pc, #16]	; (e00 <_arch_isr_direct_pm+0x18>)
     dee:	6998      	ldr	r0, [r3, #24]
     df0:	b118      	cbz	r0, dfa <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
     df2:	2200      	movs	r2, #0
     df4:	619a      	str	r2, [r3, #24]
		_sys_power_save_idle_exit(idle_val);
     df6:	f00a fe37 	bl	ba68 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
     dfa:	b662      	cpsie	i
     dfc:	bd08      	pop	{r3, pc}
     dfe:	bf00      	nop
     e00:	2000199c 	.word	0x2000199c

00000e04 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
     e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e06:	460c      	mov	r4, r1
     e08:	4616      	mov	r6, r2
     e0a:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
     e0c:	2204      	movs	r2, #4
     e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     e10:	9909      	ldr	r1, [sp, #36]	; 0x24
     e12:	4605      	mov	r5, r0
     e14:	f00b fce8 	bl	c7e8 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     e18:	f1a6 0120 	sub.w	r1, r6, #32
     e1c:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
     e1e:	4a0c      	ldr	r2, [pc, #48]	; (e50 <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
     e20:	65ac      	str	r4, [r5, #88]	; 0x58
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     e22:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
     e26:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
     e28:	f022 0201 	bic.w	r2, r2, #1
     e2c:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
     e2e:	652b      	str	r3, [r5, #80]	; 0x50
	thread->stack_info.size = (u32_t)stackSize;
     e30:	65ee      	str	r6, [r5, #92]	; 0x5c
     e32:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
     e34:	9a06      	ldr	r2, [sp, #24]
     e36:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
     e38:	9a07      	ldr	r2, [sp, #28]
     e3a:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
     e3c:	9a08      	ldr	r2, [sp, #32]
     e3e:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
     e40:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
     e42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     e46:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
     e48:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
     e4a:	662b      	str	r3, [r5, #96]	; 0x60
     e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e4e:	bf00      	nop
     e50:	0000c65d 	.word	0x0000c65d

00000e54 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
     e54:	4901      	ldr	r1, [pc, #4]	; (e5c <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
     e56:	2210      	movs	r2, #16
	str r2, [r1]
     e58:	600a      	str	r2, [r1, #0]
	bx lr
     e5a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
     e5c:	e000ed10 	.word	0xe000ed10

00000e60 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
     e60:	4040      	eors	r0, r0
	msr BASEPRI, r0
     e62:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
     e66:	bf30      	wfi

	bx lr
     e68:	4770      	bx	lr
     e6a:	bf00      	nop

00000e6c <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
     e6c:	4040      	eors	r0, r0
	msr BASEPRI, r0
     e6e:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
     e72:	f8df c01c 	ldr.w	ip, [pc, #28]	; e90 <__bus_fault+0x24>
	ldr ip, [ip]
     e76:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
     e7a:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
     e7e:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
     e80:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
     e84:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	push {lr}
     e88:	b500      	push	{lr}
	bl _Fault
     e8a:	f7ff fef3 	bl	c74 <_Fault>

	pop {pc}
     e8e:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
     e90:	e000ed04 	.word	0xe000ed04

00000e94 <_NanoFatalErrorHandler>:
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
     e94:	2804      	cmp	r0, #4
{
     e96:	b538      	push	{r3, r4, r5, lr}
     e98:	4604      	mov	r4, r0
     e9a:	460d      	mov	r5, r1
	switch (reason) {
     e9c:	d013      	beq.n	ec6 <_NanoFatalErrorHandler+0x32>
     e9e:	2805      	cmp	r0, #5
     ea0:	d013      	beq.n	eca <_NanoFatalErrorHandler+0x36>
     ea2:	2803      	cmp	r0, #3
     ea4:	d113      	bne.n	ece <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
     ea6:	480c      	ldr	r0, [pc, #48]	; (ed8 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
     ea8:	f000 faac 	bl	1404 <printk>
     eac:	f00b f98e 	bl	c1cc <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
     eb0:	69aa      	ldr	r2, [r5, #24]
     eb2:	4601      	mov	r1, r0
     eb4:	4809      	ldr	r0, [pc, #36]	; (edc <_NanoFatalErrorHandler+0x48>)
     eb6:	f000 faa5 	bl	1404 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
     eba:	4629      	mov	r1, r5
     ebc:	4620      	mov	r0, r4
}
     ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
     ec2:	f000 b817 	b.w	ef4 <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
     ec6:	4806      	ldr	r0, [pc, #24]	; (ee0 <_NanoFatalErrorHandler+0x4c>)
     ec8:	e7ee      	b.n	ea8 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
     eca:	4806      	ldr	r0, [pc, #24]	; (ee4 <_NanoFatalErrorHandler+0x50>)
     ecc:	e7ec      	b.n	ea8 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
     ece:	4601      	mov	r1, r0
     ed0:	4805      	ldr	r0, [pc, #20]	; (ee8 <_NanoFatalErrorHandler+0x54>)
     ed2:	f000 fa97 	bl	1404 <printk>
		break;
     ed6:	e7e9      	b.n	eac <_NanoFatalErrorHandler+0x18>
     ed8:	0000d232 	.word	0x0000d232
     edc:	0000d2b0 	.word	0x0000d2b0
     ee0:	0000d258 	.word	0x0000d258
     ee4:	0000d272 	.word	0x0000d272
     ee8:	0000d28d 	.word	0x0000d28d

00000eec <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
     eec:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
     eee:	6800      	ldr	r0, [r0, #0]
     ef0:	f7ff bfd0 	b.w	e94 <_NanoFatalErrorHandler>

00000ef4 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
     ef4:	2805      	cmp	r0, #5
{
     ef6:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
     ef8:	d00c      	beq.n	f14 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
     efa:	f00b fb97 	bl	c62c <k_is_in_isr>
     efe:	b160      	cbz	r0, f1a <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
     f00:	f00b fb94 	bl	c62c <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
     f04:	4b0c      	ldr	r3, [pc, #48]	; (f38 <_SysFatalErrorHandler+0x44>)
     f06:	490d      	ldr	r1, [pc, #52]	; (f3c <_SysFatalErrorHandler+0x48>)
     f08:	2800      	cmp	r0, #0
     f0a:	bf08      	it	eq
     f0c:	4619      	moveq	r1, r3
     f0e:	480c      	ldr	r0, [pc, #48]	; (f40 <_SysFatalErrorHandler+0x4c>)
     f10:	f000 fa78 	bl	1404 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
     f14:	f7ff ffa4 	bl	e60 <k_cpu_idle>
     f18:	e7fc      	b.n	f14 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
     f1a:	f00b fb97 	bl	c64c <_is_thread_essential>
     f1e:	2800      	cmp	r0, #0
     f20:	d1ee      	bne.n	f00 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
     f22:	4c08      	ldr	r4, [pc, #32]	; (f44 <_SysFatalErrorHandler+0x50>)
     f24:	4808      	ldr	r0, [pc, #32]	; (f48 <_SysFatalErrorHandler+0x54>)
     f26:	68a1      	ldr	r1, [r4, #8]
     f28:	f000 fa6c 	bl	1404 <printk>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     f2c:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
     f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     f32:	f000 b80b 	b.w	f4c <_impl_k_thread_abort>
     f36:	bf00      	nop
     f38:	0000d2f0 	.word	0x0000d2f0
     f3c:	0000d2ec 	.word	0x0000d2ec
     f40:	0000d301 	.word	0x0000d301
     f44:	2000199c 	.word	0x2000199c
     f48:	0000d321 	.word	0x0000d321

00000f4c <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
     f4c:	b538      	push	{r3, r4, r5, lr}
     f4e:	4605      	mov	r5, r0
	__asm__ volatile(
     f50:	f04f 0320 	mov.w	r3, #32
     f54:	f3ef 8411 	mrs	r4, BASEPRI
     f58:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
     f5c:	f00b fbd4 	bl	c708 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
     f60:	4b0b      	ldr	r3, [pc, #44]	; (f90 <_impl_k_thread_abort+0x44>)
     f62:	689b      	ldr	r3, [r3, #8]
     f64:	429d      	cmp	r5, r3
     f66:	d10d      	bne.n	f84 <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
     f68:	4b0a      	ldr	r3, [pc, #40]	; (f94 <_impl_k_thread_abort+0x48>)
     f6a:	685a      	ldr	r2, [r3, #4]
     f6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
     f70:	b922      	cbnz	r2, f7c <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
     f72:	f00b f955 	bl	c220 <_update_time_slice_before_swap>

	return __swap(key);
     f76:	4620      	mov	r0, r4
     f78:	f7ff fd38 	bl	9ec <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     f7c:	685a      	ldr	r2, [r3, #4]
     f7e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
     f82:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
     f84:	4620      	mov	r0, r4
}
     f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule_threads(key);
     f8a:	f00b b885 	b.w	c098 <_reschedule_threads>
     f8e:	bf00      	nop
     f90:	2000199c 	.word	0x2000199c
     f94:	e000ed00 	.word	0xe000ed00

00000f98 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
     f98:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
     f9a:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
     f9c:	4a0b      	ldr	r2, [pc, #44]	; (fcc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
     f9e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
     fa0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
     fa2:	bf1e      	ittt	ne
	movne	r1, #0
     fa4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
     fa6:	6191      	strne	r1, [r2, #24]
		blxne	_sys_power_save_idle_exit
     fa8:	f00a fd5e 	blne	ba68 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
     fac:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
     fae:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
     fb2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
     fb6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
     fba:	4905      	ldr	r1, [pc, #20]	; (fd0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
     fbc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
     fbe:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
     fc0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
     fc2:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
     fc6:	f7ff bcef 	b.w	9a8 <_ExcExit>
     fca:	0000      	.short	0x0000
	ldr r2, =_kernel
     fcc:	2000199c 	.word	0x2000199c
	ldr r1, =_sw_isr_table
     fd0:	000000f8 	.word	0x000000f8

00000fd4 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     fd4:	2020      	movs	r0, #32
    msr BASEPRI, r0
     fd6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
     fda:	4805      	ldr	r0, [pc, #20]	; (ff0 <__reset+0x1c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
     fdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
     fe0:	1840      	adds	r0, r0, r1
    msr PSP, r0
     fe2:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
     fe6:	2002      	movs	r0, #2
    msr CONTROL, r0
     fe8:	f380 8814 	msr	CONTROL, r0

    b _PrepC
     fec:	f000 b806 	b.w	ffc <_PrepC>
    ldr r0, =_interrupt_stack
     ff0:	20002f58 	.word	0x20002f58

00000ff4 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
     ff4:	bf30      	wfi
    b _SysNmiOnReset
     ff6:	f7ff bffd 	b.w	ff4 <_SysNmiOnReset>
     ffa:	bf00      	nop

00000ffc <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
     ffc:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     ffe:	4b07      	ldr	r3, [pc, #28]	; (101c <_PrepC+0x20>)
    1000:	4a07      	ldr	r2, [pc, #28]	; (1020 <_PrepC+0x24>)
    1002:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1006:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1008:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    100c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1010:	f00a fd5a 	bl	bac8 <_bss_zero>
	_data_copy();
    1014:	f00a fd62 	bl	badc <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1018:	f00a fd88 	bl	bb2c <_Cstart>
    101c:	00000000 	.word	0x00000000
    1020:	e000ed00 	.word	0xe000ed00

00001024 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1024:	b508      	push	{r3, lr}
	handler();
    1026:	f7ff ffe5 	bl	ff4 <_SysNmiOnReset>
	_ExcExit();
}
    102a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    102e:	f7ff bcbb 	b.w	9a8 <_ExcExit>
	...

00001034 <arm_mpu_init>:
	}
}

static inline u8_t _get_num_regions(void)
{
	u32_t type = ARM_MPU_DEV->type;
    1034:	4b15      	ldr	r3, [pc, #84]	; (108c <arm_mpu_init+0x58>)
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
    1036:	4916      	ldr	r1, [pc, #88]	; (1090 <arm_mpu_init+0x5c>)
	u32_t type = ARM_MPU_DEV->type;
    1038:	681a      	ldr	r2, [r3, #0]
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    103a:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    103c:	680d      	ldr	r5, [r1, #0]
    103e:	f3c2 2207 	ubfx	r2, r2, #8, #8
    1042:	4295      	cmp	r5, r2
    1044:	d80f      	bhi.n	1066 <arm_mpu_init+0x32>
	ARM_MPU_DEV->ctrl = 0;
    1046:	2200      	movs	r2, #0
    1048:	6848      	ldr	r0, [r1, #4]
    104a:	605a      	str	r2, [r3, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    104c:	4295      	cmp	r5, r2
    104e:	f100 000c 	add.w	r0, r0, #12
    1052:	d10a      	bne.n	106a <arm_mpu_init+0x36>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1054:	2205      	movs	r2, #5
    1056:	605a      	str	r2, [r3, #4]
	arm_mpu_enabled = 1;
    1058:	4b0e      	ldr	r3, [pc, #56]	; (1094 <arm_mpu_init+0x60>)
    105a:	2201      	movs	r2, #1
    105c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    105e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1062:	f3bf 8f6f 	isb	sy
	ARG_UNUSED(arg);

	_arm_mpu_config();

	return 0;
}
    1066:	2000      	movs	r0, #0
    1068:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    106a:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    106e:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    1072:	609a      	str	r2, [r3, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1074:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    1078:	f041 0110 	orr.w	r1, r1, #16
    107c:	4311      	orrs	r1, r2
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    107e:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1082:	60d9      	str	r1, [r3, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1084:	3201      	adds	r2, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1086:	611c      	str	r4, [r3, #16]
    1088:	e7e0      	b.n	104c <arm_mpu_init+0x18>
    108a:	bf00      	nop
    108c:	e000ed90 	.word	0xe000ed90
    1090:	20003b64 	.word	0x20003b64
    1094:	20000000 	.word	0x20000000

00001098 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    1098:	2000      	movs	r0, #0
    109a:	4770      	bx	lr

0000109c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    109c:	680b      	ldr	r3, [r1, #0]
    109e:	3301      	adds	r3, #1
    10a0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    10a2:	4b01      	ldr	r3, [pc, #4]	; (10a8 <char_out+0xc>)
    10a4:	681b      	ldr	r3, [r3, #0]
    10a6:	4718      	bx	r3
    10a8:	20003bac 	.word	0x20003bac

000010ac <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    10ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10b0:	b085      	sub	sp, #20
    10b2:	469b      	mov	fp, r3
    10b4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    10b6:	f8df a090 	ldr.w	sl, [pc, #144]	; 1148 <_printk_dec_ulong+0x9c>
    10ba:	2c01      	cmp	r4, #1
    10bc:	bfb8      	it	lt
    10be:	2401      	movlt	r4, #1
    10c0:	2b01      	cmp	r3, #1
    10c2:	bf0c      	ite	eq
    10c4:	2330      	moveq	r3, #48	; 0x30
    10c6:	2320      	movne	r3, #32
    10c8:	4615      	mov	r5, r2
    10ca:	4680      	mov	r8, r0
    10cc:	4689      	mov	r9, r1
    10ce:	9401      	str	r4, [sp, #4]
    10d0:	9302      	str	r3, [sp, #8]
    10d2:	2601      	movs	r6, #1
    10d4:	270a      	movs	r7, #10
    10d6:	2200      	movs	r2, #0
    10d8:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
    10dc:	b90a      	cbnz	r2, 10e2 <_printk_dec_ulong+0x36>
    10de:	45aa      	cmp	sl, r5
    10e0:	d21f      	bcs.n	1122 <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
    10e2:	fbb5 f0f4 	udiv	r0, r5, r4
    10e6:	4649      	mov	r1, r9
    10e8:	3030      	adds	r0, #48	; 0x30
    10ea:	47c0      	blx	r8
			digits++;
    10ec:	3601      	adds	r6, #1
			found_largest_digit = 1;
    10ee:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    10f0:	3f01      	subs	r7, #1
	while (pos >= 9) {
    10f2:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
    10f4:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
    10f8:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
    10fc:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
    1100:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
    1104:	d1e8      	bne.n	10d8 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
    1106:	4649      	mov	r1, r9
    1108:	f105 0030 	add.w	r0, r5, #48	; 0x30
    110c:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
    110e:	f1bb 0f03 	cmp.w	fp, #3
    1112:	d103      	bne.n	111c <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
    1114:	9b01      	ldr	r3, [sp, #4]
    1116:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
    1118:	2c00      	cmp	r4, #0
    111a:	dc0f      	bgt.n	113c <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
    111c:	b005      	add	sp, #20
    111e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    1122:	9b01      	ldr	r3, [sp, #4]
    1124:	42bb      	cmp	r3, r7
    1126:	dbe3      	blt.n	10f0 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    1128:	f1bb 0f02 	cmp.w	fp, #2
    112c:	d8e0      	bhi.n	10f0 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    112e:	4649      	mov	r1, r9
    1130:	9802      	ldr	r0, [sp, #8]
    1132:	9203      	str	r2, [sp, #12]
			digits++;
    1134:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    1136:	47c0      	blx	r8
			digits++;
    1138:	9a03      	ldr	r2, [sp, #12]
    113a:	e7d9      	b.n	10f0 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    113c:	4649      	mov	r1, r9
    113e:	2020      	movs	r0, #32
    1140:	47c0      	blx	r8
    1142:	3c01      	subs	r4, #1
    1144:	e7e8      	b.n	1118 <_printk_dec_ulong+0x6c>
    1146:	bf00      	nop
    1148:	3b9ac9ff 	.word	0x3b9ac9ff

0000114c <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
    114c:	680a      	ldr	r2, [r1, #0]
    114e:	688b      	ldr	r3, [r1, #8]
{
    1150:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
    1152:	b112      	cbz	r2, 115a <str_out+0xe>
    1154:	684c      	ldr	r4, [r1, #4]
    1156:	42a3      	cmp	r3, r4
    1158:	db02      	blt.n	1160 <str_out+0x14>
		ctx->count++;
    115a:	3301      	adds	r3, #1
    115c:	608b      	str	r3, [r1, #8]
		return c;
    115e:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
    1160:	1e65      	subs	r5, r4, #1
    1162:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
    1164:	bf0b      	itete	eq
    1166:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
    1168:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
    116a:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
    116c:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
    116e:	bf0c      	ite	eq
    1170:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
    1172:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
    1174:	bd30      	pop	{r4, r5, pc}
	...

00001178 <__printk_hook_install>:
	_char_out = fn;
    1178:	4b01      	ldr	r3, [pc, #4]	; (1180 <__printk_hook_install+0x8>)
    117a:	6018      	str	r0, [r3, #0]
    117c:	4770      	bx	lr
    117e:	bf00      	nop
    1180:	20003bac 	.word	0x20003bac

00001184 <_vprintk>:
{
    1184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1188:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
    118a:	f04f 0a00 	mov.w	sl, #0
{
    118e:	4606      	mov	r6, r0
    1190:	460f      	mov	r7, r1
    1192:	9204      	str	r2, [sp, #16]
    1194:	461c      	mov	r4, r3
	int min_width = -1;
    1196:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    119a:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
    119c:	4655      	mov	r5, sl
	while (*fmt) {
    119e:	9b04      	ldr	r3, [sp, #16]
    11a0:	7818      	ldrb	r0, [r3, #0]
    11a2:	b910      	cbnz	r0, 11aa <_vprintk+0x26>
}
    11a4:	b009      	add	sp, #36	; 0x24
    11a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
    11aa:	b945      	cbnz	r5, 11be <_vprintk+0x3a>
			if (*fmt != '%') {
    11ac:	2825      	cmp	r0, #37	; 0x25
    11ae:	f000 810c 	beq.w	13ca <_vprintk+0x246>
				out((int)*fmt, ctx);
    11b2:	4639      	mov	r1, r7
    11b4:	47b0      	blx	r6
		++fmt;
    11b6:	9b04      	ldr	r3, [sp, #16]
    11b8:	3301      	adds	r3, #1
    11ba:	9304      	str	r3, [sp, #16]
    11bc:	e7ef      	b.n	119e <_vprintk+0x1a>
			switch (*fmt) {
    11be:	2864      	cmp	r0, #100	; 0x64
    11c0:	d061      	beq.n	1286 <_vprintk+0x102>
    11c2:	d819      	bhi.n	11f8 <_vprintk+0x74>
    11c4:	2839      	cmp	r0, #57	; 0x39
    11c6:	d80a      	bhi.n	11de <_vprintk+0x5a>
    11c8:	2831      	cmp	r0, #49	; 0x31
    11ca:	d250      	bcs.n	126e <_vprintk+0xea>
    11cc:	282d      	cmp	r0, #45	; 0x2d
    11ce:	d03c      	beq.n	124a <_vprintk+0xc6>
    11d0:	2830      	cmp	r0, #48	; 0x30
    11d2:	d03d      	beq.n	1250 <_vprintk+0xcc>
    11d4:	2825      	cmp	r0, #37	; 0x25
    11d6:	d108      	bne.n	11ea <_vprintk+0x66>
				out((int)'%', ctx);
    11d8:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
    11da:	47b0      	blx	r6
    11dc:	e06f      	b.n	12be <_vprintk+0x13a>
			switch (*fmt) {
    11de:	2858      	cmp	r0, #88	; 0x58
    11e0:	f000 8089 	beq.w	12f6 <_vprintk+0x172>
    11e4:	2863      	cmp	r0, #99	; 0x63
    11e6:	f000 80ea 	beq.w	13be <_vprintk+0x23a>
				out((int)'%', ctx);
    11ea:	4639      	mov	r1, r7
    11ec:	2025      	movs	r0, #37	; 0x25
    11ee:	47b0      	blx	r6
				out((int)*fmt, ctx);
    11f0:	9b04      	ldr	r3, [sp, #16]
    11f2:	4639      	mov	r1, r7
    11f4:	7818      	ldrb	r0, [r3, #0]
    11f6:	e7f0      	b.n	11da <_vprintk+0x56>
			switch (*fmt) {
    11f8:	2870      	cmp	r0, #112	; 0x70
    11fa:	d072      	beq.n	12e2 <_vprintk+0x15e>
    11fc:	d806      	bhi.n	120c <_vprintk+0x88>
    11fe:	2869      	cmp	r0, #105	; 0x69
    1200:	d041      	beq.n	1286 <_vprintk+0x102>
    1202:	286c      	cmp	r0, #108	; 0x6c
    1204:	d03c      	beq.n	1280 <_vprintk+0xfc>
    1206:	2868      	cmp	r0, #104	; 0x68
    1208:	d0d5      	beq.n	11b6 <_vprintk+0x32>
    120a:	e7ee      	b.n	11ea <_vprintk+0x66>
    120c:	2875      	cmp	r0, #117	; 0x75
    120e:	d058      	beq.n	12c2 <_vprintk+0x13e>
    1210:	d817      	bhi.n	1242 <_vprintk+0xbe>
    1212:	2873      	cmp	r0, #115	; 0x73
    1214:	d1e9      	bne.n	11ea <_vprintk+0x66>
				char *s = va_arg(ap, char *);
    1216:	6823      	ldr	r3, [r4, #0]
    1218:	f104 0b04 	add.w	fp, r4, #4
    121c:	461c      	mov	r4, r3
				while (*s)
    121e:	4625      	mov	r5, r4
    1220:	f815 0b01 	ldrb.w	r0, [r5], #1
    1224:	2800      	cmp	r0, #0
    1226:	f040 80bf 	bne.w	13a8 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
    122a:	f1b8 0f03 	cmp.w	r8, #3
    122e:	f040 80d5 	bne.w	13dc <_vprintk+0x258>
					int remaining = min_width - (s - start);
    1232:	1ae4      	subs	r4, r4, r3
    1234:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
    1238:	2c00      	cmp	r4, #0
    123a:	f300 80bb 	bgt.w	13b4 <_vprintk+0x230>
				char *s = va_arg(ap, char *);
    123e:	465c      	mov	r4, fp
    1240:	e03d      	b.n	12be <_vprintk+0x13a>
			switch (*fmt) {
    1242:	2878      	cmp	r0, #120	; 0x78
    1244:	d057      	beq.n	12f6 <_vprintk+0x172>
    1246:	287a      	cmp	r0, #122	; 0x7a
    1248:	e7de      	b.n	1208 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
    124a:	f04f 0803 	mov.w	r8, #3
    124e:	e7b2      	b.n	11b6 <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
    1250:	f1b9 0f00 	cmp.w	r9, #0
    1254:	da0e      	bge.n	1274 <_vprintk+0xf0>
    1256:	f1b8 0f00 	cmp.w	r8, #0
    125a:	f000 80bc 	beq.w	13d6 <_vprintk+0x252>
					min_width = *fmt - '0';
    125e:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    1262:	f1b8 0f00 	cmp.w	r8, #0
    1266:	bf08      	it	eq
    1268:	f04f 0802 	moveq.w	r8, #2
    126c:	e7a3      	b.n	11b6 <_vprintk+0x32>
				if (min_width < 0) {
    126e:	f1b9 0f00 	cmp.w	r9, #0
    1272:	dbf4      	blt.n	125e <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
    1274:	230a      	movs	r3, #10
    1276:	fb03 0909 	mla	r9, r3, r9, r0
    127a:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    127e:	e7f0      	b.n	1262 <_vprintk+0xde>
				long_ctr++;
    1280:	f10a 0a01 	add.w	sl, sl, #1
    1284:	e797      	b.n	11b6 <_vprintk+0x32>
				if (long_ctr < 2) {
    1286:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
    128a:	bfc5      	ittet	gt
    128c:	3407      	addgt	r4, #7
    128e:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
    1292:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
    1294:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
    1296:	bfd4      	ite	le
    1298:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
    129a:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
    129e:	2d00      	cmp	r5, #0
    12a0:	da05      	bge.n	12ae <_vprintk+0x12a>
					out((int)'-', ctx);
    12a2:	4639      	mov	r1, r7
    12a4:	202d      	movs	r0, #45	; 0x2d
    12a6:	47b0      	blx	r6
					d = -d;
    12a8:	426d      	negs	r5, r5
					min_width--;
    12aa:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    12ae:	f8cd 9000 	str.w	r9, [sp]
    12b2:	4643      	mov	r3, r8
    12b4:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
    12b6:	4639      	mov	r1, r7
    12b8:	4630      	mov	r0, r6
    12ba:	f7ff fef7 	bl	10ac <_printk_dec_ulong>
			might_format = 0;
    12be:	2500      	movs	r5, #0
				break;
    12c0:	e779      	b.n	11b6 <_vprintk+0x32>
				if (long_ctr < 2) {
    12c2:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
    12c6:	bfc5      	ittet	gt
    12c8:	3407      	addgt	r4, #7
    12ca:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
    12ce:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
    12d0:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    12d2:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
    12d6:	bfcc      	ite	gt
    12d8:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
    12dc:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
    12de:	4643      	mov	r3, r8
    12e0:	e7e9      	b.n	12b6 <_vprintk+0x132>
				  out('0', ctx);
    12e2:	4639      	mov	r1, r7
    12e4:	2030      	movs	r0, #48	; 0x30
    12e6:	47b0      	blx	r6
				  out('x', ctx);
    12e8:	4639      	mov	r1, r7
    12ea:	2078      	movs	r0, #120	; 0x78
    12ec:	47b0      	blx	r6
				  min_width = 8;
    12ee:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
    12f2:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
    12f6:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
    12fa:	bfc7      	ittee	gt
    12fc:	3407      	addgt	r4, #7
    12fe:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
    1302:	6823      	ldrle	r3, [r4, #0]
    1304:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
    1306:	bfc2      	ittt	gt
    1308:	f103 0408 	addgt.w	r4, r3, #8
    130c:	681b      	ldrgt	r3, [r3, #0]
    130e:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
    1310:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
    1314:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
    1318:	bfd8      	it	le
    131a:	3404      	addle	r4, #4
	int digits = 0;
    131c:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
    131e:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
    1320:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    1322:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    1326:	9b05      	ldr	r3, [sp, #20]
    1328:	ea4f 008b 	mov.w	r0, fp, lsl #2
    132c:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
    1330:	f010 000f 	ands.w	r0, r0, #15
    1334:	d109      	bne.n	134a <_vprintk+0x1c6>
    1336:	9b07      	ldr	r3, [sp, #28]
    1338:	b913      	cbnz	r3, 1340 <_vprintk+0x1bc>
    133a:	f1bb 0f00 	cmp.w	fp, #0
    133e:	d122      	bne.n	1386 <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
    1340:	f04f 0e30 	mov.w	lr, #48	; 0x30
    1344:	e007      	b.n	1356 <_vprintk+0x1d2>
	for (; size; size--) {
    1346:	9a06      	ldr	r2, [sp, #24]
    1348:	e7eb      	b.n	1322 <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
    134a:	2809      	cmp	r0, #9
    134c:	bf8c      	ite	hi
    134e:	f04f 0e57 	movhi.w	lr, #87	; 0x57
    1352:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
    1356:	4639      	mov	r1, r7
    1358:	4470      	add	r0, lr
    135a:	9206      	str	r2, [sp, #24]
    135c:	47b0      	blx	r6
			digits++;
    135e:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
    1360:	9507      	str	r5, [sp, #28]
			digits++;
    1362:	3301      	adds	r3, #1
    1364:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
    1366:	f1bb 0f00 	cmp.w	fp, #0
    136a:	d1ec      	bne.n	1346 <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
    136c:	f1b8 0f03 	cmp.w	r8, #3
    1370:	d1a5      	bne.n	12be <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
    1372:	9b03      	ldr	r3, [sp, #12]
    1374:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
    1378:	2d00      	cmp	r5, #0
    137a:	dda0      	ble.n	12be <_vprintk+0x13a>
			out(' ', ctx);
    137c:	4639      	mov	r1, r7
    137e:	2020      	movs	r0, #32
    1380:	47b0      	blx	r6
    1382:	3d01      	subs	r5, #1
    1384:	e7f8      	b.n	1378 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
    1386:	1e53      	subs	r3, r2, #1
    1388:	4591      	cmp	r9, r2
    138a:	9306      	str	r3, [sp, #24]
    138c:	dbeb      	blt.n	1366 <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
    138e:	f1b8 0f01 	cmp.w	r8, #1
    1392:	d103      	bne.n	139c <_vprintk+0x218>
				out('0', ctx);
    1394:	4639      	mov	r1, r7
    1396:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    1398:	47b0      	blx	r6
    139a:	e7e4      	b.n	1366 <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
    139c:	f1b8 0f02 	cmp.w	r8, #2
    13a0:	d1e1      	bne.n	1366 <_vprintk+0x1e2>
				out(' ', ctx);
    13a2:	4639      	mov	r1, r7
    13a4:	2020      	movs	r0, #32
    13a6:	e7f7      	b.n	1398 <_vprintk+0x214>
					out((int)(*s++), ctx);
    13a8:	4639      	mov	r1, r7
    13aa:	9303      	str	r3, [sp, #12]
    13ac:	462c      	mov	r4, r5
    13ae:	47b0      	blx	r6
    13b0:	9b03      	ldr	r3, [sp, #12]
    13b2:	e734      	b.n	121e <_vprintk+0x9a>
						out(' ', ctx);
    13b4:	4639      	mov	r1, r7
    13b6:	2020      	movs	r0, #32
    13b8:	47b0      	blx	r6
    13ba:	3c01      	subs	r4, #1
    13bc:	e73c      	b.n	1238 <_vprintk+0xb4>
				out(c, ctx);
    13be:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
    13c0:	1d25      	adds	r5, r4, #4
				out(c, ctx);
    13c2:	4639      	mov	r1, r7
    13c4:	47b0      	blx	r6
				int c = va_arg(ap, int);
    13c6:	462c      	mov	r4, r5
    13c8:	e779      	b.n	12be <_vprintk+0x13a>
				long_ctr = 0;
    13ca:	46aa      	mov	sl, r5
				padding = PAD_NONE;
    13cc:	46a8      	mov	r8, r5
				min_width = -1;
    13ce:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
    13d2:	2501      	movs	r5, #1
    13d4:	e6ef      	b.n	11b6 <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
    13d6:	f04f 0801 	mov.w	r8, #1
    13da:	e6ec      	b.n	11b6 <_vprintk+0x32>
				char *s = va_arg(ap, char *);
    13dc:	465c      	mov	r4, fp
			might_format = 0;
    13de:	4605      	mov	r5, r0
    13e0:	e6e9      	b.n	11b6 <_vprintk+0x32>
	...

000013e4 <vprintk>:
{
    13e4:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
    13e6:	ac02      	add	r4, sp, #8
    13e8:	2300      	movs	r3, #0
    13ea:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    13ee:	4602      	mov	r2, r0
    13f0:	460b      	mov	r3, r1
    13f2:	4803      	ldr	r0, [pc, #12]	; (1400 <vprintk+0x1c>)
    13f4:	4621      	mov	r1, r4
    13f6:	f7ff fec5 	bl	1184 <_vprintk>
}
    13fa:	9801      	ldr	r0, [sp, #4]
    13fc:	b002      	add	sp, #8
    13fe:	bd10      	pop	{r4, pc}
    1400:	0000109d 	.word	0x0000109d

00001404 <printk>:
{
    1404:	b40f      	push	{r0, r1, r2, r3}
    1406:	b507      	push	{r0, r1, r2, lr}
    1408:	a904      	add	r1, sp, #16
    140a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    140e:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    1410:	f7ff ffe8 	bl	13e4 <vprintk>
}
    1414:	b003      	add	sp, #12
    1416:	f85d eb04 	ldr.w	lr, [sp], #4
    141a:	b004      	add	sp, #16
    141c:	4770      	bx	lr
	...

00001420 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    1420:	b40c      	push	{r2, r3}
    1422:	b530      	push	{r4, r5, lr}
    1424:	b085      	sub	sp, #20
    1426:	ab08      	add	r3, sp, #32
    1428:	4604      	mov	r4, r0
    142a:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
    142e:	9001      	str	r0, [sp, #4]
    1430:	9102      	str	r1, [sp, #8]
    1432:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    1434:	a901      	add	r1, sp, #4
    1436:	4807      	ldr	r0, [pc, #28]	; (1454 <snprintk+0x34>)
	va_start(ap, fmt);
    1438:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
    143a:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    143c:	f7ff fea2 	bl	1184 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    1440:	9803      	ldr	r0, [sp, #12]
    1442:	9b02      	ldr	r3, [sp, #8]
    1444:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1446:	bfb8      	it	lt
    1448:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    144a:	b005      	add	sp, #20
    144c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    1450:	b002      	add	sp, #8
    1452:	4770      	bx	lr
    1454:	0000114d 	.word	0x0000114d

00001458 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_NET_BUF_USER_DATA_SIZE, 4);
GEN_ABSOLUTE_SYM(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_CMSIS, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_NRFX, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 46);
    1458:	4770      	bx	lr
	...

0000145c <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    145c:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    145e:	4c11      	ldr	r4, [pc, #68]	; (14a4 <sys_rand32_get+0x48>)
    1460:	f3bf 8f5b 	dmb	ish
    1464:	6820      	ldr	r0, [r4, #0]
    1466:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    146a:	b960      	cbnz	r0, 1486 <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
    146c:	480e      	ldr	r0, [pc, #56]	; (14a8 <sys_rand32_get+0x4c>)
    146e:	f00a fad5 	bl	ba1c <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1472:	f3bf 8f5b 	dmb	ish
    1476:	e854 3f00 	ldrex	r3, [r4]
    147a:	e844 0200 	strex	r2, r0, [r4]
    147e:	2a00      	cmp	r2, #0
    1480:	d1f9      	bne.n	1476 <sys_rand32_get+0x1a>
    1482:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    1486:	6843      	ldr	r3, [r0, #4]
    1488:	2204      	movs	r2, #4
    148a:	681b      	ldr	r3, [r3, #0]
    148c:	eb0d 0102 	add.w	r1, sp, r2
    1490:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    1492:	2800      	cmp	r0, #0
    1494:	da02      	bge.n	149c <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    1496:	f000 fd0d 	bl	1eb4 <_timer_cycle_get_32>
    149a:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    149c:	9801      	ldr	r0, [sp, #4]
    149e:	b002      	add	sp, #8
    14a0:	bd10      	pop	{r4, pc}
    14a2:	bf00      	nop
    14a4:	20000004 	.word	0x20000004
    14a8:	0000d346 	.word	0x0000d346

000014ac <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    14ac:	280a      	cmp	r0, #10
{
    14ae:	b538      	push	{r3, r4, r5, lr}
    14b0:	4604      	mov	r4, r0
    14b2:	4d07      	ldr	r5, [pc, #28]	; (14d0 <console_out+0x24>)
	if ('\n' == c) {
    14b4:	d104      	bne.n	14c0 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    14b6:	6828      	ldr	r0, [r5, #0]
static inline unsigned char _impl_uart_poll_out(struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;

	return api->poll_out(dev, out_char);
    14b8:	6843      	ldr	r3, [r0, #4]
    14ba:	210d      	movs	r1, #13
    14bc:	685b      	ldr	r3, [r3, #4]
    14be:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    14c0:	6828      	ldr	r0, [r5, #0]
    14c2:	6843      	ldr	r3, [r0, #4]
    14c4:	b2e1      	uxtb	r1, r4
    14c6:	685b      	ldr	r3, [r3, #4]
    14c8:	4798      	blx	r3

	return c;
}
    14ca:	4620      	mov	r0, r4
    14cc:	bd38      	pop	{r3, r4, r5, pc}
    14ce:	bf00      	nop
    14d0:	20000008 	.word	0x20000008

000014d4 <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    14d4:	4801      	ldr	r0, [pc, #4]	; (14dc <uart_console_hook_install+0x8>)
    14d6:	f7ff be4f 	b.w	1178 <__printk_hook_install>
    14da:	bf00      	nop
    14dc:	000014ad 	.word	0x000014ad

000014e0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    14e0:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    14e2:	4804      	ldr	r0, [pc, #16]	; (14f4 <uart_console_init+0x14>)
    14e4:	f00a fa9a 	bl	ba1c <device_get_binding>
    14e8:	4b03      	ldr	r3, [pc, #12]	; (14f8 <uart_console_init+0x18>)
    14ea:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    14ec:	f7ff fff2 	bl	14d4 <uart_console_hook_install>

	return 0;
}
    14f0:	2000      	movs	r0, #0
    14f2:	bd08      	pop	{r3, pc}
    14f4:	0000d350 	.word	0x0000d350
    14f8:	20000008 	.word	0x20000008

000014fc <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    14fc:	b510      	push	{r4, lr}
    14fe:	f04f 0320 	mov.w	r3, #32
    1502:	f3ef 8211 	mrs	r2, BASEPRI
    1506:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    150a:	4c11      	ldr	r4, [pc, #68]	; (1550 <_m16src_stop+0x54>)
    150c:	7823      	ldrb	r3, [r4, #0]
    150e:	b923      	cbnz	r3, 151a <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1510:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    1514:	f06f 0044 	mvn.w	r0, #68	; 0x44
    1518:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    151a:	3b01      	subs	r3, #1
    151c:	b2db      	uxtb	r3, r3
    151e:	7023      	strb	r3, [r4, #0]
    1520:	b123      	cbz	r3, 152c <_m16src_stop+0x30>
    1522:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    1526:	f06f 000f 	mvn.w	r0, #15
    152a:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    152c:	4b09      	ldr	r3, [pc, #36]	; (1554 <_m16src_stop+0x58>)
    152e:	7818      	ldrb	r0, [r3, #0]
    1530:	2101      	movs	r1, #1
    1532:	b128      	cbz	r0, 1540 <_m16src_stop+0x44>
		m16src_ref++;
    1534:	7021      	strb	r1, [r4, #0]
    1536:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    153a:	f06f 000a 	mvn.w	r0, #10
    153e:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    1540:	7019      	strb	r1, [r3, #0]
    1542:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    1546:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    154a:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    154c:	7018      	strb	r0, [r3, #0]

	return 0;
}
    154e:	bd10      	pop	{r4, pc}
    1550:	2000000e 	.word	0x2000000e
    1554:	2000000d 	.word	0x2000000d

00001558 <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    1558:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    155a:	2200      	movs	r2, #0
    155c:	4610      	mov	r0, r2
    155e:	2101      	movs	r1, #1
    1560:	f7ff fc28 	bl	db4 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    1564:	2000      	movs	r0, #0
    1566:	f7ff fbf3 	bl	d50 <_arch_irq_enable>

	return 0;
}
    156a:	2000      	movs	r0, #0
    156c:	bd08      	pop	{r3, pc}
	...

00001570 <_m16src_start>:
{
    1570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    1572:	f04f 0220 	mov.w	r2, #32
    1576:	f3ef 8311 	mrs	r3, BASEPRI
    157a:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    157e:	4a25      	ldr	r2, [pc, #148]	; (1614 <_m16src_start+0xa4>)
    1580:	7810      	ldrb	r0, [r2, #0]
    1582:	1c44      	adds	r4, r0, #1
    1584:	7014      	strb	r4, [r2, #0]
    1586:	b160      	cbz	r0, 15a2 <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1588:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    158c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1590:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    1594:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1598:	bf14      	ite	ne
    159a:	2000      	movne	r0, #0
    159c:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    15a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    15a2:	4d1d      	ldr	r5, [pc, #116]	; (1618 <_m16src_start+0xa8>)
    15a4:	782f      	ldrb	r7, [r5, #0]
    15a6:	b12f      	cbz	r7, 15b4 <_m16src_start+0x44>
		m16src_ref--;
    15a8:	7010      	strb	r0, [r2, #0]
    15aa:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    15ae:	f06f 000a 	mvn.w	r0, #10
    15b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    15b4:	2601      	movs	r6, #1
    15b6:	702e      	strb	r6, [r5, #0]
    15b8:	f383 8811 	msr	BASEPRI, r3
    15bc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    15c0:	b319      	cbz	r1, 160a <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    15c2:	4638      	mov	r0, r7
    15c4:	f7ff fbd4 	bl	d70 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    15c8:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    15cc:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    15d0:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    15d4:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    15d6:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    15da:	b192      	cbz	r2, 1602 <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    15dc:	2200      	movs	r2, #0
    15de:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15e2:	4a0e      	ldr	r2, [pc, #56]	; (161c <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    15e4:	f013 0f01 	tst.w	r3, #1
    15e8:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    15ec:	bf08      	it	eq
    15ee:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    15f2:	2000      	movs	r0, #0
    15f4:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    15f8:	f7ff fbaa 	bl	d50 <_arch_irq_enable>
	m16src_grd = 0;
    15fc:	2300      	movs	r3, #0
    15fe:	702b      	strb	r3, [r5, #0]
    1600:	e7c4      	b.n	158c <_m16src_start+0x1c>
			__WFE();
    1602:	bf20      	wfe
			__SEV();
    1604:	bf40      	sev
			__WFE();
    1606:	bf20      	wfe
    1608:	e7e5      	b.n	15d6 <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    160a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    160e:	6026      	str	r6, [r4, #0]
    1610:	e7f4      	b.n	15fc <_m16src_start+0x8c>
    1612:	bf00      	nop
    1614:	2000000e 	.word	0x2000000e
    1618:	2000000d 	.word	0x2000000d
    161c:	e000e100 	.word	0xe000e100

00001620 <_k32src_start>:
{
    1620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1622:	4606      	mov	r6, r0
    1624:	460c      	mov	r4, r1
	__asm__ volatile(
    1626:	f04f 0220 	mov.w	r2, #32
    162a:	f3ef 8311 	mrs	r3, BASEPRI
    162e:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    1632:	4a2c      	ldr	r2, [pc, #176]	; (16e4 <_k32src_start+0xc4>)
    1634:	7815      	ldrb	r5, [r2, #0]
    1636:	b165      	cbz	r5, 1652 <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1638:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    163c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1640:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    1644:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    1648:	bf0c      	ite	eq
    164a:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    164e:	2000      	movne	r0, #0
    1650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    1652:	2701      	movs	r7, #1
    1654:	7017      	strb	r7, [r2, #0]
    1656:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    165a:	4628      	mov	r0, r5
    165c:	f7ff fb88 	bl	d70 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1660:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    1664:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1666:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    166a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    166e:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    1672:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    1676:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1678:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    167c:	b371      	cbz	r1, 16dc <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    167e:	0792      	lsls	r2, r2, #30
    1680:	4f19      	ldr	r7, [pc, #100]	; (16e8 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1682:	bf58      	it	pl
    1684:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1686:	f04f 0100 	mov.w	r1, #0
    168a:	f04f 0501 	mov.w	r5, #1
    168e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    1692:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1696:	bf58      	it	pl
    1698:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    169c:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    16a0:	f7ff fb56 	bl	d50 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    16a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    16a8:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    16aa:	2218      	movs	r2, #24
    16ac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    16b0:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    16b4:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    16b8:	f014 0103 	ands.w	r1, r4, #3
    16bc:	d1be      	bne.n	163c <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    16be:	2010      	movs	r0, #16
    16c0:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    16c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    16c8:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    16ca:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    16ce:	f7ff ff4f 	bl	1570 <_m16src_start>
		if (!err) {
    16d2:	2800      	cmp	r0, #0
    16d4:	d1b2      	bne.n	163c <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    16d6:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    16da:	e7af      	b.n	163c <_k32src_start+0x1c>
		__WFE();
    16dc:	bf20      	wfe
		__SEV();
    16de:	bf40      	sev
		__WFE();
    16e0:	bf20      	wfe
    16e2:	e7c9      	b.n	1678 <_k32src_start+0x58>
    16e4:	2000000c 	.word	0x2000000c
    16e8:	e000e100 	.word	0xe000e100

000016ec <_power_clock_isr>:
{
    16ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    16ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    16f2:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    16f4:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    16f8:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    16fc:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    1700:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    1704:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1708:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    170c:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1710:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    1714:	f1be 0f00 	cmp.w	lr, #0
    1718:	d003      	beq.n	1722 <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    171a:	f04f 0e00 	mov.w	lr, #0
    171e:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    1722:	b127      	cbz	r7, 172e <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1724:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1728:	2700      	movs	r7, #0
    172a:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    172e:	b13a      	cbz	r2, 1740 <_power_clock_isr+0x54>
    1730:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1732:	bf41      	itttt	mi
    1734:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    1738:	2201      	movmi	r2, #1
    173a:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    173e:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    1740:	b120      	cbz	r0, 174c <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1742:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1746:	2200      	movs	r2, #0
    1748:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    174c:	b149      	cbz	r1, 1762 <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    174e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    1752:	2100      	movs	r1, #0
    1754:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    1758:	4628      	mov	r0, r5
    175a:	f7ff fecf 	bl	14fc <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    175e:	2301      	movs	r3, #1
    1760:	6163      	str	r3, [r4, #20]
	if (ctto) {
    1762:	b176      	cbz	r6, 1782 <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    1764:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1768:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    176a:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    176c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    1770:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1772:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1776:	f7ff fefb 	bl	1570 <_m16src_start>
		if (!err) {
    177a:	b910      	cbnz	r0, 1782 <_power_clock_isr+0x96>
    177c:	4b01      	ldr	r3, [pc, #4]	; (1784 <_power_clock_isr+0x98>)
    177e:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    1782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1784:	e000e100 	.word	0xe000e100

00001788 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1788:	6803      	ldr	r3, [r0, #0]
    178a:	689b      	ldr	r3, [r3, #8]
    178c:	689a      	ldr	r2, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
    178e:	6883      	ldr	r3, [r0, #8]
{
    1790:	b510      	push	{r4, lr}
		if ((data->gpiote_chan_mask & BIT(i)) &&
    1792:	68dc      	ldr	r4, [r3, #12]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    1794:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
    1796:	fa24 f300 	lsr.w	r3, r4, r0
    179a:	07db      	lsls	r3, r3, #31
    179c:	d507      	bpl.n	17ae <gpiote_find_channel+0x26>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    179e:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    17a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    17a6:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    17aa:	428b      	cmp	r3, r1
    17ac:	d004      	beq.n	17b8 <gpiote_find_channel+0x30>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    17ae:	3001      	adds	r0, #1
    17b0:	2808      	cmp	r0, #8
    17b2:	d1f0      	bne.n	1796 <gpiote_find_channel+0xe>
			return i;
		}
	}

	return -ENODEV;
    17b4:	f06f 0012 	mvn.w	r0, #18
}
    17b8:	bd10      	pop	{r4, pc}

000017ba <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    17ba:	6800      	ldr	r0, [r0, #0]
    17bc:	6880      	ldr	r0, [r0, #8]
    17be:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    17c0:	b941      	cbnz	r1, 17d4 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
    17c2:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    17c6:	fa21 f202 	lsr.w	r2, r1, r2
    17ca:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
    17ce:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    17d0:	2000      	movs	r0, #0
    17d2:	4770      	bx	lr
		*value = gpio->IN;
    17d4:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    17d8:	e7f9      	b.n	17ce <gpio_nrf5_read+0x14>

000017da <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    17da:	6800      	ldr	r0, [r0, #0]
    17dc:	6880      	ldr	r0, [r0, #8]
    17de:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    17e0:	b949      	cbnz	r1, 17f6 <gpio_nrf5_write+0x1c>
    17e2:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
    17e4:	4091      	lsls	r1, r2
		if (value) { /* 1 */
    17e6:	b11b      	cbz	r3, 17f0 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
    17e8:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
    17ec:	2000      	movs	r0, #0
    17ee:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
    17f0:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
    17f4:	e7fa      	b.n	17ec <gpio_nrf5_write+0x12>
		gpio->OUT = value;
    17f6:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    17fa:	e7f7      	b.n	17ec <gpio_nrf5_write+0x12>

000017fc <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    17fc:	b510      	push	{r4, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    17fe:	6883      	ldr	r3, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    1800:	b13a      	cbz	r2, 1812 <gpio_nrf5_manage_callback+0x16>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    1802:	681a      	ldr	r2, [r3, #0]
    1804:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
    1806:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    1808:	6019      	str	r1, [r3, #0]
	if (!list->tail) {
    180a:	b902      	cbnz	r2, 180e <gpio_nrf5_manage_callback+0x12>
		list->tail = list->head;
    180c:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    180e:	2000      	movs	r0, #0
    1810:	bd10      	pop	{r4, pc}
    1812:	6818      	ldr	r0, [r3, #0]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    1814:	2800      	cmp	r0, #0
    1816:	d0fa      	beq.n	180e <gpio_nrf5_manage_callback+0x12>
		if (test == node) {
    1818:	4281      	cmp	r1, r0
    181a:	d10e      	bne.n	183a <gpio_nrf5_manage_callback+0x3e>
    181c:	685c      	ldr	r4, [r3, #4]
    181e:	6808      	ldr	r0, [r1, #0]
	if (!prev_node) {
    1820:	b932      	cbnz	r2, 1830 <gpio_nrf5_manage_callback+0x34>
		if (list->tail == node) {
    1822:	42a1      	cmp	r1, r4
		list->head = node->next;
    1824:	6018      	str	r0, [r3, #0]
		if (list->tail == node) {
    1826:	d100      	bne.n	182a <gpio_nrf5_manage_callback+0x2e>
			list->tail = list->head;
    1828:	6058      	str	r0, [r3, #4]
	node->next = NULL;
    182a:	2300      	movs	r3, #0
    182c:	600b      	str	r3, [r1, #0]
    182e:	e7ee      	b.n	180e <gpio_nrf5_manage_callback+0x12>
		if (list->tail == node) {
    1830:	42a1      	cmp	r1, r4
		prev_node->next = node->next;
    1832:	6010      	str	r0, [r2, #0]
			list->tail = prev_node;
    1834:	bf08      	it	eq
    1836:	605a      	streq	r2, [r3, #4]
    1838:	e7f7      	b.n	182a <gpio_nrf5_manage_callback+0x2e>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    183a:	4602      	mov	r2, r0
    183c:	6800      	ldr	r0, [r0, #0]
    183e:	e7e9      	b.n	1814 <gpio_nrf5_manage_callback+0x18>

00001840 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    1840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1842:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1844:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1846:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1848:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    184a:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    184c:	6896      	ldr	r6, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    184e:	b9a1      	cbnz	r1, 187a <gpio_nrf5_enable_callback+0x3a>

		i = gpiote_find_channel(dev, pin);
    1850:	4621      	mov	r1, r4
    1852:	f7ff ff99 	bl	1788 <gpiote_find_channel>
		if (i < 0) {
    1856:	2800      	cmp	r0, #0
    1858:	db11      	blt.n	187e <gpio_nrf5_enable_callback+0x3e>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    185a:	68ba      	ldr	r2, [r7, #8]
    185c:	2301      	movs	r3, #1
    185e:	fa03 f404 	lsl.w	r4, r3, r4
    1862:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    1864:	f100 0240 	add.w	r2, r0, #64	; 0x40
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    1868:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables |= BIT(pin);
    186c:	60bc      	str	r4, [r7, #8]
		gpiote->EVENTS_IN[i] = 0;
    186e:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
		gpiote->INTENSET = BIT(i);
    1872:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    1876:	4628      	mov	r0, r5
    1878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    187a:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    187e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001880 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    1880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1882:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1884:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1886:	6886      	ldr	r6, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1888:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    188a:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    188c:	6897      	ldr	r7, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    188e:	b989      	cbnz	r1, 18b4 <gpio_nrf5_disable_callback+0x34>
		i = gpiote_find_channel(dev, pin);
    1890:	4621      	mov	r1, r4
    1892:	f7ff ff79 	bl	1788 <gpiote_find_channel>
		if (i < 0) {
    1896:	2800      	cmp	r0, #0
    1898:	db0e      	blt.n	18b8 <gpio_nrf5_disable_callback+0x38>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    189a:	68b2      	ldr	r2, [r6, #8]
    189c:	2301      	movs	r3, #1
    189e:	fa03 f404 	lsl.w	r4, r3, r4
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    18a2:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
    18a6:	ea22 0404 	bic.w	r4, r2, r4
    18aa:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
    18ac:	f8c7 0308 	str.w	r0, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    18b0:	4628      	mov	r0, r5
    18b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    18b4:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    18b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000018ba <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    18ba:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    18bc:	2200      	movs	r2, #0
    18be:	2101      	movs	r1, #1
    18c0:	2006      	movs	r0, #6
    18c2:	f7ff fa77 	bl	db4 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    18c6:	2006      	movs	r0, #6
    18c8:	f7ff fa42 	bl	d50 <_arch_irq_enable>

	return 0;
}
    18cc:	2000      	movs	r0, #0
    18ce:	bd08      	pop	{r3, pc}

000018d0 <gpio_nrf5_port_isr>:
{
    18d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    18d2:	6803      	ldr	r3, [r0, #0]
{
    18d4:	4606      	mov	r6, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    18d6:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    18d8:	68b4      	ldr	r4, [r6, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    18da:	6898      	ldr	r0, [r3, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    18dc:	2200      	movs	r2, #0
	u32_t enabled_int, int_status = 0;
    18de:	4613      	mov	r3, r2
			gpiote->EVENTS_IN[i] = 0;
    18e0:	4615      	mov	r5, r2
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    18e2:	2701      	movs	r7, #1
    18e4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
		if (gpiote->EVENTS_IN[i]) {
    18e8:	f8d1 e100 	ldr.w	lr, [r1, #256]	; 0x100
    18ec:	f1be 0f00 	cmp.w	lr, #0
    18f0:	d008      	beq.n	1904 <gpio_nrf5_port_isr+0x34>
			gpiote->EVENTS_IN[i] = 0;
    18f2:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    18f6:	f8d1 1510 	ldr.w	r1, [r1, #1296]	; 0x510
    18fa:	f3c1 2104 	ubfx	r1, r1, #8, #5
    18fe:	fa07 f101 	lsl.w	r1, r7, r1
    1902:	430b      	orrs	r3, r1
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    1904:	3201      	adds	r2, #1
    1906:	2a08      	cmp	r2, #8
    1908:	d1ec      	bne.n	18e4 <gpio_nrf5_port_isr+0x14>
	enabled_int = int_status & data->pin_callback_enables;
    190a:	68a5      	ldr	r5, [r4, #8]
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    190c:	2006      	movs	r0, #6
	enabled_int = int_status & data->pin_callback_enables;
    190e:	401d      	ands	r5, r3
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    1910:	f7ff fa2e 	bl	d70 <_arch_irq_disable>
    1914:	6824      	ldr	r4, [r4, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    1916:	b924      	cbnz	r4, 1922 <gpio_nrf5_port_isr+0x52>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    1918:	2006      	movs	r0, #6
}
    191a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    191e:	f7ff ba17 	b.w	d50 <_arch_irq_enable>
		if (cb->pin_mask & pins) {
    1922:	68a3      	ldr	r3, [r4, #8]
    1924:	421d      	tst	r5, r3
    1926:	d0f5      	beq.n	1914 <gpio_nrf5_port_isr+0x44>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    1928:	6863      	ldr	r3, [r4, #4]
    192a:	462a      	mov	r2, r5
    192c:	4621      	mov	r1, r4
    192e:	4630      	mov	r0, r6
    1930:	4798      	blx	r3
    1932:	e7ef      	b.n	1914 <gpio_nrf5_port_isr+0x44>

00001934 <gpio_nrf5_config>:
{
    1934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1938:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    193a:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    193c:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    193e:	6892      	ldr	r2, [r2, #8]
{
    1940:	4680      	mov	r8, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1942:	6895      	ldr	r5, [r2, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    1944:	6810      	ldr	r0, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    1946:	b119      	cbz	r1, 1950 <gpio_nrf5_config+0x1c>
		return -ENOTSUP;
    1948:	f06f 0022 	mvn.w	r0, #34	; 0x22
    194c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    1950:	f403 7240 	and.w	r2, r3, #768	; 0x300
    1954:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    1958:	f3c3 3101 	ubfx	r1, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    195c:	f3c3 3981 	ubfx	r9, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    1960:	f403 3e40 	and.w	lr, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    1964:	d056      	beq.n	1a14 <gpio_nrf5_config+0xe0>
		u8_t pull = GPIO_PULL_DISABLE;
    1966:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    196a:	bf0c      	ite	eq
    196c:	2204      	moveq	r2, #4
    196e:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
    1970:	f5be 3f80 	cmp.w	lr, #65536	; 0x10000
    1974:	bf08      	it	eq
    1976:	f04f 0e00 	moveq.w	lr, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    197a:	f013 0f01 	tst.w	r3, #1
    197e:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 1a48 <gpio_nrf5_config+0x114>
    1982:	ea4f 0181 	mov.w	r1, r1, lsl #2
    1986:	f504 76e0 	add.w	r6, r4, #448	; 0x1c0
    198a:	d04e      	beq.n	1a2a <gpio_nrf5_config+0xf6>
			if (pull == GPIO_PULL_UP) {
    198c:	2a0c      	cmp	r2, #12
    198e:	d143      	bne.n	1a18 <gpio_nrf5_config+0xe4>
				gpio->OUTSET = BIT(pin);
    1990:	f04f 0e01 	mov.w	lr, #1
    1994:	fa0e fe04 	lsl.w	lr, lr, r4
    1998:	f8c0 e508 	str.w	lr, [r0, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
    199c:	4449      	add	r1, r9
					      GPIO_INPUT_DISCONNECT |
    199e:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    19a2:	f041 0103 	orr.w	r1, r1, #3
    19a6:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
    19a8:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
	if (flags & GPIO_INT) {
    19ac:	f013 0002 	ands.w	r0, r3, #2
    19b0:	d047      	beq.n	1a42 <gpio_nrf5_config+0x10e>
		if (flags & GPIO_INT_EDGE) {
    19b2:	0699      	lsls	r1, r3, #26
    19b4:	d5c8      	bpl.n	1948 <gpio_nrf5_config+0x14>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    19b6:	065a      	lsls	r2, r3, #25
    19b8:	d43e      	bmi.n	1a38 <gpio_nrf5_config+0x104>
				config |= GPIOTE_CFG_POL_H2L;
    19ba:	f013 0f04 	tst.w	r3, #4
    19be:	bf14      	ite	ne
    19c0:	f44f 3680 	movne.w	r6, #65536	; 0x10000
    19c4:	f44f 3600 	moveq.w	r6, #131072	; 0x20000
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    19c8:	68f8      	ldr	r0, [r7, #12]
    19ca:	f7fe fc65 	bl	298 <__popcountsi2>
    19ce:	2808      	cmp	r0, #8
    19d0:	d035      	beq.n	1a3e <gpio_nrf5_config+0x10a>
		int i = gpiote_find_channel(dev, pin);
    19d2:	4621      	mov	r1, r4
    19d4:	4640      	mov	r0, r8
    19d6:	f7ff fed7 	bl	1788 <gpiote_find_channel>
		if (i < 0) {
    19da:	2800      	cmp	r0, #0
    19dc:	68fb      	ldr	r3, [r7, #12]
    19de:	da08      	bge.n	19f2 <gpio_nrf5_config+0xbe>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    19e0:	43da      	mvns	r2, r3
    19e2:	fa92 f0a2 	rbit	r0, r2
    19e6:	2a00      	cmp	r2, #0
    19e8:	fab0 f080 	clz	r0, r0
    19ec:	bf08      	it	eq
    19ee:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		config |= GPIOTE_CFG_PIN(pin);
    19f2:	0224      	lsls	r4, r4, #8
		data->gpiote_chan_mask |= BIT(i);
    19f4:	2201      	movs	r2, #1
		config |= GPIOTE_CFG_PIN(pin);
    19f6:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		data->gpiote_chan_mask |= BIT(i);
    19fa:	4082      	lsls	r2, r0
		config |= GPIOTE_CFG_PIN(pin);
    19fc:	f044 0401 	orr.w	r4, r4, #1
		gpiote->CONFIG[i] = config;
    1a00:	f500 70a2 	add.w	r0, r0, #324	; 0x144
		data->gpiote_chan_mask |= BIT(i);
    1a04:	4313      	orrs	r3, r2
		config |= GPIOTE_CFG_PIN(pin);
    1a06:	4334      	orrs	r4, r6
		data->gpiote_chan_mask |= BIT(i);
    1a08:	60fb      	str	r3, [r7, #12]
		gpiote->CONFIG[i] = config;
    1a0a:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
	return 0;
    1a0e:	2000      	movs	r0, #0
    1a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pull = GPIO_PULL_UP;
    1a14:	220c      	movs	r2, #12
    1a16:	e7ab      	b.n	1970 <gpio_nrf5_config+0x3c>
			} else if (pull == GPIO_PULL_DOWN) {
    1a18:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
    1a1a:	bf02      	ittt	eq
    1a1c:	f04f 0e01 	moveq.w	lr, #1
    1a20:	fa0e fe04 	lsleq.w	lr, lr, r4
    1a24:	f8c0 e50c 	streq.w	lr, [r0, #1292]	; 0x50c
    1a28:	e7b8      	b.n	199c <gpio_nrf5_config+0x68>
					      drive_strength[ds_low][ds_high] |
    1a2a:	4449      	add	r1, r9
    1a2c:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    1a30:	430a      	orrs	r2, r1
    1a32:	ea42 020e 	orr.w	r2, r2, lr
    1a36:	e7b7      	b.n	19a8 <gpio_nrf5_config+0x74>
				config |= GPIOTE_CFG_POL_TOGG;
    1a38:	f44f 3640 	mov.w	r6, #196608	; 0x30000
    1a3c:	e7c4      	b.n	19c8 <gpio_nrf5_config+0x94>
			return -EIO;
    1a3e:	f06f 0004 	mvn.w	r0, #4
}
    1a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1a46:	bf00      	nop
    1a48:	0000d388 	.word	0x0000d388

00001a4c <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1a4c:	6803      	ldr	r3, [r0, #0]
    1a4e:	689b      	ldr	r3, [r3, #8]
    1a50:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    1a52:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    1a56:	b132      	cbz	r2, 1a66 <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    1a58:	2000      	movs	r0, #0
    1a5a:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    1a5e:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    1a62:	700b      	strb	r3, [r1, #0]

	return 0;
    1a64:	4770      	bx	lr
		return -1;
    1a66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1a6a:	4770      	bx	lr

00001a6c <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1a6c:	6803      	ldr	r3, [r0, #0]
    1a6e:	689b      	ldr	r3, [r3, #8]
    1a70:	681b      	ldr	r3, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    1a72:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    1a76:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
    1a7a:	2a00      	cmp	r2, #0
    1a7c:	d0fb      	beq.n	1a76 <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    1a7e:	2200      	movs	r2, #0
    1a80:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	return c;
}
    1a84:	4608      	mov	r0, r1
    1a86:	4770      	bx	lr

00001a88 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1a88:	6803      	ldr	r3, [r0, #0]
    1a8a:	689b      	ldr	r3, [r3, #8]
    1a8c:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    1a8e:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
    1a92:	b118      	cbz	r0, 1a9c <uart_nrf5_err_check+0x14>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    1a94:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    1a98:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    1a9c:	f000 000f 	and.w	r0, r0, #15
    1aa0:	4770      	bx	lr
	...

00001aa4 <uart_nrf5_init>:
{
    1aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
    1aa6:	6803      	ldr	r3, [r0, #0]
    1aa8:	689b      	ldr	r3, [r3, #8]
{
    1aaa:	4605      	mov	r5, r0
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    1aac:	4818      	ldr	r0, [pc, #96]	; (1b10 <uart_nrf5_init+0x6c>)
	volatile struct _uart *uart = UART_STRUCT(dev);
    1aae:	681c      	ldr	r4, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    1ab0:	f009 ffb4 	bl	ba1c <device_get_binding>
static inline int _impl_gpio_config(struct device *port, int access_op,
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, access_op, pin, flags);
    1ab4:	6843      	ldr	r3, [r0, #4]
    1ab6:	4606      	mov	r6, r0
    1ab8:	681f      	ldr	r7, [r3, #0]
    1aba:	2206      	movs	r2, #6
    1abc:	f240 1301 	movw	r3, #257	; 0x101
    1ac0:	2100      	movs	r1, #0
    1ac2:	47b8      	blx	r7
    1ac4:	6873      	ldr	r3, [r6, #4]
    1ac6:	681f      	ldr	r7, [r3, #0]
    1ac8:	2300      	movs	r3, #0
    1aca:	4619      	mov	r1, r3
    1acc:	2208      	movs	r2, #8
    1ace:	4630      	mov	r0, r6
    1ad0:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    1ad2:	2306      	movs	r3, #6
    1ad4:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    1ad8:	2308      	movs	r3, #8
    1ada:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    1ade:	68ab      	ldr	r3, [r5, #8]
    1ae0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    1ae4:	601a      	str	r2, [r3, #0]
	volatile struct _uart *uart = UART_STRUCT(dev);
    1ae6:	682b      	ldr	r3, [r5, #0]
    1ae8:	689b      	ldr	r3, [r3, #8]
    1aea:	681b      	ldr	r3, [r3, #0]
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    1aec:	f04f 72eb 	mov.w	r2, #30801920	; 0x1d60000
    1af0:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    1af4:	2304      	movs	r3, #4
    1af6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    1afa:	2000      	movs	r0, #0
	uart->TASKS_STARTTX = 1;
    1afc:	2301      	movs	r3, #1
	uart->EVENTS_TXDRDY = 0;
    1afe:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    1b02:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    1b06:	60a3      	str	r3, [r4, #8]
	uart->TASKS_STARTRX = 1;
    1b08:	6023      	str	r3, [r4, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    1b0a:	4b02      	ldr	r3, [pc, #8]	; (1b14 <uart_nrf5_init+0x70>)
    1b0c:	606b      	str	r3, [r5, #4]
}
    1b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b10:	0000d3f0 	.word	0x0000d3f0
    1b14:	0000d400 	.word	0x0000d400

00001b18 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
    1b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
    1b1c:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
    1b1e:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
    1b20:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
    1b22:	42a3      	cmp	r3, r4
	d = &rand[octets];
    1b24:	440a      	add	r2, r1
	s = &rng->rand[first];
    1b26:	4406      	add	r6, r0
	if (first <= last) {
    1b28:	d81f      	bhi.n	1b6a <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
    1b2a:	1ae4      	subs	r4, r4, r3
    1b2c:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    1b2e:	42a1      	cmp	r1, r4
			remaining = avail - octets;
    1b30:	bf3e      	ittt	cc
    1b32:	1a64      	subcc	r4, r4, r1
    1b34:	b2e7      	uxtbcc	r7, r4
    1b36:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
    1b38:	4423      	add	r3, r4
		octets -= avail;
    1b3a:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
    1b3e:	bf28      	it	cs
    1b40:	2700      	movcs	r7, #0
		first += avail;
    1b42:	b2db      	uxtb	r3, r3
		octets -= avail;
    1b44:	b2c9      	uxtb	r1, r1
    1b46:	4434      	add	r4, r6

		while (avail--) {
    1b48:	42a6      	cmp	r6, r4
    1b4a:	d109      	bne.n	1b60 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
    1b4c:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
    1b4e:	7843      	ldrb	r3, [r0, #1]
    1b50:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
    1b52:	bf82      	ittt	hi
    1b54:	4b20      	ldrhi	r3, [pc, #128]	; (1bd8 <get+0xc0>)
    1b56:	2201      	movhi	r2, #1
    1b58:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
    1b5a:	4608      	mov	r0, r1
    1b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
    1b60:	f816 5b01 	ldrb.w	r5, [r6], #1
    1b64:	f802 5d01 	strb.w	r5, [r2, #-1]!
    1b68:	e7ee      	b.n	1b48 <get+0x30>
		avail = rng->count - first;
    1b6a:	7805      	ldrb	r5, [r0, #0]
    1b6c:	1aed      	subs	r5, r5, r3
    1b6e:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
    1b70:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
    1b72:	bf3f      	itttt	cc
    1b74:	1a67      	subcc	r7, r4, r1
    1b76:	19ed      	addcc	r5, r5, r7
    1b78:	b2ef      	uxtbcc	r7, r5
    1b7a:	460d      	movcc	r5, r1
			first += avail;
    1b7c:	bf38      	it	cc
    1b7e:	185b      	addcc	r3, r3, r1
		octets -= avail;
    1b80:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
    1b84:	bf32      	itee	cc
    1b86:	b2db      	uxtbcc	r3, r3
    1b88:	4627      	movcs	r7, r4
			first = 0;
    1b8a:	2300      	movcs	r3, #0
		octets -= avail;
    1b8c:	b2c9      	uxtb	r1, r1
    1b8e:	4696      	mov	lr, r2
    1b90:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
    1b94:	4566      	cmp	r6, ip
    1b96:	d119      	bne.n	1bcc <get+0xb4>
    1b98:	1b52      	subs	r2, r2, r5
		if (octets && last) {
    1b9a:	2900      	cmp	r1, #0
    1b9c:	d0d6      	beq.n	1b4c <get+0x34>
    1b9e:	2c00      	cmp	r4, #0
    1ba0:	d0d4      	beq.n	1b4c <get+0x34>
			if (octets < last) {
    1ba2:	428c      	cmp	r4, r1
    1ba4:	bf8a      	itet	hi
    1ba6:	460b      	movhi	r3, r1
    1ba8:	4623      	movls	r3, r4
				remaining = last - octets;
    1baa:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
    1bac:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
    1bb0:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
    1bb4:	bf8c      	ite	hi
    1bb6:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
    1bb8:	2700      	movls	r7, #0
			octets -= last;
    1bba:	b2c9      	uxtb	r1, r1
    1bbc:	18f4      	adds	r4, r6, r3
			while (last--) {
    1bbe:	42a6      	cmp	r6, r4
    1bc0:	d0c4      	beq.n	1b4c <get+0x34>
				*(--d) = *s++;
    1bc2:	f816 5b01 	ldrb.w	r5, [r6], #1
    1bc6:	f802 5d01 	strb.w	r5, [r2, #-1]!
    1bca:	e7f8      	b.n	1bbe <get+0xa6>
			*(--d) = *s++;
    1bcc:	f816 8b01 	ldrb.w	r8, [r6], #1
    1bd0:	f80e 8d01 	strb.w	r8, [lr, #-1]!
    1bd4:	e7de      	b.n	1b94 <get+0x7c>
    1bd6:	bf00      	nop
    1bd8:	4000d000 	.word	0x4000d000

00001bdc <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
    1bdc:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
    1bde:	b1d0      	cbz	r0, 1c16 <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
    1be0:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
    1be2:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
    1be4:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
    1be6:	1c53      	adds	r3, r2, #1
    1be8:	b2db      	uxtb	r3, r3
		last = 0;
    1bea:	42ab      	cmp	r3, r5
    1bec:	bf08      	it	eq
    1bee:	2300      	moveq	r3, #0
	if (last == rng->first) {
    1bf0:	42a3      	cmp	r3, r4
    1bf2:	d010      	beq.n	1c16 <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    1bf4:	b161      	cbz	r1, 1c10 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    1bf6:	490a      	ldr	r1, [pc, #40]	; (1c20 <isr+0x44>)
    1bf8:	4402      	add	r2, r0
    1bfa:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    1bfe:	7111      	strb	r1, [r2, #4]
	rng->last = last;
    1c00:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
    1c02:	3301      	adds	r3, #1
    1c04:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
    1c06:	429d      	cmp	r5, r3
    1c08:	bf08      	it	eq
    1c0a:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
    1c0c:	42a3      	cmp	r3, r4
    1c0e:	d005      	beq.n	1c1c <isr+0x40>
		return 0;
	}

	return -EBUSY;
    1c10:	f06f 000f 	mvn.w	r0, #15
    1c14:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
    1c16:	f06f 0036 	mvn.w	r0, #54	; 0x36
    1c1a:	bd30      	pop	{r4, r5, pc}
		return 0;
    1c1c:	2000      	movs	r0, #0
}
    1c1e:	bd30      	pop	{r4, r5, pc}
    1c20:	4000d000 	.word	0x4000d000

00001c24 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
    1c24:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1c26:	6884      	ldr	r4, [r0, #8]

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    1c28:	2201      	movs	r2, #1
    1c2a:	4611      	mov	r1, r2
    1c2c:	4620      	mov	r0, r4
    1c2e:	f00a fb21 	bl	c274 <_impl_k_sem_init>
    1c32:	f104 0018 	add.w	r0, r4, #24
    1c36:	2201      	movs	r2, #1
    1c38:	2100      	movs	r1, #0
    1c3a:	f00a fb1b 	bl	c274 <_impl_k_sem_init>
	rng->threshold = threshold;
    1c3e:	2304      	movs	r3, #4
    1c40:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    1c44:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
    1c46:	2500      	movs	r5, #0
	rng->threshold = threshold;
    1c48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
    1c4c:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    1c4e:	4b11      	ldr	r3, [pc, #68]	; (1c94 <entropy_nrf5_init+0x70>)
	rng->count = len;
    1c50:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    1c54:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
    1c56:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
    1c5a:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
    1c5e:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
    1c62:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
    1c66:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    1c6a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    1c6e:	f042 0201 	orr.w	r2, r2, #1
    1c72:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    1c76:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
    1c78:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    1c7c:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    1c7e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
    1c82:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    1c84:	462a      	mov	r2, r5
    1c86:	f7ff f895 	bl	db4 <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
    1c8a:	4630      	mov	r0, r6
    1c8c:	f7ff f860 	bl	d50 <_arch_irq_enable>

	return 0;
}
    1c90:	4628      	mov	r0, r5
    1c92:	bd70      	pop	{r4, r5, r6, pc}
    1c94:	4000d000 	.word	0x4000d000

00001c98 <isr_rand>:
{
    1c98:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
    1c9a:	4b12      	ldr	r3, [pc, #72]	; (1ce4 <isr_rand+0x4c>)
    1c9c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    1ca0:	b1fb      	cbz	r3, 1ce2 <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1ca2:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
    1ca4:	2101      	movs	r1, #1
    1ca6:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    1caa:	f7ff ff97 	bl	1bdc <isr>
		if (ret != -EBUSY) {
    1cae:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
    1cb2:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
    1cb4:	d00d      	beq.n	1cd2 <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
    1cb6:	f110 0437 	adds.w	r4, r0, #55	; 0x37
    1cba:	bf14      	ite	ne
    1cbc:	2100      	movne	r1, #0
    1cbe:	2101      	moveq	r1, #1
    1cc0:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1cc4:	f7ff ff8a 	bl	1bdc <isr>
    1cc8:	4604      	mov	r4, r0

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1cca:	f105 0018 	add.w	r0, r5, #24
    1cce:	f00a fadb 	bl	c288 <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
    1cd2:	4b04      	ldr	r3, [pc, #16]	; (1ce4 <isr_rand+0x4c>)
    1cd4:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
    1cd6:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
    1cd8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
    1cdc:	bf1c      	itt	ne
    1cde:	2201      	movne	r2, #1
    1ce0:	605a      	strne	r2, [r3, #4]
    1ce2:	bd38      	pop	{r3, r4, r5, pc}
    1ce4:	4000d000 	.word	0x4000d000

00001ce8 <entropy_nrf5_get_entropy>:
{
    1ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1cec:	6885      	ldr	r5, [r0, #8]
{
    1cee:	460f      	mov	r7, r1
    1cf0:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
    1cf2:	f105 0818 	add.w	r8, r5, #24
	while (len) {
    1cf6:	b914      	cbnz	r4, 1cfe <entropy_nrf5_get_entropy+0x16>
}
    1cf8:	4620      	mov	r0, r4
    1cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1cfe:	2cff      	cmp	r4, #255	; 0xff
    1d00:	4623      	mov	r3, r4
    1d02:	bf28      	it	cs
    1d04:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
    1d06:	1ae4      	subs	r4, r4, r3
    1d08:	b2de      	uxtb	r6, r3
    1d0a:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
    1d0c:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1d10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1d14:	4628      	mov	r0, r5
    1d16:	f00a fb17 	bl	c348 <_impl_k_sem_take>
    1d1a:	4631      	mov	r1, r6
    1d1c:	463a      	mov	r2, r7
    1d1e:	4648      	mov	r0, r9
    1d20:	f7ff fefa 	bl	1b18 <get>
    1d24:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1d26:	4628      	mov	r0, r5
    1d28:	f00a faae 	bl	c288 <_impl_k_sem_give>
			if (len8) {
    1d2c:	2e00      	cmp	r6, #0
    1d2e:	d0e2      	beq.n	1cf6 <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1d30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1d34:	4640      	mov	r0, r8
    1d36:	f00a fb07 	bl	c348 <_impl_k_sem_take>
    1d3a:	e7e9      	b.n	1d10 <entropy_nrf5_get_entropy+0x28>

00001d3c <entropy_get_entropy_isr>:

u8_t entropy_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
    1d3c:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
    1d3e:	4802      	ldr	r0, [pc, #8]	; (1d48 <entropy_get_entropy_isr+0xc>)
    1d40:	460a      	mov	r2, r1
    1d42:	4619      	mov	r1, r3
    1d44:	f7ff bee8 	b.w	1b18 <get>
    1d48:	2000005c 	.word	0x2000005c

00001d4c <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1d4c:	4b08      	ldr	r3, [pc, #32]	; (1d70 <rtc_compare_set+0x24>)
    1d4e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    1d52:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    1d56:	1ac0      	subs	r0, r0, r3
    1d58:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d5c:	4b05      	ldr	r3, [pc, #20]	; (1d74 <rtc_compare_set+0x28>)
    1d5e:	3802      	subs	r0, #2
    1d60:	4298      	cmp	r0, r3
    1d62:	bf82      	ittt	hi
    1d64:	4b04      	ldrhi	r3, [pc, #16]	; (1d78 <rtc_compare_set+0x2c>)
    1d66:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    1d6a:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    1d6e:	4770      	bx	lr
    1d70:	40011000 	.word	0x40011000
    1d74:	007ffffd 	.word	0x007ffffd
    1d78:	e000e100 	.word	0xe000e100

00001d7c <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1d7c:	b510      	push	{r4, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1d7e:	4b12      	ldr	r3, [pc, #72]	; (1dc8 <rtc_announce_set_next+0x4c>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1d80:	4c12      	ldr	r4, [pc, #72]	; (1dcc <rtc_announce_set_next+0x50>)
	rtc_now = RTC_COUNTER;
    1d82:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1d86:	6822      	ldr	r2, [r4, #0]
    1d88:	1a80      	subs	r0, r0, r2
    1d8a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    1d8e:	f5b0 7fa3 	cmp.w	r0, #326	; 0x146
    1d92:	d911      	bls.n	1db8 <rtc_announce_set_next+0x3c>
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;

		if (sys_elapsed > expected_sys_ticks) {
    1d94:	490e      	ldr	r1, [pc, #56]	; (1dd0 <rtc_announce_set_next+0x54>)
    1d96:	6809      	ldr	r1, [r1, #0]
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    1d98:	f240 1347 	movw	r3, #327	; 0x147
    1d9c:	fbb0 f0f3 	udiv	r0, r0, r3
    1da0:	4288      	cmp	r0, r1
    1da2:	bf28      	it	cs
    1da4:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1da6:	fb03 2300 	mla	r3, r3, r0, r2
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    1daa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1dae:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1db0:	4b08      	ldr	r3, [pc, #32]	; (1dd4 <rtc_announce_set_next+0x58>)
    1db2:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    1db4:	f00a faf0 	bl	c398 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    1db8:	6820      	ldr	r0, [r4, #0]
}
    1dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    1dbe:	f200 1047 	addw	r0, r0, #327	; 0x147
    1dc2:	f7ff bfc3 	b.w	1d4c <rtc_compare_set>
    1dc6:	bf00      	nop
    1dc8:	40011000 	.word	0x40011000
    1dcc:	20000074 	.word	0x20000074
    1dd0:	20000070 	.word	0x20000070
    1dd4:	20003e0c 	.word	0x20003e0c

00001dd8 <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    1dd8:	4b02      	ldr	r3, [pc, #8]	; (1de4 <rtc1_nrf5_isr+0xc>)
    1dda:	2200      	movs	r2, #0
    1ddc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    1de0:	f7ff bfcc 	b.w	1d7c <rtc_announce_set_next>
    1de4:	40011000 	.word	0x40011000

00001de8 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    1de8:	f246 4335 	movw	r3, #25653	; 0x6435
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    1dec:	4298      	cmp	r0, r3
    1dee:	bf28      	it	cs
    1df0:	4618      	movcs	r0, r3
	expected_sys_ticks = sys_ticks;
    1df2:	4b05      	ldr	r3, [pc, #20]	; (1e08 <_timer_idle_enter+0x20>)
    1df4:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    1df6:	4b05      	ldr	r3, [pc, #20]	; (1e0c <_timer_idle_enter+0x24>)
    1df8:	681b      	ldr	r3, [r3, #0]
    1dfa:	f240 1247 	movw	r2, #327	; 0x147
    1dfe:	fb02 3000 	mla	r0, r2, r0, r3
    1e02:	f7ff bfa3 	b.w	1d4c <rtc_compare_set>
    1e06:	bf00      	nop
    1e08:	20000070 	.word	0x20000070
    1e0c:	20000074 	.word	0x20000074

00001e10 <_timer_idle_exit>:
{
    1e10:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    1e12:	4b07      	ldr	r3, [pc, #28]	; (1e30 <_timer_idle_exit+0x20>)
    1e14:	2200      	movs	r2, #0
    1e16:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e1a:	4b06      	ldr	r3, [pc, #24]	; (1e34 <_timer_idle_exit+0x24>)
    1e1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1e20:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    1e24:	f7ff ffaa 	bl	1d7c <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1e28:	4b03      	ldr	r3, [pc, #12]	; (1e38 <_timer_idle_exit+0x28>)
    1e2a:	2201      	movs	r2, #1
    1e2c:	601a      	str	r2, [r3, #0]
    1e2e:	bd08      	pop	{r3, pc}
    1e30:	40011000 	.word	0x40011000
    1e34:	e000e100 	.word	0xe000e100
    1e38:	20000070 	.word	0x20000070

00001e3c <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1e3c:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    1e3e:	4818      	ldr	r0, [pc, #96]	; (1ea0 <_sys_clock_driver_init+0x64>)
    1e40:	f009 fdec 	bl	ba1c <device_get_binding>
	if (!clock) {
    1e44:	b348      	cbz	r0, 1e9a <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1e46:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1e48:	4d16      	ldr	r5, [pc, #88]	; (1ea4 <_sys_clock_driver_init+0x68>)
    1e4a:	681b      	ldr	r3, [r3, #0]
    1e4c:	2101      	movs	r1, #1
    1e4e:	4798      	blx	r3
	rtc_past = 0;
    1e50:	4b15      	ldr	r3, [pc, #84]	; (1ea8 <_sys_clock_driver_init+0x6c>)
    1e52:	2400      	movs	r4, #0
    1e54:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    1e56:	4b15      	ldr	r3, [pc, #84]	; (1eac <_sys_clock_driver_init+0x70>)
    1e58:	2601      	movs	r6, #1
    1e5a:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1e5c:	f240 1347 	movw	r3, #327	; 0x147
	SYS_CLOCK_RTC->PRESCALER = 0;
    1e60:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1e64:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1e68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1e6c:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1e70:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1e74:	4b0e      	ldr	r3, [pc, #56]	; (1eb0 <_sys_clock_driver_init+0x74>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    1e76:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1e7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1e7e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    1e82:	4631      	mov	r1, r6
    1e84:	4622      	mov	r2, r4
    1e86:	2011      	movs	r0, #17
    1e88:	f7fe ff94 	bl	db4 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1e8c:	2011      	movs	r0, #17
    1e8e:	f7fe ff5f 	bl	d50 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    1e92:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    1e94:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    1e96:	602e      	str	r6, [r5, #0]
	return 0;
    1e98:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1e9e:	bd70      	pop	{r4, r5, r6, pc}
    1ea0:	0000d370 	.word	0x0000d370
    1ea4:	40011000 	.word	0x40011000
    1ea8:	20000074 	.word	0x20000074
    1eac:	20000070 	.word	0x20000070
    1eb0:	e000e100 	.word	0xe000e100

00001eb4 <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    1eb4:	b530      	push	{r4, r5, lr}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1eb6:	4a0b      	ldr	r2, [pc, #44]	; (1ee4 <_timer_cycle_get_32+0x30>)
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    1eb8:	480b      	ldr	r0, [pc, #44]	; (1ee8 <_timer_cycle_get_32+0x34>)
	rtc_now = RTC_COUNTER;
    1eba:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
		sys_clock_tick_count = _sys_clock_tick_count;
    1ebe:	e9d0 4500 	ldrd	r4, r5, [r0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    1ec2:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    1ec6:	4299      	cmp	r1, r3
    1ec8:	d10a      	bne.n	1ee0 <_timer_cycle_get_32+0x2c>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    1eca:	4a08      	ldr	r2, [pc, #32]	; (1eec <_timer_cycle_get_32+0x38>)
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    1ecc:	f240 1347 	movw	r3, #327	; 0x147
    1ed0:	fb03 1314 	mls	r3, r3, r4, r1
	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    1ed4:	6810      	ldr	r0, [r2, #0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    1ed6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	       elapsed_cycles;
}
    1eda:	fb00 3004 	mla	r0, r0, r4, r3
    1ede:	bd30      	pop	{r4, r5, pc}
    1ee0:	4619      	mov	r1, r3
    1ee2:	e7ec      	b.n	1ebe <_timer_cycle_get_32+0xa>
    1ee4:	40011000 	.word	0x40011000
    1ee8:	20001bd8 	.word	0x20001bd8
    1eec:	20003e10 	.word	0x20003e10

00001ef0 <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    1ef0:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    1ef2:	f04f 0320 	mov.w	r3, #32
    1ef6:	f3ef 8511 	mrs	r5, BASEPRI
    1efa:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    1efe:	4c14      	ldr	r4, [pc, #80]	; (1f50 <bt_hex+0x60>)
    1f00:	4e14      	ldr	r6, [pc, #80]	; (1f54 <bt_hex+0x64>)
    1f02:	7823      	ldrb	r3, [r4, #0]
    1f04:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
    1f08:	3301      	adds	r3, #1
	curbuf %= ARRAY_SIZE(hexbufs);
    1f0a:	f003 0303 	and.w	r3, r3, #3
	str = hexbufs[curbuf++];
    1f0e:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    1f10:	7023      	strb	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1f12:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    1f16:	2940      	cmp	r1, #64	; 0x40
    1f18:	bf28      	it	cs
    1f1a:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    1f1c:	4d0e      	ldr	r5, [pc, #56]	; (1f58 <bt_hex+0x68>)
    1f1e:	3801      	subs	r0, #1
    1f20:	4613      	mov	r3, r2
    1f22:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	for (i = 0; i < len; i++) {
    1f26:	42b3      	cmp	r3, r6
    1f28:	d104      	bne.n	1f34 <bt_hex+0x44>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    1f2a:	2300      	movs	r3, #0
    1f2c:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    1f30:	4610      	mov	r0, r2
    1f32:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    1f34:	7844      	ldrb	r4, [r0, #1]
    1f36:	0924      	lsrs	r4, r4, #4
    1f38:	3302      	adds	r3, #2
    1f3a:	5d2c      	ldrb	r4, [r5, r4]
    1f3c:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    1f40:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    1f44:	f004 040f 	and.w	r4, r4, #15
    1f48:	5d2c      	ldrb	r4, [r5, r4]
    1f4a:	f803 4c01 	strb.w	r4, [r3, #-1]
    1f4e:	e7ea      	b.n	1f26 <bt_hex+0x36>
    1f50:	200000af 	.word	0x200000af
    1f54:	200000b0 	.word	0x200000b0
    1f58:	0000d41a 	.word	0x0000d41a

00001f5c <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    1f5c:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][BT_ADDR_LE_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1f5e:	4a1d      	ldr	r2, [pc, #116]	; (1fd4 <bt_addr_le_str+0x78>)
    1f60:	491d      	ldr	r1, [pc, #116]	; (1fd8 <bt_addr_le_str+0x7c>)
    1f62:	7813      	ldrb	r3, [r2, #0]
    1f64:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    1f68:	3301      	adds	r3, #1
	cur %= ARRAY_SIZE(bufs);
    1f6a:	f003 0301 	and.w	r3, r3, #1
    1f6e:	7013      	strb	r3, [r2, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    1f70:	7803      	ldrb	r3, [r0, #0]
{
    1f72:	b08a      	sub	sp, #40	; 0x28
	str = bufs[cur++];
    1f74:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
{
    1f78:	4604      	mov	r4, r0
	str = bufs[cur++];
    1f7a:	440e      	add	r6, r1
    1f7c:	ad07      	add	r5, sp, #28
    1f7e:	2b03      	cmp	r3, #3
    1f80:	d821      	bhi.n	1fc6 <bt_addr_le_str+0x6a>
    1f82:	e8df f003 	tbb	[pc, r3]
    1f86:	1a02      	.short	0x1a02
    1f88:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    1f8a:	4914      	ldr	r1, [pc, #80]	; (1fdc <bt_addr_le_str+0x80>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    1f8c:	4628      	mov	r0, r5
    1f8e:	f7fe fb07 	bl	5a0 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    1f92:	7862      	ldrb	r2, [r4, #1]
    1f94:	9204      	str	r2, [sp, #16]
    1f96:	78a2      	ldrb	r2, [r4, #2]
    1f98:	9203      	str	r2, [sp, #12]
    1f9a:	78e2      	ldrb	r2, [r4, #3]
    1f9c:	9202      	str	r2, [sp, #8]
    1f9e:	7922      	ldrb	r2, [r4, #4]
    1fa0:	9201      	str	r2, [sp, #4]
    1fa2:	7962      	ldrb	r2, [r4, #5]
    1fa4:	9200      	str	r2, [sp, #0]
    1fa6:	79a3      	ldrb	r3, [r4, #6]
    1fa8:	9505      	str	r5, [sp, #20]
    1faa:	4a0d      	ldr	r2, [pc, #52]	; (1fe0 <bt_addr_le_str+0x84>)
    1fac:	211b      	movs	r1, #27
    1fae:	4630      	mov	r0, r6
    1fb0:	f7ff fa36 	bl	1420 <snprintk>
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1fb4:	4630      	mov	r0, r6
    1fb6:	b00a      	add	sp, #40	; 0x28
    1fb8:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    1fba:	490a      	ldr	r1, [pc, #40]	; (1fe4 <bt_addr_le_str+0x88>)
    1fbc:	e7e6      	b.n	1f8c <bt_addr_le_str+0x30>
		strcpy(type, "public id");
    1fbe:	490a      	ldr	r1, [pc, #40]	; (1fe8 <bt_addr_le_str+0x8c>)
    1fc0:	e7e4      	b.n	1f8c <bt_addr_le_str+0x30>
		strcpy(type, "random id");
    1fc2:	490a      	ldr	r1, [pc, #40]	; (1fec <bt_addr_le_str+0x90>)
    1fc4:	e7e2      	b.n	1f8c <bt_addr_le_str+0x30>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    1fc6:	4a0a      	ldr	r2, [pc, #40]	; (1ff0 <bt_addr_le_str+0x94>)
    1fc8:	210a      	movs	r1, #10
    1fca:	4628      	mov	r0, r5
    1fcc:	f7ff fa28 	bl	1420 <snprintk>
    1fd0:	e7df      	b.n	1f92 <bt_addr_le_str+0x36>
    1fd2:	bf00      	nop
    1fd4:	200000ae 	.word	0x200000ae
    1fd8:	20000078 	.word	0x20000078
    1fdc:	0000ce5f 	.word	0x0000ce5f
    1fe0:	0000ce88 	.word	0x0000ce88
    1fe4:	0000ce66 	.word	0x0000ce66
    1fe8:	0000ce6d 	.word	0x0000ce6d
    1fec:	0000ce77 	.word	0x0000ce77
    1ff0:	0000ce81 	.word	0x0000ce81

00001ff4 <ver_str>:
	return 0;
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    1ff4:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    1ff6:	4d0b      	ldr	r5, [pc, #44]	; (2024 <ver_str+0x30>)
{
    1ff8:	4606      	mov	r6, r0
	const char * const str[] = {
    1ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    1ffc:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    1ffe:	466c      	mov	r4, sp
    2000:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2002:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2004:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2006:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    200a:	2e09      	cmp	r6, #9
	const char * const str[] = {
    200c:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    2010:	bf9b      	ittet	ls
    2012:	ab0a      	addls	r3, sp, #40	; 0x28
    2014:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    2018:	4803      	ldrhi	r0, [pc, #12]	; (2028 <ver_str+0x34>)
		return str[ver];
    201a:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    201e:	b00a      	add	sp, #40	; 0x28
    2020:	bd70      	pop	{r4, r5, r6, pc}
    2022:	bf00      	nop
    2024:	0000cd24 	.word	0x0000cd24
    2028:	0000dd00 	.word	0x0000dd00

0000202c <valid_adv_param>:



static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    202c:	7803      	ldrb	r3, [r0, #0]
    202e:	8842      	ldrh	r2, [r0, #2]
    2030:	f013 0301 	ands.w	r3, r3, #1
    2034:	d105      	bne.n	2042 <valid_adv_param+0x16>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    2036:	4909      	ldr	r1, [pc, #36]	; (205c <valid_adv_param+0x30>)
    2038:	7b89      	ldrb	r1, [r1, #14]
    203a:	2908      	cmp	r1, #8
    203c:	d801      	bhi.n	2042 <valid_adv_param+0x16>
    203e:	2a9f      	cmp	r2, #159	; 0x9f
    2040:	d90a      	bls.n	2058 <valid_adv_param+0x2c>
		    param->interval_min < 0x00a0) {
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    2042:	8880      	ldrh	r0, [r0, #4]
    2044:	4282      	cmp	r2, r0
    2046:	d807      	bhi.n	2058 <valid_adv_param+0x2c>
    2048:	2a1f      	cmp	r2, #31
    204a:	d905      	bls.n	2058 <valid_adv_param+0x2c>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    204c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    2050:	bf8c      	ite	hi
    2052:	2000      	movhi	r0, #0
    2054:	2001      	movls	r0, #1
    2056:	4770      	bx	lr
			return false;
    2058:	2000      	movs	r0, #0
		return false;
	}

	return true;
}
    205a:	4770      	bx	lr
    205c:	20003bb8 	.word	0x20003bb8

00002060 <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    2060:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    2062:	f3bf 8f5b 	dmb	ish
    2066:	e850 3f00 	ldrex	r3, [r0]
    206a:	ea43 0201 	orr.w	r2, r3, r1
    206e:	e840 2e00 	strex	lr, r2, [r0]
    2072:	f1be 0f00 	cmp.w	lr, #0
    2076:	d1f6      	bne.n	2066 <atomic_or+0x6>
    2078:	f3bf 8f5b 	dmb	ish
    207c:	4618      	mov	r0, r3
    207e:	f85d fb04 	ldr.w	pc, [sp], #4

00002082 <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
    2082:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
    2084:	f3bf 8f5b 	dmb	ish
    2088:	e850 3f00 	ldrex	r3, [r0]
    208c:	ea03 0201 	and.w	r2, r3, r1
    2090:	e840 2e00 	strex	lr, r2, [r0]
    2094:	f1be 0f00 	cmp.w	lr, #0
    2098:	d1f6      	bne.n	2088 <atomic_and+0x6>
    209a:	f3bf 8f5b 	dmb	ish
    209e:	4618      	mov	r0, r3
    20a0:	f85d fb04 	ldr.w	pc, [sp], #4

000020a4 <hci_cmd_done>:
{
    20a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    20a8:	4606      	mov	r6, r0
    20aa:	b086      	sub	sp, #24
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    20ac:	7990      	ldrb	r0, [r2, #6]
    20ae:	4f26      	ldr	r7, [pc, #152]	; (2148 <hci_cmd_done+0xa4>)
{
    20b0:	4688      	mov	r8, r1
    20b2:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    20b4:	f009 fb7c 	bl	b7b0 <net_buf_pool_get>
    20b8:	4287      	cmp	r7, r0
    20ba:	d013      	beq.n	20e4 <hci_cmd_done+0x40>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    20bc:	79ac      	ldrb	r4, [r5, #6]
    20be:	4620      	mov	r0, r4
    20c0:	f009 fb76 	bl	b7b0 <net_buf_pool_get>
    20c4:	4b21      	ldr	r3, [pc, #132]	; (214c <hci_cmd_done+0xa8>)
    20c6:	9305      	str	r3, [sp, #20]
    20c8:	9003      	str	r0, [sp, #12]
    20ca:	e88d 0048 	stmia.w	sp, {r3, r6}
    20ce:	9704      	str	r7, [sp, #16]
    20d0:	9402      	str	r4, [sp, #8]
    20d2:	4b1f      	ldr	r3, [pc, #124]	; (2150 <hci_cmd_done+0xac>)
    20d4:	4a1f      	ldr	r2, [pc, #124]	; (2154 <hci_cmd_done+0xb0>)
    20d6:	4920      	ldr	r1, [pc, #128]	; (2158 <hci_cmd_done+0xb4>)
    20d8:	4820      	ldr	r0, [pc, #128]	; (215c <hci_cmd_done+0xb8>)
    20da:	f7ff f993 	bl	1404 <printk>
}
    20de:	b006      	add	sp, #24
    20e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    20e4:	4628      	mov	r0, r5
    20e6:	f009 fb69 	bl	b7bc <net_buf_id>
    20ea:	4c1d      	ldr	r4, [pc, #116]	; (2160 <hci_cmd_done+0xbc>)
    20ec:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    20f0:	8843      	ldrh	r3, [r0, #2]
    20f2:	42b3      	cmp	r3, r6
    20f4:	d010      	beq.n	2118 <hci_cmd_done+0x74>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    20f6:	4628      	mov	r0, r5
    20f8:	f009 fb60 	bl	b7bc <net_buf_id>
    20fc:	4b13      	ldr	r3, [pc, #76]	; (214c <hci_cmd_done+0xa8>)
    20fe:	9303      	str	r3, [sp, #12]
    2100:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2104:	4914      	ldr	r1, [pc, #80]	; (2158 <hci_cmd_done+0xb4>)
    2106:	8842      	ldrh	r2, [r0, #2]
    2108:	9202      	str	r2, [sp, #8]
    210a:	e88d 0048 	stmia.w	sp, {r3, r6}
    210e:	4a11      	ldr	r2, [pc, #68]	; (2154 <hci_cmd_done+0xb0>)
    2110:	4b0f      	ldr	r3, [pc, #60]	; (2150 <hci_cmd_done+0xac>)
    2112:	4814      	ldr	r0, [pc, #80]	; (2164 <hci_cmd_done+0xc0>)
    2114:	f7ff f976 	bl	1404 <printk>
	if (cmd(buf)->sync) {
    2118:	4628      	mov	r0, r5
    211a:	f009 fb4f 	bl	b7bc <net_buf_id>
    211e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2122:	6843      	ldr	r3, [r0, #4]
    2124:	2b00      	cmp	r3, #0
    2126:	d0da      	beq.n	20de <hci_cmd_done+0x3a>
		cmd(buf)->status = status;
    2128:	4628      	mov	r0, r5
    212a:	f009 fb47 	bl	b7bc <net_buf_id>
    212e:	f804 8030 	strb.w	r8, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    2132:	4628      	mov	r0, r5
    2134:	f009 fb42 	bl	b7bc <net_buf_id>
    2138:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    213c:	6840      	ldr	r0, [r0, #4]
}
    213e:	b006      	add	sp, #24
    2140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2144:	f00a b8a0 	b.w	c288 <_impl_k_sem_give>
    2148:	20003f04 	.word	0x20003f04
    214c:	0000ceef 	.word	0x0000ceef
    2150:	0000d43b 	.word	0x0000d43b
    2154:	0000d714 	.word	0x0000d714
    2158:	0000d71b 	.word	0x0000d71b
    215c:	0000d71e 	.word	0x0000d71e
    2160:	200002b4 	.word	0x200002b4
    2164:	0000d763 	.word	0x0000d763

00002168 <atomic_test_bit.constprop.24>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2168:	4b07      	ldr	r3, [pc, #28]	; (2188 <atomic_test_bit.constprop.24+0x20>)
    216a:	f3bf 8f5b 	dmb	ish
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    216e:	0942      	lsrs	r2, r0, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2170:	eb03 0382 	add.w	r3, r3, r2, lsl #2

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    2174:	f000 001f 	and.w	r0, r0, #31
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    217a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    217e:	fa43 f000 	asr.w	r0, r3, r0
}
    2182:	f000 0001 	and.w	r0, r0, #1
    2186:	4770      	bx	lr
    2188:	20003bb8 	.word	0x20003bb8

0000218c <bt_hci_cmd_create>:
{
    218c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2190:	4680      	mov	r8, r0
    2192:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    2194:	4813      	ldr	r0, [pc, #76]	; (21e4 <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    2196:	4d14      	ldr	r5, [pc, #80]	; (21e8 <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    2198:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    219c:	f009 fb9c 	bl	b8d8 <net_buf_alloc_fixed>
    21a0:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    21a2:	f100 0608 	add.w	r6, r0, #8
    21a6:	2100      	movs	r1, #0
    21a8:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    21aa:	2700      	movs	r7, #0
    21ac:	f009 fbb3 	bl	b916 <net_buf_simple_reserve>
    21b0:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    21b2:	4620      	mov	r0, r4
    21b4:	f009 fb02 	bl	b7bc <net_buf_id>
    21b8:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    21bc:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    21c0:	4620      	mov	r0, r4
    21c2:	f009 fafb 	bl	b7bc <net_buf_id>
    21c6:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    21ca:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    21cc:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    21ce:	4630      	mov	r0, r6
    21d0:	f009 fbe4 	bl	b99c <net_buf_simple_add>
	hdr->param_len = param_len;
    21d4:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    21d8:	f8a0 8000 	strh.w	r8, [r0]
}
    21dc:	4620      	mov	r0, r4
    21de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    21e2:	bf00      	nop
    21e4:	20003f04 	.word	0x20003f04
    21e8:	200002b4 	.word	0x200002b4

000021ec <bt_hci_cmd_send_sync>:
{
    21ec:	b570      	push	{r4, r5, r6, lr}
    21ee:	4615      	mov	r5, r2
    21f0:	b086      	sub	sp, #24
	if (!buf) {
    21f2:	460c      	mov	r4, r1
    21f4:	b919      	cbnz	r1, 21fe <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    21f6:	f7ff ffc9 	bl	218c <bt_hci_cmd_create>
		if (!buf) {
    21fa:	4604      	mov	r4, r0
    21fc:	b368      	cbz	r0, 225a <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    21fe:	2201      	movs	r2, #1
    2200:	2100      	movs	r1, #0
    2202:	4668      	mov	r0, sp
    2204:	f00a f836 	bl	c274 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    2208:	4620      	mov	r0, r4
    220a:	f009 fad7 	bl	b7bc <net_buf_id>
    220e:	4e14      	ldr	r6, [pc, #80]	; (2260 <bt_hci_cmd_send_sync+0x74>)
    2210:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    2214:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    2218:	4620      	mov	r0, r4
    221a:	f009 fbbb 	bl	b994 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    221e:	4621      	mov	r1, r4
    2220:	4810      	ldr	r0, [pc, #64]	; (2264 <bt_hci_cmd_send_sync+0x78>)
    2222:	f009 fb7c 	bl	b91e <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2226:	f242 7110 	movw	r1, #10000	; 0x2710
    222a:	4668      	mov	r0, sp
    222c:	f00a f88c 	bl	c348 <_impl_k_sem_take>
	if (cmd(buf)->status) {
    2230:	4620      	mov	r0, r4
    2232:	f009 fac3 	bl	b7bc <net_buf_id>
    2236:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    223a:	b130      	cbz	r0, 224a <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    223c:	4620      	mov	r0, r4
    223e:	f009 fb7b 	bl	b938 <net_buf_unref>
		err = -EIO;
    2242:	f06f 0004 	mvn.w	r0, #4
}
    2246:	b006      	add	sp, #24
    2248:	bd70      	pop	{r4, r5, r6, pc}
		if (rsp) {
    224a:	b10d      	cbz	r5, 2250 <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    224c:	602c      	str	r4, [r5, #0]
    224e:	e7fa      	b.n	2246 <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    2250:	4620      	mov	r0, r4
    2252:	f009 fb71 	bl	b938 <net_buf_unref>
		err = 0;
    2256:	4628      	mov	r0, r5
    2258:	e7f5      	b.n	2246 <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    225a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    225e:	e7f2      	b.n	2246 <bt_hci_cmd_send_sync+0x5a>
    2260:	200002b4 	.word	0x200002b4
    2264:	20003c6c 	.word	0x20003c6c

00002268 <set_random_address>:
{
    2268:	b570      	push	{r4, r5, r6, lr}
#define BT_ADDR_LE_NONE (&(bt_addr_le_t) { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    226a:	4d15      	ldr	r5, [pc, #84]	; (22c0 <set_random_address+0x58>)
    226c:	2206      	movs	r2, #6
    226e:	f105 0108 	add.w	r1, r5, #8
    2272:	4606      	mov	r6, r0
    2274:	f7fe f9ab 	bl	5ce <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    2278:	4604      	mov	r4, r0
    227a:	b1d8      	cbz	r0, 22b4 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    227c:	2106      	movs	r1, #6
    227e:	f242 0005 	movw	r0, #8197	; 0x2005
    2282:	f7ff ff83 	bl	218c <bt_hci_cmd_create>
	if (!buf) {
    2286:	4604      	mov	r4, r0
    2288:	b1b0      	cbz	r0, 22b8 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    228a:	2206      	movs	r2, #6
    228c:	4631      	mov	r1, r6
    228e:	3008      	adds	r0, #8
    2290:	f009 fb8a 	bl	b9a8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    2294:	4621      	mov	r1, r4
    2296:	2200      	movs	r2, #0
    2298:	f242 0005 	movw	r0, #8197	; 0x2005
    229c:	f7ff ffa6 	bl	21ec <bt_hci_cmd_send_sync>
	if (err) {
    22a0:	4604      	mov	r4, r0
    22a2:	b938      	cbnz	r0, 22b4 <set_random_address+0x4c>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    22a4:	2206      	movs	r2, #6
    22a6:	4631      	mov	r1, r6
    22a8:	f105 0008 	add.w	r0, r5, #8
    22ac:	f7fe f9a4 	bl	5f8 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    22b0:	2301      	movs	r3, #1
    22b2:	71eb      	strb	r3, [r5, #7]
}
    22b4:	4620      	mov	r0, r4
    22b6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    22b8:	f06f 0436 	mvn.w	r4, #54	; 0x36
    22bc:	e7fa      	b.n	22b4 <set_random_address+0x4c>
    22be:	bf00      	nop
    22c0:	20003bb8 	.word	0x20003bb8

000022c4 <le_set_private_addr>:
{
    22c4:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    22c6:	2106      	movs	r1, #6
    22c8:	4668      	mov	r0, sp
    22ca:	f002 f891 	bl	43f0 <bt_rand>
	if (err) {
    22ce:	b940      	cbnz	r0, 22e2 <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    22d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    22d4:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    22d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    22da:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    22de:	f7ff ffc3 	bl	2268 <set_random_address>
}
    22e2:	b003      	add	sp, #12
    22e4:	f85d fb04 	ldr.w	pc, [sp], #4

000022e8 <set_le_scan_enable>:
{
    22e8:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    22ea:	2102      	movs	r1, #2
{
    22ec:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    22ee:	f242 000c 	movw	r0, #8204	; 0x200c
    22f2:	f7ff ff4b 	bl	218c <bt_hci_cmd_create>
	if (!buf) {
    22f6:	4604      	mov	r4, r0
    22f8:	b320      	cbz	r0, 2344 <set_le_scan_enable+0x5c>
	cp = net_buf_add(buf, sizeof(*cp));
    22fa:	2102      	movs	r1, #2
    22fc:	3008      	adds	r0, #8
    22fe:	f009 fb4d 	bl	b99c <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2302:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    2304:	4601      	mov	r1, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2306:	d114      	bne.n	2332 <set_le_scan_enable+0x4a>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    2308:	200a      	movs	r0, #10
    230a:	f7ff ff2d 	bl	2168 <atomic_test_bit.constprop.24>
    230e:	7048      	strb	r0, [r1, #1]
	cp->enable = enable;
    2310:	700d      	strb	r5, [r1, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    2312:	2200      	movs	r2, #0
    2314:	4621      	mov	r1, r4
    2316:	f242 000c 	movw	r0, #8204	; 0x200c
    231a:	f7ff ff67 	bl	21ec <bt_hci_cmd_send_sync>
	if (err) {
    231e:	4604      	mov	r4, r0
    2320:	b928      	cbnz	r0, 232e <set_le_scan_enable+0x46>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2322:	2d01      	cmp	r5, #1
    2324:	d108      	bne.n	2338 <set_le_scan_enable+0x50>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2326:	2180      	movs	r1, #128	; 0x80
    2328:	4808      	ldr	r0, [pc, #32]	; (234c <set_le_scan_enable+0x64>)
    232a:	f7ff fe99 	bl	2060 <atomic_or>
}
    232e:	4620      	mov	r0, r4
    2330:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    2332:	2300      	movs	r3, #0
    2334:	7043      	strb	r3, [r0, #1]
    2336:	e7eb      	b.n	2310 <set_le_scan_enable+0x28>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2338:	f06f 0180 	mvn.w	r1, #128	; 0x80
    233c:	4803      	ldr	r0, [pc, #12]	; (234c <set_le_scan_enable+0x64>)
    233e:	f7ff fea0 	bl	2082 <atomic_and>
    2342:	e7f4      	b.n	232e <set_le_scan_enable+0x46>
		return -ENOBUFS;
    2344:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2348:	e7f1      	b.n	232e <set_le_scan_enable+0x46>
    234a:	bf00      	nop
    234c:	20003c28 	.word	0x20003c28

00002350 <set_ad>:

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    2350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2354:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    2356:	2120      	movs	r1, #32
{
    2358:	4607      	mov	r7, r0
    235a:	4690      	mov	r8, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    235c:	f7ff ff16 	bl	218c <bt_hci_cmd_create>
	if (!buf) {
    2360:	4606      	mov	r6, r0
    2362:	2800      	cmp	r0, #0
    2364:	d03c      	beq.n	23e0 <set_ad+0x90>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    2366:	2120      	movs	r1, #32
    2368:	3008      	adds	r0, #8
    236a:	f009 fb17 	bl	b99c <net_buf_simple_add>

	memset(set_data, 0, sizeof(*set_data));
    236e:	2220      	movs	r2, #32
    2370:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    2372:	4605      	mov	r5, r0
	memset(set_data, 0, sizeof(*set_data));
    2374:	f7fe f96c 	bl	650 <memset>

	for (i = 0; i < ad_len; i++) {
    2378:	f04f 0900 	mov.w	r9, #0
    237c:	45c1      	cmp	r9, r8
    237e:	d106      	bne.n	238e <set_ad+0x3e>
		memcpy(&set_data->data[set_data->len], ad[i].data,
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    2380:	4631      	mov	r1, r6
    2382:	4638      	mov	r0, r7
    2384:	2200      	movs	r2, #0
}
    2386:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    238a:	f7ff bf2f 	b.w	21ec <bt_hci_cmd_send_sync>
		if (set_data->len + ad[i].data_len + 2 > 251) {
    238e:	7862      	ldrb	r2, [r4, #1]
    2390:	782b      	ldrb	r3, [r5, #0]
    2392:	18d1      	adds	r1, r2, r3
    2394:	3102      	adds	r1, #2
    2396:	29fb      	cmp	r1, #251	; 0xfb
    2398:	f104 0408 	add.w	r4, r4, #8
    239c:	dd06      	ble.n	23ac <set_ad+0x5c>
			net_buf_unref(buf);
    239e:	4630      	mov	r0, r6
    23a0:	f009 faca 	bl	b938 <net_buf_unref>
			return -EINVAL;
    23a4:	f06f 0015 	mvn.w	r0, #21
    23a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    23ac:	18e9      	adds	r1, r5, r3
    23ae:	1c50      	adds	r0, r2, #1
    23b0:	7048      	strb	r0, [r1, #1]
		set_data->data[set_data->len++] = ad[i].type;
    23b2:	1c98      	adds	r0, r3, #2
    23b4:	b2c0      	uxtb	r0, r0
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    23b6:	3301      	adds	r3, #1
		set_data->data[set_data->len++] = ad[i].type;
    23b8:	7028      	strb	r0, [r5, #0]
    23ba:	fa55 f383 	uxtab	r3, r5, r3
    23be:	f814 1c08 	ldrb.w	r1, [r4, #-8]
    23c2:	7059      	strb	r1, [r3, #1]
		memcpy(&set_data->data[set_data->len], ad[i].data,
    23c4:	3001      	adds	r0, #1
    23c6:	f854 1c04 	ldr.w	r1, [r4, #-4]
    23ca:	4428      	add	r0, r5
    23cc:	f7fe f914 	bl	5f8 <memcpy>
		set_data->len += ad[i].data_len;
    23d0:	782b      	ldrb	r3, [r5, #0]
    23d2:	f814 2c07 	ldrb.w	r2, [r4, #-7]
    23d6:	4413      	add	r3, r2
    23d8:	702b      	strb	r3, [r5, #0]
	for (i = 0; i < ad_len; i++) {
    23da:	f109 0901 	add.w	r9, r9, #1
    23de:	e7cd      	b.n	237c <set_ad+0x2c>
		return -ENOBUFS;
    23e0:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    23e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000023e8 <bt_le_scan_update>:
{
    23e8:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    23ea:	2008      	movs	r0, #8
    23ec:	f7ff febc 	bl	2168 <atomic_test_bit.constprop.24>
    23f0:	4601      	mov	r1, r0
    23f2:	b940      	cbnz	r0, 2406 <bt_le_scan_update+0x1e>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    23f4:	2007      	movs	r0, #7
    23f6:	f7ff feb7 	bl	2168 <atomic_test_bit.constprop.24>
    23fa:	b120      	cbz	r0, 2406 <bt_le_scan_update+0x1e>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    23fc:	4608      	mov	r0, r1
}
    23fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    2402:	f7ff bf71 	b.w	22e8 <set_le_scan_enable>
}
    2406:	2000      	movs	r0, #0
    2408:	bd08      	pop	{r3, pc}

0000240a <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    240a:	2301      	movs	r3, #1
{
    240c:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    240e:	2106      	movs	r1, #6
{
    2410:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    2412:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    2416:	f001 ffeb 	bl	43f0 <bt_rand>
	if (err) {
    241a:	b918      	cbnz	r0, 2424 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    241c:	79a3      	ldrb	r3, [r4, #6]
    241e:	f063 033f 	orn	r3, r3, #63	; 0x3f
    2422:	71a3      	strb	r3, [r4, #6]
}
    2424:	bd10      	pop	{r4, pc}
	...

00002428 <hci_init>:
{
    2428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    242c:	b08e      	sub	sp, #56	; 0x38
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    242e:	aa0c      	add	r2, sp, #48	; 0x30
    2430:	2100      	movs	r1, #0
    2432:	f640 4003 	movw	r0, #3075	; 0xc03
    2436:	f7ff fed9 	bl	21ec <bt_hci_cmd_send_sync>
	if (err) {
    243a:	4604      	mov	r4, r0
    243c:	2800      	cmp	r0, #0
    243e:	d17e      	bne.n	253e <hci_init+0x116>
	u8_t status = buf->data[0];
    2440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2442:	689b      	ldr	r3, [r3, #8]
	if (status) {
    2444:	781b      	ldrb	r3, [r3, #0]
    2446:	b96b      	cbnz	r3, 2464 <hci_init+0x3c>
	scan_dev_found_cb = NULL;
    2448:	4aa1      	ldr	r2, [pc, #644]	; (26d0 <hci_init+0x2a8>)
    244a:	6013      	str	r3, [r2, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    244c:	4ba1      	ldr	r3, [pc, #644]	; (26d4 <hci_init+0x2ac>)
    244e:	f3bf 8f5b 	dmb	ish
    2452:	2201      	movs	r2, #1
    2454:	e853 1f00 	ldrex	r1, [r3]
    2458:	e843 2000 	strex	r0, r2, [r3]
    245c:	2800      	cmp	r0, #0
    245e:	d1f9      	bne.n	2454 <hci_init+0x2c>
    2460:	f3bf 8f5b 	dmb	ish
	net_buf_unref(rsp);
    2464:	980c      	ldr	r0, [sp, #48]	; 0x30
    2466:	f009 fa67 	bl	b938 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    246a:	aa0c      	add	r2, sp, #48	; 0x30
    246c:	2100      	movs	r1, #0
    246e:	f241 0003 	movw	r0, #4099	; 0x1003
    2472:	f7ff febb 	bl	21ec <bt_hci_cmd_send_sync>
	if (err) {
    2476:	4604      	mov	r4, r0
    2478:	2800      	cmp	r0, #0
    247a:	d160      	bne.n	253e <hci_init+0x116>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    247c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    247e:	4d96      	ldr	r5, [pc, #600]	; (26d8 <hci_init+0x2b0>)
    2480:	6899      	ldr	r1, [r3, #8]
    2482:	2208      	movs	r2, #8
    2484:	3101      	adds	r1, #1
    2486:	f105 0016 	add.w	r0, r5, #22
    248a:	f7fe f8b5 	bl	5f8 <memcpy>
	net_buf_unref(rsp);
    248e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2490:	f009 fa52 	bl	b938 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    2494:	4621      	mov	r1, r4
    2496:	aa0c      	add	r2, sp, #48	; 0x30
    2498:	f241 0001 	movw	r0, #4097	; 0x1001
    249c:	f7ff fea6 	bl	21ec <bt_hci_cmd_send_sync>
    24a0:	462e      	mov	r6, r5
	if (err) {
    24a2:	4604      	mov	r4, r0
    24a4:	2800      	cmp	r0, #0
    24a6:	d14a      	bne.n	253e <hci_init+0x116>
	read_local_ver_complete(rsp);
    24a8:	980c      	ldr	r0, [sp, #48]	; 0x30
    24aa:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    24ac:	785a      	ldrb	r2, [r3, #1]
    24ae:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    24b0:	78d9      	ldrb	r1, [r3, #3]
    24b2:	789a      	ldrb	r2, [r3, #2]
    24b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    24b8:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    24ba:	791a      	ldrb	r2, [r3, #4]
    24bc:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    24be:	7a19      	ldrb	r1, [r3, #8]
    24c0:	79da      	ldrb	r2, [r3, #7]
    24c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    24c6:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    24c8:	795a      	ldrb	r2, [r3, #5]
    24ca:	799b      	ldrb	r3, [r3, #6]
    24cc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    24d0:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    24d2:	f009 fa31 	bl	b938 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    24d6:	4621      	mov	r1, r4
    24d8:	aa0c      	add	r2, sp, #48	; 0x30
    24da:	f241 0009 	movw	r0, #4105	; 0x1009
    24de:	f7ff fe85 	bl	21ec <bt_hci_cmd_send_sync>
	if (err) {
    24e2:	4604      	mov	r4, r0
    24e4:	bb58      	cbnz	r0, 253e <hci_init+0x116>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    24e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    24e8:	6899      	ldr	r1, [r3, #8]
    24ea:	2206      	movs	r2, #6
    24ec:	3101      	adds	r1, #1
    24ee:	1c68      	adds	r0, r5, #1
    24f0:	f7fe f882 	bl	5f8 <memcpy>
	net_buf_unref(rsp);
    24f4:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    24f6:	702c      	strb	r4, [r5, #0]
	net_buf_unref(rsp);
    24f8:	f009 fa1e 	bl	b938 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    24fc:	4621      	mov	r1, r4
    24fe:	aa0c      	add	r2, sp, #48	; 0x30
    2500:	f241 0002 	movw	r0, #4098	; 0x1002
    2504:	f7ff fe72 	bl	21ec <bt_hci_cmd_send_sync>
	if (err) {
    2508:	4604      	mov	r4, r0
    250a:	b9c0      	cbnz	r0, 253e <hci_init+0x116>
	memcpy(bt_dev.supported_commands, rp->commands,
    250c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    250e:	6899      	ldr	r1, [r3, #8]
    2510:	2240      	movs	r2, #64	; 0x40
    2512:	3101      	adds	r1, #1
    2514:	f105 001e 	add.w	r0, r5, #30
    2518:	f7fe f86e 	bl	5f8 <memcpy>
	net_buf_unref(rsp);
    251c:	980c      	ldr	r0, [sp, #48]	; 0x30
    251e:	f009 fa0b 	bl	b938 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    2522:	7eab      	ldrb	r3, [r5, #26]
    2524:	0658      	lsls	r0, r3, #25
    2526:	d40e      	bmi.n	2546 <hci_init+0x11e>
		BT_ERR("Non-LE capable controller detected!");
    2528:	4b6c      	ldr	r3, [pc, #432]	; (26dc <hci_init+0x2b4>)
    252a:	9301      	str	r3, [sp, #4]
    252c:	9300      	str	r3, [sp, #0]
    252e:	4a6c      	ldr	r2, [pc, #432]	; (26e0 <hci_init+0x2b8>)
    2530:	4b6c      	ldr	r3, [pc, #432]	; (26e4 <hci_init+0x2bc>)
    2532:	496d      	ldr	r1, [pc, #436]	; (26e8 <hci_init+0x2c0>)
    2534:	486d      	ldr	r0, [pc, #436]	; (26ec <hci_init+0x2c4>)
    2536:	f7fe ff65 	bl	1404 <printk>
		return -ENODEV;
    253a:	f06f 0412 	mvn.w	r4, #18
}
    253e:	4620      	mov	r0, r4
    2540:	b00e      	add	sp, #56	; 0x38
    2542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    2546:	4621      	mov	r1, r4
    2548:	aa0c      	add	r2, sp, #48	; 0x30
    254a:	f242 0003 	movw	r0, #8195	; 0x2003
    254e:	f7ff fe4d 	bl	21ec <bt_hci_cmd_send_sync>
	if (err) {
    2552:	4604      	mov	r4, r0
    2554:	2800      	cmp	r0, #0
    2556:	d1f2      	bne.n	253e <hci_init+0x116>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    2558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    255a:	6899      	ldr	r1, [r3, #8]
    255c:	2208      	movs	r2, #8
    255e:	3101      	adds	r1, #1
    2560:	f105 0078 	add.w	r0, r5, #120	; 0x78
    2564:	f7fe f848 	bl	5f8 <memcpy>
	net_buf_unref(rsp);
    2568:	980c      	ldr	r0, [sp, #48]	; 0x30
    256a:	f009 f9e5 	bl	b938 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    256e:	7eab      	ldrb	r3, [r5, #26]
    2570:	0699      	lsls	r1, r3, #26
    2572:	d57a      	bpl.n	266a <hci_init+0x242>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    2574:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    2578:	071a      	lsls	r2, r3, #28
    257a:	f100 8092 	bmi.w	26a2 <hci_init+0x27a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    257e:	2108      	movs	r1, #8
    2580:	f242 0001 	movw	r0, #8193	; 0x2001
    2584:	f7ff fe02 	bl	218c <bt_hci_cmd_create>
	if (!buf) {
    2588:	4604      	mov	r4, r0
    258a:	2800      	cmp	r0, #0
    258c:	d074      	beq.n	2678 <hci_init+0x250>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    258e:	2108      	movs	r1, #8
    2590:	4408      	add	r0, r1
    2592:	f009 fa03 	bl	b99c <net_buf_simple_add>
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2596:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
    259a:	f003 0306 	and.w	r3, r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    259e:	2b06      	cmp	r3, #6
    25a0:	bf14      	ite	ne
    25a2:	2302      	movne	r3, #2
    25a4:	f44f 73c1 	moveq.w	r3, #386	; 0x182
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    25a8:	2200      	movs	r2, #0
    25aa:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    25ac:	0a1b      	lsrs	r3, r3, #8
    25ae:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    25b0:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    25b2:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    25b4:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    25b6:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    25b8:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    25ba:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    25bc:	4621      	mov	r1, r4
    25be:	f242 0001 	movw	r0, #8193	; 0x2001
    25c2:	f7ff fe13 	bl	21ec <bt_hci_cmd_send_sync>
	if (err) {
    25c6:	4604      	mov	r4, r0
    25c8:	2800      	cmp	r0, #0
    25ca:	d1b8      	bne.n	253e <hci_init+0x116>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    25cc:	2108      	movs	r1, #8
    25ce:	f640 4001 	movw	r0, #3073	; 0xc01
    25d2:	f7ff fddb 	bl	218c <bt_hci_cmd_create>
	if (!buf) {
    25d6:	4605      	mov	r5, r0
    25d8:	2800      	cmp	r0, #0
    25da:	d04d      	beq.n	2678 <hci_init+0x250>
	ev = net_buf_add(buf, sizeof(*ev));
    25dc:	2108      	movs	r1, #8
    25de:	4408      	add	r0, r1
    25e0:	f009 f9dc 	bl	b99c <net_buf_simple_add>
    25e4:	2380      	movs	r3, #128	; 0x80
    25e6:	7043      	strb	r3, [r0, #1]
    25e8:	2302      	movs	r3, #2
    25ea:	70c3      	strb	r3, [r0, #3]
    25ec:	2320      	movs	r3, #32
	dst[0] = val;
    25ee:	7004      	strb	r4, [r0, #0]
    25f0:	7084      	strb	r4, [r0, #2]
    25f2:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    25f4:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
    25f6:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    25f8:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    25fa:	4622      	mov	r2, r4
    25fc:	4629      	mov	r1, r5
    25fe:	f640 4001 	movw	r0, #3073	; 0xc01
    2602:	f7ff fdf3 	bl	21ec <bt_hci_cmd_send_sync>
	if (err) {
    2606:	4604      	mov	r4, r0
    2608:	2800      	cmp	r0, #0
    260a:	d198      	bne.n	253e <hci_init+0x116>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    260c:	4601      	mov	r1, r0
    260e:	aa0c      	add	r2, sp, #48	; 0x30
    2610:	f64f 4001 	movw	r0, #64513	; 0xfc01
    2614:	f7ff fdea 	bl	21ec <bt_hci_cmd_send_sync>
    2618:	4d30      	ldr	r5, [pc, #192]	; (26dc <hci_init+0x2b4>)
	if (err) {
    261a:	2800      	cmp	r0, #0
    261c:	d074      	beq.n	2708 <hci_init+0x2e0>
		BT_WARN("Vendor HCI extensions not available");
    261e:	4b34      	ldr	r3, [pc, #208]	; (26f0 <hci_init+0x2c8>)
    2620:	4a34      	ldr	r2, [pc, #208]	; (26f4 <hci_init+0x2cc>)
    2622:	4931      	ldr	r1, [pc, #196]	; (26e8 <hci_init+0x2c0>)
    2624:	4834      	ldr	r0, [pc, #208]	; (26f8 <hci_init+0x2d0>)
    2626:	9501      	str	r5, [sp, #4]
    2628:	9500      	str	r5, [sp, #0]
		BT_WARN("Failed to read supported vendor commands");
    262a:	f7fe feeb 	bl	1404 <printk>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    262e:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    2630:	2207      	movs	r2, #7
    2632:	a90a      	add	r1, sp, #40	; 0x28
    2634:	4828      	ldr	r0, [pc, #160]	; (26d8 <hci_init+0x2b0>)
    2636:	930a      	str	r3, [sp, #40]	; 0x28
    2638:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
    263c:	f7fd ffc7 	bl	5ce <memcmp>
    2640:	2800      	cmp	r0, #0
    2642:	f040 80db 	bne.w	27fc <hci_init+0x3d4>
	if (bt_storage) {
    2646:	4a2d      	ldr	r2, [pc, #180]	; (26fc <hci_init+0x2d4>)
    2648:	6813      	ldr	r3, [r2, #0]
    264a:	4690      	mov	r8, r2
    264c:	2b00      	cmp	r3, #0
    264e:	f040 8115 	bne.w	287c <hci_init+0x454>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    2652:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
    2656:	07db      	lsls	r3, r3, #31
    2658:	f100 8135 	bmi.w	28c6 <hci_init+0x49e>
		BT_WARN("Read Static Addresses command not available");
    265c:	9501      	str	r5, [sp, #4]
    265e:	9500      	str	r5, [sp, #0]
    2660:	4b27      	ldr	r3, [pc, #156]	; (2700 <hci_init+0x2d8>)
    2662:	4a24      	ldr	r2, [pc, #144]	; (26f4 <hci_init+0x2cc>)
    2664:	4920      	ldr	r1, [pc, #128]	; (26e8 <hci_init+0x2c0>)
    2666:	4827      	ldr	r0, [pc, #156]	; (2704 <hci_init+0x2dc>)
    2668:	e13a      	b.n	28e0 <hci_init+0x4b8>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    266a:	2102      	movs	r1, #2
    266c:	f640 406d 	movw	r0, #3181	; 0xc6d
    2670:	f7ff fd8c 	bl	218c <bt_hci_cmd_create>
		if (!buf) {
    2674:	4605      	mov	r5, r0
    2676:	b910      	cbnz	r0, 267e <hci_init+0x256>
		return -ENOBUFS;
    2678:	f06f 0436 	mvn.w	r4, #54	; 0x36
    267c:	e75f      	b.n	253e <hci_init+0x116>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    267e:	2102      	movs	r1, #2
    2680:	3008      	adds	r0, #8
    2682:	f009 f98b 	bl	b99c <net_buf_simple_add>
		cp_le->le = 0x01;
    2686:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2688:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    268a:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    268c:	4622      	mov	r2, r4
    268e:	4629      	mov	r1, r5
    2690:	f640 406d 	movw	r0, #3181	; 0xc6d
    2694:	f7ff fdaa 	bl	21ec <bt_hci_cmd_send_sync>
		if (err) {
    2698:	4604      	mov	r4, r0
    269a:	2800      	cmp	r0, #0
    269c:	f43f af6a 	beq.w	2574 <hci_init+0x14c>
    26a0:	e74d      	b.n	253e <hci_init+0x116>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    26a2:	aa0c      	add	r2, sp, #48	; 0x30
    26a4:	2100      	movs	r1, #0
    26a6:	f242 001c 	movw	r0, #8220	; 0x201c
    26aa:	f7ff fd9f 	bl	21ec <bt_hci_cmd_send_sync>
		if (err) {
    26ae:	4604      	mov	r4, r0
    26b0:	2800      	cmp	r0, #0
    26b2:	f47f af44 	bne.w	253e <hci_init+0x116>
		le_read_supp_states_complete(rsp);
    26b6:	980c      	ldr	r0, [sp, #48]	; 0x30
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    26b8:	6883      	ldr	r3, [r0, #8]
    26ba:	f853 2f01 	ldr.w	r2, [r3, #1]!
    26be:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    26c0:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    26c4:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
		net_buf_unref(rsp);
    26c8:	f009 f936 	bl	b938 <net_buf_unref>
    26cc:	e757      	b.n	257e <hci_init+0x156>
    26ce:	bf00      	nop
    26d0:	20000310 	.word	0x20000310
    26d4:	20003c28 	.word	0x20003c28
    26d8:	20003bb8 	.word	0x20003bb8
    26dc:	0000ceef 	.word	0x0000ceef
    26e0:	0000d7a6 	.word	0x0000d7a6
    26e4:	0000d48a 	.word	0x0000d48a
    26e8:	0000d71b 	.word	0x0000d71b
    26ec:	0000d7ad 	.word	0x0000d7ad
    26f0:	0000d4b0 	.word	0x0000d4b0
    26f4:	0000d714 	.word	0x0000d714
    26f8:	0000d7e1 	.word	0x0000d7e1
    26fc:	20001ac8 	.word	0x20001ac8
    2700:	0000d492 	.word	0x0000d492
    2704:	0000d985 	.word	0x0000d985
	rp.info = (void *)rsp->data;
    2708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_INFO("HW Platform: %s (0x%04x)",
    270a:	499a      	ldr	r1, [pc, #616]	; (2974 <hci_init+0x54c>)
	rp.info = (void *)rsp->data;
    270c:	689f      	ldr	r7, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    270e:	489a      	ldr	r0, [pc, #616]	; (2978 <hci_init+0x550>)
    2710:	f8b7 3001 	ldrh.w	r3, [r7, #1]
    2714:	9302      	str	r3, [sp, #8]
	if (platform < ARRAY_SIZE(plat_str)) {
    2716:	2b03      	cmp	r3, #3
		return plat_str[platform];
    2718:	bf96      	itet	ls
    271a:	4a98      	ldrls	r2, [pc, #608]	; (297c <hci_init+0x554>)
	return "unknown";
    271c:	4a98      	ldrhi	r2, [pc, #608]	; (2980 <hci_init+0x558>)
		return plat_str[platform];
    271e:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    2722:	9201      	str	r2, [sp, #4]
    2724:	4b97      	ldr	r3, [pc, #604]	; (2984 <hci_init+0x55c>)
    2726:	4a98      	ldr	r2, [pc, #608]	; (2988 <hci_init+0x560>)
    2728:	9503      	str	r5, [sp, #12]
    272a:	9500      	str	r5, [sp, #0]
    272c:	f7fe fe6a 	bl	1404 <printk>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2730:	f8b7 3001 	ldrh.w	r3, [r7, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    2734:	f8b7 2003 	ldrh.w	r2, [r7, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2738:	2b02      	cmp	r3, #2
    273a:	d13a      	bne.n	27b2 <hci_init+0x38a>
	if (variant < ARRAY_SIZE(nordic_str)) {
    273c:	2a02      	cmp	r2, #2
    273e:	d838      	bhi.n	27b2 <hci_init+0x38a>
		return nordic_str[variant];
    2740:	4b92      	ldr	r3, [pc, #584]	; (298c <hci_init+0x564>)
    2742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    2746:	9202      	str	r2, [sp, #8]
    2748:	9301      	str	r3, [sp, #4]
    274a:	4a8f      	ldr	r2, [pc, #572]	; (2988 <hci_init+0x560>)
    274c:	4b8d      	ldr	r3, [pc, #564]	; (2984 <hci_init+0x55c>)
    274e:	4989      	ldr	r1, [pc, #548]	; (2974 <hci_init+0x54c>)
    2750:	9503      	str	r5, [sp, #12]
    2752:	9500      	str	r5, [sp, #0]
    2754:	488e      	ldr	r0, [pc, #568]	; (2990 <hci_init+0x568>)
    2756:	f7fe fe55 	bl	1404 <printk>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    275a:	797b      	ldrb	r3, [r7, #5]
    275c:	9506      	str	r5, [sp, #24]
    275e:	f8d7 1009 	ldr.w	r1, [r7, #9]
    2762:	9105      	str	r1, [sp, #20]
	if (variant < ARRAY_SIZE(var_str)) {
    2764:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2766:	f8b7 1007 	ldrh.w	r1, [r7, #7]
		return var_str[variant];
    276a:	bf98      	it	ls
    276c:	4a89      	ldrls	r2, [pc, #548]	; (2994 <hci_init+0x56c>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    276e:	9104      	str	r1, [sp, #16]
    2770:	79b9      	ldrb	r1, [r7, #6]
		return var_str[variant];
    2772:	bf94      	ite	ls
    2774:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    2778:	4a81      	ldrhi	r2, [pc, #516]	; (2980 <hci_init+0x558>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    277a:	9103      	str	r1, [sp, #12]
    277c:	9302      	str	r3, [sp, #8]
    277e:	497d      	ldr	r1, [pc, #500]	; (2974 <hci_init+0x54c>)
    2780:	4b80      	ldr	r3, [pc, #512]	; (2984 <hci_init+0x55c>)
    2782:	9201      	str	r2, [sp, #4]
    2784:	9500      	str	r5, [sp, #0]
    2786:	4a80      	ldr	r2, [pc, #512]	; (2988 <hci_init+0x560>)
    2788:	4883      	ldr	r0, [pc, #524]	; (2998 <hci_init+0x570>)
    278a:	f7fe fe3b 	bl	1404 <printk>
	net_buf_unref(rsp);
    278e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2790:	f009 f8d2 	bl	b938 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    2794:	aa0c      	add	r2, sp, #48	; 0x30
    2796:	2100      	movs	r1, #0
    2798:	f64f 4002 	movw	r0, #64514	; 0xfc02
    279c:	f7ff fd26 	bl	21ec <bt_hci_cmd_send_sync>
	if (err) {
    27a0:	4607      	mov	r7, r0
    27a2:	b140      	cbz	r0, 27b6 <hci_init+0x38e>
		BT_WARN("Failed to read supported vendor features");
    27a4:	9501      	str	r5, [sp, #4]
    27a6:	9500      	str	r5, [sp, #0]
    27a8:	4b76      	ldr	r3, [pc, #472]	; (2984 <hci_init+0x55c>)
    27aa:	4a7c      	ldr	r2, [pc, #496]	; (299c <hci_init+0x574>)
    27ac:	4971      	ldr	r1, [pc, #452]	; (2974 <hci_init+0x54c>)
    27ae:	487c      	ldr	r0, [pc, #496]	; (29a0 <hci_init+0x578>)
    27b0:	e73b      	b.n	262a <hci_init+0x202>
		return "unknown";
    27b2:	4b73      	ldr	r3, [pc, #460]	; (2980 <hci_init+0x558>)
    27b4:	e7c7      	b.n	2746 <hci_init+0x31e>
	rp.cmds = (void *)rsp->data;
    27b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    27b8:	487a      	ldr	r0, [pc, #488]	; (29a4 <hci_init+0x57c>)
    27ba:	6899      	ldr	r1, [r3, #8]
    27bc:	2202      	movs	r2, #2
    27be:	3101      	adds	r1, #1
    27c0:	f7fd ff1a 	bl	5f8 <memcpy>
	net_buf_unref(rsp);
    27c4:	980c      	ldr	r0, [sp, #48]	; 0x30
    27c6:	f009 f8b7 	bl	b938 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    27ca:	aa0c      	add	r2, sp, #48	; 0x30
    27cc:	4639      	mov	r1, r7
    27ce:	f64f 4003 	movw	r0, #64515	; 0xfc03
    27d2:	f7ff fd0b 	bl	21ec <bt_hci_cmd_send_sync>
	if (err) {
    27d6:	b130      	cbz	r0, 27e6 <hci_init+0x3be>
		BT_WARN("Failed to read supported vendor commands");
    27d8:	9501      	str	r5, [sp, #4]
    27da:	9500      	str	r5, [sp, #0]
    27dc:	4b69      	ldr	r3, [pc, #420]	; (2984 <hci_init+0x55c>)
    27de:	4a6f      	ldr	r2, [pc, #444]	; (299c <hci_init+0x574>)
    27e0:	4964      	ldr	r1, [pc, #400]	; (2974 <hci_init+0x54c>)
    27e2:	4871      	ldr	r0, [pc, #452]	; (29a8 <hci_init+0x580>)
    27e4:	e721      	b.n	262a <hci_init+0x202>
	rp.feat = (void *)rsp->data;
    27e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    27e8:	4870      	ldr	r0, [pc, #448]	; (29ac <hci_init+0x584>)
    27ea:	6899      	ldr	r1, [r3, #8]
    27ec:	2201      	movs	r2, #1
    27ee:	4411      	add	r1, r2
    27f0:	f7fd ff02 	bl	5f8 <memcpy>
	net_buf_unref(rsp);
    27f4:	980c      	ldr	r0, [sp, #48]	; 0x30
    27f6:	f009 f89f 	bl	b938 <net_buf_unref>
    27fa:	e718      	b.n	262e <hci_init+0x206>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    27fc:	4b6c      	ldr	r3, [pc, #432]	; (29b0 <hci_init+0x588>)
    27fe:	6818      	ldr	r0, [r3, #0]
    2800:	889a      	ldrh	r2, [r3, #4]
    2802:	900c      	str	r0, [sp, #48]	; 0x30
    2804:	799b      	ldrb	r3, [r3, #6]
    2806:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    280a:	a90c      	add	r1, sp, #48	; 0x30
    280c:	2207      	movs	r2, #7
    280e:	4869      	ldr	r0, [pc, #420]	; (29b4 <hci_init+0x58c>)
    2810:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    2814:	f7fd fedb 	bl	5ce <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2818:	2800      	cmp	r0, #0
    281a:	f43f af14 	beq.w	2646 <hci_init+0x21e>
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    281e:	4865      	ldr	r0, [pc, #404]	; (29b4 <hci_init+0x58c>)
    2820:	f7ff fb9c 	bl	1f5c <bt_addr_le_str>
    2824:	4b64      	ldr	r3, [pc, #400]	; (29b8 <hci_init+0x590>)
    2826:	9001      	str	r0, [sp, #4]
    2828:	4a57      	ldr	r2, [pc, #348]	; (2988 <hci_init+0x560>)
    282a:	4952      	ldr	r1, [pc, #328]	; (2974 <hci_init+0x54c>)
    282c:	9502      	str	r5, [sp, #8]
    282e:	9500      	str	r5, [sp, #0]
    2830:	4862      	ldr	r0, [pc, #392]	; (29bc <hci_init+0x594>)
    2832:	f7fe fde7 	bl	1404 <printk>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    2836:	7bb7      	ldrb	r7, [r6, #14]
    2838:	4638      	mov	r0, r7
    283a:	f7ff fbdb 	bl	1ff4 <ver_str>
    283e:	9505      	str	r5, [sp, #20]
    2840:	8ab3      	ldrh	r3, [r6, #20]
    2842:	9304      	str	r3, [sp, #16]
    2844:	8a33      	ldrh	r3, [r6, #16]
    2846:	9303      	str	r3, [sp, #12]
    2848:	9702      	str	r7, [sp, #8]
    284a:	9001      	str	r0, [sp, #4]
    284c:	4b5a      	ldr	r3, [pc, #360]	; (29b8 <hci_init+0x590>)
    284e:	4a4e      	ldr	r2, [pc, #312]	; (2988 <hci_init+0x560>)
    2850:	4948      	ldr	r1, [pc, #288]	; (2974 <hci_init+0x54c>)
    2852:	9500      	str	r5, [sp, #0]
    2854:	485a      	ldr	r0, [pc, #360]	; (29c0 <hci_init+0x598>)
    2856:	f7fe fdd5 	bl	1404 <printk>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    285a:	7bf7      	ldrb	r7, [r6, #15]
    285c:	4638      	mov	r0, r7
    285e:	f7ff fbc9 	bl	1ff4 <ver_str>
    2862:	9504      	str	r5, [sp, #16]
    2864:	8a73      	ldrh	r3, [r6, #18]
    2866:	9303      	str	r3, [sp, #12]
    2868:	9001      	str	r0, [sp, #4]
    286a:	9702      	str	r7, [sp, #8]
    286c:	9500      	str	r5, [sp, #0]
    286e:	4b52      	ldr	r3, [pc, #328]	; (29b8 <hci_init+0x590>)
    2870:	4a45      	ldr	r2, [pc, #276]	; (2988 <hci_init+0x560>)
    2872:	4940      	ldr	r1, [pc, #256]	; (2974 <hci_init+0x54c>)
    2874:	4853      	ldr	r0, [pc, #332]	; (29c4 <hci_init+0x59c>)
    2876:	f7fe fdc5 	bl	1404 <printk>
    287a:	e660      	b.n	253e <hci_init+0x116>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    287c:	2100      	movs	r1, #0
    287e:	681f      	ldr	r7, [r3, #0]
    2880:	4a4c      	ldr	r2, [pc, #304]	; (29b4 <hci_init+0x58c>)
    2882:	2307      	movs	r3, #7
    2884:	4608      	mov	r0, r1
    2886:	47b8      	blx	r7
		if (ret == sizeof(bt_dev.id_addr)) {
    2888:	2807      	cmp	r0, #7
    288a:	f47f aee2 	bne.w	2652 <hci_init+0x22a>
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    288e:	7833      	ldrb	r3, [r6, #0]
    2890:	2b01      	cmp	r3, #1
    2892:	d104      	bne.n	289e <hci_init+0x476>
    2894:	79b3      	ldrb	r3, [r6, #6]
    2896:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    289a:	2bc0      	cmp	r3, #192	; 0xc0
    289c:	d05e      	beq.n	295c <hci_init+0x534>
		BT_ERR("Only static random address supported as identity");
    289e:	9501      	str	r5, [sp, #4]
    28a0:	9500      	str	r5, [sp, #0]
    28a2:	4b49      	ldr	r3, [pc, #292]	; (29c8 <hci_init+0x5a0>)
    28a4:	4a49      	ldr	r2, [pc, #292]	; (29cc <hci_init+0x5a4>)
    28a6:	4933      	ldr	r1, [pc, #204]	; (2974 <hci_init+0x54c>)
    28a8:	4849      	ldr	r0, [pc, #292]	; (29d0 <hci_init+0x5a8>)
    28aa:	f7fe fdab 	bl	1404 <printk>
		return -EINVAL;
    28ae:	f06f 0715 	mvn.w	r7, #21
			BT_ERR("Unable to set identity address");
    28b2:	9501      	str	r5, [sp, #4]
    28b4:	9500      	str	r5, [sp, #0]
    28b6:	4b47      	ldr	r3, [pc, #284]	; (29d4 <hci_init+0x5ac>)
    28b8:	4a44      	ldr	r2, [pc, #272]	; (29cc <hci_init+0x5a4>)
    28ba:	492e      	ldr	r1, [pc, #184]	; (2974 <hci_init+0x54c>)
    28bc:	4846      	ldr	r0, [pc, #280]	; (29d8 <hci_init+0x5b0>)
    28be:	f7fe fda1 	bl	1404 <printk>
			return err;
    28c2:	463c      	mov	r4, r7
    28c4:	e63b      	b.n	253e <hci_init+0x116>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    28c6:	aa09      	add	r2, sp, #36	; 0x24
    28c8:	2100      	movs	r1, #0
    28ca:	f64f 4009 	movw	r0, #64521	; 0xfc09
    28ce:	f7ff fc8d 	bl	21ec <bt_hci_cmd_send_sync>
		if (err) {
    28d2:	b140      	cbz	r0, 28e6 <hci_init+0x4be>
			BT_WARN("Failed to read static addresses");
    28d4:	4b3c      	ldr	r3, [pc, #240]	; (29c8 <hci_init+0x5a0>)
    28d6:	4a31      	ldr	r2, [pc, #196]	; (299c <hci_init+0x574>)
    28d8:	4926      	ldr	r1, [pc, #152]	; (2974 <hci_init+0x54c>)
    28da:	4840      	ldr	r0, [pc, #256]	; (29dc <hci_init+0x5b4>)
    28dc:	9501      	str	r5, [sp, #4]
    28de:	9500      	str	r5, [sp, #0]
		BT_WARN("Read Static Addresses command not available");
    28e0:	f7fe fd90 	bl	1404 <printk>
    28e4:	e019      	b.n	291a <hci_init+0x4f2>
		rp = (void *)rsp->data;
    28e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    28e8:	6899      	ldr	r1, [r3, #8]
		if (rp->num_addrs) {
    28ea:	784b      	ldrb	r3, [r1, #1]
    28ec:	b153      	cbz	r3, 2904 <hci_init+0x4dc>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    28ee:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    28f0:	2206      	movs	r2, #6
    28f2:	3102      	adds	r1, #2
    28f4:	483a      	ldr	r0, [pc, #232]	; (29e0 <hci_init+0x5b8>)
    28f6:	7033      	strb	r3, [r6, #0]
    28f8:	f7fd fe7e 	bl	5f8 <memcpy>
			net_buf_unref(rsp);
    28fc:	9809      	ldr	r0, [sp, #36]	; 0x24
    28fe:	f009 f81b 	bl	b938 <net_buf_unref>
    2902:	e7c4      	b.n	288e <hci_init+0x466>
		BT_WARN("No static addresses stored in controller");
    2904:	9501      	str	r5, [sp, #4]
    2906:	9500      	str	r5, [sp, #0]
    2908:	4b2f      	ldr	r3, [pc, #188]	; (29c8 <hci_init+0x5a0>)
    290a:	4a24      	ldr	r2, [pc, #144]	; (299c <hci_init+0x574>)
    290c:	4919      	ldr	r1, [pc, #100]	; (2974 <hci_init+0x54c>)
    290e:	4835      	ldr	r0, [pc, #212]	; (29e4 <hci_init+0x5bc>)
    2910:	f7fe fd78 	bl	1404 <printk>
		net_buf_unref(rsp);
    2914:	9809      	ldr	r0, [sp, #36]	; 0x24
    2916:	f009 f80f 	bl	b938 <net_buf_unref>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    291a:	4826      	ldr	r0, [pc, #152]	; (29b4 <hci_init+0x58c>)
    291c:	f7ff fd75 	bl	240a <bt_addr_le_create_static>
	if (err) {
    2920:	4607      	mov	r7, r0
    2922:	2800      	cmp	r0, #0
    2924:	d1c5      	bne.n	28b2 <hci_init+0x48a>
	if (bt_storage) {
    2926:	f8d8 3000 	ldr.w	r3, [r8]
    292a:	b183      	cbz	r3, 294e <hci_init+0x526>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    292c:	f8d3 8004 	ldr.w	r8, [r3, #4]
    2930:	4a20      	ldr	r2, [pc, #128]	; (29b4 <hci_init+0x58c>)
    2932:	2307      	movs	r3, #7
    2934:	4601      	mov	r1, r0
    2936:	47c0      	blx	r8
		if (ret != sizeof(bt_dev.id_addr)) {
    2938:	2807      	cmp	r0, #7
    293a:	d0a8      	beq.n	288e <hci_init+0x466>
			BT_ERR("Unable to store static address");
    293c:	4b22      	ldr	r3, [pc, #136]	; (29c8 <hci_init+0x5a0>)
    293e:	4a23      	ldr	r2, [pc, #140]	; (29cc <hci_init+0x5a4>)
    2940:	490c      	ldr	r1, [pc, #48]	; (2974 <hci_init+0x54c>)
    2942:	4829      	ldr	r0, [pc, #164]	; (29e8 <hci_init+0x5c0>)
    2944:	9501      	str	r5, [sp, #4]
    2946:	9500      	str	r5, [sp, #0]
		BT_WARN("Using temporary static random address");
    2948:	f7fe fd5c 	bl	1404 <printk>
    294c:	e79f      	b.n	288e <hci_init+0x466>
    294e:	9501      	str	r5, [sp, #4]
    2950:	9500      	str	r5, [sp, #0]
    2952:	4b1d      	ldr	r3, [pc, #116]	; (29c8 <hci_init+0x5a0>)
    2954:	4a11      	ldr	r2, [pc, #68]	; (299c <hci_init+0x574>)
    2956:	4907      	ldr	r1, [pc, #28]	; (2974 <hci_init+0x54c>)
    2958:	4824      	ldr	r0, [pc, #144]	; (29ec <hci_init+0x5c4>)
    295a:	e7f5      	b.n	2948 <hci_init+0x520>
	err = set_random_address(&bt_dev.id_addr.a);
    295c:	4820      	ldr	r0, [pc, #128]	; (29e0 <hci_init+0x5b8>)
    295e:	f7ff fc83 	bl	2268 <set_random_address>
	if (err) {
    2962:	4607      	mov	r7, r0
    2964:	2800      	cmp	r0, #0
    2966:	d1a4      	bne.n	28b2 <hci_init+0x48a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2968:	2104      	movs	r1, #4
    296a:	4821      	ldr	r0, [pc, #132]	; (29f0 <hci_init+0x5c8>)
    296c:	f7ff fb78 	bl	2060 <atomic_or>
    2970:	e755      	b.n	281e <hci_init+0x3f6>
    2972:	bf00      	nop
    2974:	0000d71b 	.word	0x0000d71b
    2978:	0000d81c 	.word	0x0000d81c
    297c:	0000dc10 	.word	0x0000dc10
    2980:	0000dd00 	.word	0x0000dd00
    2984:	0000d4b0 	.word	0x0000d4b0
    2988:	0000d815 	.word	0x0000d815
    298c:	0000dc04 	.word	0x0000dc04
    2990:	0000d845 	.word	0x0000d845
    2994:	0000dcf0 	.word	0x0000dcf0
    2998:	0000d86d 	.word	0x0000d86d
    299c:	0000d714 	.word	0x0000d714
    29a0:	0000d8aa 	.word	0x0000d8aa
    29a4:	20003c17 	.word	0x20003c17
    29a8:	0000d8e3 	.word	0x0000d8e3
    29ac:	20003c16 	.word	0x20003c16
    29b0:	0000cd4c 	.word	0x0000cd4c
    29b4:	20003bb8 	.word	0x20003bb8
    29b8:	0000d4a2 	.word	0x0000d4a2
    29bc:	0000da67 	.word	0x0000da67
    29c0:	0000da84 	.word	0x0000da84
    29c4:	0000dad2 	.word	0x0000dad2
    29c8:	0000d492 	.word	0x0000d492
    29cc:	0000d7a6 	.word	0x0000d7a6
    29d0:	0000da26 	.word	0x0000da26
    29d4:	0000d4bc 	.word	0x0000d4bc
    29d8:	0000db09 	.word	0x0000db09
    29dc:	0000d91c 	.word	0x0000d91c
    29e0:	20003bb9 	.word	0x20003bb9
    29e4:	0000d94c 	.word	0x0000d94c
    29e8:	0000d9c1 	.word	0x0000d9c1
    29ec:	0000d9f0 	.word	0x0000d9f0
    29f0:	20003c28 	.word	0x20003c28

000029f4 <init_work>:
{
    29f4:	b510      	push	{r4, lr}
	err = hci_init();
    29f6:	f7ff fd17 	bl	2428 <hci_init>
	if (err) {
    29fa:	4604      	mov	r4, r0
    29fc:	b930      	cbnz	r0, 2a0c <init_work+0x18>
    29fe:	2102      	movs	r1, #2
    2a00:	4806      	ldr	r0, [pc, #24]	; (2a1c <init_work+0x28>)
    2a02:	f7ff fb2d 	bl	2060 <atomic_or>
	bt_le_scan_update(false);
    2a06:	4620      	mov	r0, r4
    2a08:	f7ff fcee 	bl	23e8 <bt_le_scan_update>
	if (ready_cb) {
    2a0c:	4b04      	ldr	r3, [pc, #16]	; (2a20 <init_work+0x2c>)
    2a0e:	681b      	ldr	r3, [r3, #0]
    2a10:	b11b      	cbz	r3, 2a1a <init_work+0x26>
		ready_cb(err);
    2a12:	4620      	mov	r0, r4
}
    2a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    2a18:	4718      	bx	r3
    2a1a:	bd10      	pop	{r4, pc}
    2a1c:	20003c28 	.word	0x20003c28
    2a20:	2000030c 	.word	0x2000030c

00002a24 <bt_send>:
	return bt_dev.drv->send(buf);
    2a24:	4b02      	ldr	r3, [pc, #8]	; (2a30 <bt_send+0xc>)
    2a26:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2a2a:	68db      	ldr	r3, [r3, #12]
    2a2c:	4718      	bx	r3
    2a2e:	bf00      	nop
    2a30:	20003bb8 	.word	0x20003bb8

00002a34 <bt_hci_cmd_send>:
{
    2a34:	b530      	push	{r4, r5, lr}
    2a36:	4604      	mov	r4, r0
    2a38:	b085      	sub	sp, #20
	if (!buf) {
    2a3a:	460d      	mov	r5, r1
    2a3c:	b919      	cbnz	r1, 2a46 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    2a3e:	f7ff fba5 	bl	218c <bt_hci_cmd_create>
		if (!buf) {
    2a42:	4605      	mov	r5, r0
    2a44:	b1f0      	cbz	r0, 2a84 <bt_hci_cmd_send+0x50>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    2a46:	f640 4335 	movw	r3, #3125	; 0xc35
    2a4a:	429c      	cmp	r4, r3
    2a4c:	d114      	bne.n	2a78 <bt_hci_cmd_send+0x44>
		err = bt_send(buf);
    2a4e:	4628      	mov	r0, r5
    2a50:	f7ff ffe8 	bl	2a24 <bt_send>
		if (err) {
    2a54:	4604      	mov	r4, r0
    2a56:	b160      	cbz	r0, 2a72 <bt_hci_cmd_send+0x3e>
			BT_ERR("Unable to send to driver (err %d)", err);
    2a58:	4b0c      	ldr	r3, [pc, #48]	; (2a8c <bt_hci_cmd_send+0x58>)
    2a5a:	9302      	str	r3, [sp, #8]
    2a5c:	e88d 0018 	stmia.w	sp, {r3, r4}
    2a60:	4a0b      	ldr	r2, [pc, #44]	; (2a90 <bt_hci_cmd_send+0x5c>)
    2a62:	4b0c      	ldr	r3, [pc, #48]	; (2a94 <bt_hci_cmd_send+0x60>)
    2a64:	490c      	ldr	r1, [pc, #48]	; (2a98 <bt_hci_cmd_send+0x64>)
    2a66:	480d      	ldr	r0, [pc, #52]	; (2a9c <bt_hci_cmd_send+0x68>)
    2a68:	f7fe fccc 	bl	1404 <printk>
			net_buf_unref(buf);
    2a6c:	4628      	mov	r0, r5
    2a6e:	f008 ff63 	bl	b938 <net_buf_unref>
}
    2a72:	4620      	mov	r0, r4
    2a74:	b005      	add	sp, #20
    2a76:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2a78:	4629      	mov	r1, r5
    2a7a:	4809      	ldr	r0, [pc, #36]	; (2aa0 <bt_hci_cmd_send+0x6c>)
    2a7c:	f008 ff4f 	bl	b91e <net_buf_put>
	return 0;
    2a80:	2400      	movs	r4, #0
    2a82:	e7f6      	b.n	2a72 <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    2a84:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2a88:	e7f3      	b.n	2a72 <bt_hci_cmd_send+0x3e>
    2a8a:	bf00      	nop
    2a8c:	0000ceef 	.word	0x0000ceef
    2a90:	0000d7a6 	.word	0x0000d7a6
    2a94:	0000d42b 	.word	0x0000d42b
    2a98:	0000d71b 	.word	0x0000d71b
    2a9c:	0000d539 	.word	0x0000d539
    2aa0:	20003c6c 	.word	0x20003c6c

00002aa4 <hci_tx_thread>:
{
    2aa4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2aa8:	4c44      	ldr	r4, [pc, #272]	; (2bbc <hci_tx_thread+0x118>)
		events[0].state = K_POLL_STATE_NOT_READY;
    2aaa:	4e45      	ldr	r6, [pc, #276]	; (2bc0 <hci_tx_thread+0x11c>)
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2aac:	f104 08b4 	add.w	r8, r4, #180	; 0xb4
		events[0].state = K_POLL_STATE_NOT_READY;
    2ab0:	7b73      	ldrb	r3, [r6, #13]
		err = k_poll(events, ev_count, K_FOREVER);
    2ab2:	4843      	ldr	r0, [pc, #268]	; (2bc0 <hci_tx_thread+0x11c>)
		events[0].state = K_POLL_STATE_NOT_READY;
    2ab4:	f36f 1307 	bfc	r3, #4, #4
		err = k_poll(events, ev_count, K_FOREVER);
    2ab8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2abc:	2101      	movs	r1, #1
		events[0].state = K_POLL_STATE_NOT_READY;
    2abe:	7373      	strb	r3, [r6, #13]
		err = k_poll(events, ev_count, K_FOREVER);
    2ac0:	f00a f828 	bl	cb14 <k_poll>
		BT_ASSERT(err == 0);
    2ac4:	2800      	cmp	r0, #0
    2ac6:	d161      	bne.n	2b8c <hci_tx_thread+0xe8>
		switch (ev->state) {
    2ac8:	7b73      	ldrb	r3, [r6, #13]
    2aca:	091b      	lsrs	r3, r3, #4
    2acc:	2b01      	cmp	r3, #1
    2ace:	d90b      	bls.n	2ae8 <hci_tx_thread+0x44>
    2ad0:	2b04      	cmp	r3, #4
    2ad2:	d00c      	beq.n	2aee <hci_tx_thread+0x4a>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    2ad4:	4a3b      	ldr	r2, [pc, #236]	; (2bc4 <hci_tx_thread+0x120>)
    2ad6:	9202      	str	r2, [sp, #8]
    2ad8:	e88d 000c 	stmia.w	sp, {r2, r3}
    2adc:	493a      	ldr	r1, [pc, #232]	; (2bc8 <hci_tx_thread+0x124>)
    2ade:	4b3b      	ldr	r3, [pc, #236]	; (2bcc <hci_tx_thread+0x128>)
    2ae0:	4a3b      	ldr	r2, [pc, #236]	; (2bd0 <hci_tx_thread+0x12c>)
    2ae2:	483c      	ldr	r0, [pc, #240]	; (2bd4 <hci_tx_thread+0x130>)
    2ae4:	f7fe fc8e 	bl	1404 <printk>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    2ae8:	f009 fb2a 	bl	c140 <_impl_k_yield>
    2aec:	e7e0      	b.n	2ab0 <hci_tx_thread+0xc>
			if (ev->tag == BT_EVENT_CMD_TX) {
    2aee:	7b37      	ldrb	r7, [r6, #12]
    2af0:	2f00      	cmp	r7, #0
    2af2:	d1f9      	bne.n	2ae8 <hci_tx_thread+0x44>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2af4:	4639      	mov	r1, r7
    2af6:	4640      	mov	r0, r8
    2af8:	f008 fef4 	bl	b8e4 <net_buf_get>
	BT_ASSERT(buf);
    2afc:	4605      	mov	r5, r0
    2afe:	2800      	cmp	r0, #0
    2b00:	d053      	beq.n	2baa <hci_tx_thread+0x106>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2b02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2b06:	4834      	ldr	r0, [pc, #208]	; (2bd8 <hci_tx_thread+0x134>)
    2b08:	f009 fc1e 	bl	c348 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    2b0c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    2b10:	bb63      	cbnz	r3, 2b6c <hci_tx_thread+0xc8>
	bt_dev.sent_cmd = net_buf_ref(buf);
    2b12:	4628      	mov	r0, r5
    2b14:	f008 ff3e 	bl	b994 <net_buf_ref>
    2b18:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	err = bt_send(buf);
    2b1c:	4628      	mov	r0, r5
    2b1e:	f7ff ff81 	bl	2a24 <bt_send>
	if (err) {
    2b22:	2800      	cmp	r0, #0
    2b24:	d0e0      	beq.n	2ae8 <hci_tx_thread+0x44>
		BT_ERR("Unable to send to driver (err %d)", err);
    2b26:	4b27      	ldr	r3, [pc, #156]	; (2bc4 <hci_tx_thread+0x120>)
    2b28:	4a2c      	ldr	r2, [pc, #176]	; (2bdc <hci_tx_thread+0x138>)
    2b2a:	4927      	ldr	r1, [pc, #156]	; (2bc8 <hci_tx_thread+0x124>)
    2b2c:	9302      	str	r3, [sp, #8]
    2b2e:	9001      	str	r0, [sp, #4]
    2b30:	9300      	str	r3, [sp, #0]
    2b32:	482b      	ldr	r0, [pc, #172]	; (2be0 <hci_tx_thread+0x13c>)
    2b34:	4b2b      	ldr	r3, [pc, #172]	; (2be4 <hci_tx_thread+0x140>)
    2b36:	f7fe fc65 	bl	1404 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2b3a:	4827      	ldr	r0, [pc, #156]	; (2bd8 <hci_tx_thread+0x134>)
    2b3c:	f009 fba4 	bl	c288 <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    2b40:	4628      	mov	r0, r5
    2b42:	f008 fe3b 	bl	b7bc <net_buf_id>
    2b46:	4b28      	ldr	r3, [pc, #160]	; (2be8 <hci_tx_thread+0x144>)
    2b48:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2b4c:	2200      	movs	r2, #0
    2b4e:	211f      	movs	r1, #31
    2b50:	8840      	ldrh	r0, [r0, #2]
    2b52:	f7ff faa7 	bl	20a4 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    2b56:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    2b5a:	f008 feed 	bl	b938 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2b5e:	2300      	movs	r3, #0
		net_buf_unref(buf);
    2b60:	4628      	mov	r0, r5
		bt_dev.sent_cmd = NULL;
    2b62:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		net_buf_unref(buf);
    2b66:	f008 fee7 	bl	b938 <net_buf_unref>
    2b6a:	e7bd      	b.n	2ae8 <hci_tx_thread+0x44>
		BT_ERR("Uncleared pending sent_cmd");
    2b6c:	4b15      	ldr	r3, [pc, #84]	; (2bc4 <hci_tx_thread+0x120>)
    2b6e:	9301      	str	r3, [sp, #4]
    2b70:	9300      	str	r3, [sp, #0]
    2b72:	4a1a      	ldr	r2, [pc, #104]	; (2bdc <hci_tx_thread+0x138>)
    2b74:	4b1b      	ldr	r3, [pc, #108]	; (2be4 <hci_tx_thread+0x140>)
    2b76:	4914      	ldr	r1, [pc, #80]	; (2bc8 <hci_tx_thread+0x124>)
    2b78:	481c      	ldr	r0, [pc, #112]	; (2bec <hci_tx_thread+0x148>)
    2b7a:	f7fe fc43 	bl	1404 <printk>
		net_buf_unref(bt_dev.sent_cmd);
    2b7e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    2b82:	f008 fed9 	bl	b938 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2b86:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
    2b8a:	e7c2      	b.n	2b12 <hci_tx_thread+0x6e>
		BT_ASSERT(err == 0);
    2b8c:	4b0d      	ldr	r3, [pc, #52]	; (2bc4 <hci_tx_thread+0x120>)
    2b8e:	9301      	str	r3, [sp, #4]
    2b90:	9300      	str	r3, [sp, #0]
    2b92:	4a12      	ldr	r2, [pc, #72]	; (2bdc <hci_tx_thread+0x138>)
    2b94:	4b16      	ldr	r3, [pc, #88]	; (2bf0 <hci_tx_thread+0x14c>)
    2b96:	490c      	ldr	r1, [pc, #48]	; (2bc8 <hci_tx_thread+0x124>)
    2b98:	4816      	ldr	r0, [pc, #88]	; (2bf4 <hci_tx_thread+0x150>)
	BT_ASSERT(buf);
    2b9a:	f7fe fc33 	bl	1404 <printk>
    2b9e:	4040      	eors	r0, r0
    2ba0:	f380 8811 	msr	BASEPRI, r0
    2ba4:	f04f 0004 	mov.w	r0, #4
    2ba8:	df02      	svc	2
    2baa:	4b06      	ldr	r3, [pc, #24]	; (2bc4 <hci_tx_thread+0x120>)
    2bac:	9301      	str	r3, [sp, #4]
    2bae:	9300      	str	r3, [sp, #0]
    2bb0:	4a0a      	ldr	r2, [pc, #40]	; (2bdc <hci_tx_thread+0x138>)
    2bb2:	4b0c      	ldr	r3, [pc, #48]	; (2be4 <hci_tx_thread+0x140>)
    2bb4:	4904      	ldr	r1, [pc, #16]	; (2bc8 <hci_tx_thread+0x124>)
    2bb6:	4810      	ldr	r0, [pc, #64]	; (2bf8 <hci_tx_thread+0x154>)
    2bb8:	e7ef      	b.n	2b9a <hci_tx_thread+0xf6>
    2bba:	bf00      	nop
    2bbc:	20003bb8 	.word	0x20003bb8
    2bc0:	20003c80 	.word	0x20003c80
    2bc4:	0000ceef 	.word	0x0000ceef
    2bc8:	0000d71b 	.word	0x0000d71b
    2bcc:	0000d46d 	.word	0x0000d46d
    2bd0:	0000d714 	.word	0x0000d714
    2bd4:	0000db38 	.word	0x0000db38
    2bd8:	20003c40 	.word	0x20003c40
    2bdc:	0000d7a6 	.word	0x0000d7a6
    2be0:	0000d539 	.word	0x0000d539
    2be4:	0000d464 	.word	0x0000d464
    2be8:	200002b4 	.word	0x200002b4
    2bec:	0000db69 	.word	0x0000db69
    2bf0:	0000d47c 	.word	0x0000d47c
    2bf4:	0000db94 	.word	0x0000db94
    2bf8:	0000dbbe 	.word	0x0000dbbe

00002bfc <bt_recv>:
{
    2bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    2c00:	7d06      	ldrb	r6, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    2c02:	2e01      	cmp	r6, #1
{
    2c04:	b08b      	sub	sp, #44	; 0x2c
    2c06:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    2c08:	d16b      	bne.n	2ce2 <bt_recv+0xe6>
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    2c0a:	6887      	ldr	r7, [r0, #8]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    2c0c:	783b      	ldrb	r3, [r7, #0]
    2c0e:	3b0e      	subs	r3, #14
    2c10:	2b01      	cmp	r3, #1
    2c12:	d876      	bhi.n	2d02 <bt_recv+0x106>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    2c14:	4b68      	ldr	r3, [pc, #416]	; (2db8 <bt_recv+0x1bc>)
    2c16:	9301      	str	r3, [sp, #4]
    2c18:	9300      	str	r3, [sp, #0]
    2c1a:	4a68      	ldr	r2, [pc, #416]	; (2dbc <bt_recv+0x1c0>)
    2c1c:	4b68      	ldr	r3, [pc, #416]	; (2dc0 <bt_recv+0x1c4>)
    2c1e:	4969      	ldr	r1, [pc, #420]	; (2dc4 <bt_recv+0x1c8>)
    2c20:	4869      	ldr	r0, [pc, #420]	; (2dc8 <bt_recv+0x1cc>)
    2c22:	f7fe fbef 	bl	1404 <printk>
    2c26:	4040      	eors	r0, r0
    2c28:	f380 8811 	msr	BASEPRI, r0
    2c2c:	f04f 0004 	mov.w	r0, #4
    2c30:	df02      	svc	2
    2c32:	68a7      	ldr	r7, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2c34:	4865      	ldr	r0, [pc, #404]	; (2dcc <bt_recv+0x1d0>)
    2c36:	f06f 0110 	mvn.w	r1, #16
    2c3a:	f7ff fa22 	bl	2082 <atomic_and>
	if (!evt->status) {
    2c3e:	783b      	ldrb	r3, [r7, #0]
    2c40:	b943      	cbnz	r3, 2c54 <bt_recv+0x58>
		memcpy(pub_key, evt->key, 64);
    2c42:	1c79      	adds	r1, r7, #1
    2c44:	2240      	movs	r2, #64	; 0x40
    2c46:	4862      	ldr	r0, [pc, #392]	; (2dd0 <bt_recv+0x1d4>)
    2c48:	f7fd fcd6 	bl	5f8 <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2c4c:	4631      	mov	r1, r6
    2c4e:	485f      	ldr	r0, [pc, #380]	; (2dcc <bt_recv+0x1d0>)
    2c50:	f7ff fa06 	bl	2060 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2c54:	4b5f      	ldr	r3, [pc, #380]	; (2dd4 <bt_recv+0x1d8>)
    2c56:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    2c58:	1c7e      	adds	r6, r7, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2c5a:	b935      	cbnz	r5, 2c6a <bt_recv+0x6e>
	net_buf_unref(buf);
    2c5c:	4620      	mov	r0, r4
    2c5e:	f008 fe6b 	bl	b938 <net_buf_unref>
		return 0;
    2c62:	2000      	movs	r0, #0
}
    2c64:	b00b      	add	sp, #44	; 0x2c
    2c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cb->func(evt->status ? NULL : evt->key);
    2c6a:	783a      	ldrb	r2, [r7, #0]
    2c6c:	682b      	ldr	r3, [r5, #0]
    2c6e:	2a00      	cmp	r2, #0
    2c70:	bf0c      	ite	eq
    2c72:	4630      	moveq	r0, r6
    2c74:	2000      	movne	r0, #0
    2c76:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2c78:	686d      	ldr	r5, [r5, #4]
    2c7a:	e7ee      	b.n	2c5a <bt_recv+0x5e>
	if (dh_key_cb) {
    2c7c:	4d56      	ldr	r5, [pc, #344]	; (2dd8 <bt_recv+0x1dc>)
    2c7e:	68a0      	ldr	r0, [r4, #8]
    2c80:	682a      	ldr	r2, [r5, #0]
    2c82:	2a00      	cmp	r2, #0
    2c84:	d0ea      	beq.n	2c5c <bt_recv+0x60>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    2c86:	7803      	ldrb	r3, [r0, #0]
    2c88:	b923      	cbnz	r3, 2c94 <bt_recv+0x98>
    2c8a:	3001      	adds	r0, #1
    2c8c:	4790      	blx	r2
		dh_key_cb = NULL;
    2c8e:	2300      	movs	r3, #0
    2c90:	602b      	str	r3, [r5, #0]
    2c92:	e7e3      	b.n	2c5c <bt_recv+0x60>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    2c94:	2000      	movs	r0, #0
    2c96:	e7f9      	b.n	2c8c <bt_recv+0x90>
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    2c98:	f7fd fcae 	bl	5f8 <memcpy>
    2c9c:	e067      	b.n	2d6e <bt_recv+0x172>
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    2c9e:	89a5      	ldrh	r5, [r4, #12]
    2ca0:	68a0      	ldr	r0, [r4, #8]
    2ca2:	4629      	mov	r1, r5
    2ca4:	f7ff f924 	bl	1ef0 <bt_hex>
    2ca8:	4b43      	ldr	r3, [pc, #268]	; (2db8 <bt_recv+0x1bc>)
    2caa:	9304      	str	r3, [sp, #16]
    2cac:	9003      	str	r0, [sp, #12]
    2cae:	e88d 0048 	stmia.w	sp, {r3, r6}
    2cb2:	4a4a      	ldr	r2, [pc, #296]	; (2ddc <bt_recv+0x1e0>)
    2cb4:	4b4a      	ldr	r3, [pc, #296]	; (2de0 <bt_recv+0x1e4>)
    2cb6:	4943      	ldr	r1, [pc, #268]	; (2dc4 <bt_recv+0x1c8>)
    2cb8:	484a      	ldr	r0, [pc, #296]	; (2de4 <bt_recv+0x1e8>)
    2cba:	9502      	str	r5, [sp, #8]
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    2cbc:	f7fe fba2 	bl	1404 <printk>
    2cc0:	e7cc      	b.n	2c5c <bt_recv+0x60>
    2cc2:	89a5      	ldrh	r5, [r4, #12]
    2cc4:	68a0      	ldr	r0, [r4, #8]
    2cc6:	4629      	mov	r1, r5
    2cc8:	f7ff f912 	bl	1ef0 <bt_hex>
    2ccc:	4b3a      	ldr	r3, [pc, #232]	; (2db8 <bt_recv+0x1bc>)
    2cce:	9304      	str	r3, [sp, #16]
    2cd0:	9003      	str	r0, [sp, #12]
    2cd2:	e88d 0088 	stmia.w	sp, {r3, r7}
    2cd6:	9502      	str	r5, [sp, #8]
    2cd8:	4b39      	ldr	r3, [pc, #228]	; (2dc0 <bt_recv+0x1c4>)
    2cda:	4a40      	ldr	r2, [pc, #256]	; (2ddc <bt_recv+0x1e0>)
    2cdc:	4939      	ldr	r1, [pc, #228]	; (2dc4 <bt_recv+0x1c8>)
    2cde:	4842      	ldr	r0, [pc, #264]	; (2de8 <bt_recv+0x1ec>)
    2ce0:	e7ec      	b.n	2cbc <bt_recv+0xc0>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    2ce2:	4b35      	ldr	r3, [pc, #212]	; (2db8 <bt_recv+0x1bc>)
    2ce4:	9302      	str	r3, [sp, #8]
    2ce6:	e88d 0048 	stmia.w	sp, {r3, r6}
    2cea:	4a34      	ldr	r2, [pc, #208]	; (2dbc <bt_recv+0x1c0>)
    2cec:	4b3f      	ldr	r3, [pc, #252]	; (2dec <bt_recv+0x1f0>)
    2cee:	4935      	ldr	r1, [pc, #212]	; (2dc4 <bt_recv+0x1c8>)
    2cf0:	483f      	ldr	r0, [pc, #252]	; (2df0 <bt_recv+0x1f4>)
    2cf2:	f7fe fb87 	bl	1404 <printk>
		net_buf_unref(buf);
    2cf6:	4620      	mov	r0, r4
    2cf8:	f008 fe1e 	bl	b938 <net_buf_unref>
		return -EINVAL;
    2cfc:	f06f 0015 	mvn.w	r0, #21
    2d00:	e7b0      	b.n	2c64 <bt_recv+0x68>
	net_buf_pull(buf, sizeof(*hdr));
    2d02:	f100 0508 	add.w	r5, r0, #8
    2d06:	2102      	movs	r1, #2
    2d08:	4628      	mov	r0, r5
    2d0a:	f008 fe5e 	bl	b9ca <net_buf_simple_pull>
	switch (hdr->evt) {
    2d0e:	783f      	ldrb	r7, [r7, #0]
    2d10:	2f3e      	cmp	r7, #62	; 0x3e
    2d12:	d1d6      	bne.n	2cc2 <bt_recv+0xc6>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    2d14:	68a7      	ldr	r7, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    2d16:	4631      	mov	r1, r6
    2d18:	4628      	mov	r0, r5
    2d1a:	f008 fe56 	bl	b9ca <net_buf_simple_pull>
	switch (evt->subevent) {
    2d1e:	783e      	ldrb	r6, [r7, #0]
    2d20:	2e08      	cmp	r6, #8
    2d22:	d086      	beq.n	2c32 <bt_recv+0x36>
    2d24:	2e09      	cmp	r6, #9
    2d26:	d0a9      	beq.n	2c7c <bt_recv+0x80>
    2d28:	2e02      	cmp	r6, #2
    2d2a:	d1b8      	bne.n	2c9e <bt_recv+0xa2>
	u8_t num_reports = net_buf_pull_u8(buf);
    2d2c:	4628      	mov	r0, r5
    2d2e:	f008 fe54 	bl	b9da <net_buf_simple_pull_u8>
		if (scan_dev_found_cb) {
    2d32:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 2df4 <bt_recv+0x1f8>
	u8_t num_reports = net_buf_pull_u8(buf);
    2d36:	9007      	str	r0, [sp, #28]
	while (num_reports--) {
    2d38:	9b07      	ldr	r3, [sp, #28]
    2d3a:	2b00      	cmp	r3, #0
    2d3c:	d08e      	beq.n	2c5c <bt_recv+0x60>
		info = (void *)buf->data;
    2d3e:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    2d40:	2109      	movs	r1, #9
    2d42:	4628      	mov	r0, r5
    2d44:	f008 fe41 	bl	b9ca <net_buf_simple_pull>
		rssi = info->data[info->length];
    2d48:	7a33      	ldrb	r3, [r6, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2d4a:	4631      	mov	r1, r6
		rssi = info->data[info->length];
    2d4c:	4433      	add	r3, r6
    2d4e:	2207      	movs	r2, #7
    2d50:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2d54:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    2d58:	3b02      	subs	r3, #2
    2d5a:	2b01      	cmp	r3, #1
    2d5c:	a808      	add	r0, sp, #32
    2d5e:	d89b      	bhi.n	2c98 <bt_recv+0x9c>
    2d60:	f7fd fc4a 	bl	5f8 <memcpy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    2d64:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2d68:	3b02      	subs	r3, #2
    2d6a:	f88d 3020 	strb.w	r3, [sp, #32]
		if (scan_dev_found_cb) {
    2d6e:	f8da 3000 	ldr.w	r3, [sl]
    2d72:	b1ab      	cbz	r3, 2da0 <bt_recv+0x1a4>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    2d74:	4628      	mov	r0, r5
    2d76:	f008 fe38 	bl	b9ea <net_buf_simple_headroom>
			buf->len = info->length;
    2d7a:	7a33      	ldrb	r3, [r6, #8]
	state->len = buf->len;
    2d7c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    2d80:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    2d82:	4681      	mov	r9, r0
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    2d84:	462b      	mov	r3, r5
    2d86:	7832      	ldrb	r2, [r6, #0]
    2d88:	f8da 7000 	ldr.w	r7, [sl]
    2d8c:	fa4f f18b 	sxtb.w	r1, fp
    2d90:	a808      	add	r0, sp, #32
    2d92:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    2d94:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    2d96:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    2d9a:	fa13 f389 	uxtah	r3, r3, r9
    2d9e:	60a3      	str	r3, [r4, #8]
		net_buf_pull(buf, info->length + sizeof(rssi));
    2da0:	7a31      	ldrb	r1, [r6, #8]
    2da2:	4628      	mov	r0, r5
    2da4:	3101      	adds	r1, #1
    2da6:	f008 fe10 	bl	b9ca <net_buf_simple_pull>
    2daa:	9b07      	ldr	r3, [sp, #28]
    2dac:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    2db0:	fa5f f388 	uxtb.w	r3, r8
    2db4:	9307      	str	r3, [sp, #28]
    2db6:	e7bf      	b.n	2d38 <bt_recv+0x13c>
    2db8:	0000ceef 	.word	0x0000ceef
    2dbc:	0000d7a6 	.word	0x0000d7a6
    2dc0:	0000d45a 	.word	0x0000d45a
    2dc4:	0000d71b 	.word	0x0000d71b
    2dc8:	0000d5f6 	.word	0x0000d5f6
    2dcc:	20003c28 	.word	0x20003c28
    2dd0:	200002c8 	.word	0x200002c8
    2dd4:	20000308 	.word	0x20000308
    2dd8:	200002c4 	.word	0x200002c4
    2ddc:	0000d714 	.word	0x0000d714
    2de0:	0000d448 	.word	0x0000d448
    2de4:	0000d56b 	.word	0x0000d56b
    2de8:	0000d5a0 	.word	0x0000d5a0
    2dec:	0000d4c5 	.word	0x0000d4c5
    2df0:	0000d5d2 	.word	0x0000d5d2
    2df4:	20000310 	.word	0x20000310

00002df8 <bt_recv_prio>:
{
    2df8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    2dfc:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    2dfe:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    2e00:	2b01      	cmp	r3, #1
{
    2e02:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    2e04:	d00e      	beq.n	2e24 <bt_recv_prio+0x2c>
    2e06:	4b32      	ldr	r3, [pc, #200]	; (2ed0 <bt_recv_prio+0xd8>)
    2e08:	9301      	str	r3, [sp, #4]
    2e0a:	9300      	str	r3, [sp, #0]
    2e0c:	4a31      	ldr	r2, [pc, #196]	; (2ed4 <bt_recv_prio+0xdc>)
    2e0e:	4b32      	ldr	r3, [pc, #200]	; (2ed8 <bt_recv_prio+0xe0>)
    2e10:	4932      	ldr	r1, [pc, #200]	; (2edc <bt_recv_prio+0xe4>)
    2e12:	4833      	ldr	r0, [pc, #204]	; (2ee0 <bt_recv_prio+0xe8>)
	BT_ASSERT(buf->len >= sizeof(*hdr));
    2e14:	f7fe faf6 	bl	1404 <printk>
    2e18:	4040      	eors	r0, r0
    2e1a:	f380 8811 	msr	BASEPRI, r0
    2e1e:	f04f 0004 	mov.w	r0, #4
    2e22:	df02      	svc	2
    2e24:	8983      	ldrh	r3, [r0, #12]
    2e26:	2b01      	cmp	r3, #1
    2e28:	d807      	bhi.n	2e3a <bt_recv_prio+0x42>
    2e2a:	4b29      	ldr	r3, [pc, #164]	; (2ed0 <bt_recv_prio+0xd8>)
    2e2c:	9301      	str	r3, [sp, #4]
    2e2e:	9300      	str	r3, [sp, #0]
    2e30:	4a28      	ldr	r2, [pc, #160]	; (2ed4 <bt_recv_prio+0xdc>)
    2e32:	4b29      	ldr	r3, [pc, #164]	; (2ed8 <bt_recv_prio+0xe0>)
    2e34:	4929      	ldr	r1, [pc, #164]	; (2edc <bt_recv_prio+0xe4>)
    2e36:	482b      	ldr	r0, [pc, #172]	; (2ee4 <bt_recv_prio+0xec>)
    2e38:	e7ec      	b.n	2e14 <bt_recv_prio+0x1c>
    2e3a:	7833      	ldrb	r3, [r6, #0]
    2e3c:	3b0e      	subs	r3, #14
    2e3e:	2b01      	cmp	r3, #1
    2e40:	d83e      	bhi.n	2ec0 <bt_recv_prio+0xc8>
	net_buf_pull(buf, sizeof(*hdr));
    2e42:	f100 0508 	add.w	r5, r0, #8
    2e46:	2102      	movs	r1, #2
    2e48:	4628      	mov	r0, r5
    2e4a:	f008 fdbe 	bl	b9ca <net_buf_simple_pull>
	switch (hdr->evt) {
    2e4e:	7833      	ldrb	r3, [r6, #0]
    2e50:	2b0e      	cmp	r3, #14
    2e52:	d00c      	beq.n	2e6e <bt_recv_prio+0x76>
    2e54:	2b0f      	cmp	r3, #15
    2e56:	d023      	beq.n	2ea0 <bt_recv_prio+0xa8>
		net_buf_unref(buf);
    2e58:	4620      	mov	r0, r4
    2e5a:	f008 fd6d 	bl	b938 <net_buf_unref>
		BT_ASSERT(0);
    2e5e:	4b1c      	ldr	r3, [pc, #112]	; (2ed0 <bt_recv_prio+0xd8>)
    2e60:	9301      	str	r3, [sp, #4]
    2e62:	9300      	str	r3, [sp, #0]
    2e64:	4a1b      	ldr	r2, [pc, #108]	; (2ed4 <bt_recv_prio+0xdc>)
    2e66:	4b1c      	ldr	r3, [pc, #112]	; (2ed8 <bt_recv_prio+0xe0>)
    2e68:	491c      	ldr	r1, [pc, #112]	; (2edc <bt_recv_prio+0xe4>)
    2e6a:	481f      	ldr	r0, [pc, #124]	; (2ee8 <bt_recv_prio+0xf0>)
    2e6c:	e7d2      	b.n	2e14 <bt_recv_prio+0x1c>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    2e6e:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    2e70:	2103      	movs	r1, #3
    2e72:	4628      	mov	r0, r5
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    2e74:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    2e78:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    2e7a:	f008 fda6 	bl	b9ca <net_buf_simple_pull>
	status = buf->data[0];
    2e7e:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    2e80:	4622      	mov	r2, r4
    2e82:	7819      	ldrb	r1, [r3, #0]
    2e84:	4638      	mov	r0, r7
    2e86:	f7ff f90d 	bl	20a4 <hci_cmd_done>
	if (ncmd) {
    2e8a:	b116      	cbz	r6, 2e92 <bt_recv_prio+0x9a>
    2e8c:	4817      	ldr	r0, [pc, #92]	; (2eec <bt_recv_prio+0xf4>)
    2e8e:	f009 f9fb 	bl	c288 <_impl_k_sem_give>
	net_buf_unref(buf);
    2e92:	4620      	mov	r0, r4
    2e94:	f008 fd50 	bl	b938 <net_buf_unref>
}
    2e98:	2000      	movs	r0, #0
    2e9a:	b002      	add	sp, #8
    2e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    2ea0:	68a6      	ldr	r6, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    2ea2:	f8b6 8002 	ldrh.w	r8, [r6, #2]
	u8_t ncmd = evt->ncmd;
    2ea6:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    2ea8:	2104      	movs	r1, #4
    2eaa:	4628      	mov	r0, r5
    2eac:	f008 fd8d 	bl	b9ca <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    2eb0:	4622      	mov	r2, r4
    2eb2:	7831      	ldrb	r1, [r6, #0]
    2eb4:	4640      	mov	r0, r8
    2eb6:	f7ff f8f5 	bl	20a4 <hci_cmd_done>
	if (ncmd) {
    2eba:	2f00      	cmp	r7, #0
    2ebc:	d0e9      	beq.n	2e92 <bt_recv_prio+0x9a>
    2ebe:	e7e5      	b.n	2e8c <bt_recv_prio+0x94>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    2ec0:	4b03      	ldr	r3, [pc, #12]	; (2ed0 <bt_recv_prio+0xd8>)
    2ec2:	9301      	str	r3, [sp, #4]
    2ec4:	9300      	str	r3, [sp, #0]
    2ec6:	4a03      	ldr	r2, [pc, #12]	; (2ed4 <bt_recv_prio+0xdc>)
    2ec8:	4b03      	ldr	r3, [pc, #12]	; (2ed8 <bt_recv_prio+0xe0>)
    2eca:	4904      	ldr	r1, [pc, #16]	; (2edc <bt_recv_prio+0xe4>)
    2ecc:	4808      	ldr	r0, [pc, #32]	; (2ef0 <bt_recv_prio+0xf8>)
    2ece:	e7a1      	b.n	2e14 <bt_recv_prio+0x1c>
    2ed0:	0000ceef 	.word	0x0000ceef
    2ed4:	0000d7a6 	.word	0x0000d7a6
    2ed8:	0000d4cd 	.word	0x0000d4cd
    2edc:	0000d71b 	.word	0x0000d71b
    2ee0:	0000d635 	.word	0x0000d635
    2ee4:	0000d679 	.word	0x0000d679
    2ee8:	0000d6b3 	.word	0x0000d6b3
    2eec:	20003c40 	.word	0x20003c40
    2ef0:	0000d6d6 	.word	0x0000d6d6

00002ef4 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    2ef4:	4a08      	ldr	r2, [pc, #32]	; (2f18 <bt_hci_driver_register+0x24>)
    2ef6:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    2efa:	b93b      	cbnz	r3, 2f0c <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    2efc:	6881      	ldr	r1, [r0, #8]
    2efe:	b141      	cbz	r1, 2f12 <bt_hci_driver_register+0x1e>
    2f00:	68c1      	ldr	r1, [r0, #12]
    2f02:	b131      	cbz	r1, 2f12 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    2f04:	f8c2 00c4 	str.w	r0, [r2, #196]	; 0xc4
	return 0;
    2f08:	4618      	mov	r0, r3
    2f0a:	4770      	bx	lr
		return -EALREADY;
    2f0c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    2f10:	4770      	bx	lr
		return -EINVAL;
    2f12:	f06f 0015 	mvn.w	r0, #21
}
    2f16:	4770      	bx	lr
    2f18:	20003bb8 	.word	0x20003bb8

00002f1c <bt_enable>:
{
    2f1c:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    2f1e:	4d2e      	ldr	r5, [pc, #184]	; (2fd8 <bt_enable+0xbc>)
    2f20:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
{
    2f24:	b086      	sub	sp, #24
    2f26:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    2f28:	b96b      	cbnz	r3, 2f46 <bt_enable+0x2a>
		BT_ERR("No HCI driver registered");
    2f2a:	4b2c      	ldr	r3, [pc, #176]	; (2fdc <bt_enable+0xc0>)
    2f2c:	9301      	str	r3, [sp, #4]
    2f2e:	9300      	str	r3, [sp, #0]
    2f30:	4a2b      	ldr	r2, [pc, #172]	; (2fe0 <bt_enable+0xc4>)
    2f32:	4b2c      	ldr	r3, [pc, #176]	; (2fe4 <bt_enable+0xc8>)
    2f34:	492c      	ldr	r1, [pc, #176]	; (2fe8 <bt_enable+0xcc>)
    2f36:	482d      	ldr	r0, [pc, #180]	; (2fec <bt_enable+0xd0>)
    2f38:	f7fe fa64 	bl	1404 <printk>
		return -ENODEV;
    2f3c:	f06f 0412 	mvn.w	r4, #18
}
    2f40:	4620      	mov	r0, r4
    2f42:	b006      	add	sp, #24
    2f44:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    2f46:	2101      	movs	r1, #1
    2f48:	f105 0070 	add.w	r0, r5, #112	; 0x70
    2f4c:	f7ff f888 	bl	2060 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    2f50:	f010 0001 	ands.w	r0, r0, #1
    2f54:	d13d      	bne.n	2fd2 <bt_enable+0xb6>
	ready_cb = cb;
    2f56:	4b26      	ldr	r3, [pc, #152]	; (2ff0 <bt_enable+0xd4>)

    2f58:	4926      	ldr	r1, [pc, #152]	; (2ff4 <bt_enable+0xd8>)
    2f5a:	601e      	str	r6, [r3, #0]
    2f5c:	f06f 0308 	mvn.w	r3, #8
    2f60:	9005      	str	r0, [sp, #20]
    2f62:	9004      	str	r0, [sp, #16]
    2f64:	9303      	str	r3, [sp, #12]
    2f66:	9002      	str	r0, [sp, #8]
    2f68:	9001      	str	r0, [sp, #4]
    2f6a:	9000      	str	r0, [sp, #0]
    2f6c:	4b22      	ldr	r3, [pc, #136]	; (2ff8 <bt_enable+0xdc>)
    2f6e:	4823      	ldr	r0, [pc, #140]	; (2ffc <bt_enable+0xe0>)
    2f70:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    2f74:	f009 fbaa 	bl	c6cc <_impl_k_thread_create>
	err = bt_dev.drv->open();
    2f78:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    2f7c:	689b      	ldr	r3, [r3, #8]
    2f7e:	4798      	blx	r3
	if (err) {
    2f80:	4604      	mov	r4, r0
    2f82:	b150      	cbz	r0, 2f9a <bt_enable+0x7e>
		BT_ERR("HCI driver open failed (%d)", err);
    2f84:	4b15      	ldr	r3, [pc, #84]	; (2fdc <bt_enable+0xc0>)
    2f86:	9302      	str	r3, [sp, #8]
    2f88:	e88d 0018 	stmia.w	sp, {r3, r4}
    2f8c:	4a14      	ldr	r2, [pc, #80]	; (2fe0 <bt_enable+0xc4>)
    2f8e:	4b15      	ldr	r3, [pc, #84]	; (2fe4 <bt_enable+0xc8>)
    2f90:	4915      	ldr	r1, [pc, #84]	; (2fe8 <bt_enable+0xcc>)
    2f92:	481b      	ldr	r0, [pc, #108]	; (3000 <bt_enable+0xe4>)
    2f94:	f7fe fa36 	bl	1404 <printk>
		return err;
    2f98:	e7d2      	b.n	2f40 <bt_enable+0x24>
	if (!cb) {
    2f9a:	b96e      	cbnz	r6, 2fb8 <bt_enable+0x9c>
	err = hci_init();
    2f9c:	f7ff fa44 	bl	2428 <hci_init>
	if (err) {
    2fa0:	4604      	mov	r4, r0
    2fa2:	2800      	cmp	r0, #0
    2fa4:	d1cc      	bne.n	2f40 <bt_enable+0x24>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2fa6:	2102      	movs	r1, #2
    2fa8:	f105 0070 	add.w	r0, r5, #112	; 0x70
    2fac:	f7ff f858 	bl	2060 <atomic_or>
	bt_le_scan_update(false);
    2fb0:	4620      	mov	r0, r4
    2fb2:	f7ff fa19 	bl	23e8 <bt_le_scan_update>
    2fb6:	e7c3      	b.n	2f40 <bt_enable+0x24>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    2fb8:	2101      	movs	r1, #1
    2fba:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    2fbe:	f7ff f84f 	bl	2060 <atomic_or>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    2fc2:	07c3      	lsls	r3, r0, #31
    2fc4:	d4bc      	bmi.n	2f40 <bt_enable+0x24>
		k_queue_append(&work_q->queue, work);
    2fc6:	f105 0164 	add.w	r1, r5, #100	; 0x64
    2fca:	480e      	ldr	r0, [pc, #56]	; (3004 <bt_enable+0xe8>)
    2fcc:	f008 fee9 	bl	bda2 <k_queue_append>
    2fd0:	e7b6      	b.n	2f40 <bt_enable+0x24>
		return -EALREADY;
    2fd2:	f06f 0444 	mvn.w	r4, #68	; 0x44
    2fd6:	e7b3      	b.n	2f40 <bt_enable+0x24>
    2fd8:	20003bb8 	.word	0x20003bb8
    2fdc:	0000ceef 	.word	0x0000ceef
    2fe0:	0000d7a6 	.word	0x0000d7a6
    2fe4:	0000d4da 	.word	0x0000d4da
    2fe8:	0000d71b 	.word	0x0000d71b
    2fec:	0000d4e4 	.word	0x0000d4e4
    2ff0:	2000030c 	.word	0x2000030c
    2ff4:	20001c58 	.word	0x20001c58
    2ff8:	00002aa5 	.word	0x00002aa5
    2ffc:	20000314 	.word	0x20000314
    3000:	0000d50d 	.word	0x0000d50d
    3004:	20001be0 	.word	0x20001be0

00003008 <bt_le_adv_start>:
//#endif /*CONFIG_EXT_ADV*/

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    3008:	b5f0      	push	{r4, r5, r6, r7, lr}
    300a:	b085      	sub	sp, #20
    300c:	4605      	mov	r5, r0
    300e:	460c      	mov	r4, r1
    3010:	4617      	mov	r7, r2
    3012:	461e      	mov	r6, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct net_buf *buf;
	int err;

	if (!valid_adv_param(param)) {
    3014:	f7ff f80a 	bl	202c <valid_adv_param>
    3018:	b920      	cbnz	r0, 3024 <bt_le_adv_start+0x1c>
		return -EINVAL;
    301a:	f06f 0415 	mvn.w	r4, #21
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    301e:	4620      	mov	r0, r4
    3020:	b005      	add	sp, #20
    3022:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    3024:	2005      	movs	r0, #5
    3026:	f7ff f89f 	bl	2168 <atomic_test_bit.constprop.24>
    302a:	2800      	cmp	r0, #0
    302c:	f040 8087 	bne.w	313e <bt_le_adv_start+0x136>
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    3030:	4621      	mov	r1, r4
    3032:	463a      	mov	r2, r7
    3034:	f242 0008 	movw	r0, #8200	; 0x2008
    3038:	f7ff f98a 	bl	2350 <set_ad>
	if (err) {
    303c:	4604      	mov	r4, r0
    303e:	2800      	cmp	r0, #0
    3040:	d1ed      	bne.n	301e <bt_le_adv_start+0x16>
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3042:	bb5e      	cbnz	r6, 309c <bt_le_adv_start+0x94>
    3044:	782b      	ldrb	r3, [r5, #0]
    3046:	07d9      	lsls	r1, r3, #31
    3048:	d428      	bmi.n	309c <bt_le_adv_start+0x94>
	memset(&set_param, 0, sizeof(set_param));
    304a:	220f      	movs	r2, #15
    304c:	2100      	movs	r1, #0
    304e:	4668      	mov	r0, sp
    3050:	f7fd fafe 	bl	650 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    3054:	886b      	ldrh	r3, [r5, #2]
    3056:	f8ad 3000 	strh.w	r3, [sp]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    305a:	88ab      	ldrh	r3, [r5, #4]
    305c:	f8ad 3002 	strh.w	r3, [sp, #2]
	set_param.channel_map  = 0x07;
    3060:	2307      	movs	r3, #7
    3062:	f88d 300d 	strb.w	r3, [sp, #13]
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    3066:	782b      	ldrb	r3, [r5, #0]
    3068:	07da      	lsls	r2, r3, #31
    306a:	d521      	bpl.n	30b0 <bt_le_adv_start+0xa8>
			if (atomic_test_bit(bt_dev.flags,
    306c:	2002      	movs	r0, #2
    306e:	f7ff f87b 	bl	2168 <atomic_test_bit.constprop.24>
    3072:	b110      	cbz	r0, 307a <bt_le_adv_start+0x72>
				set_random_address(&bt_dev.id_addr.a);
    3074:	4833      	ldr	r0, [pc, #204]	; (3144 <bt_le_adv_start+0x13c>)
    3076:	f7ff f8f7 	bl	2268 <set_random_address>
			set_param.own_addr_type = bt_dev.id_addr.type;
    307a:	4b33      	ldr	r3, [pc, #204]	; (3148 <bt_le_adv_start+0x140>)
    307c:	781b      	ldrb	r3, [r3, #0]
    307e:	f88d 3005 	strb.w	r3, [sp, #5]
		set_param.type = BT_LE_ADV_IND;
    3082:	2300      	movs	r3, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    3084:	210f      	movs	r1, #15
    3086:	f242 0006 	movw	r0, #8198	; 0x2006
			set_param.type = BT_LE_ADV_NONCONN_IND;
    308a:	f88d 3004 	strb.w	r3, [sp, #4]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    308e:	f7ff f87d 	bl	218c <bt_hci_cmd_create>
	if (!buf) {
    3092:	4604      	mov	r4, r0
    3094:	bb10      	cbnz	r0, 30dc <bt_le_adv_start+0xd4>
		return -ENOBUFS;
    3096:	f06f 0436 	mvn.w	r4, #54	; 0x36
    309a:	e7c0      	b.n	301e <bt_le_adv_start+0x16>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    309c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    309e:	4631      	mov	r1, r6
    30a0:	f242 0009 	movw	r0, #8201	; 0x2009
    30a4:	f7ff f954 	bl	2350 <set_ad>
		if (err) {
    30a8:	4604      	mov	r4, r0
    30aa:	2800      	cmp	r0, #0
    30ac:	d0cd      	beq.n	304a <bt_le_adv_start+0x42>
    30ae:	e7b6      	b.n	301e <bt_le_adv_start+0x16>
		if (param->own_addr) {
    30b0:	68a8      	ldr	r0, [r5, #8]
    30b2:	b170      	cbz	r0, 30d2 <bt_le_adv_start+0xca>
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    30b4:	7943      	ldrb	r3, [r0, #5]
    30b6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    30ba:	d1ae      	bne.n	301a <bt_le_adv_start+0x12>
			err = set_random_address(param->own_addr);
    30bc:	f7ff f8d4 	bl	2268 <set_random_address>
			err = le_set_private_addr();
    30c0:	4604      	mov	r4, r0
		if (err) {
    30c2:	2800      	cmp	r0, #0
    30c4:	d1ab      	bne.n	301e <bt_le_adv_start+0x16>
		set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    30c6:	2301      	movs	r3, #1
    30c8:	f88d 3005 	strb.w	r3, [sp, #5]
		if (sd) {
    30cc:	b126      	cbz	r6, 30d8 <bt_le_adv_start+0xd0>
			set_param.type = BT_LE_ADV_SCAN_IND;
    30ce:	2302      	movs	r3, #2
    30d0:	e7d8      	b.n	3084 <bt_le_adv_start+0x7c>
			err = le_set_private_addr();
    30d2:	f7ff f8f7 	bl	22c4 <le_set_private_addr>
    30d6:	e7f3      	b.n	30c0 <bt_le_adv_start+0xb8>
			set_param.type = BT_LE_ADV_NONCONN_IND;
    30d8:	2303      	movs	r3, #3
    30da:	e7d3      	b.n	3084 <bt_le_adv_start+0x7c>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    30dc:	220f      	movs	r2, #15
    30de:	4669      	mov	r1, sp
    30e0:	3008      	adds	r0, #8
    30e2:	f008 fc61 	bl	b9a8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    30e6:	4621      	mov	r1, r4
    30e8:	2200      	movs	r2, #0
    30ea:	f242 0006 	movw	r0, #8198	; 0x2006
    30ee:	f7ff f87d 	bl	21ec <bt_hci_cmd_send_sync>
	if (err) {
    30f2:	4604      	mov	r4, r0
    30f4:	2800      	cmp	r0, #0
    30f6:	d192      	bne.n	301e <bt_le_adv_start+0x16>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    30f8:	2101      	movs	r1, #1
    30fa:	f242 000a 	movw	r0, #8202	; 0x200a
    30fe:	f7ff f845 	bl	218c <bt_hci_cmd_create>
	if (!buf) {
    3102:	4606      	mov	r6, r0
    3104:	2800      	cmp	r0, #0
    3106:	d0c6      	beq.n	3096 <bt_le_adv_start+0x8e>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    3108:	2101      	movs	r1, #1
    310a:	3008      	adds	r0, #8
    310c:	f008 fc55 	bl	b9ba <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    3110:	4622      	mov	r2, r4
    3112:	4631      	mov	r1, r6
    3114:	f242 000a 	movw	r0, #8202	; 0x200a
    3118:	f7ff f868 	bl	21ec <bt_hci_cmd_send_sync>
	if (err) {
    311c:	4604      	mov	r4, r0
    311e:	2800      	cmp	r0, #0
    3120:	f47f af7d 	bne.w	301e <bt_le_adv_start+0x16>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3124:	2120      	movs	r1, #32
    3126:	4809      	ldr	r0, [pc, #36]	; (314c <bt_le_adv_start+0x144>)
    3128:	f7fe ff9a 	bl	2060 <atomic_or>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    312c:	782b      	ldrb	r3, [r5, #0]
    312e:	079b      	lsls	r3, r3, #30
    3130:	f53f af75 	bmi.w	301e <bt_le_adv_start+0x16>
    3134:	2140      	movs	r1, #64	; 0x40
    3136:	4805      	ldr	r0, [pc, #20]	; (314c <bt_le_adv_start+0x144>)
    3138:	f7fe ff92 	bl	2060 <atomic_or>
    313c:	e76f      	b.n	301e <bt_le_adv_start+0x16>
		return -EALREADY;
    313e:	f06f 0444 	mvn.w	r4, #68	; 0x44
    3142:	e76c      	b.n	301e <bt_le_adv_start+0x16>
    3144:	20003bb9 	.word	0x20003bb9
    3148:	20003bb8 	.word	0x20003bb8
    314c:	20003c28 	.word	0x20003c28

00003150 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    3150:	b510      	push	{r4, lr}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3152:	f06f 0140 	mvn.w	r1, #64	; 0x40
    3156:	4819      	ldr	r0, [pc, #100]	; (31bc <bt_le_adv_stop+0x6c>)
    3158:	f7fe ff93 	bl	2082 <atomic_and>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    315c:	2005      	movs	r0, #5
    315e:	f7ff f803 	bl	2168 <atomic_test_bit.constprop.24>
    3162:	b910      	cbnz	r0, 316a <bt_le_adv_stop+0x1a>
		return 0;
    3164:	2400      	movs	r4, #0
			le_set_private_addr();
		}
	}

	return 0;
}
    3166:	4620      	mov	r0, r4
    3168:	bd10      	pop	{r4, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    316a:	2101      	movs	r1, #1
    316c:	f242 000a 	movw	r0, #8202	; 0x200a
    3170:	f7ff f80c 	bl	218c <bt_hci_cmd_create>
	if (!buf) {
    3174:	4604      	mov	r4, r0
    3176:	b1f0      	cbz	r0, 31b6 <bt_le_adv_stop+0x66>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    3178:	2100      	movs	r1, #0
    317a:	3008      	adds	r0, #8
    317c:	f008 fc1d 	bl	b9ba <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    3180:	4621      	mov	r1, r4
    3182:	2200      	movs	r2, #0
    3184:	f242 000a 	movw	r0, #8202	; 0x200a
    3188:	f7ff f830 	bl	21ec <bt_hci_cmd_send_sync>
	if (err) {
    318c:	4604      	mov	r4, r0
    318e:	2800      	cmp	r0, #0
    3190:	d1e9      	bne.n	3166 <bt_le_adv_stop+0x16>
    3192:	f06f 0120 	mvn.w	r1, #32
    3196:	4809      	ldr	r0, [pc, #36]	; (31bc <bt_le_adv_stop+0x6c>)
    3198:	f7fe ff73 	bl	2082 <atomic_and>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    319c:	2007      	movs	r0, #7
    319e:	f7fe ffe3 	bl	2168 <atomic_test_bit.constprop.24>
    31a2:	2800      	cmp	r0, #0
    31a4:	d0de      	beq.n	3164 <bt_le_adv_stop+0x14>
		    atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    31a6:	2009      	movs	r0, #9
    31a8:	f7fe ffde 	bl	2168 <atomic_test_bit.constprop.24>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    31ac:	2800      	cmp	r0, #0
    31ae:	d0d9      	beq.n	3164 <bt_le_adv_stop+0x14>
			le_set_private_addr();
    31b0:	f7ff f888 	bl	22c4 <le_set_private_addr>
    31b4:	e7d7      	b.n	3166 <bt_le_adv_stop+0x16>
		return -ENOBUFS;
    31b6:	f06f 0436 	mvn.w	r4, #54	; 0x36
    31ba:	e7d4      	b.n	3166 <bt_le_adv_stop+0x16>
    31bc:	20003c28 	.word	0x20003c28

000031c0 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    31c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    31c4:	7803      	ldrb	r3, [r0, #0]
    31c6:	2b01      	cmp	r3, #1
{
    31c8:	4605      	mov	r5, r0
    31ca:	460f      	mov	r7, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    31cc:	d810      	bhi.n	31f0 <bt_le_scan_start+0x30>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    31ce:	7843      	ldrb	r3, [r0, #1]
    31d0:	2b01      	cmp	r3, #1
    31d2:	d80d      	bhi.n	31f0 <bt_le_scan_start+0x30>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    31d4:	8841      	ldrh	r1, [r0, #2]
    31d6:	1f0b      	subs	r3, r1, #4
    31d8:	b29b      	uxth	r3, r3
    31da:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    31de:	4283      	cmp	r3, r0
    31e0:	d806      	bhi.n	31f0 <bt_le_scan_start+0x30>
	if (param->window < 0x0004 || param->window > 0x4000) {
    31e2:	88aa      	ldrh	r2, [r5, #4]
    31e4:	1f13      	subs	r3, r2, #4
    31e6:	b29b      	uxth	r3, r3
    31e8:	4283      	cmp	r3, r0
    31ea:	d801      	bhi.n	31f0 <bt_le_scan_start+0x30>
	if (param->window > param->interval) {
    31ec:	4291      	cmp	r1, r2
    31ee:	d26c      	bcs.n	32ca <bt_le_scan_start+0x10a>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    31f0:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    31f4:	4620      	mov	r0, r4
    31f6:	b002      	add	sp, #8
    31f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    31fc:	2007      	movs	r0, #7
    31fe:	f7fe ffb3 	bl	2168 <atomic_test_bit.constprop.24>
    3202:	b150      	cbz	r0, 321a <bt_le_scan_start+0x5a>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    3204:	4608      	mov	r0, r1
    3206:	f7ff f86f 	bl	22e8 <set_le_scan_enable>
		if (err) {
    320a:	4604      	mov	r4, r0
    320c:	b128      	cbz	r0, 321a <bt_le_scan_start+0x5a>
    320e:	f46f 7180 	mvn.w	r1, #256	; 0x100
    3212:	4835      	ldr	r0, [pc, #212]	; (32e8 <bt_le_scan_start+0x128>)
    3214:	f7fe ff35 	bl	2082 <atomic_and>
		return err;
    3218:	e7ec      	b.n	31f4 <bt_le_scan_start+0x34>
	if (param->filter_dup) {
    321a:	786b      	ldrb	r3, [r5, #1]
    321c:	2b00      	cmp	r3, #0
    321e:	d048      	beq.n	32b2 <bt_le_scan_start+0xf2>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3220:	f44f 6180 	mov.w	r1, #1024	; 0x400
    3224:	4830      	ldr	r0, [pc, #192]	; (32e8 <bt_le_scan_start+0x128>)
    3226:	f7fe ff1b 	bl	2060 <atomic_or>
	memset(&set_param, 0, sizeof(set_param));
    322a:	2207      	movs	r2, #7
    322c:	2100      	movs	r1, #0
    322e:	4668      	mov	r0, sp
	err = start_le_scan(param->type, param->interval, param->window);
    3230:	782e      	ldrb	r6, [r5, #0]
    3232:	f8b5 8002 	ldrh.w	r8, [r5, #2]
    3236:	88ac      	ldrh	r4, [r5, #4]
	memset(&set_param, 0, sizeof(set_param));
    3238:	f7fd fa0a 	bl	650 <memset>
	set_param.filter_policy = 0x00;
    323c:	2300      	movs	r3, #0
    323e:	f88d 3006 	strb.w	r3, [sp, #6]
		set_param.addr_type =  bt_dev.id_addr.type;
    3242:	4b2a      	ldr	r3, [pc, #168]	; (32ec <bt_le_scan_start+0x12c>)
	set_param.scan_type = scan_type;
    3244:	f88d 6000 	strb.w	r6, [sp]
		set_param.addr_type =  bt_dev.id_addr.type;
    3248:	781b      	ldrb	r3, [r3, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    324a:	f8ad 8001 	strh.w	r8, [sp, #1]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    324e:	2e01      	cmp	r6, #1
	set_param.window = sys_cpu_to_le16(window);
    3250:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr.type;
    3254:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    3258:	d10a      	bne.n	3270 <bt_le_scan_start+0xb0>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    325a:	2005      	movs	r0, #5
    325c:	f7fe ff84 	bl	2168 <atomic_test_bit.constprop.24>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    3260:	b930      	cbnz	r0, 3270 <bt_le_scan_start+0xb0>
			err = le_set_private_addr();
    3262:	f7ff f82f 	bl	22c4 <le_set_private_addr>
			if (err) {
    3266:	4604      	mov	r4, r0
    3268:	2800      	cmp	r0, #0
    326a:	d1d0      	bne.n	320e <bt_le_scan_start+0x4e>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    326c:	f88d 6005 	strb.w	r6, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    3270:	2107      	movs	r1, #7
    3272:	f242 000b 	movw	r0, #8203	; 0x200b
    3276:	f7fe ff89 	bl	218c <bt_hci_cmd_create>
	if (!buf) {
    327a:	4604      	mov	r4, r0
    327c:	b380      	cbz	r0, 32e0 <bt_le_scan_start+0x120>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    327e:	2207      	movs	r2, #7
    3280:	4669      	mov	r1, sp
    3282:	3008      	adds	r0, #8
    3284:	f008 fb90 	bl	b9a8 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    3288:	4621      	mov	r1, r4
    328a:	f242 000b 	movw	r0, #8203	; 0x200b
    328e:	f7ff fbd1 	bl	2a34 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    3292:	2001      	movs	r0, #1
    3294:	f7ff f828 	bl	22e8 <set_le_scan_enable>
	if (err) {
    3298:	4604      	mov	r4, r0
    329a:	2800      	cmp	r0, #0
    329c:	d1b7      	bne.n	320e <bt_le_scan_start+0x4e>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    329e:	2e01      	cmp	r6, #1
    32a0:	d10d      	bne.n	32be <bt_le_scan_start+0xfe>
    32a2:	f44f 7100 	mov.w	r1, #512	; 0x200
    32a6:	4810      	ldr	r0, [pc, #64]	; (32e8 <bt_le_scan_start+0x128>)
    32a8:	f7fe feda 	bl	2060 <atomic_or>
	scan_dev_found_cb = cb;
    32ac:	4b10      	ldr	r3, [pc, #64]	; (32f0 <bt_le_scan_start+0x130>)
    32ae:	601f      	str	r7, [r3, #0]
	return 0;
    32b0:	e7a0      	b.n	31f4 <bt_le_scan_start+0x34>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    32b2:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    32b6:	480c      	ldr	r0, [pc, #48]	; (32e8 <bt_le_scan_start+0x128>)
    32b8:	f7fe fee3 	bl	2082 <atomic_and>
    32bc:	e7b5      	b.n	322a <bt_le_scan_start+0x6a>
    32be:	f46f 7100 	mvn.w	r1, #512	; 0x200
    32c2:	4809      	ldr	r0, [pc, #36]	; (32e8 <bt_le_scan_start+0x128>)
    32c4:	f7fe fedd 	bl	2082 <atomic_and>
    32c8:	e7f0      	b.n	32ac <bt_le_scan_start+0xec>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    32ca:	f44f 7180 	mov.w	r1, #256	; 0x100
    32ce:	4806      	ldr	r0, [pc, #24]	; (32e8 <bt_le_scan_start+0x128>)
    32d0:	f7fe fec6 	bl	2060 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    32d4:	f410 7180 	ands.w	r1, r0, #256	; 0x100
    32d8:	d090      	beq.n	31fc <bt_le_scan_start+0x3c>
		return -EALREADY;
    32da:	f06f 0444 	mvn.w	r4, #68	; 0x44
    32de:	e789      	b.n	31f4 <bt_le_scan_start+0x34>
		return -ENOBUFS;
    32e0:	f06f 0436 	mvn.w	r4, #54	; 0x36
    32e4:	e793      	b.n	320e <bt_le_scan_start+0x4e>
    32e6:	bf00      	nop
    32e8:	20003c28 	.word	0x20003c28
    32ec:	20003bb8 	.word	0x20003bb8
    32f0:	20000310 	.word	0x20000310

000032f4 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    32f4:	b538      	push	{r3, r4, r5, lr}
    32f6:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    32f8:	4805      	ldr	r0, [pc, #20]	; (3310 <bt_buf_get_rx+0x1c>)
    32fa:	f008 faed 	bl	b8d8 <net_buf_alloc_fixed>
#endif

	if (buf) {
    32fe:	4604      	mov	r4, r0
    3300:	b120      	cbz	r0, 330c <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3302:	2100      	movs	r1, #0
    3304:	3008      	adds	r0, #8
    3306:	f008 fb06 	bl	b916 <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    330a:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    330c:	4620      	mov	r0, r4
    330e:	bd38      	pop	{r3, r4, r5, pc}
    3310:	20003f24 	.word	0x20003f24

00003314 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    3314:	b510      	push	{r4, lr}
    3316:	4601      	mov	r1, r0
	__asm__ volatile(
    3318:	f04f 0320 	mov.w	r3, #32
    331c:	f3ef 8011 	mrs	r0, BASEPRI
    3320:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    3324:	4a0b      	ldr	r2, [pc, #44]	; (3354 <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    3326:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    3328:	f8d2 40a0 	ldr.w	r4, [r2, #160]	; 0xa0
	bt_dev.sent_cmd = NULL;
    332c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3330:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    3334:	b924      	cbnz	r4, 3340 <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3336:	2001      	movs	r0, #1
}
    3338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    333c:	f7ff bfda 	b.w	32f4 <bt_buf_get_rx>
    3340:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3342:	f104 0008 	add.w	r0, r4, #8
    3346:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    3348:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    334a:	4619      	mov	r1, r3
    334c:	f008 fae3 	bl	b916 <net_buf_simple_reserve>
}
    3350:	4620      	mov	r0, r4
    3352:	bd10      	pop	{r4, pc}
    3354:	20003bb8 	.word	0x20003bb8

00003358 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    3358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    335a:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    335c:	1dc3      	adds	r3, r0, #7
{
    335e:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    3360:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    3364:	1e50      	subs	r0, r2, #1
{
    3366:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    3368:	b280      	uxth	r0, r0
{
    336a:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    336c:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    336e:	2100      	movs	r1, #0
    3370:	2204      	movs	r2, #4
    3372:	fb06 5000 	mla	r0, r6, r0, r5
    3376:	f7fd f96b 	bl	650 <memset>
    337a:	3c02      	subs	r4, #2
    337c:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    337e:	f64f 77ff 	movw	r7, #65535	; 0xffff
    3382:	42bc      	cmp	r4, r7
    3384:	d101      	bne.n	338a <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    3386:	b003      	add	sp, #12
    3388:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    338a:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    338e:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    3390:	2204      	movs	r2, #4
    3392:	1b80      	subs	r0, r0, r6
    3394:	eb0d 0102 	add.w	r1, sp, r2
    3398:	4428      	add	r0, r5
    339a:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    339c:	9301      	str	r3, [sp, #4]
    339e:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    33a0:	f7fd f92a 	bl	5f8 <memcpy>
    33a4:	e7ed      	b.n	3382 <mem_init+0x2a>

000033a6 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    33a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    33a8:	6805      	ldr	r5, [r0, #0]
{
    33aa:	4606      	mov	r6, r0
	if (*mem_head) {
    33ac:	b195      	cbz	r5, 33d4 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    33ae:	1deb      	adds	r3, r5, #7
    33b0:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    33b4:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    33b6:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    33b8:	4629      	mov	r1, r5
    33ba:	eb0d 0002 	add.w	r0, sp, r2
    33be:	f7fd f91b 	bl	5f8 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    33c2:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    33c4:	3c01      	subs	r4, #1
    33c6:	b2a4      	uxth	r4, r4
		if (head) {
    33c8:	b11b      	cbz	r3, 33d2 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    33ca:	1dda      	adds	r2, r3, #7
    33cc:	f022 0203 	bic.w	r2, r2, #3
    33d0:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    33d2:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    33d4:	4628      	mov	r0, r5
    33d6:	b002      	add	sp, #8
    33d8:	bd70      	pop	{r4, r5, r6, pc}

000033da <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    33da:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    33dc:	680c      	ldr	r4, [r1, #0]
{
    33de:	4606      	mov	r6, r0
    33e0:	460d      	mov	r5, r1
	if (*mem_head) {
    33e2:	b11c      	cbz	r4, 33ec <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    33e4:	1de3      	adds	r3, r4, #7
    33e6:	f023 0303 	bic.w	r3, r3, #3
    33ea:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    33ec:	2204      	movs	r2, #4
    33ee:	4629      	mov	r1, r5
    33f0:	4630      	mov	r0, r6
    33f2:	f7fd f901 	bl	5f8 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    33f6:	1df2      	adds	r2, r6, #7
    33f8:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    33fc:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    33fe:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    3400:	602e      	str	r6, [r5, #0]
    3402:	bd70      	pop	{r4, r5, r6, pc}

00003404 <mem_get>:
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    3404:	fb02 0001 	mla	r0, r2, r1, r0
    3408:	4770      	bx	lr

0000340a <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    340a:	1a40      	subs	r0, r0, r1
    340c:	b280      	uxth	r0, r0
}
    340e:	fbb0 f0f2 	udiv	r0, r0, r2
    3412:	4770      	bx	lr

00003414 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    3414:	b510      	push	{r4, lr}
	src += len;
    3416:	4411      	add	r1, r2
    3418:	3801      	subs	r0, #1
	while (len--) {
    341a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    341e:	3a01      	subs	r2, #1
    3420:	b292      	uxth	r2, r2
    3422:	429a      	cmp	r2, r3
    3424:	d100      	bne.n	3428 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    3426:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    3428:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    342c:	f800 4f01 	strb.w	r4, [r0, #1]!
    3430:	e7f5      	b.n	341e <mem_rcopy+0xa>

00003432 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    3432:	6010      	str	r0, [r2, #0]
    3434:	6008      	str	r0, [r1, #0]

	return link;
}
    3436:	4770      	bx	lr

00003438 <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    3438:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    343a:	6814      	ldr	r4, [r2, #0]
    343c:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    343e:	6814      	ldr	r4, [r2, #0]
    3440:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    3442:	6010      	str	r0, [r2, #0]

	return link;
}
    3444:	bd10      	pop	{r4, pc}

00003446 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    3446:	4288      	cmp	r0, r1
    3448:	d003      	beq.n	3452 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    344a:	b11a      	cbz	r2, 3454 <memq_peek+0xe>
		*mem = head->mem;
    344c:	6843      	ldr	r3, [r0, #4]
    344e:	6013      	str	r3, [r2, #0]
    3450:	4770      	bx	lr
		return NULL;
    3452:	2000      	movs	r0, #0
	}

	return head;
}
    3454:	4770      	bx	lr

00003456 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    3456:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    3458:	4283      	cmp	r3, r0
    345a:	d009      	beq.n	3470 <memq_dequeue+0x1a>
	if (mem) {
    345c:	b122      	cbz	r2, 3468 <memq_dequeue+0x12>
		*mem = head->mem;
    345e:	6858      	ldr	r0, [r3, #4]
    3460:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    3462:	681a      	ldr	r2, [r3, #0]
    3464:	600a      	str	r2, [r1, #0]

	return link;
    3466:	e001      	b.n	346c <memq_dequeue+0x16>
	if (!link) {
    3468:	2b00      	cmp	r3, #0
    346a:	d1fa      	bne.n	3462 <memq_dequeue+0xc>
}
    346c:	4618      	mov	r0, r3
    346e:	4770      	bx	lr
		return NULL;
    3470:	2300      	movs	r3, #0
    3472:	e7fb      	b.n	346c <memq_dequeue+0x16>

00003474 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    3474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    3478:	4f11      	ldr	r7, [pc, #68]	; (34c0 <mayfly_init+0x4c>)
    347a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 34c4 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    347e:	2604      	movs	r6, #4
	while (callee_id--) {
    3480:	3e01      	subs	r6, #1
    3482:	b2f6      	uxtb	r6, r6
    3484:	2eff      	cmp	r6, #255	; 0xff
    3486:	d019      	beq.n	34bc <mayfly_init+0x48>
    3488:	b233      	sxth	r3, r6
    348a:	ea4f 0883 	mov.w	r8, r3, lsl #2
    348e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3492:	011d      	lsls	r5, r3, #4
    3494:	2404      	movs	r4, #4
    3496:	f04f 0a0c 	mov.w	sl, #12
    349a:	e00a      	b.n	34b2 <mayfly_init+0x3e>
    349c:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    34a0:	1d0a      	adds	r2, r1, #4
    34a2:	eb04 0008 	add.w	r0, r4, r8
    34a6:	443a      	add	r2, r7
    34a8:	4439      	add	r1, r7
    34aa:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    34ae:	f7ff ffc0 	bl	3432 <memq_init>
		while (caller_id--) {
    34b2:	3c01      	subs	r4, #1
    34b4:	b2e4      	uxtb	r4, r4
    34b6:	2cff      	cmp	r4, #255	; 0xff
    34b8:	d1f0      	bne.n	349c <mayfly_init+0x28>
    34ba:	e7e1      	b.n	3480 <mayfly_init+0xc>
    34bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    34c0:	200003fc 	.word	0x200003fc
    34c4:	2000037c 	.word	0x2000037c

000034c8 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    34c8:	b4f0      	push	{r4, r5, r6, r7}
    34ca:	4b12      	ldr	r3, [pc, #72]	; (3514 <mayfly_enable+0x4c>)
    34cc:	4605      	mov	r5, r0
    34ce:	460f      	mov	r7, r1
    34d0:	260c      	movs	r6, #12
    34d2:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    34d4:	b172      	cbz	r2, 34f4 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    34d6:	4361      	muls	r1, r4
    34d8:	fb06 1400 	mla	r4, r6, r0, r1
    34dc:	4423      	add	r3, r4
    34de:	7a59      	ldrb	r1, [r3, #9]
    34e0:	7a18      	ldrb	r0, [r3, #8]
    34e2:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    34e4:	bf04      	itt	eq
    34e6:	3101      	addeq	r1, #1
    34e8:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    34ea:	4628      	mov	r0, r5
    34ec:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    34ee:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    34f0:	f008 b84e 	b.w	b590 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    34f4:	434c      	muls	r4, r1
    34f6:	fb06 4400 	mla	r4, r6, r0, r4
    34fa:	4423      	add	r3, r4
    34fc:	7a9c      	ldrb	r4, [r3, #10]
    34fe:	7ada      	ldrb	r2, [r3, #11]
    3500:	42a2      	cmp	r2, r4
    3502:	d104      	bne.n	350e <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    3504:	3201      	adds	r2, #1
    3506:	729a      	strb	r2, [r3, #10]
}
    3508:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    350a:	f008 b8a1 	b.w	b650 <mayfly_pend>
}
    350e:	bcf0      	pop	{r4, r5, r6, r7}
    3510:	4770      	bx	lr
    3512:	bf00      	nop
    3514:	200003fc 	.word	0x200003fc

00003518 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    3518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    351a:	4605      	mov	r5, r0
    351c:	460e      	mov	r6, r1
    351e:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    3520:	b18a      	cbz	r2, 3546 <mayfly_enqueue+0x2e>
    3522:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    3524:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    3526:	7820      	ldrb	r0, [r4, #0]
    3528:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    352a:	f010 0703 	ands.w	r7, r0, #3
    352e:	d029      	beq.n	3584 <mayfly_enqueue+0x6c>
		if (chain) {
    3530:	b303      	cbz	r3, 3574 <mayfly_enqueue+0x5c>
			if (state != 1) {
    3532:	2f01      	cmp	r7, #1
    3534:	d039      	beq.n	35aa <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    3536:	3201      	adds	r2, #1
    3538:	b2d2      	uxtb	r2, r2
    353a:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    353c:	4631      	mov	r1, r6
    353e:	4628      	mov	r0, r5
    3540:	f008 f886 	bl	b650 <mayfly_pend>
    3544:	e01c      	b.n	3580 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    3546:	f008 f871 	bl	b62c <mayfly_prio_is_equal>
    354a:	2800      	cmp	r0, #0
    354c:	d0e9      	beq.n	3522 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    354e:	4631      	mov	r1, r6
    3550:	4628      	mov	r0, r5
    3552:	f008 f845 	bl	b5e0 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    3556:	2800      	cmp	r0, #0
    3558:	d0e3      	beq.n	3522 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    355a:	2330      	movs	r3, #48	; 0x30
    355c:	220c      	movs	r2, #12
    355e:	4373      	muls	r3, r6
    3560:	fb02 3305 	mla	r3, r2, r5, r3
    3564:	4a12      	ldr	r2, [pc, #72]	; (35b0 <mayfly_enqueue+0x98>)
    3566:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    3568:	7a93      	ldrb	r3, [r2, #10]
    356a:	7ad2      	ldrb	r2, [r2, #11]
    356c:	1a9b      	subs	r3, r3, r2
    356e:	bf18      	it	ne
    3570:	2301      	movne	r3, #1
    3572:	e7d7      	b.n	3524 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    3574:	3202      	adds	r2, #2
    3576:	b2d2      	uxtb	r2, r2
    3578:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    357a:	68e3      	ldr	r3, [r4, #12]
    357c:	68a0      	ldr	r0, [r4, #8]
    357e:	4798      	blx	r3
		return 0;
    3580:	2000      	movs	r0, #0
    3582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    3584:	2b00      	cmp	r3, #0
    3586:	d0f8      	beq.n	357a <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    3588:	3201      	adds	r2, #1
    358a:	b2d2      	uxtb	r2, r2
    358c:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    358e:	2304      	movs	r3, #4
    3590:	2230      	movs	r2, #48	; 0x30
    3592:	fb12 3206 	smlabb	r2, r2, r6, r3
    3596:	230c      	movs	r3, #12
    3598:	fb13 2305 	smlabb	r3, r3, r5, r2
    359c:	4a04      	ldr	r2, [pc, #16]	; (35b0 <mayfly_enqueue+0x98>)
    359e:	6860      	ldr	r0, [r4, #4]
    35a0:	441a      	add	r2, r3
    35a2:	4621      	mov	r1, r4
    35a4:	f7ff ff48 	bl	3438 <memq_enqueue>
    35a8:	e7c8      	b.n	353c <mayfly_enqueue+0x24>
			return 1;
    35aa:	4638      	mov	r0, r7

	return 0;
}
    35ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35ae:	bf00      	nop
    35b0:	200003fc 	.word	0x200003fc

000035b4 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    35b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    35b8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    35bc:	b089      	sub	sp, #36	; 0x24
    35be:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    35c0:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    35c4:	4e43      	ldr	r6, [pc, #268]	; (36d4 <mayfly_run+0x120>)
    35c6:	9304      	str	r3, [sp, #16]
{
    35c8:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    35ca:	2404      	movs	r4, #4
	u8_t disable = 0;
    35cc:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    35d0:	3c01      	subs	r4, #1
    35d2:	b2e4      	uxtb	r4, r4
    35d4:	2cff      	cmp	r4, #255	; 0xff
    35d6:	d10b      	bne.n	35f0 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    35d8:	9b01      	ldr	r3, [sp, #4]
    35da:	2b00      	cmp	r3, #0
    35dc:	d076      	beq.n	36cc <mayfly_run+0x118>
    35de:	f1b8 0f00 	cmp.w	r8, #0
    35e2:	d173      	bne.n	36cc <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    35e4:	4642      	mov	r2, r8
    35e6:	4629      	mov	r1, r5
    35e8:	4628      	mov	r0, r5
    35ea:	f007 ffd1 	bl	b590 <mayfly_enable_cb>
    35ee:	e06d      	b.n	36cc <mayfly_run+0x118>
		struct mayfly *m = 0;
    35f0:	f10d 0b20 	add.w	fp, sp, #32
    35f4:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    35f6:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    35f8:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    35fc:	f04f 0930 	mov.w	r9, #48	; 0x30
    3600:	fb07 f304 	mul.w	r3, r7, r4
    3604:	fb09 3005 	mla	r0, r9, r5, r3
    3608:	1831      	adds	r1, r6, r0
    360a:	465a      	mov	r2, fp
    360c:	6849      	ldr	r1, [r1, #4]
    360e:	5830      	ldr	r0, [r6, r0]
    3610:	9302      	str	r3, [sp, #8]
    3612:	f7ff ff18 	bl	3446 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    3616:	9b04      	ldr	r3, [sp, #16]
    3618:	fb17 3704 	smlabb	r7, r7, r4, r3
    361c:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    361e:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    3620:	9303      	str	r3, [sp, #12]
		while (link) {
    3622:	f1ba 0f00 	cmp.w	sl, #0
    3626:	d119      	bne.n	365c <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    3628:	2230      	movs	r2, #48	; 0x30
    362a:	230c      	movs	r3, #12
    362c:	436a      	muls	r2, r5
    362e:	fb03 2204 	mla	r2, r3, r4, r2
    3632:	4432      	add	r2, r6
    3634:	7a91      	ldrb	r1, [r2, #10]
    3636:	7ad0      	ldrb	r0, [r2, #11]
    3638:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    363a:	bf1e      	ittt	ne
    363c:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    363e:	2201      	movne	r2, #1
    3640:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    3642:	2230      	movs	r2, #48	; 0x30
    3644:	436a      	muls	r2, r5
    3646:	fb03 2304 	mla	r3, r3, r4, r2
    364a:	4433      	add	r3, r6
    364c:	7a1a      	ldrb	r2, [r3, #8]
    364e:	7a59      	ldrb	r1, [r3, #9]
    3650:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    3652:	bf1c      	itt	ne
    3654:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    3656:	f04f 0801 	movne.w	r8, #1
    365a:	e7b9      	b.n	35d0 <mayfly_run+0x1c>
			req = m->_req;
    365c:	9b07      	ldr	r3, [sp, #28]
    365e:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    3660:	785a      	ldrb	r2, [r3, #1]
    3662:	1abf      	subs	r7, r7, r2
    3664:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    3668:	2f01      	cmp	r7, #1
    366a:	d104      	bne.n	3676 <mayfly_run+0xc2>
				m->_ack--;
    366c:	3a01      	subs	r2, #1
    366e:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    3670:	6898      	ldr	r0, [r3, #8]
    3672:	68da      	ldr	r2, [r3, #12]
    3674:	4790      	blx	r2
			req = m->_req;
    3676:	9a07      	ldr	r2, [sp, #28]
    3678:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    367a:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    367c:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    367e:	1a9a      	subs	r2, r3, r2
    3680:	f002 0203 	and.w	r2, r2, #3
    3684:	2a01      	cmp	r2, #1
    3686:	9305      	str	r3, [sp, #20]
    3688:	d00d      	beq.n	36a6 <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    368a:	9b02      	ldr	r3, [sp, #8]
    368c:	9903      	ldr	r1, [sp, #12]
    368e:	fb09 3005 	mla	r0, r9, r5, r3
    3692:	4430      	add	r0, r6
    3694:	2200      	movs	r2, #0
    3696:	6840      	ldr	r0, [r0, #4]
    3698:	f7ff fedd 	bl	3456 <memq_dequeue>
				m->_link = link;
    369c:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    369e:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    36a0:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    36a4:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    36a6:	9b02      	ldr	r3, [sp, #8]
    36a8:	fb09 3305 	mla	r3, r9, r5, r3
    36ac:	18f1      	adds	r1, r6, r3
    36ae:	465a      	mov	r2, fp
    36b0:	6849      	ldr	r1, [r1, #4]
    36b2:	58f0      	ldr	r0, [r6, r3]
    36b4:	f7ff fec7 	bl	3446 <memq_peek>
			if (state == 1) {
    36b8:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    36ba:	4682      	mov	sl, r0
			if (state == 1) {
    36bc:	d1b1      	bne.n	3622 <mayfly_run+0x6e>
				if (caller_id || link) {
    36be:	b90c      	cbnz	r4, 36c4 <mayfly_run+0x110>
    36c0:	2800      	cmp	r0, #0
    36c2:	d0b1      	beq.n	3628 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    36c4:	4629      	mov	r1, r5
    36c6:	4628      	mov	r0, r5
    36c8:	f007 ffc2 	bl	b650 <mayfly_pend>
	}
}
    36cc:	b009      	add	sp, #36	; 0x24
    36ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    36d2:	bf00      	nop
    36d4:	200003fc 	.word	0x200003fc

000036d8 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    36d8:	b510      	push	{r4, lr}
    36da:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    36dc:	2000      	movs	r0, #0

	while (octets_len--) {
    36de:	3901      	subs	r1, #1
    36e0:	b2c9      	uxtb	r1, r1
    36e2:	29ff      	cmp	r1, #255	; 0xff
    36e4:	d100      	bne.n	36e8 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    36e6:	bd10      	pop	{r4, pc}
		bite = *octets;
    36e8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    36ec:	2b00      	cmp	r3, #0
    36ee:	d0f6      	beq.n	36de <util_ones_count_get+0x6>
			bite &= (bite - 1);
    36f0:	1e5c      	subs	r4, r3, #1
			one_count++;
    36f2:	3001      	adds	r0, #1
			bite &= (bite - 1);
    36f4:	4023      	ands	r3, r4
			one_count++;
    36f6:	b2c0      	uxtb	r0, r0
    36f8:	e7f8      	b.n	36ec <util_ones_count_get+0x14>

000036fa <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    36fa:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    36fc:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    36fe:	6805      	ldr	r5, [r0, #0]
	current = previous;
    3700:	461a      	mov	r2, r3
	total = 0;
    3702:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    3704:	2aff      	cmp	r2, #255	; 0xff
    3706:	d101      	bne.n	370c <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    3708:	2000      	movs	r0, #0
    370a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    370c:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    3710:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    3712:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    3716:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    371a:	d004      	beq.n	3726 <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    371c:	68b3      	ldr	r3, [r6, #8]
    371e:	441c      	add	r4, r3
		current = ticker_current->next;
    3720:	4613      	mov	r3, r2
    3722:	463a      	mov	r2, r7
    3724:	e7ee      	b.n	3704 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    3726:	4293      	cmp	r3, r2
    3728:	d100      	bne.n	372c <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    372a:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    372c:	b21b      	sxth	r3, r3
    372e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3732:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    3734:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    3736:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    373a:	7833      	ldrb	r3, [r6, #0]
    373c:	2bff      	cmp	r3, #255	; 0xff
    373e:	d006      	beq.n	374e <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    3740:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3744:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    3748:	689a      	ldr	r2, [r3, #8]
    374a:	4402      	add	r2, r0
    374c:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    374e:	4420      	add	r0, r4
    3750:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003752 <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    3752:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    3754:	1a55      	subs	r5, r2, r1
    3756:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    375a:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    375c:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    375e:	d109      	bne.n	3774 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3760:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    3764:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    3766:	42a2      	cmp	r2, r4
    3768:	d90e      	bls.n	3788 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    376a:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    376c:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    376e:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    3770:	6144      	str	r4, [r0, #20]
    3772:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3774:	1a8a      	subs	r2, r1, r2
    3776:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    377a:	4293      	cmp	r3, r2
    377c:	d901      	bls.n	3782 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    377e:	1a9a      	subs	r2, r3, r2
    3780:	e7f1      	b.n	3766 <ticks_to_expire_prep+0x14>
    3782:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    3784:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    3786:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    3788:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    378a:	2200      	movs	r2, #0
    378c:	e7ef      	b.n	376e <ticks_to_expire_prep+0x1c>

0000378e <ticker_job_op_cb>:
{
    378e:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    3790:	2200      	movs	r2, #0
    3792:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    3794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    3796:	6259      	str	r1, [r3, #36]	; 0x24
{
    3798:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    379a:	b10a      	cbz	r2, 37a0 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    379c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    379e:	4710      	bx	r2
    37a0:	4770      	bx	lr

000037a2 <ticker_worker>:
{
    37a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    37a6:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    37a8:	2301      	movs	r3, #1
{
    37aa:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    37ac:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    37ae:	2d00      	cmp	r5, #0
    37b0:	d14c      	bne.n	384c <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    37b2:	7f43      	ldrb	r3, [r0, #29]
    37b4:	2bff      	cmp	r3, #255	; 0xff
    37b6:	d102      	bne.n	37be <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    37b8:	77c5      	strb	r5, [r0, #31]
		return;
    37ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    37be:	f007 fa8f 	bl	ace0 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    37c2:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    37c4:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    37c6:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    37ca:	1bc7      	subs	r7, r0, r7
    37cc:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    37d0:	2eff      	cmp	r6, #255	; 0xff
    37d2:	d006      	beq.n	37e2 <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    37d4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    37d8:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    37dc:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    37de:	429f      	cmp	r7, r3
    37e0:	d218      	bcs.n	3814 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    37e2:	7aa2      	ldrb	r2, [r4, #10]
    37e4:	7ae3      	ldrb	r3, [r4, #11]
    37e6:	4293      	cmp	r3, r2
    37e8:	d105      	bne.n	37f6 <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    37ea:	3301      	adds	r3, #1
    37ec:	b2db      	uxtb	r3, r3
			last = 0;
    37ee:	2b02      	cmp	r3, #2
    37f0:	bf08      	it	eq
    37f2:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    37f4:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    37f6:	7ae3      	ldrb	r3, [r4, #11]
    37f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    37fc:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    37fe:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    3800:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    3802:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    3804:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    3806:	46ac      	mov	ip, r5
    3808:	4623      	mov	r3, r4
    380a:	2104      	movs	r1, #4
    380c:	2003      	movs	r0, #3
}
    380e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    3812:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    3814:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    3816:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    3818:	788a      	ldrb	r2, [r1, #2]
    381a:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    381c:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    3820:	1a9b      	subs	r3, r3, r2
    3822:	b2db      	uxtb	r3, r3
    3824:	2b01      	cmp	r3, #1
    3826:	d1d3      	bne.n	37d0 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    3828:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    382c:	3a01      	subs	r2, #1
    382e:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    3830:	f1b9 0f00 	cmp.w	r9, #0
    3834:	d0cc      	beq.n	37d0 <ticker_worker+0x2e>
					   ticks_expired -
    3836:	6948      	ldr	r0, [r1, #20]
    3838:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    383a:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    383c:	1a28      	subs	r0, r5, r0
    383e:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    3840:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3844:	690b      	ldr	r3, [r1, #16]
    3846:	6a49      	ldr	r1, [r1, #36]	; 0x24
    3848:	47c8      	blx	r9
    384a:	e7c1      	b.n	37d0 <ticker_worker+0x2e>
    384c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00003850 <ticker_job>:
{
    3850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    3854:	7fc2      	ldrb	r2, [r0, #31]
{
    3856:	b095      	sub	sp, #84	; 0x54
    3858:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    385a:	2a00      	cmp	r2, #0
    385c:	f040 83be 	bne.w	3fdc <ticker_job+0x78c>
	ticks_previous = instance->ticks_current;
    3860:	6943      	ldr	r3, [r0, #20]
    3862:	9307      	str	r3, [sp, #28]
	instance->job_guard = 1;
    3864:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    3866:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    3868:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    386a:	7ac0      	ldrb	r0, [r0, #11]
    386c:	4298      	cmp	r0, r3
    386e:	f000 808f 	beq.w	3990 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    3872:	440b      	add	r3, r1
    3874:	b2db      	uxtb	r3, r3
			first = 0;
    3876:	2b02      	cmp	r3, #2
    3878:	bf08      	it	eq
    387a:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    387c:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    3880:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    3884:	9103      	str	r1, [sp, #12]
		ticks_elapsed =
    3886:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    388a:	9b07      	ldr	r3, [sp, #28]
    388c:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    388e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3892:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    3896:	f89b 301d 	ldrb.w	r3, [fp, #29]
    389a:	9305      	str	r3, [sp, #20]
	node = &instance->node[0];
    389c:	f8db 3000 	ldr.w	r3, [fp]
    38a0:	9306      	str	r3, [sp, #24]
	users = &instance->user[0];
    38a2:	f8db 3004 	ldr.w	r3, [fp, #4]
    38a6:	930d      	str	r3, [sp, #52]	; 0x34
    38a8:	f89b 3009 	ldrb.w	r3, [fp, #9]
    38ac:	3b01      	subs	r3, #1
    38ae:	b2db      	uxtb	r3, r3
    38b0:	9304      	str	r3, [sp, #16]
	pending = 0;
    38b2:	2300      	movs	r3, #0
    38b4:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    38b6:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    38ba:	9b04      	ldr	r3, [sp, #16]
    38bc:	2bff      	cmp	r3, #255	; 0xff
    38be:	d16a      	bne.n	3996 <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    38c0:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    38c4:	9a05      	ldr	r2, [sp, #20]
    38c6:	1a9b      	subs	r3, r3, r2
    38c8:	bf18      	it	ne
    38ca:	2301      	movne	r3, #1
    38cc:	9304      	str	r3, [sp, #16]
	if (flag_elapsed) {
    38ce:	9b03      	ldr	r3, [sp, #12]
    38d0:	b1e3      	cbz	r3, 390c <ticker_job+0xbc>
	node = &instance->node[0];
    38d2:	f8db 3000 	ldr.w	r3, [fp]
    38d6:	9306      	str	r3, [sp, #24]
	ticks_expired = 0;
    38d8:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    38dc:	f89b 601d 	ldrb.w	r6, [fp, #29]
    38e0:	2eff      	cmp	r6, #255	; 0xff
    38e2:	d00c      	beq.n	38fe <ticker_job+0xae>
		ticker = &node[id_expired];
    38e4:	b237      	sxth	r7, r6
    38e6:	9b06      	ldr	r3, [sp, #24]
    38e8:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    38ec:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    38f0:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    38f2:	4545      	cmp	r5, r8
    38f4:	f240 8136 	bls.w	3b64 <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    38f8:	eba5 0508 	sub.w	r5, r5, r8
    38fc:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    38fe:	9b04      	ldr	r3, [sp, #16]
    3900:	9a03      	ldr	r2, [sp, #12]
    3902:	9905      	ldr	r1, [sp, #20]
    3904:	42b1      	cmp	r1, r6
    3906:	bf18      	it	ne
    3908:	4613      	movne	r3, r2
    390a:	9304      	str	r3, [sp, #16]
	node = &instance->node[0];
    390c:	f8db 3000 	ldr.w	r3, [fp]
    3910:	930a      	str	r3, [sp, #40]	; 0x28
	users = &instance->user[0];
    3912:	f8db 3004 	ldr.w	r3, [fp, #4]
    3916:	9312      	str	r3, [sp, #72]	; 0x48
    3918:	f89b 3009 	ldrb.w	r3, [fp, #9]
    391c:	3b01      	subs	r3, #1
    391e:	b2db      	uxtb	r3, r3
    3920:	9303      	str	r3, [sp, #12]
	while (count_user--) {
    3922:	9b03      	ldr	r3, [sp, #12]
    3924:	2bff      	cmp	r3, #255	; 0xff
    3926:	f040 8170 	bne.w	3c0a <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    392a:	f89b 301d 	ldrb.w	r3, [fp, #29]
    392e:	9a05      	ldr	r2, [sp, #20]
    3930:	4293      	cmp	r3, r2
	if (!pending) {
    3932:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (instance->ticker_id_head != ticker_id_old_head) {
    3934:	f040 8349 	bne.w	3fca <ticker_job+0x77a>
	if (!pending) {
    3938:	b95b      	cbnz	r3, 3952 <ticker_job+0x102>
    393a:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    393e:	f8db 3004 	ldr.w	r3, [fp, #4]
    3942:	9303      	str	r3, [sp, #12]
    3944:	3c01      	subs	r4, #1
    3946:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    3948:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    394c:	2cff      	cmp	r4, #255	; 0xff
    394e:	f040 82a0 	bne.w	3e92 <ticker_job+0x642>
	instance->job_guard = 0;
    3952:	2300      	movs	r3, #0
    3954:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    3958:	9b04      	ldr	r3, [sp, #16]
    395a:	b14b      	cbz	r3, 3970 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    395c:	f89b 301d 	ldrb.w	r3, [fp, #29]
    3960:	2bff      	cmp	r3, #255	; 0xff
    3962:	f040 82e9 	bne.w	3f38 <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    3966:	f007 f98d 	bl	ac84 <cntr_stop>
    396a:	b908      	cbnz	r0, 3970 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    396c:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    3970:	f89b 301f 	ldrb.w	r3, [fp, #31]
    3974:	2b00      	cmp	r3, #0
    3976:	f000 8331 	beq.w	3fdc <ticker_job+0x78c>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    397a:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    397e:	465b      	mov	r3, fp
    3980:	2201      	movs	r2, #1
    3982:	2103      	movs	r1, #3
    3984:	2004      	movs	r0, #4
    3986:	46a4      	mov	ip, r4
}
    3988:	b015      	add	sp, #84	; 0x54
    398a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    398e:	4760      	bx	ip
		flag_elapsed = 0;
    3990:	9203      	str	r2, [sp, #12]
		ticks_elapsed = 0;
    3992:	4690      	mov	r8, r2
    3994:	e77f      	b.n	3896 <ticker_job+0x46>
		user = &users[count_user];
    3996:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3998:	9a04      	ldr	r2, [sp, #16]
    399a:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    399e:	687b      	ldr	r3, [r7, #4]
    39a0:	9308      	str	r3, [sp, #32]
		while (user->middle != user->last) {
    39a2:	78f9      	ldrb	r1, [r7, #3]
    39a4:	78be      	ldrb	r6, [r7, #2]
    39a6:	428e      	cmp	r6, r1
    39a8:	f000 80d7 	beq.w	3b5a <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    39ac:	9b08      	ldr	r3, [sp, #32]
			if (middle == user->count_user_op) {
    39ae:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    39b0:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    39b4:	0112      	lsls	r2, r2, #4
    39b6:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    39b8:	1c73      	adds	r3, r6, #1
    39ba:	b2db      	uxtb	r3, r3
				middle = 0;
    39bc:	4298      	cmp	r0, r3
    39be:	bf08      	it	eq
    39c0:	2300      	moveq	r3, #0
			user->middle = middle;
    39c2:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    39c4:	9b08      	ldr	r3, [sp, #32]
    39c6:	5c9a      	ldrb	r2, [r3, r2]
    39c8:	2a03      	cmp	r2, #3
    39ca:	d9eb      	bls.n	39a4 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    39cc:	2a05      	cmp	r2, #5
    39ce:	d817      	bhi.n	3a00 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    39d0:	7869      	ldrb	r1, [r5, #1]
    39d2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    39d6:	930c      	str	r3, [sp, #48]	; 0x30
    39d8:	980c      	ldr	r0, [sp, #48]	; 0x30
    39da:	9b06      	ldr	r3, [sp, #24]
    39dc:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    39e0:	7863      	ldrb	r3, [r4, #1]
    39e2:	78a0      	ldrb	r0, [r4, #2]
    39e4:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    39e6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    39ea:	d009      	beq.n	3a00 <ticker_job+0x1b0>
			    (state == 0) ||
    39ec:	2a04      	cmp	r2, #4
    39ee:	d10c      	bne.n	3a0a <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    39f0:	686a      	ldr	r2, [r5, #4]
    39f2:	b952      	cbnz	r2, 3a0a <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    39f4:	68aa      	ldr	r2, [r5, #8]
    39f6:	b942      	cbnz	r2, 3a0a <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    39f8:	68ea      	ldr	r2, [r5, #12]
    39fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    39fe:	d104      	bne.n	3a0a <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    3a00:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    3a02:	4628      	mov	r0, r5
    3a04:	f7ff fec3 	bl	378e <ticker_job_op_cb>
    3a08:	e7cb      	b.n	39a2 <ticker_job+0x152>
			if (state == 1) {
    3a0a:	2b01      	cmp	r3, #1
    3a0c:	f040 809b 	bne.w	3b46 <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    3a10:	4658      	mov	r0, fp
    3a12:	f7ff fe72 	bl	36fa <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    3a16:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    3a18:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    3a1a:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    3a1c:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    3a1e:	f040 8084 	bne.w	3b2a <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    3a22:	f8db 3014 	ldr.w	r3, [fp, #20]
    3a26:	930a      	str	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    3a28:	f007 f95a 	bl	ace0 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    3a2e:	900b      	str	r0, [sp, #44]	; 0x2c
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3a30:	1ac3      	subs	r3, r0, r3
    3a32:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    3a36:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    3a38:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3a3a:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    3a3c:	bf9e      	ittt	ls
    3a3e:	6962      	ldrls	r2, [r4, #20]
    3a40:	1b92      	subls	r2, r2, r6
    3a42:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    3a44:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    3a46:	bf96      	itet	ls
    3a48:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    3a4a:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    3a4c:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    3a4e:	b18a      	cbz	r2, 3a74 <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    3a50:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    3a52:	b179      	cbz	r1, 3a74 <ticker_job+0x224>
		user_op->params.update.lazy--;
    3a54:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    3a58:	fa1f fe8e 	uxth.w	lr, lr
    3a5c:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    3a60:	429a      	cmp	r2, r3
    3a62:	d32b      	bcc.n	3abc <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    3a64:	f8df 9324 	ldr.w	r9, [pc, #804]	; 3d8c <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    3a68:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    3a6c:	45e6      	cmp	lr, ip
    3a6e:	d847      	bhi.n	3b00 <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    3a70:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    3a74:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    3a76:	990a      	ldr	r1, [sp, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    3a78:	4413      	add	r3, r2
    3a7a:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    3a7c:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    3a7e:	6963      	ldr	r3, [r4, #20]
    3a80:	4413      	add	r3, r2
    3a82:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    3a84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3a86:	4620      	mov	r0, r4
    3a88:	f7ff fe63 	bl	3752 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    3a8c:	69a2      	ldr	r2, [r4, #24]
    3a8e:	892b      	ldrh	r3, [r5, #8]
    3a90:	4413      	add	r3, r2
    3a92:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    3a94:	896a      	ldrh	r2, [r5, #10]
    3a96:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    3a98:	bf8c      	ite	hi
    3a9a:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    3a9c:	2300      	movls	r3, #0
    3a9e:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    3aa0:	7bab      	ldrb	r3, [r5, #14]
    3aa2:	b103      	cbz	r3, 3aa6 <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    3aa4:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    3aa6:	9b06      	ldr	r3, [sp, #24]
    3aa8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3aaa:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    3aae:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    3ab0:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    3ab4:	3301      	adds	r3, #1
    3ab6:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    3ab8:	2100      	movs	r1, #0
    3aba:	e7a2      	b.n	3a02 <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    3abc:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    3ac0:	45e6      	cmp	lr, ip
    3ac2:	d2cf      	bcs.n	3a64 <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    3ac4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    3ac6:	4eaf      	ldr	r6, [pc, #700]	; (3d84 <ticker_job+0x534>)
    3ac8:	48af      	ldr	r0, [pc, #700]	; (3d88 <ticker_job+0x538>)
    3aca:	198e      	adds	r6, r1, r6
    3acc:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    3ace:	bf81      	itttt	hi
    3ad0:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    3ad4:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    3ad8:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    3adc:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    3ade:	6a66      	ldr	r6, [r4, #36]	; 0x24
    3ae0:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    3ae2:	bf8c      	ite	hi
    3ae4:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    3ae8:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    3aec:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    3aee:	4491      	add	r9, r2
			ticker->lazy_current--;
    3af0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    3af4:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    3af6:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    3afa:	f8a4 c01e 	strh.w	ip, [r4, #30]
    3afe:	e7af      	b.n	3a60 <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    3b00:	6a66      	ldr	r6, [r4, #36]	; 0x24
    3b02:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    3b04:	48a0      	ldr	r0, [pc, #640]	; (3d88 <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    3b06:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    3b08:	499e      	ldr	r1, [pc, #632]	; (3d84 <ticker_job+0x534>)
    3b0a:	1871      	adds	r1, r6, r1
    3b0c:	4281      	cmp	r1, r0
	return 0;
    3b0e:	bf8e      	itee	hi
    3b10:	2100      	movhi	r1, #0
		return 1;
    3b12:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    3b14:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    3b16:	4411      	add	r1, r2
			ticker->lazy_current++;
    3b18:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    3b1c:	bf8c      	ite	hi
    3b1e:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    3b20:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    3b22:	440b      	add	r3, r1
			ticker->lazy_current++;
    3b24:	f8a4 c01e 	strh.w	ip, [r4, #30]
    3b28:	e79e      	b.n	3a68 <ticker_job+0x218>
		ticker->req = ticker->ack;
    3b2a:	78a3      	ldrb	r3, [r4, #2]
    3b2c:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    3b2e:	786b      	ldrb	r3, [r5, #1]
    3b30:	f89b 201c 	ldrb.w	r2, [fp, #28]
    3b34:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    3b36:	bf01      	itttt	eq
    3b38:	23ff      	moveq	r3, #255	; 0xff
    3b3a:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    3b3e:	2300      	moveq	r3, #0
    3b40:	f8cb 3018 	streq.w	r3, [fp, #24]
    3b44:	e7b8      	b.n	3ab8 <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    3b46:	2104      	movs	r1, #4
    3b48:	465b      	mov	r3, fp
    3b4a:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    3b4e:	2201      	movs	r2, #1
    3b50:	4608      	mov	r0, r1
    3b52:	47a0      	blx	r4
				pending = 1;
    3b54:	2301      	movs	r3, #1
				user->middle = prev;
    3b56:	70be      	strb	r6, [r7, #2]
				pending = 1;
    3b58:	9309      	str	r3, [sp, #36]	; 0x24
    3b5a:	9b04      	ldr	r3, [sp, #16]
    3b5c:	3b01      	subs	r3, #1
    3b5e:	b2db      	uxtb	r3, r3
    3b60:	9304      	str	r3, [sp, #16]
    3b62:	e6aa      	b.n	38ba <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    3b64:	f8db 3018 	ldr.w	r3, [fp, #24]
    3b68:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    3b6a:	bf29      	itett	cs
    3b6c:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    3b6e:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    3b70:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    3b74:	2300      	movcs	r3, #0
    3b76:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    3b7a:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    3b7c:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    3b7e:	b11b      	cbz	r3, 3b88 <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    3b80:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    3b84:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    3b88:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    3b8a:	9b06      	ldr	r3, [sp, #24]
		ticker->ticks_to_expire = 0;
    3b8c:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    3b8e:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    3b92:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    3b96:	f8d4 e004 	ldr.w	lr, [r4, #4]
    3b9a:	f1be 0f00 	cmp.w	lr, #0
    3b9e:	d030      	beq.n	3c02 <ticker_job+0x3b2>
    3ba0:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    3ba2:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 3d88 <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    3ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3ba8:	6a21      	ldr	r1, [r4, #32]
    3baa:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    3bac:	4975      	ldr	r1, [pc, #468]	; (3d84 <ticker_job+0x534>)
    3bae:	1859      	adds	r1, r3, r1
    3bb0:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    3bb2:	bf9f      	itttt	ls
    3bb4:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    3bb8:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    3bbc:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    3bc0:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    3bc2:	bf92      	itee	ls
    3bc4:	9b03      	ldrls	r3, [sp, #12]
	ticker->remainder_current += ticker->remainder_periodic;
    3bc6:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    3bc8:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    3bca:	4473      	add	r3, lr
			while (count--) {
    3bcc:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    3bd0:	441a      	add	r2, r3
			while (count--) {
    3bd2:	d2e8      	bcs.n	3ba6 <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    3bd4:	9b07      	ldr	r3, [sp, #28]
			ticker->ticks_to_expire = ticks_to_expire;
    3bd6:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    3bd8:	f8db 1014 	ldr.w	r1, [fp, #20]
    3bdc:	eb03 0209 	add.w	r2, r3, r9
    3be0:	4620      	mov	r0, r4
    3be2:	f7ff fdb6 	bl	3752 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    3be6:	8ba3      	ldrh	r3, [r4, #28]
    3be8:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    3bea:	2300      	movs	r3, #0
    3bec:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    3bee:	9b06      	ldr	r3, [sp, #24]
    3bf0:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    3bf4:	7863      	ldrb	r3, [r4, #1]
    3bf6:	3301      	adds	r3, #1
    3bf8:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    3bfa:	eba8 0805 	sub.w	r8, r8, r5
    3bfe:	46b2      	mov	sl, r6
    3c00:	e66c      	b.n	38dc <ticker_job+0x8c>
			ticker->req = ticker->ack;
    3c02:	78a3      	ldrb	r3, [r4, #2]
    3c04:	7063      	strb	r3, [r4, #1]
    3c06:	4656      	mov	r6, sl
    3c08:	e7f7      	b.n	3bfa <ticker_job+0x3aa>
		user = &users[count_user];
    3c0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3c0c:	9a03      	ldr	r2, [sp, #12]
    3c0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3c12:	9306      	str	r3, [sp, #24]
		user_ops = (void *)&user->user_op[0];
    3c14:	685b      	ldr	r3, [r3, #4]
    3c16:	930c      	str	r3, [sp, #48]	; 0x30
		user_ops_first = user->first;
    3c18:	9b06      	ldr	r3, [sp, #24]
    3c1a:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    3c1e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    3c22:	f000 808e 	beq.w	3d42 <ticker_job+0x4f2>
				ticker = &node[id_insert];
    3c26:	fa0f f38a 	sxth.w	r3, sl
    3c2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3c2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
				insert_head = ticker->next;
    3c30:	46d0      	mov	r8, sl
    3c32:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    3c36:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    3c3a:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    3c3c:	f8db 3000 	ldr.w	r3, [fp]
    3c40:	930d      	str	r3, [sp, #52]	; 0x34
	ticker->next = TICKER_NULL;
    3c42:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    3c44:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    3c46:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    3c48:	8be3      	ldrh	r3, [r4, #30]
    3c4a:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    3c4c:	bf86      	itte	hi
    3c4e:	1a9b      	subhi	r3, r3, r2
    3c50:	b29b      	uxthhi	r3, r3
		skip = 0;
    3c52:	2300      	movls	r3, #0
    3c54:	930e      	str	r3, [sp, #56]	; 0x38
	ticker_new = &node[id];
    3c56:	fa0f f388 	sxth.w	r3, r8
    3c5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3c5e:	00db      	lsls	r3, r3, #3
    3c60:	9313      	str	r3, [sp, #76]	; 0x4c
    3c62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	node = &instance->node[0];
    3c64:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    3c68:	f8db 0018 	ldr.w	r0, [fp, #24]
    3c6c:	9007      	str	r0, [sp, #28]
	ticker_new = &node[id];
    3c6e:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    3c72:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    3c74:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    3c78:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    3c7c:	930b      	str	r3, [sp, #44]	; 0x2c
	collide = ticker_id_slot_previous = TICKER_NULL;
    3c7e:	9008      	str	r0, [sp, #32]
	while ((current != TICKER_NULL) &&
    3c80:	2bff      	cmp	r3, #255	; 0xff
    3c82:	d007      	beq.n	3c94 <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    3c84:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    3c88:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    3c8c:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    3c8e:	4281      	cmp	r1, r0
    3c90:	f200 80a9 	bhi.w	3de6 <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    3c94:	f8de 0018 	ldr.w	r0, [lr, #24]
    3c98:	900f      	str	r0, [sp, #60]	; 0x3c
	collide = ticker_by_slot_get(&node[0], current,
    3c9a:	eb01 0c00 	add.w	ip, r1, r0
    3c9e:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    3ca0:	2eff      	cmp	r6, #255	; 0xff
    3ca2:	f040 80ae 	bne.w	3e02 <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    3ca6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    3ca8:	b130      	cbz	r0, 3cb8 <ticker_job+0x468>
    3caa:	9807      	ldr	r0, [sp, #28]
    3cac:	4281      	cmp	r1, r0
    3cae:	f0c0 80bf 	bcc.w	3e30 <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    3cb2:	2eff      	cmp	r6, #255	; 0xff
    3cb4:	f040 818e 	bne.w	3fd4 <ticker_job+0x784>
		if (previous == current) {
    3cb8:	980b      	ldr	r0, [sp, #44]	; 0x2c
		ticker_new->ticks_to_expire = ticks_to_expire;
    3cba:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    3cbe:	4283      	cmp	r3, r0
			node[previous].next = id;
    3cc0:	bf18      	it	ne
    3cc2:	f9bd 002c 	ldrshne.w	r0, [sp, #44]	; 0x2c
		ticker_new->next = current;
    3cc6:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    3cca:	bf16      	itet	ne
    3ccc:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    3cd0:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    3cd4:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    3cd8:	2bff      	cmp	r3, #255	; 0xff
    3cda:	d006      	beq.n	3cea <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    3cdc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3ce0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3ce4:	689a      	ldr	r2, [r3, #8]
    3ce6:	1a51      	subs	r1, r2, r1
    3ce8:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    3cea:	78a3      	ldrb	r3, [r4, #2]
    3cec:	3301      	adds	r3, #1
    3cee:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    3cf0:	2100      	movs	r1, #0
			if (user_op) {
    3cf2:	2d00      	cmp	r5, #0
    3cf4:	d093      	beq.n	3c1e <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    3cf6:	4628      	mov	r0, r5
    3cf8:	f7ff fd49 	bl	378e <ticker_job_op_cb>
    3cfc:	e78f      	b.n	3c1e <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    3cfe:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    3d02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3d04:	011b      	lsls	r3, r3, #4
    3d06:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    3d08:	f109 0201 	add.w	r2, r9, #1
    3d0c:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    3d10:	9a06      	ldr	r2, [sp, #24]
    3d12:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    3d14:	454a      	cmp	r2, r9
    3d16:	bf08      	it	eq
    3d18:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    3d1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3d1e:	5cd3      	ldrb	r3, [r2, r3]
    3d20:	2b03      	cmp	r3, #3
    3d22:	d10e      	bne.n	3d42 <ticker_job+0x4f2>
				id_insert = user_op->id;
    3d24:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    3d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3d2a:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    3d2e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    3d32:	7862      	ldrb	r2, [r4, #1]
    3d34:	78a3      	ldrb	r3, [r4, #2]
    3d36:	429a      	cmp	r2, r3
    3d38:	d009      	beq.n	3d4e <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    3d3a:	2101      	movs	r1, #1
    3d3c:	4628      	mov	r0, r5
    3d3e:	f7ff fd26 	bl	378e <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    3d42:	9b06      	ldr	r3, [sp, #24]
    3d44:	789b      	ldrb	r3, [r3, #2]
    3d46:	454b      	cmp	r3, r9
    3d48:	d1d9      	bne.n	3cfe <ticker_job+0x4ae>
    3d4a:	9b03      	ldr	r3, [sp, #12]
    3d4c:	e5e6      	b.n	391c <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    3d4e:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    3d50:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    3d54:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    3d56:	692b      	ldr	r3, [r5, #16]
    3d58:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    3d5a:	8aab      	ldrh	r3, [r5, #20]
    3d5c:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    3d5e:	69ab      	ldr	r3, [r5, #24]
    3d60:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    3d62:	69eb      	ldr	r3, [r5, #28]
    3d64:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    3d66:	6a2b      	ldr	r3, [r5, #32]
    3d68:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    3d6a:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    3d6c:	68ab      	ldr	r3, [r5, #8]
    3d6e:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    3d70:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    3d72:	686a      	ldr	r2, [r5, #4]
    3d74:	4620      	mov	r0, r4
    3d76:	f7ff fcec 	bl	3752 <ticks_to_expire_prep>
	ticker->force = 1;
    3d7a:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    3d7c:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    3d7e:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    3d80:	70e3      	strb	r3, [r4, #3]
    3d82:	e75b      	b.n	3c3c <ticker_job+0x3ec>
    3d84:	ff172b5a 	.word	0xff172b5a
    3d88:	7f172b59 	.word	0x7f172b59
    3d8c:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    3d90:	6860      	ldr	r0, [r4, #4]
    3d92:	2800      	cmp	r0, #0
    3d94:	d07b      	beq.n	3e8e <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    3d96:	6a62      	ldr	r2, [r4, #36]	; 0x24
    3d98:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    3d9a:	4b92      	ldr	r3, [pc, #584]	; (3fe4 <ticker_job+0x794>)
	ticker->remainder_current += ticker->remainder_periodic;
    3d9c:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    3d9e:	4992      	ldr	r1, [pc, #584]	; (3fe8 <ticker_job+0x798>)
    3da0:	18d3      	adds	r3, r2, r3
    3da2:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    3da4:	bf9c      	itt	ls
    3da6:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    3daa:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    3dae:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    3db0:	bf8b      	itete	hi
    3db2:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    3db4:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    3db8:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    3dba:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    3dbc:	4403      	add	r3, r0
		return 1;
    3dbe:	bf98      	it	ls
    3dc0:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    3dc2:	4413      	add	r3, r2
			ticker->lazy_current++;
    3dc4:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    3dc6:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    3dc8:	3201      	adds	r2, #1
    3dca:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    3dcc:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    3dce:	4293      	cmp	r3, r2
    3dd0:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    3dd4:	bf89      	itett	hi
    3dd6:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    3dd8:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    3dda:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    3ddc:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    3dde:	bf9c      	itt	ls
    3de0:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    3de2:	60a1      	strls	r1, [r4, #8]
    3de4:	e73d      	b.n	3c62 <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    3de6:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    3de8:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    3dea:	b946      	cbnz	r6, 3dfe <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    3dec:	9f07      	ldr	r7, [sp, #28]
    3dee:	42b8      	cmp	r0, r7
    3df0:	d200      	bcs.n	3df4 <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    3df2:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    3df4:	930b      	str	r3, [sp, #44]	; 0x2c
    3df6:	9607      	str	r6, [sp, #28]
    3df8:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    3dfc:	e740      	b.n	3c80 <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    3dfe:	9308      	str	r3, [sp, #32]
    3e00:	e7f8      	b.n	3df4 <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    3e02:	b230      	sxth	r0, r6
    3e04:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3e08:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    3e0c:	9710      	str	r7, [sp, #64]	; 0x40
		ticks_to_expire = ticker->ticks_to_expire;
    3e0e:	68bf      	ldr	r7, [r7, #8]
    3e10:	9711      	str	r7, [sp, #68]	; 0x44
		if (ticks_slot <= ticks_to_expire) {
    3e12:	4567      	cmp	r7, ip
    3e14:	d20a      	bcs.n	3e2c <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    3e16:	9f10      	ldr	r7, [sp, #64]	; 0x40
    3e18:	69bf      	ldr	r7, [r7, #24]
    3e1a:	2f00      	cmp	r7, #0
    3e1c:	f47f af43 	bne.w	3ca6 <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    3e20:	9e11      	ldr	r6, [sp, #68]	; 0x44
    3e22:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    3e26:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    3e2a:	e739      	b.n	3ca0 <ticker_job+0x450>
			return TICKER_NULL;
    3e2c:	26ff      	movs	r6, #255	; 0xff
    3e2e:	e73a      	b.n	3ca6 <ticker_job+0x456>
	while (id_insert !=
    3e30:	9b08      	ldr	r3, [sp, #32]
    3e32:	4598      	cmp	r8, r3
    3e34:	f43f af59 	beq.w	3cea <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    3e38:	9b08      	ldr	r3, [sp, #32]
    3e3a:	2bff      	cmp	r3, #255	; 0xff
    3e3c:	d0a8      	beq.n	3d90 <ticker_job+0x540>
    3e3e:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    3e40:	b233      	sxth	r3, r6
    3e42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3e46:	9307      	str	r3, [sp, #28]
    3e48:	9a07      	ldr	r2, [sp, #28]
    3e4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3e4c:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    3e50:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    3e52:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    3e54:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    3e56:	bf88      	it	hi
    3e58:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    3e5a:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    3e5c:	bf8c      	ite	hi
    3e5e:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    3e60:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    3e62:	2a00      	cmp	r2, #0
    3e64:	d094      	beq.n	3d90 <ticker_job+0x540>
    3e66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3e68:	4293      	cmp	r3, r2
    3e6a:	d891      	bhi.n	3d90 <ticker_job+0x540>
			    skip_collide <= skip &&
    3e6c:	78fa      	ldrb	r2, [r7, #3]
    3e6e:	78e3      	ldrb	r3, [r4, #3]
    3e70:	429a      	cmp	r2, r3
    3e72:	d28d      	bcs.n	3d90 <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    3e74:	4631      	mov	r1, r6
    3e76:	4658      	mov	r0, fp
    3e78:	f7ff fc3f 	bl	36fa <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    3e7c:	78bb      	ldrb	r3, [r7, #2]
    3e7e:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    3e80:	9a07      	ldr	r2, [sp, #28]
    3e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				ticker_collide->ticks_to_expire =
    3e84:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    3e86:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    3e8a:	46b2      	mov	sl, r6
    3e8c:	e6e9      	b.n	3c62 <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    3e8e:	2101      	movs	r1, #1
    3e90:	e72f      	b.n	3cf2 <ticker_job+0x4a2>
		user = &users[count_user];
    3e92:	9b03      	ldr	r3, [sp, #12]
    3e94:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    3e98:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    3e9a:	786b      	ldrb	r3, [r5, #1]
    3e9c:	78ea      	ldrb	r2, [r5, #3]
    3e9e:	429a      	cmp	r2, r3
    3ea0:	d102      	bne.n	3ea8 <ticker_job+0x658>
    3ea2:	3c01      	subs	r4, #1
    3ea4:	b2e4      	uxtb	r4, r4
    3ea6:	e551      	b.n	394c <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    3ea8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3eac:	011b      	lsls	r3, r3, #4
    3eae:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    3eb0:	5cf3      	ldrb	r3, [r6, r3]
    3eb2:	2b01      	cmp	r3, #1
    3eb4:	d025      	beq.n	3f02 <ticker_job+0x6b2>
    3eb6:	2b02      	cmp	r3, #2
    3eb8:	d12a      	bne.n	3f10 <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    3eba:	f8d2 c004 	ldr.w	ip, [r2, #4]
    3ebe:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    3ec0:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    3ec4:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    3ec8:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    3ecc:	28ff      	cmp	r0, #255	; 0xff
    3ece:	d004      	beq.n	3eda <ticker_job+0x68a>
    3ed0:	6819      	ldr	r1, [r3, #0]
    3ed2:	f8db 7014 	ldr.w	r7, [fp, #20]
    3ed6:	42b9      	cmp	r1, r7
    3ed8:	d023      	beq.n	3f22 <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    3eda:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    3ede:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    3ee2:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    3ee4:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    3ee6:	29ff      	cmp	r1, #255	; 0xff
    3ee8:	d007      	beq.n	3efa <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    3eea:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    3eee:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    3ef2:	6987      	ldr	r7, [r0, #24]
    3ef4:	6880      	ldr	r0, [r0, #8]
    3ef6:	b1df      	cbz	r7, 3f30 <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    3ef8:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    3efa:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    3efe:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    3f02:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    3f04:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    3f08:	b113      	cbz	r3, 3f10 <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    3f0a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    3f0c:	2000      	movs	r0, #0
    3f0e:	4798      	blx	r3
			first = user->first + 1;
    3f10:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    3f12:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    3f14:	3301      	adds	r3, #1
    3f16:	b2db      	uxtb	r3, r3
				first = 0;
    3f18:	429a      	cmp	r2, r3
    3f1a:	bf08      	it	eq
    3f1c:	2300      	moveq	r3, #0
			user->first = first;
    3f1e:	706b      	strb	r3, [r5, #1]
    3f20:	e7bb      	b.n	3e9a <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    3f22:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    3f26:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    3f2a:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    3f2e:	e7da      	b.n	3ee6 <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    3f30:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    3f32:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    3f36:	e7d6      	b.n	3ee6 <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    3f38:	9b05      	ldr	r3, [sp, #20]
    3f3a:	2bff      	cmp	r3, #255	; 0xff
    3f3c:	d107      	bne.n	3f4e <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    3f3e:	f006 fecf 	bl	ace0 <cntr_cnt_get>
    3f42:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    3f44:	f006 fe90 	bl	ac68 <cntr_start>
    3f48:	b908      	cbnz	r0, 3f4e <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    3f4a:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    3f4e:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    3f52:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    3f56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    3f5a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3f5e:	260a      	movs	r6, #10
    3f60:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    3f62:	f006 febd 	bl	ace0 <cntr_cnt_get>
		cc = instance->ticks_current;
    3f66:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3f6a:	1b03      	subs	r3, r0, r4
    3f6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    3f70:	3303      	adds	r3, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
    3f72:	42ab      	cmp	r3, r5
    3f74:	bf2c      	ite	cs
    3f76:	18e4      	addcs	r4, r4, r3
    3f78:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    3f7a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    3f7e:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    3f80:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    3f84:	4620      	mov	r0, r4
    3f86:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    3f88:	f006 feaa 	bl	ace0 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3f8c:	1bc0      	subs	r0, r0, r7
    3f8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3f92:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    3f94:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3f96:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    3f9a:	42a0      	cmp	r0, r4
    3f9c:	f67f ace8 	bls.w	3970 <ticker_job+0x120>
		LL_ASSERT(i);
    3fa0:	3e01      	subs	r6, #1
    3fa2:	d1de      	bne.n	3f62 <ticker_job+0x712>
    3fa4:	4b11      	ldr	r3, [pc, #68]	; (3fec <ticker_job+0x79c>)
    3fa6:	9301      	str	r3, [sp, #4]
    3fa8:	9300      	str	r3, [sp, #0]
    3faa:	4a11      	ldr	r2, [pc, #68]	; (3ff0 <ticker_job+0x7a0>)
    3fac:	4b11      	ldr	r3, [pc, #68]	; (3ff4 <ticker_job+0x7a4>)
    3fae:	4912      	ldr	r1, [pc, #72]	; (3ff8 <ticker_job+0x7a8>)
    3fb0:	4812      	ldr	r0, [pc, #72]	; (3ffc <ticker_job+0x7ac>)
    3fb2:	f7fd fa27 	bl	1404 <printk>
    3fb6:	4040      	eors	r0, r0
    3fb8:	f380 8811 	msr	BASEPRI, r0
    3fbc:	f04f 0004 	mov.w	r0, #4
    3fc0:	df02      	svc	2
	instance->job_guard = 0;
    3fc2:	2300      	movs	r3, #0
    3fc4:	f88b 301e 	strb.w	r3, [fp, #30]
    3fc8:	e4c8      	b.n	395c <ticker_job+0x10c>
	if (!pending) {
    3fca:	2b00      	cmp	r3, #0
    3fcc:	d1f9      	bne.n	3fc2 <ticker_job+0x772>
		flag_compare_update = 1;
    3fce:	2301      	movs	r3, #1
    3fd0:	9304      	str	r3, [sp, #16]
    3fd2:	e4b2      	b.n	393a <ticker_job+0xea>
	while (id_insert !=
    3fd4:	45b0      	cmp	r8, r6
    3fd6:	f47f af33 	bne.w	3e40 <ticker_job+0x5f0>
    3fda:	e686      	b.n	3cea <ticker_job+0x49a>
}
    3fdc:	b015      	add	sp, #84	; 0x54
    3fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3fe2:	bf00      	nop
    3fe4:	ff172b5a 	.word	0xff172b5a
    3fe8:	7f172b59 	.word	0x7f172b59
    3fec:	0000ceef 	.word	0x0000ceef
    3ff0:	0000d7a6 	.word	0x0000d7a6
    3ff4:	0000dd08 	.word	0x0000dd08
    3ff8:	0000d71b 	.word	0x0000d71b
    3ffc:	0000dd22 	.word	0x0000dd22

00004000 <ticker_init>:
{
    4000:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    4002:	4d1a      	ldr	r5, [pc, #104]	; (406c <ticker_init+0x6c>)
{
    4004:	9f05      	ldr	r7, [sp, #20]
    4006:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    400a:	262c      	movs	r6, #44	; 0x2c
    400c:	4346      	muls	r6, r0
    400e:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    4012:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    4014:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    4018:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    401a:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    401e:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    4022:	3b01      	subs	r3, #1
    4024:	b2db      	uxtb	r3, r3
    4026:	2bff      	cmp	r3, #255	; 0xff
    4028:	d111      	bne.n	404e <ticker_init+0x4e>
	if (count_op) {
    402a:	b9ec      	cbnz	r4, 4068 <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    402c:	222c      	movs	r2, #44	; 0x2c
    402e:	fb02 5200 	mla	r2, r2, r0, r5
    4032:	9908      	ldr	r1, [sp, #32]
    4034:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    4036:	9909      	ldr	r1, [sp, #36]	; 0x24
    4038:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    403a:	990a      	ldr	r1, [sp, #40]	; 0x28
    403c:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    403e:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    4040:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    4042:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    4044:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    4046:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    4048:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    404a:	4620      	mov	r0, r4
    404c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    404e:	b21a      	sxth	r2, r3
    4050:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    4054:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    4056:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    405a:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    405e:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    4060:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    4064:	b2e4      	uxtb	r4, r4
    4066:	e7dc      	b.n	4022 <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    4068:	2001      	movs	r0, #1
}
    406a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    406c:	200004bc 	.word	0x200004bc

00004070 <ticker_trigger>:
	instance = &_instance[instance_index];
    4070:	4a07      	ldr	r2, [pc, #28]	; (4090 <ticker_trigger+0x20>)
    4072:	212c      	movs	r1, #44	; 0x2c
    4074:	fb00 2301 	mla	r3, r0, r1, r2
{
    4078:	b410      	push	{r4}
	if (instance->sched_cb) {
    407a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    407c:	b12c      	cbz	r4, 408a <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    407e:	46a4      	mov	ip, r4
    4080:	2201      	movs	r2, #1
    4082:	2103      	movs	r1, #3
    4084:	2002      	movs	r0, #2
}
    4086:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    4088:	4760      	bx	ip
}
    408a:	bc10      	pop	{r4}
    408c:	4770      	bx	lr
    408e:	bf00      	nop
    4090:	200004bc 	.word	0x200004bc

00004094 <ticker_start>:
{
    4094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    4098:	4f25      	ldr	r7, [pc, #148]	; (4130 <ticker_start+0x9c>)
    409a:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    409e:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    40a0:	fb08 7000 	mla	r0, r8, r0, r7
    40a4:	fa0f fc81 	sxth.w	ip, r1
    40a8:	f8d0 e004 	ldr.w	lr, [r0, #4]
    40ac:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    40b0:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    40b4:	78f4      	ldrb	r4, [r6, #3]
    40b6:	1c65      	adds	r5, r4, #1
    40b8:	b2ed      	uxtb	r5, r5
		last = 0;
    40ba:	45ae      	cmp	lr, r5
    40bc:	bf98      	it	ls
    40be:	2500      	movls	r5, #0
	if (last == user->first) {
    40c0:	f896 e001 	ldrb.w	lr, [r6, #1]
    40c4:	45ae      	cmp	lr, r5
    40c6:	d02f      	beq.n	4128 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    40c8:	f8d6 c004 	ldr.w	ip, [r6, #4]
    40cc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    40d0:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    40d4:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    40d8:	f04f 0a03 	mov.w	sl, #3
    40dc:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    40e0:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    40e2:	9b08      	ldr	r3, [sp, #32]
    40e4:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    40e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    40e8:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    40ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    40ec:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    40ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    40f0:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    40f2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    40f6:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    40f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    40fa:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    40fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    40fe:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    4100:	2302      	movs	r3, #2
    4102:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    4104:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4106:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    4108:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    410a:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    410c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    410e:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4110:	6a45      	ldr	r5, [r0, #36]	; 0x24
    4112:	6a03      	ldr	r3, [r0, #32]
    4114:	4608      	mov	r0, r1
    4116:	4798      	blx	r3
    4118:	fb09 7308 	mla	r3, r9, r8, r7
    411c:	2200      	movs	r2, #0
    411e:	2104      	movs	r1, #4
    4120:	47a8      	blx	r5
	return user_op->status;
    4122:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    4128:	2001      	movs	r0, #1
}
    412a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    412e:	bf00      	nop
    4130:	200004bc 	.word	0x200004bc

00004134 <ticker_update>:
{
    4134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    4138:	f8df 8090 	ldr.w	r8, [pc, #144]	; 41cc <ticker_update+0x98>
    413c:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    4140:	fb0a 8e00 	mla	lr, sl, r0, r8
    4144:	b20f      	sxth	r7, r1
    4146:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    414a:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    414c:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    4150:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    4154:	78c4      	ldrb	r4, [r0, #3]
    4156:	1c66      	adds	r6, r4, #1
    4158:	b2f6      	uxtb	r6, r6
		last = 0;
    415a:	42b5      	cmp	r5, r6
    415c:	bf98      	it	ls
    415e:	2600      	movls	r6, #0
	if (last == user->first) {
    4160:	7845      	ldrb	r5, [r0, #1]
    4162:	42b5      	cmp	r5, r6
    4164:	d02f      	beq.n	41c6 <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    4166:	f8d0 c004 	ldr.w	ip, [r0, #4]
    416a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    416e:	0125      	lsls	r5, r4, #4
    4170:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    4174:	2704      	movs	r7, #4
    4176:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    417a:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    417c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    4180:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    4182:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    4186:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    4188:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    418c:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    418e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    4192:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    4194:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    4198:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    419a:	2302      	movs	r3, #2
    419c:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    419e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    41a0:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    41a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    41a4:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    41a6:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    41a8:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    41aa:	f8de 3020 	ldr.w	r3, [lr, #32]
    41ae:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    41b2:	4608      	mov	r0, r1
    41b4:	4798      	blx	r3
    41b6:	fb09 830a 	mla	r3, r9, sl, r8
    41ba:	2200      	movs	r2, #0
    41bc:	4639      	mov	r1, r7
    41be:	47a8      	blx	r5
	return user_op->status;
    41c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    41c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    41c6:	2001      	movs	r0, #1
}
    41c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    41cc:	200004bc 	.word	0x200004bc

000041d0 <ticker_stop>:
{
    41d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    41d4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 4244 <ticker_stop+0x74>
    41d8:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    41dc:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    41e0:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    41e2:	f8de 0004 	ldr.w	r0, [lr, #4]
    41e6:	b20e      	sxth	r6, r1
    41e8:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    41ec:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    41f0:	78fc      	ldrb	r4, [r7, #3]
    41f2:	1c65      	adds	r5, r4, #1
    41f4:	b2ed      	uxtb	r5, r5
		last = 0;
    41f6:	42a8      	cmp	r0, r5
    41f8:	bf98      	it	ls
    41fa:	2500      	movls	r5, #0
	if (last == user->first) {
    41fc:	7878      	ldrb	r0, [r7, #1]
    41fe:	42a8      	cmp	r0, r5
    4200:	d01d      	beq.n	423e <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    4202:	6878      	ldr	r0, [r7, #4]
    4204:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    4208:	0124      	lsls	r4, r4, #4
    420a:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    420c:	f04f 0c05 	mov.w	ip, #5
    4210:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    4214:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    4216:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    4218:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    421a:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    421c:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    421e:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    4220:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4222:	f8de 3020 	ldr.w	r3, [lr, #32]
    4226:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    422a:	4608      	mov	r0, r1
    422c:	4798      	blx	r3
    422e:	fb08 930a 	mla	r3, r8, sl, r9
    4232:	2200      	movs	r2, #0
    4234:	2104      	movs	r1, #4
    4236:	47a0      	blx	r4
	return user_op->status;
    4238:	6a70      	ldr	r0, [r6, #36]	; 0x24
    423a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    423e:	2001      	movs	r0, #1
}
    4240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4244:	200004bc 	.word	0x200004bc

00004248 <ticker_next_slot_get>:
{
    4248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    424c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 42c8 <ticker_next_slot_get+0x80>
    4250:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    4254:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    4256:	fb0a 8000 	mla	r0, sl, r0, r8
    425a:	fa0f fe81 	sxth.w	lr, r1
    425e:	6845      	ldr	r5, [r0, #4]
    4260:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    4264:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    4268:	78fc      	ldrb	r4, [r7, #3]
    426a:	1c66      	adds	r6, r4, #1
    426c:	b2f6      	uxtb	r6, r6
		last = 0;
    426e:	42b5      	cmp	r5, r6
    4270:	bf98      	it	ls
    4272:	2600      	movls	r6, #0
	if (last == user->first) {
    4274:	787d      	ldrb	r5, [r7, #1]
    4276:	42b5      	cmp	r5, r6
    4278:	d023      	beq.n	42c2 <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    427a:	f8d7 c004 	ldr.w	ip, [r7, #4]
    427e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    4282:	0125      	lsls	r5, r4, #4
    4284:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    4288:	f04f 0e02 	mov.w	lr, #2
    428c:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    4290:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    4292:	9b08      	ldr	r3, [sp, #32]
    4294:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    4296:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4298:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    429a:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    429c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    429e:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    42a0:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    42a2:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    42a6:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    42a8:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    42aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
    42ac:	6a03      	ldr	r3, [r0, #32]
    42ae:	4608      	mov	r0, r1
    42b0:	4798      	blx	r3
    42b2:	fb09 830a 	mla	r3, r9, sl, r8
    42b6:	2200      	movs	r2, #0
    42b8:	2104      	movs	r1, #4
    42ba:	47a8      	blx	r5
	return user_op->status;
    42bc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    42be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    42c2:	2001      	movs	r0, #1
}
    42c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42c8:	200004bc 	.word	0x200004bc

000042cc <ticker_job_idle_get>:
{
    42cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    42d0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 4340 <ticker_job_idle_get+0x74>
    42d4:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    42d8:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    42dc:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    42de:	f8de 0004 	ldr.w	r0, [lr, #4]
    42e2:	b20e      	sxth	r6, r1
    42e4:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    42e8:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    42ec:	78fc      	ldrb	r4, [r7, #3]
    42ee:	1c65      	adds	r5, r4, #1
    42f0:	b2ed      	uxtb	r5, r5
		last = 0;
    42f2:	42a8      	cmp	r0, r5
    42f4:	bf98      	it	ls
    42f6:	2500      	movls	r5, #0
	if (last == user->first) {
    42f8:	7878      	ldrb	r0, [r7, #1]
    42fa:	42a8      	cmp	r0, r5
    42fc:	d01d      	beq.n	433a <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    42fe:	6878      	ldr	r0, [r7, #4]
    4300:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    4304:	0124      	lsls	r4, r4, #4
    4306:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    4308:	f04f 0c01 	mov.w	ip, #1
    430c:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    4310:	20ff      	movs	r0, #255	; 0xff
    4312:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    4314:	2002      	movs	r0, #2
    4316:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    4318:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    431a:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    431c:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    431e:	f8de 3020 	ldr.w	r3, [lr, #32]
    4322:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    4326:	4608      	mov	r0, r1
    4328:	4798      	blx	r3
    432a:	fb08 930a 	mla	r3, r8, sl, r9
    432e:	2200      	movs	r2, #0
    4330:	2104      	movs	r1, #4
    4332:	47a0      	blx	r4
	return user_op->status;
    4334:	6a70      	ldr	r0, [r6, #36]	; 0x24
    4336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    433a:	2001      	movs	r0, #1
}
    433c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4340:	200004bc 	.word	0x200004bc

00004344 <ticker_job_sched>:
{
    4344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4348:	4c08      	ldr	r4, [pc, #32]	; (436c <ticker_job_sched+0x28>)
    434a:	252c      	movs	r5, #44	; 0x2c
    434c:	fb05 4300 	mla	r3, r5, r0, r4
{
    4350:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4352:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    4354:	6a1b      	ldr	r3, [r3, #32]
    4356:	4608      	mov	r0, r1
    4358:	4798      	blx	r3
    435a:	fb06 4305 	mla	r3, r6, r5, r4
    435e:	46bc      	mov	ip, r7
    4360:	2200      	movs	r2, #0
    4362:	2104      	movs	r1, #4
}
    4364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4368:	4760      	bx	ip
    436a:	bf00      	nop
    436c:	200004bc 	.word	0x200004bc

00004370 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    4370:	f006 bcb6 	b.w	ace0 <cntr_cnt_get>

00004374 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    4374:	1a40      	subs	r0, r0, r1
}
    4376:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    437a:	4770      	bx	lr

0000437c <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    437c:	b508      	push	{r3, lr}
    437e:	4603      	mov	r3, r0
	if (addr_type > 1) {
    4380:	2b01      	cmp	r3, #1
{
    4382:	4608      	mov	r0, r1
	if (addr_type > 1) {
    4384:	d80e      	bhi.n	43a4 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    4386:	b133      	cbz	r3, 4396 <ll_addr_get+0x1a>
		if (bdaddr) {
    4388:	b119      	cbz	r1, 4392 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    438a:	2206      	movs	r2, #6
    438c:	4906      	ldr	r1, [pc, #24]	; (43a8 <ll_addr_get+0x2c>)
    438e:	f7fc f933 	bl	5f8 <memcpy>
		}

		return rnd_addr;
    4392:	4805      	ldr	r0, [pc, #20]	; (43a8 <ll_addr_get+0x2c>)
    4394:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    4396:	b119      	cbz	r1, 43a0 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    4398:	2206      	movs	r2, #6
    439a:	4904      	ldr	r1, [pc, #16]	; (43ac <ll_addr_get+0x30>)
    439c:	f7fc f92c 	bl	5f8 <memcpy>
	}

	return pub_addr;
    43a0:	4802      	ldr	r0, [pc, #8]	; (43ac <ll_addr_get+0x30>)
}
    43a2:	bd08      	pop	{r3, pc}
		return NULL;
    43a4:	2000      	movs	r0, #0
    43a6:	bd08      	pop	{r3, pc}
    43a8:	2000051a 	.word	0x2000051a
    43ac:	20000514 	.word	0x20000514

000043b0 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    43b0:	b570      	push	{r4, r5, r6, lr}
    43b2:	4606      	mov	r6, r0
    43b4:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    43b6:	f005 fb1f 	bl	99f8 <ll_adv_is_enabled>
    43ba:	4604      	mov	r4, r0
    43bc:	b110      	cbz	r0, 43c4 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    43be:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    43c0:	4620      	mov	r0, r4
    43c2:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    43c4:	f005 fb2c 	bl	9a20 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    43c8:	f010 0f06 	tst.w	r0, #6
    43cc:	d1f7      	bne.n	43be <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    43ce:	2206      	movs	r2, #6
    43d0:	4629      	mov	r1, r5
	if (addr_type) {
    43d2:	b11e      	cbz	r6, 43dc <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    43d4:	4802      	ldr	r0, [pc, #8]	; (43e0 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    43d6:	f7fc f90f 	bl	5f8 <memcpy>
    43da:	e7f1      	b.n	43c0 <ll_addr_set+0x10>
    43dc:	4801      	ldr	r0, [pc, #4]	; (43e4 <ll_addr_set+0x34>)
    43de:	e7fa      	b.n	43d6 <ll_addr_set+0x26>
    43e0:	2000051a 	.word	0x2000051a
    43e4:	20000514 	.word	0x20000514

000043e8 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    43e8:	2300      	movs	r3, #0
    43ea:	7003      	strb	r3, [r0, #0]
	*max = 0;
    43ec:	700b      	strb	r3, [r1, #0]
    43ee:	4770      	bx	lr

000043f0 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    43f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    43f2:	4607      	mov	r7, r0
    43f4:	460e      	mov	r6, r1
	while (len) {
    43f6:	460c      	mov	r4, r1
    43f8:	1b35      	subs	r5, r6, r4
    43fa:	443d      	add	r5, r7
    43fc:	b18c      	cbz	r4, 4422 <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    43fe:	f7fd f82d 	bl	145c <sys_rand32_get>

		if (len >= sizeof(v)) {
    4402:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    4404:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    4406:	d907      	bls.n	4418 <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    4408:	2204      	movs	r2, #4
    440a:	eb0d 0102 	add.w	r1, sp, r2
    440e:	4628      	mov	r0, r5
    4410:	f7fc f8f2 	bl	5f8 <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    4414:	3c04      	subs	r4, #4
    4416:	e7ef      	b.n	43f8 <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    4418:	4622      	mov	r2, r4
    441a:	a901      	add	r1, sp, #4
    441c:	4628      	mov	r0, r5
    441e:	f7fc f8eb 	bl	5f8 <memcpy>
			break;
		}
	}

	return 0;
}
    4422:	2000      	movs	r0, #0
    4424:	b003      	add	sp, #12
    4426:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004428 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    4428:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    442a:	4802      	ldr	r0, [pc, #8]	; (4434 <_hci_driver_init+0xc>)
    442c:	f7fe fd62 	bl	2ef4 <bt_hci_driver_register>

	return 0;
}
    4430:	2000      	movs	r0, #0
    4432:	bd08      	pop	{r3, pc}
    4434:	0000dd74 	.word	0x0000dd74

00004438 <recv_thread>:
{
    4438:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    443a:	4d21      	ldr	r5, [pc, #132]	; (44c0 <recv_thread+0x88>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    443c:	2600      	movs	r6, #0
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    443e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4442:	4628      	mov	r0, r5
    4444:	f007 fcd1 	bl	bdea <k_queue_get>
		if (node_rx && !buf) {
    4448:	4604      	mov	r4, r0
    444a:	b318      	cbz	r0, 4494 <recv_thread+0x5c>
	s8_t class = hci_get_class(node_rx);
    444c:	f000 ff2e 	bl	52ac <hci_get_class>
	switch (class) {
    4450:	2802      	cmp	r0, #2
    4452:	9403      	str	r4, [sp, #12]
    4454:	d821      	bhi.n	449a <recv_thread+0x62>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    4456:	2801      	cmp	r0, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    4458:	bf0e      	itee	eq
    445a:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    445c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    4460:	2001      	movne	r0, #1
    4462:	f7fe ff47 	bl	32f4 <bt_buf_get_rx>
    4466:	4604      	mov	r4, r0
		if (buf) {
    4468:	b118      	cbz	r0, 4472 <recv_thread+0x3a>
			hci_evt_encode(node_rx, buf);
    446a:	4601      	mov	r1, r0
    446c:	9803      	ldr	r0, [sp, #12]
    446e:	f000 fd8f 	bl	4f90 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    4472:	9b03      	ldr	r3, [sp, #12]
    4474:	2100      	movs	r1, #0
    4476:	88d8      	ldrh	r0, [r3, #6]
    4478:	f005 fbac 	bl	9bd4 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    447c:	a804      	add	r0, sp, #16
    447e:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    4482:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    4484:	f005 fb32 	bl	9aec <ll_rx_mem_release>
		if (buf) {
    4488:	b124      	cbz	r4, 4494 <recv_thread+0x5c>
			if (buf->len) {
    448a:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    448c:	4620      	mov	r0, r4
			if (buf->len) {
    448e:	b19b      	cbz	r3, 44b8 <recv_thread+0x80>
				bt_recv(buf);
    4490:	f7fe fbb4 	bl	2bfc <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    4494:	f007 fe54 	bl	c140 <_impl_k_yield>
    4498:	e7d1      	b.n	443e <recv_thread+0x6>
		LL_ASSERT(0);
    449a:	4b0a      	ldr	r3, [pc, #40]	; (44c4 <recv_thread+0x8c>)
    449c:	9301      	str	r3, [sp, #4]
    449e:	9300      	str	r3, [sp, #0]
    44a0:	4a09      	ldr	r2, [pc, #36]	; (44c8 <recv_thread+0x90>)
    44a2:	4b0a      	ldr	r3, [pc, #40]	; (44cc <recv_thread+0x94>)
    44a4:	490a      	ldr	r1, [pc, #40]	; (44d0 <recv_thread+0x98>)
    44a6:	480b      	ldr	r0, [pc, #44]	; (44d4 <recv_thread+0x9c>)
    44a8:	f7fc ffac 	bl	1404 <printk>
    44ac:	4040      	eors	r0, r0
    44ae:	f380 8811 	msr	BASEPRI, r0
    44b2:	f04f 0004 	mov.w	r0, #4
    44b6:	df02      	svc	2
				net_buf_unref(buf);
    44b8:	f007 fa3e 	bl	b938 <net_buf_unref>
    44bc:	e7ea      	b.n	4494 <recv_thread+0x5c>
    44be:	bf00      	nop
    44c0:	20003ef4 	.word	0x20003ef4
    44c4:	0000ceef 	.word	0x0000ceef
    44c8:	0000d7a6 	.word	0x0000d7a6
    44cc:	0000dd45 	.word	0x0000dd45
    44d0:	0000d71b 	.word	0x0000d71b
    44d4:	0000d6b3 	.word	0x0000d6b3

000044d8 <hci_driver_send>:
{
    44d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (!buf->len) {
    44da:	8983      	ldrh	r3, [r0, #12]
{
    44dc:	4604      	mov	r4, r0
	if (!buf->len) {
    44de:	b95b      	cbnz	r3, 44f8 <hci_driver_send+0x20>
		BT_ERR("Empty HCI packet");
    44e0:	4b11      	ldr	r3, [pc, #68]	; (4528 <hci_driver_send+0x50>)
    44e2:	9301      	str	r3, [sp, #4]
    44e4:	9300      	str	r3, [sp, #0]
    44e6:	4a11      	ldr	r2, [pc, #68]	; (452c <hci_driver_send+0x54>)
    44e8:	4b11      	ldr	r3, [pc, #68]	; (4530 <hci_driver_send+0x58>)
    44ea:	4912      	ldr	r1, [pc, #72]	; (4534 <hci_driver_send+0x5c>)
    44ec:	4812      	ldr	r0, [pc, #72]	; (4538 <hci_driver_send+0x60>)
    44ee:	f7fc ff89 	bl	1404 <printk>
		return -EINVAL;
    44f2:	f06f 0015 	mvn.w	r0, #21
    44f6:	e00a      	b.n	450e <hci_driver_send+0x36>
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    44f8:	7d02      	ldrb	r2, [r0, #20]
	switch (type) {
    44fa:	b952      	cbnz	r2, 4512 <hci_driver_send+0x3a>
	evt = hci_cmd_handle(buf);
    44fc:	f000 f9f6 	bl	48ec <hci_cmd_handle>
	if (evt) {
    4500:	b108      	cbz	r0, 4506 <hci_driver_send+0x2e>
		bt_recv_prio(evt);
    4502:	f7fe fc79 	bl	2df8 <bt_recv_prio>
		net_buf_unref(buf);
    4506:	4620      	mov	r0, r4
    4508:	f007 fa16 	bl	b938 <net_buf_unref>
	return err;
    450c:	2000      	movs	r0, #0
}
    450e:	b004      	add	sp, #16
    4510:	bd10      	pop	{r4, pc}
		BT_ERR("Unknown HCI type %u", type);
    4512:	4b05      	ldr	r3, [pc, #20]	; (4528 <hci_driver_send+0x50>)
    4514:	9302      	str	r3, [sp, #8]
	switch (type) {
    4516:	9201      	str	r2, [sp, #4]
		BT_ERR("Unknown HCI type %u", type);
    4518:	9300      	str	r3, [sp, #0]
    451a:	4a04      	ldr	r2, [pc, #16]	; (452c <hci_driver_send+0x54>)
    451c:	4b04      	ldr	r3, [pc, #16]	; (4530 <hci_driver_send+0x58>)
    451e:	4905      	ldr	r1, [pc, #20]	; (4534 <hci_driver_send+0x5c>)
    4520:	4806      	ldr	r0, [pc, #24]	; (453c <hci_driver_send+0x64>)
    4522:	f7fc ff6f 	bl	1404 <printk>
    4526:	e7e4      	b.n	44f2 <hci_driver_send+0x1a>
    4528:	0000ceef 	.word	0x0000ceef
    452c:	0000d7a6 	.word	0x0000d7a6
    4530:	0000dd51 	.word	0x0000dd51
    4534:	0000d71b 	.word	0x0000d71b
    4538:	0000ddb1 	.word	0x0000ddb1
    453c:	0000ddd2 	.word	0x0000ddd2

00004540 <prio_recv_thread>:
{
    4540:	b537      	push	{r0, r1, r2, r4, r5, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    4542:	4c0c      	ldr	r4, [pc, #48]	; (4574 <prio_recv_thread+0x34>)
			k_fifo_put(&recv_fifo, node_rx);
    4544:	4d0c      	ldr	r5, [pc, #48]	; (4578 <prio_recv_thread+0x38>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    4546:	f10d 0102 	add.w	r1, sp, #2
    454a:	a801      	add	r0, sp, #4
    454c:	f005 fa96 	bl	9a7c <ll_rx_get>
    4550:	2800      	cmp	r0, #0
    4552:	d1f8      	bne.n	4546 <prio_recv_thread+0x6>
		if (node_rx) {
    4554:	9b01      	ldr	r3, [sp, #4]
    4556:	b133      	cbz	r3, 4566 <prio_recv_thread+0x26>
			ll_rx_dequeue();
    4558:	f005 fe1a 	bl	a190 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    455c:	9901      	ldr	r1, [sp, #4]
    455e:	4628      	mov	r0, r5
    4560:	f007 fc1f 	bl	bda2 <k_queue_append>
    4564:	e7ef      	b.n	4546 <prio_recv_thread+0x6>
    4566:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    456a:	4620      	mov	r0, r4
    456c:	f007 feec 	bl	c348 <_impl_k_sem_take>
    4570:	e7e9      	b.n	4546 <prio_recv_thread+0x6>
    4572:	bf00      	nop
    4574:	20003edc 	.word	0x20003edc
    4578:	20003ef4 	.word	0x20003ef4

0000457c <hci_driver_open>:
{
    457c:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    457e:	481a      	ldr	r0, [pc, #104]	; (45e8 <hci_driver_open+0x6c>)
{
    4580:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    4582:	f005 fee3 	bl	a34c <ll_init>
	if (err) {
    4586:	4604      	mov	r4, r0
    4588:	b160      	cbz	r0, 45a4 <hci_driver_open+0x28>
		BT_ERR("LL initialization failed: %u", err);
    458a:	4b18      	ldr	r3, [pc, #96]	; (45ec <hci_driver_open+0x70>)
    458c:	9302      	str	r3, [sp, #8]
    458e:	e88d 0018 	stmia.w	sp, {r3, r4}
    4592:	4a17      	ldr	r2, [pc, #92]	; (45f0 <hci_driver_open+0x74>)
    4594:	4b17      	ldr	r3, [pc, #92]	; (45f4 <hci_driver_open+0x78>)
    4596:	4918      	ldr	r1, [pc, #96]	; (45f8 <hci_driver_open+0x7c>)
    4598:	4818      	ldr	r0, [pc, #96]	; (45fc <hci_driver_open+0x80>)
    459a:	f7fc ff33 	bl	1404 <printk>
}
    459e:	4620      	mov	r0, r4
    45a0:	b006      	add	sp, #24
    45a2:	bd10      	pop	{r4, pc}
	hci_init(NULL);
    45a4:	f000 fea2 	bl	52ec <hci_init>

    45a8:	f06f 0309 	mvn.w	r3, #9
    45ac:	9303      	str	r3, [sp, #12]
    45ae:	9405      	str	r4, [sp, #20]
    45b0:	9404      	str	r4, [sp, #16]
    45b2:	9402      	str	r4, [sp, #8]
    45b4:	9401      	str	r4, [sp, #4]
    45b6:	9400      	str	r4, [sp, #0]
    45b8:	4b11      	ldr	r3, [pc, #68]	; (4600 <hci_driver_open+0x84>)
    45ba:	4912      	ldr	r1, [pc, #72]	; (4604 <hci_driver_open+0x88>)
    45bc:	4812      	ldr	r0, [pc, #72]	; (4608 <hci_driver_open+0x8c>)
    45be:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    45c2:	f008 f883 	bl	c6cc <_impl_k_thread_create>
    45c6:	f06f 0307 	mvn.w	r3, #7
    45ca:	9303      	str	r3, [sp, #12]
    45cc:	9405      	str	r4, [sp, #20]
    45ce:	9404      	str	r4, [sp, #16]
    45d0:	9402      	str	r4, [sp, #8]
    45d2:	9401      	str	r4, [sp, #4]
    45d4:	9400      	str	r4, [sp, #0]
    45d6:	4b0d      	ldr	r3, [pc, #52]	; (460c <hci_driver_open+0x90>)
    45d8:	490d      	ldr	r1, [pc, #52]	; (4610 <hci_driver_open+0x94>)
    45da:	480e      	ldr	r0, [pc, #56]	; (4614 <hci_driver_open+0x98>)
    45dc:	f240 522c 	movw	r2, #1324	; 0x52c
    45e0:	f008 f874 	bl	c6cc <_impl_k_thread_create>
    45e4:	e7db      	b.n	459e <hci_driver_open+0x22>
    45e6:	bf00      	nop
    45e8:	20003edc 	.word	0x20003edc
    45ec:	0000ceef 	.word	0x0000ceef
    45f0:	0000d7a6 	.word	0x0000d7a6
    45f4:	0000dd61 	.word	0x0000dd61
    45f8:	0000d71b 	.word	0x0000d71b
    45fc:	0000dd84 	.word	0x0000dd84
    4600:	00004541 	.word	0x00004541
    4604:	200021f8 	.word	0x200021f8
    4608:	20001b34 	.word	0x20001b34
    460c:	00004439 	.word	0x00004439
    4610:	200024e8 	.word	0x200024e8
    4614:	20001acc 	.word	0x20001acc

00004618 <sys_put_le32>:
	dst[1] = val >> 8;
    4618:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    461c:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    461e:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    4620:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    4622:	0a00      	lsrs	r0, r0, #8
    4624:	704b      	strb	r3, [r1, #1]
    4626:	70c8      	strb	r0, [r1, #3]
    4628:	4770      	bx	lr

0000462a <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    462a:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    462c:	3008      	adds	r0, #8
{
    462e:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    4630:	2102      	movs	r1, #2
{
    4632:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    4634:	f007 f9b2 	bl	b99c <net_buf_simple_add>
	hdr->evt = evt;
    4638:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    463a:	7044      	strb	r4, [r0, #1]
    463c:	bd38      	pop	{r3, r4, r5, pc}
	...

00004640 <cmd_complete>:
}

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    4640:	b538      	push	{r3, r4, r5, lr}
    4642:	4604      	mov	r4, r0
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    4644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    4648:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    464a:	f7fe fe63 	bl	3314 <bt_buf_get_cmd_complete>

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    464e:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    4650:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    4652:	b2d2      	uxtb	r2, r2
    4654:	210e      	movs	r1, #14
    4656:	f7ff ffe8 	bl	462a <evt_create>

	cc = net_buf_add(*buf, sizeof(*cc));
    465a:	6820      	ldr	r0, [r4, #0]
    465c:	2103      	movs	r1, #3
    465e:	3008      	adds	r0, #8
    4660:	f007 f99c 	bl	b99c <net_buf_simple_add>
	cc->ncmd = 1;
    4664:	2301      	movs	r3, #1
    4666:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    4668:	4b05      	ldr	r3, [pc, #20]	; (4680 <cmd_complete+0x40>)
    466a:	881b      	ldrh	r3, [r3, #0]
    466c:	f8a0 3001 	strh.w	r3, [r0, #1]

	return net_buf_add(*buf, plen);
    4670:	6820      	ldr	r0, [r4, #0]
    4672:	4629      	mov	r1, r5
    4674:	3008      	adds	r0, #8
}
    4676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    467a:	f007 b98f 	b.w	b99c <net_buf_simple_add>
    467e:	bf00      	nop
    4680:	20000520 	.word	0x20000520

00004684 <meta_evt>:
	return buf;
}
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    4684:	b570      	push	{r4, r5, r6, lr}
    4686:	4604      	mov	r4, r0
    4688:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    468a:	3201      	adds	r2, #1
{
    468c:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    468e:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    4690:	b2d2      	uxtb	r2, r2
    4692:	213e      	movs	r1, #62	; 0x3e
    4694:	f7ff ffc9 	bl	462a <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    4698:	2101      	movs	r1, #1
    469a:	4620      	mov	r0, r4
    469c:	f007 f97e 	bl	b99c <net_buf_simple_add>
	me->subevent = subevt;
    46a0:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    46a2:	4629      	mov	r1, r5
    46a4:	4620      	mov	r0, r4
}
    46a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    46aa:	f007 b977 	b.w	b99c <net_buf_simple_add>

000046ae <le_set_adv_param.isra.21>:
				     (u32_t)(states & 0xffffffff));
	sys_put_le64(states, rp->le_states);
}

#if defined(CONFIG_BT_BROADCASTER)
static void le_set_adv_param(struct net_buf *buf, struct net_buf **evt)
    46ae:	b5f0      	push	{r4, r5, r6, r7, lr}
    46b0:	b08b      	sub	sp, #44	; 0x2c
	min_interval = sys_le16_to_cpu(cmd->min_interval);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
	

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    46b2:	2400      	movs	r4, #0
    46b4:	7a03      	ldrb	r3, [r0, #8]
    46b6:	f8b0 2003 	ldrh.w	r2, [r0, #3]
    46ba:	7806      	ldrb	r6, [r0, #0]
static void le_set_adv_param(struct net_buf *buf, struct net_buf **evt)
    46bc:	460d      	mov	r5, r1
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    46be:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    46c2:	9409      	str	r4, [sp, #36]	; 0x24
    46c4:	7d47      	ldrb	r7, [r0, #21]
    46c6:	9708      	str	r7, [sp, #32]
    46c8:	7d07      	ldrb	r7, [r0, #20]
    46ca:	9707      	str	r7, [sp, #28]
    46cc:	9406      	str	r4, [sp, #24]
    46ce:	7c87      	ldrb	r7, [r0, #18]
    46d0:	9705      	str	r7, [sp, #20]
    46d2:	9404      	str	r4, [sp, #16]
    46d4:	7c04      	ldrb	r4, [r0, #16]
    46d6:	9403      	str	r4, [sp, #12]
    46d8:	79c4      	ldrb	r4, [r0, #7]
    46da:	9402      	str	r4, [sp, #8]
				   cmd->own_addr_type, cmd->direct_addr.type,
				   &cmd->direct_addr.a.val[0], cmd->prim_channel_map,
    46dc:	f100 040a 	add.w	r4, r0, #10
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    46e0:	9401      	str	r4, [sp, #4]
    46e2:	7a40      	ldrb	r0, [r0, #9]
    46e4:	9000      	str	r0, [sp, #0]
    46e6:	4630      	mov	r0, r6
    46e8:	f005 fed8 	bl	a49c <ll_adv_params_set>
				   cmd->own_addr_type, cmd->direct_addr.type,
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
				   cmd->filter_policy);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	ccst = cmd_complete(evt, sizeof(*ccst));
    46ec:	2102      	movs	r1, #2
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    46ee:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    46f0:	4628      	mov	r0, r5
    46f2:	f7ff ffa5 	bl	4640 <cmd_complete>
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    46f6:	7004      	strb	r4, [r0, #0]
	ccst->status = status;
	//ccst->tx_power = 0;
}
    46f8:	b00b      	add	sp, #44	; 0x2c
    46fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000046fc <le_set_adv_enable.isra.25>:
#endif	/* !CONFIG_BT_CTLR_ADV_EXT */
	ccst = cmd_complete(evt, sizeof(*ccst));
	ccst->status = 0x00;
}

static void le_set_adv_enable(struct net_buf *buf, struct net_buf **evt)
    46fc:	b538      	push	{r3, r4, r5, lr}
{
#if defined(CONFIG_BT_CTLR_ADV_EXT)
	struct bt_hci_cp_le_set_adv_enable *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;
	status = ll_adv_enable(cmd->enable);
    46fe:	7800      	ldrb	r0, [r0, #0]
static void le_set_adv_enable(struct net_buf *buf, struct net_buf **evt)
    4700:	460d      	mov	r5, r1
	status = ll_adv_enable(cmd->enable);
    4702:	f006 f939 	bl	a978 <ll_adv_enable>
	struct bt_hci_cp_le_set_adv_enable *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;
	status = ll_adv_enable(cmd->enable);
#endif	/* !CONFIG_BT_CTLR_ADV_EXT */
	ccst = cmd_complete(evt, sizeof(*ccst));
    4706:	2101      	movs	r1, #1
	status = ll_adv_enable(cmd->enable);
    4708:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    470a:	4628      	mov	r0, r5
    470c:	f7ff ff98 	bl	4640 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    4710:	2c00      	cmp	r4, #0
    4712:	bf0c      	ite	eq
    4714:	2300      	moveq	r3, #0
    4716:	230c      	movne	r3, #12
    4718:	7003      	strb	r3, [r0, #0]
    471a:	bd38      	pop	{r3, r4, r5, pc}

0000471c <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    471c:	b570      	push	{r4, r5, r6, lr}
    471e:	4604      	mov	r4, r0
    4720:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4722:	4b13      	ldr	r3, [pc, #76]	; (4770 <le_remote_feat_complete+0x54>)
{
    4724:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4726:	e9d3 2300 	ldrd	r2, r3, [r3]
    472a:	2200      	movs	r2, #0
    472c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    4730:	4313      	orrs	r3, r2
{
    4732:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4734:	d01b      	beq.n	476e <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    4736:	4b0f      	ldr	r3, [pc, #60]	; (4774 <le_remote_feat_complete+0x58>)
    4738:	e9d3 2300 	ldrd	r2, r3, [r3]
    473c:	2300      	movs	r3, #0
    473e:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4742:	4313      	orrs	r3, r2
    4744:	d013      	beq.n	476e <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    4746:	220b      	movs	r2, #11
    4748:	2104      	movs	r1, #4
    474a:	f7ff ff9b 	bl	4684 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    474e:	2208      	movs	r2, #8
	sep->status = status;
    4750:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    4752:	f8a0 6001 	strh.w	r6, [r0, #1]
    4756:	3003      	adds	r0, #3
	if (!status) {
    4758:	b924      	cbnz	r4, 4764 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    475a:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    475c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    4760:	f7fb bf4a 	b.w	5f8 <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    4764:	2100      	movs	r1, #0
}
    4766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    476a:	f7fb bf71 	b.w	650 <memset>
    476e:	bd70      	pop	{r4, r5, r6, pc}
    4770:	20003c98 	.word	0x20003c98
    4774:	20003ca0 	.word	0x20003ca0

00004778 <bt_addr_le_to_str.constprop.43>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    4778:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    477a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    477c:	b08a      	sub	sp, #40	; 0x28
    477e:	4604      	mov	r4, r0
    4780:	460e      	mov	r6, r1
    4782:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    4784:	2b03      	cmp	r3, #3
    4786:	d820      	bhi.n	47ca <bt_addr_le_to_str.constprop.43+0x52>
    4788:	e8df f003 	tbb	[pc, r3]
    478c:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    4790:	4911      	ldr	r1, [pc, #68]	; (47d8 <bt_addr_le_to_str.constprop.43+0x60>)
		strcpy(type, "random");
    4792:	4628      	mov	r0, r5
    4794:	f7fb ff04 	bl	5a0 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    4798:	7862      	ldrb	r2, [r4, #1]
    479a:	9204      	str	r2, [sp, #16]
    479c:	78a2      	ldrb	r2, [r4, #2]
    479e:	9203      	str	r2, [sp, #12]
    47a0:	78e2      	ldrb	r2, [r4, #3]
    47a2:	9202      	str	r2, [sp, #8]
    47a4:	7922      	ldrb	r2, [r4, #4]
    47a6:	9201      	str	r2, [sp, #4]
    47a8:	7962      	ldrb	r2, [r4, #5]
    47aa:	9200      	str	r2, [sp, #0]
    47ac:	79a3      	ldrb	r3, [r4, #6]
    47ae:	9505      	str	r5, [sp, #20]
    47b0:	4a0a      	ldr	r2, [pc, #40]	; (47dc <bt_addr_le_to_str.constprop.43+0x64>)
    47b2:	211b      	movs	r1, #27
    47b4:	4630      	mov	r0, r6
    47b6:	f7fc fe33 	bl	1420 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    47ba:	b00a      	add	sp, #40	; 0x28
    47bc:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    47be:	4908      	ldr	r1, [pc, #32]	; (47e0 <bt_addr_le_to_str.constprop.43+0x68>)
    47c0:	e7e7      	b.n	4792 <bt_addr_le_to_str.constprop.43+0x1a>
		strcpy(type, "public id");
    47c2:	4908      	ldr	r1, [pc, #32]	; (47e4 <bt_addr_le_to_str.constprop.43+0x6c>)
    47c4:	e7e5      	b.n	4792 <bt_addr_le_to_str.constprop.43+0x1a>
		strcpy(type, "random id");
    47c6:	4908      	ldr	r1, [pc, #32]	; (47e8 <bt_addr_le_to_str.constprop.43+0x70>)
    47c8:	e7e3      	b.n	4792 <bt_addr_le_to_str.constprop.43+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    47ca:	4a08      	ldr	r2, [pc, #32]	; (47ec <bt_addr_le_to_str.constprop.43+0x74>)
    47cc:	210a      	movs	r1, #10
    47ce:	4628      	mov	r0, r5
    47d0:	f7fc fe26 	bl	1420 <snprintk>
    47d4:	e7e0      	b.n	4798 <bt_addr_le_to_str.constprop.43+0x20>
    47d6:	bf00      	nop
    47d8:	0000ce5f 	.word	0x0000ce5f
    47dc:	0000ce88 	.word	0x0000ce88
    47e0:	0000ce66 	.word	0x0000ce66
    47e4:	0000ce6d 	.word	0x0000ce6d
    47e8:	0000ce77 	.word	0x0000ce77
    47ec:	0000ce81 	.word	0x0000ce81

000047f0 <le_adv_ext_report.isra.39>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    47f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47f4:	4604      	mov	r4, r0
		  offsetof(struct pdu_adv, payload) + adv->len];
    47f6:	7840      	ldrb	r0, [r0, #1]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    47f8:	4d32      	ldr	r5, [pc, #200]	; (48c4 <le_adv_ext_report.isra.39+0xd4>)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    47fa:	b092      	sub	sp, #72	; 0x48
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    47fc:	4401      	add	r1, r0
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    47fe:	9507      	str	r5, [sp, #28]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4800:	7a8b      	ldrb	r3, [r1, #10]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    4802:	9003      	str	r0, [sp, #12]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4804:	425b      	negs	r3, r3
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    4806:	b25b      	sxtb	r3, r3
    4808:	9306      	str	r3, [sp, #24]
    480a:	7823      	ldrb	r3, [r4, #0]
    480c:	9201      	str	r2, [sp, #4]
    480e:	09d9      	lsrs	r1, r3, #7
    4810:	9105      	str	r1, [sp, #20]
    4812:	f3c3 1180 	ubfx	r1, r3, #6, #1
    4816:	f003 030f 	and.w	r3, r3, #15
    481a:	9104      	str	r1, [sp, #16]
    481c:	9302      	str	r3, [sp, #8]
    481e:	9500      	str	r5, [sp, #0]
    4820:	4b29      	ldr	r3, [pc, #164]	; (48c8 <le_adv_ext_report.isra.39+0xd8>)
    4822:	4a2a      	ldr	r2, [pc, #168]	; (48cc <le_adv_ext_report.isra.39+0xdc>)
    4824:	492a      	ldr	r1, [pc, #168]	; (48d0 <le_adv_ext_report.isra.39+0xe0>)
    4826:	482b      	ldr	r0, [pc, #172]	; (48d4 <le_adv_ext_report.isra.39+0xe4>)
    4828:	f7fc fdec 	bl	1404 <printk>
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    482c:	7823      	ldrb	r3, [r4, #0]
    482e:	f003 030f 	and.w	r3, r3, #15
    4832:	2b07      	cmp	r3, #7
    4834:	d143      	bne.n	48be <le_adv_ext_report.isra.39+0xce>
    4836:	7863      	ldrb	r3, [r4, #1]
    4838:	2b00      	cmp	r3, #0
    483a:	d040      	beq.n	48be <le_adv_ext_report.isra.39+0xce>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    483c:	78a3      	ldrb	r3, [r4, #2]
    483e:	4924      	ldr	r1, [pc, #144]	; (48d0 <le_adv_ext_report.isra.39+0xe0>)
    4840:	9503      	str	r5, [sp, #12]
    4842:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    4846:	099b      	lsrs	r3, r3, #6
    4848:	9202      	str	r2, [sp, #8]
    484a:	9301      	str	r3, [sp, #4]
    484c:	9500      	str	r5, [sp, #0]
    484e:	4b1e      	ldr	r3, [pc, #120]	; (48c8 <le_adv_ext_report.isra.39+0xd8>)
    4850:	4a1e      	ldr	r2, [pc, #120]	; (48cc <le_adv_ext_report.isra.39+0xdc>)
    4852:	4821      	ldr	r0, [pc, #132]	; (48d8 <le_adv_ext_report.isra.39+0xe8>)
    4854:	f7fc fdd6 	bl	1404 <printk>
		if (!p->ext_hdr_len) {
    4858:	78a3      	ldrb	r3, [r4, #2]
    485a:	0699      	lsls	r1, r3, #26
    485c:	d02f      	beq.n	48be <le_adv_ext_report.isra.39+0xce>
		if (h->adv_addr) {
    485e:	78e3      	ldrb	r3, [r4, #3]
    4860:	07da      	lsls	r2, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
    4862:	f104 0604 	add.w	r6, r4, #4
		if (h->adv_addr) {
    4866:	d51c      	bpl.n	48a2 <le_adv_ext_report.isra.39+0xb2>
			addr.type = adv->tx_addr;
    4868:	7823      	ldrb	r3, [r4, #0]
    486a:	af12      	add	r7, sp, #72	; 0x48
    486c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4870:	f807 3d24 	strb.w	r3, [r7, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    4874:	2206      	movs	r2, #6
    4876:	4631      	mov	r1, r6
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    4878:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    487c:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    4880:	f7fb feba 	bl	5f8 <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    4884:	4641      	mov	r1, r8
    4886:	4638      	mov	r0, r7
    4888:	f7ff ff76 	bl	4778 <bt_addr_le_to_str.constprop.43>
			BT_WARN("AdvA: %s", addr_str);
    488c:	9502      	str	r5, [sp, #8]
    488e:	e88d 0120 	stmia.w	sp, {r5, r8}
    4892:	4b0d      	ldr	r3, [pc, #52]	; (48c8 <le_adv_ext_report.isra.39+0xd8>)
    4894:	4a0d      	ldr	r2, [pc, #52]	; (48cc <le_adv_ext_report.isra.39+0xdc>)
    4896:	490e      	ldr	r1, [pc, #56]	; (48d0 <le_adv_ext_report.isra.39+0xe0>)
    4898:	4810      	ldr	r0, [pc, #64]	; (48dc <le_adv_ext_report.isra.39+0xec>)
			ptr += BDADDR_SIZE;
    489a:	f104 060a 	add.w	r6, r4, #10
			BT_WARN("AdvA: %s", addr_str);
    489e:	f7fc fdb1 	bl	1404 <printk>
		if (h->tx_pwr) {
    48a2:	78e3      	ldrb	r3, [r4, #3]
    48a4:	065b      	lsls	r3, r3, #25
    48a6:	d50a      	bpl.n	48be <le_adv_ext_report.isra.39+0xce>
			BT_WARN("Tx pwr= %d dB", tx_pwr);
    48a8:	9502      	str	r5, [sp, #8]
    48aa:	f996 3000 	ldrsb.w	r3, [r6]
    48ae:	9301      	str	r3, [sp, #4]
    48b0:	9500      	str	r5, [sp, #0]
    48b2:	4b05      	ldr	r3, [pc, #20]	; (48c8 <le_adv_ext_report.isra.39+0xd8>)
    48b4:	4a05      	ldr	r2, [pc, #20]	; (48cc <le_adv_ext_report.isra.39+0xdc>)
    48b6:	4906      	ldr	r1, [pc, #24]	; (48d0 <le_adv_ext_report.isra.39+0xe0>)
    48b8:	4809      	ldr	r0, [pc, #36]	; (48e0 <le_adv_ext_report.isra.39+0xf0>)
    48ba:	f7fc fda3 	bl	1404 <printk>
}
    48be:	b012      	add	sp, #72	; 0x48
    48c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    48c4:	0000ceef 	.word	0x0000ceef
    48c8:	0000de10 	.word	0x0000de10
    48cc:	0000d714 	.word	0x0000d714
    48d0:	0000d71b 	.word	0x0000d71b
    48d4:	0000df61 	.word	0x0000df61
    48d8:	0000dfae 	.word	0x0000dfae
    48dc:	0000dfdf 	.word	0x0000dfdf
    48e0:	0000dff8 	.word	0x0000dff8

000048e4 <sys_get_le64>:
{
    48e4:	4603      	mov	r3, r0
}
    48e6:	6800      	ldr	r0, [r0, #0]
    48e8:	6859      	ldr	r1, [r3, #4]
    48ea:	4770      	bx	lr

000048ec <hci_cmd_handle>:
{
    48ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    48ee:	8981      	ldrh	r1, [r0, #12]
{
    48f0:	b08f      	sub	sp, #60	; 0x3c
	struct net_buf *evt = NULL;
    48f2:	2600      	movs	r6, #0
	if (cmd->len < sizeof(*chdr)) {
    48f4:	2902      	cmp	r1, #2
{
    48f6:	4605      	mov	r5, r0
	struct net_buf *evt = NULL;
    48f8:	9603      	str	r6, [sp, #12]
	if (cmd->len < sizeof(*chdr)) {
    48fa:	d80b      	bhi.n	4914 <hci_cmd_handle+0x28>
		BT_ERR("No HCI Command header");
    48fc:	4bbb      	ldr	r3, [pc, #748]	; (4bec <hci_cmd_handle+0x300>)
    48fe:	9301      	str	r3, [sp, #4]
    4900:	9300      	str	r3, [sp, #0]
    4902:	4abb      	ldr	r2, [pc, #748]	; (4bf0 <hci_cmd_handle+0x304>)
    4904:	4bbb      	ldr	r3, [pc, #748]	; (4bf4 <hci_cmd_handle+0x308>)
    4906:	49bc      	ldr	r1, [pc, #752]	; (4bf8 <hci_cmd_handle+0x30c>)
    4908:	48bc      	ldr	r0, [pc, #752]	; (4bfc <hci_cmd_handle+0x310>)
		BT_ERR("Invalid HCI CMD packet length");
    490a:	f7fc fd7b 	bl	1404 <printk>
		return NULL;
    490e:	4630      	mov	r0, r6
}
    4910:	b00f      	add	sp, #60	; 0x3c
    4912:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    4914:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    4916:	4cba      	ldr	r4, [pc, #744]	; (4c00 <hci_cmd_handle+0x314>)
    4918:	781a      	ldrb	r2, [r3, #0]
    491a:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    491c:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    491e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    4922:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    4924:	8022      	strh	r2, [r4, #0]
	if (cmd->len < chdr->param_len) {
    4926:	d907      	bls.n	4938 <hci_cmd_handle+0x4c>
		BT_ERR("Invalid HCI CMD packet length");
    4928:	4bb0      	ldr	r3, [pc, #704]	; (4bec <hci_cmd_handle+0x300>)
    492a:	9301      	str	r3, [sp, #4]
    492c:	9300      	str	r3, [sp, #0]
    492e:	4ab0      	ldr	r2, [pc, #704]	; (4bf0 <hci_cmd_handle+0x304>)
    4930:	4bb0      	ldr	r3, [pc, #704]	; (4bf4 <hci_cmd_handle+0x308>)
    4932:	49b1      	ldr	r1, [pc, #708]	; (4bf8 <hci_cmd_handle+0x30c>)
    4934:	48b3      	ldr	r0, [pc, #716]	; (4c04 <hci_cmd_handle+0x318>)
    4936:	e7e8      	b.n	490a <hci_cmd_handle+0x1e>
	net_buf_pull(cmd, sizeof(*chdr));
    4938:	2103      	movs	r1, #3
    493a:	f105 0008 	add.w	r0, r5, #8
    493e:	f007 f844 	bl	b9ca <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    4942:	8823      	ldrh	r3, [r4, #0]
    4944:	f3c3 0409 	ubfx	r4, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    4948:	0a9b      	lsrs	r3, r3, #10
    494a:	2b04      	cmp	r3, #4
    494c:	d072      	beq.n	4a34 <hci_cmd_handle+0x148>
    494e:	d812      	bhi.n	4976 <hci_cmd_handle+0x8a>
    4950:	2b03      	cmp	r3, #3
    4952:	d02f      	beq.n	49b4 <hci_cmd_handle+0xc8>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    4954:	2101      	movs	r1, #1
    4956:	a803      	add	r0, sp, #12
    4958:	f7ff fe72 	bl	4640 <cmd_complete>
		BT_ERR("Invalid BT_HCI_ERR_UNKNOWN_CMD");
    495c:	4ba3      	ldr	r3, [pc, #652]	; (4bec <hci_cmd_handle+0x300>)
    495e:	9301      	str	r3, [sp, #4]
		ccst = cmd_complete(&evt, sizeof(*ccst));
    4960:	4604      	mov	r4, r0
		BT_ERR("Invalid BT_HCI_ERR_UNKNOWN_CMD");
    4962:	9300      	str	r3, [sp, #0]
    4964:	4aa2      	ldr	r2, [pc, #648]	; (4bf0 <hci_cmd_handle+0x304>)
    4966:	4ba3      	ldr	r3, [pc, #652]	; (4bf4 <hci_cmd_handle+0x308>)
    4968:	49a3      	ldr	r1, [pc, #652]	; (4bf8 <hci_cmd_handle+0x30c>)
    496a:	48a7      	ldr	r0, [pc, #668]	; (4c08 <hci_cmd_handle+0x31c>)
    496c:	f7fc fd4a 	bl	1404 <printk>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    4970:	2301      	movs	r3, #1
    4972:	7023      	strb	r3, [r4, #0]
    4974:	e033      	b.n	49de <hci_cmd_handle+0xf2>
	switch (BT_OGF(_opcode)) {
    4976:	2b08      	cmp	r3, #8
    4978:	f000 80e9 	beq.w	4b4e <hci_cmd_handle+0x262>
    497c:	2b3f      	cmp	r3, #63	; 0x3f
    497e:	d1e9      	bne.n	4954 <hci_cmd_handle+0x68>
	switch (ocf) {
    4980:	3c01      	subs	r4, #1
    4982:	2c09      	cmp	r4, #9
    4984:	d8e6      	bhi.n	4954 <hci_cmd_handle+0x68>
    4986:	a301      	add	r3, pc, #4	; (adr r3, 498c <hci_cmd_handle+0xa0>)
    4988:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    498c:	00004daf 	.word	0x00004daf
    4990:	00004ddd 	.word	0x00004ddd
    4994:	00004e05 	.word	0x00004e05
    4998:	00004955 	.word	0x00004955
    499c:	00004955 	.word	0x00004955
    49a0:	00004e49 	.word	0x00004e49
    49a4:	00004955 	.word	0x00004955
    49a8:	00004e1b 	.word	0x00004e1b
    49ac:	00004e53 	.word	0x00004e53
    49b0:	00004ebf 	.word	0x00004ebf
	switch (ocf) {
    49b4:	2c03      	cmp	r4, #3
    49b6:	d014      	beq.n	49e2 <hci_cmd_handle+0xf6>
    49b8:	d808      	bhi.n	49cc <hci_cmd_handle+0xe0>
    49ba:	2c01      	cmp	r4, #1
    49bc:	d1ca      	bne.n	4954 <hci_cmd_handle+0x68>
	event_mask = sys_get_le64(cmd->events);
    49be:	68a8      	ldr	r0, [r5, #8]
    49c0:	f7ff ff90 	bl	48e4 <sys_get_le64>
    49c4:	4b91      	ldr	r3, [pc, #580]	; (4c0c <hci_cmd_handle+0x320>)
    49c6:	e9c3 0100 	strd	r0, r1, [r3]
    49ca:	e003      	b.n	49d4 <hci_cmd_handle+0xe8>
	switch (ocf) {
    49cc:	2c2d      	cmp	r4, #45	; 0x2d
    49ce:	d01b      	beq.n	4a08 <hci_cmd_handle+0x11c>
    49d0:	2c63      	cmp	r4, #99	; 0x63
    49d2:	d1bf      	bne.n	4954 <hci_cmd_handle+0x68>
	ccst = cmd_complete(evt, sizeof(*ccst));
    49d4:	2101      	movs	r1, #1
    49d6:	a803      	add	r0, sp, #12
    49d8:	f7ff fe32 	bl	4640 <cmd_complete>
	ccst->status = 0x00;
    49dc:	7006      	strb	r6, [r0, #0]
	return evt;
    49de:	9803      	ldr	r0, [sp, #12]
    49e0:	e796      	b.n	4910 <hci_cmd_handle+0x24>
	dup_count = -1;
    49e2:	4b8b      	ldr	r3, [pc, #556]	; (4c10 <hci_cmd_handle+0x324>)
    49e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    49e8:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    49ea:	4b88      	ldr	r3, [pc, #544]	; (4c0c <hci_cmd_handle+0x320>)
    49ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    49f0:	f641 71ff 	movw	r1, #8191	; 0x1fff
    49f4:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    49f8:	4b86      	ldr	r3, [pc, #536]	; (4c14 <hci_cmd_handle+0x328>)
    49fa:	201f      	movs	r0, #31
    49fc:	2100      	movs	r1, #0
    49fe:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    4a02:	f004 ff9d 	bl	9940 <ll_reset>
    4a06:	e7e5      	b.n	49d4 <hci_cmd_handle+0xe8>
    4a08:	68ab      	ldr	r3, [r5, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    4a0a:	2104      	movs	r1, #4
    4a0c:	a803      	add	r0, sp, #12
	handle = sys_le16_to_cpu(cmd->handle);
    4a0e:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    4a10:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    4a12:	f7ff fe15 	bl	4640 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    4a16:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    4a18:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    4a1a:	1cc2      	adds	r2, r0, #3
    4a1c:	4639      	mov	r1, r7
    4a1e:	4630      	mov	r0, r6
    4a20:	f005 f822 	bl	9a68 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    4a24:	2800      	cmp	r0, #0
    4a26:	bf14      	ite	ne
    4a28:	2302      	movne	r3, #2
    4a2a:	2300      	moveq	r3, #0
    4a2c:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    4a2e:	f8a4 5001 	strh.w	r5, [r4, #1]
    4a32:	e7d4      	b.n	49de <hci_cmd_handle+0xf2>
	switch (ocf) {
    4a34:	3c01      	subs	r4, #1
    4a36:	2c08      	cmp	r4, #8
    4a38:	d88c      	bhi.n	4954 <hci_cmd_handle+0x68>
    4a3a:	a301      	add	r3, pc, #4	; (adr r3, 4a40 <hci_cmd_handle+0x154>)
    4a3c:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    4a40:	00004a65 	.word	0x00004a65
    4a44:	00004a8f 	.word	0x00004a8f
    4a48:	00004b1b 	.word	0x00004b1b
    4a4c:	00004955 	.word	0x00004955
    4a50:	00004955 	.word	0x00004955
    4a54:	00004955 	.word	0x00004955
    4a58:	00004955 	.word	0x00004955
    4a5c:	00004955 	.word	0x00004955
    4a60:	00004b37 	.word	0x00004b37
	rp = cmd_complete(evt, sizeof(*rp));
    4a64:	2109      	movs	r1, #9
    4a66:	a803      	add	r0, sp, #12
    4a68:	f7ff fdea 	bl	4640 <cmd_complete>
	rp->status = 0x00;
    4a6c:	2300      	movs	r3, #0
    4a6e:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    4a70:	7083      	strb	r3, [r0, #2]
    4a72:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    4a74:	f06f 030e 	mvn.w	r3, #14
    4a78:	7143      	strb	r3, [r0, #5]
    4a7a:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    4a7c:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    4a7e:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    4a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    4a84:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    4a86:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    4a88:	71c3      	strb	r3, [r0, #7]
    4a8a:	7203      	strb	r3, [r0, #8]
    4a8c:	e7a7      	b.n	49de <hci_cmd_handle+0xf2>
	rp = cmd_complete(evt, sizeof(*rp));
    4a8e:	2141      	movs	r1, #65	; 0x41
    4a90:	a803      	add	r0, sp, #12
    4a92:	f7ff fdd5 	bl	4640 <cmd_complete>
	rp->status = 0x00;
    4a96:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    4a98:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    4a9a:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    4a9c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    4aa0:	f7fb fdd6 	bl	650 <memset>
	rp->commands[2] |= BIT(7);
    4aa4:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[27] |= BIT(6) | BIT(7);
    4aa6:	7f20      	ldrb	r0, [r4, #28]
	rp->commands[36] |= BIT(1);
    4aa8:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
	rp->commands[26] |= BIT(6) | BIT(7);
    4aac:	7ee1      	ldrb	r1, [r4, #27]
	rp->commands[2] |= BIT(7);
    4aae:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4ab2:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    4ab4:	79a3      	ldrb	r3, [r4, #6]
    4ab6:	f063 033f 	orn	r3, r3, #63	; 0x3f
    4aba:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    4abc:	7ae3      	ldrb	r3, [r4, #11]
    4abe:	f043 0304 	orr.w	r3, r3, #4
    4ac2:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    4ac4:	7be3      	ldrb	r3, [r4, #15]
    4ac6:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    4aca:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    4acc:	7c23      	ldrb	r3, [r4, #16]
    4ace:	f043 0302 	orr.w	r3, r3, #2
    4ad2:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    4ad4:	7de3      	ldrb	r3, [r4, #23]
	rp->commands[27] |= BIT(6) | BIT(7);
    4ad6:	f060 003c 	orn	r0, r0, #60	; 0x3c
	rp->commands[22] |= BIT(2);
    4ada:	f043 0304 	orr.w	r3, r3, #4
    4ade:	75e3      	strb	r3, [r4, #23]
	rp->commands[27] |= BIT(6) | BIT(7);
    4ae0:	7720      	strb	r0, [r4, #28]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    4ae2:	7ea3      	ldrb	r3, [r4, #26]
	rp->commands[28] |= BIT(3);
    4ae4:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    4ae6:	f063 0308 	orn	r3, r3, #8
	rp->commands[28] |= BIT(3);
    4aea:	f040 0008 	orr.w	r0, r0, #8
    4aee:	7760      	strb	r0, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    4af0:	76a3      	strb	r3, [r4, #26]
	rp->commands[38] |= BIT(7);
    4af2:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
	rp->commands[37] |= BIT(5);
    4af6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	rp->commands[38] |= BIT(7);
    4afa:	f060 007f 	orn	r0, r0, #127	; 0x7f
	rp->commands[26] |= BIT(2) | BIT(3);
    4afe:	f061 0130 	orn	r1, r1, #48	; 0x30
	rp->commands[36] |= BIT(4);
    4b02:	f062 0201 	orn	r2, r2, #1
	rp->commands[37] |= BIT(6);
    4b06:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	rp->commands[38] |= BIT(7);
    4b0a:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
	rp->commands[26] |= BIT(2) | BIT(3);
    4b0e:	76e1      	strb	r1, [r4, #27]
	rp->commands[36] |= BIT(4);
    4b10:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	rp->commands[37] |= BIT(6);
    4b14:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
    4b18:	e761      	b.n	49de <hci_cmd_handle+0xf2>
	rp = cmd_complete(evt, sizeof(*rp));
    4b1a:	2109      	movs	r1, #9
    4b1c:	a803      	add	r0, sp, #12
    4b1e:	f7ff fd8f 	bl	4640 <cmd_complete>
	rp->status = 0x00;
    4b22:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    4b24:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    4b26:	2208      	movs	r2, #8
	rp->status = 0x00;
    4b28:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    4b2c:	f7fb fd90 	bl	650 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    4b30:	2360      	movs	r3, #96	; 0x60
    4b32:	7163      	strb	r3, [r4, #5]
    4b34:	e753      	b.n	49de <hci_cmd_handle+0xf2>
	rp = cmd_complete(evt, sizeof(*rp));
    4b36:	2107      	movs	r1, #7
    4b38:	a803      	add	r0, sp, #12
    4b3a:	f7ff fd81 	bl	4640 <cmd_complete>
	rp->status = 0x00;
    4b3e:	4601      	mov	r1, r0
    4b40:	2300      	movs	r3, #0
    4b42:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    4b46:	4618      	mov	r0, r3
    4b48:	f7ff fc18 	bl	437c <ll_addr_get>
    4b4c:	e747      	b.n	49de <hci_cmd_handle+0xf2>
	switch (ocf) {
    4b4e:	2c0f      	cmp	r4, #15
    4b50:	f000 80cc 	beq.w	4cec <hci_cmd_handle+0x400>
    4b54:	d862      	bhi.n	4c1c <hci_cmd_handle+0x330>
    4b56:	2c07      	cmp	r4, #7
    4b58:	f000 8104 	beq.w	4d64 <hci_cmd_handle+0x478>
    4b5c:	d81f      	bhi.n	4b9e <hci_cmd_handle+0x2b2>
    4b5e:	2c03      	cmp	r4, #3
    4b60:	f000 80a7 	beq.w	4cb2 <hci_cmd_handle+0x3c6>
    4b64:	d810      	bhi.n	4b88 <hci_cmd_handle+0x29c>
    4b66:	2c01      	cmp	r4, #1
    4b68:	f000 8097 	beq.w	4c9a <hci_cmd_handle+0x3ae>
    4b6c:	2c02      	cmp	r4, #2
    4b6e:	f47f aef1 	bne.w	4954 <hci_cmd_handle+0x68>
	rp = cmd_complete(evt, sizeof(*rp));
    4b72:	2104      	movs	r1, #4
    4b74:	a803      	add	r0, sp, #12
    4b76:	f7ff fd63 	bl	4640 <cmd_complete>
	rp->status = 0x00;
    4b7a:	2300      	movs	r3, #0
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    4b7c:	221b      	movs	r2, #27
	rp->status = 0x00;
    4b7e:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    4b80:	7042      	strb	r2, [r0, #1]
    4b82:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    4b84:	70c4      	strb	r4, [r0, #3]
    4b86:	e72a      	b.n	49de <hci_cmd_handle+0xf2>
	switch (ocf) {
    4b88:	2c05      	cmp	r4, #5
    4b8a:	f000 80a4 	beq.w	4cd6 <hci_cmd_handle+0x3ea>
    4b8e:	2c06      	cmp	r4, #6
    4b90:	f47f aee0 	bne.w	4954 <hci_cmd_handle+0x68>
		le_set_adv_param(cmd, evt);
    4b94:	a903      	add	r1, sp, #12
    4b96:	68a8      	ldr	r0, [r5, #8]
    4b98:	f7ff fd89 	bl	46ae <le_set_adv_param.isra.21>
    4b9c:	e71f      	b.n	49de <hci_cmd_handle+0xf2>
	switch (ocf) {
    4b9e:	2c0a      	cmp	r4, #10
    4ba0:	f000 80e7 	beq.w	4d72 <hci_cmd_handle+0x486>
    4ba4:	d80a      	bhi.n	4bbc <hci_cmd_handle+0x2d0>
    4ba6:	2c08      	cmp	r4, #8
    4ba8:	d060      	beq.n	4c6c <hci_cmd_handle+0x380>
    4baa:	2c09      	cmp	r4, #9
    4bac:	f47f aed2 	bne.w	4954 <hci_cmd_handle+0x68>
    4bb0:	68ab      	ldr	r3, [r5, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    4bb2:	1c59      	adds	r1, r3, #1
    4bb4:	7818      	ldrb	r0, [r3, #0]
    4bb6:	f005 fe9d 	bl	a8f4 <ll_scan_data_set>
    4bba:	e074      	b.n	4ca6 <hci_cmd_handle+0x3ba>
	switch (ocf) {
    4bbc:	2c0b      	cmp	r4, #11
    4bbe:	f000 80dd 	beq.w	4d7c <hci_cmd_handle+0x490>
    4bc2:	2c0c      	cmp	r4, #12
    4bc4:	f47f aec6 	bne.w	4954 <hci_cmd_handle+0x68>
    4bc8:	68aa      	ldr	r2, [r5, #8]
    4bca:	4b11      	ldr	r3, [pc, #68]	; (4c10 <hci_cmd_handle+0x324>)
	if (cmd->enable && cmd->filter_dup) {
    4bcc:	7810      	ldrb	r0, [r2, #0]
    4bce:	2800      	cmp	r0, #0
    4bd0:	f000 80ea 	beq.w	4da8 <hci_cmd_handle+0x4bc>
    4bd4:	7852      	ldrb	r2, [r2, #1]
    4bd6:	2a00      	cmp	r2, #0
    4bd8:	f000 80e6 	beq.w	4da8 <hci_cmd_handle+0x4bc>
		dup_count = 0;
    4bdc:	2200      	movs	r2, #0
    4bde:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    4be0:	4b0d      	ldr	r3, [pc, #52]	; (4c18 <hci_cmd_handle+0x32c>)
		dup_count = -1;
    4be2:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    4be4:	f005 ff44 	bl	aa70 <ll_scan_enable>
    4be8:	e0d3      	b.n	4d92 <hci_cmd_handle+0x4a6>
    4bea:	bf00      	nop
    4bec:	0000ceef 	.word	0x0000ceef
    4bf0:	0000d7a6 	.word	0x0000d7a6
    4bf4:	0000de01 	.word	0x0000de01
    4bf8:	0000d71b 	.word	0x0000d71b
    4bfc:	0000de66 	.word	0x0000de66
    4c00:	20000520 	.word	0x20000520
    4c04:	0000de8c 	.word	0x0000de8c
    4c08:	0000deba 	.word	0x0000deba
    4c0c:	20003c98 	.word	0x20003c98
    4c10:	20000524 	.word	0x20000524
    4c14:	20003ca0 	.word	0x20003ca0
    4c18:	20000528 	.word	0x20000528
	switch (ocf) {
    4c1c:	2c1c      	cmp	r4, #28
    4c1e:	f000 8090 	beq.w	4d42 <hci_cmd_handle+0x456>
    4c22:	d81b      	bhi.n	4c5c <hci_cmd_handle+0x370>
    4c24:	2c12      	cmp	r4, #18
    4c26:	d074      	beq.n	4d12 <hci_cmd_handle+0x426>
    4c28:	d808      	bhi.n	4c3c <hci_cmd_handle+0x350>
    4c2a:	2c10      	cmp	r4, #16
    4c2c:	d068      	beq.n	4d00 <hci_cmd_handle+0x414>
    4c2e:	2c11      	cmp	r4, #17
    4c30:	f47f ae90 	bne.w	4954 <hci_cmd_handle+0x68>
	status = ll_wl_add(&cmd->addr);
    4c34:	68a8      	ldr	r0, [r5, #8]
    4c36:	f005 ff7f 	bl	ab38 <ll_wl_add>
    4c3a:	e050      	b.n	4cde <hci_cmd_handle+0x3f2>
	switch (ocf) {
    4c3c:	2c17      	cmp	r4, #23
    4c3e:	d06c      	beq.n	4d1a <hci_cmd_handle+0x42e>
    4c40:	2c18      	cmp	r4, #24
    4c42:	f47f ae87 	bne.w	4954 <hci_cmd_handle+0x68>
	rp = cmd_complete(evt, sizeof(*rp));
    4c46:	2109      	movs	r1, #9
    4c48:	a803      	add	r0, sp, #12
    4c4a:	f7ff fcf9 	bl	4640 <cmd_complete>
	rp->status = 0x00;
    4c4e:	2300      	movs	r3, #0
    4c50:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    4c54:	2108      	movs	r1, #8
    4c56:	f7ff fbcb 	bl	43f0 <bt_rand>
    4c5a:	e6c0      	b.n	49de <hci_cmd_handle+0xf2>
	switch (ocf) {
    4c5c:	2c38      	cmp	r4, #56	; 0x38
    4c5e:	d0a7      	beq.n	4bb0 <hci_cmd_handle+0x2c4>
    4c60:	d80a      	bhi.n	4c78 <hci_cmd_handle+0x38c>
    4c62:	2c36      	cmp	r4, #54	; 0x36
    4c64:	d096      	beq.n	4b94 <hci_cmd_handle+0x2a8>
    4c66:	2c37      	cmp	r4, #55	; 0x37
    4c68:	f47f ae74 	bne.w	4954 <hci_cmd_handle+0x68>
    4c6c:	68ab      	ldr	r3, [r5, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    4c6e:	1c59      	adds	r1, r3, #1
    4c70:	7818      	ldrb	r0, [r3, #0]
    4c72:	f005 fdd9 	bl	a828 <ll_adv_data_set>
    4c76:	e016      	b.n	4ca6 <hci_cmd_handle+0x3ba>
	switch (ocf) {
    4c78:	2c39      	cmp	r4, #57	; 0x39
    4c7a:	d07a      	beq.n	4d72 <hci_cmd_handle+0x486>
    4c7c:	2c4b      	cmp	r4, #75	; 0x4b
    4c7e:	f47f ae69 	bne.w	4954 <hci_cmd_handle+0x68>
	rp = cmd_complete(evt, sizeof(*rp));
    4c82:	2103      	movs	r1, #3
    4c84:	a803      	add	r0, sp, #12
    4c86:	f7ff fcdb 	bl	4640 <cmd_complete>
	rp->status = 0x00;
    4c8a:	4601      	mov	r1, r0
    4c8c:	2300      	movs	r3, #0
    4c8e:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    4c92:	3001      	adds	r0, #1
    4c94:	f7ff fba8 	bl	43e8 <ll_tx_pwr_get>
    4c98:	e6a1      	b.n	49de <hci_cmd_handle+0xf2>
	le_event_mask = sys_get_le64(cmd->events);
    4c9a:	68a8      	ldr	r0, [r5, #8]
    4c9c:	f7ff fe22 	bl	48e4 <sys_get_le64>
    4ca0:	4bb9      	ldr	r3, [pc, #740]	; (4f88 <hci_cmd_handle+0x69c>)
    4ca2:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    4ca6:	2101      	movs	r1, #1
    4ca8:	a803      	add	r0, sp, #12
    4caa:	f7ff fcc9 	bl	4640 <cmd_complete>
	ccst->status = 0x00;
    4cae:	2300      	movs	r3, #0
    4cb0:	e078      	b.n	4da4 <hci_cmd_handle+0x4b8>
	rp = cmd_complete(evt, sizeof(*rp));
    4cb2:	2109      	movs	r1, #9
    4cb4:	a803      	add	r0, sp, #12
    4cb6:	f7ff fcc3 	bl	4640 <cmd_complete>
	rp->status = 0x00;
    4cba:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    4cbc:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    4cbe:	2208      	movs	r2, #8
	rp->status = 0x00;
    4cc0:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    4cc4:	f7fb fcc4 	bl	650 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    4cc8:	230c      	movs	r3, #12
    4cca:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    4ccc:	2340      	movs	r3, #64	; 0x40
    4cce:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    4cd0:	2301      	movs	r3, #1
    4cd2:	70e3      	strb	r3, [r4, #3]
    4cd4:	e683      	b.n	49de <hci_cmd_handle+0xf2>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    4cd6:	68a9      	ldr	r1, [r5, #8]
    4cd8:	2001      	movs	r0, #1
    4cda:	f7ff fb69 	bl	43b0 <ll_addr_set>
	status = ll_wl_remove(&cmd->addr);
    4cde:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    4ce0:	2101      	movs	r1, #1
    4ce2:	a803      	add	r0, sp, #12
    4ce4:	f7ff fcac 	bl	4640 <cmd_complete>
	ccst->status = status;
    4ce8:	7004      	strb	r4, [r0, #0]
    4cea:	e678      	b.n	49de <hci_cmd_handle+0xf2>
	rp = cmd_complete(evt, sizeof(*rp));
    4cec:	2102      	movs	r1, #2
    4cee:	a803      	add	r0, sp, #12
    4cf0:	f7ff fca6 	bl	4640 <cmd_complete>
	rp->status = 0x00;
    4cf4:	7006      	strb	r6, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    4cf6:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    4cf8:	f005 ff06 	bl	ab08 <ll_wl_size_get>
    4cfc:	7060      	strb	r0, [r4, #1]
    4cfe:	e66e      	b.n	49de <hci_cmd_handle+0xf2>
	ccst = cmd_complete(evt, sizeof(*ccst));
    4d00:	2101      	movs	r1, #1
    4d02:	a803      	add	r0, sp, #12
    4d04:	f7ff fc9c 	bl	4640 <cmd_complete>
    4d08:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    4d0a:	f005 feff 	bl	ab0c <ll_wl_clear>
    4d0e:	7020      	strb	r0, [r4, #0]
    4d10:	e665      	b.n	49de <hci_cmd_handle+0xf2>
	status = ll_wl_remove(&cmd->addr);
    4d12:	68a8      	ldr	r0, [r5, #8]
    4d14:	f005 ff48 	bl	aba8 <ll_wl_remove>
    4d18:	e7e1      	b.n	4cde <hci_cmd_handle+0x3f2>
    4d1a:	68a8      	ldr	r0, [r5, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    4d1c:	2300      	movs	r3, #0
    4d1e:	aa04      	add	r2, sp, #16
    4d20:	f100 0110 	add.w	r1, r0, #16
    4d24:	f006 f810 	bl	ad48 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    4d28:	2111      	movs	r1, #17
    4d2a:	a803      	add	r0, sp, #12
    4d2c:	f7ff fc88 	bl	4640 <cmd_complete>
	rp->status = 0x00;
    4d30:	2300      	movs	r3, #0
	memcpy(rp->enc_data, enc_data, 16);
    4d32:	2210      	movs	r2, #16
	rp->status = 0x00;
    4d34:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    4d38:	eb0d 0102 	add.w	r1, sp, r2
	memcpy(rp->info, build_info, sizeof(build_info));
    4d3c:	f7fb fc5c 	bl	5f8 <memcpy>
    4d40:	e64d      	b.n	49de <hci_cmd_handle+0xf2>
	rp = cmd_complete(evt, sizeof(*rp));
    4d42:	2109      	movs	r1, #9
    4d44:	a803      	add	r0, sp, #12
    4d46:	f7ff fc7b 	bl	4640 <cmd_complete>
	rp->status = 0x00;
    4d4a:	4601      	mov	r1, r0
	rp = cmd_complete(evt, sizeof(*rp));
    4d4c:	4602      	mov	r2, r0
	rp->status = 0x00;
    4d4e:	f801 6b01 	strb.w	r6, [r1], #1
	sys_put_le32(val, dst);
    4d52:	f243 3033 	movw	r0, #13107	; 0x3333
    4d56:	f7ff fc5f 	bl	4618 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    4d5a:	4630      	mov	r0, r6
    4d5c:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    4d5e:	f7ff fc5b 	bl	4618 <sys_put_le32>
    4d62:	e63c      	b.n	49de <hci_cmd_handle+0xf2>
	rp = cmd_complete(evt, sizeof(*rp));
    4d64:	2102      	movs	r1, #2
    4d66:	a803      	add	r0, sp, #12
    4d68:	f7ff fc6a 	bl	4640 <cmd_complete>
	rp->status = 0x00;
    4d6c:	7006      	strb	r6, [r0, #0]
	rp->tx_power_level = 0;
    4d6e:	7046      	strb	r6, [r0, #1]
    4d70:	e635      	b.n	49de <hci_cmd_handle+0xf2>
		le_set_adv_enable(cmd, evt);
    4d72:	a903      	add	r1, sp, #12
    4d74:	68a8      	ldr	r0, [r5, #8]
    4d76:	f7ff fcc1 	bl	46fc <le_set_adv_enable.isra.25>
    4d7a:	e630      	b.n	49de <hci_cmd_handle+0xf2>
    4d7c:	68ac      	ldr	r4, [r5, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    4d7e:	7963      	ldrb	r3, [r4, #5]
    4d80:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    4d84:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    4d88:	7820      	ldrb	r0, [r4, #0]
    4d8a:	79a4      	ldrb	r4, [r4, #6]
    4d8c:	9400      	str	r4, [sp, #0]
    4d8e:	f005 fe4f 	bl	aa30 <ll_scan_params_set>
	status = ll_scan_enable(cmd->enable);
    4d92:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    4d94:	2101      	movs	r1, #1
    4d96:	a803      	add	r0, sp, #12
    4d98:	f7ff fc52 	bl	4640 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    4d9c:	2c00      	cmp	r4, #0
    4d9e:	bf14      	ite	ne
    4da0:	230c      	movne	r3, #12
    4da2:	2300      	moveq	r3, #0
	ccst->status = 0x00;
    4da4:	7003      	strb	r3, [r0, #0]
    4da6:	e61a      	b.n	49de <hci_cmd_handle+0xf2>
		dup_count = -1;
    4da8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4dac:	e719      	b.n	4be2 <hci_cmd_handle+0x2f6>
	rp = cmd_complete(evt, sizeof(*rp));
    4dae:	210d      	movs	r1, #13
    4db0:	a803      	add	r0, sp, #12
    4db2:	f7ff fc45 	bl	4640 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    4db6:	2202      	movs	r2, #2
    4db8:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    4dba:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    4dbc:	2201      	movs	r2, #1
    4dbe:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    4dc0:	220b      	movs	r2, #11
	rp->status = 0x00;
    4dc2:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    4dc4:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    4dc6:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    4dc8:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    4dca:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    4dcc:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    4dce:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    4dd0:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    4dd2:	7242      	strb	r2, [r0, #9]
    4dd4:	7283      	strb	r3, [r0, #10]
    4dd6:	72c3      	strb	r3, [r0, #11]
    4dd8:	7303      	strb	r3, [r0, #12]
    4dda:	e600      	b.n	49de <hci_cmd_handle+0xf2>
	rp = cmd_complete(evt, sizeof(*rp));
    4ddc:	2141      	movs	r1, #65	; 0x41
    4dde:	a803      	add	r0, sp, #12
    4de0:	f7ff fc2e 	bl	4640 <cmd_complete>
	rp->status = 0x00;
    4de4:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    4de6:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    4de8:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    4dea:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    4dee:	f7fb fc2f 	bl	650 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    4df2:	7863      	ldrb	r3, [r4, #1]
    4df4:	f063 0358 	orn	r3, r3, #88	; 0x58
    4df8:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    4dfa:	78a3      	ldrb	r3, [r4, #2]
    4dfc:	f043 0303 	orr.w	r3, r3, #3
    4e00:	70a3      	strb	r3, [r4, #2]
    4e02:	e5ec      	b.n	49de <hci_cmd_handle+0xf2>
	rp = cmd_complete(evt, sizeof(*rp));
    4e04:	2109      	movs	r1, #9
    4e06:	a803      	add	r0, sp, #12
    4e08:	f7ff fc1a 	bl	4640 <cmd_complete>
	rp->status = 0x00;
    4e0c:	2100      	movs	r1, #0
    4e0e:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    4e12:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    4e14:	f7fb fc1c 	bl	650 <memset>
    4e18:	e5e1      	b.n	49de <hci_cmd_handle+0xf2>
	const char build_info[] = HCI_VS_BUILD_INFO;
    4e1a:	4b5c      	ldr	r3, [pc, #368]	; (4f8c <hci_cmd_handle+0x6a0>)
    4e1c:	aa04      	add	r2, sp, #16
    4e1e:	f103 0628 	add.w	r6, r3, #40	; 0x28
    4e22:	4615      	mov	r5, r2
    4e24:	6818      	ldr	r0, [r3, #0]
    4e26:	6859      	ldr	r1, [r3, #4]
    4e28:	4614      	mov	r4, r2
    4e2a:	c403      	stmia	r4!, {r0, r1}
    4e2c:	3308      	adds	r3, #8
    4e2e:	42b3      	cmp	r3, r6
    4e30:	4622      	mov	r2, r4
    4e32:	d1f7      	bne.n	4e24 <hci_cmd_handle+0x538>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    4e34:	2129      	movs	r1, #41	; 0x29
    4e36:	a803      	add	r0, sp, #12
    4e38:	f7ff fc02 	bl	4640 <cmd_complete>
	rp->status = 0x00;
    4e3c:	2300      	movs	r3, #0
    4e3e:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    4e42:	2228      	movs	r2, #40	; 0x28
    4e44:	4629      	mov	r1, r5
    4e46:	e779      	b.n	4d3c <hci_cmd_handle+0x450>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    4e48:	68a9      	ldr	r1, [r5, #8]
    4e4a:	2000      	movs	r0, #0
    4e4c:	f7ff fab0 	bl	43b0 <ll_addr_set>
    4e50:	e729      	b.n	4ca6 <hci_cmd_handle+0x3ba>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    4e52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4e56:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    4e5a:	3201      	adds	r2, #1
    4e5c:	d106      	bne.n	4e6c <hci_cmd_handle+0x580>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    4e5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    4e62:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    4e66:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    4e68:	4293      	cmp	r3, r2
    4e6a:	d020      	beq.n	4eae <hci_cmd_handle+0x5c2>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    4e6c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    4e70:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    4e74:	07db      	lsls	r3, r3, #31
    4e76:	d51a      	bpl.n	4eae <hci_cmd_handle+0x5c2>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    4e78:	2118      	movs	r1, #24
    4e7a:	a803      	add	r0, sp, #12
    4e7c:	f7ff fbe0 	bl	4640 <cmd_complete>
		rp->status = 0x00;
    4e80:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    4e82:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    4e84:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    4e86:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    4e88:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    4e8a:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    4e8e:	1ca1      	adds	r1, r4, #2
    4e90:	f7ff fbc2 	bl	4618 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    4e94:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    4e98:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    4e9a:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    4e9e:	f063 033f 	orn	r3, r3, #63	; 0x3f
    4ea2:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    4ea4:	2210      	movs	r2, #16
    4ea6:	4631      	mov	r1, r6
    4ea8:	f104 0008 	add.w	r0, r4, #8
    4eac:	e7b2      	b.n	4e14 <hci_cmd_handle+0x528>
	rp = cmd_complete(evt, sizeof(*rp));
    4eae:	2102      	movs	r1, #2
    4eb0:	a803      	add	r0, sp, #12
    4eb2:	f7ff fbc5 	bl	4640 <cmd_complete>
	rp->status = 0x00;
    4eb6:	2300      	movs	r3, #0
    4eb8:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    4eba:	7043      	strb	r3, [r0, #1]
    4ebc:	e58f      	b.n	49de <hci_cmd_handle+0xf2>
	rp = cmd_complete(evt, sizeof(*rp));
    4ebe:	2121      	movs	r1, #33	; 0x21
    4ec0:	a803      	add	r0, sp, #12
    4ec2:	f7ff fbbd 	bl	4640 <cmd_complete>
	rp->status = 0x00;
    4ec6:	4603      	mov	r3, r0
    4ec8:	2200      	movs	r2, #0
    4eca:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    4ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    4ed2:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    4ed4:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    4ed8:	3101      	adds	r1, #1
    4eda:	d04b      	beq.n	4f74 <hci_cmd_handle+0x688>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    4edc:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    4ee0:	3101      	adds	r1, #1
    4ee2:	d047      	beq.n	4f74 <hci_cmd_handle+0x688>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    4ee4:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    4ee8:	3101      	adds	r1, #1
    4eea:	d043      	beq.n	4f74 <hci_cmd_handle+0x688>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    4eec:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    4ef0:	3101      	adds	r1, #1
    4ef2:	d03f      	beq.n	4f74 <hci_cmd_handle+0x688>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    4ef4:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    4ef8:	4619      	mov	r1, r3
    4efa:	f7ff fb8d 	bl	4618 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    4efe:	1d61      	adds	r1, r4, #5
    4f00:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    4f04:	f7ff fb88 	bl	4618 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    4f08:	f104 0109 	add.w	r1, r4, #9
    4f0c:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    4f10:	f7ff fb82 	bl	4618 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    4f14:	f104 010d 	add.w	r1, r4, #13
    4f18:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    4f1c:	f7ff fb7c 	bl	4618 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    4f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4f24:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    4f28:	3301      	adds	r3, #1
    4f2a:	f104 0311 	add.w	r3, r4, #17
    4f2e:	d027      	beq.n	4f80 <hci_cmd_handle+0x694>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    4f30:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    4f34:	3101      	adds	r1, #1
    4f36:	d023      	beq.n	4f80 <hci_cmd_handle+0x694>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    4f38:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    4f3c:	3101      	adds	r1, #1
    4f3e:	d01f      	beq.n	4f80 <hci_cmd_handle+0x694>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    4f40:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    4f44:	3101      	adds	r1, #1
    4f46:	d01b      	beq.n	4f80 <hci_cmd_handle+0x694>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    4f48:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    4f4c:	4619      	mov	r1, r3
    4f4e:	f7ff fb63 	bl	4618 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    4f52:	f104 0115 	add.w	r1, r4, #21
    4f56:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    4f5a:	f7ff fb5d 	bl	4618 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    4f5e:	f104 0119 	add.w	r1, r4, #25
    4f62:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    4f66:	f7ff fb57 	bl	4618 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    4f6a:	f104 011d 	add.w	r1, r4, #29
    4f6e:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    4f72:	e6f4      	b.n	4d5e <hci_cmd_handle+0x472>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    4f74:	2210      	movs	r2, #16
    4f76:	2100      	movs	r1, #0
    4f78:	4618      	mov	r0, r3
    4f7a:	f7fb fb69 	bl	650 <memset>
    4f7e:	e7cf      	b.n	4f20 <hci_cmd_handle+0x634>
		memset(rp->er, 0x00, sizeof(rp->er));
    4f80:	2210      	movs	r2, #16
    4f82:	2100      	movs	r1, #0
    4f84:	4618      	mov	r0, r3
    4f86:	e745      	b.n	4e14 <hci_cmd_handle+0x528>
    4f88:	20003ca0 	.word	0x20003ca0
    4f8c:	0000dee9 	.word	0x0000dee9

00004f90 <hci_evt_encode>:

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    4f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    4f94:	7903      	ldrb	r3, [r0, #4]
    4f96:	2b01      	cmp	r3, #1
{
    4f98:	b090      	sub	sp, #64	; 0x40
    4f9a:	4604      	mov	r4, r0
    4f9c:	4689      	mov	r9, r1
	pdu_data = (void *)node_rx->pdu_data;
    4f9e:	f100 0708 	add.w	r7, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    4fa2:	f000 811a 	beq.w	51da <hci_evt_encode+0x24a>
	switch (node_rx->hdr.type) {
    4fa6:	3b02      	subs	r3, #2
    4fa8:	2b03      	cmp	r3, #3
    4faa:	f200 8107 	bhi.w	51bc <hci_evt_encode+0x22c>
    4fae:	e8df f003 	tbb	[pc, r3]
    4fb2:	b602      	.short	0xb602
    4fb4:	bebc      	.short	0xbebc
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    4fb6:	2301      	movs	r3, #1
    4fb8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    4fbc:	2303      	movs	r3, #3
    4fbe:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    4fc2:	23ff      	movs	r3, #255	; 0xff
    4fc4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    4fc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    4fcc:	2302      	movs	r3, #2
    4fce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    4fd2:	4ba5      	ldr	r3, [pc, #660]	; (5268 <hci_evt_encode+0x2d8>)
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    4fd4:	2204      	movs	r2, #4
    4fd6:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    4fda:	e9d3 2300 	ldrd	r2, r3, [r3]
    4fde:	2200      	movs	r2, #0
    4fe0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    4fe4:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    4fe6:	4313      	orrs	r3, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    4fe8:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    4fec:	f000 8094 	beq.w	5118 <hci_evt_encode+0x188>
	if (!(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    4ff0:	4b9e      	ldr	r3, [pc, #632]	; (526c <hci_evt_encode+0x2dc>)
    4ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
    4ff6:	2300      	movs	r3, #0
    4ff8:	f002 0202 	and.w	r2, r2, #2
    4ffc:	4313      	orrs	r3, r2
    4ffe:	f000 808b 	beq.w	5118 <hci_evt_encode+0x188>
	if (dup_count >= 0) {
    5002:	4e9b      	ldr	r6, [pc, #620]	; (5270 <hci_evt_encode+0x2e0>)
    5004:	6833      	ldr	r3, [r6, #0]
    5006:	42ab      	cmp	r3, r5
    5008:	f100 080a 	add.w	r8, r0, #10
    500c:	db49      	blt.n	50a2 <hci_evt_encode+0x112>
    500e:	f8df a298 	ldr.w	sl, [pc, #664]	; 52a8 <hci_evt_encode+0x318>
		for (i = 0; i < dup_count; i++) {
    5012:	6833      	ldr	r3, [r6, #0]
    5014:	429d      	cmp	r5, r3
    5016:	db27      	blt.n	5068 <hci_evt_encode+0xd8>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    5018:	4d96      	ldr	r5, [pc, #600]	; (5274 <hci_evt_encode+0x2e4>)
    501a:	f8df a25c 	ldr.w	sl, [pc, #604]	; 5278 <hci_evt_encode+0x2e8>
    501e:	6828      	ldr	r0, [r5, #0]
    5020:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
    5024:	2206      	movs	r2, #6
    5026:	4641      	mov	r1, r8
    5028:	3002      	adds	r0, #2
    502a:	f7fb fae5 	bl	5f8 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    502e:	682b      	ldr	r3, [r5, #0]
    5030:	7a22      	ldrb	r2, [r4, #8]
    5032:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
    5036:	f3c2 1280 	ubfx	r2, r2, #6, #1
    503a:	704a      	strb	r2, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    503c:	7a22      	ldrb	r2, [r4, #8]
    503e:	f002 010f 	and.w	r1, r2, #15
    5042:	2201      	movs	r2, #1
    5044:	408a      	lsls	r2, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    5046:	6831      	ldr	r1, [r6, #0]
		dup_filter[dup_curr].mask = BIT(adv->type);
    5048:	f80a 2033 	strb.w	r2, [sl, r3, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    504c:	290f      	cmp	r1, #15
			dup_count++;
    504e:	bfd5      	itete	le
    5050:	3101      	addle	r1, #1
			dup_curr++;
    5052:	3301      	addgt	r3, #1
			dup_curr = dup_count;
    5054:	6029      	strle	r1, [r5, #0]
			dup_curr++;
    5056:	602b      	strgt	r3, [r5, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    5058:	682b      	ldr	r3, [r5, #0]
			dup_count++;
    505a:	bfd8      	it	le
    505c:	6031      	strle	r1, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    505e:	2b10      	cmp	r3, #16
    5060:	d11f      	bne.n	50a2 <hci_evt_encode+0x112>
			dup_curr = 0;
    5062:	2300      	movs	r3, #0
    5064:	602b      	str	r3, [r5, #0]
    5066:	e01c      	b.n	50a2 <hci_evt_encode+0x112>
			if (!memcmp(&adv->adv_ind.addr[0],
    5068:	2206      	movs	r2, #6
    506a:	4651      	mov	r1, sl
    506c:	4640      	mov	r0, r8
    506e:	f7fb faae 	bl	5ce <memcmp>
    5072:	b9f0      	cbnz	r0, 50b2 <hci_evt_encode+0x122>
			    adv->tx_addr == dup_filter[i].addr.type) {
    5074:	7a23      	ldrb	r3, [r4, #8]
    5076:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
    507a:	461a      	mov	r2, r3
    507c:	f3c3 1380 	ubfx	r3, r3, #6, #1
				    sizeof(bt_addr_t)) &&
    5080:	428b      	cmp	r3, r1
    5082:	d116      	bne.n	50b2 <hci_evt_encode+0x122>
				if (dup_filter[i].mask & BIT(adv->type)) {
    5084:	487c      	ldr	r0, [pc, #496]	; (5278 <hci_evt_encode+0x2e8>)
    5086:	f810 3035 	ldrb.w	r3, [r0, r5, lsl #3]
    508a:	f002 020f 	and.w	r2, r2, #15
    508e:	fa23 f102 	lsr.w	r1, r3, r2
    5092:	07c9      	lsls	r1, r1, #31
    5094:	d440      	bmi.n	5118 <hci_evt_encode+0x188>
				dup_filter[i].mask |= BIT(adv->type);
    5096:	2101      	movs	r1, #1
    5098:	fa01 f202 	lsl.w	r2, r1, r2
    509c:	4313      	orrs	r3, r2
    509e:	f800 3035 	strb.w	r3, [r0, r5, lsl #3]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    50a2:	7a23      	ldrb	r3, [r4, #8]
    50a4:	f003 030f 	and.w	r3, r3, #15
    50a8:	2b01      	cmp	r3, #1
    50aa:	7a63      	ldrb	r3, [r4, #9]
    50ac:	d105      	bne.n	50ba <hci_evt_encode+0x12a>
		data_len = 0;
    50ae:	2600      	movs	r6, #0
    50b0:	e005      	b.n	50be <hci_evt_encode+0x12e>
		for (i = 0; i < dup_count; i++) {
    50b2:	3501      	adds	r5, #1
    50b4:	f10a 0a08 	add.w	sl, sl, #8
    50b8:	e7ab      	b.n	5012 <hci_evt_encode+0x82>
		data_len = (adv->len - BDADDR_SIZE);
    50ba:	1f9e      	subs	r6, r3, #6
    50bc:	b2f6      	uxtb	r6, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    50be:	4423      	add	r3, r4
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    50c0:	f106 020b 	add.w	r2, r6, #11
    50c4:	b2d2      	uxtb	r2, r2
    50c6:	2102      	movs	r1, #2
    50c8:	4648      	mov	r0, r9
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    50ca:	f893 a00a 	ldrb.w	sl, [r3, #10]
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    50ce:	f7ff fad9 	bl	4684 <meta_evt>
	sep->num_reports = 1;
    50d2:	2301      	movs	r3, #1
    50d4:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    50d6:	7a23      	ldrb	r3, [r4, #8]
    50d8:	aa10      	add	r2, sp, #64	; 0x40
    50da:	f003 030f 	and.w	r3, r3, #15
    50de:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    50e0:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    50e2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    50e6:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
    50e8:	7a23      	ldrb	r3, [r4, #8]
    50ea:	f3c3 1380 	ubfx	r3, r3, #6, #1
    50ee:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    50f0:	2206      	movs	r2, #6
    50f2:	4641      	mov	r1, r8
    50f4:	3003      	adds	r0, #3
    50f6:	f7fb fa7f 	bl	5f8 <memcpy>
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    50fa:	350a      	adds	r5, #10
	adv_info->length = data_len;
    50fc:	f805 6c01 	strb.w	r6, [r5, #-1]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    5100:	f1ca 0a00 	rsb	sl, sl, #0
    5104:	fa4f fa8a 	sxtb.w	sl, sl
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    5108:	4632      	mov	r2, r6
    510a:	f107 0108 	add.w	r1, r7, #8
    510e:	4628      	mov	r0, r5
    5110:	f7fb fa72 	bl	5f8 <memcpy>
	*prssi = rssi;
    5114:	f805 a006 	strb.w	sl, [r5, r6]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    5118:	b010      	add	sp, #64	; 0x40
    511a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    511e:	2201      	movs	r2, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    5120:	4621      	mov	r1, r4
    5122:	4638      	mov	r0, r7
    5124:	f7ff fb64 	bl	47f0 <le_adv_ext_report.isra.39>
    5128:	e7f6      	b.n	5118 <hci_evt_encode+0x188>
    512a:	2204      	movs	r2, #4
    512c:	e7f8      	b.n	5120 <hci_evt_encode+0x190>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    512e:	4b4e      	ldr	r3, [pc, #312]	; (5268 <hci_evt_encode+0x2d8>)
    5130:	e9d3 2300 	ldrd	r2, r3, [r3]
    5134:	2200      	movs	r2, #0
    5136:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    513a:	4313      	orrs	r3, r2
    513c:	f100 060a 	add.w	r6, r0, #10
    5140:	d007      	beq.n	5152 <hci_evt_encode+0x1c2>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    5142:	4b4a      	ldr	r3, [pc, #296]	; (526c <hci_evt_encode+0x2dc>)
    5144:	e9d3 2300 	ldrd	r2, r3, [r3]
    5148:	2300      	movs	r3, #0
    514a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    514e:	4313      	orrs	r3, r2
    5150:	d123      	bne.n	519a <hci_evt_encode+0x20a>
		addr.type = adv->tx_addr;
    5152:	7a23      	ldrb	r3, [r4, #8]
    5154:	ad10      	add	r5, sp, #64	; 0x40
    5156:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    515a:	2206      	movs	r2, #6
    515c:	4631      	mov	r1, r6
    515e:	f10d 001d 	add.w	r0, sp, #29
		addr.type = adv->tx_addr;
    5162:	f805 3d24 	strb.w	r3, [r5, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    5166:	f7fb fa47 	bl	5f8 <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
    516a:	7a63      	ldrb	r3, [r4, #9]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    516c:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    516e:	ae09      	add	r6, sp, #36	; 0x24
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    5170:	7aa4      	ldrb	r4, [r4, #10]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    5172:	4631      	mov	r1, r6
    5174:	4628      	mov	r0, r5
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    5176:	4264      	negs	r4, r4
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    5178:	f7ff fafe 	bl	4778 <bt_addr_le_to_str.constprop.43>
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    517c:	b264      	sxtb	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    517e:	4b3f      	ldr	r3, [pc, #252]	; (527c <hci_evt_encode+0x2ec>)
    5180:	9304      	str	r3, [sp, #16]
    5182:	2200      	movs	r2, #0
    5184:	9201      	str	r2, [sp, #4]
    5186:	9300      	str	r3, [sp, #0]
    5188:	9403      	str	r4, [sp, #12]
    518a:	9602      	str	r6, [sp, #8]
    518c:	4b3c      	ldr	r3, [pc, #240]	; (5280 <hci_evt_encode+0x2f0>)
    518e:	4a3d      	ldr	r2, [pc, #244]	; (5284 <hci_evt_encode+0x2f4>)
    5190:	493d      	ldr	r1, [pc, #244]	; (5288 <hci_evt_encode+0x2f8>)
    5192:	483e      	ldr	r0, [pc, #248]	; (528c <hci_evt_encode+0x2fc>)
    5194:	f7fc f936 	bl	1404 <printk>
    5198:	e7be      	b.n	5118 <hci_evt_encode+0x188>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    519a:	2208      	movs	r2, #8
    519c:	2113      	movs	r1, #19
    519e:	4648      	mov	r0, r9
    51a0:	f7ff fa70 	bl	4684 <meta_evt>
	sep->handle = 0;
    51a4:	2300      	movs	r3, #0
    51a6:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    51a8:	7a23      	ldrb	r3, [r4, #8]
    51aa:	f3c3 1380 	ubfx	r3, r3, #6, #1
    51ae:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    51b0:	2206      	movs	r2, #6
    51b2:	4631      	mov	r1, r6
    51b4:	3002      	adds	r0, #2
    51b6:	f7fb fa1f 	bl	5f8 <memcpy>
    51ba:	e7ad      	b.n	5118 <hci_evt_encode+0x188>
		LL_ASSERT(0);
    51bc:	4b2f      	ldr	r3, [pc, #188]	; (527c <hci_evt_encode+0x2ec>)
    51be:	9301      	str	r3, [sp, #4]
    51c0:	9300      	str	r3, [sp, #0]
    51c2:	4b33      	ldr	r3, [pc, #204]	; (5290 <hci_evt_encode+0x300>)
		LL_ASSERT(0);
    51c4:	4a33      	ldr	r2, [pc, #204]	; (5294 <hci_evt_encode+0x304>)
    51c6:	4930      	ldr	r1, [pc, #192]	; (5288 <hci_evt_encode+0x2f8>)
    51c8:	4833      	ldr	r0, [pc, #204]	; (5298 <hci_evt_encode+0x308>)
    51ca:	f7fc f91b 	bl	1404 <printk>
    51ce:	4040      	eors	r0, r0
    51d0:	f380 8811 	msr	BASEPRI, r0
    51d4:	f04f 0004 	mov.w	r0, #4
    51d8:	df02      	svc	2
	switch (pdu_data->llctrl.opcode) {
    51da:	7ac1      	ldrb	r1, [r0, #11]
    51dc:	88c5      	ldrh	r5, [r0, #6]
    51de:	2909      	cmp	r1, #9
    51e0:	d00b      	beq.n	51fa <hci_evt_encode+0x26a>
    51e2:	290c      	cmp	r1, #12
    51e4:	d010      	beq.n	5208 <hci_evt_encode+0x278>
    51e6:	2907      	cmp	r1, #7
    51e8:	d138      	bne.n	525c <hci_evt_encode+0x2cc>
    51ea:	7b02      	ldrb	r2, [r0, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    51ec:	2a0e      	cmp	r2, #14
    51ee:	d12a      	bne.n	5246 <hci_evt_encode+0x2b6>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    51f0:	464b      	mov	r3, r9
    51f2:	462a      	mov	r2, r5
    51f4:	2100      	movs	r1, #0
    51f6:	201a      	movs	r0, #26
    51f8:	e003      	b.n	5202 <hci_evt_encode+0x272>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    51fa:	464b      	mov	r3, r9
    51fc:	462a      	mov	r2, r5
    51fe:	4639      	mov	r1, r7
    5200:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    5202:	f7ff fa8b 	bl	471c <le_remote_feat_complete>
    5206:	e787      	b.n	5118 <hci_evt_encode+0x188>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    5208:	4b17      	ldr	r3, [pc, #92]	; (5268 <hci_evt_encode+0x2d8>)
    520a:	e9d3 2300 	ldrd	r2, r3, [r3]
    520e:	2300      	movs	r3, #0
    5210:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    5214:	4313      	orrs	r3, r2
    5216:	f43f af7f 	beq.w	5118 <hci_evt_encode+0x188>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    521a:	2208      	movs	r2, #8
    521c:	4648      	mov	r0, r9
    521e:	f7ff fa04 	bl	462a <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    5222:	2108      	movs	r1, #8
    5224:	eb09 0001 	add.w	r0, r9, r1
    5228:	f006 fbb8 	bl	b99c <net_buf_simple_add>
	ep->status = 0x00;
    522c:	2300      	movs	r3, #0
    522e:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    5230:	f8a0 5001 	strh.w	r5, [r0, #1]
	ep->version = ver_ind->version_number;
    5234:	7b23      	ldrb	r3, [r4, #12]
    5236:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    5238:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    523c:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    523e:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    5242:	80c3      	strh	r3, [r0, #6]
    5244:	e768      	b.n	5118 <hci_evt_encode+0x188>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    5246:	4b0d      	ldr	r3, [pc, #52]	; (527c <hci_evt_encode+0x2ec>)
    5248:	9302      	str	r3, [sp, #8]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    524a:	9201      	str	r2, [sp, #4]
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    524c:	9300      	str	r3, [sp, #0]
    524e:	4a0d      	ldr	r2, [pc, #52]	; (5284 <hci_evt_encode+0x2f4>)
    5250:	4b12      	ldr	r3, [pc, #72]	; (529c <hci_evt_encode+0x30c>)
    5252:	490d      	ldr	r1, [pc, #52]	; (5288 <hci_evt_encode+0x2f8>)
    5254:	4812      	ldr	r0, [pc, #72]	; (52a0 <hci_evt_encode+0x310>)
    5256:	f7fc f8d5 	bl	1404 <printk>
    525a:	e75d      	b.n	5118 <hci_evt_encode+0x188>
		LL_ASSERT(0);
    525c:	4b07      	ldr	r3, [pc, #28]	; (527c <hci_evt_encode+0x2ec>)
    525e:	9301      	str	r3, [sp, #4]
    5260:	9300      	str	r3, [sp, #0]
    5262:	4b10      	ldr	r3, [pc, #64]	; (52a4 <hci_evt_encode+0x314>)
    5264:	e7ae      	b.n	51c4 <hci_evt_encode+0x234>
    5266:	bf00      	nop
    5268:	20003c98 	.word	0x20003c98
    526c:	20003ca0 	.word	0x20003ca0
    5270:	20000524 	.word	0x20000524
    5274:	20000528 	.word	0x20000528
    5278:	2000052c 	.word	0x2000052c
    527c:	0000ceef 	.word	0x0000ceef
    5280:	0000de22 	.word	0x0000de22
    5284:	0000d714 	.word	0x0000d714
    5288:	0000d71b 	.word	0x0000d71b
    528c:	0000df11 	.word	0x0000df11
    5290:	0000de37 	.word	0x0000de37
    5294:	0000d7a6 	.word	0x0000d7a6
    5298:	0000d6b3 	.word	0x0000d6b3
    529c:	0000de46 	.word	0x0000de46
    52a0:	0000df44 	.word	0x0000df44
    52a4:	0000de55 	.word	0x0000de55
    52a8:	2000052e 	.word	0x2000052e

000052ac <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    52ac:	7903      	ldrb	r3, [r0, #4]
    52ae:	2b01      	cmp	r3, #1
    52b0:	d00f      	beq.n	52d2 <hci_get_class+0x26>
    52b2:	2b0a      	cmp	r3, #10
    52b4:	d815      	bhi.n	52e2 <hci_get_class+0x36>
    52b6:	2001      	movs	r0, #1
    52b8:	fa00 f303 	lsl.w	r3, r0, r3
    52bc:	f413 6fb0 	tst.w	r3, #1408	; 0x580
    52c0:	d112      	bne.n	52e8 <hci_get_class+0x3c>
    52c2:	f013 0f3c 	tst.w	r3, #60	; 0x3c
    52c6:	d110      	bne.n	52ea <hci_get_class+0x3e>
    52c8:	f083 0340 	eor.w	r3, r3, #64	; 0x40
    52cc:	f343 1080 	sbfx	r0, r3, #6, #1
    52d0:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    52d2:	7a03      	ldrb	r3, [r0, #8]
    52d4:	f003 0303 	and.w	r3, r3, #3
    52d8:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    52da:	bf0c      	ite	eq
    52dc:	2002      	moveq	r0, #2
    52de:	2003      	movne	r0, #3
    52e0:	4770      	bx	lr
			return -1;
    52e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    52e6:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
    52e8:	2002      	movs	r0, #2
	}
}
    52ea:	4770      	bx	lr

000052ec <hci_init>:
	dup_count = -1;
    52ec:	4b08      	ldr	r3, [pc, #32]	; (5310 <hci_init+0x24>)
    52ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    52f2:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    52f4:	4b07      	ldr	r3, [pc, #28]	; (5314 <hci_init+0x28>)
    52f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    52fa:	f641 71ff 	movw	r1, #8191	; 0x1fff
    52fe:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    5302:	4b05      	ldr	r3, [pc, #20]	; (5318 <hci_init+0x2c>)
    5304:	201f      	movs	r0, #31
    5306:	2100      	movs	r1, #0
    5308:	e9c3 0100 	strd	r0, r1, [r3]
    530c:	4770      	bx	lr
    530e:	bf00      	nop
    5310:	20000524 	.word	0x20000524
    5314:	20003c98 	.word	0x20003c98
    5318:	20003ca0 	.word	0x20003ca0

0000531c <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    531c:	bf20      	wfe
	__SEV();
    531e:	bf40      	sev
	__WFE();
    5320:	bf20      	wfe
    5322:	4770      	bx	lr

00005324 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    5324:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    5326:	4b0d      	ldr	r3, [pc, #52]	; (535c <pdu_len_cmp+0x38>)
{
    5328:	b089      	sub	sp, #36	; 0x24
    532a:	4605      	mov	r5, r0
    532c:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    532e:	aa01      	add	r2, sp, #4
    5330:	f103 0718 	add.w	r7, r3, #24
    5334:	6818      	ldr	r0, [r3, #0]
    5336:	6859      	ldr	r1, [r3, #4]
    5338:	4614      	mov	r4, r2
    533a:	c403      	stmia	r4!, {r0, r1}
    533c:	3308      	adds	r3, #8
    533e:	42bb      	cmp	r3, r7
    5340:	4622      	mov	r2, r4
    5342:	d1f7      	bne.n	5334 <pdu_len_cmp+0x10>
    5344:	881b      	ldrh	r3, [r3, #0]
    5346:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    5348:	ab08      	add	r3, sp, #32
    534a:	441d      	add	r5, r3
    534c:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    5350:	1b83      	subs	r3, r0, r6
    5352:	4258      	negs	r0, r3
    5354:	4158      	adcs	r0, r3
    5356:	b009      	add	sp, #36	; 0x24
    5358:	bdf0      	pop	{r4, r5, r6, r7, pc}
    535a:	bf00      	nop
    535c:	0000cd59 	.word	0x0000cd59

00005360 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    5360:	6008      	str	r0, [r1, #0]
    5362:	4770      	bx	lr

00005364 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    5364:	b918      	cbnz	r0, 536e <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    5366:	680b      	ldr	r3, [r1, #0]
    5368:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    536c:	600b      	str	r3, [r1, #0]
    536e:	4770      	bx	lr

00005370 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    5370:	b918      	cbnz	r0, 537a <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    5372:	680b      	ldr	r3, [r1, #0]
    5374:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    5378:	600b      	str	r3, [r1, #0]
    537a:	4770      	bx	lr

0000537c <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    537c:	b570      	push	{r4, r5, r6, lr}
    537e:	1d03      	adds	r3, r0, #4
    5380:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    5382:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    5384:	429d      	cmp	r5, r3
    5386:	d101      	bne.n	538c <chan_sel_remap+0x10>
    5388:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    538a:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    538c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    5390:	2200      	movs	r2, #0
    5392:	18a0      	adds	r0, r4, r2
    5394:	2a08      	cmp	r2, #8
    5396:	b2c0      	uxtb	r0, r0
    5398:	d101      	bne.n	539e <chan_sel_remap+0x22>
    539a:	4604      	mov	r4, r0
    539c:	e7f2      	b.n	5384 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    539e:	f016 0f01 	tst.w	r6, #1
    53a2:	d003      	beq.n	53ac <chan_sel_remap+0x30>
				if (chan_index == 0) {
    53a4:	2900      	cmp	r1, #0
    53a6:	d0f0      	beq.n	538a <chan_sel_remap+0xe>
				chan_index--;
    53a8:	3901      	subs	r1, #1
    53aa:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    53ac:	0876      	lsrs	r6, r6, #1
    53ae:	3201      	adds	r2, #1
    53b0:	e7ef      	b.n	5392 <chan_sel_remap+0x16>
	...

000053b4 <packet_rx_reserve_get>:
			_radio.packet_rx_acquire);
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    53b4:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
    53b6:	4a0c      	ldr	r2, [pc, #48]	; (53e8 <packet_rx_reserve_get+0x34>)
    53b8:	f892 36a6 	ldrb.w	r3, [r2, #1702]	; 0x6a6
	    _radio.packet_rx_last) {
    53bc:	f892 16a5 	ldrb.w	r1, [r2, #1701]	; 0x6a5
	if (_radio.packet_rx_acquire >=
    53c0:	428b      	cmp	r3, r1
			_radio.packet_rx_last +
    53c2:	bf38      	it	cc
    53c4:	f892 46a4 	ldrbcc.w	r4, [r2, #1700]	; 0x6a4
			_radio.packet_rx_last);
    53c8:	f892 16a5 	ldrb.w	r1, [r2, #1701]	; 0x6a5
			_radio.packet_rx_last +
    53cc:	bf38      	it	cc
    53ce:	191b      	addcc	r3, r3, r4
    53d0:	1a5b      	subs	r3, r3, r1
    53d2:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
    53d4:	4298      	cmp	r0, r3
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    53d6:	bf9d      	ittte	ls
    53d8:	f892 16a5 	ldrbls.w	r1, [r2, #1701]	; 0x6a5
    53dc:	f8d2 36a0 	ldrls.w	r3, [r2, #1696]	; 0x6a0
    53e0:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
		return 0;
    53e4:	2000      	movhi	r0, #0
}
    53e6:	bd10      	pop	{r4, pc}
    53e8:	200005b0 	.word	0x200005b0

000053ec <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    53ec:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    53ee:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
    53f2:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    53f6:	4299      	cmp	r1, r3
    53f8:	d128      	bne.n	544c <conn_update_req+0x60>
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    53fa:	f990 301d 	ldrsb.w	r3, [r0, #29]
    53fe:	2b00      	cmp	r3, #0
    5400:	db26      	blt.n	5450 <conn_update_req+0x64>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    5402:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    5404:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    5406:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    540a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    540c:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    5410:	4354      	muls	r4, r2
					      conn->supervision_reload *
    5412:	227d      	movs	r2, #125	; 0x7d
    5414:	4362      	muls	r2, r4
					      125 / 1000;
    5416:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    541a:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    541e:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    5422:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
		conn->llcp.conn_upd.win_size = 1;
    5426:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    5428:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    542c:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    542e:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    5430:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    5434:	3901      	subs	r1, #1
		conn->llcp.conn_upd.win_size = 1;
    5436:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
		conn->llcp.conn_upd.win_offset_us = 0;
    543a:	66c3      	str	r3, [r0, #108]	; 0x6c
		conn->llcp.conn_upd.is_internal = 1;
    543c:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
		conn->llcp_ack--;
    5440:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
		conn->llcp_type = LLCP_CONN_UPD;
    5444:	f880 505e 	strb.w	r5, [r0, #94]	; 0x5e

		return 0;
    5448:	4618      	mov	r0, r3
    544a:	bd30      	pop	{r4, r5, pc}
		return 1;
    544c:	2001      	movs	r0, #1
    544e:	bd30      	pop	{r4, r5, pc}
		return 0;
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    5450:	2002      	movs	r0, #2
}
    5452:	bd30      	pop	{r4, r5, pc}

00005454 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    5454:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    5458:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    545a:	4294      	cmp	r4, r2
{
    545c:	4681      	mov	r9, r0
    545e:	460f      	mov	r7, r1
    5460:	4690      	mov	r8, r2
	if (_first == last) {
    5462:	d03d      	beq.n	54e0 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    5464:	4e1f      	ldr	r6, [pc, #124]	; (54e4 <tx_cmplt_get+0x90>)
    5466:	f8d6 36d4 	ldr.w	r3, [r6, #1748]	; 0x6d4
    546a:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    546e:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    5470:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    5472:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    5476:	f506 6ad9 	add.w	sl, r6, #1736	; 0x6c8
		if (*handle != _radio.pkt_release[_first].handle) {
    547a:	b222      	sxth	r2, r4
    547c:	f8d6 06d4 	ldr.w	r0, [r6, #1748]	; 0x6d4
    5480:	f8b9 e000 	ldrh.w	lr, [r9]
    5484:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    5488:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    548c:	4596      	cmp	lr, r2
    548e:	d120      	bne.n	54d2 <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    5490:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    5492:	2801      	cmp	r0, #1
    5494:	f020 0303 	bic.w	r3, r0, #3
    5498:	d90a      	bls.n	54b0 <tx_cmplt_get+0x5c>
    549a:	b1f3      	cbz	r3, 54da <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    549c:	1d02      	adds	r2, r0, #4
    549e:	d01c      	beq.n	54da <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    54a0:	7942      	ldrb	r2, [r0, #5]
    54a2:	b1d2      	cbz	r2, 54da <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    54a4:	7902      	ldrb	r2, [r0, #4]
    54a6:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    54aa:	3a01      	subs	r2, #1
    54ac:	2a01      	cmp	r2, #1
    54ae:	d814      	bhi.n	54da <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    54b0:	2201      	movs	r2, #1
			cmplt++;
    54b2:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    54b4:	604a      	str	r2, [r1, #4]
			cmplt++;
    54b6:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    54b8:	b113      	cbz	r3, 54c0 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    54ba:	4651      	mov	r1, sl
    54bc:	f7fd ff8d 	bl	33da <mem_release>
		}

		_first = _first + 1;
    54c0:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    54c2:	f896 26d8 	ldrb.w	r2, [r6, #1752]	; 0x6d8
		_first = _first + 1;
    54c6:	b2e4      	uxtb	r4, r4
			_first = 0;
    54c8:	42a2      	cmp	r2, r4
    54ca:	bf08      	it	eq
    54cc:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    54ce:	4544      	cmp	r4, r8
    54d0:	d1d3      	bne.n	547a <tx_cmplt_get+0x26>

	*first = _first;
    54d2:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    54d4:	4628      	mov	r0, r5
    54d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    54da:	f8c1 b004 	str.w	fp, [r1, #4]
    54de:	e7eb      	b.n	54b8 <tx_cmplt_get+0x64>
		return 0;
    54e0:	2500      	movs	r5, #0
    54e2:	e7f7      	b.n	54d4 <tx_cmplt_get+0x80>
    54e4:	200005b0 	.word	0x200005b0

000054e8 <connection_get>:
{
    54e8:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    54ea:	4b09      	ldr	r3, [pc, #36]	; (5510 <connection_get+0x28>)
    54ec:	f893 267c 	ldrb.w	r2, [r3, #1660]	; 0x67c
    54f0:	4282      	cmp	r2, r0
{
    54f2:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    54f4:	d90a      	bls.n	550c <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    54f6:	4602      	mov	r2, r0
    54f8:	f44f 7182 	mov.w	r1, #260	; 0x104
    54fc:	f8d3 0674 	ldr.w	r0, [r3, #1652]	; 0x674
    5500:	f7fd ff80 	bl	3404 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    5504:	b110      	cbz	r0, 550c <connection_get+0x24>
    5506:	8c03      	ldrh	r3, [r0, #32]
    5508:	42a3      	cmp	r3, r4
    550a:	d000      	beq.n	550e <connection_get+0x26>
	return 0;
    550c:	2000      	movs	r0, #0
}
    550e:	bd10      	pop	{r4, pc}
    5510:	200005b0 	.word	0x200005b0

00005514 <role_disable>:
{
    5514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5518:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    551a:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    551c:	2805      	cmp	r0, #5
{
    551e:	4605      	mov	r5, r0
    5520:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    5522:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    5524:	d00c      	beq.n	5540 <role_disable+0x2c>
    5526:	2806      	cmp	r0, #6
    5528:	d040      	beq.n	55ac <role_disable+0x98>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    552a:	d945      	bls.n	55b8 <role_disable+0xa4>
			conn_handle = ticker_id_primary -
    552c:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    552e:	b280      	uxth	r0, r0
    5530:	f7ff ffda 	bl	54e8 <connection_get>
			if (!conn) {
    5534:	2800      	cmp	r0, #0
    5536:	f000 8123 	beq.w	5780 <role_disable+0x26c>
			ticks_active_to_start =
    553a:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    553e:	e00f      	b.n	5560 <role_disable+0x4c>
		ticks_xtal_to_start =
    5540:	4b90      	ldr	r3, [pc, #576]	; (5784 <role_disable+0x270>)
    5542:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    5544:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5548:	ab02      	add	r3, sp, #8
    554a:	9300      	str	r3, [sp, #0]
    554c:	460a      	mov	r2, r1
    554e:	4b8e      	ldr	r3, [pc, #568]	; (5788 <role_disable+0x274>)
    5550:	2103      	movs	r1, #3
    5552:	2000      	movs	r0, #0
    5554:	f7fe fe3c 	bl	41d0 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    5558:	2802      	cmp	r0, #2
    555a:	d011      	beq.n	5580 <role_disable+0x6c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    555c:	9b02      	ldr	r3, [sp, #8]
    555e:	b99b      	cbnz	r3, 5588 <role_disable+0x74>
	LL_ASSERT(!_radio.ticker_id_stop);
    5560:	4c88      	ldr	r4, [pc, #544]	; (5784 <role_disable+0x270>)
    5562:	7ca3      	ldrb	r3, [r4, #18]
    5564:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    5568:	2b00      	cmp	r3, #0
    556a:	d02d      	beq.n	55c8 <role_disable+0xb4>
    556c:	4b87      	ldr	r3, [pc, #540]	; (578c <role_disable+0x278>)
    556e:	9301      	str	r3, [sp, #4]
    5570:	9300      	str	r3, [sp, #0]
    5572:	4a87      	ldr	r2, [pc, #540]	; (5790 <role_disable+0x27c>)
    5574:	4b87      	ldr	r3, [pc, #540]	; (5794 <role_disable+0x280>)
    5576:	4988      	ldr	r1, [pc, #544]	; (5798 <role_disable+0x284>)
    5578:	4888      	ldr	r0, [pc, #544]	; (579c <role_disable+0x288>)
    557a:	e00f      	b.n	559c <role_disable+0x88>
				cpu_sleep();
    557c:	f7ff fece 	bl	531c <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    5580:	9b02      	ldr	r3, [sp, #8]
    5582:	2b02      	cmp	r3, #2
    5584:	d0fa      	beq.n	557c <role_disable+0x68>
    5586:	e7e9      	b.n	555c <role_disable+0x48>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    5588:	9b02      	ldr	r3, [sp, #8]
    558a:	2b01      	cmp	r3, #1
    558c:	d0e8      	beq.n	5560 <role_disable+0x4c>
    558e:	4b7f      	ldr	r3, [pc, #508]	; (578c <role_disable+0x278>)
    5590:	9301      	str	r3, [sp, #4]
    5592:	9300      	str	r3, [sp, #0]
    5594:	4a7e      	ldr	r2, [pc, #504]	; (5790 <role_disable+0x27c>)
    5596:	4b7f      	ldr	r3, [pc, #508]	; (5794 <role_disable+0x280>)
    5598:	497f      	ldr	r1, [pc, #508]	; (5798 <role_disable+0x284>)
    559a:	4881      	ldr	r0, [pc, #516]	; (57a0 <role_disable+0x28c>)
			LL_ASSERT(0);
    559c:	f7fb ff32 	bl	1404 <printk>
    55a0:	4040      	eors	r0, r0
    55a2:	f380 8811 	msr	BASEPRI, r0
    55a6:	f04f 0004 	mov.w	r0, #4
    55aa:	df02      	svc	2
		ticks_xtal_to_start =
    55ac:	4b75      	ldr	r3, [pc, #468]	; (5784 <role_disable+0x270>)
    55ae:	f8d3 663c 	ldr.w	r6, [r3, #1596]	; 0x63c
		ticks_active_to_start =
    55b2:	f8d3 8640 	ldr.w	r8, [r3, #1600]	; 0x640
		break;
    55b6:	e7d3      	b.n	5560 <role_disable+0x4c>
			LL_ASSERT(0);
    55b8:	4b74      	ldr	r3, [pc, #464]	; (578c <role_disable+0x278>)
    55ba:	9301      	str	r3, [sp, #4]
    55bc:	9300      	str	r3, [sp, #0]
    55be:	4b75      	ldr	r3, [pc, #468]	; (5794 <role_disable+0x280>)
    55c0:	4a73      	ldr	r2, [pc, #460]	; (5790 <role_disable+0x27c>)
    55c2:	4975      	ldr	r1, [pc, #468]	; (5798 <role_disable+0x284>)
    55c4:	4877      	ldr	r0, [pc, #476]	; (57a4 <role_disable+0x290>)
    55c6:	e7e9      	b.n	559c <role_disable+0x88>
	ret_cb = TICKER_STATUS_BUSY;
    55c8:	ab06      	add	r3, sp, #24
    55ca:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    55cc:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    55ce:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    55d2:	2103      	movs	r1, #3
    55d4:	9300      	str	r3, [sp, #0]
    55d6:	462a      	mov	r2, r5
    55d8:	4b6b      	ldr	r3, [pc, #428]	; (5788 <role_disable+0x274>)
    55da:	f7fe fdf9 	bl	41d0 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    55de:	2802      	cmp	r0, #2
    55e0:	d025      	beq.n	562e <role_disable+0x11a>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    55e2:	9b02      	ldr	r3, [sp, #8]
    55e4:	2b00      	cmp	r3, #0
    55e6:	d169      	bne.n	56bc <role_disable+0x1a8>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    55e8:	7c23      	ldrb	r3, [r4, #16]
    55ea:	429d      	cmp	r5, r3
    55ec:	d002      	beq.n	55f4 <role_disable+0xe0>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    55ee:	7c63      	ldrb	r3, [r4, #17]
    55f0:	429d      	cmp	r5, r3
    55f2:	d15f      	bne.n	56b4 <role_disable+0x1a0>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    55f4:	ab06      	add	r3, sp, #24
    55f6:	2202      	movs	r2, #2
    55f8:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    55fc:	2200      	movs	r2, #0
    55fe:	9300      	str	r3, [sp, #0]
    5600:	2103      	movs	r1, #3
    5602:	4b61      	ldr	r3, [pc, #388]	; (5788 <role_disable+0x274>)
    5604:	4610      	mov	r0, r2
    5606:	f7fe fde3 	bl	41d0 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    560a:	2802      	cmp	r0, #2
    560c:	d11d      	bne.n	564a <role_disable+0x136>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    560e:	2201      	movs	r2, #1
    5610:	4611      	mov	r1, r2
    5612:	2003      	movs	r0, #3
    5614:	f7fd ff58 	bl	34c8 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    5618:	9b03      	ldr	r3, [sp, #12]
    561a:	2b02      	cmp	r3, #2
    561c:	d115      	bne.n	564a <role_disable+0x136>
    561e:	4b5b      	ldr	r3, [pc, #364]	; (578c <role_disable+0x278>)
    5620:	9301      	str	r3, [sp, #4]
    5622:	9300      	str	r3, [sp, #0]
    5624:	4a5a      	ldr	r2, [pc, #360]	; (5790 <role_disable+0x27c>)
    5626:	4b60      	ldr	r3, [pc, #384]	; (57a8 <role_disable+0x294>)
    5628:	495b      	ldr	r1, [pc, #364]	; (5798 <role_disable+0x284>)
    562a:	4860      	ldr	r0, [pc, #384]	; (57ac <role_disable+0x298>)
    562c:	e7b6      	b.n	559c <role_disable+0x88>
		if (_radio.ticker_id_event == ticker_id_primary) {
    562e:	7c63      	ldrb	r3, [r4, #17]
    5630:	429d      	cmp	r5, r3
    5632:	d104      	bne.n	563e <role_disable+0x12a>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    5634:	2201      	movs	r2, #1
    5636:	4611      	mov	r1, r2
    5638:	2003      	movs	r0, #3
    563a:	f7fd ff45 	bl	34c8 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    563e:	9b02      	ldr	r3, [sp, #8]
    5640:	2b02      	cmp	r3, #2
    5642:	d1ce      	bne.n	55e2 <role_disable+0xce>
			cpu_sleep();
    5644:	f7ff fe6a 	bl	531c <cpu_sleep>
    5648:	e7f9      	b.n	563e <role_disable+0x12a>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    564a:	9803      	ldr	r0, [sp, #12]
    564c:	2800      	cmp	r0, #0
    564e:	d150      	bne.n	56f2 <role_disable+0x1de>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    5650:	2302      	movs	r3, #2
    5652:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    5654:	7c23      	ldrb	r3, [r4, #16]
    5656:	b93b      	cbnz	r3, 5668 <role_disable+0x154>
    5658:	4b4c      	ldr	r3, [pc, #304]	; (578c <role_disable+0x278>)
    565a:	9301      	str	r3, [sp, #4]
    565c:	9300      	str	r3, [sp, #0]
    565e:	4a4c      	ldr	r2, [pc, #304]	; (5790 <role_disable+0x27c>)
    5660:	4b51      	ldr	r3, [pc, #324]	; (57a8 <role_disable+0x294>)
    5662:	494d      	ldr	r1, [pc, #308]	; (5798 <role_disable+0x284>)
    5664:	4852      	ldr	r0, [pc, #328]	; (57b0 <role_disable+0x29c>)
    5666:	e799      	b.n	559c <role_disable+0x88>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5668:	ab04      	add	r3, sp, #16
    566a:	9300      	str	r3, [sp, #0]
    566c:	2201      	movs	r2, #1
    566e:	4b46      	ldr	r3, [pc, #280]	; (5788 <role_disable+0x274>)
		_radio.ticker_id_prepare = 0;
    5670:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5672:	2103      	movs	r1, #3
    5674:	f7fe fdac 	bl	41d0 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    5678:	2802      	cmp	r0, #2
    567a:	d10f      	bne.n	569c <role_disable+0x188>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    567c:	2201      	movs	r2, #1
    567e:	4611      	mov	r1, r2
    5680:	2003      	movs	r0, #3
    5682:	f7fd ff21 	bl	34c8 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    5686:	9b04      	ldr	r3, [sp, #16]
    5688:	2b02      	cmp	r3, #2
    568a:	d107      	bne.n	569c <role_disable+0x188>
    568c:	4b3f      	ldr	r3, [pc, #252]	; (578c <role_disable+0x278>)
    568e:	9301      	str	r3, [sp, #4]
    5690:	9300      	str	r3, [sp, #0]
    5692:	4a3f      	ldr	r2, [pc, #252]	; (5790 <role_disable+0x27c>)
    5694:	4b44      	ldr	r3, [pc, #272]	; (57a8 <role_disable+0x294>)
    5696:	4940      	ldr	r1, [pc, #256]	; (5798 <role_disable+0x284>)
    5698:	4846      	ldr	r0, [pc, #280]	; (57b4 <role_disable+0x2a0>)
    569a:	e77f      	b.n	559c <role_disable+0x88>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    569c:	9a04      	ldr	r2, [sp, #16]
    569e:	b99a      	cbnz	r2, 56c8 <role_disable+0x1b4>
			ticks_xtal_to_start &= ~XON_BITMASK;
    56a0:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    56a4:	45b0      	cmp	r8, r6
    56a6:	d922      	bls.n	56ee <role_disable+0x1da>
				ret = mayfly_enqueue(
    56a8:	4b43      	ldr	r3, [pc, #268]	; (57b8 <role_disable+0x2a4>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    56aa:	4611      	mov	r1, r2
    56ac:	2003      	movs	r0, #3
    56ae:	f7fd ff33 	bl	3518 <mayfly_enqueue>
			LL_ASSERT(!ret);
    56b2:	b9a0      	cbnz	r0, 56de <role_disable+0x1ca>
	if (!_radio.ticker_id_stop) {
    56b4:	7ca3      	ldrb	r3, [r4, #18]
    56b6:	b90b      	cbnz	r3, 56bc <role_disable+0x1a8>
		ret_cb = TICKER_STATUS_FAILURE;
    56b8:	2301      	movs	r3, #1
    56ba:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    56bc:	2300      	movs	r3, #0
    56be:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    56c0:	9802      	ldr	r0, [sp, #8]
}
    56c2:	b006      	add	sp, #24
    56c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    56c8:	9b04      	ldr	r3, [sp, #16]
    56ca:	2b01      	cmp	r3, #1
    56cc:	d153      	bne.n	5776 <role_disable+0x262>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    56ce:	2200      	movs	r2, #0
    56d0:	4611      	mov	r1, r2
    56d2:	4b39      	ldr	r3, [pc, #228]	; (57b8 <role_disable+0x2a4>)
    56d4:	2003      	movs	r0, #3
    56d6:	f7fd ff1f 	bl	3518 <mayfly_enqueue>
			LL_ASSERT(!ret);
    56da:	4602      	mov	r2, r0
    56dc:	b138      	cbz	r0, 56ee <role_disable+0x1da>
			LL_ASSERT(!ret);
    56de:	4b2b      	ldr	r3, [pc, #172]	; (578c <role_disable+0x278>)
    56e0:	9301      	str	r3, [sp, #4]
    56e2:	9300      	str	r3, [sp, #0]
    56e4:	4a2a      	ldr	r2, [pc, #168]	; (5790 <role_disable+0x27c>)
    56e6:	4b30      	ldr	r3, [pc, #192]	; (57a8 <role_disable+0x294>)
    56e8:	492b      	ldr	r1, [pc, #172]	; (5798 <role_disable+0x284>)
    56ea:	4834      	ldr	r0, [pc, #208]	; (57bc <role_disable+0x2a8>)
    56ec:	e756      	b.n	559c <role_disable+0x88>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    56ee:	4b34      	ldr	r3, [pc, #208]	; (57c0 <role_disable+0x2ac>)
    56f0:	e7db      	b.n	56aa <role_disable+0x196>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    56f2:	9d03      	ldr	r5, [sp, #12]
    56f4:	2d01      	cmp	r5, #1
    56f6:	d13e      	bne.n	5776 <role_disable+0x262>
		if (ticker_id_stop != TICKER_NULL) {
    56f8:	2fff      	cmp	r7, #255	; 0xff
    56fa:	d029      	beq.n	5750 <role_disable+0x23c>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    56fc:	ab06      	add	r3, sp, #24
    56fe:	2202      	movs	r2, #2
    5700:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5704:	2103      	movs	r1, #3
    5706:	9300      	str	r3, [sp, #0]
    5708:	463a      	mov	r2, r7
    570a:	4b1f      	ldr	r3, [pc, #124]	; (5788 <role_disable+0x274>)
    570c:	2000      	movs	r0, #0
    570e:	f7fe fd5f 	bl	41d0 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    5712:	2802      	cmp	r0, #2
    5714:	d10f      	bne.n	5736 <role_disable+0x222>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    5716:	462a      	mov	r2, r5
    5718:	4629      	mov	r1, r5
    571a:	2003      	movs	r0, #3
    571c:	f7fd fed4 	bl	34c8 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    5720:	9b05      	ldr	r3, [sp, #20]
    5722:	2b02      	cmp	r3, #2
    5724:	d107      	bne.n	5736 <role_disable+0x222>
    5726:	4b19      	ldr	r3, [pc, #100]	; (578c <role_disable+0x278>)
    5728:	9301      	str	r3, [sp, #4]
    572a:	9300      	str	r3, [sp, #0]
    572c:	4a18      	ldr	r2, [pc, #96]	; (5790 <role_disable+0x27c>)
    572e:	4b1e      	ldr	r3, [pc, #120]	; (57a8 <role_disable+0x294>)
    5730:	4919      	ldr	r1, [pc, #100]	; (5798 <role_disable+0x284>)
    5732:	4824      	ldr	r0, [pc, #144]	; (57c4 <role_disable+0x2b0>)
    5734:	e732      	b.n	559c <role_disable+0x88>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    5736:	9b05      	ldr	r3, [sp, #20]
    5738:	b153      	cbz	r3, 5750 <role_disable+0x23c>
    573a:	9b05      	ldr	r3, [sp, #20]
    573c:	2b01      	cmp	r3, #1
    573e:	d007      	beq.n	5750 <role_disable+0x23c>
    5740:	4b12      	ldr	r3, [pc, #72]	; (578c <role_disable+0x278>)
    5742:	9301      	str	r3, [sp, #4]
    5744:	9300      	str	r3, [sp, #0]
    5746:	4a12      	ldr	r2, [pc, #72]	; (5790 <role_disable+0x27c>)
    5748:	4b17      	ldr	r3, [pc, #92]	; (57a8 <role_disable+0x294>)
    574a:	4913      	ldr	r1, [pc, #76]	; (5798 <role_disable+0x284>)
    574c:	481e      	ldr	r0, [pc, #120]	; (57c8 <role_disable+0x2b4>)
    574e:	e725      	b.n	559c <role_disable+0x88>
		if (_radio.role != ROLE_NONE) {
    5750:	7ce3      	ldrb	r3, [r4, #19]
    5752:	2b00      	cmp	r3, #0
    5754:	d0ae      	beq.n	56b4 <role_disable+0x1a0>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    5756:	4b1d      	ldr	r3, [pc, #116]	; (57cc <role_disable+0x2b8>)
    5758:	2204      	movs	r2, #4
    575a:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    575c:	2200      	movs	r2, #0
    575e:	4611      	mov	r1, r2
    5760:	2003      	movs	r0, #3
    5762:	f7fd fed9 	bl	3518 <mayfly_enqueue>
			LL_ASSERT(!ret);
    5766:	2800      	cmp	r0, #0
    5768:	d1b9      	bne.n	56de <role_disable+0x1ca>
			while (_radio.role != ROLE_NONE) {
    576a:	7ce3      	ldrb	r3, [r4, #19]
    576c:	2b00      	cmp	r3, #0
    576e:	d0a1      	beq.n	56b4 <role_disable+0x1a0>
				cpu_sleep();
    5770:	f7ff fdd4 	bl	531c <cpu_sleep>
    5774:	e7f9      	b.n	576a <role_disable+0x256>
		LL_ASSERT(0);
    5776:	4b05      	ldr	r3, [pc, #20]	; (578c <role_disable+0x278>)
    5778:	9301      	str	r3, [sp, #4]
    577a:	9300      	str	r3, [sp, #0]
    577c:	4b0a      	ldr	r3, [pc, #40]	; (57a8 <role_disable+0x294>)
    577e:	e71f      	b.n	55c0 <role_disable+0xac>
				return 1;
    5780:	2001      	movs	r0, #1
    5782:	e79e      	b.n	56c2 <role_disable+0x1ae>
    5784:	200005b0 	.word	0x200005b0
    5788:	00005361 	.word	0x00005361
    578c:	0000ceef 	.word	0x0000ceef
    5790:	0000d7a6 	.word	0x0000d7a6
    5794:	0000e3bf 	.word	0x0000e3bf
    5798:	0000d71b 	.word	0x0000d71b
    579c:	0000eac7 	.word	0x0000eac7
    57a0:	0000ea87 	.word	0x0000ea87
    57a4:	0000d6b3 	.word	0x0000d6b3
    57a8:	0000e3ab 	.word	0x0000e3ab
    57ac:	0000eaff 	.word	0x0000eaff
    57b0:	0000eb30 	.word	0x0000eb30
    57b4:	0000eb6a 	.word	0x0000eb6a
    57b8:	20003ce8 	.word	0x20003ce8
    57bc:	0000eb9a 	.word	0x0000eb9a
    57c0:	20003d98 	.word	0x20003d98
    57c4:	0000ebc0 	.word	0x0000ebc0
    57c8:	0000ebf2 	.word	0x0000ebf2
    57cc:	20003d18 	.word	0x20003d18

000057d0 <mayfly_xtal_retain>:
{
    57d0:	b513      	push	{r0, r1, r4, lr}
    57d2:	4b1d      	ldr	r3, [pc, #116]	; (5848 <mayfly_xtal_retain+0x78>)
    57d4:	4604      	mov	r4, r0
		if (!s_xtal_retained) {
    57d6:	781a      	ldrb	r2, [r3, #0]
	if (retain) {
    57d8:	b301      	cbz	r1, 581c <mayfly_xtal_retain+0x4c>
		if (!s_xtal_retained) {
    57da:	2a00      	cmp	r2, #0
    57dc:	d132      	bne.n	5844 <mayfly_xtal_retain+0x74>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
    57de:	2801      	cmp	r0, #1
    57e0:	d00e      	beq.n	5800 <mayfly_xtal_retain+0x30>
    57e2:	4b1a      	ldr	r3, [pc, #104]	; (584c <mayfly_xtal_retain+0x7c>)
    57e4:	9301      	str	r3, [sp, #4]
    57e6:	9300      	str	r3, [sp, #0]
    57e8:	4a19      	ldr	r2, [pc, #100]	; (5850 <mayfly_xtal_retain+0x80>)
    57ea:	4b1a      	ldr	r3, [pc, #104]	; (5854 <mayfly_xtal_retain+0x84>)
    57ec:	491a      	ldr	r1, [pc, #104]	; (5858 <mayfly_xtal_retain+0x88>)
    57ee:	481b      	ldr	r0, [pc, #108]	; (585c <mayfly_xtal_retain+0x8c>)
			LL_ASSERT(!retval);
    57f0:	f7fb fe08 	bl	1404 <printk>
    57f4:	4040      	eors	r0, r0
    57f6:	f380 8811 	msr	BASEPRI, r0
    57fa:	f04f 0004 	mov.w	r0, #4
    57fe:	df02      	svc	2
			s_xtal_retained = 1;
    5800:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
    5802:	4b17      	ldr	r3, [pc, #92]	; (5860 <mayfly_xtal_retain+0x90>)
    5804:	4611      	mov	r1, r2
    5806:	f7fd fe87 	bl	3518 <mayfly_enqueue>
			LL_ASSERT(!retval);
    580a:	b1d8      	cbz	r0, 5844 <mayfly_xtal_retain+0x74>
    580c:	4b0f      	ldr	r3, [pc, #60]	; (584c <mayfly_xtal_retain+0x7c>)
    580e:	9301      	str	r3, [sp, #4]
    5810:	9300      	str	r3, [sp, #0]
    5812:	4a0f      	ldr	r2, [pc, #60]	; (5850 <mayfly_xtal_retain+0x80>)
    5814:	4b0f      	ldr	r3, [pc, #60]	; (5854 <mayfly_xtal_retain+0x84>)
    5816:	4910      	ldr	r1, [pc, #64]	; (5858 <mayfly_xtal_retain+0x88>)
    5818:	4812      	ldr	r0, [pc, #72]	; (5864 <mayfly_xtal_retain+0x94>)
    581a:	e7e9      	b.n	57f0 <mayfly_xtal_retain+0x20>
		if (s_xtal_retained) {
    581c:	b192      	cbz	r2, 5844 <mayfly_xtal_retain+0x74>
			s_xtal_retained = 0;
    581e:	7019      	strb	r1, [r3, #0]
			switch (caller_id) {
    5820:	b170      	cbz	r0, 5840 <mayfly_xtal_retain+0x70>
    5822:	2801      	cmp	r0, #1
    5824:	d104      	bne.n	5830 <mayfly_xtal_retain+0x60>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    5826:	4b10      	ldr	r3, [pc, #64]	; (5868 <mayfly_xtal_retain+0x98>)
			retval = mayfly_enqueue(caller_id,
    5828:	2200      	movs	r2, #0
    582a:	4611      	mov	r1, r2
    582c:	4620      	mov	r0, r4
    582e:	e7ea      	b.n	5806 <mayfly_xtal_retain+0x36>
				LL_ASSERT(0);
    5830:	4b06      	ldr	r3, [pc, #24]	; (584c <mayfly_xtal_retain+0x7c>)
    5832:	9301      	str	r3, [sp, #4]
    5834:	9300      	str	r3, [sp, #0]
    5836:	4a06      	ldr	r2, [pc, #24]	; (5850 <mayfly_xtal_retain+0x80>)
    5838:	4b06      	ldr	r3, [pc, #24]	; (5854 <mayfly_xtal_retain+0x84>)
    583a:	4907      	ldr	r1, [pc, #28]	; (5858 <mayfly_xtal_retain+0x88>)
    583c:	480b      	ldr	r0, [pc, #44]	; (586c <mayfly_xtal_retain+0x9c>)
    583e:	e7d7      	b.n	57f0 <mayfly_xtal_retain+0x20>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    5840:	4b0b      	ldr	r3, [pc, #44]	; (5870 <mayfly_xtal_retain+0xa0>)
    5842:	e7f1      	b.n	5828 <mayfly_xtal_retain+0x58>
}
    5844:	b002      	add	sp, #8
    5846:	bd10      	pop	{r4, pc}
    5848:	20000d30 	.word	0x20000d30
    584c:	0000ceef 	.word	0x0000ceef
    5850:	0000d7a6 	.word	0x0000d7a6
    5854:	0000e18d 	.word	0x0000e18d
    5858:	0000d71b 	.word	0x0000d71b
    585c:	0000e8e1 	.word	0x0000e8e1
    5860:	20003d58 	.word	0x20003d58
    5864:	0000e911 	.word	0x0000e911
    5868:	20003d78 	.word	0x20003d78
    586c:	0000d6b3 	.word	0x0000d6b3
    5870:	20003d68 	.word	0x20003d68

00005874 <chan_set>:
{
    5874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pdu = (void *)_radio.advertiser.adv_data.data
    5878:	4b56      	ldr	r3, [pc, #344]	; (59d4 <chan_set+0x160>)
    587a:	f893 222c 	ldrb.w	r2, [r3, #556]	; 0x22c
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    587e:	eb02 2202 	add.w	r2, r2, r2, lsl #8
    5882:	4413      	add	r3, r2
{
    5884:	4604      	mov	r4, r0
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    5886:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    588a:	f003 030f 	and.w	r3, r3, #15
    588e:	2b07      	cmp	r3, #7
    5890:	f040 8089 	bne.w	59a6 <chan_set+0x132>
		switch (chan) {
    5894:	2826      	cmp	r0, #38	; 0x26
    5896:	f8df b17c 	ldr.w	fp, [pc, #380]	; 5a14 <chan_set+0x1a0>
    589a:	d014      	beq.n	58c6 <chan_set+0x52>
    589c:	2827      	cmp	r0, #39	; 0x27
    589e:	d01f      	beq.n	58e0 <chan_set+0x6c>
    58a0:	2825      	cmp	r0, #37	; 0x25
    58a2:	4d4d      	ldr	r5, [pc, #308]	; (59d8 <chan_set+0x164>)
    58a4:	d13f      	bne.n	5926 <chan_set+0xb2>
			start_time = k_cycle_get_32();
    58a6:	f7fc fb05 	bl	1eb4 <_timer_cycle_get_32>
    58aa:	f8cb 0000 	str.w	r0, [fp]
			start_time37= k_cycle_get_32();
    58ae:	f7fc fb01 	bl	1eb4 <_timer_cycle_get_32>
    58b2:	4b4a      	ldr	r3, [pc, #296]	; (59dc <chan_set+0x168>)
    58b4:	6018      	str	r0, [r3, #0]
			pckt_send++;
    58b6:	782b      	ldrb	r3, [r5, #0]
    58b8:	3301      	adds	r3, #1
    58ba:	702b      	strb	r3, [r5, #0]
			AUX_PACKET = 1;
    58bc:	4b48      	ldr	r3, [pc, #288]	; (59e0 <chan_set+0x16c>)
    58be:	2201      	movs	r2, #1
    58c0:	701a      	strb	r2, [r3, #0]
			radio_freq_chan_set(2);
    58c2:	2002      	movs	r0, #2
    58c4:	e063      	b.n	598e <chan_set+0x11a>
			start_time = k_cycle_get_32();
    58c6:	f7fc faf5 	bl	1eb4 <_timer_cycle_get_32>
			AUX_PACKET = 1;
    58ca:	4b45      	ldr	r3, [pc, #276]	; (59e0 <chan_set+0x16c>)
			start_time = k_cycle_get_32();
    58cc:	f8cb 0000 	str.w	r0, [fp]
			AUX_PACKET = 1;
    58d0:	2201      	movs	r2, #1
    58d2:	701a      	strb	r2, [r3, #0]
			pckt_send++;
    58d4:	4a40      	ldr	r2, [pc, #256]	; (59d8 <chan_set+0x164>)
    58d6:	7813      	ldrb	r3, [r2, #0]
    58d8:	3301      	adds	r3, #1
    58da:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(26);
    58dc:	201a      	movs	r0, #26
    58de:	e056      	b.n	598e <chan_set+0x11a>
			stop_time_39 = k_cycle_get_32();
    58e0:	f7fc fae8 	bl	1eb4 <_timer_cycle_get_32>
    58e4:	4b3f      	ldr	r3, [pc, #252]	; (59e4 <chan_set+0x170>)
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    58e6:	4a40      	ldr	r2, [pc, #256]	; (59e8 <chan_set+0x174>)
			stop_time_39 = k_cycle_get_32();
    58e8:	6018      	str	r0, [r3, #0]
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    58ea:	6816      	ldr	r6, [r2, #0]
    58ec:	f8db 3000 	ldr.w	r3, [fp]
    58f0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    58f4:	1ac3      	subs	r3, r0, r3
    58f6:	fb86 6705 	smull	r6, r7, r6, r5
    58fa:	fba3 0106 	umull	r0, r1, r3, r6
    58fe:	fb03 1107 	mla	r1, r3, r7, r1
    5902:	4b3a      	ldr	r3, [pc, #232]	; (59ec <chan_set+0x178>)
    5904:	681a      	ldr	r2, [r3, #0]
    5906:	17d3      	asrs	r3, r2, #31
    5908:	f7fa fcae 	bl	268 <__aeabi_uldivmod>
    590c:	4b38      	ldr	r3, [pc, #224]	; (59f0 <chan_set+0x17c>)
    590e:	fbb0 f0f5 	udiv	r0, r0, r5
    5912:	6018      	str	r0, [r3, #0]
			start_time = k_cycle_get_32();
    5914:	f7fc face 	bl	1eb4 <_timer_cycle_get_32>
			AUX_PACKET = 1;
    5918:	4b31      	ldr	r3, [pc, #196]	; (59e0 <chan_set+0x16c>)
			start_time = k_cycle_get_32();
    591a:	f8cb 0000 	str.w	r0, [fp]
			AUX_PACKET = 1;
    591e:	2201      	movs	r2, #1
    5920:	701a      	strb	r2, [r3, #0]
			radio_freq_chan_set(80);
    5922:	2050      	movs	r0, #80	; 0x50
    5924:	e033      	b.n	598e <chan_set+0x11a>
			pckt_send = 0;	
    5926:	2300      	movs	r3, #0
    5928:	702b      	strb	r3, [r5, #0]
			stop_time_aux1 = k_cycle_get_32();
    592a:	f7fc fac3 	bl	1eb4 <_timer_cycle_get_32>
    592e:	4b31      	ldr	r3, [pc, #196]	; (59f4 <chan_set+0x180>)
    5930:	6018      	str	r0, [r3, #0]
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    5932:	4b2d      	ldr	r3, [pc, #180]	; (59e8 <chan_set+0x174>)
    5934:	681e      	ldr	r6, [r3, #0]
    5936:	4b2d      	ldr	r3, [pc, #180]	; (59ec <chan_set+0x178>)
    5938:	681b      	ldr	r3, [r3, #0]
    593a:	4698      	mov	r8, r3
    593c:	ea4f 79e3 	mov.w	r9, r3, asr #31
    5940:	f8db 3000 	ldr.w	r3, [fp]
    5944:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    5948:	fb86 670a 	smull	r6, r7, r6, sl
    594c:	1ac3      	subs	r3, r0, r3
			stop_time_aux1 = k_cycle_get_32();
    594e:	4605      	mov	r5, r0
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    5950:	fba3 0106 	umull	r0, r1, r3, r6
    5954:	fb03 1107 	mla	r1, r3, r7, r1
    5958:	4642      	mov	r2, r8
    595a:	464b      	mov	r3, r9
    595c:	f7fa fc84 	bl	268 <__aeabi_uldivmod>
    5960:	4b25      	ldr	r3, [pc, #148]	; (59f8 <chan_set+0x184>)
    5962:	fbb0 f0fa 	udiv	r0, r0, sl
    5966:	6018      	str	r0, [r3, #0]
			us_spent_aux = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time37)/1000;
    5968:	4b1c      	ldr	r3, [pc, #112]	; (59dc <chan_set+0x168>)
    596a:	681b      	ldr	r3, [r3, #0]
    596c:	1aed      	subs	r5, r5, r3
    596e:	fba5 0106 	umull	r0, r1, r5, r6
    5972:	464b      	mov	r3, r9
    5974:	fb05 1107 	mla	r1, r5, r7, r1
    5978:	4642      	mov	r2, r8
    597a:	f7fa fc75 	bl	268 <__aeabi_uldivmod>
    597e:	4b1f      	ldr	r3, [pc, #124]	; (59fc <chan_set+0x188>)
    5980:	fbb0 f0fa 	udiv	r0, r0, sl
    5984:	6018      	str	r0, [r3, #0]
			if (chan < 11) {
    5986:	2c0a      	cmp	r4, #10
    5988:	d809      	bhi.n	599e <chan_set+0x12a>
				radio_freq_chan_set(4 + (2 * chan));
    598a:	1ca0      	adds	r0, r4, #2
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    598c:	0040      	lsls	r0, r0, #1
    598e:	f005 fae7 	bl	af60 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    5992:	4620      	mov	r0, r4
}
    5994:	b003      	add	sp, #12
    5996:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_whiten_iv_set(chan);
    599a:	f005 bae7 	b.w	af6c <radio_whiten_iv_set>
			} else if (chan < 40) {
    599e:	2c27      	cmp	r4, #39	; 0x27
    59a0:	d808      	bhi.n	59b4 <chan_set+0x140>
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    59a2:	1ce0      	adds	r0, r4, #3
    59a4:	e7f2      	b.n	598c <chan_set+0x118>
		switch (chan) {
    59a6:	2826      	cmp	r0, #38	; 0x26
    59a8:	d098      	beq.n	58dc <chan_set+0x68>
    59aa:	2827      	cmp	r0, #39	; 0x27
    59ac:	d0b9      	beq.n	5922 <chan_set+0xae>
    59ae:	2825      	cmp	r0, #37	; 0x25
    59b0:	d1e9      	bne.n	5986 <chan_set+0x112>
    59b2:	e786      	b.n	58c2 <chan_set+0x4e>
				LL_ASSERT(0);
    59b4:	4b12      	ldr	r3, [pc, #72]	; (5a00 <chan_set+0x18c>)
    59b6:	9301      	str	r3, [sp, #4]
    59b8:	9300      	str	r3, [sp, #0]
    59ba:	4a12      	ldr	r2, [pc, #72]	; (5a04 <chan_set+0x190>)
    59bc:	4b12      	ldr	r3, [pc, #72]	; (5a08 <chan_set+0x194>)
    59be:	4913      	ldr	r1, [pc, #76]	; (5a0c <chan_set+0x198>)
    59c0:	4813      	ldr	r0, [pc, #76]	; (5a10 <chan_set+0x19c>)
    59c2:	f7fb fd1f 	bl	1404 <printk>
    59c6:	4040      	eors	r0, r0
    59c8:	f380 8811 	msr	BASEPRI, r0
    59cc:	f04f 0004 	mov.w	r0, #4
    59d0:	df02      	svc	2
    59d2:	bf00      	nop
    59d4:	200005b0 	.word	0x200005b0
    59d8:	20000cd4 	.word	0x20000cd4
    59dc:	20001ba0 	.word	0x20001ba0
    59e0:	200005ac 	.word	0x200005ac
    59e4:	20001ba4 	.word	0x20001ba4
    59e8:	20003e14 	.word	0x20003e14
    59ec:	20003e10 	.word	0x20003e10
    59f0:	20001bbc 	.word	0x20001bbc
    59f4:	20001bc4 	.word	0x20001bc4
    59f8:	20001bac 	.word	0x20001bac
    59fc:	20001b9c 	.word	0x20001b9c
    5a00:	0000ceef 	.word	0x0000ceef
    5a04:	0000d7a6 	.word	0x0000d7a6
    5a08:	0000e23b 	.word	0x0000e23b
    5a0c:	0000d71b 	.word	0x0000d71b
    5a10:	0000d6b3 	.word	0x0000d6b3
    5a14:	20001ba8 	.word	0x20001ba8

00005a18 <adv_setup>:
{
    5a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (_radio.advertiser.adv_data.first !=
    5a1a:	4c6c      	ldr	r4, [pc, #432]	; (5bcc <adv_setup+0x1b4>)
    5a1c:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    5a20:	f894 222d 	ldrb.w	r2, [r4, #557]	; 0x22d
    5a24:	429a      	cmp	r2, r3
    5a26:	d006      	beq.n	5a36 <adv_setup+0x1e>
		first = _radio.advertiser.adv_data.first + 1;
    5a28:	3301      	adds	r3, #1
    5a2a:	b2db      	uxtb	r3, r3
			first = 0;
    5a2c:	2b02      	cmp	r3, #2
    5a2e:	bf08      	it	eq
    5a30:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    5a32:	f884 322c 	strb.w	r3, [r4, #556]	; 0x22c
	if (_radio.advertiser.scan_data.first != _radio.
    5a36:	f894 3634 	ldrb.w	r3, [r4, #1588]	; 0x634
    5a3a:	f894 2635 	ldrb.w	r2, [r4, #1589]	; 0x635
    5a3e:	429a      	cmp	r2, r3
    5a40:	d006      	beq.n	5a50 <adv_setup+0x38>
		first = _radio.advertiser.scan_data.first + 1;
    5a42:	3301      	adds	r3, #1
    5a44:	b2db      	uxtb	r3, r3
			first = 0;
    5a46:	2b02      	cmp	r3, #2
    5a48:	bf08      	it	eq
    5a4a:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    5a4c:	f884 3634 	strb.w	r3, [r4, #1588]	; 0x634
	pdu = (void *)_radio.advertiser.adv_data.data
    5a50:	f894 522c 	ldrb.w	r5, [r4, #556]	; 0x22c
    5a54:	eb05 2505 	add.w	r5, r5, r5, lsl #8
    5a58:	352a      	adds	r5, #42	; 0x2a
    5a5a:	1960      	adds	r0, r4, r5
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    5a5c:	5d63      	ldrb	r3, [r4, r5]
    5a5e:	f003 030f 	and.w	r3, r3, #15
    5a62:	2b07      	cmp	r3, #7
    5a64:	d172      	bne.n	5b4c <adv_setup+0x134>
		if((pdu->type == PDU_ADV_TYPE_EXT_IND) && !(_radio.advertiser.chan_map_current == 0)){
    5a66:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
						[_radio.advertiser.aux_adv_data.last];
    5a6a:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
		if((pdu->type == PDU_ADV_TYPE_EXT_IND) && !(_radio.advertiser.chan_map_current == 0)){
    5a6e:	f016 0607 	ands.w	r6, r6, #7
    5a72:	f000 808f 	beq.w	5b94 <adv_setup+0x17c>
			if(h->adv_addr){
    5a76:	78c3      	ldrb	r3, [r0, #3]
    5a78:	07df      	lsls	r7, r3, #31
				ptr += BDADDR_SIZE;
    5a7a:	bf4c      	ite	mi
    5a7c:	f100 020a 	addmi.w	r2, r0, #10
		ptr = (u8_t *)h + sizeof(*h);
    5a80:	1d02      	addpl	r2, r0, #4
			if(h->tgt_addr){
    5a82:	079e      	lsls	r6, r3, #30
				ptr += BDADDR_SIZE;
    5a84:	bf48      	it	mi
    5a86:	3206      	addmi	r2, #6
			if(h->adi){
    5a88:	0719      	lsls	r1, r3, #28
				ptr += sizeof(*adi_ptr);
    5a8a:	bf48      	it	mi
    5a8c:	3202      	addmi	r2, #2
			if(h->aux_ptr){
    5a8e:	06db      	lsls	r3, r3, #27
    5a90:	d510      	bpl.n	5ab4 <adv_setup+0x9c>
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    5a92:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
	size = pdu->len + 2;
    5a96:	7843      	ldrb	r3, [r0, #1]
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    5a98:	f3c1 01c2 	ubfx	r1, r1, #3, #3
	final_pckt_size = (size + 1 + 4 + 3)*8 ; 
    5a9c:	00db      	lsls	r3, r3, #3
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    5a9e:	2907      	cmp	r1, #7
	final_pckt_size = (size + 1 + 4 + 3)*8 ; 
    5aa0:	f103 0350 	add.w	r3, r3, #80	; 0x50
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    5aa4:	d145      	bne.n	5b32 <adv_setup+0x11a>
					switch(pckt_send){
    5aa6:	494a      	ldr	r1, [pc, #296]	; (5bd0 <adv_setup+0x1b8>)
    5aa8:	7809      	ldrb	r1, [r1, #0]
    5aaa:	2901      	cmp	r1, #1
    5aac:	d03d      	beq.n	5b2a <adv_setup+0x112>
    5aae:	d32c      	bcc.n	5b0a <adv_setup+0xf2>
    5ab0:	2902      	cmp	r1, #2
    5ab2:	d03e      	beq.n	5b32 <adv_setup+0x11a>
				radio_pkt_tx_set(pdu);
    5ab4:	f005 fab8 	bl	b028 <radio_pkt_tx_set>
			if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    5ab8:	5d63      	ldrb	r3, [r4, r5]
    5aba:	f003 030f 	and.w	r3, r3, #15
    5abe:	2202      	movs	r2, #2
    5ac0:	2b02      	cmp	r3, #2
				_radio.state = STATE_TX;
    5ac2:	7522      	strb	r2, [r4, #20]
			if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    5ac4:	d038      	beq.n	5b38 <adv_setup+0x120>
    5ac6:	2b07      	cmp	r3, #7
    5ac8:	d036      	beq.n	5b38 <adv_setup+0x120>
				radio_tmr_tifs_set(RADIO_TIFS);
    5aca:	2096      	movs	r0, #150	; 0x96
    5acc:	f005 fbb6 	bl	b23c <radio_tmr_tifs_set>
				radio_switch_complete_and_rx(0);
    5ad0:	2000      	movs	r0, #0
    5ad2:	f005 fb23 	bl	b11c <radio_switch_complete_and_rx>
			bitmap = _radio.advertiser.chan_map_current;
    5ad6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    5ada:	f3c3 0202 	ubfx	r2, r3, #0, #3
    5ade:	b2d3      	uxtb	r3, r2
    5ae0:	4619      	mov	r1, r3
			while ((bitmap & 0x01) == 0) {
    5ae2:	2000      	movs	r0, #0
    5ae4:	07cf      	lsls	r7, r1, #31
    5ae6:	f100 0501 	add.w	r5, r0, #1
    5aea:	d52c      	bpl.n	5b46 <adv_setup+0x12e>
		count++;
    5aec:	4d39      	ldr	r5, [pc, #228]	; (5bd4 <adv_setup+0x1bc>)
			(_radio.advertiser.chan_map_current - 1);
    5aee:	3b01      	subs	r3, #1
		count++;
    5af0:	7829      	ldrb	r1, [r5, #0]
			_radio.advertiser.chan_map_current &=
    5af2:	4013      	ands	r3, r2
    5af4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
		count++;
    5af8:	3101      	adds	r1, #1
			_radio.advertiser.chan_map_current &=
    5afa:	f363 0202 	bfi	r2, r3, #0, #3
			chan_set(37 + chan);
    5afe:	b2c0      	uxtb	r0, r0
		count++;
    5b00:	7029      	strb	r1, [r5, #0]
			_radio.advertiser.chan_map_current &=
    5b02:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
			chan_set(37 + chan);
    5b06:	3025      	adds	r0, #37	; 0x25
    5b08:	e05b      	b.n	5bc2 <adv_setup+0x1aa>
						ap->offs = ((final_pckt_size + 300 + 120)*3)/30;  
    5b0a:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
    5b0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
					ap->offs = (final_pckt_size + 300 + 120)/30;
    5b12:	211e      	movs	r1, #30
    5b14:	fb93 f3f1 	sdiv	r3, r3, r1
    5b18:	7891      	ldrb	r1, [r2, #2]
    5b1a:	7053      	strb	r3, [r2, #1]
    5b1c:	f021 011f 	bic.w	r1, r1, #31
    5b20:	f3c3 2304 	ubfx	r3, r3, #8, #5
    5b24:	430b      	orrs	r3, r1
    5b26:	7093      	strb	r3, [r2, #2]
    5b28:	e7c4      	b.n	5ab4 <adv_setup+0x9c>
						ap->offs = ((final_pckt_size + 300 + 120)*2)/30;		
    5b2a:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
    5b2e:	005b      	lsls	r3, r3, #1
    5b30:	e7ef      	b.n	5b12 <adv_setup+0xfa>
					ap->offs = (final_pckt_size + 300 + 120)/30;
    5b32:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
    5b36:	e7ec      	b.n	5b12 <adv_setup+0xfa>
				radio_tmr_tifs_set(RADIO_TMAFS);
    5b38:	f44f 7096 	mov.w	r0, #300	; 0x12c
    5b3c:	f005 fb7e 	bl	b23c <radio_tmr_tifs_set>
				radio_switch_complete_and_disable();
    5b40:	f005 fb02 	bl	b148 <radio_switch_complete_and_disable>
    5b44:	e7c7      	b.n	5ad6 <adv_setup+0xbe>
				bitmap >>= 1;
    5b46:	0849      	lsrs	r1, r1, #1
    5b48:	4628      	mov	r0, r5
    5b4a:	e7cb      	b.n	5ae4 <adv_setup+0xcc>
		radio_pkt_tx_set(pdu);
    5b4c:	f005 fa6c 	bl	b028 <radio_pkt_tx_set>
		if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    5b50:	5d63      	ldrb	r3, [r4, r5]
    5b52:	f003 030f 	and.w	r3, r3, #15
    5b56:	2b02      	cmp	r3, #2
    5b58:	d017      	beq.n	5b8a <adv_setup+0x172>
    5b5a:	2b07      	cmp	r3, #7
    5b5c:	d015      	beq.n	5b8a <adv_setup+0x172>
			_radio.state = STATE_TX;
    5b5e:	2302      	movs	r3, #2
			radio_tmr_tifs_set(RADIO_TIFS);
    5b60:	2096      	movs	r0, #150	; 0x96
			_radio.state = STATE_TX;
    5b62:	7523      	strb	r3, [r4, #20]
			radio_tmr_tifs_set(RADIO_TIFS);
    5b64:	f005 fb6a 	bl	b23c <radio_tmr_tifs_set>
			radio_switch_complete_and_rx(0);
    5b68:	2000      	movs	r0, #0
    5b6a:	f005 fad7 	bl	b11c <radio_switch_complete_and_rx>
		bitmap = _radio.advertiser.chan_map_current;
    5b6e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    5b72:	f3c3 0202 	ubfx	r2, r3, #0, #3
    5b76:	b2d3      	uxtb	r3, r2
    5b78:	4619      	mov	r1, r3
		while ((bitmap & 0x01) == 0) {
    5b7a:	2000      	movs	r0, #0
    5b7c:	07ce      	lsls	r6, r1, #31
    5b7e:	f100 0501 	add.w	r5, r0, #1
    5b82:	d4b3      	bmi.n	5aec <adv_setup+0xd4>
			bitmap >>= 1;
    5b84:	0849      	lsrs	r1, r1, #1
    5b86:	4628      	mov	r0, r5
    5b88:	e7f8      	b.n	5b7c <adv_setup+0x164>
			_radio.state = STATE_CLOSE;
    5b8a:	2303      	movs	r3, #3
    5b8c:	7523      	strb	r3, [r4, #20]
			radio_switch_complete_and_disable();
    5b8e:	f005 fadb 	bl	b148 <radio_switch_complete_and_disable>
    5b92:	e7ec      	b.n	5b6e <adv_setup+0x156>
		if(!((_radio.advertiser.chan_map_current == 0) && (AUX_PACKET == 1))){
    5b94:	4f10      	ldr	r7, [pc, #64]	; (5bd8 <adv_setup+0x1c0>)
    5b96:	783a      	ldrb	r2, [r7, #0]
    5b98:	2a01      	cmp	r2, #1
    5b9a:	d18b      	bne.n	5ab4 <adv_setup+0x9c>
	aux_pdu = (void *)_radio.advertiser.aux_adv_data.data
    5b9c:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    5ba0:	f203 202e 	addw	r0, r3, #558	; 0x22e
			radio_pkt_tx_set(aux_pdu);
    5ba4:	4420      	add	r0, r4
    5ba6:	f005 fa3f 	bl	b028 <radio_pkt_tx_set>
			_radio.state = STATE_CLOSE;
    5baa:	2503      	movs	r5, #3
			radio_tmr_tifs_set(RADIO_TMAFS);
    5bac:	f44f 7096 	mov.w	r0, #300	; 0x12c
			_radio.state = STATE_CLOSE;
    5bb0:	7525      	strb	r5, [r4, #20]
			radio_tmr_tifs_set(RADIO_TMAFS);
    5bb2:	f005 fb43 	bl	b23c <radio_tmr_tifs_set>
			radio_switch_complete_and_disable();
    5bb6:	f005 fac7 	bl	b148 <radio_switch_complete_and_disable>
			pckt_send = 0;
    5bba:	4b05      	ldr	r3, [pc, #20]	; (5bd0 <adv_setup+0x1b8>)
			AUX_PACKET = 0;
    5bbc:	703e      	strb	r6, [r7, #0]
			pckt_send = 0;
    5bbe:	701e      	strb	r6, [r3, #0]
			chan_set(3);
    5bc0:	4628      	mov	r0, r5
}
    5bc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			chan_set(37 + chan);
    5bc6:	f7ff be55 	b.w	5874 <chan_set>
    5bca:	bf00      	nop
    5bcc:	200005b0 	.word	0x200005b0
    5bd0:	20000cd4 	.word	0x20000cd4
    5bd4:	20000ca0 	.word	0x20000ca0
    5bd8:	200005ac 	.word	0x200005ac
    5bdc:	00000000 	.word	0x00000000

00005be0 <sched_after_mstr_free_slot_get>:
{
    5be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5be4:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    5be6:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    5be8:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    5bea:	f8df 9140 	ldr.w	r9, [pc, #320]	; 5d2c <sched_after_mstr_free_slot_get+0x14c>
	ticker_id = ticker_id_prev = 0xff;
    5bee:	f88d 501f 	strb.w	r5, [sp, #31]
{
    5bf2:	4680      	mov	r8, r0
    5bf4:	4693      	mov	fp, r2
    5bf6:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    5bf8:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    5bfc:	601c      	str	r4, [r3, #0]
    5bfe:	9408      	str	r4, [sp, #32]
    5c00:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    5c02:	2302      	movs	r3, #2
    5c04:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    5c06:	ab09      	add	r3, sp, #36	; 0x24
    5c08:	9302      	str	r3, [sp, #8]
    5c0a:	4b41      	ldr	r3, [pc, #260]	; (5d10 <sched_after_mstr_free_slot_get+0x130>)
    5c0c:	9301      	str	r3, [sp, #4]
    5c0e:	ab08      	add	r3, sp, #32
    5c10:	9300      	str	r3, [sp, #0]
    5c12:	f10d 021f 	add.w	r2, sp, #31
    5c16:	465b      	mov	r3, fp
    5c18:	4641      	mov	r1, r8
    5c1a:	2000      	movs	r0, #0
    5c1c:	f7fe fb14 	bl	4248 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    5c20:	2802      	cmp	r0, #2
    5c22:	d014      	beq.n	5c4e <sched_after_mstr_free_slot_get+0x6e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    5c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5c26:	b1b3      	cbz	r3, 5c56 <sched_after_mstr_free_slot_get+0x76>
    5c28:	4b3a      	ldr	r3, [pc, #232]	; (5d14 <sched_after_mstr_free_slot_get+0x134>)
    5c2a:	9301      	str	r3, [sp, #4]
    5c2c:	9300      	str	r3, [sp, #0]
    5c2e:	4a3a      	ldr	r2, [pc, #232]	; (5d18 <sched_after_mstr_free_slot_get+0x138>)
    5c30:	4b3a      	ldr	r3, [pc, #232]	; (5d1c <sched_after_mstr_free_slot_get+0x13c>)
    5c32:	493b      	ldr	r1, [pc, #236]	; (5d20 <sched_after_mstr_free_slot_get+0x140>)
    5c34:	483b      	ldr	r0, [pc, #236]	; (5d24 <sched_after_mstr_free_slot_get+0x144>)
    5c36:	f7fb fbe5 	bl	1404 <printk>
    5c3a:	4040      	eors	r0, r0
    5c3c:	f380 8811 	msr	BASEPRI, r0
    5c40:	f04f 0004 	mov.w	r0, #4
    5c44:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    5c46:	4641      	mov	r1, r8
    5c48:	2000      	movs	r0, #0
    5c4a:	f7fe fb7b 	bl	4344 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    5c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5c50:	2b02      	cmp	r3, #2
    5c52:	d0f8      	beq.n	5c46 <sched_after_mstr_free_slot_get+0x66>
    5c54:	e7e6      	b.n	5c24 <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    5c56:	f89d 201f 	ldrb.w	r2, [sp, #31]
    5c5a:	2aff      	cmp	r2, #255	; 0xff
    5c5c:	d04e      	beq.n	5cfc <sched_after_mstr_free_slot_get+0x11c>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    5c5e:	2a06      	cmp	r2, #6
    5c60:	d9cf      	bls.n	5c02 <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    5c62:	f899 367c 	ldrb.w	r3, [r9, #1660]	; 0x67c
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    5c66:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    5c68:	429a      	cmp	r2, r3
    5c6a:	daca      	bge.n	5c02 <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    5c6c:	3a07      	subs	r2, #7
    5c6e:	b292      	uxth	r2, r2
    5c70:	f44f 7182 	mov.w	r1, #260	; 0x104
    5c74:	f8d9 0674 	ldr.w	r0, [r9, #1652]	; 0x674
    5c78:	f7fd fbc4 	bl	3404 <mem_get>
		if (conn && !conn->role) {
    5c7c:	2800      	cmp	r0, #0
    5c7e:	d0c0      	beq.n	5c02 <sched_after_mstr_free_slot_get+0x22>
    5c80:	f990 301d 	ldrsb.w	r3, [r0, #29]
    5c84:	2b00      	cmp	r3, #0
    5c86:	dbbc      	blt.n	5c02 <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    5c88:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    5c8a:	9a08      	ldr	r2, [sp, #32]
    5c8c:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    5c90:	2b00      	cmp	r3, #0
    5c92:	da12      	bge.n	5cba <sched_after_mstr_free_slot_get+0xda>
    5c94:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    5c96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    5c9a:	4571      	cmp	r1, lr
    5c9c:	bf2c      	ite	cs
    5c9e:	1852      	addcs	r2, r2, r1
    5ca0:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    5ca2:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    5ca4:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    5ca6:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    5ca8:	f101 0104 	add.w	r1, r1, #4
    5cac:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    5cae:	d108      	bne.n	5cc2 <sched_after_mstr_free_slot_get+0xe2>
			ticker_id_prev = ticker_id;
    5cb0:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    5cb4:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    5cb6:	4616      	mov	r6, r2
    5cb8:	e7a3      	b.n	5c02 <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    5cba:	4573      	cmp	r3, lr
    5cbc:	bf38      	it	cc
    5cbe:	4673      	movcc	r3, lr
    5cc0:	e7f0      	b.n	5ca4 <sched_after_mstr_free_slot_get+0xc4>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    5cc2:	4631      	mov	r1, r6
    5cc4:	4610      	mov	r0, r2
    5cc6:	9305      	str	r3, [sp, #20]
    5cc8:	9204      	str	r2, [sp, #16]
    5cca:	f7fe fb53 	bl	4374 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    5cce:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    5cd2:	4288      	cmp	r0, r1
    5cd4:	9a04      	ldr	r2, [sp, #16]
    5cd6:	9b05      	ldr	r3, [sp, #20]
    5cd8:	d9ea      	bls.n	5cb0 <sched_after_mstr_free_slot_get+0xd0>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    5cda:	4813      	ldr	r0, [pc, #76]	; (5d28 <sched_after_mstr_free_slot_get+0x148>)
    5cdc:	4434      	add	r4, r6
    5cde:	fba4 0100 	umull	r0, r1, r4, r0
    5ce2:	2307      	movs	r3, #7
    5ce4:	fb03 1104 	mla	r1, r3, r4, r1
    5ce8:	a307      	add	r3, pc, #28	; (adr r3, 5d08 <sched_after_mstr_free_slot_get+0x128>)
    5cea:	e9d3 2300 	ldrd	r2, r3, [r3]
    5cee:	f7fa fabb 	bl	268 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    5cf2:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    5cf4:	6038      	str	r0, [r7, #0]
}
    5cf6:	b00b      	add	sp, #44	; 0x2c
    5cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    5cfc:	2dff      	cmp	r5, #255	; 0xff
    5cfe:	d1ec      	bne.n	5cda <sched_after_mstr_free_slot_get+0xfa>
    5d00:	e7f9      	b.n	5cf6 <sched_after_mstr_free_slot_get+0x116>
    5d02:	bf00      	nop
    5d04:	f3af 8000 	nop.w
    5d08:	3b9aca00 	.word	0x3b9aca00
    5d0c:	00000000 	.word	0x00000000
    5d10:	00005361 	.word	0x00005361
    5d14:	0000ceef 	.word	0x0000ceef
    5d18:	0000d7a6 	.word	0x0000d7a6
    5d1c:	0000e1c9 	.word	0x0000e1c9
    5d20:	0000d71b 	.word	0x0000d71b
    5d24:	0000ec95 	.word	0x0000ec95
    5d28:	1afd498d 	.word	0x1afd498d
    5d2c:	200005b0 	.word	0x200005b0

00005d30 <isr_adv_ci_adva_check>:
{
    5d30:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    5d32:	7804      	ldrb	r4, [r0, #0]
    5d34:	780a      	ldrb	r2, [r1, #0]
    5d36:	f3c4 1380 	ubfx	r3, r4, #6, #1
    5d3a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    5d3e:	d119      	bne.n	5d74 <isr_adv_ci_adva_check+0x44>
    5d40:	f004 040f 	and.w	r4, r4, #15
    5d44:	2c01      	cmp	r4, #1
    5d46:	f101 0608 	add.w	r6, r1, #8
    5d4a:	f100 0502 	add.w	r5, r0, #2
    5d4e:	d008      	beq.n	5d62 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    5d50:	2206      	movs	r2, #6
    5d52:	4631      	mov	r1, r6
    5d54:	4628      	mov	r0, r5
    5d56:	f7fa fc3a 	bl	5ce <memcmp>
			 BDADDR_SIZE)) ||
    5d5a:	fab0 f080 	clz	r0, r0
    5d5e:	0940      	lsrs	r0, r0, #5
    5d60:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    5d62:	2206      	movs	r2, #6
    5d64:	4631      	mov	r1, r6
    5d66:	4628      	mov	r0, r5
    5d68:	f7fa fc31 	bl	5ce <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    5d6c:	2800      	cmp	r0, #0
    5d6e:	d1ef      	bne.n	5d50 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    5d70:	4620      	mov	r0, r4
    5d72:	bd70      	pop	{r4, r5, r6, pc}
    5d74:	2000      	movs	r0, #0
}
    5d76:	bd70      	pop	{r4, r5, r6, pc}

00005d78 <packet_rx_enqueue>:
{
    5d78:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    5d7a:	4a1e      	ldr	r2, [pc, #120]	; (5df4 <packet_rx_enqueue+0x7c>)
    5d7c:	f892 36a5 	ldrb.w	r3, [r2, #1701]	; 0x6a5
    5d80:	f892 16a6 	ldrb.w	r1, [r2, #1702]	; 0x6a6
    5d84:	4299      	cmp	r1, r3
    5d86:	d10e      	bne.n	5da6 <packet_rx_enqueue+0x2e>
    5d88:	4b1b      	ldr	r3, [pc, #108]	; (5df8 <packet_rx_enqueue+0x80>)
    5d8a:	9301      	str	r3, [sp, #4]
    5d8c:	9300      	str	r3, [sp, #0]
    5d8e:	4a1b      	ldr	r2, [pc, #108]	; (5dfc <packet_rx_enqueue+0x84>)
    5d90:	4b1b      	ldr	r3, [pc, #108]	; (5e00 <packet_rx_enqueue+0x88>)
    5d92:	491c      	ldr	r1, [pc, #112]	; (5e04 <packet_rx_enqueue+0x8c>)
    5d94:	481c      	ldr	r0, [pc, #112]	; (5e08 <packet_rx_enqueue+0x90>)
	LL_ASSERT(link);
    5d96:	f7fb fb35 	bl	1404 <printk>
    5d9a:	4040      	eors	r0, r0
    5d9c:	f380 8811 	msr	BASEPRI, r0
    5da0:	f04f 0004 	mov.w	r0, #4
    5da4:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    5da6:	f892 16a5 	ldrb.w	r1, [r2, #1701]	; 0x6a5
    5daa:	f8d2 36a0 	ldr.w	r3, [r2, #1696]	; 0x6a0
    5dae:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    5db2:	f892 36dc 	ldrb.w	r3, [r2, #1756]	; 0x6dc
	link = node_rx->hdr.onion.link;
    5db6:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    5db8:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    5dba:	f892 36a5 	ldrb.w	r3, [r2, #1701]	; 0x6a5
	if (last == _radio.packet_rx_count) {
    5dbe:	f892 46a4 	ldrb.w	r4, [r2, #1700]	; 0x6a4
	last = _radio.packet_rx_last + 1;
    5dc2:	3301      	adds	r3, #1
    5dc4:	b2db      	uxtb	r3, r3
		last = 0;
    5dc6:	429c      	cmp	r4, r3
    5dc8:	bf08      	it	eq
    5dca:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    5dcc:	f882 36a5 	strb.w	r3, [r2, #1701]	; 0x6a5
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    5dd0:	f202 62b4 	addw	r2, r2, #1716	; 0x6b4
    5dd4:	f7fd fb30 	bl	3438 <memq_enqueue>
	LL_ASSERT(link);
    5dd8:	b938      	cbnz	r0, 5dea <packet_rx_enqueue+0x72>
    5dda:	4b07      	ldr	r3, [pc, #28]	; (5df8 <packet_rx_enqueue+0x80>)
    5ddc:	9301      	str	r3, [sp, #4]
    5dde:	9300      	str	r3, [sp, #0]
    5de0:	4a06      	ldr	r2, [pc, #24]	; (5dfc <packet_rx_enqueue+0x84>)
    5de2:	4b07      	ldr	r3, [pc, #28]	; (5e00 <packet_rx_enqueue+0x88>)
    5de4:	4907      	ldr	r1, [pc, #28]	; (5e04 <packet_rx_enqueue+0x8c>)
    5de6:	4809      	ldr	r0, [pc, #36]	; (5e0c <packet_rx_enqueue+0x94>)
    5de8:	e7d5      	b.n	5d96 <packet_rx_enqueue+0x1e>
}
    5dea:	b002      	add	sp, #8
    5dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    5df0:	f004 baa6 	b.w	a340 <radio_event_callback>
    5df4:	200005b0 	.word	0x200005b0
    5df8:	0000ceef 	.word	0x0000ceef
    5dfc:	0000d7a6 	.word	0x0000d7a6
    5e00:	0000e33d 	.word	0x0000e33d
    5e04:	0000d71b 	.word	0x0000d71b
    5e08:	0000e98e 	.word	0x0000e98e
    5e0c:	0000e9e1 	.word	0x0000e9e1

00005e10 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    5e10:	4a0b      	ldr	r2, [pc, #44]	; (5e40 <rx_fc_lock+0x30>)
    5e12:	f892 36e4 	ldrb.w	r3, [r2, #1764]	; 0x6e4
    5e16:	f892 16e5 	ldrb.w	r1, [r2, #1765]	; 0x6e5
    5e1a:	4299      	cmp	r1, r3
    5e1c:	d10e      	bne.n	5e3c <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    5e1e:	f892 36e4 	ldrb.w	r3, [r2, #1764]	; 0x6e4
    5e22:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    5e26:	f8a3 06de 	strh.w	r0, [r3, #1758]	; 0x6de
		req = _radio.fc_req + 1;
    5e2a:	f892 36e4 	ldrb.w	r3, [r2, #1764]	; 0x6e4
    5e2e:	3301      	adds	r3, #1
    5e30:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    5e32:	2b03      	cmp	r3, #3
    5e34:	bf08      	it	eq
    5e36:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    5e38:	f882 36e4 	strb.w	r3, [r2, #1764]	; 0x6e4
    5e3c:	4770      	bx	lr
    5e3e:	bf00      	nop
    5e40:	200005b0 	.word	0x200005b0

00005e44 <ticker_success_assert>:
{
    5e44:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    5e46:	b170      	cbz	r0, 5e66 <ticker_success_assert+0x22>
    5e48:	4b08      	ldr	r3, [pc, #32]	; (5e6c <ticker_success_assert+0x28>)
    5e4a:	9301      	str	r3, [sp, #4]
    5e4c:	9300      	str	r3, [sp, #0]
    5e4e:	4a08      	ldr	r2, [pc, #32]	; (5e70 <ticker_success_assert+0x2c>)
    5e50:	4b08      	ldr	r3, [pc, #32]	; (5e74 <ticker_success_assert+0x30>)
    5e52:	4909      	ldr	r1, [pc, #36]	; (5e78 <ticker_success_assert+0x34>)
    5e54:	4809      	ldr	r0, [pc, #36]	; (5e7c <ticker_success_assert+0x38>)
    5e56:	f7fb fad5 	bl	1404 <printk>
    5e5a:	4040      	eors	r0, r0
    5e5c:	f380 8811 	msr	BASEPRI, r0
    5e60:	f04f 0004 	mov.w	r0, #4
    5e64:	df02      	svc	2
}
    5e66:	b003      	add	sp, #12
    5e68:	f85d fb04 	ldr.w	pc, [sp], #4
    5e6c:	0000ceef 	.word	0x0000ceef
    5e70:	0000d7a6 	.word	0x0000d7a6
    5e74:	0000e0d9 	.word	0x0000e0d9
    5e78:	0000d71b 	.word	0x0000d71b
    5e7c:	0000edb5 	.word	0x0000edb5

00005e80 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    5e80:	2801      	cmp	r0, #1
{
    5e82:	b507      	push	{r0, r1, r2, lr}
    5e84:	4b11      	ldr	r3, [pc, #68]	; (5ecc <ticker_stop_adv_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    5e86:	d116      	bne.n	5eb6 <ticker_stop_adv_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    5e88:	7c9a      	ldrb	r2, [r3, #18]
    5e8a:	2a05      	cmp	r2, #5
    5e8c:	d104      	bne.n	5e98 <ticker_stop_adv_assert+0x18>
			_radio.ticker_id_stop = 0;
    5e8e:	2200      	movs	r2, #0
    5e90:	749a      	strb	r2, [r3, #18]
}
    5e92:	b003      	add	sp, #12
    5e94:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    5e98:	4b0d      	ldr	r3, [pc, #52]	; (5ed0 <ticker_stop_adv_assert+0x50>)
    5e9a:	9301      	str	r3, [sp, #4]
    5e9c:	9300      	str	r3, [sp, #0]
    5e9e:	4a0d      	ldr	r2, [pc, #52]	; (5ed4 <ticker_stop_adv_assert+0x54>)
    5ea0:	4b0d      	ldr	r3, [pc, #52]	; (5ed8 <ticker_stop_adv_assert+0x58>)
    5ea2:	490e      	ldr	r1, [pc, #56]	; (5edc <ticker_stop_adv_assert+0x5c>)
    5ea4:	480e      	ldr	r0, [pc, #56]	; (5ee0 <ticker_stop_adv_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    5ea6:	f7fb faad 	bl	1404 <printk>
    5eaa:	4040      	eors	r0, r0
    5eac:	f380 8811 	msr	BASEPRI, r0
    5eb0:	f04f 0004 	mov.w	r0, #4
    5eb4:	df02      	svc	2
    5eb6:	7c1b      	ldrb	r3, [r3, #16]
    5eb8:	2b05      	cmp	r3, #5
    5eba:	d1ea      	bne.n	5e92 <ticker_stop_adv_assert+0x12>
    5ebc:	4b04      	ldr	r3, [pc, #16]	; (5ed0 <ticker_stop_adv_assert+0x50>)
    5ebe:	9301      	str	r3, [sp, #4]
    5ec0:	9300      	str	r3, [sp, #0]
    5ec2:	4a04      	ldr	r2, [pc, #16]	; (5ed4 <ticker_stop_adv_assert+0x54>)
    5ec4:	4b04      	ldr	r3, [pc, #16]	; (5ed8 <ticker_stop_adv_assert+0x58>)
    5ec6:	4905      	ldr	r1, [pc, #20]	; (5edc <ticker_stop_adv_assert+0x5c>)
    5ec8:	4806      	ldr	r0, [pc, #24]	; (5ee4 <ticker_stop_adv_assert+0x64>)
    5eca:	e7ec      	b.n	5ea6 <ticker_stop_adv_assert+0x26>
    5ecc:	200005b0 	.word	0x200005b0
    5ed0:	0000ceef 	.word	0x0000ceef
    5ed4:	0000d7a6 	.word	0x0000d7a6
    5ed8:	0000e0ef 	.word	0x0000e0ef
    5edc:	0000d71b 	.word	0x0000d71b
    5ee0:	0000d6b3 	.word	0x0000d6b3
    5ee4:	0000ecfb 	.word	0x0000ecfb

00005ee8 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    5ee8:	2801      	cmp	r0, #1
{
    5eea:	b507      	push	{r0, r1, r2, lr}
    5eec:	4b11      	ldr	r3, [pc, #68]	; (5f34 <ticker_stop_scan_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    5eee:	d116      	bne.n	5f1e <ticker_stop_scan_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    5ef0:	7c9a      	ldrb	r2, [r3, #18]
    5ef2:	2a06      	cmp	r2, #6
    5ef4:	d104      	bne.n	5f00 <ticker_stop_scan_assert+0x18>
			_radio.ticker_id_stop = 0;
    5ef6:	2200      	movs	r2, #0
    5ef8:	749a      	strb	r2, [r3, #18]
}
    5efa:	b003      	add	sp, #12
    5efc:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    5f00:	4b0d      	ldr	r3, [pc, #52]	; (5f38 <ticker_stop_scan_assert+0x50>)
    5f02:	9301      	str	r3, [sp, #4]
    5f04:	9300      	str	r3, [sp, #0]
    5f06:	4a0d      	ldr	r2, [pc, #52]	; (5f3c <ticker_stop_scan_assert+0x54>)
    5f08:	4b0d      	ldr	r3, [pc, #52]	; (5f40 <ticker_stop_scan_assert+0x58>)
    5f0a:	490e      	ldr	r1, [pc, #56]	; (5f44 <ticker_stop_scan_assert+0x5c>)
    5f0c:	480e      	ldr	r0, [pc, #56]	; (5f48 <ticker_stop_scan_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    5f0e:	f7fb fa79 	bl	1404 <printk>
    5f12:	4040      	eors	r0, r0
    5f14:	f380 8811 	msr	BASEPRI, r0
    5f18:	f04f 0004 	mov.w	r0, #4
    5f1c:	df02      	svc	2
    5f1e:	7c1b      	ldrb	r3, [r3, #16]
    5f20:	2b06      	cmp	r3, #6
    5f22:	d1ea      	bne.n	5efa <ticker_stop_scan_assert+0x12>
    5f24:	4b04      	ldr	r3, [pc, #16]	; (5f38 <ticker_stop_scan_assert+0x50>)
    5f26:	9301      	str	r3, [sp, #4]
    5f28:	9300      	str	r3, [sp, #0]
    5f2a:	4a04      	ldr	r2, [pc, #16]	; (5f3c <ticker_stop_scan_assert+0x54>)
    5f2c:	4b04      	ldr	r3, [pc, #16]	; (5f40 <ticker_stop_scan_assert+0x58>)
    5f2e:	4905      	ldr	r1, [pc, #20]	; (5f44 <ticker_stop_scan_assert+0x5c>)
    5f30:	4806      	ldr	r0, [pc, #24]	; (5f4c <ticker_stop_scan_assert+0x64>)
    5f32:	e7ec      	b.n	5f0e <ticker_stop_scan_assert+0x26>
    5f34:	200005b0 	.word	0x200005b0
    5f38:	0000ceef 	.word	0x0000ceef
    5f3c:	0000d7a6 	.word	0x0000d7a6
    5f40:	0000e106 	.word	0x0000e106
    5f44:	0000d71b 	.word	0x0000d71b
    5f48:	0000d6b3 	.word	0x0000d6b3
    5f4c:	0000ed76 	.word	0x0000ed76

00005f50 <ticker_update_adv_assert>:
{
    5f50:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    5f52:	b190      	cbz	r0, 5f7a <ticker_update_adv_assert+0x2a>
    5f54:	4b0a      	ldr	r3, [pc, #40]	; (5f80 <ticker_update_adv_assert+0x30>)
    5f56:	7c9b      	ldrb	r3, [r3, #18]
    5f58:	2b05      	cmp	r3, #5
    5f5a:	d00e      	beq.n	5f7a <ticker_update_adv_assert+0x2a>
    5f5c:	4b09      	ldr	r3, [pc, #36]	; (5f84 <ticker_update_adv_assert+0x34>)
    5f5e:	9301      	str	r3, [sp, #4]
    5f60:	9300      	str	r3, [sp, #0]
    5f62:	4a09      	ldr	r2, [pc, #36]	; (5f88 <ticker_update_adv_assert+0x38>)
    5f64:	4b09      	ldr	r3, [pc, #36]	; (5f8c <ticker_update_adv_assert+0x3c>)
    5f66:	490a      	ldr	r1, [pc, #40]	; (5f90 <ticker_update_adv_assert+0x40>)
    5f68:	480a      	ldr	r0, [pc, #40]	; (5f94 <ticker_update_adv_assert+0x44>)
    5f6a:	f7fb fa4b 	bl	1404 <printk>
    5f6e:	4040      	eors	r0, r0
    5f70:	f380 8811 	msr	BASEPRI, r0
    5f74:	f04f 0004 	mov.w	r0, #4
    5f78:	df02      	svc	2
}
    5f7a:	b003      	add	sp, #12
    5f7c:	f85d fb04 	ldr.w	pc, [sp], #4
    5f80:	200005b0 	.word	0x200005b0
    5f84:	0000ceef 	.word	0x0000ceef
    5f88:	0000d7a6 	.word	0x0000d7a6
    5f8c:	0000e11e 	.word	0x0000e11e
    5f90:	0000d71b 	.word	0x0000d71b
    5f94:	0000ede2 	.word	0x0000ede2

00005f98 <ticker_update_slave_assert>:
{
    5f98:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    5f9a:	b198      	cbz	r0, 5fc4 <ticker_update_slave_assert+0x2c>
    5f9c:	4b0b      	ldr	r3, [pc, #44]	; (5fcc <ticker_update_slave_assert+0x34>)
    5f9e:	7c9b      	ldrb	r3, [r3, #18]
    5fa0:	b2c9      	uxtb	r1, r1
    5fa2:	4299      	cmp	r1, r3
    5fa4:	d00e      	beq.n	5fc4 <ticker_update_slave_assert+0x2c>
    5fa6:	4b0a      	ldr	r3, [pc, #40]	; (5fd0 <ticker_update_slave_assert+0x38>)
    5fa8:	9301      	str	r3, [sp, #4]
    5faa:	9300      	str	r3, [sp, #0]
    5fac:	4a09      	ldr	r2, [pc, #36]	; (5fd4 <ticker_update_slave_assert+0x3c>)
    5fae:	4b0a      	ldr	r3, [pc, #40]	; (5fd8 <ticker_update_slave_assert+0x40>)
    5fb0:	490a      	ldr	r1, [pc, #40]	; (5fdc <ticker_update_slave_assert+0x44>)
    5fb2:	480b      	ldr	r0, [pc, #44]	; (5fe0 <ticker_update_slave_assert+0x48>)
    5fb4:	f7fb fa26 	bl	1404 <printk>
    5fb8:	4040      	eors	r0, r0
    5fba:	f380 8811 	msr	BASEPRI, r0
    5fbe:	f04f 0004 	mov.w	r0, #4
    5fc2:	df02      	svc	2
}
    5fc4:	b003      	add	sp, #12
    5fc6:	f85d fb04 	ldr.w	pc, [sp], #4
    5fca:	bf00      	nop
    5fcc:	200005b0 	.word	0x200005b0
    5fd0:	0000ceef 	.word	0x0000ceef
    5fd4:	0000d7a6 	.word	0x0000d7a6
    5fd8:	0000e137 	.word	0x0000e137
    5fdc:	0000d71b 	.word	0x0000d71b
    5fe0:	0000ee31 	.word	0x0000ee31

00005fe4 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    5fe4:	4b04      	ldr	r3, [pc, #16]	; (5ff8 <ticker_job_disable+0x14>)
    5fe6:	7d1b      	ldrb	r3, [r3, #20]
    5fe8:	b123      	cbz	r3, 5ff4 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    5fea:	2101      	movs	r1, #1
    5fec:	2200      	movs	r2, #0
    5fee:	4608      	mov	r0, r1
    5ff0:	f7fd ba6a 	b.w	34c8 <mayfly_enable>
    5ff4:	4770      	bx	lr
    5ff6:	bf00      	nop
    5ff8:	200005b0 	.word	0x200005b0

00005ffc <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    5ffc:	2806      	cmp	r0, #6
{
    5ffe:	b510      	push	{r4, lr}
    6000:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    6002:	d90a      	bls.n	601a <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    6004:	4b09      	ldr	r3, [pc, #36]	; (602c <hdr_conn_get+0x30>)
    6006:	1fc2      	subs	r2, r0, #7
    6008:	b292      	uxth	r2, r2
    600a:	f44f 7182 	mov.w	r1, #260	; 0x104
    600e:	f8d3 0674 	ldr.w	r0, [r3, #1652]	; 0x674
    6012:	f7fd f9f7 	bl	3404 <mem_get>
    6016:	6020      	str	r0, [r4, #0]
    6018:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    601a:	2805      	cmp	r0, #5
    601c:	d004      	beq.n	6028 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    601e:	2806      	cmp	r0, #6
	return NULL;
    6020:	4803      	ldr	r0, [pc, #12]	; (6030 <hdr_conn_get+0x34>)
    6022:	bf18      	it	ne
    6024:	2000      	movne	r0, #0
    6026:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    6028:	4802      	ldr	r0, [pc, #8]	; (6034 <hdr_conn_get+0x38>)
}
    602a:	bd10      	pop	{r4, pc}
    602c:	200005b0 	.word	0x200005b0
    6030:	20000bec 	.word	0x20000bec
    6034:	200005c8 	.word	0x200005c8

00006038 <event_stop.part.12>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    6038:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(!retval);
    603a:	4b07      	ldr	r3, [pc, #28]	; (6058 <event_stop.part.12+0x20>)
    603c:	9301      	str	r3, [sp, #4]
    603e:	9300      	str	r3, [sp, #0]
    6040:	4a06      	ldr	r2, [pc, #24]	; (605c <event_stop.part.12+0x24>)
    6042:	4b07      	ldr	r3, [pc, #28]	; (6060 <event_stop.part.12+0x28>)
    6044:	4907      	ldr	r1, [pc, #28]	; (6064 <event_stop.part.12+0x2c>)
    6046:	4808      	ldr	r0, [pc, #32]	; (6068 <event_stop.part.12+0x30>)
    6048:	f7fb f9dc 	bl	1404 <printk>
    604c:	4040      	eors	r0, r0
    604e:	f380 8811 	msr	BASEPRI, r0
    6052:	f04f 0004 	mov.w	r0, #4
    6056:	df02      	svc	2
    6058:	0000ceef 	.word	0x0000ceef
    605c:	0000d7a6 	.word	0x0000d7a6
    6060:	0000e21b 	.word	0x0000e21b
    6064:	0000d71b 	.word	0x0000d71b
    6068:	0000e911 	.word	0x0000e911

0000606c <event_stop>:
	s_mfy_radio_stop.param = context;
    606c:	4a06      	ldr	r2, [pc, #24]	; (6088 <event_stop+0x1c>)
{
    606e:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    6070:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6072:	4613      	mov	r3, r2
    6074:	2200      	movs	r2, #0
    6076:	4611      	mov	r1, r2
    6078:	4610      	mov	r0, r2
    607a:	f7fd fa4d 	bl	3518 <mayfly_enqueue>
	LL_ASSERT(!retval);
    607e:	b108      	cbz	r0, 6084 <event_stop+0x18>
    6080:	f7ff ffda 	bl	6038 <event_stop.part.12>
    6084:	bd08      	pop	{r3, pc}
    6086:	bf00      	nop
    6088:	20003cf8 	.word	0x20003cf8

0000608c <event_active>:
{
    608c:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    608e:	2200      	movs	r2, #0
    6090:	4b0b      	ldr	r3, [pc, #44]	; (60c0 <event_active+0x34>)
    6092:	4611      	mov	r1, r2
    6094:	4610      	mov	r0, r2
    6096:	f7fd fa3f 	bl	3518 <mayfly_enqueue>
	LL_ASSERT(!retval);
    609a:	b170      	cbz	r0, 60ba <event_active+0x2e>
    609c:	4b09      	ldr	r3, [pc, #36]	; (60c4 <event_active+0x38>)
    609e:	9301      	str	r3, [sp, #4]
    60a0:	9300      	str	r3, [sp, #0]
    60a2:	4a09      	ldr	r2, [pc, #36]	; (60c8 <event_active+0x3c>)
    60a4:	4b09      	ldr	r3, [pc, #36]	; (60cc <event_active+0x40>)
    60a6:	490a      	ldr	r1, [pc, #40]	; (60d0 <event_active+0x44>)
    60a8:	480a      	ldr	r0, [pc, #40]	; (60d4 <event_active+0x48>)
    60aa:	f7fb f9ab 	bl	1404 <printk>
    60ae:	4040      	eors	r0, r0
    60b0:	f380 8811 	msr	BASEPRI, r0
    60b4:	f04f 0004 	mov.w	r0, #4
    60b8:	df02      	svc	2
}
    60ba:	b003      	add	sp, #12
    60bc:	f85d fb04 	ldr.w	pc, [sp], #4
    60c0:	20003cb8 	.word	0x20003cb8
    60c4:	0000ceef 	.word	0x0000ceef
    60c8:	0000d7a6 	.word	0x0000d7a6
    60cc:	0000e166 	.word	0x0000e166
    60d0:	0000d71b 	.word	0x0000d71b
    60d4:	0000e911 	.word	0x0000e911

000060d8 <event_xtal>:
{
    60d8:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    60da:	2200      	movs	r2, #0
    60dc:	4b0b      	ldr	r3, [pc, #44]	; (610c <event_xtal+0x34>)
    60de:	4611      	mov	r1, r2
    60e0:	4610      	mov	r0, r2
    60e2:	f7fd fa19 	bl	3518 <mayfly_enqueue>
	LL_ASSERT(!retval);
    60e6:	b170      	cbz	r0, 6106 <event_xtal+0x2e>
    60e8:	4b09      	ldr	r3, [pc, #36]	; (6110 <event_xtal+0x38>)
    60ea:	9301      	str	r3, [sp, #4]
    60ec:	9300      	str	r3, [sp, #0]
    60ee:	4a09      	ldr	r2, [pc, #36]	; (6114 <event_xtal+0x3c>)
    60f0:	4b09      	ldr	r3, [pc, #36]	; (6118 <event_xtal+0x40>)
    60f2:	490a      	ldr	r1, [pc, #40]	; (611c <event_xtal+0x44>)
    60f4:	480a      	ldr	r0, [pc, #40]	; (6120 <event_xtal+0x48>)
    60f6:	f7fb f985 	bl	1404 <printk>
    60fa:	4040      	eors	r0, r0
    60fc:	f380 8811 	msr	BASEPRI, r0
    6100:	f04f 0004 	mov.w	r0, #4
    6104:	df02      	svc	2
}
    6106:	b003      	add	sp, #12
    6108:	f85d fb04 	ldr.w	pc, [sp], #4
    610c:	20003d48 	.word	0x20003d48
    6110:	0000ceef 	.word	0x0000ceef
    6114:	0000d7a6 	.word	0x0000d7a6
    6118:	0000e182 	.word	0x0000e182
    611c:	0000d71b 	.word	0x0000d71b
    6120:	0000e911 	.word	0x0000e911

00006124 <mayfly_radio_active>:
{
    6124:	b507      	push	{r0, r1, r2, lr}
    6126:	4a12      	ldr	r2, [pc, #72]	; (6170 <mayfly_radio_active+0x4c>)
		if (s_active++) {
    6128:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    612a:	b140      	cbz	r0, 613e <mayfly_radio_active+0x1a>
		if (s_active++) {
    612c:	1c59      	adds	r1, r3, #1
    612e:	7011      	strb	r1, [r2, #0]
    6130:	b9d3      	cbnz	r3, 6168 <mayfly_radio_active+0x44>
		radio_active_callback(1);
    6132:	2001      	movs	r0, #1
}
    6134:	b003      	add	sp, #12
    6136:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_active_callback(0);
    613a:	f004 b8ff 	b.w	a33c <radio_active_callback>
		LL_ASSERT(s_active);
    613e:	b973      	cbnz	r3, 615e <mayfly_radio_active+0x3a>
    6140:	4b0c      	ldr	r3, [pc, #48]	; (6174 <mayfly_radio_active+0x50>)
    6142:	9301      	str	r3, [sp, #4]
    6144:	9300      	str	r3, [sp, #0]
    6146:	4a0c      	ldr	r2, [pc, #48]	; (6178 <mayfly_radio_active+0x54>)
    6148:	4b0c      	ldr	r3, [pc, #48]	; (617c <mayfly_radio_active+0x58>)
    614a:	490d      	ldr	r1, [pc, #52]	; (6180 <mayfly_radio_active+0x5c>)
    614c:	480d      	ldr	r0, [pc, #52]	; (6184 <mayfly_radio_active+0x60>)
    614e:	f7fb f959 	bl	1404 <printk>
    6152:	4040      	eors	r0, r0
    6154:	f380 8811 	msr	BASEPRI, r0
    6158:	f04f 0004 	mov.w	r0, #4
    615c:	df02      	svc	2
		if (--s_active) {
    615e:	3b01      	subs	r3, #1
    6160:	b2db      	uxtb	r3, r3
    6162:	7013      	strb	r3, [r2, #0]
    6164:	2b00      	cmp	r3, #0
    6166:	d0e5      	beq.n	6134 <mayfly_radio_active+0x10>
}
    6168:	b003      	add	sp, #12
    616a:	f85d fb04 	ldr.w	pc, [sp], #4
    616e:	bf00      	nop
    6170:	20000cd5 	.word	0x20000cd5
    6174:	0000ceef 	.word	0x0000ceef
    6178:	0000d7a6 	.word	0x0000d7a6
    617c:	0000e152 	.word	0x0000e152
    6180:	0000d71b 	.word	0x0000d71b
    6184:	0000e866 	.word	0x0000e866

00006188 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    6188:	2000      	movs	r0, #0
    618a:	f7ff bfcb 	b.w	6124 <mayfly_radio_active>
	...

00006190 <mayfly_radio_stop>:
{
    6190:	b507      	push	{r0, r1, r2, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
    6192:	b2c0      	uxtb	r0, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    6194:	1f03      	subs	r3, r0, #4
    6196:	2b01      	cmp	r3, #1
    6198:	d90e      	bls.n	61b8 <mayfly_radio_stop+0x28>
    619a:	4b11      	ldr	r3, [pc, #68]	; (61e0 <mayfly_radio_stop+0x50>)
    619c:	9301      	str	r3, [sp, #4]
    619e:	9300      	str	r3, [sp, #0]
    61a0:	4a10      	ldr	r2, [pc, #64]	; (61e4 <mayfly_radio_stop+0x54>)
    61a2:	4b11      	ldr	r3, [pc, #68]	; (61e8 <mayfly_radio_stop+0x58>)
    61a4:	4911      	ldr	r1, [pc, #68]	; (61ec <mayfly_radio_stop+0x5c>)
    61a6:	4812      	ldr	r0, [pc, #72]	; (61f0 <mayfly_radio_stop+0x60>)
    61a8:	f7fb f92c 	bl	1404 <printk>
    61ac:	4040      	eors	r0, r0
    61ae:	f380 8811 	msr	BASEPRI, r0
    61b2:	f04f 0004 	mov.w	r0, #4
    61b6:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
    61b8:	4a0e      	ldr	r2, [pc, #56]	; (61f4 <mayfly_radio_stop+0x64>)
    61ba:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    61bc:	b143      	cbz	r3, 61d0 <mayfly_radio_stop+0x40>
	radio_used = ((_radio.state != STATE_NONE) &&
    61be:	3b04      	subs	r3, #4
    61c0:	2b01      	cmp	r3, #1
    61c2:	d905      	bls.n	61d0 <mayfly_radio_stop+0x40>
			_radio.state = state;
    61c4:	7510      	strb	r0, [r2, #20]
}
    61c6:	b003      	add	sp, #12
    61c8:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_disable();
    61cc:	f004 bf4c 	b.w	b068 <radio_disable>
	if (radio_used || !radio_is_idle()) {
    61d0:	f004 ff7c 	bl	b0cc <radio_is_idle>
    61d4:	2800      	cmp	r0, #0
    61d6:	d0f6      	beq.n	61c6 <mayfly_radio_stop+0x36>
}
    61d8:	b003      	add	sp, #12
    61da:	f85d fb04 	ldr.w	pc, [sp], #4
    61de:	bf00      	nop
    61e0:	0000ceef 	.word	0x0000ceef
    61e4:	0000d7a6 	.word	0x0000d7a6
    61e8:	0000e209 	.word	0x0000e209
    61ec:	0000d71b 	.word	0x0000d71b
    61f0:	0000e890 	.word	0x0000e890
    61f4:	200005b0 	.word	0x200005b0

000061f8 <rx_packet_set>:
{
    61f8:	b538      	push	{r3, r4, r5, lr}
    61fa:	4605      	mov	r5, r0
    61fc:	460c      	mov	r4, r1
	radio_phy_set(phy, 0);
    61fe:	2100      	movs	r1, #0
    6200:	4608      	mov	r0, r1
    6202:	f004 fe97 	bl	af34 <radio_phy_set>
	if (conn->enc_rx) {
    6206:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    620a:	06db      	lsls	r3, r3, #27
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    620c:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_rx) {
    6210:	d50d      	bpl.n	622e <rx_packet_set+0x36>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    6212:	211f      	movs	r1, #31
    6214:	2008      	movs	r0, #8
    6216:	f004 fed3 	bl	afc0 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    621a:	4622      	mov	r2, r4
    621c:	2100      	movs	r1, #0
    621e:	f105 00a9 	add.w	r0, r5, #169	; 0xa9
    6222:	f005 f905 	bl	b430 <radio_ccm_rx_pkt_set>
}
    6226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_rx_set(pdu_data_rx);
    622a:	f004 bef7 	b.w	b01c <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    622e:	2008      	movs	r0, #8
    6230:	211b      	movs	r1, #27
    6232:	f004 fec5 	bl	afc0 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    6236:	4620      	mov	r0, r4
    6238:	e7f5      	b.n	6226 <rx_packet_set+0x2e>
	...

0000623c <pdu_node_tx_release>:
{
    623c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    623e:	4a17      	ldr	r2, [pc, #92]	; (629c <pdu_node_tx_release+0x60>)
    6240:	f892 36dc 	ldrb.w	r3, [r2, #1756]	; 0x6dc
	if (last == _radio.packet_tx_count) {
    6244:	f892 46d8 	ldrb.w	r4, [r2, #1752]	; 0x6d8
	last = _radio.packet_release_last + 1;
    6248:	3301      	adds	r3, #1
    624a:	b2db      	uxtb	r3, r3
		last = 0;
    624c:	429c      	cmp	r4, r3
    624e:	bf08      	it	eq
    6250:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    6252:	f892 46db 	ldrb.w	r4, [r2, #1755]	; 0x6db
    6256:	429c      	cmp	r4, r3
    6258:	d10e      	bne.n	6278 <pdu_node_tx_release+0x3c>
    625a:	4b11      	ldr	r3, [pc, #68]	; (62a0 <pdu_node_tx_release+0x64>)
    625c:	9301      	str	r3, [sp, #4]
    625e:	9300      	str	r3, [sp, #0]
    6260:	4a10      	ldr	r2, [pc, #64]	; (62a4 <pdu_node_tx_release+0x68>)
    6262:	4b11      	ldr	r3, [pc, #68]	; (62a8 <pdu_node_tx_release+0x6c>)
    6264:	4911      	ldr	r1, [pc, #68]	; (62ac <pdu_node_tx_release+0x70>)
    6266:	4812      	ldr	r0, [pc, #72]	; (62b0 <pdu_node_tx_release+0x74>)
    6268:	f7fb f8cc 	bl	1404 <printk>
    626c:	4040      	eors	r0, r0
    626e:	f380 8811 	msr	BASEPRI, r0
    6272:	f04f 0004 	mov.w	r0, #4
    6276:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    6278:	f892 56dc 	ldrb.w	r5, [r2, #1756]	; 0x6dc
    627c:	f8d2 46d4 	ldr.w	r4, [r2, #1748]	; 0x6d4
    6280:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    6284:	f892 06dc 	ldrb.w	r0, [r2, #1756]	; 0x6dc
    6288:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    628c:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    628e:	f882 36dc 	strb.w	r3, [r2, #1756]	; 0x6dc
}
    6292:	b003      	add	sp, #12
    6294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_event_callback();
    6298:	f004 b852 	b.w	a340 <radio_event_callback>
    629c:	200005b0 	.word	0x200005b0
    62a0:	0000ceef 	.word	0x0000ceef
    62a4:	0000d7a6 	.word	0x0000d7a6
    62a8:	0000e34f 	.word	0x0000e34f
    62ac:	0000d71b 	.word	0x0000d71b
    62b0:	0000ea07 	.word	0x0000ea07

000062b4 <packet_tx_enqueue>:
{
    62b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    62b8:	4c24      	ldr	r4, [pc, #144]	; (634c <packet_tx_enqueue+0x98>)
{
    62ba:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    62bc:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    62be:	b12e      	cbz	r6, 62cc <packet_tx_enqueue+0x18>
    62c0:	f894 36d9 	ldrb.w	r3, [r4, #1753]	; 0x6d9
    62c4:	f894 26da 	ldrb.w	r2, [r4, #1754]	; 0x6da
    62c8:	429a      	cmp	r2, r3
    62ca:	d101      	bne.n	62d0 <packet_tx_enqueue+0x1c>
    62cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    62d0:	f894 86d9 	ldrb.w	r8, [r4, #1753]	; 0x6d9
    62d4:	f8d4 96d0 	ldr.w	r9, [r4, #1744]	; 0x6d0
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    62d8:	f8d4 0674 	ldr.w	r0, [r4, #1652]	; 0x674
    62dc:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    62e0:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    62e4:	f44f 7182 	mov.w	r1, #260	; 0x104
		node_tx_new = pdu_data_q_tx->node_tx;
    62e8:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    62ea:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    62ec:	f7fd f88a 	bl	3404 <mem_get>
    62f0:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    62f2:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    62f6:	8c1a      	ldrh	r2, [r3, #32]
    62f8:	4282      	cmp	r2, r0
    62fa:	d11f      	bne.n	633c <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    62fc:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
    6300:	b942      	cbnz	r2, 6314 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    6302:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
				conn->pkt_tx_data = node_tx_new;
    6306:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
				if (conn->pkt_tx_head == 0) {
    630a:	b91a      	cbnz	r2, 6314 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    630c:	f8c3 50ec 	str.w	r5, [r3, #236]	; 0xec
					conn->pkt_tx_last = NULL;
    6310:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			if (conn->pkt_tx_last) {
    6314:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
    6318:	b102      	cbz	r2, 631c <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    631a:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    631c:	f8c3 50fc 	str.w	r5, [r3, #252]	; 0xfc
		first = _radio.packet_tx_first + 1;
    6320:	f894 36d9 	ldrb.w	r3, [r4, #1753]	; 0x6d9
		if (first == _radio.packet_tx_count) {
    6324:	f894 26d8 	ldrb.w	r2, [r4, #1752]	; 0x6d8
		first = _radio.packet_tx_first + 1;
    6328:	3301      	adds	r3, #1
    632a:	b2db      	uxtb	r3, r3
			first = 0;
    632c:	429a      	cmp	r2, r3
    632e:	bf08      	it	eq
    6330:	2300      	moveq	r3, #0
    6332:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    6334:	f884 36d9 	strb.w	r3, [r4, #1753]	; 0x6d9
    6338:	b2f6      	uxtb	r6, r6
    633a:	e7c0      	b.n	62be <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    633c:	792b      	ldrb	r3, [r5, #4]
    633e:	f367 0301 	bfi	r3, r7, #0, #2
    6342:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    6344:	4629      	mov	r1, r5
    6346:	f7ff ff79 	bl	623c <pdu_node_tx_release>
    634a:	e7e9      	b.n	6320 <packet_tx_enqueue+0x6c>
    634c:	200005b0 	.word	0x200005b0

00006350 <connection_release>:
{
    6350:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    6352:	2201      	movs	r2, #1
{
    6354:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    6356:	4611      	mov	r1, r2
    6358:	2000      	movs	r0, #0
    635a:	f7fd f8b5 	bl	34c8 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    635e:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    6362:	2100      	movs	r1, #0
    6364:	f242 433d 	movw	r3, #9277	; 0x243d
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6368:	3207      	adds	r2, #7
	ticker_status =
    636a:	9300      	str	r3, [sp, #0]
    636c:	4608      	mov	r0, r1
    636e:	4b3e      	ldr	r3, [pc, #248]	; (6468 <connection_release+0x118>)
    6370:	b2d2      	uxtb	r2, r2
    6372:	f7fd ff2d 	bl	41d0 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6376:	f030 0102 	bics.w	r1, r0, #2
    637a:	d00e      	beq.n	639a <connection_release+0x4a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    637c:	4b3b      	ldr	r3, [pc, #236]	; (646c <connection_release+0x11c>)
    637e:	9301      	str	r3, [sp, #4]
    6380:	9300      	str	r3, [sp, #0]
    6382:	4a3b      	ldr	r2, [pc, #236]	; (6470 <connection_release+0x120>)
    6384:	4b3b      	ldr	r3, [pc, #236]	; (6474 <connection_release+0x124>)
    6386:	493c      	ldr	r1, [pc, #240]	; (6478 <connection_release+0x128>)
    6388:	483c      	ldr	r0, [pc, #240]	; (647c <connection_release+0x12c>)
    638a:	f7fb f83b 	bl	1404 <printk>
    638e:	4040      	eors	r0, r0
    6390:	f380 8811 	msr	BASEPRI, r0
    6394:	f04f 0004 	mov.w	r0, #4
    6398:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    639a:	4b39      	ldr	r3, [pc, #228]	; (6480 <connection_release+0x130>)
    639c:	7d1a      	ldrb	r2, [r3, #20]
    639e:	2a05      	cmp	r2, #5
    63a0:	461d      	mov	r5, r3
    63a2:	d11b      	bne.n	63dc <connection_release+0x8c>
					  conn->handle))) {
    63a4:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    63a6:	7c18      	ldrb	r0, [r3, #16]
    63a8:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    63aa:	4290      	cmp	r0, r2
    63ac:	d116      	bne.n	63dc <connection_release+0x8c>
		_radio.ticker_id_prepare = 0;
    63ae:	7419      	strb	r1, [r3, #16]
		ticker_status =
    63b0:	f242 434e 	movw	r3, #9294	; 0x244e
    63b4:	9300      	str	r3, [sp, #0]
    63b6:	2201      	movs	r2, #1
    63b8:	4b2b      	ldr	r3, [pc, #172]	; (6468 <connection_release+0x118>)
    63ba:	4608      	mov	r0, r1
    63bc:	f7fd ff08 	bl	41d0 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    63c0:	f030 0202 	bics.w	r2, r0, #2
    63c4:	d1da      	bne.n	637c <connection_release+0x2c>
		ticker_status =
    63c6:	f242 4355 	movw	r3, #9301	; 0x2455
    63ca:	9300      	str	r3, [sp, #0]
    63cc:	4611      	mov	r1, r2
    63ce:	4b26      	ldr	r3, [pc, #152]	; (6468 <connection_release+0x118>)
    63d0:	4610      	mov	r0, r2
    63d2:	f7fd fefd 	bl	41d0 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    63d6:	f030 0302 	bics.w	r3, r0, #2
    63da:	d1cf      	bne.n	637c <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    63dc:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
    63e0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    63e4:	4299      	cmp	r1, r3
    63e6:	d003      	beq.n	63f0 <connection_release+0xa0>
    63e8:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    63ec:	4299      	cmp	r1, r3
    63ee:	d101      	bne.n	63f4 <connection_release+0xa4>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    63f0:	4e24      	ldr	r6, [pc, #144]	; (6484 <connection_release+0x134>)
    63f2:	e012      	b.n	641a <connection_release+0xca>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    63f4:	790b      	ldrb	r3, [r1, #4]
    63f6:	f36f 0301 	bfc	r3, #0, #2
    63fa:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    63fc:	680b      	ldr	r3, [r1, #0]
    63fe:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		pdu_node_tx_release(conn->handle, node_tx);
    6402:	8c20      	ldrh	r0, [r4, #32]
    6404:	f7ff ff1a 	bl	623c <pdu_node_tx_release>
    6408:	e7e8      	b.n	63dc <connection_release+0x8c>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    640a:	6803      	ldr	r3, [r0, #0]
    640c:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    6410:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    6414:	4631      	mov	r1, r6
    6416:	f7fc ffe0 	bl	33da <mem_release>
	while ((conn->pkt_tx_head) &&
    641a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    641e:	b118      	cbz	r0, 6428 <connection_release+0xd8>
    6420:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    6424:	4298      	cmp	r0, r3
    6426:	d1f0      	bne.n	640a <connection_release+0xba>
	conn->pkt_tx_ctrl = NULL;
    6428:	2300      	movs	r3, #0
    642a:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
	conn->pkt_tx_ctrl_last = NULL;
    642e:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	while (conn->pkt_tx_head) {
    6432:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
    6436:	b951      	cbnz	r1, 644e <connection_release+0xfe>
	conn->handle = 0xffff;
    6438:	f64f 73ff 	movw	r3, #65535	; 0xffff
    643c:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    643e:	f8d5 36ec 	ldr.w	r3, [r5, #1772]	; 0x6ec
    6442:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    6444:	bf08      	it	eq
    6446:	f8c5 16ec 	streq.w	r1, [r5, #1772]	; 0x6ec
}
    644a:	b002      	add	sp, #8
    644c:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    644e:	790b      	ldrb	r3, [r1, #4]
    6450:	f36f 0301 	bfc	r3, #0, #2
    6454:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    6456:	680b      	ldr	r3, [r1, #0]
    6458:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		conn->pkt_tx_data = conn->pkt_tx_head;
    645c:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		pdu_node_tx_release(conn->handle, node_tx);
    6460:	8c20      	ldrh	r0, [r4, #32]
    6462:	f7ff feeb 	bl	623c <pdu_node_tx_release>
    6466:	e7e4      	b.n	6432 <connection_release+0xe2>
    6468:	00005e45 	.word	0x00005e45
    646c:	0000ceef 	.word	0x0000ceef
    6470:	0000d7a6 	.word	0x0000d7a6
    6474:	0000e363 	.word	0x0000e363
    6478:	0000d71b 	.word	0x0000d71b
    647c:	0000e3ec 	.word	0x0000e3ec
    6480:	200005b0 	.word	0x200005b0
    6484:	20000c70 	.word	0x20000c70

00006488 <tx_packet_set>:
{
    6488:	b538      	push	{r3, r4, r5, lr}
    648a:	4605      	mov	r5, r0
    648c:	460c      	mov	r4, r1
	radio_phy_set(phy, flags);
    648e:	2100      	movs	r1, #0
    6490:	4608      	mov	r0, r1
    6492:	f004 fd4f 	bl	af34 <radio_phy_set>
	if (conn->enc_tx) {
    6496:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    649a:	069b      	lsls	r3, r3, #26
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    649c:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_tx) {
    64a0:	d50c      	bpl.n	64bc <tx_packet_set+0x34>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    64a2:	211f      	movs	r1, #31
    64a4:	2008      	movs	r0, #8
    64a6:	f004 fd8b 	bl	afc0 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    64aa:	4621      	mov	r1, r4
    64ac:	f105 00ca 	add.w	r0, r5, #202	; 0xca
    64b0:	f004 fffa 	bl	b4a8 <radio_ccm_tx_pkt_set>
}
    64b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_tx_set(pdu_data_tx);
    64b8:	f004 bdb6 	b.w	b028 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    64bc:	2008      	movs	r0, #8
    64be:	211b      	movs	r1, #27
    64c0:	f004 fd7e 	bl	afc0 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    64c4:	4620      	mov	r0, r4
    64c6:	e7f5      	b.n	64b4 <tx_packet_set+0x2c>

000064c8 <sched_after_mstr_free_offset_get>:
{
    64c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    64ca:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    64cc:	aa04      	add	r2, sp, #16
{
    64ce:	461c      	mov	r4, r3
    64d0:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    64d2:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    64d6:	3127      	adds	r1, #39	; 0x27
    64d8:	2001      	movs	r0, #1
    64da:	f7ff fb81 	bl	5be0 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    64de:	6823      	ldr	r3, [r4, #0]
    64e0:	b363      	cbz	r3, 653c <sched_after_mstr_free_offset_get+0x74>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    64e2:	9803      	ldr	r0, [sp, #12]
    64e4:	1b83      	subs	r3, r0, r6
    64e6:	021b      	lsls	r3, r3, #8
    64e8:	d50e      	bpl.n	6508 <sched_after_mstr_free_offset_get+0x40>
    64ea:	4b19      	ldr	r3, [pc, #100]	; (6550 <sched_after_mstr_free_offset_get+0x88>)
    64ec:	9301      	str	r3, [sp, #4]
    64ee:	9300      	str	r3, [sp, #0]
    64f0:	4a18      	ldr	r2, [pc, #96]	; (6554 <sched_after_mstr_free_offset_get+0x8c>)
    64f2:	4b19      	ldr	r3, [pc, #100]	; (6558 <sched_after_mstr_free_offset_get+0x90>)
    64f4:	4919      	ldr	r1, [pc, #100]	; (655c <sched_after_mstr_free_offset_get+0x94>)
    64f6:	481a      	ldr	r0, [pc, #104]	; (6560 <sched_after_mstr_free_offset_get+0x98>)
    64f8:	f7fa ff84 	bl	1404 <printk>
    64fc:	4040      	eors	r0, r0
    64fe:	f380 8811 	msr	BASEPRI, r0
    6502:	f04f 0004 	mov.w	r0, #4
    6506:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    6508:	4631      	mov	r1, r6
    650a:	f7fd ff33 	bl	4374 <ticker_ticks_diff_get>
    650e:	4602      	mov	r2, r0
    6510:	4814      	ldr	r0, [pc, #80]	; (6564 <sched_after_mstr_free_offset_get+0x9c>)
    6512:	2307      	movs	r3, #7
    6514:	fba2 0100 	umull	r0, r1, r2, r0
    6518:	fb03 1102 	mla	r1, r3, r2, r1
    651c:	a30a      	add	r3, pc, #40	; (adr r3, 6548 <sched_after_mstr_free_offset_get+0x80>)
    651e:	e9d3 2300 	ldrd	r2, r3, [r3]
    6522:	f7f9 fea1 	bl	268 <__aeabi_uldivmod>
    6526:	6823      	ldr	r3, [r4, #0]
    6528:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    652a:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    652c:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    652e:	db05      	blt.n	653c <sched_after_mstr_free_offset_get+0x74>
		u32_t conn_interval_us = conn_interval * 1250;
    6530:	f240 40e2 	movw	r0, #1250	; 0x4e2
    6534:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    6536:	6823      	ldr	r3, [r4, #0]
    6538:	4298      	cmp	r0, r3
    653a:	d301      	bcc.n	6540 <sched_after_mstr_free_offset_get+0x78>
}
    653c:	b004      	add	sp, #16
    653e:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    6540:	1a1b      	subs	r3, r3, r0
    6542:	6023      	str	r3, [r4, #0]
    6544:	e7f7      	b.n	6536 <sched_after_mstr_free_offset_get+0x6e>
    6546:	bf00      	nop
    6548:	3b9aca00 	.word	0x3b9aca00
    654c:	00000000 	.word	0x00000000
    6550:	0000ceef 	.word	0x0000ceef
    6554:	0000d7a6 	.word	0x0000d7a6
    6558:	0000e1e8 	.word	0x0000e1e8
    655c:	0000d71b 	.word	0x0000d71b
    6560:	0000ec3c 	.word	0x0000ec3c
    6564:	1afd498d 	.word	0x1afd498d

00006568 <mayfly_sched_win_offset_use>:
{
    6568:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    656a:	f100 036c 	add.w	r3, r0, #108	; 0x6c
{
    656e:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    6570:	6f82      	ldr	r2, [r0, #120]	; 0x78
    6572:	68c1      	ldr	r1, [r0, #12]
    6574:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    6576:	f7ff ffa7 	bl	64c8 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    657a:	a902      	add	r1, sp, #8
    657c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    657e:	6f60      	ldr	r0, [r4, #116]	; 0x74
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    6580:	f240 42e2 	movw	r2, #1250	; 0x4e2
    6584:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    6588:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    658a:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    658e:	f7fa f833 	bl	5f8 <memcpy>
}
    6592:	b002      	add	sp, #8
    6594:	bd10      	pop	{r4, pc}
	...

00006598 <mayfly_sched_after_mstr_free_offset_get>:
{
    6598:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    659a:	4c05      	ldr	r4, [pc, #20]	; (65b0 <mayfly_sched_after_mstr_free_offset_get+0x18>)
    659c:	4602      	mov	r2, r0
    659e:	f504 63ce 	add.w	r3, r4, #1648	; 0x670
    65a2:	f8d4 1668 	ldr.w	r1, [r4, #1640]	; 0x668
    65a6:	f8b4 0660 	ldrh.w	r0, [r4, #1632]	; 0x660
}
    65aa:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    65ac:	f7ff bf8c 	b.w	64c8 <sched_after_mstr_free_offset_get>
    65b0:	200005b0 	.word	0x200005b0

000065b4 <ticker_stop_adv_stop>:
{
    65b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    65b6:	4c52      	ldr	r4, [pc, #328]	; (6700 <ticker_stop_adv_stop+0x14c>)
	if (status != TICKER_STATUS_SUCCESS) {
    65b8:	b190      	cbz	r0, 65e0 <ticker_stop_adv_stop+0x2c>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
    65ba:	7ca3      	ldrb	r3, [r4, #18]
    65bc:	2b05      	cmp	r3, #5
    65be:	f000 809c 	beq.w	66fa <ticker_stop_adv_stop+0x146>
    65c2:	4b50      	ldr	r3, [pc, #320]	; (6704 <ticker_stop_adv_stop+0x150>)
    65c4:	9301      	str	r3, [sp, #4]
    65c6:	9300      	str	r3, [sp, #0]
    65c8:	4a4f      	ldr	r2, [pc, #316]	; (6708 <ticker_stop_adv_stop+0x154>)
    65ca:	4b50      	ldr	r3, [pc, #320]	; (670c <ticker_stop_adv_stop+0x158>)
    65cc:	4950      	ldr	r1, [pc, #320]	; (6710 <ticker_stop_adv_stop+0x15c>)
    65ce:	4851      	ldr	r0, [pc, #324]	; (6714 <ticker_stop_adv_stop+0x160>)
		LL_ASSERT(_radio.ticker_id_prepare);
    65d0:	f7fa ff18 	bl	1404 <printk>
    65d4:	4040      	eors	r0, r0
    65d6:	f380 8811 	msr	BASEPRI, r0
    65da:	f04f 0004 	mov.w	r0, #4
    65de:	df02      	svc	2
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    65e0:	7c23      	ldrb	r3, [r4, #16]
    65e2:	2b05      	cmp	r3, #5
    65e4:	d002      	beq.n	65ec <ticker_stop_adv_stop+0x38>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
    65e6:	7c63      	ldrb	r3, [r4, #17]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    65e8:	2b05      	cmp	r3, #5
    65ea:	d16d      	bne.n	66c8 <ticker_stop_adv_stop+0x114>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    65ec:	ab04      	add	r3, sp, #16
    65ee:	2202      	movs	r2, #2
    65f0:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    65f4:	2200      	movs	r2, #0
    65f6:	9300      	str	r3, [sp, #0]
    65f8:	2101      	movs	r1, #1
    65fa:	4b47      	ldr	r3, [pc, #284]	; (6718 <ticker_stop_adv_stop+0x164>)
    65fc:	4610      	mov	r0, r2
    65fe:	f7fd fde7 	bl	41d0 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    6602:	2802      	cmp	r0, #2
    6604:	d00d      	beq.n	6622 <ticker_stop_adv_stop+0x6e>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    6606:	9802      	ldr	r0, [sp, #8]
    6608:	b1c0      	cbz	r0, 663c <ticker_stop_adv_stop+0x88>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    660a:	9802      	ldr	r0, [sp, #8]
    660c:	2801      	cmp	r0, #1
    660e:	d16c      	bne.n	66ea <ticker_stop_adv_stop+0x136>
		if (_radio.role != ROLE_NONE) {
    6610:	7ce3      	ldrb	r3, [r4, #19]
    6612:	2b00      	cmp	r3, #0
    6614:	d058      	beq.n	66c8 <ticker_stop_adv_stop+0x114>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    6616:	4b41      	ldr	r3, [pc, #260]	; (671c <ticker_stop_adv_stop+0x168>)
    6618:	2204      	movs	r2, #4
    661a:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    661c:	2200      	movs	r2, #0
    661e:	4611      	mov	r1, r2
    6620:	e04e      	b.n	66c0 <ticker_stop_adv_stop+0x10c>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    6622:	2201      	movs	r2, #1
    6624:	4611      	mov	r1, r2
    6626:	4610      	mov	r0, r2
    6628:	f7fc ff4e 	bl	34c8 <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
    662c:	9b02      	ldr	r3, [sp, #8]
    662e:	2b02      	cmp	r3, #2
    6630:	d1e9      	bne.n	6606 <ticker_stop_adv_stop+0x52>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    6632:	2101      	movs	r1, #1
    6634:	2000      	movs	r0, #0
    6636:	f7fd fe85 	bl	4344 <ticker_job_sched>
    663a:	e7f7      	b.n	662c <ticker_stop_adv_stop+0x78>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    663c:	2302      	movs	r3, #2
    663e:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
    6640:	7c23      	ldrb	r3, [r4, #16]
    6642:	b93b      	cbnz	r3, 6654 <ticker_stop_adv_stop+0xa0>
    6644:	4b2f      	ldr	r3, [pc, #188]	; (6704 <ticker_stop_adv_stop+0x150>)
    6646:	9301      	str	r3, [sp, #4]
    6648:	9300      	str	r3, [sp, #0]
    664a:	4a2f      	ldr	r2, [pc, #188]	; (6708 <ticker_stop_adv_stop+0x154>)
    664c:	4b34      	ldr	r3, [pc, #208]	; (6720 <ticker_stop_adv_stop+0x16c>)
    664e:	4930      	ldr	r1, [pc, #192]	; (6710 <ticker_stop_adv_stop+0x15c>)
    6650:	4834      	ldr	r0, [pc, #208]	; (6724 <ticker_stop_adv_stop+0x170>)
    6652:	e7bd      	b.n	65d0 <ticker_stop_adv_stop+0x1c>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6654:	ab03      	add	r3, sp, #12
    6656:	2201      	movs	r2, #1
		_radio.ticker_id_prepare = 0;
    6658:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    665a:	4611      	mov	r1, r2
    665c:	9300      	str	r3, [sp, #0]
    665e:	4b2e      	ldr	r3, [pc, #184]	; (6718 <ticker_stop_adv_stop+0x164>)
    6660:	f7fd fdb6 	bl	41d0 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    6664:	2802      	cmp	r0, #2
    6666:	d015      	beq.n	6694 <ticker_stop_adv_stop+0xe0>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    6668:	9a03      	ldr	r2, [sp, #12]
    666a:	b302      	cbz	r2, 66ae <ticker_stop_adv_stop+0xfa>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    666c:	9c03      	ldr	r4, [sp, #12]
    666e:	2c01      	cmp	r4, #1
    6670:	d13b      	bne.n	66ea <ticker_stop_adv_stop+0x136>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    6672:	2200      	movs	r2, #0
    6674:	4611      	mov	r1, r2
    6676:	4b2c      	ldr	r3, [pc, #176]	; (6728 <ticker_stop_adv_stop+0x174>)
    6678:	4620      	mov	r0, r4
    667a:	f7fc ff4d 	bl	3518 <mayfly_enqueue>
			LL_ASSERT(!ret);
    667e:	4602      	mov	r2, r0
    6680:	2800      	cmp	r0, #0
    6682:	d030      	beq.n	66e6 <ticker_stop_adv_stop+0x132>
			LL_ASSERT(!ret);
    6684:	4b1f      	ldr	r3, [pc, #124]	; (6704 <ticker_stop_adv_stop+0x150>)
    6686:	9301      	str	r3, [sp, #4]
    6688:	9300      	str	r3, [sp, #0]
    668a:	4a1f      	ldr	r2, [pc, #124]	; (6708 <ticker_stop_adv_stop+0x154>)
    668c:	4b24      	ldr	r3, [pc, #144]	; (6720 <ticker_stop_adv_stop+0x16c>)
    668e:	4920      	ldr	r1, [pc, #128]	; (6710 <ticker_stop_adv_stop+0x15c>)
    6690:	4826      	ldr	r0, [pc, #152]	; (672c <ticker_stop_adv_stop+0x178>)
    6692:	e79d      	b.n	65d0 <ticker_stop_adv_stop+0x1c>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    6694:	2201      	movs	r2, #1
    6696:	4611      	mov	r1, r2
    6698:	4610      	mov	r0, r2
    669a:	f7fc ff15 	bl	34c8 <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
    669e:	9b03      	ldr	r3, [sp, #12]
    66a0:	2b02      	cmp	r3, #2
    66a2:	d1e1      	bne.n	6668 <ticker_stop_adv_stop+0xb4>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    66a4:	2101      	movs	r1, #1
    66a6:	2000      	movs	r0, #0
    66a8:	f7fd fe4c 	bl	4344 <ticker_job_sched>
    66ac:	e7f7      	b.n	669e <ticker_stop_adv_stop+0xea>
			u32_t ticks_xtal_to_start =
    66ae:	69a3      	ldr	r3, [r4, #24]
			if (_radio.advertiser.hdr.ticks_active_to_start >
    66b0:	69e1      	ldr	r1, [r4, #28]
			ticks_xtal_to_start &= ~XON_BITMASK;
    66b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
    66b6:	428b      	cmp	r3, r1
    66b8:	d215      	bcs.n	66e6 <ticker_stop_adv_stop+0x132>
				ret = mayfly_enqueue(
    66ba:	4b1b      	ldr	r3, [pc, #108]	; (6728 <ticker_stop_adv_stop+0x174>)
				ret = mayfly_enqueue(
    66bc:	4611      	mov	r1, r2
    66be:	2001      	movs	r0, #1
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    66c0:	f7fc ff2a 	bl	3518 <mayfly_enqueue>
			LL_ASSERT(!ret);
    66c4:	2800      	cmp	r0, #0
    66c6:	d1dd      	bne.n	6684 <ticker_stop_adv_stop+0xd0>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    66c8:	2200      	movs	r2, #0
    66ca:	4b19      	ldr	r3, [pc, #100]	; (6730 <ticker_stop_adv_stop+0x17c>)
    66cc:	4611      	mov	r1, r2
    66ce:	2001      	movs	r0, #1
    66d0:	f7fc ff22 	bl	3518 <mayfly_enqueue>
	LL_ASSERT(!retval);
    66d4:	b188      	cbz	r0, 66fa <ticker_stop_adv_stop+0x146>
    66d6:	4b0b      	ldr	r3, [pc, #44]	; (6704 <ticker_stop_adv_stop+0x150>)
    66d8:	9301      	str	r3, [sp, #4]
    66da:	9300      	str	r3, [sp, #0]
    66dc:	4a0a      	ldr	r2, [pc, #40]	; (6708 <ticker_stop_adv_stop+0x154>)
    66de:	4b0b      	ldr	r3, [pc, #44]	; (670c <ticker_stop_adv_stop+0x158>)
    66e0:	490b      	ldr	r1, [pc, #44]	; (6710 <ticker_stop_adv_stop+0x15c>)
    66e2:	4814      	ldr	r0, [pc, #80]	; (6734 <ticker_stop_adv_stop+0x180>)
    66e4:	e774      	b.n	65d0 <ticker_stop_adv_stop+0x1c>
				ret = mayfly_enqueue(
    66e6:	4b14      	ldr	r3, [pc, #80]	; (6738 <ticker_stop_adv_stop+0x184>)
    66e8:	e7e8      	b.n	66bc <ticker_stop_adv_stop+0x108>
		LL_ASSERT(0);
    66ea:	4b06      	ldr	r3, [pc, #24]	; (6704 <ticker_stop_adv_stop+0x150>)
    66ec:	9301      	str	r3, [sp, #4]
    66ee:	9300      	str	r3, [sp, #0]
    66f0:	4a05      	ldr	r2, [pc, #20]	; (6708 <ticker_stop_adv_stop+0x154>)
    66f2:	4b0b      	ldr	r3, [pc, #44]	; (6720 <ticker_stop_adv_stop+0x16c>)
    66f4:	4906      	ldr	r1, [pc, #24]	; (6710 <ticker_stop_adv_stop+0x15c>)
    66f6:	4811      	ldr	r0, [pc, #68]	; (673c <ticker_stop_adv_stop+0x188>)
    66f8:	e76a      	b.n	65d0 <ticker_stop_adv_stop+0x1c>
}
    66fa:	b004      	add	sp, #16
    66fc:	bd10      	pop	{r4, pc}
    66fe:	bf00      	nop
    6700:	200005b0 	.word	0x200005b0
    6704:	0000ceef 	.word	0x0000ceef
    6708:	0000d7a6 	.word	0x0000d7a6
    670c:	0000e292 	.word	0x0000e292
    6710:	0000d71b 	.word	0x0000d71b
    6714:	0000ed3a 	.word	0x0000ed3a
    6718:	00005361 	.word	0x00005361
    671c:	20003d08 	.word	0x20003d08
    6720:	0000e276 	.word	0x0000e276
    6724:	0000eb30 	.word	0x0000eb30
    6728:	20003cd8 	.word	0x20003cd8
    672c:	0000eb9a 	.word	0x0000eb9a
    6730:	20003ca8 	.word	0x20003ca8
    6734:	0000e911 	.word	0x0000e911
    6738:	20003d88 	.word	0x20003d88
    673c:	0000d6b3 	.word	0x0000d6b3

00006740 <isr_scan_tgta_check.isra.28>:
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    6740:	b570      	push	{r4, r5, r6, lr}
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    6742:	4c16      	ldr	r4, [pc, #88]	; (679c <isr_scan_tgta_check.isra.28+0x5c>)
    6744:	7803      	ldrb	r3, [r0, #0]
    6746:	f894 264d 	ldrb.w	r2, [r4, #1613]	; 0x64d
			BDADDR_SIZE) == 0))) ||
    674a:	09db      	lsrs	r3, r3, #7
    674c:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    6750:	4605      	mov	r5, r0
    6752:	460e      	mov	r6, r1
			BDADDR_SIZE) == 0))) ||
    6754:	d007      	beq.n	6766 <isr_scan_tgta_check.isra.28+0x26>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    6756:	f894 064d 	ldrb.w	r0, [r4, #1613]	; 0x64d
    675a:	f3c0 1001 	ubfx	r0, r0, #4, #2
    675e:	f010 0002 	ands.w	r0, r0, #2
    6762:	d10b      	bne.n	677c <isr_scan_tgta_check.isra.28+0x3c>
    6764:	bd70      	pop	{r4, r5, r6, pc}
		(memcmp(&_radio.scanner.init_addr[0],
    6766:	f100 0108 	add.w	r1, r0, #8
    676a:	2206      	movs	r2, #6
    676c:	f204 604e 	addw	r0, r4, #1614	; 0x64e
    6770:	f7f9 ff2d 	bl	5ce <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    6774:	2800      	cmp	r0, #0
    6776:	d1ee      	bne.n	6756 <isr_scan_tgta_check.isra.28+0x16>
			BDADDR_SIZE) == 0))) ||
    6778:	2001      	movs	r0, #1
    677a:	bd70      	pop	{r4, r5, r6, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    677c:	f995 3000 	ldrsb.w	r3, [r5]
    6780:	2b00      	cmp	r3, #0
    6782:	da09      	bge.n	6798 <isr_scan_tgta_check.isra.28+0x58>
	    (pdu->rx_addr != 0) &&
    6784:	7b6b      	ldrb	r3, [r5, #13]
    6786:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    678a:	2b40      	cmp	r3, #64	; 0x40
    678c:	d104      	bne.n	6798 <isr_scan_tgta_check.isra.28+0x58>
		if (dir_report) {
    678e:	2e00      	cmp	r6, #0
    6790:	d0f2      	beq.n	6778 <isr_scan_tgta_check.isra.28+0x38>
			*dir_report = true;
    6792:	2001      	movs	r0, #1
    6794:	7030      	strb	r0, [r6, #0]
    6796:	bd70      	pop	{r4, r5, r6, pc}
			BDADDR_SIZE) == 0))) ||
    6798:	2000      	movs	r0, #0
}
    679a:	bd70      	pop	{r4, r5, r6, pc}
    679c:	200005b0 	.word	0x200005b0

000067a0 <mayfly_adv_stop>:
{
    67a0:	b513      	push	{r0, r1, r4, lr}
	node_rx = packet_rx_reserve_get(1);
    67a2:	2001      	movs	r0, #1
    67a4:	f7fe fe06 	bl	53b4 <packet_rx_reserve_get>
	LL_ASSERT(node_rx);
    67a8:	4604      	mov	r4, r0
    67aa:	b970      	cbnz	r0, 67ca <mayfly_adv_stop+0x2a>
    67ac:	4b0f      	ldr	r3, [pc, #60]	; (67ec <mayfly_adv_stop+0x4c>)
    67ae:	9301      	str	r3, [sp, #4]
    67b0:	9300      	str	r3, [sp, #0]
    67b2:	4a0f      	ldr	r2, [pc, #60]	; (67f0 <mayfly_adv_stop+0x50>)
    67b4:	4b0f      	ldr	r3, [pc, #60]	; (67f4 <mayfly_adv_stop+0x54>)
    67b6:	4910      	ldr	r1, [pc, #64]	; (67f8 <mayfly_adv_stop+0x58>)
    67b8:	4810      	ldr	r0, [pc, #64]	; (67fc <mayfly_adv_stop+0x5c>)
    67ba:	f7fa fe23 	bl	1404 <printk>
    67be:	4040      	eors	r0, r0
    67c0:	f380 8811 	msr	BASEPRI, r0
    67c4:	f04f 0004 	mov.w	r0, #4
    67c8:	df02      	svc	2
	node_rx->hdr.handle = 0xffff;
    67ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
    67ce:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    67d0:	2306      	movs	r3, #6
    67d2:	7103      	strb	r3, [r0, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    67d4:	2210      	movs	r2, #16
    67d6:	2100      	movs	r1, #0
    67d8:	300b      	adds	r0, #11
    67da:	f7f9 ff39 	bl	650 <memset>
	radio_le_conn_cmplt->status = 0x3c;
    67de:	233c      	movs	r3, #60	; 0x3c
    67e0:	72e3      	strb	r3, [r4, #11]
}
    67e2:	b002      	add	sp, #8
    67e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_enqueue();
    67e8:	f7ff bac6 	b.w	5d78 <packet_rx_enqueue>
    67ec:	0000ceef 	.word	0x0000ceef
    67f0:	0000d7a6 	.word	0x0000d7a6
    67f4:	0000e266 	.word	0x0000e266
    67f8:	0000d71b 	.word	0x0000d71b
    67fc:	0000e83d 	.word	0x0000e83d

00006800 <terminate_ind_rx_enqueue>:
{
    6800:	b513      	push	{r0, r1, r4, lr}
    6802:	4603      	mov	r3, r0
    6804:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    6806:	f100 019c 	add.w	r1, r0, #156	; 0x9c
	LL_ASSERT(node_rx->hdr.onion.link);
    680a:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    680e:	b970      	cbnz	r0, 682e <terminate_ind_rx_enqueue+0x2e>
    6810:	4b16      	ldr	r3, [pc, #88]	; (686c <terminate_ind_rx_enqueue+0x6c>)
    6812:	9301      	str	r3, [sp, #4]
    6814:	9300      	str	r3, [sp, #0]
    6816:	4a16      	ldr	r2, [pc, #88]	; (6870 <terminate_ind_rx_enqueue+0x70>)
    6818:	4b16      	ldr	r3, [pc, #88]	; (6874 <terminate_ind_rx_enqueue+0x74>)
    681a:	4917      	ldr	r1, [pc, #92]	; (6878 <terminate_ind_rx_enqueue+0x78>)
    681c:	4817      	ldr	r0, [pc, #92]	; (687c <terminate_ind_rx_enqueue+0x7c>)
	LL_ASSERT(link);
    681e:	f7fa fdf1 	bl	1404 <printk>
    6822:	4040      	eors	r0, r0
    6824:	f380 8811 	msr	BASEPRI, r0
    6828:	f04f 0004 	mov.w	r0, #4
    682c:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
    682e:	8c1c      	ldrh	r4, [r3, #32]
    6830:	f8a3 40a2 	strh.w	r4, [r3, #162]	; 0xa2
	*((u8_t *)node_rx->pdu_data) = reason;
    6834:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    6838:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    683a:	4a11      	ldr	r2, [pc, #68]	; (6880 <terminate_ind_rx_enqueue+0x80>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    683c:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    6840:	f892 46dc 	ldrb.w	r4, [r2, #1756]	; 0x6dc
    6844:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    6848:	f202 62b4 	addw	r2, r2, #1716	; 0x6b4
    684c:	f7fc fdf4 	bl	3438 <memq_enqueue>
	LL_ASSERT(link);
    6850:	b938      	cbnz	r0, 6862 <terminate_ind_rx_enqueue+0x62>
    6852:	4b06      	ldr	r3, [pc, #24]	; (686c <terminate_ind_rx_enqueue+0x6c>)
    6854:	9301      	str	r3, [sp, #4]
    6856:	9300      	str	r3, [sp, #0]
    6858:	4a05      	ldr	r2, [pc, #20]	; (6870 <terminate_ind_rx_enqueue+0x70>)
    685a:	4b06      	ldr	r3, [pc, #24]	; (6874 <terminate_ind_rx_enqueue+0x74>)
    685c:	4906      	ldr	r1, [pc, #24]	; (6878 <terminate_ind_rx_enqueue+0x78>)
    685e:	4809      	ldr	r0, [pc, #36]	; (6884 <terminate_ind_rx_enqueue+0x84>)
    6860:	e7dd      	b.n	681e <terminate_ind_rx_enqueue+0x1e>
}
    6862:	b002      	add	sp, #8
    6864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    6868:	f003 bd6a 	b.w	a340 <radio_event_callback>
    686c:	0000ceef 	.word	0x0000ceef
    6870:	0000d7a6 	.word	0x0000d7a6
    6874:	0000e376 	.word	0x0000e376
    6878:	0000d71b 	.word	0x0000d71b
    687c:	0000ecc2 	.word	0x0000ecc2
    6880:	200005b0 	.word	0x200005b0
    6884:	0000e9e1 	.word	0x0000e9e1

00006888 <isr_rx_scan_report.isra.34>:
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
    6888:	b573      	push	{r0, r1, r4, r5, r6, lr}
    688a:	4606      	mov	r6, r0
	node_rx = packet_rx_reserve_get(3);
    688c:	2003      	movs	r0, #3
    688e:	f7fe fd91 	bl	53b4 <packet_rx_reserve_get>
	if (node_rx == 0) {
    6892:	2800      	cmp	r0, #0
    6894:	d032      	beq.n	68fc <isr_rx_scan_report.isra.34+0x74>
	node_rx->hdr.handle = 0xffff;
    6896:	f64f 73ff 	movw	r3, #65535	; 0xffff
    689a:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    689c:	4b18      	ldr	r3, [pc, #96]	; (6900 <isr_rx_scan_report.isra.34+0x78>)
    689e:	f893 364d 	ldrb.w	r3, [r3, #1613]	; 0x64d
    68a2:	075a      	lsls	r2, r3, #29
    68a4:	d026      	beq.n	68f4 <isr_rx_scan_report.isra.34+0x6c>
		switch (_radio.scanner.phy) {
    68a6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    68aa:	b2da      	uxtb	r2, r3
    68ac:	2a01      	cmp	r2, #1
    68ae:	d010      	beq.n	68d2 <isr_rx_scan_report.isra.34+0x4a>
    68b0:	2a04      	cmp	r2, #4
    68b2:	d00f      	beq.n	68d4 <isr_rx_scan_report.isra.34+0x4c>
			LL_ASSERT(0);
    68b4:	4b13      	ldr	r3, [pc, #76]	; (6904 <isr_rx_scan_report.isra.34+0x7c>)
    68b6:	9301      	str	r3, [sp, #4]
    68b8:	9300      	str	r3, [sp, #0]
    68ba:	4a13      	ldr	r2, [pc, #76]	; (6908 <isr_rx_scan_report.isra.34+0x80>)
    68bc:	4b13      	ldr	r3, [pc, #76]	; (690c <isr_rx_scan_report.isra.34+0x84>)
    68be:	4914      	ldr	r1, [pc, #80]	; (6910 <isr_rx_scan_report.isra.34+0x88>)
    68c0:	4814      	ldr	r0, [pc, #80]	; (6914 <isr_rx_scan_report.isra.34+0x8c>)
    68c2:	f7fa fd9f 	bl	1404 <printk>
    68c6:	4040      	eors	r0, r0
    68c8:	f380 8811 	msr	BASEPRI, r0
    68cc:	f04f 0004 	mov.w	r0, #4
    68d0:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    68d2:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    68d4:	7a44      	ldrb	r4, [r0, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    68d6:	7103      	strb	r3, [r0, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    68d8:	f100 0508 	add.w	r5, r0, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    68dc:	3402      	adds	r4, #2
			     pdu_adv_rx->len] =
    68de:	b15e      	cbz	r6, 68f8 <isr_rx_scan_report.isra.34+0x70>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    68e0:	f004 fc4a 	bl	b178 <radio_rssi_get>
			     pdu_adv_rx->len] =
    68e4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    68e8:	5528      	strb	r0, [r5, r4]
	packet_rx_enqueue();
    68ea:	f7ff fa45 	bl	5d78 <packet_rx_enqueue>
	return 0;
    68ee:	2000      	movs	r0, #0
}
    68f0:	b002      	add	sp, #8
    68f2:	bd70      	pop	{r4, r5, r6, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    68f4:	2302      	movs	r3, #2
    68f6:	e7ed      	b.n	68d4 <isr_rx_scan_report.isra.34+0x4c>
			     pdu_adv_rx->len] =
    68f8:	207f      	movs	r0, #127	; 0x7f
    68fa:	e7f5      	b.n	68e8 <isr_rx_scan_report.isra.34+0x60>
		return 1;
    68fc:	2001      	movs	r0, #1
    68fe:	e7f7      	b.n	68f0 <isr_rx_scan_report.isra.34+0x68>
    6900:	200005b0 	.word	0x200005b0
    6904:	0000ceef 	.word	0x0000ceef
    6908:	0000d7a6 	.word	0x0000d7a6
    690c:	0000e040 	.word	0x0000e040
    6910:	0000d71b 	.word	0x0000d71b
    6914:	0000d6b3 	.word	0x0000d6b3

00006918 <prepare_normal_set>:
{
    6918:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    691a:	6804      	ldr	r4, [r0, #0]
    691c:	2c00      	cmp	r4, #0
{
    691e:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    6920:	da26      	bge.n	6970 <prepare_normal_set+0x58>
		u32_t ticks_prepare_to_start =
    6922:	6843      	ldr	r3, [r0, #4]
    6924:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    6926:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    6928:	429d      	cmp	r5, r3
    692a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    692e:	bf34      	ite	cc
    6930:	1ae4      	subcc	r4, r4, r3
    6932:	1b64      	subcs	r4, r4, r5
		ticker_status =
    6934:	4b0f      	ldr	r3, [pc, #60]	; (6974 <prepare_normal_set+0x5c>)
    6936:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    6938:	b2a4      	uxth	r4, r4
		ticker_status =
    693a:	2300      	movs	r3, #0
    693c:	9304      	str	r3, [sp, #16]
    693e:	9303      	str	r3, [sp, #12]
    6940:	9302      	str	r3, [sp, #8]
    6942:	4618      	mov	r0, r3
    6944:	9401      	str	r4, [sp, #4]
    6946:	9400      	str	r4, [sp, #0]
    6948:	f7fd fbf4 	bl	4134 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    694c:	f030 0302 	bics.w	r3, r0, #2
    6950:	d00e      	beq.n	6970 <prepare_normal_set+0x58>
    6952:	4b09      	ldr	r3, [pc, #36]	; (6978 <prepare_normal_set+0x60>)
    6954:	9301      	str	r3, [sp, #4]
    6956:	9300      	str	r3, [sp, #0]
    6958:	4a08      	ldr	r2, [pc, #32]	; (697c <prepare_normal_set+0x64>)
    695a:	4b09      	ldr	r3, [pc, #36]	; (6980 <prepare_normal_set+0x68>)
    695c:	4909      	ldr	r1, [pc, #36]	; (6984 <prepare_normal_set+0x6c>)
    695e:	480a      	ldr	r0, [pc, #40]	; (6988 <prepare_normal_set+0x70>)
    6960:	f7fa fd50 	bl	1404 <printk>
    6964:	4040      	eors	r0, r0
    6966:	f380 8811 	msr	BASEPRI, r0
    696a:	f04f 0004 	mov.w	r0, #4
    696e:	df02      	svc	2
}
    6970:	b009      	add	sp, #36	; 0x24
    6972:	bd30      	pop	{r4, r5, pc}
    6974:	00005371 	.word	0x00005371
    6978:	0000ceef 	.word	0x0000ceef
    697c:	0000d7a6 	.word	0x0000d7a6
    6980:	0000e1a0 	.word	0x0000e1a0
    6984:	0000d71b 	.word	0x0000d71b
    6988:	0000e3ec 	.word	0x0000e3ec
    698c:	00000000 	.word	0x00000000

00006990 <mayfly_xtal_stop_calc>:
{
    6990:	b570      	push	{r4, r5, r6, lr}
    6992:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    6994:	2302      	movs	r3, #2
    6996:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    6998:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    699a:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    699c:	4e7e      	ldr	r6, [pc, #504]	; (6b98 <mayfly_xtal_stop_calc+0x208>)
				    _radio.connection_count));
    699e:	4d7f      	ldr	r5, [pc, #508]	; (6b9c <mayfly_xtal_stop_calc+0x20c>)
	struct connection *conn_curr = NULL;
    69a0:	930a      	str	r3, [sp, #40]	; 0x28
{
    69a2:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    69a4:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    69a6:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    69aa:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    69ac:	ab09      	add	r3, sp, #36	; 0x24
    69ae:	9302      	str	r3, [sp, #8]
    69b0:	ab0c      	add	r3, sp, #48	; 0x30
    69b2:	9300      	str	r3, [sp, #0]
    69b4:	9601      	str	r6, [sp, #4]
    69b6:	ab0d      	add	r3, sp, #52	; 0x34
    69b8:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    69bc:	2101      	movs	r1, #1
    69be:	2000      	movs	r0, #0
    69c0:	f7fd fc42 	bl	4248 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    69c4:	2802      	cmp	r0, #2
    69c6:	d014      	beq.n	69f2 <mayfly_xtal_stop_calc+0x62>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    69c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    69ca:	b1b3      	cbz	r3, 69fa <mayfly_xtal_stop_calc+0x6a>
    69cc:	4b74      	ldr	r3, [pc, #464]	; (6ba0 <mayfly_xtal_stop_calc+0x210>)
    69ce:	9301      	str	r3, [sp, #4]
    69d0:	9300      	str	r3, [sp, #0]
    69d2:	4a74      	ldr	r2, [pc, #464]	; (6ba4 <mayfly_xtal_stop_calc+0x214>)
    69d4:	4b74      	ldr	r3, [pc, #464]	; (6ba8 <mayfly_xtal_stop_calc+0x218>)
    69d6:	4975      	ldr	r1, [pc, #468]	; (6bac <mayfly_xtal_stop_calc+0x21c>)
    69d8:	4875      	ldr	r0, [pc, #468]	; (6bb0 <mayfly_xtal_stop_calc+0x220>)
	LL_ASSERT(hdr_curr);
    69da:	f7fa fd13 	bl	1404 <printk>
    69de:	4040      	eors	r0, r0
    69e0:	f380 8811 	msr	BASEPRI, r0
    69e4:	f04f 0004 	mov.w	r0, #4
    69e8:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    69ea:	2101      	movs	r1, #1
    69ec:	2000      	movs	r0, #0
    69ee:	f7fd fca9 	bl	4344 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    69f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    69f4:	2b02      	cmp	r3, #2
    69f6:	d0f8      	beq.n	69ea <mayfly_xtal_stop_calc+0x5a>
    69f8:	e7e6      	b.n	69c8 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    69fa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    69fe:	2bff      	cmp	r3, #255	; 0xff
    6a00:	d004      	beq.n	6a0c <mayfly_xtal_stop_calc+0x7c>
    6a02:	f895 267c 	ldrb.w	r2, [r5, #1660]	; 0x67c
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    6a06:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    6a08:	4293      	cmp	r3, r2
    6a0a:	dacf      	bge.n	69ac <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    6a0c:	1f5a      	subs	r2, r3, #5
    6a0e:	b2d2      	uxtb	r2, r2
    6a10:	2af9      	cmp	r2, #249	; 0xf9
    6a12:	d805      	bhi.n	6a20 <mayfly_xtal_stop_calc+0x90>
				_radio.connection_count))) {
    6a14:	4a61      	ldr	r2, [pc, #388]	; (6b9c <mayfly_xtal_stop_calc+0x20c>)
    6a16:	f892 267c 	ldrb.w	r2, [r2, #1660]	; 0x67c
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    6a1a:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    6a1c:	4293      	cmp	r3, r2
    6a1e:	db05      	blt.n	6a2c <mayfly_xtal_stop_calc+0x9c>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    6a20:	2100      	movs	r1, #0
    6a22:	2001      	movs	r0, #1
    6a24:	f7fe fed4 	bl	57d0 <mayfly_xtal_retain>
}
    6a28:	b00e      	add	sp, #56	; 0x38
    6a2a:	bd70      	pop	{r4, r5, r6, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    6a2c:	a90a      	add	r1, sp, #40	; 0x28
    6a2e:	b2e0      	uxtb	r0, r4
    6a30:	f7ff fae4 	bl	5ffc <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    6a34:	b938      	cbnz	r0, 6a46 <mayfly_xtal_stop_calc+0xb6>
    6a36:	4b5a      	ldr	r3, [pc, #360]	; (6ba0 <mayfly_xtal_stop_calc+0x210>)
    6a38:	9301      	str	r3, [sp, #4]
    6a3a:	9300      	str	r3, [sp, #0]
    6a3c:	4a59      	ldr	r2, [pc, #356]	; (6ba4 <mayfly_xtal_stop_calc+0x214>)
    6a3e:	4b5a      	ldr	r3, [pc, #360]	; (6ba8 <mayfly_xtal_stop_calc+0x218>)
    6a40:	495a      	ldr	r1, [pc, #360]	; (6bac <mayfly_xtal_stop_calc+0x21c>)
    6a42:	485c      	ldr	r0, [pc, #368]	; (6bb4 <mayfly_xtal_stop_calc+0x224>)
    6a44:	e7c9      	b.n	69da <mayfly_xtal_stop_calc+0x4a>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    6a46:	6803      	ldr	r3, [r0, #0]
    6a48:	6844      	ldr	r4, [r0, #4]
    6a4a:	2b00      	cmp	r3, #0
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    6a4c:	bfb8      	it	lt
    6a4e:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    6a50:	429c      	cmp	r4, r3
    6a52:	bf38      	it	cc
    6a54:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    6a56:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    6a58:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    6a5c:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    6a5e:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    6a60:	f7ff facc 	bl	5ffc <hdr_conn_get>
	LL_ASSERT(hdr_next);
    6a64:	4605      	mov	r5, r0
    6a66:	b938      	cbnz	r0, 6a78 <mayfly_xtal_stop_calc+0xe8>
    6a68:	4b4d      	ldr	r3, [pc, #308]	; (6ba0 <mayfly_xtal_stop_calc+0x210>)
    6a6a:	9301      	str	r3, [sp, #4]
    6a6c:	9300      	str	r3, [sp, #0]
    6a6e:	4a4d      	ldr	r2, [pc, #308]	; (6ba4 <mayfly_xtal_stop_calc+0x214>)
    6a70:	4b4d      	ldr	r3, [pc, #308]	; (6ba8 <mayfly_xtal_stop_calc+0x218>)
    6a72:	494e      	ldr	r1, [pc, #312]	; (6bac <mayfly_xtal_stop_calc+0x21c>)
    6a74:	4850      	ldr	r0, [pc, #320]	; (6bb8 <mayfly_xtal_stop_calc+0x228>)
    6a76:	e7b0      	b.n	69da <mayfly_xtal_stop_calc+0x4a>
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    6a78:	6886      	ldr	r6, [r0, #8]
    6a7a:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    6a7c:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    6a7e:	429e      	cmp	r6, r3
    6a80:	bf38      	it	cc
    6a82:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    6a84:	2a00      	cmp	r2, #0
    6a86:	da05      	bge.n	6a94 <mayfly_xtal_stop_calc+0x104>
		ticks_to_expire -=
    6a88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    6a8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    6a8e:	4433      	add	r3, r6
    6a90:	1a9b      	subs	r3, r3, r2
    6a92:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    6a94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    6a96:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    6a9a:	4293      	cmp	r3, r2
    6a9c:	d20a      	bcs.n	6ab4 <mayfly_xtal_stop_calc+0x124>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    6a9e:	2100      	movs	r1, #0
    6aa0:	2001      	movs	r0, #1
    6aa2:	f7fe fe95 	bl	57d0 <mayfly_xtal_retain>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    6aa6:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    6aaa:	2101      	movs	r1, #1
    6aac:	4628      	mov	r0, r5
    6aae:	f7ff ff33 	bl	6918 <prepare_normal_set>
    6ab2:	e7b9      	b.n	6a28 <mayfly_xtal_stop_calc+0x98>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
    6ab4:	2101      	movs	r1, #1
    6ab6:	4608      	mov	r0, r1
    6ab8:	f7fe fe8a 	bl	57d0 <mayfly_xtal_retain>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    6abc:	682b      	ldr	r3, [r5, #0]
    6abe:	2b00      	cmp	r3, #0
    6ac0:	db1c      	blt.n	6afc <mayfly_xtal_stop_calc+0x16c>
    6ac2:	429e      	cmp	r6, r3
    6ac4:	d21a      	bcs.n	6afc <mayfly_xtal_stop_calc+0x16c>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    6ac6:	1b9b      	subs	r3, r3, r6
			ticker_status =
    6ac8:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    6aca:	b29b      	uxth	r3, r3
			ticker_status =
    6acc:	493b      	ldr	r1, [pc, #236]	; (6bbc <mayfly_xtal_stop_calc+0x22c>)
    6ace:	9105      	str	r1, [sp, #20]
    6ad0:	9302      	str	r3, [sp, #8]
    6ad2:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    6ad6:	9506      	str	r5, [sp, #24]
    6ad8:	9004      	str	r0, [sp, #16]
    6ada:	9003      	str	r0, [sp, #12]
    6adc:	9001      	str	r0, [sp, #4]
    6ade:	9000      	str	r0, [sp, #0]
    6ae0:	2101      	movs	r1, #1
    6ae2:	f7fd fb27 	bl	4134 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6ae6:	f030 0302 	bics.w	r3, r0, #2
    6aea:	d007      	beq.n	6afc <mayfly_xtal_stop_calc+0x16c>
    6aec:	4b2c      	ldr	r3, [pc, #176]	; (6ba0 <mayfly_xtal_stop_calc+0x210>)
    6aee:	9301      	str	r3, [sp, #4]
    6af0:	9300      	str	r3, [sp, #0]
    6af2:	4a2c      	ldr	r2, [pc, #176]	; (6ba4 <mayfly_xtal_stop_calc+0x214>)
    6af4:	4b2c      	ldr	r3, [pc, #176]	; (6ba8 <mayfly_xtal_stop_calc+0x218>)
    6af6:	492d      	ldr	r1, [pc, #180]	; (6bac <mayfly_xtal_stop_calc+0x21c>)
    6af8:	4831      	ldr	r0, [pc, #196]	; (6bc0 <mayfly_xtal_stop_calc+0x230>)
    6afa:	e76e      	b.n	69da <mayfly_xtal_stop_calc+0x4a>
		if (!conn_curr || !conn_next) {
    6afc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    6afe:	2e00      	cmp	r6, #0
    6b00:	d092      	beq.n	6a28 <mayfly_xtal_stop_calc+0x98>
    6b02:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    6b04:	2d00      	cmp	r5, #0
    6b06:	d08f      	beq.n	6a28 <mayfly_xtal_stop_calc+0x98>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    6b08:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    6b0a:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    6b0c:	429a      	cmp	r2, r3
    6b0e:	d18b      	bne.n	6a28 <mayfly_xtal_stop_calc+0x98>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    6b10:	482c      	ldr	r0, [pc, #176]	; (6bc4 <mayfly_xtal_stop_calc+0x234>)
    6b12:	b292      	uxth	r2, r2
    6b14:	fba2 0100 	umull	r0, r1, r2, r0
    6b18:	f240 1323 	movw	r3, #291	; 0x123
    6b1c:	fb03 1102 	mla	r1, r3, r2, r1
    6b20:	a31b      	add	r3, pc, #108	; (adr r3, 6b90 <mayfly_xtal_stop_calc+0x200>)
    6b22:	e9d3 2300 	ldrd	r2, r3, [r3]
    6b26:	f7f9 fb9f 	bl	268 <__aeabi_uldivmod>
    6b2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6b2c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    6b30:	2200      	movs	r2, #0
    6b32:	4298      	cmp	r0, r3
    6b34:	d318      	bcc.n	6b68 <mayfly_xtal_stop_calc+0x1d8>
    6b36:	b102      	cbz	r2, 6b3a <mayfly_xtal_stop_calc+0x1aa>
    6b38:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    6b3a:	f996 201d 	ldrsb.w	r2, [r6, #29]
    6b3e:	2a00      	cmp	r2, #0
    6b40:	f995 201d 	ldrsb.w	r2, [r5, #29]
    6b44:	da13      	bge.n	6b6e <mayfly_xtal_stop_calc+0x1de>
    6b46:	2a00      	cmp	r2, #0
    6b48:	f6ff af6e 	blt.w	6a28 <mayfly_xtal_stop_calc+0x98>
			     (ticks_slot_abs +
    6b4c:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    6b4e:	429c      	cmp	r4, r3
    6b50:	f67f af6a 	bls.w	6a28 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_curr);
    6b54:	4630      	mov	r0, r6
    6b56:	f7fe fc49 	bl	53ec <conn_update_req>
				if (status == 2) {
    6b5a:	2802      	cmp	r0, #2
    6b5c:	f47f af64 	bne.w	6a28 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_next);
    6b60:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    6b62:	f7fe fc43 	bl	53ec <conn_update_req>
    6b66:	e75f      	b.n	6a28 <mayfly_xtal_stop_calc+0x98>
				ticks_to_expire -= ticks_conn_interval;
    6b68:	1a1b      	subs	r3, r3, r0
    6b6a:	2201      	movs	r2, #1
    6b6c:	e7e1      	b.n	6b32 <mayfly_xtal_stop_calc+0x1a2>
			} else if (!conn_curr->role && conn_next->role &&
    6b6e:	2a00      	cmp	r2, #0
    6b70:	f6bf af5a 	bge.w	6a28 <mayfly_xtal_stop_calc+0x98>
				    (ticks_slot_abs +
    6b74:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    6b76:	429c      	cmp	r4, r3
    6b78:	f67f af56 	bls.w	6a28 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_next);
    6b7c:	4628      	mov	r0, r5
    6b7e:	f7fe fc35 	bl	53ec <conn_update_req>
				if (status == 2) {
    6b82:	2802      	cmp	r0, #2
    6b84:	f47f af50 	bne.w	6a28 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_curr);
    6b88:	980a      	ldr	r0, [sp, #40]	; 0x28
    6b8a:	e7ea      	b.n	6b62 <mayfly_xtal_stop_calc+0x1d2>
    6b8c:	f3af 8000 	nop.w
    6b90:	1afd498d 	.word	0x1afd498d
    6b94:	00000007 	.word	0x00000007
    6b98:	00005361 	.word	0x00005361
    6b9c:	200005b0 	.word	0x200005b0
    6ba0:	0000ceef 	.word	0x0000ceef
    6ba4:	0000d7a6 	.word	0x0000d7a6
    6ba8:	0000e1b3 	.word	0x0000e1b3
    6bac:	0000d71b 	.word	0x0000d71b
    6bb0:	0000ec95 	.word	0x0000ec95
    6bb4:	0000e93a 	.word	0x0000e93a
    6bb8:	0000e964 	.word	0x0000e964
    6bbc:	00005365 	.word	0x00005365
    6bc0:	0000e3ec 	.word	0x0000e3ec
    6bc4:	09ce5400 	.word	0x09ce5400

00006bc8 <preempt_calc>:
{
    6bc8:	b570      	push	{r4, r5, r6, lr}
    6bca:	4614      	mov	r4, r2
    6bcc:	460e      	mov	r6, r1
    6bce:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    6bd0:	f7fd fbce 	bl	4370 <ticker_ticks_now_get>
	u32_t diff =
    6bd4:	4621      	mov	r1, r4
    6bd6:	f7fd fbcd 	bl	4374 <ticker_ticks_diff_get>
	diff += 3;
    6bda:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    6bdc:	2c09      	cmp	r4, #9
    6bde:	d90f      	bls.n	6c00 <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
    6be0:	2100      	movs	r1, #0
    6be2:	4608      	mov	r0, r1
    6be4:	f7fe fdf4 	bl	57d0 <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    6be8:	4632      	mov	r2, r6
    6bea:	2100      	movs	r1, #0
    6bec:	4628      	mov	r0, r5
    6bee:	f7ff fe93 	bl	6918 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    6bf2:	68ab      	ldr	r3, [r5, #8]
    6bf4:	441c      	add	r4, r3
		if (diff <
    6bf6:	2c26      	cmp	r4, #38	; 0x26
    6bf8:	d800      	bhi.n	6bfc <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
    6bfa:	60ac      	str	r4, [r5, #8]
		return 1;
    6bfc:	2001      	movs	r0, #1
}
    6bfe:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    6c00:	2000      	movs	r0, #0
    6c02:	bd70      	pop	{r4, r5, r6, pc}

00006c04 <adv_scan_configure.constprop.44>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    6c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    6c06:	ad02      	add	r5, sp, #8
    6c08:	4b10      	ldr	r3, [pc, #64]	; (6c4c <adv_scan_configure.constprop.44+0x48>)
    6c0a:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    6c0e:	4604      	mov	r4, r0
	radio_reset();
    6c10:	f004 f976 	bl	af00 <radio_reset>
	radio_tx_power_set(0);
    6c14:	2000      	movs	r0, #0
    6c16:	f004 f99d 	bl	af54 <radio_tx_power_set>
	radio_isr_set(isr);
    6c1a:	480d      	ldr	r0, [pc, #52]	; (6c50 <adv_scan_configure.constprop.44+0x4c>)
    6c1c:	f004 f93a 	bl	ae94 <radio_isr_set>
	radio_phy_set(phy, flags);
    6c20:	2101      	movs	r1, #1
    6c22:	4620      	mov	r0, r4
    6c24:	f004 f986 	bl	af34 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    6c28:	4628      	mov	r0, r5
    6c2a:	f004 f9b1 	bl	af90 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    6c2e:	0062      	lsls	r2, r4, #1
    6c30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    6c34:	21ff      	movs	r1, #255	; 0xff
    6c36:	2008      	movs	r0, #8
    6c38:	f004 f9c2 	bl	afc0 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    6c3c:	4905      	ldr	r1, [pc, #20]	; (6c54 <adv_scan_configure.constprop.44+0x50>)
    6c3e:	f240 605b 	movw	r0, #1627	; 0x65b
    6c42:	f004 fa4d 	bl	b0e0 <radio_crc_configure>
}
    6c46:	b003      	add	sp, #12
    6c48:	bd30      	pop	{r4, r5, pc}
    6c4a:	bf00      	nop
    6c4c:	8e89bed6 	.word	0x8e89bed6
    6c50:	00007f81 	.word	0x00007f81
    6c54:	00555555 	.word	0x00555555

00006c58 <event_scan>:
{
    6c58:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    6c5a:	4b58      	ldr	r3, [pc, #352]	; (6dbc <event_scan+0x164>)
    6c5c:	7cda      	ldrb	r2, [r3, #19]
{
    6c5e:	b08a      	sub	sp, #40	; 0x28
    6c60:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    6c62:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    6c66:	461c      	mov	r4, r3
    6c68:	b172      	cbz	r2, 6c88 <event_scan+0x30>
    6c6a:	4b55      	ldr	r3, [pc, #340]	; (6dc0 <event_scan+0x168>)
    6c6c:	9301      	str	r3, [sp, #4]
    6c6e:	9300      	str	r3, [sp, #0]
    6c70:	4a54      	ldr	r2, [pc, #336]	; (6dc4 <event_scan+0x16c>)
    6c72:	4b55      	ldr	r3, [pc, #340]	; (6dc8 <event_scan+0x170>)
    6c74:	4955      	ldr	r1, [pc, #340]	; (6dcc <event_scan+0x174>)
    6c76:	4856      	ldr	r0, [pc, #344]	; (6dd0 <event_scan+0x178>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    6c78:	f7fa fbc4 	bl	1404 <printk>
    6c7c:	4040      	eors	r0, r0
    6c7e:	f380 8811 	msr	BASEPRI, r0
    6c82:	f04f 0004 	mov.w	r0, #4
    6c86:	df02      	svc	2
    6c88:	7c1b      	ldrb	r3, [r3, #16]
    6c8a:	b2db      	uxtb	r3, r3
    6c8c:	2b06      	cmp	r3, #6
    6c8e:	d007      	beq.n	6ca0 <event_scan+0x48>
    6c90:	4b4b      	ldr	r3, [pc, #300]	; (6dc0 <event_scan+0x168>)
    6c92:	9301      	str	r3, [sp, #4]
    6c94:	9300      	str	r3, [sp, #0]
    6c96:	4a4b      	ldr	r2, [pc, #300]	; (6dc4 <event_scan+0x16c>)
    6c98:	4b4b      	ldr	r3, [pc, #300]	; (6dc8 <event_scan+0x170>)
    6c9a:	494c      	ldr	r1, [pc, #304]	; (6dcc <event_scan+0x174>)
    6c9c:	484d      	ldr	r0, [pc, #308]	; (6dd4 <event_scan+0x17c>)
    6c9e:	e7eb      	b.n	6c78 <event_scan+0x20>
	_radio.role = ROLE_SCAN;
    6ca0:	2202      	movs	r2, #2
    6ca2:	74e2      	strb	r2, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    6ca4:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    6ca6:	7426      	strb	r6, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    6ca8:	f894 064d 	ldrb.w	r0, [r4, #1613]	; 0x64d
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    6cac:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    6cae:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
	_radio.state = STATE_RX;
    6cb2:	2201      	movs	r2, #1
	_radio.scanner.state = 0;
    6cb4:	f366 0341 	bfi	r3, r6, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    6cb8:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
    6cbc:	7522      	strb	r2, [r4, #20]
	_radio.scanner.state = 0;
    6cbe:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    6cc2:	f7ff ff9f 	bl	6c04 <adv_scan_configure.constprop.44>
	chan_set(37 + _radio.scanner.chan++);
    6cc6:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
    6cca:	f3c3 0081 	ubfx	r0, r3, #2, #2
    6cce:	1c42      	adds	r2, r0, #1
    6cd0:	f362 0383 	bfi	r3, r2, #2, #2
    6cd4:	3025      	adds	r0, #37	; 0x25
    6cd6:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
    6cda:	f7fe fdcb 	bl	5874 <chan_set>
	if (_radio.scanner.chan == 3) {
    6cde:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
    6ce2:	f003 020c 	and.w	r2, r3, #12
    6ce6:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0;
    6ce8:	bf08      	it	eq
    6cea:	f366 0383 	bfieq	r3, r6, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
    6cee:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0;
    6cf2:	bf08      	it	eq
    6cf4:	f884 364c 	strbeq.w	r3, [r4, #1612]	; 0x64c
	radio_tmr_tifs_set(RADIO_TIFS);
    6cf8:	f004 faa0 	bl	b23c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    6cfc:	2300      	movs	r3, #0
    6cfe:	4619      	mov	r1, r3
    6d00:	461a      	mov	r2, r3
    6d02:	4618      	mov	r0, r3
    6d04:	f004 fa16 	bl	b134 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    6d08:	f8d4 36a0 	ldr.w	r3, [r4, #1696]	; 0x6a0
    6d0c:	f894 26a5 	ldrb.w	r2, [r4, #1701]	; 0x6a5
    6d10:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    6d14:	3008      	adds	r0, #8
    6d16:	f004 f981 	bl	b01c <radio_pkt_rx_set>
	radio_rssi_measure();
    6d1a:	f004 fa23 	bl	b164 <radio_rssi_measure>
	pdu = (void *)radio_pkt_scratch_get();
    6d1e:	f004 f9f9 	bl	b114 <radio_pkt_scratch_get>
	if (_radio.scanner.filter_policy) {
    6d22:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
    6d26:	f013 0f30 	tst.w	r3, #48	; 0x30
    6d2a:	d007      	beq.n	6d3c <event_scan+0xe4>
		struct ll_filter *wl = ctrl_filter_get(true);
    6d2c:	2001      	movs	r0, #1
    6d2e:	f003 fec9 	bl	aac4 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    6d32:	1c82      	adds	r2, r0, #2
    6d34:	7841      	ldrb	r1, [r0, #1]
    6d36:	7800      	ldrb	r0, [r0, #0]
    6d38:	f004 fa36 	bl	b1a8 <radio_filter_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    6d3c:	68e2      	ldr	r2, [r4, #12]
    6d3e:	f105 0109 	add.w	r1, r5, #9
    6d42:	2000      	movs	r0, #0
    6d44:	f004 fa86 	bl	b254 <radio_tmr_start>
	radio_tmr_end_capture();
    6d48:	f004 fb54 	bl	b3f4 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    6d4c:	2106      	movs	r1, #6
    6d4e:	462a      	mov	r2, r5
    6d50:	4821      	ldr	r0, [pc, #132]	; (6dd8 <event_scan+0x180>)
    6d52:	f7ff ff39 	bl	6bc8 <preempt_calc>
    6d56:	4601      	mov	r1, r0
    6d58:	b130      	cbz	r0, 6d68 <event_scan+0x110>
		_radio.state = STATE_STOP;
    6d5a:	2304      	movs	r3, #4
    6d5c:	7523      	strb	r3, [r4, #20]
}
    6d5e:	b00a      	add	sp, #40	; 0x28
    6d60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    6d64:	f004 b980 	b.w	b068 <radio_disable>
		ret = ticker_start(
    6d68:	f44f 53d4 	mov.w	r3, #6784	; 0x1a80
    6d6c:	9308      	str	r3, [sp, #32]
    6d6e:	4b1b      	ldr	r3, [pc, #108]	; (6ddc <event_scan+0x184>)
    6d70:	9307      	str	r3, [sp, #28]
    6d72:	2204      	movs	r2, #4
    6d74:	4b1a      	ldr	r3, [pc, #104]	; (6de0 <event_scan+0x188>)
    6d76:	9206      	str	r2, [sp, #24]
    6d78:	9305      	str	r3, [sp, #20]
    6d7a:	9004      	str	r0, [sp, #16]
    6d7c:	9003      	str	r0, [sp, #12]
    6d7e:	9002      	str	r0, [sp, #8]
    6d80:	9001      	str	r0, [sp, #4]
    6d82:	f8d4 365c 	ldr.w	r3, [r4, #1628]	; 0x65c
    6d86:	3309      	adds	r3, #9
    6d88:	9300      	str	r3, [sp, #0]
    6d8a:	462b      	mov	r3, r5
    6d8c:	f7fd f982 	bl	4094 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    6d90:	f030 0302 	bics.w	r3, r0, #2
    6d94:	d007      	beq.n	6da6 <event_scan+0x14e>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    6d96:	4b0a      	ldr	r3, [pc, #40]	; (6dc0 <event_scan+0x168>)
    6d98:	9301      	str	r3, [sp, #4]
    6d9a:	9300      	str	r3, [sp, #0]
    6d9c:	4a09      	ldr	r2, [pc, #36]	; (6dc4 <event_scan+0x16c>)
    6d9e:	4b0a      	ldr	r3, [pc, #40]	; (6dc8 <event_scan+0x170>)
    6da0:	490a      	ldr	r1, [pc, #40]	; (6dcc <event_scan+0x174>)
    6da2:	4810      	ldr	r0, [pc, #64]	; (6de4 <event_scan+0x18c>)
    6da4:	e768      	b.n	6c78 <event_scan+0x20>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    6da6:	4619      	mov	r1, r3
    6da8:	4618      	mov	r0, r3
    6daa:	4a0f      	ldr	r2, [pc, #60]	; (6de8 <event_scan+0x190>)
    6dac:	f7fd fa8e 	bl	42cc <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    6db0:	f030 0302 	bics.w	r3, r0, #2
    6db4:	d1ef      	bne.n	6d96 <event_scan+0x13e>
}
    6db6:	b00a      	add	sp, #40	; 0x28
    6db8:	bd70      	pop	{r4, r5, r6, pc}
    6dba:	bf00      	nop
    6dbc:	200005b0 	.word	0x200005b0
    6dc0:	0000ceef 	.word	0x0000ceef
    6dc4:	0000d7a6 	.word	0x0000d7a6
    6dc8:	0000e2c9 	.word	0x0000e2c9
    6dcc:	0000d71b 	.word	0x0000d71b
    6dd0:	0000e479 	.word	0x0000e479
    6dd4:	0000e4b3 	.word	0x0000e4b3
    6dd8:	20000bec 	.word	0x20000bec
    6ddc:	00005e45 	.word	0x00005e45
    6de0:	0000606d 	.word	0x0000606d
    6de4:	0000e4f2 	.word	0x0000e4f2
    6de8:	00005fe5 	.word	0x00005fe5

00006dec <event_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
    6dec:	4b36      	ldr	r3, [pc, #216]	; (6ec8 <event_adv+0xdc>)
    6dee:	7cda      	ldrb	r2, [r3, #19]
{
    6df0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6df2:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    6df4:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    6df8:	461c      	mov	r4, r3
    6dfa:	b172      	cbz	r2, 6e1a <event_adv+0x2e>
    6dfc:	4b33      	ldr	r3, [pc, #204]	; (6ecc <event_adv+0xe0>)
    6dfe:	9301      	str	r3, [sp, #4]
    6e00:	9300      	str	r3, [sp, #0]
    6e02:	4a33      	ldr	r2, [pc, #204]	; (6ed0 <event_adv+0xe4>)
    6e04:	4b33      	ldr	r3, [pc, #204]	; (6ed4 <event_adv+0xe8>)
    6e06:	4934      	ldr	r1, [pc, #208]	; (6ed8 <event_adv+0xec>)
    6e08:	4834      	ldr	r0, [pc, #208]	; (6edc <event_adv+0xf0>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    6e0a:	f7fa fafb 	bl	1404 <printk>
    6e0e:	4040      	eors	r0, r0
    6e10:	f380 8811 	msr	BASEPRI, r0
    6e14:	f04f 0004 	mov.w	r0, #4
    6e18:	df02      	svc	2
    6e1a:	7c1b      	ldrb	r3, [r3, #16]
    6e1c:	b2db      	uxtb	r3, r3
    6e1e:	2b05      	cmp	r3, #5
    6e20:	d007      	beq.n	6e32 <event_adv+0x46>
    6e22:	4b2a      	ldr	r3, [pc, #168]	; (6ecc <event_adv+0xe0>)
    6e24:	9301      	str	r3, [sp, #4]
    6e26:	9300      	str	r3, [sp, #0]
    6e28:	4a29      	ldr	r2, [pc, #164]	; (6ed0 <event_adv+0xe4>)
    6e2a:	4b2a      	ldr	r3, [pc, #168]	; (6ed4 <event_adv+0xe8>)
    6e2c:	492a      	ldr	r1, [pc, #168]	; (6ed8 <event_adv+0xec>)
    6e2e:	482c      	ldr	r0, [pc, #176]	; (6ee0 <event_adv+0xf4>)
    6e30:	e7eb      	b.n	6e0a <event_adv+0x1e>
	_radio.ticks_anchor = ticks_at_expire;
    6e32:	60a0      	str	r0, [r4, #8]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    6e34:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	_radio.role = ROLE_ADV;
    6e38:	2601      	movs	r6, #1
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    6e3a:	f000 0007 	and.w	r0, r0, #7
	_radio.role = ROLE_ADV;
    6e3e:	74e6      	strb	r6, [r4, #19]
	_radio.ticker_id_prepare = 0;
    6e40:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    6e42:	7463      	strb	r3, [r4, #17]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    6e44:	f7ff fede 	bl	6c04 <adv_scan_configure.constprop.44>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
    6e48:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    6e4c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    6e50:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    6e54:	f363 0202 	bfi	r2, r3, #0, #3
    6e58:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	adv_setup();
    6e5c:	f7fe fddc 	bl	5a18 <adv_setup>
	if (_radio.advertiser.filter_policy) {
    6e60:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    6e64:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    6e68:	d007      	beq.n	6e7a <event_adv+0x8e>
		struct ll_filter *wl = ctrl_filter_get(true);
    6e6a:	4630      	mov	r0, r6
    6e6c:	f003 fe2a 	bl	aac4 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    6e70:	1c82      	adds	r2, r0, #2
    6e72:	7841      	ldrb	r1, [r0, #1]
    6e74:	7800      	ldrb	r0, [r0, #0]
    6e76:	f004 f997 	bl	b1a8 <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    6e7a:	68e2      	ldr	r2, [r4, #12]
    6e7c:	f105 0109 	add.w	r1, r5, #9
    6e80:	2001      	movs	r0, #1
    6e82:	f004 f9e7 	bl	b254 <radio_tmr_start>
	radio_tmr_end_capture();
    6e86:	f004 fab5 	bl	b3f4 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    6e8a:	462a      	mov	r2, r5
    6e8c:	2105      	movs	r1, #5
    6e8e:	4815      	ldr	r0, [pc, #84]	; (6ee4 <event_adv+0xf8>)
    6e90:	f7ff fe9a 	bl	6bc8 <preempt_calc>
    6e94:	4603      	mov	r3, r0
    6e96:	b130      	cbz	r0, 6ea6 <event_adv+0xba>
		_radio.state = STATE_STOP;
    6e98:	2304      	movs	r3, #4
    6e9a:	7523      	strb	r3, [r4, #20]
}
    6e9c:	b002      	add	sp, #8
    6e9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    6ea2:	f004 b8e1 	b.w	b068 <radio_disable>
		ticker_status =
    6ea6:	4a10      	ldr	r2, [pc, #64]	; (6ee8 <event_adv+0xfc>)
    6ea8:	4601      	mov	r1, r0
    6eaa:	f7fd fa0f 	bl	42cc <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6eae:	f030 0302 	bics.w	r3, r0, #2
    6eb2:	d007      	beq.n	6ec4 <event_adv+0xd8>
    6eb4:	4b05      	ldr	r3, [pc, #20]	; (6ecc <event_adv+0xe0>)
    6eb6:	9301      	str	r3, [sp, #4]
    6eb8:	9300      	str	r3, [sp, #0]
    6eba:	4a05      	ldr	r2, [pc, #20]	; (6ed0 <event_adv+0xe4>)
    6ebc:	4b05      	ldr	r3, [pc, #20]	; (6ed4 <event_adv+0xe8>)
    6ebe:	4906      	ldr	r1, [pc, #24]	; (6ed8 <event_adv+0xec>)
    6ec0:	480a      	ldr	r0, [pc, #40]	; (6eec <event_adv+0x100>)
    6ec2:	e7a2      	b.n	6e0a <event_adv+0x1e>
}
    6ec4:	b002      	add	sp, #8
    6ec6:	bd70      	pop	{r4, r5, r6, pc}
    6ec8:	200005b0 	.word	0x200005b0
    6ecc:	0000ceef 	.word	0x0000ceef
    6ed0:	0000d7a6 	.word	0x0000d7a6
    6ed4:	0000e25c 	.word	0x0000e25c
    6ed8:	0000d71b 	.word	0x0000d71b
    6edc:	0000e479 	.word	0x0000e479
    6ee0:	0000e43a 	.word	0x0000e43a
    6ee4:	200005c8 	.word	0x200005c8
    6ee8:	00005fe5 	.word	0x00005fe5
    6eec:	0000e3ec 	.word	0x0000e3ec

00006ef0 <event_stop.constprop.45>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    6ef0:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    6ef2:	4b05      	ldr	r3, [pc, #20]	; (6f08 <event_stop.constprop.45+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6ef4:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    6ef6:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6ef8:	4611      	mov	r1, r2
    6efa:	4610      	mov	r0, r2
    6efc:	f7fc fb0c 	bl	3518 <mayfly_enqueue>
	LL_ASSERT(!retval);
    6f00:	b108      	cbz	r0, 6f06 <event_stop.constprop.45+0x16>
    6f02:	f7ff f899 	bl	6038 <event_stop.part.12>
    6f06:	bd08      	pop	{r3, pc}
    6f08:	20003cf8 	.word	0x20003cf8

00006f0c <event_common_prepare>:
{
    6f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    6f10:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    6f12:	681d      	ldr	r5, [r3, #0]
{
    6f14:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    6f16:	2c00      	cmp	r4, #0
{
    6f18:	4681      	mov	r9, r0
    6f1a:	910b      	str	r1, [sp, #44]	; 0x2c
    6f1c:	4690      	mov	r8, r2
    6f1e:	469b      	mov	fp, r3
    6f20:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    6f24:	da03      	bge.n	6f2e <event_common_prepare+0x22>
		_ticks_xtal_to_start =
    6f26:	9c16      	ldr	r4, [sp, #88]	; 0x58
    6f28:	42ac      	cmp	r4, r5
    6f2a:	bf38      	it	cc
    6f2c:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    6f2e:	42ac      	cmp	r4, r5
    6f30:	4f56      	ldr	r7, [pc, #344]	; (708c <event_common_prepare+0x180>)
    6f32:	d924      	bls.n	6f7e <event_common_prepare+0x72>
		ticker_status =
    6f34:	f241 53e9 	movw	r3, #5609	; 0x15e9
    6f38:	9308      	str	r3, [sp, #32]
    6f3a:	4b55      	ldr	r3, [pc, #340]	; (7090 <event_common_prepare+0x184>)
    6f3c:	9305      	str	r3, [sp, #20]
    6f3e:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    6f40:	1b63      	subs	r3, r4, r5
		ticker_status =
    6f42:	9300      	str	r3, [sp, #0]
    6f44:	9707      	str	r7, [sp, #28]
    6f46:	464b      	mov	r3, r9
    6f48:	9106      	str	r1, [sp, #24]
    6f4a:	9104      	str	r1, [sp, #16]
    6f4c:	9103      	str	r1, [sp, #12]
    6f4e:	9102      	str	r1, [sp, #8]
    6f50:	9101      	str	r1, [sp, #4]
    6f52:	2201      	movs	r2, #1
    6f54:	4608      	mov	r0, r1
    6f56:	f7fd f89d 	bl	4094 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6f5a:	f030 0302 	bics.w	r3, r0, #2
    6f5e:	d034      	beq.n	6fca <event_common_prepare+0xbe>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6f60:	4b4c      	ldr	r3, [pc, #304]	; (7094 <event_common_prepare+0x188>)
    6f62:	9301      	str	r3, [sp, #4]
    6f64:	9300      	str	r3, [sp, #0]
    6f66:	4a4c      	ldr	r2, [pc, #304]	; (7098 <event_common_prepare+0x18c>)
    6f68:	4b4c      	ldr	r3, [pc, #304]	; (709c <event_common_prepare+0x190>)
    6f6a:	494d      	ldr	r1, [pc, #308]	; (70a0 <event_common_prepare+0x194>)
    6f6c:	484d      	ldr	r0, [pc, #308]	; (70a4 <event_common_prepare+0x198>)
		LL_ASSERT(!retval);
    6f6e:	f7fa fa49 	bl	1404 <printk>
    6f72:	4040      	eors	r0, r0
    6f74:	f380 8811 	msr	BASEPRI, r0
    6f78:	f04f 0004 	mov.w	r0, #4
    6f7c:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    6f7e:	d21d      	bcs.n	6fbc <event_common_prepare+0xb0>
		event_active(0, 0, 0, NULL);
    6f80:	2300      	movs	r3, #0
    6f82:	461a      	mov	r2, r3
    6f84:	4619      	mov	r1, r3
    6f86:	4618      	mov	r0, r3
    6f88:	f7ff f880 	bl	608c <event_active>
		ticker_status =
    6f8c:	f241 53fe 	movw	r3, #5630	; 0x15fe
    6f90:	2100      	movs	r1, #0
    6f92:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    6f94:	1b2c      	subs	r4, r5, r4
		ticker_status =
    6f96:	4b44      	ldr	r3, [pc, #272]	; (70a8 <event_common_prepare+0x19c>)
    6f98:	9305      	str	r3, [sp, #20]
    6f9a:	9707      	str	r7, [sp, #28]
    6f9c:	464b      	mov	r3, r9
    6f9e:	9106      	str	r1, [sp, #24]
    6fa0:	9104      	str	r1, [sp, #16]
    6fa2:	9103      	str	r1, [sp, #12]
    6fa4:	9102      	str	r1, [sp, #8]
    6fa6:	9101      	str	r1, [sp, #4]
    6fa8:	9400      	str	r4, [sp, #0]
    6faa:	2201      	movs	r2, #1
    6fac:	4608      	mov	r0, r1
    6fae:	f7fd f871 	bl	4094 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6fb2:	f030 0302 	bics.w	r3, r0, #2
    6fb6:	d1d3      	bne.n	6f60 <event_common_prepare+0x54>
    6fb8:	462c      	mov	r4, r5
    6fba:	e00b      	b.n	6fd4 <event_common_prepare+0xc8>
		event_active(0, 0, 0, NULL);
    6fbc:	2300      	movs	r3, #0
    6fbe:	461a      	mov	r2, r3
    6fc0:	4619      	mov	r1, r3
    6fc2:	4618      	mov	r0, r3
    6fc4:	f7ff f862 	bl	608c <event_active>
		event_xtal(0, 0, 0, NULL);
    6fc8:	2300      	movs	r3, #0
    6fca:	461a      	mov	r2, r3
    6fcc:	4619      	mov	r1, r3
    6fce:	4618      	mov	r0, r3
    6fd0:	f7ff f882 	bl	60d8 <event_xtal>
	_radio.remainder_anchor = remainder;
    6fd4:	4e35      	ldr	r6, [pc, #212]	; (70ac <event_common_prepare+0x1a0>)
    6fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6fd8:	60f3      	str	r3, [r6, #12]
	ticker_status =
    6fda:	f241 6316 	movw	r3, #5654	; 0x1616
    6fde:	9308      	str	r3, [sp, #32]
    6fe0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    6fe2:	9306      	str	r3, [sp, #24]
    6fe4:	2200      	movs	r2, #0
    6fe6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    6fe8:	9305      	str	r3, [sp, #20]
    6fea:	9707      	str	r7, [sp, #28]
    6fec:	464b      	mov	r3, r9
    6fee:	9204      	str	r2, [sp, #16]
    6ff0:	9203      	str	r2, [sp, #12]
    6ff2:	9202      	str	r2, [sp, #8]
    6ff4:	9201      	str	r2, [sp, #4]
    6ff6:	9400      	str	r4, [sp, #0]
    6ff8:	4611      	mov	r1, r2
    6ffa:	4610      	mov	r0, r2
    6ffc:	f7fd f84a 	bl	4094 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7000:	f030 0302 	bics.w	r3, r0, #2
    7004:	d1ac      	bne.n	6f60 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    7006:	2005      	movs	r0, #5
    7008:	f7ff ff72 	bl	6ef0 <event_stop.constprop.45>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    700c:	f8d6 36e8 	ldr.w	r3, [r6, #1768]	; 0x6e8
    7010:	429d      	cmp	r5, r3
    7012:	d023      	beq.n	705c <event_common_prepare+0x150>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    7014:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    7018:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    701c:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    701e:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    7020:	bfbc      	itt	lt
    7022:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    7026:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = (_radio.ticks_active_to_start <
    702a:	f8d6 26e8 	ldr.w	r2, [r6, #1768]	; 0x6e8
    702e:	f8d8 1000 	ldr.w	r1, [r8]
    7032:	428a      	cmp	r2, r1
    7034:	bf38      	it	cc
    7036:	460a      	movcc	r2, r1
		ticker_status =
    7038:	f241 6146 	movw	r1, #5702	; 0x1646
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    703c:	b2a3      	uxth	r3, r4
    703e:	b292      	uxth	r2, r2
		ticker_status =
    7040:	9106      	str	r1, [sp, #24]
    7042:	2100      	movs	r1, #0
    7044:	9302      	str	r3, [sp, #8]
    7046:	9201      	str	r2, [sp, #4]
    7048:	9200      	str	r2, [sp, #0]
    704a:	9104      	str	r1, [sp, #16]
    704c:	9103      	str	r1, [sp, #12]
    704e:	4652      	mov	r2, sl
    7050:	4608      	mov	r0, r1
    7052:	f7fd f86f 	bl	4134 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7056:	f030 0302 	bics.w	r3, r0, #2
    705a:	d181      	bne.n	6f60 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    705c:	20ff      	movs	r0, #255	; 0xff
    705e:	f7ff f929 	bl	62b4 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    7062:	4b13      	ldr	r3, [pc, #76]	; (70b0 <event_common_prepare+0x1a4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    7064:	2201      	movs	r2, #1
    7066:	4611      	mov	r1, r2
    7068:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    706a:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    706e:	f7fc fa53 	bl	3518 <mayfly_enqueue>
		LL_ASSERT(!retval);
    7072:	b138      	cbz	r0, 7084 <event_common_prepare+0x178>
    7074:	4b07      	ldr	r3, [pc, #28]	; (7094 <event_common_prepare+0x188>)
    7076:	9301      	str	r3, [sp, #4]
    7078:	9300      	str	r3, [sp, #0]
    707a:	4a07      	ldr	r2, [pc, #28]	; (7098 <event_common_prepare+0x18c>)
    707c:	4b07      	ldr	r3, [pc, #28]	; (709c <event_common_prepare+0x190>)
    707e:	4908      	ldr	r1, [pc, #32]	; (70a0 <event_common_prepare+0x194>)
    7080:	480c      	ldr	r0, [pc, #48]	; (70b4 <event_common_prepare+0x1a8>)
    7082:	e774      	b.n	6f6e <event_common_prepare+0x62>
}
    7084:	b00d      	add	sp, #52	; 0x34
    7086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    708a:	bf00      	nop
    708c:	00005e45 	.word	0x00005e45
    7090:	0000608d 	.word	0x0000608d
    7094:	0000ceef 	.word	0x0000ceef
    7098:	0000d7a6 	.word	0x0000d7a6
    709c:	0000e226 	.word	0x0000e226
    70a0:	0000d71b 	.word	0x0000d71b
    70a4:	0000e3ec 	.word	0x0000e3ec
    70a8:	000060d9 	.word	0x000060d9
    70ac:	200005b0 	.word	0x200005b0
    70b0:	20003da8 	.word	0x20003da8
    70b4:	0000e911 	.word	0x0000e911

000070b8 <radio_event_adv_prepare>:
{
    70b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    70ba:	4a11      	ldr	r2, [pc, #68]	; (7100 <radio_event_adv_prepare+0x48>)
    70bc:	7c13      	ldrb	r3, [r2, #16]
    70be:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    70c2:	b173      	cbz	r3, 70e2 <radio_event_adv_prepare+0x2a>
    70c4:	4b0f      	ldr	r3, [pc, #60]	; (7104 <radio_event_adv_prepare+0x4c>)
    70c6:	9301      	str	r3, [sp, #4]
    70c8:	9300      	str	r3, [sp, #0]
    70ca:	4a0f      	ldr	r2, [pc, #60]	; (7108 <radio_event_adv_prepare+0x50>)
    70cc:	4b0f      	ldr	r3, [pc, #60]	; (710c <radio_event_adv_prepare+0x54>)
    70ce:	4910      	ldr	r1, [pc, #64]	; (7110 <radio_event_adv_prepare+0x58>)
    70d0:	4810      	ldr	r0, [pc, #64]	; (7114 <radio_event_adv_prepare+0x5c>)
    70d2:	f7fa f997 	bl	1404 <printk>
    70d6:	4040      	eors	r0, r0
    70d8:	f380 8811 	msr	BASEPRI, r0
    70dc:	f04f 0004 	mov.w	r0, #4
    70e0:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    70e2:	2305      	movs	r3, #5
    70e4:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
    70e6:	9403      	str	r4, [sp, #12]
    70e8:	4c0b      	ldr	r4, [pc, #44]	; (7118 <radio_event_adv_prepare+0x60>)
    70ea:	9402      	str	r4, [sp, #8]
    70ec:	9301      	str	r3, [sp, #4]
    70ee:	6a13      	ldr	r3, [r2, #32]
    70f0:	9300      	str	r3, [sp, #0]
    70f2:	f102 031c 	add.w	r3, r2, #28
    70f6:	3218      	adds	r2, #24
    70f8:	f7ff ff08 	bl	6f0c <event_common_prepare>
}
    70fc:	b004      	add	sp, #16
    70fe:	bd10      	pop	{r4, pc}
    7100:	200005b0 	.word	0x200005b0
    7104:	0000ceef 	.word	0x0000ceef
    7108:	0000d7a6 	.word	0x0000d7a6
    710c:	0000e244 	.word	0x0000e244
    7110:	0000d71b 	.word	0x0000d71b
    7114:	0000ea4c 	.word	0x0000ea4c
    7118:	00006ded 	.word	0x00006ded

0000711c <event_scan_prepare>:
{
    711c:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    711e:	4c25      	ldr	r4, [pc, #148]	; (71b4 <event_scan_prepare+0x98>)
    7120:	7c23      	ldrb	r3, [r4, #16]
{
    7122:	b085      	sub	sp, #20
    7124:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    7126:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    712a:	b173      	cbz	r3, 714a <event_scan_prepare+0x2e>
    712c:	4b22      	ldr	r3, [pc, #136]	; (71b8 <event_scan_prepare+0x9c>)
    712e:	9301      	str	r3, [sp, #4]
    7130:	9300      	str	r3, [sp, #0]
    7132:	4a22      	ldr	r2, [pc, #136]	; (71bc <event_scan_prepare+0xa0>)
    7134:	4b22      	ldr	r3, [pc, #136]	; (71c0 <event_scan_prepare+0xa4>)
    7136:	4923      	ldr	r1, [pc, #140]	; (71c4 <event_scan_prepare+0xa8>)
    7138:	4823      	ldr	r0, [pc, #140]	; (71c8 <event_scan_prepare+0xac>)
		LL_ASSERT(!retval);
    713a:	f7fa f963 	bl	1404 <printk>
    713e:	4040      	eors	r0, r0
    7140:	f380 8811 	msr	BASEPRI, r0
    7144:	f04f 0004 	mov.w	r0, #4
    7148:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    714a:	2306      	movs	r3, #6
    714c:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    714e:	9203      	str	r2, [sp, #12]
    7150:	9301      	str	r3, [sp, #4]
    7152:	4a1e      	ldr	r2, [pc, #120]	; (71cc <event_scan_prepare+0xb0>)
    7154:	f8d4 3644 	ldr.w	r3, [r4, #1604]	; 0x644
    7158:	9202      	str	r2, [sp, #8]
    715a:	9300      	str	r3, [sp, #0]
    715c:	f204 623c 	addw	r2, r4, #1596	; 0x63c
    7160:	f504 63c8 	add.w	r3, r4, #1600	; 0x640
    7164:	f7ff fed2 	bl	6f0c <event_common_prepare>
	if (_radio.scanner.conn) {
    7168:	f8d4 366c 	ldr.w	r3, [r4, #1644]	; 0x66c
    716c:	b303      	cbz	r3, 71b0 <event_scan_prepare+0x94>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    716e:	f8d4 363c 	ldr.w	r3, [r4, #1596]	; 0x63c
    7172:	2b00      	cmp	r3, #0
    7174:	da0c      	bge.n	7190 <event_scan_prepare+0x74>
			u32_t ticks_prepare_to_start =
    7176:	f8d4 1644 	ldr.w	r1, [r4, #1604]	; 0x644
    717a:	f8d4 2640 	ldr.w	r2, [r4, #1600]	; 0x640
				(_radio.scanner.hdr.ticks_xtal_to_start &
    717e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    7182:	4291      	cmp	r1, r2
    7184:	bf2c      	ite	cs
    7186:	ebc3 0301 	rsbcs	r3, r3, r1
    718a:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    718e:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    7190:	4b0f      	ldr	r3, [pc, #60]	; (71d0 <event_scan_prepare+0xb4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    7192:	2201      	movs	r2, #1
    7194:	4611      	mov	r1, r2
    7196:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    7198:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    719a:	f7fc f9bd 	bl	3518 <mayfly_enqueue>
		LL_ASSERT(!retval);
    719e:	b138      	cbz	r0, 71b0 <event_scan_prepare+0x94>
    71a0:	4b05      	ldr	r3, [pc, #20]	; (71b8 <event_scan_prepare+0x9c>)
    71a2:	9301      	str	r3, [sp, #4]
    71a4:	9300      	str	r3, [sp, #0]
    71a6:	4a05      	ldr	r2, [pc, #20]	; (71bc <event_scan_prepare+0xa0>)
    71a8:	4b05      	ldr	r3, [pc, #20]	; (71c0 <event_scan_prepare+0xa4>)
    71aa:	4906      	ldr	r1, [pc, #24]	; (71c4 <event_scan_prepare+0xa8>)
    71ac:	4809      	ldr	r0, [pc, #36]	; (71d4 <event_scan_prepare+0xb8>)
    71ae:	e7c4      	b.n	713a <event_scan_prepare+0x1e>
}
    71b0:	b005      	add	sp, #20
    71b2:	bd30      	pop	{r4, r5, pc}
    71b4:	200005b0 	.word	0x200005b0
    71b8:	0000ceef 	.word	0x0000ceef
    71bc:	0000d7a6 	.word	0x0000d7a6
    71c0:	0000e2b6 	.word	0x0000e2b6
    71c4:	0000d71b 	.word	0x0000d71b
    71c8:	0000ea4c 	.word	0x0000ea4c
    71cc:	00006c59 	.word	0x00006c59
    71d0:	20003d28 	.word	0x20003d28
    71d4:	0000e911 	.word	0x0000e911

000071d8 <event_adv_stop>:
{
    71d8:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    71da:	2005      	movs	r0, #5
    71dc:	f7ff fe88 	bl	6ef0 <event_stop.constprop.45>
	ticker_status =
    71e0:	f641 13d6 	movw	r3, #6614	; 0x19d6
    71e4:	2100      	movs	r1, #0
    71e6:	9300      	str	r3, [sp, #0]
    71e8:	2205      	movs	r2, #5
    71ea:	4b0c      	ldr	r3, [pc, #48]	; (721c <event_adv_stop+0x44>)
    71ec:	4608      	mov	r0, r1
    71ee:	f7fc ffef 	bl	41d0 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    71f2:	f030 0302 	bics.w	r3, r0, #2
    71f6:	d00e      	beq.n	7216 <event_adv_stop+0x3e>
    71f8:	4b09      	ldr	r3, [pc, #36]	; (7220 <event_adv_stop+0x48>)
    71fa:	9301      	str	r3, [sp, #4]
    71fc:	9300      	str	r3, [sp, #0]
    71fe:	4a09      	ldr	r2, [pc, #36]	; (7224 <event_adv_stop+0x4c>)
    7200:	4b09      	ldr	r3, [pc, #36]	; (7228 <event_adv_stop+0x50>)
    7202:	490a      	ldr	r1, [pc, #40]	; (722c <event_adv_stop+0x54>)
    7204:	480a      	ldr	r0, [pc, #40]	; (7230 <event_adv_stop+0x58>)
    7206:	f7fa f8fd 	bl	1404 <printk>
    720a:	4040      	eors	r0, r0
    720c:	f380 8811 	msr	BASEPRI, r0
    7210:	f04f 0004 	mov.w	r0, #4
    7214:	df02      	svc	2
}
    7216:	b003      	add	sp, #12
    7218:	f85d fb04 	ldr.w	pc, [sp], #4
    721c:	000065b5 	.word	0x000065b5
    7220:	0000ceef 	.word	0x0000ceef
    7224:	0000d7a6 	.word	0x0000d7a6
    7228:	0000e2a7 	.word	0x0000e2a7
    722c:	0000d71b 	.word	0x0000d71b
    7230:	0000e3ec 	.word	0x0000e3ec

00007234 <packet_rx_allocate.constprop.46>:
static void packet_rx_allocate(u8_t max)
    7234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    7238:	4d21      	ldr	r5, [pc, #132]	; (72c0 <packet_rx_allocate.constprop.46+0x8c>)
	acquire = _radio.packet_rx_acquire + 1;
    723a:	f895 46a6 	ldrb.w	r4, [r5, #1702]	; 0x6a6
	if (acquire == _radio.packet_rx_count) {
    723e:	f895 36a4 	ldrb.w	r3, [r5, #1700]	; 0x6a4
	if (max > _radio.link_rx_data_quota) {
    7242:	f895 96b8 	ldrb.w	r9, [r5, #1720]	; 0x6b8
	acquire = _radio.packet_rx_acquire + 1;
    7246:	3401      	adds	r4, #1
    7248:	b2e4      	uxtb	r4, r4
		acquire = 0;
    724a:	42a3      	cmp	r3, r4
    724c:	bf08      	it	eq
    724e:	2400      	moveq	r4, #0
		link = mem_acquire(&_radio.link_rx_free);
    7250:	f205 67ac 	addw	r7, r5, #1708	; 0x6ac
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    7254:	f205 6894 	addw	r8, r5, #1684	; 0x694
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    7258:	f1b9 0f00 	cmp.w	r9, #0
    725c:	d003      	beq.n	7266 <packet_rx_allocate.constprop.46+0x32>
    725e:	f895 36a5 	ldrb.w	r3, [r5, #1701]	; 0x6a5
    7262:	429c      	cmp	r4, r3
    7264:	d101      	bne.n	726a <packet_rx_allocate.constprop.46+0x36>
    7266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    726a:	4638      	mov	r0, r7
    726c:	f7fc f89b 	bl	33a6 <mem_acquire>
		if (!link) {
    7270:	4606      	mov	r6, r0
    7272:	2800      	cmp	r0, #0
    7274:	d0f7      	beq.n	7266 <packet_rx_allocate.constprop.46+0x32>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    7276:	4640      	mov	r0, r8
    7278:	f7fc f895 	bl	33a6 <mem_acquire>
		if (!node_rx) {
    727c:	b928      	cbnz	r0, 728a <packet_rx_allocate.constprop.46+0x56>
			mem_release(link, &_radio.link_rx_free);
    727e:	4630      	mov	r0, r6
    7280:	4910      	ldr	r1, [pc, #64]	; (72c4 <packet_rx_allocate.constprop.46+0x90>)
}
    7282:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    7286:	f7fc b8a8 	b.w	33da <mem_release>
		node_rx->hdr.onion.link = link;
    728a:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    728c:	f895 26a6 	ldrb.w	r2, [r5, #1702]	; 0x6a6
    7290:	f8d5 36a0 	ldr.w	r3, [r5, #1696]	; 0x6a0
    7294:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    7298:	f885 46a6 	strb.w	r4, [r5, #1702]	; 0x6a6
		if (acquire == _radio.packet_rx_count) {
    729c:	f895 36a4 	ldrb.w	r3, [r5, #1700]	; 0x6a4
		acquire = _radio.packet_rx_acquire + 1;
    72a0:	3401      	adds	r4, #1
    72a2:	b2e4      	uxtb	r4, r4
			acquire = 0;
    72a4:	42a3      	cmp	r3, r4
    72a6:	bf08      	it	eq
    72a8:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    72aa:	f895 36b8 	ldrb.w	r3, [r5, #1720]	; 0x6b8
    72ae:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    72b2:	3b01      	subs	r3, #1
    72b4:	f885 36b8 	strb.w	r3, [r5, #1720]	; 0x6b8
    72b8:	fa5f f989 	uxtb.w	r9, r9
    72bc:	e7cc      	b.n	7258 <packet_rx_allocate.constprop.46+0x24>
    72be:	bf00      	nop
    72c0:	200005b0 	.word	0x200005b0
    72c4:	20000c5c 	.word	0x20000c5c

000072c8 <common_init>:
{
    72c8:	b513      	push	{r0, r1, r4, lr}
	if (_radio.connection_count) {
    72ca:	4c33      	ldr	r4, [pc, #204]	; (7398 <common_init+0xd0>)
    72cc:	f894 267c 	ldrb.w	r2, [r4, #1660]	; 0x67c
    72d0:	2a00      	cmp	r2, #0
    72d2:	d040      	beq.n	7356 <common_init+0x8e>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    72d4:	f504 63cf 	add.w	r3, r4, #1656	; 0x678
    72d8:	f44f 7182 	mov.w	r1, #260	; 0x104
    72dc:	f8d4 0674 	ldr.w	r0, [r4, #1652]	; 0x674
    72e0:	f7fc f83a 	bl	3358 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    72e4:	4b2d      	ldr	r3, [pc, #180]	; (739c <common_init+0xd4>)
    72e6:	f894 269e 	ldrb.w	r2, [r4, #1694]	; 0x69e
    72ea:	f8b4 169c 	ldrh.w	r1, [r4, #1692]	; 0x69c
    72ee:	f8d4 0690 	ldr.w	r0, [r4, #1680]	; 0x690
    72f2:	f7fc f831 	bl	3358 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    72f6:	f894 16a4 	ldrb.w	r1, [r4, #1700]	; 0x6a4
    72fa:	f894 267c 	ldrb.w	r2, [r4, #1660]	; 0x67c
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    72fe:	4b28      	ldr	r3, [pc, #160]	; (73a0 <common_init+0xd8>)
    7300:	f8d4 06a8 	ldr.w	r0, [r4, #1704]	; 0x6a8
    7304:	440a      	add	r2, r1
    7306:	2108      	movs	r1, #8
    7308:	f7fc f826 	bl	3358 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    730c:	4b25      	ldr	r3, [pc, #148]	; (73a4 <common_init+0xdc>)
    730e:	f8d4 06bc 	ldr.w	r0, [r4, #1724]	; 0x6bc
    7312:	2202      	movs	r2, #2
    7314:	2124      	movs	r1, #36	; 0x24
    7316:	f7fc f81f 	bl	3358 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    731a:	f894 26d8 	ldrb.w	r2, [r4, #1752]	; 0x6d8
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    731e:	f8d4 06c4 	ldr.w	r0, [r4, #1732]	; 0x6c4
    7322:	4b21      	ldr	r3, [pc, #132]	; (73a8 <common_init+0xe0>)
    7324:	f8b4 16cc 	ldrh.w	r1, [r4, #1740]	; 0x6cc
    7328:	3a01      	subs	r2, #1
    732a:	b292      	uxth	r2, r2
    732c:	f7fc f814 	bl	3358 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    7330:	481b      	ldr	r0, [pc, #108]	; (73a0 <common_init+0xd8>)
    7332:	f7fc f838 	bl	33a6 <mem_acquire>
	LL_ASSERT(link);
    7336:	b988      	cbnz	r0, 735c <common_init+0x94>
    7338:	4b1c      	ldr	r3, [pc, #112]	; (73ac <common_init+0xe4>)
    733a:	9301      	str	r3, [sp, #4]
    733c:	9300      	str	r3, [sp, #0]
    733e:	4a1c      	ldr	r2, [pc, #112]	; (73b0 <common_init+0xe8>)
    7340:	4b1c      	ldr	r3, [pc, #112]	; (73b4 <common_init+0xec>)
    7342:	491d      	ldr	r1, [pc, #116]	; (73b8 <common_init+0xf0>)
    7344:	481d      	ldr	r0, [pc, #116]	; (73bc <common_init+0xf4>)
    7346:	f7fa f85d 	bl	1404 <printk>
    734a:	4040      	eors	r0, r0
    734c:	f380 8811 	msr	BASEPRI, r0
    7350:	f04f 0004 	mov.w	r0, #4
    7354:	df02      	svc	2
		_radio.conn_free = NULL;
    7356:	f8c4 2678 	str.w	r2, [r4, #1656]	; 0x678
    735a:	e7c3      	b.n	72e4 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    735c:	4a18      	ldr	r2, [pc, #96]	; (73c0 <common_init+0xf8>)
    735e:	1f11      	subs	r1, r2, #4
    7360:	f7fc f867 	bl	3432 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    7364:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    7368:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    736c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[0] = 0xFF;
    7370:	23ff      	movs	r3, #255	; 0xff
    7372:	f884 3686 	strb.w	r3, [r4, #1670]	; 0x686
	_radio.data_chan_map[1] = 0xFF;
    7376:	f884 3687 	strb.w	r3, [r4, #1671]	; 0x687
	_radio.data_chan_map[2] = 0xFF;
    737a:	f884 3688 	strb.w	r3, [r4, #1672]	; 0x688
	_radio.data_chan_map[3] = 0xFF;
    737e:	f884 3689 	strb.w	r3, [r4, #1673]	; 0x689
	_radio.data_chan_map[4] = 0x1F;
    7382:	231f      	movs	r3, #31
    7384:	f884 368a 	strb.w	r3, [r4, #1674]	; 0x68a
	_radio.data_chan_count = 37;
    7388:	2325      	movs	r3, #37	; 0x25
    738a:	f884 368b 	strb.w	r3, [r4, #1675]	; 0x68b
}
    738e:	b002      	add	sp, #8
    7390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    7394:	f7ff bf4e 	b.w	7234 <packet_rx_allocate.constprop.46>
    7398:	200005b0 	.word	0x200005b0
    739c:	20000c44 	.word	0x20000c44
    73a0:	20000c5c 	.word	0x20000c5c
    73a4:	20000c70 	.word	0x20000c70
    73a8:	20000c78 	.word	0x20000c78
    73ac:	0000ceef 	.word	0x0000ceef
    73b0:	0000d7a6 	.word	0x0000d7a6
    73b4:	0000e016 	.word	0x0000e016
    73b8:	0000d71b 	.word	0x0000d71b
    73bc:	0000e9e1 	.word	0x0000e9e1
    73c0:	20000c64 	.word	0x20000c64

000073c4 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    73c4:	4b02      	ldr	r3, [pc, #8]	; (73d0 <mayfly_xtal_start+0xc>)
    73c6:	6818      	ldr	r0, [r3, #0]
    73c8:	6843      	ldr	r3, [r0, #4]
    73ca:	2100      	movs	r1, #0
    73cc:	681b      	ldr	r3, [r3, #0]
    73ce:	4718      	bx	r3
    73d0:	200005b0 	.word	0x200005b0

000073d4 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    73d4:	4b02      	ldr	r3, [pc, #8]	; (73e0 <mayfly_xtal_stop+0xc>)
    73d6:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    73d8:	6843      	ldr	r3, [r0, #4]
    73da:	2100      	movs	r1, #0
    73dc:	685b      	ldr	r3, [r3, #4]
    73de:	4718      	bx	r3
    73e0:	200005b0 	.word	0x200005b0

000073e4 <chan_sel_2>:
{
    73e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    73e6:	4048      	eors	r0, r1
    73e8:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    73ea:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    73ee:	2608      	movs	r6, #8
	o = 0;
    73f0:	2400      	movs	r4, #0
		o |= (i & 1);
    73f2:	f00e 0501 	and.w	r5, lr, #1
    73f6:	3e01      	subs	r6, #1
    73f8:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    73fc:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    7400:	b2ec      	uxtb	r4, r5
		i >>= 1;
    7402:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    7406:	d1f4      	bne.n	73f2 <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    7408:	0225      	lsls	r5, r4, #8
    740a:	b22d      	sxth	r5, r5
    740c:	b2c0      	uxtb	r0, r0
    740e:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    7412:	4634      	mov	r4, r6
		o |= (i & 1);
    7414:	f000 0601 	and.w	r6, r0, #1
    7418:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    741c:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    7420:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    7424:	b2e4      	uxtb	r4, r4
		i >>= 1;
    7426:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    742a:	d1f3      	bne.n	7414 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    742c:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    742e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    7432:	3f01      	subs	r7, #1
    7434:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    7436:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    743a:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    743c:	d1d5      	bne.n	73ea <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    743e:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    7440:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    7442:	fbb1 f0f4 	udiv	r0, r1, r4
    7446:	fb04 1010 	mls	r0, r4, r0, r1
    744a:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    744c:	08c4      	lsrs	r4, r0, #3
    744e:	f000 0507 	and.w	r5, r0, #7
    7452:	5d14      	ldrb	r4, [r2, r4]
    7454:	412c      	asrs	r4, r5
    7456:	07e4      	lsls	r4, r4, #31
    7458:	d407      	bmi.n	746a <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    745a:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    745c:	f3c1 4107 	ubfx	r1, r1, #16, #8
    7460:	4610      	mov	r0, r2
}
    7462:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    7466:	f7fd bf89 	b.w	537c <chan_sel_remap>
}
    746a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000746c <ctrl_tx_enqueue>:
{
    746c:	b510      	push	{r4, lr}
	    !conn->empty &&
    746e:	f890 40a8 	ldrb.w	r4, [r0, #168]	; 0xa8
    7472:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
	if (
    7476:	f014 0f80 	tst.w	r4, #128	; 0x80
    747a:	d118      	bne.n	74ae <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    747c:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
	    !conn->empty &&
    7480:	b1ab      	cbz	r3, 74ae <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    7482:	0724      	lsls	r4, r4, #28
    7484:	d413      	bmi.n	74ae <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    7486:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
    748a:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    748c:	bf04      	itt	eq
    748e:	681c      	ldreq	r4, [r3, #0]
    7490:	f8c0 40f8 	streq.w	r4, [r0, #248]	; 0xf8
		if (!conn->pkt_tx_ctrl) {
    7494:	b992      	cbnz	r2, 74bc <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    7496:	681a      	ldr	r2, [r3, #0]
    7498:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    749a:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    749c:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
	conn->pkt_tx_ctrl_last = node_tx;
    74a0:	f8c0 10f4 	str.w	r1, [r0, #244]	; 0xf4
	if (node_tx->next == 0) {
    74a4:	680b      	ldr	r3, [r1, #0]
    74a6:	b90b      	cbnz	r3, 74ac <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    74a8:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
    74ac:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    74ae:	b92a      	cbnz	r2, 74bc <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    74b0:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
    74b4:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    74b6:	f8c0 10ec 	str.w	r1, [r0, #236]	; 0xec
    74ba:	e7ef      	b.n	749c <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    74bc:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    74c0:	681a      	ldr	r2, [r3, #0]
    74c2:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    74c4:	6019      	str	r1, [r3, #0]
    74c6:	e7eb      	b.n	74a0 <ctrl_tx_enqueue+0x34>

000074c8 <ctrl_tx_sec_enqueue>:
{
    74c8:	b410      	push	{r4}
	if (conn->pause_tx) {
    74ca:	f890 40a8 	ldrb.w	r4, [r0, #168]	; 0xa8
    74ce:	0724      	lsls	r4, r4, #28
{
    74d0:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    74d2:	d50f      	bpl.n	74f4 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    74d4:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
    74d8:	b931      	cbnz	r1, 74e8 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    74da:	f8d0 10ec 	ldr.w	r1, [r0, #236]	; 0xec
    74de:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    74e0:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
}
    74e4:	bc10      	pop	{r4}
    74e6:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    74e8:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    74ec:	6819      	ldr	r1, [r3, #0]
    74ee:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    74f0:	601a      	str	r2, [r3, #0]
    74f2:	e7f7      	b.n	74e4 <ctrl_tx_sec_enqueue+0x1c>
}
    74f4:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    74f6:	f7ff bfb9 	b.w	746c <ctrl_tx_enqueue>
	...

000074fc <feature_rsp_send>:
{
    74fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    74fe:	4f21      	ldr	r7, [pc, #132]	; (7584 <feature_rsp_send+0x88>)
{
    7500:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7502:	f507 60d8 	add.w	r0, r7, #1728	; 0x6c0
{
    7506:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7508:	f7fb ff4d 	bl	33a6 <mem_acquire>
	if (!node_tx) {
    750c:	4604      	mov	r4, r0
    750e:	b3b0      	cbz	r0, 757e <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    7510:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    7512:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    7514:	f8d7 2680 	ldr.w	r2, [r7, #1664]	; 0x680
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    7518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    751c:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    7520:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    7524:	f043 0310 	orr.w	r3, r3, #16
    7528:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    752c:	79b1      	ldrb	r1, [r6, #6]
    752e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    7532:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
    7536:	f3c1 0110 	ubfx	r1, r1, #0, #17
    753a:	400b      	ands	r3, r1
    753c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	_radio.conn_curr->common.fex_valid = 1;
    7540:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
    7544:	f043 0320 	orr.w	r3, r3, #32
    7548:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    754c:	7903      	ldrb	r3, [r0, #4]
    754e:	f043 0303 	orr.w	r3, r3, #3
    7552:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    7554:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    7556:	2309      	movs	r3, #9
    7558:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    755a:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    755c:	2100      	movs	r1, #0
    755e:	4410      	add	r0, r2
    7560:	f7f9 f876 	bl	650 <memset>
		conn->llcp_features & 0xFF;
    7564:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    7568:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    756a:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    756c:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    756e:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    7570:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    7572:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    7574:	4621      	mov	r1, r4
    7576:	f7ff ffa7 	bl	74c8 <ctrl_tx_sec_enqueue>
	return 0;
    757a:	2000      	movs	r0, #0
    757c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    757e:	2001      	movs	r0, #1
}
    7580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7582:	bf00      	nop
    7584:	200005b0 	.word	0x200005b0

00007588 <event_connection_prepare>:
{
    7588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    758c:	4d76      	ldr	r5, [pc, #472]	; (7768 <event_connection_prepare+0x1e0>)
{
    758e:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    7590:	7c2b      	ldrb	r3, [r5, #16]
{
    7592:	b08f      	sub	sp, #60	; 0x3c
    7594:	4680      	mov	r8, r0
    7596:	4689      	mov	r9, r1
	LL_ASSERT(!_radio.ticker_id_prepare);
    7598:	b173      	cbz	r3, 75b8 <event_connection_prepare+0x30>
    759a:	4b74      	ldr	r3, [pc, #464]	; (776c <event_connection_prepare+0x1e4>)
    759c:	9301      	str	r3, [sp, #4]
    759e:	9300      	str	r3, [sp, #0]
    75a0:	4a73      	ldr	r2, [pc, #460]	; (7770 <event_connection_prepare+0x1e8>)
    75a2:	4b74      	ldr	r3, [pc, #464]	; (7774 <event_connection_prepare+0x1ec>)
    75a4:	4974      	ldr	r1, [pc, #464]	; (7778 <event_connection_prepare+0x1f0>)
    75a6:	4875      	ldr	r0, [pc, #468]	; (777c <event_connection_prepare+0x1f4>)
		LL_ASSERT(!retval);
    75a8:	f7f9 ff2c 	bl	1404 <printk>
    75ac:	4040      	eors	r0, r0
    75ae:	f380 8811 	msr	BASEPRI, r0
    75b2:	f04f 0004 	mov.w	r0, #4
    75b6:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    75b8:	f894 3020 	ldrb.w	r3, [r4, #32]
    75bc:	3307      	adds	r3, #7
    75be:	b2db      	uxtb	r3, r3
    75c0:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    75c2:	f994 301d 	ldrsb.w	r3, [r4, #29]
    75c6:	2b00      	cmp	r3, #0
    75c8:	da09      	bge.n	75de <event_connection_prepare+0x56>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    75ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->slave.window_widening_prepare_us +=
    75cc:	6c61      	ldr	r1, [r4, #68]	; 0x44
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    75ce:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    75d2:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    75d4:	6c21      	ldr	r1, [r4, #64]	; 0x40
		conn->slave.window_widening_prepare_us +=
    75d6:	6463      	str	r3, [r4, #68]	; 0x44
		if (conn->slave.window_widening_prepare_us >
    75d8:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    75da:	bf88      	it	hi
    75dc:	6461      	strhi	r1, [r4, #68]	; 0x44
	conn->latency_prepare += lazy;
    75de:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if (conn->llcp_ack != conn->llcp_req) {
    75e0:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    75e4:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    75e6:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    75e8:	b292      	uxth	r2, r2
    75ea:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    75ec:	4432      	add	r2, r6
    75ee:	b296      	uxth	r6, r2
	if (conn->llcp_ack != conn->llcp_req) {
    75f0:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
    75f4:	429a      	cmp	r2, r3
    75f6:	f000 8240 	beq.w	7a7a <event_connection_prepare+0x4f2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    75fa:	2005      	movs	r0, #5
    75fc:	f7ff fc78 	bl	6ef0 <event_stop.constprop.45>
		switch (conn->llcp_type) {
    7600:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    7604:	3b01      	subs	r3, #1
    7606:	2b03      	cmp	r3, #3
    7608:	f200 8341 	bhi.w	7c8e <event_connection_prepare+0x706>
    760c:	e8df f013 	tbh	[pc, r3, lsl #1]
    7610:	020d0004 	.word	0x020d0004
    7614:	02e802ba 	.word	0x02e802ba
	if (!conn_upd) {
    7618:	f8d5 36ec 	ldr.w	r3, [r5, #1772]	; 0x6ec
    761c:	b90b      	cbnz	r3, 7622 <event_connection_prepare+0x9a>
		_radio.conn_upd = conn;
    761e:	f8c5 46ec 	str.w	r4, [r5, #1772]	; 0x6ec
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    7622:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    7626:	f013 0303 	ands.w	r3, r3, #3
    762a:	d065      	beq.n	76f8 <event_connection_prepare+0x170>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    762c:	4854      	ldr	r0, [pc, #336]	; (7780 <event_connection_prepare+0x1f8>)
    762e:	f7fb feba 	bl	33a6 <mem_acquire>
		if (!node_tx) {
    7632:	4605      	mov	r5, r0
    7634:	2800      	cmp	r0, #0
    7636:	f000 8220 	beq.w	7a7a <event_connection_prepare+0x4f2>
		switch (conn->llcp.conn_upd.state) {
    763a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    763e:	f003 0203 	and.w	r2, r3, #3
    7642:	2a01      	cmp	r2, #1
    7644:	d150      	bne.n	76e8 <event_connection_prepare+0x160>
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    7646:	f36f 0301 	bfc	r3, #0, #2
    764a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		event_counter + conn->latency + 6;
    764e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    7650:	3306      	adds	r3, #6
    7652:	4433      	add	r3, r6
    7654:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    7656:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    765a:	7902      	ldrb	r2, [r0, #4]
    765c:	f042 0203 	orr.w	r2, r2, #3
    7660:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    7662:	220c      	movs	r2, #12
    7664:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    7666:	2200      	movs	r2, #0
    7668:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    766a:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
    766e:	7202      	strb	r2, [r0, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    7670:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    7672:	f240 41e2 	movw	r1, #1250	; 0x4e2
    7676:	fbb2 f2f1 	udiv	r2, r2, r1
    767a:	f8a0 2009 	strh.w	r2, [r0, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    767e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    7682:	f8a0 200b 	strh.w	r2, [r0, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    7686:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
    768a:	f8a0 200d 	strh.w	r2, [r0, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    768e:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
    7692:	f8a0 200f 	strh.w	r2, [r0, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    7696:	f8a0 3011 	strh.w	r3, [r0, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    769a:	6822      	ldr	r2, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    769c:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    76a0:	2a00      	cmp	r2, #0
    76a2:	da0a      	bge.n	76ba <event_connection_prepare+0x132>
			u32_t ticks_prepare_to_start =
    76a4:	68a3      	ldr	r3, [r4, #8]
    76a6:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    76a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    76ac:	428b      	cmp	r3, r1
    76ae:	bf2c      	ite	cs
    76b0:	4443      	addcs	r3, r8
    76b2:	eb08 0301 	addcc.w	r3, r8, r1
    76b6:	1a9b      	subs	r3, r3, r2
    76b8:	67a3      	str	r3, [r4, #120]	; 0x78
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    76ba:	f105 0309 	add.w	r3, r5, #9
    76be:	6763      	str	r3, [r4, #116]	; 0x74
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    76c0:	4b30      	ldr	r3, [pc, #192]	; (7784 <event_connection_prepare+0x1fc>)
    76c2:	4a31      	ldr	r2, [pc, #196]	; (7788 <event_connection_prepare+0x200>)
    76c4:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    76c6:	2201      	movs	r2, #1
    76c8:	4611      	mov	r1, r2
    76ca:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    76cc:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    76ce:	f7fb ff23 	bl	3518 <mayfly_enqueue>
		LL_ASSERT(!retval);
    76d2:	2800      	cmp	r0, #0
    76d4:	f000 81cd 	beq.w	7a72 <event_connection_prepare+0x4ea>
    76d8:	4b24      	ldr	r3, [pc, #144]	; (776c <event_connection_prepare+0x1e4>)
    76da:	9301      	str	r3, [sp, #4]
    76dc:	9300      	str	r3, [sp, #0]
    76de:	4a24      	ldr	r2, [pc, #144]	; (7770 <event_connection_prepare+0x1e8>)
    76e0:	4b2a      	ldr	r3, [pc, #168]	; (778c <event_connection_prepare+0x204>)
    76e2:	4925      	ldr	r1, [pc, #148]	; (7778 <event_connection_prepare+0x1f0>)
    76e4:	482a      	ldr	r0, [pc, #168]	; (7790 <event_connection_prepare+0x208>)
    76e6:	e75f      	b.n	75a8 <event_connection_prepare+0x20>
			LL_ASSERT(0);
    76e8:	4b20      	ldr	r3, [pc, #128]	; (776c <event_connection_prepare+0x1e4>)
    76ea:	9301      	str	r3, [sp, #4]
    76ec:	9300      	str	r3, [sp, #0]
    76ee:	4b29      	ldr	r3, [pc, #164]	; (7794 <event_connection_prepare+0x20c>)
			LL_ASSERT(0);
    76f0:	4a1f      	ldr	r2, [pc, #124]	; (7770 <event_connection_prepare+0x1e8>)
    76f2:	4921      	ldr	r1, [pc, #132]	; (7778 <event_connection_prepare+0x1f0>)
    76f4:	4828      	ldr	r0, [pc, #160]	; (7798 <event_connection_prepare+0x210>)
    76f6:	e757      	b.n	75a8 <event_connection_prepare+0x20>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    76f8:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
    76fc:	1bf7      	subs	r7, r6, r7
    76fe:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    7700:	0438      	lsls	r0, r7, #16
    7702:	f100 81ba 	bmi.w	7a7a <event_connection_prepare+0x4f2>
		conn->llcp_ack = conn->llcp_req;
    7706:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    770a:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
		if (_radio.conn_upd == conn) {
    770e:	f8d5 26ec 	ldr.w	r2, [r5, #1772]	; 0x6ec
		_radio.ticker_id_prepare = 0;
    7712:	742b      	strb	r3, [r5, #16]
		if (_radio.conn_upd == conn) {
    7714:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    7716:	bf08      	it	eq
    7718:	f8c5 36ec 	streq.w	r3, [r5, #1772]	; 0x6ec
		if ((conn->llcp.conn_upd.interval !=
    771c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    7720:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    7722:	429a      	cmp	r2, r3
    7724:	d114      	bne.n	7750 <event_connection_prepare+0x1c8>
		     conn->conn_interval) ||
    7726:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
    772a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    772c:	4299      	cmp	r1, r3
    772e:	d10f      	bne.n	7750 <event_connection_prepare+0x1c8>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    7730:	f240 43e2 	movw	r3, #1250	; 0x4e2
    7734:	435a      	muls	r2, r3
    7736:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    773a:	f242 7110 	movw	r1, #10000	; 0x2710
    773e:	fb01 2303 	mla	r3, r1, r3, r2
    7742:	3b01      	subs	r3, #1
    7744:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    7748:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    774a:	b29b      	uxth	r3, r3
    774c:	429a      	cmp	r2, r3
    774e:	d038      	beq.n	77c2 <event_connection_prepare+0x23a>
			node_rx = packet_rx_reserve_get(2);
    7750:	2002      	movs	r0, #2
    7752:	f7fd fe2f 	bl	53b4 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    7756:	bb18      	cbnz	r0, 77a0 <event_connection_prepare+0x218>
    7758:	4b04      	ldr	r3, [pc, #16]	; (776c <event_connection_prepare+0x1e4>)
    775a:	9301      	str	r3, [sp, #4]
    775c:	9300      	str	r3, [sp, #0]
    775e:	4b0d      	ldr	r3, [pc, #52]	; (7794 <event_connection_prepare+0x20c>)
		LL_ASSERT(node_rx);
    7760:	4a03      	ldr	r2, [pc, #12]	; (7770 <event_connection_prepare+0x1e8>)
    7762:	4905      	ldr	r1, [pc, #20]	; (7778 <event_connection_prepare+0x1f0>)
    7764:	480d      	ldr	r0, [pc, #52]	; (779c <event_connection_prepare+0x214>)
    7766:	e71f      	b.n	75a8 <event_connection_prepare+0x20>
    7768:	200005b0 	.word	0x200005b0
    776c:	0000ceef 	.word	0x0000ceef
    7770:	0000d7a6 	.word	0x0000d7a6
    7774:	0000e30b 	.word	0x0000e30b
    7778:	0000d71b 	.word	0x0000d71b
    777c:	0000ea4c 	.word	0x0000ea4c
    7780:	20000c70 	.word	0x20000c70
    7784:	20003d38 	.word	0x20003d38
    7788:	00006569 	.word	0x00006569
    778c:	0000e2d4 	.word	0x0000e2d4
    7790:	0000e911 	.word	0x0000e911
    7794:	0000e2e8 	.word	0x0000e2e8
    7798:	0000d6b3 	.word	0x0000d6b3
    779c:	0000e83d 	.word	0x0000e83d
			node_rx->hdr.handle = conn->handle;
    77a0:	8c23      	ldrh	r3, [r4, #32]
    77a2:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    77a4:	2308      	movs	r3, #8
    77a6:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    77a8:	2300      	movs	r3, #0
    77aa:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    77ac:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    77b0:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    77b2:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    77b6:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    77b8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    77bc:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    77be:	f7fe fadb 	bl	5d78 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    77c2:	6823      	ldr	r3, [r4, #0]
    77c4:	6866      	ldr	r6, [r4, #4]
    77c6:	2b00      	cmp	r3, #0
    77c8:	da09      	bge.n	77de <event_connection_prepare+0x256>
			u32_t ticks_prepare_to_start =
    77ca:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    77cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    77d0:	42b0      	cmp	r0, r6
    77d2:	bf2c      	ite	cs
    77d4:	4480      	addcs	r8, r0
    77d6:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    77d8:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    77da:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    77de:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    77e0:	f8b4 a062 	ldrh.w	sl, [r4, #98]	; 0x62
    77e4:	49c8      	ldr	r1, [pc, #800]	; (7b08 <event_connection_prepare+0x580>)
		conn_interval_old = instant_latency * conn->conn_interval;
    77e6:	fb13 f307 	smulbb	r3, r3, r7
    77ea:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    77ec:	fbb3 f2fa 	udiv	r2, r3, sl
    77f0:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    77f4:	fb1a f009 	smulbb	r0, sl, r9
    77f8:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    77fa:	4283      	cmp	r3, r0
    77fc:	f080 80a8 	bcs.w	7950 <event_connection_prepare+0x3c8>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    7800:	1ac0      	subs	r0, r0, r3
    7802:	f240 1223 	movw	r2, #291	; 0x123
    7806:	4342      	muls	r2, r0
    7808:	17c3      	asrs	r3, r0, #31
    780a:	fb01 2303 	mla	r3, r1, r3, r2
    780e:	fba0 0101 	umull	r0, r1, r0, r1
    7812:	4419      	add	r1, r3
    7814:	a3ba      	add	r3, pc, #744	; (adr r3, 7b00 <event_connection_prepare+0x578>)
    7816:	e9d3 2300 	ldrd	r2, r3, [r3]
    781a:	f7f8 fd25 	bl	268 <__aeabi_uldivmod>
    781e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7822:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    7826:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    7828:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    782a:	f8df b31c 	ldr.w	fp, [pc, #796]	; 7b48 <event_connection_prepare+0x5c0>
    782e:	1bdb      	subs	r3, r3, r7
    7830:	444b      	add	r3, r9
    7832:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset =
    7834:	6823      	ldr	r3, [r4, #0]
    7836:	429e      	cmp	r6, r3
    7838:	bf38      	it	cc
    783a:	461e      	movcc	r6, r3
		if (conn->role) {
    783c:	f994 301d 	ldrsb.w	r3, [r4, #29]
		ticks_slot_offset =
    7840:	960d      	str	r6, [sp, #52]	; 0x34
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    7842:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    7846:	2b00      	cmp	r3, #0
    7848:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    784a:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    784c:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    7850:	f280 808f 	bge.w	7972 <event_connection_prepare+0x3ea>
				conn->slave.window_widening_periodic_us *
    7854:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			conn->slave.window_widening_prepare_us -=
    7856:	6c62      	ldr	r2, [r4, #68]	; 0x44
    7858:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    785c:	f895 368c 	ldrb.w	r3, [r5, #1676]	; 0x68c
    7860:	4aaa      	ldr	r2, [pc, #680]	; (7b0c <event_connection_prepare+0x584>)
    7862:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    7866:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    786a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    786e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    7872:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
				(((gc_lookup_ppm[_radio.sca] +
    7876:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    7878:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    787a:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    787e:	4ba4      	ldr	r3, [pc, #656]	; (7b10 <event_connection_prepare+0x588>)
				conn->llcp.conn_upd.win_size * 1250;
    7880:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    7884:	f205 253f 	addw	r5, r5, #575	; 0x23f
    7888:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    788c:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    788e:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    7892:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    7894:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    7896:	64e2      	str	r2, [r4, #76]	; 0x4c
			conn->slave.ticks_to_offset = 0;
    7898:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    789a:	429f      	cmp	r7, r3
    789c:	bf94      	ite	ls
    789e:	6467      	strls	r7, [r4, #68]	; 0x44
    78a0:	6463      	strhi	r3, [r4, #68]	; 0x44
			conn->slave.window_widening_periodic_us =
    78a2:	63e5      	str	r5, [r4, #60]	; 0x3c
			conn->slave.window_widening_max_us =
    78a4:	6423      	str	r3, [r4, #64]	; 0x40
			conn->slave.ticks_to_offset = 0;
    78a6:	65a2      	str	r2, [r4, #88]	; 0x58
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    78a8:	fba0 010b 	umull	r0, r1, r0, fp
    78ac:	a394      	add	r3, pc, #592	; (adr r3, 7b00 <event_connection_prepare+0x578>)
    78ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    78b2:	f7f8 fcd9 	bl	268 <__aeabi_uldivmod>
    78b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    78b8:	1a1b      	subs	r3, r3, r0
    78ba:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    78bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    78be:	fbb3 f0f8 	udiv	r0, r3, r8
    78c2:	fb08 f000 	mul.w	r0, r8, r0
    78c6:	a38e      	add	r3, pc, #568	; (adr r3, 7b00 <event_connection_prepare+0x578>)
    78c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    78cc:	fba0 010b 	umull	r0, r1, r0, fp
    78d0:	f7f8 fcca 	bl	268 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    78d4:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    78d6:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
		conn->latency = conn->llcp.conn_upd.latency;
    78da:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    78de:	84e3      	strh	r3, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    78e0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
		conn->conn_interval = conn->llcp.conn_upd.interval;
    78e4:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    78e8:	f242 7210 	movw	r2, #10000	; 0x2710
    78ec:	fb02 6303 	mla	r3, r2, r3, r6
    78f0:	3b01      	subs	r3, #1
    78f2:	fbb3 f3f6 	udiv	r3, r3, r6
    78f6:	85e3      	strh	r3, [r4, #46]	; 0x2e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    78f8:	4b86      	ldr	r3, [pc, #536]	; (7b14 <event_connection_prepare+0x58c>)
    78fa:	4433      	add	r3, r6
    78fc:	fbb3 f6f6 	udiv	r6, r3, r6
		if (!conn->llcp.conn_upd.is_internal) {
    7900:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    7904:	8666      	strh	r6, [r4, #50]	; 0x32
		if (!conn->llcp.conn_upd.is_internal) {
    7906:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    790a:	bf08      	it	eq
    790c:	8623      	strheq	r3, [r4, #48]	; 0x30
		mayfly_was_enabled =
    790e:	2101      	movs	r1, #1
    7910:	2000      	movs	r0, #0
    7912:	f003 fe65 	bl	b5e0 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    7916:	2200      	movs	r2, #0
    7918:	2101      	movs	r1, #1
		mayfly_was_enabled =
    791a:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    791c:	4610      	mov	r0, r2
    791e:	f7fb fdd3 	bl	34c8 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7922:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    7926:	f641 33d6 	movw	r3, #7126	; 0x1bd6
    792a:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    792c:	3207      	adds	r2, #7
		ticker_status =
    792e:	9300      	str	r3, [sp, #0]
    7930:	b2d2      	uxtb	r2, r2
    7932:	4b79      	ldr	r3, [pc, #484]	; (7b18 <event_connection_prepare+0x590>)
    7934:	4608      	mov	r0, r1
    7936:	f7fc fc4b 	bl	41d0 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    793a:	f030 0802 	bics.w	r8, r0, #2
    793e:	d025      	beq.n	798c <event_connection_prepare+0x404>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7940:	4b76      	ldr	r3, [pc, #472]	; (7b1c <event_connection_prepare+0x594>)
    7942:	9301      	str	r3, [sp, #4]
    7944:	9300      	str	r3, [sp, #0]
    7946:	4a76      	ldr	r2, [pc, #472]	; (7b20 <event_connection_prepare+0x598>)
    7948:	4b76      	ldr	r3, [pc, #472]	; (7b24 <event_connection_prepare+0x59c>)
    794a:	4977      	ldr	r1, [pc, #476]	; (7b28 <event_connection_prepare+0x5a0>)
    794c:	4877      	ldr	r0, [pc, #476]	; (7b2c <event_connection_prepare+0x5a4>)
    794e:	e62b      	b.n	75a8 <event_connection_prepare+0x20>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    7950:	fb0a 3212 	mls	r2, sl, r2, r3
    7954:	b292      	uxth	r2, r2
    7956:	fba2 0101 	umull	r0, r1, r2, r1
    795a:	f240 1323 	movw	r3, #291	; 0x123
    795e:	fb03 1102 	mla	r1, r3, r2, r1
    7962:	a367      	add	r3, pc, #412	; (adr r3, 7b00 <event_connection_prepare+0x578>)
    7964:	e9d3 2300 	ldrd	r2, r3, [r3]
    7968:	f7f8 fc7e 	bl	268 <__aeabi_uldivmod>
    796c:	eba8 0300 	sub.w	r3, r8, r0
    7970:	e759      	b.n	7826 <event_connection_prepare+0x29e>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    7972:	990c      	ldr	r1, [sp, #48]	; 0x30
    7974:	a362      	add	r3, pc, #392	; (adr r3, 7b00 <event_connection_prepare+0x578>)
    7976:	e9d3 2300 	ldrd	r2, r3, [r3]
    797a:	fba1 010b 	umull	r0, r1, r1, fp
    797e:	f7f8 fc73 	bl	268 <__aeabi_uldivmod>
    7982:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    7986:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    7988:	4635      	mov	r5, r6
    798a:	e7a6      	b.n	78da <event_connection_prepare+0x352>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    798c:	fba5 ab0b 	umull	sl, fp, r5, fp
    7990:	a35b      	add	r3, pc, #364	; (adr r3, 7b00 <event_connection_prepare+0x578>)
    7992:	e9d3 2300 	ldrd	r2, r3, [r3]
    7996:	4650      	mov	r0, sl
    7998:	4659      	mov	r1, fp
    799a:	f7f8 fc65 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    799e:	4a64      	ldr	r2, [pc, #400]	; (7b30 <event_connection_prepare+0x5a8>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    79a0:	f894 6020 	ldrb.w	r6, [r4, #32]
    79a4:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    79a8:	2307      	movs	r3, #7
    79aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    79ae:	2100      	movs	r1, #0
    79b0:	4343      	muls	r3, r0
    79b2:	fb02 3301 	mla	r3, r2, r1, r3
    79b6:	fba0 0102 	umull	r0, r1, r0, r2
    79ba:	ebba 0000 	subs.w	r0, sl, r0
    79be:	4419      	add	r1, r3
    79c0:	eb6b 0101 	sbc.w	r1, fp, r1
    79c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    79c8:	2300      	movs	r3, #0
    79ca:	f7f8 fc4d 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    79ce:	68e3      	ldr	r3, [r4, #12]
    79d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    79d2:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    79d6:	4957      	ldr	r1, [pc, #348]	; (7b34 <event_connection_prepare+0x5ac>)
		ticker_status =
    79d8:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    79da:	441a      	add	r2, r3
    79dc:	4613      	mov	r3, r2
    79de:	4a56      	ldr	r2, [pc, #344]	; (7b38 <event_connection_prepare+0x5b0>)
		ticker_status =
    79e0:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    79e2:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    79e6:	bf38      	it	cc
    79e8:	460a      	movcc	r2, r1
    79ea:	3607      	adds	r6, #7
		ticker_status =
    79ec:	f641 31e6 	movw	r1, #7142	; 0x1be6
    79f0:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    79f2:	b2f6      	uxtb	r6, r6
		ticker_status =
    79f4:	4948      	ldr	r1, [pc, #288]	; (7b18 <event_connection_prepare+0x590>)
    79f6:	9107      	str	r1, [sp, #28]
    79f8:	9205      	str	r2, [sp, #20]
    79fa:	9406      	str	r4, [sp, #24]
    79fc:	f8cd 800c 	str.w	r8, [sp, #12]
    7a00:	9501      	str	r5, [sp, #4]
    7a02:	9700      	str	r7, [sp, #0]
    7a04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7a06:	4632      	mov	r2, r6
    7a08:	4641      	mov	r1, r8
    7a0a:	4640      	mov	r0, r8
    7a0c:	f7fc fb42 	bl	4094 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7a10:	f030 0002 	bics.w	r0, r0, #2
    7a14:	d194      	bne.n	7940 <event_connection_prepare+0x3b8>
		if (mayfly_was_enabled) {
    7a16:	f1b9 0f00 	cmp.w	r9, #0
    7a1a:	d06b      	beq.n	7af4 <event_connection_prepare+0x56c>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    7a1c:	2201      	movs	r2, #1
    7a1e:	4611      	mov	r1, r2
}
    7a20:	b00f      	add	sp, #60	; 0x3c
    7a22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    7a26:	f7fb bd4f 	b.w	34c8 <mayfly_enable>
	if (conn->llcp.chan_map.initiate) {
    7a2a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    7a2e:	2b00      	cmp	r3, #0
    7a30:	f000 808c 	beq.w	7b4c <event_connection_prepare+0x5c4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7a34:	4841      	ldr	r0, [pc, #260]	; (7b3c <event_connection_prepare+0x5b4>)
    7a36:	f7fb fcb6 	bl	33a6 <mem_acquire>
		if (node_tx) {
    7a3a:	4605      	mov	r5, r0
    7a3c:	b1e8      	cbz	r0, 7a7a <event_connection_prepare+0x4f2>
			conn->llcp.chan_map.initiate = 0;
    7a3e:	2300      	movs	r3, #0
    7a40:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
				event_counter + conn->latency + 6;
    7a44:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    7a46:	3306      	adds	r3, #6
    7a48:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    7a4a:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7a4e:	7903      	ldrb	r3, [r0, #4]
    7a50:	f043 0303 	orr.w	r3, r3, #3
    7a54:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    7a56:	2308      	movs	r3, #8
    7a58:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    7a5a:	2301      	movs	r3, #1
    7a5c:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    7a5e:	2205      	movs	r2, #5
    7a60:	f104 0161 	add.w	r1, r4, #97	; 0x61
    7a64:	3008      	adds	r0, #8
    7a66:	f7f8 fdc7 	bl	5f8 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    7a6a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    7a6e:	f8a5 300d 	strh.w	r3, [r5, #13]
			ctrl_tx_enqueue(conn, node_tx);
    7a72:	4629      	mov	r1, r5
    7a74:	4620      	mov	r0, r4
    7a76:	f7ff fcf9 	bl	746c <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    7a7a:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
    7a7e:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    7a82:	429a      	cmp	r2, r3
    7a84:	d01d      	beq.n	7ac2 <event_connection_prepare+0x53a>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    7a86:	2005      	movs	r0, #5
    7a88:	f7ff fa32 	bl	6ef0 <event_stop.constprop.45>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7a8c:	482b      	ldr	r0, [pc, #172]	; (7b3c <event_connection_prepare+0x5b4>)
    7a8e:	f7fb fc8a 	bl	33a6 <mem_acquire>
		if (node_tx) {
    7a92:	4601      	mov	r1, r0
    7a94:	b1a8      	cbz	r0, 7ac2 <event_connection_prepare+0x53a>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    7a96:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    7a9a:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7a9e:	7903      	ldrb	r3, [r0, #4]
    7aa0:	f043 0303 	orr.w	r3, r3, #3
    7aa4:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    7aa6:	2302      	movs	r3, #2
    7aa8:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    7aaa:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    7aac:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
    7ab0:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    7ab2:	4620      	mov	r0, r4
    7ab4:	f7ff fcda 	bl	746c <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    7ab8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			if (conn->procedure_expire <= 1) {
    7aba:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    7abc:	bf98      	it	ls
    7abe:	3301      	addls	r3, #1
    7ac0:	86a3      	strh	r3, [r4, #52]	; 0x34
	event_common_prepare(ticks_at_expire, remainder,
    7ac2:	f894 3020 	ldrb.w	r3, [r4, #32]
    7ac6:	f994 501d 	ldrsb.w	r5, [r4, #29]
    7aca:	481d      	ldr	r0, [pc, #116]	; (7b40 <event_connection_prepare+0x5b8>)
    7acc:	491d      	ldr	r1, [pc, #116]	; (7b44 <event_connection_prepare+0x5bc>)
    7ace:	68a2      	ldr	r2, [r4, #8]
    7ad0:	9403      	str	r4, [sp, #12]
    7ad2:	3307      	adds	r3, #7
    7ad4:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    7ad8:	bf38      	it	cc
    7ada:	4601      	movcc	r1, r0
    7adc:	b2db      	uxtb	r3, r3
    7ade:	e88d 000c 	stmia.w	sp, {r2, r3}
    7ae2:	9102      	str	r1, [sp, #8]
    7ae4:	1d23      	adds	r3, r4, #4
    7ae6:	4622      	mov	r2, r4
    7ae8:	4649      	mov	r1, r9
    7aea:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    7aec:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    7aee:	f7ff fa0d 	bl	6f0c <event_common_prepare>
	conn->event_counter = event_counter + 1;
    7af2:	8466      	strh	r6, [r4, #34]	; 0x22
}
    7af4:	b00f      	add	sp, #60	; 0x3c
    7af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7afa:	bf00      	nop
    7afc:	f3af 8000 	nop.w
    7b00:	1afd498d 	.word	0x1afd498d
    7b04:	00000007 	.word	0x00000007
    7b08:	09ce5400 	.word	0x09ce5400
    7b0c:	0000e57c 	.word	0x0000e57c
    7b10:	000f4240 	.word	0x000f4240
    7b14:	026259ff 	.word	0x026259ff
    7b18:	00005e45 	.word	0x00005e45
    7b1c:	0000ceef 	.word	0x0000ceef
    7b20:	0000d7a6 	.word	0x0000d7a6
    7b24:	0000e2e8 	.word	0x0000e2e8
    7b28:	0000d71b 	.word	0x0000d71b
    7b2c:	0000e3ec 	.word	0x0000e3ec
    7b30:	1afd498d 	.word	0x1afd498d
    7b34:	00007cad 	.word	0x00007cad
    7b38:	00007cb1 	.word	0x00007cb1
    7b3c:	20000c70 	.word	0x20000c70
    7b40:	000096bd 	.word	0x000096bd
    7b44:	00007cf1 	.word	0x00007cf1
    7b48:	3b9aca00 	.word	0x3b9aca00
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    7b4c:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    7b50:	1af3      	subs	r3, r6, r3
    7b52:	0419      	lsls	r1, r3, #16
    7b54:	d491      	bmi.n	7a7a <event_connection_prepare+0x4f2>
		conn->llcp_ack = conn->llcp_req;
    7b56:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    7b5a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		memcpy(&conn->data_chan_map[0],
    7b5e:	f104 0517 	add.w	r5, r4, #23
    7b62:	2205      	movs	r2, #5
    7b64:	f104 0161 	add.w	r1, r4, #97	; 0x61
    7b68:	4628      	mov	r0, r5
    7b6a:	f7f8 fd45 	bl	5f8 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    7b6e:	2105      	movs	r1, #5
    7b70:	4628      	mov	r0, r5
    7b72:	f7fb fdb1 	bl	36d8 <util_ones_count_get>
		conn->data_chan_count =
    7b76:	7f63      	ldrb	r3, [r4, #29]
    7b78:	f360 0305 	bfi	r3, r0, #0, #6
    7b7c:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    7b7e:	2301      	movs	r3, #1
    7b80:	7723      	strb	r3, [r4, #28]
    7b82:	e77a      	b.n	7a7a <event_connection_prepare+0x4f2>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7b84:	4844      	ldr	r0, [pc, #272]	; (7c98 <event_connection_prepare+0x710>)
    7b86:	f7fb fc0e 	bl	33a6 <mem_acquire>
	if (node_tx) {
    7b8a:	4605      	mov	r5, r0
    7b8c:	2800      	cmp	r0, #0
    7b8e:	f43f af74 	beq.w	7a7a <event_connection_prepare+0x4f2>
		conn->llcp_ack = conn->llcp_req;
    7b92:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    7b96:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		conn->llcp_features = RADIO_BLE_FEAT;
    7b9a:	4b40      	ldr	r3, [pc, #256]	; (7c9c <event_connection_prepare+0x714>)
    7b9c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7ba0:	7903      	ldrb	r3, [r0, #4]
    7ba2:	f043 0303 	orr.w	r3, r3, #3
    7ba6:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    7ba8:	2309      	movs	r3, #9
    7baa:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    7bac:	f994 301d 	ldrsb.w	r3, [r4, #29]
    7bb0:	2b00      	cmp	r3, #0
    7bb2:	bfac      	ite	ge
    7bb4:	2308      	movge	r3, #8
    7bb6:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    7bb8:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    7bba:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    7bbc:	2100      	movs	r1, #0
    7bbe:	4410      	add	r0, r2
    7bc0:	f7f8 fd46 	bl	650 <memset>
			conn->llcp_features & 0xFF;
    7bc4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    7bc8:	722b      	strb	r3, [r5, #8]
			(conn->llcp_features >> 8) & 0xFF;
    7bca:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    7bcc:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    7bce:	726a      	strb	r2, [r5, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    7bd0:	72ab      	strb	r3, [r5, #10]
		ctrl_tx_enqueue(conn, node_tx);
    7bd2:	4629      	mov	r1, r5
			ctrl_tx_enqueue(conn, node_tx);
    7bd4:	4620      	mov	r0, r4
    7bd6:	f7ff fc49 	bl	746c <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
    7bda:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    7bdc:	86a3      	strh	r3, [r4, #52]	; 0x34
    7bde:	e74c      	b.n	7a7a <event_connection_prepare+0x4f2>
	if (conn->llcp_version.tx == 0) {
    7be0:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    7be4:	07da      	lsls	r2, r3, #31
    7be6:	d424      	bmi.n	7c32 <event_connection_prepare+0x6aa>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7be8:	482b      	ldr	r0, [pc, #172]	; (7c98 <event_connection_prepare+0x710>)
    7bea:	f7fb fbdc 	bl	33a6 <mem_acquire>
		if (node_tx) {
    7bee:	4601      	mov	r1, r0
    7bf0:	2800      	cmp	r0, #0
    7bf2:	f43f af42 	beq.w	7a7a <event_connection_prepare+0x4f2>
			conn->llcp_ack = conn->llcp_req;
    7bf6:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    7bfa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			conn->llcp_version.tx = 1;
    7bfe:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    7c02:	f043 0301 	orr.w	r3, r3, #1
    7c06:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7c0a:	7903      	ldrb	r3, [r0, #4]
    7c0c:	f043 0303 	orr.w	r3, r3, #3
    7c10:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    7c12:	2306      	movs	r3, #6
    7c14:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    7c16:	230c      	movs	r3, #12
    7c18:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    7c1a:	2309      	movs	r3, #9
    7c1c:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    7c1e:	f06f 030e 	mvn.w	r3, #14
    7c22:	7243      	strb	r3, [r0, #9]
    7c24:	2305      	movs	r3, #5
    7c26:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    7c28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7c2c:	72c3      	strb	r3, [r0, #11]
    7c2e:	7303      	strb	r3, [r0, #12]
    7c30:	e7d0      	b.n	7bd4 <event_connection_prepare+0x64c>
	} else if (conn->llcp_version.rx != 0) {
    7c32:	079b      	lsls	r3, r3, #30
    7c34:	d526      	bpl.n	7c84 <event_connection_prepare+0x6fc>
		conn->llcp_ack = conn->llcp_req;
    7c36:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    7c3a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		node_rx = packet_rx_reserve_get(2);
    7c3e:	2002      	movs	r0, #2
    7c40:	f7fd fbb8 	bl	53b4 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    7c44:	b920      	cbnz	r0, 7c50 <event_connection_prepare+0x6c8>
    7c46:	4b16      	ldr	r3, [pc, #88]	; (7ca0 <event_connection_prepare+0x718>)
    7c48:	9301      	str	r3, [sp, #4]
    7c4a:	9300      	str	r3, [sp, #0]
    7c4c:	4b15      	ldr	r3, [pc, #84]	; (7ca4 <event_connection_prepare+0x71c>)
    7c4e:	e587      	b.n	7760 <event_connection_prepare+0x1d8>
		node_rx->hdr.handle = conn->handle;
    7c50:	8c23      	ldrh	r3, [r4, #32]
    7c52:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    7c54:	2301      	movs	r3, #1
    7c56:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    7c58:	7a03      	ldrb	r3, [r0, #8]
    7c5a:	f043 0303 	orr.w	r3, r3, #3
    7c5e:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    7c60:	2306      	movs	r3, #6
    7c62:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    7c64:	230c      	movs	r3, #12
    7c66:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    7c68:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    7c6c:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    7c6e:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
    7c72:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    7c76:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    7c7a:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    7c7e:	f7fe f87b 	bl	5d78 <packet_rx_enqueue>
    7c82:	e6fa      	b.n	7a7a <event_connection_prepare+0x4f2>
		LL_ASSERT(0);
    7c84:	4b06      	ldr	r3, [pc, #24]	; (7ca0 <event_connection_prepare+0x718>)
    7c86:	9301      	str	r3, [sp, #4]
    7c88:	9300      	str	r3, [sp, #0]
    7c8a:	4b06      	ldr	r3, [pc, #24]	; (7ca4 <event_connection_prepare+0x71c>)
    7c8c:	e530      	b.n	76f0 <event_connection_prepare+0x168>
			LL_ASSERT(0);
    7c8e:	4b04      	ldr	r3, [pc, #16]	; (7ca0 <event_connection_prepare+0x718>)
    7c90:	9301      	str	r3, [sp, #4]
    7c92:	9300      	str	r3, [sp, #0]
    7c94:	4b04      	ldr	r3, [pc, #16]	; (7ca8 <event_connection_prepare+0x720>)
    7c96:	e52b      	b.n	76f0 <event_connection_prepare+0x168>
    7c98:	20000c70 	.word	0x20000c70
    7c9c:	0001400c 	.word	0x0001400c
    7ca0:	0000ceef 	.word	0x0000ceef
    7ca4:	0000e2fc 	.word	0x0000e2fc
    7ca8:	0000e30b 	.word	0x0000e30b

00007cac <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    7cac:	f7ff bc6c 	b.w	7588 <event_connection_prepare>

00007cb0 <event_slave_prepare>:
    7cb0:	f7ff bc6a 	b.w	7588 <event_connection_prepare>

00007cb4 <connection_configure>:
{
    7cb4:	b510      	push	{r4, lr}
    7cb6:	4604      	mov	r4, r0
	radio_reset();
    7cb8:	f003 f922 	bl	af00 <radio_reset>
	radio_tx_power_set(0);
    7cbc:	2000      	movs	r0, #0
    7cbe:	f003 f949 	bl	af54 <radio_tx_power_set>
	radio_isr_set(isr);
    7cc2:	480a      	ldr	r0, [pc, #40]	; (7cec <connection_configure+0x38>)
    7cc4:	f003 f8e6 	bl	ae94 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    7cc8:	f104 0010 	add.w	r0, r4, #16
    7ccc:	f003 f960 	bl	af90 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    7cd0:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    7cd2:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    7cd4:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    7cd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    7cda:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    7cdc:	f240 605b 	movw	r0, #1627	; 0x65b
    7ce0:	4319      	orrs	r1, r3
}
    7ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    7ce6:	f003 b9fb 	b.w	b0e0 <radio_crc_configure>
    7cea:	bf00      	nop
    7cec:	00007f81 	.word	0x00007f81

00007cf0 <event_slave>:
{
    7cf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    7cf4:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    7cf6:	4b66      	ldr	r3, [pc, #408]	; (7e90 <event_slave+0x1a0>)
    7cf8:	7cda      	ldrb	r2, [r3, #19]
{
    7cfa:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    7cfc:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    7d00:	461d      	mov	r5, r3
    7d02:	b172      	cbz	r2, 7d22 <event_slave+0x32>
    7d04:	4b63      	ldr	r3, [pc, #396]	; (7e94 <event_slave+0x1a4>)
    7d06:	9301      	str	r3, [sp, #4]
    7d08:	9300      	str	r3, [sp, #0]
    7d0a:	4a63      	ldr	r2, [pc, #396]	; (7e98 <event_slave+0x1a8>)
    7d0c:	4b63      	ldr	r3, [pc, #396]	; (7e9c <event_slave+0x1ac>)
    7d0e:	4964      	ldr	r1, [pc, #400]	; (7ea0 <event_slave+0x1b0>)
    7d10:	4864      	ldr	r0, [pc, #400]	; (7ea4 <event_slave+0x1b4>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    7d12:	f7f9 fb77 	bl	1404 <printk>
    7d16:	4040      	eors	r0, r0
    7d18:	f380 8811 	msr	BASEPRI, r0
    7d1c:	f04f 0004 	mov.w	r0, #4
    7d20:	df02      	svc	2
    7d22:	7c1a      	ldrb	r2, [r3, #16]
    7d24:	8c23      	ldrh	r3, [r4, #32]
    7d26:	b2d2      	uxtb	r2, r2
    7d28:	3307      	adds	r3, #7
    7d2a:	429a      	cmp	r2, r3
    7d2c:	d007      	beq.n	7d3e <event_slave+0x4e>
    7d2e:	4b59      	ldr	r3, [pc, #356]	; (7e94 <event_slave+0x1a4>)
    7d30:	9301      	str	r3, [sp, #4]
    7d32:	9300      	str	r3, [sp, #0]
    7d34:	4a58      	ldr	r2, [pc, #352]	; (7e98 <event_slave+0x1a8>)
    7d36:	4b59      	ldr	r3, [pc, #356]	; (7e9c <event_slave+0x1ac>)
    7d38:	4959      	ldr	r1, [pc, #356]	; (7ea0 <event_slave+0x1b0>)
    7d3a:	485b      	ldr	r0, [pc, #364]	; (7ea8 <event_slave+0x1b8>)
    7d3c:	e7e9      	b.n	7d12 <event_slave+0x22>
	_radio.role = ROLE_SLAVE;
    7d3e:	2303      	movs	r3, #3
    7d40:	74eb      	strb	r3, [r5, #19]
	_radio.packet_counter = 0;
    7d42:	f885 6684 	strb.w	r6, [r5, #1668]	; 0x684
	_radio.crc_expire = 0;
    7d46:	f885 6685 	strb.w	r6, [r5, #1669]	; 0x685
	_radio.state = STATE_RX;
    7d4a:	2301      	movs	r3, #1
    7d4c:	752b      	strb	r3, [r5, #20]
	conn->latency_event = conn->latency_prepare;
    7d4e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    7d50:	f8c5 4680 	str.w	r4, [r5, #1664]	; 0x680
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    7d54:	b2d2      	uxtb	r2, r2
	conn->latency_event = conn->latency_prepare;
    7d56:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    7d58:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    7d5a:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    7d5c:	4620      	mov	r0, r4
	_radio.ticker_id_prepare = 0;
    7d5e:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    7d60:	746a      	strb	r2, [r5, #17]
	connection_configure(conn);
    7d62:	f7ff ffa7 	bl	7cb4 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    7d66:	2096      	movs	r0, #150	; 0x96
    7d68:	f003 fa68 	bl	b23c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    7d6c:	4633      	mov	r3, r6
    7d6e:	4632      	mov	r2, r6
    7d70:	4631      	mov	r1, r6
    7d72:	4630      	mov	r0, r6
    7d74:	f003 f9de 	bl	b134 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    7d78:	f895 26a5 	ldrb.w	r2, [r5, #1701]	; 0x6a5
    7d7c:	f8d5 36a0 	ldr.w	r3, [r5, #1696]	; 0x6a0
    7d80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    7d84:	4620      	mov	r0, r4
    7d86:	3108      	adds	r1, #8
    7d88:	f7fe fa36 	bl	61f8 <rx_packet_set>
	if (conn->data_chan_sel) {
    7d8c:	7f63      	ldrb	r3, [r4, #29]
    7d8e:	f013 0f40 	tst.w	r3, #64	; 0x40
    7d92:	f104 0217 	add.w	r2, r4, #23
    7d96:	d04b      	beq.n	7e30 <event_slave+0x140>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    7d98:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    7d9a:	8be1      	ldrh	r1, [r4, #30]
    7d9c:	3801      	subs	r0, #1
    7d9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7da2:	b280      	uxth	r0, r0
    7da4:	f7ff fb1e 	bl	73e4 <chan_sel_2>
	chan_set(data_chan_use);
    7da8:	f7fd fd64 	bl	5874 <chan_set>
	conn->slave.window_widening_event_us +=
    7dac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    7dae:	6c62      	ldr	r2, [r4, #68]	; 0x44
    7db0:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    7db2:	2200      	movs	r2, #0
    7db4:	6462      	str	r2, [r4, #68]	; 0x44
	    conn->slave.window_widening_max_us) {
    7db6:	6c22      	ldr	r2, [r4, #64]	; 0x40
	conn->slave.window_widening_event_us +=
    7db8:	64a3      	str	r3, [r4, #72]	; 0x48
	if (conn->slave.window_widening_event_us >
    7dba:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    7dbc:	bf88      	it	hi
    7dbe:	64a2      	strhi	r2, [r4, #72]	; 0x48
	conn->slave.window_size_event_us +=
    7dc0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    7dc2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
	conn->slave.window_size_prepare_us = 0;
    7dc4:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    7dc6:	4413      	add	r3, r2
    7dc8:	6523      	str	r3, [r4, #80]	; 0x50
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    7dca:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    7dcc:	64e6      	str	r6, [r4, #76]	; 0x4c
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    7dce:	f107 0109 	add.w	r1, r7, #9
    7dd2:	4630      	mov	r0, r6
    7dd4:	f003 fa3e 	bl	b254 <radio_tmr_start>
    7dd8:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    7dda:	f003 fad7 	bl	b38c <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    7dde:	4630      	mov	r0, r6
    7de0:	f003 faf6 	bl	b3d0 <radio_tmr_aa_save>
    7de4:	6d23      	ldr	r3, [r4, #80]	; 0x50
	       (conn->slave.window_widening_event_us << 1) +
    7de6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    7de8:	3378      	adds	r3, #120	; 0x78
	hcto += radio_rx_ready_delay_get(0, 0);
    7dea:	4631      	mov	r1, r6
    7dec:	4630      	mov	r0, r6
    7dee:	eb03 0942 	add.w	r9, r3, r2, lsl #1
    7df2:	f003 f926 	bl	b042 <radio_rx_ready_delay_get>
	hcto += addr_us_get(0);
    7df6:	44c8      	add	r8, r9
	hcto += radio_rx_chain_delay_get(0, 0);
    7df8:	4631      	mov	r1, r6
	hcto += addr_us_get(0);
    7dfa:	4480      	add	r8, r0
	hcto += radio_rx_chain_delay_get(0, 0);
    7dfc:	4630      	mov	r0, r6
    7dfe:	f003 f922 	bl	b046 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    7e02:	4440      	add	r0, r8
    7e04:	f003 faa4 	bl	b350 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    7e08:	f894 1020 	ldrb.w	r1, [r4, #32]
    7e0c:	3107      	adds	r1, #7
    7e0e:	463a      	mov	r2, r7
    7e10:	b2c9      	uxtb	r1, r1
    7e12:	4620      	mov	r0, r4
    7e14:	f7fe fed8 	bl	6bc8 <preempt_calc>
    7e18:	4603      	mov	r3, r0
    7e1a:	b348      	cbz	r0, 7e70 <event_slave+0x180>
		_radio.state = STATE_STOP;
    7e1c:	2304      	movs	r3, #4
    7e1e:	752b      	strb	r3, [r5, #20]
		radio_disable();
    7e20:	f003 f922 	bl	b068 <radio_disable>
	packet_tx_enqueue(2);
    7e24:	2002      	movs	r0, #2
}
    7e26:	b003      	add	sp, #12
    7e28:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	packet_tx_enqueue(2);
    7e2c:	f7fe ba42 	b.w	62b4 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    7e30:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    7e32:	7fa6      	ldrb	r6, [r4, #30]
    7e34:	fb01 6606 	mla	r6, r1, r6, r6
    7e38:	7fe1      	ldrb	r1, [r4, #31]
    7e3a:	2025      	movs	r0, #37	; 0x25
    7e3c:	440e      	add	r6, r1
    7e3e:	fb96 f1f0 	sdiv	r1, r6, r0
    7e42:	fb00 6611 	mls	r6, r0, r1, r6
    7e46:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    7e48:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    7e4a:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    7e4c:	5c51      	ldrb	r1, [r2, r1]
    7e4e:	f006 0607 	and.w	r6, r6, #7
    7e52:	fa41 f606 	asr.w	r6, r1, r6
    7e56:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    7e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    7e5c:	d4a4      	bmi.n	7da8 <event_slave+0xb8>
		chan_index = chan_next % chan_count;
    7e5e:	fbb0 f1f3 	udiv	r1, r0, r3
    7e62:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    7e66:	b2c9      	uxtb	r1, r1
    7e68:	4610      	mov	r0, r2
    7e6a:	f7fd fa87 	bl	537c <chan_sel_remap>
    7e6e:	e79b      	b.n	7da8 <event_slave+0xb8>
		ticker_status =
    7e70:	4a0e      	ldr	r2, [pc, #56]	; (7eac <event_slave+0x1bc>)
    7e72:	4601      	mov	r1, r0
    7e74:	f7fc fa2a 	bl	42cc <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7e78:	f030 0302 	bics.w	r3, r0, #2
    7e7c:	d0d2      	beq.n	7e24 <event_slave+0x134>
    7e7e:	4b05      	ldr	r3, [pc, #20]	; (7e94 <event_slave+0x1a4>)
    7e80:	9301      	str	r3, [sp, #4]
    7e82:	9300      	str	r3, [sp, #0]
    7e84:	4a04      	ldr	r2, [pc, #16]	; (7e98 <event_slave+0x1a8>)
    7e86:	4b05      	ldr	r3, [pc, #20]	; (7e9c <event_slave+0x1ac>)
    7e88:	4905      	ldr	r1, [pc, #20]	; (7ea0 <event_slave+0x1b0>)
    7e8a:	4809      	ldr	r0, [pc, #36]	; (7eb0 <event_slave+0x1c0>)
    7e8c:	e741      	b.n	7d12 <event_slave+0x22>
    7e8e:	bf00      	nop
    7e90:	200005b0 	.word	0x200005b0
    7e94:	0000ceef 	.word	0x0000ceef
    7e98:	0000d7a6 	.word	0x0000d7a6
    7e9c:	0000e324 	.word	0x0000e324
    7ea0:	0000d71b 	.word	0x0000d71b
    7ea4:	0000e479 	.word	0x0000e479
    7ea8:	0000e52c 	.word	0x0000e52c
    7eac:	00005fe5 	.word	0x00005fe5
    7eb0:	0000e3ec 	.word	0x0000e3ec

00007eb4 <prepare_pdu_data_tx>:
{
    7eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	    conn->empty ||
    7eb6:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
	if (/* empty packet */
    7eba:	061a      	lsls	r2, r3, #24
{
    7ebc:	4604      	mov	r4, r0
    7ebe:	460f      	mov	r7, r1
	if (/* empty packet */
    7ec0:	d409      	bmi.n	7ed6 <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
    7ec2:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	    conn->empty ||
    7ec6:	b135      	cbz	r5, 7ed6 <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
    7ec8:	f013 0f08 	tst.w	r3, #8
    7ecc:	f8d0 e0f0 	ldr.w	lr, [r0, #240]	; 0xf0
    7ed0:	d022      	beq.n	7f18 <prepare_pdu_data_tx+0x64>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    7ed2:	4575      	cmp	r5, lr
    7ed4:	d020      	beq.n	7f18 <prepare_pdu_data_tx+0x64>
	conn->empty = 1;
    7ed6:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    7eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    7ede:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    7ee2:	f003 f913 	bl	b10c <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    7ee6:	7803      	ldrb	r3, [r0, #0]
    7ee8:	2201      	movs	r2, #1
    7eea:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    7eee:	2200      	movs	r2, #0
    7ef0:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    7ef2:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    7ef6:	7003      	strb	r3, [r0, #0]
    7ef8:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    7efa:	b152      	cbz	r2, 7f12 <prepare_pdu_data_tx+0x5e>
		pdu_data_tx->md = 1;
    7efc:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    7f00:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    7f02:	7803      	ldrb	r3, [r0, #0]
    7f04:	f36f 1347 	bfc	r3, #5, #3
    7f08:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    7f0a:	2300      	movs	r3, #0
    7f0c:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    7f0e:	6038      	str	r0, [r7, #0]
    7f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    7f12:	f362 1304 	bfi	r3, r2, #4, #1
    7f16:	e7f3      	b.n	7f00 <prepare_pdu_data_tx+0x4c>
					conn->packet_tx_head_offset);
    7f18:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
		if (!conn->packet_tx_head_len) {
    7f1c:	f894 1100 	ldrb.w	r1, [r4, #256]	; 0x100
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    7f20:	1d2a      	adds	r2, r5, #4
    7f22:	18d0      	adds	r0, r2, r3
		if (!conn->packet_tx_head_len) {
    7f24:	b911      	cbnz	r1, 7f2c <prepare_pdu_data_tx+0x78>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    7f26:	7841      	ldrb	r1, [r0, #1]
    7f28:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
		if (conn->packet_tx_head_offset) {
    7f2c:	b123      	cbz	r3, 7f38 <prepare_pdu_data_tx+0x84>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    7f2e:	5cd1      	ldrb	r1, [r2, r3]
    7f30:	2601      	movs	r6, #1
    7f32:	f366 0101 	bfi	r1, r6, #0, #2
    7f36:	54d1      	strb	r1, [r2, r3]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    7f38:	f894 6100 	ldrb.w	r6, [r4, #256]	; 0x100
    7f3c:	1af6      	subs	r6, r6, r3
    7f3e:	b2f6      	uxtb	r6, r6
    7f40:	7046      	strb	r6, [r0, #1]
		_pdu_data_tx->md = 0;
    7f42:	5cd1      	ldrb	r1, [r2, r3]
		if (_pdu_data_tx->len > max_tx_octets) {
    7f44:	2e1b      	cmp	r6, #27
		_pdu_data_tx->md = 0;
    7f46:	f36f 1104 	bfc	r1, #4, #1
    7f4a:	54d1      	strb	r1, [r2, r3]
		if (_pdu_data_tx->len > max_tx_octets) {
    7f4c:	d905      	bls.n	7f5a <prepare_pdu_data_tx+0xa6>
			_pdu_data_tx->len = max_tx_octets;
    7f4e:	211b      	movs	r1, #27
    7f50:	7041      	strb	r1, [r0, #1]
			_pdu_data_tx->md = 1;
    7f52:	5cd1      	ldrb	r1, [r2, r3]
    7f54:	f041 0110 	orr.w	r1, r1, #16
    7f58:	54d1      	strb	r1, [r2, r3]
		if (conn->pkt_tx_head->next) {
    7f5a:	6829      	ldr	r1, [r5, #0]
    7f5c:	b119      	cbz	r1, 7f66 <prepare_pdu_data_tx+0xb2>
			_pdu_data_tx->md = 1;
    7f5e:	5cd1      	ldrb	r1, [r2, r3]
    7f60:	f041 0110 	orr.w	r1, r1, #16
    7f64:	54d1      	strb	r1, [r2, r3]
		if (!conn->pkt_tx_ctrl &&
    7f66:	f1be 0f00 	cmp.w	lr, #0
    7f6a:	d1ca      	bne.n	7f02 <prepare_pdu_data_tx+0x4e>
    7f6c:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    7f70:	429d      	cmp	r5, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    7f72:	bf1c      	itt	ne
    7f74:	f8c4 50f4 	strne.w	r5, [r4, #244]	; 0xf4
    7f78:	f8c4 50f0 	strne.w	r5, [r4, #240]	; 0xf0
    7f7c:	e7c1      	b.n	7f02 <prepare_pdu_data_tx+0x4e>
	...

00007f80 <isr>:
{
    7f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7f84:	b08f      	sub	sp, #60	; 0x3c
	trx_done = radio_is_done();
    7f86:	f003 f897 	bl	b0b8 <radio_is_done>
    7f8a:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    7f8c:	b336      	cbz	r6, 7fdc <isr+0x5c>
		crc_ok = radio_crc_is_valid();
    7f8e:	f003 f8b3 	bl	b0f8 <radio_crc_is_valid>
    7f92:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    7f94:	f003 f934 	bl	b200 <radio_filter_has_match>
    7f98:	b2c4      	uxtb	r4, r0
		devmatch_id = radio_filter_match_get();
    7f9a:	f003 f93b 	bl	b214 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
    7f9e:	f003 fae3 	bl	b568 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
    7fa2:	f003 facf 	bl	b544 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
    7fa6:	f003 f8f5 	bl	b194 <radio_rssi_is_ready>
    7faa:	b2c5      	uxtb	r5, r0
	radio_status_reset();
    7fac:	f003 f86e 	bl	b08c <radio_status_reset>
	radio_tmr_status_reset();
    7fb0:	f003 f936 	bl	b220 <radio_tmr_status_reset>
	radio_filter_status_reset();
    7fb4:	f003 f91c 	bl	b1f0 <radio_filter_status_reset>
	radio_ar_status_reset();
    7fb8:	f003 faca 	bl	b550 <radio_ar_status_reset>
	radio_rssi_status_reset();
    7fbc:	f003 f8e2 	bl	b184 <radio_rssi_status_reset>
	switch (_radio.state) {
    7fc0:	4a7f      	ldr	r2, [pc, #508]	; (81c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c0>)
    7fc2:	7d13      	ldrb	r3, [r2, #20]
    7fc4:	4693      	mov	fp, r2
    7fc6:	2b05      	cmp	r3, #5
    7fc8:	f201 8352 	bhi.w	9670 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1670>
    7fcc:	e8df f013 	tbh	[pc, r3, lsl #1]
    7fd0:	00a50075 	.word	0x00a50075
    7fd4:	096a000a 	.word	0x096a000a
    7fd8:	096a096a 	.word	0x096a096a
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    7fdc:	4635      	mov	r5, r6
    7fde:	4634      	mov	r4, r6
    7fe0:	4637      	mov	r7, r6
    7fe2:	e7e3      	b.n	7fac <isr+0x2c>
	_radio.state = STATE_RX;
    7fe4:	2301      	movs	r3, #1
    7fe6:	f88b 3014 	strb.w	r3, [fp, #20]
	pdu = (void *)_radio.advertiser.adv_data.data
    7fea:	f89b 322c 	ldrb.w	r3, [fp, #556]	; 0x22c
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    7fee:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    7ff2:	445b      	add	r3, fp
    7ff4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    7ff8:	f003 030f 	and.w	r3, r3, #15
    7ffc:	2b07      	cmp	r3, #7
    7ffe:	d111      	bne.n	8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>
		hcto = radio_tmr_tifs_base_get()
    8000:	f003 fa10 	bl	b424 <radio_tmr_tifs_base_get>
    8004:	f200 1431 	addw	r4, r0, #305	; 0x131
		radio_tmr_tifs_set(RADIO_TMAFS);
    8008:	f44f 7096 	mov.w	r0, #300	; 0x12c
	radio_tmr_tifs_set(RADIO_TIFS);
    800c:	f003 f916 	bl	b23c <radio_tmr_tifs_set>
	switch (_radio.role) {
    8010:	f89b 3013 	ldrb.w	r3, [fp, #19]
    8014:	3b01      	subs	r3, #1
    8016:	3428      	adds	r4, #40	; 0x28
    8018:	2b03      	cmp	r3, #3
    801a:	d876      	bhi.n	810a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10a>
    801c:	e8df f003 	tbb	[pc, r3]
    8020:	50502c08 	.word	0x50502c08
	hcto = radio_tmr_tifs_base_get()
    8024:	f003 f9fe 	bl	b424 <radio_tmr_tifs_base_get>
    8028:	f100 049b 	add.w	r4, r0, #155	; 0x9b
	radio_tmr_tifs_set(RADIO_TIFS);
    802c:	2096      	movs	r0, #150	; 0x96
    802e:	e7ed      	b.n	800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    8030:	2300      	movs	r3, #0
    8032:	461a      	mov	r2, r3
    8034:	4619      	mov	r1, r3
    8036:	4618      	mov	r0, r3
    8038:	f003 f87c 	bl	b134 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    803c:	f003 f86a 	bl	b114 <radio_pkt_scratch_get>
    8040:	f002 ffec 	bl	b01c <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    8044:	f003 f82e 	bl	b0a4 <radio_is_ready>
    8048:	4605      	mov	r5, r0
    804a:	b138      	cbz	r0, 805c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c>
		LL_ASSERT(!radio_is_ready());
    804c:	4b5d      	ldr	r3, [pc, #372]	; (81c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c4>)
    804e:	9301      	str	r3, [sp, #4]
    8050:	9300      	str	r3, [sp, #0]
    8052:	4b5d      	ldr	r3, [pc, #372]	; (81c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c8>)
	LL_ASSERT(!radio_is_ready());
    8054:	4a5d      	ldr	r2, [pc, #372]	; (81cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1cc>)
    8056:	495e      	ldr	r1, [pc, #376]	; (81d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d0>)
    8058:	485e      	ldr	r0, [pc, #376]	; (81d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d4>)
    805a:	e187      	b.n	836c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36c>
		hcto += radio_rx_chain_delay_get(0, 0);
    805c:	4601      	mov	r1, r0
    805e:	f002 fff2 	bl	b046 <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    8062:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    8064:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    8066:	4628      	mov	r0, r5
    8068:	f002 ffe9 	bl	b03e <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    806c:	1a20      	subs	r0, r4, r0
    806e:	f003 f96f 	bl	b350 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    8072:	f003 f9bf 	bl	b3f4 <radio_tmr_end_capture>
    8076:	e020      	b.n	80ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xba>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    8078:	2300      	movs	r3, #0
    807a:	4619      	mov	r1, r3
    807c:	461a      	mov	r2, r3
    807e:	4618      	mov	r0, r3
    8080:	f003 f858 	bl	b134 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    8084:	f89b 26a5 	ldrb.w	r2, [fp, #1701]	; 0x6a5
    8088:	f8db 36a0 	ldr.w	r3, [fp, #1696]	; 0x6a0
		radio_pkt_rx_set(_radio.packet_rx
    808c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    8090:	3008      	adds	r0, #8
    8092:	f002 ffc3 	bl	b01c <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    8096:	f003 f805 	bl	b0a4 <radio_is_ready>
    809a:	4605      	mov	r5, r0
    809c:	2800      	cmp	r0, #0
    809e:	d1d5      	bne.n	804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>
		hcto += radio_rx_chain_delay_get(0, 0);
    80a0:	4601      	mov	r1, r0
    80a2:	f002 ffd0 	bl	b046 <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    80a6:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    80a8:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    80aa:	4628      	mov	r0, r5
    80ac:	f002 ffc7 	bl	b03e <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    80b0:	1a20      	subs	r0, r4, r0
    80b2:	f003 f94d 	bl	b350 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    80b6:	f003 f855 	bl	b164 <radio_rssi_measure>
}
    80ba:	b00f      	add	sp, #60	; 0x3c
    80bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(0, 0, 0, 0);
    80c0:	2300      	movs	r3, #0
    80c2:	461a      	mov	r2, r3
    80c4:	4619      	mov	r1, r3
    80c6:	4618      	mov	r0, r3
    80c8:	f003 f834 	bl	b134 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    80cc:	f89b 26a5 	ldrb.w	r2, [fp, #1701]	; 0x6a5
    80d0:	f8db 36a0 	ldr.w	r3, [fp, #1696]	; 0x6a0
		rx_packet_set(_radio.conn_curr,	(void *)
    80d4:	f8db 0680 	ldr.w	r0, [fp, #1664]	; 0x680
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    80d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    80dc:	3108      	adds	r1, #8
    80de:	f7fe f88b 	bl	61f8 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    80e2:	f002 ffdf 	bl	b0a4 <radio_is_ready>
    80e6:	4605      	mov	r5, r0
    80e8:	2800      	cmp	r0, #0
    80ea:	d1af      	bne.n	804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>
		hcto += radio_rx_chain_delay_get(0, 0);
    80ec:	4601      	mov	r1, r0
    80ee:	f002 ffaa 	bl	b046 <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    80f2:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    80f4:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    80f6:	4628      	mov	r0, r5
    80f8:	f002 ffa1 	bl	b03e <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    80fc:	1a20      	subs	r0, r4, r0
    80fe:	f003 f927 	bl	b350 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    8102:	2001      	movs	r0, #1
    8104:	f7fe f8d6 	bl	62b4 <packet_tx_enqueue>
    8108:	e7d7      	b.n	80ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xba>
		LL_ASSERT(0);
    810a:	4b2e      	ldr	r3, [pc, #184]	; (81c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c4>)
    810c:	9301      	str	r3, [sp, #4]
    810e:	9300      	str	r3, [sp, #0]
    8110:	4b2d      	ldr	r3, [pc, #180]	; (81c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c8>)
		LL_ASSERT(0);
    8112:	4a2e      	ldr	r2, [pc, #184]	; (81cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1cc>)
    8114:	492e      	ldr	r1, [pc, #184]	; (81d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d0>)
    8116:	4830      	ldr	r0, [pc, #192]	; (81d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d8>)
    8118:	e128      	b.n	836c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36c>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    811a:	b92e      	cbnz	r6, 8128 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x128>
		_radio.state = STATE_CLOSE;
    811c:	2303      	movs	r3, #3
    811e:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_disable();
    8122:	f002 ffa1 	bl	b068 <radio_disable>
    8126:	e7c8      	b.n	80ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xba>
	switch (_radio.role) {
    8128:	f89b 3013 	ldrb.w	r3, [fp, #19]
    812c:	3b01      	subs	r3, #1
    812e:	2b03      	cmp	r3, #3
    8130:	f201 80b2 	bhi.w	9298 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1298>
    8134:	e8df f013 	tbh	[pc, r3, lsl #1]
    8138:	023c0004 	.word	0x023c0004
    813c:	04b904b9 	.word	0x04b904b9
		if (crc_ok) {
    8140:	2f00      	cmp	r7, #0
    8142:	d0eb      	beq.n	811c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11c>
	pdu_adv = (void *)radio_pkt_scratch_get();
    8144:	f002 ffe6 	bl	b114 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    8148:	f89b 922c 	ldrb.w	r9, [fp, #556]	; 0x22c
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    814c:	7802      	ldrb	r2, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    814e:	eb09 2909 	add.w	r9, r9, r9, lsl #8
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    8152:	f002 030f 	and.w	r3, r2, #15
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    8156:	f109 092a 	add.w	r9, r9, #42	; 0x2a
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    815a:	2b03      	cmp	r3, #3
	pdu_adv = (void *)radio_pkt_scratch_get();
    815c:	4607      	mov	r7, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    815e:	eb0b 0509 	add.w	r5, fp, r9
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    8162:	d13d      	bne.n	81e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e0>
    8164:	7843      	ldrb	r3, [r0, #1]
    8166:	2b0c      	cmp	r3, #12
    8168:	d13a      	bne.n	81e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e0>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    816a:	f89b 3029 	ldrb.w	r3, [fp, #41]	; 0x29
		(devmatch_ok)) &&
    816e:	065b      	lsls	r3, r3, #25
    8170:	d500      	bpl.n	8174 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x174>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    8172:	b3ac      	cbz	r4, 81e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e0>
	return (adv->tx_addr == sr->rx_addr) &&
    8174:	f81b 3009 	ldrb.w	r3, [fp, r9]
    8178:	f3c3 1380 	ubfx	r3, r3, #6, #1
    817c:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    8180:	d12e      	bne.n	81e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e0>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    8182:	2206      	movs	r2, #6
    8184:	f107 0108 	add.w	r1, r7, #8
    8188:	1ca8      	adds	r0, r5, #2
    818a:	f7f8 fa20 	bl	5ce <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    818e:	bb38      	cbnz	r0, 81e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e0>
		_radio.state = STATE_CLOSE;
    8190:	2303      	movs	r3, #3
    8192:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_switch_complete_and_disable();
    8196:	f002 ffd7 	bl	b148 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    819a:	f89b 0634 	ldrb.w	r0, [fp, #1588]	; 0x634
    819e:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    81a2:	f200 4032 	addw	r0, r0, #1074	; 0x432
    81a6:	4458      	add	r0, fp
    81a8:	f002 ff3e 	bl	b028 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    81ac:	f002 ff7a 	bl	b0a4 <radio_is_ready>
    81b0:	2800      	cmp	r0, #0
    81b2:	d082      	beq.n	80ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xba>
    81b4:	4b03      	ldr	r3, [pc, #12]	; (81c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c4>)
    81b6:	9301      	str	r3, [sp, #4]
    81b8:	9300      	str	r3, [sp, #0]
    81ba:	4b08      	ldr	r3, [pc, #32]	; (81dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1dc>)
    81bc:	e74a      	b.n	8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>
    81be:	bf00      	nop
    81c0:	200005b0 	.word	0x200005b0
    81c4:	0000ceef 	.word	0x0000ceef
    81c8:	0000e022 	.word	0x0000e022
    81cc:	0000d7a6 	.word	0x0000d7a6
    81d0:	0000d71b 	.word	0x0000d71b
    81d4:	0000e58c 	.word	0x0000e58c
    81d8:	0000d6b3 	.word	0x0000d6b3
    81dc:	0000e035 	.word	0x0000e035
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    81e0:	783b      	ldrb	r3, [r7, #0]
    81e2:	f003 030f 	and.w	r3, r3, #15
    81e6:	2b05      	cmp	r3, #5
    81e8:	d198      	bne.n	811c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11c>
    81ea:	787b      	ldrb	r3, [r7, #1]
    81ec:	2b22      	cmp	r3, #34	; 0x22
    81ee:	d195      	bne.n	811c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11c>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    81f0:	f81b 3009 	ldrb.w	r3, [fp, r9]
    81f4:	f003 030f 	and.w	r3, r3, #15
    81f8:	2b01      	cmp	r3, #1
    81fa:	f040 80c1 	bne.w	8380 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x380>
		       isr_adv_ci_adva_check(adv, ci) &&
    81fe:	4639      	mov	r1, r7
    8200:	4628      	mov	r0, r5
    8202:	f7fd fd95 	bl	5d30 <isr_adv_ci_adva_check>
    8206:	b188      	cbz	r0, 822c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22c>
	return (adv->rx_addr == ci->tx_addr) &&
    8208:	783b      	ldrb	r3, [r7, #0]
    820a:	f81b 2009 	ldrb.w	r2, [fp, r9]
    820e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8212:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    8216:	f040 80b1 	bne.w	837c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x37c>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    821a:	2206      	movs	r2, #6
    821c:	1cb9      	adds	r1, r7, #2
    821e:	f105 0008 	add.w	r0, r5, #8
    8222:	f7f8 f9d4 	bl	5ce <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    8226:	fab0 f080 	clz	r0, r0
    822a:	0940      	lsrs	r0, r0, #5
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    822c:	2800      	cmp	r0, #0
    822e:	f43f af75 	beq.w	811c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11c>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    8232:	f89b 36e6 	ldrb.w	r3, [fp, #1766]	; 0x6e6
    8236:	b133      	cbz	r3, 8246 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x246>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    8238:	f89b 36e4 	ldrb.w	r3, [fp, #1764]	; 0x6e4
    823c:	f89b 26e5 	ldrb.w	r2, [fp, #1765]	; 0x6e5
    8240:	429a      	cmp	r2, r3
    8242:	f47f af6b 	bne.w	811c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11c>
    8246:	f8db 3638 	ldr.w	r3, [fp, #1592]	; 0x638
    824a:	2b00      	cmp	r3, #0
    824c:	f43f af66 	beq.w	811c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11c>
			node_rx = packet_rx_reserve_get(4);
    8250:	2004      	movs	r0, #4
    8252:	f7fd f8af 	bl	53b4 <packet_rx_reserve_get>
		if (!node_rx) {
    8256:	4605      	mov	r5, r0
    8258:	2800      	cmp	r0, #0
    825a:	f43f af5f 	beq.w	811c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11c>
		_radio.state = STATE_STOP;
    825e:	f04f 0a04 	mov.w	sl, #4
    8262:	f88b a014 	strb.w	sl, [fp, #20]
		radio_disable();
    8266:	f002 feff 	bl	b068 <radio_disable>
		conn = _radio.advertiser.conn;
    826a:	f8db 4638 	ldr.w	r4, [fp, #1592]	; 0x638
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    826e:	f8db 1674 	ldr.w	r1, [fp, #1652]	; 0x674
		_radio.advertiser.conn = NULL;
    8272:	f04f 0800 	mov.w	r8, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    8276:	f44f 7282 	mov.w	r2, #260	; 0x104
    827a:	4620      	mov	r0, r4
		_radio.advertiser.conn = NULL;
    827c:	f8cb 8638 	str.w	r8, [fp, #1592]	; 0x638
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    8280:	f7fb f8c3 	bl	340a <mem_index_get>
		memcpy(&conn->crc_init[0],
    8284:	2203      	movs	r2, #3
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    8286:	8420      	strh	r0, [r4, #32]
		memcpy(&conn->crc_init[0],
    8288:	f107 0112 	add.w	r1, r7, #18
    828c:	f104 0014 	add.w	r0, r4, #20
    8290:	f7f8 f9b2 	bl	5f8 <memcpy>
		memcpy(&conn->access_addr[0],
    8294:	f104 0310 	add.w	r3, r4, #16
    8298:	4618      	mov	r0, r3
		memcpy(&conn->data_chan_map[0],
    829a:	f104 0617 	add.w	r6, r4, #23
		memcpy(&conn->access_addr[0],
    829e:	4652      	mov	r2, sl
    82a0:	f107 010e 	add.w	r1, r7, #14
    82a4:	930a      	str	r3, [sp, #40]	; 0x28
    82a6:	f7f8 f9a7 	bl	5f8 <memcpy>
		memcpy(&conn->data_chan_map[0],
    82aa:	2205      	movs	r2, #5
    82ac:	f107 011e 	add.w	r1, r7, #30
    82b0:	4630      	mov	r0, r6
    82b2:	f7f8 f9a1 	bl	5f8 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    82b6:	2105      	movs	r1, #5
    82b8:	4630      	mov	r0, r6
    82ba:	f7fb fa0d 	bl	36d8 <util_ones_count_get>
		conn->data_chan_count =
    82be:	7f62      	ldrb	r2, [r4, #29]
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    82c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		conn->data_chan_count =
    82c2:	f360 0205 	bfi	r2, r0, #0, #6
    82c6:	7762      	strb	r2, [r4, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    82c8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    82cc:	f3c2 0204 	ubfx	r2, r2, #0, #5
    82d0:	77a2      	strb	r2, [r4, #30]
			pdu_adv->connect_ind.interval;
    82d2:	8b3a      	ldrh	r2, [r7, #24]
		conn->conn_interval =
    82d4:	84a2      	strh	r2, [r4, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    82d6:	f240 46e2 	movw	r6, #1250	; 0x4e2
    82da:	4356      	muls	r6, r2
		conn->latency = pdu_adv->connect_ind.latency;
    82dc:	7ef9      	ldrb	r1, [r7, #27]
    82de:	7eba      	ldrb	r2, [r7, #26]
    82e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    82e4:	84e2      	strh	r2, [r4, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    82e6:	4619      	mov	r1, r3
    82e8:	4652      	mov	r2, sl
    82ea:	f104 0054 	add.w	r0, r4, #84	; 0x54
    82ee:	f7f8 f983 	bl	5f8 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    82f2:	8bbb      	ldrh	r3, [r7, #28]
    82f4:	f242 7210 	movw	r2, #10000	; 0x2710
    82f8:	fb02 6303 	mla	r3, r2, r3, r6
    82fc:	3b01      	subs	r3, #1
    82fe:	fbb3 f3f6 	udiv	r3, r3, r6
    8302:	85e3      	strh	r3, [r4, #46]	; 0x2e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    8304:	4b9c      	ldr	r3, [pc, #624]	; (8578 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x578>)
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    8306:	4639      	mov	r1, r7
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    8308:	4433      	add	r3, r6
    830a:	fbb3 f3f6 	udiv	r3, r3, r6
    830e:	8663      	strh	r3, [r4, #50]	; 0x32
		node_rx->hdr.handle = conn->handle;
    8310:	8c23      	ldrh	r3, [r4, #32]
		radio_le_conn_cmplt->status = 0x00;
    8312:	f885 800b 	strb.w	r8, [r5, #11]
		radio_le_conn_cmplt->role = 0x01;
    8316:	f04f 0801 	mov.w	r8, #1
    831a:	f885 800c 	strb.w	r8, [r5, #12]
		node_rx->hdr.handle = conn->handle;
    831e:	80eb      	strh	r3, [r5, #6]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    8320:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    8324:	2206      	movs	r2, #6
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    8326:	f3c3 1380 	ubfx	r3, r3, #6, #1
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    832a:	712a      	strb	r2, [r5, #4]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    832c:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    832e:	f105 000e 	add.w	r0, r5, #14
    8332:	f7f8 f961 	bl	5f8 <memcpy>
			pdu_adv->connect_ind.interval;
    8336:	8b3b      	ldrh	r3, [r7, #24]
		radio_le_conn_cmplt->interval =
    8338:	82ab      	strh	r3, [r5, #20]
			pdu_adv->connect_ind.latency;
    833a:	8b7b      	ldrh	r3, [r7, #26]
		radio_le_conn_cmplt->latency =
    833c:	82eb      	strh	r3, [r5, #22]
			pdu_adv->connect_ind.timeout;
    833e:	8bbb      	ldrh	r3, [r7, #28]
		radio_le_conn_cmplt->timeout =
    8340:	832b      	strh	r3, [r5, #24]
			pdu_adv->connect_ind.sca;
    8342:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    8346:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    834a:	76ab      	strb	r3, [r5, #26]
		rx_fc_lock(conn->handle);
    834c:	8c20      	ldrh	r0, [r4, #32]
    834e:	f7fd fd5f 	bl	5e10 <rx_fc_lock>
		packet_rx_enqueue();
    8352:	f7fd fd11 	bl	5d78 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    8356:	2003      	movs	r0, #3
    8358:	f7fd f82c 	bl	53b4 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    835c:	b9f0      	cbnz	r0, 839c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x39c>
    835e:	4b87      	ldr	r3, [pc, #540]	; (857c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x57c>)
    8360:	9301      	str	r3, [sp, #4]
    8362:	9300      	str	r3, [sp, #0]
    8364:	4b86      	ldr	r3, [pc, #536]	; (8580 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x580>)
			LL_ASSERT(node_rx);
    8366:	4a87      	ldr	r2, [pc, #540]	; (8584 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x584>)
    8368:	4987      	ldr	r1, [pc, #540]	; (8588 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x588>)
    836a:	4888      	ldr	r0, [pc, #544]	; (858c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58c>)
		LL_ASSERT(0);
    836c:	f7f9 f84a 	bl	1404 <printk>
    8370:	4040      	eors	r0, r0
    8372:	f380 8811 	msr	BASEPRI, r0
    8376:	f04f 0004 	mov.w	r0, #4
    837a:	df02      	svc	2
	return (adv->rx_addr == ci->tx_addr) &&
    837c:	2000      	movs	r0, #0
    837e:	e755      	b.n	822c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22c>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    8380:	f89b 3029 	ldrb.w	r3, [fp, #41]	; 0x29
		(devmatch_ok)) &&
    8384:	09db      	lsrs	r3, r3, #7
    8386:	d000      	beq.n	838a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38a>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    8388:	b134      	cbz	r4, 8398 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x398>
	       isr_adv_ci_adva_check(adv, ci);
    838a:	4639      	mov	r1, r7
    838c:	4628      	mov	r0, r5
    838e:	f7fd fccf 	bl	5d30 <isr_adv_ci_adva_check>
		(devmatch_ok)) &&
    8392:	f000 0001 	and.w	r0, r0, #1
    8396:	e749      	b.n	822c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22c>
    8398:	4620      	mov	r0, r4
    839a:	e7fa      	b.n	8392 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x392>
			node_rx->hdr.handle = conn->handle;
    839c:	8c23      	ldrh	r3, [r4, #32]
    839e:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    83a0:	230a      	movs	r3, #10
    83a2:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    83a4:	783b      	ldrb	r3, [r7, #0]
    83a6:	f013 0320 	ands.w	r3, r3, #32
    83aa:	f000 80dc 	beq.w	8566 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x566>
					((u16_t)conn->access_addr[1] << 8) |
    83ae:	7c62      	ldrb	r2, [r4, #17]
					conn->access_addr[0];
    83b0:	7c23      	ldrb	r3, [r4, #16]
					((u16_t)conn->access_addr[3] << 8) |
    83b2:	7ce1      	ldrb	r1, [r4, #19]
				u16_t aa_ls =
    83b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    83b8:	7ca2      	ldrb	r2, [r4, #18]
				u16_t aa_ms =
    83ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    83be:	7f61      	ldrb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    83c0:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    83c2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    83c6:	7761      	strb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    83c8:	83e3      	strh	r3, [r4, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    83ca:	f880 800b 	strb.w	r8, [r0, #11]
			packet_rx_enqueue();
    83ce:	f7fd fcd3 	bl	5d78 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    83d2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    83d6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    83da:	496d      	ldr	r1, [pc, #436]	; (8590 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x590>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    83dc:	0952      	lsrs	r2, r2, #5
    83de:	f362 0384 	bfi	r3, r2, #2, #3
    83e2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    83e6:	f89b 368c 	ldrb.w	r3, [fp, #1676]	; 0x68c
			   gc_lookup_ppm[conn->slave.sca]) *
    83ea:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    83ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    83f2:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    83f4:	4373      	muls	r3, r6
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    83f6:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    83fa:	4a66      	ldr	r2, [pc, #408]	; (8594 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x594>)
    83fc:	f203 233f 	addw	r3, r3, #575	; 0x23f
    8400:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    8404:	63e3      	str	r3, [r4, #60]	; 0x3c
			(conn_interval_us >> 1) - RADIO_TIFS;
    8406:	0873      	lsrs	r3, r6, #1
    8408:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    840a:	6423      	str	r3, [r4, #64]	; 0x40
			pdu_adv->connect_ind.win_size * 1250;
    840c:	7d7b      	ldrb	r3, [r7, #21]
    840e:	f240 4ae2 	movw	sl, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    8412:	f04f 0800 	mov.w	r8, #0
			pdu_adv->connect_ind.win_size * 1250;
    8416:	fb0a f303 	mul.w	r3, sl, r3
		conn->slave.window_size_event_us =
    841a:	6523      	str	r3, [r4, #80]	; 0x50
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    841c:	4641      	mov	r1, r8
		conn->slave.window_size_prepare_us = 0;
    841e:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    8422:	4640      	mov	r0, r8
    8424:	f002 fe0d 	bl	b042 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    8428:	495b      	ldr	r1, [pc, #364]	; (8598 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x598>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    842a:	900a      	str	r0, [sp, #40]	; 0x28
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    842c:	f200 4052 	addw	r0, r0, #1106	; 0x452
    8430:	a34f      	add	r3, pc, #316	; (adr r3, 8570 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x570>)
    8432:	e9d3 2300 	ldrd	r2, r3, [r3]
    8436:	fba0 0101 	umull	r0, r1, r0, r1
    843a:	f7f7 ff15 	bl	268 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    843e:	f8db 56e8 	ldr.w	r5, [fp, #1768]	; 0x6e8
    8442:	6065      	str	r5, [r4, #4]
		conn->hdr.ticks_xtal_to_start =
    8444:	2327      	movs	r3, #39	; 0x27
		ticks_slot_offset =
    8446:	429d      	cmp	r5, r3
    8448:	bf38      	it	cc
    844a:	461d      	movcc	r5, r3
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    844c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn->hdr.ticks_xtal_to_start =
    8450:	6023      	str	r3, [r4, #0]
		conn_interval_us -=
    8452:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->hdr.ticks_slot =
    8454:	60e0      	str	r0, [r4, #12]
		conn->hdr.ticks_preempt_to_start =
    8456:	f8c4 8008 	str.w	r8, [r4, #8]
		conn_interval_us -=
    845a:	1af6      	subs	r6, r6, r3
		conn_offset_us = radio_tmr_end_get();
    845c:	f002 ffdc 	bl	b418 <radio_tmr_end_get>
    8460:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    8462:	8af8      	ldrh	r0, [r7, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    8464:	4641      	mov	r1, r8
		conn_offset_us +=
    8466:	fb00 aa0a 	mla	sl, r0, sl, sl
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    846a:	4640      	mov	r0, r8
    846c:	f002 fde7 	bl	b03e <radio_tx_chain_delay_get>
    8470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8472:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    8476:	449a      	add	sl, r3
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    8478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    847a:	ebaa 0a00 	sub.w	sl, sl, r0
    847e:	ebaa 0303 	sub.w	r3, sl, r3
    8482:	930a      	str	r3, [sp, #40]	; 0x28
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8484:	f240 43b3 	movw	r3, #1203	; 0x4b3
    8488:	9300      	str	r3, [sp, #0]
    848a:	2205      	movs	r2, #5
    848c:	4b43      	ldr	r3, [pc, #268]	; (859c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x59c>)
    848e:	f8df a108 	ldr.w	sl, [pc, #264]	; 8598 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x598>
    8492:	4641      	mov	r1, r8
    8494:	4640      	mov	r0, r8
    8496:	f7fb fe9b 	bl	41d0 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    849a:	f240 41b4 	movw	r1, #1204	; 0x4b4
    849e:	f7fd fcef 	bl	5e80 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    84a2:	f81b 3009 	ldrb.w	r3, [fp, r9]
    84a6:	f003 030f 	and.w	r3, r3, #15
    84aa:	2b01      	cmp	r3, #1
    84ac:	d107      	bne.n	84be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4be>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    84ae:	f8cd 8000 	str.w	r8, [sp]
    84b2:	4643      	mov	r3, r8
    84b4:	2203      	movs	r2, #3
    84b6:	4641      	mov	r1, r8
    84b8:	4640      	mov	r0, r8
    84ba:	f7fb fe89 	bl	41d0 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    84be:	fba6 670a 	umull	r6, r7, r6, sl
    84c2:	a32b      	add	r3, pc, #172	; (adr r3, 8570 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x570>)
    84c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    84c8:	4630      	mov	r0, r6
    84ca:	4639      	mov	r1, r7
    84cc:	f7f7 fecc 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    84d0:	f8db 3008 	ldr.w	r3, [fp, #8]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    84d4:	4a32      	ldr	r2, [pc, #200]	; (85a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5a0>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    84d6:	eba3 0b05 	sub.w	fp, r3, r5
    84da:	f894 3020 	ldrb.w	r3, [r4, #32]
    84de:	9406      	str	r4, [sp, #24]
    84e0:	3307      	adds	r3, #7
    84e2:	b2db      	uxtb	r3, r3
    84e4:	930b      	str	r3, [sp, #44]	; 0x2c
    84e6:	f240 43cb 	movw	r3, #1227	; 0x4cb
    84ea:	9308      	str	r3, [sp, #32]
    84ec:	4b2d      	ldr	r3, [pc, #180]	; (85a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5a4>)
    84ee:	9307      	str	r3, [sp, #28]
    84f0:	4b2d      	ldr	r3, [pc, #180]	; (85a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5a8>)
    84f2:	9305      	str	r3, [sp, #20]
    84f4:	68e3      	ldr	r3, [r4, #12]
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    84f6:	4680      	mov	r8, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    84f8:	441d      	add	r5, r3
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    84fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    84fe:	2307      	movs	r3, #7
    8500:	2100      	movs	r1, #0
    8502:	4343      	muls	r3, r0
    8504:	fb02 3301 	mla	r3, r2, r1, r3
    8508:	fba0 0102 	umull	r0, r1, r0, r2
    850c:	1a30      	subs	r0, r6, r0
    850e:	4419      	add	r1, r3
    8510:	eb67 0101 	sbc.w	r1, r7, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8514:	2400      	movs	r4, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    8516:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    851a:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    851c:	9504      	str	r5, [sp, #16]
    851e:	9403      	str	r4, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    8520:	f7f7 fea2 	bl	268 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    8524:	990a      	ldr	r1, [sp, #40]	; 0x28
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8526:	9002      	str	r0, [sp, #8]
    8528:	f028 437f 	bic.w	r3, r8, #4278190080	; 0xff000000
    852c:	9301      	str	r3, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    852e:	fba1 010a 	umull	r0, r1, r1, sl
    8532:	a30f      	add	r3, pc, #60	; (adr r3, 8570 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x570>)
    8534:	e9d3 2300 	ldrd	r2, r3, [r3]
    8538:	f7f7 fe96 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    853c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8540:	9000      	str	r0, [sp, #0]
    8542:	465b      	mov	r3, fp
    8544:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8546:	4621      	mov	r1, r4
    8548:	4620      	mov	r0, r4
    854a:	f7fb fda3 	bl	4094 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    854e:	f030 0302 	bics.w	r3, r0, #2
    8552:	f43f adb2 	beq.w	80ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xba>
    8556:	4b09      	ldr	r3, [pc, #36]	; (857c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x57c>)
    8558:	9301      	str	r3, [sp, #4]
    855a:	9300      	str	r3, [sp, #0]
    855c:	4b08      	ldr	r3, [pc, #32]	; (8580 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x580>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    855e:	4a09      	ldr	r2, [pc, #36]	; (8584 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x584>)
    8560:	4909      	ldr	r1, [pc, #36]	; (8588 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x588>)
    8562:	4812      	ldr	r0, [pc, #72]	; (85ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5ac>)
    8564:	e702      	b.n	836c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36c>
				le_chan_sel_algo->chan_sel_algo = 0x00;
    8566:	72c3      	strb	r3, [r0, #11]
    8568:	e731      	b.n	83ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ce>
    856a:	bf00      	nop
    856c:	f3af 8000 	nop.w
    8570:	1afd498d 	.word	0x1afd498d
    8574:	00000007 	.word	0x00000007
    8578:	026259ff 	.word	0x026259ff
    857c:	0000ceef 	.word	0x0000ceef
    8580:	0000e035 	.word	0x0000e035
    8584:	0000d7a6 	.word	0x0000d7a6
    8588:	0000d71b 	.word	0x0000d71b
    858c:	0000e83d 	.word	0x0000e83d
    8590:	0000e57c 	.word	0x0000e57c
    8594:	000f4240 	.word	0x000f4240
    8598:	3b9aca00 	.word	0x3b9aca00
    859c:	00005e81 	.word	0x00005e81
    85a0:	1afd498d 	.word	0x1afd498d
    85a4:	00005e45 	.word	0x00005e45
    85a8:	00007cb1 	.word	0x00007cb1
    85ac:	0000e3ec 	.word	0x0000e3ec
		if (crc_ok &&
    85b0:	2f00      	cmp	r7, #0
    85b2:	f000 8236 	beq.w	8a22 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa22>
	return ((_radio.scanner.filter_policy & 0x01) == 0) ||
    85b6:	f89b 364d 	ldrb.w	r3, [fp, #1613]	; 0x64d
    85ba:	f3c3 1300 	ubfx	r3, r3, #4, #1
    85be:	b113      	cbz	r3, 85c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c6>
		if (crc_ok &&
    85c0:	2c00      	cmp	r4, #0
    85c2:	f000 822e 	beq.w	8a22 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa22>
	bool dir_report = false;
    85c6:	2200      	movs	r2, #0
    85c8:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    85cc:	f89b 16a5 	ldrb.w	r1, [fp, #1701]	; 0x6a5
    85d0:	f8db 26a0 	ldr.w	r2, [fp, #1696]	; 0x6a0
    85d4:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    85d8:	f8db 266c 	ldr.w	r2, [fp, #1644]	; 0x66c
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    85dc:	f107 0408 	add.w	r4, r7, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    85e0:	2a00      	cmp	r2, #0
    85e2:	f000 80d3 	beq.w	878c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78c>
    85e6:	f89b 26e6 	ldrb.w	r2, [fp, #1766]	; 0x6e6
    85ea:	b132      	cbz	r2, 85fa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5fa>
				      (_radio.fc_req == _radio.fc_ack)) &&
    85ec:	f89b 26e4 	ldrb.w	r2, [fp, #1764]	; 0x6e4
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    85f0:	f89b 16e5 	ldrb.w	r1, [fp, #1765]	; 0x6e5
    85f4:	4291      	cmp	r1, r2
    85f6:	f040 80c9 	bne.w	878c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78c>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    85fa:	2b00      	cmp	r3, #0
    85fc:	f000 80b4 	beq.w	8768 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x768>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    8600:	7a3b      	ldrb	r3, [r7, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    8602:	f013 030f 	ands.w	r3, r3, #15
    8606:	f040 811b 	bne.w	8840 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x840>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    860a:	f002 ff05 	bl	b418 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    860e:	f8db 3648 	ldr.w	r3, [fp, #1608]	; 0x648
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    8612:	f200 2616 	addw	r6, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    8616:	48b8      	ldr	r0, [pc, #736]	; (88f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8f8>)
    8618:	2207      	movs	r2, #7
    861a:	fba3 0100 	umull	r0, r1, r3, r0
    861e:	fb02 1103 	mla	r1, r2, r3, r1
    8622:	a3b3      	add	r3, pc, #716	; (adr r3, 88f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8f0>)
    8624:	e9d3 2300 	ldrd	r2, r3, [r3]
    8628:	f7f7 fe1e 	bl	268 <__aeabi_uldivmod>
    862c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    8630:	4286      	cmp	r6, r0
    8632:	f080 80ab 	bcs.w	878c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78c>
			node_rx = packet_rx_reserve_get(4);
    8636:	2004      	movs	r0, #4
    8638:	f7fc febc 	bl	53b4 <packet_rx_reserve_get>
		if (node_rx == 0) {
    863c:	4682      	mov	sl, r0
    863e:	2800      	cmp	r0, #0
    8640:	f000 81ef 	beq.w	8a22 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa22>
		_radio.state = STATE_STOP;
    8644:	2604      	movs	r6, #4
		_radio.scanner.conn = NULL;
    8646:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    8648:	f8db 466c 	ldr.w	r4, [fp, #1644]	; 0x66c
		_radio.state = STATE_STOP;
    864c:	f88b 6014 	strb.w	r6, [fp, #20]
		_radio.scanner.conn = NULL;
    8650:	f8cb 366c 	str.w	r3, [fp, #1644]	; 0x66c
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    8654:	f002 fd5e 	bl	b114 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    8658:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    865a:	49a8      	ldr	r1, [pc, #672]	; (88fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8fc>)
			pdu_adv_tx->chan_sel = 1;
    865c:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    8660:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    8664:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    8666:	7a3a      	ldrb	r2, [r7, #8]
    8668:	b2db      	uxtb	r3, r3
    866a:	f3c2 1280 	ubfx	r2, r2, #6, #1
    866e:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    8672:	2222      	movs	r2, #34	; 0x22
    8674:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    8676:	f89b 264d 	ldrb.w	r2, [fp, #1613]	; 0x64d
    867a:	09d2      	lsrs	r2, r2, #7
    867c:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    8680:	4605      	mov	r5, r0
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    8682:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    8684:	f800 3b02 	strb.w	r3, [r0], #2
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    8688:	f105 0908 	add.w	r9, r5, #8
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    868c:	f7f7 ffb4 	bl	5f8 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    8690:	2206      	movs	r2, #6
    8692:	f107 010a 	add.w	r1, r7, #10
    8696:	4648      	mov	r0, r9
    8698:	f7f7 ffae 	bl	5f8 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    869c:	4632      	mov	r2, r6
    869e:	f104 0110 	add.w	r1, r4, #16
    86a2:	f105 000e 	add.w	r0, r5, #14
    86a6:	f7f7 ffa7 	bl	5f8 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    86aa:	2203      	movs	r2, #3
    86ac:	f104 0114 	add.w	r1, r4, #20
    86b0:	f105 0012 	add.w	r0, r5, #18
    86b4:	f7f7 ffa0 	bl	5f8 <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    86b8:	2301      	movs	r3, #1
    86ba:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    86bc:	f8bb 3660 	ldrh.w	r3, [fp, #1632]	; 0x660
		conn_interval_us =
    86c0:	f240 46e2 	movw	r6, #1250	; 0x4e2
    86c4:	435e      	muls	r6, r3
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    86c6:	f002 fea7 	bl	b418 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    86ca:	f8db 300c 	ldr.w	r3, [fp, #12]
		if (_radio.scanner.win_offset_us == 0) {
    86ce:	f8db 8670 	ldr.w	r8, [fp, #1648]	; 0x670
		if (!_radio.remainder_anchor ||
    86d2:	2b00      	cmp	r3, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    86d4:	bfcc      	ite	gt
    86d6:	f500 60db 	addgt.w	r0, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    86da:	f200 60ba 	addwle	r0, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    86de:	f1b8 0f00 	cmp.w	r8, #0
    86e2:	f040 80b7 	bne.w	8854 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x854>
			pdu_adv_tx->connect_ind.win_offset = 0;
    86e6:	f885 8016 	strb.w	r8, [r5, #22]
    86ea:	f885 8017 	strb.w	r8, [r5, #23]
    86ee:	4680      	mov	r8, r0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    86f0:	2100      	movs	r1, #0
    86f2:	4608      	mov	r0, r1
    86f4:	f002 fc9e 	bl	b034 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    86f8:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    86fa:	eba8 0800 	sub.w	r8, r8, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    86fe:	4608      	mov	r0, r1
    8700:	f002 fc9d 	bl	b03e <radio_tx_chain_delay_get>
    8704:	eba8 0000 	sub.w	r0, r8, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    8708:	f100 031e 	add.w	r3, r0, #30
    870c:	930a      	str	r3, [sp, #40]	; 0x28
		pdu_adv_tx->connect_ind.interval =
    870e:	f8bb 3660 	ldrh.w	r3, [fp, #1632]	; 0x660
    8712:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    8714:	f8bb 3662 	ldrh.w	r3, [fp, #1634]	; 0x662
    8718:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    871a:	f8bb 3664 	ldrh.w	r3, [fp, #1636]	; 0x664
    871e:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    8720:	f104 0117 	add.w	r1, r4, #23
    8724:	2205      	movs	r2, #5
    8726:	f105 001e 	add.w	r0, r5, #30
    872a:	f7f7 ff65 	bl	5f8 <memcpy>
		pdu_adv_tx->connect_ind.hop =
    872e:	7fa2      	ldrb	r2, [r4, #30]
    8730:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    8734:	f362 0304 	bfi	r3, r2, #0, #5
    8738:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    873c:	f89b 268c 	ldrb.w	r2, [fp, #1676]	; 0x68c
    8740:	f362 1347 	bfi	r3, r2, #5, #3
    8744:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    8748:	f002 fcfe 	bl	b148 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    874c:	4628      	mov	r0, r5
    874e:	f002 fc6b 	bl	b028 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    8752:	f002 fca7 	bl	b0a4 <radio_is_ready>
    8756:	4680      	mov	r8, r0
    8758:	2800      	cmp	r0, #0
    875a:	f000 808b 	beq.w	8874 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x874>
		LL_ASSERT(!radio_is_ready());
    875e:	4b68      	ldr	r3, [pc, #416]	; (8900 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x900>)
    8760:	9301      	str	r3, [sp, #4]
    8762:	9300      	str	r3, [sp, #0]
    8764:	4b67      	ldr	r3, [pc, #412]	; (8904 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x904>)
    8766:	e475      	b.n	8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    8768:	f89b 264d 	ldrb.w	r2, [fp, #1613]	; 0x64d
    876c:	7a3b      	ldrb	r3, [r7, #8]
    876e:	f3c2 1280 	ubfx	r2, r2, #6, #1
    8772:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8776:	429a      	cmp	r2, r3
    8778:	d108      	bne.n	878c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78c>
		(memcmp(&_radio.scanner.adv_addr[0],
    877a:	2206      	movs	r2, #6
    877c:	f107 010a 	add.w	r1, r7, #10
    8780:	4861      	ldr	r0, [pc, #388]	; (8908 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x908>)
    8782:	f7f7 ff24 	bl	5ce <memcmp>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    8786:	2800      	cmp	r0, #0
    8788:	f43f af3a 	beq.w	8600 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x600>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    878c:	7a3b      	ldrb	r3, [r7, #8]
    878e:	f013 030f 	ands.w	r3, r3, #15
    8792:	d002      	beq.n	879a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x79a>
    8794:	2b06      	cmp	r3, #6
    8796:	f040 8151 	bne.w	8a3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa3c>
		 (_radio.scanner.type != 0) &&
    879a:	f89b 264d 	ldrb.w	r2, [fp, #1613]	; 0x64d
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    879e:	0716      	lsls	r6, r2, #28
    87a0:	f140 813b 	bpl.w	8a1a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa1a>
		 (_radio.scanner.type != 0) &&
    87a4:	f8db 266c 	ldr.w	r2, [fp, #1644]	; 0x66c
    87a8:	2a00      	cmp	r2, #0
    87aa:	f040 8136 	bne.w	8a1a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa1a>
		err = isr_rx_scan_report(rssi_ready,
    87ae:	4628      	mov	r0, r5
    87b0:	f7fe f86a 	bl	6888 <isr_rx_scan_report.isra.34>
		if (err) {
    87b4:	2800      	cmp	r0, #0
    87b6:	f040 8134 	bne.w	8a22 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa22>
		if(pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND){
    87ba:	7a3b      	ldrb	r3, [r7, #8]
    87bc:	f003 030f 	and.w	r3, r3, #15
    87c0:	2b07      	cmp	r3, #7
    87c2:	d101      	bne.n	87c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c8>
			pdu_adv_tx = (void *)radio_pkt_scratch_get();
    87c4:	f002 fca6 	bl	b114 <radio_pkt_scratch_get>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    87c8:	f002 fca4 	bl	b114 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    87cc:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    87ce:	494b      	ldr	r1, [pc, #300]	; (88fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8fc>)
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    87d0:	2203      	movs	r2, #3
    87d2:	f362 0303 	bfi	r3, r2, #0, #4
    87d6:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    87d8:	7a3a      	ldrb	r2, [r7, #8]
    87da:	b2db      	uxtb	r3, r3
    87dc:	f3c2 1280 	ubfx	r2, r2, #6, #1
    87e0:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    87e4:	220c      	movs	r2, #12
    87e6:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    87e8:	f89b 264d 	ldrb.w	r2, [fp, #1613]	; 0x64d
    87ec:	09d2      	lsrs	r2, r2, #7
    87ee:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    87f2:	4604      	mov	r4, r0
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    87f4:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    87f6:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    87fa:	f7f7 fefd 	bl	5f8 <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    87fe:	2206      	movs	r2, #6
    8800:	f107 010a 	add.w	r1, r7, #10
    8804:	f104 0008 	add.w	r0, r4, #8
    8808:	f7f7 fef6 	bl	5f8 <memcpy>
		_radio.scanner.state = 1;
    880c:	f89b 364c 	ldrb.w	r3, [fp, #1612]	; 0x64c
    8810:	f043 0302 	orr.w	r3, r3, #2
    8814:	f88b 364c 	strb.w	r3, [fp, #1612]	; 0x64c
		radio_tmr_tifs_set(RADIO_TIFS);
    8818:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    881a:	2302      	movs	r3, #2
    881c:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    8820:	f002 fd0c 	bl	b23c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    8824:	2000      	movs	r0, #0
    8826:	f002 fc79 	bl	b11c <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    882a:	4620      	mov	r0, r4
    882c:	f002 fbfc 	bl	b028 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    8830:	f002 fde0 	bl	b3f4 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
    8834:	f002 fc36 	bl	b0a4 <radio_is_ready>
    8838:	2800      	cmp	r0, #0
    883a:	f43f ac3e 	beq.w	80ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xba>
    883e:	e78e      	b.n	875e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x75e>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    8840:	2b01      	cmp	r3, #1
    8842:	d1a7      	bne.n	8794 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x794>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    8844:	2100      	movs	r1, #0
    8846:	4620      	mov	r0, r4
    8848:	f7fd ff7a 	bl	6740 <isr_scan_tgta_check.isra.28>
				      (_radio.fc_req == _radio.fc_ack)) &&
    884c:	2800      	cmp	r0, #0
    884e:	d09d      	beq.n	878c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78c>
    8850:	e6db      	b.n	860a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x60a>
				conn_space_us += conn_interval_us;
    8852:	44b0      	add	r8, r6
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    8854:	f1b8 0f00 	cmp.w	r8, #0
    8858:	dbfb      	blt.n	8852 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x852>
    885a:	4580      	cmp	r8, r0
    885c:	d3f9      	bcc.n	8852 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x852>
			pdu_adv_tx->connect_ind.win_offset =
    885e:	f240 43e2 	movw	r3, #1250	; 0x4e2
				(conn_space_us - conn_offset_us) / 1250;
    8862:	eba8 0000 	sub.w	r0, r8, r0
			pdu_adv_tx->connect_ind.win_offset =
    8866:	fbb0 f0f3 	udiv	r0, r0, r3
			pdu_adv_tx->connect_ind.win_size++;
    886a:	7d6b      	ldrb	r3, [r5, #21]
			pdu_adv_tx->connect_ind.win_offset =
    886c:	82e8      	strh	r0, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    886e:	3301      	adds	r3, #1
    8870:	756b      	strb	r3, [r5, #21]
    8872:	e73d      	b.n	86f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6f0>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    8874:	f44f 7282 	mov.w	r2, #260	; 0x104
    8878:	f8db 1674 	ldr.w	r1, [fp, #1652]	; 0x674
    887c:	4620      	mov	r0, r4
    887e:	f7fa fdc4 	bl	340a <mem_index_get>
    8882:	8420      	strh	r0, [r4, #32]
		radio_le_conn_cmplt->status = 0x00;
    8884:	f88a 800b 	strb.w	r8, [sl, #11]
		radio_le_conn_cmplt->role = 0x00;
    8888:	f88a 800c 	strb.w	r8, [sl, #12]
				pdu_adv_tx->rx_addr;
    888c:	782b      	ldrb	r3, [r5, #0]
		node_rx->hdr.handle = conn->handle;
    888e:	f8aa 0006 	strh.w	r0, [sl, #6]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    8892:	2206      	movs	r2, #6
				pdu_adv_tx->rx_addr;
    8894:	f3c3 13c0 	ubfx	r3, r3, #7, #1
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    8898:	f88a 2004 	strb.w	r2, [sl, #4]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    889c:	4649      	mov	r1, r9
			radio_le_conn_cmplt->peer_addr_type =
    889e:	f88a 300d 	strb.w	r3, [sl, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    88a2:	f10a 000e 	add.w	r0, sl, #14
    88a6:	f7f7 fea7 	bl	5f8 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    88aa:	f8bb 3660 	ldrh.w	r3, [fp, #1632]	; 0x660
    88ae:	f8aa 3014 	strh.w	r3, [sl, #20]
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    88b2:	f8bb 3662 	ldrh.w	r3, [fp, #1634]	; 0x662
    88b6:	f8aa 3016 	strh.w	r3, [sl, #22]
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    88ba:	f8bb 3664 	ldrh.w	r3, [fp, #1636]	; 0x664
    88be:	f8aa 3018 	strh.w	r3, [sl, #24]
			pdu_adv_tx->connect_ind.sca;
    88c2:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    88c6:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    88ca:	f88a 301a 	strb.w	r3, [sl, #26]
		rx_fc_lock(conn->handle);
    88ce:	8c20      	ldrh	r0, [r4, #32]
    88d0:	f7fd fa9e 	bl	5e10 <rx_fc_lock>
		packet_rx_enqueue();
    88d4:	f7fd fa50 	bl	5d78 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    88d8:	2003      	movs	r0, #3
    88da:	f7fc fd6b 	bl	53b4 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    88de:	b9a8      	cbnz	r0, 890c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x90c>
    88e0:	4b07      	ldr	r3, [pc, #28]	; (8900 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x900>)
    88e2:	9301      	str	r3, [sp, #4]
    88e4:	9300      	str	r3, [sp, #0]
    88e6:	4b07      	ldr	r3, [pc, #28]	; (8904 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x904>)
    88e8:	e53d      	b.n	8366 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x366>
    88ea:	bf00      	nop
    88ec:	f3af 8000 	nop.w
    88f0:	3b9aca00 	.word	0x3b9aca00
    88f4:	00000000 	.word	0x00000000
    88f8:	1afd498d 	.word	0x1afd498d
    88fc:	20000bfe 	.word	0x20000bfe
    8900:	0000ceef 	.word	0x0000ceef
    8904:	0000e053 	.word	0x0000e053
    8908:	20000c04 	.word	0x20000c04
			node_rx->hdr.handle = conn->handle;
    890c:	8c23      	ldrh	r3, [r4, #32]
    890e:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    8910:	230a      	movs	r3, #10
    8912:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    8914:	7a3b      	ldrb	r3, [r7, #8]
    8916:	f013 0320 	ands.w	r3, r3, #32
    891a:	d00e      	beq.n	893a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x93a>
					((u16_t)conn->access_addr[1] << 8) |
    891c:	7c62      	ldrb	r2, [r4, #17]
					conn->access_addr[0];
    891e:	7c23      	ldrb	r3, [r4, #16]
					((u16_t)conn->access_addr[3] << 8) |
    8920:	7ce1      	ldrb	r1, [r4, #19]
				u16_t aa_ls =
    8922:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    8926:	7ca2      	ldrb	r2, [r4, #18]
				u16_t aa_ms =
    8928:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    892c:	7f61      	ldrb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    892e:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    8930:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    8934:	83e3      	strh	r3, [r4, #30]
				conn->data_chan_sel = 1;
    8936:	7761      	strb	r1, [r4, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    8938:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    893a:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    893c:	f7fd fa1c 	bl	5d78 <packet_rx_enqueue>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    8940:	f8db 36e8 	ldr.w	r3, [fp, #1768]	; 0x6e8
    8944:	6063      	str	r3, [r4, #4]
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    8946:	2b27      	cmp	r3, #39	; 0x27
    8948:	bf38      	it	cc
    894a:	2327      	movcc	r3, #39	; 0x27
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    894c:	2227      	movs	r2, #39	; 0x27
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    894e:	2500      	movs	r5, #0
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    8950:	6022      	str	r2, [r4, #0]
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    8952:	4698      	mov	r8, r3
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    8954:	f8db 2668 	ldr.w	r2, [fp, #1640]	; 0x668
    8958:	60e2      	str	r2, [r4, #12]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    895a:	f240 638a 	movw	r3, #1674	; 0x68a
    895e:	2206      	movs	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    8960:	60a5      	str	r5, [r4, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8962:	4629      	mov	r1, r5
    8964:	9300      	str	r3, [sp, #0]
    8966:	4628      	mov	r0, r5
    8968:	4bb9      	ldr	r3, [pc, #740]	; (8c50 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc50>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    896a:	f8df a300 	ldr.w	sl, [pc, #768]	; 8c6c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc6c>
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    896e:	f7fb fc2f 	bl	41d0 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    8972:	f240 618b 	movw	r1, #1675	; 0x68b
    8976:	f7fd fab7 	bl	5ee8 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    897a:	462b      	mov	r3, r5
    897c:	2204      	movs	r2, #4
    897e:	4629      	mov	r1, r5
    8980:	9500      	str	r5, [sp, #0]
    8982:	4628      	mov	r0, r5
    8984:	f7fb fc24 	bl	41d0 <ticker_stop>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8988:	f8db 3008 	ldr.w	r3, [fp, #8]
    898c:	f894 9020 	ldrb.w	r9, [r4, #32]
		ticker_status =
    8990:	9406      	str	r4, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8992:	eba3 0b08 	sub.w	fp, r3, r8
		ticker_status =
    8996:	f240 63a2 	movw	r3, #1698	; 0x6a2
    899a:	9308      	str	r3, [sp, #32]
    899c:	4bad      	ldr	r3, [pc, #692]	; (8c54 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc54>)
    899e:	9307      	str	r3, [sp, #28]
    89a0:	4bad      	ldr	r3, [pc, #692]	; (8c58 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc58>)
    89a2:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    89a4:	68e3      	ldr	r3, [r4, #12]
		ticker_status =
    89a6:	9503      	str	r5, [sp, #12]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    89a8:	fba6 670a 	umull	r6, r7, r6, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    89ac:	4443      	add	r3, r8
		ticker_status =
    89ae:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    89b0:	4630      	mov	r0, r6
    89b2:	a3a5      	add	r3, pc, #660	; (adr r3, 8c48 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc48>)
    89b4:	e9d3 2300 	ldrd	r2, r3, [r3]
    89b8:	4639      	mov	r1, r7
    89ba:	f7f7 fc55 	bl	268 <__aeabi_uldivmod>
    89be:	4610      	mov	r0, r2
    89c0:	4619      	mov	r1, r3
    89c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    89c6:	2300      	movs	r3, #0
    89c8:	f7f7 fc4e 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    89cc:	a39e      	add	r3, pc, #632	; (adr r3, 8c48 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc48>)
    89ce:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    89d2:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    89d4:	4639      	mov	r1, r7
    89d6:	4630      	mov	r0, r6
    89d8:	f7f7 fc46 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    89dc:	990a      	ldr	r1, [sp, #40]	; 0x28
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    89de:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    89e0:	a399      	add	r3, pc, #612	; (adr r3, 8c48 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc48>)
    89e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    89e6:	fba1 010a 	umull	r0, r1, r1, sl
    89ea:	f7f7 fc3d 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    89ee:	f109 0907 	add.w	r9, r9, #7
    89f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    89f6:	fa5f f989 	uxtb.w	r9, r9
    89fa:	9000      	str	r0, [sp, #0]
    89fc:	465b      	mov	r3, fp
    89fe:	464a      	mov	r2, r9
    8a00:	4629      	mov	r1, r5
    8a02:	4628      	mov	r0, r5
    8a04:	f7fb fb46 	bl	4094 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8a08:	f030 0302 	bics.w	r3, r0, #2
    8a0c:	f43f ab55 	beq.w	80ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xba>
    8a10:	4b92      	ldr	r3, [pc, #584]	; (8c5c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc5c>)
    8a12:	9301      	str	r3, [sp, #4]
    8a14:	9300      	str	r3, [sp, #0]
    8a16:	4b92      	ldr	r3, [pc, #584]	; (8c60 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc60>)
    8a18:	e5a1      	b.n	855e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x55e>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    8a1a:	b97b      	cbnz	r3, 8a3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa3c>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    8a1c:	7a7b      	ldrb	r3, [r7, #9]
    8a1e:	2b00      	cmp	r3, #0
    8a20:	d13b      	bne.n	8a9a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa9a>
			_radio.state = STATE_CLOSE;
    8a22:	2303      	movs	r3, #3
    8a24:	f88b 3014 	strb.w	r3, [fp, #20]
			radio_disable();
    8a28:	f002 fb1e 	bl	b068 <radio_disable>
			_radio.scanner.state = 0;
    8a2c:	f89b 364c 	ldrb.w	r3, [fp, #1612]	; 0x64c
    8a30:	f36f 0341 	bfc	r3, #1, #1
    8a34:	f88b 364c 	strb.w	r3, [fp, #1612]	; 0x64c
    8a38:	f7ff bb3f 	b.w	80ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xba>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    8a3c:	2b01      	cmp	r3, #1
    8a3e:	d00d      	beq.n	8a5c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa5c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    8a40:	7a3b      	ldrb	r3, [r7, #8]
					&dir_report))) ||
    8a42:	f003 020b 	and.w	r2, r3, #11
    8a46:	2a02      	cmp	r2, #2
    8a48:	d0e8      	beq.n	8a1c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa1c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    8a4a:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    8a4e:	2b07      	cmp	r3, #7
    8a50:	d10b      	bne.n	8a6a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa6a>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    8a52:	f89b 364d 	ldrb.w	r3, [fp, #1613]	; 0x64d
    8a56:	075c      	lsls	r4, r3, #29
    8a58:	d1e0      	bne.n	8a1c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa1c>
    8a5a:	e7e2      	b.n	8a22 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa22>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    8a5c:	a90d      	add	r1, sp, #52	; 0x34
    8a5e:	4620      	mov	r0, r4
    8a60:	f7fd fe6e 	bl	6740 <isr_scan_tgta_check.isra.28>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    8a64:	2800      	cmp	r0, #0
    8a66:	d1d9      	bne.n	8a1c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa1c>
    8a68:	e7ea      	b.n	8a40 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa40>
		   (_radio.scanner.phy)) ||
    8a6a:	2b04      	cmp	r3, #4
    8a6c:	d1d9      	bne.n	8a22 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa22>
		   (_radio.scanner.state != 0) &&
    8a6e:	f89b 364c 	ldrb.w	r3, [fp, #1612]	; 0x64c
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    8a72:	0798      	lsls	r0, r3, #30
    8a74:	d5d5      	bpl.n	8a22 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa22>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    8a76:	f002 fb4d 	bl	b114 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    8a7a:	7a3b      	ldrb	r3, [r7, #8]
    8a7c:	7802      	ldrb	r2, [r0, #0]
    8a7e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8a82:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    8a86:	d1cc      	bne.n	8a22 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa22>
		(memcmp(&sreq->scan_req.adv_addr[0],
    8a88:	2206      	movs	r2, #6
    8a8a:	f107 010a 	add.w	r1, r7, #10
    8a8e:	3008      	adds	r0, #8
    8a90:	f7f7 fd9d 	bl	5ce <memcmp>
		   (_radio.scanner.state != 0) &&
    8a94:	2800      	cmp	r0, #0
    8a96:	d0c1      	beq.n	8a1c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa1c>
    8a98:	e7c3      	b.n	8a22 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa22>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    8a9a:	f8db 366c 	ldr.w	r3, [fp, #1644]	; 0x66c
    8a9e:	2b00      	cmp	r3, #0
    8aa0:	d1bf      	bne.n	8a22 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa22>
		err = isr_rx_scan_report(rssi_ready,
    8aa2:	4628      	mov	r0, r5
    8aa4:	f7fd fef0 	bl	6888 <isr_rx_scan_report.isra.34>
    8aa8:	e7bb      	b.n	8a22 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa22>
	_radio.packet_counter++;
    8aaa:	f89b 3684 	ldrb.w	r3, [fp, #1668]	; 0x684
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    8aae:	f89b 26a5 	ldrb.w	r2, [fp, #1701]	; 0x6a5
	_radio.packet_counter++;
    8ab2:	3301      	adds	r3, #1
    8ab4:	f88b 3684 	strb.w	r3, [fp, #1668]	; 0x684
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    8ab8:	f8db 36a0 	ldr.w	r3, [fp, #1696]	; 0x6a0
    8abc:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    8ac0:	2301      	movs	r3, #1
    8ac2:	7133      	strb	r3, [r6, #4]
	if (crc_ok) {
    8ac4:	2f00      	cmp	r7, #0
    8ac6:	f000 83a7 	beq.w	9218 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1218>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    8aca:	f8db 3680 	ldr.w	r3, [fp, #1664]	; 0x680
    8ace:	7a30      	ldrb	r0, [r6, #8]
    8ad0:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    8ad4:	f3c0 0080 	ubfx	r0, r0, #2, #1
    8ad8:	f002 0101 	and.w	r1, r2, #1
    8adc:	4288      	cmp	r0, r1
    8ade:	f000 80cb 	beq.w	8c78 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc78>
		_radio.conn_curr->sn++;
    8ae2:	f081 0101 	eor.w	r1, r1, #1
    8ae6:	f361 0200 	bfi	r2, r1, #0, #1
    8aea:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		if (_radio.role == ROLE_SLAVE) {
    8aee:	f89b 2013 	ldrb.w	r2, [fp, #19]
    8af2:	2a03      	cmp	r2, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    8af4:	bf02      	ittt	eq
    8af6:	f893 2038 	ldrbeq.w	r2, [r3, #56]	; 0x38
    8afa:	f042 0201 	orreq.w	r2, r2, #1
    8afe:	f883 2038 	strbeq.w	r2, [r3, #56]	; 0x38
		if (_radio.conn_curr->empty == 0) {
    8b02:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    8b06:	0611      	lsls	r1, r2, #24
    8b08:	f100 80b2 	bmi.w	8c70 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc70>
			node_tx = _radio.conn_curr->pkt_tx_head;
    8b0c:	f8d3 80ec 	ldr.w	r8, [r3, #236]	; 0xec
				_radio.conn_curr->packet_tx_head_offset);
    8b10:	f893 e101 	ldrb.w	lr, [r3, #257]	; 0x101
			pdu_data_tx = (void *)(node_tx->pdu_data +
    8b14:	f108 0c04 	add.w	ip, r8, #4
    8b18:	eb0c 050e 	add.w	r5, ip, lr
			pdu_data_tx_len = pdu_data_tx->len;
    8b1c:	786c      	ldrb	r4, [r5, #1]
			if (pdu_data_tx_len != 0) {
    8b1e:	b90c      	cbnz	r4, 8b24 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb24>
	u8_t terminate = 0;
    8b20:	2500      	movs	r5, #0
    8b22:	e02b      	b.n	8b7c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb7c>
				if (_radio.conn_curr->enc_tx) {
    8b24:	0692      	lsls	r2, r2, #26
    8b26:	d50a      	bpl.n	8b3e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb3e>
					_radio.conn_curr->ccm_tx.counter++;
    8b28:	f8d3 00da 	ldr.w	r0, [r3, #218]	; 0xda
    8b2c:	f8d3 10de 	ldr.w	r1, [r3, #222]	; 0xde
    8b30:	3001      	adds	r0, #1
    8b32:	f141 0100 	adc.w	r1, r1, #0
    8b36:	f8c3 00da 	str.w	r0, [r3, #218]	; 0xda
    8b3a:	f8c3 10de 	str.w	r1, [r3, #222]	; 0xde
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    8b3e:	f81c 300e 	ldrb.w	r3, [ip, lr]
    8b42:	f003 0303 	and.w	r3, r3, #3
    8b46:	2b03      	cmp	r3, #3
    8b48:	d1ea      	bne.n	8b20 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb20>
	switch (pdu_data_tx->llctrl.opcode) {
    8b4a:	78ea      	ldrb	r2, [r5, #3]
    8b4c:	2a02      	cmp	r2, #2
    8b4e:	d1e7      	bne.n	8b20 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb20>
		_radio.state = STATE_CLOSE;
    8b50:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_disable();
    8b54:	f002 fa88 	bl	b068 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    8b58:	f002 faa4 	bl	b0a4 <radio_is_ready>
    8b5c:	b128      	cbz	r0, 8b6a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb6a>
    8b5e:	4b3f      	ldr	r3, [pc, #252]	; (8c5c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc5c>)
    8b60:	9301      	str	r3, [sp, #4]
    8b62:	9300      	str	r3, [sp, #0]
    8b64:	4b3f      	ldr	r3, [pc, #252]	; (8c64 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc64>)
    8b66:	f7ff ba75 	b.w	8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    8b6a:	7929      	ldrb	r1, [r5, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    8b6c:	f8db 0680 	ldr.w	r0, [fp, #1664]	; 0x680
    8b70:	2913      	cmp	r1, #19
    8b72:	bf08      	it	eq
    8b74:	2116      	moveq	r1, #22
    8b76:	f7fd fe43 	bl	6800 <terminate_ind_rx_enqueue>
		terminate = 1;
    8b7a:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    8b7c:	f8db 3680 	ldr.w	r3, [fp, #1664]	; 0x680
    8b80:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
			if (_radio.conn_curr->packet_tx_head_offset ==
    8b84:	f893 1100 	ldrb.w	r1, [r3, #256]	; 0x100
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    8b88:	4422      	add	r2, r4
    8b8a:	b2d2      	uxtb	r2, r2
			if (_radio.conn_curr->packet_tx_head_offset ==
    8b8c:	4291      	cmp	r1, r2
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    8b8e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
			if (_radio.conn_curr->packet_tx_head_offset ==
    8b92:	d11e      	bne.n	8bd2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbd2>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    8b94:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    8b98:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
	conn->packet_tx_head_len = 0;
    8b9c:	2000      	movs	r0, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    8b9e:	428a      	cmp	r2, r1
	conn->packet_tx_head_len = 0;
    8ba0:	f883 0100 	strb.w	r0, [r3, #256]	; 0x100
	conn->packet_tx_head_offset = 0;
    8ba4:	f883 0101 	strb.w	r0, [r3, #257]	; 0x101
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    8ba8:	d116      	bne.n	8bd8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbd8>
		if (node_tx) {
    8baa:	f1b8 0f00 	cmp.w	r8, #0
    8bae:	d010      	beq.n	8bd2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbd2>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    8bb0:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    8bb4:	6814      	ldr	r4, [r2, #0]
    8bb6:	f8c3 40ec 	str.w	r4, [r3, #236]	; 0xec
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    8bba:	428a      	cmp	r2, r1
				conn->pkt_tx_ctrl = NULL;
    8bbc:	bf06      	itte	eq
    8bbe:	f8c3 00f0 	streq.w	r0, [r3, #240]	; 0xf0
				conn->pkt_tx_ctrl_last = NULL;
    8bc2:	f8c3 00f4 	streq.w	r0, [r3, #244]	; 0xf4
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    8bc6:	f8c3 40f0 	strne.w	r4, [r3, #240]	; 0xf0
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    8bca:	4927      	ldr	r1, [pc, #156]	; (8c68 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc68>)
    8bcc:	4640      	mov	r0, r8
    8bce:	f7fa fc04 	bl	33da <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    8bd2:	f04f 0800 	mov.w	r8, #0
    8bd6:	e008      	b.n	8bea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbea>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    8bd8:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
    8bdc:	428a      	cmp	r2, r1
    8bde:	6812      	ldr	r2, [r2, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    8be0:	bf08      	it	eq
    8be2:	f8c3 20f8 	streq.w	r2, [r3, #248]	; 0xf8
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    8be6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	if (terminate) {
    8bea:	2d00      	cmp	r5, #0
    8bec:	d046      	beq.n	8c7c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc7c>
		connection_release(_radio.conn_curr);
    8bee:	f8db 0680 	ldr.w	r0, [fp, #1664]	; 0x680
    8bf2:	f7fd fbad 	bl	6350 <connection_release>
		_radio.conn_curr = NULL;
    8bf6:	2500      	movs	r5, #0
				_radio.conn_curr = NULL;
    8bf8:	f8cb 5680 	str.w	r5, [fp, #1664]	; 0x680
	if (!radio_tmr_aa_restore()) {
    8bfc:	f002 fbee 	bl	b3dc <radio_tmr_aa_restore>
    8c00:	b918      	cbnz	r0, 8c0a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0a>
		radio_tmr_aa_save(radio_tmr_aa_get());
    8c02:	f002 fbdf 	bl	b3c4 <radio_tmr_aa_get>
    8c06:	f002 fbe3 	bl	b3d0 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    8c0a:	f8db 3680 	ldr.w	r3, [fp, #1664]	; 0x680
    8c0e:	2b00      	cmp	r3, #0
    8c10:	f43f aa53 	beq.w	80ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xba>
	if (tx_release) {
    8c14:	f1b8 0f00 	cmp.w	r8, #0
    8c18:	d003      	beq.n	8c22 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc22>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    8c1a:	4641      	mov	r1, r8
    8c1c:	8c18      	ldrh	r0, [r3, #32]
    8c1e:	f7fd fb0d 	bl	623c <pdu_node_tx_release>
	if (rx_enqueue) {
    8c22:	2d00      	cmp	r5, #0
    8c24:	f43f aa49 	beq.w	80ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xba>
		rx_fc_lock(_radio.conn_curr->handle);
    8c28:	f8db 3680 	ldr.w	r3, [fp, #1664]	; 0x680
    8c2c:	8c18      	ldrh	r0, [r3, #32]
    8c2e:	f7fd f8ef 	bl	5e10 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    8c32:	f8db 3680 	ldr.w	r3, [fp, #1664]	; 0x680
    8c36:	8c1b      	ldrh	r3, [r3, #32]
    8c38:	80f3      	strh	r3, [r6, #6]
		packet_rx_enqueue();
    8c3a:	f7fd f89d 	bl	5d78 <packet_rx_enqueue>
    8c3e:	f7ff ba3c 	b.w	80ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xba>
    8c42:	bf00      	nop
    8c44:	f3af 8000 	nop.w
    8c48:	1afd498d 	.word	0x1afd498d
    8c4c:	00000007 	.word	0x00000007
    8c50:	00005ee9 	.word	0x00005ee9
    8c54:	00005e45 	.word	0x00005e45
    8c58:	00007cad 	.word	0x00007cad
    8c5c:	0000ceef 	.word	0x0000ceef
    8c60:	0000e053 	.word	0x0000e053
    8c64:	0000e05f 	.word	0x0000e05f
    8c68:	20000c70 	.word	0x20000c70
    8c6c:	3b9aca00 	.word	0x3b9aca00
			_radio.conn_curr->empty = 0;
    8c70:	f36f 12c7 	bfc	r2, #7, #1
    8c74:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    8c78:	f04f 0800 	mov.w	r8, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    8c7c:	f8db 3680 	ldr.w	r3, [fp, #1664]	; 0x680
    8c80:	7a32      	ldrb	r2, [r6, #8]
    8c82:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    8c86:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    8c8a:	f3c3 0340 	ubfx	r3, r3, #1, #1
    8c8e:	429a      	cmp	r2, r3
    8c90:	d03c      	beq.n	8d0c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd0c>
	u8_t rx_enqueue = 0;
    8c92:	2500      	movs	r5, #0
		_radio.conn_curr->supervision_expire = 0;
    8c94:	f8db 3680 	ldr.w	r3, [fp, #1664]	; 0x680
		_radio.crc_expire = 0;
    8c98:	2400      	movs	r4, #0
    8c9a:	f88b 4685 	strb.w	r4, [fp, #1669]	; 0x685
		_radio.conn_curr->supervision_expire = 0;
    8c9e:	861c      	strh	r4, [r3, #48]	; 0x30
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    8ca0:	f8db 0680 	ldr.w	r0, [fp, #1664]	; 0x680
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    8ca4:	a90d      	add	r1, sp, #52	; 0x34
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    8ca6:	f890 90a8 	ldrb.w	r9, [r0, #168]	; 0xa8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    8caa:	f7ff f903 	bl	7eb4 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    8cae:	f89b 3014 	ldrb.w	r3, [fp, #20]
    8cb2:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    8cb4:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    8cb8:	d013      	beq.n	8ce2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xce2>
    8cba:	2c00      	cmp	r4, #0
    8cbc:	f040 82c5 	bne.w	924a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x124a>
    8cc0:	b13f      	cbz	r7, 8cd2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcd2>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    8cc2:	7a33      	ldrb	r3, [r6, #8]
    8cc4:	06df      	lsls	r7, r3, #27
    8cc6:	d404      	bmi.n	8cd2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcd2>
			 (pdu_data_tx->len == 0)) ||
    8cc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			((crc_ok) && (pdu_data_rx->md == 0) &&
    8cca:	785b      	ldrb	r3, [r3, #1]
    8ccc:	2b00      	cmp	r3, #0
    8cce:	f000 82bc 	beq.w	924a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x124a>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    8cd2:	f8db 3680 	ldr.w	r3, [fp, #1664]	; 0x680
			 (pdu_data_tx->len == 0)) ||
    8cd6:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    8cda:	2b00      	cmp	r3, #0
    8cdc:	bf0c      	ite	eq
    8cde:	2302      	moveq	r3, #2
    8ce0:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
    8ce2:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    8ce4:	f88b 3014 	strb.w	r3, [fp, #20]
	if (_radio.state == STATE_CLOSE) {
    8ce8:	f040 82cd 	bne.w	9286 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1286>
		if (_radio.role == ROLE_MASTER) {
    8cec:	f89b 3013 	ldrb.w	r3, [fp, #19]
    8cf0:	2b04      	cmp	r3, #4
    8cf2:	f040 82ac 	bne.w	924e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x124e>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    8cf6:	f8db 3680 	ldr.w	r3, [fp, #1664]	; 0x680
    8cfa:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    8cfe:	f369 12c7 	bfi	r2, r9, #7, #1
    8d02:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			radio_disable();
    8d06:	f002 f9af 	bl	b068 <radio_disable>
    8d0a:	e777      	b.n	8bfc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbfc>
	    (packet_rx_reserve_get(3) != 0) &&
    8d0c:	2003      	movs	r0, #3
    8d0e:	f7fc fb51 	bl	53b4 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    8d12:	2800      	cmp	r0, #0
    8d14:	d0bd      	beq.n	8c92 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc92>
	    (packet_rx_reserve_get(3) != 0) &&
    8d16:	f89b 36e6 	ldrb.w	r3, [fp, #1766]	; 0x6e6
    8d1a:	b373      	cbz	r3, 8d7a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd7a>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    8d1c:	f8db 36b0 	ldr.w	r3, [fp, #1712]	; 0x6b0
    8d20:	f8db 26b4 	ldr.w	r2, [fp, #1716]	; 0x6b4
	    ((_radio.fc_ena == 0) ||
    8d24:	4293      	cmp	r3, r2
    8d26:	d105      	bne.n	8d34 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd34>
	      (_radio.fc_req == _radio.fc_ack)) ||
    8d28:	f89b 26e4 	ldrb.w	r2, [fp, #1764]	; 0x6e4
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    8d2c:	f89b 16e5 	ldrb.w	r1, [fp, #1765]	; 0x6e5
    8d30:	4291      	cmp	r1, r2
    8d32:	d022      	beq.n	8d7a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd7a>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    8d34:	f8db 26b4 	ldr.w	r2, [fp, #1716]	; 0x6b4
	      (_radio.fc_req == _radio.fc_ack)) ||
    8d38:	4293      	cmp	r3, r2
    8d3a:	d0aa      	beq.n	8c92 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc92>
	      (_radio.fc_req != _radio.fc_ack) &&
    8d3c:	f89b 36e4 	ldrb.w	r3, [fp, #1764]	; 0x6e4
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    8d40:	f89b 26e5 	ldrb.w	r2, [fp, #1765]	; 0x6e5
    8d44:	429a      	cmp	r2, r3
    8d46:	d0a4      	beq.n	8c92 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc92>
		(((_radio.fc_req == 0) &&
    8d48:	f89b 36e4 	ldrb.w	r3, [fp, #1764]	; 0x6e4
	      (_radio.fc_req != _radio.fc_ack) &&
    8d4c:	b933      	cbnz	r3, 8d5c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd5c>
		   _radio.conn_curr->handle)) ||
    8d4e:	f8db 3680 	ldr.w	r3, [fp, #1664]	; 0x680
		(((_radio.fc_req == 0) &&
    8d52:	f8bb 26e2 	ldrh.w	r2, [fp, #1762]	; 0x6e2
    8d56:	8c1b      	ldrh	r3, [r3, #32]
    8d58:	429a      	cmp	r2, r3
    8d5a:	d00e      	beq.n	8d7a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd7a>
		 ((_radio.fc_req != 0) &&
    8d5c:	f89b 36e4 	ldrb.w	r3, [fp, #1764]	; 0x6e4
		   _radio.conn_curr->handle)) ||
    8d60:	2b00      	cmp	r3, #0
    8d62:	d096      	beq.n	8c92 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc92>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    8d64:	f89b 36e4 	ldrb.w	r3, [fp, #1764]	; 0x6e4
		   _radio.conn_curr->handle)))))) {
    8d68:	f8db 1680 	ldr.w	r1, [fp, #1664]	; 0x680
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    8d6c:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    8d70:	f8b3 26dc 	ldrh.w	r2, [r3, #1756]	; 0x6dc
    8d74:	8c0b      	ldrh	r3, [r1, #32]
    8d76:	429a      	cmp	r2, r3
    8d78:	d18b      	bne.n	8c92 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc92>
		if (pdu_data_rx->len != 0) {
    8d7a:	f896 9009 	ldrb.w	r9, [r6, #9]
    8d7e:	f1b9 0f00 	cmp.w	r9, #0
    8d82:	f000 8206 	beq.w	9192 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1192>
			if (_radio.conn_curr->enc_rx) {
    8d86:	f8db 3680 	ldr.w	r3, [fp, #1664]	; 0x680
    8d8a:	f893 90a8 	ldrb.w	r9, [r3, #168]	; 0xa8
    8d8e:	f019 0910 	ands.w	r9, r9, #16
    8d92:	d00d      	beq.n	8db0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdb0>
				done = radio_ccm_is_done();
    8d94:	f002 fbae 	bl	b4f4 <radio_ccm_is_done>
				LL_ASSERT(done);
    8d98:	b940      	cbnz	r0, 8dac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdac>
    8d9a:	4bac      	ldr	r3, [pc, #688]	; (904c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104c>)
    8d9c:	9301      	str	r3, [sp, #4]
    8d9e:	9300      	str	r3, [sp, #0]
    8da0:	4aab      	ldr	r2, [pc, #684]	; (9050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050>)
    8da2:	4bac      	ldr	r3, [pc, #688]	; (9054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1054>)
    8da4:	49ac      	ldr	r1, [pc, #688]	; (9058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1058>)
    8da6:	48ad      	ldr	r0, [pc, #692]	; (905c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x105c>)
    8da8:	f7ff bae0 	b.w	836c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36c>
				ccm_rx_increment = 1;
    8dac:	f04f 0901 	mov.w	r9, #1
			if ((_radio.conn_curr->enc_rx &&
    8db0:	f8db 3680 	ldr.w	r3, [fp, #1664]	; 0x680
    8db4:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    8db8:	06dc      	lsls	r4, r3, #27
    8dba:	d40f      	bmi.n	8ddc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xddc>
			    (_radio.conn_curr->pause_rx &&
    8dbc:	f8db 4680 	ldr.w	r4, [fp, #1664]	; 0x680
    8dc0:	7a33      	ldrb	r3, [r6, #8]
    8dc2:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
			     !radio_ccm_mic_is_valid()) ||
    8dc6:	f012 0f04 	tst.w	r2, #4
    8dca:	d11a      	bne.n	8e02 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe02>
			switch (pdu_data_rx->ll_id) {
    8dcc:	f013 0303 	ands.w	r3, r3, #3
    8dd0:	f000 81df 	beq.w	9192 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1192>
    8dd4:	2b02      	cmp	r3, #2
    8dd6:	d84b      	bhi.n	8e70 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe70>
				*rx_enqueue = 1;
    8dd8:	2501      	movs	r5, #1
    8dda:	e0bf      	b.n	8f5c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf5c>
			     !radio_ccm_mic_is_valid()) ||
    8ddc:	f002 fba8 	bl	b530 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    8de0:	2800      	cmp	r0, #0
    8de2:	d1eb      	bne.n	8dbc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdbc>
				_radio.state = STATE_CLOSE;
    8de4:	2303      	movs	r3, #3
    8de6:	f88b 3014 	strb.w	r3, [fp, #20]
				radio_disable();
    8dea:	f002 f93d 	bl	b068 <radio_disable>
				LL_ASSERT(!radio_is_ready());
    8dee:	f002 f959 	bl	b0a4 <radio_is_ready>
    8df2:	4605      	mov	r5, r0
    8df4:	b390      	cbz	r0, 8e5c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe5c>
    8df6:	4b95      	ldr	r3, [pc, #596]	; (904c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104c>)
    8df8:	9301      	str	r3, [sp, #4]
    8dfa:	9300      	str	r3, [sp, #0]
    8dfc:	4b95      	ldr	r3, [pc, #596]	; (9054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1054>)
    8dfe:	f7ff b929 	b.w	8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    8e02:	f003 0103 	and.w	r1, r3, #3
    8e06:	2903      	cmp	r1, #3
    8e08:	d1ec      	bne.n	8de4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xde4>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    8e0a:	f994 001d 	ldrsb.w	r0, [r4, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    8e0e:	7af1      	ldrb	r1, [r6, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    8e10:	2800      	cmp	r0, #0
    8e12:	f002 0240 	and.w	r2, r2, #64	; 0x40
    8e16:	db15      	blt.n	8e44 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe44>
	       (!conn->role &&
    8e18:	b922      	cbnz	r2, 8e24 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe24>
		((!conn->refresh &&
    8e1a:	2902      	cmp	r1, #2
    8e1c:	d0d6      	beq.n	8dcc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdcc>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    8e1e:	2911      	cmp	r1, #17
    8e20:	d8e0      	bhi.n	8de4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xde4>
    8e22:	e009      	b.n	8e38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe38>
		 (conn->refresh &&
    8e24:	1e8a      	subs	r2, r1, #2
    8e26:	b2d2      	uxtb	r2, r2
    8e28:	2a09      	cmp	r2, #9
    8e2a:	d8f8      	bhi.n	8e1e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe1e>
    8e2c:	f240 2005 	movw	r0, #517	; 0x205
    8e30:	fa20 f202 	lsr.w	r2, r0, r2
    8e34:	07d0      	lsls	r0, r2, #31
    8e36:	d4c9      	bmi.n	8dcc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdcc>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    8e38:	4a89      	ldr	r2, [pc, #548]	; (9060 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1060>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    8e3a:	fa22 f101 	lsr.w	r1, r2, r1
    8e3e:	07c9      	lsls	r1, r1, #31
    8e40:	d5d0      	bpl.n	8de4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xde4>
    8e42:	e7c3      	b.n	8dcc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdcc>
	       (conn->role &&
    8e44:	b92a      	cbnz	r2, 8e52 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe52>
		((!conn->refresh &&
    8e46:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    8e48:	d0c0      	beq.n	8dcc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdcc>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    8e4a:	2911      	cmp	r1, #17
    8e4c:	d8ca      	bhi.n	8de4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xde4>
    8e4e:	4a85      	ldr	r2, [pc, #532]	; (9064 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1064>)
    8e50:	e7f3      	b.n	8e3a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe3a>
		 (conn->refresh &&
    8e52:	1e8a      	subs	r2, r1, #2
    8e54:	2a01      	cmp	r2, #1
    8e56:	d9b9      	bls.n	8dcc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdcc>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    8e58:	290b      	cmp	r1, #11
    8e5a:	e7f5      	b.n	8e48 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe48>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    8e5c:	f8db 0680 	ldr.w	r0, [fp, #1664]	; 0x680
    8e60:	213d      	movs	r1, #61	; 0x3d
    8e62:	f7fd fccd 	bl	6800 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    8e66:	f8db 0680 	ldr.w	r0, [fp, #1664]	; 0x680
    8e6a:	f7fd fa71 	bl	6350 <connection_release>
    8e6e:	e6c3      	b.n	8bf8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbf8>
	switch (pdu_data_rx->llctrl.opcode) {
    8e70:	7af5      	ldrb	r5, [r6, #11]
	pdu_data_rx = (void *)node_rx->pdu_data;
    8e72:	f106 0a08 	add.w	sl, r6, #8
	switch (pdu_data_rx->llctrl.opcode) {
    8e76:	2d19      	cmp	r5, #25
    8e78:	f200 8193 	bhi.w	91a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11a2>
    8e7c:	e8df f015 	tbh	[pc, r5, lsl #1]
    8e80:	0086001a 	.word	0x0086001a
    8e84:	019100bd 	.word	0x019100bd
    8e88:	01910191 	.word	0x01910191
    8e8c:	018b0191 	.word	0x018b0191
    8e90:	00fa00c8 	.word	0x00fa00c8
    8e94:	01910191 	.word	0x01910191
    8e98:	01910120 	.word	0x01910120
    8e9c:	019100dd 	.word	0x019100dd
    8ea0:	01840191 	.word	0x01840191
    8ea4:	01910191 	.word	0x01910191
    8ea8:	01910191 	.word	0x01910191
    8eac:	01910191 	.word	0x01910191
    8eb0:	01a50191 	.word	0x01a50191
		if (!_radio.conn_curr->role ||
    8eb4:	f994 301d 	ldrsb.w	r3, [r4, #29]
    8eb8:	2b00      	cmp	r3, #0
    8eba:	f280 8172 	bge.w	91a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11a2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    8ebe:	7a71      	ldrb	r1, [r6, #9]
    8ec0:	2000      	movs	r0, #0
    8ec2:	f7fc fa2f 	bl	5324 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    8ec6:	2800      	cmp	r0, #0
    8ec8:	f000 816b 	beq.w	91a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11a2>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    8ecc:	f8b6 1015 	ldrh.w	r1, [r6, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    8ed0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    8ed2:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    8ed4:	041a      	lsls	r2, r3, #16
    8ed6:	f100 83d1 	bmi.w	967c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x167c>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    8eda:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    8ede:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
    8ee2:	429a      	cmp	r2, r3
    8ee4:	d008      	beq.n	8ef8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xef8>
    8ee6:	4b59      	ldr	r3, [pc, #356]	; (904c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104c>)
    8ee8:	9301      	str	r3, [sp, #4]
    8eea:	9300      	str	r3, [sp, #0]
    8eec:	4b5e      	ldr	r3, [pc, #376]	; (9068 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1068>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    8eee:	4a58      	ldr	r2, [pc, #352]	; (9050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050>)
    8ef0:	4959      	ldr	r1, [pc, #356]	; (9058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1058>)
    8ef2:	485e      	ldr	r0, [pc, #376]	; (906c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x106c>)
    8ef4:	f7ff ba3a 	b.w	836c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36c>
	if (_radio.conn_upd == 0) {
    8ef8:	f8db 26ec 	ldr.w	r2, [fp, #1772]	; 0x6ec
    8efc:	b90a      	cbnz	r2, 8f02 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf02>
		_radio.conn_upd = conn;
    8efe:	f8cb 46ec 	str.w	r4, [fp, #1772]	; 0x6ec
	conn->llcp.conn_upd.win_size =
    8f02:	7b32      	ldrb	r2, [r6, #12]
    8f04:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    8f08:	f8b6 000d 	ldrh.w	r0, [r6, #13]
    8f0c:	f240 42e2 	movw	r2, #1250	; 0x4e2
    8f10:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    8f12:	66e2      	str	r2, [r4, #108]	; 0x6c
		pdu_data_rx->llctrl.conn_update_ind.interval;
    8f14:	7c30      	ldrb	r0, [r6, #16]
    8f16:	7bf2      	ldrb	r2, [r6, #15]
    8f18:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    8f1c:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
		pdu_data_rx->llctrl.conn_update_ind.latency;
    8f20:	7cb0      	ldrb	r0, [r6, #18]
    8f22:	7c72      	ldrb	r2, [r6, #17]
    8f24:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    8f28:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    8f2c:	7cf2      	ldrb	r2, [r6, #19]
    8f2e:	7d30      	ldrb	r0, [r6, #20]
	conn->llcp.conn_upd.instant =
    8f30:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    8f34:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    8f38:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    8f3c:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
	conn->llcp.conn_upd.is_internal = 0;
    8f40:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    8f44:	f36f 0282 	bfc	r2, #2, #1
    8f48:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
	conn->llcp_ack--;
    8f4c:	3b01      	subs	r3, #1
	conn->llcp_type = LLCP_CONN_UPD;
    8f4e:	2201      	movs	r2, #1
			_radio.conn_curr->procedure_expire = 0;
    8f50:	2500      	movs	r5, #0
	conn->llcp_type = LLCP_CONN_UPD;
    8f52:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
	conn->llcp_ack--;
    8f56:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			_radio.conn_curr->procedure_expire = 0;
    8f5a:	86a5      	strh	r5, [r4, #52]	; 0x34
			_radio.conn_curr->nesn++;
    8f5c:	f8db 1680 	ldr.w	r1, [fp, #1664]	; 0x680
    8f60:	f891 30a8 	ldrb.w	r3, [r1, #168]	; 0xa8
    8f64:	f083 0302 	eor.w	r3, r3, #2
    8f68:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
			if (ccm_rx_increment) {
    8f6c:	f1b9 0f00 	cmp.w	r9, #0
    8f70:	f43f ae90 	beq.w	8c94 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc94>
				_radio.conn_curr->ccm_rx.counter++;
    8f74:	f8d1 20b9 	ldr.w	r2, [r1, #185]	; 0xb9
    8f78:	f8d1 30bd 	ldr.w	r3, [r1, #189]	; 0xbd
    8f7c:	3201      	adds	r2, #1
    8f7e:	f143 0300 	adc.w	r3, r3, #0
    8f82:	f8c1 20b9 	str.w	r2, [r1, #185]	; 0xb9
    8f86:	f8c1 30bd 	str.w	r3, [r1, #189]	; 0xbd
    8f8a:	e683      	b.n	8c94 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc94>
		if (!_radio.conn_curr->role ||
    8f8c:	f994 301d 	ldrsb.w	r3, [r4, #29]
    8f90:	2b00      	cmp	r3, #0
    8f92:	f280 8106 	bge.w	91a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11a2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    8f96:	7a71      	ldrb	r1, [r6, #9]
    8f98:	2001      	movs	r0, #1
    8f9a:	f7fc f9c3 	bl	5324 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    8f9e:	2800      	cmp	r0, #0
    8fa0:	f000 80ff 	beq.w	91a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11a2>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    8fa4:	f8b6 3011 	ldrh.w	r3, [r6, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    8fa8:	8c62      	ldrh	r2, [r4, #34]	; 0x22
    8faa:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    8fac:	041b      	lsls	r3, r3, #16
    8fae:	f100 8365 	bmi.w	967c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x167c>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    8fb2:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    8fb6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    8fba:	429a      	cmp	r2, r3
    8fbc:	d004      	beq.n	8fc8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfc8>
    8fbe:	4b23      	ldr	r3, [pc, #140]	; (904c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104c>)
    8fc0:	9301      	str	r3, [sp, #4]
    8fc2:	9300      	str	r3, [sp, #0]
    8fc4:	4b2a      	ldr	r3, [pc, #168]	; (9070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1070>)
    8fc6:	e792      	b.n	8eee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xeee>
	memcpy(&conn->llcp.chan_map.chm[0],
    8fc8:	2205      	movs	r2, #5
    8fca:	f106 010c 	add.w	r1, r6, #12
    8fce:	f104 0061 	add.w	r0, r4, #97	; 0x61
    8fd2:	f7f7 fb11 	bl	5f8 <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    8fd6:	7c73      	ldrb	r3, [r6, #17]
    8fd8:	7cb2      	ldrb	r2, [r6, #18]
    8fda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    8fde:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->llcp_type = LLCP_CHAN_MAP;
    8fe2:	2302      	movs	r3, #2
    8fe4:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_ack--;
    8fe8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	conn->llcp.chan_map.initiate = 0;
    8fec:	2500      	movs	r5, #0
	conn->llcp_ack--;
    8fee:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    8ff0:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
	conn->llcp_ack--;
    8ff4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    8ff8:	e7b0      	b.n	8f5c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf5c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    8ffa:	7a71      	ldrb	r1, [r6, #9]
    8ffc:	2002      	movs	r0, #2
    8ffe:	f7fc f991 	bl	5324 <pdu_len_cmp>
    9002:	2800      	cmp	r0, #0
    9004:	f000 80cd 	beq.w	91a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11a2>
		_radio.conn_curr->llcp_terminate.reason_peer =
    9008:	7b33      	ldrb	r3, [r6, #12]
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    900a:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
    900e:	e0c0      	b.n	9192 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1192>
		if (!_radio.conn_curr->role ||
    9010:	f994 301d 	ldrsb.w	r3, [r4, #29]
    9014:	2b00      	cmp	r3, #0
    9016:	f280 80c4 	bge.w	91a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11a2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    901a:	7a71      	ldrb	r1, [r6, #9]
    901c:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    901e:	f7fc f981 	bl	5324 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    9022:	2800      	cmp	r0, #0
    9024:	f000 80bd 	beq.w	91a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11a2>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    9028:	4651      	mov	r1, sl
    902a:	4620      	mov	r0, r4
    902c:	f7fe fa66 	bl	74fc <feature_rsp_send>
    9030:	4605      	mov	r5, r0
		if (!nack) {
    9032:	2800      	cmp	r0, #0
    9034:	f47f ae2d 	bne.w	8c92 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc92>
    9038:	e790      	b.n	8f5c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf5c>
		if (_radio.conn_curr->role ||
    903a:	f994 301d 	ldrsb.w	r3, [r4, #29]
    903e:	2b00      	cmp	r3, #0
    9040:	f2c0 80af 	blt.w	91a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11a2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    9044:	7a71      	ldrb	r1, [r6, #9]
    9046:	200e      	movs	r0, #14
    9048:	e7e9      	b.n	901e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x101e>
    904a:	bf00      	nop
    904c:	0000ceef 	.word	0x0000ceef
    9050:	0000d7a6 	.word	0x0000d7a6
    9054:	0000e073 	.word	0x0000e073
    9058:	0000d71b 	.word	0x0000d71b
    905c:	0000e5bf 	.word	0x0000e5bf
    9060:	00022060 	.word	0x00022060
    9064:	00022040 	.word	0x00022040
    9068:	0000e38f 	.word	0x0000e38f
    906c:	0000e5e5 	.word	0x0000e5e5
    9070:	0000e39b 	.word	0x0000e39b
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    9074:	7a71      	ldrb	r1, [r6, #9]
    9076:	2009      	movs	r0, #9
    9078:	f7fc f954 	bl	5324 <pdu_len_cmp>
    907c:	2800      	cmp	r0, #0
    907e:	f000 8090 	beq.w	91a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11a2>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    9082:	7b33      	ldrb	r3, [r6, #12]
	       (features[1] << 8) | (features[2] << 16);
    9084:	7b72      	ldrb	r2, [r6, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    9086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    908a:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    908e:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    9092:	f043 0310 	orr.w	r3, r3, #16
    9096:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    909a:	7bb2      	ldrb	r2, [r6, #14]
    909c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    90a0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
    90a4:	f3c2 0210 	ubfx	r2, r2, #0, #17
    90a8:	4013      	ands	r3, r2
    90aa:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		_radio.conn_curr->common.fex_valid = 1;
    90ae:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    90b2:	f043 0320 	orr.w	r3, r3, #32
    90b6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		_radio.conn_curr->procedure_expire = 0;
    90ba:	2300      	movs	r3, #0
    90bc:	86a3      	strh	r3, [r4, #52]	; 0x34
    90be:	e68b      	b.n	8dd8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdd8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    90c0:	7a71      	ldrb	r1, [r6, #9]
    90c2:	200c      	movs	r0, #12
    90c4:	f7fc f92e 	bl	5324 <pdu_len_cmp>
    90c8:	2800      	cmp	r0, #0
    90ca:	d06a      	beq.n	91a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11a2>
	if (!conn->llcp_version.tx) {
    90cc:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    90d0:	f013 0501 	ands.w	r5, r3, #1
    90d4:	d152      	bne.n	917c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x117c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    90d6:	48b8      	ldr	r0, [pc, #736]	; (93b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13b8>)
    90d8:	f7fa f965 	bl	33a6 <mem_acquire>
		if (!node_tx) {
    90dc:	4601      	mov	r1, r0
    90de:	2800      	cmp	r0, #0
    90e0:	f43f add7 	beq.w	8c92 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc92>
		conn->llcp_version.tx = 1;
    90e4:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    90e8:	f043 0301 	orr.w	r3, r3, #1
    90ec:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    90f0:	7903      	ldrb	r3, [r0, #4]
    90f2:	f043 0303 	orr.w	r3, r3, #3
    90f6:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    90f8:	2306      	movs	r3, #6
    90fa:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    90fc:	230c      	movs	r3, #12
    90fe:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    9100:	2309      	movs	r3, #9
    9102:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    9104:	f06f 030e 	mvn.w	r3, #14
    9108:	7243      	strb	r3, [r0, #9]
    910a:	2305      	movs	r3, #5
    910c:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    910e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9112:	72c3      	strb	r3, [r0, #11]
    9114:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    9116:	4620      	mov	r0, r4
    9118:	f7fe f9d6 	bl	74c8 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    911c:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    9120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    9124:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    9128:	f001 fff0 	bl	b10c <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    912c:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    912e:	7045      	strb	r5, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9130:	2201      	movs	r2, #1
    9132:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    9136:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    913a:	7003      	strb	r3, [r0, #0]
    913c:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    913e:	b1c2      	cbz	r2, 9172 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1172>
		pdu_data_tx->md = 1;
    9140:	f043 0310 	orr.w	r3, r3, #16
    9144:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    9146:	7b33      	ldrb	r3, [r6, #12]
    9148:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
	conn->llcp_version.company_id = v->company_id;
    914c:	7bb2      	ldrb	r2, [r6, #14]
    914e:	7b73      	ldrb	r3, [r6, #13]
    9150:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9154:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
	conn->llcp_version.sub_version_number = v->sub_version_number;
    9158:	7bf3      	ldrb	r3, [r6, #15]
    915a:	7c32      	ldrb	r2, [r6, #16]
    915c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9160:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
	conn->llcp_version.rx = 1;
    9164:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    9168:	f043 0302 	orr.w	r3, r3, #2
    916c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    9170:	e6f4      	b.n	8f5c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf5c>
		pdu_data_tx->md = 0;
    9172:	f362 1304 	bfi	r3, r2, #4, #1
    9176:	7003      	strb	r3, [r0, #0]
	u8_t rx_enqueue = 0;
    9178:	4615      	mov	r5, r2
    917a:	e7e4      	b.n	9146 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1146>
	} else if (!conn->llcp_version.rx) {
    917c:	f013 0302 	ands.w	r3, r3, #2
    9180:	d107      	bne.n	9192 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1192>
		conn->procedure_expire = 0;
    9182:	86a3      	strh	r3, [r4, #52]	; 0x34
		*rx_enqueue = 1;
    9184:	2501      	movs	r5, #1
    9186:	e7de      	b.n	9146 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1146>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    9188:	7a71      	ldrb	r1, [r6, #9]
    918a:	2011      	movs	r0, #17
    918c:	f7fc f8ca 	bl	5324 <pdu_len_cmp>
    9190:	b138      	cbz	r0, 91a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11a2>
	u8_t rx_enqueue = 0;
    9192:	2500      	movs	r5, #0
    9194:	e6e2      	b.n	8f5c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf5c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    9196:	7a71      	ldrb	r1, [r6, #9]
    9198:	2007      	movs	r0, #7
    919a:	f7fc f8c3 	bl	5324 <pdu_len_cmp>
    919e:	2800      	cmp	r0, #0
    91a0:	d18b      	bne.n	90ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10ba>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    91a2:	4885      	ldr	r0, [pc, #532]	; (93b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13b8>)
    91a4:	f7fa f8ff 	bl	33a6 <mem_acquire>
	if (!node_tx) {
    91a8:	4601      	mov	r1, r0
    91aa:	2800      	cmp	r0, #0
    91ac:	f43f ad71 	beq.w	8c92 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc92>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    91b0:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    91b2:	7205      	strb	r5, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    91b4:	f043 0303 	orr.w	r3, r3, #3
    91b8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    91ba:	2302      	movs	r3, #2
    91bc:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    91be:	2307      	movs	r3, #7
    91c0:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    91c2:	4620      	mov	r0, r4
    91c4:	f7fe f952 	bl	746c <ctrl_tx_enqueue>
    91c8:	e7e3      	b.n	9192 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1192>
		if (_radio.conn_curr->role ||
    91ca:	f994 301d 	ldrsb.w	r3, [r4, #29]
    91ce:	2b00      	cmp	r3, #0
    91d0:	dbe7      	blt.n	91a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11a2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    91d2:	7a71      	ldrb	r1, [r6, #9]
    91d4:	2019      	movs	r0, #25
    91d6:	f7fc f8a5 	bl	5324 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    91da:	2800      	cmp	r0, #0
    91dc:	d0e1      	beq.n	91a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11a2>
			if (!(p->phys & 0x01)) {
    91de:	7b35      	ldrb	r5, [r6, #12]
    91e0:	f015 0501 	ands.w	r5, r5, #1
    91e4:	f43f aeba 	beq.w	8f5c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf5c>
			if (conn->llcp_req != conn->llcp_ack) {
    91e8:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    91ec:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    91f0:	429a      	cmp	r2, r3
    91f2:	d1ce      	bne.n	9192 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1192>
			memcpy(&conn->llcp.chan_map.chm[0],
    91f4:	2205      	movs	r2, #5
    91f6:	4971      	ldr	r1, [pc, #452]	; (93bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13bc>)
    91f8:	f104 0061 	add.w	r0, r4, #97	; 0x61
    91fc:	f7f7 f9fc 	bl	5f8 <memcpy>
			conn->llcp.chan_map.initiate = 1;
    9200:	2301      	movs	r3, #1
    9202:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			conn->llcp_type = LLCP_CHAN_MAP;
    9206:	2302      	movs	r3, #2
    9208:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			conn->llcp_ack--;
    920c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    9210:	3b01      	subs	r3, #1
    9212:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    9216:	e7bc      	b.n	9192 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1192>
		if (_radio.crc_expire == 0) {
    9218:	f89b 3685 	ldrb.w	r3, [fp, #1669]	; 0x685
    921c:	b913      	cbnz	r3, 9224 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1224>
			_radio.crc_expire = 2;
    921e:	2302      	movs	r3, #2
    9220:	f88b 3685 	strb.w	r3, [fp, #1669]	; 0x685
		_radio.crc_expire--;
    9224:	f89b 4685 	ldrb.w	r4, [fp, #1669]	; 0x685
		if (!_radio.conn_curr->supervision_expire) {
    9228:	f8db 3680 	ldr.w	r3, [fp, #1664]	; 0x680
		_radio.crc_expire--;
    922c:	3c01      	subs	r4, #1
    922e:	b2e4      	uxtb	r4, r4
    9230:	f88b 4685 	strb.w	r4, [fp, #1669]	; 0x685
		if (!_radio.conn_curr->supervision_expire) {
    9234:	8e1d      	ldrh	r5, [r3, #48]	; 0x30
		crc_close = (_radio.crc_expire == 0);
    9236:	fab4 f484 	clz	r4, r4
    923a:	0964      	lsrs	r4, r4, #5
		if (!_radio.conn_curr->supervision_expire) {
    923c:	b91d      	cbnz	r5, 9246 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1246>
			_radio.conn_curr->supervision_expire =
    923e:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    9240:	861a      	strh	r2, [r3, #48]	; 0x30
	struct radio_pdu_node_tx *tx_release = NULL;
    9242:	46a8      	mov	r8, r5
    9244:	e52c      	b.n	8ca0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xca0>
	u8_t rx_enqueue = 0;
    9246:	2500      	movs	r5, #0
    9248:	e7fb      	b.n	9242 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1242>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    924a:	2303      	movs	r3, #3
    924c:	e549      	b.n	8ce2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xce2>
			radio_switch_complete_and_disable();
    924e:	f001 ff7b 	bl	b148 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    9252:	990d      	ldr	r1, [sp, #52]	; 0x34
    9254:	f8db 0680 	ldr.w	r0, [fp, #1664]	; 0x680
    9258:	780b      	ldrb	r3, [r1, #0]
    925a:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
    925e:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    9262:	f3c2 0240 	ubfx	r2, r2, #1, #1
    9266:	f362 0382 	bfi	r3, r2, #2, #1
    926a:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    926c:	f7fd f90c 	bl	6488 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    9270:	f001 ff18 	bl	b0a4 <radio_is_ready>
    9274:	2800      	cmp	r0, #0
    9276:	f43f acc1 	beq.w	8bfc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbfc>
    927a:	4b51      	ldr	r3, [pc, #324]	; (93c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13c0>)
    927c:	9301      	str	r3, [sp, #4]
    927e:	9300      	str	r3, [sp, #0]
    9280:	4b50      	ldr	r3, [pc, #320]	; (93c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13c4>)
    9282:	f7fe bee7 	b.w	8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>
		radio_tmr_tifs_set(RADIO_TIFS);
    9286:	2096      	movs	r0, #150	; 0x96
    9288:	f001 ffd8 	bl	b23c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    928c:	2000      	movs	r0, #0
    928e:	f001 ff45 	bl	b11c <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    9292:	f002 f8af 	bl	b3f4 <radio_tmr_end_capture>
    9296:	e7dc      	b.n	9252 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1252>
		LL_ASSERT(0);
    9298:	4b49      	ldr	r3, [pc, #292]	; (93c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13c0>)
    929a:	9301      	str	r3, [sp, #4]
    929c:	9300      	str	r3, [sp, #0]
    929e:	4b4a      	ldr	r3, [pc, #296]	; (93c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13c8>)
    92a0:	f7fe bf37 	b.w	8112 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x112>
	switch (_radio.role) {
    92a4:	f89b 2013 	ldrb.w	r2, [fp, #19]
    92a8:	2a04      	cmp	r2, #4
    92aa:	f200 81ce 	bhi.w	964a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x164a>
    92ae:	e8df f012 	tbh	[pc, r2, lsl #1]
    92b2:	01bb      	.short	0x01bb
    92b4:	005f0005 	.word	0x005f0005
    92b8:	00c400c4 	.word	0x00c400c4
	if ((_radio.state == STATE_CLOSE) &&
    92bc:	2b03      	cmp	r3, #3
    92be:	d10d      	bne.n	92dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12dc>
	    (_radio.advertiser.chan_map_current != 0)) {
    92c0:	f89b 3028 	ldrb.w	r3, [fp, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    92c4:	075d      	lsls	r5, r3, #29
    92c6:	d005      	beq.n	92d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12d4>
		adv_setup();
    92c8:	f7fc fba6 	bl	5a18 <adv_setup>
		radio_tx_enable();
    92cc:	f001 fec6 	bl	b05c <radio_tx_enable>
    92d0:	f7fe becf 	b.w	8072 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x72>
	    ((_radio.advertiser.chan_map_current == 0) && (AUX_PACKET == 1))){
    92d4:	4b3d      	ldr	r3, [pc, #244]	; (93cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13cc>)
    92d6:	781b      	ldrb	r3, [r3, #0]
    92d8:	2b01      	cmp	r3, #1
    92da:	d0f5      	beq.n	92c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12c8>
		radio_filter_disable();
    92dc:	f001 ff7e 	bl	b1dc <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    92e0:	f89b 3014 	ldrb.w	r3, [fp, #20]
    92e4:	2b03      	cmp	r3, #3
    92e6:	f040 808c 	bne.w	9402 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1402>
		    (!_radio.advertiser.is_hdcd)) {
    92ea:	f89b 4028 	ldrb.w	r4, [fp, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    92ee:	f014 0440 	ands.w	r4, r4, #64	; 0x40
    92f2:	f040 8086 	bne.w	9402 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1402>
			entropy_get_entropy_isr(_radio.entropy, &random_delay,
    92f6:	2201      	movs	r2, #1
    92f8:	a90d      	add	r1, sp, #52	; 0x34
    92fa:	f8db 0004 	ldr.w	r0, [fp, #4]
    92fe:	f7f8 fd1d 	bl	1d3c <entropy_get_entropy_isr>
			random_delay %= 10;
    9302:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
					HAL_TICKER_US_TO_TICKS(random_delay *
    9306:	4832      	ldr	r0, [pc, #200]	; (93d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13d0>)
			random_delay %= 10;
    9308:	230a      	movs	r3, #10
    930a:	fbb1 f2f3 	udiv	r2, r1, r3
    930e:	fb03 1212 	mls	r2, r3, r2, r1
			random_delay += 1;
    9312:	3201      	adds	r2, #1
    9314:	b2d2      	uxtb	r2, r2
    9316:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
					HAL_TICKER_US_TO_TICKS(random_delay *
    931a:	b2d2      	uxtb	r2, r2
    931c:	fba2 0100 	umull	r0, r1, r2, r0
    9320:	23e8      	movs	r3, #232	; 0xe8
    9322:	fb03 1102 	mla	r1, r3, r2, r1
    9326:	a322      	add	r3, pc, #136	; (adr r3, 93b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13b0>)
    9328:	e9d3 2300 	ldrd	r2, r3, [r3]
    932c:	f7f6 ff9c 	bl	268 <__aeabi_uldivmod>
			ticker_status =
    9330:	f640 73ac 	movw	r3, #4012	; 0xfac
    9334:	9306      	str	r3, [sp, #24]
    9336:	4b27      	ldr	r3, [pc, #156]	; (93d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13d4>)
    9338:	9305      	str	r3, [sp, #20]
    933a:	9404      	str	r4, [sp, #16]
    933c:	b283      	uxth	r3, r0
    933e:	9403      	str	r4, [sp, #12]
    9340:	9402      	str	r4, [sp, #8]
    9342:	9401      	str	r4, [sp, #4]
    9344:	9400      	str	r4, [sp, #0]
    9346:	2205      	movs	r2, #5
    9348:	4621      	mov	r1, r4
    934a:	4620      	mov	r0, r4
    934c:	f7fa fef2 	bl	4134 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9350:	f030 0302 	bics.w	r3, r0, #2
    9354:	d055      	beq.n	9402 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1402>
    9356:	f89b 3012 	ldrb.w	r3, [fp, #18]
    935a:	2b05      	cmp	r3, #5
    935c:	d051      	beq.n	9402 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1402>
    935e:	4b18      	ldr	r3, [pc, #96]	; (93c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13c0>)
    9360:	9301      	str	r3, [sp, #4]
    9362:	9300      	str	r3, [sp, #0]
    9364:	4a1c      	ldr	r2, [pc, #112]	; (93d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13d8>)
    9366:	4b1d      	ldr	r3, [pc, #116]	; (93dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13dc>)
    9368:	491d      	ldr	r1, [pc, #116]	; (93e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13e0>)
    936a:	481e      	ldr	r0, [pc, #120]	; (93e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13e4>)
    936c:	f7fe bffe 	b.w	836c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36c>
	if (_radio.state == STATE_CLOSE) {
    9370:	2b03      	cmp	r3, #3
    9372:	d139      	bne.n	93e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13e8>
		radio_tmr_tifs_set(RADIO_TIFS);
    9374:	2096      	movs	r0, #150	; 0x96
    9376:	f001 ff61 	bl	b23c <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    937a:	2300      	movs	r3, #0
    937c:	4619      	mov	r1, r3
    937e:	461a      	mov	r2, r3
    9380:	4618      	mov	r0, r3
    9382:	f001 fed7 	bl	b134 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    9386:	f8db 36a0 	ldr.w	r3, [fp, #1696]	; 0x6a0
    938a:	f89b 26a5 	ldrb.w	r2, [fp, #1701]	; 0x6a5
		radio_pkt_rx_set(_radio.packet_rx
    938e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    9392:	3008      	adds	r0, #8
    9394:	f001 fe42 	bl	b01c <radio_pkt_rx_set>
		radio_rssi_measure();
    9398:	f001 fee4 	bl	b164 <radio_rssi_measure>
		_radio.state = STATE_RX;
    939c:	2301      	movs	r3, #1
    939e:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_rx_enable();
    93a2:	f001 fe55 	bl	b050 <radio_rx_enable>
    93a6:	f7fe be64 	b.w	8072 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x72>
    93aa:	bf00      	nop
    93ac:	f3af 8000 	nop.w
    93b0:	1afd498d 	.word	0x1afd498d
    93b4:	00000007 	.word	0x00000007
    93b8:	20000c70 	.word	0x20000c70
    93bc:	20000c36 	.word	0x20000c36
    93c0:	0000ceef 	.word	0x0000ceef
    93c4:	0000e083 	.word	0x0000e083
    93c8:	0000e08f 	.word	0x0000e08f
    93cc:	200005ac 	.word	0x200005ac
    93d0:	d4a51000 	.word	0xd4a51000
    93d4:	00005f51 	.word	0x00005f51
    93d8:	0000d7a6 	.word	0x0000d7a6
    93dc:	0000e0a2 	.word	0x0000e0a2
    93e0:	0000d71b 	.word	0x0000d71b
    93e4:	0000e627 	.word	0x0000e627
		radio_filter_disable();
    93e8:	f001 fef8 	bl	b1dc <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    93ec:	f89b 3014 	ldrb.w	r3, [fp, #20]
    93f0:	2b05      	cmp	r3, #5
    93f2:	d106      	bne.n	9402 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1402>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    93f4:	2300      	movs	r3, #0
    93f6:	9300      	str	r3, [sp, #0]
    93f8:	2204      	movs	r2, #4
    93fa:	4619      	mov	r1, r3
    93fc:	4618      	mov	r0, r3
    93fe:	f7fa fee7 	bl	41d0 <ticker_stop>
	_radio.role = ROLE_NONE;
    9402:	2400      	movs	r4, #0
    9404:	f88b 4013 	strb.w	r4, [fp, #19]
	_radio.state = STATE_NONE;
    9408:	f88b 4014 	strb.w	r4, [fp, #20]
	_radio.ticker_id_event = 0;
    940c:	f88b 4011 	strb.w	r4, [fp, #17]
	radio_tmr_stop();
    9410:	f001 ff92 	bl	b338 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9414:	4622      	mov	r2, r4
    9416:	4621      	mov	r1, r4
    9418:	4620      	mov	r0, r4
    941a:	4b9b      	ldr	r3, [pc, #620]	; (9688 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1688>)
    941c:	f7fa f87c 	bl	3518 <mayfly_enqueue>
	LL_ASSERT(!retval);
    9420:	4604      	mov	r4, r0
    9422:	2800      	cmp	r0, #0
    9424:	f000 8117 	beq.w	9656 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1656>
    9428:	4b98      	ldr	r3, [pc, #608]	; (968c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x168c>)
    942a:	9301      	str	r3, [sp, #4]
    942c:	9300      	str	r3, [sp, #0]
    942e:	4a98      	ldr	r2, [pc, #608]	; (9690 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1690>)
    9430:	4b98      	ldr	r3, [pc, #608]	; (9694 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1694>)
    9432:	4999      	ldr	r1, [pc, #612]	; (9698 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1698>)
    9434:	4899      	ldr	r0, [pc, #612]	; (969c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x169c>)
    9436:	f7fe bf99 	b.w	836c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36c>
	if (_radio.conn_curr == 0) {
    943a:	f8db 0680 	ldr.w	r0, [fp, #1664]	; 0x680
    943e:	2800      	cmp	r0, #0
    9440:	d0df      	beq.n	9402 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1402>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    9442:	f890 109b 	ldrb.w	r1, [r0, #155]	; 0x9b
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    9446:	b189      	cbz	r1, 946c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x146c>
    9448:	f89b 3013 	ldrb.w	r3, [fp, #19]
    944c:	2b03      	cmp	r3, #3
    944e:	d003      	beq.n	9458 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1458>
    9450:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    9454:	07dc      	lsls	r4, r3, #31
    9456:	d509      	bpl.n	946c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x146c>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    9458:	f7fd f9d2 	bl	6800 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    945c:	f8db 0680 	ldr.w	r0, [fp, #1664]	; 0x680
    9460:	f7fc ff76 	bl	6350 <connection_release>
			_radio.conn_curr = NULL;
    9464:	2300      	movs	r3, #0
    9466:	f8cb 3680 	str.w	r3, [fp, #1664]	; 0x680
    946a:	e7ca      	b.n	9402 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1402>
	latency_event = _radio.conn_curr->latency_event;
    946c:	8d46      	ldrh	r6, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    946e:	f89b 7684 	ldrb.w	r7, [fp, #1668]	; 0x684
	elapsed_event = latency_event + 1;
    9472:	1c75      	adds	r5, r6, #1
    9474:	b2ad      	uxth	r5, r5
	if (_radio.packet_counter &&
    9476:	2f00      	cmp	r7, #0
    9478:	d06d      	beq.n	9556 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1556>
		if (_radio.role == ROLE_SLAVE) {
    947a:	f89b 3013 	ldrb.w	r3, [fp, #19]
    947e:	2b03      	cmp	r3, #3
    9480:	d15d      	bne.n	953e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x153e>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    9482:	f001 ffab 	bl	b3dc <radio_tmr_aa_restore>
    9486:	4680      	mov	r8, r0
						     radio_tmr_ready_get();
    9488:	f001 ffae 	bl	b3e8 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    948c:	f8db 7680 	ldr.w	r7, [fp, #1664]	; 0x680
    9490:	f8df 9224 	ldr.w	r9, [pc, #548]	; 96b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16b8>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    9494:	eba8 0800 	sub.w	r8, r8, r0
			window_widening_event_us =
    9498:	6cb8      	ldr	r0, [r7, #72]	; 0x48
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    949a:	f100 0a58 	add.w	sl, r0, #88	; 0x58
			if (start_to_address_actual_us <=
    949e:	45d0      	cmp	r8, sl
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    94a0:	a377      	add	r3, pc, #476	; (adr r3, 9680 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1680>)
    94a2:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    94a6:	d83d      	bhi.n	9524 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1524>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    94a8:	fba0 0109 	umull	r0, r1, r0, r9
    94ac:	f7f6 fedc 	bl	268 <__aeabi_uldivmod>
    94b0:	b284      	uxth	r4, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    94b2:	ebaa 0008 	sub.w	r0, sl, r8
    94b6:	a372      	add	r3, pc, #456	; (adr r3, 9680 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1680>)
    94b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    94bc:	fba0 0109 	umull	r0, r1, r0, r9
    94c0:	f7f6 fed2 	bl	268 <__aeabi_uldivmod>
    94c4:	b283      	uxth	r3, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
    94c6:	2200      	movs	r2, #0
    94c8:	64ba      	str	r2, [r7, #72]	; 0x48
			_radio.conn_curr->slave.window_size_event_us = 0;
    94ca:	653a      	str	r2, [r7, #80]	; 0x50
			if (_radio.conn_curr->pkt_tx_head) {
    94cc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
    94d0:	b37a      	cbz	r2, 9532 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1532>
				if (pdu_data_tx->len ||
    94d2:	7952      	ldrb	r2, [r2, #5]
    94d4:	b912      	cbnz	r2, 94dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14dc>
    94d6:	f897 2101 	ldrb.w	r2, [r7, #257]	; 0x101
    94da:	b10a      	cbz	r2, 94e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14e0>
					_radio.conn_curr->latency_event = 0;
    94dc:	2200      	movs	r2, #0
				_radio.conn_curr->latency_event =
    94de:	857a      	strh	r2, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    94e0:	f8db 2680 	ldr.w	r2, [fp, #1664]	; 0x680
    94e4:	2100      	movs	r1, #0
    94e6:	8591      	strh	r1, [r2, #44]	; 0x2c
	if (_radio.conn_curr->supervision_expire) {
    94e8:	f8db 0680 	ldr.w	r0, [fp, #1664]	; 0x680
    94ec:	8e02      	ldrh	r2, [r0, #48]	; 0x30
    94ee:	b1ba      	cbz	r2, 9520 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1520>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    94f0:	4295      	cmp	r5, r2
    94f2:	f080 8091 	bcs.w	9618 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1618>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    94f6:	1b52      	subs	r2, r2, r5
    94f8:	b292      	uxth	r2, r2
			_radio.conn_curr->latency_event = 0;
    94fa:	2100      	movs	r1, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    94fc:	2a06      	cmp	r2, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    94fe:	8602      	strh	r2, [r0, #48]	; 0x30
			_radio.conn_curr->latency_event = 0;
    9500:	8541      	strh	r1, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    9502:	f240 808b 	bls.w	961c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x161c>
			else if (_radio.role == ROLE_SLAVE) {
    9506:	f89b 2013 	ldrb.w	r2, [fp, #19]
    950a:	2a03      	cmp	r2, #3
    950c:	d108      	bne.n	9520 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1520>
				if (latency_event != 0) {
    950e:	2e00      	cmp	r6, #0
    9510:	f040 8084 	bne.w	961c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x161c>
					force = _radio.conn_curr->slave.force & 0x01;
    9514:	6d47      	ldr	r7, [r0, #84]	; 0x54
					_radio.conn_curr->slave.force >>= 1;
    9516:	087a      	lsrs	r2, r7, #1
					if (force) {
    9518:	f017 0701 	ands.w	r7, r7, #1
    951c:	d135      	bne.n	958a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x158a>
					_radio.conn_curr->slave.force >>= 1;
    951e:	6542      	str	r2, [r0, #84]	; 0x54
	force = 0;
    9520:	2700      	movs	r7, #0
    9522:	e035      	b.n	9590 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1590>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    9524:	fba8 0109 	umull	r0, r1, r8, r9
    9528:	f7f6 fe9e 	bl	268 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    952c:	2302      	movs	r3, #2
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    952e:	b284      	uxth	r4, r0
    9530:	e7c9      	b.n	94c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14c6>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    9532:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    9536:	07d2      	lsls	r2, r2, #31
    9538:	d5d2      	bpl.n	94e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14e0>
				_radio.conn_curr->latency_event =
    953a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    953c:	e7cf      	b.n	94de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14de>
		} else if (reason_peer) {
    953e:	b141      	cbz	r1, 9552 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1552>
			_radio.conn_curr->master.terminate_ack = 1;
    9540:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    9544:	f043 0301 	orr.w	r3, r3, #1
    9548:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	ticks_drift_minus = 0;
    954c:	2300      	movs	r3, #0
	ticks_drift_plus = 0;
    954e:	461c      	mov	r4, r3
    9550:	e7c6      	b.n	94e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14e0>
	ticks_drift_minus = 0;
    9552:	460b      	mov	r3, r1
    9554:	e7fb      	b.n	954e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x154e>
	else if (_radio.conn_curr->connect_expire) {
    9556:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    9558:	b184      	cbz	r4, 957c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x157c>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    955a:	42a5      	cmp	r5, r4
    955c:	d204      	bcs.n	9568 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1568>
			_radio.conn_curr->connect_expire -= elapsed_event;
    955e:	1b64      	subs	r4, r4, r5
    9560:	8584      	strh	r4, [r0, #44]	; 0x2c
	ticks_drift_minus = 0;
    9562:	463c      	mov	r4, r7
    9564:	4623      	mov	r3, r4
    9566:	e7bf      	b.n	94e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14e8>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    9568:	213e      	movs	r1, #62	; 0x3e
    956a:	f7fd f949 	bl	6800 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    956e:	f8db 0680 	ldr.w	r0, [fp, #1664]	; 0x680
    9572:	f7fc feed 	bl	6350 <connection_release>
			_radio.conn_curr = NULL;
    9576:	f8cb 7680 	str.w	r7, [fp, #1664]	; 0x680
    957a:	e742      	b.n	9402 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1402>
		if (!_radio.conn_curr->supervision_expire) {
    957c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    957e:	2b00      	cmp	r3, #0
    9580:	d1f0      	bne.n	9564 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1564>
			_radio.conn_curr->supervision_expire =
    9582:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    9584:	8602      	strh	r2, [r0, #48]	; 0x30
	ticks_drift_plus = 0;
    9586:	461c      	mov	r4, r3
    9588:	e7ae      	b.n	94e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14e8>
						_radio.conn_curr->slave.force |=
    958a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    958e:	6542      	str	r2, [r0, #84]	; 0x54
	if (_radio.conn_curr->procedure_expire != 0) {
    9590:	8e82      	ldrh	r2, [r0, #52]	; 0x34
    9592:	b11a      	cbz	r2, 959c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x159c>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    9594:	4295      	cmp	r5, r2
    9596:	d243      	bcs.n	9620 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1620>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    9598:	1b55      	subs	r5, r2, r5
    959a:	8685      	strh	r5, [r0, #52]	; 0x34
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    959c:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    95a0:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    95a4:	4291      	cmp	r1, r2
    95a6:	d006      	beq.n	95b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15b6>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    95a8:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    95ac:	3a01      	subs	r2, #1
    95ae:	2a01      	cmp	r2, #1
		_radio.conn_curr->latency_event = 0;
    95b0:	bf9c      	itt	ls
    95b2:	2200      	movls	r2, #0
    95b4:	8542      	strhls	r2, [r0, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    95b6:	b917      	cbnz	r7, 95be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15be>
    95b8:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    95ba:	42b2      	cmp	r2, r6
    95bc:	d032      	beq.n	9624 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1624>
		lazy = _radio.conn_curr->latency_event + 1;
    95be:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
    95c0:	3101      	adds	r1, #1
    95c2:	b289      	uxth	r1, r1
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    95c4:	b924      	cbnz	r4, 95d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15d0>
    95c6:	b91b      	cbnz	r3, 95d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15d0>
    95c8:	b911      	cbnz	r1, 95d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15d0>
	    (lazy != 0) || (force != 0)) {
    95ca:	2f00      	cmp	r7, #0
    95cc:	f43f af19 	beq.w	9402 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1402>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    95d0:	f890 2020 	ldrb.w	r2, [r0, #32]
		ticker_status =
    95d4:	9103      	str	r1, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    95d6:	3207      	adds	r2, #7
		ticker_status =
    95d8:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    95da:	b2d5      	uxtb	r5, r2
		ticker_status =
    95dc:	4a30      	ldr	r2, [pc, #192]	; (96a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16a0>)
    95de:	9205      	str	r2, [sp, #20]
    95e0:	9300      	str	r3, [sp, #0]
				      (void *)(u32_t)ticker_id);
    95e2:	9506      	str	r5, [sp, #24]
		ticker_status =
    95e4:	4623      	mov	r3, r4
    95e6:	9704      	str	r7, [sp, #16]
    95e8:	9102      	str	r1, [sp, #8]
    95ea:	9101      	str	r1, [sp, #4]
    95ec:	462a      	mov	r2, r5
    95ee:	4608      	mov	r0, r1
    95f0:	f7fa fda0 	bl	4134 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    95f4:	f030 0302 	bics.w	r3, r0, #2
    95f8:	f43f af03 	beq.w	9402 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1402>
    95fc:	f89b 3012 	ldrb.w	r3, [fp, #18]
    9600:	429d      	cmp	r5, r3
    9602:	f43f aefe 	beq.w	9402 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1402>
    9606:	4b21      	ldr	r3, [pc, #132]	; (968c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x168c>)
    9608:	9301      	str	r3, [sp, #4]
    960a:	9300      	str	r3, [sp, #0]
    960c:	4a20      	ldr	r2, [pc, #128]	; (9690 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1690>)
    960e:	4b25      	ldr	r3, [pc, #148]	; (96a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16a4>)
    9610:	4921      	ldr	r1, [pc, #132]	; (9698 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1698>)
    9612:	4825      	ldr	r0, [pc, #148]	; (96a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16a8>)
    9614:	f7fe beaa 	b.w	836c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36c>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    9618:	2108      	movs	r1, #8
    961a:	e71d      	b.n	9458 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1458>
				force = 1;
    961c:	2701      	movs	r7, #1
    961e:	e7b7      	b.n	9590 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1590>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    9620:	2122      	movs	r1, #34	; 0x22
    9622:	e719      	b.n	9458 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1458>
	lazy = 0;
    9624:	4639      	mov	r1, r7
    9626:	e7cd      	b.n	95c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15c4>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    9628:	3b04      	subs	r3, #4
    962a:	2b01      	cmp	r3, #1
    962c:	d908      	bls.n	9640 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1640>
    962e:	4b17      	ldr	r3, [pc, #92]	; (968c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x168c>)
    9630:	9301      	str	r3, [sp, #4]
    9632:	9300      	str	r3, [sp, #0]
    9634:	4a16      	ldr	r2, [pc, #88]	; (9690 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1690>)
    9636:	4b1d      	ldr	r3, [pc, #116]	; (96ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16ac>)
    9638:	4917      	ldr	r1, [pc, #92]	; (9698 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1698>)
    963a:	481d      	ldr	r0, [pc, #116]	; (96b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16b0>)
    963c:	f7fe be96 	b.w	836c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36c>
		_radio.state = STATE_NONE;
    9640:	2300      	movs	r3, #0
    9642:	f88b 3014 	strb.w	r3, [fp, #20]
    9646:	f7fe bd38 	b.w	80ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xba>
		LL_ASSERT(0);
    964a:	4b10      	ldr	r3, [pc, #64]	; (968c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x168c>)
    964c:	9301      	str	r3, [sp, #4]
    964e:	9300      	str	r3, [sp, #0]
    9650:	4b16      	ldr	r3, [pc, #88]	; (96ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16ac>)
    9652:	f7fe bd5e 	b.w	8112 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x112>
	clock_control_off(_radio.hf_clock, NULL);
    9656:	f8db 0000 	ldr.w	r0, [fp]
    965a:	6843      	ldr	r3, [r0, #4]
    965c:	4621      	mov	r1, r4
    965e:	685b      	ldr	r3, [r3, #4]
    9660:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    9662:	2201      	movs	r2, #1
    9664:	4611      	mov	r1, r2
    9666:	4620      	mov	r0, r4
    9668:	f7f9 ff2e 	bl	34c8 <mayfly_enable>
    966c:	f7fe bd25 	b.w	80ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xba>
		LL_ASSERT(0);
    9670:	4b06      	ldr	r3, [pc, #24]	; (968c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x168c>)
    9672:	9301      	str	r3, [sp, #4]
    9674:	9300      	str	r3, [sp, #0]
    9676:	4b0f      	ldr	r3, [pc, #60]	; (96b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16b4>)
    9678:	f7fe bd4b 	b.w	8112 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x112>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    967c:	2328      	movs	r3, #40	; 0x28
    967e:	e4c4      	b.n	900a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x100a>
    9680:	1afd498d 	.word	0x1afd498d
    9684:	00000007 	.word	0x00000007
    9688:	20003cc8 	.word	0x20003cc8
    968c:	0000ceef 	.word	0x0000ceef
    9690:	0000d7a6 	.word	0x0000d7a6
    9694:	0000e173 	.word	0x0000e173
    9698:	0000d71b 	.word	0x0000d71b
    969c:	0000e911 	.word	0x0000e911
    96a0:	00005f99 	.word	0x00005f99
    96a4:	0000e0b0 	.word	0x0000e0b0
    96a8:	0000e695 	.word	0x0000e695
    96ac:	0000e0bf 	.word	0x0000e0bf
    96b0:	0000e70b 	.word	0x0000e70b
    96b4:	0000e0d5 	.word	0x0000e0d5
    96b8:	3b9aca00 	.word	0x3b9aca00

000096bc <event_master>:
{
    96bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    96be:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    96c0:	4b55      	ldr	r3, [pc, #340]	; (9818 <event_master+0x15c>)
    96c2:	7cda      	ldrb	r2, [r3, #19]
{
    96c4:	b085      	sub	sp, #20
    96c6:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    96c8:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    96cc:	461d      	mov	r5, r3
    96ce:	b172      	cbz	r2, 96ee <event_master+0x32>
    96d0:	4b52      	ldr	r3, [pc, #328]	; (981c <event_master+0x160>)
    96d2:	9301      	str	r3, [sp, #4]
    96d4:	9300      	str	r3, [sp, #0]
    96d6:	4a52      	ldr	r2, [pc, #328]	; (9820 <event_master+0x164>)
    96d8:	4b52      	ldr	r3, [pc, #328]	; (9824 <event_master+0x168>)
    96da:	4953      	ldr	r1, [pc, #332]	; (9828 <event_master+0x16c>)
    96dc:	4853      	ldr	r0, [pc, #332]	; (982c <event_master+0x170>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    96de:	f7f7 fe91 	bl	1404 <printk>
    96e2:	4040      	eors	r0, r0
    96e4:	f380 8811 	msr	BASEPRI, r0
    96e8:	f04f 0004 	mov.w	r0, #4
    96ec:	df02      	svc	2
    96ee:	7c1b      	ldrb	r3, [r3, #16]
    96f0:	8c22      	ldrh	r2, [r4, #32]
    96f2:	b2db      	uxtb	r3, r3
    96f4:	3207      	adds	r2, #7
    96f6:	4293      	cmp	r3, r2
    96f8:	d007      	beq.n	970a <event_master+0x4e>
    96fa:	4b48      	ldr	r3, [pc, #288]	; (981c <event_master+0x160>)
    96fc:	9301      	str	r3, [sp, #4]
    96fe:	9300      	str	r3, [sp, #0]
    9700:	4a47      	ldr	r2, [pc, #284]	; (9820 <event_master+0x164>)
    9702:	4b48      	ldr	r3, [pc, #288]	; (9824 <event_master+0x168>)
    9704:	4948      	ldr	r1, [pc, #288]	; (9828 <event_master+0x16c>)
    9706:	484a      	ldr	r0, [pc, #296]	; (9830 <event_master+0x174>)
    9708:	e7e9      	b.n	96de <event_master+0x22>
	_radio.role = ROLE_MASTER;
    970a:	2204      	movs	r2, #4
	_radio.packet_counter = 0;
    970c:	f885 6684 	strb.w	r6, [r5, #1668]	; 0x684
	_radio.crc_expire = 0;
    9710:	f885 6685 	strb.w	r6, [r5, #1669]	; 0x685
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    9714:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    9716:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    9718:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    971a:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    971c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    971e:	f8c5 4680 	str.w	r4, [r5, #1664]	; 0x680
	_radio.state = STATE_TX;
    9722:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    9724:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    9726:	8526      	strh	r6, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    9728:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    972a:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    972c:	f7fc fdc2 	bl	62b4 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    9730:	a903      	add	r1, sp, #12
    9732:	4620      	mov	r0, r4
    9734:	f7fe fbbe 	bl	7eb4 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    9738:	9903      	ldr	r1, [sp, #12]
    973a:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
    973e:	780b      	ldrb	r3, [r1, #0]
    9740:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    9744:	f3c2 0240 	ubfx	r2, r2, #1, #1
    9748:	f362 0382 	bfi	r3, r2, #2, #1
    974c:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    974e:	4620      	mov	r0, r4
    9750:	f7fe fab0 	bl	7cb4 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    9754:	2096      	movs	r0, #150	; 0x96
    9756:	f001 fd71 	bl	b23c <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(0);
    975a:	4630      	mov	r0, r6
    975c:	f001 fcde 	bl	b11c <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    9760:	9903      	ldr	r1, [sp, #12]
    9762:	4620      	mov	r0, r4
    9764:	f7fc fe90 	bl	6488 <tx_packet_set>
	if (conn->data_chan_sel) {
    9768:	7f63      	ldrb	r3, [r4, #29]
    976a:	f013 0f40 	tst.w	r3, #64	; 0x40
    976e:	f104 0217 	add.w	r2, r4, #23
    9772:	d021      	beq.n	97b8 <event_master+0xfc>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    9774:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    9776:	8be1      	ldrh	r1, [r4, #30]
    9778:	3801      	subs	r0, #1
    977a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    977e:	b280      	uxth	r0, r0
    9780:	f7fd fe30 	bl	73e4 <chan_sel_2>
	chan_set(data_chan_use);
    9784:	f7fc f876 	bl	5874 <chan_set>
		remainder_us = radio_tmr_start(1,
    9788:	68ea      	ldr	r2, [r5, #12]
    978a:	f107 0109 	add.w	r1, r7, #9
    978e:	2001      	movs	r0, #1
    9790:	f001 fd60 	bl	b254 <radio_tmr_start>
		radio_tmr_end_capture();
    9794:	f001 fe2e 	bl	b3f4 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    9798:	f894 1020 	ldrb.w	r1, [r4, #32]
    979c:	3107      	adds	r1, #7
    979e:	463a      	mov	r2, r7
    97a0:	b2c9      	uxtb	r1, r1
    97a2:	4620      	mov	r0, r4
    97a4:	f7fd fa10 	bl	6bc8 <preempt_calc>
	if (0 !=
    97a8:	4603      	mov	r3, r0
    97aa:	b328      	cbz	r0, 97f8 <event_master+0x13c>
		_radio.state = STATE_STOP;
    97ac:	2304      	movs	r3, #4
    97ae:	752b      	strb	r3, [r5, #20]
		radio_disable();
    97b0:	f001 fc5a 	bl	b068 <radio_disable>
}
    97b4:	b005      	add	sp, #20
    97b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    97b8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    97ba:	7fa6      	ldrb	r6, [r4, #30]
    97bc:	fb01 6606 	mla	r6, r1, r6, r6
    97c0:	7fe1      	ldrb	r1, [r4, #31]
    97c2:	2025      	movs	r0, #37	; 0x25
    97c4:	440e      	add	r6, r1
    97c6:	fb96 f1f0 	sdiv	r1, r6, r0
    97ca:	fb00 6611 	mls	r6, r0, r1, r6
    97ce:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    97d0:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    97d2:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    97d4:	5c51      	ldrb	r1, [r2, r1]
    97d6:	f006 0607 	and.w	r6, r6, #7
    97da:	fa41 f606 	asr.w	r6, r1, r6
    97de:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    97e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    97e4:	d4ce      	bmi.n	9784 <event_master+0xc8>
		chan_index = chan_next % chan_count;
    97e6:	fbb0 f1f3 	udiv	r1, r0, r3
    97ea:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    97ee:	b2c9      	uxtb	r1, r1
    97f0:	4610      	mov	r0, r2
    97f2:	f7fb fdc3 	bl	537c <chan_sel_remap>
    97f6:	e7c5      	b.n	9784 <event_master+0xc8>
		ticker_status =
    97f8:	4a0e      	ldr	r2, [pc, #56]	; (9834 <event_master+0x178>)
    97fa:	4601      	mov	r1, r0
    97fc:	f7fa fd66 	bl	42cc <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9800:	f030 0302 	bics.w	r3, r0, #2
    9804:	d0d6      	beq.n	97b4 <event_master+0xf8>
    9806:	4b05      	ldr	r3, [pc, #20]	; (981c <event_master+0x160>)
    9808:	9301      	str	r3, [sp, #4]
    980a:	9300      	str	r3, [sp, #0]
    980c:	4a04      	ldr	r2, [pc, #16]	; (9820 <event_master+0x164>)
    980e:	4b05      	ldr	r3, [pc, #20]	; (9824 <event_master+0x168>)
    9810:	4905      	ldr	r1, [pc, #20]	; (9828 <event_master+0x16c>)
    9812:	4809      	ldr	r0, [pc, #36]	; (9838 <event_master+0x17c>)
    9814:	e763      	b.n	96de <event_master+0x22>
    9816:	bf00      	nop
    9818:	200005b0 	.word	0x200005b0
    981c:	0000ceef 	.word	0x0000ceef
    9820:	0000d7a6 	.word	0x0000d7a6
    9824:	0000e330 	.word	0x0000e330
    9828:	0000d71b 	.word	0x0000d71b
    982c:	0000e479 	.word	0x0000e479
    9830:	0000e52c 	.word	0x0000e52c
    9834:	00005fe5 	.word	0x00005fe5
    9838:	0000e3ec 	.word	0x0000e3ec

0000983c <radio_init>:
{
    983c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
    9840:	4e3e      	ldr	r6, [pc, #248]	; (993c <radio_init+0x100>)
{
    9842:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    9844:	f89d c01c 	ldrb.w	ip, [sp, #28]
    9848:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
    984c:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    9850:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
    9854:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    9856:	f44f 7082 	mov.w	r0, #260	; 0x104
    985a:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
    985e:	f886 168c 	strb.w	r1, [r6, #1676]	; 0x68c
	_radio.conn_pool = mem_radio;
    9862:	f8c6 4674 	str.w	r4, [r6, #1652]	; 0x674
	mem_radio_end = mem_radio + mem_size;
    9866:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
    9868:	f10c 0401 	add.w	r4, ip, #1
    986c:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
    986e:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
    9870:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
    9874:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    9878:	f5b4 7f81 	cmp.w	r4, #258	; 0x102
	rx_count_max += 3;
    987c:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    987e:	bf98      	it	ls
    9880:	eb02 1442 	addls.w	r4, r2, r2, lsl #5
	_radio.packet_data_octets_max = packet_data_octets_max;
    9884:	f8a6 8698 	strh.w	r8, [r6, #1688]	; 0x698
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
    9888:	bf88      	it	hi
    988a:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
    988e:	f886 26b8 	strb.w	r2, [r6, #1720]	; 0x6b8
		_radio.packet_rx_data_pool_size =
    9892:	bf8c      	ite	hi
    9894:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    9898:	eb02 0244 	addls.w	r2, r2, r4, lsl #1
	_radio.packet_rx_count = (rx_count_max + 1);
    989c:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    98a0:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    98a4:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
    98a8:	bf8c      	ite	hi
    98aa:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    98ae:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
    98b0:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
    98b4:	f8a6 269a 	strh.w	r2, [r6, #1690]	; 0x69a
	_radio.packet_tx_count = (tx_count_max + 1);
    98b8:	f886 c6d8 	strb.w	ip, [r6, #1752]	; 0x6d8
	_radio.packet_rx = (void *)mem_radio;
    98bc:	f8c6 06a0 	str.w	r0, [r6, #1696]	; 0x6a0
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    98c0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
    98c4:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    98c8:	f8b6 469a 	ldrh.w	r4, [r6, #1690]	; 0x69a
	_radio.pkt_tx = (void *)mem_radio;
    98cc:	f8c6 06d0 	str.w	r0, [r6, #1744]	; 0x6d0
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    98d0:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    98d2:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.pkt_release = (void *)mem_radio;
    98d6:	f8c6 06d4 	str.w	r0, [r6, #1748]	; 0x6d4
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    98da:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    98dc:	f8a6 269c 	strh.w	r2, [r6, #1692]	; 0x69c
	_radio.pkt_rx_data_pool = mem_radio;
    98e0:	f8c6 0690 	str.w	r0, [r6, #1680]	; 0x690
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    98e4:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
    98e8:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    98ea:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
    98ee:	f8c6 06a8 	str.w	r0, [r6, #1704]	; 0x6a8
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    98f2:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    98f6:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
    98fa:	f8c6 06bc 	str.w	r0, [r6, #1724]	; 0x6bc
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    98fe:	340a      	adds	r4, #10
    9900:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    9904:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    9906:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
    9908:	f8a6 46cc 	strh.w	r4, [r6, #1740]	; 0x6cc
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    990c:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
    9910:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
    9912:	f886 367c 	strb.w	r3, [r6, #1660]	; 0x67c
	_radio.packet_rx_count = (rx_count_max + 1);
    9916:	f886 e6a4 	strb.w	lr, [r6, #1700]	; 0x6a4
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    991a:	f886 269e 	strb.w	r2, [r6, #1694]	; 0x69e
	_radio.pkt_tx_data_pool = mem_radio;
    991e:	f8c6 06c4 	str.w	r0, [r6, #1732]	; 0x6c4
	if (retcode) {
    9922:	d003      	beq.n	992c <radio_init+0xf0>
		return (retcode + mem_size);
    9924:	442c      	add	r4, r5
}
    9926:	4620      	mov	r0, r4
    9928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
    992c:	2301      	movs	r3, #1
    992e:	f886 36e6 	strb.w	r3, [r6, #1766]	; 0x6e6
	common_init();
    9932:	f7fd fcc9 	bl	72c8 <common_init>
	radio_setup();
    9936:	f001 fac1 	bl	aebc <radio_setup>
	return retcode;
    993a:	e7f4      	b.n	9926 <radio_init+0xea>
    993c:	200005b0 	.word	0x200005b0

00009940 <ll_reset>:
{
    9940:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    9942:	2103      	movs	r1, #3
    9944:	2005      	movs	r0, #5
    9946:	f7fb fde5 	bl	5514 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    994a:	2104      	movs	r1, #4
    994c:	2006      	movs	r0, #6
    994e:	f7fb fde1 	bl	5514 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    9952:	4c22      	ldr	r4, [pc, #136]	; (99dc <ll_reset+0x9c>)
    9954:	2500      	movs	r5, #0
    9956:	f894 267c 	ldrb.w	r2, [r4, #1660]	; 0x67c
    995a:	b2ab      	uxth	r3, r5
    995c:	429a      	cmp	r2, r3
    995e:	f105 0501 	add.w	r5, r5, #1
    9962:	d835      	bhi.n	99d0 <ll_reset+0x90>
	_radio.advertiser.is_enabled = 0;
    9964:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    9968:	f36f 13c7 	bfc	r3, #7, #1
    996c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
    9970:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
	_radio.advertiser.conn = NULL;
    9974:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
    9976:	f360 0300 	bfi	r3, r0, #0, #1
    997a:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    997e:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    9982:	f8b4 369a 	ldrh.w	r3, [r4, #1690]	; 0x69a
    9986:	fbb3 f3f2 	udiv	r3, r3, r2
    998a:	f884 369e 	strb.w	r3, [r4, #1694]	; 0x69e
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    998e:	f894 36a4 	ldrb.w	r3, [r4, #1700]	; 0x6a4
	_radio.packet_rx_last = 0;
    9992:	f884 06a5 	strb.w	r0, [r4, #1701]	; 0x6a5
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    9996:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
    9998:	f884 06d9 	strb.w	r0, [r4, #1753]	; 0x6d9
	_radio.packet_release_last = 0;
    999c:	f884 06dc 	strb.w	r0, [r4, #1756]	; 0x6dc
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    99a0:	f884 36b8 	strb.w	r3, [r4, #1720]	; 0x6b8
	_radio.fc_ack = _radio.fc_req;
    99a4:	f894 36e4 	ldrb.w	r3, [r4, #1764]	; 0x6e4
	_radio.advertiser.conn = NULL;
    99a8:	f8c4 0638 	str.w	r0, [r4, #1592]	; 0x638
	_radio.scanner.conn = NULL;
    99ac:	f8c4 066c 	str.w	r0, [r4, #1644]	; 0x66c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    99b0:	f8a4 269c 	strh.w	r2, [r4, #1692]	; 0x69c
	_radio.packet_rx_acquire = 0;
    99b4:	f884 06a6 	strb.w	r0, [r4, #1702]	; 0x6a6
	_radio.packet_tx_last = 0;
    99b8:	f884 06da 	strb.w	r0, [r4, #1754]	; 0x6da
	_radio.packet_release_first = 0;
    99bc:	f884 06db 	strb.w	r0, [r4, #1755]	; 0x6db
	_radio.fc_ack = _radio.fc_req;
    99c0:	f884 36e5 	strb.w	r3, [r4, #1765]	; 0x6e5
	ll_filter_reset(false);
    99c4:	f001 f936 	bl	ac34 <ll_filter_reset>
}
    99c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
    99cc:	f7fd bc7c 	b.w	72c8 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    99d0:	1da8      	adds	r0, r5, #6
    99d2:	21ff      	movs	r1, #255	; 0xff
    99d4:	b2c0      	uxtb	r0, r0
    99d6:	f7fb fd9d 	bl	5514 <role_disable>
    99da:	e7bc      	b.n	9956 <ll_reset+0x16>
    99dc:	200005b0 	.word	0x200005b0

000099e0 <radio_adv_data_get>:
}
    99e0:	4800      	ldr	r0, [pc, #0]	; (99e4 <radio_adv_data_get+0x4>)
    99e2:	4770      	bx	lr
    99e4:	200005da 	.word	0x200005da

000099e8 <radio_aux_adv_data_get>:
}
    99e8:	4800      	ldr	r0, [pc, #0]	; (99ec <radio_aux_adv_data_get+0x4>)
    99ea:	4770      	bx	lr
    99ec:	200007de 	.word	0x200007de

000099f0 <radio_scan_data_get>:
}
    99f0:	4800      	ldr	r0, [pc, #0]	; (99f4 <radio_scan_data_get+0x4>)
    99f2:	4770      	bx	lr
    99f4:	200009e2 	.word	0x200009e2

000099f8 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    99f8:	4b02      	ldr	r3, [pc, #8]	; (9a04 <ll_adv_is_enabled+0xc>)
    99fa:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    99fe:	09c0      	lsrs	r0, r0, #7
    9a00:	4770      	bx	lr
    9a02:	bf00      	nop
    9a04:	200005b0 	.word	0x200005b0

00009a08 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    9a08:	4b04      	ldr	r3, [pc, #16]	; (9a1c <radio_adv_filter_pol_get+0x14>)
    9a0a:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
    9a0e:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
    9a10:	bfba      	itte	lt
    9a12:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
    9a16:	0980      	lsrlt	r0, r0, #6
    9a18:	2000      	movge	r0, #0
}
    9a1a:	4770      	bx	lr
    9a1c:	200005b0 	.word	0x200005b0

00009a20 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    9a20:	4a09      	ldr	r2, [pc, #36]	; (9a48 <ll_scan_is_enabled+0x28>)
    9a22:	f892 364c 	ldrb.w	r3, [r2, #1612]	; 0x64c
    9a26:	f892 064d 	ldrb.w	r0, [r2, #1613]	; 0x64d
	       (_radio.scanner.conn ? BIT(2) : 0);
    9a2a:	f8d2 266c 	ldr.w	r2, [r2, #1644]	; 0x66c
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    9a2e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
    9a32:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    9a34:	f003 0301 	and.w	r3, r3, #1
    9a38:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    9a3c:	bf14      	ite	ne
    9a3e:	2004      	movne	r0, #4
    9a40:	2000      	moveq	r0, #0
}
    9a42:	4318      	orrs	r0, r3
    9a44:	4770      	bx	lr
    9a46:	bf00      	nop
    9a48:	200005b0 	.word	0x200005b0

00009a4c <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    9a4c:	4b05      	ldr	r3, [pc, #20]	; (9a64 <radio_scan_filter_pol_get+0x18>)
    9a4e:	f893 064c 	ldrb.w	r0, [r3, #1612]	; 0x64c
    9a52:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
    9a56:	bf1c      	itt	ne
    9a58:	f893 064d 	ldrbne.w	r0, [r3, #1613]	; 0x64d
    9a5c:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
    9a60:	4770      	bx	lr
    9a62:	bf00      	nop
    9a64:	200005b0 	.word	0x200005b0

00009a68 <ll_tx_pwr_lvl_get>:
{
    9a68:	b510      	push	{r4, lr}
    9a6a:	4614      	mov	r4, r2
	conn = connection_get(handle);
    9a6c:	f7fb fd3c 	bl	54e8 <connection_get>
	if (!conn) {
    9a70:	b110      	cbz	r0, 9a78 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
    9a72:	2000      	movs	r0, #0
    9a74:	7020      	strb	r0, [r4, #0]
	return 0;
    9a76:	bd10      	pop	{r4, pc}
		return 1;
    9a78:	2001      	movs	r0, #1
}
    9a7a:	bd10      	pop	{r4, pc}

00009a7c <ll_rx_get>:
{
    9a7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9a80:	4605      	mov	r5, r0
    9a82:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    9a84:	4918      	ldr	r1, [pc, #96]	; (9ae8 <ll_rx_get+0x6c>)
    9a86:	f8d1 36b0 	ldr.w	r3, [r1, #1712]	; 0x6b0
    9a8a:	f8d1 26b4 	ldr.w	r2, [r1, #1716]	; 0x6b4
    9a8e:	4293      	cmp	r3, r2
    9a90:	460f      	mov	r7, r1
    9a92:	d01f      	beq.n	9ad4 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
    9a94:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    9a98:	f201 61db 	addw	r1, r1, #1755	; 0x6db
    9a9c:	f898 2000 	ldrb.w	r2, [r8]
    9aa0:	f7fb fcd8 	bl	5454 <tx_cmplt_get>
		if (!cmplt) {
    9aa4:	4604      	mov	r4, r0
    9aa6:	b9e0      	cbnz	r0, 9ae2 <ll_rx_get+0x66>
			first = _radio.packet_release_first;
    9aa8:	ae02      	add	r6, sp, #8
    9aaa:	f897 36db 	ldrb.w	r3, [r7, #1755]	; 0x6db
    9aae:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
    9ab2:	f897 26dc 	ldrb.w	r2, [r7, #1756]	; 0x6dc
    9ab6:	4631      	mov	r1, r6
    9ab8:	f10d 0006 	add.w	r0, sp, #6
    9abc:	f7fb fcca 	bl	5454 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
    9ac0:	b934      	cbnz	r4, 9ad0 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
    9ac2:	b928      	cbnz	r0, 9ad0 <ll_rx_get+0x54>
			*node_rx = _node_rx;
    9ac4:	f8c5 8000 	str.w	r8, [r5]
}
    9ac8:	4620      	mov	r0, r4
    9aca:	b002      	add	sp, #8
    9acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    9ad0:	4604      	mov	r4, r0
    9ad2:	e7ee      	b.n	9ab2 <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    9ad4:	f891 26dc 	ldrb.w	r2, [r1, #1756]	; 0x6dc
    9ad8:	f201 61db 	addw	r1, r1, #1755	; 0x6db
    9adc:	f7fb fcba 	bl	5454 <tx_cmplt_get>
    9ae0:	4604      	mov	r4, r0
		*node_rx = NULL;
    9ae2:	2300      	movs	r3, #0
    9ae4:	602b      	str	r3, [r5, #0]
    9ae6:	e7ef      	b.n	9ac8 <ll_rx_get+0x4c>
    9ae8:	200005b0 	.word	0x200005b0

00009aec <ll_rx_mem_release>:
{
    9aec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
    9af0:	4c1b      	ldr	r4, [pc, #108]	; (9b60 <ll_rx_mem_release+0x74>)
{
    9af2:	4605      	mov	r5, r0
	_node_rx = *node_rx;
    9af4:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    9af6:	f2a4 6694 	subw	r6, r4, #1684	; 0x694
			mem_release(conn, &_radio.conn_free);
    9afa:	f1a4 071c 	sub.w	r7, r4, #28
	while (_node_rx) {
    9afe:	b928      	cbnz	r0, 9b0c <ll_rx_mem_release+0x20>
	*node_rx = _node_rx;
    9b00:	6028      	str	r0, [r5, #0]
}
    9b02:	b002      	add	sp, #8
    9b04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
    9b08:	f7fd bb94 	b.w	7234 <packet_rx_allocate.constprop.46>
		switch (_node_rx_free->hdr.type) {
    9b0c:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
    9b0e:	f8d0 8000 	ldr.w	r8, [r0]
    9b12:	2a0a      	cmp	r2, #10
    9b14:	d807      	bhi.n	9b26 <ll_rx_mem_release+0x3a>
    9b16:	2301      	movs	r3, #1
    9b18:	4093      	lsls	r3, r2
    9b1a:	f240 727e 	movw	r2, #1918	; 0x77e
    9b1e:	4213      	tst	r3, r2
    9b20:	d110      	bne.n	9b44 <ll_rx_mem_release+0x58>
    9b22:	061b      	lsls	r3, r3, #24
    9b24:	d413      	bmi.n	9b4e <ll_rx_mem_release+0x62>
			LL_ASSERT(0);
    9b26:	4b0f      	ldr	r3, [pc, #60]	; (9b64 <ll_rx_mem_release+0x78>)
    9b28:	9301      	str	r3, [sp, #4]
    9b2a:	9300      	str	r3, [sp, #0]
    9b2c:	4a0e      	ldr	r2, [pc, #56]	; (9b68 <ll_rx_mem_release+0x7c>)
    9b2e:	4b0f      	ldr	r3, [pc, #60]	; (9b6c <ll_rx_mem_release+0x80>)
    9b30:	490f      	ldr	r1, [pc, #60]	; (9b70 <ll_rx_mem_release+0x84>)
    9b32:	4810      	ldr	r0, [pc, #64]	; (9b74 <ll_rx_mem_release+0x88>)
    9b34:	f7f7 fc66 	bl	1404 <printk>
    9b38:	4040      	eors	r0, r0
    9b3a:	f380 8811 	msr	BASEPRI, r0
    9b3e:	f04f 0004 	mov.w	r0, #4
    9b42:	df02      	svc	2
			mem_release(_node_rx_free,
    9b44:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
    9b46:	f7f9 fc48 	bl	33da <mem_release>
{
    9b4a:	4640      	mov	r0, r8
    9b4c:	e7d7      	b.n	9afe <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    9b4e:	88c2      	ldrh	r2, [r0, #6]
    9b50:	f8d6 0674 	ldr.w	r0, [r6, #1652]	; 0x674
    9b54:	f44f 7182 	mov.w	r1, #260	; 0x104
    9b58:	f7f9 fc54 	bl	3404 <mem_get>
			mem_release(conn, &_radio.conn_free);
    9b5c:	4639      	mov	r1, r7
    9b5e:	e7f2      	b.n	9b46 <ll_rx_mem_release+0x5a>
    9b60:	20000c44 	.word	0x20000c44
    9b64:	0000ceef 	.word	0x0000ceef
    9b68:	0000d7a6 	.word	0x0000d7a6
    9b6c:	0000e3da 	.word	0x0000e3da
    9b70:	0000d71b 	.word	0x0000d71b
    9b74:	0000d6b3 	.word	0x0000d6b3

00009b78 <do_radio_rx_fc_set>:
	}
}

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
	if (req == ack) {
    9b78:	4291      	cmp	r1, r2
{
    9b7a:	b510      	push	{r4, lr}
    9b7c:	4b14      	ldr	r3, [pc, #80]	; (9bd0 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
    9b7e:	d119      	bne.n	9bb4 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    9b80:	f8d3 26b4 	ldr.w	r2, [r3, #1716]	; 0x6b4
    9b84:	f8d3 46b0 	ldr.w	r4, [r3, #1712]	; 0x6b0
    9b88:	4294      	cmp	r4, r2
    9b8a:	d111      	bne.n	9bb0 <do_radio_rx_fc_set+0x38>
			u8_t ack1 = ack;

			if (ack1 == 0) {
    9b8c:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
    9b8e:	bf14      	ite	ne
    9b90:	460a      	movne	r2, r1
    9b92:	2203      	moveq	r2, #3
			}
			_radio.fc_handle[--ack1] = handle;
    9b94:	3a01      	subs	r2, #1
    9b96:	b2d2      	uxtb	r2, r2
    9b98:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
    9b9c:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
    9ba0:	f893 26e4 	ldrb.w	r2, [r3, #1764]	; 0x6e4
			_radio.fc_handle[--ack1] = handle;
    9ba4:	f8a4 06de 	strh.w	r0, [r4, #1758]	; 0x6de
			if (req != _radio.fc_req) {
    9ba8:	4291      	cmp	r1, r2
    9baa:	d00f      	beq.n	9bcc <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
    9bac:	f883 16e5 	strb.w	r1, [r3, #1765]	; 0x6e5

				return 1;
			}
		} else {
			return 1;
    9bb0:	2001      	movs	r0, #1
    9bb2:	bd10      	pop	{r4, pc}
		}
	} else if (((req == 0) &&
    9bb4:	b929      	cbnz	r1, 9bc2 <do_radio_rx_fc_set+0x4a>
    9bb6:	f8b3 36e2 	ldrh.w	r3, [r3, #1762]	; 0x6e2
				return 1;
    9bba:	1a18      	subs	r0, r3, r0
    9bbc:	bf18      	it	ne
    9bbe:	2001      	movne	r0, #1
    9bc0:	bd10      	pop	{r4, pc}
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    9bc2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    9bc6:	f8b3 36dc 	ldrh.w	r3, [r3, #1756]	; 0x6dc
    9bca:	e7f6      	b.n	9bba <do_radio_rx_fc_set+0x42>
		return 1;
	}

	return 0;
    9bcc:	2000      	movs	r0, #0
}
    9bce:	bd10      	pop	{r4, pc}
    9bd0:	200005b0 	.word	0x200005b0

00009bd4 <radio_rx_fc_set>:

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
    9bd4:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
    9bd6:	4b14      	ldr	r3, [pc, #80]	; (9c28 <radio_rx_fc_set+0x54>)
    9bd8:	f893 26e6 	ldrb.w	r2, [r3, #1766]	; 0x6e6
{
    9bdc:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
    9bde:	b302      	cbz	r2, 9c22 <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
    9be0:	f893 26e4 	ldrb.w	r2, [r3, #1764]	; 0x6e4
    9be4:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
    9be6:	f893 26e5 	ldrb.w	r2, [r3, #1765]	; 0x6e5

		if (fc) {
    9bea:	b135      	cbz	r5, 9bfa <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
    9bec:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9bf0:	4298      	cmp	r0, r3
    9bf2:	d016      	beq.n	9c22 <radio_rx_fc_set+0x4e>
			}
		}
	}

	return 0;
}
    9bf4:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
    9bf6:	f7ff bfbf 	b.w	9b78 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    9bfa:	f8d3 06b0 	ldr.w	r0, [r3, #1712]	; 0x6b0
    9bfe:	f8d3 46b4 	ldr.w	r4, [r3, #1716]	; 0x6b4
    9c02:	42a0      	cmp	r0, r4
    9c04:	d10d      	bne.n	9c22 <radio_rx_fc_set+0x4e>
    9c06:	4291      	cmp	r1, r2
    9c08:	d00b      	beq.n	9c22 <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    9c0a:	f8d3 46b4 	ldr.w	r4, [r3, #1716]	; 0x6b4
			_radio.fc_ack = req;
    9c0e:	f883 16e5 	strb.w	r1, [r3, #1765]	; 0x6e5
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    9c12:	42a0      	cmp	r0, r4
    9c14:	d005      	beq.n	9c22 <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
    9c16:	f893 06e4 	ldrb.w	r0, [r3, #1764]	; 0x6e4
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    9c1a:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
    9c1c:	bf08      	it	eq
    9c1e:	f883 26e5 	strbeq.w	r2, [r3, #1765]	; 0x6e5
}
    9c22:	2000      	movs	r0, #0
    9c24:	bc30      	pop	{r4, r5}
    9c26:	4770      	bx	lr
    9c28:	200005b0 	.word	0x200005b0

00009c2c <ll_adv_scan_state_cb>:

	return 0;
}

void __weak ll_adv_scan_state_cb(u8_t bm)
{
    9c2c:	4770      	bx	lr
	...

00009c30 <radio_adv_enable>:
{
    9c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.advertiser.is_enabled) {
    9c34:	f8df b2f0 	ldr.w	fp, [pc, #752]	; 9f28 <radio_adv_enable+0x2f8>
{
    9c38:	b08f      	sub	sp, #60	; 0x3c
    9c3a:	4699      	mov	r9, r3
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9c3c:	2302      	movs	r3, #2
    9c3e:	930d      	str	r3, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
    9c40:	f99b 3028 	ldrsb.w	r3, [fp, #40]	; 0x28
{
    9c44:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	if (_radio.advertiser.is_enabled) {
    9c48:	2b00      	cmp	r3, #0
{
    9c4a:	4682      	mov	sl, r0
    9c4c:	4688      	mov	r8, r1
    9c4e:	465d      	mov	r5, fp
	if (_radio.advertiser.is_enabled) {
    9c50:	da01      	bge.n	9c56 <radio_adv_enable+0x26>
	return BT_HCI_ERR_CMD_DISALLOWED;
    9c52:	200c      	movs	r0, #12
    9c54:	e152      	b.n	9efc <radio_adv_enable+0x2cc>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    9c56:	f89b 722d 	ldrb.w	r7, [fp, #557]	; 0x22d
    9c5a:	eb07 2707 	add.w	r7, r7, r7, lsl #8
    9c5e:	372a      	adds	r7, #42	; 0x2a
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    9c60:	f81b 3007 	ldrb.w	r3, [fp, r7]
    9c64:	f003 030f 	and.w	r3, r3, #15
    9c68:	2b01      	cmp	r3, #1
    9c6a:	f200 80f8 	bhi.w	9e5e <radio_adv_enable+0x22e>
		if (_radio.advertiser.conn) {
    9c6e:	f8db 6638 	ldr.w	r6, [fp, #1592]	; 0x638
    9c72:	2e00      	cmp	r6, #0
    9c74:	d1ed      	bne.n	9c52 <radio_adv_enable+0x22>
		link = mem_acquire(&_radio.link_rx_free);
    9c76:	f20b 60ac 	addw	r0, fp, #1708	; 0x6ac
    9c7a:	f7f9 fb94 	bl	33a6 <mem_acquire>
		if (!link) {
    9c7e:	900a      	str	r0, [sp, #40]	; 0x28
    9c80:	b158      	cbz	r0, 9c9a <radio_adv_enable+0x6a>
		conn = mem_acquire(&_radio.conn_free);
    9c82:	f50b 60cf 	add.w	r0, fp, #1656	; 0x678
    9c86:	f7f9 fb8e 	bl	33a6 <mem_acquire>
		if (!conn) {
    9c8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9c8c:	4604      	mov	r4, r0
    9c8e:	b930      	cbnz	r0, 9c9e <radio_adv_enable+0x6e>
			mem_release(link, &_radio.link_rx_free);
    9c90:	f20b 61ac 	addw	r1, fp, #1708	; 0x6ac
    9c94:	4610      	mov	r0, r2
    9c96:	f7f9 fba0 	bl	33da <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    9c9a:	2007      	movs	r0, #7
    9c9c:	e12e      	b.n	9efc <radio_adv_enable+0x2cc>
		conn->handle = 0xFFFF;
    9c9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9ca2:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
    9ca4:	4b9a      	ldr	r3, [pc, #616]	; (9f10 <radio_adv_enable+0x2e0>)
    9ca6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
		conn->data_chan_sel = 0;
    9caa:	7f43      	ldrb	r3, [r0, #29]
		conn->data_chan_use = 0;
    9cac:	77c6      	strb	r6, [r0, #31]
		conn->data_chan_sel = 0;
    9cae:	f366 1386 	bfi	r3, r6, #6, #1
		conn->role = 1;
    9cb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9cb6:	7743      	strb	r3, [r0, #29]
		conn->connect_expire = 6;
    9cb8:	2306      	movs	r3, #6
    9cba:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->common.fex_valid = 0;
    9cbc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
		conn->event_counter = 0;
    9cc0:	8446      	strh	r6, [r0, #34]	; 0x22
		conn->common.fex_valid = 0;
    9cc2:	f366 1345 	bfi	r3, r6, #5, #1
		conn->slave.latency_enabled = 0;
    9cc6:	f366 0300 	bfi	r3, r6, #0, #1
		conn->slave.latency_cancel = 0;
    9cca:	f366 0341 	bfi	r3, r6, #1, #1
    9cce:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		conn->llcp_version.tx = 0;
    9cd2:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
		conn->latency_prepare = 0;
    9cd6:	8506      	strh	r6, [r0, #40]	; 0x28
		conn->llcp_version.tx = 0;
    9cd8:	f366 0300 	bfi	r3, r6, #0, #1
		conn->llcp_version.rx = 0;
    9cdc:	f366 0341 	bfi	r3, r6, #1, #1
    9ce0:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
		conn->sn = 0;
    9ce4:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
		conn->latency_event = 0;
    9ce8:	8546      	strh	r6, [r0, #42]	; 0x2a
		conn->sn = 0;
    9cea:	f366 0300 	bfi	r3, r6, #0, #1
		conn->nesn = 0;
    9cee:	f366 0341 	bfi	r3, r6, #1, #1
		conn->pause_rx = 0;
    9cf2:	f366 0382 	bfi	r3, r6, #2, #1
		conn->pause_tx = 0;
    9cf6:	f366 03c3 	bfi	r3, r6, #3, #1
		conn->enc_rx = 0;
    9cfa:	f366 1304 	bfi	r3, r6, #4, #1
		conn->enc_tx = 0;
    9cfe:	f366 1345 	bfi	r3, r6, #5, #1
		conn->refresh = 0;
    9d02:	f366 1386 	bfi	r3, r6, #6, #1
		conn->empty = 0;
    9d06:	f366 13c7 	bfi	r3, r6, #7, #1
		conn->slave.window_widening_prepare_us = 0;
    9d0a:	6446      	str	r6, [r0, #68]	; 0x44
		conn->slave.window_widening_event_us = 0;
    9d0c:	6486      	str	r6, [r0, #72]	; 0x48
		conn->slave.ticks_to_offset = 0;
    9d0e:	6586      	str	r6, [r0, #88]	; 0x58
		conn->supervision_expire = 0;
    9d10:	8606      	strh	r6, [r0, #48]	; 0x30
		conn->procedure_expire = 0;
    9d12:	8686      	strh	r6, [r0, #52]	; 0x34
		conn->llcp_req = 0;
    9d14:	f880 605c 	strb.w	r6, [r0, #92]	; 0x5c
		conn->llcp_ack = 0;
    9d18:	f880 605d 	strb.w	r6, [r0, #93]	; 0x5d
		conn->llcp_terminate.req = 0;
    9d1c:	f880 6098 	strb.w	r6, [r0, #152]	; 0x98
		conn->llcp_terminate.ack = 0;
    9d20:	f880 6099 	strb.w	r6, [r0, #153]	; 0x99
		conn->llcp_terminate.reason_peer = 0;
    9d24:	f880 609b 	strb.w	r6, [r0, #155]	; 0x9b
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    9d28:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
		conn->empty = 0;
    9d2c:	f880 30a8 	strb.w	r3, [r0, #168]	; 0xa8
		conn->pkt_tx_head = NULL;
    9d30:	f8c0 60ec 	str.w	r6, [r0, #236]	; 0xec
		conn->pkt_tx_ctrl = NULL;
    9d34:	f8c0 60f0 	str.w	r6, [r0, #240]	; 0xf0
		conn->pkt_tx_ctrl_last = NULL;
    9d38:	f8c0 60f4 	str.w	r6, [r0, #244]	; 0xf4
		conn->pkt_tx_data = NULL;
    9d3c:	f8c0 60f8 	str.w	r6, [r0, #248]	; 0xf8
		conn->pkt_tx_last = NULL;
    9d40:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc
		conn->packet_tx_head_len = 0;
    9d44:	f880 6100 	strb.w	r6, [r0, #256]	; 0x100
		conn->packet_tx_head_offset = 0;
    9d48:	f880 6101 	strb.w	r6, [r0, #257]	; 0x101
		_radio.advertiser.conn = conn;
    9d4c:	f8cb 0638 	str.w	r0, [fp, #1592]	; 0x638
	_radio.advertiser.chan_map = chan_map;							//chan_map
    9d50:	a80e      	add	r0, sp, #56	; 0x38
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
    9d52:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.chan_map = chan_map;							//chan_map
    9d56:	f810 2d09 	ldrb.w	r2, [r0, #-9]!
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
    9d5a:	f36a 0302 	bfi	r3, sl, #0, #3
	_radio.advertiser.chan_map = chan_map;							//chan_map
    9d5e:	f362 03c5 	bfi	r3, r2, #3, #3
	_radio.advertiser.filter_policy = filter_policy;				//filter plicy
    9d62:	f369 1387 	bfi	r3, r9, #6, #2
    9d66:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.hdr.ticks_active_to_start =
    9d6a:	f8d5 36e8 	ldr.w	r3, [r5, #1768]	; 0x6e8
    9d6e:	61eb      	str	r3, [r5, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
    9d70:	2327      	movs	r3, #39	; 0x27
    9d72:	61ab      	str	r3, [r5, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    9d74:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
    9d76:	2300      	movs	r3, #0
    9d78:	622b      	str	r3, [r5, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    9d7a:	f7f9 fcad 	bl	36d8 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    9d7e:	f81b 6007 	ldrb.w	r6, [fp, r7]
    9d82:	f006 060f 	and.w	r6, r6, #15
    9d86:	2e01      	cmp	r6, #1
    9d88:	d16b      	bne.n	9e62 <radio_adv_enable+0x232>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
    9d8a:	f44f 7327 	mov.w	r3, #668	; 0x29c
    9d8e:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
    9d90:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    9d94:	495f      	ldr	r1, [pc, #380]	; (9f14 <radio_adv_enable+0x2e4>)
    9d96:	a35c      	add	r3, pc, #368	; (adr r3, 9f08 <radio_adv_enable+0x2d8>)
    9d98:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d9c:	fba0 0101 	umull	r0, r1, r0, r1
    9da0:	f7f6 fa62 	bl	268 <__aeabi_uldivmod>
	ticks_slot_offset =
    9da4:	69ef      	ldr	r7, [r5, #28]
    9da6:	69ab      	ldr	r3, [r5, #24]
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    9da8:	6268      	str	r0, [r5, #36]	; 0x24
	ticks_slot_offset =
    9daa:	429f      	cmp	r7, r3
    9dac:	bf38      	it	cc
    9dae:	461f      	movcc	r7, r3
	_radio.advertiser.is_hdcd = !interval &&
    9db0:	f1b8 0f00 	cmp.w	r8, #0
    9db4:	d162      	bne.n	9e7c <radio_adv_enable+0x24c>
    9db6:	1e72      	subs	r2, r6, #1
    9db8:	4253      	negs	r3, r2
    9dba:	4153      	adcs	r3, r2
    9dbc:	f895 6028 	ldrb.w	r6, [r5, #40]	; 0x28
    9dc0:	f8df 9168 	ldr.w	r9, [pc, #360]	; 9f2c <radio_adv_enable+0x2fc>
    9dc4:	f8df b168 	ldr.w	fp, [pc, #360]	; 9f30 <radio_adv_enable+0x300>
    9dc8:	f363 1686 	bfi	r6, r3, #6, #1
    9dcc:	f885 6028 	strb.w	r6, [r5, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
    9dd0:	f016 0640 	ands.w	r6, r6, #64	; 0x40
    9dd4:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
    9dd8:	d058      	beq.n	9e8c <radio_adv_enable+0x25c>
		u32_t ticks_now = ticker_ticks_now_get();
    9dda:	f7fa fac9 	bl	4370 <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    9dde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9de0:	f8cd a020 	str.w	sl, [sp, #32]
    9de4:	441f      	add	r7, r3
		u32_t ticks_now = ticker_ticks_now_get();
    9de6:	4606      	mov	r6, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    9de8:	2000      	movs	r0, #0
    9dea:	f8cd 901c 	str.w	r9, [sp, #28]
    9dee:	9006      	str	r0, [sp, #24]
    9df0:	f8cd b014 	str.w	fp, [sp, #20]
    9df4:	9704      	str	r7, [sp, #16]
    9df6:	9003      	str	r0, [sp, #12]
    9df8:	9002      	str	r0, [sp, #8]
    9dfa:	e88d 0081 	stmia.w	sp, {r0, r7}
    9dfe:	4633      	mov	r3, r6
    9e00:	2205      	movs	r2, #5
    9e02:	2103      	movs	r1, #3
    9e04:	f7fa f946 	bl	4094 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    9e08:	2802      	cmp	r0, #2
    9e0a:	d03b      	beq.n	9e84 <radio_adv_enable+0x254>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    9e0c:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e0e:	b9c8      	cbnz	r0, 9e44 <radio_adv_enable+0x214>
		ret_cb = TICKER_STATUS_BUSY;
    9e10:	2302      	movs	r3, #2
    9e12:	930d      	str	r3, [sp, #52]	; 0x34
		ret =
    9e14:	4b40      	ldr	r3, [pc, #256]	; (9f18 <radio_adv_enable+0x2e8>)
    9e16:	9305      	str	r3, [sp, #20]
    9e18:	2203      	movs	r2, #3
    9e1a:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
    9e1e:	9300      	str	r3, [sp, #0]
    9e20:	f8cd a020 	str.w	sl, [sp, #32]
    9e24:	f8cd 901c 	str.w	r9, [sp, #28]
    9e28:	9006      	str	r0, [sp, #24]
    9e2a:	9004      	str	r0, [sp, #16]
    9e2c:	9003      	str	r0, [sp, #12]
    9e2e:	9002      	str	r0, [sp, #8]
    9e30:	9001      	str	r0, [sp, #4]
    9e32:	4633      	mov	r3, r6
    9e34:	4611      	mov	r1, r2
		ret =
    9e36:	f7fa f92d 	bl	4094 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    9e3a:	2802      	cmp	r0, #2
    9e3c:	d04b      	beq.n	9ed6 <radio_adv_enable+0x2a6>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
    9e3e:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e40:	2800      	cmp	r0, #0
    9e42:	d04c      	beq.n	9ede <radio_adv_enable+0x2ae>
	if (conn) {
    9e44:	2c00      	cmp	r4, #0
    9e46:	f43f af04 	beq.w	9c52 <radio_adv_enable+0x22>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
    9e4a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    9e4e:	4933      	ldr	r1, [pc, #204]	; (9f1c <radio_adv_enable+0x2ec>)
    9e50:	f7f9 fac3 	bl	33da <mem_release>
		mem_release(conn, &_radio.conn_free);
    9e54:	4932      	ldr	r1, [pc, #200]	; (9f20 <radio_adv_enable+0x2f0>)
    9e56:	4620      	mov	r0, r4
    9e58:	f7f9 fabf 	bl	33da <mem_release>
    9e5c:	e6f9      	b.n	9c52 <radio_adv_enable+0x22>
		conn = NULL;
    9e5e:	2400      	movs	r4, #0
    9e60:	e776      	b.n	9d50 <radio_adv_enable+0x120>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    9e62:	2e02      	cmp	r6, #2
    9e64:	d103      	bne.n	9e6e <radio_adv_enable+0x23e>
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
    9e66:	f44f 7329 	mov.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
    9e6a:	4358      	muls	r0, r3
    9e6c:	e792      	b.n	9d94 <radio_adv_enable+0x164>
	else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    9e6e:	2e07      	cmp	r6, #7
		slot_us = ((RADIO_TICKER_START_PART_US + 2120+300) * chan_cnt) ;  // 265byte =2120us
    9e70:	bf0c      	ite	eq
    9e72:	f44f 632a 	moveq.w	r3, #2720	; 0xaa0
			   152 + 376) * chan_cnt;
    9e76:	f240 53fc 	movwne	r3, #1532	; 0x5fc
    9e7a:	e7f6      	b.n	9e6a <radio_adv_enable+0x23a>
    9e7c:	2300      	movs	r3, #0
    9e7e:	e79d      	b.n	9dbc <radio_adv_enable+0x18c>
				cpu_sleep();
    9e80:	f7fb fa4c 	bl	531c <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    9e84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9e86:	2b02      	cmp	r3, #2
    9e88:	d0fa      	beq.n	9e80 <radio_adv_enable+0x250>
    9e8a:	e7bf      	b.n	9e0c <radio_adv_enable+0x1dc>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    9e8c:	f7fa fa70 	bl	4370 <ticker_ticks_now_get>
		ret =
    9e90:	f8cd a020 	str.w	sl, [sp, #32]
    9e94:	f8cd 901c 	str.w	r9, [sp, #28]
    9e98:	9606      	str	r6, [sp, #24]
    9e9a:	f8cd b014 	str.w	fp, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    9e9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9ea0:	900a      	str	r0, [sp, #40]	; 0x28
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *				//ticks periodic
    9ea2:	4820      	ldr	r0, [pc, #128]	; (9f24 <radio_adv_enable+0x2f4>)
		ret =
    9ea4:	9603      	str	r6, [sp, #12]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *				//ticks periodic
    9ea6:	fa1f f888 	uxth.w	r8, r8
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    9eaa:	441f      	add	r7, r3
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *				//ticks periodic
    9eac:	fba8 0100 	umull	r0, r1, r8, r0
    9eb0:	2391      	movs	r3, #145	; 0x91
    9eb2:	fb03 1108 	mla	r1, r3, r8, r1
    9eb6:	a314      	add	r3, pc, #80	; (adr r3, 9f08 <radio_adv_enable+0x2d8>)
    9eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret =
    9ebc:	9704      	str	r7, [sp, #16]
    9ebe:	9602      	str	r6, [sp, #8]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *				//ticks periodic
    9ec0:	f7f6 f9d2 	bl	268 <__aeabi_uldivmod>
		ret =
    9ec4:	9600      	str	r6, [sp, #0]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *				//ticks periodic
    9ec6:	9001      	str	r0, [sp, #4]
		ret =
    9ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9eca:	2205      	movs	r2, #5
    9ecc:	2103      	movs	r1, #3
    9ece:	4630      	mov	r0, r6
    9ed0:	e7b1      	b.n	9e36 <radio_adv_enable+0x206>
			cpu_sleep();
    9ed2:	f7fb fa23 	bl	531c <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    9ed6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9ed8:	2b02      	cmp	r3, #2
    9eda:	d0fa      	beq.n	9ed2 <radio_adv_enable+0x2a2>
    9edc:	e7af      	b.n	9e3e <radio_adv_enable+0x20e>
		_radio.advertiser.is_enabled = 1;
    9ede:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    9ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    9ee6:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    9eea:	f895 364c 	ldrb.w	r3, [r5, #1612]	; 0x64c
    9eee:	f013 0401 	ands.w	r4, r3, #1
    9ef2:	d103      	bne.n	9efc <radio_adv_enable+0x2cc>
			ll_adv_scan_state_cb(BIT(0));
    9ef4:	2001      	movs	r0, #1
    9ef6:	f7ff fe99 	bl	9c2c <ll_adv_scan_state_cb>
		return 0;
    9efa:	4620      	mov	r0, r4
}
    9efc:	b00f      	add	sp, #60	; 0x3c
    9efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f02:	bf00      	nop
    9f04:	f3af 8000 	nop.w
    9f08:	1afd498d 	.word	0x1afd498d
    9f0c:	00000007 	.word	0x00000007
    9f10:	0001400c 	.word	0x0001400c
    9f14:	3b9aca00 	.word	0x3b9aca00
    9f18:	000071d9 	.word	0x000071d9
    9f1c:	20000c5c 	.word	0x20000c5c
    9f20:	20000c28 	.word	0x20000c28
    9f24:	84e72a00 	.word	0x84e72a00
    9f28:	200005b0 	.word	0x200005b0
    9f2c:	00005361 	.word	0x00005361
    9f30:	000070b9 	.word	0x000070b9

00009f34 <radio_adv_disable>:
{
    9f34:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
    9f36:	2103      	movs	r1, #3
    9f38:	2005      	movs	r0, #5
    9f3a:	f7fb faeb 	bl	5514 <role_disable>
	if (!status) {
    9f3e:	4605      	mov	r5, r0
    9f40:	b9e8      	cbnz	r0, 9f7e <radio_adv_disable+0x4a>
		_radio.advertiser.is_enabled = 0;
    9f42:	4c10      	ldr	r4, [pc, #64]	; (9f84 <radio_adv_disable+0x50>)
    9f44:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    9f48:	f360 12c7 	bfi	r2, r0, #7, #1
    9f4c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    9f50:	f894 264c 	ldrb.w	r2, [r4, #1612]	; 0x64c
    9f54:	07d3      	lsls	r3, r2, #31
    9f56:	d401      	bmi.n	9f5c <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
    9f58:	f7ff fe68 	bl	9c2c <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
    9f5c:	f8d4 6638 	ldr.w	r6, [r4, #1592]	; 0x638
		if (conn) {
    9f60:	b15e      	cbz	r6, 9f7a <radio_adv_disable+0x46>
			_radio.advertiser.conn = NULL;
    9f62:	2300      	movs	r3, #0
    9f64:	f8c4 3638 	str.w	r3, [r4, #1592]	; 0x638
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    9f68:	4907      	ldr	r1, [pc, #28]	; (9f88 <radio_adv_disable+0x54>)
    9f6a:	f8d6 009c 	ldr.w	r0, [r6, #156]	; 0x9c
    9f6e:	f7f9 fa34 	bl	33da <mem_release>
			mem_release(conn, &_radio.conn_free);
    9f72:	4906      	ldr	r1, [pc, #24]	; (9f8c <radio_adv_disable+0x58>)
    9f74:	4630      	mov	r0, r6
    9f76:	f7f9 fa30 	bl	33da <mem_release>
}
    9f7a:	4628      	mov	r0, r5
    9f7c:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    9f7e:	250c      	movs	r5, #12
    9f80:	e7fb      	b.n	9f7a <radio_adv_disable+0x46>
    9f82:	bf00      	nop
    9f84:	200005b0 	.word	0x200005b0
    9f88:	20000c5c 	.word	0x20000c5c
    9f8c:	20000c28 	.word	0x20000c28

00009f90 <radio_scan_enable>:
{
    9f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
    9f94:	4c62      	ldr	r4, [pc, #392]	; (a120 <radio_scan_enable+0x190>)
    9f96:	f894 564c 	ldrb.w	r5, [r4, #1612]	; 0x64c
{
    9f9a:	b08e      	sub	sp, #56	; 0x38
    9f9c:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
    9f9e:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9fa2:	f04f 0302 	mov.w	r3, #2
{
    9fa6:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9fa8:	930b      	str	r3, [sp, #44]	; 0x2c
{
    9faa:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
    9fac:	d003      	beq.n	9fb6 <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
    9fae:	200c      	movs	r0, #12
}
    9fb0:	b00e      	add	sp, #56	; 0x38
    9fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
    9fb6:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
    9fba:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
    9fbe:	0840      	lsrs	r0, r0, #1
    9fc0:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.init_addr_type = init_addr_type;
    9fc4:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
    9fc8:	2206      	movs	r2, #6
    9fca:	f204 604e 	addw	r0, r4, #1614	; 0x64e
	_radio.scanner.init_addr_type = init_addr_type;
    9fce:	f884 364d 	strb.w	r3, [r4, #1613]	; 0x64d
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    9fd2:	4e54      	ldr	r6, [pc, #336]	; (a124 <radio_scan_enable+0x194>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
    9fd4:	f7f6 fb10 	bl	5f8 <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    9fd8:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
    9fdc:	f04f 0991 	mov.w	r9, #145	; 0x91
    9fe0:	fba2 0106 	umull	r0, r1, r2, r6
    9fe4:	fb09 1102 	mla	r1, r9, r2, r1
    9fe8:	a34b      	add	r3, pc, #300	; (adr r3, a118 <radio_scan_enable+0x188>)
    9fea:	e9d3 2300 	ldrd	r2, r3, [r3]
    9fee:	f7f6 f93b 	bl	268 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
    9ff2:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
    9ff6:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
		_radio.ticks_active_to_start;
    9ffa:	f8d4 86e8 	ldr.w	r8, [r4, #1768]	; 0x6e8
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    9ffe:	f8c4 065c 	str.w	r0, [r4, #1628]	; 0x65c
	_radio.scanner.filter_policy = filter_policy;
    a002:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    a006:	b2ba      	uxth	r2, r7
    a008:	fba2 6706 	umull	r6, r7, r2, r6
    a00c:	fb09 7702 	mla	r7, r9, r2, r7
	_radio.scanner.filter_policy = filter_policy;
    a010:	f884 364d 	strb.w	r3, [r4, #1613]	; 0x64d
	_radio.scanner.hdr.ticks_xtal_to_start =
    a014:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
    a016:	f100 0a09 	add.w	sl, r0, #9
	_radio.scanner.hdr.ticks_active_to_start =
    a01a:	f8c4 8640 	str.w	r8, [r4, #1600]	; 0x640
	_radio.scanner.hdr.ticks_xtal_to_start =
    a01e:	f8c4 363c 	str.w	r3, [r4, #1596]	; 0x63c
	_radio.scanner.hdr.ticks_preempt_to_start =
    a022:	f8c4 5644 	str.w	r5, [r4, #1604]	; 0x644
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    a026:	a33c      	add	r3, pc, #240	; (adr r3, a118 <radio_scan_enable+0x188>)
    a028:	e9d3 2300 	ldrd	r2, r3, [r3]
    a02c:	4630      	mov	r0, r6
    a02e:	4639      	mov	r1, r7
    a030:	f7f6 f91a 	bl	268 <__aeabi_uldivmod>
	    (ticks_interval -
    a034:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
    a038:	459a      	cmp	sl, r3
    a03a:	bf94      	ite	ls
    a03c:	f8c4 a648 	strls.w	sl, [r4, #1608]	; 0x648
    a040:	f8c4 3648 	strhi.w	r3, [r4, #1608]	; 0x648
	ticks_slot_offset =
    a044:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    a048:	4681      	mov	r9, r0
	ticks_slot_offset =
    a04a:	bf38      	it	cc
    a04c:	f04f 0827 	movcc.w	r8, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
    a050:	f7fa f98e 	bl	4370 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
    a054:	f8d4 366c 	ldr.w	r3, [r4, #1644]	; 0x66c
	ticks_anchor = ticker_ticks_now_get();
    a058:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
    a05a:	2b00      	cmp	r3, #0
    a05c:	d045      	beq.n	a0ea <radio_scan_enable+0x15a>
		us_offset = 0;
    a05e:	950c      	str	r5, [sp, #48]	; 0x30
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
    a060:	980c      	ldr	r0, [sp, #48]	; 0x30
    a062:	4931      	ldr	r1, [pc, #196]	; (a128 <radio_scan_enable+0x198>)
    a064:	a32c      	add	r3, pc, #176	; (adr r3, a118 <radio_scan_enable+0x188>)
    a066:	e9d3 2300 	ldrd	r2, r3, [r3]
    a06a:	fba0 0101 	umull	r0, r1, r0, r1
    a06e:	f7f6 f8fb 	bl	268 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a072:	ab0b      	add	r3, sp, #44	; 0x2c
    a074:	9308      	str	r3, [sp, #32]
    a076:	4b2d      	ldr	r3, [pc, #180]	; (a12c <radio_scan_enable+0x19c>)
    a078:	9307      	str	r3, [sp, #28]
    a07a:	4b2d      	ldr	r3, [pc, #180]	; (a130 <radio_scan_enable+0x1a0>)
    a07c:	9305      	str	r3, [sp, #20]
    a07e:	f8d4 3648 	ldr.w	r3, [r4, #1608]	; 0x648
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
    a082:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a086:	4443      	add	r3, r8
    a088:	2500      	movs	r5, #0
    a08a:	4482      	add	sl, r0
    a08c:	9304      	str	r3, [sp, #16]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
    a08e:	4630      	mov	r0, r6
    a090:	a321      	add	r3, pc, #132	; (adr r3, a118 <radio_scan_enable+0x188>)
    a092:	e9d3 2300 	ldrd	r2, r3, [r3]
    a096:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a098:	9506      	str	r5, [sp, #24]
    a09a:	9503      	str	r5, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
    a09c:	f7f6 f8e4 	bl	268 <__aeabi_uldivmod>
    a0a0:	4610      	mov	r0, r2
    a0a2:	4619      	mov	r1, r3
    a0a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a0a8:	2300      	movs	r3, #0
    a0aa:	f7f6 f8dd 	bl	268 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a0ae:	e88d 0220 	stmia.w	sp, {r5, r9}
    a0b2:	9002      	str	r0, [sp, #8]
    a0b4:	4653      	mov	r3, sl
    a0b6:	2206      	movs	r2, #6
    a0b8:	2103      	movs	r1, #3
    a0ba:	4628      	mov	r0, r5
    a0bc:	f7f9 ffea 	bl	4094 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    a0c0:	2802      	cmp	r0, #2
    a0c2:	d023      	beq.n	a10c <radio_scan_enable+0x17c>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    a0c4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    a0c6:	2d00      	cmp	r5, #0
    a0c8:	f47f af71 	bne.w	9fae <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
    a0cc:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
    a0d0:	f043 0301 	orr.w	r3, r3, #1
    a0d4:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
	if (!_radio.advertiser.is_enabled) {
    a0d8:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    a0dc:	2b00      	cmp	r3, #0
    a0de:	db02      	blt.n	a0e6 <radio_scan_enable+0x156>
		ll_adv_scan_state_cb(BIT(1));
    a0e0:	2002      	movs	r0, #2
    a0e2:	f7ff fda3 	bl	9c2c <ll_adv_scan_state_cb>
	return 0;
    a0e6:	4628      	mov	r0, r5
    a0e8:	e762      	b.n	9fb0 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
    a0ea:	f8d4 1648 	ldr.w	r1, [r4, #1608]	; 0x648
		u32_t ticks_ref = 0;
    a0ee:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
    a0f0:	aa0d      	add	r2, sp, #52	; 0x34
    a0f2:	ab0c      	add	r3, sp, #48	; 0x30
    a0f4:	4441      	add	r1, r8
    a0f6:	2003      	movs	r0, #3
    a0f8:	f7fb fd72 	bl	5be0 <sched_after_mstr_free_slot_get>
		if (us_offset) {
    a0fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a0fe:	2b00      	cmp	r3, #0
    a100:	d0ae      	beq.n	a060 <radio_scan_enable+0xd0>
			ticks_anchor = ticks_ref;
    a102:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    a106:	e7ab      	b.n	a060 <radio_scan_enable+0xd0>
			cpu_sleep();
    a108:	f7fb f908 	bl	531c <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    a10c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a10e:	2b02      	cmp	r3, #2
    a110:	d0fa      	beq.n	a108 <radio_scan_enable+0x178>
    a112:	e7d7      	b.n	a0c4 <radio_scan_enable+0x134>
    a114:	f3af 8000 	nop.w
    a118:	1afd498d 	.word	0x1afd498d
    a11c:	00000007 	.word	0x00000007
    a120:	200005b0 	.word	0x200005b0
    a124:	84e72a00 	.word	0x84e72a00
    a128:	3b9aca00 	.word	0x3b9aca00
    a12c:	00005361 	.word	0x00005361
    a130:	0000711d 	.word	0x0000711d

0000a134 <radio_scan_disable>:
{
    a134:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
    a136:	2104      	movs	r1, #4
    a138:	2006      	movs	r0, #6
    a13a:	f7fb f9eb 	bl	5514 <role_disable>
	if (!status) {
    a13e:	4605      	mov	r5, r0
    a140:	b9e8      	cbnz	r0, a17e <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
    a142:	4c10      	ldr	r4, [pc, #64]	; (a184 <radio_scan_disable+0x50>)
    a144:	f894 264c 	ldrb.w	r2, [r4, #1612]	; 0x64c
    a148:	f360 0200 	bfi	r2, r0, #0, #1
    a14c:	f884 264c 	strb.w	r2, [r4, #1612]	; 0x64c
		if (!_radio.advertiser.is_enabled) {
    a150:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
    a154:	2a00      	cmp	r2, #0
    a156:	db01      	blt.n	a15c <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
    a158:	f7ff fd68 	bl	9c2c <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
    a15c:	f8d4 666c 	ldr.w	r6, [r4, #1644]	; 0x66c
		if (conn) {
    a160:	b15e      	cbz	r6, a17a <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
    a162:	2300      	movs	r3, #0
    a164:	f8c4 366c 	str.w	r3, [r4, #1644]	; 0x66c
			mem_release(conn->llcp_terminate.
    a168:	4907      	ldr	r1, [pc, #28]	; (a188 <radio_scan_disable+0x54>)
    a16a:	f8d6 009c 	ldr.w	r0, [r6, #156]	; 0x9c
    a16e:	f7f9 f934 	bl	33da <mem_release>
			mem_release(conn, &_radio.conn_free);
    a172:	4906      	ldr	r1, [pc, #24]	; (a18c <radio_scan_disable+0x58>)
    a174:	4630      	mov	r0, r6
    a176:	f7f9 f930 	bl	33da <mem_release>
}
    a17a:	4628      	mov	r0, r5
    a17c:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    a17e:	250c      	movs	r5, #12
    a180:	e7fb      	b.n	a17a <radio_scan_disable+0x46>
    a182:	bf00      	nop
    a184:	200005b0 	.word	0x200005b0
    a188:	20000c5c 	.word	0x20000c5c
    a18c:	20000c28 	.word	0x20000c28

0000a190 <ll_rx_dequeue>:
{
    a190:	b530      	push	{r4, r5, lr}
    a192:	b085      	sub	sp, #20
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    a194:	4d47      	ldr	r5, [pc, #284]	; (a2b4 <ll_rx_dequeue+0x124>)
	struct radio_pdu_node_rx *node_rx = NULL;
    a196:	aa04      	add	r2, sp, #16
    a198:	2300      	movs	r3, #0
    a19a:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    a19e:	f8d5 06b4 	ldr.w	r0, [r5, #1716]	; 0x6b4
    a1a2:	f505 61d6 	add.w	r1, r5, #1712	; 0x6b0
    a1a6:	f7f9 f956 	bl	3456 <memq_dequeue>
    a1aa:	462c      	mov	r4, r5
	LL_ASSERT(link);
    a1ac:	b970      	cbnz	r0, a1cc <ll_rx_dequeue+0x3c>
    a1ae:	4b42      	ldr	r3, [pc, #264]	; (a2b8 <ll_rx_dequeue+0x128>)
    a1b0:	9301      	str	r3, [sp, #4]
    a1b2:	9300      	str	r3, [sp, #0]
    a1b4:	4a41      	ldr	r2, [pc, #260]	; (a2bc <ll_rx_dequeue+0x12c>)
    a1b6:	4b42      	ldr	r3, [pc, #264]	; (a2c0 <ll_rx_dequeue+0x130>)
    a1b8:	4942      	ldr	r1, [pc, #264]	; (a2c4 <ll_rx_dequeue+0x134>)
    a1ba:	4843      	ldr	r0, [pc, #268]	; (a2c8 <ll_rx_dequeue+0x138>)
		LL_ASSERT(_radio.link_rx_data_quota <
    a1bc:	f7f7 f922 	bl	1404 <printk>
    a1c0:	4040      	eors	r0, r0
    a1c2:	f380 8811 	msr	BASEPRI, r0
    a1c6:	f04f 0004 	mov.w	r0, #4
    a1ca:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
    a1cc:	f205 61ac 	addw	r1, r5, #1708	; 0x6ac
    a1d0:	f7f9 f903 	bl	33da <mem_release>
	switch (node_rx->hdr.type) {
    a1d4:	9a03      	ldr	r2, [sp, #12]
    a1d6:	7911      	ldrb	r1, [r2, #4]
    a1d8:	290a      	cmp	r1, #10
    a1da:	d807      	bhi.n	a1ec <ll_rx_dequeue+0x5c>
    a1dc:	2301      	movs	r3, #1
    a1de:	408b      	lsls	r3, r1
    a1e0:	f240 707e 	movw	r0, #1918	; 0x77e
    a1e4:	4203      	tst	r3, r0
    a1e6:	d109      	bne.n	a1fc <ll_rx_dequeue+0x6c>
    a1e8:	0618      	lsls	r0, r3, #24
    a1ea:	d419      	bmi.n	a220 <ll_rx_dequeue+0x90>
		LL_ASSERT(0);
    a1ec:	4b32      	ldr	r3, [pc, #200]	; (a2b8 <ll_rx_dequeue+0x128>)
    a1ee:	9301      	str	r3, [sp, #4]
    a1f0:	9300      	str	r3, [sp, #0]
    a1f2:	4a32      	ldr	r2, [pc, #200]	; (a2bc <ll_rx_dequeue+0x12c>)
    a1f4:	4b32      	ldr	r3, [pc, #200]	; (a2c0 <ll_rx_dequeue+0x130>)
    a1f6:	4933      	ldr	r1, [pc, #204]	; (a2c4 <ll_rx_dequeue+0x134>)
    a1f8:	4834      	ldr	r0, [pc, #208]	; (a2cc <ll_rx_dequeue+0x13c>)
    a1fa:	e7df      	b.n	a1bc <ll_rx_dequeue+0x2c>
		LL_ASSERT(_radio.link_rx_data_quota <
    a1fc:	f895 06a4 	ldrb.w	r0, [r5, #1700]	; 0x6a4
    a200:	f895 36b8 	ldrb.w	r3, [r5, #1720]	; 0x6b8
    a204:	3801      	subs	r0, #1
    a206:	4283      	cmp	r3, r0
    a208:	db07      	blt.n	a21a <ll_rx_dequeue+0x8a>
    a20a:	4b2b      	ldr	r3, [pc, #172]	; (a2b8 <ll_rx_dequeue+0x128>)
    a20c:	9301      	str	r3, [sp, #4]
    a20e:	9300      	str	r3, [sp, #0]
    a210:	4a2a      	ldr	r2, [pc, #168]	; (a2bc <ll_rx_dequeue+0x12c>)
    a212:	4b2b      	ldr	r3, [pc, #172]	; (a2c0 <ll_rx_dequeue+0x130>)
    a214:	492b      	ldr	r1, [pc, #172]	; (a2c4 <ll_rx_dequeue+0x134>)
    a216:	482e      	ldr	r0, [pc, #184]	; (a2d0 <ll_rx_dequeue+0x140>)
    a218:	e7d0      	b.n	a1bc <ll_rx_dequeue+0x2c>
		_radio.link_rx_data_quota++;
    a21a:	3301      	adds	r3, #1
    a21c:	f885 36b8 	strb.w	r3, [r5, #1720]	; 0x6b8
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
    a220:	2906      	cmp	r1, #6
    a222:	d136      	bne.n	a292 <ll_rx_dequeue+0x102>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
    a224:	7ad3      	ldrb	r3, [r2, #11]
    a226:	2b3c      	cmp	r3, #60	; 0x3c
    a228:	d00d      	beq.n	a246 <ll_rx_dequeue+0xb6>
    a22a:	7b12      	ldrb	r2, [r2, #12]
    a22c:	b9e2      	cbnz	r2, a268 <ll_rx_dequeue+0xd8>
			LL_ASSERT(_radio.scanner.is_enabled);
    a22e:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
    a232:	07d9      	lsls	r1, r3, #31
    a234:	d42f      	bmi.n	a296 <ll_rx_dequeue+0x106>
    a236:	4b20      	ldr	r3, [pc, #128]	; (a2b8 <ll_rx_dequeue+0x128>)
    a238:	9301      	str	r3, [sp, #4]
    a23a:	9300      	str	r3, [sp, #0]
    a23c:	4a1f      	ldr	r2, [pc, #124]	; (a2bc <ll_rx_dequeue+0x12c>)
    a23e:	4b20      	ldr	r3, [pc, #128]	; (a2c0 <ll_rx_dequeue+0x130>)
    a240:	4920      	ldr	r1, [pc, #128]	; (a2c4 <ll_rx_dequeue+0x134>)
    a242:	4824      	ldr	r0, [pc, #144]	; (a2d4 <ll_rx_dequeue+0x144>)
    a244:	e7ba      	b.n	a1bc <ll_rx_dequeue+0x2c>
				_radio.advertiser.conn = NULL;
    a246:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
    a248:	f8d4 5638 	ldr.w	r5, [r4, #1592]	; 0x638
				_radio.advertiser.conn = NULL;
    a24c:	f8c4 3638 	str.w	r3, [r4, #1592]	; 0x638
			LL_ASSERT(_radio.advertiser.is_enabled);
    a250:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    a254:	2b00      	cmp	r3, #0
    a256:	db09      	blt.n	a26c <ll_rx_dequeue+0xdc>
    a258:	4b17      	ldr	r3, [pc, #92]	; (a2b8 <ll_rx_dequeue+0x128>)
    a25a:	9301      	str	r3, [sp, #4]
    a25c:	9300      	str	r3, [sp, #0]
    a25e:	4a17      	ldr	r2, [pc, #92]	; (a2bc <ll_rx_dequeue+0x12c>)
    a260:	4b17      	ldr	r3, [pc, #92]	; (a2c0 <ll_rx_dequeue+0x130>)
    a262:	4918      	ldr	r1, [pc, #96]	; (a2c4 <ll_rx_dequeue+0x134>)
    a264:	481c      	ldr	r0, [pc, #112]	; (a2d8 <ll_rx_dequeue+0x148>)
    a266:	e7a9      	b.n	a1bc <ll_rx_dequeue+0x2c>
		struct connection *conn = NULL;
    a268:	2500      	movs	r5, #0
    a26a:	e7f1      	b.n	a250 <ll_rx_dequeue+0xc0>
			_radio.advertiser.is_enabled = 0;
    a26c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    a270:	f36f 13c7 	bfc	r3, #7, #1
    a274:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
    a278:	b995      	cbnz	r5, a2a0 <ll_rx_dequeue+0x110>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    a27a:	f894 064c 	ldrb.w	r0, [r4, #1612]	; 0x64c
		     _radio.advertiser.is_enabled;
    a27e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    a282:	f000 0001 	and.w	r0, r0, #1
    a286:	0040      	lsls	r0, r0, #1
		if (!bm) {
    a288:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
    a28c:	d101      	bne.n	a292 <ll_rx_dequeue+0x102>
			ll_adv_scan_state_cb(0);
    a28e:	f7ff fccd 	bl	9c2c <ll_adv_scan_state_cb>
}
    a292:	b005      	add	sp, #20
    a294:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0;
    a296:	f362 0300 	bfi	r3, r2, #0, #1
    a29a:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
    a29e:	e7ec      	b.n	a27a <ll_rx_dequeue+0xea>
			mem_release(node_rx->hdr.onion.link,
    a2a0:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    a2a4:	490d      	ldr	r1, [pc, #52]	; (a2dc <ll_rx_dequeue+0x14c>)
    a2a6:	f7f9 f898 	bl	33da <mem_release>
			mem_release(conn, &_radio.conn_free);
    a2aa:	490d      	ldr	r1, [pc, #52]	; (a2e0 <ll_rx_dequeue+0x150>)
    a2ac:	4628      	mov	r0, r5
    a2ae:	f7f9 f894 	bl	33da <mem_release>
    a2b2:	e7e2      	b.n	a27a <ll_rx_dequeue+0xea>
    a2b4:	200005b0 	.word	0x200005b0
    a2b8:	0000ceef 	.word	0x0000ceef
    a2bc:	0000d7a6 	.word	0x0000d7a6
    a2c0:	0000e3cc 	.word	0x0000e3cc
    a2c4:	0000d71b 	.word	0x0000d71b
    a2c8:	0000e9e1 	.word	0x0000e9e1
    a2cc:	0000d6b3 	.word	0x0000d6b3
    a2d0:	0000e76a 	.word	0x0000e76a
    a2d4:	0000e802 	.word	0x0000e802
    a2d8:	0000e7c4 	.word	0x0000e7c4
    a2dc:	20000c5c 	.word	0x20000c5c
    a2e0:	20000c28 	.word	0x20000c28

0000a2e4 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    a2e4:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    a2e6:	4c0b      	ldr	r4, [pc, #44]	; (a314 <rtc0_nrf5_isr+0x30>)
    a2e8:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
    a2ec:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
    a2f0:	b122      	cbz	r2, a2fc <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    a2f2:	2000      	movs	r0, #0
    a2f4:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
    a2f8:	f7f9 feba 	bl	4070 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
    a2fc:	b12d      	cbz	r5, a30a <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    a2fe:	2300      	movs	r3, #0
    a300:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
    a304:	2001      	movs	r0, #1
    a306:	f7f9 feb3 	bl	4070 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    a30a:	2000      	movs	r0, #0
}
    a30c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
    a310:	f7f9 b950 	b.w	35b4 <mayfly_run>
    a314:	4000b000 	.word	0x4000b000

0000a318 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
    a318:	2001      	movs	r0, #1
    a31a:	f7f9 b94b 	b.w	35b4 <mayfly_run>

0000a31e <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    a31e:	4668      	mov	r0, sp
    a320:	f020 0107 	bic.w	r1, r0, #7
    a324:	468d      	mov	sp, r1
    a326:	b501      	push	{r0, lr}
	isr_radio();
    a328:	f000 fdac 	bl	ae84 <isr_radio>
	ISR_DIRECT_PM();
    a32c:	f7f6 fd5c 	bl	de8 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
    a330:	f7f6 fb3a 	bl	9a8 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    a334:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    a338:	4685      	mov	sp, r0
    a33a:	4770      	bx	lr

0000a33c <radio_active_callback>:
{
    a33c:	4770      	bx	lr
	...

0000a340 <radio_event_callback>:
	k_sem_give(sem_recv);
    a340:	4b01      	ldr	r3, [pc, #4]	; (a348 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    a342:	6818      	ldr	r0, [r3, #0]
    a344:	f001 bfa0 	b.w	c288 <_impl_k_sem_give>
    a348:	2000163c 	.word	0x2000163c

0000a34c <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
    a34c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
    a34e:	4b42      	ldr	r3, [pc, #264]	; (a458 <ll_init+0x10c>)
{
    a350:	b087      	sub	sp, #28
	sem_recv = sem_rx;
    a352:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    a354:	4841      	ldr	r0, [pc, #260]	; (a45c <ll_init+0x110>)
    a356:	f001 fb61 	bl	ba1c <device_get_binding>
	if (!clk_k32) {
    a35a:	b918      	cbnz	r0, a364 <ll_init+0x18>
		return -ENODEV;
    a35c:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
    a360:	b007      	add	sp, #28
    a362:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return api->on(dev, sys);
    a364:	6843      	ldr	r3, [r0, #4]
    a366:	2101      	movs	r1, #1
    a368:	681b      	ldr	r3, [r3, #0]
    a36a:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
    a36c:	483c      	ldr	r0, [pc, #240]	; (a460 <ll_init+0x114>)
    a36e:	f001 fb55 	bl	ba1c <device_get_binding>
	if (!entropy) {
    a372:	4604      	mov	r4, r0
    a374:	2800      	cmp	r0, #0
    a376:	d0f1      	beq.n	a35c <ll_init+0x10>
	cntr_init();
    a378:	f000 fc68 	bl	ac4c <cntr_init>
	mayfly_init();
    a37c:	f7f9 f87a 	bl	3474 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    a380:	4b38      	ldr	r3, [pc, #224]	; (a464 <ll_init+0x118>)
    a382:	2208      	movs	r2, #8
    a384:	701a      	strb	r2, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    a386:	2203      	movs	r2, #3
    a388:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    a38a:	2000      	movs	r0, #0
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    a38c:	4a36      	ldr	r2, [pc, #216]	; (a468 <ll_init+0x11c>)
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    a38e:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    a390:	2502      	movs	r5, #2
    a392:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    a394:	9205      	str	r2, [sp, #20]
    a396:	4a35      	ldr	r2, [pc, #212]	; (a46c <ll_init+0x120>)
    a398:	9204      	str	r2, [sp, #16]
    a39a:	4a35      	ldr	r2, [pc, #212]	; (a470 <ll_init+0x124>)
    a39c:	9203      	str	r2, [sp, #12]
    a39e:	4a35      	ldr	r2, [pc, #212]	; (a474 <ll_init+0x128>)
    a3a0:	9202      	str	r2, [sp, #8]
    a3a2:	220d      	movs	r2, #13
    a3a4:	9201      	str	r2, [sp, #4]
    a3a6:	9300      	str	r3, [sp, #0]
    a3a8:	4a33      	ldr	r2, [pc, #204]	; (a478 <ll_init+0x12c>)
    a3aa:	2304      	movs	r3, #4
    a3ac:	2107      	movs	r1, #7
    a3ae:	f7f9 fe27 	bl	4000 <ticker_init>
	LL_ASSERT(!err);
    a3b2:	4607      	mov	r7, r0
    a3b4:	b170      	cbz	r0, a3d4 <ll_init+0x88>
    a3b6:	4b31      	ldr	r3, [pc, #196]	; (a47c <ll_init+0x130>)
    a3b8:	9301      	str	r3, [sp, #4]
    a3ba:	9300      	str	r3, [sp, #0]
    a3bc:	4a30      	ldr	r2, [pc, #192]	; (a480 <ll_init+0x134>)
    a3be:	4b31      	ldr	r3, [pc, #196]	; (a484 <ll_init+0x138>)
    a3c0:	4931      	ldr	r1, [pc, #196]	; (a488 <ll_init+0x13c>)
    a3c2:	4832      	ldr	r0, [pc, #200]	; (a48c <ll_init+0x140>)
    a3c4:	f7f7 f81e 	bl	1404 <printk>
    a3c8:	4040      	eors	r0, r0
    a3ca:	f380 8811 	msr	BASEPRI, r0
    a3ce:	f04f 0004 	mov.w	r0, #4
    a3d2:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
    a3d4:	482e      	ldr	r0, [pc, #184]	; (a490 <ll_init+0x144>)
    a3d6:	f001 fb21 	bl	ba1c <device_get_binding>
	if (!clk_m16) {
    a3da:	2800      	cmp	r0, #0
    a3dc:	d0be      	beq.n	a35c <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
    a3de:	4b2d      	ldr	r3, [pc, #180]	; (a494 <ll_init+0x148>)
    a3e0:	9304      	str	r3, [sp, #16]
    a3e2:	231b      	movs	r3, #27
    a3e4:	9303      	str	r3, [sp, #12]
    a3e6:	9501      	str	r5, [sp, #4]
    a3e8:	23fb      	movs	r3, #251	; 0xfb
    a3ea:	f44f 66ac 	mov.w	r6, #1376	; 0x560
    a3ee:	2501      	movs	r5, #1
    a3f0:	9302      	str	r3, [sp, #8]
    a3f2:	4622      	mov	r2, r4
    a3f4:	9605      	str	r6, [sp, #20]
    a3f6:	9500      	str	r5, [sp, #0]
    a3f8:	463b      	mov	r3, r7
    a3fa:	2107      	movs	r1, #7
    a3fc:	f7ff fa1e 	bl	983c <radio_init>
	if (err) {
    a400:	4604      	mov	r4, r0
    a402:	b160      	cbz	r0, a41e <ll_init+0xd2>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
    a404:	4b1d      	ldr	r3, [pc, #116]	; (a47c <ll_init+0x130>)
    a406:	9303      	str	r3, [sp, #12]
    a408:	e88d 0058 	stmia.w	sp, {r3, r4, r6}
    a40c:	4a1c      	ldr	r2, [pc, #112]	; (a480 <ll_init+0x134>)
    a40e:	4b1d      	ldr	r3, [pc, #116]	; (a484 <ll_init+0x138>)
    a410:	491d      	ldr	r1, [pc, #116]	; (a488 <ll_init+0x13c>)
    a412:	4821      	ldr	r0, [pc, #132]	; (a498 <ll_init+0x14c>)
    a414:	f7f6 fff6 	bl	1404 <printk>
		return -ENOMEM;
    a418:	f06f 000b 	mvn.w	r0, #11
    a41c:	e7a0      	b.n	a360 <ll_init+0x14>
	ll_filter_reset(true);
    a41e:	4628      	mov	r0, r5
    a420:	f000 fc08 	bl	ac34 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    a424:	4622      	mov	r2, r4
    a426:	4621      	mov	r1, r4
    a428:	4628      	mov	r0, r5
    a42a:	f7f6 fcc3 	bl	db4 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    a42e:	4622      	mov	r2, r4
    a430:	4621      	mov	r1, r4
    a432:	200b      	movs	r0, #11
    a434:	f7f6 fcbe 	bl	db4 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
    a438:	4622      	mov	r2, r4
    a43a:	4621      	mov	r1, r4
    a43c:	2018      	movs	r0, #24
    a43e:	f7f6 fcb9 	bl	db4 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
    a442:	4628      	mov	r0, r5
    a444:	f7f6 fc84 	bl	d50 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    a448:	200b      	movs	r0, #11
    a44a:	f7f6 fc81 	bl	d50 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
    a44e:	2018      	movs	r0, #24
    a450:	f7f6 fc7e 	bl	d50 <_arch_irq_enable>
	return 0;
    a454:	4620      	mov	r0, r4
    a456:	e783      	b.n	a360 <ll_init+0x14>
    a458:	2000163c 	.word	0x2000163c
    a45c:	0000d370 	.word	0x0000d370
    a460:	0000d346 	.word	0x0000d346
    a464:	2000161c 	.word	0x2000161c
    a468:	0000b7a5 	.word	0x0000b7a5
    a46c:	0000b701 	.word	0x0000b701
    a470:	0000b6a5 	.word	0x0000b6a5
    a474:	200013ac 	.word	0x200013ac
    a478:	20001294 	.word	0x20001294
    a47c:	0000ceef 	.word	0x0000ceef
    a480:	0000d7a6 	.word	0x0000d7a6
    a484:	0000ee88 	.word	0x0000ee88
    a488:	0000d71b 	.word	0x0000d71b
    a48c:	0000ee90 	.word	0x0000ee90
    a490:	0000d37b 	.word	0x0000d37b
    a494:	20000d34 	.word	0x20000d34
    a498:	0000eeb6 	.word	0x0000eeb6

0000a49c <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t Adv_handle, u16_t evt_prop, u16_t interval,
			u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
    a49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a4a0:	b089      	sub	sp, #36	; 0x24
    a4a2:	4699      	mov	r9, r3
    a4a4:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    a4a8:	9301      	str	r3, [sp, #4]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    a4aa:	2300      	movs	r3, #0
    a4ac:	f88d 3018 	strb.w	r3, [sp, #24]
    a4b0:	2306      	movs	r3, #6
    a4b2:	2601      	movs	r6, #1
    a4b4:	f88d 301a 	strb.w	r3, [sp, #26]
    a4b8:	2502      	movs	r5, #2
    a4ba:	2307      	movs	r3, #7
{
    a4bc:	9102      	str	r1, [sp, #8]
    a4be:	4614      	mov	r4, r2
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    a4c0:	f88d 6019 	strb.w	r6, [sp, #25]
    a4c4:	f88d 501b 	strb.w	r5, [sp, #27]
    a4c8:	f88d 601c 	strb.w	r6, [sp, #28]
    a4cc:	f88d 301d 	strb.w	r3, [sp, #29]
	struct radio_adv_data *radio_adv_data;
	struct radio_adv_data *radio_aux_adv_data;
	struct pdu_adv *pdu;
	struct pdu_adv *aux_pdu;
	
	if (ll_adv_is_enabled()) {
    a4d0:	f7ff fa92 	bl	99f8 <ll_adv_is_enabled>
    a4d4:	9902      	ldr	r1, [sp, #8]
    a4d6:	4607      	mov	r7, r0
    a4d8:	2800      	cmp	r0, #0
    a4da:	f040 81a0 	bne.w	a81e <ll_adv_params_set+0x382>
#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */
	u8_t adv_type;
	ll_adv.phy_p = BIT(0);
    a4de:	4bcb      	ldr	r3, [pc, #812]	; (a80c <ll_adv_params_set+0x370>)
    a4e0:	781a      	ldrb	r2, [r3, #0]
    a4e2:	f366 1247 	bfi	r2, r6, #5, #3
    a4e6:	701a      	strb	r2, [r3, #0]
		adv_type = 0x05;
	}			
	/* extended */
	//if (adv_type > 0x04) {
		/* legacy */
		if (evt_prop & BIT(4)) {
    a4e8:	06ca      	lsls	r2, r1, #27
    a4ea:	f140 809b 	bpl.w	a624 <ll_adv_params_set+0x188>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    a4ee:	2203      	movs	r2, #3
    a4f0:	f88d 2014 	strb.w	r2, [sp, #20]
    a4f4:	f88d 0017 	strb.w	r0, [sp, #23]
    a4f8:	2204      	movs	r2, #4

			adv_type = leg_adv_type[evt_prop & 0x03];

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
    a4fa:	0708      	lsls	r0, r1, #28
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    a4fc:	f88d 2015 	strb.w	r2, [sp, #21]
    a500:	f88d 5016 	strb.w	r5, [sp, #22]
			if (evt_prop & BIT(3)) {
    a504:	d408      	bmi.n	a518 <ll_adv_params_set+0x7c>
			adv_type = leg_adv_type[evt_prop & 0x03];
    a506:	f001 0203 	and.w	r2, r1, #3
    a50a:	a808      	add	r0, sp, #32
    a50c:	4402      	add	r2, r0
    a50e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type == 0x01) {
    a512:	42b2      	cmp	r2, r6
    a514:	f040 8096 	bne.w	a644 <ll_adv_params_set+0x1a8>
		ll_adv.interval = 0;  				//interval = 0 for ADV_DIRECT_IND
    a518:	2200      	movs	r2, #0
    a51a:	805a      	strh	r2, [r3, #2]
    a51c:	2201      	movs	r2, #1
	} else {
		ll_adv.interval = interval;
	}
	ll_adv.chan_map = chan_map;  			
    a51e:	7818      	ldrb	r0, [r3, #0]
    a520:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
    a524:	9103      	str	r1, [sp, #12]
    a526:	f364 0002 	bfi	r0, r4, #0, #3
	ll_adv.filter_policy = filter_policy;
    a52a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
    a52e:	9202      	str	r2, [sp, #8]
    a530:	f364 00c4 	bfi	r0, r4, #3, #2
    a534:	7018      	strb	r0, [r3, #0]

	/* update the "current" primary adv data and Aux packet */
	radio_adv_data = radio_adv_data_get();
    a536:	f7ff fa53 	bl	99e0 <radio_adv_data_get>
    a53a:	4606      	mov	r6, r0
	radio_aux_adv_data = radio_aux_adv_data_get();
    a53c:	f7ff fa54 	bl	99e8 <radio_aux_adv_data_get>

	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];

	pdu->type = pdu_adv_type[adv_type];
    a540:	9a02      	ldr	r2, [sp, #8]
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a542:	f896 3203 	ldrb.w	r3, [r6, #515]	; 0x203
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
    a546:	f890 e203 	ldrb.w	lr, [r0, #515]	; 0x203
	pdu->type = pdu_adv_type[adv_type];
    a54a:	a908      	add	r1, sp, #32
    a54c:	440a      	add	r2, r1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a54e:	eb03 2303 	add.w	r3, r3, r3, lsl #8
	pdu->type = pdu_adv_type[adv_type];
    a552:	f812 2c08 	ldrb.w	r2, [r2, #-8]
    a556:	f816 c003 	ldrb.w	ip, [r6, r3]
	aux_pdu->type = pdu->type;
	
	pdu->rfu = 0;
	aux_pdu->rfu = pdu->rfu;

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) && 
    a55a:	9903      	ldr	r1, [sp, #12]
	pdu->type = pdu_adv_type[adv_type];
    a55c:	f002 020f 	and.w	r2, r2, #15
    a560:	f362 0c03 	bfi	ip, r2, #0, #4
    a564:	f806 c003 	strb.w	ip, [r6, r3]
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
    a568:	eb0e 2e0e 	add.w	lr, lr, lr, lsl #8
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr =  own_addr_type & 0x1;
    a56c:	f009 0901 	and.w	r9, r9, #1
	aux_pdu->type = pdu->type;
    a570:	f810 c00e 	ldrb.w	ip, [r0, lr]
    a574:	f362 0c03 	bfi	ip, r2, #0, #4
    a578:	f800 c00e 	strb.w	ip, [r0, lr]
	pdu->rfu = 0;
    a57c:	5cf2      	ldrb	r2, [r6, r3]
    a57e:	f36f 1204 	bfc	r2, #4, #1
    a582:	54f2      	strb	r2, [r6, r3]
	aux_pdu->rfu = pdu->rfu;
    a584:	f810 200e 	ldrb.w	r2, [r0, lr]
    a588:	f36f 1204 	bfc	r2, #4, #1
    a58c:	f800 200e 	strb.w	r2, [r0, lr]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) && 
    a590:	5cf2      	ldrb	r2, [r6, r3]
    a592:	f002 0c0f 	and.w	ip, r2, #15
    a596:	f1bc 0f01 	cmp.w	ip, #1
		pdu->chan_sel = 1;           // could be same for ext adv  LE Channel Selection Algorithm #2 feature 
    a59a:	bf95      	itete	ls
    a59c:	f042 0220 	orrls.w	r2, r2, #32
		pdu->chan_sel = 0;
    a5a0:	f36f 1245 	bfchi	r2, #5, #1
		pdu->chan_sel = 1;           // could be same for ext adv  LE Channel Selection Algorithm #2 feature 
    a5a4:	54f2      	strbls	r2, [r6, r3]
		pdu->chan_sel = 0;
    a5a6:	54f2      	strbhi	r2, [r6, r3]
		aux_pdu->chan_sel = pdu->chan_sel;
    a5a8:	bf95      	itete	ls
    a5aa:	f810 200e 	ldrbls.w	r2, [r0, lr]
		aux_pdu->chan_sel = pdu->chan_sel;
    a5ae:	f810 200e 	ldrbhi.w	r2, [r0, lr]
		aux_pdu->chan_sel = pdu->chan_sel;
    a5b2:	f042 0220 	orrls.w	r2, r2, #32
		aux_pdu->chan_sel = pdu->chan_sel;
    a5b6:	f36f 1245 	bfchi	r2, #5, #1
    a5ba:	f800 200e 	strb.w	r2, [r0, lr]
	pdu->tx_addr =  own_addr_type & 0x1;
    a5be:	5cf2      	ldrb	r2, [r6, r3]
    a5c0:	f369 1286 	bfi	r2, r9, #6, #1
    a5c4:	54f2      	strb	r2, [r6, r3]
	aux_pdu->tx_addr = 0;						//not sending transmitting address in aux packet
    a5c6:	f810 200e 	ldrb.w	r2, [r0, lr]
    a5ca:	f36f 1286 	bfc	r2, #6, #1
    a5ce:	f800 200e 	strb.w	r2, [r0, lr]
	pdu->rx_addr = 0;  							
    a5d2:	5cf2      	ldrb	r2, [r6, r3]
    a5d4:	f36f 12c7 	bfc	r2, #7, #1
    a5d8:	54f2      	strb	r2, [r6, r3]
	aux_pdu->rx_addr = pdu->rx_addr;
    a5da:	f810 200e 	ldrb.w	r2, [r0, lr]
    a5de:	f36f 12c7 	bfc	r2, #7, #1
    a5e2:	f800 200e 	strb.w	r2, [r0, lr]
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
    a5e6:	eb00 050e 	add.w	r5, r0, lr
	if(evt_prop & BIT(2)){							// for directed ADV wuth public address
    a5ea:	f011 0004 	ands.w	r0, r1, #4
		pdu->rx_addr = 0;//direct_addr_type;
    a5ee:	bf1e      	ittt	ne
    a5f0:	5cf2      	ldrbne	r2, [r6, r3]
    a5f2:	f36f 12c7 	bfcne	r2, #7, #1
    a5f6:	54f2      	strbne	r2, [r6, r3]
	}

	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    a5f8:	5cf2      	ldrb	r2, [r6, r3]
    a5fa:	f002 0e0f 	and.w	lr, r2, #15
    a5fe:	f1be 0f01 	cmp.w	lr, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a602:	eb06 0403 	add.w	r4, r6, r3
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    a606:	d11f      	bne.n	a648 <ll_adv_params_set+0x1ac>
		pdu->rx_addr = direct_addr_type;
    a608:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
    a60c:	f361 12c7 	bfi	r2, r1, #7, #1
    a610:	54f2      	strb	r2, [r6, r3]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    a612:	9913      	ldr	r1, [sp, #76]	; 0x4c
    a614:	2206      	movs	r2, #6
    a616:	f104 0008 	add.w	r0, r4, #8
    a61a:	f7f5 ffed 	bl	5f8 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    a61e:	230c      	movs	r3, #12
		/* NOTE: AdvA, filled at enable and RPA timeout */
		
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
    a620:	7063      	strb	r3, [r4, #1]
    a622:	e0d2      	b.n	a7ca <ll_adv_params_set+0x32e>
			if (((evt_prop & 0x03) == 0x03) ||
    a624:	f001 0203 	and.w	r2, r1, #3
    a628:	2a03      	cmp	r2, #3
    a62a:	f000 80fa 	beq.w	a822 <ll_adv_params_set+0x386>
    a62e:	f001 020c 	and.w	r2, r1, #12
    a632:	2a0c      	cmp	r2, #12
    a634:	f000 80f5 	beq.w	a822 <ll_adv_params_set+0x386>
			ll_adv.phy_p = phy_p;
    a638:	781a      	ldrb	r2, [r3, #0]
    a63a:	9801      	ldr	r0, [sp, #4]
    a63c:	f360 1247 	bfi	r2, r0, #5, #3
    a640:	701a      	strb	r2, [r3, #0]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
    a642:	2205      	movs	r2, #5
		ll_adv.interval = interval;
    a644:	805c      	strh	r4, [r3, #2]
    a646:	e76a      	b.n	a51e <ll_adv_params_set+0x82>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
    a648:	f1be 0f07 	cmp.w	lr, #7
    a64c:	f040 80e2 	bne.w	a814 <ll_adv_params_set+0x378>
		p->ext_hdr_len = 0;
    a650:	78a2      	ldrb	r2, [r4, #2]
		p->adv_mode = 0x00;//evt_prop & 0x03;
    a652:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    a656:	f36f 1287 	bfc	r2, #6, #2
    a65a:	70a2      	strb	r2, [r4, #2]
		aux_p->ext_hdr_len = p->ext_hdr_len;
    a65c:	78aa      	ldrb	r2, [r5, #2]
		aux_p->adv_mode = p->adv_mode;
    a65e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    a662:	f36f 1287 	bfc	r2, #6, #2
    a666:	70aa      	strb	r2, [r5, #2]
		*(u8_t *)h = 0;
    a668:	2200      	movs	r2, #0
    a66a:	70e2      	strb	r2, [r4, #3]
		*(u8_t *)aux_h = 0;
    a66c:	70ea      	strb	r2, [r5, #3]
		if (!((evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2)))) {
    a66e:	068a      	lsls	r2, r1, #26
		p = (void *)&pdu->adv_ext_ind;
    a670:	f104 0c02 	add.w	ip, r4, #2
		ptr = (u8_t *)h + sizeof(*h);
    a674:	f104 0604 	add.w	r6, r4, #4
		aux_p = (void *)&aux_pdu->adv_ext_ind;
    a678:	f105 0e02 	add.w	lr, r5, #2
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
    a67c:	f105 0304 	add.w	r3, r5, #4
		if (!((evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2)))) {
    a680:	d507      	bpl.n	a692 <ll_adv_params_set+0x1f6>
    a682:	78a2      	ldrb	r2, [r4, #2]
    a684:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    a688:	d103      	bne.n	a692 <ll_adv_params_set+0x1f6>
    a68a:	9a01      	ldr	r2, [sp, #4]
    a68c:	2a04      	cmp	r2, #4
    a68e:	f040 80b6 	bne.w	a7fe <ll_adv_params_set+0x362>
			h->adv_addr = 1;
    a692:	78e2      	ldrb	r2, [r4, #3]
    a694:	f042 0201 	orr.w	r2, r2, #1
    a698:	70e2      	strb	r2, [r4, #3]
			ptr += BDADDR_SIZE;
    a69a:	f104 020a 	add.w	r2, r4, #10
		if(evt_prop & BIT(2)){
    a69e:	b120      	cbz	r0, a6aa <ll_adv_params_set+0x20e>
			h->tgt_addr = 1;
    a6a0:	78e0      	ldrb	r0, [r4, #3]
    a6a2:	f040 0002 	orr.w	r0, r0, #2
    a6a6:	70e0      	strb	r0, [r4, #3]
			ptr += BDADDR_SIZE;
    a6a8:	3206      	adds	r2, #6
		if(evt_prop & BIT(6)){
    a6aa:	0648      	lsls	r0, r1, #25
    a6ac:	f140 80a9 	bpl.w	a802 <ll_adv_params_set+0x366>
			h->adi = 1;
    a6b0:	78e1      	ldrb	r1, [r4, #3]
    a6b2:	f041 0108 	orr.w	r1, r1, #8
    a6b6:	70e1      	strb	r1, [r4, #3]
			aux_h->adi = h->adi;
    a6b8:	78e9      	ldrb	r1, [r5, #3]
    a6ba:	f041 0108 	orr.w	r1, r1, #8
    a6be:	70e9      	strb	r1, [r5, #3]
			h->aux_ptr = 1;
    a6c0:	78e1      	ldrb	r1, [r4, #3]
			h->tx_pwr = 1;
    a6c2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
    a6c6:	70e1      	strb	r1, [r4, #3]
			aux_h->tx_pwr = h->tx_pwr;
    a6c8:	78e9      	ldrb	r1, [r5, #3]
    a6ca:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    a6ce:	70e9      	strb	r1, [r5, #3]
			ptr += sizeof(*adi_ptr);
    a6d0:	f102 0802 	add.w	r8, r2, #2
			adi_ptr = ptr;
    a6d4:	4693      	mov	fp, r2
			aux_ptr ++;
    a6d6:	1de9      	adds	r1, r5, #7
			aux_adi_ptr = aux_ptr;
    a6d8:	469a      	mov	sl, r3
			ptr ++;
    a6da:	3206      	adds	r2, #6
		len = ptr - (u8_t *)p;
    a6dc:	eba2 020c 	sub.w	r2, r2, ip
    a6e0:	b2d2      	uxtb	r2, r2
		if (len > (offsetof(struct pdu_adv_com_ext_adv,
    a6e2:	2a02      	cmp	r2, #2
			p->ext_hdr_len = (len -
    a6e4:	bf84      	itt	hi
    a6e6:	78a0      	ldrbhi	r0, [r4, #2]
    a6e8:	f102 3cff 	addhi.w	ip, r2, #4294967295	; 0xffffffff
		aux_len = aux_ptr - (u8_t *)aux_p;
    a6ec:	eba1 0e0e 	sub.w	lr, r1, lr
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    a6f0:	bf98      	it	ls
    a6f2:	2201      	movls	r2, #1
		aux_len = aux_ptr - (u8_t *)aux_p;
    a6f4:	fa5f fe8e 	uxtb.w	lr, lr
			p->ext_hdr_len = (len -
    a6f8:	bf88      	it	hi
    a6fa:	f36c 0005 	bfihi	r0, ip, #0, #6
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    a6fe:	7062      	strb	r2, [r4, #1]
			p->ext_hdr_len = (len -
    a700:	bf88      	it	hi
    a702:	70a0      	strbhi	r0, [r4, #2]
		if (aux_len > (offsetof(struct pdu_adv_com_ext_adv,
    a704:	f1be 0f02 	cmp.w	lr, #2
			aux_p->ext_hdr_len = (aux_len -
    a708:	bf81      	itttt	hi
    a70a:	78aa      	ldrbhi	r2, [r5, #2]
			aux_pdu->len = aux_len;
    a70c:	f885 e001 	strbhi.w	lr, [r5, #1]
			aux_p->ext_hdr_len = (aux_len -
    a710:	f10e 31ff 	addhi.w	r1, lr, #4294967295	; 0xffffffff
    a714:	f361 0205 	bfihi	r2, r1, #0, #6
			aux_pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    a718:	bf96      	itet	ls
    a71a:	2201      	movls	r2, #1
			aux_p->ext_hdr_len = (aux_len -
    a71c:	70aa      	strbhi	r2, [r5, #2]
			aux_pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    a71e:	706a      	strbls	r2, [r5, #1]
		if(h->adv_addr){
    a720:	78e2      	ldrb	r2, [r4, #3]
    a722:	07d1      	lsls	r1, r2, #31
			ptr += BDADDR_SIZE;
    a724:	bf48      	it	mi
    a726:	f104 060a 	addmi.w	r6, r4, #10
		if(h->tgt_addr){
    a72a:	0792      	lsls	r2, r2, #30
    a72c:	d507      	bpl.n	a73e <ll_adv_params_set+0x2a2>
			memcpy(ptr, direct_addr, BDADDR_SIZE);
    a72e:	4630      	mov	r0, r6
    a730:	2206      	movs	r2, #6
    a732:	9913      	ldr	r1, [sp, #76]	; 0x4c
    a734:	9301      	str	r3, [sp, #4]
    a736:	f7f5 ff5f 	bl	5f8 <memcpy>
			ptr += BDADDR_SIZE;
    a73a:	9b01      	ldr	r3, [sp, #4]
    a73c:	3606      	adds	r6, #6
		if(h->adi){
    a73e:	78e0      	ldrb	r0, [r4, #3]
    a740:	0704      	lsls	r4, r0, #28
    a742:	d51a      	bpl.n	a77a <ll_adv_params_set+0x2de>
			adi_ptr->did = 0x00;
    a744:	f89b 3001 	ldrb.w	r3, [fp, #1]
			adi_ptr->sid = sid & 0x0f;
    a748:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
    a74c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    a750:	f002 020f 	and.w	r2, r2, #15
			adi_ptr->did = 0x00;
    a754:	2100      	movs	r1, #0
			adi_ptr->sid = sid & 0x0f;
    a756:	f362 1307 	bfi	r3, r2, #4, #4
			adi_ptr->did = 0x00;
    a75a:	f88b 1000 	strb.w	r1, [fp]
			adi_ptr->sid = sid & 0x0f;
    a75e:	f88b 3001 	strb.w	r3, [fp, #1]
			aux_adi_ptr->did = adi_ptr->did;
    a762:	f89a 3001 	ldrb.w	r3, [sl, #1]
    a766:	f88a 1000 	strb.w	r1, [sl]
			aux_adi_ptr->sid = adi_ptr->sid;
    a76a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    a76e:	f362 1307 	bfi	r3, r2, #4, #4
    a772:	f88a 3001 	strb.w	r3, [sl, #1]
			ptr += sizeof(*adi_ptr);
    a776:	3602      	adds	r6, #2
			aux_ptr += sizeof(*aux_adi_ptr);
    a778:	1dab      	adds	r3, r5, #6
		if(h->aux_ptr){
    a77a:	06c1      	lsls	r1, r0, #27
    a77c:	d516      	bpl.n	a7ac <ll_adv_params_set+0x310>
			ap->chan_idx = 0x03;
    a77e:	f898 2000 	ldrb.w	r2, [r8]
    a782:	2103      	movs	r1, #3
    a784:	f361 0205 	bfi	r2, r1, #0, #6
			ap->offs = 00;	
    a788:	2400      	movs	r4, #0
    a78a:	f898 1002 	ldrb.w	r1, [r8, #2]
    a78e:	f888 4001 	strb.w	r4, [r8, #1]
			ap->offs_units = 0;
    a792:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    a796:	f364 12c7 	bfi	r2, r4, #7, #1
    a79a:	f888 2000 	strb.w	r2, [r8]
			ap->phy = 0;
    a79e:	f001 02e0 	and.w	r2, r1, #224	; 0xe0
    a7a2:	f364 1247 	bfi	r2, r4, #5, #3
    a7a6:	f888 2002 	strb.w	r2, [r8, #2]
			ptr += sizeof(*ap);
    a7aa:	3603      	adds	r6, #3
		if (h->tx_pwr) {
    a7ac:	0642      	lsls	r2, r0, #25
    a7ae:	d50a      	bpl.n	a7c6 <ll_adv_params_set+0x32a>
			if (tx_pwr) {
    a7b0:	9a16      	ldr	r2, [sp, #88]	; 0x58
    a7b2:	b342      	cbz	r2, a806 <ll_adv_params_set+0x36a>
				if (*tx_pwr != 0x7F) {
    a7b4:	7812      	ldrb	r2, [r2, #0]
    a7b6:	2a7f      	cmp	r2, #127	; 0x7f
    a7b8:	d102      	bne.n	a7c0 <ll_adv_params_set+0x324>
					*tx_pwr = _tx_pwr;
    a7ba:	9916      	ldr	r1, [sp, #88]	; 0x58
    a7bc:	2200      	movs	r2, #0
    a7be:	700a      	strb	r2, [r1, #0]
			*ptr = _tx_pwr;
    a7c0:	7032      	strb	r2, [r6, #0]
			*aux_ptr = _tx_pwr;
    a7c2:	f803 2b01 	strb.w	r2, [r3], #1
		set_data_ptr = aux_ptr; 
    a7c6:	4a12      	ldr	r2, [pc, #72]	; (a810 <ll_adv_params_set+0x374>)
    a7c8:	6013      	str	r3, [r2, #0]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
    a7ca:	f7ff f911 	bl	99f0 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a7ce:	f890 2203 	ldrb.w	r2, [r0, #515]	; 0x203
    a7d2:	eb02 2202 	add.w	r2, r2, r2, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    a7d6:	2404      	movs	r4, #4
    a7d8:	5c83      	ldrb	r3, [r0, r2]
    a7da:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
    a7de:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
    a7e2:	f369 1386 	bfi	r3, r9, #6, #1
	pdu->rx_addr = 0;
    a7e6:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a7ea:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
    a7ec:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
    a7ee:	784b      	ldrb	r3, [r1, #1]
    a7f0:	b90b      	cbnz	r3, a7f6 <ll_adv_params_set+0x35a>
		pdu->len = BDADDR_SIZE;
    a7f2:	2306      	movs	r3, #6
    a7f4:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
    a7f6:	4638      	mov	r0, r7
    a7f8:	b009      	add	sp, #36	; 0x24
    a7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ptr = (u8_t *)h + sizeof(*h);
    a7fe:	4632      	mov	r2, r6
    a800:	e74d      	b.n	a69e <ll_adv_params_set+0x202>
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
    a802:	4619      	mov	r1, r3
    a804:	e76a      	b.n	a6dc <ll_adv_params_set+0x240>
			_tx_pwr = 0;
    a806:	9a16      	ldr	r2, [sp, #88]	; 0x58
    a808:	e7da      	b.n	a7c0 <ll_adv_params_set+0x324>
    a80a:	bf00      	nop
    a80c:	20001640 	.word	0x20001640
    a810:	20001644 	.word	0x20001644
	} else if (pdu->len == 0) {
    a814:	7863      	ldrb	r3, [r4, #1]
    a816:	2b00      	cmp	r3, #0
    a818:	d1d7      	bne.n	a7ca <ll_adv_params_set+0x32e>
		pdu->len = BDADDR_SIZE;
    a81a:	2306      	movs	r3, #6
    a81c:	e700      	b.n	a620 <ll_adv_params_set+0x184>
		return BT_HCI_ERR_CMD_DISALLOWED;
    a81e:	270c      	movs	r7, #12
    a820:	e7e9      	b.n	a7f6 <ll_adv_params_set+0x35a>
				return 0x12; /* invalid HCI cmd param */
    a822:	2712      	movs	r7, #18
    a824:	e7e7      	b.n	a7f6 <ll_adv_params_set+0x35a>
    a826:	bf00      	nop

0000a828 <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
    a828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a82c:	4688      	mov	r8, r1
    a82e:	4606      	mov	r6, r0
	struct pdu_adv *pdu;
	u8_t last;


	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
    a830:	f7ff f8d6 	bl	99e0 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a834:	f890 5203 	ldrb.w	r5, [r0, #515]	; 0x203
    a838:	eb05 2205 	add.w	r2, r5, r5, lsl #8
	radio_adv_data = radio_adv_data_get();
    a83c:	4604      	mov	r4, r0
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
    a83e:	f810 e002 	ldrb.w	lr, [r0, r2]
    a842:	f00e 030f 	and.w	r3, lr, #15
    a846:	2b07      	cmp	r3, #7
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a848:	eb00 0102 	add.w	r1, r0, r2
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
    a84c:	d111      	bne.n	a872 <ll_adv_data_set+0x4a>
	
		struct radio_adv_data *radio_aux_adv_data;
		struct pdu_adv *aux_pdu;
		u8_t last;

		radio_aux_adv_data = radio_aux_adv_data_get();
    a84e:	f7ff f8cb 	bl	99e8 <radio_aux_adv_data_get>
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
    a852:	f890 4203 	ldrb.w	r4, [r0, #515]	; 0x203

		memcpy(set_data_ptr, data, len);
    a856:	4b26      	ldr	r3, [pc, #152]	; (a8f0 <ll_adv_data_set+0xc8>)
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
    a858:	eb04 2404 	add.w	r4, r4, r4, lsl #8
    a85c:	4404      	add	r4, r0
		memcpy(set_data_ptr, data, len);
    a85e:	4632      	mov	r2, r6
    a860:	6818      	ldr	r0, [r3, #0]
    a862:	4641      	mov	r1, r8
    a864:	f7f5 fec8 	bl	5f8 <memcpy>
		aux_pdu->len += len;
    a868:	7863      	ldrb	r3, [r4, #1]
    a86a:	441e      	add	r6, r3
    a86c:	7066      	strb	r6, [r4, #1]
    a86e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}else{
		if ((prev->type == PDU_ADV_TYPE_DIRECT_IND)) {
    a872:	2b01      	cmp	r3, #1
    a874:	d039      	beq.n	a8ea <ll_adv_data_set+0xc2>
		
		return;
		}

		/* use the last index in double buffer, */
		if (radio_adv_data->first == radio_adv_data->last) {
    a876:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
    a87a:	42ab      	cmp	r3, r5
    a87c:	d104      	bne.n	a888 <ll_adv_data_set+0x60>
			last = radio_adv_data->last + 1;
    a87e:	3501      	adds	r5, #1
    a880:	b2ed      	uxtb	r5, r5
			if (last == DOUBLE_BUFFER_SIZE) {
				last = 0;
    a882:	2d02      	cmp	r5, #2
    a884:	bf08      	it	eq
    a886:	2500      	moveq	r5, #0
		} else {
			last = radio_adv_data->last;
		}

		/* update adv pdu fields. */
		pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    a888:	eb05 2305 	add.w	r3, r5, r5, lsl #8
    a88c:	18e7      	adds	r7, r4, r3
		pdu->type = prev->type;
    a88e:	5ce0      	ldrb	r0, [r4, r3]
    a890:	f36e 0003 	bfi	r0, lr, #0, #4
		pdu->rfu = 0;
    a894:	f36f 1004 	bfc	r0, #4, #1
    a898:	54e0      	strb	r0, [r4, r3]

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			pdu->chan_sel = prev->chan_sel;
    a89a:	5ca0      	ldrb	r0, [r4, r2]
    a89c:	f814 e003 	ldrb.w	lr, [r4, r3]
    a8a0:	f3c0 1040 	ubfx	r0, r0, #5, #1
    a8a4:	f360 1e45 	bfi	lr, r0, #5, #1
    a8a8:	f804 e003 	strb.w	lr, [r4, r3]
		} else {
			pdu->chan_sel = 0;
		}

		pdu->tx_addr = prev->tx_addr;
    a8ac:	5ca0      	ldrb	r0, [r4, r2]
    a8ae:	fa5f fe8e 	uxtb.w	lr, lr
    a8b2:	f3c0 1080 	ubfx	r0, r0, #6, #1
    a8b6:	f360 1e86 	bfi	lr, r0, #6, #1
    a8ba:	f804 e003 	strb.w	lr, [r4, r3]
		pdu->rx_addr = prev->rx_addr;
    a8be:	5ca2      	ldrb	r2, [r4, r2]
    a8c0:	fa5f f08e 	uxtb.w	r0, lr
    a8c4:	09d2      	lsrs	r2, r2, #7
    a8c6:	f362 10c7 	bfi	r0, r2, #7, #1
    a8ca:	54e0      	strb	r0, [r4, r3]
		
		
		memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    a8cc:	2206      	movs	r2, #6
    a8ce:	3102      	adds	r1, #2
    a8d0:	1cb8      	adds	r0, r7, #2
    a8d2:	f7f5 fe91 	bl	5f8 <memcpy>
		memcpy(&pdu->adv_ind.data[0], data, len);
    a8d6:	4632      	mov	r2, r6
    a8d8:	4641      	mov	r1, r8
    a8da:	f107 0008 	add.w	r0, r7, #8
		pdu->len = BDADDR_SIZE + len;
    a8de:	3606      	adds	r6, #6
		memcpy(&pdu->adv_ind.data[0], data, len);
    a8e0:	f7f5 fe8a 	bl	5f8 <memcpy>
		pdu->len = BDADDR_SIZE + len;
    a8e4:	707e      	strb	r6, [r7, #1]
		
		/* commit the update so controller picks it. */
		radio_adv_data->last = last;
    a8e6:	f884 5203 	strb.w	r5, [r4, #515]	; 0x203
    a8ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a8ee:	bf00      	nop
    a8f0:	20001644 	.word	0x20001644

0000a8f4 <ll_scan_data_set>:
	
//#endif	/* CONFIG_BT_CTLR_ADV_EXT */
}

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
    a8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a8f8:	4606      	mov	r6, r0
    a8fa:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
    a8fc:	f7ff f878 	bl	99f0 <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
    a900:	f890 3203 	ldrb.w	r3, [r0, #515]	; 0x203
    a904:	f890 2202 	ldrb.w	r2, [r0, #514]	; 0x202
    a908:	429a      	cmp	r2, r3
	radio_scan_data = radio_scan_data_get();
    a90a:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
    a90c:	d131      	bne.n	a972 <ll_scan_data_set+0x7e>
		last = radio_scan_data->last + 1;
    a90e:	1c5d      	adds	r5, r3, #1
    a910:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
    a912:	2d02      	cmp	r5, #2
			last = 0;
    a914:	bf08      	it	eq
    a916:	2500      	moveq	r5, #0
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    a918:	eb05 2205 	add.w	r2, r5, r5, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    a91c:	f04f 0e04 	mov.w	lr, #4
    a920:	5ca0      	ldrb	r0, [r4, r2]
    a922:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
    a926:	f000 00ef 	and.w	r0, r0, #239	; 0xef
    a92a:	f36f 1045 	bfc	r0, #5, #1
    a92e:	54a0      	strb	r0, [r4, r2]
	prev = (struct pdu_adv *)
    a930:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    a934:	18e1      	adds	r1, r4, r3
	pdu->tx_addr = prev->tx_addr;
    a936:	5ce0      	ldrb	r0, [r4, r3]
    a938:	5ca3      	ldrb	r3, [r4, r2]
    a93a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    a93e:	f360 1386 	bfi	r3, r0, #6, #1
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    a942:	eb04 0802 	add.w	r8, r4, r2
	pdu->rx_addr = 0;
    a946:	f36f 13c7 	bfc	r3, #7, #1
    a94a:	54a3      	strb	r3, [r4, r2]
	pdu->len = BDADDR_SIZE + len;
    a94c:	1db3      	adds	r3, r6, #6
    a94e:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    a952:	2206      	movs	r2, #6
    a954:	3102      	adds	r1, #2
    a956:	f108 0002 	add.w	r0, r8, #2
    a95a:	f7f5 fe4d 	bl	5f8 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    a95e:	4632      	mov	r2, r6
    a960:	4639      	mov	r1, r7
    a962:	f108 0008 	add.w	r0, r8, #8
    a966:	f7f5 fe47 	bl	5f8 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
    a96a:	f884 5203 	strb.w	r5, [r4, #515]	; 0x203
    a96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a972:	461d      	mov	r5, r3
    a974:	e7d0      	b.n	a918 <ll_scan_data_set+0x24>
	...

0000a978 <ll_adv_enable>:
}

u32_t ll_adv_enable(u8_t enable)
{
    a978:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	//struct pdu_adv *aux_pdu_adv;
	u32_t status;

	if (!enable) {
    a97c:	b920      	cbnz	r0, a988 <ll_adv_enable+0x10>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
    a97e:	b003      	add	sp, #12
    a980:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return radio_adv_disable();
    a984:	f7ff bad6 	b.w	9f34 <radio_adv_disable>
	} else if (ll_adv_is_enabled()) {
    a988:	f7ff f836 	bl	99f8 <ll_adv_is_enabled>
    a98c:	4607      	mov	r7, r0
    a98e:	2800      	cmp	r0, #0
    a990:	d14a      	bne.n	aa28 <ll_adv_enable+0xb0>
	radio_adv_data = radio_adv_data_get();
    a992:	f7ff f825 	bl	99e0 <radio_adv_data_get>
    a996:	4680      	mov	r8, r0
	radio_scan_data = radio_scan_data_get();
    a998:	f7ff f82a 	bl	99f0 <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    a99c:	f898 4203 	ldrb.w	r4, [r8, #515]	; 0x203
    a9a0:	eb04 2404 	add.w	r4, r4, r4, lsl #8
	radio_scan_data = radio_scan_data_get();
    a9a4:	4605      	mov	r5, r0
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    a9a6:	f818 0004 	ldrb.w	r0, [r8, r4]
    a9aa:	f000 030f 	and.w	r3, r0, #15
    a9ae:	2b07      	cmp	r3, #7
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    a9b0:	eb08 0904 	add.w	r9, r8, r4
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    a9b4:	d11d      	bne.n	a9f2 <ll_adv_enable+0x7a>
		if (h->adv_addr) {
    a9b6:	f899 3003 	ldrb.w	r3, [r9, #3]
    a9ba:	07db      	lsls	r3, r3, #31
    a9bc:	d50a      	bpl.n	a9d4 <ll_adv_enable+0x5c>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
    a9be:	4639      	mov	r1, r7
    a9c0:	f3c0 1080 	ubfx	r0, r0, #6, #1
    a9c4:	f7f9 fcda 	bl	437c <ll_addr_get>
    a9c8:	2206      	movs	r2, #6
    a9ca:	4601      	mov	r1, r0
    a9cc:	f109 0004 	add.w	r0, r9, #4
			memcpy(&pdu_scan->scan_rsp.addr[0],
    a9d0:	f7f5 fe12 	bl	5f8 <memcpy>
				  ll_adv.chan_map, ll_adv.filter_policy,
    a9d4:	4b15      	ldr	r3, [pc, #84]	; (aa2c <ll_adv_enable+0xb4>)
    a9d6:	7818      	ldrb	r0, [r3, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    a9d8:	8859      	ldrh	r1, [r3, #2]
    a9da:	23ff      	movs	r3, #255	; 0xff
    a9dc:	9300      	str	r3, [sp, #0]
    a9de:	f000 0207 	and.w	r2, r0, #7
    a9e2:	f3c0 03c1 	ubfx	r3, r0, #3, #2
    a9e6:	0940      	lsrs	r0, r0, #5
    a9e8:	f7ff f922 	bl	9c30 <radio_adv_enable>
}
    a9ec:	b003      	add	sp, #12
    a9ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    a9f2:	4639      	mov	r1, r7
    a9f4:	f3c0 1080 	ubfx	r0, r0, #6, #1
			[radio_scan_data->last][0];
    a9f8:	f895 6203 	ldrb.w	r6, [r5, #515]	; 0x203
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    a9fc:	f7f9 fcbe 	bl	437c <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
    aa00:	2206      	movs	r2, #6
    aa02:	4601      	mov	r1, r0
    aa04:	f109 0002 	add.w	r0, r9, #2
    aa08:	f7f5 fdf6 	bl	5f8 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    aa0c:	f818 0004 	ldrb.w	r0, [r8, r4]
    aa10:	4639      	mov	r1, r7
    aa12:	f3c0 1080 	ubfx	r0, r0, #6, #1
    aa16:	f7f9 fcb1 	bl	437c <ll_addr_get>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    aa1a:	eb06 2606 	add.w	r6, r6, r6, lsl #8
    aa1e:	4435      	add	r5, r6
			memcpy(&pdu_scan->scan_rsp.addr[0],
    aa20:	4601      	mov	r1, r0
    aa22:	2206      	movs	r2, #6
    aa24:	1ca8      	adds	r0, r5, #2
    aa26:	e7d3      	b.n	a9d0 <ll_adv_enable+0x58>
		return 0;
    aa28:	2000      	movs	r0, #0
    aa2a:	e7df      	b.n	a9ec <ll_adv_enable+0x74>
    aa2c:	20001640 	.word	0x20001640

0000aa30 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
    aa30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    aa34:	4681      	mov	r9, r0
    aa36:	4688      	mov	r8, r1
    aa38:	4617      	mov	r7, r2
    aa3a:	461e      	mov	r6, r3
	if (ll_scan_is_enabled()) {
    aa3c:	f7fe fff0 	bl	9a20 <ll_scan_is_enabled>
    aa40:	b988      	cbnz	r0, aa66 <ll_scan_params_set+0x36>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
    aa42:	4d0a      	ldr	r5, [pc, #40]	; (aa6c <ll_scan_params_set+0x3c>)
    aa44:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
    aa46:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
    aa4a:	f369 0403 	bfi	r4, r9, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
    aa4e:	4622      	mov	r2, r4
    aa50:	f366 1205 	bfi	r2, r6, #4, #2
	ll_scan.filter_policy = filter_policy;
    aa54:	4613      	mov	r3, r2
    aa56:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
    aa5a:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
    aa5c:	f362 1387 	bfi	r3, r2, #6, #2
    aa60:	712b      	strb	r3, [r5, #4]

	return 0;
    aa62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    aa66:	200c      	movs	r0, #12
}
    aa68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    aa6c:	20001648 	.word	0x20001648

0000aa70 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
    aa70:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa72:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
    aa74:	b920      	cbnz	r0, aa80 <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
    aa76:	b005      	add	sp, #20
    aa78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
    aa7c:	f7ff bb5a 	b.w	a134 <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
    aa80:	f7fe ffce 	bl	9a20 <ll_scan_is_enabled>
    aa84:	4606      	mov	r6, r0
    aa86:	b9c8      	cbnz	r0, aabc <ll_scan_enable+0x4c>
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
    aa88:	4d0d      	ldr	r5, [pc, #52]	; (aac0 <ll_scan_enable+0x50>)
    aa8a:	792c      	ldrb	r4, [r5, #4]
    aa8c:	f004 070f 	and.w	r7, r4, #15
    aa90:	f3c4 1400 	ubfx	r4, r4, #4, #1
    aa94:	4601      	mov	r1, r0
    aa96:	4620      	mov	r0, r4
    aa98:	f7f9 fc70 	bl	437c <ll_addr_get>
    aa9c:	22ff      	movs	r2, #255	; 0xff
    aa9e:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
    aaa0:	792a      	ldrb	r2, [r5, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
    aaa2:	882b      	ldrh	r3, [r5, #0]
    aaa4:	9602      	str	r6, [sp, #8]
    aaa6:	0992      	lsrs	r2, r2, #6
    aaa8:	9201      	str	r2, [sp, #4]
    aaaa:	886a      	ldrh	r2, [r5, #2]
    aaac:	9200      	str	r2, [sp, #0]
    aaae:	4621      	mov	r1, r4
    aab0:	4602      	mov	r2, r0
    aab2:	4638      	mov	r0, r7
    aab4:	f7ff fa6c 	bl	9f90 <radio_scan_enable>
}
    aab8:	b005      	add	sp, #20
    aaba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
    aabc:	2000      	movs	r0, #0
    aabe:	e7fb      	b.n	aab8 <ll_scan_enable+0x48>
    aac0:	20001648 	.word	0x20001648

0000aac4 <ctrl_filter_get>:
	return rl[rl_idx].wl;
}
#endif

struct ll_filter *ctrl_filter_get(bool whitelist)
{
    aac4:	b507      	push	{r0, r1, r2, lr}
	if (whitelist) {
		return &wl_filter;
	}
	return &rl_filter;
#else
	LL_ASSERT(whitelist);
    aac6:	b970      	cbnz	r0, aae6 <ctrl_filter_get+0x22>
    aac8:	4b09      	ldr	r3, [pc, #36]	; (aaf0 <ctrl_filter_get+0x2c>)
    aaca:	9301      	str	r3, [sp, #4]
    aacc:	9300      	str	r3, [sp, #0]
    aace:	4a09      	ldr	r2, [pc, #36]	; (aaf4 <ctrl_filter_get+0x30>)
    aad0:	4b09      	ldr	r3, [pc, #36]	; (aaf8 <ctrl_filter_get+0x34>)
    aad2:	490a      	ldr	r1, [pc, #40]	; (aafc <ctrl_filter_get+0x38>)
    aad4:	480a      	ldr	r0, [pc, #40]	; (ab00 <ctrl_filter_get+0x3c>)
    aad6:	f7f6 fc95 	bl	1404 <printk>
    aada:	4040      	eors	r0, r0
    aadc:	f380 8811 	msr	BASEPRI, r0
    aae0:	f04f 0004 	mov.w	r0, #4
    aae4:	df02      	svc	2
	return &wl_filter;
#endif
}
    aae6:	4807      	ldr	r0, [pc, #28]	; (ab04 <ctrl_filter_get+0x40>)
    aae8:	b003      	add	sp, #12
    aaea:	f85d fb04 	ldr.w	pc, [sp], #4
    aaee:	bf00      	nop
    aaf0:	0000ceef 	.word	0x0000ceef
    aaf4:	0000d7a6 	.word	0x0000d7a6
    aaf8:	0000eeeb 	.word	0x0000eeeb
    aafc:	0000d71b 	.word	0x0000d71b
    ab00:	0000eefb 	.word	0x0000eefb
    ab04:	2000164e 	.word	0x2000164e

0000ab08 <ll_wl_size_get>:

u32_t ll_wl_size_get(void)
{
	return WL_SIZE;
}
    ab08:	2008      	movs	r0, #8
    ab0a:	4770      	bx	lr

0000ab0c <ll_wl_clear>:

u32_t ll_wl_clear(void)
{
    ab0c:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    ab0e:	f7fe ff7b 	bl	9a08 <radio_adv_filter_pol_get>
    ab12:	4604      	mov	r4, r0
    ab14:	b110      	cbz	r0, ab1c <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    ab16:	240c      	movs	r4, #12
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */
	wl_anon = 0;

	return 0;
}
    ab18:	4620      	mov	r0, r4
    ab1a:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    ab1c:	f7fe ff96 	bl	9a4c <radio_scan_filter_pol_get>
    ab20:	07c3      	lsls	r3, r0, #31
    ab22:	d4f8      	bmi.n	ab16 <ll_wl_clear+0xa>
	filter->enable_bitmask = 0;
    ab24:	4b02      	ldr	r3, [pc, #8]	; (ab30 <ll_wl_clear+0x24>)
    ab26:	701c      	strb	r4, [r3, #0]
	filter->addr_type_bitmask = 0;
    ab28:	705c      	strb	r4, [r3, #1]
	wl_anon = 0;
    ab2a:	4b02      	ldr	r3, [pc, #8]	; (ab34 <ll_wl_clear+0x28>)
    ab2c:	701c      	strb	r4, [r3, #0]
	return 0;
    ab2e:	e7f3      	b.n	ab18 <ll_wl_clear+0xc>
    ab30:	2000164e 	.word	0x2000164e
    ab34:	20001bcc 	.word	0x20001bcc

0000ab38 <ll_wl_add>:

u32_t ll_wl_add(bt_addr_le_t *addr)
{
    ab38:	b570      	push	{r4, r5, r6, lr}
    ab3a:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    ab3c:	f7fe ff64 	bl	9a08 <radio_adv_filter_pol_get>
    ab40:	4605      	mov	r5, r0
    ab42:	b110      	cbz	r0, ab4a <ll_wl_add+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
    ab44:	250c      	movs	r5, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_add(addr);
#else
	return filter_add(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    ab46:	4628      	mov	r0, r5
    ab48:	bd70      	pop	{r4, r5, r6, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    ab4a:	f7fe ff7f 	bl	9a4c <radio_scan_filter_pol_get>
    ab4e:	07c3      	lsls	r3, r0, #31
    ab50:	d4f8      	bmi.n	ab44 <ll_wl_add+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    ab52:	7823      	ldrb	r3, [r4, #0]
    ab54:	2bff      	cmp	r3, #255	; 0xff
    ab56:	d103      	bne.n	ab60 <ll_wl_add+0x28>
		wl_anon = 1;
    ab58:	4b11      	ldr	r3, [pc, #68]	; (aba0 <ll_wl_add+0x68>)
    ab5a:	2201      	movs	r2, #1
    ab5c:	701a      	strb	r2, [r3, #0]
		return 0;
    ab5e:	e7f2      	b.n	ab46 <ll_wl_add+0xe>
	if (filter->enable_bitmask == 0xFF) {
    ab60:	4910      	ldr	r1, [pc, #64]	; (aba4 <ll_wl_add+0x6c>)
    ab62:	780a      	ldrb	r2, [r1, #0]
    ab64:	2aff      	cmp	r2, #255	; 0xff
    ab66:	d018      	beq.n	ab9a <ll_wl_add+0x62>
    ab68:	4628      	mov	r0, r5
	     (filter->enable_bitmask & BIT(index));
    ab6a:	fa22 f600 	lsr.w	r6, r2, r0
	for (index = 0;
    ab6e:	07f6      	lsls	r6, r6, #31
    ab70:	d411      	bmi.n	ab96 <ll_wl_add+0x5e>
	filter->enable_bitmask |= BIT(index);
    ab72:	2601      	movs	r6, #1
    ab74:	4086      	lsls	r6, r0
    ab76:	4332      	orrs	r2, r6
    ab78:	700a      	strb	r2, [r1, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    ab7a:	f003 0301 	and.w	r3, r3, #1
    ab7e:	784a      	ldrb	r2, [r1, #1]
    ab80:	4083      	lsls	r3, r0
    ab82:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    ab84:	2206      	movs	r2, #6
    ab86:	fb02 1000 	mla	r0, r2, r0, r1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    ab8a:	704b      	strb	r3, [r1, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    ab8c:	3002      	adds	r0, #2
    ab8e:	1c61      	adds	r1, r4, #1
    ab90:	f7f5 fd32 	bl	5f8 <memcpy>
    ab94:	e7d7      	b.n	ab46 <ll_wl_add+0xe>
	     index++) {
    ab96:	3001      	adds	r0, #1
    ab98:	e7e7      	b.n	ab6a <ll_wl_add+0x32>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    ab9a:	2507      	movs	r5, #7
    ab9c:	e7d3      	b.n	ab46 <ll_wl_add+0xe>
    ab9e:	bf00      	nop
    aba0:	20001bcc 	.word	0x20001bcc
    aba4:	2000164e 	.word	0x2000164e

0000aba8 <ll_wl_remove>:

u32_t ll_wl_remove(bt_addr_le_t *addr)
{
    aba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    abac:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    abae:	f7fe ff2b 	bl	9a08 <radio_adv_filter_pol_get>
    abb2:	4606      	mov	r6, r0
    abb4:	b118      	cbz	r0, abbe <ll_wl_remove+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
    abb6:	260c      	movs	r6, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_remove(addr);
#else
	return filter_remove(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    abb8:	4630      	mov	r0, r6
    abba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    abbe:	f7fe ff45 	bl	9a4c <radio_scan_filter_pol_get>
    abc2:	07c1      	lsls	r1, r0, #31
    abc4:	d4f7      	bmi.n	abb6 <ll_wl_remove+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
    abc6:	f897 8000 	ldrb.w	r8, [r7]
    abca:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    abce:	d102      	bne.n	abd6 <ll_wl_remove+0x2e>
		wl_anon = 0;
    abd0:	4b16      	ldr	r3, [pc, #88]	; (ac2c <ll_wl_remove+0x84>)
    abd2:	701e      	strb	r6, [r3, #0]
		return 0;
    abd4:	e7f0      	b.n	abb8 <ll_wl_remove+0x10>
	if (!filter->enable_bitmask) {
    abd6:	4c16      	ldr	r4, [pc, #88]	; (ac30 <ll_wl_remove+0x88>)
    abd8:	7823      	ldrb	r3, [r4, #0]
    abda:	b133      	cbz	r3, abea <ll_wl_remove+0x42>
    abdc:	2508      	movs	r5, #8
	return filter_remove(&wl_filter, addr->type, addr->a.val);
    abde:	3701      	adds	r7, #1
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    abe0:	f04f 0906 	mov.w	r9, #6
	while (index--) {
    abe4:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    abe8:	d201      	bcs.n	abee <ll_wl_remove+0x46>
		return BT_HCI_ERR_INVALID_PARAM;
    abea:	2612      	movs	r6, #18
    abec:	e7e4      	b.n	abb8 <ll_wl_remove+0x10>
		if ((filter->enable_bitmask & BIT(index)) &&
    abee:	7823      	ldrb	r3, [r4, #0]
    abf0:	40eb      	lsrs	r3, r5
    abf2:	07da      	lsls	r2, r3, #31
    abf4:	d5f6      	bpl.n	abe4 <ll_wl_remove+0x3c>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
    abf6:	7863      	ldrb	r3, [r4, #1]
    abf8:	412b      	asrs	r3, r5
    abfa:	ea83 0308 	eor.w	r3, r3, r8
		if ((filter->enable_bitmask & BIT(index)) &&
    abfe:	07db      	lsls	r3, r3, #31
    ac00:	d4f0      	bmi.n	abe4 <ll_wl_remove+0x3c>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    ac02:	fb09 4005 	mla	r0, r9, r5, r4
    ac06:	2206      	movs	r2, #6
    ac08:	4639      	mov	r1, r7
    ac0a:	3002      	adds	r0, #2
    ac0c:	f7f5 fcdf 	bl	5ce <memcmp>
		     (addr_type & 0x01)) &&
    ac10:	2800      	cmp	r0, #0
    ac12:	d1e7      	bne.n	abe4 <ll_wl_remove+0x3c>
			filter->enable_bitmask &= ~BIT(index);
    ac14:	2301      	movs	r3, #1
    ac16:	40ab      	lsls	r3, r5
    ac18:	7822      	ldrb	r2, [r4, #0]
    ac1a:	43db      	mvns	r3, r3
    ac1c:	b2db      	uxtb	r3, r3
    ac1e:	401a      	ands	r2, r3
    ac20:	7022      	strb	r2, [r4, #0]
			filter->addr_type_bitmask &= ~BIT(index);
    ac22:	7862      	ldrb	r2, [r4, #1]
    ac24:	4013      	ands	r3, r2
    ac26:	7063      	strb	r3, [r4, #1]
    ac28:	e7c6      	b.n	abb8 <ll_wl_remove+0x10>
    ac2a:	bf00      	nop
    ac2c:	20001bcc 	.word	0x20001bcc
    ac30:	2000164e 	.word	0x2000164e

0000ac34 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
    ac34:	4a03      	ldr	r2, [pc, #12]	; (ac44 <ll_filter_reset+0x10>)
    ac36:	2300      	movs	r3, #0
    ac38:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0;
    ac3a:	4a03      	ldr	r2, [pc, #12]	; (ac48 <ll_filter_reset+0x14>)
    ac3c:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
    ac3e:	7053      	strb	r3, [r2, #1]
    ac40:	4770      	bx	lr
    ac42:	bf00      	nop
    ac44:	20001bcc 	.word	0x20001bcc
    ac48:	2000164e 	.word	0x2000164e

0000ac4c <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    ac4c:	4b05      	ldr	r3, [pc, #20]	; (ac64 <cntr_init+0x18>)
    ac4e:	2200      	movs	r2, #0
    ac50:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    ac54:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    ac58:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    ac5c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    ac60:	4770      	bx	lr
    ac62:	bf00      	nop
    ac64:	4000b000 	.word	0x4000b000

0000ac68 <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
    ac68:	4a04      	ldr	r2, [pc, #16]	; (ac7c <cntr_start+0x14>)
    ac6a:	7813      	ldrb	r3, [r2, #0]
    ac6c:	1c59      	adds	r1, r3, #1
    ac6e:	7011      	strb	r1, [r2, #0]
    ac70:	2001      	movs	r0, #1
    ac72:	b913      	cbnz	r3, ac7a <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    ac74:	4a02      	ldr	r2, [pc, #8]	; (ac80 <cntr_start+0x18>)
    ac76:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    ac78:	4618      	mov	r0, r3
}
    ac7a:	4770      	bx	lr
    ac7c:	20001680 	.word	0x20001680
    ac80:	4000b000 	.word	0x4000b000

0000ac84 <cntr_stop>:

u32_t cntr_stop(void)
{
    ac84:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(_refcount);
    ac86:	4b0f      	ldr	r3, [pc, #60]	; (acc4 <cntr_stop+0x40>)
    ac88:	7818      	ldrb	r0, [r3, #0]
    ac8a:	b970      	cbnz	r0, acaa <cntr_stop+0x26>
    ac8c:	4b0e      	ldr	r3, [pc, #56]	; (acc8 <cntr_stop+0x44>)
    ac8e:	9301      	str	r3, [sp, #4]
    ac90:	9300      	str	r3, [sp, #0]
    ac92:	4a0e      	ldr	r2, [pc, #56]	; (accc <cntr_stop+0x48>)
    ac94:	4b0e      	ldr	r3, [pc, #56]	; (acd0 <cntr_stop+0x4c>)
    ac96:	490f      	ldr	r1, [pc, #60]	; (acd4 <cntr_stop+0x50>)
    ac98:	480f      	ldr	r0, [pc, #60]	; (acd8 <cntr_stop+0x54>)
    ac9a:	f7f6 fbb3 	bl	1404 <printk>
    ac9e:	4040      	eors	r0, r0
    aca0:	f380 8811 	msr	BASEPRI, r0
    aca4:	f04f 0004 	mov.w	r0, #4
    aca8:	df02      	svc	2

	if (--_refcount) {
    acaa:	3801      	subs	r0, #1
    acac:	b2c0      	uxtb	r0, r0
    acae:	7018      	strb	r0, [r3, #0]
    acb0:	2301      	movs	r3, #1
    acb2:	b920      	cbnz	r0, acbe <cntr_stop+0x3a>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    acb4:	4a09      	ldr	r2, [pc, #36]	; (acdc <cntr_stop+0x58>)
    acb6:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
}
    acb8:	b003      	add	sp, #12
    acba:	f85d fb04 	ldr.w	pc, [sp], #4
		return 1;
    acbe:	4618      	mov	r0, r3
    acc0:	e7fa      	b.n	acb8 <cntr_stop+0x34>
    acc2:	bf00      	nop
    acc4:	20001680 	.word	0x20001680
    acc8:	0000ceef 	.word	0x0000ceef
    accc:	0000d7a6 	.word	0x0000d7a6
    acd0:	0000ef26 	.word	0x0000ef26
    acd4:	0000d71b 	.word	0x0000d71b
    acd8:	0000ef30 	.word	0x0000ef30
    acdc:	4000b000 	.word	0x4000b000

0000ace0 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    ace0:	4b01      	ldr	r3, [pc, #4]	; (ace8 <cntr_cnt_get+0x8>)
    ace2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    ace6:	4770      	bx	lr
    ace8:	4000b000 	.word	0x4000b000

0000acec <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    acec:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    acf0:	4b01      	ldr	r3, [pc, #4]	; (acf8 <cntr_cmp_set+0xc>)
    acf2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    acf6:	4770      	bx	lr
    acf8:	4000b000 	.word	0x4000b000

0000acfc <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    acfc:	4b11      	ldr	r3, [pc, #68]	; (ad44 <do_ecb+0x48>)
{
    acfe:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
    ad00:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
    ad02:	2500      	movs	r5, #0
    ad04:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
    ad06:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    ad08:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    ad0c:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    ad10:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    ad14:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    ad16:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
    ad1a:	b934      	cbnz	r4, ad2a <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    ad1c:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    ad20:	b91c      	cbnz	r4, ad2a <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    ad22:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    ad26:	2c00      	cmp	r4, #0
    ad28:	d1f5      	bne.n	ad16 <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
    ad2a:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    ad2c:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
    ad30:	2c00      	cmp	r4, #0
    ad32:	d1e8      	bne.n	ad06 <do_ecb+0xa>
    ad34:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
    ad38:	2e00      	cmp	r6, #0
    ad3a:	d0e4      	beq.n	ad06 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
    ad3c:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
    ad40:	bd70      	pop	{r4, r5, r6, pc}
    ad42:	bf00      	nop
    ad44:	4000e000 	.word	0x4000e000

0000ad48 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    ad48:	b570      	push	{r4, r5, r6, lr}
    ad4a:	b08c      	sub	sp, #48	; 0x30
    ad4c:	460e      	mov	r6, r1
    ad4e:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    ad50:	4601      	mov	r1, r0
    ad52:	2210      	movs	r2, #16
    ad54:	4668      	mov	r0, sp
{
    ad56:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    ad58:	f7f8 fb5c 	bl	3414 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    ad5c:	2210      	movs	r2, #16
    ad5e:	eb0d 0002 	add.w	r0, sp, r2
    ad62:	4631      	mov	r1, r6
    ad64:	f7f8 fb56 	bl	3414 <mem_rcopy>

	do_ecb(&ecb);
    ad68:	4668      	mov	r0, sp
    ad6a:	f7ff ffc7 	bl	acfc <do_ecb>

	if (cipher_text_le) {
    ad6e:	b125      	cbz	r5, ad7a <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    ad70:	2210      	movs	r2, #16
    ad72:	a908      	add	r1, sp, #32
    ad74:	4628      	mov	r0, r5
    ad76:	f7f8 fb4d 	bl	3414 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    ad7a:	b124      	cbz	r4, ad86 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    ad7c:	2210      	movs	r2, #16
    ad7e:	a908      	add	r1, sp, #32
    ad80:	4620      	mov	r0, r4
    ad82:	f7f5 fc39 	bl	5f8 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    ad86:	b00c      	add	sp, #48	; 0x30
    ad88:	bd70      	pop	{r4, r5, r6, pc}
	...

0000ad8c <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
    ad8c:	4b07      	ldr	r3, [pc, #28]	; (adac <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
    ad8e:	4a08      	ldr	r2, [pc, #32]	; (adb0 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
    ad90:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
    ad94:	4907      	ldr	r1, [pc, #28]	; (adb4 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
    ad96:	4a08      	ldr	r2, [pc, #32]	; (adb8 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
    ad98:	2800      	cmp	r0, #0
    ad9a:	bf14      	ite	ne
    ad9c:	4610      	movne	r0, r2
    ad9e:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    ada0:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
    ada2:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    ada6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    adaa:	4770      	bx	lr
    adac:	4001f000 	.word	0x4001f000
    adb0:	40008140 	.word	0x40008140
    adb4:	40001004 	.word	0x40001004
    adb8:	40001000 	.word	0x40001000

0000adbc <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
    adbc:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    adbe:	4e2c      	ldr	r6, [pc, #176]	; (ae70 <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    adc0:	4f2c      	ldr	r7, [pc, #176]	; (ae74 <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    adc2:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    adc4:	4b2c      	ldr	r3, [pc, #176]	; (ae78 <sw_switch.isra.9+0xbc>)
    adc6:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
    adca:	b22b      	sxth	r3, r5
    adcc:	00dc      	lsls	r4, r3, #3
    adce:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    add2:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
    add6:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    adda:	f105 040b 	add.w	r4, r5, #11
    adde:	b2e4      	uxtb	r4, r4
    ade0:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
    ade2:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
    ade6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    adea:	3fc0      	subs	r7, #192	; 0xc0
    adec:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    adf0:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
    adf4:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
    adf8:	2800      	cmp	r0, #0
    adfa:	d034      	beq.n	ae66 <sw_switch.isra.9+0xaa>
static inline u32_t hal_radio_tx_ready_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
    adfc:	f649 77c4 	movw	r7, #40900	; 0x9fc4
    ae00:	f649 4040 	movw	r0, #40000	; 0x9c40
    ae04:	2a02      	cmp	r2, #2
    ae06:	bf0c      	ite	eq
    ae08:	4602      	moveq	r2, r0
    ae0a:	463a      	movne	r2, r7
static inline u32_t hal_radio_rx_chain_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
    ae0c:	f242 47b8 	movw	r7, #9400	; 0x24b8
    ae10:	f241 3088 	movw	r0, #5000	; 0x1388
    ae14:	2902      	cmp	r1, #2
    ae16:	bf18      	it	ne
    ae18:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
    ae1a:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
    ae1e:	4401      	add	r1, r0
    ae20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ae24:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    ae28:	4a14      	ldr	r2, [pc, #80]	; (ae7c <sw_switch.isra.9+0xc0>)
    ae2a:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    ae2e:	009b      	lsls	r3, r3, #2
    ae30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ae34:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
    ae38:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
    ae3c:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    ae3e:	bf8b      	itete	hi
    ae40:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
    ae44:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    ae46:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
    ae48:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
    ae4c:	bf88      	it	hi
    ae4e:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
    ae52:	4b08      	ldr	r3, [pc, #32]	; (ae74 <sw_switch.isra.9+0xb8>)
    ae54:	f44f 6290 	mov.w	r2, #1152	; 0x480
    ae58:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
    ae5c:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
    ae5e:	f003 0301 	and.w	r3, r3, #1
    ae62:	7033      	strb	r3, [r6, #0]
    ae64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    ae66:	4a06      	ldr	r2, [pc, #24]	; (ae80 <sw_switch.isra.9+0xc4>)
    ae68:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
    ae6c:	212c      	movs	r1, #44	; 0x2c
    ae6e:	e7de      	b.n	ae2e <sw_switch.isra.9+0x72>
    ae70:	200018a0 	.word	0x200018a0
    ae74:	4001f000 	.word	0x4001f000
    ae78:	4000110c 	.word	0x4000110c
    ae7c:	40001000 	.word	0x40001000
    ae80:	40001004 	.word	0x40001004

0000ae84 <isr_radio>:
	if (sfp_radio_isr) {
    ae84:	4b02      	ldr	r3, [pc, #8]	; (ae90 <isr_radio+0xc>)
    ae86:	681b      	ldr	r3, [r3, #0]
    ae88:	b103      	cbz	r3, ae8c <isr_radio+0x8>
		sfp_radio_isr();
    ae8a:	4718      	bx	r3
    ae8c:	4770      	bx	lr
    ae8e:	bf00      	nop
    ae90:	2000189c 	.word	0x2000189c

0000ae94 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    ae94:	4b06      	ldr	r3, [pc, #24]	; (aeb0 <radio_isr_set+0x1c>)
    ae96:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
    ae98:	4b06      	ldr	r3, [pc, #24]	; (aeb4 <radio_isr_set+0x20>)
    ae9a:	2210      	movs	r2, #16
    ae9c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    aea0:	4b05      	ldr	r3, [pc, #20]	; (aeb8 <radio_isr_set+0x24>)
    aea2:	2202      	movs	r2, #2
    aea4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
    aea8:	2001      	movs	r0, #1
    aeaa:	f7f5 bf51 	b.w	d50 <_arch_irq_enable>
    aeae:	bf00      	nop
    aeb0:	2000189c 	.word	0x2000189c
    aeb4:	40001000 	.word	0x40001000
    aeb8:	e000e100 	.word	0xe000e100

0000aebc <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    aebc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    aec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    aec4:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    aec6:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    aeca:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    aece:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    aed2:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    aed6:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    aeda:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    aede:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    aee2:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    aee6:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    aeea:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    aeee:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    aef2:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    aef6:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    aefa:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
    aefe:	4770      	bx	lr

0000af00 <radio_reset>:
{
    af00:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    af02:	2001      	movs	r0, #1
    af04:	f7f5 ff34 	bl	d70 <_arch_irq_disable>
	NRF_RADIO->POWER =
    af08:	4b08      	ldr	r3, [pc, #32]	; (af2c <radio_reset+0x2c>)
    af0a:	2200      	movs	r2, #0
    af0c:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
    af10:	2201      	movs	r2, #1
    af12:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    af16:	4a06      	ldr	r2, [pc, #24]	; (af30 <radio_reset+0x30>)
    af18:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
    af1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    af1e:	f023 0301 	bic.w	r3, r3, #1
    af22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    af26:	6013      	str	r3, [r2, #0]
    af28:	bd08      	pop	{r3, pc}
    af2a:	bf00      	nop
    af2c:	40001000 	.word	0x40001000
    af30:	40001774 	.word	0x40001774

0000af34 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    af34:	4b06      	ldr	r3, [pc, #24]	; (af50 <radio_phy_set+0x1c>)
	switch (phy) {
    af36:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    af38:	bf0c      	ite	eq
    af3a:	2204      	moveq	r2, #4
    af3c:	2203      	movne	r2, #3
    af3e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
    af42:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
    af46:	f042 0201 	orr.w	r2, r2, #1
    af4a:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
    af4e:	4770      	bx	lr
    af50:	40001000 	.word	0x40001000

0000af54 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
    af54:	4b01      	ldr	r3, [pc, #4]	; (af5c <radio_tx_power_set+0x8>)
    af56:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    af5a:	4770      	bx	lr
    af5c:	40001000 	.word	0x40001000

0000af60 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
    af60:	4b01      	ldr	r3, [pc, #4]	; (af68 <radio_freq_chan_set+0x8>)
    af62:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    af66:	4770      	bx	lr
    af68:	40001000 	.word	0x40001000

0000af6c <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
    af6c:	4b07      	ldr	r3, [pc, #28]	; (af8c <radio_whiten_iv_set+0x20>)
    af6e:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    af72:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    af76:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    af7a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    af7e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    af82:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    af86:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    af8a:	4770      	bx	lr
    af8c:	40001000 	.word	0x40001000

0000af90 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
    af90:	4a0a      	ldr	r2, [pc, #40]	; (afbc <radio_aa_set+0x2c>)
    af92:	2300      	movs	r3, #0
    af94:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
    af98:	2301      	movs	r3, #1
    af9a:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
    af9e:	78c3      	ldrb	r3, [r0, #3]
    afa0:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    afa4:	7843      	ldrb	r3, [r0, #1]
    afa6:	7881      	ldrb	r1, [r0, #2]
    afa8:	041b      	lsls	r3, r3, #16
    afaa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    afae:	7801      	ldrb	r1, [r0, #0]
    afb0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    afb4:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    afb8:	4770      	bx	lr
    afba:	bf00      	nop
    afbc:	40001000 	.word	0x40001000

0000afc0 <radio_pkt_configure>:
	switch (phy) {
    afc0:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    afc4:	2b02      	cmp	r3, #2
{
    afc6:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    afc8:	bf0c      	ite	eq
    afca:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
    afce:	2400      	movne	r4, #0
	if (dc) {
    afd0:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    afd2:	f1c0 0308 	rsb	r3, r0, #8
    afd6:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    afda:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
    afde:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    afe2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    afe6:	4a0b      	ldr	r2, [pc, #44]	; (b014 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
    afe8:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    afec:	bf48      	it	mi
    afee:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
    aff2:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    aff4:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    aff8:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    affc:	4b06      	ldr	r3, [pc, #24]	; (b018 <radio_pkt_configure+0x58>)
    affe:	4003      	ands	r3, r0
    b000:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    b004:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    b008:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    b00c:	4319      	orrs	r1, r3
    b00e:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    b012:	bd10      	pop	{r4, pc}
    b014:	40001000 	.word	0x40001000
    b018:	fef80000 	.word	0xfef80000

0000b01c <radio_pkt_rx_set>:
    b01c:	4b01      	ldr	r3, [pc, #4]	; (b024 <radio_pkt_rx_set+0x8>)
    b01e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    b022:	4770      	bx	lr
    b024:	40001000 	.word	0x40001000

0000b028 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    b028:	4b01      	ldr	r3, [pc, #4]	; (b030 <radio_pkt_tx_set+0x8>)
    b02a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    b02e:	4770      	bx	lr
    b030:	40001000 	.word	0x40001000

0000b034 <radio_tx_ready_delay_get>:
	switch (phy) {
    b034:	2802      	cmp	r0, #2
}
    b036:	bf0c      	ite	eq
    b038:	2028      	moveq	r0, #40	; 0x28
    b03a:	2029      	movne	r0, #41	; 0x29
    b03c:	4770      	bx	lr

0000b03e <radio_tx_chain_delay_get>:
}
    b03e:	2001      	movs	r0, #1
    b040:	4770      	bx	lr

0000b042 <radio_rx_ready_delay_get>:
}
    b042:	2029      	movs	r0, #41	; 0x29
    b044:	4770      	bx	lr

0000b046 <radio_rx_chain_delay_get>:
	switch (phy) {
    b046:	2802      	cmp	r0, #2
}
    b048:	bf0c      	ite	eq
    b04a:	2005      	moveq	r0, #5
    b04c:	200a      	movne	r0, #10
    b04e:	4770      	bx	lr

0000b050 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
    b050:	4b01      	ldr	r3, [pc, #4]	; (b058 <radio_rx_enable+0x8>)
    b052:	2201      	movs	r2, #1
    b054:	605a      	str	r2, [r3, #4]
    b056:	4770      	bx	lr
    b058:	40001000 	.word	0x40001000

0000b05c <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
    b05c:	4b01      	ldr	r3, [pc, #4]	; (b064 <radio_tx_enable+0x8>)
    b05e:	2201      	movs	r2, #1
    b060:	601a      	str	r2, [r3, #0]
    b062:	4770      	bx	lr
    b064:	40001000 	.word	0x40001000

0000b068 <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    b068:	4a07      	ldr	r2, [pc, #28]	; (b088 <radio_disable+0x20>)
    b06a:	f44f 6390 	mov.w	r3, #1152	; 0x480
    b06e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
    b072:	2301      	movs	r3, #1
    b074:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
    b076:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
    b078:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
    b07c:	2100      	movs	r1, #0
    b07e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
    b082:	6113      	str	r3, [r2, #16]
    b084:	4770      	bx	lr
    b086:	bf00      	nop
    b088:	4001f000 	.word	0x4001f000

0000b08c <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
    b08c:	4b04      	ldr	r3, [pc, #16]	; (b0a0 <radio_status_reset+0x14>)
    b08e:	2200      	movs	r2, #0
    b090:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
    b094:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    b098:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    b09c:	4770      	bx	lr
    b09e:	bf00      	nop
    b0a0:	40001000 	.word	0x40001000

0000b0a4 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
    b0a4:	4b03      	ldr	r3, [pc, #12]	; (b0b4 <radio_is_ready+0x10>)
    b0a6:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    b0aa:	3000      	adds	r0, #0
    b0ac:	bf18      	it	ne
    b0ae:	2001      	movne	r0, #1
    b0b0:	4770      	bx	lr
    b0b2:	bf00      	nop
    b0b4:	40001000 	.word	0x40001000

0000b0b8 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
    b0b8:	4b03      	ldr	r3, [pc, #12]	; (b0c8 <radio_is_done+0x10>)
    b0ba:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    b0be:	3000      	adds	r0, #0
    b0c0:	bf18      	it	ne
    b0c2:	2001      	movne	r0, #1
    b0c4:	4770      	bx	lr
    b0c6:	bf00      	nop
    b0c8:	40001000 	.word	0x40001000

0000b0cc <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
    b0cc:	4b03      	ldr	r3, [pc, #12]	; (b0dc <radio_is_idle+0x10>)
    b0ce:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    b0d2:	fab0 f080 	clz	r0, r0
    b0d6:	0940      	lsrs	r0, r0, #5
    b0d8:	4770      	bx	lr
    b0da:	bf00      	nop
    b0dc:	40001000 	.word	0x40001000

0000b0e0 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
    b0e0:	4b04      	ldr	r3, [pc, #16]	; (b0f4 <radio_crc_configure+0x14>)
    b0e2:	f240 1203 	movw	r2, #259	; 0x103
    b0e6:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
    b0ea:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    b0ee:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
    b0f2:	4770      	bx	lr
    b0f4:	40001000 	.word	0x40001000

0000b0f8 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
    b0f8:	4b03      	ldr	r3, [pc, #12]	; (b108 <radio_crc_is_valid+0x10>)
    b0fa:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    b0fe:	3000      	adds	r0, #0
    b100:	bf18      	it	ne
    b102:	2001      	movne	r0, #1
    b104:	4770      	bx	lr
    b106:	bf00      	nop
    b108:	40001000 	.word	0x40001000

0000b10c <radio_pkt_empty_get>:
}
    b10c:	4800      	ldr	r0, [pc, #0]	; (b110 <radio_pkt_empty_get+0x4>)
    b10e:	4770      	bx	lr
    b110:	20001790 	.word	0x20001790

0000b114 <radio_pkt_scratch_get>:
}
    b114:	4800      	ldr	r0, [pc, #0]	; (b118 <radio_pkt_scratch_get+0x4>)
    b116:	4770      	bx	lr
    b118:	20001794 	.word	0x20001794

0000b11c <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    b11c:	4b04      	ldr	r3, [pc, #16]	; (b130 <radio_switch_complete_and_rx+0x14>)
    b11e:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
    b120:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    b122:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
    b126:	4602      	mov	r2, r0
    b128:	4608      	mov	r0, r1
    b12a:	f7ff be47 	b.w	adbc <sw_switch.isra.9>
    b12e:	bf00      	nop
    b130:	40001000 	.word	0x40001000

0000b134 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    b134:	4b03      	ldr	r3, [pc, #12]	; (b144 <radio_switch_complete_and_tx+0x10>)
    b136:	2103      	movs	r1, #3
    b138:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
    b13c:	4601      	mov	r1, r0
    b13e:	2001      	movs	r0, #1
    b140:	f7ff be3c 	b.w	adbc <sw_switch.isra.9>
    b144:	40001000 	.word	0x40001000

0000b148 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    b148:	4b05      	ldr	r3, [pc, #20]	; (b160 <radio_switch_complete_and_disable+0x18>)
    b14a:	2203      	movs	r2, #3
    b14c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    b150:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
    b154:	f44f 6290 	mov.w	r2, #1152	; 0x480
    b158:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    b15c:	4770      	bx	lr
    b15e:	bf00      	nop
    b160:	40001000 	.word	0x40001000

0000b164 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    b164:	4a03      	ldr	r2, [pc, #12]	; (b174 <radio_rssi_measure+0x10>)
    b166:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    b16a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    b16e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    b172:	4770      	bx	lr
    b174:	40001000 	.word	0x40001000

0000b178 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    b178:	4b01      	ldr	r3, [pc, #4]	; (b180 <radio_rssi_get+0x8>)
    b17a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    b17e:	4770      	bx	lr
    b180:	40001000 	.word	0x40001000

0000b184 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    b184:	4b02      	ldr	r3, [pc, #8]	; (b190 <radio_rssi_status_reset+0xc>)
    b186:	2200      	movs	r2, #0
    b188:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    b18c:	4770      	bx	lr
    b18e:	bf00      	nop
    b190:	40001000 	.word	0x40001000

0000b194 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    b194:	4b03      	ldr	r3, [pc, #12]	; (b1a4 <radio_rssi_is_ready+0x10>)
    b196:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    b19a:	3000      	adds	r0, #0
    b19c:	bf18      	it	ne
    b19e:	2001      	movne	r0, #1
    b1a0:	4770      	bx	lr
    b1a2:	bf00      	nop
    b1a4:	40001000 	.word	0x40001000

0000b1a8 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    b1a8:	b530      	push	{r4, r5, lr}
    b1aa:	2400      	movs	r4, #0
    b1ac:	00a3      	lsls	r3, r4, #2
    b1ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b1b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    b1b6:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    b1b8:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
    b1bc:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    b1be:	8895      	ldrh	r5, [r2, #4]
    b1c0:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
    b1c4:	2c08      	cmp	r4, #8
		bdaddr += 6;
    b1c6:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
    b1ca:	d1ef      	bne.n	b1ac <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    b1cc:	4b02      	ldr	r3, [pc, #8]	; (b1d8 <radio_filter_configure+0x30>)
    b1ce:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    b1d2:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    b1d6:	bd30      	pop	{r4, r5, pc}
    b1d8:	40001000 	.word	0x40001000

0000b1dc <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    b1dc:	4a03      	ldr	r2, [pc, #12]	; (b1ec <radio_filter_disable+0x10>)
    b1de:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    b1e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    b1e6:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    b1ea:	4770      	bx	lr
    b1ec:	40001000 	.word	0x40001000

0000b1f0 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    b1f0:	4b02      	ldr	r3, [pc, #8]	; (b1fc <radio_filter_status_reset+0xc>)
    b1f2:	2200      	movs	r2, #0
    b1f4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    b1f8:	4770      	bx	lr
    b1fa:	bf00      	nop
    b1fc:	40001000 	.word	0x40001000

0000b200 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    b200:	4b03      	ldr	r3, [pc, #12]	; (b210 <radio_filter_has_match+0x10>)
    b202:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    b206:	3000      	adds	r0, #0
    b208:	bf18      	it	ne
    b20a:	2001      	movne	r0, #1
    b20c:	4770      	bx	lr
    b20e:	bf00      	nop
    b210:	40001000 	.word	0x40001000

0000b214 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    b214:	4b01      	ldr	r3, [pc, #4]	; (b21c <radio_filter_match_get+0x8>)
    b216:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    b21a:	4770      	bx	lr
    b21c:	40001000 	.word	0x40001000

0000b220 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    b220:	4b05      	ldr	r3, [pc, #20]	; (b238 <radio_tmr_status_reset+0x18>)
    b222:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    b226:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
    b22a:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    b22e:	227f      	movs	r2, #127	; 0x7f
    b230:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    b234:	4770      	bx	lr
    b236:	bf00      	nop
    b238:	4000b000 	.word	0x4000b000

0000b23c <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
    b23c:	4b03      	ldr	r3, [pc, #12]	; (b24c <radio_tmr_tifs_set+0x10>)
    b23e:	4a04      	ldr	r2, [pc, #16]	; (b250 <radio_tmr_tifs_set+0x14>)
    b240:	781b      	ldrb	r3, [r3, #0]
    b242:	f503 73a8 	add.w	r3, r3, #336	; 0x150
    b246:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    b24a:	4770      	bx	lr
    b24c:	200018a0 	.word	0x200018a0
    b250:	40009000 	.word	0x40009000

0000b254 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    b254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    b258:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    b25c:	4c30      	ldr	r4, [pc, #192]	; (b320 <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
    b25e:	4d31      	ldr	r5, [pc, #196]	; (b324 <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    b260:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    b264:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
    b266:	bf88      	it	hi
    b268:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
    b26c:	4b2e      	ldr	r3, [pc, #184]	; (b328 <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
    b26e:	4c2f      	ldr	r4, [pc, #188]	; (b32c <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
    b270:	bf82      	ittt	hi
    b272:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
    b276:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
    b27a:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
    b27e:	2601      	movs	r6, #1
	remainder /= 1000000UL;
    b280:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
    b284:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    b286:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
    b288:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
    b28c:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
    b28e:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
    b292:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    b296:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
    b29a:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
    b29e:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    b2a2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    b2a6:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
    b2aa:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
    b2ae:	4920      	ldr	r1, [pc, #128]	; (b330 <radio_tmr_start+0xdc>)
    b2b0:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
    b2b4:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
    b2b8:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
    b2bc:	f7ff fd66 	bl	ad8c <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
    b2c0:	4b1c      	ldr	r3, [pc, #112]	; (b334 <radio_tmr_start+0xe0>)
    b2c2:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
    b2c4:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
    b2c8:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
    b2cc:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
    b2d0:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
    b2d2:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
    b2d6:	3b74      	subs	r3, #116	; 0x74
    b2d8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
    b2dc:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
    b2e0:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
    b2e4:	f503 739a 	add.w	r3, r3, #308	; 0x134
    b2e8:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
    b2ec:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    b2f0:	33c4      	adds	r3, #196	; 0xc4
    b2f2:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
    b2f6:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
    b2fa:	3bc0      	subs	r3, #192	; 0xc0
    b2fc:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
    b300:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    b304:	33c8      	adds	r3, #200	; 0xc8
    b306:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
    b30a:	f44f 6310 	mov.w	r3, #2304	; 0x900
    b30e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
    b312:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    b316:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
    b31a:	4628      	mov	r0, r5
    b31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b320:	7ff0bdbf 	.word	0x7ff0bdbf
    b324:	000f4240 	.word	0x000f4240
    b328:	40008000 	.word	0x40008000
    b32c:	4000b000 	.word	0x4000b000
    b330:	4000b148 	.word	0x4000b148
    b334:	40009000 	.word	0x40009000

0000b338 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
    b338:	4a04      	ldr	r2, [pc, #16]	; (b34c <radio_tmr_stop+0x14>)
    b33a:	2301      	movs	r3, #1
    b33c:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
    b33e:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
    b340:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    b344:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
    b346:	6113      	str	r3, [r2, #16]
    b348:	4770      	bx	lr
    b34a:	bf00      	nop
    b34c:	40008000 	.word	0x40008000

0000b350 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
    b350:	4b0c      	ldr	r3, [pc, #48]	; (b384 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    b352:	4a0d      	ldr	r2, [pc, #52]	; (b388 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
    b354:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    b358:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    b35c:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    b360:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    b364:	3240      	adds	r2, #64	; 0x40
    b366:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
    b36a:	f502 7280 	add.w	r2, r2, #256	; 0x100
    b36e:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
    b372:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
    b376:	3a34      	subs	r2, #52	; 0x34
    b378:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
    b37c:	2218      	movs	r2, #24
    b37e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    b382:	4770      	bx	lr
    b384:	40008000 	.word	0x40008000
    b388:	40001104 	.word	0x40001104

0000b38c <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
    b38c:	4b0b      	ldr	r3, [pc, #44]	; (b3bc <radio_tmr_aa_capture+0x30>)
    b38e:	4a0c      	ldr	r2, [pc, #48]	; (b3c0 <radio_tmr_aa_capture+0x34>)
    b390:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
    b394:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    b398:	3240      	adds	r2, #64	; 0x40
    b39a:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    b39e:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
    b3a2:	3a3c      	subs	r2, #60	; 0x3c
    b3a4:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    b3a8:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    b3ac:	3240      	adds	r2, #64	; 0x40
    b3ae:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
    b3b2:	220c      	movs	r2, #12
    b3b4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    b3b8:	4770      	bx	lr
    b3ba:	bf00      	nop
    b3bc:	4001f000 	.word	0x4001f000
    b3c0:	40001100 	.word	0x40001100

0000b3c4 <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
    b3c4:	4b01      	ldr	r3, [pc, #4]	; (b3cc <radio_tmr_aa_get+0x8>)
    b3c6:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
    b3ca:	4770      	bx	lr
    b3cc:	40008000 	.word	0x40008000

0000b3d0 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    b3d0:	4b01      	ldr	r3, [pc, #4]	; (b3d8 <radio_tmr_aa_save+0x8>)
    b3d2:	6018      	str	r0, [r3, #0]
    b3d4:	4770      	bx	lr
    b3d6:	bf00      	nop
    b3d8:	20001898 	.word	0x20001898

0000b3dc <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
    b3dc:	4b01      	ldr	r3, [pc, #4]	; (b3e4 <radio_tmr_aa_restore+0x8>)
    b3de:	6818      	ldr	r0, [r3, #0]
    b3e0:	4770      	bx	lr
    b3e2:	bf00      	nop
    b3e4:	20001898 	.word	0x20001898

0000b3e8 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
    b3e8:	4b01      	ldr	r3, [pc, #4]	; (b3f0 <radio_tmr_ready_get+0x8>)
    b3ea:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
    b3ee:	4770      	bx	lr
    b3f0:	40008000 	.word	0x40008000

0000b3f4 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
    b3f4:	4b06      	ldr	r3, [pc, #24]	; (b410 <radio_tmr_end_capture+0x1c>)
    b3f6:	4a07      	ldr	r2, [pc, #28]	; (b414 <radio_tmr_end_capture+0x20>)
    b3f8:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
    b3fc:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    b400:	323c      	adds	r2, #60	; 0x3c
    b402:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
    b406:	2220      	movs	r2, #32
    b408:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    b40c:	4770      	bx	lr
    b40e:	bf00      	nop
    b410:	4001f000 	.word	0x4001f000
    b414:	4000110c 	.word	0x4000110c

0000b418 <radio_tmr_end_get>:
    b418:	4b01      	ldr	r3, [pc, #4]	; (b420 <radio_tmr_end_get+0x8>)
    b41a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
    b41e:	4770      	bx	lr
    b420:	40008000 	.word	0x40008000

0000b424 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
    b424:	4b01      	ldr	r3, [pc, #4]	; (b42c <radio_tmr_tifs_base_get+0x8>)
    b426:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
    b42a:	4770      	bx	lr
    b42c:	40008000 	.word	0x40008000

0000b430 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b430:	4b16      	ldr	r3, [pc, #88]	; (b48c <radio_ccm_rx_pkt_set+0x5c>)
{
    b432:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b434:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    b436:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b438:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    b43c:	4e14      	ldr	r6, [pc, #80]	; (b490 <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    b43e:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    b442:	4d14      	ldr	r5, [pc, #80]	; (b494 <radio_ccm_rx_pkt_set+0x64>)
    b444:	2902      	cmp	r1, #2
    b446:	bf0c      	ite	eq
    b448:	4629      	moveq	r1, r5
    b44a:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
    b44c:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    b450:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    b454:	4810      	ldr	r0, [pc, #64]	; (b498 <radio_ccm_rx_pkt_set+0x68>)
    b456:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
    b45a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    b45e:	4a0f      	ldr	r2, [pc, #60]	; (b49c <radio_ccm_rx_pkt_set+0x6c>)
    b460:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    b464:	490e      	ldr	r1, [pc, #56]	; (b4a0 <radio_ccm_rx_pkt_set+0x70>)
    b466:	4a0f      	ldr	r2, [pc, #60]	; (b4a4 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
    b468:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    b46c:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    b470:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    b474:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
    b478:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
    b47c:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
    b480:	2140      	movs	r1, #64	; 0x40
    b482:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
    b486:	2201      	movs	r2, #1
    b488:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    b48a:	bd70      	pop	{r4, r5, r6, pc}
    b48c:	4000f000 	.word	0x4000f000
    b490:	01000001 	.word	0x01000001
    b494:	01010001 	.word	0x01010001
    b498:	20001794 	.word	0x20001794
    b49c:	20001684 	.word	0x20001684
    b4a0:	40001104 	.word	0x40001104
    b4a4:	4001f000 	.word	0x4001f000

0000b4a8 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    b4a8:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b4aa:	4b0e      	ldr	r3, [pc, #56]	; (b4e4 <radio_ccm_tx_pkt_set+0x3c>)
    b4ac:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    b4ae:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b4b0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    b4b4:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    b4b8:	4c0b      	ldr	r4, [pc, #44]	; (b4e8 <radio_ccm_tx_pkt_set+0x40>)
    b4ba:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    b4be:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
    b4c2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    b4c6:	4809      	ldr	r0, [pc, #36]	; (b4ec <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    b4c8:	4909      	ldr	r1, [pc, #36]	; (b4f0 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    b4ca:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    b4ce:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    b4d2:	2101      	movs	r1, #1
    b4d4:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    b4d8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    b4dc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
    b4e0:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    b4e2:	bd10      	pop	{r4, pc}
    b4e4:	4000f000 	.word	0x4000f000
    b4e8:	01010000 	.word	0x01010000
    b4ec:	20001794 	.word	0x20001794
    b4f0:	20001684 	.word	0x20001684

0000b4f4 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    b4f4:	4b0c      	ldr	r3, [pc, #48]	; (b528 <radio_ccm_is_done+0x34>)
    b4f6:	2202      	movs	r2, #2
    b4f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    b4fc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    b500:	b16a      	cbz	r2, b51e <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    b502:	2202      	movs	r2, #2
    b504:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    b508:	4a08      	ldr	r2, [pc, #32]	; (b52c <radio_ccm_is_done+0x38>)
    b50a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    b50e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    b512:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    b516:	fab0 f080 	clz	r0, r0
    b51a:	0940      	lsrs	r0, r0, #5
    b51c:	4770      	bx	lr
		__WFE();
    b51e:	bf20      	wfe
		__SEV();
    b520:	bf40      	sev
		__WFE();
    b522:	bf20      	wfe
    b524:	e7ea      	b.n	b4fc <radio_ccm_is_done+0x8>
    b526:	bf00      	nop
    b528:	4000f000 	.word	0x4000f000
    b52c:	e000e100 	.word	0xe000e100

0000b530 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    b530:	4b03      	ldr	r3, [pc, #12]	; (b540 <radio_ccm_mic_is_valid+0x10>)
    b532:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    b536:	3000      	adds	r0, #0
    b538:	bf18      	it	ne
    b53a:	2001      	movne	r0, #1
    b53c:	4770      	bx	lr
    b53e:	bf00      	nop
    b540:	4000f000 	.word	0x4000f000

0000b544 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    b544:	4b01      	ldr	r3, [pc, #4]	; (b54c <radio_ar_match_get+0x8>)
    b546:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    b54a:	4770      	bx	lr
    b54c:	4000f000 	.word	0x4000f000

0000b550 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
    b550:	4a04      	ldr	r2, [pc, #16]	; (b564 <radio_ar_status_reset+0x14>)
    b552:	2300      	movs	r3, #0
    b554:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    b558:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
    b55c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    b560:	4770      	bx	lr
    b562:	bf00      	nop
    b564:	40001000 	.word	0x40001000

0000b568 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    b568:	4b08      	ldr	r3, [pc, #32]	; (b58c <radio_ar_has_match+0x24>)
    b56a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    b56e:	b160      	cbz	r0, b58a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
    b570:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    b574:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
    b578:	b138      	cbz	r0, b58a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
    b57a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
    b57e:	b120      	cbz	r0, b58a <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    b580:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
    b584:	fab0 f080 	clz	r0, r0
    b588:	0940      	lsrs	r0, r0, #5
}
    b58a:	4770      	bx	lr
    b58c:	40001000 	.word	0x40001000

0000b590 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    b590:	2901      	cmp	r1, #1
{
    b592:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    b594:	d00e      	beq.n	b5b4 <mayfly_enable_cb+0x24>
    b596:	4b0d      	ldr	r3, [pc, #52]	; (b5cc <mayfly_enable_cb+0x3c>)
    b598:	9301      	str	r3, [sp, #4]
    b59a:	9300      	str	r3, [sp, #0]
    b59c:	4a0c      	ldr	r2, [pc, #48]	; (b5d0 <mayfly_enable_cb+0x40>)
    b59e:	4b0d      	ldr	r3, [pc, #52]	; (b5d4 <mayfly_enable_cb+0x44>)
    b5a0:	490d      	ldr	r1, [pc, #52]	; (b5d8 <mayfly_enable_cb+0x48>)
    b5a2:	480e      	ldr	r0, [pc, #56]	; (b5dc <mayfly_enable_cb+0x4c>)
    b5a4:	f7f5 ff2e 	bl	1404 <printk>
    b5a8:	4040      	eors	r0, r0
    b5aa:	f380 8811 	msr	BASEPRI, r0
    b5ae:	f04f 0004 	mov.w	r0, #4
    b5b2:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
    b5b4:	2018      	movs	r0, #24
	if (enable) {
    b5b6:	b122      	cbz	r2, b5c2 <mayfly_enable_cb+0x32>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
    b5b8:	b003      	add	sp, #12
    b5ba:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_enable(SWI4_IRQn);
    b5be:	f7f5 bbc7 	b.w	d50 <_arch_irq_enable>
}
    b5c2:	b003      	add	sp, #12
    b5c4:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_disable(SWI4_IRQn);
    b5c8:	f7f5 bbd2 	b.w	d70 <_arch_irq_disable>
    b5cc:	0000ceef 	.word	0x0000ceef
    b5d0:	0000d7a6 	.word	0x0000d7a6
    b5d4:	0000ef5b 	.word	0x0000ef5b
    b5d8:	0000d71b 	.word	0x0000d71b
    b5dc:	0000ef8a 	.word	0x0000ef8a

0000b5e0 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
    b5e0:	b507      	push	{r0, r1, r2, lr}
	(void)caller_id;

	switch (callee_id) {
    b5e2:	b181      	cbz	r1, b606 <mayfly_is_enabled+0x26>
    b5e4:	2901      	cmp	r1, #1
    b5e6:	d014      	beq.n	b612 <mayfly_is_enabled+0x32>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
    b5e8:	4b0b      	ldr	r3, [pc, #44]	; (b618 <mayfly_is_enabled+0x38>)
    b5ea:	9301      	str	r3, [sp, #4]
    b5ec:	9300      	str	r3, [sp, #0]
    b5ee:	4a0b      	ldr	r2, [pc, #44]	; (b61c <mayfly_is_enabled+0x3c>)
    b5f0:	4b0b      	ldr	r3, [pc, #44]	; (b620 <mayfly_is_enabled+0x40>)
    b5f2:	490c      	ldr	r1, [pc, #48]	; (b624 <mayfly_is_enabled+0x44>)
    b5f4:	480c      	ldr	r0, [pc, #48]	; (b628 <mayfly_is_enabled+0x48>)
    b5f6:	f7f5 ff05 	bl	1404 <printk>
    b5fa:	4040      	eors	r0, r0
    b5fc:	f380 8811 	msr	BASEPRI, r0
    b600:	f04f 0004 	mov.w	r0, #4
    b604:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
    b606:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
    b608:	b003      	add	sp, #12
    b60a:	f85d eb04 	ldr.w	lr, [sp], #4
		return irq_is_enabled(SWI4_IRQn);
    b60e:	f7f5 bbc3 	b.w	d98 <_arch_irq_is_enabled>
    b612:	2018      	movs	r0, #24
    b614:	e7f8      	b.n	b608 <mayfly_is_enabled+0x28>
    b616:	bf00      	nop
    b618:	0000ceef 	.word	0x0000ceef
    b61c:	0000d7a6 	.word	0x0000d7a6
    b620:	0000ef6c 	.word	0x0000ef6c
    b624:	0000d71b 	.word	0x0000d71b
    b628:	0000d6b3 	.word	0x0000d6b3

0000b62c <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    b62c:	4288      	cmp	r0, r1
    b62e:	d00a      	beq.n	b646 <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
    b630:	b918      	cbnz	r0, b63a <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
    b632:	1e4b      	subs	r3, r1, #1
    b634:	4258      	negs	r0, r3
    b636:	4158      	adcs	r0, r3
    b638:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    b63a:	2801      	cmp	r0, #1
    b63c:	d105      	bne.n	b64a <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
    b63e:	fab1 f081 	clz	r0, r1
    b642:	0940      	lsrs	r0, r0, #5
    b644:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    b646:	2001      	movs	r0, #1
    b648:	4770      	bx	lr
    b64a:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
    b64c:	4770      	bx	lr
	...

0000b650 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
    b650:	b507      	push	{r0, r1, r2, lr}
    b652:	4b0e      	ldr	r3, [pc, #56]	; (b68c <mayfly_pend+0x3c>)
	(void)caller_id;

	switch (callee_id) {
    b654:	b181      	cbz	r1, b678 <mayfly_pend+0x28>
    b656:	2901      	cmp	r1, #1
    b658:	d015      	beq.n	b686 <mayfly_pend+0x36>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
    b65a:	4b0d      	ldr	r3, [pc, #52]	; (b690 <mayfly_pend+0x40>)
    b65c:	9301      	str	r3, [sp, #4]
    b65e:	9300      	str	r3, [sp, #0]
    b660:	4a0c      	ldr	r2, [pc, #48]	; (b694 <mayfly_pend+0x44>)
    b662:	4b0d      	ldr	r3, [pc, #52]	; (b698 <mayfly_pend+0x48>)
    b664:	490d      	ldr	r1, [pc, #52]	; (b69c <mayfly_pend+0x4c>)
    b666:	480e      	ldr	r0, [pc, #56]	; (b6a0 <mayfly_pend+0x50>)
    b668:	f7f5 fecc 	bl	1404 <printk>
    b66c:	4040      	eors	r0, r0
    b66e:	f380 8811 	msr	BASEPRI, r0
    b672:	f04f 0004 	mov.w	r0, #4
    b676:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b678:	f44f 6200 	mov.w	r2, #2048	; 0x800
    b67c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
    b680:	b003      	add	sp, #12
    b682:	f85d fb04 	ldr.w	pc, [sp], #4
    b686:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    b68a:	e7f7      	b.n	b67c <mayfly_pend+0x2c>
    b68c:	e000e100 	.word	0xe000e100
    b690:	0000ceef 	.word	0x0000ceef
    b694:	0000d7a6 	.word	0x0000d7a6
    b698:	0000ef7e 	.word	0x0000ef7e
    b69c:	0000d71b 	.word	0x0000d71b
    b6a0:	0000d6b3 	.word	0x0000d6b3

0000b6a4 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
    b6a4:	2803      	cmp	r0, #3
{
    b6a6:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
    b6a8:	d90e      	bls.n	b6c8 <hal_ticker_instance0_caller_id_get+0x24>
    b6aa:	4b0e      	ldr	r3, [pc, #56]	; (b6e4 <hal_ticker_instance0_caller_id_get+0x40>)
    b6ac:	9301      	str	r3, [sp, #4]
    b6ae:	9300      	str	r3, [sp, #0]
    b6b0:	4a0d      	ldr	r2, [pc, #52]	; (b6e8 <hal_ticker_instance0_caller_id_get+0x44>)
    b6b2:	4b0e      	ldr	r3, [pc, #56]	; (b6ec <hal_ticker_instance0_caller_id_get+0x48>)
    b6b4:	490e      	ldr	r1, [pc, #56]	; (b6f0 <hal_ticker_instance0_caller_id_get+0x4c>)
    b6b6:	480f      	ldr	r0, [pc, #60]	; (b6f4 <hal_ticker_instance0_caller_id_get+0x50>)

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    b6b8:	f7f5 fea4 	bl	1404 <printk>
    b6bc:	4040      	eors	r0, r0
    b6be:	f380 8811 	msr	BASEPRI, r0
    b6c2:	f04f 0004 	mov.w	r0, #4
    b6c6:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
    b6c8:	4b0b      	ldr	r3, [pc, #44]	; (b6f8 <hal_ticker_instance0_caller_id_get+0x54>)
    b6ca:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    b6cc:	b938      	cbnz	r0, b6de <hal_ticker_instance0_caller_id_get+0x3a>
    b6ce:	4b05      	ldr	r3, [pc, #20]	; (b6e4 <hal_ticker_instance0_caller_id_get+0x40>)
    b6d0:	9301      	str	r3, [sp, #4]
    b6d2:	9300      	str	r3, [sp, #0]
    b6d4:	4a04      	ldr	r2, [pc, #16]	; (b6e8 <hal_ticker_instance0_caller_id_get+0x44>)
    b6d6:	4b05      	ldr	r3, [pc, #20]	; (b6ec <hal_ticker_instance0_caller_id_get+0x48>)
    b6d8:	4905      	ldr	r1, [pc, #20]	; (b6f0 <hal_ticker_instance0_caller_id_get+0x4c>)
    b6da:	4808      	ldr	r0, [pc, #32]	; (b6fc <hal_ticker_instance0_caller_id_get+0x58>)
    b6dc:	e7ec      	b.n	b6b8 <hal_ticker_instance0_caller_id_get+0x14>

	return caller_id;
}
    b6de:	b003      	add	sp, #12
    b6e0:	f85d fb04 	ldr.w	pc, [sp], #4
    b6e4:	0000ceef 	.word	0x0000ceef
    b6e8:	0000d7a6 	.word	0x0000d7a6
    b6ec:	0000efba 	.word	0x0000efba
    b6f0:	0000d71b 	.word	0x0000d71b
    b6f4:	0000effc 	.word	0x0000effc
    b6f8:	0000eff8 	.word	0x0000eff8
    b6fc:	0000f03d 	.word	0x0000f03d

0000b700 <hal_ticker_instance0_sched>:

void hal_ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain,
				void *instance)
{
    b700:	b513      	push	{r0, r1, r4, lr}
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    b702:	3802      	subs	r0, #2
{
    b704:	461c      	mov	r4, r3
	switch (caller_id) {
    b706:	2803      	cmp	r0, #3
    b708:	d818      	bhi.n	b73c <hal_ticker_instance0_sched+0x3c>
    b70a:	e8df f000 	tbb	[pc, r0]
    b70e:	0d02      	.short	0x0d02
    b710:	2f13      	.short	0x2f13
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
    b712:	2903      	cmp	r1, #3
    b714:	d112      	bne.n	b73c <hal_ticker_instance0_sched+0x3c>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
    b716:	4b19      	ldr	r3, [pc, #100]	; (b77c <hal_ticker_instance0_sched+0x7c>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    b718:	2100      	movs	r1, #0
			m.param = instance;
    b71a:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    b71c:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
    b71e:	b002      	add	sp, #8
    b720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    b724:	f7f7 bef8 	b.w	3518 <mayfly_enqueue>
		switch (callee_id) {
    b728:	2904      	cmp	r1, #4
    b72a:	d107      	bne.n	b73c <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
    b72c:	4b14      	ldr	r3, [pc, #80]	; (b780 <hal_ticker_instance0_sched+0x80>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    b72e:	2101      	movs	r1, #1
			m.param = instance;
    b730:	609c      	str	r4, [r3, #8]
    b732:	e7f3      	b.n	b71c <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
    b734:	2903      	cmp	r1, #3
    b736:	d010      	beq.n	b75a <hal_ticker_instance0_sched+0x5a>
    b738:	2904      	cmp	r1, #4
    b73a:	d013      	beq.n	b764 <hal_ticker_instance0_sched+0x64>
		LL_ASSERT(0);
    b73c:	4b11      	ldr	r3, [pc, #68]	; (b784 <hal_ticker_instance0_sched+0x84>)
    b73e:	9301      	str	r3, [sp, #4]
    b740:	9300      	str	r3, [sp, #0]
    b742:	4a11      	ldr	r2, [pc, #68]	; (b788 <hal_ticker_instance0_sched+0x88>)
    b744:	4b11      	ldr	r3, [pc, #68]	; (b78c <hal_ticker_instance0_sched+0x8c>)
    b746:	4912      	ldr	r1, [pc, #72]	; (b790 <hal_ticker_instance0_sched+0x90>)
    b748:	4812      	ldr	r0, [pc, #72]	; (b794 <hal_ticker_instance0_sched+0x94>)
    b74a:	f7f5 fe5b 	bl	1404 <printk>
    b74e:	4040      	eors	r0, r0
    b750:	f380 8811 	msr	BASEPRI, r0
    b754:	f04f 0004 	mov.w	r0, #4
    b758:	df02      	svc	2
			m.param = instance;
    b75a:	4b0f      	ldr	r3, [pc, #60]	; (b798 <hal_ticker_instance0_sched+0x98>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    b75c:	2100      	movs	r1, #0
			m.param = instance;
    b75e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    b760:	2001      	movs	r0, #1
    b762:	e7dc      	b.n	b71e <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
    b764:	4b0d      	ldr	r3, [pc, #52]	; (b79c <hal_ticker_instance0_sched+0x9c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    b766:	2101      	movs	r1, #1
			m.param = instance;
    b768:	609c      	str	r4, [r3, #8]
    b76a:	e7f9      	b.n	b760 <hal_ticker_instance0_sched+0x60>
		switch (callee_id) {
    b76c:	2904      	cmp	r1, #4
    b76e:	d1e5      	bne.n	b73c <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
    b770:	4b0b      	ldr	r3, [pc, #44]	; (b7a0 <hal_ticker_instance0_sched+0xa0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    b772:	2101      	movs	r1, #1
			m.param = instance;
    b774:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    b776:	2003      	movs	r0, #3
    b778:	e7d1      	b.n	b71e <hal_ticker_instance0_sched+0x1e>
    b77a:	bf00      	nop
    b77c:	20003db8 	.word	0x20003db8
    b780:	20003dc8 	.word	0x20003dc8
    b784:	0000ceef 	.word	0x0000ceef
    b788:	0000d7a6 	.word	0x0000d7a6
    b78c:	0000efdd 	.word	0x0000efdd
    b790:	0000d71b 	.word	0x0000d71b
    b794:	0000d6b3 	.word	0x0000d6b3
    b798:	20003dd8 	.word	0x20003dd8
    b79c:	20003de8 	.word	0x20003de8
    b7a0:	20003df8 	.word	0x20003df8

0000b7a4 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
    b7a4:	4601      	mov	r1, r0
    b7a6:	2000      	movs	r0, #0
    b7a8:	f7ff baa0 	b.w	acec <cntr_cmp_set>

0000b7ac <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
    b7ac:	4770      	bx	lr
	...

0000b7b0 <net_buf_pool_get>:
}
    b7b0:	4b01      	ldr	r3, [pc, #4]	; (b7b8 <net_buf_pool_get+0x8>)
    b7b2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    b7b6:	4770      	bx	lr
    b7b8:	20003f04 	.word	0x20003f04

0000b7bc <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b7bc:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
    b7be:	4b04      	ldr	r3, [pc, #16]	; (b7d0 <net_buf_id+0x14>)
    b7c0:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    b7c4:	69db      	ldr	r3, [r3, #28]
    b7c6:	1ac0      	subs	r0, r0, r3
}
    b7c8:	4b02      	ldr	r3, [pc, #8]	; (b7d4 <net_buf_id+0x18>)
	return buf - pool->__bufs;
    b7ca:	10c0      	asrs	r0, r0, #3
}
    b7cc:	4358      	muls	r0, r3
    b7ce:	4770      	bx	lr
    b7d0:	20003f04 	.word	0x20003f04
    b7d4:	aaaaaaab 	.word	0xaaaaaaab

0000b7d8 <fixed_data_alloc>:
{
    b7d8:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    b7da:	4b09      	ldr	r3, [pc, #36]	; (b800 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b7dc:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    b7de:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
    b7e2:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    b7e4:	699b      	ldr	r3, [r3, #24]
    b7e6:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
    b7e8:	6823      	ldr	r3, [r4, #0]
    b7ea:	429a      	cmp	r2, r3
    b7ec:	bf94      	ite	ls
    b7ee:	600a      	strls	r2, [r1, #0]
    b7f0:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    b7f2:	f7ff ffe3 	bl	b7bc <net_buf_id>
    b7f6:	e894 000c 	ldmia.w	r4, {r2, r3}
}
    b7fa:	fb02 3000 	mla	r0, r2, r0, r3
    b7fe:	bd10      	pop	{r4, pc}
    b800:	20003f04 	.word	0x20003f04

0000b804 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
    b804:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b808:	4605      	mov	r5, r0
    b80a:	9101      	str	r1, [sp, #4]
    b80c:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    b80e:	f000 fdb9 	bl	c384 <_impl_k_uptime_get_32>
    b812:	4607      	mov	r7, r0
	__asm__ volatile(
    b814:	f04f 0320 	mov.w	r3, #32
    b818:	f3ef 8811 	mrs	r8, BASEPRI
    b81c:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    b820:	8a6b      	ldrh	r3, [r5, #18]
    b822:	2b00      	cmp	r3, #0
    b824:	d03d      	beq.n	b8a2 <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    b826:	8a2a      	ldrh	r2, [r5, #16]
    b828:	429a      	cmp	r2, r3
    b82a:	d92a      	bls.n	b882 <net_buf_alloc_len+0x7e>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
    b82c:	2100      	movs	r1, #0
    b82e:	4628      	mov	r0, r5
    b830:	f000 fadb 	bl	bdea <k_queue_get>
			if (buf) {
    b834:	4604      	mov	r4, r0
    b836:	b320      	cbz	r0, b882 <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b838:	f388 8811 	msr	BASEPRI, r8
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    b83c:	9b01      	ldr	r3, [sp, #4]
    b83e:	2b00      	cmp	r3, #0
    b840:	d03c      	beq.n	b8bc <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
    b842:	1c73      	adds	r3, r6, #1
    b844:	2b01      	cmp	r3, #1
    b846:	d906      	bls.n	b856 <net_buf_alloc_len+0x52>
    b848:	f000 fd9c 	bl	c384 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
    b84c:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
    b84e:	42b0      	cmp	r0, r6
    b850:	bf94      	ite	ls
    b852:	1a36      	subls	r6, r6, r0
    b854:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b856:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    b858:	4f1e      	ldr	r7, [pc, #120]	; (b8d4 <net_buf_alloc_len+0xd0>)
    b85a:	eb07 1343 	add.w	r3, r7, r3, lsl #5
    b85e:	4632      	mov	r2, r6
    b860:	699b      	ldr	r3, [r3, #24]
    b862:	681b      	ldr	r3, [r3, #0]
    b864:	a901      	add	r1, sp, #4
    b866:	681b      	ldr	r3, [r3, #0]
    b868:	4620      	mov	r0, r4
    b86a:	4798      	blx	r3
    b86c:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    b86e:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    b870:	bb28      	cbnz	r0, b8be <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    b872:	79a0      	ldrb	r0, [r4, #6]
    b874:	4621      	mov	r1, r4
    b876:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    b87a:	f000 fa96 	bl	bdaa <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    b87e:	462c      	mov	r4, r5
    b880:	e018      	b.n	b8b4 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
    b882:	8a6b      	ldrh	r3, [r5, #18]
    b884:	1e5a      	subs	r2, r3, #1
    b886:	826a      	strh	r2, [r5, #18]
    b888:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    b88c:	8a2c      	ldrh	r4, [r5, #16]
    b88e:	1ae4      	subs	r4, r4, r3
    b890:	69eb      	ldr	r3, [r5, #28]
    b892:	2218      	movs	r2, #24
    b894:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
    b898:	4b0e      	ldr	r3, [pc, #56]	; (b8d4 <net_buf_alloc_len+0xd0>)
    b89a:	1aed      	subs	r5, r5, r3
    b89c:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
    b89e:	71a5      	strb	r5, [r4, #6]
		goto success;
    b8a0:	e7cc      	b.n	b83c <net_buf_alloc_len+0x38>
    b8a2:	f388 8811 	msr	BASEPRI, r8
	buf = k_lifo_get(&pool->free, timeout);
    b8a6:	4631      	mov	r1, r6
    b8a8:	4628      	mov	r0, r5
    b8aa:	f000 fa9e 	bl	bdea <k_queue_get>
	if (!buf) {
    b8ae:	4604      	mov	r4, r0
    b8b0:	2800      	cmp	r0, #0
    b8b2:	d1c3      	bne.n	b83c <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
    b8b4:	4620      	mov	r0, r4
    b8b6:	b002      	add	sp, #8
    b8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
    b8bc:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
    b8be:	2301      	movs	r3, #1
    b8c0:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
    b8c2:	2300      	movs	r3, #0
	buf->frags = NULL;
    b8c4:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
    b8c6:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
    b8c8:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
    b8ca:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
    b8cc:	6923      	ldr	r3, [r4, #16]
    b8ce:	81e2      	strh	r2, [r4, #14]
    b8d0:	60a3      	str	r3, [r4, #8]
	return buf;
    b8d2:	e7ef      	b.n	b8b4 <net_buf_alloc_len+0xb0>
    b8d4:	20003f04 	.word	0x20003f04

0000b8d8 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    b8d8:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
    b8da:	685b      	ldr	r3, [r3, #4]
    b8dc:	460a      	mov	r2, r1
    b8de:	6819      	ldr	r1, [r3, #0]
    b8e0:	f7ff bf90 	b.w	b804 <net_buf_alloc_len>

0000b8e4 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
    b8e4:	b570      	push	{r4, r5, r6, lr}
    b8e6:	4606      	mov	r6, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
    b8e8:	f000 fa7f 	bl	bdea <k_queue_get>
	if (!buf) {
    b8ec:	4605      	mov	r5, r0
    b8ee:	b128      	cbz	r0, b8fc <net_buf_get+0x18>
    b8f0:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    b8f2:	7963      	ldrb	r3, [r4, #5]
    b8f4:	f013 0301 	ands.w	r3, r3, #1
    b8f8:	d102      	bne.n	b900 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
    b8fa:	6023      	str	r3, [r4, #0]

	return buf;
}
    b8fc:	4628      	mov	r0, r5
    b8fe:	bd70      	pop	{r4, r5, r6, pc}
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    b900:	2100      	movs	r1, #0
    b902:	4630      	mov	r0, r6
    b904:	f000 fa71 	bl	bdea <k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
    b908:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    b90a:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
    b90c:	f023 0301 	bic.w	r3, r3, #1
    b910:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    b912:	4604      	mov	r4, r0
    b914:	e7ed      	b.n	b8f2 <net_buf_get+0xe>

0000b916 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
    b916:	6883      	ldr	r3, [r0, #8]
    b918:	4419      	add	r1, r3
    b91a:	6001      	str	r1, [r0, #0]
    b91c:	4770      	bx	lr

0000b91e <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
    b91e:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
    b920:	460a      	mov	r2, r1
    b922:	6814      	ldr	r4, [r2, #0]
    b924:	b914      	cbnz	r4, b92c <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
    b926:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
    b928:	f000 ba43 	b.w	bdb2 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
    b92c:	7953      	ldrb	r3, [r2, #5]
    b92e:	f043 0301 	orr.w	r3, r3, #1
    b932:	7153      	strb	r3, [r2, #5]
    b934:	4622      	mov	r2, r4
    b936:	e7f4      	b.n	b922 <net_buf_put+0x4>

0000b938 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    b938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b93a:	4d15      	ldr	r5, [pc, #84]	; (b990 <net_buf_unref+0x58>)
    b93c:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    b93e:	2600      	movs	r6, #0
	while (buf) {
    b940:	b904      	cbnz	r4, b944 <net_buf_unref+0xc>
    b942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
    b944:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    b946:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
    b948:	3b01      	subs	r3, #1
    b94a:	b2db      	uxtb	r3, r3
    b94c:	7123      	strb	r3, [r4, #4]
    b94e:	2b00      	cmp	r3, #0
    b950:	d1f7      	bne.n	b942 <net_buf_unref+0xa>
		if (buf->__buf) {
    b952:	6921      	ldr	r1, [r4, #16]
    b954:	b159      	cbz	r1, b96e <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    b956:	7963      	ldrb	r3, [r4, #5]
    b958:	079b      	lsls	r3, r3, #30
    b95a:	d407      	bmi.n	b96c <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b95c:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
    b95e:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    b962:	4620      	mov	r0, r4
    b964:	699b      	ldr	r3, [r3, #24]
    b966:	681b      	ldr	r3, [r3, #0]
    b968:	689b      	ldr	r3, [r3, #8]
    b96a:	4798      	blx	r3
			buf->__buf = NULL;
    b96c:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
    b96e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    b970:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
    b972:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
    b976:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    b978:	695b      	ldr	r3, [r3, #20]
    b97a:	b11b      	cbz	r3, b984 <net_buf_unref+0x4c>
			pool->destroy(buf);
    b97c:	4620      	mov	r0, r4
    b97e:	4798      	blx	r3
{
    b980:	463c      	mov	r4, r7
    b982:	e7dd      	b.n	b940 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
    b984:	4621      	mov	r1, r4
    b986:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    b98a:	f000 fa0e 	bl	bdaa <k_queue_prepend>
    b98e:	e7f7      	b.n	b980 <net_buf_unref+0x48>
    b990:	20003f04 	.word	0x20003f04

0000b994 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
    b994:	7903      	ldrb	r3, [r0, #4]
    b996:	3301      	adds	r3, #1
    b998:	7103      	strb	r3, [r0, #4]
	return buf;
}
    b99a:	4770      	bx	lr

0000b99c <net_buf_simple_add>:
	return buf->data + buf->len;
    b99c:	8883      	ldrh	r3, [r0, #4]
    b99e:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    b9a0:	4419      	add	r1, r3
    b9a2:	8081      	strh	r1, [r0, #4]
	return tail;
}
    b9a4:	18d0      	adds	r0, r2, r3
    b9a6:	4770      	bx	lr

0000b9a8 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
    b9a8:	b430      	push	{r4, r5}
    b9aa:	8883      	ldrh	r3, [r0, #4]
    b9ac:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
    b9ae:	189d      	adds	r5, r3, r2
    b9b0:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
    b9b2:	18e0      	adds	r0, r4, r3
}
    b9b4:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
    b9b6:	f7f4 be1f 	b.w	5f8 <memcpy>

0000b9ba <net_buf_simple_add_u8>:
    b9ba:	8883      	ldrh	r3, [r0, #4]
    b9bc:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
    b9be:	b510      	push	{r4, lr}
	buf->len += len;
    b9c0:	1c5c      	adds	r4, r3, #1
    b9c2:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
    b9c4:	54d1      	strb	r1, [r2, r3]

	return u8;
}
    b9c6:	18d0      	adds	r0, r2, r3
    b9c8:	bd10      	pop	{r4, pc}

0000b9ca <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
    b9ca:	8883      	ldrh	r3, [r0, #4]
    b9cc:	1a5b      	subs	r3, r3, r1
    b9ce:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
    b9d0:	6803      	ldr	r3, [r0, #0]
    b9d2:	4419      	add	r1, r3
    b9d4:	6001      	str	r1, [r0, #0]
}
    b9d6:	4608      	mov	r0, r1
    b9d8:	4770      	bx	lr

0000b9da <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
    b9da:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
    b9dc:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
    b9de:	2101      	movs	r1, #1
	val = buf->data[0];
    b9e0:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
    b9e2:	f7ff fff2 	bl	b9ca <net_buf_simple_pull>

	return val;
}
    b9e6:	4610      	mov	r0, r2
    b9e8:	bd08      	pop	{r3, pc}

0000b9ea <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
    b9ea:	6802      	ldr	r2, [r0, #0]
    b9ec:	6880      	ldr	r0, [r0, #8]
}
    b9ee:	1a10      	subs	r0, r2, r0
    b9f0:	4770      	bx	lr
	...

0000b9f4 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
    b9f4:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
    b9f6:	4b08      	ldr	r3, [pc, #32]	; (ba18 <_sys_device_do_config_level+0x24>)
    b9f8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    b9fc:	3001      	adds	r0, #1
    b9fe:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    ba02:	4620      	mov	r0, r4
    ba04:	42a8      	cmp	r0, r5
    ba06:	f104 040c 	add.w	r4, r4, #12
    ba0a:	d300      	bcc.n	ba0e <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
    ba0c:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
    ba0e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    ba12:	685b      	ldr	r3, [r3, #4]
    ba14:	4798      	blx	r3
    ba16:	e7f4      	b.n	ba02 <_sys_device_do_config_level+0xe>
    ba18:	0000f07c 	.word	0x0000f07c

0000ba1c <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    ba1c:	4b10      	ldr	r3, [pc, #64]	; (ba60 <device_get_binding+0x44>)
{
    ba1e:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    ba20:	4c10      	ldr	r4, [pc, #64]	; (ba64 <device_get_binding+0x48>)
{
    ba22:	4605      	mov	r5, r0
    ba24:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    ba26:	429c      	cmp	r4, r3
    ba28:	d104      	bne.n	ba34 <device_get_binding+0x18>
    ba2a:	4c0e      	ldr	r4, [pc, #56]	; (ba64 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    ba2c:	42b4      	cmp	r4, r6
    ba2e:	d109      	bne.n	ba44 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
    ba30:	2400      	movs	r4, #0
    ba32:	e012      	b.n	ba5a <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
    ba34:	6862      	ldr	r2, [r4, #4]
    ba36:	b11a      	cbz	r2, ba40 <device_get_binding+0x24>
    ba38:	6822      	ldr	r2, [r4, #0]
    ba3a:	6812      	ldr	r2, [r2, #0]
    ba3c:	42aa      	cmp	r2, r5
    ba3e:	d00c      	beq.n	ba5a <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    ba40:	340c      	adds	r4, #12
    ba42:	e7f0      	b.n	ba26 <device_get_binding+0xa>
		if (!info->driver_api) {
    ba44:	6863      	ldr	r3, [r4, #4]
    ba46:	b90b      	cbnz	r3, ba4c <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    ba48:	340c      	adds	r4, #12
    ba4a:	e7ef      	b.n	ba2c <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
    ba4c:	6823      	ldr	r3, [r4, #0]
    ba4e:	4628      	mov	r0, r5
    ba50:	6819      	ldr	r1, [r3, #0]
    ba52:	f7f4 fdaf 	bl	5b4 <strcmp>
    ba56:	2800      	cmp	r0, #0
    ba58:	d1f6      	bne.n	ba48 <device_get_binding+0x2c>
}
    ba5a:	4620      	mov	r0, r4
    ba5c:	bd70      	pop	{r4, r5, r6, pc}
    ba5e:	bf00      	nop
    ba60:	20003ea8 	.word	0x20003ea8
    ba64:	20003e18 	.word	0x20003e18

0000ba68 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
    ba68:	1c43      	adds	r3, r0, #1
    ba6a:	d003      	beq.n	ba74 <_sys_power_save_idle_exit+0xc>
    ba6c:	4b03      	ldr	r3, [pc, #12]	; (ba7c <_sys_power_save_idle_exit+0x14>)
    ba6e:	681b      	ldr	r3, [r3, #0]
    ba70:	4298      	cmp	r0, r3
    ba72:	db01      	blt.n	ba78 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
    ba74:	f7f6 b9cc 	b.w	1e10 <_timer_idle_exit>
    ba78:	4770      	bx	lr
    ba7a:	bf00      	nop
    ba7c:	20003e08 	.word	0x20003e08

0000ba80 <idle>:
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    ba80:	4d0f      	ldr	r5, [pc, #60]	; (bac0 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    ba82:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
    ba84:	4f0f      	ldr	r7, [pc, #60]	; (bac4 <idle+0x44>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ba86:	f105 0610 	add.w	r6, r5, #16
	__asm__ volatile(
    ba8a:	f04f 0220 	mov.w	r2, #32
    ba8e:	f3ef 8311 	mrs	r3, BASEPRI
    ba92:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    ba96:	692b      	ldr	r3, [r5, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ba98:	42b3      	cmp	r3, r6
    ba9a:	d00a      	beq.n	bab2 <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
    ba9c:	b14b      	cbz	r3, bab2 <idle+0x32>
    ba9e:	691c      	ldr	r4, [r3, #16]
    baa0:	1c63      	adds	r3, r4, #1
    baa2:	d008      	beq.n	bab6 <idle+0x36>
    baa4:	683b      	ldr	r3, [r7, #0]
    baa6:	42a3      	cmp	r3, r4
    baa8:	dd05      	ble.n	bab6 <idle+0x36>
	_kernel.idle = ticks;
    baaa:	61ac      	str	r4, [r5, #24]
	k_cpu_idle();
    baac:	f7f5 f9d8 	bl	e60 <k_cpu_idle>
    bab0:	e7eb      	b.n	ba8a <idle+0xa>
    bab2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
    bab6:	4620      	mov	r0, r4
    bab8:	f7f6 f996 	bl	1de8 <_timer_idle_enter>
    babc:	e7f5      	b.n	baaa <idle+0x2a>
    babe:	bf00      	nop
    bac0:	2000199c 	.word	0x2000199c
    bac4:	20003e08 	.word	0x20003e08

0000bac8 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
    bac8:	4802      	ldr	r0, [pc, #8]	; (bad4 <_bss_zero+0xc>)
    baca:	4a03      	ldr	r2, [pc, #12]	; (bad8 <_bss_zero+0x10>)
    bacc:	2100      	movs	r1, #0
    bace:	1a12      	subs	r2, r2, r0
    bad0:	f7f4 bdbe 	b.w	650 <memset>
    bad4:	20000000 	.word	0x20000000
    bad8:	20001c58 	.word	0x20001c58

0000badc <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
    badc:	4802      	ldr	r0, [pc, #8]	; (bae8 <_data_copy+0xc>)
    bade:	4a03      	ldr	r2, [pc, #12]	; (baec <_data_copy+0x10>)
    bae0:	4903      	ldr	r1, [pc, #12]	; (baf0 <_data_copy+0x14>)
    bae2:	1a12      	subs	r2, r2, r0
    bae4:	f7f4 bd88 	b.w	5f8 <memcpy>
    bae8:	20003b58 	.word	0x20003b58
    baec:	20003f44 	.word	0x20003f44
    baf0:	0000f0e4 	.word	0x0000f0e4

0000baf4 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    baf4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    baf6:	2002      	movs	r0, #2
    baf8:	f7ff ff7c 	bl	b9f4 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    bafc:	4908      	ldr	r1, [pc, #32]	; (bb20 <bg_thread_main+0x2c>)
    bafe:	4809      	ldr	r0, [pc, #36]	; (bb24 <bg_thread_main+0x30>)
    bb00:	f7f5 fc80 	bl	1404 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    bb04:	2003      	movs	r0, #3
    bb06:	f7ff ff75 	bl	b9f4 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
    bb0a:	f000 fe23 	bl	c754 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    bb0e:	f7f4 fe47 	bl	7a0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    bb12:	4a05      	ldr	r2, [pc, #20]	; (bb28 <bg_thread_main+0x34>)
    bb14:	7a13      	ldrb	r3, [r2, #8]
    bb16:	f023 0301 	bic.w	r3, r3, #1
    bb1a:	7213      	strb	r3, [r2, #8]
    bb1c:	bd08      	pop	{r3, pc}
    bb1e:	bf00      	nop
    bb20:	0000f098 	.word	0x0000f098
    bb24:	0000f0b4 	.word	0x0000f0b4
    bb28:	20001934 	.word	0x20001934

0000bb2c <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    bb2c:	b580      	push	{r7, lr}
    bb2e:	b086      	sub	sp, #24
    bb30:	4e32      	ldr	r6, [pc, #200]	; (bbfc <_Cstart+0xd0>)
    bb32:	af06      	add	r7, sp, #24
	_IntLibInit();
    bb34:	f7f4 ff4e 	bl	9d4 <_IntLibInit>
    bb38:	2324      	movs	r3, #36	; 0x24
    bb3a:	199a      	adds	r2, r3, r6
	list->head = (sys_dnode_t *)list;
    bb3c:	519a      	str	r2, [r3, r6]
    bb3e:	3308      	adds	r3, #8
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
    bb40:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
	list->tail = (sys_dnode_t *)list;
    bb44:	6052      	str	r2, [r2, #4]
    bb46:	d1f8      	bne.n	bb3a <_Cstart+0xe>
	_ready_q.cache = _main_thread;
    bb48:	4d2d      	ldr	r5, [pc, #180]	; (bc00 <_Cstart+0xd4>)
	_setup_new_thread(_main_thread, _main_stack,
    bb4a:	f8df 80dc 	ldr.w	r8, [pc, #220]	; bc28 <_Cstart+0xfc>
	_ready_q.cache = _main_thread;
    bb4e:	61f5      	str	r5, [r6, #28]
	_setup_new_thread(_main_thread, _main_stack,
    bb50:	2400      	movs	r4, #0
    bb52:	f04f 0901 	mov.w	r9, #1
    bb56:	4643      	mov	r3, r8
    bb58:	f44f 6280 	mov.w	r2, #1024	; 0x400
    bb5c:	4929      	ldr	r1, [pc, #164]	; (bc04 <_Cstart+0xd8>)
    bb5e:	f8cd 9010 	str.w	r9, [sp, #16]
    bb62:	4628      	mov	r0, r5
    bb64:	9403      	str	r4, [sp, #12]
    bb66:	9402      	str	r4, [sp, #8]
    bb68:	9401      	str	r4, [sp, #4]
    bb6a:	9400      	str	r4, [sp, #0]
    bb6c:	f000 fdaa 	bl	c6c4 <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    bb70:	7a6b      	ldrb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
    bb72:	4628      	mov	r0, r5
    bb74:	f023 0304 	bic.w	r3, r3, #4
    bb78:	726b      	strb	r3, [r5, #9]
    bb7a:	f000 f97d 	bl	be78 <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
    bb7e:	230f      	movs	r3, #15
    bb80:	9303      	str	r3, [sp, #12]
    bb82:	4921      	ldr	r1, [pc, #132]	; (bc08 <_Cstart+0xdc>)
    bb84:	f8cd 9010 	str.w	r9, [sp, #16]
    bb88:	9402      	str	r4, [sp, #8]
    bb8a:	9401      	str	r4, [sp, #4]
    bb8c:	9400      	str	r4, [sp, #0]
    bb8e:	4b1f      	ldr	r3, [pc, #124]	; (bc0c <_Cstart+0xe0>)
    bb90:	481f      	ldr	r0, [pc, #124]	; (bc10 <_Cstart+0xe4>)
    bb92:	f44f 72a0 	mov.w	r2, #320	; 0x140
    bb96:	f000 fd95 	bl	c6c4 <_setup_new_thread>
    bb9a:	4b1d      	ldr	r3, [pc, #116]	; (bc10 <_Cstart+0xe4>)
    bb9c:	4a1c      	ldr	r2, [pc, #112]	; (bc10 <_Cstart+0xe4>)
    bb9e:	7a5b      	ldrb	r3, [r3, #9]
    bba0:	f023 0304 	bic.w	r3, r3, #4
    bba4:	7253      	strb	r3, [r2, #9]
	_add_thread_to_ready_q(thr);
    bba6:	4610      	mov	r0, r2
    bba8:	f000 f966 	bl	be78 <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
    bbac:	4b19      	ldr	r3, [pc, #100]	; (bc14 <_Cstart+0xe8>)
    bbae:	6133      	str	r3, [r6, #16]
	list->tail = (sys_dnode_t *)list;
    bbb0:	6173      	str	r3, [r6, #20]
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
    bbb2:	4b19      	ldr	r3, [pc, #100]	; (bc18 <_Cstart+0xec>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    bbb4:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bbb8:	4b18      	ldr	r3, [pc, #96]	; (bc1c <_Cstart+0xf0>)
    bbba:	22e0      	movs	r2, #224	; 0xe0
    bbbc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    bbc0:	77dc      	strb	r4, [r3, #31]
    bbc2:	761c      	strb	r4, [r3, #24]
    bbc4:	765c      	strb	r4, [r3, #25]
    bbc6:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    bbc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    bbca:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    bbce:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    bbd0:	f7f5 f8b6 	bl	d40 <_FaultInit>
	_CpuIdleInit();
    bbd4:	f7f5 f93e 	bl	e54 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    bbd8:	4620      	mov	r0, r4
    bbda:	f7ff ff0b 	bl	b9f4 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    bbde:	4648      	mov	r0, r9
    bbe0:	f7ff ff08 	bl	b9f4 <_sys_device_do_config_level>
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    bbe4:	4b0e      	ldr	r3, [pc, #56]	; (bc20 <_Cstart+0xf4>)

	_current = main_thread;
    bbe6:	60b5      	str	r5, [r6, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    bbe8:	f023 0307 	bic.w	r3, r3, #7

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
    bbec:	4a0d      	ldr	r2, [pc, #52]	; (bc24 <_Cstart+0xf8>)
    bbee:	f383 8809 	msr	PSP, r3
    bbf2:	2100      	movs	r1, #0
    bbf4:	f381 8811 	msr	BASEPRI, r1
    bbf8:	4640      	mov	r0, r8
    bbfa:	4710      	bx	r2
    bbfc:	2000199c 	.word	0x2000199c
    bc00:	20001934 	.word	0x20001934
    bc04:	20002a18 	.word	0x20002a18
    bc08:	20002e18 	.word	0x20002e18
    bc0c:	0000ba81 	.word	0x0000ba81
    bc10:	200018cc 	.word	0x200018cc
    bc14:	200019ac 	.word	0x200019ac
    bc18:	20003758 	.word	0x20003758
    bc1c:	e000ed00 	.word	0xe000ed00
    bc20:	20002e18 	.word	0x20002e18
    bc24:	0000c65d 	.word	0x0000c65d
    bc28:	0000baf5 	.word	0x0000baf5

0000bc2c <get_bit_ptr>:

/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct k_mem_pool *p, int level, int bn, u32_t **word)
{
    bc2c:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
    bc2e:	7ac4      	ldrb	r4, [r0, #11]
    bc30:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
    bc32:	428c      	cmp	r4, r1
    bc34:	f04f 040c 	mov.w	r4, #12
    bc38:	bfb6      	itet	lt
    bc3a:	4361      	mullt	r1, r4
    bc3c:	fb04 0101 	mlage	r1, r4, r1, r0
    bc40:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
    bc42:	2420      	movs	r4, #32
    bc44:	fb92 f4f4 	sdiv	r4, r2, r4
    bc48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    bc4c:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
    bc4e:	f002 001f 	and.w	r0, r2, #31
    bc52:	bd10      	pop	{r4, pc}

0000bc54 <set_free_bit>:

static void set_free_bit(struct k_mem_pool *p, int level, int bn)
{
    bc54:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
    bc56:	ab01      	add	r3, sp, #4
    bc58:	f7ff ffe8 	bl	bc2c <get_bit_ptr>

	*word |= (1<<bit);
    bc5c:	9a01      	ldr	r2, [sp, #4]
    bc5e:	2301      	movs	r3, #1
    bc60:	fa03 f000 	lsl.w	r0, r3, r0
    bc64:	6813      	ldr	r3, [r2, #0]
    bc66:	4303      	orrs	r3, r0
    bc68:	6013      	str	r3, [r2, #0]
}
    bc6a:	b003      	add	sp, #12
    bc6c:	f85d fb04 	ldr.w	pc, [sp], #4

0000bc70 <init_static_pools>:
		set_free_bit(p, 0, i);
	}
}

int init_static_pools(struct device *unused)
{
    bc70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc74:	4c30      	ldr	r4, [pc, #192]	; (bd38 <init_static_pools+0xc8>)
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    bc76:	4e31      	ldr	r6, [pc, #196]	; (bd3c <init_static_pools+0xcc>)
		sys_dlist_init(&p->levels[i].free_list);
    bc78:	270c      	movs	r7, #12
    bc7a:	f1a4 0510 	sub.w	r5, r4, #16
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    bc7e:	42b5      	cmp	r5, r6
    bc80:	d302      	bcc.n	bc88 <init_static_pools+0x18>
		init_mem_pool(p);
	}

	return 0;
}
    bc82:	2000      	movs	r0, #0
    bc84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    bc88:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    bc8c:	f834 ec08 	ldrh.w	lr, [r4, #-8]
	u32_t *bits = p->buf + buflen;
    bc90:	f854 0c10 	ldr.w	r0, [r4, #-16]
	list->head = (sys_dnode_t *)list;
    bc94:	6024      	str	r4, [r4, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    bc96:	fb03 fe0e 	mul.w	lr, r3, lr
	u32_t *bits = p->buf + buflen;
    bc9a:	4470      	add	r0, lr
	list->tail = (sys_dnode_t *)list;
    bc9c:	6064      	str	r4, [r4, #4]
	for (i = 0; i < p->n_levels; i++) {
    bc9e:	2100      	movs	r1, #0
			bits += (nblocks + 31)/32;
    bca0:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
    bca4:	f814 2c06 	ldrb.w	r2, [r4, #-6]
    bca8:	4291      	cmp	r1, r2
    bcaa:	db07      	blt.n	bcbc <init_static_pools+0x4c>
    bcac:	f04f 0800 	mov.w	r8, #0
	for (i = 0; i < p->n_max; i++) {
    bcb0:	f834 3c08 	ldrh.w	r3, [r4, #-8]
    bcb4:	4598      	cmp	r8, r3
    bcb6:	db24      	blt.n	bd02 <init_static_pools+0x92>
    bcb8:	3418      	adds	r4, #24
    bcba:	e7de      	b.n	bc7a <init_static_pools+0xa>
		sys_dlist_init(&p->levels[i].free_list);
    bcbc:	f854 ac04 	ldr.w	sl, [r4, #-4]
		int nblocks = buflen / sz;
    bcc0:	fbbe f2f3 	udiv	r2, lr, r3
		sys_dlist_init(&p->levels[i].free_list);
    bcc4:	fb07 f901 	mul.w	r9, r7, r1
		if (nblocks < 32) {
    bcc8:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
    bcca:	eb0a 0809 	add.w	r8, sl, r9
		sz = _ALIGN4(sz / 4);
    bcce:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
    bcd2:	f108 0b04 	add.w	fp, r8, #4
			bits += (nblocks + 31)/32;
    bcd6:	bfc8      	it	gt
    bcd8:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
    bcda:	f103 0303 	add.w	r3, r3, #3
	list->head = (sys_dnode_t *)list;
    bcde:	f8c8 b004 	str.w	fp, [r8, #4]
	list->tail = (sys_dnode_t *)list;
    bce2:	f8c8 b008 	str.w	fp, [r8, #8]
			bits += (nblocks + 31)/32;
    bce6:	bfca      	itet	gt
    bce8:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
    bcec:	f804 1c05 	strble.w	r1, [r4, #-5]
			p->levels[i].bits_p = bits;
    bcf0:	f84a 0009 	strgt.w	r0, [sl, r9]
		sz = _ALIGN4(sz / 4);
    bcf4:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
    bcf8:	bfc8      	it	gt
    bcfa:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
    bcfe:	3101      	adds	r1, #1
    bd00:	e7d0      	b.n	bca4 <init_static_pools+0x34>
	return p->buf + lsz * block;
    bd02:	f854 2c0c 	ldr.w	r2, [r4, #-12]
		sys_dlist_append(&p->levels[0].free_list, block);
    bd06:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return p->buf + lsz * block;
    bd0a:	f854 0c10 	ldr.w	r0, [r4, #-16]
    bd0e:	fb02 f208 	mul.w	r2, r2, r8
		sys_dlist_append(&p->levels[0].free_list, block);
    bd12:	f103 0e04 	add.w	lr, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    bd16:	f840 e002 	str.w	lr, [r0, r2]
	return p->buf + lsz * block;
    bd1a:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
    bd1c:	689a      	ldr	r2, [r3, #8]
    bd1e:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
    bd20:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
    bd22:	4628      	mov	r0, r5
    bd24:	6011      	str	r1, [r2, #0]
	list->tail = node;
    bd26:	6099      	str	r1, [r3, #8]
    bd28:	4642      	mov	r2, r8
    bd2a:	2100      	movs	r1, #0
    bd2c:	f7ff ff92 	bl	bc54 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
    bd30:	f108 0801 	add.w	r8, r8, #1
    bd34:	e7bc      	b.n	bcb0 <init_static_pools+0x40>
    bd36:	bf00      	nop
    bd38:	20003eec 	.word	0x20003eec
    bd3c:	20003edc 	.word	0x20003edc

0000bd40 <k_queue_init>:
	list->head = NULL;
    bd40:	2300      	movs	r3, #0
    bd42:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
    bd44:	6043      	str	r3, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&queue->poll_events);
    bd46:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
    bd4a:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    bd4c:	60c3      	str	r3, [r0, #12]
    bd4e:	4770      	bx	lr

0000bd50 <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
    bd50:	b510      	push	{r4, lr}
    bd52:	f04f 0320 	mov.w	r3, #32
    bd56:	f3ef 8411 	mrs	r4, BASEPRI
    bd5a:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
    bd5e:	b931      	cbnz	r1, bd6e <k_queue_insert+0x1e>
	node->next = list->head;
    bd60:	6803      	ldr	r3, [r0, #0]
    bd62:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
    bd64:	6843      	ldr	r3, [r0, #4]
	list->head = node;
    bd66:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
    bd68:	b943      	cbnz	r3, bd7c <k_queue_insert+0x2c>
		list->tail = node;
    bd6a:	6042      	str	r2, [r0, #4]
    bd6c:	e006      	b.n	bd7c <k_queue_insert+0x2c>
	} else if (!prev->next) {
    bd6e:	680b      	ldr	r3, [r1, #0]
	node->next = NULL;
    bd70:	6013      	str	r3, [r2, #0]
	} else if (!prev->next) {
    bd72:	b98b      	cbnz	r3, bd98 <k_queue_insert+0x48>
	if (!list->tail) {
    bd74:	6843      	ldr	r3, [r0, #4]
    bd76:	b96b      	cbnz	r3, bd94 <k_queue_insert+0x44>
		list->tail = node;
    bd78:	6042      	str	r2, [r0, #4]
		list->head = node;
    bd7a:	6002      	str	r2, [r0, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
    bd7c:	2104      	movs	r1, #4
    bd7e:	3008      	adds	r0, #8
    bd80:	f000 ff6c 	bl	cc5c <_handle_obj_poll_events>
#endif /* !CONFIG_POLL */

	sys_slist_insert(&queue->data_q, prev, data);

#if defined(CONFIG_POLL)
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    bd84:	b150      	cbz	r0, bd9c <k_queue_insert+0x4c>
	_update_time_slice_before_swap();
    bd86:	f000 fa4b 	bl	c220 <_update_time_slice_before_swap>
	return __swap(key);
    bd8a:	4620      	mov	r0, r4
		return;
	}
#endif /* CONFIG_POLL */

	irq_unlock(key);
}
    bd8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bd90:	f7f4 be2c 	b.w	9ec <__swap>
		list->tail->next = node;
    bd94:	601a      	str	r2, [r3, #0]
    bd96:	e7e8      	b.n	bd6a <k_queue_insert+0x1a>
		prev->next = node;
    bd98:	600a      	str	r2, [r1, #0]
    bd9a:	e7ef      	b.n	bd7c <k_queue_insert+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bd9c:	f384 8811 	msr	BASEPRI, r4
    bda0:	bd10      	pop	{r4, pc}

0000bda2 <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, queue->data_q.tail, data);
    bda2:	460a      	mov	r2, r1
    bda4:	6841      	ldr	r1, [r0, #4]
    bda6:	f7ff bfd3 	b.w	bd50 <k_queue_insert>

0000bdaa <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, NULL, data);
    bdaa:	460a      	mov	r2, r1
    bdac:	2100      	movs	r1, #0
    bdae:	f7ff bfcf 	b.w	bd50 <k_queue_insert>

0000bdb2 <k_queue_append_list>:
}

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
    bdb2:	b510      	push	{r4, lr}
	__asm__ volatile(
    bdb4:	f04f 0320 	mov.w	r3, #32
    bdb8:	f3ef 8411 	mrs	r4, BASEPRI
    bdbc:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
    bdc0:	6843      	ldr	r3, [r0, #4]
    bdc2:	b96b      	cbnz	r3, bde0 <k_queue_append_list+0x2e>
		list->head = (sys_snode_t *)head;
    bdc4:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
    bdc6:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
    bdc8:	2104      	movs	r1, #4
    bdca:	3008      	adds	r0, #8
    bdcc:	f000 ff46 	bl	cc5c <_handle_obj_poll_events>
			return;
		}
	}
#else
	sys_slist_append_list(&queue->data_q, head, tail);
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    bdd0:	b140      	cbz	r0, bde4 <k_queue_append_list+0x32>
	_update_time_slice_before_swap();
    bdd2:	f000 fa25 	bl	c220 <_update_time_slice_before_swap>
	return __swap(key);
    bdd6:	4620      	mov	r0, r4
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
    bdd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bddc:	f7f4 be06 	b.w	9ec <__swap>
		list->tail->next = (sys_snode_t *)head;
    bde0:	6019      	str	r1, [r3, #0]
    bde2:	e7f0      	b.n	bdc6 <k_queue_append_list+0x14>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bde4:	f384 8811 	msr	BASEPRI, r4
    bde8:	bd10      	pop	{r4, pc}

0000bdea <k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
    bdea:	b530      	push	{r4, r5, lr}
    bdec:	4604      	mov	r4, r0
    bdee:	b087      	sub	sp, #28
    bdf0:	460d      	mov	r5, r1
	__asm__ volatile(
    bdf2:	f04f 0220 	mov.w	r2, #32
    bdf6:	f3ef 8311 	mrs	r3, BASEPRI
    bdfa:	f382 8811 	msr	BASEPRI, r2
    bdfe:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
    be00:	b152      	cbz	r2, be18 <k_queue_get+0x2e>
	list->head = node->next;
    be02:	6811      	ldr	r1, [r2, #0]
    be04:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
    be06:	6840      	ldr	r0, [r0, #4]
    be08:	4282      	cmp	r2, r0
		list->tail = list->head;
    be0a:	bf08      	it	eq
    be0c:	6061      	streq	r1, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    be0e:	f383 8811 	msr	BASEPRI, r3
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
    be12:	4610      	mov	r0, r2
    be14:	b007      	add	sp, #28
    be16:	bd30      	pop	{r4, r5, pc}
	if (timeout == K_NO_WAIT) {
    be18:	b919      	cbnz	r1, be22 <k_queue_get+0x38>
    be1a:	f383 8811 	msr	BASEPRI, r3
			return NULL;
    be1e:	2200      	movs	r2, #0
    be20:	e7f7      	b.n	be12 <k_queue_get+0x28>
    be22:	f383 8811 	msr	BASEPRI, r3
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
    be26:	2104      	movs	r1, #4
    be28:	4603      	mov	r3, r0
    be2a:	eb0d 0001 	add.w	r0, sp, r1
    be2e:	f000 fe5d 	bl	caec <k_poll_event_init>
		event.state = K_POLL_STATE_NOT_READY;
    be32:	f89d 3011 	ldrb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
    be36:	462a      	mov	r2, r5
		event.state = K_POLL_STATE_NOT_READY;
    be38:	f36f 1307 	bfc	r3, #4, #4
		err = k_poll(&event, 1, timeout);
    be3c:	2101      	movs	r1, #1
    be3e:	a801      	add	r0, sp, #4
		event.state = K_POLL_STATE_NOT_READY;
    be40:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
    be44:	f000 fe66 	bl	cb14 <k_poll>
		if (err) {
    be48:	2800      	cmp	r0, #0
    be4a:	d1e8      	bne.n	be1e <k_queue_get+0x34>
	__asm__ volatile(
    be4c:	f04f 0320 	mov.w	r3, #32
    be50:	f3ef 8111 	mrs	r1, BASEPRI
    be54:	f383 8811 	msr	BASEPRI, r3
    be58:	6822      	ldr	r2, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    be5a:	b12a      	cbz	r2, be68 <k_queue_get+0x7e>
	if (list->tail == node) {
    be5c:	6860      	ldr	r0, [r4, #4]
	list->head = node->next;
    be5e:	6813      	ldr	r3, [r2, #0]
    be60:	6023      	str	r3, [r4, #0]
	if (list->tail == node) {
    be62:	4282      	cmp	r2, r0
		list->tail = list->head;
    be64:	bf08      	it	eq
    be66:	6063      	streq	r3, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    be68:	f381 8811 	msr	BASEPRI, r1
	} while (!val && timeout == K_FOREVER);
    be6c:	2a00      	cmp	r2, #0
    be6e:	d1d0      	bne.n	be12 <k_queue_get+0x28>
    be70:	1c6b      	adds	r3, r5, #1
    be72:	d0de      	beq.n	be32 <k_queue_get+0x48>
    be74:	e7d3      	b.n	be1e <k_queue_get+0x34>
	...

0000be78 <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
    be78:	b530      	push	{r4, r5, lr}
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
    be7a:	f990 300a 	ldrsb.w	r3, [r0, #10]
	*bmap |= _get_ready_q_prio_bit(prio);
    be7e:	4911      	ldr	r1, [pc, #68]	; (bec4 <_add_thread_to_ready_q+0x4c>)
	return prio + _NUM_COOP_PRIO;
    be80:	f103 0410 	add.w	r4, r3, #16
	return (prio + _NUM_COOP_PRIO) >> 5;
    be84:	1162      	asrs	r2, r4, #5
    be86:	3206      	adds	r2, #6
    be88:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    be8c:	f004 051f 	and.w	r5, r4, #31
    be90:	2401      	movs	r4, #1
    be92:	40ac      	lsls	r4, r5
    be94:	6895      	ldr	r5, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    be96:	3314      	adds	r3, #20
	*bmap |= _get_ready_q_prio_bit(prio);
    be98:	432c      	orrs	r4, r5
	sys_dlist_t *q = &_ready_q.q[q_index];
    be9a:	00db      	lsls	r3, r3, #3
	*bmap |= _get_ready_q_prio_bit(prio);
    be9c:	6094      	str	r4, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    be9e:	1d1a      	adds	r2, r3, #4
    bea0:	440a      	add	r2, r1
	node->prev = list->tail;
    bea2:	440b      	add	r3, r1
	node->next = list;
    bea4:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
    bea6:	689a      	ldr	r2, [r3, #8]
    bea8:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
    beaa:	689a      	ldr	r2, [r3, #8]
    beac:	6010      	str	r0, [r2, #0]
	list->tail = node;
    beae:	6098      	str	r0, [r3, #8]
	sys_dlist_append(q, &thread->base.k_q_node);

# ifndef CONFIG_SMP
	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
    beb0:	69cb      	ldr	r3, [r1, #28]
    beb2:	f990 400a 	ldrsb.w	r4, [r0, #10]
    beb6:	f993 200a 	ldrsb.w	r2, [r3, #10]
    beba:	4294      	cmp	r4, r2
    bebc:	bfa8      	it	ge
    bebe:	4618      	movge	r0, r3
    bec0:	61c8      	str	r0, [r1, #28]
    bec2:	bd30      	pop	{r4, r5, pc}
    bec4:	2000199c 	.word	0x2000199c

0000bec8 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    bec8:	7a42      	ldrb	r2, [r0, #9]
    beca:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    bece:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    bed2:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    bed4:	d104      	bne.n	bee0 <_ready_thread+0x18>
    bed6:	6a03      	ldr	r3, [r0, #32]
    bed8:	3301      	adds	r3, #1
    beda:	d101      	bne.n	bee0 <_ready_thread+0x18>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    bedc:	f7ff bfcc 	b.w	be78 <_add_thread_to_ready_q>
    bee0:	4770      	bx	lr
	...

0000bee4 <_add_timeout>:
{
    bee4:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    bee6:	610b      	str	r3, [r1, #16]
	timeout->thread = thread;
    bee8:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    beea:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
    beec:	bb13      	cbnz	r3, bf34 <_add_timeout+0x50>
	__asm__ volatile(
    beee:	f04f 0220 	mov.w	r2, #32
    bef2:	f3ef 8411 	mrs	r4, BASEPRI
    bef6:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
    befa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    befe:	610a      	str	r2, [r1, #16]
	if (thread) {
    bf00:	b180      	cbz	r0, bf24 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
    bf02:	68ca      	ldr	r2, [r1, #12]
    bf04:	b14a      	cbz	r2, bf1a <_add_timeout+0x36>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    bf06:	e890 0006 	ldmia.w	r0, {r1, r2}
    bf0a:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    bf0c:	6801      	ldr	r1, [r0, #0]
    bf0e:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    bf10:	7a42      	ldrb	r2, [r0, #9]
		thread->base.timeout.wait_q = NULL;
    bf12:	61c3      	str	r3, [r0, #28]
    bf14:	f022 0202 	bic.w	r2, r2, #2
    bf18:	7242      	strb	r2, [r0, #9]
		_ready_thread(thread);
    bf1a:	f7ff ffd5 	bl	bec8 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bf1e:	f384 8811 	msr	BASEPRI, r4
    bf22:	bd70      	pop	{r4, r5, r6, pc}
    bf24:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
    bf28:	694b      	ldr	r3, [r1, #20]
    bf2a:	b32b      	cbz	r3, bf78 <_add_timeout+0x94>
			timeout->func(timeout);
    bf2c:	4608      	mov	r0, r1
}
    bf2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
    bf32:	4718      	bx	r3
	return list->head == list;
    bf34:	4a11      	ldr	r2, [pc, #68]	; (bf7c <_add_timeout+0x98>)
    bf36:	4610      	mov	r0, r2
    bf38:	f850 3f10 	ldr.w	r3, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bf3c:	4283      	cmp	r3, r0
    bf3e:	d10c      	bne.n	bf5a <_add_timeout+0x76>
	node->next = list;
    bf40:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    bf42:	6953      	ldr	r3, [r2, #20]
    bf44:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    bf46:	6953      	ldr	r3, [r2, #20]
    bf48:	6019      	str	r1, [r3, #0]
	list->tail = node;
    bf4a:	6151      	str	r1, [r2, #20]
    bf4c:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
    bf4e:	1b64      	subs	r4, r4, r5
    bf50:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
    bf52:	6954      	ldr	r4, [r2, #20]
    bf54:	42a3      	cmp	r3, r4
    bf56:	d0f3      	beq.n	bf40 <_add_timeout+0x5c>
    bf58:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    bf5a:	2b00      	cmp	r3, #0
    bf5c:	d0f0      	beq.n	bf40 <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
    bf5e:	690c      	ldr	r4, [r1, #16]
    bf60:	691d      	ldr	r5, [r3, #16]
    bf62:	42ac      	cmp	r4, r5
    bf64:	dcf3      	bgt.n	bf4e <_add_timeout+0x6a>
		node->prev = insert_point->prev;
    bf66:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    bf68:	1b2c      	subs	r4, r5, r4
    bf6a:	611c      	str	r4, [r3, #16]
    bf6c:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    bf6e:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    bf70:	685a      	ldr	r2, [r3, #4]
    bf72:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    bf74:	6059      	str	r1, [r3, #4]
    bf76:	bd70      	pop	{r4, r5, r6, pc}
    bf78:	bd70      	pop	{r4, r5, r6, pc}
    bf7a:	bf00      	nop
    bf7c:	2000199c 	.word	0x2000199c

0000bf80 <_remove_thread_from_ready_q>:
	node->prev->next = node->next;
    bf80:	e890 000a 	ldmia.w	r0, {r1, r3}
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
    bf84:	b510      	push	{r4, lr}
#if defined(CONFIG_MULTITHREADING) && !defined(CONFIG_SMP)
	int q_index = _get_ready_q_q_index(thread->base.prio);
    bf86:	f990 200a 	ldrsb.w	r2, [r0, #10]
    bf8a:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
    bf8c:	6801      	ldr	r1, [r0, #0]
	sys_dlist_t *q = &_ready_q.q[q_index];
    bf8e:	3214      	adds	r2, #20
    bf90:	604b      	str	r3, [r1, #4]
    bf92:	4b14      	ldr	r3, [pc, #80]	; (bfe4 <_remove_thread_from_ready_q+0x64>)
    bf94:	00d2      	lsls	r2, r2, #3
    bf96:	1d11      	adds	r1, r2, #4
	return list->head == list;
    bf98:	441a      	add	r2, r3
    bf9a:	4419      	add	r1, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
    bf9c:	6852      	ldr	r2, [r2, #4]
    bf9e:	428a      	cmp	r2, r1
    bfa0:	d10f      	bne.n	bfc2 <_remove_thread_from_ready_q+0x42>
		clear_ready_q_prio_bit(thread->base.prio);
    bfa2:	f990 100a 	ldrsb.w	r1, [r0, #10]
	return (prio + _NUM_COOP_PRIO) >> 5;
    bfa6:	3110      	adds	r1, #16
    bfa8:	114a      	asrs	r2, r1, #5
	*bmap &= ~_get_ready_q_prio_bit(prio);
    bfaa:	3206      	adds	r2, #6
    bfac:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    bfb0:	2401      	movs	r4, #1
    bfb2:	f001 011f 	and.w	r1, r1, #31
    bfb6:	fa04 f101 	lsl.w	r1, r4, r1
    bfba:	6894      	ldr	r4, [r2, #8]
    bfbc:	ea24 0401 	bic.w	r4, r4, r1
    bfc0:	6094      	str	r4, [r2, #8]
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? get_ready_q_head() : *cache;
    bfc2:	69da      	ldr	r2, [r3, #28]
    bfc4:	4290      	cmp	r0, r2
    bfc6:	d10b      	bne.n	bfe0 <_remove_thread_from_ready_q+0x60>
	return __builtin_ffs(op);
    bfc8:	6a19      	ldr	r1, [r3, #32]
    bfca:	fa91 f2a1 	rbit	r2, r1
    bfce:	2900      	cmp	r1, #0
    bfd0:	fab2 f282 	clz	r2, r2
    bfd4:	bf08      	it	eq
    bfd6:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    bfda:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    bfde:	6a52      	ldr	r2, [r2, #36]	; 0x24
    bfe0:	61da      	str	r2, [r3, #28]
    bfe2:	bd10      	pop	{r4, pc}
    bfe4:	2000199c 	.word	0x2000199c

0000bfe8 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
    bfe8:	b430      	push	{r4, r5}
    bfea:	680c      	ldr	r4, [r1, #0]
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    bfec:	42a1      	cmp	r1, r4
    bfee:	bf08      	it	eq
    bff0:	2400      	moveq	r4, #0
    bff2:	b314      	cbz	r4, c03a <_pend_thread+0x52>
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
    bff4:	f990 500a 	ldrsb.w	r5, [r0, #10]
    bff8:	f994 300a 	ldrsb.w	r3, [r4, #10]
    bffc:	429d      	cmp	r5, r3
    bffe:	da16      	bge.n	c02e <_pend_thread+0x46>
		node->prev = insert_point->prev;
    c000:	6863      	ldr	r3, [r4, #4]
    c002:	6043      	str	r3, [r0, #4]
		node->next = insert_point;
    c004:	6004      	str	r4, [r0, #0]
		insert_point->prev->next = node;
    c006:	6863      	ldr	r3, [r4, #4]
    c008:	6018      	str	r0, [r3, #0]
		insert_point->prev = node;
    c00a:	6060      	str	r0, [r4, #4]
	thread->base.thread_state |= _THREAD_PENDING;
    c00c:	7a43      	ldrb	r3, [r0, #9]
    c00e:	f043 0302 	orr.w	r3, r3, #2
    c012:	7243      	strb	r3, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
    c014:	1c53      	adds	r3, r2, #1
    c016:	d017      	beq.n	c048 <_pend_thread+0x60>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    c018:	3209      	adds	r2, #9
    c01a:	230a      	movs	r3, #10
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
    c01c:	bc30      	pop	{r4, r5}
    c01e:	fbb2 f3f3 	udiv	r3, r2, r3
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    c022:	460a      	mov	r2, r1
    c024:	3301      	adds	r3, #1
    c026:	f100 0110 	add.w	r1, r0, #16
    c02a:	f7ff bf5b 	b.w	bee4 <_add_timeout>
	return (node == list->tail) ? NULL : node->next;
    c02e:	684b      	ldr	r3, [r1, #4]
    c030:	429c      	cmp	r4, r3
    c032:	d002      	beq.n	c03a <_pend_thread+0x52>
    c034:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    c036:	2c00      	cmp	r4, #0
    c038:	d1db      	bne.n	bff2 <_pend_thread+0xa>
	node->next = list;
    c03a:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    c03c:	684b      	ldr	r3, [r1, #4]
    c03e:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    c040:	684b      	ldr	r3, [r1, #4]
    c042:	6018      	str	r0, [r3, #0]
	list->tail = node;
    c044:	6048      	str	r0, [r1, #4]
    c046:	e7e1      	b.n	c00c <_pend_thread+0x24>
}
    c048:	bc30      	pop	{r4, r5}
    c04a:	4770      	bx	lr

0000c04c <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
    c04c:	b570      	push	{r4, r5, r6, lr}
	_remove_thread_from_ready_q(_current);
    c04e:	4c06      	ldr	r4, [pc, #24]	; (c068 <_pend_current_thread+0x1c>)
{
    c050:	460e      	mov	r6, r1
    c052:	4605      	mov	r5, r0
	_remove_thread_from_ready_q(_current);
    c054:	68a0      	ldr	r0, [r4, #8]
    c056:	f7ff ff93 	bl	bf80 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
    c05a:	4632      	mov	r2, r6
    c05c:	4629      	mov	r1, r5
    c05e:	68a0      	ldr	r0, [r4, #8]
}
    c060:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_pend_thread(_current, wait_q, timeout);
    c064:	f7ff bfc0 	b.w	bfe8 <_pend_thread>
    c068:	2000199c 	.word	0x2000199c

0000c06c <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
    c06c:	4a09      	ldr	r2, [pc, #36]	; (c094 <__must_switch_threads+0x28>)
    c06e:	6a11      	ldr	r1, [r2, #32]

#ifdef CONFIG_KERNEL_DEBUG
	dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
    c070:	6892      	ldr	r2, [r2, #8]
    c072:	2900      	cmp	r1, #0
    c074:	fa91 f3a1 	rbit	r3, r1
    c078:	f992 000a 	ldrsb.w	r0, [r2, #10]
    c07c:	fab3 f383 	clz	r3, r3
    c080:	bf08      	it	eq
    c082:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
    c086:	3b10      	subs	r3, #16
#else
	return 0;
#endif
}
    c088:	4298      	cmp	r0, r3
    c08a:	bfd4      	ite	le
    c08c:	2000      	movle	r0, #0
    c08e:	2001      	movgt	r0, #1
    c090:	4770      	bx	lr
    c092:	bf00      	nop
    c094:	2000199c 	.word	0x2000199c

0000c098 <_reschedule_threads>:
{
    c098:	b510      	push	{r4, lr}
	return _is_preempt(_current) && __must_switch_threads();
    c09a:	4b0a      	ldr	r3, [pc, #40]	; (c0c4 <_reschedule_threads+0x2c>)
    c09c:	689b      	ldr	r3, [r3, #8]
    c09e:	895b      	ldrh	r3, [r3, #10]
    c0a0:	2b7f      	cmp	r3, #127	; 0x7f
    c0a2:	4604      	mov	r4, r0
    c0a4:	d802      	bhi.n	c0ac <_reschedule_threads+0x14>
    c0a6:	f7ff ffe1 	bl	c06c <__must_switch_threads>
    c0aa:	b910      	cbnz	r0, c0b2 <_reschedule_threads+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c0ac:	f384 8811 	msr	BASEPRI, r4
    c0b0:	bd10      	pop	{r4, pc}
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    c0b2:	4b05      	ldr	r3, [pc, #20]	; (c0c8 <_reschedule_threads+0x30>)
    c0b4:	2200      	movs	r2, #0
    c0b6:	4620      	mov	r0, r4
}
    c0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
    c0bc:	601a      	str	r2, [r3, #0]
    c0be:	f7f4 bc95 	b.w	9ec <__swap>
    c0c2:	bf00      	nop
    c0c4:	2000199c 	.word	0x2000199c
    c0c8:	20001bd4 	.word	0x20001bd4

0000c0cc <k_sched_unlock>:
	__asm__ volatile(
    c0cc:	f04f 0320 	mov.w	r3, #32
    c0d0:	f3ef 8011 	mrs	r0, BASEPRI
    c0d4:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
    c0d8:	4b03      	ldr	r3, [pc, #12]	; (c0e8 <k_sched_unlock+0x1c>)
    c0da:	689a      	ldr	r2, [r3, #8]
    c0dc:	7ad3      	ldrb	r3, [r2, #11]
    c0de:	3301      	adds	r3, #1
    c0e0:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
    c0e2:	f7ff bfd9 	b.w	c098 <_reschedule_threads>
    c0e6:	bf00      	nop
    c0e8:	2000199c 	.word	0x2000199c

0000c0ec <_move_thread_to_end_of_prio_q>:
	int q_index = _get_ready_q_q_index(thread->base.prio);
    c0ec:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
    c0f0:	4a12      	ldr	r2, [pc, #72]	; (c13c <_move_thread_to_end_of_prio_q+0x50>)
{
    c0f2:	b530      	push	{r4, r5, lr}
	sys_dlist_t *q = &_ready_q.q[q_index];
    c0f4:	3314      	adds	r3, #20
    c0f6:	00db      	lsls	r3, r3, #3
    c0f8:	1d19      	adds	r1, r3, #4
    c0fa:	4411      	add	r1, r2
	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
    c0fc:	684c      	ldr	r4, [r1, #4]
    c0fe:	42a0      	cmp	r0, r4
    c100:	d01b      	beq.n	c13a <_move_thread_to_end_of_prio_q+0x4e>
	node->prev->next = node->next;
    c102:	6844      	ldr	r4, [r0, #4]
    c104:	6805      	ldr	r5, [r0, #0]
    c106:	6025      	str	r5, [r4, #0]
	node->next->prev = node->prev;
    c108:	6805      	ldr	r5, [r0, #0]
	node->prev = list->tail;
    c10a:	4413      	add	r3, r2
	node->next->prev = node->prev;
    c10c:	606c      	str	r4, [r5, #4]
	node->next = list;
    c10e:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    c110:	6899      	ldr	r1, [r3, #8]
    c112:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
    c114:	6899      	ldr	r1, [r3, #8]
    c116:	6008      	str	r0, [r1, #0]
	list->tail = node;
    c118:	6098      	str	r0, [r3, #8]
	*cache = *cache == thread ? get_ready_q_head() : *cache;
    c11a:	69d3      	ldr	r3, [r2, #28]
    c11c:	4298      	cmp	r0, r3
    c11e:	d10b      	bne.n	c138 <_move_thread_to_end_of_prio_q+0x4c>
	return __builtin_ffs(op);
    c120:	6a11      	ldr	r1, [r2, #32]
    c122:	fa91 f3a1 	rbit	r3, r1
    c126:	2900      	cmp	r1, #0
    c128:	fab3 f383 	clz	r3, r3
    c12c:	bf08      	it	eq
    c12e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    c132:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c138:	61d3      	str	r3, [r2, #28]
    c13a:	bd30      	pop	{r4, r5, pc}
    c13c:	2000199c 	.word	0x2000199c

0000c140 <_impl_k_yield>:
{
    c140:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    c142:	f04f 0320 	mov.w	r3, #32
    c146:	f3ef 8511 	mrs	r5, BASEPRI
    c14a:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
    c14e:	4c09      	ldr	r4, [pc, #36]	; (c174 <_impl_k_yield+0x34>)
    c150:	68a0      	ldr	r0, [r4, #8]
    c152:	f7ff ffcb 	bl	c0ec <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
    c156:	68a2      	ldr	r2, [r4, #8]
    c158:	69e3      	ldr	r3, [r4, #28]
    c15a:	429a      	cmp	r2, r3
    c15c:	d102      	bne.n	c164 <_impl_k_yield+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c15e:	f385 8811 	msr	BASEPRI, r5
    c162:	bd38      	pop	{r3, r4, r5, pc}
	_time_slice_elapsed = 0;
    c164:	4b04      	ldr	r3, [pc, #16]	; (c178 <_impl_k_yield+0x38>)
    c166:	2200      	movs	r2, #0
    c168:	601a      	str	r2, [r3, #0]
    c16a:	4628      	mov	r0, r5
}
    c16c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c170:	f7f4 bc3c 	b.w	9ec <__swap>
    c174:	2000199c 	.word	0x2000199c
    c178:	20001bd4 	.word	0x20001bd4

0000c17c <_impl_k_sleep>:
{
    c17c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (duration == 0) {
    c17e:	b918      	cbnz	r0, c188 <_impl_k_sleep+0xc>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    c180:	f7ff ffde 	bl	c140 <_impl_k_yield>
}
    c184:	b003      	add	sp, #12
    c186:	bd30      	pop	{r4, r5, pc}
    c188:	230a      	movs	r3, #10
    c18a:	3009      	adds	r0, #9
    c18c:	fbb0 f0f3 	udiv	r0, r0, r3
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
    c190:	3001      	adds	r0, #1
    c192:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
    c194:	f04f 0320 	mov.w	r3, #32
    c198:	f3ef 8511 	mrs	r5, BASEPRI
    c19c:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
    c1a0:	4c08      	ldr	r4, [pc, #32]	; (c1c4 <_impl_k_sleep+0x48>)
    c1a2:	68a0      	ldr	r0, [r4, #8]
    c1a4:	f7ff feec 	bl	bf80 <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
    c1a8:	68a0      	ldr	r0, [r4, #8]
    c1aa:	9b01      	ldr	r3, [sp, #4]
    c1ac:	f100 0110 	add.w	r1, r0, #16
    c1b0:	2200      	movs	r2, #0
    c1b2:	f7ff fe97 	bl	bee4 <_add_timeout>
	_time_slice_elapsed = 0;
    c1b6:	4b04      	ldr	r3, [pc, #16]	; (c1c8 <_impl_k_sleep+0x4c>)
    c1b8:	2200      	movs	r2, #0
    c1ba:	4628      	mov	r0, r5
    c1bc:	601a      	str	r2, [r3, #0]
    c1be:	f7f4 fc15 	bl	9ec <__swap>
    c1c2:	e7df      	b.n	c184 <_impl_k_sleep+0x8>
    c1c4:	2000199c 	.word	0x2000199c
    c1c8:	20001bd4 	.word	0x20001bd4

0000c1cc <_impl_k_current_get>:
}
    c1cc:	4b01      	ldr	r3, [pc, #4]	; (c1d4 <_impl_k_current_get+0x8>)
    c1ce:	6898      	ldr	r0, [r3, #8]
    c1d0:	4770      	bx	lr
    c1d2:	bf00      	nop
    c1d4:	2000199c 	.word	0x2000199c

0000c1d8 <_is_thread_time_slicing>:
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    c1d8:	4b0d      	ldr	r3, [pc, #52]	; (c210 <_is_thread_time_slicing+0x38>)
    c1da:	681b      	ldr	r3, [r3, #0]
    c1dc:	2b00      	cmp	r3, #0
    c1de:	dd14      	ble.n	c20a <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
    c1e0:	4b0c      	ldr	r3, [pc, #48]	; (c214 <_is_thread_time_slicing+0x3c>)
    c1e2:	681b      	ldr	r3, [r3, #0]
    c1e4:	4298      	cmp	r0, r3
    c1e6:	d010      	beq.n	c20a <_is_thread_time_slicing+0x32>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    c1e8:	4a0b      	ldr	r2, [pc, #44]	; (c218 <_is_thread_time_slicing+0x40>)
    c1ea:	f990 300a 	ldrsb.w	r3, [r0, #10]
    c1ee:	6812      	ldr	r2, [r2, #0]
    c1f0:	4293      	cmp	r3, r2
    c1f2:	db0a      	blt.n	c20a <_is_thread_time_slicing+0x32>
	return list->head != list->tail;
    c1f4:	f103 0214 	add.w	r2, r3, #20
    c1f8:	4b08      	ldr	r3, [pc, #32]	; (c21c <_is_thread_time_slicing+0x44>)
    c1fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    c1fe:	6858      	ldr	r0, [r3, #4]
    c200:	689b      	ldr	r3, [r3, #8]
    c202:	1ac0      	subs	r0, r0, r3
    c204:	bf18      	it	ne
    c206:	2001      	movne	r0, #1
	return sys_dlist_has_multiple_nodes(q);
    c208:	4770      	bx	lr
		return 0;
    c20a:	2000      	movs	r0, #0
}
    c20c:	4770      	bx	lr
    c20e:	bf00      	nop
    c210:	20001ac0 	.word	0x20001ac0
    c214:	0000f094 	.word	0x0000f094
    c218:	20001ac4 	.word	0x20001ac4
    c21c:	2000199c 	.word	0x2000199c

0000c220 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
    c220:	4b01      	ldr	r3, [pc, #4]	; (c228 <_update_time_slice_before_swap+0x8>)
    c222:	2200      	movs	r2, #0
    c224:	601a      	str	r2, [r3, #0]
    c226:	4770      	bx	lr
    c228:	20001bd4 	.word	0x20001bd4

0000c22c <_unpend_first_thread>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    c22c:	4a10      	ldr	r2, [pc, #64]	; (c270 <_unpend_first_thread+0x44>)
    c22e:	6812      	ldr	r2, [r2, #0]
}

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
    c230:	4603      	mov	r3, r0
    c232:	6800      	ldr	r0, [r0, #0]
	if (_handling_timeouts) {
    c234:	b16a      	cbz	r2, c252 <_unpend_first_thread+0x26>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c236:	4283      	cmp	r3, r0
    c238:	bf08      	it	eq
    c23a:	2000      	moveq	r0, #0
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    c23c:	b908      	cbnz	r0, c242 <_unpend_first_thread+0x16>
    c23e:	2000      	movs	r0, #0
    c240:	4770      	bx	lr
			if (_is_thread_timeout_expired(thread)) {
    c242:	6a02      	ldr	r2, [r0, #32]
    c244:	3202      	adds	r2, #2
    c246:	d107      	bne.n	c258 <_unpend_first_thread+0x2c>
	return (node == list->tail) ? NULL : node->next;
    c248:	685a      	ldr	r2, [r3, #4]
    c24a:	4290      	cmp	r0, r2
    c24c:	d0f7      	beq.n	c23e <_unpend_first_thread+0x12>
    c24e:	6800      	ldr	r0, [r0, #0]
    c250:	e7f4      	b.n	c23c <_unpend_first_thread+0x10>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c252:	4283      	cmp	r3, r0
    c254:	d00a      	beq.n	c26c <_unpend_first_thread+0x40>
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
    c256:	b150      	cbz	r0, c26e <_unpend_first_thread+0x42>
	node->prev->next = node->next;
    c258:	e890 000c 	ldmia.w	r0, {r2, r3}
    c25c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c25e:	6802      	ldr	r2, [r0, #0]
    c260:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    c262:	7a43      	ldrb	r3, [r0, #9]
    c264:	f023 0302 	bic.w	r3, r3, #2
    c268:	7243      	strb	r3, [r0, #9]
    c26a:	4770      	bx	lr
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c26c:	4610      	mov	r0, r2
		_unpend_thread(thread);
	}

	return thread;
}
    c26e:	4770      	bx	lr
    c270:	20001bd0 	.word	0x20001bd0

0000c274 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
    c274:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
    c278:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    c27a:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    c27c:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    c27e:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
    c280:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
    c282:	6143      	str	r3, [r0, #20]
    c284:	4770      	bx	lr
	...

0000c288 <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
    c288:	b570      	push	{r4, r5, r6, lr}
    c28a:	4605      	mov	r5, r0
    c28c:	f04f 0320 	mov.w	r3, #32
    c290:	f3ef 8611 	mrs	r6, BASEPRI
    c294:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
    c298:	f7ff ffc8 	bl	c22c <_unpend_first_thread>
	if (!thread) {
    c29c:	4604      	mov	r4, r0
    c29e:	b998      	cbnz	r0, c2c8 <_impl_k_sem_give+0x40>
	sem->count += (sem->count != sem->limit);
    c2a0:	68ab      	ldr	r3, [r5, #8]
    c2a2:	68ea      	ldr	r2, [r5, #12]
    c2a4:	429a      	cmp	r2, r3
    c2a6:	bf18      	it	ne
    c2a8:	3301      	addne	r3, #1
    c2aa:	60ab      	str	r3, [r5, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
    c2ac:	2102      	movs	r1, #2
    c2ae:	f105 0010 	add.w	r0, r5, #16
    c2b2:	f000 fcd3 	bl	cc5c <_handle_obj_poll_events>
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
    c2b6:	2800      	cmp	r0, #0
    c2b8:	d03b      	beq.n	c332 <_impl_k_sem_give+0xaa>
	_update_time_slice_before_swap();
    c2ba:	f7ff ffb1 	bl	c220 <_update_time_slice_before_swap>
	return __swap(key);
    c2be:	4630      	mov	r0, r6
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
    c2c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c2c4:	f7f4 bb92 	b.w	9ec <__swap>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    c2c8:	6a01      	ldr	r1, [r0, #32]
	return _abort_timeout(&thread->base.timeout);
    c2ca:	f100 0210 	add.w	r2, r0, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    c2ce:	1c48      	adds	r0, r1, #1
    c2d0:	d00f      	beq.n	c2f2 <_impl_k_sem_give+0x6a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    c2d2:	4b1b      	ldr	r3, [pc, #108]	; (c340 <_impl_k_sem_give+0xb8>)
    c2d4:	695b      	ldr	r3, [r3, #20]
    c2d6:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
    c2d8:	bf1f      	itttt	ne
    c2da:	6922      	ldrne	r2, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    c2dc:	6913      	ldrne	r3, [r2, #16]
    c2de:	185b      	addne	r3, r3, r1
    c2e0:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
    c2e2:	6963      	ldr	r3, [r4, #20]
    c2e4:	6922      	ldr	r2, [r4, #16]
    c2e6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c2e8:	6922      	ldr	r2, [r4, #16]
    c2ea:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    c2ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c2f0:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c2f2:	7a63      	ldrb	r3, [r4, #9]
    c2f4:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
    c2f8:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c2fc:	7262      	strb	r2, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    c2fe:	d102      	bne.n	c306 <_impl_k_sem_give+0x7e>
    c300:	6a23      	ldr	r3, [r4, #32]
    c302:	3301      	adds	r3, #1
    c304:	d018      	beq.n	c338 <_impl_k_sem_give+0xb0>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    c306:	2300      	movs	r3, #0
    c308:	6663      	str	r3, [r4, #100]	; 0x64
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    c30a:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    c30e:	2b0d      	cmp	r3, #13
    c310:	d80f      	bhi.n	c332 <_impl_k_sem_give+0xaa>
    c312:	b11b      	cbz	r3, c31c <_impl_k_sem_give+0x94>
    c314:	4b0b      	ldr	r3, [pc, #44]	; (c344 <_impl_k_sem_give+0xbc>)
    c316:	685b      	ldr	r3, [r3, #4]
    c318:	051b      	lsls	r3, r3, #20
    c31a:	d50a      	bpl.n	c332 <_impl_k_sem_give+0xaa>
	return _is_preempt(_current) && __must_switch_threads();
    c31c:	4b08      	ldr	r3, [pc, #32]	; (c340 <_impl_k_sem_give+0xb8>)
    c31e:	689b      	ldr	r3, [r3, #8]
    c320:	895b      	ldrh	r3, [r3, #10]
    c322:	2b7f      	cmp	r3, #127	; 0x7f
    c324:	d805      	bhi.n	c332 <_impl_k_sem_give+0xaa>
    c326:	f7ff fea1 	bl	c06c <__must_switch_threads>
    c32a:	3000      	adds	r0, #0
    c32c:	bf18      	it	ne
    c32e:	2001      	movne	r0, #1
    c330:	e7c1      	b.n	c2b6 <_impl_k_sem_give+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c332:	f386 8811 	msr	BASEPRI, r6
    c336:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
    c338:	4620      	mov	r0, r4
    c33a:	f7ff fd9d 	bl	be78 <_add_thread_to_ready_q>
    c33e:	e7e2      	b.n	c306 <_impl_k_sem_give+0x7e>
    c340:	2000199c 	.word	0x2000199c
    c344:	e000ed00 	.word	0xe000ed00

0000c348 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    c348:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    c34a:	f04f 0320 	mov.w	r3, #32
    c34e:	f3ef 8411 	mrs	r4, BASEPRI
    c352:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
    c356:	6883      	ldr	r3, [r0, #8]
    c358:	b12b      	cbz	r3, c366 <_impl_k_sem_take+0x1e>
		sem->count--;
    c35a:	3b01      	subs	r3, #1
    c35c:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c35e:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
    c362:	2000      	movs	r0, #0
    c364:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (timeout == K_NO_WAIT) {
    c366:	b921      	cbnz	r1, c372 <_impl_k_sem_take+0x2a>
    c368:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return -EBUSY;
    c36c:	f06f 000f 	mvn.w	r0, #15
    c370:	bd38      	pop	{r3, r4, r5, pc}
	}

	_pend_current_thread(&sem->wait_q, timeout);
    c372:	f7ff fe6b 	bl	c04c <_pend_current_thread>
	_update_time_slice_before_swap();
    c376:	f7ff ff53 	bl	c220 <_update_time_slice_before_swap>
	return __swap(key);
    c37a:	4620      	mov	r0, r4

	return _Swap(key);
}
    c37c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c380:	f7f4 bb34 	b.w	9ec <__swap>

0000c384 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
    c384:	4b03      	ldr	r3, [pc, #12]	; (c394 <_impl_k_uptime_get_32+0x10>)
    c386:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
    c38a:	230a      	movs	r3, #10
    c38c:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
    c390:	4770      	bx	lr
    c392:	bf00      	nop
    c394:	20001bd8 	.word	0x20001bd8

0000c398 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
    c398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c39c:	4607      	mov	r7, r0
	__asm__ volatile(
    c39e:	f04f 0320 	mov.w	r3, #32
    c3a2:	f3ef 8011 	mrs	r0, BASEPRI
    c3a6:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
    c3aa:	4963      	ldr	r1, [pc, #396]	; (c538 <_nano_sys_clock_tick_announce+0x1a0>)
    c3ac:	e9d1 4500 	ldrd	r4, r5, [r1]
    c3b0:	19e2      	adds	r2, r4, r7
    c3b2:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
    c3b6:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c3ba:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
    c3be:	466e      	mov	r6, sp
    c3c0:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
    c3c4:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
    c3c8:	f04f 0320 	mov.w	r3, #32
    c3cc:	f3ef 8011 	mrs	r0, BASEPRI
    c3d0:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    c3d4:	4c59      	ldr	r4, [pc, #356]	; (c53c <_nano_sys_clock_tick_announce+0x1a4>)
    c3d6:	4621      	mov	r1, r4
    c3d8:	4602      	mov	r2, r0
    c3da:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c3de:	428b      	cmp	r3, r1
    c3e0:	d000      	beq.n	c3e4 <_nano_sys_clock_tick_announce+0x4c>
	if (!next) {
    c3e2:	b9fb      	cbnz	r3, c424 <_nano_sys_clock_tick_announce+0x8c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c3e4:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
    c3e8:	68a0      	ldr	r0, [r4, #8]
    c3ea:	f7ff fef5 	bl	c1d8 <_is_thread_time_slicing>
    c3ee:	b1b0      	cbz	r0, c41e <_nano_sys_clock_tick_announce+0x86>
	_time_slice_elapsed += __ticks_to_ms(ticks);
    c3f0:	4a53      	ldr	r2, [pc, #332]	; (c540 <_nano_sys_clock_tick_announce+0x1a8>)
    c3f2:	6811      	ldr	r1, [r2, #0]
    c3f4:	230a      	movs	r3, #10
    c3f6:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
    c3fa:	4b52      	ldr	r3, [pc, #328]	; (c544 <_nano_sys_clock_tick_announce+0x1ac>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
    c3fc:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
    c3fe:	681b      	ldr	r3, [r3, #0]
    c400:	429f      	cmp	r7, r3
    c402:	db0c      	blt.n	c41e <_nano_sys_clock_tick_announce+0x86>
		_time_slice_elapsed = 0;
    c404:	2300      	movs	r3, #0
    c406:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    c408:	f04f 0320 	mov.w	r3, #32
    c40c:	f3ef 8511 	mrs	r5, BASEPRI
    c410:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
    c414:	68a0      	ldr	r0, [r4, #8]
    c416:	f7ff fe69 	bl	c0ec <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c41a:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
    c41e:	b003      	add	sp, #12
    c420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
    c424:	4d48      	ldr	r5, [pc, #288]	; (c548 <_nano_sys_clock_tick_announce+0x1b0>)
    c426:	2101      	movs	r1, #1
    c428:	6029      	str	r1, [r5, #0]
    c42a:	46ab      	mov	fp, r5
    c42c:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = 0;
    c42e:	f04f 0e00 	mov.w	lr, #0
			timeout->delta_ticks_from_prev = _EXPIRED;
    c432:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
    c436:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
    c438:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
    c43a:	bfaa      	itet	ge
    c43c:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
    c440:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
    c444:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
    c448:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    c44a:	6960      	ldr	r0, [r4, #20]
		if (timeout->delta_ticks_from_prev == 0) {
    c44c:	691d      	ldr	r5, [r3, #16]
    c44e:	4298      	cmp	r0, r3
    c450:	bf14      	ite	ne
    c452:	6818      	ldrne	r0, [r3, #0]
    c454:	2000      	moveq	r0, #0
    c456:	b9d5      	cbnz	r5, c48e <_nano_sys_clock_tick_announce+0xf6>
	node->prev->next = node->next;
    c458:	e893 0220 	ldmia.w	r3, {r5, r9}
    c45c:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
    c460:	681d      	ldr	r5, [r3, #0]
    c462:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
    c466:	9d00      	ldr	r5, [sp, #0]
	node->prev = list;
    c468:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
    c46c:	9d00      	ldr	r5, [sp, #0]
	list->head = node;
    c46e:	9300      	str	r3, [sp, #0]
	list->head->prev = node;
    c470:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
    c472:	f8c3 c010 	str.w	ip, [r3, #16]
    c476:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
    c47a:	f04f 0320 	mov.w	r3, #32
    c47e:	f3ef 8211 	mrs	r2, BASEPRI
    c482:	f383 8811 	msr	BASEPRI, r3
	while (next) {
    c486:	4603      	mov	r3, r0
    c488:	2800      	cmp	r0, #0
    c48a:	d1d4      	bne.n	c436 <_nano_sys_clock_tick_announce+0x9e>
    c48c:	e001      	b.n	c492 <_nano_sys_clock_tick_announce+0xfa>
		} else if (ticks <= 0) {
    c48e:	2900      	cmp	r1, #0
    c490:	dcf1      	bgt.n	c476 <_nano_sys_clock_tick_announce+0xde>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c492:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    c496:	9800      	ldr	r0, [sp, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c498:	42b0      	cmp	r0, r6
    c49a:	d103      	bne.n	c4a4 <_nano_sys_clock_tick_announce+0x10c>
	_handling_timeouts = 0;
    c49c:	2300      	movs	r3, #0
    c49e:	f8cb 3000 	str.w	r3, [fp]
    c4a2:	e7a1      	b.n	c3e8 <_nano_sys_clock_tick_announce+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    c4a4:	2800      	cmp	r0, #0
    c4a6:	d0f9      	beq.n	c49c <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
    c4a8:	9b01      	ldr	r3, [sp, #4]
    c4aa:	4298      	cmp	r0, r3
    c4ac:	d101      	bne.n	c4b2 <_nano_sys_clock_tick_announce+0x11a>
    c4ae:	2600      	movs	r6, #0
    c4b0:	e000      	b.n	c4b4 <_nano_sys_clock_tick_announce+0x11c>
    c4b2:	6806      	ldr	r6, [r0, #0]
	timeout->delta_ticks_from_prev = _INACTIVE;
    c4b4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
    c4b8:	f04f 0900 	mov.w	r9, #0
	node->prev->next = node->next;
    c4bc:	e890 000c 	ldmia.w	r0, {r2, r3}
    c4c0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c4c2:	6802      	ldr	r2, [r0, #0]
    c4c4:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
    c4c6:	6883      	ldr	r3, [r0, #8]
	__asm__ volatile(
    c4c8:	f04f 0220 	mov.w	r2, #32
    c4cc:	f3ef 8a11 	mrs	sl, BASEPRI
    c4d0:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
    c4d4:	f8c0 8010 	str.w	r8, [r0, #16]
	if (thread) {
    c4d8:	b1fb      	cbz	r3, c51a <_nano_sys_clock_tick_announce+0x182>
	if (timeout_obj->wait_q) {
    c4da:	68c2      	ldr	r2, [r0, #12]
    c4dc:	b152      	cbz	r2, c4f4 <_nano_sys_clock_tick_announce+0x15c>
	node->prev->next = node->next;
    c4de:	6859      	ldr	r1, [r3, #4]
    c4e0:	681a      	ldr	r2, [r3, #0]
    c4e2:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
    c4e4:	681a      	ldr	r2, [r3, #0]
    c4e6:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    c4e8:	7a5a      	ldrb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
    c4ea:	f8c3 901c 	str.w	r9, [r3, #28]
    c4ee:	f022 0202 	bic.w	r2, r2, #2
    c4f2:	725a      	strb	r2, [r3, #9]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c4f4:	7a5a      	ldrb	r2, [r3, #9]
    c4f6:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    c4fa:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c4fe:	7259      	strb	r1, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    c500:	d102      	bne.n	c508 <_nano_sys_clock_tick_announce+0x170>
    c502:	6a1a      	ldr	r2, [r3, #32]
    c504:	3201      	adds	r2, #1
    c506:	d013      	beq.n	c530 <_nano_sys_clock_tick_announce+0x198>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c508:	f38a 8811 	msr	BASEPRI, sl
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    c50c:	2e00      	cmp	r6, #0
    c50e:	d0c5      	beq.n	c49c <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
    c510:	9b01      	ldr	r3, [sp, #4]
    c512:	42b3      	cmp	r3, r6
    c514:	d108      	bne.n	c528 <_nano_sys_clock_tick_announce+0x190>
    c516:	2300      	movs	r3, #0
    c518:	e007      	b.n	c52a <_nano_sys_clock_tick_announce+0x192>
    c51a:	f38a 8811 	msr	BASEPRI, sl
		if (timeout->func) {
    c51e:	6943      	ldr	r3, [r0, #20]
    c520:	2b00      	cmp	r3, #0
    c522:	d0f3      	beq.n	c50c <_nano_sys_clock_tick_announce+0x174>
			timeout->func(timeout);
    c524:	4798      	blx	r3
    c526:	e7f1      	b.n	c50c <_nano_sys_clock_tick_announce+0x174>
    c528:	6833      	ldr	r3, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    c52a:	4630      	mov	r0, r6
    c52c:	461e      	mov	r6, r3
    c52e:	e7c5      	b.n	c4bc <_nano_sys_clock_tick_announce+0x124>
		_add_thread_to_ready_q(thread);
    c530:	4618      	mov	r0, r3
    c532:	f7ff fca1 	bl	be78 <_add_thread_to_ready_q>
    c536:	e7e7      	b.n	c508 <_nano_sys_clock_tick_announce+0x170>
    c538:	20001bd8 	.word	0x20001bd8
    c53c:	2000199c 	.word	0x2000199c
    c540:	20001bd4 	.word	0x20001bd4
    c544:	20001ac0 	.word	0x20001ac0
    c548:	20001bd0 	.word	0x20001bd0

0000c54c <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
    c54c:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    c54e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c556:	4903      	ldr	r1, [pc, #12]	; (c564 <k_sys_work_q_init+0x18>)
    c558:	4803      	ldr	r0, [pc, #12]	; (c568 <k_sys_work_q_init+0x1c>)
    c55a:	f000 f971 	bl	c840 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
    c55e:	2000      	movs	r0, #0
    c560:	bd08      	pop	{r3, pc}
    c562:	bf00      	nop
    c564:	20003758 	.word	0x20003758
    c568:	20001be0 	.word	0x20001be0

0000c56c <_is_thread_ready>:
	return !(_is_thread_prevented_from_running(thread) ||
    c56c:	7a43      	ldrb	r3, [r0, #9]
    c56e:	06da      	lsls	r2, r3, #27
    c570:	d104      	bne.n	c57c <_is_thread_ready+0x10>
    c572:	6a00      	ldr	r0, [r0, #32]
    c574:	1c43      	adds	r3, r0, #1
    c576:	4258      	negs	r0, r3
    c578:	4158      	adcs	r0, r3
    c57a:	4770      	bx	lr
    c57c:	2000      	movs	r0, #0
}
    c57e:	4770      	bx	lr

0000c580 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    c580:	6903      	ldr	r3, [r0, #16]
    c582:	1c5a      	adds	r2, r3, #1
    c584:	d011      	beq.n	c5aa <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    c586:	4a0a      	ldr	r2, [pc, #40]	; (c5b0 <_abort_timeout+0x30>)
    c588:	6952      	ldr	r2, [r2, #20]
    c58a:	4290      	cmp	r0, r2
    c58c:	bf1f      	itttt	ne
    c58e:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    c590:	690a      	ldrne	r2, [r1, #16]
    c592:	189b      	addne	r3, r3, r2
    c594:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
    c596:	e890 000c 	ldmia.w	r0, {r2, r3}
    c59a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c59c:	6802      	ldr	r2, [r0, #0]
    c59e:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    c5a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c5a4:	6103      	str	r3, [r0, #16]
	return 0;
    c5a6:	2000      	movs	r0, #0
    c5a8:	4770      	bx	lr
		return _INACTIVE;
    c5aa:	4618      	mov	r0, r3
}
    c5ac:	4770      	bx	lr
    c5ae:	bf00      	nop
    c5b0:	2000199c 	.word	0x2000199c

0000c5b4 <schedule_new_thread.part.13>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
    c5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
    c5b6:	f04f 0320 	mov.w	r3, #32
    c5ba:	f3ef 8611 	mrs	r6, BASEPRI
    c5be:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    c5c2:	4a19      	ldr	r2, [pc, #100]	; (c628 <schedule_new_thread.part.13+0x74>)
	timeout->thread = thread;
    c5c4:	6180      	str	r0, [r0, #24]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    c5c6:	230a      	movs	r3, #10
    c5c8:	3109      	adds	r1, #9
    c5ca:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
    c5ce:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    c5d0:	6201      	str	r1, [r0, #32]
    c5d2:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
    c5d4:	2300      	movs	r3, #0
    c5d6:	61c3      	str	r3, [r0, #28]
    c5d8:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c5dc:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    c5de:	f100 0510 	add.w	r5, r0, #16
    c5e2:	d108      	bne.n	c5f6 <schedule_new_thread.part.13+0x42>
	node->next = list;
    c5e4:	6101      	str	r1, [r0, #16]
	node->prev = list->tail;
    c5e6:	6953      	ldr	r3, [r2, #20]
    c5e8:	6143      	str	r3, [r0, #20]
	list->tail->next = node;
    c5ea:	6953      	ldr	r3, [r2, #20]
    c5ec:	601d      	str	r5, [r3, #0]
	list->tail = node;
    c5ee:	6155      	str	r5, [r2, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c5f0:	f386 8811 	msr	BASEPRI, r6
    c5f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    c5f6:	2b00      	cmp	r3, #0
    c5f8:	d0f4      	beq.n	c5e4 <schedule_new_thread.part.13+0x30>
    c5fa:	f8d2 e014 	ldr.w	lr, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
    c5fe:	6a04      	ldr	r4, [r0, #32]
    c600:	691f      	ldr	r7, [r3, #16]
    c602:	42bc      	cmp	r4, r7
    c604:	dc08      	bgt.n	c618 <schedule_new_thread.part.13+0x64>
		node->prev = insert_point->prev;
    c606:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    c608:	1b3c      	subs	r4, r7, r4
    c60a:	611c      	str	r4, [r3, #16]
    c60c:	6142      	str	r2, [r0, #20]
		node->next = insert_point;
    c60e:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
    c610:	685a      	ldr	r2, [r3, #4]
    c612:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
    c614:	605d      	str	r5, [r3, #4]
    c616:	e7eb      	b.n	c5f0 <schedule_new_thread.part.13+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
    c618:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
    c61a:	4573      	cmp	r3, lr
    c61c:	6204      	str	r4, [r0, #32]
    c61e:	d0e1      	beq.n	c5e4 <schedule_new_thread.part.13+0x30>
    c620:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    c622:	2b00      	cmp	r3, #0
    c624:	d1eb      	bne.n	c5fe <schedule_new_thread.part.13+0x4a>
    c626:	e7dd      	b.n	c5e4 <schedule_new_thread.part.13+0x30>
    c628:	2000199c 	.word	0x2000199c

0000c62c <k_is_in_isr>:
    c62c:	f3ef 8005 	mrs	r0, IPSR
    c630:	280d      	cmp	r0, #13
    c632:	d807      	bhi.n	c644 <k_is_in_isr+0x18>
    c634:	b138      	cbz	r0, c646 <k_is_in_isr+0x1a>
    c636:	4b04      	ldr	r3, [pc, #16]	; (c648 <k_is_in_isr+0x1c>)
    c638:	6858      	ldr	r0, [r3, #4]
    c63a:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    c63e:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    c642:	4770      	bx	lr
    c644:	2001      	movs	r0, #1
}
    c646:	4770      	bx	lr
    c648:	e000ed00 	.word	0xe000ed00

0000c64c <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
    c64c:	4b02      	ldr	r3, [pc, #8]	; (c658 <_is_thread_essential+0xc>)
    c64e:	689b      	ldr	r3, [r3, #8]
    c650:	7a18      	ldrb	r0, [r3, #8]
}
    c652:	f000 0001 	and.w	r0, r0, #1
    c656:	4770      	bx	lr
    c658:	2000199c 	.word	0x2000199c

0000c65c <_thread_entry>:
{
    c65c:	b508      	push	{r3, lr}
    c65e:	4604      	mov	r4, r0
    c660:	4608      	mov	r0, r1
    c662:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    c664:	461a      	mov	r2, r3
    c666:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    c668:	f7ff fdb0 	bl	c1cc <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    c66c:	f7f4 fc6e 	bl	f4c <_impl_k_thread_abort>

0000c670 <_impl_k_thread_start>:
{
    c670:	b510      	push	{r4, lr}
    c672:	4601      	mov	r1, r0
	__asm__ volatile(
    c674:	f04f 0320 	mov.w	r3, #32
    c678:	f3ef 8411 	mrs	r4, BASEPRI
    c67c:	f383 8811 	msr	BASEPRI, r3
    c680:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
    c682:	075a      	lsls	r2, r3, #29
    c684:	d402      	bmi.n	c68c <_impl_k_thread_start+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c686:	f384 8811 	msr	BASEPRI, r4
    c68a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c68c:	f023 0304 	bic.w	r3, r3, #4
    c690:	7243      	strb	r3, [r0, #9]
	if (_is_thread_ready(thread)) {
    c692:	f7ff ff6b 	bl	c56c <_is_thread_ready>
    c696:	2800      	cmp	r0, #0
    c698:	d0f5      	beq.n	c686 <_impl_k_thread_start+0x16>
		_add_thread_to_ready_q(thread);
    c69a:	4608      	mov	r0, r1
    c69c:	f7ff fbec 	bl	be78 <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
    c6a0:	4b07      	ldr	r3, [pc, #28]	; (c6c0 <_impl_k_thread_start+0x50>)
    c6a2:	689b      	ldr	r3, [r3, #8]
    c6a4:	895b      	ldrh	r3, [r3, #10]
    c6a6:	2b7f      	cmp	r3, #127	; 0x7f
    c6a8:	d8ed      	bhi.n	c686 <_impl_k_thread_start+0x16>
    c6aa:	f7ff fcdf 	bl	c06c <__must_switch_threads>
    c6ae:	2800      	cmp	r0, #0
    c6b0:	d0e9      	beq.n	c686 <_impl_k_thread_start+0x16>
	_update_time_slice_before_swap();
    c6b2:	f7ff fdb5 	bl	c220 <_update_time_slice_before_swap>
	return __swap(key);
    c6b6:	4620      	mov	r0, r4
}
    c6b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c6bc:	f7f4 b996 	b.w	9ec <__swap>
    c6c0:	2000199c 	.word	0x2000199c

0000c6c4 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
    c6c4:	b410      	push	{r4}

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
    c6c6:	bc10      	pop	{r4}
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    c6c8:	f7f4 bb9c 	b.w	e04 <_new_thread>

0000c6cc <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    c6cc:	b570      	push	{r4, r5, r6, lr}
    c6ce:	b086      	sub	sp, #24
    c6d0:	4604      	mov	r4, r0
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    c6d2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    c6d4:	9604      	str	r6, [sp, #16]
    c6d6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    c6d8:	9603      	str	r6, [sp, #12]
    c6da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    c6dc:	9602      	str	r6, [sp, #8]
    c6de:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
    c6e0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    c6e2:	9601      	str	r6, [sp, #4]
    c6e4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    c6e6:	9600      	str	r6, [sp, #0]
    c6e8:	f7f4 fb8c 	bl	e04 <_new_thread>
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
			  prio, options);

	if (delay != K_FOREVER) {
    c6ec:	1c6b      	adds	r3, r5, #1
    c6ee:	d003      	beq.n	c6f8 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
    c6f0:	b92d      	cbnz	r5, c6fe <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
    c6f2:	4620      	mov	r0, r4
    c6f4:	f7ff ffbc 	bl	c670 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
    c6f8:	4620      	mov	r0, r4
    c6fa:	b006      	add	sp, #24
    c6fc:	bd70      	pop	{r4, r5, r6, pc}
    c6fe:	4629      	mov	r1, r5
    c700:	4620      	mov	r0, r4
    c702:	f7ff ff57 	bl	c5b4 <schedule_new_thread.part.13>
    c706:	e7f7      	b.n	c6f8 <_impl_k_thread_create+0x2c>

0000c708 <_k_thread_single_abort>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
    c708:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    c70a:	b510      	push	{r4, lr}
    c70c:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    c70e:	b103      	cbz	r3, c712 <_k_thread_single_abort+0xa>
		thread->fn_abort();
    c710:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
    c712:	4620      	mov	r0, r4
    c714:	f7ff ff2a 	bl	c56c <_is_thread_ready>
    c718:	b138      	cbz	r0, c72a <_k_thread_single_abort+0x22>
		_remove_thread_from_ready_q(thread);
    c71a:	4620      	mov	r0, r4
    c71c:	f7ff fc30 	bl	bf80 <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
    c720:	7a63      	ldrb	r3, [r4, #9]
    c722:	f043 0308 	orr.w	r3, r3, #8
    c726:	7263      	strb	r3, [r4, #9]
    c728:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
    c72a:	7a63      	ldrb	r3, [r4, #9]
    c72c:	079b      	lsls	r3, r3, #30
    c72e:	d508      	bpl.n	c742 <_k_thread_single_abort+0x3a>
	node->prev->next = node->next;
    c730:	e894 000c 	ldmia.w	r4, {r2, r3}
    c734:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c736:	6822      	ldr	r2, [r4, #0]
    c738:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    c73a:	7a63      	ldrb	r3, [r4, #9]
    c73c:	f023 0302 	bic.w	r3, r3, #2
    c740:	7263      	strb	r3, [r4, #9]
		if (_is_thread_timeout_active(thread)) {
    c742:	6a23      	ldr	r3, [r4, #32]
    c744:	3301      	adds	r3, #1
    c746:	d0eb      	beq.n	c720 <_k_thread_single_abort+0x18>
	return _abort_timeout(&thread->base.timeout);
    c748:	f104 0010 	add.w	r0, r4, #16
    c74c:	f7ff ff18 	bl	c580 <_abort_timeout>
    c750:	e7e6      	b.n	c720 <_k_thread_single_abort+0x18>
	...

0000c754 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
    c754:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    c756:	4f21      	ldr	r7, [pc, #132]	; (c7dc <_init_static_threads+0x88>)
    c758:	4d21      	ldr	r5, [pc, #132]	; (c7e0 <_init_static_threads+0x8c>)
{
    c75a:	b087      	sub	sp, #28
    c75c:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    c75e:	42bd      	cmp	r5, r7
    c760:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    c764:	d314      	bcc.n	c790 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
    c766:	4b1f      	ldr	r3, [pc, #124]	; (c7e4 <_init_static_threads+0x90>)
    c768:	689a      	ldr	r2, [r3, #8]
    c76a:	7ad3      	ldrb	r3, [r2, #11]
    c76c:	3b01      	subs	r3, #1
    c76e:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
    c770:	f04f 0320 	mov.w	r3, #32
    c774:	f3ef 8511 	mrs	r5, BASEPRI
    c778:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    c77c:	4c18      	ldr	r4, [pc, #96]	; (c7e0 <_init_static_threads+0x8c>)
    c77e:	42b4      	cmp	r4, r6
    c780:	d31f      	bcc.n	c7c2 <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c782:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
    c786:	b007      	add	sp, #28
    c788:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
    c78c:	f7ff bc9e 	b.w	c0cc <k_sched_unlock>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    c790:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    c794:	9304      	str	r3, [sp, #16]
    c796:	f854 3c10 	ldr.w	r3, [r4, #-16]
    c79a:	9303      	str	r3, [sp, #12]
    c79c:	f854 3c14 	ldr.w	r3, [r4, #-20]
    c7a0:	9302      	str	r3, [sp, #8]
    c7a2:	f854 3c18 	ldr.w	r3, [r4, #-24]
    c7a6:	9301      	str	r3, [sp, #4]
    c7a8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    c7ac:	9300      	str	r3, [sp, #0]
    c7ae:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
    c7b2:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    c7b4:	f7f4 fb26 	bl	e04 <_new_thread>
		thread_data->init_thread->init_data = thread_data;
    c7b8:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    c7bc:	64dd      	str	r5, [r3, #76]	; 0x4c
    c7be:	4625      	mov	r5, r4
    c7c0:	e7cd      	b.n	c75e <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
    c7c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    c7c4:	1c4b      	adds	r3, r1, #1
    c7c6:	d003      	beq.n	c7d0 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
    c7c8:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
    c7ca:	b919      	cbnz	r1, c7d4 <_init_static_threads+0x80>
    c7cc:	f7ff ff50 	bl	c670 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    c7d0:	342c      	adds	r4, #44	; 0x2c
    c7d2:	e7d4      	b.n	c77e <_init_static_threads+0x2a>
    c7d4:	f7ff feee 	bl	c5b4 <schedule_new_thread.part.13>
    c7d8:	e7fa      	b.n	c7d0 <_init_static_threads+0x7c>
    c7da:	bf00      	nop
    c7dc:	20003ea8 	.word	0x20003ea8
    c7e0:	20003ea8 	.word	0x20003ea8
    c7e4:	2000199c 	.word	0x2000199c

0000c7e8 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    c7e8:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
    c7ea:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    c7ec:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
    c7ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
    c7f2:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
    c7f4:	72c3      	strb	r3, [r0, #11]
    c7f6:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
    c7f8:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
    c7fa:	6183      	str	r3, [r0, #24]
	t->func = func;
    c7fc:	6243      	str	r3, [r0, #36]	; 0x24
    c7fe:	4770      	bx	lr

0000c800 <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    c800:	b510      	push	{r4, lr}
    c802:	4604      	mov	r4, r0

	while (1) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
    c804:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c808:	4620      	mov	r0, r4
    c80a:	f7ff faee 	bl	bdea <k_queue_get>
		if (!work) {
    c80e:	4603      	mov	r3, r0
    c810:	2800      	cmp	r0, #0
    c812:	d0f7      	beq.n	c804 <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c814:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
    c816:	6842      	ldr	r2, [r0, #4]
    c818:	f3bf 8f5b 	dmb	ish
    c81c:	e853 1f00 	ldrex	r1, [r3]
    c820:	f021 0e01 	bic.w	lr, r1, #1
    c824:	e843 ec00 	strex	ip, lr, [r3]
    c828:	f1bc 0f00 	cmp.w	ip, #0
    c82c:	d1f6      	bne.n	c81c <work_q_main+0x1c>
    c82e:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    c832:	07cb      	lsls	r3, r1, #31
    c834:	d500      	bpl.n	c838 <work_q_main+0x38>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    c836:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    c838:	f7ff fc82 	bl	c140 <_impl_k_yield>
    c83c:	e7e2      	b.n	c804 <work_q_main+0x4>
	...

0000c840 <k_work_q_start>:
	}
}

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
    c840:	b5f0      	push	{r4, r5, r6, r7, lr}
    c842:	b087      	sub	sp, #28
    c844:	4604      	mov	r4, r0
    c846:	461f      	mov	r7, r3
    c848:	460d      	mov	r5, r1
    c84a:	4616      	mov	r6, r2
	k_queue_init(&work_q->queue);
    c84c:	f7ff fa78 	bl	bd40 <k_queue_init>

    c850:	2000      	movs	r0, #0
    c852:	9005      	str	r0, [sp, #20]
    c854:	9004      	str	r0, [sp, #16]
    c856:	9002      	str	r0, [sp, #8]
    c858:	9001      	str	r0, [sp, #4]
    c85a:	9703      	str	r7, [sp, #12]
    c85c:	9400      	str	r4, [sp, #0]
    c85e:	4b04      	ldr	r3, [pc, #16]	; (c870 <k_work_q_start+0x30>)
    c860:	4632      	mov	r2, r6
    c862:	4629      	mov	r1, r5
    c864:	f104 0010 	add.w	r0, r4, #16
    c868:	f7ff ff30 	bl	c6cc <_impl_k_thread_create>
	k_thread_create(&work_q->thread, stack, stack_size, work_q_main,
			work_q, 0, 0, prio, 0, 0);
	_k_object_init(work_q);
}
    c86c:	b007      	add	sp, #28
    c86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c870:	0000c801 	.word	0x0000c801

0000c874 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c874:	7a42      	ldrb	r2, [r0, #9]
    c876:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    c87a:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c87e:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    c880:	d104      	bne.n	c88c <_ready_thread+0x18>
    c882:	6a03      	ldr	r3, [r0, #32]
    c884:	3301      	adds	r3, #1
    c886:	d101      	bne.n	c88c <_ready_thread+0x18>
		_add_thread_to_ready_q(thread);
    c888:	f7ff baf6 	b.w	be78 <_add_thread_to_ready_q>
    c88c:	4770      	bx	lr

0000c88e <_unpend_thread>:
	node->prev->next = node->next;
    c88e:	e890 000c 	ldmia.w	r0, {r2, r3}
    c892:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c894:	6802      	ldr	r2, [r0, #0]
    c896:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    c898:	7a43      	ldrb	r3, [r0, #9]
    c89a:	f023 0302 	bic.w	r3, r3, #2
    c89e:	7243      	strb	r3, [r0, #9]
    c8a0:	4770      	bx	lr
	...

0000c8a4 <_add_timeout.constprop.9>:
static inline void _add_timeout(struct k_thread *thread,
    c8a4:	b430      	push	{r4, r5}
	timeout->thread = thread;
    c8a6:	2400      	movs	r4, #0
static inline void _add_timeout(struct k_thread *thread,
    c8a8:	4603      	mov	r3, r0
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    c8aa:	6102      	str	r2, [r0, #16]
	timeout->thread = thread;
    c8ac:	6084      	str	r4, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    c8ae:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
    c8b0:	b972      	cbnz	r2, c8d0 <_add_timeout.constprop.9+0x2c>
	__asm__ volatile(
    c8b2:	f04f 0120 	mov.w	r1, #32
    c8b6:	f3ef 8211 	mrs	r2, BASEPRI
    c8ba:	f381 8811 	msr	BASEPRI, r1
	timeout->delta_ticks_from_prev = _INACTIVE;
    c8be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c8c2:	6101      	str	r1, [r0, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c8c4:	f382 8811 	msr	BASEPRI, r2
		if (timeout->func) {
    c8c8:	6943      	ldr	r3, [r0, #20]
    c8ca:	b16b      	cbz	r3, c8e8 <_add_timeout.constprop.9+0x44>
}
    c8cc:	bc30      	pop	{r4, r5}
			timeout->func(timeout);
    c8ce:	4718      	bx	r3
	return list->head == list;
    c8d0:	4911      	ldr	r1, [pc, #68]	; (c918 <_add_timeout.constprop.9+0x74>)
    c8d2:	4608      	mov	r0, r1
    c8d4:	f850 2f10 	ldr.w	r2, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c8d8:	4282      	cmp	r2, r0
    c8da:	d10d      	bne.n	c8f8 <_add_timeout.constprop.9+0x54>
	node->next = list;
    c8dc:	6018      	str	r0, [r3, #0]
	node->prev = list->tail;
    c8de:	694a      	ldr	r2, [r1, #20]
    c8e0:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
    c8e2:	694a      	ldr	r2, [r1, #20]
    c8e4:	6013      	str	r3, [r2, #0]
	list->tail = node;
    c8e6:	614b      	str	r3, [r1, #20]
}
    c8e8:	bc30      	pop	{r4, r5}
    c8ea:	4770      	bx	lr
		*delta -= in_q->delta_ticks_from_prev;
    c8ec:	1b64      	subs	r4, r4, r5
    c8ee:	611c      	str	r4, [r3, #16]
	return (node == list->tail) ? NULL : node->next;
    c8f0:	694c      	ldr	r4, [r1, #20]
    c8f2:	42a2      	cmp	r2, r4
    c8f4:	d0f2      	beq.n	c8dc <_add_timeout.constprop.9+0x38>
    c8f6:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    c8f8:	2a00      	cmp	r2, #0
    c8fa:	d0ef      	beq.n	c8dc <_add_timeout.constprop.9+0x38>
		if (*delta <= in_q->delta_ticks_from_prev) {
    c8fc:	691c      	ldr	r4, [r3, #16]
    c8fe:	6915      	ldr	r5, [r2, #16]
    c900:	42ac      	cmp	r4, r5
    c902:	dcf3      	bgt.n	c8ec <_add_timeout.constprop.9+0x48>
		node->prev = insert_point->prev;
    c904:	6851      	ldr	r1, [r2, #4]
			in_q->delta_ticks_from_prev -= *delta;
    c906:	1b2c      	subs	r4, r5, r4
    c908:	6114      	str	r4, [r2, #16]
    c90a:	6059      	str	r1, [r3, #4]
		node->next = insert_point;
    c90c:	601a      	str	r2, [r3, #0]
		insert_point->prev->next = node;
    c90e:	6851      	ldr	r1, [r2, #4]
    c910:	600b      	str	r3, [r1, #0]
		insert_point->prev = node;
    c912:	6053      	str	r3, [r2, #4]
    c914:	e7e8      	b.n	c8e8 <_add_timeout.constprop.9+0x44>
    c916:	bf00      	nop
    c918:	2000199c 	.word	0x2000199c

0000c91c <_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
    c91c:	6a83      	ldr	r3, [r0, #40]	; 0x28
    c91e:	2b00      	cmp	r3, #0
{
    c920:	b570      	push	{r4, r5, r6, lr}
    c922:	4604      	mov	r4, r0
    c924:	f100 0518 	add.w	r5, r0, #24
	if (timer->period > 0) {
    c928:	dd0b      	ble.n	c942 <_timer_expiration_handler+0x26>
	__asm__ volatile(
    c92a:	f04f 0320 	mov.w	r3, #32
    c92e:	f3ef 8611 	mrs	r6, BASEPRI
    c932:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
    c936:	6a82      	ldr	r2, [r0, #40]	; 0x28
    c938:	4629      	mov	r1, r5
    c93a:	f7ff ffb3 	bl	c8a4 <_add_timeout.constprop.9>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c93e:	f386 8811 	msr	BASEPRI, r6
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
    c942:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c944:	3301      	adds	r3, #1
    c946:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
    c948:	6a23      	ldr	r3, [r4, #32]
    c94a:	b10b      	cbz	r3, c950 <_timer_expiration_handler+0x34>
		timer->expiry_fn(timer);
    c94c:	4620      	mov	r0, r4
    c94e:	4798      	blx	r3
	return list->head == list;
    c950:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c952:	42ac      	cmp	r4, r5
    c954:	d010      	beq.n	c978 <_timer_expiration_handler+0x5c>
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);

	if (!thread) {
    c956:	b17c      	cbz	r4, c978 <_timer_expiration_handler+0x5c>
	 * calling _unpend_thread() because a) this is the only place a thread
	 * can be taken off this pend queue, and b) the only place a thread
	 * can be put on the pend queue is at thread level, which of course
	 * cannot interrupt the current context.
	 */
	_unpend_thread(thread);
    c958:	4620      	mov	r0, r4
    c95a:	f7ff ff98 	bl	c88e <_unpend_thread>
	__asm__ volatile(
    c95e:	f04f 0320 	mov.w	r3, #32
    c962:	f3ef 8511 	mrs	r5, BASEPRI
    c966:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();
	_ready_thread(thread);
    c96a:	4620      	mov	r0, r4
    c96c:	f7ff ff82 	bl	c874 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c970:	f385 8811 	msr	BASEPRI, r5
    c974:	2300      	movs	r3, #0
    c976:	6663      	str	r3, [r4, #100]	; 0x64
    c978:	bd70      	pop	{r4, r5, r6, pc}

0000c97a <sys_dlist_remove>:
	node->prev->next = node->next;
    c97a:	e890 000c 	ldmia.w	r0, {r2, r3}
    c97e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c980:	6802      	ldr	r2, [r0, #0]
    c982:	6053      	str	r3, [r2, #4]
    c984:	4770      	bx	lr

0000c986 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
    c986:	b570      	push	{r4, r5, r6, lr}
    c988:	2414      	movs	r4, #20
    c98a:	4615      	mov	r5, r2
    c98c:	fb04 0401 	mla	r4, r4, r1, r0
	event->poller = NULL;
    c990:	2600      	movs	r6, #0
	for (; last_registered >= 0; last_registered--) {
    c992:	2900      	cmp	r1, #0
    c994:	da00      	bge.n	c998 <clear_event_registrations+0x12>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
    c996:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
    c998:	7b63      	ldrb	r3, [r4, #13]
	event->poller = NULL;
    c99a:	60a6      	str	r6, [r4, #8]
	switch (event->type) {
    c99c:	f003 030f 	and.w	r3, r3, #15
    c9a0:	2b02      	cmp	r3, #2
    c9a2:	d003      	beq.n	c9ac <clear_event_registrations+0x26>
    c9a4:	2b04      	cmp	r3, #4
    c9a6:	d001      	beq.n	c9ac <clear_event_registrations+0x26>
    c9a8:	2b01      	cmp	r3, #1
    c9aa:	d102      	bne.n	c9b2 <clear_event_registrations+0x2c>
		sys_dlist_remove(&event->_node);
    c9ac:	4620      	mov	r0, r4
    c9ae:	f7ff ffe4 	bl	c97a <sys_dlist_remove>
    c9b2:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
    c9b6:	f04f 0320 	mov.w	r3, #32
    c9ba:	f3ef 8511 	mrs	r5, BASEPRI
    c9be:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
    c9c2:	3901      	subs	r1, #1
    c9c4:	3c14      	subs	r4, #20
    c9c6:	e7e4      	b.n	c992 <clear_event_registrations+0xc>

0000c9c8 <signal_poll_event>:
}

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
    c9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*must_reschedule = 0;
    c9ca:	2300      	movs	r3, #0
    c9cc:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
    c9ce:	6883      	ldr	r3, [r0, #8]
{
    c9d0:	4605      	mov	r5, r0
    c9d2:	460e      	mov	r6, r1
    c9d4:	4617      	mov	r7, r2
	if (!event->poller) {
    c9d6:	2b00      	cmp	r3, #0
    c9d8:	d049      	beq.n	ca6e <signal_poll_event+0xa6>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
    c9da:	6819      	ldr	r1, [r3, #0]
	thread->base.thread_state &= ~states;
    c9dc:	7a4b      	ldrb	r3, [r1, #9]
    c9de:	f023 0220 	bic.w	r2, r3, #32

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
    c9e2:	0798      	lsls	r0, r3, #30
    c9e4:	724a      	strb	r2, [r1, #9]
    c9e6:	d542      	bpl.n	ca6e <signal_poll_event+0xa6>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
    c9e8:	6a0b      	ldr	r3, [r1, #32]
    c9ea:	3302      	adds	r3, #2
    c9ec:	d04a      	beq.n	ca84 <signal_poll_event+0xbc>
	sys_dlist_remove(&thread->base.k_q_node);
    c9ee:	4608      	mov	r0, r1
    c9f0:	f7ff ffc3 	bl	c97a <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    c9f4:	7a4b      	ldrb	r3, [r1, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    c9f6:	6a0c      	ldr	r4, [r1, #32]
    c9f8:	f023 0302 	bic.w	r3, r3, #2
    c9fc:	1c62      	adds	r2, r4, #1
    c9fe:	724b      	strb	r3, [r1, #9]
	return _abort_timeout(&thread->base.timeout);
    ca00:	f101 0010 	add.w	r0, r1, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    ca04:	d00c      	beq.n	ca20 <signal_poll_event+0x58>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    ca06:	4b21      	ldr	r3, [pc, #132]	; (ca8c <signal_poll_event+0xc4>)
    ca08:	695b      	ldr	r3, [r3, #20]
    ca0a:	4298      	cmp	r0, r3
	return (node == list->tail) ? NULL : node->next;
    ca0c:	bf1f      	itttt	ne
    ca0e:	690a      	ldrne	r2, [r1, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    ca10:	6913      	ldrne	r3, [r2, #16]
    ca12:	191b      	addne	r3, r3, r4
    ca14:	6113      	strne	r3, [r2, #16]
	sys_dlist_remove(&timeout->node);
    ca16:	f7ff ffb0 	bl	c97a <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
    ca1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ca1e:	620b      	str	r3, [r1, #32]
	return !(_is_thread_prevented_from_running(thread) ||
    ca20:	7a48      	ldrb	r0, [r1, #9]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
    ca22:	2e00      	cmp	r6, #0
    ca24:	bf0c      	ite	eq
    ca26:	f06f 0303 	mvneq.w	r3, #3
    ca2a:	2300      	movne	r3, #0
    ca2c:	f010 041f 	ands.w	r4, r0, #31
    ca30:	664b      	str	r3, [r1, #100]	; 0x64
    ca32:	d11c      	bne.n	ca6e <signal_poll_event+0xa6>
    ca34:	6a0b      	ldr	r3, [r1, #32]
    ca36:	3301      	adds	r3, #1
    ca38:	d119      	bne.n	ca6e <signal_poll_event+0xa6>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
    ca3a:	4608      	mov	r0, r1
    ca3c:	f7ff fa1c 	bl	be78 <_add_thread_to_ready_q>
    ca40:	f3ef 8305 	mrs	r3, IPSR
    ca44:	2b0d      	cmp	r3, #13
    ca46:	d81b      	bhi.n	ca80 <signal_poll_event+0xb8>
    ca48:	b123      	cbz	r3, ca54 <signal_poll_event+0x8c>
    ca4a:	4b11      	ldr	r3, [pc, #68]	; (ca90 <signal_poll_event+0xc8>)
    ca4c:	6858      	ldr	r0, [r3, #4]
    ca4e:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
    ca52:	d00b      	beq.n	ca6c <signal_poll_event+0xa4>
	return _is_preempt(_current) && __must_switch_threads();
    ca54:	4b0d      	ldr	r3, [pc, #52]	; (ca8c <signal_poll_event+0xc4>)
    ca56:	689b      	ldr	r3, [r3, #8]
    ca58:	895b      	ldrh	r3, [r3, #10]
    ca5a:	2b7f      	cmp	r3, #127	; 0x7f
    ca5c:	d901      	bls.n	ca62 <signal_poll_event+0x9a>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    ca5e:	2000      	movs	r0, #0
    ca60:	e004      	b.n	ca6c <signal_poll_event+0xa4>
    ca62:	f7ff fb03 	bl	c06c <__must_switch_threads>
    ca66:	3000      	adds	r0, #0
    ca68:	bf18      	it	ne
    ca6a:	2001      	movne	r0, #1
    ca6c:	6038      	str	r0, [r7, #0]
	event->state |= state;
    ca6e:	7b6b      	ldrb	r3, [r5, #13]
    ca70:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
    ca74:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
    ca78:	2000      	movs	r0, #0
	event->state |= state;
    ca7a:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
    ca7c:	60a8      	str	r0, [r5, #8]

ready_event:
	set_event_ready(event, state);
	return 0;
    ca7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    ca80:	4620      	mov	r0, r4
    ca82:	e7f3      	b.n	ca6c <signal_poll_event+0xa4>
		return -EAGAIN;
    ca84:	f06f 000a 	mvn.w	r0, #10
    ca88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ca8a:	bf00      	nop
    ca8c:	2000199c 	.word	0x2000199c
    ca90:	e000ed00 	.word	0xe000ed00

0000ca94 <add_event>:
	return list->head == list;
    ca94:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    ca96:	4298      	cmp	r0, r3
{
    ca98:	b530      	push	{r4, r5, lr}
    ca9a:	d00a      	beq.n	cab2 <add_event+0x1e>
    ca9c:	6844      	ldr	r4, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
    ca9e:	b144      	cbz	r4, cab2 <add_event+0x1e>
    caa0:	68a5      	ldr	r5, [r4, #8]
    caa2:	6812      	ldr	r2, [r2, #0]
    caa4:	682d      	ldr	r5, [r5, #0]
    caa6:	f992 200a 	ldrsb.w	r2, [r2, #10]
    caaa:	f995 500a 	ldrsb.w	r5, [r5, #10]
    caae:	4295      	cmp	r5, r2
    cab0:	da17      	bge.n	cae2 <add_event+0x4e>
	node->next = list;
    cab2:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    cab4:	6843      	ldr	r3, [r0, #4]
    cab6:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    cab8:	6843      	ldr	r3, [r0, #4]
    caba:	6019      	str	r1, [r3, #0]
	list->tail = node;
    cabc:	6041      	str	r1, [r0, #4]
    cabe:	bd30      	pop	{r4, r5, pc}
		if (_is_t1_higher_prio_than_t2(poller->thread,
    cac0:	689d      	ldr	r5, [r3, #8]
    cac2:	682d      	ldr	r5, [r5, #0]
    cac4:	f995 500a 	ldrsb.w	r5, [r5, #10]
    cac8:	4295      	cmp	r5, r2
    caca:	dd06      	ble.n	cada <add_event+0x46>
		node->prev = insert_point->prev;
    cacc:	685a      	ldr	r2, [r3, #4]
    cace:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    cad0:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    cad2:	685a      	ldr	r2, [r3, #4]
    cad4:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    cad6:	6059      	str	r1, [r3, #4]
    cad8:	bd30      	pop	{r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    cada:	42a3      	cmp	r3, r4
    cadc:	d003      	beq.n	cae6 <add_event+0x52>
    cade:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    cae0:	b10b      	cbz	r3, cae6 <add_event+0x52>
    cae2:	2b00      	cmp	r3, #0
    cae4:	d1ec      	bne.n	cac0 <add_event+0x2c>
	node->prev = list->tail;
    cae6:	e881 0011 	stmia.w	r1, {r0, r4}
    caea:	e7e5      	b.n	cab8 <add_event+0x24>

0000caec <k_poll_event_init>:
{
    caec:	b530      	push	{r4, r5, lr}
	event->type = type;
    caee:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
    caf0:	6103      	str	r3, [r0, #16]
	event->type = type;
    caf2:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
    caf6:	7b81      	ldrb	r1, [r0, #14]
    caf8:	f362 0100 	bfi	r1, r2, #0, #1
    cafc:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
    cafe:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
    cb00:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
    cb02:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
    cb06:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
    cb0a:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
    cb0c:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
    cb0e:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
    cb10:	bd30      	pop	{r4, r5, pc}
	...

0000cb14 <k_poll>:
{
    cb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb18:	b087      	sub	sp, #28
    cb1a:	4680      	mov	r8, r0
    cb1c:	9101      	str	r1, [sp, #4]
    cb1e:	4691      	mov	r9, r2
    cb20:	f04f 0320 	mov.w	r3, #32
    cb24:	f3ef 8111 	mrs	r1, BASEPRI
    cb28:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
    cb2c:	4d4a      	ldr	r5, [pc, #296]	; (cc58 <k_poll+0x144>)
    cb2e:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= states;
    cb30:	7a53      	ldrb	r3, [r2, #9]
    cb32:	f043 0320 	orr.w	r3, r3, #32
    cb36:	7253      	strb	r3, [r2, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    cb38:	f381 8811 	msr	BASEPRI, r1
	struct _poller poller = { .thread = _current };
    cb3c:	f10d 0a18 	add.w	sl, sp, #24
    cb40:	68aa      	ldr	r2, [r5, #8]
    cb42:	f84a 2d0c 	str.w	r2, [sl, #-12]!
    cb46:	4604      	mov	r4, r0
	for (int ii = 0; ii < num_events; ii++) {
    cb48:	2700      	movs	r7, #0
	int last_registered = -1, rc;
    cb4a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
    cb4e:	9b01      	ldr	r3, [sp, #4]
    cb50:	429f      	cmp	r7, r3
    cb52:	db15      	blt.n	cb80 <k_poll+0x6c>
	__asm__ volatile(
    cb54:	f04f 0320 	mov.w	r3, #32
    cb58:	f3ef 8711 	mrs	r7, BASEPRI
    cb5c:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
    cb60:	68aa      	ldr	r2, [r5, #8]
    cb62:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
    cb64:	f013 0420 	ands.w	r4, r3, #32
    cb68:	d144      	bne.n	cbf4 <k_poll+0xe0>
		clear_event_registrations(events, last_registered, key);
    cb6a:	463a      	mov	r2, r7
    cb6c:	4631      	mov	r1, r6
    cb6e:	4640      	mov	r0, r8
    cb70:	f7ff ff09 	bl	c986 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    cb74:	f387 8811 	msr	BASEPRI, r7
}
    cb78:	4620      	mov	r0, r4
    cb7a:	b007      	add	sp, #28
    cb7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
    cb80:	f04f 0220 	mov.w	r2, #32
    cb84:	f3ef 8b11 	mrs	fp, BASEPRI
    cb88:	f382 8811 	msr	BASEPRI, r2
	switch (event->type) {
    cb8c:	7b61      	ldrb	r1, [r4, #13]
    cb8e:	f001 020f 	and.w	r2, r1, #15
    cb92:	2a02      	cmp	r2, #2
    cb94:	d003      	beq.n	cb9e <k_poll+0x8a>
    cb96:	2a04      	cmp	r2, #4
    cb98:	d004      	beq.n	cba4 <k_poll+0x90>
    cb9a:	2a01      	cmp	r2, #1
    cb9c:	d106      	bne.n	cbac <k_poll+0x98>
		if (event->signal->signaled) {
    cb9e:	6920      	ldr	r0, [r4, #16]
    cba0:	6880      	ldr	r0, [r0, #8]
    cba2:	e001      	b.n	cba8 <k_poll+0x94>
		if (!k_queue_is_empty(event->queue)) {
    cba4:	6920      	ldr	r0, [r4, #16]
    cba6:	6800      	ldr	r0, [r0, #0]
		if (event->signal->signaled) {
    cba8:	2800      	cmp	r0, #0
    cbaa:	d148      	bne.n	cc3e <k_poll+0x12a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
    cbac:	f1b9 0f00 	cmp.w	r9, #0
    cbb0:	d016      	beq.n	cbe0 <k_poll+0xcc>
    cbb2:	68a9      	ldr	r1, [r5, #8]
    cbb4:	7a49      	ldrb	r1, [r1, #9]
    cbb6:	068b      	lsls	r3, r1, #26
    cbb8:	d512      	bpl.n	cbe0 <k_poll+0xcc>
	switch (event->type) {
    cbba:	2a02      	cmp	r2, #2
    cbbc:	d007      	beq.n	cbce <k_poll+0xba>
    cbbe:	2a04      	cmp	r2, #4
    cbc0:	d013      	beq.n	cbea <k_poll+0xd6>
    cbc2:	2a01      	cmp	r2, #1
    cbc4:	d109      	bne.n	cbda <k_poll+0xc6>
		add_event(&event->signal->poll_events, event, poller);
    cbc6:	4652      	mov	r2, sl
    cbc8:	4621      	mov	r1, r4
    cbca:	6920      	ldr	r0, [r4, #16]
    cbcc:	e003      	b.n	cbd6 <k_poll+0xc2>
		add_event(&event->sem->poll_events, event, poller);
    cbce:	6920      	ldr	r0, [r4, #16]
    cbd0:	4652      	mov	r2, sl
    cbd2:	4621      	mov	r1, r4
    cbd4:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
    cbd6:	f7ff ff5d 	bl	ca94 <add_event>
	event->poller = poller;
    cbda:	f8c4 a008 	str.w	sl, [r4, #8]
				++last_registered;
    cbde:	3601      	adds	r6, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    cbe0:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
    cbe4:	3701      	adds	r7, #1
    cbe6:	3414      	adds	r4, #20
    cbe8:	e7b1      	b.n	cb4e <k_poll+0x3a>
		add_event(&event->queue->poll_events, event, poller);
    cbea:	6920      	ldr	r0, [r4, #16]
    cbec:	4652      	mov	r2, sl
    cbee:	4621      	mov	r1, r4
    cbf0:	3008      	adds	r0, #8
    cbf2:	e7f0      	b.n	cbd6 <k_poll+0xc2>
	thread->base.thread_state &= ~states;
    cbf4:	f023 0320 	bic.w	r3, r3, #32
    cbf8:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
    cbfa:	f1b9 0f00 	cmp.w	r9, #0
    cbfe:	d104      	bne.n	cc0a <k_poll+0xf6>
    cc00:	f387 8811 	msr	BASEPRI, r7
		return -EAGAIN;
    cc04:	f06f 040a 	mvn.w	r4, #10
    cc08:	e7b6      	b.n	cb78 <k_poll+0x64>
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    cc0a:	a804      	add	r0, sp, #16
	_pend_current_thread(&wait_q, timeout);
    cc0c:	4649      	mov	r1, r9
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    cc0e:	9004      	str	r0, [sp, #16]
    cc10:	9005      	str	r0, [sp, #20]
	_pend_current_thread(&wait_q, timeout);
    cc12:	f7ff fa1b 	bl	c04c <_pend_current_thread>
	_update_time_slice_before_swap();
    cc16:	f7ff fb03 	bl	c220 <_update_time_slice_before_swap>
	return __swap(key);
    cc1a:	4638      	mov	r0, r7
    cc1c:	f7f3 fee6 	bl	9ec <__swap>
    cc20:	4604      	mov	r4, r0
	__asm__ volatile(
    cc22:	f04f 0320 	mov.w	r3, #32
    cc26:	f3ef 8511 	mrs	r5, BASEPRI
    cc2a:	f383 8811 	msr	BASEPRI, r3
	clear_event_registrations(events, last_registered, key);
    cc2e:	462a      	mov	r2, r5
    cc30:	4631      	mov	r1, r6
    cc32:	4640      	mov	r0, r8
    cc34:	f7ff fea7 	bl	c986 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    cc38:	f385 8811 	msr	BASEPRI, r5
	return swap_rc;
    cc3c:	e79c      	b.n	cb78 <k_poll+0x64>
	event->state |= state;
    cc3e:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
    cc42:	f362 1107 	bfi	r1, r2, #4, #4
	event->poller = NULL;
    cc46:	2300      	movs	r3, #0
    cc48:	60a3      	str	r3, [r4, #8]
	event->state |= state;
    cc4a:	7361      	strb	r1, [r4, #13]
			clear_polling_state(_current);
    cc4c:	68a9      	ldr	r1, [r5, #8]
    cc4e:	7a4a      	ldrb	r2, [r1, #9]
    cc50:	f022 0220 	bic.w	r2, r2, #32
    cc54:	724a      	strb	r2, [r1, #9]
    cc56:	e7c3      	b.n	cbe0 <k_poll+0xcc>
    cc58:	2000199c 	.word	0x2000199c

0000cc5c <_handle_obj_poll_events>:
}

/* returns 1 if a reschedule must take place, 0 otherwise */
int _handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
    cc5c:	b513      	push	{r0, r1, r4, lr}
	return list->head == list;
    cc5e:	6804      	ldr	r4, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
    cc60:	42a0      	cmp	r0, r4
    cc62:	d102      	bne.n	cc6a <_handle_obj_poll_events+0xe>
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
		return 0;
    cc64:	2000      	movs	r0, #0
	}

	(void) signal_poll_event(poll_event, state, &must_reschedule);
	return must_reschedule;
}
    cc66:	b002      	add	sp, #8
    cc68:	bd10      	pop	{r4, pc}
		return NULL;
	}

	node = list->head;
	sys_dlist_remove(node);
    cc6a:	4620      	mov	r0, r4
    cc6c:	f7ff fe85 	bl	c97a <sys_dlist_remove>
	if (!poll_event) {
    cc70:	2c00      	cmp	r4, #0
    cc72:	d0f7      	beq.n	cc64 <_handle_obj_poll_events+0x8>
	(void) signal_poll_event(poll_event, state, &must_reschedule);
    cc74:	aa01      	add	r2, sp, #4
    cc76:	4620      	mov	r0, r4
    cc78:	f7ff fea6 	bl	c9c8 <signal_poll_event>
	return must_reschedule;
    cc7c:	9801      	ldr	r0, [sp, #4]
    cc7e:	e7f2      	b.n	cc66 <_handle_obj_poll_events+0xa>

0000cc80 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
    cc80:	4770      	bx	lr
