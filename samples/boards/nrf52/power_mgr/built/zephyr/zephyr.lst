
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20004080 	.word	0x20004080

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00001101 	.word	0x00001101
       8:	00001151 	.word	0x00001151
       c:	00000f99 	.word	0x00000f99
      10:	00000f99 	.word	0x00000f99
      14:	00000f99 	.word	0x00000f99
      18:	00000f99 	.word	0x00000f99
      1c:	00000f99 	.word	0x00000f99
      20:	00000f99 	.word	0x00000f99
      24:	00000f99 	.word	0x00000f99
      28:	00000f99 	.word	0x00000f99
      2c:	00000b8d 	.word	0x00000b8d
      30:	00000f99 	.word	0x00000f99
      34:	00000f99 	.word	0x00000f99
      38:	00000b49 	.word	0x00000b49
      3c:	00000f99 	.word	0x00000f99

00000040 <_irq_vector_table>:
      40:	000010c5 0000927f 000010c5 000010c5     ................
      50:	000010c5 000010c5 000010c5 000010c5     ................
      60:	000010c5 000010c5 000010c5 000010c5     ................
      70:	000010c5 000010c5 000010c5 000010c5     ................
      80:	000010c5 000010c5 000010c5 000010c5     ................
      90:	000010c5 000010c5 000010c5 000010c5     ................
      a0:	000010c5 000010c5 000010c5 000010c5     ................
      b0:	000010c5 000010c5 000010c5 000010c5     ................
      c0:	000010c5 000010c5 000010c5 000010c5     ................
      d0:	000010c5 000010c5 000010c5              ............

000000dc <_sw_isr_table>:
      dc:	00000000 00001819 00000000 00000f11     ................
      ec:	00000000 00000f11 00000000 00000f11     ................
      fc:	00000000 00000f11 00000000 00000f11     ................
     10c:	200050c0 000019fd 00000000 00000f11     .P. ............
     11c:	00000000 00000f11 00000000 00000f11     ................
     12c:	00000000 00000f11 00000000 00009245     ............E...
     13c:	00000000 00000f11 2000509c 00001de1     .........P. ....
     14c:	00000000 00000f11 00000000 00000f11     ................
     15c:	00000000 00000f11 00000000 00001f21     ............!...
     16c:	00000000 00000f11 00000000 00000f11     ................
     17c:	00000000 00000f11 00000000 00000f11     ................
     18c:	00000000 00000f11 00000000 00000f11     ................
     19c:	00000000 00009279 00000000 00000f11     ....y...........
     1ac:	00000000 00000f11 00000000 00000f11     ................
     1bc:	00000000 00000f11 00000000 00000f11     ................
     1cc:	00000000 00000f11 00000000 00000f11     ................
     1dc:	00000000 00000f11 00000000 00000f11     ................
     1ec:	00000000 00000f11 00000000 00000f11     ................
     1fc:	00000000 00000f11 00000000 00000f11     ................
     20c:	00000000 00000f11                       ........

00000214 <__aeabi_uldivmod>:
     214:	b953      	cbnz	r3, 22c <__aeabi_uldivmod+0x18>
     216:	b94a      	cbnz	r2, 22c <__aeabi_uldivmod+0x18>
     218:	2900      	cmp	r1, #0
     21a:	bf08      	it	eq
     21c:	2800      	cmpeq	r0, #0
     21e:	bf1c      	itt	ne
     220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     228:	f000 b98e 	b.w	548 <__aeabi_idiv0>
     22c:	f1ad 0c08 	sub.w	ip, sp, #8
     230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     234:	f000 f81a 	bl	26c <__udivmoddi4>
     238:	f8dd e004 	ldr.w	lr, [sp, #4]
     23c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     240:	b004      	add	sp, #16
     242:	4770      	bx	lr

00000244 <__popcountsi2>:
     244:	0843      	lsrs	r3, r0, #1
     246:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     24a:	1ac0      	subs	r0, r0, r3
     24c:	0883      	lsrs	r3, r0, #2
     24e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     252:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     256:	4418      	add	r0, r3
     258:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     25c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     260:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     264:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     268:	0e00      	lsrs	r0, r0, #24
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	468c      	mov	ip, r1
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	9e08      	ldr	r6, [sp, #32]
     278:	2b00      	cmp	r3, #0
     27a:	d151      	bne.n	320 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa0>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d96d      	bls.n	35e <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     282:	fab2 fe82 	clz	lr, r2
     286:	f1be 0f00 	cmp.w	lr, #0
     28a:	d00b      	beq.n	2a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x24>
     28c:	f1ce 0c20 	rsb	ip, lr, #32
     290:	fa01 f50e 	lsl.w	r5, r1, lr
     294:	fa20 fc0c 	lsr.w	ip, r0, ip
     298:	fa02 f70e 	lsl.w	r7, r2, lr
     29c:	ea4c 0c05 	orr.w	ip, ip, r5
     2a0:	fa00 f40e 	lsl.w	r4, r0, lr
     2a4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2a8:	0c25      	lsrs	r5, r4, #16
     2aa:	fbbc f8fa 	udiv	r8, ip, sl
     2ae:	fa1f f987 	uxth.w	r9, r7
     2b2:	fb0a cc18 	mls	ip, sl, r8, ip
     2b6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ba:	fb08 f309 	mul.w	r3, r8, r9
     2be:	42ab      	cmp	r3, r5
     2c0:	d90a      	bls.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     2c2:	19ed      	adds	r5, r5, r7
     2c4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     2c8:	f080 8123 	bcs.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2cc:	42ab      	cmp	r3, r5
     2ce:	f240 8120 	bls.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2d2:	f1a8 0802 	sub.w	r8, r8, #2
     2d6:	443d      	add	r5, r7
     2d8:	1aed      	subs	r5, r5, r3
     2da:	b2a4      	uxth	r4, r4
     2dc:	fbb5 f0fa 	udiv	r0, r5, sl
     2e0:	fb0a 5510 	mls	r5, sl, r0, r5
     2e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     2e8:	fb00 f909 	mul.w	r9, r0, r9
     2ec:	45a1      	cmp	r9, r4
     2ee:	d909      	bls.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     2f0:	19e4      	adds	r4, r4, r7
     2f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2f6:	f080 810a 	bcs.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     2fa:	45a1      	cmp	r9, r4
     2fc:	f240 8107 	bls.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     300:	3802      	subs	r0, #2
     302:	443c      	add	r4, r7
     304:	eba4 0409 	sub.w	r4, r4, r9
     308:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     30c:	2100      	movs	r1, #0
     30e:	2e00      	cmp	r6, #0
     310:	d061      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     312:	fa24 f40e 	lsr.w	r4, r4, lr
     316:	2300      	movs	r3, #0
     318:	6034      	str	r4, [r6, #0]
     31a:	6073      	str	r3, [r6, #4]
     31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     320:	428b      	cmp	r3, r1
     322:	d907      	bls.n	334 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     324:	2e00      	cmp	r6, #0
     326:	d054      	beq.n	3d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x152>
     328:	2100      	movs	r1, #0
     32a:	e886 0021 	stmia.w	r6, {r0, r5}
     32e:	4608      	mov	r0, r1
     330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     334:	fab3 f183 	clz	r1, r3
     338:	2900      	cmp	r1, #0
     33a:	f040 808e 	bne.w	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     33e:	42ab      	cmp	r3, r5
     340:	d302      	bcc.n	348 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc8>
     342:	4282      	cmp	r2, r0
     344:	f200 80fa 	bhi.w	53c <CONFIG_BT_RX_STACK_SIZE+0x13c>
     348:	1a84      	subs	r4, r0, r2
     34a:	eb65 0503 	sbc.w	r5, r5, r3
     34e:	2001      	movs	r0, #1
     350:	46ac      	mov	ip, r5
     352:	2e00      	cmp	r6, #0
     354:	d03f      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     356:	e886 1010 	stmia.w	r6, {r4, ip}
     35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     35e:	b912      	cbnz	r2, 366 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe6>
     360:	2701      	movs	r7, #1
     362:	fbb7 f7f2 	udiv	r7, r7, r2
     366:	fab7 fe87 	clz	lr, r7
     36a:	f1be 0f00 	cmp.w	lr, #0
     36e:	d134      	bne.n	3da <CONFIG_BT_HCI_TX_STACK_SIZE+0x15a>
     370:	1beb      	subs	r3, r5, r7
     372:	0c3a      	lsrs	r2, r7, #16
     374:	fa1f fc87 	uxth.w	ip, r7
     378:	2101      	movs	r1, #1
     37a:	fbb3 f8f2 	udiv	r8, r3, r2
     37e:	0c25      	lsrs	r5, r4, #16
     380:	fb02 3318 	mls	r3, r2, r8, r3
     384:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     388:	fb0c f308 	mul.w	r3, ip, r8
     38c:	42ab      	cmp	r3, r5
     38e:	d907      	bls.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>
     390:	19ed      	adds	r5, r5, r7
     392:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     396:	d202      	bcs.n	39e <CONFIG_BT_HCI_TX_STACK_SIZE+0x11e>
     398:	42ab      	cmp	r3, r5
     39a:	f200 80d1 	bhi.w	540 <CONFIG_BT_RX_STACK_SIZE+0x140>
     39e:	4680      	mov	r8, r0
     3a0:	1aed      	subs	r5, r5, r3
     3a2:	b2a3      	uxth	r3, r4
     3a4:	fbb5 f0f2 	udiv	r0, r5, r2
     3a8:	fb02 5510 	mls	r5, r2, r0, r5
     3ac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     3b0:	fb0c fc00 	mul.w	ip, ip, r0
     3b4:	45a4      	cmp	ip, r4
     3b6:	d907      	bls.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     3b8:	19e4      	adds	r4, r4, r7
     3ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     3be:	d202      	bcs.n	3c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x146>
     3c0:	45a4      	cmp	ip, r4
     3c2:	f200 80b8 	bhi.w	536 <CONFIG_BT_RX_STACK_SIZE+0x136>
     3c6:	4618      	mov	r0, r3
     3c8:	eba4 040c 	sub.w	r4, r4, ip
     3cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     3d0:	e79d      	b.n	30e <CONFIG_BT_HCI_TX_STACK_SIZE+0x8e>
     3d2:	4631      	mov	r1, r6
     3d4:	4630      	mov	r0, r6
     3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3da:	f1ce 0420 	rsb	r4, lr, #32
     3de:	fa05 f30e 	lsl.w	r3, r5, lr
     3e2:	fa07 f70e 	lsl.w	r7, r7, lr
     3e6:	fa20 f804 	lsr.w	r8, r0, r4
     3ea:	0c3a      	lsrs	r2, r7, #16
     3ec:	fa25 f404 	lsr.w	r4, r5, r4
     3f0:	ea48 0803 	orr.w	r8, r8, r3
     3f4:	fbb4 f1f2 	udiv	r1, r4, r2
     3f8:	ea4f 4518 	mov.w	r5, r8, lsr #16
     3fc:	fb02 4411 	mls	r4, r2, r1, r4
     400:	fa1f fc87 	uxth.w	ip, r7
     404:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     408:	fb01 f30c 	mul.w	r3, r1, ip
     40c:	42ab      	cmp	r3, r5
     40e:	fa00 f40e 	lsl.w	r4, r0, lr
     412:	d909      	bls.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     414:	19ed      	adds	r5, r5, r7
     416:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     41a:	f080 808a 	bcs.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     41e:	42ab      	cmp	r3, r5
     420:	f240 8087 	bls.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     424:	3902      	subs	r1, #2
     426:	443d      	add	r5, r7
     428:	1aeb      	subs	r3, r5, r3
     42a:	fa1f f588 	uxth.w	r5, r8
     42e:	fbb3 f0f2 	udiv	r0, r3, r2
     432:	fb02 3310 	mls	r3, r2, r0, r3
     436:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     43a:	fb00 f30c 	mul.w	r3, r0, ip
     43e:	42ab      	cmp	r3, r5
     440:	d907      	bls.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     442:	19ed      	adds	r5, r5, r7
     444:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     448:	d26f      	bcs.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44a:	42ab      	cmp	r3, r5
     44c:	d96d      	bls.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44e:	3802      	subs	r0, #2
     450:	443d      	add	r5, r7
     452:	1aeb      	subs	r3, r5, r3
     454:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     458:	e78f      	b.n	37a <CONFIG_BT_HCI_TX_STACK_SIZE+0xfa>
     45a:	f1c1 0720 	rsb	r7, r1, #32
     45e:	fa22 f807 	lsr.w	r8, r2, r7
     462:	408b      	lsls	r3, r1
     464:	fa05 f401 	lsl.w	r4, r5, r1
     468:	ea48 0303 	orr.w	r3, r8, r3
     46c:	fa20 fe07 	lsr.w	lr, r0, r7
     470:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     474:	40fd      	lsrs	r5, r7
     476:	ea4e 0e04 	orr.w	lr, lr, r4
     47a:	fbb5 f9fc 	udiv	r9, r5, ip
     47e:	ea4f 441e 	mov.w	r4, lr, lsr #16
     482:	fb0c 5519 	mls	r5, ip, r9, r5
     486:	fa1f f883 	uxth.w	r8, r3
     48a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     48e:	fb09 f408 	mul.w	r4, r9, r8
     492:	42ac      	cmp	r4, r5
     494:	fa02 f201 	lsl.w	r2, r2, r1
     498:	fa00 fa01 	lsl.w	sl, r0, r1
     49c:	d908      	bls.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     49e:	18ed      	adds	r5, r5, r3
     4a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4a4:	d243      	bcs.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4a6:	42ac      	cmp	r4, r5
     4a8:	d941      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4aa:	f1a9 0902 	sub.w	r9, r9, #2
     4ae:	441d      	add	r5, r3
     4b0:	1b2d      	subs	r5, r5, r4
     4b2:	fa1f fe8e 	uxth.w	lr, lr
     4b6:	fbb5 f0fc 	udiv	r0, r5, ip
     4ba:	fb0c 5510 	mls	r5, ip, r0, r5
     4be:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     4c2:	fb00 f808 	mul.w	r8, r0, r8
     4c6:	45a0      	cmp	r8, r4
     4c8:	d907      	bls.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     4ca:	18e4      	adds	r4, r4, r3
     4cc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     4d0:	d229      	bcs.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d2:	45a0      	cmp	r8, r4
     4d4:	d927      	bls.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d6:	3802      	subs	r0, #2
     4d8:	441c      	add	r4, r3
     4da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4de:	eba4 0408 	sub.w	r4, r4, r8
     4e2:	fba0 8902 	umull	r8, r9, r0, r2
     4e6:	454c      	cmp	r4, r9
     4e8:	46c6      	mov	lr, r8
     4ea:	464d      	mov	r5, r9
     4ec:	d315      	bcc.n	51a <CONFIG_BT_RX_STACK_SIZE+0x11a>
     4ee:	d012      	beq.n	516 <CONFIG_BT_RX_STACK_SIZE+0x116>
     4f0:	b156      	cbz	r6, 508 <CONFIG_BT_RX_STACK_SIZE+0x108>
     4f2:	ebba 030e 	subs.w	r3, sl, lr
     4f6:	eb64 0405 	sbc.w	r4, r4, r5
     4fa:	fa04 f707 	lsl.w	r7, r4, r7
     4fe:	40cb      	lsrs	r3, r1
     500:	431f      	orrs	r7, r3
     502:	40cc      	lsrs	r4, r1
     504:	6037      	str	r7, [r6, #0]
     506:	6074      	str	r4, [r6, #4]
     508:	2100      	movs	r1, #0
     50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     50e:	4618      	mov	r0, r3
     510:	e6f8      	b.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     512:	4690      	mov	r8, r2
     514:	e6e0      	b.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     516:	45c2      	cmp	sl, r8
     518:	d2ea      	bcs.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     51a:	ebb8 0e02 	subs.w	lr, r8, r2
     51e:	eb69 0503 	sbc.w	r5, r9, r3
     522:	3801      	subs	r0, #1
     524:	e7e4      	b.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     526:	4628      	mov	r0, r5
     528:	e7d7      	b.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     52a:	4640      	mov	r0, r8
     52c:	e791      	b.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     52e:	4681      	mov	r9, r0
     530:	e7be      	b.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     532:	4601      	mov	r1, r0
     534:	e778      	b.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     536:	3802      	subs	r0, #2
     538:	443c      	add	r4, r7
     53a:	e745      	b.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     53c:	4608      	mov	r0, r1
     53e:	e708      	b.n	352 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd2>
     540:	f1a8 0802 	sub.w	r8, r8, #2
     544:	443d      	add	r5, r7
     546:	e72b      	b.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>

00000548 <__aeabi_idiv0>:
     548:	4770      	bx	lr
     54a:	bf00      	nop

0000054c <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
     54c:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
     54e:	4603      	mov	r3, r0
     550:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     554:	b90a      	cbnz	r2, 55a <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
     556:	701a      	strb	r2, [r3, #0]

	return dest;
}
     558:	4770      	bx	lr
		*d = *s;
     55a:	f803 2b01 	strb.w	r2, [r3], #1
     55e:	e7f7      	b.n	550 <strcpy+0x4>

00000560 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
     560:	3801      	subs	r0, #1
     562:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
     564:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     568:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     56c:	4293      	cmp	r3, r2
     56e:	d102      	bne.n	576 <strcmp+0x16>
     570:	2b00      	cmp	r3, #0
     572:	d1f7      	bne.n	564 <strcmp+0x4>
     574:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
     576:	1a98      	subs	r0, r3, r2
     578:	4770      	bx	lr

0000057a <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     57a:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
     57c:	b182      	cbz	r2, 5a0 <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     57e:	3a01      	subs	r2, #1
     580:	460c      	mov	r4, r1
     582:	4603      	mov	r3, r0
     584:	d103      	bne.n	58e <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
     586:	781a      	ldrb	r2, [r3, #0]
     588:	7820      	ldrb	r0, [r4, #0]
     58a:	1a10      	subs	r0, r2, r0
     58c:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
     58e:	781e      	ldrb	r6, [r3, #0]
     590:	7825      	ldrb	r5, [r4, #0]
     592:	42ae      	cmp	r6, r5
     594:	f100 0001 	add.w	r0, r0, #1
     598:	f101 0101 	add.w	r1, r1, #1
     59c:	d0ef      	beq.n	57e <memcmp+0x4>
     59e:	e7f2      	b.n	586 <memcmp+0xc>
		return 0;
     5a0:	4610      	mov	r0, r2
}
     5a2:	bd70      	pop	{r4, r5, r6, pc}

000005a4 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     5a4:	ea81 0300 	eor.w	r3, r1, r0
     5a8:	f013 0f03 	tst.w	r3, #3
{
     5ac:	b570      	push	{r4, r5, r6, lr}
     5ae:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     5b0:	d00b      	beq.n	5ca <memcpy+0x26>
     5b2:	3b01      	subs	r3, #1
     5b4:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
     5b6:	4291      	cmp	r1, r2
     5b8:	d11b      	bne.n	5f2 <CONFIG_BT_CTLR_COMPANY_ID+0x1>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
     5ba:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
     5bc:	2a00      	cmp	r2, #0
     5be:	d0fc      	beq.n	5ba <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
     5c0:	f811 4b01 	ldrb.w	r4, [r1], #1
     5c4:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
     5c8:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
     5ca:	079c      	lsls	r4, r3, #30
     5cc:	d1f6      	bne.n	5bc <memcpy+0x18>
     5ce:	1f1e      	subs	r6, r3, #4
     5d0:	460d      	mov	r5, r1
     5d2:	1b54      	subs	r4, r2, r5
     5d4:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
     5d6:	2c03      	cmp	r4, #3
     5d8:	d806      	bhi.n	5e8 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xc>
     5da:	f022 0403 	bic.w	r4, r2, #3
     5de:	4421      	add	r1, r4
     5e0:	4423      	add	r3, r4
     5e2:	f002 0203 	and.w	r2, r2, #3
     5e6:	e7e4      	b.n	5b2 <memcpy+0xe>
			*(d_word++) = *(s_word++);
     5e8:	f855 4b04 	ldr.w	r4, [r5], #4
     5ec:	f846 4f04 	str.w	r4, [r6, #4]!
     5f0:	e7ef      	b.n	5d2 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
     5f2:	f811 4b01 	ldrb.w	r4, [r1], #1
     5f6:	f803 4f01 	strb.w	r4, [r3, #1]!
     5fa:	e7dc      	b.n	5b6 <memcpy+0x12>

000005fc <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
     5fc:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
     5fe:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
     600:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
     602:	079c      	lsls	r4, r3, #30
     604:	d111      	bne.n	62a <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
     606:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
     60a:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
     60e:	461e      	mov	r6, r3
     610:	1b95      	subs	r5, r2, r6
     612:	441d      	add	r5, r3
     614:	2d03      	cmp	r5, #3
     616:	d80e      	bhi.n	636 <memset+0x3a>
     618:	f022 0403 	bic.w	r4, r2, #3
     61c:	4423      	add	r3, r4
     61e:	f002 0203 	and.w	r2, r2, #3
     622:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
     624:	4293      	cmp	r3, r2
     626:	d109      	bne.n	63c <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
     628:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
     62a:	2a00      	cmp	r2, #0
     62c:	d0fc      	beq.n	628 <memset+0x2c>
		*(d_byte++) = c_byte;
     62e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
     632:	3a01      	subs	r2, #1
     634:	e7e5      	b.n	602 <memset+0x6>
		*(d_word++) = c_word;
     636:	f846 4b04 	str.w	r4, [r6], #4
     63a:	e7e9      	b.n	610 <memset+0x14>
		*(d_byte++) = c_byte;
     63c:	f803 1b01 	strb.w	r1, [r3], #1
     640:	e7f0      	b.n	624 <memset+0x28>
	...

00000644 <main>:
	printk(DEMO_DESCRIPTION);
}

/* Application main Thread */
void main(void)
{
     644:	b583      	push	{r0, r1, r7, lr}
	printk("\n\n***Power Management Demo on %s****\n", CONFIG_ARCH);
     646:	4934      	ldr	r1, [pc, #208]	; (718 <main+0xd4>)
     648:	4834      	ldr	r0, [pc, #208]	; (71c <main+0xd8>)
	 * Create an ordered list of devices that will be suspended.
	 * Ordering should be done based on dependencies. Devices
	 * in the beginning of the list will be resumed first.
	 */
	device_list_get(&device_list, &count);
	device_count = 4; /* Reserve for 32KHz, 16MHz, system clock, and uart */
     64a:	4d35      	ldr	r5, [pc, #212]	; (720 <main+0xdc>)

	for (i = 0; (i < count) && (device_count < DEVICE_POLICY_MAX); i++) {
		if (!strcmp(device_list[i].config->name, "clk_k32src")) {
     64c:	4f35      	ldr	r7, [pc, #212]	; (724 <main+0xe0>)
     64e:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 74c <main+0x108>
     652:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 750 <main+0x10c>
	printk("\n\n***Power Management Demo on %s****\n", CONFIG_ARCH);
     656:	f000 ff6b 	bl	1530 <printk>
	printk(DEMO_DESCRIPTION);
     65a:	4833      	ldr	r0, [pc, #204]	; (728 <main+0xe4>)
     65c:	f000 ff68 	bl	1530 <printk>
	gpiob = device_get_binding(PORT);
     660:	4832      	ldr	r0, [pc, #200]	; (72c <main+0xe8>)
     662:	f00a fa79 	bl	ab58 <device_get_binding>
     666:	4a32      	ldr	r2, [pc, #200]	; (730 <main+0xec>)
static inline int _impl_gpio_config(struct device *port, int access_op,
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, access_op, pin, flags);
     668:	6843      	ldr	r3, [r0, #4]
     66a:	6010      	str	r0, [r2, #0]
     66c:	2100      	movs	r1, #0
     66e:	220d      	movs	r2, #13
     670:	681c      	ldr	r4, [r3, #0]
     672:	4b30      	ldr	r3, [pc, #192]	; (734 <main+0xf0>)
     674:	47a0      	blx	r4
	nrf_gpiote_clear_port_event();
     676:	f001 fa85 	bl	1b84 <nrf_gpiote_clear_port_event>
	nrf_gpiote_interrupt_enable(GPIOTE_INTENSET_PORT_Msk);
     67a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
     67e:	f001 fa7b 	bl	1b78 <nrf_gpiote_interrupt_enable>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     682:	4b2d      	ldr	r3, [pc, #180]	; (738 <main+0xf4>)
	device_list_get(&device_list, &count);
     684:	4827      	ldr	r0, [pc, #156]	; (724 <main+0xe0>)
     686:	2240      	movs	r2, #64	; 0x40
     688:	601a      	str	r2, [r3, #0]
     68a:	a901      	add	r1, sp, #4
     68c:	f00a fa8c 	bl	aba8 <device_list_get>
	device_count = 4; /* Reserve for 32KHz, 16MHz, system clock, and uart */
     690:	2304      	movs	r3, #4
     692:	602b      	str	r3, [r5, #0]
	for (i = 0; (i < count) && (device_count < DEVICE_POLICY_MAX); i++) {
     694:	2400      	movs	r4, #0
     696:	9b01      	ldr	r3, [sp, #4]
     698:	429c      	cmp	r4, r3
     69a:	da02      	bge.n	6a2 <main+0x5e>
     69c:	682b      	ldr	r3, [r5, #0]
     69e:	2b0e      	cmp	r3, #14
     6a0:	dd08      	ble.n	6b4 <main+0x70>
		printk("\nApplication Thread\n");
     6a2:	4c26      	ldr	r4, [pc, #152]	; (73c <main+0xf8>)
     6a4:	4620      	mov	r0, r4
     6a6:	f000 ff43 	bl	1530 <printk>

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_OBJECT_ACCESS_REVOKE, k_object_access_revoke, void *, object, struct k_thread *, thread);

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
     6aa:	f64e 2060 	movw	r0, #60000	; 0xea60
     6ae:	f00a fe2b 	bl	b308 <_impl_k_sleep>
     6b2:	e7f7      	b.n	6a4 <main+0x60>
     6b4:	260c      	movs	r6, #12
     6b6:	4366      	muls	r6, r4
		if (!strcmp(device_list[i].config->name, "clk_k32src")) {
     6b8:	683b      	ldr	r3, [r7, #0]
     6ba:	599b      	ldr	r3, [r3, r6]
     6bc:	4649      	mov	r1, r9
     6be:	6818      	ldr	r0, [r3, #0]
     6c0:	f7ff ff4e 	bl	560 <strcmp>
     6c4:	b918      	cbnz	r0, 6ce <main+0x8a>
			device_ordered_list[0] = i;
     6c6:	f888 4000 	strb.w	r4, [r8]
	for (i = 0; (i < count) && (device_count < DEVICE_POLICY_MAX); i++) {
     6ca:	3401      	adds	r4, #1
     6cc:	e7e3      	b.n	696 <main+0x52>
		} else if (!strcmp(device_list[i].config->name, "clk_m16src")) {
     6ce:	683b      	ldr	r3, [r7, #0]
     6d0:	491b      	ldr	r1, [pc, #108]	; (740 <main+0xfc>)
     6d2:	599b      	ldr	r3, [r3, r6]
     6d4:	6818      	ldr	r0, [r3, #0]
     6d6:	f7ff ff43 	bl	560 <strcmp>
     6da:	b910      	cbnz	r0, 6e2 <main+0x9e>
			device_ordered_list[1] = i;
     6dc:	f888 4001 	strb.w	r4, [r8, #1]
     6e0:	e7f3      	b.n	6ca <main+0x86>
		} else if (!strcmp(device_list[i].config->name, "sys_clock")) {
     6e2:	683b      	ldr	r3, [r7, #0]
     6e4:	4917      	ldr	r1, [pc, #92]	; (744 <main+0x100>)
     6e6:	599b      	ldr	r3, [r3, r6]
     6e8:	6818      	ldr	r0, [r3, #0]
     6ea:	f7ff ff39 	bl	560 <strcmp>
     6ee:	b910      	cbnz	r0, 6f6 <main+0xb2>
			device_ordered_list[2] = i;
     6f0:	f888 4002 	strb.w	r4, [r8, #2]
     6f4:	e7e9      	b.n	6ca <main+0x86>
		} else if (!strcmp(device_list[i].config->name, "UART_0")) {
     6f6:	683b      	ldr	r3, [r7, #0]
     6f8:	4913      	ldr	r1, [pc, #76]	; (748 <main+0x104>)
     6fa:	599b      	ldr	r3, [r3, r6]
     6fc:	6818      	ldr	r0, [r3, #0]
     6fe:	f7ff ff2f 	bl	560 <strcmp>
     702:	b910      	cbnz	r0, 70a <main+0xc6>
			device_ordered_list[3] = i;
     704:	f888 4003 	strb.w	r4, [r8, #3]
     708:	e7df      	b.n	6ca <main+0x86>
		} else {
			device_ordered_list[device_count++] = i;
     70a:	682b      	ldr	r3, [r5, #0]
     70c:	1c5a      	adds	r2, r3, #1
     70e:	602a      	str	r2, [r5, #0]
     710:	f808 4003 	strb.w	r4, [r8, r3]
     714:	e7d9      	b.n	6ca <main+0x86>
     716:	bf00      	nop
     718:	0000c018 	.word	0x0000c018
     71c:	0000c01c 	.word	0x0000c01c
     720:	20000000 	.word	0x20000000
     724:	20000004 	.word	0x20000004
     728:	0000c042 	.word	0x0000c042
     72c:	0000c109 	.word	0x0000c109
     730:	20000028 	.word	0x20000028
     734:	00030100 	.word	0x00030100
     738:	e000e100 	.word	0xe000e100
     73c:	0000c137 	.word	0x0000c137
     740:	0000c11b 	.word	0x0000c11b
     744:	0000c126 	.word	0x0000c126
     748:	0000c130 	.word	0x0000c130
     74c:	0000c110 	.word	0x0000c110
     750:	20000008 	.word	0x20000008

00000754 <_sys_soc_suspend>:
{
     754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	post_ops_done = 0;
     758:	4e55      	ldr	r6, [pc, #340]	; (8b0 <CONFIG_ISR_STACK_SIZE+0xb0>)
{
     75a:	b087      	sub	sp, #28
	u32_t level = 0;
     75c:	2400      	movs	r4, #0
	if ((ticks != K_FOREVER) && (ticks < MIN_TIME_TO_SUSPEND)) {
     75e:	1c43      	adds	r3, r0, #1
{
     760:	4601      	mov	r1, r0
	u32_t level = 0;
     762:	9400      	str	r4, [sp, #0]
	post_ops_done = 0;
     764:	6034      	str	r4, [r6, #0]
	if ((ticks != K_FOREVER) && (ticks < MIN_TIME_TO_SUSPEND)) {
     766:	d00a      	beq.n	77e <_sys_soc_suspend+0x2a>
     768:	f241 733d 	movw	r3, #5949	; 0x173d
     76c:	4298      	cmp	r0, r3
     76e:	dc06      	bgt.n	77e <_sys_soc_suspend+0x2a>
		printk("Not enough time for PM operations " TIME_UNIT_STRING
     770:	4850      	ldr	r0, [pc, #320]	; (8b4 <CONFIG_ISR_STACK_SIZE+0xb4>)
     772:	f000 fedd 	bl	1530 <printk>
}
     776:	4620      	mov	r0, r4
     778:	b007      	add	sp, #28
     77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int power_states[] = {SYS_POWER_STATE_MAX, SYS_POWER_STATE_CPU_LPS,
     77e:	4b4e      	ldr	r3, [pc, #312]	; (8b8 <CONFIG_ISR_STACK_SIZE+0xb8>)
	pm_state = check_pm_policy(ticks);
     780:	4d4e      	ldr	r5, [pc, #312]	; (8bc <CONFIG_ISR_STACK_SIZE+0xbc>)
	int power_states[] = {SYS_POWER_STATE_MAX, SYS_POWER_STATE_CPU_LPS,
     782:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     784:	af02      	add	r7, sp, #8
     786:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	policy = ++policy > MAX_POWER_SAVING_STATE ?
     78a:	4a4d      	ldr	r2, [pc, #308]	; (8c0 <CONFIG_ISR_STACK_SIZE+0xc0>)
     78c:	6813      	ldr	r3, [r2, #0]
     78e:	3301      	adds	r3, #1
					NO_POWER_SAVING_STATE : policy;
     790:	2b04      	cmp	r3, #4
     792:	bfa8      	it	ge
     794:	2300      	movge	r3, #0
	policy = ++policy > MAX_POWER_SAVING_STATE ?
     796:	6013      	str	r3, [r2, #0]
	return power_states[policy];
     798:	aa06      	add	r2, sp, #24
     79a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     79e:	f853 3c10 	ldr.w	r3, [r3, #-16]
	pm_state = check_pm_policy(ticks);
     7a2:	602b      	str	r3, [r5, #0]
	switch (pm_state) {
     7a4:	2b00      	cmp	r3, #0
     7a6:	db03      	blt.n	7b0 <_sys_soc_suspend+0x5c>
     7a8:	2b01      	cmp	r3, #1
     7aa:	dd15      	ble.n	7d8 <_sys_soc_suspend+0x84>
     7ac:	2b03      	cmp	r3, #3
     7ae:	d030      	beq.n	812 <CONFIG_ISR_STACK_SIZE+0x12>
		printk("\nNo PM operations done\n");
     7b0:	4844      	ldr	r0, [pc, #272]	; (8c4 <CONFIG_ISR_STACK_SIZE+0xc4>)
     7b2:	f000 febd 	bl	1530 <printk>
		ret = SYS_PM_NOT_HANDLED;
     7b6:	2400      	movs	r4, #0
		gpio_pin_read(gpiob, PIN, &level);
     7b8:	4e43      	ldr	r6, [pc, #268]	; (8c8 <CONFIG_ISR_STACK_SIZE+0xc8>)
     7ba:	6830      	ldr	r0, [r6, #0]
static inline int _impl_gpio_read(struct device *port, int access_op,
				  u32_t pin, u32_t *value)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->read(port, access_op, pin, value);
     7bc:	6843      	ldr	r3, [r0, #4]
     7be:	220d      	movs	r2, #13
     7c0:	689d      	ldr	r5, [r3, #8]
     7c2:	2100      	movs	r1, #0
     7c4:	466b      	mov	r3, sp
     7c6:	47a8      	blx	r5
		k_busy_wait(1000);
     7c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     7cc:	f00b f80c 	bl	b7e8 <k_busy_wait>
	} while (level == LOW);
     7d0:	9b00      	ldr	r3, [sp, #0]
     7d2:	2b00      	cmp	r3, #0
     7d4:	d0f1      	beq.n	7ba <_sys_soc_suspend+0x66>
     7d6:	e7ce      	b.n	776 <_sys_soc_suspend+0x22>
	printk("---->Low power state entry ");
     7d8:	483c      	ldr	r0, [pc, #240]	; (8cc <CONFIG_ISR_STACK_SIZE+0xcc>)
     7da:	f000 fea9 	bl	1530 <printk>
	if (pm_state == SYS_POWER_STATE_CPU_LPS) {
     7de:	682b      	ldr	r3, [r5, #0]
     7e0:	b9ab      	cbnz	r3, 80e <CONFIG_ISR_STACK_SIZE+0xe>
		printk("- CONSTANT LATENCY MODE-");
     7e2:	483b      	ldr	r0, [pc, #236]	; (8d0 <CONFIG_ISR_STACK_SIZE+0xd0>)
		printk("- LOW POWER MODE -");
     7e4:	f000 fea4 	bl	1530 <printk>
	_sys_soc_set_power_state(pm_state);
     7e8:	7828      	ldrb	r0, [r5, #0]
     7ea:	f000 f89d 	bl	928 <_sys_soc_set_power_state>
		ret = low_power_state_entry();
     7ee:	2401      	movs	r4, #1
		if (!post_ops_done) {
     7f0:	6833      	ldr	r3, [r6, #0]
     7f2:	2b00      	cmp	r3, #0
     7f4:	d1e0      	bne.n	7b8 <_sys_soc_suspend+0x64>
			if ((pm_state == SYS_POWER_STATE_CPU_LPS_1) ||
     7f6:	682b      	ldr	r3, [r5, #0]
     7f8:	2b01      	cmp	r3, #1
     7fa:	d802      	bhi.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
	printk("---- Low power state exit !\n");
     7fc:	4835      	ldr	r0, [pc, #212]	; (8d4 <CONFIG_ISR_STACK_SIZE+0xd4>)
     7fe:	f000 fe97 	bl	1530 <printk>
			post_ops_done = 1;
     802:	2301      	movs	r3, #1
			_sys_soc_power_state_post_ops(pm_state);
     804:	7828      	ldrb	r0, [r5, #0]
			post_ops_done = 1;
     806:	6033      	str	r3, [r6, #0]
			_sys_soc_power_state_post_ops(pm_state);
     808:	f000 f8ac 	bl	964 <_sys_soc_power_state_post_ops>
     80c:	e7d4      	b.n	7b8 <_sys_soc_suspend+0x64>
		printk("- LOW POWER MODE -");
     80e:	4832      	ldr	r0, [pc, #200]	; (8d8 <CONFIG_ISR_STACK_SIZE+0xd8>)
     810:	e7e8      	b.n	7e4 <_sys_soc_suspend+0x90>
	printk("===> Entry Into Deep Sleep ==");
     812:	4832      	ldr	r0, [pc, #200]	; (8dc <CONFIG_ISR_STACK_SIZE+0xdc>)
		device_retval[i] = device_set_power_state(&device_list[idx],
     814:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8ec <CONFIG_ISR_STACK_SIZE+0xec>
		int idx = device_ordered_list[i];
     818:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8f0 <CONFIG_ISR_STACK_SIZE+0xf0>
		device_retval[i] = device_set_power_state(&device_list[idx],
     81c:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
	printk("===> Entry Into Deep Sleep ==");
     820:	f000 fe86 	bl	1530 <printk>
 * _sys_soc_suspend to disable the corresponding _sys_soc_resume notification.
 *
 */
static inline void _sys_soc_pm_idle_exit_notification_disable(void)
{
	_sys_pm_idle_exit_notify = 0;
     824:	4b2e      	ldr	r3, [pc, #184]	; (8e0 <CONFIG_ISR_STACK_SIZE+0xe0>)
     826:	2200      	movs	r2, #0
     828:	701a      	strb	r2, [r3, #0]
	for (int i = device_count - 1; i >= 0; i--) {
     82a:	4b2e      	ldr	r3, [pc, #184]	; (8e4 <CONFIG_ISR_STACK_SIZE+0xe4>)
     82c:	681c      	ldr	r4, [r3, #0]
     82e:	4698      	mov	r8, r3
     830:	3c01      	subs	r4, #1
     832:	2c00      	cmp	r4, #0
     834:	da12      	bge.n	85c <CONFIG_ISR_STACK_SIZE+0x5c>
	_sys_soc_set_power_state(SYS_POWER_STATE_DEEP_SLEEP);
     836:	2003      	movs	r0, #3
     838:	f000 f876 	bl	928 <_sys_soc_set_power_state>
		if (!device_retval[i]) {
     83c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
			device_set_power_state(&device_list[idx],
     840:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8ec <CONFIG_ISR_STACK_SIZE+0xec>
			int idx = device_ordered_list[i];
     844:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 8f0 <CONFIG_ISR_STACK_SIZE+0xf0>
	for (i = 0; i < device_count; i++) {
     848:	2400      	movs	r4, #0
     84a:	f8d8 3000 	ldr.w	r3, [r8]
     84e:	429c      	cmp	r4, r3
     850:	db19      	blt.n	886 <CONFIG_ISR_STACK_SIZE+0x86>
	printk("====Deep sleep exit!\n");
     852:	4825      	ldr	r0, [pc, #148]	; (8e8 <CONFIG_ISR_STACK_SIZE+0xe8>)
     854:	f000 fe6c 	bl	1530 <printk>
		ret = deep_sleep_entry();
     858:	2402      	movs	r4, #2
		break;
     85a:	e7c9      	b.n	7f0 <_sys_soc_suspend+0x9c>
		device_retval[i] = device_set_power_state(&device_list[idx],
     85c:	f81a 0004 	ldrb.w	r0, [sl, r4]
     860:	f8d9 e000 	ldr.w	lr, [r9]
     864:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     868:	aa06      	add	r2, sp, #24
     86a:	2303      	movs	r3, #3
     86c:	f842 3d14 	str.w	r3, [r2, #-20]!
 * @retval Errno Negative errno code if failure.
 */
static inline int device_set_power_state(struct device *device,
					 u32_t device_power_state)
{
	return device->config->device_pm_control(device,
     870:	f85e 3020 	ldr.w	r3, [lr, r0, lsl #2]
     874:	2101      	movs	r1, #1
     876:	689b      	ldr	r3, [r3, #8]
     878:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
     87c:	4798      	blx	r3
     87e:	f80b 0004 	strb.w	r0, [fp, r4]
	for (int i = device_count - 1; i >= 0; i--) {
     882:	3c01      	subs	r4, #1
     884:	e7d5      	b.n	832 <CONFIG_ISR_STACK_SIZE+0x32>
		if (!device_retval[i]) {
     886:	f814 3009 	ldrb.w	r3, [r4, r9]
     88a:	b973      	cbnz	r3, 8aa <CONFIG_ISR_STACK_SIZE+0xaa>
			device_set_power_state(&device_list[idx],
     88c:	f81b 0004 	ldrb.w	r0, [fp, r4]
     890:	f8da e000 	ldr.w	lr, [sl]
     894:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     898:	2101      	movs	r1, #1
     89a:	f85e 3020 	ldr.w	r3, [lr, r0, lsl #2]
     89e:	9102      	str	r1, [sp, #8]
     8a0:	689b      	ldr	r3, [r3, #8]
     8a2:	463a      	mov	r2, r7
     8a4:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
     8a8:	4798      	blx	r3
	for (i = 0; i < device_count; i++) {
     8aa:	3401      	adds	r4, #1
     8ac:	e7cd      	b.n	84a <CONFIG_ISR_STACK_SIZE+0x4a>
     8ae:	bf00      	nop
     8b0:	20004dc0 	.word	0x20004dc0
     8b4:	0000bf37 	.word	0x0000bf37
     8b8:	0000bf00 	.word	0x0000bf00
     8bc:	2000002c 	.word	0x2000002c
     8c0:	20000030 	.word	0x20000030
     8c4:	0000bfe3 	.word	0x0000bfe3
     8c8:	20000028 	.word	0x20000028
     8cc:	0000bf67 	.word	0x0000bf67
     8d0:	0000bf83 	.word	0x0000bf83
     8d4:	0000bffb 	.word	0x0000bffb
     8d8:	0000bf9c 	.word	0x0000bf9c
     8dc:	0000bfaf 	.word	0x0000bfaf
     8e0:	2000343c 	.word	0x2000343c
     8e4:	20000000 	.word	0x20000000
     8e8:	0000bfcd 	.word	0x0000bfcd
     8ec:	20000004 	.word	0x20000004
     8f0:	20000008 	.word	0x20000008
     8f4:	20000017 	.word	0x20000017

000008f8 <_sys_soc_resume>:
{
     8f8:	b538      	push	{r3, r4, r5, lr}
	if (!post_ops_done) {
     8fa:	4d08      	ldr	r5, [pc, #32]	; (91c <_sys_soc_resume+0x24>)
     8fc:	682a      	ldr	r2, [r5, #0]
     8fe:	b962      	cbnz	r2, 91a <_sys_soc_resume+0x22>
		if (pm_state == SYS_POWER_STATE_CPU_LPS) {
     900:	4c07      	ldr	r4, [pc, #28]	; (920 <_sys_soc_resume+0x28>)
     902:	6822      	ldr	r2, [r4, #0]
     904:	b912      	cbnz	r2, 90c <_sys_soc_resume+0x14>
	printk("---- Low power state exit !\n");
     906:	4807      	ldr	r0, [pc, #28]	; (924 <_sys_soc_resume+0x2c>)
     908:	f000 fe12 	bl	1530 <printk>
		post_ops_done = 1;
     90c:	2301      	movs	r3, #1
     90e:	602b      	str	r3, [r5, #0]
		_sys_soc_power_state_post_ops(pm_state);
     910:	7820      	ldrb	r0, [r4, #0]
}
     912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		_sys_soc_power_state_post_ops(pm_state);
     916:	f000 b825 	b.w	964 <_sys_soc_power_state_post_ops>
     91a:	bd38      	pop	{r3, r4, r5, pc}
     91c:	20004dc0 	.word	0x20004dc0
     920:	2000002c 	.word	0x2000002c
     924:	0000bffb 	.word	0x0000bffb

00000928 <_sys_soc_set_power_state>:
}

/* Invoke Low Power/System Off specific Tasks */
void _sys_soc_set_power_state(enum power_states state)
{
	switch (state) {
     928:	2801      	cmp	r0, #1
     92a:	d00b      	beq.n	944 <_sys_soc_set_power_state+0x1c>
     92c:	d302      	bcc.n	934 <_sys_soc_set_power_state+0xc>
     92e:	2803      	cmp	r0, #3
     930:	d00b      	beq.n	94a <_sys_soc_set_power_state+0x22>
     932:	4770      	bx	lr
 *  Interface functions definitions
 */

void nrf_power_task_trigger(nrf_power_task_t task)
{
    *(nrf_power_regptr_get((uint32_t)task)) = 1UL;
     934:	4b09      	ldr	r3, [pc, #36]	; (95c <_sys_soc_set_power_state+0x34>)
     936:	2201      	movs	r2, #1
     938:	601a      	str	r2, [r3, #0]
	__WFE();
     93a:	bf20      	wfe
	__SEV();
     93c:	bf40      	sev
	__WFE();
     93e:	bf20      	wfe
	nrf_gpiote_clear_port_event();
     940:	f001 b920 	b.w	1b84 <nrf_gpiote_clear_port_event>
     944:	4b06      	ldr	r3, [pc, #24]	; (960 <_sys_soc_set_power_state+0x38>)
     946:	6018      	str	r0, [r3, #0]
     948:	e7f7      	b.n	93a <_sys_soc_set_power_state+0x12>
}
#endif // NRF_POWER_HAS_RAMSTATUS

__STATIC_INLINE void nrf_power_system_off(void)
{
    NRF_POWER->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
     94a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     94e:	2201      	movs	r2, #1
     950:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     954:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
     958:	bf20      	wfe
     95a:	e7fd      	b.n	958 <_sys_soc_set_power_state+0x30>
     95c:	40000078 	.word	0x40000078
     960:	4000007c 	.word	0x4000007c

00000964 <_sys_soc_power_state_post_ops>:
	}
}

/* Handle SOC specific activity after Low Power Mode Exit */
void _sys_soc_power_state_post_ops(enum power_states state)
{
     964:	4770      	bx	lr
	...

00000968 <ftpan_32>:
	return false;
}

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     968:	4b0c      	ldr	r3, [pc, #48]	; (99c <ftpan_32+0x34>)
     96a:	781b      	ldrb	r3, [r3, #0]
     96c:	2b06      	cmp	r3, #6
     96e:	d112      	bne.n	996 <ftpan_32+0x2e>
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     970:	4b0b      	ldr	r3, [pc, #44]	; (9a0 <ftpan_32+0x38>)
     972:	6818      	ldr	r0, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     974:	f010 000f 	ands.w	r0, r0, #15
     978:	d10d      	bne.n	996 <ftpan_32+0x2e>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     97a:	3304      	adds	r3, #4
     97c:	681b      	ldr	r3, [r3, #0]
     97e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     982:	2b30      	cmp	r3, #48	; 0x30
     984:	d108      	bne.n	998 <ftpan_32+0x30>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
     986:	4b07      	ldr	r3, [pc, #28]	; (9a4 <ftpan_32+0x3c>)
     988:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     98a:	f013 0ff0 	tst.w	r3, #240	; 0xf0
     98e:	bf0c      	ite	eq
     990:	2001      	moveq	r0, #1
     992:	2000      	movne	r0, #0
     994:	4770      	bx	lr
			return true;
		}
	}

	return false;
     996:	2000      	movs	r0, #0
}
     998:	4770      	bx	lr
     99a:	bf00      	nop
     99c:	f0000fe0 	.word	0xf0000fe0
     9a0:	f0000fe4 	.word	0xf0000fe4
     9a4:	f0000fec 	.word	0xf0000fec

000009a8 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     9a8:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     9aa:	f04f 0320 	mov.w	r3, #32
     9ae:	f3ef 8111 	mrs	r1, BASEPRI
     9b2:	f383 8811 	msr	BASEPRI, r3
	if (ftpan_32()) {
     9b6:	f7ff ffd7 	bl	968 <ftpan_32>
     9ba:	b120      	cbz	r0, 9c6 <nordicsemi_nrf52_init+0x1e>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     9bc:	4a3b      	ldr	r2, [pc, #236]	; (aac <nordicsemi_nrf52_init+0x104>)
     9be:	68d3      	ldr	r3, [r2, #12]
     9c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     9c4:	60d3      	str	r3, [r2, #12]
	if (ftpan_37()) {
     9c6:	f7ff ffcf 	bl	968 <ftpan_32>
     9ca:	b110      	cbz	r0, 9d2 <nordicsemi_nrf52_init+0x2a>
		*(volatile u32_t *)0x400005A0 = 0x3;
     9cc:	4b38      	ldr	r3, [pc, #224]	; (ab0 <nordicsemi_nrf52_init+0x108>)
     9ce:	2203      	movs	r2, #3
     9d0:	601a      	str	r2, [r3, #0]
	if (ftpan_36()) {
     9d2:	f7ff ffc9 	bl	968 <ftpan_32>
     9d6:	b130      	cbz	r0, 9e6 <nordicsemi_nrf52_init+0x3e>
		NRF_CLOCK->EVENTS_DONE = 0;
     9d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     9dc:	2200      	movs	r2, #0
     9de:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     9e2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     9e6:	4b33      	ldr	r3, [pc, #204]	; (ab4 <nordicsemi_nrf52_init+0x10c>)
     9e8:	781b      	ldrb	r3, [r3, #0]
     9ea:	2b06      	cmp	r3, #6
     9ec:	d117      	bne.n	a1e <nordicsemi_nrf52_init+0x76>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     9ee:	4b32      	ldr	r3, [pc, #200]	; (ab8 <nordicsemi_nrf52_init+0x110>)
     9f0:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     9f2:	0718      	lsls	r0, r3, #28
     9f4:	d113      	bne.n	a1e <nordicsemi_nrf52_init+0x76>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
     9f6:	4b31      	ldr	r3, [pc, #196]	; (abc <nordicsemi_nrf52_init+0x114>)
     9f8:	681b      	ldr	r3, [r3, #0]
     9fa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
     9fe:	2a30      	cmp	r2, #48	; 0x30
     a00:	d003      	beq.n	a0a <nordicsemi_nrf52_init+0x62>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
     a02:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
     a06:	2b40      	cmp	r3, #64	; 0x40
     a08:	d109      	bne.n	a1e <nordicsemi_nrf52_init+0x76>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     a0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     a0e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     a12:	07d2      	lsls	r2, r2, #31
     a14:	d503      	bpl.n	a1e <nordicsemi_nrf52_init+0x76>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     a16:	f06f 0201 	mvn.w	r2, #1
     a1a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     a1e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     a22:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     a26:	2a00      	cmp	r2, #0
     a28:	db03      	blt.n	a32 <nordicsemi_nrf52_init+0x8a>
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     a2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     a2e:	2b00      	cmp	r3, #0
     a30:	da2f      	bge.n	a92 <nordicsemi_nrf52_init+0xea>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     a32:	4b23      	ldr	r3, [pc, #140]	; (ac0 <nordicsemi_nrf52_init+0x118>)
     a34:	2201      	movs	r2, #1
     a36:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     a3a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     a3e:	2a00      	cmp	r2, #0
     a40:	d0fb      	beq.n	a3a <nordicsemi_nrf52_init+0x92>
		NRF_UICR->PSELRESET[0] = 21;
     a42:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     a46:	2115      	movs	r1, #21
     a48:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     a4c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     a50:	2a00      	cmp	r2, #0
     a52:	d0fb      	beq.n	a4c <nordicsemi_nrf52_init+0xa4>
		NRF_UICR->PSELRESET[1] = 21;
     a54:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     a58:	2215      	movs	r2, #21
     a5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     a5e:	4b18      	ldr	r3, [pc, #96]	; (ac0 <nordicsemi_nrf52_init+0x118>)
     a60:	461a      	mov	r2, r3
     a62:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     a66:	2900      	cmp	r1, #0
     a68:	d0fb      	beq.n	a62 <nordicsemi_nrf52_init+0xba>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     a6a:	2100      	movs	r1, #0
     a6c:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     a70:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     a74:	2b00      	cmp	r3, #0
     a76:	d0fb      	beq.n	a70 <nordicsemi_nrf52_init+0xc8>
     a78:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     a7c:	4911      	ldr	r1, [pc, #68]	; (ac4 <nordicsemi_nrf52_init+0x11c>)
     a7e:	4b12      	ldr	r3, [pc, #72]	; (ac8 <nordicsemi_nrf52_init+0x120>)
     a80:	68ca      	ldr	r2, [r1, #12]
     a82:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     a86:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     a88:	60cb      	str	r3, [r1, #12]
     a8a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     a8e:	bf00      	nop
     a90:	e7fd      	b.n	a8e <nordicsemi_nrf52_init+0xe6>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     a92:	4b0c      	ldr	r3, [pc, #48]	; (ac4 <nordicsemi_nrf52_init+0x11c>)
     a94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     a98:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     a9a:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     a9c:	4b0b      	ldr	r3, [pc, #44]	; (acc <nordicsemi_nrf52_init+0x124>)
     a9e:	4a0c      	ldr	r2, [pc, #48]	; (ad0 <nordicsemi_nrf52_init+0x128>)
     aa0:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     aa2:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     aa6:	2000      	movs	r0, #0
     aa8:	bd08      	pop	{r3, pc}
     aaa:	bf00      	nop
     aac:	e000edf0 	.word	0xe000edf0
     ab0:	400005a0 	.word	0x400005a0
     ab4:	f0000fe0 	.word	0xf0000fe0
     ab8:	f0000fe4 	.word	0xf0000fe4
     abc:	f0000fe8 	.word	0xf0000fe8
     ac0:	4001e000 	.word	0x4001e000
     ac4:	e000ed00 	.word	0xe000ed00
     ac8:	05fa0004 	.word	0x05fa0004
     acc:	20004e08 	.word	0x20004e08
     ad0:	03d09000 	.word	0x03d09000

00000ad4 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     ad4:	4808      	ldr	r0, [pc, #32]	; (af8 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
     ad6:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
     ad8:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
     ada:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
     adc:	d80b      	bhi.n	af6 <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
     ade:	69c0      	ldr	r0, [r0, #28]
    cmp r0, r1
     ae0:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     ae2:	d008      	beq.n	af6 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
     ae4:	b500      	push	{lr}
    bl _update_time_slice_before_swap
     ae6:	f00a fc61 	bl	b3ac <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
     aea:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     aee:	4903      	ldr	r1, [pc, #12]	; (afc <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
     af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
     af4:	600a      	str	r2, [r1, #0]

00000af6 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
     af6:	4770      	bx	lr
    ldr r0, =_kernel
     af8:	20001d34 	.word	0x20001d34
    ldr r1, =_SCS_ICSR
     afc:	e000ed04 	.word	0xe000ed04

00000b00 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     b00:	4804      	ldr	r0, [pc, #16]	; (b14 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
     b02:	2300      	movs	r3, #0
     b04:	2120      	movs	r1, #32
     b06:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
     b08:	3301      	adds	r3, #1
     b0a:	2b27      	cmp	r3, #39	; 0x27
     b0c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
     b10:	d1f9      	bne.n	b06 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
     b12:	4770      	bx	lr
     b14:	e000e100 	.word	0xe000e100

00000b18 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     b18:	4a08      	ldr	r2, [pc, #32]	; (b3c <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
     b1a:	4909      	ldr	r1, [pc, #36]	; (b40 <__swap+0x28>)
	_current->arch.basepri = key;
     b1c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     b1e:	6809      	ldr	r1, [r1, #0]
     b20:	6659      	str	r1, [r3, #100]	; 0x64

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     b22:	4908      	ldr	r1, [pc, #32]	; (b44 <__swap+0x2c>)
	_current->arch.basepri = key;
     b24:	6618      	str	r0, [r3, #96]	; 0x60
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     b26:	684b      	ldr	r3, [r1, #4]
     b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     b2c:	604b      	str	r3, [r1, #4]
     b2e:	2300      	movs	r3, #0
     b30:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
     b34:	6893      	ldr	r3, [r2, #8]
}
     b36:	6e58      	ldr	r0, [r3, #100]	; 0x64
     b38:	4770      	bx	lr
     b3a:	bf00      	nop
     b3c:	20001d34 	.word	0x20001d34
     b40:	0000c72c 	.word	0x0000c72c
     b44:	e000ed00 	.word	0xe000ed00

00000b48 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     b48:	490e      	ldr	r1, [pc, #56]	; (b84 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
     b4a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     b4c:	2028      	movs	r0, #40	; 0x28
    add r0, r2
     b4e:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
     b50:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     b54:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
     b58:	4f0b      	ldr	r7, [pc, #44]	; (b88 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     b5a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     b5e:	2020      	movs	r0, #32
    msr BASEPRI, r0
     b60:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
     b64:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
     b66:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
     b68:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
     b6a:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
     b6c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     b6e:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     b70:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     b74:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
     b78:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
     b7c:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
     b80:	4770      	bx	lr
     b82:	0000      	.short	0x0000
    ldr r1, =_kernel
     b84:	20001d34 	.word	0x20001d34
    ldr v4, =_SCS_ICSR
     b88:	e000ed04 	.word	0xe000ed04

00000b8c <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
     b8c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     b90:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     b92:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     b96:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     b9a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
     b9c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
     ba0:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

    cmp r1, #0
#endif
    beq _context_switch
     ba4:	d001      	beq.n	baa <_context_switch>

    cmp r1, #2
     ba6:	2902      	cmp	r1, #2
    beq _oops
     ba8:	d007      	beq.n	bba <_oops>

00000baa <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
     baa:	4040      	eors	r0, r0
    msr BASEPRI, r0
     bac:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
     bb0:	4904      	ldr	r1, [pc, #16]	; (bc4 <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
     bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
     bb6:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
     bb8:	4770      	bx	lr

00000bba <_oops>:

_oops:
    push {lr}
     bba:	b500      	push	{lr}
    blx _do_kernel_oops
     bbc:	f000 fa2c 	bl	1018 <_do_kernel_oops>
    pop {pc}
     bc0:	bd00      	pop	{pc}
     bc2:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
     bc4:	e000ed04 	.word	0xe000ed04

00000bc8 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
     bc8:	b510      	push	{r4, lr}
     bca:	4604      	mov	r4, r0

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     bcc:	f00a fbc4 	bl	b358 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
     bd0:	6822      	ldr	r2, [r4, #0]
     bd2:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
     bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
     bd8:	4801      	ldr	r0, [pc, #4]	; (be0 <_FaultThreadShow.isra.2+0x18>)
     bda:	f000 bca9 	b.w	1530 <printk>
     bde:	bf00      	nop
     be0:	0000c2b1 	.word	0x0000c2b1

00000be4 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _UsageFault(const NANO_ESF *esf)
{
     be4:	b510      	push	{r4, lr}
     be6:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
     be8:	481a      	ldr	r0, [pc, #104]	; (c54 <_UsageFault+0x70>)
     bea:	f000 fca1 	bl	1530 <printk>

	_FaultThreadShow(esf);
     bee:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     bf2:	4c19      	ldr	r4, [pc, #100]	; (c58 <_UsageFault+0x74>)
	_FaultThreadShow(esf);
     bf4:	f7ff ffe8 	bl	bc8 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     bf8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     bfa:	019a      	lsls	r2, r3, #6
     bfc:	d502      	bpl.n	c04 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
     bfe:	4817      	ldr	r0, [pc, #92]	; (c5c <_UsageFault+0x78>)
     c00:	f000 fc96 	bl	1530 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
     c04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c06:	01db      	lsls	r3, r3, #7
     c08:	d502      	bpl.n	c10 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
     c0a:	4815      	ldr	r0, [pc, #84]	; (c60 <_UsageFault+0x7c>)
     c0c:	f000 fc90 	bl	1530 <printk>
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if (SCB->CFSR & SCB_CFSR_STKOF_Msk) {
		PR_EXC("  Stack overflow\n");
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
     c10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c12:	0318      	lsls	r0, r3, #12
     c14:	d502      	bpl.n	c1c <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
     c16:	4813      	ldr	r0, [pc, #76]	; (c64 <_UsageFault+0x80>)
     c18:	f000 fc8a 	bl	1530 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
     c1c:	4c0e      	ldr	r4, [pc, #56]	; (c58 <_UsageFault+0x74>)
     c1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c20:	0359      	lsls	r1, r3, #13
     c22:	d502      	bpl.n	c2a <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
     c24:	4810      	ldr	r0, [pc, #64]	; (c68 <_UsageFault+0x84>)
     c26:	f000 fc83 	bl	1530 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
     c2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c2c:	039a      	lsls	r2, r3, #14
     c2e:	d502      	bpl.n	c36 <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
     c30:	480e      	ldr	r0, [pc, #56]	; (c6c <_UsageFault+0x88>)
     c32:	f000 fc7d 	bl	1530 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
     c36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c38:	03db      	lsls	r3, r3, #15
     c3a:	d502      	bpl.n	c42 <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
     c3c:	480c      	ldr	r0, [pc, #48]	; (c70 <_UsageFault+0x8c>)
     c3e:	f000 fc77 	bl	1530 <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
     c42:	4a05      	ldr	r2, [pc, #20]	; (c58 <_UsageFault+0x74>)
     c44:	6a93      	ldr	r3, [r2, #40]	; 0x28
     c46:	ea6f 4303 	mvn.w	r3, r3, lsl #16
     c4a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
     c4e:	6293      	str	r3, [r2, #40]	; 0x28
     c50:	bd10      	pop	{r4, pc}
     c52:	bf00      	nop
     c54:	0000c3b2 	.word	0x0000c3b2
     c58:	e000ed00 	.word	0xe000ed00
     c5c:	0000c3cb 	.word	0x0000c3cb
     c60:	0000c3df 	.word	0x0000c3df
     c64:	0000c3fa 	.word	0x0000c3fa
     c68:	0000c419 	.word	0x0000c419
     c6c:	0000c43f 	.word	0x0000c43f
     c70:	0000c45a 	.word	0x0000c45a

00000c74 <_MpuFault>:
{
     c74:	b538      	push	{r3, r4, r5, lr}
     c76:	4604      	mov	r4, r0
	PR_EXC("***** MPU FAULT *****\n");
     c78:	4819      	ldr	r0, [pc, #100]	; (ce0 <_MpuFault+0x6c>)
{
     c7a:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
     c7c:	f000 fc58 	bl	1530 <printk>
	_FaultThreadShow(esf);
     c80:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     c84:	4c17      	ldr	r4, [pc, #92]	; (ce4 <_MpuFault+0x70>)
	_FaultThreadShow(esf);
     c86:	f7ff ff9f 	bl	bc8 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     c8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c8c:	06d9      	lsls	r1, r3, #27
     c8e:	d504      	bpl.n	c9a <_MpuFault+0x26>
		PR_EXC("  Stacking error\n");
     c90:	4815      	ldr	r0, [pc, #84]	; (ce8 <_MpuFault+0x74>)
}
     c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
     c96:	f000 bc4b 	b.w	1530 <printk>
	} else if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
     c9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c9c:	071a      	lsls	r2, r3, #28
     c9e:	d501      	bpl.n	ca4 <_MpuFault+0x30>
		PR_EXC("  Unstacking error\n");
     ca0:	4812      	ldr	r0, [pc, #72]	; (cec <_MpuFault+0x78>)
     ca2:	e7f6      	b.n	c92 <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
     ca4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ca6:	079b      	lsls	r3, r3, #30
     ca8:	d50f      	bpl.n	cca <_MpuFault+0x56>
		PR_EXC("  Data Access Violation\n");
     caa:	4811      	ldr	r0, [pc, #68]	; (cf0 <_MpuFault+0x7c>)
     cac:	f000 fc40 	bl	1530 <printk>
		STORE_xFAR(mmfar, SCB->MMFAR);
     cb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
     cb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     cb4:	0618      	lsls	r0, r3, #24
     cb6:	d512      	bpl.n	cde <_MpuFault+0x6a>
			PR_EXC("  Address: 0x%x\n", mmfar);
     cb8:	480e      	ldr	r0, [pc, #56]	; (cf4 <_MpuFault+0x80>)
     cba:	f000 fc39 	bl	1530 <printk>
			if (fromHardFault) {
     cbe:	b175      	cbz	r5, cde <_MpuFault+0x6a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
     cc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     cc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     cc6:	62a3      	str	r3, [r4, #40]	; 0x28
     cc8:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
     cca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ccc:	07da      	lsls	r2, r3, #31
     cce:	d501      	bpl.n	cd4 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
     cd0:	4809      	ldr	r0, [pc, #36]	; (cf8 <_MpuFault+0x84>)
     cd2:	e7de      	b.n	c92 <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
     cd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     cd6:	069b      	lsls	r3, r3, #26
     cd8:	d501      	bpl.n	cde <_MpuFault+0x6a>
		PR_EXC("  Floating-point lazy state preservation error\n");
     cda:	4808      	ldr	r0, [pc, #32]	; (cfc <_MpuFault+0x88>)
     cdc:	e7d9      	b.n	c92 <_MpuFault+0x1e>
     cde:	bd38      	pop	{r3, r4, r5, pc}
     ce0:	0000c2fb 	.word	0x0000c2fb
     ce4:	e000ed00 	.word	0xe000ed00
     ce8:	0000c312 	.word	0x0000c312
     cec:	0000c324 	.word	0x0000c324
     cf0:	0000c338 	.word	0x0000c338
     cf4:	0000c351 	.word	0x0000c351
     cf8:	0000c362 	.word	0x0000c362
     cfc:	0000c382 	.word	0x0000c382

00000d00 <_BusFault>:
{
     d00:	b538      	push	{r3, r4, r5, lr}
     d02:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
     d04:	481d      	ldr	r0, [pc, #116]	; (d7c <_BusFault+0x7c>)
{
     d06:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
     d08:	f000 fc12 	bl	1530 <printk>
	_FaultThreadShow(esf);
     d0c:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     d10:	4c1b      	ldr	r4, [pc, #108]	; (d80 <_BusFault+0x80>)
	_FaultThreadShow(esf);
     d12:	f7ff ff59 	bl	bc8 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     d16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     d18:	04d8      	lsls	r0, r3, #19
     d1a:	d504      	bpl.n	d26 <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
     d1c:	4819      	ldr	r0, [pc, #100]	; (d84 <_BusFault+0x84>)
}
     d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
     d22:	f000 bc05 	b.w	1530 <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
     d26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     d28:	0519      	lsls	r1, r3, #20
     d2a:	d501      	bpl.n	d30 <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
     d2c:	4816      	ldr	r0, [pc, #88]	; (d88 <_BusFault+0x88>)
     d2e:	e7f6      	b.n	d1e <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
     d30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     d32:	059a      	lsls	r2, r3, #22
     d34:	d514      	bpl.n	d60 <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
     d36:	4815      	ldr	r0, [pc, #84]	; (d8c <_BusFault+0x8c>)
     d38:	f000 fbfa 	bl	1530 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
     d3c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
     d3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     d40:	041b      	lsls	r3, r3, #16
     d42:	d507      	bpl.n	d54 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
     d44:	4812      	ldr	r0, [pc, #72]	; (d90 <_BusFault+0x90>)
     d46:	f000 fbf3 	bl	1530 <printk>
			if (fromHardFault) {
     d4a:	b11d      	cbz	r5, d54 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
     d4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     d4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
     d52:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     d54:	4b0a      	ldr	r3, [pc, #40]	; (d80 <_BusFault+0x80>)
     d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     d58:	0558      	lsls	r0, r3, #21
     d5a:	d50e      	bpl.n	d7a <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
     d5c:	480d      	ldr	r0, [pc, #52]	; (d94 <_BusFault+0x94>)
     d5e:	e7de      	b.n	d1e <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     d60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     d62:	0559      	lsls	r1, r3, #21
     d64:	d4fa      	bmi.n	d5c <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
     d66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     d68:	05da      	lsls	r2, r3, #23
     d6a:	d501      	bpl.n	d70 <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
     d6c:	480a      	ldr	r0, [pc, #40]	; (d98 <_BusFault+0x98>)
     d6e:	e7d6      	b.n	d1e <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
     d70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     d72:	049b      	lsls	r3, r3, #18
     d74:	d501      	bpl.n	d7a <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
     d76:	4809      	ldr	r0, [pc, #36]	; (d9c <_BusFault+0x9c>)
     d78:	e7d1      	b.n	d1e <_BusFault+0x1e>
     d7a:	bd38      	pop	{r3, r4, r5, pc}
     d7c:	0000c178 	.word	0x0000c178
     d80:	e000ed00 	.word	0xe000ed00
     d84:	0000c312 	.word	0x0000c312
     d88:	0000c324 	.word	0x0000c324
     d8c:	0000c18f 	.word	0x0000c18f
     d90:	0000c351 	.word	0x0000c351
     d94:	0000c1a9 	.word	0x0000c1a9
     d98:	0000c1c5 	.word	0x0000c1c5
     d9c:	0000c382 	.word	0x0000c382

00000da0 <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
     da0:	b538      	push	{r3, r4, r5, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     da2:	4d27      	ldr	r5, [pc, #156]	; (e40 <_Fault+0xa0>)
     da4:	686b      	ldr	r3, [r5, #4]
     da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
     daa:	1eda      	subs	r2, r3, #3
{
     dac:	4604      	mov	r4, r0
	switch (fault) {
     dae:	2a09      	cmp	r2, #9
     db0:	d83a      	bhi.n	e28 <_Fault+0x88>
     db2:	e8df f002 	tbb	[pc, r2]
     db6:	3305      	.short	0x3305
     db8:	39392f35 	.word	0x39392f35
     dbc:	37393939 	.word	0x37393939
	PR_EXC("***** HARD FAULT *****\n");
     dc0:	4820      	ldr	r0, [pc, #128]	; (e44 <_Fault+0xa4>)
     dc2:	f000 fbb5 	bl	1530 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
     dc6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     dc8:	079a      	lsls	r2, r3, #30
     dca:	d503      	bpl.n	dd4 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
     dcc:	481e      	ldr	r0, [pc, #120]	; (e48 <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
     dce:	f000 fbaf 	bl	1530 <printk>
     dd2:	e00c      	b.n	dee <_Fault+0x4e>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
     dd4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     dd6:	005b      	lsls	r3, r3, #1
     dd8:	d509      	bpl.n	dee <_Fault+0x4e>
		PR_EXC("  Fault escalation (see below)\n");
     dda:	481c      	ldr	r0, [pc, #112]	; (e4c <_Fault+0xac>)
     ddc:	f000 fba8 	bl	1530 <printk>
		if (SCB_MMFSR) {
     de0:	4b1b      	ldr	r3, [pc, #108]	; (e50 <_Fault+0xb0>)
     de2:	781b      	ldrb	r3, [r3, #0]
     de4:	b14b      	cbz	r3, dfa <_Fault+0x5a>
			_MpuFault(esf, 1);
     de6:	2101      	movs	r1, #1
		_MpuFault(esf, 0);
     de8:	4620      	mov	r0, r4
     dea:	f7ff ff43 	bl	c74 <_MpuFault>

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     dee:	4621      	mov	r1, r4
     df0:	2000      	movs	r0, #0
}
     df2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     df6:	f000 b913 	b.w	1020 <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
     dfa:	4b16      	ldr	r3, [pc, #88]	; (e54 <_Fault+0xb4>)
     dfc:	781b      	ldrb	r3, [r3, #0]
     dfe:	b123      	cbz	r3, e0a <_Fault+0x6a>
			_BusFault(esf, 1);
     e00:	2101      	movs	r1, #1
		_BusFault(esf, 0);
     e02:	4620      	mov	r0, r4
     e04:	f7ff ff7c 	bl	d00 <_BusFault>
     e08:	e7f1      	b.n	dee <_Fault+0x4e>
		} else if (SCB_UFSR) {
     e0a:	4b13      	ldr	r3, [pc, #76]	; (e58 <_Fault+0xb8>)
     e0c:	881b      	ldrh	r3, [r3, #0]
     e0e:	b29b      	uxth	r3, r3
     e10:	2b00      	cmp	r3, #0
     e12:	d0ec      	beq.n	dee <_Fault+0x4e>
		_UsageFault(esf);
     e14:	4620      	mov	r0, r4
     e16:	f7ff fee5 	bl	be4 <_UsageFault>
     e1a:	e7e8      	b.n	dee <_Fault+0x4e>
		_MpuFault(esf, 0);
     e1c:	2100      	movs	r1, #0
     e1e:	e7e3      	b.n	de8 <_Fault+0x48>
		_BusFault(esf, 0);
     e20:	2100      	movs	r1, #0
     e22:	e7ee      	b.n	e02 <_Fault+0x62>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
     e24:	480d      	ldr	r0, [pc, #52]	; (e5c <_Fault+0xbc>)
     e26:	e7d2      	b.n	dce <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
     e28:	480d      	ldr	r0, [pc, #52]	; (e60 <_Fault+0xc0>)
     e2a:	490e      	ldr	r1, [pc, #56]	; (e64 <_Fault+0xc4>)
     e2c:	f1a3 0210 	sub.w	r2, r3, #16
     e30:	2b0f      	cmp	r3, #15
     e32:	bfd8      	it	le
     e34:	4601      	movle	r1, r0
     e36:	480c      	ldr	r0, [pc, #48]	; (e68 <_Fault+0xc8>)
     e38:	f000 fb7a 	bl	1530 <printk>
     e3c:	e7d7      	b.n	dee <_Fault+0x4e>
     e3e:	bf00      	nop
     e40:	e000ed00 	.word	0xe000ed00
     e44:	0000c20c 	.word	0x0000c20c
     e48:	0000c224 	.word	0x0000c224
     e4c:	0000c246 	.word	0x0000c246
     e50:	e000ed28 	.word	0xe000ed28
     e54:	e000ed29 	.word	0xe000ed29
     e58:	e000ed2a 	.word	0xe000ed2a
     e5c:	0000c266 	.word	0x0000c266
     e60:	0000c1de 	.word	0x0000c1de
     e64:	0000c1f3 	.word	0x0000c1f3
     e68:	0000c29d 	.word	0x0000c29d

00000e6c <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
     e6c:	4a02      	ldr	r2, [pc, #8]	; (e78 <_FaultInit+0xc>)
     e6e:	6953      	ldr	r3, [r2, #20]
     e70:	f043 0310 	orr.w	r3, r3, #16
     e74:	6153      	str	r3, [r2, #20]
     e76:	4770      	bx	lr
     e78:	e000ed00 	.word	0xe000ed00

00000e7c <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     e7c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     e7e:	2b00      	cmp	r3, #0
     e80:	db08      	blt.n	e94 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e82:	2201      	movs	r2, #1
     e84:	f000 001f 	and.w	r0, r0, #31
     e88:	fa02 f000 	lsl.w	r0, r2, r0
     e8c:	095b      	lsrs	r3, r3, #5
     e8e:	4a02      	ldr	r2, [pc, #8]	; (e98 <_arch_irq_enable+0x1c>)
     e90:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     e94:	4770      	bx	lr
     e96:	bf00      	nop
     e98:	e000e100 	.word	0xe000e100

00000e9c <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
     e9c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     e9e:	2b00      	cmp	r3, #0
     ea0:	db0d      	blt.n	ebe <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ea2:	2201      	movs	r2, #1
     ea4:	095b      	lsrs	r3, r3, #5
     ea6:	f000 001f 	and.w	r0, r0, #31
     eaa:	fa02 f000 	lsl.w	r0, r2, r0
     eae:	3320      	adds	r3, #32
     eb0:	4a03      	ldr	r2, [pc, #12]	; (ec0 <_arch_irq_disable+0x24>)
     eb2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     eb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     eba:	f3bf 8f6f 	isb	sy
     ebe:	4770      	bx	lr
     ec0:	e000e100 	.word	0xe000e100

00000ec4 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
     ec4:	0942      	lsrs	r2, r0, #5
     ec6:	4b05      	ldr	r3, [pc, #20]	; (edc <_arch_irq_is_enabled+0x18>)
     ec8:	f000 001f 	and.w	r0, r0, #31
     ecc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     ed0:	2301      	movs	r3, #1
     ed2:	fa03 f000 	lsl.w	r0, r3, r0
}
     ed6:	4010      	ands	r0, r2
     ed8:	4770      	bx	lr
     eda:	bf00      	nop
     edc:	e000e100 	.word	0xe000e100

00000ee0 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     ee0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     ee2:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ee4:	bfa8      	it	ge
     ee6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
     eea:	f101 0101 	add.w	r1, r1, #1
     eee:	ea4f 1141 	mov.w	r1, r1, lsl #5
     ef2:	bfad      	iteet	ge
     ef4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ef8:	f000 000f 	andlt.w	r0, r0, #15
     efc:	4b03      	ldrlt	r3, [pc, #12]	; (f0c <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     efe:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     f00:	bfb6      	itet	lt
     f02:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     f04:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     f08:	5419      	strblt	r1, [r3, r0]
     f0a:	4770      	bx	lr
     f0c:	e000ed14 	.word	0xe000ed14

00000f10 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
     f10:	f000 b842 	b.w	f98 <__bus_fault>

00000f14 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
     f14:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
     f16:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
     f18:	4b04      	ldr	r3, [pc, #16]	; (f2c <_arch_isr_direct_pm+0x18>)
     f1a:	6998      	ldr	r0, [r3, #24]
     f1c:	b118      	cbz	r0, f26 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
     f1e:	2200      	movs	r2, #0
     f20:	619a      	str	r2, [r3, #24]
		_sys_power_save_idle_exit(idle_val);
     f22:	f009 fe51 	bl	abc8 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
     f26:	b662      	cpsie	i
     f28:	bd08      	pop	{r3, pc}
     f2a:	bf00      	nop
     f2c:	20001d34 	.word	0x20001d34

00000f30 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
     f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f32:	460c      	mov	r4, r1
     f34:	4616      	mov	r6, r2
     f36:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
     f38:	2204      	movs	r2, #4
     f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     f3c:	9909      	ldr	r1, [sp, #36]	; 0x24
     f3e:	4605      	mov	r5, r0
     f40:	f00a fd2c 	bl	b99c <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     f44:	f1a6 0120 	sub.w	r1, r6, #32
     f48:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
     f4a:	4a0c      	ldr	r2, [pc, #48]	; (f7c <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
     f4c:	65ac      	str	r4, [r5, #88]	; 0x58
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     f4e:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
     f52:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
     f54:	f022 0201 	bic.w	r2, r2, #1
     f58:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
     f5a:	652b      	str	r3, [r5, #80]	; 0x50
	thread->stack_info.size = (u32_t)stackSize;
     f5c:	65ee      	str	r6, [r5, #92]	; 0x5c
     f5e:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
     f60:	9a06      	ldr	r2, [sp, #24]
     f62:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
     f64:	9a07      	ldr	r2, [sp, #28]
     f66:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
     f68:	9a08      	ldr	r2, [sp, #32]
     f6a:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
     f6c:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
     f6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     f72:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
     f74:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
     f76:	662b      	str	r3, [r5, #96]	; 0x60
     f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f7a:	bf00      	nop
     f7c:	0000b811 	.word	0x0000b811

00000f80 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
     f80:	4901      	ldr	r1, [pc, #4]	; (f88 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
     f82:	2210      	movs	r2, #16
	str r2, [r1]
     f84:	600a      	str	r2, [r1, #0]
	bx lr
     f86:	4770      	bx	lr
	ldr r1, =_SCB_SCR
     f88:	e000ed10 	.word	0xe000ed10

00000f8c <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
     f8c:	4040      	eors	r0, r0
	msr BASEPRI, r0
     f8e:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
     f92:	bf30      	wfi

	bx lr
     f94:	4770      	bx	lr
     f96:	bf00      	nop

00000f98 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
     f98:	4040      	eors	r0, r0
	msr BASEPRI, r0
     f9a:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
     f9e:	f8df c01c 	ldr.w	ip, [pc, #28]	; fbc <__bus_fault+0x24>
	ldr ip, [ip]
     fa2:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
     fa6:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
     faa:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
     fac:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
     fb0:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	push {lr}
     fb4:	b500      	push	{lr}
	bl _Fault
     fb6:	f7ff fef3 	bl	da0 <_Fault>

	pop {pc}
     fba:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
     fbc:	e000ed04 	.word	0xe000ed04

00000fc0 <_NanoFatalErrorHandler>:
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
     fc0:	2804      	cmp	r0, #4
{
     fc2:	b538      	push	{r3, r4, r5, lr}
     fc4:	4604      	mov	r4, r0
     fc6:	460d      	mov	r5, r1
	switch (reason) {
     fc8:	d013      	beq.n	ff2 <_NanoFatalErrorHandler+0x32>
     fca:	2805      	cmp	r0, #5
     fcc:	d013      	beq.n	ff6 <_NanoFatalErrorHandler+0x36>
     fce:	2803      	cmp	r0, #3
     fd0:	d113      	bne.n	ffa <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
     fd2:	480c      	ldr	r0, [pc, #48]	; (1004 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
     fd4:	f000 faac 	bl	1530 <printk>
     fd8:	f00a f9be 	bl	b358 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
     fdc:	69aa      	ldr	r2, [r5, #24]
     fde:	4601      	mov	r1, r0
     fe0:	4809      	ldr	r0, [pc, #36]	; (1008 <_NanoFatalErrorHandler+0x48>)
     fe2:	f000 faa5 	bl	1530 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
     fe6:	4629      	mov	r1, r5
     fe8:	4620      	mov	r0, r4
}
     fea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
     fee:	f000 b817 	b.w	1020 <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
     ff2:	4806      	ldr	r0, [pc, #24]	; (100c <_NanoFatalErrorHandler+0x4c>)
     ff4:	e7ee      	b.n	fd4 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
     ff6:	4806      	ldr	r0, [pc, #24]	; (1010 <_NanoFatalErrorHandler+0x50>)
     ff8:	e7ec      	b.n	fd4 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
     ffa:	4601      	mov	r1, r0
     ffc:	4805      	ldr	r0, [pc, #20]	; (1014 <_NanoFatalErrorHandler+0x54>)
     ffe:	f000 fa97 	bl	1530 <printk>
		break;
    1002:	e7e9      	b.n	fd8 <_NanoFatalErrorHandler+0x18>
    1004:	0000c486 	.word	0x0000c486
    1008:	0000c504 	.word	0x0000c504
    100c:	0000c4ac 	.word	0x0000c4ac
    1010:	0000c4c6 	.word	0x0000c4c6
    1014:	0000c4e1 	.word	0x0000c4e1

00001018 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    1018:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    101a:	6800      	ldr	r0, [r0, #0]
    101c:	f7ff bfd0 	b.w	fc0 <_NanoFatalErrorHandler>

00001020 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1020:	2805      	cmp	r0, #5
{
    1022:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1024:	d00c      	beq.n	1040 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    1026:	f00a fbc7 	bl	b7b8 <k_is_in_isr>
    102a:	b160      	cbz	r0, 1046 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    102c:	f00a fbc4 	bl	b7b8 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1030:	4b0c      	ldr	r3, [pc, #48]	; (1064 <_SysFatalErrorHandler+0x44>)
    1032:	490d      	ldr	r1, [pc, #52]	; (1068 <_SysFatalErrorHandler+0x48>)
    1034:	2800      	cmp	r0, #0
    1036:	bf08      	it	eq
    1038:	4619      	moveq	r1, r3
    103a:	480c      	ldr	r0, [pc, #48]	; (106c <_SysFatalErrorHandler+0x4c>)
    103c:	f000 fa78 	bl	1530 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1040:	f7ff ffa4 	bl	f8c <k_cpu_idle>
    1044:	e7fc      	b.n	1040 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    1046:	f00a fbc7 	bl	b7d8 <_is_thread_essential>
    104a:	2800      	cmp	r0, #0
    104c:	d1ee      	bne.n	102c <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    104e:	4c08      	ldr	r4, [pc, #32]	; (1070 <_SysFatalErrorHandler+0x50>)
    1050:	4808      	ldr	r0, [pc, #32]	; (1074 <_SysFatalErrorHandler+0x54>)
    1052:	68a1      	ldr	r1, [r4, #8]
    1054:	f000 fa6c 	bl	1530 <printk>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1058:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    105a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    105e:	f000 b80b 	b.w	1078 <_impl_k_thread_abort>
    1062:	bf00      	nop
    1064:	0000c544 	.word	0x0000c544
    1068:	0000c540 	.word	0x0000c540
    106c:	0000c555 	.word	0x0000c555
    1070:	20001d34 	.word	0x20001d34
    1074:	0000c575 	.word	0x0000c575

00001078 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1078:	b538      	push	{r3, r4, r5, lr}
    107a:	4605      	mov	r5, r0
	__asm__ volatile(
    107c:	f04f 0320 	mov.w	r3, #32
    1080:	f3ef 8411 	mrs	r4, BASEPRI
    1084:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1088:	f00a fc18 	bl	b8bc <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    108c:	4b0b      	ldr	r3, [pc, #44]	; (10bc <_impl_k_thread_abort+0x44>)
    108e:	689b      	ldr	r3, [r3, #8]
    1090:	429d      	cmp	r5, r3
    1092:	d10d      	bne.n	10b0 <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1094:	4b0a      	ldr	r3, [pc, #40]	; (10c0 <_impl_k_thread_abort+0x48>)
    1096:	685a      	ldr	r2, [r3, #4]
    1098:	f3c2 0208 	ubfx	r2, r2, #0, #9
    109c:	b922      	cbnz	r2, 10a8 <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    109e:	f00a f985 	bl	b3ac <_update_time_slice_before_swap>

	return __swap(key);
    10a2:	4620      	mov	r0, r4
    10a4:	f7ff fd38 	bl	b18 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    10a8:	685a      	ldr	r2, [r3, #4]
    10aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    10ae:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
    10b0:	4620      	mov	r0, r4
}
    10b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule_threads(key);
    10b6:	f00a b8b5 	b.w	b224 <_reschedule_threads>
    10ba:	bf00      	nop
    10bc:	20001d34 	.word	0x20001d34
    10c0:	e000ed00 	.word	0xe000ed00

000010c4 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    10c4:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    10c6:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    10c8:	4a0b      	ldr	r2, [pc, #44]	; (10f8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    10ca:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    10cc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    10ce:	bf1e      	ittt	ne
	movne	r1, #0
    10d0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    10d2:	6191      	strne	r1, [r2, #24]
		blxne	_sys_power_save_idle_exit
    10d4:	f009 fd78 	blne	abc8 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    10d8:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    10da:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    10de:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    10e2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    10e6:	4905      	ldr	r1, [pc, #20]	; (10fc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    10e8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    10ea:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    10ec:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    10ee:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    10f2:	f7ff bcef 	b.w	ad4 <_ExcExit>
    10f6:	0000      	.short	0x0000
	ldr r2, =_kernel
    10f8:	20001d34 	.word	0x20001d34
	ldr r1, =_sw_isr_table
    10fc:	000000dc 	.word	0x000000dc

00001100 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1100:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1102:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    1106:	4805      	ldr	r0, [pc, #20]	; (111c <__reset+0x1c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1108:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    110c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    110e:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1112:	2002      	movs	r0, #2
    msr CONTROL, r0
    1114:	f380 8814 	msr	CONTROL, r0

    b _PrepC
    1118:	f000 b806 	b.w	1128 <_PrepC>
    ldr r0, =_interrupt_stack
    111c:	200041c0 	.word	0x200041c0

00001120 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1120:	bf30      	wfi
    b _SysNmiOnReset
    1122:	f7ff bffd 	b.w	1120 <_SysNmiOnReset>
    1126:	bf00      	nop

00001128 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1128:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    112a:	4b07      	ldr	r3, [pc, #28]	; (1148 <_PrepC+0x20>)
    112c:	4a07      	ldr	r2, [pc, #28]	; (114c <_PrepC+0x24>)
    112e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1132:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1134:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1138:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    113c:	f009 fd8a 	bl	ac54 <_bss_zero>
	_data_copy();
    1140:	f009 fd92 	bl	ac68 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1144:	f009 fdb8 	bl	acb8 <_Cstart>
    1148:	00000000 	.word	0x00000000
    114c:	e000ed00 	.word	0xe000ed00

00001150 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1150:	b508      	push	{r3, lr}
	handler();
    1152:	f7ff ffe5 	bl	1120 <_SysNmiOnReset>
	_ExcExit();
}
    1156:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    115a:	f7ff bcbb 	b.w	ad4 <_ExcExit>
	...

00001160 <arm_mpu_init>:
	}
}

static inline u8_t _get_num_regions(void)
{
	u32_t type = ARM_MPU_DEV->type;
    1160:	4b15      	ldr	r3, [pc, #84]	; (11b8 <arm_mpu_init+0x58>)
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
    1162:	4916      	ldr	r1, [pc, #88]	; (11bc <arm_mpu_init+0x5c>)
	u32_t type = ARM_MPU_DEV->type;
    1164:	681a      	ldr	r2, [r3, #0]
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    1166:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1168:	680d      	ldr	r5, [r1, #0]
    116a:	f3c2 2207 	ubfx	r2, r2, #8, #8
    116e:	4295      	cmp	r5, r2
    1170:	d80f      	bhi.n	1192 <arm_mpu_init+0x32>
	ARM_MPU_DEV->ctrl = 0;
    1172:	2200      	movs	r2, #0
    1174:	6848      	ldr	r0, [r1, #4]
    1176:	605a      	str	r2, [r3, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1178:	4295      	cmp	r5, r2
    117a:	f100 000c 	add.w	r0, r0, #12
    117e:	d10a      	bne.n	1196 <arm_mpu_init+0x36>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1180:	2205      	movs	r2, #5
    1182:	605a      	str	r2, [r3, #4]
	arm_mpu_enabled = 1;
    1184:	4b0e      	ldr	r3, [pc, #56]	; (11c0 <arm_mpu_init+0x60>)
    1186:	2201      	movs	r2, #1
    1188:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    118a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    118e:	f3bf 8f6f 	isb	sy
	ARG_UNUSED(arg);

	_arm_mpu_config();

	return 0;
}
    1192:	2000      	movs	r0, #0
    1194:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    1196:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    119a:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    119e:	609a      	str	r2, [r3, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    11a0:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    11a4:	f041 0110 	orr.w	r1, r1, #16
    11a8:	4311      	orrs	r1, r2
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    11aa:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    11ae:	60d9      	str	r1, [r3, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    11b0:	3201      	adds	r2, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    11b2:	611c      	str	r4, [r3, #16]
    11b4:	e7e0      	b.n	1178 <arm_mpu_init+0x18>
    11b6:	bf00      	nop
    11b8:	e000ed90 	.word	0xe000ed90
    11bc:	20004dc4 	.word	0x20004dc4
    11c0:	20000034 	.word	0x20000034

000011c4 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    11c4:	2000      	movs	r0, #0
    11c6:	4770      	bx	lr

000011c8 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    11c8:	680b      	ldr	r3, [r1, #0]
    11ca:	3301      	adds	r3, #1
    11cc:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    11ce:	4b01      	ldr	r3, [pc, #4]	; (11d4 <char_out+0xc>)
    11d0:	681b      	ldr	r3, [r3, #0]
    11d2:	4718      	bx	r3
    11d4:	20004e0c 	.word	0x20004e0c

000011d8 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    11d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11dc:	b085      	sub	sp, #20
    11de:	469b      	mov	fp, r3
    11e0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    11e2:	f8df a090 	ldr.w	sl, [pc, #144]	; 1274 <_printk_dec_ulong+0x9c>
    11e6:	2c01      	cmp	r4, #1
    11e8:	bfb8      	it	lt
    11ea:	2401      	movlt	r4, #1
    11ec:	2b01      	cmp	r3, #1
    11ee:	bf0c      	ite	eq
    11f0:	2330      	moveq	r3, #48	; 0x30
    11f2:	2320      	movne	r3, #32
    11f4:	4615      	mov	r5, r2
    11f6:	4680      	mov	r8, r0
    11f8:	4689      	mov	r9, r1
    11fa:	9401      	str	r4, [sp, #4]
    11fc:	9302      	str	r3, [sp, #8]
    11fe:	2601      	movs	r6, #1
    1200:	270a      	movs	r7, #10
    1202:	2200      	movs	r2, #0
    1204:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
    1208:	b90a      	cbnz	r2, 120e <_printk_dec_ulong+0x36>
    120a:	45aa      	cmp	sl, r5
    120c:	d21f      	bcs.n	124e <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
    120e:	fbb5 f0f4 	udiv	r0, r5, r4
    1212:	4649      	mov	r1, r9
    1214:	3030      	adds	r0, #48	; 0x30
    1216:	47c0      	blx	r8
			digits++;
    1218:	3601      	adds	r6, #1
			found_largest_digit = 1;
    121a:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    121c:	3f01      	subs	r7, #1
	while (pos >= 9) {
    121e:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
    1220:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
    1224:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
    1228:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
    122c:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
    1230:	d1e8      	bne.n	1204 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
    1232:	4649      	mov	r1, r9
    1234:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1238:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
    123a:	f1bb 0f03 	cmp.w	fp, #3
    123e:	d103      	bne.n	1248 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
    1240:	9b01      	ldr	r3, [sp, #4]
    1242:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
    1244:	2c00      	cmp	r4, #0
    1246:	dc0f      	bgt.n	1268 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
    1248:	b005      	add	sp, #20
    124a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    124e:	9b01      	ldr	r3, [sp, #4]
    1250:	42bb      	cmp	r3, r7
    1252:	dbe3      	blt.n	121c <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    1254:	f1bb 0f02 	cmp.w	fp, #2
    1258:	d8e0      	bhi.n	121c <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    125a:	4649      	mov	r1, r9
    125c:	9802      	ldr	r0, [sp, #8]
    125e:	9203      	str	r2, [sp, #12]
			digits++;
    1260:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    1262:	47c0      	blx	r8
			digits++;
    1264:	9a03      	ldr	r2, [sp, #12]
    1266:	e7d9      	b.n	121c <_printk_dec_ulong+0x44>
			out(' ', ctx);
    1268:	4649      	mov	r1, r9
    126a:	2020      	movs	r0, #32
    126c:	47c0      	blx	r8
    126e:	3c01      	subs	r4, #1
    1270:	e7e8      	b.n	1244 <_printk_dec_ulong+0x6c>
    1272:	bf00      	nop
    1274:	3b9ac9ff 	.word	0x3b9ac9ff

00001278 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
    1278:	680a      	ldr	r2, [r1, #0]
    127a:	688b      	ldr	r3, [r1, #8]
{
    127c:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
    127e:	b112      	cbz	r2, 1286 <str_out+0xe>
    1280:	684c      	ldr	r4, [r1, #4]
    1282:	42a3      	cmp	r3, r4
    1284:	db02      	blt.n	128c <str_out+0x14>
		ctx->count++;
    1286:	3301      	adds	r3, #1
    1288:	608b      	str	r3, [r1, #8]
		return c;
    128a:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
    128c:	1e65      	subs	r5, r4, #1
    128e:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
    1290:	bf0b      	itete	eq
    1292:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
    1294:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
    1296:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
    1298:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
    129a:	bf0c      	ite	eq
    129c:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
    129e:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
    12a0:	bd30      	pop	{r4, r5, pc}
	...

000012a4 <__printk_hook_install>:
	_char_out = fn;
    12a4:	4b01      	ldr	r3, [pc, #4]	; (12ac <__printk_hook_install+0x8>)
    12a6:	6018      	str	r0, [r3, #0]
    12a8:	4770      	bx	lr
    12aa:	bf00      	nop
    12ac:	20004e0c 	.word	0x20004e0c

000012b0 <_vprintk>:
{
    12b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12b4:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
    12b6:	f04f 0a00 	mov.w	sl, #0
{
    12ba:	4606      	mov	r6, r0
    12bc:	460f      	mov	r7, r1
    12be:	9204      	str	r2, [sp, #16]
    12c0:	461c      	mov	r4, r3
	int min_width = -1;
    12c2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    12c6:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
    12c8:	4655      	mov	r5, sl
	while (*fmt) {
    12ca:	9b04      	ldr	r3, [sp, #16]
    12cc:	7818      	ldrb	r0, [r3, #0]
    12ce:	b910      	cbnz	r0, 12d6 <_vprintk+0x26>
}
    12d0:	b009      	add	sp, #36	; 0x24
    12d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
    12d6:	b945      	cbnz	r5, 12ea <_vprintk+0x3a>
			if (*fmt != '%') {
    12d8:	2825      	cmp	r0, #37	; 0x25
    12da:	f000 810c 	beq.w	14f6 <_vprintk+0x246>
				out((int)*fmt, ctx);
    12de:	4639      	mov	r1, r7
    12e0:	47b0      	blx	r6
		++fmt;
    12e2:	9b04      	ldr	r3, [sp, #16]
    12e4:	3301      	adds	r3, #1
    12e6:	9304      	str	r3, [sp, #16]
    12e8:	e7ef      	b.n	12ca <_vprintk+0x1a>
			switch (*fmt) {
    12ea:	2864      	cmp	r0, #100	; 0x64
    12ec:	d061      	beq.n	13b2 <_vprintk+0x102>
    12ee:	d819      	bhi.n	1324 <_vprintk+0x74>
    12f0:	2839      	cmp	r0, #57	; 0x39
    12f2:	d80a      	bhi.n	130a <_vprintk+0x5a>
    12f4:	2831      	cmp	r0, #49	; 0x31
    12f6:	d250      	bcs.n	139a <_vprintk+0xea>
    12f8:	282d      	cmp	r0, #45	; 0x2d
    12fa:	d03c      	beq.n	1376 <_vprintk+0xc6>
    12fc:	2830      	cmp	r0, #48	; 0x30
    12fe:	d03d      	beq.n	137c <_vprintk+0xcc>
    1300:	2825      	cmp	r0, #37	; 0x25
    1302:	d108      	bne.n	1316 <_vprintk+0x66>
				out((int)'%', ctx);
    1304:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
    1306:	47b0      	blx	r6
    1308:	e06f      	b.n	13ea <_vprintk+0x13a>
			switch (*fmt) {
    130a:	2858      	cmp	r0, #88	; 0x58
    130c:	f000 8089 	beq.w	1422 <_vprintk+0x172>
    1310:	2863      	cmp	r0, #99	; 0x63
    1312:	f000 80ea 	beq.w	14ea <_vprintk+0x23a>
				out((int)'%', ctx);
    1316:	4639      	mov	r1, r7
    1318:	2025      	movs	r0, #37	; 0x25
    131a:	47b0      	blx	r6
				out((int)*fmt, ctx);
    131c:	9b04      	ldr	r3, [sp, #16]
    131e:	4639      	mov	r1, r7
    1320:	7818      	ldrb	r0, [r3, #0]
    1322:	e7f0      	b.n	1306 <_vprintk+0x56>
			switch (*fmt) {
    1324:	2870      	cmp	r0, #112	; 0x70
    1326:	d072      	beq.n	140e <_vprintk+0x15e>
    1328:	d806      	bhi.n	1338 <_vprintk+0x88>
    132a:	2869      	cmp	r0, #105	; 0x69
    132c:	d041      	beq.n	13b2 <_vprintk+0x102>
    132e:	286c      	cmp	r0, #108	; 0x6c
    1330:	d03c      	beq.n	13ac <_vprintk+0xfc>
    1332:	2868      	cmp	r0, #104	; 0x68
    1334:	d0d5      	beq.n	12e2 <_vprintk+0x32>
    1336:	e7ee      	b.n	1316 <_vprintk+0x66>
    1338:	2875      	cmp	r0, #117	; 0x75
    133a:	d058      	beq.n	13ee <_vprintk+0x13e>
    133c:	d817      	bhi.n	136e <_vprintk+0xbe>
    133e:	2873      	cmp	r0, #115	; 0x73
    1340:	d1e9      	bne.n	1316 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
    1342:	6823      	ldr	r3, [r4, #0]
    1344:	f104 0b04 	add.w	fp, r4, #4
    1348:	461c      	mov	r4, r3
				while (*s)
    134a:	4625      	mov	r5, r4
    134c:	f815 0b01 	ldrb.w	r0, [r5], #1
    1350:	2800      	cmp	r0, #0
    1352:	f040 80bf 	bne.w	14d4 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
    1356:	f1b8 0f03 	cmp.w	r8, #3
    135a:	f040 80d5 	bne.w	1508 <_vprintk+0x258>
					int remaining = min_width - (s - start);
    135e:	1ae4      	subs	r4, r4, r3
    1360:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
    1364:	2c00      	cmp	r4, #0
    1366:	f300 80bb 	bgt.w	14e0 <_vprintk+0x230>
				char *s = va_arg(ap, char *);
    136a:	465c      	mov	r4, fp
    136c:	e03d      	b.n	13ea <_vprintk+0x13a>
			switch (*fmt) {
    136e:	2878      	cmp	r0, #120	; 0x78
    1370:	d057      	beq.n	1422 <_vprintk+0x172>
    1372:	287a      	cmp	r0, #122	; 0x7a
    1374:	e7de      	b.n	1334 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
    1376:	f04f 0803 	mov.w	r8, #3
    137a:	e7b2      	b.n	12e2 <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
    137c:	f1b9 0f00 	cmp.w	r9, #0
    1380:	da0e      	bge.n	13a0 <_vprintk+0xf0>
    1382:	f1b8 0f00 	cmp.w	r8, #0
    1386:	f000 80bc 	beq.w	1502 <_vprintk+0x252>
					min_width = *fmt - '0';
    138a:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    138e:	f1b8 0f00 	cmp.w	r8, #0
    1392:	bf08      	it	eq
    1394:	f04f 0802 	moveq.w	r8, #2
    1398:	e7a3      	b.n	12e2 <_vprintk+0x32>
				if (min_width < 0) {
    139a:	f1b9 0f00 	cmp.w	r9, #0
    139e:	dbf4      	blt.n	138a <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
    13a0:	230a      	movs	r3, #10
    13a2:	fb03 0909 	mla	r9, r3, r9, r0
    13a6:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    13aa:	e7f0      	b.n	138e <_vprintk+0xde>
				long_ctr++;
    13ac:	f10a 0a01 	add.w	sl, sl, #1
    13b0:	e797      	b.n	12e2 <_vprintk+0x32>
				if (long_ctr < 2) {
    13b2:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
    13b6:	bfc5      	ittet	gt
    13b8:	3407      	addgt	r4, #7
    13ba:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
    13be:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
    13c0:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
    13c2:	bfd4      	ite	le
    13c4:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
    13c6:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
    13ca:	2d00      	cmp	r5, #0
    13cc:	da05      	bge.n	13da <_vprintk+0x12a>
					out((int)'-', ctx);
    13ce:	4639      	mov	r1, r7
    13d0:	202d      	movs	r0, #45	; 0x2d
    13d2:	47b0      	blx	r6
					d = -d;
    13d4:	426d      	negs	r5, r5
					min_width--;
    13d6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    13da:	f8cd 9000 	str.w	r9, [sp]
    13de:	4643      	mov	r3, r8
    13e0:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
    13e2:	4639      	mov	r1, r7
    13e4:	4630      	mov	r0, r6
    13e6:	f7ff fef7 	bl	11d8 <_printk_dec_ulong>
			might_format = 0;
    13ea:	2500      	movs	r5, #0
				break;
    13ec:	e779      	b.n	12e2 <_vprintk+0x32>
				if (long_ctr < 2) {
    13ee:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
    13f2:	bfc5      	ittet	gt
    13f4:	3407      	addgt	r4, #7
    13f6:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
    13fa:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
    13fc:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    13fe:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
    1402:	bfcc      	ite	gt
    1404:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
    1408:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
    140a:	4643      	mov	r3, r8
    140c:	e7e9      	b.n	13e2 <_vprintk+0x132>
				  out('0', ctx);
    140e:	4639      	mov	r1, r7
    1410:	2030      	movs	r0, #48	; 0x30
    1412:	47b0      	blx	r6
				  out('x', ctx);
    1414:	4639      	mov	r1, r7
    1416:	2078      	movs	r0, #120	; 0x78
    1418:	47b0      	blx	r6
				  min_width = 8;
    141a:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
    141e:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
    1422:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
    1426:	bfc7      	ittee	gt
    1428:	3407      	addgt	r4, #7
    142a:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
    142e:	6823      	ldrle	r3, [r4, #0]
    1430:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
    1432:	bfc2      	ittt	gt
    1434:	f103 0408 	addgt.w	r4, r3, #8
    1438:	681b      	ldrgt	r3, [r3, #0]
    143a:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
    143c:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
    1440:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
    1444:	bfd8      	it	le
    1446:	3404      	addle	r4, #4
	int digits = 0;
    1448:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
    144a:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
    144c:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    144e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    1452:	9b05      	ldr	r3, [sp, #20]
    1454:	ea4f 008b 	mov.w	r0, fp, lsl #2
    1458:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
    145c:	f010 000f 	ands.w	r0, r0, #15
    1460:	d109      	bne.n	1476 <_vprintk+0x1c6>
    1462:	9b07      	ldr	r3, [sp, #28]
    1464:	b913      	cbnz	r3, 146c <_vprintk+0x1bc>
    1466:	f1bb 0f00 	cmp.w	fp, #0
    146a:	d122      	bne.n	14b2 <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
    146c:	f04f 0e30 	mov.w	lr, #48	; 0x30
    1470:	e007      	b.n	1482 <_vprintk+0x1d2>
	for (; size; size--) {
    1472:	9a06      	ldr	r2, [sp, #24]
    1474:	e7eb      	b.n	144e <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
    1476:	2809      	cmp	r0, #9
    1478:	bf8c      	ite	hi
    147a:	f04f 0e57 	movhi.w	lr, #87	; 0x57
    147e:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
    1482:	4639      	mov	r1, r7
    1484:	4470      	add	r0, lr
    1486:	9206      	str	r2, [sp, #24]
    1488:	47b0      	blx	r6
			digits++;
    148a:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
    148c:	9507      	str	r5, [sp, #28]
			digits++;
    148e:	3301      	adds	r3, #1
    1490:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
    1492:	f1bb 0f00 	cmp.w	fp, #0
    1496:	d1ec      	bne.n	1472 <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
    1498:	f1b8 0f03 	cmp.w	r8, #3
    149c:	d1a5      	bne.n	13ea <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
    149e:	9b03      	ldr	r3, [sp, #12]
    14a0:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
    14a4:	2d00      	cmp	r5, #0
    14a6:	dda0      	ble.n	13ea <_vprintk+0x13a>
			out(' ', ctx);
    14a8:	4639      	mov	r1, r7
    14aa:	2020      	movs	r0, #32
    14ac:	47b0      	blx	r6
    14ae:	3d01      	subs	r5, #1
    14b0:	e7f8      	b.n	14a4 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
    14b2:	1e53      	subs	r3, r2, #1
    14b4:	4591      	cmp	r9, r2
    14b6:	9306      	str	r3, [sp, #24]
    14b8:	dbeb      	blt.n	1492 <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
    14ba:	f1b8 0f01 	cmp.w	r8, #1
    14be:	d103      	bne.n	14c8 <_vprintk+0x218>
				out('0', ctx);
    14c0:	4639      	mov	r1, r7
    14c2:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    14c4:	47b0      	blx	r6
    14c6:	e7e4      	b.n	1492 <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
    14c8:	f1b8 0f02 	cmp.w	r8, #2
    14cc:	d1e1      	bne.n	1492 <_vprintk+0x1e2>
				out(' ', ctx);
    14ce:	4639      	mov	r1, r7
    14d0:	2020      	movs	r0, #32
    14d2:	e7f7      	b.n	14c4 <_vprintk+0x214>
					out((int)(*s++), ctx);
    14d4:	4639      	mov	r1, r7
    14d6:	9303      	str	r3, [sp, #12]
    14d8:	462c      	mov	r4, r5
    14da:	47b0      	blx	r6
    14dc:	9b03      	ldr	r3, [sp, #12]
    14de:	e734      	b.n	134a <_vprintk+0x9a>
						out(' ', ctx);
    14e0:	4639      	mov	r1, r7
    14e2:	2020      	movs	r0, #32
    14e4:	47b0      	blx	r6
    14e6:	3c01      	subs	r4, #1
    14e8:	e73c      	b.n	1364 <_vprintk+0xb4>
				out(c, ctx);
    14ea:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
    14ec:	1d25      	adds	r5, r4, #4
				out(c, ctx);
    14ee:	4639      	mov	r1, r7
    14f0:	47b0      	blx	r6
				int c = va_arg(ap, int);
    14f2:	462c      	mov	r4, r5
    14f4:	e779      	b.n	13ea <_vprintk+0x13a>
				long_ctr = 0;
    14f6:	46aa      	mov	sl, r5
				padding = PAD_NONE;
    14f8:	46a8      	mov	r8, r5
				min_width = -1;
    14fa:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
    14fe:	2501      	movs	r5, #1
    1500:	e6ef      	b.n	12e2 <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
    1502:	f04f 0801 	mov.w	r8, #1
    1506:	e6ec      	b.n	12e2 <_vprintk+0x32>
				char *s = va_arg(ap, char *);
    1508:	465c      	mov	r4, fp
			might_format = 0;
    150a:	4605      	mov	r5, r0
    150c:	e6e9      	b.n	12e2 <_vprintk+0x32>
	...

00001510 <vprintk>:
{
    1510:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
    1512:	ac02      	add	r4, sp, #8
    1514:	2300      	movs	r3, #0
    1516:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    151a:	4602      	mov	r2, r0
    151c:	460b      	mov	r3, r1
    151e:	4803      	ldr	r0, [pc, #12]	; (152c <vprintk+0x1c>)
    1520:	4621      	mov	r1, r4
    1522:	f7ff fec5 	bl	12b0 <_vprintk>
}
    1526:	9801      	ldr	r0, [sp, #4]
    1528:	b002      	add	sp, #8
    152a:	bd10      	pop	{r4, pc}
    152c:	000011c9 	.word	0x000011c9

00001530 <printk>:
{
    1530:	b40f      	push	{r0, r1, r2, r3}
    1532:	b507      	push	{r0, r1, r2, lr}
    1534:	a904      	add	r1, sp, #16
    1536:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    153a:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    153c:	f7ff ffe8 	bl	1510 <vprintk>
}
    1540:	b003      	add	sp, #12
    1542:	f85d eb04 	ldr.w	lr, [sp], #4
    1546:	b004      	add	sp, #16
    1548:	4770      	bx	lr
	...

0000154c <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    154c:	b40c      	push	{r2, r3}
    154e:	b530      	push	{r4, r5, lr}
    1550:	b085      	sub	sp, #20
    1552:	ab08      	add	r3, sp, #32
    1554:	4604      	mov	r4, r0
    1556:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
    155a:	9001      	str	r0, [sp, #4]
    155c:	9102      	str	r1, [sp, #8]
    155e:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    1560:	a901      	add	r1, sp, #4
    1562:	4807      	ldr	r0, [pc, #28]	; (1580 <snprintk+0x34>)
	va_start(ap, fmt);
    1564:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
    1566:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    1568:	f7ff fea2 	bl	12b0 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    156c:	9803      	ldr	r0, [sp, #12]
    156e:	9b02      	ldr	r3, [sp, #8]
    1570:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1572:	bfb8      	it	lt
    1574:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    1576:	b005      	add	sp, #20
    1578:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    157c:	b002      	add	sp, #8
    157e:	4770      	bx	lr
    1580:	00001279 	.word	0x00001279

00001584 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_NET_BUF_USER_DATA_SIZE, 4);
GEN_ABSOLUTE_SYM(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_CMSIS, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_NRFX, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 39);
    1584:	4770      	bx	lr
	...

00001588 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    1588:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    158a:	4c11      	ldr	r4, [pc, #68]	; (15d0 <sys_rand32_get+0x48>)
    158c:	f3bf 8f5b 	dmb	ish
    1590:	6820      	ldr	r0, [r4, #0]
    1592:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    1596:	b960      	cbnz	r0, 15b2 <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
    1598:	480e      	ldr	r0, [pc, #56]	; (15d4 <sys_rand32_get+0x4c>)
    159a:	f009 fadd 	bl	ab58 <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    159e:	f3bf 8f5b 	dmb	ish
    15a2:	e854 3f00 	ldrex	r3, [r4]
    15a6:	e844 0200 	strex	r2, r0, [r4]
    15aa:	2a00      	cmp	r2, #0
    15ac:	d1f9      	bne.n	15a2 <sys_rand32_get+0x1a>
    15ae:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    15b2:	6843      	ldr	r3, [r0, #4]
    15b4:	2204      	movs	r2, #4
    15b6:	681b      	ldr	r3, [r3, #0]
    15b8:	eb0d 0102 	add.w	r1, sp, r2
    15bc:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    15be:	2800      	cmp	r0, #0
    15c0:	da02      	bge.n	15c8 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    15c2:	f000 fd1b 	bl	1ffc <_timer_cycle_get_32>
    15c6:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    15c8:	9801      	ldr	r0, [sp, #4]
    15ca:	b002      	add	sp, #8
    15cc:	bd10      	pop	{r4, pc}
    15ce:	bf00      	nop
    15d0:	20000038 	.word	0x20000038
    15d4:	0000c59a 	.word	0x0000c59a

000015d8 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    15d8:	280a      	cmp	r0, #10
{
    15da:	b538      	push	{r3, r4, r5, lr}
    15dc:	4604      	mov	r4, r0
    15de:	4d07      	ldr	r5, [pc, #28]	; (15fc <console_out+0x24>)
	if ('\n' == c) {
    15e0:	d104      	bne.n	15ec <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    15e2:	6828      	ldr	r0, [r5, #0]
static inline unsigned char _impl_uart_poll_out(struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;

	return api->poll_out(dev, out_char);
    15e4:	6843      	ldr	r3, [r0, #4]
    15e6:	210d      	movs	r1, #13
    15e8:	685b      	ldr	r3, [r3, #4]
    15ea:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    15ec:	6828      	ldr	r0, [r5, #0]
    15ee:	6843      	ldr	r3, [r0, #4]
    15f0:	b2e1      	uxtb	r1, r4
    15f2:	685b      	ldr	r3, [r3, #4]
    15f4:	4798      	blx	r3

	return c;
}
    15f6:	4620      	mov	r0, r4
    15f8:	bd38      	pop	{r3, r4, r5, pc}
    15fa:	bf00      	nop
    15fc:	2000003c 	.word	0x2000003c

00001600 <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    1600:	4801      	ldr	r0, [pc, #4]	; (1608 <uart_console_hook_install+0x8>)
    1602:	f7ff be4f 	b.w	12a4 <__printk_hook_install>
    1606:	bf00      	nop
    1608:	000015d9 	.word	0x000015d9

0000160c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    160c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    160e:	4804      	ldr	r0, [pc, #16]	; (1620 <uart_console_init+0x14>)
    1610:	f009 faa2 	bl	ab58 <device_get_binding>
    1614:	4b03      	ldr	r3, [pc, #12]	; (1624 <uart_console_init+0x18>)
    1616:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1618:	f7ff fff2 	bl	1600 <uart_console_hook_install>

	return 0;
}
    161c:	2000      	movs	r0, #0
    161e:	bd08      	pop	{r3, pc}
    1620:	0000c130 	.word	0x0000c130
    1624:	2000003c 	.word	0x2000003c

00001628 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1628:	b510      	push	{r4, lr}
    162a:	f04f 0320 	mov.w	r3, #32
    162e:	f3ef 8211 	mrs	r2, BASEPRI
    1632:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1636:	4c11      	ldr	r4, [pc, #68]	; (167c <_m16src_stop+0x54>)
    1638:	7823      	ldrb	r3, [r4, #0]
    163a:	b923      	cbnz	r3, 1646 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    163c:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    1640:	f06f 0044 	mvn.w	r0, #68	; 0x44
    1644:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    1646:	3b01      	subs	r3, #1
    1648:	b2db      	uxtb	r3, r3
    164a:	7023      	strb	r3, [r4, #0]
    164c:	b123      	cbz	r3, 1658 <_m16src_stop+0x30>
    164e:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    1652:	f06f 000f 	mvn.w	r0, #15
    1656:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    1658:	4b09      	ldr	r3, [pc, #36]	; (1680 <_m16src_stop+0x58>)
    165a:	7818      	ldrb	r0, [r3, #0]
    165c:	2101      	movs	r1, #1
    165e:	b128      	cbz	r0, 166c <_m16src_stop+0x44>
		m16src_ref++;
    1660:	7021      	strb	r1, [r4, #0]
    1662:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    1666:	f06f 000a 	mvn.w	r0, #10
    166a:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    166c:	7019      	strb	r1, [r3, #0]
    166e:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    1672:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1676:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    1678:	7018      	strb	r0, [r3, #0]

	return 0;
}
    167a:	bd10      	pop	{r4, pc}
    167c:	20000042 	.word	0x20000042
    1680:	20000041 	.word	0x20000041

00001684 <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    1684:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    1686:	2200      	movs	r2, #0
    1688:	4610      	mov	r0, r2
    168a:	2101      	movs	r1, #1
    168c:	f7ff fc28 	bl	ee0 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    1690:	2000      	movs	r0, #0
    1692:	f7ff fbf3 	bl	e7c <_arch_irq_enable>

	return 0;
}
    1696:	2000      	movs	r0, #0
    1698:	bd08      	pop	{r3, pc}
	...

0000169c <_m16src_start>:
{
    169c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    169e:	f04f 0220 	mov.w	r2, #32
    16a2:	f3ef 8311 	mrs	r3, BASEPRI
    16a6:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    16aa:	4a25      	ldr	r2, [pc, #148]	; (1740 <_m16src_start+0xa4>)
    16ac:	7810      	ldrb	r0, [r2, #0]
    16ae:	1c44      	adds	r4, r0, #1
    16b0:	7014      	strb	r4, [r2, #0]
    16b2:	b160      	cbz	r0, 16ce <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    16b4:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    16b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    16bc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    16c0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    16c4:	bf14      	ite	ne
    16c6:	2000      	movne	r0, #0
    16c8:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    16cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    16ce:	4d1d      	ldr	r5, [pc, #116]	; (1744 <_m16src_start+0xa8>)
    16d0:	782f      	ldrb	r7, [r5, #0]
    16d2:	b12f      	cbz	r7, 16e0 <_m16src_start+0x44>
		m16src_ref--;
    16d4:	7010      	strb	r0, [r2, #0]
    16d6:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    16da:	f06f 000a 	mvn.w	r0, #10
    16de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    16e0:	2601      	movs	r6, #1
    16e2:	702e      	strb	r6, [r5, #0]
    16e4:	f383 8811 	msr	BASEPRI, r3
    16e8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    16ec:	b319      	cbz	r1, 1736 <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    16ee:	4638      	mov	r0, r7
    16f0:	f7ff fbd4 	bl	e9c <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    16f4:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    16f8:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    16fc:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1700:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    1702:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1706:	b192      	cbz	r2, 172e <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1708:	2200      	movs	r2, #0
    170a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    170e:	4a0e      	ldr	r2, [pc, #56]	; (1748 <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    1710:	f013 0f01 	tst.w	r3, #1
    1714:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1718:	bf08      	it	eq
    171a:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    171e:	2000      	movs	r0, #0
    1720:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1724:	f7ff fbaa 	bl	e7c <_arch_irq_enable>
	m16src_grd = 0;
    1728:	2300      	movs	r3, #0
    172a:	702b      	strb	r3, [r5, #0]
    172c:	e7c4      	b.n	16b8 <_m16src_start+0x1c>
			__WFE();
    172e:	bf20      	wfe
			__SEV();
    1730:	bf40      	sev
			__WFE();
    1732:	bf20      	wfe
    1734:	e7e5      	b.n	1702 <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1736:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    173a:	6026      	str	r6, [r4, #0]
    173c:	e7f4      	b.n	1728 <_m16src_start+0x8c>
    173e:	bf00      	nop
    1740:	20000042 	.word	0x20000042
    1744:	20000041 	.word	0x20000041
    1748:	e000e100 	.word	0xe000e100

0000174c <_k32src_start>:
{
    174c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    174e:	4606      	mov	r6, r0
    1750:	460c      	mov	r4, r1
	__asm__ volatile(
    1752:	f04f 0220 	mov.w	r2, #32
    1756:	f3ef 8311 	mrs	r3, BASEPRI
    175a:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    175e:	4a2c      	ldr	r2, [pc, #176]	; (1810 <_k32src_start+0xc4>)
    1760:	7815      	ldrb	r5, [r2, #0]
    1762:	b165      	cbz	r5, 177e <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1764:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    1768:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    176c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    1770:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    1774:	bf0c      	ite	eq
    1776:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    177a:	2000      	movne	r0, #0
    177c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    177e:	2701      	movs	r7, #1
    1780:	7017      	strb	r7, [r2, #0]
    1782:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    1786:	4628      	mov	r0, r5
    1788:	f7ff fb88 	bl	e9c <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    178c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    1790:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1792:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    1796:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    179a:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    179e:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    17a2:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    17a4:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    17a8:	b371      	cbz	r1, 1808 <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    17aa:	0792      	lsls	r2, r2, #30
    17ac:	4f19      	ldr	r7, [pc, #100]	; (1814 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    17ae:	bf58      	it	pl
    17b0:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    17b2:	f04f 0100 	mov.w	r1, #0
    17b6:	f04f 0501 	mov.w	r5, #1
    17ba:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    17be:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    17c2:	bf58      	it	pl
    17c4:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    17c8:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    17cc:	f7ff fb56 	bl	e7c <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    17d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    17d4:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    17d6:	2218      	movs	r2, #24
    17d8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    17dc:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    17e0:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    17e4:	f014 0103 	ands.w	r1, r4, #3
    17e8:	d1be      	bne.n	1768 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    17ea:	2010      	movs	r0, #16
    17ec:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    17f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    17f4:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    17f6:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    17fa:	f7ff ff4f 	bl	169c <_m16src_start>
		if (!err) {
    17fe:	2800      	cmp	r0, #0
    1800:	d1b2      	bne.n	1768 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1802:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    1806:	e7af      	b.n	1768 <_k32src_start+0x1c>
		__WFE();
    1808:	bf20      	wfe
		__SEV();
    180a:	bf40      	sev
		__WFE();
    180c:	bf20      	wfe
    180e:	e7c9      	b.n	17a4 <_k32src_start+0x58>
    1810:	20000040 	.word	0x20000040
    1814:	e000e100 	.word	0xe000e100

00001818 <_power_clock_isr>:
{
    1818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    181a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    181e:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1820:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1824:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1828:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    182c:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    1830:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1834:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1838:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    183c:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    1840:	f1be 0f00 	cmp.w	lr, #0
    1844:	d003      	beq.n	184e <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    1846:	f04f 0e00 	mov.w	lr, #0
    184a:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    184e:	b127      	cbz	r7, 185a <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1850:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1854:	2700      	movs	r7, #0
    1856:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    185a:	b13a      	cbz	r2, 186c <_power_clock_isr+0x54>
    185c:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    185e:	bf41      	itttt	mi
    1860:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    1864:	2201      	movmi	r2, #1
    1866:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    186a:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    186c:	b120      	cbz	r0, 1878 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    186e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1872:	2200      	movs	r2, #0
    1874:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    1878:	b149      	cbz	r1, 188e <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    187a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    187e:	2100      	movs	r1, #0
    1880:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    1884:	4628      	mov	r0, r5
    1886:	f7ff fecf 	bl	1628 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    188a:	2301      	movs	r3, #1
    188c:	6163      	str	r3, [r4, #20]
	if (ctto) {
    188e:	b176      	cbz	r6, 18ae <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    1890:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1894:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1896:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    1898:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    189c:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    189e:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    18a2:	f7ff fefb 	bl	169c <_m16src_start>
		if (!err) {
    18a6:	b910      	cbnz	r0, 18ae <_power_clock_isr+0x96>
    18a8:	4b01      	ldr	r3, [pc, #4]	; (18b0 <_power_clock_isr+0x98>)
    18aa:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    18ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18b0:	e000e100 	.word	0xe000e100

000018b4 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    18b4:	6803      	ldr	r3, [r0, #0]
    18b6:	68db      	ldr	r3, [r3, #12]
    18b8:	689a      	ldr	r2, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
    18ba:	6883      	ldr	r3, [r0, #8]
{
    18bc:	b510      	push	{r4, lr}
		if ((data->gpiote_chan_mask & BIT(i)) &&
    18be:	68dc      	ldr	r4, [r3, #12]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    18c0:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
    18c2:	fa24 f300 	lsr.w	r3, r4, r0
    18c6:	07db      	lsls	r3, r3, #31
    18c8:	d507      	bpl.n	18da <gpiote_find_channel+0x26>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    18ca:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    18ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    18d2:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    18d6:	428b      	cmp	r3, r1
    18d8:	d004      	beq.n	18e4 <gpiote_find_channel+0x30>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    18da:	3001      	adds	r0, #1
    18dc:	2808      	cmp	r0, #8
    18de:	d1f0      	bne.n	18c2 <gpiote_find_channel+0xe>
			return i;
		}
	}

	return -ENODEV;
    18e0:	f06f 0012 	mvn.w	r0, #18
}
    18e4:	bd10      	pop	{r4, pc}

000018e6 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    18e6:	6800      	ldr	r0, [r0, #0]
    18e8:	68c0      	ldr	r0, [r0, #12]
    18ea:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    18ec:	b941      	cbnz	r1, 1900 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
    18ee:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    18f2:	fa21 f202 	lsr.w	r2, r1, r2
    18f6:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
    18fa:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    18fc:	2000      	movs	r0, #0
    18fe:	4770      	bx	lr
		*value = gpio->IN;
    1900:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    1904:	e7f9      	b.n	18fa <gpio_nrf5_read+0x14>

00001906 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    1906:	6800      	ldr	r0, [r0, #0]
    1908:	68c0      	ldr	r0, [r0, #12]
    190a:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    190c:	b949      	cbnz	r1, 1922 <gpio_nrf5_write+0x1c>
    190e:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
    1910:	4091      	lsls	r1, r2
		if (value) { /* 1 */
    1912:	b11b      	cbz	r3, 191c <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
    1914:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
    1918:	2000      	movs	r0, #0
    191a:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
    191c:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
    1920:	e7fa      	b.n	1918 <gpio_nrf5_write+0x12>
		gpio->OUT = value;
    1922:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    1926:	e7f7      	b.n	1918 <gpio_nrf5_write+0x12>

00001928 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    1928:	b510      	push	{r4, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    192a:	6883      	ldr	r3, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    192c:	b13a      	cbz	r2, 193e <gpio_nrf5_manage_callback+0x16>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    192e:	681a      	ldr	r2, [r3, #0]
    1930:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
    1932:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    1934:	6019      	str	r1, [r3, #0]
	if (!list->tail) {
    1936:	b902      	cbnz	r2, 193a <gpio_nrf5_manage_callback+0x12>
		list->tail = list->head;
    1938:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    193a:	2000      	movs	r0, #0
    193c:	bd10      	pop	{r4, pc}
    193e:	6818      	ldr	r0, [r3, #0]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    1940:	2800      	cmp	r0, #0
    1942:	d0fa      	beq.n	193a <gpio_nrf5_manage_callback+0x12>
		if (test == node) {
    1944:	4281      	cmp	r1, r0
    1946:	d10e      	bne.n	1966 <gpio_nrf5_manage_callback+0x3e>
    1948:	685c      	ldr	r4, [r3, #4]
    194a:	6808      	ldr	r0, [r1, #0]
	if (!prev_node) {
    194c:	b932      	cbnz	r2, 195c <gpio_nrf5_manage_callback+0x34>
		if (list->tail == node) {
    194e:	42a1      	cmp	r1, r4
		list->head = node->next;
    1950:	6018      	str	r0, [r3, #0]
		if (list->tail == node) {
    1952:	d100      	bne.n	1956 <gpio_nrf5_manage_callback+0x2e>
			list->tail = list->head;
    1954:	6058      	str	r0, [r3, #4]
	node->next = NULL;
    1956:	2300      	movs	r3, #0
    1958:	600b      	str	r3, [r1, #0]
    195a:	e7ee      	b.n	193a <gpio_nrf5_manage_callback+0x12>
		if (list->tail == node) {
    195c:	42a1      	cmp	r1, r4
		prev_node->next = node->next;
    195e:	6010      	str	r0, [r2, #0]
			list->tail = prev_node;
    1960:	bf08      	it	eq
    1962:	605a      	streq	r2, [r3, #4]
    1964:	e7f7      	b.n	1956 <gpio_nrf5_manage_callback+0x2e>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    1966:	4602      	mov	r2, r0
    1968:	6800      	ldr	r0, [r0, #0]
    196a:	e7e9      	b.n	1940 <gpio_nrf5_manage_callback+0x18>

0000196c <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    196c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    196e:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1970:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1972:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1974:	68d2      	ldr	r2, [r2, #12]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1976:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1978:	6896      	ldr	r6, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    197a:	b9a1      	cbnz	r1, 19a6 <gpio_nrf5_enable_callback+0x3a>

		i = gpiote_find_channel(dev, pin);
    197c:	4621      	mov	r1, r4
    197e:	f7ff ff99 	bl	18b4 <gpiote_find_channel>
		if (i < 0) {
    1982:	2800      	cmp	r0, #0
    1984:	db11      	blt.n	19aa <gpio_nrf5_enable_callback+0x3e>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    1986:	68ba      	ldr	r2, [r7, #8]
    1988:	2301      	movs	r3, #1
    198a:	fa03 f404 	lsl.w	r4, r3, r4
    198e:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    1990:	f100 0240 	add.w	r2, r0, #64	; 0x40
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    1994:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables |= BIT(pin);
    1998:	60bc      	str	r4, [r7, #8]
		gpiote->EVENTS_IN[i] = 0;
    199a:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
		gpiote->INTENSET = BIT(i);
    199e:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    19a2:	4628      	mov	r0, r5
    19a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    19a6:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    19aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000019ac <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    19ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19ae:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    19b0:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    19b2:	6886      	ldr	r6, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    19b4:	68d2      	ldr	r2, [r2, #12]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    19b6:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    19b8:	6897      	ldr	r7, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    19ba:	b989      	cbnz	r1, 19e0 <gpio_nrf5_disable_callback+0x34>
		i = gpiote_find_channel(dev, pin);
    19bc:	4621      	mov	r1, r4
    19be:	f7ff ff79 	bl	18b4 <gpiote_find_channel>
		if (i < 0) {
    19c2:	2800      	cmp	r0, #0
    19c4:	db0e      	blt.n	19e4 <gpio_nrf5_disable_callback+0x38>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    19c6:	68b2      	ldr	r2, [r6, #8]
    19c8:	2301      	movs	r3, #1
    19ca:	fa03 f404 	lsl.w	r4, r3, r4
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    19ce:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
    19d2:	ea22 0404 	bic.w	r4, r2, r4
    19d6:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
    19d8:	f8c7 0308 	str.w	r0, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    19dc:	4628      	mov	r0, r5
    19de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    19e0:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    19e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000019e6 <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    19e6:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    19e8:	2200      	movs	r2, #0
    19ea:	2101      	movs	r1, #1
    19ec:	2006      	movs	r0, #6
    19ee:	f7ff fa77 	bl	ee0 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    19f2:	2006      	movs	r0, #6
    19f4:	f7ff fa42 	bl	e7c <_arch_irq_enable>

	return 0;
}
    19f8:	2000      	movs	r0, #0
    19fa:	bd08      	pop	{r3, pc}

000019fc <gpio_nrf5_port_isr>:
{
    19fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    19fe:	6803      	ldr	r3, [r0, #0]
{
    1a00:	4606      	mov	r6, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1a02:	68db      	ldr	r3, [r3, #12]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1a04:	68b4      	ldr	r4, [r6, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1a06:	6898      	ldr	r0, [r3, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    1a08:	2200      	movs	r2, #0
	u32_t enabled_int, int_status = 0;
    1a0a:	4613      	mov	r3, r2
			gpiote->EVENTS_IN[i] = 0;
    1a0c:	4615      	mov	r5, r2
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    1a0e:	2701      	movs	r7, #1
    1a10:	eb00 0182 	add.w	r1, r0, r2, lsl #2
		if (gpiote->EVENTS_IN[i]) {
    1a14:	f8d1 e100 	ldr.w	lr, [r1, #256]	; 0x100
    1a18:	f1be 0f00 	cmp.w	lr, #0
    1a1c:	d008      	beq.n	1a30 <gpio_nrf5_port_isr+0x34>
			gpiote->EVENTS_IN[i] = 0;
    1a1e:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    1a22:	f8d1 1510 	ldr.w	r1, [r1, #1296]	; 0x510
    1a26:	f3c1 2104 	ubfx	r1, r1, #8, #5
    1a2a:	fa07 f101 	lsl.w	r1, r7, r1
    1a2e:	430b      	orrs	r3, r1
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    1a30:	3201      	adds	r2, #1
    1a32:	2a08      	cmp	r2, #8
    1a34:	d1ec      	bne.n	1a10 <gpio_nrf5_port_isr+0x14>
	enabled_int = int_status & data->pin_callback_enables;
    1a36:	68a5      	ldr	r5, [r4, #8]
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    1a38:	2006      	movs	r0, #6
	enabled_int = int_status & data->pin_callback_enables;
    1a3a:	401d      	ands	r5, r3
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    1a3c:	f7ff fa2e 	bl	e9c <_arch_irq_disable>
    1a40:	6824      	ldr	r4, [r4, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    1a42:	b924      	cbnz	r4, 1a4e <gpio_nrf5_port_isr+0x52>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    1a44:	2006      	movs	r0, #6
}
    1a46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    1a4a:	f7ff ba17 	b.w	e7c <_arch_irq_enable>
		if (cb->pin_mask & pins) {
    1a4e:	68a3      	ldr	r3, [r4, #8]
    1a50:	421d      	tst	r5, r3
    1a52:	d0f5      	beq.n	1a40 <gpio_nrf5_port_isr+0x44>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    1a54:	6863      	ldr	r3, [r4, #4]
    1a56:	462a      	mov	r2, r5
    1a58:	4621      	mov	r1, r4
    1a5a:	4630      	mov	r0, r6
    1a5c:	4798      	blx	r3
    1a5e:	e7ef      	b.n	1a40 <gpio_nrf5_port_isr+0x44>

00001a60 <gpio_nrf5_config>:
{
    1a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1a64:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1a66:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1a68:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1a6a:	68d2      	ldr	r2, [r2, #12]
{
    1a6c:	4680      	mov	r8, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1a6e:	6895      	ldr	r5, [r2, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    1a70:	6810      	ldr	r0, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    1a72:	b119      	cbz	r1, 1a7c <gpio_nrf5_config+0x1c>
		return -ENOTSUP;
    1a74:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    1a7c:	f403 7240 	and.w	r2, r3, #768	; 0x300
    1a80:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    1a84:	f3c3 3101 	ubfx	r1, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    1a88:	f3c3 3981 	ubfx	r9, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    1a8c:	f403 3e40 	and.w	lr, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    1a90:	d056      	beq.n	1b40 <gpio_nrf5_config+0xe0>
		u8_t pull = GPIO_PULL_DISABLE;
    1a92:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    1a96:	bf0c      	ite	eq
    1a98:	2204      	moveq	r2, #4
    1a9a:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
    1a9c:	f5be 3f80 	cmp.w	lr, #65536	; 0x10000
    1aa0:	bf08      	it	eq
    1aa2:	f04f 0e00 	moveq.w	lr, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    1aa6:	f013 0f01 	tst.w	r3, #1
    1aaa:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 1b74 <gpio_nrf5_config+0x114>
    1aae:	ea4f 0181 	mov.w	r1, r1, lsl #2
    1ab2:	f504 76e0 	add.w	r6, r4, #448	; 0x1c0
    1ab6:	d04e      	beq.n	1b56 <gpio_nrf5_config+0xf6>
			if (pull == GPIO_PULL_UP) {
    1ab8:	2a0c      	cmp	r2, #12
    1aba:	d143      	bne.n	1b44 <gpio_nrf5_config+0xe4>
				gpio->OUTSET = BIT(pin);
    1abc:	f04f 0e01 	mov.w	lr, #1
    1ac0:	fa0e fe04 	lsl.w	lr, lr, r4
    1ac4:	f8c0 e508 	str.w	lr, [r0, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
    1ac8:	4449      	add	r1, r9
					      GPIO_INPUT_DISCONNECT |
    1aca:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    1ace:	f041 0103 	orr.w	r1, r1, #3
    1ad2:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
    1ad4:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
	if (flags & GPIO_INT) {
    1ad8:	f013 0002 	ands.w	r0, r3, #2
    1adc:	d047      	beq.n	1b6e <gpio_nrf5_config+0x10e>
		if (flags & GPIO_INT_EDGE) {
    1ade:	0699      	lsls	r1, r3, #26
    1ae0:	d5c8      	bpl.n	1a74 <gpio_nrf5_config+0x14>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    1ae2:	065a      	lsls	r2, r3, #25
    1ae4:	d43e      	bmi.n	1b64 <gpio_nrf5_config+0x104>
				config |= GPIOTE_CFG_POL_H2L;
    1ae6:	f013 0f04 	tst.w	r3, #4
    1aea:	bf14      	ite	ne
    1aec:	f44f 3680 	movne.w	r6, #65536	; 0x10000
    1af0:	f44f 3600 	moveq.w	r6, #131072	; 0x20000
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    1af4:	68f8      	ldr	r0, [r7, #12]
    1af6:	f7fe fba5 	bl	244 <__popcountsi2>
    1afa:	2808      	cmp	r0, #8
    1afc:	d035      	beq.n	1b6a <gpio_nrf5_config+0x10a>
		int i = gpiote_find_channel(dev, pin);
    1afe:	4621      	mov	r1, r4
    1b00:	4640      	mov	r0, r8
    1b02:	f7ff fed7 	bl	18b4 <gpiote_find_channel>
		if (i < 0) {
    1b06:	2800      	cmp	r0, #0
    1b08:	68fb      	ldr	r3, [r7, #12]
    1b0a:	da08      	bge.n	1b1e <gpio_nrf5_config+0xbe>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    1b0c:	43da      	mvns	r2, r3
    1b0e:	fa92 f0a2 	rbit	r0, r2
    1b12:	2a00      	cmp	r2, #0
    1b14:	fab0 f080 	clz	r0, r0
    1b18:	bf08      	it	eq
    1b1a:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		config |= GPIOTE_CFG_PIN(pin);
    1b1e:	0224      	lsls	r4, r4, #8
		data->gpiote_chan_mask |= BIT(i);
    1b20:	2201      	movs	r2, #1
		config |= GPIOTE_CFG_PIN(pin);
    1b22:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		data->gpiote_chan_mask |= BIT(i);
    1b26:	4082      	lsls	r2, r0
		config |= GPIOTE_CFG_PIN(pin);
    1b28:	f044 0401 	orr.w	r4, r4, #1
		gpiote->CONFIG[i] = config;
    1b2c:	f500 70a2 	add.w	r0, r0, #324	; 0x144
		data->gpiote_chan_mask |= BIT(i);
    1b30:	4313      	orrs	r3, r2
		config |= GPIOTE_CFG_PIN(pin);
    1b32:	4334      	orrs	r4, r6
		data->gpiote_chan_mask |= BIT(i);
    1b34:	60fb      	str	r3, [r7, #12]
		gpiote->CONFIG[i] = config;
    1b36:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
	return 0;
    1b3a:	2000      	movs	r0, #0
    1b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pull = GPIO_PULL_UP;
    1b40:	220c      	movs	r2, #12
    1b42:	e7ab      	b.n	1a9c <gpio_nrf5_config+0x3c>
			} else if (pull == GPIO_PULL_DOWN) {
    1b44:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
    1b46:	bf02      	ittt	eq
    1b48:	f04f 0e01 	moveq.w	lr, #1
    1b4c:	fa0e fe04 	lsleq.w	lr, lr, r4
    1b50:	f8c0 e50c 	streq.w	lr, [r0, #1292]	; 0x50c
    1b54:	e7b8      	b.n	1ac8 <gpio_nrf5_config+0x68>
					      drive_strength[ds_low][ds_high] |
    1b56:	4449      	add	r1, r9
    1b58:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    1b5c:	430a      	orrs	r2, r1
    1b5e:	ea42 020e 	orr.w	r2, r2, lr
    1b62:	e7b7      	b.n	1ad4 <gpio_nrf5_config+0x74>
				config |= GPIOTE_CFG_POL_TOGG;
    1b64:	f44f 3640 	mov.w	r6, #196608	; 0x30000
    1b68:	e7c4      	b.n	1af4 <gpio_nrf5_config+0x94>
			return -EIO;
    1b6a:	f06f 0004 	mvn.w	r0, #4
}
    1b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1b72:	bf00      	nop
    1b74:	0000c5bc 	.word	0x0000c5bc

00001b78 <nrf_gpiote_interrupt_enable>:
    return ((uint32_t)NRF_GPIOTE + event);
}

__STATIC_INLINE void nrf_gpiote_int_enable(uint32_t mask)
{
    NRF_GPIOTE->INTENSET = mask;
    1b78:	4b01      	ldr	r3, [pc, #4]	; (1b80 <nrf_gpiote_interrupt_enable+0x8>)
    1b7a:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    1b7e:	4770      	bx	lr
    1b80:	40006000 	.word	0x40006000

00001b84 <nrf_gpiote_clear_port_event>:
	NRF_GPIOTE->EVENTS_PORT = 0;
    1b84:	4b02      	ldr	r3, [pc, #8]	; (1b90 <nrf_gpiote_clear_port_event+0xc>)
    1b86:	2200      	movs	r2, #0
    1b88:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    1b8c:	4770      	bx	lr
    1b8e:	bf00      	nop
    1b90:	40006000 	.word	0x40006000

00001b94 <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1b94:	6803      	ldr	r3, [r0, #0]
    1b96:	68db      	ldr	r3, [r3, #12]
    1b98:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    1b9a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    1b9e:	b132      	cbz	r2, 1bae <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    1ba0:	2000      	movs	r0, #0
    1ba2:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    1ba6:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    1baa:	700b      	strb	r3, [r1, #0]

	return 0;
    1bac:	4770      	bx	lr
		return -1;
    1bae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1bb2:	4770      	bx	lr

00001bb4 <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1bb4:	6803      	ldr	r3, [r0, #0]
    1bb6:	68db      	ldr	r3, [r3, #12]
    1bb8:	681b      	ldr	r3, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    1bba:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    1bbe:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
    1bc2:	2a00      	cmp	r2, #0
    1bc4:	d0fb      	beq.n	1bbe <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    1bc6:	2200      	movs	r2, #0
    1bc8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	return c;
}
    1bcc:	4608      	mov	r0, r1
    1bce:	4770      	bx	lr

00001bd0 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1bd0:	6803      	ldr	r3, [r0, #0]
    1bd2:	68db      	ldr	r3, [r3, #12]
    1bd4:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    1bd6:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
    1bda:	b118      	cbz	r0, 1be4 <uart_nrf5_err_check+0x14>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    1bdc:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    1be0:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    1be4:	f000 000f 	and.w	r0, r0, #15
    1be8:	4770      	bx	lr
	...

00001bec <uart_nrf5_init>:
{
    1bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
    1bee:	6803      	ldr	r3, [r0, #0]
    1bf0:	68db      	ldr	r3, [r3, #12]
{
    1bf2:	4605      	mov	r5, r0
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    1bf4:	4818      	ldr	r0, [pc, #96]	; (1c58 <uart_nrf5_init+0x6c>)
	volatile struct _uart *uart = UART_STRUCT(dev);
    1bf6:	681c      	ldr	r4, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    1bf8:	f008 ffae 	bl	ab58 <device_get_binding>
static inline int _impl_gpio_config(struct device *port, int access_op,
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, access_op, pin, flags);
    1bfc:	6843      	ldr	r3, [r0, #4]
    1bfe:	4606      	mov	r6, r0
    1c00:	681f      	ldr	r7, [r3, #0]
    1c02:	2206      	movs	r2, #6
    1c04:	f240 1301 	movw	r3, #257	; 0x101
    1c08:	2100      	movs	r1, #0
    1c0a:	47b8      	blx	r7
    1c0c:	6873      	ldr	r3, [r6, #4]
    1c0e:	681f      	ldr	r7, [r3, #0]
    1c10:	2300      	movs	r3, #0
    1c12:	4619      	mov	r1, r3
    1c14:	2208      	movs	r2, #8
    1c16:	4630      	mov	r0, r6
    1c18:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    1c1a:	2306      	movs	r3, #6
    1c1c:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    1c20:	2308      	movs	r3, #8
    1c22:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    1c26:	68ab      	ldr	r3, [r5, #8]
    1c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    1c2c:	601a      	str	r2, [r3, #0]
	volatile struct _uart *uart = UART_STRUCT(dev);
    1c2e:	682b      	ldr	r3, [r5, #0]
    1c30:	68db      	ldr	r3, [r3, #12]
    1c32:	681b      	ldr	r3, [r3, #0]
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    1c34:	f04f 72eb 	mov.w	r2, #30801920	; 0x1d60000
    1c38:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    1c3c:	2304      	movs	r3, #4
    1c3e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    1c42:	2000      	movs	r0, #0
	uart->TASKS_STARTTX = 1;
    1c44:	2301      	movs	r3, #1
	uart->EVENTS_TXDRDY = 0;
    1c46:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    1c4a:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    1c4e:	60a3      	str	r3, [r4, #8]
	uart->TASKS_STARTRX = 1;
    1c50:	6023      	str	r3, [r4, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    1c52:	4b02      	ldr	r3, [pc, #8]	; (1c5c <uart_nrf5_init+0x70>)
    1c54:	606b      	str	r3, [r5, #4]
}
    1c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c58:	0000c109 	.word	0x0000c109
    1c5c:	0000c62c 	.word	0x0000c62c

00001c60 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
    1c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
    1c64:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
    1c66:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
    1c68:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
    1c6a:	42a3      	cmp	r3, r4
	d = &rand[octets];
    1c6c:	440a      	add	r2, r1
	s = &rng->rand[first];
    1c6e:	4406      	add	r6, r0
	if (first <= last) {
    1c70:	d81f      	bhi.n	1cb2 <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
    1c72:	1ae4      	subs	r4, r4, r3
    1c74:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    1c76:	42a1      	cmp	r1, r4
			remaining = avail - octets;
    1c78:	bf3e      	ittt	cc
    1c7a:	1a64      	subcc	r4, r4, r1
    1c7c:	b2e7      	uxtbcc	r7, r4
    1c7e:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
    1c80:	4423      	add	r3, r4
		octets -= avail;
    1c82:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
    1c86:	bf28      	it	cs
    1c88:	2700      	movcs	r7, #0
		first += avail;
    1c8a:	b2db      	uxtb	r3, r3
		octets -= avail;
    1c8c:	b2c9      	uxtb	r1, r1
    1c8e:	4434      	add	r4, r6

		while (avail--) {
    1c90:	42a6      	cmp	r6, r4
    1c92:	d109      	bne.n	1ca8 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
    1c94:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
    1c96:	7843      	ldrb	r3, [r0, #1]
    1c98:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
    1c9a:	bf82      	ittt	hi
    1c9c:	4b20      	ldrhi	r3, [pc, #128]	; (1d20 <get+0xc0>)
    1c9e:	2201      	movhi	r2, #1
    1ca0:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
    1ca2:	4608      	mov	r0, r1
    1ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
    1ca8:	f816 5b01 	ldrb.w	r5, [r6], #1
    1cac:	f802 5d01 	strb.w	r5, [r2, #-1]!
    1cb0:	e7ee      	b.n	1c90 <get+0x30>
		avail = rng->count - first;
    1cb2:	7805      	ldrb	r5, [r0, #0]
    1cb4:	1aed      	subs	r5, r5, r3
    1cb6:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
    1cb8:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
    1cba:	bf3f      	itttt	cc
    1cbc:	1a67      	subcc	r7, r4, r1
    1cbe:	19ed      	addcc	r5, r5, r7
    1cc0:	b2ef      	uxtbcc	r7, r5
    1cc2:	460d      	movcc	r5, r1
			first += avail;
    1cc4:	bf38      	it	cc
    1cc6:	185b      	addcc	r3, r3, r1
		octets -= avail;
    1cc8:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
    1ccc:	bf32      	itee	cc
    1cce:	b2db      	uxtbcc	r3, r3
    1cd0:	4627      	movcs	r7, r4
			first = 0;
    1cd2:	2300      	movcs	r3, #0
		octets -= avail;
    1cd4:	b2c9      	uxtb	r1, r1
    1cd6:	4696      	mov	lr, r2
    1cd8:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
    1cdc:	4566      	cmp	r6, ip
    1cde:	d119      	bne.n	1d14 <get+0xb4>
    1ce0:	1b52      	subs	r2, r2, r5
		if (octets && last) {
    1ce2:	2900      	cmp	r1, #0
    1ce4:	d0d6      	beq.n	1c94 <get+0x34>
    1ce6:	2c00      	cmp	r4, #0
    1ce8:	d0d4      	beq.n	1c94 <get+0x34>
			if (octets < last) {
    1cea:	428c      	cmp	r4, r1
    1cec:	bf8a      	itet	hi
    1cee:	460b      	movhi	r3, r1
    1cf0:	4623      	movls	r3, r4
				remaining = last - octets;
    1cf2:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
    1cf4:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
    1cf8:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
    1cfc:	bf8c      	ite	hi
    1cfe:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
    1d00:	2700      	movls	r7, #0
			octets -= last;
    1d02:	b2c9      	uxtb	r1, r1
    1d04:	18f4      	adds	r4, r6, r3
			while (last--) {
    1d06:	42a6      	cmp	r6, r4
    1d08:	d0c4      	beq.n	1c94 <get+0x34>
				*(--d) = *s++;
    1d0a:	f816 5b01 	ldrb.w	r5, [r6], #1
    1d0e:	f802 5d01 	strb.w	r5, [r2, #-1]!
    1d12:	e7f8      	b.n	1d06 <get+0xa6>
			*(--d) = *s++;
    1d14:	f816 8b01 	ldrb.w	r8, [r6], #1
    1d18:	f80e 8d01 	strb.w	r8, [lr, #-1]!
    1d1c:	e7de      	b.n	1cdc <get+0x7c>
    1d1e:	bf00      	nop
    1d20:	4000d000 	.word	0x4000d000

00001d24 <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
    1d24:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
    1d26:	b1d0      	cbz	r0, 1d5e <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
    1d28:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
    1d2a:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
    1d2c:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
    1d2e:	1c53      	adds	r3, r2, #1
    1d30:	b2db      	uxtb	r3, r3
		last = 0;
    1d32:	42ab      	cmp	r3, r5
    1d34:	bf08      	it	eq
    1d36:	2300      	moveq	r3, #0
	if (last == rng->first) {
    1d38:	42a3      	cmp	r3, r4
    1d3a:	d010      	beq.n	1d5e <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    1d3c:	b161      	cbz	r1, 1d58 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    1d3e:	490a      	ldr	r1, [pc, #40]	; (1d68 <isr+0x44>)
    1d40:	4402      	add	r2, r0
    1d42:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    1d46:	7111      	strb	r1, [r2, #4]
	rng->last = last;
    1d48:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
    1d4a:	3301      	adds	r3, #1
    1d4c:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
    1d4e:	429d      	cmp	r5, r3
    1d50:	bf08      	it	eq
    1d52:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
    1d54:	42a3      	cmp	r3, r4
    1d56:	d005      	beq.n	1d64 <isr+0x40>
		return 0;
	}

	return -EBUSY;
    1d58:	f06f 000f 	mvn.w	r0, #15
    1d5c:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
    1d5e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    1d62:	bd30      	pop	{r4, r5, pc}
		return 0;
    1d64:	2000      	movs	r0, #0
}
    1d66:	bd30      	pop	{r4, r5, pc}
    1d68:	4000d000 	.word	0x4000d000

00001d6c <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
    1d6c:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1d6e:	6884      	ldr	r4, [r0, #8]

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    1d70:	2201      	movs	r2, #1
    1d72:	4611      	mov	r1, r2
    1d74:	4620      	mov	r0, r4
    1d76:	f009 fb43 	bl	b400 <_impl_k_sem_init>
    1d7a:	f104 0018 	add.w	r0, r4, #24
    1d7e:	2201      	movs	r2, #1
    1d80:	2100      	movs	r1, #0
    1d82:	f009 fb3d 	bl	b400 <_impl_k_sem_init>
	rng->threshold = threshold;
    1d86:	2304      	movs	r3, #4
    1d88:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    1d8c:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
    1d8e:	2500      	movs	r5, #0
	rng->threshold = threshold;
    1d90:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
    1d94:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    1d96:	4b11      	ldr	r3, [pc, #68]	; (1ddc <entropy_nrf5_init+0x70>)
	rng->count = len;
    1d98:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    1d9c:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
    1d9e:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
    1da2:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
    1da6:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
    1daa:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
    1dae:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    1db2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    1db6:	f042 0201 	orr.w	r2, r2, #1
    1dba:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    1dbe:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
    1dc0:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    1dc4:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    1dc6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
    1dca:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    1dcc:	462a      	mov	r2, r5
    1dce:	f7ff f887 	bl	ee0 <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
    1dd2:	4630      	mov	r0, r6
    1dd4:	f7ff f852 	bl	e7c <_arch_irq_enable>

	return 0;
}
    1dd8:	4628      	mov	r0, r5
    1dda:	bd70      	pop	{r4, r5, r6, pc}
    1ddc:	4000d000 	.word	0x4000d000

00001de0 <isr_rand>:
{
    1de0:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
    1de2:	4b12      	ldr	r3, [pc, #72]	; (1e2c <isr_rand+0x4c>)
    1de4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    1de8:	b1fb      	cbz	r3, 1e2a <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1dea:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
    1dec:	2101      	movs	r1, #1
    1dee:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    1df2:	f7ff ff97 	bl	1d24 <isr>
		if (ret != -EBUSY) {
    1df6:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
    1dfa:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
    1dfc:	d00d      	beq.n	1e1a <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
    1dfe:	f110 0437 	adds.w	r4, r0, #55	; 0x37
    1e02:	bf14      	ite	ne
    1e04:	2100      	movne	r1, #0
    1e06:	2101      	moveq	r1, #1
    1e08:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1e0c:	f7ff ff8a 	bl	1d24 <isr>
    1e10:	4604      	mov	r4, r0

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1e12:	f105 0018 	add.w	r0, r5, #24
    1e16:	f009 fafd 	bl	b414 <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
    1e1a:	4b04      	ldr	r3, [pc, #16]	; (1e2c <isr_rand+0x4c>)
    1e1c:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
    1e1e:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
    1e20:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
    1e24:	bf1c      	itt	ne
    1e26:	2201      	movne	r2, #1
    1e28:	605a      	strne	r2, [r3, #4]
    1e2a:	bd38      	pop	{r3, r4, r5, pc}
    1e2c:	4000d000 	.word	0x4000d000

00001e30 <entropy_nrf5_get_entropy>:
{
    1e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1e34:	6885      	ldr	r5, [r0, #8]
{
    1e36:	460f      	mov	r7, r1
    1e38:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
    1e3a:	f105 0818 	add.w	r8, r5, #24
	while (len) {
    1e3e:	b914      	cbnz	r4, 1e46 <entropy_nrf5_get_entropy+0x16>
}
    1e40:	4620      	mov	r0, r4
    1e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1e46:	2cff      	cmp	r4, #255	; 0xff
    1e48:	4623      	mov	r3, r4
    1e4a:	bf28      	it	cs
    1e4c:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
    1e4e:	1ae4      	subs	r4, r4, r3
    1e50:	b2de      	uxtb	r6, r3
    1e52:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
    1e54:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1e58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1e5c:	4628      	mov	r0, r5
    1e5e:	f009 fb39 	bl	b4d4 <_impl_k_sem_take>
    1e62:	4631      	mov	r1, r6
    1e64:	463a      	mov	r2, r7
    1e66:	4648      	mov	r0, r9
    1e68:	f7ff fefa 	bl	1c60 <get>
    1e6c:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1e6e:	4628      	mov	r0, r5
    1e70:	f009 fad0 	bl	b414 <_impl_k_sem_give>
			if (len8) {
    1e74:	2e00      	cmp	r6, #0
    1e76:	d0e2      	beq.n	1e3e <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1e78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1e7c:	4640      	mov	r0, r8
    1e7e:	f009 fb29 	bl	b4d4 <_impl_k_sem_take>
    1e82:	e7e9      	b.n	1e58 <entropy_nrf5_get_entropy+0x28>

00001e84 <entropy_get_entropy_isr>:

u8_t entropy_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
    1e84:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
    1e86:	4802      	ldr	r0, [pc, #8]	; (1e90 <entropy_get_entropy_isr+0xc>)
    1e88:	460a      	mov	r2, r1
    1e8a:	4619      	mov	r1, r3
    1e8c:	f7ff bee8 	b.w	1c60 <get>
    1e90:	20000090 	.word	0x20000090

00001e94 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1e94:	4b08      	ldr	r3, [pc, #32]	; (1eb8 <rtc_compare_set+0x24>)
    1e96:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    1e9a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    1e9e:	1ac0      	subs	r0, r0, r3
    1ea0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1ea4:	4b05      	ldr	r3, [pc, #20]	; (1ebc <rtc_compare_set+0x28>)
    1ea6:	3802      	subs	r0, #2
    1ea8:	4298      	cmp	r0, r3
    1eaa:	bf82      	ittt	hi
    1eac:	4b04      	ldrhi	r3, [pc, #16]	; (1ec0 <rtc_compare_set+0x2c>)
    1eae:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    1eb2:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    1eb6:	4770      	bx	lr
    1eb8:	40011000 	.word	0x40011000
    1ebc:	007ffffd 	.word	0x007ffffd
    1ec0:	e000e100 	.word	0xe000e100

00001ec4 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1ec4:	b510      	push	{r4, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1ec6:	4b12      	ldr	r3, [pc, #72]	; (1f10 <rtc_announce_set_next+0x4c>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1ec8:	4c12      	ldr	r4, [pc, #72]	; (1f14 <rtc_announce_set_next+0x50>)
	rtc_now = RTC_COUNTER;
    1eca:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1ece:	6822      	ldr	r2, [r4, #0]
    1ed0:	1a80      	subs	r0, r0, r2
    1ed2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    1ed6:	f5b0 7fa3 	cmp.w	r0, #326	; 0x146
    1eda:	d911      	bls.n	1f00 <rtc_announce_set_next+0x3c>
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;

		if (sys_elapsed > expected_sys_ticks) {
    1edc:	490e      	ldr	r1, [pc, #56]	; (1f18 <rtc_announce_set_next+0x54>)
    1ede:	6809      	ldr	r1, [r1, #0]
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    1ee0:	f240 1347 	movw	r3, #327	; 0x147
    1ee4:	fbb0 f0f3 	udiv	r0, r0, r3
    1ee8:	4288      	cmp	r0, r1
    1eea:	bf28      	it	cs
    1eec:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1eee:	fb03 2300 	mla	r3, r3, r0, r2
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    1ef2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1ef6:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1ef8:	4b08      	ldr	r3, [pc, #32]	; (1f1c <rtc_announce_set_next+0x58>)
    1efa:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    1efc:	f009 fb12 	bl	b524 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    1f00:	6820      	ldr	r0, [r4, #0]
}
    1f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    1f06:	f200 1047 	addw	r0, r0, #327	; 0x147
    1f0a:	f7ff bfc3 	b.w	1e94 <rtc_compare_set>
    1f0e:	bf00      	nop
    1f10:	40011000 	.word	0x40011000
    1f14:	200000a8 	.word	0x200000a8
    1f18:	200000a4 	.word	0x200000a4
    1f1c:	20005048 	.word	0x20005048

00001f20 <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    1f20:	4b02      	ldr	r3, [pc, #8]	; (1f2c <rtc1_nrf5_isr+0xc>)
    1f22:	2200      	movs	r2, #0
    1f24:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    1f28:	f7ff bfcc 	b.w	1ec4 <rtc_announce_set_next>
    1f2c:	40011000 	.word	0x40011000

00001f30 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    1f30:	f246 4335 	movw	r3, #25653	; 0x6435
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    1f34:	4298      	cmp	r0, r3
    1f36:	bf28      	it	cs
    1f38:	4618      	movcs	r0, r3
	expected_sys_ticks = sys_ticks;
    1f3a:	4b05      	ldr	r3, [pc, #20]	; (1f50 <_timer_idle_enter+0x20>)
    1f3c:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    1f3e:	4b05      	ldr	r3, [pc, #20]	; (1f54 <_timer_idle_enter+0x24>)
    1f40:	681b      	ldr	r3, [r3, #0]
    1f42:	f240 1247 	movw	r2, #327	; 0x147
    1f46:	fb02 3000 	mla	r0, r2, r0, r3
    1f4a:	f7ff bfa3 	b.w	1e94 <rtc_compare_set>
    1f4e:	bf00      	nop
    1f50:	200000a4 	.word	0x200000a4
    1f54:	200000a8 	.word	0x200000a8

00001f58 <_timer_idle_exit>:
{
    1f58:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    1f5a:	4b07      	ldr	r3, [pc, #28]	; (1f78 <_timer_idle_exit+0x20>)
    1f5c:	2200      	movs	r2, #0
    1f5e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f62:	4b06      	ldr	r3, [pc, #24]	; (1f7c <_timer_idle_exit+0x24>)
    1f64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1f68:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    1f6c:	f7ff ffaa 	bl	1ec4 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1f70:	4b03      	ldr	r3, [pc, #12]	; (1f80 <_timer_idle_exit+0x28>)
    1f72:	2201      	movs	r2, #1
    1f74:	601a      	str	r2, [r3, #0]
    1f76:	bd08      	pop	{r3, pc}
    1f78:	40011000 	.word	0x40011000
    1f7c:	e000e100 	.word	0xe000e100
    1f80:	200000a4 	.word	0x200000a4

00001f84 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1f84:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    1f86:	4818      	ldr	r0, [pc, #96]	; (1fe8 <_sys_clock_driver_init+0x64>)
    1f88:	f008 fde6 	bl	ab58 <device_get_binding>
	if (!clock) {
    1f8c:	b348      	cbz	r0, 1fe2 <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1f8e:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1f90:	4d16      	ldr	r5, [pc, #88]	; (1fec <_sys_clock_driver_init+0x68>)
    1f92:	681b      	ldr	r3, [r3, #0]
    1f94:	2101      	movs	r1, #1
    1f96:	4798      	blx	r3
	rtc_past = 0;
    1f98:	4b15      	ldr	r3, [pc, #84]	; (1ff0 <_sys_clock_driver_init+0x6c>)
    1f9a:	2400      	movs	r4, #0
    1f9c:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    1f9e:	4b15      	ldr	r3, [pc, #84]	; (1ff4 <_sys_clock_driver_init+0x70>)
    1fa0:	2601      	movs	r6, #1
    1fa2:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1fa4:	f240 1347 	movw	r3, #327	; 0x147
	SYS_CLOCK_RTC->PRESCALER = 0;
    1fa8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1fac:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1fb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1fb4:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1fb8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1fbc:	4b0e      	ldr	r3, [pc, #56]	; (1ff8 <_sys_clock_driver_init+0x74>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    1fbe:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1fc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1fc6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    1fca:	4631      	mov	r1, r6
    1fcc:	4622      	mov	r2, r4
    1fce:	2011      	movs	r0, #17
    1fd0:	f7fe ff86 	bl	ee0 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1fd4:	2011      	movs	r0, #17
    1fd6:	f7fe ff51 	bl	e7c <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    1fda:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    1fdc:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    1fde:	602e      	str	r6, [r5, #0]
	return 0;
    1fe0:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1fe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1fe6:	bd70      	pop	{r4, r5, r6, pc}
    1fe8:	0000c110 	.word	0x0000c110
    1fec:	40011000 	.word	0x40011000
    1ff0:	200000a8 	.word	0x200000a8
    1ff4:	200000a4 	.word	0x200000a4
    1ff8:	e000e100 	.word	0xe000e100

00001ffc <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    1ffc:	b530      	push	{r4, r5, lr}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1ffe:	4a0b      	ldr	r2, [pc, #44]	; (202c <_timer_cycle_get_32+0x30>)
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    2000:	480b      	ldr	r0, [pc, #44]	; (2030 <_timer_cycle_get_32+0x34>)
	rtc_now = RTC_COUNTER;
    2002:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
		sys_clock_tick_count = _sys_clock_tick_count;
    2006:	e9d0 4500 	ldrd	r4, r5, [r0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    200a:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    200e:	4299      	cmp	r1, r3
    2010:	d10a      	bne.n	2028 <_timer_cycle_get_32+0x2c>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    2012:	4a08      	ldr	r2, [pc, #32]	; (2034 <_timer_cycle_get_32+0x38>)
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    2014:	f240 1347 	movw	r3, #327	; 0x147
    2018:	fb03 1314 	mls	r3, r3, r4, r1
	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    201c:	6810      	ldr	r0, [r2, #0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    201e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	       elapsed_cycles;
}
    2022:	fb00 3004 	mla	r0, r0, r4, r3
    2026:	bd30      	pop	{r4, r5, pc}
    2028:	4619      	mov	r1, r3
    202a:	e7ec      	b.n	2006 <_timer_cycle_get_32+0xa>
    202c:	40011000 	.word	0x40011000
    2030:	20003448 	.word	0x20003448
    2034:	2000504c 	.word	0x2000504c

00002038 <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    2038:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    203a:	f3bf 8f5b 	dmb	ish
    203e:	e850 3f00 	ldrex	r3, [r0]
    2042:	ea43 0201 	orr.w	r2, r3, r1
    2046:	e840 2e00 	strex	lr, r2, [r0]
    204a:	f1be 0f00 	cmp.w	lr, #0
    204e:	d1f6      	bne.n	203e <atomic_or+0x6>
    2050:	f3bf 8f5b 	dmb	ish
    2054:	4618      	mov	r0, r3
    2056:	f85d fb04 	ldr.w	pc, [sp], #4

0000205a <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
    205a:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
    205c:	f3bf 8f5b 	dmb	ish
    2060:	e850 3f00 	ldrex	r3, [r0]
    2064:	ea03 0201 	and.w	r2, r3, r1
    2068:	e840 2e00 	strex	lr, r2, [r0]
    206c:	f1be 0f00 	cmp.w	lr, #0
    2070:	d1f6      	bne.n	2060 <atomic_and+0x6>
    2072:	f3bf 8f5b 	dmb	ish
    2076:	4618      	mov	r0, r3
    2078:	f85d fb04 	ldr.w	pc, [sp], #4

0000207c <hci_cmd_done.isra.9>:

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    207c:	b570      	push	{r4, r5, r6, lr}
    207e:	4606      	mov	r6, r0
{
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2080:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    2082:	460d      	mov	r5, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2084:	f008 fc52 	bl	a92c <net_buf_pool_get>
    2088:	4b0e      	ldr	r3, [pc, #56]	; (20c4 <hci_cmd_done.isra.9+0x48>)
    208a:	4283      	cmp	r3, r0
    208c:	d119      	bne.n	20c2 <hci_cmd_done.isra.9+0x46>
			opcode, buf->pool_id, net_buf_pool_get(buf->pool_id),
			&hci_cmd_pool);
		return;
	}

	if (cmd(buf)->opcode != opcode) {
    208e:	4628      	mov	r0, r5
    2090:	f008 fc52 	bl	a938 <net_buf_id>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
			opcode, cmd(buf)->opcode);
	}

	/* If the command was synchronous wake up bt_hci_cmd_send_sync() */
	if (cmd(buf)->sync) {
    2094:	4628      	mov	r0, r5
    2096:	f008 fc4f 	bl	a938 <net_buf_id>
    209a:	4c0b      	ldr	r4, [pc, #44]	; (20c8 <hci_cmd_done.isra.9+0x4c>)
    209c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    20a0:	6843      	ldr	r3, [r0, #4]
    20a2:	b173      	cbz	r3, 20c2 <hci_cmd_done.isra.9+0x46>
		cmd(buf)->status = status;
    20a4:	4628      	mov	r0, r5
    20a6:	f008 fc47 	bl	a938 <net_buf_id>
    20aa:	f804 6030 	strb.w	r6, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    20ae:	4628      	mov	r0, r5
    20b0:	f008 fc42 	bl	a938 <net_buf_id>
    20b4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
	}
}
    20b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    20bc:	6840      	ldr	r0, [r0, #4]
    20be:	f009 b9a9 	b.w	b414 <_impl_k_sem_give>
    20c2:	bd70      	pop	{r4, r5, r6, pc}
    20c4:	20005144 	.word	0x20005144
    20c8:	200000b0 	.word	0x200000b0

000020cc <atomic_test_bit.constprop.25>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    20cc:	4b07      	ldr	r3, [pc, #28]	; (20ec <atomic_test_bit.constprop.25+0x20>)
    20ce:	f3bf 8f5b 	dmb	ish
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    20d2:	0942      	lsrs	r2, r0, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    20d4:	eb03 0382 	add.w	r3, r3, r2, lsl #2

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    20d8:	f000 001f 	and.w	r0, r0, #31
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    20dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    20de:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    20e2:	fa43 f000 	asr.w	r0, r3, r0
}
    20e6:	f000 0001 	and.w	r0, r0, #1
    20ea:	4770      	bx	lr
    20ec:	20004e18 	.word	0x20004e18

000020f0 <bt_hci_cmd_create>:
{
    20f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    20f4:	4680      	mov	r8, r0
    20f6:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    20f8:	4813      	ldr	r0, [pc, #76]	; (2148 <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    20fa:	4d14      	ldr	r5, [pc, #80]	; (214c <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    20fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2100:	f008 fca8 	bl	aa54 <net_buf_alloc_fixed>
    2104:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2106:	f100 0608 	add.w	r6, r0, #8
    210a:	2100      	movs	r1, #0
    210c:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    210e:	2700      	movs	r7, #0
    2110:	f008 fca6 	bl	aa60 <net_buf_simple_reserve>
    2114:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    2116:	4620      	mov	r0, r4
    2118:	f008 fc0e 	bl	a938 <net_buf_id>
    211c:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2120:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    2124:	4620      	mov	r0, r4
    2126:	f008 fc07 	bl	a938 <net_buf_id>
    212a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    212e:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    2130:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    2132:	4630      	mov	r0, r6
    2134:	f008 fcd8 	bl	aae8 <net_buf_simple_add>
	hdr->param_len = param_len;
    2138:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    213c:	f8a0 8000 	strh.w	r8, [r0]
}
    2140:	4620      	mov	r0, r4
    2142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2146:	bf00      	nop
    2148:	20005144 	.word	0x20005144
    214c:	200000b0 	.word	0x200000b0

00002150 <bt_hci_cmd_send_sync>:
{
    2150:	b570      	push	{r4, r5, r6, lr}
    2152:	4615      	mov	r5, r2
    2154:	b086      	sub	sp, #24
	if (!buf) {
    2156:	460c      	mov	r4, r1
    2158:	b919      	cbnz	r1, 2162 <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    215a:	f7ff ffc9 	bl	20f0 <bt_hci_cmd_create>
		if (!buf) {
    215e:	4604      	mov	r4, r0
    2160:	b368      	cbz	r0, 21be <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2162:	2201      	movs	r2, #1
    2164:	2100      	movs	r1, #0
    2166:	4668      	mov	r0, sp
    2168:	f009 f94a 	bl	b400 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    216c:	4620      	mov	r0, r4
    216e:	f008 fbe3 	bl	a938 <net_buf_id>
    2172:	4e14      	ldr	r6, [pc, #80]	; (21c4 <bt_hci_cmd_send_sync+0x74>)
    2174:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    2178:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    217c:	4620      	mov	r0, r4
    217e:	f008 fcaf 	bl	aae0 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2182:	4621      	mov	r1, r4
    2184:	4810      	ldr	r0, [pc, #64]	; (21c8 <bt_hci_cmd_send_sync+0x78>)
    2186:	f008 fc6f 	bl	aa68 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    218a:	f242 7110 	movw	r1, #10000	; 0x2710
    218e:	4668      	mov	r0, sp
    2190:	f009 f9a0 	bl	b4d4 <_impl_k_sem_take>
	if (cmd(buf)->status) {
    2194:	4620      	mov	r0, r4
    2196:	f008 fbcf 	bl	a938 <net_buf_id>
    219a:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    219e:	b130      	cbz	r0, 21ae <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    21a0:	4620      	mov	r0, r4
    21a2:	f008 fc6f 	bl	aa84 <net_buf_unref>
		err = -EIO;
    21a6:	f06f 0004 	mvn.w	r0, #4
}
    21aa:	b006      	add	sp, #24
    21ac:	bd70      	pop	{r4, r5, r6, pc}
		if (rsp) {
    21ae:	b10d      	cbz	r5, 21b4 <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    21b0:	602c      	str	r4, [r5, #0]
    21b2:	e7fa      	b.n	21aa <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    21b4:	4620      	mov	r0, r4
    21b6:	f008 fc65 	bl	aa84 <net_buf_unref>
		err = 0;
    21ba:	4628      	mov	r0, r5
    21bc:	e7f5      	b.n	21aa <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    21be:	f06f 0036 	mvn.w	r0, #54	; 0x36
    21c2:	e7f2      	b.n	21aa <bt_hci_cmd_send_sync+0x5a>
    21c4:	200000b0 	.word	0x200000b0
    21c8:	20004ecc 	.word	0x20004ecc

000021cc <set_random_address>:
{
    21cc:	b570      	push	{r4, r5, r6, lr}
#define BT_ADDR_LE_NONE (&(bt_addr_le_t) { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    21ce:	4d15      	ldr	r5, [pc, #84]	; (2224 <set_random_address+0x58>)
    21d0:	2206      	movs	r2, #6
    21d2:	f105 0108 	add.w	r1, r5, #8
    21d6:	4606      	mov	r6, r0
    21d8:	f7fe f9cf 	bl	57a <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    21dc:	4604      	mov	r4, r0
    21de:	b1d8      	cbz	r0, 2218 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    21e0:	2106      	movs	r1, #6
    21e2:	f242 0005 	movw	r0, #8197	; 0x2005
    21e6:	f7ff ff83 	bl	20f0 <bt_hci_cmd_create>
	if (!buf) {
    21ea:	4604      	mov	r4, r0
    21ec:	b1b0      	cbz	r0, 221c <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    21ee:	2206      	movs	r2, #6
    21f0:	4631      	mov	r1, r6
    21f2:	3008      	adds	r0, #8
    21f4:	f008 fc7e 	bl	aaf4 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    21f8:	4621      	mov	r1, r4
    21fa:	2200      	movs	r2, #0
    21fc:	f242 0005 	movw	r0, #8197	; 0x2005
    2200:	f7ff ffa6 	bl	2150 <bt_hci_cmd_send_sync>
	if (err) {
    2204:	4604      	mov	r4, r0
    2206:	b938      	cbnz	r0, 2218 <set_random_address+0x4c>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    2208:	2206      	movs	r2, #6
    220a:	4631      	mov	r1, r6
    220c:	f105 0008 	add.w	r0, r5, #8
    2210:	f7fe f9c8 	bl	5a4 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    2214:	2301      	movs	r3, #1
    2216:	71eb      	strb	r3, [r5, #7]
}
    2218:	4620      	mov	r0, r4
    221a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    221c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2220:	e7fa      	b.n	2218 <set_random_address+0x4c>
    2222:	bf00      	nop
    2224:	20004e18 	.word	0x20004e18

00002228 <set_le_scan_enable>:
{
    2228:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    222a:	2102      	movs	r1, #2
{
    222c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    222e:	f242 000c 	movw	r0, #8204	; 0x200c
    2232:	f7ff ff5d 	bl	20f0 <bt_hci_cmd_create>
	if (!buf) {
    2236:	4604      	mov	r4, r0
    2238:	b320      	cbz	r0, 2284 <set_le_scan_enable+0x5c>
	cp = net_buf_add(buf, sizeof(*cp));
    223a:	2102      	movs	r1, #2
    223c:	3008      	adds	r0, #8
    223e:	f008 fc53 	bl	aae8 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2242:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    2244:	4601      	mov	r1, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2246:	d114      	bne.n	2272 <set_le_scan_enable+0x4a>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    2248:	200a      	movs	r0, #10
    224a:	f7ff ff3f 	bl	20cc <atomic_test_bit.constprop.25>
    224e:	7048      	strb	r0, [r1, #1]
	cp->enable = enable;
    2250:	700d      	strb	r5, [r1, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    2252:	2200      	movs	r2, #0
    2254:	4621      	mov	r1, r4
    2256:	f242 000c 	movw	r0, #8204	; 0x200c
    225a:	f7ff ff79 	bl	2150 <bt_hci_cmd_send_sync>
	if (err) {
    225e:	4604      	mov	r4, r0
    2260:	b928      	cbnz	r0, 226e <set_le_scan_enable+0x46>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2262:	2d01      	cmp	r5, #1
    2264:	d108      	bne.n	2278 <set_le_scan_enable+0x50>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2266:	2180      	movs	r1, #128	; 0x80
    2268:	4808      	ldr	r0, [pc, #32]	; (228c <set_le_scan_enable+0x64>)
    226a:	f7ff fee5 	bl	2038 <atomic_or>
}
    226e:	4620      	mov	r0, r4
    2270:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    2272:	2300      	movs	r3, #0
    2274:	7043      	strb	r3, [r0, #1]
    2276:	e7eb      	b.n	2250 <set_le_scan_enable+0x28>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2278:	f06f 0180 	mvn.w	r1, #128	; 0x80
    227c:	4803      	ldr	r0, [pc, #12]	; (228c <set_le_scan_enable+0x64>)
    227e:	f7ff feec 	bl	205a <atomic_and>
    2282:	e7f4      	b.n	226e <set_le_scan_enable+0x46>
		return -ENOBUFS;
    2284:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2288:	e7f1      	b.n	226e <set_le_scan_enable+0x46>
    228a:	bf00      	nop
    228c:	20004e88 	.word	0x20004e88

00002290 <bt_le_scan_update>:

	return 0;
}

int bt_le_scan_update(bool fast_scan)
{
    2290:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2292:	2008      	movs	r0, #8
    2294:	f7ff ff1a 	bl	20cc <atomic_test_bit.constprop.25>
    2298:	4601      	mov	r1, r0
    229a:	b940      	cbnz	r0, 22ae <bt_le_scan_update+0x1e>
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    229c:	2007      	movs	r0, #7
    229e:	f7ff ff15 	bl	20cc <atomic_test_bit.constprop.25>
    22a2:	b120      	cbz	r0, 22ae <bt_le_scan_update+0x1e>
		int err;

		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    22a4:	4608      	mov	r0, r1

		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
	}

	return 0;
}
    22a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    22aa:	f7ff bfbd 	b.w	2228 <set_le_scan_enable>
}
    22ae:	2000      	movs	r0, #0
    22b0:	bd08      	pop	{r3, pc}

000022b2 <bt_addr_le_create_static>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    22b2:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    22b4:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    22b6:	2106      	movs	r1, #6
{
    22b8:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    22ba:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    22be:	f001 fc19 	bl	3af4 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
    22c2:	b918      	cbnz	r0, 22cc <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
    22c4:	79a3      	ldrb	r3, [r4, #6]
    22c6:	f063 033f 	orn	r3, r3, #63	; 0x3f
    22ca:	71a3      	strb	r3, [r4, #6]

	return 0;
}
    22cc:	bd10      	pop	{r4, pc}
	...

000022d0 <hci_init>:
	net_buf_unref(rsp);
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
    22d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    22d2:	b087      	sub	sp, #28
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    22d4:	aa04      	add	r2, sp, #16
    22d6:	2100      	movs	r1, #0
    22d8:	f640 4003 	movw	r0, #3075	; 0xc03
    22dc:	f7ff ff38 	bl	2150 <bt_hci_cmd_send_sync>
	if (err) {
    22e0:	4604      	mov	r4, r0
    22e2:	2800      	cmp	r0, #0
    22e4:	f040 8149 	bne.w	257a <hci_init+0x2aa>
	u8_t status = buf->data[0];
    22e8:	9b04      	ldr	r3, [sp, #16]
    22ea:	689b      	ldr	r3, [r3, #8]
	if (status) {
    22ec:	781b      	ldrb	r3, [r3, #0]
    22ee:	b96b      	cbnz	r3, 230c <hci_init+0x3c>
	scan_dev_found_cb = NULL;
    22f0:	4ab6      	ldr	r2, [pc, #728]	; (25cc <hci_init+0x2fc>)
    22f2:	6013      	str	r3, [r2, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    22f4:	4bb6      	ldr	r3, [pc, #728]	; (25d0 <hci_init+0x300>)
    22f6:	f3bf 8f5b 	dmb	ish
    22fa:	2201      	movs	r2, #1
    22fc:	e853 1f00 	ldrex	r1, [r3]
    2300:	e843 2000 	strex	r0, r2, [r3]
    2304:	2800      	cmp	r0, #0
    2306:	d1f9      	bne.n	22fc <hci_init+0x2c>
    2308:	f3bf 8f5b 	dmb	ish
	net_buf_unref(rsp);
    230c:	9804      	ldr	r0, [sp, #16]
    230e:	f008 fbb9 	bl	aa84 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    2312:	aa04      	add	r2, sp, #16
    2314:	2100      	movs	r1, #0
    2316:	f241 0003 	movw	r0, #4099	; 0x1003
    231a:	f7ff ff19 	bl	2150 <bt_hci_cmd_send_sync>
	if (err) {
    231e:	4604      	mov	r4, r0
    2320:	2800      	cmp	r0, #0
    2322:	f040 812a 	bne.w	257a <hci_init+0x2aa>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    2326:	9b04      	ldr	r3, [sp, #16]
    2328:	4daa      	ldr	r5, [pc, #680]	; (25d4 <hci_init+0x304>)
    232a:	6899      	ldr	r1, [r3, #8]
    232c:	2208      	movs	r2, #8
    232e:	3101      	adds	r1, #1
    2330:	f105 0016 	add.w	r0, r5, #22
    2334:	f7fe f936 	bl	5a4 <memcpy>
	net_buf_unref(rsp);
    2338:	9804      	ldr	r0, [sp, #16]
    233a:	f008 fba3 	bl	aa84 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    233e:	4621      	mov	r1, r4
    2340:	aa04      	add	r2, sp, #16
    2342:	f241 0001 	movw	r0, #4097	; 0x1001
    2346:	f7ff ff03 	bl	2150 <bt_hci_cmd_send_sync>
	if (err) {
    234a:	4604      	mov	r4, r0
    234c:	2800      	cmp	r0, #0
    234e:	f040 8114 	bne.w	257a <hci_init+0x2aa>
	read_local_ver_complete(rsp);
    2352:	9804      	ldr	r0, [sp, #16]
    2354:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    2356:	785a      	ldrb	r2, [r3, #1]
    2358:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    235a:	78d9      	ldrb	r1, [r3, #3]
    235c:	789a      	ldrb	r2, [r3, #2]
    235e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2362:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    2364:	791a      	ldrb	r2, [r3, #4]
    2366:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    2368:	7a19      	ldrb	r1, [r3, #8]
    236a:	79da      	ldrb	r2, [r3, #7]
    236c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2370:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    2372:	795a      	ldrb	r2, [r3, #5]
    2374:	799b      	ldrb	r3, [r3, #6]
    2376:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    237a:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    237c:	f008 fb82 	bl	aa84 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    2380:	4621      	mov	r1, r4
    2382:	aa04      	add	r2, sp, #16
    2384:	f241 0009 	movw	r0, #4105	; 0x1009
    2388:	f7ff fee2 	bl	2150 <bt_hci_cmd_send_sync>
	if (err) {
    238c:	4604      	mov	r4, r0
    238e:	2800      	cmp	r0, #0
    2390:	f040 80f3 	bne.w	257a <hci_init+0x2aa>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    2394:	9b04      	ldr	r3, [sp, #16]
    2396:	6899      	ldr	r1, [r3, #8]
    2398:	2206      	movs	r2, #6
    239a:	3101      	adds	r1, #1
    239c:	1c68      	adds	r0, r5, #1
    239e:	f7fe f901 	bl	5a4 <memcpy>
	net_buf_unref(rsp);
    23a2:	9804      	ldr	r0, [sp, #16]
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    23a4:	702c      	strb	r4, [r5, #0]
	net_buf_unref(rsp);
    23a6:	f008 fb6d 	bl	aa84 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    23aa:	4621      	mov	r1, r4
    23ac:	aa04      	add	r2, sp, #16
    23ae:	f241 0002 	movw	r0, #4098	; 0x1002
    23b2:	f7ff fecd 	bl	2150 <bt_hci_cmd_send_sync>
	if (err) {
    23b6:	4604      	mov	r4, r0
    23b8:	2800      	cmp	r0, #0
    23ba:	f040 80de 	bne.w	257a <hci_init+0x2aa>
	memcpy(bt_dev.supported_commands, rp->commands,
    23be:	9b04      	ldr	r3, [sp, #16]
    23c0:	6899      	ldr	r1, [r3, #8]
    23c2:	2240      	movs	r2, #64	; 0x40
    23c4:	3101      	adds	r1, #1
    23c6:	f105 001e 	add.w	r0, r5, #30
    23ca:	f7fe f8eb 	bl	5a4 <memcpy>
	net_buf_unref(rsp);
    23ce:	9804      	ldr	r0, [sp, #16]
    23d0:	f008 fb58 	bl	aa84 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    23d4:	7eab      	ldrb	r3, [r5, #26]
    23d6:	0658      	lsls	r0, r3, #25
    23d8:	f140 813f 	bpl.w	265a <hci_init+0x38a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    23dc:	4621      	mov	r1, r4
    23de:	aa04      	add	r2, sp, #16
    23e0:	f242 0003 	movw	r0, #8195	; 0x2003
    23e4:	f7ff feb4 	bl	2150 <bt_hci_cmd_send_sync>
	if (err) {
    23e8:	4604      	mov	r4, r0
    23ea:	2800      	cmp	r0, #0
    23ec:	f040 80c5 	bne.w	257a <hci_init+0x2aa>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    23f0:	9b04      	ldr	r3, [sp, #16]
    23f2:	6899      	ldr	r1, [r3, #8]
    23f4:	2208      	movs	r2, #8
    23f6:	3101      	adds	r1, #1
    23f8:	f105 0078 	add.w	r0, r5, #120	; 0x78
    23fc:	f7fe f8d2 	bl	5a4 <memcpy>
	net_buf_unref(rsp);
    2400:	9804      	ldr	r0, [sp, #16]
    2402:	f008 fb3f 	bl	aa84 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2406:	7eab      	ldrb	r3, [r5, #26]
    2408:	0699      	lsls	r1, r3, #26
    240a:	f140 809b 	bpl.w	2544 <hci_init+0x274>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    240e:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    2412:	071a      	lsls	r2, r3, #28
    2414:	f100 80b4 	bmi.w	2580 <hci_init+0x2b0>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    2418:	2108      	movs	r1, #8
    241a:	f242 0001 	movw	r0, #8193	; 0x2001
    241e:	f7ff fe67 	bl	20f0 <bt_hci_cmd_create>
	if (!buf) {
    2422:	4604      	mov	r4, r0
    2424:	2800      	cmp	r0, #0
    2426:	f000 8094 	beq.w	2552 <hci_init+0x282>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    242a:	2108      	movs	r1, #8
    242c:	4408      	add	r0, r1
    242e:	f008 fb5b 	bl	aae8 <net_buf_simple_add>
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2432:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    2436:	f003 0306 	and.w	r3, r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    243a:	2b06      	cmp	r3, #6
    243c:	bf14      	ite	ne
    243e:	2302      	movne	r3, #2
    2440:	f44f 73c1 	moveq.w	r3, #386	; 0x182
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2444:	2200      	movs	r2, #0
    2446:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    2448:	0a1b      	lsrs	r3, r3, #8
    244a:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    244c:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    244e:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    2450:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2452:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2454:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2456:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    2458:	4621      	mov	r1, r4
    245a:	f242 0001 	movw	r0, #8193	; 0x2001
    245e:	f7ff fe77 	bl	2150 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	err = le_init();
	if (err) {
    2462:	4604      	mov	r4, r0
    2464:	2800      	cmp	r0, #0
    2466:	f040 8088 	bne.w	257a <hci_init+0x2aa>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    246a:	2108      	movs	r1, #8
    246c:	f640 4001 	movw	r0, #3073	; 0xc01
    2470:	f7ff fe3e 	bl	20f0 <bt_hci_cmd_create>
	if (!buf) {
    2474:	4606      	mov	r6, r0
    2476:	2800      	cmp	r0, #0
    2478:	d06b      	beq.n	2552 <hci_init+0x282>
	ev = net_buf_add(buf, sizeof(*ev));
    247a:	2108      	movs	r1, #8
    247c:	4408      	add	r0, r1
    247e:	f008 fb33 	bl	aae8 <net_buf_simple_add>
    2482:	2380      	movs	r3, #128	; 0x80
    2484:	7043      	strb	r3, [r0, #1]
    2486:	2702      	movs	r7, #2
    2488:	2320      	movs	r3, #32
	dst[0] = val;
    248a:	7004      	strb	r4, [r0, #0]
    248c:	7084      	strb	r4, [r0, #2]
    248e:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    2490:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
    2492:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    2494:	70c7      	strb	r7, [r0, #3]
    2496:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    2498:	4622      	mov	r2, r4
    249a:	4631      	mov	r1, r6
    249c:	f640 4001 	movw	r0, #3073	; 0xc01
    24a0:	f7ff fe56 	bl	2150 <bt_hci_cmd_send_sync>
		BT_ERR("Non-BR/EDR controller detected");
		return -EIO;
	}

	err = set_event_mask();
	if (err) {
    24a4:	4604      	mov	r4, r0
    24a6:	2800      	cmp	r0, #0
    24a8:	d167      	bne.n	257a <hci_init+0x2aa>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    24aa:	4601      	mov	r1, r0
    24ac:	aa04      	add	r2, sp, #16
    24ae:	f64f 4001 	movw	r0, #64513	; 0xfc01
    24b2:	f7ff fe4d 	bl	2150 <bt_hci_cmd_send_sync>
	if (err) {
    24b6:	bb20      	cbnz	r0, 2502 <hci_init+0x232>
	net_buf_unref(rsp);
    24b8:	9804      	ldr	r0, [sp, #16]
    24ba:	f008 fae3 	bl	aa84 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    24be:	aa04      	add	r2, sp, #16
    24c0:	4621      	mov	r1, r4
    24c2:	f64f 4002 	movw	r0, #64514	; 0xfc02
    24c6:	f7ff fe43 	bl	2150 <bt_hci_cmd_send_sync>
	if (err) {
    24ca:	b9d0      	cbnz	r0, 2502 <hci_init+0x232>
	rp.cmds = (void *)rsp->data;
    24cc:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    24ce:	4842      	ldr	r0, [pc, #264]	; (25d8 <hci_init+0x308>)
    24d0:	6899      	ldr	r1, [r3, #8]
    24d2:	463a      	mov	r2, r7
    24d4:	3101      	adds	r1, #1
    24d6:	f7fe f865 	bl	5a4 <memcpy>
	net_buf_unref(rsp);
    24da:	9804      	ldr	r0, [sp, #16]
    24dc:	f008 fad2 	bl	aa84 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    24e0:	aa04      	add	r2, sp, #16
    24e2:	4621      	mov	r1, r4
    24e4:	f64f 4003 	movw	r0, #64515	; 0xfc03
    24e8:	f7ff fe32 	bl	2150 <bt_hci_cmd_send_sync>
	if (err) {
    24ec:	b948      	cbnz	r0, 2502 <hci_init+0x232>
	rp.feat = (void *)rsp->data;
    24ee:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    24f0:	483a      	ldr	r0, [pc, #232]	; (25dc <hci_init+0x30c>)
    24f2:	6899      	ldr	r1, [r3, #8]
    24f4:	2201      	movs	r2, #1
    24f6:	4411      	add	r1, r2
    24f8:	f7fe f854 	bl	5a4 <memcpy>
	net_buf_unref(rsp);
    24fc:	9804      	ldr	r0, [sp, #16]
    24fe:	f008 fac1 	bl	aa84 <net_buf_unref>

#if defined(CONFIG_BT_HCI_VS_EXT)
	hci_vs_init();
#endif

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2502:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    2504:	2207      	movs	r2, #7
    2506:	a902      	add	r1, sp, #8
    2508:	4832      	ldr	r0, [pc, #200]	; (25d4 <hci_init+0x304>)
    250a:	9302      	str	r3, [sp, #8]
    250c:	f8cd 300b 	str.w	r3, [sp, #11]
    2510:	f7fe f833 	bl	57a <memcmp>
    2514:	2800      	cmp	r0, #0
    2516:	d148      	bne.n	25aa <hci_init+0x2da>
	if (bt_storage) {
    2518:	4e31      	ldr	r6, [pc, #196]	; (25e0 <hci_init+0x310>)
    251a:	6833      	ldr	r3, [r6, #0]
    251c:	2b00      	cmp	r3, #0
    251e:	d163      	bne.n	25e8 <hci_init+0x318>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    2520:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    2524:	07db      	lsls	r3, r3, #31
    2526:	d47a      	bmi.n	261e <hci_init+0x34e>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    2528:	482a      	ldr	r0, [pc, #168]	; (25d4 <hci_init+0x304>)
    252a:	f7ff fec2 	bl	22b2 <bt_addr_le_create_static>
	if (err) {
    252e:	4604      	mov	r4, r0
    2530:	bb18      	cbnz	r0, 257a <hci_init+0x2aa>
	if (bt_storage) {
    2532:	6833      	ldr	r3, [r6, #0]
    2534:	2b00      	cmp	r3, #0
    2536:	d05f      	beq.n	25f8 <hci_init+0x328>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    2538:	685e      	ldr	r6, [r3, #4]
    253a:	4a26      	ldr	r2, [pc, #152]	; (25d4 <hci_init+0x304>)
    253c:	2307      	movs	r3, #7
    253e:	4601      	mov	r1, r0
    2540:	47b0      	blx	r6
    2542:	e059      	b.n	25f8 <hci_init+0x328>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2544:	2102      	movs	r1, #2
    2546:	f640 406d 	movw	r0, #3181	; 0xc6d
    254a:	f7ff fdd1 	bl	20f0 <bt_hci_cmd_create>
		if (!buf) {
    254e:	4606      	mov	r6, r0
    2550:	b910      	cbnz	r0, 2558 <hci_init+0x288>
		return -ENOBUFS;
    2552:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2556:	e010      	b.n	257a <hci_init+0x2aa>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2558:	2102      	movs	r1, #2
    255a:	3008      	adds	r0, #8
    255c:	f008 fac4 	bl	aae8 <net_buf_simple_add>
		cp_le->le = 0x01;
    2560:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2562:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    2564:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2566:	4622      	mov	r2, r4
    2568:	4631      	mov	r1, r6
    256a:	f640 406d 	movw	r0, #3181	; 0xc6d
    256e:	f7ff fdef 	bl	2150 <bt_hci_cmd_send_sync>
		if (err) {
    2572:	4604      	mov	r4, r0
    2574:	2800      	cmp	r0, #0
    2576:	f43f af4a 	beq.w	240e <hci_init+0x13e>
	}

	show_dev_info();

	return 0;
}
    257a:	4620      	mov	r0, r4
    257c:	b007      	add	sp, #28
    257e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    2580:	aa04      	add	r2, sp, #16
    2582:	2100      	movs	r1, #0
    2584:	f242 001c 	movw	r0, #8220	; 0x201c
    2588:	f7ff fde2 	bl	2150 <bt_hci_cmd_send_sync>
		if (err) {
    258c:	4604      	mov	r4, r0
    258e:	2800      	cmp	r0, #0
    2590:	d1f3      	bne.n	257a <hci_init+0x2aa>
		le_read_supp_states_complete(rsp);
    2592:	9804      	ldr	r0, [sp, #16]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    2594:	6883      	ldr	r3, [r0, #8]
    2596:	f853 2f01 	ldr.w	r2, [r3, #1]!
    259a:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    259c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    25a0:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    25a4:	f008 fa6e 	bl	aa84 <net_buf_unref>
    25a8:	e736      	b.n	2418 <hci_init+0x148>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    25aa:	4b0e      	ldr	r3, [pc, #56]	; (25e4 <hci_init+0x314>)
    25ac:	6818      	ldr	r0, [r3, #0]
    25ae:	889a      	ldrh	r2, [r3, #4]
    25b0:	9004      	str	r0, [sp, #16]
    25b2:	799b      	ldrb	r3, [r3, #6]
    25b4:	f8ad 2014 	strh.w	r2, [sp, #20]
    25b8:	a904      	add	r1, sp, #16
    25ba:	2207      	movs	r2, #7
    25bc:	4805      	ldr	r0, [pc, #20]	; (25d4 <hci_init+0x304>)
    25be:	f88d 3016 	strb.w	r3, [sp, #22]
    25c2:	f7fd ffda 	bl	57a <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    25c6:	2800      	cmp	r0, #0
    25c8:	d0a6      	beq.n	2518 <hci_init+0x248>
    25ca:	e7d6      	b.n	257a <hci_init+0x2aa>
    25cc:	20000110 	.word	0x20000110
    25d0:	20004e88 	.word	0x20004e88
    25d4:	20004e18 	.word	0x20004e18
    25d8:	20004e77 	.word	0x20004e77
    25dc:	20004e76 	.word	0x20004e76
    25e0:	20002378 	.word	0x20002378
    25e4:	0000bf10 	.word	0x0000bf10
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    25e8:	2100      	movs	r1, #0
    25ea:	681c      	ldr	r4, [r3, #0]
    25ec:	4a1c      	ldr	r2, [pc, #112]	; (2660 <hci_init+0x390>)
    25ee:	2307      	movs	r3, #7
    25f0:	4608      	mov	r0, r1
    25f2:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    25f4:	2807      	cmp	r0, #7
    25f6:	d193      	bne.n	2520 <hci_init+0x250>
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    25f8:	782b      	ldrb	r3, [r5, #0]
    25fa:	2b01      	cmp	r3, #1
    25fc:	d12a      	bne.n	2654 <hci_init+0x384>
    25fe:	79ab      	ldrb	r3, [r5, #6]
    2600:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    2604:	2bc0      	cmp	r3, #192	; 0xc0
    2606:	d125      	bne.n	2654 <hci_init+0x384>
	err = set_random_address(&bt_dev.id_addr.a);
    2608:	4816      	ldr	r0, [pc, #88]	; (2664 <hci_init+0x394>)
    260a:	f7ff fddf 	bl	21cc <set_random_address>
	if (err) {
    260e:	4604      	mov	r4, r0
    2610:	2800      	cmp	r0, #0
    2612:	d1b2      	bne.n	257a <hci_init+0x2aa>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2614:	2104      	movs	r1, #4
    2616:	4814      	ldr	r0, [pc, #80]	; (2668 <hci_init+0x398>)
    2618:	f7ff fd0e 	bl	2038 <atomic_or>
    261c:	e7ad      	b.n	257a <hci_init+0x2aa>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    261e:	aa01      	add	r2, sp, #4
    2620:	2100      	movs	r1, #0
    2622:	f64f 4009 	movw	r0, #64521	; 0xfc09
    2626:	f7ff fd93 	bl	2150 <bt_hci_cmd_send_sync>
		if (err) {
    262a:	2800      	cmp	r0, #0
    262c:	f47f af7c 	bne.w	2528 <hci_init+0x258>
		rp = (void *)rsp->data;
    2630:	9801      	ldr	r0, [sp, #4]
    2632:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    2634:	784b      	ldrb	r3, [r1, #1]
    2636:	b153      	cbz	r3, 264e <hci_init+0x37e>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    2638:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    263a:	2206      	movs	r2, #6
    263c:	3102      	adds	r1, #2
    263e:	4809      	ldr	r0, [pc, #36]	; (2664 <hci_init+0x394>)
    2640:	702b      	strb	r3, [r5, #0]
    2642:	f7fd ffaf 	bl	5a4 <memcpy>
			net_buf_unref(rsp);
    2646:	9801      	ldr	r0, [sp, #4]
    2648:	f008 fa1c 	bl	aa84 <net_buf_unref>
    264c:	e7d4      	b.n	25f8 <hci_init+0x328>
		net_buf_unref(rsp);
    264e:	f008 fa19 	bl	aa84 <net_buf_unref>
    2652:	e769      	b.n	2528 <hci_init+0x258>
		return -EINVAL;
    2654:	f06f 0415 	mvn.w	r4, #21
    2658:	e78f      	b.n	257a <hci_init+0x2aa>
		return -ENODEV;
    265a:	f06f 0412 	mvn.w	r4, #18
    265e:	e78c      	b.n	257a <hci_init+0x2aa>
    2660:	20004e18 	.word	0x20004e18
    2664:	20004e19 	.word	0x20004e19
    2668:	20004e88 	.word	0x20004e88

0000266c <init_work>:

	return 0;
}

static void init_work(struct k_work *work)
{
    266c:	b510      	push	{r4, lr}
	err = hci_init();
    266e:	f7ff fe2f 	bl	22d0 <hci_init>
	if (err) {
    2672:	4604      	mov	r4, r0
    2674:	b930      	cbnz	r0, 2684 <init_work+0x18>
    2676:	2102      	movs	r1, #2
    2678:	4806      	ldr	r0, [pc, #24]	; (2694 <init_work+0x28>)
    267a:	f7ff fcdd 	bl	2038 <atomic_or>
	bt_le_scan_update(false);
    267e:	4620      	mov	r0, r4
    2680:	f7ff fe06 	bl	2290 <bt_le_scan_update>
	int err;

	err = bt_init();
	if (ready_cb) {
    2684:	4b04      	ldr	r3, [pc, #16]	; (2698 <init_work+0x2c>)
    2686:	681b      	ldr	r3, [r3, #0]
    2688:	b11b      	cbz	r3, 2692 <init_work+0x26>
		ready_cb(err);
    268a:	4620      	mov	r0, r4
	}
}
    268c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    2690:	4718      	bx	r3
    2692:	bd10      	pop	{r4, pc}
    2694:	20004e88 	.word	0x20004e88
    2698:	2000010c 	.word	0x2000010c

0000269c <bt_recv>:
{
    269c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (bt_buf_get_type(buf)) {
    26a0:	7d06      	ldrb	r6, [r0, #20]
    26a2:	2e01      	cmp	r6, #1
{
    26a4:	b087      	sub	sp, #28
    26a6:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    26a8:	f040 8114 	bne.w	28d4 <bt_recv+0x238>
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    26ac:	6887      	ldr	r7, [r0, #8]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    26ae:	783b      	ldrb	r3, [r7, #0]
    26b0:	3b0e      	subs	r3, #14
    26b2:	2b01      	cmp	r3, #1
    26b4:	f200 8113 	bhi.w	28de <bt_recv+0x242>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    26b8:	4040      	eors	r0, r0
    26ba:	f380 8811 	msr	BASEPRI, r0
    26be:	f04f 0004 	mov.w	r0, #4
    26c2:	df02      	svc	2
    26c4:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    26c6:	489d      	ldr	r0, [pc, #628]	; (293c <bt_recv+0x2a0>)
    26c8:	f06f 0110 	mvn.w	r1, #16
    26cc:	f7ff fcc5 	bl	205a <atomic_and>
	if (!evt->status) {
    26d0:	7833      	ldrb	r3, [r6, #0]
    26d2:	b943      	cbnz	r3, 26e6 <bt_recv+0x4a>
		memcpy(pub_key, evt->key, 64);
    26d4:	1c71      	adds	r1, r6, #1
    26d6:	2240      	movs	r2, #64	; 0x40
    26d8:	4899      	ldr	r0, [pc, #612]	; (2940 <bt_recv+0x2a4>)
    26da:	f7fd ff63 	bl	5a4 <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    26de:	2108      	movs	r1, #8
    26e0:	4896      	ldr	r0, [pc, #600]	; (293c <bt_recv+0x2a0>)
    26e2:	f7ff fca9 	bl	2038 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    26e6:	4b97      	ldr	r3, [pc, #604]	; (2944 <bt_recv+0x2a8>)
    26e8:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    26ea:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    26ec:	b935      	cbnz	r5, 26fc <bt_recv+0x60>
	net_buf_unref(buf);
    26ee:	4620      	mov	r0, r4
    26f0:	f008 f9c8 	bl	aa84 <net_buf_unref>
		return 0;
    26f4:	2000      	movs	r0, #0
}
    26f6:	b007      	add	sp, #28
    26f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cb->func(evt->status ? NULL : evt->key);
    26fc:	7832      	ldrb	r2, [r6, #0]
    26fe:	682b      	ldr	r3, [r5, #0]
    2700:	2a00      	cmp	r2, #0
    2702:	bf0c      	ite	eq
    2704:	4638      	moveq	r0, r7
    2706:	2000      	movne	r0, #0
    2708:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    270a:	686d      	ldr	r5, [r5, #4]
    270c:	e7ee      	b.n	26ec <bt_recv+0x50>
	if (dh_key_cb) {
    270e:	4d8e      	ldr	r5, [pc, #568]	; (2948 <bt_recv+0x2ac>)
    2710:	68a0      	ldr	r0, [r4, #8]
    2712:	682a      	ldr	r2, [r5, #0]
    2714:	2a00      	cmp	r2, #0
    2716:	d0ea      	beq.n	26ee <bt_recv+0x52>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    2718:	7803      	ldrb	r3, [r0, #0]
    271a:	b923      	cbnz	r3, 2726 <bt_recv+0x8a>
    271c:	3001      	adds	r0, #1
    271e:	4790      	blx	r2
		dh_key_cb = NULL;
    2720:	2300      	movs	r3, #0
    2722:	602b      	str	r3, [r5, #0]
    2724:	e7e3      	b.n	26ee <bt_recv+0x52>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    2726:	2000      	movs	r0, #0
    2728:	e7f9      	b.n	271e <bt_recv+0x82>
	u8_t num_reports = net_buf_pull_u8(buf);
    272a:	4628      	mov	r0, r5
    272c:	f008 f9f3 	bl	ab16 <net_buf_simple_pull_u8>
		if (scan_dev_found_cb) {
    2730:	f8df a234 	ldr.w	sl, [pc, #564]	; 2968 <bt_recv+0x2cc>
	u8_t num_reports = net_buf_pull_u8(buf);
    2734:	9003      	str	r0, [sp, #12]
	while (num_reports--) {
    2736:	9b03      	ldr	r3, [sp, #12]
    2738:	2b00      	cmp	r3, #0
    273a:	d0d8      	beq.n	26ee <bt_recv+0x52>
		info = (void *)buf->data;
    273c:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    273e:	2109      	movs	r1, #9
    2740:	4628      	mov	r0, r5
    2742:	f008 f9e0 	bl	ab06 <net_buf_simple_pull>
		rssi = info->data[info->length];
    2746:	7a33      	ldrb	r3, [r6, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2748:	4631      	mov	r1, r6
		rssi = info->data[info->length];
    274a:	4433      	add	r3, r6
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    274c:	2207      	movs	r2, #7
    274e:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2752:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    2756:	3b02      	subs	r3, #2
    2758:	2b01      	cmp	r3, #1
    275a:	a804      	add	r0, sp, #16
    275c:	d82c      	bhi.n	27b8 <bt_recv+0x11c>
    275e:	f7fd ff21 	bl	5a4 <memcpy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    2762:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2766:	3b02      	subs	r3, #2
    2768:	f88d 3010 	strb.w	r3, [sp, #16]
		if (scan_dev_found_cb) {
    276c:	f8da 3000 	ldr.w	r3, [sl]
    2770:	b1b3      	cbz	r3, 27a0 <bt_recv+0x104>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    2772:	4628      	mov	r0, r5
    2774:	f008 f9d7 	bl	ab26 <net_buf_simple_headroom>
			buf->len = info->length;
    2778:	7a33      	ldrb	r3, [r6, #8]
	state->len = buf->len;
    277a:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    277e:	81a3      	strh	r3, [r4, #12]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    2780:	7832      	ldrb	r2, [r6, #0]
    2782:	9400      	str	r4, [sp, #0]
	state->offset = net_buf_simple_headroom(buf);
    2784:	4681      	mov	r9, r0
    2786:	462b      	mov	r3, r5
    2788:	fa4f f18b 	sxtb.w	r1, fp
    278c:	a804      	add	r0, sp, #16
    278e:	f8da 7000 	ldr.w	r7, [sl]
    2792:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    2794:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    2796:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    279a:	fa13 f389 	uxtah	r3, r3, r9
    279e:	60a3      	str	r3, [r4, #8]
		net_buf_pull(buf, info->length + sizeof(rssi));
    27a0:	7a31      	ldrb	r1, [r6, #8]
    27a2:	4628      	mov	r0, r5
    27a4:	3101      	adds	r1, #1
    27a6:	f008 f9ae 	bl	ab06 <net_buf_simple_pull>
    27aa:	9b03      	ldr	r3, [sp, #12]
    27ac:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    27b0:	fa5f f388 	uxtb.w	r3, r8
    27b4:	9303      	str	r3, [sp, #12]
    27b6:	e7be      	b.n	2736 <bt_recv+0x9a>
    27b8:	f7fd fef4 	bl	5a4 <memcpy>
    27bc:	e7d6      	b.n	276c <bt_recv+0xd0>
	num_reports = net_buf_pull_u8(buf);
    27be:	4628      	mov	r0, r5
    27c0:	f008 f9a9 	bl	ab16 <net_buf_simple_pull_u8>
    27c4:	4b61      	ldr	r3, [pc, #388]	; (294c <bt_recv+0x2b0>)
		if (scan_dev_found_cb) {
    27c6:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 2968 <bt_recv+0x2cc>
				pointer_index = 0;
    27ca:	4e61      	ldr	r6, [pc, #388]	; (2950 <bt_recv+0x2b4>)
				memset(copied_data, 0, 1500);
    27cc:	f8df a194 	ldr.w	sl, [pc, #404]	; 2964 <bt_recv+0x2c8>
	num_reports = net_buf_pull_u8(buf);
    27d0:	7018      	strb	r0, [r3, #0]
    27d2:	469b      	mov	fp, r3
	while (num_reports--) {
    27d4:	f89b 3000 	ldrb.w	r3, [fp]
    27d8:	1e5a      	subs	r2, r3, #1
    27da:	f88b 2000 	strb.w	r2, [fp]
    27de:	2b00      	cmp	r3, #0
    27e0:	d085      	beq.n	26ee <bt_recv+0x52>
		info = (void *)buf->data;
    27e2:	68a7      	ldr	r7, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    27e4:	2118      	movs	r1, #24
    27e6:	4628      	mov	r0, r5
    27e8:	f008 f98d 	bl	ab06 <net_buf_simple_pull>
		net_buf_pull(buf, 2);   // remove 0x81 0xFF 
    27ec:	2102      	movs	r1, #2
    27ee:	4628      	mov	r0, r5
    27f0:	f008 f989 	bl	ab06 <net_buf_simple_pull>
		rssi = info->data[info->length - 2];
    27f4:	7dfb      	ldrb	r3, [r7, #23]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    27f6:	4639      	mov	r1, r7
		rssi = info->data[info->length - 2];
    27f8:	443b      	add	r3, r7
    27fa:	2207      	movs	r2, #7
    27fc:	f893 8016 	ldrb.w	r8, [r3, #22]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2800:	f811 3f02 	ldrb.w	r3, [r1, #2]!
    2804:	3b02      	subs	r3, #2
    2806:	2b01      	cmp	r3, #1
    2808:	a804      	add	r0, sp, #16
    280a:	d82e      	bhi.n	286a <bt_recv+0x1ce>
    280c:	f7fd feca 	bl	5a4 <memcpy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    2810:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2814:	3b02      	subs	r3, #2
    2816:	f88d 3010 	strb.w	r3, [sp, #16]
		if (scan_dev_found_cb) {
    281a:	f8d9 3000 	ldr.w	r3, [r9]
		buf->len = info->length;
    281e:	7dfa      	ldrb	r2, [r7, #23]
    2820:	81a2      	strh	r2, [r4, #12]
		if (scan_dev_found_cb) {
    2822:	2b00      	cmp	r3, #0
    2824:	d0d6      	beq.n	27d4 <bt_recv+0x138>
			if(info->frag == 0x01){  //First fragment - more packets to come;
    2826:	787b      	ldrb	r3, [r7, #1]
    2828:	2b01      	cmp	r3, #1
    282a:	d121      	bne.n	2870 <bt_recv+0x1d4>
				memcpy(&copied_data[pointer_index], buf->b.data, buf->b.len);
    282c:	8830      	ldrh	r0, [r6, #0]
				memcpy(temp_data, buf->b.data , buf->b.len);
    282e:	4f49      	ldr	r7, [pc, #292]	; (2954 <bt_recv+0x2b8>)
				memcpy(&copied_data[pointer_index], buf->b.data, buf->b.len);
    2830:	68a1      	ldr	r1, [r4, #8]
    2832:	4450      	add	r0, sl
    2834:	f7fd feb6 	bl	5a4 <memcpy>
				memcpy(temp_data, buf->b.data , buf->b.len);
    2838:	89a2      	ldrh	r2, [r4, #12]
    283a:	68a1      	ldr	r1, [r4, #8]
    283c:	4638      	mov	r0, r7
    283e:	f7fd feb1 	bl	5a4 <memcpy>
				pointer_index += (buf->b.len - 2);
    2842:	8833      	ldrh	r3, [r6, #0]
    2844:	89a2      	ldrh	r2, [r4, #12]
    2846:	3b02      	subs	r3, #2
    2848:	4413      	add	r3, r2
    284a:	8033      	strh	r3, [r6, #0]
				if(temp_data[100] == 0xDD){
    284c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
    2850:	2bdd      	cmp	r3, #221	; 0xdd
    2852:	d102      	bne.n	285a <bt_recv+0x1be>
					printk("DD \n");
    2854:	4840      	ldr	r0, [pc, #256]	; (2958 <bt_recv+0x2bc>)
    2856:	f7fe fe6b 	bl	1530 <printk>
				if(temp_data[100] == 0xEE){
    285a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
    285e:	2bee      	cmp	r3, #238	; 0xee
    2860:	d1b8      	bne.n	27d4 <bt_recv+0x138>
					printk("EE \n");
    2862:	483e      	ldr	r0, [pc, #248]	; (295c <bt_recv+0x2c0>)
    2864:	f7fe fe64 	bl	1530 <printk>
    2868:	e7b4      	b.n	27d4 <bt_recv+0x138>
    286a:	f7fd fe9b 	bl	5a4 <memcpy>
    286e:	e7d4      	b.n	281a <bt_recv+0x17e>
			}else if (info->frag == 0x02){  //last paacket of the data or complete data which is less than 254 bytes
    2870:	2b02      	cmp	r3, #2
		rssi = info->data[info->length - 2];
    2872:	fa4f f888 	sxtb.w	r8, r8
			}else if (info->frag == 0x02){  //last paacket of the data or complete data which is less than 254 bytes
    2876:	d123      	bne.n	28c0 <bt_recv+0x224>
				memcpy(&copied_data[pointer_index], buf->b.data , buf->b.len);
    2878:	8830      	ldrh	r0, [r6, #0]
    287a:	68a1      	ldr	r1, [r4, #8]
    287c:	4450      	add	r0, sl
    287e:	f7fd fe91 	bl	5a4 <memcpy>
				memcpy(temp_data, buf->b.data , buf->b.len);
    2882:	89a2      	ldrh	r2, [r4, #12]
    2884:	68a1      	ldr	r1, [r4, #8]
    2886:	4833      	ldr	r0, [pc, #204]	; (2954 <bt_recv+0x2b8>)
    2888:	f7fd fe8c 	bl	5a4 <memcpy>
				pointer_index += (buf->b.len - 2);
    288c:	8832      	ldrh	r2, [r6, #0]
    288e:	89a3      	ldrh	r3, [r4, #12]
				buffer_size1 = (buf->b.len - 2);
    2890:	4933      	ldr	r1, [pc, #204]	; (2960 <bt_recv+0x2c4>)
				pointer_index += (buf->b.len - 2);
    2892:	3a02      	subs	r2, #2
    2894:	441a      	add	r2, r3
				buffer_size1 = (buf->b.len - 2);
    2896:	3b02      	subs	r3, #2
				pointer_index += (buf->b.len - 2);
    2898:	b292      	uxth	r2, r2
				buffer_size1 = (buf->b.len - 2);
    289a:	800b      	strh	r3, [r1, #0]
				net_buf_add_mem(buf, copied_data, pointer_index);
    289c:	4628      	mov	r0, r5
    289e:	4931      	ldr	r1, [pc, #196]	; (2964 <bt_recv+0x2c8>)
				pointer_index += (buf->b.len - 2);
    28a0:	8032      	strh	r2, [r6, #0]
				net_buf_add_mem(buf, copied_data, pointer_index);
    28a2:	f008 f927 	bl	aaf4 <net_buf_simple_add_mem>
				net_buf_pull(buf, info->length);
    28a6:	7df9      	ldrb	r1, [r7, #23]
    28a8:	4628      	mov	r0, r5
    28aa:	f008 f92c 	bl	ab06 <net_buf_simple_pull>
				scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    28ae:	783a      	ldrb	r2, [r7, #0]
    28b0:	9400      	str	r4, [sp, #0]
    28b2:	f8d9 7000 	ldr.w	r7, [r9]
    28b6:	462b      	mov	r3, r5
    28b8:	4641      	mov	r1, r8
    28ba:	a804      	add	r0, sp, #16
    28bc:	47b8      	blx	r7
    28be:	e789      	b.n	27d4 <bt_recv+0x138>
			else if(info->frag == 0x03){        // packet received on primary adv channel
    28c0:	2b03      	cmp	r3, #3
    28c2:	d187      	bne.n	27d4 <bt_recv+0x138>
				pointer_index = 0;
    28c4:	2100      	movs	r1, #0
				memset(copied_data, 0, 1500);
    28c6:	f240 52dc 	movw	r2, #1500	; 0x5dc
    28ca:	4650      	mov	r0, sl
				pointer_index = 0;
    28cc:	8031      	strh	r1, [r6, #0]
				memset(copied_data, 0, 1500);
    28ce:	f7fd fe95 	bl	5fc <memset>
    28d2:	e7ec      	b.n	28ae <bt_recv+0x212>
		net_buf_unref(buf);
    28d4:	f008 f8d6 	bl	aa84 <net_buf_unref>
		return -EINVAL;
    28d8:	f06f 0015 	mvn.w	r0, #21
    28dc:	e70b      	b.n	26f6 <bt_recv+0x5a>
	net_buf_pull(buf, sizeof(*hdr));
    28de:	f100 0508 	add.w	r5, r0, #8
    28e2:	2102      	movs	r1, #2
    28e4:	4628      	mov	r0, r5
    28e6:	f008 f90e 	bl	ab06 <net_buf_simple_pull>
	switch (hdr->evt) {
    28ea:	783b      	ldrb	r3, [r7, #0]
    28ec:	2b3e      	cmp	r3, #62	; 0x3e
    28ee:	f47f aefe 	bne.w	26ee <bt_recv+0x52>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    28f2:	68a7      	ldr	r7, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    28f4:	4631      	mov	r1, r6
    28f6:	4628      	mov	r0, r5
    28f8:	f008 f905 	bl	ab06 <net_buf_simple_pull>
	switch (evt->subevent) {
    28fc:	783b      	ldrb	r3, [r7, #0]
    28fe:	3b02      	subs	r3, #2
    2900:	2b0b      	cmp	r3, #11
    2902:	f63f aef4 	bhi.w	26ee <bt_recv+0x52>
    2906:	a201      	add	r2, pc, #4	; (adr r2, 290c <bt_recv+0x270>)
    2908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    290c:	0000272b 	.word	0x0000272b
    2910:	000026ef 	.word	0x000026ef
    2914:	000026ef 	.word	0x000026ef
    2918:	000026ef 	.word	0x000026ef
    291c:	000026ef 	.word	0x000026ef
    2920:	000026ef 	.word	0x000026ef
    2924:	000026c5 	.word	0x000026c5
    2928:	0000270f 	.word	0x0000270f
    292c:	000026ef 	.word	0x000026ef
    2930:	000026ef 	.word	0x000026ef
    2934:	000026ef 	.word	0x000026ef
    2938:	000027bf 	.word	0x000027bf
    293c:	20004e88 	.word	0x20004e88
    2940:	200000c6 	.word	0x200000c6
    2944:	20000108 	.word	0x20000108
    2948:	200000c0 	.word	0x200000c0
    294c:	20002376 	.word	0x20002376
    2950:	200000c4 	.word	0x200000c4
    2954:	2000237c 	.word	0x2000237c
    2958:	0000c63c 	.word	0x0000c63c
    295c:	0000c641 	.word	0x0000c641
    2960:	200000ac 	.word	0x200000ac
    2964:	20002498 	.word	0x20002498
    2968:	20000110 	.word	0x20000110

0000296c <bt_recv_prio>:
{
    296c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    296e:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    2970:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    2972:	2b01      	cmp	r3, #1
{
    2974:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    2976:	d005      	beq.n	2984 <bt_recv_prio+0x18>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    2978:	4040      	eors	r0, r0
    297a:	f380 8811 	msr	BASEPRI, r0
    297e:	f04f 0004 	mov.w	r0, #4
    2982:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    2984:	8983      	ldrh	r3, [r0, #12]
    2986:	2b01      	cmp	r3, #1
    2988:	d9f6      	bls.n	2978 <bt_recv_prio+0xc>
    298a:	7833      	ldrb	r3, [r6, #0]
    298c:	3b0e      	subs	r3, #14
    298e:	2b01      	cmp	r3, #1
    2990:	d8f2      	bhi.n	2978 <bt_recv_prio+0xc>
	net_buf_pull(buf, sizeof(*hdr));
    2992:	f100 0508 	add.w	r5, r0, #8
    2996:	2102      	movs	r1, #2
    2998:	4628      	mov	r0, r5
    299a:	f008 f8b4 	bl	ab06 <net_buf_simple_pull>
	switch (hdr->evt) {
    299e:	7833      	ldrb	r3, [r6, #0]
    29a0:	2b0e      	cmp	r3, #14
    29a2:	d005      	beq.n	29b0 <bt_recv_prio+0x44>
    29a4:	2b0f      	cmp	r3, #15
    29a6:	d017      	beq.n	29d8 <bt_recv_prio+0x6c>
		net_buf_unref(buf);
    29a8:	4620      	mov	r0, r4
    29aa:	f008 f86b 	bl	aa84 <net_buf_unref>
    29ae:	e7e3      	b.n	2978 <bt_recv_prio+0xc>
	u8_t status, ncmd = evt->ncmd;
    29b0:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    29b2:	2103      	movs	r1, #3
    29b4:	4628      	mov	r0, r5
	u8_t status, ncmd = evt->ncmd;
    29b6:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    29b8:	f008 f8a5 	bl	ab06 <net_buf_simple_pull>
	status = buf->data[0];
    29bc:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    29be:	4621      	mov	r1, r4
    29c0:	7818      	ldrb	r0, [r3, #0]
    29c2:	f7ff fb5b 	bl	207c <hci_cmd_done.isra.9>
	if (ncmd) {
    29c6:	b116      	cbz	r6, 29ce <bt_recv_prio+0x62>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    29c8:	480a      	ldr	r0, [pc, #40]	; (29f4 <bt_recv_prio+0x88>)
    29ca:	f008 fd23 	bl	b414 <_impl_k_sem_give>
	net_buf_unref(buf);
    29ce:	4620      	mov	r0, r4
    29d0:	f008 f858 	bl	aa84 <net_buf_unref>
}
    29d4:	2000      	movs	r0, #0
    29d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    29d8:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    29da:	2104      	movs	r1, #4
	u8_t ncmd = evt->ncmd;
    29dc:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    29de:	4628      	mov	r0, r5
    29e0:	f008 f891 	bl	ab06 <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    29e4:	4621      	mov	r1, r4
    29e6:	7830      	ldrb	r0, [r6, #0]
    29e8:	f7ff fb48 	bl	207c <hci_cmd_done.isra.9>
	if (ncmd) {
    29ec:	2f00      	cmp	r7, #0
    29ee:	d0ee      	beq.n	29ce <bt_recv_prio+0x62>
    29f0:	e7ea      	b.n	29c8 <bt_recv_prio+0x5c>
    29f2:	bf00      	nop
    29f4:	20004ea0 	.word	0x20004ea0

000029f8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    29f8:	4a08      	ldr	r2, [pc, #32]	; (2a1c <bt_hci_driver_register+0x24>)
    29fa:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    29fe:	b93b      	cbnz	r3, 2a10 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    2a00:	6881      	ldr	r1, [r0, #8]
    2a02:	b141      	cbz	r1, 2a16 <bt_hci_driver_register+0x1e>
    2a04:	68c1      	ldr	r1, [r0, #12]
    2a06:	b131      	cbz	r1, 2a16 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    2a08:	f8c2 00c4 	str.w	r0, [r2, #196]	; 0xc4
	return 0;
    2a0c:	4618      	mov	r0, r3
    2a0e:	4770      	bx	lr
		return -EALREADY;
    2a10:	f06f 0044 	mvn.w	r0, #68	; 0x44
    2a14:	4770      	bx	lr
		return -EINVAL;
    2a16:	f06f 0015 	mvn.w	r0, #21
}
    2a1a:	4770      	bx	lr
    2a1c:	20004e18 	.word	0x20004e18

00002a20 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    2a20:	b538      	push	{r3, r4, r5, lr}
    2a22:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    2a24:	4805      	ldr	r0, [pc, #20]	; (2a3c <bt_buf_get_rx+0x1c>)
    2a26:	f008 f815 	bl	aa54 <net_buf_alloc_fixed>
#endif

	if (buf) {
    2a2a:	4604      	mov	r4, r0
    2a2c:	b120      	cbz	r0, 2a38 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2a2e:	2100      	movs	r1, #0
    2a30:	3008      	adds	r0, #8
    2a32:	f008 f815 	bl	aa60 <net_buf_simple_reserve>
    2a36:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    2a38:	4620      	mov	r0, r4
    2a3a:	bd38      	pop	{r3, r4, r5, pc}
    2a3c:	20005164 	.word	0x20005164

00002a40 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    2a40:	b510      	push	{r4, lr}
    2a42:	4601      	mov	r1, r0
	__asm__ volatile(
    2a44:	f04f 0320 	mov.w	r3, #32
    2a48:	f3ef 8011 	mrs	r0, BASEPRI
    2a4c:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    2a50:	4a0b      	ldr	r2, [pc, #44]	; (2a80 <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    2a52:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    2a54:	f8d2 40a0 	ldr.w	r4, [r2, #160]	; 0xa0
	bt_dev.sent_cmd = NULL;
    2a58:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2a5c:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    2a60:	b924      	cbnz	r4, 2a6c <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    2a62:	2001      	movs	r0, #1
}
    2a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    2a68:	f7ff bfda 	b.w	2a20 <bt_buf_get_rx>
    2a6c:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2a6e:	f104 0008 	add.w	r0, r4, #8
    2a72:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    2a74:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2a76:	4619      	mov	r1, r3
    2a78:	f007 fff2 	bl	aa60 <net_buf_simple_reserve>
}
    2a7c:	4620      	mov	r0, r4
    2a7e:	bd10      	pop	{r4, pc}
    2a80:	20004e18 	.word	0x20004e18

00002a84 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    2a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    2a86:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    2a88:	1dc3      	adds	r3, r0, #7
{
    2a8a:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    2a8c:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    2a90:	1e50      	subs	r0, r2, #1
{
    2a92:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    2a94:	b280      	uxth	r0, r0
{
    2a96:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    2a98:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    2a9a:	2100      	movs	r1, #0
    2a9c:	2204      	movs	r2, #4
    2a9e:	fb06 5000 	mla	r0, r6, r0, r5
    2aa2:	f7fd fdab 	bl	5fc <memset>
    2aa6:	3c02      	subs	r4, #2
    2aa8:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    2aaa:	f64f 77ff 	movw	r7, #65535	; 0xffff
    2aae:	42bc      	cmp	r4, r7
    2ab0:	d101      	bne.n	2ab6 <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    2ab2:	b003      	add	sp, #12
    2ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    2ab6:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    2aba:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    2abc:	2204      	movs	r2, #4
    2abe:	1b80      	subs	r0, r0, r6
    2ac0:	eb0d 0102 	add.w	r1, sp, r2
    2ac4:	4428      	add	r0, r5
    2ac6:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    2ac8:	9301      	str	r3, [sp, #4]
    2aca:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    2acc:	f7fd fd6a 	bl	5a4 <memcpy>
    2ad0:	e7ed      	b.n	2aae <mem_init+0x2a>

00002ad2 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    2ad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    2ad4:	6805      	ldr	r5, [r0, #0]
{
    2ad6:	4606      	mov	r6, r0
	if (*mem_head) {
    2ad8:	b195      	cbz	r5, 2b00 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    2ada:	1deb      	adds	r3, r5, #7
    2adc:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    2ae0:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    2ae2:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    2ae4:	4629      	mov	r1, r5
    2ae6:	eb0d 0002 	add.w	r0, sp, r2
    2aea:	f7fd fd5b 	bl	5a4 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    2aee:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    2af0:	3c01      	subs	r4, #1
    2af2:	b2a4      	uxth	r4, r4
		if (head) {
    2af4:	b11b      	cbz	r3, 2afe <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    2af6:	1dda      	adds	r2, r3, #7
    2af8:	f022 0203 	bic.w	r2, r2, #3
    2afc:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    2afe:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    2b00:	4628      	mov	r0, r5
    2b02:	b002      	add	sp, #8
    2b04:	bd70      	pop	{r4, r5, r6, pc}

00002b06 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    2b06:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    2b08:	680c      	ldr	r4, [r1, #0]
{
    2b0a:	4606      	mov	r6, r0
    2b0c:	460d      	mov	r5, r1
	if (*mem_head) {
    2b0e:	b11c      	cbz	r4, 2b18 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    2b10:	1de3      	adds	r3, r4, #7
    2b12:	f023 0303 	bic.w	r3, r3, #3
    2b16:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    2b18:	2204      	movs	r2, #4
    2b1a:	4629      	mov	r1, r5
    2b1c:	4630      	mov	r0, r6
    2b1e:	f7fd fd41 	bl	5a4 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    2b22:	1df2      	adds	r2, r6, #7
    2b24:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    2b28:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    2b2a:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    2b2c:	602e      	str	r6, [r5, #0]
    2b2e:	bd70      	pop	{r4, r5, r6, pc}

00002b30 <mem_get>:
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    2b30:	fb02 0001 	mla	r0, r2, r1, r0
    2b34:	4770      	bx	lr

00002b36 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    2b36:	1a40      	subs	r0, r0, r1
    2b38:	b280      	uxth	r0, r0
}
    2b3a:	fbb0 f0f2 	udiv	r0, r0, r2
    2b3e:	4770      	bx	lr

00002b40 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    2b40:	b510      	push	{r4, lr}
	src += len;
    2b42:	4411      	add	r1, r2
    2b44:	3801      	subs	r0, #1
	while (len--) {
    2b46:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2b4a:	3a01      	subs	r2, #1
    2b4c:	b292      	uxth	r2, r2
    2b4e:	429a      	cmp	r2, r3
    2b50:	d100      	bne.n	2b54 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    2b52:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    2b54:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    2b58:	f800 4f01 	strb.w	r4, [r0, #1]!
    2b5c:	e7f5      	b.n	2b4a <mem_rcopy+0xa>

00002b5e <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    2b5e:	6010      	str	r0, [r2, #0]
    2b60:	6008      	str	r0, [r1, #0]

	return link;
}
    2b62:	4770      	bx	lr

00002b64 <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    2b64:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    2b66:	6814      	ldr	r4, [r2, #0]
    2b68:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    2b6a:	6814      	ldr	r4, [r2, #0]
    2b6c:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    2b6e:	6010      	str	r0, [r2, #0]

	return link;
}
    2b70:	bd10      	pop	{r4, pc}

00002b72 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    2b72:	4288      	cmp	r0, r1
    2b74:	d003      	beq.n	2b7e <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    2b76:	b11a      	cbz	r2, 2b80 <memq_peek+0xe>
		*mem = head->mem;
    2b78:	6843      	ldr	r3, [r0, #4]
    2b7a:	6013      	str	r3, [r2, #0]
    2b7c:	4770      	bx	lr
		return NULL;
    2b7e:	2000      	movs	r0, #0
	}

	return head;
}
    2b80:	4770      	bx	lr

00002b82 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    2b82:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    2b84:	4283      	cmp	r3, r0
    2b86:	d009      	beq.n	2b9c <memq_dequeue+0x1a>
	if (mem) {
    2b88:	b122      	cbz	r2, 2b94 <memq_dequeue+0x12>
		*mem = head->mem;
    2b8a:	6858      	ldr	r0, [r3, #4]
    2b8c:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    2b8e:	681a      	ldr	r2, [r3, #0]
    2b90:	600a      	str	r2, [r1, #0]

	return link;
    2b92:	e001      	b.n	2b98 <memq_dequeue+0x16>
	if (!link) {
    2b94:	2b00      	cmp	r3, #0
    2b96:	d1fa      	bne.n	2b8e <memq_dequeue+0xc>
}
    2b98:	4618      	mov	r0, r3
    2b9a:	4770      	bx	lr
		return NULL;
    2b9c:	2300      	movs	r3, #0
    2b9e:	e7fb      	b.n	2b98 <memq_dequeue+0x16>

00002ba0 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    2ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    2ba4:	4f11      	ldr	r7, [pc, #68]	; (2bec <mayfly_init+0x4c>)
    2ba6:	f8df 9048 	ldr.w	r9, [pc, #72]	; 2bf0 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    2baa:	2604      	movs	r6, #4
	while (callee_id--) {
    2bac:	3e01      	subs	r6, #1
    2bae:	b2f6      	uxtb	r6, r6
    2bb0:	2eff      	cmp	r6, #255	; 0xff
    2bb2:	d019      	beq.n	2be8 <mayfly_init+0x48>
    2bb4:	b233      	sxth	r3, r6
    2bb6:	ea4f 0883 	mov.w	r8, r3, lsl #2
    2bba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2bbe:	011d      	lsls	r5, r3, #4
    2bc0:	2404      	movs	r4, #4
    2bc2:	f04f 0a0c 	mov.w	sl, #12
    2bc6:	e00a      	b.n	2bde <mayfly_init+0x3e>
    2bc8:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    2bcc:	1d0a      	adds	r2, r1, #4
    2bce:	eb04 0008 	add.w	r0, r4, r8
    2bd2:	443a      	add	r2, r7
    2bd4:	4439      	add	r1, r7
    2bd6:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    2bda:	f7ff ffc0 	bl	2b5e <memq_init>
		while (caller_id--) {
    2bde:	3c01      	subs	r4, #1
    2be0:	b2e4      	uxtb	r4, r4
    2be2:	2cff      	cmp	r4, #255	; 0xff
    2be4:	d1f0      	bne.n	2bc8 <mayfly_init+0x28>
    2be6:	e7e1      	b.n	2bac <mayfly_init+0xc>
    2be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2bec:	20000194 	.word	0x20000194
    2bf0:	20000114 	.word	0x20000114

00002bf4 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    2bf4:	b4f0      	push	{r4, r5, r6, r7}
    2bf6:	4b12      	ldr	r3, [pc, #72]	; (2c40 <mayfly_enable+0x4c>)
    2bf8:	4605      	mov	r5, r0
    2bfa:	460f      	mov	r7, r1
    2bfc:	260c      	movs	r6, #12
    2bfe:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    2c00:	b172      	cbz	r2, 2c20 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    2c02:	4361      	muls	r1, r4
    2c04:	fb06 1400 	mla	r4, r6, r0, r1
    2c08:	4423      	add	r3, r4
    2c0a:	7a59      	ldrb	r1, [r3, #9]
    2c0c:	7a18      	ldrb	r0, [r3, #8]
    2c0e:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    2c10:	bf04      	itt	eq
    2c12:	3101      	addeq	r1, #1
    2c14:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    2c16:	4628      	mov	r0, r5
    2c18:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    2c1a:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    2c1c:	f007 bdf2 	b.w	a804 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    2c20:	434c      	muls	r4, r1
    2c22:	fb06 4400 	mla	r4, r6, r0, r4
    2c26:	4423      	add	r3, r4
    2c28:	7a9c      	ldrb	r4, [r3, #10]
    2c2a:	7ada      	ldrb	r2, [r3, #11]
    2c2c:	42a2      	cmp	r2, r4
    2c2e:	d104      	bne.n	2c3a <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    2c30:	3201      	adds	r2, #1
    2c32:	729a      	strb	r2, [r3, #10]
}
    2c34:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    2c36:	f007 be13 	b.w	a860 <mayfly_pend>
}
    2c3a:	bcf0      	pop	{r4, r5, r6, r7}
    2c3c:	4770      	bx	lr
    2c3e:	bf00      	nop
    2c40:	20000194 	.word	0x20000194

00002c44 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    2c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c46:	4605      	mov	r5, r0
    2c48:	460e      	mov	r6, r1
    2c4a:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    2c4c:	b18a      	cbz	r2, 2c72 <mayfly_enqueue+0x2e>
    2c4e:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    2c50:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    2c52:	7820      	ldrb	r0, [r4, #0]
    2c54:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    2c56:	f010 0703 	ands.w	r7, r0, #3
    2c5a:	d029      	beq.n	2cb0 <mayfly_enqueue+0x6c>
		if (chain) {
    2c5c:	b303      	cbz	r3, 2ca0 <mayfly_enqueue+0x5c>
			if (state != 1) {
    2c5e:	2f01      	cmp	r7, #1
    2c60:	d039      	beq.n	2cd6 <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    2c62:	3201      	adds	r2, #1
    2c64:	b2d2      	uxtb	r2, r2
    2c66:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    2c68:	4631      	mov	r1, r6
    2c6a:	4628      	mov	r0, r5
    2c6c:	f007 fdf8 	bl	a860 <mayfly_pend>
    2c70:	e01c      	b.n	2cac <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    2c72:	f007 fde3 	bl	a83c <mayfly_prio_is_equal>
    2c76:	2800      	cmp	r0, #0
    2c78:	d0e9      	beq.n	2c4e <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    2c7a:	4631      	mov	r1, r6
    2c7c:	4628      	mov	r0, r5
    2c7e:	f007 fdcf 	bl	a820 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    2c82:	2800      	cmp	r0, #0
    2c84:	d0e3      	beq.n	2c4e <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    2c86:	2330      	movs	r3, #48	; 0x30
    2c88:	220c      	movs	r2, #12
    2c8a:	4373      	muls	r3, r6
    2c8c:	fb02 3305 	mla	r3, r2, r5, r3
    2c90:	4a12      	ldr	r2, [pc, #72]	; (2cdc <mayfly_enqueue+0x98>)
    2c92:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    2c94:	7a93      	ldrb	r3, [r2, #10]
    2c96:	7ad2      	ldrb	r2, [r2, #11]
    2c98:	1a9b      	subs	r3, r3, r2
    2c9a:	bf18      	it	ne
    2c9c:	2301      	movne	r3, #1
    2c9e:	e7d7      	b.n	2c50 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    2ca0:	3202      	adds	r2, #2
    2ca2:	b2d2      	uxtb	r2, r2
    2ca4:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    2ca6:	68e3      	ldr	r3, [r4, #12]
    2ca8:	68a0      	ldr	r0, [r4, #8]
    2caa:	4798      	blx	r3
		return 0;
    2cac:	2000      	movs	r0, #0
    2cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    2cb0:	2b00      	cmp	r3, #0
    2cb2:	d0f8      	beq.n	2ca6 <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    2cb4:	3201      	adds	r2, #1
    2cb6:	b2d2      	uxtb	r2, r2
    2cb8:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    2cba:	2304      	movs	r3, #4
    2cbc:	2230      	movs	r2, #48	; 0x30
    2cbe:	fb12 3206 	smlabb	r2, r2, r6, r3
    2cc2:	230c      	movs	r3, #12
    2cc4:	fb13 2305 	smlabb	r3, r3, r5, r2
    2cc8:	4a04      	ldr	r2, [pc, #16]	; (2cdc <mayfly_enqueue+0x98>)
    2cca:	6860      	ldr	r0, [r4, #4]
    2ccc:	441a      	add	r2, r3
    2cce:	4621      	mov	r1, r4
    2cd0:	f7ff ff48 	bl	2b64 <memq_enqueue>
    2cd4:	e7c8      	b.n	2c68 <mayfly_enqueue+0x24>
			return 1;
    2cd6:	4638      	mov	r0, r7

	return 0;
}
    2cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2cda:	bf00      	nop
    2cdc:	20000194 	.word	0x20000194

00002ce0 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    2ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ce4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2ce8:	b089      	sub	sp, #36	; 0x24
    2cea:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    2cec:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    2cf0:	4e43      	ldr	r6, [pc, #268]	; (2e00 <mayfly_run+0x120>)
    2cf2:	9304      	str	r3, [sp, #16]
{
    2cf4:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    2cf6:	2404      	movs	r4, #4
	u8_t disable = 0;
    2cf8:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    2cfc:	3c01      	subs	r4, #1
    2cfe:	b2e4      	uxtb	r4, r4
    2d00:	2cff      	cmp	r4, #255	; 0xff
    2d02:	d10b      	bne.n	2d1c <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    2d04:	9b01      	ldr	r3, [sp, #4]
    2d06:	2b00      	cmp	r3, #0
    2d08:	d076      	beq.n	2df8 <mayfly_run+0x118>
    2d0a:	f1b8 0f00 	cmp.w	r8, #0
    2d0e:	d173      	bne.n	2df8 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    2d10:	4642      	mov	r2, r8
    2d12:	4629      	mov	r1, r5
    2d14:	4628      	mov	r0, r5
    2d16:	f007 fd75 	bl	a804 <mayfly_enable_cb>
    2d1a:	e06d      	b.n	2df8 <mayfly_run+0x118>
		struct mayfly *m = 0;
    2d1c:	f10d 0b20 	add.w	fp, sp, #32
    2d20:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    2d22:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    2d24:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    2d28:	f04f 0930 	mov.w	r9, #48	; 0x30
    2d2c:	fb07 f304 	mul.w	r3, r7, r4
    2d30:	fb09 3005 	mla	r0, r9, r5, r3
    2d34:	1831      	adds	r1, r6, r0
    2d36:	465a      	mov	r2, fp
    2d38:	6849      	ldr	r1, [r1, #4]
    2d3a:	5830      	ldr	r0, [r6, r0]
    2d3c:	9302      	str	r3, [sp, #8]
    2d3e:	f7ff ff18 	bl	2b72 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    2d42:	9b04      	ldr	r3, [sp, #16]
    2d44:	fb17 3704 	smlabb	r7, r7, r4, r3
    2d48:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    2d4a:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    2d4c:	9303      	str	r3, [sp, #12]
		while (link) {
    2d4e:	f1ba 0f00 	cmp.w	sl, #0
    2d52:	d119      	bne.n	2d88 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    2d54:	2230      	movs	r2, #48	; 0x30
    2d56:	230c      	movs	r3, #12
    2d58:	436a      	muls	r2, r5
    2d5a:	fb03 2204 	mla	r2, r3, r4, r2
    2d5e:	4432      	add	r2, r6
    2d60:	7a91      	ldrb	r1, [r2, #10]
    2d62:	7ad0      	ldrb	r0, [r2, #11]
    2d64:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    2d66:	bf1e      	ittt	ne
    2d68:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    2d6a:	2201      	movne	r2, #1
    2d6c:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    2d6e:	2230      	movs	r2, #48	; 0x30
    2d70:	436a      	muls	r2, r5
    2d72:	fb03 2304 	mla	r3, r3, r4, r2
    2d76:	4433      	add	r3, r6
    2d78:	7a1a      	ldrb	r2, [r3, #8]
    2d7a:	7a59      	ldrb	r1, [r3, #9]
    2d7c:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    2d7e:	bf1c      	itt	ne
    2d80:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    2d82:	f04f 0801 	movne.w	r8, #1
    2d86:	e7b9      	b.n	2cfc <mayfly_run+0x1c>
			req = m->_req;
    2d88:	9b07      	ldr	r3, [sp, #28]
    2d8a:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    2d8c:	785a      	ldrb	r2, [r3, #1]
    2d8e:	1abf      	subs	r7, r7, r2
    2d90:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    2d94:	2f01      	cmp	r7, #1
    2d96:	d104      	bne.n	2da2 <mayfly_run+0xc2>
				m->_ack--;
    2d98:	3a01      	subs	r2, #1
    2d9a:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    2d9c:	6898      	ldr	r0, [r3, #8]
    2d9e:	68da      	ldr	r2, [r3, #12]
    2da0:	4790      	blx	r2
			req = m->_req;
    2da2:	9a07      	ldr	r2, [sp, #28]
    2da4:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    2da6:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    2da8:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    2daa:	1a9a      	subs	r2, r3, r2
    2dac:	f002 0203 	and.w	r2, r2, #3
    2db0:	2a01      	cmp	r2, #1
    2db2:	9305      	str	r3, [sp, #20]
    2db4:	d00d      	beq.n	2dd2 <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    2db6:	9b02      	ldr	r3, [sp, #8]
    2db8:	9903      	ldr	r1, [sp, #12]
    2dba:	fb09 3005 	mla	r0, r9, r5, r3
    2dbe:	4430      	add	r0, r6
    2dc0:	2200      	movs	r2, #0
    2dc2:	6840      	ldr	r0, [r0, #4]
    2dc4:	f7ff fedd 	bl	2b82 <memq_dequeue>
				m->_link = link;
    2dc8:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    2dca:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    2dcc:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    2dd0:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    2dd2:	9b02      	ldr	r3, [sp, #8]
    2dd4:	fb09 3305 	mla	r3, r9, r5, r3
    2dd8:	18f1      	adds	r1, r6, r3
    2dda:	465a      	mov	r2, fp
    2ddc:	6849      	ldr	r1, [r1, #4]
    2dde:	58f0      	ldr	r0, [r6, r3]
    2de0:	f7ff fec7 	bl	2b72 <memq_peek>
			if (state == 1) {
    2de4:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    2de6:	4682      	mov	sl, r0
			if (state == 1) {
    2de8:	d1b1      	bne.n	2d4e <mayfly_run+0x6e>
				if (caller_id || link) {
    2dea:	b90c      	cbnz	r4, 2df0 <mayfly_run+0x110>
    2dec:	2800      	cmp	r0, #0
    2dee:	d0b1      	beq.n	2d54 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    2df0:	4629      	mov	r1, r5
    2df2:	4628      	mov	r0, r5
    2df4:	f007 fd34 	bl	a860 <mayfly_pend>
	}
}
    2df8:	b009      	add	sp, #36	; 0x24
    2dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2dfe:	bf00      	nop
    2e00:	20000194 	.word	0x20000194

00002e04 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    2e04:	b510      	push	{r4, lr}
    2e06:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    2e08:	2000      	movs	r0, #0

	while (octets_len--) {
    2e0a:	3901      	subs	r1, #1
    2e0c:	b2c9      	uxtb	r1, r1
    2e0e:	29ff      	cmp	r1, #255	; 0xff
    2e10:	d100      	bne.n	2e14 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    2e12:	bd10      	pop	{r4, pc}
		bite = *octets;
    2e14:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    2e18:	2b00      	cmp	r3, #0
    2e1a:	d0f6      	beq.n	2e0a <util_ones_count_get+0x6>
			bite &= (bite - 1);
    2e1c:	1e5c      	subs	r4, r3, #1
			one_count++;
    2e1e:	3001      	adds	r0, #1
			bite &= (bite - 1);
    2e20:	4023      	ands	r3, r4
			one_count++;
    2e22:	b2c0      	uxtb	r0, r0
    2e24:	e7f8      	b.n	2e18 <util_ones_count_get+0x14>

00002e26 <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    2e26:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    2e28:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    2e2a:	6805      	ldr	r5, [r0, #0]
	current = previous;
    2e2c:	461a      	mov	r2, r3
	total = 0;
    2e2e:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    2e30:	2aff      	cmp	r2, #255	; 0xff
    2e32:	d101      	bne.n	2e38 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    2e34:	2000      	movs	r0, #0
    2e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    2e38:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    2e3c:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    2e3e:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    2e42:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    2e46:	d004      	beq.n	2e52 <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    2e48:	68b3      	ldr	r3, [r6, #8]
    2e4a:	441c      	add	r4, r3
		current = ticker_current->next;
    2e4c:	4613      	mov	r3, r2
    2e4e:	463a      	mov	r2, r7
    2e50:	e7ee      	b.n	2e30 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    2e52:	4293      	cmp	r3, r2
    2e54:	d100      	bne.n	2e58 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    2e56:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    2e58:	b21b      	sxth	r3, r3
    2e5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2e5e:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    2e60:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    2e62:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    2e66:	7833      	ldrb	r3, [r6, #0]
    2e68:	2bff      	cmp	r3, #255	; 0xff
    2e6a:	d006      	beq.n	2e7a <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    2e6c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2e70:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    2e74:	689a      	ldr	r2, [r3, #8]
    2e76:	4402      	add	r2, r0
    2e78:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    2e7a:	4420      	add	r0, r4
    2e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002e7e <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    2e7e:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    2e80:	1a55      	subs	r5, r2, r1
    2e82:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    2e86:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    2e88:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    2e8a:	d109      	bne.n	2ea0 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2e8c:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    2e90:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    2e92:	42a2      	cmp	r2, r4
    2e94:	d90e      	bls.n	2eb4 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    2e96:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    2e98:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    2e9a:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    2e9c:	6144      	str	r4, [r0, #20]
    2e9e:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2ea0:	1a8a      	subs	r2, r1, r2
    2ea2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    2ea6:	4293      	cmp	r3, r2
    2ea8:	d901      	bls.n	2eae <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    2eaa:	1a9a      	subs	r2, r3, r2
    2eac:	e7f1      	b.n	2e92 <ticks_to_expire_prep+0x14>
    2eae:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    2eb0:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    2eb2:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    2eb4:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    2eb6:	2200      	movs	r2, #0
    2eb8:	e7ef      	b.n	2e9a <ticks_to_expire_prep+0x1c>

00002eba <ticker_job_op_cb>:
{
    2eba:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    2ebc:	2200      	movs	r2, #0
    2ebe:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    2ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    2ec2:	6259      	str	r1, [r3, #36]	; 0x24
{
    2ec4:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    2ec6:	b10a      	cbz	r2, 2ecc <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    2ec8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    2eca:	4710      	bx	r2
    2ecc:	4770      	bx	lr

00002ece <ticker_worker>:
{
    2ece:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    2ed2:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    2ed4:	2301      	movs	r3, #1
{
    2ed6:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    2ed8:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    2eda:	2d00      	cmp	r5, #0
    2edc:	d14c      	bne.n	2f78 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    2ede:	7f43      	ldrb	r3, [r0, #29]
    2ee0:	2bff      	cmp	r3, #255	; 0xff
    2ee2:	d102      	bne.n	2eea <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    2ee4:	77c5      	strb	r5, [r0, #31]
		return;
    2ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    2eea:	f007 f833 	bl	9f54 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2eee:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    2ef0:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    2ef2:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2ef6:	1bc7      	subs	r7, r0, r7
    2ef8:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    2efc:	2eff      	cmp	r6, #255	; 0xff
    2efe:	d006      	beq.n	2f0e <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    2f00:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    2f04:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    2f08:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    2f0a:	429f      	cmp	r7, r3
    2f0c:	d218      	bcs.n	2f40 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    2f0e:	7aa2      	ldrb	r2, [r4, #10]
    2f10:	7ae3      	ldrb	r3, [r4, #11]
    2f12:	4293      	cmp	r3, r2
    2f14:	d105      	bne.n	2f22 <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    2f16:	3301      	adds	r3, #1
    2f18:	b2db      	uxtb	r3, r3
			last = 0;
    2f1a:	2b02      	cmp	r3, #2
    2f1c:	bf08      	it	eq
    2f1e:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    2f20:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    2f22:	7ae3      	ldrb	r3, [r4, #11]
    2f24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2f28:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    2f2a:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    2f2c:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2f2e:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    2f30:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2f32:	46ac      	mov	ip, r5
    2f34:	4623      	mov	r3, r4
    2f36:	2104      	movs	r1, #4
    2f38:	2003      	movs	r0, #3
}
    2f3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2f3e:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    2f40:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    2f42:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    2f44:	788a      	ldrb	r2, [r1, #2]
    2f46:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    2f48:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    2f4c:	1a9b      	subs	r3, r3, r2
    2f4e:	b2db      	uxtb	r3, r3
    2f50:	2b01      	cmp	r3, #1
    2f52:	d1d3      	bne.n	2efc <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    2f54:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    2f58:	3a01      	subs	r2, #1
    2f5a:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    2f5c:	f1b9 0f00 	cmp.w	r9, #0
    2f60:	d0cc      	beq.n	2efc <ticker_worker+0x2e>
					   ticks_expired -
    2f62:	6948      	ldr	r0, [r1, #20]
    2f64:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    2f66:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    2f68:	1a28      	subs	r0, r5, r0
    2f6a:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    2f6c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2f70:	690b      	ldr	r3, [r1, #16]
    2f72:	6a49      	ldr	r1, [r1, #36]	; 0x24
    2f74:	47c8      	blx	r9
    2f76:	e7c1      	b.n	2efc <ticker_worker+0x2e>
    2f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00002f7c <ticker_job>:
{
    2f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    2f80:	7fc2      	ldrb	r2, [r0, #31]
{
    2f82:	b093      	sub	sp, #76	; 0x4c
    2f84:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    2f86:	2a00      	cmp	r2, #0
    2f88:	f040 83b5 	bne.w	36f6 <ticker_job+0x77a>
	ticks_previous = instance->ticks_current;
    2f8c:	6943      	ldr	r3, [r0, #20]
    2f8e:	9305      	str	r3, [sp, #20]
	instance->job_guard = 1;
    2f90:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    2f92:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    2f94:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    2f96:	7ac0      	ldrb	r0, [r0, #11]
    2f98:	4298      	cmp	r0, r3
    2f9a:	f000 808f 	beq.w	30bc <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    2f9e:	440b      	add	r3, r1
    2fa0:	b2db      	uxtb	r3, r3
			first = 0;
    2fa2:	2b02      	cmp	r3, #2
    2fa4:	bf08      	it	eq
    2fa6:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    2fa8:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    2fac:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    2fb0:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
    2fb2:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    2fb6:	9b05      	ldr	r3, [sp, #20]
    2fb8:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    2fba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2fbe:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    2fc2:	f89b 301d 	ldrb.w	r3, [fp, #29]
    2fc6:	9303      	str	r3, [sp, #12]
	node = &instance->node[0];
    2fc8:	f8db 3000 	ldr.w	r3, [fp]
    2fcc:	9304      	str	r3, [sp, #16]
	users = &instance->user[0];
    2fce:	f8db 3004 	ldr.w	r3, [fp, #4]
    2fd2:	930b      	str	r3, [sp, #44]	; 0x2c
    2fd4:	f89b 3009 	ldrb.w	r3, [fp, #9]
    2fd8:	3b01      	subs	r3, #1
    2fda:	b2db      	uxtb	r3, r3
    2fdc:	9302      	str	r3, [sp, #8]
	pending = 0;
    2fde:	2300      	movs	r3, #0
    2fe0:	9307      	str	r3, [sp, #28]
	insert_head = TICKER_NULL;
    2fe2:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    2fe6:	9b02      	ldr	r3, [sp, #8]
    2fe8:	2bff      	cmp	r3, #255	; 0xff
    2fea:	d16a      	bne.n	30c2 <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    2fec:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    2ff0:	9a03      	ldr	r2, [sp, #12]
    2ff2:	1a9b      	subs	r3, r3, r2
    2ff4:	bf18      	it	ne
    2ff6:	2301      	movne	r3, #1
    2ff8:	9302      	str	r3, [sp, #8]
	if (flag_elapsed) {
    2ffa:	9b01      	ldr	r3, [sp, #4]
    2ffc:	b1e3      	cbz	r3, 3038 <ticker_job+0xbc>
	node = &instance->node[0];
    2ffe:	f8db 3000 	ldr.w	r3, [fp]
    3002:	9304      	str	r3, [sp, #16]
	ticks_expired = 0;
    3004:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    3008:	f89b 601d 	ldrb.w	r6, [fp, #29]
    300c:	2eff      	cmp	r6, #255	; 0xff
    300e:	d00c      	beq.n	302a <ticker_job+0xae>
		ticker = &node[id_expired];
    3010:	b237      	sxth	r7, r6
    3012:	9b04      	ldr	r3, [sp, #16]
    3014:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    3018:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    301c:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    301e:	4545      	cmp	r5, r8
    3020:	f240 8136 	bls.w	3290 <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    3024:	eba5 0508 	sub.w	r5, r5, r8
    3028:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    302a:	9b02      	ldr	r3, [sp, #8]
    302c:	9a01      	ldr	r2, [sp, #4]
    302e:	9903      	ldr	r1, [sp, #12]
    3030:	42b1      	cmp	r1, r6
    3032:	bf18      	it	ne
    3034:	4613      	movne	r3, r2
    3036:	9302      	str	r3, [sp, #8]
	node = &instance->node[0];
    3038:	f8db 3000 	ldr.w	r3, [fp]
    303c:	9308      	str	r3, [sp, #32]
	users = &instance->user[0];
    303e:	f8db 3004 	ldr.w	r3, [fp, #4]
    3042:	9310      	str	r3, [sp, #64]	; 0x40
    3044:	f89b 3009 	ldrb.w	r3, [fp, #9]
    3048:	3b01      	subs	r3, #1
    304a:	b2db      	uxtb	r3, r3
    304c:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    304e:	9b01      	ldr	r3, [sp, #4]
    3050:	2bff      	cmp	r3, #255	; 0xff
    3052:	f040 8170 	bne.w	3336 <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    3056:	f89b 301d 	ldrb.w	r3, [fp, #29]
    305a:	9a03      	ldr	r2, [sp, #12]
    305c:	4293      	cmp	r3, r2
	if (!pending) {
    305e:	9b07      	ldr	r3, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
    3060:	f040 8340 	bne.w	36e4 <ticker_job+0x768>
	if (!pending) {
    3064:	b95b      	cbnz	r3, 307e <ticker_job+0x102>
    3066:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    306a:	f8db 3004 	ldr.w	r3, [fp, #4]
    306e:	9301      	str	r3, [sp, #4]
    3070:	3c01      	subs	r4, #1
    3072:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    3074:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    3078:	2cff      	cmp	r4, #255	; 0xff
    307a:	f040 82a0 	bne.w	35be <ticker_job+0x642>
	instance->job_guard = 0;
    307e:	2300      	movs	r3, #0
    3080:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    3084:	9b02      	ldr	r3, [sp, #8]
    3086:	b14b      	cbz	r3, 309c <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    3088:	f89b 301d 	ldrb.w	r3, [fp, #29]
    308c:	2bff      	cmp	r3, #255	; 0xff
    308e:	f040 82e9 	bne.w	3664 <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    3092:	f006 ff47 	bl	9f24 <cntr_stop>
    3096:	b908      	cbnz	r0, 309c <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    3098:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    309c:	f89b 301f 	ldrb.w	r3, [fp, #31]
    30a0:	2b00      	cmp	r3, #0
    30a2:	f000 8328 	beq.w	36f6 <ticker_job+0x77a>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    30a6:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    30aa:	465b      	mov	r3, fp
    30ac:	2201      	movs	r2, #1
    30ae:	2103      	movs	r1, #3
    30b0:	2004      	movs	r0, #4
    30b2:	46a4      	mov	ip, r4
}
    30b4:	b013      	add	sp, #76	; 0x4c
    30b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    30ba:	4760      	bx	ip
		flag_elapsed = 0;
    30bc:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0;
    30be:	4690      	mov	r8, r2
    30c0:	e77f      	b.n	2fc2 <ticker_job+0x46>
		user = &users[count_user];
    30c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    30c4:	9a02      	ldr	r2, [sp, #8]
    30c6:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    30ca:	687b      	ldr	r3, [r7, #4]
    30cc:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
    30ce:	78f9      	ldrb	r1, [r7, #3]
    30d0:	78be      	ldrb	r6, [r7, #2]
    30d2:	428e      	cmp	r6, r1
    30d4:	f000 80d7 	beq.w	3286 <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    30d8:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
    30da:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    30dc:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    30e0:	0112      	lsls	r2, r2, #4
    30e2:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    30e4:	1c73      	adds	r3, r6, #1
    30e6:	b2db      	uxtb	r3, r3
				middle = 0;
    30e8:	4298      	cmp	r0, r3
    30ea:	bf08      	it	eq
    30ec:	2300      	moveq	r3, #0
			user->middle = middle;
    30ee:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    30f0:	9b06      	ldr	r3, [sp, #24]
    30f2:	5c9a      	ldrb	r2, [r3, r2]
    30f4:	2a03      	cmp	r2, #3
    30f6:	d9eb      	bls.n	30d0 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    30f8:	2a05      	cmp	r2, #5
    30fa:	d817      	bhi.n	312c <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    30fc:	7869      	ldrb	r1, [r5, #1]
    30fe:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    3102:	930a      	str	r3, [sp, #40]	; 0x28
    3104:	980a      	ldr	r0, [sp, #40]	; 0x28
    3106:	9b04      	ldr	r3, [sp, #16]
    3108:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    310c:	7863      	ldrb	r3, [r4, #1]
    310e:	78a0      	ldrb	r0, [r4, #2]
    3110:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    3112:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    3116:	d009      	beq.n	312c <ticker_job+0x1b0>
			    (state == 0) ||
    3118:	2a04      	cmp	r2, #4
    311a:	d10c      	bne.n	3136 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    311c:	686a      	ldr	r2, [r5, #4]
    311e:	b952      	cbnz	r2, 3136 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    3120:	68aa      	ldr	r2, [r5, #8]
    3122:	b942      	cbnz	r2, 3136 <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    3124:	68ea      	ldr	r2, [r5, #12]
    3126:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    312a:	d104      	bne.n	3136 <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    312c:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    312e:	4628      	mov	r0, r5
    3130:	f7ff fec3 	bl	2eba <ticker_job_op_cb>
    3134:	e7cb      	b.n	30ce <ticker_job+0x152>
			if (state == 1) {
    3136:	2b01      	cmp	r3, #1
    3138:	f040 809b 	bne.w	3272 <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    313c:	4658      	mov	r0, fp
    313e:	f7ff fe72 	bl	2e26 <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    3142:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    3144:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    3146:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    3148:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    314a:	f040 8084 	bne.w	3256 <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    314e:	f8db 3014 	ldr.w	r3, [fp, #20]
    3152:	9308      	str	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    3154:	f006 fefe 	bl	9f54 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3158:	9b08      	ldr	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    315a:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    315c:	1ac3      	subs	r3, r0, r3
    315e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    3162:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    3164:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3166:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    3168:	bf9e      	ittt	ls
    316a:	6962      	ldrls	r2, [r4, #20]
    316c:	1b92      	subls	r2, r2, r6
    316e:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    3170:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    3172:	bf96      	itet	ls
    3174:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    3176:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    3178:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    317a:	b18a      	cbz	r2, 31a0 <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    317c:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    317e:	b179      	cbz	r1, 31a0 <ticker_job+0x224>
		user_op->params.update.lazy--;
    3180:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    3184:	fa1f fe8e 	uxth.w	lr, lr
    3188:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    318c:	429a      	cmp	r2, r3
    318e:	d32b      	bcc.n	31e8 <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    3190:	f8df 9324 	ldr.w	r9, [pc, #804]	; 34b8 <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    3194:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    3198:	45e6      	cmp	lr, ip
    319a:	d847      	bhi.n	322c <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    319c:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    31a0:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    31a2:	9908      	ldr	r1, [sp, #32]
	ticker->ticks_to_expire = ticks_to_expire +
    31a4:	4413      	add	r3, r2
    31a6:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    31a8:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    31aa:	6963      	ldr	r3, [r4, #20]
    31ac:	4413      	add	r3, r2
    31ae:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    31b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    31b2:	4620      	mov	r0, r4
    31b4:	f7ff fe63 	bl	2e7e <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    31b8:	69a2      	ldr	r2, [r4, #24]
    31ba:	892b      	ldrh	r3, [r5, #8]
    31bc:	4413      	add	r3, r2
    31be:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    31c0:	896a      	ldrh	r2, [r5, #10]
    31c2:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    31c4:	bf8c      	ite	hi
    31c6:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    31c8:	2300      	movls	r3, #0
    31ca:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    31cc:	7bab      	ldrb	r3, [r5, #14]
    31ce:	b103      	cbz	r3, 31d2 <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    31d0:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    31d2:	9b04      	ldr	r3, [sp, #16]
    31d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    31d6:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    31da:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    31dc:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    31e0:	3301      	adds	r3, #1
    31e2:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    31e4:	2100      	movs	r1, #0
    31e6:	e7a2      	b.n	312e <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    31e8:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    31ec:	45e6      	cmp	lr, ip
    31ee:	d2cf      	bcs.n	3190 <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    31f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    31f2:	4eaf      	ldr	r6, [pc, #700]	; (34b0 <ticker_job+0x534>)
    31f4:	48af      	ldr	r0, [pc, #700]	; (34b4 <ticker_job+0x538>)
    31f6:	198e      	adds	r6, r1, r6
    31f8:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    31fa:	bf81      	itttt	hi
    31fc:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    3200:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    3204:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    3208:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    320a:	6a66      	ldr	r6, [r4, #36]	; 0x24
    320c:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    320e:	bf8c      	ite	hi
    3210:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    3214:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    3218:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    321a:	4491      	add	r9, r2
			ticker->lazy_current--;
    321c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    3220:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    3222:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    3226:	f8a4 c01e 	strh.w	ip, [r4, #30]
    322a:	e7af      	b.n	318c <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    322c:	6a66      	ldr	r6, [r4, #36]	; 0x24
    322e:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    3230:	48a0      	ldr	r0, [pc, #640]	; (34b4 <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    3232:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    3234:	499e      	ldr	r1, [pc, #632]	; (34b0 <ticker_job+0x534>)
    3236:	1871      	adds	r1, r6, r1
    3238:	4281      	cmp	r1, r0
	return 0;
    323a:	bf8e      	itee	hi
    323c:	2100      	movhi	r1, #0
		return 1;
    323e:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    3240:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    3242:	4411      	add	r1, r2
			ticker->lazy_current++;
    3244:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    3248:	bf8c      	ite	hi
    324a:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    324c:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    324e:	440b      	add	r3, r1
			ticker->lazy_current++;
    3250:	f8a4 c01e 	strh.w	ip, [r4, #30]
    3254:	e79e      	b.n	3194 <ticker_job+0x218>
		ticker->req = ticker->ack;
    3256:	78a3      	ldrb	r3, [r4, #2]
    3258:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    325a:	786b      	ldrb	r3, [r5, #1]
    325c:	f89b 201c 	ldrb.w	r2, [fp, #28]
    3260:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    3262:	bf01      	itttt	eq
    3264:	23ff      	moveq	r3, #255	; 0xff
    3266:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    326a:	2300      	moveq	r3, #0
    326c:	f8cb 3018 	streq.w	r3, [fp, #24]
    3270:	e7b8      	b.n	31e4 <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    3272:	2104      	movs	r1, #4
    3274:	465b      	mov	r3, fp
    3276:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    327a:	2201      	movs	r2, #1
    327c:	4608      	mov	r0, r1
    327e:	47a0      	blx	r4
				pending = 1;
    3280:	2301      	movs	r3, #1
				user->middle = prev;
    3282:	70be      	strb	r6, [r7, #2]
				pending = 1;
    3284:	9307      	str	r3, [sp, #28]
    3286:	9b02      	ldr	r3, [sp, #8]
    3288:	3b01      	subs	r3, #1
    328a:	b2db      	uxtb	r3, r3
    328c:	9302      	str	r3, [sp, #8]
    328e:	e6aa      	b.n	2fe6 <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    3290:	f8db 3018 	ldr.w	r3, [fp, #24]
    3294:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    3296:	bf29      	itett	cs
    3298:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    329a:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    329c:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    32a0:	2300      	movcs	r3, #0
    32a2:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    32a6:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    32a8:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    32aa:	b11b      	cbz	r3, 32b4 <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    32ac:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    32b0:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    32b4:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    32b6:	9b04      	ldr	r3, [sp, #16]
		ticker->ticks_to_expire = 0;
    32b8:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    32ba:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    32be:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    32c2:	f8d4 e004 	ldr.w	lr, [r4, #4]
    32c6:	f1be 0f00 	cmp.w	lr, #0
    32ca:	d030      	beq.n	332e <ticker_job+0x3b2>
    32cc:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    32ce:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 34b4 <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    32d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    32d4:	6a21      	ldr	r1, [r4, #32]
    32d6:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    32d8:	4975      	ldr	r1, [pc, #468]	; (34b0 <ticker_job+0x534>)
    32da:	1859      	adds	r1, r3, r1
    32dc:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    32de:	bf9f      	itttt	ls
    32e0:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    32e4:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    32e8:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    32ec:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    32ee:	bf92      	itee	ls
    32f0:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    32f2:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    32f4:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    32f6:	4473      	add	r3, lr
			while (count--) {
    32f8:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    32fc:	441a      	add	r2, r3
			while (count--) {
    32fe:	d2e8      	bcs.n	32d2 <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    3300:	9b05      	ldr	r3, [sp, #20]
			ticker->ticks_to_expire = ticks_to_expire;
    3302:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    3304:	f8db 1014 	ldr.w	r1, [fp, #20]
    3308:	eb03 0209 	add.w	r2, r3, r9
    330c:	4620      	mov	r0, r4
    330e:	f7ff fdb6 	bl	2e7e <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    3312:	8ba3      	ldrh	r3, [r4, #28]
    3314:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    3316:	2300      	movs	r3, #0
    3318:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    331a:	9b04      	ldr	r3, [sp, #16]
    331c:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    3320:	7863      	ldrb	r3, [r4, #1]
    3322:	3301      	adds	r3, #1
    3324:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    3326:	eba8 0805 	sub.w	r8, r8, r5
    332a:	46b2      	mov	sl, r6
    332c:	e66c      	b.n	3008 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    332e:	78a3      	ldrb	r3, [r4, #2]
    3330:	7063      	strb	r3, [r4, #1]
    3332:	4656      	mov	r6, sl
    3334:	e7f7      	b.n	3326 <ticker_job+0x3aa>
		user = &users[count_user];
    3336:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3338:	9a01      	ldr	r2, [sp, #4]
    333a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    333e:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
    3340:	685b      	ldr	r3, [r3, #4]
    3342:	930a      	str	r3, [sp, #40]	; 0x28
		user_ops_first = user->first;
    3344:	9b04      	ldr	r3, [sp, #16]
    3346:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    334a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    334e:	f000 808e 	beq.w	346e <ticker_job+0x4f2>
				ticker = &node[id_insert];
    3352:	fa0f f38a 	sxth.w	r3, sl
    3356:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    335a:	9a08      	ldr	r2, [sp, #32]
				insert_head = ticker->next;
    335c:	46d0      	mov	r8, sl
    335e:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    3362:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    3366:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    3368:	f8db 3000 	ldr.w	r3, [fp]
    336c:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker->next = TICKER_NULL;
    336e:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    3370:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    3372:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    3374:	8be3      	ldrh	r3, [r4, #30]
    3376:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    3378:	bf86      	itte	hi
    337a:	1a9b      	subhi	r3, r3, r2
    337c:	b29b      	uxthhi	r3, r3
		skip = 0;
    337e:	2300      	movls	r3, #0
    3380:	930c      	str	r3, [sp, #48]	; 0x30
	ticker_new = &node[id];
    3382:	fa0f f388 	sxth.w	r3, r8
    3386:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    338a:	00db      	lsls	r3, r3, #3
    338c:	9311      	str	r3, [sp, #68]	; 0x44
    338e:	9b11      	ldr	r3, [sp, #68]	; 0x44
	node = &instance->node[0];
    3390:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    3394:	f8db 0018 	ldr.w	r0, [fp, #24]
    3398:	9005      	str	r0, [sp, #20]
	ticker_new = &node[id];
    339a:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    339e:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    33a0:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    33a4:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    33a8:	9309      	str	r3, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
    33aa:	9006      	str	r0, [sp, #24]
	while ((current != TICKER_NULL) &&
    33ac:	2bff      	cmp	r3, #255	; 0xff
    33ae:	d007      	beq.n	33c0 <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    33b0:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    33b4:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    33b8:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    33ba:	4281      	cmp	r1, r0
    33bc:	f200 80a9 	bhi.w	3512 <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    33c0:	f8de 0018 	ldr.w	r0, [lr, #24]
    33c4:	900d      	str	r0, [sp, #52]	; 0x34
	collide = ticker_by_slot_get(&node[0], current,
    33c6:	eb01 0c00 	add.w	ip, r1, r0
    33ca:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    33cc:	2eff      	cmp	r6, #255	; 0xff
    33ce:	f040 80ae 	bne.w	352e <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    33d2:	980d      	ldr	r0, [sp, #52]	; 0x34
    33d4:	b130      	cbz	r0, 33e4 <ticker_job+0x468>
    33d6:	9805      	ldr	r0, [sp, #20]
    33d8:	4281      	cmp	r1, r0
    33da:	f0c0 80bf 	bcc.w	355c <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    33de:	2eff      	cmp	r6, #255	; 0xff
    33e0:	f040 8185 	bne.w	36ee <ticker_job+0x772>
		if (previous == current) {
    33e4:	9809      	ldr	r0, [sp, #36]	; 0x24
		ticker_new->ticks_to_expire = ticks_to_expire;
    33e6:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    33ea:	4283      	cmp	r3, r0
			node[previous].next = id;
    33ec:	bf18      	it	ne
    33ee:	f9bd 0024 	ldrshne.w	r0, [sp, #36]	; 0x24
		ticker_new->next = current;
    33f2:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    33f6:	bf16      	itet	ne
    33f8:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    33fc:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    3400:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    3404:	2bff      	cmp	r3, #255	; 0xff
    3406:	d006      	beq.n	3416 <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    3408:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    340c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3410:	689a      	ldr	r2, [r3, #8]
    3412:	1a51      	subs	r1, r2, r1
    3414:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    3416:	78a3      	ldrb	r3, [r4, #2]
    3418:	3301      	adds	r3, #1
    341a:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    341c:	2100      	movs	r1, #0
			if (user_op) {
    341e:	2d00      	cmp	r5, #0
    3420:	d093      	beq.n	334a <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    3422:	4628      	mov	r0, r5
    3424:	f7ff fd49 	bl	2eba <ticker_job_op_cb>
    3428:	e78f      	b.n	334a <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    342a:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    342e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3430:	011b      	lsls	r3, r3, #4
    3432:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    3434:	f109 0201 	add.w	r2, r9, #1
    3438:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    343c:	9a04      	ldr	r2, [sp, #16]
    343e:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    3440:	454a      	cmp	r2, r9
    3442:	bf08      	it	eq
    3444:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    3448:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    344a:	5cd3      	ldrb	r3, [r2, r3]
    344c:	2b03      	cmp	r3, #3
    344e:	d10e      	bne.n	346e <ticker_job+0x4f2>
				id_insert = user_op->id;
    3450:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    3454:	9b08      	ldr	r3, [sp, #32]
    3456:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    345a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    345e:	7862      	ldrb	r2, [r4, #1]
    3460:	78a3      	ldrb	r3, [r4, #2]
    3462:	429a      	cmp	r2, r3
    3464:	d009      	beq.n	347a <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    3466:	2101      	movs	r1, #1
    3468:	4628      	mov	r0, r5
    346a:	f7ff fd26 	bl	2eba <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    346e:	9b04      	ldr	r3, [sp, #16]
    3470:	789b      	ldrb	r3, [r3, #2]
    3472:	454b      	cmp	r3, r9
    3474:	d1d9      	bne.n	342a <ticker_job+0x4ae>
    3476:	9b01      	ldr	r3, [sp, #4]
    3478:	e5e6      	b.n	3048 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    347a:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    347c:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    3480:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    3482:	692b      	ldr	r3, [r5, #16]
    3484:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    3486:	8aab      	ldrh	r3, [r5, #20]
    3488:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    348a:	69ab      	ldr	r3, [r5, #24]
    348c:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    348e:	69eb      	ldr	r3, [r5, #28]
    3490:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    3492:	6a2b      	ldr	r3, [r5, #32]
    3494:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    3496:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    3498:	68ab      	ldr	r3, [r5, #8]
    349a:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    349c:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    349e:	686a      	ldr	r2, [r5, #4]
    34a0:	4620      	mov	r0, r4
    34a2:	f7ff fcec 	bl	2e7e <ticks_to_expire_prep>
	ticker->force = 1;
    34a6:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    34a8:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    34aa:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    34ac:	70e3      	strb	r3, [r4, #3]
    34ae:	e75b      	b.n	3368 <ticker_job+0x3ec>
    34b0:	ff172b5a 	.word	0xff172b5a
    34b4:	7f172b59 	.word	0x7f172b59
    34b8:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    34bc:	6860      	ldr	r0, [r4, #4]
    34be:	2800      	cmp	r0, #0
    34c0:	d07b      	beq.n	35ba <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    34c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    34c4:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    34c6:	4b8d      	ldr	r3, [pc, #564]	; (36fc <ticker_job+0x780>)
	ticker->remainder_current += ticker->remainder_periodic;
    34c8:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    34ca:	498d      	ldr	r1, [pc, #564]	; (3700 <ticker_job+0x784>)
    34cc:	18d3      	adds	r3, r2, r3
    34ce:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    34d0:	bf9c      	itt	ls
    34d2:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    34d6:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    34da:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    34dc:	bf8b      	itete	hi
    34de:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    34e0:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    34e4:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    34e6:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    34e8:	4403      	add	r3, r0
		return 1;
    34ea:	bf98      	it	ls
    34ec:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    34ee:	4413      	add	r3, r2
			ticker->lazy_current++;
    34f0:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    34f2:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    34f4:	3201      	adds	r2, #1
    34f6:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    34f8:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    34fa:	4293      	cmp	r3, r2
    34fc:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    3500:	bf89      	itett	hi
    3502:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    3504:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    3506:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    3508:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    350a:	bf9c      	itt	ls
    350c:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    350e:	60a1      	strls	r1, [r4, #8]
    3510:	e73d      	b.n	338e <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    3512:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    3514:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    3516:	b946      	cbnz	r6, 352a <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    3518:	9f05      	ldr	r7, [sp, #20]
    351a:	42b8      	cmp	r0, r7
    351c:	d200      	bcs.n	3520 <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    351e:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    3520:	9309      	str	r3, [sp, #36]	; 0x24
    3522:	9605      	str	r6, [sp, #20]
    3524:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    3528:	e740      	b.n	33ac <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    352a:	9306      	str	r3, [sp, #24]
    352c:	e7f8      	b.n	3520 <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    352e:	b230      	sxth	r0, r6
    3530:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3534:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    3538:	970e      	str	r7, [sp, #56]	; 0x38
		ticks_to_expire = ticker->ticks_to_expire;
    353a:	68bf      	ldr	r7, [r7, #8]
    353c:	970f      	str	r7, [sp, #60]	; 0x3c
		if (ticks_slot <= ticks_to_expire) {
    353e:	4567      	cmp	r7, ip
    3540:	d20a      	bcs.n	3558 <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    3542:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    3544:	69bf      	ldr	r7, [r7, #24]
    3546:	2f00      	cmp	r7, #0
    3548:	f47f af43 	bne.w	33d2 <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    354c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    354e:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    3552:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    3556:	e739      	b.n	33cc <ticker_job+0x450>
			return TICKER_NULL;
    3558:	26ff      	movs	r6, #255	; 0xff
    355a:	e73a      	b.n	33d2 <ticker_job+0x456>
	while (id_insert !=
    355c:	9b06      	ldr	r3, [sp, #24]
    355e:	4598      	cmp	r8, r3
    3560:	f43f af59 	beq.w	3416 <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    3564:	9b06      	ldr	r3, [sp, #24]
    3566:	2bff      	cmp	r3, #255	; 0xff
    3568:	d0a8      	beq.n	34bc <ticker_job+0x540>
    356a:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    356c:	b233      	sxth	r3, r6
    356e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3572:	9305      	str	r3, [sp, #20]
    3574:	9a05      	ldr	r2, [sp, #20]
    3576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3578:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    357c:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    357e:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    3580:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    3582:	bf88      	it	hi
    3584:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    3586:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    3588:	bf8c      	ite	hi
    358a:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    358c:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    358e:	2a00      	cmp	r2, #0
    3590:	d094      	beq.n	34bc <ticker_job+0x540>
    3592:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3594:	4293      	cmp	r3, r2
    3596:	d891      	bhi.n	34bc <ticker_job+0x540>
			    skip_collide <= skip &&
    3598:	78fa      	ldrb	r2, [r7, #3]
    359a:	78e3      	ldrb	r3, [r4, #3]
    359c:	429a      	cmp	r2, r3
    359e:	d28d      	bcs.n	34bc <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    35a0:	4631      	mov	r1, r6
    35a2:	4658      	mov	r0, fp
    35a4:	f7ff fc3f 	bl	2e26 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    35a8:	78bb      	ldrb	r3, [r7, #2]
    35aa:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    35ac:	9a05      	ldr	r2, [sp, #20]
    35ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				ticker_collide->ticks_to_expire =
    35b0:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    35b2:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    35b6:	46b2      	mov	sl, r6
    35b8:	e6e9      	b.n	338e <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    35ba:	2101      	movs	r1, #1
    35bc:	e72f      	b.n	341e <ticker_job+0x4a2>
		user = &users[count_user];
    35be:	9b01      	ldr	r3, [sp, #4]
    35c0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    35c4:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    35c6:	786b      	ldrb	r3, [r5, #1]
    35c8:	78ea      	ldrb	r2, [r5, #3]
    35ca:	429a      	cmp	r2, r3
    35cc:	d102      	bne.n	35d4 <ticker_job+0x658>
    35ce:	3c01      	subs	r4, #1
    35d0:	b2e4      	uxtb	r4, r4
    35d2:	e551      	b.n	3078 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    35d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    35d8:	011b      	lsls	r3, r3, #4
    35da:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    35dc:	5cf3      	ldrb	r3, [r6, r3]
    35de:	2b01      	cmp	r3, #1
    35e0:	d025      	beq.n	362e <ticker_job+0x6b2>
    35e2:	2b02      	cmp	r3, #2
    35e4:	d12a      	bne.n	363c <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    35e6:	f8d2 c004 	ldr.w	ip, [r2, #4]
    35ea:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    35ec:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    35f0:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    35f4:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    35f8:	28ff      	cmp	r0, #255	; 0xff
    35fa:	d004      	beq.n	3606 <ticker_job+0x68a>
    35fc:	6819      	ldr	r1, [r3, #0]
    35fe:	f8db 7014 	ldr.w	r7, [fp, #20]
    3602:	42b9      	cmp	r1, r7
    3604:	d023      	beq.n	364e <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    3606:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    360a:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    360e:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    3610:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    3612:	29ff      	cmp	r1, #255	; 0xff
    3614:	d007      	beq.n	3626 <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    3616:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    361a:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    361e:	6987      	ldr	r7, [r0, #24]
    3620:	6880      	ldr	r0, [r0, #8]
    3622:	b1df      	cbz	r7, 365c <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    3624:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    3626:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    362a:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    362e:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    3630:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    3634:	b113      	cbz	r3, 363c <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    3636:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    3638:	2000      	movs	r0, #0
    363a:	4798      	blx	r3
			first = user->first + 1;
    363c:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    363e:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    3640:	3301      	adds	r3, #1
    3642:	b2db      	uxtb	r3, r3
				first = 0;
    3644:	429a      	cmp	r2, r3
    3646:	bf08      	it	eq
    3648:	2300      	moveq	r3, #0
			user->first = first;
    364a:	706b      	strb	r3, [r5, #1]
    364c:	e7bb      	b.n	35c6 <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    364e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    3652:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    3656:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    365a:	e7da      	b.n	3612 <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    365c:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    365e:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    3662:	e7d6      	b.n	3612 <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    3664:	9b03      	ldr	r3, [sp, #12]
    3666:	2bff      	cmp	r3, #255	; 0xff
    3668:	d107      	bne.n	367a <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    366a:	f006 fc73 	bl	9f54 <cntr_cnt_get>
    366e:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    3670:	f006 fc4a 	bl	9f08 <cntr_start>
    3674:	b908      	cbnz	r0, 367a <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    3676:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    367a:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    367e:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    3682:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    3686:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    368a:	260a      	movs	r6, #10
    368c:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    368e:	f006 fc61 	bl	9f54 <cntr_cnt_get>
		cc = instance->ticks_current;
    3692:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3696:	1b03      	subs	r3, r0, r4
    3698:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    369c:	3303      	adds	r3, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
    369e:	42ab      	cmp	r3, r5
    36a0:	bf2c      	ite	cs
    36a2:	18e4      	addcs	r4, r4, r3
    36a4:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    36a6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    36aa:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    36ac:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    36b0:	4620      	mov	r0, r4
    36b2:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    36b4:	f006 fc4e 	bl	9f54 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    36b8:	1bc0      	subs	r0, r0, r7
    36ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    36be:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    36c0:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    36c2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    36c6:	42a0      	cmp	r0, r4
    36c8:	f67f ace8 	bls.w	309c <ticker_job+0x120>
		LL_ASSERT(i);
    36cc:	3e01      	subs	r6, #1
    36ce:	d1de      	bne.n	368e <ticker_job+0x712>
    36d0:	4040      	eors	r0, r0
    36d2:	f380 8811 	msr	BASEPRI, r0
    36d6:	f04f 0004 	mov.w	r0, #4
    36da:	df02      	svc	2
	instance->job_guard = 0;
    36dc:	2300      	movs	r3, #0
    36de:	f88b 301e 	strb.w	r3, [fp, #30]
    36e2:	e4d1      	b.n	3088 <ticker_job+0x10c>
	if (!pending) {
    36e4:	2b00      	cmp	r3, #0
    36e6:	d1f9      	bne.n	36dc <ticker_job+0x760>
		flag_compare_update = 1;
    36e8:	2301      	movs	r3, #1
    36ea:	9302      	str	r3, [sp, #8]
    36ec:	e4bb      	b.n	3066 <ticker_job+0xea>
	while (id_insert !=
    36ee:	45b0      	cmp	r8, r6
    36f0:	f47f af3c 	bne.w	356c <ticker_job+0x5f0>
    36f4:	e68f      	b.n	3416 <ticker_job+0x49a>
}
    36f6:	b013      	add	sp, #76	; 0x4c
    36f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    36fc:	ff172b5a 	.word	0xff172b5a
    3700:	7f172b59 	.word	0x7f172b59

00003704 <ticker_init>:
{
    3704:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    3706:	4d1a      	ldr	r5, [pc, #104]	; (3770 <ticker_init+0x6c>)
{
    3708:	9f05      	ldr	r7, [sp, #20]
    370a:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    370e:	262c      	movs	r6, #44	; 0x2c
    3710:	4346      	muls	r6, r0
    3712:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    3716:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    3718:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    371c:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    371e:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    3722:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    3726:	3b01      	subs	r3, #1
    3728:	b2db      	uxtb	r3, r3
    372a:	2bff      	cmp	r3, #255	; 0xff
    372c:	d111      	bne.n	3752 <ticker_init+0x4e>
	if (count_op) {
    372e:	b9ec      	cbnz	r4, 376c <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    3730:	222c      	movs	r2, #44	; 0x2c
    3732:	fb02 5200 	mla	r2, r2, r0, r5
    3736:	9908      	ldr	r1, [sp, #32]
    3738:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    373a:	9909      	ldr	r1, [sp, #36]	; 0x24
    373c:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    373e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3740:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    3742:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    3744:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    3746:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    3748:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    374a:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    374c:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    374e:	4620      	mov	r0, r4
    3750:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    3752:	b21a      	sxth	r2, r3
    3754:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    3758:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    375a:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    375e:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    3762:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    3764:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    3768:	b2e4      	uxtb	r4, r4
    376a:	e7dc      	b.n	3726 <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    376c:	2001      	movs	r0, #1
}
    376e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3770:	20000254 	.word	0x20000254

00003774 <ticker_trigger>:
	instance = &_instance[instance_index];
    3774:	4a07      	ldr	r2, [pc, #28]	; (3794 <ticker_trigger+0x20>)
    3776:	212c      	movs	r1, #44	; 0x2c
    3778:	fb00 2301 	mla	r3, r0, r1, r2
{
    377c:	b410      	push	{r4}
	if (instance->sched_cb) {
    377e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    3780:	b12c      	cbz	r4, 378e <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    3782:	46a4      	mov	ip, r4
    3784:	2201      	movs	r2, #1
    3786:	2103      	movs	r1, #3
    3788:	2002      	movs	r0, #2
}
    378a:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    378c:	4760      	bx	ip
}
    378e:	bc10      	pop	{r4}
    3790:	4770      	bx	lr
    3792:	bf00      	nop
    3794:	20000254 	.word	0x20000254

00003798 <ticker_start>:
{
    3798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    379c:	4f25      	ldr	r7, [pc, #148]	; (3834 <ticker_start+0x9c>)
    379e:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    37a2:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    37a4:	fb08 7000 	mla	r0, r8, r0, r7
    37a8:	fa0f fc81 	sxth.w	ip, r1
    37ac:	f8d0 e004 	ldr.w	lr, [r0, #4]
    37b0:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    37b4:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    37b8:	78f4      	ldrb	r4, [r6, #3]
    37ba:	1c65      	adds	r5, r4, #1
    37bc:	b2ed      	uxtb	r5, r5
		last = 0;
    37be:	45ae      	cmp	lr, r5
    37c0:	bf98      	it	ls
    37c2:	2500      	movls	r5, #0
	if (last == user->first) {
    37c4:	f896 e001 	ldrb.w	lr, [r6, #1]
    37c8:	45ae      	cmp	lr, r5
    37ca:	d02f      	beq.n	382c <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    37cc:	f8d6 c004 	ldr.w	ip, [r6, #4]
    37d0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    37d4:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    37d8:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    37dc:	f04f 0a03 	mov.w	sl, #3
    37e0:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    37e4:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    37e6:	9b08      	ldr	r3, [sp, #32]
    37e8:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    37ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    37ec:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    37ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    37f0:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    37f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    37f4:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    37f6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    37fa:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    37fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    37fe:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    3800:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3802:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    3804:	2302      	movs	r3, #2
    3806:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    3808:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    380a:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    380c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    380e:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    3810:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    3812:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3814:	6a45      	ldr	r5, [r0, #36]	; 0x24
    3816:	6a03      	ldr	r3, [r0, #32]
    3818:	4608      	mov	r0, r1
    381a:	4798      	blx	r3
    381c:	fb09 7308 	mla	r3, r9, r8, r7
    3820:	2200      	movs	r2, #0
    3822:	2104      	movs	r1, #4
    3824:	47a8      	blx	r5
	return user_op->status;
    3826:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    382c:	2001      	movs	r0, #1
}
    382e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3832:	bf00      	nop
    3834:	20000254 	.word	0x20000254

00003838 <ticker_update>:
{
    3838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    383c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 38d0 <ticker_update+0x98>
    3840:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    3844:	fb0a 8e00 	mla	lr, sl, r0, r8
    3848:	b20f      	sxth	r7, r1
    384a:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    384e:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    3850:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    3854:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    3858:	78c4      	ldrb	r4, [r0, #3]
    385a:	1c66      	adds	r6, r4, #1
    385c:	b2f6      	uxtb	r6, r6
		last = 0;
    385e:	42b5      	cmp	r5, r6
    3860:	bf98      	it	ls
    3862:	2600      	movls	r6, #0
	if (last == user->first) {
    3864:	7845      	ldrb	r5, [r0, #1]
    3866:	42b5      	cmp	r5, r6
    3868:	d02f      	beq.n	38ca <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    386a:	f8d0 c004 	ldr.w	ip, [r0, #4]
    386e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3872:	0125      	lsls	r5, r4, #4
    3874:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    3878:	2704      	movs	r7, #4
    387a:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    387e:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    3880:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    3884:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    3886:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    388a:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    388c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    3890:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    3892:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    3896:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    3898:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    389c:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    389e:	2302      	movs	r3, #2
    38a0:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    38a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    38a4:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    38a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    38a8:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    38aa:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    38ac:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    38ae:	f8de 3020 	ldr.w	r3, [lr, #32]
    38b2:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    38b6:	4608      	mov	r0, r1
    38b8:	4798      	blx	r3
    38ba:	fb09 830a 	mla	r3, r9, sl, r8
    38be:	2200      	movs	r2, #0
    38c0:	4639      	mov	r1, r7
    38c2:	47a8      	blx	r5
	return user_op->status;
    38c4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    38c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    38ca:	2001      	movs	r0, #1
}
    38cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    38d0:	20000254 	.word	0x20000254

000038d4 <ticker_stop>:
{
    38d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    38d8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 3948 <ticker_stop+0x74>
    38dc:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    38e0:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    38e4:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    38e6:	f8de 0004 	ldr.w	r0, [lr, #4]
    38ea:	b20e      	sxth	r6, r1
    38ec:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    38f0:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    38f4:	78fc      	ldrb	r4, [r7, #3]
    38f6:	1c65      	adds	r5, r4, #1
    38f8:	b2ed      	uxtb	r5, r5
		last = 0;
    38fa:	42a8      	cmp	r0, r5
    38fc:	bf98      	it	ls
    38fe:	2500      	movls	r5, #0
	if (last == user->first) {
    3900:	7878      	ldrb	r0, [r7, #1]
    3902:	42a8      	cmp	r0, r5
    3904:	d01d      	beq.n	3942 <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    3906:	6878      	ldr	r0, [r7, #4]
    3908:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    390c:	0124      	lsls	r4, r4, #4
    390e:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    3910:	f04f 0c05 	mov.w	ip, #5
    3914:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    3918:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    391a:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    391c:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    391e:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    3920:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    3922:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    3924:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3926:	f8de 3020 	ldr.w	r3, [lr, #32]
    392a:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    392e:	4608      	mov	r0, r1
    3930:	4798      	blx	r3
    3932:	fb08 930a 	mla	r3, r8, sl, r9
    3936:	2200      	movs	r2, #0
    3938:	2104      	movs	r1, #4
    393a:	47a0      	blx	r4
	return user_op->status;
    393c:	6a70      	ldr	r0, [r6, #36]	; 0x24
    393e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    3942:	2001      	movs	r0, #1
}
    3944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3948:	20000254 	.word	0x20000254

0000394c <ticker_next_slot_get>:
{
    394c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    3950:	f8df 8078 	ldr.w	r8, [pc, #120]	; 39cc <ticker_next_slot_get+0x80>
    3954:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    3958:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    395a:	fb0a 8000 	mla	r0, sl, r0, r8
    395e:	fa0f fe81 	sxth.w	lr, r1
    3962:	6845      	ldr	r5, [r0, #4]
    3964:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    3968:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    396c:	78fc      	ldrb	r4, [r7, #3]
    396e:	1c66      	adds	r6, r4, #1
    3970:	b2f6      	uxtb	r6, r6
		last = 0;
    3972:	42b5      	cmp	r5, r6
    3974:	bf98      	it	ls
    3976:	2600      	movls	r6, #0
	if (last == user->first) {
    3978:	787d      	ldrb	r5, [r7, #1]
    397a:	42b5      	cmp	r5, r6
    397c:	d023      	beq.n	39c6 <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    397e:	f8d7 c004 	ldr.w	ip, [r7, #4]
    3982:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3986:	0125      	lsls	r5, r4, #4
    3988:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    398c:	f04f 0e02 	mov.w	lr, #2
    3990:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    3994:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    3996:	9b08      	ldr	r3, [sp, #32]
    3998:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    399a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    399c:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    399e:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    39a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    39a2:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    39a4:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    39a6:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    39aa:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    39ac:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    39ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
    39b0:	6a03      	ldr	r3, [r0, #32]
    39b2:	4608      	mov	r0, r1
    39b4:	4798      	blx	r3
    39b6:	fb09 830a 	mla	r3, r9, sl, r8
    39ba:	2200      	movs	r2, #0
    39bc:	2104      	movs	r1, #4
    39be:	47a8      	blx	r5
	return user_op->status;
    39c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    39c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    39c6:	2001      	movs	r0, #1
}
    39c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    39cc:	20000254 	.word	0x20000254

000039d0 <ticker_job_idle_get>:
{
    39d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    39d4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 3a44 <ticker_job_idle_get+0x74>
    39d8:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    39dc:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    39e0:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    39e2:	f8de 0004 	ldr.w	r0, [lr, #4]
    39e6:	b20e      	sxth	r6, r1
    39e8:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    39ec:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    39f0:	78fc      	ldrb	r4, [r7, #3]
    39f2:	1c65      	adds	r5, r4, #1
    39f4:	b2ed      	uxtb	r5, r5
		last = 0;
    39f6:	42a8      	cmp	r0, r5
    39f8:	bf98      	it	ls
    39fa:	2500      	movls	r5, #0
	if (last == user->first) {
    39fc:	7878      	ldrb	r0, [r7, #1]
    39fe:	42a8      	cmp	r0, r5
    3a00:	d01d      	beq.n	3a3e <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    3a02:	6878      	ldr	r0, [r7, #4]
    3a04:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3a08:	0124      	lsls	r4, r4, #4
    3a0a:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    3a0c:	f04f 0c01 	mov.w	ip, #1
    3a10:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    3a14:	20ff      	movs	r0, #255	; 0xff
    3a16:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    3a18:	2002      	movs	r0, #2
    3a1a:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    3a1c:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    3a1e:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    3a20:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3a22:	f8de 3020 	ldr.w	r3, [lr, #32]
    3a26:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    3a2a:	4608      	mov	r0, r1
    3a2c:	4798      	blx	r3
    3a2e:	fb08 930a 	mla	r3, r8, sl, r9
    3a32:	2200      	movs	r2, #0
    3a34:	2104      	movs	r1, #4
    3a36:	47a0      	blx	r4
	return user_op->status;
    3a38:	6a70      	ldr	r0, [r6, #36]	; 0x24
    3a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    3a3e:	2001      	movs	r0, #1
}
    3a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3a44:	20000254 	.word	0x20000254

00003a48 <ticker_job_sched>:
{
    3a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3a4c:	4c08      	ldr	r4, [pc, #32]	; (3a70 <ticker_job_sched+0x28>)
    3a4e:	252c      	movs	r5, #44	; 0x2c
    3a50:	fb05 4300 	mla	r3, r5, r0, r4
{
    3a54:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3a56:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    3a58:	6a1b      	ldr	r3, [r3, #32]
    3a5a:	4608      	mov	r0, r1
    3a5c:	4798      	blx	r3
    3a5e:	fb06 4305 	mla	r3, r6, r5, r4
    3a62:	46bc      	mov	ip, r7
    3a64:	2200      	movs	r2, #0
    3a66:	2104      	movs	r1, #4
}
    3a68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3a6c:	4760      	bx	ip
    3a6e:	bf00      	nop
    3a70:	20000254 	.word	0x20000254

00003a74 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    3a74:	f006 ba6e 	b.w	9f54 <cntr_cnt_get>

00003a78 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3a78:	1a40      	subs	r0, r0, r1
}
    3a7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3a7e:	4770      	bx	lr

00003a80 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    3a80:	b508      	push	{r3, lr}
    3a82:	4603      	mov	r3, r0
	if (addr_type > 1) {
    3a84:	2b01      	cmp	r3, #1
{
    3a86:	4608      	mov	r0, r1
	if (addr_type > 1) {
    3a88:	d80e      	bhi.n	3aa8 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    3a8a:	b133      	cbz	r3, 3a9a <ll_addr_get+0x1a>
		if (bdaddr) {
    3a8c:	b119      	cbz	r1, 3a96 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    3a8e:	2206      	movs	r2, #6
    3a90:	4906      	ldr	r1, [pc, #24]	; (3aac <ll_addr_get+0x2c>)
    3a92:	f7fc fd87 	bl	5a4 <memcpy>
		}

		return rnd_addr;
    3a96:	4805      	ldr	r0, [pc, #20]	; (3aac <ll_addr_get+0x2c>)
    3a98:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    3a9a:	b119      	cbz	r1, 3aa4 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    3a9c:	2206      	movs	r2, #6
    3a9e:	4904      	ldr	r1, [pc, #16]	; (3ab0 <ll_addr_get+0x30>)
    3aa0:	f7fc fd80 	bl	5a4 <memcpy>
	}

	return pub_addr;
    3aa4:	4802      	ldr	r0, [pc, #8]	; (3ab0 <ll_addr_get+0x30>)
}
    3aa6:	bd08      	pop	{r3, pc}
		return NULL;
    3aa8:	2000      	movs	r0, #0
    3aaa:	bd08      	pop	{r3, pc}
    3aac:	200002b2 	.word	0x200002b2
    3ab0:	200002ac 	.word	0x200002ac

00003ab4 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    3ab4:	b570      	push	{r4, r5, r6, lr}
    3ab6:	4606      	mov	r6, r0
    3ab8:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    3aba:	f004 fe45 	bl	8748 <ll_adv_is_enabled>
    3abe:	4604      	mov	r4, r0
    3ac0:	b110      	cbz	r0, 3ac8 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    3ac2:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    3ac4:	4620      	mov	r0, r4
    3ac6:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    3ac8:	f004 fe54 	bl	8774 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    3acc:	f010 0f06 	tst.w	r0, #6
    3ad0:	d1f7      	bne.n	3ac2 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    3ad2:	2206      	movs	r2, #6
    3ad4:	4629      	mov	r1, r5
	if (addr_type) {
    3ad6:	b11e      	cbz	r6, 3ae0 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    3ad8:	4802      	ldr	r0, [pc, #8]	; (3ae4 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    3ada:	f7fc fd63 	bl	5a4 <memcpy>
    3ade:	e7f1      	b.n	3ac4 <ll_addr_set+0x10>
    3ae0:	4801      	ldr	r0, [pc, #4]	; (3ae8 <ll_addr_set+0x34>)
    3ae2:	e7fa      	b.n	3ada <ll_addr_set+0x26>
    3ae4:	200002b2 	.word	0x200002b2
    3ae8:	200002ac 	.word	0x200002ac

00003aec <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    3aec:	2300      	movs	r3, #0
    3aee:	7003      	strb	r3, [r0, #0]
	*max = 0;
    3af0:	700b      	strb	r3, [r1, #0]
    3af2:	4770      	bx	lr

00003af4 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    3af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3af6:	4607      	mov	r7, r0
    3af8:	460e      	mov	r6, r1
	while (len) {
    3afa:	460c      	mov	r4, r1
    3afc:	1b35      	subs	r5, r6, r4
    3afe:	443d      	add	r5, r7
    3b00:	b18c      	cbz	r4, 3b26 <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    3b02:	f7fd fd41 	bl	1588 <sys_rand32_get>

		if (len >= sizeof(v)) {
    3b06:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    3b08:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    3b0a:	d907      	bls.n	3b1c <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    3b0c:	2204      	movs	r2, #4
    3b0e:	eb0d 0102 	add.w	r1, sp, r2
    3b12:	4628      	mov	r0, r5
    3b14:	f7fc fd46 	bl	5a4 <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    3b18:	3c04      	subs	r4, #4
    3b1a:	e7ef      	b.n	3afc <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    3b1c:	4622      	mov	r2, r4
    3b1e:	a901      	add	r1, sp, #4
    3b20:	4628      	mov	r0, r5
    3b22:	f7fc fd3f 	bl	5a4 <memcpy>
			break;
		}
	}

	return 0;
}
    3b26:	2000      	movs	r0, #0
    3b28:	b003      	add	sp, #12
    3b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003b2c <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    3b2c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    3b2e:	4802      	ldr	r0, [pc, #8]	; (3b38 <_hci_driver_init+0xc>)
    3b30:	f7fe ff62 	bl	29f8 <bt_hci_driver_register>

	return 0;
}
    3b34:	2000      	movs	r0, #0
    3b36:	bd08      	pop	{r3, pc}
    3b38:	0000c668 	.word	0x0000c668

00003b3c <hci_driver_send>:
{
    3b3c:	b510      	push	{r4, lr}
	if (!buf->len) {
    3b3e:	8983      	ldrh	r3, [r0, #12]
{
    3b40:	4604      	mov	r4, r0
	if (!buf->len) {
    3b42:	b15b      	cbz	r3, 3b5c <hci_driver_send+0x20>
	switch (type) {
    3b44:	7d03      	ldrb	r3, [r0, #20]
    3b46:	b94b      	cbnz	r3, 3b5c <hci_driver_send+0x20>
	evt = hci_cmd_handle(buf);
    3b48:	f000 fa62 	bl	4010 <hci_cmd_handle>
	if (evt) {
    3b4c:	b108      	cbz	r0, 3b52 <hci_driver_send+0x16>
		bt_recv_prio(evt);
    3b4e:	f7fe ff0d 	bl	296c <bt_recv_prio>
		net_buf_unref(buf);
    3b52:	4620      	mov	r0, r4
    3b54:	f006 ff96 	bl	aa84 <net_buf_unref>
	return err;
    3b58:	2000      	movs	r0, #0
    3b5a:	bd10      	pop	{r4, pc}
		return -EINVAL;
    3b5c:	f06f 0015 	mvn.w	r0, #21
}
    3b60:	bd10      	pop	{r4, pc}
	...

00003b64 <recv_thread>:
{
    3b64:	b573      	push	{r0, r1, r4, r5, r6, lr}
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    3b66:	4d1c      	ldr	r5, [pc, #112]	; (3bd8 <recv_thread+0x74>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    3b68:	2600      	movs	r6, #0
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    3b6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3b6e:	4628      	mov	r0, r5
    3b70:	f007 fa01 	bl	af76 <k_queue_get>
		if (node_rx && !buf) {
    3b74:	4604      	mov	r4, r0
    3b76:	b318      	cbz	r0, 3bc0 <recv_thread+0x5c>
	s8_t class = hci_get_class(node_rx);
    3b78:	f000 fe00 	bl	477c <hci_get_class>
	switch (class) {
    3b7c:	2802      	cmp	r0, #2
    3b7e:	9401      	str	r4, [sp, #4]
    3b80:	d821      	bhi.n	3bc6 <recv_thread+0x62>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    3b82:	2801      	cmp	r0, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    3b84:	bf0e      	itee	eq
    3b86:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    3b88:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    3b8c:	2001      	movne	r0, #1
    3b8e:	f7fe ff47 	bl	2a20 <bt_buf_get_rx>
    3b92:	4604      	mov	r4, r0
		if (buf) {
    3b94:	b118      	cbz	r0, 3b9e <recv_thread+0x3a>
			hci_evt_encode(node_rx, buf);
    3b96:	4601      	mov	r1, r0
    3b98:	9801      	ldr	r0, [sp, #4]
    3b9a:	f000 fd61 	bl	4660 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    3b9e:	9b01      	ldr	r3, [sp, #4]
    3ba0:	2100      	movs	r1, #0
    3ba2:	88d8      	ldrh	r0, [r3, #6]
    3ba4:	f004 feac 	bl	8900 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    3ba8:	a802      	add	r0, sp, #8
    3baa:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    3bae:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    3bb0:	f004 fe46 	bl	8840 <ll_rx_mem_release>
		if (buf) {
    3bb4:	b124      	cbz	r4, 3bc0 <recv_thread+0x5c>
			if (buf->len) {
    3bb6:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    3bb8:	4620      	mov	r0, r4
			if (buf->len) {
    3bba:	b153      	cbz	r3, 3bd2 <recv_thread+0x6e>
				bt_recv(buf);
    3bbc:	f7fe fd6e 	bl	269c <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    3bc0:	f007 fb84 	bl	b2cc <_impl_k_yield>
    3bc4:	e7d1      	b.n	3b6a <recv_thread+0x6>
		LL_ASSERT(0);
    3bc6:	4040      	eors	r0, r0
    3bc8:	f380 8811 	msr	BASEPRI, r0
    3bcc:	f04f 0004 	mov.w	r0, #4
    3bd0:	df02      	svc	2
				net_buf_unref(buf);
    3bd2:	f006 ff57 	bl	aa84 <net_buf_unref>
    3bd6:	e7f3      	b.n	3bc0 <recv_thread+0x5c>
    3bd8:	20005134 	.word	0x20005134

00003bdc <prio_recv_thread>:
{
    3bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    3bde:	4c0c      	ldr	r4, [pc, #48]	; (3c10 <prio_recv_thread+0x34>)
			k_fifo_put(&recv_fifo, node_rx);
    3be0:	4d0c      	ldr	r5, [pc, #48]	; (3c14 <prio_recv_thread+0x38>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    3be2:	f10d 0102 	add.w	r1, sp, #2
    3be6:	a801      	add	r0, sp, #4
    3be8:	f004 fdf2 	bl	87d0 <ll_rx_get>
    3bec:	2800      	cmp	r0, #0
    3bee:	d1f8      	bne.n	3be2 <prio_recv_thread+0x6>
		if (node_rx) {
    3bf0:	9b01      	ldr	r3, [sp, #4]
    3bf2:	b133      	cbz	r3, 3c02 <prio_recv_thread+0x26>
			ll_rx_dequeue();
    3bf4:	f005 fab6 	bl	9164 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    3bf8:	9901      	ldr	r1, [sp, #4]
    3bfa:	4628      	mov	r0, r5
    3bfc:	f007 f997 	bl	af2e <k_queue_append>
    3c00:	e7ef      	b.n	3be2 <prio_recv_thread+0x6>
    3c02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3c06:	4620      	mov	r0, r4
    3c08:	f007 fc64 	bl	b4d4 <_impl_k_sem_take>
    3c0c:	e7e9      	b.n	3be2 <prio_recv_thread+0x6>
    3c0e:	bf00      	nop
    3c10:	2000511c 	.word	0x2000511c
    3c14:	20005134 	.word	0x20005134

00003c18 <hci_driver_open>:
{
    3c18:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    3c1a:	4814      	ldr	r0, [pc, #80]	; (3c6c <hci_driver_open+0x54>)
{
    3c1c:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    3c1e:	f005 fb45 	bl	92ac <ll_init>
	if (err) {
    3c22:	4604      	mov	r4, r0
    3c24:	b9f8      	cbnz	r0, 3c66 <hci_driver_open+0x4e>
	hci_init(NULL);
    3c26:	f000 fdc9 	bl	47bc <hci_init>

    3c2a:	f06f 0309 	mvn.w	r3, #9
    3c2e:	9303      	str	r3, [sp, #12]
    3c30:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    3c34:	4b0e      	ldr	r3, [pc, #56]	; (3c70 <hci_driver_open+0x58>)
    3c36:	490f      	ldr	r1, [pc, #60]	; (3c74 <hci_driver_open+0x5c>)
    3c38:	9405      	str	r4, [sp, #20]
    3c3a:	9404      	str	r4, [sp, #16]
    3c3c:	9402      	str	r4, [sp, #8]
    3c3e:	9401      	str	r4, [sp, #4]
    3c40:	9400      	str	r4, [sp, #0]
    3c42:	480d      	ldr	r0, [pc, #52]	; (3c78 <hci_driver_open+0x60>)
    3c44:	f007 fe1c 	bl	b880 <_impl_k_thread_create>
    3c48:	f06f 0307 	mvn.w	r3, #7
    3c4c:	9303      	str	r3, [sp, #12]
    3c4e:	9405      	str	r4, [sp, #20]
    3c50:	9404      	str	r4, [sp, #16]
    3c52:	9402      	str	r4, [sp, #8]
    3c54:	9401      	str	r4, [sp, #4]
    3c56:	9400      	str	r4, [sp, #0]
    3c58:	4b08      	ldr	r3, [pc, #32]	; (3c7c <hci_driver_open+0x64>)
    3c5a:	4909      	ldr	r1, [pc, #36]	; (3c80 <hci_driver_open+0x68>)
    3c5c:	4809      	ldr	r0, [pc, #36]	; (3c84 <hci_driver_open+0x6c>)
    3c5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3c62:	f007 fe0d 	bl	b880 <_impl_k_thread_create>
}
    3c66:	4620      	mov	r0, r4
    3c68:	b006      	add	sp, #24
    3c6a:	bd10      	pop	{r4, pc}
    3c6c:	2000511c 	.word	0x2000511c
    3c70:	00003bdd 	.word	0x00003bdd
    3c74:	200036c0 	.word	0x200036c0
    3c78:	20002adc 	.word	0x20002adc
    3c7c:	00003b65 	.word	0x00003b65
    3c80:	20003880 	.word	0x20003880
    3c84:	20002a74 	.word	0x20002a74

00003c88 <sys_put_le32>:
	dst[1] = val >> 8;
    3c88:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    3c8c:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    3c8e:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    3c90:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    3c92:	0a00      	lsrs	r0, r0, #8
    3c94:	704b      	strb	r3, [r1, #1]
    3c96:	70c8      	strb	r0, [r1, #3]
    3c98:	4770      	bx	lr

00003c9a <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    3c9a:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    3c9c:	3008      	adds	r0, #8
{
    3c9e:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    3ca0:	2102      	movs	r1, #2
{
    3ca2:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    3ca4:	f006 ff20 	bl	aae8 <net_buf_simple_add>
	hdr->evt = evt;
    3ca8:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    3caa:	7044      	strb	r4, [r0, #1]
    3cac:	bd38      	pop	{r3, r4, r5, pc}
	...

00003cb0 <cmd_complete>:
}

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    3cb0:	b538      	push	{r3, r4, r5, lr}
    3cb2:	4604      	mov	r4, r0
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    3cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    3cb8:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    3cba:	f7fe fec1 	bl	2a40 <bt_buf_get_cmd_complete>

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    3cbe:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    3cc0:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    3cc2:	b2d2      	uxtb	r2, r2
    3cc4:	210e      	movs	r1, #14
    3cc6:	f7ff ffe8 	bl	3c9a <evt_create>

	cc = net_buf_add(*buf, sizeof(*cc));
    3cca:	6820      	ldr	r0, [r4, #0]
    3ccc:	2103      	movs	r1, #3
    3cce:	3008      	adds	r0, #8
    3cd0:	f006 ff0a 	bl	aae8 <net_buf_simple_add>
	cc->ncmd = 1;
    3cd4:	2301      	movs	r3, #1
    3cd6:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    3cd8:	4b05      	ldr	r3, [pc, #20]	; (3cf0 <cmd_complete+0x40>)
    3cda:	881b      	ldrh	r3, [r3, #0]
    3cdc:	f8a0 3001 	strh.w	r3, [r0, #1]

	return net_buf_add(*buf, plen);
    3ce0:	6820      	ldr	r0, [r4, #0]
    3ce2:	4629      	mov	r1, r5
    3ce4:	3008      	adds	r0, #8
}
    3ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    3cea:	f006 befd 	b.w	aae8 <net_buf_simple_add>
    3cee:	bf00      	nop
    3cf0:	200002b8 	.word	0x200002b8

00003cf4 <meta_evt>:
	return buf;
}
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    3cf4:	b570      	push	{r4, r5, r6, lr}
    3cf6:	4604      	mov	r4, r0
    3cf8:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    3cfa:	3201      	adds	r2, #1
{
    3cfc:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    3cfe:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    3d00:	b2d2      	uxtb	r2, r2
    3d02:	213e      	movs	r1, #62	; 0x3e
    3d04:	f7ff ffc9 	bl	3c9a <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    3d08:	2101      	movs	r1, #1
    3d0a:	4620      	mov	r0, r4
    3d0c:	f006 feec 	bl	aae8 <net_buf_simple_add>
	me->subevent = subevt;
    3d10:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    3d12:	4629      	mov	r1, r5
    3d14:	4620      	mov	r0, r4
}
    3d16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    3d1a:	f006 bee5 	b.w	aae8 <net_buf_simple_add>
	...

00003d20 <le_advertising_report>:
}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

static void le_advertising_report(struct pdu_data *pdu_data, u8_t *b,
				  struct net_buf *buf)
{
    3d20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    3d22:	2301      	movs	r3, #1
    3d24:	f88d 3001 	strb.w	r3, [sp, #1]
    3d28:	2303      	movs	r3, #3
    3d2a:	f88d 3002 	strb.w	r3, [sp, #2]
    3d2e:	23ff      	movs	r3, #255	; 0xff
    3d30:	f88d 3003 	strb.w	r3, [sp, #3]
    3d34:	f88d 3005 	strb.w	r3, [sp, #5]
    3d38:	2302      	movs	r3, #2
    3d3a:	f88d 3006 	strb.w	r3, [sp, #6]
	if (adv->tx_addr) {
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
	}
#endif

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    3d3e:	4b25      	ldr	r3, [pc, #148]	; (3dd4 <le_advertising_report+0xb4>)
{
    3d40:	4607      	mov	r7, r0
    3d42:	4610      	mov	r0, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    3d44:	2204      	movs	r2, #4
    3d46:	f88d 2004 	strb.w	r2, [sp, #4]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    3d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d4e:	2200      	movs	r2, #0
    3d50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    3d54:	2400      	movs	r4, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    3d56:	4313      	orrs	r3, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    3d58:	f88d 4000 	strb.w	r4, [sp]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    3d5c:	d038      	beq.n	3dd0 <le_advertising_report+0xb0>
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
		return;
	}
#else
	if (!(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    3d5e:	4b1e      	ldr	r3, [pc, #120]	; (3dd8 <le_advertising_report+0xb8>)
    3d60:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d64:	2300      	movs	r3, #0
    3d66:	f002 0202 	and.w	r2, r2, #2
    3d6a:	4313      	orrs	r3, r2
    3d6c:	d030      	beq.n	3dd0 <le_advertising_report+0xb0>
	if (dup_found(adv)) {
		return;
	}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    3d6e:	783b      	ldrb	r3, [r7, #0]
    3d70:	f003 030f 	and.w	r3, r3, #15
    3d74:	2b01      	cmp	r3, #1
    3d76:	787b      	ldrb	r3, [r7, #1]
		data_len = (adv->len - BDADDR_SIZE);
    3d78:	bf1c      	itt	ne
    3d7a:	1f9c      	subne	r4, r3, #6
    3d7c:	b2e4      	uxtbne	r4, r4
	} else {
		data_len = 0;
	}

	/* The Link Layer currently returns RSSI as an absolute value */
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    3d7e:	4419      	add	r1, r3
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	info_len = sizeof(struct bt_hci_evt_le_advertising_info) + data_len +
		   sizeof(*prssi);
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    3d80:	f104 020b 	add.w	r2, r4, #11
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    3d84:	7a8e      	ldrb	r6, [r1, #10]
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    3d86:	b2d2      	uxtb	r2, r2
    3d88:	2102      	movs	r1, #2
    3d8a:	f7ff ffb3 	bl	3cf4 <meta_evt>
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
    3d8e:	2301      	movs	r3, #1
    3d90:	7003      	strb	r3, [r0, #0]
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
    3d92:	783b      	ldrb	r3, [r7, #0]
    3d94:	aa02      	add	r2, sp, #8
    3d96:	f003 030f 	and.w	r3, r3, #15
    3d9a:	4413      	add	r3, r2
	} else {
#else
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */

		adv_info->addr.type = adv->tx_addr;
    3d9c:	4639      	mov	r1, r7
	adv_info->evt_type = c_adv_type[adv->type];
    3d9e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    3da2:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
    3da4:	f811 3b02 	ldrb.w	r3, [r1], #2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    3da8:	4605      	mov	r5, r0
		adv_info->addr.type = adv->tx_addr;
    3daa:	f3c3 1380 	ubfx	r3, r3, #6, #1
    3dae:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    3db0:	2206      	movs	r2, #6
    3db2:	3003      	adds	r0, #3
    3db4:	f7fc fbf6 	bl	5a4 <memcpy>
		       sizeof(bt_addr_t));
	}

	adv_info->length = data_len;
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    3db8:	350a      	adds	r5, #10
	adv_info->length = data_len;
    3dba:	f805 4c01 	strb.w	r4, [r5, #-1]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    3dbe:	4276      	negs	r6, r6
    3dc0:	b276      	sxtb	r6, r6
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    3dc2:	4622      	mov	r2, r4
    3dc4:	f107 0108 	add.w	r1, r7, #8
    3dc8:	4628      	mov	r0, r5
    3dca:	f7fc fbeb 	bl	5a4 <memcpy>
	/* RSSI */
	prssi = &adv_info->data[0] + data_len;
	*prssi = rssi;
    3dce:	552e      	strb	r6, [r5, r4]
}
    3dd0:	b003      	add	sp, #12
    3dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3dd4:	20004ee0 	.word	0x20004ee0
    3dd8:	20004ee8 	.word	0x20004ee8

00003ddc <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    3ddc:	b570      	push	{r4, r5, r6, lr}
    3dde:	4604      	mov	r4, r0
    3de0:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3de2:	4b13      	ldr	r3, [pc, #76]	; (3e30 <le_remote_feat_complete+0x54>)
{
    3de4:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3de6:	e9d3 2300 	ldrd	r2, r3, [r3]
    3dea:	2200      	movs	r2, #0
    3dec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    3df0:	4313      	orrs	r3, r2
{
    3df2:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3df4:	d01b      	beq.n	3e2e <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    3df6:	4b0f      	ldr	r3, [pc, #60]	; (3e34 <le_remote_feat_complete+0x58>)
    3df8:	e9d3 2300 	ldrd	r2, r3, [r3]
    3dfc:	2300      	movs	r3, #0
    3dfe:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3e02:	4313      	orrs	r3, r2
    3e04:	d013      	beq.n	3e2e <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    3e06:	220b      	movs	r2, #11
    3e08:	2104      	movs	r1, #4
    3e0a:	f7ff ff73 	bl	3cf4 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    3e0e:	2208      	movs	r2, #8
	sep->status = status;
    3e10:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    3e12:	f8a0 6001 	strh.w	r6, [r0, #1]
    3e16:	3003      	adds	r0, #3
	if (!status) {
    3e18:	b924      	cbnz	r4, 3e24 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    3e1a:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    3e1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    3e20:	f7fc bbc0 	b.w	5a4 <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    3e24:	2100      	movs	r1, #0
}
    3e26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    3e2a:	f7fc bbe7 	b.w	5fc <memset>
    3e2e:	bd70      	pop	{r4, r5, r6, pc}
    3e30:	20004ee0 	.word	0x20004ee0
    3e34:	20004ee8 	.word	0x20004ee8

00003e38 <bt_addr_le_to_str.constprop.43>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    3e38:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    3e3a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    3e3c:	b08a      	sub	sp, #40	; 0x28
    3e3e:	4604      	mov	r4, r0
    3e40:	460e      	mov	r6, r1
    3e42:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    3e44:	2b03      	cmp	r3, #3
    3e46:	d820      	bhi.n	3e8a <bt_addr_le_to_str.constprop.43+0x52>
    3e48:	e8df f003 	tbb	[pc, r3]
    3e4c:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    3e50:	4911      	ldr	r1, [pc, #68]	; (3e98 <bt_addr_le_to_str.constprop.43+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    3e52:	4628      	mov	r0, r5
    3e54:	f7fc fb7a 	bl	54c <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    3e58:	7862      	ldrb	r2, [r4, #1]
    3e5a:	9204      	str	r2, [sp, #16]
    3e5c:	78a2      	ldrb	r2, [r4, #2]
    3e5e:	9203      	str	r2, [sp, #12]
    3e60:	78e2      	ldrb	r2, [r4, #3]
    3e62:	9202      	str	r2, [sp, #8]
    3e64:	7922      	ldrb	r2, [r4, #4]
    3e66:	9201      	str	r2, [sp, #4]
    3e68:	7962      	ldrb	r2, [r4, #5]
    3e6a:	9200      	str	r2, [sp, #0]
    3e6c:	79a3      	ldrb	r3, [r4, #6]
    3e6e:	9505      	str	r5, [sp, #20]
    3e70:	4a0a      	ldr	r2, [pc, #40]	; (3e9c <bt_addr_le_to_str.constprop.43+0x64>)
    3e72:	211b      	movs	r1, #27
    3e74:	4630      	mov	r0, r6
    3e76:	f7fd fb69 	bl	154c <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    3e7a:	b00a      	add	sp, #40	; 0x28
    3e7c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    3e7e:	4908      	ldr	r1, [pc, #32]	; (3ea0 <bt_addr_le_to_str.constprop.43+0x68>)
    3e80:	e7e7      	b.n	3e52 <bt_addr_le_to_str.constprop.43+0x1a>
		strcpy(type, "public id");
    3e82:	4908      	ldr	r1, [pc, #32]	; (3ea4 <bt_addr_le_to_str.constprop.43+0x6c>)
    3e84:	e7e5      	b.n	3e52 <bt_addr_le_to_str.constprop.43+0x1a>
		strcpy(type, "random id");
    3e86:	4908      	ldr	r1, [pc, #32]	; (3ea8 <bt_addr_le_to_str.constprop.43+0x70>)
    3e88:	e7e3      	b.n	3e52 <bt_addr_le_to_str.constprop.43+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    3e8a:	4a08      	ldr	r2, [pc, #32]	; (3eac <bt_addr_le_to_str.constprop.43+0x74>)
    3e8c:	210a      	movs	r1, #10
    3e8e:	4628      	mov	r0, r5
    3e90:	f7fd fb5c 	bl	154c <snprintk>
    3e94:	e7e0      	b.n	3e58 <bt_addr_le_to_str.constprop.43+0x20>
    3e96:	bf00      	nop
    3e98:	0000c683 	.word	0x0000c683
    3e9c:	0000c6ac 	.word	0x0000c6ac
    3ea0:	0000c68a 	.word	0x0000c68a
    3ea4:	0000c691 	.word	0x0000c691
    3ea8:	0000c69b 	.word	0x0000c69b
    3eac:	0000c6a5 	.word	0x0000c6a5

00003eb0 <le_adv_ext_report.isra.41>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    3eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    3eb4:	7803      	ldrb	r3, [r0, #0]
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    3eb6:	4615      	mov	r5, r2
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    3eb8:	f003 020f 	and.w	r2, r3, #15
    3ebc:	2a07      	cmp	r2, #7
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    3ebe:	b08d      	sub	sp, #52	; 0x34
    3ec0:	4606      	mov	r6, r0
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    3ec2:	f040 808e 	bne.w	3fe2 <le_adv_ext_report.isra.41+0x132>
		  offsetof(struct pdu_adv, payload) + adv->len];
    3ec6:	7842      	ldrb	r2, [r0, #1]
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    3ec8:	2a00      	cmp	r2, #0
    3eca:	f000 808a 	beq.w	3fe2 <le_adv_ext_report.isra.41+0x132>
		if (!p->ext_hdr_len) {
    3ece:	7880      	ldrb	r0, [r0, #2]
    3ed0:	0680      	lsls	r0, r0, #26
    3ed2:	d076      	beq.n	3fc2 <le_adv_ext_report.isra.41+0x112>
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    3ed4:	4411      	add	r1, r2
		ptr = (u8_t *)h + sizeof(*h);
    3ed6:	1d34      	adds	r4, r6, #4
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    3ed8:	7a8a      	ldrb	r2, [r1, #10]
    3eda:	9200      	str	r2, [sp, #0]
		if (h->adv_addr) {
    3edc:	78f2      	ldrb	r2, [r6, #3]
    3ede:	07d7      	lsls	r7, r2, #31
    3ee0:	d510      	bpl.n	3f04 <le_adv_ext_report.isra.41+0x54>
			addr.type = adv->tx_addr;
    3ee2:	af0c      	add	r7, sp, #48	; 0x30
    3ee4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    3ee8:	f807 3d24 	strb.w	r3, [r7, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    3eec:	4621      	mov	r1, r4
    3eee:	2206      	movs	r2, #6
    3ef0:	f10d 000d 	add.w	r0, sp, #13
    3ef4:	f7fc fb56 	bl	5a4 <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    3ef8:	a905      	add	r1, sp, #20
    3efa:	4638      	mov	r0, r7
			ptr += BDADDR_SIZE;
    3efc:	f106 040a 	add.w	r4, r6, #10
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    3f00:	f7ff ff9a 	bl	3e38 <bt_addr_le_to_str.constprop.43>
		if(h->tgt_addr){
    3f04:	78f2      	ldrb	r2, [r6, #3]
    3f06:	0790      	lsls	r0, r2, #30
			ptr += BDADDR_SIZE;
    3f08:	bf48      	it	mi
    3f0a:	3406      	addmi	r4, #6
		if(h->adi){
    3f0c:	f012 0908 	ands.w	r9, r2, #8
    3f10:	d05e      	beq.n	3fd0 <le_adv_ext_report.isra.41+0x120>
			sid_for_info = adi_ptr->sid;
    3f12:	7867      	ldrb	r7, [r4, #1]
    3f14:	ea4f 1a17 	mov.w	sl, r7, lsr #4
			if(adi_ptr->sid == 0x04){
    3f18:	f007 07f0 	and.w	r7, r7, #240	; 0xf0
    3f1c:	2f40      	cmp	r7, #64	; 0x40
    3f1e:	d053      	beq.n	3fc8 <le_adv_ext_report.isra.41+0x118>
			}else if(adi_ptr->sid == 0x02){
    3f20:	f1a7 0120 	sub.w	r1, r7, #32
    3f24:	424f      	negs	r7, r1
    3f26:	414f      	adcs	r7, r1
	bool aux_adi_present = false;
    3f28:	f04f 0900 	mov.w	r9, #0
			ptr += sizeof(*adi_ptr);
    3f2c:	46a3      	mov	fp, r4
    3f2e:	3402      	adds	r4, #2
		if(h->aux_ptr){
    3f30:	f012 0310 	ands.w	r3, r2, #16
			aux_ptr_present = true;
    3f34:	bf1c      	itt	ne
    3f36:	2301      	movne	r3, #1
			ptr += sizeof(*ap);
    3f38:	3403      	addne	r4, #3
		if (h->tx_pwr) {
    3f3a:	0652      	lsls	r2, r2, #25
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    3f3c:	78b2      	ldrb	r2, [r6, #2]
    3f3e:	9301      	str	r3, [sp, #4]
    3f40:	f3c2 0105 	ubfx	r1, r2, #0, #6
    3f44:	7872      	ldrb	r2, [r6, #1]
    3f46:	eba2 0201 	sub.w	r2, r2, r1
    3f4a:	b2d2      	uxtb	r2, r2
    3f4c:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    3f50:	f102 0218 	add.w	r2, r2, #24
    3f54:	b2d2      	uxtb	r2, r2
    3f56:	4628      	mov	r0, r5
    3f58:	f04f 010d 	mov.w	r1, #13
			ptr++;
    3f5c:	bf48      	it	mi
    3f5e:	3401      	addmi	r4, #1
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    3f60:	f7ff fec8 	bl	3cf4 <meta_evt>
		sep->num_reports = 1;
    3f64:	2201      	movs	r2, #1
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    3f66:	fa5f f888 	uxtb.w	r8, r8
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    3f6a:	4605      	mov	r5, r0
		sep->num_reports = 1;
    3f6c:	7002      	strb	r2, [r0, #0]
		if( aux_adi_present && aux_ptr_present){ //aux packet
    3f6e:	9b01      	ldr	r3, [sp, #4]
    3f70:	f1b9 0f00 	cmp.w	r9, #0
    3f74:	d03f      	beq.n	3ff6 <le_adv_ext_report.isra.41+0x146>
    3f76:	b3cb      	cbz	r3, 3fec <le_adv_ext_report.isra.41+0x13c>
			adv_info->frag = 0x01;	//First fragment - more packets to come;
    3f78:	7082      	strb	r2, [r0, #2]
		if(h->adv_addr){
    3f7a:	78f3      	ldrb	r3, [r6, #3]
    3f7c:	07db      	lsls	r3, r3, #31
    3f7e:	d508      	bpl.n	3f92 <le_adv_ext_report.isra.41+0xe2>
			adv_info->addr.type = addr.type;
    3f80:	f89d 300c 	ldrb.w	r3, [sp, #12]
    3f84:	70eb      	strb	r3, [r5, #3]
			memcpy(&adv_info->addr.a.val[0], &addr.a.val[0],
    3f86:	2206      	movs	r2, #6
    3f88:	f10d 010d 	add.w	r1, sp, #13
    3f8c:	1d28      	adds	r0, r5, #4
    3f8e:	f7fc fb09 	bl	5a4 <memcpy>
		adv_info->evt_type = 0x07;
    3f92:	2307      	movs	r3, #7
    3f94:	706b      	strb	r3, [r5, #1]
		adv_info->sid = sid_for_info;
    3f96:	f885 a00c 	strb.w	sl, [r5, #12]
		if(adi_ptr->sid == 0x04){
    3f9a:	f89b 3001 	ldrb.w	r3, [fp, #1]
			adv_info->length = data_len;
    3f9e:	f885 8018 	strb.w	r8, [r5, #24]
		if(adi_ptr->sid == 0x04){
    3fa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    3fa6:	f105 0619 	add.w	r6, r5, #25
    3faa:	2b40      	cmp	r3, #64	; 0x40
			memcpy(&adv_info->data[0], ptr, data_len);
    3fac:	4642      	mov	r2, r8
    3fae:	4621      	mov	r1, r4
    3fb0:	4630      	mov	r0, r6
		if(adi_ptr->sid == 0x04){
    3fb2:	d10f      	bne.n	3fd4 <le_adv_ext_report.isra.41+0x124>
			memcpy(&adv_info->data[0], ptr, data_len);
    3fb4:	f7fc faf6 	bl	5a4 <memcpy>
			memcpy(copy_data, ptr, data_len);
    3fb8:	4642      	mov	r2, r8
    3fba:	4621      	mov	r1, r4
    3fbc:	4811      	ldr	r0, [pc, #68]	; (4004 <le_adv_ext_report.isra.41+0x154>)
    3fbe:	f7fc faf1 	bl	5a4 <memcpy>
}
    3fc2:	b00d      	add	sp, #52	; 0x34
    3fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				aux_adi_present = true;				// chain pdu's
    3fc8:	f04f 0901 	mov.w	r9, #1
	bool adi_present = false;		// to identify aux packet and fragment it
    3fcc:	2700      	movs	r7, #0
    3fce:	e7ad      	b.n	3f2c <le_adv_ext_report.isra.41+0x7c>
    3fd0:	464f      	mov	r7, r9
    3fd2:	e7ad      	b.n	3f30 <le_adv_ext_report.isra.41+0x80>
			memcpy(&adv_info->data[0], ptr, data_len);
    3fd4:	f7fc fae6 	bl	5a4 <memcpy>
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    3fd8:	9b00      	ldr	r3, [sp, #0]
    3fda:	425b      	negs	r3, r3
			*prssi = rssi;
    3fdc:	f806 3008 	strb.w	r3, [r6, r8]
    3fe0:	e7ef      	b.n	3fc2 <le_adv_ext_report.isra.41+0x112>
		le_advertising_report(pdu_data, b, buf);
    3fe2:	462a      	mov	r2, r5
    3fe4:	4630      	mov	r0, r6
    3fe6:	f7ff fe9b 	bl	3d20 <le_advertising_report>
    3fea:	e7ea      	b.n	3fc2 <le_adv_ext_report.isra.41+0x112>
		}else if(!adi_present && aux_adi_present && !aux_ptr_present){		//aux packet
    3fec:	2f00      	cmp	r7, #0
    3fee:	d1c4      	bne.n	3f7a <le_adv_ext_report.isra.41+0xca>
			adv_info->frag = 0x02; //last paacket of the data or complete packet
    3ff0:	2302      	movs	r3, #2
			adv_info->frag = 0x03;  // packet received on primary adv channel.
    3ff2:	70ab      	strb	r3, [r5, #2]
    3ff4:	e7c1      	b.n	3f7a <le_adv_ext_report.isra.41+0xca>
		}else if(!adi_present && aux_adi_present && !aux_ptr_present){		//aux packet
    3ff6:	2f00      	cmp	r7, #0
    3ff8:	d0bf      	beq.n	3f7a <le_adv_ext_report.isra.41+0xca>
		}else if(adi_present && aux_ptr_present){
    3ffa:	2b00      	cmp	r3, #0
    3ffc:	d0bd      	beq.n	3f7a <le_adv_ext_report.isra.41+0xca>
			adv_info->frag = 0x03;  // packet received on primary adv channel.
    3ffe:	2303      	movs	r3, #3
    4000:	e7f7      	b.n	3ff2 <le_adv_ext_report.isra.41+0x142>
    4002:	bf00      	nop
    4004:	20002b44 	.word	0x20002b44

00004008 <sys_get_le64>:
{
    4008:	4603      	mov	r3, r0
}
    400a:	6800      	ldr	r0, [r0, #0]
    400c:	6859      	ldr	r1, [r3, #4]
    400e:	4770      	bx	lr

00004010 <hci_cmd_handle>:
{
    4010:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    4012:	8981      	ldrh	r1, [r0, #12]
{
    4014:	b097      	sub	sp, #92	; 0x5c
	struct net_buf *evt = NULL;
    4016:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    4018:	2902      	cmp	r1, #2
{
    401a:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    401c:	950b      	str	r5, [sp, #44]	; 0x2c
	if (cmd->len < sizeof(*chdr)) {
    401e:	d802      	bhi.n	4026 <hci_cmd_handle+0x16>
		return NULL;
    4020:	2000      	movs	r0, #0
}
    4022:	b017      	add	sp, #92	; 0x5c
    4024:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    4026:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    4028:	4ec5      	ldr	r6, [pc, #788]	; (4340 <hci_cmd_handle+0x330>)
    402a:	781a      	ldrb	r2, [r3, #0]
    402c:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    402e:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    4030:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    4034:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    4036:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    4038:	d8f2      	bhi.n	4020 <hci_cmd_handle+0x10>
	net_buf_pull(cmd, sizeof(*chdr));
    403a:	2103      	movs	r1, #3
    403c:	f104 0008 	add.w	r0, r4, #8
    4040:	f006 fd61 	bl	ab06 <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    4044:	8833      	ldrh	r3, [r6, #0]
    4046:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    404a:	0a9b      	lsrs	r3, r3, #10
    404c:	2b04      	cmp	r3, #4
    404e:	d063      	beq.n	4118 <hci_cmd_handle+0x108>
    4050:	d807      	bhi.n	4062 <hci_cmd_handle+0x52>
    4052:	2b03      	cmp	r3, #3
    4054:	d024      	beq.n	40a0 <hci_cmd_handle+0x90>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    4056:	2101      	movs	r1, #1
    4058:	a80b      	add	r0, sp, #44	; 0x2c
    405a:	f7ff fe29 	bl	3cb0 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    405e:	2301      	movs	r3, #1
    4060:	e207      	b.n	4472 <hci_cmd_handle+0x462>
	switch (BT_OGF(_opcode)) {
    4062:	2b08      	cmp	r3, #8
    4064:	f000 80e5 	beq.w	4232 <hci_cmd_handle+0x222>
    4068:	2b3f      	cmp	r3, #63	; 0x3f
    406a:	d1f4      	bne.n	4056 <hci_cmd_handle+0x46>
	switch (ocf) {
    406c:	3a01      	subs	r2, #1
    406e:	2a09      	cmp	r2, #9
    4070:	d8f1      	bhi.n	4056 <hci_cmd_handle+0x46>
    4072:	a301      	add	r3, pc, #4	; (adr r3, 4078 <hci_cmd_handle+0x68>)
    4074:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    4078:	00004481 	.word	0x00004481
    407c:	000044af 	.word	0x000044af
    4080:	000044d7 	.word	0x000044d7
    4084:	00004057 	.word	0x00004057
    4088:	00004057 	.word	0x00004057
    408c:	0000451b 	.word	0x0000451b
    4090:	00004057 	.word	0x00004057
    4094:	000044ed 	.word	0x000044ed
    4098:	00004525 	.word	0x00004525
    409c:	00004591 	.word	0x00004591
	switch (ocf) {
    40a0:	2a03      	cmp	r2, #3
    40a2:	d014      	beq.n	40ce <hci_cmd_handle+0xbe>
    40a4:	d808      	bhi.n	40b8 <hci_cmd_handle+0xa8>
    40a6:	2a01      	cmp	r2, #1
    40a8:	d1d5      	bne.n	4056 <hci_cmd_handle+0x46>
	event_mask = sys_get_le64(cmd->events);
    40aa:	68a0      	ldr	r0, [r4, #8]
    40ac:	f7ff ffac 	bl	4008 <sys_get_le64>
    40b0:	4ba4      	ldr	r3, [pc, #656]	; (4344 <hci_cmd_handle+0x334>)
    40b2:	e9c3 0100 	strd	r0, r1, [r3]
    40b6:	e003      	b.n	40c0 <hci_cmd_handle+0xb0>
	switch (ocf) {
    40b8:	2a2d      	cmp	r2, #45	; 0x2d
    40ba:	d017      	beq.n	40ec <hci_cmd_handle+0xdc>
    40bc:	2a63      	cmp	r2, #99	; 0x63
    40be:	d1ca      	bne.n	4056 <hci_cmd_handle+0x46>
	ccst = cmd_complete(evt, sizeof(*ccst));
    40c0:	2101      	movs	r1, #1
    40c2:	a80b      	add	r0, sp, #44	; 0x2c
    40c4:	f7ff fdf4 	bl	3cb0 <cmd_complete>
	ccst->status = 0x00;
    40c8:	7005      	strb	r5, [r0, #0]
	return evt;
    40ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
    40cc:	e7a9      	b.n	4022 <hci_cmd_handle+0x12>
	event_mask = DEFAULT_EVENT_MASK;
    40ce:	4b9d      	ldr	r3, [pc, #628]	; (4344 <hci_cmd_handle+0x334>)
    40d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    40d4:	f641 71ff 	movw	r1, #8191	; 0x1fff
    40d8:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    40dc:	4b9a      	ldr	r3, [pc, #616]	; (4348 <hci_cmd_handle+0x338>)
    40de:	201f      	movs	r0, #31
    40e0:	2100      	movs	r1, #0
    40e2:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    40e6:	f004 facf 	bl	8688 <ll_reset>
    40ea:	e7e9      	b.n	40c0 <hci_cmd_handle+0xb0>
    40ec:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    40ee:	2104      	movs	r1, #4
    40f0:	a80b      	add	r0, sp, #44	; 0x2c
	handle = sys_le16_to_cpu(cmd->handle);
    40f2:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    40f4:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    40f6:	f7ff fddb 	bl	3cb0 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    40fa:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    40fc:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    40fe:	1cc2      	adds	r2, r0, #3
    4100:	4639      	mov	r1, r7
    4102:	4630      	mov	r0, r6
    4104:	f004 fb5a 	bl	87bc <ll_tx_pwr_lvl_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    4108:	2800      	cmp	r0, #0
    410a:	bf0c      	ite	eq
    410c:	2300      	moveq	r3, #0
    410e:	2302      	movne	r3, #2
    4110:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    4112:	f8a4 5001 	strh.w	r5, [r4, #1]
    4116:	e7d8      	b.n	40ca <hci_cmd_handle+0xba>
	switch (ocf) {
    4118:	3a01      	subs	r2, #1
    411a:	2a08      	cmp	r2, #8
    411c:	d89b      	bhi.n	4056 <hci_cmd_handle+0x46>
    411e:	a301      	add	r3, pc, #4	; (adr r3, 4124 <hci_cmd_handle+0x114>)
    4120:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    4124:	00004149 	.word	0x00004149
    4128:	00004173 	.word	0x00004173
    412c:	000041ff 	.word	0x000041ff
    4130:	00004057 	.word	0x00004057
    4134:	00004057 	.word	0x00004057
    4138:	00004057 	.word	0x00004057
    413c:	00004057 	.word	0x00004057
    4140:	00004057 	.word	0x00004057
    4144:	0000421b 	.word	0x0000421b
	rp = cmd_complete(evt, sizeof(*rp));
    4148:	2109      	movs	r1, #9
    414a:	a80b      	add	r0, sp, #44	; 0x2c
    414c:	f7ff fdb0 	bl	3cb0 <cmd_complete>
	rp->status = 0x00;
    4150:	2300      	movs	r3, #0
    4152:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    4154:	7083      	strb	r3, [r0, #2]
    4156:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    4158:	f06f 030e 	mvn.w	r3, #14
    415c:	7143      	strb	r3, [r0, #5]
    415e:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    4160:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    4162:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    4164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    4168:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    416a:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    416c:	71c3      	strb	r3, [r0, #7]
    416e:	7203      	strb	r3, [r0, #8]
    4170:	e7ab      	b.n	40ca <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    4172:	2141      	movs	r1, #65	; 0x41
    4174:	a80b      	add	r0, sp, #44	; 0x2c
    4176:	f7ff fd9b 	bl	3cb0 <cmd_complete>
	rp->status = 0x00;
    417a:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    417c:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    417e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    4180:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    4184:	f7fc fa3a 	bl	5fc <memset>
	rp->commands[2] |= BIT(7);
    4188:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[27] |= BIT(6) | BIT(7);
    418a:	7f20      	ldrb	r0, [r4, #28]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    418c:	7ea1      	ldrb	r1, [r4, #26]
	rp->commands[26] |= BIT(6) | BIT(7);
    418e:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[2] |= BIT(7);
    4190:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4194:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    4196:	79a3      	ldrb	r3, [r4, #6]
    4198:	f063 033f 	orn	r3, r3, #63	; 0x3f
    419c:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    419e:	7ae3      	ldrb	r3, [r4, #11]
    41a0:	f043 0304 	orr.w	r3, r3, #4
    41a4:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    41a6:	7be3      	ldrb	r3, [r4, #15]
    41a8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    41ac:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    41ae:	7c23      	ldrb	r3, [r4, #16]
    41b0:	f043 0302 	orr.w	r3, r3, #2
    41b4:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    41b6:	7de3      	ldrb	r3, [r4, #23]
    41b8:	f043 0304 	orr.w	r3, r3, #4
    41bc:	75e3      	strb	r3, [r4, #23]
	rp->commands[36] |= BIT(1);
    41be:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	rp->commands[36] |= BIT(2) | BIT(3) | BIT(5) | BIT(7) | BIT(6) ;
    41c2:	f063 0311 	orn	r3, r3, #17
    41c6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	rp->commands[37] |= BIT(5);
    41ca:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	rp->commands[27] |= BIT(6) | BIT(7);
    41ce:	f060 003c 	orn	r0, r0, #60	; 0x3c
	rp->commands[37] |= BIT(5);
    41d2:	f043 0320 	orr.w	r3, r3, #32
	rp->commands[27] |= BIT(6) | BIT(7);
    41d6:	7720      	strb	r0, [r4, #28]
	rp->commands[37] |= BIT(5);
    41d8:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	rp->commands[28] |= BIT(3);
    41dc:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[38] |= BIT(7);
    41de:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(3);
    41e2:	f040 0008 	orr.w	r0, r0, #8
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    41e6:	f061 0108 	orn	r1, r1, #8
	rp->commands[26] |= BIT(0) | BIT(1);
    41ea:	f062 023c 	orn	r2, r2, #60	; 0x3c
	rp->commands[38] |= BIT(7);
    41ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(3);
    41f2:	7760      	strb	r0, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    41f4:	76a1      	strb	r1, [r4, #26]
	rp->commands[26] |= BIT(0) | BIT(1);
    41f6:	76e2      	strb	r2, [r4, #27]
	rp->commands[38] |= BIT(7);
    41f8:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    41fc:	e765      	b.n	40ca <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    41fe:	2109      	movs	r1, #9
    4200:	a80b      	add	r0, sp, #44	; 0x2c
    4202:	f7ff fd55 	bl	3cb0 <cmd_complete>
	rp->status = 0x00;
    4206:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    4208:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    420a:	2208      	movs	r2, #8
	rp->status = 0x00;
    420c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    4210:	f7fc f9f4 	bl	5fc <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    4214:	2360      	movs	r3, #96	; 0x60
    4216:	7163      	strb	r3, [r4, #5]
    4218:	e757      	b.n	40ca <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    421a:	2107      	movs	r1, #7
    421c:	a80b      	add	r0, sp, #44	; 0x2c
    421e:	f7ff fd47 	bl	3cb0 <cmd_complete>
	rp->status = 0x00;
    4222:	4601      	mov	r1, r0
    4224:	2300      	movs	r3, #0
    4226:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    422a:	4618      	mov	r0, r3
    422c:	f7ff fc28 	bl	3a80 <ll_addr_get>
    4230:	e74b      	b.n	40ca <hci_cmd_handle+0xba>
	switch (ocf) {
    4232:	2a10      	cmp	r2, #16
    4234:	f000 80a8 	beq.w	4388 <hci_cmd_handle+0x378>
    4238:	d847      	bhi.n	42ca <hci_cmd_handle+0x2ba>
    423a:	2a06      	cmp	r2, #6
    423c:	f000 80d8 	beq.w	43f0 <hci_cmd_handle+0x3e0>
    4240:	d822      	bhi.n	4288 <hci_cmd_handle+0x278>
    4242:	2a02      	cmp	r2, #2
    4244:	f000 8082 	beq.w	434c <hci_cmd_handle+0x33c>
    4248:	d80e      	bhi.n	4268 <hci_cmd_handle+0x258>
    424a:	2a01      	cmp	r2, #1
    424c:	f47f af03 	bne.w	4056 <hci_cmd_handle+0x46>
	le_event_mask = sys_get_le64(cmd->events);
    4250:	68a0      	ldr	r0, [r4, #8]
    4252:	f7ff fed9 	bl	4008 <sys_get_le64>
    4256:	4b3c      	ldr	r3, [pc, #240]	; (4348 <hci_cmd_handle+0x338>)
    4258:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    425c:	2101      	movs	r1, #1
    425e:	a80b      	add	r0, sp, #44	; 0x2c
    4260:	f7ff fd26 	bl	3cb0 <cmd_complete>
	ccst->status = 0x00;
    4264:	2300      	movs	r3, #0
    4266:	e104      	b.n	4472 <hci_cmd_handle+0x462>
	switch (ocf) {
    4268:	2a03      	cmp	r2, #3
    426a:	d07b      	beq.n	4364 <hci_cmd_handle+0x354>
    426c:	2a05      	cmp	r2, #5
    426e:	f47f aef2 	bne.w	4056 <hci_cmd_handle+0x46>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    4272:	68a1      	ldr	r1, [r4, #8]
    4274:	2001      	movs	r0, #1
    4276:	f7ff fc1d 	bl	3ab4 <ll_addr_set>
	status = ll_wl_add(&cmd->addr);
    427a:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    427c:	2101      	movs	r1, #1
	ccst = cmd_complete(evt, sizeof(*ccst));
    427e:	a80b      	add	r0, sp, #44	; 0x2c
    4280:	f7ff fd16 	bl	3cb0 <cmd_complete>
	status = ll_ext_adv_params_set(cmd->handle, cmd->props, min_interval,
    4284:	7004      	strb	r4, [r0, #0]
    4286:	e720      	b.n	40ca <hci_cmd_handle+0xba>
	switch (ocf) {
    4288:	2a09      	cmp	r2, #9
    428a:	f000 80df 	beq.w	444c <hci_cmd_handle+0x43c>
    428e:	d80b      	bhi.n	42a8 <hci_cmd_handle+0x298>
    4290:	2a07      	cmp	r2, #7
    4292:	f000 8175 	beq.w	4580 <hci_cmd_handle+0x570>
    4296:	2a08      	cmp	r2, #8
    4298:	f47f aedd 	bne.w	4056 <hci_cmd_handle+0x46>
    429c:	68a3      	ldr	r3, [r4, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    429e:	1c59      	adds	r1, r3, #1
    42a0:	7818      	ldrb	r0, [r3, #0]
    42a2:	f005 fae7 	bl	9874 <ll_adv_data_set>
    42a6:	e7d9      	b.n	425c <hci_cmd_handle+0x24c>
	switch (ocf) {
    42a8:	2a0a      	cmp	r2, #10
    42aa:	f000 80d5 	beq.w	4458 <hci_cmd_handle+0x448>
    42ae:	2a0f      	cmp	r2, #15
    42b0:	f47f aed1 	bne.w	4056 <hci_cmd_handle+0x46>
	rp = cmd_complete(evt, sizeof(*rp));
    42b4:	2102      	movs	r1, #2
    42b6:	a80b      	add	r0, sp, #44	; 0x2c
    42b8:	f7ff fcfa 	bl	3cb0 <cmd_complete>
	rp->status = 0x00;
    42bc:	2300      	movs	r3, #0
    42be:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    42c0:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    42c2:	f005 fd71 	bl	9da8 <ll_wl_size_get>
    42c6:	7060      	strb	r0, [r4, #1]
    42c8:	e6ff      	b.n	40ca <hci_cmd_handle+0xba>
	switch (ocf) {
    42ca:	2a1c      	cmp	r2, #28
    42cc:	f000 8080 	beq.w	43d0 <hci_cmd_handle+0x3c0>
    42d0:	d812      	bhi.n	42f8 <hci_cmd_handle+0x2e8>
    42d2:	2a12      	cmp	r2, #18
    42d4:	d065      	beq.n	43a2 <hci_cmd_handle+0x392>
    42d6:	d360      	bcc.n	439a <hci_cmd_handle+0x38a>
    42d8:	2a17      	cmp	r2, #23
    42da:	d066      	beq.n	43aa <hci_cmd_handle+0x39a>
    42dc:	2a18      	cmp	r2, #24
    42de:	f47f aeba 	bne.w	4056 <hci_cmd_handle+0x46>
	rp = cmd_complete(evt, sizeof(*rp));
    42e2:	2109      	movs	r1, #9
    42e4:	a80b      	add	r0, sp, #44	; 0x2c
    42e6:	f7ff fce3 	bl	3cb0 <cmd_complete>
	rp->status = 0x00;
    42ea:	2300      	movs	r3, #0
    42ec:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    42f0:	2108      	movs	r1, #8
    42f2:	f7ff fbff 	bl	3af4 <bt_rand>
    42f6:	e6e8      	b.n	40ca <hci_cmd_handle+0xba>
	switch (ocf) {
    42f8:	2a38      	cmp	r2, #56	; 0x38
    42fa:	f000 80a7 	beq.w	444c <hci_cmd_handle+0x43c>
    42fe:	d80d      	bhi.n	431c <hci_cmd_handle+0x30c>
    4300:	2a36      	cmp	r2, #54	; 0x36
    4302:	f000 8083 	beq.w	440c <hci_cmd_handle+0x3fc>
    4306:	2a37      	cmp	r2, #55	; 0x37
    4308:	f47f aea5 	bne.w	4056 <hci_cmd_handle+0x46>
    430c:	68a0      	ldr	r0, [r4, #8]
	ll_ext_adv_data_set(cmd->len, &cmd->data[0], cmd->op, cmd->frag_pref);
    430e:	7883      	ldrb	r3, [r0, #2]
    4310:	7842      	ldrb	r2, [r0, #1]
    4312:	1d01      	adds	r1, r0, #4
    4314:	78c0      	ldrb	r0, [r0, #3]
    4316:	f005 fb1d 	bl	9954 <ll_ext_adv_data_set>
    431a:	e79f      	b.n	425c <hci_cmd_handle+0x24c>
	switch (ocf) {
    431c:	2a39      	cmp	r2, #57	; 0x39
    431e:	f000 80aa 	beq.w	4476 <hci_cmd_handle+0x466>
    4322:	2a4b      	cmp	r2, #75	; 0x4b
    4324:	f47f ae97 	bne.w	4056 <hci_cmd_handle+0x46>
	rp = cmd_complete(evt, sizeof(*rp));
    4328:	2103      	movs	r1, #3
    432a:	a80b      	add	r0, sp, #44	; 0x2c
    432c:	f7ff fcc0 	bl	3cb0 <cmd_complete>
	rp->status = 0x00;
    4330:	4601      	mov	r1, r0
    4332:	2300      	movs	r3, #0
    4334:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    4338:	3001      	adds	r0, #1
    433a:	f7ff fbd7 	bl	3aec <ll_tx_pwr_get>
    433e:	e6c4      	b.n	40ca <hci_cmd_handle+0xba>
    4340:	200002b8 	.word	0x200002b8
    4344:	20004ee0 	.word	0x20004ee0
    4348:	20004ee8 	.word	0x20004ee8
	rp = cmd_complete(evt, sizeof(*rp));
    434c:	2104      	movs	r1, #4
    434e:	a80b      	add	r0, sp, #44	; 0x2c
    4350:	f7ff fcae 	bl	3cb0 <cmd_complete>
	rp->status = 0x00;
    4354:	2300      	movs	r3, #0
    4356:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    4358:	221b      	movs	r2, #27
    435a:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    435c:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    435e:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    4360:	70c3      	strb	r3, [r0, #3]
    4362:	e6b2      	b.n	40ca <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    4364:	2109      	movs	r1, #9
    4366:	a80b      	add	r0, sp, #44	; 0x2c
    4368:	f7ff fca2 	bl	3cb0 <cmd_complete>
	rp->status = 0x00;
    436c:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    436e:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    4370:	2208      	movs	r2, #8
	rp->status = 0x00;
    4372:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    4376:	f7fc f941 	bl	5fc <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    437a:	230c      	movs	r3, #12
    437c:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    437e:	2340      	movs	r3, #64	; 0x40
    4380:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    4382:	2301      	movs	r3, #1
    4384:	70e3      	strb	r3, [r4, #3]
    4386:	e6a0      	b.n	40ca <hci_cmd_handle+0xba>
	ccst = cmd_complete(evt, sizeof(*ccst));
    4388:	2101      	movs	r1, #1
    438a:	a80b      	add	r0, sp, #44	; 0x2c
    438c:	f7ff fc90 	bl	3cb0 <cmd_complete>
    4390:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    4392:	f005 fd0b 	bl	9dac <ll_wl_clear>
    4396:	7020      	strb	r0, [r4, #0]
    4398:	e697      	b.n	40ca <hci_cmd_handle+0xba>
	status = ll_wl_add(&cmd->addr);
    439a:	68a0      	ldr	r0, [r4, #8]
    439c:	f005 fd1c 	bl	9dd8 <ll_wl_add>
    43a0:	e76b      	b.n	427a <hci_cmd_handle+0x26a>
	status = ll_wl_remove(&cmd->addr);
    43a2:	68a0      	ldr	r0, [r4, #8]
    43a4:	f005 fd50 	bl	9e48 <ll_wl_remove>
    43a8:	e767      	b.n	427a <hci_cmd_handle+0x26a>
    43aa:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    43ac:	2300      	movs	r3, #0
    43ae:	aa0c      	add	r2, sp, #48	; 0x30
    43b0:	f100 0110 	add.w	r1, r0, #16
    43b4:	f005 fe02 	bl	9fbc <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    43b8:	2111      	movs	r1, #17
    43ba:	a80b      	add	r0, sp, #44	; 0x2c
    43bc:	f7ff fc78 	bl	3cb0 <cmd_complete>
	rp->status = 0x00;
    43c0:	2300      	movs	r3, #0
    43c2:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    43c6:	2210      	movs	r2, #16
    43c8:	a90c      	add	r1, sp, #48	; 0x30
	memcpy(rp->info, build_info, sizeof(build_info));
    43ca:	f7fc f8eb 	bl	5a4 <memcpy>
    43ce:	e67c      	b.n	40ca <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    43d0:	2109      	movs	r1, #9
    43d2:	a80b      	add	r0, sp, #44	; 0x2c
    43d4:	f7ff fc6c 	bl	3cb0 <cmd_complete>
	rp->status = 0x00;
    43d8:	4601      	mov	r1, r0
	rp = cmd_complete(evt, sizeof(*rp));
    43da:	4602      	mov	r2, r0
	rp->status = 0x00;
    43dc:	f801 5b01 	strb.w	r5, [r1], #1
	sys_put_le32(val, dst);
    43e0:	2003      	movs	r0, #3
    43e2:	f7ff fc51 	bl	3c88 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    43e6:	4628      	mov	r0, r5
    43e8:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    43ea:	f7ff fc4d 	bl	3c88 <sys_put_le32>
    43ee:	e66c      	b.n	40ca <hci_cmd_handle+0xba>
    43f0:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
    43f2:	7ba5      	ldrb	r5, [r4, #14]
    43f4:	79a3      	ldrb	r3, [r4, #6]
    43f6:	7962      	ldrb	r2, [r4, #5]
    43f8:	7921      	ldrb	r1, [r4, #4]
    43fa:	8820      	ldrh	r0, [r4, #0]
    43fc:	9502      	str	r5, [sp, #8]
    43fe:	7b65      	ldrb	r5, [r4, #13]
    4400:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    4402:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    4404:	9400      	str	r4, [sp, #0]
    4406:	f004 ffd9 	bl	93bc <ll_adv_params_set>
    440a:	e736      	b.n	427a <hci_cmd_handle+0x26a>
    440c:	68a4      	ldr	r4, [r4, #8]
	status = ll_ext_adv_params_set(cmd->handle, cmd->props, min_interval,
    440e:	2500      	movs	r5, #0
    4410:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    4414:	7a23      	ldrb	r3, [r4, #8]
    4416:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    441a:	7820      	ldrb	r0, [r4, #0]
    441c:	9509      	str	r5, [sp, #36]	; 0x24
    441e:	7d66      	ldrb	r6, [r4, #21]
    4420:	9608      	str	r6, [sp, #32]
    4422:	7d26      	ldrb	r6, [r4, #20]
    4424:	9607      	str	r6, [sp, #28]
    4426:	7ce6      	ldrb	r6, [r4, #19]
    4428:	9606      	str	r6, [sp, #24]
    442a:	7ca6      	ldrb	r6, [r4, #18]
    442c:	9605      	str	r6, [sp, #20]
    442e:	9504      	str	r5, [sp, #16]
    4430:	7c25      	ldrb	r5, [r4, #16]
    4432:	9503      	str	r5, [sp, #12]
    4434:	79e5      	ldrb	r5, [r4, #7]
    4436:	9502      	str	r5, [sp, #8]
				   &cmd->direct_addr.a.val[0], cmd->prim_channel_map,
    4438:	f104 050a 	add.w	r5, r4, #10
	status = ll_ext_adv_params_set(cmd->handle, cmd->props, min_interval,
    443c:	9501      	str	r5, [sp, #4]
    443e:	7a64      	ldrb	r4, [r4, #9]
    4440:	9400      	str	r4, [sp, #0]
    4442:	f005 f83b 	bl	94bc <ll_ext_adv_params_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    4446:	2102      	movs	r1, #2
	status = ll_ext_adv_params_set(cmd->handle, cmd->props, min_interval,
    4448:	4604      	mov	r4, r0
    444a:	e718      	b.n	427e <hci_cmd_handle+0x26e>
    444c:	68a3      	ldr	r3, [r4, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    444e:	1c59      	adds	r1, r3, #1
    4450:	7818      	ldrb	r0, [r3, #0]
    4452:	f005 fbb5 	bl	9bc0 <ll_scan_data_set>
    4456:	e701      	b.n	425c <hci_cmd_handle+0x24c>
	status = ll_adv_enable(cmd->enable);
    4458:	68a3      	ldr	r3, [r4, #8]
    445a:	7818      	ldrb	r0, [r3, #0]
    445c:	f005 fbf2 	bl	9c44 <ll_adv_enable>
	status = ll_ext_adv_enable(cmd->enable);
    4460:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    4462:	2101      	movs	r1, #1
    4464:	a80b      	add	r0, sp, #44	; 0x2c
    4466:	f7ff fc23 	bl	3cb0 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    446a:	2c00      	cmp	r4, #0
    446c:	bf0c      	ite	eq
    446e:	2300      	moveq	r3, #0
    4470:	230c      	movne	r3, #12
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    4472:	7003      	strb	r3, [r0, #0]
    4474:	e629      	b.n	40ca <hci_cmd_handle+0xba>
	status = ll_ext_adv_enable(cmd->enable);
    4476:	68a3      	ldr	r3, [r4, #8]
    4478:	7818      	ldrb	r0, [r3, #0]
    447a:	f005 fc27 	bl	9ccc <ll_ext_adv_enable>
    447e:	e7ef      	b.n	4460 <hci_cmd_handle+0x450>
	rp = cmd_complete(evt, sizeof(*rp));
    4480:	210d      	movs	r1, #13
    4482:	a80b      	add	r0, sp, #44	; 0x2c
    4484:	f7ff fc14 	bl	3cb0 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    4488:	2202      	movs	r2, #2
    448a:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    448c:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    448e:	2201      	movs	r2, #1
    4490:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    4492:	220b      	movs	r2, #11
	rp->status = 0x00;
    4494:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    4496:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    4498:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    449a:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    449c:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    449e:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    44a0:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    44a2:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    44a4:	7242      	strb	r2, [r0, #9]
    44a6:	7283      	strb	r3, [r0, #10]
    44a8:	72c3      	strb	r3, [r0, #11]
    44aa:	7303      	strb	r3, [r0, #12]
    44ac:	e60d      	b.n	40ca <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    44ae:	2141      	movs	r1, #65	; 0x41
    44b0:	a80b      	add	r0, sp, #44	; 0x2c
    44b2:	f7ff fbfd 	bl	3cb0 <cmd_complete>
	rp->status = 0x00;
    44b6:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    44b8:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    44ba:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    44bc:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    44c0:	f7fc f89c 	bl	5fc <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    44c4:	7863      	ldrb	r3, [r4, #1]
    44c6:	f063 0358 	orn	r3, r3, #88	; 0x58
    44ca:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    44cc:	78a3      	ldrb	r3, [r4, #2]
    44ce:	f043 0303 	orr.w	r3, r3, #3
    44d2:	70a3      	strb	r3, [r4, #2]
    44d4:	e5f9      	b.n	40ca <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    44d6:	2109      	movs	r1, #9
    44d8:	a80b      	add	r0, sp, #44	; 0x2c
    44da:	f7ff fbe9 	bl	3cb0 <cmd_complete>
	rp->status = 0x00;
    44de:	2100      	movs	r1, #0
    44e0:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    44e4:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    44e6:	f7fc f889 	bl	5fc <memset>
    44ea:	e5ee      	b.n	40ca <hci_cmd_handle+0xba>
	const char build_info[] = HCI_VS_BUILD_INFO;
    44ec:	4b5b      	ldr	r3, [pc, #364]	; (465c <hci_cmd_handle+0x64c>)
    44ee:	aa0c      	add	r2, sp, #48	; 0x30
    44f0:	f103 0628 	add.w	r6, r3, #40	; 0x28
    44f4:	4615      	mov	r5, r2
    44f6:	6818      	ldr	r0, [r3, #0]
    44f8:	6859      	ldr	r1, [r3, #4]
    44fa:	4614      	mov	r4, r2
    44fc:	c403      	stmia	r4!, {r0, r1}
    44fe:	3308      	adds	r3, #8
    4500:	42b3      	cmp	r3, r6
    4502:	4622      	mov	r2, r4
    4504:	d1f7      	bne.n	44f6 <hci_cmd_handle+0x4e6>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    4506:	2129      	movs	r1, #41	; 0x29
    4508:	a80b      	add	r0, sp, #44	; 0x2c
    450a:	f7ff fbd1 	bl	3cb0 <cmd_complete>
	rp->status = 0x00;
    450e:	2300      	movs	r3, #0
    4510:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    4514:	2228      	movs	r2, #40	; 0x28
    4516:	4629      	mov	r1, r5
    4518:	e757      	b.n	43ca <hci_cmd_handle+0x3ba>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    451a:	68a1      	ldr	r1, [r4, #8]
    451c:	2000      	movs	r0, #0
    451e:	f7ff fac9 	bl	3ab4 <ll_addr_set>
    4522:	e69b      	b.n	425c <hci_cmd_handle+0x24c>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    4524:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4528:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    452c:	3201      	adds	r2, #1
    452e:	d106      	bne.n	453e <hci_cmd_handle+0x52e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    4530:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    4534:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    4538:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    453a:	4293      	cmp	r3, r2
    453c:	d020      	beq.n	4580 <hci_cmd_handle+0x570>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    453e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    4542:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    4546:	07db      	lsls	r3, r3, #31
    4548:	d51a      	bpl.n	4580 <hci_cmd_handle+0x570>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    454a:	2118      	movs	r1, #24
    454c:	a80b      	add	r0, sp, #44	; 0x2c
    454e:	f7ff fbaf 	bl	3cb0 <cmd_complete>
		rp->status = 0x00;
    4552:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    4554:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    4556:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    4558:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    455a:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    455c:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    4560:	1ca1      	adds	r1, r4, #2
    4562:	f7ff fb91 	bl	3c88 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    4566:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    456a:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    456c:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    4570:	f063 033f 	orn	r3, r3, #63	; 0x3f
    4574:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    4576:	2210      	movs	r2, #16
    4578:	4631      	mov	r1, r6
    457a:	f104 0008 	add.w	r0, r4, #8
    457e:	e7b2      	b.n	44e6 <hci_cmd_handle+0x4d6>
	rp = cmd_complete(evt, sizeof(*rp));
    4580:	2102      	movs	r1, #2
    4582:	a80b      	add	r0, sp, #44	; 0x2c
    4584:	f7ff fb94 	bl	3cb0 <cmd_complete>
	rp->status = 0x00;
    4588:	2300      	movs	r3, #0
    458a:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    458c:	7043      	strb	r3, [r0, #1]
    458e:	e59c      	b.n	40ca <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    4590:	2121      	movs	r1, #33	; 0x21
    4592:	a80b      	add	r0, sp, #44	; 0x2c
    4594:	f7ff fb8c 	bl	3cb0 <cmd_complete>
	rp->status = 0x00;
    4598:	4603      	mov	r3, r0
    459a:	2200      	movs	r2, #0
    459c:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    45a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    45a4:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    45a6:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    45aa:	3101      	adds	r1, #1
    45ac:	d04b      	beq.n	4646 <hci_cmd_handle+0x636>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    45ae:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    45b2:	3101      	adds	r1, #1
    45b4:	d047      	beq.n	4646 <hci_cmd_handle+0x636>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    45b6:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    45ba:	3101      	adds	r1, #1
    45bc:	d043      	beq.n	4646 <hci_cmd_handle+0x636>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    45be:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    45c2:	3101      	adds	r1, #1
    45c4:	d03f      	beq.n	4646 <hci_cmd_handle+0x636>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    45c6:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    45ca:	4619      	mov	r1, r3
    45cc:	f7ff fb5c 	bl	3c88 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    45d0:	1d61      	adds	r1, r4, #5
    45d2:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    45d6:	f7ff fb57 	bl	3c88 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    45da:	f104 0109 	add.w	r1, r4, #9
    45de:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    45e2:	f7ff fb51 	bl	3c88 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    45e6:	f104 010d 	add.w	r1, r4, #13
    45ea:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    45ee:	f7ff fb4b 	bl	3c88 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    45f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    45f6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    45fa:	3301      	adds	r3, #1
    45fc:	f104 0311 	add.w	r3, r4, #17
    4600:	d027      	beq.n	4652 <hci_cmd_handle+0x642>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    4602:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    4606:	3101      	adds	r1, #1
    4608:	d023      	beq.n	4652 <hci_cmd_handle+0x642>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    460a:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    460e:	3101      	adds	r1, #1
    4610:	d01f      	beq.n	4652 <hci_cmd_handle+0x642>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    4612:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    4616:	3101      	adds	r1, #1
    4618:	d01b      	beq.n	4652 <hci_cmd_handle+0x642>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    461a:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    461e:	4619      	mov	r1, r3
    4620:	f7ff fb32 	bl	3c88 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    4624:	f104 0115 	add.w	r1, r4, #21
    4628:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    462c:	f7ff fb2c 	bl	3c88 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    4630:	f104 0119 	add.w	r1, r4, #25
    4634:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    4638:	f7ff fb26 	bl	3c88 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    463c:	f104 011d 	add.w	r1, r4, #29
    4640:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    4644:	e6d1      	b.n	43ea <hci_cmd_handle+0x3da>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    4646:	2210      	movs	r2, #16
    4648:	2100      	movs	r1, #0
    464a:	4618      	mov	r0, r3
    464c:	f7fb ffd6 	bl	5fc <memset>
    4650:	e7cf      	b.n	45f2 <hci_cmd_handle+0x5e2>
		memset(rp->er, 0x00, sizeof(rp->er));
    4652:	2210      	movs	r2, #16
    4654:	2100      	movs	r1, #0
    4656:	4618      	mov	r0, r3
    4658:	e745      	b.n	44e6 <hci_cmd_handle+0x4d6>
    465a:	bf00      	nop
    465c:	0000c6cf 	.word	0x0000c6cf

00004660 <hci_evt_encode>:

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    4660:	b570      	push	{r4, r5, r6, lr}
    4662:	4604      	mov	r4, r0
    4664:	b08a      	sub	sp, #40	; 0x28
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    4666:	7923      	ldrb	r3, [r4, #4]
    4668:	2b01      	cmp	r3, #1
{
    466a:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    466c:	f100 0008 	add.w	r0, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    4670:	d045      	beq.n	46fe <hci_evt_encode+0x9e>
	switch (node_rx->hdr.type) {
    4672:	3b02      	subs	r3, #2
    4674:	2b03      	cmp	r3, #3
    4676:	d876      	bhi.n	4766 <hci_evt_encode+0x106>
    4678:	e8df f003 	tbb	[pc, r3]
    467c:	0d080802 	.word	0x0d080802
		le_advertising_report(pdu_data, b, buf);
    4680:	460a      	mov	r2, r1
    4682:	4621      	mov	r1, r4
    4684:	f7ff fb4c 	bl	3d20 <le_advertising_report>
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    4688:	b00a      	add	sp, #40	; 0x28
    468a:	bd70      	pop	{r4, r5, r6, pc}
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    468c:	460a      	mov	r2, r1
    468e:	4621      	mov	r1, r4
    4690:	f7ff fc0e 	bl	3eb0 <le_adv_ext_report.isra.41>
    4694:	e7f8      	b.n	4688 <hci_evt_encode+0x28>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4696:	4b37      	ldr	r3, [pc, #220]	; (4774 <hci_evt_encode+0x114>)
    4698:	e9d3 2300 	ldrd	r2, r3, [r3]
    469c:	2200      	movs	r2, #0
    469e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    46a2:	4313      	orrs	r3, r2
    46a4:	f104 060a 	add.w	r6, r4, #10
    46a8:	d007      	beq.n	46ba <hci_evt_encode+0x5a>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    46aa:	4b33      	ldr	r3, [pc, #204]	; (4778 <hci_evt_encode+0x118>)
    46ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    46b0:	2300      	movs	r3, #0
    46b2:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    46b6:	4313      	orrs	r3, r2
    46b8:	d110      	bne.n	46dc <hci_evt_encode+0x7c>
		addr.type = adv->tx_addr;
    46ba:	7a23      	ldrb	r3, [r4, #8]
    46bc:	ac0a      	add	r4, sp, #40	; 0x28
    46be:	f3c3 1380 	ubfx	r3, r3, #6, #1
    46c2:	f804 3d24 	strb.w	r3, [r4, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    46c6:	4631      	mov	r1, r6
    46c8:	2206      	movs	r2, #6
    46ca:	f10d 0005 	add.w	r0, sp, #5
    46ce:	f7fb ff69 	bl	5a4 <memcpy>
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    46d2:	a903      	add	r1, sp, #12
    46d4:	4620      	mov	r0, r4
    46d6:	f7ff fbaf 	bl	3e38 <bt_addr_le_to_str.constprop.43>
    46da:	e7d5      	b.n	4688 <hci_evt_encode+0x28>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    46dc:	2208      	movs	r2, #8
    46de:	2113      	movs	r1, #19
    46e0:	4628      	mov	r0, r5
    46e2:	f7ff fb07 	bl	3cf4 <meta_evt>
	sep->handle = 0;
    46e6:	2300      	movs	r3, #0
    46e8:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    46ea:	7a23      	ldrb	r3, [r4, #8]
    46ec:	f3c3 1380 	ubfx	r3, r3, #6, #1
    46f0:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    46f2:	2206      	movs	r2, #6
    46f4:	4631      	mov	r1, r6
    46f6:	3002      	adds	r0, #2
    46f8:	f7fb ff54 	bl	5a4 <memcpy>
    46fc:	e7c4      	b.n	4688 <hci_evt_encode+0x28>
	switch (pdu_data->llctrl.opcode) {
    46fe:	7ae1      	ldrb	r1, [r4, #11]
    4700:	88e6      	ldrh	r6, [r4, #6]
    4702:	2909      	cmp	r1, #9
    4704:	d00b      	beq.n	471e <hci_evt_encode+0xbe>
    4706:	290c      	cmp	r1, #12
    4708:	d010      	beq.n	472c <hci_evt_encode+0xcc>
    470a:	2907      	cmp	r1, #7
    470c:	d12b      	bne.n	4766 <hci_evt_encode+0x106>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    470e:	7b23      	ldrb	r3, [r4, #12]
    4710:	2b0e      	cmp	r3, #14
    4712:	d1b9      	bne.n	4688 <hci_evt_encode+0x28>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    4714:	462b      	mov	r3, r5
    4716:	4632      	mov	r2, r6
    4718:	2100      	movs	r1, #0
    471a:	201a      	movs	r0, #26
    471c:	e003      	b.n	4726 <hci_evt_encode+0xc6>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    471e:	4601      	mov	r1, r0
    4720:	462b      	mov	r3, r5
    4722:	4632      	mov	r2, r6
    4724:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    4726:	f7ff fb59 	bl	3ddc <le_remote_feat_complete>
    472a:	e7ad      	b.n	4688 <hci_evt_encode+0x28>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    472c:	4b11      	ldr	r3, [pc, #68]	; (4774 <hci_evt_encode+0x114>)
    472e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4732:	2300      	movs	r3, #0
    4734:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    4738:	4313      	orrs	r3, r2
    473a:	d0a5      	beq.n	4688 <hci_evt_encode+0x28>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    473c:	2208      	movs	r2, #8
    473e:	4628      	mov	r0, r5
    4740:	f7ff faab 	bl	3c9a <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    4744:	2108      	movs	r1, #8
    4746:	1868      	adds	r0, r5, r1
    4748:	f006 f9ce 	bl	aae8 <net_buf_simple_add>
	ep->status = 0x00;
    474c:	2300      	movs	r3, #0
    474e:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    4750:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    4754:	7b23      	ldrb	r3, [r4, #12]
    4756:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    4758:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    475c:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    475e:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    4762:	80c3      	strh	r3, [r0, #6]
    4764:	e790      	b.n	4688 <hci_evt_encode+0x28>
		LL_ASSERT(0);
    4766:	4040      	eors	r0, r0
    4768:	f380 8811 	msr	BASEPRI, r0
    476c:	f04f 0004 	mov.w	r0, #4
    4770:	df02      	svc	2
    4772:	bf00      	nop
    4774:	20004ee0 	.word	0x20004ee0
    4778:	20004ee8 	.word	0x20004ee8

0000477c <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    477c:	7903      	ldrb	r3, [r0, #4]
    477e:	2b01      	cmp	r3, #1
    4780:	d00f      	beq.n	47a2 <hci_get_class+0x26>
    4782:	2b0a      	cmp	r3, #10
    4784:	d815      	bhi.n	47b2 <hci_get_class+0x36>
    4786:	2001      	movs	r0, #1
    4788:	fa00 f303 	lsl.w	r3, r0, r3
    478c:	f413 6fb0 	tst.w	r3, #1408	; 0x580
    4790:	d112      	bne.n	47b8 <hci_get_class+0x3c>
    4792:	f013 0f3c 	tst.w	r3, #60	; 0x3c
    4796:	d110      	bne.n	47ba <hci_get_class+0x3e>
    4798:	f083 0340 	eor.w	r3, r3, #64	; 0x40
    479c:	f343 1080 	sbfx	r0, r3, #6, #1
    47a0:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    47a2:	7a03      	ldrb	r3, [r0, #8]
    47a4:	f003 0303 	and.w	r3, r3, #3
    47a8:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    47aa:	bf0c      	ite	eq
    47ac:	2002      	moveq	r0, #2
    47ae:	2003      	movne	r0, #3
    47b0:	4770      	bx	lr
			return -1;
    47b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    47b6:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
    47b8:	2002      	movs	r0, #2
	}
}
    47ba:	4770      	bx	lr

000047bc <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    47bc:	4b06      	ldr	r3, [pc, #24]	; (47d8 <hci_init+0x1c>)
    47be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    47c2:	f641 71ff 	movw	r1, #8191	; 0x1fff
    47c6:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    47ca:	4b04      	ldr	r3, [pc, #16]	; (47dc <hci_init+0x20>)
    47cc:	201f      	movs	r0, #31
    47ce:	2100      	movs	r1, #0
    47d0:	e9c3 0100 	strd	r0, r1, [r3]
    47d4:	4770      	bx	lr
    47d6:	bf00      	nop
    47d8:	20004ee0 	.word	0x20004ee0
    47dc:	20004ee8 	.word	0x20004ee8

000047e0 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    47e0:	bf20      	wfe
	__SEV();
    47e2:	bf40      	sev
	__WFE();
    47e4:	bf20      	wfe
    47e6:	4770      	bx	lr

000047e8 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    47e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    47ea:	4b0d      	ldr	r3, [pc, #52]	; (4820 <pdu_len_cmp+0x38>)
{
    47ec:	b089      	sub	sp, #36	; 0x24
    47ee:	4605      	mov	r5, r0
    47f0:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    47f2:	aa01      	add	r2, sp, #4
    47f4:	f103 0718 	add.w	r7, r3, #24
    47f8:	6818      	ldr	r0, [r3, #0]
    47fa:	6859      	ldr	r1, [r3, #4]
    47fc:	4614      	mov	r4, r2
    47fe:	c403      	stmia	r4!, {r0, r1}
    4800:	3308      	adds	r3, #8
    4802:	42bb      	cmp	r3, r7
    4804:	4622      	mov	r2, r4
    4806:	d1f7      	bne.n	47f8 <pdu_len_cmp+0x10>
    4808:	881b      	ldrh	r3, [r3, #0]
    480a:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    480c:	ab08      	add	r3, sp, #32
    480e:	441d      	add	r5, r3
    4810:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    4814:	1b83      	subs	r3, r0, r6
    4816:	4258      	negs	r0, r3
    4818:	4158      	adcs	r0, r3
    481a:	b009      	add	sp, #36	; 0x24
    481c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    481e:	bf00      	nop
    4820:	0000bf1d 	.word	0x0000bf1d

00004824 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    4824:	6008      	str	r0, [r1, #0]
    4826:	4770      	bx	lr

00004828 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    4828:	b918      	cbnz	r0, 4832 <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    482a:	680b      	ldr	r3, [r1, #0]
    482c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4830:	600b      	str	r3, [r1, #0]
    4832:	4770      	bx	lr

00004834 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    4834:	b918      	cbnz	r0, 483e <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    4836:	680b      	ldr	r3, [r1, #0]
    4838:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    483c:	600b      	str	r3, [r1, #0]
    483e:	4770      	bx	lr

00004840 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    4840:	b570      	push	{r4, r5, r6, lr}
    4842:	1d03      	adds	r3, r0, #4
    4844:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    4846:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    4848:	429d      	cmp	r5, r3
    484a:	d101      	bne.n	4850 <chan_sel_remap+0x10>
    484c:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    484e:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    4850:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    4854:	2200      	movs	r2, #0
    4856:	18a0      	adds	r0, r4, r2
    4858:	2a08      	cmp	r2, #8
    485a:	b2c0      	uxtb	r0, r0
    485c:	d101      	bne.n	4862 <chan_sel_remap+0x22>
    485e:	4604      	mov	r4, r0
    4860:	e7f2      	b.n	4848 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    4862:	f016 0f01 	tst.w	r6, #1
    4866:	d003      	beq.n	4870 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    4868:	2900      	cmp	r1, #0
    486a:	d0f0      	beq.n	484e <chan_sel_remap+0xe>
				chan_index--;
    486c:	3901      	subs	r1, #1
    486e:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    4870:	0876      	lsrs	r6, r6, #1
    4872:	3201      	adds	r2, #1
    4874:	e7ef      	b.n	4856 <chan_sel_remap+0x16>
	...

00004878 <packet_rx_reserve_get>:
			_radio.packet_rx_acquire);
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    4878:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
    487a:	4a0c      	ldr	r2, [pc, #48]	; (48ac <packet_rx_reserve_get+0x34>)
    487c:	f892 3d22 	ldrb.w	r3, [r2, #3362]	; 0xd22
	    _radio.packet_rx_last) {
    4880:	f892 1d21 	ldrb.w	r1, [r2, #3361]	; 0xd21
	if (_radio.packet_rx_acquire >=
    4884:	428b      	cmp	r3, r1
			_radio.packet_rx_last +
    4886:	bf38      	it	cc
    4888:	f892 4d20 	ldrbcc.w	r4, [r2, #3360]	; 0xd20
			_radio.packet_rx_last);
    488c:	f892 1d21 	ldrb.w	r1, [r2, #3361]	; 0xd21
			_radio.packet_rx_last +
    4890:	bf38      	it	cc
    4892:	191b      	addcc	r3, r3, r4
    4894:	1a5b      	subs	r3, r3, r1
    4896:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
    4898:	4298      	cmp	r0, r3
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    489a:	bf9d      	ittte	ls
    489c:	f892 1d21 	ldrbls.w	r1, [r2, #3361]	; 0xd21
    48a0:	f8d2 3d1c 	ldrls.w	r3, [r2, #3356]	; 0xd1c
    48a4:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
		return 0;
    48a8:	2000      	movhi	r0, #0
}
    48aa:	bd10      	pop	{r4, pc}
    48ac:	200002c0 	.word	0x200002c0

000048b0 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    48b0:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    48b2:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
    48b6:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    48ba:	4299      	cmp	r1, r3
    48bc:	d128      	bne.n	4910 <conn_update_req+0x60>
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    48be:	f990 301d 	ldrsb.w	r3, [r0, #29]
    48c2:	2b00      	cmp	r3, #0
    48c4:	db26      	blt.n	4914 <conn_update_req+0x64>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    48c6:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    48c8:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    48ca:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    48ce:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    48d0:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    48d4:	4354      	muls	r4, r2
					      conn->supervision_reload *
    48d6:	227d      	movs	r2, #125	; 0x7d
    48d8:	4362      	muls	r2, r4
					      125 / 1000;
    48da:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    48de:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    48e2:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    48e6:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
		conn->llcp.conn_upd.win_size = 1;
    48ea:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    48ec:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    48f0:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    48f2:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    48f4:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    48f8:	3901      	subs	r1, #1
		conn->llcp.conn_upd.win_size = 1;
    48fa:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
		conn->llcp.conn_upd.win_offset_us = 0;
    48fe:	66c3      	str	r3, [r0, #108]	; 0x6c
		conn->llcp.conn_upd.is_internal = 1;
    4900:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
		conn->llcp_ack--;
    4904:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
		conn->llcp_type = LLCP_CONN_UPD;
    4908:	f880 505e 	strb.w	r5, [r0, #94]	; 0x5e

		return 0;
    490c:	4618      	mov	r0, r3
    490e:	bd30      	pop	{r4, r5, pc}
		return 1;
    4910:	2001      	movs	r0, #1
    4912:	bd30      	pop	{r4, r5, pc}
		return 0;
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    4914:	2002      	movs	r0, #2
}
    4916:	bd30      	pop	{r4, r5, pc}

00004918 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    4918:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    491c:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    491e:	4294      	cmp	r4, r2
{
    4920:	4681      	mov	r9, r0
    4922:	460f      	mov	r7, r1
    4924:	4690      	mov	r8, r2
	if (_first == last) {
    4926:	d03d      	beq.n	49a4 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    4928:	4e1f      	ldr	r6, [pc, #124]	; (49a8 <tx_cmplt_get+0x90>)
    492a:	f8d6 3d50 	ldr.w	r3, [r6, #3408]	; 0xd50
    492e:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    4932:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    4934:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    4936:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    493a:	f606 5a44 	addw	sl, r6, #3396	; 0xd44
		if (*handle != _radio.pkt_release[_first].handle) {
    493e:	b222      	sxth	r2, r4
    4940:	f8d6 0d50 	ldr.w	r0, [r6, #3408]	; 0xd50
    4944:	f8b9 e000 	ldrh.w	lr, [r9]
    4948:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    494c:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    4950:	4596      	cmp	lr, r2
    4952:	d120      	bne.n	4996 <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    4954:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    4956:	2801      	cmp	r0, #1
    4958:	f020 0303 	bic.w	r3, r0, #3
    495c:	d90a      	bls.n	4974 <tx_cmplt_get+0x5c>
    495e:	b1f3      	cbz	r3, 499e <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    4960:	1d02      	adds	r2, r0, #4
    4962:	d01c      	beq.n	499e <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    4964:	7942      	ldrb	r2, [r0, #5]
    4966:	b1d2      	cbz	r2, 499e <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    4968:	7902      	ldrb	r2, [r0, #4]
    496a:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    496e:	3a01      	subs	r2, #1
    4970:	2a01      	cmp	r2, #1
    4972:	d814      	bhi.n	499e <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    4974:	2201      	movs	r2, #1
			cmplt++;
    4976:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    4978:	604a      	str	r2, [r1, #4]
			cmplt++;
    497a:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    497c:	b113      	cbz	r3, 4984 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    497e:	4651      	mov	r1, sl
    4980:	f7fe f8c1 	bl	2b06 <mem_release>
		}

		_first = _first + 1;
    4984:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    4986:	f896 2d54 	ldrb.w	r2, [r6, #3412]	; 0xd54
		_first = _first + 1;
    498a:	b2e4      	uxtb	r4, r4
			_first = 0;
    498c:	42a2      	cmp	r2, r4
    498e:	bf08      	it	eq
    4990:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    4992:	4544      	cmp	r4, r8
    4994:	d1d3      	bne.n	493e <tx_cmplt_get+0x26>

	*first = _first;
    4996:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    4998:	4628      	mov	r0, r5
    499a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    499e:	f8c1 b004 	str.w	fp, [r1, #4]
    49a2:	e7eb      	b.n	497c <tx_cmplt_get+0x64>
		return 0;
    49a4:	2500      	movs	r5, #0
    49a6:	e7f7      	b.n	4998 <tx_cmplt_get+0x80>
    49a8:	200002c0 	.word	0x200002c0

000049ac <connection_get>:
{
    49ac:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    49ae:	4b09      	ldr	r3, [pc, #36]	; (49d4 <connection_get+0x28>)
    49b0:	f893 2cf8 	ldrb.w	r2, [r3, #3320]	; 0xcf8
    49b4:	4282      	cmp	r2, r0
{
    49b6:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    49b8:	d90a      	bls.n	49d0 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    49ba:	4602      	mov	r2, r0
    49bc:	f44f 7182 	mov.w	r1, #260	; 0x104
    49c0:	f8d3 0cf0 	ldr.w	r0, [r3, #3312]	; 0xcf0
    49c4:	f7fe f8b4 	bl	2b30 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    49c8:	b110      	cbz	r0, 49d0 <connection_get+0x24>
    49ca:	8c03      	ldrh	r3, [r0, #32]
    49cc:	42a3      	cmp	r3, r4
    49ce:	d000      	beq.n	49d2 <connection_get+0x26>
	return 0;
    49d0:	2000      	movs	r0, #0
}
    49d2:	bd10      	pop	{r4, pc}
    49d4:	200002c0 	.word	0x200002c0

000049d8 <role_disable>:
{
    49d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    49dc:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    49de:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    49e0:	2805      	cmp	r0, #5
{
    49e2:	4605      	mov	r5, r0
    49e4:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    49e6:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    49e8:	d00e      	beq.n	4a08 <role_disable+0x30>
    49ea:	2806      	cmp	r0, #6
    49ec:	f000 808e 	beq.w	4b0c <role_disable+0x134>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    49f0:	f240 8086 	bls.w	4b00 <role_disable+0x128>
			conn_handle = ticker_id_primary -
    49f4:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    49f6:	b280      	uxth	r0, r0
    49f8:	f7ff ffd8 	bl	49ac <connection_get>
			if (!conn) {
    49fc:	2800      	cmp	r0, #0
    49fe:	f000 80d9 	beq.w	4bb4 <role_disable+0x1dc>
			ticks_active_to_start =
    4a02:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    4a06:	e010      	b.n	4a2a <role_disable+0x52>
		ticks_xtal_to_start =
    4a08:	4b6b      	ldr	r3, [pc, #428]	; (4bb8 <role_disable+0x1e0>)
    4a0a:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    4a0c:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4a10:	ab02      	add	r3, sp, #8
    4a12:	9300      	str	r3, [sp, #0]
    4a14:	460a      	mov	r2, r1
    4a16:	4b69      	ldr	r3, [pc, #420]	; (4bbc <role_disable+0x1e4>)
    4a18:	2103      	movs	r1, #3
    4a1a:	2000      	movs	r0, #0
    4a1c:	f7fe ff5a 	bl	38d4 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    4a20:	2802      	cmp	r0, #2
    4a22:	d066      	beq.n	4af2 <role_disable+0x11a>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    4a24:	9b02      	ldr	r3, [sp, #8]
    4a26:	2b00      	cmp	r3, #0
    4a28:	d167      	bne.n	4afa <role_disable+0x122>
	LL_ASSERT(!_radio.ticker_id_stop);
    4a2a:	4c63      	ldr	r4, [pc, #396]	; (4bb8 <role_disable+0x1e0>)
    4a2c:	7ca3      	ldrb	r3, [r4, #18]
    4a2e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    4a32:	2b00      	cmp	r3, #0
    4a34:	d164      	bne.n	4b00 <role_disable+0x128>
	ret_cb = TICKER_STATUS_BUSY;
    4a36:	ab06      	add	r3, sp, #24
    4a38:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    4a3a:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    4a3c:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4a40:	2103      	movs	r1, #3
    4a42:	9300      	str	r3, [sp, #0]
    4a44:	462a      	mov	r2, r5
    4a46:	4b5d      	ldr	r3, [pc, #372]	; (4bbc <role_disable+0x1e4>)
    4a48:	f7fe ff44 	bl	38d4 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    4a4c:	2802      	cmp	r0, #2
    4a4e:	d063      	beq.n	4b18 <role_disable+0x140>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    4a50:	9b02      	ldr	r3, [sp, #8]
    4a52:	2b00      	cmp	r3, #0
    4a54:	d145      	bne.n	4ae2 <role_disable+0x10a>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    4a56:	7c23      	ldrb	r3, [r4, #16]
    4a58:	429d      	cmp	r5, r3
    4a5a:	d002      	beq.n	4a62 <role_disable+0x8a>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    4a5c:	7c63      	ldrb	r3, [r4, #17]
    4a5e:	429d      	cmp	r5, r3
    4a60:	d13b      	bne.n	4ada <role_disable+0x102>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    4a62:	ab06      	add	r3, sp, #24
    4a64:	2202      	movs	r2, #2
    4a66:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4a6a:	2200      	movs	r2, #0
    4a6c:	9300      	str	r3, [sp, #0]
    4a6e:	2103      	movs	r1, #3
    4a70:	4b52      	ldr	r3, [pc, #328]	; (4bbc <role_disable+0x1e4>)
    4a72:	4610      	mov	r0, r2
    4a74:	f7fe ff2e 	bl	38d4 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    4a78:	2802      	cmp	r0, #2
    4a7a:	d107      	bne.n	4a8c <role_disable+0xb4>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    4a7c:	2201      	movs	r2, #1
    4a7e:	4611      	mov	r1, r2
    4a80:	2003      	movs	r0, #3
    4a82:	f7fe f8b7 	bl	2bf4 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    4a86:	9b03      	ldr	r3, [sp, #12]
    4a88:	2b02      	cmp	r3, #2
    4a8a:	d039      	beq.n	4b00 <role_disable+0x128>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    4a8c:	9803      	ldr	r0, [sp, #12]
    4a8e:	2800      	cmp	r0, #0
    4a90:	d15e      	bne.n	4b50 <role_disable+0x178>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    4a92:	2302      	movs	r3, #2
    4a94:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    4a96:	7c23      	ldrb	r3, [r4, #16]
    4a98:	2b00      	cmp	r3, #0
    4a9a:	d031      	beq.n	4b00 <role_disable+0x128>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4a9c:	ab04      	add	r3, sp, #16
    4a9e:	9300      	str	r3, [sp, #0]
    4aa0:	2201      	movs	r2, #1
    4aa2:	4b46      	ldr	r3, [pc, #280]	; (4bbc <role_disable+0x1e4>)
		_radio.ticker_id_prepare = 0;
    4aa4:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4aa6:	2103      	movs	r1, #3
    4aa8:	f7fe ff14 	bl	38d4 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    4aac:	2802      	cmp	r0, #2
    4aae:	d107      	bne.n	4ac0 <role_disable+0xe8>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    4ab0:	2201      	movs	r2, #1
    4ab2:	4611      	mov	r1, r2
    4ab4:	2003      	movs	r0, #3
    4ab6:	f7fe f89d 	bl	2bf4 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    4aba:	9b04      	ldr	r3, [sp, #16]
    4abc:	2b02      	cmp	r3, #2
    4abe:	d01f      	beq.n	4b00 <role_disable+0x128>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    4ac0:	9a04      	ldr	r2, [sp, #16]
    4ac2:	2a00      	cmp	r2, #0
    4ac4:	d136      	bne.n	4b34 <role_disable+0x15c>
			ticks_xtal_to_start &= ~XON_BITMASK;
    4ac6:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    4aca:	45b0      	cmp	r8, r6
    4acc:	d93e      	bls.n	4b4c <role_disable+0x174>
				ret = mayfly_enqueue(
    4ace:	4b3c      	ldr	r3, [pc, #240]	; (4bc0 <role_disable+0x1e8>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    4ad0:	4611      	mov	r1, r2
    4ad2:	2003      	movs	r0, #3
    4ad4:	f7fe f8b6 	bl	2c44 <mayfly_enqueue>
			LL_ASSERT(!ret);
    4ad8:	b990      	cbnz	r0, 4b00 <role_disable+0x128>
	if (!_radio.ticker_id_stop) {
    4ada:	7ca3      	ldrb	r3, [r4, #18]
    4adc:	b90b      	cbnz	r3, 4ae2 <role_disable+0x10a>
		ret_cb = TICKER_STATUS_FAILURE;
    4ade:	2301      	movs	r3, #1
    4ae0:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    4ae2:	2300      	movs	r3, #0
    4ae4:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    4ae6:	9802      	ldr	r0, [sp, #8]
}
    4ae8:	b006      	add	sp, #24
    4aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				cpu_sleep();
    4aee:	f7ff fe77 	bl	47e0 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    4af2:	9b02      	ldr	r3, [sp, #8]
    4af4:	2b02      	cmp	r3, #2
    4af6:	d0fa      	beq.n	4aee <role_disable+0x116>
    4af8:	e794      	b.n	4a24 <role_disable+0x4c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    4afa:	9b02      	ldr	r3, [sp, #8]
    4afc:	2b01      	cmp	r3, #1
    4afe:	d094      	beq.n	4a2a <role_disable+0x52>
		LL_ASSERT(0);
    4b00:	4040      	eors	r0, r0
    4b02:	f380 8811 	msr	BASEPRI, r0
    4b06:	f04f 0004 	mov.w	r0, #4
    4b0a:	df02      	svc	2
		ticks_xtal_to_start =
    4b0c:	4b2a      	ldr	r3, [pc, #168]	; (4bb8 <role_disable+0x1e0>)
    4b0e:	f8d3 6c1c 	ldr.w	r6, [r3, #3100]	; 0xc1c
		ticks_active_to_start =
    4b12:	f8d3 8c20 	ldr.w	r8, [r3, #3104]	; 0xc20
		break;
    4b16:	e788      	b.n	4a2a <role_disable+0x52>
		if (_radio.ticker_id_event == ticker_id_primary) {
    4b18:	7c63      	ldrb	r3, [r4, #17]
    4b1a:	429d      	cmp	r5, r3
    4b1c:	d104      	bne.n	4b28 <role_disable+0x150>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    4b1e:	2201      	movs	r2, #1
    4b20:	4611      	mov	r1, r2
    4b22:	2003      	movs	r0, #3
    4b24:	f7fe f866 	bl	2bf4 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    4b28:	9b02      	ldr	r3, [sp, #8]
    4b2a:	2b02      	cmp	r3, #2
    4b2c:	d190      	bne.n	4a50 <role_disable+0x78>
			cpu_sleep();
    4b2e:	f7ff fe57 	bl	47e0 <cpu_sleep>
    4b32:	e7f9      	b.n	4b28 <role_disable+0x150>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    4b34:	9b04      	ldr	r3, [sp, #16]
    4b36:	2b01      	cmp	r3, #1
    4b38:	d1e2      	bne.n	4b00 <role_disable+0x128>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    4b3a:	2200      	movs	r2, #0
    4b3c:	4611      	mov	r1, r2
    4b3e:	4b20      	ldr	r3, [pc, #128]	; (4bc0 <role_disable+0x1e8>)
    4b40:	2003      	movs	r0, #3
    4b42:	f7fe f87f 	bl	2c44 <mayfly_enqueue>
			LL_ASSERT(!ret);
    4b46:	4602      	mov	r2, r0
    4b48:	2800      	cmp	r0, #0
    4b4a:	d1d9      	bne.n	4b00 <role_disable+0x128>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    4b4c:	4b1d      	ldr	r3, [pc, #116]	; (4bc4 <role_disable+0x1ec>)
    4b4e:	e7bf      	b.n	4ad0 <role_disable+0xf8>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    4b50:	9d03      	ldr	r5, [sp, #12]
    4b52:	2d01      	cmp	r5, #1
    4b54:	d1d4      	bne.n	4b00 <role_disable+0x128>
		if (ticker_id_stop != TICKER_NULL) {
    4b56:	2fff      	cmp	r7, #255	; 0xff
    4b58:	d019      	beq.n	4b8e <role_disable+0x1b6>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    4b5a:	ab06      	add	r3, sp, #24
    4b5c:	2202      	movs	r2, #2
    4b5e:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4b62:	2103      	movs	r1, #3
    4b64:	9300      	str	r3, [sp, #0]
    4b66:	463a      	mov	r2, r7
    4b68:	4b14      	ldr	r3, [pc, #80]	; (4bbc <role_disable+0x1e4>)
    4b6a:	2000      	movs	r0, #0
    4b6c:	f7fe feb2 	bl	38d4 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    4b70:	2802      	cmp	r0, #2
    4b72:	d107      	bne.n	4b84 <role_disable+0x1ac>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    4b74:	462a      	mov	r2, r5
    4b76:	4629      	mov	r1, r5
    4b78:	2003      	movs	r0, #3
    4b7a:	f7fe f83b 	bl	2bf4 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    4b7e:	9b05      	ldr	r3, [sp, #20]
    4b80:	2b02      	cmp	r3, #2
    4b82:	d0bd      	beq.n	4b00 <role_disable+0x128>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    4b84:	9b05      	ldr	r3, [sp, #20]
    4b86:	b113      	cbz	r3, 4b8e <role_disable+0x1b6>
    4b88:	9b05      	ldr	r3, [sp, #20]
    4b8a:	2b01      	cmp	r3, #1
    4b8c:	d1b8      	bne.n	4b00 <role_disable+0x128>
		if (_radio.role != ROLE_NONE) {
    4b8e:	7ce3      	ldrb	r3, [r4, #19]
    4b90:	2b00      	cmp	r3, #0
    4b92:	d0a2      	beq.n	4ada <role_disable+0x102>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    4b94:	4b0c      	ldr	r3, [pc, #48]	; (4bc8 <role_disable+0x1f0>)
    4b96:	2204      	movs	r2, #4
    4b98:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    4b9a:	2200      	movs	r2, #0
    4b9c:	4611      	mov	r1, r2
    4b9e:	2003      	movs	r0, #3
    4ba0:	f7fe f850 	bl	2c44 <mayfly_enqueue>
			LL_ASSERT(!ret);
    4ba4:	2800      	cmp	r0, #0
    4ba6:	d1ab      	bne.n	4b00 <role_disable+0x128>
			while (_radio.role != ROLE_NONE) {
    4ba8:	7ce3      	ldrb	r3, [r4, #19]
    4baa:	2b00      	cmp	r3, #0
    4bac:	d095      	beq.n	4ada <role_disable+0x102>
				cpu_sleep();
    4bae:	f7ff fe17 	bl	47e0 <cpu_sleep>
    4bb2:	e7f9      	b.n	4ba8 <role_disable+0x1d0>
				return 1;
    4bb4:	2001      	movs	r0, #1
    4bb6:	e797      	b.n	4ae8 <role_disable+0x110>
    4bb8:	200002c0 	.word	0x200002c0
    4bbc:	00004825 	.word	0x00004825
    4bc0:	20004f30 	.word	0x20004f30
    4bc4:	20004fd0 	.word	0x20004fd0
    4bc8:	20004f60 	.word	0x20004f60

00004bcc <chan_set>:
{
    4bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	pdu = (void *)_radio.advertiser.adv_data.data
    4bd0:	4e7d      	ldr	r6, [pc, #500]	; (4dc8 <chan_set+0x1fc>)
    4bd2:	f896 322d 	ldrb.w	r3, [r6, #557]	; 0x22d
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    4bd6:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    4bda:	4433      	add	r3, r6
{
    4bdc:	4604      	mov	r4, r0
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    4bde:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    4be2:	f003 030f 	and.w	r3, r3, #15
    4be6:	2b07      	cmp	r3, #7
    4be8:	f040 80e0 	bne.w	4dac <chan_set+0x1e0>
		switch (chan) {
    4bec:	2826      	cmp	r0, #38	; 0x26
    4bee:	f8df 8214 	ldr.w	r8, [pc, #532]	; 4e04 <chan_set+0x238>
    4bf2:	d030      	beq.n	4c56 <chan_set+0x8a>
    4bf4:	2827      	cmp	r0, #39	; 0x27
    4bf6:	f8df a210 	ldr.w	sl, [pc, #528]	; 4e08 <chan_set+0x23c>
    4bfa:	f8df 9210 	ldr.w	r9, [pc, #528]	; 4e0c <chan_set+0x240>
    4bfe:	d034      	beq.n	4c6a <chan_set+0x9e>
    4c00:	2825      	cmp	r0, #37	; 0x25
    4c02:	d162      	bne.n	4cca <chan_set+0xfe>
			stop_time_37 = k_cycle_get_32();
    4c04:	f7fd f9fa 	bl	1ffc <_timer_cycle_get_32>
			cycles_spent_37 = stop_time_37 - start_time37;
    4c08:	4e70      	ldr	r6, [pc, #448]	; (4dcc <chan_set+0x200>)
			stop_time_37 = k_cycle_get_32();
    4c0a:	4b71      	ldr	r3, [pc, #452]	; (4dd0 <chan_set+0x204>)
			cycles_spent_37 = stop_time_37 - start_time37;
    4c0c:	6837      	ldr	r7, [r6, #0]
			stop_time_37 = k_cycle_get_32();
    4c0e:	6018      	str	r0, [r3, #0]
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    4c10:	f8da 2000 	ldr.w	r2, [sl]
			cycles_spent_37 = stop_time_37 - start_time37;
    4c14:	4b6f      	ldr	r3, [pc, #444]	; (4dd4 <chan_set+0x208>)
    4c16:	1bc7      	subs	r7, r0, r7
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    4c18:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
			cycles_spent_37 = stop_time_37 - start_time37;
    4c1c:	601f      	str	r7, [r3, #0]
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    4c1e:	fb82 2305 	smull	r2, r3, r2, r5
    4c22:	fba2 0107 	umull	r0, r1, r2, r7
    4c26:	f8d9 2000 	ldr.w	r2, [r9]
    4c2a:	fb07 1103 	mla	r1, r7, r3, r1
    4c2e:	17d3      	asrs	r3, r2, #31
    4c30:	f7fb faf0 	bl	214 <__aeabi_uldivmod>
    4c34:	4b68      	ldr	r3, [pc, #416]	; (4dd8 <chan_set+0x20c>)
    4c36:	fbb0 f0f5 	udiv	r0, r0, r5
    4c3a:	6018      	str	r0, [r3, #0]
			start_time = k_cycle_get_32();
    4c3c:	f7fd f9de 	bl	1ffc <_timer_cycle_get_32>
    4c40:	f8c8 0000 	str.w	r0, [r8]
			start_time37= k_cycle_get_32();
    4c44:	f7fd f9da 	bl	1ffc <_timer_cycle_get_32>
			pckt_send++;
    4c48:	4a64      	ldr	r2, [pc, #400]	; (4ddc <chan_set+0x210>)
			start_time37= k_cycle_get_32();
    4c4a:	6030      	str	r0, [r6, #0]
			pckt_send++;
    4c4c:	7813      	ldrb	r3, [r2, #0]
    4c4e:	3301      	adds	r3, #1
    4c50:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(2);
    4c52:	2002      	movs	r0, #2
    4c54:	e09e      	b.n	4d94 <chan_set+0x1c8>
			start_time = k_cycle_get_32();
    4c56:	f7fd f9d1 	bl	1ffc <_timer_cycle_get_32>
			pckt_send++;
    4c5a:	4a60      	ldr	r2, [pc, #384]	; (4ddc <chan_set+0x210>)
			start_time = k_cycle_get_32();
    4c5c:	f8c8 0000 	str.w	r0, [r8]
			pckt_send++;
    4c60:	7813      	ldrb	r3, [r2, #0]
    4c62:	3301      	adds	r3, #1
    4c64:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(26);
    4c66:	201a      	movs	r0, #26
    4c68:	e094      	b.n	4d94 <chan_set+0x1c8>
			stop_time_39 = k_cycle_get_32();
    4c6a:	f7fd f9c7 	bl	1ffc <_timer_cycle_get_32>
    4c6e:	4b5c      	ldr	r3, [pc, #368]	; (4de0 <chan_set+0x214>)
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    4c70:	f8da 2000 	ldr.w	r2, [sl]
			stop_time_39 = k_cycle_get_32();
    4c74:	6018      	str	r0, [r3, #0]
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    4c76:	f8d8 3000 	ldr.w	r3, [r8]
    4c7a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    4c7e:	eba0 0e03 	sub.w	lr, r0, r3
    4c82:	fb82 2307 	smull	r2, r3, r2, r7
    4c86:	fbae 0102 	umull	r0, r1, lr, r2
    4c8a:	f8d9 2000 	ldr.w	r2, [r9]
    4c8e:	fb0e 1103 	mla	r1, lr, r3, r1
    4c92:	17d3      	asrs	r3, r2, #31
    4c94:	f7fb fabe 	bl	214 <__aeabi_uldivmod>
    4c98:	4b52      	ldr	r3, [pc, #328]	; (4de4 <chan_set+0x218>)
    4c9a:	fbb0 f0f7 	udiv	r0, r0, r7
    4c9e:	6018      	str	r0, [r3, #0]
			pckt_send = 0;
    4ca0:	4b4e      	ldr	r3, [pc, #312]	; (4ddc <chan_set+0x210>)
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    4ca2:	2500      	movs	r5, #0
			pckt_send = 0;
    4ca4:	701d      	strb	r5, [r3, #0]
			start_time = k_cycle_get_32();
    4ca6:	f7fd f9a9 	bl	1ffc <_timer_cycle_get_32>
			_radio.ext_advertiser.current_slot++;
    4caa:	f896 3c69 	ldrb.w	r3, [r6, #3177]	; 0xc69
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    4cae:	f896 2c68 	ldrb.w	r2, [r6, #3176]	; 0xc68
			start_time = k_cycle_get_32();
    4cb2:	f8c8 0000 	str.w	r0, [r8]
			_radio.ext_advertiser.current_slot++;
    4cb6:	3301      	adds	r3, #1
    4cb8:	b2db      	uxtb	r3, r3
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    4cba:	429a      	cmp	r2, r3
			_radio.ext_advertiser.current_slot++;
    4cbc:	f886 3c69 	strb.w	r3, [r6, #3177]	; 0xc69
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    4cc0:	d201      	bcs.n	4cc6 <chan_set+0xfa>
			_radio.ext_advertiser.current_slot= 0;
    4cc2:	f886 5c69 	strb.w	r5, [r6, #3177]	; 0xc69
			radio_freq_chan_set(80);
    4cc6:	2050      	movs	r0, #80	; 0x50
    4cc8:	e064      	b.n	4d94 <chan_set+0x1c8>
			stop_time_aux1 = k_cycle_get_32();
    4cca:	f7fd f997 	bl	1ffc <_timer_cycle_get_32>
    4cce:	4b46      	ldr	r3, [pc, #280]	; (4de8 <chan_set+0x21c>)
    4cd0:	6018      	str	r0, [r3, #0]
    4cd2:	f8da 3000 	ldr.w	r3, [sl]
    4cd6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    4cda:	fb83 2305 	smull	r2, r3, r3, r5
    4cde:	e9cd 2300 	strd	r2, r3, [sp]
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    4ce2:	f8d9 3000 	ldr.w	r3, [r9]
    4ce6:	4619      	mov	r1, r3
    4ce8:	17da      	asrs	r2, r3, #31
    4cea:	f8d8 3000 	ldr.w	r3, [r8]
    4cee:	e9cd 1202 	strd	r1, r2, [sp, #8]
    4cf2:	9a00      	ldr	r2, [sp, #0]
    4cf4:	1ac3      	subs	r3, r0, r3
			stop_time_aux1 = k_cycle_get_32();
    4cf6:	4607      	mov	r7, r0
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    4cf8:	fba3 0102 	umull	r0, r1, r3, r2
    4cfc:	9a01      	ldr	r2, [sp, #4]
    4cfe:	fb03 1102 	mla	r1, r3, r2, r1
    4d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4d06:	f7fb fa85 	bl	214 <__aeabi_uldivmod>
    4d0a:	4b38      	ldr	r3, [pc, #224]	; (4dec <chan_set+0x220>)
    4d0c:	fbb0 f0f5 	udiv	r0, r0, r5
    4d10:	6018      	str	r0, [r3, #0]
			us_spent_aux = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time37)/1000;
    4d12:	4b2e      	ldr	r3, [pc, #184]	; (4dcc <chan_set+0x200>)
    4d14:	681b      	ldr	r3, [r3, #0]
    4d16:	1aff      	subs	r7, r7, r3
    4d18:	9b00      	ldr	r3, [sp, #0]
    4d1a:	fba7 0103 	umull	r0, r1, r7, r3
    4d1e:	9b01      	ldr	r3, [sp, #4]
    4d20:	fb07 1103 	mla	r1, r7, r3, r1
    4d24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4d28:	f7fb fa74 	bl	214 <__aeabi_uldivmod>
    4d2c:	4b30      	ldr	r3, [pc, #192]	; (4df0 <chan_set+0x224>)
    4d2e:	fbb0 f0f5 	udiv	r0, r0, r5
    4d32:	6018      	str	r0, [r3, #0]
 			stop_dynamic_cal = k_cycle_get_32(); 
    4d34:	f7fd f962 	bl	1ffc <_timer_cycle_get_32>
    4d38:	4b2e      	ldr	r3, [pc, #184]	; (4df4 <chan_set+0x228>)
			last_dynamic_cal = final_dynamic_cal;
    4d3a:	4f2f      	ldr	r7, [pc, #188]	; (4df8 <chan_set+0x22c>)
 			stop_dynamic_cal = k_cycle_get_32(); 
    4d3c:	2100      	movs	r1, #0
    4d3e:	e9c3 0100 	strd	r0, r1, [r3]
			last_dynamic_cal = final_dynamic_cal;
    4d42:	4b2e      	ldr	r3, [pc, #184]	; (4dfc <chan_set+0x230>)
    4d44:	f8d7 8000 	ldr.w	r8, [r7]
    4d48:	687a      	ldr	r2, [r7, #4]
    4d4a:	f8c3 8000 	str.w	r8, [r3]
    4d4e:	605a      	str	r2, [r3, #4]
			final_dynamic_cal = SYS_CLOCK_HW_CYCLES_TO_NS(stop_dynamic_cal - start_dynamic_cal)/1000;
    4d50:	4b2b      	ldr	r3, [pc, #172]	; (4e00 <chan_set+0x234>)
    4d52:	e9d3 2300 	ldrd	r2, r3, [r3]
    4d56:	1a82      	subs	r2, r0, r2
    4d58:	f8da 0000 	ldr.w	r0, [sl]
    4d5c:	eb61 0303 	sbc.w	r3, r1, r3
    4d60:	fb80 0105 	smull	r0, r1, r0, r5
    4d64:	4351      	muls	r1, r2
    4d66:	fb00 1303 	mla	r3, r0, r3, r1
    4d6a:	fba2 0100 	umull	r0, r1, r2, r0
    4d6e:	f8d9 2000 	ldr.w	r2, [r9]
    4d72:	4419      	add	r1, r3
    4d74:	17d3      	asrs	r3, r2, #31
    4d76:	f7fb fa4d 	bl	214 <__aeabi_uldivmod>
    4d7a:	2300      	movs	r3, #0
    4d7c:	fbb0 f0f5 	udiv	r0, r0, r5
    4d80:	6038      	str	r0, [r7, #0]
			_radio.ext_advertiser.last_dynamic_cal = final_dynamic_cal-last_dynamic_cal;
    4d82:	eba0 0008 	sub.w	r0, r0, r8
			final_dynamic_cal = SYS_CLOCK_HW_CYCLES_TO_NS(stop_dynamic_cal - start_dynamic_cal)/1000;
    4d86:	607b      	str	r3, [r7, #4]
			_radio.ext_advertiser.last_dynamic_cal = final_dynamic_cal-last_dynamic_cal;
    4d88:	f8c6 0c88 	str.w	r0, [r6, #3208]	; 0xc88
			if (chan < 11) {
    4d8c:	2c0a      	cmp	r4, #10
    4d8e:	d809      	bhi.n	4da4 <chan_set+0x1d8>
				radio_freq_chan_set(4 + (2 * chan));
    4d90:	1ca0      	adds	r0, r4, #2
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    4d92:	0040      	lsls	r0, r0, #1
    4d94:	f005 fa1e 	bl	a1d4 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    4d98:	4620      	mov	r0, r4
}
    4d9a:	b004      	add	sp, #16
    4d9c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	radio_whiten_iv_set(chan);
    4da0:	f005 ba1e 	b.w	a1e0 <radio_whiten_iv_set>
			} else if (chan < 40) {
    4da4:	2c27      	cmp	r4, #39	; 0x27
    4da6:	d809      	bhi.n	4dbc <chan_set+0x1f0>
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    4da8:	1ce0      	adds	r0, r4, #3
    4daa:	e7f2      	b.n	4d92 <chan_set+0x1c6>
		switch (chan) {
    4dac:	2826      	cmp	r0, #38	; 0x26
    4dae:	f43f af5a 	beq.w	4c66 <chan_set+0x9a>
    4db2:	2827      	cmp	r0, #39	; 0x27
    4db4:	d087      	beq.n	4cc6 <chan_set+0xfa>
    4db6:	2825      	cmp	r0, #37	; 0x25
    4db8:	d1e8      	bne.n	4d8c <chan_set+0x1c0>
    4dba:	e74a      	b.n	4c52 <chan_set+0x86>
				LL_ASSERT(0);
    4dbc:	4040      	eors	r0, r0
    4dbe:	f380 8811 	msr	BASEPRI, r0
    4dc2:	f04f 0004 	mov.w	r0, #4
    4dc6:	df02      	svc	2
    4dc8:	200002c0 	.word	0x200002c0
    4dcc:	2000313c 	.word	0x2000313c
    4dd0:	200031a4 	.word	0x200031a4
    4dd4:	200031f8 	.word	0x200031f8
    4dd8:	20003218 	.word	0x20003218
    4ddc:	20001078 	.word	0x20001078
    4de0:	200031a8 	.word	0x200031a8
    4de4:	20003200 	.word	0x20003200
    4de8:	2000320c 	.word	0x2000320c
    4dec:	200031d4 	.word	0x200031d4
    4df0:	20003128 	.word	0x20003128
    4df4:	200031c8 	.word	0x200031c8
    4df8:	20001038 	.word	0x20001038
    4dfc:	20001040 	.word	0x20001040
    4e00:	20003130 	.word	0x20003130
    4e04:	200031c0 	.word	0x200031c0
    4e08:	20005050 	.word	0x20005050
    4e0c:	2000504c 	.word	0x2000504c

00004e10 <adv_setup>:
{
    4e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (_radio.advertiser.adv_data.first !=
    4e14:	4c80      	ldr	r4, [pc, #512]	; (5018 <adv_setup+0x208>)
    4e16:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
    4e1a:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    4e1e:	429a      	cmp	r2, r3
    4e20:	d006      	beq.n	4e30 <adv_setup+0x20>
		first = _radio.advertiser.adv_data.first + 1;
    4e22:	3301      	adds	r3, #1
    4e24:	b2db      	uxtb	r3, r3
			first = 0;
    4e26:	2b02      	cmp	r3, #2
    4e28:	bf08      	it	eq
    4e2a:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    4e2c:	f884 322d 	strb.w	r3, [r4, #557]	; 0x22d
	if (_radio.advertiser.scan_data.first != _radio.
    4e30:	f894 3c13 	ldrb.w	r3, [r4, #3091]	; 0xc13
    4e34:	f894 2c14 	ldrb.w	r2, [r4, #3092]	; 0xc14
    4e38:	429a      	cmp	r2, r3
    4e3a:	d006      	beq.n	4e4a <adv_setup+0x3a>
		first = _radio.advertiser.scan_data.first + 1;
    4e3c:	3301      	adds	r3, #1
    4e3e:	b2db      	uxtb	r3, r3
			first = 0;
    4e40:	2b02      	cmp	r3, #2
    4e42:	bf08      	it	eq
    4e44:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    4e46:	f884 3c13 	strb.w	r3, [r4, #3091]	; 0xc13
	pdu = (void *)_radio.advertiser.adv_data.data
    4e4a:	f894 722d 	ldrb.w	r7, [r4, #557]	; 0x22d
    4e4e:	eb07 2707 	add.w	r7, r7, r7, lsl #8
    4e52:	372b      	adds	r7, #43	; 0x2b
    4e54:	eb04 0907 	add.w	r9, r4, r7
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    4e58:	5de3      	ldrb	r3, [r4, r7]
    4e5a:	f003 030f 	and.w	r3, r3, #15
    4e5e:	2b07      	cmp	r3, #7
    4e60:	d15f      	bne.n	4f22 <adv_setup+0x112>
			if(h->adv_addr){
    4e62:	f899 3003 	ldrb.w	r3, [r9, #3]
    4e66:	07dd      	lsls	r5, r3, #31
				ptr += BDADDR_SIZE;
    4e68:	bf4c      	ite	mi
    4e6a:	f109 050a 	addmi.w	r5, r9, #10
		ptr = (u8_t *)h + sizeof(*h);
    4e6e:	f109 0504 	addpl.w	r5, r9, #4
			if(h->tgt_addr){
    4e72:	079a      	lsls	r2, r3, #30
				ptr += BDADDR_SIZE;
    4e74:	bf48      	it	mi
    4e76:	3506      	addmi	r5, #6
			if(h->adi){
    4e78:	071e      	lsls	r6, r3, #28
				ptr += sizeof(*adi_ptr);
    4e7a:	bf48      	it	mi
    4e7c:	3502      	addmi	r5, #2
			if(h->aux_ptr){
    4e7e:	06da      	lsls	r2, r3, #27
    4e80:	d549      	bpl.n	4f16 <adv_setup+0x106>
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    4e82:	f8d4 2c84 	ldr.w	r2, [r4, #3204]	; 0xc84
    4e86:	f8d4 3c60 	ldr.w	r3, [r4, #3168]	; 0xc60
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    4e8a:	f894 6029 	ldrb.w	r6, [r4, #41]	; 0x29
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    4e8e:	4413      	add	r3, r2
    4e90:	f894 2c69 	ldrb.w	r2, [r4, #3177]	; 0xc69
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    4e94:	f3c6 1602 	ubfx	r6, r6, #4, #3
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    4e98:	435a      	muls	r2, r3
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    4e9a:	2e07      	cmp	r6, #7
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    4e9c:	f8c4 2c6c 	str.w	r2, [r4, #3180]	; 0xc6c
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    4ea0:	f040 8093 	bne.w	4fca <adv_setup+0x1ba>
					if((_radio.advertiser.chan_map_current & 0x07) == 0x07){
    4ea4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    4ea8:	f003 0307 	and.w	r3, r3, #7
    4eac:	2b07      	cmp	r3, #7
    4eae:	d17f      	bne.n	4fb0 <adv_setup+0x1a0>
						offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    4eb0:	f8d4 0c70 	ldr.w	r0, [r4, #3184]	; 0xc70
    4eb4:	1a82      	subs	r2, r0, r2
    4eb6:	4610      	mov	r0, r2
    4eb8:	2100      	movs	r1, #0
						_radio.ext_advertiser.chan_offset = offset;
    4eba:	f8c4 2c7c 	str.w	r2, [r4, #3196]	; 0xc7c
				if(offset > 245700){
    4ebe:	4a57      	ldr	r2, [pc, #348]	; (501c <adv_setup+0x20c>)
    4ec0:	78ae      	ldrb	r6, [r5, #2]
    4ec2:	f895 8000 	ldrb.w	r8, [r5]
    4ec6:	2300      	movs	r3, #0
    4ec8:	428b      	cmp	r3, r1
    4eca:	bf08      	it	eq
    4ecc:	4282      	cmpeq	r2, r0
    4ece:	f080 808d 	bcs.w	4fec <adv_setup+0x1dc>
					ap->offs = offset/300;
    4ed2:	f44f 7296 	mov.w	r2, #300	; 0x12c
    4ed6:	2300      	movs	r3, #0
    4ed8:	f7fb f99c 	bl	214 <__aeabi_uldivmod>
    4edc:	f026 061f 	bic.w	r6, r6, #31
    4ee0:	7068      	strb	r0, [r5, #1]
    4ee2:	f3c0 2004 	ubfx	r0, r0, #8, #5
    4ee6:	4330      	orrs	r0, r6
    4ee8:	70a8      	strb	r0, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_300;
    4eea:	f048 0880 	orr.w	r8, r8, #128	; 0x80
				if(_radio.advertiser.ext_adv == 1){
    4eee:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    4ef2:	f885 8000 	strb.w	r8, [r5]
				if(_radio.advertiser.ext_adv == 1){
    4ef6:	07db      	lsls	r3, r3, #31
    4ef8:	d508      	bpl.n	4f0c <adv_setup+0xfc>
					_radio.ext_advertiser.aux_pckt_chan++;
    4efa:	f894 3c80 	ldrb.w	r3, [r4, #3200]	; 0xc80
    4efe:	3301      	adds	r3, #1
    4f00:	b2db      	uxtb	r3, r3
					if(_radio.ext_advertiser.aux_pckt_chan == 0x25){ //37 channel
    4f02:	2b25      	cmp	r3, #37	; 0x25
						_radio.ext_advertiser.aux_pckt_chan = 0;
    4f04:	bf08      	it	eq
    4f06:	2300      	moveq	r3, #0
    4f08:	f884 3c80 	strb.w	r3, [r4, #3200]	; 0xc80
				ap->chan_idx = 0x03;
    4f0c:	782b      	ldrb	r3, [r5, #0]
    4f0e:	2203      	movs	r2, #3
    4f10:	f362 0305 	bfi	r3, r2, #0, #6
    4f14:	702b      	strb	r3, [r5, #0]
		_radio.advertiser.ext_adv = 0;   //in order to change the aux packet channel index
    4f16:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    4f1a:	f36f 0300 	bfc	r3, #0, #1
    4f1e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		radio_pkt_tx_set(pdu);
    4f22:	4648      	mov	r0, r9
    4f24:	f005 f9ba 	bl	a29c <radio_pkt_tx_set>
		if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    4f28:	5de3      	ldrb	r3, [r4, r7]
    4f2a:	f003 030f 	and.w	r3, r3, #15
    4f2e:	2b02      	cmp	r3, #2
    4f30:	d06a      	beq.n	5008 <adv_setup+0x1f8>
    4f32:	2b07      	cmp	r3, #7
    4f34:	d068      	beq.n	5008 <adv_setup+0x1f8>
			_radio.state = STATE_TX;
    4f36:	2302      	movs	r3, #2
			radio_tmr_tifs_set(RADIO_TIFS);
    4f38:	2096      	movs	r0, #150	; 0x96
			_radio.state = STATE_TX;
    4f3a:	7523      	strb	r3, [r4, #20]
			radio_tmr_tifs_set(RADIO_TIFS);
    4f3c:	f005 fab8 	bl	a4b0 <radio_tmr_tifs_set>
			radio_switch_complete_and_rx(0);
    4f40:	2000      	movs	r0, #0
    4f42:	f005 fa25 	bl	a390 <radio_switch_complete_and_rx>
		bitmap = _radio.advertiser.chan_map_current;
    4f46:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    4f4a:	f3c3 0202 	ubfx	r2, r3, #0, #3
    4f4e:	b2d3      	uxtb	r3, r2
    4f50:	4619      	mov	r1, r3
		while ((bitmap & 0x01) == 0) {
    4f52:	2000      	movs	r0, #0
    4f54:	07ce      	lsls	r6, r1, #31
    4f56:	f100 0501 	add.w	r5, r0, #1
    4f5a:	d55a      	bpl.n	5012 <adv_setup+0x202>
			(_radio.advertiser.chan_map_current - 1);
    4f5c:	3b01      	subs	r3, #1
			_radio.advertiser.chan_map_current &=
    4f5e:	4013      	ands	r3, r2
    4f60:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
		count++;
    4f64:	4d2e      	ldr	r5, [pc, #184]	; (5020 <adv_setup+0x210>)
			_radio.advertiser.chan_map_current &=
    4f66:	f363 0202 	bfi	r2, r3, #0, #3
    4f6a:	4b2e      	ldr	r3, [pc, #184]	; (5024 <adv_setup+0x214>)
    4f6c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if(! _radio.advertiser.chan_map_current){	
    4f70:	f012 0f07 	tst.w	r2, #7
			chan_case ++;
    4f74:	bf08      	it	eq
    4f76:	781a      	ldrbeq	r2, [r3, #0]
		count++;
    4f78:	7829      	ldrb	r1, [r5, #0]
			chan_case ++;
    4f7a:	bf0c      	ite	eq
    4f7c:	3201      	addeq	r2, #1
			chan_case = 0 ;
    4f7e:	2200      	movne	r2, #0
    4f80:	701a      	strb	r2, [r3, #0]
		_radio.ext_advertiser.event++;
    4f82:	f894 3c6a 	ldrb.w	r3, [r4, #3178]	; 0xc6a
		if(_radio.ext_advertiser.event > _radio.ext_advertiser.max_skip){
    4f86:	f894 2c68 	ldrb.w	r2, [r4, #3176]	; 0xc68
		_radio.ext_advertiser.event++;
    4f8a:	3301      	adds	r3, #1
    4f8c:	b2db      	uxtb	r3, r3
		if(_radio.ext_advertiser.event > _radio.ext_advertiser.max_skip){
    4f8e:	429a      	cmp	r2, r3
		count++;
    4f90:	f101 0101 	add.w	r1, r1, #1
		_radio.ext_advertiser.event++;
    4f94:	f884 3c6a 	strb.w	r3, [r4, #3178]	; 0xc6a
		count++;
    4f98:	7029      	strb	r1, [r5, #0]
			_radio.ext_advertiser.event = 0;
    4f9a:	bf38      	it	cc
    4f9c:	2300      	movcc	r3, #0
		chan_set(37 + chan);
    4f9e:	b2c0      	uxtb	r0, r0
			_radio.ext_advertiser.event = 0;
    4fa0:	bf38      	it	cc
    4fa2:	f884 3c6a 	strbcc.w	r3, [r4, #3178]	; 0xc6a
		chan_set(37 + chan);
    4fa6:	3025      	adds	r0, #37	; 0x25
}
    4fa8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		chan_set(37 + chan);
    4fac:	f7ff be0e 	b.w	4bcc <chan_set>
					}else if((_radio.advertiser.chan_map_current & 0x07) == 0x06){
    4fb0:	2b06      	cmp	r3, #6
    4fb2:	d104      	bne.n	4fbe <adv_setup+0x1ae>
						offset = (_radio.ext_advertiser.chan_38 - _radio.ext_advertiser.slot );
    4fb4:	f8d4 0c74 	ldr.w	r0, [r4, #3188]	; 0xc74
						offset = (_radio.ext_advertiser.chan_39 - _radio.ext_advertiser.slot );
    4fb8:	1a80      	subs	r0, r0, r2
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    4fba:	2100      	movs	r1, #0
    4fbc:	e77f      	b.n	4ebe <adv_setup+0xae>
					}else if((_radio.advertiser.chan_map_current & 0x07) == 0x04){
    4fbe:	2b04      	cmp	r3, #4
    4fc0:	f47f af7d 	bne.w	4ebe <adv_setup+0xae>
						offset = (_radio.ext_advertiser.chan_39 - _radio.ext_advertiser.slot );
    4fc4:	f8d4 0c78 	ldr.w	r0, [r4, #3192]	; 0xc78
    4fc8:	e7f6      	b.n	4fb8 <adv_setup+0x1a8>
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset ) * _radio.ext_advertiser.event;
    4fca:	f894 6c6a 	ldrb.w	r6, [r4, #3178]	; 0xc6a
    4fce:	4373      	muls	r3, r6
    4fd0:	f8c4 3c6c 	str.w	r3, [r4, #3180]	; 0xc6c
					if(_radio.ext_advertiser.event == 0){
    4fd4:	b926      	cbnz	r6, 4fe0 <adv_setup+0x1d0>
						start_dynamic_cal = k_cycle_get_32(); 
    4fd6:	f7fd f811 	bl	1ffc <_timer_cycle_get_32>
    4fda:	4b13      	ldr	r3, [pc, #76]	; (5028 <adv_setup+0x218>)
    4fdc:	e883 0041 	stmia.w	r3, {r0, r6}
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    4fe0:	f8d4 0c70 	ldr.w	r0, [r4, #3184]	; 0xc70
    4fe4:	f8d4 3c6c 	ldr.w	r3, [r4, #3180]	; 0xc6c
    4fe8:	1ac0      	subs	r0, r0, r3
    4fea:	e7e6      	b.n	4fba <adv_setup+0x1aa>
					ap->offs = offset /30;
    4fec:	221e      	movs	r2, #30
    4fee:	2300      	movs	r3, #0
    4ff0:	f7fb f910 	bl	214 <__aeabi_uldivmod>
    4ff4:	f026 061f 	bic.w	r6, r6, #31
    4ff8:	7068      	strb	r0, [r5, #1]
    4ffa:	f3c0 2004 	ubfx	r0, r0, #8, #5
    4ffe:	4306      	orrs	r6, r0
    5000:	70ae      	strb	r6, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    5002:	f36f 18c7 	bfc	r8, #7, #1
    5006:	e772      	b.n	4eee <adv_setup+0xde>
			_radio.state = STATE_CLOSE;
    5008:	2303      	movs	r3, #3
    500a:	7523      	strb	r3, [r4, #20]
			radio_switch_complete_and_disable();
    500c:	f005 f9d6 	bl	a3bc <radio_switch_complete_and_disable>
    5010:	e799      	b.n	4f46 <adv_setup+0x136>
			bitmap >>= 1;
    5012:	0849      	lsrs	r1, r1, #1
    5014:	4628      	mov	r0, r5
    5016:	e79d      	b.n	4f54 <adv_setup+0x144>
    5018:	200002c0 	.word	0x200002c0
    501c:	0003bfc4 	.word	0x0003bfc4
    5020:	20001033 	.word	0x20001033
    5024:	20001032 	.word	0x20001032
    5028:	20003130 	.word	0x20003130

0000502c <ext_adv_setup>:
{
    502c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (_radio.advertiser.adv_data.first !=
    502e:	4c59      	ldr	r4, [pc, #356]	; (5194 <ext_adv_setup+0x168>)
    5030:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
    5034:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    5038:	429a      	cmp	r2, r3
    503a:	d006      	beq.n	504a <ext_adv_setup+0x1e>
		first = _radio.advertiser.adv_data.first + 1;
    503c:	3301      	adds	r3, #1
    503e:	b2db      	uxtb	r3, r3
			first = 0;
    5040:	2b02      	cmp	r3, #2
    5042:	bf08      	it	eq
    5044:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    5046:	f884 322d 	strb.w	r3, [r4, #557]	; 0x22d
	if (_radio.advertiser.scan_data.first != _radio.
    504a:	f894 3c13 	ldrb.w	r3, [r4, #3091]	; 0xc13
    504e:	f894 2c14 	ldrb.w	r2, [r4, #3092]	; 0xc14
    5052:	429a      	cmp	r2, r3
    5054:	d006      	beq.n	5064 <ext_adv_setup+0x38>
		first = _radio.advertiser.scan_data.first + 1;
    5056:	3301      	adds	r3, #1
    5058:	b2db      	uxtb	r3, r3
			first = 0;
    505a:	2b02      	cmp	r3, #2
    505c:	bf08      	it	eq
    505e:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    5060:	f884 3c13 	strb.w	r3, [r4, #3091]	; 0xc13
	pdu = (void *)_radio.advertiser.adv_data.data
    5064:	f894 722d 	ldrb.w	r7, [r4, #557]	; 0x22d
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    5068:	f894 5432 	ldrb.w	r5, [r4, #1074]	; 0x432
	switch(_radio.ext_advertiser.aux_chain_count_current){
    506c:	f894 3c8d 	ldrb.w	r3, [r4, #3213]	; 0xc8d
	pdu = (void *)_radio.advertiser.adv_data.data
    5070:	eb07 2707 	add.w	r7, r7, r7, lsl #8
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    5074:	eb05 2505 	add.w	r5, r5, r5, lsl #8
	pdu = (void *)_radio.advertiser.adv_data.data
    5078:	372b      	adds	r7, #43	; 0x2b
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    507a:	f205 252f 	addw	r5, r5, #559	; 0x22f
	pdu = (void *)_radio.advertiser.adv_data.data
    507e:	19e6      	adds	r6, r4, r7
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    5080:	4425      	add	r5, r4
	switch(_radio.ext_advertiser.aux_chain_count_current){
    5082:	2b05      	cmp	r3, #5
    5084:	d80a      	bhi.n	509c <ext_adv_setup+0x70>
    5086:	e8df f003 	tbb	[pc, r3]
    508a:	4503      	.short	0x4503
    508c:	675f574f 	.word	0x675f574f
			memcpy(aux_pdu, copy_pdu, 257);
    5090:	f240 1201 	movw	r2, #257	; 0x101
    5094:	4940      	ldr	r1, [pc, #256]	; (5198 <ext_adv_setup+0x16c>)
    5096:	4628      	mov	r0, r5
    5098:	f7fb fa84 	bl	5a4 <memcpy>
		if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    509c:	5de3      	ldrb	r3, [r4, r7]
    509e:	f003 030f 	and.w	r3, r3, #15
    50a2:	2b07      	cmp	r3, #7
    50a4:	d11a      	bne.n	50dc <ext_adv_setup+0xb0>
			if(h->adv_addr){
    50a6:	78f2      	ldrb	r2, [r6, #3]
    50a8:	07d3      	lsls	r3, r2, #31
				ptr += BDADDR_SIZE;
    50aa:	bf4c      	ite	mi
    50ac:	f106 030a 	addmi.w	r3, r6, #10
		ptr = (u8_t *)h + sizeof(*h);
    50b0:	1d33      	addpl	r3, r6, #4
			if(h->tgt_addr){
    50b2:	0790      	lsls	r0, r2, #30
				ptr += BDADDR_SIZE;
    50b4:	bf48      	it	mi
    50b6:	3306      	addmi	r3, #6
			if(h->adi){
    50b8:	0711      	lsls	r1, r2, #28
				ptr += sizeof(*adi_ptr);
    50ba:	bf48      	it	mi
    50bc:	3302      	addmi	r3, #2
			if(h->aux_ptr){
    50be:	06d2      	lsls	r2, r2, #27
    50c0:	d50c      	bpl.n	50dc <ext_adv_setup+0xb0>
					ap->offs = offset /30;
    50c2:	2206      	movs	r2, #6
    50c4:	705a      	strb	r2, [r3, #1]
    50c6:	789a      	ldrb	r2, [r3, #2]
    50c8:	f022 021f 	bic.w	r2, r2, #31
    50cc:	709a      	strb	r2, [r3, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    50ce:	781a      	ldrb	r2, [r3, #0]
				ap->chan_idx = 0x03;
    50d0:	2103      	movs	r1, #3
    50d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    50d6:	f361 0205 	bfi	r2, r1, #0, #6
    50da:	701a      	strb	r2, [r3, #0]
			radio_pkt_tx_set(aux_pdu);
    50dc:	4628      	mov	r0, r5
    50de:	f005 f8dd 	bl	a29c <radio_pkt_tx_set>
			if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    50e2:	5de3      	ldrb	r3, [r4, r7]
    50e4:	f003 030f 	and.w	r3, r3, #15
    50e8:	2b02      	cmp	r3, #2
    50ea:	d03d      	beq.n	5168 <ext_adv_setup+0x13c>
    50ec:	2b07      	cmp	r3, #7
    50ee:	d03b      	beq.n	5168 <ext_adv_setup+0x13c>
				_radio.state = STATE_TX;
    50f0:	2302      	movs	r3, #2
				radio_tmr_tifs_set(RADIO_TIFS);
    50f2:	2096      	movs	r0, #150	; 0x96
				_radio.state = STATE_TX;
    50f4:	7523      	strb	r3, [r4, #20]
				radio_tmr_tifs_set(RADIO_TIFS);
    50f6:	f005 f9db 	bl	a4b0 <radio_tmr_tifs_set>
				radio_switch_complete_and_rx(0);
    50fa:	2000      	movs	r0, #0
    50fc:	f005 f948 	bl	a390 <radio_switch_complete_and_rx>
			_radio.ext_advertiser.current_slot = 0;			// for packets which are transmittedon primaty channels
    5100:	2300      	movs	r3, #0
    5102:	f884 3c69 	strb.w	r3, [r4, #3177]	; 0xc69
			_radio.ext_advertiser.event = 0;				// skip number of events before transmitting aux
    5106:	f884 3c6a 	strb.w	r3, [r4, #3178]	; 0xc6a
			chan_set(03);
    510a:	2003      	movs	r0, #3
}
    510c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			chan_set(03);
    5110:	f7ff bd5c 	b.w	4bcc <chan_set>
			memcpy(aux_pdu, copy_pdu, 257);
    5114:	f240 1201 	movw	r2, #257	; 0x101
    5118:	4920      	ldr	r1, [pc, #128]	; (519c <ext_adv_setup+0x170>)
    511a:	4628      	mov	r0, r5
    511c:	f7fb fa42 	bl	5a4 <memcpy>
			chan_set(1);
    5120:	2001      	movs	r0, #1
			chan_set(5);
    5122:	f7ff fd53 	bl	4bcc <chan_set>
			break;
    5126:	e7b9      	b.n	509c <ext_adv_setup+0x70>
			memcpy(aux_pdu, copy_pdu, 257);
    5128:	f240 1201 	movw	r2, #257	; 0x101
    512c:	491c      	ldr	r1, [pc, #112]	; (51a0 <ext_adv_setup+0x174>)
    512e:	4628      	mov	r0, r5
    5130:	f7fb fa38 	bl	5a4 <memcpy>
			chan_set(2);
    5134:	2002      	movs	r0, #2
    5136:	e7f4      	b.n	5122 <ext_adv_setup+0xf6>
			memcpy(aux_pdu, copy_pdu, 257);
    5138:	f240 1201 	movw	r2, #257	; 0x101
    513c:	4919      	ldr	r1, [pc, #100]	; (51a4 <ext_adv_setup+0x178>)
    513e:	4628      	mov	r0, r5
    5140:	f7fb fa30 	bl	5a4 <memcpy>
			chan_set(3);
    5144:	2003      	movs	r0, #3
    5146:	e7ec      	b.n	5122 <ext_adv_setup+0xf6>
			memcpy(aux_pdu, copy_pdu, 257);
    5148:	f240 1201 	movw	r2, #257	; 0x101
    514c:	4916      	ldr	r1, [pc, #88]	; (51a8 <ext_adv_setup+0x17c>)
    514e:	4628      	mov	r0, r5
    5150:	f7fb fa28 	bl	5a4 <memcpy>
			chan_set(4);
    5154:	2004      	movs	r0, #4
    5156:	e7e4      	b.n	5122 <ext_adv_setup+0xf6>
			memcpy(aux_pdu, copy_pdu, 257);
    5158:	f240 1201 	movw	r2, #257	; 0x101
    515c:	4913      	ldr	r1, [pc, #76]	; (51ac <ext_adv_setup+0x180>)
    515e:	4628      	mov	r0, r5
    5160:	f7fb fa20 	bl	5a4 <memcpy>
			chan_set(5);
    5164:	2005      	movs	r0, #5
    5166:	e7dc      	b.n	5122 <ext_adv_setup+0xf6>
				chain_flag = 1;
    5168:	4a11      	ldr	r2, [pc, #68]	; (51b0 <ext_adv_setup+0x184>)
				if( _radio.ext_advertiser.aux_chain_count == _radio.ext_advertiser.aux_chain_count_current ){
    516a:	f894 1c8c 	ldrb.w	r1, [r4, #3212]	; 0xc8c
				chain_flag = 1;
    516e:	2301      	movs	r3, #1
    5170:	7013      	strb	r3, [r2, #0]
				_radio.ext_advertiser.aux_chain_count_current++;
    5172:	f894 3c8d 	ldrb.w	r3, [r4, #3213]	; 0xc8d
    5176:	3301      	adds	r3, #1
    5178:	b2db      	uxtb	r3, r3
				if( _radio.ext_advertiser.aux_chain_count == _radio.ext_advertiser.aux_chain_count_current ){
    517a:	4299      	cmp	r1, r3
				_radio.ext_advertiser.aux_chain_count_current++;
    517c:	f884 3c8d 	strb.w	r3, [r4, #3213]	; 0xc8d
				if( _radio.ext_advertiser.aux_chain_count == _radio.ext_advertiser.aux_chain_count_current ){
    5180:	d1b6      	bne.n	50f0 <ext_adv_setup+0xc4>
					_radio.advertiser.ext_adv = 1;
    5182:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    5186:	f043 0301 	orr.w	r3, r3, #1
    518a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
					chain_flag = 0;
    518e:	2300      	movs	r3, #0
    5190:	7013      	strb	r3, [r2, #0]
    5192:	e7ad      	b.n	50f0 <ext_adv_setup+0xc4>
    5194:	200002c0 	.word	0x200002c0
    5198:	200006f3 	.word	0x200006f3
    519c:	200007f4 	.word	0x200007f4
    51a0:	200008f5 	.word	0x200008f5
    51a4:	200009f6 	.word	0x200009f6
    51a8:	20000af7 	.word	0x20000af7
    51ac:	20000bf8 	.word	0x20000bf8
    51b0:	20001031 	.word	0x20001031
    51b4:	00000000 	.word	0x00000000

000051b8 <sched_after_mstr_free_slot_get>:
{
    51b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    51bc:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    51be:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    51c0:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    51c2:	f8df 9114 	ldr.w	r9, [pc, #276]	; 52d8 <sched_after_mstr_free_slot_get+0x120>
	ticker_id = ticker_id_prev = 0xff;
    51c6:	f88d 501f 	strb.w	r5, [sp, #31]
{
    51ca:	4680      	mov	r8, r0
    51cc:	4693      	mov	fp, r2
    51ce:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    51d0:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    51d4:	601c      	str	r4, [r3, #0]
    51d6:	9408      	str	r4, [sp, #32]
    51d8:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    51da:	2302      	movs	r3, #2
    51dc:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    51de:	ab09      	add	r3, sp, #36	; 0x24
    51e0:	9302      	str	r3, [sp, #8]
    51e2:	4b3b      	ldr	r3, [pc, #236]	; (52d0 <sched_after_mstr_free_slot_get+0x118>)
    51e4:	9301      	str	r3, [sp, #4]
    51e6:	ab08      	add	r3, sp, #32
    51e8:	9300      	str	r3, [sp, #0]
    51ea:	f10d 021f 	add.w	r2, sp, #31
    51ee:	465b      	mov	r3, fp
    51f0:	4641      	mov	r1, r8
    51f2:	2000      	movs	r0, #0
    51f4:	f7fe fbaa 	bl	394c <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    51f8:	2802      	cmp	r0, #2
    51fa:	d00b      	beq.n	5214 <sched_after_mstr_free_slot_get+0x5c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    51fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    51fe:	b16b      	cbz	r3, 521c <sched_after_mstr_free_slot_get+0x64>
    5200:	4040      	eors	r0, r0
    5202:	f380 8811 	msr	BASEPRI, r0
    5206:	f04f 0004 	mov.w	r0, #4
    520a:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    520c:	4641      	mov	r1, r8
    520e:	2000      	movs	r0, #0
    5210:	f7fe fc1a 	bl	3a48 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    5214:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5216:	2b02      	cmp	r3, #2
    5218:	d0f8      	beq.n	520c <sched_after_mstr_free_slot_get+0x54>
    521a:	e7ef      	b.n	51fc <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    521c:	f89d 201f 	ldrb.w	r2, [sp, #31]
    5220:	2aff      	cmp	r2, #255	; 0xff
    5222:	d04e      	beq.n	52c2 <sched_after_mstr_free_slot_get+0x10a>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    5224:	2a06      	cmp	r2, #6
    5226:	d9d8      	bls.n	51da <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    5228:	f899 3cf8 	ldrb.w	r3, [r9, #3320]	; 0xcf8
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    522c:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    522e:	429a      	cmp	r2, r3
    5230:	dad3      	bge.n	51da <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    5232:	3a07      	subs	r2, #7
    5234:	b292      	uxth	r2, r2
    5236:	f44f 7182 	mov.w	r1, #260	; 0x104
    523a:	f8d9 0cf0 	ldr.w	r0, [r9, #3312]	; 0xcf0
    523e:	f7fd fc77 	bl	2b30 <mem_get>
		if (conn && !conn->role) {
    5242:	2800      	cmp	r0, #0
    5244:	d0c9      	beq.n	51da <sched_after_mstr_free_slot_get+0x22>
    5246:	f990 301d 	ldrsb.w	r3, [r0, #29]
    524a:	2b00      	cmp	r3, #0
    524c:	dbc5      	blt.n	51da <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    524e:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    5250:	9a08      	ldr	r2, [sp, #32]
    5252:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    5256:	2b00      	cmp	r3, #0
    5258:	da12      	bge.n	5280 <sched_after_mstr_free_slot_get+0xc8>
    525a:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    525c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    5260:	4571      	cmp	r1, lr
    5262:	bf2c      	ite	cs
    5264:	1852      	addcs	r2, r2, r1
    5266:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    5268:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    526a:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    526c:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    526e:	f101 0104 	add.w	r1, r1, #4
    5272:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    5274:	d108      	bne.n	5288 <sched_after_mstr_free_slot_get+0xd0>
			ticker_id_prev = ticker_id;
    5276:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    527a:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    527c:	4616      	mov	r6, r2
    527e:	e7ac      	b.n	51da <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    5280:	4573      	cmp	r3, lr
    5282:	bf38      	it	cc
    5284:	4673      	movcc	r3, lr
    5286:	e7f0      	b.n	526a <sched_after_mstr_free_slot_get+0xb2>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    5288:	4631      	mov	r1, r6
    528a:	4610      	mov	r0, r2
    528c:	9305      	str	r3, [sp, #20]
    528e:	9204      	str	r2, [sp, #16]
    5290:	f7fe fbf2 	bl	3a78 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    5294:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    5298:	4288      	cmp	r0, r1
    529a:	9a04      	ldr	r2, [sp, #16]
    529c:	9b05      	ldr	r3, [sp, #20]
    529e:	d9ea      	bls.n	5276 <sched_after_mstr_free_slot_get+0xbe>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    52a0:	480c      	ldr	r0, [pc, #48]	; (52d4 <sched_after_mstr_free_slot_get+0x11c>)
    52a2:	4434      	add	r4, r6
    52a4:	fba4 0100 	umull	r0, r1, r4, r0
    52a8:	2307      	movs	r3, #7
    52aa:	fb03 1104 	mla	r1, r3, r4, r1
    52ae:	a306      	add	r3, pc, #24	; (adr r3, 52c8 <sched_after_mstr_free_slot_get+0x110>)
    52b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    52b4:	f7fa ffae 	bl	214 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    52b8:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    52ba:	6038      	str	r0, [r7, #0]
}
    52bc:	b00b      	add	sp, #44	; 0x2c
    52be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    52c2:	2dff      	cmp	r5, #255	; 0xff
    52c4:	d1ec      	bne.n	52a0 <sched_after_mstr_free_slot_get+0xe8>
    52c6:	e7f9      	b.n	52bc <sched_after_mstr_free_slot_get+0x104>
    52c8:	3b9aca00 	.word	0x3b9aca00
    52cc:	00000000 	.word	0x00000000
    52d0:	00004825 	.word	0x00004825
    52d4:	1afd498d 	.word	0x1afd498d
    52d8:	200002c0 	.word	0x200002c0

000052dc <isr_adv_ci_adva_check>:
{
    52dc:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    52de:	7804      	ldrb	r4, [r0, #0]
    52e0:	780a      	ldrb	r2, [r1, #0]
    52e2:	f3c4 1380 	ubfx	r3, r4, #6, #1
    52e6:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    52ea:	d119      	bne.n	5320 <isr_adv_ci_adva_check+0x44>
    52ec:	f004 040f 	and.w	r4, r4, #15
    52f0:	2c01      	cmp	r4, #1
    52f2:	f101 0608 	add.w	r6, r1, #8
    52f6:	f100 0502 	add.w	r5, r0, #2
    52fa:	d008      	beq.n	530e <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    52fc:	2206      	movs	r2, #6
    52fe:	4631      	mov	r1, r6
    5300:	4628      	mov	r0, r5
    5302:	f7fb f93a 	bl	57a <memcmp>
			 BDADDR_SIZE)) ||
    5306:	fab0 f080 	clz	r0, r0
    530a:	0940      	lsrs	r0, r0, #5
    530c:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    530e:	2206      	movs	r2, #6
    5310:	4631      	mov	r1, r6
    5312:	4628      	mov	r0, r5
    5314:	f7fb f931 	bl	57a <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    5318:	2800      	cmp	r0, #0
    531a:	d1ef      	bne.n	52fc <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    531c:	4620      	mov	r0, r4
    531e:	bd70      	pop	{r4, r5, r6, pc}
    5320:	2000      	movs	r0, #0
}
    5322:	bd70      	pop	{r4, r5, r6, pc}

00005324 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    5324:	4a0b      	ldr	r2, [pc, #44]	; (5354 <rx_fc_lock+0x30>)
    5326:	f892 3d60 	ldrb.w	r3, [r2, #3424]	; 0xd60
    532a:	f892 1d61 	ldrb.w	r1, [r2, #3425]	; 0xd61
    532e:	4299      	cmp	r1, r3
    5330:	d10e      	bne.n	5350 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    5332:	f892 3d60 	ldrb.w	r3, [r2, #3424]	; 0xd60
    5336:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    533a:	f8a3 0d5a 	strh.w	r0, [r3, #3418]	; 0xd5a
		req = _radio.fc_req + 1;
    533e:	f892 3d60 	ldrb.w	r3, [r2, #3424]	; 0xd60
    5342:	3301      	adds	r3, #1
    5344:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    5346:	2b03      	cmp	r3, #3
    5348:	bf08      	it	eq
    534a:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    534c:	f882 3d60 	strb.w	r3, [r2, #3424]	; 0xd60
    5350:	4770      	bx	lr
    5352:	bf00      	nop
    5354:	200002c0 	.word	0x200002c0

00005358 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    5358:	4b04      	ldr	r3, [pc, #16]	; (536c <ticker_job_disable+0x14>)
    535a:	7d1b      	ldrb	r3, [r3, #20]
    535c:	b123      	cbz	r3, 5368 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    535e:	2101      	movs	r1, #1
    5360:	2200      	movs	r2, #0
    5362:	4608      	mov	r0, r1
    5364:	f7fd bc46 	b.w	2bf4 <mayfly_enable>
    5368:	4770      	bx	lr
    536a:	bf00      	nop
    536c:	200002c0 	.word	0x200002c0

00005370 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    5370:	2806      	cmp	r0, #6
{
    5372:	b510      	push	{r4, lr}
    5374:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    5376:	d90a      	bls.n	538e <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    5378:	4b09      	ldr	r3, [pc, #36]	; (53a0 <hdr_conn_get+0x30>)
    537a:	1fc2      	subs	r2, r0, #7
    537c:	b292      	uxth	r2, r2
    537e:	f44f 7182 	mov.w	r1, #260	; 0x104
    5382:	f8d3 0cf0 	ldr.w	r0, [r3, #3312]	; 0xcf0
    5386:	f7fd fbd3 	bl	2b30 <mem_get>
    538a:	6020      	str	r0, [r4, #0]
    538c:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    538e:	2805      	cmp	r0, #5
    5390:	d004      	beq.n	539c <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    5392:	2806      	cmp	r0, #6
	return NULL;
    5394:	4803      	ldr	r0, [pc, #12]	; (53a4 <hdr_conn_get+0x34>)
    5396:	bf18      	it	ne
    5398:	2000      	movne	r0, #0
    539a:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    539c:	4802      	ldr	r0, [pc, #8]	; (53a8 <hdr_conn_get+0x38>)
}
    539e:	bd10      	pop	{r4, pc}
    53a0:	200002c0 	.word	0x200002c0
    53a4:	20000edc 	.word	0x20000edc
    53a8:	200002d8 	.word	0x200002d8

000053ac <mayfly_xtal_retain.part.16>:
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
    53ac:	b508      	push	{r3, lr}
			s_xtal_retained = 0;
    53ae:	4b0a      	ldr	r3, [pc, #40]	; (53d8 <mayfly_xtal_retain.part.16+0x2c>)
    53b0:	2200      	movs	r2, #0
    53b2:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
    53b4:	b168      	cbz	r0, 53d2 <mayfly_xtal_retain.part.16+0x26>
    53b6:	2801      	cmp	r0, #1
    53b8:	d105      	bne.n	53c6 <mayfly_xtal_retain.part.16+0x1a>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    53ba:	4b08      	ldr	r3, [pc, #32]	; (53dc <mayfly_xtal_retain.part.16+0x30>)
			retval = mayfly_enqueue(caller_id,
    53bc:	2200      	movs	r2, #0
    53be:	4611      	mov	r1, r2
    53c0:	f7fd fc40 	bl	2c44 <mayfly_enqueue>
			LL_ASSERT(!retval);
    53c4:	b138      	cbz	r0, 53d6 <mayfly_xtal_retain.part.16+0x2a>
    53c6:	4040      	eors	r0, r0
    53c8:	f380 8811 	msr	BASEPRI, r0
    53cc:	f04f 0004 	mov.w	r0, #4
    53d0:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    53d2:	4b03      	ldr	r3, [pc, #12]	; (53e0 <mayfly_xtal_retain.part.16+0x34>)
    53d4:	e7f2      	b.n	53bc <mayfly_xtal_retain.part.16+0x10>
    53d6:	bd08      	pop	{r3, pc}
    53d8:	200010cc 	.word	0x200010cc
    53dc:	20004fb0 	.word	0x20004fb0
    53e0:	20004fa0 	.word	0x20004fa0

000053e4 <rx_packet_set>:
{
    53e4:	b538      	push	{r3, r4, r5, lr}
    53e6:	4605      	mov	r5, r0
    53e8:	460c      	mov	r4, r1
	radio_phy_set(phy, 0);
    53ea:	2100      	movs	r1, #0
    53ec:	4608      	mov	r0, r1
    53ee:	f004 fedb 	bl	a1a8 <radio_phy_set>
	if (conn->enc_rx) {
    53f2:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    53f6:	06db      	lsls	r3, r3, #27
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    53f8:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_rx) {
    53fc:	d50d      	bpl.n	541a <rx_packet_set+0x36>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    53fe:	211f      	movs	r1, #31
    5400:	2008      	movs	r0, #8
    5402:	f004 ff17 	bl	a234 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    5406:	4622      	mov	r2, r4
    5408:	2100      	movs	r1, #0
    540a:	f105 00a9 	add.w	r0, r5, #169	; 0xa9
    540e:	f005 f949 	bl	a6a4 <radio_ccm_rx_pkt_set>
}
    5412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_rx_set(pdu_data_rx);
    5416:	f004 bf3b 	b.w	a290 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    541a:	2008      	movs	r0, #8
    541c:	211b      	movs	r1, #27
    541e:	f004 ff09 	bl	a234 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    5422:	4620      	mov	r0, r4
    5424:	e7f5      	b.n	5412 <rx_packet_set+0x2e>

00005426 <tx_packet_set>:
{
    5426:	b538      	push	{r3, r4, r5, lr}
    5428:	4605      	mov	r5, r0
    542a:	460c      	mov	r4, r1
	radio_phy_set(phy, flags);
    542c:	2100      	movs	r1, #0
    542e:	4608      	mov	r0, r1
    5430:	f004 feba 	bl	a1a8 <radio_phy_set>
	if (conn->enc_tx) {
    5434:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    5438:	069b      	lsls	r3, r3, #26
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    543a:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_tx) {
    543e:	d50c      	bpl.n	545a <tx_packet_set+0x34>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    5440:	211f      	movs	r1, #31
    5442:	2008      	movs	r0, #8
    5444:	f004 fef6 	bl	a234 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    5448:	4621      	mov	r1, r4
    544a:	f105 00ca 	add.w	r0, r5, #202	; 0xca
    544e:	f005 f965 	bl	a71c <radio_ccm_tx_pkt_set>
}
    5452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_tx_set(pdu_data_tx);
    5456:	f004 bf21 	b.w	a29c <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    545a:	2008      	movs	r0, #8
    545c:	211b      	movs	r1, #27
    545e:	f004 fee9 	bl	a234 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    5462:	4620      	mov	r0, r4
    5464:	e7f5      	b.n	5452 <tx_packet_set+0x2c>
	...

00005468 <isr_scan_tgta_check.isra.30>:
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    5468:	b570      	push	{r4, r5, r6, lr}
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    546a:	4c16      	ldr	r4, [pc, #88]	; (54c4 <isr_scan_tgta_check.isra.30+0x5c>)
    546c:	7803      	ldrb	r3, [r0, #0]
    546e:	f894 2c2d 	ldrb.w	r2, [r4, #3117]	; 0xc2d
			BDADDR_SIZE) == 0))) ||
    5472:	09db      	lsrs	r3, r3, #7
    5474:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    5478:	4605      	mov	r5, r0
    547a:	460e      	mov	r6, r1
			BDADDR_SIZE) == 0))) ||
    547c:	d007      	beq.n	548e <isr_scan_tgta_check.isra.30+0x26>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    547e:	f894 0c2d 	ldrb.w	r0, [r4, #3117]	; 0xc2d
    5482:	f3c0 1001 	ubfx	r0, r0, #4, #2
    5486:	f010 0002 	ands.w	r0, r0, #2
    548a:	d10b      	bne.n	54a4 <isr_scan_tgta_check.isra.30+0x3c>
    548c:	bd70      	pop	{r4, r5, r6, pc}
		(memcmp(&_radio.scanner.init_addr[0],
    548e:	f100 0108 	add.w	r1, r0, #8
    5492:	2206      	movs	r2, #6
    5494:	f604 402e 	addw	r0, r4, #3118	; 0xc2e
    5498:	f7fb f86f 	bl	57a <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    549c:	2800      	cmp	r0, #0
    549e:	d1ee      	bne.n	547e <isr_scan_tgta_check.isra.30+0x16>
			BDADDR_SIZE) == 0))) ||
    54a0:	2001      	movs	r0, #1
    54a2:	bd70      	pop	{r4, r5, r6, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    54a4:	f995 3000 	ldrsb.w	r3, [r5]
    54a8:	2b00      	cmp	r3, #0
    54aa:	da09      	bge.n	54c0 <isr_scan_tgta_check.isra.30+0x58>
	    (pdu->rx_addr != 0) &&
    54ac:	7b6b      	ldrb	r3, [r5, #13]
    54ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    54b2:	2b40      	cmp	r3, #64	; 0x40
    54b4:	d104      	bne.n	54c0 <isr_scan_tgta_check.isra.30+0x58>
		if (dir_report) {
    54b6:	2e00      	cmp	r6, #0
    54b8:	d0f2      	beq.n	54a0 <isr_scan_tgta_check.isra.30+0x38>
			*dir_report = true;
    54ba:	2001      	movs	r0, #1
    54bc:	7030      	strb	r0, [r6, #0]
    54be:	bd70      	pop	{r4, r5, r6, pc}
			BDADDR_SIZE) == 0))) ||
    54c0:	2000      	movs	r0, #0
}
    54c2:	bd70      	pop	{r4, r5, r6, pc}
    54c4:	200002c0 	.word	0x200002c0

000054c8 <event_active.part.17>:
	LL_ASSERT(!_radio.ticker_id_prepare);
    54c8:	4040      	eors	r0, r0
    54ca:	f380 8811 	msr	BASEPRI, r0
    54ce:	f04f 0004 	mov.w	r0, #4
    54d2:	df02      	svc	2

000054d4 <prepare_normal_set>:
{
    54d4:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    54d6:	6804      	ldr	r4, [r0, #0]
    54d8:	2c00      	cmp	r4, #0
{
    54da:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    54dc:	da19      	bge.n	5512 <prepare_normal_set+0x3e>
		u32_t ticks_prepare_to_start =
    54de:	6843      	ldr	r3, [r0, #4]
    54e0:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    54e2:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    54e4:	429d      	cmp	r5, r3
    54e6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    54ea:	bf34      	ite	cc
    54ec:	1ae4      	subcc	r4, r4, r3
    54ee:	1b64      	subcs	r4, r4, r5
		ticker_status =
    54f0:	4b09      	ldr	r3, [pc, #36]	; (5518 <prepare_normal_set+0x44>)
    54f2:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    54f4:	b2a4      	uxth	r4, r4
		ticker_status =
    54f6:	2300      	movs	r3, #0
    54f8:	9304      	str	r3, [sp, #16]
    54fa:	9303      	str	r3, [sp, #12]
    54fc:	9302      	str	r3, [sp, #8]
    54fe:	4618      	mov	r0, r3
    5500:	9401      	str	r4, [sp, #4]
    5502:	9400      	str	r4, [sp, #0]
    5504:	f7fe f998 	bl	3838 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5508:	f030 0302 	bics.w	r3, r0, #2
    550c:	d001      	beq.n	5512 <prepare_normal_set+0x3e>
    550e:	f7ff ffdb 	bl	54c8 <event_active.part.17>
}
    5512:	b009      	add	sp, #36	; 0x24
    5514:	bd30      	pop	{r4, r5, pc}
    5516:	bf00      	nop
    5518:	00004835 	.word	0x00004835

0000551c <terminate_ind_rx_enqueue>:
{
    551c:	b510      	push	{r4, lr}
    551e:	4603      	mov	r3, r0
    5520:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    5522:	f100 019c 	add.w	r1, r0, #156	; 0x9c
	LL_ASSERT(node_rx->hdr.onion.link);
    5526:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    552a:	b908      	cbnz	r0, 5530 <terminate_ind_rx_enqueue+0x14>
    552c:	f7ff ffcc 	bl	54c8 <event_active.part.17>
	node_rx->hdr.handle = conn->handle;
    5530:	8c1c      	ldrh	r4, [r3, #32]
    5532:	f8a3 40a2 	strh.w	r4, [r3, #162]	; 0xa2
	*((u8_t *)node_rx->pdu_data) = reason;
    5536:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    553a:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    553c:	4a0a      	ldr	r2, [pc, #40]	; (5568 <terminate_ind_rx_enqueue+0x4c>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    553e:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    5542:	f892 4d58 	ldrb.w	r4, [r2, #3416]	; 0xd58
    5546:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    554a:	f502 6253 	add.w	r2, r2, #3376	; 0xd30
    554e:	f7fd fb09 	bl	2b64 <memq_enqueue>
	LL_ASSERT(link);
    5552:	b928      	cbnz	r0, 5560 <terminate_ind_rx_enqueue+0x44>
    5554:	4040      	eors	r0, r0
    5556:	f380 8811 	msr	BASEPRI, r0
    555a:	f04f 0004 	mov.w	r0, #4
    555e:	df02      	svc	2
}
    5560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    5564:	f003 be9c 	b.w	92a0 <radio_event_callback>
    5568:	200002c0 	.word	0x200002c0

0000556c <packet_rx_enqueue>:
{
    556c:	b510      	push	{r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    556e:	4a16      	ldr	r2, [pc, #88]	; (55c8 <packet_rx_enqueue+0x5c>)
    5570:	f892 3d21 	ldrb.w	r3, [r2, #3361]	; 0xd21
    5574:	f892 1d22 	ldrb.w	r1, [r2, #3362]	; 0xd22
    5578:	4299      	cmp	r1, r3
    557a:	d101      	bne.n	5580 <packet_rx_enqueue+0x14>
    557c:	f7ff ffa4 	bl	54c8 <event_active.part.17>
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    5580:	f892 1d21 	ldrb.w	r1, [r2, #3361]	; 0xd21
    5584:	f8d2 3d1c 	ldr.w	r3, [r2, #3356]	; 0xd1c
    5588:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    558c:	f892 3d58 	ldrb.w	r3, [r2, #3416]	; 0xd58
	link = node_rx->hdr.onion.link;
    5590:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    5592:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    5594:	f892 3d21 	ldrb.w	r3, [r2, #3361]	; 0xd21
	if (last == _radio.packet_rx_count) {
    5598:	f892 4d20 	ldrb.w	r4, [r2, #3360]	; 0xd20
	last = _radio.packet_rx_last + 1;
    559c:	3301      	adds	r3, #1
    559e:	b2db      	uxtb	r3, r3
		last = 0;
    55a0:	429c      	cmp	r4, r3
    55a2:	bf08      	it	eq
    55a4:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    55a6:	f882 3d21 	strb.w	r3, [r2, #3361]	; 0xd21
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    55aa:	f502 6253 	add.w	r2, r2, #3376	; 0xd30
    55ae:	f7fd fad9 	bl	2b64 <memq_enqueue>
	LL_ASSERT(link);
    55b2:	b928      	cbnz	r0, 55c0 <packet_rx_enqueue+0x54>
    55b4:	4040      	eors	r0, r0
    55b6:	f380 8811 	msr	BASEPRI, r0
    55ba:	f04f 0004 	mov.w	r0, #4
    55be:	df02      	svc	2
}
    55c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    55c4:	f003 be6c 	b.w	92a0 <radio_event_callback>
    55c8:	200002c0 	.word	0x200002c0

000055cc <mayfly_adv_stop>:
{
    55cc:	b510      	push	{r4, lr}
	node_rx = packet_rx_reserve_get(1);
    55ce:	2001      	movs	r0, #1
    55d0:	f7ff f952 	bl	4878 <packet_rx_reserve_get>
	LL_ASSERT(node_rx);
    55d4:	4604      	mov	r4, r0
    55d6:	b908      	cbnz	r0, 55dc <mayfly_adv_stop+0x10>
    55d8:	f7ff ff76 	bl	54c8 <event_active.part.17>
	node_rx->hdr.handle = 0xffff;
    55dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    55e0:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    55e2:	2306      	movs	r3, #6
    55e4:	7103      	strb	r3, [r0, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    55e6:	2210      	movs	r2, #16
    55e8:	2100      	movs	r1, #0
    55ea:	300b      	adds	r0, #11
    55ec:	f7fb f806 	bl	5fc <memset>
	radio_le_conn_cmplt->status = 0x3c;
    55f0:	233c      	movs	r3, #60	; 0x3c
    55f2:	72e3      	strb	r3, [r4, #11]
}
    55f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_enqueue();
    55f8:	f7ff bfb8 	b.w	556c <packet_rx_enqueue>

000055fc <ticker_stop_adv_stop>:
{
    55fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    55fe:	4c3e      	ldr	r4, [pc, #248]	; (56f8 <ticker_stop_adv_stop+0xfc>)
	if (status != TICKER_STATUS_SUCCESS) {
    5600:	b120      	cbz	r0, 560c <ticker_stop_adv_stop+0x10>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
    5602:	7ca3      	ldrb	r3, [r4, #18]
    5604:	2b05      	cmp	r3, #5
    5606:	d075      	beq.n	56f4 <ticker_stop_adv_stop+0xf8>
    5608:	f7ff ff5e 	bl	54c8 <event_active.part.17>
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    560c:	7c23      	ldrb	r3, [r4, #16]
    560e:	2b05      	cmp	r3, #5
    5610:	d002      	beq.n	5618 <ticker_stop_adv_stop+0x1c>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
    5612:	7c63      	ldrb	r3, [r4, #17]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    5614:	2b05      	cmp	r3, #5
    5616:	d165      	bne.n	56e4 <ticker_stop_adv_stop+0xe8>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    5618:	ab04      	add	r3, sp, #16
    561a:	2202      	movs	r2, #2
    561c:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5620:	2200      	movs	r2, #0
    5622:	9300      	str	r3, [sp, #0]
    5624:	2101      	movs	r1, #1
    5626:	4b35      	ldr	r3, [pc, #212]	; (56fc <ticker_stop_adv_stop+0x100>)
    5628:	4610      	mov	r0, r2
    562a:	f7fe f953 	bl	38d4 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    562e:	2802      	cmp	r0, #2
    5630:	d00d      	beq.n	564e <ticker_stop_adv_stop+0x52>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    5632:	9802      	ldr	r0, [sp, #8]
    5634:	b1c0      	cbz	r0, 5668 <ticker_stop_adv_stop+0x6c>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    5636:	9802      	ldr	r0, [sp, #8]
    5638:	2801      	cmp	r0, #1
    563a:	d119      	bne.n	5670 <ticker_stop_adv_stop+0x74>
		if (_radio.role != ROLE_NONE) {
    563c:	7ce3      	ldrb	r3, [r4, #19]
    563e:	2b00      	cmp	r3, #0
    5640:	d050      	beq.n	56e4 <ticker_stop_adv_stop+0xe8>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    5642:	4b2f      	ldr	r3, [pc, #188]	; (5700 <ticker_stop_adv_stop+0x104>)
    5644:	2204      	movs	r2, #4
    5646:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    5648:	2200      	movs	r2, #0
    564a:	4611      	mov	r1, r2
    564c:	e046      	b.n	56dc <ticker_stop_adv_stop+0xe0>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    564e:	2201      	movs	r2, #1
    5650:	4611      	mov	r1, r2
    5652:	4610      	mov	r0, r2
    5654:	f7fd face 	bl	2bf4 <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
    5658:	9b02      	ldr	r3, [sp, #8]
    565a:	2b02      	cmp	r3, #2
    565c:	d1e9      	bne.n	5632 <ticker_stop_adv_stop+0x36>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    565e:	2101      	movs	r1, #1
    5660:	2000      	movs	r0, #0
    5662:	f7fe f9f1 	bl	3a48 <ticker_job_sched>
    5666:	e7f7      	b.n	5658 <ticker_stop_adv_stop+0x5c>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    5668:	2302      	movs	r3, #2
    566a:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
    566c:	7c23      	ldrb	r3, [r4, #16]
    566e:	b92b      	cbnz	r3, 567c <ticker_stop_adv_stop+0x80>
	LL_ASSERT(!retval);
    5670:	4040      	eors	r0, r0
    5672:	f380 8811 	msr	BASEPRI, r0
    5676:	f04f 0004 	mov.w	r0, #4
    567a:	df02      	svc	2
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    567c:	ab03      	add	r3, sp, #12
    567e:	2201      	movs	r2, #1
		_radio.ticker_id_prepare = 0;
    5680:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5682:	4611      	mov	r1, r2
    5684:	9300      	str	r3, [sp, #0]
    5686:	4b1d      	ldr	r3, [pc, #116]	; (56fc <ticker_stop_adv_stop+0x100>)
    5688:	f7fe f924 	bl	38d4 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    568c:	2802      	cmp	r0, #2
    568e:	d00f      	beq.n	56b0 <ticker_stop_adv_stop+0xb4>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    5690:	9a03      	ldr	r2, [sp, #12]
    5692:	b1d2      	cbz	r2, 56ca <ticker_stop_adv_stop+0xce>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    5694:	9c03      	ldr	r4, [sp, #12]
    5696:	2c01      	cmp	r4, #1
    5698:	d1ea      	bne.n	5670 <ticker_stop_adv_stop+0x74>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    569a:	2200      	movs	r2, #0
    569c:	4611      	mov	r1, r2
    569e:	4b19      	ldr	r3, [pc, #100]	; (5704 <ticker_stop_adv_stop+0x108>)
    56a0:	4620      	mov	r0, r4
    56a2:	f7fd facf 	bl	2c44 <mayfly_enqueue>
			LL_ASSERT(!ret);
    56a6:	4602      	mov	r2, r0
    56a8:	2800      	cmp	r0, #0
    56aa:	d1e1      	bne.n	5670 <ticker_stop_adv_stop+0x74>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    56ac:	4b16      	ldr	r3, [pc, #88]	; (5708 <ticker_stop_adv_stop+0x10c>)
    56ae:	e013      	b.n	56d8 <ticker_stop_adv_stop+0xdc>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    56b0:	2201      	movs	r2, #1
    56b2:	4611      	mov	r1, r2
    56b4:	4610      	mov	r0, r2
    56b6:	f7fd fa9d 	bl	2bf4 <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
    56ba:	9b03      	ldr	r3, [sp, #12]
    56bc:	2b02      	cmp	r3, #2
    56be:	d1e7      	bne.n	5690 <ticker_stop_adv_stop+0x94>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    56c0:	2101      	movs	r1, #1
    56c2:	2000      	movs	r0, #0
    56c4:	f7fe f9c0 	bl	3a48 <ticker_job_sched>
    56c8:	e7f7      	b.n	56ba <ticker_stop_adv_stop+0xbe>
			u32_t ticks_xtal_to_start =
    56ca:	69a3      	ldr	r3, [r4, #24]
			if (_radio.advertiser.hdr.ticks_active_to_start >
    56cc:	69e1      	ldr	r1, [r4, #28]
			ticks_xtal_to_start &= ~XON_BITMASK;
    56ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
    56d2:	428b      	cmp	r3, r1
    56d4:	d2ea      	bcs.n	56ac <ticker_stop_adv_stop+0xb0>
				ret = mayfly_enqueue(
    56d6:	4b0b      	ldr	r3, [pc, #44]	; (5704 <ticker_stop_adv_stop+0x108>)
    56d8:	4611      	mov	r1, r2
    56da:	2001      	movs	r0, #1
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    56dc:	f7fd fab2 	bl	2c44 <mayfly_enqueue>
			LL_ASSERT(!ret);
    56e0:	2800      	cmp	r0, #0
    56e2:	d1c5      	bne.n	5670 <ticker_stop_adv_stop+0x74>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    56e4:	2200      	movs	r2, #0
    56e6:	4b09      	ldr	r3, [pc, #36]	; (570c <ticker_stop_adv_stop+0x110>)
    56e8:	4611      	mov	r1, r2
    56ea:	2001      	movs	r0, #1
    56ec:	f7fd faaa 	bl	2c44 <mayfly_enqueue>
	LL_ASSERT(!retval);
    56f0:	2800      	cmp	r0, #0
    56f2:	d1bd      	bne.n	5670 <ticker_stop_adv_stop+0x74>
}
    56f4:	b004      	add	sp, #16
    56f6:	bd10      	pop	{r4, pc}
    56f8:	200002c0 	.word	0x200002c0
    56fc:	00004825 	.word	0x00004825
    5700:	20004f50 	.word	0x20004f50
    5704:	20004f20 	.word	0x20004f20
    5708:	20004fc0 	.word	0x20004fc0
    570c:	20004ef0 	.word	0x20004ef0

00005710 <sched_after_mstr_free_offset_get>:
{
    5710:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5712:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    5714:	aa02      	add	r2, sp, #8
{
    5716:	461c      	mov	r4, r3
    5718:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    571a:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    571e:	3127      	adds	r1, #39	; 0x27
    5720:	2001      	movs	r0, #1
    5722:	f7ff fd49 	bl	51b8 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    5726:	6823      	ldr	r3, [r4, #0]
    5728:	b1fb      	cbz	r3, 576a <sched_after_mstr_free_offset_get+0x5a>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    572a:	9801      	ldr	r0, [sp, #4]
    572c:	1b83      	subs	r3, r0, r6
    572e:	021b      	lsls	r3, r3, #8
    5730:	d501      	bpl.n	5736 <sched_after_mstr_free_offset_get+0x26>
    5732:	f7ff fec9 	bl	54c8 <event_active.part.17>
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    5736:	4631      	mov	r1, r6
    5738:	f7fe f99e 	bl	3a78 <ticker_ticks_diff_get>
    573c:	4602      	mov	r2, r0
    573e:	4810      	ldr	r0, [pc, #64]	; (5780 <sched_after_mstr_free_offset_get+0x70>)
    5740:	2307      	movs	r3, #7
    5742:	fba2 0100 	umull	r0, r1, r2, r0
    5746:	fb03 1102 	mla	r1, r3, r2, r1
    574a:	a30b      	add	r3, pc, #44	; (adr r3, 5778 <sched_after_mstr_free_offset_get+0x68>)
    574c:	e9d3 2300 	ldrd	r2, r3, [r3]
    5750:	f7fa fd60 	bl	214 <__aeabi_uldivmod>
    5754:	6823      	ldr	r3, [r4, #0]
    5756:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    5758:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    575a:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    575c:	db05      	blt.n	576a <sched_after_mstr_free_offset_get+0x5a>
		u32_t conn_interval_us = conn_interval * 1250;
    575e:	f240 40e2 	movw	r0, #1250	; 0x4e2
    5762:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    5764:	6823      	ldr	r3, [r4, #0]
    5766:	4298      	cmp	r0, r3
    5768:	d301      	bcc.n	576e <sched_after_mstr_free_offset_get+0x5e>
}
    576a:	b002      	add	sp, #8
    576c:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    576e:	1a1b      	subs	r3, r3, r0
    5770:	6023      	str	r3, [r4, #0]
    5772:	e7f7      	b.n	5764 <sched_after_mstr_free_offset_get+0x54>
    5774:	f3af 8000 	nop.w
    5778:	3b9aca00 	.word	0x3b9aca00
    577c:	00000000 	.word	0x00000000
    5780:	1afd498d 	.word	0x1afd498d

00005784 <mayfly_sched_win_offset_use>:
{
    5784:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    5786:	f100 036c 	add.w	r3, r0, #108	; 0x6c
{
    578a:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    578c:	6f82      	ldr	r2, [r0, #120]	; 0x78
    578e:	68c1      	ldr	r1, [r0, #12]
    5790:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    5792:	f7ff ffbd 	bl	5710 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    5796:	a902      	add	r1, sp, #8
    5798:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    579a:	6f60      	ldr	r0, [r4, #116]	; 0x74
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    579c:	f240 42e2 	movw	r2, #1250	; 0x4e2
    57a0:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    57a4:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    57a6:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    57aa:	f7fa fefb 	bl	5a4 <memcpy>
}
    57ae:	b002      	add	sp, #8
    57b0:	bd10      	pop	{r4, pc}
	...

000057b4 <pdu_node_tx_release>:
{
    57b4:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    57b6:	4a10      	ldr	r2, [pc, #64]	; (57f8 <pdu_node_tx_release+0x44>)
    57b8:	f892 3d58 	ldrb.w	r3, [r2, #3416]	; 0xd58
	if (last == _radio.packet_tx_count) {
    57bc:	f892 4d54 	ldrb.w	r4, [r2, #3412]	; 0xd54
	last = _radio.packet_release_last + 1;
    57c0:	3301      	adds	r3, #1
    57c2:	b2db      	uxtb	r3, r3
		last = 0;
    57c4:	429c      	cmp	r4, r3
    57c6:	bf08      	it	eq
    57c8:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    57ca:	f892 4d57 	ldrb.w	r4, [r2, #3415]	; 0xd57
    57ce:	429c      	cmp	r4, r3
    57d0:	d101      	bne.n	57d6 <pdu_node_tx_release+0x22>
    57d2:	f7ff fe79 	bl	54c8 <event_active.part.17>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    57d6:	f892 5d58 	ldrb.w	r5, [r2, #3416]	; 0xd58
    57da:	f8d2 4d50 	ldr.w	r4, [r2, #3408]	; 0xd50
    57de:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    57e2:	f892 0d58 	ldrb.w	r0, [r2, #3416]	; 0xd58
    57e6:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    57ea:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    57ec:	f882 3d58 	strb.w	r3, [r2, #3416]	; 0xd58
}
    57f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_event_callback();
    57f4:	f003 bd54 	b.w	92a0 <radio_event_callback>
    57f8:	200002c0 	.word	0x200002c0

000057fc <packet_tx_enqueue>:
{
    57fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    5800:	4c24      	ldr	r4, [pc, #144]	; (5894 <packet_tx_enqueue+0x98>)
{
    5802:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    5804:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    5806:	b12e      	cbz	r6, 5814 <packet_tx_enqueue+0x18>
    5808:	f894 3d55 	ldrb.w	r3, [r4, #3413]	; 0xd55
    580c:	f894 2d56 	ldrb.w	r2, [r4, #3414]	; 0xd56
    5810:	429a      	cmp	r2, r3
    5812:	d101      	bne.n	5818 <packet_tx_enqueue+0x1c>
    5814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    5818:	f894 8d55 	ldrb.w	r8, [r4, #3413]	; 0xd55
    581c:	f8d4 9d4c 	ldr.w	r9, [r4, #3404]	; 0xd4c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    5820:	f8d4 0cf0 	ldr.w	r0, [r4, #3312]	; 0xcf0
    5824:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    5828:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    582c:	f44f 7182 	mov.w	r1, #260	; 0x104
		node_tx_new = pdu_data_q_tx->node_tx;
    5830:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    5832:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    5834:	f7fd f97c 	bl	2b30 <mem_get>
    5838:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    583a:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    583e:	8c1a      	ldrh	r2, [r3, #32]
    5840:	4282      	cmp	r2, r0
    5842:	d11f      	bne.n	5884 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    5844:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
    5848:	b942      	cbnz	r2, 585c <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    584a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
				conn->pkt_tx_data = node_tx_new;
    584e:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
				if (conn->pkt_tx_head == 0) {
    5852:	b91a      	cbnz	r2, 585c <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    5854:	f8c3 50ec 	str.w	r5, [r3, #236]	; 0xec
					conn->pkt_tx_last = NULL;
    5858:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			if (conn->pkt_tx_last) {
    585c:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
    5860:	b102      	cbz	r2, 5864 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    5862:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    5864:	f8c3 50fc 	str.w	r5, [r3, #252]	; 0xfc
		first = _radio.packet_tx_first + 1;
    5868:	f894 3d55 	ldrb.w	r3, [r4, #3413]	; 0xd55
		if (first == _radio.packet_tx_count) {
    586c:	f894 2d54 	ldrb.w	r2, [r4, #3412]	; 0xd54
		first = _radio.packet_tx_first + 1;
    5870:	3301      	adds	r3, #1
    5872:	b2db      	uxtb	r3, r3
			first = 0;
    5874:	429a      	cmp	r2, r3
    5876:	bf08      	it	eq
    5878:	2300      	moveq	r3, #0
    587a:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    587c:	f884 3d55 	strb.w	r3, [r4, #3413]	; 0xd55
    5880:	b2f6      	uxtb	r6, r6
    5882:	e7c0      	b.n	5806 <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    5884:	792b      	ldrb	r3, [r5, #4]
    5886:	f367 0301 	bfi	r3, r7, #0, #2
    588a:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    588c:	4629      	mov	r1, r5
    588e:	f7ff ff91 	bl	57b4 <pdu_node_tx_release>
    5892:	e7e9      	b.n	5868 <packet_tx_enqueue+0x6c>
    5894:	200002c0 	.word	0x200002c0

00005898 <connection_release>:
{
    5898:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    589a:	2201      	movs	r2, #1
{
    589c:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    589e:	4611      	mov	r1, r2
    58a0:	2000      	movs	r0, #0
    58a2:	f7fd f9a7 	bl	2bf4 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    58a6:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    58aa:	2100      	movs	r1, #0
    58ac:	f242 73e2 	movw	r3, #10210	; 0x27e2
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    58b0:	3207      	adds	r2, #7
	ticker_status =
    58b2:	9300      	str	r3, [sp, #0]
    58b4:	4608      	mov	r0, r1
    58b6:	4b3a      	ldr	r3, [pc, #232]	; (59a0 <connection_release+0x108>)
    58b8:	b2d2      	uxtb	r2, r2
    58ba:	f7fe f80b 	bl	38d4 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    58be:	f030 0102 	bics.w	r1, r0, #2
    58c2:	d005      	beq.n	58d0 <connection_release+0x38>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    58c4:	4040      	eors	r0, r0
    58c6:	f380 8811 	msr	BASEPRI, r0
    58ca:	f04f 0004 	mov.w	r0, #4
    58ce:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    58d0:	4b34      	ldr	r3, [pc, #208]	; (59a4 <connection_release+0x10c>)
    58d2:	7d1a      	ldrb	r2, [r3, #20]
    58d4:	2a05      	cmp	r2, #5
    58d6:	461d      	mov	r5, r3
    58d8:	d11b      	bne.n	5912 <connection_release+0x7a>
					  conn->handle))) {
    58da:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    58dc:	7c18      	ldrb	r0, [r3, #16]
    58de:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    58e0:	4290      	cmp	r0, r2
    58e2:	d116      	bne.n	5912 <connection_release+0x7a>
		_radio.ticker_id_prepare = 0;
    58e4:	7419      	strb	r1, [r3, #16]
		ticker_status =
    58e6:	f242 73f3 	movw	r3, #10227	; 0x27f3
    58ea:	9300      	str	r3, [sp, #0]
    58ec:	2201      	movs	r2, #1
    58ee:	4b2c      	ldr	r3, [pc, #176]	; (59a0 <connection_release+0x108>)
    58f0:	4608      	mov	r0, r1
    58f2:	f7fd ffef 	bl	38d4 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    58f6:	f030 0202 	bics.w	r2, r0, #2
    58fa:	d1e3      	bne.n	58c4 <connection_release+0x2c>
		ticker_status =
    58fc:	f242 73fa 	movw	r3, #10234	; 0x27fa
    5900:	9300      	str	r3, [sp, #0]
    5902:	4611      	mov	r1, r2
    5904:	4b26      	ldr	r3, [pc, #152]	; (59a0 <connection_release+0x108>)
    5906:	4610      	mov	r0, r2
    5908:	f7fd ffe4 	bl	38d4 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    590c:	f030 0302 	bics.w	r3, r0, #2
    5910:	d1d8      	bne.n	58c4 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    5912:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
    5916:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    591a:	4299      	cmp	r1, r3
    591c:	d003      	beq.n	5926 <connection_release+0x8e>
    591e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    5922:	4299      	cmp	r1, r3
    5924:	d101      	bne.n	592a <connection_release+0x92>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    5926:	4e20      	ldr	r6, [pc, #128]	; (59a8 <connection_release+0x110>)
    5928:	e012      	b.n	5950 <connection_release+0xb8>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    592a:	790b      	ldrb	r3, [r1, #4]
    592c:	f36f 0301 	bfc	r3, #0, #2
    5930:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    5932:	680b      	ldr	r3, [r1, #0]
    5934:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		pdu_node_tx_release(conn->handle, node_tx);
    5938:	8c20      	ldrh	r0, [r4, #32]
    593a:	f7ff ff3b 	bl	57b4 <pdu_node_tx_release>
    593e:	e7e8      	b.n	5912 <connection_release+0x7a>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    5940:	6803      	ldr	r3, [r0, #0]
    5942:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    5946:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    594a:	4631      	mov	r1, r6
    594c:	f7fd f8db 	bl	2b06 <mem_release>
	while ((conn->pkt_tx_head) &&
    5950:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    5954:	b118      	cbz	r0, 595e <connection_release+0xc6>
    5956:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    595a:	4298      	cmp	r0, r3
    595c:	d1f0      	bne.n	5940 <connection_release+0xa8>
	conn->pkt_tx_ctrl = NULL;
    595e:	2300      	movs	r3, #0
    5960:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
	conn->pkt_tx_ctrl_last = NULL;
    5964:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	while (conn->pkt_tx_head) {
    5968:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
    596c:	b951      	cbnz	r1, 5984 <connection_release+0xec>
	conn->handle = 0xffff;
    596e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5972:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    5974:	f8d5 3d68 	ldr.w	r3, [r5, #3432]	; 0xd68
    5978:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    597a:	bf08      	it	eq
    597c:	f8c5 1d68 	streq.w	r1, [r5, #3432]	; 0xd68
}
    5980:	b002      	add	sp, #8
    5982:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    5984:	790b      	ldrb	r3, [r1, #4]
    5986:	f36f 0301 	bfc	r3, #0, #2
    598a:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    598c:	680b      	ldr	r3, [r1, #0]
    598e:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		conn->pkt_tx_data = conn->pkt_tx_head;
    5992:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		pdu_node_tx_release(conn->handle, node_tx);
    5996:	8c20      	ldrh	r0, [r4, #32]
    5998:	f7ff ff0c 	bl	57b4 <pdu_node_tx_release>
    599c:	e7e4      	b.n	5968 <connection_release+0xd0>
    599e:	bf00      	nop
    59a0:	00005ae1 	.word	0x00005ae1
    59a4:	200002c0 	.word	0x200002c0
    59a8:	20000ffc 	.word	0x20000ffc

000059ac <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
    59ac:	b2c0      	uxtb	r0, r0
{
    59ae:	b508      	push	{r3, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    59b0:	1f03      	subs	r3, r0, #4
    59b2:	2b01      	cmp	r3, #1
    59b4:	d901      	bls.n	59ba <mayfly_radio_stop+0xe>
    59b6:	f7ff fd87 	bl	54c8 <event_active.part.17>
	radio_used = ((_radio.state != STATE_NONE) &&
    59ba:	4a08      	ldr	r2, [pc, #32]	; (59dc <mayfly_radio_stop+0x30>)
    59bc:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    59be:	b13b      	cbz	r3, 59d0 <mayfly_radio_stop+0x24>
	radio_used = ((_radio.state != STATE_NONE) &&
    59c0:	3b04      	subs	r3, #4
    59c2:	2b01      	cmp	r3, #1
    59c4:	d904      	bls.n	59d0 <mayfly_radio_stop+0x24>
			_radio.state = state;
    59c6:	7510      	strb	r0, [r2, #20]
}
    59c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_disable();
    59cc:	f004 bc86 	b.w	a2dc <radio_disable>
	if (radio_used || !radio_is_idle()) {
    59d0:	f004 fcb6 	bl	a340 <radio_is_idle>
    59d4:	2800      	cmp	r0, #0
    59d6:	d0f7      	beq.n	59c8 <mayfly_radio_stop+0x1c>
}
    59d8:	bd08      	pop	{r3, pc}
    59da:	bf00      	nop
    59dc:	200002c0 	.word	0x200002c0

000059e0 <mayfly_radio_active>:
{
    59e0:	b508      	push	{r3, lr}
    59e2:	4a0a      	ldr	r2, [pc, #40]	; (5a0c <mayfly_radio_active+0x2c>)
		if (s_active++) {
    59e4:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    59e6:	b138      	cbz	r0, 59f8 <mayfly_radio_active+0x18>
		if (s_active++) {
    59e8:	1c59      	adds	r1, r3, #1
    59ea:	7011      	strb	r1, [r2, #0]
    59ec:	b963      	cbnz	r3, 5a08 <mayfly_radio_active+0x28>
		radio_active_callback(1);
    59ee:	2001      	movs	r0, #1
}
    59f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_active_callback(0);
    59f4:	f003 bc52 	b.w	929c <radio_active_callback>
		LL_ASSERT(s_active);
    59f8:	b90b      	cbnz	r3, 59fe <mayfly_radio_active+0x1e>
    59fa:	f7ff fd65 	bl	54c8 <event_active.part.17>
		if (--s_active) {
    59fe:	3b01      	subs	r3, #1
    5a00:	b2db      	uxtb	r3, r3
    5a02:	7013      	strb	r3, [r2, #0]
    5a04:	2b00      	cmp	r3, #0
    5a06:	d0f3      	beq.n	59f0 <mayfly_radio_active+0x10>
    5a08:	bd08      	pop	{r3, pc}
    5a0a:	bf00      	nop
    5a0c:	2000107a 	.word	0x2000107a

00005a10 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    5a10:	2000      	movs	r0, #0
    5a12:	f7ff bfe5 	b.w	59e0 <mayfly_radio_active>
	...

00005a18 <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5a18:	2200      	movs	r2, #0
{
    5a1a:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5a1c:	4611      	mov	r1, r2
    5a1e:	4b04      	ldr	r3, [pc, #16]	; (5a30 <event_xtal+0x18>)
    5a20:	4610      	mov	r0, r2
    5a22:	f7fd f90f 	bl	2c44 <mayfly_enqueue>
	LL_ASSERT(!retval);
    5a26:	b108      	cbz	r0, 5a2c <event_xtal+0x14>
    5a28:	f7ff fd4e 	bl	54c8 <event_active.part.17>
    5a2c:	bd08      	pop	{r3, pc}
    5a2e:	bf00      	nop
    5a30:	20004f80 	.word	0x20004f80

00005a34 <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5a34:	2200      	movs	r2, #0
{
    5a36:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5a38:	4611      	mov	r1, r2
    5a3a:	4b04      	ldr	r3, [pc, #16]	; (5a4c <event_active+0x18>)
    5a3c:	4610      	mov	r0, r2
    5a3e:	f7fd f901 	bl	2c44 <mayfly_enqueue>
	LL_ASSERT(!retval);
    5a42:	b108      	cbz	r0, 5a48 <event_active+0x14>
    5a44:	f7ff fd40 	bl	54c8 <event_active.part.17>
    5a48:	bd08      	pop	{r3, pc}
    5a4a:	bf00      	nop
    5a4c:	20004f00 	.word	0x20004f00

00005a50 <ticker_update_slave_assert>:
{
    5a50:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    5a52:	b130      	cbz	r0, 5a62 <ticker_update_slave_assert+0x12>
    5a54:	4b03      	ldr	r3, [pc, #12]	; (5a64 <ticker_update_slave_assert+0x14>)
    5a56:	7c9b      	ldrb	r3, [r3, #18]
    5a58:	b2c9      	uxtb	r1, r1
    5a5a:	4299      	cmp	r1, r3
    5a5c:	d001      	beq.n	5a62 <ticker_update_slave_assert+0x12>
    5a5e:	f7ff fd33 	bl	54c8 <event_active.part.17>
    5a62:	bd08      	pop	{r3, pc}
    5a64:	200002c0 	.word	0x200002c0

00005a68 <ticker_update_adv_assert>:
{
    5a68:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    5a6a:	b128      	cbz	r0, 5a78 <ticker_update_adv_assert+0x10>
    5a6c:	4b03      	ldr	r3, [pc, #12]	; (5a7c <ticker_update_adv_assert+0x14>)
    5a6e:	7c9b      	ldrb	r3, [r3, #18]
    5a70:	2b05      	cmp	r3, #5
    5a72:	d001      	beq.n	5a78 <ticker_update_adv_assert+0x10>
    5a74:	f7ff fd28 	bl	54c8 <event_active.part.17>
    5a78:	bd08      	pop	{r3, pc}
    5a7a:	bf00      	nop
    5a7c:	200002c0 	.word	0x200002c0

00005a80 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    5a80:	2801      	cmp	r0, #1
{
    5a82:	b508      	push	{r3, lr}
    5a84:	4b09      	ldr	r3, [pc, #36]	; (5aac <ticker_stop_scan_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
    5a86:	d107      	bne.n	5a98 <ticker_stop_scan_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    5a88:	7c9a      	ldrb	r2, [r3, #18]
    5a8a:	2a06      	cmp	r2, #6
    5a8c:	d102      	bne.n	5a94 <ticker_stop_scan_assert+0x14>
			_radio.ticker_id_stop = 0;
    5a8e:	2200      	movs	r2, #0
    5a90:	749a      	strb	r2, [r3, #18]
    5a92:	bd08      	pop	{r3, pc}
    5a94:	f7ff fd18 	bl	54c8 <event_active.part.17>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    5a98:	7c1b      	ldrb	r3, [r3, #16]
    5a9a:	2b06      	cmp	r3, #6
    5a9c:	d105      	bne.n	5aaa <ticker_stop_scan_assert+0x2a>
    5a9e:	4040      	eors	r0, r0
    5aa0:	f380 8811 	msr	BASEPRI, r0
    5aa4:	f04f 0004 	mov.w	r0, #4
    5aa8:	df02      	svc	2
    5aaa:	bd08      	pop	{r3, pc}
    5aac:	200002c0 	.word	0x200002c0

00005ab0 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    5ab0:	2801      	cmp	r0, #1
{
    5ab2:	b508      	push	{r3, lr}
    5ab4:	4b09      	ldr	r3, [pc, #36]	; (5adc <ticker_stop_adv_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
    5ab6:	d107      	bne.n	5ac8 <ticker_stop_adv_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    5ab8:	7c9a      	ldrb	r2, [r3, #18]
    5aba:	2a05      	cmp	r2, #5
    5abc:	d102      	bne.n	5ac4 <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0;
    5abe:	2200      	movs	r2, #0
    5ac0:	749a      	strb	r2, [r3, #18]
    5ac2:	bd08      	pop	{r3, pc}
    5ac4:	f7ff fd00 	bl	54c8 <event_active.part.17>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    5ac8:	7c1b      	ldrb	r3, [r3, #16]
    5aca:	2b05      	cmp	r3, #5
    5acc:	d105      	bne.n	5ada <ticker_stop_adv_assert+0x2a>
    5ace:	4040      	eors	r0, r0
    5ad0:	f380 8811 	msr	BASEPRI, r0
    5ad4:	f04f 0004 	mov.w	r0, #4
    5ad8:	df02      	svc	2
    5ada:	bd08      	pop	{r3, pc}
    5adc:	200002c0 	.word	0x200002c0

00005ae0 <ticker_success_assert>:
{
    5ae0:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    5ae2:	b108      	cbz	r0, 5ae8 <ticker_success_assert+0x8>
    5ae4:	f7ff fcf0 	bl	54c8 <event_active.part.17>
    5ae8:	bd08      	pop	{r3, pc}

00005aea <isr.part.46>:
		LL_ASSERT(0);
    5aea:	4040      	eors	r0, r0
    5aec:	f380 8811 	msr	BASEPRI, r0
    5af0:	f04f 0004 	mov.w	r0, #4
    5af4:	df02      	svc	2
	...

00005af8 <isr_rx_scan_report.isra.38>:
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
    5af8:	b570      	push	{r4, r5, r6, lr}
    5afa:	4606      	mov	r6, r0
	node_rx = packet_rx_reserve_get(3);
    5afc:	2003      	movs	r0, #3
    5afe:	f7fe febb 	bl	4878 <packet_rx_reserve_get>
	if (node_rx == 0) {
    5b02:	b320      	cbz	r0, 5b4e <isr_rx_scan_report.isra.38+0x56>
	node_rx->hdr.handle = 0xffff;
    5b04:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5b08:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    5b0a:	4b12      	ldr	r3, [pc, #72]	; (5b54 <isr_rx_scan_report.isra.38+0x5c>)
    5b0c:	f893 3c2d 	ldrb.w	r3, [r3, #3117]	; 0xc2d
    5b10:	075a      	lsls	r2, r3, #29
    5b12:	d018      	beq.n	5b46 <isr_rx_scan_report.isra.38+0x4e>
		switch (_radio.scanner.phy) {
    5b14:	f3c3 0302 	ubfx	r3, r3, #0, #3
    5b18:	b2da      	uxtb	r2, r3
    5b1a:	2a01      	cmp	r2, #1
    5b1c:	d003      	beq.n	5b26 <isr_rx_scan_report.isra.38+0x2e>
    5b1e:	2a04      	cmp	r2, #4
    5b20:	d002      	beq.n	5b28 <isr_rx_scan_report.isra.38+0x30>
    5b22:	f7ff ffe2 	bl	5aea <isr.part.46>
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    5b26:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    5b28:	7a44      	ldrb	r4, [r0, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    5b2a:	7103      	strb	r3, [r0, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    5b2c:	f100 0508 	add.w	r5, r0, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    5b30:	3402      	adds	r4, #2
			     pdu_adv_rx->len] =
    5b32:	b156      	cbz	r6, 5b4a <isr_rx_scan_report.isra.38+0x52>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    5b34:	f004 fc5a 	bl	a3ec <radio_rssi_get>
			     pdu_adv_rx->len] =
    5b38:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    5b3c:	5528      	strb	r0, [r5, r4]
	packet_rx_enqueue();
    5b3e:	f7ff fd15 	bl	556c <packet_rx_enqueue>
	return 0;
    5b42:	2000      	movs	r0, #0
    5b44:	bd70      	pop	{r4, r5, r6, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    5b46:	2302      	movs	r3, #2
    5b48:	e7ee      	b.n	5b28 <isr_rx_scan_report.isra.38+0x30>
			     pdu_adv_rx->len] =
    5b4a:	207f      	movs	r0, #127	; 0x7f
    5b4c:	e7f6      	b.n	5b3c <isr_rx_scan_report.isra.38+0x44>
		return 1;
    5b4e:	2001      	movs	r0, #1
}
    5b50:	bd70      	pop	{r4, r5, r6, pc}
    5b52:	bf00      	nop
    5b54:	200002c0 	.word	0x200002c0

00005b58 <adv_scan_configure.constprop.49>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    5b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    5b5a:	ad02      	add	r5, sp, #8
    5b5c:	4b10      	ldr	r3, [pc, #64]	; (5ba0 <adv_scan_configure.constprop.49+0x48>)
    5b5e:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    5b62:	4604      	mov	r4, r0
	radio_reset();
    5b64:	f004 fb06 	bl	a174 <radio_reset>
	radio_tx_power_set(0);
    5b68:	2000      	movs	r0, #0
    5b6a:	f004 fb2d 	bl	a1c8 <radio_tx_power_set>
	radio_isr_set(isr);
    5b6e:	480d      	ldr	r0, [pc, #52]	; (5ba4 <adv_scan_configure.constprop.49+0x4c>)
    5b70:	f004 faca 	bl	a108 <radio_isr_set>
	radio_phy_set(phy, flags);
    5b74:	2101      	movs	r1, #1
    5b76:	4620      	mov	r0, r4
    5b78:	f004 fb16 	bl	a1a8 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    5b7c:	4628      	mov	r0, r5
    5b7e:	f004 fb41 	bl	a204 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    5b82:	0062      	lsls	r2, r4, #1
    5b84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    5b88:	21ff      	movs	r1, #255	; 0xff
    5b8a:	2008      	movs	r0, #8
    5b8c:	f004 fb52 	bl	a234 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    5b90:	4905      	ldr	r1, [pc, #20]	; (5ba8 <adv_scan_configure.constprop.49+0x50>)
    5b92:	f240 605b 	movw	r0, #1627	; 0x65b
    5b96:	f004 fbdd 	bl	a354 <radio_crc_configure>
}
    5b9a:	b003      	add	sp, #12
    5b9c:	bd30      	pop	{r4, r5, pc}
    5b9e:	bf00      	nop
    5ba0:	8e89bed6 	.word	0x8e89bed6
    5ba4:	00006b91 	.word	0x00006b91
    5ba8:	00555555 	.word	0x00555555

00005bac <event_stop.constprop.50>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    5bac:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    5bae:	4b05      	ldr	r3, [pc, #20]	; (5bc4 <event_stop.constprop.50+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5bb0:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    5bb2:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5bb4:	4611      	mov	r1, r2
    5bb6:	4610      	mov	r0, r2
    5bb8:	f7fd f844 	bl	2c44 <mayfly_enqueue>
	LL_ASSERT(!retval);
    5bbc:	b108      	cbz	r0, 5bc2 <event_stop.constprop.50+0x16>
    5bbe:	f7ff fc83 	bl	54c8 <event_active.part.17>
    5bc2:	bd08      	pop	{r3, pc}
    5bc4:	20004f40 	.word	0x20004f40

00005bc8 <event_common_prepare>:
{
    5bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    5bcc:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    5bce:	681d      	ldr	r5, [r3, #0]
{
    5bd0:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    5bd2:	2c00      	cmp	r4, #0
{
    5bd4:	4681      	mov	r9, r0
    5bd6:	910b      	str	r1, [sp, #44]	; 0x2c
    5bd8:	4690      	mov	r8, r2
    5bda:	469b      	mov	fp, r3
    5bdc:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    5be0:	da03      	bge.n	5bea <event_common_prepare+0x22>
		_ticks_xtal_to_start =
    5be2:	9c16      	ldr	r4, [sp, #88]	; 0x58
    5be4:	42ac      	cmp	r4, r5
    5be6:	bf38      	it	cc
    5be8:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    5bea:	42ac      	cmp	r4, r5
    5bec:	4f4e      	ldr	r7, [pc, #312]	; (5d28 <event_common_prepare+0x160>)
    5bee:	d91b      	bls.n	5c28 <event_common_prepare+0x60>
		ticker_status =
    5bf0:	f241 7348 	movw	r3, #5960	; 0x1748
    5bf4:	9308      	str	r3, [sp, #32]
    5bf6:	4b4d      	ldr	r3, [pc, #308]	; (5d2c <event_common_prepare+0x164>)
    5bf8:	9305      	str	r3, [sp, #20]
    5bfa:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    5bfc:	1b63      	subs	r3, r4, r5
		ticker_status =
    5bfe:	9300      	str	r3, [sp, #0]
    5c00:	9707      	str	r7, [sp, #28]
    5c02:	464b      	mov	r3, r9
    5c04:	9106      	str	r1, [sp, #24]
    5c06:	9104      	str	r1, [sp, #16]
    5c08:	9103      	str	r1, [sp, #12]
    5c0a:	9102      	str	r1, [sp, #8]
    5c0c:	9101      	str	r1, [sp, #4]
    5c0e:	2201      	movs	r2, #1
    5c10:	4608      	mov	r0, r1
    5c12:	f7fd fdc1 	bl	3798 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5c16:	f030 0302 	bics.w	r3, r0, #2
    5c1a:	d02b      	beq.n	5c74 <event_common_prepare+0xac>
		LL_ASSERT(!retval);
    5c1c:	4040      	eors	r0, r0
    5c1e:	f380 8811 	msr	BASEPRI, r0
    5c22:	f04f 0004 	mov.w	r0, #4
    5c26:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    5c28:	d21d      	bcs.n	5c66 <event_common_prepare+0x9e>
		event_active(0, 0, 0, NULL);
    5c2a:	2300      	movs	r3, #0
    5c2c:	461a      	mov	r2, r3
    5c2e:	4619      	mov	r1, r3
    5c30:	4618      	mov	r0, r3
    5c32:	f7ff feff 	bl	5a34 <event_active>
		ticker_status =
    5c36:	f241 735d 	movw	r3, #5981	; 0x175d
    5c3a:	2100      	movs	r1, #0
    5c3c:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    5c3e:	1b2c      	subs	r4, r5, r4
		ticker_status =
    5c40:	4b3b      	ldr	r3, [pc, #236]	; (5d30 <event_common_prepare+0x168>)
    5c42:	9305      	str	r3, [sp, #20]
    5c44:	9707      	str	r7, [sp, #28]
    5c46:	464b      	mov	r3, r9
    5c48:	9106      	str	r1, [sp, #24]
    5c4a:	9104      	str	r1, [sp, #16]
    5c4c:	9103      	str	r1, [sp, #12]
    5c4e:	9102      	str	r1, [sp, #8]
    5c50:	9101      	str	r1, [sp, #4]
    5c52:	9400      	str	r4, [sp, #0]
    5c54:	2201      	movs	r2, #1
    5c56:	4608      	mov	r0, r1
    5c58:	f7fd fd9e 	bl	3798 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5c5c:	f030 0302 	bics.w	r3, r0, #2
    5c60:	d1dc      	bne.n	5c1c <event_common_prepare+0x54>
    5c62:	462c      	mov	r4, r5
    5c64:	e00b      	b.n	5c7e <event_common_prepare+0xb6>
		event_active(0, 0, 0, NULL);
    5c66:	2300      	movs	r3, #0
    5c68:	461a      	mov	r2, r3
    5c6a:	4619      	mov	r1, r3
    5c6c:	4618      	mov	r0, r3
    5c6e:	f7ff fee1 	bl	5a34 <event_active>
		event_xtal(0, 0, 0, NULL);
    5c72:	2300      	movs	r3, #0
    5c74:	461a      	mov	r2, r3
    5c76:	4619      	mov	r1, r3
    5c78:	4618      	mov	r0, r3
    5c7a:	f7ff fecd 	bl	5a18 <event_xtal>
	_radio.remainder_anchor = remainder;
    5c7e:	4e2d      	ldr	r6, [pc, #180]	; (5d34 <event_common_prepare+0x16c>)
    5c80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5c82:	60f3      	str	r3, [r6, #12]
	ticker_status =
    5c84:	f241 7375 	movw	r3, #6005	; 0x1775
    5c88:	9308      	str	r3, [sp, #32]
    5c8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    5c8c:	9306      	str	r3, [sp, #24]
    5c8e:	2200      	movs	r2, #0
    5c90:	9b18      	ldr	r3, [sp, #96]	; 0x60
    5c92:	9305      	str	r3, [sp, #20]
    5c94:	9707      	str	r7, [sp, #28]
    5c96:	464b      	mov	r3, r9
    5c98:	9204      	str	r2, [sp, #16]
    5c9a:	9203      	str	r2, [sp, #12]
    5c9c:	9202      	str	r2, [sp, #8]
    5c9e:	9201      	str	r2, [sp, #4]
    5ca0:	9400      	str	r4, [sp, #0]
    5ca2:	4611      	mov	r1, r2
    5ca4:	4610      	mov	r0, r2
    5ca6:	f7fd fd77 	bl	3798 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5caa:	f030 0302 	bics.w	r3, r0, #2
    5cae:	d1b5      	bne.n	5c1c <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    5cb0:	2005      	movs	r0, #5
    5cb2:	f7ff ff7b 	bl	5bac <event_stop.constprop.50>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    5cb6:	f8d6 3d64 	ldr.w	r3, [r6, #3428]	; 0xd64
    5cba:	429d      	cmp	r5, r3
    5cbc:	d023      	beq.n	5d06 <event_common_prepare+0x13e>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    5cbe:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    5cc2:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    5cc6:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    5cc8:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    5cca:	bfbc      	itt	lt
    5ccc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    5cd0:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = (_radio.ticks_active_to_start <
    5cd4:	f8d6 2d64 	ldr.w	r2, [r6, #3428]	; 0xd64
    5cd8:	f8d8 1000 	ldr.w	r1, [r8]
    5cdc:	428a      	cmp	r2, r1
    5cde:	bf38      	it	cc
    5ce0:	460a      	movcc	r2, r1
		ticker_status =
    5ce2:	f241 71a5 	movw	r1, #6053	; 0x17a5
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    5ce6:	b2a3      	uxth	r3, r4
    5ce8:	b292      	uxth	r2, r2
		ticker_status =
    5cea:	9106      	str	r1, [sp, #24]
    5cec:	2100      	movs	r1, #0
    5cee:	9302      	str	r3, [sp, #8]
    5cf0:	9201      	str	r2, [sp, #4]
    5cf2:	9200      	str	r2, [sp, #0]
    5cf4:	9104      	str	r1, [sp, #16]
    5cf6:	9103      	str	r1, [sp, #12]
    5cf8:	4652      	mov	r2, sl
    5cfa:	4608      	mov	r0, r1
    5cfc:	f7fd fd9c 	bl	3838 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5d00:	f030 0302 	bics.w	r3, r0, #2
    5d04:	d18a      	bne.n	5c1c <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    5d06:	20ff      	movs	r0, #255	; 0xff
    5d08:	f7ff fd78 	bl	57fc <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    5d0c:	4b0a      	ldr	r3, [pc, #40]	; (5d38 <event_common_prepare+0x170>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5d0e:	2201      	movs	r2, #1
    5d10:	4611      	mov	r1, r2
    5d12:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    5d14:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5d18:	f7fc ff94 	bl	2c44 <mayfly_enqueue>
		LL_ASSERT(!retval);
    5d1c:	2800      	cmp	r0, #0
    5d1e:	f47f af7d 	bne.w	5c1c <event_common_prepare+0x54>
}
    5d22:	b00d      	add	sp, #52	; 0x34
    5d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d28:	00005ae1 	.word	0x00005ae1
    5d2c:	00005a35 	.word	0x00005a35
    5d30:	00005a19 	.word	0x00005a19
    5d34:	200002c0 	.word	0x200002c0
    5d38:	20004fe0 	.word	0x20004fe0

00005d3c <radio_event_adv_prepare>:
{
    5d3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    5d3e:	4a0b      	ldr	r2, [pc, #44]	; (5d6c <radio_event_adv_prepare+0x30>)
    5d40:	7c13      	ldrb	r3, [r2, #16]
    5d42:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    5d46:	b10b      	cbz	r3, 5d4c <radio_event_adv_prepare+0x10>
    5d48:	f7ff fbbe 	bl	54c8 <event_active.part.17>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    5d4c:	2305      	movs	r3, #5
    5d4e:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
    5d50:	9403      	str	r4, [sp, #12]
    5d52:	4c07      	ldr	r4, [pc, #28]	; (5d70 <radio_event_adv_prepare+0x34>)
    5d54:	9402      	str	r4, [sp, #8]
    5d56:	9301      	str	r3, [sp, #4]
    5d58:	6a13      	ldr	r3, [r2, #32]
    5d5a:	9300      	str	r3, [sp, #0]
    5d5c:	f102 031c 	add.w	r3, r2, #28
    5d60:	3218      	adds	r2, #24
    5d62:	f7ff ff31 	bl	5bc8 <event_common_prepare>
}
    5d66:	b004      	add	sp, #16
    5d68:	bd10      	pop	{r4, pc}
    5d6a:	bf00      	nop
    5d6c:	200002c0 	.word	0x200002c0
    5d70:	00006031 	.word	0x00006031

00005d74 <radio_event_ext_adv_prepare>:
{
    5d74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    5d76:	4a0b      	ldr	r2, [pc, #44]	; (5da4 <radio_event_ext_adv_prepare+0x30>)
    5d78:	7c13      	ldrb	r3, [r2, #16]
    5d7a:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    5d7e:	b10b      	cbz	r3, 5d84 <radio_event_ext_adv_prepare+0x10>
    5d80:	f7ff fba2 	bl	54c8 <event_active.part.17>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    5d84:	2305      	movs	r3, #5
    5d86:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
    5d88:	9403      	str	r4, [sp, #12]
    5d8a:	4c07      	ldr	r4, [pc, #28]	; (5da8 <radio_event_ext_adv_prepare+0x34>)
    5d8c:	9402      	str	r4, [sp, #8]
    5d8e:	9301      	str	r3, [sp, #4]
    5d90:	6a13      	ldr	r3, [r2, #32]
    5d92:	9300      	str	r3, [sp, #0]
    5d94:	f102 031c 	add.w	r3, r2, #28
    5d98:	3218      	adds	r2, #24
    5d9a:	f7ff ff15 	bl	5bc8 <event_common_prepare>
}
    5d9e:	b004      	add	sp, #16
    5da0:	bd10      	pop	{r4, pc}
    5da2:	bf00      	nop
    5da4:	200002c0 	.word	0x200002c0
    5da8:	000060e1 	.word	0x000060e1

00005dac <event_adv_stop>:
{
    5dac:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    5dae:	2005      	movs	r0, #5
    5db0:	f7ff fefc 	bl	5bac <event_stop.constprop.50>
	ticker_status =
    5db4:	f641 438b 	movw	r3, #7307	; 0x1c8b
    5db8:	2100      	movs	r1, #0
    5dba:	9300      	str	r3, [sp, #0]
    5dbc:	2205      	movs	r2, #5
    5dbe:	4b06      	ldr	r3, [pc, #24]	; (5dd8 <event_adv_stop+0x2c>)
    5dc0:	4608      	mov	r0, r1
    5dc2:	f7fd fd87 	bl	38d4 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5dc6:	f030 0302 	bics.w	r3, r0, #2
    5dca:	d001      	beq.n	5dd0 <event_adv_stop+0x24>
    5dcc:	f7ff fb7c 	bl	54c8 <event_active.part.17>
}
    5dd0:	b003      	add	sp, #12
    5dd2:	f85d fb04 	ldr.w	pc, [sp], #4
    5dd6:	bf00      	nop
    5dd8:	000055fd 	.word	0x000055fd

00005ddc <packet_rx_allocate.constprop.51>:
static void packet_rx_allocate(u8_t max)
    5ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    5de0:	4d21      	ldr	r5, [pc, #132]	; (5e68 <packet_rx_allocate.constprop.51+0x8c>)
	acquire = _radio.packet_rx_acquire + 1;
    5de2:	f895 4d22 	ldrb.w	r4, [r5, #3362]	; 0xd22
	if (acquire == _radio.packet_rx_count) {
    5de6:	f895 3d20 	ldrb.w	r3, [r5, #3360]	; 0xd20
	if (max > _radio.link_rx_data_quota) {
    5dea:	f895 9d34 	ldrb.w	r9, [r5, #3380]	; 0xd34
	acquire = _radio.packet_rx_acquire + 1;
    5dee:	3401      	adds	r4, #1
    5df0:	b2e4      	uxtb	r4, r4
		acquire = 0;
    5df2:	42a3      	cmp	r3, r4
    5df4:	bf08      	it	eq
    5df6:	2400      	moveq	r4, #0
		link = mem_acquire(&_radio.link_rx_free);
    5df8:	f605 5728 	addw	r7, r5, #3368	; 0xd28
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    5dfc:	f505 6851 	add.w	r8, r5, #3344	; 0xd10
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    5e00:	f1b9 0f00 	cmp.w	r9, #0
    5e04:	d003      	beq.n	5e0e <packet_rx_allocate.constprop.51+0x32>
    5e06:	f895 3d21 	ldrb.w	r3, [r5, #3361]	; 0xd21
    5e0a:	429c      	cmp	r4, r3
    5e0c:	d101      	bne.n	5e12 <packet_rx_allocate.constprop.51+0x36>
    5e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    5e12:	4638      	mov	r0, r7
    5e14:	f7fc fe5d 	bl	2ad2 <mem_acquire>
		if (!link) {
    5e18:	4606      	mov	r6, r0
    5e1a:	2800      	cmp	r0, #0
    5e1c:	d0f7      	beq.n	5e0e <packet_rx_allocate.constprop.51+0x32>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    5e1e:	4640      	mov	r0, r8
    5e20:	f7fc fe57 	bl	2ad2 <mem_acquire>
		if (!node_rx) {
    5e24:	b928      	cbnz	r0, 5e32 <packet_rx_allocate.constprop.51+0x56>
			mem_release(link, &_radio.link_rx_free);
    5e26:	4630      	mov	r0, r6
    5e28:	4910      	ldr	r1, [pc, #64]	; (5e6c <packet_rx_allocate.constprop.51+0x90>)
}
    5e2a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    5e2e:	f7fc be6a 	b.w	2b06 <mem_release>
		node_rx->hdr.onion.link = link;
    5e32:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    5e34:	f895 2d22 	ldrb.w	r2, [r5, #3362]	; 0xd22
    5e38:	f8d5 3d1c 	ldr.w	r3, [r5, #3356]	; 0xd1c
    5e3c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    5e40:	f885 4d22 	strb.w	r4, [r5, #3362]	; 0xd22
		if (acquire == _radio.packet_rx_count) {
    5e44:	f895 3d20 	ldrb.w	r3, [r5, #3360]	; 0xd20
		acquire = _radio.packet_rx_acquire + 1;
    5e48:	3401      	adds	r4, #1
    5e4a:	b2e4      	uxtb	r4, r4
			acquire = 0;
    5e4c:	42a3      	cmp	r3, r4
    5e4e:	bf08      	it	eq
    5e50:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    5e52:	f895 3d34 	ldrb.w	r3, [r5, #3380]	; 0xd34
    5e56:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    5e5a:	3b01      	subs	r3, #1
    5e5c:	f885 3d34 	strb.w	r3, [r5, #3380]	; 0xd34
    5e60:	fa5f f989 	uxtb.w	r9, r9
    5e64:	e7cc      	b.n	5e00 <packet_rx_allocate.constprop.51+0x24>
    5e66:	bf00      	nop
    5e68:	200002c0 	.word	0x200002c0
    5e6c:	20000fe8 	.word	0x20000fe8

00005e70 <common_init>:
{
    5e70:	b510      	push	{r4, lr}
	if (_radio.connection_count) {
    5e72:	4c2e      	ldr	r4, [pc, #184]	; (5f2c <common_init+0xbc>)
    5e74:	f894 2cf8 	ldrb.w	r2, [r4, #3320]	; 0xcf8
    5e78:	2a00      	cmp	r2, #0
    5e7a:	d037      	beq.n	5eec <common_init+0x7c>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    5e7c:	f604 43f4 	addw	r3, r4, #3316	; 0xcf4
    5e80:	f44f 7182 	mov.w	r1, #260	; 0x104
    5e84:	f8d4 0cf0 	ldr.w	r0, [r4, #3312]	; 0xcf0
    5e88:	f7fc fdfc 	bl	2a84 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    5e8c:	4b28      	ldr	r3, [pc, #160]	; (5f30 <common_init+0xc0>)
    5e8e:	f894 2d1a 	ldrb.w	r2, [r4, #3354]	; 0xd1a
    5e92:	f8b4 1d18 	ldrh.w	r1, [r4, #3352]	; 0xd18
    5e96:	f8d4 0d0c 	ldr.w	r0, [r4, #3340]	; 0xd0c
    5e9a:	f7fc fdf3 	bl	2a84 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    5e9e:	f894 1d20 	ldrb.w	r1, [r4, #3360]	; 0xd20
    5ea2:	f894 2cf8 	ldrb.w	r2, [r4, #3320]	; 0xcf8
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    5ea6:	4b23      	ldr	r3, [pc, #140]	; (5f34 <common_init+0xc4>)
    5ea8:	f8d4 0d24 	ldr.w	r0, [r4, #3364]	; 0xd24
    5eac:	440a      	add	r2, r1
    5eae:	2108      	movs	r1, #8
    5eb0:	f7fc fde8 	bl	2a84 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    5eb4:	4b20      	ldr	r3, [pc, #128]	; (5f38 <common_init+0xc8>)
    5eb6:	f8d4 0d38 	ldr.w	r0, [r4, #3384]	; 0xd38
    5eba:	2202      	movs	r2, #2
    5ebc:	2124      	movs	r1, #36	; 0x24
    5ebe:	f7fc fde1 	bl	2a84 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    5ec2:	f894 2d54 	ldrb.w	r2, [r4, #3412]	; 0xd54
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    5ec6:	f8d4 0d40 	ldr.w	r0, [r4, #3392]	; 0xd40
    5eca:	4b1c      	ldr	r3, [pc, #112]	; (5f3c <common_init+0xcc>)
    5ecc:	f8b4 1d48 	ldrh.w	r1, [r4, #3400]	; 0xd48
    5ed0:	3a01      	subs	r2, #1
    5ed2:	b292      	uxth	r2, r2
    5ed4:	f7fc fdd6 	bl	2a84 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    5ed8:	4816      	ldr	r0, [pc, #88]	; (5f34 <common_init+0xc4>)
    5eda:	f7fc fdfa 	bl	2ad2 <mem_acquire>
	LL_ASSERT(link);
    5ede:	b940      	cbnz	r0, 5ef2 <common_init+0x82>
    5ee0:	4040      	eors	r0, r0
    5ee2:	f380 8811 	msr	BASEPRI, r0
    5ee6:	f04f 0004 	mov.w	r0, #4
    5eea:	df02      	svc	2
		_radio.conn_free = NULL;
    5eec:	f8c4 2cf4 	str.w	r2, [r4, #3316]	; 0xcf4
    5ef0:	e7cc      	b.n	5e8c <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    5ef2:	4a13      	ldr	r2, [pc, #76]	; (5f40 <common_init+0xd0>)
    5ef4:	1f11      	subs	r1, r2, #4
    5ef6:	f7fc fe32 	bl	2b5e <memq_init>
	_radio.advertiser.chan_map = 0x07;
    5efa:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    5efe:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    5f02:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[0] = 0xFF;
    5f06:	23ff      	movs	r3, #255	; 0xff
    5f08:	f884 3d02 	strb.w	r3, [r4, #3330]	; 0xd02
	_radio.data_chan_map[1] = 0xFF;
    5f0c:	f884 3d03 	strb.w	r3, [r4, #3331]	; 0xd03
	_radio.data_chan_map[2] = 0xFF;
    5f10:	f884 3d04 	strb.w	r3, [r4, #3332]	; 0xd04
	_radio.data_chan_map[3] = 0xFF;
    5f14:	f884 3d05 	strb.w	r3, [r4, #3333]	; 0xd05
	_radio.data_chan_map[4] = 0x1F;
    5f18:	231f      	movs	r3, #31
    5f1a:	f884 3d06 	strb.w	r3, [r4, #3334]	; 0xd06
	_radio.data_chan_count = 37;
    5f1e:	2325      	movs	r3, #37	; 0x25
    5f20:	f884 3d07 	strb.w	r3, [r4, #3335]	; 0xd07
}
    5f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    5f28:	f7ff bf58 	b.w	5ddc <packet_rx_allocate.constprop.51>
    5f2c:	200002c0 	.word	0x200002c0
    5f30:	20000fd0 	.word	0x20000fd0
    5f34:	20000fe8 	.word	0x20000fe8
    5f38:	20000ffc 	.word	0x20000ffc
    5f3c:	20001004 	.word	0x20001004
    5f40:	20000ff0 	.word	0x20000ff0

00005f44 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    5f44:	4b02      	ldr	r3, [pc, #8]	; (5f50 <mayfly_xtal_start+0xc>)
    5f46:	6818      	ldr	r0, [r3, #0]
    5f48:	6843      	ldr	r3, [r0, #4]
    5f4a:	2100      	movs	r1, #0
    5f4c:	681b      	ldr	r3, [r3, #0]
    5f4e:	4718      	bx	r3
    5f50:	200002c0 	.word	0x200002c0

00005f54 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    5f54:	4b02      	ldr	r3, [pc, #8]	; (5f60 <mayfly_xtal_stop+0xc>)
    5f56:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    5f58:	6843      	ldr	r3, [r0, #4]
    5f5a:	2100      	movs	r1, #0
    5f5c:	685b      	ldr	r3, [r3, #4]
    5f5e:	4718      	bx	r3
    5f60:	200002c0 	.word	0x200002c0

00005f64 <chan_sel_2>:
{
    5f64:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    5f66:	4048      	eors	r0, r1
    5f68:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    5f6a:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    5f6e:	2608      	movs	r6, #8
	o = 0;
    5f70:	2400      	movs	r4, #0
		o |= (i & 1);
    5f72:	f00e 0501 	and.w	r5, lr, #1
    5f76:	3e01      	subs	r6, #1
    5f78:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    5f7c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    5f80:	b2ec      	uxtb	r4, r5
		i >>= 1;
    5f82:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    5f86:	d1f4      	bne.n	5f72 <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    5f88:	0225      	lsls	r5, r4, #8
    5f8a:	b22d      	sxth	r5, r5
    5f8c:	b2c0      	uxtb	r0, r0
    5f8e:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    5f92:	4634      	mov	r4, r6
		o |= (i & 1);
    5f94:	f000 0601 	and.w	r6, r0, #1
    5f98:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    5f9c:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    5fa0:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    5fa4:	b2e4      	uxtb	r4, r4
		i >>= 1;
    5fa6:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    5faa:	d1f3      	bne.n	5f94 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    5fac:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    5fae:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    5fb2:	3f01      	subs	r7, #1
    5fb4:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    5fb6:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    5fba:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    5fbc:	d1d5      	bne.n	5f6a <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    5fbe:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    5fc0:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    5fc2:	fbb1 f0f4 	udiv	r0, r1, r4
    5fc6:	fb04 1010 	mls	r0, r4, r0, r1
    5fca:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    5fcc:	08c4      	lsrs	r4, r0, #3
    5fce:	f000 0507 	and.w	r5, r0, #7
    5fd2:	5d14      	ldrb	r4, [r2, r4]
    5fd4:	412c      	asrs	r4, r5
    5fd6:	07e4      	lsls	r4, r4, #31
    5fd8:	d407      	bmi.n	5fea <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    5fda:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    5fdc:	f3c1 4107 	ubfx	r1, r1, #16, #8
    5fe0:	4610      	mov	r0, r2
}
    5fe2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    5fe6:	f7fe bc2b 	b.w	4840 <chan_sel_remap>
}
    5fea:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005fec <preempt_calc>:
{
    5fec:	b570      	push	{r4, r5, r6, lr}
    5fee:	4614      	mov	r4, r2
    5ff0:	460e      	mov	r6, r1
    5ff2:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    5ff4:	f7fd fd3e 	bl	3a74 <ticker_ticks_now_get>
	u32_t diff =
    5ff8:	4621      	mov	r1, r4
    5ffa:	f7fd fd3d 	bl	3a78 <ticker_ticks_diff_get>
	diff += 3;
    5ffe:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    6000:	2c09      	cmp	r4, #9
    6002:	d911      	bls.n	6028 <preempt_calc+0x3c>
		if (s_xtal_retained) {
    6004:	4b09      	ldr	r3, [pc, #36]	; (602c <preempt_calc+0x40>)
    6006:	781b      	ldrb	r3, [r3, #0]
    6008:	b113      	cbz	r3, 6010 <preempt_calc+0x24>
    600a:	2000      	movs	r0, #0
    600c:	f7ff f9ce 	bl	53ac <mayfly_xtal_retain.part.16>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    6010:	4632      	mov	r2, r6
    6012:	2100      	movs	r1, #0
    6014:	4628      	mov	r0, r5
    6016:	f7ff fa5d 	bl	54d4 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    601a:	68ab      	ldr	r3, [r5, #8]
    601c:	441c      	add	r4, r3
		if (diff <
    601e:	2c26      	cmp	r4, #38	; 0x26
    6020:	d800      	bhi.n	6024 <preempt_calc+0x38>
			hdr->ticks_preempt_to_start = diff;
    6022:	60ac      	str	r4, [r5, #8]
		return 1;
    6024:	2001      	movs	r0, #1
}
    6026:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    6028:	2000      	movs	r0, #0
    602a:	bd70      	pop	{r4, r5, r6, pc}
    602c:	200010cc 	.word	0x200010cc

00006030 <event_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
    6030:	4b28      	ldr	r3, [pc, #160]	; (60d4 <event_adv+0xa4>)
    6032:	7cda      	ldrb	r2, [r3, #19]
{
    6034:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    6036:	f002 01ff 	and.w	r1, r2, #255	; 0xff
{
    603a:	4605      	mov	r5, r0
    603c:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    603e:	b12a      	cbz	r2, 604c <event_adv+0x1c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6040:	4040      	eors	r0, r0
    6042:	f380 8811 	msr	BASEPRI, r0
    6046:	f04f 0004 	mov.w	r0, #4
    604a:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    604c:	7c1b      	ldrb	r3, [r3, #16]
    604e:	b2db      	uxtb	r3, r3
    6050:	2b05      	cmp	r3, #5
    6052:	d1f5      	bne.n	6040 <event_adv+0x10>
	_radio.ticks_anchor = ticks_at_expire;
    6054:	60a0      	str	r0, [r4, #8]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    6056:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	_radio.role = ROLE_ADV;
    605a:	2601      	movs	r6, #1
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    605c:	f3c0 0042 	ubfx	r0, r0, #1, #3
	_radio.role = ROLE_ADV;
    6060:	74e6      	strb	r6, [r4, #19]
	_radio.ticker_id_prepare = 0;
    6062:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    6064:	7463      	strb	r3, [r4, #17]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    6066:	f7ff fd77 	bl	5b58 <adv_scan_configure.constprop.49>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
    606a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    606e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    6072:	f3c3 1302 	ubfx	r3, r3, #4, #3
    6076:	f363 0202 	bfi	r2, r3, #0, #3
    607a:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	adv_setup();
    607e:	f7fe fec7 	bl	4e10 <adv_setup>
	if (_radio.advertiser.filter_policy) {
    6082:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    6086:	079b      	lsls	r3, r3, #30
    6088:	d007      	beq.n	609a <event_adv+0x6a>
		struct ll_filter *wl = ctrl_filter_get(true);
    608a:	4630      	mov	r0, r6
    608c:	f003 fe80 	bl	9d90 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    6090:	1c82      	adds	r2, r0, #2
    6092:	7841      	ldrb	r1, [r0, #1]
    6094:	7800      	ldrb	r0, [r0, #0]
    6096:	f004 f9c1 	bl	a41c <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    609a:	68e2      	ldr	r2, [r4, #12]
    609c:	f105 0109 	add.w	r1, r5, #9
    60a0:	2001      	movs	r0, #1
    60a2:	f004 fa11 	bl	a4c8 <radio_tmr_start>
	radio_tmr_end_capture();
    60a6:	f004 fadf 	bl	a668 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    60aa:	462a      	mov	r2, r5
    60ac:	2105      	movs	r1, #5
    60ae:	480a      	ldr	r0, [pc, #40]	; (60d8 <event_adv+0xa8>)
    60b0:	f7ff ff9c 	bl	5fec <preempt_calc>
    60b4:	4603      	mov	r3, r0
    60b6:	b128      	cbz	r0, 60c4 <event_adv+0x94>
		_radio.state = STATE_STOP;
    60b8:	2304      	movs	r3, #4
    60ba:	7523      	strb	r3, [r4, #20]
}
    60bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    60c0:	f004 b90c 	b.w	a2dc <radio_disable>
		ticker_status =
    60c4:	4a05      	ldr	r2, [pc, #20]	; (60dc <event_adv+0xac>)
    60c6:	4601      	mov	r1, r0
    60c8:	f7fd fc82 	bl	39d0 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    60cc:	f030 0302 	bics.w	r3, r0, #2
    60d0:	d1b6      	bne.n	6040 <event_adv+0x10>
    60d2:	bd70      	pop	{r4, r5, r6, pc}
    60d4:	200002c0 	.word	0x200002c0
    60d8:	200002d8 	.word	0x200002d8
    60dc:	00005359 	.word	0x00005359

000060e0 <event_ext_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
    60e0:	4b21      	ldr	r3, [pc, #132]	; (6168 <event_ext_adv+0x88>)
    60e2:	7cd9      	ldrb	r1, [r3, #19]
{
    60e4:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    60e6:	f001 02ff 	and.w	r2, r1, #255	; 0xff
{
    60ea:	4605      	mov	r5, r0
    60ec:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    60ee:	b129      	cbz	r1, 60fc <event_ext_adv+0x1c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    60f0:	4040      	eors	r0, r0
    60f2:	f380 8811 	msr	BASEPRI, r0
    60f6:	f04f 0004 	mov.w	r0, #4
    60fa:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    60fc:	7c1b      	ldrb	r3, [r3, #16]
    60fe:	b2db      	uxtb	r3, r3
    6100:	2b05      	cmp	r3, #5
    6102:	d1f5      	bne.n	60f0 <event_ext_adv+0x10>
	_radio.role = ROLE_ADV;
    6104:	2601      	movs	r6, #1
    6106:	74e6      	strb	r6, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    6108:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    610a:	7422      	strb	r2, [r4, #16]
	_radio.ext_advertiser.aux_chain_count_current = 0;
    610c:	f884 2c8d 	strb.w	r2, [r4, #3213]	; 0xc8d
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    6110:	7463      	strb	r3, [r4, #17]
	ext_adv_setup();
    6112:	f7fe ff8b 	bl	502c <ext_adv_setup>
	if (_radio.advertiser.filter_policy) {
    6116:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    611a:	079b      	lsls	r3, r3, #30
    611c:	d007      	beq.n	612e <event_ext_adv+0x4e>
		struct ll_filter *wl = ctrl_filter_get(true);
    611e:	4630      	mov	r0, r6
    6120:	f003 fe36 	bl	9d90 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    6124:	1c82      	adds	r2, r0, #2
    6126:	7841      	ldrb	r1, [r0, #1]
    6128:	7800      	ldrb	r0, [r0, #0]
    612a:	f004 f977 	bl	a41c <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    612e:	68e2      	ldr	r2, [r4, #12]
    6130:	f105 0109 	add.w	r1, r5, #9
    6134:	2001      	movs	r0, #1
    6136:	f004 f9c7 	bl	a4c8 <radio_tmr_start>
	radio_tmr_end_capture();
    613a:	f004 fa95 	bl	a668 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    613e:	462a      	mov	r2, r5
    6140:	2105      	movs	r1, #5
    6142:	480a      	ldr	r0, [pc, #40]	; (616c <event_ext_adv+0x8c>)
    6144:	f7ff ff52 	bl	5fec <preempt_calc>
    6148:	4603      	mov	r3, r0
    614a:	b128      	cbz	r0, 6158 <event_ext_adv+0x78>
		_radio.state = STATE_STOP;
    614c:	2304      	movs	r3, #4
    614e:	7523      	strb	r3, [r4, #20]
}
    6150:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    6154:	f004 b8c2 	b.w	a2dc <radio_disable>
		ticker_status =
    6158:	4a05      	ldr	r2, [pc, #20]	; (6170 <event_ext_adv+0x90>)
    615a:	4601      	mov	r1, r0
    615c:	f7fd fc38 	bl	39d0 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6160:	f030 0302 	bics.w	r3, r0, #2
    6164:	d1c4      	bne.n	60f0 <event_ext_adv+0x10>
    6166:	bd70      	pop	{r4, r5, r6, pc}
    6168:	200002c0 	.word	0x200002c0
    616c:	200002d8 	.word	0x200002d8
    6170:	00005359 	.word	0x00005359

00006174 <ctrl_tx_enqueue>:
{
    6174:	b510      	push	{r4, lr}
	    !conn->empty &&
    6176:	f890 40a8 	ldrb.w	r4, [r0, #168]	; 0xa8
    617a:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
	if (
    617e:	f014 0f80 	tst.w	r4, #128	; 0x80
    6182:	d118      	bne.n	61b6 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    6184:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
	    !conn->empty &&
    6188:	b1ab      	cbz	r3, 61b6 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    618a:	0724      	lsls	r4, r4, #28
    618c:	d413      	bmi.n	61b6 <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    618e:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
    6192:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    6194:	bf04      	itt	eq
    6196:	681c      	ldreq	r4, [r3, #0]
    6198:	f8c0 40f8 	streq.w	r4, [r0, #248]	; 0xf8
		if (!conn->pkt_tx_ctrl) {
    619c:	b992      	cbnz	r2, 61c4 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    619e:	681a      	ldr	r2, [r3, #0]
    61a0:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    61a2:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    61a4:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
	conn->pkt_tx_ctrl_last = node_tx;
    61a8:	f8c0 10f4 	str.w	r1, [r0, #244]	; 0xf4
	if (node_tx->next == 0) {
    61ac:	680b      	ldr	r3, [r1, #0]
    61ae:	b90b      	cbnz	r3, 61b4 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    61b0:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
    61b4:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    61b6:	b92a      	cbnz	r2, 61c4 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    61b8:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
    61bc:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    61be:	f8c0 10ec 	str.w	r1, [r0, #236]	; 0xec
    61c2:	e7ef      	b.n	61a4 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    61c4:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    61c8:	681a      	ldr	r2, [r3, #0]
    61ca:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    61cc:	6019      	str	r1, [r3, #0]
    61ce:	e7eb      	b.n	61a8 <ctrl_tx_enqueue+0x34>

000061d0 <ctrl_tx_sec_enqueue>:
{
    61d0:	b410      	push	{r4}
	if (conn->pause_tx) {
    61d2:	f890 40a8 	ldrb.w	r4, [r0, #168]	; 0xa8
    61d6:	0724      	lsls	r4, r4, #28
{
    61d8:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    61da:	d50f      	bpl.n	61fc <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    61dc:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
    61e0:	b931      	cbnz	r1, 61f0 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    61e2:	f8d0 10ec 	ldr.w	r1, [r0, #236]	; 0xec
    61e6:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    61e8:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
}
    61ec:	bc10      	pop	{r4}
    61ee:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    61f0:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    61f4:	6819      	ldr	r1, [r3, #0]
    61f6:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    61f8:	601a      	str	r2, [r3, #0]
    61fa:	e7f7      	b.n	61ec <ctrl_tx_sec_enqueue+0x1c>
}
    61fc:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    61fe:	f7ff bfb9 	b.w	6174 <ctrl_tx_enqueue>
	...

00006204 <feature_rsp_send>:
{
    6204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6206:	4f21      	ldr	r7, [pc, #132]	; (628c <feature_rsp_send+0x88>)
{
    6208:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    620a:	f607 503c 	addw	r0, r7, #3388	; 0xd3c
{
    620e:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6210:	f7fc fc5f 	bl	2ad2 <mem_acquire>
	if (!node_tx) {
    6214:	4604      	mov	r4, r0
    6216:	b3b0      	cbz	r0, 6286 <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    6218:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    621a:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    621c:	f8d7 2cfc 	ldr.w	r2, [r7, #3324]	; 0xcfc
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    6220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    6224:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    6228:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    622c:	f043 0310 	orr.w	r3, r3, #16
    6230:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    6234:	79b1      	ldrb	r1, [r6, #6]
    6236:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    623a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
    623e:	f3c1 0110 	ubfx	r1, r1, #0, #17
    6242:	400b      	ands	r3, r1
    6244:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	_radio.conn_curr->common.fex_valid = 1;
    6248:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
    624c:	f043 0320 	orr.w	r3, r3, #32
    6250:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6254:	7903      	ldrb	r3, [r0, #4]
    6256:	f043 0303 	orr.w	r3, r3, #3
    625a:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    625c:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    625e:	2309      	movs	r3, #9
    6260:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    6262:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    6264:	2100      	movs	r1, #0
    6266:	4410      	add	r0, r2
    6268:	f7fa f9c8 	bl	5fc <memset>
		conn->llcp_features & 0xFF;
    626c:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    6270:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    6272:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    6274:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    6276:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    6278:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    627a:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    627c:	4621      	mov	r1, r4
    627e:	f7ff ffa7 	bl	61d0 <ctrl_tx_sec_enqueue>
	return 0;
    6282:	2000      	movs	r0, #0
    6284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    6286:	2001      	movs	r0, #1
}
    6288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    628a:	bf00      	nop
    628c:	200002c0 	.word	0x200002c0

00006290 <event_connection_prepare>:
{
    6290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    6294:	4d6f      	ldr	r5, [pc, #444]	; (6454 <event_connection_prepare+0x1c4>)
{
    6296:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    6298:	7c2b      	ldrb	r3, [r5, #16]
{
    629a:	b08f      	sub	sp, #60	; 0x3c
    629c:	4680      	mov	r8, r0
    629e:	4689      	mov	r9, r1
	LL_ASSERT(!_radio.ticker_id_prepare);
    62a0:	b12b      	cbz	r3, 62ae <event_connection_prepare+0x1e>
			LL_ASSERT(0);
    62a2:	4040      	eors	r0, r0
    62a4:	f380 8811 	msr	BASEPRI, r0
    62a8:	f04f 0004 	mov.w	r0, #4
    62ac:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    62ae:	f894 3020 	ldrb.w	r3, [r4, #32]
    62b2:	3307      	adds	r3, #7
    62b4:	b2db      	uxtb	r3, r3
    62b6:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    62b8:	f994 301d 	ldrsb.w	r3, [r4, #29]
    62bc:	2b00      	cmp	r3, #0
    62be:	da09      	bge.n	62d4 <event_connection_prepare+0x44>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    62c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->slave.window_widening_prepare_us +=
    62c2:	6c61      	ldr	r1, [r4, #68]	; 0x44
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    62c4:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    62c8:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    62ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
		conn->slave.window_widening_prepare_us +=
    62cc:	6463      	str	r3, [r4, #68]	; 0x44
		if (conn->slave.window_widening_prepare_us >
    62ce:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    62d0:	bf88      	it	hi
    62d2:	6461      	strhi	r1, [r4, #68]	; 0x44
	conn->latency_prepare += lazy;
    62d4:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if (conn->llcp_ack != conn->llcp_req) {
    62d6:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    62da:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    62dc:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    62de:	b292      	uxth	r2, r2
    62e0:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    62e2:	4432      	add	r2, r6
    62e4:	b296      	uxth	r6, r2
	if (conn->llcp_ack != conn->llcp_req) {
    62e6:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
    62ea:	429a      	cmp	r2, r3
    62ec:	d071      	beq.n	63d2 <event_connection_prepare+0x142>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    62ee:	2005      	movs	r0, #5
    62f0:	f7ff fc5c 	bl	5bac <event_stop.constprop.50>
		switch (conn->llcp_type) {
    62f4:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    62f8:	3b01      	subs	r3, #1
    62fa:	2b03      	cmp	r3, #3
    62fc:	d8d1      	bhi.n	62a2 <event_connection_prepare+0x12>
    62fe:	e8df f013 	tbh	[pc, r3, lsl #1]
    6302:	0004      	.short	0x0004
    6304:	02680226 	.word	0x02680226
    6308:	02b1      	.short	0x02b1
	if (!conn_upd) {
    630a:	f8d5 3d68 	ldr.w	r3, [r5, #3432]	; 0xd68
    630e:	b90b      	cbnz	r3, 6314 <event_connection_prepare+0x84>
		_radio.conn_upd = conn;
    6310:	f8c5 4d68 	str.w	r4, [r5, #3432]	; 0xd68
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    6314:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    6318:	f013 0303 	ands.w	r3, r3, #3
    631c:	f000 80a6 	beq.w	646c <event_connection_prepare+0x1dc>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6320:	484d      	ldr	r0, [pc, #308]	; (6458 <event_connection_prepare+0x1c8>)
    6322:	f7fc fbd6 	bl	2ad2 <mem_acquire>
		if (!node_tx) {
    6326:	4605      	mov	r5, r0
    6328:	2800      	cmp	r0, #0
    632a:	d052      	beq.n	63d2 <event_connection_prepare+0x142>
		switch (conn->llcp.conn_upd.state) {
    632c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    6330:	f003 0203 	and.w	r2, r3, #3
    6334:	2a01      	cmp	r2, #1
    6336:	d1b4      	bne.n	62a2 <event_connection_prepare+0x12>
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    6338:	f36f 0301 	bfc	r3, #0, #2
    633c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		event_counter + conn->latency + 6;
    6340:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    6342:	3306      	adds	r3, #6
    6344:	4433      	add	r3, r6
    6346:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    6348:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    634c:	7902      	ldrb	r2, [r0, #4]
    634e:	f042 0203 	orr.w	r2, r2, #3
    6352:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    6354:	220c      	movs	r2, #12
    6356:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    6358:	2200      	movs	r2, #0
    635a:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    635c:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
    6360:	7202      	strb	r2, [r0, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    6362:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    6364:	f240 41e2 	movw	r1, #1250	; 0x4e2
    6368:	fbb2 f2f1 	udiv	r2, r2, r1
    636c:	f8a0 2009 	strh.w	r2, [r0, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    6370:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    6374:	f8a0 200b 	strh.w	r2, [r0, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    6378:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
    637c:	f8a0 200d 	strh.w	r2, [r0, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    6380:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
    6384:	f8a0 200f 	strh.w	r2, [r0, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    6388:	f8a0 3011 	strh.w	r3, [r0, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    638c:	6822      	ldr	r2, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    638e:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    6392:	2a00      	cmp	r2, #0
    6394:	da0a      	bge.n	63ac <event_connection_prepare+0x11c>
			u32_t ticks_prepare_to_start =
    6396:	68a3      	ldr	r3, [r4, #8]
    6398:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    639a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    639e:	428b      	cmp	r3, r1
    63a0:	bf2c      	ite	cs
    63a2:	4443      	addcs	r3, r8
    63a4:	eb08 0301 	addcc.w	r3, r8, r1
    63a8:	1a9b      	subs	r3, r3, r2
    63aa:	67a3      	str	r3, [r4, #120]	; 0x78
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    63ac:	f105 0309 	add.w	r3, r5, #9
    63b0:	6763      	str	r3, [r4, #116]	; 0x74
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    63b2:	4b2a      	ldr	r3, [pc, #168]	; (645c <event_connection_prepare+0x1cc>)
    63b4:	4a2a      	ldr	r2, [pc, #168]	; (6460 <event_connection_prepare+0x1d0>)
    63b6:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    63b8:	2201      	movs	r2, #1
    63ba:	4611      	mov	r1, r2
    63bc:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    63be:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    63c0:	f7fc fc40 	bl	2c44 <mayfly_enqueue>
		LL_ASSERT(!retval);
    63c4:	2800      	cmp	r0, #0
    63c6:	f47f af6c 	bne.w	62a2 <event_connection_prepare+0x12>
			ctrl_tx_enqueue(conn, node_tx);
    63ca:	4629      	mov	r1, r5
    63cc:	4620      	mov	r0, r4
    63ce:	f7ff fed1 	bl	6174 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    63d2:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
    63d6:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    63da:	429a      	cmp	r2, r3
    63dc:	d01d      	beq.n	641a <event_connection_prepare+0x18a>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    63de:	2005      	movs	r0, #5
    63e0:	f7ff fbe4 	bl	5bac <event_stop.constprop.50>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    63e4:	481c      	ldr	r0, [pc, #112]	; (6458 <event_connection_prepare+0x1c8>)
    63e6:	f7fc fb74 	bl	2ad2 <mem_acquire>
		if (node_tx) {
    63ea:	4601      	mov	r1, r0
    63ec:	b1a8      	cbz	r0, 641a <event_connection_prepare+0x18a>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    63ee:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    63f2:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    63f6:	7903      	ldrb	r3, [r0, #4]
    63f8:	f043 0303 	orr.w	r3, r3, #3
    63fc:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    63fe:	2302      	movs	r3, #2
    6400:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    6402:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    6404:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
    6408:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    640a:	4620      	mov	r0, r4
    640c:	f7ff feb2 	bl	6174 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    6410:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			if (conn->procedure_expire <= 1) {
    6412:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    6414:	bf98      	it	ls
    6416:	3301      	addls	r3, #1
    6418:	86a3      	strh	r3, [r4, #52]	; 0x34
	event_common_prepare(ticks_at_expire, remainder,
    641a:	f894 3020 	ldrb.w	r3, [r4, #32]
    641e:	f994 501d 	ldrsb.w	r5, [r4, #29]
    6422:	4810      	ldr	r0, [pc, #64]	; (6464 <event_connection_prepare+0x1d4>)
    6424:	4910      	ldr	r1, [pc, #64]	; (6468 <event_connection_prepare+0x1d8>)
    6426:	68a2      	ldr	r2, [r4, #8]
    6428:	9403      	str	r4, [sp, #12]
    642a:	3307      	adds	r3, #7
    642c:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    6430:	bf38      	it	cc
    6432:	4601      	movcc	r1, r0
    6434:	b2db      	uxtb	r3, r3
    6436:	e88d 000c 	stmia.w	sp, {r2, r3}
    643a:	9102      	str	r1, [sp, #8]
    643c:	1d23      	adds	r3, r4, #4
    643e:	4622      	mov	r2, r4
    6440:	4649      	mov	r1, r9
    6442:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    6444:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    6446:	f7ff fbbf 	bl	5bc8 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    644a:	8466      	strh	r6, [r4, #34]	; 0x22
}
    644c:	b00f      	add	sp, #60	; 0x3c
    644e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6452:	bf00      	nop
    6454:	200002c0 	.word	0x200002c0
    6458:	20000ffc 	.word	0x20000ffc
    645c:	20004f70 	.word	0x20004f70
    6460:	00005785 	.word	0x00005785
    6464:	00008451 	.word	0x00008451
    6468:	0000694d 	.word	0x0000694d
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    646c:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
    6470:	1bf7      	subs	r7, r6, r7
    6472:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    6474:	0438      	lsls	r0, r7, #16
    6476:	d4ac      	bmi.n	63d2 <event_connection_prepare+0x142>
		conn->llcp_ack = conn->llcp_req;
    6478:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    647c:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
		if (_radio.conn_upd == conn) {
    6480:	f8d5 2d68 	ldr.w	r2, [r5, #3432]	; 0xd68
		_radio.ticker_id_prepare = 0;
    6484:	742b      	strb	r3, [r5, #16]
		if (_radio.conn_upd == conn) {
    6486:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    6488:	bf08      	it	eq
    648a:	f8c5 3d68 	streq.w	r3, [r5, #3432]	; 0xd68
		if ((conn->llcp.conn_upd.interval !=
    648e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    6492:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    6494:	429a      	cmp	r2, r3
    6496:	d114      	bne.n	64c2 <event_connection_prepare+0x232>
		     conn->conn_interval) ||
    6498:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
    649c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    649e:	4299      	cmp	r1, r3
    64a0:	d10f      	bne.n	64c2 <event_connection_prepare+0x232>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    64a2:	f240 43e2 	movw	r3, #1250	; 0x4e2
    64a6:	435a      	muls	r2, r3
    64a8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    64ac:	f242 7110 	movw	r1, #10000	; 0x2710
    64b0:	fb01 2303 	mla	r3, r1, r3, r2
    64b4:	3b01      	subs	r3, #1
    64b6:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    64ba:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    64bc:	b29b      	uxth	r3, r3
    64be:	429a      	cmp	r2, r3
    64c0:	d016      	beq.n	64f0 <event_connection_prepare+0x260>
			node_rx = packet_rx_reserve_get(2);
    64c2:	2002      	movs	r0, #2
    64c4:	f7fe f9d8 	bl	4878 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    64c8:	2800      	cmp	r0, #0
    64ca:	f43f aeea 	beq.w	62a2 <event_connection_prepare+0x12>
			node_rx->hdr.handle = conn->handle;
    64ce:	8c23      	ldrh	r3, [r4, #32]
    64d0:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    64d2:	2308      	movs	r3, #8
    64d4:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    64d6:	2300      	movs	r3, #0
    64d8:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    64da:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    64de:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    64e0:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    64e4:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    64e6:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    64ea:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    64ec:	f7ff f83e 	bl	556c <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    64f0:	6823      	ldr	r3, [r4, #0]
    64f2:	6866      	ldr	r6, [r4, #4]
    64f4:	2b00      	cmp	r3, #0
    64f6:	da09      	bge.n	650c <event_connection_prepare+0x27c>
			u32_t ticks_prepare_to_start =
    64f8:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    64fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    64fe:	42b0      	cmp	r0, r6
    6500:	bf2c      	ite	cs
    6502:	4480      	addcs	r8, r0
    6504:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    6506:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    6508:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    650c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    650e:	f8b4 a062 	ldrh.w	sl, [r4, #98]	; 0x62
    6512:	49c9      	ldr	r1, [pc, #804]	; (6838 <event_connection_prepare+0x5a8>)
		conn_interval_old = instant_latency * conn->conn_interval;
    6514:	fb13 f307 	smulbb	r3, r3, r7
    6518:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    651a:	fbb3 f2fa 	udiv	r2, r3, sl
    651e:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    6522:	fb1a f009 	smulbb	r0, sl, r9
    6526:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    6528:	4283      	cmp	r3, r0
    652a:	f080 80f2 	bcs.w	6712 <event_connection_prepare+0x482>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    652e:	1ac0      	subs	r0, r0, r3
    6530:	f240 1223 	movw	r2, #291	; 0x123
    6534:	4342      	muls	r2, r0
    6536:	17c3      	asrs	r3, r0, #31
    6538:	fb01 2303 	mla	r3, r1, r3, r2
    653c:	fba0 0101 	umull	r0, r1, r0, r1
    6540:	4419      	add	r1, r3
    6542:	a3bb      	add	r3, pc, #748	; (adr r3, 6830 <event_connection_prepare+0x5a0>)
    6544:	e9d3 2300 	ldrd	r2, r3, [r3]
    6548:	f7f9 fe64 	bl	214 <__aeabi_uldivmod>
    654c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6550:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    6554:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    6556:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    6558:	f8df b304 	ldr.w	fp, [pc, #772]	; 6860 <event_connection_prepare+0x5d0>
    655c:	1bdb      	subs	r3, r3, r7
    655e:	444b      	add	r3, r9
    6560:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset =
    6562:	6823      	ldr	r3, [r4, #0]
    6564:	429e      	cmp	r6, r3
    6566:	bf38      	it	cc
    6568:	461e      	movcc	r6, r3
		if (conn->role) {
    656a:	f994 301d 	ldrsb.w	r3, [r4, #29]
		ticks_slot_offset =
    656e:	960d      	str	r6, [sp, #52]	; 0x34
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    6570:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    6574:	2b00      	cmp	r3, #0
    6576:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    6578:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    657a:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    657e:	f280 80d9 	bge.w	6734 <event_connection_prepare+0x4a4>
				conn->slave.window_widening_periodic_us *
    6582:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			conn->slave.window_widening_prepare_us -=
    6584:	6c62      	ldr	r2, [r4, #68]	; 0x44
    6586:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    658a:	f895 3d08 	ldrb.w	r3, [r5, #3336]	; 0xd08
    658e:	4aab      	ldr	r2, [pc, #684]	; (683c <event_connection_prepare+0x5ac>)
    6590:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    6594:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    6598:	f3c3 0382 	ubfx	r3, r3, #2, #3
    659c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    65a0:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
				(((gc_lookup_ppm[_radio.sca] +
    65a4:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    65a6:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    65a8:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    65ac:	4ba4      	ldr	r3, [pc, #656]	; (6840 <event_connection_prepare+0x5b0>)
				conn->llcp.conn_upd.win_size * 1250;
    65ae:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    65b2:	f205 253f 	addw	r5, r5, #575	; 0x23f
    65b6:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    65ba:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    65bc:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    65c0:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    65c2:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    65c4:	64e2      	str	r2, [r4, #76]	; 0x4c
			conn->slave.ticks_to_offset = 0;
    65c6:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    65c8:	429f      	cmp	r7, r3
    65ca:	bf94      	ite	ls
    65cc:	6467      	strls	r7, [r4, #68]	; 0x44
    65ce:	6463      	strhi	r3, [r4, #68]	; 0x44
			conn->slave.window_widening_periodic_us =
    65d0:	63e5      	str	r5, [r4, #60]	; 0x3c
			conn->slave.window_widening_max_us =
    65d2:	6423      	str	r3, [r4, #64]	; 0x40
			conn->slave.ticks_to_offset = 0;
    65d4:	65a2      	str	r2, [r4, #88]	; 0x58
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    65d6:	fba0 010b 	umull	r0, r1, r0, fp
    65da:	a395      	add	r3, pc, #596	; (adr r3, 6830 <event_connection_prepare+0x5a0>)
    65dc:	e9d3 2300 	ldrd	r2, r3, [r3]
    65e0:	f7f9 fe18 	bl	214 <__aeabi_uldivmod>
    65e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    65e6:	1a1b      	subs	r3, r3, r0
    65e8:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    65ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    65ec:	fbb3 f0f8 	udiv	r0, r3, r8
    65f0:	fb08 f000 	mul.w	r0, r8, r0
    65f4:	a38e      	add	r3, pc, #568	; (adr r3, 6830 <event_connection_prepare+0x5a0>)
    65f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    65fa:	fba0 010b 	umull	r0, r1, r0, fp
    65fe:	f7f9 fe09 	bl	214 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    6602:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    6604:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
		conn->latency = conn->llcp.conn_upd.latency;
    6608:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    660c:	84e3      	strh	r3, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    660e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
		conn->conn_interval = conn->llcp.conn_upd.interval;
    6612:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    6616:	f242 7210 	movw	r2, #10000	; 0x2710
    661a:	fb02 6303 	mla	r3, r2, r3, r6
    661e:	3b01      	subs	r3, #1
    6620:	fbb3 f3f6 	udiv	r3, r3, r6
    6624:	85e3      	strh	r3, [r4, #46]	; 0x2e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    6626:	4b87      	ldr	r3, [pc, #540]	; (6844 <event_connection_prepare+0x5b4>)
    6628:	4433      	add	r3, r6
    662a:	fbb3 f6f6 	udiv	r6, r3, r6
		if (!conn->llcp.conn_upd.is_internal) {
    662e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    6632:	8666      	strh	r6, [r4, #50]	; 0x32
		if (!conn->llcp.conn_upd.is_internal) {
    6634:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    6638:	bf08      	it	eq
    663a:	8623      	strheq	r3, [r4, #48]	; 0x30
		mayfly_was_enabled =
    663c:	2101      	movs	r1, #1
    663e:	2000      	movs	r0, #0
    6640:	f004 f8ee 	bl	a820 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    6644:	2200      	movs	r2, #0
    6646:	2101      	movs	r1, #1
		mayfly_was_enabled =
    6648:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    664a:	4610      	mov	r0, r2
    664c:	f7fc fad2 	bl	2bf4 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6650:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    6654:	f641 737b 	movw	r3, #8059	; 0x1f7b
    6658:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    665a:	3207      	adds	r2, #7
		ticker_status =
    665c:	9300      	str	r3, [sp, #0]
    665e:	b2d2      	uxtb	r2, r2
    6660:	4b79      	ldr	r3, [pc, #484]	; (6848 <event_connection_prepare+0x5b8>)
    6662:	4608      	mov	r0, r1
    6664:	f7fd f936 	bl	38d4 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6668:	f030 0802 	bics.w	r8, r0, #2
    666c:	f47f ae19 	bne.w	62a2 <event_connection_prepare+0x12>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    6670:	fba5 ab0b 	umull	sl, fp, r5, fp
    6674:	a36e      	add	r3, pc, #440	; (adr r3, 6830 <event_connection_prepare+0x5a0>)
    6676:	e9d3 2300 	ldrd	r2, r3, [r3]
    667a:	4650      	mov	r0, sl
    667c:	4659      	mov	r1, fp
    667e:	f7f9 fdc9 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    6682:	4a72      	ldr	r2, [pc, #456]	; (684c <event_connection_prepare+0x5bc>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6684:	f894 6020 	ldrb.w	r6, [r4, #32]
    6688:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    668c:	2307      	movs	r3, #7
    668e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6692:	2100      	movs	r1, #0
    6694:	4343      	muls	r3, r0
    6696:	fb02 3301 	mla	r3, r2, r1, r3
    669a:	fba0 0102 	umull	r0, r1, r0, r2
    669e:	ebba 0000 	subs.w	r0, sl, r0
    66a2:	4419      	add	r1, r3
    66a4:	eb6b 0101 	sbc.w	r1, fp, r1
    66a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    66ac:	2300      	movs	r3, #0
    66ae:	f7f9 fdb1 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    66b2:	68e3      	ldr	r3, [r4, #12]
    66b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    66b6:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    66ba:	4965      	ldr	r1, [pc, #404]	; (6850 <event_connection_prepare+0x5c0>)
		ticker_status =
    66bc:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    66be:	441a      	add	r2, r3
    66c0:	4613      	mov	r3, r2
    66c2:	4a64      	ldr	r2, [pc, #400]	; (6854 <event_connection_prepare+0x5c4>)
		ticker_status =
    66c4:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    66c6:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    66ca:	bf38      	it	cc
    66cc:	460a      	movcc	r2, r1
    66ce:	3607      	adds	r6, #7
		ticker_status =
    66d0:	f641 718b 	movw	r1, #8075	; 0x1f8b
    66d4:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    66d6:	b2f6      	uxtb	r6, r6
		ticker_status =
    66d8:	495b      	ldr	r1, [pc, #364]	; (6848 <event_connection_prepare+0x5b8>)
    66da:	9107      	str	r1, [sp, #28]
    66dc:	9205      	str	r2, [sp, #20]
    66de:	9406      	str	r4, [sp, #24]
    66e0:	f8cd 800c 	str.w	r8, [sp, #12]
    66e4:	9501      	str	r5, [sp, #4]
    66e6:	9700      	str	r7, [sp, #0]
    66e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    66ea:	4632      	mov	r2, r6
    66ec:	4641      	mov	r1, r8
    66ee:	4640      	mov	r0, r8
    66f0:	f7fd f852 	bl	3798 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    66f4:	f030 0002 	bics.w	r0, r0, #2
    66f8:	f47f add3 	bne.w	62a2 <event_connection_prepare+0x12>
		if (mayfly_was_enabled) {
    66fc:	f1b9 0f00 	cmp.w	r9, #0
    6700:	f43f aea4 	beq.w	644c <event_connection_prepare+0x1bc>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    6704:	2201      	movs	r2, #1
    6706:	4611      	mov	r1, r2
}
    6708:	b00f      	add	sp, #60	; 0x3c
    670a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    670e:	f7fc ba71 	b.w	2bf4 <mayfly_enable>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    6712:	fb0a 3212 	mls	r2, sl, r2, r3
    6716:	b292      	uxth	r2, r2
    6718:	fba2 0101 	umull	r0, r1, r2, r1
    671c:	f240 1323 	movw	r3, #291	; 0x123
    6720:	fb03 1102 	mla	r1, r3, r2, r1
    6724:	a342      	add	r3, pc, #264	; (adr r3, 6830 <event_connection_prepare+0x5a0>)
    6726:	e9d3 2300 	ldrd	r2, r3, [r3]
    672a:	f7f9 fd73 	bl	214 <__aeabi_uldivmod>
    672e:	eba8 0300 	sub.w	r3, r8, r0
    6732:	e70f      	b.n	6554 <event_connection_prepare+0x2c4>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    6734:	990c      	ldr	r1, [sp, #48]	; 0x30
    6736:	a33e      	add	r3, pc, #248	; (adr r3, 6830 <event_connection_prepare+0x5a0>)
    6738:	e9d3 2300 	ldrd	r2, r3, [r3]
    673c:	fba1 010b 	umull	r0, r1, r1, fp
    6740:	f7f9 fd68 	bl	214 <__aeabi_uldivmod>
    6744:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    6748:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    674a:	4635      	mov	r5, r6
    674c:	e75c      	b.n	6608 <event_connection_prepare+0x378>
	if (conn->llcp.chan_map.initiate) {
    674e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    6752:	b30b      	cbz	r3, 6798 <event_connection_prepare+0x508>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6754:	4840      	ldr	r0, [pc, #256]	; (6858 <event_connection_prepare+0x5c8>)
    6756:	f7fc f9bc 	bl	2ad2 <mem_acquire>
		if (node_tx) {
    675a:	4605      	mov	r5, r0
    675c:	2800      	cmp	r0, #0
    675e:	f43f ae38 	beq.w	63d2 <event_connection_prepare+0x142>
			conn->llcp.chan_map.initiate = 0;
    6762:	2300      	movs	r3, #0
    6764:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
				event_counter + conn->latency + 6;
    6768:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    676a:	3306      	adds	r3, #6
    676c:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    676e:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6772:	7903      	ldrb	r3, [r0, #4]
    6774:	f043 0303 	orr.w	r3, r3, #3
    6778:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    677a:	2308      	movs	r3, #8
    677c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    677e:	2301      	movs	r3, #1
    6780:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    6782:	2205      	movs	r2, #5
    6784:	f104 0161 	add.w	r1, r4, #97	; 0x61
    6788:	3008      	adds	r0, #8
    678a:	f7f9 ff0b 	bl	5a4 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    678e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    6792:	f8a5 300d 	strh.w	r3, [r5, #13]
    6796:	e618      	b.n	63ca <event_connection_prepare+0x13a>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    6798:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    679c:	1af3      	subs	r3, r6, r3
    679e:	0419      	lsls	r1, r3, #16
    67a0:	f53f ae17 	bmi.w	63d2 <event_connection_prepare+0x142>
		conn->llcp_ack = conn->llcp_req;
    67a4:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    67a8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		memcpy(&conn->data_chan_map[0],
    67ac:	f104 0517 	add.w	r5, r4, #23
    67b0:	2205      	movs	r2, #5
    67b2:	f104 0161 	add.w	r1, r4, #97	; 0x61
    67b6:	4628      	mov	r0, r5
    67b8:	f7f9 fef4 	bl	5a4 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    67bc:	2105      	movs	r1, #5
    67be:	4628      	mov	r0, r5
    67c0:	f7fc fb20 	bl	2e04 <util_ones_count_get>
		conn->data_chan_count =
    67c4:	7f63      	ldrb	r3, [r4, #29]
    67c6:	f360 0305 	bfi	r3, r0, #0, #6
    67ca:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    67cc:	2301      	movs	r3, #1
    67ce:	7723      	strb	r3, [r4, #28]
    67d0:	e5ff      	b.n	63d2 <event_connection_prepare+0x142>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    67d2:	4821      	ldr	r0, [pc, #132]	; (6858 <event_connection_prepare+0x5c8>)
    67d4:	f7fc f97d 	bl	2ad2 <mem_acquire>
	if (node_tx) {
    67d8:	4605      	mov	r5, r0
    67da:	2800      	cmp	r0, #0
    67dc:	f43f adf9 	beq.w	63d2 <event_connection_prepare+0x142>
		conn->llcp_ack = conn->llcp_req;
    67e0:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    67e4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		conn->llcp_features = RADIO_BLE_FEAT;
    67e8:	4b1c      	ldr	r3, [pc, #112]	; (685c <event_connection_prepare+0x5cc>)
    67ea:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    67ee:	7903      	ldrb	r3, [r0, #4]
    67f0:	f043 0303 	orr.w	r3, r3, #3
    67f4:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    67f6:	2309      	movs	r3, #9
    67f8:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    67fa:	f994 301d 	ldrsb.w	r3, [r4, #29]
    67fe:	2b00      	cmp	r3, #0
    6800:	bfac      	ite	ge
    6802:	2308      	movge	r3, #8
    6804:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    6806:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    6808:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    680a:	2100      	movs	r1, #0
    680c:	4410      	add	r0, r2
    680e:	f7f9 fef5 	bl	5fc <memset>
			conn->llcp_features & 0xFF;
    6812:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    6816:	722b      	strb	r3, [r5, #8]
			(conn->llcp_features >> 8) & 0xFF;
    6818:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    681a:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    681c:	726a      	strb	r2, [r5, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    681e:	72ab      	strb	r3, [r5, #10]
		ctrl_tx_enqueue(conn, node_tx);
    6820:	4629      	mov	r1, r5
			ctrl_tx_enqueue(conn, node_tx);
    6822:	4620      	mov	r0, r4
    6824:	f7ff fca6 	bl	6174 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
    6828:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    682a:	86a3      	strh	r3, [r4, #52]	; 0x34
    682c:	e5d1      	b.n	63d2 <event_connection_prepare+0x142>
    682e:	bf00      	nop
    6830:	1afd498d 	.word	0x1afd498d
    6834:	00000007 	.word	0x00000007
    6838:	09ce5400 	.word	0x09ce5400
    683c:	0000c6f8 	.word	0x0000c6f8
    6840:	000f4240 	.word	0x000f4240
    6844:	026259ff 	.word	0x026259ff
    6848:	00005ae1 	.word	0x00005ae1
    684c:	1afd498d 	.word	0x1afd498d
    6850:	00006909 	.word	0x00006909
    6854:	0000690d 	.word	0x0000690d
    6858:	20000ffc 	.word	0x20000ffc
    685c:	0001400c 	.word	0x0001400c
    6860:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp_version.tx == 0) {
    6864:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    6868:	07da      	lsls	r2, r3, #31
    686a:	d424      	bmi.n	68b6 <event_connection_prepare+0x626>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    686c:	4825      	ldr	r0, [pc, #148]	; (6904 <event_connection_prepare+0x674>)
    686e:	f7fc f930 	bl	2ad2 <mem_acquire>
		if (node_tx) {
    6872:	4601      	mov	r1, r0
    6874:	2800      	cmp	r0, #0
    6876:	f43f adac 	beq.w	63d2 <event_connection_prepare+0x142>
			conn->llcp_ack = conn->llcp_req;
    687a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    687e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			conn->llcp_version.tx = 1;
    6882:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    6886:	f043 0301 	orr.w	r3, r3, #1
    688a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    688e:	7903      	ldrb	r3, [r0, #4]
    6890:	f043 0303 	orr.w	r3, r3, #3
    6894:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    6896:	2306      	movs	r3, #6
    6898:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    689a:	230c      	movs	r3, #12
    689c:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    689e:	2309      	movs	r3, #9
    68a0:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    68a2:	f06f 030e 	mvn.w	r3, #14
    68a6:	7243      	strb	r3, [r0, #9]
    68a8:	2305      	movs	r3, #5
    68aa:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    68ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    68b0:	72c3      	strb	r3, [r0, #11]
    68b2:	7303      	strb	r3, [r0, #12]
    68b4:	e7b5      	b.n	6822 <event_connection_prepare+0x592>
	} else if (conn->llcp_version.rx != 0) {
    68b6:	079b      	lsls	r3, r3, #30
    68b8:	f57f acf3 	bpl.w	62a2 <event_connection_prepare+0x12>
		conn->llcp_ack = conn->llcp_req;
    68bc:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    68c0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		node_rx = packet_rx_reserve_get(2);
    68c4:	2002      	movs	r0, #2
    68c6:	f7fd ffd7 	bl	4878 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    68ca:	2800      	cmp	r0, #0
    68cc:	f43f ace9 	beq.w	62a2 <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    68d0:	8c23      	ldrh	r3, [r4, #32]
    68d2:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    68d4:	2301      	movs	r3, #1
    68d6:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    68d8:	7a03      	ldrb	r3, [r0, #8]
    68da:	f043 0303 	orr.w	r3, r3, #3
    68de:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    68e0:	2306      	movs	r3, #6
    68e2:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    68e4:	230c      	movs	r3, #12
    68e6:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    68e8:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    68ec:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    68ee:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
    68f2:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    68f6:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    68fa:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    68fe:	f7fe fe35 	bl	556c <packet_rx_enqueue>
    6902:	e566      	b.n	63d2 <event_connection_prepare+0x142>
    6904:	20000ffc 	.word	0x20000ffc

00006908 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    6908:	f7ff bcc2 	b.w	6290 <event_connection_prepare>

0000690c <event_slave_prepare>:
    690c:	f7ff bcc0 	b.w	6290 <event_connection_prepare>

00006910 <connection_configure>:
{
    6910:	b510      	push	{r4, lr}
    6912:	4604      	mov	r4, r0
	radio_reset();
    6914:	f003 fc2e 	bl	a174 <radio_reset>
	radio_tx_power_set(0);
    6918:	2000      	movs	r0, #0
    691a:	f003 fc55 	bl	a1c8 <radio_tx_power_set>
	radio_isr_set(isr);
    691e:	480a      	ldr	r0, [pc, #40]	; (6948 <connection_configure+0x38>)
    6920:	f003 fbf2 	bl	a108 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    6924:	f104 0010 	add.w	r0, r4, #16
    6928:	f003 fc6c 	bl	a204 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    692c:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    692e:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    6930:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    6932:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    6936:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    6938:	f240 605b 	movw	r0, #1627	; 0x65b
    693c:	4319      	orrs	r1, r3
}
    693e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    6942:	f003 bd07 	b.w	a354 <radio_crc_configure>
    6946:	bf00      	nop
    6948:	00006b91 	.word	0x00006b91

0000694c <event_slave>:
{
    694c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6950:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    6952:	4b5a      	ldr	r3, [pc, #360]	; (6abc <event_slave+0x170>)
    6954:	7cda      	ldrb	r2, [r3, #19]
{
    6956:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    6958:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    695c:	461d      	mov	r5, r3
    695e:	b12a      	cbz	r2, 696c <event_slave+0x20>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6960:	4040      	eors	r0, r0
    6962:	f380 8811 	msr	BASEPRI, r0
    6966:	f04f 0004 	mov.w	r0, #4
    696a:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    696c:	7c1a      	ldrb	r2, [r3, #16]
    696e:	8c23      	ldrh	r3, [r4, #32]
    6970:	b2d2      	uxtb	r2, r2
    6972:	3307      	adds	r3, #7
    6974:	429a      	cmp	r2, r3
    6976:	d1f3      	bne.n	6960 <event_slave+0x14>
	_radio.role = ROLE_SLAVE;
    6978:	2303      	movs	r3, #3
    697a:	74eb      	strb	r3, [r5, #19]
	_radio.packet_counter = 0;
    697c:	f885 6d00 	strb.w	r6, [r5, #3328]	; 0xd00
	_radio.crc_expire = 0;
    6980:	f885 6d01 	strb.w	r6, [r5, #3329]	; 0xd01
	_radio.state = STATE_RX;
    6984:	2301      	movs	r3, #1
    6986:	752b      	strb	r3, [r5, #20]
	conn->latency_event = conn->latency_prepare;
    6988:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    698a:	f8c5 4cfc 	str.w	r4, [r5, #3324]	; 0xcfc
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    698e:	b2d2      	uxtb	r2, r2
	conn->latency_event = conn->latency_prepare;
    6990:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    6992:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    6994:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    6996:	4620      	mov	r0, r4
	_radio.ticker_id_prepare = 0;
    6998:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    699a:	746a      	strb	r2, [r5, #17]
	connection_configure(conn);
    699c:	f7ff ffb8 	bl	6910 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    69a0:	2096      	movs	r0, #150	; 0x96
    69a2:	f003 fd85 	bl	a4b0 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    69a6:	4633      	mov	r3, r6
    69a8:	4632      	mov	r2, r6
    69aa:	4631      	mov	r1, r6
    69ac:	4630      	mov	r0, r6
    69ae:	f003 fcfb 	bl	a3a8 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    69b2:	f895 2d21 	ldrb.w	r2, [r5, #3361]	; 0xd21
    69b6:	f8d5 3d1c 	ldr.w	r3, [r5, #3356]	; 0xd1c
    69ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    69be:	4620      	mov	r0, r4
    69c0:	3108      	adds	r1, #8
    69c2:	f7fe fd0f 	bl	53e4 <rx_packet_set>
	if (conn->data_chan_sel) {
    69c6:	7f63      	ldrb	r3, [r4, #29]
    69c8:	f013 0f40 	tst.w	r3, #64	; 0x40
    69cc:	f104 0217 	add.w	r2, r4, #23
    69d0:	d04a      	beq.n	6a68 <event_slave+0x11c>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    69d2:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    69d4:	8be1      	ldrh	r1, [r4, #30]
    69d6:	3801      	subs	r0, #1
    69d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    69dc:	b280      	uxth	r0, r0
    69de:	f7ff fac1 	bl	5f64 <chan_sel_2>
	chan_set(data_chan_use);
    69e2:	f7fe f8f3 	bl	4bcc <chan_set>
	conn->slave.window_widening_event_us +=
    69e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    69e8:	6c62      	ldr	r2, [r4, #68]	; 0x44
    69ea:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    69ec:	2200      	movs	r2, #0
    69ee:	6462      	str	r2, [r4, #68]	; 0x44
	    conn->slave.window_widening_max_us) {
    69f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
	conn->slave.window_widening_event_us +=
    69f2:	64a3      	str	r3, [r4, #72]	; 0x48
	if (conn->slave.window_widening_event_us >
    69f4:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    69f6:	bf88      	it	hi
    69f8:	64a2      	strhi	r2, [r4, #72]	; 0x48
	conn->slave.window_size_event_us +=
    69fa:	6d23      	ldr	r3, [r4, #80]	; 0x50
    69fc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
	conn->slave.window_size_prepare_us = 0;
    69fe:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    6a00:	4413      	add	r3, r2
    6a02:	6523      	str	r3, [r4, #80]	; 0x50
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    6a04:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    6a06:	64e6      	str	r6, [r4, #76]	; 0x4c
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    6a08:	f107 0109 	add.w	r1, r7, #9
    6a0c:	4630      	mov	r0, r6
    6a0e:	f003 fd5b 	bl	a4c8 <radio_tmr_start>
    6a12:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    6a14:	f003 fdf4 	bl	a600 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    6a18:	4630      	mov	r0, r6
    6a1a:	f003 fe13 	bl	a644 <radio_tmr_aa_save>
    6a1e:	6d23      	ldr	r3, [r4, #80]	; 0x50
	       (conn->slave.window_widening_event_us << 1) +
    6a20:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    6a22:	3378      	adds	r3, #120	; 0x78
	hcto += radio_rx_ready_delay_get(0, 0);
    6a24:	4631      	mov	r1, r6
    6a26:	4630      	mov	r0, r6
    6a28:	eb03 0942 	add.w	r9, r3, r2, lsl #1
    6a2c:	f003 fc43 	bl	a2b6 <radio_rx_ready_delay_get>
	hcto += addr_us_get(0);
    6a30:	44c8      	add	r8, r9
	hcto += radio_rx_chain_delay_get(0, 0);
    6a32:	4631      	mov	r1, r6
	hcto += addr_us_get(0);
    6a34:	4480      	add	r8, r0
	hcto += radio_rx_chain_delay_get(0, 0);
    6a36:	4630      	mov	r0, r6
    6a38:	f003 fc3f 	bl	a2ba <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    6a3c:	4440      	add	r0, r8
    6a3e:	f003 fdc1 	bl	a5c4 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    6a42:	f894 1020 	ldrb.w	r1, [r4, #32]
    6a46:	3107      	adds	r1, #7
    6a48:	463a      	mov	r2, r7
    6a4a:	b2c9      	uxtb	r1, r1
    6a4c:	4620      	mov	r0, r4
    6a4e:	f7ff facd 	bl	5fec <preempt_calc>
    6a52:	4603      	mov	r3, r0
    6a54:	b340      	cbz	r0, 6aa8 <event_slave+0x15c>
		_radio.state = STATE_STOP;
    6a56:	2304      	movs	r3, #4
    6a58:	752b      	strb	r3, [r5, #20]
		radio_disable();
    6a5a:	f003 fc3f 	bl	a2dc <radio_disable>
	packet_tx_enqueue(2);
    6a5e:	2002      	movs	r0, #2
}
    6a60:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	packet_tx_enqueue(2);
    6a64:	f7fe beca 	b.w	57fc <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    6a68:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    6a6a:	7fa6      	ldrb	r6, [r4, #30]
    6a6c:	fb01 6606 	mla	r6, r1, r6, r6
    6a70:	7fe1      	ldrb	r1, [r4, #31]
    6a72:	2025      	movs	r0, #37	; 0x25
    6a74:	440e      	add	r6, r1
    6a76:	fb96 f1f0 	sdiv	r1, r6, r0
    6a7a:	fb00 6611 	mls	r6, r0, r1, r6
    6a7e:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    6a80:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    6a82:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    6a84:	5c51      	ldrb	r1, [r2, r1]
    6a86:	f006 0607 	and.w	r6, r6, #7
    6a8a:	fa41 f606 	asr.w	r6, r1, r6
    6a8e:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    6a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    6a94:	d4a5      	bmi.n	69e2 <event_slave+0x96>
		chan_index = chan_next % chan_count;
    6a96:	fbb0 f1f3 	udiv	r1, r0, r3
    6a9a:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    6a9e:	b2c9      	uxtb	r1, r1
    6aa0:	4610      	mov	r0, r2
    6aa2:	f7fd fecd 	bl	4840 <chan_sel_remap>
    6aa6:	e79c      	b.n	69e2 <event_slave+0x96>
		ticker_status =
    6aa8:	4a05      	ldr	r2, [pc, #20]	; (6ac0 <event_slave+0x174>)
    6aaa:	4601      	mov	r1, r0
    6aac:	f7fc ff90 	bl	39d0 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6ab0:	f030 0302 	bics.w	r3, r0, #2
    6ab4:	f47f af54 	bne.w	6960 <event_slave+0x14>
    6ab8:	e7d1      	b.n	6a5e <event_slave+0x112>
    6aba:	bf00      	nop
    6abc:	200002c0 	.word	0x200002c0
    6ac0:	00005359 	.word	0x00005359

00006ac4 <prepare_pdu_data_tx>:
{
    6ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	    conn->empty ||
    6ac6:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
	if (/* empty packet */
    6aca:	061a      	lsls	r2, r3, #24
{
    6acc:	4604      	mov	r4, r0
    6ace:	460f      	mov	r7, r1
	if (/* empty packet */
    6ad0:	d409      	bmi.n	6ae6 <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
    6ad2:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	    conn->empty ||
    6ad6:	b135      	cbz	r5, 6ae6 <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
    6ad8:	f013 0f08 	tst.w	r3, #8
    6adc:	f8d0 e0f0 	ldr.w	lr, [r0, #240]	; 0xf0
    6ae0:	d022      	beq.n	6b28 <prepare_pdu_data_tx+0x64>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    6ae2:	4575      	cmp	r5, lr
    6ae4:	d020      	beq.n	6b28 <prepare_pdu_data_tx+0x64>
	conn->empty = 1;
    6ae6:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    6aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    6aee:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    6af2:	f003 fc45 	bl	a380 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    6af6:	7803      	ldrb	r3, [r0, #0]
    6af8:	2201      	movs	r2, #1
    6afa:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    6afe:	2200      	movs	r2, #0
    6b00:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    6b02:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    6b06:	7003      	strb	r3, [r0, #0]
    6b08:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    6b0a:	b152      	cbz	r2, 6b22 <prepare_pdu_data_tx+0x5e>
		pdu_data_tx->md = 1;
    6b0c:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    6b10:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    6b12:	7803      	ldrb	r3, [r0, #0]
    6b14:	f36f 1347 	bfc	r3, #5, #3
    6b18:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    6b1a:	2300      	movs	r3, #0
    6b1c:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    6b1e:	6038      	str	r0, [r7, #0]
    6b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    6b22:	f362 1304 	bfi	r3, r2, #4, #1
    6b26:	e7f3      	b.n	6b10 <prepare_pdu_data_tx+0x4c>
					conn->packet_tx_head_offset);
    6b28:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
		if (!conn->packet_tx_head_len) {
    6b2c:	f894 1100 	ldrb.w	r1, [r4, #256]	; 0x100
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    6b30:	1d2a      	adds	r2, r5, #4
    6b32:	18d0      	adds	r0, r2, r3
		if (!conn->packet_tx_head_len) {
    6b34:	b911      	cbnz	r1, 6b3c <prepare_pdu_data_tx+0x78>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    6b36:	7841      	ldrb	r1, [r0, #1]
    6b38:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
		if (conn->packet_tx_head_offset) {
    6b3c:	b123      	cbz	r3, 6b48 <prepare_pdu_data_tx+0x84>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    6b3e:	5cd1      	ldrb	r1, [r2, r3]
    6b40:	2601      	movs	r6, #1
    6b42:	f366 0101 	bfi	r1, r6, #0, #2
    6b46:	54d1      	strb	r1, [r2, r3]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    6b48:	f894 6100 	ldrb.w	r6, [r4, #256]	; 0x100
    6b4c:	1af6      	subs	r6, r6, r3
    6b4e:	b2f6      	uxtb	r6, r6
    6b50:	7046      	strb	r6, [r0, #1]
		_pdu_data_tx->md = 0;
    6b52:	5cd1      	ldrb	r1, [r2, r3]
		if (_pdu_data_tx->len > max_tx_octets) {
    6b54:	2e1b      	cmp	r6, #27
		_pdu_data_tx->md = 0;
    6b56:	f36f 1104 	bfc	r1, #4, #1
    6b5a:	54d1      	strb	r1, [r2, r3]
		if (_pdu_data_tx->len > max_tx_octets) {
    6b5c:	d905      	bls.n	6b6a <prepare_pdu_data_tx+0xa6>
			_pdu_data_tx->len = max_tx_octets;
    6b5e:	211b      	movs	r1, #27
    6b60:	7041      	strb	r1, [r0, #1]
			_pdu_data_tx->md = 1;
    6b62:	5cd1      	ldrb	r1, [r2, r3]
    6b64:	f041 0110 	orr.w	r1, r1, #16
    6b68:	54d1      	strb	r1, [r2, r3]
		if (conn->pkt_tx_head->next) {
    6b6a:	6829      	ldr	r1, [r5, #0]
    6b6c:	b119      	cbz	r1, 6b76 <prepare_pdu_data_tx+0xb2>
			_pdu_data_tx->md = 1;
    6b6e:	5cd1      	ldrb	r1, [r2, r3]
    6b70:	f041 0110 	orr.w	r1, r1, #16
    6b74:	54d1      	strb	r1, [r2, r3]
		if (!conn->pkt_tx_ctrl &&
    6b76:	f1be 0f00 	cmp.w	lr, #0
    6b7a:	d1ca      	bne.n	6b12 <prepare_pdu_data_tx+0x4e>
    6b7c:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    6b80:	429d      	cmp	r5, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    6b82:	bf1c      	itt	ne
    6b84:	f8c4 50f4 	strne.w	r5, [r4, #244]	; 0xf4
    6b88:	f8c4 50f0 	strne.w	r5, [r4, #240]	; 0xf0
    6b8c:	e7c1      	b.n	6b12 <prepare_pdu_data_tx+0x4e>
	...

00006b90 <isr>:
{
    6b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b94:	b08f      	sub	sp, #60	; 0x3c
	trx_done = radio_is_done();
    6b96:	f003 fbc9 	bl	a32c <radio_is_done>
    6b9a:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    6b9c:	b336      	cbz	r6, 6bec <isr+0x5c>
		crc_ok = radio_crc_is_valid();
    6b9e:	f003 fbe5 	bl	a36c <radio_crc_is_valid>
    6ba2:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    6ba4:	f003 fc66 	bl	a474 <radio_filter_has_match>
    6ba8:	b2c4      	uxtb	r4, r0
		devmatch_id = radio_filter_match_get();
    6baa:	f003 fc6d 	bl	a488 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
    6bae:	f003 fe15 	bl	a7dc <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
    6bb2:	f003 fe01 	bl	a7b8 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
    6bb6:	f003 fc27 	bl	a408 <radio_rssi_is_ready>
    6bba:	b2c5      	uxtb	r5, r0
	radio_status_reset();
    6bbc:	f003 fba0 	bl	a300 <radio_status_reset>
	radio_tmr_status_reset();
    6bc0:	f003 fc68 	bl	a494 <radio_tmr_status_reset>
	radio_filter_status_reset();
    6bc4:	f003 fc4e 	bl	a464 <radio_filter_status_reset>
	radio_ar_status_reset();
    6bc8:	f003 fdfc 	bl	a7c4 <radio_ar_status_reset>
	radio_rssi_status_reset();
    6bcc:	f003 fc14 	bl	a3f8 <radio_rssi_status_reset>
	switch (_radio.state) {
    6bd0:	4a6e      	ldr	r2, [pc, #440]	; (6d8c <isr+0x1fc>)
    6bd2:	7d13      	ldrb	r3, [r2, #20]
    6bd4:	4693      	mov	fp, r2
    6bd6:	2b05      	cmp	r3, #5
    6bd8:	f201 8331 	bhi.w	823e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x23e>
    6bdc:	e8df f013 	tbh	[pc, r3, lsl #1]
    6be0:	00890061 	.word	0x00890061
    6be4:	0969000a 	.word	0x0969000a
    6be8:	09690969 	.word	0x09690969
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    6bec:	4635      	mov	r5, r6
    6bee:	4634      	mov	r4, r6
    6bf0:	4637      	mov	r7, r6
    6bf2:	e7e3      	b.n	6bbc <isr+0x2c>
	_radio.state = STATE_RX;
    6bf4:	2301      	movs	r3, #1
    6bf6:	f88b 3014 	strb.w	r3, [fp, #20]
	hcto = radio_tmr_tifs_base_get() + 600
    6bfa:	f003 fd4d 	bl	a698 <radio_tmr_tifs_base_get>
    6bfe:	4604      	mov	r4, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    6c00:	2096      	movs	r0, #150	; 0x96
    6c02:	f003 fc55 	bl	a4b0 <radio_tmr_tifs_set>
	switch (_radio.role) {
    6c06:	f89b 3013 	ldrb.w	r3, [fp, #19]
    6c0a:	3b01      	subs	r3, #1
    6c0c:	f204 341b 	addw	r4, r4, #795	; 0x31b
    6c10:	2b03      	cmp	r3, #3
    6c12:	d811      	bhi.n	6c38 <isr+0xa8>
    6c14:	e8df f003 	tbb	[pc, r3]
    6c18:	48482402 	.word	0x48482402
		radio_switch_complete_and_tx(0, 0, 0, 0);
    6c1c:	2300      	movs	r3, #0
    6c1e:	461a      	mov	r2, r3
    6c20:	4619      	mov	r1, r3
    6c22:	4618      	mov	r0, r3
    6c24:	f003 fbc0 	bl	a3a8 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    6c28:	f003 fbae 	bl	a388 <radio_pkt_scratch_get>
    6c2c:	f003 fb30 	bl	a290 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    6c30:	f003 fb72 	bl	a318 <radio_is_ready>
    6c34:	4605      	mov	r5, r0
    6c36:	b128      	cbz	r0, 6c44 <isr+0xb4>
	LL_ASSERT(!retval);
    6c38:	4040      	eors	r0, r0
    6c3a:	f380 8811 	msr	BASEPRI, r0
    6c3e:	f04f 0004 	mov.w	r0, #4
    6c42:	df02      	svc	2
		hcto += radio_rx_chain_delay_get(0, 0);
    6c44:	4601      	mov	r1, r0
    6c46:	f003 fb38 	bl	a2ba <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    6c4a:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    6c4c:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    6c4e:	4628      	mov	r0, r5
    6c50:	f003 fb2f 	bl	a2b2 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    6c54:	1a20      	subs	r0, r4, r0
    6c56:	f003 fcb5 	bl	a5c4 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    6c5a:	f003 fd05 	bl	a668 <radio_tmr_end_capture>
    6c5e:	e020      	b.n	6ca2 <isr+0x112>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    6c60:	2300      	movs	r3, #0
    6c62:	4619      	mov	r1, r3
    6c64:	461a      	mov	r2, r3
    6c66:	4618      	mov	r0, r3
    6c68:	f003 fb9e 	bl	a3a8 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    6c6c:	f89b 2d21 	ldrb.w	r2, [fp, #3361]	; 0xd21
    6c70:	f8db 3d1c 	ldr.w	r3, [fp, #3356]	; 0xd1c
		radio_pkt_rx_set(_radio.packet_rx
    6c74:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    6c78:	3008      	adds	r0, #8
    6c7a:	f003 fb09 	bl	a290 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    6c7e:	f003 fb4b 	bl	a318 <radio_is_ready>
    6c82:	4605      	mov	r5, r0
    6c84:	2800      	cmp	r0, #0
    6c86:	d1d7      	bne.n	6c38 <isr+0xa8>
		hcto += radio_rx_chain_delay_get(0, 0);
    6c88:	4601      	mov	r1, r0
    6c8a:	f003 fb16 	bl	a2ba <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    6c8e:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    6c90:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    6c92:	4628      	mov	r0, r5
    6c94:	f003 fb0d 	bl	a2b2 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    6c98:	1a20      	subs	r0, r4, r0
    6c9a:	f003 fc93 	bl	a5c4 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    6c9e:	f003 fb9b 	bl	a3d8 <radio_rssi_measure>
}
    6ca2:	b00f      	add	sp, #60	; 0x3c
    6ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(0, 0, 0, 0);
    6ca8:	2300      	movs	r3, #0
    6caa:	461a      	mov	r2, r3
    6cac:	4619      	mov	r1, r3
    6cae:	4618      	mov	r0, r3
    6cb0:	f003 fb7a 	bl	a3a8 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    6cb4:	f89b 2d21 	ldrb.w	r2, [fp, #3361]	; 0xd21
    6cb8:	f8db 3d1c 	ldr.w	r3, [fp, #3356]	; 0xd1c
		rx_packet_set(_radio.conn_curr,	(void *)
    6cbc:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    6cc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    6cc4:	3108      	adds	r1, #8
    6cc6:	f7fe fb8d 	bl	53e4 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    6cca:	f003 fb25 	bl	a318 <radio_is_ready>
    6cce:	4605      	mov	r5, r0
    6cd0:	2800      	cmp	r0, #0
    6cd2:	d1b1      	bne.n	6c38 <isr+0xa8>
		hcto += radio_rx_chain_delay_get(0, 0);
    6cd4:	4601      	mov	r1, r0
    6cd6:	f003 faf0 	bl	a2ba <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    6cda:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    6cdc:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    6cde:	4628      	mov	r0, r5
    6ce0:	f003 fae7 	bl	a2b2 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    6ce4:	1a20      	subs	r0, r4, r0
    6ce6:	f003 fc6d 	bl	a5c4 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    6cea:	2001      	movs	r0, #1
    6cec:	f7fe fd86 	bl	57fc <packet_tx_enqueue>
    6cf0:	e7d7      	b.n	6ca2 <isr+0x112>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    6cf2:	b92e      	cbnz	r6, 6d00 <isr+0x170>
		_radio.state = STATE_CLOSE;
    6cf4:	2303      	movs	r3, #3
    6cf6:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_disable();
    6cfa:	f003 faef 	bl	a2dc <radio_disable>
    6cfe:	e7d0      	b.n	6ca2 <isr+0x112>
	switch (_radio.role) {
    6d00:	f89b 3013 	ldrb.w	r3, [fp, #19]
    6d04:	3b01      	subs	r3, #1
    6d06:	2b03      	cmp	r3, #3
    6d08:	d896      	bhi.n	6c38 <isr+0xa8>
    6d0a:	e8df f013 	tbh	[pc, r3, lsl #1]
    6d0e:	0004      	.short	0x0004
    6d10:	05120209 	.word	0x05120209
    6d14:	0512      	.short	0x0512
		if (crc_ok) {
    6d16:	2f00      	cmp	r7, #0
    6d18:	d0ec      	beq.n	6cf4 <isr+0x164>
	pdu_adv = (void *)radio_pkt_scratch_get();
    6d1a:	f003 fb35 	bl	a388 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    6d1e:	f89b 922d 	ldrb.w	r9, [fp, #557]	; 0x22d
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    6d22:	7802      	ldrb	r2, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    6d24:	eb09 2909 	add.w	r9, r9, r9, lsl #8
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    6d28:	f002 030f 	and.w	r3, r2, #15
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    6d2c:	f109 092b 	add.w	r9, r9, #43	; 0x2b
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    6d30:	2b03      	cmp	r3, #3
	pdu_adv = (void *)radio_pkt_scratch_get();
    6d32:	4607      	mov	r7, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    6d34:	eb0b 0509 	add.w	r5, fp, r9
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    6d38:	d12a      	bne.n	6d90 <isr+0x200>
    6d3a:	7843      	ldrb	r3, [r0, #1]
    6d3c:	2b0c      	cmp	r3, #12
    6d3e:	d127      	bne.n	6d90 <isr+0x200>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    6d40:	f89b 302a 	ldrb.w	r3, [fp, #42]	; 0x2a
		(devmatch_ok)) &&
    6d44:	07d9      	lsls	r1, r3, #31
    6d46:	d500      	bpl.n	6d4a <isr+0x1ba>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    6d48:	b314      	cbz	r4, 6d90 <isr+0x200>
	return (adv->tx_addr == sr->rx_addr) &&
    6d4a:	f81b 3009 	ldrb.w	r3, [fp, r9]
    6d4e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    6d52:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    6d56:	d11b      	bne.n	6d90 <isr+0x200>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    6d58:	2206      	movs	r2, #6
    6d5a:	f107 0108 	add.w	r1, r7, #8
    6d5e:	1ca8      	adds	r0, r5, #2
    6d60:	f7f9 fc0b 	bl	57a <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    6d64:	b9a0      	cbnz	r0, 6d90 <isr+0x200>
		_radio.state = STATE_CLOSE;
    6d66:	2303      	movs	r3, #3
    6d68:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_switch_complete_and_disable();
    6d6c:	f003 fb26 	bl	a3bc <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    6d70:	f89b 0c13 	ldrb.w	r0, [fp, #3091]	; 0xc13
    6d74:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    6d78:	f600 2011 	addw	r0, r0, #2577	; 0xa11
    6d7c:	4458      	add	r0, fp
    6d7e:	f003 fa8d 	bl	a29c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    6d82:	f003 fac9 	bl	a318 <radio_is_ready>
    6d86:	2800      	cmp	r0, #0
    6d88:	d08b      	beq.n	6ca2 <isr+0x112>
    6d8a:	e755      	b.n	6c38 <isr+0xa8>
    6d8c:	200002c0 	.word	0x200002c0
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    6d90:	783b      	ldrb	r3, [r7, #0]
    6d92:	f003 030f 	and.w	r3, r3, #15
    6d96:	2b05      	cmp	r3, #5
    6d98:	d1ac      	bne.n	6cf4 <isr+0x164>
    6d9a:	787b      	ldrb	r3, [r7, #1]
    6d9c:	2b22      	cmp	r3, #34	; 0x22
    6d9e:	d1a9      	bne.n	6cf4 <isr+0x164>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    6da0:	f81b 3009 	ldrb.w	r3, [fp, r9]
    6da4:	f003 030f 	and.w	r3, r3, #15
    6da8:	2b01      	cmp	r3, #1
    6daa:	f040 8192 	bne.w	70d2 <isr+0x542>
		       isr_adv_ci_adva_check(adv, ci) &&
    6dae:	4639      	mov	r1, r7
    6db0:	4628      	mov	r0, r5
    6db2:	f7fe fa93 	bl	52dc <isr_adv_ci_adva_check>
    6db6:	b188      	cbz	r0, 6ddc <isr+0x24c>
	return (adv->rx_addr == ci->tx_addr) &&
    6db8:	783b      	ldrb	r3, [r7, #0]
    6dba:	f81b 2009 	ldrb.w	r2, [fp, r9]
    6dbe:	f3c3 1380 	ubfx	r3, r3, #6, #1
    6dc2:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    6dc6:	f040 8182 	bne.w	70ce <isr+0x53e>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    6dca:	2206      	movs	r2, #6
    6dcc:	1cb9      	adds	r1, r7, #2
    6dce:	f105 0008 	add.w	r0, r5, #8
    6dd2:	f7f9 fbd2 	bl	57a <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    6dd6:	fab0 f080 	clz	r0, r0
    6dda:	0940      	lsrs	r0, r0, #5
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    6ddc:	2800      	cmp	r0, #0
    6dde:	d089      	beq.n	6cf4 <isr+0x164>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    6de0:	f89b 3d62 	ldrb.w	r3, [fp, #3426]	; 0xd62
    6de4:	b12b      	cbz	r3, 6df2 <isr+0x262>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    6de6:	f89b 3d60 	ldrb.w	r3, [fp, #3424]	; 0xd60
    6dea:	f89b 2d61 	ldrb.w	r2, [fp, #3425]	; 0xd61
    6dee:	429a      	cmp	r2, r3
    6df0:	d180      	bne.n	6cf4 <isr+0x164>
    6df2:	f8db 3c18 	ldr.w	r3, [fp, #3096]	; 0xc18
    6df6:	2b00      	cmp	r3, #0
    6df8:	f43f af7c 	beq.w	6cf4 <isr+0x164>
			node_rx = packet_rx_reserve_get(4);
    6dfc:	2004      	movs	r0, #4
    6dfe:	f7fd fd3b 	bl	4878 <packet_rx_reserve_get>
		if (!node_rx) {
    6e02:	4605      	mov	r5, r0
    6e04:	2800      	cmp	r0, #0
    6e06:	f43f af75 	beq.w	6cf4 <isr+0x164>
		_radio.state = STATE_STOP;
    6e0a:	f04f 0a04 	mov.w	sl, #4
    6e0e:	f88b a014 	strb.w	sl, [fp, #20]
		radio_disable();
    6e12:	f003 fa63 	bl	a2dc <radio_disable>
		conn = _radio.advertiser.conn;
    6e16:	f8db 4c18 	ldr.w	r4, [fp, #3096]	; 0xc18
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    6e1a:	f8db 1cf0 	ldr.w	r1, [fp, #3312]	; 0xcf0
		_radio.advertiser.conn = NULL;
    6e1e:	f04f 0800 	mov.w	r8, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    6e22:	f44f 7282 	mov.w	r2, #260	; 0x104
    6e26:	4620      	mov	r0, r4
		_radio.advertiser.conn = NULL;
    6e28:	f8cb 8c18 	str.w	r8, [fp, #3096]	; 0xc18
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    6e2c:	f7fb fe83 	bl	2b36 <mem_index_get>
		memcpy(&conn->crc_init[0],
    6e30:	2203      	movs	r2, #3
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    6e32:	8420      	strh	r0, [r4, #32]
		memcpy(&conn->crc_init[0],
    6e34:	f107 0112 	add.w	r1, r7, #18
    6e38:	f104 0014 	add.w	r0, r4, #20
    6e3c:	f7f9 fbb2 	bl	5a4 <memcpy>
		memcpy(&conn->access_addr[0],
    6e40:	f104 0310 	add.w	r3, r4, #16
    6e44:	4618      	mov	r0, r3
		memcpy(&conn->data_chan_map[0],
    6e46:	f104 0617 	add.w	r6, r4, #23
		memcpy(&conn->access_addr[0],
    6e4a:	4652      	mov	r2, sl
    6e4c:	f107 010e 	add.w	r1, r7, #14
    6e50:	930a      	str	r3, [sp, #40]	; 0x28
    6e52:	f7f9 fba7 	bl	5a4 <memcpy>
		memcpy(&conn->data_chan_map[0],
    6e56:	2205      	movs	r2, #5
    6e58:	f107 011e 	add.w	r1, r7, #30
    6e5c:	4630      	mov	r0, r6
    6e5e:	f7f9 fba1 	bl	5a4 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    6e62:	2105      	movs	r1, #5
    6e64:	4630      	mov	r0, r6
    6e66:	f7fb ffcd 	bl	2e04 <util_ones_count_get>
		conn->data_chan_count =
    6e6a:	7f62      	ldrb	r2, [r4, #29]
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    6e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		conn->data_chan_count =
    6e6e:	f360 0205 	bfi	r2, r0, #0, #6
    6e72:	7762      	strb	r2, [r4, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    6e74:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    6e78:	f3c2 0204 	ubfx	r2, r2, #0, #5
    6e7c:	77a2      	strb	r2, [r4, #30]
			pdu_adv->connect_ind.interval;
    6e7e:	8b3a      	ldrh	r2, [r7, #24]
		conn->conn_interval =
    6e80:	84a2      	strh	r2, [r4, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    6e82:	f240 46e2 	movw	r6, #1250	; 0x4e2
    6e86:	4356      	muls	r6, r2
		conn->latency = pdu_adv->connect_ind.latency;
    6e88:	7ef9      	ldrb	r1, [r7, #27]
    6e8a:	7eba      	ldrb	r2, [r7, #26]
    6e8c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6e90:	84e2      	strh	r2, [r4, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    6e92:	4619      	mov	r1, r3
    6e94:	4652      	mov	r2, sl
    6e96:	f104 0054 	add.w	r0, r4, #84	; 0x54
    6e9a:	f7f9 fb83 	bl	5a4 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    6e9e:	8bbb      	ldrh	r3, [r7, #28]
    6ea0:	f242 7210 	movw	r2, #10000	; 0x2710
    6ea4:	fb02 6303 	mla	r3, r2, r3, r6
    6ea8:	3b01      	subs	r3, #1
    6eaa:	fbb3 f3f6 	udiv	r3, r3, r6
    6eae:	85e3      	strh	r3, [r4, #46]	; 0x2e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    6eb0:	4b93      	ldr	r3, [pc, #588]	; (7100 <isr+0x570>)
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    6eb2:	4639      	mov	r1, r7
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    6eb4:	4433      	add	r3, r6
    6eb6:	fbb3 f3f6 	udiv	r3, r3, r6
    6eba:	8663      	strh	r3, [r4, #50]	; 0x32
		node_rx->hdr.handle = conn->handle;
    6ebc:	8c23      	ldrh	r3, [r4, #32]
		radio_le_conn_cmplt->status = 0x00;
    6ebe:	f885 800b 	strb.w	r8, [r5, #11]
		radio_le_conn_cmplt->role = 0x01;
    6ec2:	f04f 0801 	mov.w	r8, #1
    6ec6:	f885 800c 	strb.w	r8, [r5, #12]
		node_rx->hdr.handle = conn->handle;
    6eca:	80eb      	strh	r3, [r5, #6]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    6ecc:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    6ed0:	2206      	movs	r2, #6
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    6ed2:	f3c3 1380 	ubfx	r3, r3, #6, #1
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    6ed6:	712a      	strb	r2, [r5, #4]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    6ed8:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    6eda:	f105 000e 	add.w	r0, r5, #14
    6ede:	f7f9 fb61 	bl	5a4 <memcpy>
			pdu_adv->connect_ind.interval;
    6ee2:	8b3b      	ldrh	r3, [r7, #24]
		radio_le_conn_cmplt->interval =
    6ee4:	82ab      	strh	r3, [r5, #20]
			pdu_adv->connect_ind.latency;
    6ee6:	8b7b      	ldrh	r3, [r7, #26]
		radio_le_conn_cmplt->latency =
    6ee8:	82eb      	strh	r3, [r5, #22]
			pdu_adv->connect_ind.timeout;
    6eea:	8bbb      	ldrh	r3, [r7, #28]
		radio_le_conn_cmplt->timeout =
    6eec:	832b      	strh	r3, [r5, #24]
			pdu_adv->connect_ind.sca;
    6eee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    6ef2:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    6ef6:	76ab      	strb	r3, [r5, #26]
		rx_fc_lock(conn->handle);
    6ef8:	8c20      	ldrh	r0, [r4, #32]
    6efa:	f7fe fa13 	bl	5324 <rx_fc_lock>
		packet_rx_enqueue();
    6efe:	f7fe fb35 	bl	556c <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    6f02:	2003      	movs	r0, #3
    6f04:	f7fd fcb8 	bl	4878 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    6f08:	2800      	cmp	r0, #0
    6f0a:	f43f ae95 	beq.w	6c38 <isr+0xa8>
			node_rx->hdr.handle = conn->handle;
    6f0e:	8c23      	ldrh	r3, [r4, #32]
    6f10:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    6f12:	230a      	movs	r3, #10
    6f14:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    6f16:	783b      	ldrb	r3, [r7, #0]
    6f18:	f013 0320 	ands.w	r3, r3, #32
    6f1c:	f000 80e7 	beq.w	70ee <isr+0x55e>
					((u16_t)conn->access_addr[1] << 8) |
    6f20:	7c62      	ldrb	r2, [r4, #17]
					conn->access_addr[0];
    6f22:	7c23      	ldrb	r3, [r4, #16]
					((u16_t)conn->access_addr[3] << 8) |
    6f24:	7ce1      	ldrb	r1, [r4, #19]
				u16_t aa_ls =
    6f26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    6f2a:	7ca2      	ldrb	r2, [r4, #18]
				u16_t aa_ms =
    6f2c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    6f30:	7f61      	ldrb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    6f32:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    6f34:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    6f38:	7761      	strb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    6f3a:	83e3      	strh	r3, [r4, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    6f3c:	f880 800b 	strb.w	r8, [r0, #11]
			packet_rx_enqueue();
    6f40:	f7fe fb14 	bl	556c <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    6f44:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    6f48:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    6f4c:	496d      	ldr	r1, [pc, #436]	; (7104 <isr+0x574>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    6f4e:	0952      	lsrs	r2, r2, #5
    6f50:	f362 0384 	bfi	r3, r2, #2, #3
    6f54:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    6f58:	f89b 3d08 	ldrb.w	r3, [fp, #3336]	; 0xd08
			   gc_lookup_ppm[conn->slave.sca]) *
    6f5c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    6f60:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    6f64:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    6f66:	4373      	muls	r3, r6
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    6f68:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    6f6c:	4a66      	ldr	r2, [pc, #408]	; (7108 <isr+0x578>)
    6f6e:	f203 233f 	addw	r3, r3, #575	; 0x23f
    6f72:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    6f76:	63e3      	str	r3, [r4, #60]	; 0x3c
			(conn_interval_us >> 1) - RADIO_TIFS;
    6f78:	0873      	lsrs	r3, r6, #1
    6f7a:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    6f7c:	6423      	str	r3, [r4, #64]	; 0x40
			pdu_adv->connect_ind.win_size * 1250;
    6f7e:	7d7b      	ldrb	r3, [r7, #21]
    6f80:	f240 4ae2 	movw	sl, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    6f84:	f04f 0800 	mov.w	r8, #0
			pdu_adv->connect_ind.win_size * 1250;
    6f88:	fb0a f303 	mul.w	r3, sl, r3
		conn->slave.window_size_event_us =
    6f8c:	6523      	str	r3, [r4, #80]	; 0x50
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    6f8e:	4641      	mov	r1, r8
		conn->slave.window_size_prepare_us = 0;
    6f90:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    6f94:	4640      	mov	r0, r8
    6f96:	f003 f98e 	bl	a2b6 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    6f9a:	495c      	ldr	r1, [pc, #368]	; (710c <isr+0x57c>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    6f9c:	900a      	str	r0, [sp, #40]	; 0x28
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    6f9e:	f200 4052 	addw	r0, r0, #1106	; 0x452
    6fa2:	a355      	add	r3, pc, #340	; (adr r3, 70f8 <isr+0x568>)
    6fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
    6fa8:	fba0 0101 	umull	r0, r1, r0, r1
    6fac:	f7f9 f932 	bl	214 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    6fb0:	f8db 5d64 	ldr.w	r5, [fp, #3428]	; 0xd64
    6fb4:	6065      	str	r5, [r4, #4]
		conn->hdr.ticks_xtal_to_start =
    6fb6:	2327      	movs	r3, #39	; 0x27
		ticks_slot_offset =
    6fb8:	429d      	cmp	r5, r3
    6fba:	bf38      	it	cc
    6fbc:	461d      	movcc	r5, r3
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    6fbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn->hdr.ticks_xtal_to_start =
    6fc2:	6023      	str	r3, [r4, #0]
		conn_interval_us -=
    6fc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->hdr.ticks_slot =
    6fc6:	60e0      	str	r0, [r4, #12]
		conn->hdr.ticks_preempt_to_start =
    6fc8:	f8c4 8008 	str.w	r8, [r4, #8]
		conn_interval_us -=
    6fcc:	1af6      	subs	r6, r6, r3
		conn_offset_us = radio_tmr_end_get();
    6fce:	f003 fb5d 	bl	a68c <radio_tmr_end_get>
    6fd2:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    6fd4:	8af8      	ldrh	r0, [r7, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    6fd6:	4641      	mov	r1, r8
		conn_offset_us +=
    6fd8:	fb00 aa0a 	mla	sl, r0, sl, sl
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    6fdc:	4640      	mov	r0, r8
    6fde:	f003 f968 	bl	a2b2 <radio_tx_chain_delay_get>
    6fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6fe4:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    6fe8:	449a      	add	sl, r3
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    6fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6fec:	ebaa 0a00 	sub.w	sl, sl, r0
    6ff0:	ebaa 0303 	sub.w	r3, sl, r3
    6ff4:	930a      	str	r3, [sp, #40]	; 0x28
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6ff6:	f240 532d 	movw	r3, #1325	; 0x52d
    6ffa:	9300      	str	r3, [sp, #0]
    6ffc:	2205      	movs	r2, #5
    6ffe:	4b44      	ldr	r3, [pc, #272]	; (7110 <isr+0x580>)
    7000:	f8df a108 	ldr.w	sl, [pc, #264]	; 710c <isr+0x57c>
    7004:	4641      	mov	r1, r8
    7006:	4640      	mov	r0, r8
    7008:	f7fc fc64 	bl	38d4 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    700c:	f240 512e 	movw	r1, #1326	; 0x52e
    7010:	f7fe fd4e 	bl	5ab0 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    7014:	f81b 3009 	ldrb.w	r3, [fp, r9]
    7018:	f003 030f 	and.w	r3, r3, #15
    701c:	2b01      	cmp	r3, #1
    701e:	d107      	bne.n	7030 <isr+0x4a0>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7020:	f8cd 8000 	str.w	r8, [sp]
    7024:	4643      	mov	r3, r8
    7026:	2203      	movs	r2, #3
    7028:	4641      	mov	r1, r8
    702a:	4640      	mov	r0, r8
    702c:	f7fc fc52 	bl	38d4 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    7030:	fba6 670a 	umull	r6, r7, r6, sl
    7034:	a330      	add	r3, pc, #192	; (adr r3, 70f8 <isr+0x568>)
    7036:	e9d3 2300 	ldrd	r2, r3, [r3]
    703a:	4630      	mov	r0, r6
    703c:	4639      	mov	r1, r7
    703e:	f7f9 f8e9 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7042:	f8db 3008 	ldr.w	r3, [fp, #8]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    7046:	4a33      	ldr	r2, [pc, #204]	; (7114 <isr+0x584>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7048:	eba3 0b05 	sub.w	fp, r3, r5
    704c:	f894 3020 	ldrb.w	r3, [r4, #32]
    7050:	9406      	str	r4, [sp, #24]
    7052:	3307      	adds	r3, #7
    7054:	b2db      	uxtb	r3, r3
    7056:	930b      	str	r3, [sp, #44]	; 0x2c
    7058:	f240 5345 	movw	r3, #1349	; 0x545
    705c:	9308      	str	r3, [sp, #32]
    705e:	4b2e      	ldr	r3, [pc, #184]	; (7118 <isr+0x588>)
    7060:	9307      	str	r3, [sp, #28]
    7062:	4b2e      	ldr	r3, [pc, #184]	; (711c <isr+0x58c>)
    7064:	9305      	str	r3, [sp, #20]
    7066:	68e3      	ldr	r3, [r4, #12]
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    7068:	4680      	mov	r8, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    706a:	441d      	add	r5, r3
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    706c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7070:	2307      	movs	r3, #7
    7072:	2100      	movs	r1, #0
    7074:	4343      	muls	r3, r0
    7076:	fb02 3301 	mla	r3, r2, r1, r3
    707a:	fba0 0102 	umull	r0, r1, r0, r2
    707e:	1a30      	subs	r0, r6, r0
    7080:	4419      	add	r1, r3
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7082:	f04f 0400 	mov.w	r4, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    7086:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    708a:	f04f 0300 	mov.w	r3, #0
    708e:	eb67 0101 	sbc.w	r1, r7, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7092:	9504      	str	r5, [sp, #16]
    7094:	9403      	str	r4, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    7096:	f7f9 f8bd 	bl	214 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    709a:	990a      	ldr	r1, [sp, #40]	; 0x28
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    709c:	9002      	str	r0, [sp, #8]
    709e:	f028 437f 	bic.w	r3, r8, #4278190080	; 0xff000000
    70a2:	9301      	str	r3, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    70a4:	fba1 010a 	umull	r0, r1, r1, sl
    70a8:	a313      	add	r3, pc, #76	; (adr r3, 70f8 <isr+0x568>)
    70aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    70ae:	f7f9 f8b1 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    70b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    70b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    70b8:	9000      	str	r0, [sp, #0]
    70ba:	465b      	mov	r3, fp
    70bc:	4621      	mov	r1, r4
		ticker_status =
    70be:	4608      	mov	r0, r1
    70c0:	f7fc fb6a 	bl	3798 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    70c4:	f030 0302 	bics.w	r3, r0, #2
    70c8:	f47f adb6 	bne.w	6c38 <isr+0xa8>
    70cc:	e5e9      	b.n	6ca2 <isr+0x112>
	return (adv->rx_addr == ci->tx_addr) &&
    70ce:	2000      	movs	r0, #0
    70d0:	e684      	b.n	6ddc <isr+0x24c>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    70d2:	f89b 302a 	ldrb.w	r3, [fp, #42]	; 0x2a
		(devmatch_ok)) &&
    70d6:	079b      	lsls	r3, r3, #30
    70d8:	d500      	bpl.n	70dc <isr+0x54c>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    70da:	b134      	cbz	r4, 70ea <isr+0x55a>
	       isr_adv_ci_adva_check(adv, ci);
    70dc:	4639      	mov	r1, r7
    70de:	4628      	mov	r0, r5
    70e0:	f7fe f8fc 	bl	52dc <isr_adv_ci_adva_check>
		(devmatch_ok)) &&
    70e4:	f000 0001 	and.w	r0, r0, #1
    70e8:	e678      	b.n	6ddc <isr+0x24c>
    70ea:	4620      	mov	r0, r4
    70ec:	e7fa      	b.n	70e4 <isr+0x554>
				le_chan_sel_algo->chan_sel_algo = 0x00;
    70ee:	72c3      	strb	r3, [r0, #11]
    70f0:	e726      	b.n	6f40 <isr+0x3b0>
    70f2:	bf00      	nop
    70f4:	f3af 8000 	nop.w
    70f8:	1afd498d 	.word	0x1afd498d
    70fc:	00000007 	.word	0x00000007
    7100:	026259ff 	.word	0x026259ff
    7104:	0000c6f8 	.word	0x0000c6f8
    7108:	000f4240 	.word	0x000f4240
    710c:	3b9aca00 	.word	0x3b9aca00
    7110:	00005ab1 	.word	0x00005ab1
    7114:	1afd498d 	.word	0x1afd498d
    7118:	00005ae1 	.word	0x00005ae1
    711c:	0000690d 	.word	0x0000690d
		if (crc_ok &&
    7120:	2f00      	cmp	r7, #0
    7122:	f000 8255 	beq.w	75d0 <isr+0xa40>
	return ((_radio.scanner.filter_policy & 0x01) == 0) ||
    7126:	f89b 3c2d 	ldrb.w	r3, [fp, #3117]	; 0xc2d
    712a:	06df      	lsls	r7, r3, #27
    712c:	d502      	bpl.n	7134 <isr+0x5a4>
		if (crc_ok &&
    712e:	2c00      	cmp	r4, #0
    7130:	f000 824e 	beq.w	75d0 <isr+0xa40>
	bool dir_report = false;
    7134:	2300      	movs	r3, #0
    7136:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    713a:	f89b 2d21 	ldrb.w	r2, [fp, #3361]	; 0xd21
    713e:	f8db 3d1c 	ldr.w	r3, [fp, #3356]	; 0xd1c
    7142:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
	if(pdu_adv_rx->type == 0x07){			//PDU_ADV_TYPE_EXT_IND
    7146:	7a3b      	ldrb	r3, [r7, #8]
    7148:	f003 030f 	and.w	r3, r3, #15
    714c:	2b07      	cmp	r3, #7
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    714e:	f107 0408 	add.w	r4, r7, #8
	if(pdu_adv_rx->type == 0x07){			//PDU_ADV_TYPE_EXT_IND
    7152:	d17e      	bne.n	7252 <isr+0x6c2>
		if(h->adv_addr){
    7154:	7afb      	ldrb	r3, [r7, #11]
    7156:	f8df 83b4 	ldr.w	r8, [pc, #948]	; 750c <isr+0x97c>
    715a:	07de      	lsls	r6, r3, #31
			ptr += BDADDR_SIZE;
    715c:	bf4c      	ite	mi
    715e:	f107 0612 	addmi.w	r6, r7, #18
		ptr = (u8_t *)h + sizeof(*h);
    7162:	f107 060c 	addpl.w	r6, r7, #12
		if(h->tgt_addr){
    7166:	0798      	lsls	r0, r3, #30
			ptr += BDADDR_SIZE;
    7168:	bf48      	it	mi
    716a:	3606      	addmi	r6, #6
		if(h->adi){
    716c:	f013 0f08 	tst.w	r3, #8
			sid = (u8_t)adi_ptr->sid;
    7170:	bf1e      	ittt	ne
    7172:	7873      	ldrbne	r3, [r6, #1]
    7174:	f3c3 1303 	ubfxne	r3, r3, #4, #4
    7178:	f888 3000 	strbne.w	r3, [r8]
		if(sid == 0x04){
    717c:	f898 3000 	ldrb.w	r3, [r8]
			ptr += sizeof(*adi_ptr);
    7180:	bf18      	it	ne
    7182:	3602      	addne	r6, #2
		if(sid == 0x04){
    7184:	2b04      	cmp	r3, #4
    7186:	d11d      	bne.n	71c4 <isr+0x634>
			stop_time_int = k_cycle_get_32();
    7188:	f7fa ff38 	bl	1ffc <_timer_cycle_get_32>
    718c:	4bd2      	ldr	r3, [pc, #840]	; (74d8 <isr+0x948>)
    718e:	6018      	str	r0, [r3, #0]
			event_time_int = (stop_time_int - start_time_int);
    7190:	4bd2      	ldr	r3, [pc, #840]	; (74dc <isr+0x94c>)
    7192:	681b      	ldr	r3, [r3, #0]
    7194:	eba0 0e03 	sub.w	lr, r0, r3
    7198:	4bd1      	ldr	r3, [pc, #836]	; (74e0 <isr+0x950>)
    719a:	f8c3 e000 	str.w	lr, [r3]
			Time_difference_int = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_int))/1000;
    719e:	4bd1      	ldr	r3, [pc, #836]	; (74e4 <isr+0x954>)
    71a0:	681a      	ldr	r2, [r3, #0]
    71a2:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
    71a6:	fb82 2309 	smull	r2, r3, r2, r9
    71aa:	fba2 010e 	umull	r0, r1, r2, lr
    71ae:	fb0e 1103 	mla	r1, lr, r3, r1
    71b2:	4bcd      	ldr	r3, [pc, #820]	; (74e8 <isr+0x958>)
    71b4:	681a      	ldr	r2, [r3, #0]
    71b6:	17d3      	asrs	r3, r2, #31
    71b8:	f7f9 f82c 	bl	214 <__aeabi_uldivmod>
    71bc:	4bcb      	ldr	r3, [pc, #812]	; (74ec <isr+0x95c>)
    71be:	fbb0 f0f9 	udiv	r0, r0, r9
    71c2:	6018      	str	r0, [r3, #0]
		if((h->aux_ptr && !aux_scan && (sid == 0x02)) || 
    71c4:	7afb      	ldrb	r3, [r7, #11]
    71c6:	f013 0310 	ands.w	r3, r3, #16
    71ca:	d006      	beq.n	71da <isr+0x64a>
    71cc:	4ac8      	ldr	r2, [pc, #800]	; (74f0 <isr+0x960>)
    71ce:	7812      	ldrb	r2, [r2, #0]
    71d0:	b91a      	cbnz	r2, 71da <isr+0x64a>
    71d2:	f898 2000 	ldrb.w	r2, [r8]
    71d6:	2a02      	cmp	r2, #2
    71d8:	d005      	beq.n	71e6 <isr+0x656>
    71da:	f898 2000 	ldrb.w	r2, [r8]
    71de:	2a04      	cmp	r2, #4
    71e0:	d137      	bne.n	7252 <isr+0x6c2>
			((sid == 0x04) && h->aux_ptr)){
    71e2:	2b00      	cmp	r3, #0
    71e4:	d035      	beq.n	7252 <isr+0x6c2>
			aux_scan = 0x01;
    71e6:	4bc2      	ldr	r3, [pc, #776]	; (74f0 <isr+0x960>)
    71e8:	2201      	movs	r2, #1
    71ea:	701a      	strb	r2, [r3, #0]
			_radio.ext_scanner.chan_index = ap->chan_idx;
    71ec:	7833      	ldrb	r3, [r6, #0]
    71ee:	f3c3 0305 	ubfx	r3, r3, #0, #6
    71f2:	f88b 3c90 	strb.w	r3, [fp, #3216]	; 0xc90
			_radio.ext_scanner.chan_off	= ap->offs;
    71f6:	78b3      	ldrb	r3, [r6, #2]
    71f8:	7872      	ldrb	r2, [r6, #1]
    71fa:	f003 031f 	and.w	r3, r3, #31
    71fe:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    7202:	4bbc      	ldr	r3, [pc, #752]	; (74f4 <isr+0x964>)
    7204:	b290      	uxth	r0, r2
    7206:	2100      	movs	r1, #0
    7208:	e9c3 0100 	strd	r0, r1, [r3]
			_radio.ext_scanner.chan_off_debug = ap->offs;
    720c:	e9c3 0102 	strd	r0, r1, [r3, #8]
			_radio.ext_scanner.off_unit	= ap->offs_units;
    7210:	7831      	ldrb	r1, [r6, #0]
    7212:	f3c1 11c0 	ubfx	r1, r1, #7, #1
			if(_radio.ext_scanner.off_unit == 0 ){
    7216:	f011 0fff 	tst.w	r1, #255	; 0xff
			_radio.ext_scanner.off_unit	= ap->offs_units;
    721a:	f88b 1cb4 	strb.w	r1, [fp, #3252]	; 0xcb4
    721e:	4619      	mov	r1, r3
				_radio.ext_scanner.chan_off *= 30;
    7220:	bf0c      	ite	eq
    7222:	231e      	moveq	r3, #30
				_radio.ext_scanner.chan_off *= 300;
    7224:	f44f 7396 	movne.w	r3, #300	; 0x12c
    7228:	fba2 2303 	umull	r2, r3, r2, r3
    722c:	e9c1 2300 	strd	r2, r3, [r1]
			_radio.ext_scanner.chan_off_calculation = _radio.ext_scanner.chan_off;
    7230:	e9d1 0100 	ldrd	r0, r1, [r1]
    7234:	4bb0      	ldr	r3, [pc, #704]	; (74f8 <isr+0x968>)
    7236:	e9c3 0100 	strd	r0, r1, [r3]
			start_time_ticker = k_cycle_get_32();
    723a:	f7fa fedf 	bl	1ffc <_timer_cycle_get_32>
    723e:	4baf      	ldr	r3, [pc, #700]	; (74fc <isr+0x96c>)
    7240:	6018      	str	r0, [r3, #0]
			start_time_int = k_cycle_get_32();
    7242:	f7fa fedb 	bl	1ffc <_timer_cycle_get_32>
    7246:	4ba5      	ldr	r3, [pc, #660]	; (74dc <isr+0x94c>)
    7248:	6018      	str	r0, [r3, #0]
		_radio.ext_scanner.ticks_now = ticker_ticks_now_get();
    724a:	f7fc fc13 	bl	3a74 <ticker_ticks_now_get>
    724e:	f8cb 0cec 	str.w	r0, [fp, #3308]	; 0xcec
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    7252:	f8db 3c54 	ldr.w	r3, [fp, #3156]	; 0xc54
    7256:	2b00      	cmp	r3, #0
    7258:	f000 81a6 	beq.w	75a8 <isr+0xa18>
    725c:	f89b 3d62 	ldrb.w	r3, [fp, #3426]	; 0xd62
    7260:	b133      	cbz	r3, 7270 <isr+0x6e0>
				      (_radio.fc_req == _radio.fc_ack)) &&
    7262:	f89b 3d60 	ldrb.w	r3, [fp, #3424]	; 0xd60
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    7266:	f89b 2d61 	ldrb.w	r2, [fp, #3425]	; 0xd61
    726a:	429a      	cmp	r2, r3
    726c:	f040 819c 	bne.w	75a8 <isr+0xa18>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    7270:	f89b 3c2d 	ldrb.w	r3, [fp, #3117]	; 0xc2d
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    7274:	06d9      	lsls	r1, r3, #27
    7276:	f140 8187 	bpl.w	7588 <isr+0x9f8>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    727a:	7a3b      	ldrb	r3, [r7, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    727c:	f013 030f 	ands.w	r3, r3, #15
    7280:	f040 81b3 	bne.w	75ea <isr+0xa5a>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    7284:	f003 fa02 	bl	a68c <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    7288:	f8db 3c28 	ldr.w	r3, [fp, #3112]	; 0xc28
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    728c:	f200 2616 	addw	r6, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    7290:	489b      	ldr	r0, [pc, #620]	; (7500 <isr+0x970>)
    7292:	2207      	movs	r2, #7
    7294:	fba3 0100 	umull	r0, r1, r3, r0
    7298:	fb02 1103 	mla	r1, r2, r3, r1
    729c:	a38c      	add	r3, pc, #560	; (adr r3, 74d0 <isr+0x940>)
    729e:	e9d3 2300 	ldrd	r2, r3, [r3]
    72a2:	f7f8 ffb7 	bl	214 <__aeabi_uldivmod>
    72a6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    72aa:	4286      	cmp	r6, r0
    72ac:	f080 817c 	bcs.w	75a8 <isr+0xa18>
			node_rx = packet_rx_reserve_get(4);
    72b0:	2004      	movs	r0, #4
    72b2:	f7fd fae1 	bl	4878 <packet_rx_reserve_get>
		if (node_rx == 0) {
    72b6:	4682      	mov	sl, r0
    72b8:	2800      	cmp	r0, #0
    72ba:	f000 8189 	beq.w	75d0 <isr+0xa40>
		_radio.state = STATE_STOP;
    72be:	2604      	movs	r6, #4
		_radio.scanner.conn = NULL;
    72c0:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    72c2:	f8db 4c54 	ldr.w	r4, [fp, #3156]	; 0xc54
		_radio.state = STATE_STOP;
    72c6:	f88b 6014 	strb.w	r6, [fp, #20]
		_radio.scanner.conn = NULL;
    72ca:	f8cb 3c54 	str.w	r3, [fp, #3156]	; 0xc54
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    72ce:	f003 f85b 	bl	a388 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    72d2:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    72d4:	498b      	ldr	r1, [pc, #556]	; (7504 <isr+0x974>)
			pdu_adv_tx->chan_sel = 1;
    72d6:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    72da:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    72de:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    72e0:	7a3a      	ldrb	r2, [r7, #8]
    72e2:	b2db      	uxtb	r3, r3
    72e4:	f3c2 1280 	ubfx	r2, r2, #6, #1
    72e8:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    72ec:	2222      	movs	r2, #34	; 0x22
    72ee:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    72f0:	f89b 2c2d 	ldrb.w	r2, [fp, #3117]	; 0xc2d
    72f4:	09d2      	lsrs	r2, r2, #7
    72f6:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    72fa:	4605      	mov	r5, r0
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    72fc:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    72fe:	f800 3b02 	strb.w	r3, [r0], #2
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    7302:	f105 0908 	add.w	r9, r5, #8
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    7306:	f7f9 f94d 	bl	5a4 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    730a:	2206      	movs	r2, #6
    730c:	f107 010a 	add.w	r1, r7, #10
    7310:	4648      	mov	r0, r9
    7312:	f7f9 f947 	bl	5a4 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    7316:	4632      	mov	r2, r6
    7318:	f104 0110 	add.w	r1, r4, #16
    731c:	f105 000e 	add.w	r0, r5, #14
    7320:	f7f9 f940 	bl	5a4 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    7324:	2203      	movs	r2, #3
    7326:	f104 0114 	add.w	r1, r4, #20
    732a:	f105 0012 	add.w	r0, r5, #18
    732e:	f7f9 f939 	bl	5a4 <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    7332:	2301      	movs	r3, #1
    7334:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    7336:	f8bb 3c48 	ldrh.w	r3, [fp, #3144]	; 0xc48
		conn_interval_us =
    733a:	f240 46e2 	movw	r6, #1250	; 0x4e2
    733e:	435e      	muls	r6, r3
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    7340:	f003 f9a4 	bl	a68c <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    7344:	f8db 300c 	ldr.w	r3, [fp, #12]
		if (_radio.scanner.win_offset_us == 0) {
    7348:	f8db 8c58 	ldr.w	r8, [fp, #3160]	; 0xc58
		if (!_radio.remainder_anchor ||
    734c:	2b00      	cmp	r3, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    734e:	bfcc      	ite	gt
    7350:	f500 60db 	addgt.w	r0, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    7354:	f200 60ba 	addwle	r0, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    7358:	f1b8 0f00 	cmp.w	r8, #0
    735c:	f040 814f 	bne.w	75fe <isr+0xa6e>
			pdu_adv_tx->connect_ind.win_offset = 0;
    7360:	f885 8016 	strb.w	r8, [r5, #22]
    7364:	f885 8017 	strb.w	r8, [r5, #23]
    7368:	4680      	mov	r8, r0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    736a:	2100      	movs	r1, #0
    736c:	4608      	mov	r0, r1
    736e:	f002 ff9b 	bl	a2a8 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    7372:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    7374:	eba8 0800 	sub.w	r8, r8, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    7378:	4608      	mov	r0, r1
    737a:	f002 ff9a 	bl	a2b2 <radio_tx_chain_delay_get>
    737e:	eba8 0000 	sub.w	r0, r8, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    7382:	f100 031e 	add.w	r3, r0, #30
    7386:	930a      	str	r3, [sp, #40]	; 0x28
		pdu_adv_tx->connect_ind.interval =
    7388:	f8bb 3c48 	ldrh.w	r3, [fp, #3144]	; 0xc48
    738c:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    738e:	f8bb 3c4a 	ldrh.w	r3, [fp, #3146]	; 0xc4a
    7392:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    7394:	f8bb 3c4c 	ldrh.w	r3, [fp, #3148]	; 0xc4c
    7398:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    739a:	f104 0117 	add.w	r1, r4, #23
    739e:	2205      	movs	r2, #5
    73a0:	f105 001e 	add.w	r0, r5, #30
    73a4:	f7f9 f8fe 	bl	5a4 <memcpy>
		pdu_adv_tx->connect_ind.hop =
    73a8:	7fa2      	ldrb	r2, [r4, #30]
    73aa:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    73ae:	f362 0304 	bfi	r3, r2, #0, #5
    73b2:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    73b6:	f89b 2d08 	ldrb.w	r2, [fp, #3336]	; 0xd08
    73ba:	f362 1347 	bfi	r3, r2, #5, #3
    73be:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    73c2:	f002 fffb 	bl	a3bc <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    73c6:	4628      	mov	r0, r5
    73c8:	f002 ff68 	bl	a29c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    73cc:	f002 ffa4 	bl	a318 <radio_is_ready>
    73d0:	4680      	mov	r8, r0
    73d2:	2800      	cmp	r0, #0
    73d4:	f47f ac30 	bne.w	6c38 <isr+0xa8>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    73d8:	f44f 7282 	mov.w	r2, #260	; 0x104
    73dc:	f8db 1cf0 	ldr.w	r1, [fp, #3312]	; 0xcf0
    73e0:	4620      	mov	r0, r4
    73e2:	f7fb fba8 	bl	2b36 <mem_index_get>
    73e6:	8420      	strh	r0, [r4, #32]
		radio_le_conn_cmplt->status = 0x00;
    73e8:	f88a 800b 	strb.w	r8, [sl, #11]
		radio_le_conn_cmplt->role = 0x00;
    73ec:	f88a 800c 	strb.w	r8, [sl, #12]
				pdu_adv_tx->rx_addr;
    73f0:	782b      	ldrb	r3, [r5, #0]
		node_rx->hdr.handle = conn->handle;
    73f2:	f8aa 0006 	strh.w	r0, [sl, #6]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    73f6:	2206      	movs	r2, #6
				pdu_adv_tx->rx_addr;
    73f8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    73fc:	f88a 2004 	strb.w	r2, [sl, #4]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    7400:	4649      	mov	r1, r9
			radio_le_conn_cmplt->peer_addr_type =
    7402:	f88a 300d 	strb.w	r3, [sl, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    7406:	f10a 000e 	add.w	r0, sl, #14
    740a:	f7f9 f8cb 	bl	5a4 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    740e:	f8bb 3c48 	ldrh.w	r3, [fp, #3144]	; 0xc48
    7412:	f8aa 3014 	strh.w	r3, [sl, #20]
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    7416:	f8bb 3c4a 	ldrh.w	r3, [fp, #3146]	; 0xc4a
    741a:	f8aa 3016 	strh.w	r3, [sl, #22]
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    741e:	f8bb 3c4c 	ldrh.w	r3, [fp, #3148]	; 0xc4c
    7422:	f8aa 3018 	strh.w	r3, [sl, #24]
			pdu_adv_tx->connect_ind.sca;
    7426:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    742a:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    742e:	f88a 301a 	strb.w	r3, [sl, #26]
		rx_fc_lock(conn->handle);
    7432:	8c20      	ldrh	r0, [r4, #32]
    7434:	f7fd ff76 	bl	5324 <rx_fc_lock>
		packet_rx_enqueue();
    7438:	f7fe f898 	bl	556c <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    743c:	2003      	movs	r0, #3
    743e:	f7fd fa1b 	bl	4878 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    7442:	2800      	cmp	r0, #0
    7444:	f43f abf8 	beq.w	6c38 <isr+0xa8>
			node_rx->hdr.handle = conn->handle;
    7448:	8c23      	ldrh	r3, [r4, #32]
    744a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    744c:	230a      	movs	r3, #10
    744e:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    7450:	7a3b      	ldrb	r3, [r7, #8]
    7452:	f013 0320 	ands.w	r3, r3, #32
    7456:	d00e      	beq.n	7476 <isr+0x8e6>
					((u16_t)conn->access_addr[1] << 8) |
    7458:	7c62      	ldrb	r2, [r4, #17]
					conn->access_addr[0];
    745a:	7c23      	ldrb	r3, [r4, #16]
					((u16_t)conn->access_addr[3] << 8) |
    745c:	7ce1      	ldrb	r1, [r4, #19]
				u16_t aa_ls =
    745e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    7462:	7ca2      	ldrb	r2, [r4, #18]
				u16_t aa_ms =
    7464:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    7468:	7f61      	ldrb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    746a:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    746c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    7470:	83e3      	strh	r3, [r4, #30]
				conn->data_chan_sel = 1;
    7472:	7761      	strb	r1, [r4, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    7474:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    7476:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    7478:	f7fe f878 	bl	556c <packet_rx_enqueue>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    747c:	f8db 3d64 	ldr.w	r3, [fp, #3428]	; 0xd64
    7480:	6063      	str	r3, [r4, #4]
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    7482:	2b27      	cmp	r3, #39	; 0x27
    7484:	bf38      	it	cc
    7486:	2327      	movcc	r3, #39	; 0x27
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    7488:	2227      	movs	r2, #39	; 0x27
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    748a:	2500      	movs	r5, #0
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    748c:	6022      	str	r2, [r4, #0]
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    748e:	4698      	mov	r8, r3
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    7490:	f8db 2c50 	ldr.w	r2, [fp, #3152]	; 0xc50
    7494:	60e2      	str	r2, [r4, #12]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7496:	f44f 63ef 	mov.w	r3, #1912	; 0x778
    749a:	2206      	movs	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    749c:	60a5      	str	r5, [r4, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    749e:	4629      	mov	r1, r5
    74a0:	9300      	str	r3, [sp, #0]
    74a2:	4628      	mov	r0, r5
    74a4:	4b18      	ldr	r3, [pc, #96]	; (7508 <isr+0x978>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    74a6:	f8df a068 	ldr.w	sl, [pc, #104]	; 7510 <isr+0x980>
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    74aa:	f7fc fa13 	bl	38d4 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    74ae:	f240 7179 	movw	r1, #1913	; 0x779
    74b2:	f7fe fae5 	bl	5a80 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    74b6:	462b      	mov	r3, r5
    74b8:	2204      	movs	r2, #4
    74ba:	4629      	mov	r1, r5
    74bc:	9500      	str	r5, [sp, #0]
    74be:	4628      	mov	r0, r5
    74c0:	f7fc fa08 	bl	38d4 <ticker_stop>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    74c4:	f8db 3008 	ldr.w	r3, [fp, #8]
    74c8:	f894 9020 	ldrb.w	r9, [r4, #32]
    74cc:	e022      	b.n	7514 <isr+0x984>
    74ce:	bf00      	nop
    74d0:	3b9aca00 	.word	0x3b9aca00
    74d4:	00000000 	.word	0x00000000
    74d8:	200031b8 	.word	0x200031b8
    74dc:	2000312c 	.word	0x2000312c
    74e0:	200031ec 	.word	0x200031ec
    74e4:	20005050 	.word	0x20005050
    74e8:	2000504c 	.word	0x2000504c
    74ec:	20003214 	.word	0x20003214
    74f0:	20001030 	.word	0x20001030
    74f4:	20000f58 	.word	0x20000f58
    74f8:	20000f68 	.word	0x20000f68
    74fc:	200031e4 	.word	0x200031e4
    7500:	1afd498d 	.word	0x1afd498d
    7504:	20000eee 	.word	0x20000eee
    7508:	00005a81 	.word	0x00005a81
    750c:	200031d8 	.word	0x200031d8
    7510:	3b9aca00 	.word	0x3b9aca00
		ticker_status =
    7514:	9406      	str	r4, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7516:	eba3 0b08 	sub.w	fp, r3, r8
		ticker_status =
    751a:	f44f 63f2 	mov.w	r3, #1936	; 0x790
    751e:	9308      	str	r3, [sp, #32]
    7520:	4ba5      	ldr	r3, [pc, #660]	; (77b8 <isr+0xc28>)
    7522:	9307      	str	r3, [sp, #28]
    7524:	4ba5      	ldr	r3, [pc, #660]	; (77bc <isr+0xc2c>)
    7526:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7528:	68e3      	ldr	r3, [r4, #12]
		ticker_status =
    752a:	9503      	str	r5, [sp, #12]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    752c:	fba6 670a 	umull	r6, r7, r6, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7530:	4443      	add	r3, r8
		ticker_status =
    7532:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    7534:	4630      	mov	r0, r6
    7536:	a39e      	add	r3, pc, #632	; (adr r3, 77b0 <isr+0xc20>)
    7538:	e9d3 2300 	ldrd	r2, r3, [r3]
    753c:	4639      	mov	r1, r7
    753e:	f7f8 fe69 	bl	214 <__aeabi_uldivmod>
    7542:	4610      	mov	r0, r2
    7544:	4619      	mov	r1, r3
    7546:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    754a:	2300      	movs	r3, #0
    754c:	f7f8 fe62 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    7550:	a397      	add	r3, pc, #604	; (adr r3, 77b0 <isr+0xc20>)
    7552:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7556:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    7558:	4639      	mov	r1, r7
    755a:	4630      	mov	r0, r6
    755c:	f7f8 fe5a 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    7560:	990a      	ldr	r1, [sp, #40]	; 0x28
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    7562:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    7564:	a392      	add	r3, pc, #584	; (adr r3, 77b0 <isr+0xc20>)
    7566:	e9d3 2300 	ldrd	r2, r3, [r3]
    756a:	fba1 010a 	umull	r0, r1, r1, sl
    756e:	f7f8 fe51 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7572:	f109 0907 	add.w	r9, r9, #7
		ticker_status =
    7576:	fa5f f989 	uxtb.w	r9, r9
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    757a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    757e:	9000      	str	r0, [sp, #0]
    7580:	465b      	mov	r3, fp
    7582:	464a      	mov	r2, r9
    7584:	4629      	mov	r1, r5
    7586:	e59a      	b.n	70be <isr+0x52e>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    7588:	7a3a      	ldrb	r2, [r7, #8]
    758a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    758e:	f3c2 1280 	ubfx	r2, r2, #6, #1
    7592:	4293      	cmp	r3, r2
    7594:	d108      	bne.n	75a8 <isr+0xa18>
		(memcmp(&_radio.scanner.adv_addr[0],
    7596:	2206      	movs	r2, #6
    7598:	f107 010a 	add.w	r1, r7, #10
    759c:	4888      	ldr	r0, [pc, #544]	; (77c0 <isr+0xc30>)
    759e:	f7f8 ffec 	bl	57a <memcmp>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    75a2:	2800      	cmp	r0, #0
    75a4:	f43f ae69 	beq.w	727a <isr+0x6ea>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    75a8:	7a3b      	ldrb	r3, [r7, #8]
    75aa:	f013 030f 	ands.w	r3, r3, #15
    75ae:	d038      	beq.n	7622 <isr+0xa92>
    75b0:	2b07      	cmp	r3, #7
    75b2:	d134      	bne.n	761e <isr+0xa8e>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    75b4:	f89b 2c2d 	ldrb.w	r2, [fp, #3117]	; 0xc2d
    75b8:	0752      	lsls	r2, r2, #29
    75ba:	d132      	bne.n	7622 <isr+0xa92>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    75bc:	7a3b      	ldrb	r3, [r7, #8]
					&dir_report))) ||
    75be:	f003 020b 	and.w	r2, r3, #11
    75c2:	2a02      	cmp	r2, #2
    75c4:	f040 8086 	bne.w	76d4 <isr+0xb44>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    75c8:	7a7b      	ldrb	r3, [r7, #9]
    75ca:	2b00      	cmp	r3, #0
    75cc:	f040 80a8 	bne.w	7720 <isr+0xb90>
			_radio.state = STATE_CLOSE;
    75d0:	2303      	movs	r3, #3
    75d2:	f88b 3014 	strb.w	r3, [fp, #20]
			radio_disable();
    75d6:	f002 fe81 	bl	a2dc <radio_disable>
			_radio.scanner.state = 0;
    75da:	f89b 3c2c 	ldrb.w	r3, [fp, #3116]	; 0xc2c
    75de:	f36f 0341 	bfc	r3, #1, #1
    75e2:	f88b 3c2c 	strb.w	r3, [fp, #3116]	; 0xc2c
    75e6:	f7ff bb5c 	b.w	6ca2 <isr+0x112>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    75ea:	2b01      	cmp	r3, #1
    75ec:	d1e0      	bne.n	75b0 <isr+0xa20>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    75ee:	2100      	movs	r1, #0
    75f0:	4620      	mov	r0, r4
    75f2:	f7fd ff39 	bl	5468 <isr_scan_tgta_check.isra.30>
				      (_radio.fc_req == _radio.fc_ack)) &&
    75f6:	2800      	cmp	r0, #0
    75f8:	d0d6      	beq.n	75a8 <isr+0xa18>
    75fa:	e643      	b.n	7284 <isr+0x6f4>
				conn_space_us += conn_interval_us;
    75fc:	44b0      	add	r8, r6
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    75fe:	f1b8 0f00 	cmp.w	r8, #0
    7602:	dbfb      	blt.n	75fc <isr+0xa6c>
    7604:	4580      	cmp	r8, r0
    7606:	d3f9      	bcc.n	75fc <isr+0xa6c>
			pdu_adv_tx->connect_ind.win_offset =
    7608:	f240 43e2 	movw	r3, #1250	; 0x4e2
				(conn_space_us - conn_offset_us) / 1250;
    760c:	eba8 0000 	sub.w	r0, r8, r0
			pdu_adv_tx->connect_ind.win_offset =
    7610:	fbb0 f0f3 	udiv	r0, r0, r3
			pdu_adv_tx->connect_ind.win_size++;
    7614:	7d6b      	ldrb	r3, [r5, #21]
			pdu_adv_tx->connect_ind.win_offset =
    7616:	82e8      	strh	r0, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    7618:	3301      	adds	r3, #1
    761a:	756b      	strb	r3, [r5, #21]
    761c:	e6a5      	b.n	736a <isr+0x7da>
		   (_radio.scanner.phy)) ||
    761e:	2b06      	cmp	r3, #6
    7620:	d14d      	bne.n	76be <isr+0xb2e>
		 (_radio.scanner.type != 0) &&
    7622:	f89b 2c2d 	ldrb.w	r2, [fp, #3117]	; 0xc2d
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    7626:	0716      	lsls	r6, r2, #28
    7628:	d547      	bpl.n	76ba <isr+0xb2a>
		 (_radio.scanner.type != 0) &&
    762a:	f8db 2c54 	ldr.w	r2, [fp, #3156]	; 0xc54
    762e:	2a00      	cmp	r2, #0
    7630:	d143      	bne.n	76ba <isr+0xb2a>
		err = isr_rx_scan_report(rssi_ready,
    7632:	4628      	mov	r0, r5
    7634:	f7fe fa60 	bl	5af8 <isr_rx_scan_report.isra.38>
		if (err) {
    7638:	2800      	cmp	r0, #0
    763a:	d1c9      	bne.n	75d0 <isr+0xa40>
		if(pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND){
    763c:	7a3b      	ldrb	r3, [r7, #8]
    763e:	f003 030f 	and.w	r3, r3, #15
    7642:	2b07      	cmp	r3, #7
    7644:	d101      	bne.n	764a <isr+0xaba>
			pdu_adv_tx = (void *)radio_pkt_scratch_get();
    7646:	f002 fe9f 	bl	a388 <radio_pkt_scratch_get>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    764a:	f002 fe9d 	bl	a388 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    764e:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    7650:	495c      	ldr	r1, [pc, #368]	; (77c4 <isr+0xc34>)
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    7652:	2203      	movs	r2, #3
    7654:	f362 0303 	bfi	r3, r2, #0, #4
    7658:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    765a:	7a3a      	ldrb	r2, [r7, #8]
    765c:	b2db      	uxtb	r3, r3
    765e:	f3c2 1280 	ubfx	r2, r2, #6, #1
    7662:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    7666:	220c      	movs	r2, #12
    7668:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    766a:	f89b 2c2d 	ldrb.w	r2, [fp, #3117]	; 0xc2d
    766e:	09d2      	lsrs	r2, r2, #7
    7670:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    7674:	4604      	mov	r4, r0
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    7676:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    7678:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    767c:	f7f8 ff92 	bl	5a4 <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    7680:	2206      	movs	r2, #6
    7682:	f107 010a 	add.w	r1, r7, #10
    7686:	f104 0008 	add.w	r0, r4, #8
    768a:	f7f8 ff8b 	bl	5a4 <memcpy>
		_radio.scanner.state = 1;
    768e:	f89b 3c2c 	ldrb.w	r3, [fp, #3116]	; 0xc2c
    7692:	f043 0302 	orr.w	r3, r3, #2
    7696:	f88b 3c2c 	strb.w	r3, [fp, #3116]	; 0xc2c
		radio_tmr_tifs_set(RADIO_TIFS);
    769a:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    769c:	2302      	movs	r3, #2
    769e:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    76a2:	f002 ff05 	bl	a4b0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    76a6:	2000      	movs	r0, #0
    76a8:	f002 fe72 	bl	a390 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    76ac:	4620      	mov	r0, r4
    76ae:	f002 fdf5 	bl	a29c <radio_pkt_tx_set>
		radio_tmr_end_capture();
    76b2:	f002 ffd9 	bl	a668 <radio_tmr_end_capture>
    76b6:	f7ff bb64 	b.w	6d82 <isr+0x1f2>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    76ba:	2b00      	cmp	r3, #0
    76bc:	d084      	beq.n	75c8 <isr+0xa38>
    76be:	2b01      	cmp	r3, #1
    76c0:	f47f af7c 	bne.w	75bc <isr+0xa2c>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    76c4:	a90d      	add	r1, sp, #52	; 0x34
    76c6:	4620      	mov	r0, r4
    76c8:	f7fd fece 	bl	5468 <isr_scan_tgta_check.isra.30>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    76cc:	2800      	cmp	r0, #0
    76ce:	f47f af7b 	bne.w	75c8 <isr+0xa38>
    76d2:	e773      	b.n	75bc <isr+0xa2c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    76d4:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    76d8:	2b07      	cmp	r3, #7
    76da:	d105      	bne.n	76e8 <isr+0xb58>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    76dc:	f89b 3c2d 	ldrb.w	r3, [fp, #3117]	; 0xc2d
    76e0:	075c      	lsls	r4, r3, #29
    76e2:	f47f af71 	bne.w	75c8 <isr+0xa38>
    76e6:	e773      	b.n	75d0 <isr+0xa40>
		   (_radio.scanner.phy)) ||
    76e8:	2b04      	cmp	r3, #4
    76ea:	f47f af71 	bne.w	75d0 <isr+0xa40>
		   (_radio.scanner.state != 0) &&
    76ee:	f89b 3c2c 	ldrb.w	r3, [fp, #3116]	; 0xc2c
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    76f2:	0798      	lsls	r0, r3, #30
    76f4:	f57f af6c 	bpl.w	75d0 <isr+0xa40>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    76f8:	f002 fe46 	bl	a388 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    76fc:	7a3b      	ldrb	r3, [r7, #8]
    76fe:	7802      	ldrb	r2, [r0, #0]
    7700:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7704:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    7708:	f47f af62 	bne.w	75d0 <isr+0xa40>
		(memcmp(&sreq->scan_req.adv_addr[0],
    770c:	2206      	movs	r2, #6
    770e:	f107 010a 	add.w	r1, r7, #10
    7712:	3008      	adds	r0, #8
    7714:	f7f8 ff31 	bl	57a <memcmp>
		   (_radio.scanner.state != 0) &&
    7718:	2800      	cmp	r0, #0
    771a:	f43f af55 	beq.w	75c8 <isr+0xa38>
    771e:	e757      	b.n	75d0 <isr+0xa40>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    7720:	f8db 3c54 	ldr.w	r3, [fp, #3156]	; 0xc54
    7724:	2b00      	cmp	r3, #0
    7726:	f47f af53 	bne.w	75d0 <isr+0xa40>
		err = isr_rx_scan_report(rssi_ready,
    772a:	4628      	mov	r0, r5
    772c:	f7fe f9e4 	bl	5af8 <isr_rx_scan_report.isra.38>
    7730:	e74e      	b.n	75d0 <isr+0xa40>
	_radio.packet_counter++;
    7732:	f89b 3d00 	ldrb.w	r3, [fp, #3328]	; 0xd00
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    7736:	f89b 2d21 	ldrb.w	r2, [fp, #3361]	; 0xd21
	_radio.packet_counter++;
    773a:	3301      	adds	r3, #1
    773c:	f88b 3d00 	strb.w	r3, [fp, #3328]	; 0xd00
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    7740:	f8db 3d1c 	ldr.w	r3, [fp, #3356]	; 0xd1c
    7744:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    7748:	2301      	movs	r3, #1
    774a:	7133      	strb	r3, [r6, #4]
	if (crc_ok) {
    774c:	2f00      	cmp	r7, #0
    774e:	f000 8374 	beq.w	7e3a <isr+0x12aa>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    7752:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    7756:	7a30      	ldrb	r0, [r6, #8]
    7758:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    775c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    7760:	f002 0101 	and.w	r1, r2, #1
    7764:	4288      	cmp	r0, r1
    7766:	f000 80bd 	beq.w	78e4 <isr+0xd54>
		_radio.conn_curr->sn++;
    776a:	f081 0101 	eor.w	r1, r1, #1
    776e:	f361 0200 	bfi	r2, r1, #0, #1
    7772:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		if (_radio.role == ROLE_SLAVE) {
    7776:	f89b 2013 	ldrb.w	r2, [fp, #19]
    777a:	2a03      	cmp	r2, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    777c:	bf02      	ittt	eq
    777e:	f893 2038 	ldrbeq.w	r2, [r3, #56]	; 0x38
    7782:	f042 0201 	orreq.w	r2, r2, #1
    7786:	f883 2038 	strbeq.w	r2, [r3, #56]	; 0x38
		if (_radio.conn_curr->empty == 0) {
    778a:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    778e:	0611      	lsls	r1, r2, #24
    7790:	f100 80a4 	bmi.w	78dc <isr+0xd4c>
			node_tx = _radio.conn_curr->pkt_tx_head;
    7794:	f8d3 80ec 	ldr.w	r8, [r3, #236]	; 0xec
				_radio.conn_curr->packet_tx_head_offset);
    7798:	f893 e101 	ldrb.w	lr, [r3, #257]	; 0x101
			pdu_data_tx = (void *)(node_tx->pdu_data +
    779c:	f108 0c04 	add.w	ip, r8, #4
    77a0:	eb0c 050e 	add.w	r5, ip, lr
			pdu_data_tx_len = pdu_data_tx->len;
    77a4:	786c      	ldrb	r4, [r5, #1]
			if (pdu_data_tx_len != 0) {
    77a6:	b97c      	cbnz	r4, 77c8 <isr+0xc38>
	u8_t terminate = 0;
    77a8:	2500      	movs	r5, #0
    77aa:	e035      	b.n	7818 <isr+0xc88>
    77ac:	f3af 8000 	nop.w
    77b0:	1afd498d 	.word	0x1afd498d
    77b4:	00000007 	.word	0x00000007
    77b8:	00005ae1 	.word	0x00005ae1
    77bc:	00006909 	.word	0x00006909
    77c0:	20000ef4 	.word	0x20000ef4
    77c4:	20000eee 	.word	0x20000eee
				if (_radio.conn_curr->enc_tx) {
    77c8:	0692      	lsls	r2, r2, #26
    77ca:	d50a      	bpl.n	77e2 <isr+0xc52>
					_radio.conn_curr->ccm_tx.counter++;
    77cc:	f8d3 00da 	ldr.w	r0, [r3, #218]	; 0xda
    77d0:	f8d3 10de 	ldr.w	r1, [r3, #222]	; 0xde
    77d4:	3001      	adds	r0, #1
    77d6:	f141 0100 	adc.w	r1, r1, #0
    77da:	f8c3 00da 	str.w	r0, [r3, #218]	; 0xda
    77de:	f8c3 10de 	str.w	r1, [r3, #222]	; 0xde
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    77e2:	f81c 300e 	ldrb.w	r3, [ip, lr]
    77e6:	f003 0303 	and.w	r3, r3, #3
    77ea:	2b03      	cmp	r3, #3
    77ec:	d1dc      	bne.n	77a8 <isr+0xc18>
	switch (pdu_data_tx->llctrl.opcode) {
    77ee:	78ea      	ldrb	r2, [r5, #3]
    77f0:	2a02      	cmp	r2, #2
    77f2:	d1d9      	bne.n	77a8 <isr+0xc18>
		_radio.state = STATE_CLOSE;
    77f4:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_disable();
    77f8:	f002 fd70 	bl	a2dc <radio_disable>
		LL_ASSERT(!radio_is_ready());
    77fc:	f002 fd8c 	bl	a318 <radio_is_ready>
    7800:	2800      	cmp	r0, #0
    7802:	f47f aa19 	bne.w	6c38 <isr+0xa8>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    7806:	7929      	ldrb	r1, [r5, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    7808:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    780c:	2913      	cmp	r1, #19
    780e:	bf08      	it	eq
    7810:	2116      	moveq	r1, #22
    7812:	f7fd fe83 	bl	551c <terminate_ind_rx_enqueue>
		terminate = 1;
    7816:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    7818:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    781c:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
			if (_radio.conn_curr->packet_tx_head_offset ==
    7820:	f893 1100 	ldrb.w	r1, [r3, #256]	; 0x100
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    7824:	4422      	add	r2, r4
    7826:	b2d2      	uxtb	r2, r2
			if (_radio.conn_curr->packet_tx_head_offset ==
    7828:	4291      	cmp	r1, r2
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    782a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
			if (_radio.conn_curr->packet_tx_head_offset ==
    782e:	d11e      	bne.n	786e <isr+0xcde>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    7830:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    7834:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
	conn->packet_tx_head_len = 0;
    7838:	2000      	movs	r0, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    783a:	428a      	cmp	r2, r1
	conn->packet_tx_head_len = 0;
    783c:	f883 0100 	strb.w	r0, [r3, #256]	; 0x100
	conn->packet_tx_head_offset = 0;
    7840:	f883 0101 	strb.w	r0, [r3, #257]	; 0x101
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    7844:	d116      	bne.n	7874 <isr+0xce4>
		if (node_tx) {
    7846:	f1b8 0f00 	cmp.w	r8, #0
    784a:	d010      	beq.n	786e <isr+0xcde>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    784c:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    7850:	6814      	ldr	r4, [r2, #0]
    7852:	f8c3 40ec 	str.w	r4, [r3, #236]	; 0xec
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    7856:	428a      	cmp	r2, r1
				conn->pkt_tx_ctrl = NULL;
    7858:	bf06      	itte	eq
    785a:	f8c3 00f0 	streq.w	r0, [r3, #240]	; 0xf0
				conn->pkt_tx_ctrl_last = NULL;
    785e:	f8c3 00f4 	streq.w	r0, [r3, #244]	; 0xf4
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    7862:	f8c3 40f0 	strne.w	r4, [r3, #240]	; 0xf0
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    7866:	49a9      	ldr	r1, [pc, #676]	; (7b0c <isr+0xf7c>)
    7868:	4640      	mov	r0, r8
    786a:	f7fb f94c 	bl	2b06 <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    786e:	f04f 0800 	mov.w	r8, #0
    7872:	e008      	b.n	7886 <isr+0xcf6>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    7874:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
    7878:	428a      	cmp	r2, r1
    787a:	6812      	ldr	r2, [r2, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    787c:	bf08      	it	eq
    787e:	f8c3 20f8 	streq.w	r2, [r3, #248]	; 0xf8
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    7882:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	if (terminate) {
    7886:	b37d      	cbz	r5, 78e8 <isr+0xd58>
		connection_release(_radio.conn_curr);
    7888:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    788c:	f7fe f804 	bl	5898 <connection_release>
		_radio.conn_curr = NULL;
    7890:	2500      	movs	r5, #0
				_radio.conn_curr = NULL;
    7892:	f8cb 5cfc 	str.w	r5, [fp, #3324]	; 0xcfc
	if (!radio_tmr_aa_restore()) {
    7896:	f002 fedb 	bl	a650 <radio_tmr_aa_restore>
    789a:	b918      	cbnz	r0, 78a4 <isr+0xd14>
		radio_tmr_aa_save(radio_tmr_aa_get());
    789c:	f002 fecc 	bl	a638 <radio_tmr_aa_get>
    78a0:	f002 fed0 	bl	a644 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    78a4:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    78a8:	2b00      	cmp	r3, #0
    78aa:	f43f a9fa 	beq.w	6ca2 <isr+0x112>
	if (tx_release) {
    78ae:	f1b8 0f00 	cmp.w	r8, #0
    78b2:	d003      	beq.n	78bc <isr+0xd2c>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    78b4:	4641      	mov	r1, r8
    78b6:	8c18      	ldrh	r0, [r3, #32]
    78b8:	f7fd ff7c 	bl	57b4 <pdu_node_tx_release>
	if (rx_enqueue) {
    78bc:	2d00      	cmp	r5, #0
    78be:	f43f a9f0 	beq.w	6ca2 <isr+0x112>
		rx_fc_lock(_radio.conn_curr->handle);
    78c2:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    78c6:	8c18      	ldrh	r0, [r3, #32]
    78c8:	f7fd fd2c 	bl	5324 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    78cc:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    78d0:	8c1b      	ldrh	r3, [r3, #32]
    78d2:	80f3      	strh	r3, [r6, #6]
		packet_rx_enqueue();
    78d4:	f7fd fe4a 	bl	556c <packet_rx_enqueue>
    78d8:	f7ff b9e3 	b.w	6ca2 <isr+0x112>
			_radio.conn_curr->empty = 0;
    78dc:	f36f 12c7 	bfc	r2, #7, #1
    78e0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    78e4:	f04f 0800 	mov.w	r8, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    78e8:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    78ec:	7a32      	ldrb	r2, [r6, #8]
    78ee:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    78f2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    78f6:	f3c3 0340 	ubfx	r3, r3, #1, #1
    78fa:	429a      	cmp	r2, r3
    78fc:	d03c      	beq.n	7978 <isr+0xde8>
	u8_t rx_enqueue = 0;
    78fe:	2500      	movs	r5, #0
		_radio.conn_curr->supervision_expire = 0;
    7900:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
		_radio.crc_expire = 0;
    7904:	2400      	movs	r4, #0
    7906:	f88b 4d01 	strb.w	r4, [fp, #3329]	; 0xd01
		_radio.conn_curr->supervision_expire = 0;
    790a:	861c      	strh	r4, [r3, #48]	; 0x30
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    790c:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    7910:	a90d      	add	r1, sp, #52	; 0x34
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    7912:	f890 90a8 	ldrb.w	r9, [r0, #168]	; 0xa8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    7916:	f7ff f8d5 	bl	6ac4 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    791a:	f89b 3014 	ldrb.w	r3, [fp, #20]
    791e:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    7920:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    7924:	d013      	beq.n	794e <isr+0xdbe>
    7926:	2c00      	cmp	r4, #0
    7928:	f040 82a0 	bne.w	7e6c <isr+0x12dc>
    792c:	b13f      	cbz	r7, 793e <isr+0xdae>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    792e:	7a33      	ldrb	r3, [r6, #8]
    7930:	06df      	lsls	r7, r3, #27
    7932:	d404      	bmi.n	793e <isr+0xdae>
			 (pdu_data_tx->len == 0)) ||
    7934:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			((crc_ok) && (pdu_data_rx->md == 0) &&
    7936:	785b      	ldrb	r3, [r3, #1]
    7938:	2b00      	cmp	r3, #0
    793a:	f000 8297 	beq.w	7e6c <isr+0x12dc>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    793e:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
			 (pdu_data_tx->len == 0)) ||
    7942:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    7946:	2b00      	cmp	r3, #0
    7948:	bf0c      	ite	eq
    794a:	2302      	moveq	r3, #2
    794c:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
    794e:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    7950:	f88b 3014 	strb.w	r3, [fp, #20]
	if (_radio.state == STATE_CLOSE) {
    7954:	f040 82a4 	bne.w	7ea0 <isr+0x1310>
		if (_radio.role == ROLE_MASTER) {
    7958:	f89b 3013 	ldrb.w	r3, [fp, #19]
    795c:	2b04      	cmp	r3, #4
    795e:	f040 8287 	bne.w	7e70 <isr+0x12e0>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    7962:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    7966:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    796a:	f369 12c7 	bfi	r2, r9, #7, #1
    796e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			radio_disable();
    7972:	f002 fcb3 	bl	a2dc <radio_disable>
    7976:	e78e      	b.n	7896 <isr+0xd06>
	    (packet_rx_reserve_get(3) != 0) &&
    7978:	2003      	movs	r0, #3
    797a:	f7fc ff7d 	bl	4878 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    797e:	2800      	cmp	r0, #0
    7980:	d0bd      	beq.n	78fe <isr+0xd6e>
	    (packet_rx_reserve_get(3) != 0) &&
    7982:	f89b 3d62 	ldrb.w	r3, [fp, #3426]	; 0xd62
    7986:	b373      	cbz	r3, 79e6 <isr+0xe56>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    7988:	f8db 3d2c 	ldr.w	r3, [fp, #3372]	; 0xd2c
    798c:	f8db 2d30 	ldr.w	r2, [fp, #3376]	; 0xd30
	    ((_radio.fc_ena == 0) ||
    7990:	4293      	cmp	r3, r2
    7992:	d105      	bne.n	79a0 <isr+0xe10>
	      (_radio.fc_req == _radio.fc_ack)) ||
    7994:	f89b 2d60 	ldrb.w	r2, [fp, #3424]	; 0xd60
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    7998:	f89b 1d61 	ldrb.w	r1, [fp, #3425]	; 0xd61
    799c:	4291      	cmp	r1, r2
    799e:	d022      	beq.n	79e6 <isr+0xe56>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    79a0:	f8db 2d30 	ldr.w	r2, [fp, #3376]	; 0xd30
	      (_radio.fc_req == _radio.fc_ack)) ||
    79a4:	4293      	cmp	r3, r2
    79a6:	d0aa      	beq.n	78fe <isr+0xd6e>
	      (_radio.fc_req != _radio.fc_ack) &&
    79a8:	f89b 3d60 	ldrb.w	r3, [fp, #3424]	; 0xd60
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    79ac:	f89b 2d61 	ldrb.w	r2, [fp, #3425]	; 0xd61
    79b0:	429a      	cmp	r2, r3
    79b2:	d0a4      	beq.n	78fe <isr+0xd6e>
		(((_radio.fc_req == 0) &&
    79b4:	f89b 3d60 	ldrb.w	r3, [fp, #3424]	; 0xd60
	      (_radio.fc_req != _radio.fc_ack) &&
    79b8:	b933      	cbnz	r3, 79c8 <isr+0xe38>
		   _radio.conn_curr->handle)) ||
    79ba:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
		(((_radio.fc_req == 0) &&
    79be:	f8bb 2d5e 	ldrh.w	r2, [fp, #3422]	; 0xd5e
    79c2:	8c1b      	ldrh	r3, [r3, #32]
    79c4:	429a      	cmp	r2, r3
    79c6:	d00e      	beq.n	79e6 <isr+0xe56>
		 ((_radio.fc_req != 0) &&
    79c8:	f89b 3d60 	ldrb.w	r3, [fp, #3424]	; 0xd60
		   _radio.conn_curr->handle)) ||
    79cc:	2b00      	cmp	r3, #0
    79ce:	d096      	beq.n	78fe <isr+0xd6e>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    79d0:	f89b 3d60 	ldrb.w	r3, [fp, #3424]	; 0xd60
		   _radio.conn_curr->handle)))))) {
    79d4:	f8db 1cfc 	ldr.w	r1, [fp, #3324]	; 0xcfc
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    79d8:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    79dc:	f8b3 2d58 	ldrh.w	r2, [r3, #3416]	; 0xd58
    79e0:	8c0b      	ldrh	r3, [r1, #32]
    79e2:	429a      	cmp	r2, r3
    79e4:	d18b      	bne.n	78fe <isr+0xd6e>
		if (pdu_data_rx->len != 0) {
    79e6:	f896 9009 	ldrb.w	r9, [r6, #9]
    79ea:	f1b9 0f00 	cmp.w	r9, #0
    79ee:	f000 81e1 	beq.w	7db4 <isr+0x1224>
			if (_radio.conn_curr->enc_rx) {
    79f2:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    79f6:	f893 90a8 	ldrb.w	r9, [r3, #168]	; 0xa8
    79fa:	f019 0910 	ands.w	r9, r9, #16
    79fe:	d006      	beq.n	7a0e <isr+0xe7e>
				done = radio_ccm_is_done();
    7a00:	f002 feb2 	bl	a768 <radio_ccm_is_done>
				LL_ASSERT(done);
    7a04:	2800      	cmp	r0, #0
    7a06:	f43f a917 	beq.w	6c38 <isr+0xa8>
				ccm_rx_increment = 1;
    7a0a:	f04f 0901 	mov.w	r9, #1
			if ((_radio.conn_curr->enc_rx &&
    7a0e:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    7a12:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    7a16:	06dc      	lsls	r4, r3, #27
    7a18:	d40f      	bmi.n	7a3a <isr+0xeaa>
			    (_radio.conn_curr->pause_rx &&
    7a1a:	f8db 4cfc 	ldr.w	r4, [fp, #3324]	; 0xcfc
    7a1e:	7a33      	ldrb	r3, [r6, #8]
    7a20:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
			     !radio_ccm_mic_is_valid()) ||
    7a24:	f012 0f04 	tst.w	r2, #4
    7a28:	d120      	bne.n	7a6c <isr+0xedc>
			switch (pdu_data_rx->ll_id) {
    7a2a:	f013 0303 	ands.w	r3, r3, #3
    7a2e:	f000 81c1 	beq.w	7db4 <isr+0x1224>
    7a32:	2b02      	cmp	r3, #2
    7a34:	d847      	bhi.n	7ac6 <isr+0xf36>
				*rx_enqueue = 1;
    7a36:	2501      	movs	r5, #1
    7a38:	e0ba      	b.n	7bb0 <isr+0x1020>
			     !radio_ccm_mic_is_valid()) ||
    7a3a:	f002 feb3 	bl	a7a4 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    7a3e:	2800      	cmp	r0, #0
    7a40:	d1eb      	bne.n	7a1a <isr+0xe8a>
				_radio.state = STATE_CLOSE;
    7a42:	2303      	movs	r3, #3
    7a44:	f88b 3014 	strb.w	r3, [fp, #20]
				radio_disable();
    7a48:	f002 fc48 	bl	a2dc <radio_disable>
				LL_ASSERT(!radio_is_ready());
    7a4c:	f002 fc64 	bl	a318 <radio_is_ready>
    7a50:	4605      	mov	r5, r0
    7a52:	2800      	cmp	r0, #0
    7a54:	f47f a8f0 	bne.w	6c38 <isr+0xa8>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    7a58:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    7a5c:	213d      	movs	r1, #61	; 0x3d
    7a5e:	f7fd fd5d 	bl	551c <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    7a62:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    7a66:	f7fd ff17 	bl	5898 <connection_release>
    7a6a:	e712      	b.n	7892 <isr+0xd02>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    7a6c:	f003 0103 	and.w	r1, r3, #3
    7a70:	2903      	cmp	r1, #3
    7a72:	d1e6      	bne.n	7a42 <isr+0xeb2>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    7a74:	f994 001d 	ldrsb.w	r0, [r4, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    7a78:	7af1      	ldrb	r1, [r6, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    7a7a:	2800      	cmp	r0, #0
    7a7c:	f002 0240 	and.w	r2, r2, #64	; 0x40
    7a80:	db15      	blt.n	7aae <isr+0xf1e>
	       (!conn->role &&
    7a82:	b922      	cbnz	r2, 7a8e <isr+0xefe>
		((!conn->refresh &&
    7a84:	2902      	cmp	r1, #2
    7a86:	d0d0      	beq.n	7a2a <isr+0xe9a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    7a88:	2911      	cmp	r1, #17
    7a8a:	d8da      	bhi.n	7a42 <isr+0xeb2>
    7a8c:	e009      	b.n	7aa2 <isr+0xf12>
		 (conn->refresh &&
    7a8e:	1e8a      	subs	r2, r1, #2
    7a90:	b2d2      	uxtb	r2, r2
    7a92:	2a09      	cmp	r2, #9
    7a94:	d8f8      	bhi.n	7a88 <isr+0xef8>
    7a96:	f240 2005 	movw	r0, #517	; 0x205
    7a9a:	fa20 f202 	lsr.w	r2, r0, r2
    7a9e:	07d0      	lsls	r0, r2, #31
    7aa0:	d4c3      	bmi.n	7a2a <isr+0xe9a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    7aa2:	4a1b      	ldr	r2, [pc, #108]	; (7b10 <isr+0xf80>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    7aa4:	fa22 f101 	lsr.w	r1, r2, r1
    7aa8:	07c9      	lsls	r1, r1, #31
    7aaa:	d5ca      	bpl.n	7a42 <isr+0xeb2>
    7aac:	e7bd      	b.n	7a2a <isr+0xe9a>
	       (conn->role &&
    7aae:	b92a      	cbnz	r2, 7abc <isr+0xf2c>
		((!conn->refresh &&
    7ab0:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    7ab2:	d0ba      	beq.n	7a2a <isr+0xe9a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    7ab4:	2911      	cmp	r1, #17
    7ab6:	d8c4      	bhi.n	7a42 <isr+0xeb2>
    7ab8:	4a16      	ldr	r2, [pc, #88]	; (7b14 <isr+0xf84>)
    7aba:	e7f3      	b.n	7aa4 <isr+0xf14>
		 (conn->refresh &&
    7abc:	1e8a      	subs	r2, r1, #2
    7abe:	2a01      	cmp	r2, #1
    7ac0:	d9b3      	bls.n	7a2a <isr+0xe9a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    7ac2:	290b      	cmp	r1, #11
    7ac4:	e7f5      	b.n	7ab2 <isr+0xf22>
	switch (pdu_data_rx->llctrl.opcode) {
    7ac6:	7af5      	ldrb	r5, [r6, #11]
	pdu_data_rx = (void *)node_rx->pdu_data;
    7ac8:	f106 0a08 	add.w	sl, r6, #8
	switch (pdu_data_rx->llctrl.opcode) {
    7acc:	2d19      	cmp	r5, #25
    7ace:	f200 8179 	bhi.w	7dc4 <isr+0x1234>
    7ad2:	e8df f015 	tbh	[pc, r5, lsl #1]
    7ad6:	0021      	.short	0x0021
    7ad8:	00b80085 	.word	0x00b80085
    7adc:	01770177 	.word	0x01770177
    7ae0:	01770177 	.word	0x01770177
    7ae4:	00c30171 	.word	0x00c30171
    7ae8:	017700e0 	.word	0x017700e0
    7aec:	01060177 	.word	0x01060177
    7af0:	00d80177 	.word	0x00d80177
    7af4:	01770177 	.word	0x01770177
    7af8:	0177016a 	.word	0x0177016a
    7afc:	01770177 	.word	0x01770177
    7b00:	01770177 	.word	0x01770177
    7b04:	01770177 	.word	0x01770177
    7b08:	018b      	.short	0x018b
    7b0a:	bf00      	nop
    7b0c:	20000ffc 	.word	0x20000ffc
    7b10:	00022060 	.word	0x00022060
    7b14:	00022040 	.word	0x00022040
		if (!_radio.conn_curr->role ||
    7b18:	f994 301d 	ldrsb.w	r3, [r4, #29]
    7b1c:	2b00      	cmp	r3, #0
    7b1e:	f280 8151 	bge.w	7dc4 <isr+0x1234>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    7b22:	7a71      	ldrb	r1, [r6, #9]
    7b24:	2000      	movs	r0, #0
    7b26:	f7fc fe5f 	bl	47e8 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    7b2a:	2800      	cmp	r0, #0
    7b2c:	f000 814a 	beq.w	7dc4 <isr+0x1234>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    7b30:	f8b6 1015 	ldrh.w	r1, [r6, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    7b34:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    7b36:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    7b38:	041a      	lsls	r2, r3, #16
    7b3a:	f100 8382 	bmi.w	8242 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x242>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    7b3e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    7b42:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
    7b46:	429a      	cmp	r2, r3
    7b48:	f47f a876 	bne.w	6c38 <isr+0xa8>
	if (_radio.conn_upd == 0) {
    7b4c:	f8db 2d68 	ldr.w	r2, [fp, #3432]	; 0xd68
    7b50:	b90a      	cbnz	r2, 7b56 <isr+0xfc6>
		_radio.conn_upd = conn;
    7b52:	f8cb 4d68 	str.w	r4, [fp, #3432]	; 0xd68
	conn->llcp.conn_upd.win_size =
    7b56:	7b32      	ldrb	r2, [r6, #12]
    7b58:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    7b5c:	f8b6 000d 	ldrh.w	r0, [r6, #13]
    7b60:	f240 42e2 	movw	r2, #1250	; 0x4e2
    7b64:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    7b66:	66e2      	str	r2, [r4, #108]	; 0x6c
		pdu_data_rx->llctrl.conn_update_ind.interval;
    7b68:	7c30      	ldrb	r0, [r6, #16]
    7b6a:	7bf2      	ldrb	r2, [r6, #15]
    7b6c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    7b70:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
		pdu_data_rx->llctrl.conn_update_ind.latency;
    7b74:	7cb0      	ldrb	r0, [r6, #18]
    7b76:	7c72      	ldrb	r2, [r6, #17]
    7b78:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    7b7c:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    7b80:	7cf2      	ldrb	r2, [r6, #19]
    7b82:	7d30      	ldrb	r0, [r6, #20]
	conn->llcp.conn_upd.instant =
    7b84:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    7b88:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    7b8c:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    7b90:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
	conn->llcp.conn_upd.is_internal = 0;
    7b94:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    7b98:	f36f 0282 	bfc	r2, #2, #1
    7b9c:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
	conn->llcp_ack--;
    7ba0:	3b01      	subs	r3, #1
	conn->llcp_type = LLCP_CONN_UPD;
    7ba2:	2201      	movs	r2, #1
			_radio.conn_curr->procedure_expire = 0;
    7ba4:	2500      	movs	r5, #0
	conn->llcp_type = LLCP_CONN_UPD;
    7ba6:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
	conn->llcp_ack--;
    7baa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			_radio.conn_curr->procedure_expire = 0;
    7bae:	86a5      	strh	r5, [r4, #52]	; 0x34
			_radio.conn_curr->nesn++;
    7bb0:	f8db 1cfc 	ldr.w	r1, [fp, #3324]	; 0xcfc
    7bb4:	f891 30a8 	ldrb.w	r3, [r1, #168]	; 0xa8
    7bb8:	f083 0302 	eor.w	r3, r3, #2
    7bbc:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
			if (ccm_rx_increment) {
    7bc0:	f1b9 0f00 	cmp.w	r9, #0
    7bc4:	f43f ae9c 	beq.w	7900 <isr+0xd70>
				_radio.conn_curr->ccm_rx.counter++;
    7bc8:	f8d1 20b9 	ldr.w	r2, [r1, #185]	; 0xb9
    7bcc:	f8d1 30bd 	ldr.w	r3, [r1, #189]	; 0xbd
    7bd0:	3201      	adds	r2, #1
    7bd2:	f143 0300 	adc.w	r3, r3, #0
    7bd6:	f8c1 20b9 	str.w	r2, [r1, #185]	; 0xb9
    7bda:	f8c1 30bd 	str.w	r3, [r1, #189]	; 0xbd
    7bde:	e68f      	b.n	7900 <isr+0xd70>
		if (!_radio.conn_curr->role ||
    7be0:	f994 301d 	ldrsb.w	r3, [r4, #29]
    7be4:	2b00      	cmp	r3, #0
    7be6:	f280 80ed 	bge.w	7dc4 <isr+0x1234>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    7bea:	7a71      	ldrb	r1, [r6, #9]
    7bec:	2001      	movs	r0, #1
    7bee:	f7fc fdfb 	bl	47e8 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    7bf2:	2800      	cmp	r0, #0
    7bf4:	f000 80e6 	beq.w	7dc4 <isr+0x1234>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    7bf8:	f8b6 3011 	ldrh.w	r3, [r6, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    7bfc:	8c62      	ldrh	r2, [r4, #34]	; 0x22
    7bfe:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    7c00:	041b      	lsls	r3, r3, #16
    7c02:	f100 831e 	bmi.w	8242 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x242>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    7c06:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    7c0a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    7c0e:	429a      	cmp	r2, r3
    7c10:	f47f a812 	bne.w	6c38 <isr+0xa8>
	memcpy(&conn->llcp.chan_map.chm[0],
    7c14:	2205      	movs	r2, #5
    7c16:	f106 010c 	add.w	r1, r6, #12
    7c1a:	f104 0061 	add.w	r0, r4, #97	; 0x61
    7c1e:	f7f8 fcc1 	bl	5a4 <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    7c22:	7c73      	ldrb	r3, [r6, #17]
    7c24:	7cb2      	ldrb	r2, [r6, #18]
    7c26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    7c2a:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->llcp_type = LLCP_CHAN_MAP;
    7c2e:	2302      	movs	r3, #2
    7c30:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_ack--;
    7c34:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	conn->llcp.chan_map.initiate = 0;
    7c38:	2500      	movs	r5, #0
	conn->llcp_ack--;
    7c3a:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    7c3c:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
	conn->llcp_ack--;
    7c40:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    7c44:	e7b4      	b.n	7bb0 <isr+0x1020>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    7c46:	7a71      	ldrb	r1, [r6, #9]
    7c48:	2002      	movs	r0, #2
    7c4a:	f7fc fdcd 	bl	47e8 <pdu_len_cmp>
    7c4e:	2800      	cmp	r0, #0
    7c50:	f000 80b8 	beq.w	7dc4 <isr+0x1234>
		_radio.conn_curr->llcp_terminate.reason_peer =
    7c54:	7b33      	ldrb	r3, [r6, #12]
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    7c56:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
    7c5a:	e0ab      	b.n	7db4 <isr+0x1224>
		if (!_radio.conn_curr->role ||
    7c5c:	f994 301d 	ldrsb.w	r3, [r4, #29]
    7c60:	2b00      	cmp	r3, #0
    7c62:	f280 80af 	bge.w	7dc4 <isr+0x1234>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    7c66:	7a71      	ldrb	r1, [r6, #9]
    7c68:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    7c6a:	f7fc fdbd 	bl	47e8 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    7c6e:	2800      	cmp	r0, #0
    7c70:	f000 80a8 	beq.w	7dc4 <isr+0x1234>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    7c74:	4651      	mov	r1, sl
    7c76:	4620      	mov	r0, r4
    7c78:	f7fe fac4 	bl	6204 <feature_rsp_send>
    7c7c:	4605      	mov	r5, r0
		if (!nack) {
    7c7e:	2800      	cmp	r0, #0
    7c80:	f47f ae3d 	bne.w	78fe <isr+0xd6e>
    7c84:	e794      	b.n	7bb0 <isr+0x1020>
		if (_radio.conn_curr->role ||
    7c86:	f994 301d 	ldrsb.w	r3, [r4, #29]
    7c8a:	2b00      	cmp	r3, #0
    7c8c:	f2c0 809a 	blt.w	7dc4 <isr+0x1234>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    7c90:	7a71      	ldrb	r1, [r6, #9]
    7c92:	200e      	movs	r0, #14
    7c94:	e7e9      	b.n	7c6a <isr+0x10da>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    7c96:	7a71      	ldrb	r1, [r6, #9]
    7c98:	2009      	movs	r0, #9
    7c9a:	f7fc fda5 	bl	47e8 <pdu_len_cmp>
    7c9e:	2800      	cmp	r0, #0
    7ca0:	f000 8090 	beq.w	7dc4 <isr+0x1234>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    7ca4:	7b33      	ldrb	r3, [r6, #12]
	       (features[1] << 8) | (features[2] << 16);
    7ca6:	7b72      	ldrb	r2, [r6, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    7ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    7cac:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    7cb0:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    7cb4:	f043 0310 	orr.w	r3, r3, #16
    7cb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    7cbc:	7bb2      	ldrb	r2, [r6, #14]
    7cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    7cc2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
    7cc6:	f3c2 0210 	ubfx	r2, r2, #0, #17
    7cca:	4013      	ands	r3, r2
    7ccc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		_radio.conn_curr->common.fex_valid = 1;
    7cd0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    7cd4:	f043 0320 	orr.w	r3, r3, #32
    7cd8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		_radio.conn_curr->procedure_expire = 0;
    7cdc:	2300      	movs	r3, #0
    7cde:	86a3      	strh	r3, [r4, #52]	; 0x34
    7ce0:	e6a9      	b.n	7a36 <isr+0xea6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    7ce2:	7a71      	ldrb	r1, [r6, #9]
    7ce4:	200c      	movs	r0, #12
    7ce6:	f7fc fd7f 	bl	47e8 <pdu_len_cmp>
    7cea:	2800      	cmp	r0, #0
    7cec:	d06a      	beq.n	7dc4 <isr+0x1234>
	if (!conn->llcp_version.tx) {
    7cee:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    7cf2:	f013 0501 	ands.w	r5, r3, #1
    7cf6:	d152      	bne.n	7d9e <isr+0x120e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7cf8:	48b9      	ldr	r0, [pc, #740]	; (7fe0 <isr+0x1450>)
    7cfa:	f7fa feea 	bl	2ad2 <mem_acquire>
		if (!node_tx) {
    7cfe:	4601      	mov	r1, r0
    7d00:	2800      	cmp	r0, #0
    7d02:	f43f adfc 	beq.w	78fe <isr+0xd6e>
		conn->llcp_version.tx = 1;
    7d06:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    7d0a:	f043 0301 	orr.w	r3, r3, #1
    7d0e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7d12:	7903      	ldrb	r3, [r0, #4]
    7d14:	f043 0303 	orr.w	r3, r3, #3
    7d18:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    7d1a:	2306      	movs	r3, #6
    7d1c:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    7d1e:	230c      	movs	r3, #12
    7d20:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    7d22:	2309      	movs	r3, #9
    7d24:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    7d26:	f06f 030e 	mvn.w	r3, #14
    7d2a:	7243      	strb	r3, [r0, #9]
    7d2c:	2305      	movs	r3, #5
    7d2e:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    7d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7d34:	72c3      	strb	r3, [r0, #11]
    7d36:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    7d38:	4620      	mov	r0, r4
    7d3a:	f7fe fa49 	bl	61d0 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    7d3e:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    7d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    7d46:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    7d4a:	f002 fb19 	bl	a380 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    7d4e:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    7d50:	7045      	strb	r5, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    7d52:	2201      	movs	r2, #1
    7d54:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    7d58:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    7d5c:	7003      	strb	r3, [r0, #0]
    7d5e:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    7d60:	b1c2      	cbz	r2, 7d94 <isr+0x1204>
		pdu_data_tx->md = 1;
    7d62:	f043 0310 	orr.w	r3, r3, #16
    7d66:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    7d68:	7b33      	ldrb	r3, [r6, #12]
    7d6a:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
	conn->llcp_version.company_id = v->company_id;
    7d6e:	7bb2      	ldrb	r2, [r6, #14]
    7d70:	7b73      	ldrb	r3, [r6, #13]
    7d72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7d76:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
	conn->llcp_version.sub_version_number = v->sub_version_number;
    7d7a:	7bf3      	ldrb	r3, [r6, #15]
    7d7c:	7c32      	ldrb	r2, [r6, #16]
    7d7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7d82:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
	conn->llcp_version.rx = 1;
    7d86:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    7d8a:	f043 0302 	orr.w	r3, r3, #2
    7d8e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    7d92:	e70d      	b.n	7bb0 <isr+0x1020>
		pdu_data_tx->md = 0;
    7d94:	f362 1304 	bfi	r3, r2, #4, #1
    7d98:	7003      	strb	r3, [r0, #0]
	u8_t rx_enqueue = 0;
    7d9a:	4615      	mov	r5, r2
    7d9c:	e7e4      	b.n	7d68 <isr+0x11d8>
	} else if (!conn->llcp_version.rx) {
    7d9e:	f013 0302 	ands.w	r3, r3, #2
    7da2:	d107      	bne.n	7db4 <isr+0x1224>
		conn->procedure_expire = 0;
    7da4:	86a3      	strh	r3, [r4, #52]	; 0x34
		*rx_enqueue = 1;
    7da6:	2501      	movs	r5, #1
    7da8:	e7de      	b.n	7d68 <isr+0x11d8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    7daa:	7a71      	ldrb	r1, [r6, #9]
    7dac:	2011      	movs	r0, #17
    7dae:	f7fc fd1b 	bl	47e8 <pdu_len_cmp>
    7db2:	b138      	cbz	r0, 7dc4 <isr+0x1234>
	u8_t rx_enqueue = 0;
    7db4:	2500      	movs	r5, #0
    7db6:	e6fb      	b.n	7bb0 <isr+0x1020>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    7db8:	7a71      	ldrb	r1, [r6, #9]
    7dba:	2007      	movs	r0, #7
    7dbc:	f7fc fd14 	bl	47e8 <pdu_len_cmp>
    7dc0:	2800      	cmp	r0, #0
    7dc2:	d18b      	bne.n	7cdc <isr+0x114c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7dc4:	4886      	ldr	r0, [pc, #536]	; (7fe0 <isr+0x1450>)
    7dc6:	f7fa fe84 	bl	2ad2 <mem_acquire>
	if (!node_tx) {
    7dca:	4601      	mov	r1, r0
    7dcc:	2800      	cmp	r0, #0
    7dce:	f43f ad96 	beq.w	78fe <isr+0xd6e>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7dd2:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    7dd4:	7205      	strb	r5, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7dd6:	f043 0303 	orr.w	r3, r3, #3
    7dda:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    7ddc:	2302      	movs	r3, #2
    7dde:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    7de0:	2307      	movs	r3, #7
    7de2:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    7de4:	4620      	mov	r0, r4
    7de6:	f7fe f9c5 	bl	6174 <ctrl_tx_enqueue>
    7dea:	e7e3      	b.n	7db4 <isr+0x1224>
		if (_radio.conn_curr->role ||
    7dec:	f994 301d 	ldrsb.w	r3, [r4, #29]
    7df0:	2b00      	cmp	r3, #0
    7df2:	dbe7      	blt.n	7dc4 <isr+0x1234>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    7df4:	7a71      	ldrb	r1, [r6, #9]
    7df6:	2019      	movs	r0, #25
    7df8:	f7fc fcf6 	bl	47e8 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    7dfc:	2800      	cmp	r0, #0
    7dfe:	d0e1      	beq.n	7dc4 <isr+0x1234>
			if (!(p->phys & 0x01)) {
    7e00:	7b35      	ldrb	r5, [r6, #12]
    7e02:	f015 0501 	ands.w	r5, r5, #1
    7e06:	f43f aed3 	beq.w	7bb0 <isr+0x1020>
			if (conn->llcp_req != conn->llcp_ack) {
    7e0a:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    7e0e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    7e12:	429a      	cmp	r2, r3
    7e14:	d1ce      	bne.n	7db4 <isr+0x1224>
			memcpy(&conn->llcp.chan_map.chm[0],
    7e16:	2205      	movs	r2, #5
    7e18:	4972      	ldr	r1, [pc, #456]	; (7fe4 <isr+0x1454>)
    7e1a:	f104 0061 	add.w	r0, r4, #97	; 0x61
    7e1e:	f7f8 fbc1 	bl	5a4 <memcpy>
			conn->llcp.chan_map.initiate = 1;
    7e22:	2301      	movs	r3, #1
    7e24:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			conn->llcp_type = LLCP_CHAN_MAP;
    7e28:	2302      	movs	r3, #2
    7e2a:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			conn->llcp_ack--;
    7e2e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    7e32:	3b01      	subs	r3, #1
    7e34:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    7e38:	e7bc      	b.n	7db4 <isr+0x1224>
		if (_radio.crc_expire == 0) {
    7e3a:	f89b 3d01 	ldrb.w	r3, [fp, #3329]	; 0xd01
    7e3e:	b913      	cbnz	r3, 7e46 <isr+0x12b6>
			_radio.crc_expire = 2;
    7e40:	2302      	movs	r3, #2
    7e42:	f88b 3d01 	strb.w	r3, [fp, #3329]	; 0xd01
		_radio.crc_expire--;
    7e46:	f89b 4d01 	ldrb.w	r4, [fp, #3329]	; 0xd01
		if (!_radio.conn_curr->supervision_expire) {
    7e4a:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
		_radio.crc_expire--;
    7e4e:	3c01      	subs	r4, #1
    7e50:	b2e4      	uxtb	r4, r4
    7e52:	f88b 4d01 	strb.w	r4, [fp, #3329]	; 0xd01
		if (!_radio.conn_curr->supervision_expire) {
    7e56:	8e1d      	ldrh	r5, [r3, #48]	; 0x30
		crc_close = (_radio.crc_expire == 0);
    7e58:	fab4 f484 	clz	r4, r4
    7e5c:	0964      	lsrs	r4, r4, #5
		if (!_radio.conn_curr->supervision_expire) {
    7e5e:	b91d      	cbnz	r5, 7e68 <isr+0x12d8>
			_radio.conn_curr->supervision_expire =
    7e60:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    7e62:	861a      	strh	r2, [r3, #48]	; 0x30
	struct radio_pdu_node_tx *tx_release = NULL;
    7e64:	46a8      	mov	r8, r5
    7e66:	e551      	b.n	790c <isr+0xd7c>
	u8_t rx_enqueue = 0;
    7e68:	2500      	movs	r5, #0
    7e6a:	e7fb      	b.n	7e64 <isr+0x12d4>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    7e6c:	2303      	movs	r3, #3
    7e6e:	e56e      	b.n	794e <isr+0xdbe>
			radio_switch_complete_and_disable();
    7e70:	f002 faa4 	bl	a3bc <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    7e74:	990d      	ldr	r1, [sp, #52]	; 0x34
    7e76:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    7e7a:	780b      	ldrb	r3, [r1, #0]
    7e7c:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
    7e80:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    7e84:	f3c2 0240 	ubfx	r2, r2, #1, #1
    7e88:	f362 0382 	bfi	r3, r2, #2, #1
    7e8c:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    7e8e:	f7fd faca 	bl	5426 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    7e92:	f002 fa41 	bl	a318 <radio_is_ready>
    7e96:	2800      	cmp	r0, #0
    7e98:	f43f acfd 	beq.w	7896 <isr+0xd06>
    7e9c:	f7fe becc 	b.w	6c38 <isr+0xa8>
		radio_tmr_tifs_set(RADIO_TIFS);
    7ea0:	2096      	movs	r0, #150	; 0x96
    7ea2:	f002 fb05 	bl	a4b0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    7ea6:	2000      	movs	r0, #0
    7ea8:	f002 fa72 	bl	a390 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    7eac:	f002 fbdc 	bl	a668 <radio_tmr_end_capture>
    7eb0:	e7e0      	b.n	7e74 <isr+0x12e4>
	switch (_radio.role) {
    7eb2:	f89b 2013 	ldrb.w	r2, [fp, #19]
    7eb6:	2a04      	cmp	r2, #4
    7eb8:	f63e aebe 	bhi.w	6c38 <isr+0xa8>
    7ebc:	e8df f012 	tbh	[pc, r2, lsl #1]
    7ec0:	000501b6 	.word	0x000501b6
    7ec4:	00ca009e 	.word	0x00ca009e
    7ec8:	00ca      	.short	0x00ca
	if(radio_ext_adv_enable_flag ==  true){
    7eca:	4a47      	ldr	r2, [pc, #284]	; (7fe8 <isr+0x1458>)
    7ecc:	7812      	ldrb	r2, [r2, #0]
    7ece:	2a00      	cmp	r2, #0
    7ed0:	d03b      	beq.n	7f4a <isr+0x13ba>
		if((chain_flag ==1) &&
    7ed2:	4a46      	ldr	r2, [pc, #280]	; (7fec <isr+0x145c>)
    7ed4:	7812      	ldrb	r2, [r2, #0]
    7ed6:	2a01      	cmp	r2, #1
    7ed8:	d10b      	bne.n	7ef2 <isr+0x1362>
    7eda:	f89b 2c8d 	ldrb.w	r2, [fp, #3213]	; 0xc8d
    7ede:	f89b 3c8c 	ldrb.w	r3, [fp, #3212]	; 0xc8c
    7ee2:	429a      	cmp	r2, r3
    7ee4:	d00f      	beq.n	7f06 <isr+0x1376>
			ext_adv_setup();
    7ee6:	f7fd f8a1 	bl	502c <ext_adv_setup>
			radio_tx_enable();
    7eea:	f002 f9f1 	bl	a2d0 <radio_tx_enable>
    7eee:	f7fe beb4 	b.w	6c5a <isr+0xca>
		}else if ((_radio.state == STATE_CLOSE) && (chain_flag == 0) &&
    7ef2:	2b03      	cmp	r3, #3
    7ef4:	d107      	bne.n	7f06 <isr+0x1376>
    7ef6:	b932      	cbnz	r2, 7f06 <isr+0x1376>
			(_radio.advertiser.chan_map_current != 0)) {
    7ef8:	f89b 3028 	ldrb.w	r3, [fp, #40]	; 0x28
		}else if ((_radio.state == STATE_CLOSE) && (chain_flag == 0) &&
    7efc:	075e      	lsls	r6, r3, #29
    7efe:	d002      	beq.n	7f06 <isr+0x1376>
			adv_setup();
    7f00:	f7fc ff86 	bl	4e10 <adv_setup>
    7f04:	e7f1      	b.n	7eea <isr+0x135a>
			radio_filter_disable();
    7f06:	f002 faa3 	bl	a450 <radio_filter_disable>
	_radio.role = ROLE_NONE;
    7f0a:	2400      	movs	r4, #0
    7f0c:	f88b 4013 	strb.w	r4, [fp, #19]
	_radio.state = STATE_NONE;
    7f10:	f88b 4014 	strb.w	r4, [fp, #20]
	_radio.ticker_id_event = 0;
    7f14:	f88b 4011 	strb.w	r4, [fp, #17]
	radio_tmr_stop();
    7f18:	f002 fb48 	bl	a5ac <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    7f1c:	4622      	mov	r2, r4
    7f1e:	4621      	mov	r1, r4
    7f20:	4620      	mov	r0, r4
    7f22:	4b33      	ldr	r3, [pc, #204]	; (7ff0 <isr+0x1460>)
    7f24:	f7fa fe8e 	bl	2c44 <mayfly_enqueue>
	LL_ASSERT(!retval);
    7f28:	4604      	mov	r4, r0
    7f2a:	2800      	cmp	r0, #0
    7f2c:	f47e ae84 	bne.w	6c38 <isr+0xa8>
	clock_control_off(_radio.hf_clock, NULL);
    7f30:	f8db 0000 	ldr.w	r0, [fp]
    7f34:	6843      	ldr	r3, [r0, #4]
    7f36:	4621      	mov	r1, r4
    7f38:	685b      	ldr	r3, [r3, #4]
    7f3a:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    7f3c:	2201      	movs	r2, #1
    7f3e:	4611      	mov	r1, r2
    7f40:	4620      	mov	r0, r4
    7f42:	f7fa fe57 	bl	2bf4 <mayfly_enable>
    7f46:	f7fe beac 	b.w	6ca2 <isr+0x112>
		if ((_radio.state == STATE_CLOSE) &&
    7f4a:	2b03      	cmp	r3, #3
    7f4c:	d103      	bne.n	7f56 <isr+0x13c6>
			(_radio.advertiser.chan_map_current != 0)) {
    7f4e:	f89b 3028 	ldrb.w	r3, [fp, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    7f52:	075d      	lsls	r5, r3, #29
    7f54:	d1d4      	bne.n	7f00 <isr+0x1370>
			radio_filter_disable();
    7f56:	f002 fa7b 	bl	a450 <radio_filter_disable>
			if ((_radio.state == STATE_CLOSE) &&
    7f5a:	f89b 3014 	ldrb.w	r3, [fp, #20]
    7f5e:	2b03      	cmp	r3, #3
    7f60:	d1d3      	bne.n	7f0a <isr+0x137a>
				(!_radio.advertiser.is_hdcd)) {
    7f62:	f89b 4028 	ldrb.w	r4, [fp, #40]	; 0x28
			if ((_radio.state == STATE_CLOSE) &&
    7f66:	f014 0440 	ands.w	r4, r4, #64	; 0x40
    7f6a:	d1ce      	bne.n	7f0a <isr+0x137a>
				entropy_get_entropy_isr(_radio.entropy, &random_delay,
    7f6c:	2201      	movs	r2, #1
    7f6e:	a90d      	add	r1, sp, #52	; 0x34
    7f70:	f8db 0004 	ldr.w	r0, [fp, #4]
    7f74:	f7f9 ff86 	bl	1e84 <entropy_get_entropy_isr>
				random_delay %= 10;
    7f78:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
						HAL_TICKER_US_TO_TICKS(random_delay *
    7f7c:	481d      	ldr	r0, [pc, #116]	; (7ff4 <isr+0x1464>)
				random_delay %= 10;
    7f7e:	230a      	movs	r3, #10
    7f80:	fbb1 f2f3 	udiv	r2, r1, r3
    7f84:	fb03 1212 	mls	r2, r3, r2, r1
				random_delay += 1;
    7f88:	3201      	adds	r2, #1
    7f8a:	b2d2      	uxtb	r2, r2
    7f8c:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
						HAL_TICKER_US_TO_TICKS(random_delay *
    7f90:	b2d2      	uxtb	r2, r2
    7f92:	fba2 0100 	umull	r0, r1, r2, r0
    7f96:	23e8      	movs	r3, #232	; 0xe8
    7f98:	fb03 1102 	mla	r1, r3, r2, r1
    7f9c:	a30e      	add	r3, pc, #56	; (adr r3, 7fd8 <isr+0x1448>)
    7f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    7fa2:	f7f8 f937 	bl	214 <__aeabi_uldivmod>
				ticker_status =
    7fa6:	f241 1309 	movw	r3, #4361	; 0x1109
    7faa:	9306      	str	r3, [sp, #24]
    7fac:	4b12      	ldr	r3, [pc, #72]	; (7ff8 <isr+0x1468>)
    7fae:	9305      	str	r3, [sp, #20]
    7fb0:	9404      	str	r4, [sp, #16]
    7fb2:	b283      	uxth	r3, r0
    7fb4:	9403      	str	r4, [sp, #12]
    7fb6:	9402      	str	r4, [sp, #8]
    7fb8:	9401      	str	r4, [sp, #4]
    7fba:	9400      	str	r4, [sp, #0]
    7fbc:	2205      	movs	r2, #5
    7fbe:	4621      	mov	r1, r4
    7fc0:	4620      	mov	r0, r4
    7fc2:	f7fb fc39 	bl	3838 <ticker_update>
				LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7fc6:	f030 0302 	bics.w	r3, r0, #2
    7fca:	d09e      	beq.n	7f0a <isr+0x137a>
    7fcc:	f89b 3012 	ldrb.w	r3, [fp, #18]
    7fd0:	2b05      	cmp	r3, #5
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7fd2:	d09a      	beq.n	7f0a <isr+0x137a>
    7fd4:	f7fe be30 	b.w	6c38 <isr+0xa8>
    7fd8:	1afd498d 	.word	0x1afd498d
    7fdc:	00000007 	.word	0x00000007
    7fe0:	20000ffc 	.word	0x20000ffc
    7fe4:	20000fc2 	.word	0x20000fc2
    7fe8:	20001079 	.word	0x20001079
    7fec:	20001031 	.word	0x20001031
    7ff0:	20004f10 	.word	0x20004f10
    7ff4:	d4a51000 	.word	0xd4a51000
    7ff8:	00005a69 	.word	0x00005a69
	if (_radio.state == STATE_CLOSE) {
    7ffc:	2b03      	cmp	r3, #3
    7ffe:	d11a      	bne.n	8036 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36>
		radio_tmr_tifs_set(RADIO_TIFS);
    8000:	2096      	movs	r0, #150	; 0x96
    8002:	f002 fa55 	bl	a4b0 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    8006:	2300      	movs	r3, #0
    8008:	4619      	mov	r1, r3
    800a:	461a      	mov	r2, r3
    800c:	4618      	mov	r0, r3
    800e:	f002 f9cb 	bl	a3a8 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    8012:	f8db 3d1c 	ldr.w	r3, [fp, #3356]	; 0xd1c
    8016:	f89b 2d21 	ldrb.w	r2, [fp, #3361]	; 0xd21
		radio_pkt_rx_set(_radio.packet_rx
    801a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    801e:	3008      	adds	r0, #8
    8020:	f002 f936 	bl	a290 <radio_pkt_rx_set>
		radio_rssi_measure();
    8024:	f002 f9d8 	bl	a3d8 <radio_rssi_measure>
		_radio.state = STATE_RX;
    8028:	2301      	movs	r3, #1
    802a:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_rx_enable();
    802e:	f002 f949 	bl	a2c4 <radio_rx_enable>
    8032:	f7fe be12 	b.w	6c5a <isr+0xca>
		radio_filter_disable();
    8036:	f002 fa0b 	bl	a450 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    803a:	f89b 3014 	ldrb.w	r3, [fp, #20]
    803e:	2b05      	cmp	r3, #5
    8040:	f47f af63 	bne.w	7f0a <isr+0x137a>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8044:	2300      	movs	r3, #0
    8046:	9300      	str	r3, [sp, #0]
    8048:	2204      	movs	r2, #4
    804a:	4619      	mov	r1, r3
    804c:	4618      	mov	r0, r3
    804e:	f7fb fc41 	bl	38d4 <ticker_stop>
    8052:	e75a      	b.n	7f0a <isr+0x137a>
	if (_radio.conn_curr == 0) {
    8054:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    8058:	2800      	cmp	r0, #0
    805a:	f43f af56 	beq.w	7f0a <isr+0x137a>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    805e:	f890 109b 	ldrb.w	r1, [r0, #155]	; 0x9b
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    8062:	b189      	cbz	r1, 8088 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x88>
    8064:	f89b 3013 	ldrb.w	r3, [fp, #19]
    8068:	2b03      	cmp	r3, #3
    806a:	d003      	beq.n	8074 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x74>
    806c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    8070:	07dc      	lsls	r4, r3, #31
    8072:	d509      	bpl.n	8088 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x88>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    8074:	f7fd fa52 	bl	551c <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    8078:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    807c:	f7fd fc0c 	bl	5898 <connection_release>
			_radio.conn_curr = NULL;
    8080:	2300      	movs	r3, #0
    8082:	f8cb 3cfc 	str.w	r3, [fp, #3324]	; 0xcfc
    8086:	e740      	b.n	7f0a <isr+0x137a>
	latency_event = _radio.conn_curr->latency_event;
    8088:	8d46      	ldrh	r6, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    808a:	f89b 7d00 	ldrb.w	r7, [fp, #3328]	; 0xd00
	elapsed_event = latency_event + 1;
    808e:	1c75      	adds	r5, r6, #1
    8090:	b2ad      	uxth	r5, r5
	if (_radio.packet_counter &&
    8092:	2f00      	cmp	r7, #0
    8094:	d06b      	beq.n	816e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16e>
		if (_radio.role == ROLE_SLAVE) {
    8096:	f89b 3013 	ldrb.w	r3, [fp, #19]
    809a:	2b03      	cmp	r3, #3
    809c:	d15b      	bne.n	8156 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x156>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    809e:	f002 fad7 	bl	a650 <radio_tmr_aa_restore>
    80a2:	4680      	mov	r8, r0
						     radio_tmr_ready_get();
    80a4:	f002 fada 	bl	a65c <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    80a8:	f8db 7cfc 	ldr.w	r7, [fp, #3324]	; 0xcfc
    80ac:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8254 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x254>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    80b0:	eba8 0800 	sub.w	r8, r8, r0
			window_widening_event_us =
    80b4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    80b6:	f100 0a58 	add.w	sl, r0, #88	; 0x58
			if (start_to_address_actual_us <=
    80ba:	45d0      	cmp	r8, sl
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    80bc:	a363      	add	r3, pc, #396	; (adr r3, 824c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24c>)
    80be:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    80c2:	d83b      	bhi.n	813c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13c>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    80c4:	fba0 0109 	umull	r0, r1, r0, r9
    80c8:	f7f8 f8a4 	bl	214 <__aeabi_uldivmod>
    80cc:	b284      	uxth	r4, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    80ce:	ebaa 0008 	sub.w	r0, sl, r8
    80d2:	a35e      	add	r3, pc, #376	; (adr r3, 824c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24c>)
    80d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    80d8:	fba0 0109 	umull	r0, r1, r0, r9
    80dc:	f7f8 f89a 	bl	214 <__aeabi_uldivmod>
    80e0:	b283      	uxth	r3, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
    80e2:	2200      	movs	r2, #0
    80e4:	64ba      	str	r2, [r7, #72]	; 0x48
			_radio.conn_curr->slave.window_size_event_us = 0;
    80e6:	653a      	str	r2, [r7, #80]	; 0x50
			if (_radio.conn_curr->pkt_tx_head) {
    80e8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
    80ec:	b36a      	cbz	r2, 814a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14a>
				if (pdu_data_tx->len ||
    80ee:	7952      	ldrb	r2, [r2, #5]
    80f0:	b912      	cbnz	r2, 80f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf8>
    80f2:	f897 2101 	ldrb.w	r2, [r7, #257]	; 0x101
    80f6:	b10a      	cbz	r2, 80fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfc>
					_radio.conn_curr->latency_event = 0;
    80f8:	2200      	movs	r2, #0
				_radio.conn_curr->latency_event =
    80fa:	857a      	strh	r2, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    80fc:	f8db 2cfc 	ldr.w	r2, [fp, #3324]	; 0xcfc
    8100:	2100      	movs	r1, #0
    8102:	8591      	strh	r1, [r2, #44]	; 0x2c
	if (_radio.conn_curr->supervision_expire) {
    8104:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    8108:	8e02      	ldrh	r2, [r0, #48]	; 0x30
    810a:	b1aa      	cbz	r2, 8138 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x138>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    810c:	4295      	cmp	r5, r2
    810e:	f080 8085 	bcs.w	821c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x21c>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    8112:	1b52      	subs	r2, r2, r5
    8114:	b292      	uxth	r2, r2
			_radio.conn_curr->latency_event = 0;
    8116:	2100      	movs	r1, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    8118:	2a06      	cmp	r2, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    811a:	8602      	strh	r2, [r0, #48]	; 0x30
			_radio.conn_curr->latency_event = 0;
    811c:	8541      	strh	r1, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    811e:	d97f      	bls.n	8220 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x220>
			else if (_radio.role == ROLE_SLAVE) {
    8120:	f89b 2013 	ldrb.w	r2, [fp, #19]
    8124:	2a03      	cmp	r2, #3
    8126:	d107      	bne.n	8138 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x138>
				if (latency_event != 0) {
    8128:	2e00      	cmp	r6, #0
    812a:	d179      	bne.n	8220 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x220>
					force = _radio.conn_curr->slave.force & 0x01;
    812c:	6d47      	ldr	r7, [r0, #84]	; 0x54
					_radio.conn_curr->slave.force >>= 1;
    812e:	087a      	lsrs	r2, r7, #1
					if (force) {
    8130:	f017 0701 	ands.w	r7, r7, #1
    8134:	d135      	bne.n	81a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a2>
					_radio.conn_curr->slave.force >>= 1;
    8136:	6542      	str	r2, [r0, #84]	; 0x54
	force = 0;
    8138:	2700      	movs	r7, #0
    813a:	e035      	b.n	81a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a8>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    813c:	fba8 0109 	umull	r0, r1, r8, r9
    8140:	f7f8 f868 	bl	214 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    8144:	2302      	movs	r3, #2
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    8146:	b284      	uxth	r4, r0
    8148:	e7cb      	b.n	80e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe2>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    814a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    814e:	07d2      	lsls	r2, r2, #31
    8150:	d5d4      	bpl.n	80fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfc>
				_radio.conn_curr->latency_event =
    8152:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8154:	e7d1      	b.n	80fa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfa>
		} else if (reason_peer) {
    8156:	b141      	cbz	r1, 816a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16a>
			_radio.conn_curr->master.terminate_ack = 1;
    8158:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    815c:	f043 0301 	orr.w	r3, r3, #1
    8160:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	ticks_drift_minus = 0;
    8164:	2300      	movs	r3, #0
	ticks_drift_plus = 0;
    8166:	461c      	mov	r4, r3
    8168:	e7c8      	b.n	80fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfc>
	ticks_drift_minus = 0;
    816a:	460b      	mov	r3, r1
    816c:	e7fb      	b.n	8166 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x166>
	else if (_radio.conn_curr->connect_expire) {
    816e:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    8170:	b184      	cbz	r4, 8194 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x194>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    8172:	42a5      	cmp	r5, r4
    8174:	d204      	bcs.n	8180 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x180>
			_radio.conn_curr->connect_expire -= elapsed_event;
    8176:	1b64      	subs	r4, r4, r5
    8178:	8584      	strh	r4, [r0, #44]	; 0x2c
	ticks_drift_minus = 0;
    817a:	463c      	mov	r4, r7
    817c:	4623      	mov	r3, r4
    817e:	e7c1      	b.n	8104 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    8180:	213e      	movs	r1, #62	; 0x3e
    8182:	f7fd f9cb 	bl	551c <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    8186:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    818a:	f7fd fb85 	bl	5898 <connection_release>
			_radio.conn_curr = NULL;
    818e:	f8cb 7cfc 	str.w	r7, [fp, #3324]	; 0xcfc
    8192:	e6ba      	b.n	7f0a <isr+0x137a>
		if (!_radio.conn_curr->supervision_expire) {
    8194:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    8196:	2b00      	cmp	r3, #0
    8198:	d1f0      	bne.n	817c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17c>
			_radio.conn_curr->supervision_expire =
    819a:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    819c:	8602      	strh	r2, [r0, #48]	; 0x30
	ticks_drift_plus = 0;
    819e:	461c      	mov	r4, r3
    81a0:	e7b0      	b.n	8104 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104>
						_radio.conn_curr->slave.force |=
    81a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    81a6:	6542      	str	r2, [r0, #84]	; 0x54
	if (_radio.conn_curr->procedure_expire != 0) {
    81a8:	8e82      	ldrh	r2, [r0, #52]	; 0x34
    81aa:	b11a      	cbz	r2, 81b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b4>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    81ac:	4295      	cmp	r5, r2
    81ae:	d239      	bcs.n	8224 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x224>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    81b0:	1b55      	subs	r5, r2, r5
    81b2:	8685      	strh	r5, [r0, #52]	; 0x34
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    81b4:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    81b8:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    81bc:	4291      	cmp	r1, r2
    81be:	d006      	beq.n	81ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ce>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    81c0:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    81c4:	3a01      	subs	r2, #1
    81c6:	2a01      	cmp	r2, #1
		_radio.conn_curr->latency_event = 0;
    81c8:	bf9c      	itt	ls
    81ca:	2200      	movls	r2, #0
    81cc:	8542      	strhls	r2, [r0, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    81ce:	b917      	cbnz	r7, 81d6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d6>
    81d0:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    81d2:	42b2      	cmp	r2, r6
    81d4:	d028      	beq.n	8228 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x228>
		lazy = _radio.conn_curr->latency_event + 1;
    81d6:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
    81d8:	3101      	adds	r1, #1
    81da:	b289      	uxth	r1, r1
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    81dc:	b924      	cbnz	r4, 81e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e8>
    81de:	b91b      	cbnz	r3, 81e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e8>
    81e0:	b911      	cbnz	r1, 81e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e8>
	    (lazy != 0) || (force != 0)) {
    81e2:	2f00      	cmp	r7, #0
    81e4:	f43f ae91 	beq.w	7f0a <isr+0x137a>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    81e8:	f890 5020 	ldrb.w	r5, [r0, #32]
		ticker_status =
    81ec:	4a16      	ldr	r2, [pc, #88]	; (8248 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x248>)
    81ee:	9103      	str	r1, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    81f0:	3507      	adds	r5, #7
		ticker_status =
    81f2:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    81f4:	b2ed      	uxtb	r5, r5
		ticker_status =
    81f6:	9205      	str	r2, [sp, #20]
    81f8:	9300      	str	r3, [sp, #0]
				      (void *)(u32_t)ticker_id);
    81fa:	9506      	str	r5, [sp, #24]
		ticker_status =
    81fc:	4623      	mov	r3, r4
    81fe:	9704      	str	r7, [sp, #16]
    8200:	9102      	str	r1, [sp, #8]
    8202:	9101      	str	r1, [sp, #4]
    8204:	462a      	mov	r2, r5
    8206:	4608      	mov	r0, r1
    8208:	f7fb fb16 	bl	3838 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    820c:	f030 0302 	bics.w	r3, r0, #2
    8210:	f43f ae7b 	beq.w	7f0a <isr+0x137a>
    8214:	f89b 3012 	ldrb.w	r3, [fp, #18]
    8218:	429d      	cmp	r5, r3
    821a:	e6da      	b.n	7fd2 <isr+0x1442>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    821c:	2108      	movs	r1, #8
    821e:	e729      	b.n	8074 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x74>
				force = 1;
    8220:	2701      	movs	r7, #1
    8222:	e7c1      	b.n	81a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a8>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    8224:	2122      	movs	r1, #34	; 0x22
    8226:	e725      	b.n	8074 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x74>
	lazy = 0;
    8228:	4639      	mov	r1, r7
    822a:	e7d7      	b.n	81dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1dc>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    822c:	3b04      	subs	r3, #4
    822e:	2b01      	cmp	r3, #1
    8230:	f63e ad02 	bhi.w	6c38 <isr+0xa8>
		_radio.state = STATE_NONE;
    8234:	2300      	movs	r3, #0
    8236:	f88b 3014 	strb.w	r3, [fp, #20]
    823a:	f7fe bd32 	b.w	6ca2 <isr+0x112>
    823e:	f7fd fc54 	bl	5aea <isr.part.46>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    8242:	2328      	movs	r3, #40	; 0x28
    8244:	e507      	b.n	7c56 <isr+0x10c6>
    8246:	bf00      	nop
    8248:	00005a51 	.word	0x00005a51
    824c:	1afd498d 	.word	0x1afd498d
    8250:	00000007 	.word	0x00000007
    8254:	3b9aca00 	.word	0x3b9aca00

00008258 <mayfly_xtal_stop_calc>:
{
    8258:	b5f0      	push	{r4, r5, r6, r7, lr}
    825a:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    825c:	2302      	movs	r3, #2
    825e:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    8260:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    8262:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    8264:	4e74      	ldr	r6, [pc, #464]	; (8438 <mayfly_xtal_stop_calc+0x1e0>)
				    _radio.connection_count));
    8266:	4d75      	ldr	r5, [pc, #468]	; (843c <mayfly_xtal_stop_calc+0x1e4>)
	struct connection *conn_curr = NULL;
    8268:	930a      	str	r3, [sp, #40]	; 0x28
{
    826a:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    826c:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    826e:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    8272:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    8274:	ab09      	add	r3, sp, #36	; 0x24
    8276:	9302      	str	r3, [sp, #8]
    8278:	ab0c      	add	r3, sp, #48	; 0x30
    827a:	9300      	str	r3, [sp, #0]
    827c:	9601      	str	r6, [sp, #4]
    827e:	ab0d      	add	r3, sp, #52	; 0x34
    8280:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    8284:	2101      	movs	r1, #1
    8286:	2000      	movs	r0, #0
    8288:	f7fb fb60 	bl	394c <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    828c:	2802      	cmp	r0, #2
    828e:	d00b      	beq.n	82a8 <mayfly_xtal_stop_calc+0x50>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    8290:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8292:	b16b      	cbz	r3, 82b0 <mayfly_xtal_stop_calc+0x58>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8294:	4040      	eors	r0, r0
    8296:	f380 8811 	msr	BASEPRI, r0
    829a:	f04f 0004 	mov.w	r0, #4
    829e:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    82a0:	2101      	movs	r1, #1
    82a2:	2000      	movs	r0, #0
    82a4:	f7fb fbd0 	bl	3a48 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    82a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    82aa:	2b02      	cmp	r3, #2
    82ac:	d0f8      	beq.n	82a0 <mayfly_xtal_stop_calc+0x48>
    82ae:	e7ef      	b.n	8290 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    82b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    82b4:	2bff      	cmp	r3, #255	; 0xff
    82b6:	d004      	beq.n	82c2 <mayfly_xtal_stop_calc+0x6a>
    82b8:	f895 2cf8 	ldrb.w	r2, [r5, #3320]	; 0xcf8
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    82bc:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    82be:	4293      	cmp	r3, r2
    82c0:	dad8      	bge.n	8274 <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    82c2:	1f5a      	subs	r2, r3, #5
    82c4:	b2d2      	uxtb	r2, r2
    82c6:	2af9      	cmp	r2, #249	; 0xf9
    82c8:	4f5d      	ldr	r7, [pc, #372]	; (8440 <mayfly_xtal_stop_calc+0x1e8>)
    82ca:	d805      	bhi.n	82d8 <mayfly_xtal_stop_calc+0x80>
				_radio.connection_count))) {
    82cc:	4a5b      	ldr	r2, [pc, #364]	; (843c <mayfly_xtal_stop_calc+0x1e4>)
    82ce:	f892 2cf8 	ldrb.w	r2, [r2, #3320]	; 0xcf8
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    82d2:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    82d4:	4293      	cmp	r3, r2
    82d6:	db06      	blt.n	82e6 <mayfly_xtal_stop_calc+0x8e>
		if (s_xtal_retained) {
    82d8:	783b      	ldrb	r3, [r7, #0]
    82da:	b113      	cbz	r3, 82e2 <mayfly_xtal_stop_calc+0x8a>
    82dc:	2001      	movs	r0, #1
    82de:	f7fd f865 	bl	53ac <mayfly_xtal_retain.part.16>
}
    82e2:	b00f      	add	sp, #60	; 0x3c
    82e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    82e6:	a90a      	add	r1, sp, #40	; 0x28
    82e8:	b2e0      	uxtb	r0, r4
    82ea:	f7fd f841 	bl	5370 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    82ee:	2800      	cmp	r0, #0
    82f0:	d0d0      	beq.n	8294 <mayfly_xtal_stop_calc+0x3c>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    82f2:	6803      	ldr	r3, [r0, #0]
    82f4:	6844      	ldr	r4, [r0, #4]
    82f6:	2b00      	cmp	r3, #0
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    82f8:	bfb8      	it	lt
    82fa:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    82fc:	429c      	cmp	r4, r3
    82fe:	bf38      	it	cc
    8300:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    8302:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    8304:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    8308:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    830a:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    830c:	f7fd f830 	bl	5370 <hdr_conn_get>
	LL_ASSERT(hdr_next);
    8310:	4605      	mov	r5, r0
    8312:	2800      	cmp	r0, #0
    8314:	d0be      	beq.n	8294 <mayfly_xtal_stop_calc+0x3c>
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    8316:	6886      	ldr	r6, [r0, #8]
    8318:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    831a:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    831c:	429e      	cmp	r6, r3
    831e:	bf38      	it	cc
    8320:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    8322:	2a00      	cmp	r2, #0
    8324:	da05      	bge.n	8332 <mayfly_xtal_stop_calc+0xda>
		ticks_to_expire -=
    8326:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    8328:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    832c:	4433      	add	r3, r6
    832e:	1a9b      	subs	r3, r3, r2
    8330:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    8332:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    8334:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    8338:	4293      	cmp	r3, r2
    833a:	d20b      	bcs.n	8354 <mayfly_xtal_stop_calc+0xfc>
		if (s_xtal_retained) {
    833c:	783b      	ldrb	r3, [r7, #0]
    833e:	b113      	cbz	r3, 8346 <mayfly_xtal_stop_calc+0xee>
    8340:	2001      	movs	r0, #1
    8342:	f7fd f833 	bl	53ac <mayfly_xtal_retain.part.16>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    8346:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    834a:	2101      	movs	r1, #1
    834c:	4628      	mov	r0, r5
    834e:	f7fd f8c1 	bl	54d4 <prepare_normal_set>
    8352:	e7c6      	b.n	82e2 <mayfly_xtal_stop_calc+0x8a>
		if (!s_xtal_retained) {
    8354:	783a      	ldrb	r2, [r7, #0]
    8356:	b93a      	cbnz	r2, 8368 <mayfly_xtal_stop_calc+0x110>
			s_xtal_retained = 1;
    8358:	2001      	movs	r0, #1
			retval = mayfly_enqueue(caller_id,
    835a:	4b3a      	ldr	r3, [pc, #232]	; (8444 <mayfly_xtal_stop_calc+0x1ec>)
			s_xtal_retained = 1;
    835c:	7038      	strb	r0, [r7, #0]
			retval = mayfly_enqueue(caller_id,
    835e:	4611      	mov	r1, r2
    8360:	f7fa fc70 	bl	2c44 <mayfly_enqueue>
			LL_ASSERT(!retval);
    8364:	2800      	cmp	r0, #0
    8366:	d195      	bne.n	8294 <mayfly_xtal_stop_calc+0x3c>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    8368:	682b      	ldr	r3, [r5, #0]
    836a:	2b00      	cmp	r3, #0
    836c:	db15      	blt.n	839a <mayfly_xtal_stop_calc+0x142>
    836e:	429e      	cmp	r6, r3
    8370:	d213      	bcs.n	839a <mayfly_xtal_stop_calc+0x142>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    8372:	1b9b      	subs	r3, r3, r6
			ticker_status =
    8374:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    8376:	b29b      	uxth	r3, r3
			ticker_status =
    8378:	4933      	ldr	r1, [pc, #204]	; (8448 <mayfly_xtal_stop_calc+0x1f0>)
    837a:	9105      	str	r1, [sp, #20]
    837c:	9302      	str	r3, [sp, #8]
    837e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    8382:	9506      	str	r5, [sp, #24]
    8384:	9004      	str	r0, [sp, #16]
    8386:	9003      	str	r0, [sp, #12]
    8388:	9001      	str	r0, [sp, #4]
    838a:	9000      	str	r0, [sp, #0]
    838c:	2101      	movs	r1, #1
    838e:	f7fb fa53 	bl	3838 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8392:	f030 0302 	bics.w	r3, r0, #2
    8396:	f47f af7d 	bne.w	8294 <mayfly_xtal_stop_calc+0x3c>
		if (!conn_curr || !conn_next) {
    839a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    839c:	2e00      	cmp	r6, #0
    839e:	d0a0      	beq.n	82e2 <mayfly_xtal_stop_calc+0x8a>
    83a0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    83a2:	2d00      	cmp	r5, #0
    83a4:	d09d      	beq.n	82e2 <mayfly_xtal_stop_calc+0x8a>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    83a6:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    83a8:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    83aa:	429a      	cmp	r2, r3
    83ac:	d199      	bne.n	82e2 <mayfly_xtal_stop_calc+0x8a>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    83ae:	4827      	ldr	r0, [pc, #156]	; (844c <mayfly_xtal_stop_calc+0x1f4>)
    83b0:	b292      	uxth	r2, r2
    83b2:	fba2 0100 	umull	r0, r1, r2, r0
    83b6:	f240 1323 	movw	r3, #291	; 0x123
    83ba:	fb03 1102 	mla	r1, r3, r2, r1
    83be:	a31c      	add	r3, pc, #112	; (adr r3, 8430 <mayfly_xtal_stop_calc+0x1d8>)
    83c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    83c4:	f7f7 ff26 	bl	214 <__aeabi_uldivmod>
    83c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    83ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    83ce:	2200      	movs	r2, #0
    83d0:	4298      	cmp	r0, r3
    83d2:	d318      	bcc.n	8406 <mayfly_xtal_stop_calc+0x1ae>
    83d4:	b102      	cbz	r2, 83d8 <mayfly_xtal_stop_calc+0x180>
    83d6:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    83d8:	f996 201d 	ldrsb.w	r2, [r6, #29]
    83dc:	2a00      	cmp	r2, #0
    83de:	f995 201d 	ldrsb.w	r2, [r5, #29]
    83e2:	da13      	bge.n	840c <mayfly_xtal_stop_calc+0x1b4>
    83e4:	2a00      	cmp	r2, #0
    83e6:	f6ff af7c 	blt.w	82e2 <mayfly_xtal_stop_calc+0x8a>
			     (ticks_slot_abs +
    83ea:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    83ec:	429c      	cmp	r4, r3
    83ee:	f67f af78 	bls.w	82e2 <mayfly_xtal_stop_calc+0x8a>
				status = conn_update_req(conn_curr);
    83f2:	4630      	mov	r0, r6
    83f4:	f7fc fa5c 	bl	48b0 <conn_update_req>
				if (status == 2) {
    83f8:	2802      	cmp	r0, #2
    83fa:	f47f af72 	bne.w	82e2 <mayfly_xtal_stop_calc+0x8a>
					conn_update_req(conn_next);
    83fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    8400:	f7fc fa56 	bl	48b0 <conn_update_req>
    8404:	e76d      	b.n	82e2 <mayfly_xtal_stop_calc+0x8a>
				ticks_to_expire -= ticks_conn_interval;
    8406:	1a1b      	subs	r3, r3, r0
    8408:	2201      	movs	r2, #1
    840a:	e7e1      	b.n	83d0 <mayfly_xtal_stop_calc+0x178>
			} else if (!conn_curr->role && conn_next->role &&
    840c:	2a00      	cmp	r2, #0
    840e:	f6bf af68 	bge.w	82e2 <mayfly_xtal_stop_calc+0x8a>
				    (ticks_slot_abs +
    8412:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    8414:	429c      	cmp	r4, r3
    8416:	f67f af64 	bls.w	82e2 <mayfly_xtal_stop_calc+0x8a>
				status = conn_update_req(conn_next);
    841a:	4628      	mov	r0, r5
    841c:	f7fc fa48 	bl	48b0 <conn_update_req>
				if (status == 2) {
    8420:	2802      	cmp	r0, #2
    8422:	f47f af5e 	bne.w	82e2 <mayfly_xtal_stop_calc+0x8a>
					conn_update_req(conn_curr);
    8426:	980a      	ldr	r0, [sp, #40]	; 0x28
    8428:	e7ea      	b.n	8400 <mayfly_xtal_stop_calc+0x1a8>
    842a:	bf00      	nop
    842c:	f3af 8000 	nop.w
    8430:	1afd498d 	.word	0x1afd498d
    8434:	00000007 	.word	0x00000007
    8438:	00004825 	.word	0x00004825
    843c:	200002c0 	.word	0x200002c0
    8440:	200010cc 	.word	0x200010cc
    8444:	20004f90 	.word	0x20004f90
    8448:	00004829 	.word	0x00004829
    844c:	09ce5400 	.word	0x09ce5400

00008450 <event_master>:
{
    8450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8452:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    8454:	4b49      	ldr	r3, [pc, #292]	; (857c <event_master+0x12c>)
    8456:	7cda      	ldrb	r2, [r3, #19]
{
    8458:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    845a:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    845e:	461d      	mov	r5, r3
    8460:	b12a      	cbz	r2, 846e <event_master+0x1e>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8462:	4040      	eors	r0, r0
    8464:	f380 8811 	msr	BASEPRI, r0
    8468:	f04f 0004 	mov.w	r0, #4
    846c:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    846e:	7c1b      	ldrb	r3, [r3, #16]
    8470:	8c22      	ldrh	r2, [r4, #32]
    8472:	b2db      	uxtb	r3, r3
    8474:	3207      	adds	r2, #7
    8476:	4293      	cmp	r3, r2
    8478:	d1f3      	bne.n	8462 <event_master+0x12>
	_radio.role = ROLE_MASTER;
    847a:	2204      	movs	r2, #4
	_radio.packet_counter = 0;
    847c:	f885 6d00 	strb.w	r6, [r5, #3328]	; 0xd00
	_radio.crc_expire = 0;
    8480:	f885 6d01 	strb.w	r6, [r5, #3329]	; 0xd01
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    8484:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    8486:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    8488:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    848a:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    848c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    848e:	f8c5 4cfc 	str.w	r4, [r5, #3324]	; 0xcfc
	_radio.state = STATE_TX;
    8492:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    8494:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    8496:	8526      	strh	r6, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    8498:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    849a:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    849c:	f7fd f9ae 	bl	57fc <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    84a0:	a901      	add	r1, sp, #4
    84a2:	4620      	mov	r0, r4
    84a4:	f7fe fb0e 	bl	6ac4 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    84a8:	9901      	ldr	r1, [sp, #4]
    84aa:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
    84ae:	780b      	ldrb	r3, [r1, #0]
    84b0:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    84b4:	f3c2 0240 	ubfx	r2, r2, #1, #1
    84b8:	f362 0382 	bfi	r3, r2, #2, #1
    84bc:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    84be:	4620      	mov	r0, r4
    84c0:	f7fe fa26 	bl	6910 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    84c4:	2096      	movs	r0, #150	; 0x96
    84c6:	f001 fff3 	bl	a4b0 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(0);
    84ca:	4630      	mov	r0, r6
    84cc:	f001 ff60 	bl	a390 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    84d0:	9901      	ldr	r1, [sp, #4]
    84d2:	4620      	mov	r0, r4
    84d4:	f7fc ffa7 	bl	5426 <tx_packet_set>
	if (conn->data_chan_sel) {
    84d8:	7f63      	ldrb	r3, [r4, #29]
    84da:	f013 0f40 	tst.w	r3, #64	; 0x40
    84de:	f104 0217 	add.w	r2, r4, #23
    84e2:	d021      	beq.n	8528 <event_master+0xd8>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    84e4:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    84e6:	8be1      	ldrh	r1, [r4, #30]
    84e8:	3801      	subs	r0, #1
    84ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    84ee:	b280      	uxth	r0, r0
    84f0:	f7fd fd38 	bl	5f64 <chan_sel_2>
	chan_set(data_chan_use);
    84f4:	f7fc fb6a 	bl	4bcc <chan_set>
		remainder_us = radio_tmr_start(1,
    84f8:	68ea      	ldr	r2, [r5, #12]
    84fa:	f107 0109 	add.w	r1, r7, #9
    84fe:	2001      	movs	r0, #1
    8500:	f001 ffe2 	bl	a4c8 <radio_tmr_start>
		radio_tmr_end_capture();
    8504:	f002 f8b0 	bl	a668 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    8508:	f894 1020 	ldrb.w	r1, [r4, #32]
    850c:	3107      	adds	r1, #7
    850e:	463a      	mov	r2, r7
    8510:	b2c9      	uxtb	r1, r1
    8512:	4620      	mov	r0, r4
    8514:	f7fd fd6a 	bl	5fec <preempt_calc>
	if (0 !=
    8518:	4603      	mov	r3, r0
    851a:	b328      	cbz	r0, 8568 <event_master+0x118>
		_radio.state = STATE_STOP;
    851c:	2304      	movs	r3, #4
    851e:	752b      	strb	r3, [r5, #20]
		radio_disable();
    8520:	f001 fedc 	bl	a2dc <radio_disable>
}
    8524:	b003      	add	sp, #12
    8526:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    8528:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    852a:	7fa6      	ldrb	r6, [r4, #30]
    852c:	fb01 6606 	mla	r6, r1, r6, r6
    8530:	7fe1      	ldrb	r1, [r4, #31]
    8532:	2025      	movs	r0, #37	; 0x25
    8534:	440e      	add	r6, r1
    8536:	fb96 f1f0 	sdiv	r1, r6, r0
    853a:	fb00 6611 	mls	r6, r0, r1, r6
    853e:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    8540:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    8542:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    8544:	5c51      	ldrb	r1, [r2, r1]
    8546:	f006 0607 	and.w	r6, r6, #7
    854a:	fa41 f606 	asr.w	r6, r1, r6
    854e:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    8550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    8554:	d4ce      	bmi.n	84f4 <event_master+0xa4>
		chan_index = chan_next % chan_count;
    8556:	fbb0 f1f3 	udiv	r1, r0, r3
    855a:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    855e:	b2c9      	uxtb	r1, r1
    8560:	4610      	mov	r0, r2
    8562:	f7fc f96d 	bl	4840 <chan_sel_remap>
    8566:	e7c5      	b.n	84f4 <event_master+0xa4>
		ticker_status =
    8568:	4a05      	ldr	r2, [pc, #20]	; (8580 <event_master+0x130>)
    856a:	4601      	mov	r1, r0
    856c:	f7fb fa30 	bl	39d0 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8570:	f030 0302 	bics.w	r3, r0, #2
    8574:	f47f af75 	bne.w	8462 <event_master+0x12>
    8578:	e7d4      	b.n	8524 <event_master+0xd4>
    857a:	bf00      	nop
    857c:	200002c0 	.word	0x200002c0
    8580:	00005359 	.word	0x00005359

00008584 <radio_init>:
{
    8584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
    8588:	4e3e      	ldr	r6, [pc, #248]	; (8684 <radio_init+0x100>)
{
    858a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    858c:	f89d c01c 	ldrb.w	ip, [sp, #28]
    8590:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
    8594:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    8598:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
    859c:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    859e:	f44f 7082 	mov.w	r0, #260	; 0x104
    85a2:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
    85a6:	f886 1d08 	strb.w	r1, [r6, #3336]	; 0xd08
	_radio.conn_pool = mem_radio;
    85aa:	f8c6 4cf0 	str.w	r4, [r6, #3312]	; 0xcf0
	mem_radio_end = mem_radio + mem_size;
    85ae:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
    85b0:	f10c 0401 	add.w	r4, ip, #1
    85b4:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
    85b6:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
    85b8:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
    85bc:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    85c0:	f5b4 7f81 	cmp.w	r4, #258	; 0x102
	rx_count_max += 3;
    85c4:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    85c6:	bf98      	it	ls
    85c8:	eb02 1442 	addls.w	r4, r2, r2, lsl #5
	_radio.packet_data_octets_max = packet_data_octets_max;
    85cc:	f8a6 8d14 	strh.w	r8, [r6, #3348]	; 0xd14
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
    85d0:	bf88      	it	hi
    85d2:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
    85d6:	f886 2d34 	strb.w	r2, [r6, #3380]	; 0xd34
		_radio.packet_rx_data_pool_size =
    85da:	bf8c      	ite	hi
    85dc:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    85e0:	eb02 0244 	addls.w	r2, r2, r4, lsl #1
	_radio.packet_rx_count = (rx_count_max + 1);
    85e4:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    85e8:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    85ec:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
    85f0:	bf8c      	ite	hi
    85f2:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    85f6:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
    85f8:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
    85fc:	f8a6 2d16 	strh.w	r2, [r6, #3350]	; 0xd16
	_radio.packet_tx_count = (tx_count_max + 1);
    8600:	f886 cd54 	strb.w	ip, [r6, #3412]	; 0xd54
	_radio.packet_rx = (void *)mem_radio;
    8604:	f8c6 0d1c 	str.w	r0, [r6, #3356]	; 0xd1c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    8608:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
    860c:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    8610:	f8b6 4d16 	ldrh.w	r4, [r6, #3350]	; 0xd16
	_radio.pkt_tx = (void *)mem_radio;
    8614:	f8c6 0d4c 	str.w	r0, [r6, #3404]	; 0xd4c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    8618:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    861a:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.pkt_release = (void *)mem_radio;
    861e:	f8c6 0d50 	str.w	r0, [r6, #3408]	; 0xd50
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    8622:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    8624:	f8a6 2d18 	strh.w	r2, [r6, #3352]	; 0xd18
	_radio.pkt_rx_data_pool = mem_radio;
    8628:	f8c6 0d0c 	str.w	r0, [r6, #3340]	; 0xd0c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    862c:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
    8630:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    8632:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
    8636:	f8c6 0d24 	str.w	r0, [r6, #3364]	; 0xd24
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    863a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    863e:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
    8642:	f8c6 0d38 	str.w	r0, [r6, #3384]	; 0xd38
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    8646:	340a      	adds	r4, #10
    8648:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    864c:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    864e:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
    8650:	f8a6 4d48 	strh.w	r4, [r6, #3400]	; 0xd48
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    8654:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
    8658:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
    865a:	f886 3cf8 	strb.w	r3, [r6, #3320]	; 0xcf8
	_radio.packet_rx_count = (rx_count_max + 1);
    865e:	f886 ed20 	strb.w	lr, [r6, #3360]	; 0xd20
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    8662:	f886 2d1a 	strb.w	r2, [r6, #3354]	; 0xd1a
	_radio.pkt_tx_data_pool = mem_radio;
    8666:	f8c6 0d40 	str.w	r0, [r6, #3392]	; 0xd40
	if (retcode) {
    866a:	d003      	beq.n	8674 <radio_init+0xf0>
		return (retcode + mem_size);
    866c:	442c      	add	r4, r5
}
    866e:	4620      	mov	r0, r4
    8670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
    8674:	2301      	movs	r3, #1
    8676:	f886 3d62 	strb.w	r3, [r6, #3426]	; 0xd62
	common_init();
    867a:	f7fd fbf9 	bl	5e70 <common_init>
	radio_setup();
    867e:	f001 fd57 	bl	a130 <radio_setup>
	return retcode;
    8682:	e7f4      	b.n	866e <radio_init+0xea>
    8684:	200002c0 	.word	0x200002c0

00008688 <ll_reset>:
{
    8688:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    868a:	2103      	movs	r1, #3
    868c:	2005      	movs	r0, #5
    868e:	f7fc f9a3 	bl	49d8 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    8692:	2104      	movs	r1, #4
    8694:	2006      	movs	r0, #6
    8696:	f7fc f99f 	bl	49d8 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    869a:	4c22      	ldr	r4, [pc, #136]	; (8724 <ll_reset+0x9c>)
    869c:	2500      	movs	r5, #0
    869e:	f894 2cf8 	ldrb.w	r2, [r4, #3320]	; 0xcf8
    86a2:	b2ab      	uxth	r3, r5
    86a4:	429a      	cmp	r2, r3
    86a6:	f105 0501 	add.w	r5, r5, #1
    86aa:	d835      	bhi.n	8718 <ll_reset+0x90>
	_radio.advertiser.is_enabled = 0;
    86ac:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    86b0:	f36f 13c7 	bfc	r3, #7, #1
    86b4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
    86b8:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
	_radio.advertiser.conn = NULL;
    86bc:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
    86be:	f360 0300 	bfi	r3, r0, #0, #1
    86c2:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    86c6:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    86ca:	f8b4 3d16 	ldrh.w	r3, [r4, #3350]	; 0xd16
    86ce:	fbb3 f3f2 	udiv	r3, r3, r2
    86d2:	f884 3d1a 	strb.w	r3, [r4, #3354]	; 0xd1a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    86d6:	f894 3d20 	ldrb.w	r3, [r4, #3360]	; 0xd20
	_radio.packet_rx_last = 0;
    86da:	f884 0d21 	strb.w	r0, [r4, #3361]	; 0xd21
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    86de:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
    86e0:	f884 0d55 	strb.w	r0, [r4, #3413]	; 0xd55
	_radio.packet_release_last = 0;
    86e4:	f884 0d58 	strb.w	r0, [r4, #3416]	; 0xd58
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    86e8:	f884 3d34 	strb.w	r3, [r4, #3380]	; 0xd34
	_radio.fc_ack = _radio.fc_req;
    86ec:	f894 3d60 	ldrb.w	r3, [r4, #3424]	; 0xd60
	_radio.advertiser.conn = NULL;
    86f0:	f8c4 0c18 	str.w	r0, [r4, #3096]	; 0xc18
	_radio.scanner.conn = NULL;
    86f4:	f8c4 0c54 	str.w	r0, [r4, #3156]	; 0xc54
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    86f8:	f8a4 2d18 	strh.w	r2, [r4, #3352]	; 0xd18
	_radio.packet_rx_acquire = 0;
    86fc:	f884 0d22 	strb.w	r0, [r4, #3362]	; 0xd22
	_radio.packet_tx_last = 0;
    8700:	f884 0d56 	strb.w	r0, [r4, #3414]	; 0xd56
	_radio.packet_release_first = 0;
    8704:	f884 0d57 	strb.w	r0, [r4, #3415]	; 0xd57
	_radio.fc_ack = _radio.fc_req;
    8708:	f884 3d61 	strb.w	r3, [r4, #3425]	; 0xd61
	ll_filter_reset(false);
    870c:	f001 fbe2 	bl	9ed4 <ll_filter_reset>
}
    8710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
    8714:	f7fd bbac 	b.w	5e70 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    8718:	1da8      	adds	r0, r5, #6
    871a:	21ff      	movs	r1, #255	; 0xff
    871c:	b2c0      	uxtb	r0, r0
    871e:	f7fc f95b 	bl	49d8 <role_disable>
    8722:	e7bc      	b.n	869e <ll_reset+0x16>
    8724:	200002c0 	.word	0x200002c0

00008728 <radio_adv_data_get>:
}
    8728:	4800      	ldr	r0, [pc, #0]	; (872c <radio_adv_data_get+0x4>)
    872a:	4770      	bx	lr
    872c:	200002eb 	.word	0x200002eb

00008730 <radio_aux_adv_data_get>:
}
    8730:	4800      	ldr	r0, [pc, #0]	; (8734 <radio_aux_adv_data_get+0x4>)
    8732:	4770      	bx	lr
    8734:	200004ef 	.word	0x200004ef

00008738 <radio_chain_adv_data_get>:
}
    8738:	4800      	ldr	r0, [pc, #0]	; (873c <radio_chain_adv_data_get+0x4>)
    873a:	4770      	bx	lr
    873c:	200006f3 	.word	0x200006f3

00008740 <radio_scan_data_get>:
}
    8740:	4800      	ldr	r0, [pc, #0]	; (8744 <radio_scan_data_get+0x4>)
    8742:	4770      	bx	lr
    8744:	20000cd1 	.word	0x20000cd1

00008748 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    8748:	4b02      	ldr	r3, [pc, #8]	; (8754 <ll_adv_is_enabled+0xc>)
    874a:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    874e:	09c0      	lsrs	r0, r0, #7
    8750:	4770      	bx	lr
    8752:	bf00      	nop
    8754:	200002c0 	.word	0x200002c0

00008758 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    8758:	4b05      	ldr	r3, [pc, #20]	; (8770 <radio_adv_filter_pol_get+0x18>)
    875a:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
    875e:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
    8760:	bfba      	itte	lt
    8762:	f893 002a 	ldrblt.w	r0, [r3, #42]	; 0x2a
    8766:	f000 0003 	andlt.w	r0, r0, #3
    876a:	2000      	movge	r0, #0
}
    876c:	4770      	bx	lr
    876e:	bf00      	nop
    8770:	200002c0 	.word	0x200002c0

00008774 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    8774:	4a09      	ldr	r2, [pc, #36]	; (879c <ll_scan_is_enabled+0x28>)
    8776:	f892 3c2c 	ldrb.w	r3, [r2, #3116]	; 0xc2c
    877a:	f892 0c2d 	ldrb.w	r0, [r2, #3117]	; 0xc2d
	       (_radio.scanner.conn ? BIT(2) : 0);
    877e:	f8d2 2c54 	ldr.w	r2, [r2, #3156]	; 0xc54
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    8782:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
    8786:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    8788:	f003 0301 	and.w	r3, r3, #1
    878c:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    8790:	bf14      	ite	ne
    8792:	2004      	movne	r0, #4
    8794:	2000      	moveq	r0, #0
}
    8796:	4318      	orrs	r0, r3
    8798:	4770      	bx	lr
    879a:	bf00      	nop
    879c:	200002c0 	.word	0x200002c0

000087a0 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    87a0:	4b05      	ldr	r3, [pc, #20]	; (87b8 <radio_scan_filter_pol_get+0x18>)
    87a2:	f893 0c2c 	ldrb.w	r0, [r3, #3116]	; 0xc2c
    87a6:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
    87aa:	bf1c      	itt	ne
    87ac:	f893 0c2d 	ldrbne.w	r0, [r3, #3117]	; 0xc2d
    87b0:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
    87b4:	4770      	bx	lr
    87b6:	bf00      	nop
    87b8:	200002c0 	.word	0x200002c0

000087bc <ll_tx_pwr_lvl_get>:
{
    87bc:	b510      	push	{r4, lr}
    87be:	4614      	mov	r4, r2
	conn = connection_get(handle);
    87c0:	f7fc f8f4 	bl	49ac <connection_get>
	if (!conn) {
    87c4:	b110      	cbz	r0, 87cc <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
    87c6:	2000      	movs	r0, #0
    87c8:	7020      	strb	r0, [r4, #0]
	return 0;
    87ca:	bd10      	pop	{r4, pc}
		return 1;
    87cc:	2001      	movs	r0, #1
}
    87ce:	bd10      	pop	{r4, pc}

000087d0 <ll_rx_get>:
{
    87d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    87d4:	4605      	mov	r5, r0
    87d6:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    87d8:	4918      	ldr	r1, [pc, #96]	; (883c <ll_rx_get+0x6c>)
    87da:	f8d1 3d2c 	ldr.w	r3, [r1, #3372]	; 0xd2c
    87de:	f8d1 2d30 	ldr.w	r2, [r1, #3376]	; 0xd30
    87e2:	4293      	cmp	r3, r2
    87e4:	460f      	mov	r7, r1
    87e6:	d01f      	beq.n	8828 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
    87e8:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    87ec:	f601 5157 	addw	r1, r1, #3415	; 0xd57
    87f0:	f898 2000 	ldrb.w	r2, [r8]
    87f4:	f7fc f890 	bl	4918 <tx_cmplt_get>
		if (!cmplt) {
    87f8:	4604      	mov	r4, r0
    87fa:	b9e0      	cbnz	r0, 8836 <ll_rx_get+0x66>
			first = _radio.packet_release_first;
    87fc:	ae02      	add	r6, sp, #8
    87fe:	f897 3d57 	ldrb.w	r3, [r7, #3415]	; 0xd57
    8802:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
    8806:	f897 2d58 	ldrb.w	r2, [r7, #3416]	; 0xd58
    880a:	4631      	mov	r1, r6
    880c:	f10d 0006 	add.w	r0, sp, #6
    8810:	f7fc f882 	bl	4918 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
    8814:	b934      	cbnz	r4, 8824 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
    8816:	b928      	cbnz	r0, 8824 <ll_rx_get+0x54>
			*node_rx = _node_rx;
    8818:	f8c5 8000 	str.w	r8, [r5]
}
    881c:	4620      	mov	r0, r4
    881e:	b002      	add	sp, #8
    8820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    8824:	4604      	mov	r4, r0
    8826:	e7ee      	b.n	8806 <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    8828:	f891 2d58 	ldrb.w	r2, [r1, #3416]	; 0xd58
    882c:	f601 5157 	addw	r1, r1, #3415	; 0xd57
    8830:	f7fc f872 	bl	4918 <tx_cmplt_get>
    8834:	4604      	mov	r4, r0
		*node_rx = NULL;
    8836:	2300      	movs	r3, #0
    8838:	602b      	str	r3, [r5, #0]
    883a:	e7ef      	b.n	881c <ll_rx_get+0x4c>
    883c:	200002c0 	.word	0x200002c0

00008840 <ll_rx_mem_release>:
{
    8840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
    8844:	4c16      	ldr	r4, [pc, #88]	; (88a0 <ll_rx_mem_release+0x60>)
{
    8846:	4605      	mov	r5, r0
	_node_rx = *node_rx;
    8848:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    884a:	f5a4 6651 	sub.w	r6, r4, #3344	; 0xd10
			mem_release(conn, &_radio.conn_free);
    884e:	f1a4 071c 	sub.w	r7, r4, #28
	while (_node_rx) {
    8852:	b920      	cbnz	r0, 885e <ll_rx_mem_release+0x1e>
	*node_rx = _node_rx;
    8854:	6028      	str	r0, [r5, #0]
}
    8856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
    885a:	f7fd babf 	b.w	5ddc <packet_rx_allocate.constprop.51>
		switch (_node_rx_free->hdr.type) {
    885e:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
    8860:	f8d0 8000 	ldr.w	r8, [r0]
    8864:	2a0a      	cmp	r2, #10
    8866:	d807      	bhi.n	8878 <ll_rx_mem_release+0x38>
    8868:	2301      	movs	r3, #1
    886a:	4093      	lsls	r3, r2
    886c:	f240 727e 	movw	r2, #1918	; 0x77e
    8870:	4213      	tst	r3, r2
    8872:	d107      	bne.n	8884 <ll_rx_mem_release+0x44>
    8874:	061b      	lsls	r3, r3, #24
    8876:	d40a      	bmi.n	888e <ll_rx_mem_release+0x4e>
			LL_ASSERT(0);
    8878:	4040      	eors	r0, r0
    887a:	f380 8811 	msr	BASEPRI, r0
    887e:	f04f 0004 	mov.w	r0, #4
    8882:	df02      	svc	2
			mem_release(_node_rx_free,
    8884:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
    8886:	f7fa f93e 	bl	2b06 <mem_release>
{
    888a:	4640      	mov	r0, r8
    888c:	e7e1      	b.n	8852 <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    888e:	88c2      	ldrh	r2, [r0, #6]
    8890:	f8d6 0cf0 	ldr.w	r0, [r6, #3312]	; 0xcf0
    8894:	f44f 7182 	mov.w	r1, #260	; 0x104
    8898:	f7fa f94a 	bl	2b30 <mem_get>
			mem_release(conn, &_radio.conn_free);
    889c:	4639      	mov	r1, r7
    889e:	e7f2      	b.n	8886 <ll_rx_mem_release+0x46>
    88a0:	20000fd0 	.word	0x20000fd0

000088a4 <do_radio_rx_fc_set>:
	}
}

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
	if (req == ack) {
    88a4:	4291      	cmp	r1, r2
{
    88a6:	b510      	push	{r4, lr}
    88a8:	4b14      	ldr	r3, [pc, #80]	; (88fc <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
    88aa:	d119      	bne.n	88e0 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    88ac:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
    88b0:	f8d3 4d2c 	ldr.w	r4, [r3, #3372]	; 0xd2c
    88b4:	4294      	cmp	r4, r2
    88b6:	d111      	bne.n	88dc <do_radio_rx_fc_set+0x38>
			u8_t ack1 = ack;

			if (ack1 == 0) {
    88b8:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
    88ba:	bf14      	ite	ne
    88bc:	460a      	movne	r2, r1
    88be:	2203      	moveq	r2, #3
			}
			_radio.fc_handle[--ack1] = handle;
    88c0:	3a01      	subs	r2, #1
    88c2:	b2d2      	uxtb	r2, r2
    88c4:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
    88c8:	f883 2d61 	strb.w	r2, [r3, #3425]	; 0xd61

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
    88cc:	f893 2d60 	ldrb.w	r2, [r3, #3424]	; 0xd60
			_radio.fc_handle[--ack1] = handle;
    88d0:	f8a4 0d5a 	strh.w	r0, [r4, #3418]	; 0xd5a
			if (req != _radio.fc_req) {
    88d4:	4291      	cmp	r1, r2
    88d6:	d00f      	beq.n	88f8 <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
    88d8:	f883 1d61 	strb.w	r1, [r3, #3425]	; 0xd61

				return 1;
			}
		} else {
			return 1;
    88dc:	2001      	movs	r0, #1
    88de:	bd10      	pop	{r4, pc}
		}
	} else if (((req == 0) &&
    88e0:	b929      	cbnz	r1, 88ee <do_radio_rx_fc_set+0x4a>
    88e2:	f8b3 3d5e 	ldrh.w	r3, [r3, #3422]	; 0xd5e
				return 1;
    88e6:	1a18      	subs	r0, r3, r0
    88e8:	bf18      	it	ne
    88ea:	2001      	movne	r0, #1
    88ec:	bd10      	pop	{r4, pc}
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    88ee:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    88f2:	f8b3 3d58 	ldrh.w	r3, [r3, #3416]	; 0xd58
    88f6:	e7f6      	b.n	88e6 <do_radio_rx_fc_set+0x42>
		return 1;
	}

	return 0;
    88f8:	2000      	movs	r0, #0
}
    88fa:	bd10      	pop	{r4, pc}
    88fc:	200002c0 	.word	0x200002c0

00008900 <radio_rx_fc_set>:

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
    8900:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
    8902:	4b14      	ldr	r3, [pc, #80]	; (8954 <radio_rx_fc_set+0x54>)
    8904:	f893 2d62 	ldrb.w	r2, [r3, #3426]	; 0xd62
{
    8908:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
    890a:	b302      	cbz	r2, 894e <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
    890c:	f893 2d60 	ldrb.w	r2, [r3, #3424]	; 0xd60
    8910:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
    8912:	f893 2d61 	ldrb.w	r2, [r3, #3425]	; 0xd61

		if (fc) {
    8916:	b135      	cbz	r5, 8926 <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
    8918:	f64f 73ff 	movw	r3, #65535	; 0xffff
    891c:	4298      	cmp	r0, r3
    891e:	d016      	beq.n	894e <radio_rx_fc_set+0x4e>
			}
		}
	}

	return 0;
}
    8920:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
    8922:	f7ff bfbf 	b.w	88a4 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    8926:	f8d3 0d2c 	ldr.w	r0, [r3, #3372]	; 0xd2c
    892a:	f8d3 4d30 	ldr.w	r4, [r3, #3376]	; 0xd30
    892e:	42a0      	cmp	r0, r4
    8930:	d10d      	bne.n	894e <radio_rx_fc_set+0x4e>
    8932:	4291      	cmp	r1, r2
    8934:	d00b      	beq.n	894e <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    8936:	f8d3 4d30 	ldr.w	r4, [r3, #3376]	; 0xd30
			_radio.fc_ack = req;
    893a:	f883 1d61 	strb.w	r1, [r3, #3425]	; 0xd61
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    893e:	42a0      	cmp	r0, r4
    8940:	d005      	beq.n	894e <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
    8942:	f893 0d60 	ldrb.w	r0, [r3, #3424]	; 0xd60
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    8946:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
    8948:	bf08      	it	eq
    894a:	f883 2d61 	strbeq.w	r2, [r3, #3425]	; 0xd61
}
    894e:	2000      	movs	r0, #0
    8950:	bc30      	pop	{r4, r5}
    8952:	4770      	bx	lr
    8954:	200002c0 	.word	0x200002c0

00008958 <ll_adv_scan_state_cb>:

	return 0;
}

void __weak ll_adv_scan_state_cb(u8_t bm)
{
    8958:	4770      	bx	lr
    895a:	0000      	movs	r0, r0
    895c:	0000      	movs	r0, r0
	...

00008960 <radio_adv_enable>:
{
    8960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8964:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    8966:	2302      	movs	r3, #2
	if (_radio.advertiser.is_enabled) {
    8968:	f8df a2e0 	ldr.w	sl, [pc, #736]	; 8c4c <radio_adv_enable+0x2ec>
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    896c:	930d      	str	r3, [sp, #52]	; 0x34
	radio_ext_adv_enable_flag = false;
    896e:	4bb0      	ldr	r3, [pc, #704]	; (8c30 <radio_adv_enable+0x2d0>)
{
    8970:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
	radio_ext_adv_enable_flag = false;
    8974:	2400      	movs	r4, #0
    8976:	701c      	strb	r4, [r3, #0]
	if (_radio.advertiser.is_enabled) {
    8978:	f99a 3028 	ldrsb.w	r3, [sl, #40]	; 0x28
    897c:	42a3      	cmp	r3, r4
{
    897e:	4680      	mov	r8, r0
    8980:	4691      	mov	r9, r2
    8982:	4655      	mov	r5, sl
	if (_radio.advertiser.is_enabled) {
    8984:	da01      	bge.n	898a <radio_adv_enable+0x2a>
	return BT_HCI_ERR_CMD_DISALLOWED;
    8986:	200c      	movs	r0, #12
    8988:	e14b      	b.n	8c22 <radio_adv_enable+0x2c2>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    898a:	f89a 722e 	ldrb.w	r7, [sl, #558]	; 0x22e
    898e:	eb07 2707 	add.w	r7, r7, r7, lsl #8
    8992:	372b      	adds	r7, #43	; 0x2b
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    8994:	f81a 3007 	ldrb.w	r3, [sl, r7]
    8998:	f003 030f 	and.w	r3, r3, #15
    899c:	2b01      	cmp	r3, #1
    899e:	d86f      	bhi.n	8a80 <radio_adv_enable+0x120>
		if (_radio.advertiser.conn) {
    89a0:	f8da 6c18 	ldr.w	r6, [sl, #3096]	; 0xc18
    89a4:	2e00      	cmp	r6, #0
    89a6:	d1ee      	bne.n	8986 <radio_adv_enable+0x26>
		link = mem_acquire(&_radio.link_rx_free);
    89a8:	f60a 5028 	addw	r0, sl, #3368	; 0xd28
    89ac:	f7fa f891 	bl	2ad2 <mem_acquire>
		if (!link) {
    89b0:	4683      	mov	fp, r0
    89b2:	b150      	cbz	r0, 89ca <radio_adv_enable+0x6a>
		conn = mem_acquire(&_radio.conn_free);
    89b4:	f60a 40f4 	addw	r0, sl, #3316	; 0xcf4
    89b8:	f7fa f88b 	bl	2ad2 <mem_acquire>
		if (!conn) {
    89bc:	4604      	mov	r4, r0
    89be:	b930      	cbnz	r0, 89ce <radio_adv_enable+0x6e>
			mem_release(link, &_radio.link_rx_free);
    89c0:	f60a 5128 	addw	r1, sl, #3368	; 0xd28
    89c4:	4658      	mov	r0, fp
    89c6:	f7fa f89e 	bl	2b06 <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    89ca:	2007      	movs	r0, #7
    89cc:	e129      	b.n	8c22 <radio_adv_enable+0x2c2>
		conn->handle = 0xFFFF;
    89ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
    89d2:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
    89d4:	4b97      	ldr	r3, [pc, #604]	; (8c34 <radio_adv_enable+0x2d4>)
    89d6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
		conn->data_chan_sel = 0;
    89da:	7f43      	ldrb	r3, [r0, #29]
		conn->data_chan_use = 0;
    89dc:	77c6      	strb	r6, [r0, #31]
		conn->data_chan_sel = 0;
    89de:	f366 1386 	bfi	r3, r6, #6, #1
		conn->role = 1;
    89e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    89e6:	7743      	strb	r3, [r0, #29]
		conn->connect_expire = 6;
    89e8:	2306      	movs	r3, #6
    89ea:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->common.fex_valid = 0;
    89ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
		conn->event_counter = 0;
    89f0:	8446      	strh	r6, [r0, #34]	; 0x22
		conn->common.fex_valid = 0;
    89f2:	f366 1345 	bfi	r3, r6, #5, #1
		conn->slave.latency_enabled = 0;
    89f6:	f366 0300 	bfi	r3, r6, #0, #1
		conn->slave.latency_cancel = 0;
    89fa:	f366 0341 	bfi	r3, r6, #1, #1
    89fe:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		conn->llcp_version.tx = 0;
    8a02:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
		conn->latency_prepare = 0;
    8a06:	8506      	strh	r6, [r0, #40]	; 0x28
		conn->llcp_version.tx = 0;
    8a08:	f366 0300 	bfi	r3, r6, #0, #1
		conn->llcp_version.rx = 0;
    8a0c:	f366 0341 	bfi	r3, r6, #1, #1
    8a10:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
		conn->sn = 0;
    8a14:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
		conn->latency_event = 0;
    8a18:	8546      	strh	r6, [r0, #42]	; 0x2a
		conn->sn = 0;
    8a1a:	f366 0300 	bfi	r3, r6, #0, #1
		conn->nesn = 0;
    8a1e:	f366 0341 	bfi	r3, r6, #1, #1
		conn->pause_rx = 0;
    8a22:	f366 0382 	bfi	r3, r6, #2, #1
		conn->pause_tx = 0;
    8a26:	f366 03c3 	bfi	r3, r6, #3, #1
		conn->enc_rx = 0;
    8a2a:	f366 1304 	bfi	r3, r6, #4, #1
		conn->enc_tx = 0;
    8a2e:	f366 1345 	bfi	r3, r6, #5, #1
		conn->refresh = 0;
    8a32:	f366 1386 	bfi	r3, r6, #6, #1
		conn->empty = 0;
    8a36:	f366 13c7 	bfi	r3, r6, #7, #1
		conn->slave.window_widening_prepare_us = 0;
    8a3a:	6446      	str	r6, [r0, #68]	; 0x44
		conn->slave.window_widening_event_us = 0;
    8a3c:	6486      	str	r6, [r0, #72]	; 0x48
		conn->slave.ticks_to_offset = 0;
    8a3e:	6586      	str	r6, [r0, #88]	; 0x58
		conn->supervision_expire = 0;
    8a40:	8606      	strh	r6, [r0, #48]	; 0x30
		conn->procedure_expire = 0;
    8a42:	8686      	strh	r6, [r0, #52]	; 0x34
		conn->llcp_req = 0;
    8a44:	f880 605c 	strb.w	r6, [r0, #92]	; 0x5c
		conn->llcp_ack = 0;
    8a48:	f880 605d 	strb.w	r6, [r0, #93]	; 0x5d
		conn->llcp_terminate.req = 0;
    8a4c:	f880 6098 	strb.w	r6, [r0, #152]	; 0x98
		conn->llcp_terminate.ack = 0;
    8a50:	f880 6099 	strb.w	r6, [r0, #153]	; 0x99
		conn->llcp_terminate.reason_peer = 0;
    8a54:	f880 609b 	strb.w	r6, [r0, #155]	; 0x9b
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    8a58:	f8c0 b09c 	str.w	fp, [r0, #156]	; 0x9c
		conn->empty = 0;
    8a5c:	f880 30a8 	strb.w	r3, [r0, #168]	; 0xa8
		conn->pkt_tx_head = NULL;
    8a60:	f8c0 60ec 	str.w	r6, [r0, #236]	; 0xec
		conn->pkt_tx_ctrl = NULL;
    8a64:	f8c0 60f0 	str.w	r6, [r0, #240]	; 0xf0
		conn->pkt_tx_ctrl_last = NULL;
    8a68:	f8c0 60f4 	str.w	r6, [r0, #244]	; 0xf4
		conn->pkt_tx_data = NULL;
    8a6c:	f8c0 60f8 	str.w	r6, [r0, #248]	; 0xf8
		conn->pkt_tx_last = NULL;
    8a70:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc
		conn->packet_tx_head_len = 0;
    8a74:	f880 6100 	strb.w	r6, [r0, #256]	; 0x100
		conn->packet_tx_head_offset = 0;
    8a78:	f880 6101 	strb.w	r6, [r0, #257]	; 0x101
		_radio.advertiser.conn = conn;
    8a7c:	f8ca 0c18 	str.w	r0, [sl, #3096]	; 0xc18
	_radio.advertiser.chan_map = chan_map;
    8a80:	a80e      	add	r0, sp, #56	; 0x38
    8a82:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
    8a86:	f810 2d09 	ldrb.w	r2, [r0, #-9]!
    8a8a:	f362 1306 	bfi	r3, r2, #4, #3
    8a8e:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.filter_policy = filter_policy;
    8a92:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
    8a96:	f369 0301 	bfi	r3, r9, #0, #2
    8a9a:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
	_radio.advertiser.hdr.ticks_active_to_start =
    8a9e:	f8d5 3d64 	ldr.w	r3, [r5, #3428]	; 0xd64
    8aa2:	61eb      	str	r3, [r5, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
    8aa4:	2327      	movs	r3, #39	; 0x27
    8aa6:	61ab      	str	r3, [r5, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    8aa8:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
    8aaa:	2300      	movs	r3, #0
    8aac:	622b      	str	r3, [r5, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    8aae:	f7fa f9a9 	bl	2e04 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    8ab2:	f81a 6007 	ldrb.w	r6, [sl, r7]
    8ab6:	f006 060f 	and.w	r6, r6, #15
    8aba:	2e01      	cmp	r6, #1
    8abc:	d169      	bne.n	8b92 <radio_adv_enable+0x232>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
    8abe:	f44f 7327 	mov.w	r3, #668	; 0x29c
    8ac2:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
    8ac4:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    8ac8:	495b      	ldr	r1, [pc, #364]	; (8c38 <radio_adv_enable+0x2d8>)
    8aca:	a357      	add	r3, pc, #348	; (adr r3, 8c28 <radio_adv_enable+0x2c8>)
    8acc:	e9d3 2300 	ldrd	r2, r3, [r3]
    8ad0:	fba0 0101 	umull	r0, r1, r0, r1
    8ad4:	f7f7 fb9e 	bl	214 <__aeabi_uldivmod>
	ticks_slot_offset =
    8ad8:	69ef      	ldr	r7, [r5, #28]
    8ada:	69ab      	ldr	r3, [r5, #24]
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    8adc:	6268      	str	r0, [r5, #36]	; 0x24
	ticks_slot_offset =
    8ade:	429f      	cmp	r7, r3
    8ae0:	bf38      	it	cc
    8ae2:	461f      	movcc	r7, r3
	_radio.advertiser.is_hdcd = !interval &&
    8ae4:	f1b8 0f00 	cmp.w	r8, #0
    8ae8:	d15b      	bne.n	8ba2 <radio_adv_enable+0x242>
    8aea:	1e72      	subs	r2, r6, #1
    8aec:	4253      	negs	r3, r2
    8aee:	4153      	adcs	r3, r2
    8af0:	f895 6028 	ldrb.w	r6, [r5, #40]	; 0x28
    8af4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8c50 <radio_adv_enable+0x2f0>
    8af8:	f8df b158 	ldr.w	fp, [pc, #344]	; 8c54 <radio_adv_enable+0x2f4>
    8afc:	f363 1686 	bfi	r6, r3, #6, #1
    8b00:	f885 6028 	strb.w	r6, [r5, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
    8b04:	f016 0640 	ands.w	r6, r6, #64	; 0x40
    8b08:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
    8b0c:	d051      	beq.n	8bb2 <radio_adv_enable+0x252>
		u32_t ticks_now = ticker_ticks_now_get();
    8b0e:	f7fa ffb1 	bl	3a74 <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8b12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    8b14:	f8cd a020 	str.w	sl, [sp, #32]
    8b18:	441f      	add	r7, r3
		u32_t ticks_now = ticker_ticks_now_get();
    8b1a:	4606      	mov	r6, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8b1c:	2000      	movs	r0, #0
    8b1e:	f8cd 901c 	str.w	r9, [sp, #28]
    8b22:	9006      	str	r0, [sp, #24]
    8b24:	f8cd b014 	str.w	fp, [sp, #20]
    8b28:	9704      	str	r7, [sp, #16]
    8b2a:	9003      	str	r0, [sp, #12]
    8b2c:	9002      	str	r0, [sp, #8]
    8b2e:	e88d 0081 	stmia.w	sp, {r0, r7}
    8b32:	4633      	mov	r3, r6
    8b34:	2205      	movs	r2, #5
    8b36:	2103      	movs	r1, #3
    8b38:	f7fa fe2e 	bl	3798 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    8b3c:	2802      	cmp	r0, #2
    8b3e:	d034      	beq.n	8baa <radio_adv_enable+0x24a>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    8b40:	980d      	ldr	r0, [sp, #52]	; 0x34
    8b42:	b9c8      	cbnz	r0, 8b78 <radio_adv_enable+0x218>
		ret_cb = TICKER_STATUS_BUSY;
    8b44:	2302      	movs	r3, #2
    8b46:	930d      	str	r3, [sp, #52]	; 0x34
		ret =
    8b48:	4b3c      	ldr	r3, [pc, #240]	; (8c3c <radio_adv_enable+0x2dc>)
    8b4a:	9305      	str	r3, [sp, #20]
    8b4c:	2203      	movs	r2, #3
    8b4e:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
    8b52:	9300      	str	r3, [sp, #0]
    8b54:	f8cd a020 	str.w	sl, [sp, #32]
    8b58:	f8cd 901c 	str.w	r9, [sp, #28]
    8b5c:	9006      	str	r0, [sp, #24]
    8b5e:	9004      	str	r0, [sp, #16]
    8b60:	9003      	str	r0, [sp, #12]
    8b62:	9002      	str	r0, [sp, #8]
    8b64:	9001      	str	r0, [sp, #4]
    8b66:	4633      	mov	r3, r6
    8b68:	4611      	mov	r1, r2
		ret =
    8b6a:	f7fa fe15 	bl	3798 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    8b6e:	2802      	cmp	r0, #2
    8b70:	d044      	beq.n	8bfc <radio_adv_enable+0x29c>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
    8b72:	980d      	ldr	r0, [sp, #52]	; 0x34
    8b74:	2800      	cmp	r0, #0
    8b76:	d045      	beq.n	8c04 <radio_adv_enable+0x2a4>
	if (conn) {
    8b78:	2c00      	cmp	r4, #0
    8b7a:	f43f af04 	beq.w	8986 <radio_adv_enable+0x26>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
    8b7e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    8b82:	492f      	ldr	r1, [pc, #188]	; (8c40 <radio_adv_enable+0x2e0>)
    8b84:	f7f9 ffbf 	bl	2b06 <mem_release>
		mem_release(conn, &_radio.conn_free);
    8b88:	492e      	ldr	r1, [pc, #184]	; (8c44 <radio_adv_enable+0x2e4>)
    8b8a:	4620      	mov	r0, r4
    8b8c:	f7f9 ffbb 	bl	2b06 <mem_release>
    8b90:	e6f9      	b.n	8986 <radio_adv_enable+0x26>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    8b92:	2e02      	cmp	r6, #2
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
    8b94:	bf0c      	ite	eq
    8b96:	f44f 7329 	moveq.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
    8b9a:	f240 53fc 	movwne	r3, #1532	; 0x5fc
    8b9e:	4358      	muls	r0, r3
    8ba0:	e792      	b.n	8ac8 <radio_adv_enable+0x168>
    8ba2:	2300      	movs	r3, #0
    8ba4:	e7a4      	b.n	8af0 <radio_adv_enable+0x190>
				cpu_sleep();
    8ba6:	f7fb fe1b 	bl	47e0 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    8baa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8bac:	2b02      	cmp	r3, #2
    8bae:	d0fa      	beq.n	8ba6 <radio_adv_enable+0x246>
    8bb0:	e7c6      	b.n	8b40 <radio_adv_enable+0x1e0>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8bb2:	f7fa ff5f 	bl	3a74 <ticker_ticks_now_get>
		ret =
    8bb6:	f8cd a020 	str.w	sl, [sp, #32]
    8bba:	f8cd 901c 	str.w	r9, [sp, #28]
    8bbe:	9606      	str	r6, [sp, #24]
    8bc0:	f8cd b014 	str.w	fp, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8bc4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    8bc6:	900a      	str	r0, [sp, #40]	; 0x28
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    8bc8:	481f      	ldr	r0, [pc, #124]	; (8c48 <radio_adv_enable+0x2e8>)
		ret =
    8bca:	9603      	str	r6, [sp, #12]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    8bcc:	fa1f f888 	uxth.w	r8, r8
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8bd0:	441f      	add	r7, r3
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    8bd2:	fba8 0100 	umull	r0, r1, r8, r0
    8bd6:	2391      	movs	r3, #145	; 0x91
    8bd8:	fb03 1108 	mla	r1, r3, r8, r1
    8bdc:	a312      	add	r3, pc, #72	; (adr r3, 8c28 <radio_adv_enable+0x2c8>)
    8bde:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret =
    8be2:	9704      	str	r7, [sp, #16]
    8be4:	9602      	str	r6, [sp, #8]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    8be6:	f7f7 fb15 	bl	214 <__aeabi_uldivmod>
		ret =
    8bea:	9600      	str	r6, [sp, #0]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    8bec:	9001      	str	r0, [sp, #4]
		ret =
    8bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8bf0:	2205      	movs	r2, #5
    8bf2:	2103      	movs	r1, #3
    8bf4:	4630      	mov	r0, r6
    8bf6:	e7b8      	b.n	8b6a <radio_adv_enable+0x20a>
			cpu_sleep();
    8bf8:	f7fb fdf2 	bl	47e0 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    8bfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8bfe:	2b02      	cmp	r3, #2
    8c00:	d0fa      	beq.n	8bf8 <radio_adv_enable+0x298>
    8c02:	e7b6      	b.n	8b72 <radio_adv_enable+0x212>
		_radio.advertiser.is_enabled = 1;
    8c04:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    8c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8c0c:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    8c10:	f895 3c2c 	ldrb.w	r3, [r5, #3116]	; 0xc2c
    8c14:	f013 0401 	ands.w	r4, r3, #1
    8c18:	d103      	bne.n	8c22 <radio_adv_enable+0x2c2>
			ll_adv_scan_state_cb(BIT(0));
    8c1a:	2001      	movs	r0, #1
    8c1c:	f7ff fe9c 	bl	8958 <ll_adv_scan_state_cb>
		return 0;
    8c20:	4620      	mov	r0, r4
}
    8c22:	b00f      	add	sp, #60	; 0x3c
    8c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c28:	1afd498d 	.word	0x1afd498d
    8c2c:	00000007 	.word	0x00000007
    8c30:	20001079 	.word	0x20001079
    8c34:	0001400c 	.word	0x0001400c
    8c38:	3b9aca00 	.word	0x3b9aca00
    8c3c:	00005dad 	.word	0x00005dad
    8c40:	20000fe8 	.word	0x20000fe8
    8c44:	20000fb4 	.word	0x20000fb4
    8c48:	84e72a00 	.word	0x84e72a00
    8c4c:	200002c0 	.word	0x200002c0
    8c50:	00004825 	.word	0x00004825
    8c54:	00005d3d 	.word	0x00005d3d

00008c58 <radio_ext_adv_enable>:
{
    8c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8c5c:	b093      	sub	sp, #76	; 0x4c
	if (_radio.advertiser.is_enabled) {
    8c5e:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8ef8 <radio_ext_adv_enable+0x2a0>
{
    8c62:	930b      	str	r3, [sp, #44]	; 0x2c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    8c64:	2302      	movs	r3, #2
    8c66:	9311      	str	r3, [sp, #68]	; 0x44
	radio_ext_adv_enable_flag = true;
    8c68:	4b9b      	ldr	r3, [pc, #620]	; (8ed8 <radio_ext_adv_enable+0x280>)
{
    8c6a:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
	radio_ext_adv_enable_flag = true;
    8c6e:	2201      	movs	r2, #1
    8c70:	701a      	strb	r2, [r3, #0]
	if (_radio.advertiser.is_enabled) {
    8c72:	f999 3028 	ldrsb.w	r3, [r9, #40]	; 0x28
{
    8c76:	f89d 8074 	ldrb.w	r8, [sp, #116]	; 0x74
	if (_radio.advertiser.is_enabled) {
    8c7a:	2b00      	cmp	r3, #0
{
    8c7c:	4683      	mov	fp, r0
    8c7e:	468a      	mov	sl, r1
    8c80:	464e      	mov	r6, r9
	if (_radio.advertiser.is_enabled) {
    8c82:	da01      	bge.n	8c88 <radio_ext_adv_enable+0x30>
	return BT_HCI_ERR_CMD_DISALLOWED;
    8c84:	200c      	movs	r0, #12
    8c86:	e22a      	b.n	90de <radio_ext_adv_enable+0x486>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    8c88:	f899 722e 	ldrb.w	r7, [r9, #558]	; 0x22e
    8c8c:	eb07 2707 	add.w	r7, r7, r7, lsl #8
    8c90:	372b      	adds	r7, #43	; 0x2b
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    8c92:	f819 3007 	ldrb.w	r3, [r9, r7]
    8c96:	f003 030f 	and.w	r3, r3, #15
    8c9a:	2b01      	cmp	r3, #1
    8c9c:	f200 80ff 	bhi.w	8e9e <radio_ext_adv_enable+0x246>
		if (_radio.advertiser.conn) {
    8ca0:	f8d9 4c18 	ldr.w	r4, [r9, #3096]	; 0xc18
    8ca4:	2c00      	cmp	r4, #0
    8ca6:	d1ed      	bne.n	8c84 <radio_ext_adv_enable+0x2c>
		link = mem_acquire(&_radio.link_rx_free);
    8ca8:	f609 5028 	addw	r0, r9, #3368	; 0xd28
    8cac:	f7f9 ff11 	bl	2ad2 <mem_acquire>
		if (!link) {
    8cb0:	900e      	str	r0, [sp, #56]	; 0x38
    8cb2:	b158      	cbz	r0, 8ccc <radio_ext_adv_enable+0x74>
		conn = mem_acquire(&_radio.conn_free);
    8cb4:	f609 40f4 	addw	r0, r9, #3316	; 0xcf4
    8cb8:	f7f9 ff0b 	bl	2ad2 <mem_acquire>
		if (!conn) {
    8cbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8cbe:	4605      	mov	r5, r0
    8cc0:	b930      	cbnz	r0, 8cd0 <radio_ext_adv_enable+0x78>
			mem_release(link, &_radio.link_rx_free);
    8cc2:	f609 5128 	addw	r1, r9, #3368	; 0xd28
    8cc6:	4618      	mov	r0, r3
    8cc8:	f7f9 ff1d 	bl	2b06 <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    8ccc:	2007      	movs	r0, #7
    8cce:	e206      	b.n	90de <radio_ext_adv_enable+0x486>
		conn->handle = 0xFFFF;
    8cd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8cd4:	8401      	strh	r1, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
    8cd6:	4981      	ldr	r1, [pc, #516]	; (8edc <radio_ext_adv_enable+0x284>)
    8cd8:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
		conn->data_chan_sel = 0;
    8cdc:	7f41      	ldrb	r1, [r0, #29]
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    8cde:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
		conn->data_chan_sel = 0;
    8ce2:	f364 1186 	bfi	r1, r4, #6, #1
		conn->role = 1;
    8ce6:	f061 017f 	orn	r1, r1, #127	; 0x7f
		conn->sn = 0;
    8cea:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
		conn->role = 1;
    8cee:	7741      	strb	r1, [r0, #29]
		conn->connect_expire = 6;
    8cf0:	2106      	movs	r1, #6
    8cf2:	8581      	strh	r1, [r0, #44]	; 0x2c
		conn->common.fex_valid = 0;
    8cf4:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
		conn->data_chan_use = 0;
    8cf8:	77c4      	strb	r4, [r0, #31]
		conn->sn = 0;
    8cfa:	f364 0300 	bfi	r3, r4, #0, #1
		conn->common.fex_valid = 0;
    8cfe:	f364 1145 	bfi	r1, r4, #5, #1
		conn->nesn = 0;
    8d02:	f364 0341 	bfi	r3, r4, #1, #1
		conn->slave.latency_enabled = 0;
    8d06:	f364 0100 	bfi	r1, r4, #0, #1
		conn->pause_rx = 0;
    8d0a:	f364 0382 	bfi	r3, r4, #2, #1
		conn->slave.latency_cancel = 0;
    8d0e:	f364 0141 	bfi	r1, r4, #1, #1
		conn->pause_tx = 0;
    8d12:	f364 03c3 	bfi	r3, r4, #3, #1
		conn->slave.latency_cancel = 0;
    8d16:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
		conn->enc_rx = 0;
    8d1a:	f364 1304 	bfi	r3, r4, #4, #1
		conn->llcp_version.tx = 0;
    8d1e:	f890 1090 	ldrb.w	r1, [r0, #144]	; 0x90
		conn->event_counter = 0;
    8d22:	8444      	strh	r4, [r0, #34]	; 0x22
		conn->enc_tx = 0;
    8d24:	f364 1345 	bfi	r3, r4, #5, #1
		conn->llcp_version.tx = 0;
    8d28:	f364 0100 	bfi	r1, r4, #0, #1
		conn->refresh = 0;
    8d2c:	f364 1386 	bfi	r3, r4, #6, #1
		conn->llcp_version.rx = 0;
    8d30:	f364 0141 	bfi	r1, r4, #1, #1
		conn->empty = 0;
    8d34:	f364 13c7 	bfi	r3, r4, #7, #1
		conn->latency_prepare = 0;
    8d38:	8504      	strh	r4, [r0, #40]	; 0x28
		conn->latency_event = 0;
    8d3a:	8544      	strh	r4, [r0, #42]	; 0x2a
		conn->slave.window_widening_prepare_us = 0;
    8d3c:	6444      	str	r4, [r0, #68]	; 0x44
		conn->slave.window_widening_event_us = 0;
    8d3e:	6484      	str	r4, [r0, #72]	; 0x48
		conn->slave.ticks_to_offset = 0;
    8d40:	6584      	str	r4, [r0, #88]	; 0x58
		conn->supervision_expire = 0;
    8d42:	8604      	strh	r4, [r0, #48]	; 0x30
		conn->procedure_expire = 0;
    8d44:	8684      	strh	r4, [r0, #52]	; 0x34
		conn->llcp_req = 0;
    8d46:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
		conn->llcp_ack = 0;
    8d4a:	f880 405d 	strb.w	r4, [r0, #93]	; 0x5d
		conn->llcp_version.rx = 0;
    8d4e:	f880 1090 	strb.w	r1, [r0, #144]	; 0x90
		conn->llcp_terminate.req = 0;
    8d52:	f880 4098 	strb.w	r4, [r0, #152]	; 0x98
		conn->llcp_terminate.ack = 0;
    8d56:	f880 4099 	strb.w	r4, [r0, #153]	; 0x99
		conn->llcp_terminate.reason_peer = 0;
    8d5a:	f880 409b 	strb.w	r4, [r0, #155]	; 0x9b
		conn->empty = 0;
    8d5e:	f880 30a8 	strb.w	r3, [r0, #168]	; 0xa8
		conn->pkt_tx_head = NULL;
    8d62:	f8c0 40ec 	str.w	r4, [r0, #236]	; 0xec
		conn->pkt_tx_ctrl = NULL;
    8d66:	f8c0 40f0 	str.w	r4, [r0, #240]	; 0xf0
		conn->pkt_tx_ctrl_last = NULL;
    8d6a:	f8c0 40f4 	str.w	r4, [r0, #244]	; 0xf4
		conn->pkt_tx_data = NULL;
    8d6e:	f8c0 40f8 	str.w	r4, [r0, #248]	; 0xf8
		conn->pkt_tx_last = NULL;
    8d72:	f8c0 40fc 	str.w	r4, [r0, #252]	; 0xfc
		conn->packet_tx_head_len = 0;
    8d76:	f880 4100 	strb.w	r4, [r0, #256]	; 0x100
		conn->packet_tx_head_offset = 0;
    8d7a:	f880 4101 	strb.w	r4, [r0, #257]	; 0x101
		_radio.advertiser.conn = conn;
    8d7e:	f8c9 0c18 	str.w	r0, [r9, #3096]	; 0xc18
	_radio.advertiser.chan_map = chan_map;							//chan_map
    8d82:	a812      	add	r0, sp, #72	; 0x48
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
    8d84:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
	_radio.advertiser.chan_map = chan_map;							//chan_map
    8d88:	f810 1d09 	ldrb.w	r1, [r0, #-9]!
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
    8d8c:	f36b 0343 	bfi	r3, fp, #1, #3
	_radio.advertiser.chan_map = chan_map;							//chan_map
    8d90:	f361 1306 	bfi	r3, r1, #4, #3
    8d94:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
	_radio.ext_advertiser.aux_chain_count = aux_chain_count;		
    8d98:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
	_radio.advertiser.filter_policy = filter_policy;				//filter plicy
    8d9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	_radio.ext_advertiser.aux_chain_count = aux_chain_count;		
    8d9e:	f886 3c8c 	strb.w	r3, [r6, #3212]	; 0xc8c
	_radio.advertiser.filter_policy = filter_policy;				//filter plicy
    8da2:	f896 302a 	ldrb.w	r3, [r6, #42]	; 0x2a
    8da6:	f362 0301 	bfi	r3, r2, #0, #2
    8daa:	f886 302a 	strb.w	r3, [r6, #42]	; 0x2a
	_radio.advertiser.hdr.ticks_active_to_start =
    8dae:	f8d6 3d64 	ldr.w	r3, [r6, #3428]	; 0xd64
    8db2:	61f3      	str	r3, [r6, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
    8db4:	2327      	movs	r3, #39	; 0x27
    8db6:	61b3      	str	r3, [r6, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    8db8:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
    8dba:	2300      	movs	r3, #0
    8dbc:	6233      	str	r3, [r6, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    8dbe:	f7fa f821 	bl	2e04 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    8dc2:	f819 4007 	ldrb.w	r4, [r9, r7]
    8dc6:	f004 040f 	and.w	r4, r4, #15
    8dca:	2c01      	cmp	r4, #1
    8dcc:	d169      	bne.n	8ea2 <radio_ext_adv_enable+0x24a>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
    8dce:	f44f 7327 	mov.w	r3, #668	; 0x29c
    8dd2:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
    8dd4:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    8dd8:	4f41      	ldr	r7, [pc, #260]	; (8ee0 <radio_ext_adv_enable+0x288>)
    8dda:	a33d      	add	r3, pc, #244	; (adr r3, 8ed0 <radio_ext_adv_enable+0x278>)
    8ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
    8de0:	fba0 0107 	umull	r0, r1, r0, r7
    8de4:	f7f7 fa16 	bl	214 <__aeabi_uldivmod>
	ticks_slot_offset =
    8de8:	69f3      	ldr	r3, [r6, #28]
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    8dea:	6270      	str	r0, [r6, #36]	; 0x24
	ticks_slot_offset =
    8dec:	69b0      	ldr	r0, [r6, #24]
    8dee:	4283      	cmp	r3, r0
    8df0:	bf38      	it	cc
    8df2:	4603      	movcc	r3, r0
    8df4:	930b      	str	r3, [sp, #44]	; 0x2c
    8df6:	46b9      	mov	r9, r7
	_radio.advertiser.is_hdcd = !interval &&
    8df8:	f1ba 0f00 	cmp.w	sl, #0
    8dfc:	d15e      	bne.n	8ebc <radio_ext_adv_enable+0x264>
    8dfe:	1e62      	subs	r2, r4, #1
    8e00:	4253      	negs	r3, r2
    8e02:	4153      	adcs	r3, r2
    8e04:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
    8e08:	f363 1486 	bfi	r4, r3, #6, #1
    8e0c:	f886 4028 	strb.w	r4, [r6, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
    8e10:	f014 0440 	ands.w	r4, r4, #64	; 0x40
    8e14:	d072      	beq.n	8efc <radio_ext_adv_enable+0x2a4>
		u32_t ticks_now = ticker_ticks_now_get();
    8e16:	f7fa fe2d 	bl	3a74 <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8e1a:	6a73      	ldr	r3, [r6, #36]	; 0x24
    8e1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8e1e:	4e31      	ldr	r6, [pc, #196]	; (8ee4 <radio_ext_adv_enable+0x28c>)
    8e20:	9607      	str	r6, [sp, #28]
    8e22:	441a      	add	r2, r3
    8e24:	4613      	mov	r3, r2
		u32_t ticks_now = ticker_ticks_now_get();
    8e26:	4607      	mov	r7, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8e28:	4a2f      	ldr	r2, [pc, #188]	; (8ee8 <radio_ext_adv_enable+0x290>)
    8e2a:	9205      	str	r2, [sp, #20]
    8e2c:	2000      	movs	r0, #0
    8e2e:	ac11      	add	r4, sp, #68	; 0x44
    8e30:	9304      	str	r3, [sp, #16]
    8e32:	e88d 0009 	stmia.w	sp, {r0, r3}
    8e36:	9408      	str	r4, [sp, #32]
    8e38:	9006      	str	r0, [sp, #24]
    8e3a:	9003      	str	r0, [sp, #12]
    8e3c:	9002      	str	r0, [sp, #8]
    8e3e:	463b      	mov	r3, r7
    8e40:	2205      	movs	r2, #5
    8e42:	2103      	movs	r1, #3
    8e44:	f7fa fca8 	bl	3798 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    8e48:	2802      	cmp	r0, #2
    8e4a:	d03b      	beq.n	8ec4 <radio_ext_adv_enable+0x26c>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    8e4c:	9811      	ldr	r0, [sp, #68]	; 0x44
    8e4e:	b9c8      	cbnz	r0, 8e84 <radio_ext_adv_enable+0x22c>
		ret_cb = TICKER_STATUS_BUSY;
    8e50:	2302      	movs	r3, #2
    8e52:	9311      	str	r3, [sp, #68]	; 0x44
		ret =
    8e54:	4b25      	ldr	r3, [pc, #148]	; (8eec <radio_ext_adv_enable+0x294>)
    8e56:	9305      	str	r3, [sp, #20]
    8e58:	2203      	movs	r2, #3
    8e5a:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
    8e5e:	9300      	str	r3, [sp, #0]
    8e60:	9408      	str	r4, [sp, #32]
    8e62:	9607      	str	r6, [sp, #28]
    8e64:	9006      	str	r0, [sp, #24]
    8e66:	9004      	str	r0, [sp, #16]
    8e68:	9003      	str	r0, [sp, #12]
    8e6a:	9002      	str	r0, [sp, #8]
    8e6c:	9001      	str	r0, [sp, #4]
    8e6e:	463b      	mov	r3, r7
    8e70:	4611      	mov	r1, r2
		ret=	
    8e72:	f7fa fc91 	bl	3798 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    8e76:	2802      	cmp	r0, #2
    8e78:	f000 811d 	beq.w	90b6 <radio_ext_adv_enable+0x45e>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
    8e7c:	9811      	ldr	r0, [sp, #68]	; 0x44
    8e7e:	2800      	cmp	r0, #0
    8e80:	f000 811d 	beq.w	90be <radio_ext_adv_enable+0x466>
	if (conn) {
    8e84:	2d00      	cmp	r5, #0
    8e86:	f43f aefd 	beq.w	8c84 <radio_ext_adv_enable+0x2c>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
    8e8a:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    8e8e:	4918      	ldr	r1, [pc, #96]	; (8ef0 <radio_ext_adv_enable+0x298>)
    8e90:	f7f9 fe39 	bl	2b06 <mem_release>
		mem_release(conn, &_radio.conn_free);
    8e94:	4917      	ldr	r1, [pc, #92]	; (8ef4 <radio_ext_adv_enable+0x29c>)
    8e96:	4628      	mov	r0, r5
    8e98:	f7f9 fe35 	bl	2b06 <mem_release>
    8e9c:	e6f2      	b.n	8c84 <radio_ext_adv_enable+0x2c>
		conn = NULL;
    8e9e:	2500      	movs	r5, #0
    8ea0:	e76f      	b.n	8d82 <radio_ext_adv_enable+0x12a>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    8ea2:	2c02      	cmp	r4, #2
    8ea4:	d103      	bne.n	8eae <radio_ext_adv_enable+0x256>
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
    8ea6:	f44f 7329 	mov.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
    8eaa:	4358      	muls	r0, r3
    8eac:	e794      	b.n	8dd8 <radio_ext_adv_enable+0x180>
	else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    8eae:	2c07      	cmp	r4, #7
		slot_us = ((RADIO_TICKER_START_PART_US + 2500) * chan_cnt) ;  // 265byte =2120us
    8eb0:	bf0c      	ite	eq
    8eb2:	f44f 632f 	moveq.w	r3, #2800	; 0xaf0
			   152 + 376) * chan_cnt;
    8eb6:	f240 53fc 	movwne	r3, #1532	; 0x5fc
    8eba:	e7f6      	b.n	8eaa <radio_ext_adv_enable+0x252>
    8ebc:	2300      	movs	r3, #0
    8ebe:	e7a1      	b.n	8e04 <radio_ext_adv_enable+0x1ac>
				cpu_sleep();
    8ec0:	f7fb fc8e 	bl	47e0 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    8ec4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8ec6:	2b02      	cmp	r3, #2
    8ec8:	d0fa      	beq.n	8ec0 <radio_ext_adv_enable+0x268>
    8eca:	e7bf      	b.n	8e4c <radio_ext_adv_enable+0x1f4>
    8ecc:	f3af 8000 	nop.w
    8ed0:	1afd498d 	.word	0x1afd498d
    8ed4:	00000007 	.word	0x00000007
    8ed8:	20001079 	.word	0x20001079
    8edc:	0001400c 	.word	0x0001400c
    8ee0:	3b9aca00 	.word	0x3b9aca00
    8ee4:	00004825 	.word	0x00004825
    8ee8:	00005d3d 	.word	0x00005d3d
    8eec:	00005dad 	.word	0x00005dad
    8ef0:	20000fe8 	.word	0x20000fe8
    8ef4:	20000fb4 	.word	0x20000fb4
    8ef8:	200002c0 	.word	0x200002c0
		u32_t ticks_now = ticker_ticks_now_get();
    8efc:	f7fa fdba 	bl	3a74 <ticker_ticks_now_get>
		if(((u64_t)interval * 625) <= 100000){
    8f00:	fa1f f28a 	uxth.w	r2, sl
    8f04:	2300      	movs	r3, #0
		u32_t ticks_now = ticker_ticks_now_get();
    8f06:	900e      	str	r0, [sp, #56]	; 0x38
		if(((u64_t)interval * 625) <= 100000){
    8f08:	f240 2071 	movw	r0, #625	; 0x271
    8f0c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    8f10:	fbaa 0100 	umull	r0, r1, sl, r0
    8f14:	4a76      	ldr	r2, [pc, #472]	; (90f0 <radio_ext_adv_enable+0x498>)
		_radio.ext_advertiser.max_skip = skip;
    8f16:	f886 8c68 	strb.w	r8, [r6, #3176]	; 0xc68
		if(((u64_t)interval * 625) <= 100000){
    8f1a:	2300      	movs	r3, #0
    8f1c:	428b      	cmp	r3, r1
    8f1e:	bf08      	it	eq
    8f20:	4282      	cmpeq	r2, r0
    8f22:	d30b      	bcc.n	8f3c <radio_ext_adv_enable+0x2e4>
		int calculation = max_skip / 5;
    8f24:	2305      	movs	r3, #5
    8f26:	fbb8 f3f3 	udiv	r3, r8, r3
			if(calculation >= 5){
    8f2a:	2b04      	cmp	r3, #4
    8f2c:	f240 80a5 	bls.w	907a <radio_ext_adv_enable+0x422>
				ticker_offset = 30 * (max_skip-5);
    8f30:	f1a8 0405 	sub.w	r4, r8, #5
				ticker_offset = 30 * (max_skip-1);
    8f34:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
				ticker_offset = 30 * max_skip;
    8f38:	0064      	lsls	r4, r4, #1
    8f3a:	b2a4      	uxth	r4, r4
		_radio.ext_advertiser.aux_pckt_time = ((((u64_t)interval * 625 ) ) * skip) + 30000; //(10005 * offset) ;
    8f3c:	f240 2371 	movw	r3, #625	; 0x271
    8f40:	fb03 f708 	mul.w	r7, r3, r8
    8f44:	f247 5230 	movw	r2, #30000	; 0x7530
    8f48:	fb0a 2707 	mla	r7, sl, r7, r2
		_radio.ext_advertiser.prim_interval = (u64_t)interval * 625;
    8f4c:	fb03 f30a 	mul.w	r3, r3, sl
		_radio.ext_advertiser.aux_pckt_time = ((((u64_t)interval * 625 ) ) * skip) + 30000; //(10005 * offset) ;
    8f50:	f8c6 7c5c 	str.w	r7, [r6, #3164]	; 0xc5c
		_radio.ext_advertiser.prim_interval = (u64_t)interval * 625;
    8f54:	f8c6 3c60 	str.w	r3, [r6, #3168]	; 0xc60
		_radio.ext_advertiser.ticker_offset = 183 * (((u64_t)interval * 625 )/100000);
    8f58:	4a65      	ldr	r2, [pc, #404]	; (90f0 <radio_ext_adv_enable+0x498>)
    8f5a:	2300      	movs	r3, #0
    8f5c:	f7f7 f95a 	bl	214 <__aeabi_uldivmod>
    8f60:	23b7      	movs	r3, #183	; 0xb7
    8f62:	4358      	muls	r0, r3
		pdu = (void *)_radio.advertiser.adv_data.data
    8f64:	f896 322d 	ldrb.w	r3, [r6, #557]	; 0x22d
		_radio.ext_advertiser.ticker_offset = 183 * (((u64_t)interval * 625 )/100000);
    8f68:	f8c6 0c84 	str.w	r0, [r6, #3204]	; 0xc84
		size = pdu->len + 2;
    8f6c:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    8f70:	4433      	add	r3, r6
		_radio.ext_advertiser.chan_37 = (_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) );
    8f72:	fb00 7708 	mla	r7, r0, r8, r7
		size = pdu->len + 2;
    8f76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		_radio.ext_advertiser.chan_37 = (_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) );
    8f7a:	f8c6 7c70 	str.w	r7, [r6, #3184]	; 0xc70
		final_pckt_size = (size + 1 + 4 + 3)*8 ; 
    8f7e:	00db      	lsls	r3, r3, #3
    8f80:	3350      	adds	r3, #80	; 0x50
		_radio.ext_advertiser.chan_38 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) ) -((final_pckt_size + 50)));
    8f82:	f1a7 0232 	sub.w	r2, r7, #50	; 0x32
    8f86:	1ad2      	subs	r2, r2, r3
		_radio.ext_advertiser.chan_39 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip )) -(((final_pckt_size + 50)* 2))) ;
    8f88:	3332      	adds	r3, #50	; 0x32
    8f8a:	eba7 0743 	sub.w	r7, r7, r3, lsl #1
		ret =
    8f8e:	4b59      	ldr	r3, [pc, #356]	; (90f4 <radio_ext_adv_enable+0x49c>)
		_radio.ext_advertiser.chan_38 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) ) -((final_pckt_size + 50)));
    8f90:	f8c6 2c74 	str.w	r2, [r6, #3188]	; 0xc74
		_radio.ext_advertiser.chan_39 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip )) -(((final_pckt_size + 50)* 2))) ;
    8f94:	f8c6 7c78 	str.w	r7, [r6, #3192]	; 0xc78
		ret =
    8f98:	f04f 0b00 	mov.w	fp, #0
    8f9c:	9307      	str	r3, [sp, #28]
    8f9e:	af11      	add	r7, sp, #68	; 0x44
    8fa0:	4b55      	ldr	r3, [pc, #340]	; (90f8 <radio_ext_adv_enable+0x4a0>)
    8fa2:	9708      	str	r7, [sp, #32]
    8fa4:	f8cd b018 	str.w	fp, [sp, #24]
    8fa8:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8faa:	6a73      	ldr	r3, [r6, #36]	; 0x24
    8fac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
    8fae:	4853      	ldr	r0, [pc, #332]	; (90fc <radio_ext_adv_enable+0x4a4>)
		ret =
    8fb0:	f8cd b00c 	str.w	fp, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8fb4:	4413      	add	r3, r2
		ret =
    8fb6:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
    8fb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8fba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		ret =
    8fbc:	f8cd b008 	str.w	fp, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
    8fc0:	fba3 0100 	umull	r0, r1, r3, r0
    8fc4:	2391      	movs	r3, #145	; 0x91
    8fc6:	fb03 1102 	mla	r1, r3, r2, r1
    8fca:	a347      	add	r3, pc, #284	; (adr r3, 90e8 <radio_ext_adv_enable+0x490>)
    8fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
    8fd0:	f7f7 f920 	bl	214 <__aeabi_uldivmod>
		ret =
    8fd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
    8fd6:	9001      	str	r0, [sp, #4]
		ret =
    8fd8:	f8cd b000 	str.w	fp, [sp]
    8fdc:	2205      	movs	r2, #5
    8fde:	2103      	movs	r1, #3
    8fe0:	4658      	mov	r0, fp
    8fe2:	f7fa fbd9 	bl	3798 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    8fe6:	2802      	cmp	r0, #2
    8fe8:	4b42      	ldr	r3, [pc, #264]	; (90f4 <radio_ext_adv_enable+0x49c>)
    8fea:	d05e      	beq.n	90aa <radio_ext_adv_enable+0x452>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    8fec:	9e11      	ldr	r6, [sp, #68]	; 0x44
    8fee:	2e00      	cmp	r6, #0
    8ff0:	f47f af48 	bne.w	8e84 <radio_ext_adv_enable+0x22c>
		ret=	
    8ff4:	9307      	str	r3, [sp, #28]
    8ff6:	4b42      	ldr	r3, [pc, #264]	; (9100 <radio_ext_adv_enable+0x4a8>)
    8ff8:	9305      	str	r3, [sp, #20]
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
    8ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		ret=	
    8ffc:	9708      	str	r7, [sp, #32]
		ret_cb = TICKER_STATUS_BUSY;
    8ffe:	2202      	movs	r2, #2
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
    9000:	f503 70bc 	add.w	r0, r3, #376	; 0x178
		ret_cb = TICKER_STATUS_BUSY;
    9004:	9211      	str	r2, [sp, #68]	; 0x44
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
    9006:	fba0 0109 	umull	r0, r1, r0, r9
    900a:	a337      	add	r3, pc, #220	; (adr r3, 90e8 <radio_ext_adv_enable+0x490>)
    900c:	e9d3 2300 	ldrd	r2, r3, [r3]
		u8_t offset = skip + 1;
    9010:	f108 0801 	add.w	r8, r8, #1
		ret=	
    9014:	9606      	str	r6, [sp, #24]
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
    9016:	fa5f f888 	uxtb.w	r8, r8
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
    901a:	f7f7 f8fb 	bl	214 <__aeabi_uldivmod>
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
    901e:	fba8 ab0a 	umull	sl, fp, r8, sl
    9022:	f240 2171 	movw	r1, #625	; 0x271
    9026:	fbaa 2301 	umull	r2, r3, sl, r1
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
    902a:	1b12      	subs	r2, r2, r4
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    902c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
    9030:	fb01 330b 	mla	r3, r1, fp, r3
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
    9034:	f163 0300 	sbc.w	r3, r3, #0
		ret=	
    9038:	9004      	str	r0, [sp, #16]
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
    903a:	fba2 0109 	umull	r0, r1, r2, r9
    903e:	fb09 1103 	mla	r1, r9, r3, r1
    9042:	a329      	add	r3, pc, #164	; (adr r3, 90e8 <radio_ext_adv_enable+0x490>)
    9044:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret=	
    9048:	9603      	str	r6, [sp, #12]
    904a:	9602      	str	r6, [sp, #8]
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
    904c:	f7f7 f8e2 	bl	214 <__aeabi_uldivmod>
					HAL_TICKER_US_TO_TICKS(	_radio.ext_advertiser.aux_pckt_time  ),			//ticks periodic
    9050:	4b2c      	ldr	r3, [pc, #176]	; (9104 <radio_ext_adv_enable+0x4ac>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    9052:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ret=	
    9056:	9001      	str	r0, [sp, #4]
					HAL_TICKER_US_TO_TICKS(	_radio.ext_advertiser.aux_pckt_time  ),			//ticks periodic
    9058:	f8d3 0c5c 	ldr.w	r0, [r3, #3164]	; 0xc5c
    905c:	a322      	add	r3, pc, #136	; (adr r3, 90e8 <radio_ext_adv_enable+0x490>)
    905e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9062:	fba0 0109 	umull	r0, r1, r0, r9
    9066:	f7f7 f8d5 	bl	214 <__aeabi_uldivmod>
		ret=	
    906a:	2203      	movs	r2, #3
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    906c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ret=	
    9070:	9000      	str	r0, [sp, #0]
    9072:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9074:	4611      	mov	r1, r2
    9076:	4630      	mov	r0, r6
    9078:	e6fb      	b.n	8e72 <radio_ext_adv_enable+0x21a>
			}else if(calculation >= 4){
    907a:	d102      	bne.n	9082 <radio_ext_adv_enable+0x42a>
				ticker_offset = 30 * (max_skip-4);
    907c:	f1a8 0404 	sub.w	r4, r8, #4
    9080:	e758      	b.n	8f34 <radio_ext_adv_enable+0x2dc>
			}else if(calculation >=3){
    9082:	2b03      	cmp	r3, #3
    9084:	d102      	bne.n	908c <radio_ext_adv_enable+0x434>
				ticker_offset = 30 * (max_skip-3);
    9086:	f1a8 0403 	sub.w	r4, r8, #3
    908a:	e753      	b.n	8f34 <radio_ext_adv_enable+0x2dc>
			}else if(calculation >= 2){
    908c:	2b02      	cmp	r3, #2
    908e:	d102      	bne.n	9096 <radio_ext_adv_enable+0x43e>
				ticker_offset = 30 * (max_skip-2);
    9090:	f1a8 0402 	sub.w	r4, r8, #2
    9094:	e74e      	b.n	8f34 <radio_ext_adv_enable+0x2dc>
			}else if(calculation >= 1){
    9096:	2b01      	cmp	r3, #1
    9098:	d102      	bne.n	90a0 <radio_ext_adv_enable+0x448>
				ticker_offset = 30 * (max_skip-1);
    909a:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
    909e:	e749      	b.n	8f34 <radio_ext_adv_enable+0x2dc>
				ticker_offset = 30 * max_skip;
    90a0:	ebc8 1408 	rsb	r4, r8, r8, lsl #4
    90a4:	e748      	b.n	8f38 <radio_ext_adv_enable+0x2e0>
				cpu_sleep();
    90a6:	f7fb fb9b 	bl	47e0 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    90aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
    90ac:	2a02      	cmp	r2, #2
    90ae:	d0fa      	beq.n	90a6 <radio_ext_adv_enable+0x44e>
    90b0:	e79c      	b.n	8fec <radio_ext_adv_enable+0x394>
			cpu_sleep();
    90b2:	f7fb fb95 	bl	47e0 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    90b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    90b8:	2b02      	cmp	r3, #2
    90ba:	d0fa      	beq.n	90b2 <radio_ext_adv_enable+0x45a>
    90bc:	e6de      	b.n	8e7c <radio_ext_adv_enable+0x224>
		_radio.advertiser.is_enabled = 1;
    90be:	4b11      	ldr	r3, [pc, #68]	; (9104 <radio_ext_adv_enable+0x4ac>)
    90c0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    90c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    90c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    90cc:	f893 3c2c 	ldrb.w	r3, [r3, #3116]	; 0xc2c
    90d0:	f013 0401 	ands.w	r4, r3, #1
    90d4:	d103      	bne.n	90de <radio_ext_adv_enable+0x486>
			ll_adv_scan_state_cb(BIT(0));
    90d6:	2001      	movs	r0, #1
    90d8:	f7ff fc3e 	bl	8958 <ll_adv_scan_state_cb>
		return 0;
    90dc:	4620      	mov	r0, r4
}
    90de:	b013      	add	sp, #76	; 0x4c
    90e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    90e4:	f3af 8000 	nop.w
    90e8:	1afd498d 	.word	0x1afd498d
    90ec:	00000007 	.word	0x00000007
    90f0:	000186a0 	.word	0x000186a0
    90f4:	00004825 	.word	0x00004825
    90f8:	00005d3d 	.word	0x00005d3d
    90fc:	84e72a00 	.word	0x84e72a00
    9100:	00005d75 	.word	0x00005d75
    9104:	200002c0 	.word	0x200002c0

00009108 <radio_adv_disable>:
{
    9108:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
    910a:	2103      	movs	r1, #3
    910c:	2005      	movs	r0, #5
    910e:	f7fb fc63 	bl	49d8 <role_disable>
	if (!status) {
    9112:	4605      	mov	r5, r0
    9114:	b9e8      	cbnz	r0, 9152 <radio_adv_disable+0x4a>
		_radio.advertiser.is_enabled = 0;
    9116:	4c10      	ldr	r4, [pc, #64]	; (9158 <radio_adv_disable+0x50>)
    9118:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    911c:	f360 12c7 	bfi	r2, r0, #7, #1
    9120:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    9124:	f894 2c2c 	ldrb.w	r2, [r4, #3116]	; 0xc2c
    9128:	07d3      	lsls	r3, r2, #31
    912a:	d401      	bmi.n	9130 <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
    912c:	f7ff fc14 	bl	8958 <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
    9130:	f8d4 6c18 	ldr.w	r6, [r4, #3096]	; 0xc18
		if (conn) {
    9134:	b15e      	cbz	r6, 914e <radio_adv_disable+0x46>
			_radio.advertiser.conn = NULL;
    9136:	2300      	movs	r3, #0
    9138:	f8c4 3c18 	str.w	r3, [r4, #3096]	; 0xc18
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    913c:	4907      	ldr	r1, [pc, #28]	; (915c <radio_adv_disable+0x54>)
    913e:	f8d6 009c 	ldr.w	r0, [r6, #156]	; 0x9c
    9142:	f7f9 fce0 	bl	2b06 <mem_release>
			mem_release(conn, &_radio.conn_free);
    9146:	4906      	ldr	r1, [pc, #24]	; (9160 <radio_adv_disable+0x58>)
    9148:	4630      	mov	r0, r6
    914a:	f7f9 fcdc 	bl	2b06 <mem_release>
}
    914e:	4628      	mov	r0, r5
    9150:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    9152:	250c      	movs	r5, #12
    9154:	e7fb      	b.n	914e <radio_adv_disable+0x46>
    9156:	bf00      	nop
    9158:	200002c0 	.word	0x200002c0
    915c:	20000fe8 	.word	0x20000fe8
    9160:	20000fb4 	.word	0x20000fb4

00009164 <ll_rx_dequeue>:
{
    9164:	b537      	push	{r0, r1, r2, r4, r5, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    9166:	4d34      	ldr	r5, [pc, #208]	; (9238 <ll_rx_dequeue+0xd4>)
	struct radio_pdu_node_rx *node_rx = NULL;
    9168:	aa02      	add	r2, sp, #8
    916a:	2300      	movs	r3, #0
    916c:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    9170:	f8d5 0d30 	ldr.w	r0, [r5, #3376]	; 0xd30
    9174:	f605 512c 	addw	r1, r5, #3372	; 0xd2c
    9178:	f7f9 fd03 	bl	2b82 <memq_dequeue>
    917c:	462c      	mov	r4, r5
	LL_ASSERT(link);
    917e:	b928      	cbnz	r0, 918c <ll_rx_dequeue+0x28>
			LL_ASSERT(_radio.scanner.is_enabled);
    9180:	4040      	eors	r0, r0
    9182:	f380 8811 	msr	BASEPRI, r0
    9186:	f04f 0004 	mov.w	r0, #4
    918a:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
    918c:	f605 5128 	addw	r1, r5, #3368	; 0xd28
    9190:	f7f9 fcb9 	bl	2b06 <mem_release>
	switch (node_rx->hdr.type) {
    9194:	9a01      	ldr	r2, [sp, #4]
    9196:	7911      	ldrb	r1, [r2, #4]
    9198:	290a      	cmp	r1, #10
    919a:	d8f1      	bhi.n	9180 <ll_rx_dequeue+0x1c>
    919c:	2301      	movs	r3, #1
    919e:	408b      	lsls	r3, r1
    91a0:	f240 707e 	movw	r0, #1918	; 0x77e
    91a4:	4203      	tst	r3, r0
    91a6:	d111      	bne.n	91cc <ll_rx_dequeue+0x68>
    91a8:	0618      	lsls	r0, r3, #24
    91aa:	d5e9      	bpl.n	9180 <ll_rx_dequeue+0x1c>
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
    91ac:	2906      	cmp	r1, #6
    91ae:	d134      	bne.n	921a <ll_rx_dequeue+0xb6>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
    91b0:	7ad3      	ldrb	r3, [r2, #11]
    91b2:	2b3c      	cmp	r3, #60	; 0x3c
    91b4:	d015      	beq.n	91e2 <ll_rx_dequeue+0x7e>
    91b6:	7b12      	ldrb	r2, [r2, #12]
    91b8:	bb8a      	cbnz	r2, 921e <ll_rx_dequeue+0xba>
			LL_ASSERT(_radio.scanner.is_enabled);
    91ba:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
    91be:	07d9      	lsls	r1, r3, #31
    91c0:	d5de      	bpl.n	9180 <ll_rx_dequeue+0x1c>
			_radio.scanner.is_enabled = 0;
    91c2:	f362 0300 	bfi	r3, r2, #0, #1
    91c6:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
    91ca:	e01a      	b.n	9202 <ll_rx_dequeue+0x9e>
		LL_ASSERT(_radio.link_rx_data_quota <
    91cc:	f895 0d20 	ldrb.w	r0, [r5, #3360]	; 0xd20
    91d0:	f895 3d34 	ldrb.w	r3, [r5, #3380]	; 0xd34
    91d4:	3801      	subs	r0, #1
    91d6:	4283      	cmp	r3, r0
    91d8:	dad2      	bge.n	9180 <ll_rx_dequeue+0x1c>
		_radio.link_rx_data_quota++;
    91da:	3301      	adds	r3, #1
    91dc:	f885 3d34 	strb.w	r3, [r5, #3380]	; 0xd34
		break;
    91e0:	e7e4      	b.n	91ac <ll_rx_dequeue+0x48>
				_radio.advertiser.conn = NULL;
    91e2:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
    91e4:	f8d4 5c18 	ldr.w	r5, [r4, #3096]	; 0xc18
				_radio.advertiser.conn = NULL;
    91e8:	f8c4 3c18 	str.w	r3, [r4, #3096]	; 0xc18
			LL_ASSERT(_radio.advertiser.is_enabled);
    91ec:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    91f0:	2b00      	cmp	r3, #0
    91f2:	dac5      	bge.n	9180 <ll_rx_dequeue+0x1c>
			_radio.advertiser.is_enabled = 0;
    91f4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    91f8:	f36f 13c7 	bfc	r3, #7, #1
    91fc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
    9200:	b97d      	cbnz	r5, 9222 <ll_rx_dequeue+0xbe>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    9202:	f894 0c2c 	ldrb.w	r0, [r4, #3116]	; 0xc2c
		     _radio.advertiser.is_enabled;
    9206:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    920a:	f000 0001 	and.w	r0, r0, #1
    920e:	0040      	lsls	r0, r0, #1
		if (!bm) {
    9210:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
    9214:	d101      	bne.n	921a <ll_rx_dequeue+0xb6>
			ll_adv_scan_state_cb(0);
    9216:	f7ff fb9f 	bl	8958 <ll_adv_scan_state_cb>
}
    921a:	b003      	add	sp, #12
    921c:	bd30      	pop	{r4, r5, pc}
		struct connection *conn = NULL;
    921e:	2500      	movs	r5, #0
    9220:	e7e4      	b.n	91ec <ll_rx_dequeue+0x88>
			mem_release(node_rx->hdr.onion.link,
    9222:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    9226:	4905      	ldr	r1, [pc, #20]	; (923c <ll_rx_dequeue+0xd8>)
    9228:	f7f9 fc6d 	bl	2b06 <mem_release>
			mem_release(conn, &_radio.conn_free);
    922c:	4904      	ldr	r1, [pc, #16]	; (9240 <ll_rx_dequeue+0xdc>)
    922e:	4628      	mov	r0, r5
    9230:	f7f9 fc69 	bl	2b06 <mem_release>
    9234:	e7e5      	b.n	9202 <ll_rx_dequeue+0x9e>
    9236:	bf00      	nop
    9238:	200002c0 	.word	0x200002c0
    923c:	20000fe8 	.word	0x20000fe8
    9240:	20000fb4 	.word	0x20000fb4

00009244 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    9244:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    9246:	4c0b      	ldr	r4, [pc, #44]	; (9274 <rtc0_nrf5_isr+0x30>)
    9248:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
    924c:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
    9250:	b122      	cbz	r2, 925c <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    9252:	2000      	movs	r0, #0
    9254:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
    9258:	f7fa fa8c 	bl	3774 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
    925c:	b12d      	cbz	r5, 926a <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    925e:	2300      	movs	r3, #0
    9260:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
    9264:	2001      	movs	r0, #1
    9266:	f7fa fa85 	bl	3774 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    926a:	2000      	movs	r0, #0
}
    926c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
    9270:	f7f9 bd36 	b.w	2ce0 <mayfly_run>
    9274:	4000b000 	.word	0x4000b000

00009278 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
    9278:	2001      	movs	r0, #1
    927a:	f7f9 bd31 	b.w	2ce0 <mayfly_run>

0000927e <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    927e:	4668      	mov	r0, sp
    9280:	f020 0107 	bic.w	r1, r0, #7
    9284:	468d      	mov	sp, r1
    9286:	b501      	push	{r0, lr}
	isr_radio();
    9288:	f000 ff36 	bl	a0f8 <isr_radio>
	ISR_DIRECT_PM();
    928c:	f7f7 fe42 	bl	f14 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
    9290:	f7f7 fc20 	bl	ad4 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    9294:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    9298:	4685      	mov	sp, r0
    929a:	4770      	bx	lr

0000929c <radio_active_callback>:
{
    929c:	4770      	bx	lr
	...

000092a0 <radio_event_callback>:
	k_sem_give(sem_recv);
    92a0:	4b01      	ldr	r3, [pc, #4]	; (92a8 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    92a2:	6818      	ldr	r0, [r3, #0]
    92a4:	f002 b8b6 	b.w	b414 <_impl_k_sem_give>
    92a8:	200019d8 	.word	0x200019d8

000092ac <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
    92ac:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
    92ae:	4b38      	ldr	r3, [pc, #224]	; (9390 <ll_init+0xe4>)
{
    92b0:	b086      	sub	sp, #24
	sem_recv = sem_rx;
    92b2:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    92b4:	4837      	ldr	r0, [pc, #220]	; (9394 <ll_init+0xe8>)
    92b6:	f001 fc4f 	bl	ab58 <device_get_binding>
	if (!clk_k32) {
    92ba:	b918      	cbnz	r0, 92c4 <ll_init+0x18>
		return -ENODEV;
    92bc:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
    92c0:	b006      	add	sp, #24
    92c2:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
    92c4:	6843      	ldr	r3, [r0, #4]
    92c6:	2101      	movs	r1, #1
    92c8:	681b      	ldr	r3, [r3, #0]
    92ca:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
    92cc:	4832      	ldr	r0, [pc, #200]	; (9398 <ll_init+0xec>)
    92ce:	f001 fc43 	bl	ab58 <device_get_binding>
	if (!entropy) {
    92d2:	4604      	mov	r4, r0
    92d4:	2800      	cmp	r0, #0
    92d6:	d0f1      	beq.n	92bc <ll_init+0x10>
	cntr_init();
    92d8:	f000 fe08 	bl	9eec <cntr_init>
	mayfly_init();
    92dc:	f7f9 fc60 	bl	2ba0 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    92e0:	4b2e      	ldr	r3, [pc, #184]	; (939c <ll_init+0xf0>)
    92e2:	2208      	movs	r2, #8
    92e4:	701a      	strb	r2, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    92e6:	2203      	movs	r2, #3
    92e8:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    92ea:	2000      	movs	r0, #0
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    92ec:	4a2c      	ldr	r2, [pc, #176]	; (93a0 <ll_init+0xf4>)
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    92ee:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    92f0:	2502      	movs	r5, #2
    92f2:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    92f4:	9205      	str	r2, [sp, #20]
    92f6:	4a2b      	ldr	r2, [pc, #172]	; (93a4 <ll_init+0xf8>)
    92f8:	9204      	str	r2, [sp, #16]
    92fa:	4a2b      	ldr	r2, [pc, #172]	; (93a8 <ll_init+0xfc>)
    92fc:	9203      	str	r2, [sp, #12]
    92fe:	4a2b      	ldr	r2, [pc, #172]	; (93ac <ll_init+0x100>)
    9300:	9202      	str	r2, [sp, #8]
    9302:	220d      	movs	r2, #13
    9304:	9201      	str	r2, [sp, #4]
    9306:	9300      	str	r3, [sp, #0]
    9308:	4a29      	ldr	r2, [pc, #164]	; (93b0 <ll_init+0x104>)
    930a:	2304      	movs	r3, #4
    930c:	2107      	movs	r1, #7
    930e:	f7fa f9f9 	bl	3704 <ticker_init>
	LL_ASSERT(!err);
    9312:	4606      	mov	r6, r0
    9314:	b128      	cbz	r0, 9322 <ll_init+0x76>
    9316:	4040      	eors	r0, r0
    9318:	f380 8811 	msr	BASEPRI, r0
    931c:	f04f 0004 	mov.w	r0, #4
    9320:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
    9322:	4824      	ldr	r0, [pc, #144]	; (93b4 <ll_init+0x108>)
    9324:	f001 fc18 	bl	ab58 <device_get_binding>
	if (!clk_m16) {
    9328:	2800      	cmp	r0, #0
    932a:	d0c7      	beq.n	92bc <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
    932c:	f44f 63ac 	mov.w	r3, #1376	; 0x560
    9330:	9305      	str	r3, [sp, #20]
    9332:	4b21      	ldr	r3, [pc, #132]	; (93b8 <ll_init+0x10c>)
    9334:	9304      	str	r3, [sp, #16]
    9336:	9501      	str	r5, [sp, #4]
    9338:	231b      	movs	r3, #27
    933a:	2501      	movs	r5, #1
    933c:	9303      	str	r3, [sp, #12]
    933e:	9302      	str	r3, [sp, #8]
    9340:	4622      	mov	r2, r4
    9342:	9500      	str	r5, [sp, #0]
    9344:	4633      	mov	r3, r6
    9346:	2107      	movs	r1, #7
    9348:	f7ff f91c 	bl	8584 <radio_init>
	if (err) {
    934c:	4604      	mov	r4, r0
    934e:	b9e0      	cbnz	r0, 938a <ll_init+0xde>
	ll_filter_reset(true);
    9350:	4628      	mov	r0, r5
    9352:	f000 fdbf 	bl	9ed4 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    9356:	4622      	mov	r2, r4
    9358:	4621      	mov	r1, r4
    935a:	4628      	mov	r0, r5
    935c:	f7f7 fdc0 	bl	ee0 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    9360:	4622      	mov	r2, r4
    9362:	4621      	mov	r1, r4
    9364:	200b      	movs	r0, #11
    9366:	f7f7 fdbb 	bl	ee0 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
    936a:	4622      	mov	r2, r4
    936c:	4621      	mov	r1, r4
    936e:	2018      	movs	r0, #24
    9370:	f7f7 fdb6 	bl	ee0 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
    9374:	4628      	mov	r0, r5
    9376:	f7f7 fd81 	bl	e7c <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    937a:	200b      	movs	r0, #11
    937c:	f7f7 fd7e 	bl	e7c <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
    9380:	2018      	movs	r0, #24
    9382:	f7f7 fd7b 	bl	e7c <_arch_irq_enable>
	return 0;
    9386:	4620      	mov	r0, r4
    9388:	e79a      	b.n	92c0 <ll_init+0x14>
		return -ENOMEM;
    938a:	f06f 000b 	mvn.w	r0, #11
    938e:	e797      	b.n	92c0 <ll_init+0x14>
    9390:	200019d8 	.word	0x200019d8
    9394:	0000c110 	.word	0x0000c110
    9398:	0000c59a 	.word	0x0000c59a
    939c:	200019b8 	.word	0x200019b8
    93a0:	0000a921 	.word	0x0000a921
    93a4:	0000a8a9 	.word	0x0000a8a9
    93a8:	0000a889 	.word	0x0000a889
    93ac:	20001748 	.word	0x20001748
    93b0:	20001630 	.word	0x20001630
    93b4:	0000c11b 	.word	0x0000c11b
    93b8:	200010d0 	.word	0x200010d0

000093bc <ll_adv_params_set>:

u32_t ll_adv_params_set(u16_t interval, u8_t adv_type,
			u8_t own_addr_type, u8_t direct_addr_type,
			u8_t const *const direct_addr, u8_t chan_map,
			u8_t filter_policy)
{
    93bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    93c0:	4615      	mov	r5, r2
    93c2:	461e      	mov	r6, r3
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    93c4:	2206      	movs	r2, #6
    93c6:	2300      	movs	r3, #0
    93c8:	f88d 3000 	strb.w	r3, [sp]
    93cc:	f88d 2002 	strb.w	r2, [sp, #2]
    93d0:	2301      	movs	r3, #1
    93d2:	2202      	movs	r2, #2
{
    93d4:	4607      	mov	r7, r0
    93d6:	4688      	mov	r8, r1
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    93d8:	f88d 3001 	strb.w	r3, [sp, #1]
    93dc:	f88d 2003 	strb.w	r2, [sp, #3]
    93e0:	f88d 3004 	strb.w	r3, [sp, #4]
				     PDU_ADV_TYPE_DIRECT_IND};

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (ll_adv_is_enabled()) {
    93e4:	f7ff f9b0 	bl	8748 <ll_adv_is_enabled>
    93e8:	4604      	mov	r4, r0
    93ea:	2800      	cmp	r0, #0
    93ec:	d162      	bne.n	94b4 <ll_adv_params_set+0xf8>
    93ee:	4a32      	ldr	r2, [pc, #200]	; (94b8 <ll_adv_params_set+0xfc>)
	if (adv_type != 0x01) {
		ll_adv.interval = interval;
	} else {
		ll_adv.interval = 0;
	}
	ll_adv.chan_map = chan_map;
    93f0:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
    93f4:	7813      	ldrb	r3, [r2, #0]
    93f6:	f361 0302 	bfi	r3, r1, #0, #3
	ll_adv.filter_policy = filter_policy;
    93fa:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
	if (adv_type != 0x01) {
    93fe:	f1b8 0f01 	cmp.w	r8, #1
	ll_adv.filter_policy = filter_policy;
    9402:	f361 03c4 	bfi	r3, r1, #3, #2
		ll_adv.interval = interval;
    9406:	bf14      	ite	ne
    9408:	8057      	strhne	r7, [r2, #2]
		ll_adv.interval = 0;
    940a:	8050      	strheq	r0, [r2, #2]
	ll_adv.filter_policy = filter_policy;
    940c:	7013      	strb	r3, [r2, #0]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
    940e:	f7ff f98b 	bl	8728 <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9412:	f890 2203 	ldrb.w	r2, [r0, #515]	; 0x203
	pdu->type = pdu_adv_type[adv_type];
    9416:	ab02      	add	r3, sp, #8
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9418:	eb02 2202 	add.w	r2, r2, r2, lsl #8
	pdu->type = pdu_adv_type[adv_type];
    941c:	4498      	add	r8, r3
    941e:	5c83      	ldrb	r3, [r0, r2]
    9420:	f818 1c08 	ldrb.w	r1, [r8, #-8]
    9424:	f361 0303 	bfi	r3, r1, #0, #4
	pdu->rfu = 0;
    9428:	f36f 1304 	bfc	r3, #4, #1
    942c:	5483      	strb	r3, [r0, r2]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    942e:	b2db      	uxtb	r3, r3
    9430:	f003 010f 	and.w	r1, r3, #15
    9434:	2901      	cmp	r1, #1
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
	     (pdu->type == PDU_ADV_TYPE_DIRECT_IND))) {
		pdu->chan_sel = 1;
    9436:	bf94      	ite	ls
    9438:	f043 0320 	orrls.w	r3, r3, #32
	} else {
		pdu->chan_sel = 0;
    943c:	f36f 1345 	bfchi	r3, #5, #1
    9440:	5483      	strb	r3, [r0, r2]
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
    9442:	5c83      	ldrb	r3, [r0, r2]
    9444:	f005 0501 	and.w	r5, r5, #1
    9448:	f365 1386 	bfi	r3, r5, #6, #1
	pdu->rx_addr = 0;
    944c:	f36f 13c7 	bfc	r3, #7, #1
    9450:	5483      	strb	r3, [r0, r2]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    9452:	b2db      	uxtb	r3, r3
    9454:	f003 010f 	and.w	r1, r3, #15
    9458:	2901      	cmp	r1, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    945a:	eb00 0702 	add.w	r7, r0, r2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    945e:	d124      	bne.n	94aa <ll_adv_params_set+0xee>
		pdu->rx_addr = direct_addr_type;
    9460:	f366 13c7 	bfi	r3, r6, #7, #1
    9464:	5483      	strb	r3, [r0, r2]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    9466:	9908      	ldr	r1, [sp, #32]
    9468:	2206      	movs	r2, #6
    946a:	f107 0008 	add.w	r0, r7, #8
    946e:	f7f7 f899 	bl	5a4 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    9472:	230c      	movs	r3, #12

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
    9474:	707b      	strb	r3, [r7, #1]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
    9476:	f7ff f963 	bl	8740 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    947a:	f890 2203 	ldrb.w	r2, [r0, #515]	; 0x203
    947e:	eb02 2202 	add.w	r2, r2, r2, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    9482:	2604      	movs	r6, #4
    9484:	5c83      	ldrb	r3, [r0, r2]
    9486:	f366 0303 	bfi	r3, r6, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
    948a:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
    948e:	f365 1386 	bfi	r3, r5, #6, #1
	pdu->rx_addr = 0;
    9492:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9496:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
    9498:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
    949a:	784b      	ldrb	r3, [r1, #1]
    949c:	b90b      	cbnz	r3, 94a2 <ll_adv_params_set+0xe6>
		pdu->len = BDADDR_SIZE;
    949e:	2306      	movs	r3, #6
    94a0:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
    94a2:	4620      	mov	r0, r4
    94a4:	b002      	add	sp, #8
    94a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (pdu->len == 0) {
    94aa:	787b      	ldrb	r3, [r7, #1]
    94ac:	2b00      	cmp	r3, #0
    94ae:	d1e2      	bne.n	9476 <ll_adv_params_set+0xba>
		pdu->len = BDADDR_SIZE;
    94b0:	2306      	movs	r3, #6
    94b2:	e7df      	b.n	9474 <ll_adv_params_set+0xb8>
		return BT_HCI_ERR_CMD_DISALLOWED;
    94b4:	240c      	movs	r4, #12
    94b6:	e7f4      	b.n	94a2 <ll_adv_params_set+0xe6>
    94b8:	200019de 	.word	0x200019de

000094bc <ll_ext_adv_params_set>:
u32_t ll_ext_adv_params_set(u8_t Adv_handle, u16_t evt_prop, u16_t interval,
			u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
    94bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    94c0:	b089      	sub	sp, #36	; 0x24
    94c2:	4699      	mov	r9, r3
    94c4:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    94c8:	9301      	str	r3, [sp, #4]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    94ca:	2300      	movs	r3, #0
    94cc:	f88d 3018 	strb.w	r3, [sp, #24]
    94d0:	2306      	movs	r3, #6
    94d2:	2501      	movs	r5, #1
    94d4:	f88d 301a 	strb.w	r3, [sp, #26]
    94d8:	2602      	movs	r6, #2
    94da:	2307      	movs	r3, #7
{
    94dc:	9102      	str	r1, [sp, #8]
    94de:	4614      	mov	r4, r2
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    94e0:	f88d 5019 	strb.w	r5, [sp, #25]
    94e4:	f88d 601b 	strb.w	r6, [sp, #27]
    94e8:	f88d 501c 	strb.w	r5, [sp, #28]
    94ec:	f88d 301d 	strb.w	r3, [sp, #29]
//	struct radio_ext_adv_data *radio_aux_adv_data;
	struct radio_adv_data *radio_aux_adv_data;
	struct pdu_adv *pdu;
	struct pdu_adv *aux_pdu;
	
	if (ll_adv_is_enabled()) {
    94f0:	f7ff f92a 	bl	8748 <ll_adv_is_enabled>
    94f4:	9902      	ldr	r1, [sp, #8]
    94f6:	4607      	mov	r7, r0
    94f8:	2800      	cmp	r0, #0
    94fa:	f040 81b3 	bne.w	9864 <ll_ext_adv_params_set+0x3a8>

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */
	ll_adv.max_skip = skip;
    94fe:	4b5c      	ldr	r3, [pc, #368]	; (9670 <ll_ext_adv_params_set+0x1b4>)
    9500:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    9504:	711a      	strb	r2, [r3, #4]
	
	u8_t adv_type;
	ll_adv.phy_p = BIT(0);
    9506:	781a      	ldrb	r2, [r3, #0]
    9508:	f365 1247 	bfi	r2, r5, #5, #3
    950c:	701a      	strb	r2, [r3, #0]
		adv_type = 0x05;
	}			
	/* extended */
	//if (adv_type > 0x04) {
		/* legacy */
		if (evt_prop & BIT(4)) {
    950e:	06ca      	lsls	r2, r1, #27
    9510:	f140 809b 	bpl.w	964a <ll_ext_adv_params_set+0x18e>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    9514:	2203      	movs	r2, #3
    9516:	f88d 2014 	strb.w	r2, [sp, #20]
    951a:	f88d 0017 	strb.w	r0, [sp, #23]
    951e:	2204      	movs	r2, #4

			adv_type = leg_adv_type[evt_prop & 0x03];

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
    9520:	0708      	lsls	r0, r1, #28
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    9522:	f88d 2015 	strb.w	r2, [sp, #21]
    9526:	f88d 6016 	strb.w	r6, [sp, #22]
			if (evt_prop & BIT(3)) {
    952a:	d408      	bmi.n	953e <ll_ext_adv_params_set+0x82>
			adv_type = leg_adv_type[evt_prop & 0x03];
    952c:	f001 0203 	and.w	r2, r1, #3
    9530:	a808      	add	r0, sp, #32
    9532:	4402      	add	r2, r0
    9534:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type == 0x01) {
    9538:	42aa      	cmp	r2, r5
    953a:	f040 8096 	bne.w	966a <ll_ext_adv_params_set+0x1ae>
		ll_adv.interval = 0;  				//interval = 0 for ADV_DIRECT_IND
    953e:	2200      	movs	r2, #0
    9540:	805a      	strh	r2, [r3, #2]
    9542:	2201      	movs	r2, #1
	} else {
		ll_adv.interval = interval;
	}
	ll_adv.chan_map = chan_map;  			
    9544:	7818      	ldrb	r0, [r3, #0]
    9546:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
    954a:	9103      	str	r1, [sp, #12]
    954c:	f364 0002 	bfi	r0, r4, #0, #3
	ll_adv.filter_policy = filter_policy;
    9550:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
    9554:	9202      	str	r2, [sp, #8]
    9556:	f364 00c4 	bfi	r0, r4, #3, #2
    955a:	7018      	strb	r0, [r3, #0]
	
	/* update the "current" primary adv data and Aux packet */
	radio_adv_data = radio_adv_data_get();
    955c:	f7ff f8e4 	bl	8728 <radio_adv_data_get>
    9560:	4606      	mov	r6, r0
	radio_aux_adv_data = radio_aux_adv_data_get();							// testing
    9562:	f7ff f8e5 	bl	8730 <radio_aux_adv_data_get>
//	radio_aux_adv_data = radio_chain_adv_data_get();

	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];

	pdu->type = pdu_adv_type[adv_type];
    9566:	9a02      	ldr	r2, [sp, #8]
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9568:	f896 3203 	ldrb.w	r3, [r6, #515]	; 0x203
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
    956c:	f890 e203 	ldrb.w	lr, [r0, #515]	; 0x203
	pdu->type = pdu_adv_type[adv_type];
    9570:	a908      	add	r1, sp, #32
    9572:	440a      	add	r2, r1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9574:	eb03 2303 	add.w	r3, r3, r3, lsl #8
	pdu->type = pdu_adv_type[adv_type];
    9578:	f812 2c08 	ldrb.w	r2, [r2, #-8]
    957c:	f816 c003 	ldrb.w	ip, [r6, r3]
	aux_pdu->type = pdu->type;
	
	pdu->rfu = 0;
	aux_pdu->rfu = pdu->rfu;

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) && 
    9580:	9903      	ldr	r1, [sp, #12]
	pdu->type = pdu_adv_type[adv_type];
    9582:	f002 020f 	and.w	r2, r2, #15
    9586:	f362 0c03 	bfi	ip, r2, #0, #4
    958a:	f806 c003 	strb.w	ip, [r6, r3]
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
    958e:	eb0e 2e0e 	add.w	lr, lr, lr, lsl #8
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr =  own_addr_type & 0x1;
    9592:	f009 0901 	and.w	r9, r9, #1
	aux_pdu->type = pdu->type;
    9596:	f810 c00e 	ldrb.w	ip, [r0, lr]
    959a:	f362 0c03 	bfi	ip, r2, #0, #4
    959e:	f800 c00e 	strb.w	ip, [r0, lr]
	pdu->rfu = 0;
    95a2:	5cf2      	ldrb	r2, [r6, r3]
    95a4:	f36f 1204 	bfc	r2, #4, #1
    95a8:	54f2      	strb	r2, [r6, r3]
	aux_pdu->rfu = pdu->rfu;
    95aa:	f810 200e 	ldrb.w	r2, [r0, lr]
    95ae:	f36f 1204 	bfc	r2, #4, #1
    95b2:	f800 200e 	strb.w	r2, [r0, lr]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) && 
    95b6:	5cf2      	ldrb	r2, [r6, r3]
    95b8:	f002 0c0f 	and.w	ip, r2, #15
    95bc:	f1bc 0f01 	cmp.w	ip, #1
		pdu->chan_sel = 1;           // could be same for ext adv  LE Channel Selection Algorithm #2 feature 
    95c0:	bf95      	itete	ls
    95c2:	f042 0220 	orrls.w	r2, r2, #32
		pdu->chan_sel = 0;
    95c6:	f36f 1245 	bfchi	r2, #5, #1
		pdu->chan_sel = 1;           // could be same for ext adv  LE Channel Selection Algorithm #2 feature 
    95ca:	54f2      	strbls	r2, [r6, r3]
		pdu->chan_sel = 0;
    95cc:	54f2      	strbhi	r2, [r6, r3]
		aux_pdu->chan_sel = pdu->chan_sel;
    95ce:	bf95      	itete	ls
    95d0:	f810 200e 	ldrbls.w	r2, [r0, lr]
		aux_pdu->chan_sel = pdu->chan_sel;
    95d4:	f810 200e 	ldrbhi.w	r2, [r0, lr]
		aux_pdu->chan_sel = pdu->chan_sel;
    95d8:	f042 0220 	orrls.w	r2, r2, #32
		aux_pdu->chan_sel = pdu->chan_sel;
    95dc:	f36f 1245 	bfchi	r2, #5, #1
    95e0:	f800 200e 	strb.w	r2, [r0, lr]
	pdu->tx_addr =  own_addr_type & 0x1;
    95e4:	5cf2      	ldrb	r2, [r6, r3]
    95e6:	f369 1286 	bfi	r2, r9, #6, #1
    95ea:	54f2      	strb	r2, [r6, r3]
	aux_pdu->tx_addr = 0;						//not sending transmitting address in aux packet
    95ec:	f810 200e 	ldrb.w	r2, [r0, lr]
    95f0:	f36f 1286 	bfc	r2, #6, #1
    95f4:	f800 200e 	strb.w	r2, [r0, lr]
	pdu->rx_addr = 0;  							
    95f8:	5cf2      	ldrb	r2, [r6, r3]
    95fa:	f36f 12c7 	bfc	r2, #7, #1
    95fe:	54f2      	strb	r2, [r6, r3]
	aux_pdu->rx_addr = pdu->rx_addr;
    9600:	f810 200e 	ldrb.w	r2, [r0, lr]
    9604:	f36f 12c7 	bfc	r2, #7, #1
    9608:	f800 200e 	strb.w	r2, [r0, lr]
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
    960c:	eb00 050e 	add.w	r5, r0, lr
	if(evt_prop & BIT(2)){							// for directed ADV wuth public address
    9610:	f011 0004 	ands.w	r0, r1, #4
		pdu->rx_addr = 0;//direct_addr_type;
    9614:	bf1e      	ittt	ne
    9616:	5cf2      	ldrbne	r2, [r6, r3]
    9618:	f36f 12c7 	bfcne	r2, #7, #1
    961c:	54f2      	strbne	r2, [r6, r3]
	}

	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    961e:	5cf2      	ldrb	r2, [r6, r3]
    9620:	f002 0e0f 	and.w	lr, r2, #15
    9624:	f1be 0f01 	cmp.w	lr, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9628:	eb06 0403 	add.w	r4, r6, r3
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    962c:	d122      	bne.n	9674 <ll_ext_adv_params_set+0x1b8>
		pdu->rx_addr = direct_addr_type;
    962e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
    9632:	f361 12c7 	bfi	r2, r1, #7, #1
    9636:	54f2      	strb	r2, [r6, r3]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    9638:	9913      	ldr	r1, [sp, #76]	; 0x4c
    963a:	2206      	movs	r2, #6
    963c:	f104 0008 	add.w	r0, r4, #8
    9640:	f7f6 ffb0 	bl	5a4 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    9644:	230c      	movs	r3, #12
		/* NOTE: AdvA, filled at enable and RPA timeout */
		
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
    9646:	7063      	strb	r3, [r4, #1]
    9648:	e0e7      	b.n	981a <ll_ext_adv_params_set+0x35e>
			if (((evt_prop & 0x03) == 0x03) ||
    964a:	f001 0203 	and.w	r2, r1, #3
    964e:	2a03      	cmp	r2, #3
    9650:	f000 810a 	beq.w	9868 <ll_ext_adv_params_set+0x3ac>
    9654:	f001 020c 	and.w	r2, r1, #12
    9658:	2a0c      	cmp	r2, #12
    965a:	f000 8105 	beq.w	9868 <ll_ext_adv_params_set+0x3ac>
			ll_adv.phy_p = phy_p;
    965e:	781a      	ldrb	r2, [r3, #0]
    9660:	9801      	ldr	r0, [sp, #4]
    9662:	f360 1247 	bfi	r2, r0, #5, #3
    9666:	701a      	strb	r2, [r3, #0]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
    9668:	2205      	movs	r2, #5
		ll_adv.interval = interval;
    966a:	805c      	strh	r4, [r3, #2]
    966c:	e76a      	b.n	9544 <ll_ext_adv_params_set+0x88>
    966e:	bf00      	nop
    9670:	200019de 	.word	0x200019de
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
    9674:	f1be 0f07 	cmp.w	lr, #7
    9678:	f040 80ef 	bne.w	985a <ll_ext_adv_params_set+0x39e>
		p->ext_hdr_len = 0;
    967c:	78a2      	ldrb	r2, [r4, #2]
		p->adv_mode = 0x00;//evt_prop & 0x03;
    967e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    9682:	f36f 1287 	bfc	r2, #6, #2
    9686:	70a2      	strb	r2, [r4, #2]
		aux_p->ext_hdr_len = p->ext_hdr_len;
    9688:	78aa      	ldrb	r2, [r5, #2]
		aux_p->adv_mode = p->adv_mode;
    968a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    968e:	f36f 1287 	bfc	r2, #6, #2
    9692:	70aa      	strb	r2, [r5, #2]
		*(u8_t *)h = 0;
    9694:	2200      	movs	r2, #0
    9696:	70e2      	strb	r2, [r4, #3]
		*(u8_t *)aux_h = 0;
    9698:	70ea      	strb	r2, [r5, #3]
		if (!((evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2)))) {
    969a:	068a      	lsls	r2, r1, #26
		p = (void *)&pdu->adv_ext_ind;
    969c:	f104 0c02 	add.w	ip, r4, #2
		ptr = (u8_t *)h + sizeof(*h);
    96a0:	f104 0604 	add.w	r6, r4, #4
		aux_p = (void *)&aux_pdu->adv_ext_ind;
    96a4:	f105 0e02 	add.w	lr, r5, #2
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
    96a8:	f105 0304 	add.w	r3, r5, #4
		if (!((evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2)))) {
    96ac:	d507      	bpl.n	96be <ll_ext_adv_params_set+0x202>
    96ae:	78a2      	ldrb	r2, [r4, #2]
    96b0:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    96b4:	d103      	bne.n	96be <ll_ext_adv_params_set+0x202>
    96b6:	9a01      	ldr	r2, [sp, #4]
    96b8:	2a04      	cmp	r2, #4
    96ba:	f040 80c8 	bne.w	984e <ll_ext_adv_params_set+0x392>
			h->adv_addr = 1;
    96be:	78e2      	ldrb	r2, [r4, #3]
    96c0:	f042 0201 	orr.w	r2, r2, #1
    96c4:	70e2      	strb	r2, [r4, #3]
			ptr += BDADDR_SIZE;
    96c6:	f104 020a 	add.w	r2, r4, #10
		if(evt_prop & BIT(2)){
    96ca:	b120      	cbz	r0, 96d6 <ll_ext_adv_params_set+0x21a>
			h->tgt_addr = 1;
    96cc:	78e0      	ldrb	r0, [r4, #3]
    96ce:	f040 0002 	orr.w	r0, r0, #2
    96d2:	70e0      	strb	r0, [r4, #3]
			ptr += BDADDR_SIZE;
    96d4:	3206      	adds	r2, #6
		if(evt_prop & BIT(6)){
    96d6:	0648      	lsls	r0, r1, #25
    96d8:	f140 80bb 	bpl.w	9852 <ll_ext_adv_params_set+0x396>
			h->adi = 1;
    96dc:	78e1      	ldrb	r1, [r4, #3]
			aux_adi_ptr = aux_ptr;
    96de:	9300      	str	r3, [sp, #0]
			h->adi = 1;
    96e0:	f041 0108 	orr.w	r1, r1, #8
    96e4:	70e1      	strb	r1, [r4, #3]
			aux_h->adi = h->adi;
    96e6:	78e9      	ldrb	r1, [r5, #3]
    96e8:	f041 0108 	orr.w	r1, r1, #8
    96ec:	70e9      	strb	r1, [r5, #3]
			h->aux_ptr = 1;
    96ee:	78e1      	ldrb	r1, [r4, #3]
    96f0:	f041 0110 	orr.w	r1, r1, #16
    96f4:	70e1      	strb	r1, [r4, #3]
			aux_h->aux_ptr = h->aux_ptr;
    96f6:	78e9      	ldrb	r1, [r5, #3]
    96f8:	f041 0110 	orr.w	r1, r1, #16
    96fc:	70e9      	strb	r1, [r5, #3]
			h->tx_pwr = 1;
    96fe:	78e0      	ldrb	r0, [r4, #3]
			ptr += sizeof(*adi_ptr);
    9700:	f102 0802 	add.w	r8, r2, #2
			h->tx_pwr = 1;
    9704:	f040 0040 	orr.w	r0, r0, #64	; 0x40
			adi_ptr = ptr;
    9708:	4693      	mov	fp, r2
			aux_ptr+= sizeof(*aux_ap);
    970a:	f105 0109 	add.w	r1, r5, #9
			h->tx_pwr = 1;
    970e:	70e0      	strb	r0, [r4, #3]
			ptr += sizeof(*adi_ptr);
    9710:	46c2      	mov	sl, r8
			ptr ++;
    9712:	3206      	adds	r2, #6
		len = ptr - (u8_t *)p;
    9714:	eba2 020c 	sub.w	r2, r2, ip
    9718:	b2d2      	uxtb	r2, r2
		if (len > (offsetof(struct pdu_adv_com_ext_adv,
    971a:	2a02      	cmp	r2, #2
			p->ext_hdr_len = (len -
    971c:	bf88      	it	hi
    971e:	78a0      	ldrbhi	r0, [r4, #2]
		aux_len = aux_ptr - (u8_t *)aux_p;
    9720:	eba1 0e0e 	sub.w	lr, r1, lr
			p->ext_hdr_len = (len -
    9724:	bf84      	itt	hi
    9726:	f102 3cff 	addhi.w	ip, r2, #4294967295	; 0xffffffff
    972a:	f36c 0005 	bfihi	r0, ip, #0, #6
		aux_len = aux_ptr - (u8_t *)aux_p;
    972e:	fa5f fe8e 	uxtb.w	lr, lr
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    9732:	bf94      	ite	ls
    9734:	2201      	movls	r2, #1
			p->ext_hdr_len = (len -
    9736:	70a0      	strbhi	r0, [r4, #2]
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    9738:	7062      	strb	r2, [r4, #1]
		if (aux_len > (offsetof(struct pdu_adv_com_ext_adv,
    973a:	f1be 0f02 	cmp.w	lr, #2
    973e:	4a4b      	ldr	r2, [pc, #300]	; (986c <ll_ext_adv_params_set+0x3b0>)
			aux_p->ext_hdr_len = (aux_len -
    9740:	bf88      	it	hi
    9742:	78a9      	ldrbhi	r1, [r5, #2]
			aux_ptr_len = aux_len;
    9744:	f882 e000 	strb.w	lr, [r2]
			aux_p->ext_hdr_len = (aux_len -
    9748:	bf88      	it	hi
    974a:	f10e 30ff 	addhi.w	r0, lr, #4294967295	; 0xffffffff
		if(h->adv_addr){
    974e:	78e2      	ldrb	r2, [r4, #3]
			aux_pdu->len = aux_len;
    9750:	bf85      	ittet	hi
    9752:	f885 e001 	strbhi.w	lr, [r5, #1]
			aux_p->ext_hdr_len = (aux_len -
    9756:	f360 0105 	bfihi	r1, r0, #0, #6
			aux_pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    975a:	2101      	movls	r1, #1
			aux_p->ext_hdr_len = (aux_len -
    975c:	70a9      	strbhi	r1, [r5, #2]
			aux_pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    975e:	bf98      	it	ls
    9760:	7069      	strbls	r1, [r5, #1]
		if(h->adv_addr){
    9762:	07d1      	lsls	r1, r2, #31
			ptr += BDADDR_SIZE;
    9764:	bf48      	it	mi
    9766:	f104 060a 	addmi.w	r6, r4, #10
		if(h->tgt_addr){
    976a:	0792      	lsls	r2, r2, #30
    976c:	d507      	bpl.n	977e <ll_ext_adv_params_set+0x2c2>
			memcpy(ptr, direct_addr, BDADDR_SIZE);
    976e:	4630      	mov	r0, r6
    9770:	2206      	movs	r2, #6
    9772:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9774:	9301      	str	r3, [sp, #4]
    9776:	f7f6 ff15 	bl	5a4 <memcpy>
			ptr += BDADDR_SIZE;
    977a:	9b01      	ldr	r3, [sp, #4]
    977c:	3606      	adds	r6, #6
		if(h->adi){
    977e:	78e0      	ldrb	r0, [r4, #3]
    9780:	0704      	lsls	r4, r0, #28
    9782:	d517      	bpl.n	97b4 <ll_ext_adv_params_set+0x2f8>
			adi_ptr->did = 0x00;
    9784:	f89b 3001 	ldrb.w	r3, [fp, #1]
			adi_ptr->sid = 0x02;//sid & 0x0f;
    9788:	2102      	movs	r1, #2
    978a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    978e:	f361 1307 	bfi	r3, r1, #4, #4
    9792:	f88b 3001 	strb.w	r3, [fp, #1]
			adi_ptr->did = 0x00;
    9796:	2200      	movs	r2, #0
			aux_adi_ptr->did = adi_ptr->did;
    9798:	9b00      	ldr	r3, [sp, #0]
			adi_ptr->did = 0x00;
    979a:	f88b 2000 	strb.w	r2, [fp]
			aux_adi_ptr->did = adi_ptr->did;
    979e:	701a      	strb	r2, [r3, #0]
    97a0:	785b      	ldrb	r3, [r3, #1]
			aux_adi_ptr->sid = 0x04;//adi_ptr->sid;
    97a2:	2204      	movs	r2, #4
    97a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    97a8:	f362 1307 	bfi	r3, r2, #4, #4
    97ac:	9a00      	ldr	r2, [sp, #0]
			ptr += sizeof(*adi_ptr);
    97ae:	440e      	add	r6, r1
			aux_adi_ptr->sid = 0x04;//adi_ptr->sid;
    97b0:	7053      	strb	r3, [r2, #1]
			aux_ptr += sizeof(*aux_adi_ptr);
    97b2:	1dab      	adds	r3, r5, #6
		if(h->aux_ptr){
    97b4:	06c1      	lsls	r1, r0, #27
    97b6:	d523      	bpl.n	9800 <ll_ext_adv_params_set+0x344>
			ap->offs = 00;
    97b8:	f89a 1002 	ldrb.w	r1, [sl, #2]
    97bc:	2200      	movs	r2, #0
			ap->phy = 0;
    97be:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
			ap->chan_idx = 0x03;
    97c2:	2403      	movs	r4, #3
			ap->phy = 0;
    97c4:	f362 1147 	bfi	r1, r2, #5, #3
			ap->offs_units = 0;
    97c8:	f88a 4000 	strb.w	r4, [sl]
			ap->offs = 00;
    97cc:	f88a 2001 	strb.w	r2, [sl, #1]
			ap->phy = 0;
    97d0:	f88a 1002 	strb.w	r1, [sl, #2]
			aux_ap->chan_idx = 0x03;
    97d4:	f898 1000 	ldrb.w	r1, [r8]
			aux_ap->offs = 00;
    97d8:	f888 2001 	strb.w	r2, [r8, #1]
			aux_ap->chan_idx = 0x03;
    97dc:	f364 0105 	bfi	r1, r4, #0, #6
			aux_ap->offs_units = 0;
    97e0:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
    97e4:	f362 11c7 	bfi	r1, r2, #7, #1
    97e8:	f888 1000 	strb.w	r1, [r8]
			aux_ap->offs = 00;
    97ec:	f898 1002 	ldrb.w	r1, [r8, #2]
			aux_ap->phy = 0;
    97f0:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
    97f4:	f362 1147 	bfi	r1, r2, #5, #3
			ptr += sizeof(*ap);
    97f8:	4426      	add	r6, r4
			aux_ap->phy = 0;
    97fa:	f888 1002 	strb.w	r1, [r8, #2]
			aux_ptr += sizeof(*ap);
    97fe:	4423      	add	r3, r4
		if (h->tx_pwr) {
    9800:	0642      	lsls	r2, r0, #25
    9802:	d508      	bpl.n	9816 <ll_ext_adv_params_set+0x35a>
			if (tx_pwr) {
    9804:	9a16      	ldr	r2, [sp, #88]	; 0x58
    9806:	b332      	cbz	r2, 9856 <ll_ext_adv_params_set+0x39a>
				if (*tx_pwr != 0x7F) {
    9808:	7812      	ldrb	r2, [r2, #0]
    980a:	2a7f      	cmp	r2, #127	; 0x7f
    980c:	d102      	bne.n	9814 <ll_ext_adv_params_set+0x358>
					*tx_pwr = _tx_pwr;
    980e:	9916      	ldr	r1, [sp, #88]	; 0x58
    9810:	2200      	movs	r2, #0
    9812:	700a      	strb	r2, [r1, #0]
			*ptr = _tx_pwr;
    9814:	7032      	strb	r2, [r6, #0]
		set_data_ptr = aux_ptr; 
    9816:	4a16      	ldr	r2, [pc, #88]	; (9870 <ll_ext_adv_params_set+0x3b4>)
    9818:	6013      	str	r3, [r2, #0]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
    981a:	f7fe ff91 	bl	8740 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    981e:	f890 2203 	ldrb.w	r2, [r0, #515]	; 0x203
    9822:	eb02 2202 	add.w	r2, r2, r2, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    9826:	2404      	movs	r4, #4
    9828:	5c83      	ldrb	r3, [r0, r2]
    982a:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
    982e:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
    9832:	f369 1386 	bfi	r3, r9, #6, #1
	pdu->rx_addr = 0;
    9836:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    983a:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
    983c:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
    983e:	784b      	ldrb	r3, [r1, #1]
    9840:	b90b      	cbnz	r3, 9846 <ll_ext_adv_params_set+0x38a>
		pdu->len = BDADDR_SIZE;
    9842:	2306      	movs	r3, #6
    9844:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
    9846:	4638      	mov	r0, r7
    9848:	b009      	add	sp, #36	; 0x24
    984a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ptr = (u8_t *)h + sizeof(*h);
    984e:	4632      	mov	r2, r6
    9850:	e73b      	b.n	96ca <ll_ext_adv_params_set+0x20e>
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
    9852:	4619      	mov	r1, r3
    9854:	e75e      	b.n	9714 <ll_ext_adv_params_set+0x258>
			_tx_pwr = 0;
    9856:	9a16      	ldr	r2, [sp, #88]	; 0x58
    9858:	e7dc      	b.n	9814 <ll_ext_adv_params_set+0x358>
	} else if (pdu->len == 0) {
    985a:	7863      	ldrb	r3, [r4, #1]
    985c:	2b00      	cmp	r3, #0
    985e:	d1dc      	bne.n	981a <ll_ext_adv_params_set+0x35e>
		pdu->len = BDADDR_SIZE;
    9860:	2306      	movs	r3, #6
    9862:	e6f0      	b.n	9646 <ll_ext_adv_params_set+0x18a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    9864:	270c      	movs	r7, #12
    9866:	e7ee      	b.n	9846 <ll_ext_adv_params_set+0x38a>
				return 0x12; /* invalid HCI cmd param */
    9868:	2712      	movs	r7, #18
    986a:	e7ec      	b.n	9846 <ll_ext_adv_params_set+0x38a>
    986c:	200019dc 	.word	0x200019dc
    9870:	200019e4 	.word	0x200019e4

00009874 <ll_adv_data_set>:


void ll_adv_data_set(u8_t len, u8_t const *const data)
{
    9874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9878:	4688      	mov	r8, r1
    987a:	4606      	mov	r6, r0
	struct pdu_adv *pdu;
	u8_t last;


	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
    987c:	f7fe ff54 	bl	8728 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9880:	f890 5203 	ldrb.w	r5, [r0, #515]	; 0x203
    9884:	eb05 2205 	add.w	r2, r5, r5, lsl #8
	radio_adv_data = radio_adv_data_get();
    9888:	4604      	mov	r4, r0
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
    988a:	f810 e002 	ldrb.w	lr, [r0, r2]
    988e:	f00e 030f 	and.w	r3, lr, #15
    9892:	2b07      	cmp	r3, #7
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9894:	eb00 0102 	add.w	r1, r0, r2
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
    9898:	d118      	bne.n	98cc <ll_adv_data_set+0x58>
	//	struct radio_ext_adv_data *radio_aux_adv_data;
		struct radio_adv_data *radio_aux_adv_data;
		struct pdu_adv *aux_pdu;
		u8_t last;

		radio_aux_adv_data = radio_aux_adv_data_get();					//testing
    989a:	f7fe ff49 	bl	8730 <radio_aux_adv_data_get>
	//	radio_aux_adv_data = radio_chain_adv_data_get();
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
    989e:	f890 5203 	ldrb.w	r5, [r0, #515]	; 0x203
	
		memcpy(set_data_ptr, data, len);
    98a2:	4b29      	ldr	r3, [pc, #164]	; (9948 <ll_adv_data_set+0xd4>)
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
    98a4:	eb05 2505 	add.w	r5, r5, r5, lsl #8
		memcpy(set_data_ptr, data, len);
    98a8:	4632      	mov	r2, r6
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
    98aa:	4405      	add	r5, r0
		memcpy(set_data_ptr, data, len);
    98ac:	4641      	mov	r1, r8
    98ae:	6818      	ldr	r0, [r3, #0]
    98b0:	f7f6 fe78 	bl	5a4 <memcpy>
		aux_pdu->len = aux_ptr_len + len;
    98b4:	4b25      	ldr	r3, [pc, #148]	; (994c <ll_adv_data_set+0xd8>)
    98b6:	781b      	ldrb	r3, [r3, #0]
    98b8:	441e      	add	r6, r3
		radio_adv_data->last = last;
    98ba:	2300      	movs	r3, #0
		aux_pdu->len = aux_ptr_len + len;
    98bc:	706e      	strb	r6, [r5, #1]
		radio_adv_data->last = last;
    98be:	f884 3203 	strb.w	r3, [r4, #515]	; 0x203
		ll_adv.aux_chain_count = 1; 	// fragment count which should come from host
    98c2:	4b23      	ldr	r3, [pc, #140]	; (9950 <ll_adv_data_set+0xdc>)
    98c4:	2201      	movs	r2, #1
    98c6:	715a      	strb	r2, [r3, #5]
    98c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}else{
		if ((prev->type == PDU_ADV_TYPE_DIRECT_IND)) {
    98cc:	2b01      	cmp	r3, #1
    98ce:	d039      	beq.n	9944 <ll_adv_data_set+0xd0>
		
		return;
		}

		/* use the last index in double buffer, */
		if (radio_adv_data->first == radio_adv_data->last) {
    98d0:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
    98d4:	42ab      	cmp	r3, r5
    98d6:	d104      	bne.n	98e2 <ll_adv_data_set+0x6e>
			last = radio_adv_data->last + 1;
    98d8:	3501      	adds	r5, #1
    98da:	b2ed      	uxtb	r5, r5
			if (last == DOUBLE_BUFFER_SIZE) {
				last = 0;
    98dc:	2d02      	cmp	r5, #2
    98de:	bf08      	it	eq
    98e0:	2500      	moveq	r5, #0
		} else {
			last = radio_adv_data->last;
		}

		/* update adv pdu fields. */
		pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    98e2:	eb05 2305 	add.w	r3, r5, r5, lsl #8
    98e6:	18e7      	adds	r7, r4, r3
		pdu->type = prev->type;
    98e8:	5ce0      	ldrb	r0, [r4, r3]
    98ea:	f36e 0003 	bfi	r0, lr, #0, #4
		pdu->rfu = 0;
    98ee:	f36f 1004 	bfc	r0, #4, #1
    98f2:	54e0      	strb	r0, [r4, r3]

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			pdu->chan_sel = prev->chan_sel;
    98f4:	5ca0      	ldrb	r0, [r4, r2]
    98f6:	f814 e003 	ldrb.w	lr, [r4, r3]
    98fa:	f3c0 1040 	ubfx	r0, r0, #5, #1
    98fe:	f360 1e45 	bfi	lr, r0, #5, #1
    9902:	f804 e003 	strb.w	lr, [r4, r3]
		} else {
			pdu->chan_sel = 0;
		}

		pdu->tx_addr = prev->tx_addr;
    9906:	5ca0      	ldrb	r0, [r4, r2]
    9908:	fa5f fe8e 	uxtb.w	lr, lr
    990c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    9910:	f360 1e86 	bfi	lr, r0, #6, #1
    9914:	f804 e003 	strb.w	lr, [r4, r3]
		pdu->rx_addr = prev->rx_addr;
    9918:	5ca2      	ldrb	r2, [r4, r2]
    991a:	fa5f f08e 	uxtb.w	r0, lr
    991e:	09d2      	lsrs	r2, r2, #7
    9920:	f362 10c7 	bfi	r0, r2, #7, #1
    9924:	54e0      	strb	r0, [r4, r3]
		
		
		memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    9926:	2206      	movs	r2, #6
    9928:	3102      	adds	r1, #2
    992a:	1cb8      	adds	r0, r7, #2
    992c:	f7f6 fe3a 	bl	5a4 <memcpy>
		memcpy(&pdu->adv_ind.data[0], data, len);
    9930:	4632      	mov	r2, r6
    9932:	4641      	mov	r1, r8
    9934:	f107 0008 	add.w	r0, r7, #8
		pdu->len = BDADDR_SIZE + len;
    9938:	3606      	adds	r6, #6
		memcpy(&pdu->adv_ind.data[0], data, len);
    993a:	f7f6 fe33 	bl	5a4 <memcpy>
		pdu->len = BDADDR_SIZE + len;
    993e:	707e      	strb	r6, [r7, #1]
		
		/* commit the update so controller picks it. */
		radio_adv_data->last = last;
    9940:	f884 5203 	strb.w	r5, [r4, #515]	; 0x203
    9944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9948:	200019e4 	.word	0x200019e4
    994c:	200019dc 	.word	0x200019dc
    9950:	200019de 	.word	0x200019de

00009954 <ll_ext_adv_data_set>:
#endif


u8_t temp_buffer[270];
void ll_ext_adv_data_set(u8_t len, u8_t const *const data, u8_t operation, u8_t frag_pref)
{
    9954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9958:	4689      	mov	r9, r1
    995a:	4617      	mov	r7, r2
    995c:	4680      	mov	r8, r0
	struct pdu_adv *pdu;
	u8_t last;


	
	radio_adv_data = radio_adv_data_get();
    995e:	f7fe fee3 	bl	8728 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9962:	f890 4203 	ldrb.w	r4, [r0, #515]	; 0x203
    9966:	eb04 2204 	add.w	r2, r4, r4, lsl #8
	radio_adv_data = radio_adv_data_get();
    996a:	4605      	mov	r5, r0
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
    996c:	f810 e002 	ldrb.w	lr, [r0, r2]
    9970:	f00e 030f 	and.w	r3, lr, #15
    9974:	2b07      	cmp	r3, #7
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9976:	eb00 0102 	add.w	r1, r0, r2
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
    997a:	f040 80db 	bne.w	9b34 <ll_ext_adv_data_set+0x1e0>
		struct pdu_adv *aux_pdu;
		struct pdu_adv *copy_pdu;
		u8_t last;
		u8_t length;

		radio_aux_adv_data = radio_aux_adv_data_get();					//testing
    997e:	f7fe fed7 	bl	8730 <radio_aux_adv_data_get>
    9982:	4604      	mov	r4, r0
		radio_chain_adv_data = radio_chain_adv_data_get();
    9984:	f7fe fed8 	bl	8738 <radio_chain_adv_data_get>
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
    9988:	f894 3203 	ldrb.w	r3, [r4, #515]	; 0x203
    998c:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    9990:	441c      	add	r4, r3

		memcpy(set_data_ptr, data, len);
    9992:	4b86      	ldr	r3, [pc, #536]	; (9bac <ll_ext_adv_data_set+0x258>)
    9994:	4649      	mov	r1, r9
    9996:	4642      	mov	r2, r8
		radio_chain_adv_data = radio_chain_adv_data_get();
    9998:	4606      	mov	r6, r0
		memcpy(set_data_ptr, data, len);
    999a:	6818      	ldr	r0, [r3, #0]
    999c:	f7f6 fe02 	bl	5a4 <memcpy>
		length = len;
		aux_pdu->len = aux_ptr_len + len;
    99a0:	4b83      	ldr	r3, [pc, #524]	; (9bb0 <ll_ext_adv_data_set+0x25c>)
    99a2:	781a      	ldrb	r2, [r3, #0]
    99a4:	4442      	add	r2, r8
		radio_adv_data->last = last;
    99a6:	2300      	movs	r3, #0
		aux_pdu->len = aux_ptr_len + len;
    99a8:	b2d2      	uxtb	r2, r2
    99aa:	7062      	strb	r2, [r4, #1]
		radio_adv_data->last = last;
    99ac:	f885 3203 	strb.w	r3, [r5, #515]	; 0x203
			memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); // 2 is for the header of the PDU
			pointer_offset = 257;
			ll_adv.aux_chain_count = 1;
		}
*/		
		if(aux_h->adv_addr){
    99b0:	78e3      	ldrb	r3, [r4, #3]
    99b2:	07d9      	lsls	r1, r3, #31
			aux_ptr += BDADDR_SIZE;
    99b4:	bf4c      	ite	mi
    99b6:	f104 000a 	addmi.w	r0, r4, #10
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
    99ba:	1d20      	addpl	r0, r4, #4
		}
		if(aux_h->tgt_addr){
    99bc:	079d      	lsls	r5, r3, #30
			aux_ptr += BDADDR_SIZE;
    99be:	bf48      	it	mi
    99c0:	3006      	addmi	r0, #6
		}
		if(aux_h->adi){
    99c2:	0719      	lsls	r1, r3, #28
    99c4:	d509      	bpl.n	99da <ll_ext_adv_data_set+0x86>
			aux_adi_ptr = aux_ptr;
			aux_adi_ptr->did = 0x00;
    99c6:	2100      	movs	r1, #0
    99c8:	7001      	strb	r1, [r0, #0]
    99ca:	7841      	ldrb	r1, [r0, #1]
			aux_adi_ptr->sid = 0x04;//sid & 0x0f;
    99cc:	2504      	movs	r5, #4
    99ce:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    99d2:	f365 1107 	bfi	r1, r5, #4, #4
    99d6:	7041      	strb	r1, [r0, #1]
			aux_ptr += sizeof(*aux_adi_ptr);
    99d8:	3002      	adds	r0, #2
		}

		switch (operation){
    99da:	2f03      	cmp	r7, #3
    99dc:	f200 80e3 	bhi.w	9ba6 <ll_ext_adv_data_set+0x252>
    99e0:	e8df f007 	tbb	[pc, r7]
    99e4:	805d022e 	.word	0x805d022e
			case 1:  //First fragment 
					
				if(!aux_h->aux_ptr){
    99e8:	f013 0310 	ands.w	r3, r3, #16
    99ec:	d11a      	bne.n	9a24 <ll_ext_adv_data_set+0xd0>
					aux_ap = aux_ptr;
					aux_ap->chan_idx = 0x03;
    99ee:	7801      	ldrb	r1, [r0, #0]
					aux_ap->ca = 0;	
					aux_ap->offs_units = 0;
					aux_ap->offs = 00;
    99f0:	7043      	strb	r3, [r0, #1]
					aux_ap->chan_idx = 0x03;
    99f2:	2503      	movs	r5, #3
    99f4:	f365 0105 	bfi	r1, r5, #0, #6
					aux_ap->offs_units = 0;
    99f8:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
    99fc:	f363 11c7 	bfi	r1, r3, #7, #1
    9a00:	7001      	strb	r1, [r0, #0]
					aux_ap->offs = 00;
    9a02:	7881      	ldrb	r1, [r0, #2]
					aux_ap->phy = 0;
    9a04:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
    9a08:	f363 1147 	bfi	r1, r3, #5, #3

					aux_h->aux_ptr = 1;
    9a0c:	78e3      	ldrb	r3, [r4, #3]
					aux_ap->phy = 0;
    9a0e:	7081      	strb	r1, [r0, #2]
					aux_h->aux_ptr = 1;
    9a10:	f043 0310 	orr.w	r3, r3, #16
    9a14:	70e3      	strb	r3, [r4, #3]
					aux_p->ext_hdr_len = aux_p->ext_hdr_len + 3;
    9a16:	78a3      	ldrb	r3, [r4, #2]
    9a18:	f3c3 0105 	ubfx	r1, r3, #0, #6
    9a1c:	4429      	add	r1, r5
    9a1e:	f361 0305 	bfi	r3, r1, #0, #6
    9a22:	70a3      	strb	r3, [r4, #2]
				//	memset(aux_ptr, 0 , 3);
				}

				copy_pdu =  (struct pdu_adv *)&radio_chain_adv_data->data[0];
				memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); // 2 is for the header of the PDU
    9a24:	3202      	adds	r2, #2
    9a26:	4621      	mov	r1, r4
    9a28:	4630      	mov	r0, r6
					memcpy(aux_ptr , (aux_ptr+3) ,length_d);
					aux_pdu->len = aux_pdu->len - 3;
				}

				memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); // 2 is for the header of the PDU
				memcpy(temp_buffer, aux_pdu, aux_pdu->len + 2);
    9a2a:	f7f6 fdbb 	bl	5a4 <memcpy>
				pointer_offset = 257;
    9a2e:	4b61      	ldr	r3, [pc, #388]	; (9bb4 <ll_ext_adv_data_set+0x260>)
    9a30:	f240 1201 	movw	r2, #257	; 0x101
    9a34:	801a      	strh	r2, [r3, #0]
				ll_adv.aux_chain_count = 1;
    9a36:	4b60      	ldr	r3, [pc, #384]	; (9bb8 <ll_ext_adv_data_set+0x264>)
    9a38:	2201      	movs	r2, #1
    9a3a:	715a      	strb	r2, [r3, #5]
				break;
    9a3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if(!aux_h->aux_ptr){
    9a40:	f013 0310 	ands.w	r3, r3, #16
    9a44:	d11a      	bne.n	9a7c <ll_ext_adv_data_set+0x128>
					aux_ap->chan_idx = 0x03;
    9a46:	7801      	ldrb	r1, [r0, #0]
					aux_ap->offs = 00;
    9a48:	7043      	strb	r3, [r0, #1]
					aux_ap->chan_idx = 0x03;
    9a4a:	2503      	movs	r5, #3
    9a4c:	f365 0105 	bfi	r1, r5, #0, #6
					aux_ap->offs_units = 0;
    9a50:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
    9a54:	f363 11c7 	bfi	r1, r3, #7, #1
    9a58:	7001      	strb	r1, [r0, #0]
					aux_ap->offs = 00;
    9a5a:	7881      	ldrb	r1, [r0, #2]
					aux_ap->phy = 0;
    9a5c:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
    9a60:	f363 1147 	bfi	r1, r3, #5, #3
					aux_h->aux_ptr = 1;
    9a64:	78e3      	ldrb	r3, [r4, #3]
					aux_ap->phy = 0;
    9a66:	7081      	strb	r1, [r0, #2]
					aux_h->aux_ptr = 1;
    9a68:	f043 0310 	orr.w	r3, r3, #16
    9a6c:	70e3      	strb	r3, [r4, #3]
					aux_p->ext_hdr_len = aux_p->ext_hdr_len + 3;
    9a6e:	78a3      	ldrb	r3, [r4, #2]
    9a70:	f3c3 0105 	ubfx	r1, r3, #0, #6
    9a74:	4429      	add	r1, r5
    9a76:	f361 0305 	bfi	r3, r1, #0, #6
    9a7a:	70a3      	strb	r3, [r4, #2]
				copy_pdu =  (struct pdu_adv *)&radio_chain_adv_data->data[pointer_offset];
    9a7c:	4d4d      	ldr	r5, [pc, #308]	; (9bb4 <ll_ext_adv_data_set+0x260>)
    9a7e:	8828      	ldrh	r0, [r5, #0]
				memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); 
    9a80:	3202      	adds	r2, #2
    9a82:	4621      	mov	r1, r4
    9a84:	4430      	add	r0, r6
    9a86:	f7f6 fd8d 	bl	5a4 <memcpy>
				pointer_offset += 257;
    9a8a:	882b      	ldrh	r3, [r5, #0]
    9a8c:	f203 1301 	addw	r3, r3, #257	; 0x101
				ll_adv.aux_chain_count++;
    9a90:	4a49      	ldr	r2, [pc, #292]	; (9bb8 <ll_ext_adv_data_set+0x264>)
				pointer_offset = 257;
    9a92:	802b      	strh	r3, [r5, #0]
				ll_adv.aux_chain_count++;
    9a94:	7953      	ldrb	r3, [r2, #5]
    9a96:	3301      	adds	r3, #1
    9a98:	7153      	strb	r3, [r2, #5]
				break;
    9a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				copy_pdu =  (struct pdu_adv *)&radio_chain_adv_data->data[pointer_offset];
    9a9e:	4d45      	ldr	r5, [pc, #276]	; (9bb4 <ll_ext_adv_data_set+0x260>)
    9aa0:	8829      	ldrh	r1, [r5, #0]
				if(aux_h->aux_ptr){
    9aa2:	06db      	lsls	r3, r3, #27
				copy_pdu =  (struct pdu_adv *)&radio_chain_adv_data->data[pointer_offset];
    9aa4:	440e      	add	r6, r1
				if(aux_h->aux_ptr){
    9aa6:	d514      	bpl.n	9ad2 <ll_ext_adv_data_set+0x17e>
					int length_d = (aux_pdu->len - aux_p->ext_hdr_len);
    9aa8:	78a3      	ldrb	r3, [r4, #2]
    9aaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
					memcpy(aux_ptr , (aux_ptr+3) ,length_d);
    9aae:	1ad2      	subs	r2, r2, r3
    9ab0:	1cc1      	adds	r1, r0, #3
    9ab2:	f7f6 fd77 	bl	5a4 <memcpy>
					aux_h->aux_ptr = 0;
    9ab6:	78e3      	ldrb	r3, [r4, #3]
    9ab8:	f36f 1304 	bfc	r3, #4, #1
    9abc:	70e3      	strb	r3, [r4, #3]
					aux_p->ext_hdr_len = aux_p->ext_hdr_len - 3;
    9abe:	78a3      	ldrb	r3, [r4, #2]
    9ac0:	f3c3 0205 	ubfx	r2, r3, #0, #6
    9ac4:	3a03      	subs	r2, #3
    9ac6:	f362 0305 	bfi	r3, r2, #0, #6
    9aca:	70a3      	strb	r3, [r4, #2]
					aux_pdu->len = aux_pdu->len - 3;
    9acc:	7863      	ldrb	r3, [r4, #1]
    9ace:	3b03      	subs	r3, #3
    9ad0:	7063      	strb	r3, [r4, #1]
				memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); 
    9ad2:	7862      	ldrb	r2, [r4, #1]
    9ad4:	4621      	mov	r1, r4
    9ad6:	3202      	adds	r2, #2
    9ad8:	4630      	mov	r0, r6
    9ada:	f7f6 fd63 	bl	5a4 <memcpy>
				pointer_offset = 257;
    9ade:	f240 1301 	movw	r3, #257	; 0x101
    9ae2:	e7d5      	b.n	9a90 <ll_ext_adv_data_set+0x13c>
				if(aux_h->aux_ptr){
    9ae4:	f013 0f10 	tst.w	r3, #16
    9ae8:	78a3      	ldrb	r3, [r4, #2]
					int length_d = (aux_pdu->len - aux_p->ext_hdr_len);
    9aea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9aee:	f100 0103 	add.w	r1, r0, #3
					memcpy(aux_ptr , (aux_ptr+3) ,length_d);
    9af2:	eba2 0203 	sub.w	r2, r2, r3
				if(aux_h->aux_ptr){
    9af6:	d01a      	beq.n	9b2e <ll_ext_adv_data_set+0x1da>
					memcpy(aux_ptr , (aux_ptr+3) ,length_d);
    9af8:	f7f6 fd54 	bl	5a4 <memcpy>
					aux_h->aux_ptr = 0;
    9afc:	78e3      	ldrb	r3, [r4, #3]
    9afe:	f36f 1304 	bfc	r3, #4, #1
    9b02:	70e3      	strb	r3, [r4, #3]
					aux_p->ext_hdr_len = aux_p->ext_hdr_len - 3;
    9b04:	78a3      	ldrb	r3, [r4, #2]
    9b06:	f3c3 0205 	ubfx	r2, r3, #0, #6
    9b0a:	3a03      	subs	r2, #3
    9b0c:	f362 0305 	bfi	r3, r2, #0, #6
    9b10:	70a3      	strb	r3, [r4, #2]
					aux_pdu->len = aux_pdu->len - 3;
    9b12:	7863      	ldrb	r3, [r4, #1]
    9b14:	3b03      	subs	r3, #3
    9b16:	7063      	strb	r3, [r4, #1]
				memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); // 2 is for the header of the PDU
    9b18:	7862      	ldrb	r2, [r4, #1]
    9b1a:	4621      	mov	r1, r4
    9b1c:	3202      	adds	r2, #2
    9b1e:	4630      	mov	r0, r6
    9b20:	f7f6 fd40 	bl	5a4 <memcpy>
				memcpy(temp_buffer, aux_pdu, aux_pdu->len + 2);
    9b24:	7862      	ldrb	r2, [r4, #1]
    9b26:	4825      	ldr	r0, [pc, #148]	; (9bbc <ll_ext_adv_data_set+0x268>)
    9b28:	3202      	adds	r2, #2
    9b2a:	4621      	mov	r1, r4
    9b2c:	e77d      	b.n	9a2a <ll_ext_adv_data_set+0xd6>
					memcpy(aux_ptr , (aux_ptr+3) ,length_d);
    9b2e:	f7f6 fd39 	bl	5a4 <memcpy>
    9b32:	e7ee      	b.n	9b12 <ll_ext_adv_data_set+0x1be>
		}

	}else{
		if ((prev->type == PDU_ADV_TYPE_DIRECT_IND)) {
    9b34:	2b01      	cmp	r3, #1
    9b36:	d036      	beq.n	9ba6 <ll_ext_adv_data_set+0x252>
		
		return;
		}

		/* use the last index in double buffer, */
		if (radio_adv_data->first == radio_adv_data->last) {
    9b38:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
    9b3c:	42a3      	cmp	r3, r4
    9b3e:	d104      	bne.n	9b4a <ll_ext_adv_data_set+0x1f6>
			last = radio_adv_data->last + 1;
    9b40:	3401      	adds	r4, #1
    9b42:	b2e4      	uxtb	r4, r4
			if (last == DOUBLE_BUFFER_SIZE) {
				last = 0;
    9b44:	2c02      	cmp	r4, #2
    9b46:	bf08      	it	eq
    9b48:	2400      	moveq	r4, #0
		} else {
			last = radio_adv_data->last;
		}

		/* update adv pdu fields. */
		pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    9b4a:	eb04 2304 	add.w	r3, r4, r4, lsl #8
    9b4e:	18ee      	adds	r6, r5, r3
		pdu->type = prev->type;
    9b50:	5ce8      	ldrb	r0, [r5, r3]
    9b52:	f36e 0003 	bfi	r0, lr, #0, #4
		pdu->rfu = 0;
    9b56:	f36f 1004 	bfc	r0, #4, #1
    9b5a:	54e8      	strb	r0, [r5, r3]

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			pdu->chan_sel = prev->chan_sel;
    9b5c:	5ca8      	ldrb	r0, [r5, r2]
    9b5e:	5cef      	ldrb	r7, [r5, r3]
    9b60:	f3c0 1040 	ubfx	r0, r0, #5, #1
    9b64:	f360 1745 	bfi	r7, r0, #5, #1
    9b68:	54ef      	strb	r7, [r5, r3]
		} else {
			pdu->chan_sel = 0;
		}

		pdu->tx_addr = prev->tx_addr;
    9b6a:	5ca8      	ldrb	r0, [r5, r2]
    9b6c:	b2ff      	uxtb	r7, r7
    9b6e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    9b72:	f360 1786 	bfi	r7, r0, #6, #1
    9b76:	54ef      	strb	r7, [r5, r3]
		pdu->rx_addr = prev->rx_addr;
    9b78:	5caa      	ldrb	r2, [r5, r2]
    9b7a:	b2f8      	uxtb	r0, r7
    9b7c:	09d2      	lsrs	r2, r2, #7
    9b7e:	f362 10c7 	bfi	r0, r2, #7, #1
    9b82:	54e8      	strb	r0, [r5, r3]
		
		
		memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    9b84:	2206      	movs	r2, #6
    9b86:	3102      	adds	r1, #2
    9b88:	1cb0      	adds	r0, r6, #2
    9b8a:	f7f6 fd0b 	bl	5a4 <memcpy>
		memcpy(&pdu->adv_ind.data[0], data, len);
    9b8e:	4642      	mov	r2, r8
    9b90:	4649      	mov	r1, r9
    9b92:	f106 0008 	add.w	r0, r6, #8
		pdu->len = BDADDR_SIZE + len;
    9b96:	f108 0806 	add.w	r8, r8, #6
		memcpy(&pdu->adv_ind.data[0], data, len);
    9b9a:	f7f6 fd03 	bl	5a4 <memcpy>
		pdu->len = BDADDR_SIZE + len;
    9b9e:	f886 8001 	strb.w	r8, [r6, #1]
		
		/* commit the update so controller picks it. */
		radio_adv_data->last = last;
    9ba2:	f885 4203 	strb.w	r4, [r5, #515]	; 0x203
    9ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9baa:	bf00      	nop
    9bac:	200019e4 	.word	0x200019e4
    9bb0:	200019dc 	.word	0x200019dc
    9bb4:	20004ff0 	.word	0x20004ff0
    9bb8:	200019de 	.word	0x200019de
    9bbc:	2000332d 	.word	0x2000332d

00009bc0 <ll_scan_data_set>:
}



void ll_scan_data_set(u8_t len, u8_t const *const data)
{
    9bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9bc4:	4606      	mov	r6, r0
    9bc6:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
    9bc8:	f7fe fdba 	bl	8740 <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
    9bcc:	f890 3203 	ldrb.w	r3, [r0, #515]	; 0x203
    9bd0:	f890 2202 	ldrb.w	r2, [r0, #514]	; 0x202
    9bd4:	429a      	cmp	r2, r3
	radio_scan_data = radio_scan_data_get();
    9bd6:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
    9bd8:	d131      	bne.n	9c3e <ll_scan_data_set+0x7e>
		last = radio_scan_data->last + 1;
    9bda:	1c5d      	adds	r5, r3, #1
    9bdc:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
    9bde:	2d02      	cmp	r5, #2
			last = 0;
    9be0:	bf08      	it	eq
    9be2:	2500      	moveq	r5, #0
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    9be4:	eb05 2205 	add.w	r2, r5, r5, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    9be8:	f04f 0e04 	mov.w	lr, #4
    9bec:	5ca0      	ldrb	r0, [r4, r2]
    9bee:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
    9bf2:	f000 00ef 	and.w	r0, r0, #239	; 0xef
    9bf6:	f36f 1045 	bfc	r0, #5, #1
    9bfa:	54a0      	strb	r0, [r4, r2]
	prev = (struct pdu_adv *)
    9bfc:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    9c00:	18e1      	adds	r1, r4, r3
	pdu->tx_addr = prev->tx_addr;
    9c02:	5ce0      	ldrb	r0, [r4, r3]
    9c04:	5ca3      	ldrb	r3, [r4, r2]
    9c06:	f3c0 1080 	ubfx	r0, r0, #6, #1
    9c0a:	f360 1386 	bfi	r3, r0, #6, #1
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    9c0e:	eb04 0802 	add.w	r8, r4, r2
	pdu->rx_addr = 0;
    9c12:	f36f 13c7 	bfc	r3, #7, #1
    9c16:	54a3      	strb	r3, [r4, r2]
	pdu->len = BDADDR_SIZE + len;
    9c18:	1db3      	adds	r3, r6, #6
    9c1a:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    9c1e:	2206      	movs	r2, #6
    9c20:	3102      	adds	r1, #2
    9c22:	f108 0002 	add.w	r0, r8, #2
    9c26:	f7f6 fcbd 	bl	5a4 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    9c2a:	4632      	mov	r2, r6
    9c2c:	4639      	mov	r1, r7
    9c2e:	f108 0008 	add.w	r0, r8, #8
    9c32:	f7f6 fcb7 	bl	5a4 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
    9c36:	f884 5203 	strb.w	r5, [r4, #515]	; 0x203
    9c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9c3e:	461d      	mov	r5, r3
    9c40:	e7d0      	b.n	9be4 <ll_scan_data_set+0x24>
	...

00009c44 <ll_adv_enable>:
}


u32_t ll_adv_enable(u8_t enable)
{
    9c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
    9c48:	b918      	cbnz	r0, 9c52 <ll_adv_enable+0xe>
	}
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);

	return status;
}
    9c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return radio_adv_disable();
    9c4e:	f7ff ba5b 	b.w	9108 <radio_adv_disable>
	} else if (ll_adv_is_enabled()) {
    9c52:	f7fe fd79 	bl	8748 <ll_adv_is_enabled>
    9c56:	4607      	mov	r7, r0
    9c58:	bb90      	cbnz	r0, 9cc0 <ll_adv_enable+0x7c>
	radio_adv_data = radio_adv_data_get();
    9c5a:	f7fe fd65 	bl	8728 <radio_adv_data_get>
    9c5e:	4606      	mov	r6, r0
	radio_scan_data = radio_scan_data_get();
    9c60:	f7fe fd6e 	bl	8740 <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    9c64:	f896 4203 	ldrb.w	r4, [r6, #515]	; 0x203
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    9c68:	f890 5203 	ldrb.w	r5, [r0, #515]	; 0x203
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    9c6c:	eb04 2404 	add.w	r4, r4, r4, lsl #8
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    9c70:	eb05 2505 	add.w	r5, r5, r5, lsl #8
    9c74:	4405      	add	r5, r0
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    9c76:	5d30      	ldrb	r0, [r6, r4]
    9c78:	4639      	mov	r1, r7
    9c7a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    9c7e:	f7f9 feff 	bl	3a80 <ll_addr_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    9c82:	eb06 0804 	add.w	r8, r6, r4
			memcpy(&pdu_adv->adv_ind.addr[0],
    9c86:	2206      	movs	r2, #6
    9c88:	4601      	mov	r1, r0
    9c8a:	f108 0002 	add.w	r0, r8, #2
    9c8e:	f7f6 fc89 	bl	5a4 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    9c92:	5d30      	ldrb	r0, [r6, r4]
    9c94:	4639      	mov	r1, r7
    9c96:	f3c0 1080 	ubfx	r0, r0, #6, #1
    9c9a:	f7f9 fef1 	bl	3a80 <ll_addr_get>
			memcpy(&pdu_scan->scan_rsp.addr[0],
    9c9e:	2206      	movs	r2, #6
    9ca0:	4601      	mov	r1, r0
    9ca2:	1ca8      	adds	r0, r5, #2
    9ca4:	f7f6 fc7e 	bl	5a4 <memcpy>
				  ll_adv.filter_policy, rl_idx);
    9ca8:	4807      	ldr	r0, [pc, #28]	; (9cc8 <ll_adv_enable+0x84>)
    9caa:	7801      	ldrb	r1, [r0, #0]
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
    9cac:	8840      	ldrh	r0, [r0, #2]
    9cae:	f3c1 02c1 	ubfx	r2, r1, #3, #2
    9cb2:	23ff      	movs	r3, #255	; 0xff
    9cb4:	f001 0107 	and.w	r1, r1, #7
}
    9cb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
    9cbc:	f7fe be50 	b.w	8960 <radio_adv_enable>
}
    9cc0:	2000      	movs	r0, #0
    9cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9cc6:	bf00      	nop
    9cc8:	200019de 	.word	0x200019de

00009ccc <ll_ext_adv_enable>:



u32_t ll_ext_adv_enable(u8_t enable)
{
    9ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9cd0:	b085      	sub	sp, #20
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
//	struct pdu_adv *aux_pdu_adv;
	u32_t status;

	if (!enable) {
    9cd2:	b920      	cbnz	r0, 9cde <ll_ext_adv_enable+0x12>
	status = radio_ext_adv_enable(ll_adv.phy_p, ll_adv.interval,
				  ll_adv.chan_map, ll_adv.filter_policy,
				  rl_idx, ll_adv.max_skip, ll_adv.aux_chain_count);

	return status;
}
    9cd4:	b005      	add	sp, #20
    9cd6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return radio_adv_disable();
    9cda:	f7ff ba15 	b.w	9108 <radio_adv_disable>
	} else if (ll_adv_is_enabled()) {
    9cde:	f7fe fd33 	bl	8748 <ll_adv_is_enabled>
    9ce2:	4607      	mov	r7, r0
    9ce4:	2800      	cmp	r0, #0
    9ce6:	d14e      	bne.n	9d86 <ll_ext_adv_enable+0xba>
	radio_adv_data = radio_adv_data_get();
    9ce8:	f7fe fd1e 	bl	8728 <radio_adv_data_get>
    9cec:	4680      	mov	r8, r0
	radio_scan_data = radio_scan_data_get();
    9cee:	f7fe fd27 	bl	8740 <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    9cf2:	f898 4203 	ldrb.w	r4, [r8, #515]	; 0x203
    9cf6:	eb04 2404 	add.w	r4, r4, r4, lsl #8
	radio_scan_data = radio_scan_data_get();
    9cfa:	4605      	mov	r5, r0
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    9cfc:	f818 0004 	ldrb.w	r0, [r8, r4]
    9d00:	f000 030f 	and.w	r3, r0, #15
    9d04:	2b07      	cmp	r3, #7
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    9d06:	eb08 0904 	add.w	r9, r8, r4
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    9d0a:	d121      	bne.n	9d50 <ll_ext_adv_enable+0x84>
		if (h->adv_addr) {
    9d0c:	f899 3003 	ldrb.w	r3, [r9, #3]
    9d10:	07db      	lsls	r3, r3, #31
    9d12:	d50a      	bpl.n	9d2a <ll_ext_adv_enable+0x5e>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
    9d14:	4639      	mov	r1, r7
    9d16:	f3c0 1080 	ubfx	r0, r0, #6, #1
    9d1a:	f7f9 feb1 	bl	3a80 <ll_addr_get>
    9d1e:	2206      	movs	r2, #6
    9d20:	4601      	mov	r1, r0
    9d22:	f109 0004 	add.w	r0, r9, #4
			memcpy(&pdu_scan->scan_rsp.addr[0],
    9d26:	f7f6 fc3d 	bl	5a4 <memcpy>
				  ll_adv.chan_map, ll_adv.filter_policy,
    9d2a:	4b18      	ldr	r3, [pc, #96]	; (9d8c <ll_ext_adv_enable+0xc0>)
	status = radio_ext_adv_enable(ll_adv.phy_p, ll_adv.interval,
    9d2c:	795a      	ldrb	r2, [r3, #5]
				  ll_adv.chan_map, ll_adv.filter_policy,
    9d2e:	7818      	ldrb	r0, [r3, #0]
	status = radio_ext_adv_enable(ll_adv.phy_p, ll_adv.interval,
    9d30:	8859      	ldrh	r1, [r3, #2]
    9d32:	9202      	str	r2, [sp, #8]
    9d34:	791b      	ldrb	r3, [r3, #4]
    9d36:	9301      	str	r3, [sp, #4]
    9d38:	23ff      	movs	r3, #255	; 0xff
    9d3a:	9300      	str	r3, [sp, #0]
    9d3c:	f000 0207 	and.w	r2, r0, #7
    9d40:	f3c0 03c1 	ubfx	r3, r0, #3, #2
    9d44:	0940      	lsrs	r0, r0, #5
    9d46:	f7fe ff87 	bl	8c58 <radio_ext_adv_enable>
}
    9d4a:	b005      	add	sp, #20
    9d4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    9d50:	4639      	mov	r1, r7
    9d52:	f3c0 1080 	ubfx	r0, r0, #6, #1
			[radio_scan_data->last][0];
    9d56:	f895 6203 	ldrb.w	r6, [r5, #515]	; 0x203
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    9d5a:	f7f9 fe91 	bl	3a80 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
    9d5e:	2206      	movs	r2, #6
    9d60:	4601      	mov	r1, r0
    9d62:	f109 0002 	add.w	r0, r9, #2
    9d66:	f7f6 fc1d 	bl	5a4 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    9d6a:	f818 0004 	ldrb.w	r0, [r8, r4]
    9d6e:	4639      	mov	r1, r7
    9d70:	f3c0 1080 	ubfx	r0, r0, #6, #1
    9d74:	f7f9 fe84 	bl	3a80 <ll_addr_get>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    9d78:	eb06 2606 	add.w	r6, r6, r6, lsl #8
    9d7c:	4435      	add	r5, r6
			memcpy(&pdu_scan->scan_rsp.addr[0],
    9d7e:	4601      	mov	r1, r0
    9d80:	2206      	movs	r2, #6
    9d82:	1ca8      	adds	r0, r5, #2
    9d84:	e7cf      	b.n	9d26 <ll_ext_adv_enable+0x5a>
		return 0;
    9d86:	2000      	movs	r0, #0
    9d88:	e7df      	b.n	9d4a <ll_ext_adv_enable+0x7e>
    9d8a:	bf00      	nop
    9d8c:	200019de 	.word	0x200019de

00009d90 <ctrl_filter_get>:
	if (whitelist) {
		return &wl_filter;
	}
	return &rl_filter;
#else
	LL_ASSERT(whitelist);
    9d90:	b928      	cbnz	r0, 9d9e <ctrl_filter_get+0xe>
    9d92:	4040      	eors	r0, r0
    9d94:	f380 8811 	msr	BASEPRI, r0
    9d98:	f04f 0004 	mov.w	r0, #4
    9d9c:	df02      	svc	2
	return &wl_filter;
#endif
}
    9d9e:	4801      	ldr	r0, [pc, #4]	; (9da4 <ctrl_filter_get+0x14>)
    9da0:	4770      	bx	lr
    9da2:	bf00      	nop
    9da4:	200019e8 	.word	0x200019e8

00009da8 <ll_wl_size_get>:

u32_t ll_wl_size_get(void)
{
	return WL_SIZE;
}
    9da8:	2008      	movs	r0, #8
    9daa:	4770      	bx	lr

00009dac <ll_wl_clear>:

u32_t ll_wl_clear(void)
{
    9dac:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    9dae:	f7fe fcd3 	bl	8758 <radio_adv_filter_pol_get>
    9db2:	4604      	mov	r4, r0
    9db4:	b110      	cbz	r0, 9dbc <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    9db6:	240c      	movs	r4, #12
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */
	wl_anon = 0;

	return 0;
}
    9db8:	4620      	mov	r0, r4
    9dba:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    9dbc:	f7fe fcf0 	bl	87a0 <radio_scan_filter_pol_get>
    9dc0:	07c3      	lsls	r3, r0, #31
    9dc2:	d4f8      	bmi.n	9db6 <ll_wl_clear+0xa>
	filter->enable_bitmask = 0;
    9dc4:	4b02      	ldr	r3, [pc, #8]	; (9dd0 <ll_wl_clear+0x24>)
    9dc6:	701c      	strb	r4, [r3, #0]
	filter->addr_type_bitmask = 0;
    9dc8:	705c      	strb	r4, [r3, #1]
	wl_anon = 0;
    9dca:	4b02      	ldr	r3, [pc, #8]	; (9dd4 <ll_wl_clear+0x28>)
    9dcc:	701c      	strb	r4, [r3, #0]
	return 0;
    9dce:	e7f3      	b.n	9db8 <ll_wl_clear+0xc>
    9dd0:	200019e8 	.word	0x200019e8
    9dd4:	2000343b 	.word	0x2000343b

00009dd8 <ll_wl_add>:

u32_t ll_wl_add(bt_addr_le_t *addr)
{
    9dd8:	b570      	push	{r4, r5, r6, lr}
    9dda:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    9ddc:	f7fe fcbc 	bl	8758 <radio_adv_filter_pol_get>
    9de0:	4605      	mov	r5, r0
    9de2:	b110      	cbz	r0, 9dea <ll_wl_add+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
    9de4:	250c      	movs	r5, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_add(addr);
#else
	return filter_add(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    9de6:	4628      	mov	r0, r5
    9de8:	bd70      	pop	{r4, r5, r6, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    9dea:	f7fe fcd9 	bl	87a0 <radio_scan_filter_pol_get>
    9dee:	07c3      	lsls	r3, r0, #31
    9df0:	d4f8      	bmi.n	9de4 <ll_wl_add+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    9df2:	7823      	ldrb	r3, [r4, #0]
    9df4:	2bff      	cmp	r3, #255	; 0xff
    9df6:	d103      	bne.n	9e00 <ll_wl_add+0x28>
		wl_anon = 1;
    9df8:	4b11      	ldr	r3, [pc, #68]	; (9e40 <ll_wl_add+0x68>)
    9dfa:	2201      	movs	r2, #1
    9dfc:	701a      	strb	r2, [r3, #0]
		return 0;
    9dfe:	e7f2      	b.n	9de6 <ll_wl_add+0xe>
	if (filter->enable_bitmask == 0xFF) {
    9e00:	4910      	ldr	r1, [pc, #64]	; (9e44 <ll_wl_add+0x6c>)
    9e02:	780a      	ldrb	r2, [r1, #0]
    9e04:	2aff      	cmp	r2, #255	; 0xff
    9e06:	d018      	beq.n	9e3a <ll_wl_add+0x62>
    9e08:	4628      	mov	r0, r5
	     (filter->enable_bitmask & BIT(index));
    9e0a:	fa22 f600 	lsr.w	r6, r2, r0
	for (index = 0;
    9e0e:	07f6      	lsls	r6, r6, #31
    9e10:	d411      	bmi.n	9e36 <ll_wl_add+0x5e>
	filter->enable_bitmask |= BIT(index);
    9e12:	2601      	movs	r6, #1
    9e14:	4086      	lsls	r6, r0
    9e16:	4332      	orrs	r2, r6
    9e18:	700a      	strb	r2, [r1, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    9e1a:	f003 0301 	and.w	r3, r3, #1
    9e1e:	784a      	ldrb	r2, [r1, #1]
    9e20:	4083      	lsls	r3, r0
    9e22:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    9e24:	2206      	movs	r2, #6
    9e26:	fb02 1000 	mla	r0, r2, r0, r1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    9e2a:	704b      	strb	r3, [r1, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    9e2c:	3002      	adds	r0, #2
    9e2e:	1c61      	adds	r1, r4, #1
    9e30:	f7f6 fbb8 	bl	5a4 <memcpy>
    9e34:	e7d7      	b.n	9de6 <ll_wl_add+0xe>
	     index++) {
    9e36:	3001      	adds	r0, #1
    9e38:	e7e7      	b.n	9e0a <ll_wl_add+0x32>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    9e3a:	2507      	movs	r5, #7
    9e3c:	e7d3      	b.n	9de6 <ll_wl_add+0xe>
    9e3e:	bf00      	nop
    9e40:	2000343b 	.word	0x2000343b
    9e44:	200019e8 	.word	0x200019e8

00009e48 <ll_wl_remove>:

u32_t ll_wl_remove(bt_addr_le_t *addr)
{
    9e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9e4c:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    9e4e:	f7fe fc83 	bl	8758 <radio_adv_filter_pol_get>
    9e52:	4606      	mov	r6, r0
    9e54:	b118      	cbz	r0, 9e5e <ll_wl_remove+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
    9e56:	260c      	movs	r6, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_remove(addr);
#else
	return filter_remove(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    9e58:	4630      	mov	r0, r6
    9e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    9e5e:	f7fe fc9f 	bl	87a0 <radio_scan_filter_pol_get>
    9e62:	07c1      	lsls	r1, r0, #31
    9e64:	d4f7      	bmi.n	9e56 <ll_wl_remove+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
    9e66:	f897 8000 	ldrb.w	r8, [r7]
    9e6a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    9e6e:	d102      	bne.n	9e76 <ll_wl_remove+0x2e>
		wl_anon = 0;
    9e70:	4b16      	ldr	r3, [pc, #88]	; (9ecc <ll_wl_remove+0x84>)
    9e72:	701e      	strb	r6, [r3, #0]
		return 0;
    9e74:	e7f0      	b.n	9e58 <ll_wl_remove+0x10>
	if (!filter->enable_bitmask) {
    9e76:	4c16      	ldr	r4, [pc, #88]	; (9ed0 <ll_wl_remove+0x88>)
    9e78:	7823      	ldrb	r3, [r4, #0]
    9e7a:	b133      	cbz	r3, 9e8a <ll_wl_remove+0x42>
    9e7c:	2508      	movs	r5, #8
	return filter_remove(&wl_filter, addr->type, addr->a.val);
    9e7e:	3701      	adds	r7, #1
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    9e80:	f04f 0906 	mov.w	r9, #6
	while (index--) {
    9e84:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    9e88:	d201      	bcs.n	9e8e <ll_wl_remove+0x46>
		return BT_HCI_ERR_INVALID_PARAM;
    9e8a:	2612      	movs	r6, #18
    9e8c:	e7e4      	b.n	9e58 <ll_wl_remove+0x10>
		if ((filter->enable_bitmask & BIT(index)) &&
    9e8e:	7823      	ldrb	r3, [r4, #0]
    9e90:	40eb      	lsrs	r3, r5
    9e92:	07da      	lsls	r2, r3, #31
    9e94:	d5f6      	bpl.n	9e84 <ll_wl_remove+0x3c>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
    9e96:	7863      	ldrb	r3, [r4, #1]
    9e98:	412b      	asrs	r3, r5
    9e9a:	ea83 0308 	eor.w	r3, r3, r8
		if ((filter->enable_bitmask & BIT(index)) &&
    9e9e:	07db      	lsls	r3, r3, #31
    9ea0:	d4f0      	bmi.n	9e84 <ll_wl_remove+0x3c>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    9ea2:	fb09 4005 	mla	r0, r9, r5, r4
    9ea6:	2206      	movs	r2, #6
    9ea8:	4639      	mov	r1, r7
    9eaa:	3002      	adds	r0, #2
    9eac:	f7f6 fb65 	bl	57a <memcmp>
		     (addr_type & 0x01)) &&
    9eb0:	2800      	cmp	r0, #0
    9eb2:	d1e7      	bne.n	9e84 <ll_wl_remove+0x3c>
			filter->enable_bitmask &= ~BIT(index);
    9eb4:	2301      	movs	r3, #1
    9eb6:	40ab      	lsls	r3, r5
    9eb8:	7822      	ldrb	r2, [r4, #0]
    9eba:	43db      	mvns	r3, r3
    9ebc:	b2db      	uxtb	r3, r3
    9ebe:	401a      	ands	r2, r3
    9ec0:	7022      	strb	r2, [r4, #0]
			filter->addr_type_bitmask &= ~BIT(index);
    9ec2:	7862      	ldrb	r2, [r4, #1]
    9ec4:	4013      	ands	r3, r2
    9ec6:	7063      	strb	r3, [r4, #1]
    9ec8:	e7c6      	b.n	9e58 <ll_wl_remove+0x10>
    9eca:	bf00      	nop
    9ecc:	2000343b 	.word	0x2000343b
    9ed0:	200019e8 	.word	0x200019e8

00009ed4 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
    9ed4:	4a03      	ldr	r2, [pc, #12]	; (9ee4 <ll_filter_reset+0x10>)
    9ed6:	2300      	movs	r3, #0
    9ed8:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0;
    9eda:	4a03      	ldr	r2, [pc, #12]	; (9ee8 <ll_filter_reset+0x14>)
    9edc:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
    9ede:	7053      	strb	r3, [r2, #1]
    9ee0:	4770      	bx	lr
    9ee2:	bf00      	nop
    9ee4:	2000343b 	.word	0x2000343b
    9ee8:	200019e8 	.word	0x200019e8

00009eec <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    9eec:	4b05      	ldr	r3, [pc, #20]	; (9f04 <cntr_init+0x18>)
    9eee:	2200      	movs	r2, #0
    9ef0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    9ef4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    9ef8:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    9efc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    9f00:	4770      	bx	lr
    9f02:	bf00      	nop
    9f04:	4000b000 	.word	0x4000b000

00009f08 <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
    9f08:	4a04      	ldr	r2, [pc, #16]	; (9f1c <cntr_start+0x14>)
    9f0a:	7813      	ldrb	r3, [r2, #0]
    9f0c:	1c59      	adds	r1, r3, #1
    9f0e:	7011      	strb	r1, [r2, #0]
    9f10:	2001      	movs	r0, #1
    9f12:	b913      	cbnz	r3, 9f1a <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    9f14:	4a02      	ldr	r2, [pc, #8]	; (9f20 <cntr_start+0x18>)
    9f16:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    9f18:	4618      	mov	r0, r3
}
    9f1a:	4770      	bx	lr
    9f1c:	20001a1a 	.word	0x20001a1a
    9f20:	4000b000 	.word	0x4000b000

00009f24 <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    9f24:	4b09      	ldr	r3, [pc, #36]	; (9f4c <cntr_stop+0x28>)
    9f26:	7818      	ldrb	r0, [r3, #0]
    9f28:	b928      	cbnz	r0, 9f36 <cntr_stop+0x12>
    9f2a:	4040      	eors	r0, r0
    9f2c:	f380 8811 	msr	BASEPRI, r0
    9f30:	f04f 0004 	mov.w	r0, #4
    9f34:	df02      	svc	2

	if (--_refcount) {
    9f36:	3801      	subs	r0, #1
    9f38:	b2c0      	uxtb	r0, r0
    9f3a:	7018      	strb	r0, [r3, #0]
    9f3c:	2301      	movs	r3, #1
    9f3e:	b910      	cbnz	r0, 9f46 <cntr_stop+0x22>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    9f40:	4a03      	ldr	r2, [pc, #12]	; (9f50 <cntr_stop+0x2c>)
    9f42:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    9f44:	4770      	bx	lr
		return 1;
    9f46:	4618      	mov	r0, r3
}
    9f48:	4770      	bx	lr
    9f4a:	bf00      	nop
    9f4c:	20001a1a 	.word	0x20001a1a
    9f50:	4000b000 	.word	0x4000b000

00009f54 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    9f54:	4b01      	ldr	r3, [pc, #4]	; (9f5c <cntr_cnt_get+0x8>)
    9f56:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    9f5a:	4770      	bx	lr
    9f5c:	4000b000 	.word	0x4000b000

00009f60 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    9f60:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    9f64:	4b01      	ldr	r3, [pc, #4]	; (9f6c <cntr_cmp_set+0xc>)
    9f66:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    9f6a:	4770      	bx	lr
    9f6c:	4000b000 	.word	0x4000b000

00009f70 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    9f70:	4b11      	ldr	r3, [pc, #68]	; (9fb8 <do_ecb+0x48>)
{
    9f72:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
    9f74:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
    9f76:	2500      	movs	r5, #0
    9f78:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
    9f7a:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    9f7c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    9f80:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    9f84:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    9f88:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    9f8a:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
    9f8e:	b934      	cbnz	r4, 9f9e <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    9f90:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    9f94:	b91c      	cbnz	r4, 9f9e <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    9f96:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    9f9a:	2c00      	cmp	r4, #0
    9f9c:	d1f5      	bne.n	9f8a <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
    9f9e:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    9fa0:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
    9fa4:	2c00      	cmp	r4, #0
    9fa6:	d1e8      	bne.n	9f7a <do_ecb+0xa>
    9fa8:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
    9fac:	2e00      	cmp	r6, #0
    9fae:	d0e4      	beq.n	9f7a <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
    9fb0:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
    9fb4:	bd70      	pop	{r4, r5, r6, pc}
    9fb6:	bf00      	nop
    9fb8:	4000e000 	.word	0x4000e000

00009fbc <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    9fbc:	b570      	push	{r4, r5, r6, lr}
    9fbe:	b08c      	sub	sp, #48	; 0x30
    9fc0:	460e      	mov	r6, r1
    9fc2:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    9fc4:	4601      	mov	r1, r0
    9fc6:	2210      	movs	r2, #16
    9fc8:	4668      	mov	r0, sp
{
    9fca:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    9fcc:	f7f8 fdb8 	bl	2b40 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    9fd0:	2210      	movs	r2, #16
    9fd2:	eb0d 0002 	add.w	r0, sp, r2
    9fd6:	4631      	mov	r1, r6
    9fd8:	f7f8 fdb2 	bl	2b40 <mem_rcopy>

	do_ecb(&ecb);
    9fdc:	4668      	mov	r0, sp
    9fde:	f7ff ffc7 	bl	9f70 <do_ecb>

	if (cipher_text_le) {
    9fe2:	b125      	cbz	r5, 9fee <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    9fe4:	2210      	movs	r2, #16
    9fe6:	a908      	add	r1, sp, #32
    9fe8:	4628      	mov	r0, r5
    9fea:	f7f8 fda9 	bl	2b40 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    9fee:	b124      	cbz	r4, 9ffa <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    9ff0:	2210      	movs	r2, #16
    9ff2:	a908      	add	r1, sp, #32
    9ff4:	4620      	mov	r0, r4
    9ff6:	f7f6 fad5 	bl	5a4 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    9ffa:	b00c      	add	sp, #48	; 0x30
    9ffc:	bd70      	pop	{r4, r5, r6, pc}
	...

0000a000 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
    a000:	4b07      	ldr	r3, [pc, #28]	; (a020 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
    a002:	4a08      	ldr	r2, [pc, #32]	; (a024 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
    a004:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
    a008:	4907      	ldr	r1, [pc, #28]	; (a028 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
    a00a:	4a08      	ldr	r2, [pc, #32]	; (a02c <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
    a00c:	2800      	cmp	r0, #0
    a00e:	bf14      	ite	ne
    a010:	4610      	movne	r0, r2
    a012:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    a014:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
    a016:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    a01a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    a01e:	4770      	bx	lr
    a020:	4001f000 	.word	0x4001f000
    a024:	40008140 	.word	0x40008140
    a028:	40001004 	.word	0x40001004
    a02c:	40001000 	.word	0x40001000

0000a030 <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
    a030:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    a032:	4e2c      	ldr	r6, [pc, #176]	; (a0e4 <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    a034:	4f2c      	ldr	r7, [pc, #176]	; (a0e8 <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    a036:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    a038:	4b2c      	ldr	r3, [pc, #176]	; (a0ec <sw_switch.isra.9+0xbc>)
    a03a:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
    a03e:	b22b      	sxth	r3, r5
    a040:	00dc      	lsls	r4, r3, #3
    a042:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    a046:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
    a04a:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    a04e:	f105 040b 	add.w	r4, r5, #11
    a052:	b2e4      	uxtb	r4, r4
    a054:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
    a056:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
    a05a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    a05e:	3fc0      	subs	r7, #192	; 0xc0
    a060:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    a064:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
    a068:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
    a06c:	2800      	cmp	r0, #0
    a06e:	d034      	beq.n	a0da <sw_switch.isra.9+0xaa>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
    a070:	f24a 075a 	movw	r7, #41050	; 0xa05a
    a074:	f649 4040 	movw	r0, #40000	; 0x9c40
    a078:	2a02      	cmp	r2, #2
    a07a:	bf0c      	ite	eq
    a07c:	4602      	moveq	r2, r0
    a07e:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
    a080:	f242 47b8 	movw	r7, #9400	; 0x24b8
    a084:	f241 504a 	movw	r0, #5450	; 0x154a
    a088:	2902      	cmp	r1, #2
    a08a:	bf18      	it	ne
    a08c:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
    a08e:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
    a092:	4401      	add	r1, r0
    a094:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a098:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    a09c:	4a14      	ldr	r2, [pc, #80]	; (a0f0 <sw_switch.isra.9+0xc0>)
    a09e:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    a0a2:	009b      	lsls	r3, r3, #2
    a0a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a0a8:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
    a0ac:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
    a0b0:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    a0b2:	bf8b      	itete	hi
    a0b4:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
    a0b8:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    a0ba:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
    a0bc:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
    a0c0:	bf88      	it	hi
    a0c2:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
    a0c6:	4b08      	ldr	r3, [pc, #32]	; (a0e8 <sw_switch.isra.9+0xb8>)
    a0c8:	f44f 6290 	mov.w	r2, #1152	; 0x480
    a0cc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
    a0d0:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
    a0d2:	f003 0301 	and.w	r3, r3, #1
    a0d6:	7033      	strb	r3, [r6, #0]
    a0d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    a0da:	4a06      	ldr	r2, [pc, #24]	; (a0f4 <sw_switch.isra.9+0xc4>)
    a0dc:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
    a0e0:	212d      	movs	r1, #45	; 0x2d
    a0e2:	e7de      	b.n	a0a2 <sw_switch.isra.9+0x72>
    a0e4:	20001c38 	.word	0x20001c38
    a0e8:	4001f000 	.word	0x4001f000
    a0ec:	4000110c 	.word	0x4000110c
    a0f0:	40001000 	.word	0x40001000
    a0f4:	40001004 	.word	0x40001004

0000a0f8 <isr_radio>:
	if (sfp_radio_isr) {
    a0f8:	4b02      	ldr	r3, [pc, #8]	; (a104 <isr_radio+0xc>)
    a0fa:	681b      	ldr	r3, [r3, #0]
    a0fc:	b103      	cbz	r3, a100 <isr_radio+0x8>
		sfp_radio_isr();
    a0fe:	4718      	bx	r3
    a100:	4770      	bx	lr
    a102:	bf00      	nop
    a104:	20001c34 	.word	0x20001c34

0000a108 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    a108:	4b06      	ldr	r3, [pc, #24]	; (a124 <radio_isr_set+0x1c>)
    a10a:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
    a10c:	4b06      	ldr	r3, [pc, #24]	; (a128 <radio_isr_set+0x20>)
    a10e:	2210      	movs	r2, #16
    a110:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    a114:	4b05      	ldr	r3, [pc, #20]	; (a12c <radio_isr_set+0x24>)
    a116:	2202      	movs	r2, #2
    a118:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
    a11c:	2001      	movs	r0, #1
    a11e:	f7f6 bead 	b.w	e7c <_arch_irq_enable>
    a122:	bf00      	nop
    a124:	20001c34 	.word	0x20001c34
    a128:	40001000 	.word	0x40001000
    a12c:	e000e100 	.word	0xe000e100

0000a130 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    a130:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    a138:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    a13a:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    a13e:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    a142:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    a146:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    a14a:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    a14e:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    a152:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    a156:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    a15a:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    a15e:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    a162:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    a166:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    a16a:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    a16e:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
    a172:	4770      	bx	lr

0000a174 <radio_reset>:
{
    a174:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    a176:	2001      	movs	r0, #1
    a178:	f7f6 fe90 	bl	e9c <_arch_irq_disable>
	NRF_RADIO->POWER =
    a17c:	4b08      	ldr	r3, [pc, #32]	; (a1a0 <radio_reset+0x2c>)
    a17e:	2200      	movs	r2, #0
    a180:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
    a184:	2201      	movs	r2, #1
    a186:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    a18a:	4a06      	ldr	r2, [pc, #24]	; (a1a4 <radio_reset+0x30>)
    a18c:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
    a18e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    a192:	f023 0301 	bic.w	r3, r3, #1
    a196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    a19a:	6013      	str	r3, [r2, #0]
    a19c:	bd08      	pop	{r3, pc}
    a19e:	bf00      	nop
    a1a0:	40001000 	.word	0x40001000
    a1a4:	40001774 	.word	0x40001774

0000a1a8 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    a1a8:	4b06      	ldr	r3, [pc, #24]	; (a1c4 <radio_phy_set+0x1c>)
	switch (phy) {
    a1aa:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    a1ac:	bf0c      	ite	eq
    a1ae:	2204      	moveq	r2, #4
    a1b0:	2203      	movne	r2, #3
    a1b2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
    a1b6:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
    a1ba:	f042 0201 	orr.w	r2, r2, #1
    a1be:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
    a1c2:	4770      	bx	lr
    a1c4:	40001000 	.word	0x40001000

0000a1c8 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
    a1c8:	4b01      	ldr	r3, [pc, #4]	; (a1d0 <radio_tx_power_set+0x8>)
    a1ca:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    a1ce:	4770      	bx	lr
    a1d0:	40001000 	.word	0x40001000

0000a1d4 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
    a1d4:	4b01      	ldr	r3, [pc, #4]	; (a1dc <radio_freq_chan_set+0x8>)
    a1d6:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    a1da:	4770      	bx	lr
    a1dc:	40001000 	.word	0x40001000

0000a1e0 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
    a1e0:	4b07      	ldr	r3, [pc, #28]	; (a200 <radio_whiten_iv_set+0x20>)
    a1e2:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    a1e6:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    a1ea:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    a1ee:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    a1f2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    a1f6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    a1fa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    a1fe:	4770      	bx	lr
    a200:	40001000 	.word	0x40001000

0000a204 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
    a204:	4a0a      	ldr	r2, [pc, #40]	; (a230 <radio_aa_set+0x2c>)
    a206:	2300      	movs	r3, #0
    a208:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
    a20c:	2301      	movs	r3, #1
    a20e:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
    a212:	78c3      	ldrb	r3, [r0, #3]
    a214:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    a218:	7843      	ldrb	r3, [r0, #1]
    a21a:	7881      	ldrb	r1, [r0, #2]
    a21c:	041b      	lsls	r3, r3, #16
    a21e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    a222:	7801      	ldrb	r1, [r0, #0]
    a224:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    a228:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    a22c:	4770      	bx	lr
    a22e:	bf00      	nop
    a230:	40001000 	.word	0x40001000

0000a234 <radio_pkt_configure>:
	switch (phy) {
    a234:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    a238:	2b02      	cmp	r3, #2
{
    a23a:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    a23c:	bf0c      	ite	eq
    a23e:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
    a242:	2400      	movne	r4, #0
	if (dc) {
    a244:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    a246:	f1c0 0308 	rsb	r3, r0, #8
    a24a:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    a24e:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
    a252:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    a256:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    a25a:	4a0b      	ldr	r2, [pc, #44]	; (a288 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
    a25c:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    a260:	bf48      	it	mi
    a262:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
    a266:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    a268:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    a26c:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    a270:	4b06      	ldr	r3, [pc, #24]	; (a28c <radio_pkt_configure+0x58>)
    a272:	4003      	ands	r3, r0
    a274:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    a278:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    a27c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    a280:	4319      	orrs	r1, r3
    a282:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    a286:	bd10      	pop	{r4, pc}
    a288:	40001000 	.word	0x40001000
    a28c:	fef80000 	.word	0xfef80000

0000a290 <radio_pkt_rx_set>:
    a290:	4b01      	ldr	r3, [pc, #4]	; (a298 <radio_pkt_rx_set+0x8>)
    a292:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    a296:	4770      	bx	lr
    a298:	40001000 	.word	0x40001000

0000a29c <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    a29c:	4b01      	ldr	r3, [pc, #4]	; (a2a4 <radio_pkt_tx_set+0x8>)
    a29e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    a2a2:	4770      	bx	lr
    a2a4:	40001000 	.word	0x40001000

0000a2a8 <radio_tx_ready_delay_get>:
	switch (phy) {
    a2a8:	2802      	cmp	r0, #2
}
    a2aa:	bf0c      	ite	eq
    a2ac:	2028      	moveq	r0, #40	; 0x28
    a2ae:	2029      	movne	r0, #41	; 0x29
    a2b0:	4770      	bx	lr

0000a2b2 <radio_tx_chain_delay_get>:
}
    a2b2:	2001      	movs	r0, #1
    a2b4:	4770      	bx	lr

0000a2b6 <radio_rx_ready_delay_get>:
}
    a2b6:	2029      	movs	r0, #41	; 0x29
    a2b8:	4770      	bx	lr

0000a2ba <radio_rx_chain_delay_get>:
	switch (phy) {
    a2ba:	2802      	cmp	r0, #2
}
    a2bc:	bf0c      	ite	eq
    a2be:	2006      	moveq	r0, #6
    a2c0:	200a      	movne	r0, #10
    a2c2:	4770      	bx	lr

0000a2c4 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
    a2c4:	4b01      	ldr	r3, [pc, #4]	; (a2cc <radio_rx_enable+0x8>)
    a2c6:	2201      	movs	r2, #1
    a2c8:	605a      	str	r2, [r3, #4]
    a2ca:	4770      	bx	lr
    a2cc:	40001000 	.word	0x40001000

0000a2d0 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
    a2d0:	4b01      	ldr	r3, [pc, #4]	; (a2d8 <radio_tx_enable+0x8>)
    a2d2:	2201      	movs	r2, #1
    a2d4:	601a      	str	r2, [r3, #0]
    a2d6:	4770      	bx	lr
    a2d8:	40001000 	.word	0x40001000

0000a2dc <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    a2dc:	4a07      	ldr	r2, [pc, #28]	; (a2fc <radio_disable+0x20>)
    a2de:	f44f 6390 	mov.w	r3, #1152	; 0x480
    a2e2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
    a2e6:	2301      	movs	r3, #1
    a2e8:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
    a2ea:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
    a2ec:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
    a2f0:	2100      	movs	r1, #0
    a2f2:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
    a2f6:	6113      	str	r3, [r2, #16]
    a2f8:	4770      	bx	lr
    a2fa:	bf00      	nop
    a2fc:	4001f000 	.word	0x4001f000

0000a300 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
    a300:	4b04      	ldr	r3, [pc, #16]	; (a314 <radio_status_reset+0x14>)
    a302:	2200      	movs	r2, #0
    a304:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
    a308:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    a30c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    a310:	4770      	bx	lr
    a312:	bf00      	nop
    a314:	40001000 	.word	0x40001000

0000a318 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
    a318:	4b03      	ldr	r3, [pc, #12]	; (a328 <radio_is_ready+0x10>)
    a31a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    a31e:	3000      	adds	r0, #0
    a320:	bf18      	it	ne
    a322:	2001      	movne	r0, #1
    a324:	4770      	bx	lr
    a326:	bf00      	nop
    a328:	40001000 	.word	0x40001000

0000a32c <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
    a32c:	4b03      	ldr	r3, [pc, #12]	; (a33c <radio_is_done+0x10>)
    a32e:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    a332:	3000      	adds	r0, #0
    a334:	bf18      	it	ne
    a336:	2001      	movne	r0, #1
    a338:	4770      	bx	lr
    a33a:	bf00      	nop
    a33c:	40001000 	.word	0x40001000

0000a340 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
    a340:	4b03      	ldr	r3, [pc, #12]	; (a350 <radio_is_idle+0x10>)
    a342:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    a346:	fab0 f080 	clz	r0, r0
    a34a:	0940      	lsrs	r0, r0, #5
    a34c:	4770      	bx	lr
    a34e:	bf00      	nop
    a350:	40001000 	.word	0x40001000

0000a354 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
    a354:	4b04      	ldr	r3, [pc, #16]	; (a368 <radio_crc_configure+0x14>)
    a356:	f240 1203 	movw	r2, #259	; 0x103
    a35a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
    a35e:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    a362:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
    a366:	4770      	bx	lr
    a368:	40001000 	.word	0x40001000

0000a36c <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
    a36c:	4b03      	ldr	r3, [pc, #12]	; (a37c <radio_crc_is_valid+0x10>)
    a36e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    a372:	3000      	adds	r0, #0
    a374:	bf18      	it	ne
    a376:	2001      	movne	r0, #1
    a378:	4770      	bx	lr
    a37a:	bf00      	nop
    a37c:	40001000 	.word	0x40001000

0000a380 <radio_pkt_empty_get>:
}
    a380:	4800      	ldr	r0, [pc, #0]	; (a384 <radio_pkt_empty_get+0x4>)
    a382:	4770      	bx	lr
    a384:	20001b28 	.word	0x20001b28

0000a388 <radio_pkt_scratch_get>:
}
    a388:	4800      	ldr	r0, [pc, #0]	; (a38c <radio_pkt_scratch_get+0x4>)
    a38a:	4770      	bx	lr
    a38c:	20001b2c 	.word	0x20001b2c

0000a390 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    a390:	4b04      	ldr	r3, [pc, #16]	; (a3a4 <radio_switch_complete_and_rx+0x14>)
    a392:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
    a394:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    a396:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
    a39a:	4602      	mov	r2, r0
    a39c:	4608      	mov	r0, r1
    a39e:	f7ff be47 	b.w	a030 <sw_switch.isra.9>
    a3a2:	bf00      	nop
    a3a4:	40001000 	.word	0x40001000

0000a3a8 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    a3a8:	4b03      	ldr	r3, [pc, #12]	; (a3b8 <radio_switch_complete_and_tx+0x10>)
    a3aa:	2103      	movs	r1, #3
    a3ac:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
    a3b0:	4601      	mov	r1, r0
    a3b2:	2001      	movs	r0, #1
    a3b4:	f7ff be3c 	b.w	a030 <sw_switch.isra.9>
    a3b8:	40001000 	.word	0x40001000

0000a3bc <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    a3bc:	4b05      	ldr	r3, [pc, #20]	; (a3d4 <radio_switch_complete_and_disable+0x18>)
    a3be:	2203      	movs	r2, #3
    a3c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    a3c4:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
    a3c8:	f44f 6290 	mov.w	r2, #1152	; 0x480
    a3cc:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    a3d0:	4770      	bx	lr
    a3d2:	bf00      	nop
    a3d4:	40001000 	.word	0x40001000

0000a3d8 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    a3d8:	4a03      	ldr	r2, [pc, #12]	; (a3e8 <radio_rssi_measure+0x10>)
    a3da:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    a3de:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    a3e2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    a3e6:	4770      	bx	lr
    a3e8:	40001000 	.word	0x40001000

0000a3ec <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    a3ec:	4b01      	ldr	r3, [pc, #4]	; (a3f4 <radio_rssi_get+0x8>)
    a3ee:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    a3f2:	4770      	bx	lr
    a3f4:	40001000 	.word	0x40001000

0000a3f8 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    a3f8:	4b02      	ldr	r3, [pc, #8]	; (a404 <radio_rssi_status_reset+0xc>)
    a3fa:	2200      	movs	r2, #0
    a3fc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    a400:	4770      	bx	lr
    a402:	bf00      	nop
    a404:	40001000 	.word	0x40001000

0000a408 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    a408:	4b03      	ldr	r3, [pc, #12]	; (a418 <radio_rssi_is_ready+0x10>)
    a40a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    a40e:	3000      	adds	r0, #0
    a410:	bf18      	it	ne
    a412:	2001      	movne	r0, #1
    a414:	4770      	bx	lr
    a416:	bf00      	nop
    a418:	40001000 	.word	0x40001000

0000a41c <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    a41c:	b530      	push	{r4, r5, lr}
    a41e:	2400      	movs	r4, #0
    a420:	00a3      	lsls	r3, r4, #2
    a422:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    a42a:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    a42c:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
    a430:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    a432:	8895      	ldrh	r5, [r2, #4]
    a434:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
    a438:	2c08      	cmp	r4, #8
		bdaddr += 6;
    a43a:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
    a43e:	d1ef      	bne.n	a420 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    a440:	4b02      	ldr	r3, [pc, #8]	; (a44c <radio_filter_configure+0x30>)
    a442:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    a446:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    a44a:	bd30      	pop	{r4, r5, pc}
    a44c:	40001000 	.word	0x40001000

0000a450 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    a450:	4a03      	ldr	r2, [pc, #12]	; (a460 <radio_filter_disable+0x10>)
    a452:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    a456:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    a45a:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    a45e:	4770      	bx	lr
    a460:	40001000 	.word	0x40001000

0000a464 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    a464:	4b02      	ldr	r3, [pc, #8]	; (a470 <radio_filter_status_reset+0xc>)
    a466:	2200      	movs	r2, #0
    a468:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    a46c:	4770      	bx	lr
    a46e:	bf00      	nop
    a470:	40001000 	.word	0x40001000

0000a474 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    a474:	4b03      	ldr	r3, [pc, #12]	; (a484 <radio_filter_has_match+0x10>)
    a476:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    a47a:	3000      	adds	r0, #0
    a47c:	bf18      	it	ne
    a47e:	2001      	movne	r0, #1
    a480:	4770      	bx	lr
    a482:	bf00      	nop
    a484:	40001000 	.word	0x40001000

0000a488 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    a488:	4b01      	ldr	r3, [pc, #4]	; (a490 <radio_filter_match_get+0x8>)
    a48a:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    a48e:	4770      	bx	lr
    a490:	40001000 	.word	0x40001000

0000a494 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    a494:	4b05      	ldr	r3, [pc, #20]	; (a4ac <radio_tmr_status_reset+0x18>)
    a496:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    a49a:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
    a49e:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    a4a2:	227f      	movs	r2, #127	; 0x7f
    a4a4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    a4a8:	4770      	bx	lr
    a4aa:	bf00      	nop
    a4ac:	4000b000 	.word	0x4000b000

0000a4b0 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
    a4b0:	4b03      	ldr	r3, [pc, #12]	; (a4c0 <radio_tmr_tifs_set+0x10>)
    a4b2:	4a04      	ldr	r2, [pc, #16]	; (a4c4 <radio_tmr_tifs_set+0x14>)
    a4b4:	781b      	ldrb	r3, [r3, #0]
    a4b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
    a4ba:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    a4be:	4770      	bx	lr
    a4c0:	20001c38 	.word	0x20001c38
    a4c4:	40009000 	.word	0x40009000

0000a4c8 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    a4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    a4cc:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    a4d0:	4c30      	ldr	r4, [pc, #192]	; (a594 <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
    a4d2:	4d31      	ldr	r5, [pc, #196]	; (a598 <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    a4d4:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    a4d8:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
    a4da:	bf88      	it	hi
    a4dc:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
    a4e0:	4b2e      	ldr	r3, [pc, #184]	; (a59c <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
    a4e2:	4c2f      	ldr	r4, [pc, #188]	; (a5a0 <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
    a4e4:	bf82      	ittt	hi
    a4e6:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
    a4ea:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
    a4ee:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
    a4f2:	2601      	movs	r6, #1
	remainder /= 1000000UL;
    a4f4:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
    a4f8:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    a4fa:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
    a4fc:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
    a500:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
    a502:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
    a506:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    a50a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
    a50e:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
    a512:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    a516:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    a51a:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
    a51e:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
    a522:	4920      	ldr	r1, [pc, #128]	; (a5a4 <radio_tmr_start+0xdc>)
    a524:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
    a528:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
    a52c:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
    a530:	f7ff fd66 	bl	a000 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
    a534:	4b1c      	ldr	r3, [pc, #112]	; (a5a8 <radio_tmr_start+0xe0>)
    a536:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
    a538:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
    a53c:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
    a540:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
    a544:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
    a546:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
    a54a:	3b74      	subs	r3, #116	; 0x74
    a54c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
    a550:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
    a554:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
    a558:	f503 739a 	add.w	r3, r3, #308	; 0x134
    a55c:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
    a560:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    a564:	33c4      	adds	r3, #196	; 0xc4
    a566:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
    a56a:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
    a56e:	3bc0      	subs	r3, #192	; 0xc0
    a570:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
    a574:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    a578:	33c8      	adds	r3, #200	; 0xc8
    a57a:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
    a57e:	f44f 6310 	mov.w	r3, #2304	; 0x900
    a582:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
    a586:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    a58a:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
    a58e:	4628      	mov	r0, r5
    a590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a594:	7ff0bdbf 	.word	0x7ff0bdbf
    a598:	000f4240 	.word	0x000f4240
    a59c:	40008000 	.word	0x40008000
    a5a0:	4000b000 	.word	0x4000b000
    a5a4:	4000b148 	.word	0x4000b148
    a5a8:	40009000 	.word	0x40009000

0000a5ac <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
    a5ac:	4a04      	ldr	r2, [pc, #16]	; (a5c0 <radio_tmr_stop+0x14>)
    a5ae:	2301      	movs	r3, #1
    a5b0:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
    a5b2:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
    a5b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    a5b8:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
    a5ba:	6113      	str	r3, [r2, #16]
    a5bc:	4770      	bx	lr
    a5be:	bf00      	nop
    a5c0:	40008000 	.word	0x40008000

0000a5c4 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
    a5c4:	4b0c      	ldr	r3, [pc, #48]	; (a5f8 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    a5c6:	4a0d      	ldr	r2, [pc, #52]	; (a5fc <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
    a5c8:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    a5cc:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    a5d0:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    a5d4:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    a5d8:	3240      	adds	r2, #64	; 0x40
    a5da:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
    a5de:	f502 7280 	add.w	r2, r2, #256	; 0x100
    a5e2:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
    a5e6:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
    a5ea:	3a34      	subs	r2, #52	; 0x34
    a5ec:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
    a5f0:	2218      	movs	r2, #24
    a5f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    a5f6:	4770      	bx	lr
    a5f8:	40008000 	.word	0x40008000
    a5fc:	40001104 	.word	0x40001104

0000a600 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
    a600:	4b0b      	ldr	r3, [pc, #44]	; (a630 <radio_tmr_aa_capture+0x30>)
    a602:	4a0c      	ldr	r2, [pc, #48]	; (a634 <radio_tmr_aa_capture+0x34>)
    a604:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
    a608:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    a60c:	3240      	adds	r2, #64	; 0x40
    a60e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    a612:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
    a616:	3a3c      	subs	r2, #60	; 0x3c
    a618:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    a61c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    a620:	3240      	adds	r2, #64	; 0x40
    a622:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
    a626:	220c      	movs	r2, #12
    a628:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    a62c:	4770      	bx	lr
    a62e:	bf00      	nop
    a630:	4001f000 	.word	0x4001f000
    a634:	40001100 	.word	0x40001100

0000a638 <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
    a638:	4b01      	ldr	r3, [pc, #4]	; (a640 <radio_tmr_aa_get+0x8>)
    a63a:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
    a63e:	4770      	bx	lr
    a640:	40008000 	.word	0x40008000

0000a644 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    a644:	4b01      	ldr	r3, [pc, #4]	; (a64c <radio_tmr_aa_save+0x8>)
    a646:	6018      	str	r0, [r3, #0]
    a648:	4770      	bx	lr
    a64a:	bf00      	nop
    a64c:	20001c30 	.word	0x20001c30

0000a650 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
    a650:	4b01      	ldr	r3, [pc, #4]	; (a658 <radio_tmr_aa_restore+0x8>)
    a652:	6818      	ldr	r0, [r3, #0]
    a654:	4770      	bx	lr
    a656:	bf00      	nop
    a658:	20001c30 	.word	0x20001c30

0000a65c <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
    a65c:	4b01      	ldr	r3, [pc, #4]	; (a664 <radio_tmr_ready_get+0x8>)
    a65e:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
    a662:	4770      	bx	lr
    a664:	40008000 	.word	0x40008000

0000a668 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
    a668:	4b06      	ldr	r3, [pc, #24]	; (a684 <radio_tmr_end_capture+0x1c>)
    a66a:	4a07      	ldr	r2, [pc, #28]	; (a688 <radio_tmr_end_capture+0x20>)
    a66c:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
    a670:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    a674:	323c      	adds	r2, #60	; 0x3c
    a676:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
    a67a:	2220      	movs	r2, #32
    a67c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    a680:	4770      	bx	lr
    a682:	bf00      	nop
    a684:	4001f000 	.word	0x4001f000
    a688:	4000110c 	.word	0x4000110c

0000a68c <radio_tmr_end_get>:
    a68c:	4b01      	ldr	r3, [pc, #4]	; (a694 <radio_tmr_end_get+0x8>)
    a68e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
    a692:	4770      	bx	lr
    a694:	40008000 	.word	0x40008000

0000a698 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
    a698:	4b01      	ldr	r3, [pc, #4]	; (a6a0 <radio_tmr_tifs_base_get+0x8>)
    a69a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
    a69e:	4770      	bx	lr
    a6a0:	40008000 	.word	0x40008000

0000a6a4 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    a6a4:	4b16      	ldr	r3, [pc, #88]	; (a700 <radio_ccm_rx_pkt_set+0x5c>)
{
    a6a6:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    a6a8:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    a6aa:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    a6ac:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    a6b0:	4e14      	ldr	r6, [pc, #80]	; (a704 <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    a6b2:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    a6b6:	4d14      	ldr	r5, [pc, #80]	; (a708 <radio_ccm_rx_pkt_set+0x64>)
    a6b8:	2902      	cmp	r1, #2
    a6ba:	bf0c      	ite	eq
    a6bc:	4629      	moveq	r1, r5
    a6be:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
    a6c0:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    a6c4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    a6c8:	4810      	ldr	r0, [pc, #64]	; (a70c <radio_ccm_rx_pkt_set+0x68>)
    a6ca:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
    a6ce:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    a6d2:	4a0f      	ldr	r2, [pc, #60]	; (a710 <radio_ccm_rx_pkt_set+0x6c>)
    a6d4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    a6d8:	490e      	ldr	r1, [pc, #56]	; (a714 <radio_ccm_rx_pkt_set+0x70>)
    a6da:	4a0f      	ldr	r2, [pc, #60]	; (a718 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
    a6dc:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    a6e0:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    a6e4:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    a6e8:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
    a6ec:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
    a6f0:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
    a6f4:	2140      	movs	r1, #64	; 0x40
    a6f6:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
    a6fa:	2201      	movs	r2, #1
    a6fc:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    a6fe:	bd70      	pop	{r4, r5, r6, pc}
    a700:	4000f000 	.word	0x4000f000
    a704:	01000001 	.word	0x01000001
    a708:	01010001 	.word	0x01010001
    a70c:	20001b2c 	.word	0x20001b2c
    a710:	20001a1c 	.word	0x20001a1c
    a714:	40001104 	.word	0x40001104
    a718:	4001f000 	.word	0x4001f000

0000a71c <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    a71c:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    a71e:	4b0e      	ldr	r3, [pc, #56]	; (a758 <radio_ccm_tx_pkt_set+0x3c>)
    a720:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    a722:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    a724:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    a728:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    a72c:	4c0b      	ldr	r4, [pc, #44]	; (a75c <radio_ccm_tx_pkt_set+0x40>)
    a72e:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    a732:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
    a736:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    a73a:	4809      	ldr	r0, [pc, #36]	; (a760 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    a73c:	4909      	ldr	r1, [pc, #36]	; (a764 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    a73e:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    a742:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    a746:	2101      	movs	r1, #1
    a748:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    a74c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    a750:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
    a754:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    a756:	bd10      	pop	{r4, pc}
    a758:	4000f000 	.word	0x4000f000
    a75c:	01010000 	.word	0x01010000
    a760:	20001b2c 	.word	0x20001b2c
    a764:	20001a1c 	.word	0x20001a1c

0000a768 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    a768:	4b0c      	ldr	r3, [pc, #48]	; (a79c <radio_ccm_is_done+0x34>)
    a76a:	2202      	movs	r2, #2
    a76c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    a770:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    a774:	b16a      	cbz	r2, a792 <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    a776:	2202      	movs	r2, #2
    a778:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    a77c:	4a08      	ldr	r2, [pc, #32]	; (a7a0 <radio_ccm_is_done+0x38>)
    a77e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    a782:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    a786:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    a78a:	fab0 f080 	clz	r0, r0
    a78e:	0940      	lsrs	r0, r0, #5
    a790:	4770      	bx	lr
		__WFE();
    a792:	bf20      	wfe
		__SEV();
    a794:	bf40      	sev
		__WFE();
    a796:	bf20      	wfe
    a798:	e7ea      	b.n	a770 <radio_ccm_is_done+0x8>
    a79a:	bf00      	nop
    a79c:	4000f000 	.word	0x4000f000
    a7a0:	e000e100 	.word	0xe000e100

0000a7a4 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    a7a4:	4b03      	ldr	r3, [pc, #12]	; (a7b4 <radio_ccm_mic_is_valid+0x10>)
    a7a6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    a7aa:	3000      	adds	r0, #0
    a7ac:	bf18      	it	ne
    a7ae:	2001      	movne	r0, #1
    a7b0:	4770      	bx	lr
    a7b2:	bf00      	nop
    a7b4:	4000f000 	.word	0x4000f000

0000a7b8 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    a7b8:	4b01      	ldr	r3, [pc, #4]	; (a7c0 <radio_ar_match_get+0x8>)
    a7ba:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    a7be:	4770      	bx	lr
    a7c0:	4000f000 	.word	0x4000f000

0000a7c4 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
    a7c4:	4a04      	ldr	r2, [pc, #16]	; (a7d8 <radio_ar_status_reset+0x14>)
    a7c6:	2300      	movs	r3, #0
    a7c8:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    a7cc:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
    a7d0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    a7d4:	4770      	bx	lr
    a7d6:	bf00      	nop
    a7d8:	40001000 	.word	0x40001000

0000a7dc <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    a7dc:	4b08      	ldr	r3, [pc, #32]	; (a800 <radio_ar_has_match+0x24>)
    a7de:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    a7e2:	b160      	cbz	r0, a7fe <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
    a7e4:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    a7e8:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
    a7ec:	b138      	cbz	r0, a7fe <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
    a7ee:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
    a7f2:	b120      	cbz	r0, a7fe <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    a7f4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
    a7f8:	fab0 f080 	clz	r0, r0
    a7fc:	0940      	lsrs	r0, r0, #5
}
    a7fe:	4770      	bx	lr
    a800:	40001000 	.word	0x40001000

0000a804 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    a804:	2901      	cmp	r1, #1
    a806:	d005      	beq.n	a814 <mayfly_enable_cb+0x10>
    a808:	4040      	eors	r0, r0
    a80a:	f380 8811 	msr	BASEPRI, r0
    a80e:	f04f 0004 	mov.w	r0, #4
    a812:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
    a814:	2018      	movs	r0, #24
	if (enable) {
    a816:	b10a      	cbz	r2, a81c <mayfly_enable_cb+0x18>
		irq_enable(SWI4_IRQn);
    a818:	f7f6 bb30 	b.w	e7c <_arch_irq_enable>
	} else {
		irq_disable(SWI4_IRQn);
    a81c:	f7f6 bb3e 	b.w	e9c <_arch_irq_disable>

0000a820 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
    a820:	b139      	cbz	r1, a832 <mayfly_is_enabled+0x12>
    a822:	2901      	cmp	r1, #1
    a824:	d008      	beq.n	a838 <mayfly_is_enabled+0x18>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
    a826:	4040      	eors	r0, r0
    a828:	f380 8811 	msr	BASEPRI, r0
    a82c:	f04f 0004 	mov.w	r0, #4
    a830:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
    a832:	200b      	movs	r0, #11
		return irq_is_enabled(SWI4_IRQn);
    a834:	f7f6 bb46 	b.w	ec4 <_arch_irq_is_enabled>
    a838:	2018      	movs	r0, #24
    a83a:	e7fb      	b.n	a834 <mayfly_is_enabled+0x14>

0000a83c <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    a83c:	4288      	cmp	r0, r1
    a83e:	d00a      	beq.n	a856 <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
    a840:	b918      	cbnz	r0, a84a <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
    a842:	1e4b      	subs	r3, r1, #1
    a844:	4258      	negs	r0, r3
    a846:	4158      	adcs	r0, r3
    a848:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    a84a:	2801      	cmp	r0, #1
    a84c:	d105      	bne.n	a85a <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
    a84e:	fab1 f081 	clz	r0, r1
    a852:	0940      	lsrs	r0, r0, #5
    a854:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    a856:	2001      	movs	r0, #1
    a858:	4770      	bx	lr
    a85a:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
    a85c:	4770      	bx	lr
	...

0000a860 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
    a860:	4b08      	ldr	r3, [pc, #32]	; (a884 <mayfly_pend+0x24>)
	(void)caller_id;

	switch (callee_id) {
    a862:	b139      	cbz	r1, a874 <mayfly_pend+0x14>
    a864:	2901      	cmp	r1, #1
    a866:	d00a      	beq.n	a87e <mayfly_pend+0x1e>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
    a868:	4040      	eors	r0, r0
    a86a:	f380 8811 	msr	BASEPRI, r0
    a86e:	f04f 0004 	mov.w	r0, #4
    a872:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a874:	f44f 6200 	mov.w	r2, #2048	; 0x800
    a878:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    a87c:	4770      	bx	lr
    a87e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    a882:	e7f9      	b.n	a878 <mayfly_pend+0x18>
    a884:	e000e100 	.word	0xe000e100

0000a888 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
    a888:	2803      	cmp	r0, #3
    a88a:	d905      	bls.n	a898 <hal_ticker_instance0_caller_id_get+0x10>

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    a88c:	4040      	eors	r0, r0
    a88e:	f380 8811 	msr	BASEPRI, r0
    a892:	f04f 0004 	mov.w	r0, #4
    a896:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
    a898:	4b02      	ldr	r3, [pc, #8]	; (a8a4 <hal_ticker_instance0_caller_id_get+0x1c>)
    a89a:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    a89c:	2800      	cmp	r0, #0
    a89e:	d0f5      	beq.n	a88c <hal_ticker_instance0_caller_id_get+0x4>

	return caller_id;
}
    a8a0:	4770      	bx	lr
    a8a2:	bf00      	nop
    a8a4:	0000c708 	.word	0x0000c708

0000a8a8 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    a8a8:	3802      	subs	r0, #2
{
    a8aa:	b410      	push	{r4}
    a8ac:	461c      	mov	r4, r3
	switch (caller_id) {
    a8ae:	2803      	cmp	r0, #3
    a8b0:	d816      	bhi.n	a8e0 <hal_ticker_instance0_sched+0x38>
    a8b2:	e8df f000 	tbb	[pc, r0]
    a8b6:	0b02      	.short	0x0b02
    a8b8:	2411      	.short	0x2411
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
    a8ba:	2903      	cmp	r1, #3
    a8bc:	d110      	bne.n	a8e0 <hal_ticker_instance0_sched+0x38>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
    a8be:	4b13      	ldr	r3, [pc, #76]	; (a90c <hal_ticker_instance0_sched+0x64>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    a8c0:	2100      	movs	r1, #0
			m.param = instance;
    a8c2:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    a8c4:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
    a8c6:	bc10      	pop	{r4}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    a8c8:	f7f8 b9bc 	b.w	2c44 <mayfly_enqueue>
		switch (callee_id) {
    a8cc:	2904      	cmp	r1, #4
    a8ce:	d107      	bne.n	a8e0 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
    a8d0:	4b0f      	ldr	r3, [pc, #60]	; (a910 <hal_ticker_instance0_sched+0x68>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    a8d2:	2101      	movs	r1, #1
			m.param = instance;
    a8d4:	609c      	str	r4, [r3, #8]
    a8d6:	e7f5      	b.n	a8c4 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
    a8d8:	2903      	cmp	r1, #3
    a8da:	d007      	beq.n	a8ec <hal_ticker_instance0_sched+0x44>
    a8dc:	2904      	cmp	r1, #4
    a8de:	d00a      	beq.n	a8f6 <hal_ticker_instance0_sched+0x4e>
		LL_ASSERT(0);
    a8e0:	4040      	eors	r0, r0
    a8e2:	f380 8811 	msr	BASEPRI, r0
    a8e6:	f04f 0004 	mov.w	r0, #4
    a8ea:	df02      	svc	2
			m.param = instance;
    a8ec:	4b09      	ldr	r3, [pc, #36]	; (a914 <hal_ticker_instance0_sched+0x6c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    a8ee:	2100      	movs	r1, #0
			m.param = instance;
    a8f0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    a8f2:	2001      	movs	r0, #1
    a8f4:	e7e7      	b.n	a8c6 <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
    a8f6:	4b08      	ldr	r3, [pc, #32]	; (a918 <hal_ticker_instance0_sched+0x70>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    a8f8:	2101      	movs	r1, #1
			m.param = instance;
    a8fa:	609c      	str	r4, [r3, #8]
    a8fc:	e7f9      	b.n	a8f2 <hal_ticker_instance0_sched+0x4a>
		switch (callee_id) {
    a8fe:	2904      	cmp	r1, #4
    a900:	d1ee      	bne.n	a8e0 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
    a902:	4b06      	ldr	r3, [pc, #24]	; (a91c <hal_ticker_instance0_sched+0x74>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    a904:	2101      	movs	r1, #1
			m.param = instance;
    a906:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    a908:	2003      	movs	r0, #3
    a90a:	e7dc      	b.n	a8c6 <hal_ticker_instance0_sched+0x1e>
    a90c:	20004ff4 	.word	0x20004ff4
    a910:	20005004 	.word	0x20005004
    a914:	20005014 	.word	0x20005014
    a918:	20005024 	.word	0x20005024
    a91c:	20005034 	.word	0x20005034

0000a920 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
    a920:	4601      	mov	r1, r0
    a922:	2000      	movs	r0, #0
    a924:	f7ff bb1c 	b.w	9f60 <cntr_cmp_set>

0000a928 <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
    a928:	4770      	bx	lr
	...

0000a92c <net_buf_pool_get>:
}
    a92c:	4b01      	ldr	r3, [pc, #4]	; (a934 <net_buf_pool_get+0x8>)
    a92e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    a932:	4770      	bx	lr
    a934:	20005144 	.word	0x20005144

0000a938 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    a938:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
    a93a:	4b04      	ldr	r3, [pc, #16]	; (a94c <net_buf_id+0x14>)
    a93c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    a940:	69db      	ldr	r3, [r3, #28]
    a942:	1ac0      	subs	r0, r0, r3
}
    a944:	4b02      	ldr	r3, [pc, #8]	; (a950 <net_buf_id+0x18>)
	return buf - pool->__bufs;
    a946:	10c0      	asrs	r0, r0, #3
}
    a948:	4358      	muls	r0, r3
    a94a:	4770      	bx	lr
    a94c:	20005144 	.word	0x20005144
    a950:	aaaaaaab 	.word	0xaaaaaaab

0000a954 <fixed_data_alloc>:
{
    a954:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    a956:	4b09      	ldr	r3, [pc, #36]	; (a97c <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    a958:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    a95a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
    a95e:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    a960:	699b      	ldr	r3, [r3, #24]
    a962:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
    a964:	6823      	ldr	r3, [r4, #0]
    a966:	429a      	cmp	r2, r3
    a968:	bf94      	ite	ls
    a96a:	600a      	strls	r2, [r1, #0]
    a96c:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    a96e:	f7ff ffe3 	bl	a938 <net_buf_id>
    a972:	e894 000c 	ldmia.w	r4, {r2, r3}
}
    a976:	fb02 3000 	mla	r0, r2, r0, r3
    a97a:	bd10      	pop	{r4, pc}
    a97c:	20005144 	.word	0x20005144

0000a980 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
    a980:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a984:	4605      	mov	r5, r0
    a986:	9101      	str	r1, [sp, #4]
    a988:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    a98a:	f000 fdc1 	bl	b510 <_impl_k_uptime_get_32>
    a98e:	4607      	mov	r7, r0
	__asm__ volatile(
    a990:	f04f 0320 	mov.w	r3, #32
    a994:	f3ef 8811 	mrs	r8, BASEPRI
    a998:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    a99c:	8a6b      	ldrh	r3, [r5, #18]
    a99e:	2b00      	cmp	r3, #0
    a9a0:	d03d      	beq.n	aa1e <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    a9a2:	8a2a      	ldrh	r2, [r5, #16]
    a9a4:	429a      	cmp	r2, r3
    a9a6:	d92a      	bls.n	a9fe <net_buf_alloc_len+0x7e>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
    a9a8:	2100      	movs	r1, #0
    a9aa:	4628      	mov	r0, r5
    a9ac:	f000 fae3 	bl	af76 <k_queue_get>
			if (buf) {
    a9b0:	4604      	mov	r4, r0
    a9b2:	b320      	cbz	r0, a9fe <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a9b4:	f388 8811 	msr	BASEPRI, r8
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    a9b8:	9b01      	ldr	r3, [sp, #4]
    a9ba:	2b00      	cmp	r3, #0
    a9bc:	d03c      	beq.n	aa38 <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
    a9be:	1c73      	adds	r3, r6, #1
    a9c0:	2b01      	cmp	r3, #1
    a9c2:	d906      	bls.n	a9d2 <net_buf_alloc_len+0x52>
    a9c4:	f000 fda4 	bl	b510 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
    a9c8:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
    a9ca:	42b0      	cmp	r0, r6
    a9cc:	bf94      	ite	ls
    a9ce:	1a36      	subls	r6, r6, r0
    a9d0:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    a9d2:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    a9d4:	4f1e      	ldr	r7, [pc, #120]	; (aa50 <net_buf_alloc_len+0xd0>)
    a9d6:	eb07 1343 	add.w	r3, r7, r3, lsl #5
    a9da:	4632      	mov	r2, r6
    a9dc:	699b      	ldr	r3, [r3, #24]
    a9de:	681b      	ldr	r3, [r3, #0]
    a9e0:	a901      	add	r1, sp, #4
    a9e2:	681b      	ldr	r3, [r3, #0]
    a9e4:	4620      	mov	r0, r4
    a9e6:	4798      	blx	r3
    a9e8:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    a9ea:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    a9ec:	bb28      	cbnz	r0, aa3a <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    a9ee:	79a0      	ldrb	r0, [r4, #6]
    a9f0:	4621      	mov	r1, r4
    a9f2:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    a9f6:	f000 fa9e 	bl	af36 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    a9fa:	462c      	mov	r4, r5
    a9fc:	e018      	b.n	aa30 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
    a9fe:	8a6b      	ldrh	r3, [r5, #18]
    aa00:	1e5a      	subs	r2, r3, #1
    aa02:	826a      	strh	r2, [r5, #18]
    aa04:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    aa08:	8a2c      	ldrh	r4, [r5, #16]
    aa0a:	1ae4      	subs	r4, r4, r3
    aa0c:	69eb      	ldr	r3, [r5, #28]
    aa0e:	2218      	movs	r2, #24
    aa10:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
    aa14:	4b0e      	ldr	r3, [pc, #56]	; (aa50 <net_buf_alloc_len+0xd0>)
    aa16:	1aed      	subs	r5, r5, r3
    aa18:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
    aa1a:	71a5      	strb	r5, [r4, #6]
		goto success;
    aa1c:	e7cc      	b.n	a9b8 <net_buf_alloc_len+0x38>
    aa1e:	f388 8811 	msr	BASEPRI, r8
	buf = k_lifo_get(&pool->free, timeout);
    aa22:	4631      	mov	r1, r6
    aa24:	4628      	mov	r0, r5
    aa26:	f000 faa6 	bl	af76 <k_queue_get>
	if (!buf) {
    aa2a:	4604      	mov	r4, r0
    aa2c:	2800      	cmp	r0, #0
    aa2e:	d1c3      	bne.n	a9b8 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
    aa30:	4620      	mov	r0, r4
    aa32:	b002      	add	sp, #8
    aa34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
    aa38:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
    aa3a:	2301      	movs	r3, #1
    aa3c:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
    aa3e:	2300      	movs	r3, #0
	buf->frags = NULL;
    aa40:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
    aa42:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
    aa44:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
    aa46:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
    aa48:	6923      	ldr	r3, [r4, #16]
    aa4a:	81e2      	strh	r2, [r4, #14]
    aa4c:	60a3      	str	r3, [r4, #8]
	return buf;
    aa4e:	e7ef      	b.n	aa30 <net_buf_alloc_len+0xb0>
    aa50:	20005144 	.word	0x20005144

0000aa54 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    aa54:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
    aa56:	685b      	ldr	r3, [r3, #4]
    aa58:	460a      	mov	r2, r1
    aa5a:	6819      	ldr	r1, [r3, #0]
    aa5c:	f7ff bf90 	b.w	a980 <net_buf_alloc_len>

0000aa60 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
    aa60:	6883      	ldr	r3, [r0, #8]
    aa62:	4419      	add	r1, r3
    aa64:	6001      	str	r1, [r0, #0]
    aa66:	4770      	bx	lr

0000aa68 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
    aa68:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
    aa6a:	460a      	mov	r2, r1
    aa6c:	6814      	ldr	r4, [r2, #0]
    aa6e:	b914      	cbnz	r4, aa76 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
    aa70:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
    aa72:	f000 ba64 	b.w	af3e <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
    aa76:	7953      	ldrb	r3, [r2, #5]
    aa78:	f043 0301 	orr.w	r3, r3, #1
    aa7c:	7153      	strb	r3, [r2, #5]
    aa7e:	4622      	mov	r2, r4
    aa80:	e7f4      	b.n	aa6c <net_buf_put+0x4>
	...

0000aa84 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    aa84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aa86:	4d15      	ldr	r5, [pc, #84]	; (aadc <net_buf_unref+0x58>)
    aa88:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    aa8a:	2600      	movs	r6, #0
	while (buf) {
    aa8c:	b904      	cbnz	r4, aa90 <net_buf_unref+0xc>
    aa8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
    aa90:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    aa92:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
    aa94:	3b01      	subs	r3, #1
    aa96:	b2db      	uxtb	r3, r3
    aa98:	7123      	strb	r3, [r4, #4]
    aa9a:	2b00      	cmp	r3, #0
    aa9c:	d1f7      	bne.n	aa8e <net_buf_unref+0xa>
		if (buf->__buf) {
    aa9e:	6921      	ldr	r1, [r4, #16]
    aaa0:	b159      	cbz	r1, aaba <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    aaa2:	7963      	ldrb	r3, [r4, #5]
    aaa4:	079b      	lsls	r3, r3, #30
    aaa6:	d407      	bmi.n	aab8 <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    aaa8:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
    aaaa:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    aaae:	4620      	mov	r0, r4
    aab0:	699b      	ldr	r3, [r3, #24]
    aab2:	681b      	ldr	r3, [r3, #0]
    aab4:	689b      	ldr	r3, [r3, #8]
    aab6:	4798      	blx	r3
			buf->__buf = NULL;
    aab8:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
    aaba:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    aabc:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
    aabe:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
    aac2:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    aac4:	695b      	ldr	r3, [r3, #20]
    aac6:	b11b      	cbz	r3, aad0 <net_buf_unref+0x4c>
			pool->destroy(buf);
    aac8:	4620      	mov	r0, r4
    aaca:	4798      	blx	r3
{
    aacc:	463c      	mov	r4, r7
    aace:	e7dd      	b.n	aa8c <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
    aad0:	4621      	mov	r1, r4
    aad2:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    aad6:	f000 fa2e 	bl	af36 <k_queue_prepend>
    aada:	e7f7      	b.n	aacc <net_buf_unref+0x48>
    aadc:	20005144 	.word	0x20005144

0000aae0 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
    aae0:	7903      	ldrb	r3, [r0, #4]
    aae2:	3301      	adds	r3, #1
    aae4:	7103      	strb	r3, [r0, #4]
	return buf;
}
    aae6:	4770      	bx	lr

0000aae8 <net_buf_simple_add>:
	return buf->data + buf->len;
    aae8:	8883      	ldrh	r3, [r0, #4]
    aaea:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    aaec:	4419      	add	r1, r3
    aaee:	8081      	strh	r1, [r0, #4]
	return tail;
}
    aaf0:	18d0      	adds	r0, r2, r3
    aaf2:	4770      	bx	lr

0000aaf4 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
    aaf4:	b430      	push	{r4, r5}
    aaf6:	8883      	ldrh	r3, [r0, #4]
    aaf8:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
    aafa:	189d      	adds	r5, r3, r2
    aafc:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
    aafe:	18e0      	adds	r0, r4, r3
}
    ab00:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
    ab02:	f7f5 bd4f 	b.w	5a4 <memcpy>

0000ab06 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
    ab06:	8883      	ldrh	r3, [r0, #4]
    ab08:	1a5b      	subs	r3, r3, r1
    ab0a:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
    ab0c:	6803      	ldr	r3, [r0, #0]
    ab0e:	4419      	add	r1, r3
    ab10:	6001      	str	r1, [r0, #0]
}
    ab12:	4608      	mov	r0, r1
    ab14:	4770      	bx	lr

0000ab16 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
    ab16:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
    ab18:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
    ab1a:	2101      	movs	r1, #1
	val = buf->data[0];
    ab1c:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
    ab1e:	f7ff fff2 	bl	ab06 <net_buf_simple_pull>

	return val;
}
    ab22:	4610      	mov	r0, r2
    ab24:	bd08      	pop	{r3, pc}

0000ab26 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
    ab26:	6802      	ldr	r2, [r0, #0]
    ab28:	6880      	ldr	r0, [r0, #8]
}
    ab2a:	1a10      	subs	r0, r2, r0
    ab2c:	4770      	bx	lr
	...

0000ab30 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
    ab30:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
    ab32:	4b08      	ldr	r3, [pc, #32]	; (ab54 <_sys_device_do_config_level+0x24>)
    ab34:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    ab38:	3001      	adds	r0, #1
    ab3a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    ab3e:	4620      	mov	r0, r4
    ab40:	42a8      	cmp	r0, r5
    ab42:	f104 040c 	add.w	r4, r4, #12
    ab46:	d300      	bcc.n	ab4a <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
    ab48:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
    ab4a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    ab4e:	685b      	ldr	r3, [r3, #4]
    ab50:	4798      	blx	r3
    ab52:	e7f4      	b.n	ab3e <_sys_device_do_config_level+0xe>
    ab54:	0000c718 	.word	0x0000c718

0000ab58 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    ab58:	4b10      	ldr	r3, [pc, #64]	; (ab9c <device_get_binding+0x44>)
{
    ab5a:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    ab5c:	4c10      	ldr	r4, [pc, #64]	; (aba0 <device_get_binding+0x48>)
{
    ab5e:	4605      	mov	r5, r0
    ab60:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    ab62:	429c      	cmp	r4, r3
    ab64:	d104      	bne.n	ab70 <device_get_binding+0x18>
    ab66:	4c0e      	ldr	r4, [pc, #56]	; (aba0 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    ab68:	42b4      	cmp	r4, r6
    ab6a:	d109      	bne.n	ab80 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
    ab6c:	2400      	movs	r4, #0
    ab6e:	e012      	b.n	ab96 <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
    ab70:	6862      	ldr	r2, [r4, #4]
    ab72:	b11a      	cbz	r2, ab7c <device_get_binding+0x24>
    ab74:	6822      	ldr	r2, [r4, #0]
    ab76:	6812      	ldr	r2, [r2, #0]
    ab78:	42aa      	cmp	r2, r5
    ab7a:	d00c      	beq.n	ab96 <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    ab7c:	340c      	adds	r4, #12
    ab7e:	e7f0      	b.n	ab62 <device_get_binding+0xa>
		if (!info->driver_api) {
    ab80:	6863      	ldr	r3, [r4, #4]
    ab82:	b90b      	cbnz	r3, ab88 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    ab84:	340c      	adds	r4, #12
    ab86:	e7ef      	b.n	ab68 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
    ab88:	6823      	ldr	r3, [r4, #0]
    ab8a:	4628      	mov	r0, r5
    ab8c:	6819      	ldr	r1, [r3, #0]
    ab8e:	f7f5 fce7 	bl	560 <strcmp>
    ab92:	2800      	cmp	r0, #0
    ab94:	d1f6      	bne.n	ab84 <device_get_binding+0x2c>
}
    ab96:	4620      	mov	r0, r4
    ab98:	bd70      	pop	{r4, r5, r6, pc}
    ab9a:	bf00      	nop
    ab9c:	200050e4 	.word	0x200050e4
    aba0:	20005054 	.word	0x20005054

0000aba4 <device_pm_control_nop>:
#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
int device_pm_control_nop(struct device *unused_device,
		       u32_t unused_ctrl_command, void *unused_context)
{
	return 0;
}
    aba4:	2000      	movs	r0, #0
    aba6:	4770      	bx	lr

0000aba8 <device_list_get>:

void device_list_get(struct device **device_list, int *device_count)
{

	*device_list = __device_init_start;
    aba8:	4a04      	ldr	r2, [pc, #16]	; (abbc <device_list_get+0x14>)
	*device_count = __device_init_end - __device_init_start;
    abaa:	4b05      	ldr	r3, [pc, #20]	; (abc0 <device_list_get+0x18>)
	*device_list = __device_init_start;
    abac:	6002      	str	r2, [r0, #0]
	*device_count = __device_init_end - __device_init_start;
    abae:	1a9b      	subs	r3, r3, r2
    abb0:	4a04      	ldr	r2, [pc, #16]	; (abc4 <device_list_get+0x1c>)
    abb2:	109b      	asrs	r3, r3, #2
    abb4:	4353      	muls	r3, r2
    abb6:	600b      	str	r3, [r1, #0]
    abb8:	4770      	bx	lr
    abba:	bf00      	nop
    abbc:	20005054 	.word	0x20005054
    abc0:	200050e4 	.word	0x200050e4
    abc4:	aaaaaaab 	.word	0xaaaaaaab

0000abc8 <_sys_power_save_idle_exit>:
	k_cpu_idle();
#endif
}

void _sys_power_save_idle_exit(s32_t ticks)
{
    abc8:	b510      	push	{r4, lr}
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts. This can be
	 * disabled by calling _sys_soc_pm_idle_exit_notification_disable().
	 * Alternatively it can be simply ignored if not required.
	 */
	if (_sys_pm_idle_exit_notify) {
    abca:	4b08      	ldr	r3, [pc, #32]	; (abec <_sys_power_save_idle_exit+0x24>)
    abcc:	781b      	ldrb	r3, [r3, #0]
{
    abce:	4604      	mov	r4, r0
	if (_sys_pm_idle_exit_notify) {
    abd0:	b10b      	cbz	r3, abd6 <_sys_power_save_idle_exit+0xe>
		_sys_soc_resume();
    abd2:	f7f5 fe91 	bl	8f8 <_sys_soc_resume>
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
    abd6:	1c63      	adds	r3, r4, #1
    abd8:	d003      	beq.n	abe2 <_sys_power_save_idle_exit+0x1a>
    abda:	4b05      	ldr	r3, [pc, #20]	; (abf0 <_sys_power_save_idle_exit+0x28>)
    abdc:	681b      	ldr	r3, [r3, #0]
    abde:	429c      	cmp	r4, r3
    abe0:	db03      	blt.n	abea <_sys_power_save_idle_exit+0x22>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
	}
}
    abe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_timer_idle_exit();
    abe6:	f7f7 b9b7 	b.w	1f58 <_timer_idle_exit>
    abea:	bd10      	pop	{r4, pc}
    abec:	2000343c 	.word	0x2000343c
    abf0:	20005044 	.word	0x20005044

0000abf4 <idle>:
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    abf4:	4d14      	ldr	r5, [pc, #80]	; (ac48 <idle+0x54>)
	if (_must_enter_tickless_idle(ticks)) {
    abf6:	f8df 8058 	ldr.w	r8, [pc, #88]	; ac50 <idle+0x5c>
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    abfa:	b580      	push	{r7, lr}
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    abfc:	f105 0710 	add.w	r7, r5, #16
	__asm__ volatile(
    ac00:	f04f 0220 	mov.w	r2, #32
    ac04:	f3ef 8311 	mrs	r3, BASEPRI
    ac08:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    ac0c:	692b      	ldr	r3, [r5, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ac0e:	42bb      	cmp	r3, r7
    ac10:	d017      	beq.n	ac42 <idle+0x4e>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
    ac12:	b1b3      	cbz	r3, ac42 <idle+0x4e>
    ac14:	691c      	ldr	r4, [r3, #16]
	if (_must_enter_tickless_idle(ticks)) {
    ac16:	1c63      	adds	r3, r4, #1
    ac18:	d003      	beq.n	ac22 <idle+0x2e>
    ac1a:	f8d8 3000 	ldr.w	r3, [r8]
    ac1e:	42a3      	cmp	r3, r4
    ac20:	dc02      	bgt.n	ac28 <idle+0x34>
		_timer_idle_enter(ticks);
    ac22:	4620      	mov	r0, r4
    ac24:	f7f7 f984 	bl	1f30 <_timer_idle_enter>
	_sys_pm_idle_exit_notify = 1;
    ac28:	4e08      	ldr	r6, [pc, #32]	; (ac4c <idle+0x58>)
	_kernel.idle = ticks;
    ac2a:	61ac      	str	r4, [r5, #24]
	_sys_pm_idle_exit_notify = 1;
    ac2c:	2301      	movs	r3, #1
	if (_sys_soc_suspend(ticks) == SYS_PM_NOT_HANDLED) {
    ac2e:	4620      	mov	r0, r4
	_sys_pm_idle_exit_notify = 1;
    ac30:	7033      	strb	r3, [r6, #0]
	if (_sys_soc_suspend(ticks) == SYS_PM_NOT_HANDLED) {
    ac32:	f7f5 fd8f 	bl	754 <_sys_soc_suspend>
    ac36:	2800      	cmp	r0, #0
    ac38:	d1e2      	bne.n	ac00 <idle+0xc>
		_sys_pm_idle_exit_notify = 0;
    ac3a:	7030      	strb	r0, [r6, #0]
		k_cpu_idle();
    ac3c:	f7f6 f9a6 	bl	f8c <k_cpu_idle>
    ac40:	e7de      	b.n	ac00 <idle+0xc>
    ac42:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    ac46:	e7ec      	b.n	ac22 <idle+0x2e>
    ac48:	20001d34 	.word	0x20001d34
    ac4c:	2000343c 	.word	0x2000343c
    ac50:	20005044 	.word	0x20005044

0000ac54 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
    ac54:	4802      	ldr	r0, [pc, #8]	; (ac60 <_bss_zero+0xc>)
    ac56:	4a03      	ldr	r2, [pc, #12]	; (ac64 <_bss_zero+0x10>)
    ac58:	2100      	movs	r1, #0
    ac5a:	1a12      	subs	r2, r2, r0
    ac5c:	f7f5 bcce 	b.w	5fc <memset>
    ac60:	20000000 	.word	0x20000000
    ac64:	200034c8 	.word	0x200034c8

0000ac68 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
    ac68:	4802      	ldr	r0, [pc, #8]	; (ac74 <_data_copy+0xc>)
    ac6a:	4a03      	ldr	r2, [pc, #12]	; (ac78 <_data_copy+0x10>)
    ac6c:	4903      	ldr	r1, [pc, #12]	; (ac7c <_data_copy+0x14>)
    ac6e:	1a12      	subs	r2, r2, r0
    ac70:	f7f5 bc98 	b.w	5a4 <memcpy>
    ac74:	20004dc0 	.word	0x20004dc0
    ac78:	20005184 	.word	0x20005184
    ac7c:	0000c780 	.word	0x0000c780

0000ac80 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    ac80:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    ac82:	2002      	movs	r0, #2
    ac84:	f7ff ff54 	bl	ab30 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    ac88:	4908      	ldr	r1, [pc, #32]	; (acac <bg_thread_main+0x2c>)
    ac8a:	4809      	ldr	r0, [pc, #36]	; (acb0 <bg_thread_main+0x30>)
    ac8c:	f7f6 fc50 	bl	1530 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    ac90:	2003      	movs	r0, #3
    ac92:	f7ff ff4d 	bl	ab30 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
    ac96:	f000 fe37 	bl	b908 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    ac9a:	f7f5 fcd3 	bl	644 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    ac9e:	4a05      	ldr	r2, [pc, #20]	; (acb4 <bg_thread_main+0x34>)
    aca0:	7a13      	ldrb	r3, [r2, #8]
    aca2:	f023 0301 	bic.w	r3, r3, #1
    aca6:	7213      	strb	r3, [r2, #8]
    aca8:	bd08      	pop	{r3, pc}
    acaa:	bf00      	nop
    acac:	0000c734 	.word	0x0000c734
    acb0:	0000c750 	.word	0x0000c750
    acb4:	20001ccc 	.word	0x20001ccc

0000acb8 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    acb8:	b580      	push	{r7, lr}
    acba:	b086      	sub	sp, #24
    acbc:	4e32      	ldr	r6, [pc, #200]	; (ad88 <_Cstart+0xd0>)
    acbe:	af06      	add	r7, sp, #24
	_IntLibInit();
    acc0:	f7f5 ff1e 	bl	b00 <_IntLibInit>
    acc4:	2324      	movs	r3, #36	; 0x24
    acc6:	199a      	adds	r2, r3, r6
	list->head = (sys_dnode_t *)list;
    acc8:	519a      	str	r2, [r3, r6]
    acca:	3308      	adds	r3, #8
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
    accc:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
	list->tail = (sys_dnode_t *)list;
    acd0:	6052      	str	r2, [r2, #4]
    acd2:	d1f8      	bne.n	acc6 <_Cstart+0xe>
	_ready_q.cache = _main_thread;
    acd4:	4d2d      	ldr	r5, [pc, #180]	; (ad8c <_Cstart+0xd4>)
	_setup_new_thread(_main_thread, _main_stack,
    acd6:	f8df 80dc 	ldr.w	r8, [pc, #220]	; adb4 <_Cstart+0xfc>
	_ready_q.cache = _main_thread;
    acda:	61f5      	str	r5, [r6, #28]
	_setup_new_thread(_main_thread, _main_stack,
    acdc:	2400      	movs	r4, #0
    acde:	f04f 0901 	mov.w	r9, #1
    ace2:	4643      	mov	r3, r8
    ace4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ace8:	4929      	ldr	r1, [pc, #164]	; (ad90 <_Cstart+0xd8>)
    acea:	f8cd 9010 	str.w	r9, [sp, #16]
    acee:	4628      	mov	r0, r5
    acf0:	9403      	str	r4, [sp, #12]
    acf2:	9402      	str	r4, [sp, #8]
    acf4:	9401      	str	r4, [sp, #4]
    acf6:	9400      	str	r4, [sp, #0]
    acf8:	f000 fdbe 	bl	b878 <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    acfc:	7a6b      	ldrb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
    acfe:	4628      	mov	r0, r5
    ad00:	f023 0304 	bic.w	r3, r3, #4
    ad04:	726b      	strb	r3, [r5, #9]
    ad06:	f000 f97d 	bl	b004 <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
    ad0a:	230f      	movs	r3, #15
    ad0c:	9303      	str	r3, [sp, #12]
    ad0e:	4921      	ldr	r1, [pc, #132]	; (ad94 <_Cstart+0xdc>)
    ad10:	f8cd 9010 	str.w	r9, [sp, #16]
    ad14:	9402      	str	r4, [sp, #8]
    ad16:	9401      	str	r4, [sp, #4]
    ad18:	9400      	str	r4, [sp, #0]
    ad1a:	4b1f      	ldr	r3, [pc, #124]	; (ad98 <_Cstart+0xe0>)
    ad1c:	481f      	ldr	r0, [pc, #124]	; (ad9c <_Cstart+0xe4>)
    ad1e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    ad22:	f000 fda9 	bl	b878 <_setup_new_thread>
    ad26:	4b1d      	ldr	r3, [pc, #116]	; (ad9c <_Cstart+0xe4>)
    ad28:	4a1c      	ldr	r2, [pc, #112]	; (ad9c <_Cstart+0xe4>)
    ad2a:	7a5b      	ldrb	r3, [r3, #9]
    ad2c:	f023 0304 	bic.w	r3, r3, #4
    ad30:	7253      	strb	r3, [r2, #9]
	_add_thread_to_ready_q(thr);
    ad32:	4610      	mov	r0, r2
    ad34:	f000 f966 	bl	b004 <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
    ad38:	4b19      	ldr	r3, [pc, #100]	; (ada0 <_Cstart+0xe8>)
    ad3a:	6133      	str	r3, [r6, #16]
	list->tail = (sys_dnode_t *)list;
    ad3c:	6173      	str	r3, [r6, #20]
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
    ad3e:	4b19      	ldr	r3, [pc, #100]	; (ada4 <_Cstart+0xec>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    ad40:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ad44:	4b18      	ldr	r3, [pc, #96]	; (ada8 <_Cstart+0xf0>)
    ad46:	22e0      	movs	r2, #224	; 0xe0
    ad48:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    ad4c:	77dc      	strb	r4, [r3, #31]
    ad4e:	761c      	strb	r4, [r3, #24]
    ad50:	765c      	strb	r4, [r3, #25]
    ad52:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    ad54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ad56:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    ad5a:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    ad5c:	f7f6 f886 	bl	e6c <_FaultInit>
	_CpuIdleInit();
    ad60:	f7f6 f90e 	bl	f80 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    ad64:	4620      	mov	r0, r4
    ad66:	f7ff fee3 	bl	ab30 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    ad6a:	4648      	mov	r0, r9
    ad6c:	f7ff fee0 	bl	ab30 <_sys_device_do_config_level>
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    ad70:	4b0e      	ldr	r3, [pc, #56]	; (adac <_Cstart+0xf4>)

	_current = main_thread;
    ad72:	60b5      	str	r5, [r6, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    ad74:	f023 0307 	bic.w	r3, r3, #7

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
    ad78:	4a0d      	ldr	r2, [pc, #52]	; (adb0 <_Cstart+0xf8>)
    ad7a:	f383 8809 	msr	PSP, r3
    ad7e:	2100      	movs	r1, #0
    ad80:	f381 8811 	msr	BASEPRI, r1
    ad84:	4640      	mov	r0, r8
    ad86:	4710      	bx	r2
    ad88:	20001d34 	.word	0x20001d34
    ad8c:	20001ccc 	.word	0x20001ccc
    ad90:	20003c80 	.word	0x20003c80
    ad94:	20004080 	.word	0x20004080
    ad98:	0000abf5 	.word	0x0000abf5
    ad9c:	20001c64 	.word	0x20001c64
    ada0:	20001d44 	.word	0x20001d44
    ada4:	200049c0 	.word	0x200049c0
    ada8:	e000ed00 	.word	0xe000ed00
    adac:	20004080 	.word	0x20004080
    adb0:	0000b811 	.word	0x0000b811
    adb4:	0000ac81 	.word	0x0000ac81

0000adb8 <get_bit_ptr>:

/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct k_mem_pool *p, int level, int bn, u32_t **word)
{
    adb8:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
    adba:	7ac4      	ldrb	r4, [r0, #11]
    adbc:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
    adbe:	428c      	cmp	r4, r1
    adc0:	f04f 040c 	mov.w	r4, #12
    adc4:	bfb6      	itet	lt
    adc6:	4361      	mullt	r1, r4
    adc8:	fb04 0101 	mlage	r1, r4, r1, r0
    adcc:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
    adce:	2420      	movs	r4, #32
    add0:	fb92 f4f4 	sdiv	r4, r2, r4
    add4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    add8:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
    adda:	f002 001f 	and.w	r0, r2, #31
    adde:	bd10      	pop	{r4, pc}

0000ade0 <set_free_bit>:

static void set_free_bit(struct k_mem_pool *p, int level, int bn)
{
    ade0:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
    ade2:	ab01      	add	r3, sp, #4
    ade4:	f7ff ffe8 	bl	adb8 <get_bit_ptr>

	*word |= (1<<bit);
    ade8:	9a01      	ldr	r2, [sp, #4]
    adea:	2301      	movs	r3, #1
    adec:	fa03 f000 	lsl.w	r0, r3, r0
    adf0:	6813      	ldr	r3, [r2, #0]
    adf2:	4303      	orrs	r3, r0
    adf4:	6013      	str	r3, [r2, #0]
}
    adf6:	b003      	add	sp, #12
    adf8:	f85d fb04 	ldr.w	pc, [sp], #4

0000adfc <init_static_pools>:
		set_free_bit(p, 0, i);
	}
}

int init_static_pools(struct device *unused)
{
    adfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae00:	4c30      	ldr	r4, [pc, #192]	; (aec4 <init_static_pools+0xc8>)
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    ae02:	4e31      	ldr	r6, [pc, #196]	; (aec8 <init_static_pools+0xcc>)
		sys_dlist_init(&p->levels[i].free_list);
    ae04:	270c      	movs	r7, #12
    ae06:	f1a4 0510 	sub.w	r5, r4, #16
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    ae0a:	42b5      	cmp	r5, r6
    ae0c:	d302      	bcc.n	ae14 <init_static_pools+0x18>
		init_mem_pool(p);
	}

	return 0;
}
    ae0e:	2000      	movs	r0, #0
    ae10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    ae14:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    ae18:	f834 ec08 	ldrh.w	lr, [r4, #-8]
	u32_t *bits = p->buf + buflen;
    ae1c:	f854 0c10 	ldr.w	r0, [r4, #-16]
	list->head = (sys_dnode_t *)list;
    ae20:	6024      	str	r4, [r4, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    ae22:	fb03 fe0e 	mul.w	lr, r3, lr
	u32_t *bits = p->buf + buflen;
    ae26:	4470      	add	r0, lr
	list->tail = (sys_dnode_t *)list;
    ae28:	6064      	str	r4, [r4, #4]
	for (i = 0; i < p->n_levels; i++) {
    ae2a:	2100      	movs	r1, #0
			bits += (nblocks + 31)/32;
    ae2c:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
    ae30:	f814 2c06 	ldrb.w	r2, [r4, #-6]
    ae34:	4291      	cmp	r1, r2
    ae36:	db07      	blt.n	ae48 <init_static_pools+0x4c>
    ae38:	f04f 0800 	mov.w	r8, #0
	for (i = 0; i < p->n_max; i++) {
    ae3c:	f834 3c08 	ldrh.w	r3, [r4, #-8]
    ae40:	4598      	cmp	r8, r3
    ae42:	db24      	blt.n	ae8e <init_static_pools+0x92>
    ae44:	3418      	adds	r4, #24
    ae46:	e7de      	b.n	ae06 <init_static_pools+0xa>
		sys_dlist_init(&p->levels[i].free_list);
    ae48:	f854 ac04 	ldr.w	sl, [r4, #-4]
		int nblocks = buflen / sz;
    ae4c:	fbbe f2f3 	udiv	r2, lr, r3
		sys_dlist_init(&p->levels[i].free_list);
    ae50:	fb07 f901 	mul.w	r9, r7, r1
		if (nblocks < 32) {
    ae54:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
    ae56:	eb0a 0809 	add.w	r8, sl, r9
		sz = _ALIGN4(sz / 4);
    ae5a:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
    ae5e:	f108 0b04 	add.w	fp, r8, #4
			bits += (nblocks + 31)/32;
    ae62:	bfc8      	it	gt
    ae64:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
    ae66:	f103 0303 	add.w	r3, r3, #3
	list->head = (sys_dnode_t *)list;
    ae6a:	f8c8 b004 	str.w	fp, [r8, #4]
	list->tail = (sys_dnode_t *)list;
    ae6e:	f8c8 b008 	str.w	fp, [r8, #8]
			bits += (nblocks + 31)/32;
    ae72:	bfca      	itet	gt
    ae74:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
    ae78:	f804 1c05 	strble.w	r1, [r4, #-5]
			p->levels[i].bits_p = bits;
    ae7c:	f84a 0009 	strgt.w	r0, [sl, r9]
		sz = _ALIGN4(sz / 4);
    ae80:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
    ae84:	bfc8      	it	gt
    ae86:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
    ae8a:	3101      	adds	r1, #1
    ae8c:	e7d0      	b.n	ae30 <init_static_pools+0x34>
	return p->buf + lsz * block;
    ae8e:	f854 2c0c 	ldr.w	r2, [r4, #-12]
		sys_dlist_append(&p->levels[0].free_list, block);
    ae92:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return p->buf + lsz * block;
    ae96:	f854 0c10 	ldr.w	r0, [r4, #-16]
    ae9a:	fb02 f208 	mul.w	r2, r2, r8
		sys_dlist_append(&p->levels[0].free_list, block);
    ae9e:	f103 0e04 	add.w	lr, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    aea2:	f840 e002 	str.w	lr, [r0, r2]
	return p->buf + lsz * block;
    aea6:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
    aea8:	689a      	ldr	r2, [r3, #8]
    aeaa:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
    aeac:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
    aeae:	4628      	mov	r0, r5
    aeb0:	6011      	str	r1, [r2, #0]
	list->tail = node;
    aeb2:	6099      	str	r1, [r3, #8]
    aeb4:	4642      	mov	r2, r8
    aeb6:	2100      	movs	r1, #0
    aeb8:	f7ff ff92 	bl	ade0 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
    aebc:	f108 0801 	add.w	r8, r8, #1
    aec0:	e7bc      	b.n	ae3c <init_static_pools+0x40>
    aec2:	bf00      	nop
    aec4:	2000512c 	.word	0x2000512c
    aec8:	2000511c 	.word	0x2000511c

0000aecc <k_queue_init>:
	list->head = NULL;
    aecc:	2300      	movs	r3, #0
    aece:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
    aed0:	6043      	str	r3, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&queue->poll_events);
    aed2:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
    aed6:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    aed8:	60c3      	str	r3, [r0, #12]
    aeda:	4770      	bx	lr

0000aedc <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
    aedc:	b510      	push	{r4, lr}
    aede:	f04f 0320 	mov.w	r3, #32
    aee2:	f3ef 8411 	mrs	r4, BASEPRI
    aee6:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
    aeea:	b931      	cbnz	r1, aefa <k_queue_insert+0x1e>
	node->next = list->head;
    aeec:	6803      	ldr	r3, [r0, #0]
    aeee:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
    aef0:	6843      	ldr	r3, [r0, #4]
	list->head = node;
    aef2:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
    aef4:	b943      	cbnz	r3, af08 <k_queue_insert+0x2c>
		list->tail = node;
    aef6:	6042      	str	r2, [r0, #4]
    aef8:	e006      	b.n	af08 <k_queue_insert+0x2c>
	} else if (!prev->next) {
    aefa:	680b      	ldr	r3, [r1, #0]
	node->next = NULL;
    aefc:	6013      	str	r3, [r2, #0]
	} else if (!prev->next) {
    aefe:	b98b      	cbnz	r3, af24 <k_queue_insert+0x48>
	if (!list->tail) {
    af00:	6843      	ldr	r3, [r0, #4]
    af02:	b96b      	cbnz	r3, af20 <k_queue_insert+0x44>
		list->tail = node;
    af04:	6042      	str	r2, [r0, #4]
		list->head = node;
    af06:	6002      	str	r2, [r0, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
    af08:	2104      	movs	r1, #4
    af0a:	3008      	adds	r0, #8
    af0c:	f000 ff80 	bl	be10 <_handle_obj_poll_events>
#endif /* !CONFIG_POLL */

	sys_slist_insert(&queue->data_q, prev, data);

#if defined(CONFIG_POLL)
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    af10:	b150      	cbz	r0, af28 <k_queue_insert+0x4c>
	_update_time_slice_before_swap();
    af12:	f000 fa4b 	bl	b3ac <_update_time_slice_before_swap>
	return __swap(key);
    af16:	4620      	mov	r0, r4
		return;
	}
#endif /* CONFIG_POLL */

	irq_unlock(key);
}
    af18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    af1c:	f7f5 bdfc 	b.w	b18 <__swap>
		list->tail->next = node;
    af20:	601a      	str	r2, [r3, #0]
    af22:	e7e8      	b.n	aef6 <k_queue_insert+0x1a>
		prev->next = node;
    af24:	600a      	str	r2, [r1, #0]
    af26:	e7ef      	b.n	af08 <k_queue_insert+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    af28:	f384 8811 	msr	BASEPRI, r4
    af2c:	bd10      	pop	{r4, pc}

0000af2e <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, queue->data_q.tail, data);
    af2e:	460a      	mov	r2, r1
    af30:	6841      	ldr	r1, [r0, #4]
    af32:	f7ff bfd3 	b.w	aedc <k_queue_insert>

0000af36 <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, NULL, data);
    af36:	460a      	mov	r2, r1
    af38:	2100      	movs	r1, #0
    af3a:	f7ff bfcf 	b.w	aedc <k_queue_insert>

0000af3e <k_queue_append_list>:
}

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
    af3e:	b510      	push	{r4, lr}
	__asm__ volatile(
    af40:	f04f 0320 	mov.w	r3, #32
    af44:	f3ef 8411 	mrs	r4, BASEPRI
    af48:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
    af4c:	6843      	ldr	r3, [r0, #4]
    af4e:	b96b      	cbnz	r3, af6c <k_queue_append_list+0x2e>
		list->head = (sys_snode_t *)head;
    af50:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
    af52:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
    af54:	2104      	movs	r1, #4
    af56:	3008      	adds	r0, #8
    af58:	f000 ff5a 	bl	be10 <_handle_obj_poll_events>
			return;
		}
	}
#else
	sys_slist_append_list(&queue->data_q, head, tail);
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    af5c:	b140      	cbz	r0, af70 <k_queue_append_list+0x32>
	_update_time_slice_before_swap();
    af5e:	f000 fa25 	bl	b3ac <_update_time_slice_before_swap>
	return __swap(key);
    af62:	4620      	mov	r0, r4
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
    af64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    af68:	f7f5 bdd6 	b.w	b18 <__swap>
		list->tail->next = (sys_snode_t *)head;
    af6c:	6019      	str	r1, [r3, #0]
    af6e:	e7f0      	b.n	af52 <k_queue_append_list+0x14>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    af70:	f384 8811 	msr	BASEPRI, r4
    af74:	bd10      	pop	{r4, pc}

0000af76 <k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
    af76:	b530      	push	{r4, r5, lr}
    af78:	4604      	mov	r4, r0
    af7a:	b087      	sub	sp, #28
    af7c:	460d      	mov	r5, r1
	__asm__ volatile(
    af7e:	f04f 0220 	mov.w	r2, #32
    af82:	f3ef 8311 	mrs	r3, BASEPRI
    af86:	f382 8811 	msr	BASEPRI, r2
    af8a:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
    af8c:	b152      	cbz	r2, afa4 <k_queue_get+0x2e>
	list->head = node->next;
    af8e:	6811      	ldr	r1, [r2, #0]
    af90:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
    af92:	6840      	ldr	r0, [r0, #4]
    af94:	4282      	cmp	r2, r0
		list->tail = list->head;
    af96:	bf08      	it	eq
    af98:	6061      	streq	r1, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    af9a:	f383 8811 	msr	BASEPRI, r3
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
    af9e:	4610      	mov	r0, r2
    afa0:	b007      	add	sp, #28
    afa2:	bd30      	pop	{r4, r5, pc}
	if (timeout == K_NO_WAIT) {
    afa4:	b919      	cbnz	r1, afae <k_queue_get+0x38>
    afa6:	f383 8811 	msr	BASEPRI, r3
			return NULL;
    afaa:	2200      	movs	r2, #0
    afac:	e7f7      	b.n	af9e <k_queue_get+0x28>
    afae:	f383 8811 	msr	BASEPRI, r3
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
    afb2:	2104      	movs	r1, #4
    afb4:	4603      	mov	r3, r0
    afb6:	eb0d 0001 	add.w	r0, sp, r1
    afba:	f000 fe71 	bl	bca0 <k_poll_event_init>
		event.state = K_POLL_STATE_NOT_READY;
    afbe:	f89d 3011 	ldrb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
    afc2:	462a      	mov	r2, r5
		event.state = K_POLL_STATE_NOT_READY;
    afc4:	f36f 1307 	bfc	r3, #4, #4
		err = k_poll(&event, 1, timeout);
    afc8:	2101      	movs	r1, #1
    afca:	a801      	add	r0, sp, #4
		event.state = K_POLL_STATE_NOT_READY;
    afcc:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
    afd0:	f000 fe7a 	bl	bcc8 <k_poll>
		if (err) {
    afd4:	2800      	cmp	r0, #0
    afd6:	d1e8      	bne.n	afaa <k_queue_get+0x34>
	__asm__ volatile(
    afd8:	f04f 0320 	mov.w	r3, #32
    afdc:	f3ef 8111 	mrs	r1, BASEPRI
    afe0:	f383 8811 	msr	BASEPRI, r3
    afe4:	6822      	ldr	r2, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    afe6:	b12a      	cbz	r2, aff4 <k_queue_get+0x7e>
	if (list->tail == node) {
    afe8:	6860      	ldr	r0, [r4, #4]
	list->head = node->next;
    afea:	6813      	ldr	r3, [r2, #0]
    afec:	6023      	str	r3, [r4, #0]
	if (list->tail == node) {
    afee:	4282      	cmp	r2, r0
		list->tail = list->head;
    aff0:	bf08      	it	eq
    aff2:	6063      	streq	r3, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    aff4:	f381 8811 	msr	BASEPRI, r1
	} while (!val && timeout == K_FOREVER);
    aff8:	2a00      	cmp	r2, #0
    affa:	d1d0      	bne.n	af9e <k_queue_get+0x28>
    affc:	1c6b      	adds	r3, r5, #1
    affe:	d0de      	beq.n	afbe <k_queue_get+0x48>
    b000:	e7d3      	b.n	afaa <k_queue_get+0x34>
	...

0000b004 <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
    b004:	b530      	push	{r4, r5, lr}
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
    b006:	f990 300a 	ldrsb.w	r3, [r0, #10]
	*bmap |= _get_ready_q_prio_bit(prio);
    b00a:	4911      	ldr	r1, [pc, #68]	; (b050 <_add_thread_to_ready_q+0x4c>)
	return prio + _NUM_COOP_PRIO;
    b00c:	f103 0410 	add.w	r4, r3, #16
	return (prio + _NUM_COOP_PRIO) >> 5;
    b010:	1162      	asrs	r2, r4, #5
    b012:	3206      	adds	r2, #6
    b014:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    b018:	f004 051f 	and.w	r5, r4, #31
    b01c:	2401      	movs	r4, #1
    b01e:	40ac      	lsls	r4, r5
    b020:	6895      	ldr	r5, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    b022:	3314      	adds	r3, #20
	*bmap |= _get_ready_q_prio_bit(prio);
    b024:	432c      	orrs	r4, r5
	sys_dlist_t *q = &_ready_q.q[q_index];
    b026:	00db      	lsls	r3, r3, #3
	*bmap |= _get_ready_q_prio_bit(prio);
    b028:	6094      	str	r4, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    b02a:	1d1a      	adds	r2, r3, #4
    b02c:	440a      	add	r2, r1
	node->prev = list->tail;
    b02e:	440b      	add	r3, r1
	node->next = list;
    b030:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
    b032:	689a      	ldr	r2, [r3, #8]
    b034:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
    b036:	689a      	ldr	r2, [r3, #8]
    b038:	6010      	str	r0, [r2, #0]
	list->tail = node;
    b03a:	6098      	str	r0, [r3, #8]
	sys_dlist_append(q, &thread->base.k_q_node);

# ifndef CONFIG_SMP
	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
    b03c:	69cb      	ldr	r3, [r1, #28]
    b03e:	f990 400a 	ldrsb.w	r4, [r0, #10]
    b042:	f993 200a 	ldrsb.w	r2, [r3, #10]
    b046:	4294      	cmp	r4, r2
    b048:	bfa8      	it	ge
    b04a:	4618      	movge	r0, r3
    b04c:	61c8      	str	r0, [r1, #28]
    b04e:	bd30      	pop	{r4, r5, pc}
    b050:	20001d34 	.word	0x20001d34

0000b054 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b054:	7a42      	ldrb	r2, [r0, #9]
    b056:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    b05a:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b05e:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    b060:	d104      	bne.n	b06c <_ready_thread+0x18>
    b062:	6a03      	ldr	r3, [r0, #32]
    b064:	3301      	adds	r3, #1
    b066:	d101      	bne.n	b06c <_ready_thread+0x18>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    b068:	f7ff bfcc 	b.w	b004 <_add_thread_to_ready_q>
    b06c:	4770      	bx	lr
	...

0000b070 <_add_timeout>:
{
    b070:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    b072:	610b      	str	r3, [r1, #16]
	timeout->thread = thread;
    b074:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    b076:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
    b078:	bb13      	cbnz	r3, b0c0 <_add_timeout+0x50>
	__asm__ volatile(
    b07a:	f04f 0220 	mov.w	r2, #32
    b07e:	f3ef 8411 	mrs	r4, BASEPRI
    b082:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
    b086:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b08a:	610a      	str	r2, [r1, #16]
	if (thread) {
    b08c:	b180      	cbz	r0, b0b0 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
    b08e:	68ca      	ldr	r2, [r1, #12]
    b090:	b14a      	cbz	r2, b0a6 <_add_timeout+0x36>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    b092:	e890 0006 	ldmia.w	r0, {r1, r2}
    b096:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    b098:	6801      	ldr	r1, [r0, #0]
    b09a:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    b09c:	7a42      	ldrb	r2, [r0, #9]
		thread->base.timeout.wait_q = NULL;
    b09e:	61c3      	str	r3, [r0, #28]
    b0a0:	f022 0202 	bic.w	r2, r2, #2
    b0a4:	7242      	strb	r2, [r0, #9]
		_ready_thread(thread);
    b0a6:	f7ff ffd5 	bl	b054 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b0aa:	f384 8811 	msr	BASEPRI, r4
    b0ae:	bd70      	pop	{r4, r5, r6, pc}
    b0b0:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
    b0b4:	694b      	ldr	r3, [r1, #20]
    b0b6:	b32b      	cbz	r3, b104 <_add_timeout+0x94>
			timeout->func(timeout);
    b0b8:	4608      	mov	r0, r1
}
    b0ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
    b0be:	4718      	bx	r3
	return list->head == list;
    b0c0:	4a11      	ldr	r2, [pc, #68]	; (b108 <_add_timeout+0x98>)
    b0c2:	4610      	mov	r0, r2
    b0c4:	f850 3f10 	ldr.w	r3, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b0c8:	4283      	cmp	r3, r0
    b0ca:	d10c      	bne.n	b0e6 <_add_timeout+0x76>
	node->next = list;
    b0cc:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    b0ce:	6953      	ldr	r3, [r2, #20]
    b0d0:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    b0d2:	6953      	ldr	r3, [r2, #20]
    b0d4:	6019      	str	r1, [r3, #0]
	list->tail = node;
    b0d6:	6151      	str	r1, [r2, #20]
    b0d8:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
    b0da:	1b64      	subs	r4, r4, r5
    b0dc:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
    b0de:	6954      	ldr	r4, [r2, #20]
    b0e0:	42a3      	cmp	r3, r4
    b0e2:	d0f3      	beq.n	b0cc <_add_timeout+0x5c>
    b0e4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    b0e6:	2b00      	cmp	r3, #0
    b0e8:	d0f0      	beq.n	b0cc <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
    b0ea:	690c      	ldr	r4, [r1, #16]
    b0ec:	691d      	ldr	r5, [r3, #16]
    b0ee:	42ac      	cmp	r4, r5
    b0f0:	dcf3      	bgt.n	b0da <_add_timeout+0x6a>
		node->prev = insert_point->prev;
    b0f2:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    b0f4:	1b2c      	subs	r4, r5, r4
    b0f6:	611c      	str	r4, [r3, #16]
    b0f8:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    b0fa:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    b0fc:	685a      	ldr	r2, [r3, #4]
    b0fe:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    b100:	6059      	str	r1, [r3, #4]
    b102:	bd70      	pop	{r4, r5, r6, pc}
    b104:	bd70      	pop	{r4, r5, r6, pc}
    b106:	bf00      	nop
    b108:	20001d34 	.word	0x20001d34

0000b10c <_remove_thread_from_ready_q>:
	node->prev->next = node->next;
    b10c:	e890 000a 	ldmia.w	r0, {r1, r3}
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
    b110:	b510      	push	{r4, lr}
#if defined(CONFIG_MULTITHREADING) && !defined(CONFIG_SMP)
	int q_index = _get_ready_q_q_index(thread->base.prio);
    b112:	f990 200a 	ldrsb.w	r2, [r0, #10]
    b116:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
    b118:	6801      	ldr	r1, [r0, #0]
	sys_dlist_t *q = &_ready_q.q[q_index];
    b11a:	3214      	adds	r2, #20
    b11c:	604b      	str	r3, [r1, #4]
    b11e:	4b14      	ldr	r3, [pc, #80]	; (b170 <_remove_thread_from_ready_q+0x64>)
    b120:	00d2      	lsls	r2, r2, #3
    b122:	1d11      	adds	r1, r2, #4
	return list->head == list;
    b124:	441a      	add	r2, r3
    b126:	4419      	add	r1, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
    b128:	6852      	ldr	r2, [r2, #4]
    b12a:	428a      	cmp	r2, r1
    b12c:	d10f      	bne.n	b14e <_remove_thread_from_ready_q+0x42>
		clear_ready_q_prio_bit(thread->base.prio);
    b12e:	f990 100a 	ldrsb.w	r1, [r0, #10]
	return (prio + _NUM_COOP_PRIO) >> 5;
    b132:	3110      	adds	r1, #16
    b134:	114a      	asrs	r2, r1, #5
	*bmap &= ~_get_ready_q_prio_bit(prio);
    b136:	3206      	adds	r2, #6
    b138:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    b13c:	2401      	movs	r4, #1
    b13e:	f001 011f 	and.w	r1, r1, #31
    b142:	fa04 f101 	lsl.w	r1, r4, r1
    b146:	6894      	ldr	r4, [r2, #8]
    b148:	ea24 0401 	bic.w	r4, r4, r1
    b14c:	6094      	str	r4, [r2, #8]
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? get_ready_q_head() : *cache;
    b14e:	69da      	ldr	r2, [r3, #28]
    b150:	4290      	cmp	r0, r2
    b152:	d10b      	bne.n	b16c <_remove_thread_from_ready_q+0x60>
	return __builtin_ffs(op);
    b154:	6a19      	ldr	r1, [r3, #32]
    b156:	fa91 f2a1 	rbit	r2, r1
    b15a:	2900      	cmp	r1, #0
    b15c:	fab2 f282 	clz	r2, r2
    b160:	bf08      	it	eq
    b162:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    b166:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    b16a:	6a52      	ldr	r2, [r2, #36]	; 0x24
    b16c:	61da      	str	r2, [r3, #28]
    b16e:	bd10      	pop	{r4, pc}
    b170:	20001d34 	.word	0x20001d34

0000b174 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
    b174:	b430      	push	{r4, r5}
    b176:	680c      	ldr	r4, [r1, #0]
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    b178:	42a1      	cmp	r1, r4
    b17a:	bf08      	it	eq
    b17c:	2400      	moveq	r4, #0
    b17e:	b314      	cbz	r4, b1c6 <_pend_thread+0x52>
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
    b180:	f990 500a 	ldrsb.w	r5, [r0, #10]
    b184:	f994 300a 	ldrsb.w	r3, [r4, #10]
    b188:	429d      	cmp	r5, r3
    b18a:	da16      	bge.n	b1ba <_pend_thread+0x46>
		node->prev = insert_point->prev;
    b18c:	6863      	ldr	r3, [r4, #4]
    b18e:	6043      	str	r3, [r0, #4]
		node->next = insert_point;
    b190:	6004      	str	r4, [r0, #0]
		insert_point->prev->next = node;
    b192:	6863      	ldr	r3, [r4, #4]
    b194:	6018      	str	r0, [r3, #0]
		insert_point->prev = node;
    b196:	6060      	str	r0, [r4, #4]
	thread->base.thread_state |= _THREAD_PENDING;
    b198:	7a43      	ldrb	r3, [r0, #9]
    b19a:	f043 0302 	orr.w	r3, r3, #2
    b19e:	7243      	strb	r3, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
    b1a0:	1c53      	adds	r3, r2, #1
    b1a2:	d017      	beq.n	b1d4 <_pend_thread+0x60>
#ifdef _NON_OPTIMIZED_TICKS_PER_SEC
extern s32_t _ms_to_ticks(s32_t ms);
#else
static ALWAYS_INLINE s32_t _ms_to_ticks(s32_t ms)
{
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    b1a4:	3209      	adds	r2, #9
    b1a6:	230a      	movs	r3, #10
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
    b1a8:	bc30      	pop	{r4, r5}
    b1aa:	fbb2 f3f3 	udiv	r3, r2, r3
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    b1ae:	460a      	mov	r2, r1
    b1b0:	3301      	adds	r3, #1
    b1b2:	f100 0110 	add.w	r1, r0, #16
    b1b6:	f7ff bf5b 	b.w	b070 <_add_timeout>
	return (node == list->tail) ? NULL : node->next;
    b1ba:	684b      	ldr	r3, [r1, #4]
    b1bc:	429c      	cmp	r4, r3
    b1be:	d002      	beq.n	b1c6 <_pend_thread+0x52>
    b1c0:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    b1c2:	2c00      	cmp	r4, #0
    b1c4:	d1db      	bne.n	b17e <_pend_thread+0xa>
	node->next = list;
    b1c6:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    b1c8:	684b      	ldr	r3, [r1, #4]
    b1ca:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    b1cc:	684b      	ldr	r3, [r1, #4]
    b1ce:	6018      	str	r0, [r3, #0]
	list->tail = node;
    b1d0:	6048      	str	r0, [r1, #4]
    b1d2:	e7e1      	b.n	b198 <_pend_thread+0x24>
}
    b1d4:	bc30      	pop	{r4, r5}
    b1d6:	4770      	bx	lr

0000b1d8 <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
    b1d8:	b570      	push	{r4, r5, r6, lr}
	_remove_thread_from_ready_q(_current);
    b1da:	4c06      	ldr	r4, [pc, #24]	; (b1f4 <_pend_current_thread+0x1c>)
{
    b1dc:	460e      	mov	r6, r1
    b1de:	4605      	mov	r5, r0
	_remove_thread_from_ready_q(_current);
    b1e0:	68a0      	ldr	r0, [r4, #8]
    b1e2:	f7ff ff93 	bl	b10c <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
    b1e6:	4632      	mov	r2, r6
    b1e8:	4629      	mov	r1, r5
    b1ea:	68a0      	ldr	r0, [r4, #8]
}
    b1ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_pend_thread(_current, wait_q, timeout);
    b1f0:	f7ff bfc0 	b.w	b174 <_pend_thread>
    b1f4:	20001d34 	.word	0x20001d34

0000b1f8 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
    b1f8:	4a09      	ldr	r2, [pc, #36]	; (b220 <__must_switch_threads+0x28>)
    b1fa:	6a11      	ldr	r1, [r2, #32]

#ifdef CONFIG_KERNEL_DEBUG
	dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
    b1fc:	6892      	ldr	r2, [r2, #8]
    b1fe:	2900      	cmp	r1, #0
    b200:	fa91 f3a1 	rbit	r3, r1
    b204:	f992 000a 	ldrsb.w	r0, [r2, #10]
    b208:	fab3 f383 	clz	r3, r3
    b20c:	bf08      	it	eq
    b20e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
    b212:	3b10      	subs	r3, #16
#else
	return 0;
#endif
}
    b214:	4298      	cmp	r0, r3
    b216:	bfd4      	ite	le
    b218:	2000      	movle	r0, #0
    b21a:	2001      	movgt	r0, #1
    b21c:	4770      	bx	lr
    b21e:	bf00      	nop
    b220:	20001d34 	.word	0x20001d34

0000b224 <_reschedule_threads>:
{
    b224:	b510      	push	{r4, lr}
	return _is_preempt(_current) && __must_switch_threads();
    b226:	4b0a      	ldr	r3, [pc, #40]	; (b250 <_reschedule_threads+0x2c>)
    b228:	689b      	ldr	r3, [r3, #8]
    b22a:	895b      	ldrh	r3, [r3, #10]
    b22c:	2b7f      	cmp	r3, #127	; 0x7f
    b22e:	4604      	mov	r4, r0
    b230:	d802      	bhi.n	b238 <_reschedule_threads+0x14>
    b232:	f7ff ffe1 	bl	b1f8 <__must_switch_threads>
    b236:	b910      	cbnz	r0, b23e <_reschedule_threads+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b238:	f384 8811 	msr	BASEPRI, r4
    b23c:	bd10      	pop	{r4, pc}
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    b23e:	4b05      	ldr	r3, [pc, #20]	; (b254 <_reschedule_threads+0x30>)
    b240:	2200      	movs	r2, #0
    b242:	4620      	mov	r0, r4
}
    b244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
    b248:	601a      	str	r2, [r3, #0]
    b24a:	f7f5 bc65 	b.w	b18 <__swap>
    b24e:	bf00      	nop
    b250:	20001d34 	.word	0x20001d34
    b254:	20003444 	.word	0x20003444

0000b258 <k_sched_unlock>:
	__asm__ volatile(
    b258:	f04f 0320 	mov.w	r3, #32
    b25c:	f3ef 8011 	mrs	r0, BASEPRI
    b260:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
    b264:	4b03      	ldr	r3, [pc, #12]	; (b274 <k_sched_unlock+0x1c>)
    b266:	689a      	ldr	r2, [r3, #8]
    b268:	7ad3      	ldrb	r3, [r2, #11]
    b26a:	3301      	adds	r3, #1
    b26c:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
    b26e:	f7ff bfd9 	b.w	b224 <_reschedule_threads>
    b272:	bf00      	nop
    b274:	20001d34 	.word	0x20001d34

0000b278 <_move_thread_to_end_of_prio_q>:
	int q_index = _get_ready_q_q_index(thread->base.prio);
    b278:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
    b27c:	4a12      	ldr	r2, [pc, #72]	; (b2c8 <_move_thread_to_end_of_prio_q+0x50>)
{
    b27e:	b530      	push	{r4, r5, lr}
	sys_dlist_t *q = &_ready_q.q[q_index];
    b280:	3314      	adds	r3, #20
    b282:	00db      	lsls	r3, r3, #3
    b284:	1d19      	adds	r1, r3, #4
    b286:	4411      	add	r1, r2
	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
    b288:	684c      	ldr	r4, [r1, #4]
    b28a:	42a0      	cmp	r0, r4
    b28c:	d01b      	beq.n	b2c6 <_move_thread_to_end_of_prio_q+0x4e>
	node->prev->next = node->next;
    b28e:	6844      	ldr	r4, [r0, #4]
    b290:	6805      	ldr	r5, [r0, #0]
    b292:	6025      	str	r5, [r4, #0]
	node->next->prev = node->prev;
    b294:	6805      	ldr	r5, [r0, #0]
	node->prev = list->tail;
    b296:	4413      	add	r3, r2
	node->next->prev = node->prev;
    b298:	606c      	str	r4, [r5, #4]
	node->next = list;
    b29a:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    b29c:	6899      	ldr	r1, [r3, #8]
    b29e:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
    b2a0:	6899      	ldr	r1, [r3, #8]
    b2a2:	6008      	str	r0, [r1, #0]
	list->tail = node;
    b2a4:	6098      	str	r0, [r3, #8]
	*cache = *cache == thread ? get_ready_q_head() : *cache;
    b2a6:	69d3      	ldr	r3, [r2, #28]
    b2a8:	4298      	cmp	r0, r3
    b2aa:	d10b      	bne.n	b2c4 <_move_thread_to_end_of_prio_q+0x4c>
	return __builtin_ffs(op);
    b2ac:	6a11      	ldr	r1, [r2, #32]
    b2ae:	fa91 f3a1 	rbit	r3, r1
    b2b2:	2900      	cmp	r1, #0
    b2b4:	fab3 f383 	clz	r3, r3
    b2b8:	bf08      	it	eq
    b2ba:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    b2be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    b2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b2c4:	61d3      	str	r3, [r2, #28]
    b2c6:	bd30      	pop	{r4, r5, pc}
    b2c8:	20001d34 	.word	0x20001d34

0000b2cc <_impl_k_yield>:
{
    b2cc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    b2ce:	f04f 0320 	mov.w	r3, #32
    b2d2:	f3ef 8511 	mrs	r5, BASEPRI
    b2d6:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
    b2da:	4c09      	ldr	r4, [pc, #36]	; (b300 <_impl_k_yield+0x34>)
    b2dc:	68a0      	ldr	r0, [r4, #8]
    b2de:	f7ff ffcb 	bl	b278 <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
    b2e2:	68a2      	ldr	r2, [r4, #8]
    b2e4:	69e3      	ldr	r3, [r4, #28]
    b2e6:	429a      	cmp	r2, r3
    b2e8:	d102      	bne.n	b2f0 <_impl_k_yield+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b2ea:	f385 8811 	msr	BASEPRI, r5
    b2ee:	bd38      	pop	{r3, r4, r5, pc}
	_time_slice_elapsed = 0;
    b2f0:	4b04      	ldr	r3, [pc, #16]	; (b304 <_impl_k_yield+0x38>)
    b2f2:	2200      	movs	r2, #0
    b2f4:	601a      	str	r2, [r3, #0]
    b2f6:	4628      	mov	r0, r5
}
    b2f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b2fc:	f7f5 bc0c 	b.w	b18 <__swap>
    b300:	20001d34 	.word	0x20001d34
    b304:	20003444 	.word	0x20003444

0000b308 <_impl_k_sleep>:
{
    b308:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (duration == 0) {
    b30a:	b918      	cbnz	r0, b314 <_impl_k_sleep+0xc>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    b30c:	f7ff ffde 	bl	b2cc <_impl_k_yield>
}
    b310:	b003      	add	sp, #12
    b312:	bd30      	pop	{r4, r5, pc}
    b314:	230a      	movs	r3, #10
    b316:	3009      	adds	r0, #9
    b318:	fbb0 f0f3 	udiv	r0, r0, r3
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
    b31c:	3001      	adds	r0, #1
    b31e:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
    b320:	f04f 0320 	mov.w	r3, #32
    b324:	f3ef 8511 	mrs	r5, BASEPRI
    b328:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
    b32c:	4c08      	ldr	r4, [pc, #32]	; (b350 <_impl_k_sleep+0x48>)
    b32e:	68a0      	ldr	r0, [r4, #8]
    b330:	f7ff feec 	bl	b10c <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
    b334:	68a0      	ldr	r0, [r4, #8]
    b336:	9b01      	ldr	r3, [sp, #4]
    b338:	f100 0110 	add.w	r1, r0, #16
    b33c:	2200      	movs	r2, #0
    b33e:	f7ff fe97 	bl	b070 <_add_timeout>
	_time_slice_elapsed = 0;
    b342:	4b04      	ldr	r3, [pc, #16]	; (b354 <_impl_k_sleep+0x4c>)
    b344:	2200      	movs	r2, #0
    b346:	4628      	mov	r0, r5
    b348:	601a      	str	r2, [r3, #0]
    b34a:	f7f5 fbe5 	bl	b18 <__swap>
    b34e:	e7df      	b.n	b310 <_impl_k_sleep+0x8>
    b350:	20001d34 	.word	0x20001d34
    b354:	20003444 	.word	0x20003444

0000b358 <_impl_k_current_get>:
}
    b358:	4b01      	ldr	r3, [pc, #4]	; (b360 <_impl_k_current_get+0x8>)
    b35a:	6898      	ldr	r0, [r3, #8]
    b35c:	4770      	bx	lr
    b35e:	bf00      	nop
    b360:	20001d34 	.word	0x20001d34

0000b364 <_is_thread_time_slicing>:
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    b364:	4b0d      	ldr	r3, [pc, #52]	; (b39c <_is_thread_time_slicing+0x38>)
    b366:	681b      	ldr	r3, [r3, #0]
    b368:	2b00      	cmp	r3, #0
    b36a:	dd14      	ble.n	b396 <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
    b36c:	4b0c      	ldr	r3, [pc, #48]	; (b3a0 <_is_thread_time_slicing+0x3c>)
    b36e:	681b      	ldr	r3, [r3, #0]
    b370:	4298      	cmp	r0, r3
    b372:	d010      	beq.n	b396 <_is_thread_time_slicing+0x32>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    b374:	4a0b      	ldr	r2, [pc, #44]	; (b3a4 <_is_thread_time_slicing+0x40>)
    b376:	f990 300a 	ldrsb.w	r3, [r0, #10]
    b37a:	6812      	ldr	r2, [r2, #0]
    b37c:	4293      	cmp	r3, r2
    b37e:	db0a      	blt.n	b396 <_is_thread_time_slicing+0x32>
	return list->head != list->tail;
    b380:	f103 0214 	add.w	r2, r3, #20
    b384:	4b08      	ldr	r3, [pc, #32]	; (b3a8 <_is_thread_time_slicing+0x44>)
    b386:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    b38a:	6858      	ldr	r0, [r3, #4]
    b38c:	689b      	ldr	r3, [r3, #8]
    b38e:	1ac0      	subs	r0, r0, r3
    b390:	bf18      	it	ne
    b392:	2001      	movne	r0, #1
	return sys_dlist_has_multiple_nodes(q);
    b394:	4770      	bx	lr
		return 0;
    b396:	2000      	movs	r0, #0
}
    b398:	4770      	bx	lr
    b39a:	bf00      	nop
    b39c:	20001e58 	.word	0x20001e58
    b3a0:	0000c730 	.word	0x0000c730
    b3a4:	20001e5c 	.word	0x20001e5c
    b3a8:	20001d34 	.word	0x20001d34

0000b3ac <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
    b3ac:	4b01      	ldr	r3, [pc, #4]	; (b3b4 <_update_time_slice_before_swap+0x8>)
    b3ae:	2200      	movs	r2, #0
    b3b0:	601a      	str	r2, [r3, #0]
    b3b2:	4770      	bx	lr
    b3b4:	20003444 	.word	0x20003444

0000b3b8 <_unpend_first_thread>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    b3b8:	4a10      	ldr	r2, [pc, #64]	; (b3fc <_unpend_first_thread+0x44>)
    b3ba:	6812      	ldr	r2, [r2, #0]
}

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
    b3bc:	4603      	mov	r3, r0
    b3be:	6800      	ldr	r0, [r0, #0]
	if (_handling_timeouts) {
    b3c0:	b16a      	cbz	r2, b3de <_unpend_first_thread+0x26>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b3c2:	4283      	cmp	r3, r0
    b3c4:	bf08      	it	eq
    b3c6:	2000      	moveq	r0, #0
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    b3c8:	b908      	cbnz	r0, b3ce <_unpend_first_thread+0x16>
    b3ca:	2000      	movs	r0, #0
    b3cc:	4770      	bx	lr
			if (_is_thread_timeout_expired(thread)) {
    b3ce:	6a02      	ldr	r2, [r0, #32]
    b3d0:	3202      	adds	r2, #2
    b3d2:	d107      	bne.n	b3e4 <_unpend_first_thread+0x2c>
	return (node == list->tail) ? NULL : node->next;
    b3d4:	685a      	ldr	r2, [r3, #4]
    b3d6:	4290      	cmp	r0, r2
    b3d8:	d0f7      	beq.n	b3ca <_unpend_first_thread+0x12>
    b3da:	6800      	ldr	r0, [r0, #0]
    b3dc:	e7f4      	b.n	b3c8 <_unpend_first_thread+0x10>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b3de:	4283      	cmp	r3, r0
    b3e0:	d00a      	beq.n	b3f8 <_unpend_first_thread+0x40>
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
    b3e2:	b150      	cbz	r0, b3fa <_unpend_first_thread+0x42>
	node->prev->next = node->next;
    b3e4:	e890 000c 	ldmia.w	r0, {r2, r3}
    b3e8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    b3ea:	6802      	ldr	r2, [r0, #0]
    b3ec:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    b3ee:	7a43      	ldrb	r3, [r0, #9]
    b3f0:	f023 0302 	bic.w	r3, r3, #2
    b3f4:	7243      	strb	r3, [r0, #9]
    b3f6:	4770      	bx	lr
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b3f8:	4610      	mov	r0, r2
		_unpend_thread(thread);
	}

	return thread;
}
    b3fa:	4770      	bx	lr
    b3fc:	20003440 	.word	0x20003440

0000b400 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
    b400:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
    b404:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    b406:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    b408:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    b40a:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
    b40c:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
    b40e:	6143      	str	r3, [r0, #20]
    b410:	4770      	bx	lr
	...

0000b414 <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
    b414:	b570      	push	{r4, r5, r6, lr}
    b416:	4605      	mov	r5, r0
    b418:	f04f 0320 	mov.w	r3, #32
    b41c:	f3ef 8611 	mrs	r6, BASEPRI
    b420:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
    b424:	f7ff ffc8 	bl	b3b8 <_unpend_first_thread>
	if (!thread) {
    b428:	4604      	mov	r4, r0
    b42a:	b998      	cbnz	r0, b454 <_impl_k_sem_give+0x40>
	sem->count += (sem->count != sem->limit);
    b42c:	68ab      	ldr	r3, [r5, #8]
    b42e:	68ea      	ldr	r2, [r5, #12]
    b430:	429a      	cmp	r2, r3
    b432:	bf18      	it	ne
    b434:	3301      	addne	r3, #1
    b436:	60ab      	str	r3, [r5, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
    b438:	2102      	movs	r1, #2
    b43a:	f105 0010 	add.w	r0, r5, #16
    b43e:	f000 fce7 	bl	be10 <_handle_obj_poll_events>
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
    b442:	2800      	cmp	r0, #0
    b444:	d03b      	beq.n	b4be <_impl_k_sem_give+0xaa>
	_update_time_slice_before_swap();
    b446:	f7ff ffb1 	bl	b3ac <_update_time_slice_before_swap>
	return __swap(key);
    b44a:	4630      	mov	r0, r6
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
    b44c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b450:	f7f5 bb62 	b.w	b18 <__swap>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    b454:	6a01      	ldr	r1, [r0, #32]
	return _abort_timeout(&thread->base.timeout);
    b456:	f100 0210 	add.w	r2, r0, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    b45a:	1c48      	adds	r0, r1, #1
    b45c:	d00f      	beq.n	b47e <_impl_k_sem_give+0x6a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    b45e:	4b1b      	ldr	r3, [pc, #108]	; (b4cc <_impl_k_sem_give+0xb8>)
    b460:	695b      	ldr	r3, [r3, #20]
    b462:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
    b464:	bf1f      	itttt	ne
    b466:	6922      	ldrne	r2, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    b468:	6913      	ldrne	r3, [r2, #16]
    b46a:	185b      	addne	r3, r3, r1
    b46c:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
    b46e:	6963      	ldr	r3, [r4, #20]
    b470:	6922      	ldr	r2, [r4, #16]
    b472:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    b474:	6922      	ldr	r2, [r4, #16]
    b476:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    b478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b47c:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b47e:	7a63      	ldrb	r3, [r4, #9]
    b480:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
    b484:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b488:	7262      	strb	r2, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    b48a:	d102      	bne.n	b492 <_impl_k_sem_give+0x7e>
    b48c:	6a23      	ldr	r3, [r4, #32]
    b48e:	3301      	adds	r3, #1
    b490:	d018      	beq.n	b4c4 <_impl_k_sem_give+0xb0>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    b492:	2300      	movs	r3, #0
    b494:	6663      	str	r3, [r4, #100]	; 0x64
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b496:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    b49a:	2b0d      	cmp	r3, #13
    b49c:	d80f      	bhi.n	b4be <_impl_k_sem_give+0xaa>
    b49e:	b11b      	cbz	r3, b4a8 <_impl_k_sem_give+0x94>
    b4a0:	4b0b      	ldr	r3, [pc, #44]	; (b4d0 <_impl_k_sem_give+0xbc>)
    b4a2:	685b      	ldr	r3, [r3, #4]
    b4a4:	051b      	lsls	r3, r3, #20
    b4a6:	d50a      	bpl.n	b4be <_impl_k_sem_give+0xaa>
	return _is_preempt(_current) && __must_switch_threads();
    b4a8:	4b08      	ldr	r3, [pc, #32]	; (b4cc <_impl_k_sem_give+0xb8>)
    b4aa:	689b      	ldr	r3, [r3, #8]
    b4ac:	895b      	ldrh	r3, [r3, #10]
    b4ae:	2b7f      	cmp	r3, #127	; 0x7f
    b4b0:	d805      	bhi.n	b4be <_impl_k_sem_give+0xaa>
    b4b2:	f7ff fea1 	bl	b1f8 <__must_switch_threads>
    b4b6:	3000      	adds	r0, #0
    b4b8:	bf18      	it	ne
    b4ba:	2001      	movne	r0, #1
    b4bc:	e7c1      	b.n	b442 <_impl_k_sem_give+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b4be:	f386 8811 	msr	BASEPRI, r6
    b4c2:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
    b4c4:	4620      	mov	r0, r4
    b4c6:	f7ff fd9d 	bl	b004 <_add_thread_to_ready_q>
    b4ca:	e7e2      	b.n	b492 <_impl_k_sem_give+0x7e>
    b4cc:	20001d34 	.word	0x20001d34
    b4d0:	e000ed00 	.word	0xe000ed00

0000b4d4 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    b4d4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    b4d6:	f04f 0320 	mov.w	r3, #32
    b4da:	f3ef 8411 	mrs	r4, BASEPRI
    b4de:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
    b4e2:	6883      	ldr	r3, [r0, #8]
    b4e4:	b12b      	cbz	r3, b4f2 <_impl_k_sem_take+0x1e>
		sem->count--;
    b4e6:	3b01      	subs	r3, #1
    b4e8:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b4ea:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
    b4ee:	2000      	movs	r0, #0
    b4f0:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (timeout == K_NO_WAIT) {
    b4f2:	b921      	cbnz	r1, b4fe <_impl_k_sem_take+0x2a>
    b4f4:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return -EBUSY;
    b4f8:	f06f 000f 	mvn.w	r0, #15
    b4fc:	bd38      	pop	{r3, r4, r5, pc}
	}

	_pend_current_thread(&sem->wait_q, timeout);
    b4fe:	f7ff fe6b 	bl	b1d8 <_pend_current_thread>
	_update_time_slice_before_swap();
    b502:	f7ff ff53 	bl	b3ac <_update_time_slice_before_swap>
	return __swap(key);
    b506:	4620      	mov	r0, r4

	return _Swap(key);
}
    b508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b50c:	f7f5 bb04 	b.w	b18 <__swap>

0000b510 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
    b510:	4b03      	ldr	r3, [pc, #12]	; (b520 <_impl_k_uptime_get_32+0x10>)
    b512:	e9d3 0100 	ldrd	r0, r1, [r3]
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NON_OPTIMIZED_TICKS_PER_SEC
	return (MSEC_PER_SEC * (u64_t)ticks) / sys_clock_ticks_per_sec;
#else
	return (u64_t)ticks * _ms_per_tick;
    b516:	230a      	movs	r3, #10
    b518:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
    b51c:	4770      	bx	lr
    b51e:	bf00      	nop
    b520:	20003448 	.word	0x20003448

0000b524 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
    b524:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b528:	4607      	mov	r7, r0
	__asm__ volatile(
    b52a:	f04f 0320 	mov.w	r3, #32
    b52e:	f3ef 8011 	mrs	r0, BASEPRI
    b532:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
    b536:	4963      	ldr	r1, [pc, #396]	; (b6c4 <_nano_sys_clock_tick_announce+0x1a0>)
    b538:	e9d1 4500 	ldrd	r4, r5, [r1]
    b53c:	19e2      	adds	r2, r4, r7
    b53e:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
    b542:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b546:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
    b54a:	466e      	mov	r6, sp
    b54c:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
    b550:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
    b554:	f04f 0320 	mov.w	r3, #32
    b558:	f3ef 8011 	mrs	r0, BASEPRI
    b55c:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    b560:	4c59      	ldr	r4, [pc, #356]	; (b6c8 <_nano_sys_clock_tick_announce+0x1a4>)
    b562:	4621      	mov	r1, r4
    b564:	4602      	mov	r2, r0
    b566:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b56a:	428b      	cmp	r3, r1
    b56c:	d000      	beq.n	b570 <_nano_sys_clock_tick_announce+0x4c>
	if (!next) {
    b56e:	b9fb      	cbnz	r3, b5b0 <_nano_sys_clock_tick_announce+0x8c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b570:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
    b574:	68a0      	ldr	r0, [r4, #8]
    b576:	f7ff fef5 	bl	b364 <_is_thread_time_slicing>
    b57a:	b1b0      	cbz	r0, b5aa <_nano_sys_clock_tick_announce+0x86>
	_time_slice_elapsed += __ticks_to_ms(ticks);
    b57c:	4a53      	ldr	r2, [pc, #332]	; (b6cc <_nano_sys_clock_tick_announce+0x1a8>)
    b57e:	6811      	ldr	r1, [r2, #0]
    b580:	230a      	movs	r3, #10
    b582:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
    b586:	4b52      	ldr	r3, [pc, #328]	; (b6d0 <_nano_sys_clock_tick_announce+0x1ac>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
    b588:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
    b58a:	681b      	ldr	r3, [r3, #0]
    b58c:	429f      	cmp	r7, r3
    b58e:	db0c      	blt.n	b5aa <_nano_sys_clock_tick_announce+0x86>
		_time_slice_elapsed = 0;
    b590:	2300      	movs	r3, #0
    b592:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    b594:	f04f 0320 	mov.w	r3, #32
    b598:	f3ef 8511 	mrs	r5, BASEPRI
    b59c:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
    b5a0:	68a0      	ldr	r0, [r4, #8]
    b5a2:	f7ff fe69 	bl	b278 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b5a6:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
    b5aa:	b003      	add	sp, #12
    b5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
    b5b0:	4d48      	ldr	r5, [pc, #288]	; (b6d4 <_nano_sys_clock_tick_announce+0x1b0>)
    b5b2:	2101      	movs	r1, #1
    b5b4:	6029      	str	r1, [r5, #0]
    b5b6:	46ab      	mov	fp, r5
    b5b8:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = 0;
    b5ba:	f04f 0e00 	mov.w	lr, #0
			timeout->delta_ticks_from_prev = _EXPIRED;
    b5be:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
    b5c2:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
    b5c4:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
    b5c6:	bfaa      	itet	ge
    b5c8:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
    b5cc:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
    b5d0:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
    b5d4:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    b5d6:	6960      	ldr	r0, [r4, #20]
		if (timeout->delta_ticks_from_prev == 0) {
    b5d8:	691d      	ldr	r5, [r3, #16]
    b5da:	4298      	cmp	r0, r3
    b5dc:	bf14      	ite	ne
    b5de:	6818      	ldrne	r0, [r3, #0]
    b5e0:	2000      	moveq	r0, #0
    b5e2:	b9d5      	cbnz	r5, b61a <_nano_sys_clock_tick_announce+0xf6>
	node->prev->next = node->next;
    b5e4:	e893 0220 	ldmia.w	r3, {r5, r9}
    b5e8:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
    b5ec:	681d      	ldr	r5, [r3, #0]
    b5ee:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
    b5f2:	9d00      	ldr	r5, [sp, #0]
	node->prev = list;
    b5f4:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
    b5f8:	9d00      	ldr	r5, [sp, #0]
	list->head = node;
    b5fa:	9300      	str	r3, [sp, #0]
	list->head->prev = node;
    b5fc:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
    b5fe:	f8c3 c010 	str.w	ip, [r3, #16]
    b602:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
    b606:	f04f 0320 	mov.w	r3, #32
    b60a:	f3ef 8211 	mrs	r2, BASEPRI
    b60e:	f383 8811 	msr	BASEPRI, r3
	while (next) {
    b612:	4603      	mov	r3, r0
    b614:	2800      	cmp	r0, #0
    b616:	d1d4      	bne.n	b5c2 <_nano_sys_clock_tick_announce+0x9e>
    b618:	e001      	b.n	b61e <_nano_sys_clock_tick_announce+0xfa>
		} else if (ticks <= 0) {
    b61a:	2900      	cmp	r1, #0
    b61c:	dcf1      	bgt.n	b602 <_nano_sys_clock_tick_announce+0xde>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b61e:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    b622:	9800      	ldr	r0, [sp, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b624:	42b0      	cmp	r0, r6
    b626:	d103      	bne.n	b630 <_nano_sys_clock_tick_announce+0x10c>
	_handling_timeouts = 0;
    b628:	2300      	movs	r3, #0
    b62a:	f8cb 3000 	str.w	r3, [fp]
    b62e:	e7a1      	b.n	b574 <_nano_sys_clock_tick_announce+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    b630:	2800      	cmp	r0, #0
    b632:	d0f9      	beq.n	b628 <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
    b634:	9b01      	ldr	r3, [sp, #4]
    b636:	4298      	cmp	r0, r3
    b638:	d101      	bne.n	b63e <_nano_sys_clock_tick_announce+0x11a>
    b63a:	2600      	movs	r6, #0
    b63c:	e000      	b.n	b640 <_nano_sys_clock_tick_announce+0x11c>
    b63e:	6806      	ldr	r6, [r0, #0]
	timeout->delta_ticks_from_prev = _INACTIVE;
    b640:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
    b644:	f04f 0900 	mov.w	r9, #0
	node->prev->next = node->next;
    b648:	e890 000c 	ldmia.w	r0, {r2, r3}
    b64c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    b64e:	6802      	ldr	r2, [r0, #0]
    b650:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
    b652:	6883      	ldr	r3, [r0, #8]
	__asm__ volatile(
    b654:	f04f 0220 	mov.w	r2, #32
    b658:	f3ef 8a11 	mrs	sl, BASEPRI
    b65c:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
    b660:	f8c0 8010 	str.w	r8, [r0, #16]
	if (thread) {
    b664:	b1fb      	cbz	r3, b6a6 <_nano_sys_clock_tick_announce+0x182>
	if (timeout_obj->wait_q) {
    b666:	68c2      	ldr	r2, [r0, #12]
    b668:	b152      	cbz	r2, b680 <_nano_sys_clock_tick_announce+0x15c>
	node->prev->next = node->next;
    b66a:	6859      	ldr	r1, [r3, #4]
    b66c:	681a      	ldr	r2, [r3, #0]
    b66e:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
    b670:	681a      	ldr	r2, [r3, #0]
    b672:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    b674:	7a5a      	ldrb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
    b676:	f8c3 901c 	str.w	r9, [r3, #28]
    b67a:	f022 0202 	bic.w	r2, r2, #2
    b67e:	725a      	strb	r2, [r3, #9]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b680:	7a5a      	ldrb	r2, [r3, #9]
    b682:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    b686:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b68a:	7259      	strb	r1, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    b68c:	d102      	bne.n	b694 <_nano_sys_clock_tick_announce+0x170>
    b68e:	6a1a      	ldr	r2, [r3, #32]
    b690:	3201      	adds	r2, #1
    b692:	d013      	beq.n	b6bc <_nano_sys_clock_tick_announce+0x198>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b694:	f38a 8811 	msr	BASEPRI, sl
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    b698:	2e00      	cmp	r6, #0
    b69a:	d0c5      	beq.n	b628 <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
    b69c:	9b01      	ldr	r3, [sp, #4]
    b69e:	42b3      	cmp	r3, r6
    b6a0:	d108      	bne.n	b6b4 <_nano_sys_clock_tick_announce+0x190>
    b6a2:	2300      	movs	r3, #0
    b6a4:	e007      	b.n	b6b6 <_nano_sys_clock_tick_announce+0x192>
    b6a6:	f38a 8811 	msr	BASEPRI, sl
		if (timeout->func) {
    b6aa:	6943      	ldr	r3, [r0, #20]
    b6ac:	2b00      	cmp	r3, #0
    b6ae:	d0f3      	beq.n	b698 <_nano_sys_clock_tick_announce+0x174>
			timeout->func(timeout);
    b6b0:	4798      	blx	r3
    b6b2:	e7f1      	b.n	b698 <_nano_sys_clock_tick_announce+0x174>
    b6b4:	6833      	ldr	r3, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    b6b6:	4630      	mov	r0, r6
    b6b8:	461e      	mov	r6, r3
    b6ba:	e7c5      	b.n	b648 <_nano_sys_clock_tick_announce+0x124>
		_add_thread_to_ready_q(thread);
    b6bc:	4618      	mov	r0, r3
    b6be:	f7ff fca1 	bl	b004 <_add_thread_to_ready_q>
    b6c2:	e7e7      	b.n	b694 <_nano_sys_clock_tick_announce+0x170>
    b6c4:	20003448 	.word	0x20003448
    b6c8:	20001d34 	.word	0x20001d34
    b6cc:	20003444 	.word	0x20003444
    b6d0:	20001e58 	.word	0x20001e58
    b6d4:	20003440 	.word	0x20003440

0000b6d8 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
    b6d8:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    b6da:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b6de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b6e2:	4903      	ldr	r1, [pc, #12]	; (b6f0 <k_sys_work_q_init+0x18>)
    b6e4:	4803      	ldr	r0, [pc, #12]	; (b6f4 <k_sys_work_q_init+0x1c>)
    b6e6:	f000 f985 	bl	b9f4 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
    b6ea:	2000      	movs	r0, #0
    b6ec:	bd08      	pop	{r3, pc}
    b6ee:	bf00      	nop
    b6f0:	200049c0 	.word	0x200049c0
    b6f4:	20003450 	.word	0x20003450

0000b6f8 <_is_thread_ready>:
	return !(_is_thread_prevented_from_running(thread) ||
    b6f8:	7a43      	ldrb	r3, [r0, #9]
    b6fa:	06da      	lsls	r2, r3, #27
    b6fc:	d104      	bne.n	b708 <_is_thread_ready+0x10>
    b6fe:	6a00      	ldr	r0, [r0, #32]
    b700:	1c43      	adds	r3, r0, #1
    b702:	4258      	negs	r0, r3
    b704:	4158      	adcs	r0, r3
    b706:	4770      	bx	lr
    b708:	2000      	movs	r0, #0
}
    b70a:	4770      	bx	lr

0000b70c <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    b70c:	6903      	ldr	r3, [r0, #16]
    b70e:	1c5a      	adds	r2, r3, #1
    b710:	d011      	beq.n	b736 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    b712:	4a0a      	ldr	r2, [pc, #40]	; (b73c <_abort_timeout+0x30>)
    b714:	6952      	ldr	r2, [r2, #20]
    b716:	4290      	cmp	r0, r2
    b718:	bf1f      	itttt	ne
    b71a:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    b71c:	690a      	ldrne	r2, [r1, #16]
    b71e:	189b      	addne	r3, r3, r2
    b720:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
    b722:	e890 000c 	ldmia.w	r0, {r2, r3}
    b726:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    b728:	6802      	ldr	r2, [r0, #0]
    b72a:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    b72c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b730:	6103      	str	r3, [r0, #16]
	return 0;
    b732:	2000      	movs	r0, #0
    b734:	4770      	bx	lr
		return _INACTIVE;
    b736:	4618      	mov	r0, r3
}
    b738:	4770      	bx	lr
    b73a:	bf00      	nop
    b73c:	20001d34 	.word	0x20001d34

0000b740 <schedule_new_thread.part.13>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
    b740:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
    b742:	f04f 0320 	mov.w	r3, #32
    b746:	f3ef 8611 	mrs	r6, BASEPRI
    b74a:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    b74e:	4a19      	ldr	r2, [pc, #100]	; (b7b4 <schedule_new_thread.part.13+0x74>)
	timeout->thread = thread;
    b750:	6180      	str	r0, [r0, #24]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    b752:	230a      	movs	r3, #10
    b754:	3109      	adds	r1, #9
    b756:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
    b75a:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    b75c:	6201      	str	r1, [r0, #32]
    b75e:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
    b760:	2300      	movs	r3, #0
    b762:	61c3      	str	r3, [r0, #28]
    b764:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b768:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    b76a:	f100 0510 	add.w	r5, r0, #16
    b76e:	d108      	bne.n	b782 <schedule_new_thread.part.13+0x42>
	node->next = list;
    b770:	6101      	str	r1, [r0, #16]
	node->prev = list->tail;
    b772:	6953      	ldr	r3, [r2, #20]
    b774:	6143      	str	r3, [r0, #20]
	list->tail->next = node;
    b776:	6953      	ldr	r3, [r2, #20]
    b778:	601d      	str	r5, [r3, #0]
	list->tail = node;
    b77a:	6155      	str	r5, [r2, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b77c:	f386 8811 	msr	BASEPRI, r6
    b780:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    b782:	2b00      	cmp	r3, #0
    b784:	d0f4      	beq.n	b770 <schedule_new_thread.part.13+0x30>
    b786:	f8d2 e014 	ldr.w	lr, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
    b78a:	6a04      	ldr	r4, [r0, #32]
    b78c:	691f      	ldr	r7, [r3, #16]
    b78e:	42bc      	cmp	r4, r7
    b790:	dc08      	bgt.n	b7a4 <schedule_new_thread.part.13+0x64>
		node->prev = insert_point->prev;
    b792:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    b794:	1b3c      	subs	r4, r7, r4
    b796:	611c      	str	r4, [r3, #16]
    b798:	6142      	str	r2, [r0, #20]
		node->next = insert_point;
    b79a:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
    b79c:	685a      	ldr	r2, [r3, #4]
    b79e:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
    b7a0:	605d      	str	r5, [r3, #4]
    b7a2:	e7eb      	b.n	b77c <schedule_new_thread.part.13+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
    b7a4:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
    b7a6:	4573      	cmp	r3, lr
    b7a8:	6204      	str	r4, [r0, #32]
    b7aa:	d0e1      	beq.n	b770 <schedule_new_thread.part.13+0x30>
    b7ac:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    b7ae:	2b00      	cmp	r3, #0
    b7b0:	d1eb      	bne.n	b78a <schedule_new_thread.part.13+0x4a>
    b7b2:	e7dd      	b.n	b770 <schedule_new_thread.part.13+0x30>
    b7b4:	20001d34 	.word	0x20001d34

0000b7b8 <k_is_in_isr>:
    b7b8:	f3ef 8005 	mrs	r0, IPSR
    b7bc:	280d      	cmp	r0, #13
    b7be:	d807      	bhi.n	b7d0 <k_is_in_isr+0x18>
    b7c0:	b138      	cbz	r0, b7d2 <k_is_in_isr+0x1a>
    b7c2:	4b04      	ldr	r3, [pc, #16]	; (b7d4 <k_is_in_isr+0x1c>)
    b7c4:	6858      	ldr	r0, [r3, #4]
    b7c6:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    b7ca:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    b7ce:	4770      	bx	lr
    b7d0:	2001      	movs	r0, #1
}
    b7d2:	4770      	bx	lr
    b7d4:	e000ed00 	.word	0xe000ed00

0000b7d8 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
    b7d8:	4b02      	ldr	r3, [pc, #8]	; (b7e4 <_is_thread_essential+0xc>)
    b7da:	689b      	ldr	r3, [r3, #8]
    b7dc:	7a18      	ldrb	r0, [r3, #8]
}
    b7de:	f000 0001 	and.w	r0, r0, #1
    b7e2:	4770      	bx	lr
    b7e4:	20001d34 	.word	0x20001d34

0000b7e8 <k_busy_wait>:
{
    b7e8:	4601      	mov	r1, r0
    b7ea:	b538      	push	{r3, r4, r5, lr}
		(u64_t)sys_clock_hw_cycles_per_sec /
    b7ec:	4a07      	ldr	r2, [pc, #28]	; (b80c <k_busy_wait+0x24>)
    b7ee:	2300      	movs	r3, #0
    b7f0:	03c0      	lsls	r0, r0, #15
    b7f2:	0c49      	lsrs	r1, r1, #17
    b7f4:	f7f4 fd0e 	bl	214 <__aeabi_uldivmod>
    b7f8:	4604      	mov	r4, r0
	u32_t start_cycles = k_cycle_get_32();
    b7fa:	f7f6 fbff 	bl	1ffc <_timer_cycle_get_32>
    b7fe:	4605      	mov	r5, r0
		u32_t current_cycles = k_cycle_get_32();
    b800:	f7f6 fbfc 	bl	1ffc <_timer_cycle_get_32>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
    b804:	1b40      	subs	r0, r0, r5
    b806:	4284      	cmp	r4, r0
    b808:	d8fa      	bhi.n	b800 <k_busy_wait+0x18>
}
    b80a:	bd38      	pop	{r3, r4, r5, pc}
    b80c:	000f4240 	.word	0x000f4240

0000b810 <_thread_entry>:
{
    b810:	b508      	push	{r3, lr}
    b812:	4604      	mov	r4, r0
    b814:	4608      	mov	r0, r1
    b816:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    b818:	461a      	mov	r2, r3
    b81a:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    b81c:	f7ff fd9c 	bl	b358 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    b820:	f7f5 fc2a 	bl	1078 <_impl_k_thread_abort>

0000b824 <_impl_k_thread_start>:
{
    b824:	b510      	push	{r4, lr}
    b826:	4601      	mov	r1, r0
	__asm__ volatile(
    b828:	f04f 0320 	mov.w	r3, #32
    b82c:	f3ef 8411 	mrs	r4, BASEPRI
    b830:	f383 8811 	msr	BASEPRI, r3
    b834:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
    b836:	075a      	lsls	r2, r3, #29
    b838:	d402      	bmi.n	b840 <_impl_k_thread_start+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b83a:	f384 8811 	msr	BASEPRI, r4
    b83e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b840:	f023 0304 	bic.w	r3, r3, #4
    b844:	7243      	strb	r3, [r0, #9]
	if (_is_thread_ready(thread)) {
    b846:	f7ff ff57 	bl	b6f8 <_is_thread_ready>
    b84a:	2800      	cmp	r0, #0
    b84c:	d0f5      	beq.n	b83a <_impl_k_thread_start+0x16>
		_add_thread_to_ready_q(thread);
    b84e:	4608      	mov	r0, r1
    b850:	f7ff fbd8 	bl	b004 <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
    b854:	4b07      	ldr	r3, [pc, #28]	; (b874 <_impl_k_thread_start+0x50>)
    b856:	689b      	ldr	r3, [r3, #8]
    b858:	895b      	ldrh	r3, [r3, #10]
    b85a:	2b7f      	cmp	r3, #127	; 0x7f
    b85c:	d8ed      	bhi.n	b83a <_impl_k_thread_start+0x16>
    b85e:	f7ff fccb 	bl	b1f8 <__must_switch_threads>
    b862:	2800      	cmp	r0, #0
    b864:	d0e9      	beq.n	b83a <_impl_k_thread_start+0x16>
	_update_time_slice_before_swap();
    b866:	f7ff fda1 	bl	b3ac <_update_time_slice_before_swap>
	return __swap(key);
    b86a:	4620      	mov	r0, r4
}
    b86c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b870:	f7f5 b952 	b.w	b18 <__swap>
    b874:	20001d34 	.word	0x20001d34

0000b878 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
    b878:	b410      	push	{r4}

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
    b87a:	bc10      	pop	{r4}
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b87c:	f7f5 bb58 	b.w	f30 <_new_thread>

0000b880 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    b880:	b570      	push	{r4, r5, r6, lr}
    b882:	b086      	sub	sp, #24
    b884:	4604      	mov	r4, r0
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b886:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    b888:	9604      	str	r6, [sp, #16]
    b88a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    b88c:	9603      	str	r6, [sp, #12]
    b88e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    b890:	9602      	str	r6, [sp, #8]
    b892:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
    b894:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b896:	9601      	str	r6, [sp, #4]
    b898:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    b89a:	9600      	str	r6, [sp, #0]
    b89c:	f7f5 fb48 	bl	f30 <_new_thread>
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
			  prio, options);

	if (delay != K_FOREVER) {
    b8a0:	1c6b      	adds	r3, r5, #1
    b8a2:	d003      	beq.n	b8ac <_impl_k_thread_create+0x2c>
	if (delay == 0) {
    b8a4:	b92d      	cbnz	r5, b8b2 <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
    b8a6:	4620      	mov	r0, r4
    b8a8:	f7ff ffbc 	bl	b824 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
    b8ac:	4620      	mov	r0, r4
    b8ae:	b006      	add	sp, #24
    b8b0:	bd70      	pop	{r4, r5, r6, pc}
    b8b2:	4629      	mov	r1, r5
    b8b4:	4620      	mov	r0, r4
    b8b6:	f7ff ff43 	bl	b740 <schedule_new_thread.part.13>
    b8ba:	e7f7      	b.n	b8ac <_impl_k_thread_create+0x2c>

0000b8bc <_k_thread_single_abort>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
    b8bc:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    b8be:	b510      	push	{r4, lr}
    b8c0:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    b8c2:	b103      	cbz	r3, b8c6 <_k_thread_single_abort+0xa>
		thread->fn_abort();
    b8c4:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
    b8c6:	4620      	mov	r0, r4
    b8c8:	f7ff ff16 	bl	b6f8 <_is_thread_ready>
    b8cc:	b138      	cbz	r0, b8de <_k_thread_single_abort+0x22>
		_remove_thread_from_ready_q(thread);
    b8ce:	4620      	mov	r0, r4
    b8d0:	f7ff fc1c 	bl	b10c <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
    b8d4:	7a63      	ldrb	r3, [r4, #9]
    b8d6:	f043 0308 	orr.w	r3, r3, #8
    b8da:	7263      	strb	r3, [r4, #9]
    b8dc:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
    b8de:	7a63      	ldrb	r3, [r4, #9]
    b8e0:	079b      	lsls	r3, r3, #30
    b8e2:	d508      	bpl.n	b8f6 <_k_thread_single_abort+0x3a>
	node->prev->next = node->next;
    b8e4:	e894 000c 	ldmia.w	r4, {r2, r3}
    b8e8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    b8ea:	6822      	ldr	r2, [r4, #0]
    b8ec:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    b8ee:	7a63      	ldrb	r3, [r4, #9]
    b8f0:	f023 0302 	bic.w	r3, r3, #2
    b8f4:	7263      	strb	r3, [r4, #9]
		if (_is_thread_timeout_active(thread)) {
    b8f6:	6a23      	ldr	r3, [r4, #32]
    b8f8:	3301      	adds	r3, #1
    b8fa:	d0eb      	beq.n	b8d4 <_k_thread_single_abort+0x18>
	return _abort_timeout(&thread->base.timeout);
    b8fc:	f104 0010 	add.w	r0, r4, #16
    b900:	f7ff ff04 	bl	b70c <_abort_timeout>
    b904:	e7e6      	b.n	b8d4 <_k_thread_single_abort+0x18>
	...

0000b908 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
    b908:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    b90a:	4f21      	ldr	r7, [pc, #132]	; (b990 <_init_static_threads+0x88>)
    b90c:	4d21      	ldr	r5, [pc, #132]	; (b994 <_init_static_threads+0x8c>)
{
    b90e:	b087      	sub	sp, #28
    b910:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    b912:	42bd      	cmp	r5, r7
    b914:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    b918:	d314      	bcc.n	b944 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
    b91a:	4b1f      	ldr	r3, [pc, #124]	; (b998 <_init_static_threads+0x90>)
    b91c:	689a      	ldr	r2, [r3, #8]
    b91e:	7ad3      	ldrb	r3, [r2, #11]
    b920:	3b01      	subs	r3, #1
    b922:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
    b924:	f04f 0320 	mov.w	r3, #32
    b928:	f3ef 8511 	mrs	r5, BASEPRI
    b92c:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    b930:	4c18      	ldr	r4, [pc, #96]	; (b994 <_init_static_threads+0x8c>)
    b932:	42b4      	cmp	r4, r6
    b934:	d31f      	bcc.n	b976 <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b936:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
    b93a:	b007      	add	sp, #28
    b93c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
    b940:	f7ff bc8a 	b.w	b258 <k_sched_unlock>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b944:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    b948:	9304      	str	r3, [sp, #16]
    b94a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    b94e:	9303      	str	r3, [sp, #12]
    b950:	f854 3c14 	ldr.w	r3, [r4, #-20]
    b954:	9302      	str	r3, [sp, #8]
    b956:	f854 3c18 	ldr.w	r3, [r4, #-24]
    b95a:	9301      	str	r3, [sp, #4]
    b95c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    b960:	9300      	str	r3, [sp, #0]
    b962:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
    b966:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    b968:	f7f5 fae2 	bl	f30 <_new_thread>
		thread_data->init_thread->init_data = thread_data;
    b96c:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    b970:	64dd      	str	r5, [r3, #76]	; 0x4c
    b972:	4625      	mov	r5, r4
    b974:	e7cd      	b.n	b912 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
    b976:	6a61      	ldr	r1, [r4, #36]	; 0x24
    b978:	1c4b      	adds	r3, r1, #1
    b97a:	d003      	beq.n	b984 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
    b97c:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
    b97e:	b919      	cbnz	r1, b988 <_init_static_threads+0x80>
    b980:	f7ff ff50 	bl	b824 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    b984:	342c      	adds	r4, #44	; 0x2c
    b986:	e7d4      	b.n	b932 <_init_static_threads+0x2a>
    b988:	f7ff feda 	bl	b740 <schedule_new_thread.part.13>
    b98c:	e7fa      	b.n	b984 <_init_static_threads+0x7c>
    b98e:	bf00      	nop
    b990:	200050e8 	.word	0x200050e8
    b994:	200050e8 	.word	0x200050e8
    b998:	20001d34 	.word	0x20001d34

0000b99c <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    b99c:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
    b99e:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    b9a0:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
    b9a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
    b9a6:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
    b9a8:	72c3      	strb	r3, [r0, #11]
    b9aa:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
    b9ac:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
    b9ae:	6183      	str	r3, [r0, #24]
	t->func = func;
    b9b0:	6243      	str	r3, [r0, #36]	; 0x24
    b9b2:	4770      	bx	lr

0000b9b4 <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    b9b4:	b510      	push	{r4, lr}
    b9b6:	4604      	mov	r4, r0

	while (1) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
    b9b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b9bc:	4620      	mov	r0, r4
    b9be:	f7ff fada 	bl	af76 <k_queue_get>
		if (!work) {
    b9c2:	4603      	mov	r3, r0
    b9c4:	2800      	cmp	r0, #0
    b9c6:	d0f7      	beq.n	b9b8 <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b9c8:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
    b9ca:	6842      	ldr	r2, [r0, #4]
    b9cc:	f3bf 8f5b 	dmb	ish
    b9d0:	e853 1f00 	ldrex	r1, [r3]
    b9d4:	f021 0e01 	bic.w	lr, r1, #1
    b9d8:	e843 ec00 	strex	ip, lr, [r3]
    b9dc:	f1bc 0f00 	cmp.w	ip, #0
    b9e0:	d1f6      	bne.n	b9d0 <work_q_main+0x1c>
    b9e2:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    b9e6:	07cb      	lsls	r3, r1, #31
    b9e8:	d500      	bpl.n	b9ec <work_q_main+0x38>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    b9ea:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    b9ec:	f7ff fc6e 	bl	b2cc <_impl_k_yield>
    b9f0:	e7e2      	b.n	b9b8 <work_q_main+0x4>
	...

0000b9f4 <k_work_q_start>:
	}
}

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
    b9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b9f6:	b087      	sub	sp, #28
    b9f8:	4604      	mov	r4, r0
    b9fa:	461f      	mov	r7, r3
    b9fc:	460d      	mov	r5, r1
    b9fe:	4616      	mov	r6, r2
	k_queue_init(&work_q->queue);
    ba00:	f7ff fa64 	bl	aecc <k_queue_init>

    ba04:	2000      	movs	r0, #0
    ba06:	9005      	str	r0, [sp, #20]
    ba08:	9004      	str	r0, [sp, #16]
    ba0a:	9002      	str	r0, [sp, #8]
    ba0c:	9001      	str	r0, [sp, #4]
    ba0e:	9703      	str	r7, [sp, #12]
    ba10:	9400      	str	r4, [sp, #0]
    ba12:	4b04      	ldr	r3, [pc, #16]	; (ba24 <k_work_q_start+0x30>)
    ba14:	4632      	mov	r2, r6
    ba16:	4629      	mov	r1, r5
    ba18:	f104 0010 	add.w	r0, r4, #16
    ba1c:	f7ff ff30 	bl	b880 <_impl_k_thread_create>
	k_thread_create(&work_q->thread, stack, stack_size, work_q_main,
			work_q, 0, 0, prio, 0, 0);
	_k_object_init(work_q);
}
    ba20:	b007      	add	sp, #28
    ba22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ba24:	0000b9b5 	.word	0x0000b9b5

0000ba28 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ba28:	7a42      	ldrb	r2, [r0, #9]
    ba2a:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    ba2e:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ba32:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    ba34:	d104      	bne.n	ba40 <_ready_thread+0x18>
    ba36:	6a03      	ldr	r3, [r0, #32]
    ba38:	3301      	adds	r3, #1
    ba3a:	d101      	bne.n	ba40 <_ready_thread+0x18>
		_add_thread_to_ready_q(thread);
    ba3c:	f7ff bae2 	b.w	b004 <_add_thread_to_ready_q>
    ba40:	4770      	bx	lr

0000ba42 <_unpend_thread>:
	node->prev->next = node->next;
    ba42:	e890 000c 	ldmia.w	r0, {r2, r3}
    ba46:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    ba48:	6802      	ldr	r2, [r0, #0]
    ba4a:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    ba4c:	7a43      	ldrb	r3, [r0, #9]
    ba4e:	f023 0302 	bic.w	r3, r3, #2
    ba52:	7243      	strb	r3, [r0, #9]
    ba54:	4770      	bx	lr
	...

0000ba58 <_add_timeout.constprop.9>:
static inline void _add_timeout(struct k_thread *thread,
    ba58:	b430      	push	{r4, r5}
	timeout->thread = thread;
    ba5a:	2400      	movs	r4, #0
static inline void _add_timeout(struct k_thread *thread,
    ba5c:	4603      	mov	r3, r0
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    ba5e:	6102      	str	r2, [r0, #16]
	timeout->thread = thread;
    ba60:	6084      	str	r4, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    ba62:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
    ba64:	b972      	cbnz	r2, ba84 <_add_timeout.constprop.9+0x2c>
	__asm__ volatile(
    ba66:	f04f 0120 	mov.w	r1, #32
    ba6a:	f3ef 8211 	mrs	r2, BASEPRI
    ba6e:	f381 8811 	msr	BASEPRI, r1
	timeout->delta_ticks_from_prev = _INACTIVE;
    ba72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ba76:	6101      	str	r1, [r0, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    ba78:	f382 8811 	msr	BASEPRI, r2
		if (timeout->func) {
    ba7c:	6943      	ldr	r3, [r0, #20]
    ba7e:	b16b      	cbz	r3, ba9c <_add_timeout.constprop.9+0x44>
}
    ba80:	bc30      	pop	{r4, r5}
			timeout->func(timeout);
    ba82:	4718      	bx	r3
	return list->head == list;
    ba84:	4911      	ldr	r1, [pc, #68]	; (bacc <_add_timeout.constprop.9+0x74>)
    ba86:	4608      	mov	r0, r1
    ba88:	f850 2f10 	ldr.w	r2, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ba8c:	4282      	cmp	r2, r0
    ba8e:	d10d      	bne.n	baac <_add_timeout.constprop.9+0x54>
	node->next = list;
    ba90:	6018      	str	r0, [r3, #0]
	node->prev = list->tail;
    ba92:	694a      	ldr	r2, [r1, #20]
    ba94:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
    ba96:	694a      	ldr	r2, [r1, #20]
    ba98:	6013      	str	r3, [r2, #0]
	list->tail = node;
    ba9a:	614b      	str	r3, [r1, #20]
}
    ba9c:	bc30      	pop	{r4, r5}
    ba9e:	4770      	bx	lr
		*delta -= in_q->delta_ticks_from_prev;
    baa0:	1b64      	subs	r4, r4, r5
    baa2:	611c      	str	r4, [r3, #16]
	return (node == list->tail) ? NULL : node->next;
    baa4:	694c      	ldr	r4, [r1, #20]
    baa6:	42a2      	cmp	r2, r4
    baa8:	d0f2      	beq.n	ba90 <_add_timeout.constprop.9+0x38>
    baaa:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    baac:	2a00      	cmp	r2, #0
    baae:	d0ef      	beq.n	ba90 <_add_timeout.constprop.9+0x38>
		if (*delta <= in_q->delta_ticks_from_prev) {
    bab0:	691c      	ldr	r4, [r3, #16]
    bab2:	6915      	ldr	r5, [r2, #16]
    bab4:	42ac      	cmp	r4, r5
    bab6:	dcf3      	bgt.n	baa0 <_add_timeout.constprop.9+0x48>
		node->prev = insert_point->prev;
    bab8:	6851      	ldr	r1, [r2, #4]
			in_q->delta_ticks_from_prev -= *delta;
    baba:	1b2c      	subs	r4, r5, r4
    babc:	6114      	str	r4, [r2, #16]
    babe:	6059      	str	r1, [r3, #4]
		node->next = insert_point;
    bac0:	601a      	str	r2, [r3, #0]
		insert_point->prev->next = node;
    bac2:	6851      	ldr	r1, [r2, #4]
    bac4:	600b      	str	r3, [r1, #0]
		insert_point->prev = node;
    bac6:	6053      	str	r3, [r2, #4]
    bac8:	e7e8      	b.n	ba9c <_add_timeout.constprop.9+0x44>
    baca:	bf00      	nop
    bacc:	20001d34 	.word	0x20001d34

0000bad0 <_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
    bad0:	6a83      	ldr	r3, [r0, #40]	; 0x28
    bad2:	2b00      	cmp	r3, #0
{
    bad4:	b570      	push	{r4, r5, r6, lr}
    bad6:	4604      	mov	r4, r0
    bad8:	f100 0518 	add.w	r5, r0, #24
	if (timer->period > 0) {
    badc:	dd0b      	ble.n	baf6 <_timer_expiration_handler+0x26>
	__asm__ volatile(
    bade:	f04f 0320 	mov.w	r3, #32
    bae2:	f3ef 8611 	mrs	r6, BASEPRI
    bae6:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
    baea:	6a82      	ldr	r2, [r0, #40]	; 0x28
    baec:	4629      	mov	r1, r5
    baee:	f7ff ffb3 	bl	ba58 <_add_timeout.constprop.9>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    baf2:	f386 8811 	msr	BASEPRI, r6
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
    baf6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    baf8:	3301      	adds	r3, #1
    bafa:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
    bafc:	6a23      	ldr	r3, [r4, #32]
    bafe:	b10b      	cbz	r3, bb04 <_timer_expiration_handler+0x34>
		timer->expiry_fn(timer);
    bb00:	4620      	mov	r0, r4
    bb02:	4798      	blx	r3
	return list->head == list;
    bb04:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bb06:	42ac      	cmp	r4, r5
    bb08:	d010      	beq.n	bb2c <_timer_expiration_handler+0x5c>
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);

	if (!thread) {
    bb0a:	b17c      	cbz	r4, bb2c <_timer_expiration_handler+0x5c>
	 * calling _unpend_thread() because a) this is the only place a thread
	 * can be taken off this pend queue, and b) the only place a thread
	 * can be put on the pend queue is at thread level, which of course
	 * cannot interrupt the current context.
	 */
	_unpend_thread(thread);
    bb0c:	4620      	mov	r0, r4
    bb0e:	f7ff ff98 	bl	ba42 <_unpend_thread>
	__asm__ volatile(
    bb12:	f04f 0320 	mov.w	r3, #32
    bb16:	f3ef 8511 	mrs	r5, BASEPRI
    bb1a:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();
	_ready_thread(thread);
    bb1e:	4620      	mov	r0, r4
    bb20:	f7ff ff82 	bl	ba28 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bb24:	f385 8811 	msr	BASEPRI, r5
    bb28:	2300      	movs	r3, #0
    bb2a:	6663      	str	r3, [r4, #100]	; 0x64
    bb2c:	bd70      	pop	{r4, r5, r6, pc}

0000bb2e <sys_dlist_remove>:
	node->prev->next = node->next;
    bb2e:	e890 000c 	ldmia.w	r0, {r2, r3}
    bb32:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    bb34:	6802      	ldr	r2, [r0, #0]
    bb36:	6053      	str	r3, [r2, #4]
    bb38:	4770      	bx	lr

0000bb3a <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
    bb3a:	b570      	push	{r4, r5, r6, lr}
    bb3c:	2414      	movs	r4, #20
    bb3e:	4615      	mov	r5, r2
    bb40:	fb04 0401 	mla	r4, r4, r1, r0
	event->poller = NULL;
    bb44:	2600      	movs	r6, #0
	for (; last_registered >= 0; last_registered--) {
    bb46:	2900      	cmp	r1, #0
    bb48:	da00      	bge.n	bb4c <clear_event_registrations+0x12>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
    bb4a:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
    bb4c:	7b63      	ldrb	r3, [r4, #13]
	event->poller = NULL;
    bb4e:	60a6      	str	r6, [r4, #8]
	switch (event->type) {
    bb50:	f003 030f 	and.w	r3, r3, #15
    bb54:	2b02      	cmp	r3, #2
    bb56:	d003      	beq.n	bb60 <clear_event_registrations+0x26>
    bb58:	2b04      	cmp	r3, #4
    bb5a:	d001      	beq.n	bb60 <clear_event_registrations+0x26>
    bb5c:	2b01      	cmp	r3, #1
    bb5e:	d102      	bne.n	bb66 <clear_event_registrations+0x2c>
		sys_dlist_remove(&event->_node);
    bb60:	4620      	mov	r0, r4
    bb62:	f7ff ffe4 	bl	bb2e <sys_dlist_remove>
    bb66:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
    bb6a:	f04f 0320 	mov.w	r3, #32
    bb6e:	f3ef 8511 	mrs	r5, BASEPRI
    bb72:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
    bb76:	3901      	subs	r1, #1
    bb78:	3c14      	subs	r4, #20
    bb7a:	e7e4      	b.n	bb46 <clear_event_registrations+0xc>

0000bb7c <signal_poll_event>:
}

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
    bb7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*must_reschedule = 0;
    bb7e:	2300      	movs	r3, #0
    bb80:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
    bb82:	6883      	ldr	r3, [r0, #8]
{
    bb84:	4605      	mov	r5, r0
    bb86:	460e      	mov	r6, r1
    bb88:	4617      	mov	r7, r2
	if (!event->poller) {
    bb8a:	2b00      	cmp	r3, #0
    bb8c:	d049      	beq.n	bc22 <signal_poll_event+0xa6>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
    bb8e:	6819      	ldr	r1, [r3, #0]
	thread->base.thread_state &= ~states;
    bb90:	7a4b      	ldrb	r3, [r1, #9]
    bb92:	f023 0220 	bic.w	r2, r3, #32

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
    bb96:	0798      	lsls	r0, r3, #30
    bb98:	724a      	strb	r2, [r1, #9]
    bb9a:	d542      	bpl.n	bc22 <signal_poll_event+0xa6>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
    bb9c:	6a0b      	ldr	r3, [r1, #32]
    bb9e:	3302      	adds	r3, #2
    bba0:	d04a      	beq.n	bc38 <signal_poll_event+0xbc>
	sys_dlist_remove(&thread->base.k_q_node);
    bba2:	4608      	mov	r0, r1
    bba4:	f7ff ffc3 	bl	bb2e <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    bba8:	7a4b      	ldrb	r3, [r1, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    bbaa:	6a0c      	ldr	r4, [r1, #32]
    bbac:	f023 0302 	bic.w	r3, r3, #2
    bbb0:	1c62      	adds	r2, r4, #1
    bbb2:	724b      	strb	r3, [r1, #9]
	return _abort_timeout(&thread->base.timeout);
    bbb4:	f101 0010 	add.w	r0, r1, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    bbb8:	d00c      	beq.n	bbd4 <signal_poll_event+0x58>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    bbba:	4b21      	ldr	r3, [pc, #132]	; (bc40 <signal_poll_event+0xc4>)
    bbbc:	695b      	ldr	r3, [r3, #20]
    bbbe:	4298      	cmp	r0, r3
	return (node == list->tail) ? NULL : node->next;
    bbc0:	bf1f      	itttt	ne
    bbc2:	690a      	ldrne	r2, [r1, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    bbc4:	6913      	ldrne	r3, [r2, #16]
    bbc6:	191b      	addne	r3, r3, r4
    bbc8:	6113      	strne	r3, [r2, #16]
	sys_dlist_remove(&timeout->node);
    bbca:	f7ff ffb0 	bl	bb2e <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
    bbce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bbd2:	620b      	str	r3, [r1, #32]
	return !(_is_thread_prevented_from_running(thread) ||
    bbd4:	7a48      	ldrb	r0, [r1, #9]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
    bbd6:	2e00      	cmp	r6, #0
    bbd8:	bf0c      	ite	eq
    bbda:	f06f 0303 	mvneq.w	r3, #3
    bbde:	2300      	movne	r3, #0
    bbe0:	f010 041f 	ands.w	r4, r0, #31
    bbe4:	664b      	str	r3, [r1, #100]	; 0x64
    bbe6:	d11c      	bne.n	bc22 <signal_poll_event+0xa6>
    bbe8:	6a0b      	ldr	r3, [r1, #32]
    bbea:	3301      	adds	r3, #1
    bbec:	d119      	bne.n	bc22 <signal_poll_event+0xa6>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
    bbee:	4608      	mov	r0, r1
    bbf0:	f7ff fa08 	bl	b004 <_add_thread_to_ready_q>
    bbf4:	f3ef 8305 	mrs	r3, IPSR
    bbf8:	2b0d      	cmp	r3, #13
    bbfa:	d81b      	bhi.n	bc34 <signal_poll_event+0xb8>
    bbfc:	b123      	cbz	r3, bc08 <signal_poll_event+0x8c>
    bbfe:	4b11      	ldr	r3, [pc, #68]	; (bc44 <signal_poll_event+0xc8>)
    bc00:	6858      	ldr	r0, [r3, #4]
    bc02:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
    bc06:	d00b      	beq.n	bc20 <signal_poll_event+0xa4>
	return _is_preempt(_current) && __must_switch_threads();
    bc08:	4b0d      	ldr	r3, [pc, #52]	; (bc40 <signal_poll_event+0xc4>)
    bc0a:	689b      	ldr	r3, [r3, #8]
    bc0c:	895b      	ldrh	r3, [r3, #10]
    bc0e:	2b7f      	cmp	r3, #127	; 0x7f
    bc10:	d901      	bls.n	bc16 <signal_poll_event+0x9a>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    bc12:	2000      	movs	r0, #0
    bc14:	e004      	b.n	bc20 <signal_poll_event+0xa4>
    bc16:	f7ff faef 	bl	b1f8 <__must_switch_threads>
    bc1a:	3000      	adds	r0, #0
    bc1c:	bf18      	it	ne
    bc1e:	2001      	movne	r0, #1
    bc20:	6038      	str	r0, [r7, #0]
	event->state |= state;
    bc22:	7b6b      	ldrb	r3, [r5, #13]
    bc24:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
    bc28:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
    bc2c:	2000      	movs	r0, #0
	event->state |= state;
    bc2e:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
    bc30:	60a8      	str	r0, [r5, #8]

ready_event:
	set_event_ready(event, state);
	return 0;
    bc32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    bc34:	4620      	mov	r0, r4
    bc36:	e7f3      	b.n	bc20 <signal_poll_event+0xa4>
		return -EAGAIN;
    bc38:	f06f 000a 	mvn.w	r0, #10
    bc3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bc3e:	bf00      	nop
    bc40:	20001d34 	.word	0x20001d34
    bc44:	e000ed00 	.word	0xe000ed00

0000bc48 <add_event>:
	return list->head == list;
    bc48:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    bc4a:	4298      	cmp	r0, r3
{
    bc4c:	b530      	push	{r4, r5, lr}
    bc4e:	d00a      	beq.n	bc66 <add_event+0x1e>
    bc50:	6844      	ldr	r4, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
    bc52:	b144      	cbz	r4, bc66 <add_event+0x1e>
    bc54:	68a5      	ldr	r5, [r4, #8]
    bc56:	6812      	ldr	r2, [r2, #0]
    bc58:	682d      	ldr	r5, [r5, #0]
    bc5a:	f992 200a 	ldrsb.w	r2, [r2, #10]
    bc5e:	f995 500a 	ldrsb.w	r5, [r5, #10]
    bc62:	4295      	cmp	r5, r2
    bc64:	da17      	bge.n	bc96 <add_event+0x4e>
	node->next = list;
    bc66:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    bc68:	6843      	ldr	r3, [r0, #4]
    bc6a:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    bc6c:	6843      	ldr	r3, [r0, #4]
    bc6e:	6019      	str	r1, [r3, #0]
	list->tail = node;
    bc70:	6041      	str	r1, [r0, #4]
    bc72:	bd30      	pop	{r4, r5, pc}
		if (_is_t1_higher_prio_than_t2(poller->thread,
    bc74:	689d      	ldr	r5, [r3, #8]
    bc76:	682d      	ldr	r5, [r5, #0]
    bc78:	f995 500a 	ldrsb.w	r5, [r5, #10]
    bc7c:	4295      	cmp	r5, r2
    bc7e:	dd06      	ble.n	bc8e <add_event+0x46>
		node->prev = insert_point->prev;
    bc80:	685a      	ldr	r2, [r3, #4]
    bc82:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    bc84:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    bc86:	685a      	ldr	r2, [r3, #4]
    bc88:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    bc8a:	6059      	str	r1, [r3, #4]
    bc8c:	bd30      	pop	{r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    bc8e:	42a3      	cmp	r3, r4
    bc90:	d003      	beq.n	bc9a <add_event+0x52>
    bc92:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    bc94:	b10b      	cbz	r3, bc9a <add_event+0x52>
    bc96:	2b00      	cmp	r3, #0
    bc98:	d1ec      	bne.n	bc74 <add_event+0x2c>
	node->prev = list->tail;
    bc9a:	e881 0011 	stmia.w	r1, {r0, r4}
    bc9e:	e7e5      	b.n	bc6c <add_event+0x24>

0000bca0 <k_poll_event_init>:
{
    bca0:	b530      	push	{r4, r5, lr}
	event->type = type;
    bca2:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
    bca4:	6103      	str	r3, [r0, #16]
	event->type = type;
    bca6:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
    bcaa:	7b81      	ldrb	r1, [r0, #14]
    bcac:	f362 0100 	bfi	r1, r2, #0, #1
    bcb0:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
    bcb2:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
    bcb4:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
    bcb6:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
    bcba:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
    bcbe:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
    bcc0:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
    bcc2:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
    bcc4:	bd30      	pop	{r4, r5, pc}
	...

0000bcc8 <k_poll>:
{
    bcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bccc:	b087      	sub	sp, #28
    bcce:	4680      	mov	r8, r0
    bcd0:	9101      	str	r1, [sp, #4]
    bcd2:	4691      	mov	r9, r2
    bcd4:	f04f 0320 	mov.w	r3, #32
    bcd8:	f3ef 8111 	mrs	r1, BASEPRI
    bcdc:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
    bce0:	4d4a      	ldr	r5, [pc, #296]	; (be0c <k_poll+0x144>)
    bce2:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= states;
    bce4:	7a53      	ldrb	r3, [r2, #9]
    bce6:	f043 0320 	orr.w	r3, r3, #32
    bcea:	7253      	strb	r3, [r2, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bcec:	f381 8811 	msr	BASEPRI, r1
	struct _poller poller = { .thread = _current };
    bcf0:	f10d 0a18 	add.w	sl, sp, #24
    bcf4:	68aa      	ldr	r2, [r5, #8]
    bcf6:	f84a 2d0c 	str.w	r2, [sl, #-12]!
    bcfa:	4604      	mov	r4, r0
	for (int ii = 0; ii < num_events; ii++) {
    bcfc:	2700      	movs	r7, #0
	int last_registered = -1, rc;
    bcfe:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
    bd02:	9b01      	ldr	r3, [sp, #4]
    bd04:	429f      	cmp	r7, r3
    bd06:	db15      	blt.n	bd34 <k_poll+0x6c>
	__asm__ volatile(
    bd08:	f04f 0320 	mov.w	r3, #32
    bd0c:	f3ef 8711 	mrs	r7, BASEPRI
    bd10:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
    bd14:	68aa      	ldr	r2, [r5, #8]
    bd16:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
    bd18:	f013 0420 	ands.w	r4, r3, #32
    bd1c:	d144      	bne.n	bda8 <k_poll+0xe0>
		clear_event_registrations(events, last_registered, key);
    bd1e:	463a      	mov	r2, r7
    bd20:	4631      	mov	r1, r6
    bd22:	4640      	mov	r0, r8
    bd24:	f7ff ff09 	bl	bb3a <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bd28:	f387 8811 	msr	BASEPRI, r7
}
    bd2c:	4620      	mov	r0, r4
    bd2e:	b007      	add	sp, #28
    bd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
    bd34:	f04f 0220 	mov.w	r2, #32
    bd38:	f3ef 8b11 	mrs	fp, BASEPRI
    bd3c:	f382 8811 	msr	BASEPRI, r2
	switch (event->type) {
    bd40:	7b61      	ldrb	r1, [r4, #13]
    bd42:	f001 020f 	and.w	r2, r1, #15
    bd46:	2a02      	cmp	r2, #2
    bd48:	d003      	beq.n	bd52 <k_poll+0x8a>
    bd4a:	2a04      	cmp	r2, #4
    bd4c:	d004      	beq.n	bd58 <k_poll+0x90>
    bd4e:	2a01      	cmp	r2, #1
    bd50:	d106      	bne.n	bd60 <k_poll+0x98>
		if (event->signal->signaled) {
    bd52:	6920      	ldr	r0, [r4, #16]
    bd54:	6880      	ldr	r0, [r0, #8]
    bd56:	e001      	b.n	bd5c <k_poll+0x94>
		if (!k_queue_is_empty(event->queue)) {
    bd58:	6920      	ldr	r0, [r4, #16]
    bd5a:	6800      	ldr	r0, [r0, #0]
		if (event->signal->signaled) {
    bd5c:	2800      	cmp	r0, #0
    bd5e:	d148      	bne.n	bdf2 <k_poll+0x12a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
    bd60:	f1b9 0f00 	cmp.w	r9, #0
    bd64:	d016      	beq.n	bd94 <k_poll+0xcc>
    bd66:	68a9      	ldr	r1, [r5, #8]
    bd68:	7a49      	ldrb	r1, [r1, #9]
    bd6a:	068b      	lsls	r3, r1, #26
    bd6c:	d512      	bpl.n	bd94 <k_poll+0xcc>
	switch (event->type) {
    bd6e:	2a02      	cmp	r2, #2
    bd70:	d007      	beq.n	bd82 <k_poll+0xba>
    bd72:	2a04      	cmp	r2, #4
    bd74:	d013      	beq.n	bd9e <k_poll+0xd6>
    bd76:	2a01      	cmp	r2, #1
    bd78:	d109      	bne.n	bd8e <k_poll+0xc6>
		add_event(&event->signal->poll_events, event, poller);
    bd7a:	4652      	mov	r2, sl
    bd7c:	4621      	mov	r1, r4
    bd7e:	6920      	ldr	r0, [r4, #16]
    bd80:	e003      	b.n	bd8a <k_poll+0xc2>
		add_event(&event->sem->poll_events, event, poller);
    bd82:	6920      	ldr	r0, [r4, #16]
    bd84:	4652      	mov	r2, sl
    bd86:	4621      	mov	r1, r4
    bd88:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
    bd8a:	f7ff ff5d 	bl	bc48 <add_event>
	event->poller = poller;
    bd8e:	f8c4 a008 	str.w	sl, [r4, #8]
				++last_registered;
    bd92:	3601      	adds	r6, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bd94:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
    bd98:	3701      	adds	r7, #1
    bd9a:	3414      	adds	r4, #20
    bd9c:	e7b1      	b.n	bd02 <k_poll+0x3a>
		add_event(&event->queue->poll_events, event, poller);
    bd9e:	6920      	ldr	r0, [r4, #16]
    bda0:	4652      	mov	r2, sl
    bda2:	4621      	mov	r1, r4
    bda4:	3008      	adds	r0, #8
    bda6:	e7f0      	b.n	bd8a <k_poll+0xc2>
	thread->base.thread_state &= ~states;
    bda8:	f023 0320 	bic.w	r3, r3, #32
    bdac:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
    bdae:	f1b9 0f00 	cmp.w	r9, #0
    bdb2:	d104      	bne.n	bdbe <k_poll+0xf6>
    bdb4:	f387 8811 	msr	BASEPRI, r7
		return -EAGAIN;
    bdb8:	f06f 040a 	mvn.w	r4, #10
    bdbc:	e7b6      	b.n	bd2c <k_poll+0x64>
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    bdbe:	a804      	add	r0, sp, #16
	_pend_current_thread(&wait_q, timeout);
    bdc0:	4649      	mov	r1, r9
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    bdc2:	9004      	str	r0, [sp, #16]
    bdc4:	9005      	str	r0, [sp, #20]
	_pend_current_thread(&wait_q, timeout);
    bdc6:	f7ff fa07 	bl	b1d8 <_pend_current_thread>
	_update_time_slice_before_swap();
    bdca:	f7ff faef 	bl	b3ac <_update_time_slice_before_swap>
	return __swap(key);
    bdce:	4638      	mov	r0, r7
    bdd0:	f7f4 fea2 	bl	b18 <__swap>
    bdd4:	4604      	mov	r4, r0
	__asm__ volatile(
    bdd6:	f04f 0320 	mov.w	r3, #32
    bdda:	f3ef 8511 	mrs	r5, BASEPRI
    bdde:	f383 8811 	msr	BASEPRI, r3
	clear_event_registrations(events, last_registered, key);
    bde2:	462a      	mov	r2, r5
    bde4:	4631      	mov	r1, r6
    bde6:	4640      	mov	r0, r8
    bde8:	f7ff fea7 	bl	bb3a <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bdec:	f385 8811 	msr	BASEPRI, r5
	return swap_rc;
    bdf0:	e79c      	b.n	bd2c <k_poll+0x64>
	event->state |= state;
    bdf2:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
    bdf6:	f362 1107 	bfi	r1, r2, #4, #4
	event->poller = NULL;
    bdfa:	2300      	movs	r3, #0
    bdfc:	60a3      	str	r3, [r4, #8]
	event->state |= state;
    bdfe:	7361      	strb	r1, [r4, #13]
			clear_polling_state(_current);
    be00:	68a9      	ldr	r1, [r5, #8]
    be02:	7a4a      	ldrb	r2, [r1, #9]
    be04:	f022 0220 	bic.w	r2, r2, #32
    be08:	724a      	strb	r2, [r1, #9]
    be0a:	e7c3      	b.n	bd94 <k_poll+0xcc>
    be0c:	20001d34 	.word	0x20001d34

0000be10 <_handle_obj_poll_events>:
}

/* returns 1 if a reschedule must take place, 0 otherwise */
int _handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
    be10:	b513      	push	{r0, r1, r4, lr}
	return list->head == list;
    be12:	6804      	ldr	r4, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
    be14:	42a0      	cmp	r0, r4
    be16:	d102      	bne.n	be1e <_handle_obj_poll_events+0xe>
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
		return 0;
    be18:	2000      	movs	r0, #0
	}

	(void) signal_poll_event(poll_event, state, &must_reschedule);
	return must_reschedule;
}
    be1a:	b002      	add	sp, #8
    be1c:	bd10      	pop	{r4, pc}
		return NULL;
	}

	node = list->head;
	sys_dlist_remove(node);
    be1e:	4620      	mov	r0, r4
    be20:	f7ff fe85 	bl	bb2e <sys_dlist_remove>
	if (!poll_event) {
    be24:	2c00      	cmp	r4, #0
    be26:	d0f7      	beq.n	be18 <_handle_obj_poll_events+0x8>
	(void) signal_poll_event(poll_event, state, &must_reschedule);
    be28:	aa01      	add	r2, sp, #4
    be2a:	4620      	mov	r0, r4
    be2c:	f7ff fea6 	bl	bb7c <signal_poll_event>
	return must_reschedule;
    be30:	9801      	ldr	r0, [sp, #4]
    be32:	e7f2      	b.n	be1a <_handle_obj_poll_events+0xa>

0000be34 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
    be34:	4770      	bx	lr
