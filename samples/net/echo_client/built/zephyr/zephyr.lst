
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	2000cee8 	.word	0x2000cee8
       4:	00001345 	.word	0x00001345
       8:	00001395 	.word	0x00001395
       c:	000011dd 	.word	0x000011dd
      10:	000011dd 	.word	0x000011dd
      14:	000011dd 	.word	0x000011dd
      18:	000011dd 	.word	0x000011dd
      1c:	000011dd 	.word	0x000011dd
      20:	000011dd 	.word	0x000011dd
      24:	000011dd 	.word	0x000011dd
      28:	000011dd 	.word	0x000011dd
      2c:	00000dd1 	.word	0x00000dd1
      30:	000011dd 	.word	0x000011dd
      34:	000011dd 	.word	0x000011dd
      38:	00000d8d 	.word	0x00000d8d
      3c:	000011dd 	.word	0x000011dd

00000040 <_irq_vector_table>:
      40:	00001309 00015367 00001309 00001309     ....gS..........
      50:	00001309 00001309 00001309 00001309     ................
      60:	00001309 00001309 00001309 00001309     ................
      70:	00001309 00001309 00001309 00001309     ................
      80:	00001309 00001309 00001309 00001309     ................
      90:	00001309 00001309 00001309 00001309     ................
      a0:	00001309 00001309 00001309 00001309     ................
      b0:	00001309 00001309 00001309 00001309     ................
      c0:	00001309 00001309 00001309 00001309     ................
      d0:	00001309 00001309 00001309 00001309     ................
      e0:	00001309 00001309 00001309 00001309     ................
      f0:	00001309 00001309                       ........

000000f8 <_sw_isr_table>:
      f8:	00000000 00002b31 00000000 00001155     ....1+......U...
     108:	2000e918 00002fe7 00000000 00001155     ... ./......U...
     118:	00000000 00001155 00000000 00001155     ....U.......U...
     128:	2000e948 00002d15 00000000 00001155     H.. .-......U...
     138:	00000000 00001155 00000000 00001155     ....U.......U...
     148:	00000000 00001155 00000000 0001532d     ....U.......-S..
     158:	00000000 00001155 2000e924 00003221     ....U...$.. !2..
     168:	00000000 00001155 00000000 00001155     ....U.......U...
     178:	00000000 00001155 00000000 00003361     ....U.......a3..
     188:	00000000 00001155 00000000 00001155     ....U.......U...
     198:	00000000 00001155 00000000 00001155     ....U.......U...
     1a8:	00000000 00001155 00000000 00001155     ....U.......U...
     1b8:	00000000 00015361 00000000 00001155     ....aS......U...
     1c8:	00000000 00001155 00000000 00001155     ....U.......U...
     1d8:	00000000 00001155 00000000 00001155     ....U.......U...
     1e8:	00000000 00001155 00000000 00001155     ....U.......U...
     1f8:	00000000 00001155 00000000 00001155     ....U.......U...
     208:	00000000 00001155 00000000 00001155     ....U.......U...
     218:	00000000 00001155 00000000 00001155     ....U.......U...
     228:	00000000 00001155 00000000 00001155     ....U.......U...
     238:	00000000 00001155 00000000 00001155     ....U.......U...
     248:	00000000 00001155 00000000 00001155     ....U.......U...
     258:	00000000 00001155 00000000 00001155     ....U.......U...

00000268 <__aeabi_uldivmod>:
     268:	b953      	cbnz	r3, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26a:	b94a      	cbnz	r2, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26c:	2900      	cmp	r1, #0
     26e:	bf08      	it	eq
     270:	2800      	cmpeq	r0, #0
     272:	bf1c      	itt	ne
     274:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     278:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     27c:	f000 b98e 	b.w	59c <__aeabi_idiv0>
     280:	f1ad 0c08 	sub.w	ip, sp, #8
     284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     288:	f000 f81a 	bl	2c0 <__udivmoddi4>
     28c:	f8dd e004 	ldr.w	lr, [sp, #4]
     290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     294:	b004      	add	sp, #16
     296:	4770      	bx	lr

00000298 <__popcountsi2>:
     298:	0843      	lsrs	r3, r0, #1
     29a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     29e:	1ac0      	subs	r0, r0, r3
     2a0:	0883      	lsrs	r3, r0, #2
     2a2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     2a6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     2aa:	4418      	add	r0, r3
     2ac:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     2b0:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     2b4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     2b8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     2bc:	0e00      	lsrs	r0, r0, #24
     2be:	4770      	bx	lr

000002c0 <__udivmoddi4>:
     2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2c4:	468c      	mov	ip, r1
     2c6:	460d      	mov	r5, r1
     2c8:	4604      	mov	r4, r0
     2ca:	9e08      	ldr	r6, [sp, #32]
     2cc:	2b00      	cmp	r3, #0
     2ce:	d151      	bne.n	374 <__udivmoddi4+0xb4>
     2d0:	428a      	cmp	r2, r1
     2d2:	4617      	mov	r7, r2
     2d4:	d96d      	bls.n	3b2 <__udivmoddi4+0xf2>
     2d6:	fab2 fe82 	clz	lr, r2
     2da:	f1be 0f00 	cmp.w	lr, #0
     2de:	d00b      	beq.n	2f8 <__udivmoddi4+0x38>
     2e0:	f1ce 0c20 	rsb	ip, lr, #32
     2e4:	fa01 f50e 	lsl.w	r5, r1, lr
     2e8:	fa20 fc0c 	lsr.w	ip, r0, ip
     2ec:	fa02 f70e 	lsl.w	r7, r2, lr
     2f0:	ea4c 0c05 	orr.w	ip, ip, r5
     2f4:	fa00 f40e 	lsl.w	r4, r0, lr
     2f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2fc:	0c25      	lsrs	r5, r4, #16
     2fe:	fbbc f8fa 	udiv	r8, ip, sl
     302:	fa1f f987 	uxth.w	r9, r7
     306:	fb0a cc18 	mls	ip, sl, r8, ip
     30a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     30e:	fb08 f309 	mul.w	r3, r8, r9
     312:	42ab      	cmp	r3, r5
     314:	d90a      	bls.n	32c <__udivmoddi4+0x6c>
     316:	19ed      	adds	r5, r5, r7
     318:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     31c:	f080 8123 	bcs.w	566 <CONFIG_NET_BUF_DATA_SIZE+0x66>
     320:	42ab      	cmp	r3, r5
     322:	f240 8120 	bls.w	566 <CONFIG_NET_BUF_DATA_SIZE+0x66>
     326:	f1a8 0802 	sub.w	r8, r8, #2
     32a:	443d      	add	r5, r7
     32c:	1aed      	subs	r5, r5, r3
     32e:	b2a4      	uxth	r4, r4
     330:	fbb5 f0fa 	udiv	r0, r5, sl
     334:	fb0a 5510 	mls	r5, sl, r0, r5
     338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     33c:	fb00 f909 	mul.w	r9, r0, r9
     340:	45a1      	cmp	r9, r4
     342:	d909      	bls.n	358 <__udivmoddi4+0x98>
     344:	19e4      	adds	r4, r4, r7
     346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     34a:	f080 810a 	bcs.w	562 <CONFIG_NET_BUF_DATA_SIZE+0x62>
     34e:	45a1      	cmp	r9, r4
     350:	f240 8107 	bls.w	562 <CONFIG_NET_BUF_DATA_SIZE+0x62>
     354:	3802      	subs	r0, #2
     356:	443c      	add	r4, r7
     358:	eba4 0409 	sub.w	r4, r4, r9
     35c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     360:	2100      	movs	r1, #0
     362:	2e00      	cmp	r6, #0
     364:	d061      	beq.n	42a <CONFIG_MAIN_STACK_SIZE+0x2a>
     366:	fa24 f40e 	lsr.w	r4, r4, lr
     36a:	2300      	movs	r3, #0
     36c:	6034      	str	r4, [r6, #0]
     36e:	6073      	str	r3, [r6, #4]
     370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     374:	428b      	cmp	r3, r1
     376:	d907      	bls.n	388 <__udivmoddi4+0xc8>
     378:	2e00      	cmp	r6, #0
     37a:	d054      	beq.n	426 <CONFIG_MAIN_STACK_SIZE+0x26>
     37c:	2100      	movs	r1, #0
     37e:	e886 0021 	stmia.w	r6, {r0, r5}
     382:	4608      	mov	r0, r1
     384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     388:	fab3 f183 	clz	r1, r3
     38c:	2900      	cmp	r1, #0
     38e:	f040 808e 	bne.w	4ae <CONFIG_MAIN_STACK_SIZE+0xae>
     392:	42ab      	cmp	r3, r5
     394:	d302      	bcc.n	39c <__udivmoddi4+0xdc>
     396:	4282      	cmp	r2, r0
     398:	f200 80fa 	bhi.w	590 <CONFIG_NET_BUF_DATA_SIZE+0x90>
     39c:	1a84      	subs	r4, r0, r2
     39e:	eb65 0503 	sbc.w	r5, r5, r3
     3a2:	2001      	movs	r0, #1
     3a4:	46ac      	mov	ip, r5
     3a6:	2e00      	cmp	r6, #0
     3a8:	d03f      	beq.n	42a <CONFIG_MAIN_STACK_SIZE+0x2a>
     3aa:	e886 1010 	stmia.w	r6, {r4, ip}
     3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3b2:	b912      	cbnz	r2, 3ba <__udivmoddi4+0xfa>
     3b4:	2701      	movs	r7, #1
     3b6:	fbb7 f7f2 	udiv	r7, r7, r2
     3ba:	fab7 fe87 	clz	lr, r7
     3be:	f1be 0f00 	cmp.w	lr, #0
     3c2:	d134      	bne.n	42e <CONFIG_MAIN_STACK_SIZE+0x2e>
     3c4:	1beb      	subs	r3, r5, r7
     3c6:	0c3a      	lsrs	r2, r7, #16
     3c8:	fa1f fc87 	uxth.w	ip, r7
     3cc:	2101      	movs	r1, #1
     3ce:	fbb3 f8f2 	udiv	r8, r3, r2
     3d2:	0c25      	lsrs	r5, r4, #16
     3d4:	fb02 3318 	mls	r3, r2, r8, r3
     3d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     3dc:	fb0c f308 	mul.w	r3, ip, r8
     3e0:	42ab      	cmp	r3, r5
     3e2:	d907      	bls.n	3f4 <__udivmoddi4+0x134>
     3e4:	19ed      	adds	r5, r5, r7
     3e6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     3ea:	d202      	bcs.n	3f2 <__udivmoddi4+0x132>
     3ec:	42ab      	cmp	r3, r5
     3ee:	f200 80d1 	bhi.w	594 <CONFIG_NET_BUF_DATA_SIZE+0x94>
     3f2:	4680      	mov	r8, r0
     3f4:	1aed      	subs	r5, r5, r3
     3f6:	b2a3      	uxth	r3, r4
     3f8:	fbb5 f0f2 	udiv	r0, r5, r2
     3fc:	fb02 5510 	mls	r5, r2, r0, r5
     400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     404:	fb0c fc00 	mul.w	ip, ip, r0
     408:	45a4      	cmp	ip, r4
     40a:	d907      	bls.n	41c <CONFIG_MAIN_STACK_SIZE+0x1c>
     40c:	19e4      	adds	r4, r4, r7
     40e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     412:	d202      	bcs.n	41a <CONFIG_MAIN_STACK_SIZE+0x1a>
     414:	45a4      	cmp	ip, r4
     416:	f200 80b8 	bhi.w	58a <CONFIG_NET_BUF_DATA_SIZE+0x8a>
     41a:	4618      	mov	r0, r3
     41c:	eba4 040c 	sub.w	r4, r4, ip
     420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     424:	e79d      	b.n	362 <__udivmoddi4+0xa2>
     426:	4631      	mov	r1, r6
     428:	4630      	mov	r0, r6
     42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     42e:	f1ce 0420 	rsb	r4, lr, #32
     432:	fa05 f30e 	lsl.w	r3, r5, lr
     436:	fa07 f70e 	lsl.w	r7, r7, lr
     43a:	fa20 f804 	lsr.w	r8, r0, r4
     43e:	0c3a      	lsrs	r2, r7, #16
     440:	fa25 f404 	lsr.w	r4, r5, r4
     444:	ea48 0803 	orr.w	r8, r8, r3
     448:	fbb4 f1f2 	udiv	r1, r4, r2
     44c:	ea4f 4518 	mov.w	r5, r8, lsr #16
     450:	fb02 4411 	mls	r4, r2, r1, r4
     454:	fa1f fc87 	uxth.w	ip, r7
     458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     45c:	fb01 f30c 	mul.w	r3, r1, ip
     460:	42ab      	cmp	r3, r5
     462:	fa00 f40e 	lsl.w	r4, r0, lr
     466:	d909      	bls.n	47c <CONFIG_MAIN_STACK_SIZE+0x7c>
     468:	19ed      	adds	r5, r5, r7
     46a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     46e:	f080 808a 	bcs.w	586 <CONFIG_NET_BUF_DATA_SIZE+0x86>
     472:	42ab      	cmp	r3, r5
     474:	f240 8087 	bls.w	586 <CONFIG_NET_BUF_DATA_SIZE+0x86>
     478:	3902      	subs	r1, #2
     47a:	443d      	add	r5, r7
     47c:	1aeb      	subs	r3, r5, r3
     47e:	fa1f f588 	uxth.w	r5, r8
     482:	fbb3 f0f2 	udiv	r0, r3, r2
     486:	fb02 3310 	mls	r3, r2, r0, r3
     48a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     48e:	fb00 f30c 	mul.w	r3, r0, ip
     492:	42ab      	cmp	r3, r5
     494:	d907      	bls.n	4a6 <CONFIG_MAIN_STACK_SIZE+0xa6>
     496:	19ed      	adds	r5, r5, r7
     498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     49c:	d26f      	bcs.n	57e <CONFIG_NET_BUF_DATA_SIZE+0x7e>
     49e:	42ab      	cmp	r3, r5
     4a0:	d96d      	bls.n	57e <CONFIG_NET_BUF_DATA_SIZE+0x7e>
     4a2:	3802      	subs	r0, #2
     4a4:	443d      	add	r5, r7
     4a6:	1aeb      	subs	r3, r5, r3
     4a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     4ac:	e78f      	b.n	3ce <__udivmoddi4+0x10e>
     4ae:	f1c1 0720 	rsb	r7, r1, #32
     4b2:	fa22 f807 	lsr.w	r8, r2, r7
     4b6:	408b      	lsls	r3, r1
     4b8:	fa05 f401 	lsl.w	r4, r5, r1
     4bc:	ea48 0303 	orr.w	r3, r8, r3
     4c0:	fa20 fe07 	lsr.w	lr, r0, r7
     4c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     4c8:	40fd      	lsrs	r5, r7
     4ca:	ea4e 0e04 	orr.w	lr, lr, r4
     4ce:	fbb5 f9fc 	udiv	r9, r5, ip
     4d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
     4d6:	fb0c 5519 	mls	r5, ip, r9, r5
     4da:	fa1f f883 	uxth.w	r8, r3
     4de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     4e2:	fb09 f408 	mul.w	r4, r9, r8
     4e6:	42ac      	cmp	r4, r5
     4e8:	fa02 f201 	lsl.w	r2, r2, r1
     4ec:	fa00 fa01 	lsl.w	sl, r0, r1
     4f0:	d908      	bls.n	504 <CONFIG_NET_BUF_DATA_SIZE+0x4>
     4f2:	18ed      	adds	r5, r5, r3
     4f4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4f8:	d243      	bcs.n	582 <CONFIG_NET_BUF_DATA_SIZE+0x82>
     4fa:	42ac      	cmp	r4, r5
     4fc:	d941      	bls.n	582 <CONFIG_NET_BUF_DATA_SIZE+0x82>
     4fe:	f1a9 0902 	sub.w	r9, r9, #2
     502:	441d      	add	r5, r3
     504:	1b2d      	subs	r5, r5, r4
     506:	fa1f fe8e 	uxth.w	lr, lr
     50a:	fbb5 f0fc 	udiv	r0, r5, ip
     50e:	fb0c 5510 	mls	r5, ip, r0, r5
     512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     516:	fb00 f808 	mul.w	r8, r0, r8
     51a:	45a0      	cmp	r8, r4
     51c:	d907      	bls.n	52e <CONFIG_NET_BUF_DATA_SIZE+0x2e>
     51e:	18e4      	adds	r4, r4, r3
     520:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     524:	d229      	bcs.n	57a <CONFIG_NET_BUF_DATA_SIZE+0x7a>
     526:	45a0      	cmp	r8, r4
     528:	d927      	bls.n	57a <CONFIG_NET_BUF_DATA_SIZE+0x7a>
     52a:	3802      	subs	r0, #2
     52c:	441c      	add	r4, r3
     52e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     532:	eba4 0408 	sub.w	r4, r4, r8
     536:	fba0 8902 	umull	r8, r9, r0, r2
     53a:	454c      	cmp	r4, r9
     53c:	46c6      	mov	lr, r8
     53e:	464d      	mov	r5, r9
     540:	d315      	bcc.n	56e <CONFIG_NET_BUF_DATA_SIZE+0x6e>
     542:	d012      	beq.n	56a <CONFIG_NET_BUF_DATA_SIZE+0x6a>
     544:	b156      	cbz	r6, 55c <CONFIG_NET_BUF_DATA_SIZE+0x5c>
     546:	ebba 030e 	subs.w	r3, sl, lr
     54a:	eb64 0405 	sbc.w	r4, r4, r5
     54e:	fa04 f707 	lsl.w	r7, r4, r7
     552:	40cb      	lsrs	r3, r1
     554:	431f      	orrs	r7, r3
     556:	40cc      	lsrs	r4, r1
     558:	6037      	str	r7, [r6, #0]
     55a:	6074      	str	r4, [r6, #4]
     55c:	2100      	movs	r1, #0
     55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     562:	4618      	mov	r0, r3
     564:	e6f8      	b.n	358 <__udivmoddi4+0x98>
     566:	4690      	mov	r8, r2
     568:	e6e0      	b.n	32c <__udivmoddi4+0x6c>
     56a:	45c2      	cmp	sl, r8
     56c:	d2ea      	bcs.n	544 <CONFIG_NET_BUF_DATA_SIZE+0x44>
     56e:	ebb8 0e02 	subs.w	lr, r8, r2
     572:	eb69 0503 	sbc.w	r5, r9, r3
     576:	3801      	subs	r0, #1
     578:	e7e4      	b.n	544 <CONFIG_NET_BUF_DATA_SIZE+0x44>
     57a:	4628      	mov	r0, r5
     57c:	e7d7      	b.n	52e <CONFIG_NET_BUF_DATA_SIZE+0x2e>
     57e:	4640      	mov	r0, r8
     580:	e791      	b.n	4a6 <CONFIG_MAIN_STACK_SIZE+0xa6>
     582:	4681      	mov	r9, r0
     584:	e7be      	b.n	504 <CONFIG_NET_BUF_DATA_SIZE+0x4>
     586:	4601      	mov	r1, r0
     588:	e778      	b.n	47c <CONFIG_MAIN_STACK_SIZE+0x7c>
     58a:	3802      	subs	r0, #2
     58c:	443c      	add	r4, r7
     58e:	e745      	b.n	41c <CONFIG_MAIN_STACK_SIZE+0x1c>
     590:	4608      	mov	r0, r1
     592:	e708      	b.n	3a6 <__udivmoddi4+0xe6>
     594:	f1a8 0802 	sub.w	r8, r8, #2
     598:	443d      	add	r5, r7
     59a:	e72b      	b.n	3f4 <__udivmoddi4+0x134>

0000059c <__aeabi_idiv0>:
     59c:	4770      	bx	lr
     59e:	bf00      	nop

000005a0 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
     5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     5a4:	4686      	mov	lr, r0
     5a6:	460f      	mov	r7, r1
	register const char *s = nptr;
     5a8:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
     5aa:	462c      	mov	r4, r5
     5ac:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (((unsigned)c|32)-'a') < 26;
}

static inline int isspace(int c)
{
	return c == ' ' || ((unsigned)c-'\t') < 5;
     5b0:	2b20      	cmp	r3, #32
     5b2:	d003      	beq.n	5bc <strtol+0x1c>
     5b4:	f1a3 0109 	sub.w	r1, r3, #9
     5b8:	2904      	cmp	r1, #4
     5ba:	d857      	bhi.n	66c <CONFIG_BT_CTLR_COMPANY_ID+0x7b>
{
     5bc:	4625      	mov	r5, r4
     5be:	e7f4      	b.n	5aa <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
		neg = 1;
		c = *s++;
	} else if (c == '+')
     5c0:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
     5c2:	bf04      	itt	eq
     5c4:	1cac      	addeq	r4, r5, #2
     5c6:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
     5c8:	2100      	movs	r1, #0
     5ca:	e054      	b.n	676 <CONFIG_BT_CTLR_COMPANY_ID+0x85>
	if ((base == 0 || base == 16) &&
     5cc:	2b30      	cmp	r3, #48	; 0x30
     5ce:	d127      	bne.n	620 <CONFIG_BT_CTLR_COMPANY_ID+0x2f>
	    c == '0' && (*s == 'x' || *s == 'X')) {
     5d0:	7823      	ldrb	r3, [r4, #0]
     5d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
     5d6:	2b58      	cmp	r3, #88	; 0x58
     5d8:	d154      	bne.n	684 <CONFIG_BT_CTLR_COMPANY_ID+0x93>
		c = s[1];
     5da:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
     5dc:	2210      	movs	r2, #16
		s += 2;
     5de:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
     5e0:	2900      	cmp	r1, #0
     5e2:	bf0c      	ite	eq
     5e4:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
     5e8:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
     5ec:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
     5ee:	fbb8 fcf2 	udiv	ip, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
     5f2:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
     5f4:	fb02 891c 	mls	r9, r2, ip, r8
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
}

static inline int isdigit(int a)
{
	return (((unsigned)(a)-'0') < 10);
     5f8:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c))
     5fc:	2d09      	cmp	r5, #9
     5fe:	d811      	bhi.n	624 <CONFIG_BT_CTLR_COMPANY_ID+0x33>
			c -= '0';
     600:	462b      	mov	r3, r5
		else if (isalpha(c))
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
		if (c >= base)
     602:	429a      	cmp	r2, r3
     604:	dd1e      	ble.n	644 <CONFIG_BT_CTLR_COMPANY_ID+0x53>
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
     606:	1c75      	adds	r5, r6, #1
     608:	d007      	beq.n	61a <CONFIG_BT_CTLR_COMPANY_ID+0x29>
     60a:	4560      	cmp	r0, ip
     60c:	d817      	bhi.n	63e <CONFIG_BT_CTLR_COMPANY_ID+0x4d>
     60e:	d101      	bne.n	614 <CONFIG_BT_CTLR_COMPANY_ID+0x23>
     610:	454b      	cmp	r3, r9
     612:	dc14      	bgt.n	63e <CONFIG_BT_CTLR_COMPANY_ID+0x4d>
			any = -1;
		else {
			any = 1;
			acc *= base;
			acc += c;
     614:	fb02 3000 	mla	r0, r2, r0, r3
			any = 1;
     618:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
     61a:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c))
     61e:	e7eb      	b.n	5f8 <CONFIG_BT_CTLR_COMPANY_ID+0x7>
		base = c == '0' ? 8 : 10;
     620:	220a      	movs	r2, #10
     622:	e7dd      	b.n	5e0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x4>
	return (((unsigned)c|32)-'a') < 26;
     624:	f043 0520 	orr.w	r5, r3, #32
     628:	3d61      	subs	r5, #97	; 0x61
		else if (isalpha(c))
     62a:	2d19      	cmp	r5, #25
     62c:	d80a      	bhi.n	644 <CONFIG_BT_CTLR_COMPANY_ID+0x53>
	return ((unsigned)(a)-'A') < 26;
     62e:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
     632:	2d19      	cmp	r5, #25
     634:	bf8c      	ite	hi
     636:	2557      	movhi	r5, #87	; 0x57
     638:	2537      	movls	r5, #55	; 0x37
     63a:	1b5b      	subs	r3, r3, r5
     63c:	e7e1      	b.n	602 <CONFIG_BT_CTLR_COMPANY_ID+0x11>
			any = -1;
     63e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
     642:	e7ea      	b.n	61a <CONFIG_BT_CTLR_COMPANY_ID+0x29>
		}
	}
	if (any < 0) {
     644:	1c73      	adds	r3, r6, #1
     646:	d107      	bne.n	658 <CONFIG_BT_CTLR_COMPANY_ID+0x67>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
     648:	f01e fc60 	bl	1ef0c <__errno>
     64c:	2326      	movs	r3, #38	; 0x26
     64e:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
     650:	4640      	mov	r0, r8
	} else if (neg)
		acc = -acc;
	if (endptr != 0)
     652:	b92f      	cbnz	r7, 660 <CONFIG_BT_CTLR_COMPANY_ID+0x6f>
     654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg)
     658:	b101      	cbz	r1, 65c <CONFIG_BT_CTLR_COMPANY_ID+0x6b>
		acc = -acc;
     65a:	4240      	negs	r0, r0
	if (endptr != 0)
     65c:	b1bf      	cbz	r7, 68e <CONFIG_BT_CTLR_COMPANY_ID+0x9d>
		*endptr = (char *)(any ? s - 1 : nptr);
     65e:	b10e      	cbz	r6, 664 <CONFIG_BT_CTLR_COMPANY_ID+0x73>
     660:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
     664:	f8c7 e000 	str.w	lr, [r7]
	return acc;
     668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (c == '-') {
     66c:	2b2d      	cmp	r3, #45	; 0x2d
     66e:	d1a7      	bne.n	5c0 <strtol+0x20>
		c = *s++;
     670:	786b      	ldrb	r3, [r5, #1]
     672:	1cac      	adds	r4, r5, #2
		neg = 1;
     674:	2101      	movs	r1, #1
	if ((base == 0 || base == 16) &&
     676:	2a00      	cmp	r2, #0
     678:	d0a8      	beq.n	5cc <strtol+0x2c>
     67a:	2a10      	cmp	r2, #16
     67c:	d1b0      	bne.n	5e0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x4>
     67e:	2b30      	cmp	r3, #48	; 0x30
     680:	d0a6      	beq.n	5d0 <strtol+0x30>
     682:	e7ad      	b.n	5e0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x4>
	if (base == 0)
     684:	2330      	movs	r3, #48	; 0x30
     686:	2a00      	cmp	r2, #0
     688:	d1aa      	bne.n	5e0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x4>
		base = c == '0' ? 8 : 10;
     68a:	2208      	movs	r2, #8
     68c:	e7a8      	b.n	5e0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x4>
}
     68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00000692 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
     692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     696:	4686      	mov	lr, r0
     698:	460f      	mov	r7, r1
	register const char *s = nptr;
     69a:	4605      	mov	r5, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
     69c:	462c      	mov	r4, r5
     69e:	f814 3b01 	ldrb.w	r3, [r4], #1
	return c == ' ' || ((unsigned)c-'\t') < 5;
     6a2:	2b20      	cmp	r3, #32
     6a4:	d003      	beq.n	6ae <strtoul+0x1c>
     6a6:	f1a3 0109 	sub.w	r1, r3, #9
     6aa:	2904      	cmp	r1, #4
     6ac:	d859      	bhi.n	762 <strtoul+0xd0>
{
     6ae:	4625      	mov	r5, r4
     6b0:	e7f4      	b.n	69c <strtoul+0xa>
	} while (isspace(c));
	if (c == '-') {
		neg = 1;
		c = *s++;
	} else if (c == '+')
     6b2:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
     6b4:	bf04      	itt	eq
     6b6:	1cac      	addeq	r4, r5, #2
     6b8:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
     6ba:	f04f 0c00 	mov.w	ip, #0
     6be:	e056      	b.n	76e <strtoul+0xdc>
	if ((base == 0 || base == 16) &&
     6c0:	2b30      	cmp	r3, #48	; 0x30
     6c2:	d125      	bne.n	710 <strtoul+0x7e>
	    c == '0' && (*s == 'x' || *s == 'X')) {
     6c4:	7823      	ldrb	r3, [r4, #0]
     6c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
     6ca:	2b58      	cmp	r3, #88	; 0x58
     6cc:	d156      	bne.n	77c <strtoul+0xea>
		c = s[1];
     6ce:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
     6d0:	2210      	movs	r2, #16
		s += 2;
     6d2:	3402      	adds	r4, #2
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
     6d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
     6d8:	2600      	movs	r6, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
     6da:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
     6de:	fb02 f801 	mul.w	r8, r2, r1
     6e2:	ea6f 0808 	mvn.w	r8, r8
	for (acc = 0, any = 0;; c = *s++) {
     6e6:	4630      	mov	r0, r6
	return (((unsigned)(a)-'0') < 10);
     6e8:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c))
     6ec:	2d09      	cmp	r5, #9
     6ee:	d811      	bhi.n	714 <strtoul+0x82>
			c -= '0';
     6f0:	462b      	mov	r3, r5
		else if (isalpha(c))
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
		if (c >= base)
     6f2:	429a      	cmp	r2, r3
     6f4:	dd1e      	ble.n	734 <strtoul+0xa2>
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
     6f6:	2e00      	cmp	r6, #0
     6f8:	db19      	blt.n	72e <strtoul+0x9c>
     6fa:	4288      	cmp	r0, r1
     6fc:	d817      	bhi.n	72e <strtoul+0x9c>
     6fe:	d101      	bne.n	704 <strtoul+0x72>
     700:	4543      	cmp	r3, r8
     702:	dc14      	bgt.n	72e <strtoul+0x9c>
			any = -1;
		else {
			any = 1;
			acc *= base;
			acc += c;
     704:	fb02 3000 	mla	r0, r2, r0, r3
			any = 1;
     708:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
     70a:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c))
     70e:	e7eb      	b.n	6e8 <strtoul+0x56>
		base = c == '0' ? 8 : 10;
     710:	220a      	movs	r2, #10
     712:	e7df      	b.n	6d4 <strtoul+0x42>
	return (((unsigned)c|32)-'a') < 26;
     714:	f043 0520 	orr.w	r5, r3, #32
     718:	3d61      	subs	r5, #97	; 0x61
		else if (isalpha(c))
     71a:	2d19      	cmp	r5, #25
     71c:	d80a      	bhi.n	734 <strtoul+0xa2>
	return ((unsigned)(a)-'A') < 26;
     71e:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
     722:	2d19      	cmp	r5, #25
     724:	bf8c      	ite	hi
     726:	2557      	movhi	r5, #87	; 0x57
     728:	2537      	movls	r5, #55	; 0x37
     72a:	1b5b      	subs	r3, r3, r5
     72c:	e7e1      	b.n	6f2 <strtoul+0x60>
			any = -1;
     72e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
     732:	e7ea      	b.n	70a <strtoul+0x78>
		}
	}
	if (any < 0) {
     734:	2e00      	cmp	r6, #0
     736:	da08      	bge.n	74a <strtoul+0xb8>
		acc = ULONG_MAX;
		errno = ERANGE;
     738:	f01e fbe8 	bl	1ef0c <__errno>
     73c:	2326      	movs	r3, #38	; 0x26
     73e:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
     740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg)
		acc = -acc;
	if (endptr != 0)
     744:	b93f      	cbnz	r7, 756 <strtoul+0xc4>
     746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg)
     74a:	f1bc 0f00 	cmp.w	ip, #0
     74e:	d000      	beq.n	752 <strtoul+0xc0>
		acc = -acc;
     750:	4240      	negs	r0, r0
	if (endptr != 0)
     752:	b1c7      	cbz	r7, 786 <strtoul+0xf4>
		*endptr = (char *)(any ? s - 1 : nptr);
     754:	b10e      	cbz	r6, 75a <strtoul+0xc8>
     756:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
     75a:	f8c7 e000 	str.w	lr, [r7]
	return acc;
     75e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (c == '-') {
     762:	2b2d      	cmp	r3, #45	; 0x2d
     764:	d1a5      	bne.n	6b2 <strtoul+0x20>
		c = *s++;
     766:	786b      	ldrb	r3, [r5, #1]
     768:	1cac      	adds	r4, r5, #2
		neg = 1;
     76a:	f04f 0c01 	mov.w	ip, #1
	if ((base == 0 || base == 16) &&
     76e:	2a00      	cmp	r2, #0
     770:	d0a6      	beq.n	6c0 <strtoul+0x2e>
     772:	2a10      	cmp	r2, #16
     774:	d1ae      	bne.n	6d4 <strtoul+0x42>
     776:	2b30      	cmp	r3, #48	; 0x30
     778:	d0a4      	beq.n	6c4 <strtoul+0x32>
     77a:	e7ab      	b.n	6d4 <strtoul+0x42>
	if (base == 0)
     77c:	2330      	movs	r3, #48	; 0x30
     77e:	2a00      	cmp	r2, #0
     780:	d1a8      	bne.n	6d4 <strtoul+0x42>
		base = c == '0' ? 8 : 10;
     782:	2208      	movs	r2, #8
     784:	e7a6      	b.n	6d4 <strtoul+0x42>
}
     786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000078a <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
     78a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
     78e:	780f      	ldrb	r7, [r1, #0]
{
     790:	4605      	mov	r5, r0
	if (c != 0) {
     792:	b187      	cbz	r7, 7b6 <strstr+0x2c>
	c = *find++;
     794:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
     796:	4620      	mov	r0, r4
     798:	f000 f849 	bl	82e <strlen>
     79c:	4680      	mov	r8, r0
		do {
			do {
				sc = *s++;
     79e:	462e      	mov	r6, r5
     7a0:	f816 0b01 	ldrb.w	r0, [r6], #1
				if (sc == 0)
     7a4:	b140      	cbz	r0, 7b8 <strstr+0x2e>
				return NULL;
			} while (sc != c);
     7a6:	4287      	cmp	r7, r0
     7a8:	d108      	bne.n	7bc <strstr+0x32>
		} while (strncmp(s, find, len) != 0);
     7aa:	4642      	mov	r2, r8
     7ac:	4621      	mov	r1, r4
     7ae:	4630      	mov	r0, r6
     7b0:	f000 f852 	bl	858 <strncmp>
     7b4:	b910      	cbnz	r0, 7bc <strstr+0x32>
     7b6:	4628      	mov	r0, r5
	s--;
	}
	return (char *)s;
}
     7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
     7bc:	4635      	mov	r5, r6
     7be:	e7ee      	b.n	79e <strstr+0x14>

000007c0 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
     7c0:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
     7c2:	4603      	mov	r3, r0
     7c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     7c8:	b90a      	cbnz	r2, 7ce <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
     7ca:	701a      	strb	r2, [r3, #0]

	return dest;
}
     7cc:	4770      	bx	lr
		*d = *s;
     7ce:	f803 2b01 	strb.w	r2, [r3], #1
     7d2:	e7f7      	b.n	7c4 <strcpy+0x4>

000007d4 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
     7d4:	b510      	push	{r4, lr}
     7d6:	3901      	subs	r1, #1
	char *dest = d;

	while ((n > 0) && *s != '\0') {
     7d8:	4603      	mov	r3, r0
     7da:	b13a      	cbz	r2, 7ec <strncpy+0x18>
     7dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
     7e0:	b92c      	cbnz	r4, 7ee <strncpy+0x1a>
     7e2:	441a      	add	r2, r3
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
     7e4:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
     7e8:	4293      	cmp	r3, r2
     7ea:	d1fb      	bne.n	7e4 <strncpy+0x10>
		d++;
		n--;
	}

	return dest;
}
     7ec:	bd10      	pop	{r4, pc}
		*d = *s;
     7ee:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
     7f2:	3a01      	subs	r2, #1
     7f4:	e7f1      	b.n	7da <strncpy+0x6>

000007f6 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
     7f6:	b2c9      	uxtb	r1, r1
     7f8:	4603      	mov	r3, r0

	while ((*s != tmp) && (*s != '\0'))
     7fa:	f810 2b01 	ldrb.w	r2, [r0], #1
     7fe:	4291      	cmp	r1, r2
     800:	d006      	beq.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
     802:	2a00      	cmp	r2, #0
     804:	d1f8      	bne.n	7f8 <strchr+0x2>
		s++;

	return (*s == tmp) ? (char *) s : NULL;
     806:	2900      	cmp	r1, #0
     808:	bf0c      	ite	eq
     80a:	4618      	moveq	r0, r3
     80c:	2000      	movne	r0, #0
     80e:	4770      	bx	lr
     810:	4618      	mov	r0, r3
}
     812:	4770      	bx	lr

00000814 <strrchr>:
 *
 * @return pointer to last instance of found byte, or NULL if not found
 */

char *strrchr(const char *s, int c)
{
     814:	b510      	push	{r4, lr}
	char *match = NULL;
     816:	2300      	movs	r3, #0

	do {
		if (*s == (char)c) {
     818:	b2c9      	uxtb	r1, r1
     81a:	4604      	mov	r4, r0
     81c:	f810 2b01 	ldrb.w	r2, [r0], #1
     820:	428a      	cmp	r2, r1
     822:	bf08      	it	eq
     824:	4623      	moveq	r3, r4
			match = (char *)s;
		}
	} while (*s++);
     826:	2a00      	cmp	r2, #0
     828:	d1f7      	bne.n	81a <strrchr+0x6>

	return match;
}
     82a:	4618      	mov	r0, r3
     82c:	bd10      	pop	{r4, pc}

0000082e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
     82e:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
     830:	4603      	mov	r3, r0
     832:	1a98      	subs	r0, r3, r2
     834:	f813 1b01 	ldrb.w	r1, [r3], #1
     838:	2900      	cmp	r1, #0
     83a:	d1fa      	bne.n	832 <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
     83c:	4770      	bx	lr

0000083e <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
     83e:	3801      	subs	r0, #1
     840:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
     842:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     846:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     84a:	4293      	cmp	r3, r2
     84c:	d102      	bne.n	854 <strcmp+0x16>
     84e:	2b00      	cmp	r3, #0
     850:	d1f7      	bne.n	842 <strcmp+0x4>
     852:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
     854:	1a98      	subs	r0, r3, r2
     856:	4770      	bx	lr

00000858 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
     858:	b510      	push	{r4, lr}
     85a:	3901      	subs	r1, #1
     85c:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
     85e:	4290      	cmp	r0, r2
     860:	d009      	beq.n	876 <strncmp+0x1e>
     862:	7803      	ldrb	r3, [r0, #0]
     864:	f811 4f01 	ldrb.w	r4, [r1, #1]!
     868:	42a3      	cmp	r3, r4
     86a:	d100      	bne.n	86e <strncmp+0x16>
     86c:	b90b      	cbnz	r3, 872 <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
     86e:	1b18      	subs	r0, r3, r4
}
     870:	bd10      	pop	{r4, pc}
		s1++;
     872:	3001      	adds	r0, #1
     874:	e7f3      	b.n	85e <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
     876:	2000      	movs	r0, #0
     878:	bd10      	pop	{r4, pc}

0000087a <strcat>:

char *strcat(char *_MLIBC_RESTRICT dest, const char *_MLIBC_RESTRICT src)
{
     87a:	b538      	push	{r3, r4, r5, lr}
     87c:	4604      	mov	r4, r0
     87e:	460d      	mov	r5, r1
	strcpy(dest + strlen(dest), src);
     880:	f7ff ffd5 	bl	82e <strlen>
     884:	4629      	mov	r1, r5
     886:	4420      	add	r0, r4
     888:	f7ff ff9a 	bl	7c0 <strcpy>
	return dest;
}
     88c:	4620      	mov	r0, r4
     88e:	bd38      	pop	{r3, r4, r5, pc}

00000890 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     890:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
     892:	b182      	cbz	r2, 8b6 <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     894:	3a01      	subs	r2, #1
     896:	460c      	mov	r4, r1
     898:	4603      	mov	r3, r0
     89a:	d103      	bne.n	8a4 <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
     89c:	781a      	ldrb	r2, [r3, #0]
     89e:	7820      	ldrb	r0, [r4, #0]
     8a0:	1a10      	subs	r0, r2, r0
     8a2:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
     8a4:	781e      	ldrb	r6, [r3, #0]
     8a6:	7825      	ldrb	r5, [r4, #0]
     8a8:	42ae      	cmp	r6, r5
     8aa:	f100 0001 	add.w	r0, r0, #1
     8ae:	f101 0101 	add.w	r1, r1, #1
     8b2:	d0ef      	beq.n	894 <memcmp+0x4>
     8b4:	e7f2      	b.n	89c <memcmp+0xc>
		return 0;
     8b6:	4610      	mov	r0, r2
}
     8b8:	bd70      	pop	{r4, r5, r6, pc}

000008ba <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (d - s) < n) {
     8ba:	1a43      	subs	r3, r0, r1
     8bc:	4293      	cmp	r3, r2
{
     8be:	b510      	push	{r4, lr}
     8c0:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (d - s) < n) {
     8c4:	d304      	bcc.n	8d0 <memmove+0x16>
     8c6:	3901      	subs	r1, #1
     8c8:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
     8ca:	429a      	cmp	r2, r3
     8cc:	d108      	bne.n	8e0 <memmove+0x26>
			n--;
		}
	}

	return d;
}
     8ce:	bd10      	pop	{r4, pc}
     8d0:	440a      	add	r2, r1
			dest[n] = src[n];
     8d2:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
     8d6:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
     8da:	428a      	cmp	r2, r1
     8dc:	d1f9      	bne.n	8d2 <memmove+0x18>
     8de:	bd10      	pop	{r4, pc}
			*dest = *src;
     8e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
     8e4:	f802 4b01 	strb.w	r4, [r2], #1
     8e8:	e7ef      	b.n	8ca <memmove+0x10>

000008ea <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     8ea:	ea81 0300 	eor.w	r3, r1, r0
     8ee:	f013 0f03 	tst.w	r3, #3
{
     8f2:	b570      	push	{r4, r5, r6, lr}
     8f4:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     8f6:	d00b      	beq.n	910 <memcpy+0x26>
     8f8:	3b01      	subs	r3, #1
     8fa:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
     8fc:	4291      	cmp	r1, r2
     8fe:	d11b      	bne.n	938 <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
     900:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
     902:	2a00      	cmp	r2, #0
     904:	d0fc      	beq.n	900 <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
     906:	f811 4b01 	ldrb.w	r4, [r1], #1
     90a:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
     90e:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
     910:	079c      	lsls	r4, r3, #30
     912:	d1f6      	bne.n	902 <memcpy+0x18>
     914:	1f1e      	subs	r6, r3, #4
     916:	460d      	mov	r5, r1
     918:	1b54      	subs	r4, r2, r5
     91a:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
     91c:	2c03      	cmp	r4, #3
     91e:	d806      	bhi.n	92e <memcpy+0x44>
     920:	f022 0403 	bic.w	r4, r2, #3
     924:	4421      	add	r1, r4
     926:	4423      	add	r3, r4
     928:	f002 0203 	and.w	r2, r2, #3
     92c:	e7e4      	b.n	8f8 <memcpy+0xe>
			*(d_word++) = *(s_word++);
     92e:	f855 4b04 	ldr.w	r4, [r5], #4
     932:	f846 4f04 	str.w	r4, [r6, #4]!
     936:	e7ef      	b.n	918 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
     938:	f811 4b01 	ldrb.w	r4, [r1], #1
     93c:	f803 4f01 	strb.w	r4, [r3, #1]!
     940:	e7dc      	b.n	8fc <memcpy+0x12>

00000942 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
     942:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
     944:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
     946:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
     948:	079c      	lsls	r4, r3, #30
     94a:	d111      	bne.n	970 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
     94c:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
     950:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
     954:	461e      	mov	r6, r3
     956:	1b95      	subs	r5, r2, r6
     958:	441d      	add	r5, r3
     95a:	2d03      	cmp	r5, #3
     95c:	d80e      	bhi.n	97c <memset+0x3a>
     95e:	f022 0403 	bic.w	r4, r2, #3
     962:	4423      	add	r3, r4
     964:	f002 0203 	and.w	r2, r2, #3
     968:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
     96a:	4293      	cmp	r3, r2
     96c:	d109      	bne.n	982 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
     96e:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
     970:	2a00      	cmp	r2, #0
     972:	d0fc      	beq.n	96e <memset+0x2c>
		*(d_byte++) = c_byte;
     974:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
     978:	3a01      	subs	r2, #1
     97a:	e7e5      	b.n	948 <memset+0x6>
		*(d_word++) = c_word;
     97c:	f846 4b04 	str.w	r4, [r6], #4
     980:	e7e9      	b.n	956 <memset+0x14>
		*(d_byte++) = c_byte;
     982:	f803 1b01 	strb.w	r1, [r3], #1
     986:	e7f0      	b.n	96a <memset+0x28>

00000988 <memchr>:
 *
 * @return pointer to start of found byte
 */

void *memchr(const void *s, unsigned char c, size_t n)
{
     988:	b510      	push	{r4, lr}
	if (n != 0) {
     98a:	b152      	cbz	r2, 9a2 <memchr+0x1a>
     98c:	4402      	add	r2, r0
		const unsigned char *p = s;

		do {
			if (*p++ == c) {
     98e:	4603      	mov	r3, r0
     990:	f813 4b01 	ldrb.w	r4, [r3], #1
     994:	428c      	cmp	r4, r1
     996:	d005      	beq.n	9a4 <memchr+0x1c>
				return ((void *)(p - 1));
			}

		} while (--n != 0);
     998:	4293      	cmp	r3, r2
     99a:	4618      	mov	r0, r3
     99c:	d1f7      	bne.n	98e <memchr+0x6>
	}

	return NULL;
     99e:	2000      	movs	r0, #0
     9a0:	bd10      	pop	{r4, pc}
     9a2:	4610      	mov	r0, r2
}
     9a4:	bd10      	pop	{r4, pc}
	...

000009a8 <prepare_send_pkt>:
}

struct net_pkt *prepare_send_pkt(struct net_app_ctx *ctx,
				 const char *name,
				 int *expecting_len)
{
     9a8:	b538      	push	{r3, r4, r5, lr}
	struct net_pkt *send_pkt;

	send_pkt = net_app_get_net_pkt(ctx, AF_UNSPEC, K_FOREVER);
     9aa:	2100      	movs	r1, #0
{
     9ac:	4614      	mov	r4, r2
	send_pkt = net_app_get_net_pkt(ctx, AF_UNSPEC, K_FOREVER);
     9ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     9b2:	f01e f865 	bl	1ea80 <net_app_get_net_pkt>

	NET_ASSERT(send_pkt);

	*expecting_len = net_pkt_append(send_pkt, *expecting_len, lorem_ipsum,
     9b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     9ba:	4a04      	ldr	r2, [pc, #16]	; (9cc <prepare_send_pkt+0x24>)
     9bc:	8821      	ldrh	r1, [r4, #0]
	send_pkt = net_app_get_net_pkt(ctx, AF_UNSPEC, K_FOREVER);
     9be:	4605      	mov	r5, r0
	*expecting_len = net_pkt_append(send_pkt, *expecting_len, lorem_ipsum,
     9c0:	f018 fef6 	bl	197b0 <net_pkt_append>
     9c4:	6020      	str	r0, [r4, #0]
					K_FOREVER);

	return send_pkt;
}
     9c6:	4628      	mov	r0, r5
     9c8:	bd38      	pop	{r3, r4, r5, pc}
     9ca:	bf00      	nop
     9cc:	00020642 	.word	0x00020642

000009d0 <main>:

	printk("Beacon started\n");
}

void main(void)
{
     9d0:	b510      	push	{r4, lr}

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
     9d2:	4c09      	ldr	r4, [pc, #36]	; (9f8 <main+0x28>)
     9d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     9d8:	4620      	mov	r0, r4
     9da:	2100      	movs	r1, #0
     9dc:	f01e ff2c 	bl	1f838 <_impl_k_sem_init>
			k_sem_take(&tcp_ready, K_FOREVER);
		}
	}

	if (IS_ENABLED(CONFIG_NET_UDP)) {
		start_udp();
     9e0:	f000 f898 	bl	b14 <start_udp>

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
     9e4:	4620      	mov	r0, r4
     9e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     9ea:	f01e ff8f 	bl	1f90c <_impl_k_sem_take>
	}

	if (IS_ENABLED(CONFIG_NET_TCP)) {
		stop_tcp();
	}
}
     9ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		stop_udp();
     9f2:	f000 b8c1 	b.w	b78 <stop_udp>
     9f6:	bf00      	nop
     9f8:	20000000 	.word	0x20000000

000009fc <send_udp_data>:
	struct net_pkt *pkt;
	size_t len;
	int ret;

//	data->expecting_udp = sys_rand32_get() % ipsum_len;
	data->expecting_udp = ipsum_len;
     9fc:	4b13      	ldr	r3, [pc, #76]	; (a4c <send_udp_data+0x50>)
{
     9fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
	data->expecting_udp = ipsum_len;
     a00:	460a      	mov	r2, r1
     a02:	681b      	ldr	r3, [r3, #0]
     a04:	f842 3f30 	str.w	r3, [r2, #48]!
	pkt = prepare_send_pkt(ctx, data->proto, &data->expecting_udp);
     a08:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
{
     a0a:	4605      	mov	r5, r0
	pkt = prepare_send_pkt(ctx, data->proto, &data->expecting_udp);
     a0c:	f7ff ffcc 	bl	9a8 <prepare_send_pkt>
	if (!pkt) {
     a10:	4604      	mov	r4, r0
     a12:	b1a0      	cbz	r0, a3e <send_udp_data+0x42>
     a14:	6883      	ldr	r3, [r0, #8]
 *
 *  @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
     a16:	2200      	movs	r2, #0

	while (buf) {
     a18:	b99b      	cbnz	r3, a42 <send_udp_data+0x46>

	NET_ASSERT_INFO(data->expecting_udp == len,
			"Data to send %d bytes, real len %zu",
			data->expecting_udp, len);

	ret = net_app_send_pkt(ctx, pkt, NULL, 0, K_FOREVER,
     a1a:	9201      	str	r2, [sp, #4]
     a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     a20:	9200      	str	r2, [sp, #0]
     a22:	4621      	mov	r1, r4
     a24:	461a      	mov	r2, r3
     a26:	4628      	mov	r0, r5
     a28:	f01d ffc2 	bl	1e9b0 <net_app_send_pkt>
			       UINT_TO_POINTER(len));
	if (ret < 0) {
     a2c:	2800      	cmp	r0, #0
     a2e:	da02      	bge.n	a36 <send_udp_data+0x3a>
		NET_ERR("Cannot send %s data to peer (%d)", data->proto, ret);

		net_pkt_unref(pkt);
     a30:	4620      	mov	r0, r4
     a32:	f018 fdca 	bl	195ca <net_pkt_unref>
	}

	count++;
     a36:	4a06      	ldr	r2, [pc, #24]	; (a50 <send_udp_data+0x54>)
     a38:	6813      	ldr	r3, [r2, #0]
     a3a:	3301      	adds	r3, #1
     a3c:	6013      	str	r3, [r2, #0]
		if(count == 3){
//			ble_disconnect();			// commentout for timebeing to test new L2 layer
		}
//	k_delayed_work_submit(&data->recv, WAIT_TIME);
//	k_delayed_work_submit(&work_d,6000);	//something like this needs to be done
}
     a3e:	b003      	add	sp, #12
     a40:	bd30      	pop	{r4, r5, pc}
		bytes += buf->len;
     a42:	8999      	ldrh	r1, [r3, #12]
		buf = buf->frags;
     a44:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
     a46:	440a      	add	r2, r1
     a48:	e7e6      	b.n	a18 <send_udp_data+0x1c>
     a4a:	bf00      	nop
     a4c:	2000dca0 	.word	0x2000dca0
     a50:	20000018 	.word	0x20000018

00000a54 <wait_reply>:
fail:
	return ret;
}

static void wait_reply(struct k_work *work)
{
     a54:	4601      	mov	r1, r0
	struct data *data = CONTAINER_OF(work, struct data, recv);

	NET_ERR("Data packet not received");

	/* Send a new packet at this point */
	send_udp_data(data->udp, data);
     a56:	6a80      	ldr	r0, [r0, #40]	; 0x28
     a58:	f7ff bfd0 	b.w	9fc <send_udp_data>

00000a5c <adv_stop>:
		bt_le_ext_adv_stop();		//add hci_core.h as well
     a5c:	f004 bdda 	b.w	5614 <bt_le_ext_adv_stop>

00000a60 <udp_periodic_send>:
static void udp_periodic_send(struct k_work *work){
     a60:	b508      	push	{r3, lr}
		udp_data->udp = udp_ctx;
     a62:	4b07      	ldr	r3, [pc, #28]	; (a80 <udp_periodic_send+0x20>)
     a64:	6819      	ldr	r1, [r3, #0]
     a66:	4b07      	ldr	r3, [pc, #28]	; (a84 <udp_periodic_send+0x24>)
     a68:	6818      	ldr	r0, [r3, #0]
     a6a:	6288      	str	r0, [r1, #40]	; 0x28
		send_udp_data(udp_ctx, udp_data);
     a6c:	f7ff ffc6 	bl	9fc <send_udp_data>
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
     a70:	f242 7210 	movw	r2, #10000	; 0x2710
     a74:	4904      	ldr	r1, [pc, #16]	; (a88 <udp_periodic_send+0x28>)
     a76:	4805      	ldr	r0, [pc, #20]	; (a8c <udp_periodic_send+0x2c>)
}
     a78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     a7c:	f01f ba8a 	b.w	1ff94 <k_delayed_work_submit_to_queue>
     a80:	20003534 	.word	0x20003534
     a84:	20003588 	.word	0x20003588
     a88:	2000350c 	.word	0x2000350c
     a8c:	20005218 	.word	0x20005218

00000a90 <udp_connected>:
{
     a90:	b508      	push	{r3, lr}
	udp_data = user_data;
     a92:	4908      	ldr	r1, [pc, #32]	; (ab4 <udp_connected+0x24>)
	data->udp = ctx;
     a94:	6290      	str	r0, [r2, #40]	; 0x28
	udp_data = user_data;
     a96:	600a      	str	r2, [r1, #0]
	udp_ctx = ctx;
     a98:	4907      	ldr	r1, [pc, #28]	; (ab8 <udp_connected+0x28>)
     a9a:	6008      	str	r0, [r1, #0]
	send_udp_data(ctx, data);
     a9c:	4611      	mov	r1, r2
     a9e:	f7ff ffad 	bl	9fc <send_udp_data>
     aa2:	f241 7270 	movw	r2, #6000	; 0x1770
     aa6:	4905      	ldr	r1, [pc, #20]	; (abc <udp_connected+0x2c>)
     aa8:	4805      	ldr	r0, [pc, #20]	; (ac0 <udp_connected+0x30>)
}
     aaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     aae:	f01f ba71 	b.w	1ff94 <k_delayed_work_submit_to_queue>
     ab2:	bf00      	nop
     ab4:	20003534 	.word	0x20003534
     ab8:	20003588 	.word	0x20003588
     abc:	2000350c 	.word	0x2000350c
     ac0:	20005218 	.word	0x20005218

00000ac4 <connect_udp>:
{
     ac4:	b570      	push	{r4, r5, r6, lr}
     ac6:	b086      	sub	sp, #24
					  const char *peer_addr_str,
					  u16_t peer_port,
					  s32_t timeout,
					  void *user_data)
{
	return net_app_init_client(ctx,
     ac8:	f241 0392 	movw	r3, #4242	; 0x1092
     acc:	2400      	movs	r4, #0
     ace:	f242 7610 	movw	r6, #10000	; 0x2710
     ad2:	9204      	str	r2, [sp, #16]
     ad4:	9302      	str	r3, [sp, #8]
     ad6:	9101      	str	r1, [sp, #4]
     ad8:	9603      	str	r6, [sp, #12]
     ada:	9400      	str	r4, [sp, #0]
     adc:	4623      	mov	r3, r4
     ade:	2211      	movs	r2, #17
     ae0:	2102      	movs	r1, #2
     ae2:	4605      	mov	r5, r0
     ae4:	f01e f846 	bl	1eb74 <net_app_init_client>
	if (ret < 0) {
     ae8:	2800      	cmp	r0, #0
     aea:	db0f      	blt.n	b0c <connect_udp+0x48>
	ret = net_app_set_cb(ctx, udp_connected, NULL, NULL, NULL); //removed  udp_received for connection less
     aec:	9400      	str	r4, [sp, #0]
     aee:	4623      	mov	r3, r4
     af0:	4622      	mov	r2, r4
     af2:	4907      	ldr	r1, [pc, #28]	; (b10 <connect_udp+0x4c>)
     af4:	4628      	mov	r0, r5
     af6:	f01d ff47 	bl	1e988 <net_app_set_cb>
	if (ret < 0) {
     afa:	2800      	cmp	r0, #0
     afc:	db06      	blt.n	b0c <connect_udp+0x48>
	ret = net_app_connect(ctx, CONNECT_TIME);
     afe:	4631      	mov	r1, r6
     b00:	4628      	mov	r0, r5
}
     b02:	b006      	add	sp, #24
     b04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = net_app_connect(ctx, CONNECT_TIME);
     b08:	f01e b924 	b.w	1ed54 <net_app_connect>
}
     b0c:	b006      	add	sp, #24
     b0e:	bd70      	pop	{r4, r5, r6, pc}
     b10:	00000a91 	.word	0x00000a91

00000b14 <start_udp>:
}

void start_udp(void)
{
     b14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int ret;

	if (IS_ENABLED(CONFIG_NET_IPV6)) {
		k_delayed_work_init(&conf.ipv6.recv, wait_reply);
     b16:	4c0e      	ldr	r4, [pc, #56]	; (b50 <start_udp+0x3c>)
     b18:	490e      	ldr	r1, [pc, #56]	; (b54 <start_udp+0x40>)
     b1a:	4620      	mov	r0, r4
     b1c:	f01f f9c2 	bl	1fea4 <k_delayed_work_init>
		k_delayed_work_init(&work_d, adv_stop);		//intialize for adv_sto
     b20:	490d      	ldr	r1, [pc, #52]	; (b58 <start_udp+0x44>)
     b22:	480e      	ldr	r0, [pc, #56]	; (b5c <start_udp+0x48>)
     b24:	f01f f9be 	bl	1fea4 <k_delayed_work_init>
		k_delayed_work_init(&udp_work_d, udp_periodic_send);
     b28:	490d      	ldr	r1, [pc, #52]	; (b60 <start_udp+0x4c>)
     b2a:	480e      	ldr	r0, [pc, #56]	; (b64 <start_udp+0x50>)
     b2c:	f01f f9ba 	bl	1fea4 <k_delayed_work_init>
		k_delayed_work_init(&udp_stop_work_d, restart_udp);
     b30:	490d      	ldr	r1, [pc, #52]	; (b68 <start_udp+0x54>)
     b32:	480e      	ldr	r0, [pc, #56]	; (b6c <start_udp+0x58>)
     b34:	f01f f9b6 	bl	1fea4 <k_delayed_work_init>
	//	k_delayed_work_submit(&udp_stop_work_d,95000);

		ret = connect_udp(&udp6, CONFIG_NET_APP_PEER_IPV6_ADDR,
     b38:	2204      	movs	r2, #4
     b3a:	2300      	movs	r3, #0
     b3c:	9202      	str	r2, [sp, #8]
     b3e:	e88d 000c 	stmia.w	sp, {r2, r3}
     b42:	490b      	ldr	r1, [pc, #44]	; (b70 <start_udp+0x5c>)
     b44:	480b      	ldr	r0, [pc, #44]	; (b74 <start_udp+0x60>)
     b46:	4622      	mov	r2, r4
     b48:	f7ff ffbc 	bl	ac4 <connect_udp>
		if (ret < 0) {
			NET_ERR("Cannot init IPv4 UDP client (%d)", ret);
		}
	}

}
     b4c:	b004      	add	sp, #16
     b4e:	bd10      	pop	{r4, pc}
     b50:	2000dc64 	.word	0x2000dc64
     b54:	00000a55 	.word	0x00000a55
     b58:	00000a5d 	.word	0x00000a5d
     b5c:	20003560 	.word	0x20003560
     b60:	00000a61 	.word	0x00000a61
     b64:	2000350c 	.word	0x2000350c
     b68:	00000b91 	.word	0x00000b91
     b6c:	20003538 	.word	0x20003538
     b70:	000206ce 	.word	0x000206ce
     b74:	2000001c 	.word	0x2000001c

00000b78 <stop_udp>:

void stop_udp(void)
{
     b78:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_NET_IPV6)) {
		net_app_close(&udp6);
     b7a:	4c04      	ldr	r4, [pc, #16]	; (b8c <stop_udp+0x14>)
     b7c:	4620      	mov	r0, r4
     b7e:	f01d ff9d 	bl	1eabc <net_app_close>
		net_app_release(&udp6);
     b82:	4620      	mov	r0, r4

	if (IS_ENABLED(CONFIG_NET_IPV4)) {
		net_app_close(&udp4);
		net_app_release(&udp4);
	}
}
     b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_app_release(&udp6);
     b88:	f01d be9e 	b.w	1e8c8 <net_app_release>
     b8c:	2000001c 	.word	0x2000001c

00000b90 <restart_udp>:
static void restart_udp(struct k_work *work){
     b90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		stop_udp();	
     b92:	f7ff fff1 	bl	b78 <stop_udp>
		ret = connect_udp(&udp6, CONFIG_NET_APP_PEER_IPV6_ADDR,
     b96:	2204      	movs	r2, #4
     b98:	2300      	movs	r3, #0
     b9a:	9202      	str	r2, [sp, #8]
     b9c:	e88d 000c 	stmia.w	sp, {r2, r3}
     ba0:	4903      	ldr	r1, [pc, #12]	; (bb0 <restart_udp+0x20>)
     ba2:	4a04      	ldr	r2, [pc, #16]	; (bb4 <restart_udp+0x24>)
     ba4:	4804      	ldr	r0, [pc, #16]	; (bb8 <restart_udp+0x28>)
     ba6:	f7ff ff8d 	bl	ac4 <connect_udp>
}
     baa:	b005      	add	sp, #20
     bac:	f85d fb04 	ldr.w	pc, [sp], #4
     bb0:	000206ce 	.word	0x000206ce
     bb4:	2000dc64 	.word	0x2000dc64
     bb8:	2000001c 	.word	0x2000001c

00000bbc <errata_103>:
	return false;
}

static bool errata_136_nrf52840(void)
{
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     bbc:	4b05      	ldr	r3, [pc, #20]	; (bd4 <errata_103+0x18>)
     bbe:	681b      	ldr	r3, [r3, #0]
     bc0:	2b08      	cmp	r3, #8
	    (*(u32_t *)0x10000134ul == 0x0ul)) {
     bc2:	bf01      	itttt	eq
     bc4:	4b04      	ldreq	r3, [pc, #16]	; (bd8 <errata_103+0x1c>)
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     bc6:	6818      	ldreq	r0, [r3, #0]
     bc8:	fab0 f080 	clzeq	r0, r0
     bcc:	0940      	lsreq	r0, r0, #5
		return true;
	}

	return false;
     bce:	bf18      	it	ne
     bd0:	2000      	movne	r0, #0
}
     bd2:	4770      	bx	lr
     bd4:	10000130 	.word	0x10000130
     bd8:	10000134 	.word	0x10000134

00000bdc <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     bdc:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     bde:	f04f 0320 	mov.w	r3, #32
     be2:	f3ef 8111 	mrs	r1, BASEPRI
     be6:	f383 8811 	msr	BASEPRI, r3
	if (errata_36()) {
     bea:	f7ff ffe7 	bl	bbc <errata_103>
     bee:	b140      	cbz	r0, c02 <nordicsemi_nrf52_init+0x26>
		NRF_CLOCK->EVENTS_DONE = 0;
     bf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     bf4:	2200      	movs	r2, #0
     bf6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     bfa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		NRF_CLOCK->CTIV = 0;
     bfe:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	if (errata_98()) {
     c02:	f7ff ffdb 	bl	bbc <errata_103>
     c06:	b110      	cbz	r0, c0e <nordicsemi_nrf52_init+0x32>
		*(volatile u32_t *)0x4000568Cul = 0x00038148ul;
     c08:	4b38      	ldr	r3, [pc, #224]	; (cec <nordicsemi_nrf52_init+0x110>)
     c0a:	4a39      	ldr	r2, [pc, #228]	; (cf0 <nordicsemi_nrf52_init+0x114>)
     c0c:	601a      	str	r2, [r3, #0]
	if (errata_103()) {
     c0e:	f7ff ffd5 	bl	bbc <errata_103>
     c12:	b118      	cbz	r0, c1c <nordicsemi_nrf52_init+0x40>
		NRF_CCM->MAXPACKETSIZE = 0xFBul;
     c14:	4b37      	ldr	r3, [pc, #220]	; (cf4 <nordicsemi_nrf52_init+0x118>)
     c16:	22fb      	movs	r2, #251	; 0xfb
     c18:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	if (errata_115()) {
     c1c:	f7ff ffce 	bl	bbc <errata_103>
     c20:	b148      	cbz	r0, c36 <nordicsemi_nrf52_init+0x5a>
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     c22:	4835      	ldr	r0, [pc, #212]	; (cf8 <nordicsemi_nrf52_init+0x11c>)
			(*(u32_t *)0x10000258 & 0x0000000F);
     c24:	4b35      	ldr	r3, [pc, #212]	; (cfc <nordicsemi_nrf52_init+0x120>)
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     c26:	6802      	ldr	r2, [r0, #0]
			(*(u32_t *)0x10000258 & 0x0000000F);
     c28:	681b      	ldr	r3, [r3, #0]
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     c2a:	f022 020f 	bic.w	r2, r2, #15
			(*(u32_t *)0x10000258 & 0x0000000F);
     c2e:	f003 030f 	and.w	r3, r3, #15
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     c32:	4313      	orrs	r3, r2
		*(volatile u32_t *)0x40000EE4 =
     c34:	6003      	str	r3, [r0, #0]
	if (errata_120()) {
     c36:	f7ff ffc1 	bl	bbc <errata_103>
     c3a:	b118      	cbz	r0, c44 <nordicsemi_nrf52_init+0x68>
		*(volatile u32_t *)0x40029640ul = 0x200ul;
     c3c:	4b30      	ldr	r3, [pc, #192]	; (d00 <nordicsemi_nrf52_init+0x124>)
     c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
     c42:	601a      	str	r2, [r3, #0]
	if (errata_136_nrf52840()) {
     c44:	f7ff ffba 	bl	bbc <errata_103>
     c48:	b148      	cbz	r0, c5e <nordicsemi_nrf52_init+0x82>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     c4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     c4e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     c52:	07d2      	lsls	r2, r2, #31
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     c54:	bf44      	itt	mi
     c56:	f06f 0201 	mvnmi.w	r2, #1
     c5a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     c5e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     c62:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     c66:	2a00      	cmp	r2, #0
     c68:	db03      	blt.n	c72 <nordicsemi_nrf52_init+0x96>
	    ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) !=
     c6a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     c6e:	2b00      	cmp	r3, #0
     c70:	da2f      	bge.n	cd2 <nordicsemi_nrf52_init+0xf6>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     c72:	4b24      	ldr	r3, [pc, #144]	; (d04 <nordicsemi_nrf52_init+0x128>)
     c74:	2201      	movs	r2, #1
     c76:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     c7a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     c7e:	2a00      	cmp	r2, #0
     c80:	d0fb      	beq.n	c7a <nordicsemi_nrf52_init+0x9e>
		NRF_UICR->PSELRESET[0] = 18;
     c82:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     c86:	2112      	movs	r1, #18
     c88:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     c8c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     c90:	2a00      	cmp	r2, #0
     c92:	d0fb      	beq.n	c8c <nordicsemi_nrf52_init+0xb0>
		NRF_UICR->PSELRESET[1] = 18;
     c94:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     c98:	2212      	movs	r2, #18
     c9a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     c9e:	4b19      	ldr	r3, [pc, #100]	; (d04 <nordicsemi_nrf52_init+0x128>)
     ca0:	461a      	mov	r2, r3
     ca2:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     ca6:	2900      	cmp	r1, #0
     ca8:	d0fb      	beq.n	ca2 <nordicsemi_nrf52_init+0xc6>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     caa:	2100      	movs	r1, #0
     cac:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     cb0:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     cb4:	2b00      	cmp	r3, #0
     cb6:	d0fb      	beq.n	cb0 <nordicsemi_nrf52_init+0xd4>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     cb8:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     cbc:	4912      	ldr	r1, [pc, #72]	; (d08 <nordicsemi_nrf52_init+0x12c>)
     cbe:	4b13      	ldr	r3, [pc, #76]	; (d0c <nordicsemi_nrf52_init+0x130>)
     cc0:	68ca      	ldr	r2, [r1, #12]
     cc2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     cc6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     cc8:	60cb      	str	r3, [r1, #12]
     cca:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     cce:	bf00      	nop
     cd0:	e7fd      	b.n	cce <nordicsemi_nrf52_init+0xf2>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     cd2:	4b0d      	ldr	r3, [pc, #52]	; (d08 <nordicsemi_nrf52_init+0x12c>)
     cd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     cd8:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     cda:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     cdc:	4b0c      	ldr	r3, [pc, #48]	; (d10 <nordicsemi_nrf52_init+0x134>)
     cde:	4a0d      	ldr	r2, [pc, #52]	; (d14 <nordicsemi_nrf52_init+0x138>)
     ce0:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     ce2:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     ce6:	2000      	movs	r0, #0
     ce8:	bd08      	pop	{r3, pc}
     cea:	bf00      	nop
     cec:	4000568c 	.word	0x4000568c
     cf0:	00038148 	.word	0x00038148
     cf4:	4000f000 	.word	0x4000f000
     cf8:	40000ee4 	.word	0x40000ee4
     cfc:	10000258 	.word	0x10000258
     d00:	40029640 	.word	0x40029640
     d04:	4001e000 	.word	0x4001e000
     d08:	e000ed00 	.word	0xe000ed00
     d0c:	05fa0004 	.word	0x05fa0004
     d10:	2000dce8 	.word	0x2000dce8
     d14:	03d09000 	.word	0x03d09000

00000d18 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     d18:	4808      	ldr	r0, [pc, #32]	; (d3c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
     d1a:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
     d1c:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
     d1e:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
     d20:	d80b      	bhi.n	d3a <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
     d22:	69c0      	ldr	r0, [r0, #28]
    cmp r0, r1
     d24:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     d26:	d008      	beq.n	d3a <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
     d28:	b500      	push	{lr}
    bl _update_time_slice_before_swap
     d2a:	f01e fd5b 	bl	1f7e4 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
     d2e:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     d32:	4903      	ldr	r1, [pc, #12]	; (d40 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
     d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
     d38:	600a      	str	r2, [r1, #0]

00000d3a <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
     d3a:	4770      	bx	lr
    ldr r0, =_kernel
     d3c:	200033e0 	.word	0x200033e0
    ldr r1, =_SCS_ICSR
     d40:	e000ed04 	.word	0xe000ed04

00000d44 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     d44:	4804      	ldr	r0, [pc, #16]	; (d58 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
     d46:	2300      	movs	r3, #0
     d48:	2120      	movs	r1, #32
     d4a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
     d4c:	3301      	adds	r3, #1
     d4e:	2b2e      	cmp	r3, #46	; 0x2e
     d50:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
     d54:	d1f9      	bne.n	d4a <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
     d56:	4770      	bx	lr
     d58:	e000e100 	.word	0xe000e100

00000d5c <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     d5c:	4a08      	ldr	r2, [pc, #32]	; (d80 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
     d5e:	4909      	ldr	r1, [pc, #36]	; (d84 <__swap+0x28>)
	_current->arch.basepri = key;
     d60:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     d62:	6809      	ldr	r1, [r1, #0]
     d64:	6659      	str	r1, [r3, #100]	; 0x64

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     d66:	4908      	ldr	r1, [pc, #32]	; (d88 <__swap+0x2c>)
	_current->arch.basepri = key;
     d68:	6618      	str	r0, [r3, #96]	; 0x60
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     d6a:	684b      	ldr	r3, [r1, #4]
     d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     d70:	604b      	str	r3, [r1, #4]
     d72:	2300      	movs	r3, #0
     d74:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
     d78:	6893      	ldr	r3, [r2, #8]
}
     d7a:	6e58      	ldr	r0, [r3, #100]	; 0x64
     d7c:	4770      	bx	lr
     d7e:	bf00      	nop
     d80:	200033e0 	.word	0x200033e0
     d84:	0002157c 	.word	0x0002157c
     d88:	e000ed00 	.word	0xe000ed00

00000d8c <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     d8c:	490e      	ldr	r1, [pc, #56]	; (dc8 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
     d8e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     d90:	2028      	movs	r0, #40	; 0x28
    add r0, r2
     d92:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
     d94:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     d98:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
     d9c:	4f0b      	ldr	r7, [pc, #44]	; (dcc <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     d9e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     da2:	2020      	movs	r0, #32
    msr BASEPRI, r0
     da4:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
     da8:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
     daa:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
     dac:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
     dae:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
     db0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     db2:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     db4:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     db8:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
     dbc:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
     dc0:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
     dc4:	4770      	bx	lr
     dc6:	0000      	.short	0x0000
    ldr r1, =_kernel
     dc8:	200033e0 	.word	0x200033e0
    ldr v4, =_SCS_ICSR
     dcc:	e000ed04 	.word	0xe000ed04

00000dd0 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
     dd0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     dd4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     dd6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     dda:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     dde:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
     de0:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
     de4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

    cmp r1, #0
#endif
    beq _context_switch
     de8:	d001      	beq.n	dee <_context_switch>

    cmp r1, #2
     dea:	2902      	cmp	r1, #2
    beq _oops
     dec:	d007      	beq.n	dfe <_oops>

00000dee <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
     dee:	4040      	eors	r0, r0
    msr BASEPRI, r0
     df0:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
     df4:	4904      	ldr	r1, [pc, #16]	; (e08 <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
     df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
     dfa:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
     dfc:	4770      	bx	lr

00000dfe <_oops>:

_oops:
    push {lr}
     dfe:	b500      	push	{lr}
    blx _do_kernel_oops
     e00:	f000 fa2c 	bl	125c <_do_kernel_oops>
    pop {pc}
     e04:	bd00      	pop	{pc}
     e06:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
     e08:	e000ed04 	.word	0xe000ed04

00000e0c <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
     e0c:	b510      	push	{r4, lr}
     e0e:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     e10:	f01e fcbe 	bl	1f790 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
     e14:	6822      	ldr	r2, [r4, #0]
     e16:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
     e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
     e1c:	4801      	ldr	r0, [pc, #4]	; (e24 <_FaultThreadShow.isra.2+0x18>)
     e1e:	f000 bca9 	b.w	1774 <printk>
     e22:	bf00      	nop
     e24:	0002083f 	.word	0x0002083f

00000e28 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _UsageFault(const NANO_ESF *esf)
{
     e28:	b510      	push	{r4, lr}
     e2a:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
     e2c:	481a      	ldr	r0, [pc, #104]	; (e98 <_UsageFault+0x70>)
     e2e:	f000 fca1 	bl	1774 <printk>

	_FaultThreadShow(esf);
     e32:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     e36:	4c19      	ldr	r4, [pc, #100]	; (e9c <_UsageFault+0x74>)
	_FaultThreadShow(esf);
     e38:	f7ff ffe8 	bl	e0c <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     e3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     e3e:	019a      	lsls	r2, r3, #6
     e40:	d502      	bpl.n	e48 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
     e42:	4817      	ldr	r0, [pc, #92]	; (ea0 <_UsageFault+0x78>)
     e44:	f000 fc96 	bl	1774 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
     e48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     e4a:	01db      	lsls	r3, r3, #7
     e4c:	d502      	bpl.n	e54 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
     e4e:	4815      	ldr	r0, [pc, #84]	; (ea4 <_UsageFault+0x7c>)
     e50:	f000 fc90 	bl	1774 <printk>
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if (SCB->CFSR & SCB_CFSR_STKOF_Msk) {
		PR_EXC("  Stack overflow\n");
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
     e54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     e56:	0318      	lsls	r0, r3, #12
     e58:	d502      	bpl.n	e60 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
     e5a:	4813      	ldr	r0, [pc, #76]	; (ea8 <_UsageFault+0x80>)
     e5c:	f000 fc8a 	bl	1774 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
     e60:	4c0e      	ldr	r4, [pc, #56]	; (e9c <_UsageFault+0x74>)
     e62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     e64:	0359      	lsls	r1, r3, #13
     e66:	d502      	bpl.n	e6e <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
     e68:	4810      	ldr	r0, [pc, #64]	; (eac <_UsageFault+0x84>)
     e6a:	f000 fc83 	bl	1774 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
     e6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     e70:	039a      	lsls	r2, r3, #14
     e72:	d502      	bpl.n	e7a <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
     e74:	480e      	ldr	r0, [pc, #56]	; (eb0 <_UsageFault+0x88>)
     e76:	f000 fc7d 	bl	1774 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
     e7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     e7c:	03db      	lsls	r3, r3, #15
     e7e:	d502      	bpl.n	e86 <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
     e80:	480c      	ldr	r0, [pc, #48]	; (eb4 <_UsageFault+0x8c>)
     e82:	f000 fc77 	bl	1774 <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
     e86:	4a05      	ldr	r2, [pc, #20]	; (e9c <_UsageFault+0x74>)
     e88:	6a93      	ldr	r3, [r2, #40]	; 0x28
     e8a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
     e8e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
     e92:	6293      	str	r3, [r2, #40]	; 0x28
     e94:	bd10      	pop	{r4, pc}
     e96:	bf00      	nop
     e98:	00020940 	.word	0x00020940
     e9c:	e000ed00 	.word	0xe000ed00
     ea0:	00020959 	.word	0x00020959
     ea4:	0002096d 	.word	0x0002096d
     ea8:	00020988 	.word	0x00020988
     eac:	000209a7 	.word	0x000209a7
     eb0:	000209cd 	.word	0x000209cd
     eb4:	000209e8 	.word	0x000209e8

00000eb8 <_MpuFault>:
{
     eb8:	b538      	push	{r3, r4, r5, lr}
     eba:	4604      	mov	r4, r0
	PR_EXC("***** MPU FAULT *****\n");
     ebc:	4819      	ldr	r0, [pc, #100]	; (f24 <_MpuFault+0x6c>)
{
     ebe:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
     ec0:	f000 fc58 	bl	1774 <printk>
	_FaultThreadShow(esf);
     ec4:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     ec8:	4c17      	ldr	r4, [pc, #92]	; (f28 <_MpuFault+0x70>)
	_FaultThreadShow(esf);
     eca:	f7ff ff9f 	bl	e0c <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     ece:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ed0:	06d9      	lsls	r1, r3, #27
     ed2:	d504      	bpl.n	ede <_MpuFault+0x26>
		PR_EXC("  Stacking error\n");
     ed4:	4815      	ldr	r0, [pc, #84]	; (f2c <_MpuFault+0x74>)
}
     ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
     eda:	f000 bc4b 	b.w	1774 <printk>
	} else if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
     ede:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ee0:	071a      	lsls	r2, r3, #28
     ee2:	d501      	bpl.n	ee8 <_MpuFault+0x30>
		PR_EXC("  Unstacking error\n");
     ee4:	4812      	ldr	r0, [pc, #72]	; (f30 <_MpuFault+0x78>)
     ee6:	e7f6      	b.n	ed6 <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
     ee8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     eea:	079b      	lsls	r3, r3, #30
     eec:	d50f      	bpl.n	f0e <_MpuFault+0x56>
		PR_EXC("  Data Access Violation\n");
     eee:	4811      	ldr	r0, [pc, #68]	; (f34 <_MpuFault+0x7c>)
     ef0:	f000 fc40 	bl	1774 <printk>
		STORE_xFAR(mmfar, SCB->MMFAR);
     ef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
     ef6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ef8:	0618      	lsls	r0, r3, #24
     efa:	d512      	bpl.n	f22 <_MpuFault+0x6a>
			PR_EXC("  Address: 0x%x\n", mmfar);
     efc:	480e      	ldr	r0, [pc, #56]	; (f38 <_MpuFault+0x80>)
     efe:	f000 fc39 	bl	1774 <printk>
			if (fromHardFault) {
     f02:	b175      	cbz	r5, f22 <_MpuFault+0x6a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
     f04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     f06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     f0a:	62a3      	str	r3, [r4, #40]	; 0x28
     f0c:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
     f0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     f10:	07da      	lsls	r2, r3, #31
     f12:	d501      	bpl.n	f18 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
     f14:	4809      	ldr	r0, [pc, #36]	; (f3c <_MpuFault+0x84>)
     f16:	e7de      	b.n	ed6 <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
     f18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     f1a:	069b      	lsls	r3, r3, #26
     f1c:	d501      	bpl.n	f22 <_MpuFault+0x6a>
		PR_EXC("  Floating-point lazy state preservation error\n");
     f1e:	4808      	ldr	r0, [pc, #32]	; (f40 <_MpuFault+0x88>)
     f20:	e7d9      	b.n	ed6 <_MpuFault+0x1e>
     f22:	bd38      	pop	{r3, r4, r5, pc}
     f24:	00020889 	.word	0x00020889
     f28:	e000ed00 	.word	0xe000ed00
     f2c:	000208a0 	.word	0x000208a0
     f30:	000208b2 	.word	0x000208b2
     f34:	000208c6 	.word	0x000208c6
     f38:	000208df 	.word	0x000208df
     f3c:	000208f0 	.word	0x000208f0
     f40:	00020910 	.word	0x00020910

00000f44 <_BusFault>:
{
     f44:	b538      	push	{r3, r4, r5, lr}
     f46:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
     f48:	481d      	ldr	r0, [pc, #116]	; (fc0 <_BusFault+0x7c>)
{
     f4a:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
     f4c:	f000 fc12 	bl	1774 <printk>
	_FaultThreadShow(esf);
     f50:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     f54:	4c1b      	ldr	r4, [pc, #108]	; (fc4 <_BusFault+0x80>)
	_FaultThreadShow(esf);
     f56:	f7ff ff59 	bl	e0c <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     f5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     f5c:	04d8      	lsls	r0, r3, #19
     f5e:	d504      	bpl.n	f6a <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
     f60:	4819      	ldr	r0, [pc, #100]	; (fc8 <_BusFault+0x84>)
}
     f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
     f66:	f000 bc05 	b.w	1774 <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
     f6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     f6c:	0519      	lsls	r1, r3, #20
     f6e:	d501      	bpl.n	f74 <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
     f70:	4816      	ldr	r0, [pc, #88]	; (fcc <_BusFault+0x88>)
     f72:	e7f6      	b.n	f62 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
     f74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     f76:	059a      	lsls	r2, r3, #22
     f78:	d514      	bpl.n	fa4 <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
     f7a:	4815      	ldr	r0, [pc, #84]	; (fd0 <_BusFault+0x8c>)
     f7c:	f000 fbfa 	bl	1774 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
     f80:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
     f82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     f84:	041b      	lsls	r3, r3, #16
     f86:	d507      	bpl.n	f98 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
     f88:	4812      	ldr	r0, [pc, #72]	; (fd4 <_BusFault+0x90>)
     f8a:	f000 fbf3 	bl	1774 <printk>
			if (fromHardFault) {
     f8e:	b11d      	cbz	r5, f98 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
     f90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     f92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
     f96:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     f98:	4b0a      	ldr	r3, [pc, #40]	; (fc4 <_BusFault+0x80>)
     f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f9c:	0558      	lsls	r0, r3, #21
     f9e:	d50e      	bpl.n	fbe <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
     fa0:	480d      	ldr	r0, [pc, #52]	; (fd8 <_BusFault+0x94>)
     fa2:	e7de      	b.n	f62 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     fa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     fa6:	0559      	lsls	r1, r3, #21
     fa8:	d4fa      	bmi.n	fa0 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
     faa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     fac:	05da      	lsls	r2, r3, #23
     fae:	d501      	bpl.n	fb4 <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
     fb0:	480a      	ldr	r0, [pc, #40]	; (fdc <_BusFault+0x98>)
     fb2:	e7d6      	b.n	f62 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
     fb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     fb6:	049b      	lsls	r3, r3, #18
     fb8:	d501      	bpl.n	fbe <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
     fba:	4809      	ldr	r0, [pc, #36]	; (fe0 <_BusFault+0x9c>)
     fbc:	e7d1      	b.n	f62 <_BusFault+0x1e>
     fbe:	bd38      	pop	{r3, r4, r5, pc}
     fc0:	00020706 	.word	0x00020706
     fc4:	e000ed00 	.word	0xe000ed00
     fc8:	000208a0 	.word	0x000208a0
     fcc:	000208b2 	.word	0x000208b2
     fd0:	0002071d 	.word	0x0002071d
     fd4:	000208df 	.word	0x000208df
     fd8:	00020737 	.word	0x00020737
     fdc:	00020753 	.word	0x00020753
     fe0:	00020910 	.word	0x00020910

00000fe4 <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
     fe4:	b538      	push	{r3, r4, r5, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     fe6:	4d27      	ldr	r5, [pc, #156]	; (1084 <_Fault+0xa0>)
     fe8:	686b      	ldr	r3, [r5, #4]
     fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
     fee:	1eda      	subs	r2, r3, #3
{
     ff0:	4604      	mov	r4, r0
	switch (fault) {
     ff2:	2a09      	cmp	r2, #9
     ff4:	d83a      	bhi.n	106c <_Fault+0x88>
     ff6:	e8df f002 	tbb	[pc, r2]
     ffa:	3305      	.short	0x3305
     ffc:	39392f35 	.word	0x39392f35
    1000:	37393939 	.word	0x37393939
	PR_EXC("***** HARD FAULT *****\n");
    1004:	4820      	ldr	r0, [pc, #128]	; (1088 <_Fault+0xa4>)
    1006:	f000 fbb5 	bl	1774 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    100a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    100c:	079a      	lsls	r2, r3, #30
    100e:	d503      	bpl.n	1018 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    1010:	481e      	ldr	r0, [pc, #120]	; (108c <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    1012:	f000 fbaf 	bl	1774 <printk>
    1016:	e00c      	b.n	1032 <_Fault+0x4e>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    1018:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    101a:	005b      	lsls	r3, r3, #1
    101c:	d509      	bpl.n	1032 <_Fault+0x4e>
		PR_EXC("  Fault escalation (see below)\n");
    101e:	481c      	ldr	r0, [pc, #112]	; (1090 <_Fault+0xac>)
    1020:	f000 fba8 	bl	1774 <printk>
		if (SCB_MMFSR) {
    1024:	4b1b      	ldr	r3, [pc, #108]	; (1094 <_Fault+0xb0>)
    1026:	781b      	ldrb	r3, [r3, #0]
    1028:	b14b      	cbz	r3, 103e <_Fault+0x5a>
			_MpuFault(esf, 1);
    102a:	2101      	movs	r1, #1
		_MpuFault(esf, 0);
    102c:	4620      	mov	r0, r4
    102e:	f7ff ff43 	bl	eb8 <_MpuFault>

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
    1032:	4621      	mov	r1, r4
    1034:	2000      	movs	r0, #0
}
    1036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
    103a:	f000 b913 	b.w	1264 <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
    103e:	4b16      	ldr	r3, [pc, #88]	; (1098 <_Fault+0xb4>)
    1040:	781b      	ldrb	r3, [r3, #0]
    1042:	b123      	cbz	r3, 104e <_Fault+0x6a>
			_BusFault(esf, 1);
    1044:	2101      	movs	r1, #1
		_BusFault(esf, 0);
    1046:	4620      	mov	r0, r4
    1048:	f7ff ff7c 	bl	f44 <_BusFault>
    104c:	e7f1      	b.n	1032 <_Fault+0x4e>
		} else if (SCB_UFSR) {
    104e:	4b13      	ldr	r3, [pc, #76]	; (109c <_Fault+0xb8>)
    1050:	881b      	ldrh	r3, [r3, #0]
    1052:	b29b      	uxth	r3, r3
    1054:	2b00      	cmp	r3, #0
    1056:	d0ec      	beq.n	1032 <_Fault+0x4e>
		_UsageFault(esf);
    1058:	4620      	mov	r0, r4
    105a:	f7ff fee5 	bl	e28 <_UsageFault>
    105e:	e7e8      	b.n	1032 <_Fault+0x4e>
		_MpuFault(esf, 0);
    1060:	2100      	movs	r1, #0
    1062:	e7e3      	b.n	102c <_Fault+0x48>
		_BusFault(esf, 0);
    1064:	2100      	movs	r1, #0
    1066:	e7ee      	b.n	1046 <_Fault+0x62>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    1068:	480d      	ldr	r0, [pc, #52]	; (10a0 <_Fault+0xbc>)
    106a:	e7d2      	b.n	1012 <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
    106c:	480d      	ldr	r0, [pc, #52]	; (10a4 <_Fault+0xc0>)
    106e:	490e      	ldr	r1, [pc, #56]	; (10a8 <_Fault+0xc4>)
    1070:	f1a3 0210 	sub.w	r2, r3, #16
    1074:	2b0f      	cmp	r3, #15
    1076:	bfd8      	it	le
    1078:	4601      	movle	r1, r0
    107a:	480c      	ldr	r0, [pc, #48]	; (10ac <_Fault+0xc8>)
    107c:	f000 fb7a 	bl	1774 <printk>
    1080:	e7d7      	b.n	1032 <_Fault+0x4e>
    1082:	bf00      	nop
    1084:	e000ed00 	.word	0xe000ed00
    1088:	0002079a 	.word	0x0002079a
    108c:	000207b2 	.word	0x000207b2
    1090:	000207d4 	.word	0x000207d4
    1094:	e000ed28 	.word	0xe000ed28
    1098:	e000ed29 	.word	0xe000ed29
    109c:	e000ed2a 	.word	0xe000ed2a
    10a0:	000207f4 	.word	0x000207f4
    10a4:	0002076c 	.word	0x0002076c
    10a8:	00020781 	.word	0x00020781
    10ac:	0002082b 	.word	0x0002082b

000010b0 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    10b0:	4a02      	ldr	r2, [pc, #8]	; (10bc <_FaultInit+0xc>)
    10b2:	6953      	ldr	r3, [r2, #20]
    10b4:	f043 0310 	orr.w	r3, r3, #16
    10b8:	6153      	str	r3, [r2, #20]
    10ba:	4770      	bx	lr
    10bc:	e000ed00 	.word	0xe000ed00

000010c0 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    10c0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    10c2:	2b00      	cmp	r3, #0
    10c4:	db08      	blt.n	10d8 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10c6:	2201      	movs	r2, #1
    10c8:	f000 001f 	and.w	r0, r0, #31
    10cc:	fa02 f000 	lsl.w	r0, r2, r0
    10d0:	095b      	lsrs	r3, r3, #5
    10d2:	4a02      	ldr	r2, [pc, #8]	; (10dc <_arch_irq_enable+0x1c>)
    10d4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    10d8:	4770      	bx	lr
    10da:	bf00      	nop
    10dc:	e000e100 	.word	0xe000e100

000010e0 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    10e0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    10e2:	2b00      	cmp	r3, #0
    10e4:	db0d      	blt.n	1102 <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10e6:	2201      	movs	r2, #1
    10e8:	095b      	lsrs	r3, r3, #5
    10ea:	f000 001f 	and.w	r0, r0, #31
    10ee:	fa02 f000 	lsl.w	r0, r2, r0
    10f2:	3320      	adds	r3, #32
    10f4:	4a03      	ldr	r2, [pc, #12]	; (1104 <_arch_irq_disable+0x24>)
    10f6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    10fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    10fe:	f3bf 8f6f 	isb	sy
    1102:	4770      	bx	lr
    1104:	e000e100 	.word	0xe000e100

00001108 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    1108:	0942      	lsrs	r2, r0, #5
    110a:	4b05      	ldr	r3, [pc, #20]	; (1120 <_arch_irq_is_enabled+0x18>)
    110c:	f000 001f 	and.w	r0, r0, #31
    1110:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1114:	2301      	movs	r3, #1
    1116:	fa03 f000 	lsl.w	r0, r3, r0
}
    111a:	4010      	ands	r0, r2
    111c:	4770      	bx	lr
    111e:	bf00      	nop
    1120:	e000e100 	.word	0xe000e100

00001124 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1124:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1126:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1128:	bfa8      	it	ge
    112a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    112e:	f101 0101 	add.w	r1, r1, #1
    1132:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1136:	bfad      	iteet	ge
    1138:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    113c:	f000 000f 	andlt.w	r0, r0, #15
    1140:	4b03      	ldrlt	r3, [pc, #12]	; (1150 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1142:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1144:	bfb6      	itet	lt
    1146:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1148:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    114c:	5419      	strblt	r1, [r3, r0]
    114e:	4770      	bx	lr
    1150:	e000ed14 	.word	0xe000ed14

00001154 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    1154:	f000 b842 	b.w	11dc <__bus_fault>

00001158 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    1158:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    115a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    115c:	4b04      	ldr	r3, [pc, #16]	; (1170 <_arch_isr_direct_pm+0x18>)
    115e:	6998      	ldr	r0, [r3, #24]
    1160:	b118      	cbz	r0, 116a <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    1162:	2200      	movs	r2, #0
    1164:	619a      	str	r2, [r3, #24]
		_sys_power_save_idle_exit(idle_val);
    1166:	f01d fed7 	bl	1ef18 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    116a:	b662      	cpsie	i
    116c:	bd08      	pop	{r3, pc}
    116e:	bf00      	nop
    1170:	200033e0 	.word	0x200033e0

00001174 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    1174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1176:	460c      	mov	r4, r1
    1178:	4616      	mov	r6, r2
    117a:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    117c:	2204      	movs	r2, #4
    117e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1180:	9909      	ldr	r1, [sp, #36]	; 0x24
    1182:	4605      	mov	r5, r0
    1184:	f01e fe2c 	bl	1fde0 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1188:	f1a6 0120 	sub.w	r1, r6, #32
    118c:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    118e:	4a0c      	ldr	r2, [pc, #48]	; (11c0 <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    1190:	65ac      	str	r4, [r5, #88]	; 0x58
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1192:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    1196:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1198:	f022 0201 	bic.w	r2, r2, #1
    119c:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
    119e:	652b      	str	r3, [r5, #80]	; 0x50
	thread->stack_info.size = (u32_t)stackSize;
    11a0:	65ee      	str	r6, [r5, #92]	; 0x5c
    11a2:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    11a4:	9a06      	ldr	r2, [sp, #24]
    11a6:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    11a8:	9a07      	ldr	r2, [sp, #28]
    11aa:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    11ac:	9a08      	ldr	r2, [sp, #32]
    11ae:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    11b0:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    11b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    11b6:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    11b8:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    11ba:	662b      	str	r3, [r5, #96]	; 0x60
    11bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11be:	bf00      	nop
    11c0:	0001fc55 	.word	0x0001fc55

000011c4 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    11c4:	4901      	ldr	r1, [pc, #4]	; (11cc <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    11c6:	2210      	movs	r2, #16
	str r2, [r1]
    11c8:	600a      	str	r2, [r1, #0]
	bx lr
    11ca:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    11cc:	e000ed10 	.word	0xe000ed10

000011d0 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    11d0:	4040      	eors	r0, r0
	msr BASEPRI, r0
    11d2:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    11d6:	bf30      	wfi

	bx lr
    11d8:	4770      	bx	lr
    11da:	bf00      	nop

000011dc <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    11dc:	4040      	eors	r0, r0
	msr BASEPRI, r0
    11de:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    11e2:	f8df c01c 	ldr.w	ip, [pc, #28]	; 1200 <__bus_fault+0x24>
	ldr ip, [ip]
    11e6:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    11ea:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    11ee:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    11f0:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    11f4:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	push {lr}
    11f8:	b500      	push	{lr}
	bl _Fault
    11fa:	f7ff fef3 	bl	fe4 <_Fault>

	pop {pc}
    11fe:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    1200:	e000ed04 	.word	0xe000ed04

00001204 <_NanoFatalErrorHandler>:
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
    1204:	2804      	cmp	r0, #4
{
    1206:	b538      	push	{r3, r4, r5, lr}
    1208:	4604      	mov	r4, r0
    120a:	460d      	mov	r5, r1
	switch (reason) {
    120c:	d013      	beq.n	1236 <_NanoFatalErrorHandler+0x32>
    120e:	2805      	cmp	r0, #5
    1210:	d013      	beq.n	123a <_NanoFatalErrorHandler+0x36>
    1212:	2803      	cmp	r0, #3
    1214:	d113      	bne.n	123e <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    1216:	480c      	ldr	r0, [pc, #48]	; (1248 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
    1218:	f000 faac 	bl	1774 <printk>
    121c:	f01e fab8 	bl	1f790 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    1220:	69aa      	ldr	r2, [r5, #24]
    1222:	4601      	mov	r1, r0
    1224:	4809      	ldr	r0, [pc, #36]	; (124c <_NanoFatalErrorHandler+0x48>)
    1226:	f000 faa5 	bl	1774 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    122a:	4629      	mov	r1, r5
    122c:	4620      	mov	r0, r4
}
    122e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    1232:	f000 b817 	b.w	1264 <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
    1236:	4806      	ldr	r0, [pc, #24]	; (1250 <_NanoFatalErrorHandler+0x4c>)
    1238:	e7ee      	b.n	1218 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
    123a:	4806      	ldr	r0, [pc, #24]	; (1254 <_NanoFatalErrorHandler+0x50>)
    123c:	e7ec      	b.n	1218 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    123e:	4601      	mov	r1, r0
    1240:	4805      	ldr	r0, [pc, #20]	; (1258 <_NanoFatalErrorHandler+0x54>)
    1242:	f000 fa97 	bl	1774 <printk>
		break;
    1246:	e7e9      	b.n	121c <_NanoFatalErrorHandler+0x18>
    1248:	00020a14 	.word	0x00020a14
    124c:	00020a92 	.word	0x00020a92
    1250:	00020a3a 	.word	0x00020a3a
    1254:	00020a54 	.word	0x00020a54
    1258:	00020a6f 	.word	0x00020a6f

0000125c <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    125c:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    125e:	6800      	ldr	r0, [r0, #0]
    1260:	f7ff bfd0 	b.w	1204 <_NanoFatalErrorHandler>

00001264 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1264:	2805      	cmp	r0, #5
{
    1266:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1268:	d00c      	beq.n	1284 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    126a:	f01e fcdb 	bl	1fc24 <k_is_in_isr>
    126e:	b160      	cbz	r0, 128a <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1270:	f01e fcd8 	bl	1fc24 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1274:	4b0c      	ldr	r3, [pc, #48]	; (12a8 <_SysFatalErrorHandler+0x44>)
    1276:	490d      	ldr	r1, [pc, #52]	; (12ac <_SysFatalErrorHandler+0x48>)
    1278:	2800      	cmp	r0, #0
    127a:	bf08      	it	eq
    127c:	4619      	moveq	r1, r3
    127e:	480c      	ldr	r0, [pc, #48]	; (12b0 <_SysFatalErrorHandler+0x4c>)
    1280:	f000 fa78 	bl	1774 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1284:	f7ff ffa4 	bl	11d0 <k_cpu_idle>
    1288:	e7fc      	b.n	1284 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    128a:	f01e fcdb 	bl	1fc44 <_is_thread_essential>
    128e:	2800      	cmp	r0, #0
    1290:	d1ee      	bne.n	1270 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1292:	4c08      	ldr	r4, [pc, #32]	; (12b4 <_SysFatalErrorHandler+0x50>)
    1294:	4808      	ldr	r0, [pc, #32]	; (12b8 <_SysFatalErrorHandler+0x54>)
    1296:	68a1      	ldr	r1, [r4, #8]
    1298:	f000 fa6c 	bl	1774 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    129c:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    129e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    12a2:	f000 b80b 	b.w	12bc <_impl_k_thread_abort>
    12a6:	bf00      	nop
    12a8:	00020ad2 	.word	0x00020ad2
    12ac:	00020ace 	.word	0x00020ace
    12b0:	00020ae3 	.word	0x00020ae3
    12b4:	200033e0 	.word	0x200033e0
    12b8:	00020b03 	.word	0x00020b03

000012bc <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    12bc:	b538      	push	{r3, r4, r5, lr}
    12be:	4605      	mov	r5, r0
	__asm__ volatile(
    12c0:	f04f 0320 	mov.w	r3, #32
    12c4:	f3ef 8411 	mrs	r4, BASEPRI
    12c8:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    12cc:	f01e fd18 	bl	1fd00 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    12d0:	4b0b      	ldr	r3, [pc, #44]	; (1300 <_impl_k_thread_abort+0x44>)
    12d2:	689b      	ldr	r3, [r3, #8]
    12d4:	429d      	cmp	r5, r3
    12d6:	d10d      	bne.n	12f4 <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    12d8:	4b0a      	ldr	r3, [pc, #40]	; (1304 <_impl_k_thread_abort+0x48>)
    12da:	685a      	ldr	r2, [r3, #4]
    12dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
    12e0:	b922      	cbnz	r2, 12ec <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    12e2:	f01e fa7f 	bl	1f7e4 <_update_time_slice_before_swap>

	return __swap(key);
    12e6:	4620      	mov	r0, r4
    12e8:	f7ff fd38 	bl	d5c <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    12ec:	685a      	ldr	r2, [r3, #4]
    12ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    12f2:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
    12f4:	4620      	mov	r0, r4
}
    12f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule_threads(key);
    12fa:	f01e b9d7 	b.w	1f6ac <_reschedule_threads>
    12fe:	bf00      	nop
    1300:	200033e0 	.word	0x200033e0
    1304:	e000ed00 	.word	0xe000ed00

00001308 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1308:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    130a:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    130c:	4a0b      	ldr	r2, [pc, #44]	; (133c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    130e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1310:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1312:	bf1e      	ittt	ne
	movne	r1, #0
    1314:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1316:	6191      	strne	r1, [r2, #24]
		blxne	_sys_power_save_idle_exit
    1318:	f01d fdfe 	blne	1ef18 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    131c:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    131e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1322:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1326:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    132a:	4905      	ldr	r1, [pc, #20]	; (1340 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    132c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    132e:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1330:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    1332:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    1336:	f7ff bcef 	b.w	d18 <_ExcExit>
    133a:	0000      	.short	0x0000
	ldr r2, =_kernel
    133c:	200033e0 	.word	0x200033e0
	ldr r1, =_sw_isr_table
    1340:	000000f8 	.word	0x000000f8

00001344 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1344:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1346:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    134a:	4805      	ldr	r0, [pc, #20]	; (1360 <__reset+0x1c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    134c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1350:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1352:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1356:	2002      	movs	r0, #2
    msr CONTROL, r0
    1358:	f380 8814 	msr	CONTROL, r0

    b _PrepC
    135c:	f000 b806 	b.w	136c <_PrepC>
    ldr r0, =_interrupt_stack
    1360:	2000d028 	.word	0x2000d028

00001364 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1364:	bf30      	wfi
    b _SysNmiOnReset
    1366:	f7ff bffd 	b.w	1364 <_SysNmiOnReset>
    136a:	bf00      	nop

0000136c <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    136c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    136e:	4b07      	ldr	r3, [pc, #28]	; (138c <_PrepC+0x20>)
    1370:	4a07      	ldr	r2, [pc, #28]	; (1390 <_PrepC+0x24>)
    1372:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1376:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1378:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    137c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1380:	f01d fdfc 	bl	1ef7c <_bss_zero>
	_data_copy();
    1384:	f01d fe04 	bl	1ef90 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1388:	f01d fe2a 	bl	1efe0 <_Cstart>
    138c:	00000000 	.word	0x00000000
    1390:	e000ed00 	.word	0xe000ed00

00001394 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1394:	b508      	push	{r3, lr}
	handler();
    1396:	f7ff ffe5 	bl	1364 <_SysNmiOnReset>
	_ExcExit();
}
    139a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    139e:	f7ff bcbb 	b.w	d18 <_ExcExit>
	...

000013a4 <arm_mpu_init>:
	}
}

static inline u8_t _get_num_regions(void)
{
	u32_t type = ARM_MPU_DEV->type;
    13a4:	4b15      	ldr	r3, [pc, #84]	; (13fc <arm_mpu_init+0x58>)
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
    13a6:	4916      	ldr	r1, [pc, #88]	; (1400 <arm_mpu_init+0x5c>)
	u32_t type = ARM_MPU_DEV->type;
    13a8:	681a      	ldr	r2, [r3, #0]
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    13aa:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    13ac:	680d      	ldr	r5, [r1, #0]
    13ae:	f3c2 2207 	ubfx	r2, r2, #8, #8
    13b2:	4295      	cmp	r5, r2
    13b4:	d80f      	bhi.n	13d6 <arm_mpu_init+0x32>
	ARM_MPU_DEV->ctrl = 0;
    13b6:	2200      	movs	r2, #0
    13b8:	6848      	ldr	r0, [r1, #4]
    13ba:	605a      	str	r2, [r3, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    13bc:	4295      	cmp	r5, r2
    13be:	f100 000c 	add.w	r0, r0, #12
    13c2:	d10a      	bne.n	13da <arm_mpu_init+0x36>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    13c4:	2205      	movs	r2, #5
    13c6:	605a      	str	r2, [r3, #4]
	arm_mpu_enabled = 1;
    13c8:	4b0e      	ldr	r3, [pc, #56]	; (1404 <arm_mpu_init+0x60>)
    13ca:	2201      	movs	r2, #1
    13cc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    13ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    13d2:	f3bf 8f6f 	isb	sy
	ARG_UNUSED(arg);

	_arm_mpu_config();

	return 0;
}
    13d6:	2000      	movs	r0, #0
    13d8:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    13da:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    13de:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    13e2:	609a      	str	r2, [r3, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    13e4:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    13e8:	f041 0110 	orr.w	r1, r1, #16
    13ec:	4311      	orrs	r1, r2
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    13ee:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    13f2:	60d9      	str	r1, [r3, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    13f4:	3201      	adds	r2, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    13f6:	611c      	str	r4, [r3, #16]
    13f8:	e7e0      	b.n	13bc <arm_mpu_init+0x18>
    13fa:	bf00      	nop
    13fc:	e000ed90 	.word	0xe000ed90
    1400:	2000dca4 	.word	0x2000dca4
    1404:	2000008c 	.word	0x2000008c

00001408 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    1408:	2000      	movs	r0, #0
    140a:	4770      	bx	lr

0000140c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    140c:	680b      	ldr	r3, [r1, #0]
    140e:	3301      	adds	r3, #1
    1410:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1412:	4b01      	ldr	r3, [pc, #4]	; (1418 <char_out+0xc>)
    1414:	681b      	ldr	r3, [r3, #0]
    1416:	4718      	bx	r3
    1418:	2000dcec 	.word	0x2000dcec

0000141c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    141c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1420:	b085      	sub	sp, #20
    1422:	469b      	mov	fp, r3
    1424:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    1426:	f8df a090 	ldr.w	sl, [pc, #144]	; 14b8 <_printk_dec_ulong+0x9c>
    142a:	2c01      	cmp	r4, #1
    142c:	bfb8      	it	lt
    142e:	2401      	movlt	r4, #1
    1430:	2b01      	cmp	r3, #1
    1432:	bf0c      	ite	eq
    1434:	2330      	moveq	r3, #48	; 0x30
    1436:	2320      	movne	r3, #32
    1438:	4615      	mov	r5, r2
    143a:	4680      	mov	r8, r0
    143c:	4689      	mov	r9, r1
    143e:	9401      	str	r4, [sp, #4]
    1440:	9302      	str	r3, [sp, #8]
    1442:	2601      	movs	r6, #1
    1444:	270a      	movs	r7, #10
    1446:	2200      	movs	r2, #0
    1448:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
    144c:	b90a      	cbnz	r2, 1452 <_printk_dec_ulong+0x36>
    144e:	45aa      	cmp	sl, r5
    1450:	d21f      	bcs.n	1492 <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
    1452:	fbb5 f0f4 	udiv	r0, r5, r4
    1456:	4649      	mov	r1, r9
    1458:	3030      	adds	r0, #48	; 0x30
    145a:	47c0      	blx	r8
			digits++;
    145c:	3601      	adds	r6, #1
			found_largest_digit = 1;
    145e:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    1460:	3f01      	subs	r7, #1
	while (pos >= 9) {
    1462:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
    1464:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
    1468:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
    146c:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
    1470:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
    1474:	d1e8      	bne.n	1448 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
    1476:	4649      	mov	r1, r9
    1478:	f105 0030 	add.w	r0, r5, #48	; 0x30
    147c:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
    147e:	f1bb 0f03 	cmp.w	fp, #3
    1482:	d103      	bne.n	148c <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
    1484:	9b01      	ldr	r3, [sp, #4]
    1486:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
    1488:	2c00      	cmp	r4, #0
    148a:	dc0f      	bgt.n	14ac <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
    148c:	b005      	add	sp, #20
    148e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    1492:	9b01      	ldr	r3, [sp, #4]
    1494:	42bb      	cmp	r3, r7
    1496:	dbe3      	blt.n	1460 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    1498:	f1bb 0f02 	cmp.w	fp, #2
    149c:	d8e0      	bhi.n	1460 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    149e:	4649      	mov	r1, r9
    14a0:	9802      	ldr	r0, [sp, #8]
    14a2:	9203      	str	r2, [sp, #12]
			digits++;
    14a4:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    14a6:	47c0      	blx	r8
			digits++;
    14a8:	9a03      	ldr	r2, [sp, #12]
    14aa:	e7d9      	b.n	1460 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    14ac:	4649      	mov	r1, r9
    14ae:	2020      	movs	r0, #32
    14b0:	47c0      	blx	r8
    14b2:	3c01      	subs	r4, #1
    14b4:	e7e8      	b.n	1488 <_printk_dec_ulong+0x6c>
    14b6:	bf00      	nop
    14b8:	3b9ac9ff 	.word	0x3b9ac9ff

000014bc <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
    14bc:	680a      	ldr	r2, [r1, #0]
    14be:	688b      	ldr	r3, [r1, #8]
{
    14c0:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
    14c2:	b112      	cbz	r2, 14ca <str_out+0xe>
    14c4:	684c      	ldr	r4, [r1, #4]
    14c6:	42a3      	cmp	r3, r4
    14c8:	db02      	blt.n	14d0 <str_out+0x14>
		ctx->count++;
    14ca:	3301      	adds	r3, #1
    14cc:	608b      	str	r3, [r1, #8]
		return c;
    14ce:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
    14d0:	1e65      	subs	r5, r4, #1
    14d2:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
    14d4:	bf0b      	itete	eq
    14d6:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
    14d8:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
    14da:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
    14dc:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
    14de:	bf0c      	ite	eq
    14e0:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
    14e2:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
    14e4:	bd30      	pop	{r4, r5, pc}
	...

000014e8 <__printk_hook_install>:
	_char_out = fn;
    14e8:	4b01      	ldr	r3, [pc, #4]	; (14f0 <__printk_hook_install+0x8>)
    14ea:	6018      	str	r0, [r3, #0]
    14ec:	4770      	bx	lr
    14ee:	bf00      	nop
    14f0:	2000dcec 	.word	0x2000dcec

000014f4 <_vprintk>:
{
    14f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14f8:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
    14fa:	f04f 0a00 	mov.w	sl, #0
{
    14fe:	4606      	mov	r6, r0
    1500:	460f      	mov	r7, r1
    1502:	9204      	str	r2, [sp, #16]
    1504:	461c      	mov	r4, r3
	int min_width = -1;
    1506:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    150a:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
    150c:	4655      	mov	r5, sl
	while (*fmt) {
    150e:	9b04      	ldr	r3, [sp, #16]
    1510:	7818      	ldrb	r0, [r3, #0]
    1512:	b910      	cbnz	r0, 151a <_vprintk+0x26>
}
    1514:	b009      	add	sp, #36	; 0x24
    1516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
    151a:	b945      	cbnz	r5, 152e <_vprintk+0x3a>
			if (*fmt != '%') {
    151c:	2825      	cmp	r0, #37	; 0x25
    151e:	f000 810c 	beq.w	173a <_vprintk+0x246>
				out((int)*fmt, ctx);
    1522:	4639      	mov	r1, r7
    1524:	47b0      	blx	r6
		++fmt;
    1526:	9b04      	ldr	r3, [sp, #16]
    1528:	3301      	adds	r3, #1
    152a:	9304      	str	r3, [sp, #16]
    152c:	e7ef      	b.n	150e <_vprintk+0x1a>
			switch (*fmt) {
    152e:	2864      	cmp	r0, #100	; 0x64
    1530:	d061      	beq.n	15f6 <_vprintk+0x102>
    1532:	d819      	bhi.n	1568 <_vprintk+0x74>
    1534:	2839      	cmp	r0, #57	; 0x39
    1536:	d80a      	bhi.n	154e <_vprintk+0x5a>
    1538:	2831      	cmp	r0, #49	; 0x31
    153a:	d250      	bcs.n	15de <_vprintk+0xea>
    153c:	282d      	cmp	r0, #45	; 0x2d
    153e:	d03c      	beq.n	15ba <_vprintk+0xc6>
    1540:	2830      	cmp	r0, #48	; 0x30
    1542:	d03d      	beq.n	15c0 <_vprintk+0xcc>
    1544:	2825      	cmp	r0, #37	; 0x25
    1546:	d108      	bne.n	155a <_vprintk+0x66>
				out((int)'%', ctx);
    1548:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
    154a:	47b0      	blx	r6
    154c:	e06f      	b.n	162e <_vprintk+0x13a>
			switch (*fmt) {
    154e:	2858      	cmp	r0, #88	; 0x58
    1550:	f000 8089 	beq.w	1666 <_vprintk+0x172>
    1554:	2863      	cmp	r0, #99	; 0x63
    1556:	f000 80ea 	beq.w	172e <_vprintk+0x23a>
				out((int)'%', ctx);
    155a:	4639      	mov	r1, r7
    155c:	2025      	movs	r0, #37	; 0x25
    155e:	47b0      	blx	r6
				out((int)*fmt, ctx);
    1560:	9b04      	ldr	r3, [sp, #16]
    1562:	4639      	mov	r1, r7
    1564:	7818      	ldrb	r0, [r3, #0]
    1566:	e7f0      	b.n	154a <_vprintk+0x56>
			switch (*fmt) {
    1568:	2870      	cmp	r0, #112	; 0x70
    156a:	d072      	beq.n	1652 <_vprintk+0x15e>
    156c:	d806      	bhi.n	157c <_vprintk+0x88>
    156e:	2869      	cmp	r0, #105	; 0x69
    1570:	d041      	beq.n	15f6 <_vprintk+0x102>
    1572:	286c      	cmp	r0, #108	; 0x6c
    1574:	d03c      	beq.n	15f0 <_vprintk+0xfc>
    1576:	2868      	cmp	r0, #104	; 0x68
    1578:	d0d5      	beq.n	1526 <_vprintk+0x32>
    157a:	e7ee      	b.n	155a <_vprintk+0x66>
    157c:	2875      	cmp	r0, #117	; 0x75
    157e:	d058      	beq.n	1632 <_vprintk+0x13e>
    1580:	d817      	bhi.n	15b2 <_vprintk+0xbe>
    1582:	2873      	cmp	r0, #115	; 0x73
    1584:	d1e9      	bne.n	155a <_vprintk+0x66>
				char *s = va_arg(ap, char *);
    1586:	6823      	ldr	r3, [r4, #0]
    1588:	f104 0b04 	add.w	fp, r4, #4
    158c:	461c      	mov	r4, r3
				while (*s)
    158e:	4625      	mov	r5, r4
    1590:	f815 0b01 	ldrb.w	r0, [r5], #1
    1594:	2800      	cmp	r0, #0
    1596:	f040 80bf 	bne.w	1718 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
    159a:	f1b8 0f03 	cmp.w	r8, #3
    159e:	f040 80d5 	bne.w	174c <_vprintk+0x258>
					int remaining = min_width - (s - start);
    15a2:	1ae4      	subs	r4, r4, r3
    15a4:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
    15a8:	2c00      	cmp	r4, #0
    15aa:	f300 80bb 	bgt.w	1724 <_vprintk+0x230>
				char *s = va_arg(ap, char *);
    15ae:	465c      	mov	r4, fp
    15b0:	e03d      	b.n	162e <_vprintk+0x13a>
			switch (*fmt) {
    15b2:	2878      	cmp	r0, #120	; 0x78
    15b4:	d057      	beq.n	1666 <_vprintk+0x172>
    15b6:	287a      	cmp	r0, #122	; 0x7a
    15b8:	e7de      	b.n	1578 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
    15ba:	f04f 0803 	mov.w	r8, #3
    15be:	e7b2      	b.n	1526 <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
    15c0:	f1b9 0f00 	cmp.w	r9, #0
    15c4:	da0e      	bge.n	15e4 <_vprintk+0xf0>
    15c6:	f1b8 0f00 	cmp.w	r8, #0
    15ca:	f000 80bc 	beq.w	1746 <_vprintk+0x252>
					min_width = *fmt - '0';
    15ce:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    15d2:	f1b8 0f00 	cmp.w	r8, #0
    15d6:	bf08      	it	eq
    15d8:	f04f 0802 	moveq.w	r8, #2
    15dc:	e7a3      	b.n	1526 <_vprintk+0x32>
				if (min_width < 0) {
    15de:	f1b9 0f00 	cmp.w	r9, #0
    15e2:	dbf4      	blt.n	15ce <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
    15e4:	230a      	movs	r3, #10
    15e6:	fb03 0909 	mla	r9, r3, r9, r0
    15ea:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    15ee:	e7f0      	b.n	15d2 <_vprintk+0xde>
				long_ctr++;
    15f0:	f10a 0a01 	add.w	sl, sl, #1
    15f4:	e797      	b.n	1526 <_vprintk+0x32>
				if (long_ctr < 2) {
    15f6:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
    15fa:	bfc5      	ittet	gt
    15fc:	3407      	addgt	r4, #7
    15fe:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
    1602:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
    1604:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
    1606:	bfd4      	ite	le
    1608:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
    160a:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
    160e:	2d00      	cmp	r5, #0
    1610:	da05      	bge.n	161e <_vprintk+0x12a>
					out((int)'-', ctx);
    1612:	4639      	mov	r1, r7
    1614:	202d      	movs	r0, #45	; 0x2d
    1616:	47b0      	blx	r6
					d = -d;
    1618:	426d      	negs	r5, r5
					min_width--;
    161a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    161e:	f8cd 9000 	str.w	r9, [sp]
    1622:	4643      	mov	r3, r8
    1624:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
    1626:	4639      	mov	r1, r7
    1628:	4630      	mov	r0, r6
    162a:	f7ff fef7 	bl	141c <_printk_dec_ulong>
			might_format = 0;
    162e:	2500      	movs	r5, #0
				break;
    1630:	e779      	b.n	1526 <_vprintk+0x32>
				if (long_ctr < 2) {
    1632:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
    1636:	bfc5      	ittet	gt
    1638:	3407      	addgt	r4, #7
    163a:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
    163e:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
    1640:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    1642:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
    1646:	bfcc      	ite	gt
    1648:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
    164c:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
    164e:	4643      	mov	r3, r8
    1650:	e7e9      	b.n	1626 <_vprintk+0x132>
				  out('0', ctx);
    1652:	4639      	mov	r1, r7
    1654:	2030      	movs	r0, #48	; 0x30
    1656:	47b0      	blx	r6
				  out('x', ctx);
    1658:	4639      	mov	r1, r7
    165a:	2078      	movs	r0, #120	; 0x78
    165c:	47b0      	blx	r6
				  min_width = 8;
    165e:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
    1662:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
    1666:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
    166a:	bfc7      	ittee	gt
    166c:	3407      	addgt	r4, #7
    166e:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
    1672:	6823      	ldrle	r3, [r4, #0]
    1674:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
    1676:	bfc2      	ittt	gt
    1678:	f103 0408 	addgt.w	r4, r3, #8
    167c:	681b      	ldrgt	r3, [r3, #0]
    167e:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
    1680:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
    1684:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
    1688:	bfd8      	it	le
    168a:	3404      	addle	r4, #4
	int digits = 0;
    168c:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
    168e:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
    1690:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    1692:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    1696:	9b05      	ldr	r3, [sp, #20]
    1698:	ea4f 008b 	mov.w	r0, fp, lsl #2
    169c:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
    16a0:	f010 000f 	ands.w	r0, r0, #15
    16a4:	d109      	bne.n	16ba <_vprintk+0x1c6>
    16a6:	9b07      	ldr	r3, [sp, #28]
    16a8:	b913      	cbnz	r3, 16b0 <_vprintk+0x1bc>
    16aa:	f1bb 0f00 	cmp.w	fp, #0
    16ae:	d122      	bne.n	16f6 <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
    16b0:	f04f 0e30 	mov.w	lr, #48	; 0x30
    16b4:	e007      	b.n	16c6 <_vprintk+0x1d2>
	for (; size; size--) {
    16b6:	9a06      	ldr	r2, [sp, #24]
    16b8:	e7eb      	b.n	1692 <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
    16ba:	2809      	cmp	r0, #9
    16bc:	bf8c      	ite	hi
    16be:	f04f 0e57 	movhi.w	lr, #87	; 0x57
    16c2:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
    16c6:	4639      	mov	r1, r7
    16c8:	4470      	add	r0, lr
    16ca:	9206      	str	r2, [sp, #24]
    16cc:	47b0      	blx	r6
			digits++;
    16ce:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
    16d0:	9507      	str	r5, [sp, #28]
			digits++;
    16d2:	3301      	adds	r3, #1
    16d4:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
    16d6:	f1bb 0f00 	cmp.w	fp, #0
    16da:	d1ec      	bne.n	16b6 <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
    16dc:	f1b8 0f03 	cmp.w	r8, #3
    16e0:	d1a5      	bne.n	162e <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
    16e2:	9b03      	ldr	r3, [sp, #12]
    16e4:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
    16e8:	2d00      	cmp	r5, #0
    16ea:	dda0      	ble.n	162e <_vprintk+0x13a>
			out(' ', ctx);
    16ec:	4639      	mov	r1, r7
    16ee:	2020      	movs	r0, #32
    16f0:	47b0      	blx	r6
    16f2:	3d01      	subs	r5, #1
    16f4:	e7f8      	b.n	16e8 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
    16f6:	1e53      	subs	r3, r2, #1
    16f8:	4591      	cmp	r9, r2
    16fa:	9306      	str	r3, [sp, #24]
    16fc:	dbeb      	blt.n	16d6 <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
    16fe:	f1b8 0f01 	cmp.w	r8, #1
    1702:	d103      	bne.n	170c <_vprintk+0x218>
				out('0', ctx);
    1704:	4639      	mov	r1, r7
    1706:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    1708:	47b0      	blx	r6
    170a:	e7e4      	b.n	16d6 <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
    170c:	f1b8 0f02 	cmp.w	r8, #2
    1710:	d1e1      	bne.n	16d6 <_vprintk+0x1e2>
				out(' ', ctx);
    1712:	4639      	mov	r1, r7
    1714:	2020      	movs	r0, #32
    1716:	e7f7      	b.n	1708 <_vprintk+0x214>
					out((int)(*s++), ctx);
    1718:	4639      	mov	r1, r7
    171a:	9303      	str	r3, [sp, #12]
    171c:	462c      	mov	r4, r5
    171e:	47b0      	blx	r6
    1720:	9b03      	ldr	r3, [sp, #12]
    1722:	e734      	b.n	158e <_vprintk+0x9a>
						out(' ', ctx);
    1724:	4639      	mov	r1, r7
    1726:	2020      	movs	r0, #32
    1728:	47b0      	blx	r6
    172a:	3c01      	subs	r4, #1
    172c:	e73c      	b.n	15a8 <_vprintk+0xb4>
				out(c, ctx);
    172e:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
    1730:	1d25      	adds	r5, r4, #4
				out(c, ctx);
    1732:	4639      	mov	r1, r7
    1734:	47b0      	blx	r6
				int c = va_arg(ap, int);
    1736:	462c      	mov	r4, r5
    1738:	e779      	b.n	162e <_vprintk+0x13a>
				long_ctr = 0;
    173a:	46aa      	mov	sl, r5
				padding = PAD_NONE;
    173c:	46a8      	mov	r8, r5
				min_width = -1;
    173e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
    1742:	2501      	movs	r5, #1
    1744:	e6ef      	b.n	1526 <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
    1746:	f04f 0801 	mov.w	r8, #1
    174a:	e6ec      	b.n	1526 <_vprintk+0x32>
				char *s = va_arg(ap, char *);
    174c:	465c      	mov	r4, fp
			might_format = 0;
    174e:	4605      	mov	r5, r0
    1750:	e6e9      	b.n	1526 <_vprintk+0x32>
	...

00001754 <vprintk>:
{
    1754:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
    1756:	ac02      	add	r4, sp, #8
    1758:	2300      	movs	r3, #0
    175a:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    175e:	4602      	mov	r2, r0
    1760:	460b      	mov	r3, r1
    1762:	4803      	ldr	r0, [pc, #12]	; (1770 <vprintk+0x1c>)
    1764:	4621      	mov	r1, r4
    1766:	f7ff fec5 	bl	14f4 <_vprintk>
}
    176a:	9801      	ldr	r0, [sp, #4]
    176c:	b002      	add	sp, #8
    176e:	bd10      	pop	{r4, pc}
    1770:	0000140d 	.word	0x0000140d

00001774 <printk>:
{
    1774:	b40f      	push	{r0, r1, r2, r3}
    1776:	b507      	push	{r0, r1, r2, lr}
    1778:	a904      	add	r1, sp, #16
    177a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    177e:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    1780:	f7ff ffe8 	bl	1754 <vprintk>
}
    1784:	b003      	add	sp, #12
    1786:	f85d eb04 	ldr.w	lr, [sp], #4
    178a:	b004      	add	sp, #16
    178c:	4770      	bx	lr
	...

00001790 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    1790:	b40c      	push	{r2, r3}
    1792:	b530      	push	{r4, r5, lr}
    1794:	b085      	sub	sp, #20
    1796:	ab08      	add	r3, sp, #32
    1798:	4604      	mov	r4, r0
    179a:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
    179e:	9001      	str	r0, [sp, #4]
    17a0:	9102      	str	r1, [sp, #8]
    17a2:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    17a4:	a901      	add	r1, sp, #4
    17a6:	4807      	ldr	r0, [pc, #28]	; (17c4 <snprintk+0x34>)
	va_start(ap, fmt);
    17a8:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
    17aa:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    17ac:	f7ff fea2 	bl	14f4 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    17b0:	9803      	ldr	r0, [sp, #12]
    17b2:	9b02      	ldr	r3, [sp, #8]
    17b4:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    17b6:	bfb8      	it	lt
    17b8:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    17ba:	b005      	add	sp, #20
    17bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    17c0:	b002      	add	sp, #8
    17c2:	4770      	bx	lr
    17c4:	000014bd 	.word	0x000014bd

000017c8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_HAS_NRFX, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES_CMAC, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 46);
    17c8:	4770      	bx	lr

000017ca <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
    17ca:	428b      	cmp	r3, r1
{
    17cc:	b538      	push	{r3, r4, r5, lr}
    17ce:	4615      	mov	r5, r2
    17d0:	461c      	mov	r4, r3
	if (from_len <= to_len) {
    17d2:	d805      	bhi.n	17e0 <_copy+0x16>
		(void)memcpy(to, from, from_len);
    17d4:	461a      	mov	r2, r3
    17d6:	4629      	mov	r1, r5
    17d8:	f7ff f887 	bl	8ea <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
    17dc:	4620      	mov	r0, r4
    17de:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
    17e0:	2400      	movs	r4, #0
    17e2:	e7fb      	b.n	17dc <_copy+0x12>

000017e4 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
    17e4:	f7ff b8ad 	b.w	942 <memset>

000017e8 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    17e8:	09c3      	lsrs	r3, r0, #7
    17ea:	005a      	lsls	r2, r3, #1
    17ec:	4413      	add	r3, r2
    17ee:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    17f2:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
    17f6:	b2c0      	uxtb	r0, r0
    17f8:	4770      	bx	lr

000017fa <add_round_key>:
	return TC_CRYPTO_SUCCESS;
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    17fa:	78cb      	ldrb	r3, [r1, #3]
    17fc:	7802      	ldrb	r2, [r0, #0]
    17fe:	4053      	eors	r3, r2
    1800:	7003      	strb	r3, [r0, #0]
    1802:	884b      	ldrh	r3, [r1, #2]
    1804:	7842      	ldrb	r2, [r0, #1]
    1806:	4053      	eors	r3, r2
    1808:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    180a:	680a      	ldr	r2, [r1, #0]
    180c:	7883      	ldrb	r3, [r0, #2]
    180e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    1812:	7083      	strb	r3, [r0, #2]
    1814:	680a      	ldr	r2, [r1, #0]
    1816:	78c3      	ldrb	r3, [r0, #3]
    1818:	4053      	eors	r3, r2
    181a:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    181c:	79cb      	ldrb	r3, [r1, #7]
    181e:	7902      	ldrb	r2, [r0, #4]
    1820:	4053      	eors	r3, r2
    1822:	7103      	strb	r3, [r0, #4]
    1824:	88cb      	ldrh	r3, [r1, #6]
    1826:	7942      	ldrb	r2, [r0, #5]
    1828:	4053      	eors	r3, r2
    182a:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    182c:	684a      	ldr	r2, [r1, #4]
    182e:	7983      	ldrb	r3, [r0, #6]
    1830:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    1834:	7183      	strb	r3, [r0, #6]
    1836:	684a      	ldr	r2, [r1, #4]
    1838:	79c3      	ldrb	r3, [r0, #7]
    183a:	4053      	eors	r3, r2
    183c:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    183e:	7acb      	ldrb	r3, [r1, #11]
    1840:	7a02      	ldrb	r2, [r0, #8]
    1842:	4053      	eors	r3, r2
    1844:	7203      	strb	r3, [r0, #8]
    1846:	7a42      	ldrb	r2, [r0, #9]
    1848:	894b      	ldrh	r3, [r1, #10]
    184a:	4053      	eors	r3, r2
    184c:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    184e:	688a      	ldr	r2, [r1, #8]
    1850:	7a83      	ldrb	r3, [r0, #10]
    1852:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    1856:	7283      	strb	r3, [r0, #10]
    1858:	688a      	ldr	r2, [r1, #8]
    185a:	7ac3      	ldrb	r3, [r0, #11]
    185c:	4053      	eors	r3, r2
    185e:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    1860:	7bcb      	ldrb	r3, [r1, #15]
    1862:	7b02      	ldrb	r2, [r0, #12]
    1864:	4053      	eors	r3, r2
    1866:	7303      	strb	r3, [r0, #12]
    1868:	89cb      	ldrh	r3, [r1, #14]
    186a:	7b42      	ldrb	r2, [r0, #13]
    186c:	4053      	eors	r3, r2
    186e:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    1870:	68ca      	ldr	r2, [r1, #12]
    1872:	7b83      	ldrb	r3, [r0, #14]
    1874:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    1878:	7383      	strb	r3, [r0, #14]
    187a:	68ca      	ldr	r2, [r1, #12]
    187c:	7bc3      	ldrb	r3, [r0, #15]
    187e:	4053      	eors	r3, r2
    1880:	73c3      	strb	r3, [r0, #15]
    1882:	4770      	bx	lr

00001884 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
    1884:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    1886:	7802      	ldrb	r2, [r0, #0]
    1888:	f88d 2000 	strb.w	r2, [sp]
    188c:	7942      	ldrb	r2, [r0, #5]
    188e:	f88d 2001 	strb.w	r2, [sp, #1]
    1892:	7a82      	ldrb	r2, [r0, #10]
    1894:	f88d 2002 	strb.w	r2, [sp, #2]
    1898:	7bc2      	ldrb	r2, [r0, #15]
    189a:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    189e:	7902      	ldrb	r2, [r0, #4]
    18a0:	f88d 2004 	strb.w	r2, [sp, #4]
    18a4:	7a42      	ldrb	r2, [r0, #9]
    18a6:	f88d 2005 	strb.w	r2, [sp, #5]
    18aa:	7b82      	ldrb	r2, [r0, #14]
    18ac:	f88d 2006 	strb.w	r2, [sp, #6]
    18b0:	78c2      	ldrb	r2, [r0, #3]
    18b2:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    18b6:	7a02      	ldrb	r2, [r0, #8]
    18b8:	f88d 2008 	strb.w	r2, [sp, #8]
    18bc:	7b42      	ldrb	r2, [r0, #13]
    18be:	f88d 2009 	strb.w	r2, [sp, #9]
    18c2:	7882      	ldrb	r2, [r0, #2]
    18c4:	f88d 200a 	strb.w	r2, [sp, #10]
    18c8:	79c2      	ldrb	r2, [r0, #7]
    18ca:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    18ce:	7b02      	ldrb	r2, [r0, #12]
    18d0:	f88d 200c 	strb.w	r2, [sp, #12]
    18d4:	7842      	ldrb	r2, [r0, #1]
    18d6:	f88d 200d 	strb.w	r2, [sp, #13]
    18da:	7ac3      	ldrb	r3, [r0, #11]
    18dc:	7982      	ldrb	r2, [r0, #6]
    18de:	f88d 200e 	strb.w	r2, [sp, #14]
    18e2:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    18e6:	2310      	movs	r3, #16
    18e8:	466a      	mov	r2, sp
    18ea:	4619      	mov	r1, r3
    18ec:	f7ff ff6d 	bl	17ca <_copy>
}
    18f0:	b005      	add	sp, #20
    18f2:	f85d fb04 	ldr.w	pc, [sp], #4

000018f6 <mult_row_column>:
{
    18f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18f8:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    18fa:	7808      	ldrb	r0, [r1, #0]
{
    18fc:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    18fe:	f7ff ff73 	bl	17e8 <_double_byte>
    1902:	4605      	mov	r5, r0
    1904:	7860      	ldrb	r0, [r4, #1]
    1906:	f7ff ff6f 	bl	17e8 <_double_byte>
    190a:	78a2      	ldrb	r2, [r4, #2]
    190c:	7863      	ldrb	r3, [r4, #1]
    190e:	4053      	eors	r3, r2
    1910:	78e2      	ldrb	r2, [r4, #3]
    1912:	4053      	eors	r3, r2
    1914:	405d      	eors	r5, r3
    1916:	4045      	eors	r5, r0
    1918:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    191a:	7860      	ldrb	r0, [r4, #1]
    191c:	7827      	ldrb	r7, [r4, #0]
    191e:	f7ff ff63 	bl	17e8 <_double_byte>
    1922:	4605      	mov	r5, r0
    1924:	78a0      	ldrb	r0, [r4, #2]
    1926:	f7ff ff5f 	bl	17e8 <_double_byte>
    192a:	78a3      	ldrb	r3, [r4, #2]
    192c:	405f      	eors	r7, r3
    192e:	78e3      	ldrb	r3, [r4, #3]
    1930:	405f      	eors	r7, r3
    1932:	407d      	eors	r5, r7
    1934:	4045      	eors	r5, r0
    1936:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    1938:	78a0      	ldrb	r0, [r4, #2]
    193a:	7865      	ldrb	r5, [r4, #1]
    193c:	7827      	ldrb	r7, [r4, #0]
    193e:	f7ff ff53 	bl	17e8 <_double_byte>
    1942:	406f      	eors	r7, r5
    1944:	4605      	mov	r5, r0
    1946:	78e0      	ldrb	r0, [r4, #3]
    1948:	f7ff ff4e 	bl	17e8 <_double_byte>
    194c:	78e3      	ldrb	r3, [r4, #3]
    194e:	405f      	eors	r7, r3
    1950:	407d      	eors	r5, r7
    1952:	4045      	eors	r5, r0
    1954:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    1956:	7820      	ldrb	r0, [r4, #0]
    1958:	f7ff ff46 	bl	17e8 <_double_byte>
    195c:	7863      	ldrb	r3, [r4, #1]
    195e:	7825      	ldrb	r5, [r4, #0]
    1960:	405d      	eors	r5, r3
    1962:	78a3      	ldrb	r3, [r4, #2]
    1964:	405d      	eors	r5, r3
    1966:	4045      	eors	r5, r0
    1968:	78e0      	ldrb	r0, [r4, #3]
    196a:	f7ff ff3d 	bl	17e8 <_double_byte>
    196e:	b2ed      	uxtb	r5, r5
    1970:	4068      	eors	r0, r5
    1972:	70f0      	strb	r0, [r6, #3]
    1974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00001978 <tc_aes128_set_encrypt_key>:
{
    1978:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    197a:	4e28      	ldr	r6, [pc, #160]	; (1a1c <tc_aes128_set_encrypt_key+0xa4>)
{
    197c:	4607      	mov	r7, r0
    197e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    1980:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    1982:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    1984:	ad01      	add	r5, sp, #4
    1986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1988:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    198a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    198c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1990:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    1994:	2f00      	cmp	r7, #0
    1996:	d03c      	beq.n	1a12 <tc_aes128_set_encrypt_key+0x9a>
	} else if (k == (const uint8_t *) 0) {
    1998:	2c00      	cmp	r4, #0
    199a:	d03c      	beq.n	1a16 <tc_aes128_set_encrypt_key+0x9e>
    199c:	1f38      	subs	r0, r7, #4
    199e:	4621      	mov	r1, r4
    19a0:	4602      	mov	r2, r0
    19a2:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    19a4:	784b      	ldrb	r3, [r1, #1]
    19a6:	780d      	ldrb	r5, [r1, #0]
    19a8:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    19aa:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    19ae:	78cd      	ldrb	r5, [r1, #3]
    19b0:	432b      	orrs	r3, r5
    19b2:	788d      	ldrb	r5, [r1, #2]
    19b4:	3104      	adds	r1, #4
    19b6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    19ba:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    19bc:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    19c0:	d1f0      	bne.n	19a4 <tc_aes128_set_encrypt_key+0x2c>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    19c2:	4c17      	ldr	r4, [pc, #92]	; (1a20 <tc_aes128_set_encrypt_key+0xa8>)
    19c4:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    19c6:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    19c8:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    19ca:	d118      	bne.n	19fe <tc_aes128_set_encrypt_key+0x86>
	return (((a) >> 24)|((a) << 8));
    19cc:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    19d0:	0e1a      	lsrs	r2, r3, #24
    19d2:	5ca5      	ldrb	r5, [r4, r2]
    19d4:	b2da      	uxtb	r2, r3
    19d6:	5ca2      	ldrb	r2, [r4, r2]
    19d8:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    19dc:	f3c3 4507 	ubfx	r5, r3, #16, #8
    19e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
    19e4:	5d65      	ldrb	r5, [r4, r5]
    19e6:	5ce3      	ldrb	r3, [r4, r3]
    19e8:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    19ec:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    19f0:	ad0c      	add	r5, sp, #48	; 0x30
    19f2:	f021 0303 	bic.w	r3, r1, #3
    19f6:	442b      	add	r3, r5
    19f8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    19fc:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    19fe:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    1a02:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    1a04:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    1a06:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    1a08:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    1a0a:	d1dc      	bne.n	19c6 <tc_aes128_set_encrypt_key+0x4e>
	return TC_CRYPTO_SUCCESS;
    1a0c:	2001      	movs	r0, #1
}
    1a0e:	b00d      	add	sp, #52	; 0x34
    1a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    1a12:	4638      	mov	r0, r7
    1a14:	e7fb      	b.n	1a0e <tc_aes128_set_encrypt_key+0x96>
    1a16:	4620      	mov	r0, r4
    1a18:	e7f9      	b.n	1a0e <tc_aes128_set_encrypt_key+0x96>
    1a1a:	bf00      	nop
    1a1c:	000205d8 	.word	0x000205d8
    1a20:	00020b28 	.word	0x00020b28

00001a24 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    1a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1a28:	4615      	mov	r5, r2
    1a2a:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    1a2c:	4680      	mov	r8, r0
    1a2e:	2800      	cmp	r0, #0
    1a30:	d05b      	beq.n	1aea <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    1a32:	2900      	cmp	r1, #0
    1a34:	d05a      	beq.n	1aec <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    1a36:	2a00      	cmp	r2, #0
    1a38:	d05a      	beq.n	1af0 <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    1a3a:	2310      	movs	r3, #16
    1a3c:	460a      	mov	r2, r1
    1a3e:	4668      	mov	r0, sp
    1a40:	4619      	mov	r1, r3
    1a42:	f7ff fec2 	bl	17ca <_copy>
	add_round_key(state, s->words);
    1a46:	4629      	mov	r1, r5
    1a48:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    1a4a:	4c2a      	ldr	r4, [pc, #168]	; (1af4 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    1a4c:	f7ff fed5 	bl	17fa <add_round_key>
    1a50:	f105 0710 	add.w	r7, r5, #16
    1a54:	46a1      	mov	r9, r4
    1a56:	35a0      	adds	r5, #160	; 0xa0
{
    1a58:	2600      	movs	r6, #0
		s[i] = sbox[s[i]];
    1a5a:	f81d 3006 	ldrb.w	r3, [sp, r6]
    1a5e:	5ce3      	ldrb	r3, [r4, r3]
    1a60:	f80d 3006 	strb.w	r3, [sp, r6]
	for (i = 0; i < (Nb * Nk); ++i) {
    1a64:	3601      	adds	r6, #1
    1a66:	2e10      	cmp	r6, #16
    1a68:	d1f7      	bne.n	1a5a <tc_aes_encrypt+0x36>

	for (i = 0; i < (Nr - 1); ++i) {
		sub_bytes(state);
		shift_rows(state);
    1a6a:	4668      	mov	r0, sp
    1a6c:	f7ff ff0a 	bl	1884 <shift_rows>
	mult_row_column(t, s);
    1a70:	4669      	mov	r1, sp
    1a72:	a804      	add	r0, sp, #16
    1a74:	f7ff ff3f 	bl	18f6 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    1a78:	a901      	add	r1, sp, #4
    1a7a:	a805      	add	r0, sp, #20
    1a7c:	f7ff ff3b 	bl	18f6 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    1a80:	a902      	add	r1, sp, #8
    1a82:	a806      	add	r0, sp, #24
    1a84:	f7ff ff37 	bl	18f6 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    1a88:	a903      	add	r1, sp, #12
    1a8a:	a807      	add	r0, sp, #28
    1a8c:	f7ff ff33 	bl	18f6 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    1a90:	4633      	mov	r3, r6
    1a92:	aa04      	add	r2, sp, #16
    1a94:	4631      	mov	r1, r6
    1a96:	4668      	mov	r0, sp
    1a98:	f7ff fe97 	bl	17ca <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    1a9c:	4639      	mov	r1, r7
    1a9e:	4668      	mov	r0, sp
    1aa0:	3710      	adds	r7, #16
    1aa2:	f7ff feaa 	bl	17fa <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    1aa6:	42bd      	cmp	r5, r7
    1aa8:	d1d6      	bne.n	1a58 <tc_aes_encrypt+0x34>
    1aaa:	2600      	movs	r6, #0
		s[i] = sbox[s[i]];
    1aac:	f81d 3006 	ldrb.w	r3, [sp, r6]
    1ab0:	f819 3003 	ldrb.w	r3, [r9, r3]
    1ab4:	f80d 3006 	strb.w	r3, [sp, r6]
	for (i = 0; i < (Nb * Nk); ++i) {
    1ab8:	3601      	adds	r6, #1
    1aba:	2e10      	cmp	r6, #16
    1abc:	d1f6      	bne.n	1aac <tc_aes_encrypt+0x88>
	}

	sub_bytes(state);
	shift_rows(state);
    1abe:	4668      	mov	r0, sp
    1ac0:	f7ff fee0 	bl	1884 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    1ac4:	4629      	mov	r1, r5
    1ac6:	4668      	mov	r0, sp
    1ac8:	f7ff fe97 	bl	17fa <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    1acc:	4633      	mov	r3, r6
    1ace:	466a      	mov	r2, sp
    1ad0:	4631      	mov	r1, r6
    1ad2:	4640      	mov	r0, r8
    1ad4:	f7ff fe79 	bl	17ca <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    1ad8:	4668      	mov	r0, sp
    1ada:	4632      	mov	r2, r6
    1adc:	2100      	movs	r1, #0
    1ade:	f7ff fe81 	bl	17e4 <_set>

	return TC_CRYPTO_SUCCESS;
    1ae2:	2001      	movs	r0, #1
}
    1ae4:	b009      	add	sp, #36	; 0x24
    1ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1aea:	e7fb      	b.n	1ae4 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
    1aec:	4608      	mov	r0, r1
    1aee:	e7f9      	b.n	1ae4 <tc_aes_encrypt+0xc0>
    1af0:	4610      	mov	r0, r2
    1af2:	e7f7      	b.n	1ae4 <tc_aes_encrypt+0xc0>
    1af4:	00020b28 	.word	0x00020b28

00001af8 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
    1af8:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    1afa:	f991 3000 	ldrsb.w	r3, [r1]
    1afe:	2b00      	cmp	r3, #0
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
    1b00:	f101 020f 	add.w	r2, r1, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    1b04:	bfb4      	ite	lt
    1b06:	2387      	movlt	r3, #135	; 0x87
    1b08:	2300      	movge	r3, #0

	out += (TC_AES_BLOCK_SIZE - 1);
    1b0a:	300f      	adds	r0, #15
	for (;;) {
		*out-- = (*x << 1) ^ carry;
    1b0c:	7814      	ldrb	r4, [r2, #0]
		if (x == in) {
    1b0e:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
    1b10:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
    1b14:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
    1b18:	d003      	beq.n	1b22 <gf_double+0x2a>
			break;
		}
		carry = *x-- >> 7;
    1b1a:	f812 3901 	ldrb.w	r3, [r2], #-1
    1b1e:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
    1b20:	e7f4      	b.n	1b0c <gf_double+0x14>
    1b22:	bd10      	pop	{r4, pc}

00001b24 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
    1b24:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
    1b26:	b128      	cbz	r0, 1b34 <tc_cmac_erase+0x10>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
    1b28:	2258      	movs	r2, #88	; 0x58
    1b2a:	2100      	movs	r1, #0
    1b2c:	f7ff fe5a 	bl	17e4 <_set>

	return TC_CRYPTO_SUCCESS;
    1b30:	2001      	movs	r0, #1
    1b32:	bd08      	pop	{r3, pc}
}
    1b34:	bd08      	pop	{r3, pc}

00001b36 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
    1b36:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    1b38:	4604      	mov	r4, r0
    1b3a:	b190      	cbz	r0, 1b62 <tc_cmac_init+0x2c>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    1b3c:	2210      	movs	r2, #16
    1b3e:	2100      	movs	r1, #0
    1b40:	f7ff fe50 	bl	17e4 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
    1b44:	f104 0030 	add.w	r0, r4, #48	; 0x30
    1b48:	2210      	movs	r2, #16
    1b4a:	2100      	movs	r1, #0
    1b4c:	f7ff fe4a 	bl	17e4 <_set>
	s->leftover_offset = 0;
    1b50:	2300      	movs	r3, #0
    1b52:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    1b54:	2200      	movs	r2, #0
    1b56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1b5a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
    1b5e:	2001      	movs	r0, #1
    1b60:	bd10      	pop	{r4, pc}
}
    1b62:	bd10      	pop	{r4, pc}

00001b64 <tc_cmac_setup>:
{
    1b64:	b570      	push	{r4, r5, r6, lr}
    1b66:	460d      	mov	r5, r1
    1b68:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
    1b6a:	4604      	mov	r4, r0
    1b6c:	b318      	cbz	r0, 1bb6 <tc_cmac_setup+0x52>
    1b6e:	b319      	cbz	r1, 1bb8 <tc_cmac_setup+0x54>
	_set(s, 0, sizeof(*s));
    1b70:	2258      	movs	r2, #88	; 0x58
    1b72:	2100      	movs	r1, #0
    1b74:	f7ff fe36 	bl	17e4 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
    1b78:	4629      	mov	r1, r5
	s->sched = sched;
    1b7a:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
    1b7c:	4630      	mov	r0, r6
    1b7e:	f7ff fefb 	bl	1978 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    1b82:	4620      	mov	r0, r4
    1b84:	2210      	movs	r2, #16
    1b86:	2100      	movs	r1, #0
    1b88:	f7ff fe2c 	bl	17e4 <_set>
	gf_double (s->K1, s->iv);
    1b8c:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
    1b90:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1b92:	4621      	mov	r1, r4
    1b94:	4620      	mov	r0, r4
    1b96:	f7ff ff45 	bl	1a24 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
    1b9a:	4621      	mov	r1, r4
    1b9c:	4628      	mov	r0, r5
    1b9e:	f7ff ffab 	bl	1af8 <gf_double>
	gf_double (s->K2, s->K1);
    1ba2:	4629      	mov	r1, r5
    1ba4:	f104 0020 	add.w	r0, r4, #32
    1ba8:	f7ff ffa6 	bl	1af8 <gf_double>
	tc_cmac_init(s);
    1bac:	4620      	mov	r0, r4
    1bae:	f7ff ffc2 	bl	1b36 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
    1bb2:	2001      	movs	r0, #1
    1bb4:	bd70      	pop	{r4, r5, r6, pc}
    1bb6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    1bb8:	4608      	mov	r0, r1
}
    1bba:	bd70      	pop	{r4, r5, r6, pc}

00001bbc <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
    1bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bbe:	460d      	mov	r5, r1
    1bc0:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    1bc2:	4604      	mov	r4, r0
    1bc4:	2800      	cmp	r0, #0
    1bc6:	d05b      	beq.n	1c80 <tc_cmac_update+0xc4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
    1bc8:	b90a      	cbnz	r2, 1bce <tc_cmac_update+0x12>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
    1bca:	2001      	movs	r0, #1
    1bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (data == (const uint8_t *) 0) {
    1bce:	2900      	cmp	r1, #0
    1bd0:	d056      	beq.n	1c80 <tc_cmac_update+0xc4>
	if (s->countdown == 0) {
    1bd2:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
    1bd6:	ea52 0103 	orrs.w	r1, r2, r3
    1bda:	d051      	beq.n	1c80 <tc_cmac_update+0xc4>
	s->countdown--;
    1bdc:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    1be0:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
    1be4:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
    1be8:	6c40      	ldr	r0, [r0, #68]	; 0x44
    1bea:	b348      	cbz	r0, 1c40 <tc_cmac_update+0x84>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
    1bec:	f1c0 0710 	rsb	r7, r0, #16
		if (data_length < remaining_space) {
    1bf0:	42be      	cmp	r6, r7
    1bf2:	f100 0030 	add.w	r0, r0, #48	; 0x30
    1bf6:	d209      	bcs.n	1c0c <tc_cmac_update+0x50>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    1bf8:	4633      	mov	r3, r6
    1bfa:	4631      	mov	r1, r6
    1bfc:	462a      	mov	r2, r5
    1bfe:	4420      	add	r0, r4
    1c00:	f7ff fde3 	bl	17ca <_copy>
			s->leftover_offset += data_length;
    1c04:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1c06:	441e      	add	r6, r3
		s->leftover_offset = data_length;
    1c08:	6466      	str	r6, [r4, #68]	; 0x44
    1c0a:	e7de      	b.n	1bca <tc_cmac_update+0xe>
		_copy(&s->leftover[s->leftover_offset],
    1c0c:	463b      	mov	r3, r7
    1c0e:	462a      	mov	r2, r5
    1c10:	4639      	mov	r1, r7
    1c12:	4420      	add	r0, r4
    1c14:	f7ff fdd9 	bl	17ca <_copy>
		s->leftover_offset = 0;
    1c18:	2300      	movs	r3, #0
    1c1a:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
    1c1c:	1bf6      	subs	r6, r6, r7
		data += remaining_space;
    1c1e:	443d      	add	r5, r7
    1c20:	1e63      	subs	r3, r4, #1
    1c22:	f104 000f 	add.w	r0, r4, #15
			s->iv[i] ^= s->leftover[i];
    1c26:	785a      	ldrb	r2, [r3, #1]
    1c28:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
    1c2c:	404a      	eors	r2, r1
    1c2e:	f803 2f01 	strb.w	r2, [r3, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    1c32:	4283      	cmp	r3, r0
    1c34:	d1f7      	bne.n	1c26 <tc_cmac_update+0x6a>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    1c36:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1c38:	4621      	mov	r1, r4
    1c3a:	4620      	mov	r0, r4
    1c3c:	f7ff fef2 	bl	1a24 <tc_aes_encrypt>
    1c40:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
    1c44:	2e10      	cmp	r6, #16
    1c46:	d911      	bls.n	1c6c <tc_cmac_update+0xb0>
    1c48:	1e63      	subs	r3, r4, #1
    1c4a:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
    1c4c:	785a      	ldrb	r2, [r3, #1]
    1c4e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    1c52:	4042      	eors	r2, r0
    1c54:	f803 2f01 	strb.w	r2, [r3, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    1c58:	42bb      	cmp	r3, r7
    1c5a:	d1f7      	bne.n	1c4c <tc_cmac_update+0x90>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    1c5c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1c5e:	4621      	mov	r1, r4
    1c60:	4620      	mov	r0, r4
    1c62:	f7ff fedf 	bl	1a24 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
    1c66:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
    1c68:	3e10      	subs	r6, #16
    1c6a:	e7eb      	b.n	1c44 <tc_cmac_update+0x88>
	if (data_length > 0) {
    1c6c:	2e00      	cmp	r6, #0
    1c6e:	d0ac      	beq.n	1bca <tc_cmac_update+0xe>
		_copy(s->leftover, data_length, data, data_length);
    1c70:	4633      	mov	r3, r6
    1c72:	462a      	mov	r2, r5
    1c74:	4631      	mov	r1, r6
    1c76:	f104 0030 	add.w	r0, r4, #48	; 0x30
    1c7a:	f7ff fda6 	bl	17ca <_copy>
    1c7e:	e7c3      	b.n	1c08 <tc_cmac_update+0x4c>
		return TC_CRYPTO_FAIL;
    1c80:	2000      	movs	r0, #0
}
    1c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001c84 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
    1c84:	b570      	push	{r4, r5, r6, lr}
    1c86:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    1c88:	4605      	mov	r5, r0
    1c8a:	b370      	cbz	r0, 1cea <tc_cmac_final+0x66>
    1c8c:	b371      	cbz	r1, 1cec <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    1c8e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    1c90:	2a10      	cmp	r2, #16
    1c92:	d11a      	bne.n	1cca <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
    1c94:	f101 0210 	add.w	r2, r1, #16
    1c98:	1e61      	subs	r1, r4, #1
    1c9a:	3a01      	subs	r2, #1
    1c9c:	f104 060f 	add.w	r6, r4, #15
		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
		s->iv[i] ^= s->leftover[i] ^ k[i];
    1ca0:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    1ca4:	784b      	ldrb	r3, [r1, #1]
    1ca6:	4043      	eors	r3, r0
    1ca8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    1cac:	4043      	eors	r3, r0
    1cae:	f801 3f01 	strb.w	r3, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    1cb2:	428e      	cmp	r6, r1
    1cb4:	d1f4      	bne.n	1ca0 <tc_cmac_final+0x1c>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
    1cb6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1cb8:	4621      	mov	r1, r4
    1cba:	4628      	mov	r0, r5
    1cbc:	f7ff feb2 	bl	1a24 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
    1cc0:	4620      	mov	r0, r4
    1cc2:	f7ff ff2f 	bl	1b24 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
    1cc6:	2001      	movs	r0, #1
    1cc8:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
    1cca:	f102 0030 	add.w	r0, r2, #48	; 0x30
    1cce:	2100      	movs	r1, #0
    1cd0:	f1c2 0210 	rsb	r2, r2, #16
    1cd4:	4420      	add	r0, r4
    1cd6:	f7ff fd85 	bl	17e4 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    1cda:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1cdc:	4423      	add	r3, r4
    1cde:	2280      	movs	r2, #128	; 0x80
    1ce0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
    1ce4:	f104 0220 	add.w	r2, r4, #32
    1ce8:	e7d6      	b.n	1c98 <tc_cmac_final+0x14>
    1cea:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    1cec:	4608      	mov	r0, r1
}
    1cee:	bd70      	pop	{r4, r5, r6, pc}

00001cf0 <shell_run>:
#include <init.h>

#define SHELL_PROMPT "shell> "

int shell_run(struct device *dev)
{
    1cf0:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	shell_init(SHELL_PROMPT);
    1cf2:	4802      	ldr	r0, [pc, #8]	; (1cfc <shell_run+0xc>)
    1cf4:	f000 fb22 	bl	233c <shell_init>
	return 0;
}
    1cf8:	2000      	movs	r0, #0
    1cfa:	bd08      	pop	{r3, pc}
    1cfc:	00020c28 	.word	0x00020c28

00001d00 <cmd_exit>:
	return set_default_module(argv[1]);
}

static int cmd_exit(int argc, char *argv[])
{
	if (argc == 1) {
    1d00:	2801      	cmp	r0, #1
		default_module = NULL;
    1d02:	bf02      	ittt	eq
    1d04:	4b02      	ldreq	r3, [pc, #8]	; (1d10 <cmd_exit+0x10>)
    1d06:	2200      	moveq	r2, #0
    1d08:	601a      	streq	r2, [r3, #0]
	}

	return 0;
}
    1d0a:	2000      	movs	r0, #0
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop
    1d10:	20000250 	.word	0x20000250

00001d14 <cmd_noprompt>:

static int cmd_noprompt(int argc, char *argv[])
{
	no_promt = true;
    1d14:	4b02      	ldr	r3, [pc, #8]	; (1d20 <cmd_noprompt+0xc>)
    1d16:	2201      	movs	r2, #1
    1d18:	701a      	strb	r2, [r3, #0]
	return 0;
}
    1d1a:	2000      	movs	r0, #0
    1d1c:	4770      	bx	lr
    1d1e:	bf00      	nop
    1d20:	20000274 	.word	0x20000274

00001d24 <get_cmd>:
{
    1d24:	b570      	push	{r4, r5, r6, lr}
    1d26:	460e      	mov	r6, r1
    1d28:	4604      	mov	r4, r0
	for (i = 0; cmds[i].cmd_name; i++) {
    1d2a:	6821      	ldr	r1, [r4, #0]
    1d2c:	4625      	mov	r5, r4
    1d2e:	b909      	cbnz	r1, 1d34 <get_cmd+0x10>
	return NULL;
    1d30:	460d      	mov	r5, r1
    1d32:	e005      	b.n	1d40 <get_cmd+0x1c>
		if (!strcmp(cmd_str, cmds[i].cmd_name)) {
    1d34:	4630      	mov	r0, r6
    1d36:	f7fe fd82 	bl	83e <strcmp>
    1d3a:	3410      	adds	r4, #16
    1d3c:	2800      	cmp	r0, #0
    1d3e:	d1f4      	bne.n	1d2a <get_cmd+0x6>
}
    1d40:	4628      	mov	r0, r5
    1d42:	bd70      	pop	{r4, r5, r6, pc}

00001d44 <get_standalone>:
{
    1d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (i = 0; i < NUM_OF_SHELL_CMDS; i++) {
    1d48:	4d0b      	ldr	r5, [pc, #44]	; (1d78 <get_standalone+0x34>)
    1d4a:	4c0c      	ldr	r4, [pc, #48]	; (1d7c <get_standalone+0x38>)
    1d4c:	1b64      	subs	r4, r4, r5
{
    1d4e:	4680      	mov	r8, r0
	for (i = 0; i < NUM_OF_SHELL_CMDS; i++) {
    1d50:	1124      	asrs	r4, r4, #4
    1d52:	2700      	movs	r7, #0
    1d54:	42a7      	cmp	r7, r4
    1d56:	db02      	blt.n	1d5e <get_standalone+0x1a>
	return NULL;
    1d58:	2000      	movs	r0, #0
}
    1d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d5e:	013b      	lsls	r3, r7, #4
		if (!strcmp(command, __shell_cmd_start[i].cmd_name)) {
    1d60:	4640      	mov	r0, r8
    1d62:	58e9      	ldr	r1, [r5, r3]
    1d64:	18ee      	adds	r6, r5, r3
    1d66:	f7fe fd6a 	bl	83e <strcmp>
    1d6a:	b910      	cbnz	r0, 1d72 <get_standalone+0x2e>
			return &__shell_cmd_start[i];
    1d6c:	4630      	mov	r0, r6
    1d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < NUM_OF_SHELL_CMDS; i++) {
    1d72:	3701      	adds	r7, #1
    1d74:	e7ee      	b.n	1d54 <get_standalone+0x10>
    1d76:	bf00      	nop
    1d78:	2000e9a8 	.word	0x2000e9a8
    1d7c:	2000e9b8 	.word	0x2000e9b8

00001d80 <get_destination_module>:
{
    1d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
    1d84:	4c0e      	ldr	r4, [pc, #56]	; (1dc0 <get_destination_module+0x40>)
    1d86:	4b0f      	ldr	r3, [pc, #60]	; (1dc4 <get_destination_module+0x44>)
    1d88:	4f0f      	ldr	r7, [pc, #60]	; (1dc8 <get_destination_module+0x48>)
    1d8a:	1b1b      	subs	r3, r3, r4
    1d8c:	109b      	asrs	r3, r3, #2
{
    1d8e:	4680      	mov	r8, r0
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
    1d90:	435f      	muls	r7, r3
    1d92:	2600      	movs	r6, #0
    1d94:	f04f 090c 	mov.w	r9, #12
    1d98:	42be      	cmp	r6, r7
    1d9a:	db02      	blt.n	1da2 <get_destination_module+0x22>
	return NULL;
    1d9c:	2000      	movs	r0, #0
}
    1d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1da2:	fb09 f306 	mul.w	r3, r9, r6
		if (!strncmp(module_str,
    1da6:	2214      	movs	r2, #20
    1da8:	58e1      	ldr	r1, [r4, r3]
    1daa:	4640      	mov	r0, r8
    1dac:	18e5      	adds	r5, r4, r3
    1dae:	f7fe fd53 	bl	858 <strncmp>
    1db2:	b910      	cbnz	r0, 1dba <get_destination_module+0x3a>
			return &__shell_module_start[i];
    1db4:	4628      	mov	r0, r5
    1db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
    1dba:	3601      	adds	r6, #1
    1dbc:	e7ec      	b.n	1d98 <get_destination_module+0x18>
    1dbe:	bf00      	nop
    1dc0:	2000e99c 	.word	0x2000e99c
    1dc4:	2000e9a8 	.word	0x2000e9a8
    1dc8:	aaaaaaab 	.word	0xaaaaaaab

00001dcc <set_default_module>:
{
    1dcc:	b510      	push	{r4, lr}
    1dce:	4604      	mov	r4, r0
	if (strlen(name) > MODULE_NAME_MAX_LEN) {
    1dd0:	f7fe fd2d 	bl	82e <strlen>
    1dd4:	2814      	cmp	r0, #20
    1dd6:	d906      	bls.n	1de6 <set_default_module+0x1a>
		printk("Module name %s is too long, default is not changed\n",
    1dd8:	480d      	ldr	r0, [pc, #52]	; (1e10 <set_default_module+0x44>)
    1dda:	4621      	mov	r1, r4
		printk("Illegal module %s, default is not changed\n", name);
    1ddc:	f7ff fcca 	bl	1774 <printk>
		return -EINVAL;
    1de0:	f06f 0015 	mvn.w	r0, #21
    1de4:	bd10      	pop	{r4, pc}
	module = get_destination_module(name);
    1de6:	4620      	mov	r0, r4
    1de8:	f7ff ffca 	bl	1d80 <get_destination_module>
	if (!module) {
    1dec:	b910      	cbnz	r0, 1df4 <set_default_module+0x28>
		printk("Illegal module %s, default is not changed\n", name);
    1dee:	4621      	mov	r1, r4
    1df0:	4808      	ldr	r0, [pc, #32]	; (1e14 <set_default_module+0x48>)
    1df2:	e7f3      	b.n	1ddc <set_default_module+0x10>
	default_module = module;
    1df4:	4b08      	ldr	r3, [pc, #32]	; (1e18 <set_default_module+0x4c>)
	strncpy(default_module_prompt, name, MODULE_NAME_MAX_LEN);
    1df6:	2214      	movs	r2, #20
	default_module = module;
    1df8:	6018      	str	r0, [r3, #0]
	strncpy(default_module_prompt, name, MODULE_NAME_MAX_LEN);
    1dfa:	4621      	mov	r1, r4
    1dfc:	4807      	ldr	r0, [pc, #28]	; (1e1c <set_default_module+0x50>)
    1dfe:	f7fe fce9 	bl	7d4 <strncpy>
	strcat(default_module_prompt, "> ");
    1e02:	4907      	ldr	r1, [pc, #28]	; (1e20 <set_default_module+0x54>)
    1e04:	4805      	ldr	r0, [pc, #20]	; (1e1c <set_default_module+0x50>)
    1e06:	f7fe fd38 	bl	87a <strcat>
	return 0;
    1e0a:	2000      	movs	r0, #0
}
    1e0c:	bd10      	pop	{r4, pc}
    1e0e:	bf00      	nop
    1e10:	00020d60 	.word	0x00020d60
    1e14:	00020d94 	.word	0x00020d94
    1e18:	20000250 	.word	0x20000250
    1e1c:	20000254 	.word	0x20000254
    1e20:	00020c2d 	.word	0x00020c2d

00001e24 <get_prompt>:
{
    1e24:	b508      	push	{r3, lr}
	if (app_prompt_handler) {
    1e26:	4b0a      	ldr	r3, [pc, #40]	; (1e50 <get_prompt+0x2c>)
    1e28:	681b      	ldr	r3, [r3, #0]
    1e2a:	b92b      	cbnz	r3, 1e38 <get_prompt+0x14>
	if (default_module) {
    1e2c:	4b09      	ldr	r3, [pc, #36]	; (1e54 <get_prompt+0x30>)
    1e2e:	681b      	ldr	r3, [r3, #0]
    1e30:	b933      	cbnz	r3, 1e40 <get_prompt+0x1c>
	return prompt;
    1e32:	4b09      	ldr	r3, [pc, #36]	; (1e58 <get_prompt+0x34>)
    1e34:	6818      	ldr	r0, [r3, #0]
    1e36:	e002      	b.n	1e3e <get_prompt+0x1a>
		str = app_prompt_handler();
    1e38:	4798      	blx	r3
		if (str) {
    1e3a:	2800      	cmp	r0, #0
    1e3c:	d0f6      	beq.n	1e2c <get_prompt+0x8>
}
    1e3e:	bd08      	pop	{r3, pc}
		if (default_module->prompt) {
    1e40:	689b      	ldr	r3, [r3, #8]
    1e42:	b90b      	cbnz	r3, 1e48 <get_prompt+0x24>
		return default_module_prompt;
    1e44:	4805      	ldr	r0, [pc, #20]	; (1e5c <get_prompt+0x38>)
    1e46:	bd08      	pop	{r3, pc}
			ret = default_module->prompt();
    1e48:	4798      	blx	r3
			if (ret) {
    1e4a:	2800      	cmp	r0, #0
    1e4c:	d1f7      	bne.n	1e3e <get_prompt+0x1a>
    1e4e:	e7f9      	b.n	1e44 <get_prompt+0x20>
    1e50:	20000094 	.word	0x20000094
    1e54:	20000250 	.word	0x20000250
    1e58:	20000278 	.word	0x20000278
    1e5c:	20000254 	.word	0x20000254

00001e60 <show_cmd_help>:
{
    1e60:	b538      	push	{r3, r4, r5, lr}
	printk("Usage: %s %s\n", cmd->cmd_name, cmd->help ? cmd->help : "");
    1e62:	6882      	ldr	r2, [r0, #8]
    1e64:	4b08      	ldr	r3, [pc, #32]	; (1e88 <show_cmd_help+0x28>)
{
    1e66:	460d      	mov	r5, r1
    1e68:	4604      	mov	r4, r0
	printk("Usage: %s %s\n", cmd->cmd_name, cmd->help ? cmd->help : "");
    1e6a:	6801      	ldr	r1, [r0, #0]
    1e6c:	4807      	ldr	r0, [pc, #28]	; (1e8c <show_cmd_help+0x2c>)
    1e6e:	2a00      	cmp	r2, #0
    1e70:	bf08      	it	eq
    1e72:	461a      	moveq	r2, r3
    1e74:	f7ff fc7e 	bl	1774 <printk>
	if (full && cmd->desc) {
    1e78:	b125      	cbz	r5, 1e84 <show_cmd_help+0x24>
    1e7a:	68e1      	ldr	r1, [r4, #12]
    1e7c:	b111      	cbz	r1, 1e84 <show_cmd_help+0x24>
		printk("%s\n", cmd->desc);
    1e7e:	4804      	ldr	r0, [pc, #16]	; (1e90 <show_cmd_help+0x30>)
    1e80:	f7ff fc78 	bl	1774 <printk>
}
    1e84:	2000      	movs	r0, #0
    1e86:	bd38      	pop	{r3, r4, r5, pc}
    1e88:	00021033 	.word	0x00021033
    1e8c:	00020ea9 	.word	0x00020ea9
    1e90:	00020d14 	.word	0x00020d14

00001e94 <cmd_help>:
	if (argc > 1) {
    1e94:	2801      	cmp	r0, #1
{
    1e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1e9a:	4606      	mov	r6, r0
    1e9c:	460c      	mov	r4, r1
	if (argc > 1) {
    1e9e:	dd25      	ble.n	1eec <cmd_help+0x58>
		module = get_destination_module(argv[1]);
    1ea0:	6848      	ldr	r0, [r1, #4]
    1ea2:	f7ff ff6d 	bl	1d80 <get_destination_module>
		if (module) {
    1ea6:	4605      	mov	r5, r0
    1ea8:	b150      	cbz	r0, 1ec0 <cmd_help+0x2c>
			if (argc == 2) {
    1eaa:	2e02      	cmp	r6, #2
    1eac:	d021      	beq.n	1ef2 <cmd_help+0x5e>
			cmd_str = argv[2];
    1eae:	68a4      	ldr	r4, [r4, #8]
	return get_cmd(module->commands, cmd_str);
    1eb0:	6868      	ldr	r0, [r5, #4]
    1eb2:	4621      	mov	r1, r4
    1eb4:	f7ff ff36 	bl	1d24 <get_cmd>
			if (cmd) {
    1eb8:	b958      	cbnz	r0, 1ed2 <cmd_help+0x3e>
				printk("Unknown command '%s'\n", cmd_str);
    1eba:	4621      	mov	r1, r4
    1ebc:	4837      	ldr	r0, [pc, #220]	; (1f9c <cmd_help+0x108>)
    1ebe:	e00f      	b.n	1ee0 <cmd_help+0x4c>
			module = default_module;
    1ec0:	4b37      	ldr	r3, [pc, #220]	; (1fa0 <cmd_help+0x10c>)
			cmd_str = argv[1];
    1ec2:	6864      	ldr	r4, [r4, #4]
			module = default_module;
    1ec4:	681d      	ldr	r5, [r3, #0]
		if (!module) {
    1ec6:	2d00      	cmp	r5, #0
    1ec8:	d1f2      	bne.n	1eb0 <cmd_help+0x1c>
			cmd = get_standalone(cmd_str);
    1eca:	4620      	mov	r0, r4
    1ecc:	f7ff ff3a 	bl	1d44 <get_standalone>
			if (cmd) {
    1ed0:	b120      	cbz	r0, 1edc <cmd_help+0x48>
				return show_cmd_help(cmd, true);
    1ed2:	2101      	movs	r1, #1
}
    1ed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				return show_cmd_help(cmd, true);
    1ed8:	f7ff bfc2 	b.w	1e60 <show_cmd_help>
				printk("No help found for '%s'\n", cmd_str);
    1edc:	4831      	ldr	r0, [pc, #196]	; (1fa4 <cmd_help+0x110>)
    1ede:	4621      	mov	r1, r4
				printk("Unknown command '%s'\n", cmd_str);
    1ee0:	f7ff fc48 	bl	1774 <printk>
				return -EINVAL;
    1ee4:	f06f 0015 	mvn.w	r0, #21
    1ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct shell_module *module = default_module;
    1eec:	4b2c      	ldr	r3, [pc, #176]	; (1fa0 <cmd_help+0x10c>)
    1eee:	681d      	ldr	r5, [r3, #0]
	if (module) {
    1ef0:	b1d5      	cbz	r5, 1f28 <cmd_help+0x94>
	printk("help\n");
    1ef2:	482d      	ldr	r0, [pc, #180]	; (1fa8 <cmd_help+0x114>)
		printk("%-28s %s\n",
    1ef4:	4f2d      	ldr	r7, [pc, #180]	; (1fac <cmd_help+0x118>)
    1ef6:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 1fe8 <cmd_help+0x154>
	printk("help\n");
    1efa:	f7ff fc3b 	bl	1774 <printk>
    1efe:	2600      	movs	r6, #0
	for (i = 0; module->commands[i].cmd_name; i++) {
    1f00:	686b      	ldr	r3, [r5, #4]
    1f02:	599c      	ldr	r4, [r3, r6]
    1f04:	199a      	adds	r2, r3, r6
    1f06:	b92c      	cbnz	r4, 1f14 <cmd_help+0x80>
		printk("\nEnter 'exit' to leave current module.\n");
    1f08:	4829      	ldr	r0, [pc, #164]	; (1fb0 <cmd_help+0x11c>)
		printk("\nTo select a module, enter 'select <module name>'.\n");
    1f0a:	f7ff fc33 	bl	1774 <printk>
	return 0;
    1f0e:	2000      	movs	r0, #0
}
    1f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		       module->commands[i].help ?
    1f14:	6892      	ldr	r2, [r2, #8]
		printk("%-28s %s\n",
    1f16:	4621      	mov	r1, r4
    1f18:	2a00      	cmp	r2, #0
    1f1a:	bf08      	it	eq
    1f1c:	463a      	moveq	r2, r7
    1f1e:	4640      	mov	r0, r8
    1f20:	f7ff fc28 	bl	1774 <printk>
    1f24:	3610      	adds	r6, #16
    1f26:	e7eb      	b.n	1f00 <cmd_help+0x6c>
		printk("[Modules]\n");
    1f28:	4822      	ldr	r0, [pc, #136]	; (1fb4 <cmd_help+0x120>)
		if (NUM_OF_SHELL_ENTITIES == 0) {
    1f2a:	4c23      	ldr	r4, [pc, #140]	; (1fb8 <cmd_help+0x124>)
		printk("[Modules]\n");
    1f2c:	f7ff fc22 	bl	1774 <printk>
		if (NUM_OF_SHELL_ENTITIES == 0) {
    1f30:	4b22      	ldr	r3, [pc, #136]	; (1fbc <cmd_help+0x128>)
    1f32:	1b1b      	subs	r3, r3, r4
    1f34:	2b16      	cmp	r3, #22
    1f36:	d802      	bhi.n	1f3e <cmd_help+0xaa>
			printk("No registered modules.\n");
    1f38:	4821      	ldr	r0, [pc, #132]	; (1fc0 <cmd_help+0x12c>)
    1f3a:	f7ff fc1b 	bl	1774 <printk>
		for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
    1f3e:	4b21      	ldr	r3, [pc, #132]	; (1fc4 <cmd_help+0x130>)
    1f40:	4e21      	ldr	r6, [pc, #132]	; (1fc8 <cmd_help+0x134>)
			printk("%s\n", __shell_module_start[i].module_name);
    1f42:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1fe0 <cmd_help+0x14c>
		for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
    1f46:	1b1b      	subs	r3, r3, r4
    1f48:	109b      	asrs	r3, r3, #2
    1f4a:	435e      	muls	r6, r3
    1f4c:	2500      	movs	r5, #0
			printk("%s\n", __shell_module_start[i].module_name);
    1f4e:	270c      	movs	r7, #12
		for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
    1f50:	42b5      	cmp	r5, r6
    1f52:	db13      	blt.n	1f7c <cmd_help+0xe8>
		printk("\n[Commands]\n");
    1f54:	481d      	ldr	r0, [pc, #116]	; (1fcc <cmd_help+0x138>)
		if (NUM_OF_SHELL_CMDS == 0) {
    1f56:	4d1e      	ldr	r5, [pc, #120]	; (1fd0 <cmd_help+0x13c>)
		printk("\n[Commands]\n");
    1f58:	f7ff fc0c 	bl	1774 <printk>
		if (NUM_OF_SHELL_CMDS == 0) {
    1f5c:	4b1d      	ldr	r3, [pc, #116]	; (1fd4 <cmd_help+0x140>)
    1f5e:	1b5b      	subs	r3, r3, r5
    1f60:	2b1e      	cmp	r3, #30
    1f62:	d802      	bhi.n	1f6a <cmd_help+0xd6>
			printk("No registered commands.\n");
    1f64:	481c      	ldr	r0, [pc, #112]	; (1fd8 <cmd_help+0x144>)
    1f66:	f7ff fc05 	bl	1774 <printk>
		for (i = 0; i < NUM_OF_SHELL_CMDS; i++) {
    1f6a:	4c1c      	ldr	r4, [pc, #112]	; (1fdc <cmd_help+0x148>)
			printk("%s\n", __shell_cmd_start[i].cmd_name);
    1f6c:	4f1c      	ldr	r7, [pc, #112]	; (1fe0 <cmd_help+0x14c>)
		for (i = 0; i < NUM_OF_SHELL_CMDS; i++) {
    1f6e:	1b64      	subs	r4, r4, r5
    1f70:	1124      	asrs	r4, r4, #4
    1f72:	2600      	movs	r6, #0
    1f74:	42a6      	cmp	r6, r4
    1f76:	db09      	blt.n	1f8c <cmd_help+0xf8>
		printk("\nTo select a module, enter 'select <module name>'.\n");
    1f78:	481a      	ldr	r0, [pc, #104]	; (1fe4 <cmd_help+0x150>)
    1f7a:	e7c6      	b.n	1f0a <cmd_help+0x76>
			printk("%s\n", __shell_module_start[i].module_name);
    1f7c:	fb07 f305 	mul.w	r3, r7, r5
    1f80:	4640      	mov	r0, r8
    1f82:	58e1      	ldr	r1, [r4, r3]
    1f84:	f7ff fbf6 	bl	1774 <printk>
		for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
    1f88:	3501      	adds	r5, #1
    1f8a:	e7e1      	b.n	1f50 <cmd_help+0xbc>
			printk("%s\n", __shell_cmd_start[i].cmd_name);
    1f8c:	0133      	lsls	r3, r6, #4
    1f8e:	4638      	mov	r0, r7
    1f90:	58e9      	ldr	r1, [r5, r3]
    1f92:	f7ff fbef 	bl	1774 <printk>
		for (i = 0; i < NUM_OF_SHELL_CMDS; i++) {
    1f96:	3601      	adds	r6, #1
    1f98:	e7ec      	b.n	1f74 <cmd_help+0xe0>
    1f9a:	bf00      	nop
    1f9c:	00020c48 	.word	0x00020c48
    1fa0:	20000250 	.word	0x20000250
    1fa4:	00020c30 	.word	0x00020c30
    1fa8:	00020c5e 	.word	0x00020c5e
    1fac:	00021033 	.word	0x00021033
    1fb0:	00020c6e 	.word	0x00020c6e
    1fb4:	00020c96 	.word	0x00020c96
    1fb8:	2000e99c 	.word	0x2000e99c
    1fbc:	2000e9b3 	.word	0x2000e9b3
    1fc0:	00020ca1 	.word	0x00020ca1
    1fc4:	2000e9a8 	.word	0x2000e9a8
    1fc8:	aaaaaaab 	.word	0xaaaaaaab
    1fcc:	00020cb9 	.word	0x00020cb9
    1fd0:	2000e9a8 	.word	0x2000e9a8
    1fd4:	2000e9c7 	.word	0x2000e9c7
    1fd8:	00020cc6 	.word	0x00020cc6
    1fdc:	2000e9b8 	.word	0x2000e9b8
    1fe0:	00020d14 	.word	0x00020d14
    1fe4:	00020cdf 	.word	0x00020cdf
    1fe8:	00020c64 	.word	0x00020c64

00001fec <cmd_select>:
	if (argc == 1) {
    1fec:	2801      	cmp	r0, #1
    1fee:	d002      	beq.n	1ff6 <cmd_select+0xa>
	return set_default_module(argv[1]);
    1ff0:	6848      	ldr	r0, [r1, #4]
    1ff2:	f7ff beeb 	b.w	1dcc <set_default_module>
		default_module = NULL;
    1ff6:	4b02      	ldr	r3, [pc, #8]	; (2000 <cmd_select+0x14>)
    1ff8:	2000      	movs	r0, #0
    1ffa:	6018      	str	r0, [r3, #0]
}
    1ffc:	4770      	bx	lr
    1ffe:	bf00      	nop
    2000:	20000250 	.word	0x20000250

00002004 <completion>:
	/* only two parameters are possibles in case of no default module */
	return str ? dest : NULL;
}

static u8_t completion(char *line, u8_t len)
{
    2004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int common_chars = -1, space = 0;
	int i, command_len;
	const struct shell_module *module;
	char *command_prefix;

	if (len >= (MODULE_NAME_MAX_LEN + COMMAND_MAX_LEN - 1)) {
    2008:	2944      	cmp	r1, #68	; 0x44
{
    200a:	b089      	sub	sp, #36	; 0x24
    200c:	4681      	mov	r9, r0
    200e:	4688      	mov	r8, r1
	if (len >= (MODULE_NAME_MAX_LEN + COMMAND_MAX_LEN - 1)) {
    2010:	d901      	bls.n	2016 <completion+0x12>
	 * k_fifo_get function
	 */
	line[len] = '\0';
	module = get_completion_module(line, &command_prefix);
	if (!module) {
		return 0;
    2012:	2000      	movs	r0, #0
    2014:	e069      	b.n	20ea <completion+0xe6>
	line[len] = '\0';
    2016:	2300      	movs	r3, #0
    2018:	5443      	strb	r3, [r0, r1]
    201a:	4604      	mov	r4, r0
	while (*str && *str == ' ') {
    201c:	4623      	mov	r3, r4
    201e:	f813 2b01 	ldrb.w	r2, [r3], #1
    2022:	2a20      	cmp	r2, #32
    2024:	d016      	beq.n	2054 <completion+0x50>
	if (!*str) {
    2026:	2a00      	cmp	r2, #0
    2028:	d0f3      	beq.n	2012 <completion+0xe>
	if (default_module) {
    202a:	4e50      	ldr	r6, [pc, #320]	; (216c <completion+0x168>)
	str = strchr(str, ' ');
    202c:	2120      	movs	r1, #32
    202e:	4620      	mov	r0, r4
	if (default_module) {
    2030:	6837      	ldr	r7, [r6, #0]
	str = strchr(str, ' ');
    2032:	f7fe fbe0 	bl	7f6 <strchr>
	if (default_module) {
    2036:	f8d6 b000 	ldr.w	fp, [r6]
	if (default_module) {
    203a:	2f00      	cmp	r7, #0
    203c:	bf14      	ite	ne
    203e:	46a2      	movne	sl, r4
    2040:	f04f 0a00 	moveq.w	sl, #0
	str = strchr(str, ' ');
    2044:	4605      	mov	r5, r0
	if (default_module) {
    2046:	f1bb 0f00 	cmp.w	fp, #0
    204a:	d005      	beq.n	2058 <completion+0x54>
		return str ? dest : NULL;
    204c:	2800      	cmp	r0, #0
    204e:	d0e0      	beq.n	2012 <completion+0xe>
	if (!module) {
    2050:	b9f7      	cbnz	r7, 2090 <completion+0x8c>
    2052:	e7de      	b.n	2012 <completion+0xe>
	while (*str && *str == ' ') {
    2054:	461c      	mov	r4, r3
    2056:	e7e1      	b.n	201c <completion+0x18>
	if (!str) {
    2058:	2800      	cmp	r0, #0
    205a:	d0da      	beq.n	2012 <completion+0xe>
	if ((str - start + 1) >= MODULE_NAME_MAX_LEN) {
    205c:	1b06      	subs	r6, r0, r4
    205e:	1c72      	adds	r2, r6, #1
    2060:	2a13      	cmp	r2, #19
    2062:	dcd6      	bgt.n	2012 <completion+0xe>
	strncpy(dest_str, start, (str - start + 1));
    2064:	4621      	mov	r1, r4
    2066:	a803      	add	r0, sp, #12
    2068:	f7fe fbb4 	bl	7d4 <strncpy>
	dest_str[str - start] = '\0';
    206c:	ab08      	add	r3, sp, #32
    206e:	441e      	add	r6, r3
	dest = get_destination_module(dest_str);
    2070:	a803      	add	r0, sp, #12
	dest_str[str - start] = '\0';
    2072:	f806 bc14 	strb.w	fp, [r6, #-20]
	dest = get_destination_module(dest_str);
    2076:	f7ff fe83 	bl	1d80 <get_destination_module>
	if (!dest) {
    207a:	4607      	mov	r7, r0
    207c:	2800      	cmp	r0, #0
    207e:	d0c8      	beq.n	2012 <completion+0xe>
	str++;
    2080:	f105 0a01 	add.w	sl, r5, #1
	str = strchr(str, ' ');
    2084:	2120      	movs	r1, #32
    2086:	4650      	mov	r0, sl
    2088:	f7fe fbb5 	bl	7f6 <strchr>
	return str ? dest : NULL;
    208c:	2800      	cmp	r0, #0
    208e:	d0c0      	beq.n	2012 <completion+0xe>
	}

	command_len = strlen(command_prefix);
    2090:	4650      	mov	r0, sl
    2092:	f7fe fbcc 	bl	82e <strlen>
    2096:	f04f 0b00 	mov.w	fp, #0
    209a:	9001      	str	r0, [sp, #4]
	int common_chars = -1, space = 0;
    209c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	const char *first_match = NULL;
    20a0:	465d      	mov	r5, fp

	for (i = 0; module->commands[i].cmd_name; i++) {
    20a2:	687a      	ldr	r2, [r7, #4]
    20a4:	f852 600b 	ldr.w	r6, [r2, fp]
    20a8:	bb16      	cbnz	r6, 20f0 <completion+0xec>

		printk("%s\n", module->commands[i].cmd_name);
	}

	/* no match, do nothing */
	if (!first_match) {
    20aa:	2d00      	cmp	r5, #0
    20ac:	d0b1      	beq.n	2012 <completion+0xe>
		return 0;
	}

	if (common_chars >= 0) {
    20ae:	2c00      	cmp	r4, #0
    20b0:	db48      	blt.n	2144 <completion+0x140>
		/* multiple match, restore prompt */
		printk("%s", get_prompt());
    20b2:	f7ff feb7 	bl	1e24 <get_prompt>
    20b6:	4601      	mov	r1, r0
    20b8:	482d      	ldr	r0, [pc, #180]	; (2170 <completion+0x16c>)
    20ba:	f7ff fb5b 	bl	1774 <printk>
		printk("%s", line);
    20be:	4649      	mov	r1, r9
    20c0:	482b      	ldr	r0, [pc, #172]	; (2170 <completion+0x16c>)
    20c2:	f7ff fb57 	bl	1774 <printk>
    20c6:	9b01      	ldr	r3, [sp, #4]
		space = 1;
	}

	/* complete common part */
	for (i = command_len; i < common_chars; i++) {
		printk("%c", first_match[i]);
    20c8:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 2180 <completion+0x17c>
    20cc:	18ef      	adds	r7, r5, r3
	for (i = command_len; i < common_chars; i++) {
    20ce:	1b7b      	subs	r3, r7, r5
    20d0:	429c      	cmp	r4, r3
    20d2:	dc3d      	bgt.n	2150 <completion+0x14c>
		line[len++] = first_match[i];
	}

	/* for convenience add space after command */
	if (space) {
    20d4:	b12e      	cbz	r6, 20e2 <completion+0xde>
		printk(" ");
    20d6:	4827      	ldr	r0, [pc, #156]	; (2174 <completion+0x170>)
    20d8:	f7ff fb4c 	bl	1774 <printk>
		line[len] = ' ';
    20dc:	2320      	movs	r3, #32
    20de:	f809 3008 	strb.w	r3, [r9, r8]
	}

	return common_chars - command_len + space;
    20e2:	9b01      	ldr	r3, [sp, #4]
    20e4:	19a0      	adds	r0, r4, r6
    20e6:	1ac0      	subs	r0, r0, r3
    20e8:	b2c0      	uxtb	r0, r0
}
    20ea:	b009      	add	sp, #36	; 0x24
    20ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (strncmp(command_prefix,
    20f0:	4631      	mov	r1, r6
    20f2:	9a01      	ldr	r2, [sp, #4]
    20f4:	4650      	mov	r0, sl
    20f6:	f7fe fbaf 	bl	858 <strncmp>
    20fa:	4606      	mov	r6, r0
    20fc:	b918      	cbnz	r0, 2106 <completion+0x102>
		if (!first_match) {
    20fe:	b92d      	cbnz	r5, 210c <completion+0x108>
			first_match = module->commands[i].cmd_name;
    2100:	687a      	ldr	r2, [r7, #4]
    2102:	f852 500b 	ldr.w	r5, [r2, fp]
    2106:	f10b 0b10 	add.w	fp, fp, #16
    210a:	e7ca      	b.n	20a2 <completion+0x9e>
		if (first_match && (common_chars < 0)) {
    210c:	2c00      	cmp	r4, #0
    210e:	da07      	bge.n	2120 <completion+0x11c>
			printk("\n%s\n", first_match);
    2110:	4629      	mov	r1, r5
    2112:	4819      	ldr	r0, [pc, #100]	; (2178 <completion+0x174>)
    2114:	f7ff fb2e 	bl	1774 <printk>
			common_chars = strlen(first_match);
    2118:	4628      	mov	r0, r5
    211a:	f7fe fb88 	bl	82e <strlen>
    211e:	4604      	mov	r4, r0
		for (j = 0; j < common_chars; j++) {
    2120:	42a6      	cmp	r6, r4
    2122:	687a      	ldr	r2, [r7, #4]
    2124:	da05      	bge.n	2132 <completion+0x12e>
			if (first_match[j] != module->commands[i].cmd_name[j]) {
    2126:	f852 100b 	ldr.w	r1, [r2, fp]
    212a:	5da8      	ldrb	r0, [r5, r6]
    212c:	5d89      	ldrb	r1, [r1, r6]
    212e:	4288      	cmp	r0, r1
    2130:	d006      	beq.n	2140 <completion+0x13c>
		printk("%s\n", module->commands[i].cmd_name);
    2132:	f852 100b 	ldr.w	r1, [r2, fp]
    2136:	4811      	ldr	r0, [pc, #68]	; (217c <completion+0x178>)
    2138:	f7ff fb1c 	bl	1774 <printk>
    213c:	4634      	mov	r4, r6
    213e:	e7e2      	b.n	2106 <completion+0x102>
		for (j = 0; j < common_chars; j++) {
    2140:	3601      	adds	r6, #1
    2142:	e7ed      	b.n	2120 <completion+0x11c>
		common_chars = strlen(first_match);
    2144:	4628      	mov	r0, r5
    2146:	f7fe fb72 	bl	82e <strlen>
		space = 1;
    214a:	2601      	movs	r6, #1
		common_chars = strlen(first_match);
    214c:	4604      	mov	r4, r0
    214e:	e7ba      	b.n	20c6 <completion+0xc2>
		printk("%c", first_match[i]);
    2150:	7839      	ldrb	r1, [r7, #0]
    2152:	4650      	mov	r0, sl
    2154:	f7ff fb0e 	bl	1774 <printk>
		line[len++] = first_match[i];
    2158:	f108 0301 	add.w	r3, r8, #1
    215c:	f817 2b01 	ldrb.w	r2, [r7], #1
    2160:	f809 2008 	strb.w	r2, [r9, r8]
    2164:	fa5f f883 	uxtb.w	r8, r3
    2168:	e7b1      	b.n	20ce <completion+0xca>
    216a:	bf00      	nop
    216c:	20000250 	.word	0x20000250
    2170:	00020d18 	.word	0x00020d18
    2174:	00020c2e 	.word	0x00020c2e
    2178:	00020d13 	.word	0x00020d13
    217c:	00020d14 	.word	0x00020d14
    2180:	00020d1b 	.word	0x00020d1b

00002184 <shell_exec>:
{
    2184:	b570      	push	{r4, r5, r6, lr}
    2186:	b08c      	sub	sp, #48	; 0x30
    2188:	4605      	mov	r5, r0
	if (!strlen(str)) {
    218a:	f7fe fb50 	bl	82e <strlen>
    218e:	4604      	mov	r4, r0
    2190:	b1f8      	cbz	r0, 21d2 <shell_exec+0x4e>
    2192:	462b      	mov	r3, r5
	while (*str && *str == ' ') {
    2194:	781c      	ldrb	r4, [r3, #0]
    2196:	2c20      	cmp	r4, #32
    2198:	4618      	mov	r0, r3
    219a:	f103 0301 	add.w	r3, r3, #1
    219e:	d0f9      	beq.n	2194 <shell_exec+0x10>
	if (!*str) {
    21a0:	b1bc      	cbz	r4, 21d2 <shell_exec+0x4e>
	argv[argc++] = str;
    21a2:	ad0c      	add	r5, sp, #48	; 0x30
    21a4:	2401      	movs	r4, #1
    21a6:	f845 0d2c 	str.w	r0, [r5, #-44]!
		*str++ = '\0';
    21aa:	2600      	movs	r6, #0
	while ((str = strchr(str, ' '))) {
    21ac:	2120      	movs	r1, #32
    21ae:	f7fe fb22 	bl	7f6 <strchr>
    21b2:	b140      	cbz	r0, 21c6 <shell_exec+0x42>
		*str++ = '\0';
    21b4:	4603      	mov	r3, r0
    21b6:	f803 6b01 	strb.w	r6, [r3], #1
    21ba:	4618      	mov	r0, r3
		while (*str && *str == ' ') {
    21bc:	f813 2b01 	ldrb.w	r2, [r3], #1
    21c0:	2a20      	cmp	r2, #32
    21c2:	d0fa      	beq.n	21ba <shell_exec+0x36>
		if (!*str) {
    21c4:	bb1a      	cbnz	r2, 220e <shell_exec+0x8a>
	argv[argc] = NULL;
    21c6:	ab0c      	add	r3, sp, #48	; 0x30
    21c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    21cc:	2200      	movs	r2, #0
    21ce:	f843 2c2c 	str.w	r2, [r3, #-44]
	argc = line2argv(line, argv, ARRAY_SIZE(argv));
    21d2:	4626      	mov	r6, r4
	if (!argc) {
    21d4:	b1c4      	cbz	r4, 2208 <shell_exec+0x84>
	return get_cmd(internal_commands, command);
    21d6:	9901      	ldr	r1, [sp, #4]
    21d8:	482d      	ldr	r0, [pc, #180]	; (2290 <shell_exec+0x10c>)
    21da:	f7ff fda3 	bl	1d24 <get_cmd>
	if (cmd) {
    21de:	4605      	mov	r5, r0
    21e0:	2800      	cmp	r0, #0
    21e2:	d133      	bne.n	224c <shell_exec+0xc8>
	cmd = get_standalone(argv[0]);
    21e4:	9801      	ldr	r0, [sp, #4]
    21e6:	f7ff fdad 	bl	1d44 <get_standalone>
	if (cmd) {
    21ea:	4605      	mov	r5, r0
    21ec:	bb70      	cbnz	r0, 224c <shell_exec+0xc8>
	if (argc == 1 && !default_module && NUM_OF_SHELL_CMDS == 0) {
    21ee:	2c01      	cmp	r4, #1
    21f0:	4a28      	ldr	r2, [pc, #160]	; (2294 <shell_exec+0x110>)
    21f2:	d117      	bne.n	2224 <shell_exec+0xa0>
    21f4:	6813      	ldr	r3, [r2, #0]
    21f6:	b9ab      	cbnz	r3, 2224 <shell_exec+0xa0>
    21f8:	4927      	ldr	r1, [pc, #156]	; (2298 <shell_exec+0x114>)
    21fa:	4b28      	ldr	r3, [pc, #160]	; (229c <shell_exec+0x118>)
    21fc:	1a5b      	subs	r3, r3, r1
    21fe:	2b1e      	cmp	r3, #30
    2200:	d810      	bhi.n	2224 <shell_exec+0xa0>
		printk("No module selected. Use 'select' or 'help'.\n");
    2202:	4827      	ldr	r0, [pc, #156]	; (22a0 <shell_exec+0x11c>)
		printk("Type 'help' for list of available commands\n");
    2204:	f7ff fab6 	bl	1774 <printk>
		return -EINVAL;
    2208:	f06f 0415 	mvn.w	r4, #21
    220c:	e03c      	b.n	2288 <shell_exec+0x104>
		argv[argc++] = str;
    220e:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
    2212:	3401      	adds	r4, #1
		if (argc == size) {
    2214:	2c0b      	cmp	r4, #11
    2216:	d1c9      	bne.n	21ac <shell_exec+0x28>
			printk("Too many parameters (max %zu)\n", size - 1);
    2218:	210a      	movs	r1, #10
    221a:	4822      	ldr	r0, [pc, #136]	; (22a4 <shell_exec+0x120>)
    221c:	f7ff faaa 	bl	1774 <printk>
			return 0;
    2220:	2400      	movs	r4, #0
    2222:	e7d6      	b.n	21d2 <shell_exec+0x4e>
	if (default_module) {
    2224:	6813      	ldr	r3, [r2, #0]
    2226:	b953      	cbnz	r3, 223e <shell_exec+0xba>
	if (!cmd && argc > 1) {
    2228:	2c01      	cmp	r4, #1
    222a:	dc11      	bgt.n	2250 <shell_exec+0xcc>
		if (app_cmd_handler) {
    222c:	4b1e      	ldr	r3, [pc, #120]	; (22a8 <shell_exec+0x124>)
    222e:	681b      	ldr	r3, [r3, #0]
    2230:	bb33      	cbnz	r3, 2280 <shell_exec+0xfc>
		printk("Unrecognized command: %s\n", argv[0]);
    2232:	9901      	ldr	r1, [sp, #4]
    2234:	481d      	ldr	r0, [pc, #116]	; (22ac <shell_exec+0x128>)
    2236:	f7ff fa9d 	bl	1774 <printk>
		printk("Type 'help' for list of available commands\n");
    223a:	481d      	ldr	r0, [pc, #116]	; (22b0 <shell_exec+0x12c>)
    223c:	e7e2      	b.n	2204 <shell_exec+0x80>
	return get_cmd(module->commands, cmd_str);
    223e:	9901      	ldr	r1, [sp, #4]
    2240:	6858      	ldr	r0, [r3, #4]
    2242:	f7ff fd6f 	bl	1d24 <get_cmd>
	if (!cmd && argc > 1) {
    2246:	4605      	mov	r5, r0
    2248:	2800      	cmp	r0, #0
    224a:	d0ed      	beq.n	2228 <shell_exec+0xa4>
	char *argv[ARGC_MAX + 1], **argv_start = argv;
    224c:	a901      	add	r1, sp, #4
    224e:	e00d      	b.n	226c <shell_exec+0xe8>
		module = get_destination_module(argv[0]);
    2250:	9801      	ldr	r0, [sp, #4]
    2252:	f7ff fd95 	bl	1d80 <get_destination_module>
		if (module) {
    2256:	2800      	cmp	r0, #0
    2258:	d0e8      	beq.n	222c <shell_exec+0xa8>
	return get_cmd(module->commands, cmd_str);
    225a:	9902      	ldr	r1, [sp, #8]
    225c:	6840      	ldr	r0, [r0, #4]
    225e:	f7ff fd61 	bl	1d24 <get_cmd>
			if (cmd) {
    2262:	4605      	mov	r5, r0
    2264:	2800      	cmp	r0, #0
    2266:	d0e1      	beq.n	222c <shell_exec+0xa8>
				argc--;
    2268:	1e66      	subs	r6, r4, #1
				argv_start++;
    226a:	a902      	add	r1, sp, #8
	err = cmd->cb(argc, argv_start);
    226c:	686b      	ldr	r3, [r5, #4]
    226e:	4630      	mov	r0, r6
    2270:	4798      	blx	r3
	if (err < 0) {
    2272:	1e04      	subs	r4, r0, #0
    2274:	da08      	bge.n	2288 <shell_exec+0x104>
		show_cmd_help(cmd, false);
    2276:	2100      	movs	r1, #0
    2278:	4628      	mov	r0, r5
    227a:	f7ff fdf1 	bl	1e60 <show_cmd_help>
    227e:	e003      	b.n	2288 <shell_exec+0x104>
			return app_cmd_handler(argc, argv);
    2280:	4620      	mov	r0, r4
    2282:	a901      	add	r1, sp, #4
    2284:	4798      	blx	r3
    2286:	4604      	mov	r4, r0
}
    2288:	4620      	mov	r0, r4
    228a:	b00c      	add	sp, #48	; 0x30
    228c:	bd70      	pop	{r4, r5, r6, pc}
    228e:	bf00      	nop
    2290:	00020d20 	.word	0x00020d20
    2294:	20000250 	.word	0x20000250
    2298:	2000e9a8 	.word	0x2000e9a8
    229c:	2000e9c7 	.word	0x2000e9c7
    22a0:	00020e36 	.word	0x00020e36
    22a4:	00020e17 	.word	0x00020e17
    22a8:	20000090 	.word	0x20000090
    22ac:	00020e63 	.word	0x00020e63
    22b0:	00020e7d 	.word	0x00020e7d

000022b4 <shell>:
{
    22b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	printk("Zephyr Shell, Zephyr version: %s\n", KERNEL_VERSION_STRING);
    22b8:	4917      	ldr	r1, [pc, #92]	; (2318 <shell+0x64>)
    22ba:	4818      	ldr	r0, [pc, #96]	; (231c <shell+0x68>)
		if (!no_promt && !skip_prompt) {
    22bc:	4e18      	ldr	r6, [pc, #96]	; (2320 <shell+0x6c>)
			printk("%s", get_prompt());
    22be:	4f19      	ldr	r7, [pc, #100]	; (2324 <shell+0x70>)
		cmd = k_fifo_get(&cmds_queue, K_FOREVER);
    22c0:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2338 <shell+0x84>
	printk("Zephyr Shell, Zephyr version: %s\n", KERNEL_VERSION_STRING);
    22c4:	f7ff fa56 	bl	1774 <printk>
	printk("Type 'help' for a list of available commands\n");
    22c8:	4817      	ldr	r0, [pc, #92]	; (2328 <shell+0x74>)
    22ca:	f7ff fa53 	bl	1774 <printk>
	bool skip_prompt = false;
    22ce:	2500      	movs	r5, #0
		if (!no_promt && !skip_prompt) {
    22d0:	7833      	ldrb	r3, [r6, #0]
    22d2:	b933      	cbnz	r3, 22e2 <shell+0x2e>
    22d4:	b92d      	cbnz	r5, 22e2 <shell+0x2e>
			printk("%s", get_prompt());
    22d6:	f7ff fda5 	bl	1e24 <get_prompt>
    22da:	4601      	mov	r1, r0
    22dc:	4638      	mov	r0, r7
    22de:	f7ff fa49 	bl	1774 <printk>
		cmd = k_fifo_get(&cmds_queue, K_FOREVER);
    22e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    22e6:	4640      	mov	r0, r8
    22e8:	f01d f889 	bl	1f3fe <k_queue_get>
		if (mcumgr_cmd_handler != NULL && cmd->is_mcumgr) {
    22ec:	4b0f      	ldr	r3, [pc, #60]	; (232c <shell+0x78>)
    22ee:	681b      	ldr	r3, [r3, #0]
		cmd = k_fifo_get(&cmds_queue, K_FOREVER);
    22f0:	4604      	mov	r4, r0
    22f2:	3005      	adds	r0, #5
		if (mcumgr_cmd_handler != NULL && cmd->is_mcumgr) {
    22f4:	b15b      	cbz	r3, 230e <shell+0x5a>
    22f6:	7922      	ldrb	r2, [r4, #4]
    22f8:	07d2      	lsls	r2, r2, #31
    22fa:	d508      	bpl.n	230e <shell+0x5a>
			mcumgr_cmd_handler(cmd->line, mcumgr_arg);
    22fc:	4a0c      	ldr	r2, [pc, #48]	; (2330 <shell+0x7c>)
    22fe:	6811      	ldr	r1, [r2, #0]
    2300:	4798      	blx	r3
			skip_prompt = true;
    2302:	2501      	movs	r5, #1
		k_fifo_put(&avail_queue, cmd);
    2304:	4621      	mov	r1, r4
    2306:	480b      	ldr	r0, [pc, #44]	; (2334 <shell+0x80>)
    2308:	f01d f855 	bl	1f3b6 <k_queue_append>
	while (1) {
    230c:	e7e0      	b.n	22d0 <shell+0x1c>
			shell_exec(cmd->line);
    230e:	f7ff ff39 	bl	2184 <shell_exec>
			skip_prompt = false;
    2312:	2500      	movs	r5, #0
    2314:	e7f6      	b.n	2304 <shell+0x50>
    2316:	bf00      	nop
    2318:	00020dbf 	.word	0x00020dbf
    231c:	00020dc7 	.word	0x00020dc7
    2320:	20000274 	.word	0x20000274
    2324:	00020d18 	.word	0x00020d18
    2328:	00020de9 	.word	0x00020de9
    232c:	20000270 	.word	0x20000270
    2330:	2000026c 	.word	0x2000026c
    2334:	20000098 	.word	0x20000098
    2338:	20000240 	.word	0x20000240

0000233c <shell_init>:


void shell_init(const char *str)
{
    233c:	b510      	push	{r4, lr}
    233e:	4604      	mov	r4, r0
    2340:	b086      	sub	sp, #24
	k_fifo_init(&cmds_queue);
    2342:	4818      	ldr	r0, [pc, #96]	; (23a4 <shell_init+0x68>)
    2344:	f01d f806 	bl	1f354 <k_queue_init>
	k_fifo_init(&avail_queue);
    2348:	4817      	ldr	r0, [pc, #92]	; (23a8 <shell_init+0x6c>)
    234a:	f01d f803 	bl	1f354 <k_queue_init>
		k_fifo_put(&avail_queue, &buf[i]);
    234e:	4917      	ldr	r1, [pc, #92]	; (23ac <shell_init+0x70>)
    2350:	4815      	ldr	r0, [pc, #84]	; (23a8 <shell_init+0x6c>)
    2352:	f01d f830 	bl	1f3b6 <k_queue_append>
    2356:	4916      	ldr	r1, [pc, #88]	; (23b0 <shell_init+0x74>)
    2358:	4813      	ldr	r0, [pc, #76]	; (23a8 <shell_init+0x6c>)
    235a:	f01d f82c 	bl	1f3b6 <k_queue_append>
    235e:	4915      	ldr	r1, [pc, #84]	; (23b4 <shell_init+0x78>)
    2360:	4811      	ldr	r0, [pc, #68]	; (23a8 <shell_init+0x6c>)
    2362:	f01d f828 	bl	1f3b6 <k_queue_append>

	line_queue_init();

	prompt = str ? str : "";
    2366:	4b14      	ldr	r3, [pc, #80]	; (23b8 <shell_init+0x7c>)

    2368:	4914      	ldr	r1, [pc, #80]	; (23bc <shell_init+0x80>)
    236a:	4815      	ldr	r0, [pc, #84]	; (23c0 <shell_init+0x84>)
    236c:	2c00      	cmp	r4, #0
    236e:	bf08      	it	eq
    2370:	461c      	moveq	r4, r3
    2372:	4b14      	ldr	r3, [pc, #80]	; (23c4 <shell_init+0x88>)
    2374:	f06f 0208 	mvn.w	r2, #8
    2378:	601c      	str	r4, [r3, #0]
    237a:	2300      	movs	r3, #0
    237c:	9305      	str	r3, [sp, #20]
    237e:	9304      	str	r3, [sp, #16]
    2380:	9203      	str	r2, [sp, #12]
    2382:	9302      	str	r3, [sp, #8]
    2384:	9301      	str	r3, [sp, #4]
    2386:	9300      	str	r3, [sp, #0]
    2388:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    238c:	4b0e      	ldr	r3, [pc, #56]	; (23c8 <shell_init+0x8c>)
    238e:	f01d fc99 	bl	1fcc4 <_impl_k_thread_create>
	k_thread_create(&shell_thread, stack, STACKSIZE, shell, NULL, NULL,
			NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);

	/* Register serial console handler */
#ifdef CONFIG_UART_CONSOLE
	uart_register_input(&avail_queue, &cmds_queue, completion);
    2392:	4a0e      	ldr	r2, [pc, #56]	; (23cc <shell_init+0x90>)
    2394:	4903      	ldr	r1, [pc, #12]	; (23a4 <shell_init+0x68>)
    2396:	4804      	ldr	r0, [pc, #16]	; (23a8 <shell_init+0x6c>)
	telnet_register_input(&avail_queue, &cmds_queue, completion);
#endif
#ifdef CONFIG_NATIVE_POSIX_STDIN_CONSOLE
	native_stdin_register_input(&avail_queue, &cmds_queue, completion);
#endif
}
    2398:	b006      	add	sp, #24
    239a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	uart_register_input(&avail_queue, &cmds_queue, completion);
    239e:	f000 ba81 	b.w	28a4 <uart_register_input>
    23a2:	bf00      	nop
    23a4:	20000240 	.word	0x20000240
    23a8:	20000098 	.word	0x20000098
    23ac:	200000a8 	.word	0x200000a8
    23b0:	20000130 	.word	0x20000130
    23b4:	200001b8 	.word	0x200001b8
    23b8:	00021033 	.word	0x00021033
    23bc:	20005290 	.word	0x20005290
    23c0:	2000027c 	.word	0x2000027c
    23c4:	20000278 	.word	0x20000278
    23c8:	000022b5 	.word	0x000022b5
    23cc:	00002005 	.word	0x00002005

000023d0 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    23d0:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    23d2:	4c11      	ldr	r4, [pc, #68]	; (2418 <sys_rand32_get+0x48>)
    23d4:	f3bf 8f5b 	dmb	ish
    23d8:	6820      	ldr	r0, [r4, #0]
    23da:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    23de:	b960      	cbnz	r0, 23fa <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
    23e0:	480e      	ldr	r0, [pc, #56]	; (241c <sys_rand32_get+0x4c>)
    23e2:	f01c fd6d 	bl	1eec0 <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    23e6:	f3bf 8f5b 	dmb	ish
    23ea:	e854 3f00 	ldrex	r3, [r4]
    23ee:	e844 0200 	strex	r2, r0, [r4]
    23f2:	2a00      	cmp	r2, #0
    23f4:	d1f9      	bne.n	23ea <sys_rand32_get+0x1a>
    23f6:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    23fa:	6843      	ldr	r3, [r0, #4]
    23fc:	2204      	movs	r2, #4
    23fe:	681b      	ldr	r3, [r3, #0]
    2400:	eb0d 0102 	add.w	r1, sp, r2
    2404:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    2406:	2800      	cmp	r0, #0
    2408:	da02      	bge.n	2410 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    240a:	f001 f817 	bl	343c <_timer_cycle_get_32>
    240e:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    2410:	9801      	ldr	r0, [sp, #4]
    2412:	b002      	add	sp, #8
    2414:	bd10      	pop	{r4, pc}
    2416:	bf00      	nop
    2418:	200002e4 	.word	0x200002e4
    241c:	00020ef9 	.word	0x00020ef9

00002420 <_impl_uart_irq_rx_disable>:

static inline void _impl_uart_irq_rx_disable(struct device *dev)
{
	const struct uart_driver_api *api = dev->driver_api;

	if (api->irq_rx_disable) {
    2420:	6843      	ldr	r3, [r0, #4]
    2422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2424:	b103      	cbz	r3, 2428 <_impl_uart_irq_rx_disable+0x8>
		api->irq_rx_disable(dev);
    2426:	4718      	bx	r3
    2428:	4770      	bx	lr

0000242a <uart_poll_out>:
	return api->poll_out(dev, out_char);
    242a:	6843      	ldr	r3, [r0, #4]
    242c:	685b      	ldr	r3, [r3, #4]
    242e:	4718      	bx	r3

00002430 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    2430:	280a      	cmp	r0, #10
{
    2432:	b538      	push	{r3, r4, r5, lr}
    2434:	4604      	mov	r4, r0
    2436:	4d06      	ldr	r5, [pc, #24]	; (2450 <console_out+0x20>)
	if ('\n' == c) {
    2438:	d103      	bne.n	2442 <console_out+0x12>
		uart_poll_out(uart_console_dev, '\r');
    243a:	210d      	movs	r1, #13
    243c:	6828      	ldr	r0, [r5, #0]
    243e:	f7ff fff4 	bl	242a <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
    2442:	b2e1      	uxtb	r1, r4
    2444:	6828      	ldr	r0, [r5, #0]
    2446:	f7ff fff0 	bl	242a <uart_poll_out>

	return c;
}
    244a:	4620      	mov	r0, r4
    244c:	bd38      	pop	{r3, r4, r5, pc}
    244e:	bf00      	nop
    2450:	20000308 	.word	0x20000308

00002454 <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    2454:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    2456:	f3bf 8f5b 	dmb	ish
    245a:	e850 3f00 	ldrex	r3, [r0]
    245e:	ea43 0201 	orr.w	r2, r3, r1
    2462:	e840 2e00 	strex	lr, r2, [r0]
    2466:	f1be 0f00 	cmp.w	lr, #0
    246a:	d1f6      	bne.n	245a <atomic_or+0x6>
    246c:	f3bf 8f5b 	dmb	ish
    2470:	4618      	mov	r0, r3
    2472:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00002478 <del_char>:
	/* Move cursor back to right place */
	cursor_restore();
}

static void del_char(char *pos, u8_t end)
{
    2478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uart_poll_out(uart_console_dev, '\b');
    247a:	4e14      	ldr	r6, [pc, #80]	; (24cc <del_char+0x54>)
{
    247c:	4604      	mov	r4, r0
    247e:	460d      	mov	r5, r1
	uart_poll_out(uart_console_dev, '\b');
    2480:	6830      	ldr	r0, [r6, #0]
    2482:	2108      	movs	r1, #8
    2484:	f7ff ffd1 	bl	242a <uart_poll_out>
    2488:	4637      	mov	r7, r6

	if (end == 0) {
    248a:	b94d      	cbnz	r5, 24a0 <del_char+0x28>
		uart_poll_out(uart_console_dev, ' ');
    248c:	2120      	movs	r1, #32
    248e:	6830      	ldr	r0, [r6, #0]
    2490:	f7ff ffcb 	bl	242a <uart_poll_out>
		uart_poll_out(uart_console_dev, '\b');
    2494:	6830      	ldr	r0, [r6, #0]
    2496:	2108      	movs	r1, #8

	uart_poll_out(uart_console_dev, ' ');

	/* Move cursor back to right place */
	cursor_restore();
}
    2498:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		uart_poll_out(uart_console_dev, '\b');
    249c:	f7ff bfc5 	b.w	242a <uart_poll_out>
	printk("\x1b[s");
    24a0:	480b      	ldr	r0, [pc, #44]	; (24d0 <del_char+0x58>)
    24a2:	f7ff f967 	bl	1774 <printk>
    24a6:	4425      	add	r5, r4
	while (end-- > 0) {
    24a8:	42ac      	cmp	r4, r5
    24aa:	d108      	bne.n	24be <del_char+0x46>
	uart_poll_out(uart_console_dev, ' ');
    24ac:	6838      	ldr	r0, [r7, #0]
    24ae:	2120      	movs	r1, #32
    24b0:	f7ff ffbb 	bl	242a <uart_poll_out>
	printk("\x1b[u");
    24b4:	4807      	ldr	r0, [pc, #28]	; (24d4 <del_char+0x5c>)
}
    24b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printk("\x1b[u");
    24ba:	f7ff b95b 	b.w	1774 <printk>
		*pos = *(pos + 1);
    24be:	7861      	ldrb	r1, [r4, #1]
    24c0:	f804 1b01 	strb.w	r1, [r4], #1
		uart_poll_out(uart_console_dev, *(pos++));
    24c4:	6838      	ldr	r0, [r7, #0]
    24c6:	f7ff ffb0 	bl	242a <uart_poll_out>
    24ca:	e7ed      	b.n	24a8 <del_char+0x30>
    24cc:	20000308 	.word	0x20000308
    24d0:	00020f03 	.word	0x00020f03
    24d4:	00020f07 	.word	0x00020f07

000024d8 <uart_console_isr>:
}

#endif /* CONFIG_UART_CONSOLE_MCUMGR */

void uart_console_isr(struct device *unused)
{
    24d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ARG_UNUSED(unused);

	while (uart_irq_update(uart_console_dev) &&
    24dc:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 27c0 <uart_console_isr+0x2e8>
			 */
			return;
		}
#endif

		if (!cmd) {
    24e0:	4fae      	ldr	r7, [pc, #696]	; (279c <uart_console_isr+0x2c4>)
{
    24e2:	b085      	sub	sp, #20
    24e4:	46c1      	mov	r9, r8
	while (uart_irq_update(uart_console_dev) &&
    24e6:	f8d8 0000 	ldr.w	r0, [r8]

static inline int _impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api = dev->driver_api;

	if (api->irq_update) {
    24ea:	6843      	ldr	r3, [r0, #4]
    24ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    24ee:	b31b      	cbz	r3, 2538 <uart_console_isr+0x60>
		return api->irq_update(dev);
    24f0:	4798      	blx	r3
    24f2:	b308      	cbz	r0, 2538 <uart_console_isr+0x60>
	       uart_irq_is_pending(uart_console_dev)) {
    24f4:	f8d8 0000 	ldr.w	r0, [r8]
	if (api->irq_is_pending)	{
    24f8:	6843      	ldr	r3, [r0, #4]
    24fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    24fc:	b1e3      	cbz	r3, 2538 <uart_console_isr+0x60>
		return api->irq_is_pending(dev);
    24fe:	4798      	blx	r3
	while (uart_irq_update(uart_console_dev) &&
    2500:	b1d0      	cbz	r0, 2538 <uart_console_isr+0x60>
		if (!uart_irq_rx_ready(uart_console_dev)) {
    2502:	f8d8 0000 	ldr.w	r0, [r8]
	if (api->irq_rx_ready) {
    2506:	6843      	ldr	r3, [r0, #4]
    2508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    250a:	2b00      	cmp	r3, #0
    250c:	d0eb      	beq.n	24e6 <uart_console_isr+0xe>
		return api->irq_rx_ready(dev);
    250e:	4798      	blx	r3
    2510:	2800      	cmp	r0, #0
    2512:	d0e8      	beq.n	24e6 <uart_console_isr+0xe>
		rx = read_uart(uart_console_dev, &byte, 1);
    2514:	f8d8 4000 	ldr.w	r4, [r8]
	if (api->fifo_read) {
    2518:	6863      	ldr	r3, [r4, #4]
    251a:	691b      	ldr	r3, [r3, #16]
    251c:	2b00      	cmp	r3, #0
    251e:	f000 816d 	beq.w	27fc <uart_console_isr+0x324>
		return api->fifo_read(dev, rx_data, size);
    2522:	2201      	movs	r2, #1
    2524:	f10d 010f 	add.w	r1, sp, #15
    2528:	4620      	mov	r0, r4
    252a:	4798      	blx	r3
	if (rx < 0) {
    252c:	2800      	cmp	r0, #0
    252e:	f280 8165 	bge.w	27fc <uart_console_isr+0x324>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_DISABLE, uart_irq_tx_disable, struct device *, dev);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_RX_ENABLE, uart_irq_rx_enable, struct device *, dev);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_RX_DISABLE, uart_irq_rx_disable, struct device *, dev);
    2532:	4620      	mov	r0, r4
    2534:	f7ff ff74 	bl	2420 <_impl_uart_irq_rx_disable>
		/* Ignore characters if there's no more buffer space */
		if (cur + end < sizeof(cmd->line) - 1) {
			insert_char(&cmd->line[cur++], byte, end);
		}
	}
}
    2538:	b005      	add	sp, #20
    253a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    253e:	2108      	movs	r1, #8
    2540:	4620      	mov	r0, r4
    2542:	9301      	str	r3, [sp, #4]
    2544:	f7ff ff86 	bl	2454 <atomic_or>
		ansi_val = byte - '0';
    2548:	9b01      	ldr	r3, [sp, #4]
    254a:	f8cb 3000 	str.w	r3, [fp]
		ansi_val_2 = 0;
    254e:	4b94      	ldr	r3, [pc, #592]	; (27a0 <uart_console_isr+0x2c8>)
    2550:	2200      	movs	r2, #0
    2552:	601a      	str	r2, [r3, #0]
    2554:	e7c7      	b.n	24e6 <uart_console_isr+0xe>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2556:	f3bf 8f5b 	dmb	ish
    255a:	6823      	ldr	r3, [r4, #0]
    255c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(&esc_state, ESC_ANSI_VAL)) {
    2560:	071a      	lsls	r2, r3, #28
    2562:	f140 817d 	bpl.w	2860 <uart_console_isr+0x388>
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
}

static inline int isdigit(int a)
{
	return (((unsigned)(a)-'0') < 10);
    2566:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
		if (isdigit(byte)) {
    256a:	2b09      	cmp	r3, #9
    256c:	d817      	bhi.n	259e <uart_console_isr+0xc6>
    256e:	f3bf 8f5b 	dmb	ish
    2572:	6823      	ldr	r3, [r4, #0]
    2574:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(&esc_state, ESC_ANSI_VAL_2)) {
    2578:	f013 0f10 	tst.w	r3, #16
    257c:	f04f 000a 	mov.w	r0, #10
    2580:	d006      	beq.n	2590 <uart_console_isr+0xb8>
				ansi_val_2 += byte - '0';
    2582:	4b87      	ldr	r3, [pc, #540]	; (27a0 <uart_console_isr+0x2c8>)
				ansi_val_2 *= 10;
    2584:	681a      	ldr	r2, [r3, #0]
				ansi_val_2 += byte - '0';
    2586:	fb00 6602 	mla	r6, r0, r2, r6
    258a:	3e30      	subs	r6, #48	; 0x30
    258c:	601e      	str	r6, [r3, #0]
    258e:	e7aa      	b.n	24e6 <uart_console_isr+0xe>
				ansi_val += byte - '0';
    2590:	4984      	ldr	r1, [pc, #528]	; (27a4 <uart_console_isr+0x2cc>)
				ansi_val *= 10;
    2592:	680b      	ldr	r3, [r1, #0]
				ansi_val += byte - '0';
    2594:	fb00 6603 	mla	r6, r0, r3, r6
    2598:	3e30      	subs	r6, #48	; 0x30
    259a:	600e      	str	r6, [r1, #0]
    259c:	e7a3      	b.n	24e6 <uart_console_isr+0xe>
		if (byte == ';' &&
    259e:	2e3b      	cmp	r6, #59	; 0x3b
    25a0:	d018      	beq.n	25d4 <uart_console_isr+0xfc>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    25a2:	f3bf 8f5b 	dmb	ish
    25a6:	e855 3f00 	ldrex	r3, [r5]
    25aa:	f023 0308 	bic.w	r3, r3, #8
    25ae:	e845 3200 	strex	r2, r3, [r5]
    25b2:	2a00      	cmp	r2, #0
    25b4:	d1f7      	bne.n	25a6 <uart_console_isr+0xce>
    25b6:	f3bf 8f5b 	dmb	ish
    25ba:	f3bf 8f5b 	dmb	ish
    25be:	e855 3f00 	ldrex	r3, [r5]
    25c2:	f023 0310 	bic.w	r3, r3, #16
    25c6:	e845 3200 	strex	r2, r3, [r5]
    25ca:	2a00      	cmp	r2, #0
    25cc:	d1f7      	bne.n	25be <uart_console_isr+0xe6>
    25ce:	f3bf 8f5b 	dmb	ish
    25d2:	e145      	b.n	2860 <uart_console_isr+0x388>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    25d4:	2110      	movs	r1, #16
    25d6:	4628      	mov	r0, r5
    25d8:	f7ff ff3c 	bl	2454 <atomic_or>
    25dc:	06c3      	lsls	r3, r0, #27
    25de:	d4e0      	bmi.n	25a2 <uart_console_isr+0xca>
    25e0:	e781      	b.n	24e6 <uart_console_isr+0xe>
	switch (byte) {
    25e2:	2e48      	cmp	r6, #72	; 0x48
    25e4:	d039      	beq.n	265a <uart_console_isr+0x182>
    25e6:	2e7e      	cmp	r6, #126	; 0x7e
    25e8:	f040 8145 	bne.w	2876 <uart_console_isr+0x39e>
		if (!end) {
    25ec:	4c6e      	ldr	r4, [pc, #440]	; (27a8 <uart_console_isr+0x2d0>)
    25ee:	7823      	ldrb	r3, [r4, #0]
    25f0:	2b00      	cmp	r3, #0
    25f2:	f000 8140 	beq.w	2876 <uart_console_isr+0x39e>
	printk("\x1b[%uC", count);
    25f6:	2101      	movs	r1, #1
    25f8:	486c      	ldr	r0, [pc, #432]	; (27ac <uart_console_isr+0x2d4>)
    25fa:	f7ff f8bb 	bl	1774 <printk>
		del_char(&line[cur], --end);
    25fe:	4b6c      	ldr	r3, [pc, #432]	; (27b0 <uart_console_isr+0x2d8>)
    2600:	7821      	ldrb	r1, [r4, #0]
    2602:	7818      	ldrb	r0, [r3, #0]
			handle_ansi(byte, cmd->line);
    2604:	f10a 0a05 	add.w	sl, sl, #5
		del_char(&line[cur], --end);
    2608:	3901      	subs	r1, #1
    260a:	b2c9      	uxtb	r1, r1
    260c:	4450      	add	r0, sl
    260e:	7021      	strb	r1, [r4, #0]
    2610:	f7ff ff32 	bl	2478 <del_char>
    2614:	e12f      	b.n	2876 <uart_console_isr+0x39e>
		if (ansi_val > cur) {
    2616:	4866      	ldr	r0, [pc, #408]	; (27b0 <uart_console_isr+0x2d8>)
    2618:	4a62      	ldr	r2, [pc, #392]	; (27a4 <uart_console_isr+0x2cc>)
    261a:	7803      	ldrb	r3, [r0, #0]
    261c:	6811      	ldr	r1, [r2, #0]
    261e:	428b      	cmp	r3, r1
    2620:	f0c0 8129 	bcc.w	2876 <uart_console_isr+0x39e>
		end += ansi_val;
    2624:	4e60      	ldr	r6, [pc, #384]	; (27a8 <uart_console_isr+0x2d0>)
    2626:	b2cc      	uxtb	r4, r1
    2628:	7832      	ldrb	r2, [r6, #0]
		cur -= ansi_val;
    262a:	1b1b      	subs	r3, r3, r4
		end += ansi_val;
    262c:	4422      	add	r2, r4
		cur -= ansi_val;
    262e:	7003      	strb	r3, [r0, #0]
	printk("\x1b[%uD", count);
    2630:	4860      	ldr	r0, [pc, #384]	; (27b4 <uart_console_isr+0x2dc>)
		end += ansi_val;
    2632:	7032      	strb	r2, [r6, #0]
	printk("\x1b[%uC", count);
    2634:	f7ff f89e 	bl	1774 <printk>
    2638:	e11d      	b.n	2876 <uart_console_isr+0x39e>
		if (ansi_val > end) {
    263a:	485b      	ldr	r0, [pc, #364]	; (27a8 <uart_console_isr+0x2d0>)
    263c:	4b59      	ldr	r3, [pc, #356]	; (27a4 <uart_console_isr+0x2cc>)
    263e:	7802      	ldrb	r2, [r0, #0]
    2640:	6819      	ldr	r1, [r3, #0]
    2642:	428a      	cmp	r2, r1
    2644:	f0c0 8117 	bcc.w	2876 <uart_console_isr+0x39e>
		end -= ansi_val;
    2648:	b2cb      	uxtb	r3, r1
    264a:	1ad2      	subs	r2, r2, r3
    264c:	7002      	strb	r2, [r0, #0]
		cur += ansi_val;
    264e:	4a58      	ldr	r2, [pc, #352]	; (27b0 <uart_console_isr+0x2d8>)
    2650:	7810      	ldrb	r0, [r2, #0]
    2652:	4403      	add	r3, r0
    2654:	7013      	strb	r3, [r2, #0]
	printk("\x1b[%uC", count);
    2656:	4855      	ldr	r0, [pc, #340]	; (27ac <uart_console_isr+0x2d4>)
    2658:	e7ec      	b.n	2634 <uart_console_isr+0x15c>
		if (!cur) {
    265a:	4c55      	ldr	r4, [pc, #340]	; (27b0 <uart_console_isr+0x2d8>)
    265c:	7821      	ldrb	r1, [r4, #0]
    265e:	2900      	cmp	r1, #0
    2660:	f000 8109 	beq.w	2876 <uart_console_isr+0x39e>
	printk("\x1b[%uD", count);
    2664:	4853      	ldr	r0, [pc, #332]	; (27b4 <uart_console_isr+0x2dc>)
    2666:	f7ff f885 	bl	1774 <printk>
		end += cur;
    266a:	4a4f      	ldr	r2, [pc, #316]	; (27a8 <uart_console_isr+0x2d0>)
		cur += end;
    266c:	7813      	ldrb	r3, [r2, #0]
    266e:	7821      	ldrb	r1, [r4, #0]
    2670:	440b      	add	r3, r1
    2672:	7013      	strb	r3, [r2, #0]
		end = 0;
    2674:	2300      	movs	r3, #0
    2676:	7023      	strb	r3, [r4, #0]
    2678:	e0fd      	b.n	2876 <uart_console_isr+0x39e>
		if (!end) {
    267a:	4c4b      	ldr	r4, [pc, #300]	; (27a8 <uart_console_isr+0x2d0>)
    267c:	7821      	ldrb	r1, [r4, #0]
    267e:	2900      	cmp	r1, #0
    2680:	f000 80f9 	beq.w	2876 <uart_console_isr+0x39e>
	printk("\x1b[%uC", count);
    2684:	4849      	ldr	r0, [pc, #292]	; (27ac <uart_console_isr+0x2d4>)
    2686:	f7ff f875 	bl	1774 <printk>
		cur += end;
    268a:	4a49      	ldr	r2, [pc, #292]	; (27b0 <uart_console_isr+0x2d8>)
    268c:	e7ee      	b.n	266c <uart_console_isr+0x194>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    268e:	f3bf 8f5b 	dmb	ish
    2692:	e854 6f00 	ldrex	r6, [r4]
    2696:	f026 0301 	bic.w	r3, r6, #1
    269a:	e844 3200 	strex	r2, r3, [r4]
    269e:	2a00      	cmp	r2, #0
    26a0:	d1f7      	bne.n	2692 <uart_console_isr+0x1ba>
    26a2:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(&esc_state, ESC_ESC)) {
    26a6:	f016 0601 	ands.w	r6, r6, #1
    26aa:	f89d 500f 	ldrb.w	r5, [sp, #15]
    26ae:	d00b      	beq.n	26c8 <uart_console_isr+0x1f0>
			if (byte == ANSI_ESC) {
    26b0:	2d5b      	cmp	r5, #91	; 0x5b
    26b2:	f47f af18 	bne.w	24e6 <uart_console_isr+0xe>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    26b6:	2102      	movs	r1, #2
    26b8:	4620      	mov	r0, r4
    26ba:	f7ff fecb 	bl	2454 <atomic_or>
    26be:	2104      	movs	r1, #4
    26c0:	4620      	mov	r0, r4
    26c2:	f7ff fec7 	bl	2454 <atomic_or>
    26c6:	e70e      	b.n	24e6 <uart_console_isr+0xe>
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
    26c8:	f1a5 0320 	sub.w	r3, r5, #32
		if (!isprint(byte)) {
    26cc:	2b5e      	cmp	r3, #94	; 0x5e
    26ce:	d94d      	bls.n	276c <uart_console_isr+0x294>
			switch (byte) {
    26d0:	2d0d      	cmp	r5, #13
    26d2:	d02d      	beq.n	2730 <uart_console_isr+0x258>
    26d4:	d815      	bhi.n	2702 <uart_console_isr+0x22a>
    26d6:	2d09      	cmp	r5, #9
    26d8:	f47f af05 	bne.w	24e6 <uart_console_isr+0xe>
				if (completion_cb && !end) {
    26dc:	4b36      	ldr	r3, [pc, #216]	; (27b8 <uart_console_isr+0x2e0>)
    26de:	681b      	ldr	r3, [r3, #0]
    26e0:	2b00      	cmp	r3, #0
    26e2:	f43f af00 	beq.w	24e6 <uart_console_isr+0xe>
    26e6:	4a30      	ldr	r2, [pc, #192]	; (27a8 <uart_console_isr+0x2d0>)
    26e8:	7812      	ldrb	r2, [r2, #0]
    26ea:	2a00      	cmp	r2, #0
    26ec:	f47f aefb 	bne.w	24e6 <uart_console_isr+0xe>
					cur += completion_cb(cmd->line, cur);
    26f0:	4c2f      	ldr	r4, [pc, #188]	; (27b0 <uart_console_isr+0x2d8>)
    26f2:	6838      	ldr	r0, [r7, #0]
    26f4:	7821      	ldrb	r1, [r4, #0]
    26f6:	3005      	adds	r0, #5
    26f8:	4798      	blx	r3
    26fa:	7823      	ldrb	r3, [r4, #0]
    26fc:	4418      	add	r0, r3
    26fe:	7020      	strb	r0, [r4, #0]
    2700:	e6f1      	b.n	24e6 <uart_console_isr+0xe>
			switch (byte) {
    2702:	2d1b      	cmp	r5, #27
    2704:	d012      	beq.n	272c <uart_console_isr+0x254>
    2706:	2d7f      	cmp	r5, #127	; 0x7f
    2708:	f47f aeed 	bne.w	24e6 <uart_console_isr+0xe>
				if (cur > 0) {
    270c:	4a28      	ldr	r2, [pc, #160]	; (27b0 <uart_console_isr+0x2d8>)
    270e:	7813      	ldrb	r3, [r2, #0]
    2710:	2b00      	cmp	r3, #0
    2712:	f43f aee8 	beq.w	24e6 <uart_console_isr+0xe>
					del_char(&cmd->line[--cur], end);
    2716:	3b01      	subs	r3, #1
    2718:	b2db      	uxtb	r3, r3
    271a:	7013      	strb	r3, [r2, #0]
    271c:	6838      	ldr	r0, [r7, #0]
    271e:	4a22      	ldr	r2, [pc, #136]	; (27a8 <uart_console_isr+0x2d0>)
    2720:	3305      	adds	r3, #5
    2722:	7811      	ldrb	r1, [r2, #0]
    2724:	4418      	add	r0, r3
    2726:	f7ff fea7 	bl	2478 <del_char>
    272a:	e6dc      	b.n	24e6 <uart_console_isr+0xe>
    272c:	2101      	movs	r1, #1
    272e:	e7c7      	b.n	26c0 <uart_console_isr+0x1e8>
				cmd->line[cur + end] = '\0';
    2730:	f8df a07c 	ldr.w	sl, [pc, #124]	; 27b0 <uart_console_isr+0x2d8>
    2734:	4c1c      	ldr	r4, [pc, #112]	; (27a8 <uart_console_isr+0x2d0>)
    2736:	f89a 1000 	ldrb.w	r1, [sl]
    273a:	683b      	ldr	r3, [r7, #0]
    273c:	7822      	ldrb	r2, [r4, #0]
				uart_poll_out(uart_console_dev, '\r');
    273e:	f8d9 0000 	ldr.w	r0, [r9]
				cmd->line[cur + end] = '\0';
    2742:	440b      	add	r3, r1
    2744:	4413      	add	r3, r2
				uart_poll_out(uart_console_dev, '\r');
    2746:	4629      	mov	r1, r5
				cmd->line[cur + end] = '\0';
    2748:	715e      	strb	r6, [r3, #5]
				uart_poll_out(uart_console_dev, '\r');
    274a:	f7ff fe6e 	bl	242a <uart_poll_out>
				uart_poll_out(uart_console_dev, '\n');
    274e:	210a      	movs	r1, #10
    2750:	f8d9 0000 	ldr.w	r0, [r9]
    2754:	f7ff fe69 	bl	242a <uart_poll_out>
				k_fifo_put(lines_queue, cmd);
    2758:	4b18      	ldr	r3, [pc, #96]	; (27bc <uart_console_isr+0x2e4>)
    275a:	6839      	ldr	r1, [r7, #0]
    275c:	6818      	ldr	r0, [r3, #0]
				cur = 0;
    275e:	f88a 6000 	strb.w	r6, [sl]
				end = 0;
    2762:	7026      	strb	r6, [r4, #0]
				k_fifo_put(lines_queue, cmd);
    2764:	f01c fe27 	bl	1f3b6 <k_queue_append>
				cmd = NULL;
    2768:	603e      	str	r6, [r7, #0]
				break;
    276a:	e6bc      	b.n	24e6 <uart_console_isr+0xe>
		if (cur + end < sizeof(cmd->line) - 1) {
    276c:	4a0e      	ldr	r2, [pc, #56]	; (27a8 <uart_console_isr+0x2d0>)
    276e:	4b10      	ldr	r3, [pc, #64]	; (27b0 <uart_console_isr+0x2d8>)
    2770:	f892 b000 	ldrb.w	fp, [r2]
    2774:	781e      	ldrb	r6, [r3, #0]
    2776:	eb0b 0206 	add.w	r2, fp, r6
    277a:	2a7e      	cmp	r2, #126	; 0x7e
    277c:	f73f aeb3 	bgt.w	24e6 <uart_console_isr+0xe>
			insert_char(&cmd->line[cur++], byte, end);
    2780:	683c      	ldr	r4, [r7, #0]
	uart_poll_out(uart_console_dev, c);
    2782:	f8d9 0000 	ldr.w	r0, [r9]
			insert_char(&cmd->line[cur++], byte, end);
    2786:	1c72      	adds	r2, r6, #1
	uart_poll_out(uart_console_dev, c);
    2788:	4629      	mov	r1, r5
			insert_char(&cmd->line[cur++], byte, end);
    278a:	701a      	strb	r2, [r3, #0]
	uart_poll_out(uart_console_dev, c);
    278c:	f7ff fe4d 	bl	242a <uart_poll_out>
    2790:	19a3      	adds	r3, r4, r6
	if (end == 0) {
    2792:	f1bb 0f00 	cmp.w	fp, #0
    2796:	d115      	bne.n	27c4 <uart_console_isr+0x2ec>
		*pos = c;
    2798:	715d      	strb	r5, [r3, #5]
    279a:	e6a4      	b.n	24e6 <uart_console_isr+0xe>
    279c:	200002f4 	.word	0x200002f4
    27a0:	200002ec 	.word	0x200002ec
    27a4:	200002e8 	.word	0x200002e8
    27a8:	200002fd 	.word	0x200002fd
    27ac:	00020f18 	.word	0x00020f18
    27b0:	200002fc 	.word	0x200002fc
    27b4:	00020f12 	.word	0x00020f12
    27b8:	200002f8 	.word	0x200002f8
    27bc:	20000304 	.word	0x20000304
    27c0:	20000308 	.word	0x20000308
	tmp = *pos;
    27c4:	f893 a005 	ldrb.w	sl, [r3, #5]
	printk("\x1b[s");
    27c8:	4831      	ldr	r0, [pc, #196]	; (2890 <uart_console_isr+0x3b8>)
	*(pos++) = c;
    27ca:	715d      	strb	r5, [r3, #5]
			insert_char(&cmd->line[cur++], byte, end);
    27cc:	3605      	adds	r6, #5
	printk("\x1b[s");
    27ce:	f7fe ffd1 	bl	1774 <printk>
			insert_char(&cmd->line[cur++], byte, end);
    27d2:	4434      	add	r4, r6
    27d4:	f10b 0b01 	add.w	fp, fp, #1
	*(pos++) = c;
    27d8:	1c66      	adds	r6, r4, #1
    27da:	445c      	add	r4, fp
	while (end-- > 0) {
    27dc:	42b4      	cmp	r4, r6
    27de:	d103      	bne.n	27e8 <uart_console_isr+0x310>
	printk("\x1b[u");
    27e0:	482c      	ldr	r0, [pc, #176]	; (2894 <uart_console_isr+0x3bc>)
    27e2:	f7fe ffc7 	bl	1774 <printk>
    27e6:	e67e      	b.n	24e6 <uart_console_isr+0xe>
		uart_poll_out(uart_console_dev, tmp);
    27e8:	4651      	mov	r1, sl
    27ea:	f8d9 0000 	ldr.w	r0, [r9]
    27ee:	f7ff fe1c 	bl	242a <uart_poll_out>
		c = *pos;
    27f2:	7833      	ldrb	r3, [r6, #0]
		*(pos++) = tmp;
    27f4:	f806 ab01 	strb.w	sl, [r6], #1
		tmp = c;
    27f8:	469a      	mov	sl, r3
    27fa:	e7ef      	b.n	27dc <uart_console_isr+0x304>
		if (!cmd) {
    27fc:	6839      	ldr	r1, [r7, #0]
    27fe:	b939      	cbnz	r1, 2810 <uart_console_isr+0x338>
			cmd = k_fifo_get(avail_queue, K_NO_WAIT);
    2800:	4b25      	ldr	r3, [pc, #148]	; (2898 <uart_console_isr+0x3c0>)
    2802:	6818      	ldr	r0, [r3, #0]
    2804:	f01c fdfb 	bl	1f3fe <k_queue_get>
    2808:	6038      	str	r0, [r7, #0]
			if (!cmd) {
    280a:	2800      	cmp	r0, #0
    280c:	f43f ae94 	beq.w	2538 <uart_console_isr+0x60>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2810:	f3bf 8f5b 	dmb	ish
    2814:	4c21      	ldr	r4, [pc, #132]	; (289c <uart_console_isr+0x3c4>)
    2816:	6823      	ldr	r3, [r4, #0]
    2818:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(&esc_state, ESC_ANSI)) {
    281c:	f013 0f02 	tst.w	r3, #2
    2820:	4625      	mov	r5, r4
    2822:	f43f af34 	beq.w	268e <uart_console_isr+0x1b6>
			handle_ansi(byte, cmd->line);
    2826:	f89d 600f 	ldrb.w	r6, [sp, #15]
    282a:	f8d7 a000 	ldr.w	sl, [r7]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    282e:	f3bf 8f5b 	dmb	ish
    2832:	e855 3f00 	ldrex	r3, [r5]
    2836:	f023 0204 	bic.w	r2, r3, #4
    283a:	e845 2100 	strex	r1, r2, [r5]
    283e:	2900      	cmp	r1, #0
    2840:	d1f7      	bne.n	2832 <uart_console_isr+0x35a>
    2842:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(&esc_state, ESC_ANSI_FIRST)) {
    2846:	0759      	lsls	r1, r3, #29
    2848:	f57f ae85 	bpl.w	2556 <uart_console_isr+0x7e>
	return (((unsigned)(a)-'0') < 10);
    284c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
		if (!isdigit(byte)) {
    2850:	2b09      	cmp	r3, #9
    2852:	f8df b04c 	ldr.w	fp, [pc, #76]	; 28a0 <uart_console_isr+0x3c8>
    2856:	f67f ae72 	bls.w	253e <uart_console_isr+0x66>
			ansi_val = 1;
    285a:	2301      	movs	r3, #1
    285c:	f8cb 3000 	str.w	r3, [fp]
	switch (byte) {
    2860:	2e46      	cmp	r6, #70	; 0x46
    2862:	f43f af0a 	beq.w	267a <uart_console_isr+0x1a2>
    2866:	f63f aebc 	bhi.w	25e2 <uart_console_isr+0x10a>
    286a:	2e43      	cmp	r6, #67	; 0x43
    286c:	f43f aee5 	beq.w	263a <uart_console_isr+0x162>
    2870:	2e44      	cmp	r6, #68	; 0x44
    2872:	f43f aed0 	beq.w	2616 <uart_console_isr+0x13e>
    2876:	f3bf 8f5b 	dmb	ish
    287a:	e855 3f00 	ldrex	r3, [r5]
    287e:	f023 0302 	bic.w	r3, r3, #2
    2882:	e845 3200 	strex	r2, r3, [r5]
    2886:	2a00      	cmp	r2, #0
    2888:	d1f7      	bne.n	287a <uart_console_isr+0x3a2>
    288a:	f3bf 8f5b 	dmb	ish
    288e:	e62a      	b.n	24e6 <uart_console_isr+0xe>
    2890:	00020f03 	.word	0x00020f03
    2894:	00020f07 	.word	0x00020f07
    2898:	200002f0 	.word	0x200002f0
    289c:	20000300 	.word	0x20000300
    28a0:	200002e8 	.word	0x200002e8

000028a4 <uart_register_input>:
}

void uart_register_input(struct k_fifo *avail, struct k_fifo *lines,
			 u8_t (*completion)(char *str, u8_t len))
{
	avail_queue = avail;
    28a4:	4b17      	ldr	r3, [pc, #92]	; (2904 <uart_register_input+0x60>)
{
    28a6:	b513      	push	{r0, r1, r4, lr}
	avail_queue = avail;
    28a8:	6018      	str	r0, [r3, #0]
	lines_queue = lines;
    28aa:	4b17      	ldr	r3, [pc, #92]	; (2908 <uart_register_input+0x64>)
	uart_irq_rx_disable(uart_console_dev);
    28ac:	4c17      	ldr	r4, [pc, #92]	; (290c <uart_register_input+0x68>)
	lines_queue = lines;
    28ae:	6019      	str	r1, [r3, #0]
	completion_cb = completion;
    28b0:	4b17      	ldr	r3, [pc, #92]	; (2910 <uart_register_input+0x6c>)
    28b2:	6820      	ldr	r0, [r4, #0]
    28b4:	601a      	str	r2, [r3, #0]
    28b6:	f7ff fdb3 	bl	2420 <_impl_uart_irq_rx_disable>
	uart_irq_tx_disable(uart_console_dev);
    28ba:	6820      	ldr	r0, [r4, #0]
	if (api->irq_tx_disable) {
    28bc:	6843      	ldr	r3, [r0, #4]
    28be:	699b      	ldr	r3, [r3, #24]
    28c0:	b103      	cbz	r3, 28c4 <uart_register_input+0x20>
		api->irq_tx_disable(dev);
    28c2:	4798      	blx	r3
	uart_irq_callback_set(uart_console_dev, uart_console_isr);
    28c4:	6820      	ldr	r0, [r4, #0]
 * @return N/A
 */
static inline void uart_irq_callback_set(struct device *dev,
					 uart_irq_callback_t cb)
{
	const struct uart_driver_api *api = dev->driver_api;
    28c6:	6843      	ldr	r3, [r0, #4]

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    28c8:	b11b      	cbz	r3, 28d2 <uart_register_input+0x2e>
    28ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    28cc:	b10b      	cbz	r3, 28d2 <uart_register_input+0x2e>
		api->irq_callback_set(dev, cb);
    28ce:	4911      	ldr	r1, [pc, #68]	; (2914 <uart_register_input+0x70>)
    28d0:	4798      	blx	r3
	while (uart_irq_rx_ready(uart_console_dev)) {
    28d2:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_ready) {
    28d4:	6843      	ldr	r3, [r0, #4]
    28d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28d8:	b92b      	cbnz	r3, 28e6 <uart_register_input+0x42>
	uart_irq_rx_enable(uart_console_dev);
    28da:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_enable) {
    28dc:	6843      	ldr	r3, [r0, #4]
    28de:	6a1b      	ldr	r3, [r3, #32]
    28e0:	b973      	cbnz	r3, 2900 <uart_register_input+0x5c>

	console_input_init();
}
    28e2:	b002      	add	sp, #8
    28e4:	bd10      	pop	{r4, pc}
		return api->irq_rx_ready(dev);
    28e6:	4798      	blx	r3
	while (uart_irq_rx_ready(uart_console_dev)) {
    28e8:	2800      	cmp	r0, #0
    28ea:	d0f6      	beq.n	28da <uart_register_input+0x36>
		uart_fifo_read(uart_console_dev, &c, 1);
    28ec:	6820      	ldr	r0, [r4, #0]
	if (api->fifo_read) {
    28ee:	6843      	ldr	r3, [r0, #4]
    28f0:	691b      	ldr	r3, [r3, #16]
    28f2:	2b00      	cmp	r3, #0
    28f4:	d0ed      	beq.n	28d2 <uart_register_input+0x2e>
		return api->fifo_read(dev, rx_data, size);
    28f6:	2201      	movs	r2, #1
    28f8:	f10d 0107 	add.w	r1, sp, #7
    28fc:	4798      	blx	r3
    28fe:	e7e8      	b.n	28d2 <uart_register_input+0x2e>
		api->irq_rx_enable(dev);
    2900:	4798      	blx	r3
}
    2902:	e7ee      	b.n	28e2 <uart_register_input+0x3e>
    2904:	200002f0 	.word	0x200002f0
    2908:	20000304 	.word	0x20000304
    290c:	20000308 	.word	0x20000308
    2910:	200002f8 	.word	0x200002f8
    2914:	000024d9 	.word	0x000024d9

00002918 <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    2918:	4801      	ldr	r0, [pc, #4]	; (2920 <uart_console_hook_install+0x8>)
    291a:	f7fe bde5 	b.w	14e8 <__printk_hook_install>
    291e:	bf00      	nop
    2920:	00002431 	.word	0x00002431

00002924 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    2924:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    2926:	4804      	ldr	r0, [pc, #16]	; (2938 <uart_console_init+0x14>)
    2928:	f01c faca 	bl	1eec0 <device_get_binding>
    292c:	4b03      	ldr	r3, [pc, #12]	; (293c <uart_console_init+0x18>)
    292e:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    2930:	f7ff fff2 	bl	2918 <uart_console_hook_install>

	return 0;
}
    2934:	2000      	movs	r0, #0
    2936:	bd08      	pop	{r3, pc}
    2938:	00020f0b 	.word	0x00020f0b
    293c:	20000308 	.word	0x20000308

00002940 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    2940:	b510      	push	{r4, lr}
    2942:	f04f 0320 	mov.w	r3, #32
    2946:	f3ef 8211 	mrs	r2, BASEPRI
    294a:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    294e:	4c11      	ldr	r4, [pc, #68]	; (2994 <_m16src_stop+0x54>)
    2950:	7823      	ldrb	r3, [r4, #0]
    2952:	b923      	cbnz	r3, 295e <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2954:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    2958:	f06f 0044 	mvn.w	r0, #68	; 0x44
    295c:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    295e:	3b01      	subs	r3, #1
    2960:	b2db      	uxtb	r3, r3
    2962:	7023      	strb	r3, [r4, #0]
    2964:	b123      	cbz	r3, 2970 <_m16src_stop+0x30>
    2966:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    296a:	f06f 000f 	mvn.w	r0, #15
    296e:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    2970:	4b09      	ldr	r3, [pc, #36]	; (2998 <_m16src_stop+0x58>)
    2972:	7818      	ldrb	r0, [r3, #0]
    2974:	2101      	movs	r1, #1
    2976:	b128      	cbz	r0, 2984 <_m16src_stop+0x44>
		m16src_ref++;
    2978:	7021      	strb	r1, [r4, #0]
    297a:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    297e:	f06f 000a 	mvn.w	r0, #10
    2982:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    2984:	7019      	strb	r1, [r3, #0]
    2986:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    298a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    298e:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    2990:	7018      	strb	r0, [r3, #0]

	return 0;
}
    2992:	bd10      	pop	{r4, pc}
    2994:	2000030e 	.word	0x2000030e
    2998:	2000030d 	.word	0x2000030d

0000299c <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    299c:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    299e:	2200      	movs	r2, #0
    29a0:	4610      	mov	r0, r2
    29a2:	2101      	movs	r1, #1
    29a4:	f7fe fbbe 	bl	1124 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    29a8:	2000      	movs	r0, #0
    29aa:	f7fe fb89 	bl	10c0 <_arch_irq_enable>

	return 0;
}
    29ae:	2000      	movs	r0, #0
    29b0:	bd08      	pop	{r3, pc}
	...

000029b4 <_m16src_start>:
{
    29b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    29b6:	f04f 0220 	mov.w	r2, #32
    29ba:	f3ef 8311 	mrs	r3, BASEPRI
    29be:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    29c2:	4a25      	ldr	r2, [pc, #148]	; (2a58 <_m16src_start+0xa4>)
    29c4:	7810      	ldrb	r0, [r2, #0]
    29c6:	1c44      	adds	r4, r0, #1
    29c8:	7014      	strb	r4, [r2, #0]
    29ca:	b160      	cbz	r0, 29e6 <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    29cc:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    29d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29d4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    29d8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    29dc:	bf14      	ite	ne
    29de:	2000      	movne	r0, #0
    29e0:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    29e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    29e6:	4d1d      	ldr	r5, [pc, #116]	; (2a5c <_m16src_start+0xa8>)
    29e8:	782f      	ldrb	r7, [r5, #0]
    29ea:	b12f      	cbz	r7, 29f8 <_m16src_start+0x44>
		m16src_ref--;
    29ec:	7010      	strb	r0, [r2, #0]
    29ee:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    29f2:	f06f 000a 	mvn.w	r0, #10
    29f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    29f8:	2601      	movs	r6, #1
    29fa:	702e      	strb	r6, [r5, #0]
    29fc:	f383 8811 	msr	BASEPRI, r3
    2a00:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    2a04:	b319      	cbz	r1, 2a4e <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    2a06:	4638      	mov	r0, r7
    2a08:	f7fe fb6a 	bl	10e0 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2a0c:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    2a10:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2a14:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    2a18:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    2a1a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    2a1e:	b192      	cbz	r2, 2a46 <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2a20:	2200      	movs	r2, #0
    2a22:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a26:	4a0e      	ldr	r2, [pc, #56]	; (2a60 <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    2a28:	f013 0f01 	tst.w	r3, #1
    2a2c:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    2a30:	bf08      	it	eq
    2a32:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    2a36:	2000      	movs	r0, #0
    2a38:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    2a3c:	f7fe fb40 	bl	10c0 <_arch_irq_enable>
	m16src_grd = 0;
    2a40:	2300      	movs	r3, #0
    2a42:	702b      	strb	r3, [r5, #0]
    2a44:	e7c4      	b.n	29d0 <_m16src_start+0x1c>
			__WFE();
    2a46:	bf20      	wfe
			__SEV();
    2a48:	bf40      	sev
			__WFE();
    2a4a:	bf20      	wfe
    2a4c:	e7e5      	b.n	2a1a <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2a4e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    2a52:	6026      	str	r6, [r4, #0]
    2a54:	e7f4      	b.n	2a40 <_m16src_start+0x8c>
    2a56:	bf00      	nop
    2a58:	2000030e 	.word	0x2000030e
    2a5c:	2000030d 	.word	0x2000030d
    2a60:	e000e100 	.word	0xe000e100

00002a64 <_k32src_start>:
{
    2a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a66:	4606      	mov	r6, r0
    2a68:	460c      	mov	r4, r1
	__asm__ volatile(
    2a6a:	f04f 0220 	mov.w	r2, #32
    2a6e:	f3ef 8311 	mrs	r3, BASEPRI
    2a72:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    2a76:	4a2c      	ldr	r2, [pc, #176]	; (2b28 <_k32src_start+0xc4>)
    2a78:	7815      	ldrb	r5, [r2, #0]
    2a7a:	b165      	cbz	r5, 2a96 <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2a7c:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    2a80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a84:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    2a88:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    2a8c:	bf0c      	ite	eq
    2a8e:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    2a92:	2000      	movne	r0, #0
    2a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    2a96:	2701      	movs	r7, #1
    2a98:	7017      	strb	r7, [r2, #0]
    2a9a:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    2a9e:	4628      	mov	r0, r5
    2aa0:	f7fe fb1e 	bl	10e0 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2aa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    2aa8:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2aaa:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    2aae:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    2ab2:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    2ab6:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    2aba:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    2abc:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    2ac0:	b371      	cbz	r1, 2b20 <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    2ac2:	0792      	lsls	r2, r2, #30
    2ac4:	4f19      	ldr	r7, [pc, #100]	; (2b2c <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    2ac6:	bf58      	it	pl
    2ac8:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2aca:	f04f 0100 	mov.w	r1, #0
    2ace:	f04f 0501 	mov.w	r5, #1
    2ad2:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    2ad6:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    2ada:	bf58      	it	pl
    2adc:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    2ae0:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    2ae4:	f7fe faec 	bl	10c0 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    2ae8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    2aec:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    2aee:	2218      	movs	r2, #24
    2af0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    2af4:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    2af8:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    2afc:	f014 0103 	ands.w	r1, r4, #3
    2b00:	d1be      	bne.n	2a80 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    2b02:	2010      	movs	r0, #16
    2b04:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    2b08:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2b0c:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2b0e:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2b12:	f7ff ff4f 	bl	29b4 <_m16src_start>
		if (!err) {
    2b16:	2800      	cmp	r0, #0
    2b18:	d1b2      	bne.n	2a80 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b1a:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    2b1e:	e7af      	b.n	2a80 <_k32src_start+0x1c>
		__WFE();
    2b20:	bf20      	wfe
		__SEV();
    2b22:	bf40      	sev
		__WFE();
    2b24:	bf20      	wfe
    2b26:	e7c9      	b.n	2abc <_k32src_start+0x58>
    2b28:	2000030c 	.word	0x2000030c
    2b2c:	e000e100 	.word	0xe000e100

00002b30 <_power_clock_isr>:
{
    2b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    2b32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    2b36:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    2b38:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    2b3c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    2b40:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    2b44:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    2b48:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    2b4c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    2b50:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    2b54:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    2b58:	f1be 0f00 	cmp.w	lr, #0
    2b5c:	d003      	beq.n	2b66 <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    2b5e:	f04f 0e00 	mov.w	lr, #0
    2b62:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    2b66:	b127      	cbz	r7, 2b72 <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2b68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b6c:	2700      	movs	r7, #0
    2b6e:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    2b72:	b13a      	cbz	r2, 2b84 <_power_clock_isr+0x54>
    2b74:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    2b76:	bf41      	itttt	mi
    2b78:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    2b7c:	2201      	movmi	r2, #1
    2b7e:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    2b82:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    2b84:	b120      	cbz	r0, 2b90 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2b86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b8a:	2200      	movs	r2, #0
    2b8c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    2b90:	b149      	cbz	r1, 2ba6 <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    2b92:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    2b96:	2100      	movs	r1, #0
    2b98:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    2b9c:	4628      	mov	r0, r5
    2b9e:	f7ff fecf 	bl	2940 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    2ba2:	2301      	movs	r3, #1
    2ba4:	6163      	str	r3, [r4, #20]
	if (ctto) {
    2ba6:	b176      	cbz	r6, 2bc6 <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    2ba8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2bac:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2bae:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    2bb0:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    2bb4:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2bb6:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2bba:	f7ff fefb 	bl	29b4 <_m16src_start>
		if (!err) {
    2bbe:	b910      	cbnz	r0, 2bc6 <_power_clock_isr+0x96>
    2bc0:	4b01      	ldr	r3, [pc, #4]	; (2bc8 <_power_clock_isr+0x98>)
    2bc2:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    2bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2bc8:	e000e100 	.word	0xe000e100

00002bcc <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2bcc:	6803      	ldr	r3, [r0, #0]
    2bce:	689b      	ldr	r3, [r3, #8]
    2bd0:	689a      	ldr	r2, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2bd2:	6883      	ldr	r3, [r0, #8]
{
    2bd4:	b510      	push	{r4, lr}
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2bd6:	68dc      	ldr	r4, [r3, #12]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2bd8:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2bda:	fa24 f300 	lsr.w	r3, r4, r0
    2bde:	07db      	lsls	r3, r3, #31
    2be0:	d507      	bpl.n	2bf2 <gpiote_find_channel+0x26>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    2be2:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    2be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2bea:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2bee:	428b      	cmp	r3, r1
    2bf0:	d004      	beq.n	2bfc <gpiote_find_channel+0x30>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2bf2:	3001      	adds	r0, #1
    2bf4:	2808      	cmp	r0, #8
    2bf6:	d1f0      	bne.n	2bda <gpiote_find_channel+0xe>
			return i;
		}
	}

	return -ENODEV;
    2bf8:	f06f 0012 	mvn.w	r0, #18
}
    2bfc:	bd10      	pop	{r4, pc}

00002bfe <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2bfe:	6800      	ldr	r0, [r0, #0]
    2c00:	6880      	ldr	r0, [r0, #8]
    2c02:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2c04:	b941      	cbnz	r1, 2c18 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
    2c06:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    2c0a:	fa21 f202 	lsr.w	r2, r1, r2
    2c0e:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
    2c12:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    2c14:	2000      	movs	r0, #0
    2c16:	4770      	bx	lr
		*value = gpio->IN;
    2c18:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    2c1c:	e7f9      	b.n	2c12 <gpio_nrf5_read+0x14>

00002c1e <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2c1e:	6800      	ldr	r0, [r0, #0]
    2c20:	6880      	ldr	r0, [r0, #8]
    2c22:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2c24:	b949      	cbnz	r1, 2c3a <gpio_nrf5_write+0x1c>
    2c26:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
    2c28:	4091      	lsls	r1, r2
		if (value) { /* 1 */
    2c2a:	b11b      	cbz	r3, 2c34 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
    2c2c:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
    2c30:	2000      	movs	r0, #0
    2c32:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
    2c34:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
    2c38:	e7fa      	b.n	2c30 <gpio_nrf5_write+0x12>
		gpio->OUT = value;
    2c3a:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    2c3e:	e7f7      	b.n	2c30 <gpio_nrf5_write+0x12>

00002c40 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    2c40:	b510      	push	{r4, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2c42:	6883      	ldr	r3, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    2c44:	b13a      	cbz	r2, 2c56 <gpio_nrf5_manage_callback+0x16>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    2c46:	681a      	ldr	r2, [r3, #0]
    2c48:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
    2c4a:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    2c4c:	6019      	str	r1, [r3, #0]
	if (!list->tail) {
    2c4e:	b902      	cbnz	r2, 2c52 <gpio_nrf5_manage_callback+0x12>
		list->tail = list->head;
    2c50:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    2c52:	2000      	movs	r0, #0
    2c54:	bd10      	pop	{r4, pc}
    2c56:	6818      	ldr	r0, [r3, #0]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    2c58:	2800      	cmp	r0, #0
    2c5a:	d0fa      	beq.n	2c52 <gpio_nrf5_manage_callback+0x12>
		if (test == node) {
    2c5c:	4281      	cmp	r1, r0
    2c5e:	d10e      	bne.n	2c7e <gpio_nrf5_manage_callback+0x3e>
    2c60:	685c      	ldr	r4, [r3, #4]
    2c62:	6808      	ldr	r0, [r1, #0]
	if (!prev_node) {
    2c64:	b932      	cbnz	r2, 2c74 <gpio_nrf5_manage_callback+0x34>
		if (list->tail == node) {
    2c66:	42a1      	cmp	r1, r4
		list->head = node->next;
    2c68:	6018      	str	r0, [r3, #0]
		if (list->tail == node) {
    2c6a:	d100      	bne.n	2c6e <gpio_nrf5_manage_callback+0x2e>
			list->tail = list->head;
    2c6c:	6058      	str	r0, [r3, #4]
	node->next = NULL;
    2c6e:	2300      	movs	r3, #0
    2c70:	600b      	str	r3, [r1, #0]
    2c72:	e7ee      	b.n	2c52 <gpio_nrf5_manage_callback+0x12>
		if (list->tail == node) {
    2c74:	42a1      	cmp	r1, r4
		prev_node->next = node->next;
    2c76:	6010      	str	r0, [r2, #0]
			list->tail = prev_node;
    2c78:	bf08      	it	eq
    2c7a:	605a      	streq	r2, [r3, #4]
    2c7c:	e7f7      	b.n	2c6e <gpio_nrf5_manage_callback+0x2e>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    2c7e:	4602      	mov	r2, r0
    2c80:	6800      	ldr	r0, [r0, #0]
    2c82:	e7e9      	b.n	2c58 <gpio_nrf5_manage_callback+0x18>

00002c84 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    2c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c86:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2c88:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2c8a:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2c8c:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2c8e:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2c90:	6896      	ldr	r6, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    2c92:	b9a1      	cbnz	r1, 2cbe <gpio_nrf5_enable_callback+0x3a>

		i = gpiote_find_channel(dev, pin);
    2c94:	4621      	mov	r1, r4
    2c96:	f7ff ff99 	bl	2bcc <gpiote_find_channel>
		if (i < 0) {
    2c9a:	2800      	cmp	r0, #0
    2c9c:	db11      	blt.n	2cc2 <gpio_nrf5_enable_callback+0x3e>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    2c9e:	68ba      	ldr	r2, [r7, #8]
    2ca0:	2301      	movs	r3, #1
    2ca2:	fa03 f404 	lsl.w	r4, r3, r4
    2ca6:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    2ca8:	f100 0240 	add.w	r2, r0, #64	; 0x40
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    2cac:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables |= BIT(pin);
    2cb0:	60bc      	str	r4, [r7, #8]
		gpiote->EVENTS_IN[i] = 0;
    2cb2:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
		gpiote->INTENSET = BIT(i);
    2cb6:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    2cba:	4628      	mov	r0, r5
    2cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    2cbe:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    2cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002cc4 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    2cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cc6:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2cc8:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2cca:	6886      	ldr	r6, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2ccc:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2cce:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2cd0:	6897      	ldr	r7, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    2cd2:	b989      	cbnz	r1, 2cf8 <gpio_nrf5_disable_callback+0x34>
		i = gpiote_find_channel(dev, pin);
    2cd4:	4621      	mov	r1, r4
    2cd6:	f7ff ff79 	bl	2bcc <gpiote_find_channel>
		if (i < 0) {
    2cda:	2800      	cmp	r0, #0
    2cdc:	db0e      	blt.n	2cfc <gpio_nrf5_disable_callback+0x38>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    2cde:	68b2      	ldr	r2, [r6, #8]
    2ce0:	2301      	movs	r3, #1
    2ce2:	fa03 f404 	lsl.w	r4, r3, r4
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    2ce6:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
    2cea:	ea22 0404 	bic.w	r4, r2, r4
    2cee:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
    2cf0:	f8c7 0308 	str.w	r0, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    2cf4:	4628      	mov	r0, r5
    2cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    2cf8:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    2cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002cfe <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    2cfe:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    2d00:	2200      	movs	r2, #0
    2d02:	2101      	movs	r1, #1
    2d04:	2006      	movs	r0, #6
    2d06:	f7fe fa0d 	bl	1124 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    2d0a:	2006      	movs	r0, #6
    2d0c:	f7fe f9d8 	bl	10c0 <_arch_irq_enable>

	return 0;
}
    2d10:	2000      	movs	r0, #0
    2d12:	bd08      	pop	{r3, pc}

00002d14 <gpio_nrf5_port_isr>:
{
    2d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2d16:	6803      	ldr	r3, [r0, #0]
{
    2d18:	4606      	mov	r6, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2d1a:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2d1c:	68b4      	ldr	r4, [r6, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2d1e:	6898      	ldr	r0, [r3, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2d20:	2200      	movs	r2, #0
	u32_t enabled_int, int_status = 0;
    2d22:	4613      	mov	r3, r2
			gpiote->EVENTS_IN[i] = 0;
    2d24:	4615      	mov	r5, r2
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    2d26:	2701      	movs	r7, #1
    2d28:	eb00 0182 	add.w	r1, r0, r2, lsl #2
		if (gpiote->EVENTS_IN[i]) {
    2d2c:	f8d1 e100 	ldr.w	lr, [r1, #256]	; 0x100
    2d30:	f1be 0f00 	cmp.w	lr, #0
    2d34:	d008      	beq.n	2d48 <gpio_nrf5_port_isr+0x34>
			gpiote->EVENTS_IN[i] = 0;
    2d36:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    2d3a:	f8d1 1510 	ldr.w	r1, [r1, #1296]	; 0x510
    2d3e:	f3c1 2104 	ubfx	r1, r1, #8, #5
    2d42:	fa07 f101 	lsl.w	r1, r7, r1
    2d46:	430b      	orrs	r3, r1
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2d48:	3201      	adds	r2, #1
    2d4a:	2a08      	cmp	r2, #8
    2d4c:	d1ec      	bne.n	2d28 <gpio_nrf5_port_isr+0x14>
	enabled_int = int_status & data->pin_callback_enables;
    2d4e:	68a5      	ldr	r5, [r4, #8]
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    2d50:	2006      	movs	r0, #6
	enabled_int = int_status & data->pin_callback_enables;
    2d52:	401d      	ands	r5, r3
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    2d54:	f7fe f9c4 	bl	10e0 <_arch_irq_disable>
    2d58:	6824      	ldr	r4, [r4, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    2d5a:	b924      	cbnz	r4, 2d66 <gpio_nrf5_port_isr+0x52>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    2d5c:	2006      	movs	r0, #6
}
    2d5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    2d62:	f7fe b9ad 	b.w	10c0 <_arch_irq_enable>
		if (cb->pin_mask & pins) {
    2d66:	68a3      	ldr	r3, [r4, #8]
    2d68:	421d      	tst	r5, r3
    2d6a:	d0f5      	beq.n	2d58 <gpio_nrf5_port_isr+0x44>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    2d6c:	6863      	ldr	r3, [r4, #4]
    2d6e:	462a      	mov	r2, r5
    2d70:	4621      	mov	r1, r4
    2d72:	4630      	mov	r0, r6
    2d74:	4798      	blx	r3
    2d76:	e7ef      	b.n	2d58 <gpio_nrf5_port_isr+0x44>

00002d78 <gpio_nrf5_config>:
{
    2d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2d7c:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2d7e:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2d80:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2d82:	6892      	ldr	r2, [r2, #8]
{
    2d84:	4680      	mov	r8, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2d86:	6895      	ldr	r5, [r2, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2d88:	6810      	ldr	r0, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    2d8a:	b119      	cbz	r1, 2d94 <gpio_nrf5_config+0x1c>
		return -ENOTSUP;
    2d8c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    2d90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    2d94:	f403 7240 	and.w	r2, r3, #768	; 0x300
    2d98:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    2d9c:	f3c3 3101 	ubfx	r1, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    2da0:	f3c3 3981 	ubfx	r9, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    2da4:	f403 3e40 	and.w	lr, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    2da8:	d056      	beq.n	2e58 <gpio_nrf5_config+0xe0>
		u8_t pull = GPIO_PULL_DISABLE;
    2daa:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    2dae:	bf0c      	ite	eq
    2db0:	2204      	moveq	r2, #4
    2db2:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
    2db4:	f5be 3f80 	cmp.w	lr, #65536	; 0x10000
    2db8:	bf08      	it	eq
    2dba:	f04f 0e00 	moveq.w	lr, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    2dbe:	f013 0f01 	tst.w	r3, #1
    2dc2:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 2e8c <gpio_nrf5_config+0x114>
    2dc6:	ea4f 0181 	mov.w	r1, r1, lsl #2
    2dca:	f504 76e0 	add.w	r6, r4, #448	; 0x1c0
    2dce:	d04e      	beq.n	2e6e <gpio_nrf5_config+0xf6>
			if (pull == GPIO_PULL_UP) {
    2dd0:	2a0c      	cmp	r2, #12
    2dd2:	d143      	bne.n	2e5c <gpio_nrf5_config+0xe4>
				gpio->OUTSET = BIT(pin);
    2dd4:	f04f 0e01 	mov.w	lr, #1
    2dd8:	fa0e fe04 	lsl.w	lr, lr, r4
    2ddc:	f8c0 e508 	str.w	lr, [r0, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
    2de0:	4449      	add	r1, r9
					      GPIO_INPUT_DISCONNECT |
    2de2:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    2de6:	f041 0103 	orr.w	r1, r1, #3
    2dea:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
    2dec:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
	if (flags & GPIO_INT) {
    2df0:	f013 0002 	ands.w	r0, r3, #2
    2df4:	d047      	beq.n	2e86 <gpio_nrf5_config+0x10e>
		if (flags & GPIO_INT_EDGE) {
    2df6:	0699      	lsls	r1, r3, #26
    2df8:	d5c8      	bpl.n	2d8c <gpio_nrf5_config+0x14>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    2dfa:	065a      	lsls	r2, r3, #25
    2dfc:	d43e      	bmi.n	2e7c <gpio_nrf5_config+0x104>
				config |= GPIOTE_CFG_POL_H2L;
    2dfe:	f013 0f04 	tst.w	r3, #4
    2e02:	bf14      	ite	ne
    2e04:	f44f 3680 	movne.w	r6, #65536	; 0x10000
    2e08:	f44f 3600 	moveq.w	r6, #131072	; 0x20000
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    2e0c:	68f8      	ldr	r0, [r7, #12]
    2e0e:	f7fd fa43 	bl	298 <__popcountsi2>
    2e12:	2808      	cmp	r0, #8
    2e14:	d035      	beq.n	2e82 <gpio_nrf5_config+0x10a>
		int i = gpiote_find_channel(dev, pin);
    2e16:	4621      	mov	r1, r4
    2e18:	4640      	mov	r0, r8
    2e1a:	f7ff fed7 	bl	2bcc <gpiote_find_channel>
		if (i < 0) {
    2e1e:	2800      	cmp	r0, #0
    2e20:	68fb      	ldr	r3, [r7, #12]
    2e22:	da08      	bge.n	2e36 <gpio_nrf5_config+0xbe>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    2e24:	43da      	mvns	r2, r3
    2e26:	fa92 f0a2 	rbit	r0, r2
    2e2a:	2a00      	cmp	r2, #0
    2e2c:	fab0 f080 	clz	r0, r0
    2e30:	bf08      	it	eq
    2e32:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		config |= GPIOTE_CFG_PIN(pin);
    2e36:	0224      	lsls	r4, r4, #8
		data->gpiote_chan_mask |= BIT(i);
    2e38:	2201      	movs	r2, #1
		config |= GPIOTE_CFG_PIN(pin);
    2e3a:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		data->gpiote_chan_mask |= BIT(i);
    2e3e:	4082      	lsls	r2, r0
		config |= GPIOTE_CFG_PIN(pin);
    2e40:	f044 0401 	orr.w	r4, r4, #1
		gpiote->CONFIG[i] = config;
    2e44:	f500 70a2 	add.w	r0, r0, #324	; 0x144
		data->gpiote_chan_mask |= BIT(i);
    2e48:	4313      	orrs	r3, r2
		config |= GPIOTE_CFG_PIN(pin);
    2e4a:	4334      	orrs	r4, r6
		data->gpiote_chan_mask |= BIT(i);
    2e4c:	60fb      	str	r3, [r7, #12]
		gpiote->CONFIG[i] = config;
    2e4e:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
	return 0;
    2e52:	2000      	movs	r0, #0
    2e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pull = GPIO_PULL_UP;
    2e58:	220c      	movs	r2, #12
    2e5a:	e7ab      	b.n	2db4 <gpio_nrf5_config+0x3c>
			} else if (pull == GPIO_PULL_DOWN) {
    2e5c:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
    2e5e:	bf02      	ittt	eq
    2e60:	f04f 0e01 	moveq.w	lr, #1
    2e64:	fa0e fe04 	lsleq.w	lr, lr, r4
    2e68:	f8c0 e50c 	streq.w	lr, [r0, #1292]	; 0x50c
    2e6c:	e7b8      	b.n	2de0 <gpio_nrf5_config+0x68>
					      drive_strength[ds_low][ds_high] |
    2e6e:	4449      	add	r1, r9
    2e70:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    2e74:	430a      	orrs	r2, r1
    2e76:	ea42 020e 	orr.w	r2, r2, lr
    2e7a:	e7b7      	b.n	2dec <gpio_nrf5_config+0x74>
				config |= GPIOTE_CFG_POL_TOGG;
    2e7c:	f44f 3640 	mov.w	r6, #196608	; 0x30000
    2e80:	e7c4      	b.n	2e0c <gpio_nrf5_config+0x94>
			return -EIO;
    2e82:	f06f 0004 	mvn.w	r0, #4
}
    2e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2e8a:	bf00      	nop
    2e8c:	00020f50 	.word	0x00020f50

00002e90 <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2e90:	6803      	ldr	r3, [r0, #0]
    2e92:	689b      	ldr	r3, [r3, #8]
    2e94:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    2e96:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    2e9a:	b132      	cbz	r2, 2eaa <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    2e9c:	2000      	movs	r0, #0
    2e9e:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    2ea2:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    2ea6:	700b      	strb	r3, [r1, #0]

	return 0;
    2ea8:	4770      	bx	lr
		return -1;
    2eaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2eae:	4770      	bx	lr

00002eb0 <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2eb0:	6803      	ldr	r3, [r0, #0]
    2eb2:	689b      	ldr	r3, [r3, #8]
    2eb4:	681b      	ldr	r3, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    2eb6:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    2eba:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
    2ebe:	2a00      	cmp	r2, #0
    2ec0:	d0fb      	beq.n	2eba <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    2ec2:	2200      	movs	r2, #0
    2ec4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	return c;
}
    2ec8:	4608      	mov	r0, r1
    2eca:	4770      	bx	lr

00002ecc <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2ecc:	6803      	ldr	r3, [r0, #0]
    2ece:	689b      	ldr	r3, [r3, #8]
    2ed0:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    2ed2:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
    2ed6:	b118      	cbz	r0, 2ee0 <uart_nrf5_err_check+0x14>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    2ed8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    2edc:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    2ee0:	f000 000f 	and.w	r0, r0, #15
    2ee4:	4770      	bx	lr

00002ee6 <uart_nrf5_fifo_fill>:

#ifdef CONFIG_UART_INTERRUPT_DRIVEN

/** Interrupt driven FIFO fill function */
static int uart_nrf5_fifo_fill(struct device *dev, const u8_t *tx_data, int len)
{
    2ee6:	b570      	push	{r4, r5, r6, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
    2ee8:	6803      	ldr	r3, [r0, #0]
    2eea:	689b      	ldr	r3, [r3, #8]
    2eec:	681c      	ldr	r4, [r3, #0]
	u8_t num_tx = 0;

	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    2eee:	2300      	movs	r3, #0
		/* Clear the interrupt */
		uart->EVENTS_TXDRDY = 0;
    2ef0:	461e      	mov	r6, r3
	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    2ef2:	b2d8      	uxtb	r0, r3
    2ef4:	1a15      	subs	r5, r2, r0
    2ef6:	2d00      	cmp	r5, #0
    2ef8:	dd03      	ble.n	2f02 <uart_nrf5_fifo_fill+0x1c>
    2efa:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
    2efe:	3301      	adds	r3, #1
    2f00:	b905      	cbnz	r5, 2f04 <uart_nrf5_fifo_fill+0x1e>
		/* Send a character */
		uart->TXD = (u8_t)tx_data[num_tx++];
	}

	return (int)num_tx;
}
    2f02:	bd70      	pop	{r4, r5, r6, pc}
		uart->EVENTS_TXDRDY = 0;
    2f04:	f8c4 611c 	str.w	r6, [r4, #284]	; 0x11c
		uart->TXD = (u8_t)tx_data[num_tx++];
    2f08:	5c08      	ldrb	r0, [r1, r0]
    2f0a:	f8c4 051c 	str.w	r0, [r4, #1308]	; 0x51c
    2f0e:	e7f0      	b.n	2ef2 <uart_nrf5_fifo_fill+0xc>

00002f10 <uart_nrf5_fifo_read>:

/** Interrupt driven FIFO read function */
static int uart_nrf5_fifo_read(struct device *dev, u8_t *rx_data, const int size)
{
    2f10:	b570      	push	{r4, r5, r6, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
    2f12:	6803      	ldr	r3, [r0, #0]
    2f14:	689b      	ldr	r3, [r3, #8]
    2f16:	681c      	ldr	r4, [r3, #0]
	u8_t num_rx = 0;

	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    2f18:	2300      	movs	r3, #0
		/* Clear the interrupt */
		uart->EVENTS_RXDRDY = 0;
    2f1a:	461e      	mov	r6, r3
	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    2f1c:	b2d8      	uxtb	r0, r3
    2f1e:	1a15      	subs	r5, r2, r0
    2f20:	2d00      	cmp	r5, #0
    2f22:	dd03      	ble.n	2f2c <uart_nrf5_fifo_read+0x1c>
    2f24:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
    2f28:	3301      	adds	r3, #1
    2f2a:	b905      	cbnz	r5, 2f2e <uart_nrf5_fifo_read+0x1e>
		/* Receive a character */
		rx_data[num_rx++] = (u8_t)uart->RXD;
	}

	return num_rx;
}
    2f2c:	bd70      	pop	{r4, r5, r6, pc}
		uart->EVENTS_RXDRDY = 0;
    2f2e:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
		rx_data[num_rx++] = (u8_t)uart->RXD;
    2f32:	f8d4 5518 	ldr.w	r5, [r4, #1304]	; 0x518
    2f36:	540d      	strb	r5, [r1, r0]
    2f38:	e7f0      	b.n	2f1c <uart_nrf5_fifo_read+0xc>

00002f3a <uart_nrf5_irq_tx_enable>:

/** Interrupt driven transfer enabling function */
static void uart_nrf5_irq_tx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2f3a:	6803      	ldr	r3, [r0, #0]
    2f3c:	689b      	ldr	r3, [r3, #8]
    2f3e:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_TX;
    2f40:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    2f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2f48:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    2f4c:	4770      	bx	lr

00002f4e <uart_nrf5_irq_tx_disable>:
}

/** Interrupt driven transfer disabling function */
static void uart_nrf5_irq_tx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2f4e:	6803      	ldr	r3, [r0, #0]
    2f50:	689b      	ldr	r3, [r3, #8]
    2f52:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_TX;
    2f54:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    2f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2f5c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    2f60:	4770      	bx	lr

00002f62 <uart_nrf5_irq_tx_ready>:
}

/** Interrupt driven transfer ready function */
static int uart_nrf5_irq_tx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2f62:	6803      	ldr	r3, [r0, #0]
    2f64:	689b      	ldr	r3, [r3, #8]
    2f66:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_TXDRDY;
    2f68:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    2f6c:	4770      	bx	lr

00002f6e <uart_nrf5_irq_rx_enable>:

/** Interrupt driven receiver enabling function */
static void uart_nrf5_irq_rx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2f6e:	6803      	ldr	r3, [r0, #0]
    2f70:	689b      	ldr	r3, [r3, #8]
    2f72:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_RX;
    2f74:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    2f78:	f043 0304 	orr.w	r3, r3, #4
    2f7c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    2f80:	4770      	bx	lr

00002f82 <uart_nrf5_irq_rx_disable>:
}

/** Interrupt driven receiver disabling function */
static void uart_nrf5_irq_rx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2f82:	6803      	ldr	r3, [r0, #0]
    2f84:	689b      	ldr	r3, [r3, #8]
    2f86:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_RX;
    2f88:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    2f8c:	f043 0304 	orr.w	r3, r3, #4
    2f90:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    2f94:	4770      	bx	lr

00002f96 <uart_nrf5_irq_tx_complete>:
}

/** Interrupt driven transfer empty function */
static int uart_nrf5_irq_tx_complete(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2f96:	6803      	ldr	r3, [r0, #0]
    2f98:	689b      	ldr	r3, [r3, #8]
    2f9a:	681b      	ldr	r3, [r3, #0]

	return !(uart->EVENTS_TXDRDY);
    2f9c:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    2fa0:	fab0 f080 	clz	r0, r0
    2fa4:	0940      	lsrs	r0, r0, #5
    2fa6:	4770      	bx	lr

00002fa8 <uart_nrf5_irq_rx_ready>:

/** Interrupt driven receiver ready function */
static int uart_nrf5_irq_rx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2fa8:	6803      	ldr	r3, [r0, #0]
    2faa:	689b      	ldr	r3, [r3, #8]
    2fac:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_RXDRDY;
    2fae:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    2fb2:	4770      	bx	lr

00002fb4 <uart_nrf5_irq_err_enable>:

/** Interrupt driven error enabling function */
static void uart_nrf5_irq_err_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2fb4:	6803      	ldr	r3, [r0, #0]
    2fb6:	689b      	ldr	r3, [r3, #8]
    2fb8:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_ERROR;
    2fba:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    2fbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2fc2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    2fc6:	4770      	bx	lr

00002fc8 <uart_nrf5_irq_err_disable>:
}

/** Interrupt driven error disabling function */
static void uart_nrf5_irq_err_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2fc8:	6803      	ldr	r3, [r0, #0]
    2fca:	689b      	ldr	r3, [r3, #8]
    2fcc:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_ERROR;
    2fce:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    2fd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2fd6:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    2fda:	4770      	bx	lr

00002fdc <uart_nrf5_irq_update>:

/** Interrupt driven interrupt update function */
static int uart_nrf5_irq_update(struct device *dev)
{
	return 1;
}
    2fdc:	2001      	movs	r0, #1
    2fde:	4770      	bx	lr

00002fe0 <uart_nrf5_irq_callback_set>:
/** Set the callback function */
static void uart_nrf5_irq_callback_set(struct device *dev, uart_irq_callback_t cb)
{
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);

	dev_data->cb = cb;
    2fe0:	6883      	ldr	r3, [r0, #8]
    2fe2:	6059      	str	r1, [r3, #4]
    2fe4:	4770      	bx	lr

00002fe6 <uart_nrf5_isr>:
void uart_nrf5_isr(void *arg)
{
	struct device *dev = arg;
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);

	if (dev_data->cb) {
    2fe6:	6883      	ldr	r3, [r0, #8]
    2fe8:	685b      	ldr	r3, [r3, #4]
    2fea:	b103      	cbz	r3, 2fee <uart_nrf5_isr+0x8>
		dev_data->cb(dev);
    2fec:	4718      	bx	r3
    2fee:	4770      	bx	lr

00002ff0 <uart_nrf5_irq_config>:
	    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE);


#ifdef CONFIG_UART_INTERRUPT_DRIVEN
static void uart_nrf5_irq_config(struct device *port)
{
    2ff0:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_UART0_IRQn,
    2ff2:	2002      	movs	r0, #2
    2ff4:	2200      	movs	r2, #0
    2ff6:	2101      	movs	r1, #1
    2ff8:	f7fe f894 	bl	1124 <_irq_priority_set>
		    CONFIG_UART_NRF5_IRQ_PRI,
		    uart_nrf5_isr, DEVICE_GET(uart_nrf5_0),
		    0);
	irq_enable(NRF5_IRQ_UART0_IRQn);
    2ffc:	2002      	movs	r0, #2
}
    2ffe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(NRF5_IRQ_UART0_IRQn);
    3002:	f7fe b85d 	b.w	10c0 <_arch_irq_enable>

00003006 <uart_nrf5_irq_is_pending>:
{
    3006:	b508      	push	{r3, lr}
    3008:	4602      	mov	r2, r0
	return (uart_nrf5_irq_tx_ready(dev) || uart_nrf5_irq_rx_ready(dev));
    300a:	f7ff ffaa 	bl	2f62 <uart_nrf5_irq_tx_ready>
    300e:	b930      	cbnz	r0, 301e <uart_nrf5_irq_is_pending+0x18>
    3010:	4610      	mov	r0, r2
    3012:	f7ff ffc9 	bl	2fa8 <uart_nrf5_irq_rx_ready>
    3016:	3000      	adds	r0, #0
    3018:	bf18      	it	ne
    301a:	2001      	movne	r0, #1
    301c:	bd08      	pop	{r3, pc}
    301e:	2001      	movs	r0, #1
}
    3020:	bd08      	pop	{r3, pc}
	...

00003024 <uart_nrf5_init>:
{
    3024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
    3026:	6803      	ldr	r3, [r0, #0]
    3028:	689b      	ldr	r3, [r3, #8]
{
    302a:	4605      	mov	r5, r0
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    302c:	481a      	ldr	r0, [pc, #104]	; (3098 <uart_nrf5_init+0x74>)
	volatile struct _uart *uart = UART_STRUCT(dev);
    302e:	681c      	ldr	r4, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    3030:	f01b ff46 	bl	1eec0 <device_get_binding>
static inline int _impl_gpio_config(struct device *port, int access_op,
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, access_op, pin, flags);
    3034:	6843      	ldr	r3, [r0, #4]
    3036:	4606      	mov	r6, r0
    3038:	681f      	ldr	r7, [r3, #0]
    303a:	2206      	movs	r2, #6
    303c:	f240 1301 	movw	r3, #257	; 0x101
    3040:	2100      	movs	r1, #0
    3042:	47b8      	blx	r7
    3044:	6873      	ldr	r3, [r6, #4]
    3046:	681f      	ldr	r7, [r3, #0]
    3048:	2300      	movs	r3, #0
    304a:	4619      	mov	r1, r3
    304c:	2208      	movs	r2, #8
    304e:	4630      	mov	r0, r6
    3050:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    3052:	2306      	movs	r3, #6
    3054:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    3058:	2308      	movs	r3, #8
    305a:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    305e:	68ab      	ldr	r3, [r5, #8]
    3060:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    3064:	601a      	str	r2, [r3, #0]
	volatile struct _uart *uart = UART_STRUCT(dev);
    3066:	682b      	ldr	r3, [r5, #0]
    3068:	689b      	ldr	r3, [r3, #8]
    306a:	681a      	ldr	r2, [r3, #0]
	DEV_CFG(dev)->irq_config_func(dev);
    306c:	689b      	ldr	r3, [r3, #8]
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    306e:	f04f 71eb 	mov.w	r1, #30801920	; 0x1d60000
    3072:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    3076:	2204      	movs	r2, #4
    3078:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    307c:	2600      	movs	r6, #0
	uart->TASKS_STARTTX = 1;
    307e:	2201      	movs	r2, #1
	uart->EVENTS_TXDRDY = 0;
    3080:	f8c4 611c 	str.w	r6, [r4, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    3084:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    3088:	60a2      	str	r2, [r4, #8]
	uart->TASKS_STARTRX = 1;
    308a:	6022      	str	r2, [r4, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    308c:	4a03      	ldr	r2, [pc, #12]	; (309c <uart_nrf5_init+0x78>)
    308e:	606a      	str	r2, [r5, #4]
	DEV_CFG(dev)->irq_config_func(dev);
    3090:	4628      	mov	r0, r5
    3092:	4798      	blx	r3
}
    3094:	4630      	mov	r0, r6
    3096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3098:	00020fb8 	.word	0x00020fb8
    309c:	00020fcc 	.word	0x00020fcc

000030a0 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
    30a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
    30a4:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
    30a6:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
    30a8:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
    30aa:	42a3      	cmp	r3, r4
	d = &rand[octets];
    30ac:	440a      	add	r2, r1
	s = &rng->rand[first];
    30ae:	4406      	add	r6, r0
	if (first <= last) {
    30b0:	d81f      	bhi.n	30f2 <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
    30b2:	1ae4      	subs	r4, r4, r3
    30b4:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    30b6:	42a1      	cmp	r1, r4
			remaining = avail - octets;
    30b8:	bf3e      	ittt	cc
    30ba:	1a64      	subcc	r4, r4, r1
    30bc:	b2e7      	uxtbcc	r7, r4
    30be:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
    30c0:	4423      	add	r3, r4
		octets -= avail;
    30c2:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
    30c6:	bf28      	it	cs
    30c8:	2700      	movcs	r7, #0
		first += avail;
    30ca:	b2db      	uxtb	r3, r3
		octets -= avail;
    30cc:	b2c9      	uxtb	r1, r1
    30ce:	4434      	add	r4, r6

		while (avail--) {
    30d0:	42a6      	cmp	r6, r4
    30d2:	d109      	bne.n	30e8 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
    30d4:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
    30d6:	7843      	ldrb	r3, [r0, #1]
    30d8:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
    30da:	bf82      	ittt	hi
    30dc:	4b20      	ldrhi	r3, [pc, #128]	; (3160 <get+0xc0>)
    30de:	2201      	movhi	r2, #1
    30e0:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
    30e2:	4608      	mov	r0, r1
    30e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
    30e8:	f816 5b01 	ldrb.w	r5, [r6], #1
    30ec:	f802 5d01 	strb.w	r5, [r2, #-1]!
    30f0:	e7ee      	b.n	30d0 <get+0x30>
		avail = rng->count - first;
    30f2:	7805      	ldrb	r5, [r0, #0]
    30f4:	1aed      	subs	r5, r5, r3
    30f6:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
    30f8:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
    30fa:	bf3f      	itttt	cc
    30fc:	1a67      	subcc	r7, r4, r1
    30fe:	19ed      	addcc	r5, r5, r7
    3100:	b2ef      	uxtbcc	r7, r5
    3102:	460d      	movcc	r5, r1
			first += avail;
    3104:	bf38      	it	cc
    3106:	185b      	addcc	r3, r3, r1
		octets -= avail;
    3108:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
    310c:	bf32      	itee	cc
    310e:	b2db      	uxtbcc	r3, r3
    3110:	4627      	movcs	r7, r4
			first = 0;
    3112:	2300      	movcs	r3, #0
		octets -= avail;
    3114:	b2c9      	uxtb	r1, r1
    3116:	4696      	mov	lr, r2
    3118:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
    311c:	4566      	cmp	r6, ip
    311e:	d119      	bne.n	3154 <get+0xb4>
    3120:	1b52      	subs	r2, r2, r5
		if (octets && last) {
    3122:	2900      	cmp	r1, #0
    3124:	d0d6      	beq.n	30d4 <get+0x34>
    3126:	2c00      	cmp	r4, #0
    3128:	d0d4      	beq.n	30d4 <get+0x34>
			if (octets < last) {
    312a:	428c      	cmp	r4, r1
    312c:	bf8a      	itet	hi
    312e:	460b      	movhi	r3, r1
    3130:	4623      	movls	r3, r4
				remaining = last - octets;
    3132:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
    3134:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
    3138:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
    313c:	bf8c      	ite	hi
    313e:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
    3140:	2700      	movls	r7, #0
			octets -= last;
    3142:	b2c9      	uxtb	r1, r1
    3144:	18f4      	adds	r4, r6, r3
			while (last--) {
    3146:	42a6      	cmp	r6, r4
    3148:	d0c4      	beq.n	30d4 <get+0x34>
				*(--d) = *s++;
    314a:	f816 5b01 	ldrb.w	r5, [r6], #1
    314e:	f802 5d01 	strb.w	r5, [r2, #-1]!
    3152:	e7f8      	b.n	3146 <get+0xa6>
			*(--d) = *s++;
    3154:	f816 8b01 	ldrb.w	r8, [r6], #1
    3158:	f80e 8d01 	strb.w	r8, [lr, #-1]!
    315c:	e7de      	b.n	311c <get+0x7c>
    315e:	bf00      	nop
    3160:	4000d000 	.word	0x4000d000

00003164 <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
    3164:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
    3166:	b1d0      	cbz	r0, 319e <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
    3168:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
    316a:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
    316c:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
    316e:	1c53      	adds	r3, r2, #1
    3170:	b2db      	uxtb	r3, r3
		last = 0;
    3172:	42ab      	cmp	r3, r5
    3174:	bf08      	it	eq
    3176:	2300      	moveq	r3, #0
	if (last == rng->first) {
    3178:	42a3      	cmp	r3, r4
    317a:	d010      	beq.n	319e <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    317c:	b161      	cbz	r1, 3198 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    317e:	490a      	ldr	r1, [pc, #40]	; (31a8 <isr+0x44>)
    3180:	4402      	add	r2, r0
    3182:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    3186:	7111      	strb	r1, [r2, #4]
	rng->last = last;
    3188:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
    318a:	3301      	adds	r3, #1
    318c:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
    318e:	429d      	cmp	r5, r3
    3190:	bf08      	it	eq
    3192:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
    3194:	42a3      	cmp	r3, r4
    3196:	d005      	beq.n	31a4 <isr+0x40>
		return 0;
	}

	return -EBUSY;
    3198:	f06f 000f 	mvn.w	r0, #15
    319c:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
    319e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    31a2:	bd30      	pop	{r4, r5, pc}
		return 0;
    31a4:	2000      	movs	r0, #0
}
    31a6:	bd30      	pop	{r4, r5, pc}
    31a8:	4000d000 	.word	0x4000d000

000031ac <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
    31ac:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    31ae:	6884      	ldr	r4, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    31b0:	2201      	movs	r2, #1
    31b2:	4611      	mov	r1, r2
    31b4:	4620      	mov	r0, r4
    31b6:	f01c fb3f 	bl	1f838 <_impl_k_sem_init>
    31ba:	f104 0018 	add.w	r0, r4, #24
    31be:	2201      	movs	r2, #1
    31c0:	2100      	movs	r1, #0
    31c2:	f01c fb39 	bl	1f838 <_impl_k_sem_init>
	rng->threshold = threshold;
    31c6:	2304      	movs	r3, #4
    31c8:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    31cc:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
    31ce:	2500      	movs	r5, #0
	rng->threshold = threshold;
    31d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
    31d4:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    31d6:	4b11      	ldr	r3, [pc, #68]	; (321c <entropy_nrf5_init+0x70>)
	rng->count = len;
    31d8:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    31dc:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
    31de:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
    31e2:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
    31e6:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
    31ea:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
    31ee:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    31f2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    31f6:	f042 0201 	orr.w	r2, r2, #1
    31fa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    31fe:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
    3200:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    3204:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    3206:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
    320a:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    320c:	462a      	mov	r2, r5
    320e:	f7fd ff89 	bl	1124 <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
    3212:	4630      	mov	r0, r6
    3214:	f7fd ff54 	bl	10c0 <_arch_irq_enable>

	return 0;
}
    3218:	4628      	mov	r0, r5
    321a:	bd70      	pop	{r4, r5, r6, pc}
    321c:	4000d000 	.word	0x4000d000

00003220 <isr_rand>:
{
    3220:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
    3222:	4b12      	ldr	r3, [pc, #72]	; (326c <isr_rand+0x4c>)
    3224:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3228:	b1fb      	cbz	r3, 326a <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    322a:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
    322c:	2101      	movs	r1, #1
    322e:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    3232:	f7ff ff97 	bl	3164 <isr>
		if (ret != -EBUSY) {
    3236:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
    323a:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
    323c:	d00d      	beq.n	325a <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
    323e:	f110 0437 	adds.w	r4, r0, #55	; 0x37
    3242:	bf14      	ite	ne
    3244:	2100      	movne	r1, #0
    3246:	2101      	moveq	r1, #1
    3248:	f105 0030 	add.w	r0, r5, #48	; 0x30
    324c:	f7ff ff8a 	bl	3164 <isr>
    3250:	4604      	mov	r4, r0

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3252:	f105 0018 	add.w	r0, r5, #24
    3256:	f01c faf9 	bl	1f84c <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
    325a:	4b04      	ldr	r3, [pc, #16]	; (326c <isr_rand+0x4c>)
    325c:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
    325e:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
    3260:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
    3264:	bf1c      	itt	ne
    3266:	2201      	movne	r2, #1
    3268:	605a      	strne	r2, [r3, #4]
    326a:	bd38      	pop	{r3, r4, r5, pc}
    326c:	4000d000 	.word	0x4000d000

00003270 <entropy_nrf5_get_entropy>:
{
    3270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    3274:	6885      	ldr	r5, [r0, #8]
{
    3276:	460f      	mov	r7, r1
    3278:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
    327a:	f105 0818 	add.w	r8, r5, #24
	while (len) {
    327e:	b914      	cbnz	r4, 3286 <entropy_nrf5_get_entropy+0x16>
}
    3280:	4620      	mov	r0, r4
    3282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3286:	2cff      	cmp	r4, #255	; 0xff
    3288:	4623      	mov	r3, r4
    328a:	bf28      	it	cs
    328c:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
    328e:	1ae4      	subs	r4, r4, r3
    3290:	b2de      	uxtb	r6, r3
    3292:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
    3294:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    3298:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    329c:	4628      	mov	r0, r5
    329e:	f01c fb35 	bl	1f90c <_impl_k_sem_take>
    32a2:	4631      	mov	r1, r6
    32a4:	463a      	mov	r2, r7
    32a6:	4648      	mov	r0, r9
    32a8:	f7ff fefa 	bl	30a0 <get>
    32ac:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    32ae:	4628      	mov	r0, r5
    32b0:	f01c facc 	bl	1f84c <_impl_k_sem_give>
			if (len8) {
    32b4:	2e00      	cmp	r6, #0
    32b6:	d0e2      	beq.n	327e <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    32b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    32bc:	4640      	mov	r0, r8
    32be:	f01c fb25 	bl	1f90c <_impl_k_sem_take>
    32c2:	e7e9      	b.n	3298 <entropy_nrf5_get_entropy+0x28>

000032c4 <entropy_get_entropy_isr>:

u8_t entropy_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
    32c4:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
    32c6:	4802      	ldr	r0, [pc, #8]	; (32d0 <entropy_get_entropy_isr+0xc>)
    32c8:	460a      	mov	r2, r1
    32ca:	4619      	mov	r1, r3
    32cc:	f7ff bee8 	b.w	30a0 <get>
    32d0:	2000035c 	.word	0x2000035c

000032d4 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    32d4:	4b08      	ldr	r3, [pc, #32]	; (32f8 <rtc_compare_set+0x24>)
    32d6:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    32da:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    32de:	1ac0      	subs	r0, r0, r3
    32e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    32e4:	4b05      	ldr	r3, [pc, #20]	; (32fc <rtc_compare_set+0x28>)
    32e6:	3802      	subs	r0, #2
    32e8:	4298      	cmp	r0, r3
    32ea:	bf82      	ittt	hi
    32ec:	4b04      	ldrhi	r3, [pc, #16]	; (3300 <rtc_compare_set+0x2c>)
    32ee:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    32f2:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    32f6:	4770      	bx	lr
    32f8:	40011000 	.word	0x40011000
    32fc:	007ffffd 	.word	0x007ffffd
    3300:	e000e100 	.word	0xe000e100

00003304 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    3304:	b510      	push	{r4, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    3306:	4b12      	ldr	r3, [pc, #72]	; (3350 <rtc_announce_set_next+0x4c>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    3308:	4c12      	ldr	r4, [pc, #72]	; (3354 <rtc_announce_set_next+0x50>)
	rtc_now = RTC_COUNTER;
    330a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    330e:	6822      	ldr	r2, [r4, #0]
    3310:	1a80      	subs	r0, r0, r2
    3312:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    3316:	f5b0 7fa3 	cmp.w	r0, #326	; 0x146
    331a:	d911      	bls.n	3340 <rtc_announce_set_next+0x3c>
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;

		if (sys_elapsed > expected_sys_ticks) {
    331c:	490e      	ldr	r1, [pc, #56]	; (3358 <rtc_announce_set_next+0x54>)
    331e:	6809      	ldr	r1, [r1, #0]
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    3320:	f240 1347 	movw	r3, #327	; 0x147
    3324:	fbb0 f0f3 	udiv	r0, r0, r3
    3328:	4288      	cmp	r0, r1
    332a:	bf28      	it	cs
    332c:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    332e:	fb03 2300 	mla	r3, r3, r0, r2
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    3332:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    3336:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    3338:	4b08      	ldr	r3, [pc, #32]	; (335c <rtc_announce_set_next+0x58>)
    333a:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    333c:	f01c fb28 	bl	1f990 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    3340:	6820      	ldr	r0, [r4, #0]
}
    3342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    3346:	f200 1047 	addw	r0, r0, #327	; 0x147
    334a:	f7ff bfc3 	b.w	32d4 <rtc_compare_set>
    334e:	bf00      	nop
    3350:	40011000 	.word	0x40011000
    3354:	20000374 	.word	0x20000374
    3358:	20000370 	.word	0x20000370
    335c:	2000e8c4 	.word	0x2000e8c4

00003360 <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    3360:	4b02      	ldr	r3, [pc, #8]	; (336c <rtc1_nrf5_isr+0xc>)
    3362:	2200      	movs	r2, #0
    3364:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    3368:	f7ff bfcc 	b.w	3304 <rtc_announce_set_next>
    336c:	40011000 	.word	0x40011000

00003370 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    3370:	f246 4335 	movw	r3, #25653	; 0x6435
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    3374:	4298      	cmp	r0, r3
    3376:	bf28      	it	cs
    3378:	4618      	movcs	r0, r3
	expected_sys_ticks = sys_ticks;
    337a:	4b05      	ldr	r3, [pc, #20]	; (3390 <_timer_idle_enter+0x20>)
    337c:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    337e:	4b05      	ldr	r3, [pc, #20]	; (3394 <_timer_idle_enter+0x24>)
    3380:	681b      	ldr	r3, [r3, #0]
    3382:	f240 1247 	movw	r2, #327	; 0x147
    3386:	fb02 3000 	mla	r0, r2, r0, r3
    338a:	f7ff bfa3 	b.w	32d4 <rtc_compare_set>
    338e:	bf00      	nop
    3390:	20000370 	.word	0x20000370
    3394:	20000374 	.word	0x20000374

00003398 <_timer_idle_exit>:
{
    3398:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    339a:	4b07      	ldr	r3, [pc, #28]	; (33b8 <_timer_idle_exit+0x20>)
    339c:	2200      	movs	r2, #0
    339e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    33a2:	4b06      	ldr	r3, [pc, #24]	; (33bc <_timer_idle_exit+0x24>)
    33a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    33a8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    33ac:	f7ff ffaa 	bl	3304 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    33b0:	4b03      	ldr	r3, [pc, #12]	; (33c0 <_timer_idle_exit+0x28>)
    33b2:	2201      	movs	r2, #1
    33b4:	601a      	str	r2, [r3, #0]
    33b6:	bd08      	pop	{r3, pc}
    33b8:	40011000 	.word	0x40011000
    33bc:	e000e100 	.word	0xe000e100
    33c0:	20000370 	.word	0x20000370

000033c4 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    33c4:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    33c6:	4818      	ldr	r0, [pc, #96]	; (3428 <_sys_clock_driver_init+0x64>)
    33c8:	f01b fd7a 	bl	1eec0 <device_get_binding>
	if (!clock) {
    33cc:	b348      	cbz	r0, 3422 <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    33ce:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    33d0:	4d16      	ldr	r5, [pc, #88]	; (342c <_sys_clock_driver_init+0x68>)
    33d2:	681b      	ldr	r3, [r3, #0]
    33d4:	2101      	movs	r1, #1
    33d6:	4798      	blx	r3
	rtc_past = 0;
    33d8:	4b15      	ldr	r3, [pc, #84]	; (3430 <_sys_clock_driver_init+0x6c>)
    33da:	2400      	movs	r4, #0
    33dc:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    33de:	4b15      	ldr	r3, [pc, #84]	; (3434 <_sys_clock_driver_init+0x70>)
    33e0:	2601      	movs	r6, #1
    33e2:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    33e4:	f240 1347 	movw	r3, #327	; 0x147
	SYS_CLOCK_RTC->PRESCALER = 0;
    33e8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    33ec:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    33f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    33f4:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    33f8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    33fc:	4b0e      	ldr	r3, [pc, #56]	; (3438 <_sys_clock_driver_init+0x74>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    33fe:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    3402:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3406:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    340a:	4631      	mov	r1, r6
    340c:	4622      	mov	r2, r4
    340e:	2011      	movs	r0, #17
    3410:	f7fd fe88 	bl	1124 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    3414:	2011      	movs	r0, #17
    3416:	f7fd fe53 	bl	10c0 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    341a:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    341c:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    341e:	602e      	str	r6, [r5, #0]
	return 0;
    3420:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    3422:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    3426:	bd70      	pop	{r4, r5, r6, pc}
    3428:	00020f38 	.word	0x00020f38
    342c:	40011000 	.word	0x40011000
    3430:	20000374 	.word	0x20000374
    3434:	20000370 	.word	0x20000370
    3438:	e000e100 	.word	0xe000e100

0000343c <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    343c:	b530      	push	{r4, r5, lr}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    343e:	4a0b      	ldr	r2, [pc, #44]	; (346c <_timer_cycle_get_32+0x30>)
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    3440:	480b      	ldr	r0, [pc, #44]	; (3470 <_timer_cycle_get_32+0x34>)
	rtc_now = RTC_COUNTER;
    3442:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
		sys_clock_tick_count = _sys_clock_tick_count;
    3446:	e9d0 4500 	ldrd	r4, r5, [r0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    344a:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    344e:	4299      	cmp	r1, r3
    3450:	d10a      	bne.n	3468 <_timer_cycle_get_32+0x2c>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    3452:	4a08      	ldr	r2, [pc, #32]	; (3474 <_timer_cycle_get_32+0x38>)
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    3454:	f240 1347 	movw	r3, #327	; 0x147
    3458:	fb03 1314 	mls	r3, r3, r4, r1
	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    345c:	6810      	ldr	r0, [r2, #0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    345e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	       elapsed_cycles;
}
    3462:	fb00 3004 	mla	r0, r0, r4, r3
    3466:	bd30      	pop	{r4, r5, pc}
    3468:	4619      	mov	r1, r3
    346a:	e7ec      	b.n	3446 <_timer_cycle_get_32+0xa>
    346c:	40011000 	.word	0x40011000
    3470:	20005210 	.word	0x20005210
    3474:	2000e8c8 	.word	0x2000e8c8

00003478 <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    3478:	b530      	push	{r4, r5, lr}
    347a:	b085      	sub	sp, #20
    347c:	4604      	mov	r4, r0
    347e:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    3480:	4668      	mov	r0, sp
    3482:	2203      	movs	r2, #3
    3484:	f7fd fa31 	bl	8ea <memcpy>
	memset(res + 3, 0, 13);
    3488:	220d      	movs	r2, #13
    348a:	2100      	movs	r1, #0
    348c:	f10d 0003 	add.w	r0, sp, #3
    3490:	f7fd fa57 	bl	942 <memset>

	err = bt_encrypt_le(irk, res, res);
    3494:	4620      	mov	r0, r4
    3496:	466a      	mov	r2, sp
    3498:	4669      	mov	r1, sp
    349a:	f008 fb05 	bl	baa8 <bt_encrypt_le>
	if (err) {
    349e:	4604      	mov	r4, r0
    34a0:	b920      	cbnz	r0, 34ac <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    34a2:	2203      	movs	r2, #3
    34a4:	4669      	mov	r1, sp
    34a6:	4628      	mov	r0, r5
    34a8:	f7fd fa1f 	bl	8ea <memcpy>

	return 0;
}
    34ac:	4620      	mov	r0, r4
    34ae:	b005      	add	sp, #20
    34b0:	bd30      	pop	{r4, r5, pc}

000034b2 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    34b2:	b513      	push	{r0, r1, r4, lr}
    34b4:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    34b6:	aa01      	add	r2, sp, #4
    34b8:	3103      	adds	r1, #3
    34ba:	f7ff ffdd 	bl	3478 <ah>
	if (err) {
    34be:	b948      	cbnz	r0, 34d4 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    34c0:	2203      	movs	r2, #3
    34c2:	a901      	add	r1, sp, #4
    34c4:	4620      	mov	r0, r4
    34c6:	f7fd f9e3 	bl	890 <memcmp>
    34ca:	fab0 f080 	clz	r0, r0
    34ce:	0940      	lsrs	r0, r0, #5
}
    34d0:	b002      	add	sp, #8
    34d2:	bd10      	pop	{r4, pc}
		return false;
    34d4:	2000      	movs	r0, #0
    34d6:	e7fb      	b.n	34d0 <bt_rpa_irk_matches+0x1e>

000034d8 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    34d8:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    34da:	1ccd      	adds	r5, r1, #3
{
    34dc:	4606      	mov	r6, r0
    34de:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    34e0:	4628      	mov	r0, r5
    34e2:	2103      	movs	r1, #3
    34e4:	f008 fac4 	bl	ba70 <bt_rand>
	if (err) {
    34e8:	b960      	cbnz	r0, 3504 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    34ea:	7963      	ldrb	r3, [r4, #5]
    34ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    34f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    34f4:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    34f6:	4622      	mov	r2, r4
    34f8:	4629      	mov	r1, r5
    34fa:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    34fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    3500:	f7ff bfba 	b.w	3478 <ah>
}
    3504:	bd70      	pop	{r4, r5, r6, pc}
	...

00003508 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    3508:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    350a:	7802      	ldrb	r2, [r0, #0]
    350c:	2a01      	cmp	r2, #1
{
    350e:	4604      	mov	r4, r0
    3510:	460b      	mov	r3, r1
	switch (src->type) {
    3512:	d017      	beq.n	3544 <uuid_to_uuid128+0x3c>
    3514:	d303      	bcc.n	351e <uuid_to_uuid128+0x16>
    3516:	2a02      	cmp	r2, #2
    3518:	d02c      	beq.n	3574 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    351a:	bcf0      	pop	{r4, r5, r6, r7}
    351c:	4770      	bx	lr
		*dst = uuid128_base;
    351e:	4a18      	ldr	r2, [pc, #96]	; (3580 <uuid_to_uuid128+0x78>)
    3520:	460d      	mov	r5, r1
    3522:	f102 0710 	add.w	r7, r2, #16
    3526:	6810      	ldr	r0, [r2, #0]
    3528:	6851      	ldr	r1, [r2, #4]
    352a:	462e      	mov	r6, r5
    352c:	c603      	stmia	r6!, {r0, r1}
    352e:	3208      	adds	r2, #8
    3530:	42ba      	cmp	r2, r7
    3532:	4635      	mov	r5, r6
    3534:	d1f7      	bne.n	3526 <uuid_to_uuid128+0x1e>
    3536:	7812      	ldrb	r2, [r2, #0]
    3538:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    353a:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    353c:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    353e:	0a12      	lsrs	r2, r2, #8
    3540:	739a      	strb	r2, [r3, #14]
    3542:	e7ea      	b.n	351a <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    3544:	4a0e      	ldr	r2, [pc, #56]	; (3580 <uuid_to_uuid128+0x78>)
    3546:	460d      	mov	r5, r1
    3548:	f102 0710 	add.w	r7, r2, #16
    354c:	6810      	ldr	r0, [r2, #0]
    354e:	6851      	ldr	r1, [r2, #4]
    3550:	462e      	mov	r6, r5
    3552:	c603      	stmia	r6!, {r0, r1}
    3554:	3208      	adds	r2, #8
    3556:	42ba      	cmp	r2, r7
    3558:	4635      	mov	r5, r6
    355a:	d1f7      	bne.n	354c <uuid_to_uuid128+0x44>
    355c:	7812      	ldrb	r2, [r2, #0]
    355e:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    3560:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    3562:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    3564:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    3568:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    356a:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    356c:	0a12      	lsrs	r2, r2, #8
    356e:	7399      	strb	r1, [r3, #14]
    3570:	741a      	strb	r2, [r3, #16]
    3572:	e7d2      	b.n	351a <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    3574:	4601      	mov	r1, r0
    3576:	2211      	movs	r2, #17
    3578:	4618      	mov	r0, r3
}
    357a:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    357c:	f7fd b9b5 	b.w	8ea <memcpy>
    3580:	0002101e 	.word	0x0002101e

00003584 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    3584:	b510      	push	{r4, lr}
    3586:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    3588:	7801      	ldrb	r1, [r0, #0]
    358a:	7822      	ldrb	r2, [r4, #0]
    358c:	428a      	cmp	r2, r1
{
    358e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    3590:	d00e      	beq.n	35b0 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    3592:	4669      	mov	r1, sp
    3594:	f7ff ffb8 	bl	3508 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    3598:	a905      	add	r1, sp, #20
    359a:	4620      	mov	r0, r4
    359c:	f7ff ffb4 	bl	3508 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    35a0:	2210      	movs	r2, #16
    35a2:	f10d 0115 	add.w	r1, sp, #21
    35a6:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    35aa:	f7fd f971 	bl	890 <memcmp>
    35ae:	e00a      	b.n	35c6 <bt_uuid_cmp+0x42>
	switch (u1->type) {
    35b0:	2a01      	cmp	r2, #1
    35b2:	d00a      	beq.n	35ca <bt_uuid_cmp+0x46>
    35b4:	d304      	bcc.n	35c0 <bt_uuid_cmp+0x3c>
    35b6:	2a02      	cmp	r2, #2
    35b8:	d00a      	beq.n	35d0 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    35ba:	f06f 0015 	mvn.w	r0, #21
    35be:	e002      	b.n	35c6 <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    35c0:	8840      	ldrh	r0, [r0, #2]
    35c2:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    35c4:	1ac0      	subs	r0, r0, r3
}
    35c6:	b00a      	add	sp, #40	; 0x28
    35c8:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    35ca:	6840      	ldr	r0, [r0, #4]
    35cc:	6863      	ldr	r3, [r4, #4]
    35ce:	e7f9      	b.n	35c4 <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    35d0:	2210      	movs	r2, #16
    35d2:	1c61      	adds	r1, r4, #1
    35d4:	3001      	adds	r0, #1
    35d6:	e7e8      	b.n	35aa <bt_uuid_cmp+0x26>

000035d8 <valid_adv_param>:
	}
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    35d8:	7803      	ldrb	r3, [r0, #0]
    35da:	8842      	ldrh	r2, [r0, #2]
    35dc:	f013 0301 	ands.w	r3, r3, #1
    35e0:	d105      	bne.n	35ee <valid_adv_param+0x16>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    35e2:	4909      	ldr	r1, [pc, #36]	; (3608 <valid_adv_param+0x30>)
    35e4:	7b89      	ldrb	r1, [r1, #14]
    35e6:	2908      	cmp	r1, #8
    35e8:	d801      	bhi.n	35ee <valid_adv_param+0x16>
    35ea:	2a9f      	cmp	r2, #159	; 0x9f
    35ec:	d90a      	bls.n	3604 <valid_adv_param+0x2c>
		    param->interval_min < 0x00a0) {
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    35ee:	8880      	ldrh	r0, [r0, #4]
    35f0:	4282      	cmp	r2, r0
    35f2:	d807      	bhi.n	3604 <valid_adv_param+0x2c>
    35f4:	2a1f      	cmp	r2, #31
    35f6:	d905      	bls.n	3604 <valid_adv_param+0x2c>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    35f8:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    35fc:	bf8c      	ite	hi
    35fe:	2000      	movhi	r0, #0
    3600:	2001      	movls	r0, #1
    3602:	4770      	bx	lr
			return false;
    3604:	2000      	movs	r0, #0
		return false;
	}

	return true;
}
    3606:	4770      	bx	lr
    3608:	2000dcf8 	.word	0x2000dcf8

0000360c <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    360c:	2207      	movs	r2, #7
    360e:	f7fd b96c 	b.w	8ea <memcpy>

00003612 <atomic_or>:
{
    3612:	b500      	push	{lr}
}
    3614:	f3bf 8f5b 	dmb	ish
    3618:	e850 3f00 	ldrex	r3, [r0]
    361c:	ea43 0201 	orr.w	r2, r3, r1
    3620:	e840 2e00 	strex	lr, r2, [r0]
    3624:	f1be 0f00 	cmp.w	lr, #0
    3628:	d1f6      	bne.n	3618 <atomic_or+0x6>
    362a:	f3bf 8f5b 	dmb	ish
    362e:	4618      	mov	r0, r3
    3630:	f85d fb04 	ldr.w	pc, [sp], #4

00003634 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    3634:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3636:	f3bf 8f5b 	dmb	ish
    363a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    363e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    3642:	f001 011f 	and.w	r1, r1, #31
    3646:	4108      	asrs	r0, r1
}
    3648:	f000 0001 	and.w	r0, r0, #1
    364c:	4770      	bx	lr

0000364e <atomic_and>:
{
    364e:	b500      	push	{lr}
}
    3650:	f3bf 8f5b 	dmb	ish
    3654:	e850 3f00 	ldrex	r3, [r0]
    3658:	ea03 0201 	and.w	r2, r3, r1
    365c:	e840 2e00 	strex	lr, r2, [r0]
    3660:	f1be 0f00 	cmp.w	lr, #0
    3664:	d1f6      	bne.n	3654 <atomic_and+0x6>
    3666:	f3bf 8f5b 	dmb	ish
    366a:	4618      	mov	r0, r3
    366c:	f85d fb04 	ldr.w	pc, [sp], #4

00003670 <atomic_test_and_clear_bit>:
{
    3670:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    3672:	f001 031f 	and.w	r3, r1, #31
    3676:	2401      	movs	r4, #1
    3678:	409c      	lsls	r4, r3
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    367a:	094b      	lsrs	r3, r1, #5
    367c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    3680:	43e1      	mvns	r1, r4
    3682:	f7ff ffe4 	bl	364e <atomic_and>
	return (old & mask) != 0;
    3686:	4204      	tst	r4, r0
}
    3688:	bf14      	ite	ne
    368a:	2001      	movne	r0, #1
    368c:	2000      	moveq	r0, #0
    368e:	bd10      	pop	{r4, pc}

00003690 <update_conn_param>:
	k_delayed_work_submit(&conn->le.update_work,
    3690:	78c3      	ldrb	r3, [r0, #3]
    3692:	2b00      	cmp	r3, #0
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    3694:	f241 3288 	movw	r2, #5000	; 0x1388
    3698:	f100 0174 	add.w	r1, r0, #116	; 0x74
    369c:	bf08      	it	eq
    369e:	2200      	moveq	r2, #0
    36a0:	4801      	ldr	r0, [pc, #4]	; (36a8 <update_conn_param+0x18>)
    36a2:	f01c bc77 	b.w	1ff94 <k_delayed_work_submit_to_queue>
    36a6:	bf00      	nop
    36a8:	20005218 	.word	0x20005218

000036ac <update_sec_level.part.13>:
static void update_sec_level(struct bt_conn *conn)
    36ac:	b508      	push	{r3, lr}
    36ae:	4602      	mov	r2, r0
	if (conn->le.keys && atomic_test_bit(conn->le.keys->flags,
    36b0:	6f00      	ldr	r0, [r0, #112]	; 0x70
    36b2:	b1a8      	cbz	r0, 36e0 <update_sec_level.part.13+0x34>
    36b4:	2100      	movs	r1, #0
    36b6:	3008      	adds	r0, #8
    36b8:	f7ff ffbc 	bl	3634 <atomic_test_bit>
    36bc:	b180      	cbz	r0, 36e0 <update_sec_level.part.13+0x34>
		if (conn->le.keys->keys & BT_KEYS_LTK_P256) {
    36be:	6f13      	ldr	r3, [r2, #112]	; 0x70
    36c0:	899b      	ldrh	r3, [r3, #12]
    36c2:	069b      	lsls	r3, r3, #26
			conn->sec_level = BT_SECURITY_FIPS;
    36c4:	bf4c      	ite	mi
    36c6:	2304      	movmi	r3, #4
			conn->sec_level = BT_SECURITY_HIGH;
    36c8:	2303      	movpl	r3, #3
		conn->sec_level = BT_SECURITY_MEDIUM;
    36ca:	7213      	strb	r3, [r2, #8]
	if (conn->required_sec_level > conn->sec_level) {
    36cc:	7a51      	ldrb	r1, [r2, #9]
    36ce:	7a13      	ldrb	r3, [r2, #8]
    36d0:	4299      	cmp	r1, r3
    36d2:	d907      	bls.n	36e4 <update_sec_level.part.13+0x38>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    36d4:	2105      	movs	r1, #5
    36d6:	4610      	mov	r0, r2
}
    36d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    36dc:	f002 bdf8 	b.w	62d0 <bt_conn_disconnect>
		conn->sec_level = BT_SECURITY_MEDIUM;
    36e0:	2302      	movs	r3, #2
    36e2:	e7f2      	b.n	36ca <update_sec_level.part.13+0x1e>
    36e4:	bd08      	pop	{r3, pc}
	...

000036e8 <hci_cmd_done.isra.18>:
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    36e8:	b570      	push	{r4, r5, r6, lr}
    36ea:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    36ec:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    36ee:	460d      	mov	r5, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    36f0:	f014 f94a 	bl	17988 <net_buf_pool_get>
    36f4:	4b0e      	ldr	r3, [pc, #56]	; (3730 <hci_cmd_done.isra.18+0x48>)
    36f6:	4283      	cmp	r3, r0
    36f8:	d119      	bne.n	372e <hci_cmd_done.isra.18+0x46>
	if (cmd(buf)->opcode != opcode) {
    36fa:	4628      	mov	r0, r5
    36fc:	f014 f94a 	bl	17994 <net_buf_id>
	if (cmd(buf)->sync) {
    3700:	4628      	mov	r0, r5
    3702:	f014 f947 	bl	17994 <net_buf_id>
    3706:	4c0b      	ldr	r4, [pc, #44]	; (3734 <hci_cmd_done.isra.18+0x4c>)
    3708:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    370c:	6843      	ldr	r3, [r0, #4]
    370e:	b173      	cbz	r3, 372e <hci_cmd_done.isra.18+0x46>
		cmd(buf)->status = status;
    3710:	4628      	mov	r0, r5
    3712:	f014 f93f 	bl	17994 <net_buf_id>
    3716:	f804 6030 	strb.w	r6, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    371a:	4628      	mov	r0, r5
    371c:	f014 f93a 	bl	17994 <net_buf_id>
    3720:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
}
    3724:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3728:	6840      	ldr	r0, [r0, #4]
    372a:	f01c b88f 	b.w	1f84c <_impl_k_sem_give>
    372e:	bd70      	pop	{r4, r5, r6, pc}
    3730:	2000eaec 	.word	0x2000eaec
    3734:	2000037c 	.word	0x2000037c

00003738 <sys_put_le64>:
    3738:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    373c:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
    373e:	7053      	strb	r3, [r2, #1]
	sys_put_le16(val >> 16, &dst[2]);
    3740:	0c00      	lsrs	r0, r0, #16
	dst[1] = val >> 8;
    3742:	f3c1 2307 	ubfx	r3, r1, #8, #8
	dst[0] = val;
    3746:	7111      	strb	r1, [r2, #4]
	sys_put_le16(val >> 16, &dst[2]);
    3748:	0c09      	lsrs	r1, r1, #16
	dst[0] = val;
    374a:	7090      	strb	r0, [r2, #2]
    374c:	7191      	strb	r1, [r2, #6]
	dst[1] = val >> 8;
    374e:	0a00      	lsrs	r0, r0, #8
    3750:	0a09      	lsrs	r1, r1, #8
    3752:	70d0      	strb	r0, [r2, #3]
    3754:	7153      	strb	r3, [r2, #5]
    3756:	71d1      	strb	r1, [r2, #7]
    3758:	4770      	bx	lr
	...

0000375c <bt_hci_cmd_create>:
{
    375c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3760:	4680      	mov	r8, r0
    3762:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    3764:	4813      	ldr	r0, [pc, #76]	; (37b4 <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    3766:	4d14      	ldr	r5, [pc, #80]	; (37b8 <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    3768:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    376c:	f014 f9a0 	bl	17ab0 <net_buf_alloc_fixed>
    3770:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3772:	f100 0608 	add.w	r6, r0, #8
    3776:	2100      	movs	r1, #0
    3778:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    377a:	2700      	movs	r7, #0
    377c:	f014 f9b7 	bl	17aee <net_buf_simple_reserve>
    3780:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    3782:	4620      	mov	r0, r4
    3784:	f014 f906 	bl	17994 <net_buf_id>
    3788:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    378c:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    3790:	4620      	mov	r0, r4
    3792:	f014 f8ff 	bl	17994 <net_buf_id>
    3796:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    379a:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    379c:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    379e:	4630      	mov	r0, r6
    37a0:	f014 fa14 	bl	17bcc <net_buf_simple_add>
	hdr->param_len = param_len;
    37a4:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    37a8:	f8a0 8000 	strh.w	r8, [r0]
}
    37ac:	4620      	mov	r0, r4
    37ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    37b2:	bf00      	nop
    37b4:	2000eaec 	.word	0x2000eaec
    37b8:	2000037c 	.word	0x2000037c

000037bc <bt_hci_cmd_send_sync>:
{
    37bc:	b570      	push	{r4, r5, r6, lr}
    37be:	4615      	mov	r5, r2
    37c0:	b086      	sub	sp, #24
	if (!buf) {
    37c2:	460c      	mov	r4, r1
    37c4:	b919      	cbnz	r1, 37ce <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    37c6:	f7ff ffc9 	bl	375c <bt_hci_cmd_create>
		if (!buf) {
    37ca:	4604      	mov	r4, r0
    37cc:	b368      	cbz	r0, 382a <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    37ce:	2201      	movs	r2, #1
    37d0:	2100      	movs	r1, #0
    37d2:	4668      	mov	r0, sp
    37d4:	f01c f830 	bl	1f838 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    37d8:	4620      	mov	r0, r4
    37da:	f014 f8db 	bl	17994 <net_buf_id>
    37de:	4e14      	ldr	r6, [pc, #80]	; (3830 <bt_hci_cmd_send_sync+0x74>)
    37e0:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    37e4:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    37e8:	4620      	mov	r0, r4
    37ea:	f014 f9bf 	bl	17b6c <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    37ee:	4621      	mov	r1, r4
    37f0:	4810      	ldr	r0, [pc, #64]	; (3834 <bt_hci_cmd_send_sync+0x78>)
    37f2:	f014 f980 	bl	17af6 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    37f6:	f242 7110 	movw	r1, #10000	; 0x2710
    37fa:	4668      	mov	r0, sp
    37fc:	f01c f886 	bl	1f90c <_impl_k_sem_take>
	if (cmd(buf)->status) {
    3800:	4620      	mov	r0, r4
    3802:	f014 f8c7 	bl	17994 <net_buf_id>
    3806:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    380a:	b130      	cbz	r0, 381a <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    380c:	4620      	mov	r0, r4
    380e:	f014 f97f 	bl	17b10 <net_buf_unref>
		err = -EIO;
    3812:	f06f 0004 	mvn.w	r0, #4
}
    3816:	b006      	add	sp, #24
    3818:	bd70      	pop	{r4, r5, r6, pc}
		if (rsp) {
    381a:	b10d      	cbz	r5, 3820 <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    381c:	602c      	str	r4, [r5, #0]
    381e:	e7fa      	b.n	3816 <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    3820:	4620      	mov	r0, r4
    3822:	f014 f975 	bl	17b10 <net_buf_unref>
		err = 0;
    3826:	4628      	mov	r0, r5
    3828:	e7f5      	b.n	3816 <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    382a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    382e:	e7f2      	b.n	3816 <bt_hci_cmd_send_sync+0x5a>
    3830:	2000037c 	.word	0x2000037c
    3834:	2000ddcc 	.word	0x2000ddcc

00003838 <set_random_address>:
{
    3838:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    383a:	4d15      	ldr	r5, [pc, #84]	; (3890 <set_random_address+0x58>)
    383c:	2206      	movs	r2, #6
    383e:	f105 0108 	add.w	r1, r5, #8
    3842:	4606      	mov	r6, r0
    3844:	f7fd f824 	bl	890 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    3848:	4604      	mov	r4, r0
    384a:	b1d8      	cbz	r0, 3884 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    384c:	2106      	movs	r1, #6
    384e:	f242 0005 	movw	r0, #8197	; 0x2005
    3852:	f7ff ff83 	bl	375c <bt_hci_cmd_create>
	if (!buf) {
    3856:	4604      	mov	r4, r0
    3858:	b1b0      	cbz	r0, 3888 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    385a:	2206      	movs	r2, #6
    385c:	4631      	mov	r1, r6
    385e:	3008      	adds	r0, #8
    3860:	f014 f9ba 	bl	17bd8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    3864:	4621      	mov	r1, r4
    3866:	2200      	movs	r2, #0
    3868:	f242 0005 	movw	r0, #8197	; 0x2005
    386c:	f7ff ffa6 	bl	37bc <bt_hci_cmd_send_sync>
	if (err) {
    3870:	4604      	mov	r4, r0
    3872:	b938      	cbnz	r0, 3884 <set_random_address+0x4c>
	memcpy(dst, src, sizeof(*dst));
    3874:	2206      	movs	r2, #6
    3876:	4631      	mov	r1, r6
    3878:	f105 0008 	add.w	r0, r5, #8
    387c:	f7fd f835 	bl	8ea <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    3880:	2301      	movs	r3, #1
    3882:	71eb      	strb	r3, [r5, #7]
}
    3884:	4620      	mov	r0, r4
    3886:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    3888:	f06f 0436 	mvn.w	r4, #54	; 0x36
    388c:	e7fa      	b.n	3884 <set_random_address+0x4c>
    388e:	bf00      	nop
    3890:	2000dcf8 	.word	0x2000dcf8

00003894 <le_set_private_addr>:
{
    3894:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    3896:	2106      	movs	r1, #6
    3898:	4668      	mov	r0, sp
    389a:	f008 f8e9 	bl	ba70 <bt_rand>
	if (err) {
    389e:	b940      	cbnz	r0, 38b2 <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    38a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    38a4:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    38a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    38aa:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    38ae:	f7ff ffc3 	bl	3838 <set_random_address>
}
    38b2:	b003      	add	sp, #12
    38b4:	f85d fb04 	ldr.w	pc, [sp], #4

000038b8 <hci_id_add>:
{
    38b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38ba:	4607      	mov	r7, r0
    38bc:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    38be:	f242 0027 	movw	r0, #8231	; 0x2027
    38c2:	2127      	movs	r1, #39	; 0x27
    38c4:	f7ff ff4a 	bl	375c <bt_hci_cmd_create>
	if (!buf) {
    38c8:	4604      	mov	r4, r0
    38ca:	b1d0      	cbz	r0, 3902 <hci_id_add+0x4a>
	cp = net_buf_add(buf, sizeof(*cp));
    38cc:	2127      	movs	r1, #39	; 0x27
    38ce:	3008      	adds	r0, #8
    38d0:	f014 f97c 	bl	17bcc <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    38d4:	4639      	mov	r1, r7
	cp = net_buf_add(buf, sizeof(*cp));
    38d6:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    38d8:	f7ff fe98 	bl	360c <bt_addr_le_copy>
	memcpy(cp->peer_irk, val, 16);
    38dc:	4631      	mov	r1, r6
    38de:	2210      	movs	r2, #16
    38e0:	1de8      	adds	r0, r5, #7
    38e2:	f7fd f802 	bl	8ea <memcpy>
	memset(cp->local_irk, 0, 16);
    38e6:	2210      	movs	r2, #16
    38e8:	2100      	movs	r1, #0
    38ea:	f105 0017 	add.w	r0, r5, #23
    38ee:	f7fd f828 	bl	942 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    38f2:	4621      	mov	r1, r4
    38f4:	2200      	movs	r2, #0
    38f6:	f242 0027 	movw	r0, #8231	; 0x2027
}
    38fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    38fe:	f7ff bf5d 	b.w	37bc <bt_hci_cmd_send_sync>
}
    3902:	f06f 0036 	mvn.w	r0, #54	; 0x36
    3906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003908 <keys_add_id>:
	hci_id_add(&keys->addr, keys->irk.val);
    3908:	f100 0130 	add.w	r1, r0, #48	; 0x30
    390c:	f7ff bfd4 	b.w	38b8 <hci_id_add>

00003910 <addr_res_enable>:
{
    3910:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
    3912:	2101      	movs	r1, #1
{
    3914:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
    3916:	f242 002d 	movw	r0, #8237	; 0x202d
    391a:	f7ff ff1f 	bl	375c <bt_hci_cmd_create>
	if (!buf) {
    391e:	4604      	mov	r4, r0
    3920:	b158      	cbz	r0, 393a <addr_res_enable+0x2a>
	net_buf_add_u8(buf, enable);
    3922:	4629      	mov	r1, r5
    3924:	3008      	adds	r0, #8
    3926:	f014 f960 	bl	17bea <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
    392a:	4621      	mov	r1, r4
    392c:	2200      	movs	r2, #0
    392e:	f242 002d 	movw	r0, #8237	; 0x202d
}
    3932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
    3936:	f7ff bf41 	b.w	37bc <bt_hci_cmd_send_sync>
}
    393a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    393e:	bd38      	pop	{r3, r4, r5, pc}

00003940 <set_le_scan_enable>:
{
    3940:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    3942:	2102      	movs	r1, #2
{
    3944:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    3946:	f242 000c 	movw	r0, #8204	; 0x200c
    394a:	f7ff ff07 	bl	375c <bt_hci_cmd_create>
	if (!buf) {
    394e:	4604      	mov	r4, r0
    3950:	b328      	cbz	r0, 399e <set_le_scan_enable+0x5e>
	cp = net_buf_add(buf, sizeof(*cp));
    3952:	2102      	movs	r1, #2
    3954:	3008      	adds	r0, #8
    3956:	f014 f939 	bl	17bcc <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    395a:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    395c:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    395e:	d115      	bne.n	398c <set_le_scan_enable+0x4c>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    3960:	210a      	movs	r1, #10
    3962:	4810      	ldr	r0, [pc, #64]	; (39a4 <set_le_scan_enable+0x64>)
    3964:	f7ff fe66 	bl	3634 <atomic_test_bit>
    3968:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    396a:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    396c:	4621      	mov	r1, r4
    396e:	2200      	movs	r2, #0
    3970:	f242 000c 	movw	r0, #8204	; 0x200c
    3974:	f7ff ff22 	bl	37bc <bt_hci_cmd_send_sync>
	if (err) {
    3978:	4604      	mov	r4, r0
    397a:	b928      	cbnz	r0, 3988 <set_le_scan_enable+0x48>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    397c:	2d01      	cmp	r5, #1
    397e:	d108      	bne.n	3992 <set_le_scan_enable+0x52>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3980:	2180      	movs	r1, #128	; 0x80
    3982:	4808      	ldr	r0, [pc, #32]	; (39a4 <set_le_scan_enable+0x64>)
    3984:	f7ff fe45 	bl	3612 <atomic_or>
}
    3988:	4620      	mov	r0, r4
    398a:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    398c:	2300      	movs	r3, #0
    398e:	7043      	strb	r3, [r0, #1]
    3990:	e7eb      	b.n	396a <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3992:	f06f 0180 	mvn.w	r1, #128	; 0x80
    3996:	4803      	ldr	r0, [pc, #12]	; (39a4 <set_le_scan_enable+0x64>)
    3998:	f7ff fe59 	bl	364e <atomic_and>
    399c:	e7f4      	b.n	3988 <set_le_scan_enable+0x48>
		return -ENOBUFS;
    399e:	f06f 0436 	mvn.w	r4, #54	; 0x36
    39a2:	e7f1      	b.n	3988 <set_le_scan_enable+0x48>
    39a4:	2000dd68 	.word	0x2000dd68

000039a8 <set_advertise_enable>:
{
    39a8:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    39aa:	2101      	movs	r1, #1
{
    39ac:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    39ae:	f242 000a 	movw	r0, #8202	; 0x200a
    39b2:	f7ff fed3 	bl	375c <bt_hci_cmd_create>
	if (!buf) {
    39b6:	4604      	mov	r4, r0
    39b8:	b1d8      	cbz	r0, 39f2 <set_advertise_enable+0x4a>
    39ba:	3008      	adds	r0, #8
	if (enable) {
    39bc:	b18d      	cbz	r5, 39e2 <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    39be:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    39c0:	f014 f913 	bl	17bea <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    39c4:	4621      	mov	r1, r4
    39c6:	2200      	movs	r2, #0
    39c8:	f242 000a 	movw	r0, #8202	; 0x200a
    39cc:	f7ff fef6 	bl	37bc <bt_hci_cmd_send_sync>
	if (err) {
    39d0:	4604      	mov	r4, r0
    39d2:	b920      	cbnz	r0, 39de <set_advertise_enable+0x36>
	if (enable) {
    39d4:	b13d      	cbz	r5, 39e6 <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    39d6:	2120      	movs	r1, #32
    39d8:	4807      	ldr	r0, [pc, #28]	; (39f8 <set_advertise_enable+0x50>)
    39da:	f7ff fe1a 	bl	3612 <atomic_or>
}
    39de:	4620      	mov	r0, r4
    39e0:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    39e2:	4629      	mov	r1, r5
    39e4:	e7ec      	b.n	39c0 <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    39e6:	f06f 0120 	mvn.w	r1, #32
    39ea:	4803      	ldr	r0, [pc, #12]	; (39f8 <set_advertise_enable+0x50>)
    39ec:	f7ff fe2f 	bl	364e <atomic_and>
    39f0:	e7f5      	b.n	39de <set_advertise_enable+0x36>
		return -ENOBUFS;
    39f2:	f06f 0436 	mvn.w	r4, #54	; 0x36
    39f6:	e7f2      	b.n	39de <set_advertise_enable+0x36>
    39f8:	2000dd68 	.word	0x2000dd68

000039fc <set_ad>:

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    39fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3a00:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    3a02:	2120      	movs	r1, #32
{
    3a04:	4607      	mov	r7, r0
    3a06:	4690      	mov	r8, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    3a08:	f7ff fea8 	bl	375c <bt_hci_cmd_create>
	if (!buf) {
    3a0c:	4606      	mov	r6, r0
    3a0e:	2800      	cmp	r0, #0
    3a10:	d03c      	beq.n	3a8c <set_ad+0x90>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    3a12:	2120      	movs	r1, #32
    3a14:	3008      	adds	r0, #8
    3a16:	f014 f8d9 	bl	17bcc <net_buf_simple_add>

	memset(set_data, 0, sizeof(*set_data));
    3a1a:	2220      	movs	r2, #32
    3a1c:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    3a1e:	4605      	mov	r5, r0
	memset(set_data, 0, sizeof(*set_data));
    3a20:	f7fc ff8f 	bl	942 <memset>

	for (i = 0; i < ad_len; i++) {
    3a24:	f04f 0900 	mov.w	r9, #0
    3a28:	45c1      	cmp	r9, r8
    3a2a:	d106      	bne.n	3a3a <set_ad+0x3e>
		memcpy(&set_data->data[set_data->len], ad[i].data,
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    3a2c:	4631      	mov	r1, r6
    3a2e:	4638      	mov	r0, r7
    3a30:	2200      	movs	r2, #0
}
    3a32:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    3a36:	f7ff bec1 	b.w	37bc <bt_hci_cmd_send_sync>
		if (set_data->len + ad[i].data_len + 2 > 31) {
    3a3a:	7862      	ldrb	r2, [r4, #1]
    3a3c:	782b      	ldrb	r3, [r5, #0]
    3a3e:	18d1      	adds	r1, r2, r3
    3a40:	3102      	adds	r1, #2
    3a42:	291f      	cmp	r1, #31
    3a44:	f104 0408 	add.w	r4, r4, #8
    3a48:	dd06      	ble.n	3a58 <set_ad+0x5c>
			net_buf_unref(buf);
    3a4a:	4630      	mov	r0, r6
    3a4c:	f014 f860 	bl	17b10 <net_buf_unref>
			return -EINVAL;
    3a50:	f06f 0015 	mvn.w	r0, #21
    3a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    3a58:	18e9      	adds	r1, r5, r3
    3a5a:	1c50      	adds	r0, r2, #1
    3a5c:	7048      	strb	r0, [r1, #1]
		set_data->data[set_data->len++] = ad[i].type;
    3a5e:	1c98      	adds	r0, r3, #2
    3a60:	b2c0      	uxtb	r0, r0
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    3a62:	3301      	adds	r3, #1
		set_data->data[set_data->len++] = ad[i].type;
    3a64:	7028      	strb	r0, [r5, #0]
    3a66:	fa55 f383 	uxtab	r3, r5, r3
    3a6a:	f814 1c08 	ldrb.w	r1, [r4, #-8]
    3a6e:	7059      	strb	r1, [r3, #1]
		memcpy(&set_data->data[set_data->len], ad[i].data,
    3a70:	3001      	adds	r0, #1
    3a72:	f854 1c04 	ldr.w	r1, [r4, #-4]
    3a76:	4428      	add	r0, r5
    3a78:	f7fc ff37 	bl	8ea <memcpy>
		set_data->len += ad[i].data_len;
    3a7c:	782b      	ldrb	r3, [r5, #0]
    3a7e:	f814 2c07 	ldrb.w	r2, [r4, #-7]
    3a82:	4413      	add	r3, r2
    3a84:	702b      	strb	r3, [r5, #0]
	for (i = 0; i < ad_len; i++) {
    3a86:	f109 0901 	add.w	r9, r9, #1
    3a8a:	e7cd      	b.n	3a28 <set_ad+0x2c>
		return -ENOBUFS;
    3a8c:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    3a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00003a94 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    3a94:	8802      	ldrh	r2, [r0, #0]
    3a96:	8843      	ldrh	r3, [r0, #2]
    3a98:	429a      	cmp	r2, r3
{
    3a9a:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    3a9c:	d818      	bhi.n	3ad0 <bt_le_conn_params_valid+0x3c>
    3a9e:	2a05      	cmp	r2, #5
    3aa0:	d916      	bls.n	3ad0 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    3aa2:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    3aa6:	d813      	bhi.n	3ad0 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    3aa8:	8884      	ldrh	r4, [r0, #4]
    3aaa:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    3aae:	d20f      	bcs.n	3ad0 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    3ab0:	88c1      	ldrh	r1, [r0, #6]
    3ab2:	f1a1 020a 	sub.w	r2, r1, #10
    3ab6:	b292      	uxth	r2, r2
    3ab8:	f640 4076 	movw	r0, #3190	; 0xc76
    3abc:	4282      	cmp	r2, r0
    3abe:	d807      	bhi.n	3ad0 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    3ac0:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    3ac4:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    3ac8:	bfb4      	ite	lt
    3aca:	2001      	movlt	r0, #1
    3acc:	2000      	movge	r0, #0
    3ace:	bd10      	pop	{r4, pc}
		return false;
    3ad0:	2000      	movs	r0, #0
}
    3ad2:	bd10      	pop	{r4, pc}

00003ad4 <bt_id_add>:
{
    3ad4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    3ad8:	4c4c      	ldr	r4, [pc, #304]	; (3c0c <bt_id_add+0x138>)
    3ada:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
{
    3ade:	4606      	mov	r6, r0
    3ae0:	4625      	mov	r5, r4
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    3ae2:	b11b      	cbz	r3, 3aec <bt_id_add+0x18>
    3ae4:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    3ae8:	429a      	cmp	r2, r3
    3aea:	d909      	bls.n	3b00 <bt_id_add+0x2c>
		bt_dev.le.rl_entries++;
    3aec:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
    3af0:	3301      	adds	r3, #1
    3af2:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
		return 0;
    3af6:	2400      	movs	r4, #0
}
    3af8:	4620      	mov	r0, r4
    3afa:	b002      	add	sp, #8
    3afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    3b00:	2102      	movs	r1, #2
    3b02:	2000      	movs	r0, #0
    3b04:	f002 face 	bl	60a4 <bt_conn_lookup_state_le>
	if (conn) {
    3b08:	4680      	mov	r8, r0
    3b0a:	b180      	cbz	r0, 3b2e <bt_id_add+0x5a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3b0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    3b10:	f104 0070 	add.w	r0, r4, #112	; 0x70
    3b14:	f7ff fd7d 	bl	3612 <atomic_or>
    3b18:	2104      	movs	r1, #4
    3b1a:	f106 0008 	add.w	r0, r6, #8
    3b1e:	f7ff fd78 	bl	3612 <atomic_or>
		bt_conn_unref(conn);
    3b22:	4640      	mov	r0, r8
    3b24:	f002 fae0 	bl	60e8 <bt_conn_unref>
		return -EAGAIN;
    3b28:	f06f 040a 	mvn.w	r4, #10
    3b2c:	e7e4      	b.n	3af8 <bt_id_add+0x24>
	adv_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING);
    3b2e:	2105      	movs	r1, #5
    3b30:	f104 0070 	add.w	r0, r4, #112	; 0x70
    3b34:	f7ff fd7e 	bl	3634 <atomic_test_bit>
	if (adv_enabled) {
    3b38:	4607      	mov	r7, r0
    3b3a:	b110      	cbz	r0, 3b42 <bt_id_add+0x6e>
		set_advertise_enable(false);
    3b3c:	4640      	mov	r0, r8
    3b3e:	f7ff ff33 	bl	39a8 <set_advertise_enable>
	scan_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING);
    3b42:	2107      	movs	r1, #7
    3b44:	4832      	ldr	r0, [pc, #200]	; (3c10 <bt_id_add+0x13c>)
    3b46:	f7ff fd75 	bl	3634 <atomic_test_bit>
	if (scan_enabled) {
    3b4a:	4680      	mov	r8, r0
    3b4c:	b110      	cbz	r0, 3b54 <bt_id_add+0x80>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    3b4e:	2000      	movs	r0, #0
    3b50:	f7ff fef6 	bl	3940 <set_le_scan_enable>
	if (bt_dev.le.rl_entries) {
    3b54:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
    3b58:	b99b      	cbnz	r3, 3b82 <bt_id_add+0xae>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    3b5a:	f895 20a5 	ldrb.w	r2, [r5, #165]	; 0xa5
    3b5e:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    3b62:	429a      	cmp	r2, r3
    3b64:	d122      	bne.n	3bac <bt_id_add+0xd8>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    3b66:	2200      	movs	r2, #0
    3b68:	4611      	mov	r1, r2
    3b6a:	f242 0029 	movw	r0, #8233	; 0x2029
    3b6e:	f7ff fe25 	bl	37bc <bt_hci_cmd_send_sync>
		if (err) {
    3b72:	4604      	mov	r4, r0
    3b74:	b958      	cbnz	r0, 3b8e <bt_id_add+0xba>
		bt_dev.le.rl_entries++;
    3b76:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
    3b7a:	3301      	adds	r3, #1
    3b7c:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
    3b80:	e005      	b.n	3b8e <bt_id_add+0xba>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    3b82:	2000      	movs	r0, #0
    3b84:	f7ff fec4 	bl	3910 <addr_res_enable>
		if (err) {
    3b88:	4604      	mov	r4, r0
    3b8a:	2800      	cmp	r0, #0
    3b8c:	d0e5      	beq.n	3b5a <bt_id_add+0x86>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    3b8e:	2001      	movs	r0, #1
    3b90:	f7ff febe 	bl	3910 <addr_res_enable>
	if (scan_enabled) {
    3b94:	f1b8 0f00 	cmp.w	r8, #0
    3b98:	d002      	beq.n	3ba0 <bt_id_add+0xcc>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    3b9a:	2001      	movs	r0, #1
    3b9c:	f7ff fed0 	bl	3940 <set_le_scan_enable>
	if (adv_enabled) {
    3ba0:	2f00      	cmp	r7, #0
    3ba2:	d0a9      	beq.n	3af8 <bt_id_add+0x24>
		set_advertise_enable(true);
    3ba4:	2001      	movs	r0, #1
    3ba6:	f7ff feff 	bl	39a8 <set_advertise_enable>
    3baa:	e7a5      	b.n	3af8 <bt_id_add+0x24>
	err = hci_id_add(&keys->addr, keys->irk.val);
    3bac:	f106 0130 	add.w	r1, r6, #48	; 0x30
    3bb0:	4630      	mov	r0, r6
    3bb2:	f7ff fe81 	bl	38b8 <hci_id_add>
	if (err) {
    3bb6:	4604      	mov	r4, r0
    3bb8:	2800      	cmp	r0, #0
    3bba:	d1e8      	bne.n	3b8e <bt_id_add+0xba>
	bt_dev.le.rl_entries++;
    3bbc:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
    3bc0:	3301      	adds	r3, #1
    3bc2:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    3bc6:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
    3bca:	075b      	lsls	r3, r3, #29
    3bcc:	d5df      	bpl.n	3b8e <bt_id_add+0xba>
	bt_addr_le_copy(&cp.id_addr, addr);
    3bce:	4631      	mov	r1, r6
    3bd0:	4668      	mov	r0, sp
    3bd2:	f7ff fd1b 	bl	360c <bt_addr_le_copy>
	cp.mode = mode;
    3bd6:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    3bd8:	2108      	movs	r1, #8
    3bda:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    3bde:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    3be2:	f7ff fdbb 	bl	375c <bt_hci_cmd_create>
	if (!buf) {
    3be6:	4605      	mov	r5, r0
    3be8:	b160      	cbz	r0, 3c04 <bt_id_add+0x130>
	net_buf_add_mem(buf, &cp, sizeof(cp));
    3bea:	2208      	movs	r2, #8
    3bec:	4669      	mov	r1, sp
    3bee:	4410      	add	r0, r2
    3bf0:	f013 fff2 	bl	17bd8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    3bf4:	4622      	mov	r2, r4
    3bf6:	4629      	mov	r1, r5
    3bf8:	f242 004e 	movw	r0, #8270	; 0x204e
    3bfc:	f7ff fdde 	bl	37bc <bt_hci_cmd_send_sync>
    3c00:	4604      	mov	r4, r0
    3c02:	e7c4      	b.n	3b8e <bt_id_add+0xba>
		return -ENOBUFS;
    3c04:	f06f 0436 	mvn.w	r4, #54	; 0x36
    3c08:	e7c1      	b.n	3b8e <bt_id_add+0xba>
    3c0a:	bf00      	nop
    3c0c:	2000dcf8 	.word	0x2000dcf8
    3c10:	2000dd68 	.word	0x2000dd68

00003c14 <bt_id_del>:
{
    3c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
    3c18:	4d42      	ldr	r5, [pc, #264]	; (3d24 <bt_id_del+0x110>)
    3c1a:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
{
    3c1e:	4606      	mov	r6, r0
    3c20:	462c      	mov	r4, r5
	if (!bt_dev.le.rl_size ||
    3c22:	b123      	cbz	r3, 3c2e <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    3c24:	f895 20a5 	ldrb.w	r2, [r5, #165]	; 0xa5
    3c28:	3301      	adds	r3, #1
	if (!bt_dev.le.rl_size ||
    3c2a:	429a      	cmp	r2, r3
    3c2c:	dd08      	ble.n	3c40 <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
    3c2e:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    3c32:	3b01      	subs	r3, #1
    3c34:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		return 0;
    3c38:	2500      	movs	r5, #0
}
    3c3a:	4628      	mov	r0, r5
    3c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    3c40:	2102      	movs	r1, #2
    3c42:	2000      	movs	r0, #0
    3c44:	f002 fa2e 	bl	60a4 <bt_conn_lookup_state_le>
	if (conn) {
    3c48:	4680      	mov	r8, r0
    3c4a:	b178      	cbz	r0, 3c6c <bt_id_del+0x58>
    3c4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    3c50:	f105 0070 	add.w	r0, r5, #112	; 0x70
    3c54:	f7ff fcdd 	bl	3612 <atomic_or>
    3c58:	2108      	movs	r1, #8
    3c5a:	1870      	adds	r0, r6, r1
    3c5c:	f7ff fcd9 	bl	3612 <atomic_or>
		bt_conn_unref(conn);
    3c60:	4640      	mov	r0, r8
    3c62:	f002 fa41 	bl	60e8 <bt_conn_unref>
		return -EAGAIN;
    3c66:	f06f 050a 	mvn.w	r5, #10
    3c6a:	e7e6      	b.n	3c3a <bt_id_del+0x26>
	adv_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING);
    3c6c:	2105      	movs	r1, #5
    3c6e:	f105 0070 	add.w	r0, r5, #112	; 0x70
    3c72:	f7ff fcdf 	bl	3634 <atomic_test_bit>
	if (adv_enabled) {
    3c76:	4607      	mov	r7, r0
    3c78:	b110      	cbz	r0, 3c80 <bt_id_del+0x6c>
		set_advertise_enable(false);
    3c7a:	4640      	mov	r0, r8
    3c7c:	f7ff fe94 	bl	39a8 <set_advertise_enable>
	scan_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING);
    3c80:	2107      	movs	r1, #7
    3c82:	4829      	ldr	r0, [pc, #164]	; (3d28 <bt_id_del+0x114>)
    3c84:	f7ff fcd6 	bl	3634 <atomic_test_bit>
	if (scan_enabled) {
    3c88:	4680      	mov	r8, r0
    3c8a:	b110      	cbz	r0, 3c92 <bt_id_del+0x7e>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    3c8c:	2000      	movs	r0, #0
    3c8e:	f7ff fe57 	bl	3940 <set_le_scan_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    3c92:	2000      	movs	r0, #0
    3c94:	f7ff fe3c 	bl	3910 <addr_res_enable>
	if (err) {
    3c98:	4605      	mov	r5, r0
    3c9a:	b980      	cbnz	r0, 3cbe <bt_id_del+0xaa>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    3c9c:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    3ca0:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
    3ca4:	429a      	cmp	r2, r3
    3ca6:	d21c      	bcs.n	3ce2 <bt_id_del+0xce>
		bt_dev.le.rl_entries--;
    3ca8:	3b01      	subs	r3, #1
    3caa:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		keys->keys &= ~BT_KEYS_IRK;
    3cae:	89b3      	ldrh	r3, [r6, #12]
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id);
    3cb0:	491e      	ldr	r1, [pc, #120]	; (3d2c <bt_id_del+0x118>)
		keys->keys &= ~BT_KEYS_IRK;
    3cb2:	f023 0302 	bic.w	r3, r3, #2
    3cb6:	81b3      	strh	r3, [r6, #12]
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id);
    3cb8:	2002      	movs	r0, #2
    3cba:	f006 fe21 	bl	a900 <bt_keys_foreach>
	if (bt_dev.le.rl_entries) {
    3cbe:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    3cc2:	b113      	cbz	r3, 3cca <bt_id_del+0xb6>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    3cc4:	2001      	movs	r0, #1
    3cc6:	f7ff fe23 	bl	3910 <addr_res_enable>
	if (scan_enabled) {
    3cca:	f1b8 0f00 	cmp.w	r8, #0
    3cce:	d002      	beq.n	3cd6 <bt_id_del+0xc2>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    3cd0:	2001      	movs	r0, #1
    3cd2:	f7ff fe35 	bl	3940 <set_le_scan_enable>
	if (adv_enabled) {
    3cd6:	2f00      	cmp	r7, #0
    3cd8:	d0af      	beq.n	3c3a <bt_id_del+0x26>
		set_advertise_enable(true);
    3cda:	2001      	movs	r0, #1
    3cdc:	f7ff fe64 	bl	39a8 <set_advertise_enable>
    3ce0:	e7ab      	b.n	3c3a <bt_id_del+0x26>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    3ce2:	2107      	movs	r1, #7
    3ce4:	f242 0028 	movw	r0, #8232	; 0x2028
    3ce8:	f7ff fd38 	bl	375c <bt_hci_cmd_create>
	if (!buf) {
    3cec:	4681      	mov	r9, r0
    3cee:	b1a8      	cbz	r0, 3d1c <bt_id_del+0x108>
	cp = net_buf_add(buf, sizeof(*cp));
    3cf0:	2107      	movs	r1, #7
    3cf2:	3008      	adds	r0, #8
    3cf4:	f013 ff6a 	bl	17bcc <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, &keys->addr);
    3cf8:	4631      	mov	r1, r6
    3cfa:	f7ff fc87 	bl	360c <bt_addr_le_copy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    3cfe:	462a      	mov	r2, r5
    3d00:	4649      	mov	r1, r9
    3d02:	f242 0028 	movw	r0, #8232	; 0x2028
    3d06:	f7ff fd59 	bl	37bc <bt_hci_cmd_send_sync>
	if (err) {
    3d0a:	4605      	mov	r5, r0
    3d0c:	2800      	cmp	r0, #0
    3d0e:	d1d6      	bne.n	3cbe <bt_id_del+0xaa>
	bt_dev.le.rl_entries--;
    3d10:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    3d14:	3b01      	subs	r3, #1
    3d16:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
    3d1a:	e7d0      	b.n	3cbe <bt_id_del+0xaa>
		err = -ENOBUFS;
    3d1c:	f06f 0536 	mvn.w	r5, #54	; 0x36
    3d20:	e7cd      	b.n	3cbe <bt_id_del+0xaa>
    3d22:	bf00      	nop
    3d24:	2000dcf8 	.word	0x2000dcf8
    3d28:	2000dd68 	.word	0x2000dd68
    3d2c:	00003909 	.word	0x00003909

00003d30 <update_pending_id>:
{
    3d30:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_and_clear_bit(keys->flags, BT_KEYS_ID_PENDING_ADD)) {
    3d32:	f100 0508 	add.w	r5, r0, #8
{
    3d36:	4604      	mov	r4, r0
	if (atomic_test_and_clear_bit(keys->flags, BT_KEYS_ID_PENDING_ADD)) {
    3d38:	2102      	movs	r1, #2
    3d3a:	4628      	mov	r0, r5
    3d3c:	f7ff fc98 	bl	3670 <atomic_test_and_clear_bit>
    3d40:	b120      	cbz	r0, 3d4c <update_pending_id+0x1c>
		bt_id_add(keys);
    3d42:	4620      	mov	r0, r4
}
    3d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_id_add(keys);
    3d48:	f7ff bec4 	b.w	3ad4 <bt_id_add>
	if (atomic_test_and_clear_bit(keys->flags, BT_KEYS_ID_PENDING_DEL)) {
    3d4c:	2103      	movs	r1, #3
    3d4e:	4628      	mov	r0, r5
    3d50:	f7ff fc8e 	bl	3670 <atomic_test_and_clear_bit>
    3d54:	b120      	cbz	r0, 3d60 <update_pending_id+0x30>
		bt_id_del(keys);
    3d56:	4620      	mov	r0, r4
}
    3d58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_id_del(keys);
    3d5c:	f7ff bf5a 	b.w	3c14 <bt_id_del>
    3d60:	bd38      	pop	{r3, r4, r5, pc}

00003d62 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    3d62:	2301      	movs	r3, #1
{
    3d64:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    3d66:	2106      	movs	r1, #6
{
    3d68:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    3d6a:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    3d6e:	f007 fe7f 	bl	ba70 <bt_rand>
	if (err) {
    3d72:	b918      	cbnz	r0, 3d7c <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    3d74:	79a3      	ldrb	r3, [r4, #6]
    3d76:	f063 033f 	orn	r3, r3, #63	; 0x3f
    3d7a:	71a3      	strb	r3, [r4, #6]
}
    3d7c:	bd10      	pop	{r4, pc}
	...

00003d80 <bt_send>:
	return bt_dev.drv->send(buf);
    3d80:	4b02      	ldr	r3, [pc, #8]	; (3d8c <bt_send+0xc>)
    3d82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3d86:	68db      	ldr	r3, [r3, #12]
    3d88:	4718      	bx	r3
    3d8a:	bf00      	nop
    3d8c:	2000dcf8 	.word	0x2000dcf8

00003d90 <bt_hci_cmd_send>:
{
    3d90:	b538      	push	{r3, r4, r5, lr}
    3d92:	4605      	mov	r5, r0
	if (!buf) {
    3d94:	460c      	mov	r4, r1
    3d96:	b919      	cbnz	r1, 3da0 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    3d98:	f7ff fce0 	bl	375c <bt_hci_cmd_create>
		if (!buf) {
    3d9c:	4604      	mov	r4, r0
    3d9e:	b198      	cbz	r0, 3dc8 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    3da0:	f640 4335 	movw	r3, #3125	; 0xc35
    3da4:	429d      	cmp	r5, r3
    3da6:	d109      	bne.n	3dbc <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
    3da8:	4620      	mov	r0, r4
    3daa:	f7ff ffe9 	bl	3d80 <bt_send>
		if (err) {
    3dae:	4605      	mov	r5, r0
    3db0:	b110      	cbz	r0, 3db8 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
    3db2:	4620      	mov	r0, r4
    3db4:	f013 feac 	bl	17b10 <net_buf_unref>
}
    3db8:	4628      	mov	r0, r5
    3dba:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    3dbc:	4621      	mov	r1, r4
    3dbe:	4804      	ldr	r0, [pc, #16]	; (3dd0 <bt_hci_cmd_send+0x40>)
    3dc0:	f013 fe99 	bl	17af6 <net_buf_put>
	return 0;
    3dc4:	2500      	movs	r5, #0
    3dc6:	e7f7      	b.n	3db8 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
    3dc8:	f06f 0536 	mvn.w	r5, #54	; 0x36
    3dcc:	e7f4      	b.n	3db8 <bt_hci_cmd_send+0x28>
    3dce:	bf00      	nop
    3dd0:	2000ddcc 	.word	0x2000ddcc

00003dd4 <start_le_scan>:
{
    3dd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3dd6:	4605      	mov	r5, r0
    3dd8:	460e      	mov	r6, r1
    3dda:	4614      	mov	r4, r2
	memset(&set_param, 0, sizeof(set_param));
    3ddc:	2100      	movs	r1, #0
    3dde:	2207      	movs	r2, #7
    3de0:	4668      	mov	r0, sp
    3de2:	f7fc fdae 	bl	942 <memset>
		set_param.addr_type =  bt_dev.id_addr.type;
    3de6:	4821      	ldr	r0, [pc, #132]	; (3e6c <start_le_scan+0x98>)
	set_param.scan_type = scan_type;
    3de8:	f88d 5000 	strb.w	r5, [sp]
	set_param.filter_policy = 0x00;
    3dec:	2300      	movs	r3, #0
    3dee:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    3df2:	2d01      	cmp	r5, #1
		set_param.addr_type =  bt_dev.id_addr.type;
    3df4:	7803      	ldrb	r3, [r0, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    3df6:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    3dfa:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr.type;
    3dfe:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    3e02:	d10a      	bne.n	3e1a <start_le_scan+0x46>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    3e04:	2105      	movs	r1, #5
    3e06:	3070      	adds	r0, #112	; 0x70
    3e08:	f7ff fc14 	bl	3634 <atomic_test_bit>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    3e0c:	b928      	cbnz	r0, 3e1a <start_le_scan+0x46>
			err = le_set_private_addr();
    3e0e:	f7ff fd41 	bl	3894 <le_set_private_addr>
			if (err) {
    3e12:	4604      	mov	r4, r0
    3e14:	b9f0      	cbnz	r0, 3e54 <start_le_scan+0x80>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    3e16:	f88d 5005 	strb.w	r5, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    3e1a:	2107      	movs	r1, #7
    3e1c:	f242 000b 	movw	r0, #8203	; 0x200b
    3e20:	f7ff fc9c 	bl	375c <bt_hci_cmd_create>
	if (!buf) {
    3e24:	4604      	mov	r4, r0
    3e26:	b1f0      	cbz	r0, 3e66 <start_le_scan+0x92>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    3e28:	2207      	movs	r2, #7
    3e2a:	4669      	mov	r1, sp
    3e2c:	3008      	adds	r0, #8
    3e2e:	f013 fed3 	bl	17bd8 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    3e32:	4621      	mov	r1, r4
    3e34:	f242 000b 	movw	r0, #8203	; 0x200b
    3e38:	f7ff ffaa 	bl	3d90 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    3e3c:	2001      	movs	r0, #1
    3e3e:	f7ff fd7f 	bl	3940 <set_le_scan_enable>
	if (err) {
    3e42:	4604      	mov	r4, r0
    3e44:	b930      	cbnz	r0, 3e54 <start_le_scan+0x80>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    3e46:	2d01      	cmp	r5, #1
    3e48:	d107      	bne.n	3e5a <start_le_scan+0x86>
    3e4a:	f44f 7100 	mov.w	r1, #512	; 0x200
    3e4e:	4808      	ldr	r0, [pc, #32]	; (3e70 <start_le_scan+0x9c>)
    3e50:	f7ff fbdf 	bl	3612 <atomic_or>
}
    3e54:	4620      	mov	r0, r4
    3e56:	b002      	add	sp, #8
    3e58:	bd70      	pop	{r4, r5, r6, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3e5a:	f46f 7100 	mvn.w	r1, #512	; 0x200
    3e5e:	4804      	ldr	r0, [pc, #16]	; (3e70 <start_le_scan+0x9c>)
    3e60:	f7ff fbf5 	bl	364e <atomic_and>
    3e64:	e7f6      	b.n	3e54 <start_le_scan+0x80>
		return -ENOBUFS;
    3e66:	f06f 0436 	mvn.w	r4, #54	; 0x36
    3e6a:	e7f3      	b.n	3e54 <start_le_scan+0x80>
    3e6c:	2000dcf8 	.word	0x2000dcf8
    3e70:	2000dd68 	.word	0x2000dd68

00003e74 <bt_le_scan_update>:
{
    3e74:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3e76:	2108      	movs	r1, #8
{
    3e78:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3e7a:	4816      	ldr	r0, [pc, #88]	; (3ed4 <bt_le_scan_update+0x60>)
    3e7c:	f7ff fbda 	bl	3634 <atomic_test_bit>
    3e80:	4602      	mov	r2, r0
    3e82:	b108      	cbz	r0, 3e88 <bt_le_scan_update+0x14>
		return 0;
    3e84:	2000      	movs	r0, #0
    3e86:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    3e88:	2107      	movs	r1, #7
    3e8a:	4812      	ldr	r0, [pc, #72]	; (3ed4 <bt_le_scan_update+0x60>)
    3e8c:	f7ff fbd2 	bl	3634 <atomic_test_bit>
    3e90:	b9d0      	cbnz	r0, 3ec8 <bt_le_scan_update+0x54>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    3e92:	2101      	movs	r1, #1
    3e94:	2000      	movs	r0, #0
    3e96:	f002 f905 	bl	60a4 <bt_conn_lookup_state_le>
		if (!conn) {
    3e9a:	4604      	mov	r4, r0
    3e9c:	2800      	cmp	r0, #0
    3e9e:	d0f1      	beq.n	3e84 <bt_le_scan_update+0x10>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3ea0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    3ea4:	480b      	ldr	r0, [pc, #44]	; (3ed4 <bt_le_scan_update+0x60>)
    3ea6:	f7ff fbb4 	bl	3612 <atomic_or>
		bt_conn_unref(conn);
    3eaa:	4620      	mov	r0, r4
    3eac:	f002 f91c 	bl	60e8 <bt_conn_unref>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    3eb0:	2d00      	cmp	r5, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    3eb2:	bf15      	itete	ne
    3eb4:	2230      	movne	r2, #48	; 0x30
    3eb6:	2212      	moveq	r2, #18
    3eb8:	2160      	movne	r1, #96	; 0x60
    3eba:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    3ebe:	2000      	movs	r0, #0
}
    3ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    3ec4:	f7ff bf86 	b.w	3dd4 <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    3ec8:	4610      	mov	r0, r2
    3eca:	f7ff fd39 	bl	3940 <set_le_scan_enable>
		if (err) {
    3ece:	2800      	cmp	r0, #0
    3ed0:	d0df      	beq.n	3e92 <bt_le_scan_update+0x1e>
    3ed2:	bd38      	pop	{r3, r4, r5, pc}
    3ed4:	2000dd68 	.word	0x2000dd68

00003ed8 <bt_init>:
{
    3ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3edc:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    3ede:	aa04      	add	r2, sp, #16
    3ee0:	2100      	movs	r1, #0
    3ee2:	f640 4003 	movw	r0, #3075	; 0xc03
    3ee6:	f7ff fc69 	bl	37bc <bt_hci_cmd_send_sync>
	if (err) {
    3eea:	4604      	mov	r4, r0
    3eec:	2800      	cmp	r0, #0
    3eee:	f040 81cb 	bne.w	4288 <bt_init+0x3b0>
	u8_t status = buf->data[0];
    3ef2:	9b04      	ldr	r3, [sp, #16]
    3ef4:	689b      	ldr	r3, [r3, #8]
	if (status) {
    3ef6:	781b      	ldrb	r3, [r3, #0]
    3ef8:	b96b      	cbnz	r3, 3f16 <bt_init+0x3e>
	scan_dev_found_cb = NULL;
    3efa:	4ac3      	ldr	r2, [pc, #780]	; (4208 <bt_init+0x330>)
    3efc:	6013      	str	r3, [r2, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3efe:	4bc3      	ldr	r3, [pc, #780]	; (420c <bt_init+0x334>)
    3f00:	f3bf 8f5b 	dmb	ish
    3f04:	2201      	movs	r2, #1
    3f06:	e853 1f00 	ldrex	r1, [r3]
    3f0a:	e843 2000 	strex	r0, r2, [r3]
    3f0e:	2800      	cmp	r0, #0
    3f10:	d1f9      	bne.n	3f06 <bt_init+0x2e>
    3f12:	f3bf 8f5b 	dmb	ish
	net_buf_unref(rsp);
    3f16:	9804      	ldr	r0, [sp, #16]
    3f18:	f013 fdfa 	bl	17b10 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    3f1c:	aa04      	add	r2, sp, #16
    3f1e:	2100      	movs	r1, #0
    3f20:	f241 0003 	movw	r0, #4099	; 0x1003
    3f24:	f7ff fc4a 	bl	37bc <bt_hci_cmd_send_sync>
	if (err) {
    3f28:	4604      	mov	r4, r0
    3f2a:	2800      	cmp	r0, #0
    3f2c:	f040 81ac 	bne.w	4288 <bt_init+0x3b0>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    3f30:	9b04      	ldr	r3, [sp, #16]
    3f32:	4db7      	ldr	r5, [pc, #732]	; (4210 <bt_init+0x338>)
    3f34:	6899      	ldr	r1, [r3, #8]
    3f36:	2208      	movs	r2, #8
    3f38:	3101      	adds	r1, #1
    3f3a:	f105 0016 	add.w	r0, r5, #22
    3f3e:	f7fc fcd4 	bl	8ea <memcpy>
	net_buf_unref(rsp);
    3f42:	9804      	ldr	r0, [sp, #16]
    3f44:	f013 fde4 	bl	17b10 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    3f48:	4621      	mov	r1, r4
    3f4a:	aa04      	add	r2, sp, #16
    3f4c:	f241 0001 	movw	r0, #4097	; 0x1001
    3f50:	f7ff fc34 	bl	37bc <bt_hci_cmd_send_sync>
	if (err) {
    3f54:	4604      	mov	r4, r0
    3f56:	2800      	cmp	r0, #0
    3f58:	f040 8196 	bne.w	4288 <bt_init+0x3b0>
	read_local_ver_complete(rsp);
    3f5c:	9804      	ldr	r0, [sp, #16]
    3f5e:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    3f60:	785a      	ldrb	r2, [r3, #1]
    3f62:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    3f64:	78d9      	ldrb	r1, [r3, #3]
    3f66:	789a      	ldrb	r2, [r3, #2]
    3f68:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3f6c:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    3f6e:	791a      	ldrb	r2, [r3, #4]
    3f70:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    3f72:	7a19      	ldrb	r1, [r3, #8]
    3f74:	79da      	ldrb	r2, [r3, #7]
    3f76:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3f7a:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    3f7c:	795a      	ldrb	r2, [r3, #5]
    3f7e:	799b      	ldrb	r3, [r3, #6]
    3f80:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    3f84:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    3f86:	f013 fdc3 	bl	17b10 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    3f8a:	4621      	mov	r1, r4
    3f8c:	aa04      	add	r2, sp, #16
    3f8e:	f241 0009 	movw	r0, #4105	; 0x1009
    3f92:	f7ff fc13 	bl	37bc <bt_hci_cmd_send_sync>
	if (err) {
    3f96:	4604      	mov	r4, r0
    3f98:	2800      	cmp	r0, #0
    3f9a:	f040 8175 	bne.w	4288 <bt_init+0x3b0>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    3f9e:	9b04      	ldr	r3, [sp, #16]
    3fa0:	6899      	ldr	r1, [r3, #8]
    3fa2:	2206      	movs	r2, #6
    3fa4:	3101      	adds	r1, #1
    3fa6:	1c68      	adds	r0, r5, #1
    3fa8:	f7fc fc9f 	bl	8ea <memcpy>
	net_buf_unref(rsp);
    3fac:	9804      	ldr	r0, [sp, #16]
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    3fae:	702c      	strb	r4, [r5, #0]
	net_buf_unref(rsp);
    3fb0:	f013 fdae 	bl	17b10 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    3fb4:	4621      	mov	r1, r4
    3fb6:	aa04      	add	r2, sp, #16
    3fb8:	f241 0002 	movw	r0, #4098	; 0x1002
    3fbc:	f7ff fbfe 	bl	37bc <bt_hci_cmd_send_sync>
	if (err) {
    3fc0:	4604      	mov	r4, r0
    3fc2:	2800      	cmp	r0, #0
    3fc4:	f040 8160 	bne.w	4288 <bt_init+0x3b0>
	memcpy(bt_dev.supported_commands, rp->commands,
    3fc8:	9b04      	ldr	r3, [sp, #16]
    3fca:	6899      	ldr	r1, [r3, #8]
    3fcc:	2240      	movs	r2, #64	; 0x40
    3fce:	3101      	adds	r1, #1
    3fd0:	f105 001e 	add.w	r0, r5, #30
    3fd4:	f7fc fc89 	bl	8ea <memcpy>
	net_buf_unref(rsp);
    3fd8:	9804      	ldr	r0, [sp, #16]
    3fda:	f013 fd99 	bl	17b10 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    3fde:	7eab      	ldrb	r3, [r5, #26]
    3fe0:	065e      	lsls	r6, r3, #25
    3fe2:	f140 81db 	bpl.w	439c <bt_init+0x4c4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    3fe6:	4621      	mov	r1, r4
    3fe8:	aa04      	add	r2, sp, #16
    3fea:	f242 0003 	movw	r0, #8195	; 0x2003
    3fee:	f7ff fbe5 	bl	37bc <bt_hci_cmd_send_sync>
	if (err) {
    3ff2:	4604      	mov	r4, r0
    3ff4:	2800      	cmp	r0, #0
    3ff6:	f040 8147 	bne.w	4288 <bt_init+0x3b0>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    3ffa:	9b04      	ldr	r3, [sp, #16]
    3ffc:	6899      	ldr	r1, [r3, #8]
    3ffe:	2208      	movs	r2, #8
    4000:	3101      	adds	r1, #1
    4002:	f105 0078 	add.w	r0, r5, #120	; 0x78
    4006:	f7fc fc70 	bl	8ea <memcpy>
	net_buf_unref(rsp);
    400a:	9804      	ldr	r0, [sp, #16]
    400c:	f013 fd80 	bl	17b10 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    4010:	4621      	mov	r1, r4
    4012:	aa04      	add	r2, sp, #16
    4014:	f242 0002 	movw	r0, #8194	; 0x2002
    4018:	f7ff fbd0 	bl	37bc <bt_hci_cmd_send_sync>
	if (err) {
    401c:	4604      	mov	r4, r0
    401e:	2800      	cmp	r0, #0
    4020:	f040 8132 	bne.w	4288 <bt_init+0x3b0>
    4024:	9b04      	ldr	r3, [sp, #16]
    4026:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    4028:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    402c:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    4030:	b142      	cbz	r2, 4044 <bt_init+0x16c>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    4032:	78da      	ldrb	r2, [r3, #3]
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    4034:	2a02      	cmp	r2, #2
    4036:	bf28      	it	cs
    4038:	2202      	movcs	r2, #2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    403a:	4611      	mov	r1, r2
    403c:	f105 008c 	add.w	r0, r5, #140	; 0x8c
    4040:	f01b fbfa 	bl	1f838 <_impl_k_sem_init>
	net_buf_unref(rsp);
    4044:	9804      	ldr	r0, [sp, #16]
    4046:	f013 fd63 	bl	17b10 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    404a:	7eac      	ldrb	r4, [r5, #26]
    404c:	f014 0420 	ands.w	r4, r4, #32
    4050:	f000 80ff 	beq.w	4252 <bt_init+0x37a>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    4054:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    4058:	071c      	lsls	r4, r3, #28
    405a:	d514      	bpl.n	4086 <bt_init+0x1ae>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    405c:	aa04      	add	r2, sp, #16
    405e:	2100      	movs	r1, #0
    4060:	f242 001c 	movw	r0, #8220	; 0x201c
    4064:	f7ff fbaa 	bl	37bc <bt_hci_cmd_send_sync>
		if (err) {
    4068:	4604      	mov	r4, r0
    406a:	2800      	cmp	r0, #0
    406c:	f040 810c 	bne.w	4288 <bt_init+0x3b0>
		le_read_supp_states_complete(rsp);
    4070:	9804      	ldr	r0, [sp, #16]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    4072:	6883      	ldr	r3, [r0, #8]
    4074:	f853 2f01 	ldr.w	r2, [r3, #1]!
    4078:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    407a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    407e:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    4082:	f013 fd45 	bl	17b10 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    4086:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    408a:	0698      	lsls	r0, r3, #26
    408c:	f100 8100 	bmi.w	4290 <bt_init+0x3b8>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    4090:	2108      	movs	r1, #8
    4092:	f242 0001 	movw	r0, #8193	; 0x2001
    4096:	f7ff fb61 	bl	375c <bt_hci_cmd_create>
	if (!buf) {
    409a:	4604      	mov	r4, r0
    409c:	2800      	cmp	r0, #0
    409e:	f000 80df 	beq.w	4260 <bt_init+0x388>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    40a2:	2108      	movs	r1, #8
    40a4:	4408      	add	r0, r1
    40a6:	f013 fd91 	bl	17bcc <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    40aa:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    40ae:	f895 6079 	ldrb.w	r6, [r5, #121]	; 0x79
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    40b2:	0799      	lsls	r1, r3, #30
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    40b4:	4602      	mov	r2, r0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    40b6:	bf4c      	ite	mi
    40b8:	202f      	movmi	r0, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    40ba:	200f      	movpl	r0, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    40bc:	069f      	lsls	r7, r3, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    40be:	bf48      	it	mi
    40c0:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    40c4:	f016 0f09 	tst.w	r6, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    40c8:	bf18      	it	ne
    40ca:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    40ce:	07de      	lsls	r6, r3, #31
	if ((bt_dev.supported_commands[34] & 0x02) &&
    40d0:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    40d4:	f003 0306 	and.w	r3, r3, #6
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    40d8:	bf48      	it	mi
    40da:	f040 0010 	orrmi.w	r0, r0, #16
	if ((bt_dev.supported_commands[34] & 0x02) &&
    40de:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    40e0:	bf08      	it	eq
    40e2:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    40e6:	2100      	movs	r1, #0
	sys_put_le64(mask, cp_mask->events);
    40e8:	f7ff fb26 	bl	3738 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    40ec:	4621      	mov	r1, r4
    40ee:	2200      	movs	r2, #0
    40f0:	f242 0001 	movw	r0, #8193	; 0x2001
    40f4:	f7ff fb62 	bl	37bc <bt_hci_cmd_send_sync>
	if (err) {
    40f8:	4604      	mov	r4, r0
    40fa:	2800      	cmp	r0, #0
    40fc:	f040 80c4 	bne.w	4288 <bt_init+0x3b0>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    4100:	7eab      	ldrb	r3, [r5, #26]
    4102:	0698      	lsls	r0, r3, #26
    4104:	d421      	bmi.n	414a <bt_init+0x272>
	if (bt_dev.le.mtu) {
    4106:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
    410a:	b9f1      	cbnz	r1, 414a <bt_init+0x272>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    410c:	aa04      	add	r2, sp, #16
    410e:	f241 0005 	movw	r0, #4101	; 0x1005
    4112:	f7ff fb53 	bl	37bc <bt_hci_cmd_send_sync>
	if (err) {
    4116:	4604      	mov	r4, r0
    4118:	2800      	cmp	r0, #0
    411a:	f040 80b5 	bne.w	4288 <bt_init+0x3b0>
	if (bt_dev.le.mtu) {
    411e:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    4122:	b97b      	cbnz	r3, 4144 <bt_init+0x26c>
    4124:	9b04      	ldr	r3, [sp, #16]
    4126:	483b      	ldr	r0, [pc, #236]	; (4214 <bt_init+0x33c>)
    4128:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    412a:	7899      	ldrb	r1, [r3, #2]
    412c:	785a      	ldrb	r2, [r3, #1]
    412e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4132:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    4136:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    4138:	2a02      	cmp	r2, #2
    413a:	bf28      	it	cs
    413c:	2202      	movcs	r2, #2
    413e:	4611      	mov	r1, r2
    4140:	f01b fb7a 	bl	1f838 <_impl_k_sem_init>
	net_buf_unref(rsp);
    4144:	9804      	ldr	r0, [sp, #16]
    4146:	f013 fce3 	bl	17b10 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    414a:	2108      	movs	r1, #8
    414c:	f640 4001 	movw	r0, #3073	; 0xc01
    4150:	f7ff fb04 	bl	375c <bt_hci_cmd_create>
	if (!buf) {
    4154:	4604      	mov	r4, r0
    4156:	2800      	cmp	r0, #0
    4158:	f000 8082 	beq.w	4260 <bt_init+0x388>
	ev = net_buf_add(buf, sizeof(*ev));
    415c:	2108      	movs	r1, #8
    415e:	4408      	add	r0, r1
    4160:	f013 fd34 	bl	17bcc <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    4164:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    4168:	07d9      	lsls	r1, r3, #31
	ev = net_buf_add(buf, sizeof(*ev));
    416a:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    416c:	f140 80bb 	bpl.w	42e6 <bt_init+0x40e>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    4170:	a123      	add	r1, pc, #140	; (adr r1, 4200 <bt_init+0x328>)
    4172:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    4176:	f7ff fadf 	bl	3738 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    417a:	4621      	mov	r1, r4
    417c:	2200      	movs	r2, #0
    417e:	f640 4001 	movw	r0, #3073	; 0xc01
    4182:	f7ff fb1b 	bl	37bc <bt_hci_cmd_send_sync>
	if (err) {
    4186:	4604      	mov	r4, r0
    4188:	2800      	cmp	r0, #0
    418a:	d17d      	bne.n	4288 <bt_init+0x3b0>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    418c:	4601      	mov	r1, r0
    418e:	aa04      	add	r2, sp, #16
    4190:	f64f 4001 	movw	r0, #64513	; 0xfc01
    4194:	f7ff fb12 	bl	37bc <bt_hci_cmd_send_sync>
	if (err) {
    4198:	4604      	mov	r4, r0
    419a:	bb28      	cbnz	r0, 41e8 <bt_init+0x310>
	net_buf_unref(rsp);
    419c:	9804      	ldr	r0, [sp, #16]
    419e:	f013 fcb7 	bl	17b10 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    41a2:	4621      	mov	r1, r4
    41a4:	aa04      	add	r2, sp, #16
    41a6:	f64f 4002 	movw	r0, #64514	; 0xfc02
    41aa:	f7ff fb07 	bl	37bc <bt_hci_cmd_send_sync>
	if (err) {
    41ae:	4604      	mov	r4, r0
    41b0:	b9d0      	cbnz	r0, 41e8 <bt_init+0x310>
	rp.cmds = (void *)rsp->data;
    41b2:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    41b4:	4818      	ldr	r0, [pc, #96]	; (4218 <bt_init+0x340>)
    41b6:	6899      	ldr	r1, [r3, #8]
    41b8:	2202      	movs	r2, #2
    41ba:	3101      	adds	r1, #1
    41bc:	f7fc fb95 	bl	8ea <memcpy>
	net_buf_unref(rsp);
    41c0:	9804      	ldr	r0, [sp, #16]
    41c2:	f013 fca5 	bl	17b10 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    41c6:	aa04      	add	r2, sp, #16
    41c8:	4621      	mov	r1, r4
    41ca:	f64f 4003 	movw	r0, #64515	; 0xfc03
    41ce:	f7ff faf5 	bl	37bc <bt_hci_cmd_send_sync>
	if (err) {
    41d2:	b948      	cbnz	r0, 41e8 <bt_init+0x310>
	rp.feat = (void *)rsp->data;
    41d4:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    41d6:	4811      	ldr	r0, [pc, #68]	; (421c <bt_init+0x344>)
    41d8:	6899      	ldr	r1, [r3, #8]
    41da:	2201      	movs	r2, #1
    41dc:	4411      	add	r1, r2
    41de:	f7fc fb84 	bl	8ea <memcpy>
	net_buf_unref(rsp);
    41e2:	9804      	ldr	r0, [sp, #16]
    41e4:	f013 fc94 	bl	17b10 <net_buf_unref>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    41e8:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    41ea:	2207      	movs	r2, #7
    41ec:	a904      	add	r1, sp, #16
    41ee:	4808      	ldr	r0, [pc, #32]	; (4210 <bt_init+0x338>)
    41f0:	9304      	str	r3, [sp, #16]
    41f2:	f8cd 3013 	str.w	r3, [sp, #19]
    41f6:	f7fc fb4b 	bl	890 <memcmp>
    41fa:	e011      	b.n	4220 <bt_init+0x348>
    41fc:	f3af 8000 	nop.w
    4200:	02008890 	.word	0x02008890
    4204:	20008000 	.word	0x20008000
    4208:	200003dc 	.word	0x200003dc
    420c:	2000dd68 	.word	0x2000dd68
    4210:	2000dcf8 	.word	0x2000dcf8
    4214:	2000dd84 	.word	0x2000dd84
    4218:	2000dd57 	.word	0x2000dd57
    421c:	2000dd56 	.word	0x2000dd56
    4220:	2800      	cmp	r0, #0
    4222:	d164      	bne.n	42ee <bt_init+0x416>
	if (bt_storage) {
    4224:	4e5f      	ldr	r6, [pc, #380]	; (43a4 <bt_init+0x4cc>)
    4226:	6833      	ldr	r3, [r6, #0]
    4228:	2b00      	cmp	r3, #0
    422a:	d17d      	bne.n	4328 <bt_init+0x450>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    422c:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    4230:	07db      	lsls	r3, r3, #31
    4232:	f100 8095 	bmi.w	4360 <bt_init+0x488>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    4236:	485c      	ldr	r0, [pc, #368]	; (43a8 <bt_init+0x4d0>)
    4238:	f7ff fd93 	bl	3d62 <bt_addr_le_create_static>
	if (err) {
    423c:	4604      	mov	r4, r0
    423e:	bb18      	cbnz	r0, 4288 <bt_init+0x3b0>
	if (bt_storage) {
    4240:	6833      	ldr	r3, [r6, #0]
    4242:	2b00      	cmp	r3, #0
    4244:	d079      	beq.n	433a <bt_init+0x462>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    4246:	685e      	ldr	r6, [r3, #4]
    4248:	4a57      	ldr	r2, [pc, #348]	; (43a8 <bt_init+0x4d0>)
    424a:	2307      	movs	r3, #7
    424c:	4601      	mov	r1, r0
    424e:	47b0      	blx	r6
    4250:	e073      	b.n	433a <bt_init+0x462>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    4252:	2102      	movs	r1, #2
    4254:	f640 406d 	movw	r0, #3181	; 0xc6d
    4258:	f7ff fa80 	bl	375c <bt_hci_cmd_create>
		if (!buf) {
    425c:	4606      	mov	r6, r0
    425e:	b910      	cbnz	r0, 4266 <bt_init+0x38e>
		return -ENOBUFS;
    4260:	f06f 0436 	mvn.w	r4, #54	; 0x36
    4264:	e010      	b.n	4288 <bt_init+0x3b0>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    4266:	2102      	movs	r1, #2
    4268:	3008      	adds	r0, #8
    426a:	f013 fcaf 	bl	17bcc <net_buf_simple_add>
		cp_le->le = 0x01;
    426e:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    4270:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    4272:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    4274:	4622      	mov	r2, r4
    4276:	4631      	mov	r1, r6
    4278:	f640 406d 	movw	r0, #3181	; 0xc6d
    427c:	f7ff fa9e 	bl	37bc <bt_hci_cmd_send_sync>
		if (err) {
    4280:	4604      	mov	r4, r0
    4282:	2800      	cmp	r0, #0
    4284:	f43f aee6 	beq.w	4054 <bt_init+0x17c>
}
    4288:	4620      	mov	r0, r4
    428a:	b006      	add	sp, #24
    428c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    4290:	aa04      	add	r2, sp, #16
    4292:	2100      	movs	r1, #0
    4294:	f242 002f 	movw	r0, #8239	; 0x202f
    4298:	f7ff fa90 	bl	37bc <bt_hci_cmd_send_sync>
		if (err) {
    429c:	4604      	mov	r4, r0
    429e:	2800      	cmp	r0, #0
    42a0:	d1f2      	bne.n	4288 <bt_init+0x3b0>
		rp = (void *)rsp->data;
    42a2:	9804      	ldr	r0, [sp, #16]
    42a4:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    42a6:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    42aa:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
    42ae:	f013 fc2f 	bl	17b10 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    42b2:	2104      	movs	r1, #4
    42b4:	f242 0024 	movw	r0, #8228	; 0x2024
    42b8:	f7ff fa50 	bl	375c <bt_hci_cmd_create>
		if (!buf) {
    42bc:	4606      	mov	r6, r0
    42be:	2800      	cmp	r0, #0
    42c0:	d0ce      	beq.n	4260 <bt_init+0x388>
		cp = net_buf_add(buf, sizeof(*cp));
    42c2:	2104      	movs	r1, #4
    42c4:	3008      	adds	r0, #8
    42c6:	f013 fc81 	bl	17bcc <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    42ca:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    42cc:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    42d0:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    42d2:	4631      	mov	r1, r6
    42d4:	f242 0024 	movw	r0, #8228	; 0x2024
    42d8:	f7ff fa70 	bl	37bc <bt_hci_cmd_send_sync>
		if (err) {
    42dc:	4604      	mov	r4, r0
    42de:	2800      	cmp	r0, #0
    42e0:	f43f aed6 	beq.w	4090 <bt_init+0x1b8>
    42e4:	e7d0      	b.n	4288 <bt_init+0x3b0>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    42e6:	4831      	ldr	r0, [pc, #196]	; (43ac <bt_init+0x4d4>)
    42e8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    42ec:	e743      	b.n	4176 <bt_init+0x29e>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    42ee:	4b30      	ldr	r3, [pc, #192]	; (43b0 <bt_init+0x4d8>)
    42f0:	6818      	ldr	r0, [r3, #0]
    42f2:	889a      	ldrh	r2, [r3, #4]
    42f4:	9002      	str	r0, [sp, #8]
    42f6:	799b      	ldrb	r3, [r3, #6]
    42f8:	f8ad 200c 	strh.w	r2, [sp, #12]
    42fc:	a902      	add	r1, sp, #8
    42fe:	2207      	movs	r2, #7
    4300:	4829      	ldr	r0, [pc, #164]	; (43a8 <bt_init+0x4d0>)
    4302:	f88d 300e 	strb.w	r3, [sp, #14]
    4306:	f7fc fac3 	bl	890 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    430a:	2800      	cmp	r0, #0
    430c:	d08a      	beq.n	4224 <bt_init+0x34c>
		err = bt_conn_init();
    430e:	f002 f93d 	bl	658c <bt_conn_init>
		if (err) {
    4312:	4604      	mov	r4, r0
    4314:	2800      	cmp	r0, #0
    4316:	d1b7      	bne.n	4288 <bt_init+0x3b0>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    4318:	2102      	movs	r1, #2
    431a:	4826      	ldr	r0, [pc, #152]	; (43b4 <bt_init+0x4dc>)
    431c:	f7ff f979 	bl	3612 <atomic_or>
	bt_le_scan_update(false);
    4320:	4620      	mov	r0, r4
    4322:	f7ff fda7 	bl	3e74 <bt_le_scan_update>
    4326:	e7af      	b.n	4288 <bt_init+0x3b0>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    4328:	2100      	movs	r1, #0
    432a:	681c      	ldr	r4, [r3, #0]
    432c:	4a1e      	ldr	r2, [pc, #120]	; (43a8 <bt_init+0x4d0>)
    432e:	2307      	movs	r3, #7
    4330:	4608      	mov	r0, r1
    4332:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    4334:	2807      	cmp	r0, #7
    4336:	f47f af79 	bne.w	422c <bt_init+0x354>
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    433a:	782b      	ldrb	r3, [r5, #0]
    433c:	2b01      	cmp	r3, #1
    433e:	d12a      	bne.n	4396 <bt_init+0x4be>
    4340:	79ab      	ldrb	r3, [r5, #6]
    4342:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4346:	2bc0      	cmp	r3, #192	; 0xc0
    4348:	d125      	bne.n	4396 <bt_init+0x4be>
	err = set_random_address(&bt_dev.id_addr.a);
    434a:	481b      	ldr	r0, [pc, #108]	; (43b8 <bt_init+0x4e0>)
    434c:	f7ff fa74 	bl	3838 <set_random_address>
	if (err) {
    4350:	4604      	mov	r4, r0
    4352:	2800      	cmp	r0, #0
    4354:	d198      	bne.n	4288 <bt_init+0x3b0>
    4356:	2104      	movs	r1, #4
    4358:	4816      	ldr	r0, [pc, #88]	; (43b4 <bt_init+0x4dc>)
    435a:	f7ff f95a 	bl	3612 <atomic_or>
    435e:	e7d6      	b.n	430e <bt_init+0x436>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    4360:	aa01      	add	r2, sp, #4
    4362:	2100      	movs	r1, #0
    4364:	f64f 4009 	movw	r0, #64521	; 0xfc09
    4368:	f7ff fa28 	bl	37bc <bt_hci_cmd_send_sync>
		if (err) {
    436c:	2800      	cmp	r0, #0
    436e:	f47f af62 	bne.w	4236 <bt_init+0x35e>
		rp = (void *)rsp->data;
    4372:	9801      	ldr	r0, [sp, #4]
    4374:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    4376:	784b      	ldrb	r3, [r1, #1]
    4378:	b153      	cbz	r3, 4390 <bt_init+0x4b8>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    437a:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    437c:	2206      	movs	r2, #6
    437e:	3102      	adds	r1, #2
    4380:	480d      	ldr	r0, [pc, #52]	; (43b8 <bt_init+0x4e0>)
    4382:	702b      	strb	r3, [r5, #0]
    4384:	f7fc fab1 	bl	8ea <memcpy>
			net_buf_unref(rsp);
    4388:	9801      	ldr	r0, [sp, #4]
    438a:	f013 fbc1 	bl	17b10 <net_buf_unref>
    438e:	e7d4      	b.n	433a <bt_init+0x462>
		net_buf_unref(rsp);
    4390:	f013 fbbe 	bl	17b10 <net_buf_unref>
    4394:	e74f      	b.n	4236 <bt_init+0x35e>
		return -EINVAL;
    4396:	f06f 0415 	mvn.w	r4, #21
    439a:	e775      	b.n	4288 <bt_init+0x3b0>
		return -ENODEV;
    439c:	f06f 0412 	mvn.w	r4, #18
    43a0:	e772      	b.n	4288 <bt_init+0x3b0>
    43a2:	bf00      	nop
    43a4:	20003aa4 	.word	0x20003aa4
    43a8:	2000dcf8 	.word	0x2000dcf8
    43ac:	02008810 	.word	0x02008810
    43b0:	00020604 	.word	0x00020604
    43b4:	2000dd68 	.word	0x2000dd68
    43b8:	2000dcf9 	.word	0x2000dcf9

000043bc <init_work>:
{
    43bc:	b510      	push	{r4, lr}
	err = bt_init();
    43be:	f7ff fd8b 	bl	3ed8 <bt_init>
	if (ready_cb) {
    43c2:	4b03      	ldr	r3, [pc, #12]	; (43d0 <init_work+0x14>)
    43c4:	681b      	ldr	r3, [r3, #0]
    43c6:	b113      	cbz	r3, 43ce <init_work+0x12>
}
    43c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    43cc:	4718      	bx	r3
    43ce:	bd10      	pop	{r4, pc}
    43d0:	200003d8 	.word	0x200003d8

000043d4 <check_pending_conn.part.30>:
static void check_pending_conn(const bt_addr_le_t *id_addr,
    43d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43d8:	460d      	mov	r5, r1
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    43da:	2101      	movs	r1, #1
    43dc:	f001 fe62 	bl	60a4 <bt_conn_lookup_state_le>
	if (!conn) {
    43e0:	4604      	mov	r4, r0
    43e2:	2800      	cmp	r0, #0
    43e4:	d068      	beq.n	44b8 <check_pending_conn.part.30+0xe4>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    43e6:	2107      	movs	r1, #7
    43e8:	4834      	ldr	r0, [pc, #208]	; (44bc <check_pending_conn.part.30+0xe8>)
    43ea:	f7ff f923 	bl	3634 <atomic_test_bit>
    43ee:	2800      	cmp	r0, #0
    43f0:	d14f      	bne.n	4492 <check_pending_conn.part.30+0xbe>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    43f2:	2102      	movs	r1, #2
    43f4:	4831      	ldr	r0, [pc, #196]	; (44bc <check_pending_conn.part.30+0xe8>)
    43f6:	f7ff f91d 	bl	3634 <atomic_test_bit>
    43fa:	b110      	cbz	r0, 4402 <check_pending_conn.part.30+0x2e>
			set_random_address(&bt_dev.id_addr.a);
    43fc:	4830      	ldr	r0, [pc, #192]	; (44c0 <check_pending_conn.part.30+0xec>)
    43fe:	f7ff fa1b 	bl	3838 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    4402:	4930      	ldr	r1, [pc, #192]	; (44c4 <check_pending_conn.part.30+0xf0>)
    4404:	f104 004f 	add.w	r0, r4, #79	; 0x4f
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    4408:	f104 0856 	add.w	r8, r4, #86	; 0x56
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    440c:	f7ff f8fe 	bl	360c <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    4410:	4629      	mov	r1, r5
    4412:	4640      	mov	r0, r8
    4414:	f7ff f8fa 	bl	360c <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    4418:	2119      	movs	r1, #25
    441a:	f242 000d 	movw	r0, #8205	; 0x200d
    441e:	f7ff f99d 	bl	375c <bt_hci_cmd_create>
	if (!buf) {
    4422:	4606      	mov	r6, r0
    4424:	b3d0      	cbz	r0, 449c <check_pending_conn.part.30+0xc8>
	cp = net_buf_add(buf, sizeof(*cp));
    4426:	2119      	movs	r1, #25
    4428:	3008      	adds	r0, #8
    442a:	f013 fbcf 	bl	17bcc <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    442e:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    4430:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    4432:	2100      	movs	r1, #0
    4434:	f7fc fa85 	bl	942 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    4438:	2700      	movs	r7, #0
    443a:	2360      	movs	r3, #96	; 0x60
    443c:	702b      	strb	r3, [r5, #0]
	cp->scan_window = cp->scan_interval;
    443e:	70ab      	strb	r3, [r5, #2]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    4440:	4641      	mov	r1, r8
    4442:	1d68      	adds	r0, r5, #5
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    4444:	706f      	strb	r7, [r5, #1]
	cp->scan_window = cp->scan_interval;
    4446:	70ef      	strb	r7, [r5, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    4448:	f7ff f8e0 	bl	360c <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    444c:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
    4450:	732b      	strb	r3, [r5, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    4452:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    4456:	f8a5 300d 	strh.w	r3, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    445a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    445e:	f8a5 300f 	strh.w	r3, [r5, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    4462:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    4466:	f8a5 3011 	strh.w	r3, [r5, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    446a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    446e:	f8a5 3013 	strh.w	r3, [r5, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    4472:	463a      	mov	r2, r7
    4474:	4631      	mov	r1, r6
    4476:	f242 000d 	movw	r0, #8205	; 0x200d
    447a:	f7ff f99f 	bl	37bc <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    447e:	b968      	cbnz	r0, 449c <check_pending_conn.part.30+0xc8>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    4480:	4620      	mov	r0, r4
    4482:	2102      	movs	r1, #2
    4484:	f001 fd18 	bl	5eb8 <bt_conn_set_state>
	bt_conn_unref(conn);
    4488:	4620      	mov	r0, r4
}
    448a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_conn_unref(conn);
    448e:	f001 be2b 	b.w	60e8 <bt_conn_unref>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    4492:	2000      	movs	r0, #0
    4494:	f7ff fa54 	bl	3940 <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    4498:	2800      	cmp	r0, #0
    449a:	d0aa      	beq.n	43f2 <check_pending_conn.part.30+0x1e>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    449c:	231f      	movs	r3, #31
    449e:	72e3      	strb	r3, [r4, #11]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    44a0:	4620      	mov	r0, r4
    44a2:	2100      	movs	r1, #0
    44a4:	f001 fd08 	bl	5eb8 <bt_conn_set_state>
	bt_conn_unref(conn);
    44a8:	4620      	mov	r0, r4
    44aa:	f001 fe1d 	bl	60e8 <bt_conn_unref>
	bt_le_scan_update(false);
    44ae:	2000      	movs	r0, #0
}
    44b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_le_scan_update(false);
    44b4:	f7ff bcde 	b.w	3e74 <bt_le_scan_update>
    44b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    44bc:	2000dd68 	.word	0x2000dd68
    44c0:	2000dcf9 	.word	0x2000dcf9
    44c4:	2000dcf8 	.word	0x2000dcf8

000044c8 <hci_le_set_phy.isra.32>:
static int hci_le_set_phy(struct bt_conn *conn)
    44c8:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    44ca:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    44cc:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    44ce:	f242 0032 	movw	r0, #8242	; 0x2032
    44d2:	f7ff f943 	bl	375c <bt_hci_cmd_create>
	if (!buf) {
    44d6:	4605      	mov	r5, r0
    44d8:	b198      	cbz	r0, 4502 <hci_le_set_phy.isra.32+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    44da:	2107      	movs	r1, #7
    44dc:	3008      	adds	r0, #8
    44de:	f013 fb75 	bl	17bcc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    44e2:	8823      	ldrh	r3, [r4, #0]
    44e4:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    44e6:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    44e8:	2302      	movs	r3, #2
	cp->all_phys = 0;
    44ea:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    44ec:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    44ee:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    44f0:	7144      	strb	r4, [r0, #5]
    44f2:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    44f4:	4629      	mov	r1, r5
    44f6:	f242 0032 	movw	r0, #8242	; 0x2032
    44fa:	f7ff fc49 	bl	3d90 <bt_hci_cmd_send>
	return 0;
    44fe:	4620      	mov	r0, r4
    4500:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    4502:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    4506:	bd38      	pop	{r3, r4, r5, pc}

00004508 <hci_le_set_data_len.isra.33>:
static int hci_le_set_data_len(struct bt_conn *conn)
    4508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    450a:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    450c:	aa01      	add	r2, sp, #4
    450e:	2100      	movs	r1, #0
    4510:	f242 002f 	movw	r0, #8239	; 0x202f
    4514:	f7ff f952 	bl	37bc <bt_hci_cmd_send_sync>
	if (err) {
    4518:	b9d8      	cbnz	r0, 4552 <hci_le_set_data_len.isra.33+0x4a>
	rp = (void *)rsp->data;
    451a:	9801      	ldr	r0, [sp, #4]
    451c:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    451e:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    4522:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    4526:	f013 faf3 	bl	17b10 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    452a:	2106      	movs	r1, #6
    452c:	f242 0022 	movw	r0, #8226	; 0x2022
    4530:	f7ff f914 	bl	375c <bt_hci_cmd_create>
	if (!buf) {
    4534:	4604      	mov	r4, r0
    4536:	b170      	cbz	r0, 4556 <hci_le_set_data_len.isra.33+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    4538:	2106      	movs	r1, #6
    453a:	3008      	adds	r0, #8
    453c:	f013 fb46 	bl	17bcc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    4540:	883b      	ldrh	r3, [r7, #0]
    4542:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    4544:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    4546:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    4548:	4621      	mov	r1, r4
    454a:	f242 0022 	movw	r0, #8226	; 0x2022
    454e:	f7ff fc1f 	bl	3d90 <bt_hci_cmd_send>
}
    4552:	b003      	add	sp, #12
    4554:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    4556:	f06f 0036 	mvn.w	r0, #54	; 0x36
    455a:	e7fa      	b.n	4552 <hci_le_set_data_len.isra.33+0x4a>

0000455c <le_enh_conn_complete>:
{
    455c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    455e:	210c      	movs	r1, #12
{
    4560:	b085      	sub	sp, #20
    4562:	4605      	mov	r5, r0
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4564:	f8b0 6001 	ldrh.w	r6, [r0, #1]
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    4568:	4862      	ldr	r0, [pc, #392]	; (46f4 <le_enh_conn_complete+0x198>)
    456a:	f7ff f881 	bl	3670 <atomic_test_and_clear_bit>
    456e:	b118      	cbz	r0, 4578 <le_enh_conn_complete+0x1c>
		bt_keys_foreach(BT_KEYS_IRK, update_pending_id);
    4570:	4961      	ldr	r1, [pc, #388]	; (46f8 <le_enh_conn_complete+0x19c>)
    4572:	2002      	movs	r0, #2
    4574:	f006 f9c4 	bl	a900 <bt_keys_foreach>
	if (evt->status) {
    4578:	782b      	ldrb	r3, [r5, #0]
    457a:	b17b      	cbz	r3, 459c <le_enh_conn_complete+0x40>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    457c:	2102      	movs	r1, #2
    457e:	2000      	movs	r0, #0
    4580:	f001 fd90 	bl	60a4 <bt_conn_lookup_state_le>
		if (!conn) {
    4584:	4604      	mov	r4, r0
    4586:	b138      	cbz	r0, 4598 <le_enh_conn_complete+0x3c>
		conn->err = evt->status;
    4588:	782b      	ldrb	r3, [r5, #0]
    458a:	72c3      	strb	r3, [r0, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    458c:	2100      	movs	r1, #0
    458e:	f001 fc93 	bl	5eb8 <bt_conn_set_state>
		bt_conn_unref(conn);
    4592:	4620      	mov	r0, r4
    4594:	f001 fda8 	bl	60e8 <bt_conn_unref>
}
    4598:	b005      	add	sp, #20
    459a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    459c:	1d2c      	adds	r4, r5, #4
    459e:	4621      	mov	r1, r4
    45a0:	a802      	add	r0, sp, #8
    45a2:	f7ff f833 	bl	360c <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    45a6:	f89d 3008 	ldrb.w	r3, [sp, #8]
    45aa:	3b02      	subs	r3, #2
    45ac:	b2db      	uxtb	r3, r3
    45ae:	2b01      	cmp	r3, #1
    45b0:	d87d      	bhi.n	46ae <le_enh_conn_complete+0x152>
    45b2:	2206      	movs	r2, #6
    45b4:	f105 0111 	add.w	r1, r5, #17
    45b8:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    45bc:	f88d 3008 	strb.w	r3, [sp, #8]
    45c0:	f7fc f993 	bl	8ea <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    45c4:	2301      	movs	r3, #1
    45c6:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    45ca:	2102      	movs	r1, #2
    45cc:	a802      	add	r0, sp, #8
    45ce:	f001 fd69 	bl	60a4 <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    45d2:	78eb      	ldrb	r3, [r5, #3]
    45d4:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    45d6:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    45d8:	d109      	bne.n	45ee <le_enh_conn_complete+0x92>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    45da:	f06f 0120 	mvn.w	r1, #32
    45de:	4845      	ldr	r0, [pc, #276]	; (46f4 <le_enh_conn_complete+0x198>)
    45e0:	f7ff f835 	bl	364e <atomic_and>
		if (!conn) {
    45e4:	b92c      	cbnz	r4, 45f2 <le_enh_conn_complete+0x96>
			conn = bt_conn_add_le(&id_addr);
    45e6:	a802      	add	r0, sp, #8
    45e8:	f001 fc2c 	bl	5e44 <bt_conn_add_le>
    45ec:	4604      	mov	r4, r0
	if (!conn) {
    45ee:	2c00      	cmp	r4, #0
    45f0:	d0d2      	beq.n	4598 <le_enh_conn_complete+0x3c>
	conn->handle   = handle;
    45f2:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    45f4:	a902      	add	r1, sp, #8
	conn->handle   = handle;
    45f6:	f820 6b48 	strh.w	r6, [r0], #72
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    45fa:	f7ff f807 	bl	360c <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    45fe:	7e2a      	ldrb	r2, [r5, #24]
    4600:	7deb      	ldrb	r3, [r5, #23]
    4602:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4606:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    460a:	7eaa      	ldrb	r2, [r5, #26]
    460c:	7e6b      	ldrb	r3, [r5, #25]
    460e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4612:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    4616:	7eeb      	ldrb	r3, [r5, #27]
    4618:	7f2a      	ldrb	r2, [r5, #28]
    461a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    461e:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->role = evt->role;
    4622:	78ee      	ldrb	r6, [r5, #3]
    4624:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    4626:	2e01      	cmp	r6, #1
    4628:	d11a      	bne.n	4660 <le_enh_conn_complete+0x104>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    462a:	4f34      	ldr	r7, [pc, #208]	; (46fc <le_enh_conn_complete+0x1a0>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    462c:	4669      	mov	r1, sp
    462e:	f104 004f 	add.w	r0, r4, #79	; 0x4f
    4632:	f7fe ffeb 	bl	360c <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    4636:	4639      	mov	r1, r7
    4638:	f104 0056 	add.w	r0, r4, #86	; 0x56
    463c:	f7fe ffe6 	bl	360c <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    4640:	2106      	movs	r1, #6
    4642:	f107 0070 	add.w	r0, r7, #112	; 0x70
    4646:	f7fe fff5 	bl	3634 <atomic_test_bit>
    464a:	b148      	cbz	r0, 4660 <le_enh_conn_complete+0x104>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    464c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    4650:	2200      	movs	r2, #0
    4652:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    4656:	4313      	orrs	r3, r2
    4658:	d002      	beq.n	4660 <le_enh_conn_complete+0x104>
			set_advertise_enable(true);
    465a:	4630      	mov	r0, r6
    465c:	f7ff f9a4 	bl	39a8 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    4660:	2103      	movs	r1, #3
    4662:	4620      	mov	r0, r4
    4664:	f001 fc28 	bl	5eb8 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    4668:	7b23      	ldrb	r3, [r4, #12]
    466a:	2b03      	cmp	r3, #3
    466c:	d118      	bne.n	46a0 <le_enh_conn_complete+0x144>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    466e:	78eb      	ldrb	r3, [r5, #3]
    4670:	b123      	cbz	r3, 467c <le_enh_conn_complete+0x120>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    4672:	4b22      	ldr	r3, [pc, #136]	; (46fc <le_enh_conn_complete+0x1a0>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    4674:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    4678:	0719      	lsls	r1, r3, #28
    467a:	d51d      	bpl.n	46b8 <le_enh_conn_complete+0x15c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    467c:	2102      	movs	r1, #2
    467e:	f242 0016 	movw	r0, #8214	; 0x2016
    4682:	f7ff f86b 	bl	375c <bt_hci_cmd_create>
	if (!buf) {
    4686:	4605      	mov	r5, r0
    4688:	b1b0      	cbz	r0, 46b8 <le_enh_conn_complete+0x15c>
	cp = net_buf_add(buf, sizeof(*cp));
    468a:	2102      	movs	r1, #2
    468c:	3008      	adds	r0, #8
    468e:	f013 fa9d 	bl	17bcc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    4692:	8823      	ldrh	r3, [r4, #0]
    4694:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    4696:	4629      	mov	r1, r5
    4698:	f242 0016 	movw	r0, #8214	; 0x2016
    469c:	f7ff fb78 	bl	3d90 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    46a0:	4620      	mov	r0, r4
    46a2:	f001 fd21 	bl	60e8 <bt_conn_unref>
	bt_le_scan_update(false);
    46a6:	2000      	movs	r0, #0
    46a8:	f7ff fbe4 	bl	3e74 <bt_le_scan_update>
    46ac:	e774      	b.n	4598 <le_enh_conn_complete+0x3c>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    46ae:	4621      	mov	r1, r4
    46b0:	4668      	mov	r0, sp
    46b2:	f7fe ffab 	bl	360c <bt_addr_le_copy>
    46b6:	e788      	b.n	45ca <le_enh_conn_complete+0x6e>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    46b8:	4d10      	ldr	r5, [pc, #64]	; (46fc <le_enh_conn_complete+0x1a0>)
    46ba:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    46be:	07d2      	lsls	r2, r2, #31
    46c0:	d508      	bpl.n	46d4 <le_enh_conn_complete+0x178>
		err = hci_le_set_phy(conn);
    46c2:	4620      	mov	r0, r4
    46c4:	f7ff ff00 	bl	44c8 <hci_le_set_phy.isra.32>
		if (!err) {
    46c8:	b920      	cbnz	r0, 46d4 <le_enh_conn_complete+0x178>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    46ca:	2180      	movs	r1, #128	; 0x80
    46cc:	1d20      	adds	r0, r4, #4
    46ce:	f7fe ffa0 	bl	3612 <atomic_or>
    46d2:	e7e5      	b.n	46a0 <le_enh_conn_complete+0x144>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    46d4:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    46d8:	069b      	lsls	r3, r3, #26
    46da:	d506      	bpl.n	46ea <le_enh_conn_complete+0x18e>
		err = hci_le_set_data_len(conn);
    46dc:	4620      	mov	r0, r4
    46de:	f7ff ff13 	bl	4508 <hci_le_set_data_len.isra.33>
		if (!err) {
    46e2:	b910      	cbnz	r0, 46ea <le_enh_conn_complete+0x18e>
    46e4:	f44f 7180 	mov.w	r1, #256	; 0x100
    46e8:	e7f0      	b.n	46cc <le_enh_conn_complete+0x170>
	update_conn_param(conn);
    46ea:	4620      	mov	r0, r4
    46ec:	f7fe ffd0 	bl	3690 <update_conn_param>
    46f0:	e7d6      	b.n	46a0 <le_enh_conn_complete+0x144>
    46f2:	bf00      	nop
    46f4:	2000dd68 	.word	0x2000dd68
    46f8:	00003d31 	.word	0x00003d31
    46fc:	2000dcf8 	.word	0x2000dcf8

00004700 <le_conn_param_neg_reply>:
{
    4700:	b570      	push	{r4, r5, r6, lr}
    4702:	4606      	mov	r6, r0
    4704:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    4706:	f242 0021 	movw	r0, #8225	; 0x2021
    470a:	2103      	movs	r1, #3
    470c:	f7ff f826 	bl	375c <bt_hci_cmd_create>
	if (!buf) {
    4710:	4604      	mov	r4, r0
    4712:	b160      	cbz	r0, 472e <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    4714:	2103      	movs	r1, #3
    4716:	3008      	adds	r0, #8
    4718:	f013 fa58 	bl	17bcc <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    471c:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    471e:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    4720:	4621      	mov	r1, r4
    4722:	f242 0021 	movw	r0, #8225	; 0x2021
}
    4726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    472a:	f7ff bb31 	b.w	3d90 <bt_hci_cmd_send>
}
    472e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    4732:	bd70      	pop	{r4, r5, r6, pc}

00004734 <hci_tx_thread>:
{
    4734:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    4738:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 481c <hci_tx_thread+0xe8>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    473c:	4c35      	ldr	r4, [pc, #212]	; (4814 <hci_tx_thread+0xe0>)
		events[0].state = K_POLL_STATE_NOT_READY;
    473e:	f898 300d 	ldrb.w	r3, [r8, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    4742:	4835      	ldr	r0, [pc, #212]	; (4818 <hci_tx_thread+0xe4>)
		events[0].state = K_POLL_STATE_NOT_READY;
    4744:	f36f 1307 	bfc	r3, #4, #4
    4748:	f888 300d 	strb.w	r3, [r8, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    474c:	f001 fb32 	bl	5db4 <bt_conn_prepare_events>
    4750:	1c47      	adds	r7, r0, #1
		err = k_poll(events, ev_count, K_FOREVER);
    4752:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4756:	4639      	mov	r1, r7
    4758:	4830      	ldr	r0, [pc, #192]	; (481c <hci_tx_thread+0xe8>)
    475a:	f01b fdeb 	bl	20334 <k_poll>
		BT_ASSERT(err == 0);
    475e:	b9b8      	cbnz	r0, 4790 <hci_tx_thread+0x5c>
    4760:	4d2e      	ldr	r5, [pc, #184]	; (481c <hci_tx_thread+0xe8>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    4762:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 4820 <hci_tx_thread+0xec>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    4766:	f104 0bd4 	add.w	fp, r4, #212	; 0xd4
	for (; count; ev++, count--) {
    476a:	b917      	cbnz	r7, 4772 <hci_tx_thread+0x3e>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    476c:	f01a fff2 	bl	1f754 <_impl_k_yield>
    4770:	e7e5      	b.n	473e <hci_tx_thread+0xa>
		switch (ev->state) {
    4772:	7b6b      	ldrb	r3, [r5, #13]
    4774:	091b      	lsrs	r3, r3, #4
    4776:	2b04      	cmp	r3, #4
    4778:	d139      	bne.n	47ee <hci_tx_thread+0xba>
			if (ev->tag == BT_EVENT_CMD_TX) {
    477a:	f895 a00c 	ldrb.w	sl, [r5, #12]
    477e:	f1ba 0f00 	cmp.w	sl, #0
    4782:	d137      	bne.n	47f4 <hci_tx_thread+0xc0>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    4784:	4651      	mov	r1, sl
    4786:	4658      	mov	r0, fp
    4788:	f013 f998 	bl	17abc <net_buf_get>
	BT_ASSERT(buf);
    478c:	4606      	mov	r6, r0
    478e:	b928      	cbnz	r0, 479c <hci_tx_thread+0x68>
    4790:	4040      	eors	r0, r0
    4792:	f380 8811 	msr	BASEPRI, r0
    4796:	f04f 0004 	mov.w	r0, #4
    479a:	df02      	svc	2
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    479c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    47a0:	4648      	mov	r0, r9
    47a2:	f01b f8b3 	bl	1f90c <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    47a6:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    47aa:	b118      	cbz	r0, 47b4 <hci_tx_thread+0x80>
		net_buf_unref(bt_dev.sent_cmd);
    47ac:	f013 f9b0 	bl	17b10 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    47b0:	f8c4 a0c0 	str.w	sl, [r4, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    47b4:	4630      	mov	r0, r6
    47b6:	f013 f9d9 	bl	17b6c <net_buf_ref>
    47ba:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	err = bt_send(buf);
    47be:	4630      	mov	r0, r6
    47c0:	f7ff fade 	bl	3d80 <bt_send>
	if (err) {
    47c4:	b198      	cbz	r0, 47ee <hci_tx_thread+0xba>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    47c6:	4648      	mov	r0, r9
    47c8:	f01b f840 	bl	1f84c <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    47cc:	4630      	mov	r0, r6
    47ce:	f013 f8e1 	bl	17994 <net_buf_id>
    47d2:	2100      	movs	r1, #0
    47d4:	201f      	movs	r0, #31
    47d6:	f7fe ff87 	bl	36e8 <hci_cmd_done.isra.18>
		net_buf_unref(bt_dev.sent_cmd);
    47da:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    47de:	f013 f997 	bl	17b10 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    47e2:	2300      	movs	r3, #0
		net_buf_unref(buf);
    47e4:	4630      	mov	r0, r6
		bt_dev.sent_cmd = NULL;
    47e6:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
		net_buf_unref(buf);
    47ea:	f013 f991 	bl	17b10 <net_buf_unref>
	for (; count; ev++, count--) {
    47ee:	3514      	adds	r5, #20
    47f0:	3f01      	subs	r7, #1
    47f2:	e7ba      	b.n	476a <hci_tx_thread+0x36>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    47f4:	f1ba 0f01 	cmp.w	sl, #1
    47f8:	d104      	bne.n	4804 <hci_tx_thread+0xd0>
					conn = CONTAINER_OF(ev->fifo,
    47fa:	6928      	ldr	r0, [r5, #16]
					bt_conn_notify_tx(conn);
    47fc:	381c      	subs	r0, #28
    47fe:	f001 fa19 	bl	5c34 <bt_conn_notify_tx>
    4802:	e7f4      	b.n	47ee <hci_tx_thread+0xba>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    4804:	f1ba 0f02 	cmp.w	sl, #2
    4808:	d1f1      	bne.n	47ee <hci_tx_thread+0xba>
					conn = CONTAINER_OF(ev->fifo,
    480a:	6928      	ldr	r0, [r5, #16]
					bt_conn_process_tx(conn);
    480c:	382c      	subs	r0, #44	; 0x2c
    480e:	f001 fe57 	bl	64c0 <bt_conn_process_tx>
    4812:	e7ec      	b.n	47ee <hci_tx_thread+0xba>
    4814:	2000dcf8 	.word	0x2000dcf8
    4818:	2000ddf4 	.word	0x2000ddf4
    481c:	2000dde0 	.word	0x2000dde0
    4820:	2000dda0 	.word	0x2000dda0

00004824 <bt_recv>:
{
    4824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (bt_buf_get_type(buf)) {
    4828:	7d03      	ldrb	r3, [r0, #20]
    482a:	2b01      	cmp	r3, #1
{
    482c:	b091      	sub	sp, #68	; 0x44
    482e:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    4830:	d02a      	beq.n	4888 <bt_recv+0x64>
    4832:	2b03      	cmp	r3, #3
    4834:	f040 83a6 	bne.w	4f84 <bt_recv+0x760>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    4838:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(hdr->handle);
    483a:	881e      	ldrh	r6, [r3, #0]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    483c:	885d      	ldrh	r5, [r3, #2]
	acl(buf)->handle = bt_acl_handle(handle);
    483e:	f3c6 030b 	ubfx	r3, r6, #0, #12
    4842:	82c3      	strh	r3, [r0, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    4844:	23ff      	movs	r3, #255	; 0xff
    4846:	7543      	strb	r3, [r0, #21]
	net_buf_pull(buf, sizeof(*hdr));
    4848:	2104      	movs	r1, #4
    484a:	3008      	adds	r0, #8
    484c:	f013 fa0e 	bl	17c6c <net_buf_simple_pull>
	if (buf->len != len) {
    4850:	89a3      	ldrh	r3, [r4, #12]
    4852:	42ab      	cmp	r3, r5
    4854:	d003      	beq.n	485e <bt_recv+0x3a>
	net_buf_unref(buf);
    4856:	4620      	mov	r0, r4
    4858:	f013 f95a 	bl	17b10 <net_buf_unref>
    485c:	e010      	b.n	4880 <bt_recv+0x5c>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    485e:	8ae0      	ldrh	r0, [r4, #22]
    4860:	f001 fbd4 	bl	600c <bt_conn_lookup_handle>
	if (!conn) {
    4864:	4605      	mov	r5, r0
    4866:	2800      	cmp	r0, #0
    4868:	d0f5      	beq.n	4856 <bt_recv+0x32>
	acl(buf)->id = bt_conn_get_id(conn);
    486a:	f001 fe83 	bl	6574 <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    486e:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_get_id(conn);
    4870:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    4872:	4621      	mov	r1, r4
    4874:	4628      	mov	r0, r5
    4876:	f001 f985 	bl	5b84 <bt_conn_recv>
	bt_conn_unref(conn);
    487a:	4628      	mov	r0, r5
    487c:	f001 fc34 	bl	60e8 <bt_conn_unref>
		return 0;
    4880:	2000      	movs	r0, #0
}
    4882:	b011      	add	sp, #68	; 0x44
    4884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    4888:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    488a:	7832      	ldrb	r2, [r6, #0]
    488c:	2a13      	cmp	r2, #19
    488e:	f200 837e 	bhi.w	4f8e <bt_recv+0x76a>
    4892:	4093      	lsls	r3, r2
    4894:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    4898:	f000 8379 	beq.w	4f8e <bt_recv+0x76a>
    489c:	4040      	eors	r0, r0
    489e:	f380 8811 	msr	BASEPRI, r0
    48a2:	f04f 0004 	mov.w	r0, #4
    48a6:	df02      	svc	2
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    48a8:	4631      	mov	r1, r6
    48aa:	1d28      	adds	r0, r5, #4
    48ac:	f7fe fec2 	bl	3634 <atomic_test_bit>
    48b0:	b130      	cbz	r0, 48c0 <bt_recv+0x9c>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    48b2:	4628      	mov	r0, r5
    48b4:	2101      	movs	r1, #1
    48b6:	f001 faff 	bl	5eb8 <bt_conn_set_state>
		bt_le_scan_update(false);
    48ba:	4630      	mov	r0, r6
    48bc:	f7ff fada 	bl	3e74 <bt_le_scan_update>
	bt_conn_unref(conn);
    48c0:	4628      	mov	r0, r5
    48c2:	f001 fc11 	bl	60e8 <bt_conn_unref>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    48c6:	2106      	movs	r1, #6
    48c8:	48ba      	ldr	r0, [pc, #744]	; (4bb4 <bt_recv+0x390>)
    48ca:	f7fe feb3 	bl	3634 <atomic_test_bit>
    48ce:	2800      	cmp	r0, #0
    48d0:	d0c1      	beq.n	4856 <bt_recv+0x32>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    48d2:	2105      	movs	r1, #5
    48d4:	48b7      	ldr	r0, [pc, #732]	; (4bb4 <bt_recv+0x390>)
    48d6:	f7fe fead 	bl	3634 <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    48da:	2800      	cmp	r0, #0
    48dc:	d1bb      	bne.n	4856 <bt_recv+0x32>
		set_advertise_enable(true);
    48de:	2001      	movs	r0, #1
    48e0:	f7ff f862 	bl	39a8 <set_advertise_enable>
    48e4:	e7b7      	b.n	4856 <bt_recv+0x32>
    48e6:	68a6      	ldr	r6, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    48e8:	f8b6 0001 	ldrh.w	r0, [r6, #1]
    48ec:	f001 fb8e 	bl	600c <bt_conn_lookup_handle>
	if (!conn) {
    48f0:	4605      	mov	r5, r0
    48f2:	2800      	cmp	r0, #0
    48f4:	d0af      	beq.n	4856 <bt_recv+0x32>
	if (evt->status) {
    48f6:	7833      	ldrb	r3, [r6, #0]
    48f8:	7882      	ldrb	r2, [r0, #2]
    48fa:	b12b      	cbz	r3, 4908 <bt_recv+0xe4>
		if (conn->type == BT_CONN_TYPE_LE) {
    48fc:	2a00      	cmp	r2, #0
    48fe:	f040 836e 	bne.w	4fde <bt_recv+0x7ba>
			conn->required_sec_level = conn->sec_level;
    4902:	7a03      	ldrb	r3, [r0, #8]
    4904:	7243      	strb	r3, [r0, #9]
    4906:	e36a      	b.n	4fde <bt_recv+0x7ba>
	conn->encrypt = evt->encrypt;
    4908:	78f3      	ldrb	r3, [r6, #3]
    490a:	7283      	strb	r3, [r0, #10]
	if (conn->type == BT_CONN_TYPE_LE) {
    490c:	b9ba      	cbnz	r2, 493e <bt_recv+0x11a>
		if (conn->encrypt) {
    490e:	b10b      	cbz	r3, 4914 <bt_recv+0xf0>
		bt_smp_update_keys(conn);
    4910:	f005 ff21 	bl	a756 <bt_smp_update_keys>
	if (!conn->encrypt) {
    4914:	7aab      	ldrb	r3, [r5, #10]
    4916:	b9d3      	cbnz	r3, 494e <bt_recv+0x12a>
		conn->sec_level = BT_SECURITY_LOW;
    4918:	2301      	movs	r3, #1
    491a:	722b      	strb	r3, [r5, #8]
    491c:	e00f      	b.n	493e <bt_recv+0x11a>
    491e:	68a6      	ldr	r6, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    4920:	f8b6 0001 	ldrh.w	r0, [r6, #1]
    4924:	f001 fb72 	bl	600c <bt_conn_lookup_handle>
	if (!conn) {
    4928:	4605      	mov	r5, r0
    492a:	2800      	cmp	r0, #0
    492c:	d093      	beq.n	4856 <bt_recv+0x32>
	if (evt->status) {
    492e:	7831      	ldrb	r1, [r6, #0]
    4930:	b111      	cbz	r1, 4938 <bt_recv+0x114>
		bt_l2cap_encrypt_change(conn, evt->status);
    4932:	f001 fff1 	bl	6918 <bt_l2cap_encrypt_change>
    4936:	e78e      	b.n	4856 <bt_recv+0x32>
	if (conn->type == BT_CONN_TYPE_LE) {
    4938:	7883      	ldrb	r3, [r0, #2]
    493a:	2b00      	cmp	r3, #0
    493c:	d0e8      	beq.n	4910 <bt_recv+0xec>
	bt_l2cap_encrypt_change(conn, evt->status);
    493e:	4628      	mov	r0, r5
    4940:	7831      	ldrb	r1, [r6, #0]
    4942:	f001 ffe9 	bl	6918 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    4946:	4628      	mov	r0, r5
    4948:	f001 f8a2 	bl	5a90 <bt_conn_security_changed>
    494c:	e347      	b.n	4fde <bt_recv+0x7ba>
    494e:	4628      	mov	r0, r5
    4950:	f7fe feac 	bl	36ac <update_sec_level.part.13>
    4954:	e7f3      	b.n	493e <bt_recv+0x11a>
    4956:	68a1      	ldr	r1, [r4, #8]
	enh.status         = evt->status;
    4958:	780b      	ldrb	r3, [r1, #0]
    495a:	f88d 3020 	strb.w	r3, [sp, #32]
	enh.handle         = evt->handle;
    495e:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    4962:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.role           = evt->role;
    4966:	78cb      	ldrb	r3, [r1, #3]
    4968:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	enh.interval       = evt->interval;
    496c:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    4970:	f8ad 3037 	strh.w	r3, [sp, #55]	; 0x37
	enh.latency        = evt->latency;
    4974:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    4978:	f8ad 3039 	strh.w	r3, [sp, #57]	; 0x39
	enh.supv_timeout   = evt->supv_timeout;
    497c:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    4980:	f8ad 303b 	strh.w	r3, [sp, #59]	; 0x3b
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    4984:	ae09      	add	r6, sp, #36	; 0x24
	enh.clock_accuracy = evt->clock_accuracy;
    4986:	7c4b      	ldrb	r3, [r1, #17]
    4988:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    498c:	3104      	adds	r1, #4
    498e:	4630      	mov	r0, r6
    4990:	f7fe fe3c 	bl	360c <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    4994:	2500      	movs	r5, #0
    4996:	2206      	movs	r2, #6
    4998:	a904      	add	r1, sp, #16
    499a:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
    499e:	9504      	str	r5, [sp, #16]
    49a0:	f8ad 5014 	strh.w	r5, [sp, #20]
    49a4:	f7fb ffa1 	bl	8ea <memcpy>
		keys = bt_keys_find_irk(addr);
    49a8:	4630      	mov	r0, r6
    49aa:	f005 ffd1 	bl	a950 <bt_keys_find_irk>
		if (keys) {
    49ae:	4607      	mov	r7, r0
    49b0:	b1a8      	cbz	r0, 49de <bt_recv+0x1ba>
	if (id_addr != &enh.peer_addr) {
    49b2:	42b0      	cmp	r0, r6
    49b4:	d013      	beq.n	49de <bt_recv+0x1ba>
    49b6:	2206      	movs	r2, #6
    49b8:	f10d 0125 	add.w	r1, sp, #37	; 0x25
    49bc:	f10d 0031 	add.w	r0, sp, #49	; 0x31
    49c0:	f7fb ff93 	bl	8ea <memcpy>
		bt_addr_le_copy(&enh.peer_addr, id_addr);
    49c4:	4639      	mov	r1, r7
    49c6:	4630      	mov	r0, r6
    49c8:	f7fe fe20 	bl	360c <bt_addr_le_copy>
		enh.peer_addr.type += BT_ADDR_LE_PUBLIC_ID;
    49cc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    49d0:	3302      	adds	r3, #2
    49d2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	le_enh_conn_complete(&enh);
    49d6:	a808      	add	r0, sp, #32
		le_enh_conn_complete((void *)buf->data);
    49d8:	f7ff fdc0 	bl	455c <le_enh_conn_complete>
    49dc:	e73b      	b.n	4856 <bt_recv+0x32>
    49de:	2206      	movs	r2, #6
    49e0:	a906      	add	r1, sp, #24
    49e2:	f10d 0031 	add.w	r0, sp, #49	; 0x31
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    49e6:	9506      	str	r5, [sp, #24]
    49e8:	f8ad 501c 	strh.w	r5, [sp, #28]
    49ec:	f7fb ff7d 	bl	8ea <memcpy>
    49f0:	e7f1      	b.n	49d6 <bt_recv+0x1b2>
		le_enh_conn_complete((void *)buf->data);
    49f2:	68a0      	ldr	r0, [r4, #8]
    49f4:	e7f0      	b.n	49d8 <bt_recv+0x1b4>
    49f6:	68a5      	ldr	r5, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    49f8:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    49fc:	f001 fb06 	bl	600c <bt_conn_lookup_handle>
	if (!conn) {
    4a00:	4606      	mov	r6, r0
    4a02:	2800      	cmp	r0, #0
    4a04:	f43f af27 	beq.w	4856 <bt_recv+0x32>
	if (!evt->status) {
    4a08:	782b      	ldrb	r3, [r5, #0]
    4a0a:	b99b      	cbnz	r3, 4a34 <bt_recv+0x210>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    4a0c:	792a      	ldrb	r2, [r5, #4]
    4a0e:	78eb      	ldrb	r3, [r5, #3]
    4a10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4a14:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    4a18:	79aa      	ldrb	r2, [r5, #6]
    4a1a:	796b      	ldrb	r3, [r5, #5]
    4a1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4a20:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    4a24:	79eb      	ldrb	r3, [r5, #7]
    4a26:	7a2a      	ldrb	r2, [r5, #8]
    4a28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4a2c:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
		notify_le_param_updated(conn);
    4a30:	f000 ffa6 	bl	5980 <notify_le_param_updated>
	bt_conn_unref(conn);
    4a34:	4630      	mov	r0, r6
    4a36:	e05f      	b.n	4af8 <bt_recv+0x2d4>
    4a38:	68a6      	ldr	r6, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    4a3a:	f8b6 0001 	ldrh.w	r0, [r6, #1]
    4a3e:	f001 fae5 	bl	600c <bt_conn_lookup_handle>
	if (!conn) {
    4a42:	4605      	mov	r5, r0
    4a44:	2800      	cmp	r0, #0
    4a46:	f43f af06 	beq.w	4856 <bt_recv+0x32>
	if (!evt->status) {
    4a4a:	7833      	ldrb	r3, [r6, #0]
    4a4c:	b923      	cbnz	r3, 4a58 <bt_recv+0x234>
		memcpy(conn->le.features, evt->features,
    4a4e:	2208      	movs	r2, #8
    4a50:	1cf1      	adds	r1, r6, #3
    4a52:	3068      	adds	r0, #104	; 0x68
    4a54:	f7fb ff49 	bl	8ea <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    4a58:	4e57      	ldr	r6, [pc, #348]	; (4bb8 <bt_recv+0x394>)
    4a5a:	f896 2079 	ldrb.w	r2, [r6, #121]	; 0x79
    4a5e:	07d2      	lsls	r2, r2, #31
    4a60:	d50c      	bpl.n	4a7c <bt_recv+0x258>
    4a62:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
    4a66:	07db      	lsls	r3, r3, #31
    4a68:	d508      	bpl.n	4a7c <bt_recv+0x258>
		err = hci_le_set_phy(conn);
    4a6a:	4628      	mov	r0, r5
    4a6c:	f7ff fd2c 	bl	44c8 <hci_le_set_phy.isra.32>
		if (!err) {
    4a70:	b920      	cbnz	r0, 4a7c <bt_recv+0x258>
    4a72:	2180      	movs	r1, #128	; 0x80
    4a74:	1d28      	adds	r0, r5, #4
    4a76:	f7fe fdcc 	bl	3612 <atomic_or>
    4a7a:	e2b0      	b.n	4fde <bt_recv+0x7ba>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    4a7c:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    4a80:	069f      	lsls	r7, r3, #26
    4a82:	d56f      	bpl.n	4b64 <bt_recv+0x340>
    4a84:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    4a88:	069e      	lsls	r6, r3, #26
    4a8a:	d56b      	bpl.n	4b64 <bt_recv+0x340>
		err = hci_le_set_data_len(conn);
    4a8c:	4628      	mov	r0, r5
    4a8e:	f7ff fd3b 	bl	4508 <hci_le_set_data_len.isra.33>
		if (!err) {
    4a92:	2800      	cmp	r0, #0
    4a94:	d166      	bne.n	4b64 <bt_recv+0x340>
    4a96:	f44f 7180 	mov.w	r1, #256	; 0x100
    4a9a:	e7eb      	b.n	4a74 <bt_recv+0x250>
    4a9c:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    4a9e:	78d9      	ldrb	r1, [r3, #3]
    4aa0:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    4aa2:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    4aa4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4aa8:	f8ad 2020 	strh.w	r2, [sp, #32]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    4aac:	7959      	ldrb	r1, [r3, #5]
    4aae:	791a      	ldrb	r2, [r3, #4]
    4ab0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4ab4:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
	param.latency = sys_le16_to_cpu(evt->latency);
    4ab8:	799a      	ldrb	r2, [r3, #6]
    4aba:	79d9      	ldrb	r1, [r3, #7]
    4abc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4ac0:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
	param.timeout = sys_le16_to_cpu(evt->timeout);
    4ac4:	7a1a      	ldrb	r2, [r3, #8]
    4ac6:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    4ac8:	b2bd      	uxth	r5, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    4aca:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    4ace:	4628      	mov	r0, r5
	param.timeout = sys_le16_to_cpu(evt->timeout);
    4ad0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	conn = bt_conn_lookup_handle(handle);
    4ad4:	f001 fa9a 	bl	600c <bt_conn_lookup_handle>
	if (!conn) {
    4ad8:	4680      	mov	r8, r0
    4ada:	b920      	cbnz	r0, 4ae6 <bt_recv+0x2c2>
		return le_conn_param_neg_reply(handle,
    4adc:	2102      	movs	r1, #2
    4ade:	4628      	mov	r0, r5
    4ae0:	f7ff fe0e 	bl	4700 <le_conn_param_neg_reply>
    4ae4:	e6b7      	b.n	4856 <bt_recv+0x32>
	if (!le_param_req(conn, &param)) {
    4ae6:	a908      	add	r1, sp, #32
    4ae8:	f000 ff5e 	bl	59a8 <le_param_req>
    4aec:	b938      	cbnz	r0, 4afe <bt_recv+0x2da>
		err = le_conn_param_neg_reply(handle,
    4aee:	211e      	movs	r1, #30
    4af0:	4628      	mov	r0, r5
    4af2:	f7ff fe05 	bl	4700 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    4af6:	4640      	mov	r0, r8
	bt_conn_unref(conn);
    4af8:	f001 faf6 	bl	60e8 <bt_conn_unref>
    4afc:	e6ab      	b.n	4856 <bt_recv+0x32>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    4afe:	210e      	movs	r1, #14
    4b00:	f242 0020 	movw	r0, #8224	; 0x2020
    4b04:	f7fe fe2a 	bl	375c <bt_hci_cmd_create>
	if (!buf) {
    4b08:	4606      	mov	r6, r0
    4b0a:	2800      	cmp	r0, #0
    4b0c:	d0f3      	beq.n	4af6 <bt_recv+0x2d2>
	cp = net_buf_add(buf, sizeof(*cp));
    4b0e:	210e      	movs	r1, #14
    4b10:	3008      	adds	r0, #8
    4b12:	f013 f85b 	bl	17bcc <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    4b16:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    4b18:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    4b1a:	2100      	movs	r1, #0
    4b1c:	f7fb ff11 	bl	942 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    4b20:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    4b24:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    4b26:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    4b2a:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    4b2c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    4b30:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    4b32:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
	cp->handle = sys_cpu_to_le16(handle);
    4b36:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    4b38:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    4b3a:	4631      	mov	r1, r6
    4b3c:	f242 0020 	movw	r0, #8224	; 0x2020
    4b40:	f7ff f926 	bl	3d90 <bt_hci_cmd_send>
    4b44:	e7d7      	b.n	4af6 <bt_recv+0x2d2>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4b46:	68a3      	ldr	r3, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    4b48:	8818      	ldrh	r0, [r3, #0]
    4b4a:	f001 fa5f 	bl	600c <bt_conn_lookup_handle>
	if (!conn) {
    4b4e:	4605      	mov	r5, r0
    4b50:	2800      	cmp	r0, #0
    4b52:	f43f ae80 	beq.w	4856 <bt_recv+0x32>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    4b56:	2108      	movs	r1, #8
    4b58:	3004      	adds	r0, #4
    4b5a:	f7fe fd89 	bl	3670 <atomic_test_and_clear_bit>
    4b5e:	2800      	cmp	r0, #0
    4b60:	f000 823d 	beq.w	4fde <bt_recv+0x7ba>
	update_conn_param(conn);
    4b64:	4628      	mov	r0, r5
    4b66:	f7fe fd93 	bl	3690 <update_conn_param>
    4b6a:	e238      	b.n	4fde <bt_recv+0x7ba>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4b6c:	68a3      	ldr	r3, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    4b6e:	f8b3 0001 	ldrh.w	r0, [r3, #1]
    4b72:	f001 fa4b 	bl	600c <bt_conn_lookup_handle>
	if (!conn) {
    4b76:	4605      	mov	r5, r0
    4b78:	2800      	cmp	r0, #0
    4b7a:	f43f ae6c 	beq.w	4856 <bt_recv+0x32>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    4b7e:	1d06      	adds	r6, r0, #4
    4b80:	2107      	movs	r1, #7
    4b82:	4630      	mov	r0, r6
    4b84:	f7fe fd74 	bl	3670 <atomic_test_and_clear_bit>
    4b88:	2800      	cmp	r0, #0
    4b8a:	f000 8228 	beq.w	4fde <bt_recv+0x7ba>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    4b8e:	4b0a      	ldr	r3, [pc, #40]	; (4bb8 <bt_recv+0x394>)
    4b90:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    4b94:	0698      	lsls	r0, r3, #26
    4b96:	d5e5      	bpl.n	4b64 <bt_recv+0x340>
    4b98:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    4b9c:	0699      	lsls	r1, r3, #26
    4b9e:	d5e1      	bpl.n	4b64 <bt_recv+0x340>
		err = hci_le_set_data_len(conn);
    4ba0:	4628      	mov	r0, r5
    4ba2:	f7ff fcb1 	bl	4508 <hci_le_set_data_len.isra.33>
		if (!err) {
    4ba6:	2800      	cmp	r0, #0
    4ba8:	d1dc      	bne.n	4b64 <bt_recv+0x340>
    4baa:	f44f 7180 	mov.w	r1, #256	; 0x100
    4bae:	4630      	mov	r0, r6
    4bb0:	e761      	b.n	4a76 <bt_recv+0x252>
    4bb2:	bf00      	nop
    4bb4:	2000dd68 	.word	0x2000dd68
    4bb8:	2000dcf8 	.word	0x2000dcf8
    4bbc:	68a5      	ldr	r5, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    4bbe:	8828      	ldrh	r0, [r5, #0]
    4bc0:	f001 fa24 	bl	600c <bt_conn_lookup_handle>
	if (!conn) {
    4bc4:	4606      	mov	r6, r0
    4bc6:	2800      	cmp	r0, #0
    4bc8:	f43f ae45 	beq.w	4856 <bt_recv+0x32>
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    4bcc:	f8d5 2002 	ldr.w	r2, [r5, #2]
    4bd0:	f8d5 3006 	ldr.w	r3, [r5, #6]
    4bd4:	4313      	orrs	r3, r2
    4bd6:	d11f      	bne.n	4c18 <bt_recv+0x3f4>
    4bd8:	896b      	ldrh	r3, [r5, #10]
    4bda:	b9eb      	cbnz	r3, 4c18 <bt_recv+0x3f4>
    4bdc:	a908      	add	r1, sp, #32
    4bde:	f005 fe21 	bl	a824 <bt_smp_get_tk>
    4be2:	b1c8      	cbz	r0, 4c18 <bt_recv+0x3f4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    4be4:	2112      	movs	r1, #18
    4be6:	f242 001a 	movw	r0, #8218	; 0x201a
    4bea:	f7fe fdb7 	bl	375c <bt_hci_cmd_create>
		if (!buf) {
    4bee:	4607      	mov	r7, r0
    4bf0:	2800      	cmp	r0, #0
    4bf2:	f43f af1f 	beq.w	4a34 <bt_recv+0x210>
		cp = net_buf_add(buf, sizeof(*cp));
    4bf6:	2112      	movs	r1, #18
    4bf8:	3008      	adds	r0, #8
    4bfa:	f012 ffe7 	bl	17bcc <net_buf_simple_add>
		cp->handle = evt->handle;
    4bfe:	882b      	ldrh	r3, [r5, #0]
    4c00:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(cp->ltk, tk, sizeof(cp->ltk));
    4c04:	2210      	movs	r2, #16
    4c06:	a908      	add	r1, sp, #32
    4c08:	f7fb fe6f 	bl	8ea <memcpy>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    4c0c:	4639      	mov	r1, r7
    4c0e:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    4c12:	f7ff f8bd 	bl	3d90 <bt_hci_cmd_send>
    4c16:	e70d      	b.n	4a34 <bt_recv+0x210>
	if (!conn->le.keys) {
    4c18:	6f33      	ldr	r3, [r6, #112]	; 0x70
    4c1a:	2b00      	cmp	r3, #0
    4c1c:	f040 8228 	bne.w	5070 <bt_recv+0x84c>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    4c20:	f106 0748 	add.w	r7, r6, #72	; 0x48
    4c24:	4639      	mov	r1, r7
    4c26:	2020      	movs	r0, #32
    4c28:	f005 fe74 	bl	a914 <bt_keys_find>
    4c2c:	6730      	str	r0, [r6, #112]	; 0x70
		if (!conn->le.keys) {
    4c2e:	2800      	cmp	r0, #0
    4c30:	f040 821e 	bne.w	5070 <bt_recv+0x84c>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
    4c34:	4639      	mov	r1, r7
    4c36:	2001      	movs	r0, #1
    4c38:	f005 fe6c 	bl	a914 <bt_keys_find>
    4c3c:	6730      	str	r0, [r6, #112]	; 0x70
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    4c3e:	2800      	cmp	r0, #0
    4c40:	d055      	beq.n	4cee <bt_recv+0x4ca>
    4c42:	8981      	ldrh	r1, [r0, #12]
    4c44:	068a      	lsls	r2, r1, #26
    4c46:	d52c      	bpl.n	4ca2 <bt_recv+0x47e>
	    evt->rand == 0 && evt->ediv == 0) {
    4c48:	f8d5 2002 	ldr.w	r2, [r5, #2]
    4c4c:	f8d5 3006 	ldr.w	r3, [r5, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    4c50:	4313      	orrs	r3, r2
    4c52:	d126      	bne.n	4ca2 <bt_recv+0x47e>
	    evt->rand == 0 && evt->ediv == 0) {
    4c54:	f8b5 800a 	ldrh.w	r8, [r5, #10]
    4c58:	f1b8 0f00 	cmp.w	r8, #0
    4c5c:	d121      	bne.n	4ca2 <bt_recv+0x47e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    4c5e:	2112      	movs	r1, #18
    4c60:	f242 001a 	movw	r0, #8218	; 0x201a
    4c64:	f7fe fd7a 	bl	375c <bt_hci_cmd_create>
		if (!buf) {
    4c68:	4607      	mov	r7, r0
    4c6a:	2800      	cmp	r0, #0
    4c6c:	f43f aee2 	beq.w	4a34 <bt_recv+0x210>
		cp = net_buf_add(buf, sizeof(*cp));
    4c70:	2112      	movs	r1, #18
    4c72:	3008      	adds	r0, #8
    4c74:	f012 ffaa 	bl	17bcc <net_buf_simple_add>
		cp->handle = evt->handle;
    4c78:	882b      	ldrh	r3, [r5, #0]
    4c7a:	4605      	mov	r5, r0
    4c7c:	f825 3b02 	strh.w	r3, [r5], #2
		memcpy(cp->ltk, conn->le.keys->ltk.val,
    4c80:	6f31      	ldr	r1, [r6, #112]	; 0x70
    4c82:	79ca      	ldrb	r2, [r1, #7]
    4c84:	311a      	adds	r1, #26
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    4c86:	4628      	mov	r0, r5
    4c88:	f7fb fe2f 	bl	8ea <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    4c8c:	6f33      	ldr	r3, [r6, #112]	; 0x70
    4c8e:	79d8      	ldrb	r0, [r3, #7]
    4c90:	280f      	cmp	r0, #15
    4c92:	d8bb      	bhi.n	4c0c <bt_recv+0x3e8>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    4c94:	f1c0 0210 	rsb	r2, r0, #16
    4c98:	2100      	movs	r1, #0
    4c9a:	4428      	add	r0, r5
    4c9c:	f7fb fe51 	bl	942 <memset>
    4ca0:	e7b4      	b.n	4c0c <bt_recv+0x3e8>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    4ca2:	07cb      	lsls	r3, r1, #31
    4ca4:	d523      	bpl.n	4cee <bt_recv+0x4ca>
    4ca6:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    4caa:	f8d5 9006 	ldr.w	r9, [r5, #6]
    4cae:	f8d5 8002 	ldr.w	r8, [r5, #2]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    4cb2:	454b      	cmp	r3, r9
    4cb4:	bf08      	it	eq
    4cb6:	4542      	cmpeq	r2, r8
    4cb8:	d119      	bne.n	4cee <bt_recv+0x4ca>
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    4cba:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
    4cbe:	896b      	ldrh	r3, [r5, #10]
    4cc0:	429a      	cmp	r2, r3
    4cc2:	d114      	bne.n	4cee <bt_recv+0x4ca>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    4cc4:	2112      	movs	r1, #18
    4cc6:	f242 001a 	movw	r0, #8218	; 0x201a
    4cca:	f7fe fd47 	bl	375c <bt_hci_cmd_create>
		if (!buf) {
    4cce:	4607      	mov	r7, r0
    4cd0:	2800      	cmp	r0, #0
    4cd2:	f43f aeaf 	beq.w	4a34 <bt_recv+0x210>
		cp = net_buf_add(buf, sizeof(*cp));
    4cd6:	2112      	movs	r1, #18
    4cd8:	3008      	adds	r0, #8
    4cda:	f012 ff77 	bl	17bcc <net_buf_simple_add>
		cp->handle = evt->handle;
    4cde:	882b      	ldrh	r3, [r5, #0]
    4ce0:	4605      	mov	r5, r0
    4ce2:	f825 3b02 	strh.w	r3, [r5], #2
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    4ce6:	6f31      	ldr	r1, [r6, #112]	; 0x70
    4ce8:	79ca      	ldrb	r2, [r1, #7]
    4cea:	3152      	adds	r1, #82	; 0x52
    4cec:	e7cb      	b.n	4c86 <bt_recv+0x462>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    4cee:	2102      	movs	r1, #2
    4cf0:	f242 001b 	movw	r0, #8219	; 0x201b
	le_ltk_neg_reply(evt->handle);
    4cf4:	882f      	ldrh	r7, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    4cf6:	f7fe fd31 	bl	375c <bt_hci_cmd_create>
	if (!buf) {
    4cfa:	4605      	mov	r5, r0
    4cfc:	2800      	cmp	r0, #0
    4cfe:	f43f ae99 	beq.w	4a34 <bt_recv+0x210>
	cp = net_buf_add(buf, sizeof(*cp));
    4d02:	2102      	movs	r1, #2
    4d04:	3008      	adds	r0, #8
    4d06:	f012 ff61 	bl	17bcc <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    4d0a:	4629      	mov	r1, r5
	cp->handle = handle;
    4d0c:	8007      	strh	r7, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    4d0e:	f242 001b 	movw	r0, #8219	; 0x201b
    4d12:	e77e      	b.n	4c12 <bt_recv+0x3ee>
    4d14:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4d16:	48b3      	ldr	r0, [pc, #716]	; (4fe4 <bt_recv+0x7c0>)
    4d18:	f06f 0110 	mvn.w	r1, #16
    4d1c:	f7fe fc97 	bl	364e <atomic_and>
	if (!evt->status) {
    4d20:	7833      	ldrb	r3, [r6, #0]
    4d22:	b943      	cbnz	r3, 4d36 <bt_recv+0x512>
		memcpy(pub_key, evt->key, 64);
    4d24:	1c71      	adds	r1, r6, #1
    4d26:	2240      	movs	r2, #64	; 0x40
    4d28:	48af      	ldr	r0, [pc, #700]	; (4fe8 <bt_recv+0x7c4>)
    4d2a:	f7fb fdde 	bl	8ea <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    4d2e:	2108      	movs	r1, #8
    4d30:	48ac      	ldr	r0, [pc, #688]	; (4fe4 <bt_recv+0x7c0>)
    4d32:	f7fe fc6e 	bl	3612 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    4d36:	4bad      	ldr	r3, [pc, #692]	; (4fec <bt_recv+0x7c8>)
    4d38:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    4d3a:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    4d3c:	2d00      	cmp	r5, #0
    4d3e:	f43f ad8a 	beq.w	4856 <bt_recv+0x32>
		cb->func(evt->status ? NULL : evt->key);
    4d42:	7832      	ldrb	r2, [r6, #0]
    4d44:	682b      	ldr	r3, [r5, #0]
    4d46:	2a00      	cmp	r2, #0
    4d48:	bf0c      	ite	eq
    4d4a:	4638      	moveq	r0, r7
    4d4c:	2000      	movne	r0, #0
    4d4e:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    4d50:	686d      	ldr	r5, [r5, #4]
    4d52:	e7f3      	b.n	4d3c <bt_recv+0x518>
	if (dh_key_cb) {
    4d54:	4da6      	ldr	r5, [pc, #664]	; (4ff0 <bt_recv+0x7cc>)
    4d56:	68a0      	ldr	r0, [r4, #8]
    4d58:	682a      	ldr	r2, [r5, #0]
    4d5a:	2a00      	cmp	r2, #0
    4d5c:	f43f ad7b 	beq.w	4856 <bt_recv+0x32>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    4d60:	7803      	ldrb	r3, [r0, #0]
    4d62:	b923      	cbnz	r3, 4d6e <bt_recv+0x54a>
    4d64:	3001      	adds	r0, #1
    4d66:	4790      	blx	r2
		dh_key_cb = NULL;
    4d68:	2300      	movs	r3, #0
    4d6a:	602b      	str	r3, [r5, #0]
    4d6c:	e573      	b.n	4856 <bt_recv+0x32>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    4d6e:	2000      	movs	r0, #0
    4d70:	e7f9      	b.n	4d66 <bt_recv+0x542>
	u8_t num_reports = net_buf_pull_u8(buf);
    4d72:	4628      	mov	r0, r5
    4d74:	f012 ff82 	bl	17c7c <net_buf_simple_pull_u8>
		if (scan_dev_found_cb) {
    4d78:	f8df a290 	ldr.w	sl, [pc, #656]	; 500c <bt_recv+0x7e8>
	u8_t num_reports = net_buf_pull_u8(buf);
    4d7c:	9002      	str	r0, [sp, #8]
	while (num_reports--) {
    4d7e:	9b02      	ldr	r3, [sp, #8]
    4d80:	2b00      	cmp	r3, #0
    4d82:	f43f ad68 	beq.w	4856 <bt_recv+0x32>
		info = (void *)buf->data;
    4d86:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    4d88:	2109      	movs	r1, #9
    4d8a:	4628      	mov	r0, r5
    4d8c:	f012 ff6e 	bl	17c6c <net_buf_simple_pull>
		rssi = info->data[info->length];
    4d90:	7a33      	ldrb	r3, [r6, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    4d92:	46b0      	mov	r8, r6
		rssi = info->data[info->length];
    4d94:	4433      	add	r3, r6
    4d96:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    4d9a:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    4d9e:	3b02      	subs	r3, #2
    4da0:	2b01      	cmp	r3, #1
    4da2:	d83c      	bhi.n	4e1e <bt_recv+0x5fa>
			bt_addr_le_copy(&id_addr, &info->addr);
    4da4:	4641      	mov	r1, r8
    4da6:	a808      	add	r0, sp, #32
    4da8:	f7fe fc30 	bl	360c <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    4dac:	f89d 3020 	ldrb.w	r3, [sp, #32]
    4db0:	3b02      	subs	r3, #2
    4db2:	f88d 3020 	strb.w	r3, [sp, #32]
		if (scan_dev_found_cb) {
    4db6:	f8da 3000 	ldr.w	r3, [sl]
    4dba:	b1c3      	cbz	r3, 4dee <bt_recv+0x5ca>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    4dbc:	4628      	mov	r0, r5
    4dbe:	f012 ff6d 	bl	17c9c <net_buf_simple_headroom>
			buf->len = info->length;
    4dc2:	7a33      	ldrb	r3, [r6, #8]
	state->len = buf->len;
    4dc4:	f8b4 900c 	ldrh.w	r9, [r4, #12]
    4dc8:	81a3      	strh	r3, [r4, #12]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    4dca:	7832      	ldrb	r2, [r6, #0]
    4dcc:	9400      	str	r4, [sp, #0]
	state->offset = net_buf_simple_headroom(buf);
    4dce:	9003      	str	r0, [sp, #12]
    4dd0:	462b      	mov	r3, r5
    4dd2:	fa4f f18b 	sxtb.w	r1, fp
    4dd6:	a808      	add	r0, sp, #32
    4dd8:	f8da 7000 	ldr.w	r7, [sl]
    4ddc:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    4dde:	6923      	ldr	r3, [r4, #16]
    4de0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	buf->len = state->len;
    4de4:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    4de8:	fa13 f382 	uxtah	r3, r3, r2
    4dec:	60a3      	str	r3, [r4, #8]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4dee:	2108      	movs	r1, #8
    4df0:	487c      	ldr	r0, [pc, #496]	; (4fe4 <bt_recv+0x7c0>)
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    4df2:	7837      	ldrb	r7, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4df4:	f7fe fc1e 	bl	3634 <atomic_test_bit>
    4df8:	b928      	cbnz	r0, 4e06 <bt_recv+0x5e2>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    4dfa:	2f01      	cmp	r7, #1
    4dfc:	d803      	bhi.n	4e06 <bt_recv+0x5e2>
    4dfe:	4641      	mov	r1, r8
    4e00:	a808      	add	r0, sp, #32
    4e02:	f7ff fae7 	bl	43d4 <check_pending_conn.part.30>
		net_buf_pull(buf, info->length + sizeof(rssi));
    4e06:	7a31      	ldrb	r1, [r6, #8]
    4e08:	4628      	mov	r0, r5
    4e0a:	3101      	adds	r1, #1
    4e0c:	f012 ff2e 	bl	17c6c <net_buf_simple_pull>
    4e10:	9b02      	ldr	r3, [sp, #8]
    4e12:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
    4e16:	fa5f f389 	uxtb.w	r3, r9
    4e1a:	9302      	str	r3, [sp, #8]
    4e1c:	e7af      	b.n	4d7e <bt_recv+0x55a>
		keys = bt_keys_find_irk(addr);
    4e1e:	4640      	mov	r0, r8
    4e20:	f005 fd96 	bl	a950 <bt_keys_find_irk>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    4e24:	2800      	cmp	r0, #0
    4e26:	bf14      	ite	ne
    4e28:	4601      	movne	r1, r0
    4e2a:	4641      	moveq	r1, r8
    4e2c:	a808      	add	r0, sp, #32
    4e2e:	f7fe fbed 	bl	360c <bt_addr_le_copy>
    4e32:	e7c0      	b.n	4db6 <bt_recv+0x592>
	num_reports = net_buf_pull_u8(buf);
    4e34:	4628      	mov	r0, r5
    4e36:	f012 ff21 	bl	17c7c <net_buf_simple_pull_u8>
    4e3a:	4b6e      	ldr	r3, [pc, #440]	; (4ff4 <bt_recv+0x7d0>)
		if (scan_dev_found_cb) {
    4e3c:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 500c <bt_recv+0x7e8>
				pointer_index = 0;
    4e40:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 5010 <bt_recv+0x7ec>
	num_reports = net_buf_pull_u8(buf);
    4e44:	7018      	strb	r0, [r3, #0]
    4e46:	9302      	str	r3, [sp, #8]
	while (num_reports--) {
    4e48:	9b02      	ldr	r3, [sp, #8]
    4e4a:	9902      	ldr	r1, [sp, #8]
    4e4c:	781b      	ldrb	r3, [r3, #0]
    4e4e:	1e5a      	subs	r2, r3, #1
    4e50:	700a      	strb	r2, [r1, #0]
    4e52:	2b00      	cmp	r3, #0
    4e54:	f43f acff 	beq.w	4856 <bt_recv+0x32>
		info = (void *)buf->data;
    4e58:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    4e5a:	2118      	movs	r1, #24
    4e5c:	4628      	mov	r0, r5
    4e5e:	f012 ff05 	bl	17c6c <net_buf_simple_pull>
		net_buf_pull(buf, 2);   // remove 0x81 0xFF 
    4e62:	2102      	movs	r1, #2
    4e64:	4628      	mov	r0, r5
    4e66:	f012 ff01 	bl	17c6c <net_buf_simple_pull>
		rssi = info->data[info->length - 2];
    4e6a:	7df3      	ldrb	r3, [r6, #23]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    4e6c:	46b1      	mov	r9, r6
		rssi = info->data[info->length - 2];
    4e6e:	4433      	add	r3, r6
    4e70:	f893 a016 	ldrb.w	sl, [r3, #22]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    4e74:	f819 3f02 	ldrb.w	r3, [r9, #2]!
    4e78:	3b02      	subs	r3, #2
    4e7a:	2b01      	cmp	r3, #1
    4e7c:	d840      	bhi.n	4f00 <bt_recv+0x6dc>
			bt_addr_le_copy(&id_addr, &info->addr);
    4e7e:	4649      	mov	r1, r9
    4e80:	a808      	add	r0, sp, #32
    4e82:	f7fe fbc3 	bl	360c <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    4e86:	f89d 3020 	ldrb.w	r3, [sp, #32]
    4e8a:	3b02      	subs	r3, #2
    4e8c:	f88d 3020 	strb.w	r3, [sp, #32]
		if (scan_dev_found_cb) {
    4e90:	f8db 3000 	ldr.w	r3, [fp]
		buf->len = info->length;
    4e94:	7df2      	ldrb	r2, [r6, #23]
    4e96:	81a2      	strh	r2, [r4, #12]
		if (scan_dev_found_cb) {
    4e98:	b323      	cbz	r3, 4ee4 <bt_recv+0x6c0>
			if(info->frag == 0x01){  //First fragment - more packets to come;
    4e9a:	7873      	ldrb	r3, [r6, #1]
    4e9c:	2b01      	cmp	r3, #1
    4e9e:	d13a      	bne.n	4f16 <bt_recv+0x6f2>
				memcpy(&copied_data[pointer_index], buf->b.data, buf->b.len);
    4ea0:	4b55      	ldr	r3, [pc, #340]	; (4ff8 <bt_recv+0x7d4>)
    4ea2:	f8b8 0000 	ldrh.w	r0, [r8]
				memcpy(temp_data, buf->b.data , buf->b.len);
    4ea6:	4f55      	ldr	r7, [pc, #340]	; (4ffc <bt_recv+0x7d8>)
				memcpy(&copied_data[pointer_index], buf->b.data, buf->b.len);
    4ea8:	68a1      	ldr	r1, [r4, #8]
    4eaa:	4418      	add	r0, r3
    4eac:	f7fb fd1d 	bl	8ea <memcpy>
				memcpy(temp_data, buf->b.data , buf->b.len);
    4eb0:	89a2      	ldrh	r2, [r4, #12]
    4eb2:	68a1      	ldr	r1, [r4, #8]
    4eb4:	4638      	mov	r0, r7
    4eb6:	f7fb fd18 	bl	8ea <memcpy>
				pointer_index += (buf->b.len - 2);
    4eba:	f8b8 3000 	ldrh.w	r3, [r8]
    4ebe:	89a2      	ldrh	r2, [r4, #12]
    4ec0:	3b02      	subs	r3, #2
    4ec2:	4413      	add	r3, r2
    4ec4:	f8a8 3000 	strh.w	r3, [r8]
				if(temp_data[100] == 0xDD){
    4ec8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
    4ecc:	2bdd      	cmp	r3, #221	; 0xdd
    4ece:	d102      	bne.n	4ed6 <bt_recv+0x6b2>
					printk("DD \n");
    4ed0:	484b      	ldr	r0, [pc, #300]	; (5000 <bt_recv+0x7dc>)
    4ed2:	f7fc fc4f 	bl	1774 <printk>
				if(temp_data[100] == 0xEE){
    4ed6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
    4eda:	2bee      	cmp	r3, #238	; 0xee
    4edc:	d102      	bne.n	4ee4 <bt_recv+0x6c0>
					printk("EE \n");
    4ede:	4849      	ldr	r0, [pc, #292]	; (5004 <bt_recv+0x7e0>)
    4ee0:	f7fc fc48 	bl	1774 <printk>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4ee4:	2108      	movs	r1, #8
    4ee6:	483f      	ldr	r0, [pc, #252]	; (4fe4 <bt_recv+0x7c0>)
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    4ee8:	7836      	ldrb	r6, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4eea:	f7fe fba3 	bl	3634 <atomic_test_bit>
    4eee:	2800      	cmp	r0, #0
    4ef0:	d1aa      	bne.n	4e48 <bt_recv+0x624>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    4ef2:	2e01      	cmp	r6, #1
    4ef4:	d8a8      	bhi.n	4e48 <bt_recv+0x624>
    4ef6:	4649      	mov	r1, r9
    4ef8:	a808      	add	r0, sp, #32
    4efa:	f7ff fa6b 	bl	43d4 <check_pending_conn.part.30>
    4efe:	e7a3      	b.n	4e48 <bt_recv+0x624>
		keys = bt_keys_find_irk(addr);
    4f00:	4648      	mov	r0, r9
    4f02:	f005 fd25 	bl	a950 <bt_keys_find_irk>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    4f06:	2800      	cmp	r0, #0
    4f08:	bf14      	ite	ne
    4f0a:	4601      	movne	r1, r0
    4f0c:	4649      	moveq	r1, r9
    4f0e:	a808      	add	r0, sp, #32
    4f10:	f7fe fb7c 	bl	360c <bt_addr_le_copy>
    4f14:	e7bc      	b.n	4e90 <bt_recv+0x66c>
			}else if (info->frag == 0x02){  //last paacket of the data or complete data which is less than 254 bytes
    4f16:	2b02      	cmp	r3, #2
		rssi = info->data[info->length - 2];
    4f18:	fa4f fa8a 	sxtb.w	sl, sl
			}else if (info->frag == 0x02){  //last paacket of the data or complete data which is less than 254 bytes
    4f1c:	d127      	bne.n	4f6e <bt_recv+0x74a>
				memcpy(&copied_data[pointer_index], buf->b.data , buf->b.len);
    4f1e:	4b36      	ldr	r3, [pc, #216]	; (4ff8 <bt_recv+0x7d4>)
    4f20:	f8b8 0000 	ldrh.w	r0, [r8]
    4f24:	68a1      	ldr	r1, [r4, #8]
    4f26:	4418      	add	r0, r3
    4f28:	f7fb fcdf 	bl	8ea <memcpy>
				memcpy(temp_data, buf->b.data , buf->b.len);
    4f2c:	89a2      	ldrh	r2, [r4, #12]
    4f2e:	68a1      	ldr	r1, [r4, #8]
    4f30:	4832      	ldr	r0, [pc, #200]	; (4ffc <bt_recv+0x7d8>)
    4f32:	f7fb fcda 	bl	8ea <memcpy>
				pointer_index += (buf->b.len - 2);
    4f36:	f8b8 2000 	ldrh.w	r2, [r8]
    4f3a:	89a3      	ldrh	r3, [r4, #12]
				buffer_size1 = (buf->b.len - 2);
    4f3c:	4932      	ldr	r1, [pc, #200]	; (5008 <bt_recv+0x7e4>)
				pointer_index += (buf->b.len - 2);
    4f3e:	3a02      	subs	r2, #2
    4f40:	441a      	add	r2, r3
				buffer_size1 = (buf->b.len - 2);
    4f42:	3b02      	subs	r3, #2
				pointer_index += (buf->b.len - 2);
    4f44:	b292      	uxth	r2, r2
				buffer_size1 = (buf->b.len - 2);
    4f46:	800b      	strh	r3, [r1, #0]
				net_buf_add_mem(buf, copied_data, pointer_index);
    4f48:	4628      	mov	r0, r5
    4f4a:	492b      	ldr	r1, [pc, #172]	; (4ff8 <bt_recv+0x7d4>)
				pointer_index += (buf->b.len - 2);
    4f4c:	f8a8 2000 	strh.w	r2, [r8]
				net_buf_add_mem(buf, copied_data, pointer_index);
    4f50:	f012 fe42 	bl	17bd8 <net_buf_simple_add_mem>
				net_buf_pull(buf, info->length);
    4f54:	7df1      	ldrb	r1, [r6, #23]
    4f56:	4628      	mov	r0, r5
    4f58:	f012 fe88 	bl	17c6c <net_buf_simple_pull>
				scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    4f5c:	7832      	ldrb	r2, [r6, #0]
    4f5e:	9400      	str	r4, [sp, #0]
    4f60:	f8db 7000 	ldr.w	r7, [fp]
    4f64:	462b      	mov	r3, r5
    4f66:	4651      	mov	r1, sl
    4f68:	a808      	add	r0, sp, #32
    4f6a:	47b8      	blx	r7
    4f6c:	e7ba      	b.n	4ee4 <bt_recv+0x6c0>
			else if(info->frag == 0x03){        // packet received on primary adv channel
    4f6e:	2b03      	cmp	r3, #3
    4f70:	d1b8      	bne.n	4ee4 <bt_recv+0x6c0>
				pointer_index = 0;
    4f72:	2100      	movs	r1, #0
				memset(copied_data, 0, 1500);
    4f74:	f240 52dc 	movw	r2, #1500	; 0x5dc
    4f78:	481f      	ldr	r0, [pc, #124]	; (4ff8 <bt_recv+0x7d4>)
				pointer_index = 0;
    4f7a:	f8a8 1000 	strh.w	r1, [r8]
				memset(copied_data, 0, 1500);
    4f7e:	f7fb fce0 	bl	942 <memset>
    4f82:	e7eb      	b.n	4f5c <bt_recv+0x738>
		net_buf_unref(buf);
    4f84:	f012 fdc4 	bl	17b10 <net_buf_unref>
		return -EINVAL;
    4f88:	f06f 0015 	mvn.w	r0, #21
    4f8c:	e479      	b.n	4882 <bt_recv+0x5e>
	net_buf_pull(buf, sizeof(*hdr));
    4f8e:	f104 0508 	add.w	r5, r4, #8
    4f92:	2102      	movs	r1, #2
    4f94:	4628      	mov	r0, r5
    4f96:	f012 fe69 	bl	17c6c <net_buf_simple_pull>
	switch (hdr->evt) {
    4f9a:	7833      	ldrb	r3, [r6, #0]
    4f9c:	2b08      	cmp	r3, #8
    4f9e:	f43f aca2 	beq.w	48e6 <bt_recv+0xc2>
    4fa2:	d837      	bhi.n	5014 <bt_recv+0x7f0>
    4fa4:	2b05      	cmp	r3, #5
    4fa6:	f47f ac56 	bne.w	4856 <bt_recv+0x32>
    4faa:	68a7      	ldr	r7, [r4, #8]
	if (evt->status) {
    4fac:	783e      	ldrb	r6, [r7, #0]
    4fae:	2e00      	cmp	r6, #0
    4fb0:	f47f ac51 	bne.w	4856 <bt_recv+0x32>
	conn = bt_conn_lookup_handle(handle);
    4fb4:	f8b7 0001 	ldrh.w	r0, [r7, #1]
    4fb8:	f001 f828 	bl	600c <bt_conn_lookup_handle>
	if (!conn) {
    4fbc:	4605      	mov	r5, r0
    4fbe:	2800      	cmp	r0, #0
    4fc0:	f43f ac81 	beq.w	48c6 <bt_recv+0xa2>
	conn->err = evt->reason;
    4fc4:	78fb      	ldrb	r3, [r7, #3]
    4fc6:	72c3      	strb	r3, [r0, #11]
	k_call_stacks_analyze();
    4fc8:	f019 ffd6 	bl	1ef78 <k_call_stacks_analyze>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4fcc:	4631      	mov	r1, r6
    4fce:	4628      	mov	r0, r5
    4fd0:	f000 ff72 	bl	5eb8 <bt_conn_set_state>
	conn->handle = 0;
    4fd4:	802e      	strh	r6, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    4fd6:	78ae      	ldrb	r6, [r5, #2]
    4fd8:	2e00      	cmp	r6, #0
    4fda:	f43f ac65 	beq.w	48a8 <bt_recv+0x84>
	bt_conn_unref(conn);
    4fde:	4628      	mov	r0, r5
    4fe0:	e58a      	b.n	4af8 <bt_recv+0x2d4>
    4fe2:	bf00      	nop
    4fe4:	2000dd68 	.word	0x2000dd68
    4fe8:	20000392 	.word	0x20000392
    4fec:	200003d4 	.word	0x200003d4
    4ff0:	2000038c 	.word	0x2000038c
    4ff4:	20003aa2 	.word	0x20003aa2
    4ff8:	20003bc4 	.word	0x20003bc4
    4ffc:	20003aa8 	.word	0x20003aa8
    5000:	0002102f 	.word	0x0002102f
    5004:	00021034 	.word	0x00021034
    5008:	20000378 	.word	0x20000378
    500c:	200003dc 	.word	0x200003dc
    5010:	20000390 	.word	0x20000390
	switch (hdr->evt) {
    5014:	2b30      	cmp	r3, #48	; 0x30
    5016:	f43f ac82 	beq.w	491e <bt_recv+0xfa>
    501a:	2b3e      	cmp	r3, #62	; 0x3e
    501c:	f47f ac1b 	bne.w	4856 <bt_recv+0x32>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    5020:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    5022:	2101      	movs	r1, #1
    5024:	4628      	mov	r0, r5
    5026:	f012 fe21 	bl	17c6c <net_buf_simple_pull>
	switch (evt->subevent) {
    502a:	7833      	ldrb	r3, [r6, #0]
    502c:	3b01      	subs	r3, #1
    502e:	2b0c      	cmp	r3, #12
    5030:	f63f ac11 	bhi.w	4856 <bt_recv+0x32>
    5034:	a201      	add	r2, pc, #4	; (adr r2, 503c <bt_recv+0x818>)
    5036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    503a:	bf00      	nop
    503c:	00004957 	.word	0x00004957
    5040:	00004d73 	.word	0x00004d73
    5044:	000049f7 	.word	0x000049f7
    5048:	00004a39 	.word	0x00004a39
    504c:	00004bbd 	.word	0x00004bbd
    5050:	00004a9d 	.word	0x00004a9d
    5054:	00004b47 	.word	0x00004b47
    5058:	00004d15 	.word	0x00004d15
    505c:	00004d55 	.word	0x00004d55
    5060:	000049f3 	.word	0x000049f3
    5064:	00004857 	.word	0x00004857
    5068:	00004b6d 	.word	0x00004b6d
    506c:	00004e35 	.word	0x00004e35
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    5070:	6f30      	ldr	r0, [r6, #112]	; 0x70
    5072:	e5e6      	b.n	4c42 <bt_recv+0x41e>

00005074 <bt_recv_prio>:
{
    5074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    5078:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    507a:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    507c:	2b01      	cmp	r3, #1
{
    507e:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    5080:	d005      	beq.n	508e <bt_recv_prio+0x1a>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    5082:	4040      	eors	r0, r0
    5084:	f380 8811 	msr	BASEPRI, r0
    5088:	f04f 0004 	mov.w	r0, #4
    508c:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    508e:	8982      	ldrh	r2, [r0, #12]
    5090:	2a01      	cmp	r2, #1
    5092:	d9f6      	bls.n	5082 <bt_recv_prio+0xe>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    5094:	7832      	ldrb	r2, [r6, #0]
    5096:	2a13      	cmp	r2, #19
    5098:	d8f3      	bhi.n	5082 <bt_recv_prio+0xe>
    509a:	4093      	lsls	r3, r2
    509c:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    50a0:	d0ef      	beq.n	5082 <bt_recv_prio+0xe>
	net_buf_pull(buf, sizeof(*hdr));
    50a2:	f100 0508 	add.w	r5, r0, #8
    50a6:	2102      	movs	r1, #2
    50a8:	4628      	mov	r0, r5
    50aa:	f012 fddf 	bl	17c6c <net_buf_simple_pull>
	switch (hdr->evt) {
    50ae:	7833      	ldrb	r3, [r6, #0]
    50b0:	2b0f      	cmp	r3, #15
    50b2:	d018      	beq.n	50e6 <bt_recv_prio+0x72>
    50b4:	2b13      	cmp	r3, #19
    50b6:	d023      	beq.n	5100 <bt_recv_prio+0x8c>
    50b8:	2b0e      	cmp	r3, #14
    50ba:	d161      	bne.n	5180 <bt_recv_prio+0x10c>
	u8_t status, ncmd = evt->ncmd;
    50bc:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    50be:	2103      	movs	r1, #3
    50c0:	4628      	mov	r0, r5
	u8_t status, ncmd = evt->ncmd;
    50c2:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    50c4:	f012 fdd2 	bl	17c6c <net_buf_simple_pull>
	status = buf->data[0];
    50c8:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    50ca:	4621      	mov	r1, r4
    50cc:	7818      	ldrb	r0, [r3, #0]
    50ce:	f7fe fb0b 	bl	36e8 <hci_cmd_done.isra.18>
	if (ncmd) {
    50d2:	b116      	cbz	r6, 50da <bt_recv_prio+0x66>
    50d4:	482c      	ldr	r0, [pc, #176]	; (5188 <bt_recv_prio+0x114>)
    50d6:	f01a fbb9 	bl	1f84c <_impl_k_sem_give>
	net_buf_unref(buf);
    50da:	4620      	mov	r0, r4
    50dc:	f012 fd18 	bl	17b10 <net_buf_unref>
}
    50e0:	2000      	movs	r0, #0
    50e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    50e6:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    50e8:	2104      	movs	r1, #4
	u8_t ncmd = evt->ncmd;
    50ea:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    50ec:	4628      	mov	r0, r5
    50ee:	f012 fdbd 	bl	17c6c <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    50f2:	4621      	mov	r1, r4
    50f4:	7830      	ldrb	r0, [r6, #0]
    50f6:	f7fe faf7 	bl	36e8 <hci_cmd_done.isra.18>
	if (ncmd) {
    50fa:	2f00      	cmp	r7, #0
    50fc:	d0ed      	beq.n	50da <bt_recv_prio+0x66>
    50fe:	e7e9      	b.n	50d4 <bt_recv_prio+0x60>
    5100:	f8d4 8008 	ldr.w	r8, [r4, #8]
	for (i = 0; i < evt->num_handles; i++) {
    5104:	2700      	movs	r7, #0
    5106:	f898 3000 	ldrb.w	r3, [r8]
    510a:	429f      	cmp	r7, r3
    510c:	dae5      	bge.n	50da <bt_recv_prio+0x66>
    510e:	eb08 0387 	add.w	r3, r8, r7, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
    5112:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    5116:	f8b3 6003 	ldrh.w	r6, [r3, #3]
	__asm__ volatile(
    511a:	f04f 0320 	mov.w	r3, #32
    511e:	f3ef 8911 	mrs	r9, BASEPRI
    5122:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    5126:	f000 ff71 	bl	600c <bt_conn_lookup_handle>
		if (!conn) {
    512a:	4605      	mov	r5, r0
    512c:	b918      	cbnz	r0, 5136 <bt_recv_prio+0xc2>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    512e:	f389 8811 	msr	BASEPRI, r9
	for (i = 0; i < evt->num_handles; i++) {
    5132:	3701      	adds	r7, #1
    5134:	e7e7      	b.n	5106 <bt_recv_prio+0x92>
    5136:	f389 8811 	msr	BASEPRI, r9
			k_fifo_put(&conn->tx_notify, node);
    513a:	f100 091c 	add.w	r9, r0, #28
		while (count--) {
    513e:	b196      	cbz	r6, 5166 <bt_recv_prio+0xf2>
	__asm__ volatile(
    5140:	f04f 0320 	mov.w	r3, #32
    5144:	f3ef 8011 	mrs	r0, BASEPRI
    5148:	f383 8811 	msr	BASEPRI, r3
    514c:	6969      	ldr	r1, [r5, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    514e:	b129      	cbz	r1, 515c <bt_recv_prio+0xe8>
	if (list->tail == node) {
    5150:	69aa      	ldr	r2, [r5, #24]
	list->head = node->next;
    5152:	680b      	ldr	r3, [r1, #0]
    5154:	616b      	str	r3, [r5, #20]
	if (list->tail == node) {
    5156:	4291      	cmp	r1, r2
		list->tail = list->head;
    5158:	bf08      	it	eq
    515a:	61ab      	streq	r3, [r5, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    515c:	f380 8811 	msr	BASEPRI, r0
    5160:	3e01      	subs	r6, #1
    5162:	b2b6      	uxth	r6, r6
			if (!node) {
    5164:	b919      	cbnz	r1, 516e <bt_recv_prio+0xfa>
		bt_conn_unref(conn);
    5166:	4628      	mov	r0, r5
    5168:	f000 ffbe 	bl	60e8 <bt_conn_unref>
    516c:	e7e1      	b.n	5132 <bt_recv_prio+0xbe>
			k_fifo_put(&conn->tx_notify, node);
    516e:	4648      	mov	r0, r9
    5170:	f01a f921 	bl	1f3b6 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    5174:	4628      	mov	r0, r5
    5176:	f000 fbff 	bl	5978 <bt_conn_get_pkts>
    517a:	f01a fb67 	bl	1f84c <_impl_k_sem_give>
    517e:	e7de      	b.n	513e <bt_recv_prio+0xca>
		net_buf_unref(buf);
    5180:	4620      	mov	r0, r4
    5182:	f012 fcc5 	bl	17b10 <net_buf_unref>
    5186:	e77c      	b.n	5082 <bt_recv_prio+0xe>
    5188:	2000dda0 	.word	0x2000dda0

0000518c <bt_hci_driver_register>:
	if (bt_dev.drv) {
    518c:	4a08      	ldr	r2, [pc, #32]	; (51b0 <bt_hci_driver_register+0x24>)
    518e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    5192:	b93b      	cbnz	r3, 51a4 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    5194:	6881      	ldr	r1, [r0, #8]
    5196:	b141      	cbz	r1, 51aa <bt_hci_driver_register+0x1e>
    5198:	68c1      	ldr	r1, [r0, #12]
    519a:	b131      	cbz	r1, 51aa <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    519c:	f8c2 00e4 	str.w	r0, [r2, #228]	; 0xe4
	return 0;
    51a0:	4618      	mov	r0, r3
    51a2:	4770      	bx	lr
		return -EALREADY;
    51a4:	f06f 0044 	mvn.w	r0, #68	; 0x44
    51a8:	4770      	bx	lr
		return -EINVAL;
    51aa:	f06f 0015 	mvn.w	r0, #21
}
    51ae:	4770      	bx	lr
    51b0:	2000dcf8 	.word	0x2000dcf8

000051b4 <bt_enable>:
{
    51b4:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    51b6:	4c20      	ldr	r4, [pc, #128]	; (5238 <bt_enable+0x84>)
    51b8:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
{
    51bc:	b086      	sub	sp, #24
    51be:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    51c0:	2b00      	cmp	r3, #0
    51c2:	d033      	beq.n	522c <bt_enable+0x78>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    51c4:	2101      	movs	r1, #1
    51c6:	f104 0070 	add.w	r0, r4, #112	; 0x70
    51ca:	f7fe fa22 	bl	3612 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    51ce:	f010 0001 	ands.w	r0, r0, #1
    51d2:	d12e      	bne.n	5232 <bt_enable+0x7e>
	ready_cb = cb;
    51d4:	4b19      	ldr	r3, [pc, #100]	; (523c <bt_enable+0x88>)

    51d6:	491a      	ldr	r1, [pc, #104]	; (5240 <bt_enable+0x8c>)
    51d8:	601e      	str	r6, [r3, #0]
    51da:	f06f 0308 	mvn.w	r3, #8
    51de:	9005      	str	r0, [sp, #20]
    51e0:	9004      	str	r0, [sp, #16]
    51e2:	9303      	str	r3, [sp, #12]
    51e4:	9002      	str	r0, [sp, #8]
    51e6:	9001      	str	r0, [sp, #4]
    51e8:	9000      	str	r0, [sp, #0]
    51ea:	4b16      	ldr	r3, [pc, #88]	; (5244 <bt_enable+0x90>)
    51ec:	4816      	ldr	r0, [pc, #88]	; (5248 <bt_enable+0x94>)
    51ee:	f44f 7220 	mov.w	r2, #640	; 0x280
    51f2:	f01a fd67 	bl	1fcc4 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    51f6:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    51fa:	689b      	ldr	r3, [r3, #8]
    51fc:	4798      	blx	r3
	if (err) {
    51fe:	4605      	mov	r5, r0
    5200:	b988      	cbnz	r0, 5226 <bt_enable+0x72>
	if (!cb) {
    5202:	b926      	cbnz	r6, 520e <bt_enable+0x5a>
}
    5204:	b006      	add	sp, #24
    5206:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    520a:	f7fe be65 	b.w	3ed8 <bt_init>
    520e:	2101      	movs	r1, #1
    5210:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    5214:	f7fe f9fd 	bl	3612 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    5218:	07c3      	lsls	r3, r0, #31
    521a:	d404      	bmi.n	5226 <bt_enable+0x72>
		k_queue_append(&work_q->queue, work);
    521c:	f104 0164 	add.w	r1, r4, #100	; 0x64
    5220:	480a      	ldr	r0, [pc, #40]	; (524c <bt_enable+0x98>)
    5222:	f01a f8c8 	bl	1f3b6 <k_queue_append>
}
    5226:	4628      	mov	r0, r5
    5228:	b006      	add	sp, #24
    522a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    522c:	f06f 0512 	mvn.w	r5, #18
    5230:	e7f9      	b.n	5226 <bt_enable+0x72>
		return -EALREADY;
    5232:	f06f 0544 	mvn.w	r5, #68	; 0x44
    5236:	e7f6      	b.n	5226 <bt_enable+0x72>
    5238:	2000dcf8 	.word	0x2000dcf8
    523c:	200003d8 	.word	0x200003d8
    5240:	20005a60 	.word	0x20005a60
    5244:	00004735 	.word	0x00004735
    5248:	200003e0 	.word	0x200003e0
    524c:	20005218 	.word	0x20005218

00005250 <bt_addr_le_is_bonded>:
{
    5250:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(addr);
    5252:	f005 fbb1 	bl	a9b8 <bt_keys_find_addr>
		return keys && keys->keys;
    5256:	b118      	cbz	r0, 5260 <bt_addr_le_is_bonded+0x10>
    5258:	8980      	ldrh	r0, [r0, #12]
    525a:	3000      	adds	r0, #0
    525c:	bf18      	it	ne
    525e:	2001      	movne	r0, #1
}
    5260:	bd08      	pop	{r3, pc}

00005262 <set_ext_ad>:

//#if defined(CONFIG_EXT_ADV)
int set_ext_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len, u8_t operation)
{
    5262:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5266:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_ext_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    5268:	21ff      	movs	r1, #255	; 0xff
{
    526a:	4607      	mov	r7, r0
    526c:	4690      	mov	r8, r2
    526e:	469a      	mov	sl, r3
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    5270:	f7fe fa74 	bl	375c <bt_hci_cmd_create>
	if (!buf) {
    5274:	4681      	mov	r9, r0
    5276:	2800      	cmp	r0, #0
    5278:	d03d      	beq.n	52f6 <set_ext_ad+0x94>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    527a:	21ff      	movs	r1, #255	; 0xff
    527c:	3008      	adds	r0, #8
    527e:	f012 fca5 	bl	17bcc <net_buf_simple_add>
    5282:	4604      	mov	r4, r0

	memset(set_data, 0, sizeof(*set_data));
    5284:	22ff      	movs	r2, #255	; 0xff
    5286:	2100      	movs	r1, #0
	set_data->len = 0;
    5288:	2600      	movs	r6, #0
	memset(set_data, 0, sizeof(*set_data));
    528a:	f7fb fb5a 	bl	942 <memset>
	set_data->len = 0;
    528e:	70e6      	strb	r6, [r4, #3]
	set_data->op = operation;
    5290:	f884 a001 	strb.w	sl, [r4, #1]
	for (i = 0; i < ad_len; i++) {
    5294:	4546      	cmp	r6, r8
    5296:	d106      	bne.n	52a6 <set_ext_ad+0x44>
		memcpy(&set_data->data[set_data->len], ad[i].data,
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    5298:	4649      	mov	r1, r9
    529a:	4638      	mov	r0, r7
    529c:	2200      	movs	r2, #0
}
    529e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    52a2:	f7fe ba8b 	b.w	37bc <bt_hci_cmd_send_sync>
		if (set_data->len + ad[i].data_len + 2 > 255) {
    52a6:	786a      	ldrb	r2, [r5, #1]
    52a8:	78e3      	ldrb	r3, [r4, #3]
    52aa:	18d1      	adds	r1, r2, r3
    52ac:	3102      	adds	r1, #2
    52ae:	29ff      	cmp	r1, #255	; 0xff
    52b0:	f105 0508 	add.w	r5, r5, #8
    52b4:	dd06      	ble.n	52c4 <set_ext_ad+0x62>
			net_buf_unref(buf);
    52b6:	4648      	mov	r0, r9
    52b8:	f012 fc2a 	bl	17b10 <net_buf_unref>
			return -EINVAL;
    52bc:	f06f 0015 	mvn.w	r0, #21
    52c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    52c4:	18e1      	adds	r1, r4, r3
    52c6:	1c50      	adds	r0, r2, #1
    52c8:	7108      	strb	r0, [r1, #4]
		set_data->data[set_data->len++] = ad[i].type;
    52ca:	1c98      	adds	r0, r3, #2
    52cc:	b2c0      	uxtb	r0, r0
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    52ce:	3301      	adds	r3, #1
		set_data->data[set_data->len++] = ad[i].type;
    52d0:	70e0      	strb	r0, [r4, #3]
    52d2:	fa54 f383 	uxtab	r3, r4, r3
    52d6:	f815 1c08 	ldrb.w	r1, [r5, #-8]
    52da:	7119      	strb	r1, [r3, #4]
		memcpy(&set_data->data[set_data->len], ad[i].data,
    52dc:	3004      	adds	r0, #4
    52de:	f855 1c04 	ldr.w	r1, [r5, #-4]
    52e2:	4420      	add	r0, r4
    52e4:	f7fb fb01 	bl	8ea <memcpy>
		set_data->len += ad[i].data_len;
    52e8:	78e3      	ldrb	r3, [r4, #3]
    52ea:	f815 2c07 	ldrb.w	r2, [r5, #-7]
    52ee:	4413      	add	r3, r2
    52f0:	70e3      	strb	r3, [r4, #3]
	for (i = 0; i < ad_len; i++) {
    52f2:	3601      	adds	r6, #1
    52f4:	e7ce      	b.n	5294 <set_ext_ad+0x32>
		return -ENOBUFS;
    52f6:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    52fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000052fe <ext_set_data>:

int ext_set_data(u16_t data_lenght,u8_t *data){
    52fe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	u8_t fragment_count;
	fragment_count = data_lenght/246;
	int err = 0;
	int i =0;
	int ptr = 0;
    5302:	2700      	movs	r7, #0
	fragment_count = data_lenght/246;
    5304:	24f6      	movs	r4, #246	; 0xf6
int ext_set_data(u16_t data_lenght,u8_t *data){
    5306:	4680      	mov	r8, r0
	fragment_count = data_lenght/246;
    5308:	fbb0 f4f4 	udiv	r4, r0, r4
int ext_set_data(u16_t data_lenght,u8_t *data){
    530c:	4689      	mov	r9, r1
	fragment_count = data_lenght/246;
    530e:	b2e4      	uxtb	r4, r4
	int i =0;
    5310:	463d      	mov	r5, r7
			operation = 2;	//last fragment
		}else{
			operation = 0; //middle packets
		}

		struct bt_data chain_ad[] = {
    5312:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while(i <= fragment_count){
    5316:	42a5      	cmp	r5, r4
    5318:	dd03      	ble.n	5322 <ext_set_data+0x24>

		ptr = ptr + packet_size;
		data_lenght = data_lenght - packet_size;
		i++;		
	}
	return 0;
    531a:	2000      	movs	r0, #0
}
    531c:	b002      	add	sp, #8
    531e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5322:	4646      	mov	r6, r8
    5324:	2ef6      	cmp	r6, #246	; 0xf6
    5326:	bf28      	it	cs
    5328:	26f6      	movcs	r6, #246	; 0xf6
		if((i == 0)&& (fragment_count == 0)){
    532a:	b9cd      	cbnz	r5, 5360 <ext_set_data+0x62>
			operation = 3;  //complete data
    532c:	2c00      	cmp	r4, #0
    532e:	bf14      	ite	ne
    5330:	2301      	movne	r3, #1
    5332:	2303      	moveq	r3, #3
			BT_DATA(BT_DATA_MANUFACTURER_DATA, &data[ptr], packet_size),
    5334:	eb09 0207 	add.w	r2, r9, r7
		struct bt_data chain_ad[] = {
    5338:	9201      	str	r2, [sp, #4]
		err = set_ext_ad(BT_HCI_OP_LE_SET_EXT_ADV_DATA, chain_ad, 1, operation);
    533a:	4669      	mov	r1, sp
    533c:	2201      	movs	r2, #1
    533e:	f242 0037 	movw	r0, #8247	; 0x2037
		struct bt_data chain_ad[] = {
    5342:	f88d a000 	strb.w	sl, [sp]
    5346:	f88d 6001 	strb.w	r6, [sp, #1]
		err = set_ext_ad(BT_HCI_OP_LE_SET_EXT_ADV_DATA, chain_ad, 1, operation);
    534a:	f7ff ff8a 	bl	5262 <set_ext_ad>
		if (err) {
    534e:	2800      	cmp	r0, #0
    5350:	d1e4      	bne.n	531c <ext_set_data+0x1e>
		ptr = ptr + packet_size;
    5352:	4437      	add	r7, r6
		data_lenght = data_lenght - packet_size;
    5354:	eba8 0606 	sub.w	r6, r8, r6
    5358:	fa1f f886 	uxth.w	r8, r6
		i++;		
    535c:	3501      	adds	r5, #1
    535e:	e7da      	b.n	5316 <ext_set_data+0x18>
			operation = 2;	//last fragment
    5360:	42a5      	cmp	r5, r4
    5362:	bf0c      	ite	eq
    5364:	2302      	moveq	r3, #2
    5366:	2300      	movne	r3, #0
    5368:	e7e4      	b.n	5334 <ext_set_data+0x36>
	...

0000536c <bt_le_ext_adv_start>:

int bt_le_ext_adv_start(const struct bt_le_adv_param *param,
			const struct bt_data *ad, size_t ad_len,
			u8_t *data, u16_t data_lenght,
		    const struct bt_data *sd, size_t sd_len)
{
    536c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5370:	b089      	sub	sp, #36	; 0x24
    5372:	4605      	mov	r5, r0
    5374:	4698      	mov	r8, r3
    5376:	9f11      	ldr	r7, [sp, #68]	; 0x44
	struct bt_hci_cp_le_set_ext_adv_param set_param;
	struct net_buf *buf;
	int err;
	

	if (!valid_adv_param(param)) {
    5378:	f7fe f92e 	bl	35d8 <valid_adv_param>
    537c:	b928      	cbnz	r0, 538a <bt_le_ext_adv_start+0x1e>
		return -EINVAL;
    537e:	f06f 0415 	mvn.w	r4, #21
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    5382:	4620      	mov	r0, r4
    5384:	b009      	add	sp, #36	; 0x24
    5386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    538a:	2105      	movs	r1, #5
    538c:	4856      	ldr	r0, [pc, #344]	; (54e8 <bt_le_ext_adv_start+0x17c>)
    538e:	4e57      	ldr	r6, [pc, #348]	; (54ec <bt_le_ext_adv_start+0x180>)
    5390:	f7fe f950 	bl	3634 <atomic_test_bit>
    5394:	4604      	mov	r4, r0
    5396:	2800      	cmp	r0, #0
    5398:	f040 80a3 	bne.w	54e2 <bt_le_ext_adv_start+0x176>
	memset(&set_param, 0, sizeof(set_param));
    539c:	4601      	mov	r1, r0
    539e:	2217      	movs	r2, #23
    53a0:	a802      	add	r0, sp, #8
    53a2:	f7fb face 	bl	942 <memset>
	set_param.prim_min_interval = sys_cpu_to_le16(param->interval_min);
    53a6:	886b      	ldrh	r3, [r5, #2]
    53a8:	f8ad 300b 	strh.w	r3, [sp, #11]
	set_param.prim_max_interval = sys_cpu_to_le16(param->interval_max);
    53ac:	88ab      	ldrh	r3, [r5, #4]
    53ae:	f8ad 300d 	strh.w	r3, [sp, #13]
	set_param.prim_channel_map  =   0x01;//0x07;
    53b2:	2301      	movs	r3, #1
    53b4:	f88d 300f 	strb.w	r3, [sp, #15]
	set_param.prim_adv_phy  	= 0x01;
    53b8:	f88d 301a 	strb.w	r3, [sp, #26]
	u8_t direct_address[]		= {0x06,0x05,0x04,0x03,0x02,0x01};			//write address in reverse order
    53bc:	4b4c      	ldr	r3, [pc, #304]	; (54f0 <bt_le_ext_adv_start+0x184>)
	set_param.handle			= 0x00;
    53be:	f88d 4008 	strb.w	r4, [sp, #8]
	u8_t direct_address[]		= {0x06,0x05,0x04,0x03,0x02,0x01};			//write address in reverse order
    53c2:	6818      	ldr	r0, [r3, #0]
    53c4:	9000      	str	r0, [sp, #0]
    53c6:	889b      	ldrh	r3, [r3, #4]
    53c8:	f8ad 3004 	strh.w	r3, [sp, #4]
	memcpy(&set_param.direct_addr.a.val, direct_address, sizeof(direct_address));
    53cc:	4669      	mov	r1, sp
	set_param.sid 				= 0x02;
    53ce:	f04f 0902 	mov.w	r9, #2
	memcpy(&set_param.direct_addr.a.val, direct_address, sizeof(direct_address));
    53d2:	2206      	movs	r2, #6
    53d4:	f10d 0012 	add.w	r0, sp, #18
	set_param.sid 				= 0x02;
    53d8:	f88d 901d 	strb.w	r9, [sp, #29]
	set_param.sec_adv_phy		= 0x00;  
    53dc:	f88d 401c 	strb.w	r4, [sp, #28]
	set_param.sec_adv_max_skip  = 0;                                   //0x01
    53e0:	f88d 401b 	strb.w	r4, [sp, #27]
	memcpy(&set_param.direct_addr.a.val, direct_address, sizeof(direct_address));
    53e4:	f7fb fa81 	bl	8ea <memcpy>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    53e8:	782b      	ldrb	r3, [r5, #0]
    53ea:	07d9      	lsls	r1, r3, #31
    53ec:	d51b      	bpl.n	5426 <bt_le_ext_adv_start+0xba>
			if (atomic_test_bit(bt_dev.flags,
    53ee:	4649      	mov	r1, r9
    53f0:	f106 0070 	add.w	r0, r6, #112	; 0x70
    53f4:	f7fe f91e 	bl	3634 <atomic_test_bit>
    53f8:	b110      	cbz	r0, 5400 <bt_le_ext_adv_start+0x94>
				set_random_address(&bt_dev.id_addr.a);
    53fa:	1c70      	adds	r0, r6, #1
    53fc:	f7fe fa1c 	bl	3838 <set_random_address>
			set_param.own_addr_type = bt_dev.id_addr.type;
    5400:	7833      	ldrb	r3, [r6, #0]
    5402:	f88d 3010 	strb.w	r3, [sp, #16]
		set_param.props = BT_HCI_LE_ADV_PROP_CONN | BT_HCI_LE_ADV_PROP_SCAN;				// BT_LE_ADV_IND;
    5406:	2303      	movs	r3, #3
    5408:	f88d 3009 	strb.w	r3, [sp, #9]
    540c:	2300      	movs	r3, #0
    540e:	f88d 300a 	strb.w	r3, [sp, #10]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, sizeof(set_param));
    5412:	2117      	movs	r1, #23
    5414:	f242 0036 	movw	r0, #8246	; 0x2036
    5418:	f7fe f9a0 	bl	375c <bt_hci_cmd_create>
	if (!buf) {
    541c:	4604      	mov	r4, r0
    541e:	b9c8      	cbnz	r0, 5454 <bt_le_ext_adv_start+0xe8>
		return -ENOBUFS;
    5420:	f06f 0436 	mvn.w	r4, #54	; 0x36
    5424:	e7ad      	b.n	5382 <bt_le_ext_adv_start+0x16>
		if (param->own_addr) {
    5426:	68a8      	ldr	r0, [r5, #8]
    5428:	b188      	cbz	r0, 544e <bt_le_ext_adv_start+0xe2>
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    542a:	7943      	ldrb	r3, [r0, #5]
    542c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    5430:	d1a5      	bne.n	537e <bt_le_ext_adv_start+0x12>
			err = set_random_address(param->own_addr);
    5432:	f7fe fa01 	bl	3838 <set_random_address>
			err = le_set_private_addr();
    5436:	4604      	mov	r4, r0
		if (err) {
    5438:	2800      	cmp	r0, #0
    543a:	d1a2      	bne.n	5382 <bt_le_ext_adv_start+0x16>
		set_param.own_addr_type = BT_ADDR_LE_RANDOM;									//own_addr_type
    543c:	2301      	movs	r3, #1
    543e:	f88d 3010 	strb.w	r3, [sp, #16]
			set_param.props =  BT_HCI_LE_ADV_PROP_TX_POWER  ; //|BT_HCI_LE_ADV_PROP_DIRECT |BT_HCI_LE_ADV_PROP_SCAN |;		//BT_LE_ADV_SCAN_IND and trx pwr
    5442:	2340      	movs	r3, #64	; 0x40
    5444:	f88d 3009 	strb.w	r3, [sp, #9]
    5448:	f88d 000a 	strb.w	r0, [sp, #10]
    544c:	e7e1      	b.n	5412 <bt_le_ext_adv_start+0xa6>
			err = le_set_private_addr();
    544e:	f7fe fa21 	bl	3894 <le_set_private_addr>
    5452:	e7f0      	b.n	5436 <bt_le_ext_adv_start+0xca>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    5454:	2217      	movs	r2, #23
    5456:	a902      	add	r1, sp, #8
    5458:	3008      	adds	r0, #8
    545a:	f012 fbbd 	bl	17bd8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, buf, NULL);
    545e:	4621      	mov	r1, r4
    5460:	2200      	movs	r2, #0
    5462:	f242 0036 	movw	r0, #8246	; 0x2036
    5466:	f7fe f9a9 	bl	37bc <bt_hci_cmd_send_sync>
	if (err) {
    546a:	4604      	mov	r4, r0
    546c:	2800      	cmp	r0, #0
    546e:	d188      	bne.n	5382 <bt_le_ext_adv_start+0x16>
	err = ext_set_data(data_lenght, data);
    5470:	4641      	mov	r1, r8
    5472:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
    5476:	f7ff ff42 	bl	52fe <ext_set_data>
	if (err) {
    547a:	4604      	mov	r4, r0
    547c:	2800      	cmp	r0, #0
    547e:	d180      	bne.n	5382 <bt_le_ext_adv_start+0x16>
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    5480:	bb2f      	cbnz	r7, 54ce <bt_le_ext_adv_start+0x162>
    5482:	782b      	ldrb	r3, [r5, #0]
    5484:	07da      	lsls	r2, r3, #31
    5486:	d422      	bmi.n	54ce <bt_le_ext_adv_start+0x162>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, 1);
    5488:	2101      	movs	r1, #1
    548a:	f242 0039 	movw	r0, #8249	; 0x2039
    548e:	f7fe f965 	bl	375c <bt_hci_cmd_create>
	if (!buf) {
    5492:	4604      	mov	r4, r0
    5494:	2800      	cmp	r0, #0
    5496:	d0c3      	beq.n	5420 <bt_le_ext_adv_start+0xb4>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    5498:	2101      	movs	r1, #1
    549a:	3008      	adds	r0, #8
    549c:	f012 fba5 	bl	17bea <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, buf, NULL);
    54a0:	4621      	mov	r1, r4
    54a2:	2200      	movs	r2, #0
    54a4:	f242 0039 	movw	r0, #8249	; 0x2039
    54a8:	f7fe f988 	bl	37bc <bt_hci_cmd_send_sync>
	if (err) {
    54ac:	4604      	mov	r4, r0
    54ae:	2800      	cmp	r0, #0
    54b0:	f47f af67 	bne.w	5382 <bt_le_ext_adv_start+0x16>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    54b4:	2120      	movs	r1, #32
    54b6:	480c      	ldr	r0, [pc, #48]	; (54e8 <bt_le_ext_adv_start+0x17c>)
    54b8:	f7fe f8ab 	bl	3612 <atomic_or>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    54bc:	782b      	ldrb	r3, [r5, #0]
    54be:	079b      	lsls	r3, r3, #30
    54c0:	f53f af5f 	bmi.w	5382 <bt_le_ext_adv_start+0x16>
    54c4:	2140      	movs	r1, #64	; 0x40
    54c6:	4808      	ldr	r0, [pc, #32]	; (54e8 <bt_le_ext_adv_start+0x17c>)
    54c8:	f7fe f8a3 	bl	3612 <atomic_or>
    54cc:	e759      	b.n	5382 <bt_le_ext_adv_start+0x16>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    54ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
    54d0:	4639      	mov	r1, r7
    54d2:	f242 0009 	movw	r0, #8201	; 0x2009
    54d6:	f7fe fa91 	bl	39fc <set_ad>
		if (err) {
    54da:	4604      	mov	r4, r0
    54dc:	2800      	cmp	r0, #0
    54de:	d0d3      	beq.n	5488 <bt_le_ext_adv_start+0x11c>
    54e0:	e74f      	b.n	5382 <bt_le_ext_adv_start+0x16>
		return -EALREADY;
    54e2:	f06f 0444 	mvn.w	r4, #68	; 0x44
    54e6:	e74c      	b.n	5382 <bt_le_ext_adv_start+0x16>
    54e8:	2000dd68 	.word	0x2000dd68
    54ec:	2000dcf8 	.word	0x2000dcf8
    54f0:	0002060b 	.word	0x0002060b

000054f4 <bt_le_adv_start>:
//#endif /*CONFIG_EXT_ADV*/

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    54f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    54f6:	b085      	sub	sp, #20
    54f8:	4605      	mov	r5, r0
    54fa:	460c      	mov	r4, r1
    54fc:	4617      	mov	r7, r2
    54fe:	461e      	mov	r6, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct net_buf *buf;
	int err;

	if (!valid_adv_param(param)) {
    5500:	f7fe f86a 	bl	35d8 <valid_adv_param>
    5504:	b920      	cbnz	r0, 5510 <bt_le_adv_start+0x1c>
		return -EINVAL;
    5506:	f06f 0415 	mvn.w	r4, #21
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    550a:	4620      	mov	r0, r4
    550c:	b005      	add	sp, #20
    550e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    5510:	2105      	movs	r1, #5
    5512:	483e      	ldr	r0, [pc, #248]	; (560c <bt_le_adv_start+0x118>)
    5514:	f7fe f88e 	bl	3634 <atomic_test_bit>
    5518:	2800      	cmp	r0, #0
    551a:	d171      	bne.n	5600 <bt_le_adv_start+0x10c>
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    551c:	4621      	mov	r1, r4
    551e:	463a      	mov	r2, r7
    5520:	f242 0008 	movw	r0, #8200	; 0x2008
    5524:	f7fe fa6a 	bl	39fc <set_ad>
	if (err) {
    5528:	4604      	mov	r4, r0
    552a:	2800      	cmp	r0, #0
    552c:	d1ed      	bne.n	550a <bt_le_adv_start+0x16>
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    552e:	2e00      	cmp	r6, #0
    5530:	d146      	bne.n	55c0 <bt_le_adv_start+0xcc>
    5532:	782b      	ldrb	r3, [r5, #0]
    5534:	07d9      	lsls	r1, r3, #31
    5536:	d443      	bmi.n	55c0 <bt_le_adv_start+0xcc>
	memset(&set_param, 0, sizeof(set_param));
    5538:	220f      	movs	r2, #15
    553a:	2100      	movs	r1, #0
    553c:	4668      	mov	r0, sp
    553e:	f7fb fa00 	bl	942 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    5542:	886b      	ldrh	r3, [r5, #2]
    5544:	f8ad 3000 	strh.w	r3, [sp]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    5548:	88ab      	ldrh	r3, [r5, #4]
    554a:	f8ad 3002 	strh.w	r3, [sp, #2]
	set_param.channel_map  = 0x07;
    554e:	2307      	movs	r3, #7
    5550:	f88d 300d 	strb.w	r3, [sp, #13]
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    5554:	782b      	ldrb	r3, [r5, #0]
    5556:	07da      	lsls	r2, r3, #31
    5558:	d53c      	bpl.n	55d4 <bt_le_adv_start+0xe0>
			if (atomic_test_bit(bt_dev.flags,
    555a:	2102      	movs	r1, #2
    555c:	482b      	ldr	r0, [pc, #172]	; (560c <bt_le_adv_start+0x118>)
    555e:	4c2c      	ldr	r4, [pc, #176]	; (5610 <bt_le_adv_start+0x11c>)
    5560:	f7fe f868 	bl	3634 <atomic_test_bit>
    5564:	b110      	cbz	r0, 556c <bt_le_adv_start+0x78>
				set_random_address(&bt_dev.id_addr.a);
    5566:	1c60      	adds	r0, r4, #1
    5568:	f7fe f966 	bl	3838 <set_random_address>
			set_param.own_addr_type = bt_dev.id_addr.type;
    556c:	7823      	ldrb	r3, [r4, #0]
    556e:	f88d 3005 	strb.w	r3, [sp, #5]
		set_param.type = BT_LE_ADV_IND;
    5572:	2300      	movs	r3, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    5574:	210f      	movs	r1, #15
    5576:	f242 0006 	movw	r0, #8198	; 0x2006
			set_param.type = BT_LE_ADV_NONCONN_IND;
    557a:	f88d 3004 	strb.w	r3, [sp, #4]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    557e:	f7fe f8ed 	bl	375c <bt_hci_cmd_create>
	if (!buf) {
    5582:	4604      	mov	r4, r0
    5584:	2800      	cmp	r0, #0
    5586:	d03e      	beq.n	5606 <bt_le_adv_start+0x112>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    5588:	220f      	movs	r2, #15
    558a:	4669      	mov	r1, sp
    558c:	3008      	adds	r0, #8
    558e:	f012 fb23 	bl	17bd8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    5592:	4621      	mov	r1, r4
    5594:	2200      	movs	r2, #0
    5596:	f242 0006 	movw	r0, #8198	; 0x2006
    559a:	f7fe f90f 	bl	37bc <bt_hci_cmd_send_sync>
	if (err) {
    559e:	4604      	mov	r4, r0
    55a0:	2800      	cmp	r0, #0
    55a2:	d1b2      	bne.n	550a <bt_le_adv_start+0x16>
	err = set_advertise_enable(true);
    55a4:	2001      	movs	r0, #1
    55a6:	f7fe f9ff 	bl	39a8 <set_advertise_enable>
	if (err) {
    55aa:	4604      	mov	r4, r0
    55ac:	2800      	cmp	r0, #0
    55ae:	d1ac      	bne.n	550a <bt_le_adv_start+0x16>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    55b0:	782b      	ldrb	r3, [r5, #0]
    55b2:	079b      	lsls	r3, r3, #30
    55b4:	d4a9      	bmi.n	550a <bt_le_adv_start+0x16>
    55b6:	2140      	movs	r1, #64	; 0x40
    55b8:	4814      	ldr	r0, [pc, #80]	; (560c <bt_le_adv_start+0x118>)
    55ba:	f7fe f82a 	bl	3612 <atomic_or>
    55be:	e7a4      	b.n	550a <bt_le_adv_start+0x16>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    55c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    55c2:	4631      	mov	r1, r6
    55c4:	f242 0009 	movw	r0, #8201	; 0x2009
    55c8:	f7fe fa18 	bl	39fc <set_ad>
		if (err) {
    55cc:	4604      	mov	r4, r0
    55ce:	2800      	cmp	r0, #0
    55d0:	d0b2      	beq.n	5538 <bt_le_adv_start+0x44>
    55d2:	e79a      	b.n	550a <bt_le_adv_start+0x16>
		if (param->own_addr) {
    55d4:	68a8      	ldr	r0, [r5, #8]
    55d6:	b170      	cbz	r0, 55f6 <bt_le_adv_start+0x102>
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    55d8:	7943      	ldrb	r3, [r0, #5]
    55da:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    55de:	d192      	bne.n	5506 <bt_le_adv_start+0x12>
			err = set_random_address(param->own_addr);
    55e0:	f7fe f92a 	bl	3838 <set_random_address>
			err = le_set_private_addr();
    55e4:	4604      	mov	r4, r0
		if (err) {
    55e6:	2800      	cmp	r0, #0
    55e8:	d18f      	bne.n	550a <bt_le_adv_start+0x16>
		set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    55ea:	2301      	movs	r3, #1
    55ec:	f88d 3005 	strb.w	r3, [sp, #5]
		if (sd) {
    55f0:	b126      	cbz	r6, 55fc <bt_le_adv_start+0x108>
			set_param.type = BT_LE_ADV_SCAN_IND;
    55f2:	2302      	movs	r3, #2
    55f4:	e7be      	b.n	5574 <bt_le_adv_start+0x80>
			err = le_set_private_addr();
    55f6:	f7fe f94d 	bl	3894 <le_set_private_addr>
    55fa:	e7f3      	b.n	55e4 <bt_le_adv_start+0xf0>
			set_param.type = BT_LE_ADV_NONCONN_IND;
    55fc:	2303      	movs	r3, #3
    55fe:	e7b9      	b.n	5574 <bt_le_adv_start+0x80>
		return -EALREADY;
    5600:	f06f 0444 	mvn.w	r4, #68	; 0x44
    5604:	e781      	b.n	550a <bt_le_adv_start+0x16>
		return -ENOBUFS;
    5606:	f06f 0436 	mvn.w	r4, #54	; 0x36
    560a:	e77e      	b.n	550a <bt_le_adv_start+0x16>
    560c:	2000dd68 	.word	0x2000dd68
    5610:	2000dcf8 	.word	0x2000dcf8

00005614 <bt_le_ext_adv_stop>:

int bt_le_ext_adv_stop(void)
{
    5614:	b510      	push	{r4, lr}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5616:	f06f 0140 	mvn.w	r1, #64	; 0x40
    561a:	481b      	ldr	r0, [pc, #108]	; (5688 <bt_le_ext_adv_stop+0x74>)
    561c:	f7fe f817 	bl	364e <atomic_and>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    5620:	2105      	movs	r1, #5
    5622:	4819      	ldr	r0, [pc, #100]	; (5688 <bt_le_ext_adv_stop+0x74>)
    5624:	f7fe f806 	bl	3634 <atomic_test_bit>
    5628:	b910      	cbnz	r0, 5630 <bt_le_ext_adv_stop+0x1c>
		return 0;
    562a:	2400      	movs	r4, #0
			le_set_private_addr();
		}
	}

	return 0;
}
    562c:	4620      	mov	r0, r4
    562e:	bd10      	pop	{r4, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, 1);
    5630:	2101      	movs	r1, #1
    5632:	f242 0039 	movw	r0, #8249	; 0x2039
    5636:	f7fe f891 	bl	375c <bt_hci_cmd_create>
	if (!buf) {
    563a:	4604      	mov	r4, r0
    563c:	b300      	cbz	r0, 5680 <bt_le_ext_adv_stop+0x6c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    563e:	2100      	movs	r1, #0
    5640:	3008      	adds	r0, #8
    5642:	f012 fad2 	bl	17bea <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, buf, NULL);
    5646:	4621      	mov	r1, r4
    5648:	2200      	movs	r2, #0
    564a:	f242 0039 	movw	r0, #8249	; 0x2039
    564e:	f7fe f8b5 	bl	37bc <bt_hci_cmd_send_sync>
	if (err) {
    5652:	4604      	mov	r4, r0
    5654:	2800      	cmp	r0, #0
    5656:	d1e9      	bne.n	562c <bt_le_ext_adv_stop+0x18>
    5658:	f06f 0120 	mvn.w	r1, #32
    565c:	480a      	ldr	r0, [pc, #40]	; (5688 <bt_le_ext_adv_stop+0x74>)
    565e:	f7fd fff6 	bl	364e <atomic_and>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    5662:	2107      	movs	r1, #7
    5664:	4808      	ldr	r0, [pc, #32]	; (5688 <bt_le_ext_adv_stop+0x74>)
    5666:	f7fd ffe5 	bl	3634 <atomic_test_bit>
    566a:	2800      	cmp	r0, #0
    566c:	d0dd      	beq.n	562a <bt_le_ext_adv_stop+0x16>
		    atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    566e:	2109      	movs	r1, #9
    5670:	4805      	ldr	r0, [pc, #20]	; (5688 <bt_le_ext_adv_stop+0x74>)
    5672:	f7fd ffdf 	bl	3634 <atomic_test_bit>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    5676:	2800      	cmp	r0, #0
    5678:	d0d7      	beq.n	562a <bt_le_ext_adv_stop+0x16>
			le_set_private_addr();
    567a:	f7fe f90b 	bl	3894 <le_set_private_addr>
    567e:	e7d5      	b.n	562c <bt_le_ext_adv_stop+0x18>
		return -ENOBUFS;
    5680:	f06f 0436 	mvn.w	r4, #54	; 0x36
    5684:	e7d2      	b.n	562c <bt_le_ext_adv_stop+0x18>
    5686:	bf00      	nop
    5688:	2000dd68 	.word	0x2000dd68

0000568c <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    568c:	b510      	push	{r4, lr}
    568e:	f06f 0140 	mvn.w	r1, #64	; 0x40
    5692:	4810      	ldr	r0, [pc, #64]	; (56d4 <bt_le_adv_stop+0x48>)
    5694:	f7fd ffdb 	bl	364e <atomic_and>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    5698:	2105      	movs	r1, #5
    569a:	480e      	ldr	r0, [pc, #56]	; (56d4 <bt_le_adv_stop+0x48>)
    569c:	f7fd ffca 	bl	3634 <atomic_test_bit>
    56a0:	b910      	cbnz	r0, 56a8 <bt_le_adv_stop+0x1c>
		return 0;
    56a2:	2400      	movs	r4, #0
			le_set_private_addr();
		}
	}

	return 0;
}
    56a4:	4620      	mov	r0, r4
    56a6:	bd10      	pop	{r4, pc}
	err = set_advertise_enable(false);
    56a8:	2000      	movs	r0, #0
    56aa:	f7fe f97d 	bl	39a8 <set_advertise_enable>
	if (err) {
    56ae:	4604      	mov	r4, r0
    56b0:	2800      	cmp	r0, #0
    56b2:	d1f7      	bne.n	56a4 <bt_le_adv_stop+0x18>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    56b4:	2107      	movs	r1, #7
    56b6:	4807      	ldr	r0, [pc, #28]	; (56d4 <bt_le_adv_stop+0x48>)
    56b8:	f7fd ffbc 	bl	3634 <atomic_test_bit>
    56bc:	2800      	cmp	r0, #0
    56be:	d0f0      	beq.n	56a2 <bt_le_adv_stop+0x16>
		    atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    56c0:	2109      	movs	r1, #9
    56c2:	4804      	ldr	r0, [pc, #16]	; (56d4 <bt_le_adv_stop+0x48>)
    56c4:	f7fd ffb6 	bl	3634 <atomic_test_bit>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    56c8:	2800      	cmp	r0, #0
    56ca:	d0ea      	beq.n	56a2 <bt_le_adv_stop+0x16>
			le_set_private_addr();
    56cc:	f7fe f8e2 	bl	3894 <le_set_private_addr>
    56d0:	e7e8      	b.n	56a4 <bt_le_adv_stop+0x18>
    56d2:	bf00      	nop
    56d4:	2000dd68 	.word	0x2000dd68

000056d8 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    56d8:	b570      	push	{r4, r5, r6, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    56da:	7803      	ldrb	r3, [r0, #0]
    56dc:	2b01      	cmp	r3, #1
{
    56de:	4605      	mov	r5, r0
    56e0:	460e      	mov	r6, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    56e2:	d810      	bhi.n	5706 <bt_le_scan_start+0x2e>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    56e4:	7843      	ldrb	r3, [r0, #1]
    56e6:	2b01      	cmp	r3, #1
    56e8:	d80d      	bhi.n	5706 <bt_le_scan_start+0x2e>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    56ea:	8841      	ldrh	r1, [r0, #2]
    56ec:	1f0b      	subs	r3, r1, #4
    56ee:	b29b      	uxth	r3, r3
    56f0:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    56f4:	4283      	cmp	r3, r0
    56f6:	d806      	bhi.n	5706 <bt_le_scan_start+0x2e>
	if (param->window < 0x0004 || param->window > 0x4000) {
    56f8:	88aa      	ldrh	r2, [r5, #4]
    56fa:	1f13      	subs	r3, r2, #4
    56fc:	b29b      	uxth	r3, r3
    56fe:	4283      	cmp	r3, r0
    5700:	d801      	bhi.n	5706 <bt_le_scan_start+0x2e>
	if (param->window > param->interval) {
    5702:	4291      	cmp	r1, r2
    5704:	d22b      	bcs.n	575e <bt_le_scan_start+0x86>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    5706:	f06f 0415 	mvn.w	r4, #21
    570a:	e00e      	b.n	572a <bt_le_scan_start+0x52>
	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    570c:	2107      	movs	r1, #7
    570e:	4819      	ldr	r0, [pc, #100]	; (5774 <bt_le_scan_start+0x9c>)
    5710:	f7fd ff90 	bl	3634 <atomic_test_bit>
    5714:	b158      	cbz	r0, 572e <bt_le_scan_start+0x56>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    5716:	4610      	mov	r0, r2
    5718:	f7fe f912 	bl	3940 <set_le_scan_enable>
		if (err) {
    571c:	4604      	mov	r4, r0
    571e:	b130      	cbz	r0, 572e <bt_le_scan_start+0x56>
    5720:	f46f 7180 	mvn.w	r1, #256	; 0x100
    5724:	4813      	ldr	r0, [pc, #76]	; (5774 <bt_le_scan_start+0x9c>)
    5726:	f7fd ff92 	bl	364e <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    572a:	4620      	mov	r0, r4
    572c:	bd70      	pop	{r4, r5, r6, pc}
	if (param->filter_dup) {
    572e:	786b      	ldrb	r3, [r5, #1]
    5730:	b17b      	cbz	r3, 5752 <bt_le_scan_start+0x7a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    5732:	f44f 6180 	mov.w	r1, #1024	; 0x400
    5736:	480f      	ldr	r0, [pc, #60]	; (5774 <bt_le_scan_start+0x9c>)
    5738:	f7fd ff6b 	bl	3612 <atomic_or>
	err = start_le_scan(param->type, param->interval, param->window);
    573c:	88aa      	ldrh	r2, [r5, #4]
    573e:	8869      	ldrh	r1, [r5, #2]
    5740:	7828      	ldrb	r0, [r5, #0]
    5742:	f7fe fb47 	bl	3dd4 <start_le_scan>
	if (err) {
    5746:	4604      	mov	r4, r0
    5748:	2800      	cmp	r0, #0
    574a:	d1e9      	bne.n	5720 <bt_le_scan_start+0x48>
	scan_dev_found_cb = cb;
    574c:	4b0a      	ldr	r3, [pc, #40]	; (5778 <bt_le_scan_start+0xa0>)
    574e:	601e      	str	r6, [r3, #0]
	return 0;
    5750:	e7eb      	b.n	572a <bt_le_scan_start+0x52>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5752:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    5756:	4807      	ldr	r0, [pc, #28]	; (5774 <bt_le_scan_start+0x9c>)
    5758:	f7fd ff79 	bl	364e <atomic_and>
    575c:	e7ee      	b.n	573c <bt_le_scan_start+0x64>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    575e:	f44f 7180 	mov.w	r1, #256	; 0x100
    5762:	4804      	ldr	r0, [pc, #16]	; (5774 <bt_le_scan_start+0x9c>)
    5764:	f7fd ff55 	bl	3612 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5768:	f410 7280 	ands.w	r2, r0, #256	; 0x100
    576c:	d0ce      	beq.n	570c <bt_le_scan_start+0x34>
		return -EALREADY;
    576e:	f06f 0444 	mvn.w	r4, #68	; 0x44
    5772:	e7da      	b.n	572a <bt_le_scan_start+0x52>
    5774:	2000dd68 	.word	0x2000dd68
    5778:	200003dc 	.word	0x200003dc

0000577c <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    577c:	b508      	push	{r3, lr}
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    577e:	2108      	movs	r1, #8
    5780:	4806      	ldr	r0, [pc, #24]	; (579c <bt_le_scan_stop+0x20>)
    5782:	f7fd ff75 	bl	3670 <atomic_test_and_clear_bit>
    5786:	b130      	cbz	r0, 5796 <bt_le_scan_stop+0x1a>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    5788:	4b05      	ldr	r3, [pc, #20]	; (57a0 <bt_le_scan_stop+0x24>)
    578a:	2000      	movs	r0, #0
    578c:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
    578e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    5792:	f7fe bb6f 	b.w	3e74 <bt_le_scan_update>
}
    5796:	f06f 0044 	mvn.w	r0, #68	; 0x44
    579a:	bd08      	pop	{r3, pc}
    579c:	2000dd68 	.word	0x2000dd68
    57a0:	200003dc 	.word	0x200003dc

000057a4 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    57a4:	b538      	push	{r3, r4, r5, lr}
    57a6:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    57a8:	4805      	ldr	r0, [pc, #20]	; (57c0 <bt_buf_get_rx+0x1c>)
    57aa:	f012 f981 	bl	17ab0 <net_buf_alloc_fixed>
#endif

	if (buf) {
    57ae:	4604      	mov	r4, r0
    57b0:	b120      	cbz	r0, 57bc <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    57b2:	2100      	movs	r1, #0
    57b4:	3008      	adds	r0, #8
    57b6:	f012 f99a 	bl	17aee <net_buf_simple_reserve>
    57ba:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    57bc:	4620      	mov	r0, r4
    57be:	bd38      	pop	{r3, r4, r5, pc}
    57c0:	2000eb0c 	.word	0x2000eb0c

000057c4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    57c4:	b510      	push	{r4, lr}
    57c6:	4601      	mov	r1, r0
	__asm__ volatile(
    57c8:	f04f 0320 	mov.w	r3, #32
    57cc:	f3ef 8011 	mrs	r0, BASEPRI
    57d0:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    57d4:	4a0b      	ldr	r2, [pc, #44]	; (5804 <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    57d6:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    57d8:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    57dc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    57e0:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    57e4:	b924      	cbnz	r4, 57f0 <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    57e6:	2001      	movs	r0, #1
}
    57e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    57ec:	f7ff bfda 	b.w	57a4 <bt_buf_get_rx>
    57f0:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    57f2:	f104 0008 	add.w	r0, r4, #8
    57f6:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    57f8:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    57fa:	4619      	mov	r1, r3
    57fc:	f012 f977 	bl	17aee <net_buf_simple_reserve>
}
    5800:	4620      	mov	r0, r4
    5802:	bd10      	pop	{r4, pc}
    5804:	2000dcf8 	.word	0x2000dcf8

00005808 <bt_pub_key_gen>:
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    5808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    580c:	4e1d      	ldr	r6, [pc, #116]	; (5884 <bt_pub_key_gen+0x7c>)
    580e:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
    5812:	f003 0306 	and.w	r3, r3, #6
    5816:	2b06      	cmp	r3, #6
{
    5818:	4607      	mov	r7, r0
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    581a:	d130      	bne.n	587e <bt_pub_key_gen+0x76>
	    !(bt_dev.supported_commands[34] & 0x04)) {
		BT_WARN("ECC HCI commands not available");
		return -ENOTSUP;
	}

	new_cb->_next = pub_key_cb;
    581c:	4d1a      	ldr	r5, [pc, #104]	; (5888 <bt_pub_key_gen+0x80>)
    581e:	682b      	ldr	r3, [r5, #0]
    5820:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    5822:	6028      	str	r0, [r5, #0]
    5824:	2110      	movs	r1, #16
    5826:	f106 0070 	add.w	r0, r6, #112	; 0x70
    582a:	f7fd fef2 	bl	3612 <atomic_or>

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    582e:	f010 0810 	ands.w	r8, r0, #16
    5832:	d003      	beq.n	583c <bt_pub_key_gen+0x34>
		return 0;
    5834:	2400      	movs	r4, #0
			cb->func(NULL);
		}
	}

	return 0;
}
    5836:	4620      	mov	r0, r4
    5838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    583c:	f06f 0108 	mvn.w	r1, #8
    5840:	f106 0070 	add.w	r0, r6, #112	; 0x70
    5844:	f7fd ff03 	bl	364e <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    5848:	4642      	mov	r2, r8
    584a:	4641      	mov	r1, r8
    584c:	f242 0025 	movw	r0, #8229	; 0x2025
    5850:	f7fd ffb4 	bl	37bc <bt_hci_cmd_send_sync>
	if (err) {
    5854:	4604      	mov	r4, r0
    5856:	b140      	cbz	r0, 586a <bt_pub_key_gen+0x62>
    5858:	f06f 0110 	mvn.w	r1, #16
    585c:	f106 0070 	add.w	r0, r6, #112	; 0x70
    5860:	f7fd fef5 	bl	364e <atomic_and>
		pub_key_cb = NULL;
    5864:	f8c5 8000 	str.w	r8, [r5]
		return err;
    5868:	e7e5      	b.n	5836 <bt_pub_key_gen+0x2e>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    586a:	682c      	ldr	r4, [r5, #0]
    586c:	2c00      	cmp	r4, #0
    586e:	d0e1      	beq.n	5834 <bt_pub_key_gen+0x2c>
		if (cb != new_cb) {
    5870:	42bc      	cmp	r4, r7
    5872:	d002      	beq.n	587a <bt_pub_key_gen+0x72>
			cb->func(NULL);
    5874:	6823      	ldr	r3, [r4, #0]
    5876:	2000      	movs	r0, #0
    5878:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    587a:	6864      	ldr	r4, [r4, #4]
    587c:	e7f6      	b.n	586c <bt_pub_key_gen+0x64>
		return -ENOTSUP;
    587e:	f06f 0422 	mvn.w	r4, #34	; 0x22
    5882:	e7d8      	b.n	5836 <bt_pub_key_gen+0x2e>
    5884:	2000dcf8 	.word	0x2000dcf8
    5888:	200003d4 	.word	0x200003d4

0000588c <bt_dh_key_gen>:

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    588c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    588e:	4c1a      	ldr	r4, [pc, #104]	; (58f8 <bt_dh_key_gen+0x6c>)
    5890:	6823      	ldr	r3, [r4, #0]
{
    5892:	4607      	mov	r7, r0
    5894:	460a      	mov	r2, r1
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    5896:	b113      	cbz	r3, 589e <bt_dh_key_gen+0x12>
		return -EBUSY;
    5898:	f06f 000f 	mvn.w	r0, #15
    589c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    589e:	2104      	movs	r1, #4
    58a0:	4816      	ldr	r0, [pc, #88]	; (58fc <bt_dh_key_gen+0x70>)
    58a2:	f7fd fec7 	bl	3634 <atomic_test_bit>
    58a6:	4606      	mov	r6, r0
    58a8:	2800      	cmp	r0, #0
    58aa:	d1f5      	bne.n	5898 <bt_dh_key_gen+0xc>
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    58ac:	2103      	movs	r1, #3
    58ae:	4813      	ldr	r0, [pc, #76]	; (58fc <bt_dh_key_gen+0x70>)
    58b0:	f7fd fec0 	bl	3634 <atomic_test_bit>
    58b4:	b1e0      	cbz	r0, 58f0 <bt_dh_key_gen+0x64>
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    58b6:	2140      	movs	r1, #64	; 0x40
    58b8:	f242 0026 	movw	r0, #8230	; 0x2026
	dh_key_cb = cb;
    58bc:	6022      	str	r2, [r4, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    58be:	f7fd ff4d 	bl	375c <bt_hci_cmd_create>
	if (!buf) {
    58c2:	4605      	mov	r5, r0
    58c4:	b918      	cbnz	r0, 58ce <bt_dh_key_gen+0x42>
		dh_key_cb = NULL;
    58c6:	6020      	str	r0, [r4, #0]
		return -ENOBUFS;
    58c8:	f06f 0036 	mvn.w	r0, #54	; 0x36
    58cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	cp = net_buf_add(buf, sizeof(*cp));
    58ce:	2140      	movs	r1, #64	; 0x40
    58d0:	3008      	adds	r0, #8
    58d2:	f012 f97b 	bl	17bcc <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    58d6:	2240      	movs	r2, #64	; 0x40
    58d8:	4639      	mov	r1, r7
    58da:	f7fb f806 	bl	8ea <memcpy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    58de:	4632      	mov	r2, r6
    58e0:	4629      	mov	r1, r5
    58e2:	f242 0026 	movw	r0, #8230	; 0x2026
    58e6:	f7fd ff69 	bl	37bc <bt_hci_cmd_send_sync>
	if (err) {
    58ea:	b118      	cbz	r0, 58f4 <bt_dh_key_gen+0x68>
		dh_key_cb = NULL;
    58ec:	6026      	str	r6, [r4, #0]
		return err;
    58ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EADDRNOTAVAIL;
    58f0:	f06f 0030 	mvn.w	r0, #48	; 0x30
	}

	return 0;
}
    58f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    58f6:	bf00      	nop
    58f8:	2000038c 	.word	0x2000038c
    58fc:	2000dd68 	.word	0x2000dd68

00005900 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    5900:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    5902:	4b06      	ldr	r3, [pc, #24]	; (591c <notify_connected+0x1c>)
    5904:	681c      	ldr	r4, [r3, #0]
{
    5906:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    5908:	b904      	cbnz	r4, 590c <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    590a:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    590c:	6823      	ldr	r3, [r4, #0]
    590e:	b113      	cbz	r3, 5916 <notify_connected+0x16>
			cb->connected(conn, conn->err);
    5910:	7ae9      	ldrb	r1, [r5, #11]
    5912:	4628      	mov	r0, r5
    5914:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    5916:	69a4      	ldr	r4, [r4, #24]
    5918:	e7f6      	b.n	5908 <notify_connected+0x8>
    591a:	bf00      	nop
    591c:	20000448 	.word	0x20000448

00005920 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5920:	f3bf 8f5b 	dmb	ish
    5924:	6800      	ldr	r0, [r0, #0]
    5926:	f3bf 8f5b 	dmb	ish
}
    592a:	4770      	bx	lr

0000592c <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    592c:	89c3      	ldrh	r3, [r0, #14]
{
    592e:	b510      	push	{r4, lr}
    5930:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    5932:	b12b      	cbz	r3, 5940 <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    5934:	6900      	ldr	r0, [r0, #16]
    5936:	f012 f8eb 	bl	17b10 <net_buf_unref>
	conn->rx = NULL;
    593a:	2300      	movs	r3, #0
    593c:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0;
    593e:	81e3      	strh	r3, [r4, #14]
    5940:	bd10      	pop	{r4, pc}

00005942 <atomic_dec>:
}
    5942:	f3bf 8f5b 	dmb	ish
    5946:	e850 3f00 	ldrex	r3, [r0]
    594a:	1e5a      	subs	r2, r3, #1
    594c:	e840 2100 	strex	r1, r2, [r0]
    5950:	2900      	cmp	r1, #0
    5952:	d1f8      	bne.n	5946 <atomic_dec+0x4>
    5954:	f3bf 8f5b 	dmb	ish
    5958:	4618      	mov	r0, r3
    595a:	4770      	bx	lr

0000595c <atomic_inc>:
}
    595c:	f3bf 8f5b 	dmb	ish
    5960:	e850 3f00 	ldrex	r3, [r0]
    5964:	1c5a      	adds	r2, r3, #1
    5966:	e840 2100 	strex	r1, r2, [r0]
    596a:	2900      	cmp	r1, #0
    596c:	d1f8      	bne.n	5960 <atomic_inc+0x4>
    596e:	f3bf 8f5b 	dmb	ish
    5972:	4618      	mov	r0, r3
    5974:	4770      	bx	lr
	...

00005978 <bt_conn_get_pkts>:
}
    5978:	4800      	ldr	r0, [pc, #0]	; (597c <bt_conn_get_pkts+0x4>)
    597a:	4770      	bx	lr
    597c:	2000dd84 	.word	0x2000dd84

00005980 <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    5980:	4b08      	ldr	r3, [pc, #32]	; (59a4 <notify_le_param_updated+0x24>)
{
    5982:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    5984:	681c      	ldr	r4, [r3, #0]
{
    5986:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    5988:	b904      	cbnz	r4, 598c <notify_le_param_updated+0xc>
}
    598a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    598c:	68e6      	ldr	r6, [r4, #12]
    598e:	b13e      	cbz	r6, 59a0 <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    5990:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    5994:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    5998:	f8b5 105e 	ldrh.w	r1, [r5, #94]	; 0x5e
    599c:	4628      	mov	r0, r5
    599e:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    59a0:	69a4      	ldr	r4, [r4, #24]
    59a2:	e7f1      	b.n	5988 <notify_le_param_updated+0x8>
    59a4:	20000448 	.word	0x20000448

000059a8 <le_param_req>:
{
    59a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    59aa:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    59ac:	4608      	mov	r0, r1
{
    59ae:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    59b0:	f7fe f870 	bl	3a94 <bt_le_conn_params_valid>
    59b4:	4605      	mov	r5, r0
    59b6:	b910      	cbnz	r0, 59be <le_param_req+0x16>
		return false;
    59b8:	2500      	movs	r5, #0
}
    59ba:	4628      	mov	r0, r5
    59bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    59be:	4b09      	ldr	r3, [pc, #36]	; (59e4 <le_param_req+0x3c>)
    59c0:	681c      	ldr	r4, [r3, #0]
    59c2:	2c00      	cmp	r4, #0
    59c4:	d0f9      	beq.n	59ba <le_param_req+0x12>
		if (!cb->le_param_req) {
    59c6:	68a3      	ldr	r3, [r4, #8]
    59c8:	b90b      	cbnz	r3, 59ce <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    59ca:	69a4      	ldr	r4, [r4, #24]
    59cc:	e7f9      	b.n	59c2 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    59ce:	4631      	mov	r1, r6
    59d0:	4638      	mov	r0, r7
    59d2:	4798      	blx	r3
    59d4:	2800      	cmp	r0, #0
    59d6:	d0ef      	beq.n	59b8 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    59d8:	4630      	mov	r0, r6
    59da:	f7fe f85b 	bl	3a94 <bt_le_conn_params_valid>
    59de:	2800      	cmp	r0, #0
    59e0:	d1f3      	bne.n	59ca <le_param_req+0x22>
    59e2:	e7e9      	b.n	59b8 <le_param_req+0x10>
    59e4:	20000448 	.word	0x20000448

000059e8 <bt_conn_identity_resolved>:
{
    59e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    59ea:	78c3      	ldrb	r3, [r0, #3]
{
    59ec:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    59ee:	b93b      	cbnz	r3, 5a00 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    59f0:	f100 0656 	add.w	r6, r0, #86	; 0x56
	for (cb = callback_list; cb; cb = cb->_next) {
    59f4:	4b08      	ldr	r3, [pc, #32]	; (5a18 <bt_conn_identity_resolved+0x30>)
    59f6:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    59f8:	f104 0748 	add.w	r7, r4, #72	; 0x48
	for (cb = callback_list; cb; cb = cb->_next) {
    59fc:	b91d      	cbnz	r5, 5a06 <bt_conn_identity_resolved+0x1e>
}
    59fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    5a00:	f100 064f 	add.w	r6, r0, #79	; 0x4f
    5a04:	e7f6      	b.n	59f4 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    5a06:	692b      	ldr	r3, [r5, #16]
    5a08:	b11b      	cbz	r3, 5a12 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    5a0a:	463a      	mov	r2, r7
    5a0c:	4631      	mov	r1, r6
    5a0e:	4620      	mov	r0, r4
    5a10:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    5a12:	69ad      	ldr	r5, [r5, #24]
    5a14:	e7f2      	b.n	59fc <bt_conn_identity_resolved+0x14>
    5a16:	bf00      	nop
    5a18:	20000448 	.word	0x20000448

00005a1c <bt_conn_le_start_encryption>:
{
    5a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    5a20:	211c      	movs	r1, #28
{
    5a22:	4682      	mov	sl, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    5a24:	f242 0019 	movw	r0, #8217	; 0x2019
{
    5a28:	4691      	mov	r9, r2
    5a2a:	4698      	mov	r8, r3
    5a2c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
    5a30:	9f09      	ldr	r7, [sp, #36]	; 0x24
    5a32:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    5a34:	f7fd fe92 	bl	375c <bt_hci_cmd_create>
	if (!buf) {
    5a38:	4606      	mov	r6, r0
    5a3a:	b320      	cbz	r0, 5a86 <bt_conn_le_start_encryption+0x6a>
	cp = net_buf_add(buf, sizeof(*cp));
    5a3c:	211c      	movs	r1, #28
    5a3e:	3008      	adds	r0, #8
    5a40:	f012 f8c4 	bl	17bcc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5a44:	4603      	mov	r3, r0
    5a46:	f8ba 2000 	ldrh.w	r2, [sl]
    5a4a:	f823 2b02 	strh.w	r2, [r3], #2
	cp->rand = rand;
    5a4e:	f8c0 9002 	str.w	r9, [r0, #2]
    5a52:	f8c3 8004 	str.w	r8, [r3, #4]
	cp->ediv = ediv;
    5a56:	8144      	strh	r4, [r0, #10]
	memcpy(cp->ltk, ltk, len);
    5a58:	f100 040c 	add.w	r4, r0, #12
    5a5c:	462a      	mov	r2, r5
    5a5e:	4639      	mov	r1, r7
    5a60:	4620      	mov	r0, r4
    5a62:	f7fa ff42 	bl	8ea <memcpy>
	if (len < sizeof(cp->ltk)) {
    5a66:	2d0f      	cmp	r5, #15
    5a68:	d805      	bhi.n	5a76 <bt_conn_le_start_encryption+0x5a>
		memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
    5a6a:	f1c5 0210 	rsb	r2, r5, #16
    5a6e:	2100      	movs	r1, #0
    5a70:	1960      	adds	r0, r4, r5
    5a72:	f7fa ff66 	bl	942 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
    5a76:	4631      	mov	r1, r6
    5a78:	2200      	movs	r2, #0
    5a7a:	f242 0019 	movw	r0, #8217	; 0x2019
}
    5a7e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
    5a82:	f7fd be9b 	b.w	37bc <bt_hci_cmd_send_sync>
}
    5a86:	f06f 0036 	mvn.w	r0, #54	; 0x36
    5a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00005a90 <bt_conn_security_changed>:
{
    5a90:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    5a92:	4b06      	ldr	r3, [pc, #24]	; (5aac <bt_conn_security_changed+0x1c>)
    5a94:	681c      	ldr	r4, [r3, #0]
{
    5a96:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    5a98:	b904      	cbnz	r4, 5a9c <bt_conn_security_changed+0xc>
}
    5a9a:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->security_changed) {
    5a9c:	6963      	ldr	r3, [r4, #20]
    5a9e:	b113      	cbz	r3, 5aa6 <bt_conn_security_changed+0x16>
			cb->security_changed(conn, conn->sec_level);
    5aa0:	7a29      	ldrb	r1, [r5, #8]
    5aa2:	4628      	mov	r0, r5
    5aa4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    5aa6:	69a4      	ldr	r4, [r4, #24]
    5aa8:	e7f6      	b.n	5a98 <bt_conn_security_changed+0x8>
    5aaa:	bf00      	nop
    5aac:	20000448 	.word	0x20000448

00005ab0 <bt_conn_security>:
{
    5ab0:	b530      	push	{r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    5ab2:	7b03      	ldrb	r3, [r0, #12]
    5ab4:	2b03      	cmp	r3, #3
{
    5ab6:	b085      	sub	sp, #20
    5ab8:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    5aba:	d156      	bne.n	5b6a <bt_conn_security+0xba>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    5abc:	7a03      	ldrb	r3, [r0, #8]
    5abe:	428b      	cmp	r3, r1
    5ac0:	d302      	bcc.n	5ac8 <bt_conn_security+0x18>
		return 0;
    5ac2:	2000      	movs	r0, #0
}
    5ac4:	b005      	add	sp, #20
    5ac6:	bd30      	pop	{r4, r5, pc}
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    5ac8:	7a43      	ldrb	r3, [r0, #9]
    5aca:	428b      	cmp	r3, r1
    5acc:	d2f9      	bcs.n	5ac2 <bt_conn_security+0x12>
	switch (conn->role) {
    5ace:	78c3      	ldrb	r3, [r0, #3]
	conn->required_sec_level = sec;
    5ad0:	7241      	strb	r1, [r0, #9]
	switch (conn->role) {
    5ad2:	b123      	cbz	r3, 5ade <bt_conn_security+0x2e>
    5ad4:	2b01      	cmp	r3, #1
    5ad6:	d045      	beq.n	5b64 <bt_conn_security+0xb4>
		return -EINVAL;
    5ad8:	f06f 0015 	mvn.w	r0, #21
    5adc:	e01a      	b.n	5b14 <bt_conn_security+0x64>
		if (!conn->le.keys) {
    5ade:	6f03      	ldr	r3, [r0, #112]	; 0x70
    5ae0:	2b00      	cmp	r3, #0
    5ae2:	d145      	bne.n	5b70 <bt_conn_security+0xc0>
						     &conn->le.dst);
    5ae4:	f100 0548 	add.w	r5, r0, #72	; 0x48
			conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    5ae8:	4629      	mov	r1, r5
    5aea:	2020      	movs	r0, #32
    5aec:	f004 ff12 	bl	a914 <bt_keys_find>
    5af0:	6720      	str	r0, [r4, #112]	; 0x70
			if (!conn->le.keys) {
    5af2:	2800      	cmp	r0, #0
    5af4:	d13c      	bne.n	5b70 <bt_conn_security+0xc0>
				conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    5af6:	4629      	mov	r1, r5
    5af8:	2004      	movs	r0, #4
    5afa:	f004 ff0b 	bl	a914 <bt_keys_find>
    5afe:	6720      	str	r0, [r4, #112]	; 0x70
		if (!conn->le.keys ||
    5b00:	b118      	cbz	r0, 5b0a <bt_conn_security+0x5a>
    5b02:	8983      	ldrh	r3, [r0, #12]
    5b04:	f003 0324 	and.w	r3, r3, #36	; 0x24
    5b08:	b93b      	cbnz	r3, 5b1a <bt_conn_security+0x6a>
			return bt_smp_send_pairing_req(conn);
    5b0a:	4620      	mov	r0, r4
    5b0c:	f004 fd62 	bl	a5d4 <bt_smp_send_pairing_req>
	if (err) {
    5b10:	2800      	cmp	r0, #0
    5b12:	d0d6      	beq.n	5ac2 <bt_conn_security+0x12>
		conn->required_sec_level = conn->sec_level;
    5b14:	7a23      	ldrb	r3, [r4, #8]
    5b16:	7263      	strb	r3, [r4, #9]
    5b18:	e7d4      	b.n	5ac4 <bt_conn_security+0x14>
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    5b1a:	7a63      	ldrb	r3, [r4, #9]
    5b1c:	2b02      	cmp	r3, #2
    5b1e:	d904      	bls.n	5b2a <bt_conn_security+0x7a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5b20:	3008      	adds	r0, #8
    5b22:	f7ff fefd 	bl	5920 <atomic_get>
    5b26:	07c1      	lsls	r1, r0, #31
    5b28:	d5ef      	bpl.n	5b0a <bt_conn_security+0x5a>
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    5b2a:	7a63      	ldrb	r3, [r4, #9]
    5b2c:	2b03      	cmp	r3, #3
    5b2e:	d909      	bls.n	5b44 <bt_conn_security+0x94>
		    !atomic_test_bit(conn->le.keys->flags,
    5b30:	6f20      	ldr	r0, [r4, #112]	; 0x70
    5b32:	3008      	adds	r0, #8
    5b34:	f7ff fef4 	bl	5920 <atomic_get>
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    5b38:	07c2      	lsls	r2, r0, #31
    5b3a:	d403      	bmi.n	5b44 <bt_conn_security+0x94>
		    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    5b3c:	6f23      	ldr	r3, [r4, #112]	; 0x70
				     BT_KEYS_AUTHENTICATED) &&
    5b3e:	899b      	ldrh	r3, [r3, #12]
    5b40:	069b      	lsls	r3, r3, #26
    5b42:	d5e2      	bpl.n	5b0a <bt_conn_security+0x5a>
						   conn->le.keys->ltk.rand,
    5b44:	6f23      	ldr	r3, [r4, #112]	; 0x70
		return bt_conn_le_start_encryption(conn,
    5b46:	79da      	ldrb	r2, [r3, #7]
    5b48:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    5b4c:	9202      	str	r2, [sp, #8]
						   conn->le.keys->ltk.val,
    5b4e:	f103 021a 	add.w	r2, r3, #26
		return bt_conn_le_start_encryption(conn,
    5b52:	9201      	str	r2, [sp, #4]
    5b54:	8b1b      	ldrh	r3, [r3, #24]
    5b56:	9300      	str	r3, [sp, #0]
    5b58:	4602      	mov	r2, r0
    5b5a:	460b      	mov	r3, r1
    5b5c:	4620      	mov	r0, r4
    5b5e:	f7ff ff5d 	bl	5a1c <bt_conn_le_start_encryption>
    5b62:	e7d5      	b.n	5b10 <bt_conn_security+0x60>
		return bt_smp_send_security_req(conn);
    5b64:	f004 fcf2 	bl	a54c <bt_smp_send_security_req>
    5b68:	e7d2      	b.n	5b10 <bt_conn_security+0x60>
		return -ENOTCONN;
    5b6a:	f06f 0038 	mvn.w	r0, #56	; 0x38
    5b6e:	e7a9      	b.n	5ac4 <bt_conn_security+0x14>
		if (!conn->le.keys ||
    5b70:	6f20      	ldr	r0, [r4, #112]	; 0x70
    5b72:	e7c6      	b.n	5b02 <bt_conn_security+0x52>

00005b74 <bt_conn_cb_register>:
	cb->_next = callback_list;
    5b74:	4b02      	ldr	r3, [pc, #8]	; (5b80 <bt_conn_cb_register+0xc>)
    5b76:	681a      	ldr	r2, [r3, #0]
    5b78:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    5b7a:	6018      	str	r0, [r3, #0]
    5b7c:	4770      	bx	lr
    5b7e:	bf00      	nop
    5b80:	20000448 	.word	0x20000448

00005b84 <bt_conn_recv>:
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);

	/* Check packet boundary flags */
	switch (flags) {
    5b84:	2a01      	cmp	r2, #1
{
    5b86:	b570      	push	{r4, r5, r6, lr}
    5b88:	4605      	mov	r5, r0
    5b8a:	460c      	mov	r4, r1
	switch (flags) {
    5b8c:	d00f      	beq.n	5bae <bt_conn_recv+0x2a>
    5b8e:	2a02      	cmp	r2, #2
    5b90:	d110      	bne.n	5bb4 <bt_conn_recv+0x30>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    5b92:	688b      	ldr	r3, [r1, #8]
    5b94:	881e      	ldrh	r6, [r3, #0]

		BT_DBG("First, len %u final %u", buf->len, len);

		if (conn->rx_len) {
    5b96:	89c3      	ldrh	r3, [r0, #14]
    5b98:	b10b      	cbz	r3, 5b9e <bt_conn_recv+0x1a>
			BT_ERR("Unexpected first L2CAP frame");
			bt_conn_reset_rx_state(conn);
    5b9a:	f7ff fec7 	bl	592c <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    5b9e:	89a3      	ldrh	r3, [r4, #12]
    5ba0:	1af3      	subs	r3, r6, r3
    5ba2:	3304      	adds	r3, #4
    5ba4:	b29b      	uxth	r3, r3
    5ba6:	81eb      	strh	r3, [r5, #14]
		BT_DBG("rx_len %u", conn->rx_len);
		if (conn->rx_len) {
    5ba8:	b333      	cbz	r3, 5bf8 <bt_conn_recv+0x74>
			conn->rx = buf;
    5baa:	612c      	str	r4, [r5, #16]
			return;
    5bac:	bd70      	pop	{r4, r5, r6, pc}
		}

		break;
	case BT_ACL_CONT:
		if (!conn->rx_len) {
    5bae:	89c3      	ldrh	r3, [r0, #14]
    5bb0:	b93b      	cbnz	r3, 5bc2 <bt_conn_recv+0x3e>
			BT_ERR("Unexpected L2CAP continuation");
			bt_conn_reset_rx_state(conn);
    5bb2:	4628      	mov	r0, r5
		conn->rx_len = 0;

		break;
	default:
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
		bt_conn_reset_rx_state(conn);
    5bb4:	f7ff feba 	bl	592c <bt_conn_reset_rx_state>
	hdr = (void *)buf->data;
	len = sys_le16_to_cpu(hdr->len);

	if (sizeof(*hdr) + len != buf->len) {
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
		net_buf_unref(buf);
    5bb8:	4620      	mov	r0, r4
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    5bba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    5bbe:	f011 bfa7 	b.w	17b10 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    5bc2:	898e      	ldrh	r6, [r1, #12]
    5bc4:	42b3      	cmp	r3, r6
    5bc6:	d3f4      	bcc.n	5bb2 <bt_conn_recv+0x2e>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    5bc8:	6900      	ldr	r0, [r0, #16]
    5bca:	3008      	adds	r0, #8
    5bcc:	f012 f86a 	bl	17ca4 <net_buf_simple_tailroom>
    5bd0:	4286      	cmp	r6, r0
    5bd2:	d8ee      	bhi.n	5bb2 <bt_conn_recv+0x2e>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    5bd4:	6928      	ldr	r0, [r5, #16]
    5bd6:	89a2      	ldrh	r2, [r4, #12]
    5bd8:	68a1      	ldr	r1, [r4, #8]
    5bda:	3008      	adds	r0, #8
    5bdc:	f011 fffc 	bl	17bd8 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    5be0:	89eb      	ldrh	r3, [r5, #14]
    5be2:	89a2      	ldrh	r2, [r4, #12]
    5be4:	1a9b      	subs	r3, r3, r2
    5be6:	81eb      	strh	r3, [r5, #14]
		net_buf_unref(buf);
    5be8:	4620      	mov	r0, r4
    5bea:	f011 ff91 	bl	17b10 <net_buf_unref>
		if (conn->rx_len) {
    5bee:	89eb      	ldrh	r3, [r5, #14]
    5bf0:	b973      	cbnz	r3, 5c10 <bt_conn_recv+0x8c>
		buf = conn->rx;
    5bf2:	692c      	ldr	r4, [r5, #16]
		conn->rx_len = 0;
    5bf4:	81eb      	strh	r3, [r5, #14]
		conn->rx = NULL;
    5bf6:	612b      	str	r3, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
    5bf8:	68a3      	ldr	r3, [r4, #8]
	if (sizeof(*hdr) + len != buf->len) {
    5bfa:	89a2      	ldrh	r2, [r4, #12]
    5bfc:	881b      	ldrh	r3, [r3, #0]
    5bfe:	3304      	adds	r3, #4
    5c00:	4293      	cmp	r3, r2
    5c02:	d1d9      	bne.n	5bb8 <bt_conn_recv+0x34>
	bt_l2cap_recv(conn, buf);
    5c04:	4621      	mov	r1, r4
    5c06:	4628      	mov	r0, r5
}
    5c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    5c0c:	f001 b935 	b.w	6e7a <bt_l2cap_recv>
    5c10:	bd70      	pop	{r4, r5, r6, pc}

00005c12 <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    5c12:	b510      	push	{r4, lr}
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	if (conn->state != BT_CONN_CONNECTED) {
    5c14:	7b04      	ldrb	r4, [r0, #12]
    5c16:	2c03      	cmp	r4, #3
    5c18:	d005      	beq.n	5c26 <bt_conn_send_cb+0x14>
		BT_ERR("not connected!");
		net_buf_unref(buf);
    5c1a:	4608      	mov	r0, r1
    5c1c:	f011 ff78 	bl	17b10 <net_buf_unref>
		return -ENOTCONN;
    5c20:	f06f 0038 	mvn.w	r0, #56	; 0x38
    5c24:	bd10      	pop	{r4, pc}
	}

	conn_tx(buf)->cb = cb;
    5c26:	614a      	str	r2, [r1, #20]

	net_buf_put(&conn->tx_queue, buf);
    5c28:	302c      	adds	r0, #44	; 0x2c
    5c2a:	f011 ff64 	bl	17af6 <net_buf_put>
	return 0;
    5c2e:	2000      	movs	r0, #0
}
    5c30:	bd10      	pop	{r4, pc}
	...

00005c34 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    5c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	node->next = list->head;
    5c38:	4d0d      	ldr	r5, [pc, #52]	; (5c70 <bt_conn_notify_tx+0x3c>)
    5c3a:	4606      	mov	r6, r0
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    5c3c:	f100 071c 	add.w	r7, r0, #28
    5c40:	f04f 0800 	mov.w	r8, #0
    5c44:	2100      	movs	r1, #0
    5c46:	4638      	mov	r0, r7
    5c48:	f019 fbd9 	bl	1f3fe <k_queue_get>
    5c4c:	4604      	mov	r4, r0
    5c4e:	b908      	cbnz	r0, 5c54 <bt_conn_notify_tx+0x20>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    5c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    5c54:	6863      	ldr	r3, [r4, #4]
    5c56:	b10b      	cbz	r3, 5c5c <bt_conn_notify_tx+0x28>
			tx->cb(conn);
    5c58:	4630      	mov	r0, r6
    5c5a:	4798      	blx	r3
    5c5c:	682b      	ldr	r3, [r5, #0]
    5c5e:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
    5c60:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    5c62:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    5c66:	602c      	str	r4, [r5, #0]
	if (!list->tail) {
    5c68:	2b00      	cmp	r3, #0
    5c6a:	d1eb      	bne.n	5c44 <bt_conn_notify_tx+0x10>
		list->tail = list->head;
    5c6c:	606c      	str	r4, [r5, #4]
    5c6e:	e7e7      	b.n	5c40 <bt_conn_notify_tx+0xc>
    5c70:	200004f8 	.word	0x200004f8

00005c74 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    5c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c78:	4605      	mov	r5, r0
    5c7a:	460f      	mov	r7, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    5c7c:	483e      	ldr	r0, [pc, #248]	; (5d78 <send_frag+0x104>)
    5c7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5c82:	4698      	mov	r8, r3
    5c84:	4614      	mov	r4, r2
    5c86:	f019 fe41 	bl	1f90c <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    5c8a:	4b3c      	ldr	r3, [pc, #240]	; (5d7c <send_frag+0x108>)
    5c8c:	f103 0044 	add.w	r0, r3, #68	; 0x44
    5c90:	f7ff fe46 	bl	5920 <atomic_get>
    5c94:	b130      	cbz	r0, 5ca4 <send_frag+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    5c96:	7b1a      	ldrb	r2, [r3, #12]
    5c98:	3a03      	subs	r2, #3
    5c9a:	2a01      	cmp	r2, #1
    5c9c:	d802      	bhi.n	5ca4 <send_frag+0x30>
			bt_conn_notify_tx(&conns[i]);
    5c9e:	4618      	mov	r0, r3
    5ca0:	f7ff ffc8 	bl	5c34 <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    5ca4:	7b2b      	ldrb	r3, [r5, #12]
    5ca6:	2b03      	cmp	r3, #3
    5ca8:	d149      	bne.n	5d3e <send_frag+0xca>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    5caa:	2104      	movs	r1, #4
    5cac:	f107 0008 	add.w	r0, r7, #8
    5cb0:	f011 ffc3 	bl	17c3a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    5cb4:	882a      	ldrh	r2, [r5, #0]
	sys_snode_t *node = list->head;
    5cb6:	4e32      	ldr	r6, [pc, #200]	; (5d80 <send_frag+0x10c>)
    5cb8:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    5cbc:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5cbe:	89bb      	ldrh	r3, [r7, #12]
    5cc0:	6834      	ldr	r4, [r6, #0]
	if (list->tail == node) {
    5cc2:	6871      	ldr	r1, [r6, #4]

	cb = conn_tx(buf)->cb;
    5cc4:	697a      	ldr	r2, [r7, #20]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5cc6:	3b04      	subs	r3, #4
    5cc8:	8043      	strh	r3, [r0, #2]
    5cca:	2302      	movs	r3, #2
    5ccc:	753b      	strb	r3, [r7, #20]
	list->head = node->next;
    5cce:	6823      	ldr	r3, [r4, #0]
    5cd0:	6033      	str	r3, [r6, #0]
	if (list->tail == node) {
    5cd2:	428c      	cmp	r4, r1
		list->tail = list->head;
    5cd4:	bf08      	it	eq
    5cd6:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    5cd8:	6062      	str	r2, [r4, #4]
	__asm__ volatile(
    5cda:	f04f 0320 	mov.w	r3, #32
    5cde:	f3ef 8211 	mrs	r2, BASEPRI
    5ce2:	f383 8811 	msr	BASEPRI, r3
	node->next = NULL;
    5ce6:	2300      	movs	r3, #0
    5ce8:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
    5cea:	69ab      	ldr	r3, [r5, #24]
    5cec:	2b00      	cmp	r3, #0
    5cee:	d134      	bne.n	5d5a <send_frag+0xe6>
		list->tail = node;
    5cf0:	61ac      	str	r4, [r5, #24]
		list->head = node;
    5cf2:	616c      	str	r4, [r5, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    5cf4:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    5cf8:	4638      	mov	r0, r7
    5cfa:	f7fe f841 	bl	3d80 <bt_send>
	if (err) {
    5cfe:	2800      	cmp	r0, #0
    5d00:	d036      	beq.n	5d70 <send_frag+0xfc>
	__asm__ volatile(
    5d02:	f04f 0320 	mov.w	r3, #32
    5d06:	f3ef 8011 	mrs	r0, BASEPRI
    5d0a:	f383 8811 	msr	BASEPRI, r3
    5d0e:	696b      	ldr	r3, [r5, #20]
	sys_snode_t *prev = NULL;
    5d10:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    5d12:	b153      	cbz	r3, 5d2a <send_frag+0xb6>
		if (test == node) {
    5d14:	429c      	cmp	r4, r3
    5d16:	d128      	bne.n	5d6a <send_frag+0xf6>
    5d18:	6823      	ldr	r3, [r4, #0]
    5d1a:	69a9      	ldr	r1, [r5, #24]
	if (!prev_node) {
    5d1c:	bb02      	cbnz	r2, 5d60 <send_frag+0xec>
		if (list->tail == node) {
    5d1e:	428c      	cmp	r4, r1
		list->head = node->next;
    5d20:	616b      	str	r3, [r5, #20]
		if (list->tail == node) {
    5d22:	d100      	bne.n	5d26 <send_frag+0xb2>
			list->tail = list->head;
    5d24:	61ab      	str	r3, [r5, #24]
	node->next = NULL;
    5d26:	2300      	movs	r3, #0
    5d28:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    5d2a:	f380 8811 	msr	BASEPRI, r0
	tx->cb = NULL;
    5d2e:	2300      	movs	r3, #0
    5d30:	6063      	str	r3, [r4, #4]
	node->next = list->head;
    5d32:	6833      	ldr	r3, [r6, #0]
    5d34:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
    5d36:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    5d38:	6034      	str	r4, [r6, #0]
	if (!list->tail) {
    5d3a:	b903      	cbnz	r3, 5d3e <send_frag+0xca>
		list->tail = list->head;
    5d3c:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    5d3e:	480e      	ldr	r0, [pc, #56]	; (5d78 <send_frag+0x104>)
    5d40:	f019 fd84 	bl	1f84c <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    5d44:	f1b8 0f00 	cmp.w	r8, #0
    5d48:	d004      	beq.n	5d54 <send_frag+0xe0>
		net_buf_unref(buf);
    5d4a:	4638      	mov	r0, r7
    5d4c:	f011 fee0 	bl	17b10 <net_buf_unref>
	}
	return false;
    5d50:	f04f 0800 	mov.w	r8, #0
}
    5d54:	4640      	mov	r0, r8
    5d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		list->tail->next = node;
    5d5a:	601c      	str	r4, [r3, #0]
		list->tail = node;
    5d5c:	61ac      	str	r4, [r5, #24]
    5d5e:	e7c9      	b.n	5cf4 <send_frag+0x80>
		if (list->tail == node) {
    5d60:	428c      	cmp	r4, r1
		prev_node->next = node->next;
    5d62:	6013      	str	r3, [r2, #0]
			list->tail = prev_node;
    5d64:	bf08      	it	eq
    5d66:	61aa      	streq	r2, [r5, #24]
    5d68:	e7dd      	b.n	5d26 <send_frag+0xb2>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    5d6a:	461a      	mov	r2, r3
    5d6c:	681b      	ldr	r3, [r3, #0]
    5d6e:	e7d0      	b.n	5d12 <send_frag+0x9e>
	return true;
    5d70:	f04f 0801 	mov.w	r8, #1
    5d74:	e7ee      	b.n	5d54 <send_frag+0xe0>
    5d76:	bf00      	nop
    5d78:	2000dd84 	.word	0x2000dd84
    5d7c:	2000045c 	.word	0x2000045c
    5d80:	200004f8 	.word	0x200004f8

00005d84 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    5d84:	b538      	push	{r3, r4, r5, lr}
    5d86:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    5d88:	f100 052c 	add.w	r5, r0, #44	; 0x2c
    5d8c:	2100      	movs	r1, #0
    5d8e:	4628      	mov	r0, r5
    5d90:	f011 fe94 	bl	17abc <net_buf_get>
    5d94:	b958      	cbnz	r0, 5dae <conn_cleanup+0x2a>
		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");

	bt_conn_notify_tx(conn);
    5d96:	4620      	mov	r0, r4
    5d98:	f7ff ff4c 	bl	5c34 <bt_conn_notify_tx>

	bt_conn_reset_rx_state(conn);
    5d9c:	4620      	mov	r0, r4
    5d9e:	f7ff fdc5 	bl	592c <bt_conn_reset_rx_state>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    5da2:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
    5da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_dec(&conn->ref);
    5daa:	f7ff bdca 	b.w	5942 <atomic_dec>
		net_buf_unref(buf);
    5dae:	f011 feaf 	bl	17b10 <net_buf_unref>
    5db2:	e7eb      	b.n	5d8c <conn_cleanup+0x8>

00005db4 <bt_conn_prepare_events>:
{
    5db4:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0;
    5db6:	4b1f      	ldr	r3, [pc, #124]	; (5e34 <bt_conn_prepare_events+0x80>)
    5db8:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    5dba:	2101      	movs	r1, #1
	conn_change.signaled = 0;
    5dbc:	609a      	str	r2, [r3, #8]
{
    5dbe:	4605      	mov	r5, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    5dc0:	f01a faa4 	bl	2030c <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    5dc4:	4b1c      	ldr	r3, [pc, #112]	; (5e38 <bt_conn_prepare_events+0x84>)
    5dc6:	f103 0044 	add.w	r0, r3, #68	; 0x44
    5dca:	f7ff fda9 	bl	5920 <atomic_get>
    5dce:	4619      	mov	r1, r3
    5dd0:	b908      	cbnz	r0, 5dd6 <bt_conn_prepare_events+0x22>
			continue;
    5dd2:	2001      	movs	r0, #1
    5dd4:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    5dd6:	7b1a      	ldrb	r2, [r3, #12]
    5dd8:	b99a      	cbnz	r2, 5e02 <bt_conn_prepare_events+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5dda:	f3bf 8f5b 	dmb	ish
    5dde:	1d1a      	adds	r2, r3, #4
    5de0:	e852 0f00 	ldrex	r0, [r2]
    5de4:	f020 0440 	bic.w	r4, r0, #64	; 0x40
    5de8:	e842 4e00 	strex	lr, r4, [r2]
    5dec:	f1be 0f00 	cmp.w	lr, #0
    5df0:	d1f6      	bne.n	5de0 <bt_conn_prepare_events+0x2c>
    5df2:	f3bf 8f5b 	dmb	ish
    5df6:	0642      	lsls	r2, r0, #25
    5df8:	d503      	bpl.n	5e02 <bt_conn_prepare_events+0x4e>
			conn_cleanup(conn);
    5dfa:	4618      	mov	r0, r3
    5dfc:	f7ff ffc2 	bl	5d84 <conn_cleanup>
    5e00:	e7e7      	b.n	5dd2 <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    5e02:	7b0c      	ldrb	r4, [r1, #12]
    5e04:	2c03      	cmp	r4, #3
    5e06:	d1e4      	bne.n	5dd2 <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    5e08:	f105 0014 	add.w	r0, r5, #20
    5e0c:	4b0b      	ldr	r3, [pc, #44]	; (5e3c <bt_conn_prepare_events+0x88>)
    5e0e:	2200      	movs	r2, #0
    5e10:	2104      	movs	r1, #4
    5e12:	f01a fa7b 	bl	2030c <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    5e16:	2301      	movs	r3, #1
    5e18:	f885 3020 	strb.w	r3, [r5, #32]
		k_poll_event_init(&events[ev_count],
    5e1c:	f105 0028 	add.w	r0, r5, #40	; 0x28
    5e20:	4b07      	ldr	r3, [pc, #28]	; (5e40 <bt_conn_prepare_events+0x8c>)
    5e22:	2200      	movs	r2, #0
    5e24:	2104      	movs	r1, #4
    5e26:	f01a fa71 	bl	2030c <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    5e2a:	2302      	movs	r3, #2
    5e2c:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    5e30:	4620      	mov	r0, r4
}
    5e32:	bd38      	pop	{r3, r4, r5, pc}
    5e34:	2000de30 	.word	0x2000de30
    5e38:	2000045c 	.word	0x2000045c
    5e3c:	20000478 	.word	0x20000478
    5e40:	20000488 	.word	0x20000488

00005e44 <bt_conn_add_le>:
{
    5e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!atomic_get(&conns[i].ref)) {
    5e48:	4c19      	ldr	r4, [pc, #100]	; (5eb0 <bt_conn_add_le+0x6c>)
    5e4a:	f104 0744 	add.w	r7, r4, #68	; 0x44
{
    5e4e:	4680      	mov	r8, r0
		if (!atomic_get(&conns[i].ref)) {
    5e50:	4638      	mov	r0, r7
    5e52:	f7ff fd65 	bl	5920 <atomic_get>
    5e56:	4605      	mov	r5, r0
    5e58:	b110      	cbz	r0, 5e60 <bt_conn_add_le+0x1c>
		return NULL;
    5e5a:	2000      	movs	r0, #0
    5e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memset(conn, 0, sizeof(*conn));
    5e60:	4601      	mov	r1, r0
    5e62:	229c      	movs	r2, #156	; 0x9c
    5e64:	4620      	mov	r0, r4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5e66:	2601      	movs	r6, #1
    5e68:	f7fa fd6b 	bl	942 <memset>
    5e6c:	f3bf 8f5b 	dmb	ish
    5e70:	e857 3f00 	ldrex	r3, [r7]
    5e74:	e847 6200 	strex	r2, r6, [r7]
    5e78:	2a00      	cmp	r2, #0
    5e7a:	d1f9      	bne.n	5e70 <bt_conn_add_le+0x2c>
    5e7c:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    5e80:	2207      	movs	r2, #7
    5e82:	4641      	mov	r1, r8
    5e84:	f104 0048 	add.w	r0, r4, #72	; 0x48
    5e88:	f7fa fd2f 	bl	8ea <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    5e8c:	2318      	movs	r3, #24
    5e8e:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    5e92:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    5e94:	f104 0074 	add.w	r0, r4, #116	; 0x74
	conn->sec_level = BT_SECURITY_LOW;
    5e98:	7226      	strb	r6, [r4, #8]
	conn->required_sec_level = BT_SECURITY_LOW;
    5e9a:	7266      	strb	r6, [r4, #9]
	conn->type = BT_CONN_TYPE_LE;
    5e9c:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    5e9e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    5ea2:	4904      	ldr	r1, [pc, #16]	; (5eb4 <bt_conn_add_le+0x70>)
    5ea4:	f019 fffe 	bl	1fea4 <k_delayed_work_init>
			conn = &conns[i];
    5ea8:	4620      	mov	r0, r4
}
    5eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5eae:	bf00      	nop
    5eb0:	2000045c 	.word	0x2000045c
    5eb4:	000063e9 	.word	0x000063e9

00005eb8 <bt_conn_set_state>:
{
    5eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
    5eba:	7b05      	ldrb	r5, [r0, #12]
    5ebc:	428d      	cmp	r5, r1
{
    5ebe:	4604      	mov	r4, r0
	if (conn->state == state) {
    5ec0:	f000 8099 	beq.w	5ff6 <bt_conn_set_state+0x13e>
	conn->state = state;
    5ec4:	7301      	strb	r1, [r0, #12]
	switch (old_state) {
    5ec6:	b19d      	cbz	r5, 5ef0 <bt_conn_set_state+0x38>
    5ec8:	2d02      	cmp	r5, #2
    5eca:	d015      	beq.n	5ef8 <bt_conn_set_state+0x40>
	switch (conn->state) {
    5ecc:	7b23      	ldrb	r3, [r4, #12]
    5ece:	2b02      	cmp	r3, #2
    5ed0:	f000 8086 	beq.w	5fe0 <bt_conn_set_state+0x128>
    5ed4:	2b03      	cmp	r3, #3
    5ed6:	d016      	beq.n	5f06 <bt_conn_set_state+0x4e>
    5ed8:	2b00      	cmp	r3, #0
    5eda:	f040 808c 	bne.w	5ff6 <bt_conn_set_state+0x13e>
		if (conn->type == BT_CONN_TYPE_SCO) {
    5ede:	78a3      	ldrb	r3, [r4, #2]
    5ee0:	2b02      	cmp	r3, #2
    5ee2:	d12a      	bne.n	5f3a <bt_conn_set_state+0x82>
	atomic_dec(&conn->ref);
    5ee4:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
    5ee8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	atomic_dec(&conn->ref);
    5eec:	f7ff bd29 	b.w	5942 <atomic_dec>
	atomic_inc(&conn->ref);
    5ef0:	3044      	adds	r0, #68	; 0x44
    5ef2:	f7ff fd33 	bl	595c <atomic_inc>
    5ef6:	e7e9      	b.n	5ecc <bt_conn_set_state+0x14>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5ef8:	7883      	ldrb	r3, [r0, #2]
    5efa:	2b00      	cmp	r3, #0
    5efc:	d1e6      	bne.n	5ecc <bt_conn_set_state+0x14>
			k_delayed_work_cancel(&conn->le.update_work);
    5efe:	3074      	adds	r0, #116	; 0x74
    5f00:	f019 ffee 	bl	1fee0 <k_delayed_work_cancel>
    5f04:	e7e2      	b.n	5ecc <bt_conn_set_state+0x14>
		if (conn->type == BT_CONN_TYPE_SCO) {
    5f06:	78a3      	ldrb	r3, [r4, #2]
    5f08:	2b02      	cmp	r3, #2
    5f0a:	d074      	beq.n	5ff6 <bt_conn_set_state+0x13e>
		k_fifo_init(&conn->tx_queue);
    5f0c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    5f10:	f019 fa20 	bl	1f354 <k_queue_init>
		k_fifo_init(&conn->tx_notify);
    5f14:	f104 001c 	add.w	r0, r4, #28
    5f18:	f019 fa1c 	bl	1f354 <k_queue_init>
		k_poll_signal(&conn_change, 0);
    5f1c:	2100      	movs	r1, #0
    5f1e:	4836      	ldr	r0, [pc, #216]	; (5ff8 <bt_conn_set_state+0x140>)
    5f20:	f01a fabe 	bl	204a0 <k_poll_signal>
	list->head = NULL;
    5f24:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    5f26:	4620      	mov	r0, r4
    5f28:	63e3      	str	r3, [r4, #60]	; 0x3c
	list->tail = NULL;
    5f2a:	6423      	str	r3, [r4, #64]	; 0x40
    5f2c:	f000 fe7c 	bl	6c28 <bt_l2cap_connected>
		notify_connected(conn);
    5f30:	4620      	mov	r0, r4
}
    5f32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		notify_connected(conn);
    5f36:	f7ff bce3 	b.w	5900 <notify_connected>
		if (old_state == BT_CONN_CONNECTED ||
    5f3a:	1eeb      	subs	r3, r5, #3
    5f3c:	2b01      	cmp	r3, #1
    5f3e:	d843      	bhi.n	5fc8 <bt_conn_set_state+0x110>
			bt_l2cap_disconnected(conn);
    5f40:	4620      	mov	r0, r4
    5f42:	f000 fc88 	bl	6856 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    5f46:	4b2d      	ldr	r3, [pc, #180]	; (5ffc <bt_conn_set_state+0x144>)
    5f48:	681d      	ldr	r5, [r3, #0]
    5f4a:	b9ed      	cbnz	r5, 5f88 <bt_conn_set_state+0xd0>
	node->next = list->head;
    5f4c:	4e2c      	ldr	r6, [pc, #176]	; (6000 <bt_conn_set_state+0x148>)
    5f4e:	4f2d      	ldr	r7, [pc, #180]	; (6004 <bt_conn_set_state+0x14c>)
	__asm__ volatile(
    5f50:	f04f 0320 	mov.w	r3, #32
    5f54:	f3ef 8111 	mrs	r1, BASEPRI
    5f58:	f383 8811 	msr	BASEPRI, r3
    5f5c:	6963      	ldr	r3, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    5f5e:	b12b      	cbz	r3, 5f6c <bt_conn_set_state+0xb4>
	if (list->tail == node) {
    5f60:	69a0      	ldr	r0, [r4, #24]
	list->head = node->next;
    5f62:	681a      	ldr	r2, [r3, #0]
    5f64:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    5f66:	4283      	cmp	r3, r0
		list->tail = list->head;
    5f68:	bf08      	it	eq
    5f6a:	61a2      	streq	r2, [r4, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    5f6c:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
    5f70:	b18b      	cbz	r3, 5f96 <bt_conn_set_state+0xde>
	node->next = list->head;
    5f72:	6832      	ldr	r2, [r6, #0]
    5f74:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
    5f76:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    5f78:	605d      	str	r5, [r3, #4]
	list->head = node;
    5f7a:	6033      	str	r3, [r6, #0]
	if (!list->tail) {
    5f7c:	b902      	cbnz	r2, 5f80 <bt_conn_set_state+0xc8>
		list->tail = list->head;
    5f7e:	6073      	str	r3, [r6, #4]
    5f80:	4638      	mov	r0, r7
    5f82:	f019 fc63 	bl	1f84c <_impl_k_sem_give>
    5f86:	e7e3      	b.n	5f50 <bt_conn_set_state+0x98>
		if (cb->disconnected) {
    5f88:	686b      	ldr	r3, [r5, #4]
    5f8a:	b113      	cbz	r3, 5f92 <bt_conn_set_state+0xda>
			cb->disconnected(conn, conn->err);
    5f8c:	7ae1      	ldrb	r1, [r4, #11]
    5f8e:	4620      	mov	r0, r4
    5f90:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    5f92:	69ad      	ldr	r5, [r5, #24]
    5f94:	e7d9      	b.n	5f4a <bt_conn_set_state+0x92>
			if (conn->type == BT_CONN_TYPE_LE) {
    5f96:	78a3      	ldrb	r3, [r4, #2]
    5f98:	b91b      	cbnz	r3, 5fa2 <bt_conn_set_state+0xea>
				k_delayed_work_cancel(&conn->le.update_work);
    5f9a:	f104 0074 	add.w	r0, r4, #116	; 0x74
    5f9e:	f019 ff9f 	bl	1fee0 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5fa2:	f3bf 8f5b 	dmb	ish
    5fa6:	3404      	adds	r4, #4
    5fa8:	e854 3f00 	ldrex	r3, [r4]
    5fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5fb0:	e844 3200 	strex	r2, r3, [r4]
    5fb4:	2a00      	cmp	r2, #0
    5fb6:	d1f7      	bne.n	5fa8 <bt_conn_set_state+0xf0>
    5fb8:	f3bf 8f5b 	dmb	ish
			k_poll_signal(&conn_change, 0);
    5fbc:	2100      	movs	r1, #0
    5fbe:	480e      	ldr	r0, [pc, #56]	; (5ff8 <bt_conn_set_state+0x140>)
}
    5fc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			k_poll_signal(&conn_change, 0);
    5fc4:	f01a ba6c 	b.w	204a0 <k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
    5fc8:	2d02      	cmp	r5, #2
    5fca:	d103      	bne.n	5fd4 <bt_conn_set_state+0x11c>
			notify_connected(conn);
    5fcc:	4620      	mov	r0, r4
    5fce:	f7ff fc97 	bl	5900 <notify_connected>
    5fd2:	e787      	b.n	5ee4 <bt_conn_set_state+0x2c>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    5fd4:	2d01      	cmp	r5, #1
    5fd6:	d10e      	bne.n	5ff6 <bt_conn_set_state+0x13e>
			if (conn->err) {
    5fd8:	7ae3      	ldrb	r3, [r4, #11]
    5fda:	2b00      	cmp	r3, #0
    5fdc:	d082      	beq.n	5ee4 <bt_conn_set_state+0x2c>
    5fde:	e7f5      	b.n	5fcc <bt_conn_set_state+0x114>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5fe0:	78a3      	ldrb	r3, [r4, #2]
    5fe2:	b943      	cbnz	r3, 5ff6 <bt_conn_set_state+0x13e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    5fe4:	f104 0174 	add.w	r1, r4, #116	; 0x74
    5fe8:	f640 32b8 	movw	r2, #3000	; 0xbb8
    5fec:	4806      	ldr	r0, [pc, #24]	; (6008 <bt_conn_set_state+0x150>)
}
    5fee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5ff2:	f019 bfcf 	b.w	1ff94 <k_delayed_work_submit_to_queue>
    5ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ff8:	2000de30 	.word	0x2000de30
    5ffc:	20000448 	.word	0x20000448
    6000:	200004f8 	.word	0x200004f8
    6004:	2000dd84 	.word	0x2000dd84
    6008:	20005218 	.word	0x20005218

0000600c <bt_conn_lookup_handle>:
{
    600c:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    600e:	4c0b      	ldr	r4, [pc, #44]	; (603c <bt_conn_lookup_handle+0x30>)
{
    6010:	4602      	mov	r2, r0
		if (!atomic_get(&conns[i].ref)) {
    6012:	f104 0044 	add.w	r0, r4, #68	; 0x44
    6016:	f7ff fc83 	bl	5920 <atomic_get>
    601a:	b168      	cbz	r0, 6038 <bt_conn_lookup_handle+0x2c>
		if (conns[i].state != BT_CONN_CONNECTED &&
    601c:	7b23      	ldrb	r3, [r4, #12]
    601e:	3b03      	subs	r3, #3
    6020:	2b01      	cmp	r3, #1
    6022:	d808      	bhi.n	6036 <bt_conn_lookup_handle+0x2a>
		if (conns[i].handle == handle) {
    6024:	8823      	ldrh	r3, [r4, #0]
    6026:	4293      	cmp	r3, r2
    6028:	d105      	bne.n	6036 <bt_conn_lookup_handle+0x2a>
	atomic_inc(&conn->ref);
    602a:	f104 0044 	add.w	r0, r4, #68	; 0x44
    602e:	f7ff fc95 	bl	595c <atomic_inc>
			return bt_conn_ref(&conns[i]);
    6032:	4620      	mov	r0, r4
    6034:	bd10      	pop	{r4, pc}
	return NULL;
    6036:	2000      	movs	r0, #0
}
    6038:	bd10      	pop	{r4, pc}
    603a:	bf00      	nop
    603c:	2000045c 	.word	0x2000045c

00006040 <bt_conn_addr_le_cmp>:
{
    6040:	b538      	push	{r3, r4, r5, lr}
    6042:	460d      	mov	r5, r1
    6044:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    6046:	f100 0148 	add.w	r1, r0, #72	; 0x48
    604a:	2207      	movs	r2, #7
    604c:	4628      	mov	r0, r5
    604e:	f7fa fc1f 	bl	890 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    6052:	b160      	cbz	r0, 606e <bt_conn_addr_le_cmp+0x2e>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    6054:	78e3      	ldrb	r3, [r4, #3]
    6056:	2207      	movs	r2, #7
    6058:	b933      	cbnz	r3, 6068 <bt_conn_addr_le_cmp+0x28>
    605a:	f104 0156 	add.w	r1, r4, #86	; 0x56
    605e:	4628      	mov	r0, r5
}
    6060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6064:	f7fa bc14 	b.w	890 <memcmp>
    6068:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    606c:	e7f7      	b.n	605e <bt_conn_addr_le_cmp+0x1e>
    606e:	bd38      	pop	{r3, r4, r5, pc}

00006070 <bt_conn_lookup_addr_le>:
{
    6070:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    6072:	4c0b      	ldr	r4, [pc, #44]	; (60a0 <bt_conn_lookup_addr_le+0x30>)
{
    6074:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    6076:	f104 0044 	add.w	r0, r4, #68	; 0x44
    607a:	f7ff fc51 	bl	5920 <atomic_get>
    607e:	b908      	cbnz	r0, 6084 <bt_conn_lookup_addr_le+0x14>
	return NULL;
    6080:	2000      	movs	r0, #0
    6082:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    6084:	78a3      	ldrb	r3, [r4, #2]
    6086:	2b00      	cmp	r3, #0
    6088:	d1fa      	bne.n	6080 <bt_conn_lookup_addr_le+0x10>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    608a:	4620      	mov	r0, r4
    608c:	f7ff ffd8 	bl	6040 <bt_conn_addr_le_cmp>
    6090:	2800      	cmp	r0, #0
    6092:	d1f5      	bne.n	6080 <bt_conn_lookup_addr_le+0x10>
	atomic_inc(&conn->ref);
    6094:	f104 0044 	add.w	r0, r4, #68	; 0x44
    6098:	f7ff fc60 	bl	595c <atomic_inc>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    609c:	4620      	mov	r0, r4
}
    609e:	bd10      	pop	{r4, pc}
    60a0:	2000045c 	.word	0x2000045c

000060a4 <bt_conn_lookup_state_le>:
{
    60a4:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    60a6:	4c0e      	ldr	r4, [pc, #56]	; (60e0 <bt_conn_lookup_state_le+0x3c>)
{
    60a8:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    60aa:	f104 0044 	add.w	r0, r4, #68	; 0x44
{
    60ae:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    60b0:	f7ff fc36 	bl	5920 <atomic_get>
    60b4:	b908      	cbnz	r0, 60ba <bt_conn_lookup_state_le+0x16>
	return NULL;
    60b6:	2000      	movs	r0, #0
    60b8:	bd38      	pop	{r3, r4, r5, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    60ba:	78a2      	ldrb	r2, [r4, #2]
    60bc:	2a00      	cmp	r2, #0
    60be:	d1fa      	bne.n	60b6 <bt_conn_lookup_state_le+0x12>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    60c0:	b93b      	cbnz	r3, 60d2 <bt_conn_lookup_state_le+0x2e>
		if (conns[i].state == state) {
    60c2:	7b23      	ldrb	r3, [r4, #12]
    60c4:	42ab      	cmp	r3, r5
    60c6:	d1f6      	bne.n	60b6 <bt_conn_lookup_state_le+0x12>
	atomic_inc(&conn->ref);
    60c8:	4806      	ldr	r0, [pc, #24]	; (60e4 <bt_conn_lookup_state_le+0x40>)
    60ca:	f7ff fc47 	bl	595c <atomic_inc>
			return bt_conn_ref(&conns[i]);
    60ce:	4804      	ldr	r0, [pc, #16]	; (60e0 <bt_conn_lookup_state_le+0x3c>)
}
    60d0:	bd38      	pop	{r3, r4, r5, pc}
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    60d2:	4619      	mov	r1, r3
    60d4:	4620      	mov	r0, r4
    60d6:	f7ff ffb3 	bl	6040 <bt_conn_addr_le_cmp>
    60da:	2800      	cmp	r0, #0
    60dc:	d1eb      	bne.n	60b6 <bt_conn_lookup_state_le+0x12>
    60de:	e7f0      	b.n	60c2 <bt_conn_lookup_state_le+0x1e>
    60e0:	2000045c 	.word	0x2000045c
    60e4:	200004a0 	.word	0x200004a0

000060e8 <bt_conn_unref>:
	atomic_dec(&conn->ref);
    60e8:	3044      	adds	r0, #68	; 0x44
    60ea:	f7ff bc2a 	b.w	5942 <atomic_dec>

000060ee <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
    60ee:	b510      	push	{r4, lr}
	info->type = conn->type;
    60f0:	7883      	ldrb	r3, [r0, #2]
    60f2:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
    60f4:	78c4      	ldrb	r4, [r0, #3]
    60f6:	704c      	strb	r4, [r1, #1]

	switch (conn->type) {
    60f8:	b9a3      	cbnz	r3, 6124 <bt_conn_get_info+0x36>
    60fa:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    60fe:	f100 0256 	add.w	r2, r0, #86	; 0x56
	case BT_CONN_TYPE_LE:
		if (conn->role == BT_HCI_ROLE_MASTER) {
    6102:	b964      	cbnz	r4, 611e <bt_conn_get_info+0x30>
			info->le.src = &conn->le.init_addr;
    6104:	604b      	str	r3, [r1, #4]
			info->le.dst = &conn->le.resp_addr;
    6106:	608a      	str	r2, [r1, #8]
		} else {
			info->le.src = &conn->le.resp_addr;
			info->le.dst = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
    6108:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    610c:	818b      	strh	r3, [r1, #12]
		info->le.latency = conn->le.latency;
    610e:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
    6112:	81cb      	strh	r3, [r1, #14]
		info->le.timeout = conn->le.timeout;
    6114:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
    6118:	820b      	strh	r3, [r1, #16]
		return 0;
    611a:	2000      	movs	r0, #0
    611c:	bd10      	pop	{r4, pc}
			info->le.src = &conn->le.resp_addr;
    611e:	604a      	str	r2, [r1, #4]
			info->le.dst = &conn->le.init_addr;
    6120:	608b      	str	r3, [r1, #8]
    6122:	e7f1      	b.n	6108 <bt_conn_get_info+0x1a>
		info->br.dst = &conn->br.dst;
		return 0;
#endif
	}

	return -EINVAL;
    6124:	f06f 0015 	mvn.w	r0, #21
}
    6128:	bd10      	pop	{r4, pc}

0000612a <bt_hci_disconnect>:

int bt_hci_disconnect(struct bt_conn *conn, u8_t reason)
{
    612a:	b570      	push	{r4, r5, r6, lr}
    612c:	4605      	mov	r5, r0
    612e:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_cp_disconnect *disconn;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    6130:	f240 4006 	movw	r0, #1030	; 0x406
    6134:	2103      	movs	r1, #3
    6136:	f7fd fb11 	bl	375c <bt_hci_cmd_create>
	if (!buf) {
    613a:	4604      	mov	r4, r0
    613c:	b198      	cbz	r0, 6166 <bt_hci_disconnect+0x3c>
		return -ENOBUFS;
	}

	disconn = net_buf_add(buf, sizeof(*disconn));
    613e:	2103      	movs	r1, #3
    6140:	3008      	adds	r0, #8
    6142:	f011 fd43 	bl	17bcc <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    6146:	882b      	ldrh	r3, [r5, #0]
    6148:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    614a:	7086      	strb	r6, [r0, #2]

	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    614c:	4621      	mov	r1, r4
    614e:	f240 4006 	movw	r0, #1030	; 0x406
    6152:	f7fd fe1d 	bl	3d90 <bt_hci_cmd_send>
	if (err) {
    6156:	4604      	mov	r4, r0
    6158:	b918      	cbnz	r0, 6162 <bt_hci_disconnect+0x38>
		return err;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    615a:	2104      	movs	r1, #4
    615c:	4628      	mov	r0, r5
    615e:	f7ff feab 	bl	5eb8 <bt_conn_set_state>

	return 0;
}
    6162:	4620      	mov	r0, r4
    6164:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    6166:	f06f 0436 	mvn.w	r4, #54	; 0x36
    616a:	e7fa      	b.n	6162 <bt_hci_disconnect+0x38>

0000616c <bt_conn_create_le>:
	conn->le.timeout = param->timeout;
}

struct bt_conn *bt_conn_create_le(const bt_addr_le_t *peer,
				  const struct bt_le_conn_param *param)
{
    616c:	b570      	push	{r4, r5, r6, lr}
    616e:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (!bt_le_conn_params_valid(param)) {
    6170:	4608      	mov	r0, r1
{
    6172:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    6174:	f7fd fc8e 	bl	3a94 <bt_le_conn_params_valid>
    6178:	b908      	cbnz	r0, 617e <bt_conn_create_le+0x12>
		case BT_CONN_CONNECT:
		case BT_CONN_CONNECTED:
			return conn;
		default:
			bt_conn_unref(conn);
			return NULL;
    617a:	2400      	movs	r4, #0
    617c:	e01d      	b.n	61ba <bt_conn_create_le+0x4e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    617e:	481e      	ldr	r0, [pc, #120]	; (61f8 <bt_conn_create_le+0x8c>)
    6180:	f7ff fbce 	bl	5920 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    6184:	05c3      	lsls	r3, r0, #23
    6186:	d4f8      	bmi.n	617a <bt_conn_create_le+0xe>
	conn = bt_conn_lookup_addr_le(peer);
    6188:	4630      	mov	r0, r6
    618a:	f7ff ff71 	bl	6070 <bt_conn_lookup_addr_le>
	if (conn) {
    618e:	4604      	mov	r4, r0
    6190:	b1a8      	cbz	r0, 61be <bt_conn_create_le+0x52>
		switch (conn->state) {
    6192:	7b03      	ldrb	r3, [r0, #12]
    6194:	2b01      	cmp	r3, #1
    6196:	d007      	beq.n	61a8 <bt_conn_create_le+0x3c>
    6198:	d301      	bcc.n	619e <bt_conn_create_le+0x32>
    619a:	2b03      	cmp	r3, #3
    619c:	d90d      	bls.n	61ba <bt_conn_create_le+0x4e>
	atomic_dec(&conn->ref);
    619e:	f104 0044 	add.w	r0, r4, #68	; 0x44
    61a2:	f7ff fbce 	bl	5942 <atomic_dec>
    61a6:	e7e8      	b.n	617a <bt_conn_create_le+0xe>
	conn->le.interval_max = param->interval_max;
    61a8:	886b      	ldrh	r3, [r5, #2]
    61aa:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	conn->le.latency = param->latency;
    61ae:	88ab      	ldrh	r3, [r5, #4]
    61b0:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
	conn->le.timeout = param->timeout;
    61b4:	88eb      	ldrh	r3, [r5, #6]
    61b6:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);

	bt_le_scan_update(true);

	return conn;
}
    61ba:	4620      	mov	r0, r4
    61bc:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_add_le(peer);
    61be:	4630      	mov	r0, r6
    61c0:	f7ff fe40 	bl	5e44 <bt_conn_add_le>
	if (!conn) {
    61c4:	4604      	mov	r4, r0
    61c6:	2800      	cmp	r0, #0
    61c8:	d0f7      	beq.n	61ba <bt_conn_create_le+0x4e>
	memcpy(dst, src, sizeof(*dst));
    61ca:	2207      	movs	r2, #7
    61cc:	4631      	mov	r1, r6
    61ce:	3056      	adds	r0, #86	; 0x56
    61d0:	f7fa fb8b 	bl	8ea <memcpy>
	conn->le.interval_max = param->interval_max;
    61d4:	886b      	ldrh	r3, [r5, #2]
    61d6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	conn->le.latency = param->latency;
    61da:	88ab      	ldrh	r3, [r5, #4]
    61dc:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	conn->le.timeout = param->timeout;
    61e0:	88eb      	ldrh	r3, [r5, #6]
    61e2:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    61e6:	4620      	mov	r0, r4
    61e8:	2101      	movs	r1, #1
    61ea:	f7ff fe65 	bl	5eb8 <bt_conn_set_state>
	bt_le_scan_update(true);
    61ee:	2001      	movs	r0, #1
    61f0:	f7fd fe40 	bl	3e74 <bt_le_scan_update>
	return conn;
    61f4:	e7e1      	b.n	61ba <bt_conn_create_le+0x4e>
    61f6:	bf00      	nop
    61f8:	2000dd68 	.word	0x2000dd68

000061fc <bt_le_set_auto_conn>:

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    61fc:	b570      	push	{r4, r5, r6, lr}
    61fe:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    6200:	460d      	mov	r5, r1
    6202:	2900      	cmp	r1, #0
    6204:	d13d      	bne.n	6282 <bt_le_set_auto_conn+0x86>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    6206:	4630      	mov	r0, r6
    6208:	f7ff ff32 	bl	6070 <bt_conn_lookup_addr_le>
	if (!conn) {
    620c:	4604      	mov	r4, r0
    620e:	b928      	cbnz	r0, 621c <bt_le_set_auto_conn+0x20>
		conn = bt_conn_add_le(addr);
    6210:	4630      	mov	r0, r6
    6212:	f7ff fe17 	bl	5e44 <bt_conn_add_le>
		if (!conn) {
    6216:	4604      	mov	r4, r0
    6218:	2800      	cmp	r0, #0
    621a:	d053      	beq.n	62c4 <bt_le_set_auto_conn+0xc8>
    621c:	1d23      	adds	r3, r4, #4
    621e:	f104 0644 	add.w	r6, r4, #68	; 0x44
			return -ENOMEM;
		}
	}

	if (param) {
    6222:	2d00      	cmp	r5, #0
    6224:	d035      	beq.n	6292 <bt_le_set_auto_conn+0x96>
	conn->le.interval_max = param->interval_max;
    6226:	886a      	ldrh	r2, [r5, #2]
    6228:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
	conn->le.latency = param->latency;
    622c:	88aa      	ldrh	r2, [r5, #4]
    622e:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
	conn->le.timeout = param->timeout;
    6232:	88ea      	ldrh	r2, [r5, #6]
    6234:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6238:	f3bf 8f5b 	dmb	ish
    623c:	e853 2f00 	ldrex	r2, [r3]
    6240:	f042 0101 	orr.w	r1, r2, #1
    6244:	e843 1000 	strex	r0, r1, [r3]
    6248:	2800      	cmp	r0, #0
    624a:	d1f7      	bne.n	623c <bt_le_set_auto_conn+0x40>
    624c:	f3bf 8f5b 	dmb	ish
		bt_conn_set_param_le(conn, param);

		if (!atomic_test_and_set_bit(conn->flags,
    6250:	07d1      	lsls	r1, r2, #31
    6252:	d402      	bmi.n	625a <bt_le_set_auto_conn+0x5e>
	atomic_inc(&conn->ref);
    6254:	4630      	mov	r0, r6
    6256:	f7ff fb81 	bl	595c <atomic_inc>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    625a:	7b23      	ldrb	r3, [r4, #12]
    625c:	b963      	cbnz	r3, 6278 <bt_le_set_auto_conn+0x7c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    625e:	481b      	ldr	r0, [pc, #108]	; (62cc <bt_le_set_auto_conn+0xd0>)
    6260:	f7ff fb5e 	bl	5920 <atomic_get>
    6264:	0783      	lsls	r3, r0, #30
    6266:	d507      	bpl.n	6278 <bt_le_set_auto_conn+0x7c>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		if (param) {
    6268:	b11d      	cbz	r5, 6272 <bt_le_set_auto_conn+0x76>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    626a:	2101      	movs	r1, #1
    626c:	4620      	mov	r0, r4
    626e:	f7ff fe23 	bl	5eb8 <bt_conn_set_state>
		}
		bt_le_scan_update(false);
    6272:	2000      	movs	r0, #0
    6274:	f7fd fdfe 	bl	3e74 <bt_le_scan_update>
	atomic_dec(&conn->ref);
    6278:	4630      	mov	r0, r6
    627a:	f7ff fb62 	bl	5942 <atomic_dec>
	}

	bt_conn_unref(conn);

	return 0;
    627e:	2000      	movs	r0, #0
    6280:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    6282:	4608      	mov	r0, r1
    6284:	f7fd fc06 	bl	3a94 <bt_le_conn_params_valid>
    6288:	2800      	cmp	r0, #0
    628a:	d1bc      	bne.n	6206 <bt_le_set_auto_conn+0xa>
		return -EINVAL;
    628c:	f06f 0015 	mvn.w	r0, #21
    6290:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6292:	f3bf 8f5b 	dmb	ish
    6296:	e853 2f00 	ldrex	r2, [r3]
    629a:	f022 0101 	bic.w	r1, r2, #1
    629e:	e843 1000 	strex	r0, r1, [r3]
    62a2:	2800      	cmp	r0, #0
    62a4:	d1f7      	bne.n	6296 <bt_le_set_auto_conn+0x9a>
    62a6:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    62aa:	07d2      	lsls	r2, r2, #31
    62ac:	d5d5      	bpl.n	625a <bt_le_set_auto_conn+0x5e>
	atomic_dec(&conn->ref);
    62ae:	4630      	mov	r0, r6
    62b0:	f7ff fb47 	bl	5942 <atomic_dec>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    62b4:	7b23      	ldrb	r3, [r4, #12]
    62b6:	2b01      	cmp	r3, #1
    62b8:	d1cf      	bne.n	625a <bt_le_set_auto_conn+0x5e>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    62ba:	4629      	mov	r1, r5
    62bc:	4620      	mov	r0, r4
    62be:	f7ff fdfb 	bl	5eb8 <bt_conn_set_state>
    62c2:	e7ca      	b.n	625a <bt_le_set_auto_conn+0x5e>
			return -ENOMEM;
    62c4:	f06f 000b 	mvn.w	r0, #11
}
    62c8:	bd70      	pop	{r4, r5, r6, pc}
    62ca:	bf00      	nop
    62cc:	2000dd68 	.word	0x2000dd68

000062d0 <bt_conn_disconnect>:
{
    62d0:	b538      	push	{r3, r4, r5, lr}
    62d2:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    62d4:	7881      	ldrb	r1, [r0, #2]
{
    62d6:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    62d8:	b911      	cbnz	r1, 62e0 <bt_conn_disconnect+0x10>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    62da:	3048      	adds	r0, #72	; 0x48
    62dc:	f7ff ff8e 	bl	61fc <bt_le_set_auto_conn>
	switch (conn->state) {
    62e0:	7b23      	ldrb	r3, [r4, #12]
    62e2:	3b01      	subs	r3, #1
    62e4:	2b03      	cmp	r3, #3
    62e6:	d803      	bhi.n	62f0 <bt_conn_disconnect+0x20>
    62e8:	e8df f003 	tbb	[pc, r3]
    62ec:	0d1a0f05 	.word	0x0d1a0f05
		return -ENOTCONN;
    62f0:	f06f 0038 	mvn.w	r0, #56	; 0x38
    62f4:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    62f6:	4620      	mov	r0, r4
		conn->err = reason;
    62f8:	72e5      	strb	r5, [r4, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    62fa:	2100      	movs	r1, #0
    62fc:	f7ff fddc 	bl	5eb8 <bt_conn_set_state>
		bt_le_scan_update(false);
    6300:	2000      	movs	r0, #0
    6302:	f7fd fdb7 	bl	3e74 <bt_le_scan_update>
		return 0;
    6306:	2000      	movs	r0, #0
}
    6308:	bd38      	pop	{r3, r4, r5, pc}
			k_delayed_work_cancel(&conn->le.update_work);
    630a:	f104 0074 	add.w	r0, r4, #116	; 0x74
    630e:	f019 fde7 	bl	1fee0 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    6312:	2100      	movs	r1, #0
    6314:	f242 000e 	movw	r0, #8206	; 0x200e
}
    6318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    631c:	f7fd bd38 	b.w	3d90 <bt_hci_cmd_send>
		return bt_hci_disconnect(conn, reason);
    6320:	4629      	mov	r1, r5
    6322:	4620      	mov	r0, r4
}
    6324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_hci_disconnect(conn, reason);
    6328:	f7ff beff 	b.w	612a <bt_hci_disconnect>

0000632c <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    632c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    632e:	4607      	mov	r7, r0
    6330:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    6332:	f242 0013 	movw	r0, #8211	; 0x2013
    6336:	210e      	movs	r1, #14
    6338:	f7fd fa10 	bl	375c <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    633c:	4606      	mov	r6, r0
    633e:	b1c8      	cbz	r0, 6374 <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    6340:	210e      	movs	r1, #14
    6342:	3008      	adds	r0, #8
    6344:	f011 fc42 	bl	17bcc <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    6348:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    634a:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    634c:	220e      	movs	r2, #14
    634e:	f7fa faf8 	bl	942 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    6352:	883b      	ldrh	r3, [r7, #0]
    6354:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    6356:	882b      	ldrh	r3, [r5, #0]
    6358:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    635a:	886b      	ldrh	r3, [r5, #2]
    635c:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    635e:	88ab      	ldrh	r3, [r5, #4]
    6360:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    6362:	88eb      	ldrh	r3, [r5, #6]
    6364:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    6366:	4631      	mov	r1, r6
    6368:	f242 0013 	movw	r0, #8211	; 0x2013
}
    636c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    6370:	f7fd bd0e 	b.w	3d90 <bt_hci_cmd_send>
}
    6374:	f06f 0036 	mvn.w	r0, #54	; 0x36
    6378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000637c <bt_conn_le_param_update>:
{
    637c:	b538      	push	{r3, r4, r5, lr}
	if (conn->le.interval >= param->interval_min &&
    637e:	880a      	ldrh	r2, [r1, #0]
    6380:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    6384:	429a      	cmp	r2, r3
{
    6386:	4604      	mov	r4, r0
    6388:	460d      	mov	r5, r1
	if (conn->le.interval >= param->interval_min &&
    638a:	d80c      	bhi.n	63a6 <bt_conn_le_param_update+0x2a>
    638c:	884a      	ldrh	r2, [r1, #2]
    638e:	429a      	cmp	r2, r3
    6390:	d309      	bcc.n	63a6 <bt_conn_le_param_update+0x2a>
	    conn->le.interval <= param->interval_max &&
    6392:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
    6396:	888b      	ldrh	r3, [r1, #4]
    6398:	429a      	cmp	r2, r3
    639a:	d104      	bne.n	63a6 <bt_conn_le_param_update+0x2a>
	    conn->le.latency == param->latency &&
    639c:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
    63a0:	88cb      	ldrh	r3, [r1, #6]
    63a2:	429a      	cmp	r2, r3
    63a4:	d01a      	beq.n	63dc <bt_conn_le_param_update+0x60>
	k_delayed_work_cancel(&conn->le.update_work);
    63a6:	f104 0074 	add.w	r0, r4, #116	; 0x74
    63aa:	f019 fd99 	bl	1fee0 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    63ae:	4b0d      	ldr	r3, [pc, #52]	; (63e4 <bt_conn_le_param_update+0x68>)
    63b0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    63b4:	079a      	lsls	r2, r3, #30
    63b6:	d503      	bpl.n	63c0 <bt_conn_le_param_update+0x44>
    63b8:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    63bc:	079b      	lsls	r3, r3, #30
    63be:	d401      	bmi.n	63c4 <bt_conn_le_param_update+0x48>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    63c0:	78e3      	ldrb	r3, [r4, #3]
    63c2:	b92b      	cbnz	r3, 63d0 <bt_conn_le_param_update+0x54>
		return bt_conn_le_conn_update(conn, param);
    63c4:	4629      	mov	r1, r5
    63c6:	4620      	mov	r0, r4
}
    63c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_conn_le_conn_update(conn, param);
    63cc:	f7ff bfae 	b.w	632c <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    63d0:	4629      	mov	r1, r5
    63d2:	4620      	mov	r0, r4
}
    63d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    63d8:	f000 bc6a 	b.w	6cb0 <bt_l2cap_update_conn_param>
}
    63dc:	f06f 0044 	mvn.w	r0, #68	; 0x44
    63e0:	bd38      	pop	{r3, r4, r5, pc}
    63e2:	bf00      	nop
    63e4:	2000dcf8 	.word	0x2000dcf8

000063e8 <le_conn_update>:
{
    63e8:	4603      	mov	r3, r0
    63ea:	b507      	push	{r0, r1, r2, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    63ec:	f813 2c68 	ldrb.w	r2, [r3, #-104]
    63f0:	2a02      	cmp	r2, #2
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    63f2:	f1a0 0074 	sub.w	r0, r0, #116	; 0x74
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    63f6:	d105      	bne.n	6404 <le_conn_update+0x1c>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    63f8:	2113      	movs	r1, #19
    63fa:	f7ff ff69 	bl	62d0 <bt_conn_disconnect>
}
    63fe:	b003      	add	sp, #12
    6400:	f85d fb04 	ldr.w	pc, [sp], #4
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    6404:	f833 2c14 	ldrh.w	r2, [r3, #-20]
    6408:	f8ad 2000 	strh.w	r2, [sp]
    640c:	f833 2c12 	ldrh.w	r2, [r3, #-18]
    6410:	f8ad 2002 	strh.w	r2, [sp, #2]
	bt_conn_le_param_update(conn, param);
    6414:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    6416:	f833 2c10 	ldrh.w	r2, [r3, #-16]
    641a:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
    641e:	f8ad 2004 	strh.w	r2, [sp, #4]
    6422:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    6426:	f7ff ffa9 	bl	637c <bt_conn_le_param_update>
    642a:	e7e8      	b.n	63fe <le_conn_update+0x16>

0000642c <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    642c:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    642e:	4b08      	ldr	r3, [pc, #32]	; (6450 <bt_conn_create_pdu+0x24>)
{
    6430:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    6432:	2800      	cmp	r0, #0
    6434:	bf08      	it	eq
    6436:	4618      	moveq	r0, r3
    6438:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    643c:	f011 fb38 	bl	17ab0 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    6440:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    6442:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    6444:	3008      	adds	r0, #8
    6446:	f011 fb52 	bl	17aee <net_buf_simple_reserve>

	return buf;
}
    644a:	4620      	mov	r0, r4
    644c:	bd38      	pop	{r3, r4, r5, pc}
    644e:	bf00      	nop
    6450:	2000eaac 	.word	0x2000eaac

00006454 <create_frag.isra.6>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    6454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6458:	4606      	mov	r6, r0
    645a:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    645c:	4816      	ldr	r0, [pc, #88]	; (64b8 <create_frag.isra.6+0x64>)
    645e:	2100      	movs	r1, #0
    6460:	f7ff ffe4 	bl	642c <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    6464:	7833      	ldrb	r3, [r6, #0]
    6466:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(&frag_pool, 0);
    6468:	4605      	mov	r5, r0
    646a:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    646e:	d005      	beq.n	647c <create_frag.isra.6+0x28>
		net_buf_unref(frag);
    6470:	f011 fb4e 	bl	17b10 <net_buf_unref>
		return NULL;
    6474:	4635      	mov	r5, r6
}
    6476:	4628      	mov	r0, r5
    6478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    647c:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    647e:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    6482:	4e0e      	ldr	r6, [pc, #56]	; (64bc <create_frag.isra.6+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    6484:	4638      	mov	r0, r7
    6486:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    648a:	f011 fc0b 	bl	17ca4 <net_buf_simple_tailroom>
    648e:	4580      	cmp	r8, r0
    6490:	d20c      	bcs.n	64ac <create_frag.isra.6+0x58>
	return bt_dev.le.mtu;
    6492:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    6496:	f854 1f08 	ldr.w	r1, [r4, #8]!
    649a:	4632      	mov	r2, r6
    649c:	4638      	mov	r0, r7
    649e:	f011 fb9b 	bl	17bd8 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    64a2:	4631      	mov	r1, r6
    64a4:	4620      	mov	r0, r4
    64a6:	f011 fbe1 	bl	17c6c <net_buf_simple_pull>
    64aa:	e7e4      	b.n	6476 <create_frag.isra.6+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    64ac:	4638      	mov	r0, r7
    64ae:	f011 fbf9 	bl	17ca4 <net_buf_simple_tailroom>
    64b2:	b286      	uxth	r6, r0
    64b4:	e7ef      	b.n	6496 <create_frag.isra.6+0x42>
    64b6:	bf00      	nop
    64b8:	2000eacc 	.word	0x2000eacc
    64bc:	2000dcf8 	.word	0x2000dcf8

000064c0 <bt_conn_process_tx>:
{
    64c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    64c2:	7b03      	ldrb	r3, [r0, #12]
{
    64c4:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    64c6:	b993      	cbnz	r3, 64ee <bt_conn_process_tx+0x2e>
    64c8:	f3bf 8f5b 	dmb	ish
    64cc:	1d03      	adds	r3, r0, #4
    64ce:	e853 2f00 	ldrex	r2, [r3]
    64d2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    64d6:	e843 1400 	strex	r4, r1, [r3]
    64da:	2c00      	cmp	r4, #0
    64dc:	d1f7      	bne.n	64ce <bt_conn_process_tx+0xe>
    64de:	f3bf 8f5b 	dmb	ish
    64e2:	0653      	lsls	r3, r2, #25
    64e4:	d503      	bpl.n	64ee <bt_conn_process_tx+0x2e>
}
    64e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    64ea:	f7ff bc4b 	b.w	5d84 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    64ee:	2100      	movs	r1, #0
    64f0:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    64f4:	f011 fae2 	bl	17abc <net_buf_get>
	BT_ASSERT(buf);
    64f8:	4604      	mov	r4, r0
    64fa:	b928      	cbnz	r0, 6508 <bt_conn_process_tx+0x48>
    64fc:	4040      	eors	r0, r0
    64fe:	f380 8811 	msr	BASEPRI, r0
    6502:	f04f 0004 	mov.w	r0, #4
    6506:	df02      	svc	2
	return bt_dev.le.mtu;
    6508:	4e19      	ldr	r6, [pc, #100]	; (6570 <bt_conn_process_tx+0xb0>)
	if (buf->len <= conn_mtu(conn)) {
    650a:	8981      	ldrh	r1, [r0, #12]
    650c:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    6510:	4291      	cmp	r1, r2
    6512:	d807      	bhi.n	6524 <bt_conn_process_tx+0x64>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    6514:	2300      	movs	r3, #0
    6516:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    6518:	4621      	mov	r1, r4
    651a:	4628      	mov	r0, r5
    651c:	f7ff fbaa 	bl	5c74 <send_frag>
	if (!send_buf(conn, buf)) {
    6520:	b140      	cbz	r0, 6534 <bt_conn_process_tx+0x74>
}
    6522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6524:	f105 070c 	add.w	r7, r5, #12
	frag = create_frag(conn, buf);
    6528:	4601      	mov	r1, r0
    652a:	4638      	mov	r0, r7
    652c:	f7ff ff92 	bl	6454 <create_frag.isra.6>
	if (!frag) {
    6530:	4601      	mov	r1, r0
    6532:	b920      	cbnz	r0, 653e <bt_conn_process_tx+0x7e>
		net_buf_unref(buf);
    6534:	4620      	mov	r0, r4
}
    6536:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    653a:	f011 bae9 	b.w	17b10 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    653e:	2301      	movs	r3, #1
    6540:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    6542:	4628      	mov	r0, r5
    6544:	f7ff fb96 	bl	5c74 <send_frag>
    6548:	2800      	cmp	r0, #0
    654a:	d0f3      	beq.n	6534 <bt_conn_process_tx+0x74>
	while (buf->len > conn_mtu(conn)) {
    654c:	89a2      	ldrh	r2, [r4, #12]
    654e:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    6552:	429a      	cmp	r2, r3
    6554:	d802      	bhi.n	655c <bt_conn_process_tx+0x9c>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    6556:	2300      	movs	r3, #0
    6558:	2201      	movs	r2, #1
    655a:	e7dd      	b.n	6518 <bt_conn_process_tx+0x58>
		frag = create_frag(conn, buf);
    655c:	4621      	mov	r1, r4
    655e:	4638      	mov	r0, r7
    6560:	f7ff ff78 	bl	6454 <create_frag.isra.6>
		if (!frag) {
    6564:	4601      	mov	r1, r0
    6566:	2800      	cmp	r0, #0
    6568:	d0e4      	beq.n	6534 <bt_conn_process_tx+0x74>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    656a:	2301      	movs	r3, #1
    656c:	461a      	mov	r2, r3
    656e:	e7e8      	b.n	6542 <bt_conn_process_tx+0x82>
    6570:	2000dcf8 	.word	0x2000dcf8

00006574 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    6574:	4b03      	ldr	r3, [pc, #12]	; (6584 <bt_conn_get_id+0x10>)
    6576:	1ac0      	subs	r0, r0, r3
    6578:	4b03      	ldr	r3, [pc, #12]	; (6588 <bt_conn_get_id+0x14>)
    657a:	1080      	asrs	r0, r0, #2
    657c:	4358      	muls	r0, r3
}
    657e:	b2c0      	uxtb	r0, r0
    6580:	4770      	bx	lr
    6582:	bf00      	nop
    6584:	2000045c 	.word	0x2000045c
    6588:	96f96f97 	.word	0x96f96f97

0000658c <bt_conn_init>:
	node->next = list->head;
    658c:	4b12      	ldr	r3, [pc, #72]	; (65d8 <bt_conn_init+0x4c>)
    658e:	4a13      	ldr	r2, [pc, #76]	; (65dc <bt_conn_init+0x50>)
    6590:	6819      	ldr	r1, [r3, #0]

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    6592:	b510      	push	{r4, lr}
    6594:	6011      	str	r1, [r2, #0]
	if (!list->tail) {
    6596:	6859      	ldr	r1, [r3, #4]
    6598:	b901      	cbnz	r1, 659c <bt_conn_init+0x10>
		list->tail = list->head;
    659a:	605a      	str	r2, [r3, #4]
	if (!list->tail) {
    659c:	6859      	ldr	r1, [r3, #4]
	node->next = list->head;
    659e:	6092      	str	r2, [r2, #8]
	list->head = node;
    65a0:	4a0f      	ldr	r2, [pc, #60]	; (65e0 <bt_conn_init+0x54>)
    65a2:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
    65a4:	b901      	cbnz	r1, 65a8 <bt_conn_init+0x1c>
		list->tail = list->head;
    65a6:	605a      	str	r2, [r3, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    65a8:	f001 ff32 	bl	8410 <bt_att_init>

	err = bt_smp_init();
    65ac:	f004 f960 	bl	a870 <bt_smp_init>
	if (err) {
    65b0:	4604      	mov	r4, r0
    65b2:	b970      	cbnz	r0, 65d2 <bt_conn_init+0x46>
		return err;
	}

	bt_l2cap_init();
    65b4:	f000 fb9c 	bl	6cf0 <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    65b8:	480a      	ldr	r0, [pc, #40]	; (65e4 <bt_conn_init+0x58>)
    65ba:	f7ff f9b1 	bl	5920 <atomic_get>
    65be:	b140      	cbz	r0, 65d2 <bt_conn_init+0x46>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    65c0:	4809      	ldr	r0, [pc, #36]	; (65e8 <bt_conn_init+0x5c>)
    65c2:	f7ff f9ad 	bl	5920 <atomic_get>
				continue;
			}

			if (atomic_test_bit(conn->flags,
    65c6:	07c3      	lsls	r3, r0, #31
    65c8:	d503      	bpl.n	65d2 <bt_conn_init+0x46>
					    BT_CONN_AUTO_CONNECT)) {
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    65ca:	2101      	movs	r1, #1
    65cc:	4807      	ldr	r0, [pc, #28]	; (65ec <bt_conn_init+0x60>)
    65ce:	f7ff fc73 	bl	5eb8 <bt_conn_set_state>
			}
		}
	}

	return 0;
}
    65d2:	4620      	mov	r0, r4
    65d4:	bd10      	pop	{r4, pc}
    65d6:	bf00      	nop
    65d8:	200004f8 	.word	0x200004f8
    65dc:	2000044c 	.word	0x2000044c
    65e0:	20000454 	.word	0x20000454
    65e4:	200004a0 	.word	0x200004a0
    65e8:	20000460 	.word	0x20000460
    65ec:	2000045c 	.word	0x2000045c

000065f0 <sys_slist_append>:
	node->next = NULL;
    65f0:	2300      	movs	r3, #0
    65f2:	600b      	str	r3, [r1, #0]
	if (!list->tail) {
    65f4:	6843      	ldr	r3, [r0, #4]
    65f6:	b913      	cbnz	r3, 65fe <sys_slist_append+0xe>
		list->tail = node;
    65f8:	6041      	str	r1, [r0, #4]
		list->head = node;
    65fa:	6001      	str	r1, [r0, #0]
    65fc:	4770      	bx	lr
		list->tail->next = node;
    65fe:	6019      	str	r1, [r3, #0]
		list->tail = node;
    6600:	6041      	str	r1, [r0, #4]
    6602:	4770      	bx	lr

00006604 <sys_slist_remove>:
{
    6604:	b510      	push	{r4, lr}
    6606:	6813      	ldr	r3, [r2, #0]
    6608:	6844      	ldr	r4, [r0, #4]
	if (!prev_node) {
    660a:	b931      	cbnz	r1, 661a <sys_slist_remove+0x16>
		if (list->tail == node) {
    660c:	42a2      	cmp	r2, r4
		list->head = node->next;
    660e:	6003      	str	r3, [r0, #0]
		if (list->tail == node) {
    6610:	d100      	bne.n	6614 <sys_slist_remove+0x10>
			list->tail = list->head;
    6612:	6043      	str	r3, [r0, #4]
	node->next = NULL;
    6614:	2300      	movs	r3, #0
    6616:	6013      	str	r3, [r2, #0]
    6618:	bd10      	pop	{r4, pc}
		if (list->tail == node) {
    661a:	42a2      	cmp	r2, r4
		prev_node->next = node->next;
    661c:	600b      	str	r3, [r1, #0]
			list->tail = prev_node;
    661e:	bf08      	it	eq
    6620:	6041      	streq	r1, [r0, #4]
    6622:	e7f7      	b.n	6614 <sys_slist_remove+0x10>

00006624 <net_buf_frags_len>:
 *  @param buf Buffer to start off with.
 *
 *  @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
    6624:	4603      	mov	r3, r0
	size_t bytes = 0;
    6626:	2000      	movs	r0, #0

	while (buf) {
    6628:	b903      	cbnz	r3, 662c <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
    662a:	4770      	bx	lr
		bytes += buf->len;
    662c:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
    662e:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
    6630:	4410      	add	r0, r2
    6632:	e7f9      	b.n	6628 <net_buf_frags_len+0x4>

00006634 <get_ident>:

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    6634:	4b04      	ldr	r3, [pc, #16]	; (6648 <get_ident+0x14>)
    6636:	781a      	ldrb	r2, [r3, #0]
    6638:	3201      	adds	r2, #1
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    663a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    663e:	bf08      	it	eq
    6640:	2201      	moveq	r2, #1
    6642:	701a      	strb	r2, [r3, #0]
	}

	return ident;
}
    6644:	7818      	ldrb	r0, [r3, #0]
    6646:	4770      	bx	lr
    6648:	2000059c 	.word	0x2000059c

0000664c <__l2cap_lookup_ident>:
	return NULL;
}

static struct bt_l2cap_le_chan *
__l2cap_lookup_ident(struct bt_conn *conn, u16_t ident, bool remove)
{
    664c:	b538      	push	{r3, r4, r5, lr}
    664e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6650:	b17c      	cbz	r4, 6672 <__l2cap_lookup_ident+0x26>
    6652:	3c08      	subs	r4, #8
    6654:	2300      	movs	r3, #0
    6656:	b90c      	cbnz	r4, 665c <__l2cap_lookup_ident+0x10>
		}

		prev = &chan->node;
	}

	return NULL;
    6658:	2400      	movs	r4, #0
    665a:	e00a      	b.n	6672 <__l2cap_lookup_ident+0x26>
		if (chan->ident == ident) {
    665c:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
    6660:	428d      	cmp	r5, r1
    6662:	d108      	bne.n	6676 <__l2cap_lookup_ident+0x2a>
			if (remove) {
    6664:	b12a      	cbz	r2, 6672 <__l2cap_lookup_ident+0x26>
				sys_slist_remove(&conn->channels, prev,
    6666:	f104 0208 	add.w	r2, r4, #8
    666a:	4619      	mov	r1, r3
    666c:	303c      	adds	r0, #60	; 0x3c
    666e:	f7ff ffc9 	bl	6604 <sys_slist_remove>
}
    6672:	4620      	mov	r0, r4
    6674:	bd38      	pop	{r3, r4, r5, pc}
		prev = &chan->node;
    6676:	f104 0308 	add.w	r3, r4, #8
	return node->next;
    667a:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    667c:	2c00      	cmp	r4, #0
    667e:	d0eb      	beq.n	6658 <__l2cap_lookup_ident+0xc>
    6680:	3c08      	subs	r4, #8
    6682:	e7e8      	b.n	6656 <__l2cap_lookup_ident+0xa>

00006684 <l2cap_server_lookup_psm>:
	return NULL;
}

#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static struct bt_l2cap_server *l2cap_server_lookup_psm(u16_t psm)
{
    6684:	4b08      	ldr	r3, [pc, #32]	; (66a8 <l2cap_server_lookup_psm+0x24>)
    6686:	4602      	mov	r2, r0
    6688:	6818      	ldr	r0, [r3, #0]
	struct bt_l2cap_server *server;

	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    668a:	b100      	cbz	r0, 668e <l2cap_server_lookup_psm+0xa>
    668c:	3808      	subs	r0, #8
    668e:	b900      	cbnz	r0, 6692 <l2cap_server_lookup_psm+0xe>
			return server;
		}
	}

	return NULL;
}
    6690:	4770      	bx	lr
		if (server->psm == psm) {
    6692:	8803      	ldrh	r3, [r0, #0]
    6694:	4293      	cmp	r3, r2
    6696:	d0fb      	beq.n	6690 <l2cap_server_lookup_psm+0xc>
    6698:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    669a:	2000      	movs	r0, #0
    669c:	2b00      	cmp	r3, #0
    669e:	d0f7      	beq.n	6690 <l2cap_server_lookup_psm+0xc>
    66a0:	f1a3 0008 	sub.w	r0, r3, #8
    66a4:	e7f3      	b.n	668e <l2cap_server_lookup_psm+0xa>
    66a6:	bf00      	nop
    66a8:	200005a8 	.word	0x200005a8

000066ac <l2cap_remove_tx_cid>:
{
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	/* Protect fixed channels against accidental removal */
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
    66ac:	f1a1 0340 	sub.w	r3, r1, #64	; 0x40
    66b0:	2b3f      	cmp	r3, #63	; 0x3f
{
    66b2:	b510      	push	{r4, lr}
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
    66b4:	d804      	bhi.n	66c0 <l2cap_remove_tx_cid+0x14>
    66b6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    66b8:	b114      	cbz	r4, 66c0 <l2cap_remove_tx_cid+0x14>
    66ba:	3c08      	subs	r4, #8
    66bc:	2300      	movs	r3, #0
    66be:	b90c      	cbnz	r4, 66c4 <l2cap_remove_tx_cid+0x18>
		return NULL;
    66c0:	2000      	movs	r0, #0
    66c2:	bd10      	pop	{r4, pc}
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    66c4:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
    66c8:	428a      	cmp	r2, r1
    66ca:	f104 0208 	add.w	r2, r4, #8
    66ce:	d105      	bne.n	66dc <l2cap_remove_tx_cid+0x30>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    66d0:	4619      	mov	r1, r3
    66d2:	303c      	adds	r0, #60	; 0x3c
    66d4:	f7ff ff96 	bl	6604 <sys_slist_remove>
			return BT_L2CAP_LE_CHAN(chan);
    66d8:	4620      	mov	r0, r4
    66da:	bd10      	pop	{r4, pc}
    66dc:	68a4      	ldr	r4, [r4, #8]
		}

		prev = &chan->node;
    66de:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    66e0:	2c00      	cmp	r4, #0
    66e2:	d0ed      	beq.n	66c0 <l2cap_remove_tx_cid+0x14>
    66e4:	3c08      	subs	r4, #8
    66e6:	e7ea      	b.n	66be <l2cap_remove_tx_cid+0x12>

000066e8 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    66e8:	4770      	bx	lr
	...

000066ec <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    66ec:	4b04      	ldr	r3, [pc, #16]	; (6700 <l2cap_accept+0x14>)
    66ee:	6818      	ldr	r0, [r3, #0]
    66f0:	b918      	cbnz	r0, 66fa <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    66f2:	4a04      	ldr	r2, [pc, #16]	; (6704 <l2cap_accept+0x18>)
    66f4:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    66f6:	600b      	str	r3, [r1, #0]

		return 0;
    66f8:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    66fa:	f06f 000b 	mvn.w	r0, #11
}
    66fe:	4770      	bx	lr
    6700:	20000500 	.word	0x20000500
    6704:	2000de4c 	.word	0x2000de4c

00006708 <l2cap_chan_destroy>:
{
    6708:	b570      	push	{r4, r5, r6, lr}
    670a:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->rtx_work);
    670c:	3010      	adds	r0, #16
    670e:	f019 fbe7 	bl	1fee0 <k_delayed_work_cancel>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    6712:	f104 0680 	add.w	r6, r4, #128	; 0x80
    6716:	2100      	movs	r1, #0
    6718:	4630      	mov	r0, r6
    671a:	f011 f9cf 	bl	17abc <net_buf_get>
    671e:	4605      	mov	r5, r0
    6720:	b948      	cbnz	r0, 6736 <l2cap_chan_destroy+0x2e>
	if (ch->_sdu) {
    6722:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    6726:	b128      	cbz	r0, 6734 <l2cap_chan_destroy+0x2c>
		net_buf_unref(ch->_sdu);
    6728:	f011 f9f2 	bl	17b10 <net_buf_unref>
		ch->_sdu = NULL;
    672c:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
		ch->_sdu_len = 0;
    6730:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
    6734:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    6736:	f011 f9eb 	bl	17b10 <net_buf_unref>
    673a:	e7ec      	b.n	6716 <l2cap_chan_destroy+0xe>

0000673c <l2cap_chan_tx_init>:
{
    673c:	b510      	push	{r4, lr}
	memset(&chan->tx, 0, sizeof(chan->tx));
    673e:	2220      	movs	r2, #32
{
    6740:	4604      	mov	r4, r0
	memset(&chan->tx, 0, sizeof(chan->tx));
    6742:	2100      	movs	r1, #0
    6744:	3060      	adds	r0, #96	; 0x60
    6746:	f7fa f8fc 	bl	942 <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    674a:	f104 0068 	add.w	r0, r4, #104	; 0x68
    674e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6752:	2100      	movs	r1, #0
    6754:	f019 f870 	bl	1f838 <_impl_k_sem_init>
	k_fifo_init(&chan->tx_queue);
    6758:	f104 0080 	add.w	r0, r4, #128	; 0x80
}
    675c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_init(&chan->tx_queue);
    6760:	f018 bdf8 	b.w	1f354 <k_queue_init>

00006764 <l2cap_chan_rx_init>:
	if (!chan->rx.mtu) {
    6764:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    6768:	b913      	cbnz	r3, 6770 <l2cap_chan_rx_init+0xc>
		chan->rx.mtu = L2CAP_MAX_LE_MTU;
    676a:	23f7      	movs	r3, #247	; 0xf7
    676c:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	if (!chan->rx.init_credits) {
    6770:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
    6774:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    6778:	b94a      	cbnz	r2, 678e <l2cap_chan_rx_init+0x2a>
		if (chan->chan.ops->alloc_buf) {
    677a:	6842      	ldr	r2, [r0, #4]
    677c:	68d2      	ldr	r2, [r2, #12]
    677e:	b192      	cbz	r2, 67a6 <l2cap_chan_rx_init+0x42>
			chan->rx.init_credits = (chan->rx.mtu +
    6780:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
						 (L2CAP_MAX_LE_MPS - 1)) /
    6784:	21f9      	movs	r1, #249	; 0xf9
    6786:	fb92 f2f1 	sdiv	r2, r2, r1
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
    678a:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
	chan->rx.mps = min(chan->rx.mtu + 2, L2CAP_MAX_LE_MPS);
    678e:	3302      	adds	r3, #2
    6790:	2bf9      	cmp	r3, #249	; 0xf9
    6792:	bfa8      	it	ge
    6794:	23f9      	movge	r3, #249	; 0xf9
    6796:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    679a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    679e:	2100      	movs	r1, #0
    67a0:	3048      	adds	r0, #72	; 0x48
    67a2:	f019 b849 	b.w	1f838 <_impl_k_sem_init>
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
    67a6:	2202      	movs	r2, #2
    67a8:	e7ef      	b.n	678a <l2cap_chan_rx_init+0x26>

000067aa <l2cap_create_le_sig_pdu.isra.6>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    67aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    67ac:	4607      	mov	r7, r0
    67ae:	460e      	mov	r6, r1
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    67b0:	2000      	movs	r0, #0
    67b2:	2104      	movs	r1, #4
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    67b4:	4615      	mov	r5, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    67b6:	f7ff fe39 	bl	642c <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    67ba:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    67bc:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    67be:	3008      	adds	r0, #8
    67c0:	f011 fa04 	bl	17bcc <net_buf_simple_add>
	hdr->code = code;
    67c4:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    67c6:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    67c8:	8045      	strh	r5, [r0, #2]
}
    67ca:	4620      	mov	r0, r4
    67cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000067ce <l2cap_connected>:
    67ce:	4770      	bx	lr

000067d0 <bt_l2cap_le_fixed_chan_register>:
	sys_slist_append(&le_channels, &chan->node);
    67d0:	f100 0108 	add.w	r1, r0, #8
    67d4:	4801      	ldr	r0, [pc, #4]	; (67dc <bt_l2cap_le_fixed_chan_register+0xc>)
    67d6:	f7ff bf0b 	b.w	65f0 <sys_slist_append>
    67da:	bf00      	nop
    67dc:	200005a0 	.word	0x200005a0

000067e0 <bt_l2cap_chan_remove>:
{
    67e0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    67e2:	b410      	push	{r4}
    67e4:	460c      	mov	r4, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    67e6:	b113      	cbz	r3, 67ee <bt_l2cap_chan_remove+0xe>
    67e8:	3b08      	subs	r3, #8
    67ea:	2100      	movs	r1, #0
    67ec:	b90b      	cbnz	r3, 67f2 <bt_l2cap_chan_remove+0x12>
}
    67ee:	bc10      	pop	{r4}
    67f0:	4770      	bx	lr
		if (chan == ch) {
    67f2:	42a3      	cmp	r3, r4
    67f4:	f103 0208 	add.w	r2, r3, #8
    67f8:	d103      	bne.n	6802 <bt_l2cap_chan_remove+0x22>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    67fa:	303c      	adds	r0, #60	; 0x3c
}
    67fc:	bc10      	pop	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
    67fe:	f7ff bf01 	b.w	6604 <sys_slist_remove>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    6802:	4611      	mov	r1, r2
    6804:	2a00      	cmp	r2, #0
    6806:	d0f2      	beq.n	67ee <bt_l2cap_chan_remove+0xe>
	return node->next;
    6808:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    680a:	2b00      	cmp	r3, #0
    680c:	d0ef      	beq.n	67ee <bt_l2cap_chan_remove+0xe>
    680e:	3b08      	subs	r3, #8
    6810:	e7ec      	b.n	67ec <bt_l2cap_chan_remove+0xc>

00006812 <bt_l2cap_chan_del>:
	if (!chan->conn) {
    6812:	6803      	ldr	r3, [r0, #0]
{
    6814:	b510      	push	{r4, lr}
    6816:	4604      	mov	r4, r0
	if (!chan->conn) {
    6818:	b12b      	cbz	r3, 6826 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    681a:	6843      	ldr	r3, [r0, #4]
    681c:	685b      	ldr	r3, [r3, #4]
    681e:	b103      	cbz	r3, 6822 <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    6820:	4798      	blx	r3
	chan->conn = NULL;
    6822:	2300      	movs	r3, #0
    6824:	6023      	str	r3, [r4, #0]
	chan->state = state;
    6826:	2300      	movs	r3, #0
    6828:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	chan->psm = 0;
    682c:	8763      	strh	r3, [r4, #58]	; 0x3a
	if (chan->destroy) {
    682e:	68e3      	ldr	r3, [r4, #12]
    6830:	b11b      	cbz	r3, 683a <bt_l2cap_chan_del+0x28>
		chan->destroy(chan);
    6832:	4620      	mov	r0, r4
}
    6834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    6838:	4718      	bx	r3
    683a:	bd10      	pop	{r4, pc}

0000683c <l2cap_rtx_timeout>:
{
    683c:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    683e:	f1a0 0410 	sub.w	r4, r0, #16
    6842:	4621      	mov	r1, r4
    6844:	f850 0c10 	ldr.w	r0, [r0, #-16]
    6848:	f7ff ffca 	bl	67e0 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    684c:	4620      	mov	r0, r4
}
    684e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
    6852:	f7ff bfde 	b.w	6812 <bt_l2cap_chan_del>

00006856 <bt_l2cap_disconnected>:
{
    6856:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    6858:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    685a:	b1a3      	cbz	r3, 6886 <bt_l2cap_disconnected+0x30>
    685c:	f1b3 0008 	subs.w	r0, r3, #8
    6860:	d10a      	bne.n	6878 <bt_l2cap_disconnected+0x22>
    6862:	bd10      	pop	{r4, pc}
    6864:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    6866:	f7ff ffd4 	bl	6812 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    686a:	b164      	cbz	r4, 6886 <bt_l2cap_disconnected+0x30>
    686c:	68a3      	ldr	r3, [r4, #8]
    686e:	b103      	cbz	r3, 6872 <bt_l2cap_disconnected+0x1c>
    6870:	3b08      	subs	r3, #8
{
    6872:	4620      	mov	r0, r4
    6874:	461c      	mov	r4, r3
    6876:	e7f6      	b.n	6866 <bt_l2cap_disconnected+0x10>
    6878:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    687a:	2c00      	cmp	r4, #0
    687c:	d1f2      	bne.n	6864 <bt_l2cap_disconnected+0xe>
}
    687e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    6882:	f7ff bfc6 	b.w	6812 <bt_l2cap_chan_del>
    6886:	bd10      	pop	{r4, pc}

00006888 <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    6888:	3104      	adds	r1, #4
    688a:	f7ff bdcf 	b.w	642c <bt_conn_create_pdu>

0000688e <bt_l2cap_send_cb>:
{
    688e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6890:	4614      	mov	r4, r2
    6892:	4605      	mov	r5, r0
    6894:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    6896:	f102 0008 	add.w	r0, r2, #8
    689a:	2104      	movs	r1, #4
{
    689c:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    689e:	f011 f9cc 	bl	17c3a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    68a2:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    68a4:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    68a6:	3904      	subs	r1, #4
    68a8:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    68aa:	4632      	mov	r2, r6
    68ac:	4621      	mov	r1, r4
    68ae:	4628      	mov	r0, r5
}
    68b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    68b4:	f7ff b9ad 	b.w	5c12 <bt_conn_send_cb>

000068b8 <l2cap_le_conn_req>:
{
    68b8:	b538      	push	{r3, r4, r5, lr}
    68ba:	4604      	mov	r4, r0
	ch->chan.ident = get_ident();
    68bc:	f7ff feba 	bl	6634 <get_ident>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    68c0:	220a      	movs	r2, #10
	ch->chan.ident = get_ident();
    68c2:	4601      	mov	r1, r0
    68c4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    68c8:	2014      	movs	r0, #20
    68ca:	f7ff ff6e 	bl	67aa <l2cap_create_le_sig_pdu.isra.6>
	req = net_buf_add(buf, sizeof(*req));
    68ce:	210a      	movs	r1, #10
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    68d0:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    68d2:	3008      	adds	r0, #8
    68d4:	f011 f97a 	bl	17bcc <net_buf_simple_add>
	req->psm = sys_cpu_to_le16(ch->chan.psm);
    68d8:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    68da:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    68dc:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    68e0:	8043      	strh	r3, [r0, #2]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
    68e2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    68e6:	8083      	strh	r3, [r0, #4]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
    68e8:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    68ec:	80c3      	strh	r3, [r0, #6]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
    68ee:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    68f2:	8103      	strh	r3, [r0, #8]
    68f4:	f104 0110 	add.w	r1, r4, #16
    68f8:	f649 4240 	movw	r2, #40000	; 0x9c40
    68fc:	4805      	ldr	r0, [pc, #20]	; (6914 <l2cap_le_conn_req+0x5c>)
    68fe:	f019 fb49 	bl	1ff94 <k_delayed_work_submit_to_queue>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    6902:	6820      	ldr	r0, [r4, #0]
    6904:	2300      	movs	r3, #0
    6906:	462a      	mov	r2, r5
    6908:	2105      	movs	r1, #5
    690a:	f7ff ffc0 	bl	688e <bt_l2cap_send_cb>
}
    690e:	2000      	movs	r0, #0
    6910:	bd38      	pop	{r3, r4, r5, pc}
    6912:	bf00      	nop
    6914:	20005218 	.word	0x20005218

00006918 <bt_l2cap_encrypt_change>:
{
    6918:	b538      	push	{r3, r4, r5, lr}
    691a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    691c:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    691e:	b10c      	cbz	r4, 6924 <bt_l2cap_encrypt_change+0xc>
    6920:	3c08      	subs	r4, #8
    6922:	b904      	cbnz	r4, 6926 <bt_l2cap_encrypt_change+0xe>
    6924:	bd38      	pop	{r3, r4, r5, pc}
	if (chan->state != BT_L2CAP_CONNECT || chan->ident) {
    6926:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    692a:	2b01      	cmp	r3, #1
    692c:	d10a      	bne.n	6944 <bt_l2cap_encrypt_change+0x2c>
    692e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    6932:	b93b      	cbnz	r3, 6944 <bt_l2cap_encrypt_change+0x2c>
	if (status) {
    6934:	b175      	cbz	r5, 6954 <bt_l2cap_encrypt_change+0x3c>
		bt_l2cap_chan_remove(chan->conn, chan);
    6936:	6820      	ldr	r0, [r4, #0]
    6938:	4621      	mov	r1, r4
    693a:	f7ff ff51 	bl	67e0 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(chan);
    693e:	4620      	mov	r0, r4
    6940:	f7ff ff67 	bl	6812 <bt_l2cap_chan_del>
		if (chan->ops->encrypt_change) {
    6944:	6863      	ldr	r3, [r4, #4]
    6946:	689b      	ldr	r3, [r3, #8]
    6948:	b113      	cbz	r3, 6950 <bt_l2cap_encrypt_change+0x38>
			chan->ops->encrypt_change(chan, hci_status);
    694a:	4629      	mov	r1, r5
    694c:	4620      	mov	r0, r4
    694e:	4798      	blx	r3
    6950:	68a4      	ldr	r4, [r4, #8]
    6952:	e7e4      	b.n	691e <bt_l2cap_encrypt_change+0x6>
	l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
    6954:	4620      	mov	r0, r4
    6956:	f7ff ffaf 	bl	68b8 <l2cap_le_conn_req>
    695a:	e7f3      	b.n	6944 <bt_l2cap_encrypt_change+0x2c>

0000695c <l2cap_send_reject>:
{
    695c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6960:	f89d 7020 	ldrb.w	r7, [sp, #32]
    6964:	4691      	mov	r9, r2
    6966:	4680      	mov	r8, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    6968:	1cba      	adds	r2, r7, #2
    696a:	2001      	movs	r0, #1
{
    696c:	461e      	mov	r6, r3
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    696e:	f7ff ff1c 	bl	67aa <l2cap_create_le_sig_pdu.isra.6>
	rej = net_buf_add(buf, sizeof(*rej));
    6972:	f100 0508 	add.w	r5, r0, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    6976:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    6978:	2102      	movs	r1, #2
    697a:	4628      	mov	r0, r5
    697c:	f011 f926 	bl	17bcc <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    6980:	f8a0 9000 	strh.w	r9, [r0]
	if (data) {
    6984:	b126      	cbz	r6, 6990 <l2cap_send_reject+0x34>
		net_buf_add_mem(buf, data, data_len);
    6986:	463a      	mov	r2, r7
    6988:	4631      	mov	r1, r6
    698a:	4628      	mov	r0, r5
    698c:	f011 f924 	bl	17bd8 <net_buf_simple_add_mem>
    6990:	4622      	mov	r2, r4
    6992:	4640      	mov	r0, r8
    6994:	2300      	movs	r3, #0
    6996:	2105      	movs	r1, #5
}
    6998:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    699c:	f7ff bf77 	b.w	688e <bt_l2cap_send_cb>

000069a0 <l2cap_chan_le_send>:
{
    69a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    69a4:	4607      	mov	r7, r0
    69a6:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    69a8:	3068      	adds	r0, #104	; 0x68
    69aa:	2100      	movs	r1, #0
    69ac:	4616      	mov	r6, r2
    69ae:	f018 ffad 	bl	1f90c <_impl_k_sem_take>
	if (k_sem_take(&ch->tx.credits, K_NO_WAIT)) {
    69b2:	2800      	cmp	r0, #0
    69b4:	d169      	bne.n	6a8a <l2cap_chan_le_send+0xea>
	if (buf->len + sdu_hdr_len > ch->tx.mps) {
    69b6:	89a3      	ldrh	r3, [r4, #12]
    69b8:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
    69bc:	4433      	add	r3, r6
    69be:	4293      	cmp	r3, r2
    69c0:	f104 0908 	add.w	r9, r4, #8
    69c4:	d820      	bhi.n	6a08 <l2cap_chan_le_send+0x68>
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    69c6:	4648      	mov	r0, r9
    69c8:	f011 f968 	bl	17c9c <net_buf_simple_headroom>
	headroom = BT_L2CAP_CHAN_SEND_RESERVE + sdu_hdr_len;
    69cc:	f106 0308 	add.w	r3, r6, #8
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    69d0:	b29b      	uxth	r3, r3
    69d2:	4298      	cmp	r0, r3
    69d4:	d318      	bcc.n	6a08 <l2cap_chan_le_send+0x68>
    69d6:	6823      	ldr	r3, [r4, #0]
    69d8:	b9b3      	cbnz	r3, 6a08 <l2cap_chan_le_send+0x68>
		if (sdu_hdr_len) {
    69da:	b136      	cbz	r6, 69ea <l2cap_chan_le_send+0x4a>
			net_buf_push_le16(buf, net_buf_frags_len(buf));
    69dc:	4620      	mov	r0, r4
    69de:	f7ff fe21 	bl	6624 <net_buf_frags_len>
    69e2:	b281      	uxth	r1, r0
    69e4:	4648      	mov	r0, r9
    69e6:	f011 f930 	bl	17c4a <net_buf_simple_push_le16>
		return net_buf_ref(buf);
    69ea:	4620      	mov	r0, r4
    69ec:	f011 f8be 	bl	17b6c <net_buf_ref>
    69f0:	4605      	mov	r5, r0
	if (!ch->chan.conn) {
    69f2:	6838      	ldr	r0, [r7, #0]
    69f4:	2800      	cmp	r0, #0
    69f6:	d13f      	bne.n	6a78 <l2cap_chan_le_send+0xd8>
		net_buf_unref(buf);
    69f8:	4628      	mov	r0, r5
    69fa:	f011 f889 	bl	17b10 <net_buf_unref>
		return -ECONNRESET;
    69fe:	f06f 0635 	mvn.w	r6, #53	; 0x35
}
    6a02:	4630      	mov	r0, r6
    6a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    6a08:	79a0      	ldrb	r0, [r4, #6]
    6a0a:	f010 ffbd 	bl	17988 <net_buf_pool_get>
	seg = net_buf_alloc(pool, K_NO_WAIT);
    6a0e:	2100      	movs	r1, #0
    6a10:	f011 f84e 	bl	17ab0 <net_buf_alloc_fixed>
	if (seg) {
    6a14:	4605      	mov	r5, r0
    6a16:	b340      	cbz	r0, 6a6a <l2cap_chan_le_send+0xca>
		net_buf_reserve(seg, BT_L2CAP_CHAN_SEND_RESERVE);
    6a18:	2108      	movs	r1, #8
    6a1a:	4408      	add	r0, r1
    6a1c:	f011 f867 	bl	17aee <net_buf_simple_reserve>
    6a20:	f105 0808 	add.w	r8, r5, #8
	if (sdu_hdr_len) {
    6a24:	b136      	cbz	r6, 6a34 <l2cap_chan_le_send+0x94>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    6a26:	4620      	mov	r0, r4
    6a28:	f7ff fdfc 	bl	6624 <net_buf_frags_len>
    6a2c:	b281      	uxth	r1, r0
    6a2e:	4640      	mov	r0, r8
    6a30:	f011 f8e3 	bl	17bfa <net_buf_simple_add_le16>
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    6a34:	4640      	mov	r0, r8
    6a36:	f011 f935 	bl	17ca4 <net_buf_simple_tailroom>
    6a3a:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
    6a3e:	1b89      	subs	r1, r1, r6
    6a40:	4288      	cmp	r0, r1
    6a42:	d217      	bcs.n	6a74 <l2cap_chan_le_send+0xd4>
    6a44:	4640      	mov	r0, r8
    6a46:	f011 f92d 	bl	17ca4 <net_buf_simple_tailroom>
    6a4a:	b280      	uxth	r0, r0
	len = min(buf->len, len);
    6a4c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
	net_buf_add_mem(seg, buf->data, len);
    6a50:	68a1      	ldr	r1, [r4, #8]
    6a52:	4582      	cmp	sl, r0
    6a54:	bf28      	it	cs
    6a56:	4682      	movcs	sl, r0
    6a58:	4652      	mov	r2, sl
    6a5a:	4640      	mov	r0, r8
    6a5c:	f011 f8bc 	bl	17bd8 <net_buf_simple_add_mem>
	net_buf_pull(buf, len);
    6a60:	4651      	mov	r1, sl
    6a62:	4648      	mov	r0, r9
    6a64:	f011 f902 	bl	17c6c <net_buf_simple_pull>
    6a68:	e7c3      	b.n	69f2 <l2cap_chan_le_send+0x52>
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    6a6a:	2104      	movs	r1, #4
    6a6c:	f7ff fcde 	bl	642c <bt_conn_create_pdu>
    6a70:	4605      	mov	r5, r0
    6a72:	e7d5      	b.n	6a20 <l2cap_chan_le_send+0x80>
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    6a74:	b288      	uxth	r0, r1
    6a76:	e7e9      	b.n	6a4c <l2cap_chan_le_send+0xac>
	len = buf->len - sdu_hdr_len;
    6a78:	89ab      	ldrh	r3, [r5, #12]
    6a7a:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
    6a7e:	1b9e      	subs	r6, r3, r6
    6a80:	462a      	mov	r2, r5
    6a82:	2300      	movs	r3, #0
    6a84:	f7ff ff03 	bl	688e <bt_l2cap_send_cb>
    6a88:	e7bb      	b.n	6a02 <l2cap_chan_le_send+0x62>
		return -EAGAIN;
    6a8a:	f06f 060a 	mvn.w	r6, #10
    6a8e:	e7b8      	b.n	6a02 <l2cap_chan_le_send+0x62>

00006a90 <l2cap_chan_le_send_sdu>:
{
    6a90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	total_len = net_buf_frags_len(*buf) + sent;
    6a94:	680c      	ldr	r4, [r1, #0]
{
    6a96:	9201      	str	r2, [sp, #4]
    6a98:	4606      	mov	r6, r0
	total_len = net_buf_frags_len(*buf) + sent;
    6a9a:	4620      	mov	r0, r4
{
    6a9c:	460f      	mov	r7, r1
	total_len = net_buf_frags_len(*buf) + sent;
    6a9e:	f7ff fdc1 	bl	6624 <net_buf_frags_len>
    6aa2:	9b01      	ldr	r3, [sp, #4]
	if (total_len > ch->tx.mtu) {
    6aa4:	f8b6 2062 	ldrh.w	r2, [r6, #98]	; 0x62
	total_len = net_buf_frags_len(*buf) + sent;
    6aa8:	eb03 0800 	add.w	r8, r3, r0
	if (total_len > ch->tx.mtu) {
    6aac:	4590      	cmp	r8, r2
    6aae:	dc36      	bgt.n	6b1e <l2cap_chan_le_send_sdu+0x8e>
	if (!frag->len && frag->frags) {
    6ab0:	89a2      	ldrh	r2, [r4, #12]
    6ab2:	b91a      	cbnz	r2, 6abc <l2cap_chan_le_send_sdu+0x2c>
    6ab4:	6822      	ldr	r2, [r4, #0]
    6ab6:	2a00      	cmp	r2, #0
    6ab8:	bf18      	it	ne
    6aba:	4614      	movne	r4, r2
	if (!sent) {
    6abc:	b9b3      	cbnz	r3, 6aec <l2cap_chan_le_send_sdu+0x5c>
		ret = l2cap_chan_le_send(ch, frag, BT_L2CAP_SDU_HDR_LEN);
    6abe:	2202      	movs	r2, #2
    6ac0:	4621      	mov	r1, r4
    6ac2:	4630      	mov	r0, r6
    6ac4:	f7ff ff6c 	bl	69a0 <l2cap_chan_le_send>
		if (ret < 0) {
    6ac8:	1e05      	subs	r5, r0, #0
    6aca:	da0e      	bge.n	6aea <l2cap_chan_le_send_sdu+0x5a>
			if (ret == -EAGAIN) {
    6acc:	f115 0f0b 	cmn.w	r5, #11
    6ad0:	d106      	bne.n	6ae0 <l2cap_chan_le_send_sdu+0x50>
				memcpy(net_buf_user_data(frag), &sent,
    6ad2:	2204      	movs	r2, #4
    6ad4:	eb0d 0102 	add.w	r1, sp, r2
    6ad8:	f104 0014 	add.w	r0, r4, #20
    6adc:	f7f9 ff05 	bl	8ea <memcpy>
			*buf = frag;
    6ae0:	603c      	str	r4, [r7, #0]
}
    6ae2:	4628      	mov	r0, r5
    6ae4:	b002      	add	sp, #8
    6ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sent = ret;
    6aea:	9501      	str	r5, [sp, #4]
	if (!frag->len && frag->frags) {
    6aec:	2500      	movs	r5, #0
	for (ret = 0; sent < total_len; sent += ret) {
    6aee:	9b01      	ldr	r3, [sp, #4]
    6af0:	4598      	cmp	r8, r3
    6af2:	dc03      	bgt.n	6afc <l2cap_chan_le_send_sdu+0x6c>
	net_buf_unref(frag);
    6af4:	4620      	mov	r0, r4
    6af6:	f011 f80b 	bl	17b10 <net_buf_unref>
	return ret;
    6afa:	e7f2      	b.n	6ae2 <l2cap_chan_le_send_sdu+0x52>
		if (!frag->len) {
    6afc:	89a0      	ldrh	r0, [r4, #12]
    6afe:	b918      	cbnz	r0, 6b08 <l2cap_chan_le_send_sdu+0x78>
			frag = net_buf_frag_del(NULL, frag);
    6b00:	4621      	mov	r1, r4
    6b02:	f011 f857 	bl	17bb4 <net_buf_frag_del>
    6b06:	4604      	mov	r4, r0
		ret = l2cap_chan_le_send(ch, frag, 0);
    6b08:	2200      	movs	r2, #0
    6b0a:	4621      	mov	r1, r4
    6b0c:	4630      	mov	r0, r6
    6b0e:	f7ff ff47 	bl	69a0 <l2cap_chan_le_send>
		if (ret < 0) {
    6b12:	1e05      	subs	r5, r0, #0
    6b14:	dbda      	blt.n	6acc <l2cap_chan_le_send_sdu+0x3c>
	for (ret = 0; sent < total_len; sent += ret) {
    6b16:	9b01      	ldr	r3, [sp, #4]
    6b18:	442b      	add	r3, r5
    6b1a:	9301      	str	r3, [sp, #4]
    6b1c:	e7e7      	b.n	6aee <l2cap_chan_le_send_sdu+0x5e>
		return -EMSGSIZE;
    6b1e:	f06f 0523 	mvn.w	r5, #35	; 0x23
    6b22:	e7de      	b.n	6ae2 <l2cap_chan_le_send_sdu+0x52>

00006b24 <l2cap_chan_update_credits.isra.9>:
static void l2cap_chan_update_credits(struct bt_l2cap_le_chan *chan,
    6b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b28:	6d03      	ldr	r3, [r0, #80]	; 0x50
	    L2CAP_LE_CREDITS_THRESHOLD(chan->rx.init_credits)) {
    6b2a:	f8b0 4046 	ldrh.w	r4, [r0, #70]	; 0x46
	if (k_sem_count_get(&chan->rx.credits) >
    6b2e:	ebb3 0f54 	cmp.w	r3, r4, lsr #1
static void l2cap_chan_update_credits(struct bt_l2cap_le_chan *chan,
    6b32:	4606      	mov	r6, r0
	if (k_sem_count_get(&chan->rx.credits) >
    6b34:	d823      	bhi.n	6b7e <l2cap_chan_update_credits.isra.9+0x5a>
	credits = chan->rx.init_credits - k_sem_count_get(&chan->rx.credits);
    6b36:	1ae4      	subs	r4, r4, r3
    6b38:	b2a4      	uxth	r4, r4
    6b3a:	4625      	mov	r5, r4
		k_sem_give(&chan->rx.credits);
    6b3c:	f100 0748 	add.w	r7, r0, #72	; 0x48
	while (credits--) {
    6b40:	b9bd      	cbnz	r5, 6b72 <l2cap_chan_update_credits.isra.9+0x4e>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    6b42:	f7ff fd77 	bl	6634 <get_ident>
    6b46:	2204      	movs	r2, #4
    6b48:	4601      	mov	r1, r0
    6b4a:	2016      	movs	r0, #22
    6b4c:	f7ff fe2d 	bl	67aa <l2cap_create_le_sig_pdu.isra.6>
	ev = net_buf_add(buf, sizeof(*ev));
    6b50:	2104      	movs	r1, #4
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    6b52:	4607      	mov	r7, r0
	ev = net_buf_add(buf, sizeof(*ev));
    6b54:	3008      	adds	r0, #8
    6b56:	f011 f839 	bl	17bcc <net_buf_simple_add>
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
    6b5a:	f8b6 3040 	ldrh.w	r3, [r6, #64]	; 0x40
    6b5e:	8003      	strh	r3, [r0, #0]
	ev->credits = sys_cpu_to_le16(credits);
    6b60:	8044      	strh	r4, [r0, #2]
    6b62:	462b      	mov	r3, r5
    6b64:	463a      	mov	r2, r7
    6b66:	6830      	ldr	r0, [r6, #0]
    6b68:	2105      	movs	r1, #5
}
    6b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6b6e:	f7ff be8e 	b.w	688e <bt_l2cap_send_cb>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    6b72:	4638      	mov	r0, r7
    6b74:	3d01      	subs	r5, #1
    6b76:	f018 fe69 	bl	1f84c <_impl_k_sem_give>
    6b7a:	b2ad      	uxth	r5, r5
    6b7c:	e7e0      	b.n	6b40 <l2cap_chan_update_credits.isra.9+0x1c>
    6b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006b82 <bt_l2cap_le_lookup_tx_cid>:
{
    6b82:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6b84:	b100      	cbz	r0, 6b88 <bt_l2cap_le_lookup_tx_cid+0x6>
    6b86:	3808      	subs	r0, #8
    6b88:	b900      	cbnz	r0, 6b8c <bt_l2cap_le_lookup_tx_cid+0xa>
}
    6b8a:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    6b8c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
    6b90:	428b      	cmp	r3, r1
    6b92:	d0fa      	beq.n	6b8a <bt_l2cap_le_lookup_tx_cid+0x8>
    6b94:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6b96:	2000      	movs	r0, #0
    6b98:	2b00      	cmp	r3, #0
    6b9a:	d0f6      	beq.n	6b8a <bt_l2cap_le_lookup_tx_cid+0x8>
    6b9c:	f1a3 0008 	sub.w	r0, r3, #8
    6ba0:	e7f2      	b.n	6b88 <bt_l2cap_le_lookup_tx_cid+0x6>

00006ba2 <bt_l2cap_le_lookup_rx_cid>:
{
    6ba2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6ba4:	b100      	cbz	r0, 6ba8 <bt_l2cap_le_lookup_rx_cid+0x6>
    6ba6:	3808      	subs	r0, #8
    6ba8:	b900      	cbnz	r0, 6bac <bt_l2cap_le_lookup_rx_cid+0xa>
}
    6baa:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    6bac:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    6bb0:	428b      	cmp	r3, r1
    6bb2:	d0fa      	beq.n	6baa <bt_l2cap_le_lookup_rx_cid+0x8>
    6bb4:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6bb6:	2000      	movs	r0, #0
    6bb8:	2b00      	cmp	r3, #0
    6bba:	d0f6      	beq.n	6baa <bt_l2cap_le_lookup_rx_cid+0x8>
    6bbc:	f1a3 0008 	sub.w	r0, r3, #8
    6bc0:	e7f2      	b.n	6ba8 <bt_l2cap_le_lookup_rx_cid+0x6>
	...

00006bc4 <l2cap_chan_add>:
{
    6bc4:	b570      	push	{r4, r5, r6, lr}
    6bc6:	4605      	mov	r5, r0
    6bc8:	4616      	mov	r6, r2
	if (ch && ch->rx.cid > 0) {
    6bca:	460c      	mov	r4, r1
    6bcc:	b111      	cbz	r1, 6bd4 <l2cap_chan_add+0x10>
    6bce:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
    6bd2:	b943      	cbnz	r3, 6be6 <l2cap_chan_add+0x22>
    6bd4:	2240      	movs	r2, #64	; 0x40
		if (ch && !bt_l2cap_le_lookup_rx_cid(conn, cid)) {
    6bd6:	b1e4      	cbz	r4, 6c12 <l2cap_chan_add+0x4e>
    6bd8:	4611      	mov	r1, r2
    6bda:	4628      	mov	r0, r5
    6bdc:	f7ff ffe1 	bl	6ba2 <bt_l2cap_le_lookup_rx_cid>
    6be0:	b9b8      	cbnz	r0, 6c12 <l2cap_chan_add+0x4e>
			ch->rx.cid = cid;
    6be2:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    6be6:	490f      	ldr	r1, [pc, #60]	; (6c24 <l2cap_chan_add+0x60>)
    6be8:	f104 0010 	add.w	r0, r4, #16
    6bec:	f019 f95a 	bl	1fea4 <k_delayed_work_init>
	sys_slist_append(&conn->channels, &chan->node);
    6bf0:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    6bf4:	f104 0108 	add.w	r1, r4, #8
    6bf8:	f7ff fcfa 	bl	65f0 <sys_slist_append>
	    L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    6bfc:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
	chan->conn = conn;
    6c00:	6025      	str	r5, [r4, #0]
	    L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    6c02:	3b40      	subs	r3, #64	; 0x40
	if (IS_ENABLED(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL) &&
    6c04:	b29b      	uxth	r3, r3
    6c06:	2b3f      	cmp	r3, #63	; 0x3f
	chan->destroy = destroy;
    6c08:	60e6      	str	r6, [r4, #12]
    6c0a:	f04f 0001 	mov.w	r0, #1
	if (IS_ENABLED(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL) &&
    6c0e:	d906      	bls.n	6c1e <l2cap_chan_add+0x5a>
}
    6c10:	bd70      	pop	{r4, r5, r6, pc}
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    6c12:	3201      	adds	r2, #1
    6c14:	b292      	uxth	r2, r2
    6c16:	2a80      	cmp	r2, #128	; 0x80
    6c18:	d1dd      	bne.n	6bd6 <l2cap_chan_add+0x12>
		return false;
    6c1a:	2000      	movs	r0, #0
    6c1c:	bd70      	pop	{r4, r5, r6, pc}
	chan->state = state;
    6c1e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    6c22:	bd70      	pop	{r4, r5, r6, pc}
    6c24:	0000683d 	.word	0x0000683d

00006c28 <bt_l2cap_connected>:
{
    6c28:	4b10      	ldr	r3, [pc, #64]	; (6c6c <bt_l2cap_connected+0x44>)
    6c2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6c2c:	681c      	ldr	r4, [r3, #0]
    6c2e:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    6c30:	b10c      	cbz	r4, 6c36 <bt_l2cap_connected+0xe>
    6c32:	3c08      	subs	r4, #8
    6c34:	b90c      	cbnz	r4, 6c3a <bt_l2cap_connected+0x12>
}
    6c36:	b003      	add	sp, #12
    6c38:	bd30      	pop	{r4, r5, pc}
		if (fchan->accept(conn, &chan) < 0) {
    6c3a:	6863      	ldr	r3, [r4, #4]
    6c3c:	a901      	add	r1, sp, #4
    6c3e:	4628      	mov	r0, r5
    6c40:	4798      	blx	r3
    6c42:	2800      	cmp	r0, #0
    6c44:	db10      	blt.n	6c68 <bt_l2cap_connected+0x40>
		ch = BT_L2CAP_LE_CHAN(chan);
    6c46:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
    6c48:	8823      	ldrh	r3, [r4, #0]
    6c4a:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
		ch->tx.cid = fchan->cid;
    6c4e:	f8a1 3060 	strh.w	r3, [r1, #96]	; 0x60
		if (!l2cap_chan_add(conn, chan, NULL)) {
    6c52:	2200      	movs	r2, #0
    6c54:	4628      	mov	r0, r5
    6c56:	f7ff ffb5 	bl	6bc4 <l2cap_chan_add>
    6c5a:	2800      	cmp	r0, #0
    6c5c:	d0eb      	beq.n	6c36 <bt_l2cap_connected+0xe>
		if (chan->ops->connected) {
    6c5e:	9801      	ldr	r0, [sp, #4]
    6c60:	6843      	ldr	r3, [r0, #4]
    6c62:	681b      	ldr	r3, [r3, #0]
    6c64:	b103      	cbz	r3, 6c68 <bt_l2cap_connected+0x40>
			chan->ops->connected(chan);
    6c66:	4798      	blx	r3
    6c68:	68a4      	ldr	r4, [r4, #8]
    6c6a:	e7e1      	b.n	6c30 <bt_l2cap_connected+0x8>
    6c6c:	200005a0 	.word	0x200005a0

00006c70 <bt_l2cap_server_register>:
{
    6c70:	4601      	mov	r1, r0
	if (server->psm < L2CAP_LE_PSM_START ||
    6c72:	8800      	ldrh	r0, [r0, #0]
{
    6c74:	b508      	push	{r3, lr}
	if (server->psm < L2CAP_LE_PSM_START ||
    6c76:	1e43      	subs	r3, r0, #1
    6c78:	2bfe      	cmp	r3, #254	; 0xfe
    6c7a:	d811      	bhi.n	6ca0 <bt_l2cap_server_register+0x30>
	    server->psm > L2CAP_LE_PSM_END || !server->accept) {
    6c7c:	684b      	ldr	r3, [r1, #4]
    6c7e:	b17b      	cbz	r3, 6ca0 <bt_l2cap_server_register+0x30>
	if (server->sec_level > BT_SECURITY_FIPS) {
    6c80:	788b      	ldrb	r3, [r1, #2]
    6c82:	2b04      	cmp	r3, #4
    6c84:	d80c      	bhi.n	6ca0 <bt_l2cap_server_register+0x30>
	} else if (server->sec_level < BT_SECURITY_LOW) {
    6c86:	b90b      	cbnz	r3, 6c8c <bt_l2cap_server_register+0x1c>
		server->sec_level = BT_SECURITY_LOW;
    6c88:	2301      	movs	r3, #1
    6c8a:	708b      	strb	r3, [r1, #2]
	if (l2cap_server_lookup_psm(server->psm)) {
    6c8c:	f7ff fcfa 	bl	6684 <l2cap_server_lookup_psm>
    6c90:	4602      	mov	r2, r0
    6c92:	b940      	cbnz	r0, 6ca6 <bt_l2cap_server_register+0x36>
	sys_slist_append(&servers, &server->node);
    6c94:	3108      	adds	r1, #8
    6c96:	4805      	ldr	r0, [pc, #20]	; (6cac <bt_l2cap_server_register+0x3c>)
    6c98:	f7ff fcaa 	bl	65f0 <sys_slist_append>
	return 0;
    6c9c:	4610      	mov	r0, r2
    6c9e:	bd08      	pop	{r3, pc}
		return -EINVAL;
    6ca0:	f06f 0015 	mvn.w	r0, #21
    6ca4:	bd08      	pop	{r3, pc}
		return -EADDRINUSE;
    6ca6:	f06f 002f 	mvn.w	r0, #47	; 0x2f
}
    6caa:	bd08      	pop	{r3, pc}
    6cac:	200005a8 	.word	0x200005a8

00006cb0 <bt_l2cap_update_conn_param>:
{
    6cb0:	b570      	push	{r4, r5, r6, lr}
    6cb2:	460c      	mov	r4, r1
    6cb4:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    6cb6:	f7ff fcbd 	bl	6634 <get_ident>
    6cba:	2208      	movs	r2, #8
    6cbc:	4601      	mov	r1, r0
    6cbe:	2012      	movs	r0, #18
    6cc0:	f7ff fd73 	bl	67aa <l2cap_create_le_sig_pdu.isra.6>
	req = net_buf_add(buf, sizeof(*req));
    6cc4:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    6cc6:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    6cc8:	4408      	add	r0, r1
    6cca:	f010 ff7f 	bl	17bcc <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    6cce:	8823      	ldrh	r3, [r4, #0]
    6cd0:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    6cd2:	8863      	ldrh	r3, [r4, #2]
    6cd4:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    6cd6:	88a3      	ldrh	r3, [r4, #4]
    6cd8:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    6cda:	88e3      	ldrh	r3, [r4, #6]
    6cdc:	80c3      	strh	r3, [r0, #6]
    6cde:	462a      	mov	r2, r5
    6ce0:	4630      	mov	r0, r6
    6ce2:	2300      	movs	r3, #0
    6ce4:	2105      	movs	r1, #5
    6ce6:	f7ff fdd2 	bl	688e <bt_l2cap_send_cb>
}
    6cea:	2000      	movs	r0, #0
    6cec:	bd70      	pop	{r4, r5, r6, pc}
	...

00006cf0 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    6cf0:	4801      	ldr	r0, [pc, #4]	; (6cf8 <bt_l2cap_init+0x8>)
    6cf2:	f7ff bd6d 	b.w	67d0 <bt_l2cap_le_fixed_chan_register>
    6cf6:	bf00      	nop
    6cf8:	2000de40 	.word	0x2000de40

00006cfc <bt_l2cap_chan_connect>:
	return l2cap_le_conn_req(ch);
}

int bt_l2cap_chan_connect(struct bt_conn *conn, struct bt_l2cap_chan *chan,
			  u16_t psm)
{
    6cfc:	b570      	push	{r4, r5, r6, lr}
    6cfe:	460c      	mov	r4, r1
    6d00:	4616      	mov	r6, r2
	BT_DBG("conn %p chan %p psm 0x%04x", conn, chan, psm);

	if (!conn || conn->state != BT_CONN_CONNECTED) {
    6d02:	4605      	mov	r5, r0
    6d04:	b318      	cbz	r0, 6d4e <bt_l2cap_chan_connect+0x52>
    6d06:	7b03      	ldrb	r3, [r0, #12]
    6d08:	2b03      	cmp	r3, #3
    6d0a:	d120      	bne.n	6d4e <bt_l2cap_chan_connect+0x52>
		return -ENOTCONN;
	}

	if (!chan) {
    6d0c:	b911      	cbnz	r1, 6d14 <bt_l2cap_chan_connect+0x18>
		return -EINVAL;
    6d0e:	f06f 0015 	mvn.w	r0, #21
    6d12:	bd70      	pop	{r4, r5, r6, pc}
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_connect(conn, chan, psm);
	}

	if (chan->required_sec_level > BT_SECURITY_FIPS) {
    6d14:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
    6d18:	2b04      	cmp	r3, #4
    6d1a:	d8f8      	bhi.n	6d0e <bt_l2cap_chan_connect+0x12>
		return -EINVAL;
	} else if (chan->required_sec_level == BT_SECURITY_NONE) {
    6d1c:	b913      	cbnz	r3, 6d24 <bt_l2cap_chan_connect+0x28>
		chan->required_sec_level = BT_SECURITY_LOW;
    6d1e:	2301      	movs	r3, #1
    6d20:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
	if (psm < L2CAP_LE_PSM_START || psm > L2CAP_LE_PSM_END) {
    6d24:	1e73      	subs	r3, r6, #1
    6d26:	2bfe      	cmp	r3, #254	; 0xfe
    6d28:	d8f1      	bhi.n	6d0e <bt_l2cap_chan_connect+0x12>
	l2cap_chan_tx_init(ch);
    6d2a:	4620      	mov	r0, r4
    6d2c:	f7ff fd06 	bl	673c <l2cap_chan_tx_init>
	l2cap_chan_rx_init(ch);
    6d30:	4620      	mov	r0, r4
    6d32:	f7ff fd17 	bl	6764 <l2cap_chan_rx_init>
	if (!l2cap_chan_add(conn, &ch->chan, l2cap_chan_destroy)) {
    6d36:	4a09      	ldr	r2, [pc, #36]	; (6d5c <bt_l2cap_chan_connect+0x60>)
    6d38:	4621      	mov	r1, r4
    6d3a:	4628      	mov	r0, r5
    6d3c:	f7ff ff42 	bl	6bc4 <l2cap_chan_add>
    6d40:	b140      	cbz	r0, 6d54 <bt_l2cap_chan_connect+0x58>
	ch->chan.psm = psm;
    6d42:	8766      	strh	r6, [r4, #58]	; 0x3a
	return l2cap_le_conn_req(ch);
    6d44:	4620      	mov	r0, r4
	}

	return l2cap_le_connect(conn, BT_L2CAP_LE_CHAN(chan), psm);
}
    6d46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return l2cap_le_conn_req(ch);
    6d4a:	f7ff bdb5 	b.w	68b8 <l2cap_le_conn_req>
		return -ENOTCONN;
    6d4e:	f06f 0038 	mvn.w	r0, #56	; 0x38
    6d52:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    6d54:	f06f 000b 	mvn.w	r0, #11
}
    6d58:	bd70      	pop	{r4, r5, r6, pc}
    6d5a:	bf00      	nop
    6d5c:	00006709 	.word	0x00006709

00006d60 <bt_l2cap_chan_disconnect>:

int bt_l2cap_chan_disconnect(struct bt_l2cap_chan *chan)
{
    6d60:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->conn;
	struct net_buf *buf;
	struct bt_l2cap_disconn_req *req;
	struct bt_l2cap_le_chan *ch;

	if (!conn) {
    6d62:	6803      	ldr	r3, [r0, #0]
{
    6d64:	4604      	mov	r4, r0
	if (!conn) {
    6d66:	b32b      	cbz	r3, 6db4 <bt_l2cap_chan_disconnect+0x54>
	ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p scid 0x%04x dcid 0x%04x", chan, ch->rx.cid,
	       ch->tx.cid);

	ch->chan.ident = get_ident();
    6d68:	f7ff fc64 	bl	6634 <get_ident>

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    6d6c:	2204      	movs	r2, #4
	ch->chan.ident = get_ident();
    6d6e:	4601      	mov	r1, r0
    6d70:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    6d74:	2006      	movs	r0, #6
    6d76:	f7ff fd18 	bl	67aa <l2cap_create_le_sig_pdu.isra.6>
				      ch->chan.ident, sizeof(*req));

	req = net_buf_add(buf, sizeof(*req));
    6d7a:	2104      	movs	r1, #4
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    6d7c:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    6d7e:	3008      	adds	r0, #8
    6d80:	f010 ff24 	bl	17bcc <net_buf_simple_add>
	req->dcid = sys_cpu_to_le16(ch->tx.cid);
    6d84:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    6d88:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    6d8a:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    6d8e:	8043      	strh	r3, [r0, #2]
    6d90:	f104 0110 	add.w	r1, r4, #16
    6d94:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    6d98:	4808      	ldr	r0, [pc, #32]	; (6dbc <bt_l2cap_chan_disconnect+0x5c>)
    6d9a:	f019 f8fb 	bl	1ff94 <k_delayed_work_submit_to_queue>
    6d9e:	6820      	ldr	r0, [r4, #0]
    6da0:	2300      	movs	r3, #0
    6da2:	462a      	mov	r2, r5
    6da4:	2105      	movs	r1, #5
    6da6:	f7ff fd72 	bl	688e <bt_l2cap_send_cb>
	chan->state = state;
    6daa:	2304      	movs	r3, #4
    6dac:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

	l2cap_chan_send_req(ch, buf, L2CAP_DISC_TIMEOUT);
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECT);

	return 0;
    6db0:	2000      	movs	r0, #0
    6db2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    6db4:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    6db8:	bd38      	pop	{r3, r4, r5, pc}
    6dba:	bf00      	nop
    6dbc:	20005218 	.word	0x20005218

00006dc0 <l2cap_chan_le_recv_sdu>:
{
    6dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6dc4:	460d      	mov	r5, r1
	if (net_buf_frags_len(chan->_sdu) + buf->len > chan->_sdu_len) {
    6dc6:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
{
    6dca:	4604      	mov	r4, r0
	if (net_buf_frags_len(chan->_sdu) + buf->len > chan->_sdu_len) {
    6dcc:	4608      	mov	r0, r1
    6dce:	f7ff fc29 	bl	6624 <net_buf_frags_len>
    6dd2:	89ab      	ldrh	r3, [r5, #12]
    6dd4:	4418      	add	r0, r3
    6dd6:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
    6dda:	4298      	cmp	r0, r3
    6ddc:	d904      	bls.n	6de8 <l2cap_chan_le_recv_sdu+0x28>
		bt_l2cap_chan_disconnect(&chan->chan);
    6dde:	4620      	mov	r0, r4
}
    6de0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_l2cap_chan_disconnect(&chan->chan);
    6de4:	f7ff bfbc 	b.w	6d60 <bt_l2cap_chan_disconnect>
	frag = net_buf_frag_last(chan->_sdu);
    6de8:	4608      	mov	r0, r1
    6dea:	f010 fec3 	bl	17b74 <net_buf_frag_last>
		net_buf_pull(buf, len);
    6dee:	f105 0908 	add.w	r9, r5, #8
	frag = net_buf_frag_last(chan->_sdu);
    6df2:	4606      	mov	r6, r0
	while (buf->len) {
    6df4:	89af      	ldrh	r7, [r5, #12]
    6df6:	b9cf      	cbnz	r7, 6e2c <l2cap_chan_le_recv_sdu+0x6c>
	if (net_buf_frags_len(chan->_sdu) == chan->_sdu_len) {
    6df8:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
    6dfc:	4608      	mov	r0, r1
    6dfe:	f7ff fc11 	bl	6624 <net_buf_frags_len>
    6e02:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
    6e06:	4298      	cmp	r0, r3
    6e08:	d10b      	bne.n	6e22 <l2cap_chan_le_recv_sdu+0x62>
		chan->chan.ops->recv(&chan->chan, chan->_sdu);
    6e0a:	6863      	ldr	r3, [r4, #4]
    6e0c:	4620      	mov	r0, r4
    6e0e:	691b      	ldr	r3, [r3, #16]
    6e10:	4798      	blx	r3
		net_buf_unref(chan->_sdu);
    6e12:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    6e16:	f010 fe7b 	bl	17b10 <net_buf_unref>
		chan->_sdu = NULL;
    6e1a:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94
		chan->_sdu_len = 0;
    6e1e:	f8a4 7098 	strh.w	r7, [r4, #152]	; 0x98
	l2cap_chan_update_credits(chan, buf);
    6e22:	4620      	mov	r0, r4
}
    6e24:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	l2cap_chan_update_credits(chan, buf);
    6e28:	f7ff be7c 	b.w	6b24 <l2cap_chan_update_credits.isra.9>
		if (!net_buf_tailroom(frag)) {
    6e2c:	f106 0008 	add.w	r0, r6, #8
    6e30:	f010 ff38 	bl	17ca4 <net_buf_simple_tailroom>
    6e34:	b958      	cbnz	r0, 6e4e <l2cap_chan_le_recv_sdu+0x8e>
	frag = chan->chan.ops->alloc_buf(&chan->chan);
    6e36:	6863      	ldr	r3, [r4, #4]
    6e38:	4620      	mov	r0, r4
    6e3a:	68db      	ldr	r3, [r3, #12]
    6e3c:	4798      	blx	r3
	if (!frag) {
    6e3e:	4606      	mov	r6, r0
    6e40:	2800      	cmp	r0, #0
    6e42:	d0cc      	beq.n	6dde <l2cap_chan_le_recv_sdu+0x1e>
	net_buf_frag_add(chan->_sdu, frag);
    6e44:	4601      	mov	r1, r0
    6e46:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    6e4a:	f010 fea3 	bl	17b94 <net_buf_frag_add>
		len = min(net_buf_tailroom(frag), buf->len);
    6e4e:	f106 0808 	add.w	r8, r6, #8
    6e52:	4640      	mov	r0, r8
    6e54:	f010 ff26 	bl	17ca4 <net_buf_simple_tailroom>
    6e58:	89af      	ldrh	r7, [r5, #12]
    6e5a:	42b8      	cmp	r0, r7
    6e5c:	d203      	bcs.n	6e66 <l2cap_chan_le_recv_sdu+0xa6>
    6e5e:	4640      	mov	r0, r8
    6e60:	f010 ff20 	bl	17ca4 <net_buf_simple_tailroom>
    6e64:	b287      	uxth	r7, r0
		net_buf_add_mem(frag, buf->data, len);
    6e66:	68a9      	ldr	r1, [r5, #8]
    6e68:	463a      	mov	r2, r7
    6e6a:	4640      	mov	r0, r8
    6e6c:	f010 feb4 	bl	17bd8 <net_buf_simple_add_mem>
		net_buf_pull(buf, len);
    6e70:	4639      	mov	r1, r7
    6e72:	4648      	mov	r0, r9
    6e74:	f010 fefa 	bl	17c6c <net_buf_simple_pull>
    6e78:	e7bc      	b.n	6df4 <l2cap_chan_le_recv_sdu+0x34>

00006e7a <bt_l2cap_recv>:
{
    6e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    6e7c:	898b      	ldrh	r3, [r1, #12]
    6e7e:	2b03      	cmp	r3, #3
{
    6e80:	4604      	mov	r4, r0
    6e82:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    6e84:	d804      	bhi.n	6e90 <bt_l2cap_recv+0x16>
		net_buf_unref(buf);
    6e86:	4628      	mov	r0, r5
}
    6e88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    6e8c:	f010 be40 	b.w	17b10 <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    6e90:	460e      	mov	r6, r1
	net_buf_pull(buf, sizeof(*hdr));
    6e92:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    6e94:	f856 3f08 	ldr.w	r3, [r6, #8]!
    6e98:	885f      	ldrh	r7, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    6e9a:	4630      	mov	r0, r6
    6e9c:	f010 fee6 	bl	17c6c <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    6ea0:	4620      	mov	r0, r4
    6ea2:	4639      	mov	r1, r7
    6ea4:	f7ff fe7d 	bl	6ba2 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    6ea8:	4604      	mov	r4, r0
    6eaa:	2800      	cmp	r0, #0
    6eac:	d0eb      	beq.n	6e86 <bt_l2cap_recv+0xc>
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    6eae:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    6eb2:	3b40      	subs	r3, #64	; 0x40
    6eb4:	b29b      	uxth	r3, r3
    6eb6:	2b3f      	cmp	r3, #63	; 0x3f
    6eb8:	d82c      	bhi.n	6f14 <bt_l2cap_recv+0x9a>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    6eba:	2100      	movs	r1, #0
    6ebc:	3048      	adds	r0, #72	; 0x48
    6ebe:	f018 fd25 	bl	1f90c <_impl_k_sem_take>
	if (k_sem_take(&chan->rx.credits, K_NO_WAIT)) {
    6ec2:	b118      	cbz	r0, 6ecc <bt_l2cap_recv+0x52>
			bt_l2cap_chan_disconnect(&chan->chan);
    6ec4:	4620      	mov	r0, r4
    6ec6:	f7ff ff4b 	bl	6d60 <bt_l2cap_chan_disconnect>
    6eca:	e7dc      	b.n	6e86 <bt_l2cap_recv+0xc>
	if (chan->_sdu) {
    6ecc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    6ed0:	b123      	cbz	r3, 6edc <bt_l2cap_recv+0x62>
		l2cap_chan_le_recv_sdu(chan, buf);
    6ed2:	4629      	mov	r1, r5
    6ed4:	4620      	mov	r0, r4
    6ed6:	f7ff ff73 	bl	6dc0 <l2cap_chan_le_recv_sdu>
    6eda:	e7d4      	b.n	6e86 <bt_l2cap_recv+0xc>
	sdu_len = net_buf_pull_le16(buf);
    6edc:	4630      	mov	r0, r6
    6ede:	f010 fed5 	bl	17c8c <net_buf_simple_pull_le16>
	if (sdu_len > chan->rx.mtu) {
    6ee2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    6ee6:	4283      	cmp	r3, r0
	sdu_len = net_buf_pull_le16(buf);
    6ee8:	4606      	mov	r6, r0
	if (sdu_len > chan->rx.mtu) {
    6eea:	d3eb      	bcc.n	6ec4 <bt_l2cap_recv+0x4a>
	if (chan->chan.ops->alloc_buf) {
    6eec:	6863      	ldr	r3, [r4, #4]
    6eee:	68da      	ldr	r2, [r3, #12]
    6ef0:	b142      	cbz	r2, 6f04 <bt_l2cap_recv+0x8a>
		chan->_sdu = chan->chan.ops->alloc_buf(&chan->chan);
    6ef2:	4620      	mov	r0, r4
    6ef4:	4790      	blx	r2
    6ef6:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
		if (!chan->_sdu) {
    6efa:	2800      	cmp	r0, #0
    6efc:	d0e2      	beq.n	6ec4 <bt_l2cap_recv+0x4a>
		chan->_sdu_len = sdu_len;
    6efe:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98
    6f02:	e7e6      	b.n	6ed2 <bt_l2cap_recv+0x58>
	chan->chan.ops->recv(&chan->chan, buf);
    6f04:	4620      	mov	r0, r4
    6f06:	691b      	ldr	r3, [r3, #16]
    6f08:	4629      	mov	r1, r5
    6f0a:	4798      	blx	r3
	l2cap_chan_update_credits(chan, buf);
    6f0c:	4620      	mov	r0, r4
    6f0e:	f7ff fe09 	bl	6b24 <l2cap_chan_update_credits.isra.9>
    6f12:	e7b8      	b.n	6e86 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
    6f14:	6843      	ldr	r3, [r0, #4]
    6f16:	4629      	mov	r1, r5
    6f18:	691b      	ldr	r3, [r3, #16]
    6f1a:	4798      	blx	r3
    6f1c:	e7b3      	b.n	6e86 <bt_l2cap_recv+0xc>
	...

00006f20 <l2cap_recv>:
{
    6f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*hdr)) {
    6f24:	898b      	ldrh	r3, [r1, #12]
    6f26:	2b03      	cmp	r3, #3
{
    6f28:	b087      	sub	sp, #28
    6f2a:	4606      	mov	r6, r0
    6f2c:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    6f2e:	d970      	bls.n	7012 <l2cap_recv+0xf2>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    6f30:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    6f32:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    6f34:	f850 8f08 	ldr.w	r8, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    6f38:	f8b8 7002 	ldrh.w	r7, [r8, #2]
	net_buf_pull(buf, sizeof(*hdr));
    6f3c:	f010 fe96 	bl	17c6c <net_buf_simple_pull>
	if (buf->len != len) {
    6f40:	89ab      	ldrh	r3, [r5, #12]
    6f42:	42bb      	cmp	r3, r7
    6f44:	d165      	bne.n	7012 <l2cap_recv+0xf2>
	if (!hdr->ident) {
    6f46:	f898 4001 	ldrb.w	r4, [r8, #1]
    6f4a:	2c00      	cmp	r4, #0
    6f4c:	d061      	beq.n	7012 <l2cap_recv+0xf2>
	switch (hdr->code) {
    6f4e:	f898 3000 	ldrb.w	r3, [r8]
    6f52:	3b01      	subs	r3, #1
    6f54:	2b15      	cmp	r3, #21
    6f56:	f200 81e9 	bhi.w	732c <l2cap_recv+0x40c>
    6f5a:	e8df f013 	tbh	[pc, r3, lsl #1]
    6f5e:	01e1      	.short	0x01e1
    6f60:	01e701e7 	.word	0x01e701e7
    6f64:	01e701e7 	.word	0x01e701e7
    6f68:	019a0164 	.word	0x019a0164
    6f6c:	01e701e7 	.word	0x01e701e7
    6f70:	01e701e7 	.word	0x01e701e7
    6f74:	01e701e7 	.word	0x01e701e7
    6f78:	01e701e7 	.word	0x01e701e7
    6f7c:	01e701e7 	.word	0x01e701e7
    6f80:	005a0016 	.word	0x005a0016
    6f84:	00f60061 	.word	0x00f60061
    6f88:	01a5      	.short	0x01a5
	if (buf->len < sizeof(*req)) {
    6f8a:	2f07      	cmp	r7, #7
    6f8c:	d941      	bls.n	7012 <l2cap_recv+0xf2>
    6f8e:	6836      	ldr	r6, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    6f90:	78f7      	ldrb	r7, [r6, #3]
    6f92:	b13f      	cbz	r7, 6fa4 <l2cap_recv+0x84>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    6f94:	2300      	movs	r3, #0
    6f96:	9300      	str	r3, [sp, #0]
    6f98:	461a      	mov	r2, r3
    6f9a:	4621      	mov	r1, r4
    6f9c:	4630      	mov	r0, r6
		l2cap_send_reject(chan->conn, hdr->ident,
    6f9e:	f7ff fcdd 	bl	695c <l2cap_send_reject>
		break;
    6fa2:	e036      	b.n	7012 <l2cap_recv+0xf2>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    6fa4:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    6fa6:	7859      	ldrb	r1, [r3, #1]
    6fa8:	781a      	ldrb	r2, [r3, #0]
    6faa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6fae:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    6fb2:	78d9      	ldrb	r1, [r3, #3]
    6fb4:	789a      	ldrb	r2, [r3, #2]
    6fb6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6fba:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(req->latency);
    6fbe:	7959      	ldrb	r1, [r3, #5]
    6fc0:	791a      	ldrb	r2, [r3, #4]
    6fc2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6fc6:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(req->timeout);
    6fca:	799a      	ldrb	r2, [r3, #6]
    6fcc:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    6fce:	4621      	mov	r1, r4
	param.timeout = sys_le16_to_cpu(req->timeout);
    6fd0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    6fd4:	2013      	movs	r0, #19
    6fd6:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    6fd8:	f8ad 3016 	strh.w	r3, [sp, #22]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    6fdc:	f7ff fbe5 	bl	67aa <l2cap_create_le_sig_pdu.isra.6>
	accepted = le_param_req(conn, &param);
    6fe0:	a904      	add	r1, sp, #16
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    6fe2:	4605      	mov	r5, r0
	accepted = le_param_req(conn, &param);
    6fe4:	4630      	mov	r0, r6
    6fe6:	f7fe fcdf 	bl	59a8 <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    6fea:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    6fec:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    6fee:	f105 0008 	add.w	r0, r5, #8
    6ff2:	f010 fdeb 	bl	17bcc <net_buf_simple_add>
	if (accepted) {
    6ff6:	b17c      	cbz	r4, 7018 <l2cap_recv+0xf8>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    6ff8:	7007      	strb	r7, [r0, #0]
    6ffa:	7047      	strb	r7, [r0, #1]
    6ffc:	2300      	movs	r3, #0
    6ffe:	462a      	mov	r2, r5
    7000:	2105      	movs	r1, #5
    7002:	4630      	mov	r0, r6
    7004:	f7ff fc43 	bl	688e <bt_l2cap_send_cb>
	if (accepted) {
    7008:	b11c      	cbz	r4, 7012 <l2cap_recv+0xf2>
		bt_conn_le_conn_update(conn, &param);
    700a:	a904      	add	r1, sp, #16
    700c:	4630      	mov	r0, r6
    700e:	f7ff f98d 	bl	632c <bt_conn_le_conn_update>
}
    7012:	b007      	add	sp, #28
    7014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    7018:	2301      	movs	r3, #1
    701a:	7003      	strb	r3, [r0, #0]
    701c:	7044      	strb	r4, [r0, #1]
    701e:	e7ed      	b.n	6ffc <l2cap_recv+0xdc>
	if (buf->len < sizeof(*req)) {
    7020:	2f09      	cmp	r7, #9
    7022:	d9f6      	bls.n	7012 <l2cap_recv+0xf2>
	struct bt_l2cap_le_conn_req *req = (void *)buf->data;
    7024:	68aa      	ldr	r2, [r5, #8]
	mtu = sys_le16_to_cpu(req->mtu);
    7026:	f8b2 9004 	ldrh.w	r9, [r2, #4]
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    702a:	f1b9 0f16 	cmp.w	r9, #22
    702e:	d9f0      	bls.n	7012 <l2cap_recv+0xf2>
	mps = sys_le16_to_cpu(req->mps);
    7030:	f8b2 a006 	ldrh.w	sl, [r2, #6]
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    7034:	f1ba 0f16 	cmp.w	sl, #22
    7038:	d9eb      	bls.n	7012 <l2cap_recv+0xf2>
	credits = sys_le16_to_cpu(req->credits);
    703a:	8913      	ldrh	r3, [r2, #8]
	scid = sys_le16_to_cpu(req->scid);
    703c:	f8b2 b002 	ldrh.w	fp, [r2, #2]
    7040:	6835      	ldr	r5, [r6, #0]
	psm = sys_le16_to_cpu(req->psm);
    7042:	8816      	ldrh	r6, [r2, #0]
	credits = sys_le16_to_cpu(req->credits);
    7044:	9303      	str	r3, [sp, #12]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    7046:	220a      	movs	r2, #10
    7048:	4621      	mov	r1, r4
    704a:	2015      	movs	r0, #21
	credits = sys_le16_to_cpu(req->credits);
    704c:	461f      	mov	r7, r3
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    704e:	f7ff fbac 	bl	67aa <l2cap_create_le_sig_pdu.isra.6>
	rsp = net_buf_add(buf, sizeof(*rsp));
    7052:	210a      	movs	r1, #10
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    7054:	9002      	str	r0, [sp, #8]
	rsp = net_buf_add(buf, sizeof(*rsp));
    7056:	3008      	adds	r0, #8
    7058:	f010 fdb8 	bl	17bcc <net_buf_simple_add>
	memset(rsp, 0, sizeof(*rsp));
    705c:	220a      	movs	r2, #10
    705e:	2100      	movs	r1, #0
	rsp = net_buf_add(buf, sizeof(*rsp));
    7060:	4604      	mov	r4, r0
	memset(rsp, 0, sizeof(*rsp));
    7062:	f7f9 fc6e 	bl	942 <memset>
	server = l2cap_server_lookup_psm(psm);
    7066:	4630      	mov	r0, r6
    7068:	f7ff fb0c 	bl	6684 <l2cap_server_lookup_psm>
	if (!server) {
    706c:	4606      	mov	r6, r0
    706e:	b940      	cbnz	r0, 7082 <l2cap_recv+0x162>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_PSM_NOT_SUPP);
    7070:	2302      	movs	r3, #2
    7072:	9a02      	ldr	r2, [sp, #8]
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    7074:	8123      	strh	r3, [r4, #8]
    7076:	2105      	movs	r1, #5
    7078:	2300      	movs	r3, #0
    707a:	4628      	mov	r0, r5
    707c:	f7ff fc07 	bl	688e <bt_l2cap_send_cb>
    7080:	e7c7      	b.n	7012 <l2cap_recv+0xf2>
	if (conn->sec_level < server->sec_level) {
    7082:	7a29      	ldrb	r1, [r5, #8]
    7084:	7882      	ldrb	r2, [r0, #2]
    7086:	4291      	cmp	r1, r2
    7088:	d201      	bcs.n	708e <l2cap_recv+0x16e>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_AUTHENTICATION);
    708a:	2305      	movs	r3, #5
    708c:	e7f1      	b.n	7072 <l2cap_recv+0x152>
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    708e:	f1ab 0240 	sub.w	r2, fp, #64	; 0x40
    7092:	2a3f      	cmp	r2, #63	; 0x3f
    7094:	d901      	bls.n	709a <l2cap_recv+0x17a>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_INVALID_SCID);
    7096:	2309      	movs	r3, #9
    7098:	e7eb      	b.n	7072 <l2cap_recv+0x152>
	chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    709a:	4659      	mov	r1, fp
    709c:	4628      	mov	r0, r5
    709e:	f7ff fd70 	bl	6b82 <bt_l2cap_le_lookup_tx_cid>
    70a2:	9004      	str	r0, [sp, #16]
	if (chan) {
    70a4:	b108      	cbz	r0, 70aa <l2cap_recv+0x18a>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_SCID_IN_USE);
    70a6:	230a      	movs	r3, #10
    70a8:	e7e3      	b.n	7072 <l2cap_recv+0x152>
	if (server->accept(conn, &chan) < 0) {
    70aa:	6873      	ldr	r3, [r6, #4]
    70ac:	a904      	add	r1, sp, #16
    70ae:	4628      	mov	r0, r5
    70b0:	4798      	blx	r3
    70b2:	2800      	cmp	r0, #0
    70b4:	da01      	bge.n	70ba <l2cap_recv+0x19a>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    70b6:	2304      	movs	r3, #4
    70b8:	e7db      	b.n	7072 <l2cap_recv+0x152>
	chan->required_sec_level = server->sec_level;
    70ba:	9904      	ldr	r1, [sp, #16]
    70bc:	78b3      	ldrb	r3, [r6, #2]
    70be:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
	if (l2cap_chan_add(conn, chan, l2cap_chan_destroy)) {
    70c2:	4a9d      	ldr	r2, [pc, #628]	; (7338 <l2cap_recv+0x418>)
    70c4:	4628      	mov	r0, r5
    70c6:	f7ff fd7d 	bl	6bc4 <l2cap_chan_add>
    70ca:	2800      	cmp	r0, #0
    70cc:	d0f3      	beq.n	70b6 <l2cap_recv+0x196>
		struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);
    70ce:	f8dd 8010 	ldr.w	r8, [sp, #16]
		l2cap_chan_tx_init(ch);
    70d2:	4640      	mov	r0, r8
    70d4:	f7ff fb32 	bl	673c <l2cap_chan_tx_init>
		ch->tx.init_credits = credits;
    70d8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
		ch->tx.mtu = mtu;
    70dc:	f8a8 9062 	strh.w	r9, [r8, #98]	; 0x62
		ch->tx.cid = scid;
    70e0:	f8a8 b060 	strh.w	fp, [r8, #96]	; 0x60
		ch->tx.mps = mps;
    70e4:	f8a8 a064 	strh.w	sl, [r8, #100]	; 0x64
		ch->tx.init_credits = credits;
    70e8:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
		k_sem_give(&chan->tx.credits);
    70ec:	f108 0968 	add.w	r9, r8, #104	; 0x68
	while (credits--) {
    70f0:	b9ff      	cbnz	r7, 7132 <l2cap_recv+0x212>
		l2cap_chan_rx_init(ch);
    70f2:	4640      	mov	r0, r8
    70f4:	f7ff fb36 	bl	6764 <l2cap_chan_rx_init>
		l2cap_chan_rx_give_credits(ch, ch->rx.init_credits);
    70f8:	f8b8 7046 	ldrh.w	r7, [r8, #70]	; 0x46
		k_sem_give(&chan->rx.credits);
    70fc:	f108 0948 	add.w	r9, r8, #72	; 0x48
	while (credits--) {
    7100:	b9ef      	cbnz	r7, 713e <l2cap_recv+0x21e>
		chan->psm = server->psm;
    7102:	9804      	ldr	r0, [sp, #16]
    7104:	8832      	ldrh	r2, [r6, #0]
    7106:	8742      	strh	r2, [r0, #58]	; 0x3a
	chan->state = state;
    7108:	2203      	movs	r2, #3
    710a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
		if (chan->ops->connected) {
    710e:	6842      	ldr	r2, [r0, #4]
    7110:	6812      	ldr	r2, [r2, #0]
    7112:	b102      	cbz	r2, 7116 <l2cap_recv+0x1f6>
			chan->ops->connected(chan);
    7114:	4790      	blx	r2
		rsp->dcid = sys_cpu_to_le16(ch->rx.cid);
    7116:	f8b8 2040 	ldrh.w	r2, [r8, #64]	; 0x40
    711a:	8022      	strh	r2, [r4, #0]
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    711c:	f8b8 2044 	ldrh.w	r2, [r8, #68]	; 0x44
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    7120:	f8b8 3046 	ldrh.w	r3, [r8, #70]	; 0x46
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    7124:	80a2      	strh	r2, [r4, #4]
		rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    7126:	f8b8 2042 	ldrh.w	r2, [r8, #66]	; 0x42
    712a:	8062      	strh	r2, [r4, #2]
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    712c:	80e3      	strh	r3, [r4, #6]
		rsp->result = BT_L2CAP_SUCCESS;
    712e:	2300      	movs	r3, #0
    7130:	e79f      	b.n	7072 <l2cap_recv+0x152>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    7132:	4648      	mov	r0, r9
    7134:	3f01      	subs	r7, #1
    7136:	f018 fb89 	bl	1f84c <_impl_k_sem_give>
    713a:	b2bf      	uxth	r7, r7
    713c:	e7d8      	b.n	70f0 <l2cap_recv+0x1d0>
    713e:	4648      	mov	r0, r9
    7140:	3f01      	subs	r7, #1
    7142:	f018 fb83 	bl	1f84c <_impl_k_sem_give>
    7146:	b2bf      	uxth	r7, r7
    7148:	e7da      	b.n	7100 <l2cap_recv+0x1e0>
	if (buf->len < sizeof(*rsp)) {
    714a:	2f09      	cmp	r7, #9
    714c:	f67f af61 	bls.w	7012 <l2cap_recv+0xf2>
	struct bt_l2cap_le_conn_rsp *rsp = (void *)buf->data;
    7150:	68ab      	ldr	r3, [r5, #8]
    7152:	6837      	ldr	r7, [r6, #0]
	result = sys_le16_to_cpu(rsp->result);
    7154:	891e      	ldrh	r6, [r3, #8]
	dcid = sys_le16_to_cpu(rsp->dcid);
    7156:	f8b3 a000 	ldrh.w	sl, [r3]
	mtu = sys_le16_to_cpu(rsp->mtu);
    715a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
	mps = sys_le16_to_cpu(rsp->mps);
    715e:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	credits = sys_le16_to_cpu(rsp->credits);
    7162:	88dd      	ldrh	r5, [r3, #6]
	if (result == BT_L2CAP_SUCCESS ||
    7164:	f026 0308 	bic.w	r3, r6, #8
    7168:	b2a1      	uxth	r1, r4
    716a:	b10b      	cbz	r3, 7170 <l2cap_recv+0x250>
    716c:	2e05      	cmp	r6, #5
    716e:	d12f      	bne.n	71d0 <l2cap_recv+0x2b0>
		chan = l2cap_lookup_ident(conn, ident);
    7170:	2200      	movs	r2, #0
		chan = l2cap_remove_ident(conn, ident);
    7172:	4638      	mov	r0, r7
    7174:	f7ff fa6a 	bl	664c <__l2cap_lookup_ident>
    7178:	4604      	mov	r4, r0
	if (!chan) {
    717a:	2800      	cmp	r0, #0
    717c:	f43f af49 	beq.w	7012 <l2cap_recv+0xf2>
	k_delayed_work_cancel(&chan->chan.rtx_work);
    7180:	3010      	adds	r0, #16
    7182:	f018 fead 	bl	1fee0 <k_delayed_work_cancel>
	chan->chan.ident = 0;
    7186:	2300      	movs	r3, #0
	switch (result) {
    7188:	2e05      	cmp	r6, #5
	chan->chan.ident = 0;
    718a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	switch (result) {
    718e:	d03e      	beq.n	720e <l2cap_recv+0x2ee>
    7190:	2e08      	cmp	r6, #8
    7192:	d025      	beq.n	71e0 <l2cap_recv+0x2c0>
    7194:	bbbe      	cbnz	r6, 7206 <l2cap_recv+0x2e6>
	chan->state = state;
    7196:	2303      	movs	r3, #3
    7198:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (chan->chan.ops->connected) {
    719c:	6863      	ldr	r3, [r4, #4]
		chan->tx.cid = dcid;
    719e:	f8a4 a060 	strh.w	sl, [r4, #96]	; 0x60
		if (chan->chan.ops->connected) {
    71a2:	681b      	ldr	r3, [r3, #0]
		chan->tx.mtu = mtu;
    71a4:	f8a4 9062 	strh.w	r9, [r4, #98]	; 0x62
		chan->tx.mps = mps;
    71a8:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
		if (chan->chan.ops->connected) {
    71ac:	b10b      	cbz	r3, 71b2 <l2cap_recv+0x292>
			chan->chan.ops->connected(&chan->chan);
    71ae:	4620      	mov	r0, r4
    71b0:	4798      	blx	r3
		k_sem_give(&chan->tx.credits);
    71b2:	f104 0668 	add.w	r6, r4, #104	; 0x68
	while (credits--) {
    71b6:	b96d      	cbnz	r5, 71d4 <l2cap_recv+0x2b4>
		l2cap_chan_rx_give_credits(chan, chan->rx.init_credits);
    71b8:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
		k_sem_give(&chan->rx.credits);
    71bc:	3448      	adds	r4, #72	; 0x48
	while (credits--) {
    71be:	2d00      	cmp	r5, #0
    71c0:	f43f af27 	beq.w	7012 <l2cap_recv+0xf2>
    71c4:	4620      	mov	r0, r4
    71c6:	3d01      	subs	r5, #1
    71c8:	f018 fb40 	bl	1f84c <_impl_k_sem_give>
    71cc:	b2ad      	uxth	r5, r5
    71ce:	e7f6      	b.n	71be <l2cap_recv+0x29e>
		chan = l2cap_remove_ident(conn, ident);
    71d0:	2201      	movs	r2, #1
    71d2:	e7ce      	b.n	7172 <l2cap_recv+0x252>
    71d4:	4630      	mov	r0, r6
    71d6:	3d01      	subs	r5, #1
    71d8:	f018 fb38 	bl	1f84c <_impl_k_sem_give>
    71dc:	b2ad      	uxth	r5, r5
    71de:	e7ea      	b.n	71b6 <l2cap_recv+0x296>
		if (chan->chan.required_sec_level >= BT_SECURITY_MEDIUM) {
    71e0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    71e4:	2b01      	cmp	r3, #1
    71e6:	d80a      	bhi.n	71fe <l2cap_recv+0x2de>
			chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    71e8:	2302      	movs	r3, #2
			chan->chan.required_sec_level = BT_SECURITY_FIPS;
    71ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	return bt_conn_security(chan->chan.conn, chan->chan.required_sec_level);
    71ee:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    71f2:	6820      	ldr	r0, [r4, #0]
    71f4:	f7fe fc5c 	bl	5ab0 <bt_conn_security>
		if (l2cap_change_security(chan, result) == 0) {
    71f8:	2800      	cmp	r0, #0
    71fa:	f43f af0a 	beq.w	7012 <l2cap_recv+0xf2>
		bt_l2cap_chan_remove(conn, &chan->chan);
    71fe:	4621      	mov	r1, r4
    7200:	4638      	mov	r0, r7
    7202:	f7ff faed 	bl	67e0 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(&chan->chan);
    7206:	4620      	mov	r0, r4
	bt_l2cap_chan_del(&chan->chan);
    7208:	f7ff fb03 	bl	6812 <bt_l2cap_chan_del>
    720c:	e701      	b.n	7012 <l2cap_recv+0xf2>
		if (chan->chan.required_sec_level < BT_SECURITY_MEDIUM) {
    720e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    7212:	2b01      	cmp	r3, #1
    7214:	d9e8      	bls.n	71e8 <l2cap_recv+0x2c8>
		} else if (chan->chan.required_sec_level < BT_SECURITY_HIGH) {
    7216:	2b02      	cmp	r3, #2
    7218:	d101      	bne.n	721e <l2cap_recv+0x2fe>
			chan->chan.required_sec_level = BT_SECURITY_HIGH;
    721a:	2303      	movs	r3, #3
    721c:	e7e5      	b.n	71ea <l2cap_recv+0x2ca>
		} else if (chan->chan.required_sec_level < BT_SECURITY_FIPS) {
    721e:	2b03      	cmp	r3, #3
    7220:	d1ed      	bne.n	71fe <l2cap_recv+0x2de>
			chan->chan.required_sec_level = BT_SECURITY_FIPS;
    7222:	2304      	movs	r3, #4
    7224:	e7e1      	b.n	71ea <l2cap_recv+0x2ca>
	if (buf->len < sizeof(*req)) {
    7226:	2f03      	cmp	r7, #3
    7228:	f67f aef3 	bls.w	7012 <l2cap_recv+0xf2>
    722c:	6837      	ldr	r7, [r6, #0]
	struct bt_l2cap_disconn_req *req = (void *)buf->data;
    722e:	68ad      	ldr	r5, [r5, #8]
	chan = l2cap_remove_tx_cid(conn, scid);
    7230:	4638      	mov	r0, r7
    7232:	8869      	ldrh	r1, [r5, #2]
    7234:	f7ff fa3a 	bl	66ac <l2cap_remove_tx_cid>
	if (!chan) {
    7238:	4606      	mov	r6, r0
    723a:	b990      	cbnz	r0, 7262 <l2cap_recv+0x342>
		data.scid = req->scid;
    723c:	78ea      	ldrb	r2, [r5, #3]
    723e:	78ab      	ldrb	r3, [r5, #2]
    7240:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7244:	f8ad 3010 	strh.w	r3, [sp, #16]
		data.dcid = req->dcid;
    7248:	786a      	ldrb	r2, [r5, #1]
    724a:	782b      	ldrb	r3, [r5, #0]
    724c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7250:	f8ad 3012 	strh.w	r3, [sp, #18]
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_INVALID_CID, &data,
    7254:	2304      	movs	r3, #4
    7256:	9300      	str	r3, [sp, #0]
    7258:	2202      	movs	r2, #2
    725a:	ab04      	add	r3, sp, #16
    725c:	4621      	mov	r1, r4
    725e:	4638      	mov	r0, r7
    7260:	e69d      	b.n	6f9e <l2cap_recv+0x7e>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    7262:	2204      	movs	r2, #4
    7264:	4621      	mov	r1, r4
    7266:	2007      	movs	r0, #7
    7268:	f7ff fa9f 	bl	67aa <l2cap_create_le_sig_pdu.isra.6>
	rsp = net_buf_add(buf, sizeof(*rsp));
    726c:	2104      	movs	r1, #4
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    726e:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    7270:	3008      	adds	r0, #8
    7272:	f010 fcab 	bl	17bcc <net_buf_simple_add>
	rsp->dcid = sys_cpu_to_le16(chan->rx.cid);
    7276:	f8b6 3040 	ldrh.w	r3, [r6, #64]	; 0x40
    727a:	8003      	strh	r3, [r0, #0]
	rsp->scid = sys_cpu_to_le16(chan->tx.cid);
    727c:	f8b6 3060 	ldrh.w	r3, [r6, #96]	; 0x60
    7280:	8043      	strh	r3, [r0, #2]
	bt_l2cap_chan_del(&chan->chan);
    7282:	4630      	mov	r0, r6
    7284:	f7ff fac5 	bl	6812 <bt_l2cap_chan_del>
    7288:	2300      	movs	r3, #0
    728a:	4622      	mov	r2, r4
    728c:	2105      	movs	r1, #5
    728e:	4638      	mov	r0, r7
    7290:	e6f4      	b.n	707c <l2cap_recv+0x15c>
	if (buf->len < sizeof(*rsp)) {
    7292:	2f03      	cmp	r7, #3
    7294:	f67f aebd 	bls.w	7012 <l2cap_recv+0xf2>
	dcid = sys_le16_to_cpu(rsp->dcid);
    7298:	68ab      	ldr	r3, [r5, #8]
	chan = l2cap_remove_tx_cid(conn, dcid);
    729a:	6830      	ldr	r0, [r6, #0]
    729c:	8819      	ldrh	r1, [r3, #0]
    729e:	f7ff fa05 	bl	66ac <l2cap_remove_tx_cid>
	if (!chan) {
    72a2:	2800      	cmp	r0, #0
    72a4:	d1b0      	bne.n	7208 <l2cap_recv+0x2e8>
    72a6:	e6b4      	b.n	7012 <l2cap_recv+0xf2>
	if (buf->len < sizeof(*ev)) {
    72a8:	2f03      	cmp	r7, #3
    72aa:	f67f aeb2 	bls.w	7012 <l2cap_recv+0xf2>
	struct bt_l2cap_le_credits *ev = (void *)buf->data;
    72ae:	68ab      	ldr	r3, [r5, #8]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    72b0:	6830      	ldr	r0, [r6, #0]
    72b2:	8819      	ldrh	r1, [r3, #0]
	credits = sys_le16_to_cpu(ev->credits);
    72b4:	885c      	ldrh	r4, [r3, #2]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    72b6:	f7ff fc64 	bl	6b82 <bt_l2cap_le_lookup_tx_cid>
	if (!chan) {
    72ba:	4605      	mov	r5, r0
    72bc:	2800      	cmp	r0, #0
    72be:	f43f aea8 	beq.w	7012 <l2cap_recv+0xf2>
	if (k_sem_count_get(&ch->tx.credits) + credits > UINT16_MAX) {
    72c2:	6f03      	ldr	r3, [r0, #112]	; 0x70
    72c4:	4423      	add	r3, r4
    72c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    72ca:	d21b      	bcs.n	7304 <l2cap_recv+0x3e4>
		k_sem_give(&chan->tx.credits);
    72cc:	f100 0668 	add.w	r6, r0, #104	; 0x68
	while (credits--) {
    72d0:	b9dc      	cbnz	r4, 730a <l2cap_recv+0x3ea>
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
    72d2:	f105 0680 	add.w	r6, r5, #128	; 0x80
	if (ch->tx_buf) {
    72d6:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
    72da:	b1e1      	cbz	r1, 7316 <l2cap_recv+0x3f6>
		ch->tx_buf = NULL;
    72dc:	f8c5 4090 	str.w	r4, [r5, #144]	; 0x90
	while ((buf = l2cap_chan_le_get_tx_buf(ch))) {
    72e0:	9104      	str	r1, [sp, #16]
    72e2:	2900      	cmp	r1, #0
    72e4:	f43f ae95 	beq.w	7012 <l2cap_recv+0xf2>
		sent = l2cap_chan_le_send_sdu(ch, &buf, sent);
    72e8:	694a      	ldr	r2, [r1, #20]
    72ea:	4628      	mov	r0, r5
    72ec:	a904      	add	r1, sp, #16
    72ee:	f7ff fbcf 	bl	6a90 <l2cap_chan_le_send_sdu>
		if (sent < 0) {
    72f2:	2800      	cmp	r0, #0
    72f4:	daef      	bge.n	72d6 <l2cap_recv+0x3b6>
			if (sent == -EAGAIN) {
    72f6:	300b      	adds	r0, #11
    72f8:	f47f ae8b 	bne.w	7012 <l2cap_recv+0xf2>
				ch->tx_buf = buf;
    72fc:	9b04      	ldr	r3, [sp, #16]
    72fe:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
    7302:	e686      	b.n	7012 <l2cap_recv+0xf2>
		bt_l2cap_chan_disconnect(chan);
    7304:	f7ff fd2c 	bl	6d60 <bt_l2cap_chan_disconnect>
    7308:	e683      	b.n	7012 <l2cap_recv+0xf2>
    730a:	4630      	mov	r0, r6
    730c:	3c01      	subs	r4, #1
    730e:	f018 fa9d 	bl	1f84c <_impl_k_sem_give>
    7312:	b2a4      	uxth	r4, r4
    7314:	e7dc      	b.n	72d0 <l2cap_recv+0x3b0>
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
    7316:	4630      	mov	r0, r6
    7318:	f010 fbd0 	bl	17abc <net_buf_get>
    731c:	4601      	mov	r1, r0
    731e:	e7df      	b.n	72e0 <l2cap_recv+0x3c0>
	chan = l2cap_remove_ident(conn, ident);
    7320:	2201      	movs	r2, #1
    7322:	4621      	mov	r1, r4
    7324:	6830      	ldr	r0, [r6, #0]
    7326:	f7ff f991 	bl	664c <__l2cap_lookup_ident>
    732a:	e7ba      	b.n	72a2 <l2cap_recv+0x382>
		l2cap_send_reject(chan->conn, hdr->ident,
    732c:	2300      	movs	r3, #0
    732e:	9300      	str	r3, [sp, #0]
    7330:	461a      	mov	r2, r3
    7332:	4621      	mov	r1, r4
    7334:	6830      	ldr	r0, [r6, #0]
    7336:	e632      	b.n	6f9e <l2cap_recv+0x7e>
    7338:	00006709 	.word	0x00006709

0000733c <bt_l2cap_chan_send>:

int bt_l2cap_chan_send(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    733c:	b513      	push	{r0, r1, r4, lr}
    733e:	4604      	mov	r4, r0
    7340:	9101      	str	r1, [sp, #4]
	int err;

	if (!buf) {
    7342:	b1a1      	cbz	r1, 736e <bt_l2cap_chan_send+0x32>
		return -EINVAL;
	}

	BT_DBG("chan %p buf %p len %zu", chan, buf, net_buf_frags_len(buf));

	if (!chan->conn || chan->conn->state != BT_CONN_CONNECTED) {
    7344:	6803      	ldr	r3, [r0, #0]
    7346:	b1ab      	cbz	r3, 7374 <bt_l2cap_chan_send+0x38>
    7348:	7b1b      	ldrb	r3, [r3, #12]
    734a:	2b03      	cmp	r3, #3
    734c:	d112      	bne.n	7374 <bt_l2cap_chan_send+0x38>
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    chan->conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_send(chan, buf);
	}

	err = l2cap_chan_le_send_sdu(BT_L2CAP_LE_CHAN(chan), &buf, 0);
    734e:	2200      	movs	r2, #0
    7350:	a901      	add	r1, sp, #4
    7352:	f7ff fb9d 	bl	6a90 <l2cap_chan_le_send_sdu>
	if (err < 0) {
		if (err == -EAGAIN) {
    7356:	f110 0f0b 	cmn.w	r0, #11
    735a:	d106      	bne.n	736a <bt_l2cap_chan_send+0x2e>
			/* Queue buffer to be sent later */
			net_buf_put(&(BT_L2CAP_LE_CHAN(chan))->tx_queue, buf);
    735c:	f104 0080 	add.w	r0, r4, #128	; 0x80
    7360:	9901      	ldr	r1, [sp, #4]
    7362:	f010 fbc8 	bl	17af6 <net_buf_put>
			return *((int *)net_buf_user_data(buf));
    7366:	9b01      	ldr	r3, [sp, #4]
    7368:	6958      	ldr	r0, [r3, #20]
		}
		BT_ERR("failed to send message %d", err);
	}

	return err;
}
    736a:	b002      	add	sp, #8
    736c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    736e:	f06f 0015 	mvn.w	r0, #21
    7372:	e7fa      	b.n	736a <bt_l2cap_chan_send+0x2e>
		return -ENOTCONN;
    7374:	f06f 0038 	mvn.w	r0, #56	; 0x38
    7378:	e7f7      	b.n	736a <bt_l2cap_chan_send+0x2e>

0000737a <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    737a:	2006      	movs	r0, #6
    737c:	4770      	bx	lr
	...

00007380 <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    7380:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    7382:	4a0a      	ldr	r2, [pc, #40]	; (73ac <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    7384:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    7386:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    738a:	4284      	cmp	r4, r0
    738c:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    7390:	d102      	bne.n	7398 <att_op_get_type+0x18>
			return handlers[i].type;
    7392:	440a      	add	r2, r1
    7394:	7890      	ldrb	r0, [r2, #2]
    7396:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    7398:	3301      	adds	r3, #1
    739a:	2b1b      	cmp	r3, #27
    739c:	d1f3      	bne.n	7386 <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    739e:	f010 0f40 	tst.w	r0, #64	; 0x40
    73a2:	bf14      	ite	ne
    73a4:	2000      	movne	r0, #0
    73a6:	2006      	moveq	r0, #6
}
    73a8:	bd10      	pop	{r4, pc}
    73aa:	bf00      	nop
    73ac:	00021090 	.word	0x00021090

000073b0 <att_req_destroy>:
{
    73b0:	b510      	push	{r4, lr}
    73b2:	4604      	mov	r4, r0
	if (req->buf) {
    73b4:	6900      	ldr	r0, [r0, #16]
    73b6:	b108      	cbz	r0, 73bc <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    73b8:	f010 fbaa 	bl	17b10 <net_buf_unref>
	if (req->destroy) {
    73bc:	68a3      	ldr	r3, [r4, #8]
    73be:	b10b      	cbz	r3, 73c4 <att_req_destroy+0x14>
		req->destroy(req);
    73c0:	4620      	mov	r0, r4
    73c2:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    73c4:	4620      	mov	r0, r4
    73c6:	2218      	movs	r2, #24
    73c8:	2100      	movs	r1, #0
}
    73ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
    73ce:	f7f9 bab8 	b.w	942 <memset>

000073d2 <att_notify>:
{
    73d2:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    73d4:	f101 0008 	add.w	r0, r1, #8
    73d8:	f010 fc58 	bl	17c8c <net_buf_simple_pull_le16>
}
    73dc:	2000      	movs	r0, #0
    73de:	bd08      	pop	{r3, pc}

000073e0 <read_group_cb>:
{
    73e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    73e4:	680d      	ldr	r5, [r1, #0]
{
    73e6:	4606      	mov	r6, r0
    73e8:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    73ea:	f04f 0800 	mov.w	r8, #0
    73ee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    73f2:	a902      	add	r1, sp, #8
    73f4:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    73f6:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    73f8:	f88d 8008 	strb.w	r8, [sp, #8]
    73fc:	f8ad 300a 	strh.w	r3, [sp, #10]
    7400:	f7fc f8c0 	bl	3584 <bt_uuid_cmp>
    7404:	b198      	cbz	r0, 742e <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    7406:	f642 0301 	movw	r3, #10241	; 0x2801
    740a:	a903      	add	r1, sp, #12
    740c:	6830      	ldr	r0, [r6, #0]
    740e:	f88d 800c 	strb.w	r8, [sp, #12]
    7412:	f8ad 300e 	strh.w	r3, [sp, #14]
    7416:	f7fc f8b5 	bl	3584 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    741a:	b140      	cbz	r0, 742e <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    741c:	6923      	ldr	r3, [r4, #16]
    741e:	b123      	cbz	r3, 742a <read_group_cb+0x4a>
    7420:	8a32      	ldrh	r2, [r6, #16]
    7422:	8859      	ldrh	r1, [r3, #2]
    7424:	4291      	cmp	r1, r2
    7426:	d200      	bcs.n	742a <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    7428:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    742a:	2001      	movs	r0, #1
    742c:	e012      	b.n	7454 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    742e:	6861      	ldr	r1, [r4, #4]
    7430:	6830      	ldr	r0, [r6, #0]
    7432:	f7fc f8a7 	bl	3584 <bt_uuid_cmp>
    7436:	b110      	cbz	r0, 743e <read_group_cb+0x5e>
		data->group = NULL;
    7438:	2300      	movs	r3, #0
    743a:	6123      	str	r3, [r4, #16]
    743c:	e7f5      	b.n	742a <read_group_cb+0x4a>
	if (data->rsp->len &&
    743e:	68e3      	ldr	r3, [r4, #12]
    7440:	68a0      	ldr	r0, [r4, #8]
    7442:	781a      	ldrb	r2, [r3, #0]
    7444:	b14a      	cbz	r2, 745a <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    7446:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    744a:	8981      	ldrh	r1, [r0, #12]
    744c:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    744e:	4293      	cmp	r3, r2
    7450:	da03      	bge.n	745a <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    7452:	2000      	movs	r0, #0
}
    7454:	b004      	add	sp, #16
    7456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    745a:	2104      	movs	r1, #4
    745c:	3008      	adds	r0, #8
    745e:	f010 fbb5 	bl	17bcc <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    7462:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    7464:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    7466:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    7468:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    746a:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    746c:	898a      	ldrh	r2, [r1, #12]
    746e:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    7472:	6889      	ldr	r1, [r1, #8]
    7474:	f8d6 8004 	ldr.w	r8, [r6, #4]
    7478:	1a9b      	subs	r3, r3, r2
    747a:	2500      	movs	r5, #0
    747c:	440a      	add	r2, r1
    747e:	9500      	str	r5, [sp, #0]
    7480:	4631      	mov	r1, r6
    7482:	b29b      	uxth	r3, r3
    7484:	4638      	mov	r0, r7
    7486:	47c0      	blx	r8
	if (read < 0) {
    7488:	1e01      	subs	r1, r0, #0
    748a:	dbe2      	blt.n	7452 <read_group_cb+0x72>
	if (!data->rsp->len) {
    748c:	68e0      	ldr	r0, [r4, #12]
    748e:	7802      	ldrb	r2, [r0, #0]
    7490:	1d0b      	adds	r3, r1, #4
    7492:	b92a      	cbnz	r2, 74a0 <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
    7494:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    7496:	68a0      	ldr	r0, [r4, #8]
    7498:	3008      	adds	r0, #8
    749a:	f010 fb97 	bl	17bcc <net_buf_simple_add>
    749e:	e7c4      	b.n	742a <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    74a0:	429a      	cmp	r2, r3
    74a2:	d0f8      	beq.n	7496 <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
    74a4:	68a2      	ldr	r2, [r4, #8]
    74a6:	8993      	ldrh	r3, [r2, #12]
    74a8:	3b04      	subs	r3, #4
    74aa:	8193      	strh	r3, [r2, #12]
    74ac:	e7d1      	b.n	7452 <read_group_cb+0x72>

000074ae <find_info_cb>:
	if (!data->rsp) {
    74ae:	688b      	ldr	r3, [r1, #8]
{
    74b0:	b570      	push	{r4, r5, r6, lr}
    74b2:	4605      	mov	r5, r0
    74b4:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    74b6:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    74b8:	b963      	cbnz	r3, 74d4 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    74ba:	6848      	ldr	r0, [r1, #4]
    74bc:	2101      	movs	r1, #1
    74be:	3008      	adds	r0, #8
    74c0:	f010 fb84 	bl	17bcc <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    74c4:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    74c6:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    74c8:	781b      	ldrb	r3, [r3, #0]
    74ca:	2b00      	cmp	r3, #0
    74cc:	bf0c      	ite	eq
    74ce:	2301      	moveq	r3, #1
    74d0:	2302      	movne	r3, #2
    74d2:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    74d4:	68a3      	ldr	r3, [r4, #8]
    74d6:	781b      	ldrb	r3, [r3, #0]
    74d8:	2b01      	cmp	r3, #1
    74da:	d003      	beq.n	74e4 <find_info_cb+0x36>
    74dc:	2b02      	cmp	r3, #2
    74de:	d01a      	beq.n	7516 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    74e0:	2000      	movs	r0, #0
}
    74e2:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    74e4:	682b      	ldr	r3, [r5, #0]
    74e6:	781b      	ldrb	r3, [r3, #0]
    74e8:	2b00      	cmp	r3, #0
    74ea:	d1f9      	bne.n	74e0 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    74ec:	6860      	ldr	r0, [r4, #4]
    74ee:	2104      	movs	r1, #4
    74f0:	3008      	adds	r0, #8
    74f2:	f010 fb6b 	bl	17bcc <net_buf_simple_add>
    74f6:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    74f8:	8a2b      	ldrh	r3, [r5, #16]
    74fa:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    74fc:	682b      	ldr	r3, [r5, #0]
    74fe:	885b      	ldrh	r3, [r3, #2]
    7500:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    7502:	6863      	ldr	r3, [r4, #4]
    7504:	f8b6 0062 	ldrh.w	r0, [r6, #98]	; 0x62
    7508:	899b      	ldrh	r3, [r3, #12]
    750a:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    750c:	2804      	cmp	r0, #4
    750e:	bf94      	ite	ls
    7510:	2000      	movls	r0, #0
    7512:	2001      	movhi	r0, #1
    7514:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    7516:	682b      	ldr	r3, [r5, #0]
    7518:	781b      	ldrb	r3, [r3, #0]
    751a:	2b02      	cmp	r3, #2
    751c:	d1e0      	bne.n	74e0 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    751e:	6860      	ldr	r0, [r4, #4]
    7520:	2112      	movs	r1, #18
    7522:	3008      	adds	r0, #8
    7524:	f010 fb52 	bl	17bcc <net_buf_simple_add>
    7528:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    752a:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    752c:	8a2b      	ldrh	r3, [r5, #16]
    752e:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    7532:	2210      	movs	r2, #16
    7534:	3101      	adds	r1, #1
    7536:	f7f9 f9d8 	bl	8ea <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    753a:	6863      	ldr	r3, [r4, #4]
    753c:	f8b6 0062 	ldrh.w	r0, [r6, #98]	; 0x62
    7540:	899b      	ldrh	r3, [r3, #12]
    7542:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    7544:	2812      	cmp	r0, #18
    7546:	e7e2      	b.n	750e <find_info_cb+0x60>

00007548 <find_type_cb>:
{
    7548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    754c:	680e      	ldr	r6, [r1, #0]
{
    754e:	b088      	sub	sp, #32
    7550:	4605      	mov	r5, r0
    7552:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    7554:	2700      	movs	r7, #0
    7556:	f642 0301 	movw	r3, #10241	; 0x2801
    755a:	a902      	add	r1, sp, #8
    755c:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    755e:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    7562:	f88d 7008 	strb.w	r7, [sp, #8]
    7566:	f8ad 300a 	strh.w	r3, [sp, #10]
    756a:	f7fc f80b 	bl	3584 <bt_uuid_cmp>
    756e:	b928      	cbnz	r0, 757c <find_type_cb+0x34>
		data->group = NULL;
    7570:	2300      	movs	r3, #0
    7572:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    7574:	2001      	movs	r0, #1
}
    7576:	b008      	add	sp, #32
    7578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    757c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    7580:	a903      	add	r1, sp, #12
    7582:	6828      	ldr	r0, [r5, #0]
    7584:	f88d 700c 	strb.w	r7, [sp, #12]
    7588:	f8ad 300e 	strh.w	r3, [sp, #14]
    758c:	f7fb fffa 	bl	3584 <bt_uuid_cmp>
    7590:	b140      	cbz	r0, 75a4 <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    7592:	68a3      	ldr	r3, [r4, #8]
    7594:	2b00      	cmp	r3, #0
    7596:	d0ed      	beq.n	7574 <find_type_cb+0x2c>
    7598:	8a2a      	ldrh	r2, [r5, #16]
    759a:	8859      	ldrh	r1, [r3, #2]
    759c:	4291      	cmp	r1, r2
    759e:	d2e9      	bcs.n	7574 <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    75a0:	805a      	strh	r2, [r3, #2]
    75a2:	e7e7      	b.n	7574 <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    75a4:	6862      	ldr	r2, [r4, #4]
    75a6:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    75aa:	8992      	ldrh	r2, [r2, #12]
    75ac:	1a9b      	subs	r3, r3, r2
    75ae:	2b03      	cmp	r3, #3
    75b0:	d9e1      	bls.n	7576 <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    75b2:	2310      	movs	r3, #16
    75b4:	9000      	str	r0, [sp, #0]
    75b6:	eb0d 0203 	add.w	r2, sp, r3
    75ba:	686e      	ldr	r6, [r5, #4]
    75bc:	4629      	mov	r1, r5
    75be:	4640      	mov	r0, r8
    75c0:	47b0      	blx	r6
	if (read < 0) {
    75c2:	1e02      	subs	r2, r0, #0
    75c4:	dbd4      	blt.n	7570 <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    75c6:	7c23      	ldrb	r3, [r4, #16]
    75c8:	429a      	cmp	r2, r3
    75ca:	d1d1      	bne.n	7570 <find_type_cb+0x28>
    75cc:	a904      	add	r1, sp, #16
    75ce:	68e0      	ldr	r0, [r4, #12]
    75d0:	f7f9 f95e 	bl	890 <memcmp>
    75d4:	2800      	cmp	r0, #0
    75d6:	d1cb      	bne.n	7570 <find_type_cb+0x28>
	data->err = 0x00;
    75d8:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    75da:	6860      	ldr	r0, [r4, #4]
    75dc:	2104      	movs	r1, #4
    75de:	3008      	adds	r0, #8
    75e0:	f010 faf4 	bl	17bcc <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    75e4:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    75e6:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    75e8:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    75ea:	8043      	strh	r3, [r0, #2]
    75ec:	e7c2      	b.n	7574 <find_type_cb+0x2c>
	...

000075f0 <bt_att_connected>:
	bt_gatt_disconnected(ch->chan.conn);
	ch->chan.conn = NULL;
}

static void bt_att_connected(struct bt_l2cap_chan *chan)
{
    75f0:	b510      	push	{r4, lr}

#if CONFIG_BT_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    75f2:	2317      	movs	r3, #23
{
    75f4:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    75f6:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    75fa:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42

	k_delayed_work_init(&att->timeout_work, att_timeout);
    75fe:	4907      	ldr	r1, [pc, #28]	; (761c <bt_att_connected+0x2c>)
    7600:	30ac      	adds	r0, #172	; 0xac
    7602:	f018 fc4f 	bl	1fea4 <k_delayed_work_init>
	list->head = NULL;
    7606:	2300      	movs	r3, #0
    7608:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	list->tail = NULL;
    760c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	sys_slist_init(&att->reqs);

	bt_gatt_connected(ch->chan.conn);
    7610:	6820      	ldr	r0, [r4, #0]
}
    7612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    7616:	f001 bb1b 	b.w	8c50 <bt_gatt_connected>
    761a:	bf00      	nop
    761c:	00007acb 	.word	0x00007acb

00007620 <check_perm>:
{
    7620:	b510      	push	{r4, lr}
	if ((mask & BT_GATT_PERM_READ) &&
    7622:	f012 0f01 	tst.w	r2, #1
    7626:	7c8b      	ldrb	r3, [r1, #18]
    7628:	d004      	beq.n	7634 <check_perm+0x14>
    762a:	f013 0f15 	tst.w	r3, #21
    762e:	d018      	beq.n	7662 <check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    7630:	684c      	ldr	r4, [r1, #4]
    7632:	b1b4      	cbz	r4, 7662 <check_perm+0x42>
	if ((mask & BT_GATT_PERM_WRITE) &&
    7634:	0794      	lsls	r4, r2, #30
    7636:	d504      	bpl.n	7642 <check_perm+0x22>
    7638:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    763c:	d013      	beq.n	7666 <check_perm+0x46>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    763e:	6889      	ldr	r1, [r1, #8]
    7640:	b189      	cbz	r1, 7666 <check_perm+0x46>
	mask &= attr->perm;
    7642:	401a      	ands	r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    7644:	f012 0f30 	tst.w	r2, #48	; 0x30
    7648:	d002      	beq.n	7650 <check_perm+0x30>
		if (conn->sec_level < BT_SECURITY_HIGH) {
    764a:	7a03      	ldrb	r3, [r0, #8]
    764c:	2b02      	cmp	r3, #2
    764e:	d90c      	bls.n	766a <check_perm+0x4a>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
    7650:	f012 020c 	ands.w	r2, r2, #12
    7654:	d00b      	beq.n	766e <check_perm+0x4e>
		if (!conn->encrypt) {
    7656:	7a83      	ldrb	r3, [r0, #10]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
    7658:	2b00      	cmp	r3, #0
    765a:	bf14      	ite	ne
    765c:	2000      	movne	r0, #0
    765e:	200f      	moveq	r0, #15
    7660:	bd10      	pop	{r4, pc}
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    7662:	2002      	movs	r0, #2
    7664:	bd10      	pop	{r4, pc}
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    7666:	2003      	movs	r0, #3
    7668:	bd10      	pop	{r4, pc}
			return BT_ATT_ERR_AUTHENTICATION;
    766a:	2005      	movs	r0, #5
    766c:	bd10      	pop	{r4, pc}
	return 0;
    766e:	4610      	mov	r0, r2
}
    7670:	bd10      	pop	{r4, pc}

00007672 <read_type_cb>:
{
    7672:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    7676:	680f      	ldr	r7, [r1, #0]
{
    7678:	4606      	mov	r6, r0
    767a:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    767c:	6800      	ldr	r0, [r0, #0]
    767e:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    7680:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    7684:	f7fb ff7e 	bl	3584 <bt_uuid_cmp>
    7688:	4680      	mov	r8, r0
    768a:	2800      	cmp	r0, #0
    768c:	d14e      	bne.n	772c <read_type_cb+0xba>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    768e:	2215      	movs	r2, #21
    7690:	4631      	mov	r1, r6
    7692:	4648      	mov	r0, r9
    7694:	f7ff ffc4 	bl	7620 <check_perm>
    7698:	4605      	mov	r5, r0
    769a:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    769c:	b148      	cbz	r0, 76b2 <read_type_cb+0x40>
		if (data->rsp->len) {
    769e:	68e3      	ldr	r3, [r4, #12]
    76a0:	781d      	ldrb	r5, [r3, #0]
    76a2:	b115      	cbz	r5, 76aa <read_type_cb+0x38>
			data->err = 0x00;
    76a4:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
    76a8:	4645      	mov	r5, r8
}
    76aa:	4628      	mov	r0, r5
    76ac:	b003      	add	sp, #12
    76ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    76b2:	68a0      	ldr	r0, [r4, #8]
    76b4:	2102      	movs	r1, #2
    76b6:	3008      	adds	r0, #8
    76b8:	f010 fa88 	bl	17bcc <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    76bc:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    76be:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    76c0:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    76c2:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    76c4:	898a      	ldrh	r2, [r1, #12]
    76c6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
    76ca:	6889      	ldr	r1, [r1, #8]
    76cc:	f8d6 8004 	ldr.w	r8, [r6, #4]
    76d0:	9500      	str	r5, [sp, #0]
    76d2:	1a9b      	subs	r3, r3, r2
    76d4:	b29b      	uxth	r3, r3
    76d6:	440a      	add	r2, r1
    76d8:	4648      	mov	r0, r9
    76da:	4631      	mov	r1, r6
    76dc:	47c0      	blx	r8
	if (read < 0) {
    76de:	1e01      	subs	r1, r0, #0
    76e0:	da08      	bge.n	76f4 <read_type_cb+0x82>
	if (err < 0 && err >= -0xff) {
    76e2:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    76e6:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    76e8:	bf9a      	itte	ls
    76ea:	4249      	negls	r1, r1
    76ec:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    76ee:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    76f0:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
    76f2:	e7da      	b.n	76aa <read_type_cb+0x38>
	if (!data->rsp->len) {
    76f4:	68e0      	ldr	r0, [r4, #12]
    76f6:	7802      	ldrb	r2, [r0, #0]
    76f8:	1c8b      	adds	r3, r1, #2
    76fa:	b982      	cbnz	r2, 771e <read_type_cb+0xac>
		data->rsp->len = read + sizeof(*data->item);
    76fc:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    76fe:	68a0      	ldr	r0, [r4, #8]
    7700:	3008      	adds	r0, #8
    7702:	f010 fa63 	bl	17bcc <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    7706:	68a3      	ldr	r3, [r4, #8]
    7708:	f8b7 5062 	ldrh.w	r5, [r7, #98]	; 0x62
    770c:	899b      	ldrh	r3, [r3, #12]
    770e:	1aed      	subs	r5, r5, r3
    7710:	68e3      	ldr	r3, [r4, #12]
    7712:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    7714:	429d      	cmp	r5, r3
    7716:	bfd4      	ite	le
    7718:	2500      	movle	r5, #0
    771a:	2501      	movgt	r5, #1
    771c:	e7c5      	b.n	76aa <read_type_cb+0x38>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    771e:	429a      	cmp	r2, r3
    7720:	d0ed      	beq.n	76fe <read_type_cb+0x8c>
		data->buf->len -= sizeof(*data->item);
    7722:	68a2      	ldr	r2, [r4, #8]
    7724:	8993      	ldrh	r3, [r2, #12]
    7726:	3b02      	subs	r3, #2
    7728:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    772a:	e7be      	b.n	76aa <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    772c:	2501      	movs	r5, #1
    772e:	e7bc      	b.n	76aa <read_type_cb+0x38>

00007730 <att_cb.isra.4>:
static bt_conn_tx_cb_t att_cb(struct net_buf *buf)
    7730:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
    7732:	7800      	ldrb	r0, [r0, #0]
    7734:	f7ff fe24 	bl	7380 <att_op_get_type>
    7738:	3801      	subs	r0, #1
    773a:	b2c0      	uxtb	r0, r0
    773c:	2804      	cmp	r0, #4
    773e:	bf9a      	itte	ls
    7740:	4b02      	ldrls	r3, [pc, #8]	; (774c <att_cb.isra.4+0x1c>)
    7742:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    7746:	4802      	ldrhi	r0, [pc, #8]	; (7750 <att_cb.isra.4+0x20>)
}
    7748:	bd08      	pop	{r3, pc}
    774a:	bf00      	nop
    774c:	0002107c 	.word	0x0002107c
    7750:	00007b0d 	.word	0x00007b0d

00007754 <uuid_create>:
{
    7754:	b510      	push	{r4, lr}
	switch (buf->len) {
    7756:	898a      	ldrh	r2, [r1, #12]
    7758:	2a02      	cmp	r2, #2
{
    775a:	4604      	mov	r4, r0
	switch (buf->len) {
    775c:	d003      	beq.n	7766 <uuid_create+0x12>
    775e:	2a10      	cmp	r2, #16
    7760:	d00a      	beq.n	7778 <uuid_create+0x24>
	return false;
    7762:	2000      	movs	r0, #0
}
    7764:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    7766:	2300      	movs	r3, #0
    7768:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    776a:	f101 0008 	add.w	r0, r1, #8
    776e:	f010 fa8d 	bl	17c8c <net_buf_simple_pull_le16>
    7772:	8060      	strh	r0, [r4, #2]
		return true;
    7774:	2001      	movs	r0, #1
    7776:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    7778:	2302      	movs	r3, #2
    777a:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    777e:	6889      	ldr	r1, [r1, #8]
    7780:	f7f9 f8b3 	bl	8ea <memcpy>
    7784:	e7f6      	b.n	7774 <uuid_create+0x20>
	...

00007788 <att_req_sent>:
{
    7788:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    778a:	2104      	movs	r1, #4
    778c:	f7ff f9f9 	bl	6b82 <bt_l2cap_le_lookup_tx_cid>
    7790:	4604      	mov	r4, r0
    7792:	30d4      	adds	r0, #212	; 0xd4
    7794:	f018 f85a 	bl	1f84c <_impl_k_sem_give>
	if (att->req) {
    7798:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    779c:	b143      	cbz	r3, 77b0 <att_req_sent+0x28>
    779e:	f104 01ac 	add.w	r1, r4, #172	; 0xac
    77a2:	f247 5230 	movw	r2, #30000	; 0x7530
    77a6:	4803      	ldr	r0, [pc, #12]	; (77b4 <att_req_sent+0x2c>)
}
    77a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    77ac:	f018 bbf2 	b.w	1ff94 <k_delayed_work_submit_to_queue>
    77b0:	bd10      	pop	{r4, pc}
    77b2:	bf00      	nop
    77b4:	20005218 	.word	0x20005218

000077b8 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    77b8:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    77ba:	4d0f      	ldr	r5, [pc, #60]	; (77f8 <bt_att_accept+0x40>)
    77bc:	682c      	ldr	r4, [r5, #0]
{
    77be:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    77c0:	b9b4      	cbnz	r4, 77f0 <bt_att_accept+0x38>
			continue;
		}

		att->chan.chan.ops = &ops;
    77c2:	4b0e      	ldr	r3, [pc, #56]	; (77fc <bt_att_accept+0x44>)
    77c4:	606b      	str	r3, [r5, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    77c6:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    77ca:	f3bf 8f5b 	dmb	ish
    77ce:	e853 2f00 	ldrex	r2, [r3]
    77d2:	e843 4100 	strex	r1, r4, [r3]
    77d6:	2900      	cmp	r1, #0
    77d8:	d1f9      	bne.n	77ce <bt_att_accept+0x16>
    77da:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    77de:	2202      	movs	r2, #2
    77e0:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
    77e4:	4611      	mov	r1, r2
    77e6:	f018 f827 	bl	1f838 <_impl_k_sem_init>
		atomic_set(att->flags, 0);
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    77ea:	6035      	str	r5, [r6, #0]

		return 0;
    77ec:	4620      	mov	r0, r4
    77ee:	bd70      	pop	{r4, r5, r6, pc}
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
    77f0:	f06f 000b 	mvn.w	r0, #11
}
    77f4:	bd70      	pop	{r4, r5, r6, pc}
    77f6:	bf00      	nop
    77f8:	200005b0 	.word	0x200005b0
    77fc:	2000de6c 	.word	0x2000de6c

00007800 <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    7800:	6803      	ldr	r3, [r0, #0]
    7802:	7b1b      	ldrb	r3, [r3, #12]
    7804:	2b03      	cmp	r3, #3
    7806:	d10a      	bne.n	781e <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7808:	f3bf 8f5b 	dmb	ish
    780c:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    7810:	f3bf 8f5b 	dmb	ish
    7814:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    7818:	f000 0001 	and.w	r0, r0, #1
    781c:	4770      	bx	lr
    781e:	2001      	movs	r0, #1
}
    7820:	4770      	bx	lr

00007822 <att_prepare_write_req>:
    7822:	2006      	movs	r0, #6
    7824:	4770      	bx	lr

00007826 <att_send_req>:
{
    7826:	b570      	push	{r4, r5, r6, lr}
    7828:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    782a:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
	att->req = req;
    782e:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
{
    7832:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    7834:	4630      	mov	r0, r6
    7836:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    783a:	f018 f867 	bl	1f90c <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    783e:	4628      	mov	r0, r5
    7840:	f7ff ffde 	bl	7800 <att_is_connected>
    7844:	b928      	cbnz	r0, 7852 <att_send_req+0x2c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    7846:	4630      	mov	r0, r6
    7848:	f018 f800 	bl	1f84c <_impl_k_sem_give>
		return -ENOTCONN;
    784c:	f06f 0038 	mvn.w	r0, #56	; 0x38
    7850:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    7852:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    7854:	f106 0008 	add.w	r0, r6, #8
    7858:	f010 fa20 	bl	17c9c <net_buf_simple_headroom>
	state->len = buf->len;
    785c:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    785e:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    7860:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    7862:	6920      	ldr	r0, [r4, #16]
    7864:	682d      	ldr	r5, [r5, #0]
    7866:	f010 f981 	bl	17b6c <net_buf_ref>
    786a:	6923      	ldr	r3, [r4, #16]
    786c:	4606      	mov	r6, r0
    786e:	6898      	ldr	r0, [r3, #8]
    7870:	f7ff ff5e 	bl	7730 <att_cb.isra.4>
    7874:	4632      	mov	r2, r6
    7876:	4603      	mov	r3, r0
    7878:	2104      	movs	r1, #4
    787a:	4628      	mov	r0, r5
    787c:	f7ff f807 	bl	688e <bt_l2cap_send_cb>
	return 0;
    7880:	2000      	movs	r0, #0
}
    7882:	bd70      	pop	{r4, r5, r6, pc}

00007884 <att_handle_rsp>:
{
    7884:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    7888:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    788a:	30ac      	adds	r0, #172	; 0xac
{
    788c:	461e      	mov	r6, r3
    788e:	460f      	mov	r7, r1
    7890:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    7892:	f018 fb25 	bl	1fee0 <k_delayed_work_cancel>
	if (!att->req) {
    7896:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    789a:	b1db      	cbz	r3, 78d4 <att_handle_rsp+0x50>
	if (att->req->buf) {
    789c:	6918      	ldr	r0, [r3, #16]
    789e:	b128      	cbz	r0, 78ac <att_handle_rsp+0x28>
		net_buf_unref(att->req->buf);
    78a0:	f010 f936 	bl	17b10 <net_buf_unref>
		att->req->buf = NULL;
    78a4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    78a8:	2200      	movs	r2, #0
    78aa:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    78ac:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	func(att->chan.chan.conn, err, pdu, len, att->req);
    78b0:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    78b2:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    78b6:	2500      	movs	r5, #0
    78b8:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    78ba:	463a      	mov	r2, r7
    78bc:	9300      	str	r3, [sp, #0]
    78be:	4631      	mov	r1, r6
    78c0:	4643      	mov	r3, r8
    78c2:	47c8      	blx	r9
	if (!att->req->func) {
    78c4:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    78c8:	6843      	ldr	r3, [r0, #4]
    78ca:	b90b      	cbnz	r3, 78d0 <att_handle_rsp+0x4c>
		att_req_destroy(att->req);
    78cc:	f7ff fd70 	bl	73b0 <att_req_destroy>
	att->req = NULL;
    78d0:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
    78d4:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    78d8:	b159      	cbz	r1, 78f2 <att_handle_rsp+0x6e>
	if (list->tail == node) {
    78da:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
	list->head = node->next;
    78de:	680b      	ldr	r3, [r1, #0]
    78e0:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	if (list->tail == node) {
    78e4:	4291      	cmp	r1, r2
		list->tail = list->head;
    78e6:	bf08      	it	eq
    78e8:	f8c4 30a8 	streq.w	r3, [r4, #168]	; 0xa8
	att_send_req(att, ATT_REQ(node));
    78ec:	4620      	mov	r0, r4
    78ee:	f7ff ff9a 	bl	7826 <att_send_req>
}
    78f2:	2000      	movs	r0, #0
    78f4:	b003      	add	sp, #12
    78f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000078fa <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    78fa:	898a      	ldrh	r2, [r1, #12]
    78fc:	6889      	ldr	r1, [r1, #8]
    78fe:	2300      	movs	r3, #0
    7900:	f7ff bfc0 	b.w	7884 <att_handle_rsp>

00007904 <att_handle_exec_write_rsp>:
    7904:	f7ff bff9 	b.w	78fa <att_confirm>

00007908 <att_handle_prepare_write_rsp>:
    7908:	f7ff bff7 	b.w	78fa <att_confirm>

0000790c <att_handle_write_rsp>:
    790c:	f7ff bff5 	b.w	78fa <att_confirm>

00007910 <att_handle_read_mult_rsp>:
    7910:	f7ff bff3 	b.w	78fa <att_confirm>

00007914 <att_handle_read_blob_rsp>:
    7914:	f7ff bff1 	b.w	78fa <att_confirm>

00007918 <att_handle_read_rsp>:
    7918:	f7ff bfef 	b.w	78fa <att_confirm>

0000791c <att_handle_read_type_rsp>:
    791c:	f7ff bfed 	b.w	78fa <att_confirm>

00007920 <att_handle_find_type_rsp>:
    7920:	f7ff bfeb 	b.w	78fa <att_confirm>

00007924 <att_handle_find_info_rsp>:
    7924:	f7ff bfe9 	b.w	78fa <att_confirm>

00007928 <att_mtu_rsp>:
{
    7928:	b410      	push	{r4}
    792a:	460a      	mov	r2, r1
	if (!att) {
    792c:	b198      	cbz	r0, 7956 <att_mtu_rsp+0x2e>
	rsp = (void *)buf->data;
    792e:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
    7930:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    7932:	2b16      	cmp	r3, #22
    7934:	d805      	bhi.n	7942 <att_mtu_rsp+0x1a>
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    7936:	2200      	movs	r2, #0
    7938:	2304      	movs	r3, #4
    793a:	4611      	mov	r1, r2
}
    793c:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    793e:	f7ff bfa1 	b.w	7884 <att_handle_rsp>
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    7942:	2bf9      	cmp	r3, #249	; 0xf9
    7944:	bf28      	it	cs
    7946:	23f9      	movcs	r3, #249	; 0xf9
    7948:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    794c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	return att_handle_rsp(att, rsp, buf->len, 0);
    7950:	8992      	ldrh	r2, [r2, #12]
    7952:	2300      	movs	r3, #0
    7954:	e7f2      	b.n	793c <att_mtu_rsp+0x14>
}
    7956:	bc10      	pop	{r4}
    7958:	4770      	bx	lr

0000795a <bt_att_encrypt_change>:
{
    795a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    795e:	4604      	mov	r4, r0
	if (hci_status) {
    7960:	460d      	mov	r5, r1
    7962:	b131      	cbz	r1, 7972 <bt_att_encrypt_change+0x18>
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    7964:	2200      	movs	r2, #0
    7966:	2305      	movs	r3, #5
    7968:	4611      	mov	r1, r2
}
    796a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    796e:	f7ff bf89 	b.w	7884 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
    7972:	6806      	ldr	r6, [r0, #0]
	if (conn->sec_level == BT_SECURITY_LOW) {
    7974:	7a33      	ldrb	r3, [r6, #8]
    7976:	2b01      	cmp	r3, #1
    7978:	d023      	beq.n	79c2 <bt_att_encrypt_change+0x68>
	if (!att->req || !att->req->retrying) {
    797a:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    797e:	b303      	cbz	r3, 79c2 <bt_att_encrypt_change+0x68>
    7980:	7d1b      	ldrb	r3, [r3, #20]
    7982:	b1f3      	cbz	r3, 79c2 <bt_att_encrypt_change+0x68>
	k_sem_take(&att->tx_sem, K_FOREVER);
    7984:	f100 07d4 	add.w	r7, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    7988:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    798c:	4638      	mov	r0, r7
    798e:	f017 ffbd 	bl	1f90c <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    7992:	4620      	mov	r0, r4
    7994:	f7ff ff34 	bl	7800 <att_is_connected>
    7998:	b920      	cbnz	r0, 79a4 <bt_att_encrypt_change+0x4a>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    799a:	4638      	mov	r0, r7
}
    799c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    79a0:	f017 bf54 	b.w	1f84c <_impl_k_sem_give>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    79a4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    79a8:	691f      	ldr	r7, [r3, #16]
    79aa:	68b8      	ldr	r0, [r7, #8]
    79ac:	f7ff fec0 	bl	7730 <att_cb.isra.4>
    79b0:	463a      	mov	r2, r7
    79b2:	4603      	mov	r3, r0
    79b4:	2104      	movs	r1, #4
    79b6:	4630      	mov	r0, r6
    79b8:	f7fe ff69 	bl	688e <bt_l2cap_send_cb>
	att->req->buf = NULL;
    79bc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    79c0:	611d      	str	r5, [r3, #16]
    79c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000079c6 <att_error_rsp>:
{
    79c6:	b570      	push	{r4, r5, r6, lr}
    79c8:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
    79ca:	6888      	ldr	r0, [r1, #8]
	if (!att->req) {
    79cc:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    79d0:	b332      	cbz	r2, 7a20 <att_error_rsp+0x5a>
	if (att->req->buf) {
    79d2:	6913      	ldr	r3, [r2, #16]
    79d4:	b12b      	cbz	r3, 79e2 <att_error_rsp+0x1c>
	buf->data = buf->__buf + state->offset;
    79d6:	8995      	ldrh	r5, [r2, #12]
    79d8:	6919      	ldr	r1, [r3, #16]
    79da:	4429      	add	r1, r5
    79dc:	6099      	str	r1, [r3, #8]
	buf->len = state->len;
    79de:	89d1      	ldrh	r1, [r2, #14]
    79e0:	8199      	strh	r1, [r3, #12]
	if (att->req->retrying) {
    79e2:	7d13      	ldrb	r3, [r2, #20]
	err = rsp->error;
    79e4:	78c5      	ldrb	r5, [r0, #3]
	if (att->req->retrying) {
    79e6:	b9e3      	cbnz	r3, 7a22 <att_error_rsp+0x5c>
	switch (err) {
    79e8:	2d05      	cmp	r5, #5
	if (!att_change_security(att->chan.chan.conn, err)) {
    79ea:	6820      	ldr	r0, [r4, #0]
	switch (err) {
    79ec:	d006      	beq.n	79fc <att_error_rsp+0x36>
    79ee:	2d0f      	cmp	r5, #15
    79f0:	d117      	bne.n	7a22 <att_error_rsp+0x5c>
		if (conn->sec_level >= BT_SECURITY_MEDIUM)
    79f2:	7a03      	ldrb	r3, [r0, #8]
    79f4:	2b01      	cmp	r3, #1
    79f6:	d814      	bhi.n	7a22 <att_error_rsp+0x5c>
		sec = BT_SECURITY_MEDIUM;
    79f8:	2102      	movs	r1, #2
    79fa:	e007      	b.n	7a0c <att_error_rsp+0x46>
		if (conn->sec_level < BT_SECURITY_MEDIUM) {
    79fc:	7a03      	ldrb	r3, [r0, #8]
    79fe:	2b01      	cmp	r3, #1
    7a00:	d9fa      	bls.n	79f8 <att_error_rsp+0x32>
		} else if (conn->sec_level < BT_SECURITY_HIGH) {
    7a02:	2b02      	cmp	r3, #2
    7a04:	d00a      	beq.n	7a1c <att_error_rsp+0x56>
		} else if (conn->sec_level < BT_SECURITY_FIPS) {
    7a06:	2b03      	cmp	r3, #3
    7a08:	d10b      	bne.n	7a22 <att_error_rsp+0x5c>
			sec = BT_SECURITY_FIPS;
    7a0a:	2104      	movs	r1, #4
	return bt_conn_security(conn, sec);
    7a0c:	f7fe f850 	bl	5ab0 <bt_conn_security>
	if (!att_change_security(att->chan.chan.conn, err)) {
    7a10:	b938      	cbnz	r0, 7a22 <att_error_rsp+0x5c>
		att->req->retrying = true;
    7a12:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    7a16:	2201      	movs	r2, #1
    7a18:	751a      	strb	r2, [r3, #20]
		return 0;
    7a1a:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_HIGH;
    7a1c:	2103      	movs	r1, #3
    7a1e:	e7f5      	b.n	7a0c <att_error_rsp+0x46>
		err = BT_ATT_ERR_UNLIKELY;
    7a20:	250e      	movs	r5, #14
	return att_handle_rsp(att, NULL, 0, err);
    7a22:	2200      	movs	r2, #0
    7a24:	462b      	mov	r3, r5
    7a26:	4620      	mov	r0, r4
    7a28:	4611      	mov	r1, r2
}
    7a2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(att, NULL, 0, err);
    7a2e:	f7ff bf29 	b.w	7884 <att_handle_rsp>

00007a32 <att_reset>:
{
    7a32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7a34:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    7a38:	4605      	mov	r5, r0
    7a3a:	f3bf 8f5b 	dmb	ish
    7a3e:	e853 2f00 	ldrex	r2, [r3]
    7a42:	f042 0204 	orr.w	r2, r2, #4
    7a46:	e843 2100 	strex	r1, r2, [r3]
    7a4a:	2900      	cmp	r1, #0
    7a4c:	d1f7      	bne.n	7a3e <att_reset+0xc>
    7a4e:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    7a52:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    7a56:	4620      	mov	r0, r4
    7a58:	f017 fef8 	bl	1f84c <_impl_k_sem_give>
    7a5c:	4620      	mov	r0, r4
    7a5e:	f017 fef5 	bl	1f84c <_impl_k_sem_give>
    7a62:	f8d5 40a4 	ldr.w	r4, [r5, #164]	; 0xa4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    7a66:	b98c      	cbnz	r4, 7a8c <att_reset+0x5a>
	if (!att->req) {
    7a68:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	list->head = NULL;
    7a6c:	2200      	movs	r2, #0
    7a6e:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	list->tail = NULL;
    7a72:	f8c5 20a8 	str.w	r2, [r5, #168]	; 0xa8
    7a76:	b90b      	cbnz	r3, 7a7c <att_reset+0x4a>
}
    7a78:	b003      	add	sp, #12
    7a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    7a7c:	230e      	movs	r3, #14
    7a7e:	4611      	mov	r1, r2
    7a80:	4628      	mov	r0, r5
}
    7a82:	b003      	add	sp, #12
    7a84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    7a88:	f7ff befc 	b.w	7884 <att_handle_rsp>
	return node->next;
    7a8c:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
    7a8e:	6867      	ldr	r7, [r4, #4]
    7a90:	b12f      	cbz	r7, 7a9e <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    7a92:	2300      	movs	r3, #0
    7a94:	9400      	str	r4, [sp, #0]
    7a96:	461a      	mov	r2, r3
    7a98:	210e      	movs	r1, #14
    7a9a:	4618      	mov	r0, r3
    7a9c:	47b8      	blx	r7
		att_req_destroy(req);
    7a9e:	4620      	mov	r0, r4
    7aa0:	f7ff fc86 	bl	73b0 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    7aa4:	2e00      	cmp	r6, #0
    7aa6:	d0df      	beq.n	7a68 <att_reset+0x36>
    7aa8:	4634      	mov	r4, r6
    7aaa:	6836      	ldr	r6, [r6, #0]
    7aac:	e7ef      	b.n	7a8e <att_reset+0x5c>

00007aae <bt_att_disconnected>:
{
    7aae:	b510      	push	{r4, lr}
    7ab0:	4604      	mov	r4, r0
	att_reset(att);
    7ab2:	f7ff ffbe 	bl	7a32 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    7ab6:	6820      	ldr	r0, [r4, #0]
    7ab8:	f001 f8d4 	bl	8c64 <bt_gatt_disconnected>
	memset(att, 0, sizeof(*att));
    7abc:	4620      	mov	r0, r4
    7abe:	22ec      	movs	r2, #236	; 0xec
    7ac0:	2100      	movs	r1, #0
}
    7ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(att, 0, sizeof(*att));
    7ac6:	f7f8 bf3c 	b.w	942 <memset>

00007aca <att_timeout>:
{
    7aca:	b510      	push	{r4, lr}
    7acc:	4604      	mov	r4, r0
	att_reset(att);
    7ace:	38ac      	subs	r0, #172	; 0xac
    7ad0:	f7ff ffaf 	bl	7a32 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    7ad4:	f854 0cac 	ldr.w	r0, [r4, #-172]
    7ad8:	f001 f8c4 	bl	8c64 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    7adc:	2300      	movs	r3, #0
    7ade:	f844 3cac 	str.w	r3, [r4, #-172]
    7ae2:	bd10      	pop	{r4, pc}

00007ae4 <att_chan_get>:
{
    7ae4:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    7ae6:	7b03      	ldrb	r3, [r0, #12]
    7ae8:	2b03      	cmp	r3, #3
    7aea:	d001      	beq.n	7af0 <att_chan_get+0xc>
		return NULL;
    7aec:	2000      	movs	r0, #0
    7aee:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    7af0:	2104      	movs	r1, #4
    7af2:	f7ff f856 	bl	6ba2 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    7af6:	2800      	cmp	r0, #0
    7af8:	d0f8      	beq.n	7aec <att_chan_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7afa:	f3bf 8f5b 	dmb	ish
    7afe:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    7b02:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    7b06:	075b      	lsls	r3, r3, #29
    7b08:	d4f0      	bmi.n	7aec <att_chan_get+0x8>
}
    7b0a:	bd08      	pop	{r3, pc}

00007b0c <att_pdu_sent>:
{
    7b0c:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    7b0e:	2104      	movs	r1, #4
    7b10:	f7ff f837 	bl	6b82 <bt_l2cap_le_lookup_tx_cid>
}
    7b14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    7b18:	30d4      	adds	r0, #212	; 0xd4
    7b1a:	f017 be97 	b.w	1f84c <_impl_k_sem_give>

00007b1e <att_rsp_sent>:
{
    7b1e:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    7b20:	2104      	movs	r1, #4
    7b22:	f7ff f82e 	bl	6b82 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7b26:	f3bf 8f5b 	dmb	ish
    7b2a:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    7b2e:	e853 2f00 	ldrex	r2, [r3]
    7b32:	f022 0201 	bic.w	r2, r2, #1
    7b36:	e843 2100 	strex	r1, r2, [r3]
    7b3a:	2900      	cmp	r1, #0
    7b3c:	d1f7      	bne.n	7b2e <att_rsp_sent+0x10>
    7b3e:	f3bf 8f5b 	dmb	ish
    7b42:	30d4      	adds	r0, #212	; 0xd4
}
    7b44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    7b48:	f017 be80 	b.w	1f84c <_impl_k_sem_give>

00007b4c <att_cfm_sent>:
{
    7b4c:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    7b4e:	2104      	movs	r1, #4
    7b50:	f7ff f817 	bl	6b82 <bt_l2cap_le_lookup_tx_cid>
    7b54:	f3bf 8f5b 	dmb	ish
    7b58:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    7b5c:	e853 2f00 	ldrex	r2, [r3]
    7b60:	f022 0202 	bic.w	r2, r2, #2
    7b64:	e843 2100 	strex	r1, r2, [r3]
    7b68:	2900      	cmp	r1, #0
    7b6a:	d1f7      	bne.n	7b5c <att_cfm_sent+0x10>
    7b6c:	f3bf 8f5b 	dmb	ish
    7b70:	30d4      	adds	r0, #212	; 0xd4
}
    7b72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    7b76:	f017 be69 	b.w	1f84c <_impl_k_sem_give>

00007b7a <write_cb>:
{
    7b7a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    7b7e:	680f      	ldr	r7, [r1, #0]
{
    7b80:	460c      	mov	r4, r1
    7b82:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    7b84:	4601      	mov	r1, r0
    7b86:	222a      	movs	r2, #42	; 0x2a
    7b88:	4638      	mov	r0, r7
    7b8a:	f7ff fd49 	bl	7620 <check_perm>
    7b8e:	4605      	mov	r5, r0
    7b90:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    7b92:	b9e8      	cbnz	r0, 7bd0 <write_cb+0x56>
	write = attr->write(data->conn, attr, data->value, data->len,
    7b94:	8a62      	ldrh	r2, [r4, #18]
    7b96:	9001      	str	r0, [sp, #4]
    7b98:	9200      	str	r2, [sp, #0]
    7b9a:	7c23      	ldrb	r3, [r4, #16]
    7b9c:	f8d6 8008 	ldr.w	r8, [r6, #8]
    7ba0:	68e2      	ldr	r2, [r4, #12]
    7ba2:	4631      	mov	r1, r6
    7ba4:	4638      	mov	r0, r7
    7ba6:	47c0      	blx	r8
	if (write < 0 || write != data->len) {
    7ba8:	2800      	cmp	r0, #0
    7baa:	db02      	blt.n	7bb2 <write_cb+0x38>
    7bac:	7c23      	ldrb	r3, [r4, #16]
    7bae:	4298      	cmp	r0, r3
    7bb0:	d00b      	beq.n	7bca <write_cb+0x50>
	if (err < 0 && err >= -0xff) {
    7bb2:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    7bb6:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    7bb8:	bf9a      	itte	ls
    7bba:	4240      	negls	r0, r0
    7bbc:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    7bbe:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
    7bc0:	7520      	strb	r0, [r4, #20]
}
    7bc2:	4628      	mov	r0, r5
    7bc4:	b002      	add	sp, #8
    7bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    7bca:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    7bcc:	2501      	movs	r5, #1
    7bce:	e7f8      	b.n	7bc2 <write_cb+0x48>
		return BT_GATT_ITER_STOP;
    7bd0:	2500      	movs	r5, #0
    7bd2:	e7f6      	b.n	7bc2 <write_cb+0x48>

00007bd4 <read_cb>:
{
    7bd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    7bd8:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    7bda:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    7bdc:	f8d1 9000 	ldr.w	r9, [r1]
{
    7be0:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    7be2:	3008      	adds	r0, #8
    7be4:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    7be6:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    7bea:	f00f ffef 	bl	17bcc <net_buf_simple_add>
	data->err = 0x00;
    7bee:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    7bf0:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    7bf2:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    7bf4:	2215      	movs	r2, #21
    7bf6:	4631      	mov	r1, r6
    7bf8:	4640      	mov	r0, r8
    7bfa:	f7ff fd11 	bl	7620 <check_perm>
    7bfe:	4605      	mov	r5, r0
    7c00:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    7c02:	bb08      	cbnz	r0, 7c48 <read_cb+0x74>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    7c04:	68a1      	ldr	r1, [r4, #8]
    7c06:	f8b9 3062 	ldrh.w	r3, [r9, #98]	; 0x62
    7c0a:	898a      	ldrh	r2, [r1, #12]
    7c0c:	6889      	ldr	r1, [r1, #8]
    7c0e:	88a0      	ldrh	r0, [r4, #4]
    7c10:	9000      	str	r0, [sp, #0]
    7c12:	1a9b      	subs	r3, r3, r2
    7c14:	6877      	ldr	r7, [r6, #4]
    7c16:	440a      	add	r2, r1
    7c18:	b29b      	uxth	r3, r3
    7c1a:	4631      	mov	r1, r6
    7c1c:	4640      	mov	r0, r8
    7c1e:	47b8      	blx	r7
	if (read < 0) {
    7c20:	1e01      	subs	r1, r0, #0
    7c22:	da0b      	bge.n	7c3c <read_cb+0x68>
	if (err < 0 && err >= -0xff) {
    7c24:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    7c28:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    7c2a:	bf9a      	itte	ls
    7c2c:	4249      	negls	r1, r1
    7c2e:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    7c30:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    7c32:	7421      	strb	r1, [r4, #16]
}
    7c34:	4628      	mov	r0, r5
    7c36:	b003      	add	sp, #12
    7c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    7c3c:	68a0      	ldr	r0, [r4, #8]
    7c3e:	3008      	adds	r0, #8
    7c40:	f00f ffc4 	bl	17bcc <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    7c44:	2501      	movs	r5, #1
    7c46:	e7f5      	b.n	7c34 <read_cb+0x60>
		return BT_GATT_ITER_STOP;
    7c48:	463d      	mov	r5, r7
    7c4a:	e7f3      	b.n	7c34 <read_cb+0x60>

00007c4c <bt_att_create_pdu>:
{
    7c4c:	b538      	push	{r3, r4, r5, lr}
    7c4e:	460d      	mov	r5, r1
    7c50:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    7c52:	f7ff ff47 	bl	7ae4 <att_chan_get>
	if (!att) {
    7c56:	b180      	cbz	r0, 7c7a <bt_att_create_pdu+0x2e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    7c58:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
    7c5c:	3401      	adds	r4, #1
    7c5e:	429c      	cmp	r4, r3
    7c60:	d80b      	bhi.n	7c7a <bt_att_create_pdu+0x2e>
	buf = bt_l2cap_create_pdu(NULL, 0);
    7c62:	2100      	movs	r1, #0
    7c64:	4608      	mov	r0, r1
    7c66:	f7fe fe0f 	bl	6888 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    7c6a:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    7c6c:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    7c6e:	3008      	adds	r0, #8
    7c70:	f00f ffac 	bl	17bcc <net_buf_simple_add>
	hdr->code = op;
    7c74:	7005      	strb	r5, [r0, #0]
}
    7c76:	4620      	mov	r0, r4
    7c78:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    7c7a:	2400      	movs	r4, #0
    7c7c:	e7fb      	b.n	7c76 <bt_att_create_pdu+0x2a>
	...

00007c80 <att_indicate>:
{
    7c80:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    7c82:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    7c84:	f101 0008 	add.w	r0, r1, #8
    7c88:	f010 f800 	bl	17c8c <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    7c8c:	2200      	movs	r2, #0
    7c8e:	211e      	movs	r1, #30
    7c90:	4620      	mov	r0, r4
    7c92:	f7ff ffdb 	bl	7c4c <bt_att_create_pdu>
	if (!buf) {
    7c96:	4602      	mov	r2, r0
    7c98:	b120      	cbz	r0, 7ca4 <att_indicate+0x24>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    7c9a:	4b03      	ldr	r3, [pc, #12]	; (7ca8 <att_indicate+0x28>)
    7c9c:	2104      	movs	r1, #4
    7c9e:	4620      	mov	r0, r4
    7ca0:	f7fe fdf5 	bl	688e <bt_l2cap_send_cb>
}
    7ca4:	2000      	movs	r0, #0
    7ca6:	bd10      	pop	{r4, pc}
    7ca8:	00007b4d 	.word	0x00007b4d

00007cac <att_mtu_req>:
{
    7cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    7cb0:	688b      	ldr	r3, [r1, #8]
    7cb2:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    7cb4:	2d16      	cmp	r5, #22
{
    7cb6:	4606      	mov	r6, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    7cb8:	d921      	bls.n	7cfe <att_mtu_req+0x52>
	struct bt_conn *conn = att->chan.chan.conn;
    7cba:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    7cbe:	2202      	movs	r2, #2
    7cc0:	2103      	movs	r1, #3
    7cc2:	4640      	mov	r0, r8
    7cc4:	f7ff ffc2 	bl	7c4c <bt_att_create_pdu>
	if (!pdu) {
    7cc8:	4607      	mov	r7, r0
    7cca:	b1d8      	cbz	r0, 7d04 <att_mtu_req+0x58>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    7ccc:	2102      	movs	r1, #2
    7cce:	3008      	adds	r0, #8
    7cd0:	f00f ff7c 	bl	17bcc <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    7cd4:	2400      	movs	r4, #0
    7cd6:	f06f 0306 	mvn.w	r3, #6
    7cda:	7003      	strb	r3, [r0, #0]
    7cdc:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    7cde:	4b0b      	ldr	r3, [pc, #44]	; (7d0c <att_mtu_req+0x60>)
    7ce0:	4640      	mov	r0, r8
    7ce2:	463a      	mov	r2, r7
    7ce4:	2104      	movs	r1, #4
    7ce6:	f7fe fdd2 	bl	688e <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    7cea:	2df9      	cmp	r5, #249	; 0xf9
    7cec:	bf28      	it	cs
    7cee:	25f9      	movcs	r5, #249	; 0xf9
    7cf0:	f8a6 5042 	strh.w	r5, [r6, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    7cf4:	f8a6 5062 	strh.w	r5, [r6, #98]	; 0x62
	return 0;
    7cf8:	4620      	mov	r0, r4
    7cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    7cfe:	2004      	movs	r0, #4
    7d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    7d04:	200e      	movs	r0, #14
}
    7d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7d0a:	bf00      	nop
    7d0c:	00007b1f 	.word	0x00007b1f

00007d10 <send_err_rsp.part.9>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    7d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d14:	4688      	mov	r8, r1
    7d16:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    7d18:	2101      	movs	r1, #1
    7d1a:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    7d1c:	4605      	mov	r5, r0
    7d1e:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    7d20:	f7ff ff94 	bl	7c4c <bt_att_create_pdu>
	if (!buf) {
    7d24:	4604      	mov	r4, r0
    7d26:	b180      	cbz	r0, 7d4a <send_err_rsp.part.9+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    7d28:	2104      	movs	r1, #4
    7d2a:	3008      	adds	r0, #8
    7d2c:	f00f ff4e 	bl	17bcc <net_buf_simple_add>
	rsp->request = req;
    7d30:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    7d34:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    7d36:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    7d3a:	4622      	mov	r2, r4
    7d3c:	4628      	mov	r0, r5
    7d3e:	4b04      	ldr	r3, [pc, #16]	; (7d50 <send_err_rsp.part.9+0x40>)
    7d40:	2104      	movs	r1, #4
}
    7d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    7d46:	f7fe bda2 	b.w	688e <bt_l2cap_send_cb>
    7d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7d4e:	bf00      	nop
    7d50:	00007b1f 	.word	0x00007b1f

00007d54 <bt_att_recv>:
{
    7d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
    7d58:	898b      	ldrh	r3, [r1, #12]
{
    7d5a:	4604      	mov	r4, r0
    7d5c:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
    7d5e:	2b00      	cmp	r3, #0
    7d60:	d05e      	beq.n	7e20 <bt_att_recv+0xcc>
	struct bt_att_hdr *hdr = (void *)buf->data;
    7d62:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    7d64:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    7d66:	f850 7f08 	ldr.w	r7, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    7d6a:	f00f ff7f 	bl	17c6c <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    7d6e:	4a2d      	ldr	r2, [pc, #180]	; (7e24 <bt_att_recv+0xd0>)
    7d70:	783d      	ldrb	r5, [r7, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    7d72:	2300      	movs	r3, #0
    7d74:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    7d76:	f812 e033 	ldrb.w	lr, [r2, r3, lsl #3]
    7d7a:	45ae      	cmp	lr, r5
    7d7c:	ea4f 00c3 	mov.w	r0, r3, lsl #3
    7d80:	d118      	bne.n	7db4 <bt_att_recv+0x60>
		if (handler->type == ATT_REQUEST &&
    7d82:	4402      	add	r2, r0
    7d84:	7895      	ldrb	r5, [r2, #2]
    7d86:	2d01      	cmp	r5, #1
    7d88:	d024      	beq.n	7dd4 <bt_att_recv+0x80>
		} else if (handler->type == ATT_INDICATION &&
    7d8a:	2d05      	cmp	r5, #5
    7d8c:	d133      	bne.n	7df6 <bt_att_recv+0xa2>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7d8e:	f3bf 8f5b 	dmb	ish
    7d92:	f104 029c 	add.w	r2, r4, #156	; 0x9c
    7d96:	e852 3f00 	ldrex	r3, [r2]
    7d9a:	f043 0e02 	orr.w	lr, r3, #2
    7d9e:	e842 ec00 	strex	ip, lr, [r2]
    7da2:	f1bc 0f00 	cmp.w	ip, #0
    7da6:	d1f6      	bne.n	7d96 <bt_att_recv+0x42>
    7da8:	f3bf 8f5b 	dmb	ish
    7dac:	079b      	lsls	r3, r3, #30
    7dae:	d522      	bpl.n	7df6 <bt_att_recv+0xa2>
    7db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    7db4:	3301      	adds	r3, #1
    7db6:	2b1b      	cmp	r3, #27
    7db8:	d1dd      	bne.n	7d76 <bt_att_recv+0x22>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    7dba:	4628      	mov	r0, r5
    7dbc:	f7ff fae0 	bl	7380 <att_op_get_type>
    7dc0:	b370      	cbz	r0, 7e20 <bt_att_recv+0xcc>
	if (!req) {
    7dc2:	b36d      	cbz	r5, 7e20 <bt_att_recv+0xcc>
    7dc4:	2306      	movs	r3, #6
    7dc6:	2200      	movs	r2, #0
    7dc8:	4629      	mov	r1, r5
    7dca:	6820      	ldr	r0, [r4, #0]
}
    7dcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7dd0:	f7ff bf9e 	b.w	7d10 <send_err_rsp.part.9>
    7dd4:	f104 029c 	add.w	r2, r4, #156	; 0x9c
    7dd8:	f3bf 8f5b 	dmb	ish
    7ddc:	e852 3f00 	ldrex	r3, [r2]
    7de0:	f043 0e01 	orr.w	lr, r3, #1
    7de4:	e842 ec00 	strex	ip, lr, [r2]
    7de8:	f1bc 0f00 	cmp.w	ip, #0
    7dec:	d1f6      	bne.n	7ddc <bt_att_recv+0x88>
    7dee:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    7df2:	07da      	lsls	r2, r3, #31
    7df4:	d414      	bmi.n	7e20 <bt_att_recv+0xcc>
	if (buf->len < handler->expect_len) {
    7df6:	180b      	adds	r3, r1, r0
    7df8:	89b1      	ldrh	r1, [r6, #12]
    7dfa:	785a      	ldrb	r2, [r3, #1]
    7dfc:	4291      	cmp	r1, r2
    7dfe:	d30d      	bcc.n	7e1c <bt_att_recv+0xc8>
		err = handler->func(att, buf);
    7e00:	685b      	ldr	r3, [r3, #4]
    7e02:	4631      	mov	r1, r6
    7e04:	4620      	mov	r0, r4
    7e06:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    7e08:	2d01      	cmp	r5, #1
		err = handler->func(att, buf);
    7e0a:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    7e0c:	d108      	bne.n	7e20 <bt_att_recv+0xcc>
    7e0e:	b138      	cbz	r0, 7e20 <bt_att_recv+0xcc>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    7e10:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
    7e12:	b129      	cbz	r1, 7e20 <bt_att_recv+0xcc>
    7e14:	2200      	movs	r2, #0
    7e16:	e7d8      	b.n	7dca <bt_att_recv+0x76>
		err = BT_ATT_ERR_INVALID_PDU;
    7e18:	2304      	movs	r3, #4
    7e1a:	e7f9      	b.n	7e10 <bt_att_recv+0xbc>
	if (handler->type == ATT_REQUEST && err) {
    7e1c:	2d01      	cmp	r5, #1
    7e1e:	d0fb      	beq.n	7e18 <bt_att_recv+0xc4>
    7e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e24:	00021090 	.word	0x00021090

00007e28 <att_read_group_req>:
{
    7e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    7e2c:	898b      	ldrh	r3, [r1, #12]
    7e2e:	2b06      	cmp	r3, #6
{
    7e30:	b08d      	sub	sp, #52	; 0x34
    7e32:	4680      	mov	r8, r0
    7e34:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    7e36:	d001      	beq.n	7e3c <att_read_group_req+0x14>
    7e38:	2b14      	cmp	r3, #20
    7e3a:	d168      	bne.n	7f0e <att_read_group_req+0xe6>
	req = (void *)buf->data;
    7e3c:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    7e3e:	2104      	movs	r1, #4
	req = (void *)buf->data;
    7e40:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    7e44:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    7e48:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    7e4a:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    7e4c:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    7e4e:	f00f ff0d 	bl	17c6c <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    7e52:	4621      	mov	r1, r4
    7e54:	4638      	mov	r0, r7
    7e56:	f7ff fc7d 	bl	7754 <uuid_create>
    7e5a:	2800      	cmp	r0, #0
    7e5c:	d059      	beq.n	7f12 <att_read_group_req+0xea>
	if (!start || !end) {
    7e5e:	2d00      	cmp	r5, #0
    7e60:	d05a      	beq.n	7f18 <att_read_group_req+0xf0>
    7e62:	2400      	movs	r4, #0
    7e64:	2e00      	cmp	r6, #0
    7e66:	d056      	beq.n	7f16 <att_read_group_req+0xee>
	if (start > end) {
    7e68:	42b5      	cmp	r5, r6
    7e6a:	d855      	bhi.n	7f18 <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    7e6c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    7e70:	4669      	mov	r1, sp
    7e72:	4638      	mov	r0, r7
    7e74:	f88d 4000 	strb.w	r4, [sp]
    7e78:	f8ad 3002 	strh.w	r3, [sp, #2]
    7e7c:	f7fb fb82 	bl	3584 <bt_uuid_cmp>
    7e80:	bb38      	cbnz	r0, 7ed2 <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
    7e82:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
    7e86:	2214      	movs	r2, #20
    7e88:	2100      	movs	r1, #0
    7e8a:	a807      	add	r0, sp, #28
    7e8c:	f7f8 fd59 	bl	942 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    7e90:	2201      	movs	r2, #1
    7e92:	2111      	movs	r1, #17
    7e94:	4648      	mov	r0, r9
    7e96:	f7ff fed9 	bl	7c4c <bt_att_create_pdu>
    7e9a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    7e9c:	2800      	cmp	r0, #0
    7e9e:	d038      	beq.n	7f12 <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    7ea0:	2101      	movs	r1, #1
    7ea2:	3008      	adds	r0, #8
	data.uuid = uuid;
    7ea4:	9708      	str	r7, [sp, #32]
	data.att = att;
    7ea6:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    7eaa:	f00f fe8f 	bl	17bcc <net_buf_simple_add>
	data.rsp->len = 0;
    7eae:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    7eb0:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    7eb2:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    7eb4:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    7eb6:	4a1c      	ldr	r2, [pc, #112]	; (7f28 <att_read_group_req+0x100>)
	data.group = NULL;
    7eb8:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    7eba:	4631      	mov	r1, r6
    7ebc:	4628      	mov	r0, r5
    7ebe:	f000 fdfd 	bl	8abc <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    7ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7ec4:	781c      	ldrb	r4, [r3, #0]
    7ec6:	b9d4      	cbnz	r4, 7efe <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
    7ec8:	9809      	ldr	r0, [sp, #36]	; 0x24
    7eca:	f00f fe21 	bl	17b10 <net_buf_unref>
    7ece:	230a      	movs	r3, #10
    7ed0:	e00c      	b.n	7eec <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    7ed2:	f642 0301 	movw	r3, #10241	; 0x2801
    7ed6:	a901      	add	r1, sp, #4
    7ed8:	4638      	mov	r0, r7
    7eda:	f88d 4004 	strb.w	r4, [sp, #4]
    7ede:	f8ad 3006 	strh.w	r3, [sp, #6]
    7ee2:	f7fb fb4f 	bl	3584 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    7ee6:	2800      	cmp	r0, #0
    7ee8:	d0cb      	beq.n	7e82 <att_read_group_req+0x5a>
    7eea:	2310      	movs	r3, #16
    7eec:	462a      	mov	r2, r5
    7eee:	2110      	movs	r1, #16
    7ef0:	4648      	mov	r0, r9
    7ef2:	f7ff ff0d 	bl	7d10 <send_err_rsp.part.9>
}
    7ef6:	4620      	mov	r0, r4
    7ef8:	b00d      	add	sp, #52	; 0x34
    7efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    7efe:	4b0b      	ldr	r3, [pc, #44]	; (7f2c <att_read_group_req+0x104>)
    7f00:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7f02:	2104      	movs	r1, #4
    7f04:	4648      	mov	r0, r9
    7f06:	f7fe fcc2 	bl	688e <bt_l2cap_send_cb>
		return 0;
    7f0a:	2400      	movs	r4, #0
    7f0c:	e7f3      	b.n	7ef6 <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
    7f0e:	2404      	movs	r4, #4
    7f10:	e7f1      	b.n	7ef6 <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
    7f12:	240e      	movs	r4, #14
    7f14:	e7ef      	b.n	7ef6 <att_read_group_req+0xce>
			*err = 0;
    7f16:	4635      	mov	r5, r6
    7f18:	2301      	movs	r3, #1
    7f1a:	462a      	mov	r2, r5
    7f1c:	2110      	movs	r1, #16
    7f1e:	4648      	mov	r0, r9
    7f20:	f7ff fef6 	bl	7d10 <send_err_rsp.part.9>
    7f24:	e7f1      	b.n	7f0a <att_read_group_req+0xe2>
    7f26:	bf00      	nop
    7f28:	000073e1 	.word	0x000073e1
    7f2c:	00007b1f 	.word	0x00007b1f

00007f30 <att_read_mult_req>:
{
    7f30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    7f34:	6804      	ldr	r4, [r0, #0]
{
    7f36:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
    7f38:	2214      	movs	r2, #20
{
    7f3a:	4606      	mov	r6, r0
    7f3c:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
    7f3e:	a801      	add	r0, sp, #4
    7f40:	2100      	movs	r1, #0
    7f42:	f7f8 fcfe 	bl	942 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    7f46:	2200      	movs	r2, #0
    7f48:	210f      	movs	r1, #15
    7f4a:	4620      	mov	r0, r4
    7f4c:	f7ff fe7e 	bl	7c4c <bt_att_create_pdu>
    7f50:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    7f52:	b368      	cbz	r0, 7fb0 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7f54:	f8df 9060 	ldr.w	r9, [pc, #96]	; 7fb8 <att_read_mult_req+0x88>
	data.att = att;
    7f58:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    7f5a:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    7f5e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    7f62:	89ab      	ldrh	r3, [r5, #12]
    7f64:	2b01      	cmp	r3, #1
    7f66:	d806      	bhi.n	7f76 <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    7f68:	4b12      	ldr	r3, [pc, #72]	; (7fb4 <att_read_mult_req+0x84>)
    7f6a:	9a03      	ldr	r2, [sp, #12]
    7f6c:	2104      	movs	r1, #4
    7f6e:	4620      	mov	r0, r4
    7f70:	f7fe fc8d 	bl	688e <bt_l2cap_send_cb>
    7f74:	e018      	b.n	7fa8 <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    7f76:	4638      	mov	r0, r7
    7f78:	f00f fe88 	bl	17c8c <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7f7c:	ab01      	add	r3, sp, #4
    7f7e:	464a      	mov	r2, r9
    7f80:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    7f82:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    7f84:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7f88:	f000 fd98 	bl	8abc <bt_gatt_foreach_attr>
		if (data.err) {
    7f8c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    7f90:	2b00      	cmp	r3, #0
    7f92:	d0e6      	beq.n	7f62 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    7f94:	9803      	ldr	r0, [sp, #12]
    7f96:	f00f fdbb 	bl	17b10 <net_buf_unref>
    7f9a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    7f9e:	4632      	mov	r2, r6
    7fa0:	210e      	movs	r1, #14
    7fa2:	4620      	mov	r0, r4
    7fa4:	f7ff feb4 	bl	7d10 <send_err_rsp.part.9>
	return 0;
    7fa8:	2000      	movs	r0, #0
}
    7faa:	b007      	add	sp, #28
    7fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    7fb0:	200e      	movs	r0, #14
    7fb2:	e7fa      	b.n	7faa <att_read_mult_req+0x7a>
    7fb4:	00007b1f 	.word	0x00007b1f
    7fb8:	00007bd5 	.word	0x00007bd5

00007fbc <att_read_rsp>:
{
    7fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7fc0:	4607      	mov	r7, r0
    7fc2:	b086      	sub	sp, #24
    7fc4:	460c      	mov	r4, r1
    7fc6:	4690      	mov	r8, r2
	if (!handle) {
    7fc8:	461d      	mov	r5, r3
    7fca:	b3a3      	cbz	r3, 8036 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36>
	struct bt_conn *conn = att->chan.chan.conn;
    7fcc:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    7fce:	2214      	movs	r2, #20
    7fd0:	2100      	movs	r1, #0
    7fd2:	a801      	add	r0, sp, #4
    7fd4:	f7f8 fcb5 	bl	942 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    7fd8:	2200      	movs	r2, #0
    7fda:	4641      	mov	r1, r8
    7fdc:	4630      	mov	r0, r6
    7fde:	f7ff fe35 	bl	7c4c <bt_att_create_pdu>
    7fe2:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    7fe4:	b348      	cbz	r0, 803a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a>
	data.offset = offset;
    7fe6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    7fea:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    7fee:	2301      	movs	r3, #1
    7ff0:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7ff4:	4a12      	ldr	r2, [pc, #72]	; (8040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40>)
	data.att = att;
    7ff6:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7ff8:	ab01      	add	r3, sp, #4
    7ffa:	4629      	mov	r1, r5
    7ffc:	4628      	mov	r0, r5
    7ffe:	f000 fd5d 	bl	8abc <bt_gatt_foreach_attr>
	if (data.err) {
    8002:	f89d 7014 	ldrb.w	r7, [sp, #20]
    8006:	b17f      	cbz	r7, 8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>
		net_buf_unref(data.buf);
    8008:	9803      	ldr	r0, [sp, #12]
    800a:	f00f fd81 	bl	17b10 <net_buf_unref>
	if (!req) {
    800e:	b13c      	cbz	r4, 8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>
    8010:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8014:	462a      	mov	r2, r5
    8016:	4621      	mov	r1, r4
    8018:	4630      	mov	r0, r6
    801a:	f7ff fe79 	bl	7d10 <send_err_rsp.part.9>
		return 0;
    801e:	2400      	movs	r4, #0
}
    8020:	4620      	mov	r0, r4
    8022:	b006      	add	sp, #24
    8024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    8028:	4b06      	ldr	r3, [pc, #24]	; (8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>)
    802a:	9a03      	ldr	r2, [sp, #12]
    802c:	2104      	movs	r1, #4
    802e:	4630      	mov	r0, r6
    8030:	f7fe fc2d 	bl	688e <bt_l2cap_send_cb>
    8034:	e7f3      	b.n	801e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e>
		return BT_ATT_ERR_INVALID_HANDLE;
    8036:	2401      	movs	r4, #1
    8038:	e7f2      	b.n	8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>
		return BT_ATT_ERR_UNLIKELY;
    803a:	240e      	movs	r4, #14
    803c:	e7f0      	b.n	8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>
    803e:	bf00      	nop
    8040:	00007bd5 	.word	0x00007bd5
    8044:	00007b1f 	.word	0x00007b1f

00008048 <att_read_blob_req>:
{
    8048:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    804a:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    804c:	8813      	ldrh	r3, [r2, #0]
    804e:	8852      	ldrh	r2, [r2, #2]
    8050:	9200      	str	r2, [sp, #0]
    8052:	210c      	movs	r1, #12
    8054:	220d      	movs	r2, #13
    8056:	f7ff ffb1 	bl	7fbc <att_read_rsp>
}
    805a:	b003      	add	sp, #12
    805c:	f85d fb04 	ldr.w	pc, [sp], #4

00008060 <att_read_req>:
{
    8060:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    8062:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    8064:	2200      	movs	r2, #0
    8066:	881b      	ldrh	r3, [r3, #0]
    8068:	9200      	str	r2, [sp, #0]
    806a:	210a      	movs	r1, #10
    806c:	220b      	movs	r2, #11
    806e:	f7ff ffa5 	bl	7fbc <att_read_rsp>
}
    8072:	b003      	add	sp, #12
    8074:	f85d fb04 	ldr.w	pc, [sp], #4

00008078 <att_read_type_req>:
{
    8078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    807c:	898b      	ldrh	r3, [r1, #12]
    807e:	2b06      	cmp	r3, #6
{
    8080:	b08d      	sub	sp, #52	; 0x34
    8082:	4607      	mov	r7, r0
    8084:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    8086:	d001      	beq.n	808c <att_read_type_req+0x14>
    8088:	2b14      	cmp	r3, #20
    808a:	d152      	bne.n	8132 <att_read_type_req+0xba>
	req = (void *)buf->data;
    808c:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    808e:	2104      	movs	r1, #4
	req = (void *)buf->data;
    8090:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    8094:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    8098:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    809a:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    809c:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    80a0:	f00f fde4 	bl	17c6c <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    80a4:	4631      	mov	r1, r6
    80a6:	4640      	mov	r0, r8
    80a8:	f7ff fb54 	bl	7754 <uuid_create>
    80ac:	b198      	cbz	r0, 80d6 <att_read_type_req+0x5e>
	if (!start || !end) {
    80ae:	2d00      	cmp	r5, #0
    80b0:	d042      	beq.n	8138 <att_read_type_req+0xc0>
    80b2:	2c00      	cmp	r4, #0
    80b4:	d03f      	beq.n	8136 <att_read_type_req+0xbe>
	if (start > end) {
    80b6:	42a5      	cmp	r5, r4
    80b8:	d83e      	bhi.n	8138 <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
    80ba:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    80bc:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    80be:	2100      	movs	r1, #0
    80c0:	eb0d 0002 	add.w	r0, sp, r2
    80c4:	f7f8 fc3d 	bl	942 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    80c8:	2201      	movs	r2, #1
    80ca:	2109      	movs	r1, #9
    80cc:	4630      	mov	r0, r6
    80ce:	f7ff fdbd 	bl	7c4c <bt_att_create_pdu>
    80d2:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    80d4:	b908      	cbnz	r0, 80da <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
    80d6:	240e      	movs	r4, #14
    80d8:	e027      	b.n	812a <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    80da:	2101      	movs	r1, #1
    80dc:	3008      	adds	r0, #8
	data.att = att;
    80de:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
    80e0:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    80e4:	f00f fd72 	bl	17bcc <net_buf_simple_add>
	data.rsp->len = 0;
    80e8:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    80ea:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    80ec:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    80ee:	4621      	mov	r1, r4
	data.rsp->len = 0;
    80f0:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    80f2:	4a14      	ldr	r2, [pc, #80]	; (8144 <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    80f4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    80f8:	4628      	mov	r0, r5
    80fa:	ab06      	add	r3, sp, #24
    80fc:	f000 fcde 	bl	8abc <bt_gatt_foreach_attr>
	if (data.err) {
    8100:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    8104:	b15c      	cbz	r4, 811e <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
    8106:	9808      	ldr	r0, [sp, #32]
    8108:	f00f fd02 	bl	17b10 <net_buf_unref>
    810c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    8110:	462a      	mov	r2, r5
    8112:	2108      	movs	r1, #8
    8114:	4630      	mov	r0, r6
    8116:	f7ff fdfb 	bl	7d10 <send_err_rsp.part.9>
		return 0;
    811a:	2400      	movs	r4, #0
    811c:	e005      	b.n	812a <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    811e:	4b0a      	ldr	r3, [pc, #40]	; (8148 <att_read_type_req+0xd0>)
    8120:	9a08      	ldr	r2, [sp, #32]
    8122:	2104      	movs	r1, #4
    8124:	4630      	mov	r0, r6
    8126:	f7fe fbb2 	bl	688e <bt_l2cap_send_cb>
}
    812a:	4620      	mov	r0, r4
    812c:	b00d      	add	sp, #52	; 0x34
    812e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    8132:	2404      	movs	r4, #4
    8134:	e7f9      	b.n	812a <att_read_type_req+0xb2>
			*err = 0;
    8136:	4625      	mov	r5, r4
    8138:	2301      	movs	r3, #1
    813a:	462a      	mov	r2, r5
    813c:	2108      	movs	r1, #8
    813e:	4648      	mov	r0, r9
    8140:	e7e9      	b.n	8116 <att_read_type_req+0x9e>
    8142:	bf00      	nop
    8144:	00007673 	.word	0x00007673
    8148:	00007b1f 	.word	0x00007b1f

0000814c <att_find_type_req>:
{
    814c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    8150:	f8d0 9000 	ldr.w	r9, [r0]
{
    8154:	4680      	mov	r8, r0
	req = (void *)buf->data;
    8156:	4608      	mov	r0, r1
{
    8158:	b089      	sub	sp, #36	; 0x24
	req = (void *)buf->data;
    815a:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    815e:	468b      	mov	fp, r1
	value = net_buf_pull(buf, sizeof(*req));
    8160:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    8162:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    8164:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    8166:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    8168:	f00f fd80 	bl	17c6c <net_buf_simple_pull>
    816c:	4682      	mov	sl, r0
	if (!start || !end) {
    816e:	2d00      	cmp	r5, #0
    8170:	d057      	beq.n	8222 <att_find_type_req+0xd6>
    8172:	2400      	movs	r4, #0
    8174:	2f00      	cmp	r7, #0
    8176:	d053      	beq.n	8220 <att_find_type_req+0xd4>
	if (start > end) {
    8178:	42bd      	cmp	r5, r7
    817a:	d852      	bhi.n	8222 <att_find_type_req+0xd6>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    817c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8180:	a902      	add	r1, sp, #8
    8182:	a801      	add	r0, sp, #4
    8184:	f8ad 6006 	strh.w	r6, [sp, #6]
    8188:	f88d 4004 	strb.w	r4, [sp, #4]
    818c:	f88d 4008 	strb.w	r4, [sp, #8]
    8190:	f8ad 300a 	strh.w	r3, [sp, #10]
    8194:	f7fb f9f6 	bl	3584 <bt_uuid_cmp>
    8198:	4606      	mov	r6, r0
    819a:	b148      	cbz	r0, 81b0 <att_find_type_req+0x64>
    819c:	230a      	movs	r3, #10
    819e:	462a      	mov	r2, r5
    81a0:	2106      	movs	r1, #6
    81a2:	4648      	mov	r0, r9
    81a4:	f7ff fdb4 	bl	7d10 <send_err_rsp.part.9>
}
    81a8:	4620      	mov	r0, r4
    81aa:	b009      	add	sp, #36	; 0x24
    81ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_conn *conn = att->chan.chan.conn;
    81b0:	f8d8 9000 	ldr.w	r9, [r8]
				 buf->len);
    81b4:	f8bb 400c 	ldrh.w	r4, [fp, #12]
	memset(&data, 0, sizeof(data));
    81b8:	2214      	movs	r2, #20
    81ba:	4631      	mov	r1, r6
    81bc:	a803      	add	r0, sp, #12
    81be:	f7f8 fbc0 	bl	942 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    81c2:	4632      	mov	r2, r6
    81c4:	2107      	movs	r1, #7
    81c6:	4648      	mov	r0, r9
    81c8:	f7ff fd40 	bl	7c4c <bt_att_create_pdu>
    81cc:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    81ce:	b328      	cbz	r0, 821c <att_find_type_req+0xd0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    81d0:	230a      	movs	r3, #10
    81d2:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    81d6:	4a14      	ldr	r2, [pc, #80]	; (8228 <att_find_type_req+0xdc>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    81d8:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    81dc:	ab03      	add	r3, sp, #12
    81de:	4639      	mov	r1, r7
    81e0:	4628      	mov	r0, r5
	data.att = att;
    81e2:	f8cd 800c 	str.w	r8, [sp, #12]
	data.group = NULL;
    81e6:	9605      	str	r6, [sp, #20]
	data.value = value;
    81e8:	f8cd a018 	str.w	sl, [sp, #24]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    81ec:	f000 fc66 	bl	8abc <bt_gatt_foreach_attr>
	if (data.err) {
    81f0:	f89d 401d 	ldrb.w	r4, [sp, #29]
    81f4:	b15c      	cbz	r4, 820e <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    81f6:	9804      	ldr	r0, [sp, #16]
    81f8:	f00f fc8a 	bl	17b10 <net_buf_unref>
    81fc:	f89d 301d 	ldrb.w	r3, [sp, #29]
    8200:	462a      	mov	r2, r5
    8202:	2106      	movs	r1, #6
    8204:	4648      	mov	r0, r9
    8206:	f7ff fd83 	bl	7d10 <send_err_rsp.part.9>
		return 0;
    820a:	2400      	movs	r4, #0
    820c:	e7cc      	b.n	81a8 <att_find_type_req+0x5c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    820e:	4b07      	ldr	r3, [pc, #28]	; (822c <att_find_type_req+0xe0>)
    8210:	9a04      	ldr	r2, [sp, #16]
    8212:	2104      	movs	r1, #4
    8214:	4648      	mov	r0, r9
    8216:	f7fe fb3a 	bl	688e <bt_l2cap_send_cb>
    821a:	e7c5      	b.n	81a8 <att_find_type_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
    821c:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    821e:	e7c3      	b.n	81a8 <att_find_type_req+0x5c>
			*err = 0;
    8220:	463d      	mov	r5, r7
    8222:	2301      	movs	r3, #1
    8224:	e7ec      	b.n	8200 <att_find_type_req+0xb4>
    8226:	bf00      	nop
    8228:	00007549 	.word	0x00007549
    822c:	00007b1f 	.word	0x00007b1f

00008230 <att_find_info_req>:
{
    8230:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    8232:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    8234:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    8236:	881d      	ldrh	r5, [r3, #0]
{
    8238:	b085      	sub	sp, #20
    823a:	4607      	mov	r7, r0
	if (!start || !end) {
    823c:	b375      	cbz	r5, 829c <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    823e:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    8240:	b35c      	cbz	r4, 829a <att_find_info_req+0x6a>
	if (start > end) {
    8242:	42a5      	cmp	r5, r4
    8244:	d82a      	bhi.n	829c <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
    8246:	2210      	movs	r2, #16
    8248:	2100      	movs	r1, #0
    824a:	4668      	mov	r0, sp
    824c:	f7f8 fb79 	bl	942 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    8250:	2200      	movs	r2, #0
    8252:	2105      	movs	r1, #5
    8254:	4630      	mov	r0, r6
    8256:	f7ff fcf9 	bl	7c4c <bt_att_create_pdu>
    825a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    825c:	b910      	cbnz	r0, 8264 <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
    825e:	200e      	movs	r0, #14
}
    8260:	b005      	add	sp, #20
    8262:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    8264:	4621      	mov	r1, r4
    8266:	466b      	mov	r3, sp
    8268:	4a0d      	ldr	r2, [pc, #52]	; (82a0 <att_find_info_req+0x70>)
	data.att = att;
    826a:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    826c:	4628      	mov	r0, r5
    826e:	f000 fc25 	bl	8abc <bt_gatt_foreach_attr>
	if (!data.rsp) {
    8272:	9c02      	ldr	r4, [sp, #8]
    8274:	b94c      	cbnz	r4, 828a <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
    8276:	9801      	ldr	r0, [sp, #4]
    8278:	f00f fc4a 	bl	17b10 <net_buf_unref>
    827c:	230a      	movs	r3, #10
    827e:	462a      	mov	r2, r5
    8280:	2104      	movs	r1, #4
    8282:	4630      	mov	r0, r6
    8284:	f7ff fd44 	bl	7d10 <send_err_rsp.part.9>
    8288:	e005      	b.n	8296 <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    828a:	4b06      	ldr	r3, [pc, #24]	; (82a4 <att_find_info_req+0x74>)
    828c:	9a01      	ldr	r2, [sp, #4]
    828e:	2104      	movs	r1, #4
    8290:	4630      	mov	r0, r6
    8292:	f7fe fafc 	bl	688e <bt_l2cap_send_cb>
		return 0;
    8296:	2000      	movs	r0, #0
    8298:	e7e2      	b.n	8260 <att_find_info_req+0x30>
			*err = 0;
    829a:	4625      	mov	r5, r4
    829c:	2301      	movs	r3, #1
    829e:	e7ee      	b.n	827e <att_find_info_req+0x4e>
    82a0:	000074af 	.word	0x000074af
    82a4:	00007b1f 	.word	0x00007b1f

000082a8 <att_write_rsp.part.10.constprop.13>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    82a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82ac:	b086      	sub	sp, #24
    82ae:	4690      	mov	r8, r2
    82b0:	4605      	mov	r5, r0
    82b2:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    82b4:	2218      	movs	r2, #24
    82b6:	2100      	movs	r1, #0
    82b8:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    82ba:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
    82bc:	f7f8 fb41 	bl	942 <memset>
	if (rsp) {
    82c0:	f1b8 0f00 	cmp.w	r8, #0
    82c4:	d11f      	bne.n	8306 <att_write_rsp.part.10.constprop.13+0x5e>
	data.offset = offset;
    82c6:	2300      	movs	r3, #0
    82c8:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    82cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    82ce:	9303      	str	r3, [sp, #12]
	data.len = len;
    82d0:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    82d4:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    82d8:	2301      	movs	r3, #1
    82da:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    82de:	4a1b      	ldr	r2, [pc, #108]	; (834c <att_write_rsp.part.10.constprop.13+0xa4>)
	data.conn = conn;
    82e0:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    82e2:	466b      	mov	r3, sp
    82e4:	4639      	mov	r1, r7
    82e6:	4638      	mov	r0, r7
	data.op = op;
    82e8:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    82ec:	f000 fbe6 	bl	8abc <bt_gatt_foreach_attr>
	if (data.err) {
    82f0:	f89d 4014 	ldrb.w	r4, [sp, #20]
    82f4:	b98c      	cbnz	r4, 831a <att_write_rsp.part.10.constprop.13+0x72>
	if (data.buf) {
    82f6:	9a01      	ldr	r2, [sp, #4]
    82f8:	b1b2      	cbz	r2, 8328 <att_write_rsp.part.10.constprop.13+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    82fa:	4b15      	ldr	r3, [pc, #84]	; (8350 <att_write_rsp.part.10.constprop.13+0xa8>)
    82fc:	2104      	movs	r1, #4
    82fe:	4628      	mov	r0, r5
    8300:	f7fe fac5 	bl	688e <bt_l2cap_send_cb>
    8304:	e011      	b.n	832a <att_write_rsp.part.10.constprop.13+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    8306:	2200      	movs	r2, #0
    8308:	4641      	mov	r1, r8
    830a:	4628      	mov	r0, r5
    830c:	f7ff fc9e 	bl	7c4c <bt_att_create_pdu>
    8310:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    8312:	2800      	cmp	r0, #0
    8314:	d1d7      	bne.n	82c6 <att_write_rsp.part.10.constprop.13+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    8316:	240e      	movs	r4, #14
    8318:	e007      	b.n	832a <att_write_rsp.part.10.constprop.13+0x82>
		if (rsp) {
    831a:	f1b8 0f00 	cmp.w	r8, #0
    831e:	d00f      	beq.n	8340 <att_write_rsp.part.10.constprop.13+0x98>
			net_buf_unref(data.buf);
    8320:	9801      	ldr	r0, [sp, #4]
    8322:	f00f fbf5 	bl	17b10 <net_buf_unref>
	if (!req) {
    8326:	b926      	cbnz	r6, 8332 <att_write_rsp.part.10.constprop.13+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8328:	2400      	movs	r4, #0
}
    832a:	4620      	mov	r0, r4
    832c:	b006      	add	sp, #24
    832e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8332:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8336:	463a      	mov	r2, r7
    8338:	4631      	mov	r1, r6
    833a:	4628      	mov	r0, r5
    833c:	f7ff fce8 	bl	7d10 <send_err_rsp.part.9>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8340:	2e18      	cmp	r6, #24
    8342:	d1f1      	bne.n	8328 <att_write_rsp.part.10.constprop.13+0x80>
    8344:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8348:	e7ef      	b.n	832a <att_write_rsp.part.10.constprop.13+0x82>
    834a:	bf00      	nop
    834c:	00007b7b 	.word	0x00007b7b
    8350:	00007b1f 	.word	0x00007b1f

00008354 <att_signed_write_cmd>:
{
    8354:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    8358:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    835a:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    835c:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    8360:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    8362:	4620      	mov	r0, r4
    8364:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    8366:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    836a:	f00f fc66 	bl	17c3a <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    836e:	4629      	mov	r1, r5
    8370:	4630      	mov	r0, r6
    8372:	f002 f9ed 	bl	a750 <bt_smp_sign_verify>
	if (err) {
    8376:	4607      	mov	r7, r0
    8378:	b9c8      	cbnz	r0, 83ae <att_signed_write_cmd+0x5a>
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    837a:	2101      	movs	r1, #1
    837c:	4620      	mov	r0, r4
    837e:	f00f fc75 	bl	17c6c <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    8382:	2102      	movs	r1, #2
    8384:	4620      	mov	r0, r4
    8386:	f00f fc71 	bl	17c6c <net_buf_simple_pull>
	if (!handle) {
    838a:	f1b8 0f00 	cmp.w	r8, #0
    838e:	d010      	beq.n	83b2 <att_signed_write_cmd+0x5e>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    8390:	7b2b      	ldrb	r3, [r5, #12]
    8392:	3b0c      	subs	r3, #12
    8394:	b2db      	uxtb	r3, r3
    8396:	9301      	str	r3, [sp, #4]
    8398:	68ab      	ldr	r3, [r5, #8]
    839a:	9300      	str	r3, [sp, #0]
    839c:	463a      	mov	r2, r7
    839e:	4643      	mov	r3, r8
    83a0:	4639      	mov	r1, r7
    83a2:	4630      	mov	r0, r6
    83a4:	f7ff ff80 	bl	82a8 <att_write_rsp.part.10.constprop.13>
}
    83a8:	b002      	add	sp, #8
    83aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
    83ae:	2000      	movs	r0, #0
    83b0:	e7fa      	b.n	83a8 <att_signed_write_cmd+0x54>
		return BT_ATT_ERR_INVALID_HANDLE;
    83b2:	2001      	movs	r0, #1
    83b4:	e7f8      	b.n	83a8 <att_signed_write_cmd+0x54>

000083b6 <att_write_cmd>:
{
    83b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    83b8:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    83ba:	f101 0008 	add.w	r0, r1, #8
{
    83be:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    83c0:	f00f fc64 	bl	17c8c <net_buf_simple_pull_le16>
	if (!handle) {
    83c4:	4603      	mov	r3, r0
    83c6:	b150      	cbz	r0, 83de <att_write_cmd+0x28>
    83c8:	7b22      	ldrb	r2, [r4, #12]
    83ca:	9201      	str	r2, [sp, #4]
    83cc:	68a2      	ldr	r2, [r4, #8]
    83ce:	9200      	str	r2, [sp, #0]
    83d0:	2200      	movs	r2, #0
    83d2:	4611      	mov	r1, r2
    83d4:	4628      	mov	r0, r5
    83d6:	f7ff ff67 	bl	82a8 <att_write_rsp.part.10.constprop.13>
}
    83da:	b003      	add	sp, #12
    83dc:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    83de:	2001      	movs	r0, #1
    83e0:	e7fb      	b.n	83da <att_write_cmd+0x24>

000083e2 <att_write_req>:
{
    83e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    83e4:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    83e6:	f101 0008 	add.w	r0, r1, #8
{
    83ea:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    83ec:	f00f fc4e 	bl	17c8c <net_buf_simple_pull_le16>
	if (!handle) {
    83f0:	4603      	mov	r3, r0
    83f2:	b150      	cbz	r0, 840a <att_write_req+0x28>
    83f4:	7b22      	ldrb	r2, [r4, #12]
    83f6:	9201      	str	r2, [sp, #4]
    83f8:	68a2      	ldr	r2, [r4, #8]
    83fa:	9200      	str	r2, [sp, #0]
    83fc:	2112      	movs	r1, #18
    83fe:	2213      	movs	r2, #19
    8400:	4628      	mov	r0, r5
    8402:	f7ff ff51 	bl	82a8 <att_write_rsp.part.10.constprop.13>
}
    8406:	b003      	add	sp, #12
    8408:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    840a:	2001      	movs	r0, #1
    840c:	e7fb      	b.n	8406 <att_write_req+0x24>
	...

00008410 <bt_att_init>:

void bt_att_init(void)
{
    8410:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    8412:	4803      	ldr	r0, [pc, #12]	; (8420 <bt_att_init+0x10>)
    8414:	f7fe f9dc 	bl	67d0 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    8418:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    841c:	f000 bb38 	b.w	8a90 <bt_gatt_init>
    8420:	2000de60 	.word	0x2000de60

00008424 <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    8424:	b510      	push	{r4, lr}
    8426:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    8428:	b1d8      	cbz	r0, 8462 <bt_att_req_send+0x3e>
    842a:	b1d1      	cbz	r1, 8462 <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    842c:	f7ff fb5a 	bl	7ae4 <att_chan_get>
	if (!att) {
    8430:	4603      	mov	r3, r0
    8432:	b1c8      	cbz	r0, 8468 <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    8434:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    8438:	b172      	cbz	r2, 8458 <bt_att_req_send+0x34>
	if (!list->tail) {
    843a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
	node->next = NULL;
    843e:	2000      	movs	r0, #0
    8440:	6020      	str	r0, [r4, #0]
	if (!list->tail) {
    8442:	b92a      	cbnz	r2, 8450 <bt_att_req_send+0x2c>
		list->tail = node;
    8444:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
		list->head = node;
    8448:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    844c:	4610      	mov	r0, r2
    844e:	bd10      	pop	{r4, pc}
		list->tail->next = node;
    8450:	6014      	str	r4, [r2, #0]
		list->tail = node;
    8452:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
    8456:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    8458:	4621      	mov	r1, r4
}
    845a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    845e:	f7ff b9e2 	b.w	7826 <att_send_req>
		return -EINVAL;
    8462:	f06f 0015 	mvn.w	r0, #21
    8466:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    8468:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    846c:	bd10      	pop	{r4, pc}

0000846e <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    846e:	4770      	bx	lr

00008470 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    8470:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    8472:	2000      	movs	r0, #0
    8474:	4770      	bx	lr

00008476 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    8476:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
    8478:	2300      	movs	r3, #0
    847a:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    847c:	461a      	mov	r2, r3
    847e:	42aa      	cmp	r2, r5
    8480:	d107      	bne.n	8492 <gatt_ccc_changed+0x1c>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    8482:	890a      	ldrh	r2, [r1, #8]
    8484:	429a      	cmp	r2, r3
    8486:	d00d      	beq.n	84a4 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    8488:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    848a:	68ca      	ldr	r2, [r1, #12]
	}
}
    848c:	bc30      	pop	{r4, r5}
		ccc->cfg_changed(attr, value);
    848e:	4619      	mov	r1, r3
    8490:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
    8492:	680c      	ldr	r4, [r1, #0]
    8494:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    8498:	3201      	adds	r2, #1
    849a:	8924      	ldrh	r4, [r4, #8]
    849c:	42a3      	cmp	r3, r4
    849e:	bf38      	it	cc
    84a0:	4623      	movcc	r3, r4
    84a2:	e7ec      	b.n	847e <gatt_ccc_changed+0x8>
}
    84a4:	bc30      	pop	{r4, r5}
    84a6:	4770      	bx	lr

000084a8 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    84a8:	b410      	push	{r4}
    84aa:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    84ac:	69dc      	ldr	r4, [r3, #28]
    84ae:	460a      	mov	r2, r1
    84b0:	6999      	ldr	r1, [r3, #24]
    84b2:	4623      	mov	r3, r4
}
    84b4:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    84b6:	4718      	bx	r3

000084b8 <bt_gatt_attr_write_ccc>:
{
    84b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    84bc:	4689      	mov	r9, r1
    84be:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
    84c2:	f8d9 400c 	ldr.w	r4, [r9, #12]
	if (offset > sizeof(u16_t)) {
    84c6:	2902      	cmp	r1, #2
{
    84c8:	4682      	mov	sl, r0
	if (offset > sizeof(u16_t)) {
    84ca:	d84d      	bhi.n	8568 <bt_gatt_attr_write_ccc+0xb0>
	if (offset + len > sizeof(u16_t)) {
    84cc:	4419      	add	r1, r3
    84ce:	2902      	cmp	r1, #2
    84d0:	461e      	mov	r6, r3
    84d2:	dc4c      	bgt.n	856e <bt_gatt_attr_write_ccc+0xb6>
	return ((u16_t)src[1] << 8) | src[0];
    84d4:	7853      	ldrb	r3, [r2, #1]
    84d6:	7817      	ldrb	r7, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    84d8:	2500      	movs	r5, #0
    84da:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
    84de:	6863      	ldr	r3, [r4, #4]
    84e0:	429d      	cmp	r5, r3
    84e2:	d207      	bcs.n	84f4 <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    84e4:	6821      	ldr	r1, [r4, #0]
    84e6:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    84ea:	3101      	adds	r1, #1
    84ec:	4650      	mov	r0, sl
    84ee:	f7fd fda7 	bl	6040 <bt_conn_addr_le_cmp>
    84f2:	b948      	cbnz	r0, 8508 <bt_gatt_attr_write_ccc+0x50>
	if (i == ccc->cfg_len) {
    84f4:	6863      	ldr	r3, [r4, #4]
    84f6:	429d      	cmp	r5, r3
    84f8:	d130      	bne.n	855c <bt_gatt_attr_write_ccc+0xa4>
    84fa:	f04f 0800 	mov.w	r8, #0
		for (i = 0; i < ccc->cfg_len; i++) {
    84fe:	4545      	cmp	r5, r8
    8500:	d104      	bne.n	850c <bt_gatt_attr_write_ccc+0x54>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    8502:	f06f 0610 	mvn.w	r6, #16
    8506:	e026      	b.n	8556 <bt_gatt_attr_write_ccc+0x9e>
	for (i = 0; i < ccc->cfg_len; i++) {
    8508:	3501      	adds	r5, #1
    850a:	e7e8      	b.n	84de <bt_gatt_attr_write_ccc+0x26>
    850c:	ea4f 1b08 	mov.w	fp, r8, lsl #4
			if (ccc->cfg[i].valid) {
    8510:	6823      	ldr	r3, [r4, #0]
    8512:	eb03 000b 	add.w	r0, r3, fp
    8516:	f813 300b 	ldrb.w	r3, [r3, fp]
    851a:	b113      	cbz	r3, 8522 <bt_gatt_attr_write_ccc+0x6a>
		for (i = 0; i < ccc->cfg_len; i++) {
    851c:	f108 0801 	add.w	r8, r8, #1
    8520:	e7ed      	b.n	84fe <bt_gatt_attr_write_ccc+0x46>
    8522:	2207      	movs	r2, #7
    8524:	f10a 0148 	add.w	r1, sl, #72	; 0x48
    8528:	3001      	adds	r0, #1
    852a:	f7f8 f9de 	bl	8ea <memcpy>
			if (value) {
    852e:	b11f      	cbz	r7, 8538 <bt_gatt_attr_write_ccc+0x80>
				ccc->cfg[i].valid = true;
    8530:	6823      	ldr	r3, [r4, #0]
    8532:	2201      	movs	r2, #1
    8534:	f803 200b 	strb.w	r2, [r3, fp]
		if (i == ccc->cfg_len) {
    8538:	6863      	ldr	r3, [r4, #4]
    853a:	4598      	cmp	r8, r3
    853c:	d0e1      	beq.n	8502 <bt_gatt_attr_write_ccc+0x4a>
    853e:	4645      	mov	r5, r8
	ccc->cfg[i].value = value;
    8540:	6823      	ldr	r3, [r4, #0]
    8542:	eb03 1505 	add.w	r5, r3, r5, lsl #4
	if (ccc->cfg[i].value != ccc->value) {
    8546:	8923      	ldrh	r3, [r4, #8]
	ccc->cfg[i].value = value;
    8548:	812f      	strh	r7, [r5, #8]
	if (ccc->cfg[i].value != ccc->value) {
    854a:	42bb      	cmp	r3, r7
    854c:	d003      	beq.n	8556 <bt_gatt_attr_write_ccc+0x9e>
		gatt_ccc_changed(attr, ccc);
    854e:	4621      	mov	r1, r4
    8550:	4648      	mov	r0, r9
    8552:	f7ff ff90 	bl	8476 <gatt_ccc_changed>
}
    8556:	4630      	mov	r0, r6
    8558:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (!value) {
    855c:	2f00      	cmp	r7, #0
    855e:	d1ef      	bne.n	8540 <bt_gatt_attr_write_ccc+0x88>
		ccc->cfg[i].valid = false;
    8560:	6822      	ldr	r2, [r4, #0]
    8562:	012b      	lsls	r3, r5, #4
    8564:	54d7      	strb	r7, [r2, r3]
    8566:	e7eb      	b.n	8540 <bt_gatt_attr_write_ccc+0x88>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    8568:	f06f 0606 	mvn.w	r6, #6
    856c:	e7f3      	b.n	8556 <bt_gatt_attr_write_ccc+0x9e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    856e:	f06f 060c 	mvn.w	r6, #12
    8572:	e7f0      	b.n	8556 <bt_gatt_attr_write_ccc+0x9e>

00008574 <gatt_notify>:
{
    8574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8578:	468a      	mov	sl, r1
    857a:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    857c:	211b      	movs	r1, #27
    857e:	1c9a      	adds	r2, r3, #2
{
    8580:	4680      	mov	r8, r0
    8582:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    8584:	f7ff fb62 	bl	7c4c <bt_att_create_pdu>
	if (!buf) {
    8588:	4604      	mov	r4, r0
    858a:	b1d0      	cbz	r0, 85c2 <gatt_notify+0x4e>
	nfy = net_buf_add(buf, sizeof(*nfy));
    858c:	f100 0708 	add.w	r7, r0, #8
    8590:	2102      	movs	r1, #2
    8592:	4638      	mov	r0, r7
    8594:	f00f fb1a 	bl	17bcc <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    8598:	4605      	mov	r5, r0
	net_buf_add(buf, len);
    859a:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    859c:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    85a0:	4638      	mov	r0, r7
    85a2:	f00f fb13 	bl	17bcc <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    85a6:	4632      	mov	r2, r6
    85a8:	4649      	mov	r1, r9
    85aa:	4628      	mov	r0, r5
    85ac:	f7f8 f99d 	bl	8ea <memcpy>
    85b0:	4640      	mov	r0, r8
    85b2:	2300      	movs	r3, #0
    85b4:	4622      	mov	r2, r4
    85b6:	2104      	movs	r1, #4
    85b8:	f7fe f969 	bl	688e <bt_l2cap_send_cb>
	return 0;
    85bc:	2000      	movs	r0, #0
    85be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
    85c2:	f06f 000b 	mvn.w	r0, #11
}
    85c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000085cc <gatt_indicate>:
{
	struct net_buf *buf;
	struct bt_att_indicate *ind;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
    85cc:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
{
    85ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    85d2:	3202      	adds	r2, #2
{
    85d4:	460c      	mov	r4, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    85d6:	211d      	movs	r1, #29
{
    85d8:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    85da:	f7ff fb37 	bl	7c4c <bt_att_create_pdu>
	if (!buf) {
    85de:	4605      	mov	r5, r0
    85e0:	b320      	cbz	r0, 862c <gatt_indicate+0x60>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, params->attr->handle);

	ind = net_buf_add(buf, sizeof(*ind));
    85e2:	f100 0608 	add.w	r6, r0, #8
    85e6:	2102      	movs	r1, #2
    85e8:	4630      	mov	r0, r6
    85ea:	f00f faef 	bl	17bcc <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    85ee:	69a3      	ldr	r3, [r4, #24]

	net_buf_add(buf, params->len);
    85f0:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    85f2:	8a1b      	ldrh	r3, [r3, #16]
    85f4:	4607      	mov	r7, r0
	net_buf_add(buf, params->len);
    85f6:	4630      	mov	r0, r6
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    85f8:	f827 3b02 	strh.w	r3, [r7], #2
	net_buf_add(buf, params->len);
    85fc:	f00f fae6 	bl	17bcc <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    8600:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    8602:	6a21      	ldr	r1, [r4, #32]
    8604:	4638      	mov	r0, r7
    8606:	f7f8 f970 	bl	8ea <memcpy>
		req->func = func;
    860a:	4b0a      	ldr	r3, [pc, #40]	; (8634 <gatt_indicate+0x68>)
    860c:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    860e:	2300      	movs	r3, #0
		req->buf = buf;
    8610:	6125      	str	r5, [r4, #16]
		req->destroy = destroy;
    8612:	60a3      	str	r3, [r4, #8]
		err = bt_att_req_send(conn, req);
    8614:	4621      	mov	r1, r4
    8616:	4640      	mov	r0, r8
    8618:	f7ff ff04 	bl	8424 <bt_att_req_send>
	if (err) {
    861c:	4604      	mov	r4, r0
    861e:	b110      	cbz	r0, 8626 <gatt_indicate+0x5a>
		net_buf_unref(buf);
    8620:	4628      	mov	r0, r5
    8622:	f00f fa75 	bl	17b10 <net_buf_unref>

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
    8626:	4620      	mov	r0, r4
    8628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOMEM;
    862c:	f06f 040b 	mvn.w	r4, #11
    8630:	e7f9      	b.n	8626 <gatt_indicate+0x5a>
    8632:	bf00      	nop
    8634:	000084a9 	.word	0x000084a9

00008638 <gatt_register>:
	if (sys_slist_is_empty(&db)) {
    8638:	4a19      	ldr	r2, [pc, #100]	; (86a0 <gatt_register+0x68>)
	struct bt_gatt_attr *attrs = svc->attrs;
    863a:	6801      	ldr	r1, [r0, #0]
	if (sys_slist_is_empty(&db)) {
    863c:	6813      	ldr	r3, [r2, #0]
{
    863e:	b570      	push	{r4, r5, r6, lr}
	u16_t count = svc->attr_count;
    8640:	8885      	ldrh	r5, [r0, #4]
	if (sys_slist_is_empty(&db)) {
    8642:	b153      	cbz	r3, 865a <gatt_register+0x22>
    8644:	6853      	ldr	r3, [r2, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    8646:	b343      	cbz	r3, 869a <gatt_register+0x62>
	handle = last->attrs[last->attr_count - 1].handle;
    8648:	f833 4c04 	ldrh.w	r4, [r3, #-4]
    864c:	f853 3c08 	ldr.w	r3, [r3, #-8]
    8650:	2614      	movs	r6, #20
    8652:	fb06 3304 	mla	r3, r6, r4, r3
    8656:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    865a:	2414      	movs	r4, #20
    865c:	fb04 1505 	mla	r5, r4, r5, r1
	for (; attrs && count; attrs++, count--) {
    8660:	b109      	cbz	r1, 8666 <gatt_register+0x2e>
    8662:	42a9      	cmp	r1, r5
    8664:	d108      	bne.n	8678 <gatt_register+0x40>
	node->next = NULL;
    8666:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    8668:	f100 0108 	add.w	r1, r0, #8
    866c:	6083      	str	r3, [r0, #8]
	if (!list->tail) {
    866e:	6850      	ldr	r0, [r2, #4]
    8670:	b978      	cbnz	r0, 8692 <gatt_register+0x5a>
		list->tail = node;
    8672:	6051      	str	r1, [r2, #4]
		list->head = node;
    8674:	6011      	str	r1, [r2, #0]
    8676:	bd70      	pop	{r4, r5, r6, pc}
		if (!attrs->handle) {
    8678:	8a0c      	ldrh	r4, [r1, #16]
    867a:	b92c      	cbnz	r4, 8688 <gatt_register+0x50>
			attrs->handle = ++handle;
    867c:	3301      	adds	r3, #1
    867e:	b29c      	uxth	r4, r3
    8680:	820c      	strh	r4, [r1, #16]
	for (; attrs && count; attrs++, count--) {
    8682:	3114      	adds	r1, #20
    8684:	4623      	mov	r3, r4
    8686:	e7eb      	b.n	8660 <gatt_register+0x28>
		} else if (attrs->handle > handle) {
    8688:	42a3      	cmp	r3, r4
    868a:	d3fa      	bcc.n	8682 <gatt_register+0x4a>
			return -EINVAL;
    868c:	f06f 0015 	mvn.w	r0, #21
    8690:	bd70      	pop	{r4, r5, r6, pc}
		list->tail->next = node;
    8692:	6001      	str	r1, [r0, #0]
		list->tail = node;
    8694:	6051      	str	r1, [r2, #4]
	return 0;
    8696:	4618      	mov	r0, r3
    8698:	bd70      	pop	{r4, r5, r6, pc}
	handle = last->attrs[last->attr_count - 1].handle;
    869a:	681b      	ldr	r3, [r3, #0]
    869c:	deff      	udf	#255	; 0xff
    869e:	bf00      	nop
    86a0:	2000069c 	.word	0x2000069c

000086a4 <sc_indicate.constprop.17>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    86a4:	b510      	push	{r4, lr}
    86a6:	4b17      	ldr	r3, [pc, #92]	; (8704 <sc_indicate.constprop.17+0x60>)
    86a8:	f3bf 8f5b 	dmb	ish
    86ac:	f103 0254 	add.w	r2, r3, #84	; 0x54
    86b0:	e852 4f00 	ldrex	r4, [r2]
    86b4:	f044 0e01 	orr.w	lr, r4, #1
    86b8:	e842 ec00 	strex	ip, lr, [r2]
    86bc:	f1bc 0f00 	cmp.w	ip, #0
    86c0:	d1f6      	bne.n	86b0 <sc_indicate.constprop.17+0xc>
    86c2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    86c6:	07e2      	lsls	r2, r4, #31
    86c8:	d402      	bmi.n	86d0 <sc_indicate.constprop.17+0x2c>
		sc->start = start;
    86ca:	8518      	strh	r0, [r3, #40]	; 0x28
		*end = new_end;
    86cc:	8559      	strh	r1, [r3, #42]	; 0x2a
    86ce:	e00a      	b.n	86e6 <sc_indicate.constprop.17+0x42>
	if (new_start >= *start && new_end <= *end) {
    86d0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    86d2:	4282      	cmp	r2, r0
    86d4:	d803      	bhi.n	86de <sc_indicate.constprop.17+0x3a>
    86d6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    86d8:	428a      	cmp	r2, r1
    86da:	d301      	bcc.n	86e0 <sc_indicate.constprop.17+0x3c>
    86dc:	bd10      	pop	{r4, pc}
		*start = new_start;
    86de:	8518      	strh	r0, [r3, #40]	; 0x28
	if (*end < new_end) {
    86e0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    86e2:	428a      	cmp	r2, r1
    86e4:	d3f2      	bcc.n	86cc <sc_indicate.constprop.17+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    86e6:	f3bf 8f5b 	dmb	ish
    86ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    86ec:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    86f0:	079b      	lsls	r3, r3, #30
    86f2:	d406      	bmi.n	8702 <sc_indicate.constprop.17+0x5e>
    86f4:	220a      	movs	r2, #10
    86f6:	4904      	ldr	r1, [pc, #16]	; (8708 <sc_indicate.constprop.17+0x64>)
    86f8:	4804      	ldr	r0, [pc, #16]	; (870c <sc_indicate.constprop.17+0x68>)
}
    86fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    86fe:	f017 bc49 	b.w	1ff94 <k_delayed_work_submit_to_queue>
    8702:	bd10      	pop	{r4, pc}
    8704:	200006a4 	.word	0x200006a4
    8708:	200006d0 	.word	0x200006d0
    870c:	20005218 	.word	0x20005218

00008710 <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    8710:	6882      	ldr	r2, [r0, #8]
    8712:	4b19      	ldr	r3, [pc, #100]	; (8778 <connected_cb+0x68>)
    8714:	429a      	cmp	r2, r3
{
    8716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    871a:	4607      	mov	r7, r0
    871c:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    871e:	d126      	bne.n	876e <connected_cb+0x5e>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    8720:	68c5      	ldr	r5, [r0, #12]

	for (i = 0; i < ccc->cfg_len; i++) {
    8722:	2600      	movs	r6, #0
    8724:	686b      	ldr	r3, [r5, #4]
    8726:	429e      	cmp	r6, r3
    8728:	d221      	bcs.n	876e <connected_cb+0x5e>
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    872a:	6829      	ldr	r1, [r5, #0]
    872c:	ea4f 1806 	mov.w	r8, r6, lsl #4
    8730:	4441      	add	r1, r8
    8732:	3101      	adds	r1, #1
    8734:	4620      	mov	r0, r4
    8736:	f7fd fc83 	bl	6040 <bt_conn_addr_le_cmp>
    873a:	b9d8      	cbnz	r0, 8774 <connected_cb+0x64>
			continue;
		}

		if (ccc->cfg[i].value) {
    873c:	682b      	ldr	r3, [r5, #0]
    873e:	4443      	add	r3, r8
    8740:	891b      	ldrh	r3, [r3, #8]
    8742:	b1bb      	cbz	r3, 8774 <connected_cb+0x64>
			gatt_ccc_changed(attr, ccc);
    8744:	4629      	mov	r1, r5
    8746:	4638      	mov	r0, r7
    8748:	f7ff fe95 	bl	8476 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    874c:	682c      	ldr	r4, [r5, #0]
    874e:	4b0b      	ldr	r3, [pc, #44]	; (877c <connected_cb+0x6c>)
    8750:	429c      	cmp	r4, r3
    8752:	d10c      	bne.n	876e <connected_cb+0x5e>
				sc_restore(&ccc->cfg[i]);
    8754:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    8756:	89a0      	ldrh	r0, [r4, #12]
    8758:	89e1      	ldrh	r1, [r4, #14]
    875a:	b900      	cbnz	r0, 875e <connected_cb+0x4e>
    875c:	b139      	cbz	r1, 876e <connected_cb+0x5e>
	sc_indicate(&gatt_sc, data->start, data->end);
    875e:	f7ff ffa1 	bl	86a4 <sc_indicate.constprop.17>
	memset(cfg->data, 0, sizeof(cfg->data));
    8762:	2204      	movs	r2, #4
    8764:	2100      	movs	r1, #0
    8766:	f104 000c 	add.w	r0, r4, #12
    876a:	f7f8 f8ea 	bl	942 <memset>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    876e:	2001      	movs	r0, #1
    8770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    8774:	3601      	adds	r6, #1
    8776:	e7d5      	b.n	8724 <connected_cb+0x14>
    8778:	000084b9 	.word	0x000084b9
    877c:	200006fc 	.word	0x200006fc

00008780 <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8780:	490d      	ldr	r1, [pc, #52]	; (87b8 <sc_indicate_rsp+0x38>)
    8782:	f3bf 8f5b 	dmb	ish
    8786:	f101 0354 	add.w	r3, r1, #84	; 0x54
    878a:	e853 2f00 	ldrex	r2, [r3]
    878e:	f022 0202 	bic.w	r2, r2, #2
    8792:	e843 2000 	strex	r0, r2, [r3]
    8796:	2800      	cmp	r0, #0
    8798:	d1f7      	bne.n	878a <sc_indicate_rsp+0xa>
    879a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    879e:	f3bf 8f5b 	dmb	ish
    87a2:	6d4b      	ldr	r3, [r1, #84]	; 0x54
    87a4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    87a8:	07db      	lsls	r3, r3, #31
    87aa:	d504      	bpl.n	87b6 <sc_indicate_rsp+0x36>
    87ac:	2200      	movs	r2, #0
    87ae:	312c      	adds	r1, #44	; 0x2c
    87b0:	4802      	ldr	r0, [pc, #8]	; (87bc <sc_indicate_rsp+0x3c>)
    87b2:	f017 bbef 	b.w	1ff94 <k_delayed_work_submit_to_queue>
    87b6:	4770      	bx	lr
    87b8:	200006a4 	.word	0x200006a4
    87bc:	20005218 	.word	0x20005218

000087c0 <read_appearance>:
{
    87c0:	b513      	push	{r0, r1, r4, lr}
    87c2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    87c6:	4610      	mov	r0, r2
	if (offset > value_len) {
    87c8:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    87ca:	f04f 0200 	mov.w	r2, #0
    87ce:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    87d2:	d80d      	bhi.n	87f0 <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
    87d4:	f1c1 0402 	rsb	r4, r1, #2
    87d8:	429c      	cmp	r4, r3
    87da:	bfa8      	it	ge
    87dc:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    87de:	f10d 0306 	add.w	r3, sp, #6
    87e2:	4622      	mov	r2, r4
    87e4:	4419      	add	r1, r3
    87e6:	f7f8 f880 	bl	8ea <memcpy>
}
    87ea:	4620      	mov	r0, r4
    87ec:	b002      	add	sp, #8
    87ee:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    87f0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    87f4:	e7f9      	b.n	87ea <read_appearance+0x2a>
	...

000087f8 <disconnected_cb>:

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    87f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    87fc:	6882      	ldr	r2, [r0, #8]
    87fe:	4b24      	ldr	r3, [pc, #144]	; (8890 <disconnected_cb+0x98>)
    8800:	429a      	cmp	r2, r3
{
    8802:	4607      	mov	r7, r0
    8804:	4688      	mov	r8, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    8806:	d129      	bne.n	885c <disconnected_cb+0x64>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    8808:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    880a:	8923      	ldrh	r3, [r4, #8]
    880c:	b333      	cbz	r3, 885c <disconnected_cb+0x64>
    880e:	2600      	movs	r6, #0

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    8810:	f101 0948 	add.w	r9, r1, #72	; 0x48
	for (i = 0; i < ccc->cfg_len; i++) {
    8814:	6863      	ldr	r3, [r4, #4]
    8816:	429e      	cmp	r6, r3
    8818:	d30b      	bcc.n	8832 <disconnected_cb+0x3a>
			}
		}
	}

	/* Reset value while disconnected */
	memset(&ccc->value, 0, sizeof(ccc->value));
    881a:	2202      	movs	r2, #2
    881c:	2100      	movs	r1, #0
    881e:	f104 0008 	add.w	r0, r4, #8
    8822:	f7f8 f88e 	bl	942 <memset>
	if (ccc->cfg_changed) {
    8826:	68e3      	ldr	r3, [r4, #12]
    8828:	b1c3      	cbz	r3, 885c <disconnected_cb+0x64>
		ccc->cfg_changed(attr, ccc->value);
    882a:	8921      	ldrh	r1, [r4, #8]
    882c:	4638      	mov	r0, r7
    882e:	4798      	blx	r3
    8830:	e014      	b.n	885c <disconnected_cb+0x64>
		if (!ccc->cfg[i].value) {
    8832:	6821      	ldr	r1, [r4, #0]
    8834:	0135      	lsls	r5, r6, #4
    8836:	4429      	add	r1, r5
    8838:	890b      	ldrh	r3, [r1, #8]
    883a:	b1a3      	cbz	r3, 8866 <disconnected_cb+0x6e>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    883c:	3101      	adds	r1, #1
    883e:	4640      	mov	r0, r8
    8840:	f7fd fbfe 	bl	6040 <bt_conn_addr_le_cmp>
    8844:	b188      	cbz	r0, 886a <disconnected_cb+0x72>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    8846:	6820      	ldr	r0, [r4, #0]
    8848:	4428      	add	r0, r5
    884a:	3001      	adds	r0, #1
    884c:	f7fd fc10 	bl	6070 <bt_conn_lookup_addr_le>
			if (tmp) {
    8850:	b148      	cbz	r0, 8866 <disconnected_cb+0x6e>
				if (tmp->state == BT_CONN_CONNECTED) {
    8852:	7b03      	ldrb	r3, [r0, #12]
    8854:	2b03      	cmp	r3, #3
    8856:	d104      	bne.n	8862 <disconnected_cb+0x6a>
					bt_conn_unref(tmp);
    8858:	f7fd fc46 	bl	60e8 <bt_conn_unref>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    885c:	2001      	movs	r0, #1
    885e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				bt_conn_unref(tmp);
    8862:	f7fd fc41 	bl	60e8 <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    8866:	3601      	adds	r6, #1
    8868:	e7d4      	b.n	8814 <disconnected_cb+0x1c>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    886a:	4648      	mov	r0, r9
    886c:	f7fc fcf0 	bl	5250 <bt_addr_le_is_bonded>
    8870:	6823      	ldr	r3, [r4, #0]
    8872:	4601      	mov	r1, r0
				ccc->cfg[i].valid = false;
    8874:	1958      	adds	r0, r3, r5
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    8876:	b929      	cbnz	r1, 8884 <disconnected_cb+0x8c>
				ccc->cfg[i].valid = false;
    8878:	5559      	strb	r1, [r3, r5]
				memset(&ccc->cfg[i].value, 0,
    887a:	2202      	movs	r2, #2
    887c:	3008      	adds	r0, #8
    887e:	f7f8 f860 	bl	942 <memset>
    8882:	e7f0      	b.n	8866 <disconnected_cb+0x6e>
    8884:	2207      	movs	r2, #7
    8886:	4649      	mov	r1, r9
    8888:	3001      	adds	r0, #1
    888a:	f7f8 f82e 	bl	8ea <memcpy>
    888e:	e7ea      	b.n	8866 <disconnected_cb+0x6e>
    8890:	000084b9 	.word	0x000084b9

00008894 <read_name>:
{
    8894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
    8898:	4e0d      	ldr	r6, [pc, #52]	; (88d0 <read_name+0x3c>)
{
    889a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
				 strlen(gap_name));
    889e:	4630      	mov	r0, r6
{
    88a0:	4698      	mov	r8, r3
    88a2:	4617      	mov	r7, r2
				 strlen(gap_name));
    88a4:	f7f7 ffc3 	bl	82e <strlen>
	if (offset > value_len) {
    88a8:	b283      	uxth	r3, r0
    88aa:	42ab      	cmp	r3, r5
    88ac:	d30d      	bcc.n	88ca <read_name+0x36>
	len = min(buf_len, value_len - offset);
    88ae:	1b5c      	subs	r4, r3, r5
    88b0:	4544      	cmp	r4, r8
    88b2:	4623      	mov	r3, r4
    88b4:	bfa8      	it	ge
    88b6:	4643      	movge	r3, r8
    88b8:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    88ba:	4622      	mov	r2, r4
    88bc:	1971      	adds	r1, r6, r5
    88be:	4638      	mov	r0, r7
    88c0:	f7f8 f813 	bl	8ea <memcpy>
}
    88c4:	4620      	mov	r0, r4
    88c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    88ca:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    88ce:	e7f9      	b.n	88c4 <read_name+0x30>
    88d0:	00021168 	.word	0x00021168

000088d4 <bt_gatt_attr_read_ccc>:
{
    88d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    88d8:	68ce      	ldr	r6, [r1, #12]
{
    88da:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    88de:	4604      	mov	r4, r0
    88e0:	4690      	mov	r8, r2
    88e2:	4699      	mov	r9, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    88e4:	2500      	movs	r5, #0
    88e6:	6873      	ldr	r3, [r6, #4]
    88e8:	429d      	cmp	r5, r3
    88ea:	d20f      	bcs.n	890c <bt_gatt_attr_read_ccc+0x38>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    88ec:	6831      	ldr	r1, [r6, #0]
    88ee:	ea4f 1a05 	mov.w	sl, r5, lsl #4
    88f2:	4451      	add	r1, sl
    88f4:	3101      	adds	r1, #1
    88f6:	4620      	mov	r0, r4
    88f8:	f7fd fba2 	bl	6040 <bt_conn_addr_le_cmp>
    88fc:	b108      	cbz	r0, 8902 <bt_gatt_attr_read_ccc+0x2e>
	for (i = 0; i < ccc->cfg_len; i++) {
    88fe:	3501      	adds	r5, #1
    8900:	e7f1      	b.n	88e6 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    8902:	6832      	ldr	r2, [r6, #0]
    8904:	4452      	add	r2, sl
    8906:	8913      	ldrh	r3, [r2, #8]
    8908:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
    890c:	6873      	ldr	r3, [r6, #4]
    890e:	429d      	cmp	r5, r3
		value = 0x0000;
    8910:	bf04      	itt	eq
    8912:	2300      	moveq	r3, #0
    8914:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
    8918:	2f02      	cmp	r7, #2
    891a:	d80f      	bhi.n	893c <bt_gatt_attr_read_ccc+0x68>
	len = min(buf_len, value_len - offset);
    891c:	f1c7 0402 	rsb	r4, r7, #2
    8920:	454c      	cmp	r4, r9
    8922:	bfa8      	it	ge
    8924:	464c      	movge	r4, r9
	memcpy(buf, value + offset, len);
    8926:	f10d 0306 	add.w	r3, sp, #6
    892a:	4622      	mov	r2, r4
    892c:	19d9      	adds	r1, r3, r7
    892e:	4640      	mov	r0, r8
    8930:	f7f7 ffdb 	bl	8ea <memcpy>
}
    8934:	4620      	mov	r0, r4
    8936:	b002      	add	sp, #8
    8938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    893c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    8940:	e7f8      	b.n	8934 <bt_gatt_attr_read_ccc+0x60>

00008942 <bt_gatt_attr_read_service>:
{
    8942:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    8944:	68c9      	ldr	r1, [r1, #12]
{
    8946:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    894a:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    894c:	780a      	ldrb	r2, [r1, #0]
    894e:	b992      	cbnz	r2, 8976 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    8950:	884a      	ldrh	r2, [r1, #2]
    8952:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    8956:	2d02      	cmp	r5, #2
    8958:	d819      	bhi.n	898e <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    895a:	f1c5 0402 	rsb	r4, r5, #2
    895e:	429c      	cmp	r4, r3
    8960:	bfa8      	it	ge
    8962:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    8964:	f10d 0306 	add.w	r3, sp, #6
    8968:	4622      	mov	r2, r4
    896a:	1959      	adds	r1, r3, r5
    896c:	f7f7 ffbd 	bl	8ea <memcpy>
}
    8970:	4620      	mov	r0, r4
    8972:	b003      	add	sp, #12
    8974:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    8976:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    8978:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    897c:	d807      	bhi.n	898e <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    897e:	f1c5 0410 	rsb	r4, r5, #16
    8982:	429c      	cmp	r4, r3
    8984:	bfa8      	it	ge
    8986:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    8988:	4622      	mov	r2, r4
    898a:	4429      	add	r1, r5
    898c:	e7ee      	b.n	896c <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    898e:	f06f 0406 	mvn.w	r4, #6
    8992:	e7ed      	b.n	8970 <bt_gatt_attr_read_service+0x2e>

00008994 <notify_cb>:
{
    8994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    8998:	f642 1302 	movw	r3, #10498	; 0x2902
{
    899c:	4605      	mov	r5, r0
    899e:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    89a0:	2400      	movs	r4, #0
    89a2:	4669      	mov	r1, sp
    89a4:	6800      	ldr	r0, [r0, #0]
    89a6:	f88d 4000 	strb.w	r4, [sp]
    89aa:	f8ad 3002 	strh.w	r3, [sp, #2]
    89ae:	f7fa fde9 	bl	3584 <bt_uuid_cmp>
    89b2:	b178      	cbz	r0, 89d4 <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    89b4:	f642 0303 	movw	r3, #10243	; 0x2803
    89b8:	6828      	ldr	r0, [r5, #0]
    89ba:	f88d 4004 	strb.w	r4, [sp, #4]
    89be:	a901      	add	r1, sp, #4
    89c0:	f8ad 3006 	strh.w	r3, [sp, #6]
    89c4:	f7fa fdde 	bl	3584 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    89c8:	1b00      	subs	r0, r0, r4
    89ca:	bf18      	it	ne
    89cc:	2001      	movne	r0, #1
}
    89ce:	b003      	add	sp, #12
    89d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    89d4:	68aa      	ldr	r2, [r5, #8]
    89d6:	4b2c      	ldr	r3, [pc, #176]	; (8a88 <notify_cb+0xf4>)
    89d8:	429a      	cmp	r2, r3
    89da:	d001      	beq.n	89e0 <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
    89dc:	2001      	movs	r0, #1
    89de:	e7f6      	b.n	89ce <notify_cb+0x3a>
	ccc = attr->user_data;
    89e0:	68ef      	ldr	r7, [r5, #12]
    89e2:	4d2a      	ldr	r5, [pc, #168]	; (8a8c <notify_cb+0xf8>)
	for (i = 0; i < ccc->cfg_len; i++) {
    89e4:	4604      	mov	r4, r0
    89e6:	46a8      	mov	r8, r5
    89e8:	4681      	mov	r9, r0
    89ea:	687b      	ldr	r3, [r7, #4]
    89ec:	429c      	cmp	r4, r3
    89ee:	d2f5      	bcs.n	89dc <notify_cb+0x48>
		if (ccc->cfg[i].value != data->type) {
    89f0:	6838      	ldr	r0, [r7, #0]
    89f2:	88b3      	ldrh	r3, [r6, #4]
    89f4:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    89f8:	8902      	ldrh	r2, [r0, #8]
    89fa:	429a      	cmp	r2, r3
    89fc:	d115      	bne.n	8a2a <notify_cb+0x96>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    89fe:	3001      	adds	r0, #1
    8a00:	f7fd fb36 	bl	6070 <bt_conn_lookup_addr_le>
		if (!conn) {
    8a04:	4683      	mov	fp, r0
    8a06:	b9f8      	cbnz	r0, 8a48 <notify_cb+0xb4>
			if (ccc->cfg == sc_ccc_cfg) {
    8a08:	683b      	ldr	r3, [r7, #0]
    8a0a:	4543      	cmp	r3, r8
    8a0c:	d10d      	bne.n	8a2a <notify_cb+0x96>
				sc_save(&ccc->cfg[i], data->params);
    8a0e:	6973      	ldr	r3, [r6, #20]
	memcpy(&data, params->data, params->len);
    8a10:	a801      	add	r0, sp, #4
    8a12:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    8a14:	6a19      	ldr	r1, [r3, #32]
    8a16:	f7f7 ff68 	bl	8ea <memcpy>
	if (!stored->start && !stored->end) {
    8a1a:	89a8      	ldrh	r0, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    8a1c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8a20:	89ea      	ldrh	r2, [r5, #14]
	if (!stored->start && !stored->end) {
    8a22:	b928      	cbnz	r0, 8a30 <notify_cb+0x9c>
    8a24:	b942      	cbnz	r2, 8a38 <notify_cb+0xa4>
		*stored = data;
    8a26:	9801      	ldr	r0, [sp, #4]
    8a28:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    8a2a:	3401      	adds	r4, #1
    8a2c:	3510      	adds	r5, #16
    8a2e:	e7dc      	b.n	89ea <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
    8a30:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	if (new_start >= *start && new_end <= *end) {
    8a34:	4281      	cmp	r1, r0
    8a36:	d305      	bcc.n	8a44 <notify_cb+0xb0>
    8a38:	429a      	cmp	r2, r3
    8a3a:	d2f6      	bcs.n	8a2a <notify_cb+0x96>
	if (*end < new_end) {
    8a3c:	429a      	cmp	r2, r3
    8a3e:	d2f4      	bcs.n	8a2a <notify_cb+0x96>
		*end = new_end;
    8a40:	81eb      	strh	r3, [r5, #14]
    8a42:	e7f2      	b.n	8a2a <notify_cb+0x96>
		*start = new_start;
    8a44:	81a9      	strh	r1, [r5, #12]
    8a46:	e7f9      	b.n	8a3c <notify_cb+0xa8>
		if (conn->state != BT_CONN_CONNECTED) {
    8a48:	7b03      	ldrb	r3, [r0, #12]
    8a4a:	2b03      	cmp	r3, #3
    8a4c:	d002      	beq.n	8a54 <notify_cb+0xc0>
			bt_conn_unref(conn);
    8a4e:	f7fd fb4b 	bl	60e8 <bt_conn_unref>
    8a52:	e7ea      	b.n	8a2a <notify_cb+0x96>
		if (data->type == BT_GATT_CCC_INDICATE) {
    8a54:	88b3      	ldrh	r3, [r6, #4]
    8a56:	2b02      	cmp	r3, #2
    8a58:	d10c      	bne.n	8a74 <notify_cb+0xe0>
			err = gatt_indicate(conn, data->params);
    8a5a:	6971      	ldr	r1, [r6, #20]
    8a5c:	f7ff fdb6 	bl	85cc <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle, data->data,
    8a60:	4682      	mov	sl, r0
		bt_conn_unref(conn);
    8a62:	4658      	mov	r0, fp
    8a64:	f7fd fb40 	bl	60e8 <bt_conn_unref>
		if (err < 0) {
    8a68:	f1ba 0f00 	cmp.w	sl, #0
    8a6c:	db09      	blt.n	8a82 <notify_cb+0xee>
		data->err = 0;
    8a6e:	f8c6 9000 	str.w	r9, [r6]
    8a72:	e7da      	b.n	8a2a <notify_cb+0x96>
			err = gatt_notify(conn, data->attr->handle, data->data,
    8a74:	68b1      	ldr	r1, [r6, #8]
    8a76:	8a33      	ldrh	r3, [r6, #16]
    8a78:	68f2      	ldr	r2, [r6, #12]
    8a7a:	8a09      	ldrh	r1, [r1, #16]
    8a7c:	f7ff fd7a 	bl	8574 <gatt_notify>
    8a80:	e7ee      	b.n	8a60 <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
    8a82:	2000      	movs	r0, #0
    8a84:	e7a3      	b.n	89ce <notify_cb+0x3a>
    8a86:	bf00      	nop
    8a88:	000084b9 	.word	0x000084b9
    8a8c:	200006fc 	.word	0x200006fc

00008a90 <bt_gatt_init>:
{
    8a90:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    8a92:	4806      	ldr	r0, [pc, #24]	; (8aac <bt_gatt_init+0x1c>)
    8a94:	f7ff fdd0 	bl	8638 <gatt_register>
	gatt_register(&gatt_svc);
    8a98:	4805      	ldr	r0, [pc, #20]	; (8ab0 <bt_gatt_init+0x20>)
    8a9a:	f7ff fdcd 	bl	8638 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    8a9e:	4905      	ldr	r1, [pc, #20]	; (8ab4 <bt_gatt_init+0x24>)
    8aa0:	4805      	ldr	r0, [pc, #20]	; (8ab8 <bt_gatt_init+0x28>)
}
    8aa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    8aa6:	f017 b9fd 	b.w	1fea4 <k_delayed_work_init>
    8aaa:	bf00      	nop
    8aac:	2000df44 	.word	0x2000df44
    8ab0:	2000dfa0 	.word	0x2000dfa0
    8ab4:	00008b3d 	.word	0x00008b3d
    8ab8:	200006d0 	.word	0x200006d0

00008abc <bt_gatt_foreach_attr>:
{
    8abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8ac0:	4699      	mov	r9, r3
    8ac2:	4b12      	ldr	r3, [pc, #72]	; (8b0c <bt_gatt_foreach_attr+0x50>)
    8ac4:	681c      	ldr	r4, [r3, #0]
    8ac6:	4606      	mov	r6, r0
    8ac8:	460f      	mov	r7, r1
    8aca:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    8acc:	b1dc      	cbz	r4, 8b06 <bt_gatt_foreach_attr+0x4a>
    8ace:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    8ad0:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    8ad4:	b1bc      	cbz	r4, 8b06 <bt_gatt_foreach_attr+0x4a>
    8ad6:	2500      	movs	r5, #0
    8ad8:	e006      	b.n	8ae8 <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    8ada:	6820      	ldr	r0, [r4, #0]
    8adc:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
    8ae0:	8a03      	ldrh	r3, [r0, #16]
    8ae2:	42b3      	cmp	r3, r6
    8ae4:	d207      	bcs.n	8af6 <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
    8ae6:	3501      	adds	r5, #1
    8ae8:	88a3      	ldrh	r3, [r4, #4]
    8aea:	429d      	cmp	r5, r3
    8aec:	dbf5      	blt.n	8ada <bt_gatt_foreach_attr+0x1e>
	return node->next;
    8aee:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    8af0:	b14c      	cbz	r4, 8b06 <bt_gatt_foreach_attr+0x4a>
    8af2:	3c08      	subs	r4, #8
    8af4:	e7ee      	b.n	8ad4 <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    8af6:	42bb      	cmp	r3, r7
    8af8:	d8f5      	bhi.n	8ae6 <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    8afa:	4649      	mov	r1, r9
    8afc:	47c0      	blx	r8
    8afe:	2800      	cmp	r0, #0
    8b00:	d1f1      	bne.n	8ae6 <bt_gatt_foreach_attr+0x2a>
    8b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8b0a:	bf00      	nop
    8b0c:	2000069c 	.word	0x2000069c

00008b10 <bt_gatt_indicate.part.8>:
int bt_gatt_indicate(struct bt_conn *conn,
    8b10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nfy.err = -ENOTCONN;
    8b12:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    8b16:	9005      	str	r0, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    8b18:	6980      	ldr	r0, [r0, #24]
	nfy.err = -ENOTCONN;
    8b1a:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    8b1c:	2302      	movs	r3, #2
    8b1e:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    8b22:	4a05      	ldr	r2, [pc, #20]	; (8b38 <bt_gatt_indicate.part.8+0x28>)
    8b24:	8a00      	ldrh	r0, [r0, #16]
    8b26:	466b      	mov	r3, sp
    8b28:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8b2c:	f7ff ffc6 	bl	8abc <bt_gatt_foreach_attr>
}
    8b30:	9800      	ldr	r0, [sp, #0]
    8b32:	b007      	add	sp, #28
    8b34:	f85d fb04 	ldr.w	pc, [sp], #4
    8b38:	00008995 	.word	0x00008995

00008b3c <sc_process>:
{
    8b3c:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    8b3e:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    8b42:	f8ad 2004 	strh.w	r2, [sp, #4]
{
    8b46:	4603      	mov	r3, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    8b48:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    8b4c:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    8b50:	382c      	subs	r0, #44	; 0x2c
    8b52:	f103 0428 	add.w	r4, r3, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8b56:	f3bf 8f5b 	dmb	ish
    8b5a:	e854 2f00 	ldrex	r2, [r4]
    8b5e:	f022 0201 	bic.w	r2, r2, #1
    8b62:	e844 2100 	strex	r1, r2, [r4]
    8b66:	2900      	cmp	r1, #0
    8b68:	d1f7      	bne.n	8b5a <sc_process+0x1e>
    8b6a:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    8b6e:	2200      	movs	r2, #0
    8b70:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0;
    8b74:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    8b78:	4a0e      	ldr	r2, [pc, #56]	; (8bb4 <sc_process+0x78>)
    8b7a:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    8b7e:	4a0e      	ldr	r2, [pc, #56]	; (8bb8 <sc_process+0x7c>)
    8b80:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    8b84:	aa01      	add	r2, sp, #4
    8b86:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    8b8a:	2204      	movs	r2, #4
    8b8c:	f823 2c08 	strh.w	r2, [r3, #-8]
    8b90:	f7ff ffbe 	bl	8b10 <bt_gatt_indicate.part.8>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    8b94:	b958      	cbnz	r0, 8bae <sc_process+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8b96:	f3bf 8f5b 	dmb	ish
    8b9a:	e854 3f00 	ldrex	r3, [r4]
    8b9e:	f043 0302 	orr.w	r3, r3, #2
    8ba2:	e844 3200 	strex	r2, r3, [r4]
    8ba6:	2a00      	cmp	r2, #0
    8ba8:	d1f7      	bne.n	8b9a <sc_process+0x5e>
    8baa:	f3bf 8f5b 	dmb	ish
}
    8bae:	b002      	add	sp, #8
    8bb0:	bd10      	pop	{r4, pc}
    8bb2:	bf00      	nop
    8bb4:	2000df78 	.word	0x2000df78
    8bb8:	00008781 	.word	0x00008781

00008bbc <bt_gatt_attr_next>:
{
    8bbc:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    8bbe:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    8bc0:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    8bc2:	3101      	adds	r1, #1
    8bc4:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    8bc6:	2200      	movs	r2, #0
    8bc8:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    8bcc:	4608      	mov	r0, r1
    8bce:	4a03      	ldr	r2, [pc, #12]	; (8bdc <bt_gatt_attr_next+0x20>)
    8bd0:	f7ff ff74 	bl	8abc <bt_gatt_foreach_attr>
}
    8bd4:	9801      	ldr	r0, [sp, #4]
    8bd6:	b003      	add	sp, #12
    8bd8:	f85d fb04 	ldr.w	pc, [sp], #4
    8bdc:	00008471 	.word	0x00008471

00008be0 <bt_gatt_attr_read_chrc>:
{
    8be0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    8be2:	68cf      	ldr	r7, [r1, #12]
{
    8be4:	b087      	sub	sp, #28
    8be6:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
    8be8:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    8bea:	793b      	ldrb	r3, [r7, #4]
{
    8bec:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	pdu.properties = chrc->properties;
    8bf0:	f88d 3004 	strb.w	r3, [sp, #4]
{
    8bf4:	4616      	mov	r6, r2
	next = bt_gatt_attr_next(attr);
    8bf6:	f7ff ffe1 	bl	8bbc <bt_gatt_attr_next>
	if (!next) {
    8bfa:	b9d0      	cbnz	r0, 8c32 <bt_gatt_attr_read_chrc+0x52>
		pdu.value_handle = 0x0000;
    8bfc:	f88d 0005 	strb.w	r0, [sp, #5]
    8c00:	f88d 0006 	strb.w	r0, [sp, #6]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    8c04:	6839      	ldr	r1, [r7, #0]
    8c06:	780b      	ldrb	r3, [r1, #0]
    8c08:	b9bb      	cbnz	r3, 8c3a <bt_gatt_attr_read_chrc+0x5a>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    8c0a:	884b      	ldrh	r3, [r1, #2]
    8c0c:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2;
    8c10:	2305      	movs	r3, #5
	if (offset > value_len) {
    8c12:	42ab      	cmp	r3, r5
    8c14:	d319      	bcc.n	8c4a <bt_gatt_attr_read_chrc+0x6a>
	len = min(buf_len, value_len - offset);
    8c16:	1b5b      	subs	r3, r3, r5
    8c18:	42a3      	cmp	r3, r4
    8c1a:	bfa8      	it	ge
    8c1c:	4623      	movge	r3, r4
    8c1e:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    8c20:	ab01      	add	r3, sp, #4
    8c22:	4622      	mov	r2, r4
    8c24:	1959      	adds	r1, r3, r5
    8c26:	4630      	mov	r0, r6
    8c28:	f7f7 fe5f 	bl	8ea <memcpy>
}
    8c2c:	4620      	mov	r0, r4
    8c2e:	b007      	add	sp, #28
    8c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    8c32:	8a03      	ldrh	r3, [r0, #16]
    8c34:	f8ad 3005 	strh.w	r3, [sp, #5]
    8c38:	e7e4      	b.n	8c04 <bt_gatt_attr_read_chrc+0x24>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    8c3a:	2210      	movs	r2, #16
    8c3c:	3101      	adds	r1, #1
    8c3e:	f10d 0007 	add.w	r0, sp, #7
    8c42:	f7f7 fe52 	bl	8ea <memcpy>
		value_len += 16;
    8c46:	2313      	movs	r3, #19
    8c48:	e7e3      	b.n	8c12 <bt_gatt_attr_read_chrc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    8c4a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    8c4e:	e7ed      	b.n	8c2c <bt_gatt_attr_read_chrc+0x4c>

00008c50 <bt_gatt_connected>:
#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    8c50:	4603      	mov	r3, r0
    8c52:	4a03      	ldr	r2, [pc, #12]	; (8c60 <bt_gatt_connected+0x10>)
    8c54:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8c58:	2001      	movs	r0, #1
    8c5a:	f7ff bf2f 	b.w	8abc <bt_gatt_foreach_attr>
    8c5e:	bf00      	nop
    8c60:	00008711 	.word	0x00008711

00008c64 <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    8c64:	4603      	mov	r3, r0
    8c66:	4a03      	ldr	r2, [pc, #12]	; (8c74 <bt_gatt_disconnected+0x10>)
    8c68:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8c6c:	2001      	movs	r0, #1
    8c6e:	f7ff bf25 	b.w	8abc <bt_gatt_foreach_attr>
    8c72:	bf00      	nop
    8c74:	000087f9 	.word	0x000087f9

00008c78 <sys_memcpy_swap>:
{
	__ASSERT(((src < dst && (src + length) <= dst) ||
		  (src > dst && (dst + length) <= src)),
		 "Source and destination buffers must not overlap");

	src += length - 1;
    8c78:	1e53      	subs	r3, r2, #1
    8c7a:	4419      	add	r1, r3
    8c7c:	3801      	subs	r0, #1
    8c7e:	1a52      	subs	r2, r2, r1

	for (; length > 0; length--) {
    8c80:	42d1      	cmn	r1, r2
    8c82:	d100      	bne.n	8c86 <sys_memcpy_swap+0xe>
		*((u8_t *)dst++) = *((u8_t *)src--);
	}
}
    8c84:	4770      	bx	lr
		*((u8_t *)dst++) = *((u8_t *)src--);
    8c86:	f811 3901 	ldrb.w	r3, [r1], #-1
    8c8a:	f800 3f01 	strb.w	r3, [r0, #1]!
    8c8e:	e7f7      	b.n	8c80 <sys_memcpy_swap+0x8>

00008c90 <get_io_capa>:
static bool sc_local_pkey_valid;
static u8_t sc_public_key[64];

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    8c90:	4b10      	ldr	r3, [pc, #64]	; (8cd4 <get_io_capa+0x44>)
    8c92:	681b      	ldr	r3, [r3, #0]
    8c94:	b1ab      	cbz	r3, 8cc2 <get_io_capa+0x32>
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    8c96:	681a      	ldr	r2, [r3, #0]
    8c98:	b132      	cbz	r2, 8ca8 <get_io_capa+0x18>
    8c9a:	6859      	ldr	r1, [r3, #4]
    8c9c:	b121      	cbz	r1, 8ca8 <get_io_capa+0x18>
    8c9e:	6899      	ldr	r1, [r3, #8]
    8ca0:	b989      	cbnz	r1, 8cc6 <get_io_capa+0x36>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    8ca2:	490d      	ldr	r1, [pc, #52]	; (8cd8 <get_io_capa+0x48>)
    8ca4:	7809      	ldrb	r1, [r1, #0]
    8ca6:	b171      	cbz	r1, 8cc6 <get_io_capa+0x36>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    8ca8:	490b      	ldr	r1, [pc, #44]	; (8cd8 <get_io_capa+0x48>)
    8caa:	7809      	ldrb	r1, [r1, #0]
    8cac:	b111      	cbz	r1, 8cb4 <get_io_capa+0x24>
    8cae:	b10a      	cbz	r2, 8cb4 <get_io_capa+0x24>
    8cb0:	6899      	ldr	r1, [r3, #8]
    8cb2:	b951      	cbnz	r1, 8cca <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    8cb4:	685b      	ldr	r3, [r3, #4]
    8cb6:	b953      	cbnz	r3, 8cce <get_io_capa+0x3e>
		return BT_SMP_IO_KEYBOARD_ONLY;
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    8cb8:	2a00      	cmp	r2, #0
    8cba:	bf0c      	ite	eq
    8cbc:	2003      	moveq	r0, #3
    8cbe:	2000      	movne	r0, #0
    8cc0:	4770      	bx	lr
	}

	return BT_SMP_IO_NO_INPUT_OUTPUT;
    8cc2:	2003      	movs	r0, #3
    8cc4:	4770      	bx	lr
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    8cc6:	2004      	movs	r0, #4
    8cc8:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    8cca:	2001      	movs	r0, #1
    8ccc:	4770      	bx	lr
		return BT_SMP_IO_KEYBOARD_ONLY;
    8cce:	2002      	movs	r0, #2
}
    8cd0:	4770      	bx	lr
    8cd2:	bf00      	nop
    8cd4:	200041a0 	.word	0x200041a0
    8cd8:	20000901 	.word	0x20000901

00008cdc <get_auth>:
	return 0;
}

static u8_t get_auth(u8_t auth)
{
	if (sc_supported) {
    8cdc:	4b08      	ldr	r3, [pc, #32]	; (8d00 <get_auth+0x24>)
    8cde:	781b      	ldrb	r3, [r3, #0]
{
    8ce0:	b510      	push	{r4, lr}
	if (sc_supported) {
    8ce2:	b153      	cbz	r3, 8cfa <get_auth+0x1e>
		auth &= BT_SMP_AUTH_MASK_SC;
    8ce4:	f000 040f 	and.w	r4, r0, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    8ce8:	f7ff ffd2 	bl	8c90 <get_io_capa>
    8cec:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    8cee:	bf0c      	ite	eq
    8cf0:	f004 000b 	andeq.w	r0, r4, #11
	} else {
		auth |= BT_SMP_AUTH_MITM;
    8cf4:	f044 0004 	orrne.w	r0, r4, #4
	}

	return auth;
}
    8cf8:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    8cfa:	f000 0407 	and.w	r4, r0, #7
    8cfe:	e7f3      	b.n	8ce8 <get_auth+0xc>
    8d00:	20000901 	.word	0x20000901

00008d04 <smp_signing_info>:
}
#else
static u8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
{
	return BT_SMP_ERR_CMD_NOTSUPP;
}
    8d04:	2007      	movs	r0, #7
    8d06:	4770      	bx	lr

00008d08 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    8d08:	4b04      	ldr	r3, [pc, #16]	; (8d1c <bt_smp_accept+0x14>)
    8d0a:	6818      	ldr	r0, [r3, #0]
    8d0c:	b918      	cbnz	r0, 8d16 <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.chan.ops = &ops;
    8d0e:	4a04      	ldr	r2, [pc, #16]	; (8d20 <bt_smp_accept+0x18>)
    8d10:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan.chan;
    8d12:	600b      	str	r3, [r1, #0]

		return 0;
    8d14:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    8d16:	f06f 000b 	mvn.w	r0, #11
}
    8d1a:	4770      	bx	lr
    8d1c:	2000071c 	.word	0x2000071c
    8d20:	2000dfb8 	.word	0x2000dfb8

00008d24 <smp_chan_get>:
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    8d24:	2106      	movs	r1, #6
    8d26:	f7fd bf3c 	b.w	6ba2 <bt_l2cap_le_lookup_rx_cid>

00008d2a <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8d2a:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8d2c:	f3bf 8f5b 	dmb	ish
    8d30:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    8d34:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    8d38:	f001 011f 	and.w	r1, r1, #31
    8d3c:	4108      	asrs	r0, r1
}
    8d3e:	f000 0001 	and.w	r0, r0, #1
    8d42:	4770      	bx	lr

00008d44 <atomic_set_bit>:
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    8d44:	094b      	lsrs	r3, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    8d46:	2201      	movs	r2, #1
    8d48:	f001 011f 	and.w	r1, r1, #31
    8d4c:	fa02 f101 	lsl.w	r1, r2, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8d50:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8d54:	f3bf 8f5b 	dmb	ish
    8d58:	e850 3f00 	ldrex	r3, [r0]
    8d5c:	430b      	orrs	r3, r1
    8d5e:	e840 3200 	strex	r2, r3, [r0]
    8d62:	2a00      	cmp	r2, #0
    8d64:	d1f8      	bne.n	8d58 <atomic_set_bit+0x14>
    8d66:	f3bf 8f5b 	dmb	ish
    8d6a:	4770      	bx	lr

00008d6c <smp_init>:
{
    8d6c:	b538      	push	{r3, r4, r5, lr}
	memset((u8_t *)smp + sizeof(smp->chan), 0,
    8d6e:	f100 059c 	add.w	r5, r0, #156	; 0x9c
{
    8d72:	4604      	mov	r4, r0
	memset((u8_t *)smp + sizeof(smp->chan), 0,
    8d74:	22e0      	movs	r2, #224	; 0xe0
    8d76:	2100      	movs	r1, #0
    8d78:	4628      	mov	r0, r5
    8d7a:	f7f7 fde2 	bl	942 <memset>
	if (bt_rand(smp->prnd, 16)) {
    8d7e:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    8d82:	2110      	movs	r1, #16
    8d84:	f002 fe74 	bl	ba70 <bt_rand>
    8d88:	4604      	mov	r4, r0
    8d8a:	b928      	cbnz	r0, 8d98 <smp_init+0x2c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    8d8c:	2105      	movs	r1, #5
    8d8e:	4628      	mov	r0, r5
    8d90:	f7ff ffd8 	bl	8d44 <atomic_set_bit>
}
    8d94:	4620      	mov	r0, r4
    8d96:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    8d98:	2408      	movs	r4, #8
    8d9a:	e7fb      	b.n	8d94 <smp_init+0x28>

00008d9c <bt_smp_aes_cmac>:
{
    8d9c:	b570      	push	{r4, r5, r6, lr}
    8d9e:	b0c2      	sub	sp, #264	; 0x108
    8da0:	460d      	mov	r5, r1
    8da2:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    8da4:	4601      	mov	r1, r0
    8da6:	aa16      	add	r2, sp, #88	; 0x58
    8da8:	4668      	mov	r0, sp
{
    8daa:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    8dac:	f7f8 feda 	bl	1b64 <tc_cmac_setup>
    8db0:	b918      	cbnz	r0, 8dba <bt_smp_aes_cmac+0x1e>
		return -EIO;
    8db2:	f06f 0004 	mvn.w	r0, #4
}
    8db6:	b042      	add	sp, #264	; 0x108
    8db8:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
    8dba:	4632      	mov	r2, r6
    8dbc:	4629      	mov	r1, r5
    8dbe:	4668      	mov	r0, sp
    8dc0:	f7f8 fefc 	bl	1bbc <tc_cmac_update>
    8dc4:	2800      	cmp	r0, #0
    8dc6:	d0f4      	beq.n	8db2 <bt_smp_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
    8dc8:	4669      	mov	r1, sp
    8dca:	4620      	mov	r0, r4
    8dcc:	f7f8 ff5a 	bl	1c84 <tc_cmac_final>
    8dd0:	2800      	cmp	r0, #0
    8dd2:	d0ee      	beq.n	8db2 <bt_smp_aes_cmac+0x16>
	return 0;
    8dd4:	2000      	movs	r0, #0
    8dd6:	e7ee      	b.n	8db6 <bt_smp_aes_cmac+0x1a>

00008dd8 <smp_g2>:
{
    8dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8dda:	b099      	sub	sp, #100	; 0x64
    8ddc:	4615      	mov	r5, r2
    8dde:	460f      	mov	r7, r1
	sys_memcpy_swap(m, u, 32);
    8de0:	2220      	movs	r2, #32
    8de2:	4601      	mov	r1, r0
    8de4:	a804      	add	r0, sp, #16
{
    8de6:	461e      	mov	r6, r3
    8de8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
    8dea:	f7ff ff45 	bl	8c78 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    8dee:	2220      	movs	r2, #32
    8df0:	4639      	mov	r1, r7
    8df2:	a80c      	add	r0, sp, #48	; 0x30
    8df4:	f7ff ff40 	bl	8c78 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    8df8:	2210      	movs	r2, #16
    8dfa:	4631      	mov	r1, r6
    8dfc:	a814      	add	r0, sp, #80	; 0x50
    8dfe:	f7ff ff3b 	bl	8c78 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    8e02:	4629      	mov	r1, r5
    8e04:	2210      	movs	r2, #16
    8e06:	4668      	mov	r0, sp
    8e08:	f7ff ff36 	bl	8c78 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    8e0c:	466b      	mov	r3, sp
    8e0e:	2250      	movs	r2, #80	; 0x50
    8e10:	a904      	add	r1, sp, #16
    8e12:	4668      	mov	r0, sp
    8e14:	f7ff ffc2 	bl	8d9c <bt_smp_aes_cmac>
	if (err) {
    8e18:	4605      	mov	r5, r0
    8e1a:	b960      	cbnz	r0, 8e36 <smp_g2+0x5e>
	memcpy(passkey, xs + 12, 4);
    8e1c:	2204      	movs	r2, #4
    8e1e:	a903      	add	r1, sp, #12
    8e20:	4620      	mov	r0, r4
    8e22:	f7f7 fd62 	bl	8ea <memcpy>
    8e26:	6823      	ldr	r3, [r4, #0]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    8e28:	4904      	ldr	r1, [pc, #16]	; (8e3c <smp_g2+0x64>)
    8e2a:	ba1b      	rev	r3, r3
    8e2c:	fbb3 f2f1 	udiv	r2, r3, r1
    8e30:	fb01 3312 	mls	r3, r1, r2, r3
    8e34:	6023      	str	r3, [r4, #0]
}
    8e36:	4628      	mov	r0, r5
    8e38:	b019      	add	sp, #100	; 0x64
    8e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e3c:	000f4240 	.word	0x000f4240

00008e40 <bt_smp_disconnected>:
{
    8e40:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
    8e42:	6803      	ldr	r3, [r0, #0]
    8e44:	6f1c      	ldr	r4, [r3, #112]	; 0x70
{
    8e46:	4605      	mov	r5, r0
	k_delayed_work_cancel(&smp->work);
    8e48:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    8e4c:	f017 f848 	bl	1fee0 <k_delayed_work_cancel>
	if (keys) {
    8e50:	b124      	cbz	r4, 8e5c <bt_smp_disconnected+0x1c>
		if (!keys->keys ||
    8e52:	89a3      	ldrh	r3, [r4, #12]
    8e54:	b953      	cbnz	r3, 8e6c <bt_smp_disconnected+0x2c>
			bt_keys_clear(keys);
    8e56:	4620      	mov	r0, r4
    8e58:	f001 fd26 	bl	a8a8 <bt_keys_clear>
	memset(smp, 0, sizeof(*smp));
    8e5c:	4628      	mov	r0, r5
    8e5e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    8e62:	2100      	movs	r1, #0
}
    8e64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(smp, 0, sizeof(*smp));
    8e68:	f7f7 bd6b 	b.w	942 <memset>
		    atomic_test_bit(keys->flags, BT_KEYS_DEBUG)) {
    8e6c:	2101      	movs	r1, #1
    8e6e:	f104 0008 	add.w	r0, r4, #8
    8e72:	f7ff ff5a 	bl	8d2a <atomic_test_bit>
		if (!keys->keys ||
    8e76:	2800      	cmp	r0, #0
    8e78:	d1ed      	bne.n	8e56 <bt_smp_disconnected+0x16>
    8e7a:	e7ef      	b.n	8e5c <bt_smp_disconnected+0x1c>

00008e7c <smp_ident_info>:
{
    8e7c:	b538      	push	{r3, r4, r5, lr}
    8e7e:	460a      	mov	r2, r1
    8e80:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    8e82:	210a      	movs	r1, #10
    8e84:	30a0      	adds	r0, #160	; 0xa0
    8e86:	f7ff ff50 	bl	8d2a <atomic_test_bit>
    8e8a:	b158      	cbz	r0, 8ea4 <smp_ident_info+0x28>
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    8e8c:	6821      	ldr	r1, [r4, #0]
		struct bt_smp_ident_info *req = (void *)buf->data;
    8e8e:	6895      	ldr	r5, [r2, #8]
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    8e90:	3148      	adds	r1, #72	; 0x48
    8e92:	2002      	movs	r0, #2
    8e94:	f001 fd4e 	bl	a934 <bt_keys_get_type>
		if (!keys) {
    8e98:	b158      	cbz	r0, 8eb2 <smp_ident_info+0x36>
		memcpy(keys->irk.val, req->irk, 16);
    8e9a:	2210      	movs	r2, #16
    8e9c:	4629      	mov	r1, r5
    8e9e:	3030      	adds	r0, #48	; 0x30
    8ea0:	f7f7 fd23 	bl	8ea <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    8ea4:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    8ea8:	2109      	movs	r1, #9
    8eaa:	f7ff ff4b 	bl	8d44 <atomic_set_bit>
	return 0;
    8eae:	2000      	movs	r0, #0
    8eb0:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    8eb2:	2008      	movs	r0, #8
}
    8eb4:	bd38      	pop	{r3, r4, r5, pc}

00008eb6 <smp_encrypt_info>:
{
    8eb6:	b538      	push	{r3, r4, r5, lr}
    8eb8:	460a      	mov	r2, r1
    8eba:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    8ebc:	210a      	movs	r1, #10
    8ebe:	30a0      	adds	r0, #160	; 0xa0
    8ec0:	f7ff ff33 	bl	8d2a <atomic_test_bit>
    8ec4:	b158      	cbz	r0, 8ede <smp_encrypt_info+0x28>
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    8ec6:	6821      	ldr	r1, [r4, #0]
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    8ec8:	6895      	ldr	r5, [r2, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    8eca:	3148      	adds	r1, #72	; 0x48
    8ecc:	2004      	movs	r0, #4
    8ece:	f001 fd31 	bl	a934 <bt_keys_get_type>
		if (!keys) {
    8ed2:	b158      	cbz	r0, 8eec <smp_encrypt_info+0x36>
		memcpy(keys->ltk.val, req->ltk, 16);
    8ed4:	2210      	movs	r2, #16
    8ed6:	4629      	mov	r1, r5
    8ed8:	301a      	adds	r0, #26
    8eda:	f7f7 fd06 	bl	8ea <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    8ede:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    8ee2:	2107      	movs	r1, #7
    8ee4:	f7ff ff2e 	bl	8d44 <atomic_set_bit>
	return 0;
    8ee8:	2000      	movs	r0, #0
    8eea:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    8eec:	2008      	movs	r0, #8
}
    8eee:	bd38      	pop	{r3, r4, r5, pc}

00008ef0 <legacy_request_tk>:
{
    8ef0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    8ef2:	6806      	ldr	r6, [r0, #0]
{
    8ef4:	4605      	mov	r5, r0
	keys = bt_keys_find_addr(&conn->le.dst);
    8ef6:	f106 0048 	add.w	r0, r6, #72	; 0x48
    8efa:	f001 fd5d 	bl	a9b8 <bt_keys_find_addr>
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    8efe:	b940      	cbnz	r0, 8f12 <legacy_request_tk+0x22>
	switch (smp->method) {
    8f00:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    8f04:	2b01      	cmp	r3, #1
    8f06:	d02c      	beq.n	8f62 <legacy_request_tk+0x72>
    8f08:	d328      	bcc.n	8f5c <legacy_request_tk+0x6c>
    8f0a:	2b02      	cmp	r3, #2
    8f0c:	d00c      	beq.n	8f28 <legacy_request_tk+0x38>
		return BT_SMP_ERR_UNSPECIFIED;
    8f0e:	2008      	movs	r0, #8
    8f10:	e025      	b.n	8f5e <legacy_request_tk+0x6e>
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    8f12:	2100      	movs	r1, #0
    8f14:	3008      	adds	r0, #8
    8f16:	f7ff ff08 	bl	8d2a <atomic_test_bit>
    8f1a:	2800      	cmp	r0, #0
    8f1c:	d0f0      	beq.n	8f00 <legacy_request_tk+0x10>
    8f1e:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    8f22:	2b00      	cmp	r3, #0
    8f24:	d0f3      	beq.n	8f0e <legacy_request_tk+0x1e>
    8f26:	e7eb      	b.n	8f00 <legacy_request_tk+0x10>
		if (bt_rand(&passkey, sizeof(passkey))) {
    8f28:	2104      	movs	r1, #4
    8f2a:	eb0d 0001 	add.w	r0, sp, r1
    8f2e:	f002 fd9f 	bl	ba70 <bt_rand>
    8f32:	2800      	cmp	r0, #0
    8f34:	d1eb      	bne.n	8f0e <legacy_request_tk+0x1e>
		passkey %= 1000000;
    8f36:	9a01      	ldr	r2, [sp, #4]
    8f38:	4b0f      	ldr	r3, [pc, #60]	; (8f78 <legacy_request_tk+0x88>)
    8f3a:	fbb2 f1f3 	udiv	r1, r2, r3
    8f3e:	fb03 2111 	mls	r1, r3, r1, r2
		bt_auth->passkey_display(conn, passkey);
    8f42:	4b0e      	ldr	r3, [pc, #56]	; (8f7c <legacy_request_tk+0x8c>)
		passkey %= 1000000;
    8f44:	9101      	str	r1, [sp, #4]
		bt_auth->passkey_display(conn, passkey);
    8f46:	681b      	ldr	r3, [r3, #0]
    8f48:	4630      	mov	r0, r6
    8f4a:	681b      	ldr	r3, [r3, #0]
    8f4c:	4798      	blx	r3
		memcpy(smp->tk, &passkey, sizeof(passkey));
    8f4e:	2204      	movs	r2, #4
    8f50:	eb0d 0102 	add.w	r1, sp, r2
    8f54:	f105 00e3 	add.w	r0, r5, #227	; 0xe3
    8f58:	f7f7 fcc7 	bl	8ea <memcpy>
	return 0;
    8f5c:	2000      	movs	r0, #0
}
    8f5e:	b002      	add	sp, #8
    8f60:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    8f62:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    8f66:	2109      	movs	r1, #9
    8f68:	f7ff feec 	bl	8d44 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    8f6c:	4b03      	ldr	r3, [pc, #12]	; (8f7c <legacy_request_tk+0x8c>)
    8f6e:	681b      	ldr	r3, [r3, #0]
    8f70:	4630      	mov	r0, r6
    8f72:	685b      	ldr	r3, [r3, #4]
    8f74:	4798      	blx	r3
    8f76:	e7f1      	b.n	8f5c <legacy_request_tk+0x6c>
    8f78:	000f4240 	.word	0x000f4240
    8f7c:	200041a0 	.word	0x200041a0

00008f80 <legacy_get_pair_method>:
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    8f80:	2904      	cmp	r1, #4
{
    8f82:	b538      	push	{r3, r4, r5, lr}
    8f84:	4605      	mov	r5, r0
    8f86:	460c      	mov	r4, r1
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    8f88:	d817      	bhi.n	8fba <legacy_get_pair_method+0x3a>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    8f8a:	f890 00a8 	ldrb.w	r0, [r0, #168]	; 0xa8
    8f8e:	f895 30af 	ldrb.w	r3, [r5, #175]	; 0xaf
    8f92:	4318      	orrs	r0, r3
    8f94:	f010 0004 	ands.w	r0, r0, #4
    8f98:	d010      	beq.n	8fbc <legacy_get_pair_method+0x3c>
	method = gen_method_legacy[remote_io][get_io_capa()];
    8f9a:	f7ff fe79 	bl	8c90 <get_io_capa>
    8f9e:	4908      	ldr	r1, [pc, #32]	; (8fc0 <legacy_get_pair_method+0x40>)
    8fa0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    8fa4:	440c      	add	r4, r1
    8fa6:	5c20      	ldrb	r0, [r4, r0]
	if (method == PASSKEY_ROLE) {
    8fa8:	2804      	cmp	r0, #4
    8faa:	d107      	bne.n	8fbc <legacy_get_pair_method+0x3c>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    8fac:	682b      	ldr	r3, [r5, #0]
    8fae:	78db      	ldrb	r3, [r3, #3]
    8fb0:	2b00      	cmp	r3, #0
			method = PASSKEY_INPUT;
    8fb2:	bf0c      	ite	eq
    8fb4:	2002      	moveq	r0, #2
    8fb6:	2001      	movne	r0, #1
    8fb8:	bd38      	pop	{r3, r4, r5, pc}
		return JUST_WORKS;
    8fba:	2000      	movs	r0, #0
}
    8fbc:	bd38      	pop	{r3, r4, r5, pc}
    8fbe:	bf00      	nop
    8fc0:	00021174 	.word	0x00021174

00008fc4 <sec_level_reachable.isra.2>:
	switch (conn->required_sec_level) {
    8fc4:	3801      	subs	r0, #1
static bool sec_level_reachable(struct bt_conn *conn)
    8fc6:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
    8fc8:	2803      	cmp	r0, #3
    8fca:	d803      	bhi.n	8fd4 <sec_level_reachable.isra.2+0x10>
    8fcc:	e8df f000 	tbb	[pc, r0]
    8fd0:	0a041414 	.word	0x0a041414
		return false;
    8fd4:	2000      	movs	r0, #0
    8fd6:	bd08      	pop	{r3, pc}
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT;
    8fd8:	f7ff fe5a 	bl	8c90 <get_io_capa>
    8fdc:	3803      	subs	r0, #3
    8fde:	bf18      	it	ne
    8fe0:	2001      	movne	r0, #1
    8fe2:	bd08      	pop	{r3, pc}
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT &&
    8fe4:	f7ff fe54 	bl	8c90 <get_io_capa>
    8fe8:	2803      	cmp	r0, #3
    8fea:	bf1a      	itte	ne
    8fec:	4b03      	ldrne	r3, [pc, #12]	; (8ffc <sec_level_reachable.isra.2+0x38>)
    8fee:	7818      	ldrbne	r0, [r3, #0]
    8ff0:	2000      	moveq	r0, #0
    8ff2:	f000 0001 	and.w	r0, r0, #1
    8ff6:	bd08      	pop	{r3, pc}
		return true;
    8ff8:	2001      	movs	r0, #1
}
    8ffa:	bd08      	pop	{r3, pc}
    8ffc:	20000901 	.word	0x20000901

00009000 <smp_create_pdu.isra.4>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    9000:	2100      	movs	r1, #0
static struct net_buf *smp_create_pdu(struct bt_conn *conn, u8_t op,
    9002:	b538      	push	{r3, r4, r5, lr}
    9004:	4605      	mov	r5, r0
	buf = bt_l2cap_create_pdu(NULL, 0);
    9006:	4608      	mov	r0, r1
    9008:	f7fd fc3e 	bl	6888 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    900c:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    900e:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    9010:	3008      	adds	r0, #8
    9012:	f00e fddb 	bl	17bcc <net_buf_simple_add>
	hdr->code = op;
    9016:	7005      	strb	r5, [r0, #0]
}
    9018:	4620      	mov	r0, r4
    901a:	bd38      	pop	{r3, r4, r5, pc}

0000901c <display_passkey>:
{
    901c:	b538      	push	{r3, r4, r5, lr}
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    901e:	2104      	movs	r1, #4
{
    9020:	4605      	mov	r5, r0
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    9022:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    9026:	f002 fd23 	bl	ba70 <bt_rand>
    902a:	4604      	mov	r4, r0
    902c:	b988      	cbnz	r0, 9052 <display_passkey+0x36>
	smp->passkey %= 1000000;
    902e:	f8d5 2174 	ldr.w	r2, [r5, #372]	; 0x174
    9032:	4b09      	ldr	r3, [pc, #36]	; (9058 <display_passkey+0x3c>)
    9034:	fbb2 f1f3 	udiv	r1, r2, r3
    9038:	fb03 2111 	mls	r1, r3, r1, r2
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    903c:	4b07      	ldr	r3, [pc, #28]	; (905c <display_passkey+0x40>)
	smp->passkey_round = 0;
    903e:	f885 0178 	strb.w	r0, [r5, #376]	; 0x178
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    9042:	681b      	ldr	r3, [r3, #0]
    9044:	6828      	ldr	r0, [r5, #0]
	smp->passkey %= 1000000;
    9046:	f8c5 1174 	str.w	r1, [r5, #372]	; 0x174
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    904a:	681b      	ldr	r3, [r3, #0]
    904c:	4798      	blx	r3
    904e:	4620      	mov	r0, r4
    9050:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    9052:	2008      	movs	r0, #8
}
    9054:	bd38      	pop	{r3, r4, r5, pc}
    9056:	bf00      	nop
    9058:	000f4240 	.word	0x000f4240
    905c:	200041a0 	.word	0x200041a0

00009060 <sys_mem_swap.constprop.15>:
 * Where n is an index and 'end' the last index of buf.
 *
 * @param buf A valid pointer on a memory area to swap
 * @param length Size of buf memory area
 */
static inline void sys_mem_swap(void *buf, size_t length)
    9060:	b510      	push	{r4, lr}
    9062:	1e43      	subs	r3, r0, #1
    9064:	f100 0210 	add.w	r2, r0, #16
    9068:	3007      	adds	r0, #7
	size_t i;

	for (i = 0; i < (length/2); i++) {
		u8_t tmp = ((u8_t *)buf)[i];

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    906a:	f812 4c01 	ldrb.w	r4, [r2, #-1]
		u8_t tmp = ((u8_t *)buf)[i];
    906e:	7859      	ldrb	r1, [r3, #1]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    9070:	f803 4f01 	strb.w	r4, [r3, #1]!
	for (i = 0; i < (length/2); i++) {
    9074:	4283      	cmp	r3, r0
		((u8_t *)buf)[length - 1 - i] = tmp;
    9076:	f802 1d01 	strb.w	r1, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
    907a:	d1f6      	bne.n	906a <sys_mem_swap.constprop.15+0xa>
	}
}
    907c:	bd10      	pop	{r4, pc}

0000907e <smp_f6>:
{
    907e:	b570      	push	{r4, r5, r6, lr}
    9080:	b096      	sub	sp, #88	; 0x58
    9082:	4605      	mov	r5, r0
    9084:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
    9086:	a805      	add	r0, sp, #20
    9088:	2210      	movs	r2, #16
{
    908a:	461c      	mov	r4, r3
	sys_memcpy_swap(m, n1, 16);
    908c:	f7ff fdf4 	bl	8c78 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
    9090:	2210      	movs	r2, #16
    9092:	4631      	mov	r1, r6
    9094:	a809      	add	r0, sp, #36	; 0x24
    9096:	f7ff fdef 	bl	8c78 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
    909a:	4621      	mov	r1, r4
    909c:	2210      	movs	r2, #16
    909e:	a80d      	add	r0, sp, #52	; 0x34
    90a0:	f7ff fdea 	bl	8c78 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
    90a4:	2203      	movs	r2, #3
    90a6:	991a      	ldr	r1, [sp, #104]	; 0x68
    90a8:	a811      	add	r0, sp, #68	; 0x44
    90aa:	f7ff fde5 	bl	8c78 <sys_memcpy_swap>
	m[51] = a1->type;
    90ae:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    90b0:	f814 3b01 	ldrb.w	r3, [r4], #1
    90b4:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
    90b8:	4621      	mov	r1, r4
    90ba:	2206      	movs	r2, #6
    90bc:	a812      	add	r0, sp, #72	; 0x48
    90be:	f7f7 fc14 	bl	8ea <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
    90c2:	4621      	mov	r1, r4
    90c4:	2206      	movs	r2, #6
    90c6:	a812      	add	r0, sp, #72	; 0x48
    90c8:	f7ff fdd6 	bl	8c78 <sys_memcpy_swap>
	m[58] = a2->type;
    90cc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
    90ce:	f814 3b01 	ldrb.w	r3, [r4], #1
    90d2:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
    90d6:	4621      	mov	r1, r4
    90d8:	2206      	movs	r2, #6
    90da:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    90de:	f7f7 fc04 	bl	8ea <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
    90e2:	4621      	mov	r1, r4
    90e4:	2206      	movs	r2, #6
    90e6:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    90ea:	f7ff fdc5 	bl	8c78 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
    90ee:	2210      	movs	r2, #16
    90f0:	4629      	mov	r1, r5
    90f2:	a801      	add	r0, sp, #4
    90f4:	f7ff fdc0 	bl	8c78 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
    90f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    90fa:	2241      	movs	r2, #65	; 0x41
    90fc:	a905      	add	r1, sp, #20
    90fe:	a801      	add	r0, sp, #4
    9100:	f7ff fe4c 	bl	8d9c <bt_smp_aes_cmac>
	if (err) {
    9104:	4604      	mov	r4, r0
    9106:	b910      	cbnz	r0, 910e <smp_f6+0x90>
	sys_mem_swap(check, 16);
    9108:	981d      	ldr	r0, [sp, #116]	; 0x74
    910a:	f7ff ffa9 	bl	9060 <sys_mem_swap.constprop.15>
}
    910e:	4620      	mov	r0, r4
    9110:	b016      	add	sp, #88	; 0x58
    9112:	bd70      	pop	{r4, r5, r6, pc}

00009114 <smp_f5>:
{
    9114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9118:	b09a      	sub	sp, #104	; 0x68
    911a:	4604      	mov	r4, r0
    911c:	4688      	mov	r8, r1
    911e:	4617      	mov	r7, r2
	u8_t m[53] = { 0x00, /* counter */
    9120:	2100      	movs	r1, #0
    9122:	2235      	movs	r2, #53	; 0x35
    9124:	a80c      	add	r0, sp, #48	; 0x30
{
    9126:	461d      	mov	r5, r3
	u8_t m[53] = { 0x00, /* counter */
    9128:	f7f7 fc0b 	bl	942 <memset>
    912c:	2362      	movs	r3, #98	; 0x62
    912e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    9132:	2374      	movs	r3, #116	; 0x74
    9134:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    9138:	236c      	movs	r3, #108	; 0x6c
	sys_memcpy_swap(ws, w, 32);
    913a:	4621      	mov	r1, r4
	u8_t m[53] = { 0x00, /* counter */
    913c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	sys_memcpy_swap(ws, w, 32);
    9140:	2220      	movs	r2, #32
	u8_t m[53] = { 0x00, /* counter */
    9142:	2365      	movs	r3, #101	; 0x65
	sys_memcpy_swap(ws, w, 32);
    9144:	a804      	add	r0, sp, #16
	u8_t m[53] = { 0x00, /* counter */
    9146:	2601      	movs	r6, #1
    9148:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    914c:	f88d 6063 	strb.w	r6, [sp, #99]	; 0x63
	sys_memcpy_swap(ws, w, 32);
    9150:	f7ff fd92 	bl	8c78 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    9154:	466b      	mov	r3, sp
    9156:	2220      	movs	r2, #32
    9158:	a904      	add	r1, sp, #16
    915a:	4820      	ldr	r0, [pc, #128]	; (91dc <smp_f5+0xc8>)
    915c:	f7ff fe1e 	bl	8d9c <bt_smp_aes_cmac>
	if (err) {
    9160:	4604      	mov	r4, r0
    9162:	bbb8      	cbnz	r0, 91d4 <smp_f5+0xc0>
	sys_memcpy_swap(m + 5, n1, 16);
    9164:	2210      	movs	r2, #16
    9166:	4641      	mov	r1, r8
    9168:	f10d 0035 	add.w	r0, sp, #53	; 0x35
    916c:	f7ff fd84 	bl	8c78 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    9170:	2210      	movs	r2, #16
    9172:	4639      	mov	r1, r7
    9174:	f10d 0045 	add.w	r0, sp, #69	; 0x45
    9178:	f7ff fd7e 	bl	8c78 <sys_memcpy_swap>
	m[37] = a1->type;
    917c:	4629      	mov	r1, r5
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    917e:	2206      	movs	r2, #6
	m[37] = a1->type;
    9180:	f811 3b01 	ldrb.w	r3, [r1], #1
    9184:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    9188:	f10d 0056 	add.w	r0, sp, #86	; 0x56
    918c:	f7ff fd74 	bl	8c78 <sys_memcpy_swap>
	m[44] = a2->type;
    9190:	9920      	ldr	r1, [sp, #128]	; 0x80
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    9192:	2206      	movs	r2, #6
	m[44] = a2->type;
    9194:	f811 3b01 	ldrb.w	r3, [r1], #1
    9198:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    919c:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
    91a0:	f7ff fd6a 	bl	8c78 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    91a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
    91a6:	2235      	movs	r2, #53	; 0x35
    91a8:	a90c      	add	r1, sp, #48	; 0x30
    91aa:	4668      	mov	r0, sp
    91ac:	f7ff fdf6 	bl	8d9c <bt_smp_aes_cmac>
	if (err) {
    91b0:	4604      	mov	r4, r0
    91b2:	b978      	cbnz	r0, 91d4 <smp_f5+0xc0>
	sys_mem_swap(mackey, 16);
    91b4:	9821      	ldr	r0, [sp, #132]	; 0x84
    91b6:	f7ff ff53 	bl	9060 <sys_mem_swap.constprop.15>
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    91ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
	m[0] = 0x01;
    91bc:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    91c0:	2235      	movs	r2, #53	; 0x35
    91c2:	a90c      	add	r1, sp, #48	; 0x30
    91c4:	4668      	mov	r0, sp
    91c6:	f7ff fde9 	bl	8d9c <bt_smp_aes_cmac>
	if (err) {
    91ca:	4604      	mov	r4, r0
    91cc:	b910      	cbnz	r0, 91d4 <smp_f5+0xc0>
	sys_mem_swap(ltk, 16);
    91ce:	9822      	ldr	r0, [sp, #136]	; 0x88
    91d0:	f7ff ff46 	bl	9060 <sys_mem_swap.constprop.15>
}
    91d4:	4620      	mov	r0, r4
    91d6:	b01a      	add	sp, #104	; 0x68
    91d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    91dc:	00021218 	.word	0x00021218

000091e0 <smp_f4>:
{
    91e0:	b570      	push	{r4, r5, r6, lr}
    91e2:	b096      	sub	sp, #88	; 0x58
    91e4:	4614      	mov	r4, r2
    91e6:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
    91e8:	2220      	movs	r2, #32
    91ea:	4601      	mov	r1, r0
    91ec:	a805      	add	r0, sp, #20
{
    91ee:	461d      	mov	r5, r3
	sys_memcpy_swap(m, u, 32);
    91f0:	f7ff fd42 	bl	8c78 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    91f4:	2220      	movs	r2, #32
    91f6:	4631      	mov	r1, r6
    91f8:	a80d      	add	r0, sp, #52	; 0x34
    91fa:	f7ff fd3d 	bl	8c78 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    91fe:	4621      	mov	r1, r4
    9200:	2210      	movs	r2, #16
    9202:	a801      	add	r0, sp, #4
	m[64] = z;
    9204:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
    9208:	f7ff fd36 	bl	8c78 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
    920c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    920e:	2241      	movs	r2, #65	; 0x41
    9210:	a905      	add	r1, sp, #20
    9212:	a801      	add	r0, sp, #4
    9214:	f7ff fdc2 	bl	8d9c <bt_smp_aes_cmac>
	if (err) {
    9218:	4604      	mov	r4, r0
    921a:	b910      	cbnz	r0, 9222 <smp_f4+0x42>
	sys_mem_swap(res, 16);
    921c:	981a      	ldr	r0, [sp, #104]	; 0x68
    921e:	f7ff ff1f 	bl	9060 <sys_mem_swap.constprop.15>
}
    9222:	4620      	mov	r0, r4
    9224:	b016      	add	sp, #88	; 0x58
    9226:	bd70      	pop	{r4, r5, r6, pc}

00009228 <sc_smp_check_confirm>:
{
    9228:	b530      	push	{r4, r5, lr}
	switch (smp->method) {
    922a:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
{
    922e:	b087      	sub	sp, #28
    9230:	4604      	mov	r4, r0
	switch (smp->method) {
    9232:	2b03      	cmp	r3, #3
    9234:	d825      	bhi.n	9282 <sc_smp_check_confirm+0x5a>
    9236:	e8df f003 	tbb	[pc, r3]
    923a:	0222      	.short	0x0222
    923c:	2202      	.short	0x2202
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    923e:	f890 2178 	ldrb.w	r2, [r0, #376]	; 0x178
    9242:	f8d0 3174 	ldr.w	r3, [r0, #372]	; 0x174
    9246:	40d3      	lsrs	r3, r2
    9248:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    924c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9250:	b2db      	uxtb	r3, r3
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    9252:	ad02      	add	r5, sp, #8
    9254:	9500      	str	r5, [sp, #0]
    9256:	f104 02d3 	add.w	r2, r4, #211	; 0xd3
    925a:	490b      	ldr	r1, [pc, #44]	; (9288 <sc_smp_check_confirm+0x60>)
    925c:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
    9260:	f7ff ffbe 	bl	91e0 <smp_f4>
    9264:	b968      	cbnz	r0, 9282 <sc_smp_check_confirm+0x5a>
	if (memcmp(smp->pcnf, cfm, 16)) {
    9266:	2210      	movs	r2, #16
    9268:	4629      	mov	r1, r5
    926a:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    926e:	f7f7 fb0f 	bl	890 <memcmp>
    9272:	2800      	cmp	r0, #0
	return 0;
    9274:	bf14      	ite	ne
    9276:	2004      	movne	r0, #4
    9278:	2000      	moveq	r0, #0
}
    927a:	b007      	add	sp, #28
    927c:	bd30      	pop	{r4, r5, pc}
		r = 0;
    927e:	2300      	movs	r3, #0
    9280:	e7e7      	b.n	9252 <sc_smp_check_confirm+0x2a>
		return BT_SMP_ERR_UNSPECIFIED;
    9282:	2008      	movs	r0, #8
    9284:	e7f9      	b.n	927a <sc_smp_check_confirm+0x52>
    9286:	bf00      	nop
    9288:	200008c1 	.word	0x200008c1

0000928c <smp_send>:
{
    928c:	b510      	push	{r4, lr}
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    928e:	4613      	mov	r3, r2
{
    9290:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    9292:	460a      	mov	r2, r1
    9294:	6800      	ldr	r0, [r0, #0]
    9296:	2106      	movs	r1, #6
    9298:	f7fd faf9 	bl	688e <bt_l2cap_send_cb>
    929c:	f504 71be 	add.w	r1, r4, #380	; 0x17c
    92a0:	f247 5230 	movw	r2, #30000	; 0x7530
    92a4:	4802      	ldr	r0, [pc, #8]	; (92b0 <smp_send+0x24>)
}
    92a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    92aa:	f016 be73 	b.w	1ff94 <k_delayed_work_submit_to_queue>
    92ae:	bf00      	nop
    92b0:	20005218 	.word	0x20005218

000092b4 <sc_smp_send_dhkey_check>:
{
    92b4:	b570      	push	{r4, r5, r6, lr}
    92b6:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    92b8:	200d      	movs	r0, #13
{
    92ba:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    92bc:	f7ff fea0 	bl	9000 <smp_create_pdu.isra.4>
	if (!buf) {
    92c0:	4604      	mov	r4, r0
    92c2:	b170      	cbz	r0, 92e2 <sc_smp_send_dhkey_check+0x2e>
	req = net_buf_add(buf, sizeof(*req));
    92c4:	2110      	movs	r1, #16
    92c6:	3008      	adds	r0, #8
    92c8:	f00e fc80 	bl	17bcc <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    92cc:	4631      	mov	r1, r6
    92ce:	2210      	movs	r2, #16
    92d0:	f7f7 fb0b 	bl	8ea <memcpy>
	smp_send(smp, buf, NULL);
    92d4:	4628      	mov	r0, r5
    92d6:	2200      	movs	r2, #0
    92d8:	4621      	mov	r1, r4
    92da:	f7ff ffd7 	bl	928c <smp_send>
	return 0;
    92de:	2000      	movs	r0, #0
    92e0:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    92e2:	2008      	movs	r0, #8
}
    92e4:	bd70      	pop	{r4, r5, r6, pc}

000092e6 <compute_and_send_master_dhcheck>:
{
    92e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    92ea:	4604      	mov	r4, r0
    92ec:	b08c      	sub	sp, #48	; 0x30
	memset(r, 0, sizeof(r));
    92ee:	2210      	movs	r2, #16
    92f0:	2100      	movs	r1, #0
    92f2:	a808      	add	r0, sp, #32
    92f4:	f7f7 fb25 	bl	942 <memset>
	switch (smp->method) {
    92f8:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    92fc:	2b03      	cmp	r3, #3
    92fe:	d81f      	bhi.n	9340 <compute_and_send_master_dhcheck+0x5a>
    9300:	e8df f003 	tbb	[pc, r3]
    9304:	08020208 	.word	0x08020208
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    9308:	2204      	movs	r2, #4
    930a:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    930e:	a808      	add	r0, sp, #32
    9310:	f7f7 faeb 	bl	8ea <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    9314:	6823      	ldr	r3, [r4, #0]
		   smp->tk)) {
    9316:	f104 02e3 	add.w	r2, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    931a:	f104 07c3 	add.w	r7, r4, #195	; 0xc3
    931e:	f104 08d3 	add.w	r8, r4, #211	; 0xd3
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    9322:	f204 1563 	addw	r5, r4, #355	; 0x163
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    9326:	9202      	str	r2, [sp, #8]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    9328:	f103 0256 	add.w	r2, r3, #86	; 0x56
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    932c:	9200      	str	r2, [sp, #0]
    932e:	9501      	str	r5, [sp, #4]
    9330:	334f      	adds	r3, #79	; 0x4f
    9332:	4642      	mov	r2, r8
    9334:	4639      	mov	r1, r7
    9336:	f204 1033 	addw	r0, r4, #307	; 0x133
    933a:	f7ff feeb 	bl	9114 <smp_f5>
    933e:	b108      	cbz	r0, 9344 <compute_and_send_master_dhcheck+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
    9340:	2008      	movs	r0, #8
    9342:	e01d      	b.n	9380 <compute_and_send_master_dhcheck+0x9a>
		   &smp->chan.chan.conn->le.init_addr,
    9344:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    9346:	ae04      	add	r6, sp, #16
		   &smp->chan.chan.conn->le.init_addr,
    9348:	f852 3ba6 	ldr.w	r3, [r2], #166
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    934c:	9603      	str	r6, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, e)) {
    934e:	f103 0156 	add.w	r1, r3, #86	; 0x56
		   &smp->chan.chan.conn->le.init_addr,
    9352:	334f      	adds	r3, #79	; 0x4f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    9354:	e88d 000c 	stmia.w	sp, {r2, r3}
    9358:	9102      	str	r1, [sp, #8]
    935a:	4628      	mov	r0, r5
    935c:	ab08      	add	r3, sp, #32
    935e:	4642      	mov	r2, r8
    9360:	4639      	mov	r1, r7
    9362:	f7ff fe8c 	bl	907e <smp_f6>
    9366:	4605      	mov	r5, r0
    9368:	2800      	cmp	r0, #0
    936a:	d1e9      	bne.n	9340 <compute_and_send_master_dhcheck+0x5a>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    936c:	210d      	movs	r1, #13
    936e:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    9372:	f7ff fce7 	bl	8d44 <atomic_set_bit>
	sc_smp_send_dhkey_check(smp, e);
    9376:	4631      	mov	r1, r6
    9378:	4620      	mov	r0, r4
    937a:	f7ff ff9b 	bl	92b4 <sc_smp_send_dhkey_check>
	return 0;
    937e:	4628      	mov	r0, r5
}
    9380:	b00c      	add	sp, #48	; 0x30
    9382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009386 <compute_and_check_and_send_slave_dhcheck>:
{
    9386:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    938a:	4604      	mov	r4, r0
    938c:	b091      	sub	sp, #68	; 0x44
	memset(r, 0, sizeof(r));
    938e:	2210      	movs	r2, #16
    9390:	2100      	movs	r1, #0
    9392:	a80c      	add	r0, sp, #48	; 0x30
    9394:	f7f7 fad5 	bl	942 <memset>
	switch (smp->method) {
    9398:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    939c:	2b03      	cmp	r3, #3
    939e:	d81f      	bhi.n	93e0 <compute_and_check_and_send_slave_dhcheck+0x5a>
    93a0:	e8df f003 	tbb	[pc, r3]
    93a4:	08020208 	.word	0x08020208
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    93a8:	2204      	movs	r2, #4
    93aa:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    93ae:	a80c      	add	r0, sp, #48	; 0x30
    93b0:	f7f7 fa9b 	bl	8ea <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    93b4:	6823      	ldr	r3, [r4, #0]
		   smp->tk)) {
    93b6:	f104 02e3 	add.w	r2, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    93ba:	f104 06d3 	add.w	r6, r4, #211	; 0xd3
    93be:	f104 08c3 	add.w	r8, r4, #195	; 0xc3
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    93c2:	f204 1563 	addw	r5, r4, #355	; 0x163
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    93c6:	9202      	str	r2, [sp, #8]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    93c8:	f103 0256 	add.w	r2, r3, #86	; 0x56
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    93cc:	9200      	str	r2, [sp, #0]
    93ce:	9501      	str	r5, [sp, #4]
    93d0:	334f      	adds	r3, #79	; 0x4f
    93d2:	4642      	mov	r2, r8
    93d4:	4631      	mov	r1, r6
    93d6:	f204 1033 	addw	r0, r4, #307	; 0x133
    93da:	f7ff fe9b 	bl	9114 <smp_f5>
    93de:	b108      	cbz	r0, 93e4 <compute_and_check_and_send_slave_dhcheck+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
    93e0:	2008      	movs	r0, #8
    93e2:	e039      	b.n	9458 <compute_and_check_and_send_slave_dhcheck+0xd2>
		   &smp->chan.chan.conn->le.resp_addr,
    93e4:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    93e6:	af08      	add	r7, sp, #32
		   &smp->chan.chan.conn->le.resp_addr,
    93e8:	f852 3bad 	ldr.w	r3, [r2], #173
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    93ec:	9703      	str	r7, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
    93ee:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr,
    93f2:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    93f4:	e88d 000c 	stmia.w	sp, {r2, r3}
    93f8:	9102      	str	r1, [sp, #8]
    93fa:	ab0c      	add	r3, sp, #48	; 0x30
    93fc:	4632      	mov	r2, r6
    93fe:	4641      	mov	r1, r8
    9400:	4628      	mov	r0, r5
    9402:	f7ff fe3c 	bl	907e <smp_f6>
    9406:	2800      	cmp	r0, #0
    9408:	d1ea      	bne.n	93e0 <compute_and_check_and_send_slave_dhcheck+0x5a>
		   &smp->chan.chan.conn->le.init_addr,
    940a:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    940c:	f10d 0910 	add.w	r9, sp, #16
		   &smp->chan.chan.conn->le.init_addr,
    9410:	f852 3ba6 	ldr.w	r3, [r2], #166
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    9414:	f8cd 900c 	str.w	r9, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    9418:	f103 0156 	add.w	r1, r3, #86	; 0x56
		   &smp->chan.chan.conn->le.init_addr,
    941c:	334f      	adds	r3, #79	; 0x4f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    941e:	e88d 000c 	stmia.w	sp, {r2, r3}
    9422:	9102      	str	r1, [sp, #8]
    9424:	ab0c      	add	r3, sp, #48	; 0x30
    9426:	4642      	mov	r2, r8
    9428:	4631      	mov	r1, r6
    942a:	4628      	mov	r0, r5
    942c:	f7ff fe27 	bl	907e <smp_f6>
    9430:	2800      	cmp	r0, #0
    9432:	d1d5      	bne.n	93e0 <compute_and_check_and_send_slave_dhcheck+0x5a>
	if (memcmp(smp->e, re, 16)) {
    9434:	2210      	movs	r2, #16
    9436:	4649      	mov	r1, r9
    9438:	f204 1053 	addw	r0, r4, #339	; 0x153
    943c:	f7f7 fa28 	bl	890 <memcmp>
    9440:	4605      	mov	r5, r0
    9442:	b960      	cbnz	r0, 945e <compute_and_check_and_send_slave_dhcheck+0xd8>
	sc_smp_send_dhkey_check(smp, e);
    9444:	4639      	mov	r1, r7
    9446:	4620      	mov	r0, r4
    9448:	f7ff ff34 	bl	92b4 <sc_smp_send_dhkey_check>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    944c:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    9450:	2101      	movs	r1, #1
    9452:	f7ff fc77 	bl	8d44 <atomic_set_bit>
	return 0;
    9456:	4628      	mov	r0, r5
}
    9458:	b011      	add	sp, #68	; 0x44
    945a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    945e:	200b      	movs	r0, #11
    9460:	e7fa      	b.n	9458 <compute_and_check_and_send_slave_dhcheck+0xd2>

00009462 <smp_dhkey_check>:
{
    9462:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    9464:	6803      	ldr	r3, [r0, #0]
	struct bt_smp_dhkey_check *req = (void *)buf->data;
    9466:	688f      	ldr	r7, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    9468:	78dd      	ldrb	r5, [r3, #3]
{
    946a:	b08d      	sub	sp, #52	; 0x34
    946c:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    946e:	2d00      	cmp	r5, #0
    9470:	d14c      	bne.n	950c <smp_dhkey_check+0xaa>
		memset(r, 0, sizeof(r));
    9472:	2210      	movs	r2, #16
    9474:	4629      	mov	r1, r5
    9476:	a808      	add	r0, sp, #32
    9478:	f7f7 fa63 	bl	942 <memset>
		switch (smp->method) {
    947c:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    9480:	2b03      	cmp	r3, #3
    9482:	d81e      	bhi.n	94c2 <smp_dhkey_check+0x60>
    9484:	e8df f003 	tbb	[pc, r3]
    9488:	08020208 	.word	0x08020208
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
    948c:	2204      	movs	r2, #4
    948e:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    9492:	a808      	add	r0, sp, #32
    9494:	f7f7 fa29 	bl	8ea <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
    9498:	4622      	mov	r2, r4
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    949a:	ae04      	add	r6, sp, #16
			   &smp->chan.chan.conn->le.resp_addr,
    949c:	f852 3bc3 	ldr.w	r3, [r2], #195
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    94a0:	9603      	str	r6, [sp, #12]
			   &smp->chan.chan.conn->le.init_addr, e)) {
    94a2:	f103 014f 	add.w	r1, r3, #79	; 0x4f
			   &smp->chan.chan.conn->le.resp_addr,
    94a6:	3356      	adds	r3, #86	; 0x56
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    94a8:	9301      	str	r3, [sp, #4]
    94aa:	f104 03ad 	add.w	r3, r4, #173	; 0xad
    94ae:	9102      	str	r1, [sp, #8]
    94b0:	9300      	str	r3, [sp, #0]
    94b2:	f104 01d3 	add.w	r1, r4, #211	; 0xd3
    94b6:	ab08      	add	r3, sp, #32
    94b8:	f204 1063 	addw	r0, r4, #355	; 0x163
    94bc:	f7ff fddf 	bl	907e <smp_f6>
    94c0:	b118      	cbz	r0, 94ca <smp_dhkey_check+0x68>
			return BT_SMP_ERR_UNSPECIFIED;
    94c2:	2508      	movs	r5, #8
}
    94c4:	4628      	mov	r0, r5
    94c6:	b00d      	add	sp, #52	; 0x34
    94c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (memcmp(e, req->e, 16)) {
    94ca:	2210      	movs	r2, #16
    94cc:	4639      	mov	r1, r7
    94ce:	4630      	mov	r0, r6
    94d0:	f7f7 f9de 	bl	890 <memcmp>
    94d4:	b9c0      	cbnz	r0, 9508 <smp_dhkey_check+0xa6>
	return min(req->max_key_size, rsp->max_key_size);
    94d6:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
    94da:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, 0, 0,
    94de:	429a      	cmp	r2, r3
    94e0:	bf94      	ite	ls
    94e2:	9202      	strls	r2, [sp, #8]
    94e4:	9302      	strhi	r3, [sp, #8]
						smp->tk, enc_size) < 0) {
    94e6:	f104 03e3 	add.w	r3, r4, #227	; 0xe3
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, 0, 0,
    94ea:	e88d 0009 	stmia.w	sp, {r0, r3}
    94ee:	2200      	movs	r2, #0
    94f0:	2300      	movs	r3, #0
    94f2:	6820      	ldr	r0, [r4, #0]
    94f4:	f7fc fa92 	bl	5a1c <bt_conn_le_start_encryption>
    94f8:	2800      	cmp	r0, #0
    94fa:	dbe2      	blt.n	94c2 <smp_dhkey_check+0x60>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    94fc:	2101      	movs	r1, #1
    94fe:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    9502:	f7ff fc1f 	bl	8d44 <atomic_set_bit>
			return 0;
    9506:	e7dd      	b.n	94c4 <smp_dhkey_check+0x62>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    9508:	250b      	movs	r5, #11
    950a:	e7db      	b.n	94c4 <smp_dhkey_check+0x62>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    950c:	2d01      	cmp	r5, #1
    950e:	d11d      	bne.n	954c <smp_dhkey_check+0xea>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9510:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    9514:	f100 06a0 	add.w	r6, r0, #160	; 0xa0
    9518:	e856 3f00 	ldrex	r3, [r6]
    951c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    9520:	e846 3200 	strex	r2, r3, [r6]
    9524:	2a00      	cmp	r2, #0
    9526:	d1f7      	bne.n	9518 <smp_dhkey_check+0xb6>
    9528:	f3bf 8f5b 	dmb	ish
		memcpy(smp->e, req->e, sizeof(smp->e));
    952c:	2210      	movs	r2, #16
    952e:	4639      	mov	r1, r7
    9530:	f204 1053 	addw	r0, r4, #339	; 0x153
    9534:	f7f7 f9d9 	bl	8ea <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    9538:	2107      	movs	r1, #7
    953a:	4630      	mov	r0, r6
    953c:	f7ff fbf5 	bl	8d2a <atomic_test_bit>
    9540:	4605      	mov	r5, r0
    9542:	b128      	cbz	r0, 9550 <smp_dhkey_check+0xee>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    9544:	2108      	movs	r1, #8
    9546:	4630      	mov	r0, r6
    9548:	f7ff fbfc 	bl	8d44 <atomic_set_bit>
	return 0;
    954c:	2500      	movs	r5, #0
    954e:	e7b9      	b.n	94c4 <smp_dhkey_check+0x62>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    9550:	2109      	movs	r1, #9
    9552:	4630      	mov	r0, r6
    9554:	f7ff fbe9 	bl	8d2a <atomic_test_bit>
    9558:	b110      	cbz	r0, 9560 <smp_dhkey_check+0xfe>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    955a:	2108      	movs	r1, #8
    955c:	4630      	mov	r0, r6
    955e:	e7d0      	b.n	9502 <smp_dhkey_check+0xa0>
		return compute_and_check_and_send_slave_dhcheck(smp);
    9560:	4620      	mov	r0, r4
    9562:	f7ff ff10 	bl	9386 <compute_and_check_and_send_slave_dhcheck>
    9566:	4605      	mov	r5, r0
    9568:	e7ac      	b.n	94c4 <smp_dhkey_check+0x62>
	...

0000956c <sc_send_public_key>:
{
    956c:	b570      	push	{r4, r5, r6, lr}
    956e:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PUBLIC_KEY,
    9570:	200c      	movs	r0, #12
    9572:	f7ff fd45 	bl	9000 <smp_create_pdu.isra.4>
	if (!req_buf) {
    9576:	4604      	mov	r4, r0
    9578:	b1a0      	cbz	r0, 95a4 <sc_send_public_key+0x38>
	req = net_buf_add(req_buf, sizeof(*req));
    957a:	2140      	movs	r1, #64	; 0x40
    957c:	3008      	adds	r0, #8
    957e:	f00e fb25 	bl	17bcc <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    9582:	2220      	movs	r2, #32
    9584:	4908      	ldr	r1, [pc, #32]	; (95a8 <sc_send_public_key+0x3c>)
	req = net_buf_add(req_buf, sizeof(*req));
    9586:	4606      	mov	r6, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    9588:	f7f7 f9af 	bl	8ea <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    958c:	2220      	movs	r2, #32
    958e:	18b0      	adds	r0, r6, r2
    9590:	4906      	ldr	r1, [pc, #24]	; (95ac <sc_send_public_key+0x40>)
    9592:	f7f7 f9aa 	bl	8ea <memcpy>
	smp_send(smp, req_buf, NULL);
    9596:	4628      	mov	r0, r5
    9598:	2200      	movs	r2, #0
    959a:	4621      	mov	r1, r4
    959c:	f7ff fe76 	bl	928c <smp_send>
	return 0;
    95a0:	2000      	movs	r0, #0
    95a2:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    95a4:	2008      	movs	r0, #8
}
    95a6:	bd70      	pop	{r4, r5, r6, pc}
    95a8:	200008c1 	.word	0x200008c1
    95ac:	200008e1 	.word	0x200008e1

000095b0 <send_pairing_rsp>:
{
    95b0:	b538      	push	{r3, r4, r5, lr}
    95b2:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
    95b4:	2002      	movs	r0, #2
    95b6:	f7ff fd23 	bl	9000 <smp_create_pdu.isra.4>
	if (!rsp_buf) {
    95ba:	4604      	mov	r4, r0
    95bc:	b178      	cbz	r0, 95de <send_pairing_rsp+0x2e>
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
    95be:	2106      	movs	r1, #6
    95c0:	3008      	adds	r0, #8
    95c2:	f00e fb03 	bl	17bcc <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
    95c6:	f105 01ad 	add.w	r1, r5, #173	; 0xad
    95ca:	2206      	movs	r2, #6
    95cc:	f7f7 f98d 	bl	8ea <memcpy>
	smp_send(smp, rsp_buf, NULL);
    95d0:	4628      	mov	r0, r5
    95d2:	2200      	movs	r2, #0
    95d4:	4621      	mov	r1, r4
    95d6:	f7ff fe59 	bl	928c <smp_send>
	return 0;
    95da:	2000      	movs	r0, #0
    95dc:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    95de:	2008      	movs	r0, #8
}
    95e0:	bd38      	pop	{r3, r4, r5, pc}
	...

000095e4 <smp_pairing_req>:
{
    95e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    95e6:	688f      	ldr	r7, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    95e8:	78fb      	ldrb	r3, [r7, #3]
    95ea:	3b07      	subs	r3, #7
    95ec:	2b09      	cmp	r3, #9
{
    95ee:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    95f0:	f200 80bf 	bhi.w	9772 <smp_pairing_req+0x18e>
	ret = smp_init(smp);
    95f4:	f7ff fbba 	bl	8d6c <smp_init>
	if (ret) {
    95f8:	4605      	mov	r5, r0
    95fa:	b110      	cbz	r0, 9602 <smp_pairing_req+0x1e>
		return ret;
    95fc:	b2c5      	uxtb	r5, r0
}
    95fe:	4628      	mov	r0, r5
    9600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    9602:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
    9604:	2206      	movs	r2, #6
    9606:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    9608:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	memcpy(smp->preq + 1, req, sizeof(*req));
    960c:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    9610:	f7f7 f96b 	bl	8ea <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    9614:	2302      	movs	r3, #2
    9616:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
	rsp->auth_req = get_auth(req->auth_req);
    961a:	78b8      	ldrb	r0, [r7, #2]
    961c:	f7ff fb5e 	bl	8cdc <get_auth>
    9620:	f884 00af 	strb.w	r0, [r4, #175]	; 0xaf
    9624:	4606      	mov	r6, r0
	rsp->io_capability = get_io_capa();
    9626:	f7ff fb33 	bl	8c90 <get_io_capa>
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    962a:	2310      	movs	r3, #16
	rsp->io_capability = get_io_capa();
    962c:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    9630:	f884 50ae 	strb.w	r5, [r4, #174]	; 0xae
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    9634:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    9638:	793b      	ldrb	r3, [r7, #4]
    963a:	f003 0303 	and.w	r3, r3, #3
    963e:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    9642:	797b      	ldrb	r3, [r7, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    9644:	f016 0f08 	tst.w	r6, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    9648:	f003 0301 	and.w	r3, r3, #1
    964c:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
    9650:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    9654:	d00e      	beq.n	9674 <smp_pairing_req+0x90>
    9656:	78bb      	ldrb	r3, [r7, #2]
    9658:	071b      	lsls	r3, r3, #28
    965a:	d50b      	bpl.n	9674 <smp_pairing_req+0x90>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    965c:	2105      	movs	r1, #5
    965e:	4630      	mov	r0, r6
    9660:	f7ff fb70 	bl	8d44 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    9664:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
		rsp->resp_key_dist &= SEND_KEYS_SC;
    9668:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
		rsp->init_key_dist &= RECV_KEYS_SC;
    966c:	f003 0302 	and.w	r3, r3, #2
    9670:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    9674:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    9678:	0698      	lsls	r0, r3, #26
    967a:	d506      	bpl.n	968a <smp_pairing_req+0xa6>
    967c:	78bb      	ldrb	r3, [r7, #2]
    967e:	0699      	lsls	r1, r3, #26
    9680:	d503      	bpl.n	968a <smp_pairing_req+0xa6>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    9682:	2111      	movs	r1, #17
    9684:	4630      	mov	r0, r6
    9686:	f7ff fb5d 	bl	8d44 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    968a:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    968e:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist = rsp->init_key_dist;
    9692:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    9696:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    969a:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    969e:	07da      	lsls	r2, r3, #31
    96a0:	d506      	bpl.n	96b0 <smp_pairing_req+0xcc>
    96a2:	78bb      	ldrb	r3, [r7, #2]
    96a4:	07db      	lsls	r3, r3, #31
    96a6:	d503      	bpl.n	96b0 <smp_pairing_req+0xcc>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    96a8:	210a      	movs	r1, #10
    96aa:	4630      	mov	r0, r6
    96ac:	f7ff fb4a 	bl	8d44 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    96b0:	2103      	movs	r1, #3
    96b2:	4630      	mov	r0, r6
    96b4:	f7ff fb46 	bl	8d44 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    96b8:	2105      	movs	r1, #5
    96ba:	4630      	mov	r0, r6
    96bc:	f7ff fb35 	bl	8d2a <atomic_test_bit>
    96c0:	783f      	ldrb	r7, [r7, #0]
    96c2:	bb58      	cbnz	r0, 971c <smp_pairing_req+0x138>
	smp->method = legacy_get_pair_method(smp, remote_io);
    96c4:	4639      	mov	r1, r7
    96c6:	4620      	mov	r0, r4
    96c8:	f7ff fc5a 	bl	8f80 <legacy_get_pair_method>
    96cc:	4605      	mov	r5, r0
    96ce:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    96d2:	b990      	cbnz	r0, 96fa <smp_pairing_req+0x116>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    96d4:	210c      	movs	r1, #12
    96d6:	4630      	mov	r0, r6
    96d8:	f7ff fb27 	bl	8d2a <atomic_test_bit>
	if (smp->method == JUST_WORKS &&
    96dc:	b968      	cbnz	r0, 96fa <smp_pairing_req+0x116>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    96de:	4f26      	ldr	r7, [pc, #152]	; (9778 <smp_pairing_req+0x194>)
    96e0:	683b      	ldr	r3, [r7, #0]
    96e2:	b153      	cbz	r3, 96fa <smp_pairing_req+0x116>
	    bt_auth && bt_auth->pairing_confirm) {
    96e4:	691b      	ldr	r3, [r3, #16]
    96e6:	b143      	cbz	r3, 96fa <smp_pairing_req+0x116>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    96e8:	4630      	mov	r0, r6
    96ea:	2109      	movs	r1, #9
    96ec:	f7ff fb2a 	bl	8d44 <atomic_set_bit>
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    96f0:	683b      	ldr	r3, [r7, #0]
    96f2:	6820      	ldr	r0, [r4, #0]
    96f4:	691b      	ldr	r3, [r3, #16]
    96f6:	4798      	blx	r3
			return 0;
    96f8:	e781      	b.n	95fe <smp_pairing_req+0x1a>
	ret = send_pairing_rsp(smp);
    96fa:	4620      	mov	r0, r4
    96fc:	f7ff ff58 	bl	95b0 <send_pairing_rsp>
	if (ret) {
    9700:	4605      	mov	r5, r0
    9702:	2800      	cmp	r0, #0
    9704:	f47f af7b 	bne.w	95fe <smp_pairing_req+0x1a>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    9708:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    970c:	2103      	movs	r1, #3
    970e:	f7ff fb19 	bl	8d44 <atomic_set_bit>
	return legacy_request_tk(smp);
    9712:	4620      	mov	r0, r4
}
    9714:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return legacy_request_tk(smp);
    9718:	f7ff bbea 	b.w	8ef0 <legacy_request_tk>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    971c:	2f04      	cmp	r7, #4
    971e:	d826      	bhi.n	976e <smp_pairing_req+0x18a>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    9720:	f894 50a8 	ldrb.w	r5, [r4, #168]	; 0xa8
    9724:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    9728:	431d      	orrs	r5, r3
    972a:	f015 0504 	ands.w	r5, r5, #4
    972e:	d006      	beq.n	973e <smp_pairing_req+0x15a>
	return gen_method_sc[remote_io][get_io_capa()];
    9730:	f7ff faae 	bl	8c90 <get_io_capa>
    9734:	4911      	ldr	r1, [pc, #68]	; (977c <smp_pairing_req+0x198>)
    9736:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    973a:	440f      	add	r7, r1
    973c:	5c3d      	ldrb	r5, [r7, r0]
	smp->method = get_pair_method(smp, req->io_capability);
    973e:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
	if (smp->method == JUST_WORKS) {
    9742:	b955      	cbnz	r5, 975a <smp_pairing_req+0x176>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    9744:	210c      	movs	r1, #12
    9746:	4630      	mov	r0, r6
    9748:	f7ff faef 	bl	8d2a <atomic_test_bit>
    974c:	b928      	cbnz	r0, 975a <smp_pairing_req+0x176>
    974e:	4f0a      	ldr	r7, [pc, #40]	; (9778 <smp_pairing_req+0x194>)
    9750:	683b      	ldr	r3, [r7, #0]
    9752:	b113      	cbz	r3, 975a <smp_pairing_req+0x176>
		    bt_auth && bt_auth->pairing_confirm) {
    9754:	691b      	ldr	r3, [r3, #16]
    9756:	2b00      	cmp	r3, #0
    9758:	d1c6      	bne.n	96e8 <smp_pairing_req+0x104>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    975a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    975e:	210c      	movs	r1, #12
    9760:	f7ff faf0 	bl	8d44 <atomic_set_bit>
	return send_pairing_rsp(smp);
    9764:	4620      	mov	r0, r4
}
    9766:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return send_pairing_rsp(smp);
    976a:	f7ff bf21 	b.w	95b0 <send_pairing_rsp>
		return JUST_WORKS;
    976e:	2500      	movs	r5, #0
    9770:	e7e5      	b.n	973e <smp_pairing_req+0x15a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    9772:	2506      	movs	r5, #6
    9774:	e743      	b.n	95fe <smp_pairing_req+0x1a>
    9776:	bf00      	nop
    9778:	200041a0 	.word	0x200041a0
    977c:	0002118d 	.word	0x0002118d

00009780 <smp_send_pairing_random>:
{
    9780:	b538      	push	{r3, r4, r5, lr}
    9782:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
    9784:	2004      	movs	r0, #4
    9786:	f7ff fc3b 	bl	9000 <smp_create_pdu.isra.4>
	if (!rsp_buf) {
    978a:	4604      	mov	r4, r0
    978c:	b178      	cbz	r0, 97ae <smp_send_pairing_random+0x2e>
	req = net_buf_add(rsp_buf, sizeof(*req));
    978e:	2110      	movs	r1, #16
    9790:	3008      	adds	r0, #8
    9792:	f00e fa1b 	bl	17bcc <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
    9796:	f105 01c3 	add.w	r1, r5, #195	; 0xc3
    979a:	2210      	movs	r2, #16
    979c:	f7f7 f8a5 	bl	8ea <memcpy>
	smp_send(smp, rsp_buf, NULL);
    97a0:	4628      	mov	r0, r5
    97a2:	2200      	movs	r2, #0
    97a4:	4621      	mov	r1, r4
    97a6:	f7ff fd71 	bl	928c <smp_send>
	return 0;
    97aa:	2000      	movs	r0, #0
    97ac:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    97ae:	2008      	movs	r0, #8
}
    97b0:	bd38      	pop	{r3, r4, r5, pc}
	...

000097b4 <bt_smp_distribute_keys>:
{
    97b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_keys *keys = conn->le.keys;
    97b8:	6803      	ldr	r3, [r0, #0]
	if (!keys) {
    97ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
{
    97bc:	b089      	sub	sp, #36	; 0x24
    97be:	4605      	mov	r5, r0
	if (!keys) {
    97c0:	2b00      	cmp	r3, #0
    97c2:	d069      	beq.n	9898 <bt_smp_distribute_keys+0xe4>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    97c4:	f100 07a0 	add.w	r7, r0, #160	; 0xa0
    97c8:	2105      	movs	r1, #5
    97ca:	4638      	mov	r0, r7
    97cc:	f7ff faad 	bl	8d2a <atomic_test_bit>
    97d0:	4680      	mov	r8, r0
    97d2:	2800      	cmp	r0, #0
    97d4:	d160      	bne.n	9898 <bt_smp_distribute_keys+0xe4>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    97d6:	f895 3179 	ldrb.w	r3, [r5, #377]	; 0x179
    97da:	07db      	lsls	r3, r3, #31
    97dc:	d55c      	bpl.n	9898 <bt_smp_distribute_keys+0xe4>
	struct bt_keys *keys = conn->le.keys;
    97de:	682b      	ldr	r3, [r5, #0]
		bt_rand(key, sizeof(key));
    97e0:	2110      	movs	r1, #16
    97e2:	eb0d 0001 	add.w	r0, sp, r1
	struct bt_keys *keys = conn->le.keys;
    97e6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		bt_rand(key, sizeof(key));
    97e8:	f002 f942 	bl	ba70 <bt_rand>
		bt_rand(&rand, sizeof(rand));
    97ec:	2108      	movs	r1, #8
    97ee:	eb0d 0001 	add.w	r0, sp, r1
    97f2:	f002 f93d 	bl	ba70 <bt_rand>
		bt_rand(&ediv, sizeof(ediv));
    97f6:	2102      	movs	r1, #2
    97f8:	f10d 0006 	add.w	r0, sp, #6
    97fc:	f002 f938 	bl	ba70 <bt_rand>
		buf = smp_create_pdu(conn, BT_SMP_CMD_ENCRYPT_INFO,
    9800:	2006      	movs	r0, #6
    9802:	f7ff fbfd 	bl	9000 <smp_create_pdu.isra.4>
		if (!buf) {
    9806:	4606      	mov	r6, r0
    9808:	2800      	cmp	r0, #0
    980a:	d045      	beq.n	9898 <bt_smp_distribute_keys+0xe4>
		info = net_buf_add(buf, sizeof(*info));
    980c:	2110      	movs	r1, #16
    980e:	3008      	adds	r0, #8
    9810:	f00e f9dc 	bl	17bcc <net_buf_simple_add>
		memcpy(info->ltk, key, keys->enc_size);
    9814:	79e2      	ldrb	r2, [r4, #7]
    9816:	a904      	add	r1, sp, #16
		info = net_buf_add(buf, sizeof(*info));
    9818:	4681      	mov	r9, r0
		memcpy(info->ltk, key, keys->enc_size);
    981a:	f7f7 f866 	bl	8ea <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    981e:	79e0      	ldrb	r0, [r4, #7]
    9820:	280f      	cmp	r0, #15
    9822:	d805      	bhi.n	9830 <bt_smp_distribute_keys+0x7c>
			memset(info->ltk + keys->enc_size, 0,
    9824:	f1c0 0210 	rsb	r2, r0, #16
    9828:	4641      	mov	r1, r8
    982a:	4448      	add	r0, r9
    982c:	f7f7 f889 	bl	942 <memset>
		smp_send(smp, buf, NULL);
    9830:	4631      	mov	r1, r6
    9832:	2200      	movs	r2, #0
    9834:	4628      	mov	r0, r5
    9836:	f7ff fd29 	bl	928c <smp_send>
		buf = smp_create_pdu(conn, BT_SMP_CMD_MASTER_IDENT,
    983a:	2007      	movs	r0, #7
    983c:	f7ff fbe0 	bl	9000 <smp_create_pdu.isra.4>
		if (!buf) {
    9840:	4606      	mov	r6, r0
    9842:	b348      	cbz	r0, 9898 <bt_smp_distribute_keys+0xe4>
		ident = net_buf_add(buf, sizeof(*ident));
    9844:	210a      	movs	r1, #10
    9846:	3008      	adds	r0, #8
    9848:	f00e f9c0 	bl	17bcc <net_buf_simple_add>
		ident->rand = rand;
    984c:	9b02      	ldr	r3, [sp, #8]
    984e:	f8c0 3002 	str.w	r3, [r0, #2]
    9852:	9b03      	ldr	r3, [sp, #12]
    9854:	f8c0 3006 	str.w	r3, [r0, #6]
		ident->ediv = ediv;
    9858:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    985c:	8003      	strh	r3, [r0, #0]
		smp_send(smp, buf, ident_sent);
    985e:	4631      	mov	r1, r6
    9860:	4628      	mov	r0, r5
    9862:	4a0f      	ldr	r2, [pc, #60]	; (98a0 <bt_smp_distribute_keys+0xec>)
    9864:	f7ff fd12 	bl	928c <smp_send>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    9868:	210a      	movs	r1, #10
    986a:	4638      	mov	r0, r7
    986c:	f7ff fa5d 	bl	8d2a <atomic_test_bit>
    9870:	b190      	cbz	r0, 9898 <bt_smp_distribute_keys+0xe4>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    9872:	2101      	movs	r1, #1
    9874:	4620      	mov	r0, r4
    9876:	f001 f8ad 	bl	a9d4 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, key,
    987a:	2210      	movs	r2, #16
    987c:	eb0d 0102 	add.w	r1, sp, r2
    9880:	f104 0052 	add.w	r0, r4, #82	; 0x52
    9884:	f7f7 f831 	bl	8ea <memcpy>
			keys->slave_ltk.rand = rand;
    9888:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    988c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
			keys->slave_ltk.ediv = ediv;
    9890:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9894:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
}
    9898:	b009      	add	sp, #36	; 0x24
    989a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    989e:	bf00      	nop
    98a0:	00009c3d 	.word	0x00009c3d

000098a4 <atomic_test_and_clear_bit>:
{
    98a4:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    98a6:	f001 021f 	and.w	r2, r1, #31
    98aa:	2301      	movs	r3, #1
    98ac:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    98ae:	0949      	lsrs	r1, r1, #5
    98b0:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    98b2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    98b6:	f3bf 8f5b 	dmb	ish
    98ba:	e850 2f00 	ldrex	r2, [r0]
    98be:	ea02 0104 	and.w	r1, r2, r4
    98c2:	e840 1e00 	strex	lr, r1, [r0]
    98c6:	f1be 0f00 	cmp.w	lr, #0
    98ca:	d1f6      	bne.n	98ba <atomic_test_and_clear_bit+0x16>
    98cc:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
    98d0:	421a      	tst	r2, r3
}
    98d2:	bf14      	ite	ne
    98d4:	2001      	movne	r0, #1
    98d6:	2000      	moveq	r0, #0
    98d8:	bd10      	pop	{r4, pc}

000098da <smp_reset>:
{
    98da:	b538      	push	{r3, r4, r5, lr}
    98dc:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    98de:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
    98e0:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    98e4:	f016 fafc 	bl	1fee0 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
    98e8:	2300      	movs	r3, #0
    98ea:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
	atomic_set(&smp->allowed_cmds, 0);
    98ee:	f104 009c 	add.w	r0, r4, #156	; 0x9c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    98f2:	f3bf 8f5b 	dmb	ish
    98f6:	e850 2f00 	ldrex	r2, [r0]
    98fa:	e840 3100 	strex	r1, r3, [r0]
    98fe:	2900      	cmp	r1, #0
    9900:	d1f9      	bne.n	98f6 <smp_reset+0x1c>
    9902:	f3bf 8f5b 	dmb	ish
    9906:	f3bf 8f5b 	dmb	ish
    990a:	34a0      	adds	r4, #160	; 0xa0
    990c:	e854 2f00 	ldrex	r2, [r4]
    9910:	e844 3100 	strex	r1, r3, [r4]
    9914:	2900      	cmp	r1, #0
    9916:	d1f9      	bne.n	990c <smp_reset+0x32>
    9918:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
    991c:	7a2b      	ldrb	r3, [r5, #8]
    991e:	7a6a      	ldrb	r2, [r5, #9]
    9920:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
    9922:	bf18      	it	ne
    9924:	726b      	strbne	r3, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9926:	78eb      	ldrb	r3, [r5, #3]
    9928:	b923      	cbnz	r3, 9934 <smp_reset+0x5a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    992a:	210b      	movs	r1, #11
}
    992c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    9930:	f7ff ba08 	b.w	8d44 <atomic_set_bit>
    9934:	2101      	movs	r1, #1
    9936:	e7f9      	b.n	992c <smp_reset+0x52>

00009938 <smp_error>:
{
    9938:	b570      	push	{r4, r5, r6, lr}
    993a:	4605      	mov	r5, r0
    993c:	460e      	mov	r6, r1
	smp_reset(smp);
    993e:	f7ff ffcc 	bl	98da <smp_reset>
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PAIRING_FAIL,
    9942:	2005      	movs	r0, #5
    9944:	f7ff fb5c 	bl	9000 <smp_create_pdu.isra.4>
	if (!buf) {
    9948:	4604      	mov	r4, r0
    994a:	b160      	cbz	r0, 9966 <smp_error+0x2e>
	rsp = net_buf_add(buf, sizeof(*rsp));
    994c:	2101      	movs	r1, #1
    994e:	3008      	adds	r0, #8
    9950:	f00e f93c 	bl	17bcc <net_buf_simple_add>
	rsp->reason = reason;
    9954:	7006      	strb	r6, [r0, #0]
    9956:	6828      	ldr	r0, [r5, #0]
    9958:	2300      	movs	r3, #0
    995a:	4622      	mov	r2, r4
    995c:	2106      	movs	r1, #6
    995e:	f7fc ff96 	bl	688e <bt_l2cap_send_cb>
	return 0;
    9962:	2000      	movs	r0, #0
    9964:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    9966:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    996a:	bd70      	pop	{r4, r5, r6, pc}

0000996c <bt_smp_dhkey_ready>:
{
    996c:	b538      	push	{r3, r4, r5, lr}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    996e:	4c1d      	ldr	r4, [pc, #116]	; (99e4 <bt_smp_dhkey_ready+0x78>)
{
    9970:	4605      	mov	r5, r0
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    9972:	2107      	movs	r1, #7
    9974:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    9978:	f7ff ff94 	bl	98a4 <atomic_test_and_clear_bit>
    997c:	b370      	cbz	r0, 99dc <bt_smp_dhkey_ready+0x70>
	if (!dhkey) {
    997e:	b92d      	cbnz	r5, 998c <bt_smp_dhkey_ready+0x20>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    9980:	210b      	movs	r1, #11
			smp_error(smp, err);
    9982:	4620      	mov	r0, r4
}
    9984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			smp_error(smp, err);
    9988:	f7ff bfd6 	b.w	9938 <smp_error>
	memcpy(smp->dhkey, dhkey, 32);
    998c:	4629      	mov	r1, r5
    998e:	2220      	movs	r2, #32
    9990:	f204 1033 	addw	r0, r4, #307	; 0x133
    9994:	f7f6 ffa9 	bl	8ea <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    9998:	2109      	movs	r1, #9
    999a:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    999e:	f7ff f9c4 	bl	8d2a <atomic_test_bit>
    99a2:	b128      	cbz	r0, 99b0 <bt_smp_dhkey_ready+0x44>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    99a4:	2108      	movs	r1, #8
    99a6:	4810      	ldr	r0, [pc, #64]	; (99e8 <bt_smp_dhkey_ready+0x7c>)
}
    99a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    99ac:	f7ff b9ca 	b.w	8d44 <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    99b0:	210d      	movs	r1, #13
    99b2:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    99b6:	f7ff f9b8 	bl	8d2a <atomic_test_bit>
    99ba:	2800      	cmp	r0, #0
    99bc:	d1f2      	bne.n	99a4 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    99be:	2108      	movs	r1, #8
    99c0:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    99c4:	f7ff f9b1 	bl	8d2a <atomic_test_bit>
    99c8:	b140      	cbz	r0, 99dc <bt_smp_dhkey_ready+0x70>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    99ca:	6823      	ldr	r3, [r4, #0]
    99cc:	78db      	ldrb	r3, [r3, #3]
			err = compute_and_send_master_dhcheck(smp);
    99ce:	4620      	mov	r0, r4
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    99d0:	b92b      	cbnz	r3, 99de <bt_smp_dhkey_ready+0x72>
			err = compute_and_send_master_dhcheck(smp);
    99d2:	f7ff fc88 	bl	92e6 <compute_and_send_master_dhcheck>
		if (err) {
    99d6:	4601      	mov	r1, r0
    99d8:	2800      	cmp	r0, #0
    99da:	d1d2      	bne.n	9982 <bt_smp_dhkey_ready+0x16>
    99dc:	bd38      	pop	{r3, r4, r5, pc}
		err = compute_and_check_and_send_slave_dhcheck(smp);
    99de:	f7ff fcd2 	bl	9386 <compute_and_check_and_send_slave_dhcheck>
    99e2:	e7f8      	b.n	99d6 <bt_smp_dhkey_ready+0x6a>
    99e4:	2000071c 	.word	0x2000071c
    99e8:	200007bc 	.word	0x200007bc

000099ec <bt_smp_recv>:
{
    99ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    99ee:	898b      	ldrh	r3, [r1, #12]
{
    99f0:	4604      	mov	r4, r0
    99f2:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    99f4:	b393      	cbz	r3, 9a5c <bt_smp_recv+0x70>
	struct bt_smp_hdr *hdr = (void *)buf->data;
    99f6:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    99f8:	2101      	movs	r1, #1
	struct bt_smp_hdr *hdr = (void *)buf->data;
    99fa:	f850 7f08 	ldr.w	r7, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    99fe:	f00e f935 	bl	17c6c <net_buf_simple_pull>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    9a02:	2104      	movs	r1, #4
    9a04:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    9a08:	f7ff f98f 	bl	8d2a <atomic_test_bit>
    9a0c:	bb30      	cbnz	r0, 9a5c <bt_smp_recv+0x70>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    9a0e:	7839      	ldrb	r1, [r7, #0]
    9a10:	290d      	cmp	r1, #13
    9a12:	d803      	bhi.n	9a1c <bt_smp_recv+0x30>
    9a14:	4e12      	ldr	r6, [pc, #72]	; (9a60 <bt_smp_recv+0x74>)
    9a16:	f856 3031 	ldr.w	r3, [r6, r1, lsl #3]
    9a1a:	b92b      	cbnz	r3, 9a28 <bt_smp_recv+0x3c>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    9a1c:	2107      	movs	r1, #7
		smp_error(smp, err);
    9a1e:	4620      	mov	r0, r4
}
    9a20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, err);
    9a24:	f7ff bf88 	b.w	9938 <smp_error>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    9a28:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    9a2c:	f7ff ff3a 	bl	98a4 <atomic_test_and_clear_bit>
    9a30:	783b      	ldrb	r3, [r7, #0]
    9a32:	b918      	cbnz	r0, 9a3c <bt_smp_recv+0x50>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    9a34:	2b05      	cmp	r3, #5
    9a36:	d011      	beq.n	9a5c <bt_smp_recv+0x70>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    9a38:	2108      	movs	r1, #8
    9a3a:	e7f0      	b.n	9a1e <bt_smp_recv+0x32>
	if (buf->len != handlers[hdr->code].expect_len) {
    9a3c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
    9a40:	89a9      	ldrh	r1, [r5, #12]
    9a42:	7912      	ldrb	r2, [r2, #4]
    9a44:	4291      	cmp	r1, r2
    9a46:	d001      	beq.n	9a4c <bt_smp_recv+0x60>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    9a48:	210a      	movs	r1, #10
    9a4a:	e7e8      	b.n	9a1e <bt_smp_recv+0x32>
	err = handlers[hdr->code].func(smp, buf);
    9a4c:	4629      	mov	r1, r5
    9a4e:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
    9a52:	4620      	mov	r0, r4
    9a54:	4798      	blx	r3
	if (err) {
    9a56:	4601      	mov	r1, r0
    9a58:	2800      	cmp	r0, #0
    9a5a:	d1e0      	bne.n	9a1e <bt_smp_recv+0x32>
    9a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a5e:	bf00      	nop
    9a60:	000211a8 	.word	0x000211a8

00009a64 <smp_pairing_failed>:
{
    9a64:	b510      	push	{r4, lr}
	switch (smp->method) {
    9a66:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
    9a6a:	3b01      	subs	r3, #1
    9a6c:	2b02      	cmp	r3, #2
{
    9a6e:	4604      	mov	r4, r0
	switch (smp->method) {
    9a70:	d804      	bhi.n	9a7c <smp_pairing_failed+0x18>
		bt_auth->cancel(conn);
    9a72:	4b0a      	ldr	r3, [pc, #40]	; (9a9c <smp_pairing_failed+0x38>)
    9a74:	6800      	ldr	r0, [r0, #0]
    9a76:	681b      	ldr	r3, [r3, #0]
    9a78:	68db      	ldr	r3, [r3, #12]
    9a7a:	4798      	blx	r3
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    9a7c:	2102      	movs	r1, #2
    9a7e:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    9a82:	f7ff f952 	bl	8d2a <atomic_test_bit>
    9a86:	b120      	cbz	r0, 9a92 <smp_pairing_failed+0x2e>
	    smp->chan.chan.conn->le.keys) {
    9a88:	6823      	ldr	r3, [r4, #0]
    9a8a:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    9a8c:	b108      	cbz	r0, 9a92 <smp_pairing_failed+0x2e>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    9a8e:	f000 ff0b 	bl	a8a8 <bt_keys_clear>
	smp_reset(smp);
    9a92:	4620      	mov	r0, r4
    9a94:	f7ff ff21 	bl	98da <smp_reset>
}
    9a98:	2000      	movs	r0, #0
    9a9a:	bd10      	pop	{r4, pc}
    9a9c:	200041a0 	.word	0x200041a0

00009aa0 <smp_timeout>:
{
    9aa0:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    9aa2:	f1a0 04dc 	sub.w	r4, r0, #220	; 0xdc
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    9aa6:	f5a0 75be 	sub.w	r5, r0, #380	; 0x17c
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    9aaa:	2102      	movs	r1, #2
    9aac:	4620      	mov	r0, r4
    9aae:	f7ff f93c 	bl	8d2a <atomic_test_bit>
    9ab2:	b120      	cbz	r0, 9abe <smp_timeout+0x1e>
	    smp->chan.chan.conn->le.keys) {
    9ab4:	682b      	ldr	r3, [r5, #0]
    9ab6:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    9ab8:	b108      	cbz	r0, 9abe <smp_timeout+0x1e>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    9aba:	f000 fef5 	bl	a8a8 <bt_keys_clear>
	smp_reset(smp);
    9abe:	4628      	mov	r0, r5
    9ac0:	f7ff ff0b 	bl	98da <smp_reset>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    9ac4:	4620      	mov	r0, r4
    9ac6:	2104      	movs	r1, #4
}
    9ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    9acc:	f7ff b93a 	b.w	8d44 <atomic_set_bit>

00009ad0 <bt_smp_encrypt_change>:
{
    9ad0:	b570      	push	{r4, r5, r6, lr}
    9ad2:	4604      	mov	r4, r0
	if (hci_status) {
    9ad4:	2900      	cmp	r1, #0
    9ad6:	d15d      	bne.n	9b94 <bt_smp_encrypt_change+0xc4>
	struct bt_conn *conn = chan->conn;
    9ad8:	6806      	ldr	r6, [r0, #0]
	if (!smp || !conn->encrypt) {
    9ada:	7ab3      	ldrb	r3, [r6, #10]
    9adc:	2b00      	cmp	r3, #0
    9ade:	d059      	beq.n	9b94 <bt_smp_encrypt_change+0xc4>
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    9ae0:	f100 05a0 	add.w	r5, r0, #160	; 0xa0
    9ae4:	2101      	movs	r1, #1
    9ae6:	4628      	mov	r0, r5
    9ae8:	f7ff fedc 	bl	98a4 <atomic_test_and_clear_bit>
    9aec:	2800      	cmp	r0, #0
    9aee:	d051      	beq.n	9b94 <bt_smp_encrypt_change+0xc4>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    9af0:	2103      	movs	r1, #3
    9af2:	4628      	mov	r0, r5
    9af4:	f7ff f919 	bl	8d2a <atomic_test_bit>
    9af8:	b930      	cbnz	r0, 9b08 <bt_smp_encrypt_change+0x38>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    9afa:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    9afe:	210b      	movs	r1, #11
}
    9b00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    9b04:	f7ff b91e 	b.w	8d44 <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    9b08:	2105      	movs	r1, #5
    9b0a:	4628      	mov	r0, r5
    9b0c:	f7ff f90d 	bl	8d2a <atomic_test_bit>
    9b10:	b1b8      	cbz	r0, 9b42 <bt_smp_encrypt_change+0x72>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    9b12:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    9b16:	071b      	lsls	r3, r3, #28
    9b18:	d507      	bpl.n	9b2a <bt_smp_encrypt_change+0x5a>
    9b1a:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    9b1e:	0718      	lsls	r0, r3, #28
    9b20:	d503      	bpl.n	9b2a <bt_smp_encrypt_change+0x5a>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    9b22:	210e      	movs	r1, #14
    9b24:	4628      	mov	r0, r5
    9b26:	f7ff f90d 	bl	8d44 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    9b2a:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    9b2e:	f023 0308 	bic.w	r3, r3, #8
    9b32:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    9b36:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    9b3a:	f023 0308 	bic.w	r3, r3, #8
    9b3e:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    9b42:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    9b46:	07d9      	lsls	r1, r3, #31
    9b48:	d51c      	bpl.n	9b84 <bt_smp_encrypt_change+0xb4>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    9b4a:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    9b4c:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    9b50:	f7ff f8f8 	bl	8d44 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    9b54:	2102      	movs	r1, #2
    9b56:	4628      	mov	r0, r5
    9b58:	f7ff f8f4 	bl	8d44 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9b5c:	78f3      	ldrb	r3, [r6, #3]
    9b5e:	b913      	cbnz	r3, 9b66 <bt_smp_encrypt_change+0x96>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    9b60:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    9b64:	b9b3      	cbnz	r3, 9b94 <bt_smp_encrypt_change+0xc4>
	bt_smp_distribute_keys(smp);
    9b66:	4620      	mov	r0, r4
    9b68:	f7ff fe24 	bl	97b4 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    9b6c:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    9b70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9b74:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    9b78:	b963      	cbnz	r3, 9b94 <bt_smp_encrypt_change+0xc4>
	smp_reset(smp);
    9b7a:	4620      	mov	r0, r4
}
    9b7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	smp_reset(smp);
    9b80:	f7ff beab 	b.w	98da <smp_reset>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    9b84:	079a      	lsls	r2, r3, #30
    9b86:	d501      	bpl.n	9b8c <bt_smp_encrypt_change+0xbc>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    9b88:	2108      	movs	r1, #8
    9b8a:	e7df      	b.n	9b4c <bt_smp_encrypt_change+0x7c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    9b8c:	075b      	lsls	r3, r3, #29
    9b8e:	d5e1      	bpl.n	9b54 <bt_smp_encrypt_change+0x84>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    9b90:	210a      	movs	r1, #10
    9b92:	e7db      	b.n	9b4c <bt_smp_encrypt_change+0x7c>
    9b94:	bd70      	pop	{r4, r5, r6, pc}

00009b96 <smp_master_ident>:
{
    9b96:	b570      	push	{r4, r5, r6, lr}
    9b98:	460a      	mov	r2, r1
    9b9a:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    9b9c:	210a      	movs	r1, #10
	struct bt_conn *conn = smp->chan.chan.conn;
    9b9e:	f850 6ba0 	ldr.w	r6, [r0], #160
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    9ba2:	f7ff f8c2 	bl	8d2a <atomic_test_bit>
    9ba6:	b1b8      	cbz	r0, 9bd8 <smp_master_ident+0x42>
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    9ba8:	f106 0148 	add.w	r1, r6, #72	; 0x48
    9bac:	2004      	movs	r0, #4
		struct bt_smp_master_ident *req = (void *)buf->data;
    9bae:	6894      	ldr	r4, [r2, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    9bb0:	f000 fec0 	bl	a934 <bt_keys_get_type>
		if (!keys) {
    9bb4:	b388      	cbz	r0, 9c1a <smp_master_ident+0x84>
		keys->ltk.ediv = req->ediv;
    9bb6:	7862      	ldrb	r2, [r4, #1]
    9bb8:	7823      	ldrb	r3, [r4, #0]
    9bba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9bbe:	8303      	strh	r3, [r0, #24]
		keys->ltk.rand = req->rand;
    9bc0:	f8d4 2002 	ldr.w	r2, [r4, #2]
    9bc4:	f8d4 3006 	ldr.w	r3, [r4, #6]
    9bc8:	6143      	str	r3, [r0, #20]
    9bca:	6102      	str	r2, [r0, #16]
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    9bcc:	f895 317a 	ldrb.w	r3, [r5, #378]	; 0x17a
    9bd0:	f023 0301 	bic.w	r3, r3, #1
    9bd4:	f885 317a 	strb.w	r3, [r5, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    9bd8:	f895 317a 	ldrb.w	r3, [r5, #378]	; 0x17a
    9bdc:	079a      	lsls	r2, r3, #30
    9bde:	d518      	bpl.n	9c12 <smp_master_ident+0x7c>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    9be0:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    9be2:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    9be6:	f7ff f8ad 	bl	8d44 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9bea:	78f3      	ldrb	r3, [r6, #3]
    9bec:	b92b      	cbnz	r3, 9bfa <smp_master_ident+0x64>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    9bee:	f895 317a 	ldrb.w	r3, [r5, #378]	; 0x17a
    9bf2:	b913      	cbnz	r3, 9bfa <smp_master_ident+0x64>
		bt_smp_distribute_keys(smp);
    9bf4:	4628      	mov	r0, r5
    9bf6:	f7ff fddd 	bl	97b4 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    9bfa:	f8d5 4178 	ldr.w	r4, [r5, #376]	; 0x178
    9bfe:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    9c02:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    9c06:	b914      	cbnz	r4, 9c0e <smp_master_ident+0x78>
	smp_reset(smp);
    9c08:	4628      	mov	r0, r5
    9c0a:	f7ff fe66 	bl	98da <smp_reset>
	return 0;
    9c0e:	2000      	movs	r0, #0
}
    9c10:	bd70      	pop	{r4, r5, r6, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    9c12:	075b      	lsls	r3, r3, #29
    9c14:	d5e9      	bpl.n	9bea <smp_master_ident+0x54>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    9c16:	210a      	movs	r1, #10
    9c18:	e7e3      	b.n	9be2 <smp_master_ident+0x4c>
			return BT_SMP_ERR_UNSPECIFIED;
    9c1a:	2008      	movs	r0, #8
    9c1c:	bd70      	pop	{r4, r5, r6, pc}
	...

00009c20 <bt_smp_connected>:
{
    9c20:	b510      	push	{r4, lr}
	k_delayed_work_init(&smp->work, smp_timeout);
    9c22:	4905      	ldr	r1, [pc, #20]	; (9c38 <bt_smp_connected+0x18>)
{
    9c24:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    9c26:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    9c2a:	f016 f93b 	bl	1fea4 <k_delayed_work_init>
	smp_reset(smp);
    9c2e:	4620      	mov	r0, r4
}
    9c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    9c34:	f7ff be51 	b.w	98da <smp_reset>
    9c38:	00009aa1 	.word	0x00009aa1

00009c3c <ident_sent>:
{
    9c3c:	b508      	push	{r3, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
    9c3e:	7883      	ldrb	r3, [r0, #2]
    9c40:	b99b      	cbnz	r3, 9c6a <ident_sent+0x2e>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
    9c42:	2106      	movs	r1, #6
    9c44:	f7fc ff9d 	bl	6b82 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
    9c48:	f890 2179 	ldrb.w	r2, [r0, #377]	; 0x179
    9c4c:	f022 0201 	bic.w	r2, r2, #1
    9c50:	f880 2179 	strb.w	r2, [r0, #377]	; 0x179
		if (!smp->local_dist && !smp->remote_dist) {
    9c54:	f8d0 3178 	ldr.w	r3, [r0, #376]	; 0x178
    9c58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9c5c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    9c60:	b91b      	cbnz	r3, 9c6a <ident_sent+0x2e>
}
    9c62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	smp_reset(smp);
    9c66:	f7ff be38 	b.w	98da <smp_reset>
    9c6a:	bd08      	pop	{r3, pc}

00009c6c <smp_send_pairing_confirm>:
{
    9c6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    9c6e:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
{
    9c72:	4604      	mov	r4, r0
	switch (smp->method) {
    9c74:	2b03      	cmp	r3, #3
    9c76:	d824      	bhi.n	9cc2 <smp_send_pairing_confirm+0x56>
    9c78:	e8df f003 	tbb	[pc, r3]
    9c7c:	25020225 	.word	0x25020225
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    9c80:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    9c84:	f8d0 5174 	ldr.w	r5, [r0, #372]	; 0x174
    9c88:	40dd      	lsrs	r5, r3
    9c8a:	f005 0501 	and.w	r5, r5, #1
		r |= 0x80;
    9c8e:	f065 057f 	orn	r5, r5, #127	; 0x7f
    9c92:	b2ed      	uxtb	r5, r5
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    9c94:	2003      	movs	r0, #3
    9c96:	f7ff f9b3 	bl	9000 <smp_create_pdu.isra.4>
	if (!buf) {
    9c9a:	4606      	mov	r6, r0
    9c9c:	b188      	cbz	r0, 9cc2 <smp_send_pairing_confirm+0x56>
	req = net_buf_add(buf, sizeof(*req));
    9c9e:	2110      	movs	r1, #16
    9ca0:	3008      	adds	r0, #8
    9ca2:	f00d ff93 	bl	17bcc <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    9ca6:	462b      	mov	r3, r5
    9ca8:	9000      	str	r0, [sp, #0]
    9caa:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    9cae:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    9cb2:	4810      	ldr	r0, [pc, #64]	; (9cf4 <smp_send_pairing_confirm+0x88>)
    9cb4:	f7ff fa94 	bl	91e0 <smp_f4>
    9cb8:	4605      	mov	r5, r0
    9cba:	b130      	cbz	r0, 9cca <smp_send_pairing_confirm+0x5e>
		net_buf_unref(buf);
    9cbc:	4630      	mov	r0, r6
    9cbe:	f00d ff27 	bl	17b10 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    9cc2:	2008      	movs	r0, #8
    9cc4:	e014      	b.n	9cf0 <smp_send_pairing_confirm+0x84>
		r = 0;
    9cc6:	2500      	movs	r5, #0
    9cc8:	e7e4      	b.n	9c94 <smp_send_pairing_confirm+0x28>
	smp_send(smp, buf, NULL);
    9cca:	4602      	mov	r2, r0
    9ccc:	4631      	mov	r1, r6
    9cce:	4620      	mov	r0, r4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9cd0:	34a0      	adds	r4, #160	; 0xa0
    9cd2:	f7ff fadb 	bl	928c <smp_send>
    9cd6:	f3bf 8f5b 	dmb	ish
    9cda:	e854 3f00 	ldrex	r3, [r4]
    9cde:	f023 0301 	bic.w	r3, r3, #1
    9ce2:	e844 3200 	strex	r2, r3, [r4]
    9ce6:	2a00      	cmp	r2, #0
    9ce8:	d1f7      	bne.n	9cda <smp_send_pairing_confirm+0x6e>
    9cea:	f3bf 8f5b 	dmb	ish
	return 0;
    9cee:	4628      	mov	r0, r5
}
    9cf0:	b002      	add	sp, #8
    9cf2:	bd70      	pop	{r4, r5, r6, pc}
    9cf4:	200008c1 	.word	0x200008c1

00009cf8 <smp_public_key_slave.part.10>:
static u8_t smp_public_key_slave(struct bt_smp *smp)
    9cf8:	b538      	push	{r3, r4, r5, lr}
	switch (smp->method) {
    9cfa:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
static u8_t smp_public_key_slave(struct bt_smp *smp)
    9cfe:	4605      	mov	r5, r0
	switch (smp->method) {
    9d00:	2b03      	cmp	r3, #3
    9d02:	d831      	bhi.n	9d68 <smp_public_key_slave.part.10+0x70>
    9d04:	e8df f003 	tbb	[pc, r3]
    9d08:	020b2102 	.word	0x020b2102
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    9d0c:	309c      	adds	r0, #156	; 0x9c
    9d0e:	2104      	movs	r1, #4
    9d10:	f7ff f818 	bl	8d44 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    9d14:	4628      	mov	r0, r5
    9d16:	f7ff ffa9 	bl	9c6c <smp_send_pairing_confirm>
		if (err) {
    9d1a:	b140      	cbz	r0, 9d2e <smp_public_key_slave.part.10+0x36>
    9d1c:	bd38      	pop	{r3, r4, r5, pc}
		err = display_passkey(smp);
    9d1e:	f7ff f97d 	bl	901c <display_passkey>
		if (err) {
    9d22:	bb10      	cbnz	r0, 9d6a <smp_public_key_slave.part.10+0x72>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    9d24:	2103      	movs	r1, #3
    9d26:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    9d2a:	f7ff f80b 	bl	8d44 <atomic_set_bit>
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    9d2e:	490f      	ldr	r1, [pc, #60]	; (9d6c <smp_public_key_slave.part.10+0x74>)
    9d30:	f105 00f3 	add.w	r0, r5, #243	; 0xf3
    9d34:	f7fb fdaa 	bl	588c <bt_dh_key_gen>
    9d38:	4604      	mov	r4, r0
    9d3a:	b9a8      	cbnz	r0, 9d68 <smp_public_key_slave.part.10+0x70>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    9d3c:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    9d40:	2107      	movs	r1, #7
    9d42:	f7fe ffff 	bl	8d44 <atomic_set_bit>
	return 0;
    9d46:	4620      	mov	r0, r4
    9d48:	bd38      	pop	{r3, r4, r5, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    9d4a:	2103      	movs	r1, #3
    9d4c:	309c      	adds	r0, #156	; 0x9c
    9d4e:	f7fe fff9 	bl	8d44 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    9d52:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    9d56:	2109      	movs	r1, #9
    9d58:	f7fe fff4 	bl	8d44 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    9d5c:	4b04      	ldr	r3, [pc, #16]	; (9d70 <smp_public_key_slave.part.10+0x78>)
    9d5e:	6828      	ldr	r0, [r5, #0]
    9d60:	681b      	ldr	r3, [r3, #0]
    9d62:	685b      	ldr	r3, [r3, #4]
    9d64:	4798      	blx	r3
    9d66:	e7e2      	b.n	9d2e <smp_public_key_slave.part.10+0x36>
		return BT_SMP_ERR_UNSPECIFIED;
    9d68:	2008      	movs	r0, #8
}
    9d6a:	bd38      	pop	{r3, r4, r5, pc}
    9d6c:	0000996d 	.word	0x0000996d
    9d70:	200041a0 	.word	0x200041a0

00009d74 <bt_smp_pkey_ready>:
{
    9d74:	b510      	push	{r4, lr}
	if (!pkey) {
    9d76:	4601      	mov	r1, r0
    9d78:	4c17      	ldr	r4, [pc, #92]	; (9dd8 <bt_smp_pkey_ready+0x64>)
    9d7a:	b908      	cbnz	r0, 9d80 <bt_smp_pkey_ready+0xc>
		sc_local_pkey_valid = false;
    9d7c:	7020      	strb	r0, [r4, #0]
		return;
    9d7e:	bd10      	pop	{r4, pc}
	memcpy(sc_public_key, pkey, 64);
    9d80:	2240      	movs	r2, #64	; 0x40
    9d82:	4816      	ldr	r0, [pc, #88]	; (9ddc <bt_smp_pkey_ready+0x68>)
    9d84:	f7f6 fdb1 	bl	8ea <memcpy>
	sc_local_pkey_valid = true;
    9d88:	2301      	movs	r3, #1
    9d8a:	7023      	strb	r3, [r4, #0]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    9d8c:	4c14      	ldr	r4, [pc, #80]	; (9de0 <bt_smp_pkey_ready+0x6c>)
    9d8e:	2106      	movs	r1, #6
    9d90:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    9d94:	f7fe ffc9 	bl	8d2a <atomic_test_bit>
    9d98:	b1e8      	cbz	r0, 9dd6 <bt_smp_pkey_ready+0x62>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    9d9a:	6823      	ldr	r3, [r4, #0]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9d9c:	78db      	ldrb	r3, [r3, #3]
			err = sc_send_public_key(smp);
    9d9e:	4620      	mov	r0, r4
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9da0:	b963      	cbnz	r3, 9dbc <bt_smp_pkey_ready+0x48>
			err = sc_send_public_key(smp);
    9da2:	f7ff fbe3 	bl	956c <sc_send_public_key>
			if (err) {
    9da6:	4601      	mov	r1, r0
    9da8:	b110      	cbz	r0, 9db0 <bt_smp_pkey_ready+0x3c>
				smp_error(smp, err);
    9daa:	4620      	mov	r0, r4
    9dac:	f7ff fdc4 	bl	9938 <smp_error>
			atomic_set_bit(&smp->allowed_cmds,
    9db0:	210c      	movs	r1, #12
    9db2:	480c      	ldr	r0, [pc, #48]	; (9de4 <bt_smp_pkey_ready+0x70>)
}
    9db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(&smp->allowed_cmds,
    9db8:	f7fe bfc4 	b.w	8d44 <atomic_set_bit>
	err = sc_send_public_key(smp);
    9dbc:	f7ff fbd6 	bl	956c <sc_send_public_key>
	if (err) {
    9dc0:	b918      	cbnz	r0, 9dca <bt_smp_pkey_ready+0x56>
    9dc2:	4620      	mov	r0, r4
    9dc4:	f7ff ff98 	bl	9cf8 <smp_public_key_slave.part.10>
		if (err) {
    9dc8:	b128      	cbz	r0, 9dd6 <bt_smp_pkey_ready+0x62>
			smp_error(smp, err);
    9dca:	4601      	mov	r1, r0
}
    9dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    9dd0:	4803      	ldr	r0, [pc, #12]	; (9de0 <bt_smp_pkey_ready+0x6c>)
    9dd2:	f7ff bdb1 	b.w	9938 <smp_error>
    9dd6:	bd10      	pop	{r4, pc}
    9dd8:	200008c0 	.word	0x200008c0
    9ddc:	200008c1 	.word	0x200008c1
    9de0:	2000071c 	.word	0x2000071c
    9de4:	200007b8 	.word	0x200007b8

00009de8 <smp_c1>:
{
    9de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9dec:	b089      	sub	sp, #36	; 0x24
    9dee:	461f      	mov	r7, r3
    9df0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    9df4:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
	p1[0] = ia->type;
    9df8:	f898 3000 	ldrb.w	r3, [r8]
    9dfc:	f88d 3000 	strb.w	r3, [sp]
{
    9e00:	4606      	mov	r6, r0
	p1[1] = ra->type;
    9e02:	f899 3000 	ldrb.w	r3, [r9]
    9e06:	f88d 3001 	strb.w	r3, [sp, #1]
{
    9e0a:	460c      	mov	r4, r1
	memcpy(p1 + 2, preq, 7);
    9e0c:	f10d 0002 	add.w	r0, sp, #2
{
    9e10:	4611      	mov	r1, r2
	memcpy(p1 + 2, preq, 7);
    9e12:	2207      	movs	r2, #7
{
    9e14:	9d12      	ldr	r5, [sp, #72]	; 0x48
	memcpy(p1 + 2, preq, 7);
    9e16:	f7f6 fd68 	bl	8ea <memcpy>
	memcpy(p1 + 9, pres, 7);
    9e1a:	2207      	movs	r2, #7
    9e1c:	4639      	mov	r1, r7
    9e1e:	f10d 0009 	add.w	r0, sp, #9
    9e22:	f7f6 fd62 	bl	8ea <memcpy>
    9e26:	2300      	movs	r3, #0
		*r++ = *p++ ^ *q++;
    9e28:	f814 2b01 	ldrb.w	r2, [r4], #1
    9e2c:	f81d 1003 	ldrb.w	r1, [sp, r3]
    9e30:	404a      	eors	r2, r1
    9e32:	54ea      	strb	r2, [r5, r3]
    9e34:	3301      	adds	r3, #1
	while (len--) {
    9e36:	2b10      	cmp	r3, #16
    9e38:	d1f6      	bne.n	9e28 <smp_c1+0x40>
	err = bt_encrypt_le(k, enc_data, enc_data);
    9e3a:	462a      	mov	r2, r5
    9e3c:	4629      	mov	r1, r5
    9e3e:	4630      	mov	r0, r6
    9e40:	f001 fe32 	bl	baa8 <bt_encrypt_le>
	if (err) {
    9e44:	4604      	mov	r4, r0
    9e46:	bb08      	cbnz	r0, 9e8c <smp_c1+0xa4>
	memcpy(p2, ra->a.val, 6);
    9e48:	af04      	add	r7, sp, #16
    9e4a:	2206      	movs	r2, #6
    9e4c:	f109 0101 	add.w	r1, r9, #1
    9e50:	4638      	mov	r0, r7
    9e52:	f7f6 fd4a 	bl	8ea <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
    9e56:	2206      	movs	r2, #6
    9e58:	f108 0101 	add.w	r1, r8, #1
    9e5c:	f10d 0016 	add.w	r0, sp, #22
    9e60:	f7f6 fd43 	bl	8ea <memcpy>
	memset(p2 + 12, 0, 4);
    9e64:	2204      	movs	r2, #4
    9e66:	4621      	mov	r1, r4
    9e68:	a807      	add	r0, sp, #28
    9e6a:	f7f6 fd6a 	bl	942 <memset>
    9e6e:	1e6b      	subs	r3, r5, #1
		*r++ = *p++ ^ *q++;
    9e70:	785a      	ldrb	r2, [r3, #1]
    9e72:	5d39      	ldrb	r1, [r7, r4]
    9e74:	3401      	adds	r4, #1
    9e76:	404a      	eors	r2, r1
	while (len--) {
    9e78:	2c10      	cmp	r4, #16
		*r++ = *p++ ^ *q++;
    9e7a:	f803 2f01 	strb.w	r2, [r3, #1]!
	while (len--) {
    9e7e:	d1f7      	bne.n	9e70 <smp_c1+0x88>
	return bt_encrypt_le(k, enc_data, enc_data);
    9e80:	462a      	mov	r2, r5
    9e82:	4629      	mov	r1, r5
    9e84:	4630      	mov	r0, r6
    9e86:	f001 fe0f 	bl	baa8 <bt_encrypt_le>
    9e8a:	4604      	mov	r4, r0
}
    9e8c:	4620      	mov	r0, r4
    9e8e:	b009      	add	sp, #36	; 0x24
    9e90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00009e94 <legacy_send_pairing_confirm>:
{
    9e94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    9e96:	6805      	ldr	r5, [r0, #0]
{
    9e98:	4604      	mov	r4, r0
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    9e9a:	2003      	movs	r0, #3
    9e9c:	f7ff f8b0 	bl	9000 <smp_create_pdu.isra.4>
	if (!buf) {
    9ea0:	4606      	mov	r6, r0
    9ea2:	b1c0      	cbz	r0, 9ed6 <legacy_send_pairing_confirm+0x42>
	req = net_buf_add(buf, sizeof(*req));
    9ea4:	2110      	movs	r1, #16
    9ea6:	3008      	adds	r0, #8
    9ea8:	f00d fe90 	bl	17bcc <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
    9eac:	f105 0356 	add.w	r3, r5, #86	; 0x56
    9eb0:	354f      	adds	r5, #79	; 0x4f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
    9eb2:	9002      	str	r0, [sp, #8]
    9eb4:	9301      	str	r3, [sp, #4]
    9eb6:	9500      	str	r5, [sp, #0]
    9eb8:	f104 03ac 	add.w	r3, r4, #172	; 0xac
    9ebc:	f104 02a5 	add.w	r2, r4, #165	; 0xa5
    9ec0:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    9ec4:	f104 00e3 	add.w	r0, r4, #227	; 0xe3
    9ec8:	f7ff ff8e 	bl	9de8 <smp_c1>
    9ecc:	4605      	mov	r5, r0
    9ece:	b120      	cbz	r0, 9eda <legacy_send_pairing_confirm+0x46>
		net_buf_unref(buf);
    9ed0:	4630      	mov	r0, r6
    9ed2:	f00d fe1d 	bl	17b10 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    9ed6:	2008      	movs	r0, #8
    9ed8:	e012      	b.n	9f00 <legacy_send_pairing_confirm+0x6c>
	smp_send(smp, buf, NULL);
    9eda:	4602      	mov	r2, r0
    9edc:	4631      	mov	r1, r6
    9ede:	4620      	mov	r0, r4
    9ee0:	34a0      	adds	r4, #160	; 0xa0
    9ee2:	f7ff f9d3 	bl	928c <smp_send>
    9ee6:	f3bf 8f5b 	dmb	ish
    9eea:	e854 3f00 	ldrex	r3, [r4]
    9eee:	f023 0301 	bic.w	r3, r3, #1
    9ef2:	e844 3200 	strex	r2, r3, [r4]
    9ef6:	2a00      	cmp	r2, #0
    9ef8:	d1f7      	bne.n	9eea <legacy_send_pairing_confirm+0x56>
    9efa:	f3bf 8f5b 	dmb	ish
	return 0;
    9efe:	4628      	mov	r0, r5
}
    9f00:	b004      	add	sp, #16
    9f02:	bd70      	pop	{r4, r5, r6, pc}

00009f04 <legacy_pairing_confirm>:
{
    9f04:	b510      	push	{r4, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    9f06:	6803      	ldr	r3, [r0, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9f08:	78db      	ldrb	r3, [r3, #3]
{
    9f0a:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9f0c:	b94b      	cbnz	r3, 9f22 <legacy_pairing_confirm+0x1e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    9f0e:	2103      	movs	r1, #3
			atomic_set_bit(&smp->allowed_cmds,
    9f10:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    9f14:	f7fe ff16 	bl	8d44 <atomic_set_bit>
			return legacy_send_pairing_confirm(smp);
    9f18:	4620      	mov	r0, r4
}
    9f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return legacy_send_pairing_confirm(smp);
    9f1e:	f7ff bfb9 	b.w	9e94 <legacy_send_pairing_confirm>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    9f22:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
    9f26:	2109      	movs	r1, #9
    9f28:	4610      	mov	r0, r2
    9f2a:	f7fe fefe 	bl	8d2a <atomic_test_bit>
    9f2e:	b908      	cbnz	r0, 9f34 <legacy_pairing_confirm+0x30>
			atomic_set_bit(&smp->allowed_cmds,
    9f30:	2104      	movs	r1, #4
    9f32:	e7ed      	b.n	9f10 <legacy_pairing_confirm+0xc>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    9f34:	4610      	mov	r0, r2
    9f36:	2100      	movs	r1, #0
    9f38:	f7fe ff04 	bl	8d44 <atomic_set_bit>
}
    9f3c:	2000      	movs	r0, #0
    9f3e:	bd10      	pop	{r4, pc}

00009f40 <smp_pairing_confirm>:
{
    9f40:	b510      	push	{r4, lr}
    9f42:	4604      	mov	r4, r0
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    9f44:	2210      	movs	r2, #16
    9f46:	6889      	ldr	r1, [r1, #8]
    9f48:	30b3      	adds	r0, #179	; 0xb3
    9f4a:	f7f6 fcce 	bl	8ea <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    9f4e:	6823      	ldr	r3, [r4, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9f50:	78db      	ldrb	r3, [r3, #3]
    9f52:	b94b      	cbnz	r3, 9f68 <smp_pairing_confirm+0x28>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    9f54:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    9f58:	2104      	movs	r1, #4
    9f5a:	f7fe fef3 	bl	8d44 <atomic_set_bit>
		return smp_send_pairing_random(smp);
    9f5e:	4620      	mov	r0, r4
}
    9f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_send_pairing_random(smp);
    9f64:	f7ff bc0c 	b.w	9780 <smp_send_pairing_random>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    9f68:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    9f6c:	2105      	movs	r1, #5
    9f6e:	4610      	mov	r0, r2
    9f70:	f7fe fedb 	bl	8d2a <atomic_test_bit>
    9f74:	b920      	cbnz	r0, 9f80 <smp_pairing_confirm+0x40>
		return legacy_pairing_confirm(smp);
    9f76:	4620      	mov	r0, r4
}
    9f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return legacy_pairing_confirm(smp);
    9f7c:	f7ff bfc2 	b.w	9f04 <legacy_pairing_confirm>
	switch (smp->method) {
    9f80:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    9f84:	2b01      	cmp	r3, #1
    9f86:	d00b      	beq.n	9fa0 <smp_pairing_confirm+0x60>
    9f88:	2b02      	cmp	r3, #2
    9f8a:	d115      	bne.n	9fb8 <smp_pairing_confirm+0x78>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    9f8c:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    9f90:	2104      	movs	r1, #4
    9f92:	f7fe fed7 	bl	8d44 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
    9f96:	4620      	mov	r0, r4
}
    9f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_send_pairing_confirm(smp);
    9f9c:	f7ff be66 	b.w	9c6c <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    9fa0:	2109      	movs	r1, #9
    9fa2:	4610      	mov	r0, r2
    9fa4:	f7fe fec1 	bl	8d2a <atomic_test_bit>
    9fa8:	2800      	cmp	r0, #0
    9faa:	d0ef      	beq.n	9f8c <smp_pairing_confirm+0x4c>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    9fac:	4610      	mov	r0, r2
    9fae:	2100      	movs	r1, #0
    9fb0:	f7fe fec8 	bl	8d44 <atomic_set_bit>
			return 0;
    9fb4:	2000      	movs	r0, #0
    9fb6:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    9fb8:	2008      	movs	r0, #8
}
    9fba:	bd10      	pop	{r4, pc}

00009fbc <smp_public_key>:
{
    9fbc:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    9fbe:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    9fc0:	f100 04f3 	add.w	r4, r0, #243	; 0xf3
{
    9fc4:	4605      	mov	r5, r0
	memcpy(smp->pkey, req->x, 32);
    9fc6:	2220      	movs	r2, #32
    9fc8:	4631      	mov	r1, r6
    9fca:	4620      	mov	r0, r4
    9fcc:	f7f6 fc8d 	bl	8ea <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    9fd0:	2220      	movs	r2, #32
    9fd2:	18b1      	adds	r1, r6, r2
    9fd4:	f205 1013 	addw	r0, r5, #275	; 0x113
    9fd8:	f7f6 fc87 	bl	8ea <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    9fdc:	2240      	movs	r2, #64	; 0x40
    9fde:	4929      	ldr	r1, [pc, #164]	; (a084 <smp_public_key+0xc8>)
    9fe0:	4620      	mov	r0, r4
    9fe2:	f7f6 fc55 	bl	890 <memcmp>
    9fe6:	b920      	cbnz	r0, 9ff2 <smp_public_key+0x36>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    9fe8:	210b      	movs	r1, #11
    9fea:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    9fee:	f7fe fea9 	bl	8d44 <atomic_set_bit>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    9ff2:	682b      	ldr	r3, [r5, #0]
    9ff4:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9ff6:	2b00      	cmp	r3, #0
    9ff8:	d133      	bne.n	a062 <smp_public_key+0xa6>
		switch (smp->method) {
    9ffa:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    9ffe:	2b03      	cmp	r3, #3
    a000:	d83e      	bhi.n	a080 <smp_public_key+0xc4>
    a002:	e8df f003 	tbb	[pc, r3]
    a006:	2302      	.short	0x2302
    a008:	0214      	.short	0x0214
			atomic_set_bit(&smp->allowed_cmds,
    a00a:	2103      	movs	r1, #3
    a00c:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    a010:	f7fe fe98 	bl	8d44 <atomic_set_bit>
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    a014:	4620      	mov	r0, r4
    a016:	491c      	ldr	r1, [pc, #112]	; (a088 <smp_public_key+0xcc>)
    a018:	f7fb fc38 	bl	588c <bt_dh_key_gen>
    a01c:	4604      	mov	r4, r0
    a01e:	bb78      	cbnz	r0, a080 <smp_public_key+0xc4>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    a020:	2107      	movs	r1, #7
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    a022:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    a026:	f7fe fe8d 	bl	8d44 <atomic_set_bit>
		return 0;
    a02a:	4620      	mov	r0, r4
    a02c:	bd70      	pop	{r4, r5, r6, pc}
			err = display_passkey(smp);
    a02e:	4628      	mov	r0, r5
    a030:	f7fe fff4 	bl	901c <display_passkey>
			if (err) {
    a034:	b948      	cbnz	r0, a04a <smp_public_key+0x8e>
			atomic_set_bit(&smp->allowed_cmds,
    a036:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    a03a:	2103      	movs	r1, #3
    a03c:	f7fe fe82 	bl	8d44 <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
    a040:	4628      	mov	r0, r5
    a042:	f7ff fe13 	bl	9c6c <smp_send_pairing_confirm>
			if (err) {
    a046:	2800      	cmp	r0, #0
    a048:	d0e4      	beq.n	a014 <smp_public_key+0x58>
}
    a04a:	bd70      	pop	{r4, r5, r6, pc}
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    a04c:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    a050:	2109      	movs	r1, #9
    a052:	f7fe fe77 	bl	8d44 <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
    a056:	4b0d      	ldr	r3, [pc, #52]	; (a08c <smp_public_key+0xd0>)
    a058:	6828      	ldr	r0, [r5, #0]
    a05a:	681b      	ldr	r3, [r3, #0]
    a05c:	685b      	ldr	r3, [r3, #4]
    a05e:	4798      	blx	r3
    a060:	e7d8      	b.n	a014 <smp_public_key+0x58>
	if (!sc_local_pkey_valid) {
    a062:	4b0b      	ldr	r3, [pc, #44]	; (a090 <smp_public_key+0xd4>)
    a064:	781c      	ldrb	r4, [r3, #0]
    a066:	b90c      	cbnz	r4, a06c <smp_public_key+0xb0>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    a068:	2106      	movs	r1, #6
    a06a:	e7da      	b.n	a022 <smp_public_key+0x66>
	err = sc_send_public_key(smp);
    a06c:	4628      	mov	r0, r5
    a06e:	f7ff fa7d 	bl	956c <sc_send_public_key>
	if (err) {
    a072:	2800      	cmp	r0, #0
    a074:	d1e9      	bne.n	a04a <smp_public_key+0x8e>
    a076:	4628      	mov	r0, r5
}
    a078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a07c:	f7ff be3c 	b.w	9cf8 <smp_public_key_slave.part.10>
		return BT_SMP_ERR_UNSPECIFIED;
    a080:	2008      	movs	r0, #8
    a082:	e7e2      	b.n	a04a <smp_public_key+0x8e>
    a084:	00021228 	.word	0x00021228
    a088:	0000996d 	.word	0x0000996d
    a08c:	200041a0 	.word	0x200041a0
    a090:	200008c0 	.word	0x200008c0

0000a094 <smp_ident_addr_info>:
{
    a094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    a098:	688f      	ldr	r7, [r1, #8]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    a09a:	783b      	ldrb	r3, [r7, #0]
{
    a09c:	4605      	mov	r5, r0
    a09e:	b123      	cbz	r3, a0aa <smp_ident_addr_info+0x16>
	if (!bt_addr_le_is_identity(&req->addr)) {
    a0a0:	79bb      	ldrb	r3, [r7, #6]
    a0a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a0a6:	2bc0      	cmp	r3, #192	; 0xc0
    a0a8:	d160      	bne.n	a16c <smp_ident_addr_info+0xd8>
	struct bt_conn *conn = smp->chan.chan.conn;
    a0aa:	4628      	mov	r0, r5
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    a0ac:	210a      	movs	r1, #10
	struct bt_conn *conn = smp->chan.chan.conn;
    a0ae:	f850 4ba0 	ldr.w	r4, [r0], #160
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    a0b2:	f7fe fe3a 	bl	8d2a <atomic_test_bit>
    a0b6:	b3a0      	cbz	r0, a122 <smp_ident_addr_info+0x8e>
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    a0b8:	f104 0848 	add.w	r8, r4, #72	; 0x48
    a0bc:	4641      	mov	r1, r8
    a0be:	2002      	movs	r0, #2
    a0c0:	f000 fc38 	bl	a934 <bt_keys_get_type>
		if (!keys) {
    a0c4:	4606      	mov	r6, r0
    a0c6:	2800      	cmp	r0, #0
    a0c8:	d053      	beq.n	a172 <smp_ident_addr_info+0xde>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    a0ca:	78e3      	ldrb	r3, [r4, #3]
    a0cc:	2b00      	cmp	r3, #0
    a0ce:	d14a      	bne.n	a166 <smp_ident_addr_info+0xd2>
			dst = &conn->le.resp_addr;
    a0d0:	f104 0156 	add.w	r1, r4, #86	; 0x56
	if (addr->type != BT_ADDR_LE_RANDOM) {
    a0d4:	780b      	ldrb	r3, [r1, #0]
    a0d6:	2b01      	cmp	r3, #1
    a0d8:	d120      	bne.n	a11c <smp_ident_addr_info+0x88>
		if (bt_addr_le_is_rpa(dst)) {
    a0da:	798b      	ldrb	r3, [r1, #6]
    a0dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a0e0:	2b40      	cmp	r3, #64	; 0x40
    a0e2:	d11b      	bne.n	a11c <smp_ident_addr_info+0x88>
	memcpy(dst, src, sizeof(*dst));
    a0e4:	2206      	movs	r2, #6
    a0e6:	3101      	adds	r1, #1
    a0e8:	f106 0040 	add.w	r0, r6, #64	; 0x40
    a0ec:	f7f6 fbfd 	bl	8ea <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    a0f0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    a0f4:	b193      	cbz	r3, a11c <smp_ident_addr_info+0x88>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    a0f6:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
    a0fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a0fe:	2bc0      	cmp	r3, #192	; 0xc0
    a100:	d00c      	beq.n	a11c <smp_ident_addr_info+0x88>
	memcpy(dst, src, sizeof(*dst));
    a102:	2207      	movs	r2, #7
    a104:	4639      	mov	r1, r7
    a106:	4630      	mov	r0, r6
    a108:	f7f6 fbef 	bl	8ea <memcpy>
    a10c:	2207      	movs	r2, #7
    a10e:	4639      	mov	r1, r7
    a110:	4640      	mov	r0, r8
    a112:	f7f6 fbea 	bl	8ea <memcpy>
				bt_conn_identity_resolved(conn);
    a116:	4620      	mov	r0, r4
    a118:	f7fb fc66 	bl	59e8 <bt_conn_identity_resolved>
		bt_id_add(keys);
    a11c:	4630      	mov	r0, r6
    a11e:	f7f9 fcd9 	bl	3ad4 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    a122:	f895 317a 	ldrb.w	r3, [r5, #378]	; 0x17a
    a126:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    a12a:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    a12c:	f885 217a 	strb.w	r2, [r5, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    a130:	d504      	bpl.n	a13c <smp_ident_addr_info+0xa8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    a132:	210a      	movs	r1, #10
    a134:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    a138:	f7fe fe04 	bl	8d44 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a13c:	78e3      	ldrb	r3, [r4, #3]
    a13e:	b92b      	cbnz	r3, a14c <smp_ident_addr_info+0xb8>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    a140:	f895 317a 	ldrb.w	r3, [r5, #378]	; 0x17a
    a144:	b913      	cbnz	r3, a14c <smp_ident_addr_info+0xb8>
		bt_smp_distribute_keys(smp);
    a146:	4628      	mov	r0, r5
    a148:	f7ff fb34 	bl	97b4 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    a14c:	f8d5 4178 	ldr.w	r4, [r5, #376]	; 0x178
    a150:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    a154:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    a158:	b914      	cbnz	r4, a160 <smp_ident_addr_info+0xcc>
	smp_reset(smp);
    a15a:	4628      	mov	r0, r5
    a15c:	f7ff fbbd 	bl	98da <smp_reset>
	return 0;
    a160:	2000      	movs	r0, #0
}
    a162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			dst = &conn->le.init_addr;
    a166:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    a16a:	e7b3      	b.n	a0d4 <smp_ident_addr_info+0x40>
		return BT_SMP_ERR_INVALID_PARAMS;
    a16c:	200a      	movs	r0, #10
    a16e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    a172:	2008      	movs	r0, #8
    a174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a178 <smp_pairing_rsp>:
{
    a178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    a17a:	688d      	ldr	r5, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    a17c:	78eb      	ldrb	r3, [r5, #3]
    a17e:	3b07      	subs	r3, #7
    a180:	2b09      	cmp	r3, #9
{
    a182:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    a184:	f200 80ad 	bhi.w	a2e2 <smp_pairing_rsp+0x16a>
	smp->local_dist &= rsp->init_key_dist;
    a188:	792a      	ldrb	r2, [r5, #4]
    a18a:	f890 3179 	ldrb.w	r3, [r0, #377]	; 0x179
    a18e:	4013      	ands	r3, r2
    a190:	f880 3179 	strb.w	r3, [r0, #377]	; 0x179
	smp->remote_dist &= rsp->resp_key_dist;
    a194:	796a      	ldrb	r2, [r5, #5]
    a196:	f890 317a 	ldrb.w	r3, [r0, #378]	; 0x17a
    a19a:	4013      	ands	r3, r2
    a19c:	f880 317a 	strb.w	r3, [r0, #378]	; 0x17a
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    a1a0:	2302      	movs	r3, #2
    a1a2:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    a1a6:	2206      	movs	r2, #6
    a1a8:	4629      	mov	r1, r5
    a1aa:	30ad      	adds	r0, #173	; 0xad
    a1ac:	f7f6 fb9d 	bl	8ea <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    a1b0:	78ab      	ldrb	r3, [r5, #2]
    a1b2:	f013 0f08 	tst.w	r3, #8
    a1b6:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
    a1ba:	d007      	beq.n	a1cc <smp_pairing_rsp+0x54>
    a1bc:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    a1c0:	071f      	lsls	r7, r3, #28
    a1c2:	d503      	bpl.n	a1cc <smp_pairing_rsp+0x54>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    a1c4:	2105      	movs	r1, #5
    a1c6:	4630      	mov	r0, r6
    a1c8:	f7fe fdbc 	bl	8d44 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    a1cc:	78ab      	ldrb	r3, [r5, #2]
    a1ce:	0698      	lsls	r0, r3, #26
    a1d0:	d507      	bpl.n	a1e2 <smp_pairing_rsp+0x6a>
    a1d2:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    a1d6:	0699      	lsls	r1, r3, #26
    a1d8:	d503      	bpl.n	a1e2 <smp_pairing_rsp+0x6a>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    a1da:	2111      	movs	r1, #17
    a1dc:	4630      	mov	r0, r6
    a1de:	f7fe fdb1 	bl	8d44 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    a1e2:	78ab      	ldrb	r3, [r5, #2]
    a1e4:	07da      	lsls	r2, r3, #31
    a1e6:	d507      	bpl.n	a1f8 <smp_pairing_rsp+0x80>
    a1e8:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    a1ec:	07db      	lsls	r3, r3, #31
    a1ee:	d503      	bpl.n	a1f8 <smp_pairing_rsp+0x80>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    a1f0:	210a      	movs	r1, #10
    a1f2:	4630      	mov	r0, r6
    a1f4:	f7fe fda6 	bl	8d44 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a1f8:	2105      	movs	r1, #5
    a1fa:	4630      	mov	r0, r6
    a1fc:	f7fe fd95 	bl	8d2a <atomic_test_bit>
    a200:	782f      	ldrb	r7, [r5, #0]
    a202:	bba8      	cbnz	r0, a270 <smp_pairing_rsp+0xf8>
	smp->method = legacy_get_pair_method(smp, remote_io);
    a204:	4639      	mov	r1, r7
    a206:	4620      	mov	r0, r4
    a208:	f7fe feba 	bl	8f80 <legacy_get_pair_method>
    a20c:	4605      	mov	r5, r0
    a20e:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    a212:	b998      	cbnz	r0, a23c <smp_pairing_rsp+0xc4>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    a214:	210c      	movs	r1, #12
    a216:	4630      	mov	r0, r6
    a218:	f7fe fd87 	bl	8d2a <atomic_test_bit>
	if (smp->method == JUST_WORKS &&
    a21c:	b170      	cbz	r0, a23c <smp_pairing_rsp+0xc4>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    a21e:	4f32      	ldr	r7, [pc, #200]	; (a2e8 <smp_pairing_rsp+0x170>)
    a220:	683b      	ldr	r3, [r7, #0]
    a222:	b15b      	cbz	r3, a23c <smp_pairing_rsp+0xc4>
	    bt_auth && bt_auth->pairing_confirm) {
    a224:	691b      	ldr	r3, [r3, #16]
    a226:	b14b      	cbz	r3, a23c <smp_pairing_rsp+0xc4>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    a228:	4630      	mov	r0, r6
    a22a:	2109      	movs	r1, #9
    a22c:	f7fe fd8a 	bl	8d44 <atomic_set_bit>
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    a230:	683b      	ldr	r3, [r7, #0]
    a232:	6820      	ldr	r0, [r4, #0]
    a234:	691b      	ldr	r3, [r3, #16]
    a236:	4798      	blx	r3
}
    a238:	4628      	mov	r0, r5
    a23a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ret = legacy_request_tk(smp);
    a23c:	4620      	mov	r0, r4
    a23e:	f7fe fe57 	bl	8ef0 <legacy_request_tk>
	if (ret) {
    a242:	4605      	mov	r5, r0
    a244:	2800      	cmp	r0, #0
    a246:	d1f7      	bne.n	a238 <smp_pairing_rsp+0xc0>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    a248:	2109      	movs	r1, #9
    a24a:	4630      	mov	r0, r6
    a24c:	f7fe fd6d 	bl	8d2a <atomic_test_bit>
    a250:	b948      	cbnz	r0, a266 <smp_pairing_rsp+0xee>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    a252:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    a256:	2103      	movs	r1, #3
    a258:	f7fe fd74 	bl	8d44 <atomic_set_bit>
		return legacy_send_pairing_confirm(smp);
    a25c:	4620      	mov	r0, r4
}
    a25e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return legacy_send_pairing_confirm(smp);
    a262:	f7ff be17 	b.w	9e94 <legacy_send_pairing_confirm>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    a266:	4629      	mov	r1, r5
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    a268:	4630      	mov	r0, r6
    a26a:	f7fe fd6b 	bl	8d44 <atomic_set_bit>
		return 0;
    a26e:	e7e3      	b.n	a238 <smp_pairing_rsp+0xc0>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    a270:	2f04      	cmp	r7, #4
    a272:	d82a      	bhi.n	a2ca <smp_pairing_rsp+0x152>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    a274:	f894 50a8 	ldrb.w	r5, [r4, #168]	; 0xa8
    a278:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    a27c:	431d      	orrs	r5, r3
    a27e:	f015 0504 	ands.w	r5, r5, #4
    a282:	d006      	beq.n	a292 <smp_pairing_rsp+0x11a>
	return gen_method_sc[remote_io][get_io_capa()];
    a284:	f7fe fd04 	bl	8c90 <get_io_capa>
    a288:	4918      	ldr	r1, [pc, #96]	; (a2ec <smp_pairing_rsp+0x174>)
    a28a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    a28e:	440f      	add	r7, r1
    a290:	5c3d      	ldrb	r5, [r7, r0]
	smp->method = get_pair_method(smp, rsp->io_capability);
    a292:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
	smp->local_dist &= SEND_KEYS_SC;
    a296:	2300      	movs	r3, #0
    a298:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist &= RECV_KEYS_SC;
    a29c:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    a2a0:	f003 0302 	and.w	r3, r3, #2
    a2a4:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->method == JUST_WORKS) {
    a2a8:	b955      	cbnz	r5, a2c0 <smp_pairing_rsp+0x148>
		if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    a2aa:	210c      	movs	r1, #12
    a2ac:	4630      	mov	r0, r6
    a2ae:	f7fe fd3c 	bl	8d2a <atomic_test_bit>
    a2b2:	b128      	cbz	r0, a2c0 <smp_pairing_rsp+0x148>
    a2b4:	4f0c      	ldr	r7, [pc, #48]	; (a2e8 <smp_pairing_rsp+0x170>)
    a2b6:	683b      	ldr	r3, [r7, #0]
    a2b8:	b113      	cbz	r3, a2c0 <smp_pairing_rsp+0x148>
		    bt_auth && bt_auth->pairing_confirm) {
    a2ba:	691b      	ldr	r3, [r3, #16]
    a2bc:	2b00      	cmp	r3, #0
    a2be:	d1b3      	bne.n	a228 <smp_pairing_rsp+0xb0>
	if (!sc_local_pkey_valid) {
    a2c0:	4b0b      	ldr	r3, [pc, #44]	; (a2f0 <smp_pairing_rsp+0x178>)
    a2c2:	781d      	ldrb	r5, [r3, #0]
    a2c4:	b91d      	cbnz	r5, a2ce <smp_pairing_rsp+0x156>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    a2c6:	2106      	movs	r1, #6
    a2c8:	e7ce      	b.n	a268 <smp_pairing_rsp+0xf0>
		return JUST_WORKS;
    a2ca:	2500      	movs	r5, #0
    a2cc:	e7e1      	b.n	a292 <smp_pairing_rsp+0x11a>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    a2ce:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    a2d2:	210c      	movs	r1, #12
    a2d4:	f7fe fd36 	bl	8d44 <atomic_set_bit>
	return sc_send_public_key(smp);
    a2d8:	4620      	mov	r0, r4
}
    a2da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return sc_send_public_key(smp);
    a2de:	f7ff b945 	b.w	956c <sc_send_public_key>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    a2e2:	2506      	movs	r5, #6
    a2e4:	e7a8      	b.n	a238 <smp_pairing_rsp+0xc0>
    a2e6:	bf00      	nop
    a2e8:	200041a0 	.word	0x200041a0
    a2ec:	0002118d 	.word	0x0002118d
    a2f0:	200008c0 	.word	0x200008c0

0000a2f4 <smp_pairing_random>:
{
    a2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a2f8:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    a2fa:	f100 08d3 	add.w	r8, r0, #211	; 0xd3
{
    a2fe:	b089      	sub	sp, #36	; 0x24
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    a300:	2210      	movs	r2, #16
    a302:	6889      	ldr	r1, [r1, #8]
    a304:	4640      	mov	r0, r8
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a306:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    a30a:	f7f6 faee 	bl	8ea <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a30e:	2105      	movs	r1, #5
    a310:	4630      	mov	r0, r6
    a312:	f7fe fd0a 	bl	8d2a <atomic_test_bit>
    a316:	f8d4 9000 	ldr.w	r9, [r4]
    a31a:	2800      	cmp	r0, #0
    a31c:	d16b      	bne.n	a3f6 <smp_pairing_random+0x102>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    a31e:	f109 0356 	add.w	r3, r9, #86	; 0x56
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    a322:	f104 0ae3 	add.w	sl, r4, #227	; 0xe3
    a326:	af04      	add	r7, sp, #16
    a328:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    a32a:	f109 034f 	add.w	r3, r9, #79	; 0x4f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    a32e:	9300      	str	r3, [sp, #0]
    a330:	9702      	str	r7, [sp, #8]
    a332:	f104 03ac 	add.w	r3, r4, #172	; 0xac
    a336:	f104 02a5 	add.w	r2, r4, #165	; 0xa5
    a33a:	4641      	mov	r1, r8
    a33c:	4650      	mov	r0, sl
    a33e:	f7ff fd53 	bl	9de8 <smp_c1>
	if (err) {
    a342:	b108      	cbz	r0, a348 <smp_pairing_random+0x54>
		return BT_SMP_ERR_UNSPECIFIED;
    a344:	2508      	movs	r5, #8
    a346:	e050      	b.n	a3ea <smp_pairing_random+0xf6>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    a348:	2210      	movs	r2, #16
    a34a:	4639      	mov	r1, r7
    a34c:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    a350:	f7f6 fa9e 	bl	890 <memcmp>
    a354:	2800      	cmp	r0, #0
    a356:	d14c      	bne.n	a3f2 <smp_pairing_random+0xfe>
	    conn->role == BT_HCI_ROLE_MASTER) {
    a358:	f899 5003 	ldrb.w	r5, [r9, #3]
    a35c:	f104 0bc3 	add.w	fp, r4, #195	; 0xc3
	memcpy(out, r2, 8);
    a360:	2208      	movs	r2, #8
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a362:	bb2d      	cbnz	r5, a3b0 <smp_pairing_random+0xbc>
	memcpy(out, r2, 8);
    a364:	4659      	mov	r1, fp
    a366:	4638      	mov	r0, r7
    a368:	f7f6 fabf 	bl	8ea <memcpy>
	memcpy(out + 8, r1, 8);
    a36c:	2208      	movs	r2, #8
    a36e:	4641      	mov	r1, r8
    a370:	a806      	add	r0, sp, #24
    a372:	f7f6 faba 	bl	8ea <memcpy>
	return bt_encrypt_le(k, out, out);
    a376:	463a      	mov	r2, r7
    a378:	4639      	mov	r1, r7
    a37a:	4650      	mov	r0, sl
    a37c:	f001 fb94 	bl	baa8 <bt_encrypt_le>
		if (err) {
    a380:	2800      	cmp	r0, #0
    a382:	d1df      	bne.n	a344 <smp_pairing_random+0x50>
	return min(req->max_key_size, rsp->max_key_size);
    a384:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
    a388:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
		if (bt_conn_le_start_encryption(conn, 0, 0, tmp,
    a38c:	429a      	cmp	r2, r3
    a38e:	bf94      	ite	ls
    a390:	9202      	strls	r2, [sp, #8]
    a392:	9302      	strhi	r3, [sp, #8]
    a394:	e88d 00a0 	stmia.w	sp, {r5, r7}
    a398:	2200      	movs	r2, #0
    a39a:	2300      	movs	r3, #0
    a39c:	4648      	mov	r0, r9
    a39e:	f7fb fb3d 	bl	5a1c <bt_conn_le_start_encryption>
    a3a2:	2800      	cmp	r0, #0
    a3a4:	d1ce      	bne.n	a344 <smp_pairing_random+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    a3a6:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    a3a8:	4630      	mov	r0, r6
    a3aa:	f7fe fccb 	bl	8d44 <atomic_set_bit>
			return 0;
    a3ae:	e01c      	b.n	a3ea <smp_pairing_random+0xf6>
	memcpy(out, r2, 8);
    a3b0:	4641      	mov	r1, r8
    a3b2:	4638      	mov	r0, r7
    a3b4:	f7f6 fa99 	bl	8ea <memcpy>
	memcpy(out + 8, r1, 8);
    a3b8:	2208      	movs	r2, #8
    a3ba:	4659      	mov	r1, fp
    a3bc:	a806      	add	r0, sp, #24
    a3be:	f7f6 fa94 	bl	8ea <memcpy>
	return bt_encrypt_le(k, out, out);
    a3c2:	463a      	mov	r2, r7
    a3c4:	4639      	mov	r1, r7
    a3c6:	4650      	mov	r0, sl
    a3c8:	f001 fb6e 	bl	baa8 <bt_encrypt_le>
		if (err) {
    a3cc:	4605      	mov	r5, r0
    a3ce:	2800      	cmp	r0, #0
    a3d0:	d1b8      	bne.n	a344 <smp_pairing_random+0x50>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    a3d2:	2210      	movs	r2, #16
    a3d4:	4639      	mov	r1, r7
    a3d6:	4650      	mov	r0, sl
    a3d8:	f7f6 fa87 	bl	8ea <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    a3dc:	4630      	mov	r0, r6
    a3de:	2101      	movs	r1, #1
    a3e0:	f7fe fcb0 	bl	8d44 <atomic_set_bit>
		smp_send_pairing_random(smp);
    a3e4:	4620      	mov	r0, r4
    a3e6:	f7ff f9cb 	bl	9780 <smp_send_pairing_random>
}
    a3ea:	4628      	mov	r0, r5
    a3ec:	b009      	add	sp, #36	; 0x24
    a3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_SMP_ERR_CONFIRM_FAILED;
    a3f2:	2504      	movs	r5, #4
		return legacy_pairing_random(smp);
    a3f4:	e7f9      	b.n	a3ea <smp_pairing_random+0xf6>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    a3f6:	f899 3003 	ldrb.w	r3, [r9, #3]
    a3fa:	2b00      	cmp	r3, #0
    a3fc:	d14d      	bne.n	a49a <smp_pairing_random+0x1a6>
		err = sc_smp_check_confirm(smp);
    a3fe:	4620      	mov	r0, r4
    a400:	f7fe ff12 	bl	9228 <sc_smp_check_confirm>
		if (err) {
    a404:	4605      	mov	r5, r0
    a406:	2800      	cmp	r0, #0
    a408:	d1ef      	bne.n	a3ea <smp_pairing_random+0xf6>
		switch (smp->method) {
    a40a:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    a40e:	2b03      	cmp	r3, #3
    a410:	d898      	bhi.n	a344 <smp_pairing_random+0x50>
    a412:	e8df f003 	tbb	[pc, r3]
    a416:	1d36      	.short	0x1d36
    a418:	021d      	.short	0x021d
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
    a41a:	ab04      	add	r3, sp, #16
    a41c:	9300      	str	r3, [sp, #0]
    a41e:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    a422:	4643      	mov	r3, r8
    a424:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    a428:	4846      	ldr	r0, [pc, #280]	; (a544 <smp_pairing_random+0x250>)
    a42a:	f7fe fcd5 	bl	8dd8 <smp_g2>
    a42e:	2800      	cmp	r0, #0
    a430:	d188      	bne.n	a344 <smp_pairing_random+0x50>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    a432:	4630      	mov	r0, r6
    a434:	2109      	movs	r1, #9
    a436:	f7fe fc85 	bl	8d44 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    a43a:	4630      	mov	r0, r6
    a43c:	2108      	movs	r1, #8
    a43e:	f7fe fc81 	bl	8d44 <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    a442:	4b41      	ldr	r3, [pc, #260]	; (a548 <smp_pairing_random+0x254>)
    a444:	9904      	ldr	r1, [sp, #16]
    a446:	681b      	ldr	r3, [r3, #0]
    a448:	6820      	ldr	r0, [r4, #0]
    a44a:	689b      	ldr	r3, [r3, #8]
    a44c:	4798      	blx	r3
			return 0;
    a44e:	e7cc      	b.n	a3ea <smp_pairing_random+0xf6>
			smp->passkey_round++;
    a450:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    a454:	3301      	adds	r3, #1
    a456:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20) {
    a458:	2b14      	cmp	r3, #20
			smp->passkey_round++;
    a45a:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
			if (smp->passkey_round == 20) {
    a45e:	d010      	beq.n	a482 <smp_pairing_random+0x18e>
			if (bt_rand(smp->prnd, 16)) {
    a460:	2110      	movs	r1, #16
    a462:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    a466:	f001 fb03 	bl	ba70 <bt_rand>
    a46a:	2800      	cmp	r0, #0
    a46c:	f47f af6a 	bne.w	a344 <smp_pairing_random+0x50>
			atomic_set_bit(&smp->allowed_cmds,
    a470:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    a474:	2103      	movs	r1, #3
    a476:	f7fe fc65 	bl	8d44 <atomic_set_bit>
			smp_send_pairing_confirm(smp);
    a47a:	4620      	mov	r0, r4
    a47c:	f7ff fbf6 	bl	9c6c <smp_send_pairing_confirm>
			return 0;
    a480:	e7b3      	b.n	a3ea <smp_pairing_random+0xf6>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    a482:	2107      	movs	r1, #7
    a484:	4630      	mov	r0, r6
    a486:	f7fe fc50 	bl	8d2a <atomic_test_bit>
    a48a:	b108      	cbz	r0, a490 <smp_pairing_random+0x19c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    a48c:	2108      	movs	r1, #8
    a48e:	e78b      	b.n	a3a8 <smp_pairing_random+0xb4>
		return compute_and_send_master_dhcheck(smp);
    a490:	4620      	mov	r0, r4
    a492:	f7fe ff28 	bl	92e6 <compute_and_send_master_dhcheck>
    a496:	4605      	mov	r5, r0
    a498:	e7a7      	b.n	a3ea <smp_pairing_random+0xf6>
	switch (smp->method) {
    a49a:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    a49e:	2b03      	cmp	r3, #3
    a4a0:	f63f af50 	bhi.w	a344 <smp_pairing_random+0x50>
    a4a4:	e8df f003 	tbb	[pc, r3]
    a4a8:	02272719 	.word	0x02272719
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    a4ac:	ab04      	add	r3, sp, #16
    a4ae:	9300      	str	r3, [sp, #0]
    a4b0:	4642      	mov	r2, r8
    a4b2:	f104 03c3 	add.w	r3, r4, #195	; 0xc3
    a4b6:	4923      	ldr	r1, [pc, #140]	; (a544 <smp_pairing_random+0x250>)
    a4b8:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
    a4bc:	f7fe fc8c 	bl	8dd8 <smp_g2>
    a4c0:	2800      	cmp	r0, #0
    a4c2:	f47f af3f 	bne.w	a344 <smp_pairing_random+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    a4c6:	2109      	movs	r1, #9
    a4c8:	4630      	mov	r0, r6
    a4ca:	f7fe fc3b 	bl	8d44 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    a4ce:	4b1e      	ldr	r3, [pc, #120]	; (a548 <smp_pairing_random+0x254>)
    a4d0:	9904      	ldr	r1, [sp, #16]
    a4d2:	681b      	ldr	r3, [r3, #0]
    a4d4:	6820      	ldr	r0, [r4, #0]
    a4d6:	689b      	ldr	r3, [r3, #8]
    a4d8:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    a4da:	210d      	movs	r1, #13
    a4dc:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    a4e0:	f7fe fc30 	bl	8d44 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    a4e4:	210d      	movs	r1, #13
    a4e6:	4630      	mov	r0, r6
    a4e8:	f7fe fc2c 	bl	8d44 <atomic_set_bit>
	smp_send_pairing_random(smp);
    a4ec:	4620      	mov	r0, r4
    a4ee:	f7ff f947 	bl	9780 <smp_send_pairing_random>
	return 0;
    a4f2:	2500      	movs	r5, #0
    a4f4:	e779      	b.n	a3ea <smp_pairing_random+0xf6>
		err = sc_smp_check_confirm(smp);
    a4f6:	4620      	mov	r0, r4
    a4f8:	f7fe fe96 	bl	9228 <sc_smp_check_confirm>
		if (err) {
    a4fc:	4605      	mov	r5, r0
    a4fe:	2800      	cmp	r0, #0
    a500:	f47f af73 	bne.w	a3ea <smp_pairing_random+0xf6>
		atomic_set_bit(&smp->allowed_cmds,
    a504:	f104 079c 	add.w	r7, r4, #156	; 0x9c
    a508:	2103      	movs	r1, #3
    a50a:	4638      	mov	r0, r7
    a50c:	f7fe fc1a 	bl	8d44 <atomic_set_bit>
		smp_send_pairing_random(smp);
    a510:	4620      	mov	r0, r4
    a512:	f7ff f935 	bl	9780 <smp_send_pairing_random>
		smp->passkey_round++;
    a516:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    a51a:	3301      	adds	r3, #1
    a51c:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20) {
    a51e:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    a520:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
		if (smp->passkey_round == 20) {
    a524:	d105      	bne.n	a532 <smp_pairing_random+0x23e>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    a526:	210d      	movs	r1, #13
    a528:	4638      	mov	r0, r7
    a52a:	f7fe fc0b 	bl	8d44 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    a52e:	210d      	movs	r1, #13
    a530:	e73a      	b.n	a3a8 <smp_pairing_random+0xb4>
		if (bt_rand(smp->prnd, 16)) {
    a532:	2110      	movs	r1, #16
    a534:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    a538:	f001 fa9a 	bl	ba70 <bt_rand>
    a53c:	2800      	cmp	r0, #0
    a53e:	f47f af01 	bne.w	a344 <smp_pairing_random+0x50>
    a542:	e752      	b.n	a3ea <smp_pairing_random+0xf6>
    a544:	200008c1 	.word	0x200008c1
    a548:	200041a0 	.word	0x200041a0

0000a54c <bt_smp_send_security_req>:
{
    a54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a550:	4607      	mov	r7, r0
	smp = smp_chan_get(conn);
    a552:	f7fe fbe7 	bl	8d24 <smp_chan_get>
	if (!smp) {
    a556:	4605      	mov	r5, r0
    a558:	b368      	cbz	r0, a5b6 <bt_smp_send_security_req+0x6a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    a55a:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
    a55e:	2104      	movs	r1, #4
    a560:	4610      	mov	r0, r2
    a562:	f7fe fbe2 	bl	8d2a <atomic_test_bit>
    a566:	bb48      	cbnz	r0, a5bc <bt_smp_send_security_req+0x70>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    a568:	2103      	movs	r1, #3
    a56a:	4610      	mov	r0, r2
    a56c:	f7fe fbdd 	bl	8d2a <atomic_test_bit>
    a570:	4604      	mov	r4, r0
    a572:	bb30      	cbnz	r0, a5c2 <bt_smp_send_security_req+0x76>
	if (!sec_level_reachable(conn)) {
    a574:	7a78      	ldrb	r0, [r7, #9]
    a576:	f7fe fd25 	bl	8fc4 <sec_level_reachable.isra.2>
    a57a:	b328      	cbz	r0, a5c8 <bt_smp_send_security_req+0x7c>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_SECURITY_REQUEST,
    a57c:	200b      	movs	r0, #11
    a57e:	f7fe fd3f 	bl	9000 <smp_create_pdu.isra.4>
	if (!req_buf) {
    a582:	4606      	mov	r6, r0
    a584:	b318      	cbz	r0, a5ce <bt_smp_send_security_req+0x82>
	req = net_buf_add(req_buf, sizeof(*req));
    a586:	2101      	movs	r1, #1
    a588:	3008      	adds	r0, #8
    a58a:	f00d fb1f 	bl	17bcc <net_buf_simple_add>
    a58e:	4680      	mov	r8, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    a590:	2009      	movs	r0, #9
    a592:	f7fe fba3 	bl	8cdc <get_auth>
    a596:	2106      	movs	r1, #6
    a598:	f888 0000 	strb.w	r0, [r8]
    a59c:	4623      	mov	r3, r4
    a59e:	4638      	mov	r0, r7
    a5a0:	4632      	mov	r2, r6
    a5a2:	f7fc f974 	bl	688e <bt_l2cap_send_cb>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    a5a6:	2105      	movs	r1, #5
    a5a8:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    a5ac:	f7fe fbca 	bl	8d44 <atomic_set_bit>
}
    a5b0:	4620      	mov	r0, r4
    a5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOTCONN;
    a5b6:	f06f 0438 	mvn.w	r4, #56	; 0x38
    a5ba:	e7f9      	b.n	a5b0 <bt_smp_send_security_req+0x64>
		return -EIO;
    a5bc:	f06f 0404 	mvn.w	r4, #4
    a5c0:	e7f6      	b.n	a5b0 <bt_smp_send_security_req+0x64>
		return -EBUSY;
    a5c2:	f06f 040f 	mvn.w	r4, #15
    a5c6:	e7f3      	b.n	a5b0 <bt_smp_send_security_req+0x64>
		return -EINVAL;
    a5c8:	f06f 0415 	mvn.w	r4, #21
    a5cc:	e7f0      	b.n	a5b0 <bt_smp_send_security_req+0x64>
		return -ENOBUFS;
    a5ce:	f06f 0436 	mvn.w	r4, #54	; 0x36
    a5d2:	e7ed      	b.n	a5b0 <bt_smp_send_security_req+0x64>

0000a5d4 <bt_smp_send_pairing_req>:
{
    a5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a5d8:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    a5da:	f7fe fba3 	bl	8d24 <smp_chan_get>
	if (!smp) {
    a5de:	4605      	mov	r5, r0
    a5e0:	2800      	cmp	r0, #0
    a5e2:	d052      	beq.n	a68a <bt_smp_send_pairing_req+0xb6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    a5e4:	f100 07a0 	add.w	r7, r0, #160	; 0xa0
    a5e8:	2104      	movs	r1, #4
    a5ea:	4638      	mov	r0, r7
    a5ec:	f7fe fb9d 	bl	8d2a <atomic_test_bit>
    a5f0:	2800      	cmp	r0, #0
    a5f2:	d14d      	bne.n	a690 <bt_smp_send_pairing_req+0xbc>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    a5f4:	2103      	movs	r1, #3
    a5f6:	4638      	mov	r0, r7
    a5f8:	f7fe fb97 	bl	8d2a <atomic_test_bit>
    a5fc:	2800      	cmp	r0, #0
    a5fe:	d14a      	bne.n	a696 <bt_smp_send_pairing_req+0xc2>
	if (!sec_level_reachable(conn)) {
    a600:	7a60      	ldrb	r0, [r4, #9]
    a602:	f7fe fcdf 	bl	8fc4 <sec_level_reachable.isra.2>
    a606:	2800      	cmp	r0, #0
    a608:	d048      	beq.n	a69c <bt_smp_send_pairing_req+0xc8>
	if (smp_init(smp)) {
    a60a:	4628      	mov	r0, r5
    a60c:	f7fe fbae 	bl	8d6c <smp_init>
    a610:	4604      	mov	r4, r0
    a612:	b120      	cbz	r0, a61e <bt_smp_send_pairing_req+0x4a>
		return -ENOBUFS;
    a614:	f06f 0436 	mvn.w	r4, #54	; 0x36
}
    a618:	4620      	mov	r0, r4
    a61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    a61e:	2001      	movs	r0, #1
    a620:	f7fe fcee 	bl	9000 <smp_create_pdu.isra.4>
	if (!req_buf) {
    a624:	4681      	mov	r9, r0
    a626:	2800      	cmp	r0, #0
    a628:	d0f4      	beq.n	a614 <bt_smp_send_pairing_req+0x40>
	req = net_buf_add(req_buf, sizeof(*req));
    a62a:	2106      	movs	r1, #6
    a62c:	3008      	adds	r0, #8
    a62e:	f00d facd 	bl	17bcc <net_buf_simple_add>
    a632:	4606      	mov	r6, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    a634:	2009      	movs	r0, #9
    a636:	f7fe fb51 	bl	8cdc <get_auth>
    a63a:	70b0      	strb	r0, [r6, #2]
	req->io_capability = get_io_capa();
    a63c:	f7fe fb28 	bl	8c90 <get_io_capa>
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    a640:	2310      	movs	r3, #16
    a642:	70f3      	strb	r3, [r6, #3]
	req->resp_key_dist = RECV_KEYS;
    a644:	f04f 0803 	mov.w	r8, #3
	req->init_key_dist = SEND_KEYS;
    a648:	2301      	movs	r3, #1
    a64a:	7133      	strb	r3, [r6, #4]
	req->io_capability = get_io_capa();
    a64c:	7030      	strb	r0, [r6, #0]
	req->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    a64e:	7074      	strb	r4, [r6, #1]
	req->resp_key_dist = RECV_KEYS;
    a650:	f886 8005 	strb.w	r8, [r6, #5]
	memcpy(smp->preq + 1, req, sizeof(*req));
    a654:	4631      	mov	r1, r6
	smp->local_dist = SEND_KEYS;
    a656:	f885 3179 	strb.w	r3, [r5, #377]	; 0x179
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    a65a:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
	smp->remote_dist = RECV_KEYS;
    a65e:	f885 817a 	strb.w	r8, [r5, #378]	; 0x17a
	memcpy(smp->preq + 1, req, sizeof(*req));
    a662:	2206      	movs	r2, #6
    a664:	f105 00a6 	add.w	r0, r5, #166	; 0xa6
    a668:	f7f6 f93f 	bl	8ea <memcpy>
	smp_send(smp, req_buf, NULL);
    a66c:	4622      	mov	r2, r4
    a66e:	4649      	mov	r1, r9
    a670:	4628      	mov	r0, r5
    a672:	f7fe fe0b 	bl	928c <smp_send>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    a676:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    a67a:	2102      	movs	r1, #2
    a67c:	f7fe fb62 	bl	8d44 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    a680:	4641      	mov	r1, r8
    a682:	4638      	mov	r0, r7
    a684:	f7fe fb5e 	bl	8d44 <atomic_set_bit>
	return 0;
    a688:	e7c6      	b.n	a618 <bt_smp_send_pairing_req+0x44>
		return -ENOTCONN;
    a68a:	f06f 0438 	mvn.w	r4, #56	; 0x38
    a68e:	e7c3      	b.n	a618 <bt_smp_send_pairing_req+0x44>
		return -EIO;
    a690:	f06f 0404 	mvn.w	r4, #4
    a694:	e7c0      	b.n	a618 <bt_smp_send_pairing_req+0x44>
		return -EBUSY;
    a696:	f06f 040f 	mvn.w	r4, #15
    a69a:	e7bd      	b.n	a618 <bt_smp_send_pairing_req+0x44>
		return -EINVAL;
    a69c:	f06f 0415 	mvn.w	r4, #21
    a6a0:	e7ba      	b.n	a618 <bt_smp_send_pairing_req+0x44>
	...

0000a6a4 <smp_security_request>:
{
    a6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (sc_supported) {
    a6a6:	4b29      	ldr	r3, [pc, #164]	; (a74c <smp_security_request+0xa8>)
	struct bt_smp_security_request *req = (void *)buf->data;
    a6a8:	688a      	ldr	r2, [r1, #8]
	if (sc_supported) {
    a6aa:	781b      	ldrb	r3, [r3, #0]
	struct bt_conn *conn = smp->chan.chan.conn;
    a6ac:	6804      	ldr	r4, [r0, #0]
    a6ae:	7815      	ldrb	r5, [r2, #0]
{
    a6b0:	b085      	sub	sp, #20
    a6b2:	4606      	mov	r6, r0
	if (sc_supported) {
    a6b4:	b363      	cbz	r3, a710 <smp_security_request+0x6c>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    a6b6:	f005 050f 	and.w	r5, r5, #15
	if (!conn->le.keys) {
    a6ba:	6f23      	ldr	r3, [r4, #112]	; 0x70
    a6bc:	2b00      	cmp	r3, #0
    a6be:	d142      	bne.n	a746 <smp_security_request+0xa2>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    a6c0:	f104 0748 	add.w	r7, r4, #72	; 0x48
    a6c4:	4639      	mov	r1, r7
    a6c6:	2020      	movs	r0, #32
    a6c8:	f000 f924 	bl	a914 <bt_keys_find>
    a6cc:	6720      	str	r0, [r4, #112]	; 0x70
		if (!conn->le.keys) {
    a6ce:	2800      	cmp	r0, #0
    a6d0:	d139      	bne.n	a746 <smp_security_request+0xa2>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    a6d2:	4639      	mov	r1, r7
    a6d4:	2004      	movs	r0, #4
    a6d6:	f000 f91d 	bl	a914 <bt_keys_find>
    a6da:	6720      	str	r0, [r4, #112]	; 0x70
	if (!conn->le.keys) {
    a6dc:	b308      	cbz	r0, a722 <smp_security_request+0x7e>
	if ((auth & BT_SMP_AUTH_MITM) &&
    a6de:	0769      	lsls	r1, r5, #29
    a6e0:	d419      	bmi.n	a716 <smp_security_request+0x72>
	if ((auth & BT_SMP_AUTH_SC) &&
    a6e2:	f015 0f08 	tst.w	r5, #8
    a6e6:	6f23      	ldr	r3, [r4, #112]	; 0x70
    a6e8:	d122      	bne.n	a730 <smp_security_request+0x8c>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    a6ea:	79da      	ldrb	r2, [r3, #7]
    a6ec:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    a6f0:	9202      	str	r2, [sp, #8]
					conn->le.keys->ltk.val,
    a6f2:	f103 021a 	add.w	r2, r3, #26
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    a6f6:	9201      	str	r2, [sp, #4]
    a6f8:	8b1b      	ldrh	r3, [r3, #24]
    a6fa:	9300      	str	r3, [sp, #0]
    a6fc:	4602      	mov	r2, r0
    a6fe:	460b      	mov	r3, r1
    a700:	4620      	mov	r0, r4
    a702:	f7fb f98b 	bl	5a1c <bt_conn_le_start_encryption>
    a706:	2800      	cmp	r0, #0
    a708:	da16      	bge.n	a738 <smp_security_request+0x94>
		return BT_SMP_ERR_UNSPECIFIED;
    a70a:	2008      	movs	r0, #8
}
    a70c:	b005      	add	sp, #20
    a70e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    a710:	f005 0507 	and.w	r5, r5, #7
    a714:	e7d1      	b.n	a6ba <smp_security_request+0x16>
	    !atomic_test_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED)) {
    a716:	2100      	movs	r1, #0
    a718:	3008      	adds	r0, #8
    a71a:	f7fe fb06 	bl	8d2a <atomic_test_bit>
	if ((auth & BT_SMP_AUTH_MITM) &&
    a71e:	2800      	cmp	r0, #0
    a720:	d1df      	bne.n	a6e2 <smp_security_request+0x3e>
	if (bt_smp_send_pairing_req(conn) < 0) {
    a722:	4620      	mov	r0, r4
    a724:	f7ff ff56 	bl	a5d4 <bt_smp_send_pairing_req>
    a728:	2800      	cmp	r0, #0
    a72a:	dbee      	blt.n	a70a <smp_security_request+0x66>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    a72c:	210c      	movs	r1, #12
    a72e:	e004      	b.n	a73a <smp_security_request+0x96>
	if ((auth & BT_SMP_AUTH_SC) &&
    a730:	899a      	ldrh	r2, [r3, #12]
    a732:	0692      	lsls	r2, r2, #26
    a734:	d5f5      	bpl.n	a722 <smp_security_request+0x7e>
    a736:	e7d8      	b.n	a6ea <smp_security_request+0x46>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    a738:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    a73a:	f106 00a0 	add.w	r0, r6, #160	; 0xa0
    a73e:	f7fe fb01 	bl	8d44 <atomic_set_bit>
	return 0;
    a742:	2000      	movs	r0, #0
    a744:	e7e2      	b.n	a70c <smp_security_request+0x68>
	if (!conn->le.keys) {
    a746:	6f20      	ldr	r0, [r4, #112]	; 0x70
    a748:	e7c9      	b.n	a6de <smp_security_request+0x3a>
    a74a:	bf00      	nop
    a74c:	20000901 	.word	0x20000901

0000a750 <bt_smp_sign_verify>:
    a750:	f06f 0022 	mvn.w	r0, #34	; 0x22
    a754:	4770      	bx	lr

0000a756 <bt_smp_update_keys>:
{
    a756:	b570      	push	{r4, r5, r6, lr}
    a758:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    a75a:	f7fe fae3 	bl	8d24 <smp_chan_get>
	if (!smp) {
    a75e:	4605      	mov	r5, r0
    a760:	2800      	cmp	r0, #0
    a762:	d050      	beq.n	a806 <bt_smp_update_keys+0xb0>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    a764:	f100 06a0 	add.w	r6, r0, #160	; 0xa0
    a768:	2103      	movs	r1, #3
    a76a:	4630      	mov	r0, r6
    a76c:	f7fe fadd 	bl	8d2a <atomic_test_bit>
    a770:	2800      	cmp	r0, #0
    a772:	d048      	beq.n	a806 <bt_smp_update_keys+0xb0>
	if (conn->le.keys) {
    a774:	6f20      	ldr	r0, [r4, #112]	; 0x70
    a776:	b108      	cbz	r0, a77c <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
    a778:	f000 f896 	bl	a8a8 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(&conn->le.dst);
    a77c:	f104 0048 	add.w	r0, r4, #72	; 0x48
    a780:	f000 f8a0 	bl	a8c4 <bt_keys_get_addr>
    a784:	6720      	str	r0, [r4, #112]	; 0x70
	if (!conn->le.keys) {
    a786:	b928      	cbnz	r0, a794 <bt_smp_update_keys+0x3e>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    a788:	4628      	mov	r0, r5
    a78a:	2108      	movs	r1, #8
}
    a78c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    a790:	f7ff b8d2 	b.w	9938 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    a794:	210b      	movs	r1, #11
    a796:	4630      	mov	r0, r6
    a798:	f7fe fac7 	bl	8d2a <atomic_test_bit>
    a79c:	b120      	cbz	r0, a7a8 <bt_smp_update_keys+0x52>
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_DEBUG);
    a79e:	6f20      	ldr	r0, [r4, #112]	; 0x70
    a7a0:	2101      	movs	r1, #1
    a7a2:	3008      	adds	r0, #8
    a7a4:	f7fe face 	bl	8d44 <atomic_set_bit>
	switch (smp->method) {
    a7a8:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    a7ac:	6f20      	ldr	r0, [r4, #112]	; 0x70
    a7ae:	3b01      	subs	r3, #1
    a7b0:	2b02      	cmp	r3, #2
    a7b2:	d829      	bhi.n	a808 <bt_smp_update_keys+0xb2>
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    a7b4:	2100      	movs	r1, #0
    a7b6:	3008      	adds	r0, #8
    a7b8:	f7fe fac4 	bl	8d44 <atomic_set_bit>
	return min(req->max_key_size, rsp->max_key_size);
    a7bc:	f895 10a9 	ldrb.w	r1, [r5, #169]	; 0xa9
    a7c0:	f895 30b0 	ldrb.w	r3, [r5, #176]	; 0xb0
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    a7c4:	6f22      	ldr	r2, [r4, #112]	; 0x70
	return min(req->max_key_size, rsp->max_key_size);
    a7c6:	428b      	cmp	r3, r1
    a7c8:	bf28      	it	cs
    a7ca:	460b      	movcs	r3, r1
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    a7cc:	71d3      	strb	r3, [r2, #7]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    a7ce:	2105      	movs	r1, #5
    a7d0:	4630      	mov	r0, r6
    a7d2:	f7fe faaa 	bl	8d2a <atomic_test_bit>
    a7d6:	b1b0      	cbz	r0, a806 <bt_smp_update_keys+0xb0>
	    atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    a7d8:	210a      	movs	r1, #10
    a7da:	4630      	mov	r0, r6
    a7dc:	f7fe faa5 	bl	8d2a <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    a7e0:	b188      	cbz	r0, a806 <bt_smp_update_keys+0xb0>
		bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    a7e2:	2120      	movs	r1, #32
    a7e4:	6f20      	ldr	r0, [r4, #112]	; 0x70
    a7e6:	f000 f8f5 	bl	a9d4 <bt_keys_add_type>
		memcpy(conn->le.keys->ltk.val, smp->tk,
    a7ea:	6f20      	ldr	r0, [r4, #112]	; 0x70
    a7ec:	2210      	movs	r2, #16
    a7ee:	f105 01e3 	add.w	r1, r5, #227	; 0xe3
    a7f2:	301a      	adds	r0, #26
    a7f4:	f7f6 f879 	bl	8ea <memcpy>
		conn->le.keys->ltk.rand = 0;
    a7f8:	6f23      	ldr	r3, [r4, #112]	; 0x70
    a7fa:	2000      	movs	r0, #0
    a7fc:	2100      	movs	r1, #0
    a7fe:	e9c3 0104 	strd	r0, r1, [r3, #16]
		conn->le.keys->ltk.ediv = 0;
    a802:	2200      	movs	r2, #0
    a804:	831a      	strh	r2, [r3, #24]
    a806:	bd70      	pop	{r4, r5, r6, pc}
    a808:	3008      	adds	r0, #8
    a80a:	f3bf 8f5b 	dmb	ish
    a80e:	e850 3f00 	ldrex	r3, [r0]
    a812:	f023 0301 	bic.w	r3, r3, #1
    a816:	e840 3200 	strex	r2, r3, [r0]
    a81a:	2a00      	cmp	r2, #0
    a81c:	d1f7      	bne.n	a80e <bt_smp_update_keys+0xb8>
    a81e:	f3bf 8f5b 	dmb	ish
    a822:	e7cb      	b.n	a7bc <bt_smp_update_keys+0x66>

0000a824 <bt_smp_get_tk>:
{
    a824:	b570      	push	{r4, r5, r6, lr}
    a826:	460e      	mov	r6, r1
	smp = smp_chan_get(conn);
    a828:	f7fe fa7c 	bl	8d24 <smp_chan_get>
	if (!smp) {
    a82c:	4605      	mov	r5, r0
    a82e:	b908      	cbnz	r0, a834 <bt_smp_get_tk+0x10>
		return false;
    a830:	2000      	movs	r0, #0
    a832:	bd70      	pop	{r4, r5, r6, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    a834:	2103      	movs	r1, #3
    a836:	30a0      	adds	r0, #160	; 0xa0
    a838:	f7fe fa77 	bl	8d2a <atomic_test_bit>
    a83c:	2800      	cmp	r0, #0
    a83e:	d0f7      	beq.n	a830 <bt_smp_get_tk+0xc>
	return min(req->max_key_size, rsp->max_key_size);
    a840:	f895 40b0 	ldrb.w	r4, [r5, #176]	; 0xb0
    a844:	f895 30a9 	ldrb.w	r3, [r5, #169]	; 0xa9
    a848:	429c      	cmp	r4, r3
    a84a:	bf28      	it	cs
    a84c:	461c      	movcs	r4, r3
	memcpy(tk, smp->tk, enc_size);
    a84e:	4622      	mov	r2, r4
    a850:	f105 01e3 	add.w	r1, r5, #227	; 0xe3
    a854:	4630      	mov	r0, r6
    a856:	f7f6 f848 	bl	8ea <memcpy>
	if (enc_size < sizeof(smp->tk)) {
    a85a:	2c0f      	cmp	r4, #15
    a85c:	d805      	bhi.n	a86a <bt_smp_get_tk+0x46>
		memset(tk + enc_size, 0, sizeof(smp->tk) - enc_size);
    a85e:	f1c4 0210 	rsb	r2, r4, #16
    a862:	2100      	movs	r1, #0
    a864:	1930      	adds	r0, r6, r4
    a866:	f7f6 f86c 	bl	942 <memset>
	return true;
    a86a:	2001      	movs	r0, #1
}
    a86c:	bd70      	pop	{r4, r5, r6, pc}
	...

0000a870 <bt_smp_init>:
	return (bt_dev.supported_commands[34] & 0x02) &&
	       (bt_dev.supported_commands[34] & 0x04);
}

int bt_smp_init(void)
{
    a870:	b508      	push	{r3, lr}
	return (bt_dev.supported_commands[34] & 0x02) &&
    a872:	4b09      	ldr	r3, [pc, #36]	; (a898 <bt_smp_init+0x28>)
	if (IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) && !sc_supported) {
		BT_ERR("SC Only Mode selected but LE SC not supported");
		return -ENOENT;
	}

	bt_l2cap_le_fixed_chan_register(&chan);
    a874:	4809      	ldr	r0, [pc, #36]	; (a89c <bt_smp_init+0x2c>)
	return (bt_dev.supported_commands[34] & 0x02) &&
    a876:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    a87a:	f003 0306 	and.w	r3, r3, #6
    a87e:	1f9a      	subs	r2, r3, #6
    a880:	4253      	negs	r3, r2
    a882:	4153      	adcs	r3, r2
    a884:	4a06      	ldr	r2, [pc, #24]	; (a8a0 <bt_smp_init+0x30>)
    a886:	7013      	strb	r3, [r2, #0]
	bt_l2cap_le_fixed_chan_register(&chan);
    a888:	f7fb ffa2 	bl	67d0 <bt_l2cap_le_fixed_chan_register>
	}
#endif

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
    a88c:	4805      	ldr	r0, [pc, #20]	; (a8a4 <bt_smp_init+0x34>)
    a88e:	f7fa ffbb 	bl	5808 <bt_pub_key_gen>

	return smp_self_test();
}
    a892:	2000      	movs	r0, #0
    a894:	bd08      	pop	{r3, pc}
    a896:	bf00      	nop
    a898:	2000dcf8 	.word	0x2000dcf8
    a89c:	2000dfac 	.word	0x2000dfac
    a8a0:	20000901 	.word	0x20000901
    a8a4:	2000dfcc 	.word	0x2000dfcc

0000a8a8 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
	BT_DBG("keys for %s", bt_addr_le_str(&keys->addr));

	if (keys->keys & BT_KEYS_IRK) {
    a8a8:	8983      	ldrh	r3, [r0, #12]
    a8aa:	079b      	lsls	r3, r3, #30
{
    a8ac:	b510      	push	{r4, lr}
    a8ae:	4604      	mov	r4, r0
	if (keys->keys & BT_KEYS_IRK) {
    a8b0:	d501      	bpl.n	a8b6 <bt_keys_clear+0xe>
		bt_id_del(keys);
    a8b2:	f7f9 f9af 	bl	3c14 <bt_id_del>
	}

	memset(keys, 0, sizeof(*keys));
    a8b6:	4620      	mov	r0, r4
    a8b8:	2268      	movs	r2, #104	; 0x68
    a8ba:	2100      	movs	r1, #0
}
    a8bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(keys, 0, sizeof(*keys));
    a8c0:	f7f6 b83f 	b.w	942 <memset>

0000a8c4 <bt_keys_get_addr>:
{
    a8c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a8c6:	4605      	mov	r5, r0
	return memcmp(a, b, sizeof(*a));
    a8c8:	4601      	mov	r1, r0
    a8ca:	2207      	movs	r2, #7
    a8cc:	480b      	ldr	r0, [pc, #44]	; (a8fc <bt_keys_get_addr+0x38>)
    a8ce:	f7f5 ffdf 	bl	890 <memcmp>
		if (!bt_addr_le_cmp(&keys->addr, addr)) {
    a8d2:	b170      	cbz	r0, a8f2 <bt_keys_get_addr+0x2e>
		if (!bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    a8d4:	2400      	movs	r4, #0
    a8d6:	2207      	movs	r2, #7
    a8d8:	4669      	mov	r1, sp
    a8da:	4808      	ldr	r0, [pc, #32]	; (a8fc <bt_keys_get_addr+0x38>)
    a8dc:	9400      	str	r4, [sp, #0]
    a8de:	f8cd 4003 	str.w	r4, [sp, #3]
    a8e2:	f7f5 ffd5 	bl	890 <memcmp>
    a8e6:	b938      	cbnz	r0, a8f8 <bt_keys_get_addr+0x34>
	memcpy(dst, src, sizeof(*dst));
    a8e8:	2207      	movs	r2, #7
    a8ea:	4629      	mov	r1, r5
    a8ec:	4803      	ldr	r0, [pc, #12]	; (a8fc <bt_keys_get_addr+0x38>)
    a8ee:	f7f5 fffc 	bl	8ea <memcpy>
		keys = &key_pool[i];
    a8f2:	4802      	ldr	r0, [pc, #8]	; (a8fc <bt_keys_get_addr+0x38>)
}
    a8f4:	b003      	add	sp, #12
    a8f6:	bd30      	pop	{r4, r5, pc}
	return NULL;
    a8f8:	4620      	mov	r0, r4
    a8fa:	e7fb      	b.n	a8f4 <bt_keys_get_addr+0x30>
    a8fc:	20000908 	.word	0x20000908

0000a900 <bt_keys_foreach>:
		if ((key_pool[i].keys & type)) {
    a900:	4b03      	ldr	r3, [pc, #12]	; (a910 <bt_keys_foreach+0x10>)
    a902:	899a      	ldrh	r2, [r3, #12]
    a904:	4202      	tst	r2, r0
    a906:	d001      	beq.n	a90c <bt_keys_foreach+0xc>
			func(&key_pool[i]);
    a908:	4618      	mov	r0, r3
    a90a:	4708      	bx	r1
    a90c:	4770      	bx	lr
    a90e:	bf00      	nop
    a910:	20000908 	.word	0x20000908

0000a914 <bt_keys_find>:
{
    a914:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) &&
    a916:	4c06      	ldr	r4, [pc, #24]	; (a930 <bt_keys_find+0x1c>)
    a918:	89a3      	ldrh	r3, [r4, #12]
    a91a:	4203      	tst	r3, r0
    a91c:	d004      	beq.n	a928 <bt_keys_find+0x14>
	return memcmp(a, b, sizeof(*a));
    a91e:	2207      	movs	r2, #7
    a920:	4620      	mov	r0, r4
    a922:	f7f5 ffb5 	bl	890 <memcmp>
    a926:	b108      	cbz	r0, a92c <bt_keys_find+0x18>
	return NULL;
    a928:	2000      	movs	r0, #0
    a92a:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    a92c:	4620      	mov	r0, r4
}
    a92e:	bd10      	pop	{r4, pc}
    a930:	20000908 	.word	0x20000908

0000a934 <bt_keys_get_type>:
{
    a934:	b538      	push	{r3, r4, r5, lr}
    a936:	4604      	mov	r4, r0
    a938:	460d      	mov	r5, r1
	keys = bt_keys_find(type, addr);
    a93a:	f7ff ffeb 	bl	a914 <bt_keys_find>
	if (keys) {
    a93e:	b930      	cbnz	r0, a94e <bt_keys_get_type+0x1a>
	keys = bt_keys_get_addr(addr);
    a940:	4628      	mov	r0, r5
    a942:	f7ff ffbf 	bl	a8c4 <bt_keys_get_addr>
	if (!keys) {
    a946:	b110      	cbz	r0, a94e <bt_keys_get_type+0x1a>
	keys->keys |= type;
    a948:	8983      	ldrh	r3, [r0, #12]
    a94a:	431c      	orrs	r4, r3
    a94c:	8184      	strh	r4, [r0, #12]
}
    a94e:	bd38      	pop	{r3, r4, r5, pc}

0000a950 <bt_keys_find_irk>:
{
    a950:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    a952:	7803      	ldrb	r3, [r0, #0]
    a954:	2b01      	cmp	r3, #1
    a956:	4605      	mov	r5, r0
    a958:	d001      	beq.n	a95e <bt_keys_find_irk+0xe>
		return NULL;
    a95a:	2000      	movs	r0, #0
    a95c:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    a95e:	7983      	ldrb	r3, [r0, #6]
    a960:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a964:	2b40      	cmp	r3, #64	; 0x40
    a966:	d1f8      	bne.n	a95a <bt_keys_find_irk+0xa>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    a968:	4c10      	ldr	r4, [pc, #64]	; (a9ac <bt_keys_find_irk+0x5c>)
    a96a:	89a3      	ldrh	r3, [r4, #12]
    a96c:	f013 0f02 	tst.w	r3, #2
    a970:	4626      	mov	r6, r4
    a972:	d110      	bne.n	a996 <bt_keys_find_irk+0x46>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    a974:	89b3      	ldrh	r3, [r6, #12]
    a976:	079b      	lsls	r3, r3, #30
    a978:	d5ef      	bpl.n	a95a <bt_keys_find_irk+0xa>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    a97a:	3501      	adds	r5, #1
    a97c:	4629      	mov	r1, r5
    a97e:	480c      	ldr	r0, [pc, #48]	; (a9b0 <bt_keys_find_irk+0x60>)
    a980:	f7f8 fd97 	bl	34b2 <bt_rpa_irk_matches>
    a984:	2800      	cmp	r0, #0
    a986:	d0e8      	beq.n	a95a <bt_keys_find_irk+0xa>
	memcpy(dst, src, sizeof(*dst));
    a988:	2206      	movs	r2, #6
    a98a:	4629      	mov	r1, r5
    a98c:	4809      	ldr	r0, [pc, #36]	; (a9b4 <bt_keys_find_irk+0x64>)
    a98e:	f7f5 ffac 	bl	8ea <memcpy>
			return &key_pool[i];
    a992:	4806      	ldr	r0, [pc, #24]	; (a9ac <bt_keys_find_irk+0x5c>)
    a994:	bd70      	pop	{r4, r5, r6, pc}
	return memcmp(a, b, sizeof(*a));
    a996:	2206      	movs	r2, #6
    a998:	f104 0140 	add.w	r1, r4, #64	; 0x40
    a99c:	3001      	adds	r0, #1
    a99e:	f7f5 ff77 	bl	890 <memcmp>
		if (!bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
    a9a2:	2800      	cmp	r0, #0
    a9a4:	d1e6      	bne.n	a974 <bt_keys_find_irk+0x24>
			return &key_pool[i];
    a9a6:	4620      	mov	r0, r4
}
    a9a8:	bd70      	pop	{r4, r5, r6, pc}
    a9aa:	bf00      	nop
    a9ac:	20000908 	.word	0x20000908
    a9b0:	20000938 	.word	0x20000938
    a9b4:	20000948 	.word	0x20000948

0000a9b8 <bt_keys_find_addr>:
	return memcmp(a, b, sizeof(*a));
    a9b8:	4601      	mov	r1, r0
{
    a9ba:	b508      	push	{r3, lr}
    a9bc:	2207      	movs	r2, #7
    a9be:	4804      	ldr	r0, [pc, #16]	; (a9d0 <bt_keys_find_addr+0x18>)
    a9c0:	f7f5 ff66 	bl	890 <memcmp>
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    a9c4:	2800      	cmp	r0, #0
}
    a9c6:	4802      	ldr	r0, [pc, #8]	; (a9d0 <bt_keys_find_addr+0x18>)
    a9c8:	bf18      	it	ne
    a9ca:	2000      	movne	r0, #0
    a9cc:	bd08      	pop	{r3, pc}
    a9ce:	bf00      	nop
    a9d0:	20000908 	.word	0x20000908

0000a9d4 <bt_keys_add_type>:
	keys->keys |= type;
    a9d4:	8983      	ldrh	r3, [r0, #12]
    a9d6:	4319      	orrs	r1, r3
    a9d8:	8181      	strh	r1, [r0, #12]
    a9da:	4770      	bx	lr

0000a9dc <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    a9dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    a9de:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    a9e0:	1dc3      	adds	r3, r0, #7
{
    a9e2:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    a9e4:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    a9e8:	1e50      	subs	r0, r2, #1
{
    a9ea:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    a9ec:	b280      	uxth	r0, r0
{
    a9ee:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    a9f0:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    a9f2:	2100      	movs	r1, #0
    a9f4:	2204      	movs	r2, #4
    a9f6:	fb06 5000 	mla	r0, r6, r0, r5
    a9fa:	f7f5 ffa2 	bl	942 <memset>
    a9fe:	3c02      	subs	r4, #2
    aa00:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    aa02:	f64f 77ff 	movw	r7, #65535	; 0xffff
    aa06:	42bc      	cmp	r4, r7
    aa08:	d101      	bne.n	aa0e <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    aa0a:	b003      	add	sp, #12
    aa0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    aa0e:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    aa12:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    aa14:	2204      	movs	r2, #4
    aa16:	1b80      	subs	r0, r0, r6
    aa18:	eb0d 0102 	add.w	r1, sp, r2
    aa1c:	4428      	add	r0, r5
    aa1e:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    aa20:	9301      	str	r3, [sp, #4]
    aa22:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    aa24:	f7f5 ff61 	bl	8ea <memcpy>
    aa28:	e7ed      	b.n	aa06 <mem_init+0x2a>

0000aa2a <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    aa2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    aa2c:	6805      	ldr	r5, [r0, #0]
{
    aa2e:	4606      	mov	r6, r0
	if (*mem_head) {
    aa30:	b195      	cbz	r5, aa58 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    aa32:	1deb      	adds	r3, r5, #7
    aa34:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    aa38:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    aa3a:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    aa3c:	4629      	mov	r1, r5
    aa3e:	eb0d 0002 	add.w	r0, sp, r2
    aa42:	f7f5 ff52 	bl	8ea <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    aa46:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    aa48:	3c01      	subs	r4, #1
    aa4a:	b2a4      	uxth	r4, r4
		if (head) {
    aa4c:	b11b      	cbz	r3, aa56 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    aa4e:	1dda      	adds	r2, r3, #7
    aa50:	f022 0203 	bic.w	r2, r2, #3
    aa54:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    aa56:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    aa58:	4628      	mov	r0, r5
    aa5a:	b002      	add	sp, #8
    aa5c:	bd70      	pop	{r4, r5, r6, pc}

0000aa5e <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    aa5e:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    aa60:	680c      	ldr	r4, [r1, #0]
{
    aa62:	4606      	mov	r6, r0
    aa64:	460d      	mov	r5, r1
	if (*mem_head) {
    aa66:	b11c      	cbz	r4, aa70 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    aa68:	1de3      	adds	r3, r4, #7
    aa6a:	f023 0303 	bic.w	r3, r3, #3
    aa6e:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    aa70:	2204      	movs	r2, #4
    aa72:	4629      	mov	r1, r5
    aa74:	4630      	mov	r0, r6
    aa76:	f7f5 ff38 	bl	8ea <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    aa7a:	1df2      	adds	r2, r6, #7
    aa7c:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    aa80:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    aa82:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    aa84:	602e      	str	r6, [r5, #0]
    aa86:	bd70      	pop	{r4, r5, r6, pc}

0000aa88 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    aa88:	b118      	cbz	r0, aa92 <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    aa8a:	3007      	adds	r0, #7
    aa8c:	f020 0003 	bic.w	r0, r0, #3
    aa90:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    aa92:	4770      	bx	lr

0000aa94 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    aa94:	fb02 0001 	mla	r0, r2, r1, r0
    aa98:	4770      	bx	lr

0000aa9a <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    aa9a:	1a40      	subs	r0, r0, r1
    aa9c:	b280      	uxth	r0, r0
}
    aa9e:	fbb0 f0f2 	udiv	r0, r0, r2
    aaa2:	4770      	bx	lr

0000aaa4 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    aaa4:	b510      	push	{r4, lr}
	src += len;
    aaa6:	4411      	add	r1, r2
    aaa8:	3801      	subs	r0, #1
	while (len--) {
    aaaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    aaae:	3a01      	subs	r2, #1
    aab0:	b292      	uxth	r2, r2
    aab2:	429a      	cmp	r2, r3
    aab4:	d100      	bne.n	aab8 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    aab6:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    aab8:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    aabc:	f800 4f01 	strb.w	r4, [r0, #1]!
    aac0:	e7f5      	b.n	aaae <mem_rcopy+0xa>

0000aac2 <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    aac2:	4401      	add	r1, r0
	while (len--) {
    aac4:	4288      	cmp	r0, r1
    aac6:	d101      	bne.n	aacc <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    aac8:	2000      	movs	r0, #0
    aaca:	4770      	bx	lr
		if (*src++) {
    aacc:	f810 3b01 	ldrb.w	r3, [r0], #1
    aad0:	2b00      	cmp	r3, #0
    aad2:	d0f7      	beq.n	aac4 <mem_nz+0x2>
			return 1;
    aad4:	2001      	movs	r0, #1
}
    aad6:	4770      	bx	lr

0000aad8 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    aad8:	6010      	str	r0, [r2, #0]
    aada:	6008      	str	r0, [r1, #0]

	return link;
}
    aadc:	4770      	bx	lr

0000aade <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    aade:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    aae0:	6814      	ldr	r4, [r2, #0]
    aae2:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    aae4:	6814      	ldr	r4, [r2, #0]
    aae6:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    aae8:	6010      	str	r0, [r2, #0]

	return link;
}
    aaea:	bd10      	pop	{r4, pc}

0000aaec <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    aaec:	4288      	cmp	r0, r1
    aaee:	d003      	beq.n	aaf8 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    aaf0:	b11a      	cbz	r2, aafa <memq_peek+0xe>
		*mem = head->mem;
    aaf2:	6843      	ldr	r3, [r0, #4]
    aaf4:	6013      	str	r3, [r2, #0]
    aaf6:	4770      	bx	lr
		return NULL;
    aaf8:	2000      	movs	r0, #0
	}

	return head;
}
    aafa:	4770      	bx	lr

0000aafc <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    aafc:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    aafe:	4283      	cmp	r3, r0
    ab00:	d009      	beq.n	ab16 <memq_dequeue+0x1a>
	if (mem) {
    ab02:	b122      	cbz	r2, ab0e <memq_dequeue+0x12>
		*mem = head->mem;
    ab04:	6858      	ldr	r0, [r3, #4]
    ab06:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    ab08:	681a      	ldr	r2, [r3, #0]
    ab0a:	600a      	str	r2, [r1, #0]

	return link;
    ab0c:	e001      	b.n	ab12 <memq_dequeue+0x16>
	if (!link) {
    ab0e:	2b00      	cmp	r3, #0
    ab10:	d1fa      	bne.n	ab08 <memq_dequeue+0xc>
}
    ab12:	4618      	mov	r0, r3
    ab14:	4770      	bx	lr
		return NULL;
    ab16:	2300      	movs	r3, #0
    ab18:	e7fb      	b.n	ab12 <memq_dequeue+0x16>
	...

0000ab1c <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    ab1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    ab20:	4f11      	ldr	r7, [pc, #68]	; (ab68 <mayfly_init+0x4c>)
    ab22:	f8df 9048 	ldr.w	r9, [pc, #72]	; ab6c <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    ab26:	2604      	movs	r6, #4
	while (callee_id--) {
    ab28:	3e01      	subs	r6, #1
    ab2a:	b2f6      	uxtb	r6, r6
    ab2c:	2eff      	cmp	r6, #255	; 0xff
    ab2e:	d019      	beq.n	ab64 <mayfly_init+0x48>
    ab30:	b233      	sxth	r3, r6
    ab32:	ea4f 0883 	mov.w	r8, r3, lsl #2
    ab36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    ab3a:	011d      	lsls	r5, r3, #4
    ab3c:	2404      	movs	r4, #4
    ab3e:	f04f 0a0c 	mov.w	sl, #12
    ab42:	e00a      	b.n	ab5a <mayfly_init+0x3e>
    ab44:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    ab48:	1d0a      	adds	r2, r1, #4
    ab4a:	eb04 0008 	add.w	r0, r4, r8
    ab4e:	443a      	add	r2, r7
    ab50:	4439      	add	r1, r7
    ab52:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    ab56:	f7ff ffbf 	bl	aad8 <memq_init>
		while (caller_id--) {
    ab5a:	3c01      	subs	r4, #1
    ab5c:	b2e4      	uxtb	r4, r4
    ab5e:	2cff      	cmp	r4, #255	; 0xff
    ab60:	d1f0      	bne.n	ab44 <mayfly_init+0x28>
    ab62:	e7e1      	b.n	ab28 <mayfly_init+0xc>
    ab64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ab68:	200009f0 	.word	0x200009f0
    ab6c:	20000970 	.word	0x20000970

0000ab70 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    ab70:	b4f0      	push	{r4, r5, r6, r7}
    ab72:	4b12      	ldr	r3, [pc, #72]	; (abbc <mayfly_enable+0x4c>)
    ab74:	4605      	mov	r5, r0
    ab76:	460f      	mov	r7, r1
    ab78:	260c      	movs	r6, #12
    ab7a:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    ab7c:	b172      	cbz	r2, ab9c <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    ab7e:	4361      	muls	r1, r4
    ab80:	fb06 1400 	mla	r4, r6, r0, r1
    ab84:	4423      	add	r3, r4
    ab86:	7a59      	ldrb	r1, [r3, #9]
    ab88:	7a18      	ldrb	r0, [r3, #8]
    ab8a:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    ab8c:	bf04      	itt	eq
    ab8e:	3101      	addeq	r1, #1
    ab90:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    ab92:	4628      	mov	r0, r5
    ab94:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    ab96:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    ab98:	f00c be62 	b.w	17860 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    ab9c:	434c      	muls	r4, r1
    ab9e:	fb06 4400 	mla	r4, r6, r0, r4
    aba2:	4423      	add	r3, r4
    aba4:	7a9c      	ldrb	r4, [r3, #10]
    aba6:	7ada      	ldrb	r2, [r3, #11]
    aba8:	42a2      	cmp	r2, r4
    abaa:	d104      	bne.n	abb6 <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    abac:	3201      	adds	r2, #1
    abae:	729a      	strb	r2, [r3, #10]
}
    abb0:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    abb2:	f00c be83 	b.w	178bc <mayfly_pend>
}
    abb6:	bcf0      	pop	{r4, r5, r6, r7}
    abb8:	4770      	bx	lr
    abba:	bf00      	nop
    abbc:	200009f0 	.word	0x200009f0

0000abc0 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    abc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    abc2:	4605      	mov	r5, r0
    abc4:	460e      	mov	r6, r1
    abc6:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    abc8:	b18a      	cbz	r2, abee <mayfly_enqueue+0x2e>
    abca:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    abcc:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    abce:	7820      	ldrb	r0, [r4, #0]
    abd0:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    abd2:	f010 0703 	ands.w	r7, r0, #3
    abd6:	d029      	beq.n	ac2c <mayfly_enqueue+0x6c>
		if (chain) {
    abd8:	b303      	cbz	r3, ac1c <mayfly_enqueue+0x5c>
			if (state != 1) {
    abda:	2f01      	cmp	r7, #1
    abdc:	d039      	beq.n	ac52 <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    abde:	3201      	adds	r2, #1
    abe0:	b2d2      	uxtb	r2, r2
    abe2:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    abe4:	4631      	mov	r1, r6
    abe6:	4628      	mov	r0, r5
    abe8:	f00c fe68 	bl	178bc <mayfly_pend>
    abec:	e01c      	b.n	ac28 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    abee:	f00c fe53 	bl	17898 <mayfly_prio_is_equal>
    abf2:	2800      	cmp	r0, #0
    abf4:	d0e9      	beq.n	abca <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    abf6:	4631      	mov	r1, r6
    abf8:	4628      	mov	r0, r5
    abfa:	f00c fe3f 	bl	1787c <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    abfe:	2800      	cmp	r0, #0
    ac00:	d0e3      	beq.n	abca <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    ac02:	2330      	movs	r3, #48	; 0x30
    ac04:	220c      	movs	r2, #12
    ac06:	4373      	muls	r3, r6
    ac08:	fb02 3305 	mla	r3, r2, r5, r3
    ac0c:	4a12      	ldr	r2, [pc, #72]	; (ac58 <mayfly_enqueue+0x98>)
    ac0e:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    ac10:	7a93      	ldrb	r3, [r2, #10]
    ac12:	7ad2      	ldrb	r2, [r2, #11]
    ac14:	1a9b      	subs	r3, r3, r2
    ac16:	bf18      	it	ne
    ac18:	2301      	movne	r3, #1
    ac1a:	e7d7      	b.n	abcc <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    ac1c:	3202      	adds	r2, #2
    ac1e:	b2d2      	uxtb	r2, r2
    ac20:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    ac22:	68e3      	ldr	r3, [r4, #12]
    ac24:	68a0      	ldr	r0, [r4, #8]
    ac26:	4798      	blx	r3
		return 0;
    ac28:	2000      	movs	r0, #0
    ac2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    ac2c:	2b00      	cmp	r3, #0
    ac2e:	d0f8      	beq.n	ac22 <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    ac30:	3201      	adds	r2, #1
    ac32:	b2d2      	uxtb	r2, r2
    ac34:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    ac36:	2304      	movs	r3, #4
    ac38:	2230      	movs	r2, #48	; 0x30
    ac3a:	fb12 3206 	smlabb	r2, r2, r6, r3
    ac3e:	230c      	movs	r3, #12
    ac40:	fb13 2305 	smlabb	r3, r3, r5, r2
    ac44:	4a04      	ldr	r2, [pc, #16]	; (ac58 <mayfly_enqueue+0x98>)
    ac46:	6860      	ldr	r0, [r4, #4]
    ac48:	441a      	add	r2, r3
    ac4a:	4621      	mov	r1, r4
    ac4c:	f7ff ff47 	bl	aade <memq_enqueue>
    ac50:	e7c8      	b.n	abe4 <mayfly_enqueue+0x24>
			return 1;
    ac52:	4638      	mov	r0, r7

	return 0;
}
    ac54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ac56:	bf00      	nop
    ac58:	200009f0 	.word	0x200009f0

0000ac5c <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    ac5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac60:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    ac64:	b089      	sub	sp, #36	; 0x24
    ac66:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    ac68:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    ac6c:	4e43      	ldr	r6, [pc, #268]	; (ad7c <mayfly_run+0x120>)
    ac6e:	9304      	str	r3, [sp, #16]
{
    ac70:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    ac72:	2404      	movs	r4, #4
	u8_t disable = 0;
    ac74:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    ac78:	3c01      	subs	r4, #1
    ac7a:	b2e4      	uxtb	r4, r4
    ac7c:	2cff      	cmp	r4, #255	; 0xff
    ac7e:	d10b      	bne.n	ac98 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    ac80:	9b01      	ldr	r3, [sp, #4]
    ac82:	2b00      	cmp	r3, #0
    ac84:	d076      	beq.n	ad74 <mayfly_run+0x118>
    ac86:	f1b8 0f00 	cmp.w	r8, #0
    ac8a:	d173      	bne.n	ad74 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    ac8c:	4642      	mov	r2, r8
    ac8e:	4629      	mov	r1, r5
    ac90:	4628      	mov	r0, r5
    ac92:	f00c fde5 	bl	17860 <mayfly_enable_cb>
    ac96:	e06d      	b.n	ad74 <mayfly_run+0x118>
		struct mayfly *m = 0;
    ac98:	f10d 0b20 	add.w	fp, sp, #32
    ac9c:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    ac9e:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    aca0:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    aca4:	f04f 0930 	mov.w	r9, #48	; 0x30
    aca8:	fb07 f304 	mul.w	r3, r7, r4
    acac:	fb09 3005 	mla	r0, r9, r5, r3
    acb0:	1831      	adds	r1, r6, r0
    acb2:	465a      	mov	r2, fp
    acb4:	6849      	ldr	r1, [r1, #4]
    acb6:	5830      	ldr	r0, [r6, r0]
    acb8:	9302      	str	r3, [sp, #8]
    acba:	f7ff ff17 	bl	aaec <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    acbe:	9b04      	ldr	r3, [sp, #16]
    acc0:	fb17 3704 	smlabb	r7, r7, r4, r3
    acc4:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    acc6:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    acc8:	9303      	str	r3, [sp, #12]
		while (link) {
    acca:	f1ba 0f00 	cmp.w	sl, #0
    acce:	d119      	bne.n	ad04 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    acd0:	2230      	movs	r2, #48	; 0x30
    acd2:	230c      	movs	r3, #12
    acd4:	436a      	muls	r2, r5
    acd6:	fb03 2204 	mla	r2, r3, r4, r2
    acda:	4432      	add	r2, r6
    acdc:	7a91      	ldrb	r1, [r2, #10]
    acde:	7ad0      	ldrb	r0, [r2, #11]
    ace0:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    ace2:	bf1e      	ittt	ne
    ace4:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    ace6:	2201      	movne	r2, #1
    ace8:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    acea:	2230      	movs	r2, #48	; 0x30
    acec:	436a      	muls	r2, r5
    acee:	fb03 2304 	mla	r3, r3, r4, r2
    acf2:	4433      	add	r3, r6
    acf4:	7a1a      	ldrb	r2, [r3, #8]
    acf6:	7a59      	ldrb	r1, [r3, #9]
    acf8:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    acfa:	bf1c      	itt	ne
    acfc:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    acfe:	f04f 0801 	movne.w	r8, #1
    ad02:	e7b9      	b.n	ac78 <mayfly_run+0x1c>
			req = m->_req;
    ad04:	9b07      	ldr	r3, [sp, #28]
    ad06:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    ad08:	785a      	ldrb	r2, [r3, #1]
    ad0a:	1abf      	subs	r7, r7, r2
    ad0c:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    ad10:	2f01      	cmp	r7, #1
    ad12:	d104      	bne.n	ad1e <mayfly_run+0xc2>
				m->_ack--;
    ad14:	3a01      	subs	r2, #1
    ad16:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    ad18:	6898      	ldr	r0, [r3, #8]
    ad1a:	68da      	ldr	r2, [r3, #12]
    ad1c:	4790      	blx	r2
			req = m->_req;
    ad1e:	9a07      	ldr	r2, [sp, #28]
    ad20:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    ad22:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    ad24:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    ad26:	1a9a      	subs	r2, r3, r2
    ad28:	f002 0203 	and.w	r2, r2, #3
    ad2c:	2a01      	cmp	r2, #1
    ad2e:	9305      	str	r3, [sp, #20]
    ad30:	d00d      	beq.n	ad4e <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    ad32:	9b02      	ldr	r3, [sp, #8]
    ad34:	9903      	ldr	r1, [sp, #12]
    ad36:	fb09 3005 	mla	r0, r9, r5, r3
    ad3a:	4430      	add	r0, r6
    ad3c:	2200      	movs	r2, #0
    ad3e:	6840      	ldr	r0, [r0, #4]
    ad40:	f7ff fedc 	bl	aafc <memq_dequeue>
				m->_link = link;
    ad44:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    ad46:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    ad48:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    ad4c:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    ad4e:	9b02      	ldr	r3, [sp, #8]
    ad50:	fb09 3305 	mla	r3, r9, r5, r3
    ad54:	18f1      	adds	r1, r6, r3
    ad56:	465a      	mov	r2, fp
    ad58:	6849      	ldr	r1, [r1, #4]
    ad5a:	58f0      	ldr	r0, [r6, r3]
    ad5c:	f7ff fec6 	bl	aaec <memq_peek>
			if (state == 1) {
    ad60:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    ad62:	4682      	mov	sl, r0
			if (state == 1) {
    ad64:	d1b1      	bne.n	acca <mayfly_run+0x6e>
				if (caller_id || link) {
    ad66:	b90c      	cbnz	r4, ad6c <mayfly_run+0x110>
    ad68:	2800      	cmp	r0, #0
    ad6a:	d0b1      	beq.n	acd0 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    ad6c:	4629      	mov	r1, r5
    ad6e:	4628      	mov	r0, r5
    ad70:	f00c fda4 	bl	178bc <mayfly_pend>
	}
}
    ad74:	b009      	add	sp, #36	; 0x24
    ad76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad7a:	bf00      	nop
    ad7c:	200009f0 	.word	0x200009f0

0000ad80 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    ad80:	b510      	push	{r4, lr}
    ad82:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    ad84:	2000      	movs	r0, #0

	while (octets_len--) {
    ad86:	3901      	subs	r1, #1
    ad88:	b2c9      	uxtb	r1, r1
    ad8a:	29ff      	cmp	r1, #255	; 0xff
    ad8c:	d100      	bne.n	ad90 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    ad8e:	bd10      	pop	{r4, pc}
		bite = *octets;
    ad90:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    ad94:	2b00      	cmp	r3, #0
    ad96:	d0f6      	beq.n	ad86 <util_ones_count_get+0x6>
			bite &= (bite - 1);
    ad98:	1e5c      	subs	r4, r3, #1
			one_count++;
    ad9a:	3001      	adds	r0, #1
			bite &= (bite - 1);
    ad9c:	4023      	ands	r3, r4
			one_count++;
    ad9e:	b2c0      	uxtb	r0, r0
    ada0:	e7f8      	b.n	ad94 <util_ones_count_get+0x14>

0000ada2 <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    ada2:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    ada4:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    ada6:	6805      	ldr	r5, [r0, #0]
	current = previous;
    ada8:	461a      	mov	r2, r3
	total = 0;
    adaa:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    adac:	2aff      	cmp	r2, #255	; 0xff
    adae:	d101      	bne.n	adb4 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    adb0:	2000      	movs	r0, #0
    adb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    adb4:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    adb8:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    adba:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    adbe:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    adc2:	d004      	beq.n	adce <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    adc4:	68b3      	ldr	r3, [r6, #8]
    adc6:	441c      	add	r4, r3
		current = ticker_current->next;
    adc8:	4613      	mov	r3, r2
    adca:	463a      	mov	r2, r7
    adcc:	e7ee      	b.n	adac <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    adce:	4293      	cmp	r3, r2
    add0:	d100      	bne.n	add4 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    add2:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    add4:	b21b      	sxth	r3, r3
    add6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    adda:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    addc:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    adde:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    ade2:	7833      	ldrb	r3, [r6, #0]
    ade4:	2bff      	cmp	r3, #255	; 0xff
    ade6:	d006      	beq.n	adf6 <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    ade8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    adec:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    adf0:	689a      	ldr	r2, [r3, #8]
    adf2:	4402      	add	r2, r0
    adf4:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    adf6:	4420      	add	r0, r4
    adf8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000adfa <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    adfa:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    adfc:	1a55      	subs	r5, r2, r1
    adfe:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    ae02:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    ae04:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    ae06:	d109      	bne.n	ae1c <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    ae08:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    ae0c:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    ae0e:	42a2      	cmp	r2, r4
    ae10:	d90e      	bls.n	ae30 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    ae12:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    ae14:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    ae16:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    ae18:	6144      	str	r4, [r0, #20]
    ae1a:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    ae1c:	1a8a      	subs	r2, r1, r2
    ae1e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    ae22:	4293      	cmp	r3, r2
    ae24:	d901      	bls.n	ae2a <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    ae26:	1a9a      	subs	r2, r3, r2
    ae28:	e7f1      	b.n	ae0e <ticks_to_expire_prep+0x14>
    ae2a:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    ae2c:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    ae2e:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    ae30:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    ae32:	2200      	movs	r2, #0
    ae34:	e7ef      	b.n	ae16 <ticks_to_expire_prep+0x1c>

0000ae36 <ticker_job_op_cb>:
{
    ae36:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    ae38:	2200      	movs	r2, #0
    ae3a:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    ae3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    ae3e:	6259      	str	r1, [r3, #36]	; 0x24
{
    ae40:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    ae42:	b10a      	cbz	r2, ae48 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    ae44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    ae46:	4710      	bx	r2
    ae48:	4770      	bx	lr

0000ae4a <ticker_worker>:
{
    ae4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    ae4e:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    ae50:	2301      	movs	r3, #1
{
    ae52:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    ae54:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    ae56:	2d00      	cmp	r5, #0
    ae58:	d14c      	bne.n	aef4 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    ae5a:	7f43      	ldrb	r3, [r0, #29]
    ae5c:	2bff      	cmp	r3, #255	; 0xff
    ae5e:	d102      	bne.n	ae66 <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    ae60:	77c5      	strb	r5, [r0, #31]
		return;
    ae62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    ae66:	f00b ff8f 	bl	16d88 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    ae6a:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    ae6c:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    ae6e:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    ae72:	1bc7      	subs	r7, r0, r7
    ae74:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    ae78:	2eff      	cmp	r6, #255	; 0xff
    ae7a:	d006      	beq.n	ae8a <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    ae7c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    ae80:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    ae84:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    ae86:	429f      	cmp	r7, r3
    ae88:	d218      	bcs.n	aebc <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    ae8a:	7aa2      	ldrb	r2, [r4, #10]
    ae8c:	7ae3      	ldrb	r3, [r4, #11]
    ae8e:	4293      	cmp	r3, r2
    ae90:	d105      	bne.n	ae9e <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    ae92:	3301      	adds	r3, #1
    ae94:	b2db      	uxtb	r3, r3
			last = 0;
    ae96:	2b02      	cmp	r3, #2
    ae98:	bf08      	it	eq
    ae9a:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    ae9c:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    ae9e:	7ae3      	ldrb	r3, [r4, #11]
    aea0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    aea4:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    aea6:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    aea8:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    aeaa:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    aeac:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    aeae:	46ac      	mov	ip, r5
    aeb0:	4623      	mov	r3, r4
    aeb2:	2104      	movs	r1, #4
    aeb4:	2003      	movs	r0, #3
}
    aeb6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    aeba:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    aebc:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    aebe:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    aec0:	788a      	ldrb	r2, [r1, #2]
    aec2:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    aec4:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    aec8:	1a9b      	subs	r3, r3, r2
    aeca:	b2db      	uxtb	r3, r3
    aecc:	2b01      	cmp	r3, #1
    aece:	d1d3      	bne.n	ae78 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    aed0:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    aed4:	3a01      	subs	r2, #1
    aed6:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    aed8:	f1b9 0f00 	cmp.w	r9, #0
    aedc:	d0cc      	beq.n	ae78 <ticker_worker+0x2e>
					   ticks_expired -
    aede:	6948      	ldr	r0, [r1, #20]
    aee0:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    aee2:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    aee4:	1a28      	subs	r0, r5, r0
    aee6:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    aee8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    aeec:	690b      	ldr	r3, [r1, #16]
    aeee:	6a49      	ldr	r1, [r1, #36]	; 0x24
    aef0:	47c8      	blx	r9
    aef2:	e7c1      	b.n	ae78 <ticker_worker+0x2e>
    aef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000aef8 <ticker_job>:
{
    aef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    aefc:	7fc2      	ldrb	r2, [r0, #31]
{
    aefe:	b093      	sub	sp, #76	; 0x4c
    af00:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    af02:	2a00      	cmp	r2, #0
    af04:	f040 83b5 	bne.w	b672 <ticker_job+0x77a>
	ticks_previous = instance->ticks_current;
    af08:	6943      	ldr	r3, [r0, #20]
    af0a:	9305      	str	r3, [sp, #20]
	instance->job_guard = 1;
    af0c:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    af0e:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    af10:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    af12:	7ac0      	ldrb	r0, [r0, #11]
    af14:	4298      	cmp	r0, r3
    af16:	f000 808f 	beq.w	b038 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    af1a:	440b      	add	r3, r1
    af1c:	b2db      	uxtb	r3, r3
			first = 0;
    af1e:	2b02      	cmp	r3, #2
    af20:	bf08      	it	eq
    af22:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    af24:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    af28:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    af2c:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
    af2e:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    af32:	9b05      	ldr	r3, [sp, #20]
    af34:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    af36:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    af3a:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    af3e:	f89b 301d 	ldrb.w	r3, [fp, #29]
    af42:	9303      	str	r3, [sp, #12]
	node = &instance->node[0];
    af44:	f8db 3000 	ldr.w	r3, [fp]
    af48:	9304      	str	r3, [sp, #16]
	users = &instance->user[0];
    af4a:	f8db 3004 	ldr.w	r3, [fp, #4]
    af4e:	930b      	str	r3, [sp, #44]	; 0x2c
    af50:	f89b 3009 	ldrb.w	r3, [fp, #9]
    af54:	3b01      	subs	r3, #1
    af56:	b2db      	uxtb	r3, r3
    af58:	9302      	str	r3, [sp, #8]
	pending = 0;
    af5a:	2300      	movs	r3, #0
    af5c:	9307      	str	r3, [sp, #28]
	insert_head = TICKER_NULL;
    af5e:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    af62:	9b02      	ldr	r3, [sp, #8]
    af64:	2bff      	cmp	r3, #255	; 0xff
    af66:	d16a      	bne.n	b03e <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    af68:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    af6c:	9a03      	ldr	r2, [sp, #12]
    af6e:	1a9b      	subs	r3, r3, r2
    af70:	bf18      	it	ne
    af72:	2301      	movne	r3, #1
    af74:	9302      	str	r3, [sp, #8]
	if (flag_elapsed) {
    af76:	9b01      	ldr	r3, [sp, #4]
    af78:	b1e3      	cbz	r3, afb4 <ticker_job+0xbc>
	node = &instance->node[0];
    af7a:	f8db 3000 	ldr.w	r3, [fp]
    af7e:	9304      	str	r3, [sp, #16]
	ticks_expired = 0;
    af80:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    af84:	f89b 601d 	ldrb.w	r6, [fp, #29]
    af88:	2eff      	cmp	r6, #255	; 0xff
    af8a:	d00c      	beq.n	afa6 <ticker_job+0xae>
		ticker = &node[id_expired];
    af8c:	b237      	sxth	r7, r6
    af8e:	9b04      	ldr	r3, [sp, #16]
    af90:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    af94:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    af98:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    af9a:	4545      	cmp	r5, r8
    af9c:	f240 8136 	bls.w	b20c <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    afa0:	eba5 0508 	sub.w	r5, r5, r8
    afa4:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    afa6:	9b02      	ldr	r3, [sp, #8]
    afa8:	9a01      	ldr	r2, [sp, #4]
    afaa:	9903      	ldr	r1, [sp, #12]
    afac:	42b1      	cmp	r1, r6
    afae:	bf18      	it	ne
    afb0:	4613      	movne	r3, r2
    afb2:	9302      	str	r3, [sp, #8]
	node = &instance->node[0];
    afb4:	f8db 3000 	ldr.w	r3, [fp]
    afb8:	9308      	str	r3, [sp, #32]
	users = &instance->user[0];
    afba:	f8db 3004 	ldr.w	r3, [fp, #4]
    afbe:	9310      	str	r3, [sp, #64]	; 0x40
    afc0:	f89b 3009 	ldrb.w	r3, [fp, #9]
    afc4:	3b01      	subs	r3, #1
    afc6:	b2db      	uxtb	r3, r3
    afc8:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    afca:	9b01      	ldr	r3, [sp, #4]
    afcc:	2bff      	cmp	r3, #255	; 0xff
    afce:	f040 8170 	bne.w	b2b2 <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    afd2:	f89b 301d 	ldrb.w	r3, [fp, #29]
    afd6:	9a03      	ldr	r2, [sp, #12]
    afd8:	4293      	cmp	r3, r2
	if (!pending) {
    afda:	9b07      	ldr	r3, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
    afdc:	f040 8340 	bne.w	b660 <ticker_job+0x768>
	if (!pending) {
    afe0:	b95b      	cbnz	r3, affa <ticker_job+0x102>
    afe2:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    afe6:	f8db 3004 	ldr.w	r3, [fp, #4]
    afea:	9301      	str	r3, [sp, #4]
    afec:	3c01      	subs	r4, #1
    afee:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    aff0:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    aff4:	2cff      	cmp	r4, #255	; 0xff
    aff6:	f040 82a0 	bne.w	b53a <ticker_job+0x642>
	instance->job_guard = 0;
    affa:	2300      	movs	r3, #0
    affc:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    b000:	9b02      	ldr	r3, [sp, #8]
    b002:	b14b      	cbz	r3, b018 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    b004:	f89b 301d 	ldrb.w	r3, [fp, #29]
    b008:	2bff      	cmp	r3, #255	; 0xff
    b00a:	f040 82e9 	bne.w	b5e0 <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    b00e:	f00b fea3 	bl	16d58 <cntr_stop>
    b012:	b908      	cbnz	r0, b018 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    b014:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    b018:	f89b 301f 	ldrb.w	r3, [fp, #31]
    b01c:	2b00      	cmp	r3, #0
    b01e:	f000 8328 	beq.w	b672 <ticker_job+0x77a>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    b022:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    b026:	465b      	mov	r3, fp
    b028:	2201      	movs	r2, #1
    b02a:	2103      	movs	r1, #3
    b02c:	2004      	movs	r0, #4
    b02e:	46a4      	mov	ip, r4
}
    b030:	b013      	add	sp, #76	; 0x4c
    b032:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    b036:	4760      	bx	ip
		flag_elapsed = 0;
    b038:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0;
    b03a:	4690      	mov	r8, r2
    b03c:	e77f      	b.n	af3e <ticker_job+0x46>
		user = &users[count_user];
    b03e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b040:	9a02      	ldr	r2, [sp, #8]
    b042:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    b046:	687b      	ldr	r3, [r7, #4]
    b048:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
    b04a:	78f9      	ldrb	r1, [r7, #3]
    b04c:	78be      	ldrb	r6, [r7, #2]
    b04e:	428e      	cmp	r6, r1
    b050:	f000 80d7 	beq.w	b202 <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    b054:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
    b056:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    b058:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    b05c:	0112      	lsls	r2, r2, #4
    b05e:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    b060:	1c73      	adds	r3, r6, #1
    b062:	b2db      	uxtb	r3, r3
				middle = 0;
    b064:	4298      	cmp	r0, r3
    b066:	bf08      	it	eq
    b068:	2300      	moveq	r3, #0
			user->middle = middle;
    b06a:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    b06c:	9b06      	ldr	r3, [sp, #24]
    b06e:	5c9a      	ldrb	r2, [r3, r2]
    b070:	2a03      	cmp	r2, #3
    b072:	d9eb      	bls.n	b04c <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    b074:	2a05      	cmp	r2, #5
    b076:	d817      	bhi.n	b0a8 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    b078:	7869      	ldrb	r1, [r5, #1]
    b07a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    b07e:	930a      	str	r3, [sp, #40]	; 0x28
    b080:	980a      	ldr	r0, [sp, #40]	; 0x28
    b082:	9b04      	ldr	r3, [sp, #16]
    b084:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    b088:	7863      	ldrb	r3, [r4, #1]
    b08a:	78a0      	ldrb	r0, [r4, #2]
    b08c:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    b08e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    b092:	d009      	beq.n	b0a8 <ticker_job+0x1b0>
			    (state == 0) ||
    b094:	2a04      	cmp	r2, #4
    b096:	d10c      	bne.n	b0b2 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    b098:	686a      	ldr	r2, [r5, #4]
    b09a:	b952      	cbnz	r2, b0b2 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    b09c:	68aa      	ldr	r2, [r5, #8]
    b09e:	b942      	cbnz	r2, b0b2 <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    b0a0:	68ea      	ldr	r2, [r5, #12]
    b0a2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    b0a6:	d104      	bne.n	b0b2 <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    b0a8:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    b0aa:	4628      	mov	r0, r5
    b0ac:	f7ff fec3 	bl	ae36 <ticker_job_op_cb>
    b0b0:	e7cb      	b.n	b04a <ticker_job+0x152>
			if (state == 1) {
    b0b2:	2b01      	cmp	r3, #1
    b0b4:	f040 809b 	bne.w	b1ee <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    b0b8:	4658      	mov	r0, fp
    b0ba:	f7ff fe72 	bl	ada2 <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    b0be:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    b0c0:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    b0c2:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    b0c4:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    b0c6:	f040 8084 	bne.w	b1d2 <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    b0ca:	f8db 3014 	ldr.w	r3, [fp, #20]
    b0ce:	9308      	str	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    b0d0:	f00b fe5a 	bl	16d88 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    b0d4:	9b08      	ldr	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    b0d6:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    b0d8:	1ac3      	subs	r3, r0, r3
    b0da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    b0de:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    b0e0:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    b0e2:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    b0e4:	bf9e      	ittt	ls
    b0e6:	6962      	ldrls	r2, [r4, #20]
    b0e8:	1b92      	subls	r2, r2, r6
    b0ea:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    b0ec:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    b0ee:	bf96      	itet	ls
    b0f0:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    b0f2:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    b0f4:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    b0f6:	b18a      	cbz	r2, b11c <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    b0f8:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    b0fa:	b179      	cbz	r1, b11c <ticker_job+0x224>
		user_op->params.update.lazy--;
    b0fc:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    b100:	fa1f fe8e 	uxth.w	lr, lr
    b104:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    b108:	429a      	cmp	r2, r3
    b10a:	d32b      	bcc.n	b164 <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    b10c:	f8df 9324 	ldr.w	r9, [pc, #804]	; b434 <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    b110:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    b114:	45e6      	cmp	lr, ip
    b116:	d847      	bhi.n	b1a8 <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    b118:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    b11c:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    b11e:	9908      	ldr	r1, [sp, #32]
	ticker->ticks_to_expire = ticks_to_expire +
    b120:	4413      	add	r3, r2
    b122:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    b124:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    b126:	6963      	ldr	r3, [r4, #20]
    b128:	4413      	add	r3, r2
    b12a:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    b12c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b12e:	4620      	mov	r0, r4
    b130:	f7ff fe63 	bl	adfa <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    b134:	69a2      	ldr	r2, [r4, #24]
    b136:	892b      	ldrh	r3, [r5, #8]
    b138:	4413      	add	r3, r2
    b13a:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    b13c:	896a      	ldrh	r2, [r5, #10]
    b13e:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    b140:	bf8c      	ite	hi
    b142:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    b144:	2300      	movls	r3, #0
    b146:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    b148:	7bab      	ldrb	r3, [r5, #14]
    b14a:	b103      	cbz	r3, b14e <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    b14c:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    b14e:	9b04      	ldr	r3, [sp, #16]
    b150:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b152:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    b156:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    b158:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    b15c:	3301      	adds	r3, #1
    b15e:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    b160:	2100      	movs	r1, #0
    b162:	e7a2      	b.n	b0aa <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    b164:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    b168:	45e6      	cmp	lr, ip
    b16a:	d2cf      	bcs.n	b10c <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    b16c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    b16e:	4eaf      	ldr	r6, [pc, #700]	; (b42c <ticker_job+0x534>)
    b170:	48af      	ldr	r0, [pc, #700]	; (b430 <ticker_job+0x538>)
    b172:	198e      	adds	r6, r1, r6
    b174:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    b176:	bf81      	itttt	hi
    b178:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    b17c:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    b180:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    b184:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    b186:	6a66      	ldr	r6, [r4, #36]	; 0x24
    b188:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    b18a:	bf8c      	ite	hi
    b18c:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    b190:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    b194:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    b196:	4491      	add	r9, r2
			ticker->lazy_current--;
    b198:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    b19c:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    b19e:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    b1a2:	f8a4 c01e 	strh.w	ip, [r4, #30]
    b1a6:	e7af      	b.n	b108 <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    b1a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
    b1aa:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    b1ac:	48a0      	ldr	r0, [pc, #640]	; (b430 <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    b1ae:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    b1b0:	499e      	ldr	r1, [pc, #632]	; (b42c <ticker_job+0x534>)
    b1b2:	1871      	adds	r1, r6, r1
    b1b4:	4281      	cmp	r1, r0
	return 0;
    b1b6:	bf8e      	itee	hi
    b1b8:	2100      	movhi	r1, #0
		return 1;
    b1ba:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    b1bc:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    b1be:	4411      	add	r1, r2
			ticker->lazy_current++;
    b1c0:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    b1c4:	bf8c      	ite	hi
    b1c6:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    b1c8:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    b1ca:	440b      	add	r3, r1
			ticker->lazy_current++;
    b1cc:	f8a4 c01e 	strh.w	ip, [r4, #30]
    b1d0:	e79e      	b.n	b110 <ticker_job+0x218>
		ticker->req = ticker->ack;
    b1d2:	78a3      	ldrb	r3, [r4, #2]
    b1d4:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    b1d6:	786b      	ldrb	r3, [r5, #1]
    b1d8:	f89b 201c 	ldrb.w	r2, [fp, #28]
    b1dc:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    b1de:	bf01      	itttt	eq
    b1e0:	23ff      	moveq	r3, #255	; 0xff
    b1e2:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    b1e6:	2300      	moveq	r3, #0
    b1e8:	f8cb 3018 	streq.w	r3, [fp, #24]
    b1ec:	e7b8      	b.n	b160 <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    b1ee:	2104      	movs	r1, #4
    b1f0:	465b      	mov	r3, fp
    b1f2:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    b1f6:	2201      	movs	r2, #1
    b1f8:	4608      	mov	r0, r1
    b1fa:	47a0      	blx	r4
				pending = 1;
    b1fc:	2301      	movs	r3, #1
				user->middle = prev;
    b1fe:	70be      	strb	r6, [r7, #2]
				pending = 1;
    b200:	9307      	str	r3, [sp, #28]
    b202:	9b02      	ldr	r3, [sp, #8]
    b204:	3b01      	subs	r3, #1
    b206:	b2db      	uxtb	r3, r3
    b208:	9302      	str	r3, [sp, #8]
    b20a:	e6aa      	b.n	af62 <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    b20c:	f8db 3018 	ldr.w	r3, [fp, #24]
    b210:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    b212:	bf29      	itett	cs
    b214:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    b216:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    b218:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    b21c:	2300      	movcs	r3, #0
    b21e:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    b222:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    b224:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    b226:	b11b      	cbz	r3, b230 <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    b228:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    b22c:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    b230:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    b232:	9b04      	ldr	r3, [sp, #16]
		ticker->ticks_to_expire = 0;
    b234:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    b236:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    b23a:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    b23e:	f8d4 e004 	ldr.w	lr, [r4, #4]
    b242:	f1be 0f00 	cmp.w	lr, #0
    b246:	d030      	beq.n	b2aa <ticker_job+0x3b2>
    b248:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    b24a:	f8df c1e4 	ldr.w	ip, [pc, #484]	; b430 <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    b24e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b250:	6a21      	ldr	r1, [r4, #32]
    b252:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    b254:	4975      	ldr	r1, [pc, #468]	; (b42c <ticker_job+0x534>)
    b256:	1859      	adds	r1, r3, r1
    b258:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    b25a:	bf9f      	itttt	ls
    b25c:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    b260:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    b264:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    b268:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    b26a:	bf92      	itee	ls
    b26c:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    b26e:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    b270:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    b272:	4473      	add	r3, lr
			while (count--) {
    b274:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    b278:	441a      	add	r2, r3
			while (count--) {
    b27a:	d2e8      	bcs.n	b24e <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    b27c:	9b05      	ldr	r3, [sp, #20]
			ticker->ticks_to_expire = ticks_to_expire;
    b27e:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    b280:	f8db 1014 	ldr.w	r1, [fp, #20]
    b284:	eb03 0209 	add.w	r2, r3, r9
    b288:	4620      	mov	r0, r4
    b28a:	f7ff fdb6 	bl	adfa <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    b28e:	8ba3      	ldrh	r3, [r4, #28]
    b290:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    b292:	2300      	movs	r3, #0
    b294:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    b296:	9b04      	ldr	r3, [sp, #16]
    b298:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    b29c:	7863      	ldrb	r3, [r4, #1]
    b29e:	3301      	adds	r3, #1
    b2a0:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    b2a2:	eba8 0805 	sub.w	r8, r8, r5
    b2a6:	46b2      	mov	sl, r6
    b2a8:	e66c      	b.n	af84 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    b2aa:	78a3      	ldrb	r3, [r4, #2]
    b2ac:	7063      	strb	r3, [r4, #1]
    b2ae:	4656      	mov	r6, sl
    b2b0:	e7f7      	b.n	b2a2 <ticker_job+0x3aa>
		user = &users[count_user];
    b2b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b2b4:	9a01      	ldr	r2, [sp, #4]
    b2b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    b2ba:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
    b2bc:	685b      	ldr	r3, [r3, #4]
    b2be:	930a      	str	r3, [sp, #40]	; 0x28
		user_ops_first = user->first;
    b2c0:	9b04      	ldr	r3, [sp, #16]
    b2c2:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    b2c6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    b2ca:	f000 808e 	beq.w	b3ea <ticker_job+0x4f2>
				ticker = &node[id_insert];
    b2ce:	fa0f f38a 	sxth.w	r3, sl
    b2d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b2d6:	9a08      	ldr	r2, [sp, #32]
				insert_head = ticker->next;
    b2d8:	46d0      	mov	r8, sl
    b2da:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    b2de:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    b2e2:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    b2e4:	f8db 3000 	ldr.w	r3, [fp]
    b2e8:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker->next = TICKER_NULL;
    b2ea:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    b2ec:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    b2ee:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    b2f0:	8be3      	ldrh	r3, [r4, #30]
    b2f2:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    b2f4:	bf86      	itte	hi
    b2f6:	1a9b      	subhi	r3, r3, r2
    b2f8:	b29b      	uxthhi	r3, r3
		skip = 0;
    b2fa:	2300      	movls	r3, #0
    b2fc:	930c      	str	r3, [sp, #48]	; 0x30
	ticker_new = &node[id];
    b2fe:	fa0f f388 	sxth.w	r3, r8
    b302:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b306:	00db      	lsls	r3, r3, #3
    b308:	9311      	str	r3, [sp, #68]	; 0x44
    b30a:	9b11      	ldr	r3, [sp, #68]	; 0x44
	node = &instance->node[0];
    b30c:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    b310:	f8db 0018 	ldr.w	r0, [fp, #24]
    b314:	9005      	str	r0, [sp, #20]
	ticker_new = &node[id];
    b316:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    b31a:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    b31c:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    b320:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    b324:	9309      	str	r3, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
    b326:	9006      	str	r0, [sp, #24]
	while ((current != TICKER_NULL) &&
    b328:	2bff      	cmp	r3, #255	; 0xff
    b32a:	d007      	beq.n	b33c <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    b32c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    b330:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    b334:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    b336:	4281      	cmp	r1, r0
    b338:	f200 80a9 	bhi.w	b48e <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    b33c:	f8de 0018 	ldr.w	r0, [lr, #24]
    b340:	900d      	str	r0, [sp, #52]	; 0x34
	collide = ticker_by_slot_get(&node[0], current,
    b342:	eb01 0c00 	add.w	ip, r1, r0
    b346:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    b348:	2eff      	cmp	r6, #255	; 0xff
    b34a:	f040 80ae 	bne.w	b4aa <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    b34e:	980d      	ldr	r0, [sp, #52]	; 0x34
    b350:	b130      	cbz	r0, b360 <ticker_job+0x468>
    b352:	9805      	ldr	r0, [sp, #20]
    b354:	4281      	cmp	r1, r0
    b356:	f0c0 80bf 	bcc.w	b4d8 <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    b35a:	2eff      	cmp	r6, #255	; 0xff
    b35c:	f040 8185 	bne.w	b66a <ticker_job+0x772>
		if (previous == current) {
    b360:	9809      	ldr	r0, [sp, #36]	; 0x24
		ticker_new->ticks_to_expire = ticks_to_expire;
    b362:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    b366:	4283      	cmp	r3, r0
			node[previous].next = id;
    b368:	bf18      	it	ne
    b36a:	f9bd 0024 	ldrshne.w	r0, [sp, #36]	; 0x24
		ticker_new->next = current;
    b36e:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    b372:	bf16      	itet	ne
    b374:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    b378:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    b37c:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    b380:	2bff      	cmp	r3, #255	; 0xff
    b382:	d006      	beq.n	b392 <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    b384:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b388:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    b38c:	689a      	ldr	r2, [r3, #8]
    b38e:	1a51      	subs	r1, r2, r1
    b390:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    b392:	78a3      	ldrb	r3, [r4, #2]
    b394:	3301      	adds	r3, #1
    b396:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    b398:	2100      	movs	r1, #0
			if (user_op) {
    b39a:	2d00      	cmp	r5, #0
    b39c:	d093      	beq.n	b2c6 <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    b39e:	4628      	mov	r0, r5
    b3a0:	f7ff fd49 	bl	ae36 <ticker_job_op_cb>
    b3a4:	e78f      	b.n	b2c6 <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    b3a6:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    b3aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b3ac:	011b      	lsls	r3, r3, #4
    b3ae:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    b3b0:	f109 0201 	add.w	r2, r9, #1
    b3b4:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    b3b8:	9a04      	ldr	r2, [sp, #16]
    b3ba:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    b3bc:	454a      	cmp	r2, r9
    b3be:	bf08      	it	eq
    b3c0:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    b3c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b3c6:	5cd3      	ldrb	r3, [r2, r3]
    b3c8:	2b03      	cmp	r3, #3
    b3ca:	d10e      	bne.n	b3ea <ticker_job+0x4f2>
				id_insert = user_op->id;
    b3cc:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    b3d0:	9b08      	ldr	r3, [sp, #32]
    b3d2:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    b3d6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    b3da:	7862      	ldrb	r2, [r4, #1]
    b3dc:	78a3      	ldrb	r3, [r4, #2]
    b3de:	429a      	cmp	r2, r3
    b3e0:	d009      	beq.n	b3f6 <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    b3e2:	2101      	movs	r1, #1
    b3e4:	4628      	mov	r0, r5
    b3e6:	f7ff fd26 	bl	ae36 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    b3ea:	9b04      	ldr	r3, [sp, #16]
    b3ec:	789b      	ldrb	r3, [r3, #2]
    b3ee:	454b      	cmp	r3, r9
    b3f0:	d1d9      	bne.n	b3a6 <ticker_job+0x4ae>
    b3f2:	9b01      	ldr	r3, [sp, #4]
    b3f4:	e5e6      	b.n	afc4 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    b3f6:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    b3f8:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    b3fc:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    b3fe:	692b      	ldr	r3, [r5, #16]
    b400:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    b402:	8aab      	ldrh	r3, [r5, #20]
    b404:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    b406:	69ab      	ldr	r3, [r5, #24]
    b408:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    b40a:	69eb      	ldr	r3, [r5, #28]
    b40c:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    b40e:	6a2b      	ldr	r3, [r5, #32]
    b410:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    b412:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    b414:	68ab      	ldr	r3, [r5, #8]
    b416:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    b418:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    b41a:	686a      	ldr	r2, [r5, #4]
    b41c:	4620      	mov	r0, r4
    b41e:	f7ff fcec 	bl	adfa <ticks_to_expire_prep>
	ticker->force = 1;
    b422:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    b424:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    b426:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    b428:	70e3      	strb	r3, [r4, #3]
    b42a:	e75b      	b.n	b2e4 <ticker_job+0x3ec>
    b42c:	ff172b5a 	.word	0xff172b5a
    b430:	7f172b59 	.word	0x7f172b59
    b434:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    b438:	6860      	ldr	r0, [r4, #4]
    b43a:	2800      	cmp	r0, #0
    b43c:	d07b      	beq.n	b536 <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    b43e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    b440:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    b442:	4b8d      	ldr	r3, [pc, #564]	; (b678 <ticker_job+0x780>)
	ticker->remainder_current += ticker->remainder_periodic;
    b444:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    b446:	498d      	ldr	r1, [pc, #564]	; (b67c <ticker_job+0x784>)
    b448:	18d3      	adds	r3, r2, r3
    b44a:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    b44c:	bf9c      	itt	ls
    b44e:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    b452:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    b456:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    b458:	bf8b      	itete	hi
    b45a:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    b45c:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    b460:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    b462:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    b464:	4403      	add	r3, r0
		return 1;
    b466:	bf98      	it	ls
    b468:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    b46a:	4413      	add	r3, r2
			ticker->lazy_current++;
    b46c:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    b46e:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    b470:	3201      	adds	r2, #1
    b472:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    b474:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    b476:	4293      	cmp	r3, r2
    b478:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    b47c:	bf89      	itett	hi
    b47e:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    b480:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    b482:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    b484:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    b486:	bf9c      	itt	ls
    b488:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    b48a:	60a1      	strls	r1, [r4, #8]
    b48c:	e73d      	b.n	b30a <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    b48e:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    b490:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    b492:	b946      	cbnz	r6, b4a6 <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    b494:	9f05      	ldr	r7, [sp, #20]
    b496:	42b8      	cmp	r0, r7
    b498:	d200      	bcs.n	b49c <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    b49a:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    b49c:	9309      	str	r3, [sp, #36]	; 0x24
    b49e:	9605      	str	r6, [sp, #20]
    b4a0:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    b4a4:	e740      	b.n	b328 <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    b4a6:	9306      	str	r3, [sp, #24]
    b4a8:	e7f8      	b.n	b49c <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    b4aa:	b230      	sxth	r0, r6
    b4ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    b4b0:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    b4b4:	970e      	str	r7, [sp, #56]	; 0x38
		ticks_to_expire = ticker->ticks_to_expire;
    b4b6:	68bf      	ldr	r7, [r7, #8]
    b4b8:	970f      	str	r7, [sp, #60]	; 0x3c
		if (ticks_slot <= ticks_to_expire) {
    b4ba:	4567      	cmp	r7, ip
    b4bc:	d20a      	bcs.n	b4d4 <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    b4be:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    b4c0:	69bf      	ldr	r7, [r7, #24]
    b4c2:	2f00      	cmp	r7, #0
    b4c4:	f47f af43 	bne.w	b34e <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    b4c8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    b4ca:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    b4ce:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    b4d2:	e739      	b.n	b348 <ticker_job+0x450>
			return TICKER_NULL;
    b4d4:	26ff      	movs	r6, #255	; 0xff
    b4d6:	e73a      	b.n	b34e <ticker_job+0x456>
	while (id_insert !=
    b4d8:	9b06      	ldr	r3, [sp, #24]
    b4da:	4598      	cmp	r8, r3
    b4dc:	f43f af59 	beq.w	b392 <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    b4e0:	9b06      	ldr	r3, [sp, #24]
    b4e2:	2bff      	cmp	r3, #255	; 0xff
    b4e4:	d0a8      	beq.n	b438 <ticker_job+0x540>
    b4e6:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    b4e8:	b233      	sxth	r3, r6
    b4ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b4ee:	9305      	str	r3, [sp, #20]
    b4f0:	9a05      	ldr	r2, [sp, #20]
    b4f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b4f4:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    b4f8:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    b4fa:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    b4fc:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    b4fe:	bf88      	it	hi
    b500:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    b502:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    b504:	bf8c      	ite	hi
    b506:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    b508:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    b50a:	2a00      	cmp	r2, #0
    b50c:	d094      	beq.n	b438 <ticker_job+0x540>
    b50e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b510:	4293      	cmp	r3, r2
    b512:	d891      	bhi.n	b438 <ticker_job+0x540>
			    skip_collide <= skip &&
    b514:	78fa      	ldrb	r2, [r7, #3]
    b516:	78e3      	ldrb	r3, [r4, #3]
    b518:	429a      	cmp	r2, r3
    b51a:	d28d      	bcs.n	b438 <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    b51c:	4631      	mov	r1, r6
    b51e:	4658      	mov	r0, fp
    b520:	f7ff fc3f 	bl	ada2 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    b524:	78bb      	ldrb	r3, [r7, #2]
    b526:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    b528:	9a05      	ldr	r2, [sp, #20]
    b52a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				ticker_collide->ticks_to_expire =
    b52c:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    b52e:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    b532:	46b2      	mov	sl, r6
    b534:	e6e9      	b.n	b30a <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    b536:	2101      	movs	r1, #1
    b538:	e72f      	b.n	b39a <ticker_job+0x4a2>
		user = &users[count_user];
    b53a:	9b01      	ldr	r3, [sp, #4]
    b53c:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    b540:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    b542:	786b      	ldrb	r3, [r5, #1]
    b544:	78ea      	ldrb	r2, [r5, #3]
    b546:	429a      	cmp	r2, r3
    b548:	d102      	bne.n	b550 <ticker_job+0x658>
    b54a:	3c01      	subs	r4, #1
    b54c:	b2e4      	uxtb	r4, r4
    b54e:	e551      	b.n	aff4 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    b550:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    b554:	011b      	lsls	r3, r3, #4
    b556:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    b558:	5cf3      	ldrb	r3, [r6, r3]
    b55a:	2b01      	cmp	r3, #1
    b55c:	d025      	beq.n	b5aa <ticker_job+0x6b2>
    b55e:	2b02      	cmp	r3, #2
    b560:	d12a      	bne.n	b5b8 <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    b562:	f8d2 c004 	ldr.w	ip, [r2, #4]
    b566:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    b568:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    b56c:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    b570:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    b574:	28ff      	cmp	r0, #255	; 0xff
    b576:	d004      	beq.n	b582 <ticker_job+0x68a>
    b578:	6819      	ldr	r1, [r3, #0]
    b57a:	f8db 7014 	ldr.w	r7, [fp, #20]
    b57e:	42b9      	cmp	r1, r7
    b580:	d023      	beq.n	b5ca <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    b582:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    b586:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    b58a:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    b58c:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    b58e:	29ff      	cmp	r1, #255	; 0xff
    b590:	d007      	beq.n	b5a2 <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    b592:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    b596:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    b59a:	6987      	ldr	r7, [r0, #24]
    b59c:	6880      	ldr	r0, [r0, #8]
    b59e:	b1df      	cbz	r7, b5d8 <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    b5a0:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    b5a2:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    b5a6:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    b5aa:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    b5ac:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    b5b0:	b113      	cbz	r3, b5b8 <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    b5b2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    b5b4:	2000      	movs	r0, #0
    b5b6:	4798      	blx	r3
			first = user->first + 1;
    b5b8:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    b5ba:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    b5bc:	3301      	adds	r3, #1
    b5be:	b2db      	uxtb	r3, r3
				first = 0;
    b5c0:	429a      	cmp	r2, r3
    b5c2:	bf08      	it	eq
    b5c4:	2300      	moveq	r3, #0
			user->first = first;
    b5c6:	706b      	strb	r3, [r5, #1]
    b5c8:	e7bb      	b.n	b542 <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    b5ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    b5ce:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    b5d2:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    b5d6:	e7da      	b.n	b58e <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    b5d8:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    b5da:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    b5de:	e7d6      	b.n	b58e <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    b5e0:	9b03      	ldr	r3, [sp, #12]
    b5e2:	2bff      	cmp	r3, #255	; 0xff
    b5e4:	d107      	bne.n	b5f6 <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    b5e6:	f00b fbcf 	bl	16d88 <cntr_cnt_get>
    b5ea:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    b5ec:	f00b fba6 	bl	16d3c <cntr_start>
    b5f0:	b908      	cbnz	r0, b5f6 <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    b5f2:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    b5f6:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    b5fa:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    b5fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    b602:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    b606:	260a      	movs	r6, #10
    b608:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    b60a:	f00b fbbd 	bl	16d88 <cntr_cnt_get>
		cc = instance->ticks_current;
    b60e:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    b612:	1b03      	subs	r3, r0, r4
    b614:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    b618:	3303      	adds	r3, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
    b61a:	42ab      	cmp	r3, r5
    b61c:	bf2c      	ite	cs
    b61e:	18e4      	addcs	r4, r4, r3
    b620:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    b622:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    b626:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    b628:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    b62c:	4620      	mov	r0, r4
    b62e:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    b630:	f00b fbaa 	bl	16d88 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    b634:	1bc0      	subs	r0, r0, r7
    b636:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b63a:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    b63c:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    b63e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    b642:	42a0      	cmp	r0, r4
    b644:	f67f ace8 	bls.w	b018 <ticker_job+0x120>
		LL_ASSERT(i);
    b648:	3e01      	subs	r6, #1
    b64a:	d1de      	bne.n	b60a <ticker_job+0x712>
    b64c:	4040      	eors	r0, r0
    b64e:	f380 8811 	msr	BASEPRI, r0
    b652:	f04f 0004 	mov.w	r0, #4
    b656:	df02      	svc	2
	instance->job_guard = 0;
    b658:	2300      	movs	r3, #0
    b65a:	f88b 301e 	strb.w	r3, [fp, #30]
    b65e:	e4d1      	b.n	b004 <ticker_job+0x10c>
	if (!pending) {
    b660:	2b00      	cmp	r3, #0
    b662:	d1f9      	bne.n	b658 <ticker_job+0x760>
		flag_compare_update = 1;
    b664:	2301      	movs	r3, #1
    b666:	9302      	str	r3, [sp, #8]
    b668:	e4bb      	b.n	afe2 <ticker_job+0xea>
	while (id_insert !=
    b66a:	45b0      	cmp	r8, r6
    b66c:	f47f af3c 	bne.w	b4e8 <ticker_job+0x5f0>
    b670:	e68f      	b.n	b392 <ticker_job+0x49a>
}
    b672:	b013      	add	sp, #76	; 0x4c
    b674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b678:	ff172b5a 	.word	0xff172b5a
    b67c:	7f172b59 	.word	0x7f172b59

0000b680 <ticker_init>:
{
    b680:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    b682:	4d1a      	ldr	r5, [pc, #104]	; (b6ec <ticker_init+0x6c>)
{
    b684:	9f05      	ldr	r7, [sp, #20]
    b686:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    b68a:	262c      	movs	r6, #44	; 0x2c
    b68c:	4346      	muls	r6, r0
    b68e:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    b692:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    b694:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    b698:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    b69a:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    b69e:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    b6a2:	3b01      	subs	r3, #1
    b6a4:	b2db      	uxtb	r3, r3
    b6a6:	2bff      	cmp	r3, #255	; 0xff
    b6a8:	d111      	bne.n	b6ce <ticker_init+0x4e>
	if (count_op) {
    b6aa:	b9ec      	cbnz	r4, b6e8 <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    b6ac:	222c      	movs	r2, #44	; 0x2c
    b6ae:	fb02 5200 	mla	r2, r2, r0, r5
    b6b2:	9908      	ldr	r1, [sp, #32]
    b6b4:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    b6b6:	9909      	ldr	r1, [sp, #36]	; 0x24
    b6b8:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    b6ba:	990a      	ldr	r1, [sp, #40]	; 0x28
    b6bc:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    b6be:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    b6c0:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    b6c2:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    b6c4:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    b6c6:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    b6c8:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    b6ca:	4620      	mov	r0, r4
    b6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    b6ce:	b21a      	sxth	r2, r3
    b6d0:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    b6d4:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    b6d6:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    b6da:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    b6de:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    b6e0:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    b6e4:	b2e4      	uxtb	r4, r4
    b6e6:	e7dc      	b.n	b6a2 <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    b6e8:	2001      	movs	r0, #1
}
    b6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b6ec:	20000ab0 	.word	0x20000ab0

0000b6f0 <ticker_trigger>:
	instance = &_instance[instance_index];
    b6f0:	4a07      	ldr	r2, [pc, #28]	; (b710 <ticker_trigger+0x20>)
    b6f2:	212c      	movs	r1, #44	; 0x2c
    b6f4:	fb00 2301 	mla	r3, r0, r1, r2
{
    b6f8:	b410      	push	{r4}
	if (instance->sched_cb) {
    b6fa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    b6fc:	b12c      	cbz	r4, b70a <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    b6fe:	46a4      	mov	ip, r4
    b700:	2201      	movs	r2, #1
    b702:	2103      	movs	r1, #3
    b704:	2002      	movs	r0, #2
}
    b706:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    b708:	4760      	bx	ip
}
    b70a:	bc10      	pop	{r4}
    b70c:	4770      	bx	lr
    b70e:	bf00      	nop
    b710:	20000ab0 	.word	0x20000ab0

0000b714 <ticker_start>:
{
    b714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    b718:	4f25      	ldr	r7, [pc, #148]	; (b7b0 <ticker_start+0x9c>)
    b71a:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    b71e:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    b720:	fb08 7000 	mla	r0, r8, r0, r7
    b724:	fa0f fc81 	sxth.w	ip, r1
    b728:	f8d0 e004 	ldr.w	lr, [r0, #4]
    b72c:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    b730:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    b734:	78f4      	ldrb	r4, [r6, #3]
    b736:	1c65      	adds	r5, r4, #1
    b738:	b2ed      	uxtb	r5, r5
		last = 0;
    b73a:	45ae      	cmp	lr, r5
    b73c:	bf98      	it	ls
    b73e:	2500      	movls	r5, #0
	if (last == user->first) {
    b740:	f896 e001 	ldrb.w	lr, [r6, #1]
    b744:	45ae      	cmp	lr, r5
    b746:	d02f      	beq.n	b7a8 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    b748:	f8d6 c004 	ldr.w	ip, [r6, #4]
    b74c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    b750:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    b754:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    b758:	f04f 0a03 	mov.w	sl, #3
    b75c:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    b760:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    b762:	9b08      	ldr	r3, [sp, #32]
    b764:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    b766:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b768:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    b76a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b76c:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    b76e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b770:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    b772:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    b776:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    b778:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b77a:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    b77c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b77e:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    b780:	2302      	movs	r3, #2
    b782:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    b784:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b786:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    b788:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    b78a:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    b78c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    b78e:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b790:	6a45      	ldr	r5, [r0, #36]	; 0x24
    b792:	6a03      	ldr	r3, [r0, #32]
    b794:	4608      	mov	r0, r1
    b796:	4798      	blx	r3
    b798:	fb09 7308 	mla	r3, r9, r8, r7
    b79c:	2200      	movs	r2, #0
    b79e:	2104      	movs	r1, #4
    b7a0:	47a8      	blx	r5
	return user_op->status;
    b7a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    b7a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    b7a8:	2001      	movs	r0, #1
}
    b7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b7ae:	bf00      	nop
    b7b0:	20000ab0 	.word	0x20000ab0

0000b7b4 <ticker_update>:
{
    b7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    b7b8:	f8df 8090 	ldr.w	r8, [pc, #144]	; b84c <ticker_update+0x98>
    b7bc:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    b7c0:	fb0a 8e00 	mla	lr, sl, r0, r8
    b7c4:	b20f      	sxth	r7, r1
    b7c6:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    b7ca:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    b7cc:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    b7d0:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    b7d4:	78c4      	ldrb	r4, [r0, #3]
    b7d6:	1c66      	adds	r6, r4, #1
    b7d8:	b2f6      	uxtb	r6, r6
		last = 0;
    b7da:	42b5      	cmp	r5, r6
    b7dc:	bf98      	it	ls
    b7de:	2600      	movls	r6, #0
	if (last == user->first) {
    b7e0:	7845      	ldrb	r5, [r0, #1]
    b7e2:	42b5      	cmp	r5, r6
    b7e4:	d02f      	beq.n	b846 <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    b7e6:	f8d0 c004 	ldr.w	ip, [r0, #4]
    b7ea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    b7ee:	0125      	lsls	r5, r4, #4
    b7f0:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    b7f4:	2704      	movs	r7, #4
    b7f6:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    b7fa:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    b7fc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    b800:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    b802:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    b806:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    b808:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    b80c:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    b80e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    b812:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    b814:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    b818:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    b81a:	2302      	movs	r3, #2
    b81c:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    b81e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b820:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    b822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    b824:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    b826:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    b828:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b82a:	f8de 3020 	ldr.w	r3, [lr, #32]
    b82e:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    b832:	4608      	mov	r0, r1
    b834:	4798      	blx	r3
    b836:	fb09 830a 	mla	r3, r9, sl, r8
    b83a:	2200      	movs	r2, #0
    b83c:	4639      	mov	r1, r7
    b83e:	47a8      	blx	r5
	return user_op->status;
    b840:	6a60      	ldr	r0, [r4, #36]	; 0x24
    b842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    b846:	2001      	movs	r0, #1
}
    b848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b84c:	20000ab0 	.word	0x20000ab0

0000b850 <ticker_stop>:
{
    b850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    b854:	f8df 906c 	ldr.w	r9, [pc, #108]	; b8c4 <ticker_stop+0x74>
    b858:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    b85c:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    b860:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    b862:	f8de 0004 	ldr.w	r0, [lr, #4]
    b866:	b20e      	sxth	r6, r1
    b868:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    b86c:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    b870:	78fc      	ldrb	r4, [r7, #3]
    b872:	1c65      	adds	r5, r4, #1
    b874:	b2ed      	uxtb	r5, r5
		last = 0;
    b876:	42a8      	cmp	r0, r5
    b878:	bf98      	it	ls
    b87a:	2500      	movls	r5, #0
	if (last == user->first) {
    b87c:	7878      	ldrb	r0, [r7, #1]
    b87e:	42a8      	cmp	r0, r5
    b880:	d01d      	beq.n	b8be <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    b882:	6878      	ldr	r0, [r7, #4]
    b884:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    b888:	0124      	lsls	r4, r4, #4
    b88a:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    b88c:	f04f 0c05 	mov.w	ip, #5
    b890:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    b894:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    b896:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    b898:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    b89a:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    b89c:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    b89e:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    b8a0:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b8a2:	f8de 3020 	ldr.w	r3, [lr, #32]
    b8a6:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    b8aa:	4608      	mov	r0, r1
    b8ac:	4798      	blx	r3
    b8ae:	fb08 930a 	mla	r3, r8, sl, r9
    b8b2:	2200      	movs	r2, #0
    b8b4:	2104      	movs	r1, #4
    b8b6:	47a0      	blx	r4
	return user_op->status;
    b8b8:	6a70      	ldr	r0, [r6, #36]	; 0x24
    b8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    b8be:	2001      	movs	r0, #1
}
    b8c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b8c4:	20000ab0 	.word	0x20000ab0

0000b8c8 <ticker_next_slot_get>:
{
    b8c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    b8cc:	f8df 8078 	ldr.w	r8, [pc, #120]	; b948 <ticker_next_slot_get+0x80>
    b8d0:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    b8d4:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    b8d6:	fb0a 8000 	mla	r0, sl, r0, r8
    b8da:	fa0f fe81 	sxth.w	lr, r1
    b8de:	6845      	ldr	r5, [r0, #4]
    b8e0:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    b8e4:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    b8e8:	78fc      	ldrb	r4, [r7, #3]
    b8ea:	1c66      	adds	r6, r4, #1
    b8ec:	b2f6      	uxtb	r6, r6
		last = 0;
    b8ee:	42b5      	cmp	r5, r6
    b8f0:	bf98      	it	ls
    b8f2:	2600      	movls	r6, #0
	if (last == user->first) {
    b8f4:	787d      	ldrb	r5, [r7, #1]
    b8f6:	42b5      	cmp	r5, r6
    b8f8:	d023      	beq.n	b942 <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    b8fa:	f8d7 c004 	ldr.w	ip, [r7, #4]
    b8fe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    b902:	0125      	lsls	r5, r4, #4
    b904:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    b908:	f04f 0e02 	mov.w	lr, #2
    b90c:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    b910:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    b912:	9b08      	ldr	r3, [sp, #32]
    b914:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    b916:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b918:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    b91a:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    b91c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    b91e:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    b920:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    b922:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    b926:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    b928:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b92a:	6a45      	ldr	r5, [r0, #36]	; 0x24
    b92c:	6a03      	ldr	r3, [r0, #32]
    b92e:	4608      	mov	r0, r1
    b930:	4798      	blx	r3
    b932:	fb09 830a 	mla	r3, r9, sl, r8
    b936:	2200      	movs	r2, #0
    b938:	2104      	movs	r1, #4
    b93a:	47a8      	blx	r5
	return user_op->status;
    b93c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    b93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    b942:	2001      	movs	r0, #1
}
    b944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b948:	20000ab0 	.word	0x20000ab0

0000b94c <ticker_job_idle_get>:
{
    b94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    b950:	f8df 906c 	ldr.w	r9, [pc, #108]	; b9c0 <ticker_job_idle_get+0x74>
    b954:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    b958:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    b95c:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    b95e:	f8de 0004 	ldr.w	r0, [lr, #4]
    b962:	b20e      	sxth	r6, r1
    b964:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    b968:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    b96c:	78fc      	ldrb	r4, [r7, #3]
    b96e:	1c65      	adds	r5, r4, #1
    b970:	b2ed      	uxtb	r5, r5
		last = 0;
    b972:	42a8      	cmp	r0, r5
    b974:	bf98      	it	ls
    b976:	2500      	movls	r5, #0
	if (last == user->first) {
    b978:	7878      	ldrb	r0, [r7, #1]
    b97a:	42a8      	cmp	r0, r5
    b97c:	d01d      	beq.n	b9ba <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    b97e:	6878      	ldr	r0, [r7, #4]
    b980:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    b984:	0124      	lsls	r4, r4, #4
    b986:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    b988:	f04f 0c01 	mov.w	ip, #1
    b98c:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    b990:	20ff      	movs	r0, #255	; 0xff
    b992:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    b994:	2002      	movs	r0, #2
    b996:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    b998:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    b99a:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    b99c:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b99e:	f8de 3020 	ldr.w	r3, [lr, #32]
    b9a2:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    b9a6:	4608      	mov	r0, r1
    b9a8:	4798      	blx	r3
    b9aa:	fb08 930a 	mla	r3, r8, sl, r9
    b9ae:	2200      	movs	r2, #0
    b9b0:	2104      	movs	r1, #4
    b9b2:	47a0      	blx	r4
	return user_op->status;
    b9b4:	6a70      	ldr	r0, [r6, #36]	; 0x24
    b9b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    b9ba:	2001      	movs	r0, #1
}
    b9bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b9c0:	20000ab0 	.word	0x20000ab0

0000b9c4 <ticker_job_sched>:
{
    b9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b9c8:	4c08      	ldr	r4, [pc, #32]	; (b9ec <ticker_job_sched+0x28>)
    b9ca:	252c      	movs	r5, #44	; 0x2c
    b9cc:	fb05 4300 	mla	r3, r5, r0, r4
{
    b9d0:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b9d2:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    b9d4:	6a1b      	ldr	r3, [r3, #32]
    b9d6:	4608      	mov	r0, r1
    b9d8:	4798      	blx	r3
    b9da:	fb06 4305 	mla	r3, r6, r5, r4
    b9de:	46bc      	mov	ip, r7
    b9e0:	2200      	movs	r2, #0
    b9e2:	2104      	movs	r1, #4
}
    b9e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b9e8:	4760      	bx	ip
    b9ea:	bf00      	nop
    b9ec:	20000ab0 	.word	0x20000ab0

0000b9f0 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    b9f0:	f00b b9ca 	b.w	16d88 <cntr_cnt_get>

0000b9f4 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    b9f4:	1a40      	subs	r0, r0, r1
}
    b9f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b9fa:	4770      	bx	lr

0000b9fc <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    b9fc:	b508      	push	{r3, lr}
    b9fe:	4603      	mov	r3, r0
	if (addr_type > 1) {
    ba00:	2b01      	cmp	r3, #1
{
    ba02:	4608      	mov	r0, r1
	if (addr_type > 1) {
    ba04:	d80e      	bhi.n	ba24 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    ba06:	b133      	cbz	r3, ba16 <ll_addr_get+0x1a>
		if (bdaddr) {
    ba08:	b119      	cbz	r1, ba12 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    ba0a:	2206      	movs	r2, #6
    ba0c:	4906      	ldr	r1, [pc, #24]	; (ba28 <ll_addr_get+0x2c>)
    ba0e:	f7f4 ff6c 	bl	8ea <memcpy>
		}

		return rnd_addr;
    ba12:	4805      	ldr	r0, [pc, #20]	; (ba28 <ll_addr_get+0x2c>)
    ba14:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    ba16:	b119      	cbz	r1, ba20 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    ba18:	2206      	movs	r2, #6
    ba1a:	4904      	ldr	r1, [pc, #16]	; (ba2c <ll_addr_get+0x30>)
    ba1c:	f7f4 ff65 	bl	8ea <memcpy>
	}

	return pub_addr;
    ba20:	4802      	ldr	r0, [pc, #8]	; (ba2c <ll_addr_get+0x30>)
}
    ba22:	bd08      	pop	{r3, pc}
		return NULL;
    ba24:	2000      	movs	r0, #0
    ba26:	bd08      	pop	{r3, pc}
    ba28:	20000b0e 	.word	0x20000b0e
    ba2c:	20000b08 	.word	0x20000b08

0000ba30 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    ba30:	b570      	push	{r4, r5, r6, lr}
    ba32:	4606      	mov	r6, r0
    ba34:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    ba36:	f008 f89d 	bl	13b74 <ll_adv_is_enabled>
    ba3a:	4604      	mov	r4, r0
    ba3c:	b110      	cbz	r0, ba44 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    ba3e:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    ba40:	4620      	mov	r0, r4
    ba42:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    ba44:	f008 f8ac 	bl	13ba0 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    ba48:	f010 0f06 	tst.w	r0, #6
    ba4c:	d1f7      	bne.n	ba3e <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    ba4e:	2206      	movs	r2, #6
    ba50:	4629      	mov	r1, r5
	if (addr_type) {
    ba52:	b11e      	cbz	r6, ba5c <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    ba54:	4802      	ldr	r0, [pc, #8]	; (ba60 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    ba56:	f7f4 ff48 	bl	8ea <memcpy>
    ba5a:	e7f1      	b.n	ba40 <ll_addr_set+0x10>
    ba5c:	4801      	ldr	r0, [pc, #4]	; (ba64 <ll_addr_set+0x34>)
    ba5e:	e7fa      	b.n	ba56 <ll_addr_set+0x26>
    ba60:	20000b0e 	.word	0x20000b0e
    ba64:	20000b08 	.word	0x20000b08

0000ba68 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    ba68:	2300      	movs	r3, #0
    ba6a:	7003      	strb	r3, [r0, #0]
	*max = 0;
    ba6c:	700b      	strb	r3, [r1, #0]
    ba6e:	4770      	bx	lr

0000ba70 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    ba70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ba72:	4607      	mov	r7, r0
    ba74:	460e      	mov	r6, r1
	while (len) {
    ba76:	460c      	mov	r4, r1
    ba78:	1b35      	subs	r5, r6, r4
    ba7a:	443d      	add	r5, r7
    ba7c:	b18c      	cbz	r4, baa2 <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    ba7e:	f7f6 fca7 	bl	23d0 <sys_rand32_get>

		if (len >= sizeof(v)) {
    ba82:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    ba84:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    ba86:	d907      	bls.n	ba98 <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    ba88:	2204      	movs	r2, #4
    ba8a:	eb0d 0102 	add.w	r1, sp, r2
    ba8e:	4628      	mov	r0, r5
    ba90:	f7f4 ff2b 	bl	8ea <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    ba94:	3c04      	subs	r4, #4
    ba96:	e7ef      	b.n	ba78 <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    ba98:	4622      	mov	r2, r4
    ba9a:	a901      	add	r1, sp, #4
    ba9c:	4628      	mov	r0, r5
    ba9e:	f7f4 ff24 	bl	8ea <memcpy>
			break;
		}
	}

	return 0;
}
    baa2:	2000      	movs	r0, #0
    baa4:	b003      	add	sp, #12
    baa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000baa8 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    baa8:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    baaa:	2300      	movs	r3, #0
    baac:	f00b f9a0 	bl	16df0 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    bab0:	2000      	movs	r0, #0
    bab2:	bd08      	pop	{r3, pc}

0000bab4 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    bab4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    bab6:	4802      	ldr	r0, [pc, #8]	; (bac0 <_hci_driver_init+0xc>)
    bab8:	f7f9 fb68 	bl	518c <bt_hci_driver_register>

	return 0;
}
    babc:	2000      	movs	r0, #0
    babe:	bd08      	pop	{r3, pc}
    bac0:	00021268 	.word	0x00021268

0000bac4 <hci_driver_send>:
{
    bac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!buf->len) {
    bac6:	8983      	ldrh	r3, [r0, #12]
{
    bac8:	4605      	mov	r5, r0
	if (!buf->len) {
    baca:	b1d3      	cbz	r3, bb02 <hci_driver_send+0x3e>
	switch (type) {
    bacc:	7d03      	ldrb	r3, [r0, #20]
    bace:	b18b      	cbz	r3, baf4 <hci_driver_send+0x30>
    bad0:	2b02      	cmp	r3, #2
    bad2:	d116      	bne.n	bb02 <hci_driver_send+0x3e>
	err = hci_acl_handle(buf, &evt);
    bad4:	a901      	add	r1, sp, #4
    bad6:	f001 f9cd 	bl	ce74 <hci_acl_handle>
    bada:	4604      	mov	r4, r0
	if (evt) {
    badc:	9801      	ldr	r0, [sp, #4]
    bade:	b108      	cbz	r0, bae4 <hci_driver_send+0x20>
		bt_recv_prio(evt);
    bae0:	f7f9 fac8 	bl	5074 <bt_recv_prio>
	if (!err) {
    bae4:	b91c      	cbnz	r4, baee <hci_driver_send+0x2a>
		net_buf_unref(buf);
    bae6:	4628      	mov	r0, r5
    bae8:	f00c f812 	bl	17b10 <net_buf_unref>
    baec:	2400      	movs	r4, #0
}
    baee:	4620      	mov	r0, r4
    baf0:	b003      	add	sp, #12
    baf2:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf);
    baf4:	f000 fc12 	bl	c31c <hci_cmd_handle>
	if (evt) {
    baf8:	2800      	cmp	r0, #0
    bafa:	d0f4      	beq.n	bae6 <hci_driver_send+0x22>
		bt_recv_prio(evt);
    bafc:	f7f9 faba 	bl	5074 <bt_recv_prio>
    bb00:	e7f1      	b.n	bae6 <hci_driver_send+0x22>
		return -EINVAL;
    bb02:	f06f 0415 	mvn.w	r4, #21
    bb06:	e7f2      	b.n	baee <hci_driver_send+0x2a>

0000bb08 <recv_thread>:
{
    bb08:	b573      	push	{r0, r1, r4, r5, r6, lr}
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    bb0a:	4d23      	ldr	r5, [pc, #140]	; (bb98 <recv_thread+0x90>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    bb0c:	2600      	movs	r6, #0
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    bb0e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    bb12:	4628      	mov	r0, r5
    bb14:	f013 fc73 	bl	1f3fe <k_queue_get>
		if (node_rx && !buf) {
    bb18:	4604      	mov	r4, r0
    bb1a:	b368      	cbz	r0, bb78 <recv_thread+0x70>
	s8_t class = hci_get_class(node_rx);
    bb1c:	f001 fc42 	bl	d3a4 <hci_get_class>
	switch (class) {
    bb20:	1e03      	subs	r3, r0, #0
    bb22:	9401      	str	r4, [sp, #4]
    bb24:	db03      	blt.n	bb2e <recv_thread+0x26>
    bb26:	2b02      	cmp	r3, #2
    bb28:	dd07      	ble.n	bb3a <recv_thread+0x32>
    bb2a:	2b03      	cmp	r3, #3
    bb2c:	d027      	beq.n	bb7e <recv_thread+0x76>
		LL_ASSERT(0);
    bb2e:	4040      	eors	r0, r0
    bb30:	f380 8811 	msr	BASEPRI, r0
    bb34:	f04f 0004 	mov.w	r0, #4
    bb38:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    bb3a:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    bb3c:	bf0e      	itee	eq
    bb3e:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    bb40:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    bb44:	2001      	movne	r0, #1
    bb46:	f7f9 fe2d 	bl	57a4 <bt_buf_get_rx>
    bb4a:	4604      	mov	r4, r0
		if (buf) {
    bb4c:	b118      	cbz	r0, bb56 <recv_thread+0x4e>
			hci_evt_encode(node_rx, buf);
    bb4e:	4601      	mov	r1, r0
    bb50:	9801      	ldr	r0, [sp, #4]
    bb52:	f001 fa19 	bl	cf88 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    bb56:	9b01      	ldr	r3, [sp, #4]
    bb58:	2100      	movs	r1, #0
    bb5a:	88d8      	ldrh	r0, [r3, #6]
    bb5c:	f008 fca4 	bl	144a8 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    bb60:	a802      	add	r0, sp, #8
    bb62:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    bb66:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    bb68:	f008 fc3c 	bl	143e4 <ll_rx_mem_release>
		if (buf) {
    bb6c:	b124      	cbz	r4, bb78 <recv_thread+0x70>
			if (buf->len) {
    bb6e:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    bb70:	4620      	mov	r0, r4
			if (buf->len) {
    bb72:	b173      	cbz	r3, bb92 <recv_thread+0x8a>
				bt_recv(buf);
    bb74:	f7f8 fe56 	bl	4824 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    bb78:	f013 fdec 	bl	1f754 <_impl_k_yield>
    bb7c:	e7c7      	b.n	bb0e <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    bb7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    bb82:	f7f9 fe0f 	bl	57a4 <bt_buf_get_rx>
    bb86:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    bb88:	4601      	mov	r1, r0
    bb8a:	9801      	ldr	r0, [sp, #4]
    bb8c:	f001 f9d0 	bl	cf30 <hci_acl_encode>
    bb90:	e7e1      	b.n	bb56 <recv_thread+0x4e>
				net_buf_unref(buf);
    bb92:	f00b ffbd 	bl	17b10 <net_buf_unref>
    bb96:	e7ef      	b.n	bb78 <recv_thread+0x70>
    bb98:	2000ea9c 	.word	0x2000ea9c

0000bb9c <prio_recv_thread>:
{
    bb9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    bb9e:	4d14      	ldr	r5, [pc, #80]	; (bbf0 <prio_recv_thread+0x54>)
			k_fifo_put(&recv_fifo, node_rx);
    bba0:	4e14      	ldr	r6, [pc, #80]	; (bbf4 <prio_recv_thread+0x58>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    bba2:	f10d 0102 	add.w	r1, sp, #2
    bba6:	a801      	add	r0, sp, #4
    bba8:	f008 fbe4 	bl	14374 <ll_rx_get>
    bbac:	4604      	mov	r4, r0
    bbae:	b940      	cbnz	r0, bbc2 <prio_recv_thread+0x26>
		if (node_rx) {
    bbb0:	9b01      	ldr	r3, [sp, #4]
    bbb2:	b1bb      	cbz	r3, bbe4 <prio_recv_thread+0x48>
			ll_rx_dequeue();
    bbb4:	f009 fb4a 	bl	1524c <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    bbb8:	9901      	ldr	r1, [sp, #4]
    bbba:	4630      	mov	r0, r6
    bbbc:	f013 fbfb 	bl	1f3b6 <k_queue_append>
    bbc0:	e7ef      	b.n	bba2 <prio_recv_thread+0x6>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    bbc2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    bbc6:	2001      	movs	r0, #1
    bbc8:	f7f9 fdec 	bl	57a4 <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    bbcc:	4622      	mov	r2, r4
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    bbce:	4607      	mov	r7, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    bbd0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    bbd4:	f001 fbd2 	bl	d37c <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    bbd8:	4638      	mov	r0, r7
    bbda:	f7f9 fa4b 	bl	5074 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    bbde:	f013 fdb9 	bl	1f754 <_impl_k_yield>
    bbe2:	e7de      	b.n	bba2 <prio_recv_thread+0x6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    bbe4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    bbe8:	4628      	mov	r0, r5
    bbea:	f013 fe8f 	bl	1f90c <_impl_k_sem_take>
    bbee:	e7d8      	b.n	bba2 <prio_recv_thread+0x6>
    bbf0:	2000ea54 	.word	0x2000ea54
    bbf4:	2000ea9c 	.word	0x2000ea9c

0000bbf8 <hci_driver_open>:
{
    bbf8:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    bbfa:	4814      	ldr	r0, [pc, #80]	; (bc4c <hci_driver_open+0x54>)
{
    bbfc:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    bbfe:	f009 fbc9 	bl	15394 <ll_init>
	if (err) {
    bc02:	4604      	mov	r4, r0
    bc04:	b9f8      	cbnz	r0, bc46 <hci_driver_open+0x4e>
	hci_init(NULL);
    bc06:	f001 fbe5 	bl	d3d4 <hci_init>

    bc0a:	f06f 0309 	mvn.w	r3, #9
    bc0e:	9303      	str	r3, [sp, #12]
    bc10:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    bc14:	4b0e      	ldr	r3, [pc, #56]	; (bc50 <hci_driver_open+0x58>)
    bc16:	490f      	ldr	r1, [pc, #60]	; (bc54 <hci_driver_open+0x5c>)
    bc18:	9405      	str	r4, [sp, #20]
    bc1a:	9404      	str	r4, [sp, #16]
    bc1c:	9402      	str	r4, [sp, #8]
    bc1e:	9401      	str	r4, [sp, #4]
    bc20:	9400      	str	r4, [sp, #0]
    bc22:	480d      	ldr	r0, [pc, #52]	; (bc58 <hci_driver_open+0x60>)
    bc24:	f014 f84e 	bl	1fcc4 <_impl_k_thread_create>
    bc28:	f06f 0307 	mvn.w	r3, #7
    bc2c:	9303      	str	r3, [sp, #12]
    bc2e:	9405      	str	r4, [sp, #20]
    bc30:	9404      	str	r4, [sp, #16]
    bc32:	9402      	str	r4, [sp, #8]
    bc34:	9401      	str	r4, [sp, #4]
    bc36:	9400      	str	r4, [sp, #0]
    bc38:	4b08      	ldr	r3, [pc, #32]	; (bc5c <hci_driver_open+0x64>)
    bc3a:	4909      	ldr	r1, [pc, #36]	; (bc60 <hci_driver_open+0x68>)
    bc3c:	4809      	ldr	r0, [pc, #36]	; (bc64 <hci_driver_open+0x6c>)
    bc3e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    bc42:	f014 f83f 	bl	1fcc4 <_impl_k_thread_create>
}
    bc46:	4620      	mov	r0, r4
    bc48:	b006      	add	sp, #24
    bc4a:	bd10      	pop	{r4, pc}
    bc4c:	2000ea54 	.word	0x2000ea54
    bc50:	0000bb9d 	.word	0x0000bb9d
    bc54:	20006808 	.word	0x20006808
    bc58:	2000420c 	.word	0x2000420c
    bc5c:	0000bb09 	.word	0x0000bb09
    bc60:	200069c8 	.word	0x200069c8
    bc64:	200041a4 	.word	0x200041a4

0000bc68 <sys_put_le32>:
	dst[1] = val >> 8;
    bc68:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    bc6c:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    bc6e:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    bc70:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    bc72:	0a00      	lsrs	r0, r0, #8
    bc74:	704b      	strb	r3, [r1, #1]
    bc76:	70c8      	strb	r0, [r1, #3]
    bc78:	4770      	bx	lr

0000bc7a <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    bc7a:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    bc7c:	3008      	adds	r0, #8
{
    bc7e:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    bc80:	2102      	movs	r1, #2
{
    bc82:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    bc84:	f00b ffa2 	bl	17bcc <net_buf_simple_add>
	hdr->evt = evt;
    bc88:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    bc8a:	7044      	strb	r4, [r0, #1]
    bc8c:	bd38      	pop	{r3, r4, r5, pc}
	...

0000bc90 <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    bc90:	b538      	push	{r3, r4, r5, lr}
    bc92:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    bc94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bc98:	f7f9 fd94 	bl	57c4 <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    bc9c:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    bc9e:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    bca0:	210f      	movs	r1, #15
    bca2:	f7ff ffea 	bl	bc7a <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    bca6:	2104      	movs	r1, #4
    bca8:	f104 0008 	add.w	r0, r4, #8
    bcac:	f00b ff8e 	bl	17bcc <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    bcb0:	2301      	movs	r3, #1
    bcb2:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    bcb4:	4b02      	ldr	r3, [pc, #8]	; (bcc0 <cmd_status+0x30>)
	cs->status = status;
    bcb6:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    bcb8:	881b      	ldrh	r3, [r3, #0]
    bcba:	8043      	strh	r3, [r0, #2]

	return buf;
}
    bcbc:	4620      	mov	r0, r4
    bcbe:	bd38      	pop	{r3, r4, r5, pc}
    bcc0:	20000b14 	.word	0x20000b14

0000bcc4 <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    bcc4:	b570      	push	{r4, r5, r6, lr}
    bcc6:	4604      	mov	r4, r0
    bcc8:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    bcca:	3201      	adds	r2, #1
{
    bccc:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    bcce:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    bcd0:	b2d2      	uxtb	r2, r2
    bcd2:	213e      	movs	r1, #62	; 0x3e
    bcd4:	f7ff ffd1 	bl	bc7a <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    bcd8:	2101      	movs	r1, #1
    bcda:	4620      	mov	r0, r4
    bcdc:	f00b ff76 	bl	17bcc <net_buf_simple_add>
	me->subevent = subevt;
    bce0:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    bce2:	4629      	mov	r1, r5
    bce4:	4620      	mov	r0, r4
}
    bce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    bcea:	f00b bf6f 	b.w	17bcc <net_buf_simple_add>
	...

0000bcf0 <cmd_complete>:
{
    bcf0:	b538      	push	{r3, r4, r5, lr}
    bcf2:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    bcf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    bcf8:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    bcfa:	f7f9 fd63 	bl	57c4 <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    bcfe:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    bd00:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    bd02:	b2d2      	uxtb	r2, r2
    bd04:	210e      	movs	r1, #14
    bd06:	f7ff ffb8 	bl	bc7a <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    bd0a:	6820      	ldr	r0, [r4, #0]
    bd0c:	2103      	movs	r1, #3
    bd0e:	3008      	adds	r0, #8
    bd10:	f00b ff5c 	bl	17bcc <net_buf_simple_add>
	cc->ncmd = 1;
    bd14:	2301      	movs	r3, #1
    bd16:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    bd18:	4b05      	ldr	r3, [pc, #20]	; (bd30 <cmd_complete+0x40>)
    bd1a:	881b      	ldrh	r3, [r3, #0]
    bd1c:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    bd20:	6820      	ldr	r0, [r4, #0]
    bd22:	4629      	mov	r1, r5
    bd24:	3008      	adds	r0, #8
}
    bd26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    bd2a:	f00b bf4f 	b.w	17bcc <net_buf_simple_add>
    bd2e:	bf00      	nop
    bd30:	20000b14 	.word	0x20000b14

0000bd34 <le_advertising_report>:
}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

static void le_advertising_report(struct pdu_data *pdu_data, u8_t *b,
				  struct net_buf *buf)
{
    bd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bd38:	b085      	sub	sp, #20
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    bd3a:	2301      	movs	r3, #1
    bd3c:	f88d 3009 	strb.w	r3, [sp, #9]
    bd40:	2303      	movs	r3, #3
    bd42:	f88d 300a 	strb.w	r3, [sp, #10]
    bd46:	23ff      	movs	r3, #255	; 0xff
    bd48:	f88d 300b 	strb.w	r3, [sp, #11]
    bd4c:	f88d 300d 	strb.w	r3, [sp, #13]
    bd50:	2302      	movs	r3, #2
    bd52:	f88d 300e 	strb.w	r3, [sp, #14]
	u8_t direct;
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */
	s8_t *prssi;

#if defined(CONFIG_BT_CTLR_PRIVACY)
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    bd56:	7843      	ldrb	r3, [r0, #1]
{
    bd58:	4688      	mov	r8, r1
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    bd5a:	4443      	add	r3, r8
{
    bd5c:	4604      	mov	r4, r0
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    bd5e:	7add      	ldrb	r5, [r3, #11]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
	/* Update current RPA */
	if (adv->tx_addr) {
    bd60:	7803      	ldrb	r3, [r0, #0]
{
    bd62:	4693      	mov	fp, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    bd64:	2100      	movs	r1, #0
    bd66:	2204      	movs	r2, #4
	if (adv->tx_addr) {
    bd68:	0658      	lsls	r0, r3, #25
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    bd6a:	f88d 1008 	strb.w	r1, [sp, #8]
    bd6e:	f88d 200c 	strb.w	r2, [sp, #12]
	if (adv->tx_addr) {
    bd72:	d504      	bpl.n	bd7e <le_advertising_report+0x4a>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    bd74:	1ca3      	adds	r3, r4, #2
    bd76:	462a      	mov	r2, r5
    bd78:	4608      	mov	r0, r1
    bd7a:	f00a feed 	bl	16b58 <ll_rl_crpa_set>
	}
#endif

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    bd7e:	4b79      	ldr	r3, [pc, #484]	; (bf64 <le_advertising_report+0x230>)
    bd80:	e9d3 2300 	ldrd	r2, r3, [r3]
    bd84:	2200      	movs	r2, #0
    bd86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    bd8a:	4313      	orrs	r3, r2
    bd8c:	f000 80a5 	beq.w	beda <le_advertising_report+0x1a6>
		return;
	}

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    bd90:	7863      	ldrb	r3, [r4, #1]
    bd92:	4443      	add	r3, r8
    bd94:	f893 a00c 	ldrb.w	sl, [r3, #12]
    bd98:	4b73      	ldr	r3, [pc, #460]	; (bf68 <le_advertising_report+0x234>)
		   offsetof(struct pdu_adv, payload) + adv->len + 2];

	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    bd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
    bd9e:	f1ba 0f00 	cmp.w	sl, #0
    bda2:	d138      	bne.n	be16 <le_advertising_report+0xe2>
    bda4:	f002 0202 	and.w	r2, r2, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    bda8:	2300      	movs	r3, #0
    bdaa:	4313      	orrs	r3, r2
    bdac:	f000 8095 	beq.w	beda <le_advertising_report+0x1a6>
	if (dup_count >= 0) {
    bdb0:	4f6e      	ldr	r7, [pc, #440]	; (bf6c <le_advertising_report+0x238>)
    bdb2:	683b      	ldr	r3, [r7, #0]
    bdb4:	2b00      	cmp	r3, #0
    bdb6:	db50      	blt.n	be5a <le_advertising_report+0x126>
    bdb8:	f8df 91bc 	ldr.w	r9, [pc, #444]	; bf78 <le_advertising_report+0x244>
    bdbc:	2600      	movs	r6, #0
    bdbe:	1ca3      	adds	r3, r4, #2
		for (i = 0; i < dup_count; i++) {
    bdc0:	683a      	ldr	r2, [r7, #0]
    bdc2:	4296      	cmp	r6, r2
    bdc4:	db2a      	blt.n	be1c <le_advertising_report+0xe8>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    bdc6:	4e6a      	ldr	r6, [pc, #424]	; (bf70 <le_advertising_report+0x23c>)
    bdc8:	f8df 91a8 	ldr.w	r9, [pc, #424]	; bf74 <le_advertising_report+0x240>
    bdcc:	6830      	ldr	r0, [r6, #0]
    bdce:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    bdd2:	4619      	mov	r1, r3
    bdd4:	2206      	movs	r2, #6
    bdd6:	3002      	adds	r0, #2
    bdd8:	f7f4 fd87 	bl	8ea <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    bddc:	6832      	ldr	r2, [r6, #0]
    bdde:	7823      	ldrb	r3, [r4, #0]
    bde0:	eb09 01c2 	add.w	r1, r9, r2, lsl #3
    bde4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    bde8:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    bdea:	7823      	ldrb	r3, [r4, #0]
    bdec:	f003 010f 	and.w	r1, r3, #15
    bdf0:	2301      	movs	r3, #1
    bdf2:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    bdf4:	6839      	ldr	r1, [r7, #0]
		dup_filter[dup_curr].mask = BIT(adv->type);
    bdf6:	f809 3032 	strb.w	r3, [r9, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    bdfa:	290f      	cmp	r1, #15
			dup_count++;
    bdfc:	bfd5      	itete	le
    bdfe:	3101      	addle	r1, #1
			dup_curr++;
    be00:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    be02:	6031      	strle	r1, [r6, #0]
			dup_curr++;
    be04:	6032      	strgt	r2, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    be06:	6832      	ldr	r2, [r6, #0]
			dup_count++;
    be08:	bfd8      	it	le
    be0a:	6039      	strle	r1, [r7, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    be0c:	2a10      	cmp	r2, #16
    be0e:	d124      	bne.n	be5a <le_advertising_report+0x126>
			dup_curr = 0;
    be10:	2200      	movs	r2, #0
    be12:	6032      	str	r2, [r6, #0]
    be14:	e021      	b.n	be5a <le_advertising_report+0x126>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    be16:	f002 020b 	and.w	r2, r2, #11
    be1a:	e7c5      	b.n	bda8 <le_advertising_report+0x74>
			if (!memcmp(&adv->adv_ind.addr[0],
    be1c:	4618      	mov	r0, r3
    be1e:	2206      	movs	r2, #6
    be20:	4649      	mov	r1, r9
    be22:	9301      	str	r3, [sp, #4]
    be24:	f7f4 fd34 	bl	890 <memcmp>
    be28:	9b01      	ldr	r3, [sp, #4]
    be2a:	b9f0      	cbnz	r0, be6a <le_advertising_report+0x136>
			    adv->tx_addr == dup_filter[i].addr.type) {
    be2c:	7821      	ldrb	r1, [r4, #0]
    be2e:	f819 0c01 	ldrb.w	r0, [r9, #-1]
    be32:	460a      	mov	r2, r1
    be34:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
    be38:	4281      	cmp	r1, r0
    be3a:	d116      	bne.n	be6a <le_advertising_report+0x136>
				if (dup_filter[i].mask & BIT(adv->type)) {
    be3c:	484d      	ldr	r0, [pc, #308]	; (bf74 <le_advertising_report+0x240>)
    be3e:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
    be42:	f002 020f 	and.w	r2, r2, #15
    be46:	fa23 f102 	lsr.w	r1, r3, r2
    be4a:	07c9      	lsls	r1, r1, #31
    be4c:	d445      	bmi.n	beda <le_advertising_report+0x1a6>
				dup_filter[i].mask |= BIT(adv->type);
    be4e:	2101      	movs	r1, #1
    be50:	fa01 f202 	lsl.w	r2, r1, r2
    be54:	4313      	orrs	r3, r2
    be56:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	if (dup_found(adv)) {
		return;
	}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    be5a:	7823      	ldrb	r3, [r4, #0]
    be5c:	7862      	ldrb	r2, [r4, #1]
    be5e:	f003 030f 	and.w	r3, r3, #15
    be62:	2b01      	cmp	r3, #1
    be64:	d105      	bne.n	be72 <le_advertising_report+0x13e>
		data_len = (adv->len - BDADDR_SIZE);
	} else {
		data_len = 0;
    be66:	2600      	movs	r6, #0
    be68:	e005      	b.n	be76 <le_advertising_report+0x142>
		for (i = 0; i < dup_count; i++) {
    be6a:	3601      	adds	r6, #1
    be6c:	f109 0908 	add.w	r9, r9, #8
    be70:	e7a6      	b.n	bdc0 <le_advertising_report+0x8c>
		data_len = (adv->len - BDADDR_SIZE);
    be72:	1f96      	subs	r6, r2, #6
    be74:	b2f6      	uxtb	r6, r6
	}

	/* The Link Layer currently returns RSSI as an absolute value */
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    be76:	4442      	add	r2, r8
    be78:	f104 0908 	add.w	r9, r4, #8
    be7c:	7a97      	ldrb	r7, [r2, #10]
    be7e:	427f      	negs	r7, r7
    be80:	b27f      	sxtb	r7, r7
		  offsetof(struct pdu_adv, payload) + adv->len];

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	if (direct) {
    be82:	f1ba 0f00 	cmp.w	sl, #0
    be86:	d035      	beq.n	bef4 <le_advertising_report+0x1c0>
		struct bt_hci_evt_le_direct_adv_report *drp;
		struct bt_hci_evt_le_direct_adv_info *dir_info;

		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    be88:	2b01      	cmp	r3, #1
    be8a:	d005      	beq.n	be98 <le_advertising_report+0x164>
    be8c:	4040      	eors	r0, r0
    be8e:	f380 8811 	msr	BASEPRI, r0
    be92:	f04f 0004 	mov.w	r0, #4
    be96:	df02      	svc	2
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    be98:	2211      	movs	r2, #17
    be9a:	210b      	movs	r1, #11
    be9c:	4658      	mov	r0, fp
    be9e:	9301      	str	r3, [sp, #4]
    bea0:	f7ff ff10 	bl	bcc4 <meta_evt>
			       sizeof(*drp) + sizeof(*dir_info));

		drp->num_reports = 1;
    bea4:	9b01      	ldr	r3, [sp, #4]
    bea6:	7003      	strb	r3, [r0, #0]
		dir_info = (void *)(((u8_t *)drp) + sizeof(*drp));

		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    bea8:	7043      	strb	r3, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    beaa:	4606      	mov	r6, r0

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (rl_idx < ll_rl_size_get()) {
    beac:	f00a fd2a 	bl	16904 <ll_rl_size_get>
    beb0:	4285      	cmp	r5, r0
    beb2:	f106 0003 	add.w	r0, r6, #3
    beb6:	d213      	bcs.n	bee0 <le_advertising_report+0x1ac>
			/* Store identity address */
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    beb8:	4602      	mov	r2, r0
    beba:	1cb1      	adds	r1, r6, #2
    bebc:	4628      	mov	r0, r5
    bebe:	f00a fb4b 	bl	16558 <ll_rl_id_addr_get>
					  &dir_info->addr.a.val[0]);
			/* Mark it as identity address from RPA (0x02, 0x03) */
			dir_info->addr.type += 2;
    bec2:	78b3      	ldrb	r3, [r6, #2]
    bec4:	3302      	adds	r3, #2
    bec6:	70b3      	strb	r3, [r6, #2]
			memcpy(&dir_info->addr.a.val[0],
			       &adv->direct_ind.adv_addr[0],
			       sizeof(bt_addr_t));
		}

		dir_info->dir_addr.type = 0x1;
    bec8:	2301      	movs	r3, #1
    beca:	7273      	strb	r3, [r6, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    becc:	2206      	movs	r2, #6
    bece:	4649      	mov	r1, r9
    bed0:	f106 000a 	add.w	r0, r6, #10
    bed4:	f7f4 fd09 	bl	8ea <memcpy>
		       &adv->direct_ind.tgt_addr[0], sizeof(bt_addr_t));

		dir_info->rssi = rssi;
    bed8:	7437      	strb	r7, [r6, #16]
	adv_info->length = data_len;
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
	/* RSSI */
	prssi = &adv_info->data[0] + data_len;
	*prssi = rssi;
}
    beda:	b005      	add	sp, #20
    bedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
    bee0:	4621      	mov	r1, r4
			memcpy(&dir_info->addr.a.val[0],
    bee2:	2206      	movs	r2, #6
			dir_info->addr.type = adv->tx_addr;
    bee4:	f811 3b02 	ldrb.w	r3, [r1], #2
    bee8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    beec:	70b3      	strb	r3, [r6, #2]
			memcpy(&dir_info->addr.a.val[0],
    beee:	f7f4 fcfc 	bl	8ea <memcpy>
    bef2:	e7e9      	b.n	bec8 <le_advertising_report+0x194>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    bef4:	f106 020b 	add.w	r2, r6, #11
    bef8:	b2d2      	uxtb	r2, r2
    befa:	2102      	movs	r1, #2
    befc:	4658      	mov	r0, fp
    befe:	f7ff fee1 	bl	bcc4 <meta_evt>
	sep->num_reports = 1;
    bf02:	2301      	movs	r3, #1
    bf04:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    bf06:	7823      	ldrb	r3, [r4, #0]
    bf08:	aa04      	add	r2, sp, #16
    bf0a:	f003 030f 	and.w	r3, r3, #15
    bf0e:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    bf10:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    bf12:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    bf16:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    bf18:	7863      	ldrb	r3, [r4, #1]
    bf1a:	4498      	add	r8, r3
    bf1c:	f898 800b 	ldrb.w	r8, [r8, #11]
	if (rl_idx < ll_rl_size_get()) {
    bf20:	f00a fcf0 	bl	16904 <ll_rl_size_get>
    bf24:	4580      	cmp	r8, r0
    bf26:	f105 0003 	add.w	r0, r5, #3
    bf2a:	d210      	bcs.n	bf4e <le_advertising_report+0x21a>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    bf2c:	4602      	mov	r2, r0
    bf2e:	1ca9      	adds	r1, r5, #2
    bf30:	4640      	mov	r0, r8
    bf32:	f00a fb11 	bl	16558 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    bf36:	78ab      	ldrb	r3, [r5, #2]
    bf38:	3302      	adds	r3, #2
    bf3a:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    bf3c:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    bf3e:	350a      	adds	r5, #10
    bf40:	4632      	mov	r2, r6
    bf42:	4649      	mov	r1, r9
    bf44:	4628      	mov	r0, r5
    bf46:	f7f4 fcd0 	bl	8ea <memcpy>
	*prssi = rssi;
    bf4a:	55af      	strb	r7, [r5, r6]
    bf4c:	e7c5      	b.n	beda <le_advertising_report+0x1a6>
		adv_info->addr.type = adv->tx_addr;
    bf4e:	4621      	mov	r1, r4
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    bf50:	2206      	movs	r2, #6
		adv_info->addr.type = adv->tx_addr;
    bf52:	f811 3b02 	ldrb.w	r3, [r1], #2
    bf56:	f3c3 1380 	ubfx	r3, r3, #6, #1
    bf5a:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    bf5c:	f7f4 fcc5 	bl	8ea <memcpy>
    bf60:	e7ec      	b.n	bf3c <le_advertising_report+0x208>
    bf62:	bf00      	nop
    bf64:	2000dfd8 	.word	0x2000dfd8
    bf68:	2000dfe0 	.word	0x2000dfe0
    bf6c:	20000b1c 	.word	0x20000b1c
    bf70:	20000b20 	.word	0x20000b20
    bf74:	20000b24 	.word	0x20000b24
    bf78:	20000b26 	.word	0x20000b26

0000bf7c <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    bf7c:	4b0e      	ldr	r3, [pc, #56]	; (bfb8 <encrypt_change+0x3c>)
{
    bf7e:	b570      	push	{r4, r5, r6, lr}
    bf80:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    bf82:	e9d3 2300 	ldrd	r2, r3, [r3]
    bf86:	2300      	movs	r3, #0
    bf88:	f002 0280 	and.w	r2, r2, #128	; 0x80
    bf8c:	4313      	orrs	r3, r2
{
    bf8e:	4604      	mov	r4, r0
    bf90:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    bf92:	d010      	beq.n	bfb6 <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    bf94:	2204      	movs	r2, #4
    bf96:	2108      	movs	r1, #8
    bf98:	4628      	mov	r0, r5
    bf9a:	f7ff fe6e 	bl	bc7a <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    bf9e:	2104      	movs	r1, #4
    bfa0:	f105 0008 	add.w	r0, r5, #8
    bfa4:	f00b fe12 	bl	17bcc <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    bfa8:	fab4 f384 	clz	r3, r4
    bfac:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    bfae:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    bfb0:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    bfb4:	70c3      	strb	r3, [r0, #3]
    bfb6:	bd70      	pop	{r4, r5, r6, pc}
    bfb8:	2000dfd8 	.word	0x2000dfd8

0000bfbc <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    bfbc:	b570      	push	{r4, r5, r6, lr}
    bfbe:	4604      	mov	r4, r0
    bfc0:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    bfc2:	4b13      	ldr	r3, [pc, #76]	; (c010 <le_remote_feat_complete+0x54>)
{
    bfc4:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    bfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
    bfca:	2200      	movs	r2, #0
    bfcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    bfd0:	4313      	orrs	r3, r2
{
    bfd2:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    bfd4:	d01b      	beq.n	c00e <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    bfd6:	4b0f      	ldr	r3, [pc, #60]	; (c014 <le_remote_feat_complete+0x58>)
    bfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
    bfdc:	2300      	movs	r3, #0
    bfde:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    bfe2:	4313      	orrs	r3, r2
    bfe4:	d013      	beq.n	c00e <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    bfe6:	220b      	movs	r2, #11
    bfe8:	2104      	movs	r1, #4
    bfea:	f7ff fe6b 	bl	bcc4 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    bfee:	2208      	movs	r2, #8
	sep->status = status;
    bff0:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    bff2:	f8a0 6001 	strh.w	r6, [r0, #1]
    bff6:	3003      	adds	r0, #3
	if (!status) {
    bff8:	b924      	cbnz	r4, c004 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    bffa:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    bffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    c000:	f7f4 bc73 	b.w	8ea <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    c004:	2100      	movs	r1, #0
}
    c006:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    c00a:	f7f4 bc9a 	b.w	942 <memset>
    c00e:	bd70      	pop	{r4, r5, r6, pc}
    c010:	2000dfd8 	.word	0x2000dfd8
    c014:	2000dfe0 	.word	0x2000dfe0

0000c018 <le_conn_complete.part.48>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    c018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c01c:	4605      	mov	r5, r0
    c01e:	4618      	mov	r0, r3
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    c020:	4b46      	ldr	r3, [pc, #280]	; (c13c <le_conn_complete.part.48+0x124>)
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    c022:	4616      	mov	r6, r2
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    c024:	e9d3 2300 	ldrd	r2, r3, [r3]
    c028:	f240 2801 	movw	r8, #513	; 0x201
    c02c:	f04f 0900 	mov.w	r9, #0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    c030:	f402 7a00 	and.w	sl, r2, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    c034:	ea03 0309 	and.w	r3, r3, r9
    c038:	ea02 0208 	and.w	r2, r2, r8
    c03c:	4313      	orrs	r3, r2
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    c03e:	460c      	mov	r4, r1
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    c040:	f04f 0b00 	mov.w	fp, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    c044:	d077      	beq.n	c136 <le_conn_complete.part.48+0x11e>
	if (!status) {
    c046:	2d00      	cmp	r5, #0
    c048:	d150      	bne.n	c0ec <le_conn_complete.part.48+0xd4>
		conn_count++;
    c04a:	4a3d      	ldr	r2, [pc, #244]	; (c140 <le_conn_complete.part.48+0x128>)
    c04c:	6813      	ldr	r3, [r2, #0]
    c04e:	3301      	adds	r3, #1
    c050:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    c052:	ea5a 030b 	orrs.w	r3, sl, fp
    c056:	f101 0803 	add.w	r8, r1, #3
    c05a:	d151      	bne.n	c100 <le_conn_complete.part.48+0xe8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    c05c:	2212      	movs	r2, #18
    c05e:	2101      	movs	r1, #1
    c060:	f7ff fe30 	bl	bcc4 <meta_evt>
	lecc->status = 0x00;
    c064:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    c066:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
    c06a:	7863      	ldrb	r3, [r4, #1]
    c06c:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    c06e:	78a3      	ldrb	r3, [r4, #2]
    c070:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    c072:	4607      	mov	r7, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    c074:	2206      	movs	r2, #6
    c076:	4641      	mov	r1, r8
    c078:	3005      	adds	r0, #5
    c07a:	f7f4 fc36 	bl	8ea <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    c07e:	8ae3      	ldrh	r3, [r4, #22]
    c080:	f8a7 300b 	strh.w	r3, [r7, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    c084:	8b23      	ldrh	r3, [r4, #24]
    c086:	f8a7 300d 	strh.w	r3, [r7, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    c08a:	8b63      	ldrh	r3, [r4, #26]
    c08c:	f8a7 300f 	strh.w	r3, [r7, #15]
	lecc->clock_accuracy = radio_cc->mca;
    c090:	7f23      	ldrb	r3, [r4, #28]
    c092:	747b      	strb	r3, [r7, #17]
    c094:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    c098:	221e      	movs	r2, #30
    c09a:	210a      	movs	r1, #10
    c09c:	f7ff fe12 	bl	bcc4 <meta_evt>
			memset(leecc, 0x00, sizeof(*leecc));
    c0a0:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    c0a2:	4604      	mov	r4, r0
		memset(lecc, 0x00, sizeof(*lecc));
    c0a4:	2100      	movs	r1, #0
    c0a6:	f7f4 fc4c 	bl	942 <memset>
		lecc->status = status;
    c0aa:	7025      	strb	r5, [r4, #0]
    c0ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((radio_cc->own_addr_type) &&
    c0b0:	7d63      	ldrb	r3, [r4, #21]
    c0b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c0b6:	2b40      	cmp	r3, #64	; 0x40
    c0b8:	d138      	bne.n	c12c <le_conn_complete.part.48+0x114>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    c0ba:	2206      	movs	r2, #6
    c0bc:	f104 0110 	add.w	r1, r4, #16
    c0c0:	f7f4 fc13 	bl	8ea <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    c0c4:	2206      	movs	r2, #6
    c0c6:	f104 0109 	add.w	r1, r4, #9
    c0ca:	f107 0011 	add.w	r0, r7, #17
    c0ce:	f7f4 fc0c 	bl	8ea <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    c0d2:	8ae3      	ldrh	r3, [r4, #22]
    c0d4:	f8a7 3017 	strh.w	r3, [r7, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    c0d8:	8b23      	ldrh	r3, [r4, #24]
    c0da:	f8a7 3019 	strh.w	r3, [r7, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    c0de:	8b63      	ldrh	r3, [r4, #26]
    c0e0:	f8a7 301b 	strh.w	r3, [r7, #27]
		leecc->clock_accuracy = radio_cc->mca;
    c0e4:	7f23      	ldrb	r3, [r4, #28]
    c0e6:	777b      	strb	r3, [r7, #29]
    c0e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    c0ec:	ea5a 030b 	orrs.w	r3, sl, fp
    c0f0:	d1d2      	bne.n	c098 <le_conn_complete.part.48+0x80>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    c0f2:	2212      	movs	r2, #18
    c0f4:	2101      	movs	r1, #1
    c0f6:	f7ff fde5 	bl	bcc4 <meta_evt>
		memset(lecc, 0x00, sizeof(*lecc));
    c0fa:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    c0fc:	4604      	mov	r4, r0
    c0fe:	e7d1      	b.n	c0a4 <le_conn_complete.part.48+0x8c>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    c100:	221e      	movs	r2, #30
    c102:	210a      	movs	r1, #10
    c104:	f7ff fdde 	bl	bcc4 <meta_evt>
		leecc->status = 0x00;
    c108:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    c10a:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
    c10e:	7863      	ldrb	r3, [r4, #1]
    c110:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    c112:	78a3      	ldrb	r3, [r4, #2]
    c114:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    c116:	4607      	mov	r7, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    c118:	2206      	movs	r2, #6
    c11a:	4641      	mov	r1, r8
    c11c:	3005      	adds	r0, #5
    c11e:	f7f4 fbe4 	bl	8ea <memcpy>
		if ((radio_cc->own_addr_type) &&
    c122:	7be3      	ldrb	r3, [r4, #15]
    c124:	f107 000b 	add.w	r0, r7, #11
    c128:	2b00      	cmp	r3, #0
    c12a:	d1c1      	bne.n	c0b0 <le_conn_complete.part.48+0x98>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    c12c:	2206      	movs	r2, #6
    c12e:	2100      	movs	r1, #0
    c130:	f7f4 fc07 	bl	942 <memset>
    c134:	e7c6      	b.n	c0c4 <le_conn_complete.part.48+0xac>
    c136:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c13a:	bf00      	nop
    c13c:	2000dfe0 	.word	0x2000dfe0
    c140:	20000b18 	.word	0x20000b18

0000c144 <bt_addr_le_to_str.constprop.79>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    c144:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    c146:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    c148:	b08a      	sub	sp, #40	; 0x28
    c14a:	4604      	mov	r4, r0
    c14c:	460e      	mov	r6, r1
    c14e:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    c150:	2b03      	cmp	r3, #3
    c152:	d820      	bhi.n	c196 <bt_addr_le_to_str.constprop.79+0x52>
    c154:	e8df f003 	tbb	[pc, r3]
    c158:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    c15c:	4911      	ldr	r1, [pc, #68]	; (c1a4 <bt_addr_le_to_str.constprop.79+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    c15e:	4628      	mov	r0, r5
    c160:	f7f4 fb2e 	bl	7c0 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    c164:	7862      	ldrb	r2, [r4, #1]
    c166:	9204      	str	r2, [sp, #16]
    c168:	78a2      	ldrb	r2, [r4, #2]
    c16a:	9203      	str	r2, [sp, #12]
    c16c:	78e2      	ldrb	r2, [r4, #3]
    c16e:	9202      	str	r2, [sp, #8]
    c170:	7922      	ldrb	r2, [r4, #4]
    c172:	9201      	str	r2, [sp, #4]
    c174:	7962      	ldrb	r2, [r4, #5]
    c176:	9200      	str	r2, [sp, #0]
    c178:	79a3      	ldrb	r3, [r4, #6]
    c17a:	9505      	str	r5, [sp, #20]
    c17c:	4a0a      	ldr	r2, [pc, #40]	; (c1a8 <bt_addr_le_to_str.constprop.79+0x64>)
    c17e:	211b      	movs	r1, #27
    c180:	4630      	mov	r0, r6
    c182:	f7f5 fb05 	bl	1790 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    c186:	b00a      	add	sp, #40	; 0x28
    c188:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    c18a:	4908      	ldr	r1, [pc, #32]	; (c1ac <bt_addr_le_to_str.constprop.79+0x68>)
    c18c:	e7e7      	b.n	c15e <bt_addr_le_to_str.constprop.79+0x1a>
		strcpy(type, "public id");
    c18e:	4908      	ldr	r1, [pc, #32]	; (c1b0 <bt_addr_le_to_str.constprop.79+0x6c>)
    c190:	e7e5      	b.n	c15e <bt_addr_le_to_str.constprop.79+0x1a>
		strcpy(type, "random id");
    c192:	4908      	ldr	r1, [pc, #32]	; (c1b4 <bt_addr_le_to_str.constprop.79+0x70>)
    c194:	e7e3      	b.n	c15e <bt_addr_le_to_str.constprop.79+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    c196:	4a08      	ldr	r2, [pc, #32]	; (c1b8 <bt_addr_le_to_str.constprop.79+0x74>)
    c198:	210a      	movs	r1, #10
    c19a:	4628      	mov	r0, r5
    c19c:	f7f5 faf8 	bl	1790 <snprintk>
    c1a0:	e7e0      	b.n	c164 <bt_addr_le_to_str.constprop.79+0x20>
    c1a2:	bf00      	nop
    c1a4:	0002128e 	.word	0x0002128e
    c1a8:	000212b7 	.word	0x000212b7
    c1ac:	00021295 	.word	0x00021295
    c1b0:	0002129c 	.word	0x0002129c
    c1b4:	000212a6 	.word	0x000212a6
    c1b8:	000212b0 	.word	0x000212b0

0000c1bc <le_adv_ext_report.isra.77>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    c1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    c1c0:	7803      	ldrb	r3, [r0, #0]
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    c1c2:	4615      	mov	r5, r2
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    c1c4:	f003 020f 	and.w	r2, r3, #15
    c1c8:	2a07      	cmp	r2, #7
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    c1ca:	b08d      	sub	sp, #52	; 0x34
    c1cc:	4606      	mov	r6, r0
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    c1ce:	f040 808e 	bne.w	c2ee <le_adv_ext_report.isra.77+0x132>
		  offsetof(struct pdu_adv, payload) + adv->len];
    c1d2:	7842      	ldrb	r2, [r0, #1]
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    c1d4:	2a00      	cmp	r2, #0
    c1d6:	f000 808a 	beq.w	c2ee <le_adv_ext_report.isra.77+0x132>
		if (!p->ext_hdr_len) {
    c1da:	7880      	ldrb	r0, [r0, #2]
    c1dc:	0680      	lsls	r0, r0, #26
    c1de:	d076      	beq.n	c2ce <le_adv_ext_report.isra.77+0x112>
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    c1e0:	4411      	add	r1, r2
		ptr = (u8_t *)h + sizeof(*h);
    c1e2:	1d34      	adds	r4, r6, #4
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    c1e4:	7a8a      	ldrb	r2, [r1, #10]
    c1e6:	9200      	str	r2, [sp, #0]
		if (h->adv_addr) {
    c1e8:	78f2      	ldrb	r2, [r6, #3]
    c1ea:	07d7      	lsls	r7, r2, #31
    c1ec:	d510      	bpl.n	c210 <le_adv_ext_report.isra.77+0x54>
			addr.type = adv->tx_addr;
    c1ee:	af0c      	add	r7, sp, #48	; 0x30
    c1f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    c1f4:	f807 3d24 	strb.w	r3, [r7, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    c1f8:	4621      	mov	r1, r4
    c1fa:	2206      	movs	r2, #6
    c1fc:	f10d 000d 	add.w	r0, sp, #13
    c200:	f7f4 fb73 	bl	8ea <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    c204:	a905      	add	r1, sp, #20
    c206:	4638      	mov	r0, r7
			ptr += BDADDR_SIZE;
    c208:	f106 040a 	add.w	r4, r6, #10
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    c20c:	f7ff ff9a 	bl	c144 <bt_addr_le_to_str.constprop.79>
		if(h->tgt_addr){
    c210:	78f2      	ldrb	r2, [r6, #3]
    c212:	0790      	lsls	r0, r2, #30
			ptr += BDADDR_SIZE;
    c214:	bf48      	it	mi
    c216:	3406      	addmi	r4, #6
		if(h->adi){
    c218:	f012 0908 	ands.w	r9, r2, #8
    c21c:	d05e      	beq.n	c2dc <le_adv_ext_report.isra.77+0x120>
			sid_for_info = adi_ptr->sid;
    c21e:	7867      	ldrb	r7, [r4, #1]
    c220:	ea4f 1a17 	mov.w	sl, r7, lsr #4
			if(adi_ptr->sid == 0x04){
    c224:	f007 07f0 	and.w	r7, r7, #240	; 0xf0
    c228:	2f40      	cmp	r7, #64	; 0x40
    c22a:	d053      	beq.n	c2d4 <le_adv_ext_report.isra.77+0x118>
			}else if(adi_ptr->sid == 0x02){
    c22c:	f1a7 0120 	sub.w	r1, r7, #32
    c230:	424f      	negs	r7, r1
    c232:	414f      	adcs	r7, r1
	bool aux_adi_present = false;
    c234:	f04f 0900 	mov.w	r9, #0
			ptr += sizeof(*adi_ptr);
    c238:	46a3      	mov	fp, r4
    c23a:	3402      	adds	r4, #2
		if(h->aux_ptr){
    c23c:	f012 0310 	ands.w	r3, r2, #16
			aux_ptr_present = true;
    c240:	bf1c      	itt	ne
    c242:	2301      	movne	r3, #1
			ptr += sizeof(*ap);
    c244:	3403      	addne	r4, #3
		if (h->tx_pwr) {
    c246:	0652      	lsls	r2, r2, #25
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    c248:	78b2      	ldrb	r2, [r6, #2]
    c24a:	9301      	str	r3, [sp, #4]
    c24c:	f3c2 0105 	ubfx	r1, r2, #0, #6
    c250:	7872      	ldrb	r2, [r6, #1]
    c252:	eba2 0201 	sub.w	r2, r2, r1
    c256:	b2d2      	uxtb	r2, r2
    c258:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    c25c:	f102 0218 	add.w	r2, r2, #24
    c260:	b2d2      	uxtb	r2, r2
    c262:	4628      	mov	r0, r5
    c264:	f04f 010d 	mov.w	r1, #13
			ptr++;
    c268:	bf48      	it	mi
    c26a:	3401      	addmi	r4, #1
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    c26c:	f7ff fd2a 	bl	bcc4 <meta_evt>
		sep->num_reports = 1;
    c270:	2201      	movs	r2, #1
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    c272:	fa5f f888 	uxtb.w	r8, r8
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    c276:	4605      	mov	r5, r0
		sep->num_reports = 1;
    c278:	7002      	strb	r2, [r0, #0]
		if( aux_adi_present && aux_ptr_present){ //aux packet
    c27a:	9b01      	ldr	r3, [sp, #4]
    c27c:	f1b9 0f00 	cmp.w	r9, #0
    c280:	d03f      	beq.n	c302 <le_adv_ext_report.isra.77+0x146>
    c282:	b3cb      	cbz	r3, c2f8 <le_adv_ext_report.isra.77+0x13c>
			adv_info->frag = 0x01;	//First fragment - more packets to come;
    c284:	7082      	strb	r2, [r0, #2]
		if(h->adv_addr){
    c286:	78f3      	ldrb	r3, [r6, #3]
    c288:	07db      	lsls	r3, r3, #31
    c28a:	d508      	bpl.n	c29e <le_adv_ext_report.isra.77+0xe2>
			adv_info->addr.type = addr.type;
    c28c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c290:	70eb      	strb	r3, [r5, #3]
			memcpy(&adv_info->addr.a.val[0], &addr.a.val[0],
    c292:	2206      	movs	r2, #6
    c294:	f10d 010d 	add.w	r1, sp, #13
    c298:	1d28      	adds	r0, r5, #4
    c29a:	f7f4 fb26 	bl	8ea <memcpy>
		adv_info->evt_type = 0x07;
    c29e:	2307      	movs	r3, #7
    c2a0:	706b      	strb	r3, [r5, #1]
		adv_info->sid = sid_for_info;
    c2a2:	f885 a00c 	strb.w	sl, [r5, #12]
		if(adi_ptr->sid == 0x04){
    c2a6:	f89b 3001 	ldrb.w	r3, [fp, #1]
			adv_info->length = data_len;
    c2aa:	f885 8018 	strb.w	r8, [r5, #24]
		if(adi_ptr->sid == 0x04){
    c2ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    c2b2:	f105 0619 	add.w	r6, r5, #25
    c2b6:	2b40      	cmp	r3, #64	; 0x40
			memcpy(&adv_info->data[0], ptr, data_len);
    c2b8:	4642      	mov	r2, r8
    c2ba:	4621      	mov	r1, r4
    c2bc:	4630      	mov	r0, r6
		if(adi_ptr->sid == 0x04){
    c2be:	d10f      	bne.n	c2e0 <le_adv_ext_report.isra.77+0x124>
			memcpy(&adv_info->data[0], ptr, data_len);
    c2c0:	f7f4 fb13 	bl	8ea <memcpy>
			memcpy(copy_data, ptr, data_len);
    c2c4:	4642      	mov	r2, r8
    c2c6:	4621      	mov	r1, r4
    c2c8:	4811      	ldr	r0, [pc, #68]	; (c310 <le_adv_ext_report.isra.77+0x154>)
    c2ca:	f7f4 fb0e 	bl	8ea <memcpy>
}
    c2ce:	b00d      	add	sp, #52	; 0x34
    c2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				aux_adi_present = true;				// chain pdu's
    c2d4:	f04f 0901 	mov.w	r9, #1
	bool adi_present = false;		// to identify aux packet and fragment it
    c2d8:	2700      	movs	r7, #0
    c2da:	e7ad      	b.n	c238 <le_adv_ext_report.isra.77+0x7c>
    c2dc:	464f      	mov	r7, r9
    c2de:	e7ad      	b.n	c23c <le_adv_ext_report.isra.77+0x80>
			memcpy(&adv_info->data[0], ptr, data_len);
    c2e0:	f7f4 fb03 	bl	8ea <memcpy>
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    c2e4:	9b00      	ldr	r3, [sp, #0]
    c2e6:	425b      	negs	r3, r3
			*prssi = rssi;
    c2e8:	f806 3008 	strb.w	r3, [r6, r8]
    c2ec:	e7ef      	b.n	c2ce <le_adv_ext_report.isra.77+0x112>
		le_advertising_report(pdu_data, b, buf);
    c2ee:	462a      	mov	r2, r5
    c2f0:	4630      	mov	r0, r6
    c2f2:	f7ff fd1f 	bl	bd34 <le_advertising_report>
    c2f6:	e7ea      	b.n	c2ce <le_adv_ext_report.isra.77+0x112>
		}else if(!adi_present && aux_adi_present && !aux_ptr_present){		//aux packet
    c2f8:	2f00      	cmp	r7, #0
    c2fa:	d1c4      	bne.n	c286 <le_adv_ext_report.isra.77+0xca>
			adv_info->frag = 0x02; //last paacket of the data or complete packet
    c2fc:	2302      	movs	r3, #2
			adv_info->frag = 0x03;  // packet received on primary adv channel.
    c2fe:	70ab      	strb	r3, [r5, #2]
    c300:	e7c1      	b.n	c286 <le_adv_ext_report.isra.77+0xca>
		}else if(!adi_present && aux_adi_present && !aux_ptr_present){		//aux packet
    c302:	2f00      	cmp	r7, #0
    c304:	d0bf      	beq.n	c286 <le_adv_ext_report.isra.77+0xca>
		}else if(adi_present && aux_ptr_present){
    c306:	2b00      	cmp	r3, #0
    c308:	d0bd      	beq.n	c286 <le_adv_ext_report.isra.77+0xca>
			adv_info->frag = 0x03;  // packet received on primary adv channel.
    c30a:	2303      	movs	r3, #3
    c30c:	e7f7      	b.n	c2fe <le_adv_ext_report.isra.77+0x142>
    c30e:	bf00      	nop
    c310:	20004274 	.word	0x20004274

0000c314 <sys_get_le64>:
{
    c314:	4603      	mov	r3, r0
}
    c316:	6800      	ldr	r0, [r0, #0]
    c318:	6859      	ldr	r1, [r3, #4]
    c31a:	4770      	bx	lr

0000c31c <hci_cmd_handle>:
{
    c31c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    c31e:	8981      	ldrh	r1, [r0, #12]
{
    c320:	b097      	sub	sp, #92	; 0x5c
	struct net_buf *evt = NULL;
    c322:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    c324:	2902      	cmp	r1, #2
{
    c326:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    c328:	950b      	str	r5, [sp, #44]	; 0x2c
	if (cmd->len < sizeof(*chdr)) {
    c32a:	d802      	bhi.n	c332 <hci_cmd_handle+0x16>
		return NULL;
    c32c:	2000      	movs	r0, #0
}
    c32e:	b017      	add	sp, #92	; 0x5c
    c330:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    c332:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    c334:	4ebe      	ldr	r6, [pc, #760]	; (c630 <hci_cmd_handle+0x314>)
    c336:	781a      	ldrb	r2, [r3, #0]
    c338:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    c33a:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    c33c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    c340:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    c342:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    c344:	d8f2      	bhi.n	c32c <hci_cmd_handle+0x10>
	net_buf_pull(cmd, sizeof(*chdr));
    c346:	2103      	movs	r1, #3
    c348:	f104 0008 	add.w	r0, r4, #8
    c34c:	f00b fc8e 	bl	17c6c <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    c350:	8833      	ldrh	r3, [r6, #0]
    c352:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    c356:	0a9b      	lsrs	r3, r3, #10
    c358:	2b04      	cmp	r3, #4
    c35a:	f000 80bd 	beq.w	c4d8 <hci_cmd_handle+0x1bc>
    c35e:	d809      	bhi.n	c374 <hci_cmd_handle+0x58>
    c360:	2b01      	cmp	r3, #1
    c362:	d027      	beq.n	c3b4 <hci_cmd_handle+0x98>
    c364:	2b03      	cmp	r3, #3
    c366:	d03c      	beq.n	c3e2 <hci_cmd_handle+0xc6>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    c368:	2101      	movs	r1, #1
    c36a:	a80b      	add	r0, sp, #44	; 0x2c
    c36c:	f7ff fcc0 	bl	bcf0 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    c370:	2301      	movs	r3, #1
    c372:	e2d5      	b.n	c920 <hci_cmd_handle+0x604>
	switch (BT_OGF(_opcode)) {
    c374:	2b08      	cmp	r3, #8
    c376:	f000 8165 	beq.w	c644 <hci_cmd_handle+0x328>
    c37a:	2b3f      	cmp	r3, #63	; 0x3f
    c37c:	d1f4      	bne.n	c368 <hci_cmd_handle+0x4c>
	switch (ocf) {
    c37e:	3a01      	subs	r2, #1
    c380:	2a09      	cmp	r2, #9
    c382:	d8f1      	bhi.n	c368 <hci_cmd_handle+0x4c>
    c384:	a301      	add	r3, pc, #4	; (adr r3, c38c <hci_cmd_handle+0x70>)
    c386:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    c38a:	bf00      	nop
    c38c:	0000cc8d 	.word	0x0000cc8d
    c390:	0000ccbd 	.word	0x0000ccbd
    c394:	0000cce7 	.word	0x0000cce7
    c398:	0000c369 	.word	0x0000c369
    c39c:	0000c369 	.word	0x0000c369
    c3a0:	0000cd2d 	.word	0x0000cd2d
    c3a4:	0000c369 	.word	0x0000c369
    c3a8:	0000ccff 	.word	0x0000ccff
    c3ac:	0000cd39 	.word	0x0000cd39
    c3b0:	0000cda7 	.word	0x0000cda7
	switch (ocf) {
    c3b4:	2a06      	cmp	r2, #6
    c3b6:	d006      	beq.n	c3c6 <hci_cmd_handle+0xaa>
    c3b8:	2a1d      	cmp	r2, #29
    c3ba:	d1d5      	bne.n	c368 <hci_cmd_handle+0x4c>
	handle = sys_le16_to_cpu(cmd->handle);
    c3bc:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    c3be:	8818      	ldrh	r0, [r3, #0]
    c3c0:	f007 feec 	bl	1419c <ll_version_ind_send>
    c3c4:	e004      	b.n	c3d0 <hci_cmd_handle+0xb4>
    c3c6:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    c3c8:	7899      	ldrb	r1, [r3, #2]
    c3ca:	8818      	ldrh	r0, [r3, #0]
    c3cc:	f007 fefa 	bl	141c4 <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    c3d0:	2800      	cmp	r0, #0
    c3d2:	bf14      	ite	ne
    c3d4:	200c      	movne	r0, #12
    c3d6:	2000      	moveq	r0, #0
    c3d8:	f7ff fc5a 	bl	bc90 <cmd_status>
    c3dc:	900b      	str	r0, [sp, #44]	; 0x2c
	return evt;
    c3de:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c3e0:	e7a5      	b.n	c32e <hci_cmd_handle+0x12>
	switch (ocf) {
    c3e2:	2a2d      	cmp	r2, #45	; 0x2d
    c3e4:	d03a      	beq.n	c45c <hci_cmd_handle+0x140>
    c3e6:	d820      	bhi.n	c42a <hci_cmd_handle+0x10e>
    c3e8:	2a01      	cmp	r2, #1
    c3ea:	d02b      	beq.n	c444 <hci_cmd_handle+0x128>
    c3ec:	2a03      	cmp	r2, #3
    c3ee:	d1bb      	bne.n	c368 <hci_cmd_handle+0x4c>
	dup_count = -1;
    c3f0:	4b90      	ldr	r3, [pc, #576]	; (c634 <hci_cmd_handle+0x318>)
    c3f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c3f6:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    c3f8:	4b8f      	ldr	r3, [pc, #572]	; (c638 <hci_cmd_handle+0x31c>)
    c3fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c3fe:	f641 71ff 	movw	r1, #8191	; 0x1fff
    c402:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    c406:	4b8d      	ldr	r3, [pc, #564]	; (c63c <hci_cmd_handle+0x320>)
    c408:	2000      	movs	r0, #0
    c40a:	2100      	movs	r1, #0
    c40c:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    c410:	4b8b      	ldr	r3, [pc, #556]	; (c640 <hci_cmd_handle+0x324>)
    c412:	201f      	movs	r0, #31
    c414:	2100      	movs	r1, #0
    c416:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    c41a:	f007 fb4b 	bl	13ab4 <ll_reset>
	ccst = cmd_complete(evt, sizeof(*ccst));
    c41e:	2101      	movs	r1, #1
    c420:	a80b      	add	r0, sp, #44	; 0x2c
    c422:	f7ff fc65 	bl	bcf0 <cmd_complete>
	ccst->status = 0x00;
    c426:	2300      	movs	r3, #0
    c428:	e27a      	b.n	c920 <hci_cmd_handle+0x604>
	switch (ocf) {
    c42a:	2a7b      	cmp	r2, #123	; 0x7b
    c42c:	d02c      	beq.n	c488 <hci_cmd_handle+0x16c>
    c42e:	2a7c      	cmp	r2, #124	; 0x7c
    c430:	d041      	beq.n	c4b6 <hci_cmd_handle+0x19a>
    c432:	2a63      	cmp	r2, #99	; 0x63
    c434:	d198      	bne.n	c368 <hci_cmd_handle+0x4c>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    c436:	68a0      	ldr	r0, [r4, #8]
    c438:	f7ff ff6c 	bl	c314 <sys_get_le64>
    c43c:	4b7f      	ldr	r3, [pc, #508]	; (c63c <hci_cmd_handle+0x320>)
	le_event_mask = sys_get_le64(cmd->events);
    c43e:	e9c3 0100 	strd	r0, r1, [r3]
    c442:	e7ec      	b.n	c41e <hci_cmd_handle+0x102>
	event_mask = sys_get_le64(cmd->events);
    c444:	68a0      	ldr	r0, [r4, #8]
    c446:	f7ff ff65 	bl	c314 <sys_get_le64>
    c44a:	4b7b      	ldr	r3, [pc, #492]	; (c638 <hci_cmd_handle+0x31c>)
    c44c:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    c450:	4611      	mov	r1, r2
    c452:	a80b      	add	r0, sp, #44	; 0x2c
    c454:	f7ff fc4c 	bl	bcf0 <cmd_complete>
	ccst->status = 0x00;
    c458:	7005      	strb	r5, [r0, #0]
    c45a:	e7c0      	b.n	c3de <hci_cmd_handle+0xc2>
    c45c:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    c45e:	2104      	movs	r1, #4
    c460:	a80b      	add	r0, sp, #44	; 0x2c
	handle = sys_le16_to_cpu(cmd->handle);
    c462:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    c464:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    c466:	f7ff fc43 	bl	bcf0 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    c46a:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    c46c:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    c46e:	1cc2      	adds	r2, r0, #3
    c470:	4639      	mov	r1, r7
    c472:	4630      	mov	r0, r6
    c474:	f007 feba 	bl	141ec <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    c478:	2800      	cmp	r0, #0
    c47a:	bf14      	ite	ne
    c47c:	2302      	movne	r3, #2
    c47e:	2300      	moveq	r3, #0
    c480:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    c482:	f8a4 5001 	strh.w	r5, [r4, #1]
    c486:	e7aa      	b.n	c3de <hci_cmd_handle+0xc2>
	handle = sys_le16_to_cpu(cmd->handle);
    c488:	68a3      	ldr	r3, [r4, #8]
    c48a:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    c48c:	a90c      	add	r1, sp, #48	; 0x30
    c48e:	b2a0      	uxth	r0, r4
    c490:	f007 feb6 	bl	14200 <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
    c494:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    c496:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    c498:	a80b      	add	r0, sp, #44	; 0x2c
    c49a:	f7ff fc29 	bl	bcf0 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    c49e:	2d00      	cmp	r5, #0
    c4a0:	bf14      	ite	ne
    c4a2:	230c      	movne	r3, #12
    c4a4:	2300      	moveq	r3, #0
    c4a6:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    c4a8:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    c4ac:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    c4b0:	f8a0 3003 	strh.w	r3, [r0, #3]
    c4b4:	e793      	b.n	c3de <hci_cmd_handle+0xc2>
    c4b6:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    c4b8:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    c4ba:	8859      	ldrh	r1, [r3, #2]
    c4bc:	b2a0      	uxth	r0, r4
    c4be:	f007 feb3 	bl	14228 <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    c4c2:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    c4c4:	2103      	movs	r1, #3
    c4c6:	a80b      	add	r0, sp, #44	; 0x2c
    c4c8:	f7ff fc12 	bl	bcf0 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    c4cc:	2d00      	cmp	r5, #0
    c4ce:	bf14      	ite	ne
    c4d0:	230c      	movne	r3, #12
    c4d2:	2300      	moveq	r3, #0
    c4d4:	7003      	strb	r3, [r0, #0]
    c4d6:	e2db      	b.n	ca90 <hci_cmd_handle+0x774>
	switch (ocf) {
    c4d8:	3a01      	subs	r2, #1
    c4da:	2a08      	cmp	r2, #8
    c4dc:	f63f af44 	bhi.w	c368 <hci_cmd_handle+0x4c>
    c4e0:	a301      	add	r3, pc, #4	; (adr r3, c4e8 <hci_cmd_handle+0x1cc>)
    c4e2:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    c4e6:	bf00      	nop
    c4e8:	0000c50d 	.word	0x0000c50d
    c4ec:	0000c537 	.word	0x0000c537
    c4f0:	0000c5fd 	.word	0x0000c5fd
    c4f4:	0000c369 	.word	0x0000c369
    c4f8:	0000c369 	.word	0x0000c369
    c4fc:	0000c369 	.word	0x0000c369
    c500:	0000c369 	.word	0x0000c369
    c504:	0000c369 	.word	0x0000c369
    c508:	0000c619 	.word	0x0000c619
	rp = cmd_complete(evt, sizeof(*rp));
    c50c:	2109      	movs	r1, #9
    c50e:	a80b      	add	r0, sp, #44	; 0x2c
    c510:	f7ff fbee 	bl	bcf0 <cmd_complete>
	rp->status = 0x00;
    c514:	2300      	movs	r3, #0
    c516:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    c518:	7083      	strb	r3, [r0, #2]
    c51a:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    c51c:	f06f 030e 	mvn.w	r3, #14
    c520:	7143      	strb	r3, [r0, #5]
    c522:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    c524:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    c526:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    c528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    c52c:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    c52e:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    c530:	71c3      	strb	r3, [r0, #7]
    c532:	7203      	strb	r3, [r0, #8]
    c534:	e753      	b.n	c3de <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    c536:	2141      	movs	r1, #65	; 0x41
    c538:	a80b      	add	r0, sp, #44	; 0x2c
    c53a:	f7ff fbd9 	bl	bcf0 <cmd_complete>
	rp->status = 0x00;
    c53e:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    c540:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    c542:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    c544:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    c548:	f7f4 f9fb 	bl	942 <memset>
	rp->commands[2] |= BIT(7);
    c54c:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    c54e:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[36] |= BIT(1);
    c550:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
	rp->commands[38] |= BIT(7);
    c554:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
	rp->commands[2] |= BIT(7);
    c558:	f063 037f 	orn	r3, r3, #127	; 0x7f
    c55c:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    c55e:	79a3      	ldrb	r3, [r4, #6]
    c560:	f063 033f 	orn	r3, r3, #63	; 0x3f
    c564:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    c566:	7ae3      	ldrb	r3, [r4, #11]
    c568:	f043 0304 	orr.w	r3, r3, #4
    c56c:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    c56e:	7be3      	ldrb	r3, [r4, #15]
    c570:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    c574:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    c576:	7c23      	ldrb	r3, [r4, #16]
    c578:	f043 0302 	orr.w	r3, r3, #2
    c57c:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    c57e:	7de3      	ldrb	r3, [r4, #23]
    c580:	f043 0304 	orr.w	r3, r3, #4
    c584:	75e3      	strb	r3, [r4, #23]
	rp->commands[28] |= BIT(3);
    c586:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    c588:	f062 0208 	orn	r2, r2, #8
    c58c:	76a2      	strb	r2, [r4, #26]
	rp->commands[28] |= BIT(1) | BIT(2);
    c58e:	f043 030f 	orr.w	r3, r3, #15
	rp->commands[37] |= BIT(5);
    c592:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
	rp->commands[28] |= BIT(1) | BIT(2);
    c596:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    c598:	7863      	ldrb	r3, [r4, #1]
	rp->commands[37] |= BIT(6);
    c59a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
    c59e:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
	rp->commands[0] |= BIT(5);
    c5a2:	f043 0320 	orr.w	r3, r3, #32
	rp->commands[26] |= BIT(4) | BIT(5);
    c5a6:	22ff      	movs	r2, #255	; 0xff
    c5a8:	76e2      	strb	r2, [r4, #27]
	rp->commands[0] |= BIT(5);
    c5aa:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    c5ac:	7722      	strb	r2, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    c5ae:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[32] |= BIT(4) | BIT(5);
    c5b2:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[33] |= BIT(6) | BIT(7);
    c5b6:	f063 030f 	orn	r3, r3, #15
	rp->commands[32] |= BIT(4) | BIT(5);
    c5ba:	f042 0230 	orr.w	r2, r2, #48	; 0x30
    c5be:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[33] |= BIT(6) | BIT(7);
    c5c2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    c5c6:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(3);
    c5ca:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[38] |= BIT(7);
    c5ce:	f060 007f 	orn	r0, r0, #127	; 0x7f
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    c5d2:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[36] |= BIT(4);
    c5d6:	f061 0101 	orn	r1, r1, #1
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    c5da:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
    c5de:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
	rp->commands[36] |= BIT(4);
    c5e2:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    c5e6:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    c5ea:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
    c5ee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    c5f2:	f043 0304 	orr.w	r3, r3, #4
    c5f6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    c5fa:	e6f0      	b.n	c3de <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    c5fc:	2109      	movs	r1, #9
    c5fe:	a80b      	add	r0, sp, #44	; 0x2c
    c600:	f7ff fb76 	bl	bcf0 <cmd_complete>
	rp->status = 0x00;
    c604:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    c606:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    c608:	2208      	movs	r2, #8
	rp->status = 0x00;
    c60a:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    c60e:	f7f4 f998 	bl	942 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    c612:	2360      	movs	r3, #96	; 0x60
    c614:	7163      	strb	r3, [r4, #5]
    c616:	e6e2      	b.n	c3de <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    c618:	2107      	movs	r1, #7
    c61a:	a80b      	add	r0, sp, #44	; 0x2c
    c61c:	f7ff fb68 	bl	bcf0 <cmd_complete>
	rp->status = 0x00;
    c620:	4601      	mov	r1, r0
    c622:	2300      	movs	r3, #0
    c624:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    c628:	4618      	mov	r0, r3
    c62a:	f7ff f9e7 	bl	b9fc <ll_addr_get>
    c62e:	e6d6      	b.n	c3de <hci_cmd_handle+0xc2>
    c630:	20000b14 	.word	0x20000b14
    c634:	20000b1c 	.word	0x20000b1c
    c638:	2000dfd8 	.word	0x2000dfd8
    c63c:	20000ba8 	.word	0x20000ba8
    c640:	2000dfe0 	.word	0x2000dfe0
	switch (ocf) {
    c644:	3a01      	subs	r2, #1
    c646:	2a4d      	cmp	r2, #77	; 0x4d
    c648:	f63f ae8e 	bhi.w	c368 <hci_cmd_handle+0x4c>
    c64c:	a301      	add	r3, pc, #4	; (adr r3, c654 <hci_cmd_handle+0x338>)
    c64e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    c652:	bf00      	nop
    c654:	0000c78d 	.word	0x0000c78d
    c658:	0000c797 	.word	0x0000c797
    c65c:	0000c7af 	.word	0x0000c7af
    c660:	0000c369 	.word	0x0000c369
    c664:	0000c7d3 	.word	0x0000c7d3
    c668:	0000c879 	.word	0x0000c879
    c66c:	0000cd95 	.word	0x0000cd95
    c670:	0000c8dd 	.word	0x0000c8dd
    c674:	0000c8f9 	.word	0x0000c8f9
    c678:	0000c905 	.word	0x0000c905
    c67c:	0000c92f 	.word	0x0000c92f
    c680:	0000c947 	.word	0x0000c947
    c684:	0000c967 	.word	0x0000c967
    c688:	0000c991 	.word	0x0000c991
    c68c:	0000c7df 	.word	0x0000c7df
    c690:	0000c7f5 	.word	0x0000c7f5
    c694:	0000c807 	.word	0x0000c807
    c698:	0000c80f 	.word	0x0000c80f
    c69c:	0000ca43 	.word	0x0000ca43
    c6a0:	0000c9e9 	.word	0x0000c9e9
    c6a4:	0000ca1f 	.word	0x0000ca1f
    c6a8:	0000ca39 	.word	0x0000ca39
    c6ac:	0000c817 	.word	0x0000c817
    c6b0:	0000c83d 	.word	0x0000c83d
    c6b4:	0000c9f1 	.word	0x0000c9f1
    c6b8:	0000ca05 	.word	0x0000ca05
    c6bc:	0000ca15 	.word	0x0000ca15
    c6c0:	0000c853 	.word	0x0000c853
    c6c4:	0000c369 	.word	0x0000c369
    c6c8:	0000c369 	.word	0x0000c369
    c6cc:	0000c369 	.word	0x0000c369
    c6d0:	0000ca6d 	.word	0x0000ca6d
    c6d4:	0000ca97 	.word	0x0000ca97
    c6d8:	0000caa5 	.word	0x0000caa5
    c6dc:	0000cab5 	.word	0x0000cab5
    c6e0:	0000cacd 	.word	0x0000cacd
    c6e4:	0000c369 	.word	0x0000c369
    c6e8:	0000c369 	.word	0x0000c369
    c6ec:	0000cbd3 	.word	0x0000cbd3
    c6f0:	0000cbe1 	.word	0x0000cbe1
    c6f4:	0000cbe9 	.word	0x0000cbe9
    c6f8:	0000cbf9 	.word	0x0000cbf9
    c6fc:	0000cc0b 	.word	0x0000cc0b
    c700:	0000cc29 	.word	0x0000cc29
    c704:	0000cc47 	.word	0x0000cc47
    c708:	0000cc5d 	.word	0x0000cc5d
    c70c:	0000cae9 	.word	0x0000cae9
    c710:	0000cb01 	.word	0x0000cb01
    c714:	0000cb57 	.word	0x0000cb57
    c718:	0000cb75 	.word	0x0000cb75
    c71c:	0000c369 	.word	0x0000c369
    c720:	0000c369 	.word	0x0000c369
    c724:	0000c369 	.word	0x0000c369
    c728:	0000c895 	.word	0x0000c895
    c72c:	0000c8e9 	.word	0x0000c8e9
    c730:	0000c8f9 	.word	0x0000c8f9
    c734:	0000c925 	.word	0x0000c925
    c738:	0000c369 	.word	0x0000c369
    c73c:	0000c369 	.word	0x0000c369
    c740:	0000c369 	.word	0x0000c369
    c744:	0000c369 	.word	0x0000c369
    c748:	0000c369 	.word	0x0000c369
    c74c:	0000c369 	.word	0x0000c369
    c750:	0000c369 	.word	0x0000c369
    c754:	0000c369 	.word	0x0000c369
    c758:	0000c369 	.word	0x0000c369
    c75c:	0000c369 	.word	0x0000c369
    c760:	0000c369 	.word	0x0000c369
    c764:	0000c369 	.word	0x0000c369
    c768:	0000c369 	.word	0x0000c369
    c76c:	0000c369 	.word	0x0000c369
    c770:	0000c369 	.word	0x0000c369
    c774:	0000c369 	.word	0x0000c369
    c778:	0000c369 	.word	0x0000c369
    c77c:	0000cc73 	.word	0x0000cc73
    c780:	0000c369 	.word	0x0000c369
    c784:	0000c369 	.word	0x0000c369
    c788:	0000cc69 	.word	0x0000cc69
	le_event_mask = sys_get_le64(cmd->events);
    c78c:	68a0      	ldr	r0, [r4, #8]
    c78e:	f7ff fdc1 	bl	c314 <sys_get_le64>
    c792:	4bb2      	ldr	r3, [pc, #712]	; (ca5c <hci_cmd_handle+0x740>)
    c794:	e653      	b.n	c43e <hci_cmd_handle+0x122>
	rp = cmd_complete(evt, sizeof(*rp));
    c796:	2104      	movs	r1, #4
    c798:	a80b      	add	r0, sp, #44	; 0x2c
    c79a:	f7ff faa9 	bl	bcf0 <cmd_complete>
	rp->status = 0x00;
    c79e:	2300      	movs	r3, #0
    c7a0:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    c7a2:	2301      	movs	r3, #1
    c7a4:	7043      	strb	r3, [r0, #1]
    c7a6:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    c7a8:	2302      	movs	r3, #2
    c7aa:	70c3      	strb	r3, [r0, #3]
    c7ac:	e617      	b.n	c3de <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    c7ae:	2109      	movs	r1, #9
    c7b0:	a80b      	add	r0, sp, #44	; 0x2c
    c7b2:	f7ff fa9d 	bl	bcf0 <cmd_complete>
	rp->status = 0x00;
    c7b6:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    c7b8:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    c7ba:	2208      	movs	r2, #8
	rp->status = 0x00;
    c7bc:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    c7c0:	f7f4 f8bf 	bl	942 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    c7c4:	23ff      	movs	r3, #255	; 0xff
    c7c6:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    c7c8:	2349      	movs	r3, #73	; 0x49
    c7ca:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    c7cc:	2301      	movs	r3, #1
    c7ce:	70e3      	strb	r3, [r4, #3]
    c7d0:	e605      	b.n	c3de <hci_cmd_handle+0xc2>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    c7d2:	68a1      	ldr	r1, [r4, #8]
    c7d4:	2001      	movs	r0, #1
    c7d6:	f7ff f92b 	bl	ba30 <ll_addr_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    c7da:	4604      	mov	r4, r0
    c7dc:	e100      	b.n	c9e0 <hci_cmd_handle+0x6c4>
	rp = cmd_complete(evt, sizeof(*rp));
    c7de:	2102      	movs	r1, #2
    c7e0:	a80b      	add	r0, sp, #44	; 0x2c
    c7e2:	f7ff fa85 	bl	bcf0 <cmd_complete>
	rp->status = 0x00;
    c7e6:	2300      	movs	r3, #0
    c7e8:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    c7ea:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    c7ec:	f009 fd86 	bl	162fc <ll_wl_size_get>
    c7f0:	7060      	strb	r0, [r4, #1]
    c7f2:	e5f4      	b.n	c3de <hci_cmd_handle+0xc2>
	ccst = cmd_complete(evt, sizeof(*ccst));
    c7f4:	2101      	movs	r1, #1
    c7f6:	a80b      	add	r0, sp, #44	; 0x2c
    c7f8:	f7ff fa7a 	bl	bcf0 <cmd_complete>
    c7fc:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    c7fe:	f009 fd7f 	bl	16300 <ll_wl_clear>
	ccst->status = ll_rl_enable(enable);
    c802:	7020      	strb	r0, [r4, #0]
    c804:	e5eb      	b.n	c3de <hci_cmd_handle+0xc2>
	status = ll_wl_add(&cmd->addr);
    c806:	68a0      	ldr	r0, [r4, #8]
    c808:	f009 fe30 	bl	1646c <ll_wl_add>
    c80c:	e7e5      	b.n	c7da <hci_cmd_handle+0x4be>
	status = ll_wl_remove(&cmd->addr);
    c80e:	68a0      	ldr	r0, [r4, #8]
    c810:	f009 fd96 	bl	16340 <ll_wl_remove>
    c814:	e7e1      	b.n	c7da <hci_cmd_handle+0x4be>
    c816:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    c818:	2300      	movs	r3, #0
    c81a:	aa0c      	add	r2, sp, #48	; 0x30
    c81c:	f100 0110 	add.w	r1, r0, #16
    c820:	f00a fae6 	bl	16df0 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    c824:	2111      	movs	r1, #17
    c826:	a80b      	add	r0, sp, #44	; 0x2c
    c828:	f7ff fa62 	bl	bcf0 <cmd_complete>
	rp->status = 0x00;
    c82c:	2300      	movs	r3, #0
    c82e:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    c832:	2210      	movs	r2, #16
    c834:	a90c      	add	r1, sp, #48	; 0x30
	memcpy(rp->info, build_info, sizeof(build_info));
    c836:	f7f4 f858 	bl	8ea <memcpy>
    c83a:	e5d0      	b.n	c3de <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    c83c:	2109      	movs	r1, #9
    c83e:	a80b      	add	r0, sp, #44	; 0x2c
    c840:	f7ff fa56 	bl	bcf0 <cmd_complete>
	rp->status = 0x00;
    c844:	2300      	movs	r3, #0
    c846:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    c84a:	2108      	movs	r1, #8
    c84c:	f7ff f910 	bl	ba70 <bt_rand>
    c850:	e5c5      	b.n	c3de <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    c852:	2109      	movs	r1, #9
    c854:	a80b      	add	r0, sp, #44	; 0x2c
    c856:	f7ff fa4b 	bl	bcf0 <cmd_complete>
	rp->status = 0x00;
    c85a:	4601      	mov	r1, r0
    c85c:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
    c85e:	4602      	mov	r2, r0
	rp->status = 0x00;
    c860:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
    c864:	f46f 0040 	mvn.w	r0, #12582912	; 0xc00000
    c868:	f7ff f9fe 	bl	bc68 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    c86c:	f240 30ff 	movw	r0, #1023	; 0x3ff
    c870:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    c872:	f7ff f9f9 	bl	bc68 <sys_put_le32>
    c876:	e5b2      	b.n	c3de <hci_cmd_handle+0xc2>
    c878:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
    c87a:	7ba5      	ldrb	r5, [r4, #14]
    c87c:	79a3      	ldrb	r3, [r4, #6]
    c87e:	7962      	ldrb	r2, [r4, #5]
    c880:	7921      	ldrb	r1, [r4, #4]
    c882:	8820      	ldrh	r0, [r4, #0]
    c884:	9502      	str	r5, [sp, #8]
    c886:	7b65      	ldrb	r5, [r4, #13]
    c888:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    c88a:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    c88c:	9400      	str	r4, [sp, #0]
    c88e:	f008 fe0d 	bl	154ac <ll_adv_params_set>
    c892:	e7a2      	b.n	c7da <hci_cmd_handle+0x4be>
    c894:	68a4      	ldr	r4, [r4, #8]
	status = ll_ext_adv_params_set(cmd->handle, cmd->props, min_interval,
    c896:	2500      	movs	r5, #0
    c898:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    c89c:	7a23      	ldrb	r3, [r4, #8]
    c89e:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    c8a2:	7820      	ldrb	r0, [r4, #0]
    c8a4:	9509      	str	r5, [sp, #36]	; 0x24
    c8a6:	7d66      	ldrb	r6, [r4, #21]
    c8a8:	9608      	str	r6, [sp, #32]
    c8aa:	7d26      	ldrb	r6, [r4, #20]
    c8ac:	9607      	str	r6, [sp, #28]
    c8ae:	7ce6      	ldrb	r6, [r4, #19]
    c8b0:	9606      	str	r6, [sp, #24]
    c8b2:	7ca6      	ldrb	r6, [r4, #18]
    c8b4:	9605      	str	r6, [sp, #20]
    c8b6:	9504      	str	r5, [sp, #16]
    c8b8:	7c25      	ldrb	r5, [r4, #16]
    c8ba:	9503      	str	r5, [sp, #12]
    c8bc:	79e5      	ldrb	r5, [r4, #7]
    c8be:	9502      	str	r5, [sp, #8]
				   &cmd->direct_addr.a.val[0], cmd->prim_channel_map,
    c8c0:	f104 050a 	add.w	r5, r4, #10
	status = ll_ext_adv_params_set(cmd->handle, cmd->props, min_interval,
    c8c4:	9501      	str	r5, [sp, #4]
    c8c6:	7a64      	ldrb	r4, [r4, #9]
    c8c8:	9400      	str	r4, [sp, #0]
    c8ca:	f008 fe8b 	bl	155e4 <ll_ext_adv_params_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    c8ce:	2102      	movs	r1, #2
	status = ll_ext_adv_params_set(cmd->handle, cmd->props, min_interval,
    c8d0:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    c8d2:	a80b      	add	r0, sp, #44	; 0x2c
    c8d4:	f7ff fa0c 	bl	bcf0 <cmd_complete>
	ccst->status = status;
    c8d8:	7004      	strb	r4, [r0, #0]
    c8da:	e580      	b.n	c3de <hci_cmd_handle+0xc2>
    c8dc:	68a3      	ldr	r3, [r4, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    c8de:	1c59      	adds	r1, r3, #1
    c8e0:	7818      	ldrb	r0, [r3, #0]
    c8e2:	f009 f86f 	bl	159c4 <ll_adv_data_set>
    c8e6:	e59a      	b.n	c41e <hci_cmd_handle+0x102>
    c8e8:	68a0      	ldr	r0, [r4, #8]
	ll_ext_adv_data_set(cmd->len, &cmd->data[0], cmd->op, cmd->frag_pref);
    c8ea:	7883      	ldrb	r3, [r0, #2]
    c8ec:	7842      	ldrb	r2, [r0, #1]
    c8ee:	1d01      	adds	r1, r0, #4
    c8f0:	78c0      	ldrb	r0, [r0, #3]
    c8f2:	f009 f8d7 	bl	15aa4 <ll_ext_adv_data_set>
    c8f6:	e592      	b.n	c41e <hci_cmd_handle+0x102>
    c8f8:	68a3      	ldr	r3, [r4, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    c8fa:	1c59      	adds	r1, r3, #1
    c8fc:	7818      	ldrb	r0, [r3, #0]
    c8fe:	f009 fa07 	bl	15d10 <ll_scan_data_set>
    c902:	e58c      	b.n	c41e <hci_cmd_handle+0x102>
	status = ll_adv_enable(cmd->enable);
    c904:	68a3      	ldr	r3, [r4, #8]
    c906:	7818      	ldrb	r0, [r3, #0]
    c908:	f009 fa44 	bl	15d94 <ll_adv_enable>
	status = ll_scan_enable(cmd->enable);
    c90c:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    c90e:	2101      	movs	r1, #1
    c910:	a80b      	add	r0, sp, #44	; 0x2c
    c912:	f7ff f9ed 	bl	bcf0 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    c916:	2c00      	cmp	r4, #0
    c918:	bf18      	it	ne
    c91a:	230c      	movne	r3, #12
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    c91c:	bf08      	it	eq
    c91e:	2300      	moveq	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    c920:	7003      	strb	r3, [r0, #0]
    c922:	e55c      	b.n	c3de <hci_cmd_handle+0xc2>
	status = ll_ext_adv_enable(cmd->enable);
    c924:	68a3      	ldr	r3, [r4, #8]
    c926:	7818      	ldrb	r0, [r3, #0]
    c928:	f009 fa96 	bl	15e58 <ll_ext_adv_enable>
    c92c:	e7ee      	b.n	c90c <hci_cmd_handle+0x5f0>
    c92e:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    c930:	7963      	ldrb	r3, [r4, #5]
    c932:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    c936:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    c93a:	7820      	ldrb	r0, [r4, #0]
    c93c:	79a4      	ldrb	r4, [r4, #6]
    c93e:	9400      	str	r4, [sp, #0]
    c940:	f009 fb08 	bl	15f54 <ll_scan_params_set>
    c944:	e7e2      	b.n	c90c <hci_cmd_handle+0x5f0>
    c946:	68a2      	ldr	r2, [r4, #8]
    c948:	4b45      	ldr	r3, [pc, #276]	; (ca60 <hci_cmd_handle+0x744>)
	if (cmd->enable && cmd->filter_dup) {
    c94a:	7810      	ldrb	r0, [r2, #0]
    c94c:	b140      	cbz	r0, c960 <hci_cmd_handle+0x644>
    c94e:	7852      	ldrb	r2, [r2, #1]
    c950:	b132      	cbz	r2, c960 <hci_cmd_handle+0x644>
		dup_count = 0;
    c952:	2200      	movs	r2, #0
    c954:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    c956:	4b43      	ldr	r3, [pc, #268]	; (ca64 <hci_cmd_handle+0x748>)
		dup_count = -1;
    c958:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    c95a:	f009 fb1f 	bl	15f9c <ll_scan_enable>
    c95e:	e7d5      	b.n	c90c <hci_cmd_handle+0x5f0>
		dup_count = -1;
    c960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c964:	e7f8      	b.n	c958 <hci_cmd_handle+0x63c>
    c966:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    c968:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    c96c:	7963      	ldrb	r3, [r4, #5]
    c96e:	7922      	ldrb	r2, [r4, #4]
    c970:	8861      	ldrh	r1, [r4, #2]
    c972:	8820      	ldrh	r0, [r4, #0]
    c974:	9504      	str	r5, [sp, #16]
    c976:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    c97a:	9503      	str	r5, [sp, #12]
    c97c:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    c980:	9502      	str	r5, [sp, #8]
    c982:	7b25      	ldrb	r5, [r4, #12]
    c984:	9501      	str	r5, [sp, #4]
    c986:	3406      	adds	r4, #6
    c988:	9400      	str	r4, [sp, #0]
    c98a:	f009 fb41 	bl	16010 <ll_create_connection>
    c98e:	e51f      	b.n	c3d0 <hci_cmd_handle+0xb4>
	status = ll_connect_disable();
    c990:	f008 fc52 	bl	15238 <ll_connect_disable>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    c994:	4606      	mov	r6, r0
    c996:	bb28      	cbnz	r0, c9e4 <hci_cmd_handle+0x6c8>
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    c998:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c99c:	2001      	movs	r0, #1
    c99e:	f7f8 ff01 	bl	57a4 <bt_buf_get_rx>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c9a2:	4a31      	ldr	r2, [pc, #196]	; (ca68 <hci_cmd_handle+0x74c>)
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    c9a4:	900b      	str	r0, [sp, #44]	; 0x2c
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c9a6:	e9d2 4500 	ldrd	r4, r5, [r2]
    c9aa:	2400      	movs	r4, #0
    c9ac:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    c9b0:	ea54 0205 	orrs.w	r2, r4, r5
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    c9b4:	4603      	mov	r3, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c9b6:	d004      	beq.n	c9c2 <hci_cmd_handle+0x6a6>
    c9b8:	4632      	mov	r2, r6
    c9ba:	4631      	mov	r1, r6
    c9bc:	2002      	movs	r0, #2
    c9be:	f7ff fb2b 	bl	c018 <le_conn_complete.part.48>
		if ((*evt)->len) {
    c9c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c9c4:	8984      	ldrh	r4, [r0, #12]
    c9c6:	b14c      	cbz	r4, c9dc <hci_cmd_handle+0x6c0>
			ccst = cmd_complete(&cc, sizeof(*ccst));
    c9c8:	2101      	movs	r1, #1
    c9ca:	a80c      	add	r0, sp, #48	; 0x30
    c9cc:	f7ff f990 	bl	bcf0 <cmd_complete>
			ccst->status = cmd_status;
    c9d0:	2300      	movs	r3, #0
    c9d2:	7003      	strb	r3, [r0, #0]
			bt_recv_prio(cc);
    c9d4:	980c      	ldr	r0, [sp, #48]	; 0x30
    c9d6:	f7f8 fb4d 	bl	5074 <bt_recv_prio>
    c9da:	e500      	b.n	c3de <hci_cmd_handle+0xc2>
			net_buf_unref(*evt);
    c9dc:	f00b f898 	bl	17b10 <net_buf_unref>
	ccst = cmd_complete(evt, sizeof(*ccst));
    c9e0:	2101      	movs	r1, #1
    c9e2:	e776      	b.n	c8d2 <hci_cmd_handle+0x5b6>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    c9e4:	240c      	movs	r4, #12
    c9e6:	e7fb      	b.n	c9e0 <hci_cmd_handle+0x6c4>
	status = ll_chm_update(&cmd->ch_map[0]);
    c9e8:	68a0      	ldr	r0, [r4, #8]
    c9ea:	f007 fb29 	bl	14040 <ll_chm_update>
    c9ee:	e78d      	b.n	c90c <hci_cmd_handle+0x5f0>
    c9f0:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
    c9f2:	f100 030c 	add.w	r3, r0, #12
    c9f6:	f100 020a 	add.w	r2, r0, #10
    c9fa:	1c81      	adds	r1, r0, #2
    c9fc:	8800      	ldrh	r0, [r0, #0]
    c9fe:	f007 fde7 	bl	145d0 <ll_enc_req_send>
    ca02:	e4e5      	b.n	c3d0 <hci_cmd_handle+0xb4>
	handle = sys_le16_to_cpu(cmd->handle);
    ca04:	68a2      	ldr	r2, [r4, #8]
    ca06:	f832 4b02 	ldrh.w	r4, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    ca0a:	2100      	movs	r1, #0
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    ca0c:	b2a0      	uxth	r0, r4
    ca0e:	f007 fb6e 	bl	140ee <ll_start_enc_req_send>
    ca12:	e556      	b.n	c4c2 <hci_cmd_handle+0x1a6>
	handle = sys_le16_to_cpu(cmd->handle);
    ca14:	68a3      	ldr	r3, [r4, #8]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    ca16:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(cmd->handle);
    ca18:	881c      	ldrh	r4, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    ca1a:	2106      	movs	r1, #6
    ca1c:	e7f6      	b.n	ca0c <hci_cmd_handle+0x6f0>
	handle = sys_le16_to_cpu(cmd->handle);
    ca1e:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    ca20:	2108      	movs	r1, #8
    ca22:	a80b      	add	r0, sp, #44	; 0x2c
	handle = sys_le16_to_cpu(cmd->handle);
    ca24:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    ca26:	f7ff f963 	bl	bcf0 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    ca2a:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    ca2c:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    ca2e:	1cc1      	adds	r1, r0, #3
    ca30:	4630      	mov	r0, r6
    ca32:	f007 fb47 	bl	140c4 <ll_chm_get>
    ca36:	e51f      	b.n	c478 <hci_cmd_handle+0x15c>
	handle = sys_le16_to_cpu(cmd->handle);
    ca38:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    ca3a:	8818      	ldrh	r0, [r3, #0]
    ca3c:	f007 fb9a 	bl	14174 <ll_feature_req_send>
    ca40:	e4c6      	b.n	c3d0 <hci_cmd_handle+0xb4>
    ca42:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    ca44:	8911      	ldrh	r1, [r2, #8]
    ca46:	8893      	ldrh	r3, [r2, #4]
    ca48:	8810      	ldrh	r0, [r2, #0]
    ca4a:	9101      	str	r1, [sp, #4]
    ca4c:	88d2      	ldrh	r2, [r2, #6]
    ca4e:	9200      	str	r2, [sp, #0]
    ca50:	2200      	movs	r2, #0
    ca52:	4611      	mov	r1, r2
    ca54:	f007 fa7c 	bl	13f50 <ll_conn_update>
	*evt = cmd_status(status);
    ca58:	b2c0      	uxtb	r0, r0
    ca5a:	e4bd      	b.n	c3d8 <hci_cmd_handle+0xbc>
    ca5c:	2000dfe0 	.word	0x2000dfe0
    ca60:	20000b1c 	.word	0x20000b1c
    ca64:	20000b20 	.word	0x20000b20
    ca68:	2000dfd8 	.word	0x2000dfd8
    ca6c:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    ca6e:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    ca70:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    ca72:	8893      	ldrh	r3, [r2, #4]
    ca74:	9101      	str	r1, [sp, #4]
    ca76:	88d2      	ldrh	r2, [r2, #6]
    ca78:	9200      	str	r2, [sp, #0]
    ca7a:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    ca7c:	2102      	movs	r1, #2
    ca7e:	b2a0      	uxth	r0, r4
    ca80:	f007 fa66 	bl	13f50 <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
    ca84:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    ca86:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    ca88:	a80b      	add	r0, sp, #44	; 0x2c
    ca8a:	f7ff f931 	bl	bcf0 <cmd_complete>
	rp->status = status;
    ca8e:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    ca90:	f8a0 4001 	strh.w	r4, [r0, #1]
    ca94:	e4a3      	b.n	c3de <hci_cmd_handle+0xc2>
    ca96:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    ca98:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    ca9a:	789a      	ldrb	r2, [r3, #2]
    ca9c:	2300      	movs	r3, #0
    ca9e:	9301      	str	r3, [sp, #4]
    caa0:	9300      	str	r3, [sp, #0]
    caa2:	e7eb      	b.n	ca7c <hci_cmd_handle+0x760>
    caa4:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    caa6:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    caa8:	889a      	ldrh	r2, [r3, #4]
    caaa:	8859      	ldrh	r1, [r3, #2]
    caac:	b2a0      	uxth	r0, r4
    caae:	f007 fbd1 	bl	14254 <ll_length_req_send>
    cab2:	e506      	b.n	c4c2 <hci_cmd_handle+0x1a6>
	rp = cmd_complete(evt, sizeof(*rp));
    cab4:	2105      	movs	r1, #5
    cab6:	a80b      	add	r0, sp, #44	; 0x2c
    cab8:	f7ff f91a 	bl	bcf0 <cmd_complete>
    cabc:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    cabe:	1cc1      	adds	r1, r0, #3
    cac0:	3001      	adds	r0, #1
    cac2:	f007 fbeb 	bl	1429c <ll_length_default_get>
	rp->status = 0x00;
    cac6:	2300      	movs	r3, #0
    cac8:	7023      	strb	r3, [r4, #0]
    caca:	e488      	b.n	c3de <hci_cmd_handle+0xc2>
    cacc:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    cace:	8859      	ldrh	r1, [r3, #2]
    cad0:	8818      	ldrh	r0, [r3, #0]
    cad2:	f007 fbed 	bl	142b0 <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    cad6:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    cad8:	2101      	movs	r1, #1
    cada:	a80b      	add	r0, sp, #44	; 0x2c
    cadc:	f7ff f908 	bl	bcf0 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    cae0:	2c00      	cmp	r4, #0
    cae2:	bf18      	it	ne
    cae4:	231e      	movne	r3, #30
    cae6:	e719      	b.n	c91c <hci_cmd_handle+0x600>
	rp = cmd_complete(evt, sizeof(*rp));
    cae8:	2109      	movs	r1, #9
    caea:	a80b      	add	r0, sp, #44	; 0x2c
    caec:	f7ff f900 	bl	bcf0 <cmd_complete>
    caf0:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    caf2:	1dc3      	adds	r3, r0, #7
    caf4:	1d42      	adds	r2, r0, #5
    caf6:	1cc1      	adds	r1, r0, #3
    caf8:	3001      	adds	r0, #1
    cafa:	f007 fbe3 	bl	142c4 <ll_length_max_get>
    cafe:	e7e2      	b.n	cac6 <hci_cmd_handle+0x7aa>
	handle = sys_le16_to_cpu(cmd->handle);
    cb00:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    cb02:	2105      	movs	r1, #5
    cb04:	a80b      	add	r0, sp, #44	; 0x2c
	handle = sys_le16_to_cpu(cmd->handle);
    cb06:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    cb08:	f7ff f8f2 	bl	bcf0 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    cb0c:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    cb0e:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    cb10:	1d02      	adds	r2, r0, #4
    cb12:	1cc1      	adds	r1, r0, #3
    cb14:	4630      	mov	r0, r6
    cb16:	f007 fbde 	bl	142d6 <ll_phy_get>
	return __builtin_ffs(op);
    cb1a:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    cb1c:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    cb20:	2800      	cmp	r0, #0
    cb22:	bf14      	ite	ne
    cb24:	230c      	movne	r3, #12
    cb26:	2300      	moveq	r3, #0
    cb28:	7023      	strb	r3, [r4, #0]
    cb2a:	2a00      	cmp	r2, #0
    cb2c:	fa92 f3a2 	rbit	r3, r2
    cb30:	fab3 f383 	clz	r3, r3
    cb34:	7922      	ldrb	r2, [r4, #4]
    cb36:	bf08      	it	eq
    cb38:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    cb3c:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    cb3e:	70e3      	strb	r3, [r4, #3]
    cb40:	2a00      	cmp	r2, #0
    cb42:	fa92 f3a2 	rbit	r3, r2
    cb46:	fab3 f383 	clz	r3, r3
    cb4a:	bf08      	it	eq
    cb4c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    cb50:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    cb52:	7123      	strb	r3, [r4, #4]
    cb54:	e443      	b.n	c3de <hci_cmd_handle+0xc2>
    cb56:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    cb58:	781a      	ldrb	r2, [r3, #0]
    cb5a:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    cb5c:	bf44      	itt	mi
    cb5e:	2107      	movmi	r1, #7
    cb60:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    cb62:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    cb64:	bf44      	itt	mi
    cb66:	2207      	movmi	r2, #7
    cb68:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    cb6a:	7899      	ldrb	r1, [r3, #2]
    cb6c:	7858      	ldrb	r0, [r3, #1]
    cb6e:	f007 fbc7 	bl	14300 <ll_phy_default_set>
    cb72:	e7b0      	b.n	cad6 <hci_cmd_handle+0x7ba>
    cb74:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    cb76:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    cb78:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    cb7a:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    cb7e:	07d7      	lsls	r7, r2, #31
		cmd->tx_phys = mask_phys;
    cb80:	bf44      	itt	mi
    cb82:	2107      	movmi	r1, #7
    cb84:	70d9      	strbmi	r1, [r3, #3]
	if (!(cmd->tx_phys & 0x07) ||
    cb86:	78d9      	ldrb	r1, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    cb88:	0796      	lsls	r6, r2, #30
		cmd->rx_phys = mask_phys;
    cb8a:	bf44      	itt	mi
    cb8c:	2207      	movmi	r2, #7
    cb8e:	711a      	strbmi	r2, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    cb90:	074d      	lsls	r5, r1, #29
    cb92:	d002      	beq.n	cb9a <hci_cmd_handle+0x87e>
	    !(cmd->rx_phys & 0x07)) {
    cb94:	791b      	ldrb	r3, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    cb96:	075a      	lsls	r2, r3, #29
    cb98:	d105      	bne.n	cba6 <hci_cmd_handle+0x88a>
		ccst = cmd_complete(evt, sizeof(*ccst));
    cb9a:	2101      	movs	r1, #1
    cb9c:	a80b      	add	r0, sp, #44	; 0x2c
    cb9e:	f7ff f8a7 	bl	bcf0 <cmd_complete>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    cba2:	2312      	movs	r3, #18
    cba4:	e6bc      	b.n	c920 <hci_cmd_handle+0x604>
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    cba6:	ea41 0203 	orr.w	r2, r1, r3
    cbaa:	f012 0ff8 	tst.w	r2, #248	; 0xf8
    cbae:	d005      	beq.n	cbbc <hci_cmd_handle+0x8a0>
		ccst = cmd_complete(evt, sizeof(*ccst));
    cbb0:	2101      	movs	r1, #1
    cbb2:	a80b      	add	r0, sp, #44	; 0x2c
    cbb4:	f7ff f89c 	bl	bcf0 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    cbb8:	2311      	movs	r3, #17
    cbba:	e6b1      	b.n	c920 <hci_cmd_handle+0x604>
	if (phy_opts & 0x03) {
    cbbc:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
    cbc0:	bf1c      	itt	ne
    cbc2:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    cbc6:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    cbca:	f007 fba3 	bl	14314 <ll_phy_req_send>
    cbce:	f7ff bbff 	b.w	c3d0 <hci_cmd_handle+0xb4>
    cbd2:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    cbd4:	f100 0217 	add.w	r2, r0, #23
    cbd8:	1dc1      	adds	r1, r0, #7
    cbda:	f009 feaf 	bl	1693c <ll_rl_add>
    cbde:	e5fc      	b.n	c7da <hci_cmd_handle+0x4be>
	status = ll_rl_remove(&cmd->peer_id_addr);
    cbe0:	68a0      	ldr	r0, [r4, #8]
    cbe2:	f009 ff4d 	bl	16a80 <ll_rl_remove>
    cbe6:	e5f8      	b.n	c7da <hci_cmd_handle+0x4be>
	ccst = cmd_complete(evt, sizeof(*ccst));
    cbe8:	2101      	movs	r1, #1
    cbea:	a80b      	add	r0, sp, #44	; 0x2c
    cbec:	f7ff f880 	bl	bcf0 <cmd_complete>
    cbf0:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    cbf2:	f009 fe89 	bl	16908 <ll_rl_clear>
    cbf6:	e604      	b.n	c802 <hci_cmd_handle+0x4e6>
	rp = cmd_complete(evt, sizeof(*rp));
    cbf8:	2102      	movs	r1, #2
    cbfa:	a80b      	add	r0, sp, #44	; 0x2c
    cbfc:	f7ff f878 	bl	bcf0 <cmd_complete>
    cc00:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    cc02:	f009 fe7f 	bl	16904 <ll_rl_size_get>
    cc06:	7060      	strb	r0, [r4, #1]
    cc08:	e75d      	b.n	cac6 <hci_cmd_handle+0x7aa>
	memcpy(dst, src, sizeof(*dst));
    cc0a:	2207      	movs	r2, #7
    cc0c:	68a1      	ldr	r1, [r4, #8]
    cc0e:	a80c      	add	r0, sp, #48	; 0x30
    cc10:	f7f3 fe6b 	bl	8ea <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    cc14:	2107      	movs	r1, #7
    cc16:	a80b      	add	r0, sp, #44	; 0x2c
    cc18:	f7ff f86a 	bl	bcf0 <cmd_complete>
    cc1c:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    cc1e:	1c41      	adds	r1, r0, #1
    cc20:	a80c      	add	r0, sp, #48	; 0x30
    cc22:	f009 ffbb 	bl	16b9c <ll_rl_crpa_get>
    cc26:	e5ec      	b.n	c802 <hci_cmd_handle+0x4e6>
    cc28:	2207      	movs	r2, #7
    cc2a:	68a1      	ldr	r1, [r4, #8]
    cc2c:	a80c      	add	r0, sp, #48	; 0x30
    cc2e:	f7f3 fe5c 	bl	8ea <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    cc32:	2107      	movs	r1, #7
    cc34:	a80b      	add	r0, sp, #44	; 0x2c
    cc36:	f7ff f85b 	bl	bcf0 <cmd_complete>
    cc3a:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    cc3c:	1c41      	adds	r1, r0, #1
    cc3e:	a80c      	add	r0, sp, #48	; 0x30
    cc40:	f009 ffcc 	bl	16bdc <ll_rl_lrpa_get>
    cc44:	e5dd      	b.n	c802 <hci_cmd_handle+0x4e6>
	u8_t enable = cmd->enable;
    cc46:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    cc48:	2101      	movs	r1, #1
    cc4a:	a80b      	add	r0, sp, #44	; 0x2c
	u8_t enable = cmd->enable;
    cc4c:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    cc4e:	f7ff f84f 	bl	bcf0 <cmd_complete>
    cc52:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    cc54:	4628      	mov	r0, r5
    cc56:	f009 ffd9 	bl	16c0c <ll_rl_enable>
    cc5a:	e5d2      	b.n	c802 <hci_cmd_handle+0x4e6>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    cc5c:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    cc5e:	8818      	ldrh	r0, [r3, #0]
    cc60:	f009 ffe6 	bl	16c30 <ll_rl_timeout_set>
    cc64:	f7ff bbdb 	b.w	c41e <hci_cmd_handle+0x102>
    cc68:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    cc6a:	79c1      	ldrb	r1, [r0, #7]
    cc6c:	f009 ffe8 	bl	16c40 <ll_priv_mode_set>
    cc70:	e5b3      	b.n	c7da <hci_cmd_handle+0x4be>
	rp = cmd_complete(evt, sizeof(*rp));
    cc72:	2103      	movs	r1, #3
    cc74:	a80b      	add	r0, sp, #44	; 0x2c
    cc76:	f7ff f83b 	bl	bcf0 <cmd_complete>
	rp->status = 0x00;
    cc7a:	4601      	mov	r1, r0
    cc7c:	2300      	movs	r3, #0
    cc7e:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    cc82:	3001      	adds	r0, #1
    cc84:	f7fe fef0 	bl	ba68 <ll_tx_pwr_get>
    cc88:	f7ff bba9 	b.w	c3de <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    cc8c:	210d      	movs	r1, #13
    cc8e:	a80b      	add	r0, sp, #44	; 0x2c
    cc90:	f7ff f82e 	bl	bcf0 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    cc94:	2202      	movs	r2, #2
    cc96:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    cc98:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    cc9a:	2201      	movs	r2, #1
    cc9c:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    cc9e:	220b      	movs	r2, #11
	rp->status = 0x00;
    cca0:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    cca2:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    cca4:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    cca6:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    cca8:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    ccaa:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    ccac:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    ccae:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    ccb0:	7242      	strb	r2, [r0, #9]
    ccb2:	7283      	strb	r3, [r0, #10]
    ccb4:	72c3      	strb	r3, [r0, #11]
    ccb6:	7303      	strb	r3, [r0, #12]
    ccb8:	f7ff bb91 	b.w	c3de <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    ccbc:	2141      	movs	r1, #65	; 0x41
    ccbe:	a80b      	add	r0, sp, #44	; 0x2c
    ccc0:	f7ff f816 	bl	bcf0 <cmd_complete>
	rp->status = 0x00;
    ccc4:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    ccc6:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    ccc8:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    ccca:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    ccce:	f7f3 fe38 	bl	942 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    ccd2:	7863      	ldrb	r3, [r4, #1]
    ccd4:	f063 0358 	orn	r3, r3, #88	; 0x58
    ccd8:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    ccda:	78a3      	ldrb	r3, [r4, #2]
    ccdc:	f043 0303 	orr.w	r3, r3, #3
    cce0:	70a3      	strb	r3, [r4, #2]
    cce2:	f7ff bb7c 	b.w	c3de <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    cce6:	2109      	movs	r1, #9
    cce8:	a80b      	add	r0, sp, #44	; 0x2c
    ccea:	f7ff f801 	bl	bcf0 <cmd_complete>
	rp->status = 0x00;
    ccee:	2100      	movs	r1, #0
    ccf0:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    ccf4:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    ccf6:	f7f3 fe24 	bl	942 <memset>
    ccfa:	f7ff bb70 	b.w	c3de <hci_cmd_handle+0xc2>
	const char build_info[] = HCI_VS_BUILD_INFO;
    ccfe:	4b5c      	ldr	r3, [pc, #368]	; (ce70 <hci_cmd_handle+0xb54>)
    cd00:	aa0c      	add	r2, sp, #48	; 0x30
    cd02:	f103 0628 	add.w	r6, r3, #40	; 0x28
    cd06:	4615      	mov	r5, r2
    cd08:	6818      	ldr	r0, [r3, #0]
    cd0a:	6859      	ldr	r1, [r3, #4]
    cd0c:	4614      	mov	r4, r2
    cd0e:	c403      	stmia	r4!, {r0, r1}
    cd10:	3308      	adds	r3, #8
    cd12:	42b3      	cmp	r3, r6
    cd14:	4622      	mov	r2, r4
    cd16:	d1f7      	bne.n	cd08 <hci_cmd_handle+0x9ec>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    cd18:	2129      	movs	r1, #41	; 0x29
    cd1a:	a80b      	add	r0, sp, #44	; 0x2c
    cd1c:	f7fe ffe8 	bl	bcf0 <cmd_complete>
	rp->status = 0x00;
    cd20:	2300      	movs	r3, #0
    cd22:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    cd26:	2228      	movs	r2, #40	; 0x28
    cd28:	4629      	mov	r1, r5
    cd2a:	e584      	b.n	c836 <hci_cmd_handle+0x51a>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    cd2c:	68a1      	ldr	r1, [r4, #8]
    cd2e:	2000      	movs	r0, #0
    cd30:	f7fe fe7e 	bl	ba30 <ll_addr_set>
    cd34:	f7ff bb73 	b.w	c41e <hci_cmd_handle+0x102>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    cd38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cd3c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    cd40:	3201      	adds	r2, #1
    cd42:	d106      	bne.n	cd52 <hci_cmd_handle+0xa36>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    cd44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    cd48:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    cd4c:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    cd4e:	4293      	cmp	r3, r2
    cd50:	d020      	beq.n	cd94 <hci_cmd_handle+0xa78>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    cd52:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    cd56:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    cd5a:	07db      	lsls	r3, r3, #31
    cd5c:	d51a      	bpl.n	cd94 <hci_cmd_handle+0xa78>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    cd5e:	2118      	movs	r1, #24
    cd60:	a80b      	add	r0, sp, #44	; 0x2c
    cd62:	f7fe ffc5 	bl	bcf0 <cmd_complete>
		rp->status = 0x00;
    cd66:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    cd68:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    cd6a:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    cd6c:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    cd6e:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    cd70:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    cd74:	1ca1      	adds	r1, r4, #2
    cd76:	f7fe ff77 	bl	bc68 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    cd7a:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    cd7e:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    cd80:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    cd84:	f063 033f 	orn	r3, r3, #63	; 0x3f
    cd88:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    cd8a:	2210      	movs	r2, #16
    cd8c:	4631      	mov	r1, r6
    cd8e:	f104 0008 	add.w	r0, r4, #8
    cd92:	e7b0      	b.n	ccf6 <hci_cmd_handle+0x9da>
	rp = cmd_complete(evt, sizeof(*rp));
    cd94:	2102      	movs	r1, #2
    cd96:	a80b      	add	r0, sp, #44	; 0x2c
    cd98:	f7fe ffaa 	bl	bcf0 <cmd_complete>
	rp->status = 0x00;
    cd9c:	2300      	movs	r3, #0
    cd9e:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    cda0:	7043      	strb	r3, [r0, #1]
    cda2:	f7ff bb1c 	b.w	c3de <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    cda6:	2121      	movs	r1, #33	; 0x21
    cda8:	a80b      	add	r0, sp, #44	; 0x2c
    cdaa:	f7fe ffa1 	bl	bcf0 <cmd_complete>
	rp->status = 0x00;
    cdae:	4603      	mov	r3, r0
    cdb0:	2200      	movs	r2, #0
    cdb2:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    cdb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    cdba:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    cdbc:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    cdc0:	3101      	adds	r1, #1
    cdc2:	d04b      	beq.n	ce5c <hci_cmd_handle+0xb40>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    cdc4:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    cdc8:	3101      	adds	r1, #1
    cdca:	d047      	beq.n	ce5c <hci_cmd_handle+0xb40>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    cdcc:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    cdd0:	3101      	adds	r1, #1
    cdd2:	d043      	beq.n	ce5c <hci_cmd_handle+0xb40>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    cdd4:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    cdd8:	3101      	adds	r1, #1
    cdda:	d03f      	beq.n	ce5c <hci_cmd_handle+0xb40>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    cddc:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    cde0:	4619      	mov	r1, r3
    cde2:	f7fe ff41 	bl	bc68 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    cde6:	1d61      	adds	r1, r4, #5
    cde8:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    cdec:	f7fe ff3c 	bl	bc68 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    cdf0:	f104 0109 	add.w	r1, r4, #9
    cdf4:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    cdf8:	f7fe ff36 	bl	bc68 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    cdfc:	f104 010d 	add.w	r1, r4, #13
    ce00:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    ce04:	f7fe ff30 	bl	bc68 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    ce08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    ce0c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    ce10:	3301      	adds	r3, #1
    ce12:	f104 0311 	add.w	r3, r4, #17
    ce16:	d027      	beq.n	ce68 <hci_cmd_handle+0xb4c>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    ce18:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    ce1c:	3101      	adds	r1, #1
    ce1e:	d023      	beq.n	ce68 <hci_cmd_handle+0xb4c>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    ce20:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    ce24:	3101      	adds	r1, #1
    ce26:	d01f      	beq.n	ce68 <hci_cmd_handle+0xb4c>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    ce28:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    ce2c:	3101      	adds	r1, #1
    ce2e:	d01b      	beq.n	ce68 <hci_cmd_handle+0xb4c>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    ce30:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    ce34:	4619      	mov	r1, r3
    ce36:	f7fe ff17 	bl	bc68 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    ce3a:	f104 0115 	add.w	r1, r4, #21
    ce3e:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    ce42:	f7fe ff11 	bl	bc68 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    ce46:	f104 0119 	add.w	r1, r4, #25
    ce4a:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    ce4e:	f7fe ff0b 	bl	bc68 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    ce52:	f104 011d 	add.w	r1, r4, #29
    ce56:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    ce5a:	e50a      	b.n	c872 <hci_cmd_handle+0x556>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    ce5c:	2210      	movs	r2, #16
    ce5e:	2100      	movs	r1, #0
    ce60:	4618      	mov	r0, r3
    ce62:	f7f3 fd6e 	bl	942 <memset>
    ce66:	e7cf      	b.n	ce08 <hci_cmd_handle+0xaec>
		memset(rp->er, 0x00, sizeof(rp->er));
    ce68:	2210      	movs	r2, #16
    ce6a:	2100      	movs	r1, #0
    ce6c:	4618      	mov	r0, r3
    ce6e:	e742      	b.n	ccf6 <hci_cmd_handle+0x9da>
    ce70:	000212da 	.word	0x000212da

0000ce74 <hci_acl_handle>:
{
    ce74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    ce78:	2300      	movs	r3, #0
    ce7a:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    ce7c:	8983      	ldrh	r3, [r0, #12]
    ce7e:	2b03      	cmp	r3, #3
{
    ce80:	4606      	mov	r6, r0
    ce82:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    ce84:	d803      	bhi.n	ce8e <hci_acl_handle+0x1a>
		return -EINVAL;
    ce86:	f06f 0015 	mvn.w	r0, #21
    ce8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
    ce8e:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
    ce92:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
    ce94:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    ce96:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    ce98:	f00a fee8 	bl	17c6c <net_buf_simple_pull>
	if (buf->len < len) {
    ce9c:	89b3      	ldrh	r3, [r6, #12]
    ce9e:	42bb      	cmp	r3, r7
    cea0:	d3f1      	bcc.n	ce86 <hci_acl_handle+0x12>
	node_tx = ll_tx_mem_acquire();
    cea2:	f007 fb2d 	bl	14500 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    cea6:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    ceaa:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    ceac:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    ceb0:	b9f0      	cbnz	r0, cef0 <hci_acl_handle+0x7c>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    ceb2:	4b1e      	ldr	r3, [pc, #120]	; (cf2c <hci_acl_handle+0xb8>)
    ceb4:	e9d3 2300 	ldrd	r2, r3, [r3]
    ceb8:	2300      	movs	r3, #0
    ceba:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    cebe:	4313      	orrs	r3, r2
    cec0:	d012      	beq.n	cee8 <hci_acl_handle+0x74>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    cec2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    cec6:	2001      	movs	r0, #1
    cec8:	f7f8 fc6c 	bl	57a4 <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    cecc:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    cece:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    ced2:	211a      	movs	r1, #26
    ced4:	f7fe fed1 	bl	bc7a <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    ced8:	f8d8 0000 	ldr.w	r0, [r8]
    cedc:	2101      	movs	r1, #1
    cede:	3008      	adds	r0, #8
    cee0:	f00a fe74 	bl	17bcc <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    cee4:	2301      	movs	r3, #1
    cee6:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    cee8:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    ceec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cef0:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    cef2:	f1b9 0f00 	cmp.w	r9, #0
    cef6:	d002      	beq.n	cefe <hci_acl_handle+0x8a>
    cef8:	f1b9 0f02 	cmp.w	r9, #2
    cefc:	d113      	bne.n	cf26 <hci_acl_handle+0xb2>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    cefe:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    cf00:	f362 0301 	bfi	r3, r2, #0, #2
    cf04:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
    cf06:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    cf08:	68b1      	ldr	r1, [r6, #8]
    cf0a:	463a      	mov	r2, r7
    cf0c:	1de0      	adds	r0, r4, #7
    cf0e:	f7f3 fcec 	bl	8ea <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    cf12:	4621      	mov	r1, r4
    cf14:	4628      	mov	r0, r5
    cf16:	f007 faff 	bl	14518 <ll_tx_mem_enqueue>
    cf1a:	2800      	cmp	r0, #0
    cf1c:	d0e6      	beq.n	ceec <hci_acl_handle+0x78>
		ll_tx_mem_release(node_tx);
    cf1e:	4620      	mov	r0, r4
    cf20:	f007 faf4 	bl	1450c <ll_tx_mem_release>
    cf24:	e7af      	b.n	ce86 <hci_acl_handle+0x12>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    cf26:	2201      	movs	r2, #1
    cf28:	e7ea      	b.n	cf00 <hci_acl_handle+0x8c>
    cf2a:	bf00      	nop
    cf2c:	2000dfd8 	.word	0x2000dfd8

0000cf30 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    cf30:	7a03      	ldrb	r3, [r0, #8]
    cf32:	f003 0303 	and.w	r3, r3, #3
    cf36:	3b01      	subs	r3, #1
    cf38:	2b01      	cmp	r3, #1
{
    cf3a:	b570      	push	{r4, r5, r6, lr}
    cf3c:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
    cf3e:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
    cf40:	d81b      	bhi.n	cf7a <hci_acl_encode+0x4a>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    cf42:	f101 0608 	add.w	r6, r1, #8
    cf46:	4630      	mov	r0, r6
    cf48:	2104      	movs	r1, #4
    cf4a:	f00a fe3f 	bl	17bcc <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    cf4e:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
    cf50:	7a61      	ldrb	r1, [r4, #9]
    cf52:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    cf54:	f003 0303 	and.w	r3, r3, #3
    cf58:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    cf5a:	bf0c      	ite	eq
    cf5c:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    cf60:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    cf64:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
    cf66:	4630      	mov	r0, r6
    cf68:	f00a fe30 	bl	17bcc <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    cf6c:	7a62      	ldrb	r2, [r4, #9]
    cf6e:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
    cf72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    cf76:	f7f3 bcb8 	b.w	8ea <memcpy>
		LL_ASSERT(0);
    cf7a:	4040      	eors	r0, r0
    cf7c:	f380 8811 	msr	BASEPRI, r0
    cf80:	f04f 0004 	mov.w	r0, #4
    cf84:	df02      	svc	2
	...

0000cf88 <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    cf88:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf8a:	4604      	mov	r4, r0
    cf8c:	b08d      	sub	sp, #52	; 0x34
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    cf8e:	7923      	ldrb	r3, [r4, #4]
	handle = node_rx->hdr.handle;
    cf90:	88e6      	ldrh	r6, [r4, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    cf92:	2b01      	cmp	r3, #1
{
    cf94:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    cf96:	f100 0008 	add.w	r0, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    cf9a:	f000 8125 	beq.w	d1e8 <hci_evt_encode+0x260>
	switch (node_rx->hdr.type) {
    cf9e:	3b02      	subs	r3, #2
    cfa0:	2b0a      	cmp	r3, #10
    cfa2:	f200 81e0 	bhi.w	d366 <hci_evt_encode+0x3de>
    cfa6:	e8df f013 	tbh	[pc, r3, lsl #1]
    cfaa:	000b      	.short	0x000b
    cfac:	00110011 	.word	0x00110011
    cfb0:	004a0016 	.word	0x004a0016
    cfb4:	00810064 	.word	0x00810064
    cfb8:	00bd00a5 	.word	0x00bd00a5
    cfbc:	00ed00d2 	.word	0x00ed00d2
		le_advertising_report(pdu_data, b, buf);
    cfc0:	460a      	mov	r2, r1
    cfc2:	4621      	mov	r1, r4
    cfc4:	f7fe feb6 	bl	bd34 <le_advertising_report>
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    cfc8:	b00d      	add	sp, #52	; 0x34
    cfca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    cfcc:	460a      	mov	r2, r1
    cfce:	4621      	mov	r1, r4
    cfd0:	f7ff f8f4 	bl	c1bc <le_adv_ext_report.isra.77>
    cfd4:	e7f8      	b.n	cfc8 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cfd6:	4bb7      	ldr	r3, [pc, #732]	; (d2b4 <hci_evt_encode+0x32c>)
    cfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
    cfdc:	2200      	movs	r2, #0
    cfde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    cfe2:	4313      	orrs	r3, r2
    cfe4:	f104 060a 	add.w	r6, r4, #10
    cfe8:	d007      	beq.n	cffa <hci_evt_encode+0x72>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    cfea:	4bb3      	ldr	r3, [pc, #716]	; (d2b8 <hci_evt_encode+0x330>)
    cfec:	e9d3 2300 	ldrd	r2, r3, [r3]
    cff0:	2300      	movs	r3, #0
    cff2:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cff6:	4313      	orrs	r3, r2
    cff8:	d110      	bne.n	d01c <hci_evt_encode+0x94>
		addr.type = adv->tx_addr;
    cffa:	7a23      	ldrb	r3, [r4, #8]
    cffc:	ac0c      	add	r4, sp, #48	; 0x30
    cffe:	f3c3 1380 	ubfx	r3, r3, #6, #1
    d002:	f804 3d24 	strb.w	r3, [r4, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    d006:	4631      	mov	r1, r6
    d008:	2206      	movs	r2, #6
    d00a:	f10d 000d 	add.w	r0, sp, #13
    d00e:	f7f3 fc6c 	bl	8ea <memcpy>
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    d012:	a905      	add	r1, sp, #20
    d014:	4620      	mov	r0, r4
    d016:	f7ff f895 	bl	c144 <bt_addr_le_to_str.constprop.79>
    d01a:	e7d5      	b.n	cfc8 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    d01c:	2208      	movs	r2, #8
    d01e:	2113      	movs	r1, #19
    d020:	4628      	mov	r0, r5
    d022:	f7fe fe4f 	bl	bcc4 <meta_evt>
	sep->handle = 0;
    d026:	2300      	movs	r3, #0
    d028:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    d02a:	7a23      	ldrb	r3, [r4, #8]
    d02c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    d030:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    d032:	2206      	movs	r2, #6
    d034:	4631      	mov	r1, r6
    d036:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    d038:	f7f3 fc57 	bl	8ea <memcpy>
    d03c:	e7c4      	b.n	cfc8 <hci_evt_encode+0x40>
			le_conn_complete(cc->status, cc, handle, buf);
    d03e:	7ae7      	ldrb	r7, [r4, #11]
	if (!status) {
    d040:	b93f      	cbnz	r7, d052 <hci_evt_encode+0xca>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
    d042:	f104 0314 	add.w	r3, r4, #20
    d046:	22ff      	movs	r2, #255	; 0xff
    d048:	f104 010e 	add.w	r1, r4, #14
    d04c:	7b60      	ldrb	r0, [r4, #13]
    d04e:	f009 fd83 	bl	16b58 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d052:	4b98      	ldr	r3, [pc, #608]	; (d2b4 <hci_evt_encode+0x32c>)
    d054:	e9d3 2300 	ldrd	r2, r3, [r3]
    d058:	2200      	movs	r2, #0
    d05a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    d05e:	4313      	orrs	r3, r2
    d060:	d0b2      	beq.n	cfc8 <hci_evt_encode+0x40>
    d062:	462b      	mov	r3, r5
    d064:	4632      	mov	r2, r6
    d066:	f104 010b 	add.w	r1, r4, #11
    d06a:	4638      	mov	r0, r7
    d06c:	f7fe ffd4 	bl	c018 <le_conn_complete.part.48>
    d070:	e7aa      	b.n	cfc8 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    d072:	4b90      	ldr	r3, [pc, #576]	; (d2b4 <hci_evt_encode+0x32c>)
    d074:	e9d3 2300 	ldrd	r2, r3, [r3]
    d078:	2300      	movs	r3, #0
    d07a:	f002 0210 	and.w	r2, r2, #16
    d07e:	4313      	orrs	r3, r2
    d080:	d0a2      	beq.n	cfc8 <hci_evt_encode+0x40>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    d082:	2204      	movs	r2, #4
    d084:	2105      	movs	r1, #5
    d086:	4628      	mov	r0, r5
    d088:	f7fe fdf7 	bl	bc7a <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d08c:	2104      	movs	r1, #4
    d08e:	f105 0008 	add.w	r0, r5, #8
    d092:	f00a fd9b 	bl	17bcc <net_buf_simple_add>
	ep->status = 0x00;
    d096:	2300      	movs	r3, #0
	conn_count--;
    d098:	4a88      	ldr	r2, [pc, #544]	; (d2bc <hci_evt_encode+0x334>)
	ep->status = 0x00;
    d09a:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d09c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    d0a0:	7a23      	ldrb	r3, [r4, #8]
    d0a2:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    d0a4:	6813      	ldr	r3, [r2, #0]
    d0a6:	3b01      	subs	r3, #1
    d0a8:	6013      	str	r3, [r2, #0]
    d0aa:	e78d      	b.n	cfc8 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d0ac:	4b81      	ldr	r3, [pc, #516]	; (d2b4 <hci_evt_encode+0x32c>)
    d0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    d0b2:	2200      	movs	r2, #0
    d0b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    d0b8:	4313      	orrs	r3, r2
    d0ba:	d085      	beq.n	cfc8 <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    d0bc:	4b7e      	ldr	r3, [pc, #504]	; (d2b8 <hci_evt_encode+0x330>)
    d0be:	e9d3 2300 	ldrd	r2, r3, [r3]
    d0c2:	2300      	movs	r3, #0
    d0c4:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d0c8:	4313      	orrs	r3, r2
    d0ca:	f43f af7d 	beq.w	cfc8 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    d0ce:	2209      	movs	r2, #9
    d0d0:	2103      	movs	r1, #3
    d0d2:	4628      	mov	r0, r5
    d0d4:	f7fe fdf6 	bl	bcc4 <meta_evt>
	sep->status = radio_cu->status;
    d0d8:	7ae3      	ldrb	r3, [r4, #11]
    d0da:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    d0dc:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
    d0de:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    d0e2:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    d0e6:	89e3      	ldrh	r3, [r4, #14]
    d0e8:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    d0ec:	8a23      	ldrh	r3, [r4, #16]
    d0ee:	f8a0 3007 	strh.w	r3, [r0, #7]
    d0f2:	e769      	b.n	cfc8 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    d0f4:	4b6f      	ldr	r3, [pc, #444]	; (d2b4 <hci_evt_encode+0x32c>)
    d0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    d0fa:	2200      	movs	r2, #0
    d0fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d100:	4313      	orrs	r3, r2
    d102:	f43f af61 	beq.w	cfc8 <hci_evt_encode+0x40>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    d106:	2203      	movs	r2, #3
    d108:	2130      	movs	r1, #48	; 0x30
    d10a:	4628      	mov	r0, r5
    d10c:	f7fe fdb5 	bl	bc7a <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d110:	2103      	movs	r1, #3
    d112:	f105 0008 	add.w	r0, r5, #8
    d116:	f00a fd59 	bl	17bcc <net_buf_simple_add>
	ep->status = 0x00;
    d11a:	2300      	movs	r3, #0
    d11c:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d11e:	f8a0 6001 	strh.w	r6, [r0, #1]
    d122:	e751      	b.n	cfc8 <hci_evt_encode+0x40>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    d124:	4b66      	ldr	r3, [pc, #408]	; (d2c0 <hci_evt_encode+0x338>)
    d126:	e9d3 2300 	ldrd	r2, r3, [r3]
    d12a:	2300      	movs	r3, #0
    d12c:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    d130:	4313      	orrs	r3, r2
    d132:	f43f af49 	beq.w	cfc8 <hci_evt_encode+0x40>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    d136:	2202      	movs	r2, #2
    d138:	2157      	movs	r1, #87	; 0x57
    d13a:	4628      	mov	r0, r5
    d13c:	f7fe fd9d 	bl	bc7a <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d140:	2102      	movs	r1, #2
    d142:	f105 0008 	add.w	r0, r5, #8
    d146:	f00a fd41 	bl	17bcc <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    d14a:	8006      	strh	r6, [r0, #0]
    d14c:	e73c      	b.n	cfc8 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d14e:	4b59      	ldr	r3, [pc, #356]	; (d2b4 <hci_evt_encode+0x32c>)
    d150:	e9d3 2300 	ldrd	r2, r3, [r3]
    d154:	2200      	movs	r2, #0
    d156:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    d15a:	4313      	orrs	r3, r2
    d15c:	f43f af34 	beq.w	cfc8 <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    d160:	4b55      	ldr	r3, [pc, #340]	; (d2b8 <hci_evt_encode+0x330>)
    d162:	e9d3 2300 	ldrd	r2, r3, [r3]
    d166:	2300      	movs	r3, #0
    d168:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d16c:	4313      	orrs	r3, r2
    d16e:	f43f af2b 	beq.w	cfc8 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    d172:	2203      	movs	r2, #3
    d174:	2114      	movs	r1, #20
    d176:	4628      	mov	r0, r5
    d178:	f7fe fda4 	bl	bcc4 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    d17c:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    d17e:	7ae3      	ldrb	r3, [r4, #11]
    d180:	7083      	strb	r3, [r0, #2]
    d182:	e721      	b.n	cfc8 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d184:	4b4b      	ldr	r3, [pc, #300]	; (d2b4 <hci_evt_encode+0x32c>)
    d186:	e9d3 2300 	ldrd	r2, r3, [r3]
    d18a:	2200      	movs	r2, #0
    d18c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    d190:	4313      	orrs	r3, r2
    d192:	f43f af19 	beq.w	cfc8 <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    d196:	4b48      	ldr	r3, [pc, #288]	; (d2b8 <hci_evt_encode+0x330>)
    d198:	e9d3 2300 	ldrd	r2, r3, [r3]
    d19c:	2300      	movs	r3, #0
    d19e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d1a2:	4313      	orrs	r3, r2
    d1a4:	f43f af10 	beq.w	cfc8 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    d1a8:	2205      	movs	r2, #5
    d1aa:	210c      	movs	r1, #12
    d1ac:	4628      	mov	r0, r5
    d1ae:	f7fe fd89 	bl	bcc4 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    d1b2:	7ae3      	ldrb	r3, [r4, #11]
    d1b4:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    d1b6:	f8a0 6001 	strh.w	r6, [r0, #1]
    d1ba:	7b22      	ldrb	r2, [r4, #12]
    d1bc:	2a00      	cmp	r2, #0
    d1be:	fa92 f3a2 	rbit	r3, r2
    d1c2:	fab3 f383 	clz	r3, r3
    d1c6:	bf08      	it	eq
    d1c8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    d1cc:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    d1ce:	70c3      	strb	r3, [r0, #3]
    d1d0:	7b62      	ldrb	r2, [r4, #13]
    d1d2:	fa92 f3a2 	rbit	r3, r2
    d1d6:	2a00      	cmp	r2, #0
    d1d8:	fab3 f383 	clz	r3, r3
    d1dc:	bf08      	it	eq
    d1de:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    d1e2:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    d1e4:	7103      	strb	r3, [r0, #4]
    d1e6:	e6ef      	b.n	cfc8 <hci_evt_encode+0x40>
	switch (pdu_data->llctrl.opcode) {
    d1e8:	7ae3      	ldrb	r3, [r4, #11]
    d1ea:	3b03      	subs	r3, #3
    d1ec:	2b12      	cmp	r3, #18
    d1ee:	f200 80ba 	bhi.w	d366 <hci_evt_encode+0x3de>
    d1f2:	e8df f003 	tbb	[pc, r3]
    d1f6:	b80a      	.short	0xb80a
    d1f8:	b8af2fb8 	.word	0xb8af2fb8
    d1fc:	3cb8b835 	.word	0x3cb8b835
    d200:	b867b85b 	.word	0xb867b85b
    d204:	8fb8b8b8 	.word	0x8fb8b8b8
    d208:	8f          	.byte	0x8f
    d209:	00          	.byte	0x00
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d20a:	4b2a      	ldr	r3, [pc, #168]	; (d2b4 <hci_evt_encode+0x32c>)
    d20c:	e9d3 2300 	ldrd	r2, r3, [r3]
    d210:	2200      	movs	r2, #0
    d212:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    d216:	4313      	orrs	r3, r2
    d218:	f43f aed6 	beq.w	cfc8 <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    d21c:	4b26      	ldr	r3, [pc, #152]	; (d2b8 <hci_evt_encode+0x330>)
    d21e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d222:	2300      	movs	r3, #0
    d224:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d228:	4313      	orrs	r3, r2
    d22a:	f43f aecd 	beq.w	cfc8 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    d22e:	220c      	movs	r2, #12
    d230:	2105      	movs	r1, #5
    d232:	4628      	mov	r0, r5
    d234:	f7fe fd46 	bl	bcc4 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    d238:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    d23a:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    d23c:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    d240:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    d244:	f7f3 fb51 	bl	8ea <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    d248:	2202      	movs	r2, #2
    d24a:	f104 0114 	add.w	r1, r4, #20
    d24e:	f105 000a 	add.w	r0, r5, #10
    d252:	e6f1      	b.n	d038 <hci_evt_encode+0xb0>
		encrypt_change(0x00, handle, buf);
    d254:	460a      	mov	r2, r1
    d256:	2000      	movs	r0, #0
    d258:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    d25a:	f7fe fe8f 	bl	bf7c <encrypt_change>
    d25e:	e6b3      	b.n	cfc8 <hci_evt_encode+0x40>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    d260:	460b      	mov	r3, r1
    d262:	4632      	mov	r2, r6
    d264:	4601      	mov	r1, r0
    d266:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    d268:	f7fe fea8 	bl	bfbc <le_remote_feat_complete>
    d26c:	e6ac      	b.n	cfc8 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    d26e:	4b11      	ldr	r3, [pc, #68]	; (d2b4 <hci_evt_encode+0x32c>)
    d270:	e9d3 2300 	ldrd	r2, r3, [r3]
    d274:	2300      	movs	r3, #0
    d276:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    d27a:	4313      	orrs	r3, r2
    d27c:	f43f aea4 	beq.w	cfc8 <hci_evt_encode+0x40>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    d280:	2208      	movs	r2, #8
    d282:	210c      	movs	r1, #12
    d284:	4628      	mov	r0, r5
    d286:	f7fe fcf8 	bl	bc7a <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d28a:	2108      	movs	r1, #8
    d28c:	1868      	adds	r0, r5, r1
    d28e:	f00a fc9d 	bl	17bcc <net_buf_simple_add>
	ep->status = 0x00;
    d292:	2300      	movs	r3, #0
    d294:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d296:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    d29a:	7b23      	ldrb	r3, [r4, #12]
    d29c:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    d29e:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    d2a2:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    d2a4:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    d2a8:	80c3      	strh	r3, [r0, #6]
    d2aa:	e68d      	b.n	cfc8 <hci_evt_encode+0x40>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    d2ac:	460a      	mov	r2, r1
    d2ae:	7b20      	ldrb	r0, [r4, #12]
    d2b0:	4631      	mov	r1, r6
    d2b2:	e7d2      	b.n	d25a <hci_evt_encode+0x2d2>
    d2b4:	2000dfd8 	.word	0x2000dfd8
    d2b8:	2000dfe0 	.word	0x2000dfe0
    d2bc:	20000b18 	.word	0x20000b18
    d2c0:	20000ba8 	.word	0x20000ba8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d2c4:	4b2b      	ldr	r3, [pc, #172]	; (d374 <hci_evt_encode+0x3ec>)
    d2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    d2ca:	2200      	movs	r2, #0
    d2cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    d2d0:	4313      	orrs	r3, r2
    d2d2:	d007      	beq.n	d2e4 <hci_evt_encode+0x35c>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    d2d4:	4b28      	ldr	r3, [pc, #160]	; (d378 <hci_evt_encode+0x3f0>)
    d2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    d2da:	2300      	movs	r3, #0
    d2dc:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d2e0:	4313      	orrs	r3, r2
    d2e2:	d108      	bne.n	d2f6 <hci_evt_encode+0x36e>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    d2e4:	2300      	movs	r3, #0
    d2e6:	9301      	str	r3, [sp, #4]
    d2e8:	9300      	str	r3, [sp, #0]
    d2ea:	221a      	movs	r2, #26
    d2ec:	2102      	movs	r1, #2
    d2ee:	4630      	mov	r0, r6
    d2f0:	f006 fe2e 	bl	13f50 <ll_conn_update>
    d2f4:	e668      	b.n	cfc8 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    d2f6:	220a      	movs	r2, #10
    d2f8:	2106      	movs	r1, #6
    d2fa:	4628      	mov	r0, r5
    d2fc:	f7fe fce2 	bl	bcc4 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    d300:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    d302:	89a3      	ldrh	r3, [r4, #12]
    d304:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    d306:	89e3      	ldrh	r3, [r4, #14]
    d308:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    d30a:	8a23      	ldrh	r3, [r4, #16]
    d30c:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    d30e:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    d310:	8103      	strh	r3, [r0, #8]
    d312:	e659      	b.n	cfc8 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d314:	4b17      	ldr	r3, [pc, #92]	; (d374 <hci_evt_encode+0x3ec>)
    d316:	e9d3 2300 	ldrd	r2, r3, [r3]
    d31a:	2200      	movs	r2, #0
    d31c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    d320:	4313      	orrs	r3, r2
    d322:	f43f ae51 	beq.w	cfc8 <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    d326:	4b14      	ldr	r3, [pc, #80]	; (d378 <hci_evt_encode+0x3f0>)
    d328:	e9d3 2300 	ldrd	r2, r3, [r3]
    d32c:	2300      	movs	r3, #0
    d32e:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d332:	4313      	orrs	r3, r2
    d334:	f43f ae48 	beq.w	cfc8 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    d338:	220a      	movs	r2, #10
    d33a:	2107      	movs	r1, #7
    d33c:	4628      	mov	r0, r5
    d33e:	f7fe fcc1 	bl	bcc4 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    d342:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    d344:	8a23      	ldrh	r3, [r4, #16]
    d346:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    d348:	8a63      	ldrh	r3, [r4, #18]
    d34a:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    d34c:	89a3      	ldrh	r3, [r4, #12]
    d34e:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    d350:	89e3      	ldrh	r3, [r4, #14]
    d352:	e7dd      	b.n	d310 <hci_evt_encode+0x388>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    d354:	7b23      	ldrb	r3, [r4, #12]
    d356:	2b0e      	cmp	r3, #14
    d358:	f47f ae36 	bne.w	cfc8 <hci_evt_encode+0x40>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    d35c:	460b      	mov	r3, r1
    d35e:	4632      	mov	r2, r6
    d360:	2100      	movs	r1, #0
    d362:	201a      	movs	r0, #26
    d364:	e780      	b.n	d268 <hci_evt_encode+0x2e0>
		LL_ASSERT(0);
    d366:	4040      	eors	r0, r0
    d368:	f380 8811 	msr	BASEPRI, r0
    d36c:	f04f 0004 	mov.w	r0, #4
    d370:	df02      	svc	2
    d372:	bf00      	nop
    d374:	2000dfd8 	.word	0x2000dfd8
    d378:	2000dfe0 	.word	0x2000dfe0

0000d37c <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    d37c:	b570      	push	{r4, r5, r6, lr}
    d37e:	4606      	mov	r6, r0
    d380:	460d      	mov	r5, r1
    d382:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    d384:	2113      	movs	r1, #19
    d386:	2205      	movs	r2, #5
    d388:	f7fe fc77 	bl	bc7a <evt_create>

	ep = net_buf_add(buf, len);
    d38c:	2105      	movs	r1, #5
    d38e:	f106 0008 	add.w	r0, r6, #8
    d392:	f00a fc1b 	bl	17bcc <net_buf_simple_add>
	ep->num_handles = num_handles;
    d396:	2301      	movs	r3, #1
    d398:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    d39a:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    d39e:	f8a0 4003 	strh.w	r4, [r0, #3]
    d3a2:	bd70      	pop	{r4, r5, r6, pc}

0000d3a4 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    d3a4:	7903      	ldrb	r3, [r0, #4]
    d3a6:	2b01      	cmp	r3, #1
    d3a8:	d006      	beq.n	d3b8 <hci_get_class+0x14>
    d3aa:	3b02      	subs	r3, #2
    d3ac:	b2db      	uxtb	r3, r3
    d3ae:	2b0a      	cmp	r3, #10
    d3b0:	d80a      	bhi.n	d3c8 <hci_get_class+0x24>
    d3b2:	4a07      	ldr	r2, [pc, #28]	; (d3d0 <hci_get_class+0x2c>)
    d3b4:	56d0      	ldrsb	r0, [r2, r3]
    d3b6:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    d3b8:	7a03      	ldrb	r3, [r0, #8]
    d3ba:	f003 0303 	and.w	r3, r3, #3
    d3be:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    d3c0:	bf0c      	ite	eq
    d3c2:	2002      	moveq	r0, #2
    d3c4:	2003      	movne	r0, #3
    d3c6:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    d3c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
    d3cc:	4770      	bx	lr
    d3ce:	bf00      	nop
    d3d0:	00021283 	.word	0x00021283

0000d3d4 <hci_init>:
	dup_count = -1;
    d3d4:	4b0a      	ldr	r3, [pc, #40]	; (d400 <hci_init+0x2c>)
    d3d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d3da:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    d3dc:	4b09      	ldr	r3, [pc, #36]	; (d404 <hci_init+0x30>)
    d3de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d3e2:	f641 71ff 	movw	r1, #8191	; 0x1fff
    d3e6:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    d3ea:	4b07      	ldr	r3, [pc, #28]	; (d408 <hci_init+0x34>)
    d3ec:	2000      	movs	r0, #0
    d3ee:	2100      	movs	r1, #0
    d3f0:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    d3f4:	4b05      	ldr	r3, [pc, #20]	; (d40c <hci_init+0x38>)
    d3f6:	201f      	movs	r0, #31
    d3f8:	2100      	movs	r1, #0
    d3fa:	e9c3 0100 	strd	r0, r1, [r3]
    d3fe:	4770      	bx	lr
    d400:	20000b1c 	.word	0x20000b1c
    d404:	2000dfd8 	.word	0x2000dfd8
    d408:	20000ba8 	.word	0x20000ba8
    d40c:	2000dfe0 	.word	0x2000dfe0

0000d410 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    d410:	bf20      	wfe
	__SEV();
    d412:	bf40      	sev
	__WFE();
    d414:	bf20      	wfe
    d416:	4770      	bx	lr

0000d418 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    d418:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    d41a:	4b0d      	ldr	r3, [pc, #52]	; (d450 <pdu_len_cmp+0x38>)
{
    d41c:	b089      	sub	sp, #36	; 0x24
    d41e:	4605      	mov	r5, r0
    d420:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    d422:	aa01      	add	r2, sp, #4
    d424:	f103 0718 	add.w	r7, r3, #24
    d428:	6818      	ldr	r0, [r3, #0]
    d42a:	6859      	ldr	r1, [r3, #4]
    d42c:	4614      	mov	r4, r2
    d42e:	c403      	stmia	r4!, {r0, r1}
    d430:	3308      	adds	r3, #8
    d432:	42bb      	cmp	r3, r7
    d434:	4622      	mov	r2, r4
    d436:	d1f7      	bne.n	d428 <pdu_len_cmp+0x10>
    d438:	881b      	ldrh	r3, [r3, #0]
    d43a:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    d43c:	ab08      	add	r3, sp, #32
    d43e:	441d      	add	r5, r3
    d440:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    d444:	1b83      	subs	r3, r0, r6
    d446:	4258      	negs	r0, r3
    d448:	4158      	adcs	r0, r3
    d44a:	b009      	add	sp, #36	; 0x24
    d44c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d44e:	bf00      	nop
    d450:	00020611 	.word	0x00020611

0000d454 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    d454:	6008      	str	r0, [r1, #0]
    d456:	4770      	bx	lr

0000d458 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    d458:	b918      	cbnz	r0, d462 <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    d45a:	680b      	ldr	r3, [r1, #0]
    d45c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d460:	600b      	str	r3, [r1, #0]
    d462:	4770      	bx	lr

0000d464 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    d464:	b918      	cbnz	r0, d46e <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    d466:	680b      	ldr	r3, [r1, #0]
    d468:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    d46c:	600b      	str	r3, [r1, #0]
    d46e:	4770      	bx	lr

0000d470 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    d470:	b570      	push	{r4, r5, r6, lr}
    d472:	1d03      	adds	r3, r0, #4
    d474:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    d476:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    d478:	429d      	cmp	r5, r3
    d47a:	d101      	bne.n	d480 <chan_sel_remap+0x10>
    d47c:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    d47e:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    d480:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    d484:	2200      	movs	r2, #0
    d486:	18a0      	adds	r0, r4, r2
    d488:	2a08      	cmp	r2, #8
    d48a:	b2c0      	uxtb	r0, r0
    d48c:	d101      	bne.n	d492 <chan_sel_remap+0x22>
    d48e:	4604      	mov	r4, r0
    d490:	e7f2      	b.n	d478 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    d492:	f016 0f01 	tst.w	r6, #1
    d496:	d003      	beq.n	d4a0 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    d498:	2900      	cmp	r1, #0
    d49a:	d0f0      	beq.n	d47e <chan_sel_remap+0xe>
				chan_index--;
    d49c:	3901      	subs	r1, #1
    d49e:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    d4a0:	0876      	lsrs	r6, r6, #1
    d4a2:	3201      	adds	r2, #1
    d4a4:	e7ef      	b.n	d486 <chan_sel_remap+0x16>
	...

0000d4a8 <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    d4a8:	4b09      	ldr	r3, [pc, #36]	; (d4d0 <packet_rx_acquired_count_get+0x28>)
    d4aa:	f893 0d2a 	ldrb.w	r0, [r3, #3370]	; 0xd2a
	    _radio.packet_rx_last) {
    d4ae:	f893 2d29 	ldrb.w	r2, [r3, #3369]	; 0xd29
	if (_radio.packet_rx_acquire >=
    d4b2:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    d4b4:	bf3b      	ittet	cc
    d4b6:	f893 2d29 	ldrbcc.w	r2, [r3, #3369]	; 0xd29
    d4ba:	f893 3d28 	ldrbcc.w	r3, [r3, #3368]	; 0xd28
			_radio.packet_rx_last);
    d4be:	f893 3d29 	ldrbcs.w	r3, [r3, #3369]	; 0xd29
			_radio.packet_rx_last +
    d4c2:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    d4c4:	bf2c      	ite	cs
    d4c6:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    d4c8:	1a80      	subcc	r0, r0, r2
    d4ca:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
    d4cc:	4770      	bx	lr
    d4ce:	bf00      	nop
    d4d0:	20000bb0 	.word	0x20000bb0

0000d4d4 <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    d4d4:	b508      	push	{r3, lr}
    d4d6:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    d4d8:	f7ff ffe6 	bl	d4a8 <packet_rx_acquired_count_get>
    d4dc:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    d4de:	bf21      	itttt	cs
    d4e0:	4b04      	ldrcs	r3, [pc, #16]	; (d4f4 <packet_rx_reserve_get+0x20>)
    d4e2:	f893 2d29 	ldrbcs.w	r2, [r3, #3369]	; 0xd29
    d4e6:	f8d3 3d24 	ldrcs.w	r3, [r3, #3364]	; 0xd24
    d4ea:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
		return 0;
    d4ee:	bf38      	it	cc
    d4f0:	2000      	movcc	r0, #0
}
    d4f2:	bd08      	pop	{r3, pc}
    d4f4:	20000bb0 	.word	0x20000bb0

0000d4f8 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    d4f8:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    d4fa:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    d4fe:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
    d502:	429c      	cmp	r4, r3
    d504:	d15a      	bne.n	d5bc <conn_update_req+0xc4>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
    d506:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    d50a:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    d50e:	428b      	cmp	r3, r1
    d510:	d154      	bne.n	d5bc <conn_update_req+0xc4>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    d512:	f990 301d 	ldrsb.w	r3, [r0, #29]
    d516:	2b00      	cmp	r3, #0
    d518:	db25      	blt.n	d566 <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    d51a:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    d51c:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    d51e:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    d522:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    d524:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    d528:	4351      	muls	r1, r2
					      conn->supervision_reload *
    d52a:	227d      	movs	r2, #125	; 0x7d
    d52c:	434a      	muls	r2, r1
					      125 / 1000;
    d52e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    d532:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    d536:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    d53a:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
    d53e:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    d540:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    d544:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    d546:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    d548:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    d54c:	3c01      	subs	r4, #1
		conn->llcp.conn_upd.win_size = 1;
    d54e:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    d552:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
    d556:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    d55a:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
    d55e:	f880 4075 	strb.w	r4, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
    d562:	4618      	mov	r0, r3
    d564:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
    d566:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    d56a:	06dc      	lsls	r4, r3, #27
    d56c:	d428      	bmi.n	d5c0 <conn_update_req+0xc8>
		   (!conn->common.fex_valid ||
    d56e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
    d572:	069a      	lsls	r2, r3, #26
    d574:	d503      	bpl.n	d57e <conn_update_req+0x86>
		    (conn->llcp_features &
    d576:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
    d57a:	079b      	lsls	r3, r3, #30
    d57c:	d520      	bpl.n	d5c0 <conn_update_req+0xc8>
		conn->llcp_conn_param.latency = conn->latency;
    d57e:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval = conn->conn_interval;
    d580:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
    d582:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
						conn->supervision_reload *
    d586:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval = conn->conn_interval;
    d588:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    d58c:	4354      	muls	r4, r2
						conn->supervision_reload *
    d58e:	227d      	movs	r2, #125	; 0x7d
    d590:	4362      	muls	r2, r4
						125 / 1000;
    d592:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    d596:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    d59a:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
    d59e:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
    d5a2:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
    d5a4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    d5a8:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
    d5ac:	3901      	subs	r1, #1
		conn->llcp_conn_param.status = 0;
    d5ae:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
    d5b2:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
    d5b6:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    d5ba:	e7d2      	b.n	d562 <conn_update_req+0x6a>
		return 1;
    d5bc:	2001      	movs	r0, #1
    d5be:	bd30      	pop	{r4, r5, pc}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    d5c0:	2002      	movs	r0, #2
}
    d5c2:	bd30      	pop	{r4, r5, pc}

0000d5c4 <packet_rx_allocate>:
{
    d5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    d5c8:	4d22      	ldr	r5, [pc, #136]	; (d654 <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    d5ca:	f895 4d2a 	ldrb.w	r4, [r5, #3370]	; 0xd2a
    d5ce:	f895 9d3c 	ldrb.w	r9, [r5, #3388]	; 0xd3c
	if (acquire == _radio.packet_rx_count) {
    d5d2:	f895 3d28 	ldrb.w	r3, [r5, #3368]	; 0xd28
	acquire = _radio.packet_rx_acquire + 1;
    d5d6:	3401      	adds	r4, #1
    d5d8:	4581      	cmp	r9, r0
    d5da:	b2e4      	uxtb	r4, r4
    d5dc:	bf28      	it	cs
    d5de:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    d5e0:	f505 6753 	add.w	r7, r5, #3376	; 0xd30
		acquire = 0;
    d5e4:	42a3      	cmp	r3, r4
    d5e6:	bf08      	it	eq
    d5e8:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    d5ea:	f605 5818 	addw	r8, r5, #3352	; 0xd18
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    d5ee:	f1b9 0f00 	cmp.w	r9, #0
    d5f2:	d003      	beq.n	d5fc <packet_rx_allocate+0x38>
    d5f4:	f895 3d29 	ldrb.w	r3, [r5, #3369]	; 0xd29
    d5f8:	429c      	cmp	r4, r3
    d5fa:	d101      	bne.n	d600 <packet_rx_allocate+0x3c>
    d5fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    d600:	4638      	mov	r0, r7
    d602:	f7fd fa12 	bl	aa2a <mem_acquire>
		if (!link) {
    d606:	4606      	mov	r6, r0
    d608:	2800      	cmp	r0, #0
    d60a:	d0f7      	beq.n	d5fc <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    d60c:	4640      	mov	r0, r8
    d60e:	f7fd fa0c 	bl	aa2a <mem_acquire>
		if (!node_rx) {
    d612:	b928      	cbnz	r0, d620 <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    d614:	4630      	mov	r0, r6
    d616:	4910      	ldr	r1, [pc, #64]	; (d658 <packet_rx_allocate+0x94>)
}
    d618:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    d61c:	f7fd ba1f 	b.w	aa5e <mem_release>
		node_rx->hdr.onion.link = link;
    d620:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    d622:	f895 2d2a 	ldrb.w	r2, [r5, #3370]	; 0xd2a
    d626:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
    d62a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    d62e:	f885 4d2a 	strb.w	r4, [r5, #3370]	; 0xd2a
		if (acquire == _radio.packet_rx_count) {
    d632:	f895 3d28 	ldrb.w	r3, [r5, #3368]	; 0xd28
		acquire = _radio.packet_rx_acquire + 1;
    d636:	3401      	adds	r4, #1
    d638:	b2e4      	uxtb	r4, r4
			acquire = 0;
    d63a:	42a3      	cmp	r3, r4
    d63c:	bf08      	it	eq
    d63e:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    d640:	f895 3d3c 	ldrb.w	r3, [r5, #3388]	; 0xd3c
    d644:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    d648:	3b01      	subs	r3, #1
    d64a:	f885 3d3c 	strb.w	r3, [r5, #3388]	; 0xd3c
    d64e:	fa5f f989 	uxtb.w	r9, r9
    d652:	e7cc      	b.n	d5ee <packet_rx_allocate+0x2a>
    d654:	20000bb0 	.word	0x20000bb0
    d658:	200018e0 	.word	0x200018e0

0000d65c <common_init>:
{
    d65c:	b510      	push	{r4, lr}
	if (_radio.connection_count) {
    d65e:	4c34      	ldr	r4, [pc, #208]	; (d730 <common_init+0xd4>)
    d660:	f894 2cf8 	ldrb.w	r2, [r4, #3320]	; 0xcf8
    d664:	2a00      	cmp	r2, #0
    d666:	d037      	beq.n	d6d8 <common_init+0x7c>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    d668:	f604 43f4 	addw	r3, r4, #3316	; 0xcf4
    d66c:	f44f 71aa 	mov.w	r1, #340	; 0x154
    d670:	f8d4 0cf0 	ldr.w	r0, [r4, #3312]	; 0xcf0
    d674:	f7fd f9b2 	bl	a9dc <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    d678:	4b2e      	ldr	r3, [pc, #184]	; (d734 <common_init+0xd8>)
    d67a:	f894 2d22 	ldrb.w	r2, [r4, #3362]	; 0xd22
    d67e:	f8b4 1d20 	ldrh.w	r1, [r4, #3360]	; 0xd20
    d682:	f8d4 0d14 	ldr.w	r0, [r4, #3348]	; 0xd14
    d686:	f7fd f9a9 	bl	a9dc <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    d68a:	f894 1d28 	ldrb.w	r1, [r4, #3368]	; 0xd28
    d68e:	f894 2cf8 	ldrb.w	r2, [r4, #3320]	; 0xcf8
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    d692:	4b29      	ldr	r3, [pc, #164]	; (d738 <common_init+0xdc>)
    d694:	f8d4 0d2c 	ldr.w	r0, [r4, #3372]	; 0xd2c
    d698:	440a      	add	r2, r1
    d69a:	2108      	movs	r1, #8
    d69c:	f7fd f99e 	bl	a9dc <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    d6a0:	4b26      	ldr	r3, [pc, #152]	; (d73c <common_init+0xe0>)
    d6a2:	f8d4 0d40 	ldr.w	r0, [r4, #3392]	; 0xd40
    d6a6:	2202      	movs	r2, #2
    d6a8:	2124      	movs	r1, #36	; 0x24
    d6aa:	f7fd f997 	bl	a9dc <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    d6ae:	f894 2d5c 	ldrb.w	r2, [r4, #3420]	; 0xd5c
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    d6b2:	f8d4 0d48 	ldr.w	r0, [r4, #3400]	; 0xd48
    d6b6:	4b22      	ldr	r3, [pc, #136]	; (d740 <common_init+0xe4>)
    d6b8:	f8b4 1d50 	ldrh.w	r1, [r4, #3408]	; 0xd50
    d6bc:	3a01      	subs	r2, #1
    d6be:	b292      	uxth	r2, r2
    d6c0:	f7fd f98c 	bl	a9dc <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    d6c4:	481c      	ldr	r0, [pc, #112]	; (d738 <common_init+0xdc>)
    d6c6:	f7fd f9b0 	bl	aa2a <mem_acquire>
	LL_ASSERT(link);
    d6ca:	b940      	cbnz	r0, d6de <common_init+0x82>
    d6cc:	4040      	eors	r0, r0
    d6ce:	f380 8811 	msr	BASEPRI, r0
    d6d2:	f04f 0004 	mov.w	r0, #4
    d6d6:	df02      	svc	2
		_radio.conn_free = NULL;
    d6d8:	f8c4 2cf4 	str.w	r2, [r4, #3316]	; 0xcf4
    d6dc:	e7cc      	b.n	d678 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    d6de:	4a19      	ldr	r2, [pc, #100]	; (d744 <common_init+0xe8>)
    d6e0:	1f11      	subs	r1, r2, #4
    d6e2:	f7fd f9f9 	bl	aad8 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    d6e6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    d6ea:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    d6ee:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[4] = 0x1F;
    d6f2:	231f      	movs	r3, #31
    d6f4:	f884 3d06 	strb.w	r3, [r4, #3334]	; 0xd06
	_radio.data_chan_count = 37;
    d6f8:	2325      	movs	r3, #37	; 0x25
    d6fa:	f884 3d07 	strb.w	r3, [r4, #3335]	; 0xd07
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    d6fe:	231b      	movs	r3, #27
    d700:	f8a4 3d0a 	strh.w	r3, [r4, #3338]	; 0xd0a
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    d704:	f44f 73a4 	mov.w	r3, #328	; 0x148
	_radio.data_chan_map[0] = 0xFF;
    d708:	20ff      	movs	r0, #255	; 0xff
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    d70a:	f8a4 3d0c 	strh.w	r3, [r4, #3340]	; 0xd0c
	_radio.default_phy_tx |= BIT(2);
    d70e:	2307      	movs	r3, #7
	_radio.data_chan_map[0] = 0xFF;
    d710:	f884 0d02 	strb.w	r0, [r4, #3330]	; 0xd02
	_radio.data_chan_map[1] = 0xFF;
    d714:	f884 0d03 	strb.w	r0, [r4, #3331]	; 0xd03
	_radio.data_chan_map[2] = 0xFF;
    d718:	f884 0d04 	strb.w	r0, [r4, #3332]	; 0xd04
	_radio.data_chan_map[3] = 0xFF;
    d71c:	f884 0d05 	strb.w	r0, [r4, #3333]	; 0xd05
	_radio.default_phy_tx |= BIT(2);
    d720:	f8a4 3d0e 	strh.w	r3, [r4, #3342]	; 0xd0e
	_radio.default_phy_rx |= BIT(2);
    d724:	f8a4 3d10 	strh.w	r3, [r4, #3344]	; 0xd10
}
    d728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    d72c:	f7ff bf4a 	b.w	d5c4 <packet_rx_allocate>
    d730:	20000bb0 	.word	0x20000bb0
    d734:	200018c8 	.word	0x200018c8
    d738:	200018e0 	.word	0x200018e0
    d73c:	200018f4 	.word	0x200018f4
    d740:	200018fc 	.word	0x200018fc
    d744:	200018e8 	.word	0x200018e8

0000d748 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    d748:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    d74c:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    d74e:	4294      	cmp	r4, r2
{
    d750:	4681      	mov	r9, r0
    d752:	460f      	mov	r7, r1
    d754:	4690      	mov	r8, r2
	if (_first == last) {
    d756:	d03d      	beq.n	d7d4 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    d758:	4e1f      	ldr	r6, [pc, #124]	; (d7d8 <tx_cmplt_get+0x90>)
    d75a:	f8d6 3d58 	ldr.w	r3, [r6, #3416]	; 0xd58
    d75e:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    d762:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    d764:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    d766:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    d76a:	f606 5a4c 	addw	sl, r6, #3404	; 0xd4c
		if (*handle != _radio.pkt_release[_first].handle) {
    d76e:	b222      	sxth	r2, r4
    d770:	f8d6 0d58 	ldr.w	r0, [r6, #3416]	; 0xd58
    d774:	f8b9 e000 	ldrh.w	lr, [r9]
    d778:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    d77c:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    d780:	4596      	cmp	lr, r2
    d782:	d120      	bne.n	d7c6 <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    d784:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    d786:	2801      	cmp	r0, #1
    d788:	f020 0303 	bic.w	r3, r0, #3
    d78c:	d90a      	bls.n	d7a4 <tx_cmplt_get+0x5c>
    d78e:	b1f3      	cbz	r3, d7ce <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    d790:	1d02      	adds	r2, r0, #4
    d792:	d01c      	beq.n	d7ce <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    d794:	7942      	ldrb	r2, [r0, #5]
    d796:	b1d2      	cbz	r2, d7ce <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    d798:	7902      	ldrb	r2, [r0, #4]
    d79a:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    d79e:	3a01      	subs	r2, #1
    d7a0:	2a01      	cmp	r2, #1
    d7a2:	d814      	bhi.n	d7ce <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    d7a4:	2201      	movs	r2, #1
			cmplt++;
    d7a6:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    d7a8:	604a      	str	r2, [r1, #4]
			cmplt++;
    d7aa:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    d7ac:	b113      	cbz	r3, d7b4 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    d7ae:	4651      	mov	r1, sl
    d7b0:	f7fd f955 	bl	aa5e <mem_release>
		}

		_first = _first + 1;
    d7b4:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    d7b6:	f896 2d5c 	ldrb.w	r2, [r6, #3420]	; 0xd5c
		_first = _first + 1;
    d7ba:	b2e4      	uxtb	r4, r4
			_first = 0;
    d7bc:	42a2      	cmp	r2, r4
    d7be:	bf08      	it	eq
    d7c0:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    d7c2:	4544      	cmp	r4, r8
    d7c4:	d1d3      	bne.n	d76e <tx_cmplt_get+0x26>

	*first = _first;
    d7c6:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    d7c8:	4628      	mov	r0, r5
    d7ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    d7ce:	f8c1 b004 	str.w	fp, [r1, #4]
    d7d2:	e7eb      	b.n	d7ac <tx_cmplt_get+0x64>
		return 0;
    d7d4:	2500      	movs	r5, #0
    d7d6:	e7f7      	b.n	d7c8 <tx_cmplt_get+0x80>
    d7d8:	20000bb0 	.word	0x20000bb0

0000d7dc <connection_get>:
{
    d7dc:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    d7de:	4b09      	ldr	r3, [pc, #36]	; (d804 <connection_get+0x28>)
    d7e0:	f893 2cf8 	ldrb.w	r2, [r3, #3320]	; 0xcf8
    d7e4:	4282      	cmp	r2, r0
{
    d7e6:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    d7e8:	d90a      	bls.n	d800 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    d7ea:	4602      	mov	r2, r0
    d7ec:	f44f 71aa 	mov.w	r1, #340	; 0x154
    d7f0:	f8d3 0cf0 	ldr.w	r0, [r3, #3312]	; 0xcf0
    d7f4:	f7fd f94e 	bl	aa94 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    d7f8:	b110      	cbz	r0, d800 <connection_get+0x24>
    d7fa:	8c03      	ldrh	r3, [r0, #32]
    d7fc:	42a3      	cmp	r3, r4
    d7fe:	d000      	beq.n	d802 <connection_get+0x26>
	return 0;
    d800:	2000      	movs	r0, #0
}
    d802:	bd10      	pop	{r4, pc}
    d804:	20000bb0 	.word	0x20000bb0

0000d808 <role_disable>:
{
    d808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d80c:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    d80e:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    d810:	2805      	cmp	r0, #5
{
    d812:	4605      	mov	r5, r0
    d814:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    d816:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    d818:	d00e      	beq.n	d838 <role_disable+0x30>
    d81a:	2806      	cmp	r0, #6
    d81c:	f000 808e 	beq.w	d93c <role_disable+0x134>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    d820:	f240 8086 	bls.w	d930 <role_disable+0x128>
			conn_handle = ticker_id_primary -
    d824:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    d826:	b280      	uxth	r0, r0
    d828:	f7ff ffd8 	bl	d7dc <connection_get>
			if (!conn) {
    d82c:	2800      	cmp	r0, #0
    d82e:	f000 80d9 	beq.w	d9e4 <role_disable+0x1dc>
			ticks_active_to_start =
    d832:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    d836:	e010      	b.n	d85a <role_disable+0x52>
		ticks_xtal_to_start =
    d838:	4b6b      	ldr	r3, [pc, #428]	; (d9e8 <role_disable+0x1e0>)
    d83a:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    d83c:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d840:	ab02      	add	r3, sp, #8
    d842:	9300      	str	r3, [sp, #0]
    d844:	460a      	mov	r2, r1
    d846:	4b69      	ldr	r3, [pc, #420]	; (d9ec <role_disable+0x1e4>)
    d848:	2103      	movs	r1, #3
    d84a:	2000      	movs	r0, #0
    d84c:	f7fe f800 	bl	b850 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    d850:	2802      	cmp	r0, #2
    d852:	d066      	beq.n	d922 <role_disable+0x11a>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    d854:	9b02      	ldr	r3, [sp, #8]
    d856:	2b00      	cmp	r3, #0
    d858:	d167      	bne.n	d92a <role_disable+0x122>
	LL_ASSERT(!_radio.ticker_id_stop);
    d85a:	4c63      	ldr	r4, [pc, #396]	; (d9e8 <role_disable+0x1e0>)
    d85c:	7ca3      	ldrb	r3, [r4, #18]
    d85e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    d862:	2b00      	cmp	r3, #0
    d864:	d164      	bne.n	d930 <role_disable+0x128>
	ret_cb = TICKER_STATUS_BUSY;
    d866:	ab06      	add	r3, sp, #24
    d868:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    d86a:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    d86c:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d870:	2103      	movs	r1, #3
    d872:	9300      	str	r3, [sp, #0]
    d874:	462a      	mov	r2, r5
    d876:	4b5d      	ldr	r3, [pc, #372]	; (d9ec <role_disable+0x1e4>)
    d878:	f7fd ffea 	bl	b850 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    d87c:	2802      	cmp	r0, #2
    d87e:	d063      	beq.n	d948 <role_disable+0x140>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    d880:	9b02      	ldr	r3, [sp, #8]
    d882:	2b00      	cmp	r3, #0
    d884:	d145      	bne.n	d912 <role_disable+0x10a>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    d886:	7c23      	ldrb	r3, [r4, #16]
    d888:	429d      	cmp	r5, r3
    d88a:	d002      	beq.n	d892 <role_disable+0x8a>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    d88c:	7c63      	ldrb	r3, [r4, #17]
    d88e:	429d      	cmp	r5, r3
    d890:	d13b      	bne.n	d90a <role_disable+0x102>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    d892:	ab06      	add	r3, sp, #24
    d894:	2202      	movs	r2, #2
    d896:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d89a:	2200      	movs	r2, #0
    d89c:	9300      	str	r3, [sp, #0]
    d89e:	2103      	movs	r1, #3
    d8a0:	4b52      	ldr	r3, [pc, #328]	; (d9ec <role_disable+0x1e4>)
    d8a2:	4610      	mov	r0, r2
    d8a4:	f7fd ffd4 	bl	b850 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    d8a8:	2802      	cmp	r0, #2
    d8aa:	d107      	bne.n	d8bc <role_disable+0xb4>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    d8ac:	2201      	movs	r2, #1
    d8ae:	4611      	mov	r1, r2
    d8b0:	2003      	movs	r0, #3
    d8b2:	f7fd f95d 	bl	ab70 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    d8b6:	9b03      	ldr	r3, [sp, #12]
    d8b8:	2b02      	cmp	r3, #2
    d8ba:	d039      	beq.n	d930 <role_disable+0x128>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    d8bc:	9803      	ldr	r0, [sp, #12]
    d8be:	2800      	cmp	r0, #0
    d8c0:	d15e      	bne.n	d980 <role_disable+0x178>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    d8c2:	2302      	movs	r3, #2
    d8c4:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    d8c6:	7c23      	ldrb	r3, [r4, #16]
    d8c8:	2b00      	cmp	r3, #0
    d8ca:	d031      	beq.n	d930 <role_disable+0x128>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d8cc:	ab04      	add	r3, sp, #16
    d8ce:	9300      	str	r3, [sp, #0]
    d8d0:	2201      	movs	r2, #1
    d8d2:	4b46      	ldr	r3, [pc, #280]	; (d9ec <role_disable+0x1e4>)
		_radio.ticker_id_prepare = 0;
    d8d4:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d8d6:	2103      	movs	r1, #3
    d8d8:	f7fd ffba 	bl	b850 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    d8dc:	2802      	cmp	r0, #2
    d8de:	d107      	bne.n	d8f0 <role_disable+0xe8>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    d8e0:	2201      	movs	r2, #1
    d8e2:	4611      	mov	r1, r2
    d8e4:	2003      	movs	r0, #3
    d8e6:	f7fd f943 	bl	ab70 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    d8ea:	9b04      	ldr	r3, [sp, #16]
    d8ec:	2b02      	cmp	r3, #2
    d8ee:	d01f      	beq.n	d930 <role_disable+0x128>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    d8f0:	9a04      	ldr	r2, [sp, #16]
    d8f2:	2a00      	cmp	r2, #0
    d8f4:	d136      	bne.n	d964 <role_disable+0x15c>
			ticks_xtal_to_start &= ~XON_BITMASK;
    d8f6:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    d8fa:	45b0      	cmp	r8, r6
    d8fc:	d93e      	bls.n	d97c <role_disable+0x174>
				ret = mayfly_enqueue(
    d8fe:	4b3c      	ldr	r3, [pc, #240]	; (d9f0 <role_disable+0x1e8>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    d900:	4611      	mov	r1, r2
    d902:	2003      	movs	r0, #3
    d904:	f7fd f95c 	bl	abc0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    d908:	b990      	cbnz	r0, d930 <role_disable+0x128>
	if (!_radio.ticker_id_stop) {
    d90a:	7ca3      	ldrb	r3, [r4, #18]
    d90c:	b90b      	cbnz	r3, d912 <role_disable+0x10a>
		ret_cb = TICKER_STATUS_FAILURE;
    d90e:	2301      	movs	r3, #1
    d910:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    d912:	2300      	movs	r3, #0
    d914:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    d916:	9802      	ldr	r0, [sp, #8]
}
    d918:	b006      	add	sp, #24
    d91a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				cpu_sleep();
    d91e:	f7ff fd77 	bl	d410 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    d922:	9b02      	ldr	r3, [sp, #8]
    d924:	2b02      	cmp	r3, #2
    d926:	d0fa      	beq.n	d91e <role_disable+0x116>
    d928:	e794      	b.n	d854 <role_disable+0x4c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    d92a:	9b02      	ldr	r3, [sp, #8]
    d92c:	2b01      	cmp	r3, #1
    d92e:	d094      	beq.n	d85a <role_disable+0x52>
		LL_ASSERT(0);
    d930:	4040      	eors	r0, r0
    d932:	f380 8811 	msr	BASEPRI, r0
    d936:	f04f 0004 	mov.w	r0, #4
    d93a:	df02      	svc	2
		ticks_xtal_to_start =
    d93c:	4b2a      	ldr	r3, [pc, #168]	; (d9e8 <role_disable+0x1e0>)
    d93e:	f8d3 6c1c 	ldr.w	r6, [r3, #3100]	; 0xc1c
		ticks_active_to_start =
    d942:	f8d3 8c20 	ldr.w	r8, [r3, #3104]	; 0xc20
		break;
    d946:	e788      	b.n	d85a <role_disable+0x52>
		if (_radio.ticker_id_event == ticker_id_primary) {
    d948:	7c63      	ldrb	r3, [r4, #17]
    d94a:	429d      	cmp	r5, r3
    d94c:	d104      	bne.n	d958 <role_disable+0x150>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    d94e:	2201      	movs	r2, #1
    d950:	4611      	mov	r1, r2
    d952:	2003      	movs	r0, #3
    d954:	f7fd f90c 	bl	ab70 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    d958:	9b02      	ldr	r3, [sp, #8]
    d95a:	2b02      	cmp	r3, #2
    d95c:	d190      	bne.n	d880 <role_disable+0x78>
			cpu_sleep();
    d95e:	f7ff fd57 	bl	d410 <cpu_sleep>
    d962:	e7f9      	b.n	d958 <role_disable+0x150>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    d964:	9b04      	ldr	r3, [sp, #16]
    d966:	2b01      	cmp	r3, #1
    d968:	d1e2      	bne.n	d930 <role_disable+0x128>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    d96a:	2200      	movs	r2, #0
    d96c:	4611      	mov	r1, r2
    d96e:	4b20      	ldr	r3, [pc, #128]	; (d9f0 <role_disable+0x1e8>)
    d970:	2003      	movs	r0, #3
    d972:	f7fd f925 	bl	abc0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    d976:	4602      	mov	r2, r0
    d978:	2800      	cmp	r0, #0
    d97a:	d1d9      	bne.n	d930 <role_disable+0x128>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    d97c:	4b1d      	ldr	r3, [pc, #116]	; (d9f4 <role_disable+0x1ec>)
    d97e:	e7bf      	b.n	d900 <role_disable+0xf8>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    d980:	9d03      	ldr	r5, [sp, #12]
    d982:	2d01      	cmp	r5, #1
    d984:	d1d4      	bne.n	d930 <role_disable+0x128>
		if (ticker_id_stop != TICKER_NULL) {
    d986:	2fff      	cmp	r7, #255	; 0xff
    d988:	d019      	beq.n	d9be <role_disable+0x1b6>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    d98a:	ab06      	add	r3, sp, #24
    d98c:	2202      	movs	r2, #2
    d98e:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d992:	2103      	movs	r1, #3
    d994:	9300      	str	r3, [sp, #0]
    d996:	463a      	mov	r2, r7
    d998:	4b14      	ldr	r3, [pc, #80]	; (d9ec <role_disable+0x1e4>)
    d99a:	2000      	movs	r0, #0
    d99c:	f7fd ff58 	bl	b850 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    d9a0:	2802      	cmp	r0, #2
    d9a2:	d107      	bne.n	d9b4 <role_disable+0x1ac>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    d9a4:	462a      	mov	r2, r5
    d9a6:	4629      	mov	r1, r5
    d9a8:	2003      	movs	r0, #3
    d9aa:	f7fd f8e1 	bl	ab70 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    d9ae:	9b05      	ldr	r3, [sp, #20]
    d9b0:	2b02      	cmp	r3, #2
    d9b2:	d0bd      	beq.n	d930 <role_disable+0x128>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    d9b4:	9b05      	ldr	r3, [sp, #20]
    d9b6:	b113      	cbz	r3, d9be <role_disable+0x1b6>
    d9b8:	9b05      	ldr	r3, [sp, #20]
    d9ba:	2b01      	cmp	r3, #1
    d9bc:	d1b8      	bne.n	d930 <role_disable+0x128>
		if (_radio.role != ROLE_NONE) {
    d9be:	7ce3      	ldrb	r3, [r4, #19]
    d9c0:	2b00      	cmp	r3, #0
    d9c2:	d0a2      	beq.n	d90a <role_disable+0x102>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    d9c4:	4b0c      	ldr	r3, [pc, #48]	; (d9f8 <role_disable+0x1f0>)
    d9c6:	2204      	movs	r2, #4
    d9c8:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    d9ca:	2200      	movs	r2, #0
    d9cc:	4611      	mov	r1, r2
    d9ce:	2003      	movs	r0, #3
    d9d0:	f7fd f8f6 	bl	abc0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    d9d4:	2800      	cmp	r0, #0
    d9d6:	d1ab      	bne.n	d930 <role_disable+0x128>
			while (_radio.role != ROLE_NONE) {
    d9d8:	7ce3      	ldrb	r3, [r4, #19]
    d9da:	2b00      	cmp	r3, #0
    d9dc:	d095      	beq.n	d90a <role_disable+0x102>
				cpu_sleep();
    d9de:	f7ff fd17 	bl	d410 <cpu_sleep>
    d9e2:	e7f9      	b.n	d9d8 <role_disable+0x1d0>
				return 1;
    d9e4:	2001      	movs	r0, #1
    d9e6:	e797      	b.n	d918 <role_disable+0x110>
    d9e8:	20000bb0 	.word	0x20000bb0
    d9ec:	0000d455 	.word	0x0000d455
    d9f0:	2000e028 	.word	0x2000e028
    d9f4:	2000e0e8 	.word	0x2000e0e8
    d9f8:	2000e058 	.word	0x2000e058

0000d9fc <rx_packet_set>:
{
    d9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
    d9fe:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
    da02:	8e05      	ldrh	r5, [r0, #48]	; 0x30
{
    da04:	4606      	mov	r6, r0
	phy = conn->phy_rx;
    da06:	f004 0407 	and.w	r4, r4, #7
{
    da0a:	460f      	mov	r7, r1
	radio_phy_set(phy, 0);
    da0c:	4620      	mov	r0, r4
    da0e:	2100      	movs	r1, #0
    da10:	f009 fb80 	bl	17114 <radio_phy_set>
	if (conn->enc_rx) {
    da14:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    da18:	f013 0f10 	tst.w	r3, #16
    da1c:	ea4f 0244 	mov.w	r2, r4, lsl #1
    da20:	d010      	beq.n	da44 <rx_packet_set+0x48>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    da22:	1d29      	adds	r1, r5, #4
    da24:	f042 0201 	orr.w	r2, r2, #1
    da28:	b2c9      	uxtb	r1, r1
    da2a:	2008      	movs	r0, #8
    da2c:	f009 fbd6 	bl	171dc <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    da30:	463a      	mov	r2, r7
    da32:	4621      	mov	r1, r4
    da34:	f106 00f9 	add.w	r0, r6, #249	; 0xf9
    da38:	f009 fe16 	bl	17668 <radio_ccm_rx_pkt_set>
}
    da3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
    da40:	f009 bbfe 	b.w	17240 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    da44:	2008      	movs	r0, #8
    da46:	f042 0201 	orr.w	r2, r2, #1
    da4a:	b2e9      	uxtb	r1, r5
    da4c:	f009 fbc6 	bl	171dc <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    da50:	4638      	mov	r0, r7
    da52:	e7f3      	b.n	da3c <rx_packet_set+0x40>

0000da54 <tx_packet_set>:
{
    da54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    da56:	460f      	mov	r7, r1
	phy = conn->phy_tx;
    da58:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
    da5c:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
    da5e:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
    da62:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
    da64:	09c9      	lsrs	r1, r1, #7
    da66:	4620      	mov	r0, r4
    da68:	f009 fb54 	bl	17114 <radio_phy_set>
	if (conn->enc_tx) {
    da6c:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    da70:	f013 0f20 	tst.w	r3, #32
    da74:	ea4f 0244 	mov.w	r2, r4, lsl #1
    da78:	d00f      	beq.n	da9a <tx_packet_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    da7a:	1d29      	adds	r1, r5, #4
    da7c:	b2c9      	uxtb	r1, r1
    da7e:	2008      	movs	r0, #8
    da80:	f042 0201 	orr.w	r2, r2, #1
    da84:	f009 fbaa 	bl	171dc <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    da88:	4639      	mov	r1, r7
    da8a:	f506 708d 	add.w	r0, r6, #282	; 0x11a
    da8e:	f009 fe41 	bl	17714 <radio_ccm_tx_pkt_set>
}
    da92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
    da96:	f009 bbd9 	b.w	1724c <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    da9a:	2008      	movs	r0, #8
    da9c:	f042 0201 	orr.w	r2, r2, #1
    daa0:	b2e9      	uxtb	r1, r5
    daa2:	f009 fb9b 	bl	171dc <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    daa6:	4638      	mov	r0, r7
    daa8:	e7f3      	b.n	da92 <tx_packet_set+0x3e>
	...

0000daac <chan_set>:
{
    daac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	pdu = (void *)_radio.advertiser.adv_data.data
    dab0:	4e7d      	ldr	r6, [pc, #500]	; (dca8 <chan_set+0x1fc>)
    dab2:	f896 322e 	ldrb.w	r3, [r6, #558]	; 0x22e
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    dab6:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    daba:	4433      	add	r3, r6
{
    dabc:	4604      	mov	r4, r0
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    dabe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    dac2:	f003 030f 	and.w	r3, r3, #15
    dac6:	2b07      	cmp	r3, #7
    dac8:	f040 80e0 	bne.w	dc8c <chan_set+0x1e0>
		switch (chan) {
    dacc:	2826      	cmp	r0, #38	; 0x26
    dace:	f8df 8214 	ldr.w	r8, [pc, #532]	; dce4 <chan_set+0x238>
    dad2:	d030      	beq.n	db36 <chan_set+0x8a>
    dad4:	2827      	cmp	r0, #39	; 0x27
    dad6:	f8df a210 	ldr.w	sl, [pc, #528]	; dce8 <chan_set+0x23c>
    dada:	f8df 9210 	ldr.w	r9, [pc, #528]	; dcec <chan_set+0x240>
    dade:	d034      	beq.n	db4a <chan_set+0x9e>
    dae0:	2825      	cmp	r0, #37	; 0x25
    dae2:	d162      	bne.n	dbaa <chan_set+0xfe>
			stop_time_37 = k_cycle_get_32();
    dae4:	f7f5 fcaa 	bl	343c <_timer_cycle_get_32>
			cycles_spent_37 = stop_time_37 - start_time37;
    dae8:	4e70      	ldr	r6, [pc, #448]	; (dcac <chan_set+0x200>)
			stop_time_37 = k_cycle_get_32();
    daea:	4b71      	ldr	r3, [pc, #452]	; (dcb0 <chan_set+0x204>)
			cycles_spent_37 = stop_time_37 - start_time37;
    daec:	6837      	ldr	r7, [r6, #0]
			stop_time_37 = k_cycle_get_32();
    daee:	6018      	str	r0, [r3, #0]
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    daf0:	f8da 2000 	ldr.w	r2, [sl]
			cycles_spent_37 = stop_time_37 - start_time37;
    daf4:	4b6f      	ldr	r3, [pc, #444]	; (dcb4 <chan_set+0x208>)
    daf6:	1bc7      	subs	r7, r0, r7
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    daf8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
			cycles_spent_37 = stop_time_37 - start_time37;
    dafc:	601f      	str	r7, [r3, #0]
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    dafe:	fb82 2305 	smull	r2, r3, r2, r5
    db02:	fba2 0107 	umull	r0, r1, r2, r7
    db06:	f8d9 2000 	ldr.w	r2, [r9]
    db0a:	fb07 1103 	mla	r1, r7, r3, r1
    db0e:	17d3      	asrs	r3, r2, #31
    db10:	f7f2 fbaa 	bl	268 <__aeabi_uldivmod>
    db14:	4b68      	ldr	r3, [pc, #416]	; (dcb8 <chan_set+0x20c>)
    db16:	fbb0 f0f5 	udiv	r0, r0, r5
    db1a:	6018      	str	r0, [r3, #0]
			start_time = k_cycle_get_32();
    db1c:	f7f5 fc8e 	bl	343c <_timer_cycle_get_32>
    db20:	f8c8 0000 	str.w	r0, [r8]
			start_time37= k_cycle_get_32();
    db24:	f7f5 fc8a 	bl	343c <_timer_cycle_get_32>
			pckt_send++;
    db28:	4a64      	ldr	r2, [pc, #400]	; (dcbc <chan_set+0x210>)
			start_time37= k_cycle_get_32();
    db2a:	6030      	str	r0, [r6, #0]
			pckt_send++;
    db2c:	7813      	ldrb	r3, [r2, #0]
    db2e:	3301      	adds	r3, #1
    db30:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(2);
    db32:	2002      	movs	r0, #2
    db34:	e09e      	b.n	dc74 <chan_set+0x1c8>
			start_time = k_cycle_get_32();
    db36:	f7f5 fc81 	bl	343c <_timer_cycle_get_32>
			pckt_send++;
    db3a:	4a60      	ldr	r2, [pc, #384]	; (dcbc <chan_set+0x210>)
			start_time = k_cycle_get_32();
    db3c:	f8c8 0000 	str.w	r0, [r8]
			pckt_send++;
    db40:	7813      	ldrb	r3, [r2, #0]
    db42:	3301      	adds	r3, #1
    db44:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(26);
    db46:	201a      	movs	r0, #26
    db48:	e094      	b.n	dc74 <chan_set+0x1c8>
			stop_time_39 = k_cycle_get_32();
    db4a:	f7f5 fc77 	bl	343c <_timer_cycle_get_32>
    db4e:	4b5c      	ldr	r3, [pc, #368]	; (dcc0 <chan_set+0x214>)
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    db50:	f8da 2000 	ldr.w	r2, [sl]
			stop_time_39 = k_cycle_get_32();
    db54:	6018      	str	r0, [r3, #0]
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    db56:	f8d8 3000 	ldr.w	r3, [r8]
    db5a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    db5e:	eba0 0e03 	sub.w	lr, r0, r3
    db62:	fb82 2307 	smull	r2, r3, r2, r7
    db66:	fbae 0102 	umull	r0, r1, lr, r2
    db6a:	f8d9 2000 	ldr.w	r2, [r9]
    db6e:	fb0e 1103 	mla	r1, lr, r3, r1
    db72:	17d3      	asrs	r3, r2, #31
    db74:	f7f2 fb78 	bl	268 <__aeabi_uldivmod>
    db78:	4b52      	ldr	r3, [pc, #328]	; (dcc4 <chan_set+0x218>)
    db7a:	fbb0 f0f7 	udiv	r0, r0, r7
    db7e:	6018      	str	r0, [r3, #0]
			pckt_send = 0;
    db80:	4b4e      	ldr	r3, [pc, #312]	; (dcbc <chan_set+0x210>)
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    db82:	2500      	movs	r5, #0
			pckt_send = 0;
    db84:	701d      	strb	r5, [r3, #0]
			start_time = k_cycle_get_32();
    db86:	f7f5 fc59 	bl	343c <_timer_cycle_get_32>
			_radio.ext_advertiser.current_slot++;
    db8a:	f896 3c69 	ldrb.w	r3, [r6, #3177]	; 0xc69
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    db8e:	f896 2c68 	ldrb.w	r2, [r6, #3176]	; 0xc68
			start_time = k_cycle_get_32();
    db92:	f8c8 0000 	str.w	r0, [r8]
			_radio.ext_advertiser.current_slot++;
    db96:	3301      	adds	r3, #1
    db98:	b2db      	uxtb	r3, r3
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    db9a:	429a      	cmp	r2, r3
			_radio.ext_advertiser.current_slot++;
    db9c:	f886 3c69 	strb.w	r3, [r6, #3177]	; 0xc69
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    dba0:	d201      	bcs.n	dba6 <chan_set+0xfa>
			_radio.ext_advertiser.current_slot= 0;
    dba2:	f886 5c69 	strb.w	r5, [r6, #3177]	; 0xc69
			radio_freq_chan_set(80);
    dba6:	2050      	movs	r0, #80	; 0x50
    dba8:	e064      	b.n	dc74 <chan_set+0x1c8>
			stop_time_aux1 = k_cycle_get_32();
    dbaa:	f7f5 fc47 	bl	343c <_timer_cycle_get_32>
    dbae:	4b46      	ldr	r3, [pc, #280]	; (dcc8 <chan_set+0x21c>)
    dbb0:	6018      	str	r0, [r3, #0]
    dbb2:	f8da 3000 	ldr.w	r3, [sl]
    dbb6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    dbba:	fb83 2305 	smull	r2, r3, r3, r5
    dbbe:	e9cd 2300 	strd	r2, r3, [sp]
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    dbc2:	f8d9 3000 	ldr.w	r3, [r9]
    dbc6:	4619      	mov	r1, r3
    dbc8:	17da      	asrs	r2, r3, #31
    dbca:	f8d8 3000 	ldr.w	r3, [r8]
    dbce:	e9cd 1202 	strd	r1, r2, [sp, #8]
    dbd2:	9a00      	ldr	r2, [sp, #0]
    dbd4:	1ac3      	subs	r3, r0, r3
			stop_time_aux1 = k_cycle_get_32();
    dbd6:	4607      	mov	r7, r0
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    dbd8:	fba3 0102 	umull	r0, r1, r3, r2
    dbdc:	9a01      	ldr	r2, [sp, #4]
    dbde:	fb03 1102 	mla	r1, r3, r2, r1
    dbe2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    dbe6:	f7f2 fb3f 	bl	268 <__aeabi_uldivmod>
    dbea:	4b38      	ldr	r3, [pc, #224]	; (dccc <chan_set+0x220>)
    dbec:	fbb0 f0f5 	udiv	r0, r0, r5
    dbf0:	6018      	str	r0, [r3, #0]
			us_spent_aux = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time37)/1000;
    dbf2:	4b2e      	ldr	r3, [pc, #184]	; (dcac <chan_set+0x200>)
    dbf4:	681b      	ldr	r3, [r3, #0]
    dbf6:	1aff      	subs	r7, r7, r3
    dbf8:	9b00      	ldr	r3, [sp, #0]
    dbfa:	fba7 0103 	umull	r0, r1, r7, r3
    dbfe:	9b01      	ldr	r3, [sp, #4]
    dc00:	fb07 1103 	mla	r1, r7, r3, r1
    dc04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    dc08:	f7f2 fb2e 	bl	268 <__aeabi_uldivmod>
    dc0c:	4b30      	ldr	r3, [pc, #192]	; (dcd0 <chan_set+0x224>)
    dc0e:	fbb0 f0f5 	udiv	r0, r0, r5
    dc12:	6018      	str	r0, [r3, #0]
 			stop_dynamic_cal = k_cycle_get_32(); 
    dc14:	f7f5 fc12 	bl	343c <_timer_cycle_get_32>
    dc18:	4b2e      	ldr	r3, [pc, #184]	; (dcd4 <chan_set+0x228>)
			last_dynamic_cal = final_dynamic_cal;
    dc1a:	4f2f      	ldr	r7, [pc, #188]	; (dcd8 <chan_set+0x22c>)
 			stop_dynamic_cal = k_cycle_get_32(); 
    dc1c:	2100      	movs	r1, #0
    dc1e:	e9c3 0100 	strd	r0, r1, [r3]
			last_dynamic_cal = final_dynamic_cal;
    dc22:	4b2e      	ldr	r3, [pc, #184]	; (dcdc <chan_set+0x230>)
    dc24:	f8d7 8000 	ldr.w	r8, [r7]
    dc28:	687a      	ldr	r2, [r7, #4]
    dc2a:	f8c3 8000 	str.w	r8, [r3]
    dc2e:	605a      	str	r2, [r3, #4]
			final_dynamic_cal = SYS_CLOCK_HW_CYCLES_TO_NS(stop_dynamic_cal - start_dynamic_cal)/1000;
    dc30:	4b2b      	ldr	r3, [pc, #172]	; (dce0 <chan_set+0x234>)
    dc32:	e9d3 2300 	ldrd	r2, r3, [r3]
    dc36:	1a82      	subs	r2, r0, r2
    dc38:	f8da 0000 	ldr.w	r0, [sl]
    dc3c:	eb61 0303 	sbc.w	r3, r1, r3
    dc40:	fb80 0105 	smull	r0, r1, r0, r5
    dc44:	4351      	muls	r1, r2
    dc46:	fb00 1303 	mla	r3, r0, r3, r1
    dc4a:	fba2 0100 	umull	r0, r1, r2, r0
    dc4e:	f8d9 2000 	ldr.w	r2, [r9]
    dc52:	4419      	add	r1, r3
    dc54:	17d3      	asrs	r3, r2, #31
    dc56:	f7f2 fb07 	bl	268 <__aeabi_uldivmod>
    dc5a:	2300      	movs	r3, #0
    dc5c:	fbb0 f0f5 	udiv	r0, r0, r5
    dc60:	6038      	str	r0, [r7, #0]
			_radio.ext_advertiser.last_dynamic_cal = final_dynamic_cal-last_dynamic_cal;
    dc62:	eba0 0008 	sub.w	r0, r0, r8
			final_dynamic_cal = SYS_CLOCK_HW_CYCLES_TO_NS(stop_dynamic_cal - start_dynamic_cal)/1000;
    dc66:	607b      	str	r3, [r7, #4]
			_radio.ext_advertiser.last_dynamic_cal = final_dynamic_cal-last_dynamic_cal;
    dc68:	f8c6 0c88 	str.w	r0, [r6, #3208]	; 0xc88
			if (chan < 11) {
    dc6c:	2c0a      	cmp	r4, #10
    dc6e:	d809      	bhi.n	dc84 <chan_set+0x1d8>
				radio_freq_chan_set(4 + (2 * chan));
    dc70:	1ca0      	adds	r0, r4, #2
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    dc72:	0040      	lsls	r0, r0, #1
    dc74:	f009 fa82 	bl	1717c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    dc78:	4620      	mov	r0, r4
}
    dc7a:	b004      	add	sp, #16
    dc7c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	radio_whiten_iv_set(chan);
    dc80:	f009 ba82 	b.w	17188 <radio_whiten_iv_set>
			} else if (chan < 40) {
    dc84:	2c27      	cmp	r4, #39	; 0x27
    dc86:	d809      	bhi.n	dc9c <chan_set+0x1f0>
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    dc88:	1ce0      	adds	r0, r4, #3
    dc8a:	e7f2      	b.n	dc72 <chan_set+0x1c6>
		switch (chan) {
    dc8c:	2826      	cmp	r0, #38	; 0x26
    dc8e:	f43f af5a 	beq.w	db46 <chan_set+0x9a>
    dc92:	2827      	cmp	r0, #39	; 0x27
    dc94:	d087      	beq.n	dba6 <chan_set+0xfa>
    dc96:	2825      	cmp	r0, #37	; 0x25
    dc98:	d1e8      	bne.n	dc6c <chan_set+0x1c0>
    dc9a:	e74a      	b.n	db32 <chan_set+0x86>
				LL_ASSERT(0);
    dc9c:	4040      	eors	r0, r0
    dc9e:	f380 8811 	msr	BASEPRI, r0
    dca2:	f04f 0004 	mov.w	r0, #4
    dca6:	df02      	svc	2
    dca8:	20000bb0 	.word	0x20000bb0
    dcac:	2000486c 	.word	0x2000486c
    dcb0:	200048d4 	.word	0x200048d4
    dcb4:	20004928 	.word	0x20004928
    dcb8:	20004948 	.word	0x20004948
    dcbc:	20001970 	.word	0x20001970
    dcc0:	200048d8 	.word	0x200048d8
    dcc4:	20004930 	.word	0x20004930
    dcc8:	2000493c 	.word	0x2000493c
    dccc:	20004904 	.word	0x20004904
    dcd0:	20004858 	.word	0x20004858
    dcd4:	200048f8 	.word	0x200048f8
    dcd8:	20001930 	.word	0x20001930
    dcdc:	20001938 	.word	0x20001938
    dce0:	20004860 	.word	0x20004860
    dce4:	200048f0 	.word	0x200048f0
    dce8:	2000e8cc 	.word	0x2000e8cc
    dcec:	2000e8c8 	.word	0x2000e8c8

0000dcf0 <adv_setup>:
{
    dcf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.advertiser.adv_data.first !=
    dcf4:	4c8c      	ldr	r4, [pc, #560]	; (df28 <adv_setup+0x238>)
    dcf6:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
    dcfa:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    dcfe:	429a      	cmp	r2, r3
    dd00:	f000 80db 	beq.w	deba <adv_setup+0x1ca>
		first = _radio.advertiser.adv_data.first + 1;
    dd04:	3301      	adds	r3, #1
    dd06:	b2db      	uxtb	r3, r3
			first = 0;
    dd08:	2b02      	cmp	r3, #2
    dd0a:	bf08      	it	eq
    dd0c:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    dd0e:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
		upd = 1;
    dd12:	f04f 0a01 	mov.w	sl, #1
	if (_radio.advertiser.scan_data.first != _radio.
    dd16:	f894 3c14 	ldrb.w	r3, [r4, #3092]	; 0xc14
    dd1a:	f894 2c15 	ldrb.w	r2, [r4, #3093]	; 0xc15
    dd1e:	429a      	cmp	r2, r3
    dd20:	d008      	beq.n	dd34 <adv_setup+0x44>
		first = _radio.advertiser.scan_data.first + 1;
    dd22:	3301      	adds	r3, #1
    dd24:	b2db      	uxtb	r3, r3
			first = 0;
    dd26:	2b02      	cmp	r3, #2
    dd28:	bf08      	it	eq
    dd2a:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    dd2c:	f884 3c14 	strb.w	r3, [r4, #3092]	; 0xc14
		upd = 1;
    dd30:	f04f 0a01 	mov.w	sl, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    dd34:	f894 722e 	ldrb.w	r7, [r4, #558]	; 0x22e
    dd38:	eb07 2707 	add.w	r7, r7, r7, lsl #8
    dd3c:	372c      	adds	r7, #44	; 0x2c
    dd3e:	eb04 0907 	add.w	r9, r4, r7
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    dd42:	5de3      	ldrb	r3, [r4, r7]
    dd44:	f003 030f 	and.w	r3, r3, #15
    dd48:	2b07      	cmp	r3, #7
    dd4a:	d160      	bne.n	de0e <adv_setup+0x11e>
			if(h->adv_addr){
    dd4c:	f899 3003 	ldrb.w	r3, [r9, #3]
    dd50:	07dd      	lsls	r5, r3, #31
				ptr += BDADDR_SIZE;
    dd52:	bf4c      	ite	mi
    dd54:	f109 050a 	addmi.w	r5, r9, #10
		ptr = (u8_t *)h + sizeof(*h);
    dd58:	f109 0504 	addpl.w	r5, r9, #4
			if(h->tgt_addr){
    dd5c:	079a      	lsls	r2, r3, #30
				ptr += BDADDR_SIZE;
    dd5e:	bf48      	it	mi
    dd60:	3506      	addmi	r5, #6
			if(h->adi){
    dd62:	071e      	lsls	r6, r3, #28
				ptr += sizeof(*adi_ptr);
    dd64:	bf48      	it	mi
    dd66:	3502      	addmi	r5, #2
			if(h->aux_ptr){
    dd68:	06da      	lsls	r2, r3, #27
    dd6a:	d54a      	bpl.n	de02 <adv_setup+0x112>
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    dd6c:	f8d4 2c84 	ldr.w	r2, [r4, #3204]	; 0xc84
    dd70:	f8d4 3c60 	ldr.w	r3, [r4, #3168]	; 0xc60
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    dd74:	f894 6029 	ldrb.w	r6, [r4, #41]	; 0x29
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    dd78:	4413      	add	r3, r2
    dd7a:	f894 2c69 	ldrb.w	r2, [r4, #3177]	; 0xc69
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    dd7e:	f3c6 1602 	ubfx	r6, r6, #4, #3
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    dd82:	435a      	muls	r2, r3
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    dd84:	2e07      	cmp	r6, #7
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    dd86:	f8c4 2c6c 	str.w	r2, [r4, #3180]	; 0xc6c
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    dd8a:	f040 80a6 	bne.w	deda <adv_setup+0x1ea>
					if((_radio.advertiser.chan_map_current & 0x07) == 0x07){
    dd8e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    dd92:	f003 0307 	and.w	r3, r3, #7
    dd96:	2b07      	cmp	r3, #7
    dd98:	f040 8092 	bne.w	dec0 <adv_setup+0x1d0>
						offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    dd9c:	f8d4 0c70 	ldr.w	r0, [r4, #3184]	; 0xc70
    dda0:	1a82      	subs	r2, r0, r2
    dda2:	4610      	mov	r0, r2
    dda4:	2100      	movs	r1, #0
						_radio.ext_advertiser.chan_offset = offset;
    dda6:	f8c4 2c7c 	str.w	r2, [r4, #3196]	; 0xc7c
				if(offset > 245700){
    ddaa:	4a60      	ldr	r2, [pc, #384]	; (df2c <adv_setup+0x23c>)
    ddac:	78ae      	ldrb	r6, [r5, #2]
    ddae:	f895 8000 	ldrb.w	r8, [r5]
    ddb2:	2300      	movs	r3, #0
    ddb4:	428b      	cmp	r3, r1
    ddb6:	bf08      	it	eq
    ddb8:	4282      	cmpeq	r2, r0
    ddba:	f080 809f 	bcs.w	defc <adv_setup+0x20c>
					ap->offs = offset/300;
    ddbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
    ddc2:	2300      	movs	r3, #0
    ddc4:	f7f2 fa50 	bl	268 <__aeabi_uldivmod>
    ddc8:	f026 061f 	bic.w	r6, r6, #31
    ddcc:	7068      	strb	r0, [r5, #1]
    ddce:	f3c0 2004 	ubfx	r0, r0, #8, #5
    ddd2:	4330      	orrs	r0, r6
    ddd4:	70a8      	strb	r0, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_300;
    ddd6:	f048 0880 	orr.w	r8, r8, #128	; 0x80
				if(_radio.advertiser.ext_adv == 1){
    ddda:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    ddde:	f885 8000 	strb.w	r8, [r5]
				if(_radio.advertiser.ext_adv == 1){
    dde2:	07db      	lsls	r3, r3, #31
    dde4:	d508      	bpl.n	ddf8 <adv_setup+0x108>
					_radio.ext_advertiser.aux_pckt_chan++;
    dde6:	f894 3c80 	ldrb.w	r3, [r4, #3200]	; 0xc80
    ddea:	3301      	adds	r3, #1
    ddec:	b2db      	uxtb	r3, r3
					if(_radio.ext_advertiser.aux_pckt_chan == 0x25){ //37 channel
    ddee:	2b25      	cmp	r3, #37	; 0x25
						_radio.ext_advertiser.aux_pckt_chan = 0;
    ddf0:	bf08      	it	eq
    ddf2:	2300      	moveq	r3, #0
    ddf4:	f884 3c80 	strb.w	r3, [r4, #3200]	; 0xc80
				ap->chan_idx = 0x03;
    ddf8:	782b      	ldrb	r3, [r5, #0]
    ddfa:	2203      	movs	r2, #3
    ddfc:	f362 0305 	bfi	r3, r2, #0, #6
    de00:	702b      	strb	r3, [r5, #0]
		_radio.advertiser.ext_adv = 0;   //in order to change the aux packet channel index
    de02:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    de06:	f36f 0300 	bfc	r3, #0, #1
    de0a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (upd) {
    de0e:	f1ba 0f00 	cmp.w	sl, #0
    de12:	d00b      	beq.n	de2c <adv_setup+0x13c>
		struct pdu_adv *scan_pdu = (void *)
    de14:	f894 0c14 	ldrb.w	r0, [r4, #3092]	; 0xc14
    de18:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    de1c:	4420      	add	r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    de1e:	2206      	movs	r2, #6
    de20:	f109 0102 	add.w	r1, r9, #2
    de24:	f600 2014 	addw	r0, r0, #2580	; 0xa14
    de28:	f7f2 fd5f 	bl	8ea <memcpy>
		radio_pkt_tx_set(pdu);
    de2c:	4648      	mov	r0, r9
    de2e:	f009 fa0d 	bl	1724c <radio_pkt_tx_set>
		if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    de32:	5de3      	ldrb	r3, [r4, r7]
    de34:	f003 030f 	and.w	r3, r3, #15
    de38:	2b02      	cmp	r3, #2
    de3a:	d06d      	beq.n	df18 <adv_setup+0x228>
    de3c:	2b07      	cmp	r3, #7
    de3e:	d06b      	beq.n	df18 <adv_setup+0x228>
			_radio.state = STATE_TX;
    de40:	2302      	movs	r3, #2
			radio_tmr_tifs_set(RADIO_TIFS);
    de42:	2096      	movs	r0, #150	; 0x96
			_radio.state = STATE_TX;
    de44:	7523      	strb	r3, [r4, #20]
			radio_tmr_tifs_set(RADIO_TIFS);
    de46:	f009 fb27 	bl	17498 <radio_tmr_tifs_set>
			radio_switch_complete_and_rx(0);
    de4a:	2000      	movs	r0, #0
    de4c:	f009 fa86 	bl	1735c <radio_switch_complete_and_rx>
		bitmap = _radio.advertiser.chan_map_current;
    de50:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    de54:	f3c3 0202 	ubfx	r2, r3, #0, #3
    de58:	b2d3      	uxtb	r3, r2
    de5a:	4619      	mov	r1, r3
		while ((bitmap & 0x01) == 0) {
    de5c:	2000      	movs	r0, #0
    de5e:	07ce      	lsls	r6, r1, #31
    de60:	f100 0501 	add.w	r5, r0, #1
    de64:	d55d      	bpl.n	df22 <adv_setup+0x232>
			(_radio.advertiser.chan_map_current - 1);
    de66:	3b01      	subs	r3, #1
			_radio.advertiser.chan_map_current &=
    de68:	4013      	ands	r3, r2
    de6a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
		count++;
    de6e:	4d30      	ldr	r5, [pc, #192]	; (df30 <adv_setup+0x240>)
			_radio.advertiser.chan_map_current &=
    de70:	f363 0202 	bfi	r2, r3, #0, #3
    de74:	4b2f      	ldr	r3, [pc, #188]	; (df34 <adv_setup+0x244>)
    de76:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if(! _radio.advertiser.chan_map_current){	
    de7a:	f012 0f07 	tst.w	r2, #7
			chan_case ++;
    de7e:	bf08      	it	eq
    de80:	781a      	ldrbeq	r2, [r3, #0]
		count++;
    de82:	7829      	ldrb	r1, [r5, #0]
			chan_case ++;
    de84:	bf0c      	ite	eq
    de86:	3201      	addeq	r2, #1
			chan_case = 0 ;
    de88:	2200      	movne	r2, #0
    de8a:	701a      	strb	r2, [r3, #0]
		_radio.ext_advertiser.event++;
    de8c:	f894 3c6a 	ldrb.w	r3, [r4, #3178]	; 0xc6a
		if(_radio.ext_advertiser.event > _radio.ext_advertiser.max_skip){
    de90:	f894 2c68 	ldrb.w	r2, [r4, #3176]	; 0xc68
		_radio.ext_advertiser.event++;
    de94:	3301      	adds	r3, #1
    de96:	b2db      	uxtb	r3, r3
		if(_radio.ext_advertiser.event > _radio.ext_advertiser.max_skip){
    de98:	429a      	cmp	r2, r3
		count++;
    de9a:	f101 0101 	add.w	r1, r1, #1
		_radio.ext_advertiser.event++;
    de9e:	f884 3c6a 	strb.w	r3, [r4, #3178]	; 0xc6a
		count++;
    dea2:	7029      	strb	r1, [r5, #0]
			_radio.ext_advertiser.event = 0;
    dea4:	bf38      	it	cc
    dea6:	2300      	movcc	r3, #0
		chan_set(37 + chan);
    dea8:	b2c0      	uxtb	r0, r0
			_radio.ext_advertiser.event = 0;
    deaa:	bf38      	it	cc
    deac:	f884 3c6a 	strbcc.w	r3, [r4, #3178]	; 0xc6a
		chan_set(37 + chan);
    deb0:	3025      	adds	r0, #37	; 0x25
}
    deb2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		chan_set(37 + chan);
    deb6:	f7ff bdf9 	b.w	daac <chan_set>
	u8_t upd = 0;
    deba:	f04f 0a00 	mov.w	sl, #0
    debe:	e72a      	b.n	dd16 <adv_setup+0x26>
					}else if((_radio.advertiser.chan_map_current & 0x07) == 0x06){
    dec0:	2b06      	cmp	r3, #6
    dec2:	d104      	bne.n	dece <adv_setup+0x1de>
						offset = (_radio.ext_advertiser.chan_38 - _radio.ext_advertiser.slot );
    dec4:	f8d4 0c74 	ldr.w	r0, [r4, #3188]	; 0xc74
						offset = (_radio.ext_advertiser.chan_39 - _radio.ext_advertiser.slot );
    dec8:	1a80      	subs	r0, r0, r2
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    deca:	2100      	movs	r1, #0
    decc:	e76d      	b.n	ddaa <adv_setup+0xba>
					}else if((_radio.advertiser.chan_map_current & 0x07) == 0x04){
    dece:	2b04      	cmp	r3, #4
    ded0:	f47f af6b 	bne.w	ddaa <adv_setup+0xba>
						offset = (_radio.ext_advertiser.chan_39 - _radio.ext_advertiser.slot );
    ded4:	f8d4 0c78 	ldr.w	r0, [r4, #3192]	; 0xc78
    ded8:	e7f6      	b.n	dec8 <adv_setup+0x1d8>
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset ) * _radio.ext_advertiser.event;
    deda:	f894 6c6a 	ldrb.w	r6, [r4, #3178]	; 0xc6a
    dede:	4373      	muls	r3, r6
    dee0:	f8c4 3c6c 	str.w	r3, [r4, #3180]	; 0xc6c
					if(_radio.ext_advertiser.event == 0){
    dee4:	b926      	cbnz	r6, def0 <adv_setup+0x200>
						start_dynamic_cal = k_cycle_get_32(); 
    dee6:	f7f5 faa9 	bl	343c <_timer_cycle_get_32>
    deea:	4b13      	ldr	r3, [pc, #76]	; (df38 <adv_setup+0x248>)
    deec:	e883 0041 	stmia.w	r3, {r0, r6}
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    def0:	f8d4 0c70 	ldr.w	r0, [r4, #3184]	; 0xc70
    def4:	f8d4 3c6c 	ldr.w	r3, [r4, #3180]	; 0xc6c
    def8:	1ac0      	subs	r0, r0, r3
    defa:	e7e6      	b.n	deca <adv_setup+0x1da>
					ap->offs = offset /30;
    defc:	221e      	movs	r2, #30
    defe:	2300      	movs	r3, #0
    df00:	f7f2 f9b2 	bl	268 <__aeabi_uldivmod>
    df04:	f026 061f 	bic.w	r6, r6, #31
    df08:	7068      	strb	r0, [r5, #1]
    df0a:	f3c0 2004 	ubfx	r0, r0, #8, #5
    df0e:	4306      	orrs	r6, r0
    df10:	70ae      	strb	r6, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    df12:	f36f 18c7 	bfc	r8, #7, #1
    df16:	e760      	b.n	ddda <adv_setup+0xea>
			_radio.state = STATE_CLOSE;
    df18:	2303      	movs	r3, #3
    df1a:	7523      	strb	r3, [r4, #20]
			radio_switch_complete_and_disable();
    df1c:	f009 fa34 	bl	17388 <radio_switch_complete_and_disable>
    df20:	e796      	b.n	de50 <adv_setup+0x160>
			bitmap >>= 1;
    df22:	0849      	lsrs	r1, r1, #1
    df24:	4628      	mov	r0, r5
    df26:	e79a      	b.n	de5e <adv_setup+0x16e>
    df28:	20000bb0 	.word	0x20000bb0
    df2c:	0003bfc4 	.word	0x0003bfc4
    df30:	2000192b 	.word	0x2000192b
    df34:	2000192a 	.word	0x2000192a
    df38:	20004860 	.word	0x20004860

0000df3c <ext_adv_setup>:
{
    df3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (_radio.advertiser.adv_data.first !=
    df40:	4c63      	ldr	r4, [pc, #396]	; (e0d0 <ext_adv_setup+0x194>)
    df42:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
    df46:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    df4a:	429a      	cmp	r2, r3
    df4c:	d02d      	beq.n	dfaa <ext_adv_setup+0x6e>
		first = _radio.advertiser.adv_data.first + 1;
    df4e:	3301      	adds	r3, #1
    df50:	b2db      	uxtb	r3, r3
			first = 0;
    df52:	2b02      	cmp	r3, #2
    df54:	bf08      	it	eq
    df56:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    df58:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
		upd = 1;
    df5c:	f04f 0801 	mov.w	r8, #1
	if (_radio.advertiser.scan_data.first != _radio.
    df60:	f894 3c14 	ldrb.w	r3, [r4, #3092]	; 0xc14
    df64:	f894 2c15 	ldrb.w	r2, [r4, #3093]	; 0xc15
    df68:	429a      	cmp	r2, r3
    df6a:	d008      	beq.n	df7e <ext_adv_setup+0x42>
		first = _radio.advertiser.scan_data.first + 1;
    df6c:	3301      	adds	r3, #1
    df6e:	b2db      	uxtb	r3, r3
			first = 0;
    df70:	2b02      	cmp	r3, #2
    df72:	bf08      	it	eq
    df74:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    df76:	f884 3c14 	strb.w	r3, [r4, #3092]	; 0xc14
		upd = 1;
    df7a:	f04f 0801 	mov.w	r8, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    df7e:	f894 622e 	ldrb.w	r6, [r4, #558]	; 0x22e
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    df82:	f894 5433 	ldrb.w	r5, [r4, #1075]	; 0x433
	switch(_radio.ext_advertiser.aux_chain_count_current){
    df86:	f894 3c8d 	ldrb.w	r3, [r4, #3213]	; 0xc8d
	pdu = (void *)_radio.advertiser.adv_data.data
    df8a:	eb06 2606 	add.w	r6, r6, r6, lsl #8
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    df8e:	eb05 2505 	add.w	r5, r5, r5, lsl #8
	pdu = (void *)_radio.advertiser.adv_data.data
    df92:	362c      	adds	r6, #44	; 0x2c
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    df94:	f505 750c 	add.w	r5, r5, #560	; 0x230
	pdu = (void *)_radio.advertiser.adv_data.data
    df98:	19a7      	adds	r7, r4, r6
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    df9a:	4425      	add	r5, r4
	switch(_radio.ext_advertiser.aux_chain_count_current){
    df9c:	2b05      	cmp	r3, #5
    df9e:	d80d      	bhi.n	dfbc <ext_adv_setup+0x80>
    dfa0:	e8df f003 	tbb	[pc, r3]
    dfa4:	68605606 	.word	0x68605606
    dfa8:	7870      	.short	0x7870
	u8_t upd = 0;
    dfaa:	f04f 0800 	mov.w	r8, #0
    dfae:	e7d7      	b.n	df60 <ext_adv_setup+0x24>
			memcpy(aux_pdu, copy_pdu, 257);
    dfb0:	f240 1201 	movw	r2, #257	; 0x101
    dfb4:	4947      	ldr	r1, [pc, #284]	; (e0d4 <ext_adv_setup+0x198>)
    dfb6:	4628      	mov	r0, r5
    dfb8:	f7f2 fc97 	bl	8ea <memcpy>
		if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    dfbc:	5da3      	ldrb	r3, [r4, r6]
    dfbe:	f003 030f 	and.w	r3, r3, #15
    dfc2:	2b07      	cmp	r3, #7
    dfc4:	d11a      	bne.n	dffc <ext_adv_setup+0xc0>
			if(h->adv_addr){
    dfc6:	78fa      	ldrb	r2, [r7, #3]
    dfc8:	07d3      	lsls	r3, r2, #31
				ptr += BDADDR_SIZE;
    dfca:	bf4c      	ite	mi
    dfcc:	f107 030a 	addmi.w	r3, r7, #10
		ptr = (u8_t *)h + sizeof(*h);
    dfd0:	1d3b      	addpl	r3, r7, #4
			if(h->tgt_addr){
    dfd2:	0790      	lsls	r0, r2, #30
				ptr += BDADDR_SIZE;
    dfd4:	bf48      	it	mi
    dfd6:	3306      	addmi	r3, #6
			if(h->adi){
    dfd8:	0711      	lsls	r1, r2, #28
				ptr += sizeof(*adi_ptr);
    dfda:	bf48      	it	mi
    dfdc:	3302      	addmi	r3, #2
			if(h->aux_ptr){
    dfde:	06d2      	lsls	r2, r2, #27
    dfe0:	d50c      	bpl.n	dffc <ext_adv_setup+0xc0>
					ap->offs = offset /30;
    dfe2:	2206      	movs	r2, #6
    dfe4:	705a      	strb	r2, [r3, #1]
    dfe6:	789a      	ldrb	r2, [r3, #2]
    dfe8:	f022 021f 	bic.w	r2, r2, #31
    dfec:	709a      	strb	r2, [r3, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    dfee:	781a      	ldrb	r2, [r3, #0]
				ap->chan_idx = 0x03;
    dff0:	2103      	movs	r1, #3
    dff2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    dff6:	f361 0205 	bfi	r2, r1, #0, #6
    dffa:	701a      	strb	r2, [r3, #0]
	if (upd) {
    dffc:	f1b8 0f00 	cmp.w	r8, #0
    e000:	d00a      	beq.n	e018 <ext_adv_setup+0xdc>
		struct pdu_adv *scan_pdu = (void *)
    e002:	f894 0c14 	ldrb.w	r0, [r4, #3092]	; 0xc14
    e006:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    e00a:	4420      	add	r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    e00c:	2206      	movs	r2, #6
    e00e:	1cb9      	adds	r1, r7, #2
    e010:	f600 2014 	addw	r0, r0, #2580	; 0xa14
    e014:	f7f2 fc69 	bl	8ea <memcpy>
			radio_pkt_tx_set(aux_pdu);
    e018:	4628      	mov	r0, r5
    e01a:	f009 f917 	bl	1724c <radio_pkt_tx_set>
			if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    e01e:	5da3      	ldrb	r3, [r4, r6]
    e020:	f003 030f 	and.w	r3, r3, #15
    e024:	2b02      	cmp	r3, #2
    e026:	d03d      	beq.n	e0a4 <ext_adv_setup+0x168>
    e028:	2b07      	cmp	r3, #7
    e02a:	d03b      	beq.n	e0a4 <ext_adv_setup+0x168>
				_radio.state = STATE_TX;
    e02c:	2302      	movs	r3, #2
				radio_tmr_tifs_set(RADIO_TIFS);
    e02e:	2096      	movs	r0, #150	; 0x96
				_radio.state = STATE_TX;
    e030:	7523      	strb	r3, [r4, #20]
				radio_tmr_tifs_set(RADIO_TIFS);
    e032:	f009 fa31 	bl	17498 <radio_tmr_tifs_set>
				radio_switch_complete_and_rx(0);
    e036:	2000      	movs	r0, #0
    e038:	f009 f990 	bl	1735c <radio_switch_complete_and_rx>
			_radio.ext_advertiser.current_slot = 0;			// for packets which are transmittedon primaty channels
    e03c:	2300      	movs	r3, #0
    e03e:	f884 3c69 	strb.w	r3, [r4, #3177]	; 0xc69
			_radio.ext_advertiser.event = 0;				// skip number of events before transmitting aux
    e042:	f884 3c6a 	strb.w	r3, [r4, #3178]	; 0xc6a
			chan_set(03);
    e046:	2003      	movs	r0, #3
}
    e048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			chan_set(03);
    e04c:	f7ff bd2e 	b.w	daac <chan_set>
			memcpy(aux_pdu, copy_pdu, 257);
    e050:	f240 1201 	movw	r2, #257	; 0x101
    e054:	4920      	ldr	r1, [pc, #128]	; (e0d8 <ext_adv_setup+0x19c>)
    e056:	4628      	mov	r0, r5
    e058:	f7f2 fc47 	bl	8ea <memcpy>
			chan_set(1);
    e05c:	2001      	movs	r0, #1
			chan_set(5);
    e05e:	f7ff fd25 	bl	daac <chan_set>
			break;
    e062:	e7ab      	b.n	dfbc <ext_adv_setup+0x80>
			memcpy(aux_pdu, copy_pdu, 257);
    e064:	f240 1201 	movw	r2, #257	; 0x101
    e068:	491c      	ldr	r1, [pc, #112]	; (e0dc <ext_adv_setup+0x1a0>)
    e06a:	4628      	mov	r0, r5
    e06c:	f7f2 fc3d 	bl	8ea <memcpy>
			chan_set(2);
    e070:	2002      	movs	r0, #2
    e072:	e7f4      	b.n	e05e <ext_adv_setup+0x122>
			memcpy(aux_pdu, copy_pdu, 257);
    e074:	f240 1201 	movw	r2, #257	; 0x101
    e078:	4919      	ldr	r1, [pc, #100]	; (e0e0 <ext_adv_setup+0x1a4>)
    e07a:	4628      	mov	r0, r5
    e07c:	f7f2 fc35 	bl	8ea <memcpy>
			chan_set(3);
    e080:	2003      	movs	r0, #3
    e082:	e7ec      	b.n	e05e <ext_adv_setup+0x122>
			memcpy(aux_pdu, copy_pdu, 257);
    e084:	f240 1201 	movw	r2, #257	; 0x101
    e088:	4916      	ldr	r1, [pc, #88]	; (e0e4 <ext_adv_setup+0x1a8>)
    e08a:	4628      	mov	r0, r5
    e08c:	f7f2 fc2d 	bl	8ea <memcpy>
			chan_set(4);
    e090:	2004      	movs	r0, #4
    e092:	e7e4      	b.n	e05e <ext_adv_setup+0x122>
			memcpy(aux_pdu, copy_pdu, 257);
    e094:	f240 1201 	movw	r2, #257	; 0x101
    e098:	4913      	ldr	r1, [pc, #76]	; (e0e8 <ext_adv_setup+0x1ac>)
    e09a:	4628      	mov	r0, r5
    e09c:	f7f2 fc25 	bl	8ea <memcpy>
			chan_set(5);
    e0a0:	2005      	movs	r0, #5
    e0a2:	e7dc      	b.n	e05e <ext_adv_setup+0x122>
				chain_flag = 1;
    e0a4:	4a11      	ldr	r2, [pc, #68]	; (e0ec <ext_adv_setup+0x1b0>)
				if( _radio.ext_advertiser.aux_chain_count == _radio.ext_advertiser.aux_chain_count_current ){
    e0a6:	f894 1c8c 	ldrb.w	r1, [r4, #3212]	; 0xc8c
				chain_flag = 1;
    e0aa:	2301      	movs	r3, #1
    e0ac:	7013      	strb	r3, [r2, #0]
				_radio.ext_advertiser.aux_chain_count_current++;
    e0ae:	f894 3c8d 	ldrb.w	r3, [r4, #3213]	; 0xc8d
    e0b2:	3301      	adds	r3, #1
    e0b4:	b2db      	uxtb	r3, r3
				if( _radio.ext_advertiser.aux_chain_count == _radio.ext_advertiser.aux_chain_count_current ){
    e0b6:	4299      	cmp	r1, r3
				_radio.ext_advertiser.aux_chain_count_current++;
    e0b8:	f884 3c8d 	strb.w	r3, [r4, #3213]	; 0xc8d
				if( _radio.ext_advertiser.aux_chain_count == _radio.ext_advertiser.aux_chain_count_current ){
    e0bc:	d1b6      	bne.n	e02c <ext_adv_setup+0xf0>
					_radio.advertiser.ext_adv = 1;
    e0be:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    e0c2:	f043 0301 	orr.w	r3, r3, #1
    e0c6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
					chain_flag = 0;
    e0ca:	2300      	movs	r3, #0
    e0cc:	7013      	strb	r3, [r2, #0]
    e0ce:	e7ad      	b.n	e02c <ext_adv_setup+0xf0>
    e0d0:	20000bb0 	.word	0x20000bb0
    e0d4:	20000fe4 	.word	0x20000fe4
    e0d8:	200010e5 	.word	0x200010e5
    e0dc:	200011e6 	.word	0x200011e6
    e0e0:	200012e7 	.word	0x200012e7
    e0e4:	200013e8 	.word	0x200013e8
    e0e8:	200014e9 	.word	0x200014e9
    e0ec:	20001929 	.word	0x20001929

0000e0f0 <sched_free_win_offset_calc>:
{
    e0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e0f4:	b08f      	sub	sp, #60	; 0x3c
    e0f6:	4692      	mov	sl, r2
    e0f8:	9304      	str	r3, [sp, #16]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    e0fa:	6803      	ldr	r3, [r0, #0]
{
    e0fc:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    e0fe:	2b00      	cmp	r3, #0
{
    e100:	4680      	mov	r8, r0
    e102:	6842      	ldr	r2, [r0, #4]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    e104:	da31      	bge.n	e16a <sched_free_win_offset_calc+0x7a>
		u32_t ticks_prepare_to_start =
    e106:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
    e108:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
    e10c:	4291      	cmp	r1, r2
    e10e:	bf2c      	ite	cs
    e110:	1a5a      	subcs	r2, r3, r1
    e112:	1a9a      	subcc	r2, r3, r2
	u32_t ticks_prepare_reduced = 0;
    e114:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    e116:	f8d8 200c 	ldr.w	r2, [r8, #12]
    e11a:	323d      	adds	r2, #61	; 0x3d
		ticks_anchor_prev = offset_index = _win_offset = 0;
    e11c:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    e11e:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    e120:	18d3      	adds	r3, r2, r3
    e122:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    e124:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
    e128:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    e12c:	940c      	str	r4, [sp, #48]	; 0x30
    e12e:	940b      	str	r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    e130:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
    e132:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
    e134:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    e136:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    e138:	2302      	movs	r3, #2
    e13a:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    e13c:	ab0d      	add	r3, sp, #52	; 0x34
    e13e:	9302      	str	r3, [sp, #8]
    e140:	4b77      	ldr	r3, [pc, #476]	; (e320 <sched_free_win_offset_calc+0x230>)
    e142:	9301      	str	r3, [sp, #4]
    e144:	ab0b      	add	r3, sp, #44	; 0x2c
    e146:	9300      	str	r3, [sp, #0]
    e148:	f10d 0229 	add.w	r2, sp, #41	; 0x29
    e14c:	ab0c      	add	r3, sp, #48	; 0x30
    e14e:	2101      	movs	r1, #1
    e150:	2000      	movs	r0, #0
    e152:	f7fd fbb9 	bl	b8c8 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    e156:	2802      	cmp	r0, #2
    e158:	d010      	beq.n	e17c <sched_free_win_offset_calc+0x8c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    e15a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e15c:	b193      	cbz	r3, e184 <sched_free_win_offset_calc+0x94>
			LL_ASSERT(0);
    e15e:	4040      	eors	r0, r0
    e160:	f380 8811 	msr	BASEPRI, r0
    e164:	f04f 0004 	mov.w	r0, #4
    e168:	df02      	svc	2
		u32_t ticks_prepare_to_start =
    e16a:	4293      	cmp	r3, r2
    e16c:	bf38      	it	cc
    e16e:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
    e170:	2200      	movs	r2, #0
    e172:	e7cf      	b.n	e114 <sched_free_win_offset_calc+0x24>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    e174:	2101      	movs	r1, #1
    e176:	2000      	movs	r0, #0
    e178:	f7fd fc24 	bl	b9c4 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    e17c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e17e:	2b02      	cmp	r3, #2
    e180:	d0f8      	beq.n	e174 <sched_free_win_offset_calc+0x84>
    e182:	e7ea      	b.n	e15a <sched_free_win_offset_calc+0x6a>
		if (ticker_id == 0xff) {
    e184:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    e188:	2aff      	cmp	r2, #255	; 0xff
    e18a:	d05d      	beq.n	e248 <sched_free_win_offset_calc+0x158>
		if ((ticker_id_prev != 0xff) &&
    e18c:	2fff      	cmp	r7, #255	; 0xff
    e18e:	d002      	beq.n	e196 <sched_free_win_offset_calc+0xa6>
    e190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e192:	4599      	cmp	r9, r3
    e194:	d1e3      	bne.n	e15e <sched_free_win_offset_calc+0x6e>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    e196:	2a05      	cmp	r2, #5
    e198:	d951      	bls.n	e23e <sched_free_win_offset_calc+0x14e>
				  _radio.connection_count)) {
    e19a:	4862      	ldr	r0, [pc, #392]	; (e324 <sched_free_win_offset_calc+0x234>)
    e19c:	f890 3cf8 	ldrb.w	r3, [r0, #3320]	; 0xcf8
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    e1a0:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    e1a2:	429a      	cmp	r2, r3
    e1a4:	da4b      	bge.n	e23e <sched_free_win_offset_calc+0x14e>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    e1a6:	2a06      	cmp	r2, #6
    e1a8:	f000 8092 	beq.w	e2d0 <sched_free_win_offset_calc+0x1e0>
		if (ticker_id_other != 0xFF) {
    e1ac:	9b06      	ldr	r3, [sp, #24]
    e1ae:	2bff      	cmp	r3, #255	; 0xff
    e1b0:	d14a      	bne.n	e248 <sched_free_win_offset_calc+0x158>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    e1b2:	3a07      	subs	r2, #7
    e1b4:	b292      	uxth	r2, r2
    e1b6:	f44f 71aa 	mov.w	r1, #340	; 0x154
    e1ba:	f8d0 0cf0 	ldr.w	r0, [r0, #3312]	; 0xcf0
    e1be:	f7fc fc69 	bl	aa94 <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
    e1c2:	4580      	cmp	r8, r0
    e1c4:	d03b      	beq.n	e23e <sched_free_win_offset_calc+0x14e>
    e1c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e1c8:	b91b      	cbnz	r3, e1d2 <sched_free_win_offset_calc+0xe2>
    e1ca:	f990 301d 	ldrsb.w	r3, [r0, #29]
    e1ce:	2b00      	cmp	r3, #0
    e1d0:	db35      	blt.n	e23e <sched_free_win_offset_calc+0x14e>
			u32_t ticks_to_expire_normal =
    e1d2:	9b05      	ldr	r3, [sp, #20]
    e1d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    e1d6:	6841      	ldr	r1, [r0, #4]
    e1d8:	441e      	add	r6, r3
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    e1da:	6803      	ldr	r3, [r0, #0]
    e1dc:	2b00      	cmp	r3, #0
    e1de:	da4e      	bge.n	e27e <sched_free_win_offset_calc+0x18e>
				u32_t ticks_prepare_to_start =
    e1e0:	6882      	ldr	r2, [r0, #8]
				ticks_slot_abs_curr =
    e1e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    e1e6:	428a      	cmp	r2, r1
    e1e8:	bf2c      	ite	cs
    e1ea:	18b6      	addcs	r6, r6, r2
    e1ec:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
    e1ee:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
    e1f0:	68c2      	ldr	r2, [r0, #12]
    e1f2:	f102 093d 	add.w	r9, r2, #61	; 0x3d
    e1f6:	444b      	add	r3, r9
    e1f8:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    e1fa:	f8da 3000 	ldr.w	r3, [sl]
    e1fe:	429e      	cmp	r6, r3
    e200:	d916      	bls.n	e230 <sched_free_win_offset_calc+0x140>
    e202:	429d      	cmp	r5, r3
    e204:	bf38      	it	cc
    e206:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
    e208:	9b07      	ldr	r3, [sp, #28]
    e20a:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
    e20e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    e210:	781b      	ldrb	r3, [r3, #0]
    e212:	42a3      	cmp	r3, r4
    e214:	d905      	bls.n	e222 <sched_free_win_offset_calc+0x132>
				       (ticker_ticks_diff_get(
    e216:	4629      	mov	r1, r5
    e218:	4630      	mov	r0, r6
    e21a:	f7fd fbeb 	bl	b9f4 <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
    e21e:	42b8      	cmp	r0, r7
    e220:	d231      	bcs.n	e286 <sched_free_win_offset_calc+0x196>
				if (_win_offset >= conn_interval) {
    e222:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    e226:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
    e228:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
    e22c:	4293      	cmp	r3, r2
    e22e:	d20b      	bcs.n	e248 <sched_free_win_offset_calc+0x158>
			ticks_anchor_prev = ticks_anchor;
    e230:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
    e234:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    e238:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
    e23c:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
    e23e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    e240:	781b      	ldrb	r3, [r3, #0]
    e242:	42a3      	cmp	r3, r4
    e244:	f63f af78 	bhi.w	e138 <sched_free_win_offset_calc+0x48>
	if (ticker_id == 0xFF) {
    e248:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    e24c:	2bff      	cmp	r3, #255	; 0xff
    e24e:	d111      	bne.n	e274 <sched_free_win_offset_calc+0x184>
    e250:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    e254:	f8df 80d0 	ldr.w	r8, [pc, #208]	; e328 <sched_free_win_offset_calc+0x238>
    e258:	a72f      	add	r7, pc, #188	; (adr r7, e318 <sched_free_win_offset_calc+0x228>)
    e25a:	e9d7 6700 	ldrd	r6, r7, [r7]
    e25e:	429d      	cmp	r5, r3
    e260:	bf38      	it	cc
    e262:	461d      	movcc	r5, r3
    e264:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
    e268:	9b18      	ldr	r3, [sp, #96]	; 0x60
    e26a:	781b      	ldrb	r3, [r3, #0]
    e26c:	42a3      	cmp	r3, r4
    e26e:	d831      	bhi.n	e2d4 <sched_free_win_offset_calc+0x1e4>
		*ticks_to_offset_next = ticks_to_expire_prev;
    e270:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
    e274:	9b18      	ldr	r3, [sp, #96]	; 0x60
    e276:	701c      	strb	r4, [r3, #0]
}
    e278:	b00f      	add	sp, #60	; 0x3c
    e27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u32_t ticks_prepare_to_start =
    e27e:	428b      	cmp	r3, r1
    e280:	bf38      	it	cc
    e282:	460b      	movcc	r3, r1
    e284:	e7b4      	b.n	e1f0 <sched_free_win_offset_calc+0x100>
					_win_offset = HAL_TICKER_TICKS_TO_US(
    e286:	4a28      	ldr	r2, [pc, #160]	; (e328 <sched_free_win_offset_calc+0x238>)
    e288:	eb05 030b 	add.w	r3, r5, fp
    e28c:	fba3 0102 	umull	r0, r1, r3, r2
    e290:	2207      	movs	r2, #7
    e292:	fb02 1103 	mla	r1, r2, r3, r1
    e296:	a320      	add	r3, pc, #128	; (adr r3, e318 <sched_free_win_offset_calc+0x228>)
    e298:	e9d3 2300 	ldrd	r2, r3, [r3]
    e29c:	f7f1 ffe4 	bl	268 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    e2a0:	f240 43e2 	movw	r3, #1250	; 0x4e2
    e2a4:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
    e2a8:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
    e2aa:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
    e2ac:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
    e2ae:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
    e2b2:	d20b      	bcs.n	e2cc <sched_free_win_offset_calc+0x1dc>
					memcpy(win_offset +
    e2b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    e2b6:	2202      	movs	r2, #2
    e2b8:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    e2bc:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
    e2c0:	3401      	adds	r4, #1
					memcpy(win_offset +
    e2c2:	f7f2 fb12 	bl	8ea <memcpy>
					offset_index++;
    e2c6:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
    e2c8:	3528      	adds	r5, #40	; 0x28
    e2ca:	e7a0      	b.n	e20e <sched_free_win_offset_calc+0x11e>
						ticks_to_expire_prev = 0;
    e2cc:	2500      	movs	r5, #0
    e2ce:	e7a8      	b.n	e222 <sched_free_win_offset_calc+0x132>
    e2d0:	9206      	str	r2, [sp, #24]
    e2d2:	e7b4      	b.n	e23e <sched_free_win_offset_calc+0x14e>
			_win_offset = HAL_TICKER_TICKS_TO_US(
    e2d4:	eb05 030b 	add.w	r3, r5, fp
    e2d8:	fba3 0108 	umull	r0, r1, r3, r8
    e2dc:	fb09 1103 	mla	r1, r9, r3, r1
    e2e0:	4632      	mov	r2, r6
    e2e2:	463b      	mov	r3, r7
    e2e4:	f7f1 ffc0 	bl	268 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
    e2e8:	f240 43e2 	movw	r3, #1250	; 0x4e2
    e2ec:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
    e2f0:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    e2f2:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
    e2f4:	4283      	cmp	r3, r0
			_win_offset = HAL_TICKER_TICKS_TO_US(
    e2f6:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
    e2fa:	d90b      	bls.n	e314 <sched_free_win_offset_calc+0x224>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    e2fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    e2fe:	2202      	movs	r2, #2
    e300:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    e304:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
    e308:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    e30a:	f7f2 faee 	bl	8ea <memcpy>
			offset_index++;
    e30e:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    e310:	3528      	adds	r5, #40	; 0x28
    e312:	e7a9      	b.n	e268 <sched_free_win_offset_calc+0x178>
				ticks_to_expire_prev = 0;
    e314:	2500      	movs	r5, #0
    e316:	e7ab      	b.n	e270 <sched_free_win_offset_calc+0x180>
    e318:	3b9aca00 	.word	0x3b9aca00
    e31c:	00000000 	.word	0x00000000
    e320:	0000d455 	.word	0x0000d455
    e324:	20000bb0 	.word	0x20000bb0
    e328:	1afd498d 	.word	0x1afd498d

0000e32c <mayfly_sched_free_win_offset_calc>:
{
    e32c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
    e32e:	2300      	movs	r3, #0
    e330:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
    e332:	2306      	movs	r3, #6
    e334:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
    e338:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    e33c:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
    e340:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
    e342:	bfbe      	ittt	lt
    e344:	4602      	movlt	r2, r0
    e346:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
    e348:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    e34c:	9101      	str	r1, [sp, #4]
    e34e:	f10d 010b 	add.w	r1, sp, #11
    e352:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
    e354:	bfa8      	it	ge
    e356:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    e358:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
    e35c:	2100      	movs	r1, #0
    e35e:	f7ff fec7 	bl	e0f0 <sched_free_win_offset_calc>
}
    e362:	b005      	add	sp, #20
    e364:	f85d fb04 	ldr.w	pc, [sp], #4

0000e368 <mayfly_sched_win_offset_select>:
{
    e368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    e36c:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
{
    e370:	b089      	sub	sp, #36	; 0x24
    e372:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    e374:	4840      	ldr	r0, [pc, #256]	; (e478 <mayfly_sched_win_offset_select+0x110>)
	u8_t offset_m_max = OFFSET_M_MAX;
    e376:	2306      	movs	r3, #6
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    e378:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    e37a:	fba2 0100 	umull	r0, r1, r2, r0
	u8_t offset_m_max = OFFSET_M_MAX;
    e37e:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    e382:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    e386:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    e388:	fb03 1102 	mla	r1, r3, r2, r1
    e38c:	a338      	add	r3, pc, #224	; (adr r3, e470 <mayfly_sched_win_offset_select+0x108>)
    e38e:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    e392:	9505      	str	r5, [sp, #20]
    e394:	6075      	str	r5, [r6, #4]
    e396:	60b5      	str	r5, [r6, #8]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    e398:	f7f1 ff66 	bl	268 <__aeabi_uldivmod>
    e39c:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    e39e:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    e3a2:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    e3a6:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    e3aa:	9100      	str	r1, [sp, #0]
    e3ac:	9601      	str	r6, [sp, #4]
    e3ae:	2101      	movs	r1, #1
    e3b0:	4620      	mov	r0, r4
    e3b2:	f7ff fe9d 	bl	e0f0 <sched_free_win_offset_calc>
    e3b6:	f104 07ce 	add.w	r7, r4, #206	; 0xce
    e3ba:	f104 08da 	add.w	r8, r4, #218	; 0xda
			if (win_offset_s != 0xffff) {
    e3be:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
    e3c2:	2202      	movs	r2, #2
    e3c4:	4639      	mov	r1, r7
    e3c6:	f10d 000e 	add.w	r0, sp, #14
    e3ca:	f7f2 fa8e 	bl	8ea <memcpy>
		while (offset_index_m < offset_m_max) {
    e3ce:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
    e3d2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
    e3d6:	2300      	movs	r3, #0
    e3d8:	b2d9      	uxtb	r1, r3
    e3da:	4288      	cmp	r0, r1
    e3dc:	d811      	bhi.n	e402 <mayfly_sched_win_offset_select+0x9a>
    e3de:	3702      	adds	r7, #2
	while (offset_index_s < OFFSET_S_MAX) {
    e3e0:	4547      	cmp	r7, r8
    e3e2:	d1ee      	bne.n	e3c2 <mayfly_sched_win_offset_select+0x5a>
	} else if (!has_offset_s) {
    e3e4:	b9b5      	cbnz	r5, e414 <mayfly_sched_win_offset_select+0xac>
			win_offset_m[0] * 1250;
    e3e6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e3ea:	f240 43e2 	movw	r3, #1250	; 0x4e2
    e3ee:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    e3f0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    e3f4:	2202      	movs	r2, #2
    e3f6:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    e3f8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    e3fc:	f7f2 fa75 	bl	8ea <memcpy>
    e400:	e027      	b.n	e452 <mayfly_sched_win_offset_select+0xea>
			if (win_offset_s != 0xffff) {
    e402:	454a      	cmp	r2, r9
    e404:	d004      	beq.n	e410 <mayfly_sched_win_offset_select+0xa8>
				if (win_offset_s ==
    e406:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    e40a:	4291      	cmp	r1, r2
    e40c:	d024      	beq.n	e458 <mayfly_sched_win_offset_select+0xf0>
				has_offset_s = 1;
    e40e:	2501      	movs	r5, #1
    e410:	3301      	adds	r3, #1
    e412:	e7e1      	b.n	e3d8 <mayfly_sched_win_offset_select+0x70>
		conn->llcp_ack = conn->llcp_req;
    e414:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    e418:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    e41c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    e420:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    e424:	4b15      	ldr	r3, [pc, #84]	; (e47c <mayfly_sched_win_offset_select+0x114>)
    e426:	2200      	movs	r2, #0
    e428:	f8c3 2d70 	str.w	r2, [r3, #3440]	; 0xd70
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
    e42c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e430:	f813 2c05 	ldrb.w	r2, [r3, #-5]
    e434:	f042 0203 	orr.w	r2, r2, #3
    e438:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    e43c:	2203      	movs	r2, #3
    e43e:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    e442:	2211      	movs	r2, #17
    e444:	f803 2c02 	strb.w	r2, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    e448:	220f      	movs	r2, #15
    e44a:	f803 2c01 	strb.w	r2, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    e44e:	2220      	movs	r2, #32
    e450:	701a      	strb	r2, [r3, #0]
}
    e452:	b009      	add	sp, #36	; 0x24
    e454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
    e458:	f240 43e2 	movw	r3, #1250	; 0x4e2
    e45c:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    e45e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    e462:	2202      	movs	r2, #2
    e464:	f10d 010e 	add.w	r1, sp, #14
    e468:	e7c6      	b.n	e3f8 <mayfly_sched_win_offset_select+0x90>
    e46a:	bf00      	nop
    e46c:	f3af 8000 	nop.w
    e470:	1afd498d 	.word	0x1afd498d
    e474:	00000007 	.word	0x00000007
    e478:	09ce5400 	.word	0x09ce5400
    e47c:	20000bb0 	.word	0x20000bb0

0000e480 <sched_after_mstr_free_slot_get>:
{
    e480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e484:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    e486:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    e488:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    e48a:	f8df 9114 	ldr.w	r9, [pc, #276]	; e5a0 <sched_after_mstr_free_slot_get+0x120>
	ticker_id = ticker_id_prev = 0xff;
    e48e:	f88d 501f 	strb.w	r5, [sp, #31]
{
    e492:	4680      	mov	r8, r0
    e494:	4693      	mov	fp, r2
    e496:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    e498:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    e49c:	601c      	str	r4, [r3, #0]
    e49e:	9408      	str	r4, [sp, #32]
    e4a0:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    e4a2:	2302      	movs	r3, #2
    e4a4:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    e4a6:	ab09      	add	r3, sp, #36	; 0x24
    e4a8:	9302      	str	r3, [sp, #8]
    e4aa:	4b3b      	ldr	r3, [pc, #236]	; (e598 <sched_after_mstr_free_slot_get+0x118>)
    e4ac:	9301      	str	r3, [sp, #4]
    e4ae:	ab08      	add	r3, sp, #32
    e4b0:	9300      	str	r3, [sp, #0]
    e4b2:	f10d 021f 	add.w	r2, sp, #31
    e4b6:	465b      	mov	r3, fp
    e4b8:	4641      	mov	r1, r8
    e4ba:	2000      	movs	r0, #0
    e4bc:	f7fd fa04 	bl	b8c8 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    e4c0:	2802      	cmp	r0, #2
    e4c2:	d00b      	beq.n	e4dc <sched_after_mstr_free_slot_get+0x5c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    e4c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e4c6:	b16b      	cbz	r3, e4e4 <sched_after_mstr_free_slot_get+0x64>
    e4c8:	4040      	eors	r0, r0
    e4ca:	f380 8811 	msr	BASEPRI, r0
    e4ce:	f04f 0004 	mov.w	r0, #4
    e4d2:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    e4d4:	4641      	mov	r1, r8
    e4d6:	2000      	movs	r0, #0
    e4d8:	f7fd fa74 	bl	b9c4 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    e4dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e4de:	2b02      	cmp	r3, #2
    e4e0:	d0f8      	beq.n	e4d4 <sched_after_mstr_free_slot_get+0x54>
    e4e2:	e7ef      	b.n	e4c4 <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    e4e4:	f89d 201f 	ldrb.w	r2, [sp, #31]
    e4e8:	2aff      	cmp	r2, #255	; 0xff
    e4ea:	d04e      	beq.n	e58a <sched_after_mstr_free_slot_get+0x10a>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    e4ec:	2a06      	cmp	r2, #6
    e4ee:	d9d8      	bls.n	e4a2 <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    e4f0:	f899 3cf8 	ldrb.w	r3, [r9, #3320]	; 0xcf8
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    e4f4:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    e4f6:	429a      	cmp	r2, r3
    e4f8:	dad3      	bge.n	e4a2 <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    e4fa:	3a07      	subs	r2, #7
    e4fc:	b292      	uxth	r2, r2
    e4fe:	f44f 71aa 	mov.w	r1, #340	; 0x154
    e502:	f8d9 0cf0 	ldr.w	r0, [r9, #3312]	; 0xcf0
    e506:	f7fc fac5 	bl	aa94 <mem_get>
		if (conn && !conn->role) {
    e50a:	2800      	cmp	r0, #0
    e50c:	d0c9      	beq.n	e4a2 <sched_after_mstr_free_slot_get+0x22>
    e50e:	f990 301d 	ldrsb.w	r3, [r0, #29]
    e512:	2b00      	cmp	r3, #0
    e514:	dbc5      	blt.n	e4a2 <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    e516:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    e518:	9a08      	ldr	r2, [sp, #32]
    e51a:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    e51e:	2b00      	cmp	r3, #0
    e520:	da12      	bge.n	e548 <sched_after_mstr_free_slot_get+0xc8>
    e522:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    e524:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    e528:	4571      	cmp	r1, lr
    e52a:	bf2c      	ite	cs
    e52c:	1852      	addcs	r2, r2, r1
    e52e:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    e530:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    e532:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    e534:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    e536:	f101 0104 	add.w	r1, r1, #4
    e53a:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    e53c:	d108      	bne.n	e550 <sched_after_mstr_free_slot_get+0xd0>
			ticker_id_prev = ticker_id;
    e53e:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    e542:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    e544:	4616      	mov	r6, r2
    e546:	e7ac      	b.n	e4a2 <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    e548:	4573      	cmp	r3, lr
    e54a:	bf38      	it	cc
    e54c:	4673      	movcc	r3, lr
    e54e:	e7f0      	b.n	e532 <sched_after_mstr_free_slot_get+0xb2>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    e550:	4631      	mov	r1, r6
    e552:	4610      	mov	r0, r2
    e554:	9305      	str	r3, [sp, #20]
    e556:	9204      	str	r2, [sp, #16]
    e558:	f7fd fa4c 	bl	b9f4 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    e55c:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    e560:	4288      	cmp	r0, r1
    e562:	9a04      	ldr	r2, [sp, #16]
    e564:	9b05      	ldr	r3, [sp, #20]
    e566:	d9ea      	bls.n	e53e <sched_after_mstr_free_slot_get+0xbe>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    e568:	480c      	ldr	r0, [pc, #48]	; (e59c <sched_after_mstr_free_slot_get+0x11c>)
    e56a:	4434      	add	r4, r6
    e56c:	fba4 0100 	umull	r0, r1, r4, r0
    e570:	2307      	movs	r3, #7
    e572:	fb03 1104 	mla	r1, r3, r4, r1
    e576:	a306      	add	r3, pc, #24	; (adr r3, e590 <sched_after_mstr_free_slot_get+0x110>)
    e578:	e9d3 2300 	ldrd	r2, r3, [r3]
    e57c:	f7f1 fe74 	bl	268 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    e580:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    e582:	6038      	str	r0, [r7, #0]
}
    e584:	b00b      	add	sp, #44	; 0x2c
    e586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    e58a:	2dff      	cmp	r5, #255	; 0xff
    e58c:	d1ec      	bne.n	e568 <sched_after_mstr_free_slot_get+0xe8>
    e58e:	e7f9      	b.n	e584 <sched_after_mstr_free_slot_get+0x104>
    e590:	3b9aca00 	.word	0x3b9aca00
    e594:	00000000 	.word	0x00000000
    e598:	0000d455 	.word	0x0000d455
    e59c:	1afd498d 	.word	0x1afd498d
    e5a0:	20000bb0 	.word	0x20000bb0

0000e5a4 <isr_adv_ci_adva_check>:
{
    e5a4:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    e5a6:	7804      	ldrb	r4, [r0, #0]
    e5a8:	780a      	ldrb	r2, [r1, #0]
    e5aa:	f3c4 1380 	ubfx	r3, r4, #6, #1
    e5ae:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    e5b2:	d119      	bne.n	e5e8 <isr_adv_ci_adva_check+0x44>
    e5b4:	f004 040f 	and.w	r4, r4, #15
    e5b8:	2c01      	cmp	r4, #1
    e5ba:	f101 0608 	add.w	r6, r1, #8
    e5be:	f100 0502 	add.w	r5, r0, #2
    e5c2:	d008      	beq.n	e5d6 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    e5c4:	2206      	movs	r2, #6
    e5c6:	4631      	mov	r1, r6
    e5c8:	4628      	mov	r0, r5
    e5ca:	f7f2 f961 	bl	890 <memcmp>
			 BDADDR_SIZE)) ||
    e5ce:	fab0 f080 	clz	r0, r0
    e5d2:	0940      	lsrs	r0, r0, #5
    e5d4:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    e5d6:	2206      	movs	r2, #6
    e5d8:	4631      	mov	r1, r6
    e5da:	4628      	mov	r0, r5
    e5dc:	f7f2 f958 	bl	890 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    e5e0:	2800      	cmp	r0, #0
    e5e2:	d1ef      	bne.n	e5c4 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    e5e4:	4620      	mov	r0, r4
    e5e6:	bd70      	pop	{r4, r5, r6, pc}
    e5e8:	2000      	movs	r0, #0
}
    e5ea:	bd70      	pop	{r4, r5, r6, pc}

0000e5ec <isr_scan_tgta_check>:
{
    e5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e5f0:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    e5f2:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    e5f4:	f101 0808 	add.w	r8, r1, #8
{
    e5f8:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    e5fa:	09c0      	lsrs	r0, r0, #7
    e5fc:	4641      	mov	r1, r8
{
    e5fe:	4691      	mov	r9, r2
    e600:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    e602:	f008 f805 	bl	16610 <ctrl_rl_addr_resolve>
    e606:	4604      	mov	r4, r0
    e608:	b9d8      	cbnz	r0, e642 <isr_scan_tgta_check+0x56>
    e60a:	4f1c      	ldr	r7, [pc, #112]	; (e67c <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    e60c:	f1ba 0f00 	cmp.w	sl, #0
    e610:	d10e      	bne.n	e630 <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    e612:	782b      	ldrb	r3, [r5, #0]
    e614:	f897 2c2d 	ldrb.w	r2, [r7, #3117]	; 0xc2d
			BDADDR_SIZE) == 0))) ||
    e618:	09db      	lsrs	r3, r3, #7
    e61a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    e61e:	d113      	bne.n	e648 <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
    e620:	2206      	movs	r2, #6
    e622:	4641      	mov	r1, r8
    e624:	4816      	ldr	r0, [pc, #88]	; (e680 <isr_scan_tgta_check+0x94>)
    e626:	f7f2 f933 	bl	890 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    e62a:	b968      	cbnz	r0, e648 <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
    e62c:	2001      	movs	r0, #1
    e62e:	e012      	b.n	e656 <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    e630:	f897 3c2e 	ldrb.w	r3, [r7, #3118]	; 0xc2e
    e634:	07db      	lsls	r3, r3, #31
    e636:	d5ec      	bpl.n	e612 <isr_scan_tgta_check+0x26>
    e638:	4648      	mov	r0, r9
    e63a:	f007 fde3 	bl	16204 <ctrl_lrpa_get>
    e63e:	2800      	cmp	r0, #0
    e640:	d0e7      	beq.n	e612 <isr_scan_tgta_check+0x26>
}
    e642:	4620      	mov	r0, r4
    e644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    e648:	f897 0c2d 	ldrb.w	r0, [r7, #3117]	; 0xc2d
    e64c:	f3c0 1001 	ubfx	r0, r0, #4, #2
    e650:	f010 0002 	ands.w	r0, r0, #2
    e654:	d101      	bne.n	e65a <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
    e656:	4604      	mov	r4, r0
    e658:	e7f3      	b.n	e642 <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    e65a:	f995 3000 	ldrsb.w	r3, [r5]
    e65e:	2b00      	cmp	r3, #0
    e660:	da09      	bge.n	e676 <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
    e662:	7b6b      	ldrb	r3, [r5, #13]
    e664:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e668:	2b40      	cmp	r3, #64	; 0x40
    e66a:	d104      	bne.n	e676 <isr_scan_tgta_check+0x8a>
		if (dir_report) {
    e66c:	2e00      	cmp	r6, #0
    e66e:	d0dd      	beq.n	e62c <isr_scan_tgta_check+0x40>
			*dir_report = true;
    e670:	2001      	movs	r0, #1
    e672:	7030      	strb	r0, [r6, #0]
    e674:	e7ef      	b.n	e656 <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
    e676:	2000      	movs	r0, #0
    e678:	e7ed      	b.n	e656 <isr_scan_tgta_check+0x6a>
    e67a:	bf00      	nop
    e67c:	20000bb0 	.word	0x20000bb0
    e680:	200017e0 	.word	0x200017e0

0000e684 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    e684:	4a0b      	ldr	r2, [pc, #44]	; (e6b4 <rx_fc_lock+0x30>)
    e686:	f892 3d68 	ldrb.w	r3, [r2, #3432]	; 0xd68
    e68a:	f892 1d69 	ldrb.w	r1, [r2, #3433]	; 0xd69
    e68e:	4299      	cmp	r1, r3
    e690:	d10e      	bne.n	e6b0 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    e692:	f892 3d68 	ldrb.w	r3, [r2, #3432]	; 0xd68
    e696:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    e69a:	f8a3 0d62 	strh.w	r0, [r3, #3426]	; 0xd62
		req = _radio.fc_req + 1;
    e69e:	f892 3d68 	ldrb.w	r3, [r2, #3432]	; 0xd68
    e6a2:	3301      	adds	r3, #1
    e6a4:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    e6a6:	2b03      	cmp	r3, #3
    e6a8:	bf08      	it	eq
    e6aa:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    e6ac:	f882 3d68 	strb.w	r3, [r2, #3432]	; 0xd68
    e6b0:	4770      	bx	lr
    e6b2:	bf00      	nop
    e6b4:	20000bb0 	.word	0x20000bb0

0000e6b8 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    e6b8:	4b04      	ldr	r3, [pc, #16]	; (e6cc <ticker_job_disable+0x14>)
    e6ba:	7d1b      	ldrb	r3, [r3, #20]
    e6bc:	b123      	cbz	r3, e6c8 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    e6be:	2101      	movs	r1, #1
    e6c0:	2200      	movs	r2, #0
    e6c2:	4608      	mov	r0, r1
    e6c4:	f7fc ba54 	b.w	ab70 <mayfly_enable>
    e6c8:	4770      	bx	lr
    e6ca:	bf00      	nop
    e6cc:	20000bb0 	.word	0x20000bb0

0000e6d0 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    e6d0:	2806      	cmp	r0, #6
{
    e6d2:	b510      	push	{r4, lr}
    e6d4:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    e6d6:	d90a      	bls.n	e6ee <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    e6d8:	4b09      	ldr	r3, [pc, #36]	; (e700 <hdr_conn_get+0x30>)
    e6da:	1fc2      	subs	r2, r0, #7
    e6dc:	b292      	uxth	r2, r2
    e6de:	f44f 71aa 	mov.w	r1, #340	; 0x154
    e6e2:	f8d3 0cf0 	ldr.w	r0, [r3, #3312]	; 0xcf0
    e6e6:	f7fc f9d5 	bl	aa94 <mem_get>
    e6ea:	6020      	str	r0, [r4, #0]
    e6ec:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    e6ee:	2805      	cmp	r0, #5
    e6f0:	d004      	beq.n	e6fc <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    e6f2:	2806      	cmp	r0, #6
	return NULL;
    e6f4:	4803      	ldr	r0, [pc, #12]	; (e704 <hdr_conn_get+0x34>)
    e6f6:	bf18      	it	ne
    e6f8:	2000      	movne	r0, #0
    e6fa:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    e6fc:	4802      	ldr	r0, [pc, #8]	; (e708 <hdr_conn_get+0x38>)
}
    e6fe:	bd10      	pop	{r4, pc}
    e700:	20000bb0 	.word	0x20000bb0
    e704:	200017cc 	.word	0x200017cc
    e708:	20000bc8 	.word	0x20000bc8

0000e70c <mayfly_xtal_retain.part.14>:
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
    e70c:	b508      	push	{r3, lr}
			s_xtal_retained = 0;
    e70e:	4b0a      	ldr	r3, [pc, #40]	; (e738 <mayfly_xtal_retain.part.14+0x2c>)
    e710:	2200      	movs	r2, #0
    e712:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
    e714:	b168      	cbz	r0, e732 <mayfly_xtal_retain.part.14+0x26>
    e716:	2801      	cmp	r0, #1
    e718:	d105      	bne.n	e726 <mayfly_xtal_retain.part.14+0x1a>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    e71a:	4b08      	ldr	r3, [pc, #32]	; (e73c <mayfly_xtal_retain.part.14+0x30>)
			retval = mayfly_enqueue(caller_id,
    e71c:	2200      	movs	r2, #0
    e71e:	4611      	mov	r1, r2
    e720:	f7fc fa4e 	bl	abc0 <mayfly_enqueue>
			LL_ASSERT(!retval);
    e724:	b138      	cbz	r0, e736 <mayfly_xtal_retain.part.14+0x2a>
    e726:	4040      	eors	r0, r0
    e728:	f380 8811 	msr	BASEPRI, r0
    e72c:	f04f 0004 	mov.w	r0, #4
    e730:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    e732:	4b03      	ldr	r3, [pc, #12]	; (e740 <mayfly_xtal_retain.part.14+0x34>)
    e734:	e7f2      	b.n	e71c <mayfly_xtal_retain.part.14+0x10>
    e736:	bd08      	pop	{r3, pc}
    e738:	200019d4 	.word	0x200019d4
    e73c:	2000e0c8 	.word	0x2000e0c8
    e740:	2000e0b8 	.word	0x2000e0b8

0000e744 <event_active.part.15>:
	LL_ASSERT(!_radio.ticker_id_prepare);
    e744:	4040      	eors	r0, r0
    e746:	f380 8811 	msr	BASEPRI, r0
    e74a:	f04f 0004 	mov.w	r0, #4
    e74e:	df02      	svc	2

0000e750 <prepare_normal_set>:
{
    e750:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    e752:	6804      	ldr	r4, [r0, #0]
    e754:	2c00      	cmp	r4, #0
{
    e756:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    e758:	da19      	bge.n	e78e <prepare_normal_set+0x3e>
		u32_t ticks_prepare_to_start =
    e75a:	6843      	ldr	r3, [r0, #4]
    e75c:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    e75e:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    e760:	429d      	cmp	r5, r3
    e762:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    e766:	bf34      	ite	cc
    e768:	1ae4      	subcc	r4, r4, r3
    e76a:	1b64      	subcs	r4, r4, r5
		ticker_status =
    e76c:	4b09      	ldr	r3, [pc, #36]	; (e794 <prepare_normal_set+0x44>)
    e76e:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    e770:	b2a4      	uxth	r4, r4
		ticker_status =
    e772:	2300      	movs	r3, #0
    e774:	9304      	str	r3, [sp, #16]
    e776:	9303      	str	r3, [sp, #12]
    e778:	9302      	str	r3, [sp, #8]
    e77a:	4618      	mov	r0, r3
    e77c:	9401      	str	r4, [sp, #4]
    e77e:	9400      	str	r4, [sp, #0]
    e780:	f7fd f818 	bl	b7b4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e784:	f030 0302 	bics.w	r3, r0, #2
    e788:	d001      	beq.n	e78e <prepare_normal_set+0x3e>
    e78a:	f7ff ffdb 	bl	e744 <event_active.part.15>
}
    e78e:	b009      	add	sp, #36	; 0x24
    e790:	bd30      	pop	{r4, r5, pc}
    e792:	bf00      	nop
    e794:	0000d465 	.word	0x0000d465

0000e798 <scan_ticker_enable>:
static void scan_ticker_enable (void){
    e798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			HAL_TICKER_US_TO_TICKS((u64_t) _radio.scanner.interval * 625),
    e79c:	4f2c      	ldr	r7, [pc, #176]	; (e850 <scan_ticker_enable+0xb8>)
static void scan_ticker_enable (void){
    e79e:	b08a      	sub	sp, #40	; 0x28
	ticks_anchor = ticker_ticks_now_get();
    e7a0:	f7fd f926 	bl	b9f0 <ticker_ticks_now_get>
			HAL_TICKER_US_TO_TICKS((u64_t) _radio.scanner.interval * 625),
    e7a4:	f8d7 8c40 	ldr.w	r8, [r7, #3136]	; 0xc40
			HAL_TICKER_REMAINDER((u64_t) (_radio.scanner.interval * 625)),
    e7a8:	4b2a      	ldr	r3, [pc, #168]	; (e854 <scan_ticker_enable+0xbc>)
    e7aa:	f240 2471 	movw	r4, #625	; 0x271
    e7ae:	fb04 f408 	mul.w	r4, r4, r8
    e7b2:	fba4 4503 	umull	r4, r5, r4, r3
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e7b6:	f642 63ed 	movw	r3, #12013	; 0x2eed
    e7ba:	9308      	str	r3, [sp, #32]
    e7bc:	4b26      	ldr	r3, [pc, #152]	; (e858 <scan_ticker_enable+0xc0>)
    e7be:	9307      	str	r3, [sp, #28]
    e7c0:	2600      	movs	r6, #0
    e7c2:	4b26      	ldr	r3, [pc, #152]	; (e85c <scan_ticker_enable+0xc4>)
    e7c4:	9606      	str	r6, [sp, #24]
    e7c6:	9305      	str	r3, [sp, #20]
    e7c8:	f8d7 2c28 	ldr.w	r2, [r7, #3112]	; 0xc28
    e7cc:	f8d7 3c44 	ldr.w	r3, [r7, #3140]	; 0xc44
    e7d0:	9603      	str	r6, [sp, #12]
    e7d2:	4413      	add	r3, r2
    e7d4:	9304      	str	r3, [sp, #16]
			HAL_TICKER_REMAINDER((u64_t) (_radio.scanner.interval * 625)),
    e7d6:	4620      	mov	r0, r4
    e7d8:	a31b      	add	r3, pc, #108	; (adr r3, e848 <scan_ticker_enable+0xb0>)
    e7da:	e9d3 2300 	ldrd	r2, r3, [r3]
    e7de:	4629      	mov	r1, r5
    e7e0:	f7f1 fd42 	bl	268 <__aeabi_uldivmod>
    e7e4:	4a1e      	ldr	r2, [pc, #120]	; (e860 <scan_ticker_enable+0xc8>)
    e7e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e7ea:	2307      	movs	r3, #7
    e7ec:	2100      	movs	r1, #0
    e7ee:	4343      	muls	r3, r0
    e7f0:	fb02 3301 	mla	r3, r2, r1, r3
    e7f4:	fba0 0102 	umull	r0, r1, r0, r2
    e7f8:	1a20      	subs	r0, r4, r0
    e7fa:	4419      	add	r1, r3
    e7fc:	eb65 0101 	sbc.w	r1, r5, r1
    e800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e804:	2300      	movs	r3, #0
    e806:	f7f1 fd2f 	bl	268 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e80a:	9002      	str	r0, [sp, #8]
			HAL_TICKER_US_TO_TICKS((u64_t) _radio.scanner.interval * 625),
    e80c:	4815      	ldr	r0, [pc, #84]	; (e864 <scan_ticker_enable+0xcc>)
    e80e:	2391      	movs	r3, #145	; 0x91
    e810:	fba8 0100 	umull	r0, r1, r8, r0
    e814:	fb03 1108 	mla	r1, r3, r8, r1
    e818:	a30b      	add	r3, pc, #44	; (adr r3, e848 <scan_ticker_enable+0xb0>)
    e81a:	e9d3 2300 	ldrd	r2, r3, [r3]
    e81e:	f7f1 fd23 	bl	268 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e822:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e826:	9001      	str	r0, [sp, #4]
    e828:	9600      	str	r6, [sp, #0]
    e82a:	f8d7 3cec 	ldr.w	r3, [r7, #3308]	; 0xcec
    e82e:	2206      	movs	r2, #6
    e830:	4631      	mov	r1, r6
    e832:	4630      	mov	r0, r6
    e834:	f7fc ff6e 	bl	b714 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    e838:	f030 0302 	bics.w	r3, r0, #2
    e83c:	d001      	beq.n	e842 <scan_ticker_enable+0xaa>
    e83e:	f7ff ff81 	bl	e744 <event_active.part.15>
}
    e842:	b00a      	add	sp, #40	; 0x28
    e844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e848:	1afd498d 	.word	0x1afd498d
    e84c:	00000007 	.word	0x00000007
    e850:	20000bb0 	.word	0x20000bb0
    e854:	3b9aca00 	.word	0x3b9aca00
    e858:	0000ef15 	.word	0x0000ef15
    e85c:	0000f13d 	.word	0x0000f13d
    e860:	1afd498d 	.word	0x1afd498d
    e864:	84e72a00 	.word	0x84e72a00

0000e868 <aux_packet_function>:
scan_ticker_enable();	
    e868:	f7ff bf96 	b.w	e798 <scan_ticker_enable>

0000e86c <terminate_ind_rx_enqueue>:
{
    e86c:	b510      	push	{r4, lr}
    e86e:	4603      	mov	r3, r0
    e870:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    e872:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
    e876:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
    e87a:	b908      	cbnz	r0, e880 <terminate_ind_rx_enqueue+0x14>
    e87c:	f7ff ff62 	bl	e744 <event_active.part.15>
	node_rx->hdr.handle = conn->handle;
    e880:	8c1c      	ldrh	r4, [r3, #32]
    e882:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
    e886:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    e88a:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    e88c:	4a0a      	ldr	r2, [pc, #40]	; (e8b8 <terminate_ind_rx_enqueue+0x4c>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    e88e:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    e892:	f892 4d60 	ldrb.w	r4, [r2, #3424]	; 0xd60
    e896:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    e89a:	f602 5238 	addw	r2, r2, #3384	; 0xd38
    e89e:	f7fc f91e 	bl	aade <memq_enqueue>
	LL_ASSERT(link);
    e8a2:	b928      	cbnz	r0, e8b0 <terminate_ind_rx_enqueue+0x44>
    e8a4:	4040      	eors	r0, r0
    e8a6:	f380 8811 	msr	BASEPRI, r0
    e8aa:	f04f 0004 	mov.w	r0, #4
    e8ae:	df02      	svc	2
}
    e8b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    e8b4:	f006 bd68 	b.w	15388 <radio_event_callback>
    e8b8:	20000bb0 	.word	0x20000bb0

0000e8bc <packet_rx_enqueue>:
{
    e8bc:	b510      	push	{r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    e8be:	4a16      	ldr	r2, [pc, #88]	; (e918 <packet_rx_enqueue+0x5c>)
    e8c0:	f892 3d29 	ldrb.w	r3, [r2, #3369]	; 0xd29
    e8c4:	f892 1d2a 	ldrb.w	r1, [r2, #3370]	; 0xd2a
    e8c8:	4299      	cmp	r1, r3
    e8ca:	d101      	bne.n	e8d0 <packet_rx_enqueue+0x14>
    e8cc:	f7ff ff3a 	bl	e744 <event_active.part.15>
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    e8d0:	f892 1d29 	ldrb.w	r1, [r2, #3369]	; 0xd29
    e8d4:	f8d2 3d24 	ldr.w	r3, [r2, #3364]	; 0xd24
    e8d8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    e8dc:	f892 3d60 	ldrb.w	r3, [r2, #3424]	; 0xd60
	link = node_rx->hdr.onion.link;
    e8e0:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    e8e2:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    e8e4:	f892 3d29 	ldrb.w	r3, [r2, #3369]	; 0xd29
	if (last == _radio.packet_rx_count) {
    e8e8:	f892 4d28 	ldrb.w	r4, [r2, #3368]	; 0xd28
	last = _radio.packet_rx_last + 1;
    e8ec:	3301      	adds	r3, #1
    e8ee:	b2db      	uxtb	r3, r3
		last = 0;
    e8f0:	429c      	cmp	r4, r3
    e8f2:	bf08      	it	eq
    e8f4:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    e8f6:	f882 3d29 	strb.w	r3, [r2, #3369]	; 0xd29
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    e8fa:	f602 5238 	addw	r2, r2, #3384	; 0xd38
    e8fe:	f7fc f8ee 	bl	aade <memq_enqueue>
	LL_ASSERT(link);
    e902:	b928      	cbnz	r0, e910 <packet_rx_enqueue+0x54>
    e904:	4040      	eors	r0, r0
    e906:	f380 8811 	msr	BASEPRI, r0
    e90a:	f04f 0004 	mov.w	r0, #4
    e90e:	df02      	svc	2
}
    e910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    e914:	f006 bd38 	b.w	15388 <radio_event_callback>
    e918:	20000bb0 	.word	0x20000bb0

0000e91c <mayfly_adv_stop>:
{
    e91c:	b510      	push	{r4, lr}
	node_rx = packet_rx_reserve_get(1);
    e91e:	2001      	movs	r0, #1
    e920:	f7fe fdd8 	bl	d4d4 <packet_rx_reserve_get>
	LL_ASSERT(node_rx);
    e924:	4604      	mov	r4, r0
    e926:	b908      	cbnz	r0, e92c <mayfly_adv_stop+0x10>
    e928:	f7ff ff0c 	bl	e744 <event_active.part.15>
	node_rx->hdr.handle = 0xffff;
    e92c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e930:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    e932:	2306      	movs	r3, #6
    e934:	7103      	strb	r3, [r0, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    e936:	221d      	movs	r2, #29
    e938:	2100      	movs	r1, #0
    e93a:	300b      	adds	r0, #11
    e93c:	f7f2 f801 	bl	942 <memset>
	radio_le_conn_cmplt->status = 0x3c;
    e940:	233c      	movs	r3, #60	; 0x3c
    e942:	72e3      	strb	r3, [r4, #11]
}
    e944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_enqueue();
    e948:	f7ff bfb8 	b.w	e8bc <packet_rx_enqueue>

0000e94c <isr_rx_scan_report>:
{
    e94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e950:	4681      	mov	r9, r0
	node_rx = packet_rx_reserve_get(3);
    e952:	2003      	movs	r0, #3
{
    e954:	460f      	mov	r7, r1
    e956:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
    e958:	f7fe fdbc 	bl	d4d4 <packet_rx_reserve_get>
	if (node_rx == 0) {
    e95c:	4604      	mov	r4, r0
    e95e:	b3a0      	cbz	r0, e9ca <isr_rx_scan_report+0x7e>
	node_rx->hdr.handle = 0xffff;
    e960:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e964:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    e966:	4b1a      	ldr	r3, [pc, #104]	; (e9d0 <isr_rx_scan_report+0x84>)
    e968:	f893 3c2d 	ldrb.w	r3, [r3, #3117]	; 0xc2d
    e96c:	075a      	lsls	r2, r3, #29
    e96e:	d028      	beq.n	e9c2 <isr_rx_scan_report+0x76>
		switch (_radio.scanner.phy) {
    e970:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e974:	b2da      	uxtb	r2, r3
    e976:	2a01      	cmp	r2, #1
    e978:	d007      	beq.n	e98a <isr_rx_scan_report+0x3e>
    e97a:	2a04      	cmp	r2, #4
    e97c:	d006      	beq.n	e98c <isr_rx_scan_report+0x40>
			LL_ASSERT(0);
    e97e:	4040      	eors	r0, r0
    e980:	f380 8811 	msr	BASEPRI, r0
    e984:	f04f 0004 	mov.w	r0, #4
    e988:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    e98a:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    e98c:	f894 8009 	ldrb.w	r8, [r4, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    e990:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    e992:	f104 0508 	add.w	r5, r4, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    e996:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
    e99a:	f1b9 0f00 	cmp.w	r9, #0
    e99e:	d012      	beq.n	e9c6 <isr_rx_scan_report+0x7a>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    e9a0:	f008 fd0a 	bl	173b8 <radio_rssi_get>
			     pdu_adv_rx->len] =
    e9a4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    e9a8:	f805 0008 	strb.w	r0, [r5, r8]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    e9ac:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
    e9ae:	442b      	add	r3, r5
    e9b0:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    e9b2:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
    e9b4:	441d      	add	r5, r3
    e9b6:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
    e9b8:	f7ff ff80 	bl	e8bc <packet_rx_enqueue>
	return 0;
    e9bc:	2000      	movs	r0, #0
    e9be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    e9c2:	2302      	movs	r3, #2
    e9c4:	e7e2      	b.n	e98c <isr_rx_scan_report+0x40>
			     pdu_adv_rx->len] =
    e9c6:	207f      	movs	r0, #127	; 0x7f
    e9c8:	e7ee      	b.n	e9a8 <isr_rx_scan_report+0x5c>
		return 1;
    e9ca:	2001      	movs	r0, #1
}
    e9cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e9d0:	20000bb0 	.word	0x20000bb0
    e9d4:	00000000 	.word	0x00000000

0000e9d8 <sched_after_mstr_free_offset_get>:
{
    e9d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e9da:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    e9dc:	aa02      	add	r2, sp, #8
{
    e9de:	461c      	mov	r4, r3
    e9e0:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    e9e2:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    e9e6:	3127      	adds	r1, #39	; 0x27
    e9e8:	2001      	movs	r0, #1
    e9ea:	f7ff fd49 	bl	e480 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    e9ee:	6823      	ldr	r3, [r4, #0]
    e9f0:	b1fb      	cbz	r3, ea32 <sched_after_mstr_free_offset_get+0x5a>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    e9f2:	9801      	ldr	r0, [sp, #4]
    e9f4:	1b83      	subs	r3, r0, r6
    e9f6:	021b      	lsls	r3, r3, #8
    e9f8:	d501      	bpl.n	e9fe <sched_after_mstr_free_offset_get+0x26>
    e9fa:	f7ff fea3 	bl	e744 <event_active.part.15>
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    e9fe:	4631      	mov	r1, r6
    ea00:	f7fc fff8 	bl	b9f4 <ticker_ticks_diff_get>
    ea04:	4602      	mov	r2, r0
    ea06:	4810      	ldr	r0, [pc, #64]	; (ea48 <sched_after_mstr_free_offset_get+0x70>)
    ea08:	2307      	movs	r3, #7
    ea0a:	fba2 0100 	umull	r0, r1, r2, r0
    ea0e:	fb03 1102 	mla	r1, r3, r2, r1
    ea12:	a30b      	add	r3, pc, #44	; (adr r3, ea40 <sched_after_mstr_free_offset_get+0x68>)
    ea14:	e9d3 2300 	ldrd	r2, r3, [r3]
    ea18:	f7f1 fc26 	bl	268 <__aeabi_uldivmod>
    ea1c:	6823      	ldr	r3, [r4, #0]
    ea1e:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    ea20:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    ea22:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    ea24:	db05      	blt.n	ea32 <sched_after_mstr_free_offset_get+0x5a>
		u32_t conn_interval_us = conn_interval * 1250;
    ea26:	f240 40e2 	movw	r0, #1250	; 0x4e2
    ea2a:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    ea2c:	6823      	ldr	r3, [r4, #0]
    ea2e:	4298      	cmp	r0, r3
    ea30:	d301      	bcc.n	ea36 <sched_after_mstr_free_offset_get+0x5e>
}
    ea32:	b002      	add	sp, #8
    ea34:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    ea36:	1a1b      	subs	r3, r3, r0
    ea38:	6023      	str	r3, [r4, #0]
    ea3a:	e7f7      	b.n	ea2c <sched_after_mstr_free_offset_get+0x54>
    ea3c:	f3af 8000 	nop.w
    ea40:	3b9aca00 	.word	0x3b9aca00
    ea44:	00000000 	.word	0x00000000
    ea48:	1afd498d 	.word	0x1afd498d

0000ea4c <mayfly_sched_win_offset_use>:
{
    ea4c:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    ea4e:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
    ea52:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    ea54:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    ea58:	68c1      	ldr	r1, [r0, #12]
    ea5a:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    ea5c:	f7ff ffbc 	bl	e9d8 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    ea60:	a902      	add	r1, sp, #8
    ea62:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    ea66:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    ea6a:	f240 42e2 	movw	r2, #1250	; 0x4e2
    ea6e:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    ea72:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    ea74:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    ea78:	f7f1 ff37 	bl	8ea <memcpy>
}
    ea7c:	b002      	add	sp, #8
    ea7e:	bd10      	pop	{r4, pc}

0000ea80 <mayfly_sched_after_mstr_free_offset_get>:
{
    ea80:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    ea82:	4c05      	ldr	r4, [pc, #20]	; (ea98 <mayfly_sched_after_mstr_free_offset_get+0x18>)
    ea84:	4602      	mov	r2, r0
    ea86:	f604 4358 	addw	r3, r4, #3160	; 0xc58
    ea8a:	f8d4 1c50 	ldr.w	r1, [r4, #3152]	; 0xc50
    ea8e:	f8b4 0c48 	ldrh.w	r0, [r4, #3144]	; 0xc48
}
    ea92:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    ea94:	f7ff bfa0 	b.w	e9d8 <sched_after_mstr_free_offset_get>
    ea98:	20000bb0 	.word	0x20000bb0

0000ea9c <ticker_stop_adv_stop>:
{
    ea9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ea9e:	4c3e      	ldr	r4, [pc, #248]	; (eb98 <ticker_stop_adv_stop+0xfc>)
	if (status != TICKER_STATUS_SUCCESS) {
    eaa0:	b120      	cbz	r0, eaac <ticker_stop_adv_stop+0x10>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
    eaa2:	7ca3      	ldrb	r3, [r4, #18]
    eaa4:	2b05      	cmp	r3, #5
    eaa6:	d075      	beq.n	eb94 <ticker_stop_adv_stop+0xf8>
    eaa8:	f7ff fe4c 	bl	e744 <event_active.part.15>
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    eaac:	7c23      	ldrb	r3, [r4, #16]
    eaae:	2b05      	cmp	r3, #5
    eab0:	d002      	beq.n	eab8 <ticker_stop_adv_stop+0x1c>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
    eab2:	7c63      	ldrb	r3, [r4, #17]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    eab4:	2b05      	cmp	r3, #5
    eab6:	d165      	bne.n	eb84 <ticker_stop_adv_stop+0xe8>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    eab8:	ab04      	add	r3, sp, #16
    eaba:	2202      	movs	r2, #2
    eabc:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    eac0:	2200      	movs	r2, #0
    eac2:	9300      	str	r3, [sp, #0]
    eac4:	2101      	movs	r1, #1
    eac6:	4b35      	ldr	r3, [pc, #212]	; (eb9c <ticker_stop_adv_stop+0x100>)
    eac8:	4610      	mov	r0, r2
    eaca:	f7fc fec1 	bl	b850 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    eace:	2802      	cmp	r0, #2
    ead0:	d00d      	beq.n	eaee <ticker_stop_adv_stop+0x52>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    ead2:	9802      	ldr	r0, [sp, #8]
    ead4:	b1c0      	cbz	r0, eb08 <ticker_stop_adv_stop+0x6c>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    ead6:	9802      	ldr	r0, [sp, #8]
    ead8:	2801      	cmp	r0, #1
    eada:	d119      	bne.n	eb10 <ticker_stop_adv_stop+0x74>
		if (_radio.role != ROLE_NONE) {
    eadc:	7ce3      	ldrb	r3, [r4, #19]
    eade:	2b00      	cmp	r3, #0
    eae0:	d050      	beq.n	eb84 <ticker_stop_adv_stop+0xe8>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    eae2:	4b2f      	ldr	r3, [pc, #188]	; (eba0 <ticker_stop_adv_stop+0x104>)
    eae4:	2204      	movs	r2, #4
    eae6:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    eae8:	2200      	movs	r2, #0
    eaea:	4611      	mov	r1, r2
    eaec:	e046      	b.n	eb7c <ticker_stop_adv_stop+0xe0>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    eaee:	2201      	movs	r2, #1
    eaf0:	4611      	mov	r1, r2
    eaf2:	4610      	mov	r0, r2
    eaf4:	f7fc f83c 	bl	ab70 <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
    eaf8:	9b02      	ldr	r3, [sp, #8]
    eafa:	2b02      	cmp	r3, #2
    eafc:	d1e9      	bne.n	ead2 <ticker_stop_adv_stop+0x36>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    eafe:	2101      	movs	r1, #1
    eb00:	2000      	movs	r0, #0
    eb02:	f7fc ff5f 	bl	b9c4 <ticker_job_sched>
    eb06:	e7f7      	b.n	eaf8 <ticker_stop_adv_stop+0x5c>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    eb08:	2302      	movs	r3, #2
    eb0a:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
    eb0c:	7c23      	ldrb	r3, [r4, #16]
    eb0e:	b92b      	cbnz	r3, eb1c <ticker_stop_adv_stop+0x80>
	LL_ASSERT(!retval);
    eb10:	4040      	eors	r0, r0
    eb12:	f380 8811 	msr	BASEPRI, r0
    eb16:	f04f 0004 	mov.w	r0, #4
    eb1a:	df02      	svc	2
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    eb1c:	ab03      	add	r3, sp, #12
    eb1e:	2201      	movs	r2, #1
		_radio.ticker_id_prepare = 0;
    eb20:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    eb22:	4611      	mov	r1, r2
    eb24:	9300      	str	r3, [sp, #0]
    eb26:	4b1d      	ldr	r3, [pc, #116]	; (eb9c <ticker_stop_adv_stop+0x100>)
    eb28:	f7fc fe92 	bl	b850 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    eb2c:	2802      	cmp	r0, #2
    eb2e:	d00f      	beq.n	eb50 <ticker_stop_adv_stop+0xb4>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    eb30:	9a03      	ldr	r2, [sp, #12]
    eb32:	b1d2      	cbz	r2, eb6a <ticker_stop_adv_stop+0xce>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    eb34:	9c03      	ldr	r4, [sp, #12]
    eb36:	2c01      	cmp	r4, #1
    eb38:	d1ea      	bne.n	eb10 <ticker_stop_adv_stop+0x74>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    eb3a:	2200      	movs	r2, #0
    eb3c:	4611      	mov	r1, r2
    eb3e:	4b19      	ldr	r3, [pc, #100]	; (eba4 <ticker_stop_adv_stop+0x108>)
    eb40:	4620      	mov	r0, r4
    eb42:	f7fc f83d 	bl	abc0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    eb46:	4602      	mov	r2, r0
    eb48:	2800      	cmp	r0, #0
    eb4a:	d1e1      	bne.n	eb10 <ticker_stop_adv_stop+0x74>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    eb4c:	4b16      	ldr	r3, [pc, #88]	; (eba8 <ticker_stop_adv_stop+0x10c>)
    eb4e:	e013      	b.n	eb78 <ticker_stop_adv_stop+0xdc>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    eb50:	2201      	movs	r2, #1
    eb52:	4611      	mov	r1, r2
    eb54:	4610      	mov	r0, r2
    eb56:	f7fc f80b 	bl	ab70 <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
    eb5a:	9b03      	ldr	r3, [sp, #12]
    eb5c:	2b02      	cmp	r3, #2
    eb5e:	d1e7      	bne.n	eb30 <ticker_stop_adv_stop+0x94>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    eb60:	2101      	movs	r1, #1
    eb62:	2000      	movs	r0, #0
    eb64:	f7fc ff2e 	bl	b9c4 <ticker_job_sched>
    eb68:	e7f7      	b.n	eb5a <ticker_stop_adv_stop+0xbe>
			u32_t ticks_xtal_to_start =
    eb6a:	69a3      	ldr	r3, [r4, #24]
			if (_radio.advertiser.hdr.ticks_active_to_start >
    eb6c:	69e1      	ldr	r1, [r4, #28]
			ticks_xtal_to_start &= ~XON_BITMASK;
    eb6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
    eb72:	428b      	cmp	r3, r1
    eb74:	d2ea      	bcs.n	eb4c <ticker_stop_adv_stop+0xb0>
				ret = mayfly_enqueue(
    eb76:	4b0b      	ldr	r3, [pc, #44]	; (eba4 <ticker_stop_adv_stop+0x108>)
    eb78:	4611      	mov	r1, r2
    eb7a:	2001      	movs	r0, #1
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    eb7c:	f7fc f820 	bl	abc0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    eb80:	2800      	cmp	r0, #0
    eb82:	d1c5      	bne.n	eb10 <ticker_stop_adv_stop+0x74>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    eb84:	2200      	movs	r2, #0
    eb86:	4b09      	ldr	r3, [pc, #36]	; (ebac <ticker_stop_adv_stop+0x110>)
    eb88:	4611      	mov	r1, r2
    eb8a:	2001      	movs	r0, #1
    eb8c:	f7fc f818 	bl	abc0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    eb90:	2800      	cmp	r0, #0
    eb92:	d1bd      	bne.n	eb10 <ticker_stop_adv_stop+0x74>
}
    eb94:	b004      	add	sp, #16
    eb96:	bd10      	pop	{r4, pc}
    eb98:	20000bb0 	.word	0x20000bb0
    eb9c:	0000d455 	.word	0x0000d455
    eba0:	2000e048 	.word	0x2000e048
    eba4:	2000e018 	.word	0x2000e018
    eba8:	2000e0d8 	.word	0x2000e0d8
    ebac:	2000dfe8 	.word	0x2000dfe8

0000ebb0 <pdu_node_tx_release>:
{
    ebb0:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    ebb2:	4a10      	ldr	r2, [pc, #64]	; (ebf4 <pdu_node_tx_release+0x44>)
    ebb4:	f892 3d60 	ldrb.w	r3, [r2, #3424]	; 0xd60
	if (last == _radio.packet_tx_count) {
    ebb8:	f892 4d5c 	ldrb.w	r4, [r2, #3420]	; 0xd5c
	last = _radio.packet_release_last + 1;
    ebbc:	3301      	adds	r3, #1
    ebbe:	b2db      	uxtb	r3, r3
		last = 0;
    ebc0:	429c      	cmp	r4, r3
    ebc2:	bf08      	it	eq
    ebc4:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    ebc6:	f892 4d5f 	ldrb.w	r4, [r2, #3423]	; 0xd5f
    ebca:	429c      	cmp	r4, r3
    ebcc:	d101      	bne.n	ebd2 <pdu_node_tx_release+0x22>
    ebce:	f7ff fdb9 	bl	e744 <event_active.part.15>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    ebd2:	f892 5d60 	ldrb.w	r5, [r2, #3424]	; 0xd60
    ebd6:	f8d2 4d58 	ldr.w	r4, [r2, #3416]	; 0xd58
    ebda:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    ebde:	f892 0d60 	ldrb.w	r0, [r2, #3424]	; 0xd60
    ebe2:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    ebe6:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    ebe8:	f882 3d60 	strb.w	r3, [r2, #3424]	; 0xd60
}
    ebec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_event_callback();
    ebf0:	f006 bbca 	b.w	15388 <radio_event_callback>
    ebf4:	20000bb0 	.word	0x20000bb0

0000ebf8 <packet_tx_enqueue>:
{
    ebf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    ebfc:	4c24      	ldr	r4, [pc, #144]	; (ec90 <packet_tx_enqueue+0x98>)
{
    ebfe:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    ec00:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    ec02:	b12e      	cbz	r6, ec10 <packet_tx_enqueue+0x18>
    ec04:	f894 3d5d 	ldrb.w	r3, [r4, #3421]	; 0xd5d
    ec08:	f894 2d5e 	ldrb.w	r2, [r4, #3422]	; 0xd5e
    ec0c:	429a      	cmp	r2, r3
    ec0e:	d101      	bne.n	ec14 <packet_tx_enqueue+0x1c>
    ec10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    ec14:	f894 8d5d 	ldrb.w	r8, [r4, #3421]	; 0xd5d
    ec18:	f8d4 9d54 	ldr.w	r9, [r4, #3412]	; 0xd54
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    ec1c:	f8d4 0cf0 	ldr.w	r0, [r4, #3312]	; 0xcf0
    ec20:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    ec24:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    ec28:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
    ec2c:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    ec2e:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    ec30:	f7fb ff30 	bl	aa94 <mem_get>
    ec34:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    ec36:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    ec3a:	8c1a      	ldrh	r2, [r3, #32]
    ec3c:	4282      	cmp	r2, r0
    ec3e:	d11f      	bne.n	ec80 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    ec40:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    ec44:	b942      	cbnz	r2, ec58 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    ec46:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
    ec4a:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
    ec4e:	b91a      	cbnz	r2, ec58 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    ec50:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
    ec54:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
    ec58:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
    ec5c:	b102      	cbz	r2, ec60 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    ec5e:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    ec60:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
    ec64:	f894 3d5d 	ldrb.w	r3, [r4, #3421]	; 0xd5d
		if (first == _radio.packet_tx_count) {
    ec68:	f894 2d5c 	ldrb.w	r2, [r4, #3420]	; 0xd5c
		first = _radio.packet_tx_first + 1;
    ec6c:	3301      	adds	r3, #1
    ec6e:	b2db      	uxtb	r3, r3
			first = 0;
    ec70:	429a      	cmp	r2, r3
    ec72:	bf08      	it	eq
    ec74:	2300      	moveq	r3, #0
    ec76:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    ec78:	f884 3d5d 	strb.w	r3, [r4, #3421]	; 0xd5d
    ec7c:	b2f6      	uxtb	r6, r6
    ec7e:	e7c0      	b.n	ec02 <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    ec80:	792b      	ldrb	r3, [r5, #4]
    ec82:	f367 0301 	bfi	r3, r7, #0, #2
    ec86:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    ec88:	4629      	mov	r1, r5
    ec8a:	f7ff ff91 	bl	ebb0 <pdu_node_tx_release>
    ec8e:	e7e9      	b.n	ec64 <packet_tx_enqueue+0x6c>
    ec90:	20000bb0 	.word	0x20000bb0

0000ec94 <connection_release>:
{
    ec94:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    ec96:	2201      	movs	r2, #1
{
    ec98:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    ec9a:	4611      	mov	r1, r2
    ec9c:	2000      	movs	r0, #0
    ec9e:	f7fb ff67 	bl	ab70 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    eca2:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    eca6:	2100      	movs	r1, #0
    eca8:	f242 73e2 	movw	r3, #10210	; 0x27e2
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ecac:	3207      	adds	r2, #7
	ticker_status =
    ecae:	9300      	str	r3, [sp, #0]
    ecb0:	4608      	mov	r0, r1
    ecb2:	4b3a      	ldr	r3, [pc, #232]	; (ed9c <connection_release+0x108>)
    ecb4:	b2d2      	uxtb	r2, r2
    ecb6:	f7fc fdcb 	bl	b850 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ecba:	f030 0102 	bics.w	r1, r0, #2
    ecbe:	d005      	beq.n	eccc <connection_release+0x38>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ecc0:	4040      	eors	r0, r0
    ecc2:	f380 8811 	msr	BASEPRI, r0
    ecc6:	f04f 0004 	mov.w	r0, #4
    ecca:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    eccc:	4b34      	ldr	r3, [pc, #208]	; (eda0 <connection_release+0x10c>)
    ecce:	7d1a      	ldrb	r2, [r3, #20]
    ecd0:	2a05      	cmp	r2, #5
    ecd2:	461d      	mov	r5, r3
    ecd4:	d11b      	bne.n	ed0e <connection_release+0x7a>
					  conn->handle))) {
    ecd6:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    ecd8:	7c18      	ldrb	r0, [r3, #16]
    ecda:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    ecdc:	4290      	cmp	r0, r2
    ecde:	d116      	bne.n	ed0e <connection_release+0x7a>
		_radio.ticker_id_prepare = 0;
    ece0:	7419      	strb	r1, [r3, #16]
		ticker_status =
    ece2:	f242 73f3 	movw	r3, #10227	; 0x27f3
    ece6:	9300      	str	r3, [sp, #0]
    ece8:	2201      	movs	r2, #1
    ecea:	4b2c      	ldr	r3, [pc, #176]	; (ed9c <connection_release+0x108>)
    ecec:	4608      	mov	r0, r1
    ecee:	f7fc fdaf 	bl	b850 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ecf2:	f030 0202 	bics.w	r2, r0, #2
    ecf6:	d1e3      	bne.n	ecc0 <connection_release+0x2c>
		ticker_status =
    ecf8:	f242 73fa 	movw	r3, #10234	; 0x27fa
    ecfc:	9300      	str	r3, [sp, #0]
    ecfe:	4611      	mov	r1, r2
    ed00:	4b26      	ldr	r3, [pc, #152]	; (ed9c <connection_release+0x108>)
    ed02:	4610      	mov	r0, r2
    ed04:	f7fc fda4 	bl	b850 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ed08:	f030 0302 	bics.w	r3, r0, #2
    ed0c:	d1d8      	bne.n	ecc0 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    ed0e:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    ed12:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    ed16:	4299      	cmp	r1, r3
    ed18:	d003      	beq.n	ed22 <connection_release+0x8e>
    ed1a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    ed1e:	4299      	cmp	r1, r3
    ed20:	d101      	bne.n	ed26 <connection_release+0x92>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    ed22:	4e20      	ldr	r6, [pc, #128]	; (eda4 <connection_release+0x110>)
    ed24:	e012      	b.n	ed4c <connection_release+0xb8>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    ed26:	790b      	ldrb	r3, [r1, #4]
    ed28:	f36f 0301 	bfc	r3, #0, #2
    ed2c:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    ed2e:	680b      	ldr	r3, [r1, #0]
    ed30:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
    ed34:	8c20      	ldrh	r0, [r4, #32]
    ed36:	f7ff ff3b 	bl	ebb0 <pdu_node_tx_release>
    ed3a:	e7e8      	b.n	ed0e <connection_release+0x7a>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    ed3c:	6803      	ldr	r3, [r0, #0]
    ed3e:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    ed42:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    ed46:	4631      	mov	r1, r6
    ed48:	f7fb fe89 	bl	aa5e <mem_release>
	while ((conn->pkt_tx_head) &&
    ed4c:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    ed50:	b118      	cbz	r0, ed5a <connection_release+0xc6>
    ed52:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    ed56:	4298      	cmp	r0, r3
    ed58:	d1f0      	bne.n	ed3c <connection_release+0xa8>
	conn->pkt_tx_ctrl = NULL;
    ed5a:	2300      	movs	r3, #0
    ed5c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    ed60:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
    ed64:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    ed68:	b951      	cbnz	r1, ed80 <connection_release+0xec>
	conn->handle = 0xffff;
    ed6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ed6e:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    ed70:	f8d5 3d70 	ldr.w	r3, [r5, #3440]	; 0xd70
    ed74:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    ed76:	bf08      	it	eq
    ed78:	f8c5 1d70 	streq.w	r1, [r5, #3440]	; 0xd70
}
    ed7c:	b002      	add	sp, #8
    ed7e:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    ed80:	790b      	ldrb	r3, [r1, #4]
    ed82:	f36f 0301 	bfc	r3, #0, #2
    ed86:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    ed88:	680b      	ldr	r3, [r1, #0]
    ed8a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
    ed8e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    ed92:	8c20      	ldrh	r0, [r4, #32]
    ed94:	f7ff ff0c 	bl	ebb0 <pdu_node_tx_release>
    ed98:	e7e4      	b.n	ed64 <connection_release+0xd0>
    ed9a:	bf00      	nop
    ed9c:	0000ef15 	.word	0x0000ef15
    eda0:	20000bb0 	.word	0x20000bb0
    eda4:	200018f4 	.word	0x200018f4

0000eda8 <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
    eda8:	b2c0      	uxtb	r0, r0
{
    edaa:	b508      	push	{r3, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    edac:	1f03      	subs	r3, r0, #4
    edae:	2b01      	cmp	r3, #1
    edb0:	d901      	bls.n	edb6 <mayfly_radio_stop+0xe>
    edb2:	f7ff fcc7 	bl	e744 <event_active.part.15>
	radio_used = ((_radio.state != STATE_NONE) &&
    edb6:	4a08      	ldr	r2, [pc, #32]	; (edd8 <mayfly_radio_stop+0x30>)
    edb8:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    edba:	b13b      	cbz	r3, edcc <mayfly_radio_stop+0x24>
	radio_used = ((_radio.state != STATE_NONE) &&
    edbc:	3b04      	subs	r3, #4
    edbe:	2b01      	cmp	r3, #1
    edc0:	d904      	bls.n	edcc <mayfly_radio_stop+0x24>
			_radio.state = state;
    edc2:	7510      	strb	r0, [r2, #20]
}
    edc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_disable();
    edc8:	f008 ba6e 	b.w	172a8 <radio_disable>
	if (radio_used || !radio_is_idle()) {
    edcc:	f008 fa9e 	bl	1730c <radio_is_idle>
    edd0:	2800      	cmp	r0, #0
    edd2:	d0f7      	beq.n	edc4 <mayfly_radio_stop+0x1c>
}
    edd4:	bd08      	pop	{r3, pc}
    edd6:	bf00      	nop
    edd8:	20000bb0 	.word	0x20000bb0

0000eddc <mayfly_radio_active>:
{
    eddc:	b508      	push	{r3, lr}
    edde:	4a0a      	ldr	r2, [pc, #40]	; (ee08 <mayfly_radio_active+0x2c>)
		if (s_active++) {
    ede0:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    ede2:	b138      	cbz	r0, edf4 <mayfly_radio_active+0x18>
		if (s_active++) {
    ede4:	1c59      	adds	r1, r3, #1
    ede6:	7011      	strb	r1, [r2, #0]
    ede8:	b963      	cbnz	r3, ee04 <mayfly_radio_active+0x28>
		radio_active_callback(1);
    edea:	2001      	movs	r0, #1
}
    edec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_active_callback(0);
    edf0:	f006 bac8 	b.w	15384 <radio_active_callback>
		LL_ASSERT(s_active);
    edf4:	b90b      	cbnz	r3, edfa <mayfly_radio_active+0x1e>
    edf6:	f7ff fca5 	bl	e744 <event_active.part.15>
		if (--s_active) {
    edfa:	3b01      	subs	r3, #1
    edfc:	b2db      	uxtb	r3, r3
    edfe:	7013      	strb	r3, [r2, #0]
    ee00:	2b00      	cmp	r3, #0
    ee02:	d0f3      	beq.n	edec <mayfly_radio_active+0x10>
    ee04:	bd08      	pop	{r3, pc}
    ee06:	bf00      	nop
    ee08:	20001972 	.word	0x20001972

0000ee0c <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    ee0c:	2000      	movs	r0, #0
    ee0e:	f7ff bfe5 	b.w	eddc <mayfly_radio_active>
	...

0000ee14 <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ee14:	2200      	movs	r2, #0
{
    ee16:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ee18:	4611      	mov	r1, r2
    ee1a:	4b04      	ldr	r3, [pc, #16]	; (ee2c <event_xtal+0x18>)
    ee1c:	4610      	mov	r0, r2
    ee1e:	f7fb fecf 	bl	abc0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    ee22:	b108      	cbz	r0, ee28 <event_xtal+0x14>
    ee24:	f7ff fc8e 	bl	e744 <event_active.part.15>
    ee28:	bd08      	pop	{r3, pc}
    ee2a:	bf00      	nop
    ee2c:	2000e098 	.word	0x2000e098

0000ee30 <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ee30:	2200      	movs	r2, #0
{
    ee32:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ee34:	4611      	mov	r1, r2
    ee36:	4b04      	ldr	r3, [pc, #16]	; (ee48 <event_active+0x18>)
    ee38:	4610      	mov	r0, r2
    ee3a:	f7fb fec1 	bl	abc0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    ee3e:	b108      	cbz	r0, ee44 <event_active+0x14>
    ee40:	f7ff fc80 	bl	e744 <event_active.part.15>
    ee44:	bd08      	pop	{r3, pc}
    ee46:	bf00      	nop
    ee48:	2000dff8 	.word	0x2000dff8

0000ee4c <event_stop>:
	s_mfy_radio_stop.param = context;
    ee4c:	4a06      	ldr	r2, [pc, #24]	; (ee68 <event_stop+0x1c>)
{
    ee4e:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    ee50:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ee52:	4613      	mov	r3, r2
    ee54:	2200      	movs	r2, #0
    ee56:	4611      	mov	r1, r2
    ee58:	4610      	mov	r0, r2
    ee5a:	f7fb feb1 	bl	abc0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    ee5e:	b108      	cbz	r0, ee64 <event_stop+0x18>
    ee60:	f7ff fc70 	bl	e744 <event_active.part.15>
    ee64:	bd08      	pop	{r3, pc}
    ee66:	bf00      	nop
    ee68:	2000e038 	.word	0x2000e038

0000ee6c <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    ee6c:	b508      	push	{r3, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    ee6e:	b108      	cbz	r0, ee74 <ticker_op_latency_cancelled+0x8>
    ee70:	f7ff fc68 	bl	e744 <event_active.part.15>

	conn->slave.latency_cancel = 0;
    ee74:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    ee78:	f360 0341 	bfi	r3, r0, #1, #1
    ee7c:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
    ee80:	bd08      	pop	{r3, pc}
	...

0000ee84 <ticker_update_slave_assert>:
{
    ee84:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    ee86:	b130      	cbz	r0, ee96 <ticker_update_slave_assert+0x12>
    ee88:	4b03      	ldr	r3, [pc, #12]	; (ee98 <ticker_update_slave_assert+0x14>)
    ee8a:	7c9b      	ldrb	r3, [r3, #18]
    ee8c:	b2c9      	uxtb	r1, r1
    ee8e:	4299      	cmp	r1, r3
    ee90:	d001      	beq.n	ee96 <ticker_update_slave_assert+0x12>
    ee92:	f7ff fc57 	bl	e744 <event_active.part.15>
    ee96:	bd08      	pop	{r3, pc}
    ee98:	20000bb0 	.word	0x20000bb0

0000ee9c <ticker_update_adv_assert>:
{
    ee9c:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    ee9e:	b128      	cbz	r0, eeac <ticker_update_adv_assert+0x10>
    eea0:	4b03      	ldr	r3, [pc, #12]	; (eeb0 <ticker_update_adv_assert+0x14>)
    eea2:	7c9b      	ldrb	r3, [r3, #18]
    eea4:	2b05      	cmp	r3, #5
    eea6:	d001      	beq.n	eeac <ticker_update_adv_assert+0x10>
    eea8:	f7ff fc4c 	bl	e744 <event_active.part.15>
    eeac:	bd08      	pop	{r3, pc}
    eeae:	bf00      	nop
    eeb0:	20000bb0 	.word	0x20000bb0

0000eeb4 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    eeb4:	2801      	cmp	r0, #1
{
    eeb6:	b508      	push	{r3, lr}
    eeb8:	4b09      	ldr	r3, [pc, #36]	; (eee0 <ticker_stop_scan_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
    eeba:	d107      	bne.n	eecc <ticker_stop_scan_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    eebc:	7c9a      	ldrb	r2, [r3, #18]
    eebe:	2a06      	cmp	r2, #6
    eec0:	d102      	bne.n	eec8 <ticker_stop_scan_assert+0x14>
			_radio.ticker_id_stop = 0;
    eec2:	2200      	movs	r2, #0
    eec4:	749a      	strb	r2, [r3, #18]
    eec6:	bd08      	pop	{r3, pc}
    eec8:	f7ff fc3c 	bl	e744 <event_active.part.15>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    eecc:	7c1b      	ldrb	r3, [r3, #16]
    eece:	2b06      	cmp	r3, #6
    eed0:	d105      	bne.n	eede <ticker_stop_scan_assert+0x2a>
    eed2:	4040      	eors	r0, r0
    eed4:	f380 8811 	msr	BASEPRI, r0
    eed8:	f04f 0004 	mov.w	r0, #4
    eedc:	df02      	svc	2
    eede:	bd08      	pop	{r3, pc}
    eee0:	20000bb0 	.word	0x20000bb0

0000eee4 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    eee4:	2801      	cmp	r0, #1
{
    eee6:	b508      	push	{r3, lr}
    eee8:	4b09      	ldr	r3, [pc, #36]	; (ef10 <ticker_stop_adv_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
    eeea:	d107      	bne.n	eefc <ticker_stop_adv_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    eeec:	7c9a      	ldrb	r2, [r3, #18]
    eeee:	2a05      	cmp	r2, #5
    eef0:	d102      	bne.n	eef8 <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0;
    eef2:	2200      	movs	r2, #0
    eef4:	749a      	strb	r2, [r3, #18]
    eef6:	bd08      	pop	{r3, pc}
    eef8:	f7ff fc24 	bl	e744 <event_active.part.15>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    eefc:	7c1b      	ldrb	r3, [r3, #16]
    eefe:	2b05      	cmp	r3, #5
    ef00:	d105      	bne.n	ef0e <ticker_stop_adv_assert+0x2a>
    ef02:	4040      	eors	r0, r0
    ef04:	f380 8811 	msr	BASEPRI, r0
    ef08:	f04f 0004 	mov.w	r0, #4
    ef0c:	df02      	svc	2
    ef0e:	bd08      	pop	{r3, pc}
    ef10:	20000bb0 	.word	0x20000bb0

0000ef14 <ticker_success_assert>:
{
    ef14:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    ef16:	b108      	cbz	r0, ef1c <ticker_success_assert+0x8>
    ef18:	f7ff fc14 	bl	e744 <event_active.part.15>
    ef1c:	bd08      	pop	{r3, pc}
	...

0000ef20 <adv_scan_configure.constprop.34>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    ef20:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    ef22:	ad02      	add	r5, sp, #8
    ef24:	4b10      	ldr	r3, [pc, #64]	; (ef68 <adv_scan_configure.constprop.34+0x48>)
    ef26:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    ef2a:	4604      	mov	r4, r0
	radio_reset();
    ef2c:	f008 f8d8 	bl	170e0 <radio_reset>
	radio_tx_power_set(0);
    ef30:	2000      	movs	r0, #0
    ef32:	f008 f91d 	bl	17170 <radio_tx_power_set>
	radio_isr_set(isr);
    ef36:	480d      	ldr	r0, [pc, #52]	; (ef6c <adv_scan_configure.constprop.34+0x4c>)
    ef38:	f008 f89c 	bl	17074 <radio_isr_set>
	radio_phy_set(phy, flags);
    ef3c:	2101      	movs	r1, #1
    ef3e:	4620      	mov	r0, r4
    ef40:	f008 f8e8 	bl	17114 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    ef44:	4628      	mov	r0, r5
    ef46:	f008 f931 	bl	171ac <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    ef4a:	0062      	lsls	r2, r4, #1
    ef4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    ef50:	21ff      	movs	r1, #255	; 0xff
    ef52:	2008      	movs	r0, #8
    ef54:	f008 f942 	bl	171dc <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    ef58:	4905      	ldr	r1, [pc, #20]	; (ef70 <adv_scan_configure.constprop.34+0x50>)
    ef5a:	f240 605b 	movw	r0, #1627	; 0x65b
    ef5e:	f008 f9df 	bl	17320 <radio_crc_configure>
}
    ef62:	b003      	add	sp, #12
    ef64:	bd30      	pop	{r4, r5, pc}
    ef66:	bf00      	nop
    ef68:	8e89bed6 	.word	0x8e89bed6
    ef6c:	000120a1 	.word	0x000120a1
    ef70:	00555555 	.word	0x00555555

0000ef74 <event_stop.constprop.35>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    ef74:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    ef76:	4b05      	ldr	r3, [pc, #20]	; (ef8c <event_stop.constprop.35+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ef78:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    ef7a:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ef7c:	4611      	mov	r1, r2
    ef7e:	4610      	mov	r0, r2
    ef80:	f7fb fe1e 	bl	abc0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    ef84:	b108      	cbz	r0, ef8a <event_stop.constprop.35+0x16>
    ef86:	f7ff fbdd 	bl	e744 <event_active.part.15>
    ef8a:	bd08      	pop	{r3, pc}
    ef8c:	2000e038 	.word	0x2000e038

0000ef90 <event_common_prepare>:
{
    ef90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    ef94:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    ef96:	681d      	ldr	r5, [r3, #0]
{
    ef98:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    ef9a:	2c00      	cmp	r4, #0
{
    ef9c:	4681      	mov	r9, r0
    ef9e:	910b      	str	r1, [sp, #44]	; 0x2c
    efa0:	4690      	mov	r8, r2
    efa2:	469b      	mov	fp, r3
    efa4:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    efa8:	da03      	bge.n	efb2 <event_common_prepare+0x22>
		_ticks_xtal_to_start =
    efaa:	9c16      	ldr	r4, [sp, #88]	; 0x58
    efac:	42ac      	cmp	r4, r5
    efae:	bf38      	it	cc
    efb0:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    efb2:	42ac      	cmp	r4, r5
    efb4:	4f4e      	ldr	r7, [pc, #312]	; (f0f0 <event_common_prepare+0x160>)
    efb6:	d91b      	bls.n	eff0 <event_common_prepare+0x60>
		ticker_status =
    efb8:	f241 7348 	movw	r3, #5960	; 0x1748
    efbc:	9308      	str	r3, [sp, #32]
    efbe:	4b4d      	ldr	r3, [pc, #308]	; (f0f4 <event_common_prepare+0x164>)
    efc0:	9305      	str	r3, [sp, #20]
    efc2:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    efc4:	1b63      	subs	r3, r4, r5
		ticker_status =
    efc6:	9300      	str	r3, [sp, #0]
    efc8:	9707      	str	r7, [sp, #28]
    efca:	464b      	mov	r3, r9
    efcc:	9106      	str	r1, [sp, #24]
    efce:	9104      	str	r1, [sp, #16]
    efd0:	9103      	str	r1, [sp, #12]
    efd2:	9102      	str	r1, [sp, #8]
    efd4:	9101      	str	r1, [sp, #4]
    efd6:	2201      	movs	r2, #1
    efd8:	4608      	mov	r0, r1
    efda:	f7fc fb9b 	bl	b714 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    efde:	f030 0302 	bics.w	r3, r0, #2
    efe2:	d02b      	beq.n	f03c <event_common_prepare+0xac>
		LL_ASSERT(!retval);
    efe4:	4040      	eors	r0, r0
    efe6:	f380 8811 	msr	BASEPRI, r0
    efea:	f04f 0004 	mov.w	r0, #4
    efee:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    eff0:	d21d      	bcs.n	f02e <event_common_prepare+0x9e>
		event_active(0, 0, 0, NULL);
    eff2:	2300      	movs	r3, #0
    eff4:	461a      	mov	r2, r3
    eff6:	4619      	mov	r1, r3
    eff8:	4618      	mov	r0, r3
    effa:	f7ff ff19 	bl	ee30 <event_active>
		ticker_status =
    effe:	f241 735d 	movw	r3, #5981	; 0x175d
    f002:	2100      	movs	r1, #0
    f004:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    f006:	1b2c      	subs	r4, r5, r4
		ticker_status =
    f008:	4b3b      	ldr	r3, [pc, #236]	; (f0f8 <event_common_prepare+0x168>)
    f00a:	9305      	str	r3, [sp, #20]
    f00c:	9707      	str	r7, [sp, #28]
    f00e:	464b      	mov	r3, r9
    f010:	9106      	str	r1, [sp, #24]
    f012:	9104      	str	r1, [sp, #16]
    f014:	9103      	str	r1, [sp, #12]
    f016:	9102      	str	r1, [sp, #8]
    f018:	9101      	str	r1, [sp, #4]
    f01a:	9400      	str	r4, [sp, #0]
    f01c:	2201      	movs	r2, #1
    f01e:	4608      	mov	r0, r1
    f020:	f7fc fb78 	bl	b714 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f024:	f030 0302 	bics.w	r3, r0, #2
    f028:	d1dc      	bne.n	efe4 <event_common_prepare+0x54>
    f02a:	462c      	mov	r4, r5
    f02c:	e00b      	b.n	f046 <event_common_prepare+0xb6>
		event_active(0, 0, 0, NULL);
    f02e:	2300      	movs	r3, #0
    f030:	461a      	mov	r2, r3
    f032:	4619      	mov	r1, r3
    f034:	4618      	mov	r0, r3
    f036:	f7ff fefb 	bl	ee30 <event_active>
		event_xtal(0, 0, 0, NULL);
    f03a:	2300      	movs	r3, #0
    f03c:	461a      	mov	r2, r3
    f03e:	4619      	mov	r1, r3
    f040:	4618      	mov	r0, r3
    f042:	f7ff fee7 	bl	ee14 <event_xtal>
	_radio.remainder_anchor = remainder;
    f046:	4e2d      	ldr	r6, [pc, #180]	; (f0fc <event_common_prepare+0x16c>)
    f048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f04a:	60f3      	str	r3, [r6, #12]
	ticker_status =
    f04c:	f241 7375 	movw	r3, #6005	; 0x1775
    f050:	9308      	str	r3, [sp, #32]
    f052:	9b19      	ldr	r3, [sp, #100]	; 0x64
    f054:	9306      	str	r3, [sp, #24]
    f056:	2200      	movs	r2, #0
    f058:	9b18      	ldr	r3, [sp, #96]	; 0x60
    f05a:	9305      	str	r3, [sp, #20]
    f05c:	9707      	str	r7, [sp, #28]
    f05e:	464b      	mov	r3, r9
    f060:	9204      	str	r2, [sp, #16]
    f062:	9203      	str	r2, [sp, #12]
    f064:	9202      	str	r2, [sp, #8]
    f066:	9201      	str	r2, [sp, #4]
    f068:	9400      	str	r4, [sp, #0]
    f06a:	4611      	mov	r1, r2
    f06c:	4610      	mov	r0, r2
    f06e:	f7fc fb51 	bl	b714 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f072:	f030 0302 	bics.w	r3, r0, #2
    f076:	d1b5      	bne.n	efe4 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    f078:	2005      	movs	r0, #5
    f07a:	f7ff ff7b 	bl	ef74 <event_stop.constprop.35>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    f07e:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
    f082:	429d      	cmp	r5, r3
    f084:	d023      	beq.n	f0ce <event_common_prepare+0x13e>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    f086:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    f08a:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    f08e:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    f090:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    f092:	bfbc      	itt	lt
    f094:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    f098:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = (_radio.ticks_active_to_start <
    f09c:	f8d6 2d6c 	ldr.w	r2, [r6, #3436]	; 0xd6c
    f0a0:	f8d8 1000 	ldr.w	r1, [r8]
    f0a4:	428a      	cmp	r2, r1
    f0a6:	bf38      	it	cc
    f0a8:	460a      	movcc	r2, r1
		ticker_status =
    f0aa:	f241 71a5 	movw	r1, #6053	; 0x17a5
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    f0ae:	b2a3      	uxth	r3, r4
    f0b0:	b292      	uxth	r2, r2
		ticker_status =
    f0b2:	9106      	str	r1, [sp, #24]
    f0b4:	2100      	movs	r1, #0
    f0b6:	9302      	str	r3, [sp, #8]
    f0b8:	9201      	str	r2, [sp, #4]
    f0ba:	9200      	str	r2, [sp, #0]
    f0bc:	9104      	str	r1, [sp, #16]
    f0be:	9103      	str	r1, [sp, #12]
    f0c0:	4652      	mov	r2, sl
    f0c2:	4608      	mov	r0, r1
    f0c4:	f7fc fb76 	bl	b7b4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f0c8:	f030 0302 	bics.w	r3, r0, #2
    f0cc:	d18a      	bne.n	efe4 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    f0ce:	20ff      	movs	r0, #255	; 0xff
    f0d0:	f7ff fd92 	bl	ebf8 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    f0d4:	4b0a      	ldr	r3, [pc, #40]	; (f100 <event_common_prepare+0x170>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f0d6:	2201      	movs	r2, #1
    f0d8:	4611      	mov	r1, r2
    f0da:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    f0dc:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f0e0:	f7fb fd6e 	bl	abc0 <mayfly_enqueue>
		LL_ASSERT(!retval);
    f0e4:	2800      	cmp	r0, #0
    f0e6:	f47f af7d 	bne.w	efe4 <event_common_prepare+0x54>
}
    f0ea:	b00d      	add	sp, #52	; 0x34
    f0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f0f0:	0000ef15 	.word	0x0000ef15
    f0f4:	0000ee31 	.word	0x0000ee31
    f0f8:	0000ee15 	.word	0x0000ee15
    f0fc:	20000bb0 	.word	0x20000bb0
    f100:	2000e0f8 	.word	0x2000e0f8

0000f104 <radio_event_adv_prepare>:
{
    f104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    f106:	4a0b      	ldr	r2, [pc, #44]	; (f134 <radio_event_adv_prepare+0x30>)
    f108:	7c13      	ldrb	r3, [r2, #16]
    f10a:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    f10e:	b10b      	cbz	r3, f114 <radio_event_adv_prepare+0x10>
    f110:	f7ff fb18 	bl	e744 <event_active.part.15>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    f114:	2305      	movs	r3, #5
    f116:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
    f118:	9403      	str	r4, [sp, #12]
    f11a:	4c07      	ldr	r4, [pc, #28]	; (f138 <radio_event_adv_prepare+0x34>)
    f11c:	9402      	str	r4, [sp, #8]
    f11e:	9301      	str	r3, [sp, #4]
    f120:	6a13      	ldr	r3, [r2, #32]
    f122:	9300      	str	r3, [sp, #0]
    f124:	f102 031c 	add.w	r3, r2, #28
    f128:	3218      	adds	r2, #24
    f12a:	f7ff ff31 	bl	ef90 <event_common_prepare>
}
    f12e:	b004      	add	sp, #16
    f130:	bd10      	pop	{r4, pc}
    f132:	bf00      	nop
    f134:	20000bb0 	.word	0x20000bb0
    f138:	0000f315 	.word	0x0000f315

0000f13c <event_scan_prepare>:
{
    f13c:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    f13e:	4c1d      	ldr	r4, [pc, #116]	; (f1b4 <event_scan_prepare+0x78>)
    f140:	7c23      	ldrb	r3, [r4, #16]
{
    f142:	b085      	sub	sp, #20
    f144:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    f146:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    f14a:	b12b      	cbz	r3, f158 <event_scan_prepare+0x1c>
		LL_ASSERT(!retval);
    f14c:	4040      	eors	r0, r0
    f14e:	f380 8811 	msr	BASEPRI, r0
    f152:	f04f 0004 	mov.w	r0, #4
    f156:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    f158:	2306      	movs	r3, #6
    f15a:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    f15c:	9203      	str	r2, [sp, #12]
    f15e:	9301      	str	r3, [sp, #4]
    f160:	4a15      	ldr	r2, [pc, #84]	; (f1b8 <event_scan_prepare+0x7c>)
    f162:	f8d4 3c24 	ldr.w	r3, [r4, #3108]	; 0xc24
    f166:	9202      	str	r2, [sp, #8]
    f168:	9300      	str	r3, [sp, #0]
    f16a:	f604 421c 	addw	r2, r4, #3100	; 0xc1c
    f16e:	f504 6342 	add.w	r3, r4, #3104	; 0xc20
    f172:	f7ff ff0d 	bl	ef90 <event_common_prepare>
	if (_radio.scanner.conn) {
    f176:	f8d4 3c54 	ldr.w	r3, [r4, #3156]	; 0xc54
    f17a:	b1cb      	cbz	r3, f1b0 <event_scan_prepare+0x74>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    f17c:	f8d4 3c1c 	ldr.w	r3, [r4, #3100]	; 0xc1c
    f180:	2b00      	cmp	r3, #0
    f182:	da0c      	bge.n	f19e <event_scan_prepare+0x62>
			u32_t ticks_prepare_to_start =
    f184:	f8d4 1c24 	ldr.w	r1, [r4, #3108]	; 0xc24
    f188:	f8d4 2c20 	ldr.w	r2, [r4, #3104]	; 0xc20
				(_radio.scanner.hdr.ticks_xtal_to_start &
    f18c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    f190:	4291      	cmp	r1, r2
    f192:	bf2c      	ite	cs
    f194:	ebc3 0301 	rsbcs	r3, r3, r1
    f198:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    f19c:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    f19e:	4b07      	ldr	r3, [pc, #28]	; (f1bc <event_scan_prepare+0x80>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f1a0:	2201      	movs	r2, #1
    f1a2:	4611      	mov	r1, r2
    f1a4:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    f1a6:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f1a8:	f7fb fd0a 	bl	abc0 <mayfly_enqueue>
		LL_ASSERT(!retval);
    f1ac:	2800      	cmp	r0, #0
    f1ae:	d1cd      	bne.n	f14c <event_scan_prepare+0x10>
}
    f1b0:	b005      	add	sp, #20
    f1b2:	bd30      	pop	{r4, r5, pc}
    f1b4:	20000bb0 	.word	0x20000bb0
    f1b8:	0000f3d5 	.word	0x0000f3d5
    f1bc:	2000e068 	.word	0x2000e068

0000f1c0 <radio_event_ext_adv_prepare>:
{
    f1c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    f1c2:	4a0b      	ldr	r2, [pc, #44]	; (f1f0 <radio_event_ext_adv_prepare+0x30>)
    f1c4:	7c13      	ldrb	r3, [r2, #16]
    f1c6:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    f1ca:	b10b      	cbz	r3, f1d0 <radio_event_ext_adv_prepare+0x10>
    f1cc:	f7ff faba 	bl	e744 <event_active.part.15>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    f1d0:	2305      	movs	r3, #5
    f1d2:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
    f1d4:	9403      	str	r4, [sp, #12]
    f1d6:	4c07      	ldr	r4, [pc, #28]	; (f1f4 <radio_event_ext_adv_prepare+0x34>)
    f1d8:	9402      	str	r4, [sp, #8]
    f1da:	9301      	str	r3, [sp, #4]
    f1dc:	6a13      	ldr	r3, [r2, #32]
    f1de:	9300      	str	r3, [sp, #0]
    f1e0:	f102 031c 	add.w	r3, r2, #28
    f1e4:	3218      	adds	r2, #24
    f1e6:	f7ff fed3 	bl	ef90 <event_common_prepare>
}
    f1ea:	b004      	add	sp, #16
    f1ec:	bd10      	pop	{r4, pc}
    f1ee:	bf00      	nop
    f1f0:	20000bb0 	.word	0x20000bb0
    f1f4:	0000f611 	.word	0x0000f611

0000f1f8 <event_adv_stop>:
{
    f1f8:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    f1fa:	2005      	movs	r0, #5
    f1fc:	f7ff feba 	bl	ef74 <event_stop.constprop.35>
	ticker_status =
    f200:	f641 438b 	movw	r3, #7307	; 0x1c8b
    f204:	2100      	movs	r1, #0
    f206:	9300      	str	r3, [sp, #0]
    f208:	2205      	movs	r2, #5
    f20a:	4b06      	ldr	r3, [pc, #24]	; (f224 <event_adv_stop+0x2c>)
    f20c:	4608      	mov	r0, r1
    f20e:	f7fc fb1f 	bl	b850 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f212:	f030 0302 	bics.w	r3, r0, #2
    f216:	d001      	beq.n	f21c <event_adv_stop+0x24>
    f218:	f7ff fa94 	bl	e744 <event_active.part.15>
}
    f21c:	b003      	add	sp, #12
    f21e:	f85d fb04 	ldr.w	pc, [sp], #4
    f222:	bf00      	nop
    f224:	0000ea9d 	.word	0x0000ea9d

0000f228 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    f228:	4b02      	ldr	r3, [pc, #8]	; (f234 <mayfly_xtal_start+0xc>)
    f22a:	6818      	ldr	r0, [r3, #0]
    f22c:	6843      	ldr	r3, [r0, #4]
    f22e:	2100      	movs	r1, #0
    f230:	681b      	ldr	r3, [r3, #0]
    f232:	4718      	bx	r3
    f234:	20000bb0 	.word	0x20000bb0

0000f238 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    f238:	4b02      	ldr	r3, [pc, #8]	; (f244 <mayfly_xtal_stop+0xc>)
    f23a:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    f23c:	6843      	ldr	r3, [r0, #4]
    f23e:	2100      	movs	r1, #0
    f240:	685b      	ldr	r3, [r3, #4]
    f242:	4718      	bx	r3
    f244:	20000bb0 	.word	0x20000bb0

0000f248 <chan_sel_2>:
{
    f248:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    f24a:	4048      	eors	r0, r1
    f24c:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    f24e:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    f252:	2608      	movs	r6, #8
	o = 0;
    f254:	2400      	movs	r4, #0
		o |= (i & 1);
    f256:	f00e 0501 	and.w	r5, lr, #1
    f25a:	3e01      	subs	r6, #1
    f25c:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    f260:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    f264:	b2ec      	uxtb	r4, r5
		i >>= 1;
    f266:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    f26a:	d1f4      	bne.n	f256 <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    f26c:	0225      	lsls	r5, r4, #8
    f26e:	b22d      	sxth	r5, r5
    f270:	b2c0      	uxtb	r0, r0
    f272:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    f276:	4634      	mov	r4, r6
		o |= (i & 1);
    f278:	f000 0601 	and.w	r6, r0, #1
    f27c:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    f280:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    f284:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    f288:	b2e4      	uxtb	r4, r4
		i >>= 1;
    f28a:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    f28e:	d1f3      	bne.n	f278 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    f290:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    f292:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    f296:	3f01      	subs	r7, #1
    f298:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    f29a:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    f29e:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    f2a0:	d1d5      	bne.n	f24e <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    f2a2:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    f2a4:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    f2a6:	fbb1 f0f4 	udiv	r0, r1, r4
    f2aa:	fb04 1010 	mls	r0, r4, r0, r1
    f2ae:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    f2b0:	08c4      	lsrs	r4, r0, #3
    f2b2:	f000 0507 	and.w	r5, r0, #7
    f2b6:	5d14      	ldrb	r4, [r2, r4]
    f2b8:	412c      	asrs	r4, r5
    f2ba:	07e4      	lsls	r4, r4, #31
    f2bc:	d407      	bmi.n	f2ce <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    f2be:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    f2c0:	f3c1 4107 	ubfx	r1, r1, #16, #8
    f2c4:	4610      	mov	r0, r2
}
    f2c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    f2ca:	f7fe b8d1 	b.w	d470 <chan_sel_remap>
}
    f2ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f2d0 <preempt_calc>:
{
    f2d0:	b570      	push	{r4, r5, r6, lr}
    f2d2:	4614      	mov	r4, r2
    f2d4:	460e      	mov	r6, r1
    f2d6:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    f2d8:	f7fc fb8a 	bl	b9f0 <ticker_ticks_now_get>
	u32_t diff =
    f2dc:	4621      	mov	r1, r4
    f2de:	f7fc fb89 	bl	b9f4 <ticker_ticks_diff_get>
	diff += 3;
    f2e2:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    f2e4:	2c09      	cmp	r4, #9
    f2e6:	d911      	bls.n	f30c <preempt_calc+0x3c>
		if (s_xtal_retained) {
    f2e8:	4b09      	ldr	r3, [pc, #36]	; (f310 <preempt_calc+0x40>)
    f2ea:	781b      	ldrb	r3, [r3, #0]
    f2ec:	b113      	cbz	r3, f2f4 <preempt_calc+0x24>
    f2ee:	2000      	movs	r0, #0
    f2f0:	f7ff fa0c 	bl	e70c <mayfly_xtal_retain.part.14>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    f2f4:	4632      	mov	r2, r6
    f2f6:	2100      	movs	r1, #0
    f2f8:	4628      	mov	r0, r5
    f2fa:	f7ff fa29 	bl	e750 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    f2fe:	68ab      	ldr	r3, [r5, #8]
    f300:	441c      	add	r4, r3
		if (diff <
    f302:	2c26      	cmp	r4, #38	; 0x26
    f304:	d800      	bhi.n	f308 <preempt_calc+0x38>
			hdr->ticks_preempt_to_start = diff;
    f306:	60ac      	str	r4, [r5, #8]
		return 1;
    f308:	2001      	movs	r0, #1
}
    f30a:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    f30c:	2000      	movs	r0, #0
    f30e:	bd70      	pop	{r4, r5, r6, pc}
    f310:	200019d4 	.word	0x200019d4

0000f314 <event_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
    f314:	4b2c      	ldr	r3, [pc, #176]	; (f3c8 <event_adv+0xb4>)
    f316:	7cda      	ldrb	r2, [r3, #19]
{
    f318:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    f31a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
{
    f31e:	4605      	mov	r5, r0
    f320:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    f322:	b12a      	cbz	r2, f330 <event_adv+0x1c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f324:	4040      	eors	r0, r0
    f326:	f380 8811 	msr	BASEPRI, r0
    f32a:	f04f 0004 	mov.w	r0, #4
    f32e:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    f330:	7c1b      	ldrb	r3, [r3, #16]
    f332:	b2db      	uxtb	r3, r3
    f334:	2b05      	cmp	r3, #5
    f336:	d1f5      	bne.n	f324 <event_adv+0x10>
	_radio.ticks_anchor = ticks_at_expire;
    f338:	60a0      	str	r0, [r4, #8]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    f33a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	_radio.role = ROLE_ADV;
    f33e:	2601      	movs	r6, #1
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    f340:	f3c0 0042 	ubfx	r0, r0, #1, #3
	_radio.role = ROLE_ADV;
    f344:	74e6      	strb	r6, [r4, #19]
	_radio.ticker_id_prepare = 0;
    f346:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    f348:	7463      	strb	r3, [r4, #17]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    f34a:	f7ff fde9 	bl	ef20 <adv_scan_configure.constprop.34>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
    f34e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    f352:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    f356:	f3c3 1302 	ubfx	r3, r3, #4, #3
    f35a:	f363 0202 	bfi	r2, r3, #0, #3
    f35e:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	adv_setup();
    f362:	f7fe fcc5 	bl	dcf0 <adv_setup>
	if (ctrl_rl_enabled()) {
    f366:	f007 f973 	bl	16650 <ctrl_rl_enabled>
    f36a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    f36e:	b1f8      	cbz	r0, f3b0 <event_adv+0x9c>
		struct ll_filter *filter =
    f370:	f013 0003 	ands.w	r0, r3, #3
    f374:	bf18      	it	ne
    f376:	4630      	movne	r0, r6
		struct ll_filter *wl = ctrl_filter_get(true);
    f378:	f006 ffb4 	bl	162e4 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    f37c:	1c82      	adds	r2, r0, #2
    f37e:	7841      	ldrb	r1, [r0, #1]
    f380:	7800      	ldrb	r0, [r0, #0]
    f382:	f008 f831 	bl	173e8 <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    f386:	68e2      	ldr	r2, [r4, #12]
    f388:	f105 0109 	add.w	r1, r5, #9
    f38c:	2001      	movs	r0, #1
    f38e:	f008 f88f 	bl	174b0 <radio_tmr_start>
	radio_tmr_end_capture();
    f392:	f008 f94b 	bl	1762c <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    f396:	462a      	mov	r2, r5
    f398:	2105      	movs	r1, #5
    f39a:	480c      	ldr	r0, [pc, #48]	; (f3cc <event_adv+0xb8>)
    f39c:	f7ff ff98 	bl	f2d0 <preempt_calc>
    f3a0:	4603      	mov	r3, r0
    f3a2:	b148      	cbz	r0, f3b8 <event_adv+0xa4>
		_radio.state = STATE_STOP;
    f3a4:	2304      	movs	r3, #4
    f3a6:	7523      	strb	r3, [r4, #20]
}
    f3a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    f3ac:	f007 bf7c 	b.w	172a8 <radio_disable>
	if (_radio.advertiser.filter_policy) {
    f3b0:	079b      	lsls	r3, r3, #30
    f3b2:	d0e8      	beq.n	f386 <event_adv+0x72>
		struct ll_filter *wl = ctrl_filter_get(true);
    f3b4:	4630      	mov	r0, r6
    f3b6:	e7df      	b.n	f378 <event_adv+0x64>
		ticker_status =
    f3b8:	4a05      	ldr	r2, [pc, #20]	; (f3d0 <event_adv+0xbc>)
    f3ba:	4601      	mov	r1, r0
    f3bc:	f7fc fac6 	bl	b94c <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f3c0:	f030 0302 	bics.w	r3, r0, #2
    f3c4:	d1ae      	bne.n	f324 <event_adv+0x10>
    f3c6:	bd70      	pop	{r4, r5, r6, pc}
    f3c8:	20000bb0 	.word	0x20000bb0
    f3cc:	20000bc8 	.word	0x20000bc8
    f3d0:	0000e6b9 	.word	0x0000e6b9

0000f3d4 <event_scan>:
{
    f3d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    f3d8:	4b80      	ldr	r3, [pc, #512]	; (f5dc <event_scan+0x208>)
    f3da:	7cd9      	ldrb	r1, [r3, #19]
{
    f3dc:	b08d      	sub	sp, #52	; 0x34
    f3de:	4606      	mov	r6, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    f3e0:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    f3e4:	461c      	mov	r4, r3
    f3e6:	b129      	cbz	r1, f3f4 <event_scan+0x20>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    f3e8:	4040      	eors	r0, r0
    f3ea:	f380 8811 	msr	BASEPRI, r0
    f3ee:	f04f 0004 	mov.w	r0, #4
    f3f2:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    f3f4:	7c1b      	ldrb	r3, [r3, #16]
    f3f6:	b2db      	uxtb	r3, r3
    f3f8:	2b06      	cmp	r3, #6
    f3fa:	d1f5      	bne.n	f3e8 <event_scan+0x14>
	_radio.role = ROLE_SCAN;
    f3fc:	2102      	movs	r1, #2
    f3fe:	74e1      	strb	r1, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    f400:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    f402:	7422      	strb	r2, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    f404:	f894 0c2d 	ldrb.w	r0, [r4, #3117]	; 0xc2d
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    f408:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    f40a:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
	if(aux_scan){
    f40e:	4d74      	ldr	r5, [pc, #464]	; (f5e0 <event_scan+0x20c>)
	_radio.state = STATE_RX;
    f410:	2101      	movs	r1, #1
	_radio.scanner.state = 0;
    f412:	f362 0341 	bfi	r3, r2, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    f416:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
    f41a:	7521      	strb	r1, [r4, #20]
	_radio.scanner.state = 0;
    f41c:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    f420:	f7ff fd7e 	bl	ef20 <adv_scan_configure.constprop.34>
	if(aux_scan){
    f424:	782f      	ldrb	r7, [r5, #0]
    f426:	2f00      	cmp	r7, #0
    f428:	f000 8092 	beq.w	f550 <event_scan+0x17c>
		stop_time_ticker = k_cycle_get_32();
    f42c:	f7f4 f806 	bl	343c <_timer_cycle_get_32>
    f430:	4b6c      	ldr	r3, [pc, #432]	; (f5e4 <event_scan+0x210>)
    f432:	6018      	str	r0, [r3, #0]
		event_time_diff = (stop_time_ticker - start_time_ticker);
    f434:	4b6c      	ldr	r3, [pc, #432]	; (f5e8 <event_scan+0x214>)
    f436:	681b      	ldr	r3, [r3, #0]
    f438:	eba0 0e03 	sub.w	lr, r0, r3
    f43c:	4b6b      	ldr	r3, [pc, #428]	; (f5ec <event_scan+0x218>)
    f43e:	f8c3 e000 	str.w	lr, [r3]
		Time_difference_ticker = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_diff))/1000;
    f442:	4b6b      	ldr	r3, [pc, #428]	; (f5f0 <event_scan+0x21c>)
    f444:	681a      	ldr	r2, [r3, #0]
    f446:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    f44a:	fb82 2307 	smull	r2, r3, r2, r7
    f44e:	fba2 010e 	umull	r0, r1, r2, lr
    f452:	fb0e 1103 	mla	r1, lr, r3, r1
    f456:	4b67      	ldr	r3, [pc, #412]	; (f5f4 <event_scan+0x220>)
    f458:	681a      	ldr	r2, [r3, #0]
    f45a:	17d3      	asrs	r3, r2, #31
    f45c:	f7f0 ff04 	bl	268 <__aeabi_uldivmod>
    f460:	4b65      	ldr	r3, [pc, #404]	; (f5f8 <event_scan+0x224>)
		counter++;
    f462:	4a66      	ldr	r2, [pc, #408]	; (f5fc <event_scan+0x228>)
		Time_difference_ticker = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_diff))/1000;
    f464:	fbb0 f0f7 	udiv	r0, r0, r7
    f468:	2100      	movs	r1, #0
    f46a:	e9c3 0100 	strd	r0, r1, [r3]
		counter++;
    f46e:	7813      	ldrb	r3, [r2, #0]
    f470:	3301      	adds	r3, #1
    f472:	7013      	strb	r3, [r2, #0]
		if(Time_difference_ticker < _radio.ext_scanner.chan_off){
    f474:	f604 4398 	addw	r3, r4, #3224	; 0xc98
    f478:	e9d3 8900 	ldrd	r8, r9, [r3]
    f47c:	4549      	cmp	r1, r9
    f47e:	bf08      	it	eq
    f480:	4540      	cmpeq	r0, r8
    f482:	f604 47a8 	addw	r7, r4, #3240	; 0xca8
    f486:	d206      	bcs.n	f496 <event_scan+0xc2>
			_radio.ext_scanner.chan_off_calculation -= Time_difference_ticker;
    f488:	e9d7 2300 	ldrd	r2, r3, [r7]
    f48c:	1a10      	subs	r0, r2, r0
    f48e:	eb63 0101 	sbc.w	r1, r3, r1
    f492:	e9c7 0100 	strd	r0, r1, [r7]
		if( _radio.ext_scanner.chan_off_calculation < 0x7530){				//2710
    f496:	e9d7 2300 	ldrd	r2, r3, [r7]
    f49a:	2100      	movs	r1, #0
    f49c:	f247 502f 	movw	r0, #29999	; 0x752f
    f4a0:	4299      	cmp	r1, r3
    f4a2:	bf08      	it	eq
    f4a4:	4290      	cmpeq	r0, r2
    f4a6:	d350      	bcc.n	f54a <event_scan+0x176>
			if(_radio.ext_scanner.chan_off_calculation <= 0 ){
    f4a8:	4313      	orrs	r3, r2
				aux_scan = 0x00;
    f4aa:	bf08      	it	eq
    f4ac:	2300      	moveq	r3, #0
			chan_set(3);
    f4ae:	f04f 0003 	mov.w	r0, #3
				aux_scan = 0x00;
    f4b2:	bf08      	it	eq
    f4b4:	702b      	strbeq	r3, [r5, #0]
			chan_set(3);
    f4b6:	f7fe faf9 	bl	daac <chan_set>
			aux_scan = 0x00;
    f4ba:	2300      	movs	r3, #0
    f4bc:	702b      	strb	r3, [r5, #0]
	radio_tmr_tifs_set(RADIO_TIFS);
    f4be:	2096      	movs	r0, #150	; 0x96
    f4c0:	f007 ffea 	bl	17498 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    f4c4:	2300      	movs	r3, #0
    f4c6:	4619      	mov	r1, r3
    f4c8:	461a      	mov	r2, r3
    f4ca:	4618      	mov	r0, r3
    f4cc:	f007 ff52 	bl	17374 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    f4d0:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
    f4d4:	f894 2d29 	ldrb.w	r2, [r4, #3369]	; 0xd29
    f4d8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    f4dc:	3008      	adds	r0, #8
    f4de:	f007 feaf 	bl	17240 <radio_pkt_rx_set>
	radio_rssi_measure();
    f4e2:	f007 ff5f 	bl	173a4 <radio_rssi_measure>
	pdu = (void *)radio_pkt_scratch_get();
    f4e6:	f007 ff35 	bl	17354 <radio_pkt_scratch_get>
	if (ctrl_rl_enabled()) {
    f4ea:	f007 f8b1 	bl	16650 <ctrl_rl_enabled>
    f4ee:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
    f4f2:	2800      	cmp	r0, #0
    f4f4:	d043      	beq.n	f57e <event_scan+0x1aa>
		struct ll_filter *filter =
    f4f6:	f3c3 1000 	ubfx	r0, r3, #4, #1
    f4fa:	f006 fef3 	bl	162e4 <ctrl_filter_get>
    f4fe:	4605      	mov	r5, r0
		u8_t count, *irks = ctrl_irks_get(&count);
    f500:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    f504:	f006 fe92 	bl	1622c <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
    f508:	7869      	ldrb	r1, [r5, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
    f50a:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
    f50c:	1caa      	adds	r2, r5, #2
    f50e:	7828      	ldrb	r0, [r5, #0]
    f510:	f007 ff6a 	bl	173e8 <radio_filter_configure>
		radio_ar_configure(count, irks);
    f514:	4639      	mov	r1, r7
    f516:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    f51a:	f008 f949 	bl	177b0 <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    f51e:	68e2      	ldr	r2, [r4, #12]
    f520:	f106 0109 	add.w	r1, r6, #9
    f524:	2000      	movs	r0, #0
    f526:	f007 ffc3 	bl	174b0 <radio_tmr_start>
	radio_tmr_end_capture();
    f52a:	f008 f87f 	bl	1762c <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    f52e:	2106      	movs	r1, #6
    f530:	4632      	mov	r2, r6
    f532:	4833      	ldr	r0, [pc, #204]	; (f600 <event_scan+0x22c>)
    f534:	f7ff fecc 	bl	f2d0 <preempt_calc>
    f538:	4601      	mov	r1, r0
    f53a:	b360      	cbz	r0, f596 <event_scan+0x1c2>
		_radio.state = STATE_STOP;
    f53c:	2304      	movs	r3, #4
    f53e:	7523      	strb	r3, [r4, #20]
		radio_disable();
    f540:	f007 feb2 	bl	172a8 <radio_disable>
}
    f544:	b00d      	add	sp, #52	; 0x34
    f546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			_radio.ext_scanner.chan_off_calculation = _radio.ext_scanner.chan_off;
    f54a:	e9c7 8900 	strd	r8, r9, [r7]
    f54e:	e7b6      	b.n	f4be <event_scan+0xea>
		chan_set(37 + _radio.scanner.chan++);
    f550:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
    f554:	f3c3 0081 	ubfx	r0, r3, #2, #2
    f558:	1c42      	adds	r2, r0, #1
    f55a:	f362 0383 	bfi	r3, r2, #2, #2
    f55e:	3025      	adds	r0, #37	; 0x25
    f560:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
    f564:	f7fe faa2 	bl	daac <chan_set>
		if (_radio.scanner.chan == 3) {
    f568:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
    f56c:	f003 020c 	and.w	r2, r3, #12
    f570:	2a0c      	cmp	r2, #12
			_radio.scanner.chan = 0;
    f572:	bf04      	itt	eq
    f574:	f367 0383 	bfieq	r3, r7, #2, #2
    f578:	f884 3c2c 	strbeq.w	r3, [r4, #3116]	; 0xc2c
    f57c:	e79f      	b.n	f4be <event_scan+0xea>
	if (_radio.scanner.filter_policy) {
    f57e:	f013 0f30 	tst.w	r3, #48	; 0x30
    f582:	d0cc      	beq.n	f51e <event_scan+0x14a>
		struct ll_filter *wl = ctrl_filter_get(true);
    f584:	2001      	movs	r0, #1
    f586:	f006 fead 	bl	162e4 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    f58a:	1c82      	adds	r2, r0, #2
    f58c:	7841      	ldrb	r1, [r0, #1]
    f58e:	7800      	ldrb	r0, [r0, #0]
    f590:	f007 ff2a 	bl	173e8 <radio_filter_configure>
    f594:	e7c3      	b.n	f51e <event_scan+0x14a>
		ret = ticker_start(															//this ticker was for closing the window.we ll use it for Aux packet
    f596:	f641 537b 	movw	r3, #7547	; 0x1d7b
    f59a:	9308      	str	r3, [sp, #32]
    f59c:	4b19      	ldr	r3, [pc, #100]	; (f604 <event_scan+0x230>)
    f59e:	9307      	str	r3, [sp, #28]
    f5a0:	2204      	movs	r2, #4
    f5a2:	4b19      	ldr	r3, [pc, #100]	; (f608 <event_scan+0x234>)
    f5a4:	9206      	str	r2, [sp, #24]
    f5a6:	9305      	str	r3, [sp, #20]
    f5a8:	9004      	str	r0, [sp, #16]
    f5aa:	9003      	str	r0, [sp, #12]
    f5ac:	9002      	str	r0, [sp, #8]
    f5ae:	9001      	str	r0, [sp, #4]
    f5b0:	f8d4 3c3c 	ldr.w	r3, [r4, #3132]	; 0xc3c
    f5b4:	3309      	adds	r3, #9
    f5b6:	9300      	str	r3, [sp, #0]
    f5b8:	4633      	mov	r3, r6
    f5ba:	f7fc f8ab 	bl	b714 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    f5be:	f030 0302 	bics.w	r3, r0, #2
    f5c2:	f47f af11 	bne.w	f3e8 <event_scan+0x14>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    f5c6:	4619      	mov	r1, r3
    f5c8:	4618      	mov	r0, r3
    f5ca:	4a10      	ldr	r2, [pc, #64]	; (f60c <event_scan+0x238>)
    f5cc:	f7fc f9be 	bl	b94c <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    f5d0:	f030 0302 	bics.w	r3, r0, #2
    f5d4:	f47f af08 	bne.w	f3e8 <event_scan+0x14>
    f5d8:	e7b4      	b.n	f544 <event_scan+0x170>
    f5da:	bf00      	nop
    f5dc:	20000bb0 	.word	0x20000bb0
    f5e0:	20001928 	.word	0x20001928
    f5e4:	20004910 	.word	0x20004910
    f5e8:	20004914 	.word	0x20004914
    f5ec:	20004938 	.word	0x20004938
    f5f0:	2000e8cc 	.word	0x2000e8cc
    f5f4:	2000e8c8 	.word	0x2000e8c8
    f5f8:	200048e0 	.word	0x200048e0
    f5fc:	2000192c 	.word	0x2000192c
    f600:	200017cc 	.word	0x200017cc
    f604:	0000ef15 	.word	0x0000ef15
    f608:	0000ee4d 	.word	0x0000ee4d
    f60c:	0000e6b9 	.word	0x0000e6b9

0000f610 <event_ext_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
    f610:	4b25      	ldr	r3, [pc, #148]	; (f6a8 <event_ext_adv+0x98>)
    f612:	7cd9      	ldrb	r1, [r3, #19]
{
    f614:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    f616:	f001 02ff 	and.w	r2, r1, #255	; 0xff
{
    f61a:	4605      	mov	r5, r0
    f61c:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    f61e:	b129      	cbz	r1, f62c <event_ext_adv+0x1c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f620:	4040      	eors	r0, r0
    f622:	f380 8811 	msr	BASEPRI, r0
    f626:	f04f 0004 	mov.w	r0, #4
    f62a:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    f62c:	7c1b      	ldrb	r3, [r3, #16]
    f62e:	b2db      	uxtb	r3, r3
    f630:	2b05      	cmp	r3, #5
    f632:	d1f5      	bne.n	f620 <event_ext_adv+0x10>
	_radio.role = ROLE_ADV;
    f634:	2601      	movs	r6, #1
    f636:	74e6      	strb	r6, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    f638:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    f63a:	7422      	strb	r2, [r4, #16]
	_radio.ext_advertiser.aux_chain_count_current = 0;
    f63c:	f884 2c8d 	strb.w	r2, [r4, #3213]	; 0xc8d
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    f640:	7463      	strb	r3, [r4, #17]
	ext_adv_setup();
    f642:	f7fe fc7b 	bl	df3c <ext_adv_setup>
	if (ctrl_rl_enabled()) {
    f646:	f007 f803 	bl	16650 <ctrl_rl_enabled>
    f64a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    f64e:	b1f8      	cbz	r0, f690 <event_ext_adv+0x80>
		struct ll_filter *filter =
    f650:	f013 0003 	ands.w	r0, r3, #3
    f654:	bf18      	it	ne
    f656:	4630      	movne	r0, r6
		struct ll_filter *wl = ctrl_filter_get(true);
    f658:	f006 fe44 	bl	162e4 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    f65c:	1c82      	adds	r2, r0, #2
    f65e:	7841      	ldrb	r1, [r0, #1]
    f660:	7800      	ldrb	r0, [r0, #0]
    f662:	f007 fec1 	bl	173e8 <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    f666:	68e2      	ldr	r2, [r4, #12]
    f668:	f105 0109 	add.w	r1, r5, #9
    f66c:	2001      	movs	r0, #1
    f66e:	f007 ff1f 	bl	174b0 <radio_tmr_start>
	radio_tmr_end_capture();
    f672:	f007 ffdb 	bl	1762c <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    f676:	462a      	mov	r2, r5
    f678:	2105      	movs	r1, #5
    f67a:	480c      	ldr	r0, [pc, #48]	; (f6ac <event_ext_adv+0x9c>)
    f67c:	f7ff fe28 	bl	f2d0 <preempt_calc>
    f680:	4603      	mov	r3, r0
    f682:	b148      	cbz	r0, f698 <event_ext_adv+0x88>
		_radio.state = STATE_STOP;
    f684:	2304      	movs	r3, #4
    f686:	7523      	strb	r3, [r4, #20]
}
    f688:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    f68c:	f007 be0c 	b.w	172a8 <radio_disable>
	if (_radio.advertiser.filter_policy) {
    f690:	079b      	lsls	r3, r3, #30
    f692:	d0e8      	beq.n	f666 <event_ext_adv+0x56>
		struct ll_filter *wl = ctrl_filter_get(true);
    f694:	4630      	mov	r0, r6
    f696:	e7df      	b.n	f658 <event_ext_adv+0x48>
		ticker_status =
    f698:	4a05      	ldr	r2, [pc, #20]	; (f6b0 <event_ext_adv+0xa0>)
    f69a:	4601      	mov	r1, r0
    f69c:	f7fc f956 	bl	b94c <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f6a0:	f030 0302 	bics.w	r3, r0, #2
    f6a4:	d1bc      	bne.n	f620 <event_ext_adv+0x10>
    f6a6:	bd70      	pop	{r4, r5, r6, pc}
    f6a8:	20000bb0 	.word	0x20000bb0
    f6ac:	20000bc8 	.word	0x20000bc8
    f6b0:	0000e6b9 	.word	0x0000e6b9

0000f6b4 <ctrl_tx_enqueue>:
{
    f6b4:	b510      	push	{r4, lr}
	    !conn->empty &&
    f6b6:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    f6ba:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
    f6be:	f014 0f80 	tst.w	r4, #128	; 0x80
    f6c2:	d118      	bne.n	f6f6 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    f6c4:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
    f6c8:	b1ab      	cbz	r3, f6f6 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    f6ca:	0724      	lsls	r4, r4, #28
    f6cc:	d413      	bmi.n	f6f6 <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    f6ce:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
    f6d2:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    f6d4:	bf04      	itt	eq
    f6d6:	681c      	ldreq	r4, [r3, #0]
    f6d8:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
    f6dc:	b992      	cbnz	r2, f704 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    f6de:	681a      	ldr	r2, [r3, #0]
    f6e0:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    f6e2:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    f6e4:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
    f6e8:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
    f6ec:	680b      	ldr	r3, [r1, #0]
    f6ee:	b90b      	cbnz	r3, f6f4 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    f6f0:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    f6f4:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    f6f6:	b92a      	cbnz	r2, f704 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    f6f8:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    f6fc:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    f6fe:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    f702:	e7ef      	b.n	f6e4 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    f704:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    f708:	681a      	ldr	r2, [r3, #0]
    f70a:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    f70c:	6019      	str	r1, [r3, #0]
    f70e:	e7eb      	b.n	f6e8 <ctrl_tx_enqueue+0x34>

0000f710 <ctrl_tx_sec_enqueue>:
{
    f710:	b410      	push	{r4}
	if (conn->pause_tx) {
    f712:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    f716:	0724      	lsls	r4, r4, #28
{
    f718:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    f71a:	d50f      	bpl.n	f73c <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    f71c:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
    f720:	b931      	cbnz	r1, f730 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    f722:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
    f726:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    f728:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
    f72c:	bc10      	pop	{r4}
    f72e:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    f730:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    f734:	6819      	ldr	r1, [r3, #0]
    f736:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    f738:	601a      	str	r2, [r3, #0]
    f73a:	e7f7      	b.n	f72c <ctrl_tx_sec_enqueue+0x1c>
}
    f73c:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    f73e:	f7ff bfb9 	b.w	f6b4 <ctrl_tx_enqueue>
	...

0000f744 <feature_rsp_send>:
{
    f744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f746:	4f21      	ldr	r7, [pc, #132]	; (f7cc <feature_rsp_send+0x88>)
{
    f748:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f74a:	f607 5044 	addw	r0, r7, #3396	; 0xd44
{
    f74e:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f750:	f7fb f96b 	bl	aa2a <mem_acquire>
	if (!node_tx) {
    f754:	4604      	mov	r4, r0
    f756:	b3b0      	cbz	r0, f7c6 <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    f758:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    f75a:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    f75c:	f8d7 2cfc 	ldr.w	r2, [r7, #3324]	; 0xcfc
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    f760:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    f764:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    f768:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    f76c:	f043 0310 	orr.w	r3, r3, #16
    f770:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    f774:	79b1      	ldrb	r1, [r6, #6]
    f776:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    f77a:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    f77e:	f3c1 0110 	ubfx	r1, r1, #0, #17
    f782:	400b      	ands	r3, r1
    f784:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
    f788:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    f78c:	f043 0320 	orr.w	r3, r3, #32
    f790:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f794:	7903      	ldrb	r3, [r0, #4]
    f796:	f043 0303 	orr.w	r3, r3, #3
    f79a:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    f79c:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    f79e:	2309      	movs	r3, #9
    f7a0:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    f7a2:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    f7a4:	2100      	movs	r1, #0
    f7a6:	4410      	add	r0, r2
    f7a8:	f7f1 f8cb 	bl	942 <memset>
		conn->llcp_features & 0xFF;
    f7ac:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    f7b0:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    f7b2:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    f7b4:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    f7b6:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    f7b8:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    f7ba:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    f7bc:	4621      	mov	r1, r4
    f7be:	f7ff ffa7 	bl	f710 <ctrl_tx_sec_enqueue>
	return 0;
    f7c2:	2000      	movs	r0, #0
    f7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    f7c6:	2001      	movs	r0, #1
}
    f7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f7ca:	bf00      	nop
    f7cc:	20000bb0 	.word	0x20000bb0

0000f7d0 <start_enc_rsp_send>:
{
    f7d0:	b510      	push	{r4, lr}
    f7d2:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    f7d4:	b9c9      	cbnz	r1, f80a <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f7d6:	480f      	ldr	r0, [pc, #60]	; (f814 <start_enc_rsp_send+0x44>)
    f7d8:	f7fb f927 	bl	aa2a <mem_acquire>
		if (!node_tx) {
    f7dc:	b1b8      	cbz	r0, f80e <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (void *)node_tx->pdu_data;
    f7de:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
    f7e0:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    f7e4:	f043 0320 	orr.w	r3, r3, #32
    f7e8:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f7ec:	780b      	ldrb	r3, [r1, #0]
    f7ee:	f043 0303 	orr.w	r3, r3, #3
    f7f2:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    f7f4:	2301      	movs	r3, #1
    f7f6:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    f7f8:	2306      	movs	r3, #6
    f7fa:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
    f7fc:	b140      	cbz	r0, f810 <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
    f7fe:	4601      	mov	r1, r0
    f800:	4620      	mov	r0, r4
    f802:	f7ff ff57 	bl	f6b4 <ctrl_tx_enqueue>
	return 0;
    f806:	2000      	movs	r0, #0
    f808:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
    f80a:	2000      	movs	r0, #0
    f80c:	e7e8      	b.n	f7e0 <start_enc_rsp_send+0x10>
			return 1;
    f80e:	2001      	movs	r0, #1
}
    f810:	bd10      	pop	{r4, pc}
    f812:	bf00      	nop
    f814:	200018f4 	.word	0x200018f4

0000f818 <reject_ext_ind_send>:
{
    f818:	b570      	push	{r4, r5, r6, lr}
    f81a:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f81c:	480b      	ldr	r0, [pc, #44]	; (f84c <reject_ext_ind_send+0x34>)
{
    f81e:	460e      	mov	r6, r1
    f820:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f822:	f7fb f902 	bl	aa2a <mem_acquire>
	if (!node_tx) {
    f826:	b178      	cbz	r0, f848 <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f828:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    f82a:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f82c:	f043 0303 	orr.w	r3, r3, #3
    f830:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    f832:	2303      	movs	r3, #3
    f834:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    f836:	2311      	movs	r3, #17
    f838:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    f83a:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
    f83c:	4601      	mov	r1, r0
    f83e:	4620      	mov	r0, r4
    f840:	f7ff ff38 	bl	f6b4 <ctrl_tx_enqueue>
	return 0;
    f844:	2000      	movs	r0, #0
    f846:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    f848:	2001      	movs	r0, #1
}
    f84a:	bd70      	pop	{r4, r5, r6, pc}
    f84c:	200018f4 	.word	0x200018f4

0000f850 <event_connection_prepare>:
{
    f850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    f854:	4dc5      	ldr	r5, [pc, #788]	; (fb6c <event_connection_prepare+0x31c>)
{
    f856:	b08f      	sub	sp, #60	; 0x3c
    f858:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    f85a:	7c2b      	ldrb	r3, [r5, #16]
{
    f85c:	910c      	str	r1, [sp, #48]	; 0x30
    f85e:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    f860:	b12b      	cbz	r3, f86e <event_connection_prepare+0x1e>
		LL_ASSERT(0);
    f862:	4040      	eors	r0, r0
    f864:	f380 8811 	msr	BASEPRI, r0
    f868:	f04f 0004 	mov.w	r0, #4
    f86c:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    f86e:	f894 3020 	ldrb.w	r3, [r4, #32]
    f872:	3307      	adds	r3, #7
    f874:	b2db      	uxtb	r3, r3
    f876:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    f878:	f994 301d 	ldrsb.w	r3, [r4, #29]
    f87c:	2b00      	cmp	r3, #0
    f87e:	da09      	bge.n	f894 <event_connection_prepare+0x44>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    f880:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
    f882:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    f884:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    f888:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    f88a:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
    f88c:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
    f88e:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    f890:	bf88      	it	hi
    f892:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    f894:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    f896:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
    f89a:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    f89c:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    f89e:	b292      	uxth	r2, r2
    f8a0:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    f8a2:	4432      	add	r2, r6
    f8a4:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    f8a6:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    f8aa:	429a      	cmp	r2, r3
    f8ac:	f040 819d 	bne.w	fbea <event_connection_prepare+0x39a>
    f8b0:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    f8b4:	075f      	lsls	r7, r3, #29
    f8b6:	f100 8281 	bmi.w	fdbc <event_connection_prepare+0x56c>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    f8ba:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    f8be:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    f8c2:	429a      	cmp	r2, r3
    f8c4:	d06e      	beq.n	f9a4 <event_connection_prepare+0x154>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    f8c6:	2005      	movs	r0, #5
    f8c8:	f7ff fb54 	bl	ef74 <event_stop.constprop.35>
	conn_upd = _radio.conn_upd;
    f8cc:	f8d5 3d70 	ldr.w	r3, [r5, #3440]	; 0xd70
	if (conn_upd && (conn_upd != conn)) {
    f8d0:	b10b      	cbz	r3, f8d6 <event_connection_prepare+0x86>
    f8d2:	429c      	cmp	r4, r3
    f8d4:	d166      	bne.n	f9a4 <event_connection_prepare+0x154>
	switch (conn->llcp_conn_param.state) {
    f8d6:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    f8da:	f003 0307 	and.w	r3, r3, #7
    f8de:	2b05      	cmp	r3, #5
    f8e0:	d8bf      	bhi.n	f862 <event_connection_prepare+0x12>
    f8e2:	e8df f013 	tbh	[pc, r3, lsl #1]
    f8e6:	0006      	.short	0x0006
    f8e8:	01180076 	.word	0x01180076
    f8ec:	005f005f 	.word	0x005f005f
    f8f0:	005f      	.short	0x005f
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f8f2:	489f      	ldr	r0, [pc, #636]	; (fb70 <event_connection_prepare+0x320>)
    f8f4:	f7fb f899 	bl	aa2a <mem_acquire>
	if (!node_tx) {
    f8f8:	4607      	mov	r7, r0
    f8fa:	2800      	cmp	r0, #0
    f8fc:	d052      	beq.n	f9a4 <event_connection_prepare+0x154>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    f8fe:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    f902:	2204      	movs	r2, #4
    f904:	f362 0302 	bfi	r3, r2, #0, #3
    f908:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f90c:	7903      	ldrb	r3, [r0, #4]
    f90e:	f043 0303 	orr.w	r3, r3, #3
    f912:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    f914:	2318      	movs	r3, #24
    f916:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    f918:	230f      	movs	r3, #15
    f91a:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
    f91c:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    f920:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
    f922:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
    f924:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    f928:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
    f92a:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    f92e:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
    f930:	2300      	movs	r3, #0
    f932:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
    f934:	74c3      	strb	r3, [r0, #19]
    f936:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
    f938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f93c:	7543      	strb	r3, [r0, #21]
    f93e:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
    f940:	75c3      	strb	r3, [r0, #23]
    f942:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
    f944:	7643      	strb	r3, [r0, #25]
    f946:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
    f948:	76c3      	strb	r3, [r0, #27]
    f94a:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
    f94c:	7743      	strb	r3, [r0, #29]
    f94e:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
    f950:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
    f954:	4601      	mov	r1, r0
    f956:	4620      	mov	r0, r4
    f958:	f7ff feac 	bl	f6b4 <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    f95c:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    f95e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
    f962:	f8c5 4d70 	str.w	r4, [r5, #3440]	; 0xd70
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    f966:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
    f968:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    f96c:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    f970:	da0b      	bge.n	f98a <event_connection_prepare+0x13a>
			u32_t ticks_prepare_to_start =
    f972:	68a3      	ldr	r3, [r4, #8]
    f974:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    f976:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    f97a:	428b      	cmp	r3, r1
    f97c:	bf2c      	ite	cs
    f97e:	4443      	addcs	r3, r8
    f980:	eb08 0301 	addcc.w	r3, r8, r1
    f984:	1a9b      	subs	r3, r3, r2
    f986:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    f98a:	3713      	adds	r7, #19
		s_mfy_sched_offset.param = (void *)conn;
    f98c:	4b79      	ldr	r3, [pc, #484]	; (fb74 <event_connection_prepare+0x324>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    f98e:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f992:	2201      	movs	r2, #1
    f994:	4611      	mov	r1, r2
    f996:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
    f998:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f99a:	f7fb f911 	bl	abc0 <mayfly_enqueue>
		LL_ASSERT(!retval);
    f99e:	2800      	cmp	r0, #0
    f9a0:	f47f af5f 	bne.w	f862 <event_connection_prepare+0x12>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    f9a4:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
    f9a8:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    f9ac:	429a      	cmp	r2, r3
    f9ae:	f000 8115 	beq.w	fbdc <event_connection_prepare+0x38c>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    f9b2:	2005      	movs	r0, #5
    f9b4:	f7ff fade 	bl	ef74 <event_stop.constprop.35>
	switch (conn->llcp_phy.state) {
    f9b8:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    f9bc:	f003 0203 	and.w	r2, r3, #3
    f9c0:	2a03      	cmp	r2, #3
    f9c2:	f63f af4e 	bhi.w	f862 <event_connection_prepare+0x12>
    f9c6:	e8df f012 	tbh	[pc, r2, lsl #1]
    f9ca:	00d7      	.short	0x00d7
    f9cc:	01090109 	.word	0x01090109
    f9d0:	012d      	.short	0x012d
	if (conn->llcp_conn_param.status) {
    f9d2:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
    f9d6:	b1ef      	cbz	r7, fa14 <event_connection_prepare+0x1c4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f9d8:	4865      	ldr	r0, [pc, #404]	; (fb70 <event_connection_prepare+0x320>)
    f9da:	f7fb f826 	bl	aa2a <mem_acquire>
		if (!node_tx) {
    f9de:	4601      	mov	r1, r0
    f9e0:	2800      	cmp	r0, #0
    f9e2:	d0df      	beq.n	f9a4 <event_connection_prepare+0x154>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    f9e4:	7903      	ldrb	r3, [r0, #4]
    f9e6:	f043 0303 	orr.w	r3, r3, #3
    f9ea:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    f9ec:	2311      	movs	r3, #17
    f9ee:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    f9f0:	2303      	movs	r3, #3
    f9f2:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    f9f4:	230f      	movs	r3, #15
    f9f6:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    f9f8:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    f9fc:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
    f9fe:	4620      	mov	r0, r4
    fa00:	f7ff fe58 	bl	f6b4 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    fa04:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    fa08:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    fa0c:	2300      	movs	r3, #0
    fa0e:	f8c5 3d70 	str.w	r3, [r5, #3440]	; 0xd70
    fa12:	e7c7      	b.n	f9a4 <event_connection_prepare+0x154>
	if (!conn->role) {
    fa14:	f994 301d 	ldrsb.w	r3, [r4, #29]
    fa18:	2b00      	cmp	r3, #0
    fa1a:	db3b      	blt.n	fa94 <event_connection_prepare+0x244>
		if (conn->llcp_req != conn->llcp_ack) {
    fa1c:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    fa20:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    fa24:	428b      	cmp	r3, r1
    fa26:	d1bd      	bne.n	f9a4 <event_connection_prepare+0x154>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    fa28:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
    fa2c:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    fa30:	2205      	movs	r2, #5
    fa32:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    fa36:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    fa3a:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
    fa3e:	2301      	movs	r3, #1
    fa40:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
				((conn->llcp_conn_param.interval /
    fa44:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
		if (conn->llcp_conn_param.preferred_periodicity) {
    fa48:	b122      	cbz	r2, fa54 <event_connection_prepare+0x204>
				((conn->llcp_conn_param.interval /
    fa4a:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    fa4e:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
    fa50:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
    fa54:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    fa58:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    fa5c:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
    fa60:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    fa64:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    fa68:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    fa6c:	2202      	movs	r2, #2
    fa6e:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    fa72:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
    fa76:	f082 0208 	eor.w	r2, r2, #8
    fa7a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    fa7e:	f362 0382 	bfi	r3, r2, #2, #1
    fa82:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
    fa86:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
    fa88:	2301      	movs	r3, #1
    fa8a:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    fa8e:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    fa92:	e787      	b.n	f9a4 <event_connection_prepare+0x154>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    fa94:	4836      	ldr	r0, [pc, #216]	; (fb70 <event_connection_prepare+0x320>)
    fa96:	f7fa ffc8 	bl	aa2a <mem_acquire>
	if (!node_tx) {
    fa9a:	4601      	mov	r1, r0
    fa9c:	2800      	cmp	r0, #0
    fa9e:	d081      	beq.n	f9a4 <event_connection_prepare+0x154>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    faa0:	7903      	ldrb	r3, [r0, #4]
    faa2:	f043 0303 	orr.w	r3, r3, #3
    faa6:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    faa8:	2318      	movs	r3, #24
    faaa:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    faac:	2310      	movs	r3, #16
    faae:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
    fab0:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    fab4:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
    fab6:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
    fab8:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    fabc:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
    fabe:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    fac2:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    fac4:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    fac8:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    faca:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    face:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
    fad2:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    fad6:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
    fada:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    fade:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
    fae2:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    fae6:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
    faea:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    faee:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
    faf2:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
    faf6:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
    fafa:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
    fafe:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
    fb02:	4620      	mov	r0, r4
    fb04:	f7ff fdd6 	bl	f6b4 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    fb08:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    fb0c:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
    fb10:	f8c5 7d70 	str.w	r7, [r5, #3440]	; 0xd70
    fb14:	e746      	b.n	f9a4 <event_connection_prepare+0x154>
	if (conn->pause_tx) {
    fb16:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    fb1a:	0718      	lsls	r0, r3, #28
    fb1c:	f53f af42 	bmi.w	f9a4 <event_connection_prepare+0x154>
	node_rx = packet_rx_reserve_get(2);
    fb20:	2002      	movs	r0, #2
    fb22:	f7fd fcd7 	bl	d4d4 <packet_rx_reserve_get>
	if (!node_rx) {
    fb26:	2800      	cmp	r0, #0
    fb28:	f43f af3c 	beq.w	f9a4 <event_connection_prepare+0x154>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    fb2c:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    fb30:	2203      	movs	r2, #3
    fb32:	f362 0302 	bfi	r3, r2, #0, #3
    fb36:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
    fb3a:	8c23      	ldrh	r3, [r4, #32]
    fb3c:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    fb3e:	2301      	movs	r3, #1
    fb40:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    fb42:	7a03      	ldrb	r3, [r0, #8]
    fb44:	4313      	orrs	r3, r2
    fb46:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    fb48:	2318      	movs	r3, #24
    fb4a:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    fb4c:	230f      	movs	r3, #15
    fb4e:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
    fb50:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    fb54:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
    fb56:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
    fb58:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    fb5c:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
    fb5e:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    fb62:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
    fb64:	f7fe feaa 	bl	e8bc <packet_rx_enqueue>
    fb68:	e71c      	b.n	f9a4 <event_connection_prepare+0x154>
    fb6a:	bf00      	nop
    fb6c:	20000bb0 	.word	0x20000bb0
    fb70:	200018f4 	.word	0x200018f4
    fb74:	2000e088 	.word	0x2000e088
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    fb78:	48af      	ldr	r0, [pc, #700]	; (fe38 <event_connection_prepare+0x5e8>)
    fb7a:	f7fa ff56 	bl	aa2a <mem_acquire>
		if (!node_tx) {
    fb7e:	4601      	mov	r1, r0
    fb80:	b360      	cbz	r0, fbdc <event_connection_prepare+0x38c>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    fb82:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
    fb86:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    fb8a:	2201      	movs	r2, #1
    fb8c:	f362 0301 	bfi	r3, r2, #0, #2
    fb90:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
    fb94:	b2db      	uxtb	r3, r3
    fb96:	f3c3 0082 	ubfx	r0, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    fb9a:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
    fb9e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
    fba2:	f363 07c5 	bfi	r7, r3, #3, #3
    fba6:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
    fbaa:	f894 70f7 	ldrb.w	r7, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
    fbae:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    fbb2:	f367 1286 	bfi	r2, r7, #6, #1
    fbb6:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fbba:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    fbbc:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fbbe:	f042 0203 	orr.w	r2, r2, #3
    fbc2:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    fbc4:	2203      	movs	r2, #3
    fbc6:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    fbc8:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
    fbca:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    fbcc:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_enqueue(conn, node_tx);
    fbce:	4620      	mov	r0, r4
    fbd0:	f7ff fd70 	bl	f6b4 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    fbd4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    fbd8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    fbdc:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    fbe0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    fbe4:	429a      	cmp	r2, r3
    fbe6:	f000 80e9 	beq.w	fdbc <event_connection_prepare+0x56c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    fbea:	2005      	movs	r0, #5
    fbec:	f7ff f9c2 	bl	ef74 <event_stop.constprop.35>
		switch (conn->llcp_type) {
    fbf0:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    fbf4:	3b01      	subs	r3, #1
    fbf6:	2b07      	cmp	r3, #7
    fbf8:	f63f ae33 	bhi.w	f862 <event_connection_prepare+0x12>
    fbfc:	a201      	add	r2, pc, #4	; (adr r2, fc04 <event_connection_prepare+0x3b4>)
    fbfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    fc02:	bf00      	nop
    fc04:	0000fce3 	.word	0x0000fce3
    fc08:	00010179 	.word	0x00010179
    fc0c:	00010235 	.word	0x00010235
    fc10:	00010469 	.word	0x00010469
    fc14:	000104c9 	.word	0x000104c9
    fc18:	0000f863 	.word	0x0000f863
    fc1c:	00010569 	.word	0x00010569
    fc20:	00010599 	.word	0x00010599
		conn->llcp_phy.ack = conn->llcp_phy.req;
    fc24:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    fc28:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
    fc2c:	f3c3 0282 	ubfx	r2, r3, #2, #3
    fc30:	0791      	lsls	r1, r2, #30
    fc32:	d544      	bpl.n	fcbe <event_connection_prepare+0x46e>
			conn->llcp_phy.tx = BIT(1);
    fc34:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
    fc36:	f362 0384 	bfi	r3, r2, #2, #3
    fc3a:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
    fc3e:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    fc42:	095a      	lsrs	r2, r3, #5
    fc44:	0790      	lsls	r0, r2, #30
    fc46:	d543      	bpl.n	fcd0 <event_connection_prepare+0x480>
			conn->llcp_phy.rx = BIT(1);
    fc48:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
    fc4a:	f362 1347 	bfi	r3, r2, #5, #3
    fc4e:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
    fc52:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    fc56:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    fc5a:	f3c2 0182 	ubfx	r1, r2, #2, #3
    fc5e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    fc62:	428b      	cmp	r3, r1
    fc64:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    fc68:	bf14      	ite	ne
    fc6a:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
    fc6e:	f36f 0384 	bfceq	r3, #2, #3
    fc72:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
    fc76:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    fc7a:	0952      	lsrs	r2, r2, #5
    fc7c:	f003 0307 	and.w	r3, r3, #7
    fc80:	4293      	cmp	r3, r2
    fc82:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    fc86:	bf14      	ite	ne
    fc88:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
    fc8c:	f36f 1347 	bfceq	r3, #5, #3
    fc90:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
    fc94:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    fc98:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
    fc9c:	f043 0301 	orr.w	r3, r3, #1
    fca0:	f3c2 0240 	ubfx	r2, r2, #1, #1
    fca4:	f362 0341 	bfi	r3, r2, #1, #1
    fca8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
    fcac:	2308      	movs	r3, #8
    fcae:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    fcb2:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    fcb6:	3b01      	subs	r3, #1
    fcb8:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    fcbc:	e78e      	b.n	fbdc <event_connection_prepare+0x38c>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    fcbe:	07d7      	lsls	r7, r2, #31
    fcc0:	d501      	bpl.n	fcc6 <event_connection_prepare+0x476>
			conn->llcp_phy.tx = BIT(0);
    fcc2:	2201      	movs	r2, #1
    fcc4:	e7b7      	b.n	fc36 <event_connection_prepare+0x3e6>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    fcc6:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
    fcca:	bf18      	it	ne
    fccc:	2204      	movne	r2, #4
    fcce:	e7b2      	b.n	fc36 <event_connection_prepare+0x3e6>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    fcd0:	07d1      	lsls	r1, r2, #31
    fcd2:	d501      	bpl.n	fcd8 <event_connection_prepare+0x488>
			conn->llcp_phy.rx = BIT(0);
    fcd4:	2201      	movs	r2, #1
    fcd6:	e7b8      	b.n	fc4a <event_connection_prepare+0x3fa>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    fcd8:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    fcdc:	bf18      	it	ne
    fcde:	2204      	movne	r2, #4
    fce0:	e7b3      	b.n	fc4a <event_connection_prepare+0x3fa>
	if (!conn_upd) {
    fce2:	f8d5 3d70 	ldr.w	r3, [r5, #3440]	; 0xd70
    fce6:	b90b      	cbnz	r3, fcec <event_connection_prepare+0x49c>
		_radio.conn_upd = conn;
    fce8:	f8c5 4d70 	str.w	r4, [r5, #3440]	; 0xd70
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    fcec:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    fcf0:	f013 0303 	ands.w	r3, r3, #3
    fcf4:	f000 80a8 	beq.w	fe48 <event_connection_prepare+0x5f8>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    fcf8:	484f      	ldr	r0, [pc, #316]	; (fe38 <event_connection_prepare+0x5e8>)
    fcfa:	f7fa fe96 	bl	aa2a <mem_acquire>
		if (!node_tx) {
    fcfe:	4607      	mov	r7, r0
    fd00:	2800      	cmp	r0, #0
    fd02:	d05b      	beq.n	fdbc <event_connection_prepare+0x56c>
		switch (conn->llcp.conn_upd.state) {
    fd04:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    fd08:	f003 0303 	and.w	r3, r3, #3
    fd0c:	2b01      	cmp	r3, #1
    fd0e:	f000 8091 	beq.w	fe34 <event_connection_prepare+0x5e4>
    fd12:	2b02      	cmp	r3, #2
    fd14:	f47f ada5 	bne.w	f862 <event_connection_prepare+0x12>
			fp_mayfly_select_or_use =
    fd18:	4a48      	ldr	r2, [pc, #288]	; (fe3c <event_connection_prepare+0x5ec>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    fd1a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    fd1e:	f36f 0301 	bfc	r3, #0, #2
    fd22:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
    fd26:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    fd28:	3306      	adds	r3, #6
    fd2a:	4433      	add	r3, r6
    fd2c:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    fd2e:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fd32:	7939      	ldrb	r1, [r7, #4]
    fd34:	f041 0103 	orr.w	r1, r1, #3
    fd38:	7139      	strb	r1, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    fd3a:	210c      	movs	r1, #12
    fd3c:	7179      	strb	r1, [r7, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    fd3e:	2100      	movs	r1, #0
    fd40:	71f9      	strb	r1, [r7, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    fd42:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
    fd46:	7239      	strb	r1, [r7, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    fd48:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    fd4c:	f240 40e2 	movw	r0, #1250	; 0x4e2
    fd50:	fbb1 f1f0 	udiv	r1, r1, r0
    fd54:	f8a7 1009 	strh.w	r1, [r7, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    fd58:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
    fd5c:	f8a7 100b 	strh.w	r1, [r7, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    fd60:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    fd64:	f8a7 100d 	strh.w	r1, [r7, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    fd68:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
    fd6c:	f8a7 100f 	strh.w	r1, [r7, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    fd70:	f8a7 3011 	strh.w	r3, [r7, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    fd74:	6821      	ldr	r1, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    fd76:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    fd7a:	2900      	cmp	r1, #0
    fd7c:	da0b      	bge.n	fd96 <event_connection_prepare+0x546>
			u32_t ticks_prepare_to_start =
    fd7e:	68a3      	ldr	r3, [r4, #8]
    fd80:	6860      	ldr	r0, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    fd82:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    fd86:	4283      	cmp	r3, r0
    fd88:	bf2c      	ite	cs
    fd8a:	4443      	addcs	r3, r8
    fd8c:	eb08 0300 	addcc.w	r3, r8, r0
    fd90:	1a5b      	subs	r3, r3, r1
    fd92:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    fd96:	f107 0309 	add.w	r3, r7, #9
    fd9a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    fd9e:	4b28      	ldr	r3, [pc, #160]	; (fe40 <event_connection_prepare+0x5f0>)
    fda0:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    fda2:	2201      	movs	r2, #1
    fda4:	4611      	mov	r1, r2
    fda6:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    fda8:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    fdaa:	f7fa ff09 	bl	abc0 <mayfly_enqueue>
		LL_ASSERT(!retval);
    fdae:	2800      	cmp	r0, #0
    fdb0:	f47f ad57 	bne.w	f862 <event_connection_prepare+0x12>
			ctrl_tx_enqueue(conn, node_tx);
    fdb4:	4639      	mov	r1, r7
    fdb6:	4620      	mov	r0, r4
    fdb8:	f7ff fc7c 	bl	f6b4 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    fdbc:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    fdc0:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    fdc4:	429a      	cmp	r2, r3
    fdc6:	d01e      	beq.n	fe06 <event_connection_prepare+0x5b6>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    fdc8:	2005      	movs	r0, #5
    fdca:	f7ff f8d3 	bl	ef74 <event_stop.constprop.35>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    fdce:	481a      	ldr	r0, [pc, #104]	; (fe38 <event_connection_prepare+0x5e8>)
    fdd0:	f7fa fe2b 	bl	aa2a <mem_acquire>
		if (node_tx) {
    fdd4:	4601      	mov	r1, r0
    fdd6:	b1b0      	cbz	r0, fe06 <event_connection_prepare+0x5b6>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    fdd8:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    fddc:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fde0:	7903      	ldrb	r3, [r0, #4]
    fde2:	f043 0303 	orr.w	r3, r3, #3
    fde6:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    fde8:	2302      	movs	r3, #2
    fdea:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    fdec:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    fdee:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    fdf2:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    fdf4:	4620      	mov	r0, r4
    fdf6:	f7ff fc5d 	bl	f6b4 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    fdfa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
    fdfc:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    fdfe:	bf98      	it	ls
    fe00:	3301      	addls	r3, #1
    fe02:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    fe06:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    fe0a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    fe0e:	429a      	cmp	r2, r3
    fe10:	f000 84a9 	beq.w	10766 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x767>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    fe14:	2005      	movs	r0, #5
    fe16:	f7ff f8ad 	bl	ef74 <event_stop.constprop.35>
	switch (conn->llcp_length.state) {
    fe1a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    fe1e:	f003 0303 	and.w	r3, r3, #3
    fe22:	2b03      	cmp	r3, #3
    fe24:	f63f ad1d 	bhi.w	f862 <event_connection_prepare+0x12>
    fe28:	e8df f013 	tbh	[pc, r3, lsl #1]
    fe2c:	049d0460 	.word	0x049d0460
    fe30:	04b9049d 	.word	0x04b9049d
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
    fe34:	4a03      	ldr	r2, [pc, #12]	; (fe44 <event_connection_prepare+0x5f4>)
    fe36:	e770      	b.n	fd1a <event_connection_prepare+0x4ca>
    fe38:	200018f4 	.word	0x200018f4
    fe3c:	0000e369 	.word	0x0000e369
    fe40:	2000e078 	.word	0x2000e078
    fe44:	0000ea4d 	.word	0x0000ea4d
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    fe48:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
    fe4c:	1bf7      	subs	r7, r6, r7
    fe4e:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    fe50:	043a      	lsls	r2, r7, #16
    fe52:	d4b3      	bmi.n	fdbc <event_connection_prepare+0x56c>
		conn->llcp_ack = conn->llcp_req;
    fe54:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    fe58:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    fe5c:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    fe60:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    fe64:	428a      	cmp	r2, r1
    fe66:	d009      	beq.n	fe7c <event_connection_prepare+0x62c>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    fe68:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    fe6c:	f002 0207 	and.w	r2, r2, #7
    fe70:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    fe72:	bf04      	itt	eq
    fe74:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
    fe78:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
    fe7c:	f8d5 2d70 	ldr.w	r2, [r5, #3440]	; 0xd70
		_radio.ticker_id_prepare = 0;
    fe80:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
    fe82:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    fe84:	bf08      	it	eq
    fe86:	f8c5 3d70 	streq.w	r3, [r5, #3440]	; 0xd70
		_radio.ticker_id_prepare = 0;
    fe8a:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
    fe8c:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    fe8e:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    fe92:	429a      	cmp	r2, r3
    fe94:	d114      	bne.n	fec0 <event_connection_prepare+0x670>
		     conn->conn_interval) ||
    fe96:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    fe9a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    fe9c:	4299      	cmp	r1, r3
    fe9e:	d10f      	bne.n	fec0 <event_connection_prepare+0x670>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    fea0:	f240 43e2 	movw	r3, #1250	; 0x4e2
    fea4:	435a      	muls	r2, r3
    fea6:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    feaa:	f242 7110 	movw	r1, #10000	; 0x2710
    feae:	fb01 2303 	mla	r3, r1, r3, r2
    feb2:	3b01      	subs	r3, #1
    feb4:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    feb8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    feba:	b29b      	uxth	r3, r3
    febc:	429a      	cmp	r2, r3
    febe:	d016      	beq.n	feee <event_connection_prepare+0x69e>
			node_rx = packet_rx_reserve_get(2);
    fec0:	2002      	movs	r0, #2
    fec2:	f7fd fb07 	bl	d4d4 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    fec6:	2800      	cmp	r0, #0
    fec8:	f43f accb 	beq.w	f862 <event_connection_prepare+0x12>
			node_rx->hdr.handle = conn->handle;
    fecc:	8c23      	ldrh	r3, [r4, #32]
    fece:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    fed0:	2308      	movs	r3, #8
    fed2:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    fed4:	2300      	movs	r3, #0
    fed6:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    fed8:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    fedc:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    fede:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    fee2:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    fee4:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    fee8:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    feea:	f7fe fce7 	bl	e8bc <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    feee:	6823      	ldr	r3, [r4, #0]
    fef0:	6866      	ldr	r6, [r4, #4]
    fef2:	2b00      	cmp	r3, #0
    fef4:	da09      	bge.n	ff0a <event_connection_prepare+0x6ba>
			u32_t ticks_prepare_to_start =
    fef6:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    fef8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    fefc:	42b0      	cmp	r0, r6
    fefe:	bf2c      	ite	cs
    ff00:	4480      	addcs	r8, r0
    ff02:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    ff04:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    ff06:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    ff0a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    ff0c:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
    ff10:	49bd      	ldr	r1, [pc, #756]	; (10208 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x209>)
		conn_interval_old = instant_latency * conn->conn_interval;
    ff12:	fb13 f307 	smulbb	r3, r3, r7
    ff16:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    ff18:	fbb3 f2fa 	udiv	r2, r3, sl
    ff1c:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    ff20:	fb1a f009 	smulbb	r0, sl, r9
    ff24:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    ff26:	4283      	cmp	r3, r0
    ff28:	f080 8108 	bcs.w	1013c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x13d>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    ff2c:	1ac0      	subs	r0, r0, r3
    ff2e:	f240 1223 	movw	r2, #291	; 0x123
    ff32:	4342      	muls	r2, r0
    ff34:	17c3      	asrs	r3, r0, #31
    ff36:	fb01 2303 	mla	r3, r1, r3, r2
    ff3a:	fba0 0101 	umull	r0, r1, r0, r1
    ff3e:	4419      	add	r1, r3
    ff40:	a3af      	add	r3, pc, #700	; (adr r3, 10200 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x201>)
    ff42:	e9d3 2300 	ldrd	r2, r3, [r3]
    ff46:	f7f0 f98f 	bl	268 <__aeabi_uldivmod>
    ff4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ff4e:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    ff52:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    ff54:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    ff56:	f8df b2d8 	ldr.w	fp, [pc, #728]	; 10230 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x231>
    ff5a:	1bdb      	subs	r3, r3, r7
    ff5c:	444b      	add	r3, r9
    ff5e:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset =
    ff60:	6823      	ldr	r3, [r4, #0]
    ff62:	429e      	cmp	r6, r3
    ff64:	bf38      	it	cc
    ff66:	461e      	movcc	r6, r3
		if (conn->role) {
    ff68:	f994 301d 	ldrsb.w	r3, [r4, #29]
		ticks_slot_offset =
    ff6c:	960d      	str	r6, [sp, #52]	; 0x34
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    ff6e:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    ff72:	2b00      	cmp	r3, #0
    ff74:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    ff78:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    ff7a:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    ff7e:	f280 80ee 	bge.w	1015e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x15f>
				conn->slave.window_widening_periodic_us *
    ff82:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
    ff84:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    ff86:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    ff8a:	f895 3d08 	ldrb.w	r3, [r5, #3336]	; 0xd08
    ff8e:	4a9f      	ldr	r2, [pc, #636]	; (1020c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x20d>)
    ff90:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    ff94:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    ff98:	f3c3 0382 	ubfx	r3, r3, #2, #3
    ff9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    ffa0:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
    ffa4:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    ffa6:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    ffa8:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    ffac:	4b98      	ldr	r3, [pc, #608]	; (10210 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x211>)
				conn->llcp.conn_upd.win_size * 1250;
    ffae:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    ffb2:	f205 253f 	addw	r5, r5, #575	; 0x23f
    ffb6:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    ffba:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    ffbc:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    ffc0:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    ffc2:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    ffc4:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
    ffc6:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    ffc8:	429f      	cmp	r7, r3
    ffca:	bf94      	ite	ls
    ffcc:	65e7      	strls	r7, [r4, #92]	; 0x5c
    ffce:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
    ffd0:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
    ffd2:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
    ffd4:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    ffd6:	fba0 010b 	umull	r0, r1, r0, fp
    ffda:	a389      	add	r3, pc, #548	; (adr r3, 10200 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x201>)
    ffdc:	e9d3 2300 	ldrd	r2, r3, [r3]
    ffe0:	f7f0 f942 	bl	268 <__aeabi_uldivmod>
    ffe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ffe6:	1a1b      	subs	r3, r3, r0
    ffe8:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    ffea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ffec:	fbb3 f0f8 	udiv	r0, r3, r8
    fff0:	fb08 f000 	mul.w	r0, r8, r0
    fff4:	a382      	add	r3, pc, #520	; (adr r3, 10200 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x201>)
    fff6:	e9d3 2300 	ldrd	r2, r3, [r3]
    fffa:	fba0 010b 	umull	r0, r1, r0, fp
    fffe:	f7f0 f933 	bl	268 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
   10002:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   10004:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   10008:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
   1000c:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   10010:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   10012:	f242 7110 	movw	r1, #10000	; 0x2710
   10016:	fb01 6303 	mla	r3, r1, r3, r6
   1001a:	3b01      	subs	r3, #1
   1001c:	fbb3 f3f6 	udiv	r3, r3, r6
   10020:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   10022:	4b7c      	ldr	r3, [pc, #496]	; (10214 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x215>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
   10024:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   10028:	4433      	add	r3, r6
   1002a:	fbb3 f3f6 	udiv	r3, r3, r6
   1002e:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   10032:	4b79      	ldr	r3, [pc, #484]	; (10218 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x219>)
   10034:	4433      	add	r3, r6
   10036:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1003a:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1003c:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1003e:	4299      	cmp	r1, r3
   10040:	bfc4      	itt	gt
   10042:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
   10046:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   10048:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1004c:	bfc8      	it	gt
   1004e:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
   10050:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   10054:	bfc8      	it	gt
   10056:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
   10058:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
   1005c:	bf08      	it	eq
   1005e:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   10062:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
   10066:	2000      	movs	r0, #0
   10068:	2101      	movs	r1, #1
   1006a:	f007 fc07 	bl	1787c <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   1006e:	2200      	movs	r2, #0
   10070:	2101      	movs	r1, #1
		mayfly_was_enabled =
   10072:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   10074:	4610      	mov	r0, r2
   10076:	f7fa fd7b 	bl	ab70 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1007a:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
   1007e:	f641 737b 	movw	r3, #8059	; 0x1f7b
   10082:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   10084:	3207      	adds	r2, #7
		ticker_status =
   10086:	9300      	str	r3, [sp, #0]
   10088:	b2d2      	uxtb	r2, r2
   1008a:	4b64      	ldr	r3, [pc, #400]	; (1021c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x21d>)
   1008c:	4608      	mov	r0, r1
   1008e:	f7fb fbdf 	bl	b850 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10092:	f030 0802 	bics.w	r8, r0, #2
   10096:	f47f abe4 	bne.w	f862 <event_connection_prepare+0x12>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
   1009a:	fba5 ab0b 	umull	sl, fp, r5, fp
   1009e:	a358      	add	r3, pc, #352	; (adr r3, 10200 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x201>)
   100a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   100a4:	4650      	mov	r0, sl
   100a6:	4659      	mov	r1, fp
   100a8:	f7f0 f8de 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
   100ac:	4a5c      	ldr	r2, [pc, #368]	; (10220 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x221>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   100ae:	f894 6020 	ldrb.w	r6, [r4, #32]
   100b2:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
   100b6:	2307      	movs	r3, #7
   100b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   100bc:	2100      	movs	r1, #0
   100be:	4343      	muls	r3, r0
   100c0:	fb02 3301 	mla	r3, r2, r1, r3
   100c4:	fba0 0102 	umull	r0, r1, r0, r2
   100c8:	ebba 0000 	subs.w	r0, sl, r0
   100cc:	4419      	add	r1, r3
   100ce:	eb6b 0101 	sbc.w	r1, fp, r1
   100d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   100d6:	2300      	movs	r3, #0
   100d8:	f7f0 f8c6 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   100dc:	68e3      	ldr	r3, [r4, #12]
   100de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   100e0:	f994 e01d 	ldrsb.w	lr, [r4, #29]
   100e4:	494f      	ldr	r1, [pc, #316]	; (10224 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x225>)
		ticker_status =
   100e6:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   100e8:	441a      	add	r2, r3
   100ea:	4613      	mov	r3, r2
   100ec:	4a4e      	ldr	r2, [pc, #312]	; (10228 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x229>)
		ticker_status =
   100ee:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   100f0:	ea12 022e 	ands.w	r2, r2, lr, asr #32
   100f4:	bf38      	it	cc
   100f6:	460a      	movcc	r2, r1
   100f8:	3607      	adds	r6, #7
		ticker_status =
   100fa:	f641 718b 	movw	r1, #8075	; 0x1f8b
   100fe:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10100:	b2f6      	uxtb	r6, r6
		ticker_status =
   10102:	4946      	ldr	r1, [pc, #280]	; (1021c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x21d>)
   10104:	9107      	str	r1, [sp, #28]
   10106:	9205      	str	r2, [sp, #20]
   10108:	9406      	str	r4, [sp, #24]
   1010a:	f8cd 800c 	str.w	r8, [sp, #12]
   1010e:	9501      	str	r5, [sp, #4]
   10110:	9700      	str	r7, [sp, #0]
   10112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10114:	4632      	mov	r2, r6
   10116:	4641      	mov	r1, r8
   10118:	4640      	mov	r0, r8
   1011a:	f7fb fafb 	bl	b714 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1011e:	f030 0002 	bics.w	r0, r0, #2
   10122:	f47f ab9e 	bne.w	f862 <event_connection_prepare+0x12>
		if (mayfly_was_enabled) {
   10126:	f1b9 0f00 	cmp.w	r9, #0
   1012a:	f000 8335 	beq.w	10798 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x799>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   1012e:	2201      	movs	r2, #1
   10130:	4611      	mov	r1, r2
}
   10132:	b00f      	add	sp, #60	; 0x3c
   10134:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   10138:	f7fa bd1a 	b.w	ab70 <mayfly_enable>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   1013c:	fb0a 3212 	mls	r2, sl, r2, r3
   10140:	b292      	uxth	r2, r2
   10142:	fba2 0101 	umull	r0, r1, r2, r1
   10146:	f240 1323 	movw	r3, #291	; 0x123
   1014a:	fb03 1102 	mla	r1, r3, r2, r1
   1014e:	a32c      	add	r3, pc, #176	; (adr r3, 10200 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x201>)
   10150:	e9d3 2300 	ldrd	r2, r3, [r3]
   10154:	f7f0 f888 	bl	268 <__aeabi_uldivmod>
   10158:	eba8 0300 	sub.w	r3, r8, r0
   1015c:	e6f9      	b.n	ff52 <event_connection_prepare+0x702>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   1015e:	990c      	ldr	r1, [sp, #48]	; 0x30
   10160:	a327      	add	r3, pc, #156	; (adr r3, 10200 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x201>)
   10162:	e9d3 2300 	ldrd	r2, r3, [r3]
   10166:	fba1 010b 	umull	r0, r1, r1, fp
   1016a:	f7f0 f87d 	bl	268 <__aeabi_uldivmod>
   1016e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
   10172:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
   10174:	4635      	mov	r5, r6
   10176:	e747      	b.n	10008 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9>
	if (conn->llcp.chan_map.initiate) {
   10178:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1017c:	b30b      	cbz	r3, 101c2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1c3>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1017e:	482b      	ldr	r0, [pc, #172]	; (1022c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x22d>)
   10180:	f7fa fc53 	bl	aa2a <mem_acquire>
		if (node_tx) {
   10184:	4607      	mov	r7, r0
   10186:	2800      	cmp	r0, #0
   10188:	f43f ae18 	beq.w	fdbc <event_connection_prepare+0x56c>
			conn->llcp.chan_map.initiate = 0;
   1018c:	2300      	movs	r3, #0
   1018e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
   10192:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   10194:	3306      	adds	r3, #6
   10196:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
   10198:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1019c:	7903      	ldrb	r3, [r0, #4]
   1019e:	f043 0303 	orr.w	r3, r3, #3
   101a2:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   101a4:	2308      	movs	r3, #8
   101a6:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   101a8:	2301      	movs	r3, #1
   101aa:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   101ac:	2205      	movs	r2, #5
   101ae:	f104 0179 	add.w	r1, r4, #121	; 0x79
   101b2:	3008      	adds	r0, #8
   101b4:	f7f0 fb99 	bl	8ea <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   101b8:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   101bc:	f8a7 300d 	strh.w	r3, [r7, #13]
   101c0:	e5f8      	b.n	fdb4 <event_connection_prepare+0x564>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   101c2:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   101c6:	1af3      	subs	r3, r6, r3
   101c8:	041f      	lsls	r7, r3, #16
   101ca:	f53f adf7 	bmi.w	fdbc <event_connection_prepare+0x56c>
		conn->llcp_ack = conn->llcp_req;
   101ce:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   101d2:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
   101d6:	f104 0717 	add.w	r7, r4, #23
   101da:	2205      	movs	r2, #5
   101dc:	f104 0179 	add.w	r1, r4, #121	; 0x79
   101e0:	4638      	mov	r0, r7
   101e2:	f7f0 fb82 	bl	8ea <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   101e6:	2105      	movs	r1, #5
   101e8:	4638      	mov	r0, r7
   101ea:	f7fa fdc9 	bl	ad80 <util_ones_count_get>
		conn->data_chan_count =
   101ee:	7f63      	ldrb	r3, [r4, #29]
   101f0:	f360 0305 	bfi	r3, r0, #0, #6
   101f4:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
   101f6:	2301      	movs	r3, #1
   101f8:	7723      	strb	r3, [r4, #28]
   101fa:	e5df      	b.n	fdbc <event_connection_prepare+0x56c>
   101fc:	f3af 8000 	nop.w
   10200:	1afd498d 	.word	0x1afd498d
   10204:	00000007 	.word	0x00000007
   10208:	09ce5400 	.word	0x09ce5400
   1020c:	00021302 	.word	0x00021302
   10210:	000f4240 	.word	0x000f4240
   10214:	026259ff 	.word	0x026259ff
   10218:	01c9c37f 	.word	0x01c9c37f
   1021c:	0000ef15 	.word	0x0000ef15
   10220:	1afd498d 	.word	0x1afd498d
   10224:	00010905 	.word	0x00010905
   10228:	00010909 	.word	0x00010909
   1022c:	200018f4 	.word	0x200018f4
   10230:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.encryption.initiate) {
   10234:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
   10238:	f1b9 0f00 	cmp.w	r9, #0
   1023c:	f47f adbe 	bne.w	fdbc <event_connection_prepare+0x56c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10240:	48d3      	ldr	r0, [pc, #844]	; (10590 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x591>)
   10242:	f7fa fbf2 	bl	aa2a <mem_acquire>
	if (!node_tx) {
   10246:	4607      	mov	r7, r0
   10248:	2800      	cmp	r0, #0
   1024a:	f43f adb7 	beq.w	fdbc <event_connection_prepare+0x56c>
	if (!conn->role) {
   1024e:	f994 301d 	ldrsb.w	r3, [r4, #29]
   10252:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
   10254:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
   10258:	db4d      	blt.n	102f6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2f7>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
   1025a:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
   1025e:	465b      	mov	r3, fp
   10260:	464a      	mov	r2, r9
   10262:	f104 0194 	add.w	r1, r4, #148	; 0x94
   10266:	f104 0084 	add.w	r0, r4, #132	; 0x84
   1026a:	f006 fdc1 	bl	16df0 <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
   1026e:	2210      	movs	r2, #16
   10270:	4659      	mov	r1, fp
   10272:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   10276:	f7f0 fb38 	bl	8ea <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   1027a:	f504 7189 	add.w	r1, r4, #274	; 0x112
   1027e:	2208      	movs	r2, #8
   10280:	f204 1033 	addw	r0, r4, #307	; 0x133
   10284:	f7f0 fb31 	bl	8ea <memcpy>
		conn->ccm_rx.direction = 0;
   10288:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
   1028c:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
   10290:	f369 0300 	bfi	r3, r9, #0, #1
   10294:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
   10298:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
   1029c:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
   102a0:	f043 0301 	orr.w	r3, r3, #1
   102a4:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
   102a8:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
   102ac:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
   102b0:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
   102b4:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
   102b8:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
   102bc:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
   102c0:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
   102c4:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
   102c8:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
   102cc:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
   102d0:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
   102d4:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
   102d8:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
   102dc:	4651      	mov	r1, sl
   102de:	4620      	mov	r0, r4
   102e0:	f7ff fa76 	bl	f7d0 <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
   102e4:	4639      	mov	r1, r7
   102e6:	4620      	mov	r0, r4
   102e8:	f7ff f9e4 	bl	f6b4 <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
   102ec:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   102f0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   102f4:	e562      	b.n	fdbc <event_connection_prepare+0x56c>
	else if (!conn->pause_tx || conn->refresh) {
   102f6:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   102fa:	f003 0348 	and.w	r3, r3, #72	; 0x48
   102fe:	2b08      	cmp	r3, #8
   10300:	f000 80a2 	beq.w	10448 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x449>
		if (conn->llcp.encryption.error_code) {
   10304:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
   10308:	f1b9 0f00 	cmp.w	r9, #0
   1030c:	d020      	beq.n	10350 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x351>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1030e:	7903      	ldrb	r3, [r0, #4]
   10310:	f043 0303 	orr.w	r3, r3, #3
   10314:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   10316:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   1031a:	0698      	lsls	r0, r3, #26
   1031c:	d512      	bpl.n	10344 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x345>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
   1031e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
   10322:	0759      	lsls	r1, r3, #29
   10324:	d50e      	bpl.n	10344 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x345>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   10326:	2311      	movs	r3, #17
   10328:	71fb      	strb	r3, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1032a:	2303      	movs	r3, #3
   1032c:	723b      	strb	r3, [r7, #8]
		p->error_code = conn->llcp.encryption.error_code;
   1032e:	f887 9009 	strb.w	r9, [r7, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
   10332:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   10334:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   10336:	797b      	ldrb	r3, [r7, #5]
   10338:	3301      	adds	r3, #1
   1033a:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
   1033c:	2300      	movs	r3, #0
   1033e:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
   10342:	e7cf      	b.n	102e4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2e5>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   10344:	230d      	movs	r3, #13
   10346:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   10348:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   1034c:	2301      	movs	r3, #1
   1034e:	e7f1      	b.n	10334 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x335>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10350:	488f      	ldr	r0, [pc, #572]	; (10590 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x591>)
   10352:	f7fa fb6a 	bl	aa2a <mem_acquire>
	if (!node_tx) {
   10356:	4682      	mov	sl, r0
   10358:	2800      	cmp	r0, #0
   1035a:	f000 82c2 	beq.w	108e2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8e3>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1035e:	7903      	ldrb	r3, [r0, #4]
   10360:	f043 0303 	orr.w	r3, r3, #3
   10364:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   10366:	f04f 0b04 	mov.w	fp, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   1036a:	230d      	movs	r3, #13
   1036c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   1036e:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
   10372:	f100 0308 	add.w	r3, r0, #8
   10376:	4619      	mov	r1, r3
   10378:	2208      	movs	r2, #8
   1037a:	6868      	ldr	r0, [r5, #4]
   1037c:	930d      	str	r3, [sp, #52]	; 0x34
   1037e:	f7f2 ffa1 	bl	32c4 <entropy_get_entropy_isr>
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.ivs,
   10382:	f10a 0310 	add.w	r3, sl, #16
   10386:	4619      	mov	r1, r3
   10388:	465a      	mov	r2, fp
   1038a:	6868      	ldr	r0, [r5, #4]
   1038c:	930b      	str	r3, [sp, #44]	; 0x2c
   1038e:	f7f2 ff99 	bl	32c4 <entropy_get_entropy_isr>
	memcpy(&conn->llcp.encryption.skd[8],
   10392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10394:	2208      	movs	r2, #8
   10396:	4619      	mov	r1, r3
   10398:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1039c:	f7f0 faa5 	bl	8ea <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
   103a0:	465a      	mov	r2, fp
   103a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   103a4:	f504 708b 	add.w	r0, r4, #278	; 0x116
   103a8:	f7f0 fa9f 	bl	8ea <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
   103ac:	4651      	mov	r1, sl
   103ae:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   103b0:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
   103b4:	f7ff f97e 	bl	f6b4 <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   103b8:	4653      	mov	r3, sl
   103ba:	464a      	mov	r2, r9
   103bc:	f104 0194 	add.w	r1, r4, #148	; 0x94
   103c0:	f104 0084 	add.w	r0, r4, #132	; 0x84
   103c4:	f006 fd14 	bl	16df0 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
   103c8:	2210      	movs	r2, #16
   103ca:	4651      	mov	r1, sl
   103cc:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   103d0:	f7f0 fa8b 	bl	8ea <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   103d4:	2208      	movs	r2, #8
   103d6:	f504 7189 	add.w	r1, r4, #274	; 0x112
   103da:	f204 1033 	addw	r0, r4, #307	; 0x133
   103de:	f7f0 fa84 	bl	8ea <memcpy>
			conn->ccm_rx.direction = 1;
   103e2:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
   103e6:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
   103ea:	f043 0301 	orr.w	r3, r3, #1
   103ee:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
   103f2:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
   103f6:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
   103fa:	f369 0300 	bfi	r3, r9, #0, #1
   103fe:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
   10402:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
   10406:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
   1040a:	f043 0310 	orr.w	r3, r3, #16
   1040e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10412:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
   10414:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10418:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
   1041c:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
   10420:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
   10424:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
   10428:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
   1042c:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
   10430:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
   10434:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
   10438:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1043c:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   1043e:	2301      	movs	r3, #1
   10440:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
   10442:	2305      	movs	r3, #5
   10444:	71fb      	strb	r3, [r7, #7]
   10446:	e74d      	b.n	102e4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2e5>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
   10448:	4651      	mov	r1, sl
   1044a:	f8d5 0cfc 	ldr.w	r0, [r5, #3324]	; 0xcfc
   1044e:	f7ff f9bf 	bl	f7d0 <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
   10452:	f8d5 2cfc 	ldr.w	r2, [r5, #3324]	; 0xcfc
   10456:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   1045a:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
   1045e:	f369 03c3 	bfi	r3, r9, #3, #1
   10462:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
   10466:	e73d      	b.n	102e4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2e5>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10468:	4849      	ldr	r0, [pc, #292]	; (10590 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x591>)
   1046a:	f7fa fade 	bl	aa2a <mem_acquire>
	if (node_tx) {
   1046e:	4607      	mov	r7, r0
   10470:	2800      	cmp	r0, #0
   10472:	f43f aca3 	beq.w	fdbc <event_connection_prepare+0x56c>
		conn->llcp_ack = conn->llcp_req;
   10476:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1047a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
   1047e:	4b45      	ldr	r3, [pc, #276]	; (10594 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x595>)
   10480:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10484:	7903      	ldrb	r3, [r0, #4]
   10486:	f043 0303 	orr.w	r3, r3, #3
   1048a:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
   1048c:	2309      	movs	r3, #9
   1048e:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
   10490:	f994 301d 	ldrsb.w	r3, [r4, #29]
   10494:	2b00      	cmp	r3, #0
   10496:	bfac      	ite	ge
   10498:	2308      	movge	r3, #8
   1049a:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
   1049c:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
   1049e:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
   104a0:	2100      	movs	r1, #0
   104a2:	4410      	add	r0, r2
   104a4:	f7f0 fa4d 	bl	942 <memset>
			conn->llcp_features & 0xFF;
   104a8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
   104ac:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
   104ae:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
   104b0:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
   104b2:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
   104b4:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
   104b6:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
   104b8:	4620      	mov	r0, r4
   104ba:	f7ff f8fb 	bl	f6b4 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   104be:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   104c2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   104c6:	e479      	b.n	fdbc <event_connection_prepare+0x56c>
	if (conn->llcp_version.tx == 0) {
   104c8:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   104cc:	07da      	lsls	r2, r3, #31
   104ce:	d424      	bmi.n	1051a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x51b>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   104d0:	482f      	ldr	r0, [pc, #188]	; (10590 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x591>)
   104d2:	f7fa faaa 	bl	aa2a <mem_acquire>
		if (node_tx) {
   104d6:	4601      	mov	r1, r0
   104d8:	2800      	cmp	r0, #0
   104da:	f43f ac6f 	beq.w	fdbc <event_connection_prepare+0x56c>
			conn->llcp_ack = conn->llcp_req;
   104de:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   104e2:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
   104e6:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   104ea:	f043 0301 	orr.w	r3, r3, #1
   104ee:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   104f2:	7903      	ldrb	r3, [r0, #4]
   104f4:	f043 0303 	orr.w	r3, r3, #3
   104f8:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
   104fa:	2306      	movs	r3, #6
   104fc:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   104fe:	230c      	movs	r3, #12
   10500:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
   10502:	2309      	movs	r3, #9
   10504:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
   10506:	f06f 030e 	mvn.w	r3, #14
   1050a:	7243      	strb	r3, [r0, #9]
   1050c:	2305      	movs	r3, #5
   1050e:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
   10510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10514:	72c3      	strb	r3, [r0, #11]
   10516:	7303      	strb	r3, [r0, #12]
   10518:	e7ce      	b.n	104b8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4b9>
	} else if (conn->llcp_version.rx != 0) {
   1051a:	079b      	lsls	r3, r3, #30
   1051c:	f57f a9a1 	bpl.w	f862 <event_connection_prepare+0x12>
		conn->llcp_ack = conn->llcp_req;
   10520:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   10524:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
   10528:	2002      	movs	r0, #2
   1052a:	f7fc ffd3 	bl	d4d4 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
   1052e:	2800      	cmp	r0, #0
   10530:	f43f a997 	beq.w	f862 <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
   10534:	8c23      	ldrh	r3, [r4, #32]
   10536:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   10538:	2301      	movs	r3, #1
   1053a:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   1053c:	7a03      	ldrb	r3, [r0, #8]
   1053e:	f043 0303 	orr.w	r3, r3, #3
   10542:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
   10544:	2306      	movs	r3, #6
   10546:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
   10548:	230c      	movs	r3, #12
   1054a:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
   1054c:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   10550:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
   10552:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   10556:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
   1055a:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
   1055e:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
   10562:	f7fe f9ab 	bl	e8bc <packet_rx_enqueue>
   10566:	e429      	b.n	fdbc <event_connection_prepare+0x56c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10568:	4809      	ldr	r0, [pc, #36]	; (10590 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x591>)
   1056a:	f7fa fa5e 	bl	aa2a <mem_acquire>
	if (node_tx) {
   1056e:	4601      	mov	r1, r0
   10570:	2800      	cmp	r0, #0
   10572:	f43f ac23 	beq.w	fdbc <event_connection_prepare+0x56c>
		conn->llcp_ack = conn->llcp_req;
   10576:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1057a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1057e:	7903      	ldrb	r3, [r0, #4]
   10580:	f043 0303 	orr.w	r3, r3, #3
   10584:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   10586:	2301      	movs	r3, #1
   10588:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   1058a:	2312      	movs	r3, #18
   1058c:	71c3      	strb	r3, [r0, #7]
   1058e:	e793      	b.n	104b8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4b9>
   10590:	200018f4 	.word	0x200018f4
   10594:	000149ff 	.word	0x000149ff
	if (conn->llcp.phy_upd_ind.initiate) {
   10598:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   1059c:	07d7      	lsls	r7, r2, #31
   1059e:	d54f      	bpl.n	10640 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x641>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   105a0:	48d3      	ldr	r0, [pc, #844]	; (108f0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8f1>)
   105a2:	f7fa fa42 	bl	aa2a <mem_acquire>
		if (node_tx) {
   105a6:	4607      	mov	r7, r0
   105a8:	2800      	cmp	r0, #0
   105aa:	f43f ac07 	beq.w	fdbc <event_connection_prepare+0x56c>
			conn->llcp.phy_upd_ind.initiate = 0;
   105ae:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   105b2:	f36f 0300 	bfc	r3, #0, #1
   105b6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
   105ba:	b2db      	uxtb	r3, r3
   105bc:	f3c3 0982 	ubfx	r9, r3, #2, #3
   105c0:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
   105c4:	d136      	bne.n	10634 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x635>
				conn->llcp_ack = conn->llcp_req;
   105c6:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   105ca:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
   105ce:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
   105d0:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
   105d4:	d517      	bpl.n	10606 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x607>
					node_rx = packet_rx_reserve_get(2);
   105d6:	2002      	movs	r0, #2
   105d8:	f7fc ff7c 	bl	d4d4 <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
   105dc:	2800      	cmp	r0, #0
   105de:	f43f a940 	beq.w	f862 <event_connection_prepare+0x12>
					node_rx->hdr.handle = conn->handle;
   105e2:	8c23      	ldrh	r3, [r4, #32]
   105e4:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
   105e6:	f880 900b 	strb.w	r9, [r0, #11]
					node_rx->hdr.type =
   105ea:	230c      	movs	r3, #12
   105ec:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
   105ee:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   105f2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   105f6:	7303      	strb	r3, [r0, #12]
					upd->rx = conn->phy_rx;
   105f8:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   105fc:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10600:	7343      	strb	r3, [r0, #13]
					packet_rx_enqueue();
   10602:	f7fe f95b 	bl	e8bc <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10606:	793b      	ldrb	r3, [r7, #4]
   10608:	f043 0303 	orr.w	r3, r3, #3
   1060c:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
   1060e:	2305      	movs	r3, #5
   10610:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
   10612:	2318      	movs	r3, #24
   10614:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   10616:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1061a:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1061e:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   10620:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   10624:	f3c3 1342 	ubfx	r3, r3, #5, #3
   10628:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
   1062a:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   1062e:	817b      	strh	r3, [r7, #10]
   10630:	f7ff bbc0 	b.w	fdb4 <event_connection_prepare+0x564>
								 conn->latency +
   10634:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   10636:	3306      	adds	r3, #6
   10638:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
   1063a:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
   1063e:	e7e2      	b.n	10606 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x607>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
   10640:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   10644:	1af3      	subs	r3, r6, r3
   10646:	0419      	lsls	r1, r3, #16
   10648:	f53f abb8 	bmi.w	fdbc <event_connection_prepare+0x56c>
		conn->llcp_ack = conn->llcp_req;
   1064c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   10650:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
   10654:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
   10658:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
   1065c:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
   10660:	bf18      	it	ne
   10662:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
   10666:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
   1066a:	bf1c      	itt	ne
   1066c:	f367 03c5 	bfine	r3, r7, #3, #3
   10670:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
   10674:	f012 0fe0 	tst.w	r2, #224	; 0xe0
		old_rx = conn->phy_rx;
   10678:	f001 0107 	and.w	r1, r1, #7
		if (conn->llcp.phy_upd_ind.rx) {
   1067c:	d008      	beq.n	10690 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x691>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
   1067e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   10682:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
   10686:	095b      	lsrs	r3, r3, #5
   10688:	f363 0702 	bfi	r7, r3, #0, #3
   1068c:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
   10690:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   10694:	461f      	mov	r7, r3
   10696:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1069a:	f363 17c7 	bfi	r7, r3, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   1069e:	0793      	lsls	r3, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
   106a0:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   106a4:	d40b      	bmi.n	106be <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6bf>
   106a6:	b2fb      	uxtb	r3, r7
   106a8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   106ac:	4283      	cmp	r3, r0
   106ae:	d106      	bne.n	106be <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6bf>
		    (conn->phy_rx == old_rx)) {
   106b0:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   106b4:	f003 0307 	and.w	r3, r3, #7
   106b8:	428b      	cmp	r3, r1
   106ba:	f43f ab7f 	beq.w	fdbc <event_connection_prepare+0x56c>
		node_rx = packet_rx_reserve_get(2);
   106be:	2002      	movs	r0, #2
   106c0:	f7fc ff08 	bl	d4d4 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
   106c4:	2800      	cmp	r0, #0
   106c6:	f43f a8cc 	beq.w	f862 <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
   106ca:	8c23      	ldrh	r3, [r4, #32]
   106cc:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   106ce:	230c      	movs	r3, #12
   106d0:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
   106d2:	2300      	movs	r3, #0
   106d4:	72c3      	strb	r3, [r0, #11]
		upd->tx = conn->phy_tx;
   106d6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   106da:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   106de:	7303      	strb	r3, [r0, #12]
		upd->rx = conn->phy_rx;
   106e0:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   106e4:	f3c3 0302 	ubfx	r3, r3, #0, #3
   106e8:	7343      	strb	r3, [r0, #13]
   106ea:	e73a      	b.n	10562 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x563>
		free_count_rx = packet_rx_acquired_count_get() +
   106ec:	f7fc fedc 	bl	d4a8 <packet_rx_acquired_count_get>
   106f0:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
   106f2:	f8d5 0d18 	ldr.w	r0, [r5, #3352]	; 0xd18
   106f6:	f7fa f9c7 	bl	aa88 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   106fa:	4438      	add	r0, r7
   106fc:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   106fe:	28ff      	cmp	r0, #255	; 0xff
   10700:	f63f a8af 	bhi.w	f862 <event_connection_prepare+0x12>
		if (_radio.packet_rx_data_count != free_count_rx) {
   10704:	f895 3d22 	ldrb.w	r3, [r5, #3362]	; 0xd22
   10708:	4283      	cmp	r3, r0
   1070a:	d12c      	bne.n	10766 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x767>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1070c:	4878      	ldr	r0, [pc, #480]	; (108f0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8f1>)
   1070e:	f7fa f98c 	bl	aa2a <mem_acquire>
		if (!node_tx) {
   10712:	4601      	mov	r1, r0
   10714:	b338      	cbz	r0, 10766 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x767>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   10716:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
   1071a:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
   1071e:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   10720:	2201      	movs	r2, #1
   10722:	f362 0301 	bfi	r3, r2, #0, #2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   10726:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   1072a:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   1072c:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10730:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
   10732:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10734:	f043 0303 	orr.w	r3, r3, #3
   10738:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
   1073a:	2309      	movs	r3, #9
   1073c:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   1073e:	2314      	movs	r3, #20
   10740:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   10742:	f06f 0304 	mvn.w	r3, #4
   10746:	720b      	strb	r3, [r1, #8]
   10748:	2300      	movs	r3, #0
   1074a:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
   1074c:	f06f 036f 	mvn.w	r3, #111	; 0x6f
   10750:	728b      	strb	r3, [r1, #10]
   10752:	2342      	movs	r3, #66	; 0x42
   10754:	72cb      	strb	r3, [r1, #11]
		lr->max_tx_octets = conn->default_tx_octets;
   10756:	818a      	strh	r2, [r1, #12]
		ctrl_tx_enqueue(conn, node_tx);
   10758:	4620      	mov	r0, r4
   1075a:	f7fe ffab 	bl	f6b4 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   1075e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   10762:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
   10766:	f894 3020 	ldrb.w	r3, [r4, #32]
   1076a:	f994 501d 	ldrsb.w	r5, [r4, #29]
   1076e:	4861      	ldr	r0, [pc, #388]	; (108f4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8f5>)
   10770:	4961      	ldr	r1, [pc, #388]	; (108f8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8f9>)
   10772:	68a2      	ldr	r2, [r4, #8]
   10774:	9403      	str	r4, [sp, #12]
   10776:	3307      	adds	r3, #7
   10778:	ea11 0125 	ands.w	r1, r1, r5, asr #32
   1077c:	bf38      	it	cc
   1077e:	4601      	movcc	r1, r0
   10780:	b2db      	uxtb	r3, r3
   10782:	e88d 000c 	stmia.w	sp, {r2, r3}
   10786:	9102      	str	r1, [sp, #8]
   10788:	1d23      	adds	r3, r4, #4
   1078a:	4622      	mov	r2, r4
   1078c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1078e:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
   10790:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
   10792:	f7fe fbfd 	bl	ef90 <event_common_prepare>
	conn->event_counter = event_counter + 1;
   10796:	8466      	strh	r6, [r4, #34]	; 0x22
}
   10798:	b00f      	add	sp, #60	; 0x3c
   1079a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
   1079e:	f7fc fe83 	bl	d4a8 <packet_rx_acquired_count_get>
   107a2:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
   107a4:	f8d5 0d18 	ldr.w	r0, [r5, #3352]	; 0xd18
   107a8:	f7fa f96e 	bl	aa88 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   107ac:	4438      	add	r0, r7
   107ae:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   107b0:	28ff      	cmp	r0, #255	; 0xff
   107b2:	f63f a856 	bhi.w	f862 <event_connection_prepare+0x12>
		if (_radio.packet_rx_data_count != free_count_rx) {
   107b6:	f895 3d22 	ldrb.w	r3, [r5, #3362]	; 0xd22
   107ba:	4283      	cmp	r3, r0
   107bc:	f47f a851 	bne.w	f862 <event_connection_prepare+0x12>
		conn->llcp_length.ack = conn->llcp_length.req;
   107c0:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   107c4:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		_radio.conn_curr->pause_tx = 0;
   107c8:	f8d5 3cfc 	ldr.w	r3, [r5, #3324]	; 0xcfc
		conn->procedure_expire = 0;
   107cc:	2100      	movs	r1, #0
   107ce:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
   107d2:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   107d6:	f361 02c3 	bfi	r2, r1, #3, #1
   107da:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
   107de:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   107e2:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
   107e4:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
   107e8:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
   107ea:	f8d5 0cf4 	ldr.w	r0, [r5, #3316]	; 0xcf4
   107ee:	f7fa f94b 	bl	aa88 <mem_free_count_get>
		if (_radio.advertiser.conn) {
   107f2:	f8d5 3c18 	ldr.w	r3, [r5, #3096]	; 0xc18
   107f6:	b10b      	cbz	r3, 107fc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7fd>
			free_count_conn++;
   107f8:	3001      	adds	r0, #1
   107fa:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
   107fc:	f8d5 3c54 	ldr.w	r3, [r5, #3156]	; 0xc54
   10800:	b10b      	cbz	r3, 10806 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x807>
			free_count_conn++;
   10802:	3001      	adds	r0, #1
   10804:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   10806:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
   10808:	f895 3cf8 	ldrb.w	r3, [r5, #3320]	; 0xcf8
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   1080c:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
   1080e:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   10810:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
   10814:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   10816:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
   10818:	d060      	beq.n	108dc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8dd>
   1081a:	f8b5 3d20 	ldrh.w	r3, [r5, #3360]	; 0xd20
   1081e:	42bb      	cmp	r3, r7
   10820:	d35c      	bcc.n	108dc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8dd>
		node_rx = packet_rx_reserve_get(2);
   10822:	2002      	movs	r0, #2
   10824:	f7fc fe56 	bl	d4d4 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
   10828:	2800      	cmp	r0, #0
   1082a:	f43f a81a 	beq.w	f862 <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
   1082e:	8c23      	ldrh	r3, [r4, #32]
   10830:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   10832:	2301      	movs	r3, #1
   10834:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   10836:	7a03      	ldrb	r3, [r0, #8]
   10838:	f043 0303 	orr.w	r3, r3, #3
   1083c:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
   1083e:	2309      	movs	r3, #9
   10840:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   10842:	2315      	movs	r3, #21
   10844:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   10846:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   10848:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   1084a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   1084c:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
   1084e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   10850:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
   10852:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   10854:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
   10856:	f7fe f831 	bl	e8bc <packet_rx_enqueue>
   1085a:	e784      	b.n	10766 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x767>
				if (_radio.packet_rx_acquire == 0) {
   1085c:	b90b      	cbnz	r3, 10862 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x863>
						_radio.packet_rx_count - 1;
   1085e:	f895 3d28 	ldrb.w	r3, [r5, #3368]	; 0xd28
					_radio.packet_rx_acquire -= 1;
   10862:	3b01      	subs	r3, #1
   10864:	f885 3d2a 	strb.w	r3, [r5, #3370]	; 0xd2a
				node_rx = _radio.packet_rx[
   10868:	f895 2d2a 	ldrb.w	r2, [r5, #3370]	; 0xd2a
   1086c:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
				mem_release(node_rx->hdr.onion.link,
   10870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10874:	4649      	mov	r1, r9
   10876:	6818      	ldr	r0, [r3, #0]
   10878:	f7fa f8f1 	bl	aa5e <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
   1087c:	f895 2d28 	ldrb.w	r2, [r5, #3368]	; 0xd28
   10880:	f895 3d3c 	ldrb.w	r3, [r5, #3388]	; 0xd3c
   10884:	3a01      	subs	r2, #1
   10886:	4293      	cmp	r3, r2
   10888:	f6be afeb 	bge.w	f862 <event_connection_prepare+0x12>
				_radio.link_rx_data_quota++;
   1088c:	3301      	adds	r3, #1
   1088e:	f885 3d3c 	strb.w	r3, [r5, #3388]	; 0xd3c
			while (_radio.packet_rx_acquire !=
   10892:	f895 3d2a 	ldrb.w	r3, [r5, #3370]	; 0xd2a
				_radio.packet_rx_last) {
   10896:	f895 2d29 	ldrb.w	r2, [r5, #3369]	; 0xd29
			while (_radio.packet_rx_acquire !=
   1089a:	4293      	cmp	r3, r2
   1089c:	d1de      	bne.n	1085c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x85d>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
   1089e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
   108a0:	f8b5 2d1e 	ldrh.w	r2, [r5, #3358]	; 0xd1e
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
   108a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
				_radio.packet_rx_data_size =
   108a8:	bf3a      	itte	cc
   108aa:	f44f 7386 	movcc.w	r3, #268	; 0x10c
   108ae:	f8a5 3d20 	strhcc.w	r3, [r5, #3360]	; 0xd20
				_radio.packet_rx_data_size =
   108b2:	f8a5 7d20 	strhcs.w	r7, [r5, #3360]	; 0xd20
				_radio.packet_rx_data_size;
   108b6:	f8b5 1d20 	ldrh.w	r1, [r5, #3360]	; 0xd20
			_radio.packet_rx_data_count =
   108ba:	fbb2 f2f1 	udiv	r2, r2, r1
   108be:	b2d2      	uxtb	r2, r2
   108c0:	f885 2d22 	strb.w	r2, [r5, #3362]	; 0xd22
			LL_ASSERT(_radio.packet_rx_data_count);
   108c4:	2a00      	cmp	r2, #0
   108c6:	f43e afcc 	beq.w	f862 <event_connection_prepare+0x12>
			mem_init(_radio.pkt_rx_data_pool,
   108ca:	f8d5 0d14 	ldr.w	r0, [r5, #3348]	; 0xd14
   108ce:	4b0b      	ldr	r3, [pc, #44]	; (108fc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8fd>)
   108d0:	f7fa f884 	bl	a9dc <mem_init>
			packet_rx_allocate(4);
   108d4:	2004      	movs	r0, #4
   108d6:	f7fc fe75 	bl	d5c4 <packet_rx_allocate>
   108da:	e7a2      	b.n	10822 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x823>
				mem_release(node_rx->hdr.onion.link,
   108dc:	f8df 9020 	ldr.w	r9, [pc, #32]	; 10900 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x901>
   108e0:	e7d7      	b.n	10892 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x893>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   108e2:	4903      	ldr	r1, [pc, #12]	; (108f0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8f1>)
   108e4:	4638      	mov	r0, r7
   108e6:	f7fa f8ba 	bl	aa5e <mem_release>
   108ea:	f7ff ba67 	b.w	fdbc <event_connection_prepare+0x56c>
   108ee:	bf00      	nop
   108f0:	200018f4 	.word	0x200018f4
   108f4:	00010e09 	.word	0x00010e09
   108f8:	00010949 	.word	0x00010949
   108fc:	200018c8 	.word	0x200018c8
   10900:	200018e0 	.word	0x200018e0

00010904 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   10904:	f7fe bfa4 	b.w	f850 <event_connection_prepare>

00010908 <event_slave_prepare>:
   10908:	f7fe bfa2 	b.w	f850 <event_connection_prepare>

0001090c <connection_configure>:
{
   1090c:	b510      	push	{r4, lr}
   1090e:	4604      	mov	r4, r0
	radio_reset();
   10910:	f006 fbe6 	bl	170e0 <radio_reset>
	radio_tx_power_set(0);
   10914:	2000      	movs	r0, #0
   10916:	f006 fc2b 	bl	17170 <radio_tx_power_set>
	radio_isr_set(isr);
   1091a:	480a      	ldr	r0, [pc, #40]	; (10944 <connection_configure+0x38>)
   1091c:	f006 fbaa 	bl	17074 <radio_isr_set>
	radio_aa_set(conn->access_addr);
   10920:	f104 0010 	add.w	r0, r4, #16
   10924:	f006 fc42 	bl	171ac <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
   10928:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
   1092a:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
   1092c:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
   1092e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
   10932:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   10934:	f240 605b 	movw	r0, #1627	; 0x65b
   10938:	4319      	orrs	r1, r3
}
   1093a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1093e:	f006 bcef 	b.w	17320 <radio_crc_configure>
   10942:	bf00      	nop
   10944:	000120a1 	.word	0x000120a1

00010948 <event_slave>:
{
   10948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1094c:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
   1094e:	4b65      	ldr	r3, [pc, #404]	; (10ae4 <event_slave+0x19c>)
   10950:	7cda      	ldrb	r2, [r3, #19]
{
   10952:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   10954:	f002 06ff 	and.w	r6, r2, #255	; 0xff
   10958:	461d      	mov	r5, r3
   1095a:	b12a      	cbz	r2, 10968 <event_slave+0x20>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1095c:	4040      	eors	r0, r0
   1095e:	f380 8811 	msr	BASEPRI, r0
   10962:	f04f 0004 	mov.w	r0, #4
   10966:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   10968:	7c1b      	ldrb	r3, [r3, #16]
   1096a:	8c22      	ldrh	r2, [r4, #32]
   1096c:	b2db      	uxtb	r3, r3
   1096e:	3207      	adds	r2, #7
   10970:	4293      	cmp	r3, r2
   10972:	d1f3      	bne.n	1095c <event_slave+0x14>
	_radio.packet_counter = 0;
   10974:	f885 6d00 	strb.w	r6, [r5, #3328]	; 0xd00
	_radio.crc_expire = 0;
   10978:	f885 6d01 	strb.w	r6, [r5, #3329]	; 0xd01
	_radio.role = ROLE_SLAVE;
   1097c:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   1097e:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
   10980:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
   10982:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
   10984:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
   10986:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
   10988:	f8c5 4cfc 	str.w	r4, [r5, #3324]	; 0xcfc
	_radio.state = STATE_RX;
   1098c:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
   1098e:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
   10990:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
   10992:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
   10994:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
   10996:	752a      	strb	r2, [r5, #20]
	connection_configure(conn);
   10998:	f7ff ffb8 	bl	1090c <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   1099c:	2096      	movs	r0, #150	; 0x96
   1099e:	f006 fd7b 	bl	17498 <radio_tmr_tifs_set>
				     conn->phy_flags);
   109a2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
   109a6:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   109aa:	09d3      	lsrs	r3, r2, #7
   109ac:	4631      	mov	r1, r6
   109ae:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   109b2:	f000 0007 	and.w	r0, r0, #7
   109b6:	f006 fcdd 	bl	17374 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   109ba:	f895 2d29 	ldrb.w	r2, [r5, #3369]	; 0xd29
   109be:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
   109c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
   109c6:	4620      	mov	r0, r4
   109c8:	3108      	adds	r1, #8
   109ca:	f7fd f817 	bl	d9fc <rx_packet_set>
	if (conn->data_chan_sel) {
   109ce:	7f63      	ldrb	r3, [r4, #29]
   109d0:	f013 0f40 	tst.w	r3, #64	; 0x40
   109d4:	f104 0217 	add.w	r2, r4, #23
   109d8:	d059      	beq.n	10a8e <event_slave+0x146>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   109da:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   109dc:	8be1      	ldrh	r1, [r4, #30]
   109de:	3801      	subs	r0, #1
   109e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   109e4:	b280      	uxth	r0, r0
   109e6:	f7fe fc2f 	bl	f248 <chan_sel_2>
	chan_set(data_chan_use);
   109ea:	f7fd f85f 	bl	daac <chan_set>
	conn->slave.window_widening_event_us +=
   109ee:	6e23      	ldr	r3, [r4, #96]	; 0x60
   109f0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   109f2:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
   109f4:	2200      	movs	r2, #0
   109f6:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
   109f8:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
   109fa:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
   109fc:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
   109fe:	bf88      	it	hi
   10a00:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
   10a02:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   10a04:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
   10a06:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
   10a08:	4413      	add	r3, r2
   10a0a:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   10a0c:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
   10a0e:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   10a10:	f107 0109 	add.w	r1, r7, #9
   10a14:	4630      	mov	r0, r6
   10a16:	f006 fd4b 	bl	174b0 <radio_tmr_start>
   10a1a:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
   10a1c:	f006 fdd2 	bl	175c4 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   10a20:	4630      	mov	r0, r6
   10a22:	f006 fdf1 	bl	17608 <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   10a26:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
   10a28:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   10a2a:	f103 0650 	add.w	r6, r3, #80	; 0x50
   10a2e:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
   10a32:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   10a36:	2101      	movs	r1, #1
   10a38:	f000 0007 	and.w	r0, r0, #7
   10a3c:	f006 fc17 	bl	1726e <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   10a40:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
   10a42:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
   10a44:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   10a48:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
   10a4c:	2802      	cmp	r0, #2
   10a4e:	d03e      	beq.n	10ace <event_slave+0x186>
		return 40;
   10a50:	2804      	cmp	r0, #4
   10a52:	bf0c      	ite	eq
   10a54:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   10a58:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
   10a5a:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
   10a5c:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
   10a5e:	f006 fc08 	bl	17272 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   10a62:	4430      	add	r0, r6
   10a64:	f006 fd90 	bl	17588 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   10a68:	f894 1020 	ldrb.w	r1, [r4, #32]
   10a6c:	3107      	adds	r1, #7
   10a6e:	463a      	mov	r2, r7
   10a70:	b2c9      	uxtb	r1, r1
   10a72:	4620      	mov	r0, r4
   10a74:	f7fe fc2c 	bl	f2d0 <preempt_calc>
   10a78:	4603      	mov	r3, r0
   10a7a:	b350      	cbz	r0, 10ad2 <event_slave+0x18a>
		_radio.state = STATE_STOP;
   10a7c:	2304      	movs	r3, #4
   10a7e:	752b      	strb	r3, [r5, #20]
		radio_disable();
   10a80:	f006 fc12 	bl	172a8 <radio_disable>
	packet_tx_enqueue(2);
   10a84:	2002      	movs	r0, #2
}
   10a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
   10a8a:	f7fe b8b5 	b.w	ebf8 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   10a8e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   10a90:	7fa6      	ldrb	r6, [r4, #30]
   10a92:	fb01 6606 	mla	r6, r1, r6, r6
   10a96:	7fe1      	ldrb	r1, [r4, #31]
   10a98:	2025      	movs	r0, #37	; 0x25
   10a9a:	440e      	add	r6, r1
   10a9c:	fb96 f1f0 	sdiv	r1, r6, r0
   10aa0:	fb00 6611 	mls	r6, r0, r1, r6
   10aa4:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   10aa6:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
   10aa8:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   10aaa:	5c51      	ldrb	r1, [r2, r1]
   10aac:	f006 0607 	and.w	r6, r6, #7
   10ab0:	fa41 f606 	asr.w	r6, r1, r6
   10ab4:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
   10ab6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   10aba:	d496      	bmi.n	109ea <event_slave+0xa2>
		chan_index = chan_next % chan_count;
   10abc:	fbb0 f1f3 	udiv	r1, r0, r3
   10ac0:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
   10ac4:	b2c9      	uxtb	r1, r1
   10ac6:	4610      	mov	r0, r2
   10ac8:	f7fc fcd2 	bl	d470 <chan_sel_remap>
   10acc:	e78d      	b.n	109ea <event_slave+0xa2>
		return 24;
   10ace:	2318      	movs	r3, #24
   10ad0:	e7c3      	b.n	10a5a <event_slave+0x112>
		ticker_status =
   10ad2:	4a05      	ldr	r2, [pc, #20]	; (10ae8 <event_slave+0x1a0>)
   10ad4:	4601      	mov	r1, r0
   10ad6:	f7fa ff39 	bl	b94c <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10ada:	f030 0302 	bics.w	r3, r0, #2
   10ade:	f47f af3d 	bne.w	1095c <event_slave+0x14>
   10ae2:	e7cf      	b.n	10a84 <event_slave+0x13c>
   10ae4:	20000bb0 	.word	0x20000bb0
   10ae8:	0000e6b9 	.word	0x0000e6b9

00010aec <prepare_pdu_data_tx>:
	    conn->empty ||
   10aec:	f890 c0f8 	ldrb.w	ip, [r0, #248]	; 0xf8
	if (/* empty packet */
   10af0:	f01c 0f80 	tst.w	ip, #128	; 0x80
{
   10af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10af8:	4604      	mov	r4, r0
   10afa:	460e      	mov	r6, r1
	if (/* empty packet */
   10afc:	d109      	bne.n	10b12 <prepare_pdu_data_tx+0x26>
	    !conn->pkt_tx_head ||
   10afe:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
   10b02:	b131      	cbz	r1, 10b12 <prepare_pdu_data_tx+0x26>
	    !conn->pkt_tx_head ||
   10b04:	f01c 0f08 	tst.w	ip, #8
   10b08:	f8d0 e140 	ldr.w	lr, [r0, #320]	; 0x140
   10b0c:	d023      	beq.n	10b56 <prepare_pdu_data_tx+0x6a>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
   10b0e:	4571      	cmp	r1, lr
   10b10:	d021      	beq.n	10b56 <prepare_pdu_data_tx+0x6a>
	conn->empty = 1;
   10b12:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   10b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10b1a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
   10b1e:	f006 fc15 	bl	1734c <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   10b22:	7803      	ldrb	r3, [r0, #0]
   10b24:	2201      	movs	r2, #1
   10b26:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
   10b2a:	2200      	movs	r2, #0
   10b2c:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
   10b2e:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   10b32:	7003      	strb	r3, [r0, #0]
   10b34:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
   10b36:	b15a      	cbz	r2, 10b50 <prepare_pdu_data_tx+0x64>
		pdu_data_tx->md = 1;
   10b38:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
   10b3c:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
   10b3e:	7803      	ldrb	r3, [r0, #0]
   10b40:	f36f 1347 	bfc	r3, #5, #3
   10b44:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
   10b46:	2300      	movs	r3, #0
   10b48:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
   10b4a:	6030      	str	r0, [r6, #0]
   10b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data_tx->md = 0;
   10b50:	f362 1304 	bfi	r3, r2, #4, #1
   10b54:	e7f2      	b.n	10b3c <prepare_pdu_data_tx+0x50>
					conn->packet_tx_head_offset);
   10b56:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
   10b5a:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   10b5e:	1d0d      	adds	r5, r1, #4
   10b60:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
   10b62:	b913      	cbnz	r3, 10b6a <prepare_pdu_data_tx+0x7e>
			conn->packet_tx_head_len = _pdu_data_tx->len;
   10b64:	7843      	ldrb	r3, [r0, #1]
   10b66:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
   10b6a:	b122      	cbz	r2, 10b76 <prepare_pdu_data_tx+0x8a>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   10b6c:	5cab      	ldrb	r3, [r5, r2]
   10b6e:	2701      	movs	r7, #1
   10b70:	f367 0301 	bfi	r3, r7, #0, #2
   10b74:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
   10b76:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
		switch (conn->phy_tx_time) {
   10b7a:	f894 8039 	ldrb.w	r8, [r4, #57]	; 0x39
		_pdu_data_tx->len = conn->packet_tx_head_len -
   10b7e:	1abf      	subs	r7, r7, r2
   10b80:	b2ff      	uxtb	r7, r7
   10b82:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
   10b84:	5cab      	ldrb	r3, [r5, r2]
   10b86:	f36f 1304 	bfc	r3, #4, #1
   10b8a:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
   10b8c:	f008 0807 	and.w	r8, r8, #7
   10b90:	f1b8 0f02 	cmp.w	r8, #2
   10b94:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   10b96:	d029      	beq.n	10bec <prepare_pdu_data_tx+0x100>
   10b98:	f1b8 0f04 	cmp.w	r8, #4
   10b9c:	d029      	beq.n	10bf2 <prepare_pdu_data_tx+0x106>
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
   10b9e:	08db      	lsrs	r3, r3, #3
   10ba0:	3b0a      	subs	r3, #10
				max_tx_octets = ((conn->max_tx_time - 430) >>
   10ba2:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
   10ba4:	f01c 0f20 	tst.w	ip, #32
			max_tx_octets -= 4;
   10ba8:	bf18      	it	ne
   10baa:	3b04      	subne	r3, #4
   10bac:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
   10bb0:	bf18      	it	ne
   10bb2:	b29b      	uxthne	r3, r3
   10bb4:	4563      	cmp	r3, ip
   10bb6:	bf28      	it	cs
   10bb8:	4663      	movcs	r3, ip
		if (_pdu_data_tx->len > max_tx_octets) {
   10bba:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
   10bbc:	bf81      	itttt	hi
   10bbe:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
   10bc0:	5cab      	ldrbhi	r3, [r5, r2]
   10bc2:	f043 0310 	orrhi.w	r3, r3, #16
   10bc6:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
   10bc8:	680b      	ldr	r3, [r1, #0]
   10bca:	b11b      	cbz	r3, 10bd4 <prepare_pdu_data_tx+0xe8>
			_pdu_data_tx->md = 1;
   10bcc:	5cab      	ldrb	r3, [r5, r2]
   10bce:	f043 0310 	orr.w	r3, r3, #16
   10bd2:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
   10bd4:	f1be 0f00 	cmp.w	lr, #0
   10bd8:	d1b1      	bne.n	10b3e <prepare_pdu_data_tx+0x52>
   10bda:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   10bde:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
   10be0:	bf1c      	itt	ne
   10be2:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
   10be6:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
   10bea:	e7a8      	b.n	10b3e <prepare_pdu_data_tx+0x52>
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
   10bec:	089b      	lsrs	r3, r3, #2
   10bee:	3b0b      	subs	r3, #11
   10bf0:	e7d7      	b.n	10ba2 <prepare_pdu_data_tx+0xb6>
			if (conn->phy_flags & 0x01) {
   10bf2:	f894 8038 	ldrb.w	r8, [r4, #56]	; 0x38
   10bf6:	ea5f 18d8 	movs.w	r8, r8, lsr #7
				max_tx_octets = ((conn->max_tx_time - 592) >>
   10bfa:	bf15      	itete	ne
   10bfc:	f5a3 7314 	subne.w	r3, r3, #592	; 0x250
				max_tx_octets = ((conn->max_tx_time - 430) >>
   10c00:	f5a3 73d7 	subeq.w	r3, r3, #430	; 0x1ae
				max_tx_octets = ((conn->max_tx_time - 592) >>
   10c04:	119b      	asrne	r3, r3, #6
				max_tx_octets = ((conn->max_tx_time - 430) >>
   10c06:	111b      	asreq	r3, r3, #4
   10c08:	3b02      	subs	r3, #2
   10c0a:	e7ca      	b.n	10ba2 <prepare_pdu_data_tx+0xb6>
   10c0c:	0000      	movs	r0, r0
	...

00010c10 <mayfly_xtal_stop_calc>:
{
   10c10:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c12:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   10c14:	2302      	movs	r3, #2
   10c16:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
   10c18:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
   10c1a:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   10c1c:	4e74      	ldr	r6, [pc, #464]	; (10df0 <mayfly_xtal_stop_calc+0x1e0>)
				    _radio.connection_count));
   10c1e:	4d75      	ldr	r5, [pc, #468]	; (10df4 <mayfly_xtal_stop_calc+0x1e4>)
	struct connection *conn_curr = NULL;
   10c20:	930a      	str	r3, [sp, #40]	; 0x28
{
   10c22:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
   10c24:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
   10c26:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
   10c2a:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   10c2c:	ab09      	add	r3, sp, #36	; 0x24
   10c2e:	9302      	str	r3, [sp, #8]
   10c30:	ab0c      	add	r3, sp, #48	; 0x30
   10c32:	9300      	str	r3, [sp, #0]
   10c34:	9601      	str	r6, [sp, #4]
   10c36:	ab0d      	add	r3, sp, #52	; 0x34
   10c38:	f10d 0223 	add.w	r2, sp, #35	; 0x23
   10c3c:	2101      	movs	r1, #1
   10c3e:	2000      	movs	r0, #0
   10c40:	f7fa fe42 	bl	b8c8 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   10c44:	2802      	cmp	r0, #2
   10c46:	d00b      	beq.n	10c60 <mayfly_xtal_stop_calc+0x50>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   10c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10c4a:	b16b      	cbz	r3, 10c68 <mayfly_xtal_stop_calc+0x58>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10c4c:	4040      	eors	r0, r0
   10c4e:	f380 8811 	msr	BASEPRI, r0
   10c52:	f04f 0004 	mov.w	r0, #4
   10c56:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   10c58:	2101      	movs	r1, #1
   10c5a:	2000      	movs	r0, #0
   10c5c:	f7fa feb2 	bl	b9c4 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   10c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10c62:	2b02      	cmp	r3, #2
   10c64:	d0f8      	beq.n	10c58 <mayfly_xtal_stop_calc+0x48>
   10c66:	e7ef      	b.n	10c48 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
   10c68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
   10c6c:	2bff      	cmp	r3, #255	; 0xff
   10c6e:	d004      	beq.n	10c7a <mayfly_xtal_stop_calc+0x6a>
   10c70:	f895 2cf8 	ldrb.w	r2, [r5, #3320]	; 0xcf8
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   10c74:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
   10c76:	4293      	cmp	r3, r2
   10c78:	dad8      	bge.n	10c2c <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
   10c7a:	1f5a      	subs	r2, r3, #5
   10c7c:	b2d2      	uxtb	r2, r2
   10c7e:	2af9      	cmp	r2, #249	; 0xf9
   10c80:	4f5d      	ldr	r7, [pc, #372]	; (10df8 <mayfly_xtal_stop_calc+0x1e8>)
   10c82:	d805      	bhi.n	10c90 <mayfly_xtal_stop_calc+0x80>
				_radio.connection_count))) {
   10c84:	4a5b      	ldr	r2, [pc, #364]	; (10df4 <mayfly_xtal_stop_calc+0x1e4>)
   10c86:	f892 2cf8 	ldrb.w	r2, [r2, #3320]	; 0xcf8
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   10c8a:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
   10c8c:	4293      	cmp	r3, r2
   10c8e:	db06      	blt.n	10c9e <mayfly_xtal_stop_calc+0x8e>
		if (s_xtal_retained) {
   10c90:	783b      	ldrb	r3, [r7, #0]
   10c92:	b113      	cbz	r3, 10c9a <mayfly_xtal_stop_calc+0x8a>
   10c94:	2001      	movs	r0, #1
   10c96:	f7fd fd39 	bl	e70c <mayfly_xtal_retain.part.14>
}
   10c9a:	b00f      	add	sp, #60	; 0x3c
   10c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
   10c9e:	a90a      	add	r1, sp, #40	; 0x28
   10ca0:	b2e0      	uxtb	r0, r4
   10ca2:	f7fd fd15 	bl	e6d0 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
   10ca6:	2800      	cmp	r0, #0
   10ca8:	d0d0      	beq.n	10c4c <mayfly_xtal_stop_calc+0x3c>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
   10caa:	6803      	ldr	r3, [r0, #0]
   10cac:	6844      	ldr	r4, [r0, #4]
   10cae:	2b00      	cmp	r3, #0
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
   10cb0:	bfb8      	it	lt
   10cb2:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
   10cb4:	429c      	cmp	r4, r3
   10cb6:	bf38      	it	cc
   10cb8:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
   10cba:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
   10cbc:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   10cc0:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
   10cc2:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
   10cc4:	f7fd fd04 	bl	e6d0 <hdr_conn_get>
	LL_ASSERT(hdr_next);
   10cc8:	4605      	mov	r5, r0
   10cca:	2800      	cmp	r0, #0
   10ccc:	d0be      	beq.n	10c4c <mayfly_xtal_stop_calc+0x3c>
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
   10cce:	6886      	ldr	r6, [r0, #8]
   10cd0:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
   10cd2:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
   10cd4:	429e      	cmp	r6, r3
   10cd6:	bf38      	it	cc
   10cd8:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
   10cda:	2a00      	cmp	r2, #0
   10cdc:	da05      	bge.n	10cea <mayfly_xtal_stop_calc+0xda>
		ticks_to_expire -=
   10cde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
   10ce0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
   10ce4:	4433      	add	r3, r6
   10ce6:	1a9b      	subs	r3, r3, r2
   10ce8:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
   10cea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
   10cec:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
   10cf0:	4293      	cmp	r3, r2
   10cf2:	d20b      	bcs.n	10d0c <mayfly_xtal_stop_calc+0xfc>
		if (s_xtal_retained) {
   10cf4:	783b      	ldrb	r3, [r7, #0]
   10cf6:	b113      	cbz	r3, 10cfe <mayfly_xtal_stop_calc+0xee>
   10cf8:	2001      	movs	r0, #1
   10cfa:	f7fd fd07 	bl	e70c <mayfly_xtal_retain.part.14>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
   10cfe:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   10d02:	2101      	movs	r1, #1
   10d04:	4628      	mov	r0, r5
   10d06:	f7fd fd23 	bl	e750 <prepare_normal_set>
   10d0a:	e7c6      	b.n	10c9a <mayfly_xtal_stop_calc+0x8a>
		if (!s_xtal_retained) {
   10d0c:	783a      	ldrb	r2, [r7, #0]
   10d0e:	b93a      	cbnz	r2, 10d20 <mayfly_xtal_stop_calc+0x110>
			s_xtal_retained = 1;
   10d10:	2001      	movs	r0, #1
			retval = mayfly_enqueue(caller_id,
   10d12:	4b3a      	ldr	r3, [pc, #232]	; (10dfc <mayfly_xtal_stop_calc+0x1ec>)
			s_xtal_retained = 1;
   10d14:	7038      	strb	r0, [r7, #0]
			retval = mayfly_enqueue(caller_id,
   10d16:	4611      	mov	r1, r2
   10d18:	f7f9 ff52 	bl	abc0 <mayfly_enqueue>
			LL_ASSERT(!retval);
   10d1c:	2800      	cmp	r0, #0
   10d1e:	d195      	bne.n	10c4c <mayfly_xtal_stop_calc+0x3c>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
   10d20:	682b      	ldr	r3, [r5, #0]
   10d22:	2b00      	cmp	r3, #0
   10d24:	db15      	blt.n	10d52 <mayfly_xtal_stop_calc+0x142>
   10d26:	429e      	cmp	r6, r3
   10d28:	d213      	bcs.n	10d52 <mayfly_xtal_stop_calc+0x142>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
   10d2a:	1b9b      	subs	r3, r3, r6
			ticker_status =
   10d2c:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   10d2e:	b29b      	uxth	r3, r3
			ticker_status =
   10d30:	4933      	ldr	r1, [pc, #204]	; (10e00 <mayfly_xtal_stop_calc+0x1f0>)
   10d32:	9105      	str	r1, [sp, #20]
   10d34:	9302      	str	r3, [sp, #8]
   10d36:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   10d3a:	9506      	str	r5, [sp, #24]
   10d3c:	9004      	str	r0, [sp, #16]
   10d3e:	9003      	str	r0, [sp, #12]
   10d40:	9001      	str	r0, [sp, #4]
   10d42:	9000      	str	r0, [sp, #0]
   10d44:	2101      	movs	r1, #1
   10d46:	f7fa fd35 	bl	b7b4 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10d4a:	f030 0302 	bics.w	r3, r0, #2
   10d4e:	f47f af7d 	bne.w	10c4c <mayfly_xtal_stop_calc+0x3c>
		if (!conn_curr || !conn_next) {
   10d52:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   10d54:	2e00      	cmp	r6, #0
   10d56:	d0a0      	beq.n	10c9a <mayfly_xtal_stop_calc+0x8a>
   10d58:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10d5a:	2d00      	cmp	r5, #0
   10d5c:	d09d      	beq.n	10c9a <mayfly_xtal_stop_calc+0x8a>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
   10d5e:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
   10d60:	8caa      	ldrh	r2, [r5, #36]	; 0x24
   10d62:	429a      	cmp	r2, r3
   10d64:	d199      	bne.n	10c9a <mayfly_xtal_stop_calc+0x8a>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
   10d66:	4827      	ldr	r0, [pc, #156]	; (10e04 <mayfly_xtal_stop_calc+0x1f4>)
   10d68:	b292      	uxth	r2, r2
   10d6a:	fba2 0100 	umull	r0, r1, r2, r0
   10d6e:	f240 1323 	movw	r3, #291	; 0x123
   10d72:	fb03 1102 	mla	r1, r3, r2, r1
   10d76:	a31c      	add	r3, pc, #112	; (adr r3, 10de8 <mayfly_xtal_stop_calc+0x1d8>)
   10d78:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d7c:	f7ef fa74 	bl	268 <__aeabi_uldivmod>
   10d80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10d82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
   10d86:	2200      	movs	r2, #0
   10d88:	4298      	cmp	r0, r3
   10d8a:	d318      	bcc.n	10dbe <mayfly_xtal_stop_calc+0x1ae>
   10d8c:	b102      	cbz	r2, 10d90 <mayfly_xtal_stop_calc+0x180>
   10d8e:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
   10d90:	f996 201d 	ldrsb.w	r2, [r6, #29]
   10d94:	2a00      	cmp	r2, #0
   10d96:	f995 201d 	ldrsb.w	r2, [r5, #29]
   10d9a:	da13      	bge.n	10dc4 <mayfly_xtal_stop_calc+0x1b4>
   10d9c:	2a00      	cmp	r2, #0
   10d9e:	f6ff af7c 	blt.w	10c9a <mayfly_xtal_stop_calc+0x8a>
			     (ticks_slot_abs +
   10da2:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
   10da4:	429c      	cmp	r4, r3
   10da6:	f67f af78 	bls.w	10c9a <mayfly_xtal_stop_calc+0x8a>
				status = conn_update_req(conn_curr);
   10daa:	4630      	mov	r0, r6
   10dac:	f7fc fba4 	bl	d4f8 <conn_update_req>
				if (status == 2) {
   10db0:	2802      	cmp	r0, #2
   10db2:	f47f af72 	bne.w	10c9a <mayfly_xtal_stop_calc+0x8a>
					conn_update_req(conn_next);
   10db6:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
   10db8:	f7fc fb9e 	bl	d4f8 <conn_update_req>
   10dbc:	e76d      	b.n	10c9a <mayfly_xtal_stop_calc+0x8a>
				ticks_to_expire -= ticks_conn_interval;
   10dbe:	1a1b      	subs	r3, r3, r0
   10dc0:	2201      	movs	r2, #1
   10dc2:	e7e1      	b.n	10d88 <mayfly_xtal_stop_calc+0x178>
			} else if (!conn_curr->role && conn_next->role &&
   10dc4:	2a00      	cmp	r2, #0
   10dc6:	f6bf af68 	bge.w	10c9a <mayfly_xtal_stop_calc+0x8a>
				    (ticks_slot_abs +
   10dca:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
   10dcc:	429c      	cmp	r4, r3
   10dce:	f67f af64 	bls.w	10c9a <mayfly_xtal_stop_calc+0x8a>
				status = conn_update_req(conn_next);
   10dd2:	4628      	mov	r0, r5
   10dd4:	f7fc fb90 	bl	d4f8 <conn_update_req>
				if (status == 2) {
   10dd8:	2802      	cmp	r0, #2
   10dda:	f47f af5e 	bne.w	10c9a <mayfly_xtal_stop_calc+0x8a>
					conn_update_req(conn_curr);
   10dde:	980a      	ldr	r0, [sp, #40]	; 0x28
   10de0:	e7ea      	b.n	10db8 <mayfly_xtal_stop_calc+0x1a8>
   10de2:	bf00      	nop
   10de4:	f3af 8000 	nop.w
   10de8:	1afd498d 	.word	0x1afd498d
   10dec:	00000007 	.word	0x00000007
   10df0:	0000d455 	.word	0x0000d455
   10df4:	20000bb0 	.word	0x20000bb0
   10df8:	200019d4 	.word	0x200019d4
   10dfc:	2000e0a8 	.word	0x2000e0a8
   10e00:	0000d459 	.word	0x0000d459
   10e04:	09ce5400 	.word	0x09ce5400

00010e08 <event_master>:
{
   10e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10e0a:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
   10e0c:	4b4a      	ldr	r3, [pc, #296]	; (10f38 <event_master+0x130>)
   10e0e:	7cd9      	ldrb	r1, [r3, #19]
{
   10e10:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   10e12:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   10e16:	461d      	mov	r5, r3
   10e18:	b129      	cbz	r1, 10e26 <event_master+0x1e>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10e1a:	4040      	eors	r0, r0
   10e1c:	f380 8811 	msr	BASEPRI, r0
   10e20:	f04f 0004 	mov.w	r0, #4
   10e24:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   10e26:	7c1b      	ldrb	r3, [r3, #16]
   10e28:	8c21      	ldrh	r1, [r4, #32]
   10e2a:	b2db      	uxtb	r3, r3
   10e2c:	3107      	adds	r1, #7
   10e2e:	428b      	cmp	r3, r1
   10e30:	d1f3      	bne.n	10e1a <event_master+0x12>
	_radio.packet_counter = 0;
   10e32:	f885 2d00 	strb.w	r2, [r5, #3328]	; 0xd00
	_radio.crc_expire = 0;
   10e36:	f885 2d01 	strb.w	r2, [r5, #3329]	; 0xd01
	_radio.role = ROLE_MASTER;
   10e3a:	2104      	movs	r1, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   10e3c:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
   10e3e:	74e9      	strb	r1, [r5, #19]
	_radio.ticker_id_prepare = 0;
   10e40:	742a      	strb	r2, [r5, #16]
	_radio.ticker_id_event =
   10e42:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
   10e44:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
   10e46:	f8c5 4cfc 	str.w	r4, [r5, #3324]	; 0xcfc
	_radio.state = STATE_TX;
   10e4a:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
   10e4c:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   10e4e:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
   10e50:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
   10e52:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
   10e54:	f7fd fed0 	bl	ebf8 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
   10e58:	a901      	add	r1, sp, #4
   10e5a:	4620      	mov	r0, r4
   10e5c:	f7ff fe46 	bl	10aec <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
   10e60:	9901      	ldr	r1, [sp, #4]
   10e62:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
   10e66:	780b      	ldrb	r3, [r1, #0]
   10e68:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
   10e6c:	f3c2 0240 	ubfx	r2, r2, #1, #1
   10e70:	f362 0382 	bfi	r3, r2, #2, #1
   10e74:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
   10e76:	4620      	mov	r0, r4
   10e78:	f7ff fd48 	bl	1090c <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   10e7c:	2096      	movs	r0, #150	; 0x96
   10e7e:	f006 fb0b 	bl	17498 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
   10e82:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   10e86:	f000 0007 	and.w	r0, r0, #7
   10e8a:	f006 fa67 	bl	1735c <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
   10e8e:	9901      	ldr	r1, [sp, #4]
   10e90:	4620      	mov	r0, r4
   10e92:	f7fc fddf 	bl	da54 <tx_packet_set>
	if (conn->data_chan_sel) {
   10e96:	7f63      	ldrb	r3, [r4, #29]
   10e98:	f013 0f40 	tst.w	r3, #64	; 0x40
   10e9c:	f104 0217 	add.w	r2, r4, #23
   10ea0:	d021      	beq.n	10ee6 <event_master+0xde>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   10ea2:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   10ea4:	8be1      	ldrh	r1, [r4, #30]
   10ea6:	3801      	subs	r0, #1
   10ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   10eac:	b280      	uxth	r0, r0
   10eae:	f7fe f9cb 	bl	f248 <chan_sel_2>
	chan_set(data_chan_use);
   10eb2:	f7fc fdfb 	bl	daac <chan_set>
		remainder_us = radio_tmr_start(1,
   10eb6:	68ea      	ldr	r2, [r5, #12]
   10eb8:	f107 0109 	add.w	r1, r7, #9
   10ebc:	2001      	movs	r0, #1
   10ebe:	f006 faf7 	bl	174b0 <radio_tmr_start>
		radio_tmr_end_capture();
   10ec2:	f006 fbb3 	bl	1762c <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   10ec6:	f894 1020 	ldrb.w	r1, [r4, #32]
   10eca:	3107      	adds	r1, #7
   10ecc:	463a      	mov	r2, r7
   10ece:	b2c9      	uxtb	r1, r1
   10ed0:	4620      	mov	r0, r4
   10ed2:	f7fe f9fd 	bl	f2d0 <preempt_calc>
	if (0 !=
   10ed6:	4603      	mov	r3, r0
   10ed8:	b328      	cbz	r0, 10f26 <event_master+0x11e>
		_radio.state = STATE_STOP;
   10eda:	2304      	movs	r3, #4
   10edc:	752b      	strb	r3, [r5, #20]
		radio_disable();
   10ede:	f006 f9e3 	bl	172a8 <radio_disable>
}
   10ee2:	b003      	add	sp, #12
   10ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   10ee6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   10ee8:	7fa6      	ldrb	r6, [r4, #30]
   10eea:	fb01 6606 	mla	r6, r1, r6, r6
   10eee:	7fe1      	ldrb	r1, [r4, #31]
   10ef0:	2025      	movs	r0, #37	; 0x25
   10ef2:	440e      	add	r6, r1
   10ef4:	fb96 f1f0 	sdiv	r1, r6, r0
   10ef8:	fb00 6611 	mls	r6, r0, r1, r6
   10efc:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   10efe:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
   10f00:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   10f02:	5c51      	ldrb	r1, [r2, r1]
   10f04:	f006 0607 	and.w	r6, r6, #7
   10f08:	fa41 f606 	asr.w	r6, r1, r6
   10f0c:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
   10f0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   10f12:	d4ce      	bmi.n	10eb2 <event_master+0xaa>
		chan_index = chan_next % chan_count;
   10f14:	fbb0 f1f3 	udiv	r1, r0, r3
   10f18:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
   10f1c:	b2c9      	uxtb	r1, r1
   10f1e:	4610      	mov	r0, r2
   10f20:	f7fc faa6 	bl	d470 <chan_sel_remap>
   10f24:	e7c5      	b.n	10eb2 <event_master+0xaa>
		ticker_status =
   10f26:	4a05      	ldr	r2, [pc, #20]	; (10f3c <event_master+0x134>)
   10f28:	4601      	mov	r1, r0
   10f2a:	f7fa fd0f 	bl	b94c <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10f2e:	f030 0302 	bics.w	r3, r0, #2
   10f32:	f47f af72 	bne.w	10e1a <event_master+0x12>
   10f36:	e7d4      	b.n	10ee2 <event_master+0xda>
   10f38:	20000bb0 	.word	0x20000bb0
   10f3c:	0000e6b9 	.word	0x0000e6b9

00010f40 <isr_rx_conn_pkt_ctrl>:
{
   10f40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
   10f44:	7ac7      	ldrb	r7, [r0, #11]
{
   10f46:	4604      	mov	r4, r0
   10f48:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
   10f4a:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
   10f4e:	2f19      	cmp	r7, #25
   10f50:	f201 8077 	bhi.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
   10f54:	e8df f017 	tbh	[pc, r7, lsl #1]
   10f58:	007f001a 	.word	0x007f001a
   10f5c:	00c500b6 	.word	0x00c500b6
   10f60:	011b00f3 	.word	0x011b00f3
   10f64:	057a013f 	.word	0x057a013f
   10f68:	019d017c 	.word	0x019d017c
   10f6c:	01f801ce 	.word	0x01f801ce
   10f70:	02920229 	.word	0x02920229
   10f74:	02aa0192 	.word	0x02aa0192
   10f78:	047803f5 	.word	0x047803f5
   10f7c:	056d0553 	.word	0x056d0553
   10f80:	05f205f2 	.word	0x05f205f2
   10f84:	078606c7 	.word	0x078606c7
   10f88:	084207bd 	.word	0x084207bd
		if (!_radio.conn_curr->role ||
   10f8c:	4ed8      	ldr	r6, [pc, #864]	; (112f0 <isr_rx_conn_pkt_ctrl+0x3b0>)
   10f8e:	f8d6 5cfc 	ldr.w	r5, [r6, #3324]	; 0xcfc
   10f92:	f995 301d 	ldrsb.w	r3, [r5, #29]
   10f96:	2b00      	cmp	r3, #0
   10f98:	f281 8053 	bge.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
   10f9c:	7a41      	ldrb	r1, [r0, #9]
   10f9e:	2000      	movs	r0, #0
   10fa0:	f7fc fa3a 	bl	d418 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   10fa4:	2800      	cmp	r0, #0
   10fa6:	f001 804c 	beq.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
   10faa:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
   10fae:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   10fb0:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
   10fb2:	041b      	lsls	r3, r3, #16
   10fb4:	f101 805b 	bmi.w	1206e <isr_rx_conn_pkt_ctrl+0x112e>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   10fb8:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   10fbc:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
   10fc0:	429a      	cmp	r2, r3
   10fc2:	d005      	beq.n	10fd0 <isr_rx_conn_pkt_ctrl+0x90>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   10fc4:	4040      	eors	r0, r0
   10fc6:	f380 8811 	msr	BASEPRI, r0
   10fca:	f04f 0004 	mov.w	r0, #4
   10fce:	df02      	svc	2
	if (_radio.conn_upd == 0) {
   10fd0:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
   10fd4:	b90a      	cbnz	r2, 10fda <isr_rx_conn_pkt_ctrl+0x9a>
		_radio.conn_upd = conn;
   10fd6:	f8c6 5d70 	str.w	r5, [r6, #3440]	; 0xd70
	conn->llcp.conn_upd.win_size =
   10fda:	7b22      	ldrb	r2, [r4, #12]
   10fdc:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
   10fe0:	f8b4 000d 	ldrh.w	r0, [r4, #13]
   10fe4:	f240 42e2 	movw	r2, #1250	; 0x4e2
   10fe8:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
   10fea:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
   10fee:	7c20      	ldrb	r0, [r4, #16]
   10ff0:	7be2      	ldrb	r2, [r4, #15]
   10ff2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
   10ff6:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
   10ffa:	7ca0      	ldrb	r0, [r4, #18]
   10ffc:	7c62      	ldrb	r2, [r4, #17]
   10ffe:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
   11002:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
   11006:	7ce2      	ldrb	r2, [r4, #19]
   11008:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
   1100a:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
   1100e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
   11012:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   11016:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
   1101a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
   1101e:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
   11022:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
   11024:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
   11028:	2201      	movs	r2, #1
   1102a:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
   1102e:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   11032:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
   11036:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   1103a:	4293      	cmp	r3, r2
   1103c:	d007      	beq.n	1104e <isr_rx_conn_pkt_ctrl+0x10e>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   1103e:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   11042:	f003 0307 	and.w	r3, r3, #7
   11046:	2b04      	cmp	r3, #4
   11048:	d101      	bne.n	1104e <isr_rx_conn_pkt_ctrl+0x10e>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1104a:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
   1104e:	2000      	movs	r0, #0
   11050:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
   11054:	e033      	b.n	110be <isr_rx_conn_pkt_ctrl+0x17e>
		if (!_radio.conn_curr->role ||
   11056:	4ba6      	ldr	r3, [pc, #664]	; (112f0 <isr_rx_conn_pkt_ctrl+0x3b0>)
   11058:	f8d3 5cfc 	ldr.w	r5, [r3, #3324]	; 0xcfc
   1105c:	f995 301d 	ldrsb.w	r3, [r5, #29]
   11060:	2b00      	cmp	r3, #0
   11062:	f280 87ee 	bge.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
   11066:	7a41      	ldrb	r1, [r0, #9]
   11068:	2001      	movs	r0, #1
   1106a:	f7fc f9d5 	bl	d418 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   1106e:	2800      	cmp	r0, #0
   11070:	f000 87e7 	beq.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
   11074:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
   11078:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
   1107a:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
   1107c:	041f      	lsls	r7, r3, #16
   1107e:	f100 87f6 	bmi.w	1206e <isr_rx_conn_pkt_ctrl+0x112e>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11082:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   11086:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   1108a:	429a      	cmp	r2, r3
   1108c:	d19a      	bne.n	10fc4 <isr_rx_conn_pkt_ctrl+0x84>
	memcpy(&conn->llcp.chan_map.chm[0],
   1108e:	2205      	movs	r2, #5
   11090:	f104 010c 	add.w	r1, r4, #12
   11094:	f105 0079 	add.w	r0, r5, #121	; 0x79
   11098:	f7ef fc27 	bl	8ea <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
   1109c:	7c63      	ldrb	r3, [r4, #17]
   1109e:	7ca2      	ldrb	r2, [r4, #18]
   110a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
   110a4:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
   110a8:	2302      	movs	r3, #2
   110aa:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
   110ae:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
   110b2:	2000      	movs	r0, #0
	conn->llcp_ack--;
   110b4:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
   110b6:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
   110ba:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
}
   110be:	b003      	add	sp, #12
   110c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   110c4:	7a41      	ldrb	r1, [r0, #9]
   110c6:	2002      	movs	r0, #2
   110c8:	f7fc f9a6 	bl	d418 <pdu_len_cmp>
   110cc:	2800      	cmp	r0, #0
   110ce:	f000 87b8 	beq.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		_radio.conn_curr->llcp_terminate.reason_peer =
   110d2:	4b87      	ldr	r3, [pc, #540]	; (112f0 <isr_rx_conn_pkt_ctrl+0x3b0>)
   110d4:	7b22      	ldrb	r2, [r4, #12]
   110d6:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
   110da:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   110de:	2000      	movs	r0, #0
	return nack;
   110e0:	e7ed      	b.n	110be <isr_rx_conn_pkt_ctrl+0x17e>
		if (!_radio.conn_curr->role ||
   110e2:	4e83      	ldr	r6, [pc, #524]	; (112f0 <isr_rx_conn_pkt_ctrl+0x3b0>)
   110e4:	f8d6 8cfc 	ldr.w	r8, [r6, #3324]	; 0xcfc
   110e8:	f998 301d 	ldrsb.w	r3, [r8, #29]
   110ec:	2b00      	cmp	r3, #0
   110ee:	f280 87a8 	bge.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
   110f2:	7a41      	ldrb	r1, [r0, #9]
   110f4:	2003      	movs	r0, #3
   110f6:	f7fc f98f 	bl	d418 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   110fa:	2800      	cmp	r0, #0
   110fc:	f000 87a1 	beq.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   11100:	2208      	movs	r2, #8
   11102:	f104 0116 	add.w	r1, r4, #22
   11106:	f108 0094 	add.w	r0, r8, #148	; 0x94
   1110a:	f7ef fbee 	bl	8ea <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   1110e:	f8d6 0cfc 	ldr.w	r0, [r6, #3324]	; 0xcfc
   11112:	2204      	movs	r2, #4
   11114:	f104 011e 	add.w	r1, r4, #30
   11118:	f500 7089 	add.w	r0, r0, #274	; 0x112
   1111c:	f7ef fbe5 	bl	8ea <memcpy>
		_radio.conn_curr->pause_rx = 1;
   11120:	f8d6 3cfc 	ldr.w	r3, [r6, #3324]	; 0xcfc
   11124:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   11128:	f042 0204 	orr.w	r2, r2, #4
   1112c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   11130:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
   11134:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
   11138:	2301      	movs	r3, #1
   1113a:	702b      	strb	r3, [r5, #0]
   1113c:	e7cf      	b.n	110de <isr_rx_conn_pkt_ctrl+0x19e>
		if (_radio.conn_curr->role ||
   1113e:	4d6c      	ldr	r5, [pc, #432]	; (112f0 <isr_rx_conn_pkt_ctrl+0x3b0>)
   11140:	f8d5 6cfc 	ldr.w	r6, [r5, #3324]	; 0xcfc
   11144:	f996 301d 	ldrsb.w	r3, [r6, #29]
   11148:	2b00      	cmp	r3, #0
   1114a:	f2c0 877a 	blt.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
   1114e:	7a41      	ldrb	r1, [r0, #9]
   11150:	2004      	movs	r0, #4
   11152:	f7fc f961 	bl	d418 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   11156:	2800      	cmp	r0, #0
   11158:	f000 8773 	beq.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
   1115c:	2208      	movs	r2, #8
   1115e:	f104 010c 	add.w	r1, r4, #12
   11162:	f106 009c 	add.w	r0, r6, #156	; 0x9c
   11166:	f7ef fbc0 	bl	8ea <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
   1116a:	f8d5 0cfc 	ldr.w	r0, [r5, #3324]	; 0xcfc
   1116e:	2204      	movs	r2, #4
   11170:	f104 0114 	add.w	r1, r4, #20
   11174:	f500 708b 	add.w	r0, r0, #278	; 0x116
   11178:	f7ef fbb7 	bl	8ea <memcpy>
		_radio.conn_curr->pause_rx = 1;
   1117c:	f8d5 2cfc 	ldr.w	r2, [r5, #3324]	; 0xcfc
   11180:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   11184:	f043 0304 	orr.w	r3, r3, #4
   11188:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
   1118c:	e7a7      	b.n	110de <isr_rx_conn_pkt_ctrl+0x19e>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
   1118e:	4b58      	ldr	r3, [pc, #352]	; (112f0 <isr_rx_conn_pkt_ctrl+0x3b0>)
   11190:	f8d3 5cfc 	ldr.w	r5, [r3, #3324]	; 0xcfc
   11194:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
   11198:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   1119c:	42b3      	cmp	r3, r6
   1119e:	d004      	beq.n	111aa <isr_rx_conn_pkt_ctrl+0x26a>
   111a0:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
   111a4:	2b03      	cmp	r3, #3
   111a6:	f47f af0d 	bne.w	10fc4 <isr_rx_conn_pkt_ctrl+0x84>
		if (_radio.conn_curr->role ||
   111aa:	f995 301d 	ldrsb.w	r3, [r5, #29]
   111ae:	2b00      	cmp	r3, #0
   111b0:	f2c0 8747 	blt.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
   111b4:	7a61      	ldrb	r1, [r4, #9]
   111b6:	2005      	movs	r0, #5
   111b8:	f7fc f92e 	bl	d418 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   111bc:	2800      	cmp	r0, #0
   111be:	f000 8740 	beq.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		_radio.conn_curr->llcp.encryption.initiate = 0;
   111c2:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   111c4:	2303      	movs	r3, #3
		_radio.conn_curr->llcp_ack--;
   111c6:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp.encryption.initiate = 0;
   111c8:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   111cc:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
   111d0:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		break;
   111d4:	e773      	b.n	110be <isr_rx_conn_pkt_ctrl+0x17e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   111d6:	7a41      	ldrb	r1, [r0, #9]
   111d8:	2006      	movs	r0, #6
   111da:	f7fc f91d 	bl	d418 <pdu_len_cmp>
   111de:	2800      	cmp	r0, #0
   111e0:	f000 872f 	beq.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		if (_radio.role == ROLE_SLAVE) {
   111e4:	4b42      	ldr	r3, [pc, #264]	; (112f0 <isr_rx_conn_pkt_ctrl+0x3b0>)
   111e6:	7cda      	ldrb	r2, [r3, #19]
   111e8:	2a03      	cmp	r2, #3
   111ea:	4619      	mov	r1, r3
   111ec:	d125      	bne.n	1123a <isr_rx_conn_pkt_ctrl+0x2fa>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
   111ee:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
   111f2:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
   111f6:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
   111fa:	4290      	cmp	r0, r2
   111fc:	d004      	beq.n	11208 <isr_rx_conn_pkt_ctrl+0x2c8>
   111fe:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   11202:	2803      	cmp	r0, #3
   11204:	f47f aede 	bne.w	10fc4 <isr_rx_conn_pkt_ctrl+0x84>
			_radio.conn_curr->llcp.encryption.initiate = 0;
   11208:	2000      	movs	r0, #0
   1120a:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
   1120e:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   11210:	2003      	movs	r0, #3
   11212:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
   11216:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
   1121a:	f8d1 2cfc 	ldr.w	r2, [r1, #3324]	; 0xcfc
   1121e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   11222:	065e      	lsls	r6, r3, #25
   11224:	d505      	bpl.n	11232 <isr_rx_conn_pkt_ctrl+0x2f2>
			_radio.conn_curr->refresh = 0;
   11226:	f36f 1386 	bfc	r3, #6, #1
   1122a:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   1122e:	2309      	movs	r3, #9
   11230:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
   11232:	2301      	movs	r3, #1
   11234:	702b      	strb	r3, [r5, #0]
				break;
   11236:	f000 bc7d 	b.w	11b34 <isr_rx_conn_pkt_ctrl+0xbf4>
			_radio.conn_curr->pause_rx = 0;
   1123a:	f8d3 2cfc 	ldr.w	r2, [r3, #3324]	; 0xcfc
   1123e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   11242:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   11246:	f36f 03c3 	bfc	r3, #3, #1
   1124a:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
   1124e:	e7e4      	b.n	1121a <isr_rx_conn_pkt_ctrl+0x2da>
		if (!_radio.conn_curr->role ||
   11250:	4b27      	ldr	r3, [pc, #156]	; (112f0 <isr_rx_conn_pkt_ctrl+0x3b0>)
   11252:	f8d3 5cfc 	ldr.w	r5, [r3, #3324]	; 0xcfc
   11256:	f995 301d 	ldrsb.w	r3, [r5, #29]
   1125a:	2b00      	cmp	r3, #0
   1125c:	f280 86f1 	bge.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
   11260:	7a41      	ldrb	r1, [r0, #9]
   11262:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
   11264:	f7fc f8d8 	bl	d418 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   11268:	2800      	cmp	r0, #0
   1126a:	f000 86ea 	beq.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
   1126e:	4631      	mov	r1, r6
   11270:	4628      	mov	r0, r5
}
   11272:	b003      	add	sp, #12
   11274:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
   11278:	f7fe ba64 	b.w	f744 <feature_rsp_send>
		if (_radio.conn_curr->role ||
   1127c:	4b1c      	ldr	r3, [pc, #112]	; (112f0 <isr_rx_conn_pkt_ctrl+0x3b0>)
   1127e:	f8d3 5cfc 	ldr.w	r5, [r3, #3324]	; 0xcfc
   11282:	f995 301d 	ldrsb.w	r3, [r5, #29]
   11286:	2b00      	cmp	r3, #0
   11288:	f2c0 86db 	blt.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
   1128c:	7a41      	ldrb	r1, [r0, #9]
   1128e:	200e      	movs	r0, #14
   11290:	e7e8      	b.n	11264 <isr_rx_conn_pkt_ctrl+0x324>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
   11292:	7a41      	ldrb	r1, [r0, #9]
   11294:	2009      	movs	r0, #9
   11296:	f7fc f8bf 	bl	d418 <pdu_len_cmp>
   1129a:	2800      	cmp	r0, #0
   1129c:	f000 86d1 	beq.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   112a0:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
   112a2:	7b61      	ldrb	r1, [r4, #13]
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   112a4:	4812      	ldr	r0, [pc, #72]	; (112f0 <isr_rx_conn_pkt_ctrl+0x3b0>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   112a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   112aa:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   112ae:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   112b2:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   112b6:	f8d0 2cfc 	ldr.w	r2, [r0, #3324]	; 0xcfc
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   112ba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   112be:	7ba1      	ldrb	r1, [r4, #14]
   112c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   112c4:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
   112c8:	f3c1 0110 	ubfx	r1, r1, #0, #17
   112cc:	400b      	ands	r3, r1
   112ce:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   112d2:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   112d6:	f043 0320 	orr.w	r3, r3, #32
   112da:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		*rx_enqueue = 1;
   112de:	2301      	movs	r3, #1
   112e0:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
   112e2:	f8d0 3cfc 	ldr.w	r3, [r0, #3324]	; 0xcfc
		_radio.conn_curr->procedure_expire = 0;
   112e6:	2000      	movs	r0, #0
   112e8:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
   112ec:	e6e7      	b.n	110be <isr_rx_conn_pkt_ctrl+0x17e>
   112ee:	bf00      	nop
   112f0:	20000bb0 	.word	0x20000bb0
		if (!_radio.conn_curr->role ||
   112f4:	4ed0      	ldr	r6, [pc, #832]	; (11638 <isr_rx_conn_pkt_ctrl+0x6f8>)
   112f6:	f8d6 5cfc 	ldr.w	r5, [r6, #3324]	; 0xcfc
   112fa:	f995 301d 	ldrsb.w	r3, [r5, #29]
   112fe:	2b00      	cmp	r3, #0
   11300:	f280 869f 	bge.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
   11304:	7a41      	ldrb	r1, [r0, #9]
   11306:	200a      	movs	r0, #10
   11308:	f7fc f886 	bl	d418 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   1130c:	2800      	cmp	r0, #0
   1130e:	f000 8698 	beq.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11312:	f606 5044 	addw	r0, r6, #3396	; 0xd44
   11316:	f7f9 fb88 	bl	aa2a <mem_acquire>
		if (!node_tx) {
   1131a:	4601      	mov	r1, r0
   1131c:	b908      	cbnz	r0, 11322 <isr_rx_conn_pkt_ctrl+0x3e2>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   1131e:	2001      	movs	r0, #1
   11320:	e6cd      	b.n	110be <isr_rx_conn_pkt_ctrl+0x17e>
		conn->refresh = 1;
   11322:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
   11326:	f043 0344 	orr.w	r3, r3, #68	; 0x44
   1132a:	f36f 1304 	bfc	r3, #4, #1
   1132e:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11332:	7903      	ldrb	r3, [r0, #4]
   11334:	f043 0303 	orr.w	r3, r3, #3
   11338:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1133a:	2301      	movs	r3, #1
   1133c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   1133e:	230b      	movs	r3, #11
   11340:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   11342:	4628      	mov	r0, r5
   11344:	f000 bca0 	b.w	11c88 <isr_rx_conn_pkt_ctrl+0xd48>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   11348:	7a41      	ldrb	r1, [r0, #9]
   1134a:	200b      	movs	r0, #11
   1134c:	f7fc f864 	bl	d418 <pdu_len_cmp>
   11350:	2800      	cmp	r0, #0
   11352:	f000 8676 	beq.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		nack = pause_enc_rsp_send(_radio.conn_curr, 0);
   11356:	48b8      	ldr	r0, [pc, #736]	; (11638 <isr_rx_conn_pkt_ctrl+0x6f8>)
   11358:	f8d0 4cfc 	ldr.w	r4, [r0, #3324]	; 0xcfc
	} else if (!conn->role) {
   1135c:	f994 301d 	ldrsb.w	r3, [r4, #29]
   11360:	2b00      	cmp	r3, #0
   11362:	db1b      	blt.n	1139c <isr_rx_conn_pkt_ctrl+0x45c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11364:	f600 5044 	addw	r0, r0, #3396	; 0xd44
   11368:	f7f9 fb5f 	bl	aa2a <mem_acquire>
		if (!node_tx) {
   1136c:	4601      	mov	r1, r0
   1136e:	2800      	cmp	r0, #0
   11370:	d0d5      	beq.n	1131e <isr_rx_conn_pkt_ctrl+0x3de>
		conn->enc_tx = 0;
   11372:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
   11376:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
   1137a:	f043 0304 	orr.w	r3, r3, #4
   1137e:	f36f 1304 	bfc	r3, #4, #1
   11382:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11386:	7903      	ldrb	r3, [r0, #4]
   11388:	f043 0303 	orr.w	r3, r3, #3
   1138c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1138e:	2301      	movs	r3, #1
   11390:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   11392:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   11394:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
   11396:	4620      	mov	r0, r4
   11398:	f000 bc76 	b.w	11c88 <isr_rx_conn_pkt_ctrl+0xd48>
		conn->enc_tx = 0;
   1139c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   113a0:	f36f 1345 	bfc	r3, #5, #1
   113a4:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
   113a8:	e699      	b.n	110de <isr_rx_conn_pkt_ctrl+0x19e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   113aa:	7a41      	ldrb	r1, [r0, #9]
   113ac:	200c      	movs	r0, #12
   113ae:	f7fc f833 	bl	d418 <pdu_len_cmp>
   113b2:	2800      	cmp	r0, #0
   113b4:	f000 8645 	beq.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		nack = version_ind_send(_radio.conn_curr, pdu_data_rx,
   113b8:	489f      	ldr	r0, [pc, #636]	; (11638 <isr_rx_conn_pkt_ctrl+0x6f8>)
   113ba:	f8d0 6cfc 	ldr.w	r6, [r0, #3324]	; 0xcfc
	if (!conn->llcp_version.tx) {
   113be:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
   113c2:	f013 0701 	ands.w	r7, r3, #1
   113c6:	d150      	bne.n	1146a <isr_rx_conn_pkt_ctrl+0x52a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   113c8:	f600 5044 	addw	r0, r0, #3396	; 0xd44
   113cc:	f7f9 fb2d 	bl	aa2a <mem_acquire>
		if (!node_tx) {
   113d0:	4601      	mov	r1, r0
   113d2:	2800      	cmp	r0, #0
   113d4:	d0a3      	beq.n	1131e <isr_rx_conn_pkt_ctrl+0x3de>
		conn->llcp_version.tx = 1;
   113d6:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
   113da:	f043 0301 	orr.w	r3, r3, #1
   113de:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   113e2:	7903      	ldrb	r3, [r0, #4]
   113e4:	f043 0303 	orr.w	r3, r3, #3
   113e8:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
   113ea:	2306      	movs	r3, #6
   113ec:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   113ee:	230c      	movs	r3, #12
   113f0:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
   113f2:	2309      	movs	r3, #9
   113f4:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
   113f6:	f06f 030e 	mvn.w	r3, #14
   113fa:	7243      	strb	r3, [r0, #9]
   113fc:	2305      	movs	r3, #5
   113fe:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
   11400:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11404:	72c3      	strb	r3, [r0, #11]
   11406:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
   11408:	4630      	mov	r0, r6
   1140a:	f7fe f981 	bl	f710 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
   1140e:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
   11412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11416:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
   1141a:	f005 ff97 	bl	1734c <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1141e:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
   11420:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   11422:	2201      	movs	r2, #1
   11424:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
   11428:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1142c:	7003      	strb	r3, [r0, #0]
   1142e:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
   11430:	b1c2      	cbz	r2, 11464 <isr_rx_conn_pkt_ctrl+0x524>
		pdu_data_tx->md = 1;
   11432:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
   11436:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
   11438:	7b23      	ldrb	r3, [r4, #12]
   1143a:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
   1143e:	7ba2      	ldrb	r2, [r4, #14]
   11440:	7b63      	ldrb	r3, [r4, #13]
   11442:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   11446:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
   1144a:	7be3      	ldrb	r3, [r4, #15]
   1144c:	7c22      	ldrb	r2, [r4, #16]
   1144e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   11452:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
   11456:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
   1145a:	f043 0302 	orr.w	r3, r3, #2
   1145e:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
   11462:	e63c      	b.n	110de <isr_rx_conn_pkt_ctrl+0x19e>
		pdu_data_tx->md = 0;
   11464:	f362 1304 	bfi	r3, r2, #4, #1
   11468:	e7e5      	b.n	11436 <isr_rx_conn_pkt_ctrl+0x4f6>
	} else if (!conn->llcp_version.rx) {
   1146a:	f013 0302 	ands.w	r3, r3, #2
   1146e:	f47f ae36 	bne.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
		conn->procedure_expire = 0;
   11472:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
   11476:	2301      	movs	r3, #1
   11478:	702b      	strb	r3, [r5, #0]
   1147a:	e7dd      	b.n	11438 <isr_rx_conn_pkt_ctrl+0x4f8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
   1147c:	7a41      	ldrb	r1, [r0, #9]
   1147e:	200d      	movs	r0, #13
   11480:	f7fb ffca 	bl	d418 <pdu_len_cmp>
   11484:	2800      	cmp	r0, #0
   11486:	f000 85dc 	beq.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		_radio.conn_curr->pause_rx = 0;
   1148a:	4b6b      	ldr	r3, [pc, #428]	; (11638 <isr_rx_conn_pkt_ctrl+0x6f8>)
   1148c:	f8d3 2cfc 	ldr.w	r2, [r3, #3324]	; 0xcfc
   11490:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   11494:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   11498:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
   1149c:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
   1149e:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   114a2:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
   114a6:	2301      	movs	r3, #1
   114a8:	702b      	strb	r3, [r5, #0]
   114aa:	e608      	b.n	110be <isr_rx_conn_pkt_ctrl+0x17e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   114ac:	7a41      	ldrb	r1, [r0, #9]
   114ae:	200f      	movs	r0, #15
   114b0:	f7fb ffb2 	bl	d418 <pdu_len_cmp>
   114b4:	2800      	cmp	r0, #0
   114b6:	f000 85c4 	beq.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
   114ba:	4b5f      	ldr	r3, [pc, #380]	; (11638 <isr_rx_conn_pkt_ctrl+0x6f8>)
   114bc:	f8d3 1d70 	ldr.w	r1, [r3, #3440]	; 0xd70
   114c0:	461a      	mov	r2, r3
   114c2:	b151      	cbz	r1, 114da <isr_rx_conn_pkt_ctrl+0x59a>
   114c4:	f8d3 0cfc 	ldr.w	r0, [r3, #3324]	; 0xcfc
   114c8:	4281      	cmp	r1, r0
   114ca:	d006      	beq.n	114da <isr_rx_conn_pkt_ctrl+0x59a>
			nack = reject_ext_ind_send(_radio.conn_curr,
   114cc:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
   114ce:	210f      	movs	r1, #15
}
   114d0:	b003      	add	sp, #12
   114d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
   114d6:	f7fe b99f 	b.w	f818 <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
   114da:	f8d2 0cfc 	ldr.w	r0, [r2, #3324]	; 0xcfc
   114de:	f990 301d 	ldrsb.w	r3, [r0, #29]
   114e2:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
   114e6:	2b00      	cmp	r3, #0
   114e8:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   114ec:	f2c0 80a6 	blt.w	1163c <isr_rx_conn_pkt_ctrl+0x6fc>
			if ((conn->llcp_conn_param.req !=
   114f0:	4299      	cmp	r1, r3
   114f2:	d009      	beq.n	11508 <isr_rx_conn_pkt_ctrl+0x5c8>
			    ((conn->llcp_conn_param.state ==
   114f4:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
   114f8:	f013 0307 	ands.w	r3, r3, #7
   114fc:	d002      	beq.n	11504 <isr_rx_conn_pkt_ctrl+0x5c4>
			      LLCP_CPR_STATE_REQ) ||
   114fe:	3b04      	subs	r3, #4
   11500:	2b01      	cmp	r3, #1
   11502:	d801      	bhi.n	11508 <isr_rx_conn_pkt_ctrl+0x5c8>
				nack = reject_ext_ind_send(_radio.conn_curr,
   11504:	2223      	movs	r2, #35	; 0x23
   11506:	e7e2      	b.n	114ce <isr_rx_conn_pkt_ctrl+0x58e>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
   11508:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   1150c:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11510:	4299      	cmp	r1, r3
   11512:	d003      	beq.n	1151c <isr_rx_conn_pkt_ctrl+0x5dc>
   11514:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
   11518:	2b03      	cmp	r3, #3
   1151a:	d105      	bne.n	11528 <isr_rx_conn_pkt_ctrl+0x5e8>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   1151c:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
   11520:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
   11524:	4299      	cmp	r1, r3
   11526:	d001      	beq.n	1152c <isr_rx_conn_pkt_ctrl+0x5ec>
				nack = reject_ext_ind_send(_radio.conn_curr,
   11528:	222a      	movs	r2, #42	; 0x2a
   1152a:	e7d0      	b.n	114ce <isr_rx_conn_pkt_ctrl+0x58e>
				if ((cpr->interval_min < 6) ||
   1152c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   11530:	4643      	mov	r3, r8
   11532:	2b05      	cmp	r3, #5
   11534:	d91b      	bls.n	1156e <isr_rx_conn_pkt_ctrl+0x62e>
				    (cpr->interval_max > 3200) ||
   11536:	89e7      	ldrh	r7, [r4, #14]
				if ((cpr->interval_min < 6) ||
   11538:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   1153c:	d817      	bhi.n	1156e <isr_rx_conn_pkt_ctrl+0x62e>
				    (cpr->interval_max > 3200) ||
   1153e:	45b8      	cmp	r8, r7
   11540:	d815      	bhi.n	1156e <isr_rx_conn_pkt_ctrl+0x62e>
				    (cpr->latency > 499) ||
   11542:	f8b4 c010 	ldrh.w	ip, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
   11546:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   1154a:	d210      	bcs.n	1156e <isr_rx_conn_pkt_ctrl+0x62e>
				    (cpr->timeout < 10) ||
   1154c:	f8b4 e012 	ldrh.w	lr, [r4, #18]
				    (cpr->latency > 499) ||
   11550:	f1ae 060a 	sub.w	r6, lr, #10
   11554:	b2b6      	uxth	r6, r6
   11556:	f640 4976 	movw	r9, #3190	; 0xc76
   1155a:	454e      	cmp	r6, r9
   1155c:	d807      	bhi.n	1156e <isr_rx_conn_pkt_ctrl+0x62e>
				     ((cpr->latency + 1) *
   1155e:	fb0c 7107 	mla	r1, ip, r7, r7
				    (cpr->timeout > 3200) ||
   11562:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
   11566:	da02      	bge.n	1156e <isr_rx_conn_pkt_ctrl+0x62e>
				    (cpr->preferred_periodicity >
   11568:	7d21      	ldrb	r1, [r4, #20]
				      cpr->interval_max)) ||
   1156a:	428f      	cmp	r7, r1
   1156c:	d201      	bcs.n	11572 <isr_rx_conn_pkt_ctrl+0x632>
				nack = reject_ext_ind_send(conn,
   1156e:	221e      	movs	r2, #30
   11570:	e7ad      	b.n	114ce <isr_rx_conn_pkt_ctrl+0x58e>
				conn->llcp_conn_param.interval = cpr->interval_min;
   11572:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
   11576:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
   1157a:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.preferred_periodicity =
   1157e:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
					cpr->reference_conn_event_count;
   11582:	7da6      	ldrb	r6, [r4, #22]
   11584:	7d61      	ldrb	r1, [r4, #21]
   11586:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   1158a:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
   1158e:	7e26      	ldrb	r6, [r4, #24]
   11590:	7de1      	ldrb	r1, [r4, #23]
   11592:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   11596:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
   1159a:	7ea6      	ldrb	r6, [r4, #26]
   1159c:	7e61      	ldrb	r1, [r4, #25]
   1159e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   115a2:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
   115a6:	7f26      	ldrb	r6, [r4, #28]
   115a8:	7ee1      	ldrb	r1, [r4, #27]
   115aa:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   115ae:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
   115b2:	7fa6      	ldrb	r6, [r4, #30]
   115b4:	7f61      	ldrb	r1, [r4, #29]
   115b6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   115ba:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
   115be:	7fe1      	ldrb	r1, [r4, #31]
   115c0:	f894 6020 	ldrb.w	r6, [r4, #32]
   115c4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   115c8:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
   115cc:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   115d0:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
   115d4:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
   115d8:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
				if ((conn->llcp_conn_param.interval !=
   115dc:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
   115e0:	6a41      	ldr	r1, [r0, #36]	; 0x24
   115e2:	428c      	cmp	r4, r1
   115e4:	d10f      	bne.n	11606 <isr_rx_conn_pkt_ctrl+0x6c6>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   115e6:	8c84      	ldrh	r4, [r0, #36]	; 0x24
   115e8:	f240 41e2 	movw	r1, #1250	; 0x4e2
   115ec:	4361      	muls	r1, r4
   115ee:	f242 7410 	movw	r4, #10000	; 0x2710
   115f2:	fb04 130e 	mla	r3, r4, lr, r1
   115f6:	3b01      	subs	r3, #1
   115f8:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
   115fc:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   115fe:	b29b      	uxth	r3, r3
   11600:	4299      	cmp	r1, r3
   11602:	f000 8095 	beq.w	11730 <isr_rx_conn_pkt_ctrl+0x7f0>
					if (conn->pause_tx) {
   11606:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   1160a:	071c      	lsls	r4, r3, #28
   1160c:	f140 808a 	bpl.w	11724 <isr_rx_conn_pkt_ctrl+0x7e4>
						conn->llcp_conn_param.state =
   11610:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   11614:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
   11616:	f361 0302 	bfi	r3, r1, #0, #3
   1161a:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
   1161e:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   11622:	3b01      	subs	r3, #1
   11624:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
   11628:	f8d2 3d70 	ldr.w	r3, [r2, #3440]	; 0xd70
   1162c:	2b00      	cmp	r3, #0
   1162e:	f47f ad56 	bne.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
				_radio.conn_upd = conn;
   11632:	f8c2 0d70 	str.w	r0, [r2, #3440]	; 0xd70
   11636:	e552      	b.n	110de <isr_rx_conn_pkt_ctrl+0x19e>
   11638:	20000bb0 	.word	0x20000bb0
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   1163c:	4299      	cmp	r1, r3
   1163e:	d004      	beq.n	1164a <isr_rx_conn_pkt_ctrl+0x70a>
			    _radio.conn_curr->llcp_conn_param.ack) ||
   11640:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   11644:	0799      	lsls	r1, r3, #30
   11646:	f47f acbd 	bne.w	10fc4 <isr_rx_conn_pkt_ctrl+0x84>
			if ((cpr->interval_min < 6) ||
   1164a:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   1164e:	4643      	mov	r3, r8
   11650:	2b05      	cmp	r3, #5
   11652:	d98c      	bls.n	1156e <isr_rx_conn_pkt_ctrl+0x62e>
			    (cpr->interval_max > 3200) ||
   11654:	89e7      	ldrh	r7, [r4, #14]
			if ((cpr->interval_min < 6) ||
   11656:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   1165a:	d888      	bhi.n	1156e <isr_rx_conn_pkt_ctrl+0x62e>
			    (cpr->interval_max > 3200) ||
   1165c:	45b8      	cmp	r8, r7
   1165e:	d886      	bhi.n	1156e <isr_rx_conn_pkt_ctrl+0x62e>
			    (cpr->latency > 499) ||
   11660:	f8b4 c010 	ldrh.w	ip, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   11664:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   11668:	d281      	bcs.n	1156e <isr_rx_conn_pkt_ctrl+0x62e>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   1166a:	f8b4 e012 	ldrh.w	lr, [r4, #18]
			    (cpr->latency > 499) ||
   1166e:	f1ae 060a 	sub.w	r6, lr, #10
   11672:	b2b6      	uxth	r6, r6
   11674:	f640 4976 	movw	r9, #3190	; 0xc76
   11678:	454e      	cmp	r6, r9
   1167a:	f63f af78 	bhi.w	1156e <isr_rx_conn_pkt_ctrl+0x62e>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   1167e:	fb0c 7107 	mla	r1, ip, r7, r7
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   11682:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
   11686:	f6bf af72 	bge.w	1156e <isr_rx_conn_pkt_ctrl+0x62e>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   1168a:	7d21      	ldrb	r1, [r4, #20]
						    cpr->interval_max)) ||
   1168c:	428f      	cmp	r7, r1
   1168e:	f4ff af6e 	bcc.w	1156e <isr_rx_conn_pkt_ctrl+0x62e>
			conn->llcp_conn_param.interval = cpr->interval_min;
   11692:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   11696:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   1169a:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
   1169e:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
				cpr->reference_conn_event_count;
   116a2:	7da6      	ldrb	r6, [r4, #22]
   116a4:	7d61      	ldrb	r1, [r4, #21]
   116a6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   116aa:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   116ae:	7e26      	ldrb	r6, [r4, #24]
   116b0:	7de1      	ldrb	r1, [r4, #23]
   116b2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   116b6:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   116ba:	7ea6      	ldrb	r6, [r4, #26]
   116bc:	7e61      	ldrb	r1, [r4, #25]
   116be:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   116c2:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   116c6:	7f26      	ldrb	r6, [r4, #28]
   116c8:	7ee1      	ldrb	r1, [r4, #27]
   116ca:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   116ce:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   116d2:	7fa6      	ldrb	r6, [r4, #30]
   116d4:	7f61      	ldrb	r1, [r4, #29]
   116d6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   116da:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   116de:	7fe1      	ldrb	r1, [r4, #31]
   116e0:	f894 6020 	ldrb.w	r6, [r4, #32]
   116e4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   116e8:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   116ec:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   116f0:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
   116f4:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
   116f8:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
			if ((conn->llcp_conn_param.interval !=
   116fc:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
   11700:	6a41      	ldr	r1, [r0, #36]	; 0x24
   11702:	428c      	cmp	r4, r1
   11704:	d10e      	bne.n	11724 <isr_rx_conn_pkt_ctrl+0x7e4>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   11706:	8c84      	ldrh	r4, [r0, #36]	; 0x24
   11708:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1170c:	4361      	muls	r1, r4
   1170e:	f242 7410 	movw	r4, #10000	; 0x2710
   11712:	fb04 130e 	mla	r3, r4, lr, r1
   11716:	3b01      	subs	r3, #1
   11718:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
   1171c:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   1171e:	b29b      	uxth	r3, r3
   11720:	4299      	cmp	r1, r3
   11722:	d005      	beq.n	11730 <isr_rx_conn_pkt_ctrl+0x7f0>
				*rx_enqueue = 1;
   11724:	2301      	movs	r3, #1
   11726:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
   11728:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   1172c:	2103      	movs	r1, #3
   1172e:	e772      	b.n	11616 <isr_rx_conn_pkt_ctrl+0x6d6>
				conn->llcp_conn_param.status = 0;
   11730:	2300      	movs	r3, #0
   11732:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
   11736:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
   1173a:	2101      	movs	r1, #1
   1173c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   11740:	e769      	b.n	11616 <isr_rx_conn_pkt_ctrl+0x6d6>
		if (_radio.conn_curr->role ||
   11742:	4bc1      	ldr	r3, [pc, #772]	; (11a48 <isr_rx_conn_pkt_ctrl+0xb08>)
   11744:	f8d3 5cfc 	ldr.w	r5, [r3, #3324]	; 0xcfc
   11748:	f995 301d 	ldrsb.w	r3, [r5, #29]
   1174c:	2b00      	cmp	r3, #0
   1174e:	f2c0 8478 	blt.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
   11752:	7a41      	ldrb	r1, [r0, #9]
   11754:	2010      	movs	r0, #16
   11756:	f7fb fe5f 	bl	d418 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   1175a:	2800      	cmp	r0, #0
   1175c:	f000 8471 	beq.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		if (!_radio.conn_curr->role &&
   11760:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
   11764:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   11768:	429a      	cmp	r2, r3
   1176a:	f43f acb8 	beq.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
		    (_radio.conn_curr->llcp_conn_param.state ==
   1176e:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
   11772:	f003 0307 	and.w	r3, r3, #7
   11776:	2b04      	cmp	r3, #4
   11778:	f47f acb1 	bne.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
			if ((cpr->interval_min < 6) ||
   1177c:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   11780:	fa1f f28e 	uxth.w	r2, lr
   11784:	2a05      	cmp	r2, #5
   11786:	d91b      	bls.n	117c0 <isr_rx_conn_pkt_ctrl+0x880>
			    (cpr->interval_max > 3200) ||
   11788:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   1178a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1178e:	d817      	bhi.n	117c0 <isr_rx_conn_pkt_ctrl+0x880>
			    (cpr->interval_max > 3200) ||
   11790:	429a      	cmp	r2, r3
   11792:	d815      	bhi.n	117c0 <isr_rx_conn_pkt_ctrl+0x880>
			    (cpr->latency > 499) ||
   11794:	8a27      	ldrh	r7, [r4, #16]
   11796:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
   11798:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   1179c:	d210      	bcs.n	117c0 <isr_rx_conn_pkt_ctrl+0x880>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   1179e:	8a66      	ldrh	r6, [r4, #18]
   117a0:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
   117a2:	f1a0 010a 	sub.w	r1, r0, #10
   117a6:	b289      	uxth	r1, r1
   117a8:	f640 4c76 	movw	ip, #3190	; 0xc76
   117ac:	4561      	cmp	r1, ip
   117ae:	d807      	bhi.n	117c0 <isr_rx_conn_pkt_ctrl+0x880>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   117b0:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   117b4:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
   117b8:	da02      	bge.n	117c0 <isr_rx_conn_pkt_ctrl+0x880>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   117ba:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   117bc:	4293      	cmp	r3, r2
   117be:	d203      	bcs.n	117c8 <isr_rx_conn_pkt_ctrl+0x888>
				nack = reject_ext_ind_send(conn,
   117c0:	221e      	movs	r2, #30
   117c2:	2110      	movs	r1, #16
   117c4:	4628      	mov	r0, r5
   117c6:	e683      	b.n	114d0 <isr_rx_conn_pkt_ctrl+0x590>
			_radio.conn_curr->procedure_expire = 0;
   117c8:	2000      	movs	r0, #0
   117ca:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
   117ce:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   117d2:	f8a5 70c6 	strh.w	r7, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   117d6:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
   117da:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   117de:	7da2      	ldrb	r2, [r4, #22]
   117e0:	7d63      	ldrb	r3, [r4, #21]
   117e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   117e6:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   117ea:	7e22      	ldrb	r2, [r4, #24]
   117ec:	7de3      	ldrb	r3, [r4, #23]
   117ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   117f2:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   117f6:	7ea2      	ldrb	r2, [r4, #26]
   117f8:	7e63      	ldrb	r3, [r4, #25]
   117fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   117fe:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   11802:	7f22      	ldrb	r2, [r4, #28]
   11804:	7ee3      	ldrb	r3, [r4, #27]
   11806:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1180a:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   1180e:	7fa2      	ldrb	r2, [r4, #30]
   11810:	7f63      	ldrb	r3, [r4, #29]
   11812:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   11816:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   1181a:	f894 2020 	ldrb.w	r2, [r4, #32]
   1181e:	7fe3      	ldrb	r3, [r4, #31]
   11820:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   11824:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   11828:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   1182c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   11830:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   11834:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   11838:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   1183c:	2201      	movs	r2, #1
   1183e:	f362 0302 	bfi	r3, r2, #0, #3
   11842:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   11846:	e43a      	b.n	110be <isr_rx_conn_pkt_ctrl+0x17e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   11848:	7a41      	ldrb	r1, [r0, #9]
   1184a:	2011      	movs	r0, #17
   1184c:	f7fb fde4 	bl	d418 <pdu_len_cmp>
   11850:	2800      	cmp	r0, #0
   11852:	f000 83f6 	beq.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
	} else if (_radio.conn_curr->llcp_phy.ack !=
   11856:	4a7c      	ldr	r2, [pc, #496]	; (11a48 <isr_rx_conn_pkt_ctrl+0xb08>)
   11858:	f8d2 3cfc 	ldr.w	r3, [r2, #3324]	; 0xcfc
   1185c:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
   11860:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
   11864:	4281      	cmp	r1, r0
   11866:	7b21      	ldrb	r1, [r4, #12]
   11868:	d027      	beq.n	118ba <isr_rx_conn_pkt_ctrl+0x97a>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
   1186a:	2916      	cmp	r1, #22
   1186c:	f47f ac37 	bne.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
		if (rej_ext_ind->error_code != 0x23) {
   11870:	7b61      	ldrb	r1, [r4, #13]
   11872:	2923      	cmp	r1, #35	; 0x23
   11874:	d00e      	beq.n	11894 <isr_rx_conn_pkt_ctrl+0x954>
				_radio.conn_curr->phy_tx;
   11876:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
   1187a:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   1187e:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
   11882:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   11886:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
   1188a:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
   1188c:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
   11890:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
   11894:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
   11898:	0792      	lsls	r2, r2, #30
   1189a:	f57f ac20 	bpl.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1189e:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
   118a0:	72e1      	strb	r1, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   118a2:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
   118a4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   118a8:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   118ac:	7322      	strb	r2, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
   118ae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   118b2:	f3c3 0302 	ubfx	r3, r3, #0, #3
   118b6:	7363      	strb	r3, [r4, #13]
   118b8:	e43e      	b.n	11138 <isr_rx_conn_pkt_ctrl+0x1f8>
		   _radio.conn_curr->llcp_conn_param.req) {
   118ba:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   118be:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
   118c2:	42b8      	cmp	r0, r7
   118c4:	d067      	beq.n	11996 <isr_rx_conn_pkt_ctrl+0xa56>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
   118c6:	290f      	cmp	r1, #15
   118c8:	f47f ac09 	bne.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
   118cc:	f993 001d 	ldrsb.w	r0, [r3, #29]
   118d0:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
   118d2:	2800      	cmp	r0, #0
   118d4:	db34      	blt.n	11940 <isr_rx_conn_pkt_ctrl+0xa00>
   118d6:	291a      	cmp	r1, #26
   118d8:	d132      	bne.n	11940 <isr_rx_conn_pkt_ctrl+0xa00>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   118da:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   118de:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
   118e2:	4294      	cmp	r4, r2
   118e4:	f47f ab6e 	bne.w	10fc4 <isr_rx_conn_pkt_ctrl+0x84>
				conn->llcp_conn_param.state =
   118e8:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   118ec:	2105      	movs	r1, #5
   118ee:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
   118f2:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
   118f6:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
   118fa:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
   118fe:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
   11902:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
   11906:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   1190a:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
   1190e:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
   11912:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
   11914:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   11918:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
   1191c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
   11920:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
   11922:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
   11926:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
   11928:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
   1192c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
   11930:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_type = LLCP_CONN_UPD;
   11934:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				conn->llcp_ack--;
   11938:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				break;
   1193c:	f7ff bbbf 	b.w	110be <isr_rx_conn_pkt_ctrl+0x17e>
	else if (rej_ext_ind->error_code != 0x23) {
   11940:	2923      	cmp	r1, #35	; 0x23
   11942:	d011      	beq.n	11968 <isr_rx_conn_pkt_ctrl+0xa28>
		LL_ASSERT(_radio.conn_upd == conn);
   11944:	f8d2 6d70 	ldr.w	r6, [r2, #3440]	; 0xd70
   11948:	42b3      	cmp	r3, r6
   1194a:	f47f ab3b 	bne.w	10fc4 <isr_rx_conn_pkt_ctrl+0x84>
		_radio.conn_upd = NULL;
   1194e:	2600      	movs	r6, #0
		if (conn->role) {
   11950:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
   11952:	f8c2 6d70 	str.w	r6, [r2, #3440]	; 0xd70
			conn->slave.ticks_to_offset =
   11956:	bfb8      	it	lt
   11958:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
   1195c:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
   11960:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
   11964:	bfb8      	it	lt
   11966:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
   11968:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   1196c:	0717      	lsls	r7, r2, #28
   1196e:	f57f abb6 	bpl.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
	cp->status = rej_ext_ind->error_code;
   11972:	72e1      	strb	r1, [r4, #11]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   11974:	2208      	movs	r2, #8
	cp->latency = conn->latency;
   11976:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   11978:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
   1197a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
   1197c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
   1197e:	81a2      	strh	r2, [r4, #12]
	cp->timeout = conn->supervision_reload *
   11980:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
   11982:	237d      	movs	r3, #125	; 0x7d
   11984:	4353      	muls	r3, r2
	cp->latency = conn->latency;
   11986:	81e1      	strh	r1, [r4, #14]
	cp->timeout = conn->supervision_reload *
   11988:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1198c:	fb93 f3f2 	sdiv	r3, r3, r2
   11990:	8223      	strh	r3, [r4, #16]
   11992:	f7ff bbd1 	b.w	11138 <isr_rx_conn_pkt_ctrl+0x1f8>
		   _radio.conn_curr->llcp_length.req) {
   11996:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
   1199a:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
   1199e:	4290      	cmp	r0, r2
   119a0:	d01a      	beq.n	119d8 <isr_rx_conn_pkt_ctrl+0xa98>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   119a2:	2914      	cmp	r1, #20
   119a4:	f47f ab9b 	bne.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
		conn->llcp_length.ack = conn->llcp_length.req;
   119a8:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->pause_tx = 0;
   119ac:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
		conn->procedure_expire = 0;
   119b0:	2000      	movs	r0, #0
		conn->pause_tx = 0;
   119b2:	f360 02c3 	bfi	r2, r0, #3, #1
   119b6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
   119ba:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
   119bc:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
   119c0:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   119c2:	2215      	movs	r2, #21
   119c4:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   119c6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
   119c8:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   119ca:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
   119cc:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
   119ce:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
   119d0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
   119d2:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
   119d4:	8263      	strh	r3, [r4, #18]
   119d6:	e566      	b.n	114a6 <isr_rx_conn_pkt_ctrl+0x566>
		switch (rej_ext_ind->reject_opcode) {
   119d8:	2903      	cmp	r1, #3
   119da:	f47f ab80 	bne.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
			_radio.conn_curr->pause_rx = 0;
   119de:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   119e2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   119e6:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
   119ea:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
   119ec:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
   119f0:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   119f4:	230d      	movs	r3, #13
   119f6:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
   119f8:	7b63      	ldrb	r3, [r4, #13]
   119fa:	7323      	strb	r3, [r4, #12]
   119fc:	e553      	b.n	114a6 <isr_rx_conn_pkt_ctrl+0x566>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
   119fe:	7a41      	ldrb	r1, [r0, #9]
   11a00:	2012      	movs	r0, #18
   11a02:	f7fb fd09 	bl	d418 <pdu_len_cmp>
   11a06:	2800      	cmp	r0, #0
   11a08:	f000 831b 	beq.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		nack = ping_resp_send(_radio.conn_curr);
   11a0c:	480e      	ldr	r0, [pc, #56]	; (11a48 <isr_rx_conn_pkt_ctrl+0xb08>)
   11a0e:	f8d0 4cfc 	ldr.w	r4, [r0, #3324]	; 0xcfc
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11a12:	f600 5044 	addw	r0, r0, #3396	; 0xd44
   11a16:	f7f9 f808 	bl	aa2a <mem_acquire>
	if (!node_tx) {
   11a1a:	4601      	mov	r1, r0
   11a1c:	2800      	cmp	r0, #0
   11a1e:	f43f ac7e 	beq.w	1131e <isr_rx_conn_pkt_ctrl+0x3de>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11a22:	7903      	ldrb	r3, [r0, #4]
   11a24:	f043 0303 	orr.w	r3, r3, #3
   11a28:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   11a2a:	2301      	movs	r3, #1
   11a2c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   11a2e:	2313      	movs	r3, #19
   11a30:	e4b0      	b.n	11394 <isr_rx_conn_pkt_ctrl+0x454>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
   11a32:	7a41      	ldrb	r1, [r0, #9]
   11a34:	2013      	movs	r0, #19
   11a36:	f7fb fcef 	bl	d418 <pdu_len_cmp>
   11a3a:	2800      	cmp	r0, #0
   11a3c:	f000 8301 	beq.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		_radio.conn_curr->procedure_expire = 0;
   11a40:	4b01      	ldr	r3, [pc, #4]	; (11a48 <isr_rx_conn_pkt_ctrl+0xb08>)
   11a42:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
   11a46:	e44e      	b.n	112e6 <isr_rx_conn_pkt_ctrl+0x3a6>
   11a48:	20000bb0 	.word	0x20000bb0
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   11a4c:	7a41      	ldrb	r1, [r0, #9]
   11a4e:	2007      	movs	r0, #7
   11a50:	f7fb fce2 	bl	d418 <pdu_len_cmp>
   11a54:	2800      	cmp	r0, #0
   11a56:	f000 82f4 	beq.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
   11a5a:	4ad4      	ldr	r2, [pc, #848]	; (11dac <isr_rx_conn_pkt_ctrl+0xe6c>)
   11a5c:	f8d2 3cfc 	ldr.w	r3, [r2, #3324]	; 0xcfc
   11a60:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
   11a64:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
   11a68:	42b1      	cmp	r1, r6
   11a6a:	4611      	mov	r1, r2
   11a6c:	d02c      	beq.n	11ac8 <isr_rx_conn_pkt_ctrl+0xb88>
			conn->llcp_conn_param.disabled = 1;
   11a6e:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
   11a72:	f040 0010 	orr.w	r0, r0, #16
   11a76:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
   11a7a:	f993 001d 	ldrsb.w	r0, [r3, #29]
   11a7e:	2800      	cmp	r0, #0
   11a80:	f6bf af2b 	bge.w	118da <isr_rx_conn_pkt_ctrl+0x99a>
			LL_ASSERT(_radio.conn_upd == conn);
   11a84:	f8d2 2d70 	ldr.w	r2, [r2, #3440]	; 0xd70
   11a88:	4293      	cmp	r3, r2
   11a8a:	f47f aa9b 	bne.w	10fc4 <isr_rx_conn_pkt_ctrl+0x84>
			_radio.conn_upd = NULL;
   11a8e:	2200      	movs	r2, #0
   11a90:	f8c1 2d70 	str.w	r2, [r1, #3440]	; 0xd70
			if (!conn->llcp_conn_param.cmd) {
   11a94:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   11a98:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
   11a9c:	0716      	lsls	r6, r2, #28
   11a9e:	f57f ab1e 	bpl.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   11aa2:	2208      	movs	r2, #8
   11aa4:	7122      	strb	r2, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   11aa6:	221a      	movs	r2, #26
   11aa8:	72e2      	strb	r2, [r4, #11]
			cp->interval = conn->conn_interval;
   11aaa:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
			cp->latency = conn->latency;
   11aac:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
   11aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
			cp->interval = conn->conn_interval;
   11ab0:	81a2      	strh	r2, [r4, #12]
			cp->timeout = conn->supervision_reload *
   11ab2:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
   11ab4:	237d      	movs	r3, #125	; 0x7d
   11ab6:	4353      	muls	r3, r2
			cp->latency = conn->latency;
   11ab8:	81e0      	strh	r0, [r4, #14]
			cp->timeout = conn->supervision_reload *
   11aba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11abe:	fb93 f3f2 	sdiv	r3, r3, r2
   11ac2:	8223      	strh	r3, [r4, #16]
   11ac4:	f7ff bbb5 	b.w	11232 <isr_rx_conn_pkt_ctrl+0x2f2>
		} else if (_radio.conn_curr->llcp_length.req !=
   11ac8:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
   11acc:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
   11ad0:	4290      	cmp	r0, r2
   11ad2:	d009      	beq.n	11ae8 <isr_rx_conn_pkt_ctrl+0xba8>
			_radio.conn_curr->llcp_length.ack =
   11ad4:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
   11ad8:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   11adc:	f36f 02c3 	bfc	r2, #3, #1
   11ae0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   11ae4:	f7ff bba5 	b.w	11232 <isr_rx_conn_pkt_ctrl+0x2f2>
		} else if (_radio.conn_curr->llcp_phy.req !=
   11ae8:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
   11aec:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
   11af0:	4290      	cmp	r0, r2
   11af2:	d01b      	beq.n	11b2c <isr_rx_conn_pkt_ctrl+0xbec>
			_radio.conn_curr->llcp_phy.ack =
   11af4:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
   11af8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
   11afc:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
   11b00:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
   11b04:	f362 0002 	bfi	r0, r2, #0, #3
   11b08:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
   11b0c:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
   11b10:	0780      	lsls	r0, r0, #30
   11b12:	d50f      	bpl.n	11b34 <isr_rx_conn_pkt_ctrl+0xbf4>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   11b14:	200c      	movs	r0, #12
   11b16:	7120      	strb	r0, [r4, #4]
				p->status = 0;
   11b18:	2000      	movs	r0, #0
   11b1a:	72e0      	strb	r0, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
   11b1c:	7322      	strb	r2, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
   11b1e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   11b22:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11b26:	7363      	strb	r3, [r4, #13]
   11b28:	f7ff bb83 	b.w	11232 <isr_rx_conn_pkt_ctrl+0x2f2>
			switch (llctrl->unknown_rsp.type) {
   11b2c:	7b23      	ldrb	r3, [r4, #12]
   11b2e:	2b12      	cmp	r3, #18
   11b30:	f47f ab7f 	bne.w	11232 <isr_rx_conn_pkt_ctrl+0x2f2>
		_radio.conn_curr->procedure_expire = 0;
   11b34:	f8d1 3cfc 	ldr.w	r3, [r1, #3324]	; 0xcfc
   11b38:	f7ff bbd5 	b.w	112e6 <isr_rx_conn_pkt_ctrl+0x3a6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
   11b3c:	7a41      	ldrb	r1, [r0, #9]
   11b3e:	2014      	movs	r0, #20
   11b40:	f7fb fc6a 	bl	d418 <pdu_len_cmp>
   11b44:	2800      	cmp	r0, #0
   11b46:	f000 827c 	beq.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   11b4a:	2f14      	cmp	r7, #20
   11b4c:	d125      	bne.n	11b9a <isr_rx_conn_pkt_ctrl+0xc5a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11b4e:	4898      	ldr	r0, [pc, #608]	; (11db0 <isr_rx_conn_pkt_ctrl+0xe70>)
   11b50:	f7f8 ff6b 	bl	aa2a <mem_acquire>
		if (!node_tx) {
   11b54:	4606      	mov	r6, r0
   11b56:	2800      	cmp	r0, #0
   11b58:	f43f abe1 	beq.w	1131e <isr_rx_conn_pkt_ctrl+0x3de>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   11b5c:	f8df 824c 	ldr.w	r8, [pc, #588]	; 11dac <isr_rx_conn_pkt_ctrl+0xe6c>
   11b60:	f8d8 3cfc 	ldr.w	r3, [r8, #3324]	; 0xcfc
	    ((_radio.conn_curr->llcp_length.req ==
   11b64:	f893 70e8 	ldrb.w	r7, [r3, #232]	; 0xe8
	if (/* Local idle, and Peer request then complete the Peer procedure
   11b68:	f893 c0e9 	ldrb.w	ip, [r3, #233]	; 0xe9
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   11b6c:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   11b6e:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
   11b70:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
   11b72:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
	    ((_radio.conn_curr->llcp_length.req ==
   11b76:	9701      	str	r7, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   11b78:	45bc      	cmp	ip, r7
   11b7a:	46c3      	mov	fp, r8
   11b7c:	f894 c00b 	ldrb.w	ip, [r4, #11]
   11b80:	d10d      	bne.n	11b9e <isr_rx_conn_pkt_ctrl+0xc5e>
	      _radio.conn_curr->llcp_length.ack) &&
   11b82:	f1bc 0f14 	cmp.w	ip, #20
   11b86:	d016      	beq.n	11bb6 <isr_rx_conn_pkt_ctrl+0xc76>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
   11b88:	f1bc 0f15 	cmp.w	ip, #21
   11b8c:	f47f aa1a 	bne.w	10fc4 <isr_rx_conn_pkt_ctrl+0x84>
	eff_tx_time = _radio.conn_curr->max_tx_time;
   11b90:	46f0      	mov	r8, lr
	eff_rx_time = _radio.conn_curr->max_rx_time;
   11b92:	4681      	mov	r9, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   11b94:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   11b96:	4692      	mov	sl, r2
   11b98:	e061      	b.n	11c5e <isr_rx_conn_pkt_ctrl+0xd1e>
	struct radio_pdu_node_tx *node_tx = NULL;
   11b9a:	2600      	movs	r6, #0
   11b9c:	e7de      	b.n	11b5c <isr_rx_conn_pkt_ctrl+0xc1c>
		 LLCP_LENGTH_STATE_REQ) ||
   11b9e:	f893 70ea 	ldrb.w	r7, [r3, #234]	; 0xea
   11ba2:	f007 0703 	and.w	r7, r7, #3
	      _radio.conn_curr->llcp_length.ack) &&
   11ba6:	2f01      	cmp	r7, #1
   11ba8:	d9eb      	bls.n	11b82 <isr_rx_conn_pkt_ctrl+0xc42>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   11baa:	2f02      	cmp	r7, #2
   11bac:	d1ec      	bne.n	11b88 <isr_rx_conn_pkt_ctrl+0xc48>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
   11bae:	f1ac 0714 	sub.w	r7, ip, #20
   11bb2:	2f01      	cmp	r7, #1
   11bb4:	d8e8      	bhi.n	11b88 <isr_rx_conn_pkt_ctrl+0xc48>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   11bb6:	89a7      	ldrh	r7, [r4, #12]
   11bb8:	2f1a      	cmp	r7, #26
   11bba:	d969      	bls.n	11c90 <isr_rx_conn_pkt_ctrl+0xd50>
			eff_tx_octets = min(lr->max_rx_octets,
   11bbc:	f8b3 c02c 	ldrh.w	ip, [r3, #44]	; 0x2c
   11bc0:	4567      	cmp	r7, ip
   11bc2:	bf28      	it	cs
   11bc4:	4667      	movcs	r7, ip
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   11bc6:	f8b4 a010 	ldrh.w	sl, [r4, #16]
   11bca:	f1ba 0f1a 	cmp.w	sl, #26
   11bce:	d961      	bls.n	11c94 <isr_rx_conn_pkt_ctrl+0xd54>
			eff_rx_octets = min(lr->max_tx_octets,
   11bd0:	f1ba 0ffb 	cmp.w	sl, #251	; 0xfb
   11bd4:	bf28      	it	cs
   11bd6:	f04f 0afb 	movcs.w	sl, #251	; 0xfb
		if (lr->max_rx_time >=
   11bda:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
   11bde:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   11be2:	d359      	bcc.n	11c98 <isr_rx_conn_pkt_ctrl+0xd58>
			eff_tx_time = min(lr->max_rx_time,
   11be4:	f8b3 8032 	ldrh.w	r8, [r3, #50]	; 0x32
   11be8:	45e0      	cmp	r8, ip
   11bea:	bf28      	it	cs
   11bec:	46e0      	movcs	r8, ip
		if (lr->max_tx_time >=
   11bee:	f8b4 9012 	ldrh.w	r9, [r4, #18]
   11bf2:	f5b9 7fa4 	cmp.w	r9, #328	; 0x148
   11bf6:	d351      	bcc.n	11c9c <isr_rx_conn_pkt_ctrl+0xd5c>
			eff_rx_time = min(lr->max_tx_time,
   11bf8:	f244 2c90 	movw	ip, #17040	; 0x4290
   11bfc:	45e1      	cmp	r9, ip
   11bfe:	bf28      	it	cs
   11c00:	46e1      	movcs	r9, ip
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
   11c02:	4552      	cmp	r2, sl
   11c04:	d04c      	beq.n	11ca0 <isr_rx_conn_pkt_ctrl+0xd60>
			free_count_rx = packet_rx_acquired_count_get() +
   11c06:	f7fb fc4f 	bl	d4a8 <packet_rx_acquired_count_get>
   11c0a:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
   11c0c:	f8db 0d18 	ldr.w	r0, [fp, #3352]	; 0xd18
   11c10:	f7f8 ff3a 	bl	aa88 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
   11c14:	4420      	add	r0, r4
   11c16:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
   11c18:	28ff      	cmp	r0, #255	; 0xff
   11c1a:	f63f a9d3 	bhi.w	10fc4 <isr_rx_conn_pkt_ctrl+0x84>
			if (_radio.packet_rx_data_count == free_count_rx) {
   11c1e:	f89b 3d22 	ldrb.w	r3, [fp, #3362]	; 0xd22
   11c22:	4283      	cmp	r3, r0
   11c24:	f040 8228 	bne.w	12078 <isr_rx_conn_pkt_ctrl+0x1138>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   11c28:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
					(_radio.conn_curr->llcp_length.req - 1);
   11c2c:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   11c30:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
   11c32:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
   11c34:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
   11c38:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
   11c3c:	f8a3 a0ec 	strh.w	sl, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
   11c40:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
   11c44:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
   11c48:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
   11c4c:	f8a3 90f0 	strh.w	r9, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
   11c50:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
   11c54:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
   11c58:	2303      	movs	r3, #3
   11c5a:	f88b 3014 	strb.w	r3, [fp, #20]
	if (node_tx) {
   11c5e:	2e00      	cmp	r6, #0
   11c60:	f43f aa3d 	beq.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11c64:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
   11c66:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
   11c6a:	f8a6 a008 	strh.w	sl, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11c6e:	f043 0303 	orr.w	r3, r3, #3
   11c72:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   11c74:	2309      	movs	r3, #9
   11c76:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   11c78:	2315      	movs	r3, #21
   11c7a:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
   11c7c:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
   11c7e:	f8a6 900a 	strh.w	r9, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
   11c82:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
   11c86:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
   11c88:	f7fd fd14 	bl	f6b4 <ctrl_tx_enqueue>
   11c8c:	f7ff ba27 	b.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   11c90:	460f      	mov	r7, r1
   11c92:	e798      	b.n	11bc6 <isr_rx_conn_pkt_ctrl+0xc86>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   11c94:	4692      	mov	sl, r2
   11c96:	e7a0      	b.n	11bda <isr_rx_conn_pkt_ctrl+0xc9a>
	eff_tx_time = _radio.conn_curr->max_tx_time;
   11c98:	46f0      	mov	r8, lr
   11c9a:	e7a8      	b.n	11bee <isr_rx_conn_pkt_ctrl+0xcae>
	eff_rx_time = _radio.conn_curr->max_rx_time;
   11c9c:	4681      	mov	r9, r0
   11c9e:	e7b0      	b.n	11c02 <isr_rx_conn_pkt_ctrl+0xcc2>
			_radio.conn_curr->llcp_length.ack =
   11ca0:	f89d 2004 	ldrb.w	r2, [sp, #4]
   11ca4:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
   11ca8:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
   11cac:	f04f 0c00 	mov.w	ip, #0
			_radio.conn_curr->pause_tx = 0;
   11cb0:	f36c 02c3 	bfi	r2, ip, #3, #1
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
   11cb4:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
   11cb6:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
			_radio.conn_curr->pause_tx = 0;
   11cba:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
   11cbe:	d103      	bne.n	11cc8 <isr_rx_conn_pkt_ctrl+0xd88>
   11cc0:	45c6      	cmp	lr, r8
   11cc2:	d101      	bne.n	11cc8 <isr_rx_conn_pkt_ctrl+0xd88>
			    eff_tx_time == _radio.conn_curr->max_tx_time &&
   11cc4:	4548      	cmp	r0, r9
   11cc6:	d0ca      	beq.n	11c5e <isr_rx_conn_pkt_ctrl+0xd1e>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
   11cc8:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
   11cca:	f8a3 9036 	strh.w	r9, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
   11cce:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
   11cd2:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
   11cd4:	f8a4 a00c 	strh.w	sl, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
   11cd8:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
   11cda:	f8a4 900e 	strh.w	r9, [r4, #14]
			lr->max_tx_time = eff_tx_time;
   11cde:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
   11ce2:	702b      	strb	r3, [r5, #0]
   11ce4:	e7bb      	b.n	11c5e <isr_rx_conn_pkt_ctrl+0xd1e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
   11ce6:	7a41      	ldrb	r1, [r0, #9]
   11ce8:	2016      	movs	r0, #22
   11cea:	f7fb fb95 	bl	d418 <pdu_len_cmp>
   11cee:	2800      	cmp	r0, #0
   11cf0:	f000 81a7 	beq.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		if (_radio.role == ROLE_MASTER) {
   11cf4:	482d      	ldr	r0, [pc, #180]	; (11dac <isr_rx_conn_pkt_ctrl+0xe6c>)
   11cf6:	7cc3      	ldrb	r3, [r0, #19]
   11cf8:	2b04      	cmp	r3, #4
   11cfa:	d15b      	bne.n	11db4 <isr_rx_conn_pkt_ctrl+0xe74>
			if ((_radio.conn_curr->llcp_phy.ack !=
   11cfc:	f8d0 0cfc 	ldr.w	r0, [r0, #3324]	; 0xcfc
   11d00:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
   11d04:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
   11d08:	428b      	cmp	r3, r1
   11d0a:	d00a      	beq.n	11d22 <isr_rx_conn_pkt_ctrl+0xde2>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   11d0c:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
   11d10:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
   11d14:	3a01      	subs	r2, #1
   11d16:	2a02      	cmp	r2, #2
   11d18:	d803      	bhi.n	11d22 <isr_rx_conn_pkt_ctrl+0xde2>
				nack = reject_ext_ind_send(_radio.conn_curr,
   11d1a:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
   11d1c:	2116      	movs	r1, #22
   11d1e:	f7ff bbd7 	b.w	114d0 <isr_rx_conn_pkt_ctrl+0x590>
			} else if (((_radio.conn_curr->llcp_req !=
   11d22:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
   11d26:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   11d2a:	4295      	cmp	r5, r2
   11d2c:	d003      	beq.n	11d36 <isr_rx_conn_pkt_ctrl+0xdf6>
				     _radio.conn_curr->llcp_ack) &&
   11d2e:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
   11d32:	2a03      	cmp	r2, #3
   11d34:	d105      	bne.n	11d42 <isr_rx_conn_pkt_ctrl+0xe02>
				     LLCP_ENCRYPTION)) ||
   11d36:	f890 50c0 	ldrb.w	r5, [r0, #192]	; 0xc0
   11d3a:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
   11d3e:	4295      	cmp	r5, r2
   11d40:	d001      	beq.n	11d46 <isr_rx_conn_pkt_ctrl+0xe06>
				nack = reject_ext_ind_send(_radio.conn_curr,
   11d42:	222a      	movs	r2, #42	; 0x2a
   11d44:	e7ea      	b.n	11d1c <isr_rx_conn_pkt_ctrl+0xddc>
				_radio.conn_curr->llcp_phy.state =
   11d46:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
   11d4a:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
   11d4c:	f042 0203 	orr.w	r2, r2, #3
   11d50:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
   11d54:	d116      	bne.n	11d84 <isr_rx_conn_pkt_ctrl+0xe44>
					_radio.conn_curr->llcp_phy.ack--;
   11d56:	3b01      	subs	r3, #1
   11d58:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
   11d5c:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
   11d60:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
   11d64:	f36f 0341 	bfc	r3, #1, #1
   11d68:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
   11d6c:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   11d70:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
   11d74:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
					_radio.conn_curr->llcp_phy.rx =
   11d78:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   11d7c:	f362 1347 	bfi	r3, r2, #5, #3
   11d80:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   11d84:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   11d88:	7b62      	ldrb	r2, [r4, #13]
   11d8a:	f3c3 0182 	ubfx	r1, r3, #2, #3
   11d8e:	400a      	ands	r2, r1
   11d90:	f362 0384 	bfi	r3, r2, #2, #3
   11d94:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   11d98:	7b22      	ldrb	r2, [r4, #12]
   11d9a:	b2db      	uxtb	r3, r3
   11d9c:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   11da0:	f362 1347 	bfi	r3, r2, #5, #3
   11da4:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
   11da8:	f7ff b999 	b.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
   11dac:	20000bb0 	.word	0x20000bb0
   11db0:	200018f4 	.word	0x200018f4
			nack = phy_rsp_send(_radio.conn_curr, pdu_data_rx);
   11db4:	f8d0 5cfc 	ldr.w	r5, [r0, #3324]	; 0xcfc
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11db8:	f600 5044 	addw	r0, r0, #3396	; 0xd44
   11dbc:	f7f8 fe35 	bl	aa2a <mem_acquire>
	if (!node_tx) {
   11dc0:	4601      	mov	r1, r0
   11dc2:	2800      	cmp	r0, #0
   11dc4:	f43f aaab 	beq.w	1131e <isr_rx_conn_pkt_ctrl+0x3de>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   11dc8:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   11dcc:	2202      	movs	r2, #2
   11dce:	f362 0301 	bfi	r3, r2, #0, #2
   11dd2:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
   11dd6:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
   11dda:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
   11dde:	4293      	cmp	r3, r2
   11de0:	d11a      	bne.n	11e18 <isr_rx_conn_pkt_ctrl+0xed8>
		conn->llcp_phy.ack--;
   11de2:	3b01      	subs	r3, #1
   11de4:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
   11de8:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
			conn->phy_pref_tx;
   11dec:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
		conn->llcp_phy.cmd = 0;
   11df0:	f36f 0341 	bfc	r3, #1, #1
   11df4:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
   11df8:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   11dfc:	f362 0384 	bfi	r3, r2, #2, #3
			conn->phy_pref_rx;
   11e00:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn->llcp_phy.rx =
   11e04:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   11e08:	f362 1347 	bfi	r3, r2, #5, #3
   11e0c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
   11e10:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
   11e14:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
   11e18:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   11e1c:	7b62      	ldrb	r2, [r4, #13]
   11e1e:	f3c3 0082 	ubfx	r0, r3, #2, #3
   11e22:	4002      	ands	r2, r0
   11e24:	f362 0384 	bfi	r3, r2, #2, #3
   11e28:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
   11e2c:	7b22      	ldrb	r2, [r4, #12]
   11e2e:	b2db      	uxtb	r3, r3
   11e30:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   11e34:	f362 1347 	bfi	r3, r2, #5, #3
   11e38:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11e3c:	790b      	ldrb	r3, [r1, #4]
   11e3e:	f043 0303 	orr.w	r3, r3, #3
   11e42:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   11e44:	2303      	movs	r3, #3
   11e46:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   11e48:	2317      	movs	r3, #23
   11e4a:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   11e4c:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   11e50:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11e54:	720b      	strb	r3, [r1, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   11e56:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   11e5a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   11e5e:	724b      	strb	r3, [r1, #9]
   11e60:	f7ff ba6f 	b.w	11342 <isr_rx_conn_pkt_ctrl+0x402>
		if (_radio.conn_curr->role ||
   11e64:	4e8b      	ldr	r6, [pc, #556]	; (12094 <isr_rx_conn_pkt_ctrl+0x1154>)
   11e66:	f8d6 5cfc 	ldr.w	r5, [r6, #3324]	; 0xcfc
   11e6a:	f995 301d 	ldrsb.w	r3, [r5, #29]
   11e6e:	2b00      	cmp	r3, #0
   11e70:	f2c0 80e7 	blt.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
   11e74:	7a41      	ldrb	r1, [r0, #9]
   11e76:	2017      	movs	r0, #23
   11e78:	f7fb face 	bl	d418 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   11e7c:	2800      	cmp	r0, #0
   11e7e:	f000 80e0 	beq.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		if ((_radio.role == ROLE_MASTER) &&
   11e82:	7cf3      	ldrb	r3, [r6, #19]
   11e84:	2b04      	cmp	r3, #4
   11e86:	f47f a92a 	bne.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
   11e8a:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
   11e8e:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
   11e92:	429a      	cmp	r2, r3
   11e94:	f43f a923 	beq.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
		    (_radio.conn_curr->llcp_phy.state ==
   11e98:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
   11e9c:	f003 0203 	and.w	r2, r3, #3
   11ea0:	2a02      	cmp	r2, #2
   11ea2:	f47f a91c 	bne.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
   11ea6:	f043 0303 	orr.w	r3, r3, #3
   11eaa:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   11eae:	7b62      	ldrb	r2, [r4, #13]
   11eb0:	f3c3 0182 	ubfx	r1, r3, #2, #3
   11eb4:	400a      	ands	r2, r1
   11eb6:	f362 0384 	bfi	r3, r2, #2, #3
   11eba:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   11ebe:	7b22      	ldrb	r2, [r4, #12]
   11ec0:	b2db      	uxtb	r3, r3
   11ec2:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   11ec6:	f362 1347 	bfi	r3, r2, #5, #3
   11eca:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
   11ece:	f7ff b8be 	b.w	1104e <isr_rx_conn_pkt_ctrl+0x10e>
		if (!_radio.conn_curr->role ||
   11ed2:	4b70      	ldr	r3, [pc, #448]	; (12094 <isr_rx_conn_pkt_ctrl+0x1154>)
   11ed4:	f8d3 6cfc 	ldr.w	r6, [r3, #3324]	; 0xcfc
   11ed8:	f996 301d 	ldrsb.w	r3, [r6, #29]
   11edc:	2b00      	cmp	r3, #0
   11ede:	f280 80b0 	bge.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
   11ee2:	7a41      	ldrb	r1, [r0, #9]
   11ee4:	2018      	movs	r0, #24
   11ee6:	f7fb fa97 	bl	d418 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   11eea:	2800      	cmp	r0, #0
   11eec:	f000 80a9 	beq.w	12042 <isr_rx_conn_pkt_ctrl+0x1102>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   11ef0:	7b27      	ldrb	r7, [r4, #12]
   11ef2:	7b62      	ldrb	r2, [r4, #13]
   11ef4:	ea47 0002 	orr.w	r0, r7, r2
   11ef8:	f010 0007 	ands.w	r0, r0, #7
   11efc:	d125      	bne.n	11f4a <isr_rx_conn_pkt_ctrl+0x100a>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   11efe:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
   11f02:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
   11f06:	4293      	cmp	r3, r2
   11f08:	f43f a8e9 	beq.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   11f0c:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   11f10:	f003 0303 	and.w	r3, r3, #3
   11f14:	2b02      	cmp	r3, #2
   11f16:	f47f a8e2 	bne.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
		if (!conn->llcp_phy.cmd) {
   11f1a:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   11f1e:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
   11f22:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
   11f24:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
   11f28:	f57f a8d9 	bpl.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   11f2c:	230c      	movs	r3, #12
		upd->status = 0;
   11f2e:	72e0      	strb	r0, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   11f30:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
   11f32:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
   11f36:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   11f3a:	7323      	strb	r3, [r4, #12]
		upd->rx = conn->phy_rx;
   11f3c:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
   11f40:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11f44:	7363      	strb	r3, [r4, #13]
   11f46:	f7ff baae 	b.w	114a6 <isr_rx_conn_pkt_ctrl+0x566>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
   11f4a:	89e0      	ldrh	r0, [r4, #14]
   11f4c:	8c73      	ldrh	r3, [r6, #34]	; 0x22
   11f4e:	1ac3      	subs	r3, r0, r3
   11f50:	041b      	lsls	r3, r3, #16
   11f52:	f100 809a 	bmi.w	1208a <isr_rx_conn_pkt_ctrl+0x114a>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11f56:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
   11f5a:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
   11f5e:	428b      	cmp	r3, r1
   11f60:	f47f a830 	bne.w	10fc4 <isr_rx_conn_pkt_ctrl+0x84>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   11f64:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
   11f68:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
   11f6c:	42a3      	cmp	r3, r4
   11f6e:	d014      	beq.n	11f9a <isr_rx_conn_pkt_ctrl+0x105a>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   11f70:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   11f74:	f003 0303 	and.w	r3, r3, #3
   11f78:	2b02      	cmp	r3, #2
   11f7a:	d10e      	bne.n	11f9a <isr_rx_conn_pkt_ctrl+0x105a>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   11f7c:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   11f80:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   11f84:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
   11f88:	f3c3 0340 	ubfx	r3, r3, #1, #1
   11f8c:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
   11f90:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   11f92:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
   11f96:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
   11f9a:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
   11f9e:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
   11fa2:	f002 0207 	and.w	r2, r2, #7
   11fa6:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
   11faa:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
   11fae:	f36f 0300 	bfc	r3, #0, #1
   11fb2:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
   11fb6:	2008      	movs	r0, #8
	conn->llcp_ack--;
   11fb8:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
   11fba:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
   11fbe:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
   11fc2:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
   11fc6:	2b00      	cmp	r3, #0
   11fc8:	f43f a889 	beq.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
   11fcc:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
   11fd0:	f362 0302 	bfi	r3, r2, #0, #3
   11fd4:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
   11fd8:	f7ff b881 	b.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
		if (_radio.conn_curr->role ||
   11fdc:	4e2d      	ldr	r6, [pc, #180]	; (12094 <isr_rx_conn_pkt_ctrl+0x1154>)
   11fde:	f8d6 5cfc 	ldr.w	r5, [r6, #3324]	; 0xcfc
   11fe2:	f995 301d 	ldrsb.w	r3, [r5, #29]
   11fe6:	2b00      	cmp	r3, #0
   11fe8:	db2b      	blt.n	12042 <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
   11fea:	7a41      	ldrb	r1, [r0, #9]
   11fec:	2019      	movs	r0, #25
   11fee:	f7fb fa13 	bl	d418 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   11ff2:	b330      	cbz	r0, 12042 <isr_rx_conn_pkt_ctrl+0x1102>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
   11ff4:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
   11ff8:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   11ffc:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
   12000:	7b22      	ldrb	r2, [r4, #12]
   12002:	f003 0307 	and.w	r3, r3, #7
   12006:	4213      	tst	r3, r2
   12008:	f43f a869 	beq.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
			if (conn->llcp_req != conn->llcp_ack) {
   1200c:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   12010:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   12014:	429a      	cmp	r2, r3
   12016:	f47f a862 	bne.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
			memcpy(&conn->llcp.chan_map.chm[0],
   1201a:	2205      	movs	r2, #5
   1201c:	f606 5102 	addw	r1, r6, #3330	; 0xd02
   12020:	f105 0079 	add.w	r0, r5, #121	; 0x79
   12024:	f7ee fc61 	bl	8ea <memcpy>
			conn->llcp.chan_map.initiate = 1;
   12028:	2301      	movs	r3, #1
   1202a:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
   1202e:	2302      	movs	r3, #2
   12030:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
   12034:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   12038:	3b01      	subs	r3, #1
   1203a:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
   1203e:	f7ff b84e 	b.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
		nack = unknown_rsp_send(_radio.conn_curr,
   12042:	4814      	ldr	r0, [pc, #80]	; (12094 <isr_rx_conn_pkt_ctrl+0x1154>)
   12044:	f8d0 4cfc 	ldr.w	r4, [r0, #3324]	; 0xcfc
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   12048:	f600 5044 	addw	r0, r0, #3396	; 0xd44
   1204c:	f7f8 fced 	bl	aa2a <mem_acquire>
	if (!node_tx) {
   12050:	4601      	mov	r1, r0
   12052:	2800      	cmp	r0, #0
   12054:	f43f a963 	beq.w	1131e <isr_rx_conn_pkt_ctrl+0x3de>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12058:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
   1205a:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1205c:	f043 0303 	orr.w	r3, r3, #3
   12060:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   12062:	2302      	movs	r3, #2
   12064:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   12066:	2307      	movs	r3, #7
   12068:	71c3      	strb	r3, [r0, #7]
   1206a:	f7ff b994 	b.w	11396 <isr_rx_conn_pkt_ctrl+0x456>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   1206e:	2328      	movs	r3, #40	; 0x28
   12070:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
   12074:	f7ff b833 	b.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
	if (node_tx) {
   12078:	2e00      	cmp	r6, #0
   1207a:	f43f a950 	beq.w	1131e <isr_rx_conn_pkt_ctrl+0x3de>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   1207e:	4906      	ldr	r1, [pc, #24]	; (12098 <isr_rx_conn_pkt_ctrl+0x1158>)
   12080:	4630      	mov	r0, r6
   12082:	f7f8 fcec 	bl	aa5e <mem_release>
   12086:	f7ff b94a 	b.w	1131e <isr_rx_conn_pkt_ctrl+0x3de>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   1208a:	2328      	movs	r3, #40	; 0x28
   1208c:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
   12090:	f7ff b825 	b.w	110de <isr_rx_conn_pkt_ctrl+0x19e>
   12094:	20000bb0 	.word	0x20000bb0
   12098:	200018f4 	.word	0x200018f4
   1209c:	00000000 	.word	0x00000000

000120a0 <isr>:
{
   120a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120a4:	b093      	sub	sp, #76	; 0x4c
	trx_done = radio_is_done();
   120a6:	f005 f927 	bl	172f8 <radio_is_done>
   120aa:	b2c6      	uxtb	r6, r0
	if (trx_done) {
   120ac:	b35e      	cbz	r6, 12106 <isr+0x66>
		crc_ok = radio_crc_is_valid();
   120ae:	f005 f943 	bl	17338 <radio_crc_is_valid>
   120b2:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
   120b4:	f005 f9c4 	bl	17440 <radio_filter_has_match>
   120b8:	fa5f f880 	uxtb.w	r8, r0
		devmatch_id = radio_filter_match_get();
   120bc:	f005 f9ca 	bl	17454 <radio_filter_match_get>
   120c0:	fa5f f980 	uxtb.w	r9, r0
		irkmatch_ok = radio_ar_has_match();
   120c4:	f005 fbb8 	bl	17838 <radio_ar_has_match>
   120c8:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
   120cc:	f005 fba2 	bl	17814 <radio_ar_match_get>
   120d0:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
   120d4:	f005 f97e 	bl	173d4 <radio_rssi_is_ready>
   120d8:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
   120da:	4cad      	ldr	r4, [pc, #692]	; (12390 <isr+0x2f0>)
	radio_status_reset();
   120dc:	f005 f8f6 	bl	172cc <radio_status_reset>
	radio_tmr_status_reset();
   120e0:	f005 f9ca 	bl	17478 <radio_tmr_status_reset>
	radio_filter_status_reset();
   120e4:	f005 f9a4 	bl	17430 <radio_filter_status_reset>
	radio_ar_status_reset();
   120e8:	f005 fb9a 	bl	17820 <radio_ar_status_reset>
	radio_rssi_status_reset();
   120ec:	f005 f96a 	bl	173c4 <radio_rssi_status_reset>
	switch (_radio.state) {
   120f0:	7d23      	ldrb	r3, [r4, #20]
   120f2:	2b05      	cmp	r3, #5
   120f4:	d82c      	bhi.n	12150 <isr+0xb0>
   120f6:	e8df f013 	tbh	[pc, r3, lsl #1]
   120fa:	007b      	.short	0x007b
   120fc:	000e00c5 	.word	0x000e00c5
   12100:	0a350a35 	.word	0x0a350a35
   12104:	0a35      	.short	0x0a35
		devmatch_id = irkmatch_id = 0xFF;
   12106:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
   1210a:	4635      	mov	r5, r6
   1210c:	46b2      	mov	sl, r6
   1210e:	46b0      	mov	r8, r6
   12110:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
   12112:	46d9      	mov	r9, fp
   12114:	e7e1      	b.n	120da <isr+0x3a>
	_radio.state = STATE_RX;
   12116:	2301      	movs	r3, #1
   12118:	7523      	strb	r3, [r4, #20]
	hcto = radio_tmr_tifs_base_get() + 600
   1211a:	f005 fa9f 	bl	1765c <radio_tmr_tifs_base_get>
   1211e:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
   12120:	2096      	movs	r0, #150	; 0x96
   12122:	f005 f9b9 	bl	17498 <radio_tmr_tifs_set>
	switch (_radio.role) {
   12126:	7ce3      	ldrb	r3, [r4, #19]
   12128:	3b01      	subs	r3, #1
   1212a:	2b03      	cmp	r3, #3
   1212c:	d810      	bhi.n	12150 <isr+0xb0>
   1212e:	e8df f003 	tbb	[pc, r3]
   12132:	3102      	.short	0x3102
   12134:	6262      	.short	0x6262
		radio_switch_complete_and_tx(0, 0, 0, 0);
   12136:	2300      	movs	r3, #0
   12138:	461a      	mov	r2, r3
   1213a:	4619      	mov	r1, r3
   1213c:	4618      	mov	r0, r3
   1213e:	f005 f919 	bl	17374 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
   12142:	f005 f907 	bl	17354 <radio_pkt_scratch_get>
   12146:	f005 f87b 	bl	17240 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
   1214a:	f005 f8cb 	bl	172e4 <radio_is_ready>
   1214e:	b128      	cbz	r0, 1215c <isr+0xbc>
		LL_ASSERT(0);
   12150:	4040      	eors	r0, r0
   12152:	f380 8811 	msr	BASEPRI, r0
   12156:	f04f 0004 	mov.w	r0, #4
   1215a:	df02      	svc	2
		if (ctrl_rl_enabled()) {
   1215c:	f004 fa78 	bl	16650 <ctrl_rl_enabled>
   12160:	b138      	cbz	r0, 12172 <isr+0xd2>
			u8_t count, *irks = ctrl_irks_get(&count);
   12162:	a810      	add	r0, sp, #64	; 0x40
   12164:	f004 f862 	bl	1622c <ctrl_irks_get>
			radio_ar_configure(count, irks);
   12168:	4601      	mov	r1, r0
   1216a:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   1216e:	f005 fb1f 	bl	177b0 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
   12172:	2100      	movs	r1, #0
   12174:	4608      	mov	r0, r1
   12176:	f005 f87c 	bl	17272 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
   1217a:	f205 351b 	addw	r5, r5, #795	; 0x31b
		hcto -= radio_tx_chain_delay_get(0, 0);
   1217e:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
   12180:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
   12182:	4608      	mov	r0, r1
   12184:	f005 f871 	bl	1726a <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   12188:	1a28      	subs	r0, r5, r0
   1218a:	f005 f9fd 	bl	17588 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
   1218e:	f005 fa4d 	bl	1762c <radio_tmr_end_capture>
   12192:	e02d      	b.n	121f0 <isr+0x150>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   12194:	2300      	movs	r3, #0
   12196:	461a      	mov	r2, r3
   12198:	4619      	mov	r1, r3
   1219a:	4618      	mov	r0, r3
   1219c:	f005 f8ea 	bl	17374 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
   121a0:	f894 2d29 	ldrb.w	r2, [r4, #3369]	; 0xd29
   121a4:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
		radio_pkt_rx_set(_radio.packet_rx
   121a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   121ac:	3008      	adds	r0, #8
   121ae:	f005 f847 	bl	17240 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
   121b2:	f005 f897 	bl	172e4 <radio_is_ready>
   121b6:	2800      	cmp	r0, #0
   121b8:	d1ca      	bne.n	12150 <isr+0xb0>
		if (ctrl_rl_enabled()) {
   121ba:	f004 fa49 	bl	16650 <ctrl_rl_enabled>
   121be:	b138      	cbz	r0, 121d0 <isr+0x130>
			u8_t count, *irks = ctrl_irks_get(&count);
   121c0:	a810      	add	r0, sp, #64	; 0x40
   121c2:	f004 f833 	bl	1622c <ctrl_irks_get>
			radio_ar_configure(count, irks);
   121c6:	4601      	mov	r1, r0
   121c8:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   121cc:	f005 faf0 	bl	177b0 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
   121d0:	2100      	movs	r1, #0
   121d2:	4608      	mov	r0, r1
   121d4:	f005 f84d 	bl	17272 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
   121d8:	f205 351b 	addw	r5, r5, #795	; 0x31b
		hcto -= radio_tx_chain_delay_get(0, 0);
   121dc:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
   121de:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
   121e0:	4608      	mov	r0, r1
   121e2:	f005 f842 	bl	1726a <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   121e6:	1a28      	subs	r0, r5, r0
   121e8:	f005 f9ce 	bl	17588 <radio_tmr_hcto_configure>
		radio_rssi_measure();
   121ec:	f005 f8da 	bl	173a4 <radio_rssi_measure>
}
   121f0:	b013      	add	sp, #76	; 0x4c
   121f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
   121f6:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
					     _radio.conn_curr->phy_flags);
   121fa:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
   121fe:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   12202:	2100      	movs	r1, #0
   12204:	09d3      	lsrs	r3, r2, #7
   12206:	f000 0007 	and.w	r0, r0, #7
   1220a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   1220e:	f005 f8b1 	bl	17374 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   12212:	f894 2d29 	ldrb.w	r2, [r4, #3369]	; 0xd29
   12216:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
		rx_packet_set(_radio.conn_curr,	(void *)
   1221a:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   1221e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
   12222:	3108      	adds	r1, #8
   12224:	f7fb fbea 	bl	d9fc <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
   12228:	f005 f85c 	bl	172e4 <radio_is_ready>
   1222c:	2800      	cmp	r0, #0
   1222e:	d18f      	bne.n	12150 <isr+0xb0>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
   12230:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   12234:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   12238:	2101      	movs	r1, #1
   1223a:	f000 0007 	and.w	r0, r0, #7
   1223e:	f005 f818 	bl	17272 <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
   12242:	f8d4 2cfc 	ldr.w	r2, [r4, #3324]	; 0xcfc
   12246:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
   1224a:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get() + 600
   1224e:	f205 25f3 	addw	r5, r5, #755	; 0x2f3
	switch (phy) {
   12252:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
   12254:	4405      	add	r5, r0
	switch (phy) {
   12256:	d013      	beq.n	12280 <isr+0x1e0>
		return 40;
   12258:	2b04      	cmp	r3, #4
   1225a:	bf0c      	ite	eq
   1225c:	f44f 70bc 	moveq.w	r0, #376	; 0x178
   12260:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
   12262:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
   12264:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
   12268:	09c1      	lsrs	r1, r0, #7
   1226a:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   1226e:	f004 fffc 	bl	1726a <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   12272:	1a28      	subs	r0, r5, r0
   12274:	f005 f988 	bl	17588 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
   12278:	2001      	movs	r0, #1
   1227a:	f7fc fcbd 	bl	ebf8 <packet_tx_enqueue>
   1227e:	e7b7      	b.n	121f0 <isr+0x150>
		return 24;
   12280:	2018      	movs	r0, #24
   12282:	e7ee      	b.n	12262 <isr+0x1c2>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
   12284:	b926      	cbnz	r6, 12290 <isr+0x1f0>
		_radio.state = STATE_CLOSE;
   12286:	2303      	movs	r3, #3
   12288:	7523      	strb	r3, [r4, #20]
		radio_disable();
   1228a:	f005 f80d 	bl	172a8 <radio_disable>
   1228e:	e7af      	b.n	121f0 <isr+0x150>
	switch (_radio.role) {
   12290:	7ce3      	ldrb	r3, [r4, #19]
   12292:	3b01      	subs	r3, #1
   12294:	2b03      	cmp	r3, #3
   12296:	f63f af5b 	bhi.w	12150 <isr+0xb0>
   1229a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1229e:	0004      	.short	0x0004
   122a0:	0641028f 	.word	0x0641028f
   122a4:	0641      	.short	0x0641
		if (crc_ok) {
   122a6:	2f00      	cmp	r7, #0
   122a8:	d0ed      	beq.n	12286 <isr+0x1e6>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   122aa:	f1ba 0f00 	cmp.w	sl, #0
   122ae:	d038      	beq.n	12322 <isr+0x282>
   122b0:	4658      	mov	r0, fp
   122b2:	f003 ffe5 	bl	16280 <ctrl_rl_irk_idx>
   122b6:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	pdu_adv = (void *)radio_pkt_scratch_get();
   122ba:	f005 f84b 	bl	17354 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
   122be:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
	pdu_adv = (void *)radio_pkt_scratch_get();
   122c2:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
   122c4:	eb03 2303 	add.w	r3, r3, r3, lsl #8
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   122c8:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
   122ca:	332c      	adds	r3, #44	; 0x2c
   122cc:	930a      	str	r3, [sp, #40]	; 0x28
   122ce:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   122d0:	f000 030f 	and.w	r3, r0, #15
   122d4:	2b03      	cmp	r3, #3
   122d6:	d10a      	bne.n	122ee <isr+0x24e>
   122d8:	7873      	ldrb	r3, [r6, #1]
   122da:	2b0c      	cmp	r3, #12
   122dc:	d107      	bne.n	122ee <isr+0x24e>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   122de:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   122e2:	07df      	lsls	r7, r3, #31
   122e4:	d51f      	bpl.n	12326 <isr+0x286>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   122e6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
				      rl_idx)) ||
   122ea:	07d8      	lsls	r0, r3, #31
   122ec:	d446      	bmi.n	1237c <isr+0x2dc>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   122ee:	7830      	ldrb	r0, [r6, #0]
   122f0:	f000 030f 	and.w	r3, r0, #15
   122f4:	2b05      	cmp	r3, #5
   122f6:	d1c6      	bne.n	12286 <isr+0x1e6>
   122f8:	7873      	ldrb	r3, [r6, #1]
   122fa:	2b22      	cmp	r3, #34	; 0x22
   122fc:	d1c3      	bne.n	12286 <isr+0x1e6>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   122fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12300:	5ce3      	ldrb	r3, [r4, r3]
   12302:	f003 030f 	and.w	r3, r3, #15
   12306:	2b01      	cmp	r3, #1
   12308:	f040 8216 	bne.w	12738 <isr+0x698>
					    ci->connect_ind.init_addr,
   1230c:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
   1230e:	aa10      	add	r2, sp, #64	; 0x40
   12310:	4639      	mov	r1, r7
   12312:	f3c0 1080 	ubfx	r0, r0, #6, #1
   12316:	f004 f93f 	bl	16598 <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
   1231a:	2800      	cmp	r0, #0
   1231c:	d13a      	bne.n	12394 <isr+0x2f4>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   1231e:	2000      	movs	r0, #0
   12320:	e048      	b.n	123b4 <isr+0x314>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   12322:	20ff      	movs	r0, #255	; 0xff
   12324:	e7c7      	b.n	122b6 <isr+0x216>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
   12326:	aa10      	add	r2, sp, #64	; 0x40
   12328:	1cb1      	adds	r1, r6, #2
   1232a:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1232e:	f004 f933 	bl	16598 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   12332:	2800      	cmp	r0, #0
   12334:	d0d7      	beq.n	122e6 <isr+0x246>
	return (adv->tx_addr == sr->rx_addr) &&
   12336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12338:	7832      	ldrb	r2, [r6, #0]
   1233a:	5ce3      	ldrb	r3, [r4, r3]
   1233c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   12340:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   12344:	d1d3      	bne.n	122ee <isr+0x24e>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   12346:	2206      	movs	r2, #6
   12348:	f106 0108 	add.w	r1, r6, #8
   1234c:	1ca8      	adds	r0, r5, #2
   1234e:	f7ee fa9f 	bl	890 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
   12352:	2800      	cmp	r0, #0
   12354:	d1cb      	bne.n	122ee <isr+0x24e>
		_radio.state = STATE_CLOSE;
   12356:	2303      	movs	r3, #3
   12358:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
   1235a:	f005 f815 	bl	17388 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
   1235e:	f894 0c14 	ldrb.w	r0, [r4, #3092]	; 0xc14
   12362:	eb00 2000 	add.w	r0, r0, r0, lsl #8
   12366:	f600 2012 	addw	r0, r0, #2578	; 0xa12
   1236a:	4420      	add	r0, r4
   1236c:	f004 ff6e 	bl	1724c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   12370:	f004 ffb8 	bl	172e4 <radio_is_ready>
   12374:	2800      	cmp	r0, #0
   12376:	f43f af3b 	beq.w	121f0 <isr+0x150>
   1237a:	e6e9      	b.n	12150 <isr+0xb0>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   1237c:	f1b8 0f00 	cmp.w	r8, #0
   12380:	d1d9      	bne.n	12336 <isr+0x296>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   12382:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   12386:	f003 ff97 	bl	162b8 <ctrl_irk_whitelisted>
   1238a:	2800      	cmp	r0, #0
   1238c:	d1d3      	bne.n	12336 <isr+0x296>
   1238e:	e7ae      	b.n	122ee <isr+0x24e>
   12390:	20000bb0 	.word	0x20000bb0
		       isr_adv_ci_adva_check(adv, ci) &&
   12394:	4631      	mov	r1, r6
   12396:	4628      	mov	r0, r5
   12398:	f7fc f904 	bl	e5a4 <isr_adv_ci_adva_check>
					    rl_idx) &&
   1239c:	2800      	cmp	r0, #0
   1239e:	d0be      	beq.n	1231e <isr+0x27e>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
   123a0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (rl_idx != FILTER_IDX_NONE) {
   123a4:	2bff      	cmp	r3, #255	; 0xff
   123a6:	f000 81b4 	beq.w	12712 <isr+0x672>
		return rl_idx == _radio.advertiser.rl_idx;
   123aa:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   123ae:	1ac1      	subs	r1, r0, r3
   123b0:	4248      	negs	r0, r1
   123b2:	4148      	adcs	r0, r1
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   123b4:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
   123b8:	2800      	cmp	r0, #0
   123ba:	f43f af64 	beq.w	12286 <isr+0x1e6>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
   123be:	f894 3d6a 	ldrb.w	r3, [r4, #3434]	; 0xd6a
   123c2:	b133      	cbz	r3, 123d2 <isr+0x332>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   123c4:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
   123c8:	f894 2d69 	ldrb.w	r2, [r4, #3433]	; 0xd69
   123cc:	429a      	cmp	r2, r3
   123ce:	f47f af5a 	bne.w	12286 <isr+0x1e6>
   123d2:	f8d4 3c18 	ldr.w	r3, [r4, #3096]	; 0xc18
   123d6:	2b00      	cmp	r3, #0
   123d8:	f43f af55 	beq.w	12286 <isr+0x1e6>
			node_rx = packet_rx_reserve_get(4);
   123dc:	2004      	movs	r0, #4
   123de:	f7fb f879 	bl	d4d4 <packet_rx_reserve_get>
		if (!node_rx) {
   123e2:	4607      	mov	r7, r0
   123e4:	2800      	cmp	r0, #0
   123e6:	f43f af4e 	beq.w	12286 <isr+0x1e6>
		_radio.state = STATE_STOP;
   123ea:	f04f 0904 	mov.w	r9, #4
   123ee:	f884 9014 	strb.w	r9, [r4, #20]
		radio_disable();
   123f2:	f004 ff59 	bl	172a8 <radio_disable>
		conn = _radio.advertiser.conn;
   123f6:	f8d4 5c18 	ldr.w	r5, [r4, #3096]	; 0xc18
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   123fa:	f8d4 1cf0 	ldr.w	r1, [r4, #3312]	; 0xcf0
		_radio.advertiser.conn = NULL;
   123fe:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   12400:	f44f 72aa 	mov.w	r2, #340	; 0x154
   12404:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
   12406:	f8c4 3c18 	str.w	r3, [r4, #3096]	; 0xc18
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   1240a:	f7f8 fb46 	bl	aa9a <mem_index_get>
		memcpy(&conn->access_addr[0],
   1240e:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   12412:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
   12414:	2203      	movs	r2, #3
   12416:	f106 0112 	add.w	r1, r6, #18
   1241a:	f105 0014 	add.w	r0, r5, #20
   1241e:	f7ee fa64 	bl	8ea <memcpy>
		memcpy(&conn->data_chan_map[0],
   12422:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
   12426:	464a      	mov	r2, r9
   12428:	f106 010e 	add.w	r1, r6, #14
   1242c:	4650      	mov	r0, sl
   1242e:	f7ee fa5c 	bl	8ea <memcpy>
		memcpy(&conn->data_chan_map[0],
   12432:	2205      	movs	r2, #5
   12434:	f106 011e 	add.w	r1, r6, #30
   12438:	4640      	mov	r0, r8
   1243a:	f7ee fa56 	bl	8ea <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   1243e:	2105      	movs	r1, #5
   12440:	4640      	mov	r0, r8
   12442:	f7f8 fc9d 	bl	ad80 <util_ones_count_get>
		conn->data_chan_count =
   12446:	7f6b      	ldrb	r3, [r5, #29]
   12448:	f360 0305 	bfi	r3, r0, #0, #6
   1244c:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
   1244e:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   12452:	f3c3 0304 	ubfx	r3, r3, #0, #5
   12456:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
   12458:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
   1245a:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
   1245c:	f240 48e2 	movw	r8, #1250	; 0x4e2
   12460:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
   12464:	7ef2      	ldrb	r2, [r6, #27]
   12466:	7eb3      	ldrb	r3, [r6, #26]
   12468:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   1246c:	4651      	mov	r1, sl
   1246e:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
   12470:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   12472:	f105 006c 	add.w	r0, r5, #108	; 0x6c
   12476:	f7ee fa38 	bl	8ea <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
   1247a:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1247c:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
   1247e:	f242 7210 	movw	r2, #10000	; 0x2710
   12482:	fb02 8303 	mla	r3, r2, r3, r8
   12486:	3b01      	subs	r3, #1
   12488:	fbb3 f3f8 	udiv	r3, r3, r8
   1248c:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
   1248e:	4bc2      	ldr	r3, [pc, #776]	; (12798 <isr+0x6f8>)
   12490:	4443      	add	r3, r8
   12492:	fbb3 f3f8 	udiv	r3, r3, r8
   12496:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1249a:	4bc0      	ldr	r3, [pc, #768]	; (1279c <isr+0x6fc>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1249c:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1249e:	4443      	add	r3, r8
   124a0:	fbb3 f3f8 	udiv	r3, r3, r8
   124a4:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   124a6:	4282      	cmp	r2, r0
   124a8:	4613      	mov	r3, r2
   124aa:	bfc4      	itt	gt
   124ac:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
   124b0:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   124b2:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   124b6:	bfc4      	itt	gt
   124b8:	18d2      	addgt	r2, r2, r3
   124ba:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
   124bc:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   124be:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   124c2:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
   124c4:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
   124c6:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
   124c8:	2300      	movs	r3, #0
   124ca:	72fb      	strb	r3, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
   124cc:	733a      	strb	r2, [r7, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   124ce:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
   124d2:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   124d4:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   124d8:	f3c2 12c0 	ubfx	r2, r2, #7, #1
   124dc:	76ba      	strb	r2, [r7, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   124de:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   124e2:	464a      	mov	r2, r9
   124e4:	f107 001b 	add.w	r0, r7, #27
   124e8:	f7ee f9ff 	bl	8ea <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
   124ec:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   124f0:	f107 030e 	add.w	r3, r7, #14
   124f4:	28ff      	cmp	r0, #255	; 0xff
   124f6:	930b      	str	r3, [sp, #44]	; 0x2c
   124f8:	f106 0a02 	add.w	sl, r6, #2
   124fc:	f107 0b14 	add.w	fp, r7, #20
   12500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12502:	f000 8138 	beq.w	12776 <isr+0x6d6>
			ll_rl_id_addr_get(rl_idx,
   12506:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12508:	f107 010d 	add.w	r1, r7, #13
   1250c:	f004 f824 	bl	16558 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   12510:	7b7b      	ldrb	r3, [r7, #13]
   12512:	3302      	adds	r3, #2
   12514:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   12516:	464a      	mov	r2, r9
   12518:	4651      	mov	r1, sl
   1251a:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   1251c:	f7ee f9e5 	bl	8ea <memcpy>
			pdu_adv->connect_ind.interval;
   12520:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
   12522:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
			pdu_adv->connect_ind.latency;
   12526:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
   12528:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
			pdu_adv->connect_ind.timeout;
   1252c:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
   1252e:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv->connect_ind.sca;
   12532:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   12536:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   1253a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
   1253e:	8c28      	ldrh	r0, [r5, #32]
   12540:	f7fc f8a0 	bl	e684 <rx_fc_lock>
		packet_rx_enqueue();
   12544:	f7fc f9ba 	bl	e8bc <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
   12548:	2003      	movs	r0, #3
   1254a:	f7fa ffc3 	bl	d4d4 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   1254e:	2800      	cmp	r0, #0
   12550:	f43f adfe 	beq.w	12150 <isr+0xb0>
			node_rx->hdr.handle = conn->handle;
   12554:	8c2b      	ldrh	r3, [r5, #32]
   12556:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   12558:	230b      	movs	r3, #11
   1255a:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
   1255c:	7833      	ldrb	r3, [r6, #0]
   1255e:	f013 0320 	ands.w	r3, r3, #32
   12562:	d00e      	beq.n	12582 <isr+0x4e2>
					((u16_t)conn->access_addr[1] << 8) |
   12564:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
   12566:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
   12568:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
   1256a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
   1256e:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
   12570:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
   12574:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   12576:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
   12578:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
   1257c:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
   1257e:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   12580:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
   12582:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
   12584:	f7fc f99a 	bl	e8bc <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
   12588:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   1258c:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   12590:	4983      	ldr	r1, [pc, #524]	; (127a0 <isr+0x700>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
   12592:	0952      	lsrs	r2, r2, #5
   12594:	f362 0384 	bfi	r3, r2, #2, #3
   12598:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   1259c:	f894 3d08 	ldrb.w	r3, [r4, #3336]	; 0xd08
			   gc_lookup_ppm[conn->slave.sca]) *
   125a0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
   125a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   125a8:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
   125aa:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
   125ae:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   125b2:	4a7c      	ldr	r2, [pc, #496]	; (127a4 <isr+0x704>)
   125b4:	f203 233f 	addw	r3, r3, #575	; 0x23f
   125b8:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
   125bc:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
   125be:	ea4f 0358 	mov.w	r3, r8, lsr #1
   125c2:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
   125c4:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
   125c6:	7d73      	ldrb	r3, [r6, #21]
   125c8:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
   125cc:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
   125ce:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
   125d2:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
   125d4:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
   125d6:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
   125d8:	4638      	mov	r0, r7
   125da:	f004 fe48 	bl	1726e <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   125de:	4972      	ldr	r1, [pc, #456]	; (127a8 <isr+0x708>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
   125e0:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   125e2:	f200 4052 	addw	r0, r0, #1106	; 0x452
   125e6:	a36a      	add	r3, pc, #424	; (adr r3, 12790 <isr+0x6f0>)
   125e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   125ec:	fba0 0101 	umull	r0, r1, r0, r1
   125f0:	f7ed fe3a 	bl	268 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   125f4:	f8d4 3d6c 	ldr.w	r3, [r4, #3436]	; 0xd6c
   125f8:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
   125fa:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset =
   125fc:	4293      	cmp	r3, r2
   125fe:	bf38      	it	cc
   12600:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   12602:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset =
   12606:	469a      	mov	sl, r3
		conn_interval_us -=
   12608:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
   1260a:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
   1260c:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
   1260e:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
   12610:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
   12614:	f005 f81c 	bl	17650 <radio_tmr_end_get>
   12618:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
   1261a:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   1261c:	4639      	mov	r1, r7
		conn_offset_us +=
   1261e:	fb00 9909 	mla	r9, r0, r9, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   12622:	4638      	mov	r0, r7
   12624:	f004 fe21 	bl	1726a <radio_tx_chain_delay_get>
   12628:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1262a:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   1262e:	4499      	add	r9, r3
   12630:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
   12634:	eba9 030b 	sub.w	r3, r9, fp
   12638:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1263a:	f240 532d 	movw	r3, #1325	; 0x52d
   1263e:	9300      	str	r3, [sp, #0]
   12640:	2205      	movs	r2, #5
   12642:	4b5a      	ldr	r3, [pc, #360]	; (127ac <isr+0x70c>)
   12644:	f8df b160 	ldr.w	fp, [pc, #352]	; 127a8 <isr+0x708>
   12648:	4639      	mov	r1, r7
   1264a:	4638      	mov	r0, r7
   1264c:	f7f9 f900 	bl	b850 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
   12650:	f240 512e 	movw	r1, #1326	; 0x52e
   12654:	f7fc fc46 	bl	eee4 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   12658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1265a:	5ce3      	ldrb	r3, [r4, r3]
   1265c:	f003 030f 	and.w	r3, r3, #15
   12660:	2b01      	cmp	r3, #1
   12662:	d106      	bne.n	12672 <isr+0x5d2>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12664:	9700      	str	r7, [sp, #0]
   12666:	463b      	mov	r3, r7
   12668:	2203      	movs	r2, #3
   1266a:	4639      	mov	r1, r7
   1266c:	4638      	mov	r0, r7
   1266e:	f7f9 f8ef 	bl	b850 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   12672:	fba8 890b 	umull	r8, r9, r8, fp
   12676:	a346      	add	r3, pc, #280	; (adr r3, 12790 <isr+0x6f0>)
   12678:	e9d3 2300 	ldrd	r2, r3, [r3]
   1267c:	4640      	mov	r0, r8
   1267e:	4649      	mov	r1, r9
   12680:	f7ed fdf2 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12684:	f895 3020 	ldrb.w	r3, [r5, #32]
   12688:	68a4      	ldr	r4, [r4, #8]
   1268a:	9506      	str	r5, [sp, #24]
   1268c:	3307      	adds	r3, #7
   1268e:	b2db      	uxtb	r3, r3
   12690:	930a      	str	r3, [sp, #40]	; 0x28
   12692:	f240 5345 	movw	r3, #1349	; 0x545
   12696:	9308      	str	r3, [sp, #32]
   12698:	4b45      	ldr	r3, [pc, #276]	; (127b0 <isr+0x710>)
   1269a:	9307      	str	r3, [sp, #28]
   1269c:	4b45      	ldr	r3, [pc, #276]	; (127b4 <isr+0x714>)
   1269e:	9305      	str	r3, [sp, #20]
   126a0:	68eb      	ldr	r3, [r5, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   126a2:	4a45      	ldr	r2, [pc, #276]	; (127b8 <isr+0x718>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   126a4:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   126a6:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   126a8:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   126aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   126ae:	2307      	movs	r3, #7
   126b0:	2100      	movs	r1, #0
   126b2:	4343      	muls	r3, r0
   126b4:	fb02 3301 	mla	r3, r2, r1, r3
   126b8:	fba0 1202 	umull	r1, r2, r0, r2
   126bc:	441a      	add	r2, r3
   126be:	4608      	mov	r0, r1
   126c0:	ebb8 0000 	subs.w	r0, r8, r0
   126c4:	4611      	mov	r1, r2
   126c6:	f04f 0300 	mov.w	r3, #0
   126ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   126ce:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   126d2:	2500      	movs	r5, #0
   126d4:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   126d6:	f7ed fdc7 	bl	268 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   126da:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   126dc:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   126de:	a32c      	add	r3, pc, #176	; (adr r3, 12790 <isr+0x6f0>)
   126e0:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   126e4:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   126e8:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   126ec:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   126ee:	f7ed fdbb 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   126f2:	eba4 040a 	sub.w	r4, r4, sl
   126f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   126fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   126fc:	9000      	str	r0, [sp, #0]
   126fe:	4623      	mov	r3, r4
		ticker_status =
   12700:	4629      	mov	r1, r5
   12702:	4628      	mov	r0, r5
   12704:	f7f9 f806 	bl	b714 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12708:	f030 0302 	bics.w	r3, r0, #2
   1270c:	f47f ad20 	bne.w	12150 <isr+0xb0>
   12710:	e56e      	b.n	121f0 <isr+0x150>
	return (adv->rx_addr == ci->tx_addr) &&
   12712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12714:	5ce2      	ldrb	r2, [r4, r3]
   12716:	7833      	ldrb	r3, [r6, #0]
   12718:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1271c:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   12720:	f47f adfd 	bne.w	1231e <isr+0x27e>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
   12724:	2206      	movs	r2, #6
   12726:	4639      	mov	r1, r7
   12728:	f105 0008 	add.w	r0, r5, #8
   1272c:	f7ee f8b0 	bl	890 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   12730:	fab0 f080 	clz	r0, r0
   12734:	0940      	lsrs	r0, r0, #5
   12736:	e63d      	b.n	123b4 <isr+0x314>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   12738:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   1273c:	079a      	lsls	r2, r3, #30
   1273e:	d50d      	bpl.n	1275c <isr+0x6bc>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   12740:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
				      rl_idx)) ||
   12744:	079b      	lsls	r3, r3, #30
   12746:	f57f adea 	bpl.w	1231e <isr+0x27e>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   1274a:	f1b8 0f00 	cmp.w	r8, #0
   1274e:	d10d      	bne.n	1276c <isr+0x6cc>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   12750:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   12754:	f003 fdb0 	bl	162b8 <ctrl_irk_whitelisted>
   12758:	b940      	cbnz	r0, 1276c <isr+0x6cc>
   1275a:	e5e0      	b.n	1231e <isr+0x27e>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
   1275c:	aa10      	add	r2, sp, #64	; 0x40
   1275e:	1cb1      	adds	r1, r6, #2
   12760:	f3c0 1080 	ubfx	r0, r0, #6, #1
   12764:	f003 ff18 	bl	16598 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   12768:	2800      	cmp	r0, #0
   1276a:	d0e9      	beq.n	12740 <isr+0x6a0>
	       isr_adv_ci_adva_check(adv, ci);
   1276c:	4631      	mov	r1, r6
   1276e:	4628      	mov	r0, r5
   12770:	f7fb ff18 	bl	e5a4 <isr_adv_ci_adva_check>
   12774:	e61e      	b.n	123b4 <isr+0x314>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   12776:	4619      	mov	r1, r3
   12778:	464a      	mov	r2, r9
   1277a:	4658      	mov	r0, fp
   1277c:	f7ee f8e1 	bl	942 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   12780:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   12782:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   12784:	f3c3 1380 	ubfx	r3, r3, #6, #1
   12788:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   1278a:	464a      	mov	r2, r9
   1278c:	4651      	mov	r1, sl
   1278e:	e6c5      	b.n	1251c <isr+0x47c>
   12790:	1afd498d 	.word	0x1afd498d
   12794:	00000007 	.word	0x00000007
   12798:	026259ff 	.word	0x026259ff
   1279c:	01c9c37f 	.word	0x01c9c37f
   127a0:	00021302 	.word	0x00021302
   127a4:	000f4240 	.word	0x000f4240
   127a8:	3b9aca00 	.word	0x3b9aca00
   127ac:	0000eee5 	.word	0x0000eee5
   127b0:	0000ef15 	.word	0x0000ef15
   127b4:	00010909 	.word	0x00010909
   127b8:	1afd498d 	.word	0x1afd498d
		rl_idx = devmatch_ok ?
   127bc:	f1b8 0f00 	cmp.w	r8, #0
   127c0:	d01c      	beq.n	127fc <isr+0x75c>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
   127c2:	f894 0c2d 	ldrb.w	r0, [r4, #3117]	; 0xc2d
		rl_idx = devmatch_ok ?
   127c6:	4649      	mov	r1, r9
   127c8:	f3c0 1000 	ubfx	r0, r0, #4, #1
   127cc:	f003 fd38 	bl	16240 <ctrl_rl_idx>
   127d0:	4681      	mov	r9, r0
		if (crc_ok &&
   127d2:	b147      	cbz	r7, 127e6 <isr+0x746>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
   127d4:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   127d8:	06df      	lsls	r7, r3, #27
   127da:	d519      	bpl.n	12810 <isr+0x770>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   127dc:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   127e0:	06de      	lsls	r6, r3, #27
   127e2:	f100 8271 	bmi.w	12cc8 <isr+0xc28>
			_radio.state = STATE_CLOSE;
   127e6:	2303      	movs	r3, #3
   127e8:	7523      	strb	r3, [r4, #20]
			radio_disable();
   127ea:	f004 fd5d 	bl	172a8 <radio_disable>
			_radio.scanner.state = 0;
   127ee:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
   127f2:	f36f 0341 	bfc	r3, #1, #1
   127f6:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
   127fa:	e4f9      	b.n	121f0 <isr+0x150>
		rl_idx = devmatch_ok ?
   127fc:	f1ba 0f00 	cmp.w	sl, #0
   12800:	d003      	beq.n	1280a <isr+0x76a>
   12802:	4658      	mov	r0, fp
   12804:	f003 fd3c 	bl	16280 <ctrl_rl_irk_idx>
   12808:	e7e2      	b.n	127d0 <isr+0x730>
   1280a:	f04f 09ff 	mov.w	r9, #255	; 0xff
   1280e:	e7e0      	b.n	127d2 <isr+0x732>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
   12810:	f1b8 0f00 	cmp.w	r8, #0
   12814:	d005      	beq.n	12822 <isr+0x782>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   12816:	4649      	mov	r1, r9
   12818:	4650      	mov	r0, sl
   1281a:	f003 fe7f 	bl	1651c <ctrl_rl_idx_allowed>
   1281e:	2800      	cmp	r0, #0
   12820:	d0dc      	beq.n	127dc <isr+0x73c>
	bool dir_report = false;
   12822:	2300      	movs	r3, #0
   12824:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   12828:	f894 2d29 	ldrb.w	r2, [r4, #3369]	; 0xd29
   1282c:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
   12830:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
	if(pdu_adv_rx->type == 0x07){			//PDU_ADV_TYPE_EXT_IND
   12834:	7a3b      	ldrb	r3, [r7, #8]
   12836:	f003 030f 	and.w	r3, r3, #15
   1283a:	2b07      	cmp	r3, #7
   1283c:	f040 8082 	bne.w	12944 <isr+0x8a4>
		if(h->adv_addr){
   12840:	7afb      	ldrb	r3, [r7, #11]
   12842:	f8df 8350 	ldr.w	r8, [pc, #848]	; 12b94 <isr+0xaf4>
   12846:	07d8      	lsls	r0, r3, #31
			ptr += BDADDR_SIZE;
   12848:	bf4c      	ite	mi
   1284a:	f107 0612 	addmi.w	r6, r7, #18
		ptr = (u8_t *)h + sizeof(*h);
   1284e:	f107 060c 	addpl.w	r6, r7, #12
		if(h->tgt_addr){
   12852:	079a      	lsls	r2, r3, #30
			ptr += BDADDR_SIZE;
   12854:	bf48      	it	mi
   12856:	3606      	addmi	r6, #6
		if(h->adi){
   12858:	f013 0f08 	tst.w	r3, #8
			sid = (u8_t)adi_ptr->sid;
   1285c:	bf1e      	ittt	ne
   1285e:	7873      	ldrbne	r3, [r6, #1]
   12860:	f3c3 1303 	ubfxne	r3, r3, #4, #4
   12864:	f888 3000 	strbne.w	r3, [r8]
		if(sid == 0x04){
   12868:	f898 3000 	ldrb.w	r3, [r8]
			ptr += sizeof(*adi_ptr);
   1286c:	bf18      	it	ne
   1286e:	3602      	addne	r6, #2
		if(sid == 0x04){
   12870:	2b04      	cmp	r3, #4
   12872:	d11d      	bne.n	128b0 <isr+0x810>
			stop_time_int = k_cycle_get_32();
   12874:	f7f0 fde2 	bl	343c <_timer_cycle_get_32>
   12878:	4bbb      	ldr	r3, [pc, #748]	; (12b68 <isr+0xac8>)
   1287a:	6018      	str	r0, [r3, #0]
			event_time_int = (stop_time_int - start_time_int);
   1287c:	4bbb      	ldr	r3, [pc, #748]	; (12b6c <isr+0xacc>)
   1287e:	681b      	ldr	r3, [r3, #0]
   12880:	eba0 0e03 	sub.w	lr, r0, r3
   12884:	4bba      	ldr	r3, [pc, #744]	; (12b70 <isr+0xad0>)
   12886:	f8c3 e000 	str.w	lr, [r3]
			Time_difference_int = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_int))/1000;
   1288a:	4bba      	ldr	r3, [pc, #744]	; (12b74 <isr+0xad4>)
   1288c:	681a      	ldr	r2, [r3, #0]
   1288e:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
   12892:	fb82 230b 	smull	r2, r3, r2, fp
   12896:	fba2 010e 	umull	r0, r1, r2, lr
   1289a:	fb0e 1103 	mla	r1, lr, r3, r1
   1289e:	4bb6      	ldr	r3, [pc, #728]	; (12b78 <isr+0xad8>)
   128a0:	681a      	ldr	r2, [r3, #0]
   128a2:	17d3      	asrs	r3, r2, #31
   128a4:	f7ed fce0 	bl	268 <__aeabi_uldivmod>
   128a8:	4bb4      	ldr	r3, [pc, #720]	; (12b7c <isr+0xadc>)
   128aa:	fbb0 f0fb 	udiv	r0, r0, fp
   128ae:	6018      	str	r0, [r3, #0]
		if((h->aux_ptr && !aux_scan && (sid == 0x02)) || 
   128b0:	7afb      	ldrb	r3, [r7, #11]
   128b2:	f013 0310 	ands.w	r3, r3, #16
   128b6:	d006      	beq.n	128c6 <isr+0x826>
   128b8:	4ab1      	ldr	r2, [pc, #708]	; (12b80 <isr+0xae0>)
   128ba:	7812      	ldrb	r2, [r2, #0]
   128bc:	b91a      	cbnz	r2, 128c6 <isr+0x826>
   128be:	f898 2000 	ldrb.w	r2, [r8]
   128c2:	2a02      	cmp	r2, #2
   128c4:	d005      	beq.n	128d2 <isr+0x832>
   128c6:	f898 2000 	ldrb.w	r2, [r8]
   128ca:	2a04      	cmp	r2, #4
   128cc:	d13a      	bne.n	12944 <isr+0x8a4>
			((sid == 0x04) && h->aux_ptr)){
   128ce:	2b00      	cmp	r3, #0
   128d0:	d038      	beq.n	12944 <isr+0x8a4>
			aux_scan = 0x01;
   128d2:	4bab      	ldr	r3, [pc, #684]	; (12b80 <isr+0xae0>)
   128d4:	2201      	movs	r2, #1
   128d6:	701a      	strb	r2, [r3, #0]
			_radio.ext_scanner.chan_index = ap->chan_idx;
   128d8:	7833      	ldrb	r3, [r6, #0]
   128da:	f3c3 0305 	ubfx	r3, r3, #0, #6
   128de:	f884 3c90 	strb.w	r3, [r4, #3216]	; 0xc90
			_radio.ext_scanner.chan_off	= ap->offs;
   128e2:	78b3      	ldrb	r3, [r6, #2]
   128e4:	7870      	ldrb	r0, [r6, #1]
			_radio.ext_scanner.off_unit	= ap->offs_units;
   128e6:	7832      	ldrb	r2, [r6, #0]
			_radio.ext_scanner.chan_off	= ap->offs;
   128e8:	f003 031f 	and.w	r3, r3, #31
   128ec:	ea40 2e03 	orr.w	lr, r0, r3, lsl #8
			_radio.ext_scanner.off_unit	= ap->offs_units;
   128f0:	f3c2 12c0 	ubfx	r2, r2, #7, #1
			_radio.ext_scanner.chan_off	= ap->offs;
   128f4:	4ba3      	ldr	r3, [pc, #652]	; (12b84 <isr+0xae4>)
			_radio.ext_scanner.off_unit	= ap->offs_units;
   128f6:	f884 2cb4 	strb.w	r2, [r4, #3252]	; 0xcb4
			_radio.ext_scanner.chan_off	= ap->offs;
   128fa:	fa1f f08e 	uxth.w	r0, lr
			if(_radio.ext_scanner.off_unit == 0 ){
   128fe:	f012 0fff 	tst.w	r2, #255	; 0xff
			_radio.ext_scanner.chan_off	= ap->offs;
   12902:	f04f 0100 	mov.w	r1, #0
   12906:	e9c3 0100 	strd	r0, r1, [r3]
			_radio.ext_scanner.chan_off_debug = ap->offs;
   1290a:	e9c3 0102 	strd	r0, r1, [r3, #8]
				_radio.ext_scanner.chan_off *= 30;
   1290e:	bf0b      	itete	eq
   12910:	221e      	moveq	r2, #30
				_radio.ext_scanner.chan_off *= 300;
   12912:	f44f 7096 	movne.w	r0, #300	; 0x12c
				_radio.ext_scanner.chan_off *= 30;
   12916:	fbae 0102 	umulleq	r0, r1, lr, r2
				_radio.ext_scanner.chan_off *= 300;
   1291a:	fbae 0100 	umullne	r0, r1, lr, r0
   1291e:	e9c3 0100 	strd	r0, r1, [r3]
			_radio.ext_scanner.chan_off_calculation = _radio.ext_scanner.chan_off;
   12922:	e9d3 0100 	ldrd	r0, r1, [r3]
   12926:	4b98      	ldr	r3, [pc, #608]	; (12b88 <isr+0xae8>)
   12928:	e9c3 0100 	strd	r0, r1, [r3]
			start_time_ticker = k_cycle_get_32();
   1292c:	f7f0 fd86 	bl	343c <_timer_cycle_get_32>
   12930:	4b96      	ldr	r3, [pc, #600]	; (12b8c <isr+0xaec>)
   12932:	6018      	str	r0, [r3, #0]
			start_time_int = k_cycle_get_32();
   12934:	f7f0 fd82 	bl	343c <_timer_cycle_get_32>
   12938:	4b8c      	ldr	r3, [pc, #560]	; (12b6c <isr+0xacc>)
   1293a:	6018      	str	r0, [r3, #0]
		_radio.ext_scanner.ticks_now = ticker_ticks_now_get();
   1293c:	f7f9 f858 	bl	b9f0 <ticker_ticks_now_get>
   12940:	f8c4 0cec 	str.w	r0, [r4, #3308]	; 0xcec
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   12944:	f8d4 3c54 	ldr.w	r3, [r4, #3156]	; 0xc54
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   12948:	f107 0608 	add.w	r6, r7, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   1294c:	2b00      	cmp	r3, #0
   1294e:	f000 81d4 	beq.w	12cfa <isr+0xc5a>
   12952:	f894 3d6a 	ldrb.w	r3, [r4, #3434]	; 0xd6a
   12956:	b133      	cbz	r3, 12966 <isr+0x8c6>
				      (_radio.fc_req == _radio.fc_ack)) &&
   12958:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   1295c:	f894 2d69 	ldrb.w	r2, [r4, #3433]	; 0xd69
   12960:	429a      	cmp	r2, r3
   12962:	f040 81ca 	bne.w	12cfa <isr+0xc5a>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   12966:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   1296a:	f3c3 1000 	ubfx	r0, r3, #4, #1
   1296e:	2800      	cmp	r0, #0
   12970:	f000 81b5 	beq.w	12cde <isr+0xc3e>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   12974:	7a38      	ldrb	r0, [r7, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   12976:	f010 000f 	ands.w	r0, r0, #15
   1297a:	f040 81f3 	bne.w	12d64 <isr+0xcc4>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   1297e:	f004 fe67 	bl	17650 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   12982:	f8d4 3c28 	ldr.w	r3, [r4, #3112]	; 0xc28
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   12986:	f200 2816 	addw	r8, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   1298a:	4881      	ldr	r0, [pc, #516]	; (12b90 <isr+0xaf0>)
   1298c:	2207      	movs	r2, #7
   1298e:	fba3 0100 	umull	r0, r1, r3, r0
   12992:	fb02 1103 	mla	r1, r2, r3, r1
   12996:	a372      	add	r3, pc, #456	; (adr r3, 12b60 <isr+0xac0>)
   12998:	e9d3 2300 	ldrd	r2, r3, [r3]
   1299c:	f7ed fc64 	bl	268 <__aeabi_uldivmod>
   129a0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
   129a4:	4580      	cmp	r8, r0
   129a6:	f080 81a8 	bcs.w	12cfa <isr+0xc5a>
			node_rx = packet_rx_reserve_get(4);
   129aa:	2004      	movs	r0, #4
   129ac:	f7fa fd92 	bl	d4d4 <packet_rx_reserve_get>
		if (node_rx == 0) {
   129b0:	4680      	mov	r8, r0
   129b2:	2800      	cmp	r0, #0
   129b4:	f43f af17 	beq.w	127e6 <isr+0x746>
		_radio.state = STATE_STOP;
   129b8:	2304      	movs	r3, #4
   129ba:	7523      	strb	r3, [r4, #20]
		_radio.scanner.conn = NULL;
   129bc:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
   129be:	f8d4 6c54 	ldr.w	r6, [r4, #3156]	; 0xc54
		_radio.scanner.conn = NULL;
   129c2:	f8c4 3c54 	str.w	r3, [r4, #3156]	; 0xc54
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   129c6:	f004 fcc5 	bl	17354 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   129ca:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
   129cc:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
   129d0:	f043 0325 	orr.w	r3, r3, #37	; 0x25
   129d4:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   129d6:	7a3b      	ldrb	r3, [r7, #8]
   129d8:	7802      	ldrb	r2, [r0, #0]
   129da:	f3c3 1380 	ubfx	r3, r3, #6, #1
   129de:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
   129e2:	2322      	movs	r3, #34	; 0x22
   129e4:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   129e6:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   129e8:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
   129ea:	4648      	mov	r0, r9
   129ec:	f003 fc0a 	bl	16204 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   129f0:	f894 3c2e 	ldrb.w	r3, [r4, #3118]	; 0xc2e
		lrpa = ctrl_lrpa_get(rl_idx);
   129f4:	4601      	mov	r1, r0
   129f6:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
   129f8:	f013 0f01 	tst.w	r3, #1
   129fc:	f810 3b02 	ldrb.w	r3, [r0], #2
   12a00:	f000 81ba 	beq.w	12d78 <isr+0xcd8>
   12a04:	2900      	cmp	r1, #0
   12a06:	f000 81b7 	beq.w	12d78 <isr+0xcd8>
			pdu_adv_tx->tx_addr = 1;
   12a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12a0e:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   12a10:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   12a12:	f7ed ff6a 	bl	8ea <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
   12a16:	f105 0308 	add.w	r3, r5, #8
   12a1a:	4618      	mov	r0, r3
   12a1c:	2206      	movs	r2, #6
   12a1e:	f107 010a 	add.w	r1, r7, #10
   12a22:	930a      	str	r3, [sp, #40]	; 0x28
   12a24:	f7ed ff61 	bl	8ea <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
   12a28:	2204      	movs	r2, #4
   12a2a:	f106 0110 	add.w	r1, r6, #16
   12a2e:	f105 000e 	add.w	r0, r5, #14
   12a32:	f7ed ff5a 	bl	8ea <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
   12a36:	2203      	movs	r2, #3
   12a38:	f106 0114 	add.w	r1, r6, #20
   12a3c:	f105 0012 	add.w	r0, r5, #18
   12a40:	f7ed ff53 	bl	8ea <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
   12a44:	2301      	movs	r3, #1
   12a46:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
   12a48:	f8b4 3c48 	ldrh.w	r3, [r4, #3144]	; 0xc48
		conn_interval_us =
   12a4c:	f240 42e2 	movw	r2, #1250	; 0x4e2
   12a50:	4353      	muls	r3, r2
   12a52:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   12a54:	f004 fdfc 	bl	17650 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
   12a58:	68e2      	ldr	r2, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
   12a5a:	f8d4 bc58 	ldr.w	fp, [r4, #3160]	; 0xc58
		if (!_radio.remainder_anchor ||
   12a5e:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   12a60:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
   12a64:	bfd8      	it	le
   12a66:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
   12a6a:	f1bb 0f00 	cmp.w	fp, #0
   12a6e:	f040 818e 	bne.w	12d8e <isr+0xcee>
			pdu_adv_tx->connect_ind.win_offset = 0;
   12a72:	f885 b016 	strb.w	fp, [r5, #22]
   12a76:	f885 b017 	strb.w	fp, [r5, #23]
   12a7a:	469b      	mov	fp, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   12a7c:	2100      	movs	r1, #0
   12a7e:	4608      	mov	r0, r1
   12a80:	f004 fbea 	bl	17258 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   12a84:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   12a86:	ebab 0b00 	sub.w	fp, fp, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   12a8a:	4608      	mov	r0, r1
   12a8c:	f004 fbed 	bl	1726a <radio_tx_chain_delay_get>
   12a90:	ebab 0000 	sub.w	r0, fp, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
   12a94:	f100 031e 	add.w	r3, r0, #30
   12a98:	930c      	str	r3, [sp, #48]	; 0x30
		pdu_adv_tx->connect_ind.interval =
   12a9a:	f8b4 3c48 	ldrh.w	r3, [r4, #3144]	; 0xc48
   12a9e:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
   12aa0:	f8b4 3c4a 	ldrh.w	r3, [r4, #3146]	; 0xc4a
   12aa4:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
   12aa6:	f8b4 3c4c 	ldrh.w	r3, [r4, #3148]	; 0xc4c
   12aaa:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
   12aac:	f106 0117 	add.w	r1, r6, #23
   12ab0:	2205      	movs	r2, #5
   12ab2:	f105 001e 	add.w	r0, r5, #30
   12ab6:	f7ed ff18 	bl	8ea <memcpy>
		pdu_adv_tx->connect_ind.hop =
   12aba:	7fb2      	ldrb	r2, [r6, #30]
   12abc:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   12ac0:	f362 0304 	bfi	r3, r2, #0, #5
   12ac4:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
   12ac8:	f894 2d08 	ldrb.w	r2, [r4, #3336]	; 0xd08
   12acc:	f362 1347 	bfi	r3, r2, #5, #3
   12ad0:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
   12ad4:	f004 fc58 	bl	17388 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
   12ad8:	4628      	mov	r0, r5
   12ada:	f004 fbb7 	bl	1724c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   12ade:	f004 fc01 	bl	172e4 <radio_is_ready>
   12ae2:	4683      	mov	fp, r0
   12ae4:	2800      	cmp	r0, #0
   12ae6:	f47f ab33 	bne.w	12150 <isr+0xb0>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   12aea:	f44f 72aa 	mov.w	r2, #340	; 0x154
   12aee:	f8d4 1cf0 	ldr.w	r1, [r4, #3312]	; 0xcf0
   12af2:	4630      	mov	r0, r6
   12af4:	f7f7 ffd1 	bl	aa9a <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   12af8:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   12afa:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   12afc:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
   12b00:	f888 b00b 	strb.w	fp, [r8, #11]
		radio_le_conn_cmplt->role = 0x00;
   12b04:	f888 b00c 	strb.w	fp, [r8, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   12b08:	f888 3004 	strb.w	r3, [r8, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   12b0c:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
   12b10:	f8a8 0006 	strh.w	r0, [r8, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   12b14:	f3c3 1380 	ubfx	r3, r3, #6, #1
   12b18:	f888 301a 	strb.w	r3, [r8, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   12b1c:	2206      	movs	r2, #6
   12b1e:	f108 001b 	add.w	r0, r8, #27
   12b22:	f7ed fee2 	bl	8ea <memcpy>
   12b26:	f108 0b0e 	add.w	fp, r8, #14
   12b2a:	f108 0314 	add.w	r3, r8, #20
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
   12b2e:	f1ba 0f00 	cmp.w	sl, #0
   12b32:	f000 813c 	beq.w	12dae <isr+0xd0e>
   12b36:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   12b3a:	f000 8138 	beq.w	12dae <isr+0xd0e>
			ll_rl_id_addr_get(rl_idx,
   12b3e:	465a      	mov	r2, fp
   12b40:	f108 010d 	add.w	r1, r8, #13
   12b44:	4648      	mov	r0, r9
   12b46:	930d      	str	r3, [sp, #52]	; 0x34
   12b48:	f003 fd06 	bl	16558 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   12b4c:	f898 200d 	ldrb.w	r2, [r8, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   12b50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12b52:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
   12b54:	3202      	adds	r2, #2
   12b56:	f888 200d 	strb.w	r2, [r8, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   12b5a:	4618      	mov	r0, r3
   12b5c:	2206      	movs	r2, #6
   12b5e:	e01b      	b.n	12b98 <isr+0xaf8>
   12b60:	3b9aca00 	.word	0x3b9aca00
   12b64:	00000000 	.word	0x00000000
   12b68:	200048e8 	.word	0x200048e8
   12b6c:	2000485c 	.word	0x2000485c
   12b70:	2000491c 	.word	0x2000491c
   12b74:	2000e8cc 	.word	0x2000e8cc
   12b78:	2000e8c8 	.word	0x2000e8c8
   12b7c:	20004944 	.word	0x20004944
   12b80:	20001928 	.word	0x20001928
   12b84:	20001848 	.word	0x20001848
   12b88:	20001858 	.word	0x20001858
   12b8c:	20004914 	.word	0x20004914
   12b90:	1afd498d 	.word	0x1afd498d
   12b94:	20004908 	.word	0x20004908
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   12b98:	f7ed fea7 	bl	8ea <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
   12b9c:	f8b4 3c48 	ldrh.w	r3, [r4, #3144]	; 0xc48
   12ba0:	f8a8 3021 	strh.w	r3, [r8, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
   12ba4:	f8b4 3c4a 	ldrh.w	r3, [r4, #3146]	; 0xc4a
   12ba8:	f8a8 3023 	strh.w	r3, [r8, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
   12bac:	f8b4 3c4c 	ldrh.w	r3, [r4, #3148]	; 0xc4c
   12bb0:	f8a8 3025 	strh.w	r3, [r8, #37]	; 0x25
			pdu_adv_tx->connect_ind.sca;
   12bb4:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   12bb8:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   12bbc:	f888 3027 	strb.w	r3, [r8, #39]	; 0x27
		rx_fc_lock(conn->handle);
   12bc0:	8c30      	ldrh	r0, [r6, #32]
   12bc2:	f7fb fd5f 	bl	e684 <rx_fc_lock>
		packet_rx_enqueue();
   12bc6:	f7fb fe79 	bl	e8bc <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
   12bca:	2003      	movs	r0, #3
   12bcc:	f7fa fc82 	bl	d4d4 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   12bd0:	2800      	cmp	r0, #0
   12bd2:	f43f aabd 	beq.w	12150 <isr+0xb0>
			node_rx->hdr.handle = conn->handle;
   12bd6:	8c33      	ldrh	r3, [r6, #32]
   12bd8:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   12bda:	230b      	movs	r3, #11
   12bdc:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
   12bde:	7a3b      	ldrb	r3, [r7, #8]
   12be0:	f013 0320 	ands.w	r3, r3, #32
   12be4:	d00e      	beq.n	12c04 <isr+0xb64>
					((u16_t)conn->access_addr[1] << 8) |
   12be6:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
   12be8:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
   12bea:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
   12bec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
   12bf0:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
   12bf2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
   12bf6:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   12bf8:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
   12bfa:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
   12bfe:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
   12c00:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   12c02:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
   12c04:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
   12c06:	f7fb fe59 	bl	e8bc <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
   12c0a:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   12c0c:	f8d4 7d6c 	ldr.w	r7, [r4, #3436]	; 0xd6c
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
   12c10:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
   12c12:	f8d4 3c50 	ldr.w	r3, [r4, #3152]	; 0xc50
   12c16:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
   12c18:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12c1a:	f44f 63ef 	mov.w	r3, #1912	; 0x778
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
   12c1e:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   12c20:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12c22:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
   12c26:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12c28:	4629      	mov	r1, r5
   12c2a:	9300      	str	r3, [sp, #0]
   12c2c:	4628      	mov	r0, r5
   12c2e:	4bb6      	ldr	r3, [pc, #728]	; (12f08 <isr+0xe68>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   12c30:	f8df a2e8 	ldr.w	sl, [pc, #744]	; 12f1c <isr+0xe7c>
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
   12c34:	bf38      	it	cc
   12c36:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12c38:	f7f8 fe0a 	bl	b850 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
   12c3c:	f240 7179 	movw	r1, #1913	; 0x779
   12c40:	f7fc f938 	bl	eeb4 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12c44:	462b      	mov	r3, r5
   12c46:	2204      	movs	r2, #4
   12c48:	4629      	mov	r1, r5
   12c4a:	9500      	str	r5, [sp, #0]
   12c4c:	4628      	mov	r0, r5
   12c4e:	f7f8 fdff 	bl	b850 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   12c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12c54:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12c58:	68a3      	ldr	r3, [r4, #8]
   12c5a:	f896 4020 	ldrb.w	r4, [r6, #32]
		ticker_status =
   12c5e:	9606      	str	r6, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12c60:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
   12c64:	f44f 63f2 	mov.w	r3, #1936	; 0x790
   12c68:	9308      	str	r3, [sp, #32]
   12c6a:	4ba8      	ldr	r3, [pc, #672]	; (12f0c <isr+0xe6c>)
   12c6c:	9307      	str	r3, [sp, #28]
   12c6e:	4ba8      	ldr	r3, [pc, #672]	; (12f10 <isr+0xe70>)
   12c70:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12c72:	68f3      	ldr	r3, [r6, #12]
		ticker_status =
   12c74:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12c76:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
   12c78:	4640      	mov	r0, r8
   12c7a:	a3a1      	add	r3, pc, #644	; (adr r3, 12f00 <isr+0xe60>)
   12c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12c80:	4649      	mov	r1, r9
		ticker_status =
   12c82:	9704      	str	r7, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   12c84:	f7ed faf0 	bl	268 <__aeabi_uldivmod>
   12c88:	4610      	mov	r0, r2
   12c8a:	4619      	mov	r1, r3
   12c8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12c90:	2300      	movs	r3, #0
   12c92:	f7ed fae9 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   12c96:	a39a      	add	r3, pc, #616	; (adr r3, 12f00 <isr+0xe60>)
   12c98:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12c9c:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   12c9e:	4649      	mov	r1, r9
   12ca0:	4640      	mov	r0, r8
   12ca2:	f7ed fae1 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
   12ca6:	990c      	ldr	r1, [sp, #48]	; 0x30
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   12ca8:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
   12caa:	a395      	add	r3, pc, #596	; (adr r3, 12f00 <isr+0xe60>)
   12cac:	e9d3 2300 	ldrd	r2, r3, [r3]
   12cb0:	fba1 010a 	umull	r0, r1, r1, sl
   12cb4:	f7ed fad8 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12cb8:	3407      	adds	r4, #7
		ticker_status =
   12cba:	b2e4      	uxtb	r4, r4
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12cbc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
   12cc0:	9000      	str	r0, [sp, #0]
   12cc2:	465b      	mov	r3, fp
   12cc4:	4622      	mov	r2, r4
   12cc6:	e51b      	b.n	12700 <isr+0x660>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   12cc8:	f1b8 0f00 	cmp.w	r8, #0
   12ccc:	f47f ada9 	bne.w	12822 <isr+0x782>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
   12cd0:	4648      	mov	r0, r9
   12cd2:	f003 faf1 	bl	162b8 <ctrl_irk_whitelisted>
		if (crc_ok &&
   12cd6:	2800      	cmp	r0, #0
   12cd8:	f43f ad85 	beq.w	127e6 <isr+0x746>
   12cdc:	e5a1      	b.n	12822 <isr+0x782>
	if (rl_idx != FILTER_IDX_NONE) {
   12cde:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   12ce2:	d02e      	beq.n	12d42 <isr+0xca2>
		return (rl_idx == _radio.scanner.rl_idx);
   12ce4:	f894 0c2f 	ldrb.w	r0, [r4, #3119]	; 0xc2f
   12ce8:	eba0 0e09 	sub.w	lr, r0, r9
   12cec:	f1de 0000 	rsbs	r0, lr, #0
   12cf0:	eb40 000e 	adc.w	r0, r0, lr
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   12cf4:	2800      	cmp	r0, #0
   12cf6:	f47f ae3d 	bne.w	12974 <isr+0x8d4>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   12cfa:	7a38      	ldrb	r0, [r7, #8]
   12cfc:	f010 000f 	ands.w	r0, r0, #15
   12d00:	d065      	beq.n	12dce <isr+0xd2e>
   12d02:	2807      	cmp	r0, #7
   12d04:	d161      	bne.n	12dca <isr+0xd2a>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
   12d06:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
   12d0a:	075a      	lsls	r2, r3, #29
   12d0c:	d15f      	bne.n	12dce <isr+0xd2e>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   12d0e:	7a3b      	ldrb	r3, [r7, #8]
					&dir_report))) ||
   12d10:	f003 020b 	and.w	r2, r3, #11
   12d14:	2a02      	cmp	r2, #2
   12d16:	f040 80cd 	bne.w	12eb4 <isr+0xe14>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   12d1a:	7a7b      	ldrb	r3, [r7, #9]
   12d1c:	2b00      	cmp	r3, #0
   12d1e:	f43f ad62 	beq.w	127e6 <isr+0x746>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   12d22:	f8d4 3c54 	ldr.w	r3, [r4, #3156]	; 0xc54
   12d26:	2b00      	cmp	r3, #0
   12d28:	f47f ad5d 	bne.w	127e6 <isr+0x746>
		err = isr_rx_scan_report(rssi_ready,
   12d2c:	f1ba 0f00 	cmp.w	sl, #0
   12d30:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   12d34:	bf14      	ite	ne
   12d36:	4649      	movne	r1, r9
   12d38:	21ff      	moveq	r1, #255	; 0xff
   12d3a:	4628      	mov	r0, r5
   12d3c:	f7fb fe06 	bl	e94c <isr_rx_scan_report>
   12d40:	e551      	b.n	127e6 <isr+0x746>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   12d42:	7a3a      	ldrb	r2, [r7, #8]
   12d44:	f3c3 1380 	ubfx	r3, r3, #6, #1
   12d48:	f3c2 1280 	ubfx	r2, r2, #6, #1
   12d4c:	4293      	cmp	r3, r2
   12d4e:	d1d1      	bne.n	12cf4 <isr+0xc54>
		(memcmp(&_radio.scanner.adv_addr[0],
   12d50:	2206      	movs	r2, #6
   12d52:	f107 010a 	add.w	r1, r7, #10
   12d56:	486f      	ldr	r0, [pc, #444]	; (12f14 <isr+0xe74>)
   12d58:	f7ed fd9a 	bl	890 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   12d5c:	fab0 f080 	clz	r0, r0
   12d60:	0940      	lsrs	r0, r0, #5
   12d62:	e7c7      	b.n	12cf4 <isr+0xc54>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   12d64:	2801      	cmp	r0, #1
   12d66:	d1cc      	bne.n	12d02 <isr+0xc62>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
   12d68:	2300      	movs	r3, #0
   12d6a:	464a      	mov	r2, r9
   12d6c:	4631      	mov	r1, r6
   12d6e:	f7fb fc3d 	bl	e5ec <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
   12d72:	2800      	cmp	r0, #0
   12d74:	d0c1      	beq.n	12cfa <isr+0xc5a>
   12d76:	e602      	b.n	1297e <isr+0x8de>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   12d78:	f894 2c2d 	ldrb.w	r2, [r4, #3117]	; 0xc2d
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   12d7c:	4966      	ldr	r1, [pc, #408]	; (12f18 <isr+0xe78>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   12d7e:	09d2      	lsrs	r2, r2, #7
   12d80:	f362 1386 	bfi	r3, r2, #6, #1
   12d84:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   12d86:	2206      	movs	r2, #6
   12d88:	e643      	b.n	12a12 <isr+0x972>
				conn_space_us += conn_interval_us;
   12d8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12d8c:	4493      	add	fp, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
   12d8e:	f1bb 0f00 	cmp.w	fp, #0
   12d92:	dbfa      	blt.n	12d8a <isr+0xcea>
   12d94:	459b      	cmp	fp, r3
   12d96:	d3f8      	bcc.n	12d8a <isr+0xcea>
				(conn_space_us - conn_offset_us) / 1250;
   12d98:	ebab 0303 	sub.w	r3, fp, r3
			pdu_adv_tx->connect_ind.win_offset =
   12d9c:	f240 42e2 	movw	r2, #1250	; 0x4e2
   12da0:	fbb3 f3f2 	udiv	r3, r3, r2
   12da4:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
   12da6:	7d6b      	ldrb	r3, [r5, #21]
   12da8:	3301      	adds	r3, #1
   12daa:	756b      	strb	r3, [r5, #21]
   12dac:	e666      	b.n	12a7c <isr+0x9dc>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   12dae:	2206      	movs	r2, #6
   12db0:	2100      	movs	r1, #0
   12db2:	4618      	mov	r0, r3
   12db4:	f7ed fdc5 	bl	942 <memset>
				pdu_adv_tx->rx_addr;
   12db8:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   12dba:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
   12dbc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
   12dc0:	f888 300d 	strb.w	r3, [r8, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   12dc4:	2206      	movs	r2, #6
   12dc6:	4658      	mov	r0, fp
   12dc8:	e6e6      	b.n	12b98 <isr+0xaf8>
		   (_radio.scanner.phy)) ||
   12dca:	2806      	cmp	r0, #6
   12dcc:	d165      	bne.n	12e9a <isr+0xdfa>
		 (_radio.scanner.type != 0) &&
   12dce:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   12dd2:	071b      	lsls	r3, r3, #28
   12dd4:	d55e      	bpl.n	12e94 <isr+0xdf4>
		 (_radio.scanner.type != 0) &&
   12dd6:	f8d4 2c54 	ldr.w	r2, [r4, #3156]	; 0xc54
   12dda:	2a00      	cmp	r2, #0
   12ddc:	d15a      	bne.n	12e94 <isr+0xdf4>
		err = isr_rx_scan_report(rssi_ready,
   12dde:	f1ba 0f00 	cmp.w	sl, #0
   12de2:	bf14      	ite	ne
   12de4:	4649      	movne	r1, r9
   12de6:	21ff      	moveq	r1, #255	; 0xff
   12de8:	4628      	mov	r0, r5
   12dea:	f7fb fdaf 	bl	e94c <isr_rx_scan_report>
		if (err) {
   12dee:	2800      	cmp	r0, #0
   12df0:	f47f acf9 	bne.w	127e6 <isr+0x746>
		if(pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND){
   12df4:	7a3b      	ldrb	r3, [r7, #8]
   12df6:	f003 030f 	and.w	r3, r3, #15
   12dfa:	2b07      	cmp	r3, #7
   12dfc:	d101      	bne.n	12e02 <isr+0xd62>
			pdu_adv_tx = (void *)radio_pkt_scratch_get();
   12dfe:	f004 faa9 	bl	17354 <radio_pkt_scratch_get>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   12e02:	f004 faa7 	bl	17354 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   12e06:	7803      	ldrb	r3, [r0, #0]
   12e08:	2203      	movs	r2, #3
   12e0a:	f362 0303 	bfi	r3, r2, #0, #4
   12e0e:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   12e10:	7a3b      	ldrb	r3, [r7, #8]
   12e12:	7802      	ldrb	r2, [r0, #0]
   12e14:	f3c3 1380 	ubfx	r3, r3, #6, #1
   12e18:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
   12e1c:	230c      	movs	r3, #12
   12e1e:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   12e20:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   12e22:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
   12e24:	4648      	mov	r0, r9
   12e26:	f003 f9ed 	bl	16204 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   12e2a:	f894 3c2e 	ldrb.w	r3, [r4, #3118]	; 0xc2e
		lrpa = ctrl_lrpa_get(rl_idx);
   12e2e:	4601      	mov	r1, r0
   12e30:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
   12e32:	f013 0f01 	tst.w	r3, #1
   12e36:	f810 3b02 	ldrb.w	r3, [r0], #2
   12e3a:	d022      	beq.n	12e82 <isr+0xde2>
   12e3c:	b309      	cbz	r1, 12e82 <isr+0xde2>
			pdu_adv_tx->tx_addr = 1;
   12e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12e42:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   12e44:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   12e46:	f7ed fd50 	bl	8ea <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
   12e4a:	2206      	movs	r2, #6
   12e4c:	f107 010a 	add.w	r1, r7, #10
   12e50:	f105 0008 	add.w	r0, r5, #8
   12e54:	f7ed fd49 	bl	8ea <memcpy>
		_radio.scanner.state = 1;
   12e58:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
   12e5c:	f043 0302 	orr.w	r3, r3, #2
   12e60:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
		radio_tmr_tifs_set(RADIO_TIFS);
   12e64:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
   12e66:	2302      	movs	r3, #2
   12e68:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
   12e6a:	f004 fb15 	bl	17498 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   12e6e:	2000      	movs	r0, #0
   12e70:	f004 fa74 	bl	1735c <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
   12e74:	4628      	mov	r0, r5
   12e76:	f004 f9e9 	bl	1724c <radio_pkt_tx_set>
		radio_tmr_end_capture();
   12e7a:	f004 fbd7 	bl	1762c <radio_tmr_end_capture>
   12e7e:	f7ff ba77 	b.w	12370 <isr+0x2d0>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   12e82:	f894 2c2d 	ldrb.w	r2, [r4, #3117]	; 0xc2d
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   12e86:	4924      	ldr	r1, [pc, #144]	; (12f18 <isr+0xe78>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   12e88:	09d2      	lsrs	r2, r2, #7
   12e8a:	f362 1386 	bfi	r3, r2, #6, #1
   12e8e:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   12e90:	2206      	movs	r2, #6
   12e92:	e7d8      	b.n	12e46 <isr+0xda6>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   12e94:	2800      	cmp	r0, #0
   12e96:	f43f af40 	beq.w	12d1a <isr+0xc7a>
   12e9a:	2801      	cmp	r0, #1
   12e9c:	f47f af37 	bne.w	12d0e <isr+0xc6e>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
   12ea0:	ab10      	add	r3, sp, #64	; 0x40
   12ea2:	464a      	mov	r2, r9
   12ea4:	4631      	mov	r1, r6
   12ea6:	2000      	movs	r0, #0
   12ea8:	f7fb fba0 	bl	e5ec <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   12eac:	2800      	cmp	r0, #0
   12eae:	f47f af34 	bne.w	12d1a <isr+0xc7a>
   12eb2:	e72c      	b.n	12d0e <isr+0xc6e>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   12eb4:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
   12eb8:	2b07      	cmp	r3, #7
   12eba:	d105      	bne.n	12ec8 <isr+0xe28>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
   12ebc:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
   12ec0:	0758      	lsls	r0, r3, #29
   12ec2:	f47f af2a 	bne.w	12d1a <isr+0xc7a>
   12ec6:	e48e      	b.n	127e6 <isr+0x746>
		   (_radio.scanner.phy)) ||
   12ec8:	2b04      	cmp	r3, #4
   12eca:	f47f ac8c 	bne.w	127e6 <isr+0x746>
		   (_radio.scanner.state != 0) &&
   12ece:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   12ed2:	0799      	lsls	r1, r3, #30
   12ed4:	f57f ac87 	bpl.w	127e6 <isr+0x746>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   12ed8:	f004 fa3c 	bl	17354 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   12edc:	7a3b      	ldrb	r3, [r7, #8]
   12ede:	7802      	ldrb	r2, [r0, #0]
   12ee0:	f3c3 1380 	ubfx	r3, r3, #6, #1
   12ee4:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   12ee8:	f47f ac7d 	bne.w	127e6 <isr+0x746>
		(memcmp(&sreq->scan_req.adv_addr[0],
   12eec:	2206      	movs	r2, #6
   12eee:	f107 010a 	add.w	r1, r7, #10
   12ef2:	3008      	adds	r0, #8
   12ef4:	f7ed fccc 	bl	890 <memcmp>
		   (_radio.scanner.state != 0) &&
   12ef8:	2800      	cmp	r0, #0
   12efa:	f43f af0e 	beq.w	12d1a <isr+0xc7a>
   12efe:	e472      	b.n	127e6 <isr+0x746>
   12f00:	1afd498d 	.word	0x1afd498d
   12f04:	00000007 	.word	0x00000007
   12f08:	0000eeb5 	.word	0x0000eeb5
   12f0c:	0000ef15 	.word	0x0000ef15
   12f10:	00010905 	.word	0x00010905
   12f14:	200017e6 	.word	0x200017e6
   12f18:	200017e0 	.word	0x200017e0
   12f1c:	3b9aca00 	.word	0x3b9aca00
	_radio.packet_counter++;
   12f20:	f894 3d00 	ldrb.w	r3, [r4, #3328]	; 0xd00
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   12f24:	f894 2d29 	ldrb.w	r2, [r4, #3369]	; 0xd29
	_radio.packet_counter++;
   12f28:	3301      	adds	r3, #1
   12f2a:	f884 3d00 	strb.w	r3, [r4, #3328]	; 0xd00
	u8_t rx_enqueue = 0;
   12f2e:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   12f30:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
	u8_t rx_enqueue = 0;
   12f34:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   12f38:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   12f3c:	2301      	movs	r3, #1
   12f3e:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
   12f42:	2f00      	cmp	r7, #0
   12f44:	f000 829f 	beq.w	13486 <isr+0x13e6>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
   12f48:	f8d4 5cfc 	ldr.w	r5, [r4, #3324]	; 0xcfc
   12f4c:	f898 1008 	ldrb.w	r1, [r8, #8]
   12f50:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   12f54:	f3c1 0180 	ubfx	r1, r1, #2, #1
   12f58:	f003 0201 	and.w	r2, r3, #1
   12f5c:	4291      	cmp	r1, r2
   12f5e:	f000 8181 	beq.w	13264 <isr+0x11c4>
		_radio.conn_curr->sn++;
   12f62:	f082 0201 	eor.w	r2, r2, #1
   12f66:	f362 0300 	bfi	r3, r2, #0, #1
   12f6a:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
   12f6e:	7ce3      	ldrb	r3, [r4, #19]
   12f70:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
   12f72:	bf02      	ittt	eq
   12f74:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
   12f78:	f043 0301 	orreq.w	r3, r3, #1
   12f7c:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
   12f80:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   12f84:	061a      	lsls	r2, r3, #24
   12f86:	f100 8168 	bmi.w	1325a <isr+0x11ba>
			node_tx = _radio.conn_curr->pkt_tx_head;
   12f8a:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
   12f8e:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
   12f92:	1d30      	adds	r0, r6, #4
   12f94:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
   12f98:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
   12f9c:	f1b9 0f00 	cmp.w	r9, #0
   12fa0:	f000 808e 	beq.w	130c0 <isr+0x1020>
				if (_radio.conn_curr->enc_tx) {
   12fa4:	069b      	lsls	r3, r3, #26
   12fa6:	d50b      	bpl.n	12fc0 <isr+0xf20>
					_radio.conn_curr->ccm_tx.counter++;
   12fa8:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
   12fac:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
   12fb0:	f11b 0201 	adds.w	r2, fp, #1
   12fb4:	f14c 0300 	adc.w	r3, ip, #0
   12fb8:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
   12fbc:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
   12fc0:	5c43      	ldrb	r3, [r0, r1]
   12fc2:	f003 0303 	and.w	r3, r3, #3
   12fc6:	2b03      	cmp	r3, #3
   12fc8:	d17a      	bne.n	130c0 <isr+0x1020>
	switch (pdu_data_tx->llctrl.opcode) {
   12fca:	f89a 3003 	ldrb.w	r3, [sl, #3]
   12fce:	3b02      	subs	r3, #2
   12fd0:	2b16      	cmp	r3, #22
   12fd2:	d875      	bhi.n	130c0 <isr+0x1020>
   12fd4:	e8df f013 	tbh	[pc, r3, lsl #1]
   12fd8:	00580017 	.word	0x00580017
   12fdc:	007400aa 	.word	0x007400aa
   12fe0:	00740074 	.word	0x00740074
   12fe4:	00740074 	.word	0x00740074
   12fe8:	00810076 	.word	0x00810076
   12fec:	00b10074 	.word	0x00b10074
   12ff0:	00740074 	.word	0x00740074
   12ff4:	00740074 	.word	0x00740074
   12ff8:	00740074 	.word	0x00740074
   12ffc:	007400bb 	.word	0x007400bb
   13000:	00da00d3 	.word	0x00da00d3
   13004:	0105      	.short	0x0105
		_radio.state = STATE_CLOSE;
   13006:	2303      	movs	r3, #3
   13008:	7523      	strb	r3, [r4, #20]
		radio_disable();
   1300a:	f004 f94d 	bl	172a8 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   1300e:	f004 f969 	bl	172e4 <radio_is_ready>
   13012:	2800      	cmp	r0, #0
   13014:	f47f a89c 	bne.w	12150 <isr+0xb0>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
   13018:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
   1301c:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   13020:	2913      	cmp	r1, #19
   13022:	bf08      	it	eq
   13024:	2116      	moveq	r1, #22
   13026:	f7fb fc21 	bl	e86c <terminate_ind_rx_enqueue>
		terminate = 1;
   1302a:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   1302c:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   13030:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
   13034:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
   13036:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   1303a:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
   1303e:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   13040:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
   13044:	d11e      	bne.n	13084 <isr+0xfe4>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   13046:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   1304a:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
   1304e:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   13050:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
   13052:	f880 2150 	strb.w	r2, [r0, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   13056:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   1305a:	f040 80c9 	bne.w	131f0 <isr+0x1150>
		if (node_tx) {
   1305e:	b18e      	cbz	r6, 13084 <isr+0xfe4>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   13060:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
   13064:	f8d3 e000 	ldr.w	lr, [r3]
   13068:	f8c0 e13c 	str.w	lr, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   1306c:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
   1306e:	bf06      	itte	eq
   13070:	f8c0 2140 	streq.w	r2, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
   13074:	f8c0 2144 	streq.w	r2, [r0, #324]	; 0x144
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
   13078:	f8c0 e140 	strne.w	lr, [r0, #320]	; 0x140
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   1307c:	49d7      	ldr	r1, [pc, #860]	; (133dc <isr+0x133c>)
   1307e:	4630      	mov	r0, r6
   13080:	f7f7 fced 	bl	aa5e <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
   13084:	2600      	movs	r6, #0
   13086:	e0bc      	b.n	13202 <isr+0x1162>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   13088:	2208      	movs	r2, #8
   1308a:	f10a 010e 	add.w	r1, sl, #14
   1308e:	f105 0094 	add.w	r0, r5, #148	; 0x94
   13092:	f7ed fc2a 	bl	8ea <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   13096:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   1309a:	2204      	movs	r2, #4
   1309c:	f10a 0116 	add.w	r1, sl, #22
   130a0:	f500 7089 	add.w	r0, r0, #274	; 0x112
   130a4:	f7ed fc21 	bl	8ea <memcpy>
		_radio.conn_curr->pause_tx = 1;
   130a8:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   130ac:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   130b0:	f042 0208 	orr.w	r2, r2, #8
   130b4:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   130b8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
   130bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   130c0:	2500      	movs	r5, #0
   130c2:	e7b3      	b.n	1302c <isr+0xf8c>
		_radio.conn_curr->pause_tx = 1;
   130c4:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   130c8:	f043 0348 	orr.w	r3, r3, #72	; 0x48
   130cc:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   130d0:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
   130d4:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
   130d8:	e7f2      	b.n	130c0 <isr+0x1020>
		if (_radio.role == ROLE_MASTER) {
   130da:	f894 a013 	ldrb.w	sl, [r4, #19]
   130de:	fa5f fa8a 	uxtb.w	sl, sl
   130e2:	f1ba 0f04 	cmp.w	sl, #4
   130e6:	d121      	bne.n	1312c <isr+0x108c>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   130e8:	7933      	ldrb	r3, [r6, #4]
   130ea:	f043 0303 	orr.w	r3, r3, #3
   130ee:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   130f0:	2317      	movs	r3, #23
   130f2:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   130f4:	2303      	movs	r3, #3
   130f6:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
   130f8:	2208      	movs	r2, #8
   130fa:	f105 017a 	add.w	r1, r5, #122	; 0x7a
   130fe:	3004      	adds	r0, #4
   13100:	f7ed fbf3 	bl	8ea <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
   13104:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
   13108:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
   1310a:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
   1310e:	7473      	strb	r3, [r6, #17]
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
   13110:	f106 0112 	add.w	r1, r6, #18
   13114:	2208      	movs	r2, #8
   13116:	6860      	ldr	r0, [r4, #4]
   13118:	f7f0 f8d4 	bl	32c4 <entropy_get_entropy_isr>
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.ivm,
   1311c:	f106 011a 	add.w	r1, r6, #26
   13120:	4652      	mov	r2, sl
   13122:	6860      	ldr	r0, [r4, #4]
   13124:	f7f0 f8ce 	bl	32c4 <entropy_get_entropy_isr>
			*node_tx = NULL;
   13128:	2600      	movs	r6, #0
   1312a:	e7c9      	b.n	130c0 <isr+0x1020>
			_radio.conn_curr->pause_tx = 1;
   1312c:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   13130:	f043 0308 	orr.w	r3, r3, #8
   13134:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
   13138:	e7c2      	b.n	130c0 <isr+0x1020>
		_radio.conn_curr->pause_rx = 0;
   1313a:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   1313e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   13142:	f36f 03c3 	bfc	r3, #3, #1
   13146:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   1314a:	2300      	movs	r3, #0
   1314c:	e7c2      	b.n	130d4 <isr+0x1034>
		if ((_radio.conn_curr->llcp_length.req !=
   1314e:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   13152:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   13156:	429a      	cmp	r2, r3
   13158:	d0b2      	beq.n	130c0 <isr+0x1020>
		    (_radio.conn_curr->llcp_length.state ==
   1315a:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
   1315e:	f003 0203 	and.w	r2, r3, #3
   13162:	2a01      	cmp	r2, #1
   13164:	d1ac      	bne.n	130c0 <isr+0x1020>
			_radio.conn_curr->pause_tx = 1;
   13166:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
   1316a:	f042 0208 	orr.w	r2, r2, #8
   1316e:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
   13172:	2202      	movs	r2, #2
   13174:	f362 0301 	bfi	r3, r2, #0, #2
   13178:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
   1317c:	e7a0      	b.n	130c0 <isr+0x1020>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1317e:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   13182:	2202      	movs	r2, #2
   13184:	f362 0301 	bfi	r3, r2, #0, #2
   13188:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
   1318c:	7ce3      	ldrb	r3, [r4, #19]
   1318e:	2b03      	cmp	r3, #3
   13190:	d196      	bne.n	130c0 <isr+0x1020>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   13192:	2301      	movs	r3, #1
   13194:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   13198:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
   1319c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   131a0:	2202      	movs	r2, #2
   131a2:	2304      	movs	r3, #4
   131a4:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
   131a8:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   131ac:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
   131b0:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
   131b4:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
   131b8:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   131bc:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
   131c0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   131c4:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
	conn->phy_tx_time = phy_tx_time[phys];
   131c8:	f003 0307 	and.w	r3, r3, #7
   131cc:	aa12      	add	r2, sp, #72	; 0x48
   131ce:	4413      	add	r3, r2
   131d0:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   131d4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
   131d8:	f363 0202 	bfi	r2, r3, #0, #3
   131dc:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
   131e0:	e76e      	b.n	130c0 <isr+0x1020>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
   131e2:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
   131e6:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   131ea:	f3c3 0382 	ubfx	r3, r3, #2, #3
   131ee:	e7f3      	b.n	131d8 <isr+0x1138>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   131f0:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
   131f4:	4293      	cmp	r3, r2
   131f6:	681b      	ldr	r3, [r3, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   131f8:	bf08      	it	eq
   131fa:	f8c0 3148 	streq.w	r3, [r0, #328]	; 0x148
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   131fe:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
	if (terminate) {
   13202:	b37d      	cbz	r5, 13264 <isr+0x11c4>
		connection_release(_radio.conn_curr);
   13204:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   13208:	f7fb fd44 	bl	ec94 <connection_release>
		_radio.conn_curr = NULL;
   1320c:	2300      	movs	r3, #0
   1320e:	f8c4 3cfc 	str.w	r3, [r4, #3324]	; 0xcfc
	if (!radio_tmr_aa_restore()) {
   13212:	f004 f9ff 	bl	17614 <radio_tmr_aa_restore>
   13216:	b918      	cbnz	r0, 13220 <isr+0x1180>
		radio_tmr_aa_save(radio_tmr_aa_get());
   13218:	f004 f9f0 	bl	175fc <radio_tmr_aa_get>
   1321c:	f004 f9f4 	bl	17608 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
   13220:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   13224:	2b00      	cmp	r3, #0
   13226:	f43e afe3 	beq.w	121f0 <isr+0x150>
	if (tx_release) {
   1322a:	b11e      	cbz	r6, 13234 <isr+0x1194>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   1322c:	4631      	mov	r1, r6
   1322e:	8c18      	ldrh	r0, [r3, #32]
   13230:	f7fb fcbe 	bl	ebb0 <pdu_node_tx_release>
	if (rx_enqueue) {
   13234:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
   13238:	2b00      	cmp	r3, #0
   1323a:	f43e afd9 	beq.w	121f0 <isr+0x150>
		rx_fc_lock(_radio.conn_curr->handle);
   1323e:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   13242:	8c18      	ldrh	r0, [r3, #32]
   13244:	f7fb fa1e 	bl	e684 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
   13248:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   1324c:	8c1b      	ldrh	r3, [r3, #32]
   1324e:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
   13252:	f7fb fb33 	bl	e8bc <packet_rx_enqueue>
   13256:	f7fe bfcb 	b.w	121f0 <isr+0x150>
			_radio.conn_curr->empty = 0;
   1325a:	f36f 13c7 	bfc	r3, #7, #1
   1325e:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
   13262:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   13264:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   13268:	f898 2008 	ldrb.w	r2, [r8, #8]
   1326c:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   13270:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   13274:	f3c3 0340 	ubfx	r3, r3, #1, #1
   13278:	429a      	cmp	r2, r3
   1327a:	f040 80d4 	bne.w	13426 <isr+0x1386>
	    (packet_rx_reserve_get(3) != 0) &&
   1327e:	2003      	movs	r0, #3
   13280:	f7fa f928 	bl	d4d4 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   13284:	2800      	cmp	r0, #0
   13286:	f000 80ce 	beq.w	13426 <isr+0x1386>
	    (packet_rx_reserve_get(3) != 0) &&
   1328a:	f894 3d6a 	ldrb.w	r3, [r4, #3434]	; 0xd6a
   1328e:	b393      	cbz	r3, 132f6 <isr+0x1256>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   13290:	f8d4 3d34 	ldr.w	r3, [r4, #3380]	; 0xd34
   13294:	f8d4 2d38 	ldr.w	r2, [r4, #3384]	; 0xd38
	    ((_radio.fc_ena == 0) ||
   13298:	4293      	cmp	r3, r2
   1329a:	d105      	bne.n	132a8 <isr+0x1208>
	      (_radio.fc_req == _radio.fc_ack)) ||
   1329c:	f894 2d68 	ldrb.w	r2, [r4, #3432]	; 0xd68
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   132a0:	f894 1d69 	ldrb.w	r1, [r4, #3433]	; 0xd69
   132a4:	4291      	cmp	r1, r2
   132a6:	d026      	beq.n	132f6 <isr+0x1256>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   132a8:	f8d4 2d38 	ldr.w	r2, [r4, #3384]	; 0xd38
	      (_radio.fc_req == _radio.fc_ack)) ||
   132ac:	4293      	cmp	r3, r2
   132ae:	f000 80ba 	beq.w	13426 <isr+0x1386>
	      (_radio.fc_req != _radio.fc_ack) &&
   132b2:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   132b6:	f894 2d69 	ldrb.w	r2, [r4, #3433]	; 0xd69
   132ba:	429a      	cmp	r2, r3
   132bc:	f000 80b3 	beq.w	13426 <isr+0x1386>
		(((_radio.fc_req == 0) &&
   132c0:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
	      (_radio.fc_req != _radio.fc_ack) &&
   132c4:	b933      	cbnz	r3, 132d4 <isr+0x1234>
		   _radio.conn_curr->handle)) ||
   132c6:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
		(((_radio.fc_req == 0) &&
   132ca:	f8b4 2d66 	ldrh.w	r2, [r4, #3430]	; 0xd66
   132ce:	8c1b      	ldrh	r3, [r3, #32]
   132d0:	429a      	cmp	r2, r3
   132d2:	d010      	beq.n	132f6 <isr+0x1256>
		 ((_radio.fc_req != 0) &&
   132d4:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
		   _radio.conn_curr->handle)) ||
   132d8:	2b00      	cmp	r3, #0
   132da:	f000 80a4 	beq.w	13426 <isr+0x1386>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   132de:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
		   _radio.conn_curr->handle)))))) {
   132e2:	f8d4 1cfc 	ldr.w	r1, [r4, #3324]	; 0xcfc
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   132e6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
   132ea:	f8b3 2d60 	ldrh.w	r2, [r3, #3424]	; 0xd60
   132ee:	8c0b      	ldrh	r3, [r1, #32]
   132f0:	429a      	cmp	r2, r3
   132f2:	f040 8098 	bne.w	13426 <isr+0x1386>
		if (pdu_data_rx->len != 0) {
   132f6:	f898 5009 	ldrb.w	r5, [r8, #9]
   132fa:	2d00      	cmp	r5, #0
   132fc:	f000 809c 	beq.w	13438 <isr+0x1398>
			if (_radio.conn_curr->enc_rx) {
   13300:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   13304:	f893 50f8 	ldrb.w	r5, [r3, #248]	; 0xf8
   13308:	f015 0510 	ands.w	r5, r5, #16
   1330c:	d005      	beq.n	1331a <isr+0x127a>
				done = radio_ccm_is_done();
   1330e:	f004 fa27 	bl	17760 <radio_ccm_is_done>
				LL_ASSERT(done);
   13312:	2800      	cmp	r0, #0
   13314:	f43e af1c 	beq.w	12150 <isr+0xb0>
				ccm_rx_increment = 1;
   13318:	2501      	movs	r5, #1
			if ((_radio.conn_curr->enc_rx &&
   1331a:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   1331e:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   13322:	06d9      	lsls	r1, r3, #27
   13324:	d42c      	bmi.n	13380 <isr+0x12e0>
			    (_radio.conn_curr->pause_rx &&
   13326:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   1332a:	f898 3008 	ldrb.w	r3, [r8, #8]
   1332e:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
   13332:	f012 0f04 	tst.w	r2, #4
   13336:	d13d      	bne.n	133b4 <isr+0x1314>
			_radio.conn_curr->appto_expire = 0;
   13338:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
   1333a:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
   1333e:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
   13342:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
   13346:	d004      	beq.n	13352 <isr+0x12b2>
   13348:	2b02      	cmp	r3, #2
   1334a:	d865      	bhi.n	13418 <isr+0x1378>
				*rx_enqueue = 1;
   1334c:	2301      	movs	r3, #1
   1334e:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			_radio.conn_curr->nesn++;
   13352:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   13356:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1335a:	f082 0202 	eor.w	r2, r2, #2
   1335e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
   13362:	2d00      	cmp	r5, #0
   13364:	d05f      	beq.n	13426 <isr+0x1386>
				_radio.conn_curr->ccm_rx.counter++;
   13366:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
   1336a:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
   1336e:	f119 0001 	adds.w	r0, r9, #1
   13372:	f14a 0100 	adc.w	r1, sl, #0
   13376:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
   1337a:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
   1337e:	e052      	b.n	13426 <isr+0x1386>
			     !radio_ccm_mic_is_valid()) ||
   13380:	f004 fa0c 	bl	1779c <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
   13384:	2800      	cmp	r0, #0
   13386:	d1ce      	bne.n	13326 <isr+0x1286>
				_radio.state = STATE_CLOSE;
   13388:	2303      	movs	r3, #3
   1338a:	7523      	strb	r3, [r4, #20]
				radio_disable();
   1338c:	f003 ff8c 	bl	172a8 <radio_disable>
				LL_ASSERT(!radio_is_ready());
   13390:	f003 ffa8 	bl	172e4 <radio_is_ready>
   13394:	4605      	mov	r5, r0
   13396:	2800      	cmp	r0, #0
   13398:	f47e aeda 	bne.w	12150 <isr+0xb0>
				terminate_ind_rx_enqueue(_radio.conn_curr,
   1339c:	213d      	movs	r1, #61	; 0x3d
   1339e:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   133a2:	f7fb fa63 	bl	e86c <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
   133a6:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   133aa:	f7fb fc73 	bl	ec94 <connection_release>
				_radio.conn_curr = NULL;
   133ae:	f8c4 5cfc 	str.w	r5, [r4, #3324]	; 0xcfc
   133b2:	e72e      	b.n	13212 <isr+0x1172>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   133b4:	f003 0103 	and.w	r1, r3, #3
   133b8:	2903      	cmp	r1, #3
   133ba:	d1e5      	bne.n	13388 <isr+0x12e8>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   133bc:	f990 e01d 	ldrsb.w	lr, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
   133c0:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   133c4:	f1be 0f00 	cmp.w	lr, #0
   133c8:	f002 0240 	and.w	r2, r2, #64	; 0x40
   133cc:	db18      	blt.n	13400 <isr+0x1360>
	       (!conn->role &&
   133ce:	b93a      	cbnz	r2, 133e0 <isr+0x1340>
		((!conn->refresh &&
   133d0:	2902      	cmp	r1, #2
   133d2:	d0b1      	beq.n	13338 <isr+0x1298>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   133d4:	2911      	cmp	r1, #17
   133d6:	d8d7      	bhi.n	13388 <isr+0x12e8>
   133d8:	e00c      	b.n	133f4 <isr+0x1354>
   133da:	bf00      	nop
   133dc:	200018f4 	.word	0x200018f4
		 (conn->refresh &&
   133e0:	1e8a      	subs	r2, r1, #2
   133e2:	b2d2      	uxtb	r2, r2
   133e4:	2a09      	cmp	r2, #9
   133e6:	d8f5      	bhi.n	133d4 <isr+0x1334>
   133e8:	f240 2e05 	movw	lr, #517	; 0x205
   133ec:	fa2e f202 	lsr.w	r2, lr, r2
   133f0:	07d2      	lsls	r2, r2, #31
   133f2:	d4a1      	bmi.n	13338 <isr+0x1298>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   133f4:	4ab6      	ldr	r2, [pc, #728]	; (136d0 <isr+0x1630>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   133f6:	fa22 f101 	lsr.w	r1, r2, r1
   133fa:	07ca      	lsls	r2, r1, #31
   133fc:	d5c4      	bpl.n	13388 <isr+0x12e8>
   133fe:	e79b      	b.n	13338 <isr+0x1298>
	       (conn->role &&
   13400:	b92a      	cbnz	r2, 1340e <isr+0x136e>
		((!conn->refresh &&
   13402:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   13404:	d098      	beq.n	13338 <isr+0x1298>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   13406:	2911      	cmp	r1, #17
   13408:	d8be      	bhi.n	13388 <isr+0x12e8>
   1340a:	4ab2      	ldr	r2, [pc, #712]	; (136d4 <isr+0x1634>)
   1340c:	e7f3      	b.n	133f6 <isr+0x1356>
		 (conn->refresh &&
   1340e:	1e8a      	subs	r2, r1, #2
   13410:	2a01      	cmp	r2, #1
   13412:	d991      	bls.n	13338 <isr+0x1298>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   13414:	290b      	cmp	r1, #11
   13416:	e7f5      	b.n	13404 <isr+0x1364>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
   13418:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
   1341c:	4640      	mov	r0, r8
   1341e:	f7fd fd8f 	bl	10f40 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
   13422:	2800      	cmp	r0, #0
   13424:	d095      	beq.n	13352 <isr+0x12b2>
		_radio.conn_curr->supervision_expire = 0;
   13426:	f8d4 2cfc 	ldr.w	r2, [r4, #3324]	; 0xcfc
		_radio.crc_expire = 0;
   1342a:	2300      	movs	r3, #0
   1342c:	f884 3d01 	strb.w	r3, [r4, #3329]	; 0xd01
	u8_t crc_close = 0;
   13430:	461d      	mov	r5, r3
		_radio.conn_curr->supervision_expire = 0;
   13432:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
   13436:	e03d      	b.n	134b4 <isr+0x1414>
		} else if ((_radio.conn_curr->enc_rx) ||
   13438:	f8d4 2cfc 	ldr.w	r2, [r4, #3324]	; 0xcfc
   1343c:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   13440:	f013 0f14 	tst.w	r3, #20
   13444:	d085      	beq.n	13352 <isr+0x12b2>
					    (conn->latency + 6)) ?
   13446:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
   13448:	f8b2 004a 	ldrh.w	r0, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
   1344c:	1d8b      	adds	r3, r1, #6
			appto_reload_new = (conn->apto_reload >
   1344e:	4298      	cmp	r0, r3
   13450:	bfc4      	itt	gt
   13452:	1f83      	subgt	r3, r0, #6
   13454:	1a5b      	subgt	r3, r3, r1
			if (conn->appto_reload != appto_reload_new) {
   13456:	f8b2 1046 	ldrh.w	r1, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
   1345a:	bfcc      	ite	gt
   1345c:	b29b      	uxthgt	r3, r3
   1345e:	4603      	movle	r3, r0
			if (conn->appto_reload != appto_reload_new) {
   13460:	4299      	cmp	r1, r3
				conn->appto_reload = appto_reload_new;
   13462:	bf1e      	ittt	ne
   13464:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
   13468:	2300      	movne	r3, #0
   1346a:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
   1346e:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
   13472:	2b00      	cmp	r3, #0
   13474:	f47f af6d 	bne.w	13352 <isr+0x12b2>
				conn->appto_expire = conn->appto_reload;
   13478:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
   1347c:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
   13480:	f8a2 004c 	strh.w	r0, [r2, #76]	; 0x4c
   13484:	e765      	b.n	13352 <isr+0x12b2>
		if (_radio.crc_expire == 0) {
   13486:	f894 3d01 	ldrb.w	r3, [r4, #3329]	; 0xd01
   1348a:	b913      	cbnz	r3, 13492 <isr+0x13f2>
			_radio.crc_expire = 2;
   1348c:	2302      	movs	r3, #2
   1348e:	f884 3d01 	strb.w	r3, [r4, #3329]	; 0xd01
		_radio.crc_expire--;
   13492:	f894 3d01 	ldrb.w	r3, [r4, #3329]	; 0xd01
		if (!_radio.conn_curr->supervision_expire) {
   13496:	f8d4 2cfc 	ldr.w	r2, [r4, #3324]	; 0xcfc
		_radio.crc_expire--;
   1349a:	3b01      	subs	r3, #1
   1349c:	b2db      	uxtb	r3, r3
   1349e:	f884 3d01 	strb.w	r3, [r4, #3329]	; 0xd01
		if (!_radio.conn_curr->supervision_expire) {
   134a2:	f8b2 6040 	ldrh.w	r6, [r2, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
   134a6:	fab3 f583 	clz	r5, r3
   134aa:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
   134ac:	bb86      	cbnz	r6, 13510 <isr+0x1470>
			_radio.conn_curr->supervision_expire =
   134ae:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
   134b0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   134b4:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   134b8:	a910      	add	r1, sp, #64	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   134ba:	f890 90f8 	ldrb.w	r9, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   134be:	f7fd fb15 	bl	10aec <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   134c2:	7d23      	ldrb	r3, [r4, #20]
   134c4:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   134c6:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   134ca:	d010      	beq.n	134ee <isr+0x144e>
   134cc:	bb15      	cbnz	r5, 13514 <isr+0x1474>
   134ce:	b137      	cbz	r7, 134de <isr+0x143e>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   134d0:	f898 3008 	ldrb.w	r3, [r8, #8]
   134d4:	06dd      	lsls	r5, r3, #27
   134d6:	d402      	bmi.n	134de <isr+0x143e>
			 (pdu_data_tx->len == 0)) ||
   134d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
			((crc_ok) && (pdu_data_rx->md == 0) &&
   134da:	785b      	ldrb	r3, [r3, #1]
   134dc:	b1d3      	cbz	r3, 13514 <isr+0x1474>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
   134de:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
			 (pdu_data_tx->len == 0)) ||
   134e2:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   134e6:	2b00      	cmp	r3, #0
   134e8:	bf0c      	ite	eq
   134ea:	2302      	moveq	r3, #2
   134ec:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
   134ee:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   134f0:	7523      	strb	r3, [r4, #20]
	if (_radio.state == STATE_CLOSE) {
   134f2:	d129      	bne.n	13548 <isr+0x14a8>
		if (_radio.role == ROLE_MASTER) {
   134f4:	7ce3      	ldrb	r3, [r4, #19]
   134f6:	2b04      	cmp	r3, #4
   134f8:	d10e      	bne.n	13518 <isr+0x1478>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   134fa:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   134fe:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13502:	f369 12c7 	bfi	r2, r9, #7, #1
   13506:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
   1350a:	f003 fecd 	bl	172a8 <radio_disable>
   1350e:	e680      	b.n	13212 <isr+0x1172>
	struct radio_pdu_node_tx *tx_release = NULL;
   13510:	2600      	movs	r6, #0
   13512:	e7cf      	b.n	134b4 <isr+0x1414>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   13514:	2303      	movs	r3, #3
   13516:	e7ea      	b.n	134ee <isr+0x144e>
			radio_switch_complete_and_disable();
   13518:	f003 ff36 	bl	17388 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
   1351c:	9910      	ldr	r1, [sp, #64]	; 0x40
   1351e:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   13522:	780b      	ldrb	r3, [r1, #0]
   13524:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
   13528:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   1352c:	f3c2 0240 	ubfx	r2, r2, #1, #1
   13530:	f362 0382 	bfi	r3, r2, #2, #1
   13534:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   13536:	f7fa fa8d 	bl	da54 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
   1353a:	f003 fed3 	bl	172e4 <radio_is_ready>
   1353e:	2800      	cmp	r0, #0
   13540:	f43f ae67 	beq.w	13212 <isr+0x1172>
   13544:	f7fe be04 	b.w	12150 <isr+0xb0>
		radio_tmr_tifs_set(RADIO_TIFS);
   13548:	2096      	movs	r0, #150	; 0x96
   1354a:	f003 ffa5 	bl	17498 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
   1354e:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   13552:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   13556:	f000 0007 	and.w	r0, r0, #7
   1355a:	f003 feff 	bl	1735c <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
   1355e:	f004 f865 	bl	1762c <radio_tmr_end_capture>
   13562:	e7db      	b.n	1351c <isr+0x147c>
	switch (_radio.role) {
   13564:	7ce2      	ldrb	r2, [r4, #19]
   13566:	2a04      	cmp	r2, #4
   13568:	f63e adf2 	bhi.w	12150 <isr+0xb0>
   1356c:	e8df f012 	tbh	[pc, r2, lsl #1]
   13570:	0005020f 	.word	0x0005020f
   13574:	00cc0085 	.word	0x00cc0085
   13578:	00cc      	.short	0x00cc
	if(radio_ext_adv_enable_flag ==  true){
   1357a:	4a57      	ldr	r2, [pc, #348]	; (136d8 <isr+0x1638>)
   1357c:	7812      	ldrb	r2, [r2, #0]
   1357e:	2a00      	cmp	r2, #0
   13580:	d037      	beq.n	135f2 <isr+0x1552>
		if((chain_flag ==1) &&
   13582:	4a56      	ldr	r2, [pc, #344]	; (136dc <isr+0x163c>)
   13584:	7812      	ldrb	r2, [r2, #0]
   13586:	2a01      	cmp	r2, #1
   13588:	d10b      	bne.n	135a2 <isr+0x1502>
   1358a:	f894 2c8d 	ldrb.w	r2, [r4, #3213]	; 0xc8d
   1358e:	f894 3c8c 	ldrb.w	r3, [r4, #3212]	; 0xc8c
   13592:	429a      	cmp	r2, r3
   13594:	d00f      	beq.n	135b6 <isr+0x1516>
			ext_adv_setup();
   13596:	f7fa fcd1 	bl	df3c <ext_adv_setup>
			radio_tx_enable();
   1359a:	f003 fe7f 	bl	1729c <radio_tx_enable>
   1359e:	f7fe bdf6 	b.w	1218e <isr+0xee>
		}else if ((_radio.state == STATE_CLOSE) && (chain_flag == 0) &&
   135a2:	2b03      	cmp	r3, #3
   135a4:	d107      	bne.n	135b6 <isr+0x1516>
   135a6:	b932      	cbnz	r2, 135b6 <isr+0x1516>
			(_radio.advertiser.chan_map_current != 0)) {
   135a8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		}else if ((_radio.state == STATE_CLOSE) && (chain_flag == 0) &&
   135ac:	0758      	lsls	r0, r3, #29
   135ae:	d002      	beq.n	135b6 <isr+0x1516>
			adv_setup();
   135b0:	f7fa fb9e 	bl	dcf0 <adv_setup>
   135b4:	e7f1      	b.n	1359a <isr+0x14fa>
			radio_filter_disable();
   135b6:	f003 ff31 	bl	1741c <radio_filter_disable>
	_radio.role = ROLE_NONE;
   135ba:	2500      	movs	r5, #0
   135bc:	74e5      	strb	r5, [r4, #19]
	_radio.state = STATE_NONE;
   135be:	7525      	strb	r5, [r4, #20]
	_radio.ticker_id_event = 0;
   135c0:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
   135c2:	f003 ffd5 	bl	17570 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   135c6:	462a      	mov	r2, r5
   135c8:	4629      	mov	r1, r5
   135ca:	4628      	mov	r0, r5
   135cc:	4b44      	ldr	r3, [pc, #272]	; (136e0 <isr+0x1640>)
   135ce:	f7f7 faf7 	bl	abc0 <mayfly_enqueue>
	LL_ASSERT(!retval);
   135d2:	4605      	mov	r5, r0
   135d4:	2800      	cmp	r0, #0
   135d6:	f47e adbb 	bne.w	12150 <isr+0xb0>
	clock_control_off(_radio.hf_clock, NULL);
   135da:	6820      	ldr	r0, [r4, #0]
   135dc:	6843      	ldr	r3, [r0, #4]
   135de:	4629      	mov	r1, r5
   135e0:	685b      	ldr	r3, [r3, #4]
   135e2:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   135e4:	2201      	movs	r2, #1
   135e6:	4611      	mov	r1, r2
   135e8:	4628      	mov	r0, r5
   135ea:	f7f7 fac1 	bl	ab70 <mayfly_enable>
   135ee:	f7fe bdff 	b.w	121f0 <isr+0x150>
		if ((_radio.state == STATE_CLOSE) &&
   135f2:	2b03      	cmp	r3, #3
   135f4:	d103      	bne.n	135fe <isr+0x155e>
			(_radio.advertiser.chan_map_current != 0)) {
   135f6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
   135fa:	0759      	lsls	r1, r3, #29
   135fc:	d1d8      	bne.n	135b0 <isr+0x1510>
			radio_filter_disable();
   135fe:	f003 ff0d 	bl	1741c <radio_filter_disable>
			if ((_radio.state == STATE_CLOSE) &&
   13602:	7d23      	ldrb	r3, [r4, #20]
   13604:	2b03      	cmp	r3, #3
   13606:	d1d8      	bne.n	135ba <isr+0x151a>
				(!_radio.advertiser.is_hdcd)) {
   13608:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
			if ((_radio.state == STATE_CLOSE) &&
   1360c:	f015 0540 	ands.w	r5, r5, #64	; 0x40
   13610:	d1d3      	bne.n	135ba <isr+0x151a>
				entropy_get_entropy_isr(_radio.entropy, &random_delay,
   13612:	2201      	movs	r2, #1
   13614:	a910      	add	r1, sp, #64	; 0x40
   13616:	6860      	ldr	r0, [r4, #4]
   13618:	f7ef fe54 	bl	32c4 <entropy_get_entropy_isr>
				random_delay %= 10;
   1361c:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
						HAL_TICKER_US_TO_TICKS(random_delay *
   13620:	4830      	ldr	r0, [pc, #192]	; (136e4 <isr+0x1644>)
				random_delay %= 10;
   13622:	230a      	movs	r3, #10
   13624:	fbb1 f2f3 	udiv	r2, r1, r3
   13628:	fb03 1212 	mls	r2, r3, r2, r1
				random_delay += 1;
   1362c:	3201      	adds	r2, #1
   1362e:	b2d2      	uxtb	r2, r2
						HAL_TICKER_US_TO_TICKS(random_delay *
   13630:	b2d6      	uxtb	r6, r2
   13632:	fba6 0100 	umull	r0, r1, r6, r0
   13636:	23e8      	movs	r3, #232	; 0xe8
				random_delay += 1;
   13638:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
						HAL_TICKER_US_TO_TICKS(random_delay *
   1363c:	fb03 1106 	mla	r1, r3, r6, r1
   13640:	a321      	add	r3, pc, #132	; (adr r3, 136c8 <isr+0x1628>)
   13642:	e9d3 2300 	ldrd	r2, r3, [r3]
   13646:	f7ec fe0f 	bl	268 <__aeabi_uldivmod>
				ticker_status =
   1364a:	f241 1309 	movw	r3, #4361	; 0x1109
   1364e:	9306      	str	r3, [sp, #24]
   13650:	4b25      	ldr	r3, [pc, #148]	; (136e8 <isr+0x1648>)
   13652:	9305      	str	r3, [sp, #20]
   13654:	9504      	str	r5, [sp, #16]
   13656:	b283      	uxth	r3, r0
   13658:	9503      	str	r5, [sp, #12]
   1365a:	9502      	str	r5, [sp, #8]
   1365c:	9501      	str	r5, [sp, #4]
   1365e:	9500      	str	r5, [sp, #0]
   13660:	2205      	movs	r2, #5
   13662:	4629      	mov	r1, r5
   13664:	4628      	mov	r0, r5
   13666:	f7f8 f8a5 	bl	b7b4 <ticker_update>
				LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1366a:	f030 0302 	bics.w	r3, r0, #2
   1366e:	d0a4      	beq.n	135ba <isr+0x151a>
   13670:	7ca3      	ldrb	r3, [r4, #18]
   13672:	2b05      	cmp	r3, #5
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13674:	d0a1      	beq.n	135ba <isr+0x151a>
   13676:	f7fe bd6b 	b.w	12150 <isr+0xb0>
	if (_radio.state == STATE_CLOSE) {
   1367a:	2b03      	cmp	r3, #3
   1367c:	d136      	bne.n	136ec <isr+0x164c>
		radio_tmr_tifs_set(RADIO_TIFS);
   1367e:	2096      	movs	r0, #150	; 0x96
   13680:	f003 ff0a 	bl	17498 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   13684:	2300      	movs	r3, #0
   13686:	4619      	mov	r1, r3
   13688:	461a      	mov	r2, r3
   1368a:	4618      	mov	r0, r3
   1368c:	f003 fe72 	bl	17374 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
   13690:	f894 2d29 	ldrb.w	r2, [r4, #3369]	; 0xd29
   13694:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
		radio_pkt_rx_set(_radio.packet_rx
   13698:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1369c:	3008      	adds	r0, #8
   1369e:	f003 fdcf 	bl	17240 <radio_pkt_rx_set>
		radio_rssi_measure();
   136a2:	f003 fe7f 	bl	173a4 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
   136a6:	f002 ffd3 	bl	16650 <ctrl_rl_enabled>
   136aa:	b138      	cbz	r0, 136bc <isr+0x161c>
			u8_t count, *irks = ctrl_irks_get(&count);
   136ac:	a810      	add	r0, sp, #64	; 0x40
   136ae:	f002 fdbd 	bl	1622c <ctrl_irks_get>
			radio_ar_configure(count, irks);
   136b2:	4601      	mov	r1, r0
   136b4:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   136b8:	f004 f87a 	bl	177b0 <radio_ar_configure>
		_radio.state = STATE_RX;
   136bc:	2301      	movs	r3, #1
   136be:	7523      	strb	r3, [r4, #20]
		radio_rx_enable();
   136c0:	f003 fde6 	bl	17290 <radio_rx_enable>
   136c4:	f7fe bd63 	b.w	1218e <isr+0xee>
   136c8:	1afd498d 	.word	0x1afd498d
   136cc:	00000007 	.word	0x00000007
   136d0:	00022060 	.word	0x00022060
   136d4:	00022040 	.word	0x00022040
   136d8:	20001971 	.word	0x20001971
   136dc:	20001929 	.word	0x20001929
   136e0:	2000e008 	.word	0x2000e008
   136e4:	d4a51000 	.word	0xd4a51000
   136e8:	0000ee9d 	.word	0x0000ee9d
		radio_filter_disable();
   136ec:	f003 fe96 	bl	1741c <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
   136f0:	7d23      	ldrb	r3, [r4, #20]
   136f2:	2b05      	cmp	r3, #5
   136f4:	f47f af61 	bne.w	135ba <isr+0x151a>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   136f8:	2300      	movs	r3, #0
   136fa:	9300      	str	r3, [sp, #0]
   136fc:	2204      	movs	r2, #4
   136fe:	4619      	mov	r1, r3
   13700:	4618      	mov	r0, r3
   13702:	f7f8 f8a5 	bl	b850 <ticker_stop>
   13706:	e758      	b.n	135ba <isr+0x151a>
	if (_radio.conn_curr == 0) {
   13708:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   1370c:	2800      	cmp	r0, #0
   1370e:	f43f af54 	beq.w	135ba <isr+0x151a>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
   13712:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
   13716:	b181      	cbz	r1, 1373a <isr+0x169a>
   13718:	7ce3      	ldrb	r3, [r4, #19]
   1371a:	2b03      	cmp	r3, #3
   1371c:	d003      	beq.n	13726 <isr+0x1686>
   1371e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   13722:	07da      	lsls	r2, r3, #31
   13724:	d509      	bpl.n	1373a <isr+0x169a>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   13726:	f7fb f8a1 	bl	e86c <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   1372a:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   1372e:	f7fb fab1 	bl	ec94 <connection_release>
			_radio.conn_curr = NULL;
   13732:	2300      	movs	r3, #0
   13734:	f8c4 3cfc 	str.w	r3, [r4, #3324]	; 0xcfc
   13738:	e73f      	b.n	135ba <isr+0x151a>
	latency_event = _radio.conn_curr->latency_event;
   1373a:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
   1373e:	f894 7d00 	ldrb.w	r7, [r4, #3328]	; 0xd00
	elapsed_event = latency_event + 1;
   13742:	f10b 0601 	add.w	r6, fp, #1
   13746:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
   13748:	2f00      	cmp	r7, #0
   1374a:	f000 8084 	beq.w	13856 <isr+0x17b6>
		if (_radio.role == ROLE_SLAVE) {
   1374e:	7ce3      	ldrb	r3, [r4, #19]
   13750:	2b03      	cmp	r3, #3
   13752:	d173      	bne.n	1383c <isr+0x179c>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   13754:	f003 ff5e 	bl	17614 <radio_tmr_aa_restore>
   13758:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
   1375a:	f003 ff61 	bl	17620 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
   1375e:	f8d4 7cfc 	ldr.w	r7, [r4, #3324]	; 0xcfc
				addr_us_get(_radio.conn_curr->phy_rx);
   13762:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
   13766:	f003 0307 	and.w	r3, r3, #7
   1376a:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
   1376c:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
   13770:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
   13772:	d052      	beq.n	1381a <isr+0x177a>
		return 40;
   13774:	2b04      	cmp	r3, #4
   13776:	bf0c      	ite	eq
   13778:	f44f 78bc 	moveq.w	r8, #376	; 0x178
   1377c:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   13780:	f100 0330 	add.w	r3, r0, #48	; 0x30
   13784:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
   13786:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   13788:	930a      	str	r3, [sp, #40]	; 0x28
   1378a:	f8df a220 	ldr.w	sl, [pc, #544]	; 139ac <isr+0x190c>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   1378e:	a385      	add	r3, pc, #532	; (adr r3, 139a4 <isr+0x1904>)
   13790:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
   13794:	d844      	bhi.n	13820 <isr+0x1780>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   13796:	fba0 010a 	umull	r0, r1, r0, sl
   1379a:	f7ec fd65 	bl	268 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   1379e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   137a0:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   137a2:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   137a6:	a37f      	add	r3, pc, #508	; (adr r3, 139a4 <isr+0x1904>)
   137a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   137ac:	fba0 010a 	umull	r0, r1, r0, sl
   137b0:	f7ec fd5a 	bl	268 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
   137b4:	2300      	movs	r3, #0
   137b6:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
   137b8:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
   137ba:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   137be:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
   137c2:	b3ab      	cbz	r3, 13830 <isr+0x1790>
				if (pdu_data_tx->len ||
   137c4:	795b      	ldrb	r3, [r3, #5]
   137c6:	b913      	cbnz	r3, 137ce <isr+0x172e>
   137c8:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
   137cc:	b10b      	cbz	r3, 137d2 <isr+0x1732>
					_radio.conn_curr->latency_event = 0;
   137ce:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
   137d0:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
   137d2:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   137d6:	2200      	movs	r2, #0
   137d8:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
   137da:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   137de:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   137e2:	b1c3      	cbz	r3, 13816 <isr+0x1776>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
   137e4:	429e      	cmp	r6, r3
   137e6:	f080 80a6 	bcs.w	13936 <isr+0x1896>
			_radio.conn_curr->supervision_expire -= elapsed_event;
   137ea:	1b9b      	subs	r3, r3, r6
   137ec:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
   137ee:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
   137f0:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
   137f2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
   137f6:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
   137f8:	f240 809f 	bls.w	1393a <isr+0x189a>
			else if (_radio.role == ROLE_SLAVE) {
   137fc:	7ce3      	ldrb	r3, [r4, #19]
   137fe:	2b03      	cmp	r3, #3
   13800:	d109      	bne.n	13816 <isr+0x1776>
				if (latency_event != 0) {
   13802:	f1bb 0f00 	cmp.w	fp, #0
   13806:	f040 8098 	bne.w	1393a <isr+0x189a>
					force = _radio.conn_curr->slave.force & 0x01;
   1380a:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
   1380c:	087b      	lsrs	r3, r7, #1
					if (force) {
   1380e:	f017 0701 	ands.w	r7, r7, #1
   13812:	d13d      	bne.n	13890 <isr+0x17f0>
					_radio.conn_curr->slave.force >>= 1;
   13814:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
   13816:	2700      	movs	r7, #0
   13818:	e03d      	b.n	13896 <isr+0x17f6>
		return 24;
   1381a:	f04f 0818 	mov.w	r8, #24
   1381e:	e7af      	b.n	13780 <isr+0x16e0>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   13820:	fba9 010a 	umull	r0, r1, r9, sl
   13824:	f7ec fd20 	bl	268 <__aeabi_uldivmod>
   13828:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   1382a:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1382e:	e7ba      	b.n	137a6 <isr+0x1706>
			} else if (_radio.conn_curr->slave.latency_enabled) {
   13830:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
   13834:	07db      	lsls	r3, r3, #31
   13836:	d5cc      	bpl.n	137d2 <isr+0x1732>
				_radio.conn_curr->latency_event =
   13838:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   1383a:	e7c9      	b.n	137d0 <isr+0x1730>
		} else if (reason_peer) {
   1383c:	b149      	cbz	r1, 13852 <isr+0x17b2>
			_radio.conn_curr->master.terminate_ack = 1;
   1383e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   13842:	f043 0301 	orr.w	r3, r3, #1
   13846:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
   1384a:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
   1384e:	4645      	mov	r5, r8
   13850:	e7bf      	b.n	137d2 <isr+0x1732>
	ticks_drift_minus = 0;
   13852:	4688      	mov	r8, r1
   13854:	e7fb      	b.n	1384e <isr+0x17ae>
	else if (_radio.conn_curr->connect_expire) {
   13856:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
   13858:	b185      	cbz	r5, 1387c <isr+0x17dc>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
   1385a:	42ae      	cmp	r6, r5
   1385c:	d204      	bcs.n	13868 <isr+0x17c8>
			_radio.conn_curr->connect_expire -= elapsed_event;
   1385e:	1bad      	subs	r5, r5, r6
   13860:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
   13862:	463d      	mov	r5, r7
   13864:	46a8      	mov	r8, r5
   13866:	e7b8      	b.n	137da <isr+0x173a>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
   13868:	213e      	movs	r1, #62	; 0x3e
   1386a:	f7fa ffff 	bl	e86c <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   1386e:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   13872:	f7fb fa0f 	bl	ec94 <connection_release>
			_radio.conn_curr = NULL;
   13876:	f8c4 7cfc 	str.w	r7, [r4, #3324]	; 0xcfc
   1387a:	e69e      	b.n	135ba <isr+0x151a>
		if (!_radio.conn_curr->supervision_expire) {
   1387c:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
   13880:	f1b8 0f00 	cmp.w	r8, #0
   13884:	d1ee      	bne.n	13864 <isr+0x17c4>
			_radio.conn_curr->supervision_expire =
   13886:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   13888:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
   1388c:	4645      	mov	r5, r8
   1388e:	e7a4      	b.n	137da <isr+0x173a>
						_radio.conn_curr->slave.force |=
   13890:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13894:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
   13896:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   1389a:	b123      	cbz	r3, 138a6 <isr+0x1806>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
   1389c:	429e      	cmp	r6, r3
   1389e:	d24e      	bcs.n	1393e <isr+0x189e>
			_radio.conn_curr->procedure_expire -= elapsed_event;
   138a0:	1b9b      	subs	r3, r3, r6
   138a2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
   138a6:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
   138aa:	b123      	cbz	r3, 138b6 <isr+0x1816>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
   138ac:	429e      	cmp	r6, r3
   138ae:	d248      	bcs.n	13942 <isr+0x18a2>
			_radio.conn_curr->apto_expire -= elapsed_event;
   138b0:	1b9b      	subs	r3, r3, r6
   138b2:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
   138b6:	f8d4 2cfc 	ldr.w	r2, [r4, #3324]	; 0xcfc
   138ba:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
   138be:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
   138c2:	b123      	cbz	r3, 138ce <isr+0x182e>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
   138c4:	429e      	cmp	r6, r3
   138c6:	d24e      	bcs.n	13966 <isr+0x18c6>
			_radio.conn_curr->appto_expire -= elapsed_event;
   138c8:	1b9e      	subs	r6, r3, r6
   138ca:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   138ce:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   138d2:	428b      	cmp	r3, r1
   138d4:	d006      	beq.n	138e4 <isr+0x1844>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
   138d6:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   138da:	3b01      	subs	r3, #1
   138dc:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
   138de:	bf9c      	itt	ls
   138e0:	2300      	movls	r3, #0
   138e2:	8553      	strhls	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   138e4:	b917      	cbnz	r7, 138ec <isr+0x184c>
   138e6:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   138e8:	455b      	cmp	r3, fp
   138ea:	d04e      	beq.n	1398a <isr+0x18ea>
		lazy = _radio.conn_curr->latency_event + 1;
   138ec:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   138ee:	3301      	adds	r3, #1
   138f0:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
   138f2:	b935      	cbnz	r5, 13902 <isr+0x1862>
   138f4:	f1b8 0f00 	cmp.w	r8, #0
   138f8:	d103      	bne.n	13902 <isr+0x1862>
   138fa:	b913      	cbnz	r3, 13902 <isr+0x1862>
	    (lazy != 0) || (force != 0)) {
   138fc:	2f00      	cmp	r7, #0
   138fe:	f43f ae5c 	beq.w	135ba <isr+0x151a>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   13902:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
   13906:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   13908:	3207      	adds	r2, #7
		ticker_status =
   1390a:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   1390c:	b2d6      	uxtb	r6, r2
		ticker_status =
   1390e:	4a24      	ldr	r2, [pc, #144]	; (139a0 <isr+0x1900>)
   13910:	9205      	str	r2, [sp, #20]
   13912:	462b      	mov	r3, r5
				      (void *)(u32_t)ticker_id);
   13914:	9606      	str	r6, [sp, #24]
		ticker_status =
   13916:	9704      	str	r7, [sp, #16]
   13918:	9102      	str	r1, [sp, #8]
   1391a:	9101      	str	r1, [sp, #4]
   1391c:	f8cd 8000 	str.w	r8, [sp]
   13920:	4632      	mov	r2, r6
   13922:	4608      	mov	r0, r1
   13924:	f7f7 ff46 	bl	b7b4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13928:	f030 0302 	bics.w	r3, r0, #2
   1392c:	f43f ae45 	beq.w	135ba <isr+0x151a>
   13930:	7ca3      	ldrb	r3, [r4, #18]
   13932:	429e      	cmp	r6, r3
   13934:	e69e      	b.n	13674 <isr+0x15d4>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   13936:	2108      	movs	r1, #8
   13938:	e6f5      	b.n	13726 <isr+0x1686>
				force = 1;
   1393a:	2701      	movs	r7, #1
   1393c:	e7ab      	b.n	13896 <isr+0x17f6>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
   1393e:	2122      	movs	r1, #34	; 0x22
   13940:	e6f1      	b.n	13726 <isr+0x1686>
			_radio.conn_curr->apto_expire = 0;
   13942:	2300      	movs	r3, #0
   13944:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
   13948:	2002      	movs	r0, #2
   1394a:	f7f9 fdc3 	bl	d4d4 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   1394e:	2800      	cmp	r0, #0
   13950:	f43e abfe 	beq.w	12150 <isr+0xb0>
			node_rx->hdr.handle = _radio.conn_curr->handle;
   13954:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   13958:	8c1b      	ldrh	r3, [r3, #32]
   1395a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
   1395c:	230a      	movs	r3, #10
   1395e:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
   13960:	f7fa ffac 	bl	e8bc <packet_rx_enqueue>
   13964:	e7a7      	b.n	138b6 <isr+0x1816>
			_radio.conn_curr->appto_expire = 0;
   13966:	2300      	movs	r3, #0
   13968:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
   1396c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
   13970:	2b00      	cmp	r3, #0
   13972:	d1ac      	bne.n	138ce <isr+0x182e>
   13974:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   13978:	428b      	cmp	r3, r1
   1397a:	d1ac      	bne.n	138d6 <isr+0x1836>
				_radio.conn_curr->llcp_type = LLCP_PING;
   1397c:	2307      	movs	r3, #7
   1397e:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
   13982:	1e4b      	subs	r3, r1, #1
   13984:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   13988:	e7a1      	b.n	138ce <isr+0x182e>
	lazy = 0;
   1398a:	463b      	mov	r3, r7
   1398c:	e7b1      	b.n	138f2 <isr+0x1852>
		LL_ASSERT((_radio.state == STATE_STOP) ||
   1398e:	3b04      	subs	r3, #4
   13990:	2b01      	cmp	r3, #1
   13992:	f63e abdd 	bhi.w	12150 <isr+0xb0>
		_radio.state = STATE_NONE;
   13996:	2300      	movs	r3, #0
   13998:	7523      	strb	r3, [r4, #20]
   1399a:	f7fe bc29 	b.w	121f0 <isr+0x150>
   1399e:	bf00      	nop
   139a0:	0000ee85 	.word	0x0000ee85
   139a4:	1afd498d 	.word	0x1afd498d
   139a8:	00000007 	.word	0x00000007
   139ac:	3b9aca00 	.word	0x3b9aca00

000139b0 <radio_init>:
{
   139b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
   139b4:	4e3e      	ldr	r6, [pc, #248]	; (13ab0 <radio_init+0x100>)
{
   139b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   139b8:	f89d c01c 	ldrb.w	ip, [sp, #28]
   139bc:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
   139c0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   139c4:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
   139c8:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   139ca:	f44f 70aa 	mov.w	r0, #340	; 0x154
   139ce:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
   139d2:	f886 1d08 	strb.w	r1, [r6, #3336]	; 0xd08
	_radio.conn_pool = mem_radio;
   139d6:	f8c6 4cf0 	str.w	r4, [r6, #3312]	; 0xcf0
	mem_radio_end = mem_radio + mem_size;
   139da:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
   139dc:	f10c 0401 	add.w	r4, ip, #1
   139e0:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
   139e2:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
   139e4:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
   139e8:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   139ec:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
	rx_count_max += 3;
   139f0:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   139f2:	bf98      	it	ls
   139f4:	eb02 1442 	addls.w	r4, r2, r2, lsl #5
	_radio.packet_data_octets_max = packet_data_octets_max;
   139f8:	f8a6 8d1c 	strh.w	r8, [r6, #3356]	; 0xd1c
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   139fc:	bf88      	it	hi
   139fe:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
   13a02:	f886 2d3c 	strb.w	r2, [r6, #3388]	; 0xd3c
		_radio.packet_rx_data_pool_size =
   13a06:	bf8c      	ite	hi
   13a08:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   13a0c:	eb02 0244 	addls.w	r2, r2, r4, lsl #1
	_radio.packet_rx_count = (rx_count_max + 1);
   13a10:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
   13a14:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
   13a18:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
   13a1c:	bf8c      	ite	hi
   13a1e:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   13a22:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
   13a24:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
   13a28:	f8a6 2d1e 	strh.w	r2, [r6, #3358]	; 0xd1e
	_radio.packet_tx_count = (tx_count_max + 1);
   13a2c:	f886 cd5c 	strb.w	ip, [r6, #3420]	; 0xd5c
	_radio.packet_rx = (void *)mem_radio;
   13a30:	f8c6 0d24 	str.w	r0, [r6, #3364]	; 0xd24
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   13a34:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
   13a38:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   13a3c:	f8b6 4d1e 	ldrh.w	r4, [r6, #3358]	; 0xd1e
	_radio.pkt_tx = (void *)mem_radio;
   13a40:	f8c6 0d54 	str.w	r0, [r6, #3412]	; 0xd54
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   13a44:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   13a46:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.pkt_release = (void *)mem_radio;
   13a4a:	f8c6 0d58 	str.w	r0, [r6, #3416]	; 0xd58
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   13a4e:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   13a50:	f8a6 2d20 	strh.w	r2, [r6, #3360]	; 0xd20
	_radio.pkt_rx_data_pool = mem_radio;
   13a54:	f8c6 0d14 	str.w	r0, [r6, #3348]	; 0xd14
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   13a58:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
   13a5c:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   13a5e:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
   13a62:	f8c6 0d2c 	str.w	r0, [r6, #3372]	; 0xd2c
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   13a66:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   13a6a:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
   13a6e:	f8c6 0d40 	str.w	r0, [r6, #3392]	; 0xd40
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   13a72:	340a      	adds	r4, #10
   13a74:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   13a78:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   13a7a:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
   13a7c:	f8a6 4d50 	strh.w	r4, [r6, #3408]	; 0xd50
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   13a80:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
   13a84:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
   13a86:	f886 3cf8 	strb.w	r3, [r6, #3320]	; 0xcf8
	_radio.packet_rx_count = (rx_count_max + 1);
   13a8a:	f886 ed28 	strb.w	lr, [r6, #3368]	; 0xd28
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   13a8e:	f886 2d22 	strb.w	r2, [r6, #3362]	; 0xd22
	_radio.pkt_tx_data_pool = mem_radio;
   13a92:	f8c6 0d48 	str.w	r0, [r6, #3400]	; 0xd48
	if (retcode) {
   13a96:	d003      	beq.n	13aa0 <radio_init+0xf0>
		return (retcode + mem_size);
   13a98:	442c      	add	r4, r5
}
   13a9a:	4620      	mov	r0, r4
   13a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
   13aa0:	2301      	movs	r3, #1
   13aa2:	f886 3d6a 	strb.w	r3, [r6, #3434]	; 0xd6a
	common_init();
   13aa6:	f7f9 fdd9 	bl	d65c <common_init>
	radio_setup();
   13aaa:	f003 faf7 	bl	1709c <radio_setup>
	return retcode;
   13aae:	e7f4      	b.n	13a9a <radio_init+0xea>
   13ab0:	20000bb0 	.word	0x20000bb0

00013ab4 <ll_reset>:
{
   13ab4:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   13ab6:	2103      	movs	r1, #3
   13ab8:	2005      	movs	r0, #5
   13aba:	f7f9 fea5 	bl	d808 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   13abe:	2104      	movs	r1, #4
   13ac0:	2006      	movs	r0, #6
   13ac2:	f7f9 fea1 	bl	d808 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   13ac6:	4c22      	ldr	r4, [pc, #136]	; (13b50 <ll_reset+0x9c>)
   13ac8:	2500      	movs	r5, #0
   13aca:	f894 2cf8 	ldrb.w	r2, [r4, #3320]	; 0xcf8
   13ace:	b2ab      	uxth	r3, r5
   13ad0:	429a      	cmp	r2, r3
   13ad2:	f105 0501 	add.w	r5, r5, #1
   13ad6:	d835      	bhi.n	13b44 <ll_reset+0x90>
	_radio.advertiser.is_enabled = 0;
   13ad8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   13adc:	f36f 13c7 	bfc	r3, #7, #1
   13ae0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
   13ae4:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
	_radio.advertiser.conn = NULL;
   13ae8:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
   13aea:	f360 0300 	bfi	r3, r0, #0, #1
   13aee:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   13af2:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   13af6:	f8b4 3d1e 	ldrh.w	r3, [r4, #3358]	; 0xd1e
   13afa:	fbb3 f3f2 	udiv	r3, r3, r2
   13afe:	f884 3d22 	strb.w	r3, [r4, #3362]	; 0xd22
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   13b02:	f894 3d28 	ldrb.w	r3, [r4, #3368]	; 0xd28
	_radio.packet_rx_last = 0;
   13b06:	f884 0d29 	strb.w	r0, [r4, #3369]	; 0xd29
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   13b0a:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
   13b0c:	f884 0d5d 	strb.w	r0, [r4, #3421]	; 0xd5d
	_radio.packet_release_last = 0;
   13b10:	f884 0d60 	strb.w	r0, [r4, #3424]	; 0xd60
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   13b14:	f884 3d3c 	strb.w	r3, [r4, #3388]	; 0xd3c
	_radio.fc_ack = _radio.fc_req;
   13b18:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
	_radio.advertiser.conn = NULL;
   13b1c:	f8c4 0c18 	str.w	r0, [r4, #3096]	; 0xc18
	_radio.scanner.conn = NULL;
   13b20:	f8c4 0c54 	str.w	r0, [r4, #3156]	; 0xc54
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   13b24:	f8a4 2d20 	strh.w	r2, [r4, #3360]	; 0xd20
	_radio.packet_rx_acquire = 0;
   13b28:	f884 0d2a 	strb.w	r0, [r4, #3370]	; 0xd2a
	_radio.packet_tx_last = 0;
   13b2c:	f884 0d5e 	strb.w	r0, [r4, #3422]	; 0xd5e
	_radio.packet_release_first = 0;
   13b30:	f884 0d5f 	strb.w	r0, [r4, #3423]	; 0xd5f
	_radio.fc_ack = _radio.fc_req;
   13b34:	f884 3d69 	strb.w	r3, [r4, #3433]	; 0xd69
	ll_filter_reset(false);
   13b38:	f003 f8aa 	bl	16c90 <ll_filter_reset>
}
   13b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
   13b40:	f7f9 bd8c 	b.w	d65c <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   13b44:	1da8      	adds	r0, r5, #6
   13b46:	21ff      	movs	r1, #255	; 0xff
   13b48:	b2c0      	uxtb	r0, r0
   13b4a:	f7f9 fe5d 	bl	d808 <role_disable>
   13b4e:	e7bc      	b.n	13aca <ll_reset+0x16>
   13b50:	20000bb0 	.word	0x20000bb0

00013b54 <radio_adv_data_get>:
}
   13b54:	4800      	ldr	r0, [pc, #0]	; (13b58 <radio_adv_data_get+0x4>)
   13b56:	4770      	bx	lr
   13b58:	20000bdc 	.word	0x20000bdc

00013b5c <radio_aux_adv_data_get>:
}
   13b5c:	4800      	ldr	r0, [pc, #0]	; (13b60 <radio_aux_adv_data_get+0x4>)
   13b5e:	4770      	bx	lr
   13b60:	20000de0 	.word	0x20000de0

00013b64 <radio_chain_adv_data_get>:
}
   13b64:	4800      	ldr	r0, [pc, #0]	; (13b68 <radio_chain_adv_data_get+0x4>)
   13b66:	4770      	bx	lr
   13b68:	20000fe4 	.word	0x20000fe4

00013b6c <radio_scan_data_get>:
}
   13b6c:	4800      	ldr	r0, [pc, #0]	; (13b70 <radio_scan_data_get+0x4>)
   13b6e:	4770      	bx	lr
   13b70:	200015c2 	.word	0x200015c2

00013b74 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   13b74:	4b02      	ldr	r3, [pc, #8]	; (13b80 <ll_adv_is_enabled+0xc>)
   13b76:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   13b7a:	09c0      	lsrs	r0, r0, #7
   13b7c:	4770      	bx	lr
   13b7e:	bf00      	nop
   13b80:	20000bb0 	.word	0x20000bb0

00013b84 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   13b84:	4b05      	ldr	r3, [pc, #20]	; (13b9c <radio_adv_filter_pol_get+0x18>)
   13b86:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
   13b8a:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
   13b8c:	bfba      	itte	lt
   13b8e:	f893 002a 	ldrblt.w	r0, [r3, #42]	; 0x2a
   13b92:	f000 0003 	andlt.w	r0, r0, #3
   13b96:	2000      	movge	r0, #0
}
   13b98:	4770      	bx	lr
   13b9a:	bf00      	nop
   13b9c:	20000bb0 	.word	0x20000bb0

00013ba0 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   13ba0:	4a09      	ldr	r2, [pc, #36]	; (13bc8 <ll_scan_is_enabled+0x28>)
   13ba2:	f892 3c2c 	ldrb.w	r3, [r2, #3116]	; 0xc2c
   13ba6:	f892 0c2d 	ldrb.w	r0, [r2, #3117]	; 0xc2d
	       (_radio.scanner.conn ? BIT(2) : 0);
   13baa:	f8d2 2c54 	ldr.w	r2, [r2, #3156]	; 0xc54
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   13bae:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
   13bb2:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   13bb4:	f003 0301 	and.w	r3, r3, #1
   13bb8:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
   13bbc:	bf14      	ite	ne
   13bbe:	2004      	movne	r0, #4
   13bc0:	2000      	moveq	r0, #0
}
   13bc2:	4318      	orrs	r0, r3
   13bc4:	4770      	bx	lr
   13bc6:	bf00      	nop
   13bc8:	20000bb0 	.word	0x20000bb0

00013bcc <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   13bcc:	4b05      	ldr	r3, [pc, #20]	; (13be4 <radio_scan_filter_pol_get+0x18>)
   13bce:	f893 0c2c 	ldrb.w	r0, [r3, #3116]	; 0xc2c
   13bd2:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
   13bd6:	bf1c      	itt	ne
   13bd8:	f893 0c2d 	ldrbne.w	r0, [r3, #3117]	; 0xc2d
   13bdc:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
   13be0:	4770      	bx	lr
   13be2:	bf00      	nop
   13be4:	20000bb0 	.word	0x20000bb0

00013be8 <radio_connect_enable>:
{
   13be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
   13bec:	f8df 8358 	ldr.w	r8, [pc, #856]	; 13f48 <radio_connect_enable+0x360>
{
   13bf0:	b085      	sub	sp, #20
	if (_radio.scanner.conn) {
   13bf2:	f8d8 6c54 	ldr.w	r6, [r8, #3156]	; 0xc54
{
   13bf6:	9301      	str	r3, [sp, #4]
   13bf8:	4683      	mov	fp, r0
   13bfa:	468a      	mov	sl, r1
   13bfc:	4691      	mov	r9, r2
   13bfe:	4645      	mov	r5, r8
	if (_radio.scanner.conn) {
   13c00:	2e00      	cmp	r6, #0
   13c02:	f040 8193 	bne.w	13f2c <radio_connect_enable+0x344>
	link = mem_acquire(&_radio.link_rx_free);
   13c06:	f508 6053 	add.w	r0, r8, #3376	; 0xd30
   13c0a:	f7f6 ff0e 	bl	aa2a <mem_acquire>
	if (!link) {
   13c0e:	4607      	mov	r7, r0
   13c10:	b150      	cbz	r0, 13c28 <radio_connect_enable+0x40>
	conn = mem_acquire(&_radio.conn_free);
   13c12:	f608 40f4 	addw	r0, r8, #3316	; 0xcf4
   13c16:	f7f6 ff08 	bl	aa2a <mem_acquire>
	if (!conn) {
   13c1a:	4604      	mov	r4, r0
   13c1c:	b930      	cbnz	r0, 13c2c <radio_connect_enable+0x44>
		mem_release(link, &_radio.link_rx_free);
   13c1e:	f508 6153 	add.w	r1, r8, #3376	; 0xd30
   13c22:	4638      	mov	r0, r7
   13c24:	f7f6 ff1b 	bl	aa5e <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   13c28:	2007      	movs	r0, #7
   13c2a:	e15c      	b.n	13ee6 <radio_connect_enable+0x2fe>
	_radio.scanner.adv_addr_type = adv_addr_type;
   13c2c:	f898 3c2d 	ldrb.w	r3, [r8, #3117]	; 0xc2d
   13c30:	f36b 1386 	bfi	r3, fp, #6, #1
   13c34:	f888 3c2d 	strb.w	r3, [r8, #3117]	; 0xc2d
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   13c38:	2206      	movs	r2, #6
   13c3a:	4651      	mov	r1, sl
   13c3c:	f608 4036 	addw	r0, r8, #3126	; 0xc36
   13c40:	f7ec fe53 	bl	8ea <memcpy>
	_radio.scanner.conn_latency = latency;
   13c44:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   13c48:	f8a8 3c4a 	strh.w	r3, [r8, #3146]	; 0xc4a
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   13c4c:	4631      	mov	r1, r6
	_radio.scanner.conn_timeout = timeout;
   13c4e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	_radio.scanner.conn_interval = interval;
   13c52:	f8a8 9c48 	strh.w	r9, [r8, #3144]	; 0xc48
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   13c56:	4630      	mov	r0, r6
	_radio.scanner.conn_timeout = timeout;
   13c58:	f8a8 3c4c 	strh.w	r3, [r8, #3148]	; 0xc4c
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   13c5c:	f003 fafc 	bl	17258 <radio_tx_ready_delay_get>
   13c60:	49b5      	ldr	r1, [pc, #724]	; (13f38 <radio_connect_enable+0x350>)
   13c62:	f200 4052 	addw	r0, r0, #1106	; 0x452
   13c66:	a3b2      	add	r3, pc, #712	; (adr r3, 13f30 <radio_connect_enable+0x348>)
   13c68:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c6c:	fba0 0101 	umull	r0, r1, r0, r1
   13c70:	f7ec fafa 	bl	268 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
   13c74:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   13c78:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   13c7c:	f8c8 0c50 	str.w	r0, [r8, #3152]	; 0xc50
	conn->handle = 0xFFFF;
   13c80:	8423      	strh	r3, [r4, #32]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   13c82:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 13f4c <radio_connect_enable+0x364>
	conn->llcp_features = RADIO_BLE_FEAT;
   13c86:	f503 4394 	add.w	r3, r3, #18944	; 0x4a00
   13c8a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   13c8e:	2603      	movs	r6, #3
	consecutive_cnt = 1;
   13c90:	f04f 0901 	mov.w	r9, #1
	bt_rand(&access_addr, sizeof(u32_t));
   13c94:	2104      	movs	r1, #4
   13c96:	a803      	add	r0, sp, #12
   13c98:	f7f7 feea 	bl	ba70 <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   13c9c:	f8dd c00c 	ldr.w	ip, [sp, #12]
   13ca0:	2000      	movs	r0, #0
   13ca2:	ea4f 7adc 	mov.w	sl, ip, lsr #31
	bit_idx = 31;
   13ca6:	231f      	movs	r3, #31
	transitions = 0;
   13ca8:	4602      	mov	r2, r0
	consecutive_cnt = 1;
   13caa:	2101      	movs	r1, #1
	while (bit_idx--) {
   13cac:	3b01      	subs	r3, #1
   13cae:	b2db      	uxtb	r3, r3
   13cb0:	2bff      	cmp	r3, #255	; 0xff
   13cb2:	d103      	bne.n	13cbc <radio_connect_enable+0xd4>
   13cb4:	b3d0      	cbz	r0, 13d2c <radio_connect_enable+0x144>
   13cb6:	f8cd c00c 	str.w	ip, [sp, #12]
   13cba:	e037      	b.n	13d2c <radio_connect_enable+0x144>
		bit = (access_addr >> bit_idx) & 0x01;
   13cbc:	fa2c fe03 	lsr.w	lr, ip, r3
   13cc0:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
   13cc4:	45d6      	cmp	lr, sl
   13cc6:	d11a      	bne.n	13cfe <radio_connect_enable+0x116>
			consecutive_cnt++;
   13cc8:	3101      	adds	r1, #1
   13cca:	b2c9      	uxtb	r1, r1
		if ((consecutive_cnt > 6) ||
   13ccc:	2906      	cmp	r1, #6
   13cce:	d807      	bhi.n	13ce0 <radio_connect_enable+0xf8>
   13cd0:	2b1b      	cmp	r3, #27
   13cd2:	d81a      	bhi.n	13d0a <radio_connect_enable+0x122>
		    ((bit_idx < 28) && (transitions < 1)) ||
   13cd4:	b122      	cbz	r2, 13ce0 <radio_connect_enable+0xf8>
   13cd6:	2b1b      	cmp	r3, #27
   13cd8:	d017      	beq.n	13d0a <radio_connect_enable+0x122>
		    ((bit_idx < 27) && (transitions < 2))) {
   13cda:	2a01      	cmp	r2, #1
   13cdc:	d815      	bhi.n	13d0a <radio_connect_enable+0x122>
   13cde:	2201      	movs	r2, #1
				access_addr &= ~BIT(bit_idx);
   13ce0:	fa09 f103 	lsl.w	r1, r9, r3
			if (consecutive_bit) {
   13ce4:	f1be 0f00 	cmp.w	lr, #0
   13ce8:	f000 8100 	beq.w	13eec <radio_connect_enable+0x304>
				access_addr &= ~BIT(bit_idx);
   13cec:	ea2c 0c01 	bic.w	ip, ip, r1
				consecutive_bit = 0;
   13cf0:	f04f 0e00 	mov.w	lr, #0
			transitions++;
   13cf4:	3201      	adds	r2, #1
   13cf6:	2001      	movs	r0, #1
   13cf8:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   13cfa:	4601      	mov	r1, r0
   13cfc:	e005      	b.n	13d0a <radio_connect_enable+0x122>
			transitions++;
   13cfe:	3201      	adds	r2, #1
		if ((consecutive_cnt > 6) ||
   13d00:	2b1b      	cmp	r3, #27
			transitions++;
   13d02:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   13d04:	f04f 0101 	mov.w	r1, #1
		if ((consecutive_cnt > 6) ||
   13d08:	d9e5      	bls.n	13cd6 <radio_connect_enable+0xee>
		if (transitions > 24) {
   13d0a:	2a18      	cmp	r2, #24
   13d0c:	f240 80f6 	bls.w	13efc <radio_connect_enable+0x314>
   13d10:	b108      	cbz	r0, 13d16 <radio_connect_enable+0x12e>
   13d12:	f8cd c00c 	str.w	ip, [sp, #12]
   13d16:	3301      	adds	r3, #1
   13d18:	9a03      	ldr	r2, [sp, #12]
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   13d1a:	fa09 f303 	lsl.w	r3, r9, r3
			if (consecutive_bit) {
   13d1e:	f1be 0f00 	cmp.w	lr, #0
   13d22:	f000 80e8 	beq.w	13ef6 <radio_connect_enable+0x30e>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   13d26:	425b      	negs	r3, r3
   13d28:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
   13d2a:	9303      	str	r3, [sp, #12]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   13d2c:	9b03      	ldr	r3, [sp, #12]
   13d2e:	a804      	add	r0, sp, #16
   13d30:	ea83 0308 	eor.w	r3, r3, r8
   13d34:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   13d38:	2104      	movs	r1, #4
   13d3a:	f7f7 f821 	bl	ad80 <util_ones_count_get>
   13d3e:	2801      	cmp	r0, #1
   13d40:	f240 80e3 	bls.w	13f0a <radio_connect_enable+0x322>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   13d44:	9b03      	ldr	r3, [sp, #12]
   13d46:	b29a      	uxth	r2, r3
   13d48:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   13d4c:	f000 80d8 	beq.w	13f00 <radio_connect_enable+0x318>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   13d50:	2204      	movs	r2, #4
   13d52:	a903      	add	r1, sp, #12
   13d54:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
   13d58:	9303      	str	r3, [sp, #12]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   13d5a:	f7ec fdc6 	bl	8ea <memcpy>
	bt_rand(&conn->crc_init[0], 3);
   13d5e:	2103      	movs	r1, #3
   13d60:	f104 0014 	add.w	r0, r4, #20
   13d64:	f7f7 fe84 	bl	ba70 <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   13d68:	2205      	movs	r2, #5
   13d6a:	4974      	ldr	r1, [pc, #464]	; (13f3c <radio_connect_enable+0x354>)
   13d6c:	f104 0017 	add.w	r0, r4, #23
   13d70:	f7ec fdbb 	bl	8ea <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   13d74:	f895 2d07 	ldrb.w	r2, [r5, #3335]	; 0xd07
   13d78:	7f63      	ldrb	r3, [r4, #29]
   13d7a:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
   13d7e:	f36f 1386 	bfc	r3, #6, #1
   13d82:	7763      	strb	r3, [r4, #29]
	conn->data_chan_hop = 6;
   13d84:	2206      	movs	r2, #6
	conn->data_chan_use = 0;
   13d86:	2300      	movs	r3, #0
	conn->data_chan_hop = 6;
   13d88:	77a2      	strb	r2, [r4, #30]
	conn->data_chan_use = 0;
   13d8a:	77e3      	strb	r3, [r4, #31]
	conn->default_tx_octets = _radio.default_tx_octets;
   13d8c:	f8b5 1d0a 	ldrh.w	r1, [r5, #3338]	; 0xd0a
	conn->conn_interval = _radio.scanner.conn_interval;
   13d90:	f8b5 ec48 	ldrh.w	lr, [r5, #3144]	; 0xc48
	conn->latency = _radio.scanner.conn_latency;
   13d94:	f8b5 0c4a 	ldrh.w	r0, [r5, #3146]	; 0xc4a
	conn->default_tx_octets = _radio.default_tx_octets;
   13d98:	85a1      	strh	r1, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   13d9a:	211b      	movs	r1, #27
   13d9c:	85e1      	strh	r1, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   13d9e:	8621      	strh	r1, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   13da0:	f8b5 1d0c 	ldrh.w	r1, [r5, #3340]	; 0xd0c
   13da4:	8661      	strh	r1, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   13da6:	f44f 71a4 	mov.w	r1, #328	; 0x148
	conn->phy_pref_tx = _radio.default_phy_tx;
   13daa:	f8b5 6d0e 	ldrh.w	r6, [r5, #3342]	; 0xd0e
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   13dae:	86a1      	strh	r1, [r4, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   13db0:	86e1      	strh	r1, [r4, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   13db2:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->event_counter = 0;
   13db6:	8463      	strh	r3, [r4, #34]	; 0x22
	conn->phy_pref_tx = _radio.default_phy_tx;
   13db8:	f366 0102 	bfi	r1, r6, #0, #3
	conn->phy_tx = BIT(0);
   13dbc:	2601      	movs	r6, #1
   13dbe:	f366 01c5 	bfi	r1, r6, #3, #3
	conn->phy_flags = 0;
   13dc2:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   13dc6:	f363 11c7 	bfi	r1, r3, #7, #1
   13dca:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   13dce:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->conn_interval = _radio.scanner.conn_interval;
   13dd2:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
	conn->phy_tx_time = BIT(0);
   13dd6:	f366 0102 	bfi	r1, r6, #0, #3
   13dda:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   13dde:	f8b5 cd10 	ldrh.w	ip, [r5, #3344]	; 0xd10
	conn->latency_prepare = 0;
   13de2:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->phy_pref_rx = _radio.default_phy_rx;
   13de4:	b2c9      	uxtb	r1, r1
   13de6:	f36c 01c5 	bfi	r1, ip, #3, #3
   13dea:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
   13dee:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
	conn->latency_event = 0;
   13df2:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->phy_rx = BIT(0);
   13df4:	f366 0102 	bfi	r1, r6, #0, #3
   13df8:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->role = 0;
   13dfc:	7f61      	ldrb	r1, [r4, #29]
	conn->connect_expire = 6;
   13dfe:	87a2      	strh	r2, [r4, #60]	; 0x3c
	conn->role = 0;
   13e00:	f363 11c7 	bfi	r1, r3, #7, #1
	conn->latency = _radio.scanner.conn_latency;
   13e04:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->role = 0;
   13e06:	7761      	strb	r1, [r4, #29]
	conn->common.fex_valid = 0;
   13e08:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->master.terminate_ack = 0;
   13e0c:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   13e10:	f363 0100 	bfi	r1, r3, #0, #1
   13e14:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	conn_interval_us =
   13e18:	f240 42e2 	movw	r2, #1250	; 0x4e2
   13e1c:	fb02 f20e 	mul.w	r2, r2, lr
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   13e20:	f8b5 1c4c 	ldrh.w	r1, [r5, #3148]	; 0xc4c
	conn->supervision_expire = 0;
   13e24:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   13e28:	1e56      	subs	r6, r2, #1
   13e2a:	f242 7e10 	movw	lr, #10000	; 0x2710
   13e2e:	fb0e 6101 	mla	r1, lr, r1, r6
	conn->procedure_expire = 0;
   13e32:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   13e36:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   13e3a:	4b41      	ldr	r3, [pc, #260]	; (13f40 <radio_connect_enable+0x358>)
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   13e3c:	87e1      	strh	r1, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   13e3e:	4941      	ldr	r1, [pc, #260]	; (13f44 <radio_connect_enable+0x35c>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   13e40:	4413      	add	r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   13e42:	4411      	add	r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   13e44:	fbb3 f3f2 	udiv	r3, r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   13e48:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   13e4c:	b29a      	uxth	r2, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   13e4e:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   13e52:	1d81      	adds	r1, r0, #6
   13e54:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   13e56:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   13e5a:	dc61      	bgt.n	13f20 <radio_connect_enable+0x338>
	conn->llcp_version.tx = 0;
   13e5c:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   13e60:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->apto_expire = 0;
   13e64:	2000      	movs	r0, #0
	conn->llcp_version.rx = 0;
   13e66:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   13e6a:	f360 0341 	bfi	r3, r0, #1, #1
   13e6e:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
   13e72:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
   13e76:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
   13e7a:	f360 1304 	bfi	r3, r0, #4, #1
   13e7e:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->sn = 0;
   13e82:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->appto_expire = 0;
   13e86:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	conn->empty = 0;
   13e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
   13e8e:	f360 13c7 	bfi	r3, r0, #7, #1
	conn->llcp_req = 0;
   13e92:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
	conn->llcp_ack = 0;
   13e96:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
	conn->llcp_terminate.req = 0;
   13e9a:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   13e9e:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   13ea2:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   13ea6:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   13eaa:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   13eae:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
	conn->llcp_length.req = 0;
   13eb2:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   13eb6:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   13eba:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   13ebe:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
	conn->empty = 0;
   13ec2:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   13ec6:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   13eca:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   13ece:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   13ed2:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   13ed6:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   13eda:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   13ede:	f884 0151 	strb.w	r0, [r4, #337]	; 0x151
	_radio.scanner.conn = conn;
   13ee2:	f8c5 4c54 	str.w	r4, [r5, #3156]	; 0xc54
}
   13ee6:	b005      	add	sp, #20
   13ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				access_addr |= BIT(bit_idx);
   13eec:	ea41 0c0c 	orr.w	ip, r1, ip
				consecutive_bit = 1;
   13ef0:	f04f 0e01 	mov.w	lr, #1
   13ef4:	e6fe      	b.n	13cf4 <radio_connect_enable+0x10c>
				access_addr |= (BIT(bit_idx + 1) - 1);
   13ef6:	3b01      	subs	r3, #1
   13ef8:	4313      	orrs	r3, r2
   13efa:	e716      	b.n	13d2a <radio_connect_enable+0x142>
		if (transitions > 24) {
   13efc:	46f2      	mov	sl, lr
   13efe:	e6d5      	b.n	13cac <radio_connect_enable+0xc4>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   13f00:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   13f02:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
   13f06:	f47f af23 	bne.w	13d50 <radio_connect_enable+0x168>
   13f0a:	3e01      	subs	r6, #1
	LL_ASSERT(retry);
   13f0c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   13f10:	f47f aec0 	bne.w	13c94 <radio_connect_enable+0xac>
   13f14:	4040      	eors	r0, r0
   13f16:	f380 8811 	msr	BASEPRI, r0
   13f1a:	f04f 0004 	mov.w	r0, #4
   13f1e:	df02      	svc	2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   13f20:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
   13f24:	33fa      	adds	r3, #250	; 0xfa
   13f26:	441a      	add	r2, r3
   13f28:	b292      	uxth	r2, r2
   13f2a:	e797      	b.n	13e5c <radio_connect_enable+0x274>
		return BT_HCI_ERR_CMD_DISALLOWED;
   13f2c:	200c      	movs	r0, #12
   13f2e:	e7da      	b.n	13ee6 <radio_connect_enable+0x2fe>
   13f30:	1afd498d 	.word	0x1afd498d
   13f34:	00000007 	.word	0x00000007
   13f38:	3b9aca00 	.word	0x3b9aca00
   13f3c:	200018b2 	.word	0x200018b2
   13f40:	01c9c37f 	.word	0x01c9c37f
   13f44:	026259ff 	.word	0x026259ff
   13f48:	20000bb0 	.word	0x20000bb0
   13f4c:	8e89bed6 	.word	0x8e89bed6

00013f50 <ll_conn_update>:
{
   13f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f54:	460c      	mov	r4, r1
   13f56:	4690      	mov	r8, r2
   13f58:	461d      	mov	r5, r3
   13f5a:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   13f5e:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
   13f62:	f7f9 fc3b 	bl	d7dc <connection_get>
	if (!conn) {
   13f66:	b330      	cbz	r0, 13fb6 <ll_conn_update+0x66>
	if (!cmd) {
   13f68:	2c00      	cmp	r4, #0
   13f6a:	d14a      	bne.n	14002 <ll_conn_update+0xb2>
		if (!conn->llcp_conn_param.disabled &&
   13f6c:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   13f70:	06d9      	lsls	r1, r3, #27
   13f72:	d407      	bmi.n	13f84 <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
   13f74:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
   13f78:	069a      	lsls	r2, r3, #26
   13f7a:	d541      	bpl.n	14000 <ll_conn_update+0xb0>
		     (conn->llcp_features &
   13f7c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
   13f80:	079b      	lsls	r3, r3, #30
   13f82:	d43d      	bmi.n	14000 <ll_conn_update+0xb0>
		} else if (conn->role) {
   13f84:	f990 301d 	ldrsb.w	r3, [r0, #29]
   13f88:	2b00      	cmp	r3, #0
   13f8a:	da17      	bge.n	13fbc <ll_conn_update+0x6c>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   13f8c:	201a      	movs	r0, #26
   13f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
   13f92:	428b      	cmp	r3, r1
   13f94:	d00f      	beq.n	13fb6 <ll_conn_update+0x66>
			    (conn->llcp_conn_param.state !=
   13f96:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
   13f9a:	f003 0207 	and.w	r2, r3, #7
   13f9e:	2a03      	cmp	r2, #3
   13fa0:	d109      	bne.n	13fb6 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   13fa2:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   13fa6:	b2db      	uxtb	r3, r3
   13fa8:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   13fac:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
   13fb0:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
   13fb4:	e021      	b.n	13ffa <ll_conn_update+0xaa>
		return BT_HCI_ERR_CMD_DISALLOWED;
   13fb6:	200c      	movs	r0, #12
   13fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->llcp_req != conn->llcp_ack) {
   13fbc:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   13fc0:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   13fc4:	429a      	cmp	r2, r3
   13fc6:	d1f6      	bne.n	13fb6 <ll_conn_update+0x66>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   13fc8:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
   13fcc:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
   13fd0:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
   13fd2:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   13fd4:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   13fd8:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
   13fdc:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
   13fde:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   13fe2:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
   13fe6:	f8a0 607c 	strh.w	r6, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   13fea:	f8a0 707e 	strh.w	r7, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
   13fee:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   13ff2:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
   13ff6:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   13ffa:	2000      	movs	r0, #0
   13ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
   14000:	2401      	movs	r4, #1
		cmd--;
   14002:	3c01      	subs	r4, #1
		if (cmd) {
   14004:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   14008:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   1400c:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
   14010:	d1bf      	bne.n	13f92 <ll_conn_update+0x42>
			if (conn->llcp_conn_param.req !=
   14012:	4299      	cmp	r1, r3
   14014:	d1cf      	bne.n	13fb6 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   14016:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
   1401a:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   1401e:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   14022:	b2db      	uxtb	r3, r3
   14024:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   14028:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval = interval;
   1402a:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   1402e:	f8a0 60c6 	strh.w	r6, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   14032:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.cmd = 1;
   14036:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   1403a:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
   1403e:	e7dc      	b.n	13ffa <ll_conn_update+0xaa>

00014040 <ll_chm_update>:
{
   14040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
   14044:	4c1e      	ldr	r4, [pc, #120]	; (140c0 <ll_chm_update+0x80>)
   14046:	4601      	mov	r1, r0
   14048:	2205      	movs	r2, #5
{
   1404a:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
   1404c:	f604 5002 	addw	r0, r4, #3330	; 0xd02
   14050:	f7ec fc4b 	bl	8ea <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   14054:	f604 5002 	addw	r0, r4, #3330	; 0xd02
   14058:	2105      	movs	r1, #5
   1405a:	f7f6 fe91 	bl	ad80 <util_ones_count_get>
	_radio.data_chan_count =
   1405e:	f884 0d07 	strb.w	r0, [r4, #3335]	; 0xd07
   14062:	f894 4cf8 	ldrb.w	r4, [r4, #3320]	; 0xcf8
   14066:	3c01      	subs	r4, #1
   14068:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
   1406a:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   1406c:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
   14070:	2cff      	cmp	r4, #255	; 0xff
   14072:	d102      	bne.n	1407a <ll_chm_update+0x3a>
	return 0;
   14074:	2000      	movs	r0, #0
   14076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
   1407a:	4620      	mov	r0, r4
   1407c:	f7f9 fbae 	bl	d7dc <connection_get>
		if (!conn || conn->role) {
   14080:	4606      	mov	r6, r0
   14082:	b1b8      	cbz	r0, 140b4 <ll_chm_update+0x74>
   14084:	f990 301d 	ldrsb.w	r3, [r0, #29]
   14088:	2b00      	cmp	r3, #0
   1408a:	db13      	blt.n	140b4 <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
   1408c:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   14090:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   14094:	429a      	cmp	r2, r3
   14096:	d110      	bne.n	140ba <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   14098:	2205      	movs	r2, #5
   1409a:	4629      	mov	r1, r5
   1409c:	3079      	adds	r0, #121	; 0x79
   1409e:	f7ec fc24 	bl	8ea <memcpy>
		conn->llcp_req++;
   140a2:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
   140a6:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
   140aa:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   140ac:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
   140b0:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
   140b4:	3c01      	subs	r4, #1
   140b6:	b2e4      	uxtb	r4, r4
   140b8:	e7da      	b.n	14070 <ll_chm_update+0x30>
			return 1;
   140ba:	2001      	movs	r0, #1
}
   140bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   140c0:	20000bb0 	.word	0x20000bb0

000140c4 <ll_chm_get>:
{
   140c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   140c6:	460d      	mov	r5, r1
	conn = connection_get(handle);
   140c8:	f7f9 fb88 	bl	d7dc <connection_get>
	if (!conn) {
   140cc:	4604      	mov	r4, r0
   140ce:	b160      	cbz	r0, 140ea <ll_chm_get+0x26>
		conn->chm_update = 0;
   140d0:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   140d2:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
   140d6:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   140d8:	2205      	movs	r2, #5
   140da:	4631      	mov	r1, r6
   140dc:	4628      	mov	r0, r5
   140de:	f7ec fc04 	bl	8ea <memcpy>
	} while (conn->chm_update);
   140e2:	7f20      	ldrb	r0, [r4, #28]
   140e4:	2800      	cmp	r0, #0
   140e6:	d1f6      	bne.n	140d6 <ll_chm_get+0x12>
   140e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   140ea:	2001      	movs	r0, #1
}
   140ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000140ee <ll_start_enc_req_send>:
{
   140ee:	b570      	push	{r4, r5, r6, lr}
   140f0:	460d      	mov	r5, r1
   140f2:	4616      	mov	r6, r2
	conn = connection_get(handle);
   140f4:	f7f9 fb72 	bl	d7dc <connection_get>
	if (!conn) {
   140f8:	4604      	mov	r4, r0
   140fa:	b908      	cbnz	r0, 14100 <ll_start_enc_req_send+0x12>
		return 1;
   140fc:	2001      	movs	r0, #1
   140fe:	bd70      	pop	{r4, r5, r6, pc}
	if (error_code) {
   14100:	b315      	cbz	r5, 14148 <ll_start_enc_req_send+0x5a>
		if (conn->refresh == 0) {
   14102:	f890 00f8 	ldrb.w	r0, [r0, #248]	; 0xf8
   14106:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   1410a:	d110      	bne.n	1412e <ll_start_enc_req_send+0x40>
			if (conn->llcp_req != conn->llcp_ack) {
   1410c:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   14110:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   14114:	4293      	cmp	r3, r2
   14116:	d1f1      	bne.n	140fc <ll_start_enc_req_send+0xe>
			conn->llcp_req++;
   14118:	3301      	adds	r3, #1
			conn->llcp_type = LLCP_ENCRYPTION;
   1411a:	2203      	movs	r2, #3
			conn->llcp.encryption.error_code = error_code;
   1411c:	f884 5079 	strb.w	r5, [r4, #121]	; 0x79
			conn->llcp.encryption.initiate = 0;
   14120:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
			conn->llcp_req++;
   14124:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
			conn->llcp_type = LLCP_ENCRYPTION;
   14128:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
   1412c:	bd70      	pop	{r4, r5, r6, pc}
			if (conn->llcp_terminate.ack !=
   1412e:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
   14132:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   14136:	4293      	cmp	r3, r2
   14138:	d1e0      	bne.n	140fc <ll_start_enc_req_send+0xe>
			conn->llcp_terminate.req++;
   1413a:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   1413c:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
			conn->llcp_terminate.req++;
   14140:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	return 0;
   14144:	2000      	movs	r0, #0
   14146:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   14148:	2210      	movs	r2, #16
   1414a:	4631      	mov	r1, r6
   1414c:	3084      	adds	r0, #132	; 0x84
   1414e:	f7ec fbcc 	bl	8ea <memcpy>
		if (conn->llcp_req != conn->llcp_ack) {
   14152:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   14156:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   1415a:	4293      	cmp	r3, r2
   1415c:	d1ce      	bne.n	140fc <ll_start_enc_req_send+0xe>
		conn->llcp_type = LLCP_ENCRYPTION;
   1415e:	2203      	movs	r2, #3
		conn->llcp_req++;
   14160:	3301      	adds	r3, #1
		conn->llcp.encryption.error_code = 0;
   14162:	f884 5079 	strb.w	r5, [r4, #121]	; 0x79
		conn->llcp.encryption.initiate = 0;
   14166:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_ENCRYPTION;
   1416a:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
		conn->llcp_req++;
   1416e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   14172:	e7e7      	b.n	14144 <ll_start_enc_req_send+0x56>

00014174 <ll_feature_req_send>:
{
   14174:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   14176:	f7f9 fb31 	bl	d7dc <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   1417a:	b168      	cbz	r0, 14198 <ll_feature_req_send+0x24>
   1417c:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   14180:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   14184:	4293      	cmp	r3, r2
   14186:	d107      	bne.n	14198 <ll_feature_req_send+0x24>
	conn->llcp_req++;
   14188:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   1418a:	2204      	movs	r2, #4
	conn->llcp_req++;
   1418c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   14190:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   14194:	2000      	movs	r0, #0
   14196:	bd08      	pop	{r3, pc}
		return 1;
   14198:	2001      	movs	r0, #1
}
   1419a:	bd08      	pop	{r3, pc}

0001419c <ll_version_ind_send>:
{
   1419c:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   1419e:	f7f9 fb1d 	bl	d7dc <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   141a2:	b168      	cbz	r0, 141c0 <ll_version_ind_send+0x24>
   141a4:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   141a8:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   141ac:	4293      	cmp	r3, r2
   141ae:	d107      	bne.n	141c0 <ll_version_ind_send+0x24>
	conn->llcp_req++;
   141b0:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   141b2:	2205      	movs	r2, #5
	conn->llcp_req++;
   141b4:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   141b8:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   141bc:	2000      	movs	r0, #0
   141be:	bd08      	pop	{r3, pc}
		return 1;
   141c0:	2001      	movs	r0, #1
}
   141c2:	bd08      	pop	{r3, pc}

000141c4 <ll_terminate_ind_send>:
{
   141c4:	b510      	push	{r4, lr}
   141c6:	460c      	mov	r4, r1
	conn = connection_get(handle);
   141c8:	f7f9 fb08 	bl	d7dc <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   141cc:	b160      	cbz	r0, 141e8 <ll_terminate_ind_send+0x24>
   141ce:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   141d2:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
   141d6:	4293      	cmp	r3, r2
   141d8:	d106      	bne.n	141e8 <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
   141da:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   141dc:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   141e0:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   141e4:	2000      	movs	r0, #0
   141e6:	bd10      	pop	{r4, pc}
		return 1;
   141e8:	2001      	movs	r0, #1
}
   141ea:	bd10      	pop	{r4, pc}

000141ec <ll_tx_pwr_lvl_get>:
{
   141ec:	b510      	push	{r4, lr}
   141ee:	4614      	mov	r4, r2
	conn = connection_get(handle);
   141f0:	f7f9 faf4 	bl	d7dc <connection_get>
	if (!conn) {
   141f4:	b110      	cbz	r0, 141fc <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
   141f6:	2000      	movs	r0, #0
   141f8:	7020      	strb	r0, [r4, #0]
	return 0;
   141fa:	bd10      	pop	{r4, pc}
		return 1;
   141fc:	2001      	movs	r0, #1
}
   141fe:	bd10      	pop	{r4, pc}

00014200 <ll_apto_get>:
{
   14200:	b510      	push	{r4, lr}
   14202:	460c      	mov	r4, r1
	conn = connection_get(handle);
   14204:	f7f9 faea 	bl	d7dc <connection_get>
	if (!conn) {
   14208:	b160      	cbz	r0, 14224 <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   1420a:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   1420c:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
   14210:	435a      	muls	r2, r3
   14212:	237d      	movs	r3, #125	; 0x7d
   14214:	4353      	muls	r3, r2
	return 0;
   14216:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   14218:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1421c:	fb93 f3f2 	sdiv	r3, r3, r2
   14220:	8023      	strh	r3, [r4, #0]
	return 0;
   14222:	bd10      	pop	{r4, pc}
		return 1;
   14224:	2001      	movs	r0, #1
}
   14226:	bd10      	pop	{r4, pc}

00014228 <ll_apto_set>:
{
   14228:	b510      	push	{r4, lr}
   1422a:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1422c:	f7f9 fad6 	bl	d7dc <connection_get>
	if (!conn) {
   14230:	b170      	cbz	r0, 14250 <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   14232:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   14234:	f240 43e2 	movw	r3, #1250	; 0x4e2
   14238:	4353      	muls	r3, r2
   1423a:	f242 7110 	movw	r1, #10000	; 0x2710
   1423e:	fb01 3404 	mla	r4, r1, r4, r3
   14242:	3c01      	subs	r4, #1
   14244:	fb94 f4f3 	sdiv	r4, r4, r3
   14248:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   1424c:	2000      	movs	r0, #0
   1424e:	bd10      	pop	{r4, pc}
		return 1;
   14250:	2001      	movs	r0, #1
}
   14252:	bd10      	pop	{r4, pc}

00014254 <ll_length_req_send>:
{
   14254:	b570      	push	{r4, r5, r6, lr}
   14256:	460e      	mov	r6, r1
   14258:	4615      	mov	r5, r2
	conn = connection_get(handle);
   1425a:	f7f9 fabf 	bl	d7dc <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   1425e:	b1d0      	cbz	r0, 14296 <ll_length_req_send+0x42>
   14260:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   14264:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   14268:	429a      	cmp	r2, r3
   1426a:	d114      	bne.n	14296 <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   1426c:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   14270:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   14274:	4293      	cmp	r3, r2
   14276:	d10e      	bne.n	14296 <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   14278:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   1427c:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.req++;
   14280:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   14282:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
   14286:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1428a:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
   1428e:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	return 0;
   14292:	2000      	movs	r0, #0
   14294:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   14296:	2001      	movs	r0, #1
}
   14298:	bd70      	pop	{r4, r5, r6, pc}
	...

0001429c <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   1429c:	4b03      	ldr	r3, [pc, #12]	; (142ac <ll_length_default_get+0x10>)
   1429e:	f8b3 2d0a 	ldrh.w	r2, [r3, #3338]	; 0xd0a
   142a2:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   142a4:	f8b3 3d0c 	ldrh.w	r3, [r3, #3340]	; 0xd0c
   142a8:	800b      	strh	r3, [r1, #0]
   142aa:	4770      	bx	lr
   142ac:	20000bb0 	.word	0x20000bb0

000142b0 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   142b0:	4b03      	ldr	r3, [pc, #12]	; (142c0 <ll_length_default_set+0x10>)
   142b2:	f8a3 0d0a 	strh.w	r0, [r3, #3338]	; 0xd0a
	_radio.default_tx_time = max_tx_time;
   142b6:	f8a3 1d0c 	strh.w	r1, [r3, #3340]	; 0xd0c
}
   142ba:	2000      	movs	r0, #0
   142bc:	4770      	bx	lr
   142be:	bf00      	nop
   142c0:	20000bb0 	.word	0x20000bb0

000142c4 <ll_length_max_get>:
{
   142c4:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   142c6:	24fb      	movs	r4, #251	; 0xfb
   142c8:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   142ca:	f244 2090 	movw	r0, #17040	; 0x4290
   142ce:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   142d0:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   142d2:	8018      	strh	r0, [r3, #0]
   142d4:	bd10      	pop	{r4, pc}

000142d6 <ll_phy_get>:
{
   142d6:	b538      	push	{r3, r4, r5, lr}
   142d8:	460d      	mov	r5, r1
   142da:	4614      	mov	r4, r2
	conn = connection_get(handle);
   142dc:	f7f9 fa7e 	bl	d7dc <connection_get>
	if (!conn) {
   142e0:	b158      	cbz	r0, 142fa <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   142e2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   142e6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   142ea:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   142ec:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   142f0:	f3c3 0302 	ubfx	r3, r3, #0, #3
   142f4:	7023      	strb	r3, [r4, #0]
	return 0;
   142f6:	2000      	movs	r0, #0
   142f8:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   142fa:	2001      	movs	r0, #1
}
   142fc:	bd38      	pop	{r3, r4, r5, pc}
	...

00014300 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   14300:	4b03      	ldr	r3, [pc, #12]	; (14310 <ll_phy_default_set+0x10>)
   14302:	f8a3 0d0e 	strh.w	r0, [r3, #3342]	; 0xd0e
	_radio.default_phy_rx = rx;
   14306:	f8a3 1d10 	strh.w	r1, [r3, #3344]	; 0xd10
}
   1430a:	2000      	movs	r0, #0
   1430c:	4770      	bx	lr
   1430e:	bf00      	nop
   14310:	20000bb0 	.word	0x20000bb0

00014314 <ll_phy_req_send>:
{
   14314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14318:	4689      	mov	r9, r1
   1431a:	4690      	mov	r8, r2
   1431c:	461f      	mov	r7, r3
	conn = connection_get(handle);
   1431e:	f7f9 fa5d 	bl	d7dc <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   14322:	b320      	cbz	r0, 1436e <ll_phy_req_send+0x5a>
   14324:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   14328:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1432c:	429a      	cmp	r2, r3
   1432e:	d11e      	bne.n	1436e <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   14330:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   14334:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
   14338:	429d      	cmp	r5, r3
   1433a:	d118      	bne.n	1436e <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   1433c:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   14340:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   14344:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
   14348:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
   1434c:	f046 0102 	orr.w	r1, r6, #2
   14350:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
   14354:	4622      	mov	r2, r4
	conn->llcp_phy.req++;
   14356:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
   14358:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   1435c:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
   14360:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	conn->llcp_phy.rx = rx;
   14364:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	return 0;
   14368:	2000      	movs	r0, #0
   1436a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   1436e:	2001      	movs	r0, #1
}
   14370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00014374 <ll_rx_get>:
{
   14374:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14378:	4605      	mov	r5, r0
   1437a:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   1437c:	4918      	ldr	r1, [pc, #96]	; (143e0 <ll_rx_get+0x6c>)
   1437e:	f8d1 3d34 	ldr.w	r3, [r1, #3380]	; 0xd34
   14382:	f8d1 2d38 	ldr.w	r2, [r1, #3384]	; 0xd38
   14386:	4293      	cmp	r3, r2
   14388:	460f      	mov	r7, r1
   1438a:	d01f      	beq.n	143cc <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
   1438c:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   14390:	f601 515f 	addw	r1, r1, #3423	; 0xd5f
   14394:	f898 2000 	ldrb.w	r2, [r8]
   14398:	f7f9 f9d6 	bl	d748 <tx_cmplt_get>
		if (!cmplt) {
   1439c:	4604      	mov	r4, r0
   1439e:	b9e0      	cbnz	r0, 143da <ll_rx_get+0x66>
			first = _radio.packet_release_first;
   143a0:	ae02      	add	r6, sp, #8
   143a2:	f897 3d5f 	ldrb.w	r3, [r7, #3423]	; 0xd5f
   143a6:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
   143aa:	f897 2d60 	ldrb.w	r2, [r7, #3424]	; 0xd60
   143ae:	4631      	mov	r1, r6
   143b0:	f10d 0006 	add.w	r0, sp, #6
   143b4:	f7f9 f9c8 	bl	d748 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   143b8:	b934      	cbnz	r4, 143c8 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
   143ba:	b928      	cbnz	r0, 143c8 <ll_rx_get+0x54>
			*node_rx = _node_rx;
   143bc:	f8c5 8000 	str.w	r8, [r5]
}
   143c0:	4620      	mov	r0, r4
   143c2:	b002      	add	sp, #8
   143c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   143c8:	4604      	mov	r4, r0
   143ca:	e7ee      	b.n	143aa <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   143cc:	f891 2d60 	ldrb.w	r2, [r1, #3424]	; 0xd60
   143d0:	f601 515f 	addw	r1, r1, #3423	; 0xd5f
   143d4:	f7f9 f9b8 	bl	d748 <tx_cmplt_get>
   143d8:	4604      	mov	r4, r0
		*node_rx = NULL;
   143da:	2300      	movs	r3, #0
   143dc:	602b      	str	r3, [r5, #0]
   143de:	e7ef      	b.n	143c0 <ll_rx_get+0x4c>
   143e0:	20000bb0 	.word	0x20000bb0

000143e4 <ll_rx_mem_release>:
{
   143e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
   143e8:	4c17      	ldr	r4, [pc, #92]	; (14448 <ll_rx_mem_release+0x64>)
{
   143ea:	4605      	mov	r5, r0
	_node_rx = *node_rx;
   143ec:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   143ee:	f6a4 5618 	subw	r6, r4, #3352	; 0xd18
			mem_release(conn, &_radio.conn_free);
   143f2:	f1a4 0724 	sub.w	r7, r4, #36	; 0x24
	while (_node_rx) {
   143f6:	b928      	cbnz	r0, 14404 <ll_rx_mem_release+0x20>
	*node_rx = _node_rx;
   143f8:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
   143fa:	20ff      	movs	r0, #255	; 0xff
}
   143fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
   14400:	f7f9 b8e0 	b.w	d5c4 <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
   14404:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
   14406:	f8d0 8000 	ldr.w	r8, [r0]
   1440a:	2a0c      	cmp	r2, #12
   1440c:	d807      	bhi.n	1441e <ll_rx_mem_release+0x3a>
   1440e:	2301      	movs	r3, #1
   14410:	4093      	lsls	r3, r2
   14412:	f641 727e 	movw	r2, #8062	; 0x1f7e
   14416:	4213      	tst	r3, r2
   14418:	d107      	bne.n	1442a <ll_rx_mem_release+0x46>
   1441a:	061b      	lsls	r3, r3, #24
   1441c:	d40a      	bmi.n	14434 <ll_rx_mem_release+0x50>
			LL_ASSERT(0);
   1441e:	4040      	eors	r0, r0
   14420:	f380 8811 	msr	BASEPRI, r0
   14424:	f04f 0004 	mov.w	r0, #4
   14428:	df02      	svc	2
			mem_release(_node_rx_free,
   1442a:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
   1442c:	f7f6 fb17 	bl	aa5e <mem_release>
{
   14430:	4640      	mov	r0, r8
   14432:	e7e0      	b.n	143f6 <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   14434:	88c2      	ldrh	r2, [r0, #6]
   14436:	f8d6 0cf0 	ldr.w	r0, [r6, #3312]	; 0xcf0
   1443a:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1443e:	f7f6 fb29 	bl	aa94 <mem_get>
			mem_release(conn, &_radio.conn_free);
   14442:	4639      	mov	r1, r7
   14444:	e7f2      	b.n	1442c <ll_rx_mem_release+0x48>
   14446:	bf00      	nop
   14448:	200018c8 	.word	0x200018c8

0001444c <do_radio_rx_fc_set>:
	if (req == ack) {
   1444c:	4291      	cmp	r1, r2
{
   1444e:	b510      	push	{r4, lr}
   14450:	4b14      	ldr	r3, [pc, #80]	; (144a4 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
   14452:	d119      	bne.n	14488 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   14454:	f8d3 2d38 	ldr.w	r2, [r3, #3384]	; 0xd38
   14458:	f8d3 4d34 	ldr.w	r4, [r3, #3380]	; 0xd34
   1445c:	4294      	cmp	r4, r2
   1445e:	d111      	bne.n	14484 <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
   14460:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
   14462:	bf14      	ite	ne
   14464:	460a      	movne	r2, r1
   14466:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   14468:	3a01      	subs	r2, #1
   1446a:	b2d2      	uxtb	r2, r2
   1446c:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   14470:	f883 2d69 	strb.w	r2, [r3, #3433]	; 0xd69
			if (req != _radio.fc_req) {
   14474:	f893 2d68 	ldrb.w	r2, [r3, #3432]	; 0xd68
			_radio.fc_handle[--ack1] = handle;
   14478:	f8a4 0d62 	strh.w	r0, [r4, #3426]	; 0xd62
			if (req != _radio.fc_req) {
   1447c:	4291      	cmp	r1, r2
   1447e:	d00f      	beq.n	144a0 <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
   14480:	f883 1d69 	strb.w	r1, [r3, #3433]	; 0xd69
			return 1;
   14484:	2001      	movs	r0, #1
   14486:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
   14488:	b929      	cbnz	r1, 14496 <do_radio_rx_fc_set+0x4a>
   1448a:	f8b3 3d66 	ldrh.w	r3, [r3, #3430]	; 0xd66
				return 1;
   1448e:	1a18      	subs	r0, r3, r0
   14490:	bf18      	it	ne
   14492:	2001      	movne	r0, #1
   14494:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   14496:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   1449a:	f8b3 3d60 	ldrh.w	r3, [r3, #3424]	; 0xd60
   1449e:	e7f6      	b.n	1448e <do_radio_rx_fc_set+0x42>
	return 0;
   144a0:	2000      	movs	r0, #0
}
   144a2:	bd10      	pop	{r4, pc}
   144a4:	20000bb0 	.word	0x20000bb0

000144a8 <radio_rx_fc_set>:
{
   144a8:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
   144aa:	4b14      	ldr	r3, [pc, #80]	; (144fc <radio_rx_fc_set+0x54>)
   144ac:	f893 2d6a 	ldrb.w	r2, [r3, #3434]	; 0xd6a
{
   144b0:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
   144b2:	b302      	cbz	r2, 144f6 <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
   144b4:	f893 2d68 	ldrb.w	r2, [r3, #3432]	; 0xd68
   144b8:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
   144ba:	f893 2d69 	ldrb.w	r2, [r3, #3433]	; 0xd69
		if (fc) {
   144be:	b135      	cbz	r5, 144ce <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
   144c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   144c4:	4298      	cmp	r0, r3
   144c6:	d016      	beq.n	144f6 <radio_rx_fc_set+0x4e>
}
   144c8:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
   144ca:	f7ff bfbf 	b.w	1444c <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   144ce:	f8d3 0d34 	ldr.w	r0, [r3, #3380]	; 0xd34
   144d2:	f8d3 4d38 	ldr.w	r4, [r3, #3384]	; 0xd38
   144d6:	42a0      	cmp	r0, r4
   144d8:	d10d      	bne.n	144f6 <radio_rx_fc_set+0x4e>
   144da:	4291      	cmp	r1, r2
   144dc:	d00b      	beq.n	144f6 <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   144de:	f8d3 4d38 	ldr.w	r4, [r3, #3384]	; 0xd38
			_radio.fc_ack = req;
   144e2:	f883 1d69 	strb.w	r1, [r3, #3433]	; 0xd69
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   144e6:	42a0      	cmp	r0, r4
   144e8:	d005      	beq.n	144f6 <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
   144ea:	f893 0d68 	ldrb.w	r0, [r3, #3432]	; 0xd68
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   144ee:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
   144f0:	bf08      	it	eq
   144f2:	f883 2d69 	strbeq.w	r2, [r3, #3433]	; 0xd69
}
   144f6:	2000      	movs	r0, #0
   144f8:	bc30      	pop	{r4, r5}
   144fa:	4770      	bx	lr
   144fc:	20000bb0 	.word	0x20000bb0

00014500 <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   14500:	4801      	ldr	r0, [pc, #4]	; (14508 <ll_tx_mem_acquire+0x8>)
   14502:	f7f6 ba92 	b.w	aa2a <mem_acquire>
   14506:	bf00      	nop
   14508:	200018fc 	.word	0x200018fc

0001450c <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   1450c:	4901      	ldr	r1, [pc, #4]	; (14514 <ll_tx_mem_release+0x8>)
   1450e:	f7f6 baa6 	b.w	aa5e <mem_release>
   14512:	bf00      	nop
   14514:	200018fc 	.word	0x200018fc

00014518 <ll_tx_mem_enqueue>:
}

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   14518:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   1451a:	4d2b      	ldr	r5, [pc, #172]	; (145c8 <ll_tx_mem_enqueue+0xb0>)
   1451c:	f895 4d5e 	ldrb.w	r4, [r5, #3422]	; 0xd5e
	if (last == _radio.packet_tx_count) {
   14520:	f895 3d5c 	ldrb.w	r3, [r5, #3420]	; 0xd5c
	last = _radio.packet_tx_last + 1;
   14524:	3401      	adds	r4, #1
{
   14526:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   14528:	b2e4      	uxtb	r4, r4
{
   1452a:	4607      	mov	r7, r0
   1452c:	460e      	mov	r6, r1
		last = 0;
   1452e:	42a3      	cmp	r3, r4
   14530:	bf08      	it	eq
   14532:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   14534:	f7f9 f952 	bl	d7dc <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   14538:	2800      	cmp	r0, #0
   1453a:	d042      	beq.n	145c2 <ll_tx_mem_enqueue+0xaa>
   1453c:	f895 3d5d 	ldrb.w	r3, [r5, #3421]	; 0xd5d
   14540:	429c      	cmp	r4, r3
   14542:	d03e      	beq.n	145c2 <ll_tx_mem_enqueue+0xaa>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   14544:	f8b5 3d50 	ldrh.w	r3, [r5, #3408]	; 0xd50
   14548:	7972      	ldrb	r2, [r6, #5]
   1454a:	3b07      	subs	r3, #7
   1454c:	429a      	cmp	r2, r3
   1454e:	d905      	bls.n	1455c <ll_tx_mem_enqueue+0x44>
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14550:	4040      	eors	r0, r0
   14552:	f380 8811 	msr	BASEPRI, r0
   14556:	f04f 0004 	mov.w	r0, #4
   1455a:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   1455c:	f895 2d5e 	ldrb.w	r2, [r5, #3422]	; 0xd5e
   14560:	f8d5 3d54 	ldr.w	r3, [r5, #3412]	; 0xd54
   14564:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   14568:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   1456c:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   1456e:	f885 4d5e 	strb.w	r4, [r5, #3422]	; 0xd5e
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   14572:	f990 301d 	ldrsb.w	r3, [r0, #29]
   14576:	2b00      	cmp	r3, #0
   14578:	db02      	blt.n	14580 <ll_tx_mem_enqueue+0x68>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   1457a:	2000      	movs	r0, #0
}
   1457c:	b009      	add	sp, #36	; 0x24
   1457e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   14580:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   14582:	2b00      	cmp	r3, #0
   14584:	d0f9      	beq.n	1457a <ll_tx_mem_enqueue+0x62>
   14586:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   1458a:	f012 0302 	ands.w	r3, r2, #2
   1458e:	d1f4      	bne.n	1457a <ll_tx_mem_enqueue+0x62>
		conn->slave.latency_cancel = 1;
   14590:	f042 0202 	orr.w	r2, r2, #2
   14594:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   14598:	f890 2020 	ldrb.w	r2, [r0, #32]
   1459c:	490b      	ldr	r1, [pc, #44]	; (145cc <ll_tx_mem_enqueue+0xb4>)
   1459e:	9105      	str	r1, [sp, #20]
   145a0:	3207      	adds	r2, #7
   145a2:	2101      	movs	r1, #1
   145a4:	9006      	str	r0, [sp, #24]
   145a6:	9304      	str	r3, [sp, #16]
   145a8:	9103      	str	r1, [sp, #12]
   145aa:	9302      	str	r3, [sp, #8]
   145ac:	9301      	str	r3, [sp, #4]
   145ae:	9300      	str	r3, [sp, #0]
   145b0:	4618      	mov	r0, r3
   145b2:	b2d2      	uxtb	r2, r2
   145b4:	2103      	movs	r1, #3
   145b6:	f7f7 f8fd 	bl	b7b4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   145ba:	f030 0302 	bics.w	r3, r0, #2
   145be:	d1c7      	bne.n	14550 <ll_tx_mem_enqueue+0x38>
   145c0:	e7db      	b.n	1457a <ll_tx_mem_enqueue+0x62>
		return 1;
   145c2:	2001      	movs	r0, #1
   145c4:	e7da      	b.n	1457c <ll_tx_mem_enqueue+0x64>
   145c6:	bf00      	nop
   145c8:	20000bb0 	.word	0x20000bb0
   145cc:	0000ee6d 	.word	0x0000ee6d

000145d0 <ll_enc_req_send>:
{
   145d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   145d4:	4607      	mov	r7, r0
   145d6:	4688      	mov	r8, r1
   145d8:	4616      	mov	r6, r2
   145da:	4699      	mov	r9, r3
	conn = connection_get(handle);
   145dc:	f7f9 f8fe 	bl	d7dc <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   145e0:	4605      	mov	r5, r0
   145e2:	b910      	cbnz	r0, 145ea <ll_enc_req_send+0x1a>
			return 1;
   145e4:	2001      	movs	r0, #1
   145e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   145ea:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   145ee:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   145f2:	429a      	cmp	r2, r3
   145f4:	d1f6      	bne.n	145e4 <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
   145f6:	f7ff ff83 	bl	14500 <ll_tx_mem_acquire>
	if (node_tx) {
   145fa:	4604      	mov	r4, r0
   145fc:	2800      	cmp	r0, #0
   145fe:	d0f1      	beq.n	145e4 <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   14600:	2210      	movs	r2, #16
   14602:	4649      	mov	r1, r9
   14604:	f105 0084 	add.w	r0, r5, #132	; 0x84
   14608:	f7ec f96f 	bl	8ea <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   1460c:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   14610:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   14614:	d124      	bne.n	14660 <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   14616:	7923      	ldrb	r3, [r4, #4]
   14618:	f043 0303 	orr.w	r3, r3, #3
   1461c:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   1461e:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   14620:	2208      	movs	r2, #8
			pdu_data_tx->len =
   14622:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   14624:	2303      	movs	r3, #3
   14626:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   14628:	4641      	mov	r1, r8
   1462a:	18a0      	adds	r0, r4, r2
   1462c:	f7ec f95d 	bl	8ea <memcpy>
			enc_req->ediv[0] = ediv[0];
   14630:	7833      	ldrb	r3, [r6, #0]
   14632:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   14634:	7873      	ldrb	r3, [r6, #1]
   14636:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   14638:	2108      	movs	r1, #8
   1463a:	f104 0012 	add.w	r0, r4, #18
   1463e:	f7f7 fa17 	bl	ba70 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   14642:	2104      	movs	r1, #4
   14644:	f104 001a 	add.w	r0, r4, #26
   14648:	f7f7 fa12 	bl	ba70 <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
   1464c:	4621      	mov	r1, r4
   1464e:	4638      	mov	r0, r7
   14650:	f7ff ff62 	bl	14518 <ll_tx_mem_enqueue>
   14654:	2601      	movs	r6, #1
   14656:	b1d0      	cbz	r0, 1468e <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
   14658:	4620      	mov	r0, r4
   1465a:	f7ff ff57 	bl	1450c <ll_tx_mem_release>
   1465e:	e7c1      	b.n	145e4 <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   14660:	2b30      	cmp	r3, #48	; 0x30
   14662:	d1f9      	bne.n	14658 <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   14664:	2208      	movs	r2, #8
   14666:	4641      	mov	r1, r8
   14668:	f105 007a 	add.w	r0, r5, #122	; 0x7a
   1466c:	f7ec f93d 	bl	8ea <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   14670:	7833      	ldrb	r3, [r6, #0]
   14672:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
   14676:	7873      	ldrb	r3, [r6, #1]
   14678:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1467c:	7923      	ldrb	r3, [r4, #4]
   1467e:	f043 0303 	orr.w	r3, r3, #3
   14682:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   14684:	2301      	movs	r3, #1
   14686:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   14688:	230a      	movs	r3, #10
   1468a:	71e3      	strb	r3, [r4, #7]
   1468c:	e7de      	b.n	1464c <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
   1468e:	2303      	movs	r3, #3
   14690:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
   14694:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
   14698:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
   1469c:	3301      	adds	r3, #1
   1469e:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
}
   146a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000146a8 <radio_adv_enable>:
{
   146a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146ac:	b08f      	sub	sp, #60	; 0x3c
   146ae:	4699      	mov	r9, r3
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   146b0:	2302      	movs	r3, #2
	if (_radio.advertiser.is_enabled) {
   146b2:	f8df b35c 	ldr.w	fp, [pc, #860]	; 14a10 <radio_adv_enable+0x368>
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   146b6:	930d      	str	r3, [sp, #52]	; 0x34
	radio_ext_adv_enable_flag = false;
   146b8:	4bcf      	ldr	r3, [pc, #828]	; (149f8 <radio_adv_enable+0x350>)
{
   146ba:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
	radio_ext_adv_enable_flag = false;
   146be:	2400      	movs	r4, #0
   146c0:	701c      	strb	r4, [r3, #0]
	if (_radio.advertiser.is_enabled) {
   146c2:	f99b 3028 	ldrsb.w	r3, [fp, #40]	; 0x28
   146c6:	42a3      	cmp	r3, r4
{
   146c8:	4680      	mov	r8, r0
   146ca:	4692      	mov	sl, r2
   146cc:	465d      	mov	r5, fp
	if (_radio.advertiser.is_enabled) {
   146ce:	da01      	bge.n	146d4 <radio_adv_enable+0x2c>
	return BT_HCI_ERR_CMD_DISALLOWED;
   146d0:	200c      	movs	r0, #12
   146d2:	e1b2      	b.n	14a3a <radio_adv_enable+0x392>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
   146d4:	f89b 722f 	ldrb.w	r7, [fp, #559]	; 0x22f
   146d8:	eb07 2707 	add.w	r7, r7, r7, lsl #8
   146dc:	372c      	adds	r7, #44	; 0x2c
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   146de:	f81b 3007 	ldrb.w	r3, [fp, r7]
   146e2:	f003 030f 	and.w	r3, r3, #15
   146e6:	2b01      	cmp	r3, #1
   146e8:	f200 80bb 	bhi.w	14862 <radio_adv_enable+0x1ba>
		if (_radio.advertiser.conn) {
   146ec:	f8db 6c18 	ldr.w	r6, [fp, #3096]	; 0xc18
   146f0:	2e00      	cmp	r6, #0
   146f2:	d1ed      	bne.n	146d0 <radio_adv_enable+0x28>
		link = mem_acquire(&_radio.link_rx_free);
   146f4:	f50b 6053 	add.w	r0, fp, #3376	; 0xd30
   146f8:	f7f6 f997 	bl	aa2a <mem_acquire>
		if (!link) {
   146fc:	900a      	str	r0, [sp, #40]	; 0x28
   146fe:	b158      	cbz	r0, 14718 <radio_adv_enable+0x70>
		conn = mem_acquire(&_radio.conn_free);
   14700:	f60b 40f4 	addw	r0, fp, #3316	; 0xcf4
   14704:	f7f6 f991 	bl	aa2a <mem_acquire>
		if (!conn) {
   14708:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1470a:	4604      	mov	r4, r0
   1470c:	b930      	cbnz	r0, 1471c <radio_adv_enable+0x74>
			mem_release(link, &_radio.link_rx_free);
   1470e:	f50b 6153 	add.w	r1, fp, #3376	; 0xd30
   14712:	4610      	mov	r0, r2
   14714:	f7f6 f9a3 	bl	aa5e <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   14718:	2007      	movs	r0, #7
   1471a:	e18e      	b.n	14a3a <radio_adv_enable+0x392>
		conn->handle = 0xFFFF;
   1471c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14720:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
   14722:	f503 4394 	add.w	r3, r3, #18944	; 0x4a00
   14726:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
		conn->data_chan_sel = 0;
   1472a:	7f43      	ldrb	r3, [r0, #29]
		conn->data_chan_use = 0;
   1472c:	77c6      	strb	r6, [r0, #31]
		conn->data_chan_sel = 0;
   1472e:	f366 1386 	bfi	r3, r6, #6, #1
   14732:	7743      	strb	r3, [r0, #29]
		conn->default_tx_octets = _radio.default_tx_octets;
   14734:	f8bb 3d0a 	ldrh.w	r3, [fp, #3338]	; 0xd0a
   14738:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1473a:	231b      	movs	r3, #27
   1473c:	85c3      	strh	r3, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1473e:	8603      	strh	r3, [r0, #48]	; 0x30
		conn->default_tx_time = _radio.default_tx_time;
   14740:	f8bb 3d0c 	ldrh.w	r3, [fp, #3340]	; 0xd0c
   14744:	8643      	strh	r3, [r0, #50]	; 0x32
		conn->max_tx_time =
   14746:	f44f 73a4 	mov.w	r3, #328	; 0x148
   1474a:	8683      	strh	r3, [r0, #52]	; 0x34
		conn->max_rx_time =
   1474c:	86c3      	strh	r3, [r0, #54]	; 0x36
		conn->phy_pref_tx = _radio.default_phy_tx;
   1474e:	f8bb 1d0e 	ldrh.w	r1, [fp, #3342]	; 0xd0e
   14752:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
		conn->event_counter = 0;
   14756:	8446      	strh	r6, [r0, #34]	; 0x22
		conn->phy_pref_tx = _radio.default_phy_tx;
   14758:	f361 0302 	bfi	r3, r1, #0, #3
		conn->phy_tx = BIT(0);
   1475c:	2101      	movs	r1, #1
   1475e:	f361 03c5 	bfi	r3, r1, #3, #3
		conn->phy_pref_flags = 0;
   14762:	f366 1386 	bfi	r3, r6, #6, #1
		conn->phy_flags = 0;
   14766:	f366 13c7 	bfi	r3, r6, #7, #1
   1476a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		conn->phy_tx_time = BIT(0);
   1476e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
		conn->latency_prepare = 0;
   14772:	8506      	strh	r6, [r0, #40]	; 0x28
		conn->phy_tx_time = BIT(0);
   14774:	f361 0302 	bfi	r3, r1, #0, #3
   14778:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		conn->latency_event = 0;
   1477c:	8546      	strh	r6, [r0, #42]	; 0x2a
		conn->phy_pref_rx = _radio.default_phy_rx;
   1477e:	f8bb 0d10 	ldrh.w	r0, [fp, #3344]	; 0xd10
		conn->slave.window_widening_prepare_us = 0;
   14782:	65e6      	str	r6, [r4, #92]	; 0x5c
		conn->phy_pref_rx = _radio.default_phy_rx;
   14784:	b2db      	uxtb	r3, r3
   14786:	f360 03c5 	bfi	r3, r0, #3, #3
   1478a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->phy_rx = BIT(0);
   1478e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		conn->slave.window_widening_event_us = 0;
   14792:	6626      	str	r6, [r4, #96]	; 0x60
		conn->phy_rx = BIT(0);
   14794:	f361 0302 	bfi	r3, r1, #0, #3
   14798:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
		conn->role = 1;
   1479c:	7f63      	ldrb	r3, [r4, #29]
   1479e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   147a2:	7763      	strb	r3, [r4, #29]
		conn->connect_expire = 6;
   147a4:	2306      	movs	r3, #6
   147a6:	87a3      	strh	r3, [r4, #60]	; 0x3c
		conn->common.fex_valid = 0;
   147a8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   147ac:	f366 1345 	bfi	r3, r6, #5, #1
		conn->slave.latency_enabled = 0;
   147b0:	f366 0300 	bfi	r3, r6, #0, #1
		conn->slave.latency_cancel = 0;
   147b4:	f366 0341 	bfi	r3, r6, #1, #1
   147b8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		conn->slave.ticks_to_offset = 0;
   147bc:	6726      	str	r6, [r4, #112]	; 0x70
		conn->llcp_version.tx = 0;
   147be:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
		conn->supervision_expire = 0;
   147c2:	f8a4 6040 	strh.w	r6, [r4, #64]	; 0x40
		conn->llcp_version.tx = 0;
   147c6:	f366 0300 	bfi	r3, r6, #0, #1
		conn->llcp_version.rx = 0;
   147ca:	f366 0341 	bfi	r3, r6, #1, #1
   147ce:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
		conn->llcp_conn_param.disabled = 0;
   147d2:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->procedure_expire = 0;
   147d6:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
		conn->llcp_conn_param.disabled = 0;
   147da:	f366 1304 	bfi	r3, r6, #4, #1
   147de:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->sn = 0;
   147e2:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->apto_expire = 0;
   147e6:	f8a4 604c 	strh.w	r6, [r4, #76]	; 0x4c
		conn->sn = 0;
   147ea:	f366 0300 	bfi	r3, r6, #0, #1
		conn->nesn = 0;
   147ee:	f366 0341 	bfi	r3, r6, #1, #1
		conn->pause_rx = 0;
   147f2:	f366 0382 	bfi	r3, r6, #2, #1
		conn->pause_tx = 0;
   147f6:	f366 03c3 	bfi	r3, r6, #3, #1
		conn->enc_rx = 0;
   147fa:	f366 1304 	bfi	r3, r6, #4, #1
		conn->enc_tx = 0;
   147fe:	f366 1345 	bfi	r3, r6, #5, #1
		conn->refresh = 0;
   14802:	f366 1386 	bfi	r3, r6, #6, #1
		conn->empty = 0;
   14806:	f366 13c7 	bfi	r3, r6, #7, #1
		conn->appto_expire = 0;
   1480a:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
		conn->llcp_req = 0;
   1480e:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
		conn->llcp_ack = 0;
   14812:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
		conn->llcp_terminate.req = 0;
   14816:	f884 60b0 	strb.w	r6, [r4, #176]	; 0xb0
		conn->llcp_terminate.ack = 0;
   1481a:	f884 60b1 	strb.w	r6, [r4, #177]	; 0xb1
		conn->llcp_terminate.reason_peer = 0;
   1481e:	f884 60b3 	strb.w	r6, [r4, #179]	; 0xb3
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   14822:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
		conn->llcp_conn_param.req = 0;
   14826:	f884 60c0 	strb.w	r6, [r4, #192]	; 0xc0
		conn->llcp_conn_param.ack = 0;
   1482a:	f884 60c1 	strb.w	r6, [r4, #193]	; 0xc1
		conn->llcp_length.req = 0;
   1482e:	f884 60e8 	strb.w	r6, [r4, #232]	; 0xe8
		conn->llcp_length.ack = 0;
   14832:	f884 60e9 	strb.w	r6, [r4, #233]	; 0xe9
		conn->llcp_phy.req = 0;
   14836:	f884 60f4 	strb.w	r6, [r4, #244]	; 0xf4
		conn->llcp_phy.ack = 0;
   1483a:	f884 60f5 	strb.w	r6, [r4, #245]	; 0xf5
		conn->empty = 0;
   1483e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		conn->pkt_tx_head = NULL;
   14842:	f8c4 613c 	str.w	r6, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = NULL;
   14846:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
		conn->pkt_tx_ctrl_last = NULL;
   1484a:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
		conn->pkt_tx_data = NULL;
   1484e:	f8c4 6148 	str.w	r6, [r4, #328]	; 0x148
		conn->pkt_tx_last = NULL;
   14852:	f8c4 614c 	str.w	r6, [r4, #332]	; 0x14c
		conn->packet_tx_head_len = 0;
   14856:	f884 6150 	strb.w	r6, [r4, #336]	; 0x150
		conn->packet_tx_head_offset = 0;
   1485a:	f884 6151 	strb.w	r6, [r4, #337]	; 0x151
		_radio.advertiser.conn = conn;
   1485e:	f8cb 4c18 	str.w	r4, [fp, #3096]	; 0xc18
	_radio.advertiser.chan_map = chan_map;
   14862:	a80e      	add	r0, sp, #56	; 0x38
   14864:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   14868:	f810 2d09 	ldrb.w	r2, [r0, #-9]!
	_radio.advertiser.rl_idx = rl_idx;
   1486c:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
	_radio.advertiser.chan_map = chan_map;
   14870:	f362 1306 	bfi	r3, r2, #4, #3
   14874:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.filter_policy = filter_policy;
   14878:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
   1487c:	f36a 0301 	bfi	r3, sl, #0, #2
   14880:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
	_radio.advertiser.hdr.ticks_active_to_start =
   14884:	f8d5 3d6c 	ldr.w	r3, [r5, #3436]	; 0xd6c
   14888:	61eb      	str	r3, [r5, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
   1488a:	2327      	movs	r3, #39	; 0x27
   1488c:	61ab      	str	r3, [r5, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   1488e:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
   14890:	2300      	movs	r3, #0
   14892:	622b      	str	r3, [r5, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   14894:	f7f6 fa74 	bl	ad80 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   14898:	f81b 6007 	ldrb.w	r6, [fp, r7]
   1489c:	f006 060f 	and.w	r6, r6, #15
   148a0:	2e01      	cmp	r6, #1
   148a2:	d169      	bne.n	14978 <radio_adv_enable+0x2d0>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
   148a4:	f44f 7327 	mov.w	r3, #668	; 0x29c
   148a8:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
   148aa:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
   148ae:	4953      	ldr	r1, [pc, #332]	; (149fc <radio_adv_enable+0x354>)
   148b0:	a34f      	add	r3, pc, #316	; (adr r3, 149f0 <radio_adv_enable+0x348>)
   148b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   148b6:	fba0 0101 	umull	r0, r1, r0, r1
   148ba:	f7eb fcd5 	bl	268 <__aeabi_uldivmod>
	ticks_slot_offset =
   148be:	69ef      	ldr	r7, [r5, #28]
   148c0:	69ab      	ldr	r3, [r5, #24]
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
   148c2:	6268      	str	r0, [r5, #36]	; 0x24
	ticks_slot_offset =
   148c4:	429f      	cmp	r7, r3
   148c6:	bf38      	it	cc
   148c8:	461f      	movcc	r7, r3
	_radio.advertiser.is_hdcd = !interval &&
   148ca:	f1b8 0f00 	cmp.w	r8, #0
   148ce:	d15b      	bne.n	14988 <radio_adv_enable+0x2e0>
   148d0:	1e72      	subs	r2, r6, #1
   148d2:	4253      	negs	r3, r2
   148d4:	4153      	adcs	r3, r2
   148d6:	f895 6028 	ldrb.w	r6, [r5, #40]	; 0x28
   148da:	f8df 9138 	ldr.w	r9, [pc, #312]	; 14a14 <radio_adv_enable+0x36c>
   148de:	f8df b138 	ldr.w	fp, [pc, #312]	; 14a18 <radio_adv_enable+0x370>
   148e2:	f363 1686 	bfi	r6, r3, #6, #1
   148e6:	f885 6028 	strb.w	r6, [r5, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
   148ea:	f016 0640 	ands.w	r6, r6, #64	; 0x40
   148ee:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   148f2:	d051      	beq.n	14998 <radio_adv_enable+0x2f0>
		u32_t ticks_now = ticker_ticks_now_get();
   148f4:	f7f7 f87c 	bl	b9f0 <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   148f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   148fa:	f8cd a020 	str.w	sl, [sp, #32]
   148fe:	441f      	add	r7, r3
		u32_t ticks_now = ticker_ticks_now_get();
   14900:	4606      	mov	r6, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14902:	2000      	movs	r0, #0
   14904:	f8cd 901c 	str.w	r9, [sp, #28]
   14908:	9006      	str	r0, [sp, #24]
   1490a:	f8cd b014 	str.w	fp, [sp, #20]
   1490e:	9704      	str	r7, [sp, #16]
   14910:	9003      	str	r0, [sp, #12]
   14912:	9002      	str	r0, [sp, #8]
   14914:	e88d 0081 	stmia.w	sp, {r0, r7}
   14918:	4633      	mov	r3, r6
   1491a:	2205      	movs	r2, #5
   1491c:	2103      	movs	r1, #3
   1491e:	f7f6 fef9 	bl	b714 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   14922:	2802      	cmp	r0, #2
   14924:	d034      	beq.n	14990 <radio_adv_enable+0x2e8>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   14926:	980d      	ldr	r0, [sp, #52]	; 0x34
   14928:	b9c8      	cbnz	r0, 1495e <radio_adv_enable+0x2b6>
		ret_cb = TICKER_STATUS_BUSY;
   1492a:	2302      	movs	r3, #2
   1492c:	930d      	str	r3, [sp, #52]	; 0x34
		ret =
   1492e:	4b34      	ldr	r3, [pc, #208]	; (14a00 <radio_adv_enable+0x358>)
   14930:	9305      	str	r3, [sp, #20]
   14932:	2203      	movs	r2, #3
   14934:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
   14938:	9300      	str	r3, [sp, #0]
   1493a:	f8cd a020 	str.w	sl, [sp, #32]
   1493e:	f8cd 901c 	str.w	r9, [sp, #28]
   14942:	9006      	str	r0, [sp, #24]
   14944:	9004      	str	r0, [sp, #16]
   14946:	9003      	str	r0, [sp, #12]
   14948:	9002      	str	r0, [sp, #8]
   1494a:	9001      	str	r0, [sp, #4]
   1494c:	4633      	mov	r3, r6
   1494e:	4611      	mov	r1, r2
		ret =
   14950:	f7f6 fee0 	bl	b714 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   14954:	2802      	cmp	r0, #2
   14956:	d044      	beq.n	149e2 <radio_adv_enable+0x33a>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   14958:	980d      	ldr	r0, [sp, #52]	; 0x34
   1495a:	2800      	cmp	r0, #0
   1495c:	d05e      	beq.n	14a1c <radio_adv_enable+0x374>
	if (conn) {
   1495e:	2c00      	cmp	r4, #0
   14960:	f43f aeb6 	beq.w	146d0 <radio_adv_enable+0x28>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
   14964:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   14968:	4926      	ldr	r1, [pc, #152]	; (14a04 <radio_adv_enable+0x35c>)
   1496a:	f7f6 f878 	bl	aa5e <mem_release>
		mem_release(conn, &_radio.conn_free);
   1496e:	4926      	ldr	r1, [pc, #152]	; (14a08 <radio_adv_enable+0x360>)
   14970:	4620      	mov	r0, r4
   14972:	f7f6 f874 	bl	aa5e <mem_release>
   14976:	e6ab      	b.n	146d0 <radio_adv_enable+0x28>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
   14978:	2e02      	cmp	r6, #2
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
   1497a:	bf0c      	ite	eq
   1497c:	f44f 7329 	moveq.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
   14980:	f240 53fc 	movwne	r3, #1532	; 0x5fc
   14984:	4358      	muls	r0, r3
   14986:	e792      	b.n	148ae <radio_adv_enable+0x206>
   14988:	2300      	movs	r3, #0
   1498a:	e7a4      	b.n	148d6 <radio_adv_enable+0x22e>
				cpu_sleep();
   1498c:	f7f8 fd40 	bl	d410 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
   14990:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14992:	2b02      	cmp	r3, #2
   14994:	d0fa      	beq.n	1498c <radio_adv_enable+0x2e4>
   14996:	e7c6      	b.n	14926 <radio_adv_enable+0x27e>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14998:	f7f7 f82a 	bl	b9f0 <ticker_ticks_now_get>
		ret =
   1499c:	f8cd a020 	str.w	sl, [sp, #32]
   149a0:	f8cd 901c 	str.w	r9, [sp, #28]
   149a4:	9606      	str	r6, [sp, #24]
   149a6:	f8cd b014 	str.w	fp, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   149aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   149ac:	900a      	str	r0, [sp, #40]	; 0x28
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   149ae:	4817      	ldr	r0, [pc, #92]	; (14a0c <radio_adv_enable+0x364>)
		ret =
   149b0:	9603      	str	r6, [sp, #12]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   149b2:	fa1f f888 	uxth.w	r8, r8
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   149b6:	441f      	add	r7, r3
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   149b8:	fba8 0100 	umull	r0, r1, r8, r0
   149bc:	2391      	movs	r3, #145	; 0x91
   149be:	fb03 1108 	mla	r1, r3, r8, r1
   149c2:	a30b      	add	r3, pc, #44	; (adr r3, 149f0 <radio_adv_enable+0x348>)
   149c4:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret =
   149c8:	9704      	str	r7, [sp, #16]
   149ca:	9602      	str	r6, [sp, #8]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   149cc:	f7eb fc4c 	bl	268 <__aeabi_uldivmod>
		ret =
   149d0:	9600      	str	r6, [sp, #0]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   149d2:	9001      	str	r0, [sp, #4]
		ret =
   149d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   149d6:	2205      	movs	r2, #5
   149d8:	2103      	movs	r1, #3
   149da:	4630      	mov	r0, r6
   149dc:	e7b8      	b.n	14950 <radio_adv_enable+0x2a8>
			cpu_sleep();
   149de:	f7f8 fd17 	bl	d410 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   149e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   149e4:	2b02      	cmp	r3, #2
   149e6:	d0fa      	beq.n	149de <radio_adv_enable+0x336>
   149e8:	e7b6      	b.n	14958 <radio_adv_enable+0x2b0>
   149ea:	bf00      	nop
   149ec:	f3af 8000 	nop.w
   149f0:	1afd498d 	.word	0x1afd498d
   149f4:	00000007 	.word	0x00000007
   149f8:	20001971 	.word	0x20001971
   149fc:	3b9aca00 	.word	0x3b9aca00
   14a00:	0000f1f9 	.word	0x0000f1f9
   14a04:	200018e0 	.word	0x200018e0
   14a08:	200018a4 	.word	0x200018a4
   14a0c:	84e72a00 	.word	0x84e72a00
   14a10:	20000bb0 	.word	0x20000bb0
   14a14:	0000d455 	.word	0x0000d455
   14a18:	0000f105 	.word	0x0000f105
		_radio.advertiser.is_enabled = 1;
   14a1c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   14a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14a24:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
   14a28:	f895 3c2c 	ldrb.w	r3, [r5, #3116]	; 0xc2c
   14a2c:	f013 0401 	ands.w	r4, r3, #1
   14a30:	d103      	bne.n	14a3a <radio_adv_enable+0x392>
			ll_adv_scan_state_cb(BIT(0));
   14a32:	2001      	movs	r0, #1
   14a34:	f001 ff4e 	bl	168d4 <ll_adv_scan_state_cb>
		return 0;
   14a38:	4620      	mov	r0, r4
}
   14a3a:	b00f      	add	sp, #60	; 0x3c
   14a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014a40 <radio_ext_adv_enable>:
{
   14a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a44:	b093      	sub	sp, #76	; 0x4c
	if (_radio.advertiser.is_enabled) {
   14a46:	4ec4      	ldr	r6, [pc, #784]	; (14d58 <radio_ext_adv_enable+0x318>)
{
   14a48:	930b      	str	r3, [sp, #44]	; 0x2c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   14a4a:	2302      	movs	r3, #2
   14a4c:	9311      	str	r3, [sp, #68]	; 0x44
	radio_ext_adv_enable_flag = true;
   14a4e:	4bc3      	ldr	r3, [pc, #780]	; (14d5c <radio_ext_adv_enable+0x31c>)
{
   14a50:	f89d 8074 	ldrb.w	r8, [sp, #116]	; 0x74
   14a54:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
	radio_ext_adv_enable_flag = true;
   14a58:	f04f 0901 	mov.w	r9, #1
   14a5c:	f883 9000 	strb.w	r9, [r3]
	if (_radio.advertiser.is_enabled) {
   14a60:	f996 3028 	ldrsb.w	r3, [r6, #40]	; 0x28
   14a64:	2b00      	cmp	r3, #0
{
   14a66:	4683      	mov	fp, r0
   14a68:	468a      	mov	sl, r1
	if (_radio.advertiser.is_enabled) {
   14a6a:	da01      	bge.n	14a70 <radio_ext_adv_enable+0x30>
	return BT_HCI_ERR_CMD_DISALLOWED;
   14a6c:	200c      	movs	r0, #12
   14a6e:	e274      	b.n	14f5a <radio_ext_adv_enable+0x51a>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
   14a70:	f896 722f 	ldrb.w	r7, [r6, #559]	; 0x22f
   14a74:	eb07 2707 	add.w	r7, r7, r7, lsl #8
   14a78:	372c      	adds	r7, #44	; 0x2c
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   14a7a:	5df3      	ldrb	r3, [r6, r7]
   14a7c:	f003 030f 	and.w	r3, r3, #15
   14a80:	2b01      	cmp	r3, #1
   14a82:	f200 814d 	bhi.w	14d20 <radio_ext_adv_enable+0x2e0>
		if (_radio.advertiser.conn) {
   14a86:	f8d6 5c18 	ldr.w	r5, [r6, #3096]	; 0xc18
   14a8a:	2d00      	cmp	r5, #0
   14a8c:	d1ee      	bne.n	14a6c <radio_ext_adv_enable+0x2c>
		link = mem_acquire(&_radio.link_rx_free);
   14a8e:	f506 6053 	add.w	r0, r6, #3376	; 0xd30
   14a92:	f7f5 ffca 	bl	aa2a <mem_acquire>
		if (!link) {
   14a96:	900e      	str	r0, [sp, #56]	; 0x38
   14a98:	b158      	cbz	r0, 14ab2 <radio_ext_adv_enable+0x72>
		conn = mem_acquire(&_radio.conn_free);
   14a9a:	f606 40f4 	addw	r0, r6, #3316	; 0xcf4
   14a9e:	f7f5 ffc4 	bl	aa2a <mem_acquire>
		if (!conn) {
   14aa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14aa4:	4604      	mov	r4, r0
   14aa6:	b930      	cbnz	r0, 14ab6 <radio_ext_adv_enable+0x76>
			mem_release(link, &_radio.link_rx_free);
   14aa8:	f506 6153 	add.w	r1, r6, #3376	; 0xd30
   14aac:	4610      	mov	r0, r2
   14aae:	f7f5 ffd6 	bl	aa5e <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   14ab2:	2007      	movs	r0, #7
   14ab4:	e251      	b.n	14f5a <radio_ext_adv_enable+0x51a>
		conn->handle = 0xFFFF;
   14ab6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14aba:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
   14abc:	f503 4394 	add.w	r3, r3, #18944	; 0x4a00
   14ac0:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
		conn->data_chan_sel = 0;
   14ac4:	7f43      	ldrb	r3, [r0, #29]
		conn->data_chan_use = 0;
   14ac6:	77c5      	strb	r5, [r0, #31]
		conn->data_chan_sel = 0;
   14ac8:	f365 1386 	bfi	r3, r5, #6, #1
   14acc:	7743      	strb	r3, [r0, #29]
		conn->default_tx_octets = _radio.default_tx_octets;
   14ace:	f8b6 3d0a 	ldrh.w	r3, [r6, #3338]	; 0xd0a
   14ad2:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   14ad4:	231b      	movs	r3, #27
   14ad6:	85c3      	strh	r3, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   14ad8:	8603      	strh	r3, [r0, #48]	; 0x30
		conn->default_tx_time = _radio.default_tx_time;
   14ada:	f8b6 3d0c 	ldrh.w	r3, [r6, #3340]	; 0xd0c
   14ade:	8643      	strh	r3, [r0, #50]	; 0x32
		conn->max_tx_time =
   14ae0:	f44f 73a4 	mov.w	r3, #328	; 0x148
   14ae4:	8683      	strh	r3, [r0, #52]	; 0x34
		conn->max_rx_time =
   14ae6:	86c3      	strh	r3, [r0, #54]	; 0x36
		conn->event_counter = 0;
   14ae8:	8445      	strh	r5, [r0, #34]	; 0x22
		conn->latency_prepare = 0;
   14aea:	8505      	strh	r5, [r0, #40]	; 0x28
		conn->latency_event = 0;
   14aec:	8545      	strh	r5, [r0, #42]	; 0x2a
		conn->phy_pref_tx = _radio.default_phy_tx;
   14aee:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   14af2:	f8b6 0d0e 	ldrh.w	r0, [r6, #3342]	; 0xd0e
   14af6:	f360 0302 	bfi	r3, r0, #0, #3
		conn->phy_tx = BIT(0);
   14afa:	f369 03c5 	bfi	r3, r9, #3, #3
		conn->phy_pref_flags = 0;
   14afe:	f365 1386 	bfi	r3, r5, #6, #1
		conn->phy_flags = 0;
   14b02:	f365 13c7 	bfi	r3, r5, #7, #1
   14b06:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		conn->phy_tx_time = BIT(0);
   14b0a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   14b0e:	f369 0302 	bfi	r3, r9, #0, #3
   14b12:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->phy_pref_rx = _radio.default_phy_rx;
   14b16:	f8b6 0d10 	ldrh.w	r0, [r6, #3344]	; 0xd10
		conn->slave.window_widening_prepare_us = 0;
   14b1a:	65e5      	str	r5, [r4, #92]	; 0x5c
		conn->phy_pref_rx = _radio.default_phy_rx;
   14b1c:	b2db      	uxtb	r3, r3
   14b1e:	f360 03c5 	bfi	r3, r0, #3, #3
   14b22:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->phy_rx = BIT(0);
   14b26:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		conn->slave.window_widening_event_us = 0;
   14b2a:	6625      	str	r5, [r4, #96]	; 0x60
		conn->phy_rx = BIT(0);
   14b2c:	f369 0302 	bfi	r3, r9, #0, #3
   14b30:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
		conn->role = 1;
   14b34:	7f63      	ldrb	r3, [r4, #29]
   14b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14b3a:	7763      	strb	r3, [r4, #29]
		conn->connect_expire = 6;
   14b3c:	2306      	movs	r3, #6
   14b3e:	87a3      	strh	r3, [r4, #60]	; 0x3c
		conn->common.fex_valid = 0;
   14b40:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   14b44:	f365 1345 	bfi	r3, r5, #5, #1
		conn->slave.latency_enabled = 0;
   14b48:	f365 0300 	bfi	r3, r5, #0, #1
		conn->slave.latency_cancel = 0;
   14b4c:	f365 0341 	bfi	r3, r5, #1, #1
   14b50:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		conn->slave.ticks_to_offset = 0;
   14b54:	6725      	str	r5, [r4, #112]	; 0x70
		conn->llcp_version.tx = 0;
   14b56:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
		conn->supervision_expire = 0;
   14b5a:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
		conn->llcp_version.tx = 0;
   14b5e:	f365 0300 	bfi	r3, r5, #0, #1
		conn->llcp_version.rx = 0;
   14b62:	f365 0341 	bfi	r3, r5, #1, #1
   14b66:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
		conn->llcp_conn_param.disabled = 0;
   14b6a:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->procedure_expire = 0;
   14b6e:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
		conn->llcp_conn_param.disabled = 0;
   14b72:	f365 1304 	bfi	r3, r5, #4, #1
   14b76:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->sn = 0;
   14b7a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->apto_expire = 0;
   14b7e:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
		conn->sn = 0;
   14b82:	f365 0300 	bfi	r3, r5, #0, #1
		conn->nesn = 0;
   14b86:	f365 0341 	bfi	r3, r5, #1, #1
		conn->pause_rx = 0;
   14b8a:	f365 0382 	bfi	r3, r5, #2, #1
		conn->pause_tx = 0;
   14b8e:	f365 03c3 	bfi	r3, r5, #3, #1
		conn->enc_rx = 0;
   14b92:	f365 1304 	bfi	r3, r5, #4, #1
		conn->enc_tx = 0;
   14b96:	f365 1345 	bfi	r3, r5, #5, #1
		conn->refresh = 0;
   14b9a:	f365 1386 	bfi	r3, r5, #6, #1
		conn->empty = 0;
   14b9e:	f365 13c7 	bfi	r3, r5, #7, #1
		conn->appto_expire = 0;
   14ba2:	f8a4 5048 	strh.w	r5, [r4, #72]	; 0x48
		conn->llcp_req = 0;
   14ba6:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
		conn->llcp_ack = 0;
   14baa:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
		conn->llcp_terminate.req = 0;
   14bae:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
		conn->llcp_terminate.ack = 0;
   14bb2:	f884 50b1 	strb.w	r5, [r4, #177]	; 0xb1
		conn->llcp_terminate.reason_peer = 0;
   14bb6:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   14bba:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
		conn->llcp_conn_param.req = 0;
   14bbe:	f884 50c0 	strb.w	r5, [r4, #192]	; 0xc0
		conn->llcp_conn_param.ack = 0;
   14bc2:	f884 50c1 	strb.w	r5, [r4, #193]	; 0xc1
		conn->llcp_length.req = 0;
   14bc6:	f884 50e8 	strb.w	r5, [r4, #232]	; 0xe8
		conn->llcp_length.ack = 0;
   14bca:	f884 50e9 	strb.w	r5, [r4, #233]	; 0xe9
		conn->llcp_phy.req = 0;
   14bce:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
		conn->llcp_phy.ack = 0;
   14bd2:	f884 50f5 	strb.w	r5, [r4, #245]	; 0xf5
		conn->empty = 0;
   14bd6:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		conn->pkt_tx_head = NULL;
   14bda:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = NULL;
   14bde:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
		conn->pkt_tx_ctrl_last = NULL;
   14be2:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
		conn->pkt_tx_data = NULL;
   14be6:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
		conn->pkt_tx_last = NULL;
   14bea:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
		conn->packet_tx_head_len = 0;
   14bee:	f884 5150 	strb.w	r5, [r4, #336]	; 0x150
		conn->packet_tx_head_offset = 0;
   14bf2:	f884 5151 	strb.w	r5, [r4, #337]	; 0x151
		_radio.advertiser.conn = conn;
   14bf6:	f8c6 4c18 	str.w	r4, [r6, #3096]	; 0xc18
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
   14bfa:	4d57      	ldr	r5, [pc, #348]	; (14d58 <radio_ext_adv_enable+0x318>)
	_radio.advertiser.chan_map = chan_map;							//chan_map
   14bfc:	a812      	add	r0, sp, #72	; 0x48
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
   14bfe:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.chan_map = chan_map;							//chan_map
   14c02:	f810 2d09 	ldrb.w	r2, [r0, #-9]!
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
   14c06:	f36b 0343 	bfi	r3, fp, #1, #3
	_radio.advertiser.chan_map = chan_map;							//chan_map
   14c0a:	f362 1306 	bfi	r3, r2, #4, #3
   14c0e:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
	_radio.ext_advertiser.aux_chain_count = aux_chain_count;		
   14c12:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
	_radio.advertiser.filter_policy = filter_policy;				//filter plicy
   14c16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	_radio.ext_advertiser.aux_chain_count = aux_chain_count;		
   14c18:	f885 3c8c 	strb.w	r3, [r5, #3212]	; 0xc8c
	_radio.advertiser.filter_policy = filter_policy;				//filter plicy
   14c1c:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
   14c20:	f362 0301 	bfi	r3, r2, #0, #2
   14c24:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
	_radio.advertiser.rl_idx = rl_idx;								//rl_idx
   14c28:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   14c2c:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
	_radio.advertiser.hdr.ticks_active_to_start =
   14c30:	f8d5 3d6c 	ldr.w	r3, [r5, #3436]	; 0xd6c
   14c34:	61eb      	str	r3, [r5, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
   14c36:	2327      	movs	r3, #39	; 0x27
   14c38:	61ab      	str	r3, [r5, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   14c3a:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
   14c3c:	2300      	movs	r3, #0
   14c3e:	622b      	str	r3, [r5, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   14c40:	f7f6 f89e 	bl	ad80 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   14c44:	5df7      	ldrb	r7, [r6, r7]
   14c46:	f007 070f 	and.w	r7, r7, #15
   14c4a:	2f01      	cmp	r7, #1
   14c4c:	462e      	mov	r6, r5
   14c4e:	d169      	bne.n	14d24 <radio_ext_adv_enable+0x2e4>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
   14c50:	f44f 7327 	mov.w	r3, #668	; 0x29c
   14c54:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
   14c56:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
   14c5a:	4d41      	ldr	r5, [pc, #260]	; (14d60 <radio_ext_adv_enable+0x320>)
   14c5c:	a33c      	add	r3, pc, #240	; (adr r3, 14d50 <radio_ext_adv_enable+0x310>)
   14c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   14c62:	fba0 0105 	umull	r0, r1, r0, r5
   14c66:	f7eb faff 	bl	268 <__aeabi_uldivmod>
	ticks_slot_offset =
   14c6a:	69f3      	ldr	r3, [r6, #28]
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
   14c6c:	6270      	str	r0, [r6, #36]	; 0x24
	ticks_slot_offset =
   14c6e:	69b0      	ldr	r0, [r6, #24]
   14c70:	4283      	cmp	r3, r0
   14c72:	bf38      	it	cc
   14c74:	4603      	movcc	r3, r0
   14c76:	930b      	str	r3, [sp, #44]	; 0x2c
   14c78:	46a9      	mov	r9, r5
	_radio.advertiser.is_hdcd = !interval &&
   14c7a:	f1ba 0f00 	cmp.w	sl, #0
   14c7e:	d15e      	bne.n	14d3e <radio_ext_adv_enable+0x2fe>
   14c80:	1e7b      	subs	r3, r7, #1
   14c82:	425f      	negs	r7, r3
   14c84:	415f      	adcs	r7, r3
   14c86:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
   14c8a:	f367 1586 	bfi	r5, r7, #6, #1
   14c8e:	f886 5028 	strb.w	r5, [r6, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
   14c92:	f015 0540 	ands.w	r5, r5, #64	; 0x40
   14c96:	d06f      	beq.n	14d78 <radio_ext_adv_enable+0x338>
		u32_t ticks_now = ticker_ticks_now_get();
   14c98:	f7f6 feaa 	bl	b9f0 <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14c9c:	6a73      	ldr	r3, [r6, #36]	; 0x24
   14c9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14ca0:	4e30      	ldr	r6, [pc, #192]	; (14d64 <radio_ext_adv_enable+0x324>)
   14ca2:	9607      	str	r6, [sp, #28]
   14ca4:	441a      	add	r2, r3
   14ca6:	4613      	mov	r3, r2
		u32_t ticks_now = ticker_ticks_now_get();
   14ca8:	4607      	mov	r7, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14caa:	4a2f      	ldr	r2, [pc, #188]	; (14d68 <radio_ext_adv_enable+0x328>)
   14cac:	9205      	str	r2, [sp, #20]
   14cae:	2000      	movs	r0, #0
   14cb0:	ad11      	add	r5, sp, #68	; 0x44
   14cb2:	9304      	str	r3, [sp, #16]
   14cb4:	e88d 0009 	stmia.w	sp, {r0, r3}
   14cb8:	9508      	str	r5, [sp, #32]
   14cba:	9006      	str	r0, [sp, #24]
   14cbc:	9003      	str	r0, [sp, #12]
   14cbe:	9002      	str	r0, [sp, #8]
   14cc0:	463b      	mov	r3, r7
   14cc2:	2205      	movs	r2, #5
   14cc4:	2103      	movs	r1, #3
   14cc6:	f7f6 fd25 	bl	b714 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   14cca:	2802      	cmp	r0, #2
   14ccc:	d03b      	beq.n	14d46 <radio_ext_adv_enable+0x306>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   14cce:	9811      	ldr	r0, [sp, #68]	; 0x44
   14cd0:	b9c8      	cbnz	r0, 14d06 <radio_ext_adv_enable+0x2c6>
		ret_cb = TICKER_STATUS_BUSY;
   14cd2:	2302      	movs	r3, #2
   14cd4:	9311      	str	r3, [sp, #68]	; 0x44
		ret =
   14cd6:	4b25      	ldr	r3, [pc, #148]	; (14d6c <radio_ext_adv_enable+0x32c>)
   14cd8:	9305      	str	r3, [sp, #20]
   14cda:	2203      	movs	r2, #3
   14cdc:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
   14ce0:	9300      	str	r3, [sp, #0]
   14ce2:	9508      	str	r5, [sp, #32]
   14ce4:	9607      	str	r6, [sp, #28]
   14ce6:	9006      	str	r0, [sp, #24]
   14ce8:	9004      	str	r0, [sp, #16]
   14cea:	9003      	str	r0, [sp, #12]
   14cec:	9002      	str	r0, [sp, #8]
   14cee:	9001      	str	r0, [sp, #4]
   14cf0:	463b      	mov	r3, r7
   14cf2:	4611      	mov	r1, r2
		ret=	
   14cf4:	f7f6 fd0e 	bl	b714 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   14cf8:	2802      	cmp	r0, #2
   14cfa:	f000 811a 	beq.w	14f32 <radio_ext_adv_enable+0x4f2>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   14cfe:	9811      	ldr	r0, [sp, #68]	; 0x44
   14d00:	2800      	cmp	r0, #0
   14d02:	f000 811a 	beq.w	14f3a <radio_ext_adv_enable+0x4fa>
	if (conn) {
   14d06:	2c00      	cmp	r4, #0
   14d08:	f43f aeb0 	beq.w	14a6c <radio_ext_adv_enable+0x2c>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
   14d0c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   14d10:	4917      	ldr	r1, [pc, #92]	; (14d70 <radio_ext_adv_enable+0x330>)
   14d12:	f7f5 fea4 	bl	aa5e <mem_release>
		mem_release(conn, &_radio.conn_free);
   14d16:	4917      	ldr	r1, [pc, #92]	; (14d74 <radio_ext_adv_enable+0x334>)
   14d18:	4620      	mov	r0, r4
   14d1a:	f7f5 fea0 	bl	aa5e <mem_release>
   14d1e:	e6a5      	b.n	14a6c <radio_ext_adv_enable+0x2c>
		conn = NULL;
   14d20:	2400      	movs	r4, #0
   14d22:	e76a      	b.n	14bfa <radio_ext_adv_enable+0x1ba>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
   14d24:	2f02      	cmp	r7, #2
   14d26:	d103      	bne.n	14d30 <radio_ext_adv_enable+0x2f0>
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
   14d28:	f44f 7329 	mov.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
   14d2c:	4358      	muls	r0, r3
   14d2e:	e794      	b.n	14c5a <radio_ext_adv_enable+0x21a>
	else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   14d30:	2f07      	cmp	r7, #7
		slot_us = ((RADIO_TICKER_START_PART_US + 2500) * chan_cnt) ;  // 265byte =2120us
   14d32:	bf0c      	ite	eq
   14d34:	f44f 632f 	moveq.w	r3, #2800	; 0xaf0
			   152 + 376) * chan_cnt;
   14d38:	f240 53fc 	movwne	r3, #1532	; 0x5fc
   14d3c:	e7f6      	b.n	14d2c <radio_ext_adv_enable+0x2ec>
   14d3e:	2700      	movs	r7, #0
   14d40:	e7a1      	b.n	14c86 <radio_ext_adv_enable+0x246>
				cpu_sleep();
   14d42:	f7f8 fb65 	bl	d410 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
   14d46:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14d48:	2b02      	cmp	r3, #2
   14d4a:	d0fa      	beq.n	14d42 <radio_ext_adv_enable+0x302>
   14d4c:	e7bf      	b.n	14cce <radio_ext_adv_enable+0x28e>
   14d4e:	bf00      	nop
   14d50:	1afd498d 	.word	0x1afd498d
   14d54:	00000007 	.word	0x00000007
   14d58:	20000bb0 	.word	0x20000bb0
   14d5c:	20001971 	.word	0x20001971
   14d60:	3b9aca00 	.word	0x3b9aca00
   14d64:	0000d455 	.word	0x0000d455
   14d68:	0000f105 	.word	0x0000f105
   14d6c:	0000f1f9 	.word	0x0000f1f9
   14d70:	200018e0 	.word	0x200018e0
   14d74:	200018a4 	.word	0x200018a4
		u32_t ticks_now = ticker_ticks_now_get();
   14d78:	f7f6 fe3a 	bl	b9f0 <ticker_ticks_now_get>
		if(((u64_t)interval * 625) <= 100000){
   14d7c:	fa1f f28a 	uxth.w	r2, sl
   14d80:	2300      	movs	r3, #0
		u32_t ticks_now = ticker_ticks_now_get();
   14d82:	900e      	str	r0, [sp, #56]	; 0x38
		if(((u64_t)interval * 625) <= 100000){
   14d84:	f240 2071 	movw	r0, #625	; 0x271
   14d88:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   14d8c:	fbaa 0100 	umull	r0, r1, sl, r0
   14d90:	4a75      	ldr	r2, [pc, #468]	; (14f68 <radio_ext_adv_enable+0x528>)
		_radio.ext_advertiser.max_skip = skip;
   14d92:	f886 8c68 	strb.w	r8, [r6, #3176]	; 0xc68
		if(((u64_t)interval * 625) <= 100000){
   14d96:	2300      	movs	r3, #0
   14d98:	428b      	cmp	r3, r1
   14d9a:	bf08      	it	eq
   14d9c:	4282      	cmpeq	r2, r0
   14d9e:	d30b      	bcc.n	14db8 <radio_ext_adv_enable+0x378>
		int calculation = max_skip / 5;
   14da0:	2305      	movs	r3, #5
   14da2:	fbb8 f3f3 	udiv	r3, r8, r3
			if(calculation >= 5){
   14da6:	2b04      	cmp	r3, #4
   14da8:	f240 80a5 	bls.w	14ef6 <radio_ext_adv_enable+0x4b6>
				ticker_offset = 30 * (max_skip-5);
   14dac:	f1a8 0505 	sub.w	r5, r8, #5
				ticker_offset = 30 * (max_skip-1);
   14db0:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
				ticker_offset = 30 * max_skip;
   14db4:	006d      	lsls	r5, r5, #1
   14db6:	b2ad      	uxth	r5, r5
		_radio.ext_advertiser.aux_pckt_time = ((((u64_t)interval * 625 ) ) * skip) + 30000; //(10005 * offset) ;
   14db8:	f240 2371 	movw	r3, #625	; 0x271
   14dbc:	fb03 f708 	mul.w	r7, r3, r8
   14dc0:	f247 5230 	movw	r2, #30000	; 0x7530
   14dc4:	fb0a 2707 	mla	r7, sl, r7, r2
		_radio.ext_advertiser.prim_interval = (u64_t)interval * 625;
   14dc8:	fb03 f30a 	mul.w	r3, r3, sl
		_radio.ext_advertiser.aux_pckt_time = ((((u64_t)interval * 625 ) ) * skip) + 30000; //(10005 * offset) ;
   14dcc:	f8c6 7c5c 	str.w	r7, [r6, #3164]	; 0xc5c
		_radio.ext_advertiser.prim_interval = (u64_t)interval * 625;
   14dd0:	f8c6 3c60 	str.w	r3, [r6, #3168]	; 0xc60
		_radio.ext_advertiser.ticker_offset = 183 * (((u64_t)interval * 625 )/100000);
   14dd4:	4a64      	ldr	r2, [pc, #400]	; (14f68 <radio_ext_adv_enable+0x528>)
   14dd6:	2300      	movs	r3, #0
   14dd8:	f7eb fa46 	bl	268 <__aeabi_uldivmod>
   14ddc:	23b7      	movs	r3, #183	; 0xb7
   14dde:	4358      	muls	r0, r3
		pdu = (void *)_radio.advertiser.adv_data.data
   14de0:	f896 322e 	ldrb.w	r3, [r6, #558]	; 0x22e
		_radio.ext_advertiser.ticker_offset = 183 * (((u64_t)interval * 625 )/100000);
   14de4:	f8c6 0c84 	str.w	r0, [r6, #3204]	; 0xc84
		size = pdu->len + 2;
   14de8:	eb03 2303 	add.w	r3, r3, r3, lsl #8
   14dec:	4433      	add	r3, r6
		_radio.ext_advertiser.chan_37 = (_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) );
   14dee:	fb00 7708 	mla	r7, r0, r8, r7
		size = pdu->len + 2;
   14df2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
		_radio.ext_advertiser.chan_37 = (_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) );
   14df6:	f8c6 7c70 	str.w	r7, [r6, #3184]	; 0xc70
		final_pckt_size = (size + 1 + 4 + 3)*8 ; 
   14dfa:	00db      	lsls	r3, r3, #3
   14dfc:	3350      	adds	r3, #80	; 0x50
		_radio.ext_advertiser.chan_38 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) ) -((final_pckt_size + 50)));
   14dfe:	f1a7 0232 	sub.w	r2, r7, #50	; 0x32
   14e02:	1ad2      	subs	r2, r2, r3
		_radio.ext_advertiser.chan_39 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip )) -(((final_pckt_size + 50)* 2))) ;
   14e04:	3332      	adds	r3, #50	; 0x32
   14e06:	eba7 0743 	sub.w	r7, r7, r3, lsl #1
		ret =
   14e0a:	4b58      	ldr	r3, [pc, #352]	; (14f6c <radio_ext_adv_enable+0x52c>)
		_radio.ext_advertiser.chan_38 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) ) -((final_pckt_size + 50)));
   14e0c:	f8c6 2c74 	str.w	r2, [r6, #3188]	; 0xc74
		_radio.ext_advertiser.chan_39 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip )) -(((final_pckt_size + 50)* 2))) ;
   14e10:	f8c6 7c78 	str.w	r7, [r6, #3192]	; 0xc78
		ret =
   14e14:	f04f 0b00 	mov.w	fp, #0
   14e18:	9307      	str	r3, [sp, #28]
   14e1a:	af11      	add	r7, sp, #68	; 0x44
   14e1c:	4b54      	ldr	r3, [pc, #336]	; (14f70 <radio_ext_adv_enable+0x530>)
   14e1e:	9708      	str	r7, [sp, #32]
   14e20:	f8cd b018 	str.w	fp, [sp, #24]
   14e24:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14e26:	6a73      	ldr	r3, [r6, #36]	; 0x24
   14e28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
   14e2a:	4852      	ldr	r0, [pc, #328]	; (14f74 <radio_ext_adv_enable+0x534>)
		ret =
   14e2c:	f8cd b00c 	str.w	fp, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14e30:	4413      	add	r3, r2
		ret =
   14e32:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
   14e34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14e36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		ret =
   14e38:	f8cd b008 	str.w	fp, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
   14e3c:	fba3 0100 	umull	r0, r1, r3, r0
   14e40:	2391      	movs	r3, #145	; 0x91
   14e42:	fb03 1102 	mla	r1, r3, r2, r1
   14e46:	a346      	add	r3, pc, #280	; (adr r3, 14f60 <radio_ext_adv_enable+0x520>)
   14e48:	e9d3 2300 	ldrd	r2, r3, [r3]
   14e4c:	f7eb fa0c 	bl	268 <__aeabi_uldivmod>
		ret =
   14e50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
   14e52:	9001      	str	r0, [sp, #4]
		ret =
   14e54:	f8cd b000 	str.w	fp, [sp]
   14e58:	2205      	movs	r2, #5
   14e5a:	2103      	movs	r1, #3
   14e5c:	4658      	mov	r0, fp
   14e5e:	f7f6 fc59 	bl	b714 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   14e62:	2802      	cmp	r0, #2
   14e64:	4b41      	ldr	r3, [pc, #260]	; (14f6c <radio_ext_adv_enable+0x52c>)
   14e66:	d05e      	beq.n	14f26 <radio_ext_adv_enable+0x4e6>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   14e68:	9e11      	ldr	r6, [sp, #68]	; 0x44
   14e6a:	2e00      	cmp	r6, #0
   14e6c:	f47f af4b 	bne.w	14d06 <radio_ext_adv_enable+0x2c6>
		ret=	
   14e70:	9307      	str	r3, [sp, #28]
   14e72:	4b41      	ldr	r3, [pc, #260]	; (14f78 <radio_ext_adv_enable+0x538>)
   14e74:	9305      	str	r3, [sp, #20]
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
   14e76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		ret=	
   14e78:	9708      	str	r7, [sp, #32]
		ret_cb = TICKER_STATUS_BUSY;
   14e7a:	2202      	movs	r2, #2
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
   14e7c:	f503 70bc 	add.w	r0, r3, #376	; 0x178
		ret_cb = TICKER_STATUS_BUSY;
   14e80:	9211      	str	r2, [sp, #68]	; 0x44
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
   14e82:	fba0 0109 	umull	r0, r1, r0, r9
   14e86:	a336      	add	r3, pc, #216	; (adr r3, 14f60 <radio_ext_adv_enable+0x520>)
   14e88:	e9d3 2300 	ldrd	r2, r3, [r3]
		u8_t offset = skip + 1;
   14e8c:	f108 0801 	add.w	r8, r8, #1
		ret=	
   14e90:	9606      	str	r6, [sp, #24]
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
   14e92:	fa5f f888 	uxtb.w	r8, r8
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
   14e96:	f7eb f9e7 	bl	268 <__aeabi_uldivmod>
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
   14e9a:	fba8 ab0a 	umull	sl, fp, r8, sl
   14e9e:	f240 2171 	movw	r1, #625	; 0x271
   14ea2:	fbaa 2301 	umull	r2, r3, sl, r1
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
   14ea6:	1b52      	subs	r2, r2, r5
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14ea8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
   14eac:	fb01 330b 	mla	r3, r1, fp, r3
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
   14eb0:	f163 0300 	sbc.w	r3, r3, #0
		ret=	
   14eb4:	9004      	str	r0, [sp, #16]
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
   14eb6:	fba2 0109 	umull	r0, r1, r2, r9
   14eba:	fb09 1103 	mla	r1, r9, r3, r1
   14ebe:	a328      	add	r3, pc, #160	; (adr r3, 14f60 <radio_ext_adv_enable+0x520>)
   14ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret=	
   14ec4:	9603      	str	r6, [sp, #12]
   14ec6:	9602      	str	r6, [sp, #8]
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
   14ec8:	f7eb f9ce 	bl	268 <__aeabi_uldivmod>
					HAL_TICKER_US_TO_TICKS(	_radio.ext_advertiser.aux_pckt_time  ),			//ticks periodic
   14ecc:	4b2b      	ldr	r3, [pc, #172]	; (14f7c <radio_ext_adv_enable+0x53c>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14ece:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ret=	
   14ed2:	9001      	str	r0, [sp, #4]
					HAL_TICKER_US_TO_TICKS(	_radio.ext_advertiser.aux_pckt_time  ),			//ticks periodic
   14ed4:	f8d3 0c5c 	ldr.w	r0, [r3, #3164]	; 0xc5c
   14ed8:	a321      	add	r3, pc, #132	; (adr r3, 14f60 <radio_ext_adv_enable+0x520>)
   14eda:	e9d3 2300 	ldrd	r2, r3, [r3]
   14ede:	fba0 0109 	umull	r0, r1, r0, r9
   14ee2:	f7eb f9c1 	bl	268 <__aeabi_uldivmod>
		ret=	
   14ee6:	2203      	movs	r2, #3
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14ee8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ret=	
   14eec:	9000      	str	r0, [sp, #0]
   14eee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14ef0:	4611      	mov	r1, r2
   14ef2:	4630      	mov	r0, r6
   14ef4:	e6fe      	b.n	14cf4 <radio_ext_adv_enable+0x2b4>
			}else if(calculation >= 4){
   14ef6:	d102      	bne.n	14efe <radio_ext_adv_enable+0x4be>
				ticker_offset = 30 * (max_skip-4);
   14ef8:	f1a8 0504 	sub.w	r5, r8, #4
   14efc:	e758      	b.n	14db0 <radio_ext_adv_enable+0x370>
			}else if(calculation >=3){
   14efe:	2b03      	cmp	r3, #3
   14f00:	d102      	bne.n	14f08 <radio_ext_adv_enable+0x4c8>
				ticker_offset = 30 * (max_skip-3);
   14f02:	f1a8 0503 	sub.w	r5, r8, #3
   14f06:	e753      	b.n	14db0 <radio_ext_adv_enable+0x370>
			}else if(calculation >= 2){
   14f08:	2b02      	cmp	r3, #2
   14f0a:	d102      	bne.n	14f12 <radio_ext_adv_enable+0x4d2>
				ticker_offset = 30 * (max_skip-2);
   14f0c:	f1a8 0502 	sub.w	r5, r8, #2
   14f10:	e74e      	b.n	14db0 <radio_ext_adv_enable+0x370>
			}else if(calculation >= 1){
   14f12:	2b01      	cmp	r3, #1
   14f14:	d102      	bne.n	14f1c <radio_ext_adv_enable+0x4dc>
				ticker_offset = 30 * (max_skip-1);
   14f16:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
   14f1a:	e749      	b.n	14db0 <radio_ext_adv_enable+0x370>
				ticker_offset = 30 * max_skip;
   14f1c:	ebc8 1508 	rsb	r5, r8, r8, lsl #4
   14f20:	e748      	b.n	14db4 <radio_ext_adv_enable+0x374>
				cpu_sleep();
   14f22:	f7f8 fa75 	bl	d410 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
   14f26:	9a11      	ldr	r2, [sp, #68]	; 0x44
   14f28:	2a02      	cmp	r2, #2
   14f2a:	d0fa      	beq.n	14f22 <radio_ext_adv_enable+0x4e2>
   14f2c:	e79c      	b.n	14e68 <radio_ext_adv_enable+0x428>
			cpu_sleep();
   14f2e:	f7f8 fa6f 	bl	d410 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   14f32:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14f34:	2b02      	cmp	r3, #2
   14f36:	d0fa      	beq.n	14f2e <radio_ext_adv_enable+0x4ee>
   14f38:	e6e1      	b.n	14cfe <radio_ext_adv_enable+0x2be>
		_radio.advertiser.is_enabled = 1;
   14f3a:	4b10      	ldr	r3, [pc, #64]	; (14f7c <radio_ext_adv_enable+0x53c>)
   14f3c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   14f40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   14f44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
   14f48:	f893 3c2c 	ldrb.w	r3, [r3, #3116]	; 0xc2c
   14f4c:	f013 0401 	ands.w	r4, r3, #1
   14f50:	d103      	bne.n	14f5a <radio_ext_adv_enable+0x51a>
			ll_adv_scan_state_cb(BIT(0));
   14f52:	2001      	movs	r0, #1
   14f54:	f001 fcbe 	bl	168d4 <ll_adv_scan_state_cb>
		return 0;
   14f58:	4620      	mov	r0, r4
}
   14f5a:	b013      	add	sp, #76	; 0x4c
   14f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f60:	1afd498d 	.word	0x1afd498d
   14f64:	00000007 	.word	0x00000007
   14f68:	000186a0 	.word	0x000186a0
   14f6c:	0000d455 	.word	0x0000d455
   14f70:	0000f105 	.word	0x0000f105
   14f74:	84e72a00 	.word	0x84e72a00
   14f78:	0000f1c1 	.word	0x0000f1c1
   14f7c:	20000bb0 	.word	0x20000bb0

00014f80 <radio_adv_disable>:
{
   14f80:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
   14f82:	2103      	movs	r1, #3
   14f84:	2005      	movs	r0, #5
   14f86:	f7f8 fc3f 	bl	d808 <role_disable>
	if (!status) {
   14f8a:	4605      	mov	r5, r0
   14f8c:	b9e8      	cbnz	r0, 14fca <radio_adv_disable+0x4a>
		_radio.advertiser.is_enabled = 0;
   14f8e:	4c10      	ldr	r4, [pc, #64]	; (14fd0 <radio_adv_disable+0x50>)
   14f90:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   14f94:	f360 12c7 	bfi	r2, r0, #7, #1
   14f98:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
   14f9c:	f894 2c2c 	ldrb.w	r2, [r4, #3116]	; 0xc2c
   14fa0:	07d3      	lsls	r3, r2, #31
   14fa2:	d401      	bmi.n	14fa8 <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
   14fa4:	f001 fc96 	bl	168d4 <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
   14fa8:	f8d4 6c18 	ldr.w	r6, [r4, #3096]	; 0xc18
		if (conn) {
   14fac:	b15e      	cbz	r6, 14fc6 <radio_adv_disable+0x46>
			_radio.advertiser.conn = NULL;
   14fae:	2300      	movs	r3, #0
   14fb0:	f8c4 3c18 	str.w	r3, [r4, #3096]	; 0xc18
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   14fb4:	4907      	ldr	r1, [pc, #28]	; (14fd4 <radio_adv_disable+0x54>)
   14fb6:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   14fba:	f7f5 fd50 	bl	aa5e <mem_release>
			mem_release(conn, &_radio.conn_free);
   14fbe:	4906      	ldr	r1, [pc, #24]	; (14fd8 <radio_adv_disable+0x58>)
   14fc0:	4630      	mov	r0, r6
   14fc2:	f7f5 fd4c 	bl	aa5e <mem_release>
}
   14fc6:	4628      	mov	r0, r5
   14fc8:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   14fca:	250c      	movs	r5, #12
   14fcc:	e7fb      	b.n	14fc6 <radio_adv_disable+0x46>
   14fce:	bf00      	nop
   14fd0:	20000bb0 	.word	0x20000bb0
   14fd4:	200018e0 	.word	0x200018e0
   14fd8:	200018a4 	.word	0x200018a4
   14fdc:	00000000 	.word	0x00000000

00014fe0 <radio_scan_enable>:
{
   14fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
   14fe4:	4c76      	ldr	r4, [pc, #472]	; (151c0 <radio_scan_enable+0x1e0>)
   14fe6:	f894 7c2c 	ldrb.w	r7, [r4, #3116]	; 0xc2c
{
   14fea:	b08e      	sub	sp, #56	; 0x38
   14fec:	461d      	mov	r5, r3
	if (_radio.scanner.is_enabled) {
   14fee:	f017 0701 	ands.w	r7, r7, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   14ff2:	f04f 0302 	mov.w	r3, #2
{
   14ff6:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   14ff8:	930b      	str	r3, [sp, #44]	; 0x2c
{
   14ffa:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
   14ffc:	d003      	beq.n	15006 <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
   14ffe:	200c      	movs	r0, #12
}
   15000:	b00e      	add	sp, #56	; 0x38
   15002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
   15006:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
	_radio.scanner.rpa_gen = rpa_gen;
   1500a:	f894 2c2e 	ldrb.w	r2, [r4, #3118]	; 0xc2e
	_radio.scanner.type = type;
   1500e:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;				//1
   15012:	0840      	lsrs	r0, r0, #1
   15014:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   15018:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   1501c:	f360 0200 	bfi	r2, r0, #0, #1
   15020:	f884 2c2e 	strb.w	r2, [r4, #3118]	; 0xc2e
	_radio.scanner.rl_idx = rl_idx;
   15024:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   15028:	f884 2c2f 	strb.w	r2, [r4, #3119]	; 0xc2f
	_radio.scanner.init_addr_type = init_addr_type;
   1502c:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   15030:	2206      	movs	r2, #6
   15032:	f504 6043 	add.w	r0, r4, #3120	; 0xc30
	_radio.scanner.init_addr_type = init_addr_type;
   15036:	f884 3c2d 	strb.w	r3, [r4, #3117]	; 0xc2d
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   1503a:	4e62      	ldr	r6, [pc, #392]	; (151c4 <radio_scan_enable+0x1e4>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   1503c:	f7eb fc55 	bl	8ea <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   15040:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   15044:	f04f 0891 	mov.w	r8, #145	; 0x91
   15048:	fba2 0106 	umull	r0, r1, r2, r6
   1504c:	fb08 1102 	mla	r1, r8, r2, r1
   15050:	a359      	add	r3, pc, #356	; (adr r3, 151b8 <radio_scan_enable+0x1d8>)
   15052:	e9d3 2300 	ldrd	r2, r3, [r3]
   15056:	f7eb f907 	bl	268 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
   1505a:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
   1505e:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
	_radio.scanner.hdr.ticks_preempt_to_start =
   15062:	f8c4 7c24 	str.w	r7, [r4, #3108]	; 0xc24
	_radio.scanner.filter_policy = filter_policy;
   15066:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   1506a:	b2aa      	uxth	r2, r5
   1506c:	fba2 6706 	umull	r6, r7, r2, r6
		_radio.ticks_active_to_start;
   15070:	f8d4 ad6c 	ldr.w	sl, [r4, #3436]	; 0xd6c
	_radio.scanner.filter_policy = filter_policy;
   15074:	f884 3c2d 	strb.w	r3, [r4, #3117]	; 0xc2d
		_radio.scanner.ticks_window +
   15078:	f100 0909 	add.w	r9, r0, #9
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   1507c:	fb08 7702 	mla	r7, r8, r2, r7
	_radio.scanner.hdr.ticks_xtal_to_start =
   15080:	2327      	movs	r3, #39	; 0x27
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   15082:	f8c4 0c3c 	str.w	r0, [r4, #3132]	; 0xc3c
	_radio.scanner.hdr.ticks_active_to_start =
   15086:	f8c4 ac20 	str.w	sl, [r4, #3104]	; 0xc20
	_radio.scanner.hdr.ticks_xtal_to_start =
   1508a:	f8c4 3c1c 	str.w	r3, [r4, #3100]	; 0xc1c
	_radio.scanner.hdr.ticks_slot =
   1508e:	f8c4 9c28 	str.w	r9, [r4, #3112]	; 0xc28
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   15092:	a349      	add	r3, pc, #292	; (adr r3, 151b8 <radio_scan_enable+0x1d8>)
   15094:	e9d3 2300 	ldrd	r2, r3, [r3]
   15098:	4630      	mov	r0, r6
   1509a:	4639      	mov	r1, r7
   1509c:	f7eb f8e4 	bl	268 <__aeabi_uldivmod>
	    (ticks_interval -
   150a0:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	if (_radio.scanner.hdr.ticks_slot >
   150a4:	4599      	cmp	r9, r3
	_radio.scanner.interval = interval;
   150a6:	f8c4 5c40 	str.w	r5, [r4, #3136]	; 0xc40
	ticks_slot_offset =
   150aa:	4655      	mov	r5, sl
		_radio.scanner.hdr.ticks_slot =
   150ac:	bf88      	it	hi
   150ae:	f8c4 3c28 	strhi.w	r3, [r4, #3112]	; 0xc28
	ticks_slot_offset =
   150b2:	2d27      	cmp	r5, #39	; 0x27
   150b4:	bf38      	it	cc
   150b6:	2527      	movcc	r5, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   150b8:	4680      	mov	r8, r0
	_radio.scanner.slot_offset = ticks_slot_offset ;
   150ba:	f8c4 5c44 	str.w	r5, [r4, #3140]	; 0xc44
	ticks_anchor = ticker_ticks_now_get();
   150be:	f7f6 fc97 	bl	b9f0 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
   150c2:	f8d4 3c54 	ldr.w	r3, [r4, #3156]	; 0xc54
	ticks_anchor = ticker_ticks_now_get();
   150c6:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
   150c8:	2b00      	cmp	r3, #0
   150ca:	d05e      	beq.n	1518a <radio_scan_enable+0x1aa>
		us_offset = 0;
   150cc:	2300      	movs	r3, #0
   150ce:	930c      	str	r3, [sp, #48]	; 0x30
   150d0:	483d      	ldr	r0, [pc, #244]	; (151c8 <radio_scan_enable+0x1e8>)
   150d2:	f3bf 8f5b 	dmb	ish
   150d6:	e850 3f00 	ldrex	r3, [r0]
   150da:	f023 0301 	bic.w	r3, r3, #1
   150de:	e840 3200 	strex	r2, r3, [r0]
   150e2:	2a00      	cmp	r2, #0
   150e4:	d1f7      	bne.n	150d6 <radio_scan_enable+0xf6>
   150e6:	f3bf 8f5b 	dmb	ish
	work->handler = handler;
   150ea:	4938      	ldr	r1, [pc, #224]	; (151cc <radio_scan_enable+0x1ec>)
   150ec:	f840 1c04 	str.w	r1, [r0, #-4]
	k_delayed_work_init(&aux_scanning.work_d, aux_packet_function);
   150f0:	3004      	adds	r0, #4
   150f2:	f00a fed7 	bl	1fea4 <k_delayed_work_init>
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   150f6:	980c      	ldr	r0, [sp, #48]	; 0x30
   150f8:	4935      	ldr	r1, [pc, #212]	; (151d0 <radio_scan_enable+0x1f0>)
   150fa:	a32f      	add	r3, pc, #188	; (adr r3, 151b8 <radio_scan_enable+0x1d8>)
   150fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   15100:	fba0 0101 	umull	r0, r1, r0, r1
   15104:	f7eb f8b0 	bl	268 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   15108:	ab0b      	add	r3, sp, #44	; 0x2c
   1510a:	9308      	str	r3, [sp, #32]
   1510c:	4b31      	ldr	r3, [pc, #196]	; (151d4 <radio_scan_enable+0x1f4>)
   1510e:	9307      	str	r3, [sp, #28]
   15110:	4b31      	ldr	r3, [pc, #196]	; (151d8 <radio_scan_enable+0x1f8>)
   15112:	9305      	str	r3, [sp, #20]
   15114:	f8d4 3c28 	ldr.w	r3, [r4, #3112]	; 0xc28
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   15118:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1511c:	f04f 0900 	mov.w	r9, #0
   15120:	4482      	add	sl, r0
   15122:	441d      	add	r5, r3
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   15124:	4630      	mov	r0, r6
   15126:	a324      	add	r3, pc, #144	; (adr r3, 151b8 <radio_scan_enable+0x1d8>)
   15128:	e9d3 2300 	ldrd	r2, r3, [r3]
   1512c:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1512e:	f8cd 9018 	str.w	r9, [sp, #24]
   15132:	9504      	str	r5, [sp, #16]
   15134:	f8cd 900c 	str.w	r9, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   15138:	f7eb f896 	bl	268 <__aeabi_uldivmod>
   1513c:	4610      	mov	r0, r2
   1513e:	4619      	mov	r1, r3
   15140:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15144:	2300      	movs	r3, #0
   15146:	f7eb f88f 	bl	268 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1514a:	f8cd 8004 	str.w	r8, [sp, #4]
   1514e:	9002      	str	r0, [sp, #8]
   15150:	f8cd 9000 	str.w	r9, [sp]
   15154:	4653      	mov	r3, sl
   15156:	2206      	movs	r2, #6
   15158:	2103      	movs	r1, #3
   1515a:	4648      	mov	r0, r9
   1515c:	f7f6 fada 	bl	b714 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   15160:	2802      	cmp	r0, #2
   15162:	d023      	beq.n	151ac <radio_scan_enable+0x1cc>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   15164:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   15166:	2d00      	cmp	r5, #0
   15168:	f47f af49 	bne.w	14ffe <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
   1516c:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
   15170:	f043 0301 	orr.w	r3, r3, #1
   15174:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
	if (!_radio.advertiser.is_enabled) {
   15178:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   1517c:	2b00      	cmp	r3, #0
   1517e:	db02      	blt.n	15186 <radio_scan_enable+0x1a6>
		ll_adv_scan_state_cb(BIT(1));
   15180:	2002      	movs	r0, #2
   15182:	f001 fba7 	bl	168d4 <ll_adv_scan_state_cb>
	return 0;
   15186:	4628      	mov	r0, r5
   15188:	e73a      	b.n	15000 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   1518a:	f8d4 1c28 	ldr.w	r1, [r4, #3112]	; 0xc28
		u32_t ticks_ref = 0;
   1518e:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   15190:	aa0d      	add	r2, sp, #52	; 0x34
   15192:	ab0c      	add	r3, sp, #48	; 0x30
   15194:	4429      	add	r1, r5
   15196:	2003      	movs	r0, #3
   15198:	f7f9 f972 	bl	e480 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   1519c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1519e:	2b00      	cmp	r3, #0
   151a0:	d096      	beq.n	150d0 <radio_scan_enable+0xf0>
			ticks_anchor = ticks_ref;
   151a2:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   151a6:	e793      	b.n	150d0 <radio_scan_enable+0xf0>
			cpu_sleep();
   151a8:	f7f8 f932 	bl	d410 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   151ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   151ae:	2b02      	cmp	r3, #2
   151b0:	d0fa      	beq.n	151a8 <radio_scan_enable+0x1c8>
   151b2:	e7d7      	b.n	15164 <radio_scan_enable+0x184>
   151b4:	f3af 8000 	nop.w
   151b8:	1afd498d 	.word	0x1afd498d
   151bc:	00000007 	.word	0x00000007
   151c0:	20000bb0 	.word	0x20000bb0
   151c4:	84e72a00 	.word	0x84e72a00
   151c8:	200048a0 	.word	0x200048a0
   151cc:	0000e869 	.word	0x0000e869
   151d0:	3b9aca00 	.word	0x3b9aca00
   151d4:	0000d455 	.word	0x0000d455
   151d8:	0000f13d 	.word	0x0000f13d

000151dc <radio_scan_disable>:
{
   151dc:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   151de:	2104      	movs	r1, #4
   151e0:	2006      	movs	r0, #6
   151e2:	f7f8 fb11 	bl	d808 <role_disable>
	if (!status) {
   151e6:	4605      	mov	r5, r0
   151e8:	b9e8      	cbnz	r0, 15226 <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
   151ea:	4c10      	ldr	r4, [pc, #64]	; (1522c <radio_scan_disable+0x50>)
   151ec:	f894 2c2c 	ldrb.w	r2, [r4, #3116]	; 0xc2c
   151f0:	f360 0200 	bfi	r2, r0, #0, #1
   151f4:	f884 2c2c 	strb.w	r2, [r4, #3116]	; 0xc2c
		if (!_radio.advertiser.is_enabled) {
   151f8:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
   151fc:	2a00      	cmp	r2, #0
   151fe:	db01      	blt.n	15204 <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
   15200:	f001 fb68 	bl	168d4 <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
   15204:	f8d4 6c54 	ldr.w	r6, [r4, #3156]	; 0xc54
		if (conn) {
   15208:	b15e      	cbz	r6, 15222 <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
   1520a:	2300      	movs	r3, #0
   1520c:	f8c4 3c54 	str.w	r3, [r4, #3156]	; 0xc54
			mem_release(conn->llcp_terminate.
   15210:	4907      	ldr	r1, [pc, #28]	; (15230 <radio_scan_disable+0x54>)
   15212:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   15216:	f7f5 fc22 	bl	aa5e <mem_release>
			mem_release(conn, &_radio.conn_free);
   1521a:	4906      	ldr	r1, [pc, #24]	; (15234 <radio_scan_disable+0x58>)
   1521c:	4630      	mov	r0, r6
   1521e:	f7f5 fc1e 	bl	aa5e <mem_release>
}
   15222:	4628      	mov	r0, r5
   15224:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   15226:	250c      	movs	r5, #12
   15228:	e7fb      	b.n	15222 <radio_scan_disable+0x46>
   1522a:	bf00      	nop
   1522c:	20000bb0 	.word	0x20000bb0
   15230:	200018e0 	.word	0x200018e0
   15234:	200018a4 	.word	0x200018a4

00015238 <ll_connect_disable>:
	if (_radio.scanner.conn == 0) {
   15238:	4b03      	ldr	r3, [pc, #12]	; (15248 <ll_connect_disable+0x10>)
   1523a:	f8d3 3c54 	ldr.w	r3, [r3, #3156]	; 0xc54
   1523e:	b10b      	cbz	r3, 15244 <ll_connect_disable+0xc>
	status = radio_scan_disable();
   15240:	f7ff bfcc 	b.w	151dc <radio_scan_disable>
}
   15244:	200c      	movs	r0, #12
   15246:	4770      	bx	lr
   15248:	20000bb0 	.word	0x20000bb0

0001524c <ll_rx_dequeue>:
{
   1524c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   1524e:	4d34      	ldr	r5, [pc, #208]	; (15320 <ll_rx_dequeue+0xd4>)
	struct radio_pdu_node_rx *node_rx = NULL;
   15250:	aa02      	add	r2, sp, #8
   15252:	2300      	movs	r3, #0
   15254:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   15258:	f8d5 0d38 	ldr.w	r0, [r5, #3384]	; 0xd38
   1525c:	f605 5134 	addw	r1, r5, #3380	; 0xd34
   15260:	f7f5 fc4c 	bl	aafc <memq_dequeue>
   15264:	462c      	mov	r4, r5
	LL_ASSERT(link);
   15266:	b928      	cbnz	r0, 15274 <ll_rx_dequeue+0x28>
			LL_ASSERT(_radio.scanner.is_enabled);
   15268:	4040      	eors	r0, r0
   1526a:	f380 8811 	msr	BASEPRI, r0
   1526e:	f04f 0004 	mov.w	r0, #4
   15272:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   15274:	f505 6153 	add.w	r1, r5, #3376	; 0xd30
   15278:	f7f5 fbf1 	bl	aa5e <mem_release>
	switch (node_rx->hdr.type) {
   1527c:	9a01      	ldr	r2, [sp, #4]
   1527e:	7911      	ldrb	r1, [r2, #4]
   15280:	290c      	cmp	r1, #12
   15282:	d8f1      	bhi.n	15268 <ll_rx_dequeue+0x1c>
   15284:	2301      	movs	r3, #1
   15286:	408b      	lsls	r3, r1
   15288:	f641 707e 	movw	r0, #8062	; 0x1f7e
   1528c:	4203      	tst	r3, r0
   1528e:	d111      	bne.n	152b4 <ll_rx_dequeue+0x68>
   15290:	0618      	lsls	r0, r3, #24
   15292:	d5e9      	bpl.n	15268 <ll_rx_dequeue+0x1c>
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   15294:	2906      	cmp	r1, #6
   15296:	d134      	bne.n	15302 <ll_rx_dequeue+0xb6>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   15298:	7ad3      	ldrb	r3, [r2, #11]
   1529a:	2b3c      	cmp	r3, #60	; 0x3c
   1529c:	d015      	beq.n	152ca <ll_rx_dequeue+0x7e>
   1529e:	7b12      	ldrb	r2, [r2, #12]
   152a0:	bb8a      	cbnz	r2, 15306 <ll_rx_dequeue+0xba>
			LL_ASSERT(_radio.scanner.is_enabled);
   152a2:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
   152a6:	07d9      	lsls	r1, r3, #31
   152a8:	d5de      	bpl.n	15268 <ll_rx_dequeue+0x1c>
			_radio.scanner.is_enabled = 0;
   152aa:	f362 0300 	bfi	r3, r2, #0, #1
   152ae:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
   152b2:	e01a      	b.n	152ea <ll_rx_dequeue+0x9e>
		LL_ASSERT(_radio.link_rx_data_quota <
   152b4:	f895 0d28 	ldrb.w	r0, [r5, #3368]	; 0xd28
   152b8:	f895 3d3c 	ldrb.w	r3, [r5, #3388]	; 0xd3c
   152bc:	3801      	subs	r0, #1
   152be:	4283      	cmp	r3, r0
   152c0:	dad2      	bge.n	15268 <ll_rx_dequeue+0x1c>
		_radio.link_rx_data_quota++;
   152c2:	3301      	adds	r3, #1
   152c4:	f885 3d3c 	strb.w	r3, [r5, #3388]	; 0xd3c
		break;
   152c8:	e7e4      	b.n	15294 <ll_rx_dequeue+0x48>
				_radio.advertiser.conn = NULL;
   152ca:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   152cc:	f8d4 5c18 	ldr.w	r5, [r4, #3096]	; 0xc18
				_radio.advertiser.conn = NULL;
   152d0:	f8c4 3c18 	str.w	r3, [r4, #3096]	; 0xc18
			LL_ASSERT(_radio.advertiser.is_enabled);
   152d4:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   152d8:	2b00      	cmp	r3, #0
   152da:	dac5      	bge.n	15268 <ll_rx_dequeue+0x1c>
			_radio.advertiser.is_enabled = 0;
   152dc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   152e0:	f36f 13c7 	bfc	r3, #7, #1
   152e4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   152e8:	b97d      	cbnz	r5, 1530a <ll_rx_dequeue+0xbe>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   152ea:	f894 0c2c 	ldrb.w	r0, [r4, #3116]	; 0xc2c
		     _radio.advertiser.is_enabled;
   152ee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   152f2:	f000 0001 	and.w	r0, r0, #1
   152f6:	0040      	lsls	r0, r0, #1
		if (!bm) {
   152f8:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
   152fc:	d101      	bne.n	15302 <ll_rx_dequeue+0xb6>
			ll_adv_scan_state_cb(0);
   152fe:	f001 fae9 	bl	168d4 <ll_adv_scan_state_cb>
}
   15302:	b003      	add	sp, #12
   15304:	bd30      	pop	{r4, r5, pc}
		struct connection *conn = NULL;
   15306:	2500      	movs	r5, #0
   15308:	e7e4      	b.n	152d4 <ll_rx_dequeue+0x88>
			mem_release(node_rx->hdr.onion.link,
   1530a:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   1530e:	4905      	ldr	r1, [pc, #20]	; (15324 <ll_rx_dequeue+0xd8>)
   15310:	f7f5 fba5 	bl	aa5e <mem_release>
			mem_release(conn, &_radio.conn_free);
   15314:	4904      	ldr	r1, [pc, #16]	; (15328 <ll_rx_dequeue+0xdc>)
   15316:	4628      	mov	r0, r5
   15318:	f7f5 fba1 	bl	aa5e <mem_release>
   1531c:	e7e5      	b.n	152ea <ll_rx_dequeue+0x9e>
   1531e:	bf00      	nop
   15320:	20000bb0 	.word	0x20000bb0
   15324:	200018e0 	.word	0x200018e0
   15328:	200018a4 	.word	0x200018a4

0001532c <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   1532c:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   1532e:	4c0b      	ldr	r4, [pc, #44]	; (1535c <rtc0_nrf5_isr+0x30>)
   15330:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   15334:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   15338:	b122      	cbz	r2, 15344 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1533a:	2000      	movs	r0, #0
   1533c:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
   15340:	f7f6 f9d6 	bl	b6f0 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   15344:	b12d      	cbz	r5, 15352 <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   15346:	2300      	movs	r3, #0
   15348:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
   1534c:	2001      	movs	r0, #1
   1534e:	f7f6 f9cf 	bl	b6f0 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   15352:	2000      	movs	r0, #0
}
   15354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   15358:	f7f5 bc80 	b.w	ac5c <mayfly_run>
   1535c:	4000b000 	.word	0x4000b000

00015360 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
   15360:	2001      	movs	r0, #1
   15362:	f7f5 bc7b 	b.w	ac5c <mayfly_run>

00015366 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   15366:	4668      	mov	r0, sp
   15368:	f020 0107 	bic.w	r1, r0, #7
   1536c:	468d      	mov	sp, r1
   1536e:	b501      	push	{r0, lr}
	isr_radio();
   15370:	f001 fe78 	bl	17064 <isr_radio>
	ISR_DIRECT_PM();
   15374:	f7eb fef0 	bl	1158 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   15378:	f7eb fcce 	bl	d18 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1537c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   15380:	4685      	mov	sp, r0
   15382:	4770      	bx	lr

00015384 <radio_active_callback>:
{
   15384:	4770      	bx	lr
	...

00015388 <radio_event_callback>:
	k_sem_give(sem_recv);
   15388:	4b01      	ldr	r3, [pc, #4]	; (15390 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1538a:	6818      	ldr	r0, [r3, #0]
   1538c:	f00a ba5e 	b.w	1f84c <_impl_k_sem_give>
   15390:	20002710 	.word	0x20002710

00015394 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   15394:	b530      	push	{r4, r5, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   15396:	4b38      	ldr	r3, [pc, #224]	; (15478 <ll_init+0xe4>)
{
   15398:	b087      	sub	sp, #28
	sem_recv = sem_rx;
   1539a:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   1539c:	4837      	ldr	r0, [pc, #220]	; (1547c <ll_init+0xe8>)
   1539e:	f009 fd8f 	bl	1eec0 <device_get_binding>
	if (!clk_k32) {
   153a2:	b918      	cbnz	r0, 153ac <ll_init+0x18>
		return -ENODEV;
   153a4:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
   153a8:	b007      	add	sp, #28
   153aa:	bd30      	pop	{r4, r5, pc}
	return api->on(dev, sys);
   153ac:	6843      	ldr	r3, [r0, #4]
   153ae:	2101      	movs	r1, #1
   153b0:	681b      	ldr	r3, [r3, #0]
   153b2:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   153b4:	4832      	ldr	r0, [pc, #200]	; (15480 <ll_init+0xec>)
   153b6:	f009 fd83 	bl	1eec0 <device_get_binding>
	if (!entropy) {
   153ba:	4604      	mov	r4, r0
   153bc:	2800      	cmp	r0, #0
   153be:	d0f1      	beq.n	153a4 <ll_init+0x10>
	cntr_init();
   153c0:	f001 fcae 	bl	16d20 <cntr_init>
	mayfly_init();
   153c4:	f7f5 fbaa 	bl	ab1c <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   153c8:	4b2e      	ldr	r3, [pc, #184]	; (15484 <ll_init+0xf0>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   153ca:	2203      	movs	r2, #3
   153cc:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   153ce:	2108      	movs	r1, #8
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   153d0:	4a2d      	ldr	r2, [pc, #180]	; (15488 <ll_init+0xf4>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   153d2:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   153d4:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   153d6:	2502      	movs	r5, #2
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   153d8:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   153da:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   153dc:	9205      	str	r2, [sp, #20]
   153de:	4a2b      	ldr	r2, [pc, #172]	; (1548c <ll_init+0xf8>)
   153e0:	9204      	str	r2, [sp, #16]
   153e2:	4a2b      	ldr	r2, [pc, #172]	; (15490 <ll_init+0xfc>)
   153e4:	9203      	str	r2, [sp, #12]
   153e6:	4a2b      	ldr	r2, [pc, #172]	; (15494 <ll_init+0x100>)
   153e8:	9202      	str	r2, [sp, #8]
   153ea:	220d      	movs	r2, #13
   153ec:	9201      	str	r2, [sp, #4]
   153ee:	9300      	str	r3, [sp, #0]
   153f0:	4a29      	ldr	r2, [pc, #164]	; (15498 <ll_init+0x104>)
   153f2:	2304      	movs	r3, #4
   153f4:	f7f6 f944 	bl	b680 <ticker_init>
	LL_ASSERT(!err);
   153f8:	b128      	cbz	r0, 15406 <ll_init+0x72>
   153fa:	4040      	eors	r0, r0
   153fc:	f380 8811 	msr	BASEPRI, r0
   15400:	f04f 0004 	mov.w	r0, #4
   15404:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   15406:	4825      	ldr	r0, [pc, #148]	; (1549c <ll_init+0x108>)
   15408:	f009 fd5a 	bl	1eec0 <device_get_binding>
	if (!clk_m16) {
   1540c:	2800      	cmp	r0, #0
   1540e:	d0c9      	beq.n	153a4 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
   15410:	f640 1368 	movw	r3, #2408	; 0x968
   15414:	9305      	str	r3, [sp, #20]
   15416:	4b22      	ldr	r3, [pc, #136]	; (154a0 <ll_init+0x10c>)
   15418:	9304      	str	r3, [sp, #16]
   1541a:	f240 1301 	movw	r3, #257	; 0x101
   1541e:	9303      	str	r3, [sp, #12]
   15420:	9501      	str	r5, [sp, #4]
   15422:	23fb      	movs	r3, #251	; 0xfb
   15424:	2501      	movs	r5, #1
   15426:	9302      	str	r3, [sp, #8]
   15428:	4622      	mov	r2, r4
   1542a:	9500      	str	r5, [sp, #0]
   1542c:	462b      	mov	r3, r5
   1542e:	2107      	movs	r1, #7
   15430:	f7fe fabe 	bl	139b0 <radio_init>
	if (err) {
   15434:	4604      	mov	r4, r0
   15436:	b9e0      	cbnz	r0, 15472 <ll_init+0xde>
	ll_filter_reset(true);
   15438:	4628      	mov	r0, r5
   1543a:	f001 fc29 	bl	16c90 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   1543e:	4622      	mov	r2, r4
   15440:	4621      	mov	r1, r4
   15442:	4628      	mov	r0, r5
   15444:	f7eb fe6e 	bl	1124 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   15448:	4622      	mov	r2, r4
   1544a:	4621      	mov	r1, r4
   1544c:	200b      	movs	r0, #11
   1544e:	f7eb fe69 	bl	1124 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   15452:	4622      	mov	r2, r4
   15454:	4621      	mov	r1, r4
   15456:	2018      	movs	r0, #24
   15458:	f7eb fe64 	bl	1124 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   1545c:	4628      	mov	r0, r5
   1545e:	f7eb fe2f 	bl	10c0 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   15462:	200b      	movs	r0, #11
   15464:	f7eb fe2c 	bl	10c0 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   15468:	2018      	movs	r0, #24
   1546a:	f7eb fe29 	bl	10c0 <_arch_irq_enable>
	return 0;
   1546e:	4620      	mov	r0, r4
   15470:	e79a      	b.n	153a8 <ll_init+0x14>
		return -ENOMEM;
   15472:	f06f 000b 	mvn.w	r0, #11
   15476:	e797      	b.n	153a8 <ll_init+0x14>
   15478:	20002710 	.word	0x20002710
   1547c:	00020f38 	.word	0x00020f38
   15480:	00020ef9 	.word	0x00020ef9
   15484:	200026f0 	.word	0x200026f0
   15488:	0001797d 	.word	0x0001797d
   1548c:	00017905 	.word	0x00017905
   15490:	000178e5 	.word	0x000178e5
   15494:	20002480 	.word	0x20002480
   15498:	20002340 	.word	0x20002340
   1549c:	00020f43 	.word	0x00020f43
   154a0:	200019d8 	.word	0x200019d8

000154a4 <ll_adv_set_get>:


struct ll_adv_set *ll_adv_set_get(void)
{
	return &ll_adv;
}
   154a4:	4800      	ldr	r0, [pc, #0]	; (154a8 <ll_adv_set_get+0x4>)
   154a6:	4770      	bx	lr
   154a8:	20002716 	.word	0x20002716

000154ac <ll_adv_params_set>:

u32_t ll_adv_params_set(u16_t interval, u8_t adv_type,
			u8_t own_addr_type, u8_t direct_addr_type,
			u8_t const *const direct_addr, u8_t chan_map,
			u8_t filter_policy)
{
   154ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154b0:	4616      	mov	r6, r2
   154b2:	4698      	mov	r8, r3
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   154b4:	2206      	movs	r2, #6
   154b6:	2300      	movs	r3, #0
   154b8:	f88d 3000 	strb.w	r3, [sp]
   154bc:	f88d 2002 	strb.w	r2, [sp, #2]
   154c0:	2301      	movs	r3, #1
   154c2:	2202      	movs	r2, #2
{
   154c4:	4604      	mov	r4, r0
   154c6:	468b      	mov	fp, r1
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   154c8:	f88d 3001 	strb.w	r3, [sp, #1]
   154cc:	f88d 2003 	strb.w	r2, [sp, #3]
   154d0:	f88d 3004 	strb.w	r3, [sp, #4]
				     PDU_ADV_TYPE_DIRECT_IND};

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (ll_adv_is_enabled()) {
   154d4:	f7fe fb4e 	bl	13b74 <ll_adv_is_enabled>
   154d8:	4607      	mov	r7, r0
   154da:	2800      	cmp	r0, #0
   154dc:	d17c      	bne.n	155d8 <ll_adv_params_set+0x12c>
   154de:	f8df a100 	ldr.w	sl, [pc, #256]	; 155e0 <ll_adv_params_set+0x134>
	if (adv_type != 0x01) {
		ll_adv.interval = interval;
	} else {
		ll_adv.interval = 0;
	}
	ll_adv.chan_map = chan_map;
   154e2:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   154e6:	f89a 3000 	ldrb.w	r3, [sl]
   154ea:	f362 0302 	bfi	r3, r2, #0, #3
	ll_adv.filter_policy = filter_policy;
   154ee:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	if (adv_type != 0x01) {
   154f2:	f1bb 0f01 	cmp.w	fp, #1
	ll_adv.filter_policy = filter_policy;
   154f6:	f362 03c4 	bfi	r3, r2, #3, #2
		ll_adv.interval = interval;
   154fa:	bf14      	ite	ne
   154fc:	f8aa 400a 	strhne.w	r4, [sl, #10]
		ll_adv.interval = 0;
   15500:	f8aa 000a 	strheq.w	r0, [sl, #10]
	ll_adv.filter_policy = filter_policy;
   15504:	f88a 3000 	strb.w	r3, [sl]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
   15508:	f7fe fb24 	bl	13b54 <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1550c:	f890 4203 	ldrb.w	r4, [r0, #515]	; 0x203
	pdu->type = pdu_adv_type[adv_type];
   15510:	ab02      	add	r3, sp, #8
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   15512:	eb04 2404 	add.w	r4, r4, r4, lsl #8
	pdu->type = pdu_adv_type[adv_type];
   15516:	449b      	add	fp, r3
   15518:	5d03      	ldrb	r3, [r0, r4]
   1551a:	f81b 2c08 	ldrb.w	r2, [fp, #-8]
   1551e:	f362 0303 	bfi	r3, r2, #0, #4
	pdu->rfu = 0;
   15522:	f36f 1304 	bfc	r3, #4, #1
   15526:	5503      	strb	r3, [r0, r4]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   15528:	b2db      	uxtb	r3, r3
   1552a:	f003 020f 	and.w	r2, r3, #15
   1552e:	2a01      	cmp	r2, #1
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
	     (pdu->type == PDU_ADV_TYPE_DIRECT_IND))) {
		pdu->chan_sel = 1;
   15530:	bf94      	ite	ls
   15532:	f043 0320 	orrls.w	r3, r3, #32
	} else {
		pdu->chan_sel = 0;
   15536:	f36f 1345 	bfchi	r3, #5, #1
   1553a:	5503      	strb	r3, [r0, r4]
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
   1553c:	f89a 3000 	ldrb.w	r3, [sl]
   15540:	f366 1346 	bfi	r3, r6, #5, #2
   15544:	f88a 3000 	strb.w	r3, [sl]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   15548:	b2db      	uxtb	r3, r3
   1554a:	065a      	lsls	r2, r3, #25
	radio_adv_data = radio_adv_data_get();
   1554c:	4605      	mov	r5, r0
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1554e:	eb00 0904 	add.w	r9, r0, r4
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   15552:	d508      	bpl.n	15566 <ll_adv_params_set+0xba>
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
   15554:	f368 13c7 	bfi	r3, r8, #7, #1
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   15558:	2206      	movs	r2, #6
   1555a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1555c:	481f      	ldr	r0, [pc, #124]	; (155dc <ll_adv_params_set+0x130>)
		ll_adv.id_addr_type = direct_addr_type;
   1555e:	f88a 3000 	strb.w	r3, [sl]
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   15562:	f7eb f9c2 	bl	8ea <memcpy>
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
   15566:	5d2b      	ldrb	r3, [r5, r4]
   15568:	f006 0601 	and.w	r6, r6, #1
   1556c:	f366 1386 	bfi	r3, r6, #6, #1
	pdu->rx_addr = 0;
   15570:	f36f 13c7 	bfc	r3, #7, #1
   15574:	552b      	strb	r3, [r5, r4]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   15576:	b2db      	uxtb	r3, r3
   15578:	f003 020f 	and.w	r2, r3, #15
   1557c:	2a01      	cmp	r2, #1
   1557e:	d125      	bne.n	155cc <ll_adv_params_set+0x120>
		pdu->rx_addr = direct_addr_type;
   15580:	f368 13c7 	bfi	r3, r8, #7, #1
   15584:	552b      	strb	r3, [r5, r4]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   15586:	2206      	movs	r2, #6
   15588:	990c      	ldr	r1, [sp, #48]	; 0x30
   1558a:	f109 0008 	add.w	r0, r9, #8
   1558e:	f7eb f9ac 	bl	8ea <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   15592:	230c      	movs	r3, #12

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
   15594:	f889 3001 	strb.w	r3, [r9, #1]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
   15598:	f7fe fae8 	bl	13b6c <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1559c:	f890 2203 	ldrb.w	r2, [r0, #515]	; 0x203
   155a0:	eb02 2202 	add.w	r2, r2, r2, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   155a4:	2404      	movs	r4, #4
   155a6:	5c83      	ldrb	r3, [r0, r2]
   155a8:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
   155ac:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   155b0:	f366 1386 	bfi	r3, r6, #6, #1
	pdu->rx_addr = 0;
   155b4:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   155b8:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
   155ba:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
   155bc:	784b      	ldrb	r3, [r1, #1]
   155be:	b90b      	cbnz	r3, 155c4 <ll_adv_params_set+0x118>
		pdu->len = BDADDR_SIZE;
   155c0:	2306      	movs	r3, #6
   155c2:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
   155c4:	4638      	mov	r0, r7
   155c6:	b003      	add	sp, #12
   155c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (pdu->len == 0) {
   155cc:	f899 3001 	ldrb.w	r3, [r9, #1]
   155d0:	2b00      	cmp	r3, #0
   155d2:	d1e1      	bne.n	15598 <ll_adv_params_set+0xec>
		pdu->len = BDADDR_SIZE;
   155d4:	2306      	movs	r3, #6
   155d6:	e7dd      	b.n	15594 <ll_adv_params_set+0xe8>
		return BT_HCI_ERR_CMD_DISALLOWED;
   155d8:	270c      	movs	r7, #12
   155da:	e7f3      	b.n	155c4 <ll_adv_params_set+0x118>
   155dc:	20002718 	.word	0x20002718
   155e0:	20002716 	.word	0x20002716

000155e4 <ll_ext_adv_params_set>:
u32_t ll_ext_adv_params_set(u8_t Adv_handle, u16_t evt_prop, u16_t interval,
			u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   155e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155e8:	b08d      	sub	sp, #52	; 0x34
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   155ea:	2601      	movs	r6, #1
{
   155ec:	9304      	str	r3, [sp, #16]
   155ee:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   155f2:	9305      	str	r3, [sp, #20]
   155f4:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   155f8:	9306      	str	r3, [sp, #24]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   155fa:	2300      	movs	r3, #0
   155fc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   15600:	2306      	movs	r3, #6
   15602:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   15606:	2502      	movs	r5, #2
   15608:	2307      	movs	r3, #7
{
   1560a:	4689      	mov	r9, r1
   1560c:	4614      	mov	r4, r2
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1560e:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
   15612:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
   15616:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   1561a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
//	struct radio_ext_adv_data *radio_aux_adv_data;
	struct radio_adv_data *radio_aux_adv_data;
	struct pdu_adv *pdu;
	struct pdu_adv *aux_pdu;
	
	if (ll_adv_is_enabled()) {
   1561e:	f7fe faa9 	bl	13b74 <ll_adv_is_enabled>
   15622:	4682      	mov	sl, r0
   15624:	2800      	cmp	r0, #0
   15626:	f040 81c3 	bne.w	159b0 <ll_ext_adv_params_set+0x3cc>

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */
	ll_adv.max_skip = skip;
   1562a:	4b61      	ldr	r3, [pc, #388]	; (157b0 <ll_ext_adv_params_set+0x1cc>)
   1562c:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
   15630:	731a      	strb	r2, [r3, #12]
	
	u8_t adv_type;
	ll_adv.phy_p = BIT(0);
   15632:	7a1a      	ldrb	r2, [r3, #8]
		adv_type = 0x05;
	}			
	/* extended */
	//if (adv_type > 0x04) {
		/* legacy */
		if (evt_prop & BIT(4)) {
   15634:	f019 0f10 	tst.w	r9, #16
	ll_adv.phy_p = BIT(0);
   15638:	f366 0202 	bfi	r2, r6, #0, #3
   1563c:	721a      	strb	r2, [r3, #8]
		if (evt_prop & BIT(4)) {
   1563e:	f000 80a4 	beq.w	1578a <ll_ext_adv_params_set+0x1a6>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   15642:	2203      	movs	r2, #3
   15644:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24

			adv_type = leg_adv_type[evt_prop & 0x03];

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
   15648:	f019 0f08 	tst.w	r9, #8
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   1564c:	f04f 0204 	mov.w	r2, #4
   15650:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   15654:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
   15658:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
			if (evt_prop & BIT(3)) {
   1565c:	d108      	bne.n	15670 <ll_ext_adv_params_set+0x8c>
			adv_type = leg_adv_type[evt_prop & 0x03];
   1565e:	a90c      	add	r1, sp, #48	; 0x30
   15660:	f009 0203 	and.w	r2, r9, #3
   15664:	440a      	add	r2, r1
   15666:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type == 0x01) {
   1566a:	42b1      	cmp	r1, r6
   1566c:	f040 809d 	bne.w	157aa <ll_ext_adv_params_set+0x1c6>
		ll_adv.interval = 0;  				//interval = 0 for ADV_DIRECT_IND
   15670:	2200      	movs	r2, #0
   15672:	815a      	strh	r2, [r3, #10]
   15674:	2101      	movs	r1, #1
	} else {
		ll_adv.interval = interval;
	}
	ll_adv.chan_map = chan_map;  			
   15676:	781a      	ldrb	r2, [r3, #0]
   15678:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   1567c:	9107      	str	r1, [sp, #28]
   1567e:	f360 0202 	bfi	r2, r0, #0, #3
	ll_adv.filter_policy = filter_policy;
   15682:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
   15686:	f360 02c4 	bfi	r2, r0, #3, #2
   1568a:	701a      	strb	r2, [r3, #0]
	
	/* update the "current" primary adv data and Aux packet */
	radio_adv_data = radio_adv_data_get();
   1568c:	f7fe fa62 	bl	13b54 <radio_adv_data_get>
   15690:	4606      	mov	r6, r0
	radio_aux_adv_data = radio_aux_adv_data_get();							// testing
   15692:	f7fe fa63 	bl	13b5c <radio_aux_adv_data_get>
//	radio_aux_adv_data = radio_chain_adv_data_get();

	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];

	pdu->type = pdu_adv_type[adv_type];
   15696:	9907      	ldr	r1, [sp, #28]
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   15698:	f896 5203 	ldrb.w	r5, [r6, #515]	; 0x203
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
   1569c:	f890 7203 	ldrb.w	r7, [r0, #515]	; 0x203
	pdu->type = pdu_adv_type[adv_type];
   156a0:	aa0c      	add	r2, sp, #48	; 0x30
   156a2:	4411      	add	r1, r2
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   156a4:	eb05 2505 	add.w	r5, r5, r5, lsl #8
	pdu->type = pdu_adv_type[adv_type];
   156a8:	f811 2c08 	ldrb.w	r2, [r1, #-8]
   156ac:	5d71      	ldrb	r1, [r6, r5]
   156ae:	f002 020f 	and.w	r2, r2, #15
   156b2:	f362 0103 	bfi	r1, r2, #0, #4
   156b6:	5571      	strb	r1, [r6, r5]
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
   156b8:	eb07 2707 	add.w	r7, r7, r7, lsl #8
	radio_aux_adv_data = radio_aux_adv_data_get();							// testing
   156bc:	4603      	mov	r3, r0
	aux_pdu->type = pdu->type;
   156be:	5dc1      	ldrb	r1, [r0, r7]
   156c0:	f362 0103 	bfi	r1, r2, #0, #4
   156c4:	55c1      	strb	r1, [r0, r7]
	
	pdu->rfu = 0;
   156c6:	5d72      	ldrb	r2, [r6, r5]
   156c8:	f36f 1204 	bfc	r2, #4, #1
   156cc:	5572      	strb	r2, [r6, r5]
	aux_pdu->rfu = pdu->rfu;
   156ce:	5dc2      	ldrb	r2, [r0, r7]
   156d0:	f36f 1204 	bfc	r2, #4, #1
   156d4:	55c2      	strb	r2, [r0, r7]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) && 
   156d6:	5d72      	ldrb	r2, [r6, r5]
   156d8:	f002 010f 	and.w	r1, r2, #15
   156dc:	2901      	cmp	r1, #1
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
	     (pdu->type == PDU_ADV_TYPE_DIRECT_IND))) {
		pdu->chan_sel = 1;           // could be same for ext adv  LE Channel Selection Algorithm #2 feature 
   156de:	bf95      	itete	ls
   156e0:	f042 0220 	orrls.w	r2, r2, #32
		aux_pdu->chan_sel = pdu->chan_sel;
	} else {
		pdu->chan_sel = 0;
   156e4:	f36f 1245 	bfchi	r2, #5, #1
		pdu->chan_sel = 1;           // could be same for ext adv  LE Channel Selection Algorithm #2 feature 
   156e8:	5572      	strbls	r2, [r6, r5]
		pdu->chan_sel = 0;
   156ea:	5572      	strbhi	r2, [r6, r5]
		aux_pdu->chan_sel = pdu->chan_sel;
   156ec:	bf94      	ite	ls
   156ee:	5dc2      	ldrbls	r2, [r0, r7]
		aux_pdu->chan_sel = pdu->chan_sel;
   156f0:	5dc2      	ldrbhi	r2, [r0, r7]
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
   156f2:	9904      	ldr	r1, [sp, #16]
		aux_pdu->chan_sel = pdu->chan_sel;
   156f4:	bf94      	ite	ls
   156f6:	f042 0220 	orrls.w	r2, r2, #32
		aux_pdu->chan_sel = pdu->chan_sel;
   156fa:	f36f 1245 	bfchi	r2, #5, #1
   156fe:	55c2      	strb	r2, [r0, r7]
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
   15700:	eb00 0807 	add.w	r8, r0, r7
	ll_adv.own_addr_type = own_addr_type;
   15704:	482a      	ldr	r0, [pc, #168]	; (157b0 <ll_ext_adv_params_set+0x1cc>)
   15706:	7802      	ldrb	r2, [r0, #0]
   15708:	f361 1246 	bfi	r2, r1, #5, #2
   1570c:	7002      	strb	r2, [r0, #0]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1570e:	b2d2      	uxtb	r2, r2
   15710:	0651      	lsls	r1, r2, #25
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   15712:	eb06 0405 	add.w	r4, r6, r5
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   15716:	d50a      	bpl.n	1572e <ll_ext_adv_params_set+0x14a>
   15718:	9307      	str	r3, [sp, #28]
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
   1571a:	9b05      	ldr	r3, [sp, #20]
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   1571c:	9917      	ldr	r1, [sp, #92]	; 0x5c
		ll_adv.id_addr_type = direct_addr_type;
   1571e:	f363 12c7 	bfi	r2, r3, #7, #1
   15722:	f800 2b02 	strb.w	r2, [r0], #2
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   15726:	2206      	movs	r2, #6
   15728:	f7eb f8df 	bl	8ea <memcpy>
   1572c:	9b07      	ldr	r3, [sp, #28]
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr =  own_addr_type & 0x1;
   1572e:	9a04      	ldr	r2, [sp, #16]
   15730:	f002 0201 	and.w	r2, r2, #1
   15734:	9204      	str	r2, [sp, #16]
   15736:	9904      	ldr	r1, [sp, #16]
   15738:	5d72      	ldrb	r2, [r6, r5]
   1573a:	f361 1286 	bfi	r2, r1, #6, #1
   1573e:	5572      	strb	r2, [r6, r5]
	aux_pdu->tx_addr = 0;						//not sending transmitting address in aux packet
   15740:	5dda      	ldrb	r2, [r3, r7]
   15742:	f36f 1286 	bfc	r2, #6, #1
   15746:	55da      	strb	r2, [r3, r7]
	pdu->rx_addr = 0;  							
   15748:	5d72      	ldrb	r2, [r6, r5]
   1574a:	f36f 12c7 	bfc	r2, #7, #1
   1574e:	5572      	strb	r2, [r6, r5]
	aux_pdu->rx_addr = pdu->rx_addr;
   15750:	5dda      	ldrb	r2, [r3, r7]
   15752:	f36f 12c7 	bfc	r2, #7, #1
   15756:	55da      	strb	r2, [r3, r7]
	if(evt_prop & BIT(2)){							// for directed ADV wuth public address
   15758:	f019 0204 	ands.w	r2, r9, #4
		pdu->rx_addr = 0;//direct_addr_type;
   1575c:	bf1e      	ittt	ne
   1575e:	5d73      	ldrbne	r3, [r6, r5]
   15760:	f36f 13c7 	bfcne	r3, #7, #1
   15764:	5573      	strbne	r3, [r6, r5]
	}

	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   15766:	5d73      	ldrb	r3, [r6, r5]
   15768:	f003 010f 	and.w	r1, r3, #15
   1576c:	2901      	cmp	r1, #1
   1576e:	d121      	bne.n	157b4 <ll_ext_adv_params_set+0x1d0>
		pdu->rx_addr = direct_addr_type;
   15770:	9a05      	ldr	r2, [sp, #20]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   15772:	9917      	ldr	r1, [sp, #92]	; 0x5c
		pdu->rx_addr = direct_addr_type;
   15774:	f362 13c7 	bfi	r3, r2, #7, #1
   15778:	5573      	strb	r3, [r6, r5]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   1577a:	2206      	movs	r2, #6
   1577c:	f104 0008 	add.w	r0, r4, #8
   15780:	f7eb f8b3 	bl	8ea <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   15784:	230c      	movs	r3, #12
		/* NOTE: AdvA, filled at enable and RPA timeout */
		
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
   15786:	7063      	strb	r3, [r4, #1]
   15788:	e0ec      	b.n	15964 <ll_ext_adv_params_set+0x380>
			if (((evt_prop & 0x03) == 0x03) ||
   1578a:	f009 0203 	and.w	r2, r9, #3
   1578e:	2a03      	cmp	r2, #3
   15790:	f000 8111 	beq.w	159b6 <ll_ext_adv_params_set+0x3d2>
   15794:	f009 020c 	and.w	r2, r9, #12
   15798:	2a0c      	cmp	r2, #12
   1579a:	f000 810c 	beq.w	159b6 <ll_ext_adv_params_set+0x3d2>
			ll_adv.phy_p = phy_p;
   1579e:	7a1a      	ldrb	r2, [r3, #8]
   157a0:	9906      	ldr	r1, [sp, #24]
   157a2:	f361 0202 	bfi	r2, r1, #0, #3
   157a6:	721a      	strb	r2, [r3, #8]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
   157a8:	2105      	movs	r1, #5
		ll_adv.interval = interval;
   157aa:	815c      	strh	r4, [r3, #10]
   157ac:	e763      	b.n	15676 <ll_ext_adv_params_set+0x92>
   157ae:	bf00      	nop
   157b0:	20002716 	.word	0x20002716
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
   157b4:	2907      	cmp	r1, #7
   157b6:	f040 80f6 	bne.w	159a6 <ll_ext_adv_params_set+0x3c2>
		p->ext_hdr_len = 0;
   157ba:	78a3      	ldrb	r3, [r4, #2]
		p->adv_mode = 0x00;//evt_prop & 0x03;
   157bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   157c0:	f36f 1387 	bfc	r3, #6, #2
   157c4:	70a3      	strb	r3, [r4, #2]
		aux_p->ext_hdr_len = p->ext_hdr_len;
   157c6:	f898 3002 	ldrb.w	r3, [r8, #2]
		aux_p->adv_mode = p->adv_mode;
   157ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   157ce:	f36f 1387 	bfc	r3, #6, #2
   157d2:	f888 3002 	strb.w	r3, [r8, #2]
		if (!((evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2)))) {
   157d6:	f019 0f20 	tst.w	r9, #32
		*(u8_t *)h = 0;
   157da:	f04f 0300 	mov.w	r3, #0
   157de:	70e3      	strb	r3, [r4, #3]
		p = (void *)&pdu->adv_ext_ind;
   157e0:	f104 0002 	add.w	r0, r4, #2
		ptr = (u8_t *)h + sizeof(*h);
   157e4:	f104 0504 	add.w	r5, r4, #4
		aux_p = (void *)&aux_pdu->adv_ext_ind;
   157e8:	f108 0102 	add.w	r1, r8, #2
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
   157ec:	f108 0604 	add.w	r6, r8, #4
		*(u8_t *)aux_h = 0;
   157f0:	f888 3003 	strb.w	r3, [r8, #3]
		if (!((evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2)))) {
   157f4:	d007      	beq.n	15806 <ll_ext_adv_params_set+0x222>
   157f6:	78a3      	ldrb	r3, [r4, #2]
   157f8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   157fc:	d103      	bne.n	15806 <ll_ext_adv_params_set+0x222>
   157fe:	9b06      	ldr	r3, [sp, #24]
   15800:	2b04      	cmp	r3, #4
   15802:	f040 80ca 	bne.w	1599a <ll_ext_adv_params_set+0x3b6>
			h->adv_addr = 1;
   15806:	78e3      	ldrb	r3, [r4, #3]
   15808:	f043 0301 	orr.w	r3, r3, #1
   1580c:	70e3      	strb	r3, [r4, #3]
			ptr += BDADDR_SIZE;
   1580e:	f104 030a 	add.w	r3, r4, #10
		if(evt_prop & BIT(2)){
   15812:	b122      	cbz	r2, 1581e <ll_ext_adv_params_set+0x23a>
			h->tgt_addr = 1;
   15814:	78e2      	ldrb	r2, [r4, #3]
   15816:	f042 0202 	orr.w	r2, r2, #2
   1581a:	70e2      	strb	r2, [r4, #3]
			ptr += BDADDR_SIZE;
   1581c:	3306      	adds	r3, #6
		if(evt_prop & BIT(6)){
   1581e:	f019 0f40 	tst.w	r9, #64	; 0x40
   15822:	f000 80bc 	beq.w	1599e <ll_ext_adv_params_set+0x3ba>
			h->adi = 1;
   15826:	78e2      	ldrb	r2, [r4, #3]
			adi_ptr = ptr;
   15828:	9302      	str	r3, [sp, #8]
			h->adi = 1;
   1582a:	f042 0208 	orr.w	r2, r2, #8
   1582e:	70e2      	strb	r2, [r4, #3]
			aux_h->adi = h->adi;
   15830:	f898 2003 	ldrb.w	r2, [r8, #3]
			aux_adi_ptr = aux_ptr;
   15834:	9603      	str	r6, [sp, #12]
			aux_h->adi = h->adi;
   15836:	f042 0208 	orr.w	r2, r2, #8
   1583a:	f888 2003 	strb.w	r2, [r8, #3]
			h->aux_ptr = 1;
   1583e:	78e2      	ldrb	r2, [r4, #3]
   15840:	f042 0210 	orr.w	r2, r2, #16
   15844:	70e2      	strb	r2, [r4, #3]
			aux_h->aux_ptr = h->aux_ptr;
   15846:	f898 2003 	ldrb.w	r2, [r8, #3]
   1584a:	f042 0210 	orr.w	r2, r2, #16
   1584e:	f888 2003 	strb.w	r2, [r8, #3]
			h->tx_pwr = 1;
   15852:	78e7      	ldrb	r7, [r4, #3]
			ptr += sizeof(*adi_ptr);
   15854:	f103 0b02 	add.w	fp, r3, #2
			h->tx_pwr = 1;
   15858:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			aux_ptr+= sizeof(*aux_ap);
   1585c:	f108 0209 	add.w	r2, r8, #9
			h->tx_pwr = 1;
   15860:	70e7      	strb	r7, [r4, #3]
			ptr += sizeof(*adi_ptr);
   15862:	f8cd b004 	str.w	fp, [sp, #4]
			ptr ++;
   15866:	3306      	adds	r3, #6
		len = ptr - (u8_t *)p;
   15868:	1a1b      	subs	r3, r3, r0
   1586a:	b2db      	uxtb	r3, r3
		if (len > (offsetof(struct pdu_adv_com_ext_adv,
   1586c:	2b02      	cmp	r3, #2
			p->ext_hdr_len = (len -
   1586e:	bf8c      	ite	hi
   15870:	78a0      	ldrbhi	r0, [r4, #2]
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
   15872:	2301      	movls	r3, #1
   15874:	7063      	strb	r3, [r4, #1]
			p->ext_hdr_len = (len -
   15876:	bf88      	it	hi
   15878:	f103 37ff 	addhi.w	r7, r3, #4294967295	; 0xffffffff
		aux_len = aux_ptr - (u8_t *)aux_p;
   1587c:	eba2 0301 	sub.w	r3, r2, r1
			p->ext_hdr_len = (len -
   15880:	bf88      	it	hi
   15882:	f367 0005 	bfihi	r0, r7, #0, #6
		aux_len = aux_ptr - (u8_t *)aux_p;
   15886:	b2db      	uxtb	r3, r3
			p->ext_hdr_len = (len -
   15888:	bf88      	it	hi
   1588a:	70a0      	strbhi	r0, [r4, #2]
   1588c:	4a4b      	ldr	r2, [pc, #300]	; (159bc <ll_ext_adv_params_set+0x3d8>)
		if (aux_len > (offsetof(struct pdu_adv_com_ext_adv,
   1588e:	2b02      	cmp	r3, #2
			aux_p->ext_hdr_len = (aux_len -
   15890:	bf82      	ittt	hi
   15892:	f898 1002 	ldrbhi.w	r1, [r8, #2]
			aux_pdu->len = aux_len;
   15896:	f888 3001 	strbhi.w	r3, [r8, #1]
			aux_p->ext_hdr_len = (aux_len -
   1589a:	f103 30ff 	addhi.w	r0, r3, #4294967295	; 0xffffffff
			aux_ptr_len = aux_len;
   1589e:	7013      	strb	r3, [r2, #0]
		if(h->adv_addr){
   158a0:	78e3      	ldrb	r3, [r4, #3]
			aux_p->ext_hdr_len = (aux_len -
   158a2:	bf8b      	itete	hi
   158a4:	f360 0105 	bfihi	r1, r0, #0, #6
			aux_pdu->len = offsetof(struct pdu_adv_com_ext_adv,
   158a8:	2101      	movls	r1, #1
			aux_p->ext_hdr_len = (aux_len -
   158aa:	f888 1002 	strbhi.w	r1, [r8, #2]
			aux_pdu->len = offsetof(struct pdu_adv_com_ext_adv,
   158ae:	f888 1001 	strbls.w	r1, [r8, #1]
		if(h->adv_addr){
   158b2:	07da      	lsls	r2, r3, #31
			ptr += BDADDR_SIZE;
   158b4:	bf48      	it	mi
   158b6:	f104 050a 	addmi.w	r5, r4, #10
		if(h->tgt_addr){
   158ba:	079f      	lsls	r7, r3, #30
   158bc:	d505      	bpl.n	158ca <ll_ext_adv_params_set+0x2e6>
			memcpy(ptr, direct_addr, BDADDR_SIZE);
   158be:	4628      	mov	r0, r5
   158c0:	2206      	movs	r2, #6
   158c2:	9917      	ldr	r1, [sp, #92]	; 0x5c
   158c4:	f7eb f811 	bl	8ea <memcpy>
			ptr += BDADDR_SIZE;
   158c8:	3506      	adds	r5, #6
		if(h->adi){
   158ca:	78e1      	ldrb	r1, [r4, #3]
   158cc:	0708      	lsls	r0, r1, #28
   158ce:	d517      	bpl.n	15900 <ll_ext_adv_params_set+0x31c>
			adi_ptr->did = 0x00;
   158d0:	9b02      	ldr	r3, [sp, #8]
   158d2:	2200      	movs	r2, #0
   158d4:	701a      	strb	r2, [r3, #0]
   158d6:	785b      	ldrb	r3, [r3, #1]
			adi_ptr->sid = 0x02;//sid & 0x0f;
   158d8:	2002      	movs	r0, #2
   158da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   158de:	f360 1307 	bfi	r3, r0, #4, #4
   158e2:	9802      	ldr	r0, [sp, #8]
   158e4:	7043      	strb	r3, [r0, #1]
			aux_adi_ptr->did = adi_ptr->did;
   158e6:	9b03      	ldr	r3, [sp, #12]
   158e8:	701a      	strb	r2, [r3, #0]
   158ea:	785b      	ldrb	r3, [r3, #1]
			aux_adi_ptr->sid = 0x04;//adi_ptr->sid;
   158ec:	2204      	movs	r2, #4
   158ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   158f2:	f362 1307 	bfi	r3, r2, #4, #4
   158f6:	9a03      	ldr	r2, [sp, #12]
			ptr += sizeof(*adi_ptr);
   158f8:	3502      	adds	r5, #2
			aux_adi_ptr->sid = 0x04;//adi_ptr->sid;
   158fa:	7053      	strb	r3, [r2, #1]
			aux_ptr += sizeof(*aux_adi_ptr);
   158fc:	f108 0606 	add.w	r6, r8, #6
		if(h->aux_ptr){
   15900:	06ca      	lsls	r2, r1, #27
   15902:	d522      	bpl.n	1594a <ll_ext_adv_params_set+0x366>
			ap->offs_units = 0;
   15904:	9b01      	ldr	r3, [sp, #4]
			ap->offs = 00;
   15906:	9a01      	ldr	r2, [sp, #4]
			ap->phy = 0;
   15908:	9c01      	ldr	r4, [sp, #4]
			ap->chan_idx = 0x03;
   1590a:	2003      	movs	r0, #3
			ap->offs_units = 0;
   1590c:	7018      	strb	r0, [r3, #0]
			ap->offs = 00;
   1590e:	2300      	movs	r3, #0
   15910:	7053      	strb	r3, [r2, #1]
   15912:	7892      	ldrb	r2, [r2, #2]
			ap->phy = 0;
   15914:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   15918:	f363 1247 	bfi	r2, r3, #5, #3
   1591c:	70a2      	strb	r2, [r4, #2]
			aux_ap->chan_idx = 0x03;
   1591e:	f89b 2000 	ldrb.w	r2, [fp]
			aux_ap->offs = 00;
   15922:	f88b 3001 	strb.w	r3, [fp, #1]
			aux_ap->chan_idx = 0x03;
   15926:	f360 0205 	bfi	r2, r0, #0, #6
			aux_ap->offs_units = 0;
   1592a:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   1592e:	f363 12c7 	bfi	r2, r3, #7, #1
   15932:	f88b 2000 	strb.w	r2, [fp]
			aux_ap->offs = 00;
   15936:	f89b 2002 	ldrb.w	r2, [fp, #2]
			aux_ap->phy = 0;
   1593a:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   1593e:	f363 1247 	bfi	r2, r3, #5, #3
			ptr += sizeof(*ap);
   15942:	4405      	add	r5, r0
			aux_ap->phy = 0;
   15944:	f88b 2002 	strb.w	r2, [fp, #2]
			aux_ptr += sizeof(*ap);
   15948:	4406      	add	r6, r0
		if (h->tx_pwr) {
   1594a:	064b      	lsls	r3, r1, #25
   1594c:	d508      	bpl.n	15960 <ll_ext_adv_params_set+0x37c>
			if (tx_pwr) {
   1594e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15950:	b33b      	cbz	r3, 159a2 <ll_ext_adv_params_set+0x3be>
				if (*tx_pwr != 0x7F) {
   15952:	781b      	ldrb	r3, [r3, #0]
   15954:	2b7f      	cmp	r3, #127	; 0x7f
   15956:	d102      	bne.n	1595e <ll_ext_adv_params_set+0x37a>
					*tx_pwr = _tx_pwr;
   15958:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1595a:	2300      	movs	r3, #0
   1595c:	7013      	strb	r3, [r2, #0]
			*ptr = _tx_pwr;
   1595e:	702b      	strb	r3, [r5, #0]
		set_data_ptr = aux_ptr; 
   15960:	4b17      	ldr	r3, [pc, #92]	; (159c0 <ll_ext_adv_params_set+0x3dc>)
   15962:	601e      	str	r6, [r3, #0]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
   15964:	f7fe f902 	bl	13b6c <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   15968:	f890 2203 	ldrb.w	r2, [r0, #515]	; 0x203
   1596c:	eb02 2202 	add.w	r2, r2, r2, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   15970:	2404      	movs	r4, #4
   15972:	5c83      	ldrb	r3, [r0, r2]
   15974:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
   15978:	9c04      	ldr	r4, [sp, #16]
   1597a:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   1597e:	f364 1386 	bfi	r3, r4, #6, #1
	pdu->rx_addr = 0;
   15982:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   15986:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
   15988:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
   1598a:	784b      	ldrb	r3, [r1, #1]
   1598c:	b90b      	cbnz	r3, 15992 <ll_ext_adv_params_set+0x3ae>
		pdu->len = BDADDR_SIZE;
   1598e:	2306      	movs	r3, #6
   15990:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
   15992:	4650      	mov	r0, sl
   15994:	b00d      	add	sp, #52	; 0x34
   15996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ptr = (u8_t *)h + sizeof(*h);
   1599a:	462b      	mov	r3, r5
   1599c:	e739      	b.n	15812 <ll_ext_adv_params_set+0x22e>
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
   1599e:	4632      	mov	r2, r6
   159a0:	e762      	b.n	15868 <ll_ext_adv_params_set+0x284>
			_tx_pwr = 0;
   159a2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   159a4:	e7db      	b.n	1595e <ll_ext_adv_params_set+0x37a>
	} else if (pdu->len == 0) {
   159a6:	7863      	ldrb	r3, [r4, #1]
   159a8:	2b00      	cmp	r3, #0
   159aa:	d1db      	bne.n	15964 <ll_ext_adv_params_set+0x380>
		pdu->len = BDADDR_SIZE;
   159ac:	2306      	movs	r3, #6
   159ae:	e6ea      	b.n	15786 <ll_ext_adv_params_set+0x1a2>
		return BT_HCI_ERR_CMD_DISALLOWED;
   159b0:	f04f 0a0c 	mov.w	sl, #12
   159b4:	e7ed      	b.n	15992 <ll_ext_adv_params_set+0x3ae>
				return 0x12; /* invalid HCI cmd param */
   159b6:	f04f 0a12 	mov.w	sl, #18
   159ba:	e7ea      	b.n	15992 <ll_ext_adv_params_set+0x3ae>
   159bc:	20002714 	.word	0x20002714
   159c0:	20002724 	.word	0x20002724

000159c4 <ll_adv_data_set>:


void ll_adv_data_set(u8_t len, u8_t const *const data)
{
   159c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   159c8:	4688      	mov	r8, r1
   159ca:	4606      	mov	r6, r0
	struct pdu_adv *pdu;
	u8_t last;


	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   159cc:	f7fe f8c2 	bl	13b54 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   159d0:	f890 5203 	ldrb.w	r5, [r0, #515]	; 0x203
   159d4:	eb05 2205 	add.w	r2, r5, r5, lsl #8
	radio_adv_data = radio_adv_data_get();
   159d8:	4604      	mov	r4, r0
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
   159da:	f810 e002 	ldrb.w	lr, [r0, r2]
   159de:	f00e 030f 	and.w	r3, lr, #15
   159e2:	2b07      	cmp	r3, #7
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   159e4:	eb00 0102 	add.w	r1, r0, r2
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
   159e8:	d118      	bne.n	15a1c <ll_adv_data_set+0x58>
	//	struct radio_ext_adv_data *radio_aux_adv_data;
		struct radio_adv_data *radio_aux_adv_data;
		struct pdu_adv *aux_pdu;
		u8_t last;

		radio_aux_adv_data = radio_aux_adv_data_get();					//testing
   159ea:	f7fe f8b7 	bl	13b5c <radio_aux_adv_data_get>
	//	radio_aux_adv_data = radio_chain_adv_data_get();
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
   159ee:	f890 5203 	ldrb.w	r5, [r0, #515]	; 0x203
	
		memcpy(set_data_ptr, data, len);
   159f2:	4b29      	ldr	r3, [pc, #164]	; (15a98 <ll_adv_data_set+0xd4>)
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
   159f4:	eb05 2505 	add.w	r5, r5, r5, lsl #8
		memcpy(set_data_ptr, data, len);
   159f8:	4632      	mov	r2, r6
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
   159fa:	4405      	add	r5, r0
		memcpy(set_data_ptr, data, len);
   159fc:	4641      	mov	r1, r8
   159fe:	6818      	ldr	r0, [r3, #0]
   15a00:	f7ea ff73 	bl	8ea <memcpy>
		aux_pdu->len = aux_ptr_len + len;
   15a04:	4b25      	ldr	r3, [pc, #148]	; (15a9c <ll_adv_data_set+0xd8>)
   15a06:	781b      	ldrb	r3, [r3, #0]
   15a08:	441e      	add	r6, r3
		radio_adv_data->last = last;
   15a0a:	2300      	movs	r3, #0
		aux_pdu->len = aux_ptr_len + len;
   15a0c:	706e      	strb	r6, [r5, #1]
		radio_adv_data->last = last;
   15a0e:	f884 3203 	strb.w	r3, [r4, #515]	; 0x203
		ll_adv.aux_chain_count = 1; 	// fragment count which should come from host
   15a12:	4b23      	ldr	r3, [pc, #140]	; (15aa0 <ll_adv_data_set+0xdc>)
   15a14:	2201      	movs	r2, #1
   15a16:	735a      	strb	r2, [r3, #13]
   15a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}else{
		if ((prev->type == PDU_ADV_TYPE_DIRECT_IND)) {
   15a1c:	2b01      	cmp	r3, #1
   15a1e:	d039      	beq.n	15a94 <ll_adv_data_set+0xd0>
		
		return;
		}

		/* use the last index in double buffer, */
		if (radio_adv_data->first == radio_adv_data->last) {
   15a20:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
   15a24:	42ab      	cmp	r3, r5
   15a26:	d104      	bne.n	15a32 <ll_adv_data_set+0x6e>
			last = radio_adv_data->last + 1;
   15a28:	3501      	adds	r5, #1
   15a2a:	b2ed      	uxtb	r5, r5
			if (last == DOUBLE_BUFFER_SIZE) {
				last = 0;
   15a2c:	2d02      	cmp	r5, #2
   15a2e:	bf08      	it	eq
   15a30:	2500      	moveq	r5, #0
		} else {
			last = radio_adv_data->last;
		}

		/* update adv pdu fields. */
		pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   15a32:	eb05 2305 	add.w	r3, r5, r5, lsl #8
   15a36:	18e7      	adds	r7, r4, r3
		pdu->type = prev->type;
   15a38:	5ce0      	ldrb	r0, [r4, r3]
   15a3a:	f36e 0003 	bfi	r0, lr, #0, #4
		pdu->rfu = 0;
   15a3e:	f36f 1004 	bfc	r0, #4, #1
   15a42:	54e0      	strb	r0, [r4, r3]

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			pdu->chan_sel = prev->chan_sel;
   15a44:	5ca0      	ldrb	r0, [r4, r2]
   15a46:	f814 e003 	ldrb.w	lr, [r4, r3]
   15a4a:	f3c0 1040 	ubfx	r0, r0, #5, #1
   15a4e:	f360 1e45 	bfi	lr, r0, #5, #1
   15a52:	f804 e003 	strb.w	lr, [r4, r3]
		} else {
			pdu->chan_sel = 0;
		}

		pdu->tx_addr = prev->tx_addr;
   15a56:	5ca0      	ldrb	r0, [r4, r2]
   15a58:	fa5f fe8e 	uxtb.w	lr, lr
   15a5c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   15a60:	f360 1e86 	bfi	lr, r0, #6, #1
   15a64:	f804 e003 	strb.w	lr, [r4, r3]
		pdu->rx_addr = prev->rx_addr;
   15a68:	5ca2      	ldrb	r2, [r4, r2]
   15a6a:	fa5f f08e 	uxtb.w	r0, lr
   15a6e:	09d2      	lsrs	r2, r2, #7
   15a70:	f362 10c7 	bfi	r0, r2, #7, #1
   15a74:	54e0      	strb	r0, [r4, r3]
		
		
		memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   15a76:	2206      	movs	r2, #6
   15a78:	3102      	adds	r1, #2
   15a7a:	1cb8      	adds	r0, r7, #2
   15a7c:	f7ea ff35 	bl	8ea <memcpy>
		memcpy(&pdu->adv_ind.data[0], data, len);
   15a80:	4632      	mov	r2, r6
   15a82:	4641      	mov	r1, r8
   15a84:	f107 0008 	add.w	r0, r7, #8
		pdu->len = BDADDR_SIZE + len;
   15a88:	3606      	adds	r6, #6
		memcpy(&pdu->adv_ind.data[0], data, len);
   15a8a:	f7ea ff2e 	bl	8ea <memcpy>
		pdu->len = BDADDR_SIZE + len;
   15a8e:	707e      	strb	r6, [r7, #1]
		
		/* commit the update so controller picks it. */
		radio_adv_data->last = last;
   15a90:	f884 5203 	strb.w	r5, [r4, #515]	; 0x203
   15a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15a98:	20002724 	.word	0x20002724
   15a9c:	20002714 	.word	0x20002714
   15aa0:	20002716 	.word	0x20002716

00015aa4 <ll_ext_adv_data_set>:
#endif


u8_t temp_buffer[270];
void ll_ext_adv_data_set(u8_t len, u8_t const *const data, u8_t operation, u8_t frag_pref)
{
   15aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15aa8:	4689      	mov	r9, r1
   15aaa:	4617      	mov	r7, r2
   15aac:	4680      	mov	r8, r0
	struct pdu_adv *pdu;
	u8_t last;


	
	radio_adv_data = radio_adv_data_get();
   15aae:	f7fe f851 	bl	13b54 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   15ab2:	f890 4203 	ldrb.w	r4, [r0, #515]	; 0x203
   15ab6:	eb04 2204 	add.w	r2, r4, r4, lsl #8
	radio_adv_data = radio_adv_data_get();
   15aba:	4605      	mov	r5, r0
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
   15abc:	f810 e002 	ldrb.w	lr, [r0, r2]
   15ac0:	f00e 030f 	and.w	r3, lr, #15
   15ac4:	2b07      	cmp	r3, #7
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   15ac6:	eb00 0102 	add.w	r1, r0, r2
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
   15aca:	f040 80db 	bne.w	15c84 <ll_ext_adv_data_set+0x1e0>
		struct pdu_adv *aux_pdu;
		struct pdu_adv *copy_pdu;
		u8_t last;
		u8_t length;

		radio_aux_adv_data = radio_aux_adv_data_get();					//testing
   15ace:	f7fe f845 	bl	13b5c <radio_aux_adv_data_get>
   15ad2:	4604      	mov	r4, r0
		radio_chain_adv_data = radio_chain_adv_data_get();
   15ad4:	f7fe f846 	bl	13b64 <radio_chain_adv_data_get>
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
   15ad8:	f894 3203 	ldrb.w	r3, [r4, #515]	; 0x203
   15adc:	eb03 2303 	add.w	r3, r3, r3, lsl #8
   15ae0:	441c      	add	r4, r3

		memcpy(set_data_ptr, data, len);
   15ae2:	4b86      	ldr	r3, [pc, #536]	; (15cfc <ll_ext_adv_data_set+0x258>)
   15ae4:	4649      	mov	r1, r9
   15ae6:	4642      	mov	r2, r8
		radio_chain_adv_data = radio_chain_adv_data_get();
   15ae8:	4606      	mov	r6, r0
		memcpy(set_data_ptr, data, len);
   15aea:	6818      	ldr	r0, [r3, #0]
   15aec:	f7ea fefd 	bl	8ea <memcpy>
		length = len;
		aux_pdu->len = aux_ptr_len + len;
   15af0:	4b83      	ldr	r3, [pc, #524]	; (15d00 <ll_ext_adv_data_set+0x25c>)
   15af2:	781a      	ldrb	r2, [r3, #0]
   15af4:	4442      	add	r2, r8
		radio_adv_data->last = last;
   15af6:	2300      	movs	r3, #0
		aux_pdu->len = aux_ptr_len + len;
   15af8:	b2d2      	uxtb	r2, r2
   15afa:	7062      	strb	r2, [r4, #1]
		radio_adv_data->last = last;
   15afc:	f885 3203 	strb.w	r3, [r5, #515]	; 0x203
			memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); // 2 is for the header of the PDU
			pointer_offset = 257;
			ll_adv.aux_chain_count = 1;
		}
*/		
		if(aux_h->adv_addr){
   15b00:	78e3      	ldrb	r3, [r4, #3]
   15b02:	07d9      	lsls	r1, r3, #31
			aux_ptr += BDADDR_SIZE;
   15b04:	bf4c      	ite	mi
   15b06:	f104 000a 	addmi.w	r0, r4, #10
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
   15b0a:	1d20      	addpl	r0, r4, #4
		}
		if(aux_h->tgt_addr){
   15b0c:	079d      	lsls	r5, r3, #30
			aux_ptr += BDADDR_SIZE;
   15b0e:	bf48      	it	mi
   15b10:	3006      	addmi	r0, #6
		}
		if(aux_h->adi){
   15b12:	0719      	lsls	r1, r3, #28
   15b14:	d509      	bpl.n	15b2a <ll_ext_adv_data_set+0x86>
			aux_adi_ptr = aux_ptr;
			aux_adi_ptr->did = 0x00;
   15b16:	2100      	movs	r1, #0
   15b18:	7001      	strb	r1, [r0, #0]
   15b1a:	7841      	ldrb	r1, [r0, #1]
			aux_adi_ptr->sid = 0x04;//sid & 0x0f;
   15b1c:	2504      	movs	r5, #4
   15b1e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
   15b22:	f365 1107 	bfi	r1, r5, #4, #4
   15b26:	7041      	strb	r1, [r0, #1]
			aux_ptr += sizeof(*aux_adi_ptr);
   15b28:	3002      	adds	r0, #2
		}

		switch (operation){
   15b2a:	2f03      	cmp	r7, #3
   15b2c:	f200 80e3 	bhi.w	15cf6 <ll_ext_adv_data_set+0x252>
   15b30:	e8df f007 	tbb	[pc, r7]
   15b34:	805d022e 	.word	0x805d022e
			case 1:  //First fragment 
					
				if(!aux_h->aux_ptr){
   15b38:	f013 0310 	ands.w	r3, r3, #16
   15b3c:	d11a      	bne.n	15b74 <ll_ext_adv_data_set+0xd0>
					aux_ap = aux_ptr;
					aux_ap->chan_idx = 0x03;
   15b3e:	7801      	ldrb	r1, [r0, #0]
					aux_ap->ca = 0;	
					aux_ap->offs_units = 0;
					aux_ap->offs = 00;
   15b40:	7043      	strb	r3, [r0, #1]
					aux_ap->chan_idx = 0x03;
   15b42:	2503      	movs	r5, #3
   15b44:	f365 0105 	bfi	r1, r5, #0, #6
					aux_ap->offs_units = 0;
   15b48:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   15b4c:	f363 11c7 	bfi	r1, r3, #7, #1
   15b50:	7001      	strb	r1, [r0, #0]
					aux_ap->offs = 00;
   15b52:	7881      	ldrb	r1, [r0, #2]
					aux_ap->phy = 0;
   15b54:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
   15b58:	f363 1147 	bfi	r1, r3, #5, #3

					aux_h->aux_ptr = 1;
   15b5c:	78e3      	ldrb	r3, [r4, #3]
					aux_ap->phy = 0;
   15b5e:	7081      	strb	r1, [r0, #2]
					aux_h->aux_ptr = 1;
   15b60:	f043 0310 	orr.w	r3, r3, #16
   15b64:	70e3      	strb	r3, [r4, #3]
					aux_p->ext_hdr_len = aux_p->ext_hdr_len + 3;
   15b66:	78a3      	ldrb	r3, [r4, #2]
   15b68:	f3c3 0105 	ubfx	r1, r3, #0, #6
   15b6c:	4429      	add	r1, r5
   15b6e:	f361 0305 	bfi	r3, r1, #0, #6
   15b72:	70a3      	strb	r3, [r4, #2]
				//	memset(aux_ptr, 0 , 3);
				}

				copy_pdu =  (struct pdu_adv *)&radio_chain_adv_data->data[0];
				memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); // 2 is for the header of the PDU
   15b74:	3202      	adds	r2, #2
   15b76:	4621      	mov	r1, r4
   15b78:	4630      	mov	r0, r6
					memcpy(aux_ptr , (aux_ptr+3) ,length_d);
					aux_pdu->len = aux_pdu->len - 3;
				}

				memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); // 2 is for the header of the PDU
				memcpy(temp_buffer, aux_pdu, aux_pdu->len + 2);
   15b7a:	f7ea feb6 	bl	8ea <memcpy>
				pointer_offset = 257;
   15b7e:	4b61      	ldr	r3, [pc, #388]	; (15d04 <ll_ext_adv_data_set+0x260>)
   15b80:	f240 1201 	movw	r2, #257	; 0x101
   15b84:	801a      	strh	r2, [r3, #0]
				ll_adv.aux_chain_count = 1;
   15b86:	4b60      	ldr	r3, [pc, #384]	; (15d08 <ll_ext_adv_data_set+0x264>)
   15b88:	2201      	movs	r2, #1
   15b8a:	735a      	strb	r2, [r3, #13]
				break;
   15b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if(!aux_h->aux_ptr){
   15b90:	f013 0310 	ands.w	r3, r3, #16
   15b94:	d11a      	bne.n	15bcc <ll_ext_adv_data_set+0x128>
					aux_ap->chan_idx = 0x03;
   15b96:	7801      	ldrb	r1, [r0, #0]
					aux_ap->offs = 00;
   15b98:	7043      	strb	r3, [r0, #1]
					aux_ap->chan_idx = 0x03;
   15b9a:	2503      	movs	r5, #3
   15b9c:	f365 0105 	bfi	r1, r5, #0, #6
					aux_ap->offs_units = 0;
   15ba0:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   15ba4:	f363 11c7 	bfi	r1, r3, #7, #1
   15ba8:	7001      	strb	r1, [r0, #0]
					aux_ap->offs = 00;
   15baa:	7881      	ldrb	r1, [r0, #2]
					aux_ap->phy = 0;
   15bac:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
   15bb0:	f363 1147 	bfi	r1, r3, #5, #3
					aux_h->aux_ptr = 1;
   15bb4:	78e3      	ldrb	r3, [r4, #3]
					aux_ap->phy = 0;
   15bb6:	7081      	strb	r1, [r0, #2]
					aux_h->aux_ptr = 1;
   15bb8:	f043 0310 	orr.w	r3, r3, #16
   15bbc:	70e3      	strb	r3, [r4, #3]
					aux_p->ext_hdr_len = aux_p->ext_hdr_len + 3;
   15bbe:	78a3      	ldrb	r3, [r4, #2]
   15bc0:	f3c3 0105 	ubfx	r1, r3, #0, #6
   15bc4:	4429      	add	r1, r5
   15bc6:	f361 0305 	bfi	r3, r1, #0, #6
   15bca:	70a3      	strb	r3, [r4, #2]
				copy_pdu =  (struct pdu_adv *)&radio_chain_adv_data->data[pointer_offset];
   15bcc:	4d4d      	ldr	r5, [pc, #308]	; (15d04 <ll_ext_adv_data_set+0x260>)
   15bce:	8828      	ldrh	r0, [r5, #0]
				memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); 
   15bd0:	3202      	adds	r2, #2
   15bd2:	4621      	mov	r1, r4
   15bd4:	4430      	add	r0, r6
   15bd6:	f7ea fe88 	bl	8ea <memcpy>
				pointer_offset += 257;
   15bda:	882b      	ldrh	r3, [r5, #0]
   15bdc:	f203 1301 	addw	r3, r3, #257	; 0x101
				ll_adv.aux_chain_count++;
   15be0:	4a49      	ldr	r2, [pc, #292]	; (15d08 <ll_ext_adv_data_set+0x264>)
				pointer_offset = 257;
   15be2:	802b      	strh	r3, [r5, #0]
				ll_adv.aux_chain_count++;
   15be4:	7b53      	ldrb	r3, [r2, #13]
   15be6:	3301      	adds	r3, #1
   15be8:	7353      	strb	r3, [r2, #13]
				break;
   15bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				copy_pdu =  (struct pdu_adv *)&radio_chain_adv_data->data[pointer_offset];
   15bee:	4d45      	ldr	r5, [pc, #276]	; (15d04 <ll_ext_adv_data_set+0x260>)
   15bf0:	8829      	ldrh	r1, [r5, #0]
				if(aux_h->aux_ptr){
   15bf2:	06db      	lsls	r3, r3, #27
				copy_pdu =  (struct pdu_adv *)&radio_chain_adv_data->data[pointer_offset];
   15bf4:	440e      	add	r6, r1
				if(aux_h->aux_ptr){
   15bf6:	d514      	bpl.n	15c22 <ll_ext_adv_data_set+0x17e>
					int length_d = (aux_pdu->len - aux_p->ext_hdr_len);
   15bf8:	78a3      	ldrb	r3, [r4, #2]
   15bfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
					memcpy(aux_ptr , (aux_ptr+3) ,length_d);
   15bfe:	1ad2      	subs	r2, r2, r3
   15c00:	1cc1      	adds	r1, r0, #3
   15c02:	f7ea fe72 	bl	8ea <memcpy>
					aux_h->aux_ptr = 0;
   15c06:	78e3      	ldrb	r3, [r4, #3]
   15c08:	f36f 1304 	bfc	r3, #4, #1
   15c0c:	70e3      	strb	r3, [r4, #3]
					aux_p->ext_hdr_len = aux_p->ext_hdr_len - 3;
   15c0e:	78a3      	ldrb	r3, [r4, #2]
   15c10:	f3c3 0205 	ubfx	r2, r3, #0, #6
   15c14:	3a03      	subs	r2, #3
   15c16:	f362 0305 	bfi	r3, r2, #0, #6
   15c1a:	70a3      	strb	r3, [r4, #2]
					aux_pdu->len = aux_pdu->len - 3;
   15c1c:	7863      	ldrb	r3, [r4, #1]
   15c1e:	3b03      	subs	r3, #3
   15c20:	7063      	strb	r3, [r4, #1]
				memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); 
   15c22:	7862      	ldrb	r2, [r4, #1]
   15c24:	4621      	mov	r1, r4
   15c26:	3202      	adds	r2, #2
   15c28:	4630      	mov	r0, r6
   15c2a:	f7ea fe5e 	bl	8ea <memcpy>
				pointer_offset = 257;
   15c2e:	f240 1301 	movw	r3, #257	; 0x101
   15c32:	e7d5      	b.n	15be0 <ll_ext_adv_data_set+0x13c>
				if(aux_h->aux_ptr){
   15c34:	f013 0f10 	tst.w	r3, #16
   15c38:	78a3      	ldrb	r3, [r4, #2]
					int length_d = (aux_pdu->len - aux_p->ext_hdr_len);
   15c3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15c3e:	f100 0103 	add.w	r1, r0, #3
					memcpy(aux_ptr , (aux_ptr+3) ,length_d);
   15c42:	eba2 0203 	sub.w	r2, r2, r3
				if(aux_h->aux_ptr){
   15c46:	d01a      	beq.n	15c7e <ll_ext_adv_data_set+0x1da>
					memcpy(aux_ptr , (aux_ptr+3) ,length_d);
   15c48:	f7ea fe4f 	bl	8ea <memcpy>
					aux_h->aux_ptr = 0;
   15c4c:	78e3      	ldrb	r3, [r4, #3]
   15c4e:	f36f 1304 	bfc	r3, #4, #1
   15c52:	70e3      	strb	r3, [r4, #3]
					aux_p->ext_hdr_len = aux_p->ext_hdr_len - 3;
   15c54:	78a3      	ldrb	r3, [r4, #2]
   15c56:	f3c3 0205 	ubfx	r2, r3, #0, #6
   15c5a:	3a03      	subs	r2, #3
   15c5c:	f362 0305 	bfi	r3, r2, #0, #6
   15c60:	70a3      	strb	r3, [r4, #2]
					aux_pdu->len = aux_pdu->len - 3;
   15c62:	7863      	ldrb	r3, [r4, #1]
   15c64:	3b03      	subs	r3, #3
   15c66:	7063      	strb	r3, [r4, #1]
				memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); // 2 is for the header of the PDU
   15c68:	7862      	ldrb	r2, [r4, #1]
   15c6a:	4621      	mov	r1, r4
   15c6c:	3202      	adds	r2, #2
   15c6e:	4630      	mov	r0, r6
   15c70:	f7ea fe3b 	bl	8ea <memcpy>
				memcpy(temp_buffer, aux_pdu, aux_pdu->len + 2);
   15c74:	7862      	ldrb	r2, [r4, #1]
   15c76:	4825      	ldr	r0, [pc, #148]	; (15d0c <ll_ext_adv_data_set+0x268>)
   15c78:	3202      	adds	r2, #2
   15c7a:	4621      	mov	r1, r4
   15c7c:	e77d      	b.n	15b7a <ll_ext_adv_data_set+0xd6>
					memcpy(aux_ptr , (aux_ptr+3) ,length_d);
   15c7e:	f7ea fe34 	bl	8ea <memcpy>
   15c82:	e7ee      	b.n	15c62 <ll_ext_adv_data_set+0x1be>
		}

	}else{
		if ((prev->type == PDU_ADV_TYPE_DIRECT_IND)) {
   15c84:	2b01      	cmp	r3, #1
   15c86:	d036      	beq.n	15cf6 <ll_ext_adv_data_set+0x252>
		
		return;
		}

		/* use the last index in double buffer, */
		if (radio_adv_data->first == radio_adv_data->last) {
   15c88:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
   15c8c:	42a3      	cmp	r3, r4
   15c8e:	d104      	bne.n	15c9a <ll_ext_adv_data_set+0x1f6>
			last = radio_adv_data->last + 1;
   15c90:	3401      	adds	r4, #1
   15c92:	b2e4      	uxtb	r4, r4
			if (last == DOUBLE_BUFFER_SIZE) {
				last = 0;
   15c94:	2c02      	cmp	r4, #2
   15c96:	bf08      	it	eq
   15c98:	2400      	moveq	r4, #0
		} else {
			last = radio_adv_data->last;
		}

		/* update adv pdu fields. */
		pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   15c9a:	eb04 2304 	add.w	r3, r4, r4, lsl #8
   15c9e:	18ee      	adds	r6, r5, r3
		pdu->type = prev->type;
   15ca0:	5ce8      	ldrb	r0, [r5, r3]
   15ca2:	f36e 0003 	bfi	r0, lr, #0, #4
		pdu->rfu = 0;
   15ca6:	f36f 1004 	bfc	r0, #4, #1
   15caa:	54e8      	strb	r0, [r5, r3]

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			pdu->chan_sel = prev->chan_sel;
   15cac:	5ca8      	ldrb	r0, [r5, r2]
   15cae:	5cef      	ldrb	r7, [r5, r3]
   15cb0:	f3c0 1040 	ubfx	r0, r0, #5, #1
   15cb4:	f360 1745 	bfi	r7, r0, #5, #1
   15cb8:	54ef      	strb	r7, [r5, r3]
		} else {
			pdu->chan_sel = 0;
		}

		pdu->tx_addr = prev->tx_addr;
   15cba:	5ca8      	ldrb	r0, [r5, r2]
   15cbc:	b2ff      	uxtb	r7, r7
   15cbe:	f3c0 1080 	ubfx	r0, r0, #6, #1
   15cc2:	f360 1786 	bfi	r7, r0, #6, #1
   15cc6:	54ef      	strb	r7, [r5, r3]
		pdu->rx_addr = prev->rx_addr;
   15cc8:	5caa      	ldrb	r2, [r5, r2]
   15cca:	b2f8      	uxtb	r0, r7
   15ccc:	09d2      	lsrs	r2, r2, #7
   15cce:	f362 10c7 	bfi	r0, r2, #7, #1
   15cd2:	54e8      	strb	r0, [r5, r3]
		
		
		memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   15cd4:	2206      	movs	r2, #6
   15cd6:	3102      	adds	r1, #2
   15cd8:	1cb0      	adds	r0, r6, #2
   15cda:	f7ea fe06 	bl	8ea <memcpy>
		memcpy(&pdu->adv_ind.data[0], data, len);
   15cde:	4642      	mov	r2, r8
   15ce0:	4649      	mov	r1, r9
   15ce2:	f106 0008 	add.w	r0, r6, #8
		pdu->len = BDADDR_SIZE + len;
   15ce6:	f108 0806 	add.w	r8, r8, #6
		memcpy(&pdu->adv_ind.data[0], data, len);
   15cea:	f7ea fdfe 	bl	8ea <memcpy>
		pdu->len = BDADDR_SIZE + len;
   15cee:	f886 8001 	strb.w	r8, [r6, #1]
		
		/* commit the update so controller picks it. */
		radio_adv_data->last = last;
   15cf2:	f885 4203 	strb.w	r4, [r5, #515]	; 0x203
   15cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15cfa:	bf00      	nop
   15cfc:	20002724 	.word	0x20002724
   15d00:	20002714 	.word	0x20002714
   15d04:	2000e108 	.word	0x2000e108
   15d08:	20002716 	.word	0x20002716
   15d0c:	20004a5d 	.word	0x20004a5d

00015d10 <ll_scan_data_set>:
}



void ll_scan_data_set(u8_t len, u8_t const *const data)
{
   15d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15d14:	4606      	mov	r6, r0
   15d16:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   15d18:	f7fd ff28 	bl	13b6c <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
   15d1c:	f890 3203 	ldrb.w	r3, [r0, #515]	; 0x203
   15d20:	f890 2202 	ldrb.w	r2, [r0, #514]	; 0x202
   15d24:	429a      	cmp	r2, r3
	radio_scan_data = radio_scan_data_get();
   15d26:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
   15d28:	d131      	bne.n	15d8e <ll_scan_data_set+0x7e>
		last = radio_scan_data->last + 1;
   15d2a:	1c5d      	adds	r5, r3, #1
   15d2c:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   15d2e:	2d02      	cmp	r5, #2
			last = 0;
   15d30:	bf08      	it	eq
   15d32:	2500      	moveq	r5, #0
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   15d34:	eb05 2205 	add.w	r2, r5, r5, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   15d38:	f04f 0e04 	mov.w	lr, #4
   15d3c:	5ca0      	ldrb	r0, [r4, r2]
   15d3e:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
   15d42:	f000 00ef 	and.w	r0, r0, #239	; 0xef
   15d46:	f36f 1045 	bfc	r0, #5, #1
   15d4a:	54a0      	strb	r0, [r4, r2]
	prev = (struct pdu_adv *)
   15d4c:	eb03 2303 	add.w	r3, r3, r3, lsl #8
   15d50:	18e1      	adds	r1, r4, r3
	pdu->tx_addr = prev->tx_addr;
   15d52:	5ce0      	ldrb	r0, [r4, r3]
   15d54:	5ca3      	ldrb	r3, [r4, r2]
   15d56:	f3c0 1080 	ubfx	r0, r0, #6, #1
   15d5a:	f360 1386 	bfi	r3, r0, #6, #1
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   15d5e:	eb04 0802 	add.w	r8, r4, r2
	pdu->rx_addr = 0;
   15d62:	f36f 13c7 	bfc	r3, #7, #1
   15d66:	54a3      	strb	r3, [r4, r2]
	pdu->len = BDADDR_SIZE + len;
   15d68:	1db3      	adds	r3, r6, #6
   15d6a:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   15d6e:	2206      	movs	r2, #6
   15d70:	3102      	adds	r1, #2
   15d72:	f108 0002 	add.w	r0, r8, #2
   15d76:	f7ea fdb8 	bl	8ea <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   15d7a:	4632      	mov	r2, r6
   15d7c:	4639      	mov	r1, r7
   15d7e:	f108 0008 	add.w	r0, r8, #8
   15d82:	f7ea fdb2 	bl	8ea <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   15d86:	f884 5203 	strb.w	r5, [r4, #515]	; 0x203
   15d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15d8e:	461d      	mov	r5, r3
   15d90:	e7d0      	b.n	15d34 <ll_scan_data_set+0x24>
	...

00015d94 <ll_adv_enable>:
}


u32_t ll_adv_enable(u8_t enable)
{
   15d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
   15d98:	b918      	cbnz	r0, 15da2 <ll_adv_enable+0xe>
	}
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);

	return status;
}
   15d9a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return radio_adv_disable();
   15d9e:	f7ff b8ef 	b.w	14f80 <radio_adv_disable>
	} else if (ll_adv_is_enabled()) {
   15da2:	f7fd fee7 	bl	13b74 <ll_adv_is_enabled>
   15da6:	4681      	mov	r9, r0
   15da8:	2800      	cmp	r0, #0
   15daa:	d150      	bne.n	15e4e <ll_adv_enable+0xba>
	radio_adv_data = radio_adv_data_get();
   15dac:	f7fd fed2 	bl	13b54 <radio_adv_data_get>
   15db0:	4607      	mov	r7, r0
	radio_scan_data = radio_scan_data_get();
   15db2:	f7fd fedb 	bl	13b6c <radio_scan_data_get>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   15db6:	f890 3203 	ldrb.w	r3, [r0, #515]	; 0x203
		ll_filters_adv_update(ll_adv.filter_policy);
   15dba:	4c26      	ldr	r4, [pc, #152]	; (15e54 <ll_adv_enable+0xc0>)
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   15dbc:	f897 5203 	ldrb.w	r5, [r7, #515]	; 0x203
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   15dc0:	eb03 2303 	add.w	r3, r3, r3, lsl #8
   15dc4:	18c6      	adds	r6, r0, r3
		ll_filters_adv_update(ll_adv.filter_policy);
   15dc6:	7820      	ldrb	r0, [r4, #0]
   15dc8:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   15dcc:	f000 faee 	bl	163ac <ll_filters_adv_update>
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   15dd0:	7820      	ldrb	r0, [r4, #0]
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   15dd2:	eb05 2505 	add.w	r5, r5, r5, lsl #8
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   15dd6:	f010 0a40 	ands.w	sl, r0, #64	; 0x40
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   15dda:	eb07 0805 	add.w	r8, r7, r5
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   15dde:	d01d      	beq.n	15e1c <ll_adv_enable+0x88>
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   15de0:	464a      	mov	r2, r9
   15de2:	1ca1      	adds	r1, r4, #2
   15de4:	09c0      	lsrs	r0, r0, #7
   15de6:	f000 fb0d 	bl	16404 <ll_rl_find>
			if (rl_idx != FILTER_IDX_NONE) {
   15dea:	28ff      	cmp	r0, #255	; 0xff
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   15dec:	4605      	mov	r5, r0
			if (rl_idx != FILTER_IDX_NONE) {
   15dee:	d002      	beq.n	15df6 <ll_adv_enable+0x62>
				ll_rl_rpa_update(false);
   15df0:	4648      	mov	r0, r9
   15df2:	f000 fc8b 	bl	1670c <ll_rl_rpa_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
   15df6:	4641      	mov	r1, r8
   15df8:	4628      	mov	r0, r5
   15dfa:	f000 fc31 	bl	16660 <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
   15dfe:	4631      	mov	r1, r6
   15e00:	4628      	mov	r0, r5
   15e02:	f000 fc2d 	bl	16660 <ll_rl_pdu_adv_update>
				  ll_adv.filter_policy, rl_idx);
   15e06:	7821      	ldrb	r1, [r4, #0]
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
   15e08:	8960      	ldrh	r0, [r4, #10]
   15e0a:	462b      	mov	r3, r5
   15e0c:	f3c1 02c1 	ubfx	r2, r1, #3, #2
}
   15e10:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
   15e14:	f001 0107 	and.w	r1, r1, #7
   15e18:	f7fe bc46 	b.w	146a8 <radio_adv_enable>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   15e1c:	5d78      	ldrb	r0, [r7, r5]
   15e1e:	4651      	mov	r1, sl
   15e20:	f3c0 1080 	ubfx	r0, r0, #6, #1
   15e24:	f7f5 fdea 	bl	b9fc <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
   15e28:	2206      	movs	r2, #6
   15e2a:	4601      	mov	r1, r0
   15e2c:	f108 0002 	add.w	r0, r8, #2
   15e30:	f7ea fd5b 	bl	8ea <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   15e34:	5d78      	ldrb	r0, [r7, r5]
   15e36:	4651      	mov	r1, sl
   15e38:	f3c0 1080 	ubfx	r0, r0, #6, #1
   15e3c:	f7f5 fdde 	bl	b9fc <ll_addr_get>
			memcpy(&pdu_scan->scan_rsp.addr[0],
   15e40:	2206      	movs	r2, #6
   15e42:	4601      	mov	r1, r0
   15e44:	1cb0      	adds	r0, r6, #2
   15e46:	f7ea fd50 	bl	8ea <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
   15e4a:	25ff      	movs	r5, #255	; 0xff
   15e4c:	e7db      	b.n	15e06 <ll_adv_enable+0x72>
}
   15e4e:	2000      	movs	r0, #0
   15e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15e54:	20002716 	.word	0x20002716

00015e58 <ll_ext_adv_enable>:



u32_t ll_ext_adv_enable(u8_t enable)
{
   15e58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
//	struct pdu_adv *aux_pdu_adv;
	u32_t status;

	if (!enable) {
   15e5c:	b920      	cbnz	r0, 15e68 <ll_ext_adv_enable+0x10>
	status = radio_ext_adv_enable(ll_adv.phy_p, ll_adv.interval,
				  ll_adv.chan_map, ll_adv.filter_policy,
				  rl_idx, ll_adv.max_skip, ll_adv.aux_chain_count);

	return status;
}
   15e5e:	b004      	add	sp, #16
   15e60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return radio_adv_disable();
   15e64:	f7ff b88c 	b.w	14f80 <radio_adv_disable>
	} else if (ll_adv_is_enabled()) {
   15e68:	f7fd fe84 	bl	13b74 <ll_adv_is_enabled>
   15e6c:	4681      	mov	r9, r0
   15e6e:	2800      	cmp	r0, #0
   15e70:	d155      	bne.n	15f1e <ll_ext_adv_enable+0xc6>
	radio_adv_data = radio_adv_data_get();
   15e72:	f7fd fe6f 	bl	13b54 <radio_adv_data_get>
   15e76:	4607      	mov	r7, r0
	radio_scan_data = radio_scan_data_get();
   15e78:	f7fd fe78 	bl	13b6c <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   15e7c:	f897 5203 	ldrb.w	r5, [r7, #515]	; 0x203
   15e80:	4c33      	ldr	r4, [pc, #204]	; (15f50 <ll_ext_adv_enable+0xf8>)
   15e82:	eb05 2505 	add.w	r5, r5, r5, lsl #8
   15e86:	eb07 0805 	add.w	r8, r7, r5
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   15e8a:	5d7b      	ldrb	r3, [r7, r5]
   15e8c:	f003 020f 	and.w	r2, r3, #15
   15e90:	2a07      	cmp	r2, #7
   15e92:	d110      	bne.n	15eb6 <ll_ext_adv_enable+0x5e>
		if (h->adv_addr) {
   15e94:	f898 2003 	ldrb.w	r2, [r8, #3]
   15e98:	07d2      	lsls	r2, r2, #31
   15e9a:	d50a      	bpl.n	15eb2 <ll_ext_adv_enable+0x5a>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
   15e9c:	4649      	mov	r1, r9
   15e9e:	f3c3 1080 	ubfx	r0, r3, #6, #1
   15ea2:	f7f5 fdab 	bl	b9fc <ll_addr_get>
   15ea6:	2206      	movs	r2, #6
   15ea8:	4601      	mov	r1, r0
   15eaa:	f108 0004 	add.w	r0, r8, #4
			memcpy(&pdu_scan->scan_rsp.addr[0],
   15eae:	f7ea fd1c 	bl	8ea <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
   15eb2:	25ff      	movs	r5, #255	; 0xff
   15eb4:	e020      	b.n	15ef8 <ll_ext_adv_enable+0xa0>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   15eb6:	f890 3203 	ldrb.w	r3, [r0, #515]	; 0x203
   15eba:	eb03 2303 	add.w	r3, r3, r3, lsl #8
   15ebe:	18c6      	adds	r6, r0, r3
		ll_filters_adv_update(ll_adv.filter_policy);
   15ec0:	7820      	ldrb	r0, [r4, #0]
   15ec2:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   15ec6:	f000 fa71 	bl	163ac <ll_filters_adv_update>
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   15eca:	7820      	ldrb	r0, [r4, #0]
   15ecc:	f010 0a40 	ands.w	sl, r0, #64	; 0x40
   15ed0:	d027      	beq.n	15f22 <ll_ext_adv_enable+0xca>
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   15ed2:	464a      	mov	r2, r9
   15ed4:	1ca1      	adds	r1, r4, #2
   15ed6:	09c0      	lsrs	r0, r0, #7
   15ed8:	f000 fa94 	bl	16404 <ll_rl_find>
			if (rl_idx != FILTER_IDX_NONE) {
   15edc:	28ff      	cmp	r0, #255	; 0xff
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   15ede:	4605      	mov	r5, r0
			if (rl_idx != FILTER_IDX_NONE) {
   15ee0:	d002      	beq.n	15ee8 <ll_ext_adv_enable+0x90>
				ll_rl_rpa_update(false);
   15ee2:	4648      	mov	r0, r9
   15ee4:	f000 fc12 	bl	1670c <ll_rl_rpa_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
   15ee8:	4641      	mov	r1, r8
   15eea:	4628      	mov	r0, r5
   15eec:	f000 fbb8 	bl	16660 <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
   15ef0:	4631      	mov	r1, r6
   15ef2:	4628      	mov	r0, r5
   15ef4:	f000 fbb4 	bl	16660 <ll_rl_pdu_adv_update>
				  ll_adv.chan_map, ll_adv.filter_policy,
   15ef8:	7822      	ldrb	r2, [r4, #0]
	status = radio_ext_adv_enable(ll_adv.phy_p, ll_adv.interval,
   15efa:	7b63      	ldrb	r3, [r4, #13]
   15efc:	7a20      	ldrb	r0, [r4, #8]
   15efe:	9302      	str	r3, [sp, #8]
   15f00:	7b23      	ldrb	r3, [r4, #12]
   15f02:	9301      	str	r3, [sp, #4]
   15f04:	8961      	ldrh	r1, [r4, #10]
   15f06:	9500      	str	r5, [sp, #0]
   15f08:	f3c2 03c1 	ubfx	r3, r2, #3, #2
   15f0c:	f000 0007 	and.w	r0, r0, #7
   15f10:	f002 0207 	and.w	r2, r2, #7
   15f14:	f7fe fd94 	bl	14a40 <radio_ext_adv_enable>
}
   15f18:	b004      	add	sp, #16
   15f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
   15f1e:	2000      	movs	r0, #0
   15f20:	e7fa      	b.n	15f18 <ll_ext_adv_enable+0xc0>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   15f22:	5d78      	ldrb	r0, [r7, r5]
   15f24:	4651      	mov	r1, sl
   15f26:	f3c0 1080 	ubfx	r0, r0, #6, #1
   15f2a:	f7f5 fd67 	bl	b9fc <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
   15f2e:	2206      	movs	r2, #6
   15f30:	4601      	mov	r1, r0
   15f32:	f108 0002 	add.w	r0, r8, #2
   15f36:	f7ea fcd8 	bl	8ea <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   15f3a:	5d78      	ldrb	r0, [r7, r5]
   15f3c:	4651      	mov	r1, sl
   15f3e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   15f42:	f7f5 fd5b 	bl	b9fc <ll_addr_get>
			memcpy(&pdu_scan->scan_rsp.addr[0],
   15f46:	2206      	movs	r2, #6
   15f48:	4601      	mov	r1, r0
   15f4a:	1cb0      	adds	r0, r6, #2
   15f4c:	e7af      	b.n	15eae <ll_ext_adv_enable+0x56>
   15f4e:	bf00      	nop
   15f50:	20002716 	.word	0x20002716

00015f54 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   15f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15f58:	4606      	mov	r6, r0
   15f5a:	4689      	mov	r9, r1
   15f5c:	4690      	mov	r8, r2
   15f5e:	461f      	mov	r7, r3
	if (ll_scan_is_enabled()) {
   15f60:	f7fd fe1e 	bl	13ba0 <ll_scan_is_enabled>
   15f64:	b9a0      	cbnz	r0, 15f90 <ll_scan_params_set+0x3c>
	 * 1001b - Ext. Coded active
	 */


	/* for ext adv 0010 type */
	ll_scan.type = type | 0x03;  			//for time being just to test
   15f66:	4d0c      	ldr	r5, [pc, #48]	; (15f98 <ll_scan_params_set+0x44>)
   15f68:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   15f6a:	f8a5 9000 	strh.w	r9, [r5]
	ll_scan.type = type | 0x03;  			//for time being just to test
   15f6e:	f046 0603 	orr.w	r6, r6, #3
   15f72:	f366 0403 	bfi	r4, r6, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
   15f76:	4622      	mov	r2, r4
   15f78:	f367 1205 	bfi	r2, r7, #4, #2
	ll_scan.filter_policy = filter_policy;
   15f7c:	4613      	mov	r3, r2
   15f7e:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
   15f82:	f8a5 8002 	strh.w	r8, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   15f86:	f362 1387 	bfi	r3, r2, #6, #2
   15f8a:	712b      	strb	r3, [r5, #4]

	return 0;
   15f8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15f90:	200c      	movs	r0, #12
}
   15f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15f96:	bf00      	nop
   15f98:	20002728 	.word	0x20002728

00015f9c <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   15f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15f9e:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   15fa0:	b920      	cbnz	r0, 15fac <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   15fa2:	b005      	add	sp, #20
   15fa4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
   15fa8:	f7ff b918 	b.w	151dc <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
   15fac:	f7fd fdf8 	bl	13ba0 <ll_scan_is_enabled>
   15fb0:	4606      	mov	r6, r0
   15fb2:	bb40      	cbnz	r0, 16006 <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
   15fb4:	4c15      	ldr	r4, [pc, #84]	; (1600c <ll_scan_enable+0x70>)
   15fb6:	7920      	ldrb	r0, [r4, #4]
   15fb8:	0980      	lsrs	r0, r0, #6
   15fba:	f000 fa0d 	bl	163d8 <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   15fbe:	7923      	ldrb	r3, [r4, #4]
   15fc0:	f013 0501 	ands.w	r5, r3, #1
   15fc4:	d006      	beq.n	15fd4 <ll_scan_enable+0x38>
   15fc6:	f013 0520 	ands.w	r5, r3, #32
   15fca:	d003      	beq.n	15fd4 <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
   15fcc:	4630      	mov	r0, r6
   15fce:	f000 fb9d 	bl	1670c <ll_rl_rpa_update>
		rpa_gen = 1;
   15fd2:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   15fd4:	7926      	ldrb	r6, [r4, #4]
   15fd6:	f006 070f 	and.w	r7, r6, #15
   15fda:	f3c6 1600 	ubfx	r6, r6, #4, #1
   15fde:	2100      	movs	r1, #0
   15fe0:	4630      	mov	r0, r6
   15fe2:	f7f5 fd0b 	bl	b9fc <ll_addr_get>
   15fe6:	22ff      	movs	r2, #255	; 0xff
   15fe8:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
   15fea:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   15fec:	8823      	ldrh	r3, [r4, #0]
   15fee:	9502      	str	r5, [sp, #8]
   15ff0:	0992      	lsrs	r2, r2, #6
   15ff2:	9201      	str	r2, [sp, #4]
   15ff4:	8862      	ldrh	r2, [r4, #2]
   15ff6:	9200      	str	r2, [sp, #0]
   15ff8:	4631      	mov	r1, r6
   15ffa:	4602      	mov	r2, r0
   15ffc:	4638      	mov	r0, r7
   15ffe:	f7fe ffef 	bl	14fe0 <radio_scan_enable>
}
   16002:	b005      	add	sp, #20
   16004:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   16006:	2000      	movs	r0, #0
   16008:	e7fb      	b.n	16002 <ll_scan_enable+0x66>
   1600a:	bf00      	nop
   1600c:	20002728 	.word	0x20002728

00016010 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   16010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16014:	b085      	sub	sp, #20
   16016:	461e      	mov	r6, r3
   16018:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1601c:	9303      	str	r3, [sp, #12]
   1601e:	4680      	mov	r8, r0
   16020:	4689      	mov	r9, r1
   16022:	4615      	mov	r5, r2
   16024:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   16026:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   1602a:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
   1602e:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
   16032:	f7fd fdb5 	bl	13ba0 <ll_scan_is_enabled>
   16036:	9b03      	ldr	r3, [sp, #12]
   16038:	bba0      	cbnz	r0, 160a4 <ll_create_connection+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   1603a:	9300      	str	r3, [sp, #0]
   1603c:	4652      	mov	r2, sl
   1603e:	465b      	mov	r3, fp
   16040:	4639      	mov	r1, r7
   16042:	4630      	mov	r0, r6
   16044:	f7fd fdd0 	bl	13be8 <radio_connect_enable>
				      latency, timeout);

	if (status) {
   16048:	bb68      	cbnz	r0, 160a6 <ll_create_connection+0x96>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
   1604a:	4628      	mov	r0, r5
   1604c:	f000 f9c4 	bl	163d8 <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
   16050:	b1dd      	cbz	r5, 1608a <ll_create_connection+0x7a>
	u8_t  rl_idx = FILTER_IDX_NONE;
   16052:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   16054:	1ea3      	subs	r3, r4, #2
   16056:	2b01      	cmp	r3, #1
   16058:	d822      	bhi.n	160a0 <ll_create_connection+0x90>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
   1605a:	2000      	movs	r0, #0
   1605c:	f000 fb56 	bl	1670c <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   16060:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   16064:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
   16066:	2100      	movs	r1, #0
   16068:	4620      	mov	r0, r4
   1606a:	f7f5 fcc7 	bl	b9fc <ll_addr_get>
   1606e:	4643      	mov	r3, r8
   16070:	4602      	mov	r2, r0
   16072:	4621      	mov	r1, r4
   16074:	2000      	movs	r0, #0
   16076:	9711      	str	r7, [sp, #68]	; 0x44
   16078:	9610      	str	r6, [sp, #64]	; 0x40
   1607a:	950f      	str	r5, [sp, #60]	; 0x3c
   1607c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   16080:	b005      	add	sp, #20
   16082:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
   16086:	f7fe bfab 	b.w	14fe0 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
   1608a:	f000 fae1 	bl	16650 <ctrl_rl_enabled>
   1608e:	2800      	cmp	r0, #0
   16090:	d0df      	beq.n	16052 <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   16092:	4639      	mov	r1, r7
   16094:	462a      	mov	r2, r5
   16096:	4630      	mov	r0, r6
   16098:	f000 f9b4 	bl	16404 <ll_rl_find>
   1609c:	4607      	mov	r7, r0
   1609e:	e7d9      	b.n	16054 <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
   160a0:	2600      	movs	r6, #0
   160a2:	e7e0      	b.n	16066 <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
   160a4:	200c      	movs	r0, #12
}
   160a6:	b005      	add	sp, #20
   160a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000160ac <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   160ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   160b0:	4688      	mov	r8, r1
	int i;

	if (free) {
   160b2:	4615      	mov	r5, r2
   160b4:	b10a      	cbz	r2, 160ba <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   160b6:	23ff      	movs	r3, #255	; 0xff
   160b8:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   160ba:	4e14      	ldr	r6, [pc, #80]	; (1610c <wl_find+0x60>)
{
   160bc:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   160be:	f000 0701 	and.w	r7, r0, #1
   160c2:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   160c6:	07da      	lsls	r2, r3, #31
   160c8:	d51d      	bpl.n	16106 <wl_find+0x5a>
   160ca:	f3c3 0340 	ubfx	r3, r3, #1, #1
   160ce:	42bb      	cmp	r3, r7
   160d0:	d113      	bne.n	160fa <wl_find+0x4e>
   160d2:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
   160d6:	2206      	movs	r2, #6
   160d8:	4641      	mov	r1, r8
   160da:	3002      	adds	r0, #2
   160dc:	f7ea fbd8 	bl	890 <memcmp>
   160e0:	b910      	cbnz	r0, 160e8 <wl_find+0x3c>
			return i;
   160e2:	b2e0      	uxtb	r0, r4
   160e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   160e8:	b13d      	cbz	r5, 160fa <wl_find+0x4e>
   160ea:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   160ee:	07db      	lsls	r3, r3, #31
   160f0:	d403      	bmi.n	160fa <wl_find+0x4e>
   160f2:	782b      	ldrb	r3, [r5, #0]
   160f4:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   160f6:	bf08      	it	eq
   160f8:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   160fa:	3401      	adds	r4, #1
   160fc:	2c08      	cmp	r4, #8
   160fe:	d1e0      	bne.n	160c2 <wl_find+0x16>
		}
	}

	return FILTER_IDX_NONE;
   16100:	20ff      	movs	r0, #255	; 0xff
   16102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   16106:	2d00      	cmp	r5, #0
   16108:	d1f3      	bne.n	160f2 <wl_find+0x46>
   1610a:	e7f6      	b.n	160fa <wl_find+0x4e>
   1610c:	2000295b 	.word	0x2000295b

00016110 <filter_rl_update>:
		}
	}
}

static void filter_rl_update(void)
{
   16110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	filter->enable_bitmask = 0;
   16114:	4d12      	ldr	r5, [pc, #72]	; (16160 <filter_rl_update+0x50>)

	/* No whitelist: populate filter from rl peers */
	filter_clear(&rl_filter);

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if (rl[i].taken) {
   16116:	4e13      	ldr	r6, [pc, #76]	; (16164 <filter_rl_update+0x54>)
	filter->enable_bitmask = 0;
   16118:	2400      	movs	r4, #0
   1611a:	702c      	strb	r4, [r5, #0]
	filter->addr_type_bitmask = 0;
   1611c:	706c      	strb	r4, [r5, #1]
		if (rl[i].taken) {
   1611e:	2728      	movs	r7, #40	; 0x28
	filter->enable_bitmask |= BIT(index);
   16120:	f04f 0801 	mov.w	r8, #1
		if (rl[i].taken) {
   16124:	fb07 f104 	mul.w	r1, r7, r4
   16128:	5c73      	ldrb	r3, [r6, r1]
   1612a:	07da      	lsls	r2, r3, #31
   1612c:	d512      	bpl.n	16154 <filter_rl_update+0x44>
	filter->enable_bitmask |= BIT(index);
   1612e:	7828      	ldrb	r0, [r5, #0]
   16130:	fa08 f204 	lsl.w	r2, r8, r4
   16134:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   16136:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   1613a:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1613c:	786a      	ldrb	r2, [r5, #1]
   1613e:	40a3      	lsls	r3, r4
   16140:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   16142:	2206      	movs	r2, #6
   16144:	3101      	adds	r1, #1
   16146:	fb02 5004 	mla	r0, r2, r4, r5
   1614a:	4431      	add	r1, r6
   1614c:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1614e:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   16150:	f7ea fbcb 	bl	8ea <memcpy>
   16154:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16156:	2c08      	cmp	r4, #8
   16158:	d1e4      	bne.n	16124 <filter_rl_update+0x14>
				      rl[i].id_addr.val);
		}
	}
}
   1615a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1615e:	bf00      	nop
   16160:	20002929 	.word	0x20002929
   16164:	200027e8 	.word	0x200027e8

00016168 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
   16168:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
   1616a:	f7fd fd03 	bl	13b74 <ll_adv_is_enabled>
   1616e:	b928      	cbnz	r0, 1617c <rl_access_check.constprop.1+0x14>
   16170:	f7fd fd16 	bl	13ba0 <ll_scan_is_enabled>
   16174:	fab0 f080 	clz	r0, r0
   16178:	0940      	lsrs	r0, r0, #5
   1617a:	bd08      	pop	{r3, pc}
   1617c:	2000      	movs	r0, #0
}
   1617e:	bd08      	pop	{r3, pc}

00016180 <filter_wl_update>:
{
   16180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16184:	4e1b      	ldr	r6, [pc, #108]	; (161f4 <filter_wl_update+0x74>)
	filter->enable_bitmask = 0;
   16186:	4d1c      	ldr	r5, [pc, #112]	; (161f8 <filter_wl_update+0x78>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   16188:	f8df 9074 	ldr.w	r9, [pc, #116]	; 16200 <filter_wl_update+0x80>
	filter->enable_bitmask = 0;
   1618c:	2400      	movs	r4, #0
		if (!wl[i].taken) {
   1618e:	1eb7      	subs	r7, r6, #2
	filter->enable_bitmask = 0;
   16190:	702c      	strb	r4, [r5, #0]
	filter->addr_type_bitmask = 0;
   16192:	706c      	strb	r4, [r5, #1]
   16194:	46b8      	mov	r8, r7
		if (!wl[i].taken) {
   16196:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   1619a:	07d9      	lsls	r1, r3, #31
   1619c:	d523      	bpl.n	161e6 <filter_wl_update+0x66>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1619e:	f899 3000 	ldrb.w	r3, [r9]
   161a2:	b15b      	cbz	r3, 161bc <filter_wl_update+0x3c>
		j = wl[i].rl_idx;
   161a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   161a8:	2a07      	cmp	r2, #7
   161aa:	d807      	bhi.n	161bc <filter_wl_update+0x3c>
   161ac:	2328      	movs	r3, #40	; 0x28
   161ae:	4353      	muls	r3, r2
   161b0:	4a12      	ldr	r2, [pc, #72]	; (161fc <filter_wl_update+0x7c>)
   161b2:	5cd3      	ldrb	r3, [r2, r3]
   161b4:	075a      	lsls	r2, r3, #29
   161b6:	d501      	bpl.n	161bc <filter_wl_update+0x3c>
   161b8:	06db      	lsls	r3, r3, #27
   161ba:	d514      	bpl.n	161e6 <filter_wl_update+0x66>
	filter->enable_bitmask |= BIT(index);
   161bc:	2201      	movs	r2, #1
   161be:	fa02 f104 	lsl.w	r1, r2, r4
   161c2:	782a      	ldrb	r2, [r5, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   161c4:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   161c8:	430a      	orrs	r2, r1
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   161ca:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   161ce:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   161d0:	786a      	ldrb	r2, [r5, #1]
   161d2:	40a3      	lsls	r3, r4
   161d4:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   161d6:	2206      	movs	r2, #6
   161d8:	fb02 5004 	mla	r0, r2, r4, r5
   161dc:	4631      	mov	r1, r6
   161de:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   161e0:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   161e2:	f7ea fb82 	bl	8ea <memcpy>
   161e6:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
   161e8:	2c08      	cmp	r4, #8
   161ea:	f106 0608 	add.w	r6, r6, #8
   161ee:	d1d2      	bne.n	16196 <filter_wl_update+0x16>
}
   161f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   161f4:	2000295d 	.word	0x2000295d
   161f8:	2000299b 	.word	0x2000299b
   161fc:	200027e8 	.word	0x200027e8
   16200:	20002928 	.word	0x20002928

00016204 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   16204:	2807      	cmp	r0, #7
   16206:	d80c      	bhi.n	16222 <ctrl_lrpa_get+0x1e>
   16208:	2328      	movs	r3, #40	; 0x28
   1620a:	4358      	muls	r0, r3
   1620c:	4a06      	ldr	r2, [pc, #24]	; (16228 <ctrl_lrpa_get+0x24>)
   1620e:	5c13      	ldrb	r3, [r2, r0]
   16210:	1811      	adds	r1, r2, r0
   16212:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   16216:	b128      	cbz	r0, 16224 <ctrl_lrpa_get+0x20>
   16218:	f3c3 0040 	ubfx	r0, r3, #1, #1
   1621c:	b110      	cbz	r0, 16224 <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   1621e:	6a48      	ldr	r0, [r1, #36]	; 0x24
   16220:	4770      	bx	lr
		return NULL;
   16222:	2000      	movs	r0, #0
}
   16224:	4770      	bx	lr
   16226:	bf00      	nop
   16228:	200027e8 	.word	0x200027e8

0001622c <ctrl_irks_get>:
	*count = peer_irk_count;
   1622c:	4b02      	ldr	r3, [pc, #8]	; (16238 <ctrl_irks_get+0xc>)
   1622e:	781b      	ldrb	r3, [r3, #0]
   16230:	7003      	strb	r3, [r0, #0]
}
   16232:	4802      	ldr	r0, [pc, #8]	; (1623c <ctrl_irks_get+0x10>)
   16234:	4770      	bx	lr
   16236:	bf00      	nop
   16238:	2000275e 	.word	0x2000275e
   1623c:	20002767 	.word	0x20002767

00016240 <ctrl_rl_idx>:
	if (whitelist) {
   16240:	b188      	cbz	r0, 16266 <ctrl_rl_idx+0x26>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   16242:	2907      	cmp	r1, #7
   16244:	d905      	bls.n	16252 <ctrl_rl_idx+0x12>
		LL_ASSERT(rl[i].taken);
   16246:	4040      	eors	r0, r0
   16248:	f380 8811 	msr	BASEPRI, r0
   1624c:	f04f 0004 	mov.w	r0, #4
   16250:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
   16252:	4b09      	ldr	r3, [pc, #36]	; (16278 <ctrl_rl_idx+0x38>)
   16254:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
   16258:	07d2      	lsls	r2, r2, #31
   1625a:	d5f4      	bpl.n	16246 <ctrl_rl_idx+0x6>
		i = wl[devmatch_id].rl_idx;
   1625c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   16260:	7849      	ldrb	r1, [r1, #1]
}
   16262:	4608      	mov	r0, r1
   16264:	4770      	bx	lr
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   16266:	2907      	cmp	r1, #7
   16268:	d8ed      	bhi.n	16246 <ctrl_rl_idx+0x6>
		LL_ASSERT(rl[i].taken);
   1626a:	2328      	movs	r3, #40	; 0x28
   1626c:	434b      	muls	r3, r1
   1626e:	4a03      	ldr	r2, [pc, #12]	; (1627c <ctrl_rl_idx+0x3c>)
   16270:	5cd3      	ldrb	r3, [r2, r3]
   16272:	07db      	lsls	r3, r3, #31
   16274:	d4f5      	bmi.n	16262 <ctrl_rl_idx+0x22>
   16276:	e7e6      	b.n	16246 <ctrl_rl_idx+0x6>
   16278:	2000295b 	.word	0x2000295b
   1627c:	200027e8 	.word	0x200027e8

00016280 <ctrl_rl_irk_idx>:
	LL_ASSERT(irkmatch_id < peer_irk_count);
   16280:	4b0a      	ldr	r3, [pc, #40]	; (162ac <ctrl_rl_irk_idx+0x2c>)
   16282:	781b      	ldrb	r3, [r3, #0]
   16284:	4283      	cmp	r3, r0
   16286:	d805      	bhi.n	16294 <ctrl_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   16288:	4040      	eors	r0, r0
   1628a:	f380 8811 	msr	BASEPRI, r0
   1628e:	f04f 0004 	mov.w	r0, #4
   16292:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   16294:	4b06      	ldr	r3, [pc, #24]	; (162b0 <ctrl_rl_irk_idx+0x30>)
   16296:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   16298:	2807      	cmp	r0, #7
   1629a:	d8f5      	bhi.n	16288 <ctrl_rl_irk_idx+0x8>
	LL_ASSERT(rl[i].taken);
   1629c:	2328      	movs	r3, #40	; 0x28
   1629e:	4343      	muls	r3, r0
   162a0:	4a04      	ldr	r2, [pc, #16]	; (162b4 <ctrl_rl_irk_idx+0x34>)
   162a2:	5cd3      	ldrb	r3, [r2, r3]
   162a4:	07db      	lsls	r3, r3, #31
   162a6:	d5ef      	bpl.n	16288 <ctrl_rl_irk_idx+0x8>
}
   162a8:	4770      	bx	lr
   162aa:	bf00      	nop
   162ac:	2000275e 	.word	0x2000275e
   162b0:	2000275f 	.word	0x2000275f
   162b4:	200027e8 	.word	0x200027e8

000162b8 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   162b8:	2807      	cmp	r0, #7
   162ba:	d80e      	bhi.n	162da <ctrl_irk_whitelisted+0x22>
	LL_ASSERT(rl[rl_idx].taken);
   162bc:	2328      	movs	r3, #40	; 0x28
   162be:	4358      	muls	r0, r3
   162c0:	4b07      	ldr	r3, [pc, #28]	; (162e0 <ctrl_irk_whitelisted+0x28>)
   162c2:	5c18      	ldrb	r0, [r3, r0]
   162c4:	07c3      	lsls	r3, r0, #31
   162c6:	d405      	bmi.n	162d4 <ctrl_irk_whitelisted+0x1c>
   162c8:	4040      	eors	r0, r0
   162ca:	f380 8811 	msr	BASEPRI, r0
   162ce:	f04f 0004 	mov.w	r0, #4
   162d2:	df02      	svc	2
	return rl[rl_idx].wl;
   162d4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   162d8:	4770      	bx	lr
		return false;
   162da:	2000      	movs	r0, #0
}
   162dc:	4770      	bx	lr
   162de:	bf00      	nop
   162e0:	200027e8 	.word	0x200027e8

000162e4 <ctrl_filter_get>:
}
   162e4:	4b03      	ldr	r3, [pc, #12]	; (162f4 <ctrl_filter_get+0x10>)
   162e6:	4a04      	ldr	r2, [pc, #16]	; (162f8 <ctrl_filter_get+0x14>)
   162e8:	2800      	cmp	r0, #0
   162ea:	bf14      	ite	ne
   162ec:	4610      	movne	r0, r2
   162ee:	4618      	moveq	r0, r3
   162f0:	4770      	bx	lr
   162f2:	bf00      	nop
   162f4:	20002929 	.word	0x20002929
   162f8:	2000299b 	.word	0x2000299b

000162fc <ll_wl_size_get>:
   162fc:	2008      	movs	r0, #8
   162fe:	4770      	bx	lr

00016300 <ll_wl_clear>:
{
   16300:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   16302:	f7fd fc3f 	bl	13b84 <radio_adv_filter_pol_get>
   16306:	4604      	mov	r4, r0
   16308:	b110      	cbz	r0, 16310 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1630a:	240c      	movs	r4, #12
}
   1630c:	4620      	mov	r0, r4
   1630e:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   16310:	f7fd fc5c 	bl	13bcc <radio_scan_filter_pol_get>
   16314:	07c3      	lsls	r3, r0, #31
   16316:	d4f8      	bmi.n	1630a <ll_wl_clear+0xa>
		wl[i].taken = 0;
   16318:	4a07      	ldr	r2, [pc, #28]	; (16338 <ll_wl_clear+0x38>)
   1631a:	4623      	mov	r3, r4
   1631c:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   16320:	f36f 0100 	bfc	r1, #0, #1
   16324:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   16328:	3301      	adds	r3, #1
   1632a:	2b08      	cmp	r3, #8
   1632c:	d1f6      	bne.n	1631c <ll_wl_clear+0x1c>
	wl_anon = 0;
   1632e:	4b03      	ldr	r3, [pc, #12]	; (1633c <ll_wl_clear+0x3c>)
   16330:	2200      	movs	r2, #0
   16332:	701a      	strb	r2, [r3, #0]
	return 0;
   16334:	e7ea      	b.n	1630c <ll_wl_clear+0xc>
   16336:	bf00      	nop
   16338:	2000295b 	.word	0x2000295b
   1633c:	20004b78 	.word	0x20004b78

00016340 <ll_wl_remove>:
{
   16340:	b538      	push	{r3, r4, r5, lr}
   16342:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   16344:	f7fd fc1e 	bl	13b84 <radio_adv_filter_pol_get>
   16348:	4604      	mov	r4, r0
   1634a:	b110      	cbz	r0, 16352 <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1634c:	240c      	movs	r4, #12
}
   1634e:	4620      	mov	r0, r4
   16350:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   16352:	f7fd fc3b 	bl	13bcc <radio_scan_filter_pol_get>
   16356:	07c3      	lsls	r3, r0, #31
   16358:	d4f8      	bmi.n	1634c <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   1635a:	7828      	ldrb	r0, [r5, #0]
   1635c:	28ff      	cmp	r0, #255	; 0xff
   1635e:	d102      	bne.n	16366 <ll_wl_remove+0x26>
		wl_anon = 0;
   16360:	4b0f      	ldr	r3, [pc, #60]	; (163a0 <ll_wl_remove+0x60>)
   16362:	701c      	strb	r4, [r3, #0]
		return 0;
   16364:	e7f3      	b.n	1634e <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   16366:	4622      	mov	r2, r4
   16368:	1c69      	adds	r1, r5, #1
   1636a:	f7ff fe9f 	bl	160ac <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1636e:	2807      	cmp	r0, #7
   16370:	d813      	bhi.n	1639a <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
   16372:	4b0c      	ldr	r3, [pc, #48]	; (163a4 <ll_wl_remove+0x64>)
   16374:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   16378:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1637a:	2d07      	cmp	r5, #7
   1637c:	d806      	bhi.n	1638c <ll_wl_remove+0x4c>
			rl[j].wl = 0;
   1637e:	2228      	movs	r2, #40	; 0x28
   16380:	4909      	ldr	r1, [pc, #36]	; (163a8 <ll_wl_remove+0x68>)
   16382:	436a      	muls	r2, r5
   16384:	5c8d      	ldrb	r5, [r1, r2]
   16386:	f364 1545 	bfi	r5, r4, #5, #1
   1638a:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
   1638c:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   16390:	f36f 0200 	bfc	r2, #0, #1
   16394:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
   16398:	e7d9      	b.n	1634e <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1639a:	2402      	movs	r4, #2
   1639c:	e7d7      	b.n	1634e <ll_wl_remove+0xe>
   1639e:	bf00      	nop
   163a0:	20004b78 	.word	0x20004b78
   163a4:	2000295b 	.word	0x2000295b
   163a8:	200027e8 	.word	0x200027e8

000163ac <ll_filters_adv_update>:
{
   163ac:	b508      	push	{r3, lr}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   163ae:	b128      	cbz	r0, 163bc <ll_filters_adv_update+0x10>
   163b0:	f7fd fc0c 	bl	13bcc <radio_scan_filter_pol_get>
   163b4:	07c3      	lsls	r3, r0, #31
   163b6:	d401      	bmi.n	163bc <ll_filters_adv_update+0x10>
		filter_wl_update();
   163b8:	f7ff fee2 	bl	16180 <filter_wl_update>
	if (rl_enable && !ll_scan_is_enabled()) {
   163bc:	4b05      	ldr	r3, [pc, #20]	; (163d4 <ll_filters_adv_update+0x28>)
   163be:	781b      	ldrb	r3, [r3, #0]
   163c0:	b133      	cbz	r3, 163d0 <ll_filters_adv_update+0x24>
   163c2:	f7fd fbed 	bl	13ba0 <ll_scan_is_enabled>
   163c6:	b918      	cbnz	r0, 163d0 <ll_filters_adv_update+0x24>
}
   163c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   163cc:	f7ff bea0 	b.w	16110 <filter_rl_update>
   163d0:	bd08      	pop	{r3, pc}
   163d2:	bf00      	nop
   163d4:	20002928 	.word	0x20002928

000163d8 <ll_filters_scan_update>:
{
   163d8:	b508      	push	{r3, lr}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   163da:	07c3      	lsls	r3, r0, #31
   163dc:	d504      	bpl.n	163e8 <ll_filters_scan_update+0x10>
   163de:	f7fd fbd1 	bl	13b84 <radio_adv_filter_pol_get>
   163e2:	b908      	cbnz	r0, 163e8 <ll_filters_scan_update+0x10>
		filter_wl_update();
   163e4:	f7ff fecc 	bl	16180 <filter_wl_update>
	if (rl_enable && !ll_adv_is_enabled()) {
   163e8:	4b05      	ldr	r3, [pc, #20]	; (16400 <ll_filters_scan_update+0x28>)
   163ea:	781b      	ldrb	r3, [r3, #0]
   163ec:	b133      	cbz	r3, 163fc <ll_filters_scan_update+0x24>
   163ee:	f7fd fbc1 	bl	13b74 <ll_adv_is_enabled>
   163f2:	b918      	cbnz	r0, 163fc <ll_filters_scan_update+0x24>
}
   163f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   163f8:	f7ff be8a 	b.w	16110 <filter_rl_update>
   163fc:	bd08      	pop	{r3, pc}
   163fe:	bf00      	nop
   16400:	20002928 	.word	0x20002928

00016404 <ll_rl_find>:
{
   16404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16408:	468a      	mov	sl, r1
	if (free) {
   1640a:	4614      	mov	r4, r2
   1640c:	b10a      	cbz	r2, 16412 <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   1640e:	23ff      	movs	r3, #255	; 0xff
   16410:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   16412:	f8df 8054 	ldr.w	r8, [pc, #84]	; 16468 <ll_rl_find+0x64>
{
   16416:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   16418:	f000 0901 	and.w	r9, r0, #1
   1641c:	2628      	movs	r6, #40	; 0x28
   1641e:	436e      	muls	r6, r5
   16420:	b2ef      	uxtb	r7, r5
   16422:	f818 3006 	ldrb.w	r3, [r8, r6]
   16426:	07da      	lsls	r2, r3, #31
   16428:	d51a      	bpl.n	16460 <ll_rl_find+0x5c>
   1642a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1642e:	454b      	cmp	r3, r9
   16430:	d10f      	bne.n	16452 <ll_rl_find+0x4e>
   16432:	1c70      	adds	r0, r6, #1
   16434:	2206      	movs	r2, #6
   16436:	4651      	mov	r1, sl
   16438:	4440      	add	r0, r8
   1643a:	f7ea fa29 	bl	890 <memcmp>
   1643e:	b160      	cbz	r0, 1645a <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   16440:	b13c      	cbz	r4, 16452 <ll_rl_find+0x4e>
   16442:	f818 3006 	ldrb.w	r3, [r8, r6]
   16446:	07db      	lsls	r3, r3, #31
   16448:	d403      	bmi.n	16452 <ll_rl_find+0x4e>
   1644a:	7823      	ldrb	r3, [r4, #0]
   1644c:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   1644e:	bf08      	it	eq
   16450:	7027      	strbeq	r7, [r4, #0]
   16452:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16454:	2d08      	cmp	r5, #8
   16456:	d1e1      	bne.n	1641c <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
   16458:	27ff      	movs	r7, #255	; 0xff
}
   1645a:	4638      	mov	r0, r7
   1645c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   16460:	2c00      	cmp	r4, #0
   16462:	d1f2      	bne.n	1644a <ll_rl_find+0x46>
   16464:	e7f5      	b.n	16452 <ll_rl_find+0x4e>
   16466:	bf00      	nop
   16468:	200027e8 	.word	0x200027e8

0001646c <ll_wl_add>:
{
   1646c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   16470:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   16472:	f7fd fb87 	bl	13b84 <radio_adv_filter_pol_get>
   16476:	4605      	mov	r5, r0
   16478:	b120      	cbz	r0, 16484 <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1647a:	250c      	movs	r5, #12
}
   1647c:	4628      	mov	r0, r5
   1647e:	b002      	add	sp, #8
   16480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   16484:	f7fd fba2 	bl	13bcc <radio_scan_filter_pol_get>
   16488:	07c3      	lsls	r3, r0, #31
   1648a:	d4f6      	bmi.n	1647a <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   1648c:	7838      	ldrb	r0, [r7, #0]
   1648e:	28ff      	cmp	r0, #255	; 0xff
   16490:	d103      	bne.n	1649a <ll_wl_add+0x2e>
		wl_anon = 1;
   16492:	4b1f      	ldr	r3, [pc, #124]	; (16510 <ll_wl_add+0xa4>)
   16494:	2201      	movs	r2, #1
   16496:	701a      	strb	r2, [r3, #0]
		return 0;
   16498:	e7f0      	b.n	1647c <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   1649a:	f107 0801 	add.w	r8, r7, #1
   1649e:	f10d 0207 	add.w	r2, sp, #7
   164a2:	4641      	mov	r1, r8
   164a4:	f7ff fe02 	bl	160ac <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   164a8:	2807      	cmp	r0, #7
   164aa:	d92d      	bls.n	16508 <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
   164ac:	f89d 6007 	ldrb.w	r6, [sp, #7]
   164b0:	2e07      	cmp	r6, #7
   164b2:	d82b      	bhi.n	1650c <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
   164b4:	4c17      	ldr	r4, [pc, #92]	; (16514 <ll_wl_add+0xa8>)
   164b6:	783a      	ldrb	r2, [r7, #0]
   164b8:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   164bc:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   164c0:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   164c4:	4641      	mov	r1, r8
   164c6:	2206      	movs	r2, #6
   164c8:	3002      	adds	r0, #2
   164ca:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   164ce:	f7ea fa0c 	bl	8ea <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   164d2:	462a      	mov	r2, r5
   164d4:	4641      	mov	r1, r8
   164d6:	7838      	ldrb	r0, [r7, #0]
   164d8:	f7ff ff94 	bl	16404 <ll_rl_find>
   164dc:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
   164de:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   164e0:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
   164e2:	d80e      	bhi.n	16502 <ll_wl_add+0x96>
		wl[i].rl_idx = j;
   164e4:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   164e6:	2328      	movs	r3, #40	; 0x28
   164e8:	4a0b      	ldr	r2, [pc, #44]	; (16518 <ll_wl_add+0xac>)
   164ea:	4358      	muls	r0, r3
   164ec:	5c13      	ldrb	r3, [r2, r0]
   164ee:	f043 0320 	orr.w	r3, r3, #32
   164f2:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
   164f4:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   164f8:	f043 0301 	orr.w	r3, r3, #1
   164fc:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   16500:	e7bc      	b.n	1647c <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
   16502:	22ff      	movs	r2, #255	; 0xff
   16504:	705a      	strb	r2, [r3, #1]
   16506:	e7f5      	b.n	164f4 <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
   16508:	2512      	movs	r5, #18
   1650a:	e7b7      	b.n	1647c <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1650c:	2507      	movs	r5, #7
	return wl_add(addr);
   1650e:	e7b5      	b.n	1647c <ll_wl_add+0x10>
   16510:	20004b78 	.word	0x20004b78
   16514:	2000295b 	.word	0x2000295b
   16518:	200027e8 	.word	0x200027e8

0001651c <ctrl_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1651c:	4b0c      	ldr	r3, [pc, #48]	; (16550 <ctrl_rl_idx_allowed+0x34>)
   1651e:	781b      	ldrb	r3, [r3, #0]
   16520:	b19b      	cbz	r3, 1654a <ctrl_rl_idx_allowed+0x2e>
   16522:	2907      	cmp	r1, #7
   16524:	d811      	bhi.n	1654a <ctrl_rl_idx_allowed+0x2e>
   16526:	b980      	cbnz	r0, 1654a <ctrl_rl_idx_allowed+0x2e>
	LL_ASSERT(rl[rl_idx].taken);
   16528:	2328      	movs	r3, #40	; 0x28
   1652a:	4359      	muls	r1, r3
   1652c:	4b09      	ldr	r3, [pc, #36]	; (16554 <ctrl_rl_idx_allowed+0x38>)
   1652e:	5c58      	ldrb	r0, [r3, r1]
   16530:	07c2      	lsls	r2, r0, #31
   16532:	d405      	bmi.n	16540 <ctrl_rl_idx_allowed+0x24>
   16534:	4040      	eors	r0, r0
   16536:	f380 8811 	msr	BASEPRI, r0
   1653a:	f04f 0004 	mov.w	r0, #4
   1653e:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   16540:	0743      	lsls	r3, r0, #29
   16542:	d502      	bpl.n	1654a <ctrl_rl_idx_allowed+0x2e>
   16544:	f3c0 1000 	ubfx	r0, r0, #4, #1
   16548:	4770      	bx	lr
		return true;
   1654a:	2001      	movs	r0, #1
}
   1654c:	4770      	bx	lr
   1654e:	bf00      	nop
   16550:	20002928 	.word	0x20002928
   16554:	200027e8 	.word	0x200027e8

00016558 <ll_rl_id_addr_get>:
{
   16558:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1655a:	2b07      	cmp	r3, #7
{
   1655c:	b430      	push	{r4, r5}
   1655e:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   16560:	d905      	bls.n	1656e <ll_rl_id_addr_get+0x16>
	LL_ASSERT(rl[rl_idx].taken);
   16562:	4040      	eors	r0, r0
   16564:	f380 8811 	msr	BASEPRI, r0
   16568:	f04f 0004 	mov.w	r0, #4
   1656c:	df02      	svc	2
   1656e:	2528      	movs	r5, #40	; 0x28
   16570:	4c08      	ldr	r4, [pc, #32]	; (16594 <ll_rl_id_addr_get+0x3c>)
   16572:	fb05 f203 	mul.w	r2, r5, r3
   16576:	5ca2      	ldrb	r2, [r4, r2]
   16578:	f012 0f01 	tst.w	r2, #1
   1657c:	d0f1      	beq.n	16562 <ll_rl_id_addr_get+0xa>
	*id_addr_type = rl[rl_idx].id_addr_type;
   1657e:	f3c2 1280 	ubfx	r2, r2, #6, #1
   16582:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   16584:	fb05 4103 	mla	r1, r5, r3, r4
   16588:	2206      	movs	r2, #6
   1658a:	3101      	adds	r1, #1
}
   1658c:	bc30      	pop	{r4, r5}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1658e:	f7ea b9ac 	b.w	8ea <memcpy>
   16592:	bf00      	nop
   16594:	200027e8 	.word	0x200027e8

00016598 <ctrl_rl_addr_allowed>:
{
   16598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   1659c:	4b1a      	ldr	r3, [pc, #104]	; (16608 <ctrl_rl_addr_allowed+0x70>)
   1659e:	781b      	ldrb	r3, [r3, #0]
   165a0:	b37b      	cbz	r3, 16602 <ctrl_rl_addr_allowed+0x6a>
   165a2:	7813      	ldrb	r3, [r2, #0]
   165a4:	2bff      	cmp	r3, #255	; 0xff
   165a6:	d12c      	bne.n	16602 <ctrl_rl_addr_allowed+0x6a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   165a8:	4e18      	ldr	r6, [pc, #96]	; (1660c <ctrl_rl_addr_allowed+0x74>)
   165aa:	2400      	movs	r4, #0
   165ac:	f04f 0828 	mov.w	r8, #40	; 0x28
   165b0:	46b6      	mov	lr, r6
   165b2:	fb08 f304 	mul.w	r3, r8, r4
   165b6:	fa5f fc84 	uxtb.w	ip, r4
   165ba:	5cf7      	ldrb	r7, [r6, r3]
   165bc:	f017 0f01 	tst.w	r7, #1
   165c0:	eb06 0503 	add.w	r5, r6, r3
   165c4:	d01a      	beq.n	165fc <ctrl_rl_addr_allowed+0x64>
   165c6:	f3c7 1780 	ubfx	r7, r7, #6, #1
   165ca:	4287      	cmp	r7, r0
   165cc:	d116      	bne.n	165fc <ctrl_rl_addr_allowed+0x64>
   165ce:	3306      	adds	r3, #6
   165d0:	1e4f      	subs	r7, r1, #1
   165d2:	4433      	add	r3, r6
				if (addr[j] != id_addr[j]) {
   165d4:	f815 af01 	ldrb.w	sl, [r5, #1]!
   165d8:	f817 9f01 	ldrb.w	r9, [r7, #1]!
   165dc:	45ca      	cmp	sl, r9
   165de:	d10d      	bne.n	165fc <ctrl_rl_addr_allowed+0x64>
			for (j = 0; j < BDADDR_SIZE; j++) {
   165e0:	429d      	cmp	r5, r3
   165e2:	d1f7      	bne.n	165d4 <ctrl_rl_addr_allowed+0x3c>
				return !rl[i].pirk || rl[i].dev;
   165e4:	2328      	movs	r3, #40	; 0x28
   165e6:	435c      	muls	r4, r3
				*rl_idx = i;
   165e8:	f882 c000 	strb.w	ip, [r2]
				return !rl[i].pirk || rl[i].dev;
   165ec:	f81e 0004 	ldrb.w	r0, [lr, r4]
   165f0:	0743      	lsls	r3, r0, #29
   165f2:	d506      	bpl.n	16602 <ctrl_rl_addr_allowed+0x6a>
   165f4:	f3c0 1000 	ubfx	r0, r0, #4, #1
   165f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   165fc:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   165fe:	2c08      	cmp	r4, #8
   16600:	d1d7      	bne.n	165b2 <ctrl_rl_addr_allowed+0x1a>
   16602:	2001      	movs	r0, #1
}
   16604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16608:	20002928 	.word	0x20002928
   1660c:	200027e8 	.word	0x200027e8

00016610 <ctrl_rl_addr_resolve>:
{
   16610:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   16612:	4c0d      	ldr	r4, [pc, #52]	; (16648 <ctrl_rl_addr_resolve+0x38>)
   16614:	7824      	ldrb	r4, [r4, #0]
   16616:	b1a4      	cbz	r4, 16642 <ctrl_rl_addr_resolve+0x32>
   16618:	2a07      	cmp	r2, #7
   1661a:	d812      	bhi.n	16642 <ctrl_rl_addr_resolve+0x32>
   1661c:	2528      	movs	r5, #40	; 0x28
   1661e:	4c0b      	ldr	r4, [pc, #44]	; (1664c <ctrl_rl_addr_resolve+0x3c>)
   16620:	fb05 f602 	mul.w	r6, r5, r2
   16624:	5da6      	ldrb	r6, [r4, r6]
   16626:	0736      	lsls	r6, r6, #28
   16628:	d50b      	bpl.n	16642 <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   1662a:	b150      	cbz	r0, 16642 <ctrl_rl_addr_resolve+0x32>
   1662c:	794b      	ldrb	r3, [r1, #5]
   1662e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16632:	2b40      	cmp	r3, #64	; 0x40
   16634:	d105      	bne.n	16642 <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   16636:	fb05 4202 	mla	r2, r5, r2, r4
   1663a:	1dd0      	adds	r0, r2, #7
}
   1663c:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1663e:	f7ec bf38 	b.w	34b2 <bt_rpa_irk_matches>
}
   16642:	2000      	movs	r0, #0
   16644:	bc70      	pop	{r4, r5, r6}
   16646:	4770      	bx	lr
   16648:	20002928 	.word	0x20002928
   1664c:	200027e8 	.word	0x200027e8

00016650 <ctrl_rl_enabled>:
	return rl_enable;
   16650:	4b02      	ldr	r3, [pc, #8]	; (1665c <ctrl_rl_enabled+0xc>)
   16652:	7818      	ldrb	r0, [r3, #0]
}
   16654:	3000      	adds	r0, #0
   16656:	bf18      	it	ne
   16658:	2001      	movne	r0, #1
   1665a:	4770      	bx	lr
   1665c:	20002928 	.word	0x20002928

00016660 <ll_rl_pdu_adv_update>:
{
   16660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16662:	4605      	mov	r5, r0
   16664:	460c      	mov	r4, r1
				  &pdu->scan_rsp.addr[0] :
   16666:	1c8f      	adds	r7, r1, #2
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   16668:	f7fe ff1c 	bl	154a4 <ll_adv_set_get>
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   1666c:	2d07      	cmp	r5, #7
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   1666e:	4606      	mov	r6, r0
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   16670:	d832      	bhi.n	166d8 <ll_rl_pdu_adv_update+0x78>
   16672:	2328      	movs	r3, #40	; 0x28
   16674:	4a24      	ldr	r2, [pc, #144]	; (16708 <ll_rl_pdu_adv_update+0xa8>)
   16676:	436b      	muls	r3, r5
   16678:	18d1      	adds	r1, r2, r3
   1667a:	5cd3      	ldrb	r3, [r2, r3]
   1667c:	071a      	lsls	r2, r3, #28
   1667e:	d52b      	bpl.n	166d8 <ll_rl_pdu_adv_update+0x78>
		LL_ASSERT(rl[idx].rpas_ready);
   16680:	079b      	lsls	r3, r3, #30
   16682:	d405      	bmi.n	16690 <ll_rl_pdu_adv_update+0x30>
   16684:	4040      	eors	r0, r0
   16686:	f380 8811 	msr	BASEPRI, r0
   1668a:	f04f 0004 	mov.w	r0, #4
   1668e:	df02      	svc	2
		pdu->tx_addr = 1;
   16690:	7823      	ldrb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   16692:	6a49      	ldr	r1, [r1, #36]	; 0x24
		pdu->tx_addr = 1;
   16694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16698:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   1669a:	2206      	movs	r2, #6
   1669c:	4638      	mov	r0, r7
   1669e:	f7ea f924 	bl	8ea <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   166a2:	7823      	ldrb	r3, [r4, #0]
   166a4:	f003 020f 	and.w	r2, r3, #15
   166a8:	2a01      	cmp	r2, #1
   166aa:	d12c      	bne.n	16706 <ll_rl_pdu_adv_update+0xa6>
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   166ac:	2d07      	cmp	r5, #7
   166ae:	f104 0008 	add.w	r0, r4, #8
   166b2:	d81e      	bhi.n	166f2 <ll_rl_pdu_adv_update+0x92>
   166b4:	2228      	movs	r2, #40	; 0x28
   166b6:	4914      	ldr	r1, [pc, #80]	; (16708 <ll_rl_pdu_adv_update+0xa8>)
   166b8:	fb02 f705 	mul.w	r7, r2, r5
   166bc:	5dcf      	ldrb	r7, [r1, r7]
   166be:	077f      	lsls	r7, r7, #29
   166c0:	d517      	bpl.n	166f2 <ll_rl_pdu_adv_update+0x92>
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   166c2:	fb02 1105 	mla	r1, r2, r5, r1
			pdu->rx_addr = 1;
   166c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   166ca:	7023      	strb	r3, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   166cc:	2206      	movs	r2, #6
   166ce:	311e      	adds	r1, #30
}
   166d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			memcpy(&pdu->direct_ind.tgt_addr[0],
   166d4:	f7ea b909 	b.w	8ea <memcpy>
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
   166d8:	7830      	ldrb	r0, [r6, #0]
   166da:	7823      	ldrb	r3, [r4, #0]
   166dc:	f3c0 1041 	ubfx	r0, r0, #5, #2
   166e0:	f360 1386 	bfi	r3, r0, #6, #1
   166e4:	7023      	strb	r3, [r4, #0]
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
   166e6:	4639      	mov	r1, r7
   166e8:	f000 0001 	and.w	r0, r0, #1
   166ec:	f7f5 f986 	bl	b9fc <ll_addr_get>
   166f0:	e7d7      	b.n	166a2 <ll_rl_pdu_adv_update+0x42>
			pdu->rx_addr = ll_adv->id_addr_type;
   166f2:	4631      	mov	r1, r6
   166f4:	7822      	ldrb	r2, [r4, #0]
   166f6:	f811 3b02 	ldrb.w	r3, [r1], #2
   166fa:	09db      	lsrs	r3, r3, #7
   166fc:	f363 12c7 	bfi	r2, r3, #7, #1
   16700:	7022      	strb	r2, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   16702:	2206      	movs	r2, #6
   16704:	e7e4      	b.n	166d0 <ll_rl_pdu_adv_update+0x70>
   16706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16708:	200027e8 	.word	0x200027e8

0001670c <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
   1670c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16710:	b087      	sub	sp, #28
   16712:	4680      	mov	r8, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   16714:	f009 f930 	bl	1f978 <_impl_k_uptime_get>
   16718:	e9cd 0100 	strd	r0, r1, [sp]
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   1671c:	f1b8 0f00 	cmp.w	r8, #0
   16720:	d145      	bne.n	167ae <ll_rl_rpa_update+0xa2>
   16722:	4b5e      	ldr	r3, [pc, #376]	; (1689c <ll_rl_rpa_update+0x190>)
   16724:	e9d3 0100 	ldrd	r0, r1, [r3]
   16728:	1c4c      	adds	r4, r1, #1
   1672a:	bf08      	it	eq
   1672c:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   16730:	d03d      	beq.n	167ae <ll_rl_rpa_update+0xa2>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   16732:	e9dd 3400 	ldrd	r3, r4, [sp]
   16736:	1a1b      	subs	r3, r3, r0
   16738:	4618      	mov	r0, r3
   1673a:	4b59      	ldr	r3, [pc, #356]	; (168a0 <ll_rl_rpa_update+0x194>)
   1673c:	681a      	ldr	r2, [r3, #0]
   1673e:	eb64 0401 	sbc.w	r4, r4, r1
   16742:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   16744:	4290      	cmp	r0, r2
   16746:	eb74 0303 	sbcs.w	r3, r4, r3
   1674a:	bfac      	ite	ge
   1674c:	2601      	movge	r6, #1
   1674e:	2600      	movlt	r6, #0
   16750:	4d54      	ldr	r5, [pc, #336]	; (168a4 <ll_rl_rpa_update+0x198>)
   16752:	f8df b158 	ldr.w	fp, [pc, #344]	; 168ac <ll_rl_rpa_update+0x1a0>
	BT_DBG("");

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   16756:	f1a5 0907 	sub.w	r9, r5, #7
	bool all = timeout || (rpa_last_ms == -1) ||
   1675a:	2400      	movs	r4, #0
   1675c:	464f      	mov	r7, r9
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   1675e:	2328      	movs	r3, #40	; 0x28
   16760:	4363      	muls	r3, r4
   16762:	f819 3003 	ldrb.w	r3, [r9, r3]
   16766:	07da      	lsls	r2, r3, #31
   16768:	d540      	bpl.n	167ec <ll_rl_rpa_update+0xe0>
   1676a:	b90e      	cbnz	r6, 16770 <ll_rl_rpa_update+0x64>
   1676c:	0798      	lsls	r0, r3, #30
   1676e:	d43d      	bmi.n	167ec <ll_rl_rpa_update+0xe0>

			if (rl[i].pirk) {
   16770:	2328      	movs	r3, #40	; 0x28
   16772:	4363      	muls	r3, r4
   16774:	5cfb      	ldrb	r3, [r7, r3]
   16776:	0759      	lsls	r1, r3, #29
   16778:	d51b      	bpl.n	167b2 <ll_rl_rpa_update+0xa6>
				u8_t irk[16];

				/* TODO: move this swap to the driver level */
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   1677a:	7c2a      	ldrb	r2, [r5, #16]
   1677c:	4b4a      	ldr	r3, [pc, #296]	; (168a8 <ll_rl_rpa_update+0x19c>)
   1677e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   16782:	f103 0210 	add.w	r2, r3, #16
   16786:	f10d 0107 	add.w	r1, sp, #7
		*((u8_t *)dst++) = *((u8_t *)src--);
   1678a:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   1678e:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
   16792:	429a      	cmp	r2, r3
   16794:	d1f9      	bne.n	1678a <ll_rl_rpa_update+0x7e>
						16);
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   16796:	f105 0117 	add.w	r1, r5, #23
   1679a:	a802      	add	r0, sp, #8
   1679c:	f7ec fe9c 	bl	34d8 <bt_rpa_create>
				LL_ASSERT(!err);
   167a0:	b138      	cbz	r0, 167b2 <ll_rl_rpa_update+0xa6>
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
   167a2:	4040      	eors	r0, r0
   167a4:	f380 8811 	msr	BASEPRI, r0
   167a8:	f04f 0004 	mov.w	r0, #4
   167ac:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
   167ae:	2601      	movs	r6, #1
   167b0:	e7ce      	b.n	16750 <ll_rl_rpa_update+0x44>
			}

			if (rl[i].lirk) {
   167b2:	2328      	movs	r3, #40	; 0x28
   167b4:	4363      	muls	r3, r4
   167b6:	5cfb      	ldrb	r3, [r7, r3]
   167b8:	071a      	lsls	r2, r3, #28
   167ba:	d511      	bpl.n	167e0 <ll_rl_rpa_update+0xd4>
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
   167bc:	a902      	add	r1, sp, #8
   167be:	4628      	mov	r0, r5
   167c0:	f7ec fe8a 	bl	34d8 <bt_rpa_create>
				LL_ASSERT(!err);
   167c4:	2800      	cmp	r0, #0
   167c6:	d1ec      	bne.n	167a2 <ll_rl_rpa_update+0x96>
   167c8:	2206      	movs	r2, #6
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
   167ca:	ab02      	add	r3, sp, #8
   167cc:	fb02 ba04 	mla	sl, r2, r4, fp
   167d0:	f8c5 301d 	str.w	r3, [r5, #29]
   167d4:	4619      	mov	r1, r3
   167d6:	4650      	mov	r0, sl
   167d8:	f7ea f887 	bl	8ea <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
   167dc:	f8c5 a01d 	str.w	sl, [r5, #29]
			}

			rl[i].rpas_ready = 1;
   167e0:	2328      	movs	r3, #40	; 0x28
   167e2:	4363      	muls	r3, r4
   167e4:	5cfa      	ldrb	r2, [r7, r3]
   167e6:	f042 0202 	orr.w	r2, r2, #2
   167ea:	54fa      	strb	r2, [r7, r3]
   167ec:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   167ee:	2c08      	cmp	r4, #8
   167f0:	f105 0528 	add.w	r5, r5, #40	; 0x28
   167f4:	d1b3      	bne.n	1675e <ll_rl_rpa_update+0x52>
		}
	}

	if (all) {
   167f6:	b126      	cbz	r6, 16802 <ll_rl_rpa_update+0xf6>
		rpa_last_ms = now;
   167f8:	e9dd 1200 	ldrd	r1, r2, [sp]
   167fc:	4b27      	ldr	r3, [pc, #156]	; (1689c <ll_rl_rpa_update+0x190>)
   167fe:	e9c3 1200 	strd	r1, r2, [r3]
	}

	if (timeout) {
   16802:	f1b8 0f00 	cmp.w	r8, #0
   16806:	d045      	beq.n	16894 <ll_rl_rpa_update+0x188>
#if defined(CONFIG_BT_BROADCASTER)
		if (ll_adv_is_enabled()) {
   16808:	f7fd f9b4 	bl	13b74 <ll_adv_is_enabled>
   1680c:	2800      	cmp	r0, #0
   1680e:	d041      	beq.n	16894 <ll_rl_rpa_update+0x188>
	ll_adv = ll_adv_set_get();
   16810:	f7fe fe48 	bl	154a4 <ll_adv_set_get>
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   16814:	7803      	ldrb	r3, [r0, #0]
   16816:	065b      	lsls	r3, r3, #25
	ll_adv = ll_adv_set_get();
   16818:	4680      	mov	r8, r0
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   1681a:	d53b      	bpl.n	16894 <ll_rl_rpa_update+0x188>
	radio_adv_data = radio_adv_data_get();
   1681c:	f7fd f99a 	bl	13b54 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   16820:	f890 4203 	ldrb.w	r4, [r0, #515]	; 0x203
	if (radio_adv_data->first == radio_adv_data->last) {
   16824:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   16828:	eb04 2104 	add.w	r1, r4, r4, lsl #8
	if (radio_adv_data->first == radio_adv_data->last) {
   1682c:	42a3      	cmp	r3, r4
	radio_adv_data = radio_adv_data_get();
   1682e:	4605      	mov	r5, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   16830:	eb00 0701 	add.w	r7, r0, r1
	if (radio_adv_data->first == radio_adv_data->last) {
   16834:	d104      	bne.n	16840 <ll_rl_rpa_update+0x134>
		last = radio_adv_data->last + 1;
   16836:	3401      	adds	r4, #1
   16838:	b2e4      	uxtb	r4, r4
			last = 0;
   1683a:	2c02      	cmp	r4, #2
   1683c:	bf08      	it	eq
   1683e:	2400      	moveq	r4, #0
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   16840:	eb04 2304 	add.w	r3, r4, r4, lsl #8
	pdu->type = prev->type;
   16844:	5c68      	ldrb	r0, [r5, r1]
   16846:	5cea      	ldrb	r2, [r5, r3]
   16848:	f360 0203 	bfi	r2, r0, #0, #4
	pdu->rfu = 0;
   1684c:	f36f 1204 	bfc	r2, #4, #1
   16850:	54ea      	strb	r2, [r5, r3]
		pdu->chan_sel = prev->chan_sel;
   16852:	5c6a      	ldrb	r2, [r5, r1]
   16854:	5ce9      	ldrb	r1, [r5, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   16856:	f898 0000 	ldrb.w	r0, [r8]
		pdu->chan_sel = prev->chan_sel;
   1685a:	f3c2 1240 	ubfx	r2, r2, #5, #1
   1685e:	f362 1145 	bfi	r1, r2, #5, #1
   16862:	54e9      	strb	r1, [r5, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   16864:	2200      	movs	r2, #0
   16866:	f108 0102 	add.w	r1, r8, #2
   1686a:	09c0      	lsrs	r0, r0, #7
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   1686c:	18ee      	adds	r6, r5, r3
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   1686e:	f7ff fdc9 	bl	16404 <ll_rl_find>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   16872:	2807      	cmp	r0, #7
   16874:	d895      	bhi.n	167a2 <ll_rl_rpa_update+0x96>
	ll_rl_pdu_adv_update(idx, pdu);
   16876:	4631      	mov	r1, r6
   16878:	f7ff fef2 	bl	16660 <ll_rl_pdu_adv_update>
	       prev->len - BDADDR_SIZE);
   1687c:	787a      	ldrb	r2, [r7, #1]
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
   1687e:	f107 0108 	add.w	r1, r7, #8
   16882:	3a06      	subs	r2, #6
   16884:	f106 0008 	add.w	r0, r6, #8
   16888:	f7ea f82f 	bl	8ea <memcpy>
	pdu->len = prev->len;
   1688c:	787b      	ldrb	r3, [r7, #1]
   1688e:	7073      	strb	r3, [r6, #1]
	radio_adv_data->last = last;
   16890:	f885 4203 	strb.w	r4, [r5, #515]	; 0x203
			rpa_adv_refresh();
		}
#endif
	}
}
   16894:	b007      	add	sp, #28
   16896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1689a:	bf00      	nop
   1689c:	20004b70 	.word	0x20004b70
   168a0:	20004ba4 	.word	0x20004ba4
   168a4:	200027ef 	.word	0x200027ef
   168a8:	20002767 	.word	0x20002767
   168ac:	2000272e 	.word	0x2000272e

000168b0 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
   168b0:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   168b2:	2001      	movs	r0, #1
   168b4:	f7ff ff2a 	bl	1670c <ll_rl_rpa_update>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   168b8:	4b03      	ldr	r3, [pc, #12]	; (168c8 <rpa_timeout+0x18>)
   168ba:	4904      	ldr	r1, [pc, #16]	; (168cc <rpa_timeout+0x1c>)
   168bc:	681a      	ldr	r2, [r3, #0]
   168be:	4804      	ldr	r0, [pc, #16]	; (168d0 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
   168c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   168c4:	f009 bb66 	b.w	1ff94 <k_delayed_work_submit_to_queue>
   168c8:	20004ba4 	.word	0x20004ba4
   168cc:	20004b7c 	.word	0x20004b7c
   168d0:	20005218 	.word	0x20005218

000168d4 <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   168d4:	4b07      	ldr	r3, [pc, #28]	; (168f4 <ll_adv_scan_state_cb+0x20>)
	if (!rl_enable) {
   168d6:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
   168d8:	b130      	cbz	r0, 168e8 <ll_adv_scan_state_cb+0x14>
	if (!rl_enable) {
   168da:	b14b      	cbz	r3, 168f0 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   168dc:	4b06      	ldr	r3, [pc, #24]	; (168f8 <ll_adv_scan_state_cb+0x24>)
   168de:	4907      	ldr	r1, [pc, #28]	; (168fc <ll_adv_scan_state_cb+0x28>)
   168e0:	681a      	ldr	r2, [r3, #0]
   168e2:	4807      	ldr	r0, [pc, #28]	; (16900 <ll_adv_scan_state_cb+0x2c>)
   168e4:	f009 bb56 	b.w	1ff94 <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
   168e8:	b113      	cbz	r3, 168f0 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_cancel(&rpa_work);
   168ea:	4804      	ldr	r0, [pc, #16]	; (168fc <ll_adv_scan_state_cb+0x28>)
   168ec:	f009 baf8 	b.w	1fee0 <k_delayed_work_cancel>
   168f0:	4770      	bx	lr
   168f2:	bf00      	nop
   168f4:	20002928 	.word	0x20002928
   168f8:	20004ba4 	.word	0x20004ba4
   168fc:	20004b7c 	.word	0x20004b7c
   16900:	20005218 	.word	0x20005218

00016904 <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   16904:	2008      	movs	r0, #8
   16906:	4770      	bx	lr

00016908 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   16908:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
   1690a:	f7ff fc2d 	bl	16168 <rl_access_check.constprop.1>
   1690e:	b178      	cbz	r0, 16930 <ll_rl_clear+0x28>
		rl[i].taken = 0;
   16910:	4908      	ldr	r1, [pc, #32]	; (16934 <ll_rl_clear+0x2c>)
   16912:	2300      	movs	r3, #0
   16914:	2428      	movs	r4, #40	; 0x28
   16916:	fb04 f203 	mul.w	r2, r4, r3
   1691a:	3301      	adds	r3, #1
   1691c:	5c88      	ldrb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1691e:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   16920:	f36f 0000 	bfc	r0, #0, #1
   16924:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16926:	d1f6      	bne.n	16916 <ll_rl_clear+0xe>
	peer_irk_count = 0;
   16928:	4b03      	ldr	r3, [pc, #12]	; (16938 <ll_rl_clear+0x30>)
   1692a:	2000      	movs	r0, #0
   1692c:	7018      	strb	r0, [r3, #0]
   1692e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16930:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   16932:	bd10      	pop	{r4, pc}
   16934:	200027e8 	.word	0x200027e8
   16938:	2000275e 	.word	0x2000275e

0001693c <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   1693c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16940:	b085      	sub	sp, #20
   16942:	4607      	mov	r7, r0
   16944:	4689      	mov	r9, r1
   16946:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   16948:	f7ff fc0e 	bl	16168 <rl_access_check.constprop.1>
   1694c:	2800      	cmp	r0, #0
   1694e:	f000 8086 	beq.w	16a5e <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   16952:	f107 0801 	add.w	r8, r7, #1
   16956:	f10d 020f 	add.w	r2, sp, #15
   1695a:	4641      	mov	r1, r8
   1695c:	7838      	ldrb	r0, [r7, #0]
   1695e:	f7ff fd51 	bl	16404 <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
   16962:	2807      	cmp	r0, #7
   16964:	d97d      	bls.n	16a62 <ll_rl_add+0x126>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
   16966:	f89d 500f 	ldrb.w	r5, [sp, #15]
   1696a:	2d07      	cmp	r5, #7
   1696c:	d87b      	bhi.n	16a66 <ll_rl_add+0x12a>
   1696e:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   16972:	4c3e      	ldr	r4, [pc, #248]	; (16a6c <ll_rl_add+0x130>)
   16974:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   16978:	2628      	movs	r6, #40	; 0x28
   1697a:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1697c:	f10b 0001 	add.w	r0, fp, #1
   16980:	2206      	movs	r2, #6
   16982:	4641      	mov	r1, r8
   16984:	4420      	add	r0, r4
   16986:	f7e9 ffb0 	bl	8ea <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1698a:	7839      	ldrb	r1, [r7, #0]
   1698c:	5da3      	ldrb	r3, [r4, r6]
   1698e:	19a2      	adds	r2, r4, r6
   16990:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   16994:	4648      	mov	r0, r9
   16996:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   16998:	9201      	str	r2, [sp, #4]
   1699a:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1699c:	f7f4 f891 	bl	aac2 <mem_nz>
   169a0:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   169a2:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   169a4:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   169a8:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   169aa:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   169ac:	f7f4 f889 	bl	aac2 <mem_nz>
   169b0:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
   169b2:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   169b4:	f000 0001 	and.w	r0, r0, #1
   169b8:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   169bc:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   169c0:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
   169c2:	d138      	bne.n	16a36 <ll_rl_add+0xfa>
		rl[i].pirk_idx = peer_irk_count;
		peer_irk_rl_ids[peer_irk_count] = i;
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
   169c4:	b158      	cbz	r0, 169de <ll_rl_add+0xa2>
		memcpy(rl[i].local_irk, lirk, 16);
   169c6:	f10b 0007 	add.w	r0, fp, #7
   169ca:	2210      	movs	r2, #16
   169cc:	4651      	mov	r1, sl
   169ce:	4420      	add	r0, r4
   169d0:	f7e9 ff8b 	bl	8ea <memcpy>
		rl[i].local_rpa = NULL;
   169d4:	2328      	movs	r3, #40	; 0x28
   169d6:	fb03 4305 	mla	r3, r3, r5, r4
   169da:	2200      	movs	r2, #0
   169dc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0;
   169de:	2628      	movs	r6, #40	; 0x28
   169e0:	436e      	muls	r6, r5
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   169e2:	f10b 0018 	add.w	r0, fp, #24
   169e6:	2206      	movs	r2, #6
   169e8:	2100      	movs	r1, #0
   169ea:	4420      	add	r0, r4
   169ec:	f7e9 ffa9 	bl	942 <memset>
	rl[i].rpas_ready = 0;
   169f0:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
   169f2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   169f6:	f36f 1304 	bfc	r3, #4, #1
   169fa:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   169fc:	2200      	movs	r2, #0
   169fe:	4641      	mov	r1, r8
   16a00:	7838      	ldrb	r0, [r7, #0]
   16a02:	f7ff fb53 	bl	160ac <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   16a06:	2807      	cmp	r0, #7
   16a08:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   16a0a:	bf9d      	ittte	ls
   16a0c:	4a18      	ldrls	r2, [pc, #96]	; (16a70 <ll_rl_add+0x134>)
		rl[i].wl = 1;
   16a0e:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   16a12:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
   16a16:	f36f 1345 	bfchi	r3, #5, #1
   16a1a:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
   16a1c:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   16a20:	bf98      	it	ls
   16a22:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
   16a24:	435d      	muls	r5, r3

	return 0;
   16a26:	2000      	movs	r0, #0
	rl[i].taken = 1;
   16a28:	5d63      	ldrb	r3, [r4, r5]
   16a2a:	f043 0301 	orr.w	r3, r3, #1
   16a2e:	5563      	strb	r3, [r4, r5]
}
   16a30:	b005      	add	sp, #20
   16a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   16a36:	4b0f      	ldr	r3, [pc, #60]	; (16a74 <ll_rl_add+0x138>)
   16a38:	7819      	ldrb	r1, [r3, #0]
   16a3a:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   16a3c:	4a0e      	ldr	r2, [pc, #56]	; (16a78 <ll_rl_add+0x13c>)
   16a3e:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   16a40:	1c4a      	adds	r2, r1, #1
   16a42:	701a      	strb	r2, [r3, #0]
   16a44:	4b0d      	ldr	r3, [pc, #52]	; (16a7c <ll_rl_add+0x140>)
   16a46:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   16a4a:	f109 0210 	add.w	r2, r9, #16
   16a4e:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   16a50:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   16a54:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   16a58:	454a      	cmp	r2, r9
   16a5a:	d1f9      	bne.n	16a50 <ll_rl_add+0x114>
   16a5c:	e7b2      	b.n	169c4 <ll_rl_add+0x88>
		return BT_HCI_ERR_CMD_DISALLOWED;
   16a5e:	200c      	movs	r0, #12
   16a60:	e7e6      	b.n	16a30 <ll_rl_add+0xf4>
		return BT_HCI_ERR_INVALID_PARAM;
   16a62:	2012      	movs	r0, #18
   16a64:	e7e4      	b.n	16a30 <ll_rl_add+0xf4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   16a66:	2007      	movs	r0, #7
   16a68:	e7e2      	b.n	16a30 <ll_rl_add+0xf4>
   16a6a:	bf00      	nop
   16a6c:	200027e8 	.word	0x200027e8
   16a70:	2000295b 	.word	0x2000295b
   16a74:	2000275e 	.word	0x2000275e
   16a78:	2000275f 	.word	0x2000275f
   16a7c:	20002767 	.word	0x20002767

00016a80 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   16a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a84:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
   16a86:	f7ff fb6f 	bl	16168 <rl_access_check.constprop.1>
   16a8a:	2800      	cmp	r0, #0
   16a8c:	d053      	beq.n	16b36 <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   16a8e:	f109 0a01 	add.w	sl, r9, #1
   16a92:	2200      	movs	r2, #0
   16a94:	4651      	mov	r1, sl
   16a96:	f899 0000 	ldrb.w	r0, [r9]
   16a9a:	f7ff fcb3 	bl	16404 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   16a9e:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   16aa0:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
   16aa2:	d84b      	bhi.n	16b3c <ll_rl_remove+0xbc>
		u8_t j, k;

		if (rl[i].pirk) {
   16aa4:	f04f 0b28 	mov.w	fp, #40	; 0x28
   16aa8:	4c26      	ldr	r4, [pc, #152]	; (16b44 <ll_rl_remove+0xc4>)
   16aaa:	fb0b f300 	mul.w	r3, fp, r0
   16aae:	18e2      	adds	r2, r4, r3
   16ab0:	5ce3      	ldrb	r3, [r4, r3]
   16ab2:	075b      	lsls	r3, r3, #29
   16ab4:	d524      	bpl.n	16b00 <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   16ab6:	4e24      	ldr	r6, [pc, #144]	; (16b48 <ll_rl_remove+0xc8>)
   16ab8:	7835      	ldrb	r5, [r6, #0]
   16aba:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
   16abc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   16ac0:	d01b      	beq.n	16afa <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   16ac2:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
   16ac4:	42af      	cmp	r7, r5
   16ac6:	d018      	beq.n	16afa <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   16ac8:	4820      	ldr	r0, [pc, #128]	; (16b4c <ll_rl_remove+0xcc>)
   16aca:	2210      	movs	r2, #16
   16acc:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   16ad0:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   16ad4:	f7e9 ff09 	bl	8ea <memcpy>
   16ad8:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
   16ada:	fb0b f103 	mul.w	r1, fp, r3
   16ade:	1862      	adds	r2, r4, r1
   16ae0:	5c61      	ldrb	r1, [r4, r1]
   16ae2:	f011 0f01 	tst.w	r1, #1
   16ae6:	b2d8      	uxtb	r0, r3
   16ae8:	d021      	beq.n	16b2e <ll_rl_remove+0xae>
   16aea:	0749      	lsls	r1, r1, #29
   16aec:	d51f      	bpl.n	16b2e <ll_rl_remove+0xae>
   16aee:	7dd1      	ldrb	r1, [r2, #23]
   16af0:	42a9      	cmp	r1, r5
   16af2:	d11c      	bne.n	16b2e <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
   16af4:	4b16      	ldr	r3, [pc, #88]	; (16b50 <ll_rl_remove+0xd0>)
						rl[k].pirk_idx = pi;
   16af6:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   16af8:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
   16afa:	7833      	ldrb	r3, [r6, #0]
   16afc:	3b01      	subs	r3, #1
   16afe:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   16b00:	2200      	movs	r2, #0
   16b02:	4651      	mov	r1, sl
   16b04:	f899 0000 	ldrb.w	r0, [r9]
   16b08:	f7ff fad0 	bl	160ac <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   16b0c:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   16b0e:	bf9f      	itttt	ls
   16b10:	4b10      	ldrls	r3, [pc, #64]	; (16b54 <ll_rl_remove+0xd4>)
   16b12:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
   16b16:	23ff      	movls	r3, #255	; 0xff
   16b18:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
   16b1a:	2028      	movs	r0, #40	; 0x28
   16b1c:	fb00 f008 	mul.w	r0, r0, r8
   16b20:	5c23      	ldrb	r3, [r4, r0]
   16b22:	f36f 0300 	bfc	r3, #0, #1
   16b26:	5423      	strb	r3, [r4, r0]
		return 0;
   16b28:	2000      	movs	r0, #0
   16b2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b2e:	3301      	adds	r3, #1
				for (k = 0;
   16b30:	2b08      	cmp	r3, #8
   16b32:	d1d2      	bne.n	16ada <ll_rl_remove+0x5a>
   16b34:	e7e1      	b.n	16afa <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   16b36:	200c      	movs	r0, #12
   16b38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16b3c:	2002      	movs	r0, #2
}
   16b3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b42:	bf00      	nop
   16b44:	200027e8 	.word	0x200027e8
   16b48:	2000275e 	.word	0x2000275e
   16b4c:	20002767 	.word	0x20002767
   16b50:	2000275f 	.word	0x2000275f
   16b54:	2000295b 	.word	0x2000295b

00016b58 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   16b58:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   16b5a:	795c      	ldrb	r4, [r3, #5]
   16b5c:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   16b60:	2c40      	cmp	r4, #64	; 0x40
{
   16b62:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   16b64:	d117      	bne.n	16b96 <ll_rl_crpa_set+0x3e>

		if (id_addr) {
   16b66:	b119      	cbz	r1, 16b70 <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   16b68:	2200      	movs	r2, #0
   16b6a:	f7ff fc4b 	bl	16404 <ll_rl_find>
   16b6e:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   16b70:	2a07      	cmp	r2, #7
   16b72:	d810      	bhi.n	16b96 <ll_rl_crpa_set+0x3e>
   16b74:	2128      	movs	r1, #40	; 0x28
   16b76:	4c08      	ldr	r4, [pc, #32]	; (16b98 <ll_rl_crpa_set+0x40>)
   16b78:	fb01 f302 	mul.w	r3, r1, r2
   16b7c:	5ce3      	ldrb	r3, [r4, r3]
   16b7e:	07db      	lsls	r3, r3, #31
   16b80:	d509      	bpl.n	16b96 <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   16b82:	2018      	movs	r0, #24
   16b84:	fb11 0002 	smlabb	r0, r1, r2, r0
   16b88:	4420      	add	r0, r4
   16b8a:	4629      	mov	r1, r5
   16b8c:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
   16b8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   16b92:	f7e9 beaa 	b.w	8ea <memcpy>
   16b96:	bd70      	pop	{r4, r5, r6, pc}
   16b98:	200027e8 	.word	0x200027e8

00016b9c <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   16b9c:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   16b9e:	2200      	movs	r2, #0
{
   16ba0:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   16ba2:	1c41      	adds	r1, r0, #1
   16ba4:	7800      	ldrb	r0, [r0, #0]
   16ba6:	f7ff fc2d 	bl	16404 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   16baa:	2807      	cmp	r0, #7
   16bac:	d901      	bls.n	16bb2 <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16bae:	2002      	movs	r0, #2
   16bb0:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   16bb2:	2428      	movs	r4, #40	; 0x28
   16bb4:	2318      	movs	r3, #24
   16bb6:	fb14 3000 	smlabb	r0, r4, r0, r3
   16bba:	4c07      	ldr	r4, [pc, #28]	; (16bd8 <ll_rl_crpa_get+0x3c>)
   16bbc:	4404      	add	r4, r0
   16bbe:	2106      	movs	r1, #6
   16bc0:	4620      	mov	r0, r4
   16bc2:	f7f3 ff7e 	bl	aac2 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   16bc6:	2800      	cmp	r0, #0
   16bc8:	d0f1      	beq.n	16bae <ll_rl_crpa_get+0x12>
   16bca:	2206      	movs	r2, #6
   16bcc:	4621      	mov	r1, r4
   16bce:	4628      	mov	r0, r5
   16bd0:	f7e9 fe8b 	bl	8ea <memcpy>
			return 0;
   16bd4:	2000      	movs	r0, #0
}
   16bd6:	bd38      	pop	{r3, r4, r5, pc}
   16bd8:	200027e8 	.word	0x200027e8

00016bdc <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   16bdc:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   16bde:	2200      	movs	r2, #0
{
   16be0:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   16be2:	1c41      	adds	r1, r0, #1
   16be4:	7800      	ldrb	r0, [r0, #0]
   16be6:	f7ff fc0d 	bl	16404 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   16bea:	2807      	cmp	r0, #7
   16bec:	d80a      	bhi.n	16c04 <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   16bee:	4b06      	ldr	r3, [pc, #24]	; (16c08 <ll_rl_lrpa_get+0x2c>)
   16bf0:	2228      	movs	r2, #40	; 0x28
   16bf2:	fb02 3000 	mla	r0, r2, r0, r3
   16bf6:	2206      	movs	r2, #6
   16bf8:	6a41      	ldr	r1, [r0, #36]	; 0x24
   16bfa:	4620      	mov	r0, r4
   16bfc:	f7e9 fe75 	bl	8ea <memcpy>
		return 0;
   16c00:	2000      	movs	r0, #0
   16c02:	bd10      	pop	{r4, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16c04:	2002      	movs	r0, #2
}
   16c06:	bd10      	pop	{r4, pc}
   16c08:	200027e8 	.word	0x200027e8

00016c0c <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   16c0c:	b510      	push	{r4, lr}
   16c0e:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   16c10:	f7ff faaa 	bl	16168 <rl_access_check.constprop.1>
   16c14:	b140      	cbz	r0, 16c28 <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   16c16:	b11c      	cbz	r4, 16c20 <ll_rl_enable+0x14>
   16c18:	2c01      	cmp	r4, #1
   16c1a:	d001      	beq.n	16c20 <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   16c1c:	2012      	movs	r0, #18
	}

	return 0;
}
   16c1e:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   16c20:	4b02      	ldr	r3, [pc, #8]	; (16c2c <ll_rl_enable+0x20>)
   16c22:	701c      	strb	r4, [r3, #0]
	return 0;
   16c24:	2000      	movs	r0, #0
		break;
   16c26:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16c28:	200c      	movs	r0, #12
   16c2a:	bd10      	pop	{r4, pc}
   16c2c:	20002928 	.word	0x20002928

00016c30 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   16c30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16c34:	4358      	muls	r0, r3
   16c36:	4b01      	ldr	r3, [pc, #4]	; (16c3c <ll_rl_timeout_set+0xc>)
   16c38:	6018      	str	r0, [r3, #0]
   16c3a:	4770      	bx	lr
   16c3c:	20004ba4 	.word	0x20004ba4

00016c40 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   16c40:	b538      	push	{r3, r4, r5, lr}
   16c42:	4605      	mov	r5, r0
   16c44:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
   16c46:	f7ff fa8f 	bl	16168 <rl_access_check.constprop.1>
   16c4a:	b1d8      	cbz	r0, 16c84 <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   16c4c:	2200      	movs	r2, #0
   16c4e:	1c69      	adds	r1, r5, #1
   16c50:	7828      	ldrb	r0, [r5, #0]
   16c52:	f7ff fbd7 	bl	16404 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   16c56:	2807      	cmp	r0, #7
   16c58:	d816      	bhi.n	16c88 <ll_priv_mode_set+0x48>
		switch (mode) {
   16c5a:	b11c      	cbz	r4, 16c64 <ll_priv_mode_set+0x24>
   16c5c:	2c01      	cmp	r4, #1
   16c5e:	d00a      	beq.n	16c76 <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
   16c60:	2012      	movs	r0, #18
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
   16c62:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   16c64:	2328      	movs	r3, #40	; 0x28
   16c66:	4a09      	ldr	r2, [pc, #36]	; (16c8c <ll_priv_mode_set+0x4c>)
   16c68:	4358      	muls	r0, r3
   16c6a:	5c13      	ldrb	r3, [r2, r0]
   16c6c:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
   16c70:	5413      	strb	r3, [r2, r0]
	return 0;
   16c72:	2000      	movs	r0, #0
			break;
   16c74:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   16c76:	2328      	movs	r3, #40	; 0x28
   16c78:	4a04      	ldr	r2, [pc, #16]	; (16c8c <ll_priv_mode_set+0x4c>)
   16c7a:	4358      	muls	r0, r3
   16c7c:	5c13      	ldrb	r3, [r2, r0]
   16c7e:	f043 0310 	orr.w	r3, r3, #16
   16c82:	e7f5      	b.n	16c70 <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
   16c84:	200c      	movs	r0, #12
   16c86:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16c88:	2002      	movs	r0, #2
   16c8a:	bd38      	pop	{r3, r4, r5, pc}
   16c8c:	200027e8 	.word	0x200027e8

00016c90 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   16c90:	4a19      	ldr	r2, [pc, #100]	; (16cf8 <ll_filter_reset+0x68>)
   16c92:	2300      	movs	r3, #0
{
   16c94:	b430      	push	{r4, r5}
	wl_anon = 0;
   16c96:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
   16c98:	4a18      	ldr	r2, [pc, #96]	; (16cfc <ll_filter_reset+0x6c>)
   16c9a:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   16c9e:	f36f 0100 	bfc	r1, #0, #1
   16ca2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   16ca6:	3301      	adds	r3, #1
   16ca8:	2b08      	cmp	r3, #8
   16caa:	d1f6      	bne.n	16c9a <ll_filter_reset+0xa>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
   16cac:	4a14      	ldr	r2, [pc, #80]	; (16d00 <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   16cae:	4915      	ldr	r1, [pc, #84]	; (16d04 <ll_filter_reset+0x74>)
	rl_enable = 0;
   16cb0:	2300      	movs	r3, #0
   16cb2:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   16cb4:	4a14      	ldr	r2, [pc, #80]	; (16d08 <ll_filter_reset+0x78>)
   16cb6:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   16cb8:	4a14      	ldr	r2, [pc, #80]	; (16d0c <ll_filter_reset+0x7c>)
		rl[i].taken = 0;
   16cba:	4915      	ldr	r1, [pc, #84]	; (16d10 <ll_filter_reset+0x80>)
	rpa_last_ms = -1;
   16cbc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   16cc0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16cc4:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
   16cc8:	2528      	movs	r5, #40	; 0x28
   16cca:	fb05 f203 	mul.w	r2, r5, r3
   16cce:	3301      	adds	r3, #1
   16cd0:	5c8c      	ldrb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16cd2:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   16cd4:	f36f 0400 	bfc	r4, #0, #1
   16cd8:	548c      	strb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16cda:	d1f6      	bne.n	16cca <ll_filter_reset+0x3a>
	peer_irk_count = 0;
   16cdc:	4b0d      	ldr	r3, [pc, #52]	; (16d14 <ll_filter_reset+0x84>)
   16cde:	2200      	movs	r2, #0
   16ce0:	701a      	strb	r2, [r3, #0]
	rl_clear();
	if (init) {
   16ce2:	b120      	cbz	r0, 16cee <ll_filter_reset+0x5e>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   16ce4:	490c      	ldr	r1, [pc, #48]	; (16d18 <ll_filter_reset+0x88>)
   16ce6:	480d      	ldr	r0, [pc, #52]	; (16d1c <ll_filter_reset+0x8c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   16ce8:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   16cea:	f009 b8db 	b.w	1fea4 <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   16cee:	480b      	ldr	r0, [pc, #44]	; (16d1c <ll_filter_reset+0x8c>)
}
   16cf0:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   16cf2:	f009 b8f5 	b.w	1fee0 <k_delayed_work_cancel>
   16cf6:	bf00      	nop
   16cf8:	20004b78 	.word	0x20004b78
   16cfc:	2000295b 	.word	0x2000295b
   16d00:	20002928 	.word	0x20002928
   16d04:	000dbba0 	.word	0x000dbba0
   16d08:	20004ba4 	.word	0x20004ba4
   16d0c:	20004b70 	.word	0x20004b70
   16d10:	200027e8 	.word	0x200027e8
   16d14:	2000275e 	.word	0x2000275e
   16d18:	000168b1 	.word	0x000168b1
   16d1c:	20004b7c 	.word	0x20004b7c

00016d20 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   16d20:	4b05      	ldr	r3, [pc, #20]	; (16d38 <cntr_init+0x18>)
   16d22:	2200      	movs	r2, #0
   16d24:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
   16d28:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   16d2c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
   16d30:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   16d34:	4770      	bx	lr
   16d36:	bf00      	nop
   16d38:	4000b000 	.word	0x4000b000

00016d3c <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
   16d3c:	4a04      	ldr	r2, [pc, #16]	; (16d50 <cntr_start+0x14>)
   16d3e:	7813      	ldrb	r3, [r2, #0]
   16d40:	1c59      	adds	r1, r3, #1
   16d42:	7011      	strb	r1, [r2, #0]
   16d44:	2001      	movs	r0, #1
   16d46:	b913      	cbnz	r3, 16d4e <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
   16d48:	4a02      	ldr	r2, [pc, #8]	; (16d54 <cntr_start+0x18>)
   16d4a:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   16d4c:	4618      	mov	r0, r3
}
   16d4e:	4770      	bx	lr
   16d50:	200029cd 	.word	0x200029cd
   16d54:	4000b000 	.word	0x4000b000

00016d58 <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
   16d58:	4b09      	ldr	r3, [pc, #36]	; (16d80 <cntr_stop+0x28>)
   16d5a:	7818      	ldrb	r0, [r3, #0]
   16d5c:	b928      	cbnz	r0, 16d6a <cntr_stop+0x12>
   16d5e:	4040      	eors	r0, r0
   16d60:	f380 8811 	msr	BASEPRI, r0
   16d64:	f04f 0004 	mov.w	r0, #4
   16d68:	df02      	svc	2

	if (--_refcount) {
   16d6a:	3801      	subs	r0, #1
   16d6c:	b2c0      	uxtb	r0, r0
   16d6e:	7018      	strb	r0, [r3, #0]
   16d70:	2301      	movs	r3, #1
   16d72:	b910      	cbnz	r0, 16d7a <cntr_stop+0x22>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
   16d74:	4a03      	ldr	r2, [pc, #12]	; (16d84 <cntr_stop+0x2c>)
   16d76:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   16d78:	4770      	bx	lr
		return 1;
   16d7a:	4618      	mov	r0, r3
}
   16d7c:	4770      	bx	lr
   16d7e:	bf00      	nop
   16d80:	200029cd 	.word	0x200029cd
   16d84:	4000b000 	.word	0x4000b000

00016d88 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
   16d88:	4b01      	ldr	r3, [pc, #4]	; (16d90 <cntr_cnt_get+0x8>)
   16d8a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   16d8e:	4770      	bx	lr
   16d90:	4000b000 	.word	0x4000b000

00016d94 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
   16d94:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   16d98:	4b01      	ldr	r3, [pc, #4]	; (16da0 <cntr_cmp_set+0xc>)
   16d9a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
   16d9e:	4770      	bx	lr
   16da0:	4000b000 	.word	0x4000b000

00016da4 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
   16da4:	4b11      	ldr	r3, [pc, #68]	; (16dec <do_ecb+0x48>)
{
   16da6:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
   16da8:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   16daa:	2500      	movs	r5, #0
   16dac:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
   16dae:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   16db0:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   16db4:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   16db8:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
   16dbc:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   16dbe:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   16dc2:	b934      	cbnz	r4, 16dd2 <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   16dc4:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   16dc8:	b91c      	cbnz	r4, 16dd2 <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   16dca:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   16dce:	2c00      	cmp	r4, #0
   16dd0:	d1f5      	bne.n	16dbe <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
   16dd2:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   16dd4:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
   16dd8:	2c00      	cmp	r4, #0
   16dda:	d1e8      	bne.n	16dae <do_ecb+0xa>
   16ddc:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
   16de0:	2e00      	cmp	r6, #0
   16de2:	d0e4      	beq.n	16dae <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   16de4:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   16de8:	bd70      	pop	{r4, r5, r6, pc}
   16dea:	bf00      	nop
   16dec:	4000e000 	.word	0x4000e000

00016df0 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   16df0:	b570      	push	{r4, r5, r6, lr}
   16df2:	b08c      	sub	sp, #48	; 0x30
   16df4:	460e      	mov	r6, r1
   16df6:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   16df8:	4601      	mov	r1, r0
   16dfa:	2210      	movs	r2, #16
   16dfc:	4668      	mov	r0, sp
{
   16dfe:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   16e00:	f7f3 fe50 	bl	aaa4 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   16e04:	2210      	movs	r2, #16
   16e06:	eb0d 0002 	add.w	r0, sp, r2
   16e0a:	4631      	mov	r1, r6
   16e0c:	f7f3 fe4a 	bl	aaa4 <mem_rcopy>

	do_ecb(&ecb);
   16e10:	4668      	mov	r0, sp
   16e12:	f7ff ffc7 	bl	16da4 <do_ecb>

	if (cipher_text_le) {
   16e16:	b125      	cbz	r5, 16e22 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   16e18:	2210      	movs	r2, #16
   16e1a:	a908      	add	r1, sp, #32
   16e1c:	4628      	mov	r0, r5
   16e1e:	f7f3 fe41 	bl	aaa4 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   16e22:	b124      	cbz	r4, 16e2e <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   16e24:	2210      	movs	r2, #16
   16e26:	a908      	add	r1, sp, #32
   16e28:	4620      	mov	r0, r4
   16e2a:	f7e9 fd5e 	bl	8ea <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   16e2e:	b00c      	add	sp, #48	; 0x30
   16e30:	bd70      	pop	{r4, r5, r6, pc}
	...

00016e34 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
   16e34:	4b07      	ldr	r3, [pc, #28]	; (16e54 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
   16e36:	4a08      	ldr	r2, [pc, #32]	; (16e58 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   16e38:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
   16e3c:	4907      	ldr	r1, [pc, #28]	; (16e5c <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
   16e3e:	4a08      	ldr	r2, [pc, #32]	; (16e60 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
   16e40:	2800      	cmp	r0, #0
   16e42:	bf14      	ite	ne
   16e44:	4610      	movne	r0, r2
   16e46:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   16e48:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
   16e4a:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   16e4e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   16e52:	4770      	bx	lr
   16e54:	4001f000 	.word	0x4001f000
   16e58:	40008140 	.word	0x40008140
   16e5c:	40001004 	.word	0x40001004
   16e60:	40001000 	.word	0x40001000

00016e64 <sw_switch.isra.6>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   16e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   16e68:	4d75      	ldr	r5, [pc, #468]	; (17040 <sw_switch.isra.6+0x1dc>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   16e6a:	4c76      	ldr	r4, [pc, #472]	; (17044 <sw_switch.isra.6+0x1e0>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   16e6c:	782e      	ldrb	r6, [r5, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   16e6e:	4b76      	ldr	r3, [pc, #472]	; (17048 <sw_switch.isra.6+0x1e4>)
   16e70:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   16e74:	b233      	sxth	r3, r6
   16e76:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   16e7a:	4688      	mov	r8, r1
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   16e7c:	f10e 4180 	add.w	r1, lr, #1073741824	; 0x40000000
   16e80:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
   16e84:	f8c4 1564 	str.w	r1, [r4, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   16e88:	f106 040b 	add.w	r4, r6, #11
   16e8c:	b2e4      	uxtb	r4, r4
   16e8e:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
   16e90:	496e      	ldr	r1, [pc, #440]	; (1704c <sw_switch.isra.6+0x1e8>)
   16e92:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   16e96:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   16e9a:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   16e9e:	4461      	add	r1, ip
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
   16ea0:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
   16ea4:	f106 0708 	add.w	r7, r6, #8
   16ea8:	f10e 0e04 	add.w	lr, lr, #4

	if (dir) {
   16eac:	2800      	cmp	r0, #0
   16eae:	f000 80aa 	beq.w	17006 <sw_switch.isra.6+0x1a2>
	}
}

static inline u32_t hal_radio_tx_ready_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
   16eb2:	2a02      	cmp	r2, #2
   16eb4:	f000 8087 	beq.w	16fc6 <sw_switch.isra.6+0x162>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
   16eb8:	f649 70c4 	movw	r0, #40900	; 0x9fc4
   16ebc:	f64a 095c 	movw	r9, #43100	; 0xa85c
   16ec0:	2a04      	cmp	r2, #4
   16ec2:	bf18      	it	ne
   16ec4:	4681      	movne	r9, r0
	}
}

static inline u32_t hal_radio_rx_chain_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
   16ec6:	f1b8 0f02 	cmp.w	r8, #2
   16eca:	d07f      	beq.n	16fcc <sw_switch.isra.6+0x168>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
   16ecc:	f242 42b8 	movw	r2, #9400	; 0x24b8
   16ed0:	f247 2074 	movw	r0, #29300	; 0x7274
   16ed4:	f1b8 0f04 	cmp.w	r8, #4
   16ed8:	bf18      	it	ne
   16eda:	4610      	movne	r0, r2
   16edc:	f509 79fa 	add.w	r9, r9, #500	; 0x1f4
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   16ee0:	4a5b      	ldr	r2, [pc, #364]	; (17050 <sw_switch.isra.6+0x1ec>)
   16ee2:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

		hal_radio_txen_on_sw_switch(ppi);

#if defined(CONFIG_BT_CTLR_PHY_CODED)
#if defined(CONFIG_SOC_NRF52840)
		if (phy_curr & BIT(2)) {
   16ee6:	f018 0f04 	tst.w	r8, #4
		delay = HAL_RADIO_NS2US_ROUND(
   16eea:	4448      	add	r0, r9
   16eec:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
   16ef0:	fbb0 f0fa 	udiv	r0, r0, sl
		if (phy_curr & BIT(2)) {
   16ef4:	d06d      	beq.n	16fd2 <sw_switch.isra.6+0x16e>
   16ef6:	f242 44b8 	movw	r4, #9400	; 0x24b8
   16efa:	f644 4190 	movw	r1, #19600	; 0x4c90
   16efe:	f1b8 0f04 	cmp.w	r8, #4
   16f02:	bf18      	it	ne
   16f04:	4621      	movne	r1, r4
   16f06:	009c      	lsls	r4, r3, #2
   16f08:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000

			u8_t ppi_en =
			    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI;
			u8_t cc_s2 =
			    SW_SWITCH_TIMER_EVTS_COMP_S2_BASE;
			u8_t ppi_dis =
   16f0c:	b2fa      	uxtb	r2, r7
   16f0e:	f504 4710 	add.w	r7, r4, #36864	; 0x9000
				HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
				    sw_tifs_toggle);
			u32_t delay_s2;

			/* Calculate assuming reception on S2 coding scheme. */
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   16f12:	4449      	add	r1, r9
				hal_radio_tx_ready_delay_ns_get(
					phy_next, flags_next) +
				hal_radio_rx_chain_delay_ns_get(phy_curr, 0));

			SW_SWITCH_TIMER->CC[cc_s2] =
				SW_SWITCH_TIMER->CC[cc];
   16f14:	f8d7 8540 	ldr.w	r8, [r7, #1344]	; 0x540
			SW_SWITCH_TIMER->CC[cc_s2] =
   16f18:	4f4e      	ldr	r7, [pc, #312]	; (17054 <sw_switch.isra.6+0x1f0>)
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   16f1a:	fbb1 f1fa 	udiv	r1, r1, sl
			SW_SWITCH_TIMER->CC[cc_s2] =
   16f1e:	f8c7 8548 	str.w	r8, [r7, #1352]	; 0x548

			if (delay_s2 < SW_SWITCH_TIMER->CC[cc_s2]) {
   16f22:	f8d7 8548 	ldr.w	r8, [r7, #1352]	; 0x548
   16f26:	4541      	cmp	r1, r8
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   16f28:	bf36      	itet	cc
   16f2a:	f8d7 8548 	ldrcc.w	r8, [r7, #1352]	; 0x548
			} else {
				SW_SWITCH_TIMER->CC[cc_s2] = 1;
   16f2e:	2101      	movcs	r1, #1
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   16f30:	eba8 0101 	subcc.w	r1, r8, r1
				SW_SWITCH_TIMER->CC[cc_s2] = 1;
   16f34:	f8c7 1548 	str.w	r1, [r7, #1352]	; 0x548
			}

			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi_en) =
   16f38:	4f42      	ldr	r7, [pc, #264]	; (17044 <sw_switch.isra.6+0x1e0>)
   16f3a:	f8df 8124 	ldr.w	r8, [pc, #292]	; 17060 <sw_switch.isra.6+0x1fc>
				HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc_s2);
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   16f3e:	4944      	ldr	r1, [pc, #272]	; (17050 <sw_switch.isra.6+0x1ec>)
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi_en) =
   16f40:	f8c7 8590 	str.w	r8, [r7, #1424]	; 0x590
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   16f44:	f8c7 1594 	str.w	r1, [r7, #1428]	; 0x594
   16f48:	f504 31f8 	add.w	r1, r4, #126976	; 0x1f000
				HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;

			/* Include PPI for S2 timing in the active group */
			NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(
				sw_tifs_toggle)] |=
   16f4c:	f8d1 4800 	ldr.w	r4, [r1, #2048]	; 0x800
   16f50:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
   16f54:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
   16f58:	00d1      	lsls	r1, r2, #3
   16f5a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   16f5e:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
			    ppi_dis)	=
			    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(cc_s2);

			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
			    ppi_dis) =
			    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   16f62:	f10e 4280 	add.w	r2, lr, #1073741824	; 0x40000000
   16f66:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
			    ppi_dis)	=
   16f6a:	f8c1 8510 	str.w	r8, [r1, #1296]	; 0x510
			    ppi_dis) =
   16f6e:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
			    sw_tifs_toggle);

			/* Capture CC to cancel the timer that has assumed
			 * S8 reception, if packet will be received in S2.
			 */
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   16f72:	4a39      	ldr	r2, [pc, #228]	; (17058 <sw_switch.isra.6+0x1f4>)
   16f74:	f8c7 2598 	str.w	r2, [r7, #1432]	; 0x598
				HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_EVT;
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_TASK =
				HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_TASK(
   16f78:	f502 42fd 	add.w	r2, r2, #32384	; 0x7e80
   16f7c:	3270      	adds	r2, #112	; 0x70
   16f7e:	4462      	add	r2, ip
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_TASK =
   16f80:	f8c7 259c 	str.w	r2, [r7, #1436]	; 0x59c
				    sw_tifs_toggle);

			NRF_PPI->CHENSET =
   16f84:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   16f88:	f8c7 2504 	str.w	r2, [r7, #1284]	; 0x504
   16f8c:	009b      	lsls	r3, r3, #2
   16f8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16f92:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
   16f96:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   16f9a:	4282      	cmp	r2, r0
		SW_SWITCH_TIMER->CC[cc] -= delay;
   16f9c:	bf8b      	itete	hi
   16f9e:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
   16fa2:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   16fa4:	1a10      	subhi	r0, r2, r0
		SW_SWITCH_TIMER->CC[cc] = 1;
   16fa6:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
   16faa:	bf88      	it	hi
   16fac:	f8c3 0540 	strhi.w	r0, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
   16fb0:	4b24      	ldr	r3, [pc, #144]	; (17044 <sw_switch.isra.6+0x1e0>)
   16fb2:	f44f 6290 	mov.w	r2, #1152	; 0x480
   16fb6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   16fba:	1c73      	adds	r3, r6, #1
	sw_tifs_toggle &= 1;
   16fbc:	f003 0301 	and.w	r3, r3, #1
   16fc0:	702b      	strb	r3, [r5, #0]
   16fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_NS;
   16fc6:	f649 4940 	movw	r9, #40000	; 0x9c40
   16fca:	e77c      	b.n	16ec6 <sw_switch.isra.6+0x62>
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   16fcc:	f241 3088 	movw	r0, #5000	; 0x1388
   16fd0:	e784      	b.n	16edc <sw_switch.isra.6+0x78>
   16fd2:	009a      	lsls	r2, r3, #2
   16fd4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   16fd8:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
				sw_tifs_toggle)] &=
   16fdc:	f8d2 4800 	ldr.w	r4, [r2, #2048]	; 0x800
   16fe0:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
   16fe4:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800
   16fe8:	b2fa      	uxtb	r2, r7
   16fea:	00d2      	lsls	r2, r2, #3
   16fec:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   16ff0:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
			    ppi_dis) =
   16ff4:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   16ff8:	f10e 4180 	add.w	r1, lr, #1073741824	; 0x40000000
   16ffc:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
			    ppi_dis) =
   17000:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
   17004:	e7c2      	b.n	16f8c <sw_switch.isra.6+0x128>
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   17006:	4a15      	ldr	r2, [pc, #84]	; (1705c <sw_switch.isra.6+0x1f8>)
   17008:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   1700c:	b2fa      	uxtb	r2, r7
   1700e:	00d2      	lsls	r2, r2, #3
   17010:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   17014:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
		delay = HAL_RADIO_NS2US_CEIL(
   17018:	202c      	movs	r0, #44	; 0x2c
				ppi_dis) =
   1701a:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
				HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   1701e:	f10e 4180 	add.w	r1, lr, #1073741824	; 0x40000000
   17022:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
				ppi_dis) =
   17026:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
   1702a:	f10c 4280 	add.w	r2, ip, #1073741824	; 0x40000000
   1702e:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
				sw_tifs_toggle)] &=
   17032:	f8d2 1800 	ldr.w	r1, [r2, #2048]	; 0x800
   17036:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
   1703a:	f8c2 1800 	str.w	r1, [r2, #2048]	; 0x800
   1703e:	e7a5      	b.n	16f8c <sw_switch.isra.6+0x128>
   17040:	20002bf0 	.word	0x20002bf0
   17044:	4001f000 	.word	0x4001f000
   17048:	4000110c 	.word	0x4000110c
   1704c:	40009140 	.word	0x40009140
   17050:	40001000 	.word	0x40001000
   17054:	40009000 	.word	0x40009000
   17058:	40001150 	.word	0x40001150
   1705c:	40001004 	.word	0x40001004
   17060:	40009148 	.word	0x40009148

00017064 <isr_radio>:
	if (sfp_radio_isr) {
   17064:	4b02      	ldr	r3, [pc, #8]	; (17070 <isr_radio+0xc>)
   17066:	681b      	ldr	r3, [r3, #0]
   17068:	b103      	cbz	r3, 1706c <isr_radio+0x8>
		sfp_radio_isr();
   1706a:	4718      	bx	r3
   1706c:	4770      	bx	lr
   1706e:	bf00      	nop
   17070:	20002bec 	.word	0x20002bec

00017074 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
   17074:	4b06      	ldr	r3, [pc, #24]	; (17090 <radio_isr_set+0x1c>)
   17076:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
   17078:	4b06      	ldr	r3, [pc, #24]	; (17094 <radio_isr_set+0x20>)
   1707a:	2210      	movs	r2, #16
   1707c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   17080:	4b05      	ldr	r3, [pc, #20]	; (17098 <radio_isr_set+0x24>)
   17082:	2202      	movs	r2, #2
   17084:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   17088:	2001      	movs	r0, #1
   1708a:	f7ea b819 	b.w	10c0 <_arch_irq_enable>
   1708e:	bf00      	nop
   17090:	20002bec 	.word	0x20002bec
   17094:	40001000 	.word	0x40001000
   17098:	e000e100 	.word	0xe000e100

0001709c <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1709c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   170a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   170a4:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   170a6:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   170aa:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   170ae:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   170b2:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   170b6:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   170ba:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   170be:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   170c2:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   170c6:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   170ca:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   170ce:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   170d2:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   170d6:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   170da:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
   170de:	4770      	bx	lr

000170e0 <radio_reset>:
{
   170e0:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   170e2:	2001      	movs	r0, #1
   170e4:	f7e9 fffc 	bl	10e0 <_arch_irq_disable>
	NRF_RADIO->POWER =
   170e8:	4b08      	ldr	r3, [pc, #32]	; (1710c <radio_reset+0x2c>)
   170ea:	2200      	movs	r2, #0
   170ec:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
   170f0:	2201      	movs	r2, #1
   170f2:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   170f6:	4a06      	ldr	r2, [pc, #24]	; (17110 <radio_reset+0x30>)
   170f8:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   170fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   170fe:	f023 0301 	bic.w	r3, r3, #1
   17102:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   17106:	6013      	str	r3, [r2, #0]
   17108:	bd08      	pop	{r3, pc}
   1710a:	bf00      	nop
   1710c:	40001000 	.word	0x40001000
   17110:	40001774 	.word	0x40001774

00017114 <radio_phy_set>:
	switch (phy) {
   17114:	2802      	cmp	r0, #2
   17116:	4b14      	ldr	r3, [pc, #80]	; (17168 <radio_phy_set+0x54>)
   17118:	d010      	beq.n	1713c <radio_phy_set+0x28>
   1711a:	2804      	cmp	r0, #4
   1711c:	d014      	beq.n	17148 <radio_phy_set+0x34>
		*(volatile u32_t *)0x4000173c &= ~0x80000000;
   1711e:	681a      	ldr	r2, [r3, #0]
   17120:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
   17124:	601a      	str	r2, [r3, #0]
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   17126:	2103      	movs	r1, #3
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   17128:	4b10      	ldr	r3, [pc, #64]	; (1716c <radio_phy_set+0x58>)
   1712a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1712e:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   17132:	f042 0201 	orr.w	r2, r2, #1
   17136:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   1713a:	4770      	bx	lr
		*(volatile u32_t *)0x4000173c &= ~0x80000000;
   1713c:	681a      	ldr	r2, [r3, #0]
   1713e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
   17142:	601a      	str	r2, [r3, #0]
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   17144:	2104      	movs	r1, #4
   17146:	e7ef      	b.n	17128 <radio_phy_set+0x14>
		*(volatile u32_t *)0x4000173c |= 0x80000000;
   17148:	681a      	ldr	r2, [r3, #0]
   1714a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   1714e:	601a      	str	r2, [r3, #0]
				((*(volatile u32_t *)0x4000173c) & 0xFFFFFF00) |
   17150:	681a      	ldr	r2, [r3, #0]
   17152:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
		if (flags & 0x01) {
   17156:	f011 0f01 	tst.w	r1, #1
				((*(volatile u32_t *)0x4000173c) & 0xFFFFFF00) |
   1715a:	f042 025c 	orr.w	r2, r2, #92	; 0x5c
			mode = RADIO_MODE_MODE_Ble_LR500Kbit;
   1715e:	bf14      	ite	ne
   17160:	2105      	movne	r1, #5
   17162:	2106      	moveq	r1, #6
		*(volatile u32_t *)0x4000173c =
   17164:	601a      	str	r2, [r3, #0]
   17166:	e7df      	b.n	17128 <radio_phy_set+0x14>
   17168:	4000173c 	.word	0x4000173c
   1716c:	40001000 	.word	0x40001000

00017170 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   17170:	4b01      	ldr	r3, [pc, #4]	; (17178 <radio_tx_power_set+0x8>)
   17172:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   17176:	4770      	bx	lr
   17178:	40001000 	.word	0x40001000

0001717c <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1717c:	4b01      	ldr	r3, [pc, #4]	; (17184 <radio_freq_chan_set+0x8>)
   1717e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   17182:	4770      	bx	lr
   17184:	40001000 	.word	0x40001000

00017188 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   17188:	4b07      	ldr	r3, [pc, #28]	; (171a8 <radio_whiten_iv_set+0x20>)
   1718a:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1718e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   17192:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   17196:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1719a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1719e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   171a2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   171a6:	4770      	bx	lr
   171a8:	40001000 	.word	0x40001000

000171ac <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   171ac:	4a0a      	ldr	r2, [pc, #40]	; (171d8 <radio_aa_set+0x2c>)
   171ae:	2300      	movs	r3, #0
   171b0:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   171b4:	2301      	movs	r3, #1
   171b6:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   171ba:	78c3      	ldrb	r3, [r0, #3]
   171bc:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   171c0:	7843      	ldrb	r3, [r0, #1]
   171c2:	7881      	ldrb	r1, [r0, #2]
   171c4:	041b      	lsls	r3, r3, #16
   171c6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   171ca:	7801      	ldrb	r1, [r0, #0]
   171cc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   171d0:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   171d4:	4770      	bx	lr
   171d6:	bf00      	nop
   171d8:	40001000 	.word	0x40001000

000171dc <radio_pkt_configure>:
	u8_t dc = flags & 0x01; /* Adv or Data channel */
   171dc:	f002 0301 	and.w	r3, r2, #1
	switch (phy) {
   171e0:	f3c2 0242 	ubfx	r2, r2, #1, #3
   171e4:	2a02      	cmp	r2, #2
   171e6:	d023      	beq.n	17230 <radio_pkt_configure+0x54>
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   171e8:	2a04      	cmp	r2, #4
   171ea:	bf0c      	ite	eq
   171ec:	f04f 42c7 	moveq.w	r2, #1669332992	; 0x63800000
   171f0:	2200      	movne	r2, #0
	if (dc) {
   171f2:	b10b      	cbz	r3, 171f8 <radio_pkt_configure+0x1c>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   171f4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   171f8:	f1c0 0308 	rsb	r3, r0, #8
   171fc:	041b      	lsls	r3, r3, #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   171fe:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   17202:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   17206:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
			    RADIO_PCNF0_S1LEN_Msk) |
   1720a:	4303      	orrs	r3, r0
   1720c:	4313      	orrs	r3, r2
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1720e:	4a0a      	ldr	r2, [pc, #40]	; (17238 <radio_pkt_configure+0x5c>)
   17210:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   17214:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   17218:	4b08      	ldr	r3, [pc, #32]	; (1723c <radio_pkt_configure+0x60>)
   1721a:	4003      	ands	r3, r0
   1721c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   17220:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   17224:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
   17228:	4319      	orrs	r1, r3
   1722a:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   1722e:	4770      	bx	lr
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   17230:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   17234:	e7dd      	b.n	171f2 <radio_pkt_configure+0x16>
   17236:	bf00      	nop
   17238:	40001000 	.word	0x40001000
   1723c:	fef80000 	.word	0xfef80000

00017240 <radio_pkt_rx_set>:
   17240:	4b01      	ldr	r3, [pc, #4]	; (17248 <radio_pkt_rx_set+0x8>)
   17242:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   17246:	4770      	bx	lr
   17248:	40001000 	.word	0x40001000

0001724c <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
   1724c:	4b01      	ldr	r3, [pc, #4]	; (17254 <radio_pkt_tx_set+0x8>)
   1724e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   17252:	4770      	bx	lr
   17254:	40001000 	.word	0x40001000

00017258 <radio_tx_ready_delay_get>:
	switch (phy) {
   17258:	2802      	cmp	r0, #2
   1725a:	d004      	beq.n	17266 <radio_tx_ready_delay_get+0xe>
   1725c:	2804      	cmp	r0, #4
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_US;
   1725e:	bf0c      	ite	eq
   17260:	202b      	moveq	r0, #43	; 0x2b
   17262:	2029      	movne	r0, #41	; 0x29
   17264:	4770      	bx	lr
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_US;
   17266:	2028      	movs	r0, #40	; 0x28
}
   17268:	4770      	bx	lr

0001726a <radio_tx_chain_delay_get>:
}
   1726a:	2001      	movs	r0, #1
   1726c:	4770      	bx	lr

0001726e <radio_rx_ready_delay_get>:
}
   1726e:	2029      	movs	r0, #41	; 0x29
   17270:	4770      	bx	lr

00017272 <radio_rx_chain_delay_get>:
	switch (phy) {
   17272:	2802      	cmp	r0, #2
   17274:	d003      	beq.n	1727e <radio_rx_chain_delay_get+0xc>
   17276:	2804      	cmp	r0, #4
   17278:	d003      	beq.n	17282 <radio_rx_chain_delay_get+0x10>
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
   1727a:	200a      	movs	r0, #10
}
   1727c:	4770      	bx	lr
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   1727e:	2005      	movs	r0, #5
   17280:	4770      	bx	lr
		if (flags & 0x01) {
   17282:	f011 0f01 	tst.w	r1, #1
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S2_US;
   17286:	bf14      	ite	ne
   17288:	201e      	movne	r0, #30
   1728a:	2014      	moveq	r0, #20
   1728c:	4770      	bx	lr
	...

00017290 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
   17290:	4b01      	ldr	r3, [pc, #4]	; (17298 <radio_rx_enable+0x8>)
   17292:	2201      	movs	r2, #1
   17294:	605a      	str	r2, [r3, #4]
   17296:	4770      	bx	lr
   17298:	40001000 	.word	0x40001000

0001729c <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
   1729c:	4b01      	ldr	r3, [pc, #4]	; (172a4 <radio_tx_enable+0x8>)
   1729e:	2201      	movs	r2, #1
   172a0:	601a      	str	r2, [r3, #0]
   172a2:	4770      	bx	lr
   172a4:	40001000 	.word	0x40001000

000172a8 <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   172a8:	4a07      	ldr	r2, [pc, #28]	; (172c8 <radio_disable+0x20>)
   172aa:	f44f 6390 	mov.w	r3, #1152	; 0x480
   172ae:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
   172b2:	2301      	movs	r3, #1
   172b4:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
   172b6:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   172b8:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   172bc:	2100      	movs	r1, #0
   172be:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
   172c2:	6113      	str	r3, [r2, #16]
   172c4:	4770      	bx	lr
   172c6:	bf00      	nop
   172c8:	4001f000 	.word	0x4001f000

000172cc <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   172cc:	4b04      	ldr	r3, [pc, #16]	; (172e0 <radio_status_reset+0x14>)
   172ce:	2200      	movs	r2, #0
   172d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   172d4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   172d8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   172dc:	4770      	bx	lr
   172de:	bf00      	nop
   172e0:	40001000 	.word	0x40001000

000172e4 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   172e4:	4b03      	ldr	r3, [pc, #12]	; (172f4 <radio_is_ready+0x10>)
   172e6:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   172ea:	3000      	adds	r0, #0
   172ec:	bf18      	it	ne
   172ee:	2001      	movne	r0, #1
   172f0:	4770      	bx	lr
   172f2:	bf00      	nop
   172f4:	40001000 	.word	0x40001000

000172f8 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   172f8:	4b03      	ldr	r3, [pc, #12]	; (17308 <radio_is_done+0x10>)
   172fa:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   172fe:	3000      	adds	r0, #0
   17300:	bf18      	it	ne
   17302:	2001      	movne	r0, #1
   17304:	4770      	bx	lr
   17306:	bf00      	nop
   17308:	40001000 	.word	0x40001000

0001730c <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   1730c:	4b03      	ldr	r3, [pc, #12]	; (1731c <radio_is_idle+0x10>)
   1730e:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   17312:	fab0 f080 	clz	r0, r0
   17316:	0940      	lsrs	r0, r0, #5
   17318:	4770      	bx	lr
   1731a:	bf00      	nop
   1731c:	40001000 	.word	0x40001000

00017320 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   17320:	4b04      	ldr	r3, [pc, #16]	; (17334 <radio_crc_configure+0x14>)
   17322:	f240 1203 	movw	r2, #259	; 0x103
   17326:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   1732a:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1732e:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
   17332:	4770      	bx	lr
   17334:	40001000 	.word	0x40001000

00017338 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   17338:	4b03      	ldr	r3, [pc, #12]	; (17348 <radio_crc_is_valid+0x10>)
   1733a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1733e:	3000      	adds	r0, #0
   17340:	bf18      	it	ne
   17342:	2001      	movne	r0, #1
   17344:	4770      	bx	lr
   17346:	bf00      	nop
   17348:	40001000 	.word	0x40001000

0001734c <radio_pkt_empty_get>:
}
   1734c:	4800      	ldr	r0, [pc, #0]	; (17350 <radio_pkt_empty_get+0x4>)
   1734e:	4770      	bx	lr
   17350:	20002ae0 	.word	0x20002ae0

00017354 <radio_pkt_scratch_get>:
}
   17354:	4800      	ldr	r0, [pc, #0]	; (17358 <radio_pkt_scratch_get+0x4>)
   17356:	4770      	bx	lr
   17358:	20002ae4 	.word	0x20002ae4

0001735c <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1735c:	4b04      	ldr	r3, [pc, #16]	; (17370 <radio_switch_complete_and_rx+0x14>)
   1735e:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   17360:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   17362:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   17366:	4602      	mov	r2, r0
   17368:	4608      	mov	r0, r1
   1736a:	f7ff bd7b 	b.w	16e64 <sw_switch.isra.6>
   1736e:	bf00      	nop
   17370:	40001000 	.word	0x40001000

00017374 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   17374:	4b03      	ldr	r3, [pc, #12]	; (17384 <radio_switch_complete_and_tx+0x10>)
   17376:	2103      	movs	r1, #3
   17378:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1737c:	4601      	mov	r1, r0
   1737e:	2001      	movs	r0, #1
   17380:	f7ff bd70 	b.w	16e64 <sw_switch.isra.6>
   17384:	40001000 	.word	0x40001000

00017388 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   17388:	4b05      	ldr	r3, [pc, #20]	; (173a0 <radio_switch_complete_and_disable+0x18>)
   1738a:	2203      	movs	r2, #3
   1738c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   17390:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   17394:	f44f 6290 	mov.w	r2, #1152	; 0x480
   17398:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   1739c:	4770      	bx	lr
   1739e:	bf00      	nop
   173a0:	40001000 	.word	0x40001000

000173a4 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   173a4:	4a03      	ldr	r2, [pc, #12]	; (173b4 <radio_rssi_measure+0x10>)
   173a6:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   173aa:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   173ae:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   173b2:	4770      	bx	lr
   173b4:	40001000 	.word	0x40001000

000173b8 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   173b8:	4b01      	ldr	r3, [pc, #4]	; (173c0 <radio_rssi_get+0x8>)
   173ba:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   173be:	4770      	bx	lr
   173c0:	40001000 	.word	0x40001000

000173c4 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   173c4:	4b02      	ldr	r3, [pc, #8]	; (173d0 <radio_rssi_status_reset+0xc>)
   173c6:	2200      	movs	r2, #0
   173c8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   173cc:	4770      	bx	lr
   173ce:	bf00      	nop
   173d0:	40001000 	.word	0x40001000

000173d4 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   173d4:	4b03      	ldr	r3, [pc, #12]	; (173e4 <radio_rssi_is_ready+0x10>)
   173d6:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   173da:	3000      	adds	r0, #0
   173dc:	bf18      	it	ne
   173de:	2001      	movne	r0, #1
   173e0:	4770      	bx	lr
   173e2:	bf00      	nop
   173e4:	40001000 	.word	0x40001000

000173e8 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   173e8:	b530      	push	{r4, r5, lr}
   173ea:	2400      	movs	r4, #0
   173ec:	00a3      	lsls	r3, r4, #2
   173ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   173f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   173f6:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   173f8:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
   173fc:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   173fe:	8895      	ldrh	r5, [r2, #4]
   17400:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
   17404:	2c08      	cmp	r4, #8
		bdaddr += 6;
   17406:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
   1740a:	d1ef      	bne.n	173ec <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   1740c:	4b02      	ldr	r3, [pc, #8]	; (17418 <radio_filter_configure+0x30>)
   1740e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   17412:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   17416:	bd30      	pop	{r4, r5, pc}
   17418:	40001000 	.word	0x40001000

0001741c <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1741c:	4a03      	ldr	r2, [pc, #12]	; (1742c <radio_filter_disable+0x10>)
   1741e:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   17422:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   17426:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   1742a:	4770      	bx	lr
   1742c:	40001000 	.word	0x40001000

00017430 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   17430:	4b02      	ldr	r3, [pc, #8]	; (1743c <radio_filter_status_reset+0xc>)
   17432:	2200      	movs	r2, #0
   17434:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   17438:	4770      	bx	lr
   1743a:	bf00      	nop
   1743c:	40001000 	.word	0x40001000

00017440 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   17440:	4b03      	ldr	r3, [pc, #12]	; (17450 <radio_filter_has_match+0x10>)
   17442:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   17446:	3000      	adds	r0, #0
   17448:	bf18      	it	ne
   1744a:	2001      	movne	r0, #1
   1744c:	4770      	bx	lr
   1744e:	bf00      	nop
   17450:	40001000 	.word	0x40001000

00017454 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   17454:	4b01      	ldr	r3, [pc, #4]	; (1745c <radio_filter_match_get+0x8>)
   17456:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1745a:	4770      	bx	lr
   1745c:	40001000 	.word	0x40001000

00017460 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
   17460:	4b04      	ldr	r3, [pc, #16]	; (17474 <radio_bc_configure+0x14>)
   17462:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   17466:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1746a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1746e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   17472:	4770      	bx	lr
   17474:	40001000 	.word	0x40001000

00017478 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   17478:	4b05      	ldr	r3, [pc, #20]	; (17490 <radio_tmr_status_reset+0x18>)
   1747a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1747e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
   17482:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   17486:	4a03      	ldr	r2, [pc, #12]	; (17494 <radio_tmr_status_reset+0x1c>)
   17488:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   1748c:	4770      	bx	lr
   1748e:	bf00      	nop
   17490:	4000b000 	.word	0x4000b000
   17494:	0004207f 	.word	0x0004207f

00017498 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
   17498:	4b03      	ldr	r3, [pc, #12]	; (174a8 <radio_tmr_tifs_set+0x10>)
   1749a:	4a04      	ldr	r2, [pc, #16]	; (174ac <radio_tmr_tifs_set+0x14>)
   1749c:	781b      	ldrb	r3, [r3, #0]
   1749e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   174a2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   174a6:	4770      	bx	lr
   174a8:	20002bf0 	.word	0x20002bf0
   174ac:	40009000 	.word	0x40009000

000174b0 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   174b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   174b4:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   174b8:	4c27      	ldr	r4, [pc, #156]	; (17558 <radio_tmr_start+0xa8>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
   174ba:	4d28      	ldr	r5, [pc, #160]	; (1755c <radio_tmr_start+0xac>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   174bc:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   174c0:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
   174c2:	bf88      	it	hi
   174c4:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
	EVENT_TIMER->TASKS_CLEAR = 1;
   174c8:	4b25      	ldr	r3, [pc, #148]	; (17560 <radio_tmr_start+0xb0>)
	remainder /= 1000000UL;
   174ca:	4c26      	ldr	r4, [pc, #152]	; (17564 <radio_tmr_start+0xb4>)
		remainder += 30517578UL;
   174cc:	bf82      	ittt	hi
   174ce:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   174d2:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   174d6:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
   174da:	2601      	movs	r6, #1
	remainder /= 1000000UL;
   174dc:	fbb2 f4f4 	udiv	r4, r2, r4
	EVENT_TIMER->MODE = 0;
   174e0:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   174e2:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   174e4:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
   174e8:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
   174ea:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   174ee:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   174f2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
   174f6:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
   174fa:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   174fe:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   17502:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
   17506:	f505 35a0 	add.w	r5, r5, #81920	; 0x14000
   1750a:	4917      	ldr	r1, [pc, #92]	; (17568 <radio_tmr_start+0xb8>)
   1750c:	f8c5 1518 	str.w	r1, [r5, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
   17510:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
   17514:	f8c5 2504 	str.w	r2, [r5, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   17518:	f7ff fc8c 	bl	16e34 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
   1751c:	4b13      	ldr	r3, [pc, #76]	; (1756c <radio_tmr_start+0xbc>)
   1751e:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   17520:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   17524:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   17528:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
   1752c:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
   1752e:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   17532:	3b74      	subs	r3, #116	; 0x74
   17534:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
   17538:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   1753c:	f8c5 354c 	str.w	r3, [r5, #1356]	; 0x54c
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   17540:	f44f 6310 	mov.w	r3, #2304	; 0x900
   17544:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   17548:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   1754c:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
   17550:	4620      	mov	r0, r4
   17552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17556:	bf00      	nop
   17558:	7ff0bdbf 	.word	0x7ff0bdbf
   1755c:	4000b000 	.word	0x4000b000
   17560:	40008000 	.word	0x40008000
   17564:	000f4240 	.word	0x000f4240
   17568:	4000b148 	.word	0x4000b148
   1756c:	40009000 	.word	0x40009000

00017570 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
   17570:	4a04      	ldr	r2, [pc, #16]	; (17584 <radio_tmr_stop+0x14>)
   17572:	2301      	movs	r3, #1
   17574:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
   17576:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
   17578:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1757c:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
   1757e:	6113      	str	r3, [r2, #16]
   17580:	4770      	bx	lr
   17582:	bf00      	nop
   17584:	40008000 	.word	0x40008000

00017588 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
   17588:	4b0c      	ldr	r3, [pc, #48]	; (175bc <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   1758a:	4a0d      	ldr	r2, [pc, #52]	; (175c0 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
   1758c:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   17590:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   17594:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   17598:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1759c:	3240      	adds	r2, #64	; 0x40
   1759e:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
   175a2:	f502 7280 	add.w	r2, r2, #256	; 0x100
   175a6:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
   175aa:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   175ae:	3a34      	subs	r2, #52	; 0x34
   175b0:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
   175b4:	2218      	movs	r2, #24
   175b6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   175ba:	4770      	bx	lr
   175bc:	40008000 	.word	0x40008000
   175c0:	40001104 	.word	0x40001104

000175c4 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
   175c4:	4b0b      	ldr	r3, [pc, #44]	; (175f4 <radio_tmr_aa_capture+0x30>)
   175c6:	4a0c      	ldr	r2, [pc, #48]	; (175f8 <radio_tmr_aa_capture+0x34>)
   175c8:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
   175cc:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   175d0:	3240      	adds	r2, #64	; 0x40
   175d2:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   175d6:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   175da:	3a3c      	subs	r2, #60	; 0x3c
   175dc:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   175e0:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   175e4:	3240      	adds	r2, #64	; 0x40
   175e6:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
   175ea:	220c      	movs	r2, #12
   175ec:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   175f0:	4770      	bx	lr
   175f2:	bf00      	nop
   175f4:	4001f000 	.word	0x4001f000
   175f8:	40001100 	.word	0x40001100

000175fc <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   175fc:	4b01      	ldr	r3, [pc, #4]	; (17604 <radio_tmr_aa_get+0x8>)
   175fe:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   17602:	4770      	bx	lr
   17604:	40008000 	.word	0x40008000

00017608 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   17608:	4b01      	ldr	r3, [pc, #4]	; (17610 <radio_tmr_aa_save+0x8>)
   1760a:	6018      	str	r0, [r3, #0]
   1760c:	4770      	bx	lr
   1760e:	bf00      	nop
   17610:	20002be8 	.word	0x20002be8

00017614 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   17614:	4b01      	ldr	r3, [pc, #4]	; (1761c <radio_tmr_aa_restore+0x8>)
   17616:	6818      	ldr	r0, [r3, #0]
   17618:	4770      	bx	lr
   1761a:	bf00      	nop
   1761c:	20002be8 	.word	0x20002be8

00017620 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   17620:	4b01      	ldr	r3, [pc, #4]	; (17628 <radio_tmr_ready_get+0x8>)
   17622:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   17626:	4770      	bx	lr
   17628:	40008000 	.word	0x40008000

0001762c <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
   1762c:	4b06      	ldr	r3, [pc, #24]	; (17648 <radio_tmr_end_capture+0x1c>)
   1762e:	4a07      	ldr	r2, [pc, #28]	; (1764c <radio_tmr_end_capture+0x20>)
   17630:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
   17634:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   17638:	323c      	adds	r2, #60	; 0x3c
   1763a:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
   1763e:	2220      	movs	r2, #32
   17640:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   17644:	4770      	bx	lr
   17646:	bf00      	nop
   17648:	4001f000 	.word	0x4001f000
   1764c:	4000110c 	.word	0x4000110c

00017650 <radio_tmr_end_get>:
   17650:	4b01      	ldr	r3, [pc, #4]	; (17658 <radio_tmr_end_get+0x8>)
   17652:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   17656:	4770      	bx	lr
   17658:	40008000 	.word	0x40008000

0001765c <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1765c:	4b01      	ldr	r3, [pc, #4]	; (17664 <radio_tmr_tifs_base_get+0x8>)
   1765e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
   17662:	4770      	bx	lr
   17664:	40008000 	.word	0x40008000

00017668 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   17668:	4b21      	ldr	r3, [pc, #132]	; (176f0 <radio_ccm_rx_pkt_set+0x88>)
{
   1766a:	b510      	push	{r4, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1766c:	2400      	movs	r4, #0
   1766e:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   17672:	2402      	movs	r4, #2
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
   17674:	42a1      	cmp	r1, r4
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   17676:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	switch (phy) {
   1767a:	d003      	beq.n	17684 <radio_ccm_rx_pkt_set+0x1c>
   1767c:	2904      	cmp	r1, #4
   1767e:	d024      	beq.n	176ca <radio_ccm_rx_pkt_set+0x62>
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   17680:	491c      	ldr	r1, [pc, #112]	; (176f4 <radio_ccm_rx_pkt_set+0x8c>)
   17682:	e000      	b.n	17686 <radio_ccm_rx_pkt_set+0x1e>
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   17684:	491c      	ldr	r1, [pc, #112]	; (176f8 <radio_ccm_rx_pkt_set+0x90>)
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   17686:	4b1a      	ldr	r3, [pc, #104]	; (176f0 <radio_ccm_rx_pkt_set+0x88>)
   17688:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   1768c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   17690:	481a      	ldr	r0, [pc, #104]	; (176fc <radio_ccm_rx_pkt_set+0x94>)
   17692:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   17696:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1769a:	4a19      	ldr	r2, [pc, #100]	; (17700 <radio_ccm_rx_pkt_set+0x98>)
   1769c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   176a0:	2200      	movs	r2, #0
   176a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   176a6:	4917      	ldr	r1, [pc, #92]	; (17704 <radio_ccm_rx_pkt_set+0x9c>)
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   176a8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   176ac:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   176b0:	4a15      	ldr	r2, [pc, #84]	; (17708 <radio_ccm_rx_pkt_set+0xa0>)
   176b2:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
   176b6:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   176ba:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
   176be:	2140      	movs	r1, #64	; 0x40
   176c0:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
   176c4:	2201      	movs	r2, #1
   176c6:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   176c8:	bd10      	pop	{r4, pc}
		NRF_CCM->RATEOVERRIDE =
   176ca:	2103      	movs	r1, #3
   176cc:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
		HAL_TRIGGER_RATEOVERRIDE_PPI_REGISTER_EVT =
   176d0:	4b0d      	ldr	r3, [pc, #52]	; (17708 <radio_ccm_rx_pkt_set+0xa0>)
   176d2:	490e      	ldr	r1, [pc, #56]	; (1770c <radio_ccm_rx_pkt_set+0xa4>)
   176d4:	f8c3 1578 	str.w	r1, [r3, #1400]	; 0x578
		HAL_TRIGGER_RATEOVERRIDE_PPI_REGISTER_TASK =
   176d8:	f501 415e 	add.w	r1, r1, #56832	; 0xde00
   176dc:	31bc      	adds	r1, #188	; 0xbc
   176de:	f8c3 157c 	str.w	r1, [r3, #1404]	; 0x57c
		NRF_PPI->CHENSET = HAL_TRIGGER_RATEOVERRIDE_PPI_ENABLE;
   176e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   176e6:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
		mode |= (CCM_MODE_DATARATE_125Kbps <<
   176ea:	4909      	ldr	r1, [pc, #36]	; (17710 <radio_ccm_rx_pkt_set+0xa8>)
		break;
   176ec:	e7cb      	b.n	17686 <radio_ccm_rx_pkt_set+0x1e>
   176ee:	bf00      	nop
   176f0:	4000f000 	.word	0x4000f000
   176f4:	01000001 	.word	0x01000001
   176f8:	01010001 	.word	0x01010001
   176fc:	20002ae4 	.word	0x20002ae4
   17700:	200029d4 	.word	0x200029d4
   17704:	40001104 	.word	0x40001104
   17708:	4001f000 	.word	0x4001f000
   1770c:	40001150 	.word	0x40001150
   17710:	01020001 	.word	0x01020001

00017714 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   17714:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   17716:	4b0e      	ldr	r3, [pc, #56]	; (17750 <radio_ccm_tx_pkt_set+0x3c>)
   17718:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1771a:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1771c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   17720:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   17724:	4c0b      	ldr	r4, [pc, #44]	; (17754 <radio_ccm_tx_pkt_set+0x40>)
   17726:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   1772a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   1772e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   17732:	4809      	ldr	r0, [pc, #36]	; (17758 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   17734:	4909      	ldr	r1, [pc, #36]	; (1775c <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   17736:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1773a:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1773e:	2101      	movs	r1, #1
   17740:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   17744:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   17748:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   1774c:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   1774e:	bd10      	pop	{r4, pc}
   17750:	4000f000 	.word	0x4000f000
   17754:	01010000 	.word	0x01010000
   17758:	20002ae4 	.word	0x20002ae4
   1775c:	200029d4 	.word	0x200029d4

00017760 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   17760:	4b0c      	ldr	r3, [pc, #48]	; (17794 <radio_ccm_is_done+0x34>)
   17762:	2202      	movs	r2, #2
   17764:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   17768:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1776c:	b16a      	cbz	r2, 1778a <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   1776e:	2202      	movs	r2, #2
   17770:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   17774:	4a08      	ldr	r2, [pc, #32]	; (17798 <radio_ccm_is_done+0x38>)
   17776:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1777a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   1777e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   17782:	fab0 f080 	clz	r0, r0
   17786:	0940      	lsrs	r0, r0, #5
   17788:	4770      	bx	lr
		__WFE();
   1778a:	bf20      	wfe
		__SEV();
   1778c:	bf40      	sev
		__WFE();
   1778e:	bf20      	wfe
   17790:	e7ea      	b.n	17768 <radio_ccm_is_done+0x8>
   17792:	bf00      	nop
   17794:	4000f000 	.word	0x4000f000
   17798:	e000e100 	.word	0xe000e100

0001779c <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   1779c:	4b03      	ldr	r3, [pc, #12]	; (177ac <radio_ccm_mic_is_valid+0x10>)
   1779e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   177a2:	3000      	adds	r0, #0
   177a4:	bf18      	it	ne
   177a6:	2001      	movne	r0, #1
   177a8:	4770      	bx	lr
   177aa:	bf00      	nop
   177ac:	4000f000 	.word	0x4000f000

000177b0 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   177b0:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   177b2:	4c13      	ldr	r4, [pc, #76]	; (17800 <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   177b4:	4d13      	ldr	r5, [pc, #76]	; (17804 <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   177b6:	2303      	movs	r3, #3
   177b8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   177bc:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   177c0:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   177c4:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   177c8:	3b01      	subs	r3, #1
   177ca:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   177ce:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   177d0:	4b0d      	ldr	r3, [pc, #52]	; (17808 <radio_ar_configure+0x58>)
   177d2:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   177d6:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   177d8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   177dc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   177e0:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   177e4:	f7ff fe3c 	bl	17460 <radio_bc_configure>
	radio_bc_status_reset();

	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   177e8:	4b08      	ldr	r3, [pc, #32]	; (1780c <radio_ar_configure+0x5c>)
   177ea:	4a09      	ldr	r2, [pc, #36]	; (17810 <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   177ec:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   177f0:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   177f4:	2240      	movs	r2, #64	; 0x40
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
   177f6:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   177fa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   177fe:	bd38      	pop	{r3, r4, r5, pc}
   17800:	4000f000 	.word	0x4000f000
   17804:	40001000 	.word	0x40001000
   17808:	200029d0 	.word	0x200029d0
   1780c:	4001f000 	.word	0x4001f000
   17810:	40001128 	.word	0x40001128

00017814 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   17814:	4b01      	ldr	r3, [pc, #4]	; (1781c <radio_ar_match_get+0x8>)
   17816:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1781a:	4770      	bx	lr
   1781c:	4000f000 	.word	0x4000f000

00017820 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   17820:	4a04      	ldr	r2, [pc, #16]	; (17834 <radio_ar_status_reset+0x14>)
   17822:	2300      	movs	r3, #0
   17824:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   17828:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   1782c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   17830:	4770      	bx	lr
   17832:	bf00      	nop
   17834:	40001000 	.word	0x40001000

00017838 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   17838:	4b08      	ldr	r3, [pc, #32]	; (1785c <radio_ar_has_match+0x24>)
   1783a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1783e:	b160      	cbz	r0, 1785a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   17840:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   17844:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   17848:	b138      	cbz	r0, 1785a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1784a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1784e:	b120      	cbz	r0, 1785a <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   17850:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   17854:	fab0 f080 	clz	r0, r0
   17858:	0940      	lsrs	r0, r0, #5
}
   1785a:	4770      	bx	lr
   1785c:	40001000 	.word	0x40001000

00017860 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   17860:	2901      	cmp	r1, #1
   17862:	d005      	beq.n	17870 <mayfly_enable_cb+0x10>
   17864:	4040      	eors	r0, r0
   17866:	f380 8811 	msr	BASEPRI, r0
   1786a:	f04f 0004 	mov.w	r0, #4
   1786e:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   17870:	2018      	movs	r0, #24
	if (enable) {
   17872:	b10a      	cbz	r2, 17878 <mayfly_enable_cb+0x18>
		irq_enable(SWI4_IRQn);
   17874:	f7e9 bc24 	b.w	10c0 <_arch_irq_enable>
	} else {
		irq_disable(SWI4_IRQn);
   17878:	f7e9 bc32 	b.w	10e0 <_arch_irq_disable>

0001787c <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1787c:	b139      	cbz	r1, 1788e <mayfly_is_enabled+0x12>
   1787e:	2901      	cmp	r1, #1
   17880:	d008      	beq.n	17894 <mayfly_is_enabled+0x18>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   17882:	4040      	eors	r0, r0
   17884:	f380 8811 	msr	BASEPRI, r0
   17888:	f04f 0004 	mov.w	r0, #4
   1788c:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   1788e:	200b      	movs	r0, #11
		return irq_is_enabled(SWI4_IRQn);
   17890:	f7e9 bc3a 	b.w	1108 <_arch_irq_is_enabled>
   17894:	2018      	movs	r0, #24
   17896:	e7fb      	b.n	17890 <mayfly_is_enabled+0x14>

00017898 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   17898:	4288      	cmp	r0, r1
   1789a:	d00a      	beq.n	178b2 <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   1789c:	b918      	cbnz	r0, 178a6 <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1789e:	1e4b      	subs	r3, r1, #1
   178a0:	4258      	negs	r0, r3
   178a2:	4158      	adcs	r0, r3
   178a4:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   178a6:	2801      	cmp	r0, #1
   178a8:	d105      	bne.n	178b6 <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   178aa:	fab1 f081 	clz	r0, r1
   178ae:	0940      	lsrs	r0, r0, #5
   178b0:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   178b2:	2001      	movs	r0, #1
   178b4:	4770      	bx	lr
   178b6:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   178b8:	4770      	bx	lr
	...

000178bc <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   178bc:	4b08      	ldr	r3, [pc, #32]	; (178e0 <mayfly_pend+0x24>)
	(void)caller_id;

	switch (callee_id) {
   178be:	b139      	cbz	r1, 178d0 <mayfly_pend+0x14>
   178c0:	2901      	cmp	r1, #1
   178c2:	d00a      	beq.n	178da <mayfly_pend+0x1e>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   178c4:	4040      	eors	r0, r0
   178c6:	f380 8811 	msr	BASEPRI, r0
   178ca:	f04f 0004 	mov.w	r0, #4
   178ce:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   178d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   178d4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   178d8:	4770      	bx	lr
   178da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   178de:	e7f9      	b.n	178d4 <mayfly_pend+0x18>
   178e0:	e000e100 	.word	0xe000e100

000178e4 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   178e4:	2803      	cmp	r0, #3
   178e6:	d905      	bls.n	178f4 <hal_ticker_instance0_caller_id_get+0x10>

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   178e8:	4040      	eors	r0, r0
   178ea:	f380 8811 	msr	BASEPRI, r0
   178ee:	f04f 0004 	mov.w	r0, #4
   178f2:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   178f4:	4b02      	ldr	r3, [pc, #8]	; (17900 <hal_ticker_instance0_caller_id_get+0x1c>)
   178f6:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   178f8:	2800      	cmp	r0, #0
   178fa:	d0f5      	beq.n	178e8 <hal_ticker_instance0_caller_id_get+0x4>

	return caller_id;
}
   178fc:	4770      	bx	lr
   178fe:	bf00      	nop
   17900:	00021312 	.word	0x00021312

00017904 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   17904:	3802      	subs	r0, #2
{
   17906:	b410      	push	{r4}
   17908:	461c      	mov	r4, r3
	switch (caller_id) {
   1790a:	2803      	cmp	r0, #3
   1790c:	d816      	bhi.n	1793c <hal_ticker_instance0_sched+0x38>
   1790e:	e8df f000 	tbb	[pc, r0]
   17912:	0b02      	.short	0x0b02
   17914:	2411      	.short	0x2411
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   17916:	2903      	cmp	r1, #3
   17918:	d110      	bne.n	1793c <hal_ticker_instance0_sched+0x38>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   1791a:	4b13      	ldr	r3, [pc, #76]	; (17968 <hal_ticker_instance0_sched+0x64>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1791c:	2100      	movs	r1, #0
			m.param = instance;
   1791e:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   17920:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   17922:	bc10      	pop	{r4}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   17924:	f7f3 b94c 	b.w	abc0 <mayfly_enqueue>
		switch (callee_id) {
   17928:	2904      	cmp	r1, #4
   1792a:	d107      	bne.n	1793c <hal_ticker_instance0_sched+0x38>
			m.param = instance;
   1792c:	4b0f      	ldr	r3, [pc, #60]	; (1796c <hal_ticker_instance0_sched+0x68>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1792e:	2101      	movs	r1, #1
			m.param = instance;
   17930:	609c      	str	r4, [r3, #8]
   17932:	e7f5      	b.n	17920 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   17934:	2903      	cmp	r1, #3
   17936:	d007      	beq.n	17948 <hal_ticker_instance0_sched+0x44>
   17938:	2904      	cmp	r1, #4
   1793a:	d00a      	beq.n	17952 <hal_ticker_instance0_sched+0x4e>
		LL_ASSERT(0);
   1793c:	4040      	eors	r0, r0
   1793e:	f380 8811 	msr	BASEPRI, r0
   17942:	f04f 0004 	mov.w	r0, #4
   17946:	df02      	svc	2
			m.param = instance;
   17948:	4b09      	ldr	r3, [pc, #36]	; (17970 <hal_ticker_instance0_sched+0x6c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1794a:	2100      	movs	r1, #0
			m.param = instance;
   1794c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1794e:	2001      	movs	r0, #1
   17950:	e7e7      	b.n	17922 <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   17952:	4b08      	ldr	r3, [pc, #32]	; (17974 <hal_ticker_instance0_sched+0x70>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   17954:	2101      	movs	r1, #1
			m.param = instance;
   17956:	609c      	str	r4, [r3, #8]
   17958:	e7f9      	b.n	1794e <hal_ticker_instance0_sched+0x4a>
		switch (callee_id) {
   1795a:	2904      	cmp	r1, #4
   1795c:	d1ee      	bne.n	1793c <hal_ticker_instance0_sched+0x38>
			m.param = instance;
   1795e:	4b06      	ldr	r3, [pc, #24]	; (17978 <hal_ticker_instance0_sched+0x74>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   17960:	2101      	movs	r1, #1
			m.param = instance;
   17962:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   17964:	2003      	movs	r0, #3
   17966:	e7dc      	b.n	17922 <hal_ticker_instance0_sched+0x1e>
   17968:	2000e10c 	.word	0x2000e10c
   1796c:	2000e11c 	.word	0x2000e11c
   17970:	2000e12c 	.word	0x2000e12c
   17974:	2000e13c 	.word	0x2000e13c
   17978:	2000e14c 	.word	0x2000e14c

0001797c <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   1797c:	4601      	mov	r1, r0
   1797e:	2000      	movs	r0, #0
   17980:	f7ff ba08 	b.w	16d94 <cntr_cmp_set>

00017984 <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
   17984:	4770      	bx	lr
	...

00017988 <net_buf_pool_get>:
}
   17988:	4b01      	ldr	r3, [pc, #4]	; (17990 <net_buf_pool_get+0x8>)
   1798a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1798e:	4770      	bx	lr
   17990:	2000eaac 	.word	0x2000eaac

00017994 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   17994:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   17996:	4b04      	ldr	r3, [pc, #16]	; (179a8 <net_buf_id+0x14>)
   17998:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   1799c:	69db      	ldr	r3, [r3, #28]
   1799e:	1ac0      	subs	r0, r0, r3
}
   179a0:	4b02      	ldr	r3, [pc, #8]	; (179ac <net_buf_id+0x18>)
	return buf - pool->__bufs;
   179a2:	10c0      	asrs	r0, r0, #3
}
   179a4:	4358      	muls	r0, r3
   179a6:	4770      	bx	lr
   179a8:	2000eaac 	.word	0x2000eaac
   179ac:	aaaaaaab 	.word	0xaaaaaaab

000179b0 <fixed_data_alloc>:
{
   179b0:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   179b2:	4b09      	ldr	r3, [pc, #36]	; (179d8 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   179b4:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   179b6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
   179ba:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   179bc:	699b      	ldr	r3, [r3, #24]
   179be:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   179c0:	6823      	ldr	r3, [r4, #0]
   179c2:	429a      	cmp	r2, r3
   179c4:	bf94      	ite	ls
   179c6:	600a      	strls	r2, [r1, #0]
   179c8:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   179ca:	f7ff ffe3 	bl	17994 <net_buf_id>
   179ce:	e894 000c 	ldmia.w	r4, {r2, r3}
}
   179d2:	fb02 3000 	mla	r0, r2, r0, r3
   179d6:	bd10      	pop	{r4, pc}
   179d8:	2000eaac 	.word	0x2000eaac

000179dc <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   179dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   179e0:	4605      	mov	r5, r0
   179e2:	9101      	str	r1, [sp, #4]
   179e4:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   179e6:	f007 ffaf 	bl	1f948 <_impl_k_uptime_get_32>
   179ea:	4607      	mov	r7, r0
	__asm__ volatile(
   179ec:	f04f 0320 	mov.w	r3, #32
   179f0:	f3ef 8811 	mrs	r8, BASEPRI
   179f4:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   179f8:	8a6b      	ldrh	r3, [r5, #18]
   179fa:	2b00      	cmp	r3, #0
   179fc:	d03d      	beq.n	17a7a <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   179fe:	8a2a      	ldrh	r2, [r5, #16]
   17a00:	429a      	cmp	r2, r3
   17a02:	d92a      	bls.n	17a5a <net_buf_alloc_len+0x7e>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
   17a04:	2100      	movs	r1, #0
   17a06:	4628      	mov	r0, r5
   17a08:	f007 fcf9 	bl	1f3fe <k_queue_get>
			if (buf) {
   17a0c:	4604      	mov	r4, r0
   17a0e:	b320      	cbz	r0, 17a5a <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   17a10:	f388 8811 	msr	BASEPRI, r8
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   17a14:	9b01      	ldr	r3, [sp, #4]
   17a16:	2b00      	cmp	r3, #0
   17a18:	d03c      	beq.n	17a94 <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   17a1a:	1c73      	adds	r3, r6, #1
   17a1c:	2b01      	cmp	r3, #1
   17a1e:	d906      	bls.n	17a2e <net_buf_alloc_len+0x52>
   17a20:	f007 ff92 	bl	1f948 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   17a24:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   17a26:	42b0      	cmp	r0, r6
   17a28:	bf94      	ite	ls
   17a2a:	1a36      	subls	r6, r6, r0
   17a2c:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   17a2e:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   17a30:	4f1e      	ldr	r7, [pc, #120]	; (17aac <net_buf_alloc_len+0xd0>)
   17a32:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   17a36:	4632      	mov	r2, r6
   17a38:	699b      	ldr	r3, [r3, #24]
   17a3a:	681b      	ldr	r3, [r3, #0]
   17a3c:	a901      	add	r1, sp, #4
   17a3e:	681b      	ldr	r3, [r3, #0]
   17a40:	4620      	mov	r0, r4
   17a42:	4798      	blx	r3
   17a44:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   17a46:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   17a48:	bb28      	cbnz	r0, 17a96 <net_buf_alloc_len+0xba>
	k_lifo_put(&pool->free, buf);
   17a4a:	79a0      	ldrb	r0, [r4, #6]
   17a4c:	4621      	mov	r1, r4
   17a4e:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   17a52:	f007 fcb4 	bl	1f3be <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   17a56:	462c      	mov	r4, r5
   17a58:	e018      	b.n	17a8c <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
   17a5a:	8a6b      	ldrh	r3, [r5, #18]
   17a5c:	1e5a      	subs	r2, r3, #1
   17a5e:	826a      	strh	r2, [r5, #18]
   17a60:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   17a64:	8a2c      	ldrh	r4, [r5, #16]
   17a66:	1ae4      	subs	r4, r4, r3
   17a68:	69eb      	ldr	r3, [r5, #28]
   17a6a:	2218      	movs	r2, #24
   17a6c:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
   17a70:	4b0e      	ldr	r3, [pc, #56]	; (17aac <net_buf_alloc_len+0xd0>)
   17a72:	1aed      	subs	r5, r5, r3
   17a74:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   17a76:	71a5      	strb	r5, [r4, #6]
		goto success;
   17a78:	e7cc      	b.n	17a14 <net_buf_alloc_len+0x38>
   17a7a:	f388 8811 	msr	BASEPRI, r8
	buf = k_lifo_get(&pool->free, timeout);
   17a7e:	4631      	mov	r1, r6
   17a80:	4628      	mov	r0, r5
   17a82:	f007 fcbc 	bl	1f3fe <k_queue_get>
	if (!buf) {
   17a86:	4604      	mov	r4, r0
   17a88:	2800      	cmp	r0, #0
   17a8a:	d1c3      	bne.n	17a14 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   17a8c:	4620      	mov	r0, r4
   17a8e:	b002      	add	sp, #8
   17a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   17a94:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
   17a96:	2301      	movs	r3, #1
   17a98:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   17a9a:	2300      	movs	r3, #0
	buf->frags = NULL;
   17a9c:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
   17a9e:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
   17aa0:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
   17aa2:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   17aa4:	6923      	ldr	r3, [r4, #16]
   17aa6:	81e2      	strh	r2, [r4, #14]
   17aa8:	60a3      	str	r3, [r4, #8]
	return buf;
   17aaa:	e7ef      	b.n	17a8c <net_buf_alloc_len+0xb0>
   17aac:	2000eaac 	.word	0x2000eaac

00017ab0 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   17ab0:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   17ab2:	685b      	ldr	r3, [r3, #4]
   17ab4:	460a      	mov	r2, r1
   17ab6:	6819      	ldr	r1, [r3, #0]
   17ab8:	f7ff bf90 	b.w	179dc <net_buf_alloc_len>

00017abc <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   17abc:	b570      	push	{r4, r5, r6, lr}
   17abe:	4606      	mov	r6, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
   17ac0:	f007 fc9d 	bl	1f3fe <k_queue_get>
	if (!buf) {
   17ac4:	4605      	mov	r5, r0
   17ac6:	b128      	cbz	r0, 17ad4 <net_buf_get+0x18>
   17ac8:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   17aca:	7963      	ldrb	r3, [r4, #5]
   17acc:	f013 0301 	ands.w	r3, r3, #1
   17ad0:	d102      	bne.n	17ad8 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   17ad2:	6023      	str	r3, [r4, #0]

	return buf;
}
   17ad4:	4628      	mov	r0, r5
   17ad6:	bd70      	pop	{r4, r5, r6, pc}
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   17ad8:	2100      	movs	r1, #0
   17ada:	4630      	mov	r0, r6
   17adc:	f007 fc8f 	bl	1f3fe <k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   17ae0:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   17ae2:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   17ae4:	f023 0301 	bic.w	r3, r3, #1
   17ae8:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   17aea:	4604      	mov	r4, r0
   17aec:	e7ed      	b.n	17aca <net_buf_get+0xe>

00017aee <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   17aee:	6883      	ldr	r3, [r0, #8]
   17af0:	4419      	add	r1, r3
   17af2:	6001      	str	r1, [r0, #0]
   17af4:	4770      	bx	lr

00017af6 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   17af6:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   17af8:	460a      	mov	r2, r1
   17afa:	6814      	ldr	r4, [r2, #0]
   17afc:	b914      	cbnz	r4, 17b04 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   17afe:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   17b00:	f007 bc61 	b.w	1f3c6 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   17b04:	7953      	ldrb	r3, [r2, #5]
   17b06:	f043 0301 	orr.w	r3, r3, #1
   17b0a:	7153      	strb	r3, [r2, #5]
   17b0c:	4622      	mov	r2, r4
   17b0e:	e7f4      	b.n	17afa <net_buf_put+0x4>

00017b10 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   17b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17b12:	4d15      	ldr	r5, [pc, #84]	; (17b68 <net_buf_unref+0x58>)
   17b14:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   17b16:	2600      	movs	r6, #0
	while (buf) {
   17b18:	b904      	cbnz	r4, 17b1c <net_buf_unref+0xc>
   17b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   17b1c:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   17b1e:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   17b20:	3b01      	subs	r3, #1
   17b22:	b2db      	uxtb	r3, r3
   17b24:	7123      	strb	r3, [r4, #4]
   17b26:	2b00      	cmp	r3, #0
   17b28:	d1f7      	bne.n	17b1a <net_buf_unref+0xa>
		if (buf->__buf) {
   17b2a:	6921      	ldr	r1, [r4, #16]
   17b2c:	b159      	cbz	r1, 17b46 <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   17b2e:	7963      	ldrb	r3, [r4, #5]
   17b30:	079b      	lsls	r3, r3, #30
   17b32:	d407      	bmi.n	17b44 <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   17b34:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   17b36:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   17b3a:	4620      	mov	r0, r4
   17b3c:	699b      	ldr	r3, [r3, #24]
   17b3e:	681b      	ldr	r3, [r3, #0]
   17b40:	689b      	ldr	r3, [r3, #8]
   17b42:	4798      	blx	r3
			buf->__buf = NULL;
   17b44:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   17b46:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   17b48:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   17b4a:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   17b4e:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   17b50:	695b      	ldr	r3, [r3, #20]
   17b52:	b11b      	cbz	r3, 17b5c <net_buf_unref+0x4c>
			pool->destroy(buf);
   17b54:	4620      	mov	r0, r4
   17b56:	4798      	blx	r3
{
   17b58:	463c      	mov	r4, r7
   17b5a:	e7dd      	b.n	17b18 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   17b5c:	4621      	mov	r1, r4
   17b5e:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   17b62:	f007 fc2c 	bl	1f3be <k_queue_prepend>
   17b66:	e7f7      	b.n	17b58 <net_buf_unref+0x48>
   17b68:	2000eaac 	.word	0x2000eaac

00017b6c <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   17b6c:	7903      	ldrb	r3, [r0, #4]
   17b6e:	3301      	adds	r3, #1
   17b70:	7103      	strb	r3, [r0, #4]
	return buf;
}
   17b72:	4770      	bx	lr

00017b74 <net_buf_frag_last>:

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf);

	while (buf->frags) {
   17b74:	6803      	ldr	r3, [r0, #0]
   17b76:	b903      	cbnz	r3, 17b7a <net_buf_frag_last+0x6>
		buf = buf->frags;
	}

	return buf;
}
   17b78:	4770      	bx	lr
   17b7a:	4618      	mov	r0, r3
   17b7c:	e7fa      	b.n	17b74 <net_buf_frag_last>

00017b7e <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	NET_BUF_ASSERT(parent);
	NET_BUF_ASSERT(frag);

	if (parent->frags) {
   17b7e:	6802      	ldr	r2, [r0, #0]
{
   17b80:	b510      	push	{r4, lr}
	if (parent->frags) {
   17b82:	b11a      	cbz	r2, 17b8c <net_buf_frag_insert+0xe>
   17b84:	460b      	mov	r3, r1
	while (buf->frags) {
   17b86:	681c      	ldr	r4, [r3, #0]
   17b88:	b914      	cbnz	r4, 17b90 <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   17b8a:	601a      	str	r2, [r3, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   17b8c:	6001      	str	r1, [r0, #0]
   17b8e:	bd10      	pop	{r4, pc}
	while (buf->frags) {
   17b90:	4623      	mov	r3, r4
   17b92:	e7f8      	b.n	17b86 <net_buf_frag_insert+0x8>

00017b94 <net_buf_frag_add>:
}

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   17b94:	b510      	push	{r4, lr}
	NET_BUF_ASSERT(frag);

	if (!head) {
   17b96:	4604      	mov	r4, r0
   17b98:	b928      	cbnz	r0, 17ba6 <net_buf_frag_add+0x12>
	buf->ref++;
   17b9a:	790b      	ldrb	r3, [r1, #4]
   17b9c:	3301      	adds	r3, #1
   17b9e:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   17ba0:	4608      	mov	r0, r1
   17ba2:	bd10      	pop	{r4, pc}
	while (buf->frags) {
   17ba4:	4618      	mov	r0, r3
   17ba6:	6803      	ldr	r3, [r0, #0]
   17ba8:	2b00      	cmp	r3, #0
   17baa:	d1fb      	bne.n	17ba4 <net_buf_frag_add+0x10>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   17bac:	f7ff ffe7 	bl	17b7e <net_buf_frag_insert>

	return head;
   17bb0:	4620      	mov	r0, r4
}
   17bb2:	bd10      	pop	{r4, pc}

00017bb4 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   17bb4:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	NET_BUF_ASSERT(frag);

	if (parent) {
   17bb6:	b108      	cbz	r0, 17bbc <net_buf_frag_del+0x8>
		NET_BUF_ASSERT(parent->frags);
		NET_BUF_ASSERT(parent->frags == frag);
		parent->frags = frag->frags;
   17bb8:	680b      	ldr	r3, [r1, #0]
   17bba:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   17bbc:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   17bbe:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   17bc0:	4608      	mov	r0, r1
	frag->frags = NULL;
   17bc2:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   17bc4:	f7ff ffa4 	bl	17b10 <net_buf_unref>
#endif

	return next_frag;
}
   17bc8:	4620      	mov	r0, r4
   17bca:	bd10      	pop	{r4, pc}

00017bcc <net_buf_simple_add>:
	return buf->data + buf->len;
   17bcc:	8883      	ldrh	r3, [r0, #4]
   17bce:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   17bd0:	4419      	add	r1, r3
   17bd2:	8081      	strh	r1, [r0, #4]
	return tail;
}
   17bd4:	18d0      	adds	r0, r2, r3
   17bd6:	4770      	bx	lr

00017bd8 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   17bd8:	b430      	push	{r4, r5}
   17bda:	8883      	ldrh	r3, [r0, #4]
   17bdc:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   17bde:	189d      	adds	r5, r3, r2
   17be0:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   17be2:	18e0      	adds	r0, r4, r3
}
   17be4:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   17be6:	f7e8 be80 	b.w	8ea <memcpy>

00017bea <net_buf_simple_add_u8>:
   17bea:	8883      	ldrh	r3, [r0, #4]
   17bec:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   17bee:	b510      	push	{r4, lr}
	buf->len += len;
   17bf0:	1c5c      	adds	r4, r3, #1
   17bf2:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   17bf4:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   17bf6:	18d0      	adds	r0, r2, r3
   17bf8:	bd10      	pop	{r4, pc}

00017bfa <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   17bfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17bfc:	ab02      	add	r3, sp, #8
   17bfe:	8884      	ldrh	r4, [r0, #4]
   17c00:	f823 1d02 	strh.w	r1, [r3, #-2]!
   17c04:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   17c06:	1ca2      	adds	r2, r4, #2
   17c08:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   17c0a:	4619      	mov	r1, r3
   17c0c:	2202      	movs	r2, #2
   17c0e:	1928      	adds	r0, r5, r4
   17c10:	f7e8 fe6b 	bl	8ea <memcpy>
}
   17c14:	b003      	add	sp, #12
   17c16:	bd30      	pop	{r4, r5, pc}

00017c18 <net_buf_simple_add_be16>:

void net_buf_simple_add_be16(struct net_buf_simple *buf, u16_t val)
{
   17c18:	b513      	push	{r0, r1, r4, lr}
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
   17c1a:	020b      	lsls	r3, r1, #8
   17c1c:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
   17c20:	a902      	add	r1, sp, #8
   17c22:	6804      	ldr	r4, [r0, #0]
   17c24:	f821 3d02 	strh.w	r3, [r1, #-2]!
   17c28:	8883      	ldrh	r3, [r0, #4]
	buf->len += len;
   17c2a:	1c9a      	adds	r2, r3, #2
   17c2c:	8082      	strh	r2, [r0, #4]
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   17c2e:	2202      	movs	r2, #2
   17c30:	18e0      	adds	r0, r4, r3
   17c32:	f7e8 fe5a 	bl	8ea <memcpy>
}
   17c36:	b002      	add	sp, #8
   17c38:	bd10      	pop	{r4, pc}

00017c3a <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   17c3a:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   17c3c:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   17c3e:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   17c40:	4411      	add	r1, r2
	buf->data -= len;
   17c42:	6003      	str	r3, [r0, #0]
	buf->len += len;
   17c44:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   17c46:	4618      	mov	r0, r3
   17c48:	4770      	bx	lr

00017c4a <net_buf_simple_push_le16>:

void net_buf_simple_push_le16(struct net_buf_simple *buf, u16_t val)
{
   17c4a:	b513      	push	{r0, r1, r4, lr}
   17c4c:	ac02      	add	r4, sp, #8
	buf->data -= len;
   17c4e:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   17c50:	8882      	ldrh	r2, [r0, #4]
{
   17c52:	f824 1d02 	strh.w	r1, [r4, #-2]!
	buf->data -= len;
   17c56:	3b02      	subs	r3, #2
	buf->len += len;
   17c58:	3202      	adds	r2, #2
	buf->data -= len;
   17c5a:	6003      	str	r3, [r0, #0]
	buf->len += len;
   17c5c:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
   17c5e:	4621      	mov	r1, r4
   17c60:	2202      	movs	r2, #2
   17c62:	4618      	mov	r0, r3
   17c64:	f7e8 fe41 	bl	8ea <memcpy>
}
   17c68:	b002      	add	sp, #8
   17c6a:	bd10      	pop	{r4, pc}

00017c6c <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   17c6c:	8883      	ldrh	r3, [r0, #4]
   17c6e:	1a5b      	subs	r3, r3, r1
   17c70:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   17c72:	6803      	ldr	r3, [r0, #0]
   17c74:	4419      	add	r1, r3
   17c76:	6001      	str	r1, [r0, #0]
}
   17c78:	4608      	mov	r0, r1
   17c7a:	4770      	bx	lr

00017c7c <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   17c7c:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   17c7e:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   17c80:	2101      	movs	r1, #1
	val = buf->data[0];
   17c82:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   17c84:	f7ff fff2 	bl	17c6c <net_buf_simple_pull>

	return val;
}
   17c88:	4610      	mov	r0, r2
   17c8a:	bd08      	pop	{r3, pc}

00017c8c <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   17c8c:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   17c8e:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   17c90:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   17c92:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   17c94:	f7ff ffea 	bl	17c6c <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   17c98:	4610      	mov	r0, r2
   17c9a:	bd08      	pop	{r3, pc}

00017c9c <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   17c9c:	6802      	ldr	r2, [r0, #0]
   17c9e:	6880      	ldr	r0, [r0, #8]
}
   17ca0:	1a10      	subs	r0, r2, r0
   17ca2:	4770      	bx	lr

00017ca4 <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   17ca4:	6802      	ldr	r2, [r0, #0]
   17ca6:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   17ca8:	88c3      	ldrh	r3, [r0, #6]
   17caa:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   17cac:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   17cae:	1a9b      	subs	r3, r3, r2
}
   17cb0:	1a18      	subs	r0, r3, r0
   17cb2:	4770      	bx	lr

00017cb4 <net_is_ipv6_addr_unspecified>:
 *
 *  @return True if the address is unspecified, false otherwise.
 */
static inline bool net_is_ipv6_addr_unspecified(const struct in6_addr *addr)
{
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   17cb4:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   17cb6:	b942      	cbnz	r2, 17cca <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   17cb8:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   17cba:	b933      	cbnz	r3, 17cca <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   17cbc:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   17cbe:	b922      	cbnz	r2, 17cca <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   17cc0:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   17cc2:	fab0 f080 	clz	r0, r0
   17cc6:	0940      	lsrs	r0, r0, #5
   17cc8:	4770      	bx	lr
   17cca:	2000      	movs	r0, #0
   17ccc:	4770      	bx	lr
	...

00017cd0 <check_used_port>:

static int check_used_port(enum net_ip_protocol ip_proto,
			   u16_t local_port,
			   const struct sockaddr *local_addr)

{
   17cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17cd4:	4c17      	ldr	r4, [pc, #92]	; (17d34 <check_used_port+0x64>)
   17cd6:	4607      	mov	r7, r0
   17cd8:	4688      	mov	r8, r1
   17cda:	4615      	mov	r5, r2
   17cdc:	f504 7666 	add.w	r6, r4, #920	; 0x398

		if (local_addr->sa_family == AF_INET6) {
			if (net_ipv6_addr_cmp(
				    net_sin6_ptr(&contexts[i].local)->
							     sin6_addr,
				    &((struct sockaddr_in6 *)
   17ce0:	f102 0904 	add.w	r9, r2, #4
   17ce4:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
		if (!net_context_is_used(&contexts[i])) {
   17ce8:	07da      	lsls	r2, r3, #31
   17cea:	d405      	bmi.n	17cf8 <check_used_port+0x28>
   17cec:	345c      	adds	r4, #92	; 0x5c
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   17cee:	42a6      	cmp	r6, r4
   17cf0:	d1f8      	bne.n	17ce4 <check_used_port+0x14>
				return -EEXIST;
			}
		}
	}

	return 0;
   17cf2:	2000      	movs	r0, #0
   17cf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
enum net_ip_protocol net_context_get_ip_proto(struct net_context *context)
{
	NET_ASSERT(context);

	if (context->flags & NET_CONTEXT_PROTO) {
		return IPPROTO_TCP;
   17cf8:	f013 0f40 	tst.w	r3, #64	; 0x40
   17cfc:	bf0c      	ite	eq
   17cfe:	2311      	moveq	r3, #17
   17d00:	2306      	movne	r3, #6
		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   17d02:	42bb      	cmp	r3, r7
   17d04:	d1f2      	bne.n	17cec <check_used_port+0x1c>
   17d06:	8963      	ldrh	r3, [r4, #10]
   17d08:	4543      	cmp	r3, r8
   17d0a:	d1ef      	bne.n	17cec <check_used_port+0x1c>
		if (local_addr->sa_family == AF_INET6) {
   17d0c:	882b      	ldrh	r3, [r5, #0]
   17d0e:	2b0a      	cmp	r3, #10
   17d10:	d10a      	bne.n	17d28 <check_used_port+0x58>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   17d12:	2210      	movs	r2, #16
   17d14:	4649      	mov	r1, r9
   17d16:	68e0      	ldr	r0, [r4, #12]
   17d18:	f7e8 fdba 	bl	890 <memcmp>
			if (net_ipv6_addr_cmp(
   17d1c:	2800      	cmp	r0, #0
   17d1e:	d1e5      	bne.n	17cec <check_used_port+0x1c>
				return -EEXIST;
   17d20:	f06f 0010 	mvn.w	r0, #16
   17d24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   17d28:	68e3      	ldr	r3, [r4, #12]
   17d2a:	681a      	ldr	r2, [r3, #0]
   17d2c:	686b      	ldr	r3, [r5, #4]
			if (net_ipv4_addr_cmp(
   17d2e:	429a      	cmp	r2, r3
   17d30:	d1dc      	bne.n	17cec <check_used_port+0x1c>
   17d32:	e7f5      	b.n	17d20 <check_used_port+0x50>
   17d34:	20002c1c 	.word	0x20002c1c

00017d38 <find_available_port>:
}

static u16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
   17d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u16_t local_port;

	do {
		local_port = sys_rand32_get() | 0x8000;
   17d3a:	4f0c      	ldr	r7, [pc, #48]	; (17d6c <find_available_port+0x34>)
{
   17d3c:	4606      	mov	r6, r0
   17d3e:	460d      	mov	r5, r1
		local_port = sys_rand32_get() | 0x8000;
   17d40:	f7ea fb46 	bl	23d0 <sys_rand32_get>
	if (context->flags & NET_CONTEXT_PROTO) {
   17d44:	f896 3055 	ldrb.w	r3, [r6, #85]	; 0x55
   17d48:	ea40 0407 	orr.w	r4, r0, r7
   17d4c:	ba64      	rev16	r4, r4
		return IPPROTO_TCP;
   17d4e:	f013 0f40 	tst.w	r3, #64	; 0x40
   17d52:	b2a4      	uxth	r4, r4
		if (local_port <= 1023) {
			/* 0 - 1023 ports are reserved */
			continue;
		}
	} while (check_used_port(
   17d54:	bf0c      	ite	eq
   17d56:	2011      	moveq	r0, #17
   17d58:	2006      	movne	r0, #6
   17d5a:	462a      	mov	r2, r5
   17d5c:	4621      	mov	r1, r4
   17d5e:	f7ff ffb7 	bl	17cd0 <check_used_port>
				net_context_get_ip_proto(context),
				htons(local_port), addr) == -EEXIST);
   17d62:	3011      	adds	r0, #17
   17d64:	d0ec      	beq.n	17d40 <find_available_port+0x8>

	return htons(local_port);
}
   17d66:	4620      	mov	r0, r4
   17d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17d6a:	bf00      	nop
   17d6c:	ffff8000 	.word	0xffff8000

00017d70 <packet_received>:
}

static enum net_verdict packet_received(struct net_conn *conn,
					struct net_pkt *pkt,
					void *user_data)
{
   17d70:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   17d74:	4d32      	ldr	r5, [pc, #200]	; (17e40 <packet_received+0xd0>)
   17d76:	460c      	mov	r4, r1
   17d78:	4690      	mov	r8, r2
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   17d7a:	f04f 0900 	mov.w	r9, #0
   17d7e:	462f      	mov	r7, r5
   17d80:	235c      	movs	r3, #92	; 0x5c
		if (!net_context_is_used(&contexts[i])) {
   17d82:	f895 2055 	ldrb.w	r2, [r5, #85]	; 0x55
   17d86:	07d2      	lsls	r2, r2, #31
   17d88:	fb03 f609 	mul.w	r6, r3, r9
   17d8c:	d502      	bpl.n	17d94 <packet_received+0x24>
		if (contexts[i].conn_handler == conn_handler) {
   17d8e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   17d90:	4290      	cmp	r0, r2
   17d92:	d00d      	beq.n	17db0 <packet_received+0x40>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   17d94:	f109 0901 	add.w	r9, r9, #1
   17d98:	f1b9 0f0a 	cmp.w	r9, #10
   17d9c:	f105 055c 	add.w	r5, r5, #92	; 0x5c
   17da0:	d1ef      	bne.n	17d82 <packet_received+0x12>
static inline void net_context_set_iface(struct net_context *context,
					 struct net_if *iface)
{
	NET_ASSERT(iface);

	context->iface = net_if_get_by_iface(iface);
   17da2:	6960      	ldr	r0, [r4, #20]
   17da4:	f001 fa9c 	bl	192e0 <net_if_get_by_iface>
   17da8:	2300      	movs	r3, #0
   17daa:	f883 3054 	strb.w	r3, [r3, #84]	; 0x54
   17dae:	deff      	udf	#255	; 0xff
   17db0:	6960      	ldr	r0, [r4, #20]
   17db2:	f001 fa95 	bl	192e0 <net_if_get_by_iface>

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */

	if (!context->recv_cb) {
   17db6:	19bb      	adds	r3, r7, r6
   17db8:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
}

static inline void net_pkt_set_context(struct net_pkt *pkt,
				       struct net_context *ctx)
{
	pkt->context = ctx;
   17dbc:	60e5      	str	r5, [r4, #12]
   17dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17dc0:	2b00      	cmp	r3, #0
   17dc2:	d03a      	beq.n	17e3a <packet_received+0xca>
	if (context->flags & NET_CONTEXT_PROTO) {
   17dc4:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
   17dc8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
   17dcc:	d122      	bne.n	17e14 <packet_received+0xa4>
   17dce:	68a2      	ldr	r2, [r4, #8]
	size_t bytes = 0;
   17dd0:	469a      	mov	sl, r3
   17dd2:	e002      	b.n	17dda <packet_received+0x6a>
		bytes += buf->len;
   17dd4:	8993      	ldrh	r3, [r2, #12]
		buf = buf->frags;
   17dd6:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   17dd8:	449a      	add	sl, r3
	while (buf) {
   17dda:	2a00      	cmp	r2, #0
   17ddc:	d1fa      	bne.n	17dd4 <packet_received+0x64>
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   17dde:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
				net_pkt_ipv6_ext_len(pkt) +
   17de2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   17de6:	4419      	add	r1, r3
   17de8:	f10d 0206 	add.w	r2, sp, #6
   17dec:	3108      	adds	r1, #8
   17dee:	4620      	mov	r0, r4
   17df0:	f001 fe1b 	bl	19a2a <net_frag_get_pos>
	if (frag) {
   17df4:	b120      	cbz	r0, 17e00 <packet_received+0x90>
		net_pkt_set_appdata(pkt, frag->data + offset);
   17df6:	6883      	ldr	r3, [r0, #8]
   17df8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   17dfc:	4413      	add	r3, r2
	return pkt->appdata;
}

static inline void net_pkt_set_appdata(struct net_pkt *pkt, u8_t *data)
{
	pkt->appdata = data;
   17dfe:	61a3      	str	r3, [r4, #24]
	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   17e00:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
			       net_pkt_ipv6_ext_len(pkt) - proto_len);
   17e04:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   17e08:	441a      	add	r2, r3
   17e0a:	f5c2 437f 	rsb	r3, r2, #65280	; 0xff00
   17e0e:	33f8      	adds	r3, #248	; 0xf8
   17e10:	4453      	add	r3, sl
	return pkt->appdatalen;
}

static inline void net_pkt_set_appdatalen(struct net_pkt *pkt, u16_t len)
{
	pkt->appdatalen = len;
   17e12:	8663      	strh	r3, [r4, #50]	; 0x32
		net_pkt_appdata(pkt), net_pkt_appdatalen(pkt),
		net_pkt_get_len(pkt));

	net_stats_update_tcp_recv(net_pkt_appdatalen(pkt));     

	context->recv_cb(context, pkt, 0, user_data);   // pkt send to udp received function in udp.c 133
   17e14:	235c      	movs	r3, #92	; 0x5c
   17e16:	fb03 7909 	mla	r9, r3, r9, r7
   17e1a:	2200      	movs	r2, #0
   17e1c:	4643      	mov	r3, r8
   17e1e:	4621      	mov	r1, r4
   17e20:	4628      	mov	r0, r5
   17e22:	f8d9 9030 	ldr.w	r9, [r9, #48]	; 0x30
   17e26:	47c8      	blx	r9


#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	k_sem_give(&context->recv_data_wait);
   17e28:	f106 003c 	add.w	r0, r6, #60	; 0x3c
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   17e2c:	4438      	add	r0, r7
   17e2e:	f007 fd0d 	bl	1f84c <_impl_k_sem_give>
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return NET_OK;
   17e32:	2000      	movs	r0, #0
}
   17e34:	b002      	add	sp, #8
   17e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NET_DROP;
   17e3a:	2002      	movs	r0, #2
   17e3c:	e7fa      	b.n	17e34 <packet_received+0xc4>
   17e3e:	bf00      	nop
   17e40:	20002c1c 	.word	0x20002c1c

00017e44 <net_context_get>:
	if (family == AF_INET) {
   17e44:	2802      	cmp	r0, #2
{
   17e46:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e4a:	469a      	mov	sl, r3
	if (family == AF_INET) {
   17e4c:	d06d      	beq.n	17f2a <net_context_get+0xe6>
	if (type == SOCK_STREAM) {
   17e4e:	2901      	cmp	r1, #1
   17e50:	d071      	beq.n	17f36 <net_context_get+0xf2>
	if (ip_proto == IPPROTO_TCP) {
   17e52:	2a06      	cmp	r2, #6
   17e54:	d072      	beq.n	17f3c <net_context_get+0xf8>
	if (family != AF_INET && family != AF_INET6) {
   17e56:	280a      	cmp	r0, #10
   17e58:	d16a      	bne.n	17f30 <net_context_get+0xec>
	if (type != SOCK_DGRAM && type != SOCK_STREAM) {
   17e5a:	2902      	cmp	r1, #2
   17e5c:	d16b      	bne.n	17f36 <net_context_get+0xf2>
	if (ip_proto != IPPROTO_UDP && ip_proto != IPPROTO_TCP) {
   17e5e:	2a11      	cmp	r2, #17
   17e60:	d16c      	bne.n	17f3c <net_context_get+0xf8>
	if (!context) {
   17e62:	2b00      	cmp	r3, #0
   17e64:	d06d      	beq.n	17f42 <net_context_get+0xfe>
   17e66:	4d38      	ldr	r5, [pc, #224]	; (17f48 <net_context_get+0x104>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   17e68:	4838      	ldr	r0, [pc, #224]	; (17f4c <net_context_get+0x108>)
   17e6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17e6e:	f007 fd4d 	bl	1f90c <_impl_k_sem_take>
   17e72:	46a9      	mov	r9, r5
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   17e74:	2300      	movs	r3, #0
   17e76:	225c      	movs	r2, #92	; 0x5c
		if (net_context_is_used(&contexts[i])) {
   17e78:	f895 4055 	ldrb.w	r4, [r5, #85]	; 0x55
   17e7c:	f014 0401 	ands.w	r4, r4, #1
   17e80:	fb02 f603 	mul.w	r6, r2, r3
   17e84:	d00c      	beq.n	17ea0 <net_context_get+0x5c>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   17e86:	3301      	adds	r3, #1
   17e88:	2b0a      	cmp	r3, #10
   17e8a:	f105 055c 	add.w	r5, r5, #92	; 0x5c
   17e8e:	d1f3      	bne.n	17e78 <net_context_get+0x34>
	int i, ret = -ENOENT;
   17e90:	f06f 0401 	mvn.w	r4, #1
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   17e94:	482d      	ldr	r0, [pc, #180]	; (17f4c <net_context_get+0x108>)
   17e96:	f007 fcd9 	bl	1f84c <_impl_k_sem_give>
}
   17e9a:	4620      	mov	r0, r4
   17e9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		contexts[i].iface = 0;
   17ea0:	eb09 0706 	add.w	r7, r9, r6
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17ea4:	1d3b      	adds	r3, r7, #4
   17ea6:	f887 4054 	strb.w	r4, [r7, #84]	; 0x54
		contexts[i].flags = 0;
   17eaa:	f887 4055 	strb.w	r4, [r7, #85]	; 0x55
   17eae:	f04f 0b01 	mov.w	fp, #1
   17eb2:	f3bf 8f5b 	dmb	ish
   17eb6:	e853 2f00 	ldrex	r2, [r3]
   17eba:	e843 b100 	strex	r1, fp, [r3]
   17ebe:	2900      	cmp	r1, #0
   17ec0:	d1f9      	bne.n	17eb6 <net_context_get+0x72>
   17ec2:	f3bf 8f5b 	dmb	ish
	context->flags &= ~NET_CONTEXT_PROTO;
   17ec6:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
   17eca:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   17ece:	f043 0310 	orr.w	r3, r3, #16
		memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
   17ed2:	f106 0014 	add.w	r0, r6, #20
		memset(&contexts[i].local, 0, sizeof(struct sockaddr_ptr));
   17ed6:	f106 0808 	add.w	r8, r6, #8
   17eda:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
   17ede:	44c8      	add	r8, r9
		memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
   17ee0:	2218      	movs	r2, #24
   17ee2:	4621      	mov	r1, r4
   17ee4:	4448      	add	r0, r9
   17ee6:	f7e8 fd2c 	bl	942 <memset>
		memset(&contexts[i].local, 0, sizeof(struct sockaddr_ptr));
   17eea:	220c      	movs	r2, #12
   17eec:	4621      	mov	r1, r4
   17eee:	4640      	mov	r0, r8
   17ef0:	f7e8 fd27 	bl	942 <memset>
			addr6->sin6_port = find_available_port(&contexts[i],
   17ef4:	4641      	mov	r1, r8
   17ef6:	4628      	mov	r0, r5
   17ef8:	f7ff ff1e 	bl	17d38 <find_available_port>
   17efc:	f8a8 0002 	strh.w	r0, [r8, #2]
			if (!addr6->sin6_port) {
   17f00:	b180      	cbz	r0, 17f24 <net_context_get+0xe0>
		k_sem_init(&contexts[i].recv_data_wait, 1, UINT_MAX);
   17f02:	f106 003c 	add.w	r0, r6, #60	; 0x3c
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   17f06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17f0a:	4659      	mov	r1, fp
   17f0c:	4448      	add	r0, r9
   17f0e:	f007 fc93 	bl	1f838 <_impl_k_sem_init>
		contexts[i].flags |= NET_CONTEXT_IN_USE;
   17f12:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
   17f16:	ea43 030b 	orr.w	r3, r3, fp
   17f1a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
		*context = &contexts[i];
   17f1e:	f8ca 5000 	str.w	r5, [sl]
		break;
   17f22:	e7b7      	b.n	17e94 <net_context_get+0x50>
				ret = -EADDRINUSE;
   17f24:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   17f28:	e7b4      	b.n	17e94 <net_context_get+0x50>
		return -EPFNOSUPPORT;
   17f2a:	f06f 042d 	mvn.w	r4, #45	; 0x2d
   17f2e:	e7b4      	b.n	17e9a <net_context_get+0x56>
		return -EAFNOSUPPORT;
   17f30:	f06f 042e 	mvn.w	r4, #46	; 0x2e
   17f34:	e7b1      	b.n	17e9a <net_context_get+0x56>
		return -EPROTOTYPE;
   17f36:	f06f 0428 	mvn.w	r4, #40	; 0x28
   17f3a:	e7ae      	b.n	17e9a <net_context_get+0x56>
		return -EPROTONOSUPPORT;
   17f3c:	f06f 042a 	mvn.w	r4, #42	; 0x2a
   17f40:	e7ab      	b.n	17e9a <net_context_get+0x56>
		return -EINVAL;
   17f42:	f06f 0415 	mvn.w	r4, #21
   17f46:	e7a8      	b.n	17e9a <net_context_get+0x56>
   17f48:	20002c1c 	.word	0x20002c1c
   17f4c:	20002fb4 	.word	0x20002fb4

00017f50 <net_context_unref>:
{
   17f50:	b510      	push	{r4, lr}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   17f52:	1d03      	adds	r3, r0, #4
   17f54:	4604      	mov	r4, r0
   17f56:	f3bf 8f5b 	dmb	ish
   17f5a:	e853 0f00 	ldrex	r0, [r3]
   17f5e:	1e42      	subs	r2, r0, #1
   17f60:	e843 2100 	strex	r1, r2, [r3]
   17f64:	2900      	cmp	r1, #0
   17f66:	d1f8      	bne.n	17f5a <net_context_unref+0xa>
   17f68:	f3bf 8f5b 	dmb	ish
	if (old_rc != 1) {
   17f6c:	2801      	cmp	r0, #1
   17f6e:	d001      	beq.n	17f74 <net_context_unref+0x24>
		return old_rc - 1;
   17f70:	3801      	subs	r0, #1
   17f72:	bd10      	pop	{r4, pc}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   17f74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17f78:	4809      	ldr	r0, [pc, #36]	; (17fa0 <net_context_unref+0x50>)
   17f7a:	f007 fcc7 	bl	1f90c <_impl_k_sem_take>
	if (context->conn_handler) {
   17f7e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   17f80:	b118      	cbz	r0, 17f8a <net_context_unref+0x3a>
		net_conn_unregister(context->conn_handler);
   17f82:	f005 fbe5 	bl	1d750 <net_conn_unregister>
		context->conn_handler = NULL;
   17f86:	2300      	movs	r3, #0
   17f88:	62e3      	str	r3, [r4, #44]	; 0x2c
	context->flags &= ~NET_CONTEXT_IN_USE;
   17f8a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   17f8e:	4804      	ldr	r0, [pc, #16]	; (17fa0 <net_context_unref+0x50>)
   17f90:	f023 0307 	bic.w	r3, r3, #7
   17f94:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
   17f98:	f007 fc58 	bl	1f84c <_impl_k_sem_give>
   17f9c:	2000      	movs	r0, #0
}
   17f9e:	bd10      	pop	{r4, pc}
   17fa0:	20002fb4 	.word	0x20002fb4

00017fa4 <net_context_put>:
{
   17fa4:	b510      	push	{r4, lr}
	if (!PART_OF_ARRAY(contexts, context)) {
   17fa6:	b170      	cbz	r0, 17fc6 <net_context_put+0x22>
   17fa8:	4a08      	ldr	r2, [pc, #32]	; (17fcc <net_context_put+0x28>)
   17faa:	4290      	cmp	r0, r2
   17fac:	d30b      	bcc.n	17fc6 <net_context_put+0x22>
   17fae:	f502 7266 	add.w	r2, r2, #920	; 0x398
   17fb2:	4290      	cmp	r0, r2
   17fb4:	d207      	bcs.n	17fc6 <net_context_put+0x22>
	context->connect_cb = NULL;
   17fb6:	2400      	movs	r4, #0
   17fb8:	6384      	str	r4, [r0, #56]	; 0x38
	context->recv_cb = NULL;
   17fba:	6304      	str	r4, [r0, #48]	; 0x30
	context->send_cb = NULL;
   17fbc:	6344      	str	r4, [r0, #52]	; 0x34
	net_context_unref(context);
   17fbe:	f7ff ffc7 	bl	17f50 <net_context_unref>
	return 0;
   17fc2:	4620      	mov	r0, r4
   17fc4:	bd10      	pop	{r4, pc}
		return -EINVAL;
   17fc6:	f06f 0015 	mvn.w	r0, #21
}
   17fca:	bd10      	pop	{r4, pc}
   17fcc:	20002c1c 	.word	0x20002c1c

00017fd0 <net_context_bind>:
	if (context->conn_handler) {
   17fd0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   17fd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   17fd4:	4606      	mov	r6, r0
   17fd6:	460d      	mov	r5, r1
	if (context->conn_handler) {
   17fd8:	2b00      	cmp	r3, #0
   17fda:	d142      	bne.n	18062 <net_context_bind+0x92>
	if (addr->sa_family == AF_INET6) {
   17fdc:	8809      	ldrh	r1, [r1, #0]
   17fde:	290a      	cmp	r1, #10
   17fe0:	d142      	bne.n	18068 <net_context_bind+0x98>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   17fe2:	2a17      	cmp	r2, #23
		struct net_if *iface = NULL;
   17fe4:	9301      	str	r3, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in6)) {
   17fe6:	d93f      	bls.n	18068 <net_context_bind+0x98>
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   17fe8:	462c      	mov	r4, r5
   17fea:	f814 3f04 	ldrb.w	r3, [r4, #4]!
   17fee:	2bff      	cmp	r3, #255	; 0xff
   17ff0:	d11d      	bne.n	1802e <net_context_bind+0x5e>
			maddr = net_if_ipv6_maddr_lookup(&addr6->sin6_addr,
   17ff2:	a901      	add	r1, sp, #4
   17ff4:	4620      	mov	r0, r4
   17ff6:	f000 fe09 	bl	18c0c <net_if_ipv6_maddr_lookup>
			if (!maddr) {
   17ffa:	b918      	cbnz	r0, 18004 <net_context_bind+0x34>
				return -ENOENT;
   17ffc:	f06f 0001 	mvn.w	r0, #1
}
   18000:	b002      	add	sp, #8
   18002:	bd70      	pop	{r4, r5, r6, pc}
			ptr = &maddr->address.in6_addr;
   18004:	f100 0408 	add.w	r4, r0, #8
		if (!iface) {
   18008:	9801      	ldr	r0, [sp, #4]
   1800a:	b338      	cbz	r0, 1805c <net_context_bind+0x8c>
	context->iface = net_if_get_by_iface(iface);
   1800c:	f001 f968 	bl	192e0 <net_if_get_by_iface>
   18010:	f886 0054 	strb.w	r0, [r6, #84]	; 0x54
		if (addr6->sin6_port) {
   18014:	8869      	ldrh	r1, [r5, #2]
		net_sin6_ptr(&context->local)->sin6_addr = ptr;
   18016:	60f4      	str	r4, [r6, #12]
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   18018:	200a      	movs	r0, #10
   1801a:	8130      	strh	r0, [r6, #8]
		if (addr6->sin6_port) {
   1801c:	b1d1      	cbz	r1, 18054 <net_context_bind+0x84>
			ret = check_used_port(AF_INET6, addr6->sin6_port,
   1801e:	462a      	mov	r2, r5
   18020:	f7ff fe56 	bl	17cd0 <check_used_port>
			if (!ret) {
   18024:	2800      	cmp	r0, #0
   18026:	d1eb      	bne.n	18000 <net_context_bind+0x30>
				net_sin6_ptr(&context->local)->sin6_port =
   18028:	886b      	ldrh	r3, [r5, #2]
   1802a:	8173      	strh	r3, [r6, #10]
   1802c:	e7e8      	b.n	18000 <net_context_bind+0x30>
		} else if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1802e:	4620      	mov	r0, r4
   18030:	f7ff fe40 	bl	17cb4 <net_is_ipv6_addr_unspecified>
   18034:	b130      	cbz	r0, 18044 <net_context_bind+0x74>
			iface = net_if_get_default();
   18036:	f000 fb77 	bl	18728 <net_if_get_default>
   1803a:	9001      	str	r0, [sp, #4]
			ptr = (struct in6_addr *)net_ipv6_unspecified_address();
   1803c:	f003 fb6e 	bl	1b71c <net_ipv6_unspecified_address>
   18040:	4604      	mov	r4, r0
   18042:	e7e1      	b.n	18008 <net_context_bind+0x38>
			ifaddr = net_if_ipv6_addr_lookup(&addr6->sin6_addr,
   18044:	a901      	add	r1, sp, #4
   18046:	4620      	mov	r0, r4
   18048:	f000 fb94 	bl	18774 <net_if_ipv6_addr_lookup>
			if (!ifaddr) {
   1804c:	2800      	cmp	r0, #0
   1804e:	d0d5      	beq.n	17ffc <net_context_bind+0x2c>
			ptr = &ifaddr->address.in6_addr;
   18050:	1d04      	adds	r4, r0, #4
   18052:	e7d9      	b.n	18008 <net_context_bind+0x38>
			addr6->sin6_port =
   18054:	8973      	ldrh	r3, [r6, #10]
   18056:	806b      	strh	r3, [r5, #2]
		return 0;
   18058:	4608      	mov	r0, r1
   1805a:	e7d1      	b.n	18000 <net_context_bind+0x30>
			return -EADDRNOTAVAIL;
   1805c:	f06f 0030 	mvn.w	r0, #48	; 0x30
   18060:	e7ce      	b.n	18000 <net_context_bind+0x30>
		return -EISCONN;
   18062:	f06f 0037 	mvn.w	r0, #55	; 0x37
   18066:	e7cb      	b.n	18000 <net_context_bind+0x30>
	return -EINVAL;
   18068:	f06f 0015 	mvn.w	r0, #21
   1806c:	e7c8      	b.n	18000 <net_context_bind+0x30>

0001806e <bind_default>:
{
   1806e:	b530      	push	{r4, r5, lr}
	if (context->flags & NET_CONTEXT_FAMILY) {
   18070:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
   18074:	06db      	lsls	r3, r3, #27
   18076:	b087      	sub	sp, #28
   18078:	4604      	mov	r4, r0
   1807a:	d405      	bmi.n	18088 <bind_default+0x1a>
	return -EINVAL;
   1807c:	f06f 0015 	mvn.w	r0, #21
}
   18080:	b007      	add	sp, #28
   18082:	bd30      	pop	{r4, r5, pc}
			return 0;
   18084:	2000      	movs	r0, #0
   18086:	e7fb      	b.n	18080 <bind_default+0x12>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   18088:	68c3      	ldr	r3, [r0, #12]
   1808a:	2b00      	cmp	r3, #0
   1808c:	d1fa      	bne.n	18084 <bind_default+0x16>
		addr6.sin6_family = AF_INET6;
   1808e:	ad06      	add	r5, sp, #24
   18090:	230a      	movs	r3, #10
   18092:	f825 3d18 	strh.w	r3, [r5, #-24]!
		memcpy(&addr6.sin6_addr, net_ipv6_unspecified_address(),
   18096:	f003 fb41 	bl	1b71c <net_ipv6_unspecified_address>
   1809a:	2210      	movs	r2, #16
   1809c:	4601      	mov	r1, r0
   1809e:	a801      	add	r0, sp, #4
   180a0:	f7e8 fc23 	bl	8ea <memcpy>
			find_available_port(context,
   180a4:	4629      	mov	r1, r5
   180a6:	4620      	mov	r0, r4
   180a8:	f7ff fe46 	bl	17d38 <find_available_port>
		return net_context_bind(context, (struct sockaddr *)&addr6,
   180ac:	2218      	movs	r2, #24
		addr6.sin6_port =
   180ae:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr6,
   180b2:	4629      	mov	r1, r5
   180b4:	4620      	mov	r0, r4
   180b6:	f7ff ff8b 	bl	17fd0 <net_context_bind>
   180ba:	e7e1      	b.n	18080 <bind_default+0x12>

000180bc <sendto.isra.23>:
static int sendto(struct net_pkt *pkt,
   180bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   180c0:	68c4      	ldr	r4, [r0, #12]
   180c2:	9f08      	ldr	r7, [sp, #32]
   180c4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   180c8:	461e      	mov	r6, r3
   180ca:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   180ce:	460d      	mov	r5, r1
	if (!net_context_is_used(context)) {
   180d0:	07d9      	lsls	r1, r3, #31
static int sendto(struct net_pkt *pkt,
   180d2:	4681      	mov	r9, r0
   180d4:	4692      	mov	sl, r2
	if (!net_context_is_used(context)) {
   180d6:	d52c      	bpl.n	18132 <sendto.isra.23+0x76>
	if (context->flags & NET_CONTEXT_PROTO) {
   180d8:	065a      	lsls	r2, r3, #25
   180da:	d536      	bpl.n	1814a <sendto.isra.23+0x8e>
	if (!dst_addr) {
   180dc:	b38d      	cbz	r5, 18142 <sendto.isra.23+0x86>
	return pkt->family;
   180de:	f899 3036 	ldrb.w	r3, [r9, #54]	; 0x36
	if (net_pkt_family(pkt) == AF_INET6) {
   180e2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   180e6:	2b0a      	cmp	r3, #10
   180e8:	d127      	bne.n	1813a <sendto.isra.23+0x7e>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   180ea:	f1ba 0f17 	cmp.w	sl, #23
   180ee:	d924      	bls.n	1813a <sendto.isra.23+0x7e>
		if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   180f0:	1d29      	adds	r1, r5, #4
   180f2:	4608      	mov	r0, r1
   180f4:	f7ff fdde 	bl	17cb4 <net_is_ipv6_addr_unspecified>
   180f8:	bb18      	cbnz	r0, 18142 <sendto.isra.23+0x86>
   180fa:	f894 2055 	ldrb.w	r2, [r4, #85]	; 0x55
   180fe:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   18102:	d029      	beq.n	18158 <sendto.isra.23+0x9c>
		return -EPROTONOSUPPORT;
   18104:	f06f 002a 	mvn.w	r0, #42	; 0x2a
   18108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		r = net_ipv6_finalize(context, pkt);
   1810c:	4629      	mov	r1, r5
   1810e:	4620      	mov	r0, r4
   18110:	f003 fd4e 	bl	1bbb0 <net_ipv6_finalize>
	if (ret < 0) {
   18114:	2800      	cmp	r0, #0
   18116:	db35      	blt.n	18184 <sendto.isra.23+0xc8>
	context->send_cb = cb;
   18118:	6366      	str	r6, [r4, #52]	; 0x34
	context->user_data = user_data;
   1811a:	f8c4 8000 	str.w	r8, [r4]
	pkt->token = token;
   1811e:	612f      	str	r7, [r5, #16]
   18120:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   18124:	065b      	lsls	r3, r3, #25
   18126:	d4ed      	bmi.n	18104 <sendto.isra.23+0x48>
		return net_send_data(pkt);
   18128:	4628      	mov	r0, r5
}
   1812a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return net_send_data(pkt);
   1812e:	f000 b993 	b.w	18458 <net_send_data>
		return -EBADF;
   18132:	f06f 0008 	mvn.w	r0, #8
   18136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
   1813a:	f06f 0015 	mvn.w	r0, #21
   1813e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EDESTADDRREQ;
   18142:	f06f 0027 	mvn.w	r0, #39	; 0x27
   18146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ret = bind_default(context);
   1814a:	4620      	mov	r0, r4
   1814c:	f7ff ff8f 	bl	1806e <bind_default>
		if (ret) {
   18150:	2800      	cmp	r0, #0
   18152:	d0c3      	beq.n	180dc <sendto.isra.23+0x20>
   18154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pkt = net_ipv6_create(context, pkt, NULL, &addr6->sin6_addr);
   18158:	460b      	mov	r3, r1
   1815a:	4620      	mov	r0, r4
   1815c:	4649      	mov	r1, r9
   1815e:	f003 fb51 	bl	1b804 <net_ipv6_create>
   18162:	4601      	mov	r1, r0
				     net_pkt_ip_hdr_len(pkt) +
   18164:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
				     net_pkt_ipv6_ext_len(pkt),
   18168:	f891 2039 	ldrb.w	r2, [r1, #57]	; 0x39
		tmp = net_udp_insert(context, pkt,
   1816c:	886b      	ldrh	r3, [r5, #2]
   1816e:	4402      	add	r2, r0
   18170:	4620      	mov	r0, r4
   18172:	f005 fdc7 	bl	1dd04 <net_udp_insert>
		if (!tmp) {
   18176:	4605      	mov	r5, r0
   18178:	2800      	cmp	r0, #0
   1817a:	d1c7      	bne.n	1810c <sendto.isra.23+0x50>
			return -ENOMEM;
   1817c:	f06f 000b 	mvn.w	r0, #11
   18180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
}
   18184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00018188 <net_context_connect>:
{
   18188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1818c:	461e      	mov	r6, r3
	if (!net_context_is_used(context)) {
   1818e:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
   18192:	07db      	lsls	r3, r3, #31
{
   18194:	4604      	mov	r4, r0
   18196:	4688      	mov	r8, r1
   18198:	4617      	mov	r7, r2
	if (!net_context_is_used(context)) {
   1819a:	d53d      	bpl.n	18218 <net_context_connect+0x90>
	ret = bind_default(context);
   1819c:	f7ff ff67 	bl	1806e <bind_default>
	if (ret) {
   181a0:	4605      	mov	r5, r0
   181a2:	bb98      	cbnz	r0, 1820c <net_context_connect+0x84>
   181a4:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
	if (addr->sa_family != net_context_get_family(context)) {
   181a8:	f8b8 9000 	ldrh.w	r9, [r8]
	return AF_INET;
   181ac:	f013 0f10 	tst.w	r3, #16
   181b0:	bf14      	ite	ne
   181b2:	220a      	movne	r2, #10
   181b4:	2202      	moveq	r2, #2
   181b6:	4591      	cmp	r9, r2
   181b8:	d134      	bne.n	18224 <net_context_connect+0x9c>
	if (net_context_get_state(context) == NET_CONTEXT_LISTENING) {
   181ba:	f3c3 0341 	ubfx	r3, r3, #1, #2
   181be:	2b03      	cmp	r3, #3
   181c0:	d02d      	beq.n	1821e <net_context_connect+0x96>
	if (net_context_get_family(context) == AF_INET6) {
   181c2:	f1b9 0f0a 	cmp.w	r9, #10
   181c6:	d12d      	bne.n	18224 <net_context_connect+0x9c>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   181c8:	2f17      	cmp	r7, #23
   181ca:	d92b      	bls.n	18224 <net_context_connect+0x9c>
		memcpy(&addr6->sin6_addr, &net_sin6(addr)->sin6_addr,
   181cc:	f104 0718 	add.w	r7, r4, #24
   181d0:	2210      	movs	r2, #16
   181d2:	f108 0104 	add.w	r1, r8, #4
   181d6:	4638      	mov	r0, r7
   181d8:	f7e8 fb87 	bl	8ea <memcpy>
		addr6->sin6_port = net_sin6(addr)->sin6_port;
   181dc:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   181e0:	82e3      	strh	r3, [r4, #22]
		addr6->sin6_family = AF_INET6;
   181e2:	f8a4 9014 	strh.w	r9, [r4, #20]
		if (!net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   181e6:	4638      	mov	r0, r7
   181e8:	f7ff fd64 	bl	17cb4 <net_is_ipv6_addr_unspecified>
   181ec:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   181f0:	b978      	cbnz	r0, 18212 <net_context_connect+0x8a>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   181f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
   181f6:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
	if (context->flags & NET_CONTEXT_TYPE) {
   181fa:	f894 1055 	ldrb.w	r1, [r4, #85]	; 0x55
   181fe:	f011 0120 	ands.w	r1, r1, #32
   18202:	d103      	bne.n	1820c <net_context_connect+0x84>
		if (cb) {
   18204:	b116      	cbz	r6, 1820c <net_context_connect+0x84>
			cb(context, 0, user_data);
   18206:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18208:	4620      	mov	r0, r4
   1820a:	47b0      	blx	r6
}
   1820c:	4628      	mov	r0, r5
   1820e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
   18212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18216:	e7ee      	b.n	181f6 <net_context_connect+0x6e>
		return -EBADF;
   18218:	f06f 0508 	mvn.w	r5, #8
   1821c:	e7f6      	b.n	1820c <net_context_connect+0x84>
		return -EOPNOTSUPP;
   1821e:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   18222:	e7f3      	b.n	1820c <net_context_connect+0x84>
		return -EINVAL;
   18224:	f06f 0515 	mvn.w	r5, #21
   18228:	e7f0      	b.n	1820c <net_context_connect+0x84>

0001822a <net_context_sendto>:
{
   1822a:	b430      	push	{r4, r5}
   1822c:	9c03      	ldr	r4, [sp, #12]
	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
   1822e:	9d04      	ldr	r5, [sp, #16]
   18230:	9503      	str	r5, [sp, #12]
   18232:	9402      	str	r4, [sp, #8]
}
   18234:	bc30      	pop	{r4, r5}
	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
   18236:	f7ff bf41 	b.w	180bc <sendto.isra.23>
	...

0001823c <net_context_recv>:

int net_context_recv(struct net_context *context,
		     net_context_recv_cb_t cb,
		     s32_t timeout,
		     void *user_data)
{
   1823c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18240:	f890 5055 	ldrb.w	r5, [r0, #85]	; 0x55
   18244:	4698      	mov	r8, r3
	NET_ASSERT(context);

	if (!net_context_is_used(context)) {
   18246:	07eb      	lsls	r3, r5, #31
{
   18248:	b08f      	sub	sp, #60	; 0x3c
   1824a:	4604      	mov	r4, r0
   1824c:	460f      	mov	r7, r1
   1824e:	4616      	mov	r6, r2
	if (!net_context_is_used(context)) {
   18250:	d54b      	bpl.n	182ea <net_context_recv+0xae>
	if (context->flags & NET_CONTEXT_PROTO) {
   18252:	f015 0940 	ands.w	r9, r5, #64	; 0x40
   18256:	d14b      	bne.n	182f0 <net_context_recv+0xb4>
	struct sockaddr local_addr = {
   18258:	2218      	movs	r2, #24
   1825a:	4649      	mov	r1, r9
   1825c:	a808      	add	r0, sp, #32
   1825e:	f7e8 fb70 	bl	942 <memset>
		return AF_INET6;
   18262:	f015 0f10 	tst.w	r5, #16
	if (context->conn_handler) {
   18266:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   18268:	bf0c      	ite	eq
   1826a:	2302      	moveq	r3, #2
   1826c:	230a      	movne	r3, #10
	struct sockaddr local_addr = {
   1826e:	f8ad 3020 	strh.w	r3, [sp, #32]
	if (context->conn_handler) {
   18272:	b118      	cbz	r0, 1827c <net_context_recv+0x40>
		net_conn_unregister(context->conn_handler);
   18274:	f005 fa6c 	bl	1d750 <net_conn_unregister>
		context->conn_handler = NULL;
   18278:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
	ret = bind_default(context);
   1827c:	4620      	mov	r0, r4
   1827e:	f7ff fef6 	bl	1806e <bind_default>
	if (ret) {
   18282:	bb10      	cbnz	r0, 182ca <net_context_recv+0x8e>
   18284:	f894 e055 	ldrb.w	lr, [r4, #85]	; 0x55
	if (context->flags & NET_CONTEXT_FAMILY) {
   18288:	f01e 0510 	ands.w	r5, lr, #16
   1828c:	d136      	bne.n	182fc <net_context_recv+0xc0>
	struct sockaddr *laddr = NULL;
   1828e:	462a      	mov	r2, r5
	context->recv_cb = cb;
   18290:	6327      	str	r7, [r4, #48]	; 0x30
				ntohs(net_sin(&context->remote)->sin_port),
   18292:	8ae7      	ldrh	r7, [r4, #22]
	ret = net_conn_register(net_context_get_ip_proto(context),
   18294:	f8cd 8008 	str.w	r8, [sp, #8]
				ntohs(net_sin(&context->remote)->sin_port),
   18298:	0a3b      	lsrs	r3, r7, #8
		return IPPROTO_TCP;
   1829a:	f01e 0f40 	tst.w	lr, #64	; 0x40
   1829e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
	ret = net_conn_register(net_context_get_ip_proto(context),
   182a2:	ba6d      	rev16	r5, r5
   182a4:	f104 072c 	add.w	r7, r4, #44	; 0x2c
   182a8:	bf0c      	ite	eq
   182aa:	2011      	moveq	r0, #17
   182ac:	2006      	movne	r0, #6
   182ae:	9703      	str	r7, [sp, #12]
   182b0:	f01e 0f80 	tst.w	lr, #128	; 0x80
   182b4:	4f1d      	ldr	r7, [pc, #116]	; (1832c <net_context_recv+0xf0>)
   182b6:	9701      	str	r7, [sp, #4]
   182b8:	b2ad      	uxth	r5, r5
   182ba:	bf14      	ite	ne
   182bc:	f104 0114 	addne.w	r1, r4, #20
   182c0:	2100      	moveq	r1, #0
   182c2:	9500      	str	r5, [sp, #0]
   182c4:	b29b      	uxth	r3, r3
   182c6:	f005 fa5d 	bl	1d784 <net_conn_register>
#endif /* CONFIG_NET_OFFLOAD */

#if defined(CONFIG_NET_UDP)
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
		int ret = recv_udp(context, cb, timeout, user_data);
		if (ret < 0) {
   182ca:	2800      	cmp	r0, #0
   182cc:	db0a      	blt.n	182e4 <net_context_recv+0xa8>
	{
		return -EPROTOTYPE;
	}

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	if (timeout) {
   182ce:	b146      	cbz	r6, 182e2 <net_context_recv+0xa6>
 */
__syscall void k_sem_reset(struct k_sem *sem);

static inline void _impl_k_sem_reset(struct k_sem *sem)
{
	sem->count = 0;
   182d0:	2300      	movs	r3, #0
   182d2:	6463      	str	r3, [r4, #68]	; 0x44
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   182d4:	4631      	mov	r1, r6
   182d6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   182da:	f007 fb17 	bl	1f90c <_impl_k_sem_take>
		 * received.
		 */
		k_sem_reset(&context->recv_data_wait);

		ret = k_sem_take(&context->recv_data_wait, timeout);
		if (ret == -EAGAIN) {
   182de:	300b      	adds	r0, #11
   182e0:	d009      	beq.n	182f6 <net_context_recv+0xba>
			return -ETIMEDOUT;
		}
	}
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return 0;
   182e2:	2000      	movs	r0, #0
}
   182e4:	b00f      	add	sp, #60	; 0x3c
   182e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EBADF;
   182ea:	f06f 0008 	mvn.w	r0, #8
   182ee:	e7f9      	b.n	182e4 <net_context_recv+0xa8>
		return -EPROTOTYPE;
   182f0:	f06f 0028 	mvn.w	r0, #40	; 0x28
   182f4:	e7f6      	b.n	182e4 <net_context_recv+0xa8>
			return -ETIMEDOUT;
   182f6:	f06f 003b 	mvn.w	r0, #59	; 0x3b
   182fa:	e7f3      	b.n	182e4 <net_context_recv+0xa8>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   182fc:	68e2      	ldr	r2, [r4, #12]
   182fe:	b18a      	cbz	r2, 18324 <net_context_recv+0xe8>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   18300:	ad04      	add	r5, sp, #16
   18302:	f102 0910 	add.w	r9, r2, #16
   18306:	462b      	mov	r3, r5
   18308:	6810      	ldr	r0, [r2, #0]
   1830a:	6851      	ldr	r1, [r2, #4]
   1830c:	46ac      	mov	ip, r5
   1830e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   18312:	3208      	adds	r2, #8
   18314:	454a      	cmp	r2, r9
   18316:	4665      	mov	r5, ip
   18318:	d1f6      	bne.n	18308 <net_context_recv+0xcc>
   1831a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1831c:	ad09      	add	r5, sp, #36	; 0x24
   1831e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			laddr = &local_addr;
   18322:	aa08      	add	r2, sp, #32
			net_sin6((struct sockaddr *)&context->local)->sin6_port;
   18324:	8965      	ldrh	r5, [r4, #10]
		net_sin6(&local_addr)->sin6_port =
   18326:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
   1832a:	e7b1      	b.n	18290 <net_context_recv+0x54>
   1832c:	00017d71 	.word	0x00017d71

00018330 <net_context_init>:
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   18330:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18334:	2101      	movs	r1, #1
   18336:	4801      	ldr	r0, [pc, #4]	; (1833c <net_context_init+0xc>)
   18338:	f007 ba7e 	b.w	1f838 <_impl_k_sem_init>
   1833c:	20002fb4 	.word	0x20002fb4

00018340 <net_is_ipv6_addr_loopback>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   18340:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   18342:	b99a      	cbnz	r2, 1836c <net_is_ipv6_addr_loopback+0x2c>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   18344:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   18346:	b98b      	cbnz	r3, 1836c <net_is_ipv6_addr_loopback+0x2c>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   18348:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1834a:	b97a      	cbnz	r2, 1836c <net_is_ipv6_addr_loopback+0x2c>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1834c:	68c3      	ldr	r3, [r0, #12]
 *
   1834e:	0618      	lsls	r0, r3, #24

   18350:	0a1a      	lsrs	r2, r3, #8
 * @brief Check if the IPv6 address is a multicast address.
   18352:	ea40 6013 	orr.w	r0, r0, r3, lsr #24

   18356:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 * @brief Check if the IPv6 address is a multicast address.
   1835a:	021b      	lsls	r3, r3, #8
   1835c:	4310      	orrs	r0, r2
   1835e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   18362:	4318      	orrs	r0, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   18364:	1e43      	subs	r3, r0, #1
   18366:	4258      	negs	r0, r3
   18368:	4158      	adcs	r0, r3
   1836a:	4770      	bx	lr
   1836c:	2000      	movs	r0, #0
   1836e:	4770      	bx	lr

00018370 <processing_data>:
		locally_routed = true;
	}
#endif

	/* If there is no data, then drop the packet. */
	if (!pkt->frags) {
   18370:	6883      	ldr	r3, [r0, #8]

	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
   18372:	b510      	push	{r4, lr}
   18374:	4604      	mov	r4, r0
	if (!pkt->frags) {
   18376:	b1d3      	cbz	r3, 183ae <processing_data+0x3e>
	if (!is_loopback && !locally_routed) {
   18378:	b189      	cbz	r1, 1839e <processing_data+0x2e>
	return pkt->frags->data;
   1837a:	68a3      	ldr	r3, [r4, #8]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   1837c:	689b      	ldr	r3, [r3, #8]
   1837e:	781b      	ldrb	r3, [r3, #0]
   18380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   18384:	2b60      	cmp	r3, #96	; 0x60
   18386:	d112      	bne.n	183ae <processing_data+0x3e>
	pkt->family = family;
   18388:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   1838c:	220a      	movs	r2, #10
   1838e:	f362 03c6 	bfi	r3, r2, #3, #4
   18392:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
		return net_ipv6_process_pkt(pkt);
   18396:	4620      	mov	r0, r4
   18398:	f004 fdcc 	bl	1cf34 <net_ipv6_process_pkt>
   1839c:	e006      	b.n	183ac <processing_data+0x3c>
   1839e:	6940      	ldr	r0, [r0, #20]
 * @return verdict about the packet
 */
static inline enum net_verdict net_if_recv_data(struct net_if *iface,
						struct net_pkt *pkt)
{
	return iface->l2->recv(iface, pkt);
   183a0:	6843      	ldr	r3, [r0, #4]
   183a2:	4621      	mov	r1, r4
   183a4:	681b      	ldr	r3, [r3, #0]
   183a6:	4798      	blx	r3
		if (ret != NET_CONTINUE) {
   183a8:	2801      	cmp	r0, #1
   183aa:	d0e6      	beq.n	1837a <processing_data+0xa>
	switch (process_data(pkt, is_loopback)) {
   183ac:	b120      	cbz	r0, 183b8 <processing_data+0x48>
		NET_DBG("Consumed pkt %p", pkt);
		break;
	case NET_DROP:
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
   183ae:	4620      	mov	r0, r4
		break;
	}
}
   183b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_pkt_unref(pkt);
   183b4:	f001 b909 	b.w	195ca <net_pkt_unref>
   183b8:	bd10      	pop	{r4, pc}
	...

000183bc <net_init>:

	NET_DBG("Network L2 init done");
}

static int net_init(struct device *unused)
{
   183bc:	b510      	push	{r4, lr}
   183be:	b086      	sub	sp, #24

	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   183c0:	f001 fb74 	bl	19aac <net_pkt_init>

	net_context_init();
   183c4:	f7ff ffb4 	bl	18330 <net_context_init>
	net_icmpv6_init();
   183c8:	f002 ff10 	bl	1b1ec <net_icmpv6_init>
	net_ipv6_init();
   183cc:	f004 ff06 	bl	1d1dc <net_ipv6_init>
	net_conn_init();
   183d0:	f005 fb40 	bl	1da54 <net_conn_init>
	net_udp_init();
   183d4:	f005 fc9e 	bl	1dd14 <net_udp_init>
	net_route_init();
   183d8:	f005 f987 	bl	1d6ea <net_route_init>

	l2_init();
	l3_init();

	net_mgmt_event_init();
   183dc:	f005 f800 	bl	1d3e0 <net_mgmt_event_init>
	k_fifo_init(&rx_queue);
   183e0:	480b      	ldr	r0, [pc, #44]	; (18410 <net_init+0x54>)
   183e2:	f006 ffb7 	bl	1f354 <k_queue_init>

   183e6:	2301      	movs	r3, #1
   183e8:	2400      	movs	r4, #0
   183ea:	9304      	str	r3, [sp, #16]
   183ec:	f06f 0307 	mvn.w	r3, #7
   183f0:	9303      	str	r3, [sp, #12]
   183f2:	9405      	str	r4, [sp, #20]
   183f4:	9402      	str	r4, [sp, #8]
   183f6:	9401      	str	r4, [sp, #4]
   183f8:	9400      	str	r4, [sp, #0]
   183fa:	4b06      	ldr	r3, [pc, #24]	; (18414 <net_init+0x58>)
   183fc:	4906      	ldr	r1, [pc, #24]	; (18418 <net_init+0x5c>)
   183fe:	4807      	ldr	r0, [pc, #28]	; (1841c <net_init+0x60>)
   18400:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   18404:	f007 fc5e 	bl	1fcc4 <_impl_k_thread_create>
		return status;
	}
#endif

	return status;
}
   18408:	4620      	mov	r0, r4
   1840a:	b006      	add	sp, #24
   1840c:	bd10      	pop	{r4, pc}
   1840e:	bf00      	nop
   18410:	20002fcc 	.word	0x20002fcc
   18414:	00018421 	.word	0x00018421
   18418:	20006e78 	.word	0x20006e78
   1841c:	20002fdc 	.word	0x20002fdc

00018420 <net_rx_thread>:
{
   18420:	b510      	push	{r4, lr}
	net_if_init(&startup_sync);
   18422:	480b      	ldr	r0, [pc, #44]	; (18450 <net_rx_thread+0x30>)
		pkt = k_fifo_get(&rx_queue, K_FOREVER);
   18424:	4c0b      	ldr	r4, [pc, #44]	; (18454 <net_rx_thread+0x34>)
	net_if_init(&startup_sync);
   18426:	f000 ffad 	bl	19384 <net_if_init>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1842a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1842e:	4808      	ldr	r0, [pc, #32]	; (18450 <net_rx_thread+0x30>)
   18430:	f007 fa6c 	bl	1f90c <_impl_k_sem_take>
	net_if_post_init();
   18434:	f000 fff4 	bl	19420 <net_if_post_init>
		pkt = k_fifo_get(&rx_queue, K_FOREVER);
   18438:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1843c:	4620      	mov	r0, r4
   1843e:	f006 ffde 	bl	1f3fe <k_queue_get>
		processing_data(pkt, false);
   18442:	2100      	movs	r1, #0
   18444:	f7ff ff94 	bl	18370 <processing_data>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   18448:	f007 f984 	bl	1f754 <_impl_k_yield>
   1844c:	e7f4      	b.n	18438 <net_rx_thread+0x18>
   1844e:	bf00      	nop
   18450:	2000ea6c 	.word	0x2000ea6c
   18454:	20002fcc 	.word	0x20002fcc

00018458 <net_send_data>:
{
   18458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!pkt || !pkt->frags) {
   1845c:	4604      	mov	r4, r0
{
   1845e:	b091      	sub	sp, #68	; 0x44
	if (!pkt || !pkt->frags) {
   18460:	2800      	cmp	r0, #0
   18462:	d07f      	beq.n	18564 <net_send_data+0x10c>
   18464:	6882      	ldr	r2, [r0, #8]
   18466:	2a00      	cmp	r2, #0
   18468:	d07c      	beq.n	18564 <net_send_data+0x10c>
	if (!net_pkt_iface(pkt)) {
   1846a:	6943      	ldr	r3, [r0, #20]
   1846c:	2b00      	cmp	r3, #0
   1846e:	d07c      	beq.n	1856a <net_send_data+0x112>
	return pkt->family;
   18470:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
	if (net_pkt_family(pkt) == AF_INET6) {
   18474:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   18478:	2b0a      	cmp	r3, #10
   1847a:	d169      	bne.n	18550 <net_send_data+0xf8>
		if (net_ipv6_addr_cmp(&NET_IPV6_HDR(pkt)->dst,
   1847c:	6895      	ldr	r5, [r2, #8]
   1847e:	f003 f94d 	bl	1b71c <net_ipv6_unspecified_address>
   18482:	3518      	adds	r5, #24
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   18484:	4601      	mov	r1, r0
   18486:	2210      	movs	r2, #16
   18488:	4628      	mov	r0, r5
   1848a:	f7e8 fa01 	bl	890 <memcmp>
   1848e:	b920      	cbnz	r0, 1849a <net_send_data+0x42>
		return -EINVAL;
   18490:	f06f 0030 	mvn.w	r0, #48	; 0x30
}
   18494:	b011      	add	sp, #68	; 0x44
   18496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return pkt->frags->data;
   1849a:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1849c:	689d      	ldr	r5, [r3, #8]
   1849e:	3518      	adds	r5, #24
   184a0:	4628      	mov	r0, r5
   184a2:	f7ff ff4d 	bl	18340 <net_is_ipv6_addr_loopback>
   184a6:	4601      	mov	r1, r0
   184a8:	2800      	cmp	r0, #0
   184aa:	d045      	beq.n	18538 <net_send_data+0xe0>
   184ac:	68a3      	ldr	r3, [r4, #8]
   184ae:	f8d3 e008 	ldr.w	lr, [r3, #8]
			net_ipaddr_copy(&addr, &NET_IPV6_HDR(pkt)->src);
   184b2:	aa0c      	add	r2, sp, #48	; 0x30
   184b4:	f10e 0308 	add.w	r3, lr, #8
   184b8:	f10e 0618 	add.w	r6, lr, #24
   184bc:	461d      	mov	r5, r3
   184be:	4694      	mov	ip, r2
   184c0:	6818      	ldr	r0, [r3, #0]
   184c2:	6859      	ldr	r1, [r3, #4]
   184c4:	4617      	mov	r7, r2
   184c6:	c703      	stmia	r7!, {r0, r1}
   184c8:	3308      	adds	r3, #8
   184ca:	42b3      	cmp	r3, r6
   184cc:	463a      	mov	r2, r7
   184ce:	d1f7      	bne.n	184c0 <net_send_data+0x68>
   184d0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   184d4:	f10d 0820 	add.w	r8, sp, #32
			net_ipaddr_copy(&addr, &NET_IPV6_HDR(pkt)->src);
   184d8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   184dc:	466f      	mov	r7, sp
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   184de:	f10e 0328 	add.w	r3, lr, #40	; 0x28
   184e2:	4632      	mov	r2, r6
   184e4:	46c6      	mov	lr, r8
   184e6:	6810      	ldr	r0, [r2, #0]
   184e8:	6851      	ldr	r1, [r2, #4]
   184ea:	46c1      	mov	r9, r8
   184ec:	e8a9 0003 	stmia.w	r9!, {r0, r1}
   184f0:	3208      	adds	r2, #8
   184f2:	429a      	cmp	r2, r3
   184f4:	46c8      	mov	r8, r9
   184f6:	d1f6      	bne.n	184e6 <net_send_data+0x8e>
   184f8:	46f0      	mov	r8, lr
   184fa:	462b      	mov	r3, r5
   184fc:	4642      	mov	r2, r8
   184fe:	ca03      	ldmia	r2!, {r0, r1}
   18500:	4562      	cmp	r2, ip
   18502:	6018      	str	r0, [r3, #0]
   18504:	6059      	str	r1, [r3, #4]
   18506:	4690      	mov	r8, r2
   18508:	f103 0308 	add.w	r3, r3, #8
   1850c:	d1f6      	bne.n	184fc <net_send_data+0xa4>
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1850e:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   18512:	ad04      	add	r5, sp, #16
   18514:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   18518:	4633      	mov	r3, r6
   1851a:	462a      	mov	r2, r5
   1851c:	ca03      	ldmia	r2!, {r0, r1}
   1851e:	4572      	cmp	r2, lr
   18520:	6018      	str	r0, [r3, #0]
   18522:	6059      	str	r1, [r3, #4]
   18524:	4615      	mov	r5, r2
   18526:	f103 0308 	add.w	r3, r3, #8
   1852a:	d1f6      	bne.n	1851a <net_send_data+0xc2>
		processing_data(pkt, true);
   1852c:	4620      	mov	r0, r4
   1852e:	2101      	movs	r1, #1
   18530:	f7ff ff1e 	bl	18370 <processing_data>
		return 0;
   18534:	2000      	movs	r0, #0
   18536:	e7ad      	b.n	18494 <net_send_data+0x3c>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   18538:	4628      	mov	r0, r5
   1853a:	f000 f91b 	bl	18774 <net_if_ipv6_addr_lookup>
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1853e:	2800      	cmp	r0, #0
   18540:	d1b4      	bne.n	184ac <net_send_data+0x54>
   18542:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->src)) {
   18544:	6898      	ldr	r0, [r3, #8]
   18546:	3008      	adds	r0, #8
   18548:	f7ff fefa 	bl	18340 <net_is_ipv6_addr_loopback>
   1854c:	2800      	cmp	r0, #0
   1854e:	d19f      	bne.n	18490 <net_send_data+0x38>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   18550:	4621      	mov	r1, r4
   18552:	6960      	ldr	r0, [r4, #20]
   18554:	f000 fdd8 	bl	19108 <net_if_send_data>
	return 0;
   18558:	2802      	cmp	r0, #2
   1855a:	bf0c      	ite	eq
   1855c:	f06f 0004 	mvneq.w	r0, #4
   18560:	2000      	movne	r0, #0
   18562:	e797      	b.n	18494 <net_send_data+0x3c>
		return -ENODATA;
   18564:	f06f 004d 	mvn.w	r0, #77	; 0x4d
   18568:	e794      	b.n	18494 <net_send_data+0x3c>
		return -EINVAL;
   1856a:	f06f 0015 	mvn.w	r0, #21
   1856e:	e791      	b.n	18494 <net_send_data+0x3c>

00018570 <net_recv_data>:
	if (!pkt->frags) {
   18570:	688a      	ldr	r2, [r1, #8]
{
   18572:	b508      	push	{r3, lr}
	if (!pkt->frags) {
   18574:	b18a      	cbz	r2, 1859a <net_recv_data+0x2a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18576:	f3bf 8f5b 	dmb	ish
   1857a:	68c2      	ldr	r2, [r0, #12]
   1857c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   18580:	07d2      	lsls	r2, r2, #31
   18582:	d50d      	bpl.n	185a0 <net_recv_data+0x30>
	pkt->iface = iface;
   18584:	6148      	str	r0, [r1, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   18586:	7d42      	ldrb	r2, [r0, #21]
   18588:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1858c:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
	k_fifo_put(&rx_queue, pkt);
   18590:	4805      	ldr	r0, [pc, #20]	; (185a8 <net_recv_data+0x38>)
   18592:	f006 ff10 	bl	1f3b6 <k_queue_append>
	return 0;
   18596:	2000      	movs	r0, #0
   18598:	bd08      	pop	{r3, pc}
		return -ENODATA;
   1859a:	f06f 004d 	mvn.w	r0, #77	; 0x4d
   1859e:	bd08      	pop	{r3, pc}
		return -ENETDOWN;
   185a0:	f06f 003d 	mvn.w	r0, #61	; 0x3d
}
   185a4:	bd08      	pop	{r3, pc}
   185a6:	bf00      	nop
   185a8:	20002fcc 	.word	0x20002fcc

000185ac <ipv6_addr_expired>:
						  lifetime);

	NET_DBG("IPv6 address %s is deprecated",
		net_sprint_ipv6_addr(&ifaddr->address.in6_addr));

	ifaddr->addr_state = NET_ADDR_DEPRECATED;
   185ac:	2302      	movs	r3, #2
   185ae:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
   185b2:	4770      	bx	lr

000185b4 <prefix_lf_timeout>:
		CONTAINER_OF(work, struct net_if_ipv6_prefix, lifetime);

	NET_DBG("Prefix %s/%d expired",
		net_sprint_ipv6_addr(&prefix->prefix), prefix->len);

	prefix->is_used = false;
   185b4:	2300      	movs	r3, #0
   185b6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
   185ba:	4770      	bx	lr

000185bc <ipv6_router_expired>:
						    lifetime);

	NET_DBG("IPv6 router %s is expired",
		net_sprint_ipv6_addr(&router->address.in6_addr));

	router->is_used = false;
   185bc:	2300      	movs	r3, #0
   185be:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   185c2:	4770      	bx	lr

000185c4 <net_if_ipv6_get_best_match>:
}

static inline struct in6_addr *net_if_ipv6_get_best_match(struct net_if *iface,
							  struct in6_addr *dst,
							  u8_t *best_so_far)
{
   185c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   185c8:	f100 0430 	add.w	r4, r0, #48	; 0x30
   185cc:	f500 76ba 	add.w	r6, r0, #372	; 0x174
	    addr->address.family == AF_INET6 &&
   185d0:	f248 08fe 	movw	r8, #33022	; 0x80fe
	struct in6_addr *src = NULL;
   185d4:	2000      	movs	r0, #0
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   185d6:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   185da:	b153      	cbz	r3, 185f2 <net_if_ipv6_get_best_match+0x2e>
   185dc:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
   185e0:	2b01      	cmp	r3, #1
   185e2:	d106      	bne.n	185f2 <net_if_ipv6_get_best_match+0x2e>
   185e4:	f834 3c04 	ldrh.w	r3, [r4, #-4]
   185e8:	2b0a      	cmp	r3, #10
   185ea:	d102      	bne.n	185f2 <net_if_ipv6_get_best_match+0x2e>
	    addr->address.family == AF_INET6 &&
   185ec:	8823      	ldrh	r3, [r4, #0]
   185ee:	4543      	cmp	r3, r8
   185f0:	d111      	bne.n	18616 <net_if_ipv6_get_best_match+0x52>
   185f2:	346c      	adds	r4, #108	; 0x6c
	u8_t i, len;

	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   185f4:	42b4      	cmp	r4, r6
   185f6:	d1ee      	bne.n	185d6 <net_if_ipv6_get_best_match+0x12>
   185f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xor = src->s6_addr[j] ^ dst->s6_addr[j];
   185fc:	ea85 0509 	eor.w	r5, r5, r9
   18600:	b2ff      	uxtb	r7, r7
				if (!(xor & 0x80)) {
   18602:	f015 0f80 	tst.w	r5, #128	; 0x80
   18606:	d116      	bne.n	18636 <net_if_ipv6_get_best_match+0x72>
					len++;
   18608:	3301      	adds	r3, #1
   1860a:	b2db      	uxtb	r3, r3
					xor <<= 1;
   1860c:	006d      	lsls	r5, r5, #1
			for (k = 0; k < 8; k++) {
   1860e:	42bb      	cmp	r3, r7
					xor <<= 1;
   18610:	b2ed      	uxtb	r5, r5
			for (k = 0; k < 8; k++) {
   18612:	d1f6      	bne.n	18602 <net_if_ipv6_get_best_match+0x3e>
   18614:	e00f      	b.n	18636 <net_if_ipv6_get_best_match+0x72>
   18616:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   1861a:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
	u8_t len = 0;
   1861e:	2300      	movs	r3, #0
		if (src->s6_addr[j] == dst->s6_addr[j]) {
   18620:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
   18624:	f81e 9f01 	ldrb.w	r9, [lr, #1]!
   18628:	454d      	cmp	r5, r9
   1862a:	f103 0708 	add.w	r7, r3, #8
   1862e:	d1e5      	bne.n	185fc <net_if_ipv6_get_best_match+0x38>
			len += 8;
   18630:	b2fb      	uxtb	r3, r7
	for (j = 0; j < 16; j++) {
   18632:	2b80      	cmp	r3, #128	; 0x80
   18634:	d1f4      	bne.n	18620 <net_if_ipv6_get_best_match+0x5c>
			continue;
		}

		len = get_length(dst,
				 &iface->ipv6.unicast[i].address.in6_addr);
		if (len >= *best_so_far) {
   18636:	7815      	ldrb	r5, [r2, #0]
   18638:	429d      	cmp	r5, r3
			*best_so_far = len;
   1863a:	bf9c      	itt	ls
   1863c:	7013      	strbls	r3, [r2, #0]
   1863e:	4620      	movls	r0, r4
   18640:	e7d7      	b.n	185f2 <net_if_ipv6_get_best_match+0x2e>

00018642 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18642:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18644:	f3bf 8f5b 	dmb	ish
   18648:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   1864c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
   18650:	f001 011f 	and.w	r1, r1, #31
   18654:	4108      	asrs	r0, r1
}
   18656:	f000 0001 	and.w	r0, r0, #1
   1865a:	4770      	bx	lr

0001865c <net_is_ipv6_prefix>:
	if (length > 128) {
   1865c:	2a80      	cmp	r2, #128	; 0x80
{
   1865e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18660:	4607      	mov	r7, r0
   18662:	460e      	mov	r6, r1
   18664:	4614      	mov	r4, r2
	if (length > 128) {
   18666:	d901      	bls.n	1866c <net_is_ipv6_prefix+0x10>
		return false;
   18668:	2000      	movs	r0, #0
   1866a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (memcmp(addr1, addr2, bytes)) {
   1866c:	08d5      	lsrs	r5, r2, #3
   1866e:	462a      	mov	r2, r5
   18670:	f7e8 f90e 	bl	890 <memcmp>
   18674:	2800      	cmp	r0, #0
   18676:	d1f7      	bne.n	18668 <net_is_ipv6_prefix+0xc>
	u8_t bits = 128 - length;
   18678:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	if (!remain) {
   1867c:	f014 0407 	ands.w	r4, r4, #7
   18680:	d00f      	beq.n	186a2 <net_is_ipv6_prefix+0x46>
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   18682:	5d73      	ldrb	r3, [r6, r5]
   18684:	5d7a      	ldrb	r2, [r7, r5]
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   18686:	f1c4 0108 	rsb	r1, r4, #8
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1868a:	405a      	eors	r2, r3
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1868c:	23ff      	movs	r3, #255	; 0xff
   1868e:	408b      	lsls	r3, r1
   18690:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   18694:	fa03 f404 	lsl.w	r4, r3, r4
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   18698:	4222      	tst	r2, r4
   1869a:	bf0c      	ite	eq
   1869c:	2001      	moveq	r0, #1
   1869e:	2000      	movne	r0, #0
   186a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return true;
   186a2:	2001      	movs	r0, #1
}
   186a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000186a6 <net_ipv6_addr_cmp>:
{
   186a6:	b508      	push	{r3, lr}
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   186a8:	2210      	movs	r2, #16
   186aa:	f7e8 f8f1 	bl	890 <memcmp>
}
   186ae:	fab0 f080 	clz	r0, r0
   186b2:	0940      	lsrs	r0, r0, #5
   186b4:	bd08      	pop	{r3, pc}
	...

000186b8 <k_delayed_work_submit>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   186b8:	460a      	mov	r2, r1
   186ba:	4601      	mov	r1, r0
   186bc:	4801      	ldr	r0, [pc, #4]	; (186c4 <k_delayed_work_submit+0xc>)
   186be:	f007 bc69 	b.w	1ff94 <k_delayed_work_submit_to_queue>
   186c2:	bf00      	nop
   186c4:	20005218 	.word	0x20005218

000186c8 <net_mgmt_event_notify>:
void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length);

static inline void net_mgmt_event_notify(u32_t mgmt_event, struct net_if *iface)
{
	net_mgmt_event_notify_with_info(mgmt_event, iface, NULL, 0);
   186c8:	2300      	movs	r3, #0
   186ca:	461a      	mov	r2, r3
   186cc:	f004 be4a 	b.w	1d364 <net_mgmt_event_notify_with_info>

000186d0 <net_if_ipv6_start_dad>:
{
   186d0:	b510      	push	{r4, lr}
   186d2:	460c      	mov	r4, r1
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   186d4:	2100      	movs	r1, #0
{
   186d6:	4602      	mov	r2, r0
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   186d8:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
 */
static inline bool net_if_is_up(struct net_if *iface)
{
	NET_ASSERT(iface);

	return atomic_test_bit(iface->flags, NET_IF_UP);
   186dc:	300c      	adds	r0, #12
   186de:	f7ff ffb0 	bl	18642 <atomic_test_bit>
	if (net_if_is_up(iface)) {
   186e2:	b170      	cbz	r0, 18702 <net_if_ipv6_start_dad+0x32>
		ifaddr->dad_count = 1;
   186e4:	2301      	movs	r3, #1
   186e6:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
		if (!net_ipv6_start_dad(iface, ifaddr)) {
   186ea:	4621      	mov	r1, r4
   186ec:	4610      	mov	r0, r2
   186ee:	f004 fa9d 	bl	1cc2c <net_ipv6_start_dad>
   186f2:	b930      	cbnz	r0, 18702 <net_if_ipv6_start_dad+0x32>
			k_delayed_work_submit(&ifaddr->dad_timer, DAD_TIMEOUT);
   186f4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   186f8:	2164      	movs	r1, #100	; 0x64
}
   186fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_delayed_work_submit(&ifaddr->dad_timer, DAD_TIMEOUT);
   186fe:	f7ff bfdb 	b.w	186b8 <k_delayed_work_submit>
   18702:	bd10      	pop	{r4, pc}

00018704 <net_if_lookup_by_dev>:
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   18704:	4b06      	ldr	r3, [pc, #24]	; (18720 <net_if_lookup_by_dev+0x1c>)
   18706:	4a07      	ldr	r2, [pc, #28]	; (18724 <net_if_lookup_by_dev+0x20>)
   18708:	4293      	cmp	r3, r2
   1870a:	d102      	bne.n	18712 <net_if_lookup_by_dev+0xe>
	return NULL;
   1870c:	2300      	movs	r3, #0
}
   1870e:	4618      	mov	r0, r3
   18710:	4770      	bx	lr
		if (iface->dev == dev) {
   18712:	6819      	ldr	r1, [r3, #0]
   18714:	4281      	cmp	r1, r0
   18716:	d0fa      	beq.n	1870e <net_if_lookup_by_dev+0xa>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   18718:	f503 7318 	add.w	r3, r3, #608	; 0x260
   1871c:	e7f4      	b.n	18708 <net_if_lookup_by_dev+0x4>
   1871e:	bf00      	nop
   18720:	2000eb80 	.word	0x2000eb80
   18724:	2000ede0 	.word	0x2000ede0

00018728 <net_if_get_default>:
}
   18728:	4b02      	ldr	r3, [pc, #8]	; (18734 <net_if_get_default+0xc>)
	if (__net_if_start == __net_if_end) {
   1872a:	4803      	ldr	r0, [pc, #12]	; (18738 <net_if_get_default+0x10>)
}
   1872c:	4298      	cmp	r0, r3
   1872e:	bf08      	it	eq
   18730:	2000      	moveq	r0, #0
   18732:	4770      	bx	lr
   18734:	2000ede0 	.word	0x2000ede0
   18738:	2000eb80 	.word	0x2000eb80

0001873c <net_if_start_rs>:
{
   1873c:	b510      	push	{r4, lr}
   1873e:	4604      	mov	r4, r0
	if (!net_ipv6_start_rs(iface)) {
   18740:	f004 fbc0 	bl	1cec4 <net_ipv6_start_rs>
   18744:	b938      	cbnz	r0, 18756 <net_if_start_rs+0x1a>
		k_delayed_work_submit(&iface->ipv6.rs_timer, RS_TIMEOUT);
   18746:	f504 7006 	add.w	r0, r4, #536	; 0x218
   1874a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
}
   1874e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_delayed_work_submit(&iface->ipv6.rs_timer, RS_TIMEOUT);
   18752:	f7ff bfb1 	b.w	186b8 <k_delayed_work_submit>
   18756:	bd10      	pop	{r4, pc}

00018758 <rs_timeout>:
	iface->ipv6.rs_count++;
   18758:	f5a0 7006 	sub.w	r0, r0, #536	; 0x218
   1875c:	f890 324e 	ldrb.w	r3, [r0, #590]	; 0x24e
   18760:	3301      	adds	r3, #1
   18762:	b2db      	uxtb	r3, r3
	if (iface->ipv6.rs_count < RS_COUNT) {
   18764:	2b02      	cmp	r3, #2
	iface->ipv6.rs_count++;
   18766:	f880 324e 	strb.w	r3, [r0, #590]	; 0x24e
	if (iface->ipv6.rs_count < RS_COUNT) {
   1876a:	d801      	bhi.n	18770 <rs_timeout+0x18>
		net_if_start_rs(iface);
   1876c:	f7ff bfe6 	b.w	1873c <net_if_start_rs>
   18770:	4770      	bx	lr
	...

00018774 <net_if_ipv6_addr_lookup>:
{
   18774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   18778:	4c14      	ldr	r4, [pc, #80]	; (187cc <net_if_ipv6_addr_lookup+0x58>)
   1877a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 187d0 <net_if_ipv6_addr_lookup+0x5c>
{
   1877e:	4681      	mov	r9, r0
   18780:	460f      	mov	r7, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   18782:	4544      	cmp	r4, r8
   18784:	d102      	bne.n	1878c <net_if_ipv6_addr_lookup+0x18>
	return NULL;
   18786:	2000      	movs	r0, #0
}
   18788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1878c:	f104 0630 	add.w	r6, r4, #48	; 0x30
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   18790:	2500      	movs	r5, #0
			if (!iface->ipv6.unicast[i].is_used ||
   18792:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
   18796:	b183      	cbz	r3, 187ba <net_if_ipv6_addr_lookup+0x46>
   18798:	f836 3c04 	ldrh.w	r3, [r6, #-4]
   1879c:	2b0a      	cmp	r3, #10
   1879e:	d10c      	bne.n	187ba <net_if_ipv6_addr_lookup+0x46>
			if (net_is_ipv6_prefix(addr->s6_addr,
   187a0:	2280      	movs	r2, #128	; 0x80
   187a2:	4631      	mov	r1, r6
   187a4:	4648      	mov	r0, r9
   187a6:	f7ff ff59 	bl	1865c <net_is_ipv6_prefix>
   187aa:	b130      	cbz	r0, 187ba <net_if_ipv6_addr_lookup+0x46>
				if (ret) {
   187ac:	b107      	cbz	r7, 187b0 <net_if_ipv6_addr_lookup+0x3c>
					*ret = iface;
   187ae:	603c      	str	r4, [r7, #0]
				return &iface->ipv6.unicast[i];
   187b0:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   187b4:	4420      	add	r0, r4
   187b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   187ba:	356c      	adds	r5, #108	; 0x6c
		for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   187bc:	f5b5 7fa2 	cmp.w	r5, #324	; 0x144
   187c0:	f106 066c 	add.w	r6, r6, #108	; 0x6c
   187c4:	d1e5      	bne.n	18792 <net_if_ipv6_addr_lookup+0x1e>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   187c6:	f504 7418 	add.w	r4, r4, #608	; 0x260
   187ca:	e7da      	b.n	18782 <net_if_ipv6_addr_lookup+0xe>
   187cc:	2000eb80 	.word	0x2000eb80
   187d0:	2000ede0 	.word	0x2000ede0

000187d4 <dad_timeout>:
{
   187d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct net_if *iface = NULL;
   187d6:	a902      	add	r1, sp, #8
   187d8:	2300      	movs	r3, #0
   187da:	f841 3d04 	str.w	r3, [r1, #-4]!
	tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr, &iface);
   187de:	f1a0 0438 	sub.w	r4, r0, #56	; 0x38
	ifaddr->addr_state = NET_ADDR_PREFERRED;
   187e2:	2301      	movs	r3, #1
   187e4:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr, &iface);
   187e8:	f1a0 053c 	sub.w	r5, r0, #60	; 0x3c
   187ec:	4620      	mov	r0, r4
   187ee:	f7ff ffc1 	bl	18774 <net_if_ipv6_addr_lookup>
	if (tmp == ifaddr) {
   187f2:	4285      	cmp	r5, r0
   187f4:	d107      	bne.n	18806 <dad_timeout+0x32>
		net_mgmt_event_notify(NET_EVENT_IPV6_DAD_SUCCEED, iface);
   187f6:	9901      	ldr	r1, [sp, #4]
   187f8:	4804      	ldr	r0, [pc, #16]	; (1880c <dad_timeout+0x38>)
   187fa:	f7ff ff65 	bl	186c8 <net_mgmt_event_notify>
		net_ipv6_nbr_rm(iface, &ifaddr->address.in6_addr);
   187fe:	4621      	mov	r1, r4
   18800:	9801      	ldr	r0, [sp, #4]
   18802:	f002 ff71 	bl	1b6e8 <net_ipv6_nbr_rm>
}
   18806:	b003      	add	sp, #12
   18808:	bd30      	pop	{r4, r5, pc}
   1880a:	bf00      	nop
   1880c:	f060000d 	.word	0xf060000d

00018810 <net_if_ipv6_addr_update_lifetime>:
	k_delayed_work_submit(&ifaddr->lifetime,
   18810:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18814:	4359      	muls	r1, r3
   18816:	3014      	adds	r0, #20
   18818:	f7ff bf4e 	b.w	186b8 <k_delayed_work_submit>

0001881c <net_if_ipv6_addr_add>:
{
   1881c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18820:	4604      	mov	r4, r0
   18822:	b089      	sub	sp, #36	; 0x24
   18824:	460f      	mov	r7, r1
   18826:	4693      	mov	fp, r2
   18828:	469a      	mov	sl, r3
   1882a:	f100 0630 	add.w	r6, r0, #48	; 0x30
   1882e:	2500      	movs	r5, #0
		if (!iface->ipv6.unicast[i].is_used) {
   18830:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
   18834:	b153      	cbz	r3, 1884c <net_if_ipv6_addr_add+0x30>
		if (net_ipv6_addr_cmp(addr,
   18836:	4631      	mov	r1, r6
   18838:	4638      	mov	r0, r7
   1883a:	f7ff ff34 	bl	186a6 <net_ipv6_addr_cmp>
   1883e:	b128      	cbz	r0, 1884c <net_if_ipv6_addr_add+0x30>
			return &iface->ipv6.unicast[i];
   18840:	352c      	adds	r5, #44	; 0x2c
   18842:	4425      	add	r5, r4
}
   18844:	4628      	mov	r0, r5
   18846:	b009      	add	sp, #36	; 0x24
   18848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1884c:	356c      	adds	r5, #108	; 0x6c
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1884e:	f5b5 7fa2 	cmp.w	r5, #324	; 0x144
   18852:	f106 066c 	add.w	r6, r6, #108	; 0x6c
   18856:	d1eb      	bne.n	18830 <net_if_ipv6_addr_add+0x14>
		if (iface->ipv6.unicast[i].is_used) {
   18858:	f894 6094 	ldrb.w	r6, [r4, #148]	; 0x94
   1885c:	b156      	cbz	r6, 18874 <net_if_ipv6_addr_add+0x58>
   1885e:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   18862:	2b00      	cmp	r3, #0
   18864:	f000 8094 	beq.w	18990 <net_if_ipv6_addr_add+0x174>
   18868:	f894 316c 	ldrb.w	r3, [r4, #364]	; 0x16c
   1886c:	2b00      	cmp	r3, #0
   1886e:	f040 8095 	bne.w	1899c <net_if_ipv6_addr_add+0x180>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   18872:	2602      	movs	r6, #2
   18874:	f04f 086c 	mov.w	r8, #108	; 0x6c
   18878:	fb08 f806 	mul.w	r8, r8, r6
	ifaddr->is_used = true;
   1887c:	eb04 0908 	add.w	r9, r4, r8
   18880:	2301      	movs	r3, #1
   18882:	f889 3094 	strb.w	r3, [r9, #148]	; 0x94
	ifaddr->address.family = AF_INET6;
   18886:	230a      	movs	r3, #10
		net_if_addr_init(&iface->ipv6.unicast[i], addr, addr_type,
   18888:	f108 052c 	add.w	r5, r8, #44	; 0x2c
	ifaddr->address.family = AF_INET6;
   1888c:	f8a9 302c 	strh.w	r3, [r9, #44]	; 0x2c
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   18890:	463b      	mov	r3, r7
   18892:	af04      	add	r7, sp, #16
		net_if_addr_init(&iface->ipv6.unicast[i], addr, addr_type,
   18894:	4425      	add	r5, r4
	ifaddr->addr_type = addr_type;
   18896:	f889 b090 	strb.w	fp, [r9, #144]	; 0x90
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   1889a:	f103 0c10 	add.w	ip, r3, #16
   1889e:	463a      	mov	r2, r7
   188a0:	6818      	ldr	r0, [r3, #0]
   188a2:	6859      	ldr	r1, [r3, #4]
   188a4:	46be      	mov	lr, r7
   188a6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   188aa:	3308      	adds	r3, #8
   188ac:	4563      	cmp	r3, ip
   188ae:	4677      	mov	r7, lr
   188b0:	d1f6      	bne.n	188a0 <net_if_ipv6_addr_add+0x84>
   188b2:	1d2f      	adds	r7, r5, #4
   188b4:	f10d 0e20 	add.w	lr, sp, #32
   188b8:	4613      	mov	r3, r2
   188ba:	cb03      	ldmia	r3!, {r0, r1}
   188bc:	4573      	cmp	r3, lr
   188be:	6038      	str	r0, [r7, #0]
   188c0:	6079      	str	r1, [r7, #4]
   188c2:	461a      	mov	r2, r3
   188c4:	f107 0708 	add.w	r7, r7, #8
   188c8:	d1f6      	bne.n	188b8 <net_if_ipv6_addr_add+0x9c>
	k_delayed_work_init(&ifaddr->dad_timer, dad_timeout);
   188ca:	f108 0068 	add.w	r0, r8, #104	; 0x68
   188ce:	4934      	ldr	r1, [pc, #208]	; (189a0 <net_if_ipv6_addr_add+0x184>)
   188d0:	4420      	add	r0, r4
   188d2:	f007 fae7 	bl	1fea4 <k_delayed_work_init>
   188d6:	236c      	movs	r3, #108	; 0x6c
		ifaddr->is_infinite = false;
   188d8:	fb03 4306 	mla	r3, r3, r6, r4
	if (vlifetime) {
   188dc:	f1ba 0f00 	cmp.w	sl, #0
   188e0:	d058      	beq.n	18994 <net_if_ipv6_addr_add+0x178>
		ifaddr->is_infinite = false;
   188e2:	2200      	movs	r2, #0
		k_delayed_work_init(&ifaddr->lifetime, ipv6_addr_expired);
   188e4:	f108 0040 	add.w	r0, r8, #64	; 0x40
   188e8:	492e      	ldr	r1, [pc, #184]	; (189a4 <net_if_ipv6_addr_add+0x188>)
		ifaddr->is_infinite = false;
   188ea:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		k_delayed_work_init(&ifaddr->lifetime, ipv6_addr_expired);
   188ee:	4420      	add	r0, r4
   188f0:	f007 fad8 	bl	1fea4 <k_delayed_work_init>
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
   188f4:	4651      	mov	r1, sl
   188f6:	4628      	mov	r0, r5
   188f8:	f7ff ff8a 	bl	18810 <net_if_ipv6_addr_update_lifetime>
					u16_t addr0, u16_t addr1,
					u16_t addr2, u16_t addr3,
					u16_t addr4, u16_t addr5,
					u16_t addr6, u16_t addr7)
{
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   188fc:	f240 23ff 	movw	r3, #767	; 0x2ff
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   18900:	2700      	movs	r7, #0
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   18902:	f8ad 3000 	strh.w	r3, [sp]
	ret = net_ipv6_mld_join(iface, &addr);
   18906:	4669      	mov	r1, sp
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   18908:	f44f 7380 	mov.w	r3, #256	; 0x100
   1890c:	4620      	mov	r0, r4
   1890e:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   18912:	f8ad 7002 	strh.w	r7, [sp, #2]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   18916:	f8ad 7004 	strh.w	r7, [sp, #4]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1891a:	f8ad 7006 	strh.w	r7, [sp, #6]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1891e:	f8ad 7008 	strh.w	r7, [sp, #8]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   18922:	f8ad 700a 	strh.w	r7, [sp, #10]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   18926:	f8ad 700c 	strh.w	r7, [sp, #12]
   1892a:	f004 facd 	bl	1cec8 <net_ipv6_mld_join>
	dst->s6_addr[0]   = 0xFF;
   1892e:	23ff      	movs	r3, #255	; 0xff
   18930:	f88d 3000 	strb.w	r3, [sp]
	dst->s6_addr[12]  = 0xFF;
   18934:	f88d 300c 	strb.w	r3, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   18938:	236c      	movs	r3, #108	; 0x6c
   1893a:	fb03 4606 	mla	r6, r3, r6, r4
	dst->s6_addr[1]   = 0x02;
   1893e:	2202      	movs	r2, #2
	dst->s6_addr[13]  = src->s6_addr[13];
   18940:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
	dst->s6_addr[1]   = 0x02;
   18944:	f88d 2001 	strb.w	r2, [sp, #1]
	dst->s6_addr[11]  = 0x01;
   18948:	2201      	movs	r2, #1
   1894a:	f88d 200b 	strb.w	r2, [sp, #11]
	dst->s6_addr[13]  = src->s6_addr[13];
   1894e:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   18952:	f899 203f 	ldrb.w	r2, [r9, #63]	; 0x3f
   18956:	f899 303e 	ldrb.w	r3, [r9, #62]	; 0x3e
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1895a:	f8ad 7002 	strh.w	r7, [sp, #2]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1895e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	ret = net_ipv6_mld_join(iface, &addr);
   18962:	4669      	mov	r1, sp
   18964:	4620      	mov	r0, r4
   18966:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1896a:	f8ad 7004 	strh.w	r7, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1896e:	f8ad 7006 	strh.w	r7, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   18972:	f8ad 7008 	strh.w	r7, [sp, #8]
	dst->s6_addr[10]  = 0;
   18976:	f88d 700a 	strb.w	r7, [sp, #10]
   1897a:	f004 faa5 	bl	1cec8 <net_ipv6_mld_join>
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1897e:	4629      	mov	r1, r5
   18980:	4620      	mov	r0, r4
   18982:	f7ff fea5 	bl	186d0 <net_if_ipv6_start_dad>
		net_mgmt_event_notify(NET_EVENT_IPV6_ADDR_ADD, iface);
   18986:	4621      	mov	r1, r4
   18988:	4807      	ldr	r0, [pc, #28]	; (189a8 <net_if_ipv6_addr_add+0x18c>)
   1898a:	f7ff fe9d 	bl	186c8 <net_mgmt_event_notify>
   1898e:	e759      	b.n	18844 <net_if_ipv6_addr_add+0x28>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   18990:	2601      	movs	r6, #1
   18992:	e76f      	b.n	18874 <net_if_ipv6_addr_add+0x58>
		ifaddr->is_infinite = true;
   18994:	2201      	movs	r2, #1
   18996:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
   1899a:	e7af      	b.n	188fc <net_if_ipv6_addr_add+0xe0>
	return NULL;
   1899c:	2500      	movs	r5, #0
   1899e:	e751      	b.n	18844 <net_if_ipv6_addr_add+0x28>
   189a0:	000187d5 	.word	0x000187d5
   189a4:	000185ad 	.word	0x000185ad
   189a8:	f0600001 	.word	0xf0600001

000189ac <net_if_start_dad>:
{
   189ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   189ae:	4604      	mov	r4, r0
   189b0:	b085      	sub	sp, #20
	struct in6_addr addr = { };
   189b2:	2210      	movs	r2, #16
   189b4:	2100      	movs	r1, #0
   189b6:	4668      	mov	r0, sp
   189b8:	f7e7 ffc3 	bl	942 <memset>
	addr->s6_addr[0] = 0xfe;
	addr->s6_addr[1] = 0x80;
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);

	switch (lladdr->len) {
   189bc:	7d22      	ldrb	r2, [r4, #20]
	addr->s6_addr[0] = 0xfe;
   189be:	25fe      	movs	r5, #254	; 0xfe
	addr->s6_addr[1] = 0x80;
   189c0:	2380      	movs	r3, #128	; 0x80
	switch (lladdr->len) {
   189c2:	2a06      	cmp	r2, #6
	addr->s6_addr[0] = 0xfe;
   189c4:	f88d 5000 	strb.w	r5, [sp]
	addr->s6_addr[1] = 0x80;
   189c8:	f88d 3001 	strb.w	r3, [sp, #1]
	switch (lladdr->len) {
   189cc:	d02e      	beq.n	18a2c <net_if_start_dad+0x80>
   189ce:	2a08      	cmp	r2, #8
   189d0:	d047      	beq.n	18a62 <net_if_start_dad+0xb6>
   189d2:	2a02      	cmp	r2, #2
   189d4:	d10e      	bne.n	189f4 <net_if_start_dad+0x48>
	case 2:
		/* The generated IPv6 shall not toggle the
		 * Universal/Local bit. RFC 6282 ch 3.2.2
		 */
		if (lladdr->type == NET_LINK_IEEE802154) {
   189d6:	7d63      	ldrb	r3, [r4, #21]
   189d8:	2b01      	cmp	r3, #1
   189da:	d10b      	bne.n	189f4 <net_if_start_dad+0x48>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
			addr->s6_addr[11] = 0xff;
   189dc:	23ff      	movs	r3, #255	; 0xff
   189de:	f88d 300b 	strb.w	r3, [sp, #11]
			addr->s6_addr[12] = 0xfe;
			addr->s6_addr[13] = 0;
			addr->s6_addr[14] = lladdr->addr[0];
   189e2:	6923      	ldr	r3, [r4, #16]
			addr->s6_addr[12] = 0xfe;
   189e4:	f88d 500c 	strb.w	r5, [sp, #12]
			addr->s6_addr[14] = lladdr->addr[0];
   189e8:	781a      	ldrb	r2, [r3, #0]
   189ea:	f88d 200e 	strb.w	r2, [sp, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   189ee:	785b      	ldrb	r3, [r3, #1]
   189f0:	f88d 300f 	strb.w	r3, [sp, #15]
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
   189f4:	2300      	movs	r3, #0
   189f6:	2201      	movs	r2, #1
   189f8:	4669      	mov	r1, sp
   189fa:	4620      	mov	r0, r4
   189fc:	f7ff ff0e 	bl	1881c <net_if_ipv6_addr_add>
   18a00:	f104 052c 	add.w	r5, r4, #44	; 0x2c
   18a04:	4607      	mov	r7, r0
   18a06:	f504 76b8 	add.w	r6, r4, #368	; 0x170
		if (!iface->ipv6.unicast[i].is_used ||
   18a0a:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   18a0e:	b143      	cbz	r3, 18a22 <net_if_start_dad+0x76>
   18a10:	882b      	ldrh	r3, [r5, #0]
   18a12:	2b0a      	cmp	r3, #10
   18a14:	d105      	bne.n	18a22 <net_if_start_dad+0x76>
		    iface->ipv6.unicast[i].address.family != AF_INET6 ||
   18a16:	42af      	cmp	r7, r5
   18a18:	d003      	beq.n	18a22 <net_if_start_dad+0x76>
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   18a1a:	4629      	mov	r1, r5
   18a1c:	4620      	mov	r0, r4
   18a1e:	f7ff fe57 	bl	186d0 <net_if_ipv6_start_dad>
   18a22:	356c      	adds	r5, #108	; 0x6c
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   18a24:	42b5      	cmp	r5, r6
   18a26:	d1f0      	bne.n	18a0a <net_if_start_dad+0x5e>
}
   18a28:	b005      	add	sp, #20
   18a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		break;
	case 6:
		/* We do not toggle the Universal/Local bit
		 * in Bluetooth. See RFC 7668 ch 3.2.2
		 */
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   18a2c:	2203      	movs	r2, #3
   18a2e:	6921      	ldr	r1, [r4, #16]
   18a30:	a802      	add	r0, sp, #8
   18a32:	f7e7 ff5a 	bl	8ea <memcpy>
		addr->s6_addr[11] = 0xff;
		addr->s6_addr[12] = 0xfe;
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   18a36:	6921      	ldr	r1, [r4, #16]
		addr->s6_addr[12] = 0xfe;
   18a38:	f88d 500c 	strb.w	r5, [sp, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   18a3c:	2203      	movs	r2, #3
		addr->s6_addr[11] = 0xff;
   18a3e:	23ff      	movs	r3, #255	; 0xff
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   18a40:	4411      	add	r1, r2
   18a42:	f10d 000d 	add.w	r0, sp, #13
		addr->s6_addr[11] = 0xff;
   18a46:	f88d 300b 	strb.w	r3, [sp, #11]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   18a4a:	f7e7 ff4e 	bl	8ea <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
			addr->s6_addr[8] ^= 0x02;
		}
#endif

		if (lladdr->type == NET_LINK_ETHERNET) {
   18a4e:	7d63      	ldrb	r3, [r4, #21]
   18a50:	2b03      	cmp	r3, #3
   18a52:	d1cf      	bne.n	189f4 <net_if_start_dad+0x48>
		}

		break;
	case 8:
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
		addr->s6_addr[8] ^= 0x02;
   18a54:	f89d 3008 	ldrb.w	r3, [sp, #8]
   18a58:	f083 0302 	eor.w	r3, r3, #2
   18a5c:	f88d 3008 	strb.w	r3, [sp, #8]
   18a60:	e7c8      	b.n	189f4 <net_if_start_dad+0x48>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   18a62:	6921      	ldr	r1, [r4, #16]
   18a64:	a802      	add	r0, sp, #8
   18a66:	f7e7 ff40 	bl	8ea <memcpy>
   18a6a:	e7f3      	b.n	18a54 <net_if_start_dad+0xa8>

00018a6c <net_if_ipv6_maddr_add>:
{
   18a6c:	b538      	push	{r3, r4, r5, lr}
	if (!net_is_ipv6_addr_mcast(addr)) {
   18a6e:	780b      	ldrb	r3, [r1, #0]
   18a70:	2bff      	cmp	r3, #255	; 0xff
{
   18a72:	4604      	mov	r4, r0
	if (!net_is_ipv6_addr_mcast(addr)) {
   18a74:	d125      	bne.n	18ac2 <net_if_ipv6_maddr_add+0x56>
		if (iface->ipv6.mcast[i].is_used) {
   18a76:	f890 5170 	ldrb.w	r5, [r0, #368]	; 0x170
   18a7a:	f015 0501 	ands.w	r5, r5, #1
   18a7e:	d01e      	beq.n	18abe <net_if_ipv6_maddr_add+0x52>
   18a80:	f890 3188 	ldrb.w	r3, [r0, #392]	; 0x188
   18a84:	07db      	lsls	r3, r3, #31
   18a86:	d41c      	bmi.n	18ac2 <net_if_ipv6_maddr_add+0x56>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   18a88:	2001      	movs	r0, #1
		iface->ipv6.mcast[i].is_used = true;
   18a8a:	2518      	movs	r5, #24
   18a8c:	4345      	muls	r5, r0
   18a8e:	1962      	adds	r2, r4, r5
		memcpy(&iface->ipv6.mcast[i].address.in6_addr, addr, 16);
   18a90:	f505 70bc 	add.w	r0, r5, #376	; 0x178
		iface->ipv6.mcast[i].is_used = true;
   18a94:	f892 3170 	ldrb.w	r3, [r2, #368]	; 0x170
   18a98:	f043 0301 	orr.w	r3, r3, #1
   18a9c:	f882 3170 	strb.w	r3, [r2, #368]	; 0x170
		iface->ipv6.mcast[i].address.family = AF_INET6;
   18aa0:	230a      	movs	r3, #10
   18aa2:	f8a2 3174 	strh.w	r3, [r2, #372]	; 0x174
		memcpy(&iface->ipv6.mcast[i].address.in6_addr, addr, 16);
   18aa6:	4420      	add	r0, r4
   18aa8:	2210      	movs	r2, #16
   18aaa:	f7e7 ff1e 	bl	8ea <memcpy>
		net_mgmt_event_notify(NET_EVENT_IPV6_MADDR_ADD, iface);
   18aae:	4621      	mov	r1, r4
   18ab0:	4805      	ldr	r0, [pc, #20]	; (18ac8 <net_if_ipv6_maddr_add+0x5c>)
   18ab2:	f7ff fe09 	bl	186c8 <net_mgmt_event_notify>
		return &iface->ipv6.mcast[i];
   18ab6:	f505 70b8 	add.w	r0, r5, #368	; 0x170
   18aba:	4420      	add	r0, r4
   18abc:	bd38      	pop	{r3, r4, r5, pc}
		if (iface->ipv6.mcast[i].is_used) {
   18abe:	4628      	mov	r0, r5
   18ac0:	e7e3      	b.n	18a8a <net_if_ipv6_maddr_add+0x1e>
		return NULL;
   18ac2:	2000      	movs	r0, #0
}
   18ac4:	bd38      	pop	{r3, r4, r5, pc}
   18ac6:	bf00      	nop
   18ac8:	f0600003 	.word	0xf0600003

00018acc <net_if_ipv6_maddr_rm>:
{
   18acc:	b538      	push	{r3, r4, r5, lr}
		if (!iface->ipv6.mcast[i].is_used) {
   18ace:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
   18ad2:	07da      	lsls	r2, r3, #31
{
   18ad4:	4604      	mov	r4, r0
   18ad6:	460d      	mov	r5, r1
		if (!iface->ipv6.mcast[i].is_used) {
   18ad8:	d504      	bpl.n	18ae4 <net_if_ipv6_maddr_rm+0x18>
		if (!net_ipv6_addr_cmp(
   18ada:	f500 70bc 	add.w	r0, r0, #376	; 0x178
   18ade:	f7ff fde2 	bl	186a6 <net_ipv6_addr_cmp>
   18ae2:	b9c8      	cbnz	r0, 18b18 <net_if_ipv6_maddr_rm+0x4c>
		if (!iface->ipv6.mcast[i].is_used) {
   18ae4:	f894 3188 	ldrb.w	r3, [r4, #392]	; 0x188
   18ae8:	07db      	lsls	r3, r3, #31
   18aea:	d517      	bpl.n	18b1c <net_if_ipv6_maddr_rm+0x50>
		if (!net_ipv6_addr_cmp(
   18aec:	4629      	mov	r1, r5
   18aee:	f504 70c8 	add.w	r0, r4, #400	; 0x190
   18af2:	f7ff fdd8 	bl	186a6 <net_ipv6_addr_cmp>
   18af6:	b188      	cbz	r0, 18b1c <net_if_ipv6_maddr_rm+0x50>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   18af8:	2301      	movs	r3, #1
		iface->ipv6.mcast[i].is_used = false;
   18afa:	2218      	movs	r2, #24
   18afc:	fb02 4303 	mla	r3, r2, r3, r4
		net_mgmt_event_notify(NET_EVENT_IPV6_MADDR_DEL, iface);
   18b00:	4621      	mov	r1, r4
		iface->ipv6.mcast[i].is_used = false;
   18b02:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
		net_mgmt_event_notify(NET_EVENT_IPV6_MADDR_DEL, iface);
   18b06:	4806      	ldr	r0, [pc, #24]	; (18b20 <net_if_ipv6_maddr_rm+0x54>)
		iface->ipv6.mcast[i].is_used = false;
   18b08:	f36f 0200 	bfc	r2, #0, #1
   18b0c:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		net_mgmt_event_notify(NET_EVENT_IPV6_MADDR_DEL, iface);
   18b10:	f7ff fdda 	bl	186c8 <net_mgmt_event_notify>
		return true;
   18b14:	2001      	movs	r0, #1
   18b16:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   18b18:	2300      	movs	r3, #0
   18b1a:	e7ee      	b.n	18afa <net_if_ipv6_maddr_rm+0x2e>
	return false;
   18b1c:	2000      	movs	r0, #0
}
   18b1e:	bd38      	pop	{r3, r4, r5, pc}
   18b20:	f0600004 	.word	0xf0600004

00018b24 <net_if_ipv6_addr_rm>:
{
   18b24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   18b28:	4604      	mov	r4, r0
   18b2a:	460f      	mov	r7, r1
   18b2c:	f100 0630 	add.w	r6, r0, #48	; 0x30
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   18b30:	2500      	movs	r5, #0
   18b32:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
		if (!iface->ipv6.unicast[i].is_used) {
   18b36:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
   18b3a:	2b00      	cmp	r3, #0
   18b3c:	d041      	beq.n	18bc2 <net_if_ipv6_addr_rm+0x9e>
		if (!net_ipv6_addr_cmp(
   18b3e:	4639      	mov	r1, r7
   18b40:	4630      	mov	r0, r6
   18b42:	f7ff fdb0 	bl	186a6 <net_ipv6_addr_cmp>
   18b46:	fb0a f805 	mul.w	r8, sl, r5
   18b4a:	4681      	mov	r9, r0
   18b4c:	b3c8      	cbz	r0, 18bc2 <net_if_ipv6_addr_rm+0x9e>
		if (!iface->ipv6.unicast[i].is_infinite) {
   18b4e:	eb04 0308 	add.w	r3, r4, r8
   18b52:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
   18b56:	b923      	cbnz	r3, 18b62 <net_if_ipv6_addr_rm+0x3e>
			k_delayed_work_cancel(&iface->ipv6.unicast[i].lifetime);
   18b58:	f108 0040 	add.w	r0, r8, #64	; 0x40
   18b5c:	4420      	add	r0, r4
   18b5e:	f007 f9bf 	bl	1fee0 <k_delayed_work_cancel>
		iface->ipv6.unicast[i].is_used = false;
   18b62:	236c      	movs	r3, #108	; 0x6c
   18b64:	fb03 4505 	mla	r5, r3, r5, r4
   18b68:	2300      	movs	r3, #0
   18b6a:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   18b6e:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   18b72:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   18b76:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   18b7a:	f8ad 3008 	strh.w	r3, [sp, #8]
	dst->s6_addr[10]  = 0;
   18b7e:	f88d 300a 	strb.w	r3, [sp, #10]
	dst->s6_addr[11]  = 0x01;
   18b82:	2301      	movs	r3, #1
	dst->s6_addr[0]   = 0xFF;
   18b84:	22ff      	movs	r2, #255	; 0xff
	dst->s6_addr[11]  = 0x01;
   18b86:	f88d 300b 	strb.w	r3, [sp, #11]
	dst->s6_addr[13]  = src->s6_addr[13];
   18b8a:	7b7b      	ldrb	r3, [r7, #13]
	dst->s6_addr[0]   = 0xFF;
   18b8c:	f88d 2000 	strb.w	r2, [sp]
	dst->s6_addr[12]  = 0xFF;
   18b90:	f88d 200c 	strb.w	r2, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   18b94:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   18b98:	7bfa      	ldrb	r2, [r7, #15]
   18b9a:	7bbb      	ldrb	r3, [r7, #14]
	dst->s6_addr[1]   = 0x02;
   18b9c:	2102      	movs	r1, #2
   18b9e:	f88d 1001 	strb.w	r1, [sp, #1]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   18ba2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		net_if_ipv6_maddr_rm(iface, &maddr);
   18ba6:	4669      	mov	r1, sp
   18ba8:	4620      	mov	r0, r4
   18baa:	f8ad 300e 	strh.w	r3, [sp, #14]
   18bae:	f7ff ff8d 	bl	18acc <net_if_ipv6_maddr_rm>
		net_mgmt_event_notify(NET_EVENT_IPV6_ADDR_DEL, iface);
   18bb2:	4621      	mov	r1, r4
   18bb4:	4807      	ldr	r0, [pc, #28]	; (18bd4 <net_if_ipv6_addr_rm+0xb0>)
   18bb6:	f7ff fd87 	bl	186c8 <net_mgmt_event_notify>
}
   18bba:	4648      	mov	r0, r9
   18bbc:	b004      	add	sp, #16
   18bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   18bc2:	3501      	adds	r5, #1
   18bc4:	2d03      	cmp	r5, #3
   18bc6:	f106 066c 	add.w	r6, r6, #108	; 0x6c
   18bca:	d1b4      	bne.n	18b36 <net_if_ipv6_addr_rm+0x12>
	return false;
   18bcc:	f04f 0900 	mov.w	r9, #0
   18bd0:	e7f3      	b.n	18bba <net_if_ipv6_addr_rm+0x96>
   18bd2:	bf00      	nop
   18bd4:	f0600002 	.word	0xf0600002

00018bd8 <net_if_ipv6_dad_failed>:
{
   18bd8:	b513      	push	{r0, r1, r4, lr}
   18bda:	ab02      	add	r3, sp, #8
   18bdc:	460c      	mov	r4, r1
   18bde:	f843 0d04 	str.w	r0, [r3, #-4]!
	ifaddr = net_if_ipv6_addr_lookup(addr, &iface);
   18be2:	4620      	mov	r0, r4
   18be4:	4619      	mov	r1, r3
   18be6:	f7ff fdc5 	bl	18774 <net_if_ipv6_addr_lookup>
	if (!ifaddr) {
   18bea:	b150      	cbz	r0, 18c02 <net_if_ipv6_dad_failed+0x2a>
	k_delayed_work_cancel(&ifaddr->dad_timer);
   18bec:	303c      	adds	r0, #60	; 0x3c
   18bee:	f007 f977 	bl	1fee0 <k_delayed_work_cancel>
	net_mgmt_event_notify(NET_EVENT_IPV6_DAD_FAILED, iface);
   18bf2:	9901      	ldr	r1, [sp, #4]
   18bf4:	4804      	ldr	r0, [pc, #16]	; (18c08 <net_if_ipv6_dad_failed+0x30>)
   18bf6:	f7ff fd67 	bl	186c8 <net_mgmt_event_notify>
	net_if_ipv6_addr_rm(iface, addr);
   18bfa:	4621      	mov	r1, r4
   18bfc:	9801      	ldr	r0, [sp, #4]
   18bfe:	f7ff ff91 	bl	18b24 <net_if_ipv6_addr_rm>
}
   18c02:	b002      	add	sp, #8
   18c04:	bd10      	pop	{r4, pc}
   18c06:	bf00      	nop
   18c08:	f060000e 	.word	0xf060000e

00018c0c <net_if_ipv6_maddr_lookup>:
{
   18c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   18c0e:	4c1c      	ldr	r4, [pc, #112]	; (18c80 <net_if_ipv6_maddr_lookup+0x74>)
   18c10:	4f1c      	ldr	r7, [pc, #112]	; (18c84 <net_if_ipv6_maddr_lookup+0x78>)
{
   18c12:	4606      	mov	r6, r0
   18c14:	460d      	mov	r5, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   18c16:	42bc      	cmp	r4, r7
   18c18:	d101      	bne.n	18c1e <net_if_ipv6_maddr_lookup+0x12>
	return NULL;
   18c1a:	2000      	movs	r0, #0
}
   18c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (ret && *ret && iface != *ret) {
   18c1e:	b10d      	cbz	r5, 18c24 <net_if_ipv6_maddr_lookup+0x18>
   18c20:	682b      	ldr	r3, [r5, #0]
   18c22:	b9ab      	cbnz	r3, 18c50 <net_if_ipv6_maddr_lookup+0x44>
			if (!iface->ipv6.mcast[i].is_used ||
   18c24:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   18c28:	07da      	lsls	r2, r3, #31
   18c2a:	d50a      	bpl.n	18c42 <net_if_ipv6_maddr_lookup+0x36>
   18c2c:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
   18c30:	2b0a      	cmp	r3, #10
   18c32:	d106      	bne.n	18c42 <net_if_ipv6_maddr_lookup+0x36>
			if (net_is_ipv6_prefix(maddr->s6_addr,
   18c34:	2280      	movs	r2, #128	; 0x80
   18c36:	f504 71bc 	add.w	r1, r4, #376	; 0x178
   18c3a:	4630      	mov	r0, r6
   18c3c:	f7ff fd0e 	bl	1865c <net_is_ipv6_prefix>
   18c40:	b9e0      	cbnz	r0, 18c7c <net_if_ipv6_maddr_lookup+0x70>
			if (!iface->ipv6.mcast[i].is_used ||
   18c42:	f894 3188 	ldrb.w	r3, [r4, #392]	; 0x188
   18c46:	07db      	lsls	r3, r3, #31
   18c48:	d405      	bmi.n	18c56 <net_if_ipv6_maddr_lookup+0x4a>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   18c4a:	f504 7418 	add.w	r4, r4, #608	; 0x260
   18c4e:	e7e2      	b.n	18c16 <net_if_ipv6_maddr_lookup+0xa>
		if (ret && *ret && iface != *ret) {
   18c50:	429c      	cmp	r4, r3
   18c52:	d1fa      	bne.n	18c4a <net_if_ipv6_maddr_lookup+0x3e>
   18c54:	e7e6      	b.n	18c24 <net_if_ipv6_maddr_lookup+0x18>
			if (!iface->ipv6.mcast[i].is_used ||
   18c56:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
   18c5a:	2b0a      	cmp	r3, #10
   18c5c:	d1f5      	bne.n	18c4a <net_if_ipv6_maddr_lookup+0x3e>
			if (net_is_ipv6_prefix(maddr->s6_addr,
   18c5e:	2280      	movs	r2, #128	; 0x80
   18c60:	f504 71c8 	add.w	r1, r4, #400	; 0x190
   18c64:	4630      	mov	r0, r6
   18c66:	f7ff fcf9 	bl	1865c <net_is_ipv6_prefix>
   18c6a:	2800      	cmp	r0, #0
   18c6c:	d0ed      	beq.n	18c4a <net_if_ipv6_maddr_lookup+0x3e>
   18c6e:	2018      	movs	r0, #24
				if (ret) {
   18c70:	b105      	cbz	r5, 18c74 <net_if_ipv6_maddr_lookup+0x68>
					*ret = iface;
   18c72:	602c      	str	r4, [r5, #0]
				return &iface->ipv6.mcast[i];
   18c74:	f500 70b8 	add.w	r0, r0, #368	; 0x170
   18c78:	4420      	add	r0, r4
   18c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (net_is_ipv6_prefix(maddr->s6_addr,
   18c7c:	2000      	movs	r0, #0
   18c7e:	e7f7      	b.n	18c70 <net_if_ipv6_maddr_lookup+0x64>
   18c80:	2000eb80 	.word	0x2000eb80
   18c84:	2000ede0 	.word	0x2000ede0

00018c88 <net_if_mcast_monitor>:
{
   18c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18c8a:	4b0a      	ldr	r3, [pc, #40]	; (18cb4 <net_if_mcast_monitor+0x2c>)
   18c8c:	681b      	ldr	r3, [r3, #0]
   18c8e:	4605      	mov	r5, r0
   18c90:	460e      	mov	r6, r1
   18c92:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   18c94:	b903      	cbnz	r3, 18c98 <net_if_mcast_monitor+0x10>
   18c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18c98:	681c      	ldr	r4, [r3, #0]
		if (iface == mon->iface) {
   18c9a:	685a      	ldr	r2, [r3, #4]
   18c9c:	42aa      	cmp	r2, r5
   18c9e:	d104      	bne.n	18caa <net_if_mcast_monitor+0x22>
			mon->cb(iface, addr, is_joined);
   18ca0:	689b      	ldr	r3, [r3, #8]
   18ca2:	463a      	mov	r2, r7
   18ca4:	4631      	mov	r1, r6
   18ca6:	4628      	mov	r0, r5
   18ca8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   18caa:	b904      	cbnz	r4, 18cae <net_if_mcast_monitor+0x26>
   18cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18cae:	4623      	mov	r3, r4
   18cb0:	6824      	ldr	r4, [r4, #0]
   18cb2:	e7f2      	b.n	18c9a <net_if_mcast_monitor+0x12>
   18cb4:	2000304c 	.word	0x2000304c

00018cb8 <net_if_ipv6_prefix_add>:
{
   18cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18cbc:	4698      	mov	r8, r3
		if (!iface->ipv6.unicast[i].is_used) {
   18cbe:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
{
   18cc2:	b085      	sub	sp, #20
   18cc4:	4604      	mov	r4, r0
   18cc6:	460e      	mov	r6, r1
   18cc8:	4691      	mov	r9, r2
		if (!iface->ipv6.unicast[i].is_used) {
   18cca:	b14b      	cbz	r3, 18ce0 <net_if_ipv6_prefix_add+0x28>
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   18ccc:	f500 71e4 	add.w	r1, r0, #456	; 0x1c8
   18cd0:	4630      	mov	r0, r6
   18cd2:	f7ff fce8 	bl	186a6 <net_ipv6_addr_cmp>
   18cd6:	b118      	cbz	r0, 18ce0 <net_if_ipv6_prefix_add+0x28>
   18cd8:	f894 31d8 	ldrb.w	r3, [r4, #472]	; 0x1d8
   18cdc:	454b      	cmp	r3, r9
   18cde:	d014      	beq.n	18d0a <net_if_ipv6_prefix_add+0x52>
		if (!iface->ipv6.unicast[i].is_used) {
   18ce0:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   18ce4:	b19b      	cbz	r3, 18d0e <net_if_ipv6_prefix_add+0x56>
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   18ce6:	f504 7101 	add.w	r1, r4, #516	; 0x204
   18cea:	4630      	mov	r0, r6
   18cec:	f7ff fcdb 	bl	186a6 <net_ipv6_addr_cmp>
   18cf0:	b168      	cbz	r0, 18d0e <net_if_ipv6_prefix_add+0x56>
   18cf2:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
   18cf6:	454b      	cmp	r3, r9
   18cf8:	d109      	bne.n	18d0e <net_if_ipv6_prefix_add+0x56>
   18cfa:	253c      	movs	r5, #60	; 0x3c
			return &iface->ipv6.prefix[i];
   18cfc:	f505 75d0 	add.w	r5, r5, #416	; 0x1a0
   18d00:	4425      	add	r5, r4
}
   18d02:	4628      	mov	r0, r5
   18d04:	b005      	add	sp, #20
   18d06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   18d0a:	2500      	movs	r5, #0
   18d0c:	e7f6      	b.n	18cfc <net_if_ipv6_prefix_add+0x44>
		if (iface->ipv6.prefix[i].is_used) {
   18d0e:	f894 71da 	ldrb.w	r7, [r4, #474]	; 0x1da
   18d12:	b11f      	cbz	r7, 18d1c <net_if_ipv6_prefix_add+0x64>
   18d14:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
   18d18:	bbcb      	cbnz	r3, 18d8e <net_if_ipv6_prefix_add+0xd6>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   18d1a:	2701      	movs	r7, #1
		net_if_ipv6_prefix_init(&iface->ipv6.prefix[i], prefix, len,
   18d1c:	233c      	movs	r3, #60	; 0x3c
   18d1e:	437b      	muls	r3, r7
   18d20:	f503 75d0 	add.w	r5, r3, #416	; 0x1a0
	prefix->is_used = true;
   18d24:	4423      	add	r3, r4
   18d26:	2201      	movs	r2, #1
   18d28:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
	prefix->len = len;
   18d2c:	f883 91d8 	strb.w	r9, [r3, #472]	; 0x1d8
	net_ipaddr_copy(&prefix->prefix, addr);
   18d30:	4633      	mov	r3, r6
		net_if_ipv6_prefix_init(&iface->ipv6.prefix[i], prefix, len,
   18d32:	4425      	add	r5, r4
	net_ipaddr_copy(&prefix->prefix, addr);
   18d34:	466e      	mov	r6, sp
   18d36:	f103 0c10 	add.w	ip, r3, #16
   18d3a:	466a      	mov	r2, sp
   18d3c:	6818      	ldr	r0, [r3, #0]
   18d3e:	6859      	ldr	r1, [r3, #4]
   18d40:	46b6      	mov	lr, r6
   18d42:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   18d46:	3308      	adds	r3, #8
   18d48:	4563      	cmp	r3, ip
   18d4a:	4676      	mov	r6, lr
   18d4c:	d1f6      	bne.n	18d3c <net_if_ipv6_prefix_add+0x84>
   18d4e:	f105 0628 	add.w	r6, r5, #40	; 0x28
   18d52:	f10d 0e10 	add.w	lr, sp, #16
   18d56:	4613      	mov	r3, r2
   18d58:	cb03      	ldmia	r3!, {r0, r1}
   18d5a:	4573      	cmp	r3, lr
   18d5c:	6030      	str	r0, [r6, #0]
   18d5e:	6071      	str	r1, [r6, #4]
   18d60:	461a      	mov	r2, r3
   18d62:	f106 0608 	add.w	r6, r6, #8
   18d66:	d1f6      	bne.n	18d56 <net_if_ipv6_prefix_add+0x9e>
	k_delayed_work_init(&prefix->lifetime, prefix_lf_timeout);
   18d68:	4628      	mov	r0, r5
   18d6a:	490a      	ldr	r1, [pc, #40]	; (18d94 <net_if_ipv6_prefix_add+0xdc>)
   18d6c:	f007 f89a 	bl	1fea4 <k_delayed_work_init>
   18d70:	233c      	movs	r3, #60	; 0x3c
		prefix->is_infinite = true;
   18d72:	fb03 4707 	mla	r7, r3, r7, r4
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
   18d76:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
		prefix->is_infinite = true;
   18d7a:	bf0c      	ite	eq
   18d7c:	2301      	moveq	r3, #1
		prefix->is_infinite = false;
   18d7e:	2300      	movne	r3, #0
   18d80:	f887 31d9 	strb.w	r3, [r7, #473]	; 0x1d9
		net_mgmt_event_notify(NET_EVENT_IPV6_PREFIX_ADD, iface);
   18d84:	4621      	mov	r1, r4
   18d86:	4804      	ldr	r0, [pc, #16]	; (18d98 <net_if_ipv6_prefix_add+0xe0>)
   18d88:	f7ff fc9e 	bl	186c8 <net_mgmt_event_notify>
		return &iface->ipv6.prefix[i];
   18d8c:	e7b9      	b.n	18d02 <net_if_ipv6_prefix_add+0x4a>
	return NULL;
   18d8e:	2500      	movs	r5, #0
   18d90:	e7b7      	b.n	18d02 <net_if_ipv6_prefix_add+0x4a>
   18d92:	bf00      	nop
   18d94:	000185b5 	.word	0x000185b5
   18d98:	f0600005 	.word	0xf0600005

00018d9c <net_if_ipv6_prefix_lookup>:
		if (!iface->ipv6.prefix[i].is_used) {
   18d9c:	f890 31da 	ldrb.w	r3, [r0, #474]	; 0x1da
{
   18da0:	b570      	push	{r4, r5, r6, lr}
   18da2:	4604      	mov	r4, r0
   18da4:	460d      	mov	r5, r1
   18da6:	4616      	mov	r6, r2
		if (!iface->ipv6.prefix[i].is_used) {
   18da8:	b123      	cbz	r3, 18db4 <net_if_ipv6_prefix_lookup+0x18>
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   18daa:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
   18dae:	f7ff fc55 	bl	1865c <net_is_ipv6_prefix>
   18db2:	b970      	cbnz	r0, 18dd2 <net_if_ipv6_prefix_lookup+0x36>
		if (!iface->ipv6.prefix[i].is_used) {
   18db4:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
   18db8:	b16b      	cbz	r3, 18dd6 <net_if_ipv6_prefix_lookup+0x3a>
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   18dba:	4632      	mov	r2, r6
   18dbc:	4629      	mov	r1, r5
   18dbe:	f504 7001 	add.w	r0, r4, #516	; 0x204
   18dc2:	f7ff fc4b 	bl	1865c <net_is_ipv6_prefix>
   18dc6:	b130      	cbz	r0, 18dd6 <net_if_ipv6_prefix_lookup+0x3a>
   18dc8:	203c      	movs	r0, #60	; 0x3c
			return &iface->ipv6.prefix[i];
   18dca:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
   18dce:	4420      	add	r0, r4
   18dd0:	bd70      	pop	{r4, r5, r6, pc}
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   18dd2:	2000      	movs	r0, #0
   18dd4:	e7f9      	b.n	18dca <net_if_ipv6_prefix_lookup+0x2e>
	return NULL;
   18dd6:	2000      	movs	r0, #0
}
   18dd8:	bd70      	pop	{r4, r5, r6, pc}
	...

00018ddc <net_if_ipv6_addr_onlink>:
{
   18ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   18dde:	4c15      	ldr	r4, [pc, #84]	; (18e34 <net_if_ipv6_addr_onlink+0x58>)
   18de0:	4f15      	ldr	r7, [pc, #84]	; (18e38 <net_if_ipv6_addr_onlink+0x5c>)
{
   18de2:	4605      	mov	r5, r0
   18de4:	460e      	mov	r6, r1
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   18de6:	42bc      	cmp	r4, r7
   18de8:	d101      	bne.n	18dee <net_if_ipv6_addr_onlink+0x12>
	return false;
   18dea:	2000      	movs	r0, #0
   18dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iface && *iface && *iface != tmp) {
   18dee:	b10d      	cbz	r5, 18df4 <net_if_ipv6_addr_onlink+0x18>
   18df0:	682b      	ldr	r3, [r5, #0]
   18df2:	b9cb      	cbnz	r3, 18e28 <net_if_ipv6_addr_onlink+0x4c>
			if (tmp->ipv6.prefix[i].is_used &&
   18df4:	f894 31da 	ldrb.w	r3, [r4, #474]	; 0x1da
   18df8:	b13b      	cbz	r3, 18e0a <net_if_ipv6_addr_onlink+0x2e>
			    net_is_ipv6_prefix(tmp->ipv6.prefix[i].prefix.
   18dfa:	f894 21d8 	ldrb.w	r2, [r4, #472]	; 0x1d8
   18dfe:	4631      	mov	r1, r6
   18e00:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   18e04:	f7ff fc2a 	bl	1865c <net_is_ipv6_prefix>
			if (tmp->ipv6.prefix[i].is_used &&
   18e08:	b950      	cbnz	r0, 18e20 <net_if_ipv6_addr_onlink+0x44>
   18e0a:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
   18e0e:	b16b      	cbz	r3, 18e2c <net_if_ipv6_addr_onlink+0x50>
			    net_is_ipv6_prefix(tmp->ipv6.prefix[i].prefix.
   18e10:	f894 2214 	ldrb.w	r2, [r4, #532]	; 0x214
   18e14:	4631      	mov	r1, r6
   18e16:	f504 7001 	add.w	r0, r4, #516	; 0x204
   18e1a:	f7ff fc1f 	bl	1865c <net_is_ipv6_prefix>
			if (tmp->ipv6.prefix[i].is_used &&
   18e1e:	b128      	cbz	r0, 18e2c <net_if_ipv6_addr_onlink+0x50>
				if (iface) {
   18e20:	b105      	cbz	r5, 18e24 <net_if_ipv6_addr_onlink+0x48>
					*iface = tmp;
   18e22:	602c      	str	r4, [r5, #0]
				return true;
   18e24:	2001      	movs	r0, #1
}
   18e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iface && *iface && *iface != tmp) {
   18e28:	429c      	cmp	r4, r3
   18e2a:	d0e3      	beq.n	18df4 <net_if_ipv6_addr_onlink+0x18>
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   18e2c:	f504 7418 	add.w	r4, r4, #608	; 0x260
   18e30:	e7d9      	b.n	18de6 <net_if_ipv6_addr_onlink+0xa>
   18e32:	bf00      	nop
   18e34:	2000eb80 	.word	0x2000eb80
   18e38:	2000ede0 	.word	0x2000ede0

00018e3c <net_if_ipv6_prefix_set_timer>:
	if (lifetime > (0xfffffffe / MSEC_PER_SEC)) {
   18e3c:	4b04      	ldr	r3, [pc, #16]	; (18e50 <net_if_ipv6_prefix_set_timer+0x14>)
   18e3e:	4299      	cmp	r1, r3
	u32_t timeout = lifetime * MSEC_PER_SEC;
   18e40:	bf9a      	itte	ls
   18e42:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
   18e46:	4359      	mulls	r1, r3
		timeout = 0xfffffffe;
   18e48:	f06f 0101 	mvnhi.w	r1, #1
	k_delayed_work_submit(&prefix->lifetime, timeout);
   18e4c:	f7ff bc34 	b.w	186b8 <k_delayed_work_submit>
   18e50:	00418937 	.word	0x00418937

00018e54 <net_if_ipv6_prefix_unset_timer>:
	if (!prefix->is_used) {
   18e54:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   18e58:	b10b      	cbz	r3, 18e5e <net_if_ipv6_prefix_unset_timer+0xa>
	k_delayed_work_cancel(&prefix->lifetime);
   18e5a:	f007 b841 	b.w	1fee0 <k_delayed_work_cancel>
   18e5e:	4770      	bx	lr

00018e60 <net_if_ipv6_prefix_rm>:
		if (!iface->ipv6.prefix[i].is_used) {
   18e60:	f890 31da 	ldrb.w	r3, [r0, #474]	; 0x1da
{
   18e64:	b570      	push	{r4, r5, r6, lr}
   18e66:	4604      	mov	r4, r0
   18e68:	460e      	mov	r6, r1
   18e6a:	4615      	mov	r5, r2
		if (!iface->ipv6.prefix[i].is_used) {
   18e6c:	b143      	cbz	r3, 18e80 <net_if_ipv6_prefix_rm+0x20>
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   18e6e:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
   18e72:	f7ff fc18 	bl	186a6 <net_ipv6_addr_cmp>
   18e76:	b118      	cbz	r0, 18e80 <net_if_ipv6_prefix_rm+0x20>
   18e78:	f894 31d8 	ldrb.w	r3, [r4, #472]	; 0x1d8
   18e7c:	42ab      	cmp	r3, r5
   18e7e:	d01f      	beq.n	18ec0 <net_if_ipv6_prefix_rm+0x60>
		if (!iface->ipv6.prefix[i].is_used) {
   18e80:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
   18e84:	b1fb      	cbz	r3, 18ec6 <net_if_ipv6_prefix_rm+0x66>
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   18e86:	4631      	mov	r1, r6
   18e88:	f504 7001 	add.w	r0, r4, #516	; 0x204
   18e8c:	f7ff fc0b 	bl	186a6 <net_ipv6_addr_cmp>
   18e90:	b1c8      	cbz	r0, 18ec6 <net_if_ipv6_prefix_rm+0x66>
   18e92:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
   18e96:	42ab      	cmp	r3, r5
   18e98:	d115      	bne.n	18ec6 <net_if_ipv6_prefix_rm+0x66>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   18e9a:	2501      	movs	r5, #1
   18e9c:	203c      	movs	r0, #60	; 0x3c
		net_if_ipv6_prefix_unset_timer(&iface->ipv6.prefix[i]);
   18e9e:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
   18ea2:	4420      	add	r0, r4
   18ea4:	f7ff ffd6 	bl	18e54 <net_if_ipv6_prefix_unset_timer>
		iface->ipv6.prefix[i].is_used = false;
   18ea8:	233c      	movs	r3, #60	; 0x3c
   18eaa:	fb03 4505 	mla	r5, r3, r5, r4
   18eae:	2300      	movs	r3, #0
   18eb0:	f885 31da 	strb.w	r3, [r5, #474]	; 0x1da
		net_mgmt_event_notify(NET_EVENT_IPV6_PREFIX_DEL, iface);
   18eb4:	4621      	mov	r1, r4
   18eb6:	4805      	ldr	r0, [pc, #20]	; (18ecc <net_if_ipv6_prefix_rm+0x6c>)
   18eb8:	f7ff fc06 	bl	186c8 <net_mgmt_event_notify>
		return true;
   18ebc:	2001      	movs	r0, #1
   18ebe:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   18ec0:	2500      	movs	r5, #0
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   18ec2:	4628      	mov	r0, r5
   18ec4:	e7eb      	b.n	18e9e <net_if_ipv6_prefix_rm+0x3e>
	return false;
   18ec6:	2000      	movs	r0, #0
}
   18ec8:	bd70      	pop	{r4, r5, r6, pc}
   18eca:	bf00      	nop
   18ecc:	f0600006 	.word	0xf0600006

00018ed0 <net_if_ipv6_router_lookup>:
{
   18ed0:	b510      	push	{r4, lr}
		if (!routers[i].is_used ||
   18ed2:	4c09      	ldr	r4, [pc, #36]	; (18ef8 <net_if_ipv6_router_lookup+0x28>)
   18ed4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   18ed8:	b153      	cbz	r3, 18ef0 <net_if_ipv6_router_lookup+0x20>
   18eda:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   18edc:	2b0a      	cmp	r3, #10
   18ede:	d107      	bne.n	18ef0 <net_if_ipv6_router_lookup+0x20>
		    routers[i].address.family != AF_INET6 ||
   18ee0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   18ee2:	4298      	cmp	r0, r3
   18ee4:	d104      	bne.n	18ef0 <net_if_ipv6_router_lookup+0x20>
		if (net_ipv6_addr_cmp(&routers[i].address.in6_addr, addr)) {
   18ee6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   18eea:	f7ff fbdc 	bl	186a6 <net_ipv6_addr_cmp>
   18eee:	b908      	cbnz	r0, 18ef4 <net_if_ipv6_router_lookup+0x24>
	return NULL;
   18ef0:	2000      	movs	r0, #0
   18ef2:	bd10      	pop	{r4, pc}
			return &routers[i];
   18ef4:	4620      	mov	r0, r4
}
   18ef6:	bd10      	pop	{r4, pc}
   18ef8:	20003054 	.word	0x20003054

00018efc <net_if_ipv6_router_find_default>:
		if (!routers[i].is_used ||
   18efc:	4b0a      	ldr	r3, [pc, #40]	; (18f28 <net_if_ipv6_router_find_default+0x2c>)
   18efe:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   18f02:	b162      	cbz	r2, 18f1e <net_if_ipv6_router_find_default+0x22>
   18f04:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
   18f08:	b14a      	cbz	r2, 18f1e <net_if_ipv6_router_find_default+0x22>
		    !routers[i].is_default ||
   18f0a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   18f0c:	2a0a      	cmp	r2, #10
   18f0e:	d106      	bne.n	18f1e <net_if_ipv6_router_find_default+0x22>
		if (iface && iface != routers[i].iface) {
   18f10:	b138      	cbz	r0, 18f22 <net_if_ipv6_router_find_default+0x26>
   18f12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	return NULL;
   18f14:	4290      	cmp	r0, r2
   18f16:	bf0c      	ite	eq
   18f18:	4618      	moveq	r0, r3
   18f1a:	2000      	movne	r0, #0
   18f1c:	4770      	bx	lr
   18f1e:	2000      	movs	r0, #0
   18f20:	4770      	bx	lr
		return &routers[i];
   18f22:	4618      	mov	r0, r3
}
   18f24:	4770      	bx	lr
   18f26:	bf00      	nop
   18f28:	20003054 	.word	0x20003054

00018f2c <net_if_ipv6_router_update_lifetime>:
	k_delayed_work_submit(&router->lifetime,
   18f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18f30:	4359      	muls	r1, r3
   18f32:	f7ff bbc1 	b.w	186b8 <k_delayed_work_submit>
	...

00018f38 <net_if_ipv6_router_add>:
{
   18f38:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (routers[i].is_used) {
   18f3a:	4c20      	ldr	r4, [pc, #128]	; (18fbc <net_if_ipv6_router_add+0x84>)
   18f3c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
{
   18f40:	b085      	sub	sp, #20
   18f42:	4607      	mov	r7, r0
   18f44:	4616      	mov	r6, r2
		if (routers[i].is_used) {
   18f46:	bbb3      	cbnz	r3, 18fb6 <net_if_ipv6_router_add+0x7e>
	router->is_used = true;
   18f48:	2301      	movs	r3, #1
   18f4a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	router->address.family = AF_INET6;
   18f4e:	230a      	movs	r3, #10
   18f50:	8523      	strh	r3, [r4, #40]	; 0x28
	router->iface = iface;
   18f52:	63e0      	str	r0, [r4, #60]	; 0x3c
	net_ipaddr_copy(&router->address.in6_addr, addr);
   18f54:	460b      	mov	r3, r1
   18f56:	466d      	mov	r5, sp
   18f58:	f101 0c10 	add.w	ip, r1, #16
   18f5c:	466a      	mov	r2, sp
   18f5e:	6818      	ldr	r0, [r3, #0]
   18f60:	6859      	ldr	r1, [r3, #4]
   18f62:	46ae      	mov	lr, r5
   18f64:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   18f68:	3308      	adds	r3, #8
   18f6a:	4563      	cmp	r3, ip
   18f6c:	4675      	mov	r5, lr
   18f6e:	d1f6      	bne.n	18f5e <net_if_ipv6_router_add+0x26>
   18f70:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   18f72:	4d13      	ldr	r5, [pc, #76]	; (18fc0 <net_if_ipv6_router_add+0x88>)
   18f74:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   18f78:	2301      	movs	r3, #1
	if (lifetime) {
   18f7a:	b1be      	cbz	r6, 18fac <net_if_ipv6_router_add+0x74>
		router->is_default = true;
   18f7c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   18f80:	4910      	ldr	r1, [pc, #64]	; (18fc4 <net_if_ipv6_router_add+0x8c>)
		router->is_infinite = false;
   18f82:	2300      	movs	r3, #0
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   18f84:	f1a5 002c 	sub.w	r0, r5, #44	; 0x2c
		router->is_infinite = false;
   18f88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   18f8c:	f006 ff8a 	bl	1fea4 <k_delayed_work_init>
		k_delayed_work_submit(&router->lifetime,
   18f90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   18f94:	4371      	muls	r1, r6
   18f96:	f1a5 002c 	sub.w	r0, r5, #44	; 0x2c
   18f9a:	f7ff fb8d 	bl	186b8 <k_delayed_work_submit>
		net_mgmt_event_notify(NET_EVENT_IPV6_ROUTER_ADD, iface);
   18f9e:	480a      	ldr	r0, [pc, #40]	; (18fc8 <net_if_ipv6_router_add+0x90>)
   18fa0:	4639      	mov	r1, r7
   18fa2:	f7ff fb91 	bl	186c8 <net_mgmt_event_notify>
		return &routers[i];
   18fa6:	4805      	ldr	r0, [pc, #20]	; (18fbc <net_if_ipv6_router_add+0x84>)
}
   18fa8:	b005      	add	sp, #20
   18faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		router->is_default = false;
   18fac:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
		router->is_infinite = true;
   18fb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   18fb4:	e7f3      	b.n	18f9e <net_if_ipv6_router_add+0x66>
	return NULL;
   18fb6:	2000      	movs	r0, #0
   18fb8:	e7f6      	b.n	18fa8 <net_if_ipv6_router_add+0x70>
   18fba:	bf00      	nop
   18fbc:	20003054 	.word	0x20003054
   18fc0:	20003080 	.word	0x20003080
   18fc4:	000185bd 	.word	0x000185bd
   18fc8:	f0600009 	.word	0xf0600009

00018fcc <net_if_ipv6_router_rm>:
		if (!routers[i].is_used) {
   18fcc:	4b0a      	ldr	r3, [pc, #40]	; (18ff8 <net_if_ipv6_router_rm+0x2c>)
{
   18fce:	b570      	push	{r4, r5, r6, lr}
		if (!routers[i].is_used) {
   18fd0:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
{
   18fd4:	4605      	mov	r5, r0
		if (!routers[i].is_used) {
   18fd6:	b15c      	cbz	r4, 18ff0 <net_if_ipv6_router_rm+0x24>
		if (&routers[i] != router) {
   18fd8:	4298      	cmp	r0, r3
   18fda:	f04f 0600 	mov.w	r6, #0
   18fde:	d109      	bne.n	18ff4 <net_if_ipv6_router_rm+0x28>
		k_delayed_work_cancel(&routers[i].lifetime);
   18fe0:	f006 ff7e 	bl	1fee0 <k_delayed_work_cancel>
		routers[i].is_used = false;
   18fe4:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
		net_mgmt_event_notify(NET_EVENT_IPV6_ROUTER_DEL,
   18fe8:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   18fea:	4804      	ldr	r0, [pc, #16]	; (18ffc <net_if_ipv6_router_rm+0x30>)
   18fec:	f7ff fb6c 	bl	186c8 <net_mgmt_event_notify>
}
   18ff0:	4620      	mov	r0, r4
   18ff2:	bd70      	pop	{r4, r5, r6, pc}
	return false;
   18ff4:	4634      	mov	r4, r6
   18ff6:	e7fb      	b.n	18ff0 <net_if_ipv6_router_rm+0x24>
   18ff8:	20003054 	.word	0x20003054
   18ffc:	f060000a 	.word	0xf060000a

00019000 <net_if_ipv6_get_ll>:
{
   19000:	b510      	push	{r4, lr}
   19002:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (net_is_ipv6_ll_addr(&iface->ipv6.unicast[i].address.in6_addr)) {
   19006:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1900a:	f500 70ba 	add.w	r0, r0, #372	; 0x174
		if (!iface->ipv6.unicast[i].is_used ||
   1900e:	f893 4064 	ldrb.w	r4, [r3, #100]	; 0x64
   19012:	b164      	cbz	r4, 1902e <net_if_ipv6_get_ll+0x2e>
   19014:	1c4c      	adds	r4, r1, #1
   19016:	d003      	beq.n	19020 <net_if_ipv6_get_ll+0x20>
		    (addr_state != NET_ADDR_ANY_STATE &&
   19018:	f993 4061 	ldrsb.w	r4, [r3, #97]	; 0x61
   1901c:	428c      	cmp	r4, r1
   1901e:	d106      	bne.n	1902e <net_if_ipv6_get_ll+0x2e>
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
   19020:	f833 4c04 	ldrh.w	r4, [r3, #-4]
   19024:	2c0a      	cmp	r4, #10
   19026:	d102      	bne.n	1902e <net_if_ipv6_get_ll+0x2e>
		if (net_is_ipv6_ll_addr(&iface->ipv6.unicast[i].address.in6_addr)) {
   19028:	881c      	ldrh	r4, [r3, #0]
   1902a:	4294      	cmp	r4, r2
   1902c:	d004      	beq.n	19038 <net_if_ipv6_get_ll+0x38>
   1902e:	336c      	adds	r3, #108	; 0x6c
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   19030:	4283      	cmp	r3, r0
   19032:	d1ec      	bne.n	1900e <net_if_ipv6_get_ll+0xe>
	return NULL;
   19034:	2000      	movs	r0, #0
   19036:	bd10      	pop	{r4, pc}
   19038:	4618      	mov	r0, r3
}
   1903a:	bd10      	pop	{r4, pc}

0001903c <net_if_ipv6_select_src_addr>:
	return src;
}

const struct in6_addr *net_if_ipv6_select_src_addr(struct net_if *dst_iface,
						   struct in6_addr *dst)
{
   1903c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct in6_addr *src = NULL;
	u8_t best_match = 0;
	struct net_if *iface;

	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   1903e:	880d      	ldrh	r5, [r1, #0]
   19040:	f248 02fe 	movw	r2, #33022	; 0x80fe
	u8_t best_match = 0;
   19044:	2400      	movs	r4, #0
	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   19046:	4295      	cmp	r5, r2
{
   19048:	4603      	mov	r3, r0
   1904a:	460e      	mov	r6, r1
	u8_t best_match = 0;
   1904c:	f88d 4007 	strb.w	r4, [sp, #7]
	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   19050:	d002      	beq.n	19058 <net_if_ipv6_select_src_addr+0x1c>
   19052:	780a      	ldrb	r2, [r1, #0]
   19054:	2aff      	cmp	r2, #255	; 0xff
   19056:	d107      	bne.n	19068 <net_if_ipv6_select_src_addr+0x2c>
   19058:	4c16      	ldr	r4, [pc, #88]	; (190b4 <net_if_ipv6_select_src_addr+0x78>)
							 &best_match);
		}

	} else {
		for (iface = __net_if_start;
		     !dst_iface && iface != __net_if_end;
   1905a:	4d17      	ldr	r5, [pc, #92]	; (190b8 <net_if_ipv6_select_src_addr+0x7c>)
		for (iface = __net_if_start;
   1905c:	b323      	cbz	r3, 190a8 <net_if_ipv6_select_src_addr+0x6c>
				break;
			}
		}

		if (dst_iface) {
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   1905e:	2101      	movs	r1, #1
   19060:	4618      	mov	r0, r3
   19062:	f7ff ffcd 	bl	19000 <net_if_ipv6_get_ll>
   19066:	e006      	b.n	19076 <net_if_ipv6_select_src_addr+0x3a>
   19068:	4d12      	ldr	r5, [pc, #72]	; (190b4 <net_if_ipv6_select_src_addr+0x78>)
		     !dst_iface && iface != __net_if_end;
   1906a:	4f13      	ldr	r7, [pc, #76]	; (190b8 <net_if_ipv6_select_src_addr+0x7c>)
		for (iface = __net_if_start;
   1906c:	b180      	cbz	r0, 19090 <net_if_ipv6_select_src_addr+0x54>
			src = net_if_ipv6_get_best_match(dst_iface, dst,
   1906e:	f10d 0207 	add.w	r2, sp, #7
   19072:	f7ff faa7 	bl	185c4 <net_if_ipv6_get_best_match>
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   19076:	4604      	mov	r4, r0
   19078:	e00c      	b.n	19094 <net_if_ipv6_select_src_addr+0x58>
			addr = net_if_ipv6_get_best_match(iface, dst,
   1907a:	4628      	mov	r0, r5
   1907c:	f10d 0207 	add.w	r2, sp, #7
   19080:	4631      	mov	r1, r6
   19082:	f7ff fa9f 	bl	185c4 <net_if_ipv6_get_best_match>
		     iface++) {
   19086:	f505 7518 	add.w	r5, r5, #608	; 0x260
   1908a:	2800      	cmp	r0, #0
   1908c:	bf18      	it	ne
   1908e:	4604      	movne	r4, r0
		     !dst_iface && iface != __net_if_end;
   19090:	42bd      	cmp	r5, r7
   19092:	d1f2      	bne.n	1907a <net_if_ipv6_select_src_addr+0x3e>
		}
	}

	if (!src) {
   19094:	b154      	cbz	r4, 190ac <net_if_ipv6_select_src_addr+0x70>
   19096:	4620      	mov	r0, r4
   19098:	e00a      	b.n	190b0 <net_if_ipv6_select_src_addr+0x74>
			addr = net_if_ipv6_get_ll(iface, NET_ADDR_PREFERRED);
   1909a:	2101      	movs	r1, #1
   1909c:	4620      	mov	r0, r4
   1909e:	f7ff ffaf 	bl	19000 <net_if_ipv6_get_ll>
			if (addr) {
   190a2:	b928      	cbnz	r0, 190b0 <net_if_ipv6_select_src_addr+0x74>
		     iface++) {
   190a4:	f504 7418 	add.w	r4, r4, #608	; 0x260
		     !dst_iface && iface != __net_if_end;
   190a8:	42ac      	cmp	r4, r5
   190aa:	d1f6      	bne.n	1909a <net_if_ipv6_select_src_addr+0x5e>
		return net_ipv6_unspecified_address();
   190ac:	f002 fb36 	bl	1b71c <net_ipv6_unspecified_address>
	}

	return src;
}
   190b0:	b003      	add	sp, #12
   190b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   190b4:	2000eb80 	.word	0x2000eb80
   190b8:	2000ede0 	.word	0x2000ede0

000190bc <net_if_ipv6_calc_reachable_time>:

u32_t net_if_ipv6_calc_reachable_time(struct net_if *iface)
{
   190bc:	b538      	push	{r3, r4, r5, lr}
	u32_t min_reachable, max_reachable;

	min_reachable = (MIN_RANDOM_NUMER * iface->ipv6.base_reachable_time)
   190be:	f8d0 4240 	ldr.w	r4, [r0, #576]	; 0x240

	NET_DBG("min_reachable:%u max_reachable:%u", min_reachable,
		max_reachable);

	return min_reachable +
	       sys_rand32_get() % (max_reachable - min_reachable);
   190c2:	f7e9 f985 	bl	23d0 <sys_rand32_get>
	min_reachable = (MIN_RANDOM_NUMER * iface->ipv6.base_reachable_time)
   190c6:	0865      	lsrs	r5, r4, #1
	max_reachable = (MAX_RANDOM_NUMER * iface->ipv6.base_reachable_time)
   190c8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
	       sys_rand32_get() % (max_reachable - min_reachable);
   190cc:	ebc5 0454 	rsb	r4, r5, r4, lsr #1
   190d0:	fbb0 f3f4 	udiv	r3, r0, r4
   190d4:	fb03 0014 	mls	r0, r3, r4, r0
}
   190d8:	4428      	add	r0, r5
   190da:	bd38      	pop	{r3, r4, r5, pc}

000190dc <net_if_call_link_cb>:
	sys_slist_find_and_remove(&link_callbacks, &link->node);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
   190dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   190de:	4b09      	ldr	r3, [pc, #36]	; (19104 <net_if_call_link_cb+0x28>)
   190e0:	681b      	ldr	r3, [r3, #0]
   190e2:	4605      	mov	r5, r0
   190e4:	460e      	mov	r6, r1
   190e6:	4617      	mov	r7, r2
	struct net_if_link_cb *link, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   190e8:	b903      	cbnz	r3, 190ec <net_if_call_link_cb+0x10>
   190ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   190ec:	681c      	ldr	r4, [r3, #0]
		link->cb(iface, lladdr, status);
   190ee:	685b      	ldr	r3, [r3, #4]
   190f0:	463a      	mov	r2, r7
   190f2:	4631      	mov	r1, r6
   190f4:	4628      	mov	r0, r5
   190f6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   190f8:	b114      	cbz	r4, 19100 <net_if_call_link_cb+0x24>
   190fa:	4623      	mov	r3, r4
   190fc:	6824      	ldr	r4, [r4, #0]
   190fe:	e7f6      	b.n	190ee <net_if_call_link_cb+0x12>
   19100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19102:	bf00      	nop
   19104:	20003044 	.word	0x20003044

00019108 <net_if_send_data>:
{
   19108:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1910c:	f100 0a0c 	add.w	sl, r0, #12
{
   19110:	4607      	mov	r7, r0
   19112:	460c      	mov	r4, r1
   19114:	f8d1 900c 	ldr.w	r9, [r1, #12]
   19118:	f8d1 b010 	ldr.w	fp, [r1, #16]
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1911c:	4650      	mov	r0, sl
   1911e:	2100      	movs	r1, #0
   19120:	f7ff fa8f 	bl	18642 <atomic_test_bit>
   19124:	2800      	cmp	r0, #0
   19126:	d048      	beq.n	191ba <net_if_send_data+0xb2>
	if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   19128:	2101      	movs	r1, #1
   1912a:	4650      	mov	r0, sl
   1912c:	f7ff fa89 	bl	18642 <atomic_test_bit>
   19130:	b938      	cbnz	r0, 19142 <net_if_send_data+0x3a>
   19132:	6a23      	ldr	r3, [r4, #32]
   19134:	b92b      	cbnz	r3, 19142 <net_if_send_data+0x3a>
   19136:	6963      	ldr	r3, [r4, #20]
		net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   19138:	691a      	ldr	r2, [r3, #16]
   1913a:	6222      	str	r2, [r4, #32]
		net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   1913c:	7d1b      	ldrb	r3, [r3, #20]
   1913e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	return pkt->family;
   19142:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
	if (net_pkt_family(pkt) == AF_INET6) {
   19146:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1914a:	2b0a      	cmp	r3, #10
   1914c:	d108      	bne.n	19160 <net_if_send_data+0x58>
		pkt = net_ipv6_prepare_for_send(pkt);
   1914e:	4620      	mov	r0, r4
   19150:	f003 fd7a 	bl	1cc48 <net_ipv6_prepare_for_send>
		if (!pkt) {
   19154:	4605      	mov	r5, r0
   19156:	b920      	cbnz	r0, 19162 <net_if_send_data+0x5a>
	int status = -EIO;
   19158:	f06f 0804 	mvn.w	r8, #4
			verdict = NET_CONTINUE;
   1915c:	2601      	movs	r6, #1
   1915e:	e008      	b.n	19172 <net_if_send_data+0x6a>
   19160:	4625      	mov	r5, r4
	verdict = iface->l2->send(iface, pkt);
   19162:	687b      	ldr	r3, [r7, #4]
   19164:	4629      	mov	r1, r5
   19166:	685b      	ldr	r3, [r3, #4]
   19168:	4638      	mov	r0, r7
   1916a:	4798      	blx	r3
	int status = -EIO;
   1916c:	f06f 0804 	mvn.w	r8, #4
	verdict = iface->l2->send(iface, pkt);
   19170:	4606      	mov	r6, r0
		if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   19172:	2101      	movs	r1, #1
   19174:	4650      	mov	r0, sl
   19176:	f7ff fa64 	bl	18642 <atomic_test_bit>
   1917a:	b938      	cbnz	r0, 1918c <net_if_send_data+0x84>
   1917c:	6a2b      	ldr	r3, [r5, #32]
   1917e:	b92b      	cbnz	r3, 1918c <net_if_send_data+0x84>
   19180:	696b      	ldr	r3, [r5, #20]
			net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   19182:	691a      	ldr	r2, [r3, #16]
   19184:	622a      	str	r2, [r5, #32]
			net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   19186:	7d1b      	ldrb	r3, [r3, #20]
   19188:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
		if (context && verdict == NET_DROP) {
   1918c:	f1b9 0f00 	cmp.w	r9, #0
   19190:	d018      	beq.n	191c4 <net_if_send_data+0xbc>
   19192:	2e02      	cmp	r6, #2
   19194:	d118      	bne.n	191c8 <net_if_send_data+0xc0>
	if (context->send_cb) {
   19196:	f8d9 5034 	ldr.w	r5, [r9, #52]	; 0x34
   1919a:	b12d      	cbz	r5, 191a8 <net_if_send_data+0xa0>
		context->send_cb(context, status, token, context->user_data);
   1919c:	f8d9 3000 	ldr.w	r3, [r9]
   191a0:	465a      	mov	r2, fp
   191a2:	4641      	mov	r1, r8
   191a4:	4648      	mov	r0, r9
   191a6:	47a8      	blx	r5
		if (verdict == NET_DROP && dst->addr) {
   191a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   191aa:	b16b      	cbz	r3, 191c8 <net_if_send_data+0xc0>
			net_if_call_link_cb(iface, dst, status);
   191ac:	4642      	mov	r2, r8
   191ae:	f104 0128 	add.w	r1, r4, #40	; 0x28
   191b2:	4638      	mov	r0, r7
   191b4:	f7ff ff92 	bl	190dc <net_if_call_link_cb>
   191b8:	e006      	b.n	191c8 <net_if_send_data+0xc0>
   191ba:	4625      	mov	r5, r4
		status = -ENETDOWN;
   191bc:	f06f 083d 	mvn.w	r8, #61	; 0x3d
		verdict = NET_DROP;
   191c0:	2602      	movs	r6, #2
   191c2:	e7d6      	b.n	19172 <net_if_send_data+0x6a>
		if (verdict == NET_DROP && dst->addr) {
   191c4:	2e02      	cmp	r6, #2
   191c6:	d0ef      	beq.n	191a8 <net_if_send_data+0xa0>
}
   191c8:	4630      	mov	r0, r6
   191ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000191ce <net_if_tx>:
{
   191ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   191d2:	4605      	mov	r5, r0
	const struct net_if_api *api = iface->dev->driver_api;
   191d4:	f850 3b18 	ldr.w	r3, [r0], #24
	pkt = k_fifo_get(&iface->tx_queue, K_NO_WAIT);
   191d8:	2100      	movs	r1, #0
	const struct net_if_api *api = iface->dev->driver_api;
   191da:	685f      	ldr	r7, [r3, #4]
	pkt = k_fifo_get(&iface->tx_queue, K_NO_WAIT);
   191dc:	f006 f90f 	bl	1f3fe <k_queue_get>
	if (!pkt) {
   191e0:	4604      	mov	r4, r0
   191e2:	b358      	cbz	r0, 1923c <net_if_tx+0x6e>
	return &pkt->lladdr_src;
}

static inline struct net_linkaddr *net_pkt_ll_dst(struct net_pkt *pkt)
{
	return &pkt->lladdr_dst;
   191e4:	f100 0928 	add.w	r9, r0, #40	; 0x28
   191e8:	68c6      	ldr	r6, [r0, #12]
   191ea:	f8d0 a010 	ldr.w	sl, [r0, #16]
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   191ee:	2100      	movs	r1, #0
   191f0:	f105 000c 	add.w	r0, r5, #12
   191f4:	f7ff fa25 	bl	18642 <atomic_test_bit>
   191f8:	b1e8      	cbz	r0, 19236 <net_if_tx+0x68>
		status = api->send(iface, pkt);
   191fa:	687b      	ldr	r3, [r7, #4]
   191fc:	4621      	mov	r1, r4
   191fe:	4628      	mov	r0, r5
   19200:	4798      	blx	r3
	if (status < 0) {
   19202:	1e07      	subs	r7, r0, #0
   19204:	da02      	bge.n	1920c <net_if_tx+0x3e>
		net_pkt_unref(pkt);
   19206:	4620      	mov	r0, r4
   19208:	f000 f9df 	bl	195ca <net_pkt_unref>
	if (context) {
   1920c:	b14e      	cbz	r6, 19222 <net_if_tx+0x54>
	if (context->send_cb) {
   1920e:	f8d6 8034 	ldr.w	r8, [r6, #52]	; 0x34
   19212:	f1b8 0f00 	cmp.w	r8, #0
   19216:	d004      	beq.n	19222 <net_if_tx+0x54>
		context->send_cb(context, status, token, context->user_data);
   19218:	6833      	ldr	r3, [r6, #0]
   1921a:	4652      	mov	r2, sl
   1921c:	4639      	mov	r1, r7
   1921e:	4630      	mov	r0, r6
   19220:	47c0      	blx	r8
	if (dst->addr) {
   19222:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19224:	b123      	cbz	r3, 19230 <net_if_tx+0x62>
		net_if_call_link_cb(iface, dst, status);
   19226:	463a      	mov	r2, r7
   19228:	4649      	mov	r1, r9
   1922a:	4628      	mov	r0, r5
   1922c:	f7ff ff56 	bl	190dc <net_if_call_link_cb>
	return true;
   19230:	2001      	movs	r0, #1
}
   19232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		status = -ENETDOWN;
   19236:	f06f 073d 	mvn.w	r7, #61	; 0x3d
   1923a:	e7e4      	b.n	19206 <net_if_tx+0x38>
   1923c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00019240 <net_if_flush_tx>:
	if (k_fifo_is_empty(&iface->tx_queue)) {
   19240:	6983      	ldr	r3, [r0, #24]
{
   19242:	b510      	push	{r4, lr}
   19244:	4604      	mov	r4, r0
	if (k_fifo_is_empty(&iface->tx_queue)) {
   19246:	b133      	cbz	r3, 19256 <net_if_flush_tx+0x16>
   19248:	f006 fa84 	bl	1f754 <_impl_k_yield>
		if (!net_if_tx(iface)) {
   1924c:	4620      	mov	r0, r4
   1924e:	f7ff ffbe 	bl	191ce <net_if_tx>
   19252:	2800      	cmp	r0, #0
   19254:	d1fa      	bne.n	1924c <net_if_flush_tx+0xc>
   19256:	bd10      	pop	{r4, pc}

00019258 <net_if_tx_thread>:
{
   19258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1925c:	f006 faf6 	bl	1f84c <_impl_k_sem_give>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19260:	4e15      	ldr	r6, [pc, #84]	; (192b8 <net_if_tx_thread+0x60>)
   19262:	f8df 805c 	ldr.w	r8, [pc, #92]	; 192c0 <net_if_tx_thread+0x68>
   19266:	4f15      	ldr	r7, [pc, #84]	; (192bc <net_if_tx_thread+0x64>)
	int ev_count = 0;
   19268:	2400      	movs	r4, #0
   1926a:	f44f 7318 	mov.w	r3, #608	; 0x260
   1926e:	4363      	muls	r3, r4
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19270:	199a      	adds	r2, r3, r6
   19272:	4542      	cmp	r2, r8
   19274:	d10a      	bne.n	1928c <net_if_tx_thread+0x34>
		ret = k_poll(__net_if_event_start, ev_count, K_FOREVER);
   19276:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1927a:	4621      	mov	r1, r4
   1927c:	4638      	mov	r0, r7
   1927e:	f007 f859 	bl	20334 <k_poll>
   19282:	4d0e      	ldr	r5, [pc, #56]	; (192bc <net_if_tx_thread+0x64>)
	for (; ev_count; event++, ev_count--) {
   19284:	b96c      	cbnz	r4, 192a2 <net_if_tx_thread+0x4a>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   19286:	f006 fa65 	bl	1f754 <_impl_k_yield>
   1928a:	e7ed      	b.n	19268 <net_if_tx_thread+0x10>
		k_poll_event_init(&__net_if_event_start[ev_count],
   1928c:	3318      	adds	r3, #24
   1928e:	2014      	movs	r0, #20
   19290:	fb00 7004 	mla	r0, r0, r4, r7
   19294:	4433      	add	r3, r6
   19296:	2200      	movs	r2, #0
   19298:	2104      	movs	r1, #4
   1929a:	f007 f837 	bl	2030c <k_poll_event_init>
		ev_count++;
   1929e:	3401      	adds	r4, #1
   192a0:	e7e3      	b.n	1926a <net_if_tx_thread+0x12>
		switch (event->state) {
   192a2:	7b6b      	ldrb	r3, [r5, #13]
   192a4:	091b      	lsrs	r3, r3, #4
   192a6:	2b04      	cmp	r3, #4
   192a8:	d103      	bne.n	192b2 <net_if_tx_thread+0x5a>
			iface = CONTAINER_OF(event->fifo, struct net_if,
   192aa:	6928      	ldr	r0, [r5, #16]
			net_if_tx(iface);
   192ac:	3818      	subs	r0, #24
   192ae:	f7ff ff8e 	bl	191ce <net_if_tx>
	for (; ev_count; event++, ev_count--) {
   192b2:	3514      	adds	r5, #20
   192b4:	3c01      	subs	r4, #1
   192b6:	e7e5      	b.n	19284 <net_if_tx_thread+0x2c>
   192b8:	2000eb80 	.word	0x2000eb80
   192bc:	2000ede0 	.word	0x2000ede0
   192c0:	2000ede0 	.word	0x2000ede0

000192c4 <net_if_get_by_index>:
	}
}

struct net_if *net_if_get_by_index(u8_t index)
{
	if (&__net_if_start[index] >= __net_if_end) {
   192c4:	4a04      	ldr	r2, [pc, #16]	; (192d8 <net_if_get_by_index+0x14>)
   192c6:	f44f 7318 	mov.w	r3, #608	; 0x260
   192ca:	fb03 2000 	mla	r0, r3, r0, r2
		NET_DBG("Index %d is too large", index);
		return NULL;
	}

	return &__net_if_start[index];
}
   192ce:	4b03      	ldr	r3, [pc, #12]	; (192dc <net_if_get_by_index+0x18>)
   192d0:	4298      	cmp	r0, r3
   192d2:	bf28      	it	cs
   192d4:	2000      	movcs	r0, #0
   192d6:	4770      	bx	lr
   192d8:	2000eb80 	.word	0x2000eb80
   192dc:	2000ede0 	.word	0x2000ede0

000192e0 <net_if_get_by_iface>:

u8_t net_if_get_by_iface(struct net_if *iface)
{
	NET_ASSERT(iface >= __net_if_start && iface < __net_if_end);

	return iface - __net_if_start;
   192e0:	4b03      	ldr	r3, [pc, #12]	; (192f0 <net_if_get_by_iface+0x10>)
   192e2:	1ac0      	subs	r0, r0, r3
   192e4:	4b03      	ldr	r3, [pc, #12]	; (192f4 <net_if_get_by_iface+0x14>)
   192e6:	1140      	asrs	r0, r0, #5
   192e8:	4358      	muls	r0, r3
}
   192ea:	b2c0      	uxtb	r0, r0
   192ec:	4770      	bx	lr
   192ee:	bf00      	nop
   192f0:	2000eb80 	.word	0x2000eb80
   192f4:	286bca1b 	.word	0x286bca1b

000192f8 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   192f8:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   192fa:	f100 050c 	add.w	r5, r0, #12
{
   192fe:	4604      	mov	r4, r0
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   19300:	2100      	movs	r1, #0
   19302:	4628      	mov	r0, r5
   19304:	f7ff f99d 	bl	18642 <atomic_test_bit>
   19308:	b9c0      	cbnz	r0, 1933c <net_if_up+0x44>
		return 0;
	}

	/* If the L2 does not support enable just set the flag */
	if (!iface->l2->enable) {
   1930a:	6863      	ldr	r3, [r4, #4]
   1930c:	68db      	ldr	r3, [r3, #12]
   1930e:	b9bb      	cbnz	r3, 19340 <net_if_up+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19310:	f3bf 8f5b 	dmb	ish
   19314:	e855 3f00 	ldrex	r3, [r5]
   19318:	f043 0301 	orr.w	r3, r3, #1
   1931c:	e845 3200 	strex	r2, r3, [r5]
   19320:	2a00      	cmp	r2, #0
   19322:	d1f7      	bne.n	19314 <net_if_up+0x1c>
   19324:	f3bf 8f5b 	dmb	ish
done:
	atomic_set_bit(iface->flags, NET_IF_UP);

#if defined(CONFIG_NET_IPV6_DAD)
	NET_DBG("Starting DAD for iface %p", iface);
	net_if_start_dad(iface);
   19328:	4620      	mov	r0, r4
   1932a:	f7ff fb3f 	bl	189ac <net_if_start_dad>
	join_mcast_solicit_node(iface, &iface->ipv6.mcast[0].address.in6_addr);
#endif

#if defined(CONFIG_NET_IPV6_ND)
	NET_DBG("Starting ND/RS for iface %p", iface);
	net_if_start_rs(iface);
   1932e:	4620      	mov	r0, r4
   19330:	f7ff fa04 	bl	1873c <net_if_start_rs>
#endif

	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);
   19334:	4621      	mov	r1, r4
   19336:	4805      	ldr	r0, [pc, #20]	; (1934c <net_if_up+0x54>)
   19338:	f7ff f9c6 	bl	186c8 <net_mgmt_event_notify>
		return 0;
   1933c:	2000      	movs	r0, #0

	return 0;
}
   1933e:	bd38      	pop	{r3, r4, r5, pc}
	status = iface->l2->enable(iface, true);
   19340:	2101      	movs	r1, #1
   19342:	4620      	mov	r0, r4
   19344:	4798      	blx	r3
	if (status < 0) {
   19346:	2800      	cmp	r0, #0
   19348:	dae2      	bge.n	19310 <net_if_up+0x18>
   1934a:	bd38      	pop	{r3, r4, r5, pc}
   1934c:	d0010002 	.word	0xd0010002

00019350 <net_if_carrier_down>:

void net_if_carrier_down(struct net_if *iface)
{
   19350:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19352:	f100 030c 	add.w	r3, r0, #12
   19356:	4604      	mov	r4, r0
   19358:	f3bf 8f5b 	dmb	ish
   1935c:	e853 2f00 	ldrex	r2, [r3]
   19360:	f022 0201 	bic.w	r2, r2, #1
   19364:	e843 2100 	strex	r1, r2, [r3]
   19368:	2900      	cmp	r1, #0
   1936a:	d1f7      	bne.n	1935c <net_if_carrier_down+0xc>
   1936c:	f3bf 8f5b 	dmb	ish
	NET_DBG("iface %p", iface);

	atomic_clear_bit(iface->flags, NET_IF_UP);

	net_if_flush_tx(iface);
   19370:	f7ff ff66 	bl	19240 <net_if_flush_tx>

	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);
   19374:	4621      	mov	r1, r4
   19376:	4802      	ldr	r0, [pc, #8]	; (19380 <net_if_carrier_down+0x30>)
}
   19378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);
   1937c:	f7ff b9a4 	b.w	186c8 <net_mgmt_event_notify>
   19380:	d0010001 	.word	0xd0010001

00019384 <net_if_init>:

	return 0;
}

void net_if_init(struct k_sem *startup_sync)
{
   19384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct net_if *iface;

	NET_DBG("");

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19388:	4c1f      	ldr	r4, [pc, #124]	; (19408 <net_if_init+0x84>)
   1938a:	4f20      	ldr	r7, [pc, #128]	; (1940c <net_if_init+0x88>)
		iface->ipv6.base_reachable_time = REACHABLE_TIME;

		net_if_ipv6_set_reachable_time(iface);

#if defined(CONFIG_NET_IPV6_ND)
		k_delayed_work_init(&iface->ipv6.rs_timer, rs_timeout);
   1938c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1941c <net_if_init+0x98>
{
   19390:	b086      	sub	sp, #24
   19392:	4605      	mov	r5, r0
   19394:	4626      	mov	r6, r4
		iface->ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
   19396:	f04f 0840 	mov.w	r8, #64	; 0x40
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1939a:	42bc      	cmp	r4, r7
   1939c:	d115      	bne.n	193ca <net_if_init+0x46>
#endif
#endif
	}

	if (iface == __net_if_start) {
   1939e:	42b4      	cmp	r4, r6
   193a0:	d010      	beq.n	193c4 <net_if_init+0x40>

   193a2:	2201      	movs	r2, #1
   193a4:	2300      	movs	r3, #0
   193a6:	9204      	str	r2, [sp, #16]
   193a8:	f06f 0208 	mvn.w	r2, #8
   193ac:	9305      	str	r3, [sp, #20]
   193ae:	9203      	str	r2, [sp, #12]
   193b0:	9302      	str	r3, [sp, #8]
   193b2:	9301      	str	r3, [sp, #4]
   193b4:	9500      	str	r5, [sp, #0]
   193b6:	4b16      	ldr	r3, [pc, #88]	; (19410 <net_if_init+0x8c>)
   193b8:	4916      	ldr	r1, [pc, #88]	; (19414 <net_if_init+0x90>)
   193ba:	4817      	ldr	r0, [pc, #92]	; (19418 <net_if_init+0x94>)
   193bc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   193c0:	f006 fc80 	bl	1fcc4 <_impl_k_thread_create>
	k_thread_create(&tx_thread_data, tx_stack,
			K_THREAD_STACK_SIZEOF(tx_stack),
			(k_thread_entry_t)net_if_tx_thread,
			startup_sync, NULL, NULL, K_PRIO_COOP(7),
			K_ESSENTIAL, K_NO_WAIT);
}
   193c4:	b006      	add	sp, #24
   193c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	const struct net_if_api *api = iface->dev->driver_api;
   193ca:	4620      	mov	r0, r4
   193cc:	f850 3b18 	ldr.w	r3, [r0], #24
   193d0:	f8d3 a004 	ldr.w	sl, [r3, #4]
	k_fifo_init(&iface->tx_queue);
   193d4:	f005 ffbe 	bl	1f354 <k_queue_init>
	api->init(iface);
   193d8:	4620      	mov	r0, r4
   193da:	f8da 3000 	ldr.w	r3, [sl]
   193de:	4798      	blx	r3
		iface->ipv6.base_reachable_time = REACHABLE_TIME;
   193e0:	f247 5330 	movw	r3, #30000	; 0x7530
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   193e4:	4620      	mov	r0, r4
   193e6:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
		iface->ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
   193ea:	f884 824c 	strb.w	r8, [r4, #588]	; 0x24c
   193ee:	f7ff fe65 	bl	190bc <net_if_ipv6_calc_reachable_time>
		k_delayed_work_init(&iface->ipv6.rs_timer, rs_timeout);
   193f2:	4649      	mov	r1, r9
   193f4:	f8c4 0244 	str.w	r0, [r4, #580]	; 0x244
   193f8:	f504 7006 	add.w	r0, r4, #536	; 0x218
   193fc:	f006 fd52 	bl	1fea4 <k_delayed_work_init>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19400:	f504 7418 	add.w	r4, r4, #608	; 0x260
   19404:	e7c9      	b.n	1939a <net_if_init+0x16>
   19406:	bf00      	nop
   19408:	2000eb80 	.word	0x2000eb80
   1940c:	2000ede0 	.word	0x2000ede0
   19410:	00019259 	.word	0x00019259
   19414:	20007648 	.word	0x20007648
   19418:	20003098 	.word	0x20003098
   1941c:	00018759 	.word	0x00018759

00019420 <net_if_post_init>:

void net_if_post_init(void)
{
   19420:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19422:	4c05      	ldr	r4, [pc, #20]	; (19438 <net_if_post_init+0x18>)
   19424:	4d05      	ldr	r5, [pc, #20]	; (1943c <net_if_post_init+0x1c>)
   19426:	42ac      	cmp	r4, r5
   19428:	d100      	bne.n	1942c <net_if_post_init+0xc>

	/* RPL init must be done after the network interface is up
	 * as the RPL code wants to add multicast address to interface.
	 */
	net_rpl_init();
}
   1942a:	bd38      	pop	{r3, r4, r5, pc}
		net_if_up(iface);
   1942c:	4620      	mov	r0, r4
   1942e:	f7ff ff63 	bl	192f8 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19432:	f504 7418 	add.w	r4, r4, #608	; 0x260
   19436:	e7f6      	b.n	19426 <net_if_post_init+0x6>
   19438:	2000eb80 	.word	0x2000eb80
   1943c:	2000ede0 	.word	0x2000ede0

00019440 <net_pkt_get_reserve>:
#else /* CONFIG_NET_DEBUG_NET_PKT */
struct net_pkt *net_pkt_get_reserve(struct k_mem_slab *slab,
				    u16_t reserve_head,
				    s32_t timeout)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
   19440:	b573      	push	{r0, r1, r4, r5, r6, lr}
   19442:	4604      	mov	r4, r0
   19444:	460d      	mov	r5, r1
   19446:	4616      	mov	r6, r2
	struct net_pkt *pkt;
	int ret;

	if (k_is_in_isr()) {
   19448:	f006 fbec 	bl	1fc24 <k_is_in_isr>
   1944c:	b198      	cbz	r0, 19476 <net_pkt_get_reserve+0x36>
		ret = k_mem_slab_alloc(slab, (void **)&pkt, K_NO_WAIT);
   1944e:	2200      	movs	r2, #0
	} else {
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   19450:	a901      	add	r1, sp, #4
   19452:	4620      	mov	r0, r4
   19454:	f005 fe60 	bl	1f118 <k_mem_slab_alloc>
	}

	if (ret) {
   19458:	b978      	cbnz	r0, 1947a <net_pkt_get_reserve+0x3a>
		return NULL;
	}

	memset(pkt, 0, sizeof(struct net_pkt));
   1945a:	4601      	mov	r1, r0
   1945c:	2240      	movs	r2, #64	; 0x40
   1945e:	9801      	ldr	r0, [sp, #4]
   19460:	f7e7 fa6f 	bl	942 <memset>

	net_pkt_set_ll_reserve(pkt, reserve_head);
   19464:	9801      	ldr	r0, [sp, #4]

	pkt->ref = 1;
   19466:	2301      	movs	r3, #1
	net_pkt_set_ll_reserve(pkt, reserve_head);
   19468:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
	pkt->ref = 1;
   1946c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
	pkt->slab = slab;
   19470:	6044      	str	r4, [r0, #4]
	NET_DBG("%s [%u] pkt %p reserve %u ref %d (%s():%d)",
		slab2str(slab), k_mem_slab_num_free_get(slab),
		pkt, reserve_head, pkt->ref, caller, line);
#endif
	return pkt;
}
   19472:	b002      	add	sp, #8
   19474:	bd70      	pop	{r4, r5, r6, pc}
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   19476:	4632      	mov	r2, r6
   19478:	e7ea      	b.n	19450 <net_pkt_get_reserve+0x10>
		return NULL;
   1947a:	2000      	movs	r0, #0
   1947c:	e7f9      	b.n	19472 <net_pkt_get_reserve+0x32>
	...

00019480 <net_pkt_get>:
#else
static struct net_pkt *net_pkt_get(struct k_mem_slab *slab,
				   struct net_context *context,
				   s32_t timeout)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
   19480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19482:	4606      	mov	r6, r0
   19484:	4617      	mov	r7, r2
	struct in6_addr *addr6 = NULL;
	struct net_if *iface;
	struct net_pkt *pkt;
	sa_family_t family;

	if (!context) {
   19486:	460c      	mov	r4, r1
   19488:	b909      	cbnz	r1, 1948e <net_pkt_get+0xe>
		return NULL;
   1948a:	2000      	movs	r0, #0
   1948c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_if_get_by_index(context->iface);
   1948e:	f891 0054 	ldrb.w	r0, [r1, #84]	; 0x54
   19492:	f7ff ff17 	bl	192c4 <net_if_get_by_index>
	}

	iface = net_context_get_iface(context);
	if (!iface) {
   19496:	4605      	mov	r5, r0
   19498:	2800      	cmp	r0, #0
   1949a:	d0f6      	beq.n	1948a <net_pkt_get+0xa>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1949c:	f894 1055 	ldrb.w	r1, [r4, #85]	; 0x55
   194a0:	f011 0110 	ands.w	r1, r1, #16
   194a4:	d133      	bne.n	1950e <net_pkt_get+0x8e>
	return iface->l2->reserve(iface, (void *)dst_ip6);
   194a6:	686b      	ldr	r3, [r5, #4]
   194a8:	4628      	mov	r0, r5
   194aa:	689b      	ldr	r3, [r3, #8]
   194ac:	4798      	blx	r3
#if defined(CONFIG_NET_DEBUG_NET_PKT)
	pkt = net_pkt_get_reserve_debug(slab,
					net_if_get_ll_reserve(iface, addr6),
					timeout, caller, line);
#else
	pkt = net_pkt_get_reserve(slab, net_if_get_ll_reserve(iface, addr6),
   194ae:	463a      	mov	r2, r7
   194b0:	4601      	mov	r1, r0
   194b2:	4630      	mov	r0, r6
   194b4:	f7ff ffc4 	bl	19440 <net_pkt_get_reserve>
				  timeout);
#endif
	if (!pkt) {
   194b8:	2800      	cmp	r0, #0
   194ba:	d0e6      	beq.n	1948a <net_pkt_get+0xa>
	pkt->context = ctx;
   194bc:	60c4      	str	r4, [r0, #12]
	pkt->iface = iface;
   194be:	6145      	str	r5, [r0, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   194c0:	7d6b      	ldrb	r3, [r5, #21]
   194c2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   194c6:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
   194ca:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
	return AF_INET;
   194ce:	f013 0f10 	tst.w	r3, #16
	pkt->family = family;
   194d2:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
   194d6:	bf14      	ite	ne
   194d8:	220a      	movne	r2, #10
   194da:	2202      	moveq	r2, #2
   194dc:	f362 03c6 	bfi	r3, r2, #3, #4
   194e0:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
	net_pkt_set_context(pkt, context);
	net_pkt_set_iface(pkt, iface);
	family = net_context_get_family(context);
	net_pkt_set_family(pkt, family);

	if (slab != &rx_pkts) {
   194e4:	4b0d      	ldr	r3, [pc, #52]	; (1951c <net_pkt_get+0x9c>)
   194e6:	429e      	cmp	r6, r3
   194e8:	d017      	beq.n	1951a <net_pkt_get+0x9a>
		uint16_t iface_len, data_len = 0;
		enum net_ip_protocol proto;

		iface_len = net_if_get_mtu(iface);

		if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   194ea:	2a0a      	cmp	r2, #10
   194ec:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   194ee:	d10c      	bne.n	1950a <net_pkt_get+0x8a>
			data_len = max(iface_len, NET_IPV6_MTU);
   194f0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   194f4:	bf38      	it	cc
   194f6:	f44f 63a0 	movcc.w	r3, #1280	; 0x500
			data_len -= NET_IPV6H_LEN;
   194fa:	3b28      	subs	r3, #40	; 0x28
   194fc:	b29b      	uxth	r3, r3
	if (context->flags & NET_CONTEXT_PROTO) {
   194fe:	f894 2055 	ldrb.w	r2, [r4, #85]	; 0x55
   19502:	0652      	lsls	r2, r2, #25
   19504:	d506      	bpl.n	19514 <net_pkt_get+0x94>

		if (proto == IPPROTO_ICMP || proto == IPPROTO_ICMPV6) {
			data_len -= NET_ICMPH_LEN;
		}

		pkt->data_len = data_len;
   19506:	8603      	strh	r3, [r0, #48]	; 0x30
   19508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint16_t iface_len, data_len = 0;
   1950a:	2300      	movs	r3, #0
   1950c:	e7f7      	b.n	194fe <net_pkt_get+0x7e>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1950e:	f104 0118 	add.w	r1, r4, #24
   19512:	e7c8      	b.n	194a6 <net_pkt_get+0x26>
			data_len -= NET_UDPH_LEN;
   19514:	3b08      	subs	r3, #8
   19516:	b29b      	uxth	r3, r3
   19518:	e7f5      	b.n	19506 <net_pkt_get+0x86>
	}

	return pkt;
}
   1951a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1951c:	2000e9ec 	.word	0x2000e9ec

00019520 <net_pkt_get_reserve_data>:
{
   19520:	b570      	push	{r4, r5, r6, lr}
   19522:	4604      	mov	r4, r0
   19524:	460d      	mov	r5, r1
   19526:	4616      	mov	r6, r2
	if (k_is_in_isr()) {
   19528:	f006 fb7c 	bl	1fc24 <k_is_in_isr>
   1952c:	b158      	cbz	r0, 19546 <net_pkt_get_reserve_data+0x26>
		frag = net_buf_alloc(pool, K_NO_WAIT);
   1952e:	2100      	movs	r1, #0
		frag = net_buf_alloc(pool, timeout);
   19530:	4620      	mov	r0, r4
   19532:	f7fe fabd 	bl	17ab0 <net_buf_alloc_fixed>
   19536:	4604      	mov	r4, r0
	if (!frag) {
   19538:	b118      	cbz	r0, 19542 <net_pkt_get_reserve_data+0x22>
	net_buf_reserve(frag, reserve_head);
   1953a:	4629      	mov	r1, r5
   1953c:	3008      	adds	r0, #8
   1953e:	f7fe fad6 	bl	17aee <net_buf_simple_reserve>
}
   19542:	4620      	mov	r0, r4
   19544:	bd70      	pop	{r4, r5, r6, pc}
		frag = net_buf_alloc(pool, timeout);
   19546:	4631      	mov	r1, r6
   19548:	e7f2      	b.n	19530 <net_pkt_get_reserve_data+0x10>
	...

0001954c <net_pkt_get_reserve_rx>:
	return net_pkt_get_reserve(&rx_pkts, reserve_head, timeout);
   1954c:	460a      	mov	r2, r1
   1954e:	4601      	mov	r1, r0
   19550:	4801      	ldr	r0, [pc, #4]	; (19558 <net_pkt_get_reserve_rx+0xc>)
   19552:	f7ff bf75 	b.w	19440 <net_pkt_get_reserve>
   19556:	bf00      	nop
   19558:	2000e9ec 	.word	0x2000e9ec

0001955c <net_pkt_get_reserve_tx>:
	return net_pkt_get_reserve(&tx_pkts, reserve_head, timeout);
   1955c:	460a      	mov	r2, r1
   1955e:	4601      	mov	r1, r0
   19560:	4801      	ldr	r0, [pc, #4]	; (19568 <net_pkt_get_reserve_tx+0xc>)
   19562:	f7ff bf6d 	b.w	19440 <net_pkt_get_reserve>
   19566:	bf00      	nop
   19568:	2000ea08 	.word	0x2000ea08

0001956c <net_pkt_get_reserve_rx_data>:
	return net_pkt_get_reserve_data(&rx_bufs, reserve_head, timeout);
   1956c:	460a      	mov	r2, r1
   1956e:	4601      	mov	r1, r0
   19570:	4801      	ldr	r0, [pc, #4]	; (19578 <net_pkt_get_reserve_rx_data+0xc>)
   19572:	f7ff bfd5 	b.w	19520 <net_pkt_get_reserve_data>
   19576:	bf00      	nop
   19578:	2000eb2c 	.word	0x2000eb2c

0001957c <net_pkt_get_reserve_tx_data>:
	return net_pkt_get_reserve_data(&tx_bufs, reserve_head, timeout);
   1957c:	460a      	mov	r2, r1
   1957e:	4601      	mov	r1, r0
   19580:	4801      	ldr	r0, [pc, #4]	; (19588 <net_pkt_get_reserve_tx_data+0xc>)
   19582:	f7ff bfcd 	b.w	19520 <net_pkt_get_reserve_data>
   19586:	bf00      	nop
   19588:	2000eb4c 	.word	0x2000eb4c

0001958c <net_pkt_get_frag>:
	if (pkt->slab == &rx_pkts) {
   1958c:	6842      	ldr	r2, [r0, #4]
   1958e:	4b04      	ldr	r3, [pc, #16]	; (195a0 <net_pkt_get_frag+0x14>)
   19590:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
   19594:	429a      	cmp	r2, r3
   19596:	d101      	bne.n	1959c <net_pkt_get_frag+0x10>
		return net_pkt_get_reserve_rx_data(net_pkt_ll_reserve(pkt),
   19598:	f7ff bfe8 	b.w	1956c <net_pkt_get_reserve_rx_data>
	return net_pkt_get_reserve_tx_data(net_pkt_ll_reserve(pkt),
   1959c:	f7ff bfee 	b.w	1957c <net_pkt_get_reserve_tx_data>
   195a0:	2000e9ec 	.word	0x2000e9ec

000195a4 <net_pkt_get_tx>:

	NET_ASSERT_INFO(context, "TX context not set");

	slab = get_tx_slab(context);

	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   195a4:	460a      	mov	r2, r1
   195a6:	4601      	mov	r1, r0
   195a8:	4801      	ldr	r0, [pc, #4]	; (195b0 <net_pkt_get_tx+0xc>)
   195aa:	f7ff bf69 	b.w	19480 <net_pkt_get>
   195ae:	bf00      	nop
   195b0:	2000ea08 	.word	0x2000ea08

000195b4 <net_pkt_ref>:
				  int line)
#else
struct net_pkt *net_pkt_ref(struct net_pkt *pkt)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
	if (!pkt) {
   195b4:	b120      	cbz	r0, 195c0 <net_pkt_ref+0xc>
	NET_DBG("%s [%d] pkt %p ref %d (%s():%d)",
		slab2str(pkt->slab), k_mem_slab_num_free_get(pkt->slab),
		pkt, pkt->ref + 1, caller, line);
#endif

	pkt->ref++;
   195b6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
   195ba:	3301      	adds	r3, #1
   195bc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e

	return pkt;
}
   195c0:	4770      	bx	lr

000195c2 <net_pkt_frag_unref>:
			      const char *caller, int line)
#else
void net_pkt_frag_unref(struct net_buf *frag)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
	if (!frag) {
   195c2:	b108      	cbz	r0, 195c8 <net_pkt_frag_unref+0x6>

	if (frag->ref == 1) {
		net_pkt_alloc_del(frag, caller, line);
	}
#endif
	net_buf_unref(frag);
   195c4:	f7fe baa4 	b.w	17b10 <net_buf_unref>
   195c8:	4770      	bx	lr

000195ca <net_pkt_unref>:
{
   195ca:	b507      	push	{r0, r1, r2, lr}
   195cc:	9001      	str	r0, [sp, #4]
	if (!pkt) {
   195ce:	b180      	cbz	r0, 195f2 <net_pkt_unref+0x28>
	if (!pkt->ref) {
   195d0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
   195d4:	b16b      	cbz	r3, 195f2 <net_pkt_unref+0x28>
	if (--pkt->ref > 0) {
   195d6:	3b01      	subs	r3, #1
   195d8:	b2db      	uxtb	r3, r3
   195da:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
   195de:	b943      	cbnz	r3, 195f2 <net_pkt_unref+0x28>
	if (pkt->frags) {
   195e0:	6880      	ldr	r0, [r0, #8]
   195e2:	b108      	cbz	r0, 195e8 <net_pkt_unref+0x1e>
		net_pkt_frag_unref(pkt->frags);
   195e4:	f7ff ffed 	bl	195c2 <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   195e8:	9b01      	ldr	r3, [sp, #4]
   195ea:	a901      	add	r1, sp, #4
   195ec:	6858      	ldr	r0, [r3, #4]
   195ee:	f005 fdbf 	bl	1f170 <k_mem_slab_free>
}
   195f2:	b003      	add	sp, #12
   195f4:	f85d fb04 	ldr.w	pc, [sp], #4

000195f8 <net_pkt_frag_del>:
#else
struct net_buf *net_pkt_frag_del(struct net_pkt *pkt,
				 struct net_buf *parent,
				 struct net_buf *frag)
#endif
{
   195f8:	b510      	push	{r4, lr}
   195fa:	4604      	mov	r4, r0
   195fc:	4608      	mov	r0, r1
	if (frag->ref == 1) {
		net_pkt_alloc_del(frag, caller, line);
	}
#endif

	if (pkt->frags == frag && !parent) {
   195fe:	68a1      	ldr	r1, [r4, #8]
   19600:	4291      	cmp	r1, r2
   19602:	d104      	bne.n	1960e <net_pkt_frag_del+0x16>
   19604:	b918      	cbnz	r0, 1960e <net_pkt_frag_del+0x16>
		struct net_buf *tmp;

		tmp = net_buf_frag_del(NULL, frag);
   19606:	f7fe fad5 	bl	17bb4 <net_buf_frag_del>
		pkt->frags = tmp;
   1960a:	60a0      	str	r0, [r4, #8]
   1960c:	bd10      	pop	{r4, pc}

		return tmp;
	}

	return net_buf_frag_del(parent, frag);
   1960e:	4611      	mov	r1, r2
}
   19610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return net_buf_frag_del(parent, frag);
   19614:	f7fe bace 	b.w	17bb4 <net_buf_frag_del>

00019618 <net_pkt_frag_add>:
	NET_DBG("pkt %p frag %p (%s:%d)", pkt, frag, caller, line);

	/* We do not use net_buf_frag_add() as this one will refcount
	 * the frag once more if !pkt->frags
	 */
	if (!pkt->frags) {
   19618:	6883      	ldr	r3, [r0, #8]
{
   1961a:	b510      	push	{r4, lr}
   1961c:	460c      	mov	r4, r1
	if (!pkt->frags) {
   1961e:	b90b      	cbnz	r3, 19624 <net_pkt_frag_add+0xc>
		pkt->frags = frag;
   19620:	6081      	str	r1, [r0, #8]
		return;
   19622:	bd10      	pop	{r4, pc}
	}

	net_buf_frag_insert(net_buf_frag_last(pkt->frags), frag);
   19624:	4618      	mov	r0, r3
   19626:	f7fe faa5 	bl	17b74 <net_buf_frag_last>
   1962a:	4621      	mov	r1, r4
}
   1962c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_buf_frag_insert(net_buf_frag_last(pkt->frags), frag);
   19630:	f7fe baa5 	b.w	17b7e <net_buf_frag_insert>

00019634 <check_and_create_data.part.18>:
	*value = v32[0] << 24 | v32[1] << 16 | v32[2] << 8 | v32[3];

	return ret_frag;
}

static inline struct net_buf *check_and_create_data(struct net_pkt *pkt,
   19634:	b538      	push	{r3, r4, r5, lr}
   19636:	4605      	mov	r5, r0

	if (data) {
		return data;
	}

	frag = net_pkt_get_frag(pkt, timeout);
   19638:	f7ff ffa8 	bl	1958c <net_pkt_get_frag>
	if (!frag) {
   1963c:	4604      	mov	r4, r0
   1963e:	b118      	cbz	r0, 19648 <check_and_create_data.part.18+0x14>
		return NULL;
	}

	net_pkt_frag_add(pkt, frag);
   19640:	4601      	mov	r1, r0
   19642:	4628      	mov	r0, r5
   19644:	f7ff ffe8 	bl	19618 <net_pkt_frag_add>

	return frag;
}
   19648:	4620      	mov	r0, r4
   1964a:	bd38      	pop	{r3, r4, r5, pc}

0001964c <net_pkt_frag_insert>:
{
   1964c:	b538      	push	{r3, r4, r5, lr}
   1964e:	4604      	mov	r4, r0
	net_buf_frag_last(frag)->frags = pkt->frags;
   19650:	4608      	mov	r0, r1
{
   19652:	460d      	mov	r5, r1
	net_buf_frag_last(frag)->frags = pkt->frags;
   19654:	f7fe fa8e 	bl	17b74 <net_buf_frag_last>
   19658:	68a3      	ldr	r3, [r4, #8]
   1965a:	6003      	str	r3, [r0, #0]
	pkt->frags = frag;
   1965c:	60a5      	str	r5, [r4, #8]
   1965e:	bd38      	pop	{r3, r4, r5, pc}

00019660 <net_pkt_copy>:
{
   19660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19664:	b085      	sub	sp, #20
   19666:	460f      	mov	r7, r1
   19668:	9302      	str	r3, [sp, #8]
	frag = net_pkt_get_frag(pkt, timeout);
   1966a:	9902      	ldr	r1, [sp, #8]
{
   1966c:	9001      	str	r0, [sp, #4]
   1966e:	4690      	mov	r8, r2
	orig = pkt->frags;
   19670:	6885      	ldr	r5, [r0, #8]
	frag = net_pkt_get_frag(pkt, timeout);
   19672:	f7ff ff8b 	bl	1958c <net_pkt_get_frag>
	if (!frag) {
   19676:	4604      	mov	r4, r0
   19678:	b150      	cbz	r0, 19690 <net_pkt_copy+0x30>
	if (reserve > net_buf_tailroom(frag)) {
   1967a:	f100 0608 	add.w	r6, r0, #8
   1967e:	4630      	mov	r0, r6
   19680:	f7fe fb10 	bl	17ca4 <net_buf_simple_tailroom>
   19684:	4540      	cmp	r0, r8
   19686:	d207      	bcs.n	19698 <net_pkt_copy+0x38>
		net_pkt_frag_unref(frag);
   19688:	4620      	mov	r0, r4
   1968a:	f7ff ff9a 	bl	195c2 <net_pkt_frag_unref>
		return NULL;
   1968e:	2400      	movs	r4, #0
}
   19690:	4620      	mov	r0, r4
   19692:	b005      	add	sp, #20
   19694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_add(frag, reserve);
   19698:	4630      	mov	r0, r6
   1969a:	4641      	mov	r1, r8
   1969c:	f7fe fa96 	bl	17bcc <net_buf_simple_add>
	if (!orig->len) {
   196a0:	89ae      	ldrh	r6, [r5, #12]
   196a2:	2e00      	cmp	r6, #0
   196a4:	d0f4      	beq.n	19690 <net_pkt_copy+0x30>
	orig_data = orig->data;
   196a6:	f8d5 9008 	ldr.w	r9, [r5, #8]
   196aa:	46a2      	mov	sl, r4
	while (orig && amount) {
   196ac:	2f00      	cmp	r7, #0
   196ae:	d0ef      	beq.n	19690 <net_pkt_copy+0x30>
		int left_len = net_buf_tailroom(frag);
   196b0:	f10a 0b08 	add.w	fp, sl, #8
   196b4:	4658      	mov	r0, fp
   196b6:	f7fe faf5 	bl	17ca4 <net_buf_simple_tailroom>
			copy_len = orig_len;
   196ba:	42be      	cmp	r6, r7
   196bc:	4632      	mov	r2, r6
   196be:	bf28      	it	cs
   196c0:	463a      	movcs	r2, r7
		if ((copy_len - left_len) >= 0) {
   196c2:	1a11      	subs	r1, r2, r0
   196c4:	2900      	cmp	r1, #0
		int left_len = net_buf_tailroom(frag);
   196c6:	4680      	mov	r8, r0
		if ((copy_len - left_len) >= 0) {
   196c8:	db1c      	blt.n	19704 <net_pkt_copy+0xa4>
			memcpy(net_buf_add(frag, left_len), orig_data,
   196ca:	4601      	mov	r1, r0
			amount -= left_len;
   196cc:	1a3f      	subs	r7, r7, r0
			memcpy(net_buf_add(frag, left_len), orig_data,
   196ce:	4658      	mov	r0, fp
   196d0:	f7fe fa7c 	bl	17bcc <net_buf_simple_add>
   196d4:	4642      	mov	r2, r8
   196d6:	4649      	mov	r1, r9
   196d8:	f7e7 f907 	bl	8ea <memcpy>
			if (!net_buf_tailroom(frag)) {
   196dc:	4658      	mov	r0, fp
   196de:	f7fe fae1 	bl	17ca4 <net_buf_simple_tailroom>
   196e2:	b958      	cbnz	r0, 196fc <net_pkt_copy+0x9c>
				struct net_buf *new_frag =
   196e4:	9902      	ldr	r1, [sp, #8]
   196e6:	9801      	ldr	r0, [sp, #4]
   196e8:	f7ff ff50 	bl	1958c <net_pkt_get_frag>
				if (!new_frag) {
   196ec:	4683      	mov	fp, r0
   196ee:	2800      	cmp	r0, #0
   196f0:	d0ca      	beq.n	19688 <net_pkt_copy+0x28>
				net_buf_frag_add(frag, new_frag);
   196f2:	4601      	mov	r1, r0
   196f4:	4650      	mov	r0, sl
   196f6:	f7fe fa4d 	bl	17b94 <net_buf_frag_add>
   196fa:	46da      	mov	sl, fp
			orig_len -= left_len;
   196fc:	eba6 0608 	sub.w	r6, r6, r8
			orig_data += left_len;
   19700:	44c1      	add	r9, r8
   19702:	e7d3      	b.n	196ac <net_pkt_copy+0x4c>
			memcpy(net_buf_add(frag, copy_len), orig_data,
   19704:	4611      	mov	r1, r2
   19706:	4658      	mov	r0, fp
			amount -= copy_len;
   19708:	1abf      	subs	r7, r7, r2
			memcpy(net_buf_add(frag, copy_len), orig_data,
   1970a:	9203      	str	r2, [sp, #12]
   1970c:	f7fe fa5e 	bl	17bcc <net_buf_simple_add>
   19710:	9a03      	ldr	r2, [sp, #12]
   19712:	4649      	mov	r1, r9
   19714:	f7e7 f8e9 	bl	8ea <memcpy>
		orig = orig->frags;
   19718:	682d      	ldr	r5, [r5, #0]
		if (orig) {
   1971a:	2d00      	cmp	r5, #0
   1971c:	d0b8      	beq.n	19690 <net_pkt_copy+0x30>
			orig_len = orig->len;
   1971e:	89ae      	ldrh	r6, [r5, #12]
			orig_data = orig->data;
   19720:	f8d5 9008 	ldr.w	r9, [r5, #8]
   19724:	e7c2      	b.n	196ac <net_pkt_copy+0x4c>

00019726 <net_pkt_compact>:
{
   19726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	frag = pkt->frags;
   1972a:	6884      	ldr	r4, [r0, #8]
{
   1972c:	4607      	mov	r7, r0
	prev = NULL;
   1972e:	f04f 0800 	mov.w	r8, #0
	while (frag) {
   19732:	2c00      	cmp	r4, #0
   19734:	d035      	beq.n	197a2 <net_pkt_compact+0x7c>
		if (frag->frags) {
   19736:	6823      	ldr	r3, [r4, #0]
   19738:	b363      	cbz	r3, 19794 <net_pkt_compact+0x6e>
			if (copy_len > net_buf_tailroom(frag)) {
   1973a:	f104 0608 	add.w	r6, r4, #8
   1973e:	4630      	mov	r0, r6
			copy_len = frag->frags->len;
   19740:	899d      	ldrh	r5, [r3, #12]
			if (copy_len > net_buf_tailroom(frag)) {
   19742:	f7fe faaf 	bl	17ca4 <net_buf_simple_tailroom>
   19746:	4285      	cmp	r5, r0
   19748:	d903      	bls.n	19752 <net_pkt_compact+0x2c>
				copy_len = net_buf_tailroom(frag);
   1974a:	4630      	mov	r0, r6
   1974c:	f7fe faaa 	bl	17ca4 <net_buf_simple_tailroom>
   19750:	4605      	mov	r5, r0
	return buf->data + buf->len;
   19752:	68a3      	ldr	r3, [r4, #8]
			memcpy(net_buf_tail(frag), frag->frags->data, copy_len);
   19754:	6821      	ldr	r1, [r4, #0]
   19756:	89a0      	ldrh	r0, [r4, #12]
   19758:	6889      	ldr	r1, [r1, #8]
   1975a:	462a      	mov	r2, r5
   1975c:	4418      	add	r0, r3
   1975e:	f7e7 f8c4 	bl	8ea <memcpy>
			net_buf_add(frag, copy_len);
   19762:	4629      	mov	r1, r5
   19764:	4630      	mov	r0, r6
   19766:	f7fe fa31 	bl	17bcc <net_buf_simple_add>
			memmove(frag->frags->data,
   1976a:	6823      	ldr	r3, [r4, #0]
   1976c:	6898      	ldr	r0, [r3, #8]
				frag->frags->len - copy_len);
   1976e:	899a      	ldrh	r2, [r3, #12]
			memmove(frag->frags->data,
   19770:	1941      	adds	r1, r0, r5
   19772:	1b52      	subs	r2, r2, r5
   19774:	f7e7 f8a1 	bl	8ba <memmove>
			frag->frags->len -= copy_len;
   19778:	6822      	ldr	r2, [r4, #0]
   1977a:	8993      	ldrh	r3, [r2, #12]
   1977c:	1b5d      	subs	r5, r3, r5
   1977e:	8195      	strh	r5, [r2, #12]
			if (net_buf_tailroom(frag)) {
   19780:	4630      	mov	r0, r6
   19782:	f7fe fa8f 	bl	17ca4 <net_buf_simple_tailroom>
   19786:	b178      	cbz	r0, 197a8 <net_pkt_compact+0x82>
				net_pkt_frag_del(pkt, frag, frag->frags);
   19788:	6822      	ldr	r2, [r4, #0]
   1978a:	4621      	mov	r1, r4
   1978c:	4638      	mov	r0, r7
   1978e:	f7ff ff33 	bl	195f8 <net_pkt_frag_del>
				continue;
   19792:	e7ce      	b.n	19732 <net_pkt_compact+0xc>
			if (!frag->len) {
   19794:	89a3      	ldrh	r3, [r4, #12]
   19796:	b93b      	cbnz	r3, 197a8 <net_pkt_compact+0x82>
				net_pkt_frag_del(pkt, prev, frag);
   19798:	4622      	mov	r2, r4
   1979a:	4641      	mov	r1, r8
   1979c:	4638      	mov	r0, r7
   1979e:	f7ff ff2b 	bl	195f8 <net_pkt_frag_del>
}
   197a2:	2001      	movs	r0, #1
   197a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		frag = frag->frags;
   197a8:	46a0      	mov	r8, r4
   197aa:	6824      	ldr	r4, [r4, #0]
   197ac:	e7c1      	b.n	19732 <net_pkt_compact+0xc>
	...

000197b0 <net_pkt_append>:
{
   197b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   197b4:	460d      	mov	r5, r1
   197b6:	4690      	mov	r8, r2
   197b8:	469a      	mov	sl, r3
	if (!pkt || !data || !len) {
   197ba:	4604      	mov	r4, r0
   197bc:	b918      	cbnz	r0, 197c6 <net_pkt_append+0x16>
		return 0;
   197be:	2700      	movs	r7, #0
}
   197c0:	4638      	mov	r0, r7
   197c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!pkt || !data || !len) {
   197c6:	2a00      	cmp	r2, #0
   197c8:	d0f9      	beq.n	197be <net_pkt_append+0xe>
   197ca:	2900      	cmp	r1, #0
   197cc:	d0f7      	beq.n	197be <net_pkt_append+0xe>
	if (!pkt->frags) {
   197ce:	6883      	ldr	r3, [r0, #8]
   197d0:	b943      	cbnz	r3, 197e4 <net_pkt_append+0x34>
		frag = net_pkt_get_frag(pkt, timeout);
   197d2:	4651      	mov	r1, sl
   197d4:	f7ff feda 	bl	1958c <net_pkt_get_frag>
		if (!frag) {
   197d8:	4601      	mov	r1, r0
   197da:	2800      	cmp	r0, #0
   197dc:	d0ef      	beq.n	197be <net_pkt_append+0xe>
		net_pkt_frag_add(pkt, frag);
   197de:	4620      	mov	r0, r4
   197e0:	f7ff ff1a 	bl	19618 <net_pkt_frag_add>
	if (pkt->slab != &rx_pkts) {
   197e4:	6862      	ldr	r2, [r4, #4]
   197e6:	4b21      	ldr	r3, [pc, #132]	; (1986c <net_pkt_append+0xbc>)
   197e8:	429a      	cmp	r2, r3
   197ea:	d032      	beq.n	19852 <net_pkt_append+0xa2>
   197ec:	f8d4 900c 	ldr.w	r9, [r4, #12]
	if (ctx) {
   197f0:	f1b9 0f00 	cmp.w	r9, #0
   197f4:	d003      	beq.n	197fe <net_pkt_append+0x4e>
   197f6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   197f8:	429d      	cmp	r5, r3
   197fa:	bf28      	it	cs
   197fc:	461d      	movcs	r5, r3
	struct net_buf *frag = net_buf_frag_last(pkt->frags);
   197fe:	68a0      	ldr	r0, [r4, #8]
   19800:	f7fe f9b8 	bl	17b74 <net_buf_frag_last>
	u16_t added_len = 0;
   19804:	2700      	movs	r7, #0
	struct net_buf *frag = net_buf_frag_last(pkt->frags);
   19806:	4606      	mov	r6, r0
		u16_t count = min(len, net_buf_tailroom(frag));
   19808:	3608      	adds	r6, #8
   1980a:	4630      	mov	r0, r6
   1980c:	f7fe fa4a 	bl	17ca4 <net_buf_simple_tailroom>
   19810:	4285      	cmp	r5, r0
   19812:	d321      	bcc.n	19858 <net_pkt_append+0xa8>
   19814:	4630      	mov	r0, r6
   19816:	f7fe fa45 	bl	17ca4 <net_buf_simple_tailroom>
   1981a:	fa1f fb80 	uxth.w	fp, r0
		void *data = net_buf_add(frag, count);
   1981e:	4659      	mov	r1, fp
   19820:	4630      	mov	r0, r6
		len -= count;
   19822:	eba5 050b 	sub.w	r5, r5, fp
		void *data = net_buf_add(frag, count);
   19826:	f7fe f9d1 	bl	17bcc <net_buf_simple_add>
		added_len += count;
   1982a:	445f      	add	r7, fp
		memcpy(data, value, count);
   1982c:	4641      	mov	r1, r8
   1982e:	465a      	mov	r2, fp
		len -= count;
   19830:	b2ad      	uxth	r5, r5
		memcpy(data, value, count);
   19832:	f7e7 f85a 	bl	8ea <memcpy>
		added_len += count;
   19836:	b2bf      	uxth	r7, r7
		value += count;
   19838:	44d8      	add	r8, fp
		if (len == 0) {
   1983a:	b17d      	cbz	r5, 1985c <net_pkt_append+0xac>
		frag = net_pkt_get_frag(pkt, timeout);
   1983c:	4651      	mov	r1, sl
   1983e:	4620      	mov	r0, r4
   19840:	f7ff fea4 	bl	1958c <net_pkt_get_frag>
		if (!frag) {
   19844:	4606      	mov	r6, r0
   19846:	b148      	cbz	r0, 1985c <net_pkt_append+0xac>
		net_pkt_frag_add(pkt, frag);
   19848:	4601      	mov	r1, r0
   1984a:	4620      	mov	r0, r4
   1984c:	f7ff fee4 	bl	19618 <net_pkt_frag_add>
   19850:	e7da      	b.n	19808 <net_pkt_append+0x58>
	struct net_context *ctx = NULL;
   19852:	f04f 0900 	mov.w	r9, #0
   19856:	e7d2      	b.n	197fe <net_pkt_append+0x4e>
		u16_t count = min(len, net_buf_tailroom(frag));
   19858:	46ab      	mov	fp, r5
   1985a:	e7e0      	b.n	1981e <net_pkt_append+0x6e>
	if (ctx) {
   1985c:	f1b9 0f00 	cmp.w	r9, #0
   19860:	d0ae      	beq.n	197c0 <net_pkt_append+0x10>
		pkt->data_len -= appended;
   19862:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   19864:	1bdb      	subs	r3, r3, r7
   19866:	8623      	strh	r3, [r4, #48]	; 0x30
   19868:	e7aa      	b.n	197c0 <net_pkt_append+0x10>
   1986a:	bf00      	nop
   1986c:	2000e9ec 	.word	0x2000e9ec

00019870 <net_frag_read>:
{
   19870:	b5f0      	push	{r4, r5, r6, r7, lr}
   19872:	9d05      	ldr	r5, [sp, #20]
	if (!frag) {
   19874:	b318      	cbz	r0, 198be <net_frag_read+0x4e>
		if (offset < frag->len) {
   19876:	8984      	ldrh	r4, [r0, #12]
   19878:	428c      	cmp	r4, r1
   1987a:	d907      	bls.n	1988c <net_frag_read+0x1c>
			*pos = offset;
   1987c:	8011      	strh	r1, [r2, #0]
   1987e:	2100      	movs	r1, #0
		*pos = 0;
   19880:	468e      	mov	lr, r1
	while (len-- > 0 && frag) {
   19882:	1e5c      	subs	r4, r3, #1
   19884:	b2a4      	uxth	r4, r4
   19886:	b1f3      	cbz	r3, 198c6 <net_frag_read+0x56>
   19888:	b920      	cbnz	r0, 19894 <net_frag_read+0x24>
   1988a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		offset -= frag->len;
   1988c:	1b09      	subs	r1, r1, r4
   1988e:	b289      	uxth	r1, r1
		frag = frag->frags;
   19890:	6800      	ldr	r0, [r0, #0]
   19892:	e7ef      	b.n	19874 <net_frag_read+0x4>
			frag = net_frag_read_byte(frag, *pos,
   19894:	8813      	ldrh	r3, [r2, #0]
		if (data) {
   19896:	b1bd      	cbz	r5, 198c8 <net_frag_read+0x58>
	if (data) {
   19898:	42cd      	cmn	r5, r1
		*data = frag->data[offset];
   1989a:	bf1e      	ittt	ne
   1989c:	6887      	ldrne	r7, [r0, #8]
   1989e:	5cff      	ldrbne	r7, [r7, r3]
   198a0:	546f      	strbne	r7, [r5, r1]
	*pos = offset + 1;
   198a2:	3301      	adds	r3, #1
   198a4:	b29b      	uxth	r3, r3
   198a6:	8013      	strh	r3, [r2, #0]
						  pos, data + copy++);
   198a8:	1c4e      	adds	r6, r1, #1
	if (*pos >= frag->len) {
   198aa:	8981      	ldrh	r1, [r0, #12]
   198ac:	4299      	cmp	r1, r3
						  pos, data + copy++);
   198ae:	b2b6      	uxth	r6, r6
	if (*pos >= frag->len) {
   198b0:	d813      	bhi.n	198da <net_frag_read+0x6a>
		*pos = 0;
   198b2:	f8a2 e000 	strh.w	lr, [r2]
		return frag->frags;
   198b6:	6800      	ldr	r0, [r0, #0]
						  pos, data + copy++);
   198b8:	4631      	mov	r1, r6
		if (!frag && len) {
   198ba:	b978      	cbnz	r0, 198dc <net_frag_read+0x6c>
   198bc:	b174      	cbz	r4, 198dc <net_frag_read+0x6c>
	*pos = 0xffff;
   198be:	f64f 73ff 	movw	r3, #65535	; 0xffff
   198c2:	8013      	strh	r3, [r2, #0]
	return NULL;
   198c4:	2000      	movs	r0, #0
}
   198c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*pos = offset + 1;
   198c8:	3301      	adds	r3, #1
   198ca:	b29b      	uxth	r3, r3
   198cc:	8013      	strh	r3, [r2, #0]
	if (*pos >= frag->len) {
   198ce:	8986      	ldrh	r6, [r0, #12]
   198d0:	429e      	cmp	r6, r3
   198d2:	d803      	bhi.n	198dc <net_frag_read+0x6c>
		*pos = 0;
   198d4:	8015      	strh	r5, [r2, #0]
		return frag->frags;
   198d6:	6800      	ldr	r0, [r0, #0]
   198d8:	e7ef      	b.n	198ba <net_frag_read+0x4a>
						  pos, data + copy++);
   198da:	4631      	mov	r1, r6
   198dc:	4623      	mov	r3, r4
   198de:	e7d0      	b.n	19882 <net_frag_read+0x12>

000198e0 <net_frag_read_be16>:
{
   198e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   198e2:	461c      	mov	r4, r3
	ret_frag = net_frag_read(frag, offset, pos, sizeof(u16_t), v16);
   198e4:	ab03      	add	r3, sp, #12
   198e6:	9300      	str	r3, [sp, #0]
   198e8:	2302      	movs	r3, #2
   198ea:	f7ff ffc1 	bl	19870 <net_frag_read>
	*value = v16[0] << 8 | v16[1];
   198ee:	f89d 200c 	ldrb.w	r2, [sp, #12]
   198f2:	f89d 300d 	ldrb.w	r3, [sp, #13]
   198f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   198fa:	8023      	strh	r3, [r4, #0]
}
   198fc:	b004      	add	sp, #16
   198fe:	bd10      	pop	{r4, pc}

00019900 <net_frag_read_be32>:
{
   19900:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   19902:	461c      	mov	r4, r3
	ret_frag = net_frag_read(frag, offset, pos, sizeof(u32_t), v32);
   19904:	ab03      	add	r3, sp, #12
   19906:	9300      	str	r3, [sp, #0]
   19908:	2304      	movs	r3, #4
   1990a:	f7ff ffb1 	bl	19870 <net_frag_read>
   1990e:	9b03      	ldr	r3, [sp, #12]
   19910:	ba1b      	rev	r3, r3
	*value = v32[0] << 24 | v32[1] << 16 | v32[2] << 8 | v32[3];
   19912:	6023      	str	r3, [r4, #0]
}
   19914:	b004      	add	sp, #16
   19916:	bd10      	pop	{r4, pc}

00019918 <net_pkt_write>:

struct net_buf *net_pkt_write(struct net_pkt *pkt, struct net_buf *frag,
			      u16_t offset, u16_t *pos,
			      u16_t len, u8_t *data,
			      s32_t timeout)
{
   19918:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1991c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   19920:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
   19924:	4615      	mov	r5, r2
   19926:	469a      	mov	sl, r3
	if (!pkt) {
   19928:	4607      	mov	r7, r0
   1992a:	2800      	cmp	r0, #0
   1992c:	d077      	beq.n	19a1e <net_pkt_write+0x106>
   1992e:	460c      	mov	r4, r1
	if (data) {
   19930:	b934      	cbnz	r4, 19940 <net_pkt_write+0x28>
   19932:	990c      	ldr	r1, [sp, #48]	; 0x30
   19934:	4638      	mov	r0, r7
   19936:	f7ff fe7d 	bl	19634 <check_and_create_data.part.18>
		if (!frag) {
   1993a:	4604      	mov	r4, r0
   1993c:	2800      	cmp	r0, #0
   1993e:	d06e      	beq.n	19a1e <net_pkt_write+0x106>
		if (offset < frag->len) {
   19940:	89a3      	ldrh	r3, [r4, #12]
   19942:	42ab      	cmp	r3, r5
   19944:	d820      	bhi.n	19988 <net_pkt_write+0x70>
		if (offset == frag->len) {
   19946:	d10f      	bne.n	19968 <net_pkt_write+0x50>
			if (net_buf_tailroom(frag)) {
   19948:	f104 0008 	add.w	r0, r4, #8
   1994c:	f7fe f9aa 	bl	17ca4 <net_buf_simple_tailroom>
   19950:	b9d0      	cbnz	r0, 19988 <net_pkt_write+0x70>
				return check_and_create_data(pkt,
   19952:	6824      	ldr	r4, [r4, #0]
	if (data) {
   19954:	b934      	cbnz	r4, 19964 <net_pkt_write+0x4c>
   19956:	990c      	ldr	r1, [sp, #48]	; 0x30
   19958:	4638      	mov	r0, r7
   1995a:	f7ff fe6b 	bl	19634 <check_and_create_data.part.18>
   1995e:	4604      	mov	r4, r0
		NET_ERR("Invalid packet");
		goto error;
	}

	frag = adjust_write_offset(pkt, frag, offset, &offset, timeout);
	if (!frag) {
   19960:	2800      	cmp	r0, #0
   19962:	d05c      	beq.n	19a1e <net_pkt_write+0x106>
   19964:	2500      	movs	r5, #0
   19966:	e00f      	b.n	19988 <net_pkt_write+0x70>
		if (offset > frag->len) {
   19968:	d2e2      	bcs.n	19930 <net_pkt_write+0x18>
			tailroom = net_buf_tailroom(frag);
   1996a:	f104 0b08 	add.w	fp, r4, #8
   1996e:	4658      	mov	r0, fp
			offset -= frag->len;
   19970:	1aed      	subs	r5, r5, r3
			tailroom = net_buf_tailroom(frag);
   19972:	f7fe f997 	bl	17ca4 <net_buf_simple_tailroom>
			offset -= frag->len;
   19976:	b2ad      	uxth	r5, r5
			tailroom = net_buf_tailroom(frag);
   19978:	b286      	uxth	r6, r0
			if (offset < tailroom) {
   1997a:	42b5      	cmp	r5, r6
   1997c:	d22a      	bcs.n	199d4 <net_pkt_write+0xbc>
				net_buf_add(frag, offset);
   1997e:	4629      	mov	r1, r5
   19980:	4658      	mov	r0, fp
   19982:	f7fe f923 	bl	17bcc <net_buf_simple_add>
				*pos = frag->len;
   19986:	89a5      	ldrh	r5, [r4, #12]
		NET_DBG("Failed to adjust offset (%u)", offset);
		goto error;
	}

	do {
		u16_t space = frag->size - net_buf_headroom(frag) - offset;
   19988:	89e6      	ldrh	r6, [r4, #14]
   1998a:	f104 0b08 	add.w	fp, r4, #8
   1998e:	4658      	mov	r0, fp
   19990:	f7fe f984 	bl	17c9c <net_buf_simple_headroom>
   19994:	1a36      	subs	r6, r6, r0
   19996:	1b76      	subs	r6, r6, r5
		u16_t count = min(len, space);
   19998:	b2b6      	uxth	r6, r6
   1999a:	4546      	cmp	r6, r8
		int size_to_add;

		memcpy(frag->data + offset, data, count);
   1999c:	68a0      	ldr	r0, [r4, #8]
		u16_t count = min(len, space);
   1999e:	bf28      	it	cs
   199a0:	4646      	movcs	r6, r8
		memcpy(frag->data + offset, data, count);
   199a2:	4649      	mov	r1, r9
   199a4:	4428      	add	r0, r5
   199a6:	4632      	mov	r2, r6
   199a8:	f7e6 ff9f 	bl	8ea <memcpy>

		/* If we are overwriting on already available space then need
		 * not to update the length, otherwise increase it.
		 */
		size_to_add = offset + count - frag->len;
   199ac:	89a1      	ldrh	r1, [r4, #12]
   199ae:	4435      	add	r5, r6
   199b0:	1a69      	subs	r1, r5, r1
		if (size_to_add > 0) {
   199b2:	2900      	cmp	r1, #0
   199b4:	dd02      	ble.n	199bc <net_pkt_write+0xa4>
			net_buf_add(frag, size_to_add);
   199b6:	4658      	mov	r0, fp
   199b8:	f7fe f908 	bl	17bcc <net_buf_simple_add>
		}

		len -= count;
   199bc:	eba8 0806 	sub.w	r8, r8, r6
   199c0:	fa1f f888 	uxth.w	r8, r8
		if (len == 0) {
   199c4:	f1b8 0f00 	cmp.w	r8, #0
   199c8:	d11a      	bne.n	19a00 <net_pkt_write+0xe8>
			*pos = offset + count;
   199ca:	f8aa 5000 	strh.w	r5, [sl]

error:
	*pos = 0xffff;

	return NULL;
}
   199ce:	4620      	mov	r0, r4
   199d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (offset == tailroom) {
   199d4:	d104      	bne.n	199e0 <net_pkt_write+0xc8>
				net_buf_add(frag, tailroom);
   199d6:	b281      	uxth	r1, r0
   199d8:	4658      	mov	r0, fp
   199da:	f7fe f8f7 	bl	17bcc <net_buf_simple_add>
   199de:	e7b8      	b.n	19952 <net_pkt_write+0x3a>
			if (offset > tailroom) {
   199e0:	d9a6      	bls.n	19930 <net_pkt_write+0x18>
				net_buf_add(frag, tailroom);
   199e2:	b281      	uxth	r1, r0
   199e4:	4658      	mov	r0, fp
   199e6:	f7fe f8f1 	bl	17bcc <net_buf_simple_add>
				frag = check_and_create_data(pkt,
   199ea:	6824      	ldr	r4, [r4, #0]
				offset -= tailroom;
   199ec:	1bad      	subs	r5, r5, r6
   199ee:	b2ad      	uxth	r5, r5
	if (data) {
   199f0:	2c00      	cmp	r4, #0
   199f2:	d19d      	bne.n	19930 <net_pkt_write+0x18>
   199f4:	990c      	ldr	r1, [sp, #48]	; 0x30
   199f6:	4638      	mov	r0, r7
   199f8:	f7ff fe1c 	bl	19634 <check_and_create_data.part.18>
   199fc:	4604      	mov	r4, r0
   199fe:	e797      	b.n	19930 <net_pkt_write+0x18>
		frag = frag->frags;
   19a00:	6824      	ldr	r4, [r4, #0]
		data += count;
   19a02:	44b1      	add	r9, r6
		if (!frag) {
   19a04:	2c00      	cmp	r4, #0
   19a06:	d1ad      	bne.n	19964 <net_pkt_write+0x4c>
			frag = net_pkt_get_frag(pkt, timeout);
   19a08:	990c      	ldr	r1, [sp, #48]	; 0x30
   19a0a:	4638      	mov	r0, r7
   19a0c:	f7ff fdbe 	bl	1958c <net_pkt_get_frag>
			if (!frag) {
   19a10:	4604      	mov	r4, r0
   19a12:	b120      	cbz	r0, 19a1e <net_pkt_write+0x106>
			net_pkt_frag_add(pkt, frag);
   19a14:	4601      	mov	r1, r0
   19a16:	4638      	mov	r0, r7
   19a18:	f7ff fdfe 	bl	19618 <net_pkt_frag_add>
   19a1c:	e7a2      	b.n	19964 <net_pkt_write+0x4c>
	*pos = 0xffff;
   19a1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19a22:	f8aa 3000 	strh.w	r3, [sl]
	return NULL;
   19a26:	2400      	movs	r4, #0
   19a28:	e7d1      	b.n	199ce <net_pkt_write+0xb6>

00019a2a <net_frag_get_pos>:
#endif /* CONFIG_NET_DEBUG_NET_PKT */

struct net_buf *net_frag_get_pos(struct net_pkt *pkt,
				 u16_t offset,
				 u16_t *pos)
{
   19a2a:	b507      	push	{r0, r1, r2, lr}
 */
static inline struct net_buf *net_frag_skip(struct net_buf *frag,
					    u16_t offset,
					    u16_t *pos, u16_t len)
{
	return net_frag_read(frag, offset, pos, len, NULL);
   19a2c:	2300      	movs	r3, #0
   19a2e:	9300      	str	r3, [sp, #0]
   19a30:	6880      	ldr	r0, [r0, #8]
   19a32:	f7ff ff1d 	bl	19870 <net_frag_read>
	if (!frag) {
		return NULL;
	}

	return frag;
}
   19a36:	b003      	add	sp, #12
   19a38:	f85d fb04 	ldr.w	pc, [sp], #4

00019a3c <net_pkt_icmp_data>:
#else
#define too_short_msg(...)
#endif

struct net_icmp_hdr *net_pkt_icmp_data(struct net_pkt *pkt)
{
   19a3c:	b507      	push	{r0, r1, r2, lr}
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   19a3e:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
				net_pkt_ipv6_ext_len(pkt),
   19a42:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
	frag = net_frag_get_pos(pkt,
   19a46:	f10d 0206 	add.w	r2, sp, #6
   19a4a:	4419      	add	r1, r3
   19a4c:	f7ff ffed 	bl	19a2a <net_frag_get_pos>
				&offset);
	if (!frag) {
   19a50:	b118      	cbz	r0, 19a5a <net_pkt_icmp_data+0x1e>
		/* We tried to read past the end of the data */
		too_short_msg("icmp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_icmp_hdr *)(frag->data + offset);
   19a52:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   19a56:	6880      	ldr	r0, [r0, #8]
   19a58:	4418      	add	r0, r3
}
   19a5a:	b003      	add	sp, #12
   19a5c:	f85d fb04 	ldr.w	pc, [sp], #4

00019a60 <net_pkt_icmp_opt_data>:

u8_t *net_pkt_icmp_opt_data(struct net_pkt *pkt, size_t opt_len)
{
   19a60:	b507      	push	{r0, r1, r2, lr}
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
				net_pkt_ipv6_ext_len(pkt) + opt_len,
   19a62:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
				net_pkt_ip_hdr_len(pkt) +
   19a66:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   19a6a:	4413      	add	r3, r2
	frag = net_frag_get_pos(pkt,
   19a6c:	4419      	add	r1, r3
   19a6e:	f10d 0206 	add.w	r2, sp, #6
   19a72:	b289      	uxth	r1, r1
   19a74:	f7ff ffd9 	bl	19a2a <net_frag_get_pos>
				&offset);
	if (!frag) {
   19a78:	b118      	cbz	r0, 19a82 <net_pkt_icmp_opt_data+0x22>
		/* We tried to read past the end of the data */
		too_short_msg("icmp opt data", pkt, offset, opt_len);
		return NULL;
	}

	return frag->data + offset;
   19a7a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   19a7e:	6880      	ldr	r0, [r0, #8]
   19a80:	4418      	add	r0, r3
}
   19a82:	b003      	add	sp, #12
   19a84:	f85d fb04 	ldr.w	pc, [sp], #4

00019a88 <net_pkt_udp_data>:

struct net_udp_hdr *net_pkt_udp_data(struct net_pkt *pkt)
{
   19a88:	b507      	push	{r0, r1, r2, lr}
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   19a8a:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
				net_pkt_ipv6_ext_len(pkt),
   19a8e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
	frag = net_frag_get_pos(pkt,
   19a92:	f10d 0206 	add.w	r2, sp, #6
   19a96:	4419      	add	r1, r3
   19a98:	f7ff ffc7 	bl	19a2a <net_frag_get_pos>
				&offset);
	if (!frag) {
   19a9c:	b118      	cbz	r0, 19aa6 <net_pkt_udp_data+0x1e>
		/* We tried to read past the end of the data */
		too_short_msg("udp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_udp_hdr *)(frag->data + offset);
   19a9e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   19aa2:	6880      	ldr	r0, [r0, #8]
   19aa4:	4418      	add	r0, r3
}
   19aa6:	b003      	add	sp, #12
   19aa8:	f85d fb04 	ldr.w	pc, [sp], #4

00019aac <net_pkt_init>:

	return clone;
}

void net_pkt_init(void)
{
   19aac:	4770      	bx	lr

00019aae <calc_chksum>:

	return 0;
}

static u16_t calc_chksum(u16_t sum, const u8_t *ptr, u16_t len)
{
   19aae:	b510      	push	{r4, lr}
	u16_t tmp;
	const u8_t *end;

	end = ptr + len - 1;
   19ab0:	3a01      	subs	r2, #1
   19ab2:	440a      	add	r2, r1

	while (ptr < end) {
   19ab4:	4291      	cmp	r1, r2
   19ab6:	d309      	bcc.n	19acc <calc_chksum+0x1e>
			sum++;
		}
		ptr += 2;
	}

	if (ptr == end) {
   19ab8:	d107      	bne.n	19aca <calc_chksum+0x1c>
		tmp = ptr[0] << 8;
   19aba:	780b      	ldrb	r3, [r1, #0]
   19abc:	021b      	lsls	r3, r3, #8
		sum += tmp;
   19abe:	4418      	add	r0, r3
   19ac0:	b280      	uxth	r0, r0
		if (sum < tmp) {
   19ac2:	4283      	cmp	r3, r0
			sum++;
   19ac4:	bf84      	itt	hi
   19ac6:	3001      	addhi	r0, #1
   19ac8:	b280      	uxthhi	r0, r0
		}
	}

	return sum;
}
   19aca:	bd10      	pop	{r4, pc}
		tmp = (ptr[0] << 8) + ptr[1];
   19acc:	780c      	ldrb	r4, [r1, #0]
   19ace:	784b      	ldrb	r3, [r1, #1]
   19ad0:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   19ad4:	b29b      	uxth	r3, r3
		sum += tmp;
   19ad6:	4418      	add	r0, r3
   19ad8:	b280      	uxth	r0, r0
		if (sum < tmp) {
   19ada:	4283      	cmp	r3, r0
			sum++;
   19adc:	bf84      	itt	hi
   19ade:	3001      	addhi	r0, #1
   19ae0:	b280      	uxthhi	r0, r0
		ptr += 2;
   19ae2:	3102      	adds	r1, #2
   19ae4:	e7e6      	b.n	19ab4 <calc_chksum+0x6>

00019ae6 <net_addr_pton.part.4>:
int net_addr_pton(sa_family_t family, const char *src,
   19ae6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19aea:	460f      	mov	r7, r1
		int expected_groups = strchr(src, '.') ? 6 : 8;
   19aec:	212e      	movs	r1, #46	; 0x2e
int net_addr_pton(sa_family_t family, const char *src,
   19aee:	4604      	mov	r4, r0
		int expected_groups = strchr(src, '.') ? 6 : 8;
   19af0:	f7e6 fe81 	bl	7f6 <strchr>
		if (*src == ':') {
   19af4:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   19af6:	2800      	cmp	r0, #0
   19af8:	bf14      	ite	ne
   19afa:	2606      	movne	r6, #6
   19afc:	2608      	moveq	r6, #8
		if (*src == ':') {
   19afe:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   19b00:	bf08      	it	eq
   19b02:	3401      	addeq	r4, #1
		len = strlen(src);
   19b04:	4620      	mov	r0, r4
   19b06:	f7e6 fe92 	bl	82e <strlen>
   19b0a:	4623      	mov	r3, r4
		for (i = 0; i < len; i++) {
   19b0c:	1b1a      	subs	r2, r3, r4
   19b0e:	4290      	cmp	r0, r2
   19b10:	dc19      	bgt.n	19b46 <net_addr_pton.part.4+0x60>
   19b12:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   19b14:	46a8      	mov	r8, r5
			if (!src || *src == '\0') {
   19b16:	b31c      	cbz	r4, 19b60 <net_addr_pton.part.4+0x7a>
   19b18:	7823      	ldrb	r3, [r4, #0]
   19b1a:	b30b      	cbz	r3, 19b60 <net_addr_pton.part.4+0x7a>
			if (*src != ':') {
   19b1c:	2b3a      	cmp	r3, #58	; 0x3a
   19b1e:	ea4f 0345 	mov.w	r3, r5, lsl #1
   19b22:	d121      	bne.n	19b68 <net_addr_pton.part.4+0x82>
   19b24:	443b      	add	r3, r7
			for (; i < expected_groups; i++) {
   19b26:	42ae      	cmp	r6, r5
   19b28:	dc3c      	bgt.n	19ba4 <net_addr_pton.part.4+0xbe>
			tmp = strrchr(src, ':');
   19b2a:	213a      	movs	r1, #58	; 0x3a
   19b2c:	4620      	mov	r0, r4
   19b2e:	f7e6 fe71 	bl	814 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   19b32:	42a0      	cmp	r0, r4
   19b34:	d14c      	bne.n	19bd0 <net_addr_pton.part.4+0xea>
   19b36:	2e06      	cmp	r6, #6
   19b38:	d13b      	bne.n	19bb2 <net_addr_pton.part.4+0xcc>
				src++;
   19b3a:	1c44      	adds	r4, r0, #1
		if (expected_groups == 6) {
   19b3c:	2e06      	cmp	r6, #6
   19b3e:	d04c      	beq.n	19bda <net_addr_pton.part.4+0xf4>
	return 0;
   19b40:	2000      	movs	r0, #0
   19b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (!(src[i] >= '0' && src[i] <= '9') &&
   19b46:	f813 2b01 	ldrb.w	r2, [r3], #1
   19b4a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   19b4e:	290a      	cmp	r1, #10
   19b50:	d9dc      	bls.n	19b0c <net_addr_pton.part.4+0x26>
   19b52:	f022 0120 	bic.w	r1, r2, #32
   19b56:	3941      	subs	r1, #65	; 0x41
   19b58:	2905      	cmp	r1, #5
   19b5a:	d9d7      	bls.n	19b0c <net_addr_pton.part.4+0x26>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   19b5c:	2a2e      	cmp	r2, #46	; 0x2e
   19b5e:	d0d5      	beq.n	19b0c <net_addr_pton.part.4+0x26>
				return -EINVAL;
   19b60:	f06f 0015 	mvn.w	r0, #21
   19b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   19b68:	2210      	movs	r2, #16
   19b6a:	2100      	movs	r1, #0
   19b6c:	4620      	mov	r0, r4
   19b6e:	f7e6 fd17 	bl	5a0 <strtol>
   19b72:	2100      	movs	r1, #0
   19b74:	4681      	mov	r9, r0
   19b76:	2210      	movs	r2, #16
   19b78:	4620      	mov	r0, r4
   19b7a:	f7e6 fd11 	bl	5a0 <strtol>
   19b7e:	f3c9 2907 	ubfx	r9, r9, #8, #8
   19b82:	ea49 2900 	orr.w	r9, r9, r0, lsl #8
   19b86:	f827 9015 	strh.w	r9, [r7, r5, lsl #1]
				src = strchr(src, ':');
   19b8a:	213a      	movs	r1, #58	; 0x3a
   19b8c:	4620      	mov	r0, r4
   19b8e:	f7e6 fe32 	bl	7f6 <strchr>
				if (!src && i < expected_groups - 1) {
   19b92:	b910      	cbnz	r0, 19b9a <net_addr_pton.part.4+0xb4>
   19b94:	1e73      	subs	r3, r6, #1
   19b96:	42ab      	cmp	r3, r5
   19b98:	dce2      	bgt.n	19b60 <net_addr_pton.part.4+0x7a>
				src++;
   19b9a:	1c44      	adds	r4, r0, #1
		for (i = 0; i < expected_groups; i++) {
   19b9c:	3501      	adds	r5, #1
   19b9e:	42ae      	cmp	r6, r5
   19ba0:	dcb9      	bgt.n	19b16 <net_addr_pton.part.4+0x30>
   19ba2:	e7cb      	b.n	19b3c <net_addr_pton.part.4+0x56>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   19ba4:	f883 8000 	strb.w	r8, [r3]
   19ba8:	f883 8001 	strb.w	r8, [r3, #1]
			for (; i < expected_groups; i++) {
   19bac:	3501      	adds	r5, #1
   19bae:	3302      	adds	r3, #2
   19bb0:	e7b9      	b.n	19b26 <net_addr_pton.part.4+0x40>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   19bb2:	7863      	ldrb	r3, [r4, #1]
   19bb4:	2b00      	cmp	r3, #0
   19bb6:	d0c0      	beq.n	19b3a <net_addr_pton.part.4+0x54>
			i = expected_groups - 1;
   19bb8:	1e75      	subs	r5, r6, #1
   19bba:	3001      	adds	r0, #1
				if (*tmp == ':') {
   19bbc:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   19bc0:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   19bc2:	bf08      	it	eq
   19bc4:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
			} while (tmp-- != src);
   19bc8:	42a0      	cmp	r0, r4
   19bca:	d1f7      	bne.n	19bbc <net_addr_pton.part.4+0xd6>
			src++;
   19bcc:	3401      	adds	r4, #1
   19bce:	e7e5      	b.n	19b9c <net_addr_pton.part.4+0xb6>
			if (expected_groups == 6) {
   19bd0:	2e06      	cmp	r6, #6
				tmp--;
   19bd2:	bf08      	it	eq
   19bd4:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
   19bd8:	e7ee      	b.n	19bb8 <net_addr_pton.part.4+0xd2>
   19bda:	370c      	adds	r7, #12
		if (expected_groups == 6) {
   19bdc:	2500      	movs	r5, #0
				if (!src || !*src) {
   19bde:	2c00      	cmp	r4, #0
   19be0:	d0be      	beq.n	19b60 <net_addr_pton.part.4+0x7a>
   19be2:	7823      	ldrb	r3, [r4, #0]
   19be4:	2b00      	cmp	r3, #0
   19be6:	d0bb      	beq.n	19b60 <net_addr_pton.part.4+0x7a>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   19be8:	2100      	movs	r1, #0
   19bea:	220a      	movs	r2, #10
   19bec:	4620      	mov	r0, r4
   19bee:	f7e6 fcd7 	bl	5a0 <strtol>
				src = strchr(src, '.');
   19bf2:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   19bf4:	f807 0b01 	strb.w	r0, [r7], #1
				src = strchr(src, '.');
   19bf8:	4620      	mov	r0, r4
   19bfa:	f7e6 fdfc 	bl	7f6 <strchr>
				if (!src && i < 3) {
   19bfe:	b908      	cbnz	r0, 19c04 <net_addr_pton.part.4+0x11e>
   19c00:	2d03      	cmp	r5, #3
   19c02:	d1ad      	bne.n	19b60 <net_addr_pton.part.4+0x7a>
			for (i = 0; i < 4; i++) {
   19c04:	3501      	adds	r5, #1
   19c06:	2d04      	cmp	r5, #4
				src++;
   19c08:	f100 0401 	add.w	r4, r0, #1
			for (i = 0; i < 4; i++) {
   19c0c:	d1e7      	bne.n	19bde <net_addr_pton.part.4+0xf8>
   19c0e:	e797      	b.n	19b40 <net_addr_pton.part.4+0x5a>

00019c10 <net_addr_pton>:
	if (family == AF_INET) {
   19c10:	2802      	cmp	r0, #2
{
   19c12:	b573      	push	{r0, r1, r4, r5, r6, lr}
   19c14:	460c      	mov	r4, r1
   19c16:	4615      	mov	r5, r2
	if (family == AF_INET) {
   19c18:	d127      	bne.n	19c6a <net_addr_pton+0x5a>
		len = strlen(src);
   19c1a:	4608      	mov	r0, r1
   19c1c:	f7e6 fe07 	bl	82e <strlen>
   19c20:	4623      	mov	r3, r4
   19c22:	4420      	add	r0, r4
		for (i = 0; i < len; i++) {
   19c24:	4283      	cmp	r3, r0
   19c26:	d114      	bne.n	19c52 <net_addr_pton+0x42>
		memset(addr, 0, sizeof(struct in_addr));
   19c28:	4628      	mov	r0, r5
   19c2a:	2204      	movs	r2, #4
   19c2c:	2100      	movs	r1, #0
   19c2e:	f7e6 fe88 	bl	942 <memset>
   19c32:	1e6e      	subs	r6, r5, #1
   19c34:	3503      	adds	r5, #3
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   19c36:	4620      	mov	r0, r4
   19c38:	220a      	movs	r2, #10
   19c3a:	a901      	add	r1, sp, #4
   19c3c:	f7e6 fcb0 	bl	5a0 <strtol>
   19c40:	f806 0f01 	strb.w	r0, [r6, #1]!
			src = ++endptr;
   19c44:	9c01      	ldr	r4, [sp, #4]
		for (i = 0; i < sizeof(struct in_addr); i++) {
   19c46:	42b5      	cmp	r5, r6
			src = ++endptr;
   19c48:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   19c4c:	d1f3      	bne.n	19c36 <net_addr_pton+0x26>
	return 0;
   19c4e:	2000      	movs	r0, #0
   19c50:	e009      	b.n	19c66 <net_addr_pton+0x56>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   19c52:	f813 2b01 	ldrb.w	r2, [r3], #1
   19c56:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   19c5a:	2909      	cmp	r1, #9
   19c5c:	d9e2      	bls.n	19c24 <net_addr_pton+0x14>
   19c5e:	2a2e      	cmp	r2, #46	; 0x2e
   19c60:	d0e0      	beq.n	19c24 <net_addr_pton+0x14>
				return -EINVAL;
   19c62:	f06f 0015 	mvn.w	r0, #21
}
   19c66:	b002      	add	sp, #8
   19c68:	bd70      	pop	{r4, r5, r6, pc}
	} else if (family == AF_INET6) {
   19c6a:	280a      	cmp	r0, #10
   19c6c:	d1f9      	bne.n	19c62 <net_addr_pton+0x52>
   19c6e:	4611      	mov	r1, r2
   19c70:	4620      	mov	r0, r4
   19c72:	f7ff ff38 	bl	19ae6 <net_addr_pton.part.4>
   19c76:	e7f6      	b.n	19c66 <net_addr_pton+0x56>

00019c78 <net_calc_chksum>:

	return sum;
}

u16_t net_calc_chksum(struct net_pkt *pkt, u8_t proto)
{
   19c78:	b5f0      	push	{r4, r5, r6, r7, lr}
	return pkt->family;
   19c7a:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
	u16_t upper_layer_len;
	u16_t sum = 0;

	switch (net_pkt_family(pkt)) {
   19c7e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   19c82:	2b0a      	cmp	r3, #10
{
   19c84:	b085      	sub	sp, #20
   19c86:	4605      	mov	r5, r0
	switch (net_pkt_family(pkt)) {
   19c88:	d144      	bne.n	19d14 <net_calc_chksum+0x9c>
   19c8a:	6886      	ldr	r6, [r0, #8]
		break;
#endif
#if defined(CONFIG_NET_IPV6)
	case AF_INET6:
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
			NET_IPV6_HDR(pkt)->len[1] - net_pkt_ipv6_ext_len(pkt);
   19c8c:	f890 7039 	ldrb.w	r7, [r0, #57]	; 0x39
	return pkt->frags->data;
   19c90:	68b3      	ldr	r3, [r6, #8]
   19c92:	7958      	ldrb	r0, [r3, #5]
		sum = calc_chksum(upper_layer_len + proto,
   19c94:	1bc9      	subs	r1, r1, r7
   19c96:	4408      	add	r0, r1
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   19c98:	7919      	ldrb	r1, [r3, #4]
		sum = calc_chksum(upper_layer_len + proto,
   19c9a:	eb00 2001 	add.w	r0, r0, r1, lsl #8
   19c9e:	2220      	movs	r2, #32
   19ca0:	f103 0108 	add.w	r1, r3, #8
   19ca4:	b280      	uxth	r0, r0
   19ca6:	f7ff ff02 	bl	19aae <calc_chksum>
	u16_t proto_len = net_pkt_ip_hdr_len(pkt) +
   19caa:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
	return net_frag_read(frag, offset, pos, len, NULL);
   19cae:	2300      	movs	r3, #0
		sum = calc_chksum(upper_layer_len + proto,
   19cb0:	4604      	mov	r4, r0
   19cb2:	9300      	str	r3, [sp, #0]
   19cb4:	4630      	mov	r0, r6
   19cb6:	f10d 020e 	add.w	r2, sp, #14
   19cba:	4439      	add	r1, r7
   19cbc:	f7ff fdd8 	bl	19870 <net_frag_read>
	if (!frag) {
   19cc0:	4606      	mov	r6, r0
   19cc2:	b348      	cbz	r0, 19d18 <net_calc_chksum+0xa0>
	ptr = frag->data + offset;
   19cc4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	len = frag->len - offset;
   19cc8:	8982      	ldrh	r2, [r0, #12]
	ptr = frag->data + offset;
   19cca:	6881      	ldr	r1, [r0, #8]
	len = frag->len - offset;
   19ccc:	1ad2      	subs	r2, r2, r3
	ptr = frag->data + offset;
   19cce:	4419      	add	r1, r3
	len = frag->len - offset;
   19cd0:	b212      	sxth	r2, r2
		sum = calc_chksum(sum, ptr, len);
   19cd2:	b295      	uxth	r5, r2
   19cd4:	4620      	mov	r0, r4
   19cd6:	462a      	mov	r2, r5
   19cd8:	f7ff fee9 	bl	19aae <calc_chksum>
		frag = frag->frags;
   19cdc:	6836      	ldr	r6, [r6, #0]
		sum = calc_chksum(sum, ptr, len);
   19cde:	4604      	mov	r4, r0
		if (!frag) {
   19ce0:	b926      	cbnz	r6, 19cec <net_calc_chksum+0x74>
		return 0;
	}

	sum = calc_chksum_pkt(sum, pkt, upper_layer_len);

	sum = (sum == 0) ? 0xffff : htons(sum);
   19ce2:	b1c8      	cbz	r0, 19d18 <net_calc_chksum+0xa0>
   19ce4:	ba40      	rev16	r0, r0
   19ce6:	b280      	uxth	r0, r0

	return sum;
}
   19ce8:	b005      	add	sp, #20
   19cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (len % 2) {
   19cec:	07eb      	lsls	r3, r5, #31
		ptr = frag->data;
   19cee:	68b1      	ldr	r1, [r6, #8]
		if (len % 2) {
   19cf0:	d50d      	bpl.n	19d0e <net_calc_chksum+0x96>
			u16_t tmp = *ptr;
   19cf2:	780b      	ldrb	r3, [r1, #0]
			len = frag->len - 1;
   19cf4:	89b2      	ldrh	r2, [r6, #12]
			sum += tmp;
   19cf6:	441c      	add	r4, r3
   19cf8:	b2a4      	uxth	r4, r4
			if (sum < tmp) {
   19cfa:	42a3      	cmp	r3, r4
				sum++;
   19cfc:	bf88      	it	hi
   19cfe:	3401      	addhi	r4, #1
			len = frag->len - 1;
   19d00:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
				sum++;
   19d04:	bf88      	it	hi
   19d06:	b2a4      	uxthhi	r4, r4
			len = frag->len - 1;
   19d08:	b212      	sxth	r2, r2
			ptr++;
   19d0a:	3101      	adds	r1, #1
   19d0c:	e7e1      	b.n	19cd2 <net_calc_chksum+0x5a>
			len = frag->len;
   19d0e:	f9b6 200c 	ldrsh.w	r2, [r6, #12]
   19d12:	e7de      	b.n	19cd2 <net_calc_chksum+0x5a>
		return 0;
   19d14:	2000      	movs	r0, #0
   19d16:	e7e7      	b.n	19ce8 <net_calc_chksum+0x70>
	sum = (sum == 0) ? 0xffff : htons(sum);
   19d18:	f64f 70ff 	movw	r0, #65535	; 0xffff
   19d1c:	e7e4      	b.n	19ce8 <net_calc_chksum+0x70>

00019d1e <net_header_fits>:
 * memory area. The start of the said area must be inside the first
 * fragment. This helper is used when checking whether various protocol
 * headers are split between two fragments.
 */
bool net_header_fits(struct net_pkt *pkt, u8_t *hdr, size_t hdr_size)
{
   19d1e:	b510      	push	{r4, lr}
	if (hdr && hdr > pkt->frags->data &&
   19d20:	b159      	cbz	r1, 19d3a <net_header_fits+0x1c>
   19d22:	6884      	ldr	r4, [r0, #8]
   19d24:	68a3      	ldr	r3, [r4, #8]
   19d26:	4299      	cmp	r1, r3
   19d28:	d907      	bls.n	19d3a <net_header_fits+0x1c>
	    (hdr + hdr_size) <= (pkt->frags->data + pkt->frags->len)) {
   19d2a:	89a0      	ldrh	r0, [r4, #12]
   19d2c:	4411      	add	r1, r2
   19d2e:	4418      	add	r0, r3
	if (hdr && hdr > pkt->frags->data &&
   19d30:	4281      	cmp	r1, r0
   19d32:	bf8c      	ite	hi
   19d34:	2000      	movhi	r0, #0
   19d36:	2001      	movls	r0, #1
   19d38:	bd10      	pop	{r4, pc}
		return true;
	}

	return false;
   19d3a:	2000      	movs	r0, #0
}
   19d3c:	bd10      	pop	{r4, pc}
	...

00019d40 <net_ipaddr_parse>:
	return true;
}
#endif /* CONFIG_NET_IPV4 */

bool net_ipaddr_parse(const char *str, size_t str_len, struct sockaddr *addr)
{
   19d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d44:	460d      	mov	r5, r1
   19d46:	b08f      	sub	sp, #60	; 0x3c
   19d48:	4617      	mov	r7, r2
	int i, count;

	if (!str || str_len == 0) {
   19d4a:	4604      	mov	r4, r0
   19d4c:	2800      	cmp	r0, #0
   19d4e:	f000 8093 	beq.w	19e78 <net_ipaddr_parse+0x138>
   19d52:	2900      	cmp	r1, #0
   19d54:	f000 8090 	beq.w	19e78 <net_ipaddr_parse+0x138>
		return false;
	}

	/* We cannot accept empty string here */
	if (*str == '\0') {
   19d58:	7800      	ldrb	r0, [r0, #0]
   19d5a:	b358      	cbz	r0, 19db4 <net_ipaddr_parse+0x74>
		return false;
	}

	if (*str == '[') {
   19d5c:	285b      	cmp	r0, #91	; 0x5b
   19d5e:	d02c      	beq.n	19dba <net_ipaddr_parse+0x7a>
   19d60:	1e62      	subs	r2, r4, #1
   19d62:	2300      	movs	r3, #0
#else
		return false;
#endif /* CONFIG_NET_IPV6 */
	}

	for (count = i = 0; str[i] && i < str_len; i++) {
   19d64:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   19d68:	b111      	cbz	r1, 19d70 <net_ipaddr_parse+0x30>
   19d6a:	1b10      	subs	r0, r2, r4
   19d6c:	4285      	cmp	r5, r0
   19d6e:	d87f      	bhi.n	19e70 <net_ipaddr_parse+0x130>
		if (str[i] == ':') {
			count++;
		}
	}

	if (count == 1) {
   19d70:	2b01      	cmp	r3, #1
   19d72:	f000 8081 	beq.w	19e78 <net_ipaddr_parse+0x138>
	len = min(INET6_ADDRSTRLEN, str_len);
   19d76:	2d2e      	cmp	r5, #46	; 0x2e
   19d78:	4628      	mov	r0, r5
	for (i = 0; i < len; i++) {
   19d7a:	f04f 0600 	mov.w	r6, #0
	len = min(INET6_ADDRSTRLEN, str_len);
   19d7e:	bf28      	it	cs
   19d80:	202e      	movcs	r0, #46	; 0x2e
		if (!str[i]) {
   19d82:	5da3      	ldrb	r3, [r4, r6]
   19d84:	b11b      	cbz	r3, 19d8e <net_ipaddr_parse+0x4e>
	for (i = 0; i < len; i++) {
   19d86:	3601      	adds	r6, #1
   19d88:	42b0      	cmp	r0, r6
   19d8a:	dcfa      	bgt.n	19d82 <net_ipaddr_parse+0x42>
   19d8c:	4606      	mov	r6, r0
		memcpy(ipaddr, str, end);
   19d8e:	4632      	mov	r2, r6
   19d90:	4621      	mov	r1, r4
   19d92:	a802      	add	r0, sp, #8
   19d94:	f7e6 fda9 	bl	8ea <memcpy>
	ipaddr[end] = '\0';
   19d98:	ab0e      	add	r3, sp, #56	; 0x38
   19d9a:	441e      	add	r6, r3
   19d9c:	2400      	movs	r4, #0
   19d9e:	1d39      	adds	r1, r7, #4
   19da0:	a802      	add	r0, sp, #8
   19da2:	f806 4c30 	strb.w	r4, [r6, #-48]
   19da6:	f7ff fe9e 	bl	19ae6 <net_addr_pton.part.4>
	if (ret < 0) {
   19daa:	42a0      	cmp	r0, r4
   19dac:	db64      	blt.n	19e78 <net_ipaddr_parse+0x138>
	net_sin6(addr)->sin6_family = AF_INET6;
   19dae:	230a      	movs	r3, #10
   19db0:	803b      	strh	r3, [r7, #0]
	return true;
   19db2:	2001      	movs	r0, #1
#endif

#if defined(CONFIG_NET_IPV6) && !defined(CONFIG_NET_IPV4)
	return parse_ipv6(str, str_len, addr, false);
#endif
}
   19db4:	b00f      	add	sp, #60	; 0x3c
   19db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	len = min(INET6_ADDRSTRLEN, str_len);
   19dba:	292e      	cmp	r1, #46	; 0x2e
   19dbc:	460b      	mov	r3, r1
	for (i = 0; i < len; i++) {
   19dbe:	f04f 0600 	mov.w	r6, #0
	len = min(INET6_ADDRSTRLEN, str_len);
   19dc2:	bf28      	it	cs
   19dc4:	232e      	movcs	r3, #46	; 0x2e
		if (!str[i]) {
   19dc6:	5da2      	ldrb	r2, [r4, r6]
   19dc8:	b11a      	cbz	r2, 19dd2 <net_ipaddr_parse+0x92>
	for (i = 0; i < len; i++) {
   19dca:	3601      	adds	r6, #1
   19dcc:	42b3      	cmp	r3, r6
   19dce:	dcfa      	bgt.n	19dc6 <net_ipaddr_parse+0x86>
   19dd0:	461e      	mov	r6, r3
		ptr = memchr(str, ']', len);
   19dd2:	4632      	mov	r2, r6
   19dd4:	215d      	movs	r1, #93	; 0x5d
   19dd6:	4620      	mov	r0, r4
   19dd8:	f7e6 fdd6 	bl	988 <memchr>
		if (!ptr) {
   19ddc:	4683      	mov	fp, r0
   19dde:	2800      	cmp	r0, #0
   19de0:	d04a      	beq.n	19e78 <net_ipaddr_parse+0x138>
		end = min(len, ptr - (str + 1));
   19de2:	1c61      	adds	r1, r4, #1
   19de4:	1a40      	subs	r0, r0, r1
   19de6:	4286      	cmp	r6, r0
   19de8:	bfa8      	it	ge
   19dea:	4606      	movge	r6, r0
		memcpy(ipaddr, str + 1, end);
   19dec:	f10d 0808 	add.w	r8, sp, #8
   19df0:	4632      	mov	r2, r6
   19df2:	4640      	mov	r0, r8
   19df4:	f7e6 fd79 	bl	8ea <memcpy>
	ipaddr[end] = '\0';
   19df8:	ab0e      	add	r3, sp, #56	; 0x38
   19dfa:	4433      	add	r3, r6
   19dfc:	f04f 0900 	mov.w	r9, #0
   19e00:	1d39      	adds	r1, r7, #4
   19e02:	4640      	mov	r0, r8
   19e04:	f803 9c30 	strb.w	r9, [r3, #-48]
   19e08:	f7ff fe6d 	bl	19ae6 <net_addr_pton.part.4>
	if (ret < 0) {
   19e0c:	4548      	cmp	r0, r9
   19e0e:	db33      	blt.n	19e78 <net_ipaddr_parse+0x138>
	if ((ptr + 1) < (str + str_len) && *(ptr + 1) == ':') {
   19e10:	f10b 0301 	add.w	r3, fp, #1
   19e14:	1960      	adds	r0, r4, r5
	net_sin6(addr)->sin6_family = AF_INET6;
   19e16:	f04f 0a0a 	mov.w	sl, #10
	if ((ptr + 1) < (str + str_len) && *(ptr + 1) == ':') {
   19e1a:	4283      	cmp	r3, r0
	net_sin6(addr)->sin6_family = AF_INET6;
   19e1c:	f8a7 a000 	strh.w	sl, [r7]
	if ((ptr + 1) < (str + str_len) && *(ptr + 1) == ':') {
   19e20:	d2c7      	bcs.n	19db2 <net_ipaddr_parse+0x72>
   19e22:	f89b 3001 	ldrb.w	r3, [fp, #1]
   19e26:	2b3a      	cmp	r3, #58	; 0x3a
   19e28:	d1c3      	bne.n	19db2 <net_ipaddr_parse+0x72>
		len = str_len - end;
   19e2a:	1bad      	subs	r5, r5, r6
		memcpy(ipaddr, ptr + 2, len);
   19e2c:	462a      	mov	r2, r5
   19e2e:	f10b 0102 	add.w	r1, fp, #2
   19e32:	4640      	mov	r0, r8
   19e34:	f7e6 fd59 	bl	8ea <memcpy>
		ipaddr[len] = '\0';
   19e38:	ab0e      	add	r3, sp, #56	; 0x38
   19e3a:	441d      	add	r5, r3
	tmp = strtoul(buf, &endptr, 10);
   19e3c:	4652      	mov	r2, sl
   19e3e:	a901      	add	r1, sp, #4
   19e40:	4640      	mov	r0, r8
		ipaddr[len] = '\0';
   19e42:	f805 9c30 	strb.w	r9, [r5, #-48]
	tmp = strtoul(buf, &endptr, 10);
   19e46:	f7e6 fc24 	bl	692 <strtoul>
	if ((endptr == buf && tmp == 0) ||
   19e4a:	9b01      	ldr	r3, [sp, #4]
   19e4c:	4543      	cmp	r3, r8
   19e4e:	d100      	bne.n	19e52 <net_ipaddr_parse+0x112>
   19e50:	b190      	cbz	r0, 19e78 <net_ipaddr_parse+0x138>
   19e52:	f89d 2008 	ldrb.w	r2, [sp, #8]
   19e56:	b17a      	cbz	r2, 19e78 <net_ipaddr_parse+0x138>
	    !(*buf != '\0' && *endptr == '\0') ||
   19e58:	781b      	ldrb	r3, [r3, #0]
   19e5a:	b96b      	cbnz	r3, 19e78 <net_ipaddr_parse+0x138>
	    ((unsigned long)(unsigned short)tmp != tmp)) {
   19e5c:	b282      	uxth	r2, r0
	    !(*buf != '\0' && *endptr == '\0') ||
   19e5e:	4290      	cmp	r0, r2
   19e60:	d10a      	bne.n	19e78 <net_ipaddr_parse+0x138>
		net_sin6(addr)->sin6_port = htons(port);
   19e62:	4b06      	ldr	r3, [pc, #24]	; (19e7c <net_ipaddr_parse+0x13c>)
   19e64:	ea03 2000 	and.w	r0, r3, r0, lsl #8
   19e68:	ea40 2012 	orr.w	r0, r0, r2, lsr #8
   19e6c:	8078      	strh	r0, [r7, #2]
   19e6e:	e7a0      	b.n	19db2 <net_ipaddr_parse+0x72>
		if (str[i] == ':') {
   19e70:	293a      	cmp	r1, #58	; 0x3a
			count++;
   19e72:	bf08      	it	eq
   19e74:	3301      	addeq	r3, #1
   19e76:	e775      	b.n	19d64 <net_ipaddr_parse+0x24>
			return false;
   19e78:	2000      	movs	r0, #0
   19e7a:	e79b      	b.n	19db4 <net_ipaddr_parse+0x74>
   19e7c:	00ffff00 	.word	0x00ffff00

00019e80 <net_ipv6_addr_create_iid>:
{
   19e80:	b570      	push	{r4, r5, r6, lr}
	addr->s6_addr[1] = 0x80;
   19e82:	2380      	movs	r3, #128	; 0x80
   19e84:	7043      	strb	r3, [r0, #1]
	addr->s6_addr[0] = 0xfe;
   19e86:	26fe      	movs	r6, #254	; 0xfe
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   19e88:	2300      	movs	r3, #0
	addr->s6_addr[0] = 0xfe;
   19e8a:	7006      	strb	r6, [r0, #0]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   19e8c:	7083      	strb	r3, [r0, #2]
   19e8e:	70c3      	strb	r3, [r0, #3]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   19e90:	7103      	strb	r3, [r0, #4]
   19e92:	7143      	strb	r3, [r0, #5]
   19e94:	7183      	strb	r3, [r0, #6]
   19e96:	71c3      	strb	r3, [r0, #7]
	switch (lladdr->len) {
   19e98:	790a      	ldrb	r2, [r1, #4]
   19e9a:	2a06      	cmp	r2, #6
{
   19e9c:	4604      	mov	r4, r0
   19e9e:	460d      	mov	r5, r1
	switch (lladdr->len) {
   19ea0:	d013      	beq.n	19eca <net_ipv6_addr_create_iid+0x4a>
   19ea2:	2a08      	cmp	r2, #8
   19ea4:	d028      	beq.n	19ef8 <net_ipv6_addr_create_iid+0x78>
   19ea6:	2a02      	cmp	r2, #2
   19ea8:	d125      	bne.n	19ef6 <net_ipv6_addr_create_iid+0x76>
		if (lladdr->type == NET_LINK_IEEE802154) {
   19eaa:	794a      	ldrb	r2, [r1, #5]
   19eac:	2a01      	cmp	r2, #1
   19eae:	d122      	bne.n	19ef6 <net_ipv6_addr_create_iid+0x76>
			addr->s6_addr[11] = 0xff;
   19eb0:	22ff      	movs	r2, #255	; 0xff
   19eb2:	72c2      	strb	r2, [r0, #11]
			addr->s6_addr[12] = 0xfe;
   19eb4:	7306      	strb	r6, [r0, #12]
			addr->s6_addr[13] = 0;
   19eb6:	7343      	strb	r3, [r0, #13]
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   19eb8:	7203      	strb	r3, [r0, #8]
   19eba:	7243      	strb	r3, [r0, #9]
   19ebc:	7283      	strb	r3, [r0, #10]
			addr->s6_addr[14] = lladdr->addr[0];
   19ebe:	680b      	ldr	r3, [r1, #0]
   19ec0:	781a      	ldrb	r2, [r3, #0]
   19ec2:	7382      	strb	r2, [r0, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   19ec4:	785b      	ldrb	r3, [r3, #1]
   19ec6:	73c3      	strb	r3, [r0, #15]
   19ec8:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   19eca:	2203      	movs	r2, #3
   19ecc:	6809      	ldr	r1, [r1, #0]
   19ece:	3008      	adds	r0, #8
   19ed0:	f7e6 fd0b 	bl	8ea <memcpy>
		addr->s6_addr[11] = 0xff;
   19ed4:	23ff      	movs	r3, #255	; 0xff
   19ed6:	72e3      	strb	r3, [r4, #11]
		addr->s6_addr[12] = 0xfe;
   19ed8:	7326      	strb	r6, [r4, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   19eda:	6829      	ldr	r1, [r5, #0]
   19edc:	2203      	movs	r2, #3
   19ede:	4411      	add	r1, r2
   19ee0:	f104 000d 	add.w	r0, r4, #13
   19ee4:	f7e6 fd01 	bl	8ea <memcpy>
		if (lladdr->type == NET_LINK_ETHERNET) {
   19ee8:	796b      	ldrb	r3, [r5, #5]
   19eea:	2b03      	cmp	r3, #3
   19eec:	d103      	bne.n	19ef6 <net_ipv6_addr_create_iid+0x76>
		addr->s6_addr[8] ^= 0x02;
   19eee:	7a23      	ldrb	r3, [r4, #8]
   19ef0:	f083 0302 	eor.w	r3, r3, #2
   19ef4:	7223      	strb	r3, [r4, #8]
   19ef6:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   19ef8:	6809      	ldr	r1, [r1, #0]
   19efa:	3008      	adds	r0, #8
   19efc:	f7e6 fcf5 	bl	8ea <memcpy>
   19f00:	e7f5      	b.n	19eee <net_ipv6_addr_create_iid+0x6e>

00019f02 <net_ipv6_addr_based_on_ll>:
 *
 *  @return True if it is, False otherwise
 */
static inline bool net_ipv6_addr_based_on_ll(const struct in6_addr *addr,
					     const struct net_linkaddr *lladdr)
{
   19f02:	b570      	push	{r4, r5, r6, lr}
   19f04:	460d      	mov	r5, r1
	if (!addr || !lladdr) {
   19f06:	4604      	mov	r4, r0
   19f08:	b908      	cbnz	r0, 19f0e <net_ipv6_addr_based_on_ll+0xc>
		}

		break;
	}

	return false;
   19f0a:	2000      	movs	r0, #0
}
   19f0c:	bd70      	pop	{r4, r5, r6, pc}
	if (!addr || !lladdr) {
   19f0e:	2900      	cmp	r1, #0
   19f10:	d0fb      	beq.n	19f0a <net_ipv6_addr_based_on_ll+0x8>
	switch (lladdr->len) {
   19f12:	790a      	ldrb	r2, [r1, #4]
   19f14:	2a06      	cmp	r2, #6
   19f16:	d013      	beq.n	19f40 <net_ipv6_addr_based_on_ll+0x3e>
   19f18:	2a08      	cmp	r2, #8
   19f1a:	d048      	beq.n	19fae <net_ipv6_addr_based_on_ll+0xac>
   19f1c:	2a02      	cmp	r2, #2
   19f1e:	d1f4      	bne.n	19f0a <net_ipv6_addr_based_on_ll+0x8>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   19f20:	6809      	ldr	r1, [r1, #0]
   19f22:	300e      	adds	r0, #14
   19f24:	f7e6 fcb4 	bl	890 <memcmp>
   19f28:	2800      	cmp	r0, #0
   19f2a:	d1ee      	bne.n	19f0a <net_ipv6_addr_based_on_ll+0x8>
		    addr->s6_addr[10] == 0 &&
   19f2c:	68a3      	ldr	r3, [r4, #8]
   19f2e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   19f32:	d1ea      	bne.n	19f0a <net_ipv6_addr_based_on_ll+0x8>
			    addr->s6_addr[11] == 0xff &&
   19f34:	7b20      	ldrb	r0, [r4, #12]
   19f36:	28fe      	cmp	r0, #254	; 0xfe
			    lladdr->len - 1) &&
   19f38:	bf14      	ite	ne
   19f3a:	2000      	movne	r0, #0
   19f3c:	2001      	moveq	r0, #1
   19f3e:	bd70      	pop	{r4, r5, r6, pc}
		if (lladdr->type == NET_LINK_ETHERNET) {
   19f40:	794e      	ldrb	r6, [r1, #5]
   19f42:	2e03      	cmp	r6, #3
   19f44:	d11d      	bne.n	19f82 <net_ipv6_addr_based_on_ll+0x80>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   19f46:	6809      	ldr	r1, [r1, #0]
   19f48:	2202      	movs	r2, #2
   19f4a:	3101      	adds	r1, #1
   19f4c:	3009      	adds	r0, #9
   19f4e:	f7e6 fc9f 	bl	890 <memcmp>
   19f52:	2800      	cmp	r0, #0
   19f54:	d1d9      	bne.n	19f0a <net_ipv6_addr_based_on_ll+0x8>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   19f56:	6829      	ldr	r1, [r5, #0]
   19f58:	4632      	mov	r2, r6
   19f5a:	3103      	adds	r1, #3
   19f5c:	f104 000d 	add.w	r0, r4, #13
   19f60:	f7e6 fc96 	bl	890 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   19f64:	2800      	cmp	r0, #0
   19f66:	d1d0      	bne.n	19f0a <net_ipv6_addr_based_on_ll+0x8>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   19f68:	7ae3      	ldrb	r3, [r4, #11]
   19f6a:	2bff      	cmp	r3, #255	; 0xff
   19f6c:	d1cd      	bne.n	19f0a <net_ipv6_addr_based_on_ll+0x8>
			    addr->s6_addr[11] == 0xff &&
   19f6e:	7b23      	ldrb	r3, [r4, #12]
   19f70:	2bfe      	cmp	r3, #254	; 0xfe
   19f72:	d1ca      	bne.n	19f0a <net_ipv6_addr_based_on_ll+0x8>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   19f74:	682a      	ldr	r2, [r5, #0]
   19f76:	7a23      	ldrb	r3, [r4, #8]
			    lladdr->len - 1) &&
   19f78:	7810      	ldrb	r0, [r2, #0]
   19f7a:	f083 0302 	eor.w	r3, r3, #2
   19f7e:	4298      	cmp	r0, r3
   19f80:	e7da      	b.n	19f38 <net_ipv6_addr_based_on_ll+0x36>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   19f82:	2e02      	cmp	r6, #2
   19f84:	d1c1      	bne.n	19f0a <net_ipv6_addr_based_on_ll+0x8>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   19f86:	6809      	ldr	r1, [r1, #0]
   19f88:	4632      	mov	r2, r6
   19f8a:	3101      	adds	r1, #1
   19f8c:	3009      	adds	r0, #9
   19f8e:	f7e6 fc7f 	bl	890 <memcmp>
   19f92:	2800      	cmp	r0, #0
   19f94:	d1b9      	bne.n	19f0a <net_ipv6_addr_based_on_ll+0x8>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   19f96:	6829      	ldr	r1, [r5, #0]
   19f98:	2203      	movs	r2, #3
   19f9a:	4411      	add	r1, r2
   19f9c:	f104 000d 	add.w	r0, r4, #13
   19fa0:	f7e6 fc76 	bl	890 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   19fa4:	2800      	cmp	r0, #0
   19fa6:	d1b0      	bne.n	19f0a <net_ipv6_addr_based_on_ll+0x8>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   19fa8:	7ae3      	ldrb	r3, [r4, #11]
   19faa:	2bff      	cmp	r3, #255	; 0xff
   19fac:	e7c1      	b.n	19f32 <net_ipv6_addr_based_on_ll+0x30>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   19fae:	6809      	ldr	r1, [r1, #0]
   19fb0:	2207      	movs	r2, #7
   19fb2:	3101      	adds	r1, #1
   19fb4:	3009      	adds	r0, #9
   19fb6:	f7e6 fc6b 	bl	890 <memcmp>
   19fba:	2800      	cmp	r0, #0
   19fbc:	d0da      	beq.n	19f74 <net_ipv6_addr_based_on_ll+0x72>
   19fbe:	e7a4      	b.n	19f0a <net_ipv6_addr_based_on_ll+0x8>

00019fc0 <net_6lo_compress>:
	return true;
}

bool net_6lo_compress(struct net_pkt *pkt, bool iphc,
		      fragment_handler_t fragment)
{
   19fc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   19fc4:	4607      	mov	r7, r0
   19fc6:	4691      	mov	r9, r2
	if (iphc) {
   19fc8:	2900      	cmp	r1, #0
   19fca:	f000 81d2 	beq.w	1a372 <net_6lo_compress+0x3b2>
   19fce:	6882      	ldr	r2, [r0, #8]
	if (pkt->frags->len < NET_IPV6H_LEN) {
   19fd0:	8993      	ldrh	r3, [r2, #12]
   19fd2:	2b27      	cmp	r3, #39	; 0x27
   19fd4:	d803      	bhi.n	19fde <net_6lo_compress+0x1e>
		return false;
   19fd6:	2000      	movs	r0, #0
		return compress_IPHC_header(pkt, fragment);
	} else {
		return compress_ipv6_header(pkt, fragment);
	}
}
   19fd8:	b003      	add	sp, #12
   19fda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return pkt->frags->data;
   19fde:	6895      	ldr	r5, [r2, #8]
	if (ipv6->nexthdr == IPPROTO_UDP &&
   19fe0:	79aa      	ldrb	r2, [r5, #6]
   19fe2:	2a11      	cmp	r2, #17
   19fe4:	d101      	bne.n	19fea <net_6lo_compress+0x2a>
   19fe6:	2b2f      	cmp	r3, #47	; 0x2f
   19fe8:	d9f5      	bls.n	19fd6 <net_6lo_compress+0x16>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   19fea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19fee:	4638      	mov	r0, r7
   19ff0:	f7ff facc 	bl	1958c <net_pkt_get_frag>
	if (!frag) {
   19ff4:	4606      	mov	r6, r0
   19ff6:	2800      	cmp	r0, #0
   19ff8:	d0ed      	beq.n	19fd6 <net_6lo_compress+0x16>
	IPHC[offset++] = NET_6LO_DISPATCH_IPHC;
   19ffa:	6883      	ldr	r3, [r0, #8]
   19ffc:	2260      	movs	r2, #96	; 0x60
   19ffe:	701a      	strb	r2, [r3, #0]
	IPHC[offset++] = 0;
   1a000:	6883      	ldr	r3, [r0, #8]
   1a002:	2200      	movs	r2, #0
   1a004:	705a      	strb	r2, [r3, #1]
	tcl = ((ipv6->vtc & 0x0F) << 4) | ((ipv6->tcflow & 0xF0) >> 4);
   1a006:	786c      	ldrb	r4, [r5, #1]
   1a008:	782a      	ldrb	r2, [r5, #0]
   1a00a:	0923      	lsrs	r3, r4, #4
   1a00c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   1a010:	b2db      	uxtb	r3, r3
	tcl = (tcl << 6) | (tcl >> 2);   /* ECN(2), DSCP(6) */
   1a012:	0898      	lsrs	r0, r3, #2
   1a014:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
   1a018:	b240      	sxtb	r0, r0
	if (((ipv6->tcflow & 0x0F) == 0) && (ipv6->flow == 0)) {
   1a01a:	f014 0f0f 	tst.w	r4, #15
	tcl = (tcl << 6) | (tcl >> 2);   /* ECN(2), DSCP(6) */
   1a01e:	fa5f fe80 	uxtb.w	lr, r0
   1a022:	f002 020f 	and.w	r2, r2, #15
   1a026:	68b3      	ldr	r3, [r6, #8]
	if (((ipv6->tcflow & 0x0F) == 0) && (ipv6->flow == 0)) {
   1a028:	d145      	bne.n	1a0b6 <net_6lo_compress+0xf6>
   1a02a:	8869      	ldrh	r1, [r5, #2]
   1a02c:	2900      	cmp	r1, #0
   1a02e:	d142      	bne.n	1a0b6 <net_6lo_compress+0xf6>
		if (((ipv6->vtc & 0x0F) == 0) && ((ipv6->tcflow & 0xF0) == 0)) {
   1a030:	2a00      	cmp	r2, #0
   1a032:	d137      	bne.n	1a0a4 <net_6lo_compress+0xe4>
   1a034:	f014 0ff0 	tst.w	r4, #240	; 0xf0
   1a038:	d134      	bne.n	1a0a4 <net_6lo_compress+0xe4>
			IPHC[0] |= NET_6LO_IPHC_TF_11;
   1a03a:	781a      	ldrb	r2, [r3, #0]
   1a03c:	f042 0218 	orr.w	r2, r2, #24
   1a040:	701a      	strb	r2, [r3, #0]
   1a042:	2402      	movs	r4, #2
   1a044:	79aa      	ldrb	r2, [r5, #6]
   1a046:	68b3      	ldr	r3, [r6, #8]
	if (ipv6->nexthdr == IPPROTO_UDP) {
   1a048:	2a11      	cmp	r2, #17
		IPHC[0] |= NET_6LO_IPHC_NH_1;
   1a04a:	bf09      	itett	eq
   1a04c:	781a      	ldrbeq	r2, [r3, #0]
		IPHC[offset++] = ipv6->nexthdr;
   1a04e:	551a      	strbne	r2, [r3, r4]
		IPHC[0] |= NET_6LO_IPHC_NH_1;
   1a050:	f042 0204 	orreq.w	r2, r2, #4
   1a054:	701a      	strbeq	r2, [r3, #0]
   1a056:	79ea      	ldrb	r2, [r5, #7]
   1a058:	68b3      	ldr	r3, [r6, #8]
		IPHC[offset++] = ipv6->nexthdr;
   1a05a:	bf1c      	itt	ne
   1a05c:	1c61      	addne	r1, r4, #1
   1a05e:	b2cc      	uxtbne	r4, r1
	switch (ipv6->hop_limit) {
   1a060:	2a40      	cmp	r2, #64	; 0x40
   1a062:	d04e      	beq.n	1a102 <net_6lo_compress+0x142>
   1a064:	2aff      	cmp	r2, #255	; 0xff
   1a066:	d050      	beq.n	1a10a <net_6lo_compress+0x14a>
   1a068:	2a01      	cmp	r2, #1
   1a06a:	d152      	bne.n	1a112 <net_6lo_compress+0x152>
		IPHC[0] |= NET_6LO_IPHC_HLIM1;
   1a06c:	781a      	ldrb	r2, [r3, #0]
   1a06e:	f042 0201 	orr.w	r2, r2, #1
		IPHC[0] |= NET_6LO_IPHC_HLIM64;
   1a072:	701a      	strb	r2, [r3, #0]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1a074:	68ab      	ldr	r3, [r5, #8]
	if (net_is_ipv6_addr_unspecified(&ipv6->src)) {
   1a076:	f105 0008 	add.w	r0, r5, #8
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a07a:	2b00      	cmp	r3, #0
   1a07c:	f040 8195 	bne.w	1a3aa <net_6lo_compress+0x3ea>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1a080:	68eb      	ldr	r3, [r5, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1a082:	2b00      	cmp	r3, #0
   1a084:	f040 8191 	bne.w	1a3aa <net_6lo_compress+0x3ea>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a088:	692b      	ldr	r3, [r5, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1a08a:	2b00      	cmp	r3, #0
   1a08c:	f040 818d 	bne.w	1a3aa <net_6lo_compress+0x3ea>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1a090:	696b      	ldr	r3, [r5, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a092:	2b00      	cmp	r3, #0
   1a094:	f040 8189 	bne.w	1a3aa <net_6lo_compress+0x3ea>
		IPHC[1] |= NET_6LO_IPHC_SAC_1;
   1a098:	68b2      	ldr	r2, [r6, #8]
   1a09a:	7853      	ldrb	r3, [r2, #1]
   1a09c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a0a0:	7053      	strb	r3, [r2, #1]
   1a0a2:	e050      	b.n	1a146 <net_6lo_compress+0x186>
			IPHC[0] |= NET_6LO_IPHC_TF_10;
   1a0a4:	781a      	ldrb	r2, [r3, #0]
   1a0a6:	f042 0210 	orr.w	r2, r2, #16
   1a0aa:	701a      	strb	r2, [r3, #0]
			IPHC[offset++] = tcl;
   1a0ac:	68b3      	ldr	r3, [r6, #8]
   1a0ae:	2403      	movs	r4, #3
   1a0b0:	f883 e002 	strb.w	lr, [r3, #2]
   1a0b4:	e7c6      	b.n	1a044 <net_6lo_compress+0x84>
   1a0b6:	1ca9      	adds	r1, r5, #2
		if (((ipv6->vtc & 0x0F) == 0) && (ipv6->tcflow & 0x30)) {
   1a0b8:	b9aa      	cbnz	r2, 1a0e6 <net_6lo_compress+0x126>
   1a0ba:	f014 0f30 	tst.w	r4, #48	; 0x30
   1a0be:	d012      	beq.n	1a0e6 <net_6lo_compress+0x126>
			IPHC[0] |= NET_6LO_IPHC_TF_01;
   1a0c0:	781a      	ldrb	r2, [r3, #0]
   1a0c2:	f042 0208 	orr.w	r2, r2, #8
   1a0c6:	701a      	strb	r2, [r3, #0]
			IPHC[offset++] = (tcl & 0xC0) | (ipv6->tcflow & 0x0F);
   1a0c8:	786b      	ldrb	r3, [r5, #1]
   1a0ca:	68b2      	ldr	r2, [r6, #8]
   1a0cc:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
   1a0d0:	f003 030f 	and.w	r3, r3, #15
   1a0d4:	4303      	orrs	r3, r0
   1a0d6:	7093      	strb	r3, [r2, #2]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   1a0d8:	68b0      	ldr	r0, [r6, #8]
   1a0da:	2202      	movs	r2, #2
   1a0dc:	3003      	adds	r0, #3
   1a0de:	f7e6 fc04 	bl	8ea <memcpy>
			offset += 2;
   1a0e2:	2405      	movs	r4, #5
   1a0e4:	e7ae      	b.n	1a044 <net_6lo_compress+0x84>
			IPHC[offset++] = tcl;
   1a0e6:	f883 e002 	strb.w	lr, [r3, #2]
			IPHC[offset++] = ipv6->tcflow & 0x0F;
   1a0ea:	786b      	ldrb	r3, [r5, #1]
   1a0ec:	68b2      	ldr	r2, [r6, #8]
   1a0ee:	f003 030f 	and.w	r3, r3, #15
   1a0f2:	70d3      	strb	r3, [r2, #3]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   1a0f4:	68b0      	ldr	r0, [r6, #8]
   1a0f6:	2202      	movs	r2, #2
   1a0f8:	3004      	adds	r0, #4
   1a0fa:	f7e6 fbf6 	bl	8ea <memcpy>
			offset += 2;
   1a0fe:	2406      	movs	r4, #6
   1a100:	e7a0      	b.n	1a044 <net_6lo_compress+0x84>
		IPHC[0] |= NET_6LO_IPHC_HLIM64;
   1a102:	781a      	ldrb	r2, [r3, #0]
   1a104:	f042 0202 	orr.w	r2, r2, #2
   1a108:	e7b3      	b.n	1a072 <net_6lo_compress+0xb2>
		IPHC[0] |= NET_6LO_IPHC_HLIM255;
   1a10a:	781a      	ldrb	r2, [r3, #0]
   1a10c:	f042 0203 	orr.w	r2, r2, #3
   1a110:	e7af      	b.n	1a072 <net_6lo_compress+0xb2>
		IPHC[offset++] = ipv6->hop_limit;
   1a112:	1c61      	adds	r1, r4, #1
   1a114:	551a      	strb	r2, [r3, r4]
   1a116:	b2cc      	uxtb	r4, r1
   1a118:	e7ac      	b.n	1a074 <net_6lo_compress+0xb4>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   1a11a:	8aab      	ldrh	r3, [r5, #20]
   1a11c:	2bfe      	cmp	r3, #254	; 0xfe
   1a11e:	f040 8157 	bne.w	1a3d0 <net_6lo_compress+0x410>
			IPHC[1] |= NET_6LO_IPHC_SAM_10;
   1a122:	68b2      	ldr	r2, [r6, #8]
   1a124:	7853      	ldrb	r3, [r2, #1]
   1a126:	f043 0320 	orr.w	r3, r3, #32
   1a12a:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->src.s6_addr[14], 2);
   1a12c:	68b0      	ldr	r0, [r6, #8]
   1a12e:	2202      	movs	r2, #2
   1a130:	4420      	add	r0, r4
   1a132:	f105 0116 	add.w	r1, r5, #22
   1a136:	f7e6 fbd8 	bl	8ea <memcpy>
			offset += 2;
   1a13a:	3402      	adds	r4, #2
   1a13c:	e15c      	b.n	1a3f8 <net_6lo_compress+0x438>
				IPHC[1] |= NET_6LO_IPHC_SAM_11;
   1a13e:	785a      	ldrb	r2, [r3, #1]
   1a140:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   1a144:	705a      	strb	r2, [r3, #1]
	if (net_is_ipv6_addr_mcast(&ipv6->dst)) {
   1a146:	7e2b      	ldrb	r3, [r5, #24]
   1a148:	2bff      	cmp	r3, #255	; 0xff
   1a14a:	d12f      	bne.n	1a1ac <net_6lo_compress+0x1ec>
	IPHC[1] |= NET_6LO_IPHC_M_1;
   1a14c:	68b2      	ldr	r2, [r6, #8]
   1a14e:	7853      	ldrb	r3, [r2, #1]
   1a150:	f043 0308 	orr.w	r3, r3, #8
   1a154:	7053      	strb	r3, [r2, #1]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   1a156:	7e6b      	ldrb	r3, [r5, #25]
   1a158:	68b0      	ldr	r0, [r6, #8]
   1a15a:	2b02      	cmp	r3, #2
   1a15c:	f040 8154 	bne.w	1a408 <net_6lo_compress+0x448>
	return ((addr->s6_addr[1] == 0x02) &&
   1a160:	8b6b      	ldrh	r3, [r5, #26]
   1a162:	2b00      	cmp	r3, #0
   1a164:	f040 8150 	bne.w	1a408 <net_6lo_compress+0x448>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   1a168:	69eb      	ldr	r3, [r5, #28]
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   1a16a:	2b00      	cmp	r3, #0
   1a16c:	f040 814c 	bne.w	1a408 <net_6lo_compress+0x448>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   1a170:	6a2b      	ldr	r3, [r5, #32]
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   1a172:	2b00      	cmp	r3, #0
   1a174:	f040 8148 	bne.w	1a408 <net_6lo_compress+0x448>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   1a178:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   1a17c:	2b00      	cmp	r3, #0
   1a17e:	f040 8143 	bne.w	1a408 <net_6lo_compress+0x448>
		IPHC[1] |= NET_6LO_IPHC_DAM_11;
   1a182:	7843      	ldrb	r3, [r0, #1]
   1a184:	f043 0303 	orr.w	r3, r3, #3
   1a188:	7043      	strb	r3, [r0, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[15], 1);
   1a18a:	68b0      	ldr	r0, [r6, #8]
   1a18c:	2201      	movs	r2, #1
   1a18e:	4420      	add	r0, r4
   1a190:	f105 0127 	add.w	r1, r5, #39	; 0x27
   1a194:	f7e6 fba9 	bl	8ea <memcpy>
		offset++;
   1a198:	3401      	adds	r4, #1
   1a19a:	e189      	b.n	1a4b0 <net_6lo_compress+0x4f0>
		memcpy(&IPHC[offset], ipv6->src.s6_addr,
   1a19c:	68b3      	ldr	r3, [r6, #8]
   1a19e:	4601      	mov	r1, r0
   1a1a0:	2210      	movs	r2, #16
   1a1a2:	1918      	adds	r0, r3, r4
   1a1a4:	f7e6 fba1 	bl	8ea <memcpy>
		offset += sizeof(struct in6_addr);
   1a1a8:	3410      	adds	r4, #16
   1a1aa:	e125      	b.n	1a3f8 <net_6lo_compress+0x438>
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   1a1ac:	8b2a      	ldrh	r2, [r5, #24]
   1a1ae:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1a1b2:	429a      	cmp	r2, r3
   1a1b4:	f040 8090 	bne.w	1a2d8 <net_6lo_compress+0x318>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   1a1b8:	8b6b      	ldrh	r3, [r5, #26]
   1a1ba:	2b00      	cmp	r3, #0
   1a1bc:	f040 808c 	bne.w	1a2d8 <net_6lo_compress+0x318>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   1a1c0:	69eb      	ldr	r3, [r5, #28]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   1a1c2:	2b00      	cmp	r3, #0
   1a1c4:	f040 8088 	bne.w	1a2d8 <net_6lo_compress+0x318>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   1a1c8:	6a2b      	ldr	r3, [r5, #32]
   1a1ca:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1a1ce:	f040 8159 	bne.w	1a484 <net_6lo_compress+0x4c4>
   1a1d2:	8cab      	ldrh	r3, [r5, #36]	; 0x24
   1a1d4:	2bfe      	cmp	r3, #254	; 0xfe
   1a1d6:	f040 8155 	bne.w	1a484 <net_6lo_compress+0x4c4>
			IPHC[1] |= NET_6LO_IPHC_DAM_10;
   1a1da:	68b2      	ldr	r2, [r6, #8]
   1a1dc:	7853      	ldrb	r3, [r2, #1]
   1a1de:	f043 0302 	orr.w	r3, r3, #2
   1a1e2:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->dst.s6_addr[14], 2);
   1a1e4:	68b0      	ldr	r0, [r6, #8]
   1a1e6:	2202      	movs	r2, #2
   1a1e8:	4420      	add	r0, r4
   1a1ea:	f105 0126 	add.w	r1, r5, #38	; 0x26
   1a1ee:	f7e6 fb7c 	bl	8ea <memcpy>
			offset += 2;
   1a1f2:	3402      	adds	r4, #2
   1a1f4:	e15c      	b.n	1a4b0 <net_6lo_compress+0x4f0>
				IPHC[1] |= NET_6LO_IPHC_DAM_11;
   1a1f6:	785a      	ldrb	r2, [r3, #1]
   1a1f8:	f042 0203 	orr.w	r2, r2, #3
   1a1fc:	705a      	strb	r2, [r3, #1]
	if (ipv6->nexthdr != IPPROTO_UDP) {
   1a1fe:	79ab      	ldrb	r3, [r5, #6]
   1a200:	2b11      	cmp	r3, #17
   1a202:	f040 80b0 	bne.w	1a366 <net_6lo_compress+0x3a6>
		udp = net_udp_get_hdr(pkt, &hdr);
   1a206:	4669      	mov	r1, sp
   1a208:	4638      	mov	r0, r7
   1a20a:	f003 fcfd 	bl	1dc08 <net_udp_get_hdr>
		if (!udp) {
   1a20e:	4605      	mov	r5, r0
   1a210:	2800      	cmp	r0, #0
   1a212:	f43f aee0 	beq.w	19fd6 <net_6lo_compress+0x16>
		IPHC[offset] = NET_6LO_NHC_UDP_BARE;
   1a216:	68b3      	ldr	r3, [r6, #8]
   1a218:	22f0      	movs	r2, #240	; 0xf0
   1a21a:	551a      	strb	r2, [r3, r4]
	if ((((htons(udp->src_port) >> 4) & 0xFFF) ==
   1a21c:	8802      	ldrh	r2, [r0, #0]
   1a21e:	f8d6 e008 	ldr.w	lr, [r6, #8]
   1a222:	0213      	lsls	r3, r2, #8
   1a224:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   1a228:	b29b      	uxth	r3, r3
   1a22a:	f640 720b 	movw	r2, #3851	; 0xf0b
   1a22e:	ea4f 1c13 	mov.w	ip, r3, lsr #4
   1a232:	4594      	cmp	ip, r2
   1a234:	f104 0001 	add.w	r0, r4, #1
   1a238:	886a      	ldrh	r2, [r5, #2]
   1a23a:	d156      	bne.n	1a2ea <net_6lo_compress+0x32a>
	    (((htons(udp->dst_port) >> 4) & 0xFFF) ==
   1a23c:	0211      	lsls	r1, r2, #8
   1a23e:	ea41 2112 	orr.w	r1, r1, r2, lsr #8
	    NET_6LO_NHC_UDP_4_BIT_PORT) &&
   1a242:	f3c1 110b 	ubfx	r1, r1, #4, #12
   1a246:	4561      	cmp	r1, ip
   1a248:	d14f      	bne.n	1a2ea <net_6lo_compress+0x32a>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_11;
   1a24a:	f81e 3004 	ldrb.w	r3, [lr, r4]
   1a24e:	f043 0303 	orr.w	r3, r3, #3
   1a252:	f80e 3004 	strb.w	r3, [lr, r4]
		tmp = (u8_t)(htons(udp->src_port));
   1a256:	882b      	ldrh	r3, [r5, #0]
   1a258:	0a1a      	lsrs	r2, r3, #8
		tmp |= (((u8_t)(htons(udp->dst_port))) & 0x0F);
   1a25a:	886b      	ldrh	r3, [r5, #2]
   1a25c:	f3c3 2303 	ubfx	r3, r3, #8, #4
   1a260:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		IPHC[offset++] = tmp;
   1a264:	b2c0      	uxtb	r0, r0
   1a266:	68b2      	ldr	r2, [r6, #8]
   1a268:	3402      	adds	r4, #2
   1a26a:	5413      	strb	r3, [r2, r0]
   1a26c:	fa5f f884 	uxtb.w	r8, r4
	memcpy(&IPHC[offset], &udp->chksum, 2);
   1a270:	68b0      	ldr	r0, [r6, #8]
   1a272:	1da9      	adds	r1, r5, #6
   1a274:	2202      	movs	r2, #2
   1a276:	4440      	add	r0, r8
   1a278:	f7e6 fb37 	bl	8ea <memcpy>
		net_udp_set_hdr(pkt, udp);
   1a27c:	4629      	mov	r1, r5
   1a27e:	4638      	mov	r0, r7
   1a280:	f003 fcfb 	bl	1dc7a <net_udp_set_hdr>
	offset += 2;
   1a284:	f108 0402 	add.w	r4, r8, #2
   1a288:	b2e4      	uxtb	r4, r4
		compressed += NET_UDPH_LEN;
   1a28a:	2530      	movs	r5, #48	; 0x30
	net_buf_add(frag, offset);
   1a28c:	f106 0808 	add.w	r8, r6, #8
   1a290:	4621      	mov	r1, r4
   1a292:	4640      	mov	r0, r8
   1a294:	f7fd fc9a 	bl	17bcc <net_buf_simple_add>
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   1a298:	68bb      	ldr	r3, [r7, #8]
   1a29a:	68b0      	ldr	r0, [r6, #8]
	       pkt->frags->len - compressed);
   1a29c:	899a      	ldrh	r2, [r3, #12]
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   1a29e:	6899      	ldr	r1, [r3, #8]
   1a2a0:	1b52      	subs	r2, r2, r5
   1a2a2:	4429      	add	r1, r5
   1a2a4:	4420      	add	r0, r4
   1a2a6:	f7e6 fb20 	bl	8ea <memcpy>
	net_buf_add(frag, pkt->frags->len - compressed);
   1a2aa:	68bb      	ldr	r3, [r7, #8]
   1a2ac:	8999      	ldrh	r1, [r3, #12]
   1a2ae:	4640      	mov	r0, r8
   1a2b0:	1b49      	subs	r1, r1, r5
   1a2b2:	f7fd fc8b 	bl	17bcc <net_buf_simple_add>
	net_pkt_frag_del(pkt, NULL, pkt->frags);
   1a2b6:	68ba      	ldr	r2, [r7, #8]
   1a2b8:	2100      	movs	r1, #0
   1a2ba:	4638      	mov	r0, r7
   1a2bc:	f7ff f99c 	bl	195f8 <net_pkt_frag_del>
	net_pkt_frag_insert(pkt, frag);
   1a2c0:	4638      	mov	r0, r7
   1a2c2:	4631      	mov	r1, r6
   1a2c4:	f7ff f9c2 	bl	1964c <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   1a2c8:	4638      	mov	r0, r7
   1a2ca:	f7ff fa2c 	bl	19726 <net_pkt_compact>
	if (fragment) {
   1a2ce:	f1b9 0f00 	cmp.w	r9, #0
   1a2d2:	d14a      	bne.n	1a36a <net_6lo_compress+0x3aa>
	return true;
   1a2d4:	2001      	movs	r0, #1
   1a2d6:	e67f      	b.n	19fd8 <net_6lo_compress+0x18>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   1a2d8:	68b0      	ldr	r0, [r6, #8]
   1a2da:	4420      	add	r0, r4
   1a2dc:	2210      	movs	r2, #16
   1a2de:	f105 0118 	add.w	r1, r5, #24
   1a2e2:	f7e6 fb02 	bl	8ea <memcpy>
		offset += 16;
   1a2e6:	3410      	adds	r4, #16
   1a2e8:	e0e2      	b.n	1a4b0 <net_6lo_compress+0x4f0>
	} else if (((htons(udp->dst_port) >> 8) & 0xFF) ==
   1a2ea:	b2d2      	uxtb	r2, r2
   1a2ec:	2af0      	cmp	r2, #240	; 0xf0
   1a2ee:	d117      	bne.n	1a320 <net_6lo_compress+0x360>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_01;
   1a2f0:	f81e 3004 	ldrb.w	r3, [lr, r4]
   1a2f4:	f043 0301 	orr.w	r3, r3, #1
   1a2f8:	f80e 3004 	strb.w	r3, [lr, r4]
		memcpy(&IPHC[offset], &udp->src_port, 2);
   1a2fc:	68b3      	ldr	r3, [r6, #8]
   1a2fe:	2202      	movs	r2, #2
   1a300:	fa53 f080 	uxtab	r0, r3, r0
   1a304:	4629      	mov	r1, r5
   1a306:	f7e6 faf0 	bl	8ea <memcpy>
		IPHC[offset++] = (u8_t)(htons(udp->dst_port));
   1a30a:	f104 0804 	add.w	r8, r4, #4
   1a30e:	886b      	ldrh	r3, [r5, #2]
   1a310:	68b2      	ldr	r2, [r6, #8]
		offset += 2;
   1a312:	3403      	adds	r4, #3
		IPHC[offset++] = (u8_t)(htons(udp->dst_port));
   1a314:	b2e4      	uxtb	r4, r4
   1a316:	0a1b      	lsrs	r3, r3, #8
   1a318:	fa5f f888 	uxtb.w	r8, r8
   1a31c:	5513      	strb	r3, [r2, r4]
   1a31e:	e7a7      	b.n	1a270 <net_6lo_compress+0x2b0>
	} else if (((htons(udp->src_port) >> 8) & 0xFF) ==
   1a320:	0a1b      	lsrs	r3, r3, #8
   1a322:	2bf0      	cmp	r3, #240	; 0xf0
   1a324:	d117      	bne.n	1a356 <net_6lo_compress+0x396>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_10;
   1a326:	f81e 3004 	ldrb.w	r3, [lr, r4]
   1a32a:	f043 0302 	orr.w	r3, r3, #2
   1a32e:	f80e 3004 	strb.w	r3, [lr, r4]
		IPHC[offset++] = (u8_t)(htons(udp->src_port));
   1a332:	4629      	mov	r1, r5
   1a334:	68b2      	ldr	r2, [r6, #8]
   1a336:	f831 3b02 	ldrh.w	r3, [r1], #2
   1a33a:	b2c0      	uxtb	r0, r0
   1a33c:	0a1b      	lsrs	r3, r3, #8
   1a33e:	5413      	strb	r3, [r2, r0]
		memcpy(&IPHC[offset], &udp->dst_port, 2);
   1a340:	68b3      	ldr	r3, [r6, #8]
		IPHC[offset++] = (u8_t)(htons(udp->src_port));
   1a342:	1ca0      	adds	r0, r4, #2
		memcpy(&IPHC[offset], &udp->dst_port, 2);
   1a344:	2202      	movs	r2, #2
   1a346:	fa53 f080 	uxtab	r0, r3, r0
   1a34a:	f7e6 face 	bl	8ea <memcpy>
		offset += 2;
   1a34e:	3404      	adds	r4, #4
		offset += 4;
   1a350:	fa5f f884 	uxtb.w	r8, r4
   1a354:	e78c      	b.n	1a270 <net_6lo_compress+0x2b0>
		memcpy(&IPHC[offset], &udp->src_port, 4);
   1a356:	2204      	movs	r2, #4
   1a358:	4629      	mov	r1, r5
   1a35a:	fa5e f080 	uxtab	r0, lr, r0
   1a35e:	f7e6 fac4 	bl	8ea <memcpy>
		offset += 4;
   1a362:	3405      	adds	r4, #5
   1a364:	e7f4      	b.n	1a350 <net_6lo_compress+0x390>
	compressed = NET_IPV6H_LEN;
   1a366:	2528      	movs	r5, #40	; 0x28
   1a368:	e790      	b.n	1a28c <net_6lo_compress+0x2cc>
		return fragment(pkt, compressed - offset);
   1a36a:	1b29      	subs	r1, r5, r4
		return fragment(pkt, -1);
   1a36c:	4638      	mov	r0, r7
   1a36e:	47c8      	blx	r9
   1a370:	e632      	b.n	19fd8 <net_6lo_compress+0x18>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   1a372:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a376:	f7ff f909 	bl	1958c <net_pkt_get_frag>
	if (!frag) {
   1a37a:	4604      	mov	r4, r0
   1a37c:	2800      	cmp	r0, #0
   1a37e:	f43f ae2a 	beq.w	19fd6 <net_6lo_compress+0x16>
	frag->data[0] = NET_6LO_DISPATCH_IPV6;
   1a382:	f850 3f08 	ldr.w	r3, [r0, #8]!
   1a386:	2241      	movs	r2, #65	; 0x41
   1a388:	701a      	strb	r2, [r3, #0]
	net_buf_add(frag, 1);
   1a38a:	2101      	movs	r1, #1
   1a38c:	f7fd fc1e 	bl	17bcc <net_buf_simple_add>
	net_pkt_frag_insert(pkt, frag);
   1a390:	4638      	mov	r0, r7
   1a392:	4621      	mov	r1, r4
   1a394:	f7ff f95a 	bl	1964c <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   1a398:	4638      	mov	r0, r7
   1a39a:	f7ff f9c4 	bl	19726 <net_pkt_compact>
	if (fragment) {
   1a39e:	f1b9 0f00 	cmp.w	r9, #0
   1a3a2:	d097      	beq.n	1a2d4 <net_6lo_compress+0x314>
		return fragment(pkt, -1);
   1a3a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a3a8:	e7e0      	b.n	1a36c <net_6lo_compress+0x3ac>
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   1a3aa:	892a      	ldrh	r2, [r5, #8]
   1a3ac:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1a3b0:	429a      	cmp	r2, r3
   1a3b2:	f47f aef3 	bne.w	1a19c <net_6lo_compress+0x1dc>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   1a3b6:	896b      	ldrh	r3, [r5, #10]
   1a3b8:	2b00      	cmp	r3, #0
   1a3ba:	f47f aeef 	bne.w	1a19c <net_6lo_compress+0x1dc>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   1a3be:	68eb      	ldr	r3, [r5, #12]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   1a3c0:	2b00      	cmp	r3, #0
   1a3c2:	f47f aeeb 	bne.w	1a19c <net_6lo_compress+0x1dc>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   1a3c6:	692b      	ldr	r3, [r5, #16]
   1a3c8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1a3cc:	f43f aea5 	beq.w	1a11a <net_6lo_compress+0x15a>
			if (net_ipv6_addr_based_on_ll(&ipv6->src,
   1a3d0:	f107 0120 	add.w	r1, r7, #32
   1a3d4:	f7ff fd95 	bl	19f02 <net_ipv6_addr_based_on_ll>
   1a3d8:	68b3      	ldr	r3, [r6, #8]
   1a3da:	2800      	cmp	r0, #0
   1a3dc:	f47f aeaf 	bne.w	1a13e <net_6lo_compress+0x17e>
				IPHC[1] |= NET_6LO_IPHC_SAM_01;
   1a3e0:	785a      	ldrb	r2, [r3, #1]
   1a3e2:	f042 0210 	orr.w	r2, r2, #16
   1a3e6:	705a      	strb	r2, [r3, #1]
				memcpy(&IPHC[offset], &ipv6->src.s6_addr[8], 8);
   1a3e8:	68b0      	ldr	r0, [r6, #8]
   1a3ea:	2208      	movs	r2, #8
   1a3ec:	4420      	add	r0, r4
   1a3ee:	f105 0110 	add.w	r1, r5, #16
   1a3f2:	f7e6 fa7a 	bl	8ea <memcpy>
				offset += 8;
   1a3f6:	3408      	adds	r4, #8
		offset += sizeof(struct in6_addr);
   1a3f8:	b2e4      	uxtb	r4, r4
	if (!offset) {
   1a3fa:	2c00      	cmp	r4, #0
   1a3fc:	f47f aea3 	bne.w	1a146 <net_6lo_compress+0x186>
		net_pkt_frag_unref(frag);
   1a400:	4630      	mov	r0, r6
   1a402:	f7ff f8de 	bl	195c2 <net_pkt_frag_unref>
   1a406:	e5e6      	b.n	19fd6 <net_6lo_compress+0x16>
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   1a408:	69eb      	ldr	r3, [r5, #28]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   1a40a:	2b00      	cmp	r3, #0
   1a40c:	f47f af65 	bne.w	1a2da <net_6lo_compress+0x31a>
   1a410:	6a2b      	ldr	r3, [r5, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   1a412:	b913      	cbnz	r3, 1a41a <net_6lo_compress+0x45a>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   1a414:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1a418:	b1f3      	cbz	r3, 1a458 <net_6lo_compress+0x498>
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   1a41a:	8c2b      	ldrh	r3, [r5, #32]
   1a41c:	2b00      	cmp	r3, #0
   1a41e:	f47f af5c 	bne.w	1a2da <net_6lo_compress+0x31a>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   1a422:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   1a426:	2b00      	cmp	r3, #0
   1a428:	f47f af57 	bne.w	1a2da <net_6lo_compress+0x31a>
		IPHC[1] |= NET_6LO_IPHC_DAM_01;
   1a42c:	7843      	ldrb	r3, [r0, #1]
   1a42e:	f043 0301 	orr.w	r3, r3, #1
   1a432:	7043      	strb	r3, [r0, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   1a434:	68b0      	ldr	r0, [r6, #8]
   1a436:	2201      	movs	r2, #1
   1a438:	f105 0119 	add.w	r1, r5, #25
   1a43c:	4420      	add	r0, r4
   1a43e:	f7e6 fa54 	bl	8ea <memcpy>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[11], 5);
   1a442:	68b3      	ldr	r3, [r6, #8]
		offset++;
   1a444:	1c60      	adds	r0, r4, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[11], 5);
   1a446:	2205      	movs	r2, #5
   1a448:	f105 0123 	add.w	r1, r5, #35	; 0x23
   1a44c:	fa53 f080 	uxtab	r0, r3, r0
   1a450:	f7e6 fa4b 	bl	8ea <memcpy>
		offset += 5;
   1a454:	3406      	adds	r4, #6
   1a456:	e02b      	b.n	1a4b0 <net_6lo_compress+0x4f0>
		IPHC[1] |= NET_6LO_IPHC_DAM_10;
   1a458:	7843      	ldrb	r3, [r0, #1]
   1a45a:	f043 0302 	orr.w	r3, r3, #2
   1a45e:	7043      	strb	r3, [r0, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   1a460:	68b0      	ldr	r0, [r6, #8]
   1a462:	2201      	movs	r2, #1
   1a464:	f105 0119 	add.w	r1, r5, #25
   1a468:	4420      	add	r0, r4
   1a46a:	f7e6 fa3e 	bl	8ea <memcpy>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[13], 3);
   1a46e:	68b3      	ldr	r3, [r6, #8]
		offset++;
   1a470:	1c60      	adds	r0, r4, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[13], 3);
   1a472:	2203      	movs	r2, #3
   1a474:	f105 0125 	add.w	r1, r5, #37	; 0x25
   1a478:	fa53 f080 	uxtab	r0, r3, r0
   1a47c:	f7e6 fa35 	bl	8ea <memcpy>
		offset += 3;
   1a480:	3404      	adds	r4, #4
   1a482:	e015      	b.n	1a4b0 <net_6lo_compress+0x4f0>
			if (net_ipv6_addr_based_on_ll(&ipv6->dst,
   1a484:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1a488:	f105 0018 	add.w	r0, r5, #24
   1a48c:	f7ff fd39 	bl	19f02 <net_ipv6_addr_based_on_ll>
   1a490:	68b3      	ldr	r3, [r6, #8]
   1a492:	2800      	cmp	r0, #0
   1a494:	f47f aeaf 	bne.w	1a1f6 <net_6lo_compress+0x236>
				IPHC[1] |= NET_6LO_IPHC_DAM_01;
   1a498:	785a      	ldrb	r2, [r3, #1]
   1a49a:	f042 0201 	orr.w	r2, r2, #1
   1a49e:	705a      	strb	r2, [r3, #1]
				memcpy(&IPHC[offset], &ipv6->dst.s6_addr[8], 8);
   1a4a0:	68b0      	ldr	r0, [r6, #8]
   1a4a2:	2208      	movs	r2, #8
   1a4a4:	4420      	add	r0, r4
   1a4a6:	f105 0120 	add.w	r1, r5, #32
   1a4aa:	f7e6 fa1e 	bl	8ea <memcpy>
				offset += 8;
   1a4ae:	3408      	adds	r4, #8
		offset += 16;
   1a4b0:	b2e4      	uxtb	r4, r4
	if (!offset) {
   1a4b2:	2c00      	cmp	r4, #0
   1a4b4:	f47f aea3 	bne.w	1a1fe <net_6lo_compress+0x23e>
   1a4b8:	e7a2      	b.n	1a400 <net_6lo_compress+0x440>
	...

0001a4bc <net_6lo_uncompress>:

bool net_6lo_uncompress(struct net_pkt *pkt)
{
   1a4bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NET_ASSERT(pkt && pkt->frags);

	if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPHC) ==
   1a4c0:	6884      	ldr	r4, [r0, #8]
   1a4c2:	68a3      	ldr	r3, [r4, #8]
   1a4c4:	781a      	ldrb	r2, [r3, #0]
   1a4c6:	f002 0860 	and.w	r8, r2, #96	; 0x60
   1a4ca:	f1b8 0f60 	cmp.w	r8, #96	; 0x60
{
   1a4ce:	4606      	mov	r6, r0
	if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPHC) ==
   1a4d0:	f040 8200 	bne.w	1a8d4 <net_6lo_uncompress+0x418>
	if (CIPHC[1] & NET_6LO_IPHC_CID_1) {
   1a4d4:	f993 3001 	ldrsb.w	r3, [r3, #1]
   1a4d8:	2b00      	cmp	r3, #0
   1a4da:	da03      	bge.n	1a4e4 <net_6lo_uncompress+0x28>
	return false;
   1a4dc:	2000      	movs	r0, #0
	}

	NET_DBG("pkt %p is not compressed", pkt);

	return true;
}
   1a4de:	b003      	add	sp, #12
   1a4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_pkt_get_frag(pkt, NET_6LO_RX_PKT_TIMEOUT);
   1a4e4:	2164      	movs	r1, #100	; 0x64
   1a4e6:	f7ff f851 	bl	1958c <net_pkt_get_frag>
	if (!frag) {
   1a4ea:	4607      	mov	r7, r0
   1a4ec:	2800      	cmp	r0, #0
   1a4ee:	d0f5      	beq.n	1a4dc <net_6lo_uncompress+0x20>
	ipv6 = (struct net_ipv6_hdr *)(frag->data);
   1a4f0:	6885      	ldr	r5, [r0, #8]
	pkt->ip_hdr_len = len;
   1a4f2:	2328      	movs	r3, #40	; 0x28
	ipv6->vtc = 0x60;
   1a4f4:	f885 8000 	strb.w	r8, [r5]
   1a4f8:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   1a4fc:	68b3      	ldr	r3, [r6, #8]
   1a4fe:	6899      	ldr	r1, [r3, #8]
   1a500:	780b      	ldrb	r3, [r1, #0]
   1a502:	f003 0318 	and.w	r3, r3, #24
   1a506:	2b08      	cmp	r3, #8
   1a508:	d054      	beq.n	1a5b4 <net_6lo_uncompress+0xf8>
   1a50a:	d802      	bhi.n	1a512 <net_6lo_uncompress+0x56>
   1a50c:	b153      	cbz	r3, 1a524 <net_6lo_uncompress+0x68>
   1a50e:	2402      	movs	r4, #2
   1a510:	e01d      	b.n	1a54e <net_6lo_uncompress+0x92>
   1a512:	2b10      	cmp	r3, #16
   1a514:	d05c      	beq.n	1a5d0 <net_6lo_uncompress+0x114>
   1a516:	2b18      	cmp	r3, #24
   1a518:	d1f9      	bne.n	1a50e <net_6lo_uncompress+0x52>
		ipv6->tcflow = 0;
   1a51a:	2300      	movs	r3, #0
   1a51c:	706b      	strb	r3, [r5, #1]
		ipv6->flow = 0;
   1a51e:	70ab      	strb	r3, [r5, #2]
   1a520:	70eb      	strb	r3, [r5, #3]
   1a522:	e7f4      	b.n	1a50e <net_6lo_uncompress+0x52>
		tcl = CIPHC[offset++];
   1a524:	788a      	ldrb	r2, [r1, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   1a526:	0093      	lsls	r3, r2, #2
   1a528:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   1a52c:	782a      	ldrb	r2, [r5, #0]
		tcl = (tcl >> 6) | (tcl << 2);
   1a52e:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   1a530:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   1a534:	702a      	strb	r2, [r5, #0]
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   1a536:	78ca      	ldrb	r2, [r1, #3]
   1a538:	f002 020f 	and.w	r2, r2, #15
   1a53c:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   1a540:	2202      	movs	r2, #2
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   1a542:	706b      	strb	r3, [r5, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   1a544:	3104      	adds	r1, #4
   1a546:	18a8      	adds	r0, r5, r2
   1a548:	f7e6 f9cf 	bl	8ea <memcpy>
		offset += 2;
   1a54c:	2406      	movs	r4, #6
	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   1a54e:	68b3      	ldr	r3, [r6, #8]
   1a550:	689a      	ldr	r2, [r3, #8]
   1a552:	7813      	ldrb	r3, [r2, #0]
   1a554:	075b      	lsls	r3, r3, #29
		ipv6->nexthdr = CIPHC[offset];
   1a556:	bf5c      	itt	pl
   1a558:	5d13      	ldrbpl	r3, [r2, r4]
   1a55a:	71ab      	strbpl	r3, [r5, #6]
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   1a55c:	7813      	ldrb	r3, [r2, #0]
		offset++;
   1a55e:	bf58      	it	pl
   1a560:	3401      	addpl	r4, #1
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   1a562:	f003 0303 	and.w	r3, r3, #3
		offset++;
   1a566:	bf58      	it	pl
   1a568:	b2e4      	uxtbpl	r4, r4
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   1a56a:	2b02      	cmp	r3, #2
   1a56c:	d040      	beq.n	1a5f0 <net_6lo_uncompress+0x134>
   1a56e:	2b03      	cmp	r3, #3
   1a570:	d041      	beq.n	1a5f6 <net_6lo_uncompress+0x13a>
   1a572:	2b01      	cmp	r3, #1
   1a574:	d03d      	beq.n	1a5f2 <net_6lo_uncompress+0x136>
		ipv6->hop_limit = CIPHC[offset++];
   1a576:	5d12      	ldrb	r2, [r2, r4]
   1a578:	71ea      	strb	r2, [r5, #7]
   1a57a:	1c63      	adds	r3, r4, #1
   1a57c:	b2dc      	uxtb	r4, r3
	memset(&ipv6->src.s6_addr[0], 0, 16);
   1a57e:	f105 0908 	add.w	r9, r5, #8
   1a582:	2210      	movs	r2, #16
   1a584:	2100      	movs	r1, #0
   1a586:	4648      	mov	r0, r9
	memset(&ipv6->dst.s6_addr[0], 0, 16);
   1a588:	f105 0818 	add.w	r8, r5, #24
	memset(&ipv6->src.s6_addr[0], 0, 16);
   1a58c:	f7e6 f9d9 	bl	942 <memset>
	memset(&ipv6->dst.s6_addr[0], 0, 16);
   1a590:	2100      	movs	r1, #0
   1a592:	2210      	movs	r2, #16
   1a594:	4640      	mov	r0, r8
   1a596:	f7e6 f9d4 	bl	942 <memset>
	if (CIPHC[1] & NET_6LO_IPHC_SAC_1) {
   1a59a:	68b3      	ldr	r3, [r6, #8]
   1a59c:	6899      	ldr	r1, [r3, #8]
   1a59e:	784b      	ldrb	r3, [r1, #1]
   1a5a0:	f013 0f40 	tst.w	r3, #64	; 0x40
   1a5a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
   1a5a8:	d027      	beq.n	1a5fa <net_6lo_uncompress+0x13e>
		if ((CIPHC[1] & NET_6LO_IPHC_SAM_11) == NET_6LO_IPHC_SAM_00) {
   1a5aa:	b35b      	cbz	r3, 1a604 <net_6lo_uncompress+0x148>
	net_pkt_frag_unref(frag);
   1a5ac:	4638      	mov	r0, r7
   1a5ae:	f7ff f808 	bl	195c2 <net_pkt_frag_unref>
   1a5b2:	e793      	b.n	1a4dc <net_6lo_uncompress+0x20>
		tcl = ((CIPHC[offset] & 0xF0) >> 6);
   1a5b4:	788b      	ldrb	r3, [r1, #2]
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   1a5b6:	099a      	lsrs	r2, r3, #6
   1a5b8:	f003 030f 	and.w	r3, r3, #15
   1a5bc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   1a5c0:	2202      	movs	r2, #2
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   1a5c2:	706b      	strb	r3, [r5, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   1a5c4:	3103      	adds	r1, #3
   1a5c6:	18a8      	adds	r0, r5, r2
   1a5c8:	f7e6 f98f 	bl	8ea <memcpy>
		offset += 2;
   1a5cc:	2405      	movs	r4, #5
   1a5ce:	e7be      	b.n	1a54e <net_6lo_uncompress+0x92>
		tcl = CIPHC[offset];
   1a5d0:	788a      	ldrb	r2, [r1, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   1a5d2:	0093      	lsls	r3, r2, #2
   1a5d4:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   1a5d8:	782a      	ldrb	r2, [r5, #0]
		tcl = (tcl >> 6) | (tcl << 2);
   1a5da:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   1a5dc:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
		ipv6->tcflow = (tcl & 0x0F) << 4;
   1a5e0:	011b      	lsls	r3, r3, #4
   1a5e2:	706b      	strb	r3, [r5, #1]
		ipv6->flow = 0;
   1a5e4:	2300      	movs	r3, #0
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   1a5e6:	702a      	strb	r2, [r5, #0]
		ipv6->flow = 0;
   1a5e8:	70ab      	strb	r3, [r5, #2]
   1a5ea:	70eb      	strb	r3, [r5, #3]
		offset++;
   1a5ec:	2403      	movs	r4, #3
   1a5ee:	e7ae      	b.n	1a54e <net_6lo_uncompress+0x92>
		ipv6->hop_limit = 64;
   1a5f0:	2340      	movs	r3, #64	; 0x40
		ipv6->hop_limit = 255;
   1a5f2:	71eb      	strb	r3, [r5, #7]
   1a5f4:	e7c3      	b.n	1a57e <net_6lo_uncompress+0xc2>
   1a5f6:	23ff      	movs	r3, #255	; 0xff
   1a5f8:	e7fb      	b.n	1a5f2 <net_6lo_uncompress+0x136>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   1a5fa:	b2db      	uxtb	r3, r3
   1a5fc:	2b10      	cmp	r3, #16
   1a5fe:	d02b      	beq.n	1a658 <net_6lo_uncompress+0x19c>
   1a600:	d818      	bhi.n	1a634 <net_6lo_uncompress+0x178>
   1a602:	b30b      	cbz	r3, 1a648 <net_6lo_uncompress+0x18c>
	if (CIPHC[1] & NET_6LO_IPHC_M_1) {
   1a604:	68b3      	ldr	r3, [r6, #8]
   1a606:	6899      	ldr	r1, [r3, #8]
   1a608:	784a      	ldrb	r2, [r1, #1]
   1a60a:	0710      	lsls	r0, r2, #28
   1a60c:	f140 80ec 	bpl.w	1a7e8 <net_6lo_uncompress+0x32c>
	if (CIPHC[1] & NET_6LO_IPHC_DAC_1) {
   1a610:	0753      	lsls	r3, r2, #29
   1a612:	f100 8115 	bmi.w	1a840 <net_6lo_uncompress+0x384>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   1a616:	f002 0203 	and.w	r2, r2, #3
   1a61a:	2a02      	cmp	r2, #2
   1a61c:	d046      	beq.n	1a6ac <net_6lo_uncompress+0x1f0>
   1a61e:	2a03      	cmp	r2, #3
   1a620:	d052      	beq.n	1a6c8 <net_6lo_uncompress+0x20c>
   1a622:	2a01      	cmp	r2, #1
   1a624:	d033      	beq.n	1a68e <net_6lo_uncompress+0x1d2>
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   1a626:	2210      	movs	r2, #16
   1a628:	4421      	add	r1, r4
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   1a62a:	4640      	mov	r0, r8
   1a62c:	f7e6 f95d 	bl	8ea <memcpy>
		offset += 16;
   1a630:	3410      	adds	r4, #16
   1a632:	e039      	b.n	1a6a8 <net_6lo_uncompress+0x1ec>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   1a634:	2b20      	cmp	r3, #32
   1a636:	d01b      	beq.n	1a670 <net_6lo_uncompress+0x1b4>
   1a638:	2b30      	cmp	r3, #48	; 0x30
   1a63a:	d1e3      	bne.n	1a604 <net_6lo_uncompress+0x148>
		net_ipv6_addr_create_iid(&ipv6->src, net_pkt_ll_src(pkt));
   1a63c:	f106 0120 	add.w	r1, r6, #32
   1a640:	4648      	mov	r0, r9
   1a642:	f7ff fc1d 	bl	19e80 <net_ipv6_addr_create_iid>
   1a646:	e7dd      	b.n	1a604 <net_6lo_uncompress+0x148>
		memcpy(ipv6->src.s6_addr, &CIPHC[offset], 16);
   1a648:	4421      	add	r1, r4
   1a64a:	2210      	movs	r2, #16
   1a64c:	4648      	mov	r0, r9
   1a64e:	f7e6 f94c 	bl	8ea <memcpy>
		offset += 16;
   1a652:	3410      	adds	r4, #16
		offset += 2;
   1a654:	b2e4      	uxtb	r4, r4
   1a656:	e7d5      	b.n	1a604 <net_6lo_uncompress+0x148>
		ipv6->src.s6_addr[0] = 0xFE;
   1a658:	23fe      	movs	r3, #254	; 0xfe
   1a65a:	722b      	strb	r3, [r5, #8]
		ipv6->src.s6_addr[1] = 0x80;
   1a65c:	2380      	movs	r3, #128	; 0x80
		memcpy(&ipv6->src.s6_addr[8], &CIPHC[offset], 8);
   1a65e:	4421      	add	r1, r4
		ipv6->src.s6_addr[1] = 0x80;
   1a660:	726b      	strb	r3, [r5, #9]
		memcpy(&ipv6->src.s6_addr[8], &CIPHC[offset], 8);
   1a662:	2208      	movs	r2, #8
   1a664:	f105 0010 	add.w	r0, r5, #16
   1a668:	f7e6 f93f 	bl	8ea <memcpy>
		offset += 8;
   1a66c:	3408      	adds	r4, #8
   1a66e:	e7f1      	b.n	1a654 <net_6lo_uncompress+0x198>
		ipv6->src.s6_addr[1] = 0x80;
   1a670:	2280      	movs	r2, #128	; 0x80
		ipv6->src.s6_addr[0] = 0xFE;
   1a672:	23fe      	movs	r3, #254	; 0xfe
		ipv6->src.s6_addr[1] = 0x80;
   1a674:	726a      	strb	r2, [r5, #9]
		ipv6->src.s6_addr[11] = 0xFF;
   1a676:	22ff      	movs	r2, #255	; 0xff
   1a678:	74ea      	strb	r2, [r5, #19]
		memcpy(&ipv6->src.s6_addr[14], &CIPHC[offset], 2);
   1a67a:	4421      	add	r1, r4
		ipv6->src.s6_addr[0] = 0xFE;
   1a67c:	722b      	strb	r3, [r5, #8]
		ipv6->src.s6_addr[12] = 0xFE;
   1a67e:	752b      	strb	r3, [r5, #20]
		memcpy(&ipv6->src.s6_addr[14], &CIPHC[offset], 2);
   1a680:	2202      	movs	r2, #2
   1a682:	f105 0016 	add.w	r0, r5, #22
   1a686:	f7e6 f930 	bl	8ea <memcpy>
		offset += 2;
   1a68a:	3402      	adds	r4, #2
   1a68c:	e7e2      	b.n	1a654 <net_6lo_uncompress+0x198>
		ipv6->dst.s6_addr[0] = 0xFF;
   1a68e:	23ff      	movs	r3, #255	; 0xff
   1a690:	762b      	strb	r3, [r5, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   1a692:	5d0b      	ldrb	r3, [r1, r4]
   1a694:	766b      	strb	r3, [r5, #25]
   1a696:	1c63      	adds	r3, r4, #1
		memcpy(&ipv6->dst.s6_addr[11], &CIPHC[offset], 5);
   1a698:	2205      	movs	r2, #5
   1a69a:	fa51 f183 	uxtab	r1, r1, r3
   1a69e:	f105 0023 	add.w	r0, r5, #35	; 0x23
   1a6a2:	f7e6 f922 	bl	8ea <memcpy>
		offset += 5;
   1a6a6:	3406      	adds	r4, #6
		offset += 2;
   1a6a8:	b2e4      	uxtb	r4, r4
   1a6aa:	e016      	b.n	1a6da <net_6lo_uncompress+0x21e>
		ipv6->dst.s6_addr[0] = 0xFF;
   1a6ac:	23ff      	movs	r3, #255	; 0xff
   1a6ae:	762b      	strb	r3, [r5, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   1a6b0:	5d0b      	ldrb	r3, [r1, r4]
   1a6b2:	766b      	strb	r3, [r5, #25]
   1a6b4:	1c63      	adds	r3, r4, #1
		memcpy(&ipv6->dst.s6_addr[13], &CIPHC[offset], 3);
   1a6b6:	2203      	movs	r2, #3
   1a6b8:	fa51 f183 	uxtab	r1, r1, r3
   1a6bc:	f105 0025 	add.w	r0, r5, #37	; 0x25
   1a6c0:	f7e6 f913 	bl	8ea <memcpy>
		offset += 3;
   1a6c4:	3404      	adds	r4, #4
   1a6c6:	e7ef      	b.n	1a6a8 <net_6lo_uncompress+0x1ec>
		ipv6->dst.s6_addr[0] = 0xFF;
   1a6c8:	23ff      	movs	r3, #255	; 0xff
   1a6ca:	762b      	strb	r3, [r5, #24]
		ipv6->dst.s6_addr[1] = 0x02;
   1a6cc:	2302      	movs	r3, #2
   1a6ce:	766b      	strb	r3, [r5, #25]
		ipv6->dst.s6_addr[15] = CIPHC[offset++];
   1a6d0:	5d0a      	ldrb	r2, [r1, r4]
   1a6d2:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
   1a6d6:	1c63      	adds	r3, r4, #1
   1a6d8:	b2dc      	uxtb	r4, r3
	net_buf_add(frag, NET_IPV6H_LEN);
   1a6da:	f107 0308 	add.w	r3, r7, #8
   1a6de:	2128      	movs	r1, #40	; 0x28
   1a6e0:	4618      	mov	r0, r3
   1a6e2:	9301      	str	r3, [sp, #4]
   1a6e4:	f7fd fa72 	bl	17bcc <net_buf_simple_add>
	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   1a6e8:	68b3      	ldr	r3, [r6, #8]
   1a6ea:	6899      	ldr	r1, [r3, #8]
   1a6ec:	f891 8000 	ldrb.w	r8, [r1]
   1a6f0:	f018 0804 	ands.w	r8, r8, #4
   1a6f4:	f000 80d8 	beq.w	1a8a8 <net_6lo_uncompress+0x3ec>
	if ((CIPHC[offset] & 0xF0) != NET_6LO_NHC_UDP_BARE) {
   1a6f8:	5d0b      	ldrb	r3, [r1, r4]
   1a6fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1a6fe:	2bf0      	cmp	r3, #240	; 0xf0
   1a700:	f47f af54 	bne.w	1a5ac <net_6lo_uncompress+0xf0>
	ipv6->nexthdr = IPPROTO_UDP;
   1a704:	2311      	movs	r3, #17
   1a706:	71ab      	strb	r3, [r5, #6]
	chksum = CIPHC[offset] & NET_6LO_NHC_UDP_CHKSUM_1;
   1a708:	5d0a      	ldrb	r2, [r1, r4]
	udp = (struct net_udp_hdr *)(frag->data + NET_IPV6H_LEN);
   1a70a:	f8d7 b008 	ldr.w	fp, [r7, #8]
	chksum = CIPHC[offset] & NET_6LO_NHC_UDP_CHKSUM_1;
   1a70e:	f002 0808 	and.w	r8, r2, #8
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   1a712:	f002 0203 	and.w	r2, r2, #3
   1a716:	1c60      	adds	r0, r4, #1
   1a718:	2a02      	cmp	r2, #2
	udp = (struct net_udp_hdr *)(frag->data + NET_IPV6H_LEN);
   1a71a:	f10b 0928 	add.w	r9, fp, #40	; 0x28
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   1a71e:	b2c0      	uxtb	r0, r0
   1a720:	f000 809f 	beq.w	1a862 <net_6lo_uncompress+0x3a6>
   1a724:	2a03      	cmp	r2, #3
   1a726:	f000 80aa 	beq.w	1a87e <net_6lo_uncompress+0x3c2>
   1a72a:	2a01      	cmp	r2, #1
   1a72c:	4401      	add	r1, r0
   1a72e:	f104 0a03 	add.w	sl, r4, #3
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   1a732:	f04f 0202 	mov.w	r2, #2
   1a736:	4648      	mov	r0, r9
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   1a738:	f000 8084 	beq.w	1a844 <net_6lo_uncompress+0x388>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   1a73c:	f7e6 f8d5 	bl	8ea <memcpy>
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   1a740:	68b2      	ldr	r2, [r6, #8]
   1a742:	6891      	ldr	r1, [r2, #8]
   1a744:	f10b 002a 	add.w	r0, fp, #42	; 0x2a
   1a748:	2202      	movs	r2, #2
   1a74a:	fa51 f18a 	uxtab	r1, r1, sl
   1a74e:	f7e6 f8cc 	bl	8ea <memcpy>
		offset += 2;
   1a752:	3405      	adds	r4, #5
		offset++;
   1a754:	b2e4      	uxtb	r4, r4
	if (!chksum) {
   1a756:	f1b8 0f00 	cmp.w	r8, #0
   1a75a:	d109      	bne.n	1a770 <net_6lo_uncompress+0x2b4>
		memcpy(&udp->chksum, &CIPHC[offset], 2);
   1a75c:	68b2      	ldr	r2, [r6, #8]
   1a75e:	6891      	ldr	r1, [r2, #8]
   1a760:	f10b 002e 	add.w	r0, fp, #46	; 0x2e
   1a764:	4421      	add	r1, r4
   1a766:	2202      	movs	r2, #2
   1a768:	f7e6 f8bf 	bl	8ea <memcpy>
		offset += 2;
   1a76c:	3402      	adds	r4, #2
   1a76e:	b2e4      	uxtb	r4, r4
	net_buf_add(frag, NET_UDPH_LEN);
   1a770:	2108      	movs	r1, #8
   1a772:	9801      	ldr	r0, [sp, #4]
   1a774:	f7fd fa2a 	bl	17bcc <net_buf_simple_add>
	if (pkt->frags->len < offset) {
   1a778:	68b3      	ldr	r3, [r6, #8]
   1a77a:	899a      	ldrh	r2, [r3, #12]
   1a77c:	fa1f fa84 	uxth.w	sl, r4
   1a780:	4552      	cmp	r2, sl
   1a782:	f4ff af13 	bcc.w	1a5ac <net_6lo_uncompress+0xf0>
	memmove(pkt->frags->data, pkt->frags->data + offset,
   1a786:	6898      	ldr	r0, [r3, #8]
   1a788:	1b12      	subs	r2, r2, r4
   1a78a:	1901      	adds	r1, r0, r4
   1a78c:	f7e6 f895 	bl	8ba <memmove>
	memcpy(&lo_packet , pkt->frags->data,  pkt->frags->len - offset);
   1a790:	68b3      	ldr	r3, [r6, #8]
   1a792:	4857      	ldr	r0, [pc, #348]	; (1a8f0 <net_6lo_uncompress+0x434>)
   1a794:	899a      	ldrh	r2, [r3, #12]
   1a796:	6899      	ldr	r1, [r3, #8]
   1a798:	1b12      	subs	r2, r2, r4
   1a79a:	f7e6 f8a6 	bl	8ea <memcpy>
	pkt->frags->len -= offset;
   1a79e:	68b2      	ldr	r2, [r6, #8]
   1a7a0:	8993      	ldrh	r3, [r2, #12]
   1a7a2:	eba3 030a 	sub.w	r3, r3, sl
   1a7a6:	8193      	strh	r3, [r2, #12]
   1a7a8:	f896 2034 	ldrb.w	r2, [r6, #52]	; 0x34
	if (net_pkt_ll_reserve(pkt)) {
   1a7ac:	b13a      	cbz	r2, 1a7be <net_6lo_uncompress+0x302>
	return pkt->frags->data;
   1a7ae:	68b3      	ldr	r3, [r6, #8]
	return net_pkt_ip_data(pkt) - net_pkt_ll_reserve(pkt);
   1a7b0:	6899      	ldr	r1, [r3, #8]
		memcpy(frag->data - net_pkt_ll_reserve(pkt),
   1a7b2:	68bb      	ldr	r3, [r7, #8]
   1a7b4:	4250      	negs	r0, r2
   1a7b6:	4401      	add	r1, r0
   1a7b8:	4418      	add	r0, r3
   1a7ba:	f7e6 f896 	bl	8ea <memcpy>
	net_pkt_frag_insert(pkt, frag);
   1a7be:	4639      	mov	r1, r7
   1a7c0:	4630      	mov	r0, r6
   1a7c2:	f7fe ff43 	bl	1964c <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   1a7c6:	4630      	mov	r0, r6
   1a7c8:	f7fe ffad 	bl	19726 <net_pkt_compact>
   1a7cc:	68b2      	ldr	r2, [r6, #8]
	size_t bytes = 0;
   1a7ce:	2300      	movs	r3, #0
	while (buf) {
   1a7d0:	2a00      	cmp	r2, #0
   1a7d2:	d16b      	bne.n	1a8ac <net_6lo_uncompress+0x3f0>
	len = net_pkt_get_len(pkt) - NET_IPV6H_LEN;
   1a7d4:	3b28      	subs	r3, #40	; 0x28
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   1a7d6:	79a9      	ldrb	r1, [r5, #6]
	len = net_pkt_get_len(pkt) - NET_IPV6H_LEN;
   1a7d8:	b29b      	uxth	r3, r3
	ipv6->len[0] = len >> 8;
   1a7da:	0a1a      	lsrs	r2, r3, #8
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   1a7dc:	2911      	cmp	r1, #17
	ipv6->len[0] = len >> 8;
   1a7de:	712a      	strb	r2, [r5, #4]
	ipv6->len[1] = (u8_t)len;
   1a7e0:	716b      	strb	r3, [r5, #5]
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   1a7e2:	d067      	beq.n	1a8b4 <net_6lo_uncompress+0x3f8>
		return uncompress_ipv6_header(pkt);
   1a7e4:	2001      	movs	r0, #1
   1a7e6:	e67a      	b.n	1a4de <net_6lo_uncompress+0x22>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   1a7e8:	f002 0203 	and.w	r2, r2, #3
   1a7ec:	2a02      	cmp	r2, #2
   1a7ee:	d011      	beq.n	1a814 <net_6lo_uncompress+0x358>
   1a7f0:	2a03      	cmp	r2, #3
   1a7f2:	d01f      	beq.n	1a834 <net_6lo_uncompress+0x378>
   1a7f4:	2a01      	cmp	r2, #1
   1a7f6:	4421      	add	r1, r4
   1a7f8:	d001      	beq.n	1a7fe <net_6lo_uncompress+0x342>
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   1a7fa:	2210      	movs	r2, #16
   1a7fc:	e715      	b.n	1a62a <net_6lo_uncompress+0x16e>
		ipv6->dst.s6_addr[0] = 0xFE;
   1a7fe:	23fe      	movs	r3, #254	; 0xfe
   1a800:	762b      	strb	r3, [r5, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   1a802:	2380      	movs	r3, #128	; 0x80
   1a804:	766b      	strb	r3, [r5, #25]
		memcpy(&ipv6->dst.s6_addr[8], &CIPHC[offset], 8);
   1a806:	2208      	movs	r2, #8
   1a808:	f105 0020 	add.w	r0, r5, #32
   1a80c:	f7e6 f86d 	bl	8ea <memcpy>
		offset += 8;
   1a810:	3408      	adds	r4, #8
   1a812:	e749      	b.n	1a6a8 <net_6lo_uncompress+0x1ec>
		ipv6->dst.s6_addr[1] = 0x80;
   1a814:	2080      	movs	r0, #128	; 0x80
		ipv6->dst.s6_addr[0] = 0xFE;
   1a816:	23fe      	movs	r3, #254	; 0xfe
		ipv6->dst.s6_addr[1] = 0x80;
   1a818:	7668      	strb	r0, [r5, #25]
		ipv6->dst.s6_addr[11] = 0xFF;
   1a81a:	20ff      	movs	r0, #255	; 0xff
   1a81c:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
		memcpy(&ipv6->dst.s6_addr[14], &CIPHC[offset], 2);
   1a820:	4421      	add	r1, r4
		ipv6->dst.s6_addr[0] = 0xFE;
   1a822:	762b      	strb	r3, [r5, #24]
		ipv6->dst.s6_addr[12] = 0xFE;
   1a824:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
		memcpy(&ipv6->dst.s6_addr[14], &CIPHC[offset], 2);
   1a828:	f105 0026 	add.w	r0, r5, #38	; 0x26
   1a82c:	f7e6 f85d 	bl	8ea <memcpy>
		offset += 2;
   1a830:	3402      	adds	r4, #2
   1a832:	e739      	b.n	1a6a8 <net_6lo_uncompress+0x1ec>
		net_ipv6_addr_create_iid(&ipv6->dst, net_pkt_ll_dst(pkt));
   1a834:	f106 0128 	add.w	r1, r6, #40	; 0x28
   1a838:	4640      	mov	r0, r8
   1a83a:	f7ff fb21 	bl	19e80 <net_ipv6_addr_create_iid>
   1a83e:	e74c      	b.n	1a6da <net_6lo_uncompress+0x21e>
		return 0;
   1a840:	2400      	movs	r4, #0
   1a842:	e74a      	b.n	1a6da <net_6lo_uncompress+0x21e>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   1a844:	f7e6 f851 	bl	8ea <memcpy>
		udp->dst_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   1a848:	68b2      	ldr	r2, [r6, #8]
   1a84a:	fa5f fa8a 	uxtb.w	sl, sl
   1a84e:	6892      	ldr	r2, [r2, #8]
   1a850:	f812 200a 	ldrb.w	r2, [r2, sl]
   1a854:	0212      	lsls	r2, r2, #8
   1a856:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
   1a85a:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
		offset += 2;
   1a85e:	3404      	adds	r4, #4
   1a860:	e778      	b.n	1a754 <net_6lo_uncompress+0x298>
		udp->src_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   1a862:	5c08      	ldrb	r0, [r1, r0]
   1a864:	0200      	lsls	r0, r0, #8
   1a866:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
   1a86a:	f8ab 0028 	strh.w	r0, [fp, #40]	; 0x28
		offset++;
   1a86e:	1ca0      	adds	r0, r4, #2
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   1a870:	fa51 f180 	uxtab	r1, r1, r0
   1a874:	f10b 002a 	add.w	r0, fp, #42	; 0x2a
   1a878:	f7e6 f837 	bl	8ea <memcpy>
   1a87c:	e7ef      	b.n	1a85e <net_6lo_uncompress+0x3a2>
		udp->src_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   1a87e:	5c0a      	ldrb	r2, [r1, r0]
   1a880:	0912      	lsrs	r2, r2, #4
   1a882:	0212      	lsls	r2, r2, #8
   1a884:	f442 4230 	orr.w	r2, r2, #45056	; 0xb000
   1a888:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
   1a88c:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
		udp->dst_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   1a890:	5c0a      	ldrb	r2, [r1, r0]
   1a892:	0212      	lsls	r2, r2, #8
   1a894:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
   1a898:	f442 4230 	orr.w	r2, r2, #45056	; 0xb000
   1a89c:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
   1a8a0:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
		offset++;
   1a8a4:	3402      	adds	r4, #2
   1a8a6:	e755      	b.n	1a754 <net_6lo_uncompress+0x298>
	struct net_udp_hdr *udp = NULL;
   1a8a8:	46c1      	mov	r9, r8
   1a8aa:	e765      	b.n	1a778 <net_6lo_uncompress+0x2bc>
		bytes += buf->len;
   1a8ac:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
   1a8ae:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   1a8b0:	440b      	add	r3, r1
   1a8b2:	e78d      	b.n	1a7d0 <net_6lo_uncompress+0x314>
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   1a8b4:	f1b9 0f00 	cmp.w	r9, #0
   1a8b8:	d094      	beq.n	1a7e4 <net_6lo_uncompress+0x328>
		udp->len = htons(len);
   1a8ba:	ba5b      	rev16	r3, r3
   1a8bc:	f8a9 3004 	strh.w	r3, [r9, #4]
		if (chksum) {
   1a8c0:	f1b8 0f00 	cmp.w	r8, #0
   1a8c4:	d08e      	beq.n	1a7e4 <net_6lo_uncompress+0x328>
	return net_calc_chksum(pkt, IPPROTO_ICMP);
}

static inline u16_t net_calc_chksum_udp(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_UDP);
   1a8c6:	4630      	mov	r0, r6
   1a8c8:	f7ff f9d6 	bl	19c78 <net_calc_chksum>
			udp->chksum = ~net_calc_chksum_udp(pkt);
   1a8cc:	43c0      	mvns	r0, r0
   1a8ce:	f8a9 0006 	strh.w	r0, [r9, #6]
   1a8d2:	e787      	b.n	1a7e4 <net_6lo_uncompress+0x328>
	} else if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPV6) ==
   1a8d4:	f002 0241 	and.w	r2, r2, #65	; 0x41
   1a8d8:	2a41      	cmp	r2, #65	; 0x41
   1a8da:	d183      	bne.n	1a7e4 <net_6lo_uncompress+0x328>
	memmove(frag->data, frag->data + 1, frag->len - 1);
   1a8dc:	89a2      	ldrh	r2, [r4, #12]
   1a8de:	1c59      	adds	r1, r3, #1
   1a8e0:	4618      	mov	r0, r3
   1a8e2:	3a01      	subs	r2, #1
   1a8e4:	f7e5 ffe9 	bl	8ba <memmove>
	frag->len -= 1;
   1a8e8:	89a3      	ldrh	r3, [r4, #12]
   1a8ea:	3b01      	subs	r3, #1
   1a8ec:	81a3      	strh	r3, [r4, #12]
   1a8ee:	e779      	b.n	1a7e4 <net_6lo_uncompress+0x328>
   1a8f0:	20004ba8 	.word	0x20004ba8

0001a8f4 <net_icmpv6_register_handler>:
	node->next = list->head;
   1a8f4:	4b03      	ldr	r3, [pc, #12]	; (1a904 <net_icmpv6_register_handler+0x10>)
   1a8f6:	681a      	ldr	r2, [r3, #0]
   1a8f8:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
   1a8fa:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1a8fc:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
   1a8fe:	b902      	cbnz	r2, 1a902 <net_icmpv6_register_handler+0xe>
		list->tail = list->head;
   1a900:	6058      	str	r0, [r3, #4]
   1a902:	4770      	bx	lr
   1a904:	20003100 	.word	0x20003100

0001a908 <net_icmpv6_set_chksum>:
#define echo_reply_debug(pkt)
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

struct net_buf *net_icmpv6_set_chksum(struct net_pkt *pkt,
				      struct net_buf *frag)
{
   1a908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a90c:	b086      	sub	sp, #24
	struct net_icmp_hdr *icmp_hdr;
	u16_t chksum = 0;
   1a90e:	2700      	movs	r7, #0
{
   1a910:	4604      	mov	r4, r0
   1a912:	460e      	mov	r6, r1
	u16_t chksum = 0;
   1a914:	f8ad 7014 	strh.w	r7, [sp, #20]
	u16_t pos;

	icmp_hdr = net_pkt_icmp_data(pkt);
   1a918:	f7ff f890 	bl	19a3c <net_pkt_icmp_data>
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1a91c:	2204      	movs	r2, #4
   1a91e:	4605      	mov	r5, r0
   1a920:	4601      	mov	r1, r0
   1a922:	4620      	mov	r0, r4
   1a924:	f7ff f9fb 	bl	19d1e <net_header_fits>
   1a928:	b160      	cbz	r0, 1a944 <net_icmpv6_set_chksum+0x3c>
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1a92a:	b15d      	cbz	r5, 1a944 <net_icmpv6_set_chksum+0x3c>
		icmp_hdr->chksum = 0;
   1a92c:	70af      	strb	r7, [r5, #2]
   1a92e:	70ef      	strb	r7, [r5, #3]
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1a930:	213a      	movs	r1, #58	; 0x3a
   1a932:	4620      	mov	r0, r4
   1a934:	f7ff f9a0 	bl	19c78 <net_calc_chksum>
		icmp_hdr->chksum = ~net_calc_chksum_icmpv6(pkt);
   1a938:	43c0      	mvns	r0, r0
   1a93a:	8068      	strh	r0, [r5, #2]
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   1a93c:	4630      	mov	r0, r6
   1a93e:	b006      	add	sp, #24
   1a940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			     net_pkt_ipv6_ext_len(pkt) +
   1a944:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt) +
   1a948:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
   1a94c:	2702      	movs	r7, #2
   1a94e:	441a      	add	r2, r3
   1a950:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   1a954:	ad05      	add	r5, sp, #20
   1a956:	f10d 0316 	add.w	r3, sp, #22
   1a95a:	443a      	add	r2, r7
   1a95c:	4631      	mov	r1, r6
   1a95e:	f8cd 8008 	str.w	r8, [sp, #8]
   1a962:	9501      	str	r5, [sp, #4]
   1a964:	9700      	str	r7, [sp, #0]
   1a966:	4620      	mov	r0, r4
   1a968:	f7fe ffd6 	bl	19918 <net_pkt_write>
   1a96c:	213a      	movs	r1, #58	; 0x3a
   1a96e:	4606      	mov	r6, r0
   1a970:	4620      	mov	r0, r4
   1a972:	f7ff f981 	bl	19c78 <net_calc_chksum>
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1a976:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1a97a:	f8cd 8008 	str.w	r8, [sp, #8]
	chksum = ~net_calc_chksum_icmpv6(pkt);
   1a97e:	43c0      	mvns	r0, r0
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1a980:	3a02      	subs	r2, #2
	chksum = ~net_calc_chksum_icmpv6(pkt);
   1a982:	f8ad 0014 	strh.w	r0, [sp, #20]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1a986:	4631      	mov	r1, r6
   1a988:	9501      	str	r5, [sp, #4]
   1a98a:	9700      	str	r7, [sp, #0]
   1a98c:	f10d 0316 	add.w	r3, sp, #22
   1a990:	b292      	uxth	r2, r2
   1a992:	4620      	mov	r0, r4
   1a994:	f7fe ffc0 	bl	19918 <net_pkt_write>
   1a998:	4606      	mov	r6, r0
	return frag;
   1a99a:	e7cf      	b.n	1a93c <net_icmpv6_set_chksum+0x34>

0001a99c <net_icmpv6_get_hdr>:

struct net_icmp_hdr *net_icmpv6_get_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1a99c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1a99e:	4606      	mov	r6, r0
   1a9a0:	460d      	mov	r5, r1
	/* If the ICMP header can fit the first fragment, then access it
	 * directly (fast path), otherwise read the values one by one
	 * using net_frag_read*() functions (slow path).
	 */

	icmp_hdr = net_pkt_icmp_data(pkt);
   1a9a2:	f7ff f84b 	bl	19a3c <net_pkt_icmp_data>
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1a9a6:	2204      	movs	r2, #4
   1a9a8:	4604      	mov	r4, r0
   1a9aa:	4601      	mov	r1, r0
   1a9ac:	4630      	mov	r0, r6
   1a9ae:	f7ff f9b6 	bl	19d1e <net_header_fits>
   1a9b2:	b100      	cbz	r0, 1a9b6 <net_icmpv6_get_hdr+0x1a>
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1a9b4:	bb0c      	cbnz	r4, 1a9fa <net_icmpv6_get_hdr+0x5e>
		return icmp_hdr;
	}

	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1a9b6:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
				net_pkt_ipv6_ext_len(pkt), &pos, &hdr->type);
   1a9ba:	f896 1039 	ldrb.w	r1, [r6, #57]	; 0x39
static inline struct net_buf *net_frag_read_u8(struct net_buf *frag,
					      u16_t offset,
					      u16_t *pos,
					      u8_t *value)
{
	return net_frag_read(frag, offset, pos, 1, value);
   1a9be:	9500      	str	r5, [sp, #0]
   1a9c0:	4401      	add	r1, r0
   1a9c2:	2301      	movs	r3, #1
   1a9c4:	f10d 020e 	add.w	r2, sp, #14
   1a9c8:	68b0      	ldr	r0, [r6, #8]
   1a9ca:	f7fe ff51 	bl	19870 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->code);
   1a9ce:	1c6b      	adds	r3, r5, #1
   1a9d0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1a9d4:	9300      	str	r3, [sp, #0]
   1a9d6:	f10d 020e 	add.w	r2, sp, #14
   1a9da:	2301      	movs	r3, #1
   1a9dc:	f7fe ff48 	bl	19870 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
			     (u8_t *)&hdr->chksum);
   1a9e0:	1cab      	adds	r3, r5, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1a9e2:	9300      	str	r3, [sp, #0]
   1a9e4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1a9e8:	2302      	movs	r3, #2
   1a9ea:	f10d 020e 	add.w	r2, sp, #14
   1a9ee:	f7fe ff3f 	bl	19870 <net_frag_read>
	if (!frag) {
		NET_ASSERT(frag);
		return NULL;
   1a9f2:	2800      	cmp	r0, #0
   1a9f4:	bf14      	ite	ne
   1a9f6:	462c      	movne	r4, r5
   1a9f8:	2400      	moveq	r4, #0
	}

	return hdr;
}
   1a9fa:	4620      	mov	r0, r4
   1a9fc:	b004      	add	sp, #16
   1a9fe:	bd70      	pop	{r4, r5, r6, pc}

0001aa00 <net_icmpv6_set_hdr>:

struct net_icmp_hdr *net_icmpv6_set_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1aa00:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aa02:	2204      	movs	r2, #4
   1aa04:	b087      	sub	sp, #28
   1aa06:	4605      	mov	r5, r0
   1aa08:	460c      	mov	r4, r1
   1aa0a:	f7ff f988 	bl	19d1e <net_header_fits>
   1aa0e:	b100      	cbz	r0, 1aa12 <net_icmpv6_set_hdr+0x12>
	struct net_buf *frag;
	u16_t pos;

	if (net_icmp_header_fits(pkt, hdr)) {
   1aa10:	bb64      	cbnz	r4, 1aa6c <net_icmpv6_set_hdr+0x6c>
		return hdr;
	}

	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1aa12:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
			     net_pkt_ipv6_ext_len(pkt), &pos,
   1aa16:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1aa1a:	9401      	str	r4, [sp, #4]
   1aa1c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1aa20:	2701      	movs	r7, #1
   1aa22:	440a      	add	r2, r1
   1aa24:	f10d 0316 	add.w	r3, sp, #22
   1aa28:	68a9      	ldr	r1, [r5, #8]
   1aa2a:	9602      	str	r6, [sp, #8]
   1aa2c:	9700      	str	r7, [sp, #0]
   1aa2e:	4628      	mov	r0, r5
   1aa30:	f7fe ff72 	bl	19918 <net_pkt_write>
			     sizeof(hdr->type), &hdr->type, PKT_WAIT_TIME);
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->code),
   1aa34:	19e3      	adds	r3, r4, r7
   1aa36:	4601      	mov	r1, r0
   1aa38:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1aa3c:	9301      	str	r3, [sp, #4]
   1aa3e:	9602      	str	r6, [sp, #8]
   1aa40:	f10d 0316 	add.w	r3, sp, #22
   1aa44:	9700      	str	r7, [sp, #0]
   1aa46:	4628      	mov	r0, r5
   1aa48:	f7fe ff66 	bl	19918 <net_pkt_write>
			     &hdr->code, PKT_WAIT_TIME);
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   1aa4c:	1ca3      	adds	r3, r4, #2
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   1aa4e:	9301      	str	r3, [sp, #4]
   1aa50:	2302      	movs	r3, #2
   1aa52:	9300      	str	r3, [sp, #0]
   1aa54:	4601      	mov	r1, r0
   1aa56:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1aa5a:	9602      	str	r6, [sp, #8]
   1aa5c:	f10d 0316 	add.w	r3, sp, #22
   1aa60:	4628      	mov	r0, r5
   1aa62:	f7fe ff59 	bl	19918 <net_pkt_write>
	if (!frag) {
		NET_ASSERT(frag);
		return NULL;
   1aa66:	2800      	cmp	r0, #0
   1aa68:	bf08      	it	eq
   1aa6a:	2400      	moveq	r4, #0
	}

	return hdr;
}
   1aa6c:	4620      	mov	r0, r4
   1aa6e:	b007      	add	sp, #28
   1aa70:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001aa72 <handle_echo_request>:

	return hdr;
}

static enum net_verdict handle_echo_request(struct net_pkt *orig)
{
   1aa72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	echo_request_debug(orig);

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1aa76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1aa7a:	f8d0 8014 	ldr.w	r8, [r0, #20]
{
   1aa7e:	b096      	sub	sp, #88	; 0x58
   1aa80:	4607      	mov	r7, r0
	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1aa82:	2000      	movs	r0, #0
   1aa84:	f7fe fd6a 	bl	1955c <net_pkt_get_reserve_tx>
	if (!pkt) {
   1aa88:	4604      	mov	r4, r0
   1aa8a:	2800      	cmp	r0, #0
   1aa8c:	f000 80e8 	beq.w	1ac60 <handle_echo_request+0x1ee>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1aa90:	68bd      	ldr	r5, [r7, #8]
	size_t bytes = 0;
   1aa92:	2100      	movs	r1, #0
	while (buf) {
   1aa94:	2d00      	cmp	r5, #0
   1aa96:	f040 8098 	bne.w	1abca <handle_echo_request+0x158>
   1aa9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1aa9e:	462a      	mov	r2, r5
   1aaa0:	4638      	mov	r0, r7
   1aaa2:	f7fe fddd 	bl	19660 <net_pkt_copy>

	payload_len = sys_get_be16(NET_IPV6_HDR(orig)->len) -
		sizeof(NET_ICMPH_LEN) - NET_ICMPV6_UNUSED_LEN;

	frag = net_pkt_copy_all(orig, 0, PKT_WAIT_TIME);
	if (!frag) {
   1aaa6:	4606      	mov	r6, r0
   1aaa8:	2800      	cmp	r0, #0
   1aaaa:	f000 80d6 	beq.w	1ac5a <handle_echo_request+0x1e8>
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   1aaae:	4601      	mov	r1, r0
   1aab0:	4620      	mov	r0, r4
   1aab2:	f7fe fdb1 	bl	19618 <net_pkt_frag_add>
	pkt->family = family;
   1aab6:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
	pkt->iface = iface;
   1aaba:	f8c4 8014 	str.w	r8, [r4, #20]
	pkt->family = family;
   1aabe:	220a      	movs	r2, #10
   1aac0:	f362 03c6 	bfi	r3, r2, #3, #4
   1aac4:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	pkt->lladdr_src.type = iface->link_addr.type;
   1aac8:	f898 3015 	ldrb.w	r3, [r8, #21]
   1aacc:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1aad0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1aad4:	f106 0008 	add.w	r0, r6, #8
   1aad8:	f7fd f8e0 	bl	17c9c <net_buf_simple_headroom>
	pkt->ip_hdr_len = len;
   1aadc:	2328      	movs	r3, #40	; 0x28
   1aade:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
   1aae2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
   1aae6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));

	if (net_pkt_ipv6_ext_len(orig)) {
   1aaea:	2b00      	cmp	r3, #0
   1aaec:	d071      	beq.n	1abd2 <handle_echo_request+0x160>
	pkt->ipv6_ext_len = len;
   1aaee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	return pkt->frags->data;
   1aaf2:	68a3      	ldr	r3, [r4, #8]
   1aaf4:	689d      	ldr	r5, [r3, #8]
	} else {
		net_pkt_set_ipv6_ext_len(pkt, 0);
	}

	/* Set up IPv6 Header fields */
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1aaf6:	2360      	movs	r3, #96	; 0x60
   1aaf8:	702b      	strb	r3, [r5, #0]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1aafa:	2300      	movs	r3, #0
   1aafc:	706b      	strb	r3, [r5, #1]
	NET_IPV6_HDR(pkt)->flow = 0;
   1aafe:	70ab      	strb	r3, [r5, #2]
   1ab00:	70eb      	strb	r3, [r5, #3]
   1ab02:	f898 324c 	ldrb.w	r3, [r8, #588]	; 0x24c
	NET_IPV6_HDR(pkt)->hop_limit = net_if_ipv6_get_hop_limit(iface);
   1ab06:	71eb      	strb	r3, [r5, #7]

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   1ab08:	7e2b      	ldrb	r3, [r5, #24]
   1ab0a:	2bff      	cmp	r3, #255	; 0xff
   1ab0c:	68bb      	ldr	r3, [r7, #8]
   1ab0e:	d163      	bne.n	1abd8 <handle_echo_request+0x166>
   1ab10:	689b      	ldr	r3, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1ab12:	ae02      	add	r6, sp, #8
   1ab14:	f103 0208 	add.w	r2, r3, #8
   1ab18:	46b6      	mov	lr, r6
   1ab1a:	3318      	adds	r3, #24
   1ab1c:	6810      	ldr	r0, [r2, #0]
   1ab1e:	6851      	ldr	r1, [r2, #4]
   1ab20:	46b4      	mov	ip, r6
   1ab22:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1ab26:	3208      	adds	r2, #8
   1ab28:	429a      	cmp	r2, r3
   1ab2a:	4666      	mov	r6, ip
   1ab2c:	d1f6      	bne.n	1ab1c <handle_echo_request+0xaa>
   1ab2e:	f105 0c18 	add.w	ip, r5, #24
   1ab32:	ae06      	add	r6, sp, #24
   1ab34:	4672      	mov	r2, lr
   1ab36:	ca03      	ldmia	r2!, {r0, r1}
   1ab38:	42b2      	cmp	r2, r6
   1ab3a:	f8cc 0000 	str.w	r0, [ip]
   1ab3e:	f8cc 1004 	str.w	r1, [ip, #4]
   1ab42:	4696      	mov	lr, r2
   1ab44:	f10c 0c08 	add.w	ip, ip, #8
   1ab48:	d1f4      	bne.n	1ab34 <handle_echo_request+0xc2>
				&NET_IPV6_HDR(orig)->src);

		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1ab4a:	4619      	mov	r1, r3
   1ab4c:	4640      	mov	r0, r8
   1ab4e:	f7fe fa75 	bl	1903c <net_if_ipv6_select_src_addr>
   1ab52:	46b6      	mov	lr, r6
   1ab54:	4603      	mov	r3, r0
   1ab56:	f100 0c10 	add.w	ip, r0, #16
   1ab5a:	6818      	ldr	r0, [r3, #0]
   1ab5c:	6859      	ldr	r1, [r3, #4]
   1ab5e:	4672      	mov	r2, lr
   1ab60:	c203      	stmia	r2!, {r0, r1}
   1ab62:	3308      	adds	r3, #8
   1ab64:	4563      	cmp	r3, ip
   1ab66:	4696      	mov	lr, r2
   1ab68:	d1f7      	bne.n	1ab5a <handle_echo_request+0xe8>
   1ab6a:	3508      	adds	r5, #8
   1ab6c:	aa0a      	add	r2, sp, #40	; 0x28
   1ab6e:	4633      	mov	r3, r6
   1ab70:	cb03      	ldmia	r3!, {r0, r1}
   1ab72:	4293      	cmp	r3, r2
   1ab74:	6028      	str	r0, [r5, #0]
   1ab76:	6069      	str	r1, [r5, #4]
   1ab78:	461e      	mov	r6, r3
   1ab7a:	f105 0508 	add.w	r5, r5, #8
   1ab7e:	d1f6      	bne.n	1ab6e <handle_echo_request+0xfc>
			goto drop;
		}
#endif
	}

	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1ab80:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ab82:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;

	/* We must not set the destination ll address here but trust
	 * that it is set properly using a value from neighbor cache.
	 */
	net_pkt_ll_dst(pkt)->addr = NULL;
   1ab84:	2500      	movs	r5, #0
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1ab86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   1ab8a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	/* ICMPv6 fields */
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1ab8e:	a901      	add	r1, sp, #4
	net_pkt_ll_dst(pkt)->addr = NULL;
   1ab90:	62a5      	str	r5, [r4, #40]	; 0x28
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1ab92:	4620      	mov	r0, r4
   1ab94:	f7ff ff02 	bl	1a99c <net_icmpv6_get_hdr>
	icmp_hdr->type = NET_ICMPV6_ECHO_REPLY;
   1ab98:	2381      	movs	r3, #129	; 0x81
   1ab9a:	7003      	strb	r3, [r0, #0]
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1ab9c:	4601      	mov	r1, r0
	icmp_hdr->code = 0;
   1ab9e:	7045      	strb	r5, [r0, #1]
	icmp_hdr->chksum = 0;
   1aba0:	7085      	strb	r5, [r0, #2]
   1aba2:	70c5      	strb	r5, [r0, #3]
	net_icmpv6_set_hdr(pkt, icmp_hdr);
   1aba4:	4620      	mov	r0, r4
   1aba6:	f7ff ff2b 	bl	1aa00 <net_icmpv6_set_hdr>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1abaa:	68a1      	ldr	r1, [r4, #8]
   1abac:	4620      	mov	r0, r4
   1abae:	f7ff feab 	bl	1a908 <net_icmpv6_set_chksum>

	echo_reply_debug(pkt);

	if (net_send_data(pkt) < 0) {
   1abb2:	4620      	mov	r0, r4
   1abb4:	f7fd fc50 	bl	18458 <net_send_data>
   1abb8:	42a8      	cmp	r0, r5
   1abba:	db4e      	blt.n	1ac5a <handle_echo_request+0x1e8>
		goto drop;
	}

	net_pkt_unref(orig);
   1abbc:	4638      	mov	r0, r7
   1abbe:	f7fe fd04 	bl	195ca <net_pkt_unref>
	net_stats_update_icmp_sent();

	return NET_OK;
   1abc2:	4628      	mov	r0, r5

drop_no_pkt:
	net_stats_update_icmp_drop();

	return NET_DROP;
}
   1abc4:	b016      	add	sp, #88	; 0x58
   1abc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes += buf->len;
   1abca:	89ab      	ldrh	r3, [r5, #12]
		buf = buf->frags;
   1abcc:	682d      	ldr	r5, [r5, #0]
		bytes += buf->len;
   1abce:	4419      	add	r1, r3
   1abd0:	e760      	b.n	1aa94 <handle_echo_request+0x22>
	pkt->ipv6_ext_len = len;
   1abd2:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
   1abd6:	e78c      	b.n	1aaf2 <handle_echo_request+0x80>
	return pkt->frags->data;
   1abd8:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1abdc:	aa0a      	add	r2, sp, #40	; 0x28
   1abde:	f10c 0608 	add.w	r6, ip, #8
   1abe2:	f10c 0818 	add.w	r8, ip, #24
   1abe6:	4613      	mov	r3, r2
   1abe8:	6830      	ldr	r0, [r6, #0]
   1abea:	6871      	ldr	r1, [r6, #4]
   1abec:	4696      	mov	lr, r2
   1abee:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1abf2:	3608      	adds	r6, #8
   1abf4:	4546      	cmp	r6, r8
   1abf6:	4672      	mov	r2, lr
   1abf8:	d1f6      	bne.n	1abe8 <handle_echo_request+0x176>
   1abfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1abfc:	f10d 0e18 	add.w	lr, sp, #24
   1ac00:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1ac04:	ab0e      	add	r3, sp, #56	; 0x38
   1ac06:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
   1ac0a:	461a      	mov	r2, r3
   1ac0c:	6830      	ldr	r0, [r6, #0]
   1ac0e:	6871      	ldr	r1, [r6, #4]
   1ac10:	4698      	mov	r8, r3
   1ac12:	e8a8 0003 	stmia.w	r8!, {r0, r1}
   1ac16:	3608      	adds	r6, #8
   1ac18:	4566      	cmp	r6, ip
   1ac1a:	4643      	mov	r3, r8
   1ac1c:	d1f6      	bne.n	1ac0c <handle_echo_request+0x19a>
   1ac1e:	f105 0c08 	add.w	ip, r5, #8
   1ac22:	ae12      	add	r6, sp, #72	; 0x48
   1ac24:	4613      	mov	r3, r2
   1ac26:	cb03      	ldmia	r3!, {r0, r1}
   1ac28:	42b3      	cmp	r3, r6
   1ac2a:	f8cc 0000 	str.w	r0, [ip]
   1ac2e:	f8cc 1004 	str.w	r1, [ip, #4]
   1ac32:	461a      	mov	r2, r3
   1ac34:	f10c 0c08 	add.w	ip, ip, #8
   1ac38:	d1f4      	bne.n	1ac24 <handle_echo_request+0x1b2>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1ac3a:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   1ac3e:	3518      	adds	r5, #24
   1ac40:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1ac44:	aa16      	add	r2, sp, #88	; 0x58
   1ac46:	4633      	mov	r3, r6
   1ac48:	cb03      	ldmia	r3!, {r0, r1}
   1ac4a:	4293      	cmp	r3, r2
   1ac4c:	6028      	str	r0, [r5, #0]
   1ac4e:	6069      	str	r1, [r5, #4]
   1ac50:	461e      	mov	r6, r3
   1ac52:	f105 0508 	add.w	r5, r5, #8
   1ac56:	d1f6      	bne.n	1ac46 <handle_echo_request+0x1d4>
   1ac58:	e792      	b.n	1ab80 <handle_echo_request+0x10e>
	net_pkt_unref(pkt);
   1ac5a:	4620      	mov	r0, r4
   1ac5c:	f7fe fcb5 	bl	195ca <net_pkt_unref>
	return NET_DROP;
   1ac60:	2002      	movs	r0, #2
   1ac62:	e7af      	b.n	1abc4 <handle_echo_request+0x152>

0001ac64 <net_icmpv6_get_ns_hdr>:
{
   1ac64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1ac66:	460c      	mov	r4, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ac68:	2104      	movs	r1, #4
{
   1ac6a:	4605      	mov	r5, r0
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ac6c:	f7fe fef8 	bl	19a60 <net_pkt_icmp_opt_data>
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ac70:	2214      	movs	r2, #20
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ac72:	4606      	mov	r6, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ac74:	4601      	mov	r1, r0
   1ac76:	4628      	mov	r0, r5
   1ac78:	f7ff f851 	bl	19d1e <net_header_fits>
   1ac7c:	b998      	cbnz	r0, 1aca6 <net_icmpv6_get_ns_hdr+0x42>
			     net_pkt_ipv6_ext_len(pkt) +
   1ac7e:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
			     net_pkt_ip_hdr_len(pkt) +
   1ac82:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
	frag = net_frag_read(pkt->frags,
   1ac86:	68a8      	ldr	r0, [r5, #8]
   1ac88:	4419      	add	r1, r3
			     &pos, sizeof(struct in6_addr), (u8_t *)&hdr->tgt);
   1ac8a:	1d23      	adds	r3, r4, #4
	frag = net_frag_read(pkt->frags,
   1ac8c:	9300      	str	r3, [sp, #0]
   1ac8e:	f10d 020e 	add.w	r2, sp, #14
   1ac92:	2310      	movs	r3, #16
   1ac94:	3108      	adds	r1, #8
   1ac96:	f7fe fdeb 	bl	19870 <net_frag_read>
	if (!frag) {
   1ac9a:	2800      	cmp	r0, #0
		return NULL;
   1ac9c:	bf08      	it	eq
   1ac9e:	2400      	moveq	r4, #0
}
   1aca0:	4620      	mov	r0, r4
   1aca2:	b004      	add	sp, #16
   1aca4:	bd70      	pop	{r4, r5, r6, pc}
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1aca6:	4634      	mov	r4, r6
   1aca8:	e7fa      	b.n	1aca0 <net_icmpv6_get_ns_hdr+0x3c>

0001acaa <net_icmpv6_set_ns_hdr>:
{
   1acaa:	b570      	push	{r4, r5, r6, lr}
   1acac:	b086      	sub	sp, #24
	const u32_t reserved = 0;
   1acae:	2300      	movs	r3, #0
{
   1acb0:	460d      	mov	r5, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1acb2:	2104      	movs	r1, #4
{
   1acb4:	4604      	mov	r4, r0
	const u32_t reserved = 0;
   1acb6:	9305      	str	r3, [sp, #20]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1acb8:	f7fe fed2 	bl	19a60 <net_pkt_icmp_opt_data>
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1acbc:	2214      	movs	r2, #20
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1acbe:	4606      	mov	r6, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1acc0:	4601      	mov	r1, r0
   1acc2:	4620      	mov	r0, r4
   1acc4:	f7ff f82b 	bl	19d1e <net_header_fits>
   1acc8:	bb28      	cbnz	r0, 1ad16 <net_icmpv6_set_ns_hdr+0x6c>
			     net_pkt_ipv6_ext_len(pkt) +
   1acca:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1acce:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
   1acd2:	68a1      	ldr	r1, [r4, #8]
   1acd4:	441a      	add	r2, r3
   1acd6:	ab05      	add	r3, sp, #20
   1acd8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1acdc:	9301      	str	r3, [sp, #4]
   1acde:	2304      	movs	r3, #4
   1ace0:	9300      	str	r3, [sp, #0]
   1ace2:	3204      	adds	r2, #4
   1ace4:	f10d 0312 	add.w	r3, sp, #18
   1ace8:	9602      	str	r6, [sp, #8]
   1acea:	4620      	mov	r0, r4
   1acec:	f7fe fe14 	bl	19918 <net_pkt_write>
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1acf0:	1d2b      	adds	r3, r5, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1acf2:	9301      	str	r3, [sp, #4]
   1acf4:	2310      	movs	r3, #16
   1acf6:	9300      	str	r3, [sp, #0]
   1acf8:	4601      	mov	r1, r0
   1acfa:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1acfe:	9602      	str	r6, [sp, #8]
   1ad00:	f10d 0312 	add.w	r3, sp, #18
   1ad04:	4620      	mov	r0, r4
   1ad06:	f7fe fe07 	bl	19918 <net_pkt_write>
	if (!frag) {
   1ad0a:	2800      	cmp	r0, #0
		return NULL;
   1ad0c:	bf08      	it	eq
   1ad0e:	2500      	moveq	r5, #0
}
   1ad10:	4628      	mov	r0, r5
   1ad12:	b006      	add	sp, #24
   1ad14:	bd70      	pop	{r4, r5, r6, pc}
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1ad16:	4635      	mov	r5, r6
   1ad18:	e7fa      	b.n	1ad10 <net_icmpv6_set_ns_hdr+0x66>

0001ad1a <net_icmpv6_get_nd_opt_hdr>:
{
   1ad1a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1ad1c:	460c      	mov	r4, r1
					 net_pkt_ipv6_ext_opt_len(pkt));
   1ad1e:	f890 103a 	ldrb.w	r1, [r0, #58]	; 0x3a
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr) +
   1ad22:	3104      	adds	r1, #4
{
   1ad24:	4605      	mov	r5, r0
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr) +
   1ad26:	f7fe fe9b 	bl	19a60 <net_pkt_icmp_opt_data>
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ad2a:	2202      	movs	r2, #2
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr) +
   1ad2c:	4606      	mov	r6, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ad2e:	4601      	mov	r1, r0
   1ad30:	4628      	mov	r0, r5
   1ad32:	f7fe fff4 	bl	19d1e <net_header_fits>
   1ad36:	b9f8      	cbnz	r0, 1ad78 <net_icmpv6_get_nd_opt_hdr+0x5e>
				net_pkt_ipv6_ext_len(pkt) +
   1ad38:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
				net_pkt_ip_hdr_len(pkt) +
   1ad3c:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
	return net_frag_read(frag, offset, pos, 1, value);
   1ad40:	9400      	str	r4, [sp, #0]
   1ad42:	4419      	add	r1, r3
				net_pkt_ipv6_ext_opt_len(pkt),
   1ad44:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   1ad48:	68a8      	ldr	r0, [r5, #8]
	frag = net_frag_read_u8(pkt->frags,
   1ad4a:	3104      	adds	r1, #4
   1ad4c:	4419      	add	r1, r3
   1ad4e:	f10d 020e 	add.w	r2, sp, #14
   1ad52:	2301      	movs	r3, #1
   1ad54:	b289      	uxth	r1, r1
   1ad56:	f7fe fd8b 	bl	19870 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->len);
   1ad5a:	1c63      	adds	r3, r4, #1
   1ad5c:	9300      	str	r3, [sp, #0]
   1ad5e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1ad62:	2301      	movs	r3, #1
   1ad64:	f10d 020e 	add.w	r2, sp, #14
   1ad68:	f7fe fd82 	bl	19870 <net_frag_read>
	if (!frag) {
   1ad6c:	2800      	cmp	r0, #0
		return NULL;
   1ad6e:	bf08      	it	eq
   1ad70:	2400      	moveq	r4, #0
}
   1ad72:	4620      	mov	r0, r4
   1ad74:	b004      	add	sp, #16
   1ad76:	bd70      	pop	{r4, r5, r6, pc}
		return (struct net_icmpv6_nd_opt_hdr *)opt_data;
   1ad78:	4634      	mov	r4, r6
   1ad7a:	e7fa      	b.n	1ad72 <net_icmpv6_get_nd_opt_hdr+0x58>

0001ad7c <net_icmpv6_get_na_hdr>:
{
   1ad7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ad7e:	460c      	mov	r4, r1
   1ad80:	b085      	sub	sp, #20
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ad82:	2104      	movs	r1, #4
{
   1ad84:	4605      	mov	r5, r0
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ad86:	f7fe fe6b 	bl	19a60 <net_pkt_icmp_opt_data>
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ad8a:	2214      	movs	r2, #20
   1ad8c:	4601      	mov	r1, r0
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ad8e:	4606      	mov	r6, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ad90:	4628      	mov	r0, r5
   1ad92:	f7fe ffc4 	bl	19d1e <net_header_fits>
   1ad96:	4607      	mov	r7, r0
   1ad98:	bb18      	cbnz	r0, 1ade2 <net_icmpv6_get_na_hdr+0x66>
				net_pkt_ipv6_ext_len(pkt) +
   1ad9a:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ad9e:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
   1ada2:	9400      	str	r4, [sp, #0]
   1ada4:	4419      	add	r1, r3
   1ada6:	f10d 020e 	add.w	r2, sp, #14
   1adaa:	2301      	movs	r3, #1
   1adac:	3104      	adds	r1, #4
   1adae:	68a8      	ldr	r0, [r5, #8]
   1adb0:	f7fe fd5e 	bl	19870 <net_frag_read>
	return net_frag_read(frag, offset, pos, len, NULL);
   1adb4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1adb8:	9700      	str	r7, [sp, #0]
   1adba:	2303      	movs	r3, #3
   1adbc:	f10d 020e 	add.w	r2, sp, #14
   1adc0:	f7fe fd56 	bl	19870 <net_frag_read>
			     (u8_t *)&hdr->tgt);
   1adc4:	1d23      	adds	r3, r4, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(struct in6_addr),
   1adc6:	9300      	str	r3, [sp, #0]
   1adc8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1adcc:	2310      	movs	r3, #16
   1adce:	f10d 020e 	add.w	r2, sp, #14
   1add2:	f7fe fd4d 	bl	19870 <net_frag_read>
	if (!frag) {
   1add6:	2800      	cmp	r0, #0
		return NULL;
   1add8:	bf08      	it	eq
   1adda:	2400      	moveq	r4, #0
}
   1addc:	4620      	mov	r0, r4
   1adde:	b005      	add	sp, #20
   1ade0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (struct net_icmpv6_na_hdr *)opt_data;
   1ade2:	4634      	mov	r4, r6
   1ade4:	e7fa      	b.n	1addc <net_icmpv6_get_na_hdr+0x60>

0001ade6 <net_icmpv6_set_na_hdr>:
{
   1ade6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ade8:	b087      	sub	sp, #28
	const u8_t reserved[3] = { 0 };
   1adea:	2300      	movs	r3, #0
{
   1adec:	460d      	mov	r5, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1adee:	2104      	movs	r1, #4
{
   1adf0:	4604      	mov	r4, r0
	const u8_t reserved[3] = { 0 };
   1adf2:	f8ad 3014 	strh.w	r3, [sp, #20]
   1adf6:	f88d 3016 	strb.w	r3, [sp, #22]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1adfa:	f7fe fe31 	bl	19a60 <net_pkt_icmp_opt_data>
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1adfe:	2214      	movs	r2, #20
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ae00:	4606      	mov	r6, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ae02:	4601      	mov	r1, r0
   1ae04:	4620      	mov	r0, r4
	const u8_t reserved[3] = { 0 };
   1ae06:	af05      	add	r7, sp, #20
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ae08:	f7fe ff89 	bl	19d1e <net_header_fits>
   1ae0c:	bb80      	cbnz	r0, 1ae70 <net_icmpv6_set_na_hdr+0x8a>
			     net_pkt_ipv6_ext_len(pkt) +
   1ae0e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
			     net_pkt_ip_hdr_len(pkt) +
   1ae12:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
	frag = net_pkt_write(pkt, pkt->frags,
   1ae16:	9501      	str	r5, [sp, #4]
   1ae18:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1ae1c:	441a      	add	r2, r3
   1ae1e:	2301      	movs	r3, #1
   1ae20:	9300      	str	r3, [sp, #0]
   1ae22:	3204      	adds	r2, #4
   1ae24:	f10d 0312 	add.w	r3, sp, #18
   1ae28:	68a1      	ldr	r1, [r4, #8]
   1ae2a:	9602      	str	r6, [sp, #8]
   1ae2c:	4620      	mov	r0, r4
   1ae2e:	f7fe fd73 	bl	19918 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(reserved),
   1ae32:	2303      	movs	r3, #3
   1ae34:	4601      	mov	r1, r0
   1ae36:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1ae3a:	9300      	str	r3, [sp, #0]
   1ae3c:	9602      	str	r6, [sp, #8]
   1ae3e:	f10d 0312 	add.w	r3, sp, #18
   1ae42:	9701      	str	r7, [sp, #4]
   1ae44:	4620      	mov	r0, r4
   1ae46:	f7fe fd67 	bl	19918 <net_pkt_write>
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1ae4a:	1d2b      	adds	r3, r5, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1ae4c:	9301      	str	r3, [sp, #4]
   1ae4e:	2310      	movs	r3, #16
   1ae50:	9300      	str	r3, [sp, #0]
   1ae52:	4601      	mov	r1, r0
   1ae54:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1ae58:	9602      	str	r6, [sp, #8]
   1ae5a:	f10d 0312 	add.w	r3, sp, #18
   1ae5e:	4620      	mov	r0, r4
   1ae60:	f7fe fd5a 	bl	19918 <net_pkt_write>
	if (!frag) {
   1ae64:	2800      	cmp	r0, #0
		return NULL;
   1ae66:	bf08      	it	eq
   1ae68:	2500      	moveq	r5, #0
}
   1ae6a:	4628      	mov	r0, r5
   1ae6c:	b007      	add	sp, #28
   1ae6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (struct net_icmpv6_na_hdr *)opt_data;
   1ae70:	4635      	mov	r5, r6
   1ae72:	e7fa      	b.n	1ae6a <net_icmpv6_set_na_hdr+0x84>

0001ae74 <net_icmpv6_get_ra_hdr>:
{
   1ae74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1ae76:	460c      	mov	r4, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ae78:	2104      	movs	r1, #4
{
   1ae7a:	4605      	mov	r5, r0
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ae7c:	f7fe fdf0 	bl	19a60 <net_pkt_icmp_opt_data>
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ae80:	220c      	movs	r2, #12
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ae82:	4606      	mov	r6, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ae84:	4601      	mov	r1, r0
   1ae86:	4628      	mov	r0, r5
   1ae88:	f7fe ff49 	bl	19d1e <net_header_fits>
   1ae8c:	2800      	cmp	r0, #0
   1ae8e:	d137      	bne.n	1af00 <net_icmpv6_get_ra_hdr+0x8c>
				net_pkt_ipv6_ext_len(pkt) +
   1ae90:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ae94:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
	return net_frag_read(frag, offset, pos, 1, value);
   1ae98:	9400      	str	r4, [sp, #0]
   1ae9a:	4419      	add	r1, r3
   1ae9c:	f10d 020e 	add.w	r2, sp, #14
   1aea0:	2301      	movs	r3, #1
   1aea2:	3104      	adds	r1, #4
   1aea4:	68a8      	ldr	r0, [r5, #8]
   1aea6:	f7fe fce3 	bl	19870 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   1aeaa:	1c63      	adds	r3, r4, #1
   1aeac:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1aeb0:	9300      	str	r3, [sp, #0]
   1aeb2:	f10d 020e 	add.w	r2, sp, #14
   1aeb6:	2301      	movs	r3, #1
   1aeb8:	f7fe fcda 	bl	19870 <net_frag_read>
			     (u8_t *)&hdr->router_lifetime);
   1aebc:	1ca3      	adds	r3, r4, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->router_lifetime),
   1aebe:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1aec2:	9300      	str	r3, [sp, #0]
   1aec4:	f10d 020e 	add.w	r2, sp, #14
   1aec8:	2302      	movs	r3, #2
   1aeca:	f7fe fcd1 	bl	19870 <net_frag_read>
			     (u8_t *)&hdr->reachable_time);
   1aece:	1d23      	adds	r3, r4, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->reachable_time),
   1aed0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1aed4:	9300      	str	r3, [sp, #0]
   1aed6:	f10d 020e 	add.w	r2, sp, #14
   1aeda:	2304      	movs	r3, #4
   1aedc:	f7fe fcc8 	bl	19870 <net_frag_read>
			     (u8_t *)&hdr->retrans_timer);
   1aee0:	f104 0308 	add.w	r3, r4, #8
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->retrans_timer),
   1aee4:	9300      	str	r3, [sp, #0]
   1aee6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1aeea:	2304      	movs	r3, #4
   1aeec:	f10d 020e 	add.w	r2, sp, #14
   1aef0:	f7fe fcbe 	bl	19870 <net_frag_read>
	if (!frag) {
   1aef4:	2800      	cmp	r0, #0
		return NULL;
   1aef6:	bf08      	it	eq
   1aef8:	2400      	moveq	r4, #0
}
   1aefa:	4620      	mov	r0, r4
   1aefc:	b004      	add	sp, #16
   1aefe:	bd70      	pop	{r4, r5, r6, pc}
		return (struct net_icmpv6_ra_hdr *)opt_data;
   1af00:	4634      	mov	r4, r6
   1af02:	e7fa      	b.n	1aefa <net_icmpv6_get_ra_hdr+0x86>

0001af04 <net_icmpv6_send_error>:

int net_icmpv6_send_error(struct net_pkt *orig, u8_t type, u8_t code,
			  u32_t param)
{
   1af04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af08:	4698      	mov	r8, r3
	return pkt->frags->data;
   1af0a:	6883      	ldr	r3, [r0, #8]
	struct net_buf *frag;
	struct net_if *iface;
	size_t extra_len, reserve;
	int err = -EIO;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_ICMPV6) {
   1af0c:	689b      	ldr	r3, [r3, #8]
   1af0e:	799b      	ldrb	r3, [r3, #6]
   1af10:	2b3a      	cmp	r3, #58	; 0x3a
{
   1af12:	b09b      	sub	sp, #108	; 0x6c
   1af14:	4606      	mov	r6, r0
   1af16:	4689      	mov	r9, r1
   1af18:	4692      	mov	sl, r2
	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_ICMPV6) {
   1af1a:	d10d      	bne.n	1af38 <net_icmpv6_send_error+0x34>
		struct net_icmp_hdr icmp_hdr[1];

		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   1af1c:	a916      	add	r1, sp, #88	; 0x58
   1af1e:	f7ff fd3d 	bl	1a99c <net_icmpv6_get_hdr>
   1af22:	b118      	cbz	r0, 1af2c <net_icmpv6_send_error+0x28>
   1af24:	f99d 3059 	ldrsb.w	r3, [sp, #89]	; 0x59
   1af28:	2b00      	cmp	r3, #0
   1af2a:	db05      	blt.n	1af38 <net_icmpv6_send_error+0x34>
		    icmp_hdr->code < 128) {
			/* We must not send ICMP errors back */
			err = -EINVAL;
   1af2c:	f06f 0515 	mvn.w	r5, #21

drop_no_pkt:
	net_stats_update_icmp_drop();

	return err;
}
   1af30:	4628      	mov	r0, r5
   1af32:	b01b      	add	sp, #108	; 0x6c
   1af34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1af38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1af3c:	2000      	movs	r0, #0
   1af3e:	6977      	ldr	r7, [r6, #20]
   1af40:	f7fe fb0c 	bl	1955c <net_pkt_get_reserve_tx>
	if (!pkt) {
   1af44:	4604      	mov	r4, r0
   1af46:	2800      	cmp	r0, #0
   1af48:	f000 8132 	beq.w	1b1b0 <net_icmpv6_send_error+0x2ac>
   1af4c:	68b3      	ldr	r3, [r6, #8]
   1af4e:	6899      	ldr	r1, [r3, #8]
	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_UDP) {
   1af50:	798b      	ldrb	r3, [r1, #6]
   1af52:	2b11      	cmp	r3, #17
   1af54:	f000 80e8 	beq.w	1b128 <net_icmpv6_send_error+0x224>
	} else if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_TCP) {
   1af58:	2b06      	cmp	r3, #6
   1af5a:	f000 80e7 	beq.w	1b12c <net_icmpv6_send_error+0x228>
   1af5e:	687b      	ldr	r3, [r7, #4]
   1af60:	3118      	adds	r1, #24
   1af62:	689b      	ldr	r3, [r3, #8]
   1af64:	4638      	mov	r0, r7
   1af66:	4798      	blx	r3
		size_t space = CONFIG_NET_BUF_DATA_SIZE -
   1af68:	f5c0 60a0 	rsb	r0, r0, #1280	; 0x500
		if (reserve > space) {
   1af6c:	282f      	cmp	r0, #47	; 0x2f
   1af6e:	f240 80df 	bls.w	1b130 <net_icmpv6_send_error+0x22c>
			extra_len = space - reserve;
   1af72:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
	frag = net_pkt_copy(orig, extra_len, reserve, PKT_WAIT_TIME);
   1af76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1af7a:	2230      	movs	r2, #48	; 0x30
   1af7c:	4629      	mov	r1, r5
   1af7e:	4630      	mov	r0, r6
   1af80:	f7fe fb6e 	bl	19660 <net_pkt_copy>
	if (!frag) {
   1af84:	4683      	mov	fp, r0
   1af86:	2800      	cmp	r0, #0
   1af88:	f000 810f 	beq.w	1b1aa <net_icmpv6_send_error+0x2a6>
	net_pkt_frag_add(pkt, frag);
   1af8c:	4601      	mov	r1, r0
   1af8e:	4620      	mov	r0, r4
   1af90:	f7fe fb42 	bl	19618 <net_pkt_frag_add>
	pkt->family = family;
   1af94:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
	pkt->iface = iface;
   1af98:	6167      	str	r7, [r4, #20]
	pkt->family = family;
   1af9a:	220a      	movs	r2, #10
   1af9c:	f362 03c6 	bfi	r3, r2, #3, #4
   1afa0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	pkt->lladdr_src.type = iface->link_addr.type;
   1afa4:	7d7b      	ldrb	r3, [r7, #21]
   1afa6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1afaa:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1afae:	f10b 0008 	add.w	r0, fp, #8
   1afb2:	f7fc fe73 	bl	17c9c <net_buf_simple_headroom>
	pkt->ipv6_ext_len = len;
   1afb6:	2200      	movs	r2, #0
   1afb8:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
   1afbc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
	struct net_buf *frag = pkt->frags;
   1afc0:	68a1      	ldr	r1, [r4, #8]
   1afc2:	f897 024c 	ldrb.w	r0, [r7, #588]	; 0x24c
	const u32_t unused = 0;
   1afc6:	9216      	str	r2, [sp, #88]	; 0x58
	return pkt->frags->data;
   1afc8:	688b      	ldr	r3, [r1, #8]
   1afca:	f88d a017 	strb.w	sl, [sp, #23]
	sys_put_be16(NET_ICMPH_LEN + extra_len + NET_ICMPV6_UNUSED_LEN,
   1afce:	3508      	adds	r5, #8
   1afd0:	b2ad      	uxth	r5, r5
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1afd2:	705a      	strb	r2, [r3, #1]
	NET_IPV6_HDR(pkt)->flow = 0;
   1afd4:	709a      	strb	r2, [r3, #2]
   1afd6:	70da      	strb	r2, [r3, #3]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1afd8:	f04f 0e60 	mov.w	lr, #96	; 0x60
	dst[0] = val >> 8;
   1afdc:	0a2a      	lsrs	r2, r5, #8
   1afde:	711a      	strb	r2, [r3, #4]
	dst[1] = val;
   1afe0:	715d      	strb	r5, [r3, #5]
   1afe2:	f88d 9016 	strb.w	r9, [sp, #22]
   1afe6:	f883 e000 	strb.w	lr, [r3]
   1afea:	68a3      	ldr	r3, [r4, #8]
   1afec:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1afee:	223a      	movs	r2, #58	; 0x3a
   1aff0:	719a      	strb	r2, [r3, #6]
	NET_IPV6_HDR(pkt)->hop_limit = hop_limit;
   1aff2:	71d8      	strb	r0, [r3, #7]
	pkt->ip_hdr_len = len;
   1aff4:	2228      	movs	r2, #40	; 0x28
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt), &pos,
   1aff6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1affa:	f04f 0a01 	mov.w	sl, #1
   1affe:	f10d 0316 	add.w	r3, sp, #22
   1b002:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
   1b006:	4620      	mov	r0, r4
   1b008:	9301      	str	r3, [sp, #4]
   1b00a:	f8cd a000 	str.w	sl, [sp]
   1b00e:	ab12      	add	r3, sp, #72	; 0x48
   1b010:	9502      	str	r5, [sp, #8]
   1b012:	f7fe fc81 	bl	19918 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(icmp_code),
   1b016:	f10d 0317 	add.w	r3, sp, #23
   1b01a:	4601      	mov	r1, r0
   1b01c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   1b020:	9301      	str	r3, [sp, #4]
   1b022:	f8cd a000 	str.w	sl, [sp]
   1b026:	ab12      	add	r3, sp, #72	; 0x48
   1b028:	9502      	str	r5, [sp, #8]
   1b02a:	4620      	mov	r0, r4
   1b02c:	f7fe fc74 	bl	19918 <net_pkt_write>
	net_pkt_write(pkt, frag, pos, &pos, 4, (u8_t *)&unused, PKT_WAIT_TIME);
   1b030:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
   1b034:	2304      	movs	r3, #4
   1b036:	9300      	str	r3, [sp, #0]
   1b038:	4601      	mov	r1, r0
   1b03a:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   1b03e:	9502      	str	r5, [sp, #8]
   1b040:	f8cd a004 	str.w	sl, [sp, #4]
   1b044:	ab12      	add	r3, sp, #72	; 0x48
   1b046:	4620      	mov	r0, r4
   1b048:	f7fe fc66 	bl	19918 <net_pkt_write>
	if (type == NET_ICMPV6_PARAM_PROBLEM) {
   1b04c:	f1b9 0f04 	cmp.w	r9, #4
   1b050:	d10c      	bne.n	1b06c <net_icmpv6_send_error+0x168>
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
   1b052:	4620      	mov	r0, r4
   1b054:	f7fe fcf2 	bl	19a3c <net_pkt_icmp_data>
	sys_put_be16(val >> 16, dst);
   1b058:	ea4f 4318 	mov.w	r3, r8, lsr #16
	dst[0] = val >> 8;
   1b05c:	0a1a      	lsrs	r2, r3, #8
	dst[1] = val;
   1b05e:	7143      	strb	r3, [r0, #5]
	dst[0] = val >> 8;
   1b060:	f3c8 2307 	ubfx	r3, r8, #8, #8
   1b064:	7102      	strb	r2, [r0, #4]
   1b066:	7183      	strb	r3, [r0, #6]
	dst[1] = val;
   1b068:	f880 8007 	strb.w	r8, [r0, #7]
	return pkt->frags->data;
   1b06c:	68b3      	ldr	r3, [r6, #8]
   1b06e:	f8d3 c008 	ldr.w	ip, [r3, #8]
	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(orig)->dst)) {
   1b072:	f89c 3018 	ldrb.w	r3, [ip, #24]
   1b076:	2bff      	cmp	r3, #255	; 0xff
   1b078:	f10c 0508 	add.w	r5, ip, #8
   1b07c:	f10c 0218 	add.w	r2, ip, #24
   1b080:	d158      	bne.n	1b134 <net_icmpv6_send_error+0x230>
   1b082:	68a3      	ldr	r3, [r4, #8]
   1b084:	f8d3 8008 	ldr.w	r8, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1b088:	ab06      	add	r3, sp, #24
   1b08a:	469e      	mov	lr, r3
   1b08c:	6828      	ldr	r0, [r5, #0]
   1b08e:	6869      	ldr	r1, [r5, #4]
   1b090:	469c      	mov	ip, r3
   1b092:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1b096:	3508      	adds	r5, #8
   1b098:	4295      	cmp	r5, r2
   1b09a:	4663      	mov	r3, ip
   1b09c:	d1f6      	bne.n	1b08c <net_icmpv6_send_error+0x188>
   1b09e:	f108 0c18 	add.w	ip, r8, #24
   1b0a2:	ad0a      	add	r5, sp, #40	; 0x28
   1b0a4:	4673      	mov	r3, lr
   1b0a6:	cb03      	ldmia	r3!, {r0, r1}
   1b0a8:	42ab      	cmp	r3, r5
   1b0aa:	f8cc 0000 	str.w	r0, [ip]
   1b0ae:	f8cc 1004 	str.w	r1, [ip, #4]
   1b0b2:	469e      	mov	lr, r3
   1b0b4:	f10c 0c08 	add.w	ip, ip, #8
   1b0b8:	d1f4      	bne.n	1b0a4 <net_icmpv6_send_error+0x1a0>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1b0ba:	4638      	mov	r0, r7
   1b0bc:	4611      	mov	r1, r2
   1b0be:	f7fd ffbd 	bl	1903c <net_if_ipv6_select_src_addr>
   1b0c2:	462f      	mov	r7, r5
   1b0c4:	4603      	mov	r3, r0
   1b0c6:	f100 0e10 	add.w	lr, r0, #16
   1b0ca:	6818      	ldr	r0, [r3, #0]
   1b0cc:	6859      	ldr	r1, [r3, #4]
   1b0ce:	463a      	mov	r2, r7
   1b0d0:	c203      	stmia	r2!, {r0, r1}
   1b0d2:	3308      	adds	r3, #8
   1b0d4:	4573      	cmp	r3, lr
   1b0d6:	4617      	mov	r7, r2
   1b0d8:	d1f7      	bne.n	1b0ca <net_icmpv6_send_error+0x1c6>
   1b0da:	f108 0308 	add.w	r3, r8, #8
   1b0de:	af0e      	add	r7, sp, #56	; 0x38
   1b0e0:	462a      	mov	r2, r5
   1b0e2:	ca03      	ldmia	r2!, {r0, r1}
   1b0e4:	42ba      	cmp	r2, r7
   1b0e6:	6018      	str	r0, [r3, #0]
   1b0e8:	6059      	str	r1, [r3, #4]
   1b0ea:	4615      	mov	r5, r2
   1b0ec:	f103 0308 	add.w	r3, r3, #8
   1b0f0:	d1f6      	bne.n	1b0e0 <net_icmpv6_send_error+0x1dc>
	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1b0f2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1b0f4:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1b0f6:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
   1b0fa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	net_pkt_ll_dst(pkt)->addr = net_pkt_ll_src(orig)->addr;
   1b0fe:	6a33      	ldr	r3, [r6, #32]
   1b100:	62a3      	str	r3, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->len = net_pkt_ll_src(orig)->len;
   1b102:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
   1b106:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	frag = net_icmpv6_set_chksum(pkt, pkt->frags);
   1b10a:	68a1      	ldr	r1, [r4, #8]
   1b10c:	4620      	mov	r0, r4
   1b10e:	f7ff fbfb 	bl	1a908 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) >= 0) {
   1b112:	4620      	mov	r0, r4
   1b114:	f7fd f9a0 	bl	18458 <net_send_data>
   1b118:	2800      	cmp	r0, #0
   1b11a:	da4c      	bge.n	1b1b6 <net_icmpv6_send_error+0x2b2>
	int err = -EIO;
   1b11c:	f06f 0504 	mvn.w	r5, #4
	net_pkt_unref(pkt);
   1b120:	4620      	mov	r0, r4
   1b122:	f7fe fa52 	bl	195ca <net_pkt_unref>
   1b126:	e703      	b.n	1af30 <net_icmpv6_send_error+0x2c>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1b128:	2530      	movs	r5, #48	; 0x30
   1b12a:	e724      	b.n	1af76 <net_icmpv6_send_error+0x72>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1b12c:	253c      	movs	r5, #60	; 0x3c
   1b12e:	e722      	b.n	1af76 <net_icmpv6_send_error+0x72>
			extra_len = 0;
   1b130:	2500      	movs	r5, #0
   1b132:	e720      	b.n	1af76 <net_icmpv6_send_error+0x72>
		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1b134:	af0e      	add	r7, sp, #56	; 0x38
   1b136:	463b      	mov	r3, r7
   1b138:	6828      	ldr	r0, [r5, #0]
   1b13a:	6869      	ldr	r1, [r5, #4]
   1b13c:	46be      	mov	lr, r7
   1b13e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1b142:	3508      	adds	r5, #8
   1b144:	4295      	cmp	r5, r2
   1b146:	4677      	mov	r7, lr
   1b148:	d1f6      	bne.n	1b138 <net_icmpv6_send_error+0x234>
   1b14a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1b14c:	af0a      	add	r7, sp, #40	; 0x28
   1b14e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   1b152:	68a3      	ldr	r3, [r4, #8]
   1b154:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1b158:	aa12      	add	r2, sp, #72	; 0x48
   1b15a:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
   1b15e:	6828      	ldr	r0, [r5, #0]
   1b160:	6869      	ldr	r1, [r5, #4]
   1b162:	4613      	mov	r3, r2
   1b164:	c303      	stmia	r3!, {r0, r1}
   1b166:	3508      	adds	r5, #8
   1b168:	4565      	cmp	r5, ip
   1b16a:	461a      	mov	r2, r3
   1b16c:	d1f7      	bne.n	1b15e <net_icmpv6_send_error+0x25a>
   1b16e:	ab12      	add	r3, sp, #72	; 0x48
   1b170:	f10e 0508 	add.w	r5, lr, #8
   1b174:	461a      	mov	r2, r3
   1b176:	ca03      	ldmia	r2!, {r0, r1}
   1b178:	4552      	cmp	r2, sl
   1b17a:	6028      	str	r0, [r5, #0]
   1b17c:	6069      	str	r1, [r5, #4]
   1b17e:	4613      	mov	r3, r2
   1b180:	f105 0508 	add.w	r5, r5, #8
   1b184:	d1f6      	bne.n	1b174 <net_icmpv6_send_error+0x270>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1b186:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1b18a:	af1a      	add	r7, sp, #104	; 0x68
   1b18c:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   1b190:	4653      	mov	r3, sl
   1b192:	f10e 0218 	add.w	r2, lr, #24
   1b196:	461d      	mov	r5, r3
   1b198:	cd03      	ldmia	r5!, {r0, r1}
   1b19a:	42bd      	cmp	r5, r7
   1b19c:	6010      	str	r0, [r2, #0]
   1b19e:	6051      	str	r1, [r2, #4]
   1b1a0:	462b      	mov	r3, r5
   1b1a2:	f102 0208 	add.w	r2, r2, #8
   1b1a6:	d1f6      	bne.n	1b196 <net_icmpv6_send_error+0x292>
   1b1a8:	e7a3      	b.n	1b0f2 <net_icmpv6_send_error+0x1ee>
		err = -ENOMEM;
   1b1aa:	f06f 050b 	mvn.w	r5, #11
   1b1ae:	e7b7      	b.n	1b120 <net_icmpv6_send_error+0x21c>
		err = -ENOMEM;
   1b1b0:	f06f 050b 	mvn.w	r5, #11
   1b1b4:	e6bc      	b.n	1af30 <net_icmpv6_send_error+0x2c>
		return 0;
   1b1b6:	2500      	movs	r5, #0
   1b1b8:	e6ba      	b.n	1af30 <net_icmpv6_send_error+0x2c>
	...

0001b1bc <net_icmpv6_input>:
	return -EIO;
}

enum net_verdict net_icmpv6_input(struct net_pkt *pkt,
				  u8_t type, u8_t code)
{
   1b1bc:	b410      	push	{r4}
   1b1be:	4b0a      	ldr	r3, [pc, #40]	; (1b1e8 <net_icmpv6_input+0x2c>)
   1b1c0:	681b      	ldr	r3, [r3, #0]
	struct net_icmpv6_handler *cb;

	net_stats_update_icmp_recv();

	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1b1c2:	461c      	mov	r4, r3
   1b1c4:	b16b      	cbz	r3, 1b1e2 <net_icmpv6_input+0x26>
		if (cb->type == type && (cb->code == code || cb->code == 0)) {
   1b1c6:	791b      	ldrb	r3, [r3, #4]
   1b1c8:	428b      	cmp	r3, r1
   1b1ca:	d107      	bne.n	1b1dc <net_icmpv6_input+0x20>
   1b1cc:	7963      	ldrb	r3, [r4, #5]
   1b1ce:	4293      	cmp	r3, r2
   1b1d0:	d102      	bne.n	1b1d8 <net_icmpv6_input+0x1c>
			return cb->handler(pkt);
   1b1d2:	68a3      	ldr	r3, [r4, #8]
	}

	net_stats_update_icmp_drop();

	return NET_DROP;
}
   1b1d4:	bc10      	pop	{r4}
			return cb->handler(pkt);
   1b1d6:	4718      	bx	r3
		if (cb->type == type && (cb->code == code || cb->code == 0)) {
   1b1d8:	2b00      	cmp	r3, #0
   1b1da:	d0fa      	beq.n	1b1d2 <net_icmpv6_input+0x16>
	return node->next;
   1b1dc:	6823      	ldr	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1b1de:	2b00      	cmp	r3, #0
   1b1e0:	d1ef      	bne.n	1b1c2 <net_icmpv6_input+0x6>
}
   1b1e2:	2002      	movs	r0, #2
   1b1e4:	bc10      	pop	{r4}
   1b1e6:	4770      	bx	lr
   1b1e8:	20003100 	.word	0x20003100

0001b1ec <net_icmpv6_init>:
	.handler = handle_echo_request,
};

void net_icmpv6_init(void)
{
	net_icmpv6_register_handler(&echo_request_handler);
   1b1ec:	4801      	ldr	r0, [pc, #4]	; (1b1f4 <net_icmpv6_init+0x8>)
   1b1ee:	f7ff bb81 	b.w	1a8f4 <net_icmpv6_register_handler>
   1b1f2:	bf00      	nop
   1b1f4:	2000e15c 	.word	0x2000e15c

0001b1f8 <net_nbr_unref>:
#if defined(CONFIG_NET_DEBUG_IPV6_NBR_CACHE)
	NET_DBG("nbr %p ref %u (%s():%d)", nbr, nbr->ref - 1, caller, line);
#else
	NET_DBG("nbr %p ref %u", nbr, nbr->ref - 1);
#endif
	if (--nbr->ref) {
   1b1f8:	7803      	ldrb	r3, [r0, #0]
   1b1fa:	3b01      	subs	r3, #1
   1b1fc:	b2db      	uxtb	r3, r3
   1b1fe:	7003      	strb	r3, [r0, #0]
   1b200:	b913      	cbnz	r3, 1b208 <net_nbr_unref+0x10>
		return;
	}

	if (nbr->remove) {
   1b202:	6903      	ldr	r3, [r0, #16]
   1b204:	b103      	cbz	r3, 1b208 <net_nbr_unref+0x10>
		nbr->remove(nbr);
   1b206:	4718      	bx	r3
   1b208:	4770      	bx	lr

0001b20a <net_nbr_get>:
			((sizeof(struct net_nbr) +
			  start->size + start->extra_data_size) * idx));
}

struct net_nbr *net_nbr_get(struct net_nbr_table *table)
{
   1b20a:	b530      	push	{r4, r5, lr}
	int i;

	for (i = 0; i < table->nbr_count; i++) {
   1b20c:	8905      	ldrh	r5, [r0, #8]
   1b20e:	2100      	movs	r1, #0
   1b210:	42a9      	cmp	r1, r5
   1b212:	db01      	blt.n	1b218 <net_nbr_get+0xe>

			return net_nbr_ref(nbr);
		}
	}

	return NULL;
   1b214:	2200      	movs	r2, #0
   1b216:	e00d      	b.n	1b234 <net_nbr_get+0x2a>
		struct net_nbr *nbr = get_nbr(table->nbr, i);
   1b218:	6804      	ldr	r4, [r0, #0]
			  start->size + start->extra_data_size) * idx));
   1b21a:	88a2      	ldrh	r2, [r4, #4]
   1b21c:	8863      	ldrh	r3, [r4, #2]
   1b21e:	4413      	add	r3, r2
   1b220:	3314      	adds	r3, #20
   1b222:	434b      	muls	r3, r1
	return (struct net_nbr *)((void *)start +
   1b224:	18e2      	adds	r2, r4, r3
		if (!nbr->ref) {
   1b226:	5ce3      	ldrb	r3, [r4, r3]
   1b228:	b933      	cbnz	r3, 1b238 <net_nbr_get+0x2e>
			nbr->data = nbr->__nbr;
   1b22a:	f102 0314 	add.w	r3, r2, #20
   1b22e:	60d3      	str	r3, [r2, #12]
	nbr->ref++;
   1b230:	2301      	movs	r3, #1
   1b232:	7013      	strb	r3, [r2, #0]
}
   1b234:	4610      	mov	r0, r2
   1b236:	bd30      	pop	{r4, r5, pc}
	for (i = 0; i < table->nbr_count; i++) {
   1b238:	3101      	adds	r1, #1
   1b23a:	e7e9      	b.n	1b210 <net_nbr_get+0x6>

0001b23c <net_nbr_link>:

int net_nbr_link(struct net_nbr *nbr, struct net_if *iface,
		 struct net_linkaddr *lladdr)
{
   1b23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i, avail = -1;

	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   1b240:	7843      	ldrb	r3, [r0, #1]
   1b242:	2bff      	cmp	r3, #255	; 0xff
{
   1b244:	4607      	mov	r7, r0
   1b246:	4688      	mov	r8, r1
   1b248:	4691      	mov	r9, r2
	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   1b24a:	d144      	bne.n	1b2d6 <net_nbr_link+0x9a>
   1b24c:	4e26      	ldr	r6, [pc, #152]	; (1b2e8 <net_nbr_link+0xac>)
   1b24e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1b252:	2500      	movs	r5, #0
		return -EALREADY;
	}

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   1b254:	1c62      	adds	r2, r4, #1
   1b256:	d103      	bne.n	1b260 <net_nbr_link+0x24>
   1b258:	79b3      	ldrb	r3, [r6, #6]
   1b25a:	2b00      	cmp	r3, #0
   1b25c:	bf08      	it	eq
   1b25e:	462c      	moveq	r4, r5
			avail = i;
		}

		if (net_neighbor_lladdr[i].ref &&
   1b260:	79b3      	ldrb	r3, [r6, #6]
   1b262:	b19b      	cbz	r3, 1b28c <net_nbr_link+0x50>
		    !memcmp(lladdr->addr,
   1b264:	f899 2004 	ldrb.w	r2, [r9, #4]
   1b268:	f8d9 0000 	ldr.w	r0, [r9]
   1b26c:	4631      	mov	r1, r6
   1b26e:	f7e5 fb0f 	bl	890 <memcmp>
		if (net_neighbor_lladdr[i].ref &&
   1b272:	b958      	cbnz	r0, 1b28c <net_nbr_link+0x50>
			    net_neighbor_lladdr[i].lladdr.addr,
			    lladdr->len)) {
			/* We found same lladdr in nbr cache so just
			 * increase the ref count.
			 */
			net_neighbor_lladdr[i].ref++;
   1b274:	4b1d      	ldr	r3, [pc, #116]	; (1b2ec <net_nbr_link+0xb0>)
   1b276:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
   1b27a:	4413      	add	r3, r2
   1b27c:	7a1a      	ldrb	r2, [r3, #8]
   1b27e:	3201      	adds	r2, #1
   1b280:	721a      	strb	r2, [r3, #8]

			nbr->idx = i;
   1b282:	707d      	strb	r5, [r7, #1]
			nbr->iface = iface;
   1b284:	f8c7 8008 	str.w	r8, [r7, #8]

			return 0;
   1b288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1b28c:	3501      	adds	r5, #1
   1b28e:	2d08      	cmp	r5, #8
   1b290:	f106 0609 	add.w	r6, r6, #9
   1b294:	d1de      	bne.n	1b254 <net_nbr_link+0x18>
		}
	}

	if (avail < 0) {
   1b296:	1c63      	adds	r3, r4, #1
   1b298:	d021      	beq.n	1b2de <net_nbr_link+0xa2>
	}

	/* There was no existing entry in the lladdr cache,
	 * so allocate one for this lladdr.
	 */
	net_neighbor_lladdr[avail].ref++;
   1b29a:	4d14      	ldr	r5, [pc, #80]	; (1b2ec <net_nbr_link+0xb0>)
   1b29c:	00e6      	lsls	r6, r4, #3
   1b29e:	1930      	adds	r0, r6, r4
   1b2a0:	182b      	adds	r3, r5, r0
   1b2a2:	7a1a      	ldrb	r2, [r3, #8]
   1b2a4:	3201      	adds	r2, #1
   1b2a6:	721a      	strb	r2, [r3, #8]
	nbr->idx = avail;
   1b2a8:	707c      	strb	r4, [r7, #1]

	net_linkaddr_set(&net_neighbor_lladdr[avail].lladdr, lladdr->addr,
   1b2aa:	f8d9 1000 	ldr.w	r1, [r9]
   1b2ae:	f899 2004 	ldrb.w	r2, [r9, #4]
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   u8_t *new_addr, u8_t new_len)
{
	if (!lladdr_store || !new_addr) {
   1b2b2:	b131      	cbz	r1, 1b2c2 <net_nbr_link+0x86>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1b2b4:	2a06      	cmp	r2, #6
   1b2b6:	d804      	bhi.n	1b2c2 <net_nbr_link+0x86>
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
	memcpy(lladdr_store->addr, new_addr, new_len);
   1b2b8:	3002      	adds	r0, #2
	lladdr_store->len = new_len;
   1b2ba:	705a      	strb	r2, [r3, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   1b2bc:	4428      	add	r0, r5
   1b2be:	f7e5 fb14 	bl	8ea <memcpy>
			 lladdr->len);
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;
   1b2c2:	4434      	add	r4, r6
   1b2c4:	4425      	add	r5, r4
   1b2c6:	f899 3004 	ldrb.w	r3, [r9, #4]
   1b2ca:	706b      	strb	r3, [r5, #1]

	nbr->iface = iface;

	return 0;
   1b2cc:	2000      	movs	r0, #0
	nbr->iface = iface;
   1b2ce:	f8c7 8008 	str.w	r8, [r7, #8]
	return 0;
   1b2d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EALREADY;
   1b2d6:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1b2da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOENT;
   1b2de:	f06f 0001 	mvn.w	r0, #1
}
   1b2e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b2e6:	bf00      	nop
   1b2e8:	2000310a 	.word	0x2000310a
   1b2ec:	20003108 	.word	0x20003108

0001b2f0 <net_nbr_unlink>:

int net_nbr_unlink(struct net_nbr *nbr, struct net_linkaddr *lladdr)
{
   1b2f0:	b510      	push	{r4, lr}
   1b2f2:	4604      	mov	r4, r0
	ARG_UNUSED(lladdr);

	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   1b2f4:	7840      	ldrb	r0, [r0, #1]
   1b2f6:	28ff      	cmp	r0, #255	; 0xff
   1b2f8:	d014      	beq.n	1b324 <net_nbr_unlink+0x34>
	}

	NET_ASSERT(nbr->idx < CONFIG_NET_IPV6_MAX_NEIGHBORS);
	NET_ASSERT(net_neighbor_lladdr[nbr->idx].ref > 0);

	net_neighbor_lladdr[nbr->idx].ref--;
   1b2fa:	4a0c      	ldr	r2, [pc, #48]	; (1b32c <net_nbr_unlink+0x3c>)
   1b2fc:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
   1b300:	4413      	add	r3, r2
   1b302:	7a19      	ldrb	r1, [r3, #8]
   1b304:	3901      	subs	r1, #1
   1b306:	b2c9      	uxtb	r1, r1
   1b308:	7219      	strb	r1, [r3, #8]

	if (!net_neighbor_lladdr[nbr->idx].ref) {
   1b30a:	b931      	cbnz	r1, 1b31a <net_nbr_unlink+0x2a>
		memset(net_neighbor_lladdr[nbr->idx].lladdr.addr, 0,
   1b30c:	2309      	movs	r3, #9
   1b30e:	fb03 2000 	mla	r0, r3, r0, r2
   1b312:	3002      	adds	r0, #2
   1b314:	2206      	movs	r2, #6
   1b316:	f7e5 fb14 	bl	942 <memset>
		       sizeof(net_neighbor_lladdr[nbr->idx].lladdr.addr));
	}

	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   1b31a:	23ff      	movs	r3, #255	; 0xff
	nbr->iface = NULL;
   1b31c:	2000      	movs	r0, #0
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   1b31e:	7063      	strb	r3, [r4, #1]
	nbr->iface = NULL;
   1b320:	60a0      	str	r0, [r4, #8]

	return 0;
   1b322:	bd10      	pop	{r4, pc}
		return -EALREADY;
   1b324:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   1b328:	bd10      	pop	{r4, pc}
   1b32a:	bf00      	nop
   1b32c:	20003108 	.word	0x20003108

0001b330 <net_nbr_get_lladdr>:
	NET_ASSERT_INFO(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS,
			"idx %d >= max %d", idx,
			CONFIG_NET_IPV6_MAX_NEIGHBORS);

	return &net_neighbor_lladdr[idx].lladdr;
}
   1b330:	4b02      	ldr	r3, [pc, #8]	; (1b33c <net_nbr_get_lladdr+0xc>)
	return &net_neighbor_lladdr[idx].lladdr;
   1b332:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
}
   1b336:	4418      	add	r0, r3
   1b338:	4770      	bx	lr
   1b33a:	bf00      	nop
   1b33c:	20003108 	.word	0x20003108

0001b340 <net_buf_frags_len>:
{
   1b340:	4603      	mov	r3, r0
	size_t bytes = 0;
   1b342:	2000      	movs	r0, #0
	while (buf) {
   1b344:	b903      	cbnz	r3, 1b348 <net_buf_frags_len+0x8>
}
   1b346:	4770      	bx	lr
		bytes += buf->len;
   1b348:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1b34a:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1b34c:	4410      	add	r0, r2
   1b34e:	e7f9      	b.n	1b344 <net_buf_frags_len+0x4>

0001b350 <net_is_ipv6_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1b350:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b352:	b942      	cbnz	r2, 1b366 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1b354:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1b356:	b933      	cbnz	r3, 1b366 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b358:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1b35a:	b922      	cbnz	r2, 1b366 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1b35c:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b35e:	fab0 f080 	clz	r0, r0
   1b362:	0940      	lsrs	r0, r0, #5
   1b364:	4770      	bx	lr
   1b366:	2000      	movs	r0, #0
   1b368:	4770      	bx	lr

0001b36a <net_if_get_ll_reserve>:
   1b36a:	6843      	ldr	r3, [r0, #4]
   1b36c:	689b      	ldr	r3, [r3, #8]
   1b36e:	4718      	bx	r3

0001b370 <ipv6_nbr_set_state>:
	return "<invalid state>";
}

static void ipv6_nbr_set_state(struct net_nbr *nbr,
			       enum net_ipv6_nbr_state new_state)
{
   1b370:	68c3      	ldr	r3, [r0, #12]
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
   1b372:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   1b376:	428a      	cmp	r2, r1
   1b378:	d003      	beq.n	1b382 <ipv6_nbr_set_state+0x12>
   1b37a:	2a05      	cmp	r2, #5

	NET_DBG("nbr %p %s -> %s", nbr,
		net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state),
		net_ipv6_nbr_state2str(new_state));

	net_ipv6_nbr_data(nbr)->state = new_state;
   1b37c:	bf18      	it	ne
   1b37e:	f883 1064 	strbne.w	r1, [r3, #100]	; 0x64
   1b382:	4770      	bx	lr

0001b384 <net_neighbor_table_clear>:

	return;
}

void net_neighbor_table_clear(struct net_nbr_table *table)
{
   1b384:	4770      	bx	lr

0001b386 <nbr_clear_ns_pending>:
{
   1b386:	b510      	push	{r4, lr}
   1b388:	4604      	mov	r4, r0
	k_delayed_work_cancel(&data->send_ns);
   1b38a:	303c      	adds	r0, #60	; 0x3c
   1b38c:	f004 fda8 	bl	1fee0 <k_delayed_work_cancel>
	if (data->pending) {
   1b390:	6820      	ldr	r0, [r4, #0]
   1b392:	b118      	cbz	r0, 1b39c <nbr_clear_ns_pending+0x16>
		net_pkt_unref(data->pending);
   1b394:	f7fe f919 	bl	195ca <net_pkt_unref>
		data->pending = NULL;
   1b398:	2300      	movs	r3, #0
   1b39a:	6023      	str	r3, [r4, #0]
   1b39c:	bd10      	pop	{r4, pc}

0001b39e <nbr_free>:
{
   1b39e:	b510      	push	{r4, lr}
   1b3a0:	4604      	mov	r4, r0
	nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   1b3a2:	68c0      	ldr	r0, [r0, #12]
   1b3a4:	f7ff ffef 	bl	1b386 <nbr_clear_ns_pending>
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   1b3a8:	68e0      	ldr	r0, [r4, #12]
   1b3aa:	3014      	adds	r0, #20
   1b3ac:	f004 fd98 	bl	1fee0 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   1b3b0:	4620      	mov	r0, r4
   1b3b2:	f7ff ff21 	bl	1b1f8 <net_nbr_unref>
	net_nbr_unlink(nbr, NULL);
   1b3b6:	4620      	mov	r0, r4
   1b3b8:	2100      	movs	r1, #0
}
   1b3ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_nbr_unlink(nbr, NULL);
   1b3be:	f7ff bf97 	b.w	1b2f0 <net_nbr_unlink>

0001b3c2 <net_linkaddr_set>:
{
   1b3c2:	b510      	push	{r4, lr}
	if (!lladdr_store || !new_addr) {
   1b3c4:	b140      	cbz	r0, 1b3d8 <net_linkaddr_set+0x16>
   1b3c6:	b139      	cbz	r1, 1b3d8 <net_linkaddr_set+0x16>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1b3c8:	2a06      	cmp	r2, #6
   1b3ca:	d808      	bhi.n	1b3de <net_linkaddr_set+0x1c>
	lladdr_store->len = new_len;
   1b3cc:	7042      	strb	r2, [r0, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   1b3ce:	3002      	adds	r0, #2
   1b3d0:	f7e5 fa8b 	bl	8ea <memcpy>

	return 0;
   1b3d4:	2000      	movs	r0, #0
   1b3d6:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1b3d8:	f06f 0015 	mvn.w	r0, #21
   1b3dc:	bd10      	pop	{r4, pc}
		return -EMSGSIZE;
   1b3de:	f06f 0023 	mvn.w	r0, #35	; 0x23
}
   1b3e2:	bd10      	pop	{r4, pc}

0001b3e4 <net_is_solicited>:
{
   1b3e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1b3e6:	a901      	add	r1, sp, #4
   1b3e8:	f7ff fcc8 	bl	1ad7c <net_icmpv6_get_na_hdr>
	if (!na_hdr) {
   1b3ec:	b110      	cbz	r0, 1b3f4 <net_is_solicited+0x10>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   1b3ee:	7800      	ldrb	r0, [r0, #0]
   1b3f0:	f3c0 1080 	ubfx	r0, r0, #6, #1
}
   1b3f4:	b007      	add	sp, #28
   1b3f6:	f85d fb04 	ldr.w	pc, [sp], #4

0001b3fa <net_is_override>:
{
   1b3fa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1b3fc:	a901      	add	r1, sp, #4
   1b3fe:	f7ff fcbd 	bl	1ad7c <net_icmpv6_get_na_hdr>
	if (!na_hdr) {
   1b402:	b110      	cbz	r0, 1b40a <net_is_override+0x10>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   1b404:	7800      	ldrb	r0, [r0, #0]
   1b406:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1b40a:	b007      	add	sp, #28
   1b40c:	f85d fb04 	ldr.w	pc, [sp], #4

0001b410 <net_is_router>:
{
   1b410:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1b412:	a901      	add	r1, sp, #4
   1b414:	f7ff fcb2 	bl	1ad7c <net_icmpv6_get_na_hdr>
	if (!na_hdr) {
   1b418:	b108      	cbz	r0, 1b41e <net_is_router+0xe>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER;
   1b41a:	7800      	ldrb	r0, [r0, #0]
   1b41c:	09c0      	lsrs	r0, r0, #7
}
   1b41e:	b007      	add	sp, #28
   1b420:	f85d fb04 	ldr.w	pc, [sp], #4

0001b424 <setup_headers>:
	       llao_len - lladdr->len - 2);
}

static void setup_headers(struct net_pkt *pkt, u8_t nd6_len,
			  u8_t icmp_type)
{
   1b424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b426:	4605      	mov	r5, r0
	net_buf_add(pkt->frags,
   1b428:	6880      	ldr	r0, [r0, #8]
{
   1b42a:	460e      	mov	r6, r1
	net_buf_add(pkt->frags,
   1b42c:	3008      	adds	r0, #8
   1b42e:	212c      	movs	r1, #44	; 0x2c
{
   1b430:	4617      	mov	r7, r2
	net_buf_add(pkt->frags,
   1b432:	f7fc fbcb 	bl	17bcc <net_buf_simple_add>
   1b436:	68ab      	ldr	r3, [r5, #8]
   1b438:	689b      	ldr	r3, [r3, #8]
		    sizeof(struct net_ipv6_hdr) +
		    sizeof(struct net_icmp_hdr));

	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1b43a:	2260      	movs	r2, #96	; 0x60
   1b43c:	701a      	strb	r2, [r3, #0]
	NET_IPV6_HDR(pkt)->tcflow = 0;
	NET_IPV6_HDR(pkt)->flow = 0;
	NET_IPV6_HDR(pkt)->len[0] = 0;
	NET_IPV6_HDR(pkt)->len[1] = NET_ICMPH_LEN + nd6_len;

	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1b43e:	223a      	movs	r2, #58	; 0x3a
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1b440:	2400      	movs	r4, #0
	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1b442:	719a      	strb	r2, [r3, #6]
	NET_IPV6_HDR(pkt)->len[1] = NET_ICMPH_LEN + nd6_len;
   1b444:	3604      	adds	r6, #4
	NET_IPV6_HDR(pkt)->hop_limit = NET_IPV6_ND_HOP_LIMIT;
   1b446:	22ff      	movs	r2, #255	; 0xff
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1b448:	705c      	strb	r4, [r3, #1]
	NET_IPV6_HDR(pkt)->flow = 0;
   1b44a:	709c      	strb	r4, [r3, #2]
   1b44c:	70dc      	strb	r4, [r3, #3]
	NET_IPV6_HDR(pkt)->len[0] = 0;
   1b44e:	711c      	strb	r4, [r3, #4]
	NET_IPV6_HDR(pkt)->len[1] = NET_ICMPH_LEN + nd6_len;
   1b450:	715e      	strb	r6, [r3, #5]
	NET_IPV6_HDR(pkt)->hop_limit = NET_IPV6_ND_HOP_LIMIT;
   1b452:	71da      	strb	r2, [r3, #7]

	/* In this special case where we know there are no long extension
	 * headers, so we can use this header cast.
	 */
	net_pkt_icmp_data(pkt)->type = icmp_type;
   1b454:	4628      	mov	r0, r5
   1b456:	f7fe faf1 	bl	19a3c <net_pkt_icmp_data>
   1b45a:	7007      	strb	r7, [r0, #0]
	net_pkt_icmp_data(pkt)->code = 0;
   1b45c:	4628      	mov	r0, r5
   1b45e:	f7fe faed 	bl	19a3c <net_pkt_icmp_data>
   1b462:	7044      	strb	r4, [r0, #1]
   1b464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b466 <net_pkt_ll_clear>:
{
   1b466:	b510      	push	{r4, lr}
	return pkt->frags->data;
   1b468:	6883      	ldr	r3, [r0, #8]
	return net_pkt_ip_data(pkt) - net_pkt_ll_reserve(pkt);
   1b46a:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
{
   1b46e:	4604      	mov	r4, r0
	return net_pkt_ip_data(pkt) - net_pkt_ll_reserve(pkt);
   1b470:	6898      	ldr	r0, [r3, #8]
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   1b472:	2100      	movs	r1, #0
   1b474:	1a80      	subs	r0, r0, r2
   1b476:	f7e5 fa64 	bl	942 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   1b47a:	2300      	movs	r3, #0
	net_pkt_ll_src(pkt)->len = 0;
   1b47c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	net_pkt_ll_src(pkt)->addr = NULL;
   1b480:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   1b482:	bd10      	pop	{r4, pc}

0001b484 <set_llao>:
{
   1b484:	b570      	push	{r4, r5, r6, lr}
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   1b486:	700b      	strb	r3, [r1, #0]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   1b488:	08d3      	lsrs	r3, r2, #3
{
   1b48a:	460c      	mov	r4, r1
   1b48c:	4606      	mov	r6, r0
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   1b48e:	704b      	strb	r3, [r1, #1]
{
   1b490:	4615      	mov	r5, r2
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   1b492:	6801      	ldr	r1, [r0, #0]
   1b494:	7902      	ldrb	r2, [r0, #4]
   1b496:	1ca0      	adds	r0, r4, #2
   1b498:	f7e5 fa27 	bl	8ea <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1b49c:	7930      	ldrb	r0, [r6, #4]
	       llao_len - lladdr->len - 2);
   1b49e:	1a2a      	subs	r2, r5, r0
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1b4a0:	3002      	adds	r0, #2
   1b4a2:	4420      	add	r0, r4
   1b4a4:	3a02      	subs	r2, #2
   1b4a6:	2100      	movs	r1, #0
}
   1b4a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1b4ac:	f7e5 ba49 	b.w	942 <memset>

0001b4b0 <update_ll_reserve.part.32>:
static struct net_pkt *update_ll_reserve(struct net_pkt *pkt,
   1b4b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4b4:	4680      	mov	r8, r0
	reserve = net_if_get_ll_reserve(net_pkt_iface(pkt), addr);
   1b4b6:	6940      	ldr	r0, [r0, #20]
   1b4b8:	f7ff ff57 	bl	1b36a <net_if_get_ll_reserve>
	if (reserve == net_pkt_ll_reserve(pkt)) {
   1b4bc:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
   1b4c0:	4283      	cmp	r3, r0
   1b4c2:	d04a      	beq.n	1b55a <update_ll_reserve.part.32+0xaa>
	orig_frag = pkt->frags;
   1b4c4:	f8d8 7008 	ldr.w	r7, [r8, #8]
	net_pkt_set_ll_reserve(pkt, reserve);
   1b4c8:	f888 0034 	strb.w	r0, [r8, #52]	; 0x34
	pkt->frags = NULL;
   1b4cc:	2500      	movs	r5, #0
	copy_len = orig_frag->len;
   1b4ce:	89be      	ldrh	r6, [r7, #12]
	pkt->frags = NULL;
   1b4d0:	f8c8 5008 	str.w	r5, [r8, #8]
	pos = 0;
   1b4d4:	46a9      	mov	r9, r5
	room_len = 0;
   1b4d6:	462c      	mov	r4, r5
			room_len = 0;
   1b4d8:	46ab      	mov	fp, r5
		if (!room_len) {
   1b4da:	b974      	cbnz	r4, 1b4fa <update_ll_reserve.part.32+0x4a>
			frag = net_pkt_get_frag(pkt, K_FOREVER);
   1b4dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b4e0:	4640      	mov	r0, r8
   1b4e2:	f7fe f853 	bl	1958c <net_pkt_get_frag>
			net_pkt_frag_add(pkt, frag);
   1b4e6:	4601      	mov	r1, r0
			frag = net_pkt_get_frag(pkt, K_FOREVER);
   1b4e8:	4605      	mov	r5, r0
			net_pkt_frag_add(pkt, frag);
   1b4ea:	4640      	mov	r0, r8
   1b4ec:	f7fe f894 	bl	19618 <net_pkt_frag_add>
			room_len = net_buf_tailroom(frag);
   1b4f0:	f105 0008 	add.w	r0, r5, #8
   1b4f4:	f7fc fbd6 	bl	17ca4 <net_buf_simple_tailroom>
   1b4f8:	b284      	uxth	r4, r0
		if (room_len >= copy_len) {
   1b4fa:	42b4      	cmp	r4, r6
   1b4fc:	f105 0008 	add.w	r0, r5, #8
   1b500:	d313      	bcc.n	1b52a <update_ll_reserve.part.32+0x7a>
			memcpy(net_buf_add(frag, copy_len),
   1b502:	4631      	mov	r1, r6
   1b504:	f7fc fb62 	bl	17bcc <net_buf_simple_add>
			       orig_frag->data + pos, copy_len);
   1b508:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, copy_len),
   1b50a:	4632      	mov	r2, r6
   1b50c:	4449      	add	r1, r9
   1b50e:	f7e5 f9ec 	bl	8ea <memcpy>
			orig_frag = orig_frag->frags;
   1b512:	f8d7 a000 	ldr.w	sl, [r7]
			tmp->frags = NULL;
   1b516:	f8c7 b000 	str.w	fp, [r7]
			net_pkt_frag_unref(tmp);
   1b51a:	4638      	mov	r0, r7
   1b51c:	f7fe f851 	bl	195c2 <net_pkt_frag_unref>
			if (!orig_frag) {
   1b520:	f1ba 0f00 	cmp.w	sl, #0
   1b524:	d112      	bne.n	1b54c <update_ll_reserve.part.32+0x9c>
   1b526:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(net_buf_add(frag, room_len),
   1b52a:	4621      	mov	r1, r4
   1b52c:	f7fc fb4e 	bl	17bcc <net_buf_simple_add>
			       orig_frag->data + pos, room_len);
   1b530:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, room_len),
   1b532:	4622      	mov	r2, r4
   1b534:	4449      	add	r1, r9
   1b536:	f7e5 f9d8 	bl	8ea <memcpy>
			copy_len -= room_len;
   1b53a:	1b36      	subs	r6, r6, r4
			pos += room_len;
   1b53c:	44a1      	add	r9, r4
			copy_len -= room_len;
   1b53e:	b2b6      	uxth	r6, r6
			pos += room_len;
   1b540:	fa1f f989 	uxth.w	r9, r9
   1b544:	46ba      	mov	sl, r7
			room_len = 0;
   1b546:	2400      	movs	r4, #0
   1b548:	4657      	mov	r7, sl
   1b54a:	e7c6      	b.n	1b4da <update_ll_reserve.part.32+0x2a>
			room_len -= copy_len;
   1b54c:	1ba4      	subs	r4, r4, r6
   1b54e:	b2a4      	uxth	r4, r4
			copy_len = orig_frag->len;
   1b550:	f8ba 600c 	ldrh.w	r6, [sl, #12]
			pos = 0;
   1b554:	f04f 0900 	mov.w	r9, #0
   1b558:	e7f6      	b.n	1b548 <update_ll_reserve.part.32+0x98>
   1b55a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001b55e <net_if_ipv6_addr_lookup_by_iface>:
{
   1b55e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b560:	4605      	mov	r5, r0
   1b562:	460f      	mov	r7, r1
   1b564:	f100 0630 	add.w	r6, r0, #48	; 0x30
   1b568:	2400      	movs	r4, #0
		if (!iface->ipv6.unicast[i].is_used ||
   1b56a:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
   1b56e:	b93b      	cbnz	r3, 1b580 <net_if_ipv6_addr_lookup_by_iface+0x22>
   1b570:	346c      	adds	r4, #108	; 0x6c
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b572:	f5b4 7fa2 	cmp.w	r4, #324	; 0x144
   1b576:	f106 066c 	add.w	r6, r6, #108	; 0x6c
   1b57a:	d1f6      	bne.n	1b56a <net_if_ipv6_addr_lookup_by_iface+0xc>
	return NULL;
   1b57c:	2000      	movs	r0, #0
   1b57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!iface->ipv6.unicast[i].is_used ||
   1b580:	f836 3c04 	ldrh.w	r3, [r6, #-4]
   1b584:	2b0a      	cmp	r3, #10
   1b586:	d1f3      	bne.n	1b570 <net_if_ipv6_addr_lookup_by_iface+0x12>
	if (memcmp(addr1, addr2, bytes)) {
   1b588:	2210      	movs	r2, #16
   1b58a:	4631      	mov	r1, r6
   1b58c:	4638      	mov	r0, r7
   1b58e:	f7e5 f97f 	bl	890 <memcmp>
   1b592:	2800      	cmp	r0, #0
   1b594:	d1ec      	bne.n	1b570 <net_if_ipv6_addr_lookup_by_iface+0x12>
			return &iface->ipv6.unicast[i];
   1b596:	342c      	adds	r4, #44	; 0x2c
   1b598:	1928      	adds	r0, r5, r4
}
   1b59a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b59c <nbr_new.isra.30>:
static struct net_nbr *nbr_new(struct net_if *iface,
   1b59c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1b5a0:	4606      	mov	r6, r0
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   1b5a2:	481d      	ldr	r0, [pc, #116]	; (1b618 <nbr_new.isra.30+0x7c>)
static struct net_nbr *nbr_new(struct net_if *iface,
   1b5a4:	460d      	mov	r5, r1
   1b5a6:	4690      	mov	r8, r2
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   1b5a8:	f7ff fe2f 	bl	1b20a <net_nbr_get>
	if (!nbr) {
   1b5ac:	4604      	mov	r4, r0
   1b5ae:	b370      	cbz	r0, 1b60e <nbr_new.isra.30+0x72>
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   1b5b0:	23ff      	movs	r3, #255	; 0xff
   1b5b2:	7043      	strb	r3, [r0, #1]
	nbr->iface = iface;
   1b5b4:	6086      	str	r6, [r0, #8]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   1b5b6:	462b      	mov	r3, r5
   1b5b8:	68c6      	ldr	r6, [r0, #12]
   1b5ba:	466d      	mov	r5, sp
   1b5bc:	f103 0e10 	add.w	lr, r3, #16
   1b5c0:	466f      	mov	r7, sp
   1b5c2:	6818      	ldr	r0, [r3, #0]
   1b5c4:	6859      	ldr	r1, [r3, #4]
   1b5c6:	462a      	mov	r2, r5
   1b5c8:	c203      	stmia	r2!, {r0, r1}
   1b5ca:	3308      	adds	r3, #8
   1b5cc:	4573      	cmp	r3, lr
   1b5ce:	4615      	mov	r5, r2
   1b5d0:	d1f7      	bne.n	1b5c2 <nbr_new.isra.30+0x26>
   1b5d2:	1d33      	adds	r3, r6, #4
   1b5d4:	aa04      	add	r2, sp, #16
   1b5d6:	463d      	mov	r5, r7
   1b5d8:	cd03      	ldmia	r5!, {r0, r1}
   1b5da:	4295      	cmp	r5, r2
   1b5dc:	6018      	str	r0, [r3, #0]
   1b5de:	6059      	str	r1, [r3, #4]
   1b5e0:	462f      	mov	r7, r5
   1b5e2:	f103 0308 	add.w	r3, r3, #8
   1b5e6:	d1f6      	bne.n	1b5d6 <nbr_new.isra.30+0x3a>
	ipv6_nbr_set_state(nbr, state);
   1b5e8:	4641      	mov	r1, r8
   1b5ea:	4620      	mov	r0, r4
   1b5ec:	f7ff fec0 	bl	1b370 <ipv6_nbr_set_state>
   1b5f0:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->reachable,
   1b5f2:	490a      	ldr	r1, [pc, #40]	; (1b61c <nbr_new.isra.30+0x80>)
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   1b5f4:	2301      	movs	r3, #1
   1b5f6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
	net_ipv6_nbr_data(nbr)->pending = NULL;
   1b5fa:	2300      	movs	r3, #0
   1b5fc:	f840 3b14 	str.w	r3, [r0], #20
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->reachable,
   1b600:	f004 fc50 	bl	1fea4 <k_delayed_work_init>
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->send_ns,
   1b604:	68e0      	ldr	r0, [r4, #12]
   1b606:	4906      	ldr	r1, [pc, #24]	; (1b620 <nbr_new.isra.30+0x84>)
   1b608:	303c      	adds	r0, #60	; 0x3c
   1b60a:	f004 fc4b 	bl	1fea4 <k_delayed_work_init>
}
   1b60e:	4620      	mov	r0, r4
   1b610:	b004      	add	sp, #16
   1b612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b616:	bf00      	nop
   1b618:	2000e180 	.word	0x2000e180
   1b61c:	0001cb49 	.word	0x0001cb49
   1b620:	0001b6a1 	.word	0x0001b6a1

0001b624 <net_neighbor_data_remove>:
   1b624:	4770      	bx	lr

0001b626 <net_pkt_append_u8>:
{
   1b626:	b507      	push	{r0, r1, r2, lr}
   1b628:	aa02      	add	r2, sp, #8
	return net_pkt_append(pkt, len, data, timeout) == len;
   1b62a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
   1b62e:	f802 1d01 	strb.w	r1, [r2, #-1]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1b632:	2101      	movs	r1, #1
   1b634:	f7fe f8bc 	bl	197b0 <net_pkt_append>
}
   1b638:	1e43      	subs	r3, r0, #1
   1b63a:	4258      	negs	r0, r3
   1b63c:	4158      	adcs	r0, r3
   1b63e:	b003      	add	sp, #12
   1b640:	f85d fb04 	ldr.w	pc, [sp], #4

0001b644 <net_pkt_append_be16>:
{
   1b644:	b507      	push	{r0, r1, r2, lr}
	u16_t value = sys_cpu_to_be16(data);
   1b646:	aa02      	add	r2, sp, #8
   1b648:	ba49      	rev16	r1, r1
   1b64a:	f822 1d02 	strh.w	r1, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1b64e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b652:	2102      	movs	r1, #2
   1b654:	f7fe f8ac 	bl	197b0 <net_pkt_append>
}
   1b658:	1e83      	subs	r3, r0, #2
   1b65a:	4258      	negs	r0, r3
   1b65c:	4158      	adcs	r0, r3
   1b65e:	b003      	add	sp, #12
   1b660:	f85d fb04 	ldr.w	pc, [sp], #4

0001b664 <nbr_lookup.isra.29>:
static struct net_nbr *nbr_lookup(struct net_nbr_table *table,
   1b664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b666:	4c0d      	ldr	r4, [pc, #52]	; (1b69c <nbr_lookup.isra.29+0x38>)
   1b668:	4605      	mov	r5, r0
   1b66a:	460e      	mov	r6, r1
   1b66c:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		if (!nbr->ref) {
   1b670:	7823      	ldrb	r3, [r4, #0]
   1b672:	b923      	cbnz	r3, 1b67e <nbr_lookup.isra.29+0x1a>
   1b674:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1b676:	42bc      	cmp	r4, r7
   1b678:	d1fa      	bne.n	1b670 <nbr_lookup.isra.29+0xc>
	return NULL;
   1b67a:	2000      	movs	r0, #0
   1b67c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iface && nbr->iface != iface) {
   1b67e:	b115      	cbz	r5, 1b686 <nbr_lookup.isra.29+0x22>
   1b680:	68a3      	ldr	r3, [r4, #8]
   1b682:	429d      	cmp	r5, r3
   1b684:	d1f6      	bne.n	1b674 <nbr_lookup.isra.29+0x10>
		if (net_ipv6_addr_cmp(&net_ipv6_nbr_data(nbr)->addr, addr)) {
   1b686:	68e0      	ldr	r0, [r4, #12]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1b688:	2210      	movs	r2, #16
   1b68a:	4631      	mov	r1, r6
   1b68c:	3004      	adds	r0, #4
   1b68e:	f7e5 f8ff 	bl	890 <memcmp>
   1b692:	2800      	cmp	r0, #0
   1b694:	d1ee      	bne.n	1b674 <nbr_lookup.isra.29+0x10>
   1b696:	4620      	mov	r0, r4
}
   1b698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b69a:	bf00      	nop
   1b69c:	2000e18c 	.word	0x2000e18c

0001b6a0 <ns_reply_timeout>:
{
   1b6a0:	4910      	ldr	r1, [pc, #64]	; (1b6e4 <ns_reply_timeout+0x44>)
   1b6a2:	b538      	push	{r3, r4, r5, lr}
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   1b6a4:	f1a0 023c 	sub.w	r2, r0, #60	; 0x3c
{
   1b6a8:	4604      	mov	r4, r0
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1b6aa:	2300      	movs	r3, #0
   1b6ac:	eb01 15c3 	add.w	r5, r1, r3, lsl #7
		if (nbr->data == (u8_t *)data) {
   1b6b0:	68e8      	ldr	r0, [r5, #12]
   1b6b2:	4282      	cmp	r2, r0
   1b6b4:	d011      	beq.n	1b6da <ns_reply_timeout+0x3a>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1b6b6:	3301      	adds	r3, #1
   1b6b8:	2b08      	cmp	r3, #8
   1b6ba:	d1f7      	bne.n	1b6ac <ns_reply_timeout+0xc>
   1b6bc:	bd38      	pop	{r3, r4, r5, pc}
	net_pkt_unref(data->pending);
   1b6be:	f7fd ff84 	bl	195ca <net_pkt_unref>
	net_pkt_unref(data->pending);
   1b6c2:	f854 0c3c 	ldr.w	r0, [r4, #-60]
   1b6c6:	f7fd ff80 	bl	195ca <net_pkt_unref>
	data->pending = NULL;
   1b6ca:	2300      	movs	r3, #0
   1b6cc:	f844 3c3c 	str.w	r3, [r4, #-60]
	net_nbr_unref(nbr);
   1b6d0:	4628      	mov	r0, r5
}
   1b6d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_nbr_unref(nbr);
   1b6d6:	f7ff bd8f 	b.w	1b1f8 <net_nbr_unref>
	if (!data->pending) {
   1b6da:	f854 0c3c 	ldr.w	r0, [r4, #-60]
   1b6de:	2800      	cmp	r0, #0
   1b6e0:	d1ed      	bne.n	1b6be <ns_reply_timeout+0x1e>
   1b6e2:	bd38      	pop	{r3, r4, r5, pc}
   1b6e4:	2000e18c 	.word	0x2000e18c

0001b6e8 <net_ipv6_nbr_rm>:
{
   1b6e8:	b570      	push	{r4, r5, r6, lr}
   1b6ea:	4605      	mov	r5, r0
   1b6ec:	460e      	mov	r6, r1
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   1b6ee:	f7ff ffb9 	bl	1b664 <nbr_lookup.isra.29>
	if (!nbr) {
   1b6f2:	4604      	mov	r4, r0
   1b6f4:	b170      	cbz	r0, 1b714 <net_ipv6_nbr_rm+0x2c>
	net_route_del_by_nexthop(iface, addr);
   1b6f6:	4631      	mov	r1, r6
   1b6f8:	4628      	mov	r0, r5
   1b6fa:	f001 ff5b 	bl	1d5b4 <net_route_del_by_nexthop>
	nbr_free(nbr);
   1b6fe:	4620      	mov	r0, r4
   1b700:	f7ff fe4d 	bl	1b39e <nbr_free>
   1b704:	2300      	movs	r3, #0
   1b706:	461a      	mov	r2, r3
   1b708:	4629      	mov	r1, r5
   1b70a:	4803      	ldr	r0, [pc, #12]	; (1b718 <net_ipv6_nbr_rm+0x30>)
   1b70c:	f001 fe2a 	bl	1d364 <net_mgmt_event_notify_with_info>
	return true;
   1b710:	2001      	movs	r0, #1
   1b712:	bd70      	pop	{r4, r5, r6, pc}
}
   1b714:	bd70      	pop	{r4, r5, r6, pc}
   1b716:	bf00      	nop
   1b718:	f0600010 	.word	0xf0600010

0001b71c <net_ipv6_unspecified_address>:
}
   1b71c:	4800      	ldr	r0, [pc, #0]	; (1b720 <net_ipv6_unspecified_address+0x4>)
   1b71e:	4770      	bx	lr
   1b720:	00021344 	.word	0x00021344

0001b724 <net_ipv6_create_raw>:
{
   1b724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b728:	460e      	mov	r6, r1
   1b72a:	b089      	sub	sp, #36	; 0x24
	header = net_pkt_get_frag(pkt, K_FOREVER);
   1b72c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
   1b730:	4605      	mov	r5, r0
   1b732:	4617      	mov	r7, r2
   1b734:	4699      	mov	r9, r3
	header = net_pkt_get_frag(pkt, K_FOREVER);
   1b736:	f7fd ff29 	bl	1958c <net_pkt_get_frag>
	net_pkt_frag_insert(pkt, header);
   1b73a:	4601      	mov	r1, r0
	header = net_pkt_get_frag(pkt, K_FOREVER);
   1b73c:	4680      	mov	r8, r0
	net_pkt_frag_insert(pkt, header);
   1b73e:	4628      	mov	r0, r5
   1b740:	f7fd ff84 	bl	1964c <net_pkt_frag_insert>
   1b744:	f8d5 e008 	ldr.w	lr, [r5, #8]
	return pkt->frags->data;
   1b748:	f8de 4008 	ldr.w	r4, [lr, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1b74c:	2200      	movs	r2, #0
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1b74e:	2360      	movs	r3, #96	; 0x60
   1b750:	7023      	strb	r3, [r4, #0]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1b752:	7062      	strb	r2, [r4, #1]
	NET_IPV6_HDR(pkt)->flow = 0;
   1b754:	70a2      	strb	r2, [r4, #2]
   1b756:	70e2      	strb	r2, [r4, #3]
	NET_IPV6_HDR(pkt)->nexthdr = 0;
   1b758:	71a2      	strb	r2, [r4, #6]
   1b75a:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
	NET_IPV6_HDR(pkt)->hop_limit = net_pkt_ipv6_hop_limit(pkt);
   1b75e:	71e2      	strb	r2, [r4, #7]
	if (NET_IPV6_HDR(pkt)->hop_limit == 0) {
   1b760:	b912      	cbnz	r2, 1b768 <net_ipv6_create_raw+0x44>
   1b762:	f899 324c 	ldrb.w	r3, [r9, #588]	; 0x24c
		NET_IPV6_HDR(pkt)->hop_limit =
   1b766:	71e3      	strb	r3, [r4, #7]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1b768:	463a      	mov	r2, r7
   1b76a:	f107 0910 	add.w	r9, r7, #16
   1b76e:	466b      	mov	r3, sp
   1b770:	466f      	mov	r7, sp
   1b772:	6810      	ldr	r0, [r2, #0]
   1b774:	6851      	ldr	r1, [r2, #4]
   1b776:	469c      	mov	ip, r3
   1b778:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1b77c:	3208      	adds	r2, #8
   1b77e:	454a      	cmp	r2, r9
   1b780:	4663      	mov	r3, ip
   1b782:	d1f6      	bne.n	1b772 <net_ipv6_create_raw+0x4e>
   1b784:	f104 0c18 	add.w	ip, r4, #24
   1b788:	aa04      	add	r2, sp, #16
   1b78a:	463b      	mov	r3, r7
   1b78c:	cb03      	ldmia	r3!, {r0, r1}
   1b78e:	4293      	cmp	r3, r2
   1b790:	f8cc 0000 	str.w	r0, [ip]
   1b794:	f8cc 1004 	str.w	r1, [ip, #4]
   1b798:	461f      	mov	r7, r3
   1b79a:	f10c 0c08 	add.w	ip, ip, #8
   1b79e:	d1f4      	bne.n	1b78a <net_ipv6_create_raw+0x66>
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1b7a0:	4633      	mov	r3, r6
   1b7a2:	4617      	mov	r7, r2
   1b7a4:	f106 0c10 	add.w	ip, r6, #16
   1b7a8:	6818      	ldr	r0, [r3, #0]
   1b7aa:	6859      	ldr	r1, [r3, #4]
   1b7ac:	463e      	mov	r6, r7
   1b7ae:	c603      	stmia	r6!, {r0, r1}
   1b7b0:	3308      	adds	r3, #8
   1b7b2:	4563      	cmp	r3, ip
   1b7b4:	4637      	mov	r7, r6
   1b7b6:	d1f7      	bne.n	1b7a8 <net_ipv6_create_raw+0x84>
   1b7b8:	4613      	mov	r3, r2
   1b7ba:	3408      	adds	r4, #8
   1b7bc:	ae08      	add	r6, sp, #32
   1b7be:	461a      	mov	r2, r3
   1b7c0:	ca03      	ldmia	r2!, {r0, r1}
   1b7c2:	42b2      	cmp	r2, r6
   1b7c4:	6020      	str	r0, [r4, #0]
   1b7c6:	6061      	str	r1, [r4, #4]
   1b7c8:	4613      	mov	r3, r2
   1b7ca:	f104 0408 	add.w	r4, r4, #8
   1b7ce:	d1f6      	bne.n	1b7be <net_ipv6_create_raw+0x9a>
	pkt->ipv6_ext_len = len;
   1b7d0:	2300      	movs	r3, #0
   1b7d2:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
	NET_IPV6_HDR(pkt)->nexthdr = next_header;
   1b7d6:	f8de 3008 	ldr.w	r3, [lr, #8]
   1b7da:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   1b7de:	719a      	strb	r2, [r3, #6]
	pkt->family = family;
   1b7e0:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
   1b7e4:	220a      	movs	r2, #10
	pkt->ip_hdr_len = len;
   1b7e6:	2128      	movs	r1, #40	; 0x28
	pkt->family = family;
   1b7e8:	f362 03c6 	bfi	r3, r2, #3, #4
	pkt->ip_hdr_len = len;
   1b7ec:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
	pkt->family = family;
   1b7f0:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
	net_buf_add(header, sizeof(struct net_ipv6_hdr));
   1b7f4:	f108 0008 	add.w	r0, r8, #8
   1b7f8:	f7fc f9e8 	bl	17bcc <net_buf_simple_add>
}
   1b7fc:	4628      	mov	r0, r5
   1b7fe:	b009      	add	sp, #36	; 0x24
   1b800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001b804 <net_ipv6_create>:
{
   1b804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b806:	4605      	mov	r5, r0
   1b808:	460e      	mov	r6, r1
   1b80a:	461f      	mov	r7, r3
	if (!src) {
   1b80c:	4614      	mov	r4, r2
   1b80e:	b902      	cbnz	r2, 1b812 <net_ipv6_create+0xe>
		src = ((struct sockaddr_in6_ptr *)&context->local)->sin6_addr;
   1b810:	68c4      	ldr	r4, [r0, #12]
	if (net_is_ipv6_addr_unspecified(src)
   1b812:	4620      	mov	r0, r4
   1b814:	f7ff fd9c 	bl	1b350 <net_is_ipv6_addr_unspecified>
   1b818:	b910      	cbnz	r0, 1b820 <net_ipv6_create+0x1c>
	    || net_is_ipv6_addr_mcast(src)) {
   1b81a:	7823      	ldrb	r3, [r4, #0]
   1b81c:	2bff      	cmp	r3, #255	; 0xff
   1b81e:	d104      	bne.n	1b82a <net_ipv6_create+0x26>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   1b820:	4639      	mov	r1, r7
   1b822:	6970      	ldr	r0, [r6, #20]
   1b824:	f7fd fc0a 	bl	1903c <net_if_ipv6_select_src_addr>
   1b828:	4604      	mov	r4, r0
	return net_if_get_by_index(context->iface);
   1b82a:	f895 0054 	ldrb.w	r0, [r5, #84]	; 0x54
   1b82e:	f7fd fd49 	bl	192c4 <net_if_get_by_index>
	if (context->flags & NET_CONTEXT_PROTO) {
   1b832:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
	return IPPROTO_UDP;
   1b836:	f013 0f40 	tst.w	r3, #64	; 0x40
   1b83a:	bf14      	ite	ne
   1b83c:	2306      	movne	r3, #6
   1b83e:	2311      	moveq	r3, #17
	return net_ipv6_create_raw(pkt,
   1b840:	9300      	str	r3, [sp, #0]
   1b842:	463a      	mov	r2, r7
   1b844:	4603      	mov	r3, r0
   1b846:	4621      	mov	r1, r4
   1b848:	4630      	mov	r0, r6
   1b84a:	f7ff ff6b 	bl	1b724 <net_ipv6_create_raw>
}
   1b84e:	b003      	add	sp, #12
   1b850:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001b852 <net_ipv6_finalize_raw>:
{
   1b852:	b538      	push	{r3, r4, r5, lr}
   1b854:	4604      	mov	r4, r0
   1b856:	460d      	mov	r5, r1
	net_pkt_compact(pkt);
   1b858:	f7fd ff65 	bl	19726 <net_pkt_compact>
   1b85c:	68a1      	ldr	r1, [r4, #8]
	return net_buf_frags_len(pkt->frags);
   1b85e:	4608      	mov	r0, r1
   1b860:	f7ff fd6e 	bl	1b340 <net_buf_frags_len>
	total_len -= sizeof(struct net_ipv6_hdr);
   1b864:	3828      	subs	r0, #40	; 0x28
	return pkt->frags->data;
   1b866:	688b      	ldr	r3, [r1, #8]
	NET_IPV6_HDR(pkt)->len[0] = total_len >> 8;
   1b868:	0a02      	lsrs	r2, r0, #8
	if (next_header == IPPROTO_UDP) {
   1b86a:	2d11      	cmp	r5, #17
	NET_IPV6_HDR(pkt)->len[0] = total_len >> 8;
   1b86c:	711a      	strb	r2, [r3, #4]
	NET_IPV6_HDR(pkt)->len[1] = total_len & 0xff;
   1b86e:	7158      	strb	r0, [r3, #5]
	if (next_header == IPPROTO_UDP) {
   1b870:	d104      	bne.n	1b87c <net_ipv6_finalize_raw+0x2a>
		net_udp_set_chksum(pkt, pkt->frags);
   1b872:	4620      	mov	r0, r4
   1b874:	f002 f961 	bl	1db3a <net_udp_set_chksum>
}
   1b878:	2000      	movs	r0, #0
   1b87a:	bd38      	pop	{r3, r4, r5, pc}
	if (next_header == IPPROTO_ICMPV6) {
   1b87c:	2d3a      	cmp	r5, #58	; 0x3a
   1b87e:	d1fb      	bne.n	1b878 <net_ipv6_finalize_raw+0x26>
		net_icmpv6_set_chksum(pkt, pkt->frags);
   1b880:	4620      	mov	r0, r4
   1b882:	f7ff f841 	bl	1a908 <net_icmpv6_set_chksum>
   1b886:	e7f7      	b.n	1b878 <net_ipv6_finalize_raw+0x26>

0001b888 <send_mldv2_raw>:

	return pkt;
}

static int send_mldv2_raw(struct net_if *iface, struct net_buf *frags)
{
   1b888:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b88a:	b08b      	sub	sp, #44	; 0x2c
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1b88c:	f240 23ff 	movw	r3, #767	; 0x2ff
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1b890:	2500      	movs	r5, #0
   1b892:	460f      	mov	r7, r1
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1b894:	f8ad 3018 	strh.w	r3, [sp, #24]
	int ret;

	/* Sent to all MLDv2-capable routers */
	net_ipv6_addr_create(&dst, 0xff02, 0, 0, 0, 0, 0, 0, 0x0016);

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, &dst),
   1b898:	a906      	add	r1, sp, #24
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1b89a:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
{
   1b89e:	4606      	mov	r6, r0
   1b8a0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1b8a4:	f8ad 501a 	strh.w	r5, [sp, #26]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1b8a8:	f8ad 501c 	strh.w	r5, [sp, #28]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1b8ac:	f8ad 501e 	strh.w	r5, [sp, #30]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1b8b0:	f8ad 5020 	strh.w	r5, [sp, #32]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1b8b4:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1b8b8:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, &dst),
   1b8bc:	f7ff fd55 	bl	1b36a <net_if_get_ll_reserve>
   1b8c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b8c4:	f7fd fe4a 	bl	1955c <net_pkt_get_reserve_tx>
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt,
   1b8c8:	a906      	add	r1, sp, #24
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, &dst),
   1b8ca:	4604      	mov	r4, r0
	pkt = net_ipv6_create_raw(pkt,
   1b8cc:	4630      	mov	r0, r6
   1b8ce:	f7fd fbb5 	bl	1903c <net_if_ipv6_select_src_addr>
   1b8d2:	4633      	mov	r3, r6
   1b8d4:	4601      	mov	r1, r0
   1b8d6:	aa06      	add	r2, sp, #24
   1b8d8:	4620      	mov	r0, r4
   1b8da:	9500      	str	r5, [sp, #0]
   1b8dc:	f7ff ff22 	bl	1b724 <net_ipv6_create_raw>
   1b8e0:	6883      	ldr	r3, [r0, #8]
				  net_if_ipv6_select_src_addr(iface, &dst),
				  &dst,
				  iface,
				  NET_IPV6_NEXTHDR_HBHO);

	NET_IPV6_HDR(pkt)->hop_limit = 1; /* RFC 3810 ch 7.4 */
   1b8e2:	689a      	ldr	r2, [r3, #8]
   1b8e4:	2101      	movs	r1, #1
   1b8e6:	71d1      	strb	r1, [r2, #7]

	net_pkt_set_ipv6_hdr_prev(pkt, pkt->frags->len);
   1b8e8:	899b      	ldrh	r3, [r3, #12]
	pkt->ipv6_prev_hdr_start = offset;
   1b8ea:	8783      	strh	r3, [r0, #60]	; 0x3c
	pkt = net_ipv6_create_raw(pkt,
   1b8ec:	4604      	mov	r4, r0

	/* Add hop-by-hop option and router alert option, RFC 3810 ch 5. */
	net_pkt_append_u8(pkt, IPPROTO_ICMPV6);
   1b8ee:	213a      	movs	r1, #58	; 0x3a
   1b8f0:	f7ff fe99 	bl	1b626 <net_pkt_append_u8>
	net_pkt_append_u8(pkt, 0); /* length (0 means 8 bytes) */
   1b8f4:	4629      	mov	r1, r5
   1b8f6:	4620      	mov	r0, r4
   1b8f8:	f7ff fe95 	bl	1b626 <net_pkt_append_u8>

#define ROUTER_ALERT_LEN 8

	/* IPv6 router alert option is described in RFC 2711. */
	net_pkt_append_be16(pkt, 0x0502); /* RFC 2711 ch 2.1 */
   1b8fc:	f240 5102 	movw	r1, #1282	; 0x502
   1b900:	4620      	mov	r0, r4
   1b902:	f7ff fe9f 	bl	1b644 <net_pkt_append_be16>
	net_pkt_append_be16(pkt, 0); /* pkt contains MLD msg */
   1b906:	4629      	mov	r1, r5
   1b908:	4620      	mov	r0, r4
   1b90a:	f7ff fe9b 	bl	1b644 <net_pkt_append_be16>

	net_pkt_append_u8(pkt, 0); /* padding */
   1b90e:	4629      	mov	r1, r5
   1b910:	4620      	mov	r0, r4
   1b912:	f7ff fe88 	bl	1b626 <net_pkt_append_u8>
	net_pkt_append_u8(pkt, 0); /* padding */
   1b916:	4629      	mov	r1, r5
   1b918:	4620      	mov	r0, r4
   1b91a:	f7ff fe84 	bl	1b626 <net_pkt_append_u8>

	/* ICMPv6 header */
	net_pkt_append_u8(pkt, NET_ICMPV6_MLDv2); /* type */
   1b91e:	218f      	movs	r1, #143	; 0x8f
   1b920:	4620      	mov	r0, r4
   1b922:	f7ff fe80 	bl	1b626 <net_pkt_append_u8>
	net_pkt_append_u8(pkt, 0); /* code */
   1b926:	4629      	mov	r1, r5
   1b928:	4620      	mov	r0, r4
   1b92a:	f7ff fe7c 	bl	1b626 <net_pkt_append_u8>
	net_pkt_append_be16(pkt, 0); /* chksum */
   1b92e:	4629      	mov	r1, r5
   1b930:	4620      	mov	r0, r4
   1b932:	f7ff fe87 	bl	1b644 <net_pkt_append_be16>

	pkt->frags->len = NET_IPV6ICMPH_LEN + ROUTER_ALERT_LEN;
   1b936:	68a3      	ldr	r3, [r4, #8]
   1b938:	2234      	movs	r2, #52	; 0x34
   1b93a:	819a      	strh	r2, [r3, #12]
	pkt->iface = iface;
   1b93c:	6166      	str	r6, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1b93e:	7d73      	ldrb	r3, [r6, #21]
   1b940:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1b944:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_iface(pkt, iface);

	net_pkt_append_be16(pkt, 0); /* reserved field */
   1b948:	4629      	mov	r1, r5
   1b94a:	4620      	mov	r0, r4
   1b94c:	f7ff fe7a 	bl	1b644 <net_pkt_append_be16>

	/* Insert the actual multicast record(s) here */
	net_pkt_frag_add(pkt, frags);
   1b950:	4639      	mov	r1, r7
   1b952:	4620      	mov	r0, r4
   1b954:	f7fd fe60 	bl	19618 <net_pkt_frag_add>

	ret = net_ipv6_finalize_raw(pkt, NET_IPV6_NEXTHDR_HBHO);
   1b958:	4629      	mov	r1, r5
   1b95a:	4620      	mov	r0, r4
   1b95c:	f7ff ff79 	bl	1b852 <net_ipv6_finalize_raw>
	if (ret < 0) {
   1b960:	1e06      	subs	r6, r0, #0
   1b962:	db2b      	blt.n	1b9bc <send_mldv2_raw+0x134>
	pkt->ipv6_ext_len = len;
   1b964:	2308      	movs	r3, #8
   1b966:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1b96a:	213a      	movs	r1, #58	; 0x3a
   1b96c:	4620      	mov	r0, r4
		goto drop;
	}

	net_pkt_set_ipv6_ext_len(pkt, ROUTER_ALERT_LEN);

	net_pkt_write_be16(pkt, pkt->frags,
   1b96e:	68a7      	ldr	r7, [r4, #8]
   1b970:	f7fe f982 	bl	19c78 <net_calc_chksum>
   1b974:	213a      	movs	r1, #58	; 0x3a
   1b976:	4606      	mov	r6, r0
   1b978:	4620      	mov	r0, r4
   1b97a:	f7fe f97d 	bl	19c78 <net_calc_chksum>
			   NET_IPV6H_LEN + ROUTER_ALERT_LEN + 2,
			   &pos, ntohs(~net_calc_chksum_icmpv6(pkt)));
   1b97e:	ea6f 2626 	mvn.w	r6, r6, asr #8
   1b982:	b2f6      	uxtb	r6, r6
   1b984:	43c0      	mvns	r0, r0
   1b986:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
	net_pkt_write_be16(pkt, pkt->frags,
   1b98a:	b280      	uxth	r0, r0
						 struct net_buf *frag,
						 u16_t offset,
						 u16_t *pos,
						 u16_t data)
{
	u16_t value = htons(data);
   1b98c:	0203      	lsls	r3, r0, #8
   1b98e:	ea43 2010 	orr.w	r0, r3, r0, lsr #8

	return net_pkt_write(pkt, frag, offset, pos, sizeof(u16_t),
   1b992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b996:	9302      	str	r3, [sp, #8]
   1b998:	f10d 0316 	add.w	r3, sp, #22
   1b99c:	9301      	str	r3, [sp, #4]
   1b99e:	2302      	movs	r3, #2
	u16_t value = htons(data);
   1b9a0:	f8ad 0016 	strh.w	r0, [sp, #22]
	return net_pkt_write(pkt, frag, offset, pos, sizeof(u16_t),
   1b9a4:	9300      	str	r3, [sp, #0]
   1b9a6:	2232      	movs	r2, #50	; 0x32
   1b9a8:	ab05      	add	r3, sp, #20
   1b9aa:	4639      	mov	r1, r7
   1b9ac:	4620      	mov	r0, r4
   1b9ae:	f7fd ffb3 	bl	19918 <net_pkt_write>

	ret = net_send_data(pkt);
   1b9b2:	4620      	mov	r0, r4
   1b9b4:	f7fc fd50 	bl	18458 <net_send_data>
	if (ret < 0) {
   1b9b8:	1e06      	subs	r6, r0, #0
   1b9ba:	da05      	bge.n	1b9c8 <send_mldv2_raw+0x140>
	net_stats_update_ipv6_mld_sent();

	return 0;

drop:
	net_pkt_unref(pkt);
   1b9bc:	4620      	mov	r0, r4
   1b9be:	f7fd fe04 	bl	195ca <net_pkt_unref>
	net_stats_update_icmp_drop();
	net_stats_update_ipv6_mld_drop();

	return ret;
}
   1b9c2:	4630      	mov	r0, r6
   1b9c4:	b00b      	add	sp, #44	; 0x2c
   1b9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return 0;
   1b9c8:	462e      	mov	r6, r5
   1b9ca:	e7fa      	b.n	1b9c2 <send_mldv2_raw+0x13a>

0001b9cc <send_mldv2>:

static int send_mldv2(struct net_if *iface, const struct in6_addr *addr,
		      u8_t mode)
{
   1b9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b9ce:	460e      	mov	r6, r1
	struct net_pkt *pkt;
	int ret;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1b9d0:	2100      	movs	r1, #0
{
   1b9d2:	4617      	mov	r7, r2
   1b9d4:	4605      	mov	r5, r0
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1b9d6:	f7ff fcc8 	bl	1b36a <net_if_get_ll_reserve>
   1b9da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b9de:	f7fd fdbd 	bl	1955c <net_pkt_get_reserve_tx>
				     K_FOREVER);

	net_pkt_append_be16(pkt, 1); /* number of records */
   1b9e2:	2101      	movs	r1, #1
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1b9e4:	4604      	mov	r4, r0
	net_pkt_append_be16(pkt, 1); /* number of records */
   1b9e6:	f7ff fe2d 	bl	1b644 <net_pkt_append_be16>
	net_pkt_append_u8(pkt, record_type);
   1b9ea:	4639      	mov	r1, r7
   1b9ec:	4620      	mov	r0, r4
   1b9ee:	f7ff fe1a 	bl	1b626 <net_pkt_append_u8>
	net_pkt_append_u8(pkt, 0); /* aux data len */
   1b9f2:	2100      	movs	r1, #0
   1b9f4:	4620      	mov	r0, r4
   1b9f6:	f7ff fe16 	bl	1b626 <net_pkt_append_u8>
	net_pkt_append_be16(pkt, num_sources); /* number of addresses */
   1b9fa:	2101      	movs	r1, #1
   1b9fc:	4620      	mov	r0, r4
   1b9fe:	f7ff fe21 	bl	1b644 <net_pkt_append_be16>
	return net_pkt_append(pkt, len, data, timeout) == len;
   1ba02:	4632      	mov	r2, r6
   1ba04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ba08:	2110      	movs	r1, #16
   1ba0a:	4620      	mov	r0, r4
   1ba0c:	f7fd fed0 	bl	197b0 <net_pkt_append>
   1ba10:	4a09      	ldr	r2, [pc, #36]	; (1ba38 <send_mldv2+0x6c>)
   1ba12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ba16:	2110      	movs	r1, #16
   1ba18:	4620      	mov	r0, r4
   1ba1a:	f7fd fec9 	bl	197b0 <net_pkt_append>

	pkt = create_mldv2(pkt, addr, mode, 1);

	ret = send_mldv2_raw(iface, pkt->frags);
   1ba1e:	68a1      	ldr	r1, [r4, #8]
   1ba20:	4628      	mov	r0, r5
   1ba22:	f7ff ff31 	bl	1b888 <send_mldv2_raw>

	pkt->frags = NULL;
   1ba26:	2300      	movs	r3, #0
	ret = send_mldv2_raw(iface, pkt->frags);
   1ba28:	4605      	mov	r5, r0
	pkt->frags = NULL;
   1ba2a:	60a3      	str	r3, [r4, #8]

	net_pkt_unref(pkt);
   1ba2c:	4620      	mov	r0, r4
   1ba2e:	f7fd fdcc 	bl	195ca <net_pkt_unref>

	return ret;
}
   1ba32:	4628      	mov	r0, r5
   1ba34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ba36:	bf00      	nop
   1ba38:	00021344 	.word	0x00021344

0001ba3c <handle_mld_query>:

	net_pkt_unref(pkt);
}

static enum net_verdict handle_mld_query(struct net_pkt *pkt)
{
   1ba3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ba40:	4604      	mov	r4, r0
   1ba42:	b08d      	sub	sp, #52	; 0x34
	return net_buf_frags_len(pkt->frags);
   1ba44:	6880      	ldr	r0, [r0, #8]
   1ba46:	f7ff fc7b 	bl	1b340 <net_buf_frags_len>
	net_stats_update_ipv6_mld_recv();

	/* offset tells now where the ICMPv6 header is starting */
	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
				net_pkt_ipv6_ext_len(pkt) +
   1ba4a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
				net_pkt_ip_hdr_len(pkt) +
   1ba4e:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
	frag = net_frag_get_pos(pkt,
   1ba52:	4419      	add	r1, r3
   1ba54:	aa06      	add	r2, sp, #24
   1ba56:	3104      	adds	r1, #4
	u16_t total_len = net_pkt_get_len(pkt);
   1ba58:	b286      	uxth	r6, r0
	frag = net_frag_get_pos(pkt,
   1ba5a:	4620      	mov	r0, r4
   1ba5c:	f7fd ffe5 	bl	19a2a <net_frag_get_pos>
	return net_frag_read(frag, offset, pos, len, NULL);
   1ba60:	2700      	movs	r7, #0
				sizeof(struct net_icmp_hdr),
				&offset);

	frag = net_frag_read_be16(frag, offset, &pos, &max_rsp_code);
   1ba62:	ab05      	add	r3, sp, #20
   1ba64:	f10d 021a 	add.w	r2, sp, #26
   1ba68:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1ba6c:	f7fd ff38 	bl	198e0 <net_frag_read_be16>
	frag = net_frag_skip(frag, pos, &pos, 2); /* two reserved bytes */
	frag = net_frag_read(frag, pos, &pos, sizeof(mcast), mcast.s6_addr);
   1ba70:	ad08      	add	r5, sp, #32
   1ba72:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   1ba76:	9700      	str	r7, [sp, #0]
   1ba78:	2302      	movs	r3, #2
   1ba7a:	f10d 021a 	add.w	r2, sp, #26
   1ba7e:	f7fd fef7 	bl	19870 <net_frag_read>
   1ba82:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   1ba86:	9500      	str	r5, [sp, #0]
   1ba88:	2310      	movs	r3, #16
   1ba8a:	f10d 021a 	add.w	r2, sp, #26
   1ba8e:	f7fd feef 	bl	19870 <net_frag_read>
   1ba92:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   1ba96:	9700      	str	r7, [sp, #0]
   1ba98:	2302      	movs	r3, #2
   1ba9a:	f10d 021a 	add.w	r2, sp, #26
   1ba9e:	f7fd fee7 	bl	19870 <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 2); /* skip S, QRV & QQIC */
	frag = net_frag_read_be16(pkt->frags, pos, &pos, &num_src);
   1baa2:	f10d 0316 	add.w	r3, sp, #22
   1baa6:	f10d 021a 	add.w	r2, sp, #26
   1baaa:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   1baae:	68a0      	ldr	r0, [r4, #8]
   1bab0:	f7fd ff16 	bl	198e0 <net_frag_read_be16>
	if (!frag && pos == 0xffff) {
   1bab4:	b928      	cbnz	r0, 1bac2 <handle_mld_query+0x86>
   1bab6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   1baba:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1babe:	429a      	cmp	r2, r3
   1bac0:	d070      	beq.n	1bba4 <handle_mld_query+0x168>
		goto drop;
	}

	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
		sizeof(struct in6_addr) * num_src;
   1bac2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1bac6:	011b      	lsls	r3, r3, #4
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   1bac8:	f103 0244 	add.w	r2, r3, #68	; 0x44
   1bacc:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   1bad0:	4413      	add	r3, r2
   1bad2:	b29b      	uxth	r3, r3

	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   1bad4:	429e      	cmp	r6, r3
   1bad6:	d307      	bcc.n	1bae8 <handle_mld_query+0xac>
   1bad8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   1badc:	d804      	bhi.n	1bae8 <handle_mld_query+0xac>
	return pkt->frags->data;
   1bade:	68a3      	ldr	r3, [r4, #8]
	     (NET_IPV6_HDR(pkt)->hop_limit != 1))) {
   1bae0:	689b      	ldr	r3, [r3, #8]
	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   1bae2:	79db      	ldrb	r3, [r3, #7]
   1bae4:	2b01      	cmp	r3, #1
   1bae6:	d008      	beq.n	1bafa <handle_mld_query+0xbe>
		struct net_icmp_hdr hdr, *icmp_hdr;

		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1bae8:	a907      	add	r1, sp, #28
   1baea:	4620      	mov	r0, r4
   1baec:	f7fe ff56 	bl	1a99c <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1baf0:	2800      	cmp	r0, #0
   1baf2:	d057      	beq.n	1bba4 <handle_mld_query+0x168>
   1baf4:	7843      	ldrb	r3, [r0, #1]
   1baf6:	2b00      	cmp	r3, #0
   1baf8:	d154      	bne.n	1bba4 <handle_mld_query+0x168>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1bafa:	4628      	mov	r0, r5
   1bafc:	2210      	movs	r2, #16
   1bafe:	492b      	ldr	r1, [pc, #172]	; (1bbac <handle_mld_query+0x170>)
   1bb00:	f7e4 fec6 	bl	890 <memcmp>
			goto drop;
		}
	}

	/* Currently we only support a unspecified address query. */
	if (!net_ipv6_addr_cmp(&mcast, net_ipv6_unspecified_address())) {
   1bb04:	4605      	mov	r5, r0
   1bb06:	2800      	cmp	r0, #0
   1bb08:	d14c      	bne.n	1bba4 <handle_mld_query+0x168>
   1bb0a:	6966      	ldr	r6, [r4, #20]
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1bb0c:	4601      	mov	r1, r0
   1bb0e:	4630      	mov	r0, r6
   1bb10:	f7ff fc2b 	bl	1b36a <net_if_get_ll_reserve>
   1bb14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1bb18:	f7fd fd20 	bl	1955c <net_pkt_get_reserve_tx>
	net_pkt_append_u8(pkt, 0); /* This will be the record count */
   1bb1c:	4629      	mov	r1, r5
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1bb1e:	4604      	mov	r4, r0
	net_pkt_append_u8(pkt, 0); /* This will be the record count */
   1bb20:	f7ff fd81 	bl	1b626 <net_pkt_append_u8>
   1bb24:	f506 78bc 	add.w	r8, r6, #376	; 0x178
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1bb28:	462f      	mov	r7, r5
		if (!iface->ipv6.mcast[i].is_used ||
   1bb2a:	f04f 0918 	mov.w	r9, #24
   1bb2e:	fb09 6307 	mla	r3, r9, r7, r6
   1bb32:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1bb36:	07da      	lsls	r2, r3, #31
   1bb38:	d515      	bpl.n	1bb66 <handle_mld_query+0x12a>
   1bb3a:	079b      	lsls	r3, r3, #30
   1bb3c:	d513      	bpl.n	1bb66 <handle_mld_query+0x12a>
	net_pkt_append_u8(pkt, record_type);
   1bb3e:	2102      	movs	r1, #2
   1bb40:	4620      	mov	r0, r4
   1bb42:	f7ff fd70 	bl	1b626 <net_pkt_append_u8>
	net_pkt_append_u8(pkt, 0); /* aux data len */
   1bb46:	2100      	movs	r1, #0
   1bb48:	4620      	mov	r0, r4
   1bb4a:	f7ff fd6c 	bl	1b626 <net_pkt_append_u8>
	net_pkt_append_be16(pkt, num_sources); /* number of addresses */
   1bb4e:	2100      	movs	r1, #0
   1bb50:	4620      	mov	r0, r4
   1bb52:	f7ff fd77 	bl	1b644 <net_pkt_append_be16>
	return net_pkt_append(pkt, len, data, timeout) == len;
   1bb56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bb5a:	4642      	mov	r2, r8
   1bb5c:	2110      	movs	r1, #16
   1bb5e:	4620      	mov	r0, r4
   1bb60:	f7fd fe26 	bl	197b0 <net_pkt_append>
		count++;
   1bb64:	3501      	adds	r5, #1
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1bb66:	3701      	adds	r7, #1
   1bb68:	2f02      	cmp	r7, #2
   1bb6a:	f108 0818 	add.w	r8, r8, #24
   1bb6e:	d1de      	bne.n	1bb2e <handle_mld_query+0xf2>
	if (count > 0) {
   1bb70:	b1ad      	cbz	r5, 1bb9e <handle_mld_query+0x162>
	return net_pkt_write(pkt, frag, offset, pos, sizeof(u8_t),
   1bb72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		net_pkt_write_u8(pkt, pkt->frags, 0, &pos, count);
   1bb76:	68a1      	ldr	r1, [r4, #8]
   1bb78:	9302      	str	r3, [sp, #8]
   1bb7a:	f10d 0313 	add.w	r3, sp, #19
   1bb7e:	9301      	str	r3, [sp, #4]
   1bb80:	2301      	movs	r3, #1
   1bb82:	9300      	str	r3, [sp, #0]
   1bb84:	2200      	movs	r2, #0
   1bb86:	ab07      	add	r3, sp, #28
   1bb88:	4620      	mov	r0, r4
   1bb8a:	f88d 5013 	strb.w	r5, [sp, #19]
   1bb8e:	f7fd fec3 	bl	19918 <net_pkt_write>
		send_mldv2_raw(iface, pkt->frags);
   1bb92:	68a1      	ldr	r1, [r4, #8]
   1bb94:	4630      	mov	r0, r6
   1bb96:	f7ff fe77 	bl	1b888 <send_mldv2_raw>
		pkt->frags = NULL;
   1bb9a:	2300      	movs	r3, #0
   1bb9c:	60a3      	str	r3, [r4, #8]
	net_pkt_unref(pkt);
   1bb9e:	4620      	mov	r0, r4
   1bba0:	f7fd fd13 	bl	195ca <net_pkt_unref>

drop:
	net_stats_update_ipv6_mld_drop();

	return NET_DROP;
}
   1bba4:	2002      	movs	r0, #2
   1bba6:	b00d      	add	sp, #52	; 0x34
   1bba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1bbac:	00021344 	.word	0x00021344

0001bbb0 <net_ipv6_finalize>:
	if (context->flags & NET_CONTEXT_PROTO) {
   1bbb0:	f890 2055 	ldrb.w	r2, [r0, #85]	; 0x55
{
   1bbb4:	460b      	mov	r3, r1
   1bbb6:	f012 0f40 	tst.w	r2, #64	; 0x40
	return net_ipv6_finalize_raw(pkt, net_context_get_ip_proto(context));
   1bbba:	bf14      	ite	ne
   1bbbc:	2106      	movne	r1, #6
   1bbbe:	2111      	moveq	r1, #17
   1bbc0:	4618      	mov	r0, r3
   1bbc2:	f7ff be46 	b.w	1b852 <net_ipv6_finalize_raw>

0001bbc6 <net_ipv6_nbr_lookup>:
	return nbr_lookup(&net_neighbor.table, iface, addr);
   1bbc6:	f7ff bd4d 	b.w	1b664 <nbr_lookup.isra.29>

0001bbca <net_ipv6_send_na>:
{
   1bbca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bbce:	4689      	mov	r9, r1
   1bbd0:	b092      	sub	sp, #72	; 0x48
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1bbd2:	4611      	mov	r1, r2
{
   1bbd4:	4615      	mov	r5, r2
   1bbd6:	461e      	mov	r6, r3
   1bbd8:	4607      	mov	r7, r0
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1bbda:	f7ff fbc6 	bl	1b36a <net_if_get_ll_reserve>
   1bbde:	210a      	movs	r1, #10
   1bbe0:	f7fd fcbc 	bl	1955c <net_pkt_get_reserve_tx>
	if (!pkt) {
   1bbe4:	4604      	mov	r4, r0
   1bbe6:	b138      	cbz	r0, 1bbf8 <net_ipv6_send_na+0x2e>
	frag = net_pkt_get_frag(pkt, ND_NET_BUF_TIMEOUT);
   1bbe8:	210a      	movs	r1, #10
   1bbea:	f7fd fccf 	bl	1958c <net_pkt_get_frag>
	if (!frag) {
   1bbee:	4682      	mov	sl, r0
   1bbf0:	b928      	cbnz	r0, 1bbfe <net_ipv6_send_na+0x34>
		net_pkt_unref(pkt);
   1bbf2:	4620      	mov	r0, r4
   1bbf4:	f7fd fce9 	bl	195ca <net_pkt_unref>
		return -ENOMEM;
   1bbf8:	f06f 000b 	mvn.w	r0, #11
   1bbfc:	e03a      	b.n	1bc74 <net_ipv6_send_na+0xaa>
	net_pkt_frag_add(pkt, frag);
   1bbfe:	4601      	mov	r1, r0
   1bc00:	4620      	mov	r0, r4
   1bc02:	f7fd fd09 	bl	19618 <net_pkt_frag_add>
	pkt->iface = iface;
   1bc06:	6167      	str	r7, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1bc08:	7d7b      	ldrb	r3, [r7, #21]
   1bc0a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1bc0e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   1bc12:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   1bc16:	220a      	movs	r2, #10
   1bc18:	f362 03c6 	bfi	r3, r2, #3, #4
   1bc1c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	pkt->ip_hdr_len = len;
   1bc20:	2328      	movs	r3, #40	; 0x28
   1bc22:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	net_pkt_ll_clear(pkt);
   1bc26:	4620      	mov	r0, r4
   1bc28:	f7ff fc1d 	bl	1b466 <net_pkt_ll_clear>
   1bc2c:	7d3b      	ldrb	r3, [r7, #20]
	if (iface->link_addr.len == 6) {
   1bc2e:	2b06      	cmp	r3, #6
   1bc30:	d023      	beq.n	1bc7a <net_ipv6_send_na+0xb0>
	return 0;
   1bc32:	2b08      	cmp	r3, #8
   1bc34:	bf0c      	ite	eq
   1bc36:	2710      	moveq	r7, #16
   1bc38:	2700      	movne	r7, #0
	pkt->ipv6_ext_len = len;
   1bc3a:	2300      	movs	r3, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_na_hdr) + llao_len,
   1bc3c:	f107 0814 	add.w	r8, r7, #20
   1bc40:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   1bc44:	2288      	movs	r2, #136	; 0x88
   1bc46:	f008 01fc 	and.w	r1, r8, #252	; 0xfc
   1bc4a:	4620      	mov	r0, r4
   1bc4c:	f7ff fbea 	bl	1b424 <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_na_hdr) + llao_len);
   1bc50:	4641      	mov	r1, r8
   1bc52:	f10a 0008 	add.w	r0, sl, #8
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1bc56:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
	net_buf_add(frag, sizeof(struct net_icmpv6_na_hdr) + llao_len);
   1bc5a:	f7fb ffb7 	bl	17bcc <net_buf_simple_add>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1bc5e:	4651      	mov	r1, sl
   1bc60:	4620      	mov	r0, r4
   1bc62:	f7ff f88b 	bl	1ad7c <net_icmpv6_get_na_hdr>
	if (!na_hdr) {
   1bc66:	4680      	mov	r8, r0
   1bc68:	b948      	cbnz	r0, 1bc7e <net_ipv6_send_na+0xb4>
	net_pkt_unref(pkt);
   1bc6a:	4620      	mov	r0, r4
   1bc6c:	f7fd fcad 	bl	195ca <net_pkt_unref>
	return -EINVAL;
   1bc70:	f06f 0015 	mvn.w	r0, #21
}
   1bc74:	b012      	add	sp, #72	; 0x48
   1bc76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 8;
   1bc7a:	2708      	movs	r7, #8
   1bc7c:	e7dd      	b.n	1bc3a <net_ipv6_send_na+0x70>
	return pkt->frags->data;
   1bc7e:	68a3      	ldr	r3, [r4, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1bc80:	f10d 0c04 	add.w	ip, sp, #4
   1bc84:	f8d3 e008 	ldr.w	lr, [r3, #8]
   1bc88:	464b      	mov	r3, r9
   1bc8a:	f109 0910 	add.w	r9, r9, #16
   1bc8e:	6818      	ldr	r0, [r3, #0]
   1bc90:	6859      	ldr	r1, [r3, #4]
   1bc92:	4662      	mov	r2, ip
   1bc94:	c203      	stmia	r2!, {r0, r1}
   1bc96:	3308      	adds	r3, #8
   1bc98:	454b      	cmp	r3, r9
   1bc9a:	4694      	mov	ip, r2
   1bc9c:	d1f7      	bne.n	1bc8e <net_ipv6_send_na+0xc4>
   1bc9e:	f10d 0c04 	add.w	ip, sp, #4
   1bca2:	f10e 0208 	add.w	r2, lr, #8
   1bca6:	f10d 0914 	add.w	r9, sp, #20
   1bcaa:	4663      	mov	r3, ip
   1bcac:	cb03      	ldmia	r3!, {r0, r1}
   1bcae:	454b      	cmp	r3, r9
   1bcb0:	6010      	str	r0, [r2, #0]
   1bcb2:	6051      	str	r1, [r2, #4]
   1bcb4:	469c      	mov	ip, r3
   1bcb6:	f102 0208 	add.w	r2, r2, #8
   1bcba:	d1f6      	bne.n	1bcaa <net_ipv6_send_na+0xe0>
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1bcbc:	ab05      	add	r3, sp, #20
   1bcbe:	462a      	mov	r2, r5
   1bcc0:	f105 0910 	add.w	r9, r5, #16
   1bcc4:	469c      	mov	ip, r3
   1bcc6:	6810      	ldr	r0, [r2, #0]
   1bcc8:	6851      	ldr	r1, [r2, #4]
   1bcca:	461d      	mov	r5, r3
   1bccc:	c503      	stmia	r5!, {r0, r1}
   1bcce:	3208      	adds	r2, #8
   1bcd0:	454a      	cmp	r2, r9
   1bcd2:	462b      	mov	r3, r5
   1bcd4:	d1f7      	bne.n	1bcc6 <net_ipv6_send_na+0xfc>
   1bcd6:	f10e 0318 	add.w	r3, lr, #24
   1bcda:	aa09      	add	r2, sp, #36	; 0x24
   1bcdc:	4665      	mov	r5, ip
   1bcde:	cd03      	ldmia	r5!, {r0, r1}
   1bce0:	4295      	cmp	r5, r2
   1bce2:	6018      	str	r0, [r3, #0]
   1bce4:	6059      	str	r1, [r3, #4]
   1bce6:	46ac      	mov	ip, r5
   1bce8:	f103 0308 	add.w	r3, r3, #8
   1bcec:	d1f6      	bne.n	1bcdc <net_ipv6_send_na+0x112>
	net_ipaddr_copy(&na_hdr->tgt, tgt);
   1bcee:	4633      	mov	r3, r6
   1bcf0:	f103 0e10 	add.w	lr, r3, #16
   1bcf4:	4616      	mov	r6, r2
   1bcf6:	6818      	ldr	r0, [r3, #0]
   1bcf8:	6859      	ldr	r1, [r3, #4]
   1bcfa:	4635      	mov	r5, r6
   1bcfc:	c503      	stmia	r5!, {r0, r1}
   1bcfe:	3308      	adds	r3, #8
   1bd00:	4573      	cmp	r3, lr
   1bd02:	462e      	mov	r6, r5
   1bd04:	d1f7      	bne.n	1bcf6 <net_ipv6_send_na+0x12c>
   1bd06:	4613      	mov	r3, r2
   1bd08:	f108 0504 	add.w	r5, r8, #4
   1bd0c:	461a      	mov	r2, r3
   1bd0e:	ca03      	ldmia	r2!, {r0, r1}
   1bd10:	4552      	cmp	r2, sl
   1bd12:	6028      	str	r0, [r5, #0]
   1bd14:	6069      	str	r1, [r5, #4]
   1bd16:	4613      	mov	r3, r2
   1bd18:	f105 0508 	add.w	r5, r5, #8
   1bd1c:	d1f6      	bne.n	1bd0c <net_ipv6_send_na+0x142>
		 (u8_t *)net_pkt_icmp_data(pkt) + sizeof(struct net_icmp_hdr) +
   1bd1e:	4620      	mov	r0, r4
	set_llao(&net_pkt_iface(pkt)->link_addr,
   1bd20:	6965      	ldr	r5, [r4, #20]
		 (u8_t *)net_pkt_icmp_data(pkt) + sizeof(struct net_icmp_hdr) +
   1bd22:	f7fd fe8b 	bl	19a3c <net_pkt_icmp_data>
	set_llao(&net_pkt_iface(pkt)->link_addr,
   1bd26:	3510      	adds	r5, #16
   1bd28:	463a      	mov	r2, r7
   1bd2a:	f100 0118 	add.w	r1, r0, #24
   1bd2e:	2302      	movs	r3, #2
   1bd30:	4628      	mov	r0, r5
   1bd32:	f7ff fba7 	bl	1b484 <set_llao>
	na_hdr->flags = flags;
   1bd36:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   1bd3a:	f888 3000 	strb.w	r3, [r8]
	net_icmpv6_set_na_hdr(pkt, na_hdr);
   1bd3e:	4641      	mov	r1, r8
   1bd40:	4620      	mov	r0, r4
   1bd42:	f7ff f850 	bl	1ade6 <net_icmpv6_set_na_hdr>
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   1bd46:	68a1      	ldr	r1, [r4, #8]
		sizeof(struct net_icmpv6_na_hdr) + llao_len;
   1bd48:	3740      	adds	r7, #64	; 0x40
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   1bd4a:	818f      	strh	r7, [r1, #12]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1bd4c:	4620      	mov	r0, r4
   1bd4e:	f7fe fddb 	bl	1a908 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   1bd52:	4620      	mov	r0, r4
   1bd54:	f7fc fb80 	bl	18458 <net_send_data>
   1bd58:	2800      	cmp	r0, #0
   1bd5a:	db86      	blt.n	1bc6a <net_ipv6_send_na+0xa0>
	return 0;
   1bd5c:	2000      	movs	r0, #0
   1bd5e:	e789      	b.n	1bc74 <net_ipv6_send_na+0xaa>

0001bd60 <net_ipv6_nbr_set_reachable_timer>:
	k_delayed_work_submit(&net_ipv6_nbr_data(nbr)->reachable, time);
   1bd60:	68c9      	ldr	r1, [r1, #12]
   1bd62:	f8d0 2244 	ldr.w	r2, [r0, #580]	; 0x244
   1bd66:	4802      	ldr	r0, [pc, #8]	; (1bd70 <net_ipv6_nbr_set_reachable_timer+0x10>)
   1bd68:	3114      	adds	r1, #20
   1bd6a:	f004 b913 	b.w	1ff94 <k_delayed_work_submit_to_queue>
   1bd6e:	bf00      	nop
   1bd70:	20005218 	.word	0x20005218

0001bd74 <handle_na_input>:
{
   1bd74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd78:	4604      	mov	r4, r0
   1bd7a:	b08c      	sub	sp, #48	; 0x30
	return net_buf_frags_len(pkt->frags);
   1bd7c:	6880      	ldr	r0, [r0, #8]
   1bd7e:	f7ff fadf 	bl	1b340 <net_buf_frags_len>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &nahdr);
   1bd82:	a907      	add	r1, sp, #28
   1bd84:	4606      	mov	r6, r0
   1bd86:	4620      	mov	r0, r4
   1bd88:	f7fe fff8 	bl	1ad7c <net_icmpv6_get_na_hdr>
	if (!na_hdr) {
   1bd8c:	4605      	mov	r5, r0
   1bd8e:	b140      	cbz	r0, 1bda2 <handle_na_input+0x2e>
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   1bd90:	b2b6      	uxth	r6, r6
   1bd92:	2e41      	cmp	r6, #65	; 0x41
   1bd94:	d809      	bhi.n	1bdaa <handle_na_input+0x36>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1bd96:	a905      	add	r1, sp, #20
   1bd98:	4620      	mov	r0, r4
   1bd9a:	f7fe fdff 	bl	1a99c <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1bd9e:	2800      	cmp	r0, #0
   1bda0:	d154      	bne.n	1be4c <handle_na_input+0xd8>
	return NET_DROP;
   1bda2:	2002      	movs	r0, #2
}
   1bda4:	b00c      	add	sp, #48	; 0x30
   1bda6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return pkt->frags->data;
   1bdaa:	68a3      	ldr	r3, [r4, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1bdac:	689b      	ldr	r3, [r3, #8]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   1bdae:	79db      	ldrb	r3, [r3, #7]
   1bdb0:	2bff      	cmp	r3, #255	; 0xff
   1bdb2:	d1f0      	bne.n	1bd96 <handle_na_input+0x22>
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1bdb4:	7903      	ldrb	r3, [r0, #4]
   1bdb6:	2bff      	cmp	r3, #255	; 0xff
   1bdb8:	d0ed      	beq.n	1bd96 <handle_na_input+0x22>
	    (net_is_solicited(pkt) &&
   1bdba:	4620      	mov	r0, r4
   1bdbc:	f7ff fb12 	bl	1b3e4 <net_is_solicited>
	    net_is_ipv6_addr_mcast(&na_hdr->tgt) ||
   1bdc0:	b120      	cbz	r0, 1bdcc <handle_na_input+0x58>
   1bdc2:	68a3      	ldr	r3, [r4, #8]
	    (net_is_solicited(pkt) &&
   1bdc4:	689b      	ldr	r3, [r3, #8]
   1bdc6:	7e1b      	ldrb	r3, [r3, #24]
   1bdc8:	2bff      	cmp	r3, #255	; 0xff
   1bdca:	d0e4      	beq.n	1bd96 <handle_na_input+0x22>
	pkt->ipv6_ext_opt_len = len;
   1bdcc:	2314      	movs	r3, #20
   1bdce:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   1bdd2:	a902      	add	r1, sp, #8
   1bdd4:	4620      	mov	r0, r4
   1bdd6:	f7fe ffa0 	bl	1ad1a <net_icmpv6_get_nd_opt_hdr>
   1bdda:	4601      	mov	r1, r0
	return net_buf_frags_len(pkt->frags);
   1bddc:	68a0      	ldr	r0, [r4, #8]
   1bdde:	f7ff faaf 	bl	1b340 <net_buf_frags_len>
	u16_t tllao_offset = 0;
   1bde2:	2600      	movs	r6, #0
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   1bde4:	f1a0 072c 	sub.w	r7, r0, #44	; 0x2c
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   1bde8:	b131      	cbz	r1, 1bdf8 <handle_na_input+0x84>
   1bdea:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   1bdee:	4297      	cmp	r7, r2
   1bdf0:	d902      	bls.n	1bdf8 <handle_na_input+0x84>
		if (!nd_opt_hdr->len) {
   1bdf2:	784b      	ldrb	r3, [r1, #1]
   1bdf4:	2b00      	cmp	r3, #0
   1bdf6:	d12d      	bne.n	1be54 <handle_na_input+0xe0>
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   1bdf8:	1d2f      	adds	r7, r5, #4
   1bdfa:	4639      	mov	r1, r7
   1bdfc:	6960      	ldr	r0, [r4, #20]
   1bdfe:	f7ff fbae 	bl	1b55e <net_if_ipv6_addr_lookup_by_iface>
	if (ifaddr) {
   1be02:	2800      	cmp	r0, #0
   1be04:	d13e      	bne.n	1be84 <handle_na_input+0x110>
	struct net_linkaddr_storage lladdr = { 0 };
   1be06:	9003      	str	r0, [sp, #12]
   1be08:	9004      	str	r0, [sp, #16]
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt),
   1be0a:	4639      	mov	r1, r7
   1be0c:	6960      	ldr	r0, [r4, #20]
   1be0e:	f7ff fc29 	bl	1b664 <nbr_lookup.isra.29>
	if (!nbr) {
   1be12:	4605      	mov	r5, r0
   1be14:	2800      	cmp	r0, #0
   1be16:	d0c4      	beq.n	1bda2 <handle_na_input+0x2e>
	if (tllao_offset) {
   1be18:	2e00      	cmp	r6, #0
   1be1a:	d141      	bne.n	1bea0 <handle_na_input+0x12c>
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   1be1c:	786b      	ldrb	r3, [r5, #1]
   1be1e:	2bff      	cmp	r3, #255	; 0xff
   1be20:	d154      	bne.n	1becc <handle_na_input+0x158>
		if (!tllao_offset) {
   1be22:	2e00      	cmp	r6, #0
   1be24:	d0bd      	beq.n	1bda2 <handle_na_input+0x2e>
		nbr_lladdr.len = lladdr.len;
   1be26:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1be2a:	f88d 3018 	strb.w	r3, [sp, #24]
		nbr_lladdr.addr = lladdr.addr;
   1be2e:	aa0c      	add	r2, sp, #48	; 0x30
   1be30:	f10d 030e 	add.w	r3, sp, #14
   1be34:	f842 3d1c 	str.w	r3, [r2, #-28]!
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   1be38:	6961      	ldr	r1, [r4, #20]
   1be3a:	4628      	mov	r0, r5
   1be3c:	f7ff f9fe 	bl	1b23c <net_nbr_link>
   1be40:	2800      	cmp	r0, #0
   1be42:	d043      	beq.n	1becc <handle_na_input+0x158>
			nbr_free(nbr);
   1be44:	4628      	mov	r0, r5
   1be46:	f7ff faaa 	bl	1b39e <nbr_free>
   1be4a:	e7aa      	b.n	1bda2 <handle_na_input+0x2e>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1be4c:	7843      	ldrb	r3, [r0, #1]
   1be4e:	2b00      	cmp	r3, #0
   1be50:	d1a7      	bne.n	1bda2 <handle_na_input+0x2e>
   1be52:	e7bb      	b.n	1bdcc <handle_na_input+0x58>
		switch (nd_opt_hdr->type) {
   1be54:	7809      	ldrb	r1, [r1, #0]
   1be56:	2902      	cmp	r1, #2
   1be58:	d107      	bne.n	1be6a <handle_na_input+0xf6>
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   1be5a:	f894 6035 	ldrb.w	r6, [r4, #53]	; 0x35
				net_pkt_ipv6_ext_len(pkt) +
   1be5e:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   1be62:	440e      	add	r6, r1
   1be64:	3606      	adds	r6, #6
   1be66:	4416      	add	r6, r2
   1be68:	b2b6      	uxth	r6, r6
		net_pkt_set_ipv6_ext_opt_len(pkt,
   1be6a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1be6e:	b2db      	uxtb	r3, r3
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   1be70:	4293      	cmp	r3, r2
	pkt->ipv6_ext_opt_len = len;
   1be72:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   1be76:	d994      	bls.n	1bda2 <handle_na_input+0x2e>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   1be78:	a902      	add	r1, sp, #8
   1be7a:	4620      	mov	r0, r4
   1be7c:	f7fe ff4d 	bl	1ad1a <net_icmpv6_get_nd_opt_hdr>
   1be80:	4601      	mov	r1, r0
   1be82:	e7b1      	b.n	1bde8 <handle_na_input+0x74>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   1be84:	f990 3065 	ldrsb.w	r3, [r0, #101]	; 0x65
   1be88:	2b00      	cmp	r3, #0
   1be8a:	d18a      	bne.n	1bda2 <handle_na_input+0x2e>
	if (net_is_ipv6_ll_addr(addr)) {
   1be8c:	88aa      	ldrh	r2, [r5, #4]
   1be8e:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1be92:	429a      	cmp	r2, r3
   1be94:	d085      	beq.n	1bda2 <handle_na_input+0x2e>
	net_if_ipv6_dad_failed(iface, addr);
   1be96:	4639      	mov	r1, r7
   1be98:	6960      	ldr	r0, [r4, #20]
   1be9a:	f7fc fe9d 	bl	18bd8 <net_if_ipv6_dad_failed>
   1be9e:	e780      	b.n	1bda2 <handle_na_input+0x2e>
		lladdr.len = net_pkt_iface(pkt)->link_addr.len;
   1bea0:	6963      	ldr	r3, [r4, #20]
		frag = net_frag_read(pkt->frags, tllao_offset,
   1bea2:	68a0      	ldr	r0, [r4, #8]
		lladdr.len = net_pkt_iface(pkt)->link_addr.len;
   1bea4:	7d1b      	ldrb	r3, [r3, #20]
   1bea6:	f88d 300d 	strb.w	r3, [sp, #13]
		frag = net_frag_read(pkt->frags, tllao_offset,
   1beaa:	f10d 020e 	add.w	r2, sp, #14
   1beae:	9200      	str	r2, [sp, #0]
   1beb0:	4631      	mov	r1, r6
   1beb2:	f10d 020a 	add.w	r2, sp, #10
   1beb6:	f7fd fcdb 	bl	19870 <net_frag_read>
		if (!frag && pos == 0xffff) {
   1beba:	2800      	cmp	r0, #0
   1bebc:	d1ae      	bne.n	1be1c <handle_na_input+0xa8>
   1bebe:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1bec2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bec6:	429a      	cmp	r2, r3
   1bec8:	d1a8      	bne.n	1be1c <handle_na_input+0xa8>
   1beca:	e76a      	b.n	1bda2 <handle_na_input+0x2e>
	cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   1becc:	7868      	ldrb	r0, [r5, #1]
   1bece:	f7ff fa2f 	bl	1b330 <net_nbr_get_lladdr>
	if (!cached_lladdr) {
   1bed2:	4607      	mov	r7, r0
   1bed4:	2800      	cmp	r0, #0
   1bed6:	f43f af64 	beq.w	1bda2 <handle_na_input+0x2e>
	if (tllao_offset) {
   1beda:	2e00      	cmp	r6, #0
   1bedc:	d048      	beq.n	1bf70 <handle_na_input+0x1fc>
		lladdr_changed = memcmp(lladdr.addr,
   1bede:	7842      	ldrb	r2, [r0, #1]
   1bee0:	1c81      	adds	r1, r0, #2
   1bee2:	f10d 000e 	add.w	r0, sp, #14
   1bee6:	f7e4 fcd3 	bl	890 <memcmp>
   1beea:	f110 0800 	adds.w	r8, r0, #0
   1beee:	bf18      	it	ne
   1bef0:	f04f 0801 	movne.w	r8, #1
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   1bef4:	68eb      	ldr	r3, [r5, #12]
   1bef6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1befa:	2b00      	cmp	r3, #0
   1befc:	d13f      	bne.n	1bf7e <handle_na_input+0x20a>
		if (!tllao_offset) {
   1befe:	2e00      	cmp	r6, #0
   1bf00:	f43f af4f 	beq.w	1bda2 <handle_na_input+0x2e>
		if (lladdr_changed) {
   1bf04:	f1b8 0f00 	cmp.w	r8, #0
   1bf08:	d005      	beq.n	1bf16 <handle_na_input+0x1a2>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   1bf0a:	787a      	ldrb	r2, [r7, #1]
   1bf0c:	f10d 010e 	add.w	r1, sp, #14
   1bf10:	4638      	mov	r0, r7
   1bf12:	f7ff fa56 	bl	1b3c2 <net_linkaddr_set>
		if (net_is_solicited(pkt)) {
   1bf16:	4620      	mov	r0, r4
   1bf18:	f7ff fa64 	bl	1b3e4 <net_is_solicited>
   1bf1c:	b350      	cbz	r0, 1bf74 <handle_na_input+0x200>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   1bf1e:	2101      	movs	r1, #1
   1bf20:	4628      	mov	r0, r5
   1bf22:	f7ff fa25 	bl	1b370 <ipv6_nbr_set_state>
   1bf26:	68eb      	ldr	r3, [r5, #12]
			net_ipv6_nbr_data(nbr)->ns_count = 0;
   1bf28:	2200      	movs	r2, #0
   1bf2a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			k_delayed_work_cancel(
   1bf2e:	68e8      	ldr	r0, [r5, #12]
   1bf30:	3014      	adds	r0, #20
   1bf32:	f003 ffd5 	bl	1fee0 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   1bf36:	4629      	mov	r1, r5
   1bf38:	6960      	ldr	r0, [r4, #20]
   1bf3a:	f7ff ff11 	bl	1bd60 <net_ipv6_nbr_set_reachable_timer>
	net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   1bf3e:	4620      	mov	r0, r4
   1bf40:	68ee      	ldr	r6, [r5, #12]
   1bf42:	f7ff fa65 	bl	1b410 <net_is_router>
	pending = net_ipv6_nbr_data(nbr)->pending;
   1bf46:	68eb      	ldr	r3, [r5, #12]
	net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   1bf48:	f886 0069 	strb.w	r0, [r6, #105]	; 0x69
	pending = net_ipv6_nbr_data(nbr)->pending;
   1bf4c:	681e      	ldr	r6, [r3, #0]
	if (pending) {
   1bf4e:	b156      	cbz	r6, 1bf66 <handle_na_input+0x1f2>
		if (net_send_data(pending) < 0) {
   1bf50:	4630      	mov	r0, r6
   1bf52:	f7fc fa81 	bl	18458 <net_send_data>
   1bf56:	2800      	cmp	r0, #0
   1bf58:	da5a      	bge.n	1c010 <handle_na_input+0x29c>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   1bf5a:	68e8      	ldr	r0, [r5, #12]
   1bf5c:	f7ff fa13 	bl	1b386 <nbr_clear_ns_pending>
		net_pkt_unref(pending);
   1bf60:	4630      	mov	r0, r6
   1bf62:	f7fd fb32 	bl	195ca <net_pkt_unref>
	net_pkt_unref(pkt);
   1bf66:	4620      	mov	r0, r4
   1bf68:	f7fd fb2f 	bl	195ca <net_pkt_unref>
	return NET_OK;
   1bf6c:	2000      	movs	r0, #0
   1bf6e:	e719      	b.n	1bda4 <handle_na_input+0x30>
	bool lladdr_changed = false;
   1bf70:	46b0      	mov	r8, r6
   1bf72:	e7bf      	b.n	1bef4 <handle_na_input+0x180>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1bf74:	2102      	movs	r1, #2
   1bf76:	4628      	mov	r0, r5
   1bf78:	f7ff f9fa 	bl	1b370 <ipv6_nbr_set_state>
   1bf7c:	e7df      	b.n	1bf3e <handle_na_input+0x1ca>
	if (!net_is_override(pkt) && lladdr_changed) {
   1bf7e:	4620      	mov	r0, r4
   1bf80:	f7ff fa3b 	bl	1b3fa <net_is_override>
   1bf84:	b968      	cbnz	r0, 1bfa2 <handle_na_input+0x22e>
   1bf86:	f1b8 0f00 	cmp.w	r8, #0
   1bf8a:	d00a      	beq.n	1bfa2 <handle_na_input+0x22e>
		if (net_ipv6_nbr_data(nbr)->state ==
   1bf8c:	68eb      	ldr	r3, [r5, #12]
   1bf8e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1bf92:	2b01      	cmp	r3, #1
   1bf94:	f47f af05 	bne.w	1bda2 <handle_na_input+0x2e>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1bf98:	2102      	movs	r1, #2
   1bf9a:	4628      	mov	r0, r5
   1bf9c:	f7ff f9e8 	bl	1b370 <ipv6_nbr_set_state>
   1bfa0:	e6ff      	b.n	1bda2 <handle_na_input+0x2e>
	if (net_is_override(pkt) ||
   1bfa2:	4620      	mov	r0, r4
   1bfa4:	f7ff fa29 	bl	1b3fa <net_is_override>
   1bfa8:	bb00      	cbnz	r0, 1bfec <handle_na_input+0x278>
	    (!net_is_override(pkt) && tllao_offset && !lladdr_changed)) {
   1bfaa:	4620      	mov	r0, r4
   1bfac:	f7ff fa25 	bl	1b3fa <net_is_override>
	if (net_is_override(pkt) ||
   1bfb0:	b998      	cbnz	r0, 1bfda <handle_na_input+0x266>
	    (!net_is_override(pkt) && tllao_offset && !lladdr_changed)) {
   1bfb2:	b196      	cbz	r6, 1bfda <handle_na_input+0x266>
   1bfb4:	f1b8 0f00 	cmp.w	r8, #0
   1bfb8:	d10f      	bne.n	1bfda <handle_na_input+0x266>
		if (net_is_solicited(pkt)) {
   1bfba:	4620      	mov	r0, r4
   1bfbc:	f7ff fa12 	bl	1b3e4 <net_is_solicited>
   1bfc0:	b1f0      	cbz	r0, 1c000 <handle_na_input+0x28c>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   1bfc2:	2101      	movs	r1, #1
   1bfc4:	4628      	mov	r0, r5
   1bfc6:	f7ff f9d3 	bl	1b370 <ipv6_nbr_set_state>
			k_delayed_work_cancel(
   1bfca:	68e8      	ldr	r0, [r5, #12]
   1bfcc:	3014      	adds	r0, #20
   1bfce:	f003 ff87 	bl	1fee0 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   1bfd2:	4629      	mov	r1, r5
   1bfd4:	6960      	ldr	r0, [r4, #20]
   1bfd6:	f7ff fec3 	bl	1bd60 <net_ipv6_nbr_set_reachable_timer>
	if (net_ipv6_nbr_data(nbr)->is_router && !net_is_router(pkt)) {
   1bfda:	68eb      	ldr	r3, [r5, #12]
   1bfdc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   1bfe0:	2b00      	cmp	r3, #0
   1bfe2:	d0ac      	beq.n	1bf3e <handle_na_input+0x1ca>
   1bfe4:	4620      	mov	r0, r4
   1bfe6:	f7ff fa13 	bl	1b410 <net_is_router>
   1bfea:	e7a8      	b.n	1bf3e <handle_na_input+0x1ca>
		if (lladdr_changed) {
   1bfec:	f1b8 0f00 	cmp.w	r8, #0
   1bff0:	d0e3      	beq.n	1bfba <handle_na_input+0x246>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   1bff2:	787a      	ldrb	r2, [r7, #1]
   1bff4:	f10d 010e 	add.w	r1, sp, #14
   1bff8:	4638      	mov	r0, r7
   1bffa:	f7ff f9e2 	bl	1b3c2 <net_linkaddr_set>
   1bffe:	e7dc      	b.n	1bfba <handle_na_input+0x246>
			if (lladdr_changed) {
   1c000:	f1b8 0f00 	cmp.w	r8, #0
   1c004:	d0e9      	beq.n	1bfda <handle_na_input+0x266>
				ipv6_nbr_set_state(nbr,
   1c006:	2102      	movs	r1, #2
   1c008:	4628      	mov	r0, r5
   1c00a:	f7ff f9b1 	bl	1b370 <ipv6_nbr_set_state>
   1c00e:	e7e4      	b.n	1bfda <handle_na_input+0x266>
			net_ipv6_nbr_data(nbr)->pending = NULL;
   1c010:	68eb      	ldr	r3, [r5, #12]
   1c012:	2200      	movs	r2, #0
   1c014:	601a      	str	r2, [r3, #0]
   1c016:	e7a3      	b.n	1bf60 <handle_na_input+0x1ec>

0001c018 <net_ipv6_send_ns>:
{
   1c018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c01c:	b09d      	sub	sp, #116	; 0x74
   1c01e:	461d      	mov	r5, r3
   1c020:	4689      	mov	r9, r1
   1c022:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
   1c026:	9301      	str	r3, [sp, #4]
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1c028:	4629      	mov	r1, r5
{
   1c02a:	4616      	mov	r6, r2
   1c02c:	4680      	mov	r8, r0
   1c02e:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1c032:	f7ff f99a 	bl	1b36a <net_if_get_ll_reserve>
   1c036:	210a      	movs	r1, #10
   1c038:	f7fd fa90 	bl	1955c <net_pkt_get_reserve_tx>
	if (!pkt) {
   1c03c:	4604      	mov	r4, r0
   1c03e:	b138      	cbz	r0, 1c050 <net_ipv6_send_ns+0x38>
	frag = net_pkt_get_frag(pkt, ND_NET_BUF_TIMEOUT);
   1c040:	210a      	movs	r1, #10
   1c042:	f7fd faa3 	bl	1958c <net_pkt_get_frag>
	if (!frag) {
   1c046:	4607      	mov	r7, r0
   1c048:	b928      	cbnz	r0, 1c056 <net_ipv6_send_ns+0x3e>
		net_pkt_unref(pkt);
   1c04a:	4620      	mov	r0, r4
   1c04c:	f7fd fabd 	bl	195ca <net_pkt_unref>
		return -ENOMEM;
   1c050:	f06f 000b 	mvn.w	r0, #11
   1c054:	e03b      	b.n	1c0ce <net_ipv6_send_ns+0xb6>
	net_pkt_frag_add(pkt, frag);
   1c056:	4601      	mov	r1, r0
   1c058:	4620      	mov	r0, r4
   1c05a:	f7fd fadd 	bl	19618 <net_pkt_frag_add>
	pkt->iface = iface;
   1c05e:	f8c4 8014 	str.w	r8, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1c062:	f898 3015 	ldrb.w	r3, [r8, #21]
   1c066:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1c06a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   1c06e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   1c072:	220a      	movs	r2, #10
   1c074:	f362 03c6 	bfi	r3, r2, #3, #4
   1c078:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	pkt->ip_hdr_len = len;
   1c07c:	2328      	movs	r3, #40	; 0x28
   1c07e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	pkt->ipv6_ext_len = len;
   1c082:	2300      	movs	r3, #0
   1c084:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	net_pkt_ll_clear(pkt);
   1c088:	4620      	mov	r0, r4
   1c08a:	f7ff f9ec 	bl	1b466 <net_pkt_ll_clear>
   1c08e:	6963      	ldr	r3, [r4, #20]
   1c090:	7d1b      	ldrb	r3, [r3, #20]
	if (iface->link_addr.len == 6) {
   1c092:	2b06      	cmp	r3, #6
   1c094:	d01e      	beq.n	1c0d4 <net_ipv6_send_ns+0xbc>
	return 0;
   1c096:	2b08      	cmp	r3, #8
   1c098:	bf0c      	ite	eq
   1c09a:	f04f 0810 	moveq.w	r8, #16
   1c09e:	f04f 0800 	movne.w	r8, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_ns_hdr) + llao_len,
   1c0a2:	2287      	movs	r2, #135	; 0x87
   1c0a4:	f108 0114 	add.w	r1, r8, #20
   1c0a8:	4620      	mov	r0, r4
	net_buf_add(frag, sizeof(struct net_icmpv6_ns_hdr));
   1c0aa:	3708      	adds	r7, #8
	setup_headers(pkt, sizeof(struct net_icmpv6_ns_hdr) + llao_len,
   1c0ac:	f7ff f9ba 	bl	1b424 <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_ns_hdr));
   1c0b0:	2114      	movs	r1, #20
   1c0b2:	4638      	mov	r0, r7
   1c0b4:	f7fb fd8a 	bl	17bcc <net_buf_simple_add>
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &hdr);
   1c0b8:	a917      	add	r1, sp, #92	; 0x5c
   1c0ba:	4620      	mov	r0, r4
   1c0bc:	f7fe fdd2 	bl	1ac64 <net_icmpv6_get_ns_hdr>
	if (!ns_hdr) {
   1c0c0:	4686      	mov	lr, r0
   1c0c2:	b950      	cbnz	r0, 1c0da <net_ipv6_send_ns+0xc2>
	net_pkt_unref(pkt);
   1c0c4:	4620      	mov	r0, r4
   1c0c6:	f7fd fa80 	bl	195ca <net_pkt_unref>
	return -EINVAL;
   1c0ca:	f06f 0015 	mvn.w	r0, #21
}
   1c0ce:	b01d      	add	sp, #116	; 0x74
   1c0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 8;
   1c0d4:	f04f 0808 	mov.w	r8, #8
   1c0d8:	e7e3      	b.n	1c0a2 <net_ipv6_send_ns+0x8a>
   1c0da:	68a3      	ldr	r3, [r4, #8]
	return pkt->frags->data;
   1c0dc:	689b      	ldr	r3, [r3, #8]
	if (!dst) {
   1c0de:	2d00      	cmp	r5, #0
   1c0e0:	f040 8088 	bne.w	1c1f4 <net_ipv6_send_ns+0x1dc>
	dst->s6_addr[1]   = 0x02;
   1c0e4:	2102      	movs	r1, #2
	dst->s6_addr[0]   = 0xFF;
   1c0e6:	22ff      	movs	r2, #255	; 0xff
	dst->s6_addr[1]   = 0x02;
   1c0e8:	7659      	strb	r1, [r3, #25]
	dst->s6_addr[11]  = 0x01;
   1c0ea:	2101      	movs	r1, #1
	dst->s6_addr[0]   = 0xFF;
   1c0ec:	761a      	strb	r2, [r3, #24]
	dst->s6_addr[10]  = 0;
   1c0ee:	f883 5022 	strb.w	r5, [r3, #34]	; 0x22
	dst->s6_addr[11]  = 0x01;
   1c0f2:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
	dst->s6_addr[12]  = 0xFF;
   1c0f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1c0fa:	769d      	strb	r5, [r3, #26]
   1c0fc:	76dd      	strb	r5, [r3, #27]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1c0fe:	771d      	strb	r5, [r3, #28]
   1c100:	775d      	strb	r5, [r3, #29]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1c102:	779d      	strb	r5, [r3, #30]
   1c104:	77dd      	strb	r5, [r3, #31]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1c106:	f883 5020 	strb.w	r5, [r3, #32]
   1c10a:	f883 5021 	strb.w	r5, [r3, #33]	; 0x21
	dst->s6_addr[13]  = src->s6_addr[13];
   1c10e:	f89a 200d 	ldrb.w	r2, [sl, #13]
   1c112:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1c116:	f8ba 200e 	ldrh.w	r2, [sl, #14]
   1c11a:	84da      	strh	r2, [r3, #38]	; 0x26
	net_ipaddr_copy(&ns_hdr->tgt, tgt);
   1c11c:	ab07      	add	r3, sp, #28
   1c11e:	f10a 0510 	add.w	r5, sl, #16
   1c122:	469c      	mov	ip, r3
   1c124:	f8da 0000 	ldr.w	r0, [sl]
   1c128:	f8da 1004 	ldr.w	r1, [sl, #4]
   1c12c:	461a      	mov	r2, r3
   1c12e:	c203      	stmia	r2!, {r0, r1}
   1c130:	f10a 0a08 	add.w	sl, sl, #8
   1c134:	45aa      	cmp	sl, r5
   1c136:	4613      	mov	r3, r2
   1c138:	d1f4      	bne.n	1c124 <net_ipv6_send_ns+0x10c>
   1c13a:	f10e 0204 	add.w	r2, lr, #4
   1c13e:	ad0b      	add	r5, sp, #44	; 0x2c
   1c140:	4692      	mov	sl, r2
   1c142:	4663      	mov	r3, ip
   1c144:	cb03      	ldmia	r3!, {r0, r1}
   1c146:	42ab      	cmp	r3, r5
   1c148:	6010      	str	r0, [r2, #0]
   1c14a:	6051      	str	r1, [r2, #4]
   1c14c:	469c      	mov	ip, r3
   1c14e:	f102 0208 	add.w	r2, r2, #8
   1c152:	d1f6      	bne.n	1c142 <net_ipv6_send_ns+0x12a>
	net_icmpv6_set_ns_hdr(pkt, ns_hdr);
   1c154:	4671      	mov	r1, lr
   1c156:	4620      	mov	r0, r4
   1c158:	f7fe fda7 	bl	1acaa <net_icmpv6_set_ns_hdr>
	if (is_my_address) {
   1c15c:	9a01      	ldr	r2, [sp, #4]
   1c15e:	68a3      	ldr	r3, [r4, #8]
   1c160:	2a00      	cmp	r2, #0
   1c162:	d061      	beq.n	1c228 <net_ipv6_send_ns+0x210>
   1c164:	689e      	ldr	r6, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1c166:	4b5d      	ldr	r3, [pc, #372]	; (1c2dc <net_ipv6_send_ns+0x2c4>)
   1c168:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1c16a:	af0f      	add	r7, sp, #60	; 0x3c
   1c16c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1c170:	f106 0208 	add.w	r2, r6, #8
   1c174:	462b      	mov	r3, r5
   1c176:	cb03      	ldmia	r3!, {r0, r1}
   1c178:	42bb      	cmp	r3, r7
   1c17a:	6010      	str	r0, [r2, #0]
   1c17c:	6051      	str	r1, [r2, #4]
   1c17e:	461d      	mov	r5, r3
   1c180:	f102 0208 	add.w	r2, r2, #8
   1c184:	d1f6      	bne.n	1c174 <net_ipv6_send_ns+0x15c>
		NET_IPV6_HDR(pkt)->len[1] -= llao_len;
   1c186:	7973      	ldrb	r3, [r6, #5]
   1c188:	eba3 0808 	sub.w	r8, r3, r8
   1c18c:	f886 8005 	strb.w	r8, [r6, #5]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1c190:	68a1      	ldr	r1, [r4, #8]
   1c192:	4620      	mov	r0, r4
   1c194:	f7fe fbb8 	bl	1a908 <net_icmpv6_set_chksum>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), &ns_hdr->tgt);
   1c198:	4651      	mov	r1, sl
   1c19a:	6960      	ldr	r0, [r4, #20]
   1c19c:	f7ff fa62 	bl	1b664 <nbr_lookup.isra.29>
	if (!nbr) {
   1c1a0:	4605      	mov	r5, r0
   1c1a2:	b938      	cbnz	r0, 1c1b4 <net_ipv6_send_ns+0x19c>
		nbr = nbr_new(net_pkt_iface(pkt), &ns_hdr->tgt, false,
   1c1a4:	4602      	mov	r2, r0
   1c1a6:	4651      	mov	r1, sl
   1c1a8:	6960      	ldr	r0, [r4, #20]
   1c1aa:	f7ff f9f7 	bl	1b59c <nbr_new.isra.30>
		if (!nbr) {
   1c1ae:	4605      	mov	r5, r0
   1c1b0:	2800      	cmp	r0, #0
   1c1b2:	d087      	beq.n	1c0c4 <net_ipv6_send_ns+0xac>
	if (pending) {
   1c1b4:	f1b9 0f00 	cmp.w	r9, #0
   1c1b8:	d00f      	beq.n	1c1da <net_ipv6_send_ns+0x1c2>
   1c1ba:	68ee      	ldr	r6, [r5, #12]
		if (!net_ipv6_nbr_data(nbr)->pending) {
   1c1bc:	6833      	ldr	r3, [r6, #0]
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   1c1be:	4648      	mov	r0, r9
		if (!net_ipv6_nbr_data(nbr)->pending) {
   1c1c0:	2b00      	cmp	r3, #0
   1c1c2:	f040 8085 	bne.w	1c2d0 <net_ipv6_send_ns+0x2b8>
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   1c1c6:	f7fd f9f5 	bl	195b4 <net_pkt_ref>
		k_delayed_work_submit(&net_ipv6_nbr_data(nbr)->send_ns,
   1c1ca:	68e9      	ldr	r1, [r5, #12]
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   1c1cc:	6030      	str	r0, [r6, #0]
   1c1ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c1d2:	313c      	adds	r1, #60	; 0x3c
   1c1d4:	4842      	ldr	r0, [pc, #264]	; (1c2e0 <net_ipv6_send_ns+0x2c8>)
   1c1d6:	f003 fedd 	bl	1ff94 <k_delayed_work_submit_to_queue>
	if (net_send_data(pkt) < 0) {
   1c1da:	4620      	mov	r0, r4
   1c1dc:	f7fc f93c 	bl	18458 <net_send_data>
   1c1e0:	2800      	cmp	r0, #0
   1c1e2:	da78      	bge.n	1c2d6 <net_ipv6_send_ns+0x2be>
		if (pending) {
   1c1e4:	f1b9 0f00 	cmp.w	r9, #0
   1c1e8:	f43f af6c 	beq.w	1c0c4 <net_ipv6_send_ns+0xac>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   1c1ec:	68e8      	ldr	r0, [r5, #12]
   1c1ee:	f7ff f8ca 	bl	1b386 <nbr_clear_ns_pending>
   1c1f2:	e767      	b.n	1c0c4 <net_ipv6_send_ns+0xac>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1c1f4:	f10d 0c0c 	add.w	ip, sp, #12
   1c1f8:	f105 0b10 	add.w	fp, r5, #16
   1c1fc:	6828      	ldr	r0, [r5, #0]
   1c1fe:	6869      	ldr	r1, [r5, #4]
   1c200:	4662      	mov	r2, ip
   1c202:	c203      	stmia	r2!, {r0, r1}
   1c204:	3508      	adds	r5, #8
   1c206:	455d      	cmp	r5, fp
   1c208:	4694      	mov	ip, r2
   1c20a:	d1f7      	bne.n	1c1fc <net_ipv6_send_ns+0x1e4>
   1c20c:	ad03      	add	r5, sp, #12
   1c20e:	3318      	adds	r3, #24
   1c210:	f10d 0c1c 	add.w	ip, sp, #28
   1c214:	462a      	mov	r2, r5
   1c216:	ca03      	ldmia	r2!, {r0, r1}
   1c218:	4562      	cmp	r2, ip
   1c21a:	6018      	str	r0, [r3, #0]
   1c21c:	6059      	str	r1, [r3, #4]
   1c21e:	4615      	mov	r5, r2
   1c220:	f103 0308 	add.w	r3, r3, #8
   1c224:	d1f6      	bne.n	1c214 <net_ipv6_send_ns+0x1fc>
   1c226:	e779      	b.n	1c11c <net_ipv6_send_ns+0x104>
		if (src) {
   1c228:	b38e      	cbz	r6, 1c28e <net_ipv6_send_ns+0x276>
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1c22a:	aa0f      	add	r2, sp, #60	; 0x3c
   1c22c:	689b      	ldr	r3, [r3, #8]
   1c22e:	f106 0c10 	add.w	ip, r6, #16
   1c232:	4615      	mov	r5, r2
   1c234:	6830      	ldr	r0, [r6, #0]
   1c236:	6871      	ldr	r1, [r6, #4]
   1c238:	4696      	mov	lr, r2
   1c23a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1c23e:	3608      	adds	r6, #8
   1c240:	4566      	cmp	r6, ip
   1c242:	4672      	mov	r2, lr
   1c244:	d1f6      	bne.n	1c234 <net_ipv6_send_ns+0x21c>
   1c246:	3308      	adds	r3, #8
   1c248:	ae13      	add	r6, sp, #76	; 0x4c
   1c24a:	462a      	mov	r2, r5
   1c24c:	ca03      	ldmia	r2!, {r0, r1}
   1c24e:	42b2      	cmp	r2, r6
   1c250:	6018      	str	r0, [r3, #0]
   1c252:	6059      	str	r1, [r3, #4]
   1c254:	4615      	mov	r5, r2
   1c256:	f103 0308 	add.w	r3, r3, #8
   1c25a:	d1f6      	bne.n	1c24a <net_ipv6_send_ns+0x232>
   1c25c:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   1c25e:	6898      	ldr	r0, [r3, #8]
   1c260:	3008      	adds	r0, #8
   1c262:	f7ff f875 	bl	1b350 <net_is_ipv6_addr_unspecified>
   1c266:	2800      	cmp	r0, #0
   1c268:	f47f af2c 	bne.w	1c0c4 <net_ipv6_send_ns+0xac>
		net_buf_add(frag, llao_len);
   1c26c:	4641      	mov	r1, r8
   1c26e:	4638      	mov	r0, r7
   1c270:	f7fb fcac 	bl	17bcc <net_buf_simple_add>
			 (u8_t *)net_pkt_icmp_data(pkt) +
   1c274:	4620      	mov	r0, r4
		set_llao(&net_pkt_iface(pkt)->link_addr,
   1c276:	6965      	ldr	r5, [r4, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   1c278:	f7fd fbe0 	bl	19a3c <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   1c27c:	3510      	adds	r5, #16
   1c27e:	f100 0118 	add.w	r1, r0, #24
   1c282:	2301      	movs	r3, #1
   1c284:	4642      	mov	r2, r8
   1c286:	4628      	mov	r0, r5
   1c288:	f7ff f8fc 	bl	1b484 <set_llao>
   1c28c:	e780      	b.n	1c190 <net_ipv6_send_ns+0x178>
   1c28e:	689d      	ldr	r5, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1c290:	6960      	ldr	r0, [r4, #20]
   1c292:	f105 0118 	add.w	r1, r5, #24
   1c296:	f7fc fed1 	bl	1903c <net_if_ipv6_select_src_addr>
		}
   1c29a:	aa13      	add	r2, sp, #76	; 0x4c
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1c29c:	4603      	mov	r3, r0
		}
   1c29e:	f100 0c10 	add.w	ip, r0, #16
   1c2a2:	4616      	mov	r6, r2
   1c2a4:	6818      	ldr	r0, [r3, #0]
   1c2a6:	6859      	ldr	r1, [r3, #4]
   1c2a8:	4696      	mov	lr, r2
   1c2aa:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1c2ae:	3308      	adds	r3, #8
   1c2b0:	4563      	cmp	r3, ip
   1c2b2:	4672      	mov	r2, lr
   1c2b4:	d1f6      	bne.n	1c2a4 <net_ipv6_send_ns+0x28c>
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1c2b6:	f105 0308 	add.w	r3, r5, #8
   1c2ba:	ad17      	add	r5, sp, #92	; 0x5c
   1c2bc:	4632      	mov	r2, r6
   1c2be:	ca03      	ldmia	r2!, {r0, r1}
   1c2c0:	42aa      	cmp	r2, r5
   1c2c2:	6018      	str	r0, [r3, #0]
   1c2c4:	6059      	str	r1, [r3, #4]
   1c2c6:	4616      	mov	r6, r2
   1c2c8:	f103 0308 	add.w	r3, r3, #8
   1c2cc:	d1f6      	bne.n	1c2bc <net_ipv6_send_ns+0x2a4>
   1c2ce:	e7c5      	b.n	1c25c <net_ipv6_send_ns+0x244>
			net_pkt_unref(pending);
   1c2d0:	f7fd f97b 	bl	195ca <net_pkt_unref>
			goto drop;
   1c2d4:	e6f6      	b.n	1c0c4 <net_ipv6_send_ns+0xac>
	return 0;
   1c2d6:	2000      	movs	r0, #0
   1c2d8:	e6f9      	b.n	1c0ce <net_ipv6_send_ns+0xb6>
   1c2da:	bf00      	nop
   1c2dc:	00021344 	.word	0x00021344
   1c2e0:	20005218 	.word	0x20005218

0001c2e4 <net_ipv6_nbr_add>:
{
   1c2e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c2e8:	4606      	mov	r6, r0
   1c2ea:	460f      	mov	r7, r1
   1c2ec:	4615      	mov	r5, r2
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   1c2ee:	f7ff f9b9 	bl	1b664 <nbr_lookup.isra.29>
	if (!nbr) {
   1c2f2:	4604      	mov	r4, r0
   1c2f4:	b940      	cbnz	r0, 1c308 <net_ipv6_nbr_add+0x24>
		nbr = nbr_new(iface, addr, is_router, state);
   1c2f6:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1c2fa:	4639      	mov	r1, r7
   1c2fc:	4630      	mov	r0, r6
   1c2fe:	f7ff f94d 	bl	1b59c <nbr_new.isra.30>
		if (!nbr) {
   1c302:	4604      	mov	r4, r0
   1c304:	2800      	cmp	r0, #0
   1c306:	d035      	beq.n	1c374 <net_ipv6_nbr_add+0x90>
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   1c308:	462a      	mov	r2, r5
   1c30a:	4631      	mov	r1, r6
   1c30c:	4620      	mov	r0, r4
   1c30e:	f7fe ff95 	bl	1b23c <net_nbr_link>
   1c312:	3045      	adds	r0, #69	; 0x45
   1c314:	d117      	bne.n	1c346 <net_ipv6_nbr_add+0x62>
	    net_ipv6_nbr_data(nbr)->state != NET_IPV6_NBR_STATE_STATIC) {
   1c316:	68e3      	ldr	r3, [r4, #12]
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   1c318:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1c31c:	2b05      	cmp	r3, #5
   1c31e:	d023      	beq.n	1c368 <net_ipv6_nbr_add+0x84>
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   1c320:	7860      	ldrb	r0, [r4, #1]
   1c322:	f7ff f805 	bl	1b330 <net_nbr_get_lladdr>
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   1c326:	792a      	ldrb	r2, [r5, #4]
   1c328:	6829      	ldr	r1, [r5, #0]
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   1c32a:	4680      	mov	r8, r0
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   1c32c:	3002      	adds	r0, #2
   1c32e:	f7e4 faaf 	bl	890 <memcmp>
   1c332:	b1a0      	cbz	r0, 1c35e <net_ipv6_nbr_add+0x7a>
			net_linkaddr_set(cached_lladdr, lladdr->addr,
   1c334:	792a      	ldrb	r2, [r5, #4]
   1c336:	6829      	ldr	r1, [r5, #0]
   1c338:	4640      	mov	r0, r8
   1c33a:	f7ff f842 	bl	1b3c2 <net_linkaddr_set>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1c33e:	2102      	movs	r1, #2
   1c340:	4620      	mov	r0, r4
   1c342:	f7ff f815 	bl	1b370 <ipv6_nbr_set_state>
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   1c346:	68e3      	ldr	r3, [r4, #12]
   1c348:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1c34c:	b963      	cbnz	r3, 1c368 <net_ipv6_nbr_add+0x84>
		ret = net_ipv6_send_ns(iface, NULL, NULL, NULL, addr, false);
   1c34e:	9301      	str	r3, [sp, #4]
   1c350:	9700      	str	r7, [sp, #0]
   1c352:	461a      	mov	r2, r3
   1c354:	4619      	mov	r1, r3
   1c356:	4630      	mov	r0, r6
   1c358:	f7ff fe5e 	bl	1c018 <net_ipv6_send_ns>
   1c35c:	e004      	b.n	1c368 <net_ipv6_nbr_add+0x84>
		} else if (net_ipv6_nbr_data(nbr)->state ==
   1c35e:	68e3      	ldr	r3, [r4, #12]
   1c360:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1c364:	2b00      	cmp	r3, #0
   1c366:	d0ea      	beq.n	1c33e <net_ipv6_nbr_add+0x5a>
   1c368:	2300      	movs	r3, #0
   1c36a:	461a      	mov	r2, r3
   1c36c:	4631      	mov	r1, r6
   1c36e:	4803      	ldr	r0, [pc, #12]	; (1c37c <net_ipv6_nbr_add+0x98>)
   1c370:	f000 fff8 	bl	1d364 <net_mgmt_event_notify_with_info>
}
   1c374:	4620      	mov	r0, r4
   1c376:	b002      	add	sp, #8
   1c378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c37c:	f060000f 	.word	0xf060000f

0001c380 <handle_ra_input>:
{
   1c380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c384:	6885      	ldr	r5, [r0, #8]
   1c386:	b097      	sub	sp, #92	; 0x5c
   1c388:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   1c38a:	4628      	mov	r0, r5
   1c38c:	f7fe ffd8 	bl	1b340 <net_buf_frags_len>
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   1c390:	b280      	uxth	r0, r0
   1c392:	2839      	cmp	r0, #57	; 0x39
   1c394:	d908      	bls.n	1c3a8 <handle_ra_input+0x28>
	return pkt->frags->data;
   1c396:	68ab      	ldr	r3, [r5, #8]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   1c398:	79da      	ldrb	r2, [r3, #7]
   1c39a:	2aff      	cmp	r2, #255	; 0xff
   1c39c:	d104      	bne.n	1c3a8 <handle_ra_input+0x28>
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1c39e:	891a      	ldrh	r2, [r3, #8]
   1c3a0:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1c3a4:	429a      	cmp	r2, r3
   1c3a6:	d00a      	beq.n	1c3be <handle_ra_input+0x3e>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &icmphdr);
   1c3a8:	a90e      	add	r1, sp, #56	; 0x38
   1c3aa:	4620      	mov	r0, r4
   1c3ac:	f7fe faf6 	bl	1a99c <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1c3b0:	b108      	cbz	r0, 1c3b6 <handle_ra_input+0x36>
   1c3b2:	7843      	ldrb	r3, [r0, #1]
   1c3b4:	b11b      	cbz	r3, 1c3be <handle_ra_input+0x3e>
	return NET_DROP;
   1c3b6:	2002      	movs	r0, #2
}
   1c3b8:	b017      	add	sp, #92	; 0x5c
   1c3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	offset = sizeof(struct net_ipv6_hdr) + net_pkt_ipv6_ext_len(pkt) +
   1c3be:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	return net_frag_read(frag, offset, pos, 1, value);
   1c3c2:	68a0      	ldr	r0, [r4, #8]
   1c3c4:	ad16      	add	r5, sp, #88	; 0x58
   1c3c6:	312c      	adds	r1, #44	; 0x2c
   1c3c8:	f825 1d4a 	strh.w	r1, [r5, #-74]!
   1c3cc:	f10d 0309 	add.w	r3, sp, #9
   1c3d0:	9300      	str	r3, [sp, #0]
   1c3d2:	462a      	mov	r2, r5
   1c3d4:	2301      	movs	r3, #1
   1c3d6:	f7fd fa4b 	bl	19870 <net_frag_read>
	return net_frag_read(frag, offset, pos, len, NULL);
   1c3da:	2300      	movs	r3, #0
   1c3dc:	9300      	str	r3, [sp, #0]
   1c3de:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1c3e2:	2301      	movs	r3, #1
   1c3e4:	462a      	mov	r2, r5
   1c3e6:	f7fd fa43 	bl	19870 <net_frag_read>
	if (!frag) {
   1c3ea:	2800      	cmp	r0, #0
   1c3ec:	d0e3      	beq.n	1c3b6 <handle_ra_input+0x36>
	if (hop_limit) {
   1c3ee:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1c3f2:	b113      	cbz	r3, 1c3fa <handle_ra_input+0x7a>
   1c3f4:	6962      	ldr	r2, [r4, #20]
	iface->ipv6.hop_limit = hop_limit;
   1c3f6:	f882 324c 	strb.w	r3, [r2, #588]	; 0x24c
	frag = net_frag_read_be16(frag, offset, &offset, &router_lifetime);
   1c3fa:	ab03      	add	r3, sp, #12
   1c3fc:	462a      	mov	r2, r5
   1c3fe:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1c402:	f7fd fa6d 	bl	198e0 <net_frag_read_be16>
	frag = net_frag_read_be32(frag, offset, &offset, &reachable_time);
   1c406:	ab04      	add	r3, sp, #16
   1c408:	462a      	mov	r2, r5
   1c40a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1c40e:	f7fd fa77 	bl	19900 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, offset, &offset, &retrans_timer);
   1c412:	ab05      	add	r3, sp, #20
   1c414:	462a      	mov	r2, r5
   1c416:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1c41a:	f7fd fa71 	bl	19900 <net_frag_read_be32>
	if (!frag) {
   1c41e:	4606      	mov	r6, r0
   1c420:	2800      	cmp	r0, #0
   1c422:	d0c8      	beq.n	1c3b6 <handle_ra_input+0x36>
	ra_hdr = net_icmpv6_get_ra_hdr(pkt, &hdr);
   1c424:	a907      	add	r1, sp, #28
   1c426:	4620      	mov	r0, r4
   1c428:	f7fe fd24 	bl	1ae74 <net_icmpv6_get_ra_hdr>
	if (!ra_hdr) {
   1c42c:	2800      	cmp	r0, #0
   1c42e:	d0c2      	beq.n	1c3b6 <handle_ra_input+0x36>
	if (reachable_time && reachable_time <= MAX_REACHABLE_TIME &&
   1c430:	9b04      	ldr	r3, [sp, #16]
   1c432:	4ac3      	ldr	r2, [pc, #780]	; (1c740 <handle_ra_input+0x3c0>)
   1c434:	1e59      	subs	r1, r3, #1
   1c436:	4291      	cmp	r1, r2
   1c438:	d80c      	bhi.n	1c454 <handle_ra_input+0xd4>
   1c43a:	6967      	ldr	r7, [r4, #20]
	     ra_hdr->reachable_time)) {
   1c43c:	6841      	ldr	r1, [r0, #4]
	if (reachable_time && reachable_time <= MAX_REACHABLE_TIME &&
   1c43e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
   1c442:	4291      	cmp	r1, r2
   1c444:	d006      	beq.n	1c454 <handle_ra_input+0xd4>
	iface->ipv6.base_reachable_time = reachable_time;
   1c446:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   1c44a:	4638      	mov	r0, r7
   1c44c:	f7fc fe36 	bl	190bc <net_if_ipv6_calc_reachable_time>
   1c450:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
	if (retrans_timer) {
   1c454:	9b05      	ldr	r3, [sp, #20]
   1c456:	b113      	cbz	r3, 1c45e <handle_ra_input+0xde>
	iface->ipv6.retrans_timer = retrans_timer;
   1c458:	6962      	ldr	r2, [r4, #20]
   1c45a:	f8c2 3248 	str.w	r3, [r2, #584]	; 0x248
{
   1c45e:	f04f 0800 	mov.w	r8, #0
		frag = net_frag_read(frag, offset, &offset, 1, &type);
   1c462:	f04f 0a01 	mov.w	sl, #1
   1c466:	f10d 030b 	add.w	r3, sp, #11
   1c46a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1c46e:	9300      	str	r3, [sp, #0]
   1c470:	462a      	mov	r2, r5
   1c472:	2301      	movs	r3, #1
   1c474:	4630      	mov	r0, r6
   1c476:	f7fd f9fb 	bl	19870 <net_frag_read>
		frag = net_frag_read(frag, offset, &offset, 1, &length);
   1c47a:	f10d 030a 	add.w	r3, sp, #10
   1c47e:	9300      	str	r3, [sp, #0]
   1c480:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1c484:	2301      	movs	r3, #1
   1c486:	462a      	mov	r2, r5
   1c488:	f7fd f9f2 	bl	19870 <net_frag_read>
		if (!frag) {
   1c48c:	2800      	cmp	r0, #0
   1c48e:	d092      	beq.n	1c3b6 <handle_ra_input+0x36>
		switch (type) {
   1c490:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1c494:	f8bd b00e 	ldrh.w	fp, [sp, #14]
   1c498:	2a03      	cmp	r2, #3
   1c49a:	f000 8096 	beq.w	1c5ca <handle_ra_input+0x24a>
   1c49e:	2a05      	cmp	r2, #5
   1c4a0:	d044      	beq.n	1c52c <handle_ra_input+0x1ac>
   1c4a2:	2a01      	cmp	r2, #1
   1c4a4:	f89d 700a 	ldrb.w	r7, [sp, #10]
   1c4a8:	f040 818c 	bne.w	1c7c4 <handle_ra_input+0x444>
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
   1c4ac:	2306      	movs	r3, #6
	lladdr.len = NET_LINK_ADDR_MAX_LENGTH;
   1c4ae:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
   1c4b2:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
	if (net_pkt_ll_src(pkt)->len < lladdr.len) {
   1c4b6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1c4ba:	2b05      	cmp	r3, #5
	lladdr.addr = llstorage.addr;
   1c4bc:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
		lladdr.len = net_pkt_ll_src(pkt)->len;
   1c4c0:	bf98      	it	ls
   1c4c2:	f88d 302c 	strbls.w	r3, [sp, #44]	; 0x2c
	lladdr.addr = llstorage.addr;
   1c4c6:	920a      	str	r2, [sp, #40]	; 0x28
	frag = net_frag_read(frag, offset, pos, lladdr.len, lladdr.addr);
   1c4c8:	9200      	str	r2, [sp, #0]
   1c4ca:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1c4ce:	462a      	mov	r2, r5
   1c4d0:	4659      	mov	r1, fp
   1c4d2:	f7fd f9cd 	bl	19870 <net_frag_read>
	if (!frag && offset) {
   1c4d6:	4606      	mov	r6, r0
   1c4d8:	b910      	cbnz	r0, 1c4e0 <handle_ra_input+0x160>
   1c4da:	f1bb 0f00 	cmp.w	fp, #0
   1c4de:	d121      	bne.n	1c524 <handle_ra_input+0x1a4>
	padding = len * 8 - 2 - lladdr.len;
   1c4e0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1c4e4:	ebc3 03c7 	rsb	r3, r3, r7, lsl #3
   1c4e8:	3b02      	subs	r3, #2
	if (padding) {
   1c4ea:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   1c4ee:	d00c      	beq.n	1c50a <handle_ra_input+0x18a>
		frag = net_frag_read(frag, *pos, pos, padding, NULL);
   1c4f0:	2200      	movs	r2, #0
   1c4f2:	9200      	str	r2, [sp, #0]
   1c4f4:	4630      	mov	r0, r6
   1c4f6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1c4fa:	462a      	mov	r2, r5
   1c4fc:	f7fd f9b8 	bl	19870 <net_frag_read>
		if (!frag && *pos) {
   1c500:	4606      	mov	r6, r0
   1c502:	b910      	cbnz	r0, 1c50a <handle_ra_input+0x18a>
   1c504:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1c508:	b963      	cbnz	r3, 1c524 <handle_ra_input+0x1a4>
	return pkt->frags->data;
   1c50a:	68a3      	ldr	r3, [r4, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   1c50c:	6960      	ldr	r0, [r4, #20]
   1c50e:	6899      	ldr	r1, [r3, #8]
   1c510:	2302      	movs	r3, #2
   1c512:	9300      	str	r3, [sp, #0]
   1c514:	aa0a      	add	r2, sp, #40	; 0x28
   1c516:	2301      	movs	r3, #1
   1c518:	3108      	adds	r1, #8
   1c51a:	f7ff fee3 	bl	1c2e4 <net_ipv6_nbr_add>
   1c51e:	4680      	mov	r8, r0
			if (!frag && offset) {
   1c520:	2e00      	cmp	r6, #0
   1c522:	d1a0      	bne.n	1c466 <handle_ra_input+0xe6>
   1c524:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1c528:	b303      	cbz	r3, 1c56c <handle_ra_input+0x1ec>
   1c52a:	e744      	b.n	1c3b6 <handle_ra_input+0x36>
	return net_frag_read(frag, offset, pos, len, NULL);
   1c52c:	2300      	movs	r3, #0
   1c52e:	9300      	str	r3, [sp, #0]
   1c530:	462a      	mov	r2, r5
   1c532:	2302      	movs	r3, #2
   1c534:	4659      	mov	r1, fp
   1c536:	f7fd f99b 	bl	19870 <net_frag_read>
			frag = net_frag_read_be32(frag, offset, &offset, &mtu);
   1c53a:	ab06      	add	r3, sp, #24
   1c53c:	462a      	mov	r2, r5
   1c53e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1c542:	f7fd f9dd 	bl	19900 <net_frag_read_be32>
			if (!frag && offset) {
   1c546:	4606      	mov	r6, r0
   1c548:	b920      	cbnz	r0, 1c554 <handle_ra_input+0x1d4>
   1c54a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1c54e:	2b00      	cmp	r3, #0
   1c550:	f47f af31 	bne.w	1c3b6 <handle_ra_input+0x36>
			if (mtu < MIN_IPV6_MTU || mtu > MAX_IPV6_MTU) {
   1c554:	9b06      	ldr	r3, [sp, #24]
   1c556:	f5a3 62a0 	sub.w	r2, r3, #1280	; 0x500
   1c55a:	f5b2 4f7b 	cmp.w	r2, #64256	; 0xfb00
   1c55e:	f4bf af2a 	bcs.w	1c3b6 <handle_ra_input+0x36>
	iface->mtu = mtu;
   1c562:	6962      	ldr	r2, [r4, #20]
			net_if_set_mtu(net_pkt_iface(pkt), mtu);
   1c564:	8513      	strh	r3, [r2, #40]	; 0x28
	while (frag) {
   1c566:	2e00      	cmp	r6, #0
   1c568:	f47f af7d 	bne.w	1c466 <handle_ra_input+0xe6>
	return pkt->frags->data;
   1c56c:	68a3      	ldr	r3, [r4, #8]
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt),
   1c56e:	6960      	ldr	r0, [r4, #20]
   1c570:	6899      	ldr	r1, [r3, #8]
   1c572:	3108      	adds	r1, #8
   1c574:	f7fc fcac 	bl	18ed0 <net_if_ipv6_router_lookup>
   1c578:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	if (router) {
   1c57c:	4603      	mov	r3, r0
   1c57e:	2800      	cmp	r0, #0
   1c580:	f000 8138 	beq.w	1c7f4 <handle_ra_input+0x474>
		if (!router_lifetime) {
   1c584:	2a00      	cmp	r2, #0
   1c586:	f040 8128 	bne.w	1c7da <handle_ra_input+0x45a>
			net_if_ipv6_router_rm(router);
   1c58a:	f7fc fd1f 	bl	18fcc <net_if_ipv6_router_rm>
	if (nbr && net_ipv6_nbr_data(nbr)->pending) {
   1c58e:	f1b8 0f00 	cmp.w	r8, #0
   1c592:	d010      	beq.n	1c5b6 <handle_ra_input+0x236>
   1c594:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1c598:	6818      	ldr	r0, [r3, #0]
   1c59a:	b160      	cbz	r0, 1c5b6 <handle_ra_input+0x236>
		if (net_send_data(net_ipv6_nbr_data(nbr)->pending) < 0) {
   1c59c:	f7fb ff5c 	bl	18458 <net_send_data>
   1c5a0:	2800      	cmp	r0, #0
   1c5a2:	da04      	bge.n	1c5ae <handle_ra_input+0x22e>
			net_pkt_unref(net_ipv6_nbr_data(nbr)->pending);
   1c5a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1c5a8:	6818      	ldr	r0, [r3, #0]
   1c5aa:	f7fd f80e 	bl	195ca <net_pkt_unref>
		nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   1c5ae:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1c5b2:	f7fe fee8 	bl	1b386 <nbr_clear_ns_pending>
	k_delayed_work_cancel(&net_pkt_iface(pkt)->ipv6.rs_timer);
   1c5b6:	6960      	ldr	r0, [r4, #20]
   1c5b8:	f500 7006 	add.w	r0, r0, #536	; 0x218
   1c5bc:	f003 fc90 	bl	1fee0 <k_delayed_work_cancel>
	net_pkt_unref(pkt);
   1c5c0:	4620      	mov	r0, r4
   1c5c2:	f7fd f802 	bl	195ca <net_pkt_unref>
	return NET_OK;
   1c5c6:	2000      	movs	r0, #0
   1c5c8:	e6f6      	b.n	1c3b8 <handle_ra_input+0x38>
			frag = handle_ra_prefix(pkt, frag, length, offset,
   1c5ca:	f89d 300a 	ldrb.w	r3, [sp, #10]
	prefix_info.type = NET_ICMPV6_ND_OPT_PREFIX_INFO;
   1c5ce:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	prefix_info.len = len * 8 - 2;
   1c5d2:	00db      	lsls	r3, r3, #3
   1c5d4:	3b02      	subs	r3, #2
   1c5d6:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
	frag = net_frag_read(frag, offset, pos, 1, &prefix_info.prefix_len);
   1c5da:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
   1c5de:	4659      	mov	r1, fp
   1c5e0:	9300      	str	r3, [sp, #0]
   1c5e2:	462a      	mov	r2, r5
   1c5e4:	2301      	movs	r3, #1
   1c5e6:	f7fd f943 	bl	19870 <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, 1, &prefix_info.flags);
   1c5ea:	f10d 033b 	add.w	r3, sp, #59	; 0x3b
   1c5ee:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1c5f2:	9300      	str	r3, [sp, #0]
   1c5f4:	462a      	mov	r2, r5
   1c5f6:	2301      	movs	r3, #1
   1c5f8:	f7fd f93a 	bl	19870 <net_frag_read>
	frag = net_frag_read_be32(frag, *pos, pos, &prefix_info.valid_lifetime);
   1c5fc:	ab0f      	add	r3, sp, #60	; 0x3c
   1c5fe:	462a      	mov	r2, r5
   1c600:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1c604:	f7fd f97c 	bl	19900 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, *pos, pos,
   1c608:	ab10      	add	r3, sp, #64	; 0x40
   1c60a:	462a      	mov	r2, r5
   1c60c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1c610:	f7fd f976 	bl	19900 <net_frag_read_be32>
	return net_frag_read(frag, offset, pos, len, NULL);
   1c614:	2300      	movs	r3, #0
   1c616:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1c61a:	9300      	str	r3, [sp, #0]
   1c61c:	462a      	mov	r2, r5
   1c61e:	2304      	movs	r3, #4
	frag = net_frag_read(frag, *pos, pos, sizeof(struct in6_addr),
   1c620:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   1c624:	f7fd f924 	bl	19870 <net_frag_read>
   1c628:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1c62c:	f8cd b000 	str.w	fp, [sp]
   1c630:	2310      	movs	r3, #16
   1c632:	462a      	mov	r2, r5
   1c634:	f7fd f91c 	bl	19870 <net_frag_read>
	if (!frag && *pos) {
   1c638:	4606      	mov	r6, r0
   1c63a:	b920      	cbnz	r0, 1c646 <handle_ra_input+0x2c6>
   1c63c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1c640:	2b00      	cmp	r3, #0
   1c642:	f47f af6f 	bne.w	1c524 <handle_ra_input+0x1a4>
	if (prefix_info.valid_lifetime >= prefix_info.preferred_lifetime &&
   1c646:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1c648:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1c64a:	429a      	cmp	r2, r3
   1c64c:	f4ff af68 	bcc.w	1c520 <handle_ra_input+0x1a0>
   1c650:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   1c654:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1c658:	429a      	cmp	r2, r3
   1c65a:	f43f af61 	beq.w	1c520 <handle_ra_input+0x1a0>
		if (prefix_info.flags & NET_ICMPV6_RA_FLAG_ONLINK) {
   1c65e:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
   1c662:	2b00      	cmp	r3, #0
   1c664:	da20      	bge.n	1c6a8 <handle_ra_input+0x328>
	prefix = net_if_ipv6_prefix_lookup(net_pkt_iface(pkt),
   1c666:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   1c66a:	6960      	ldr	r0, [r4, #20]
   1c66c:	4659      	mov	r1, fp
   1c66e:	f7fc fb95 	bl	18d9c <net_if_ipv6_prefix_lookup>
	if (!prefix) {
   1c672:	b940      	cbnz	r0, 1c686 <handle_ra_input+0x306>
		if (!prefix_info->valid_lifetime) {
   1c674:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1c676:	b1bb      	cbz	r3, 1c6a8 <handle_ra_input+0x328>
		prefix = net_if_ipv6_prefix_add(net_pkt_iface(pkt),
   1c678:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   1c67c:	6960      	ldr	r0, [r4, #20]
   1c67e:	4659      	mov	r1, fp
   1c680:	f7fc fb1a 	bl	18cb8 <net_if_ipv6_prefix_add>
		if (prefix) {
   1c684:	b180      	cbz	r0, 1c6a8 <handle_ra_input+0x328>
	switch (prefix_info->valid_lifetime) {
   1c686:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1c688:	b139      	cbz	r1, 1c69a <handle_ra_input+0x31a>
   1c68a:	1c4a      	adds	r2, r1, #1
   1c68c:	d055      	beq.n	1c73a <handle_ra_input+0x3ba>
	prefix->is_infinite = is_infinite;
   1c68e:	2300      	movs	r3, #0
   1c690:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		net_if_ipv6_prefix_set_timer(prefix,
   1c694:	f7fc fbd2 	bl	18e3c <net_if_ipv6_prefix_set_timer>
   1c698:	e006      	b.n	1c6a8 <handle_ra_input+0x328>
		net_if_ipv6_prefix_rm(net_pkt_iface(pkt),
   1c69a:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
   1c69e:	f100 0128 	add.w	r1, r0, #40	; 0x28
   1c6a2:	6960      	ldr	r0, [r4, #20]
   1c6a4:	f7fc fbdc 	bl	18e60 <net_if_ipv6_prefix_rm>
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   1c6a8:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   1c6ac:	065b      	lsls	r3, r3, #25
   1c6ae:	f57f af37 	bpl.w	1c520 <handle_ra_input+0x1a0>
   1c6b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1c6b4:	2b00      	cmp	r3, #0
   1c6b6:	f43f af33 	beq.w	1c520 <handle_ra_input+0x1a0>
		    prefix_info.valid_lifetime &&
   1c6ba:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1c6be:	2b40      	cmp	r3, #64	; 0x40
   1c6c0:	f47f af2e 	bne.w	1c520 <handle_ra_input+0x1a0>
	struct in6_addr addr = { };
   1c6c4:	2210      	movs	r2, #16
   1c6c6:	2100      	movs	r1, #0
   1c6c8:	a80a      	add	r0, sp, #40	; 0x28
   1c6ca:	f7e4 f93a 	bl	942 <memset>
	addr->s6_addr[0] = 0xfe;
   1c6ce:	f04f 09fe 	mov.w	r9, #254	; 0xfe
	addr->s6_addr[1] = 0x80;
   1c6d2:	2280      	movs	r2, #128	; 0x80
   1c6d4:	6967      	ldr	r7, [r4, #20]
	addr->s6_addr[0] = 0xfe;
   1c6d6:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
	addr->s6_addr[1] = 0x80;
   1c6da:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
	switch (lladdr->len) {
   1c6de:	7d3a      	ldrb	r2, [r7, #20]
   1c6e0:	2a06      	cmp	r2, #6
   1c6e2:	d02f      	beq.n	1c744 <handle_ra_input+0x3c4>
   1c6e4:	2a08      	cmp	r2, #8
   1c6e6:	d048      	beq.n	1c77a <handle_ra_input+0x3fa>
   1c6e8:	2a02      	cmp	r2, #2
   1c6ea:	d10e      	bne.n	1c70a <handle_ra_input+0x38a>
		if (lladdr->type == NET_LINK_IEEE802154) {
   1c6ec:	7d7a      	ldrb	r2, [r7, #21]
   1c6ee:	2a01      	cmp	r2, #1
   1c6f0:	d10b      	bne.n	1c70a <handle_ra_input+0x38a>
			addr->s6_addr[11] = 0xff;
   1c6f2:	22ff      	movs	r2, #255	; 0xff
   1c6f4:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
			addr->s6_addr[12] = 0xfe;
   1c6f8:	f88d 9034 	strb.w	r9, [sp, #52]	; 0x34
			addr->s6_addr[14] = lladdr->addr[0];
   1c6fc:	693b      	ldr	r3, [r7, #16]
   1c6fe:	781a      	ldrb	r2, [r3, #0]
   1c700:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
			addr->s6_addr[15] = lladdr->addr[1];
   1c704:	785b      	ldrb	r3, [r3, #1]
   1c706:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	memcpy(&addr, &prefix_info->prefix, sizeof(struct in6_addr) / 2);
   1c70a:	4659      	mov	r1, fp
   1c70c:	2208      	movs	r2, #8
   1c70e:	a80a      	add	r0, sp, #40	; 0x28
   1c710:	f7e4 f8eb 	bl	8ea <memcpy>
	ifaddr = net_if_ipv6_addr_lookup(&addr, NULL);
   1c714:	2100      	movs	r1, #0
   1c716:	a80a      	add	r0, sp, #40	; 0x28
   1c718:	f7fc f82c 	bl	18774 <net_if_ipv6_addr_lookup>
   1c71c:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
	if (ifaddr && ifaddr->addr_type == NET_ADDR_AUTOCONF) {
   1c720:	4607      	mov	r7, r0
   1c722:	2800      	cmp	r0, #0
   1c724:	d043      	beq.n	1c7ae <handle_ra_input+0x42e>
   1c726:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   1c72a:	2b01      	cmp	r3, #1
   1c72c:	d13f      	bne.n	1c7ae <handle_ra_input+0x42e>
		if (prefix_info->valid_lifetime ==
   1c72e:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   1c732:	d127      	bne.n	1c784 <handle_ra_input+0x404>
	ifaddr->is_infinite = is_infinite;
   1c734:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
   1c738:	e6f2      	b.n	1c520 <handle_ra_input+0x1a0>
	prefix->is_infinite = is_infinite;
   1c73a:	f880 a039 	strb.w	sl, [r0, #57]	; 0x39
   1c73e:	e7b3      	b.n	1c6a8 <handle_ra_input+0x328>
   1c740:	0036ee7f 	.word	0x0036ee7f
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1c744:	2203      	movs	r2, #3
   1c746:	6939      	ldr	r1, [r7, #16]
   1c748:	a80c      	add	r0, sp, #48	; 0x30
   1c74a:	f7e4 f8ce 	bl	8ea <memcpy>
		addr->s6_addr[11] = 0xff;
   1c74e:	22ff      	movs	r2, #255	; 0xff
   1c750:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
		addr->s6_addr[12] = 0xfe;
   1c754:	f88d 9034 	strb.w	r9, [sp, #52]	; 0x34
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1c758:	6939      	ldr	r1, [r7, #16]
   1c75a:	2203      	movs	r2, #3
   1c75c:	4411      	add	r1, r2
   1c75e:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   1c762:	f7e4 f8c2 	bl	8ea <memcpy>
		if (lladdr->type == NET_LINK_ETHERNET) {
   1c766:	7d7b      	ldrb	r3, [r7, #21]
   1c768:	2b03      	cmp	r3, #3
   1c76a:	d1ce      	bne.n	1c70a <handle_ra_input+0x38a>
		addr->s6_addr[8] ^= 0x02;
   1c76c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1c770:	f083 0302 	eor.w	r3, r3, #2
   1c774:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   1c778:	e7c7      	b.n	1c70a <handle_ra_input+0x38a>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   1c77a:	6939      	ldr	r1, [r7, #16]
   1c77c:	a80c      	add	r0, sp, #48	; 0x30
   1c77e:	f7e4 f8b4 	bl	8ea <memcpy>
   1c782:	e7f3      	b.n	1c76c <handle_ra_input+0x3ec>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   1c784:	f5bb 5fe1 	cmp.w	fp, #7200	; 0x1c20
   1c788:	d905      	bls.n	1c796 <handle_ra_input+0x416>
			net_if_ipv6_addr_update_lifetime(ifaddr,
   1c78a:	990f      	ldr	r1, [sp, #60]	; 0x3c
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   1c78c:	4638      	mov	r0, r7
   1c78e:	f7fc f83f 	bl	18810 <net_if_ipv6_addr_update_lifetime>
	ifaddr->is_infinite = is_infinite;
   1c792:	2300      	movs	r3, #0
   1c794:	e7ce      	b.n	1c734 <handle_ra_input+0x3b4>
	return _timeout_remaining_get(&work->timeout);
   1c796:	3020      	adds	r0, #32
   1c798:	f003 fcd6 	bl	20148 <_timeout_remaining_get>
	return k_delayed_work_remaining_get(work) / MSEC_PER_SEC;
   1c79c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1c7a0:	fb90 f0f3 	sdiv	r0, r0, r3
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   1c7a4:	4583      	cmp	fp, r0
   1c7a6:	d8f0      	bhi.n	1c78a <handle_ra_input+0x40a>
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   1c7a8:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
   1c7ac:	e7ee      	b.n	1c78c <handle_ra_input+0x40c>
		if (prefix_info->valid_lifetime ==
   1c7ae:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   1c7b2:	bf0c      	ite	eq
   1c7b4:	2300      	moveq	r3, #0
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   1c7b6:	465b      	movne	r3, fp
   1c7b8:	2201      	movs	r2, #1
   1c7ba:	a90a      	add	r1, sp, #40	; 0x28
   1c7bc:	6960      	ldr	r0, [r4, #20]
   1c7be:	f7fc f82d 	bl	1881c <net_if_ipv6_addr_add>
   1c7c2:	e6ad      	b.n	1c520 <handle_ra_input+0x1a0>
					     length * 8 - 2);
   1c7c4:	00fb      	lsls	r3, r7, #3
   1c7c6:	2200      	movs	r2, #0
			frag = net_frag_skip(frag, offset, &offset,
   1c7c8:	3b02      	subs	r3, #2
   1c7ca:	9200      	str	r2, [sp, #0]
   1c7cc:	b29b      	uxth	r3, r3
   1c7ce:	462a      	mov	r2, r5
   1c7d0:	4659      	mov	r1, fp
   1c7d2:	f7fd f84d 	bl	19870 <net_frag_read>
			if (!frag && offset) {
   1c7d6:	4606      	mov	r6, r0
   1c7d8:	e6a2      	b.n	1c520 <handle_ra_input+0x1a0>
			if (nbr) {
   1c7da:	f1b8 0f00 	cmp.w	r8, #0
   1c7de:	d004      	beq.n	1c7ea <handle_ra_input+0x46a>
				net_ipv6_nbr_data(nbr)->is_router = true;
   1c7e0:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1c7e4:	2001      	movs	r0, #1
   1c7e6:	f881 0069 	strb.w	r0, [r1, #105]	; 0x69
			net_if_ipv6_router_update_lifetime(router,
   1c7ea:	4611      	mov	r1, r2
   1c7ec:	4618      	mov	r0, r3
   1c7ee:	f7fc fb9d 	bl	18f2c <net_if_ipv6_router_update_lifetime>
   1c7f2:	e6cc      	b.n	1c58e <handle_ra_input+0x20e>
	return pkt->frags->data;
   1c7f4:	68a3      	ldr	r3, [r4, #8]
		net_if_ipv6_router_add(net_pkt_iface(pkt),
   1c7f6:	6960      	ldr	r0, [r4, #20]
   1c7f8:	6899      	ldr	r1, [r3, #8]
   1c7fa:	3108      	adds	r1, #8
   1c7fc:	f7fc fb9c 	bl	18f38 <net_if_ipv6_router_add>
   1c800:	e6c5      	b.n	1c58e <handle_ra_input+0x20e>
   1c802:	bf00      	nop

0001c804 <handle_ns_input>:
{
   1c804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c808:	4604      	mov	r4, r0
   1c80a:	b09f      	sub	sp, #124	; 0x7c
	return net_buf_frags_len(pkt->frags);
   1c80c:	6880      	ldr	r0, [r0, #8]
   1c80e:	f7fe fd97 	bl	1b340 <net_buf_frags_len>
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &nshdr);
   1c812:	f10d 0a64 	add.w	sl, sp, #100	; 0x64
   1c816:	4605      	mov	r5, r0
   1c818:	4651      	mov	r1, sl
   1c81a:	4620      	mov	r0, r4
   1c81c:	f7fe fa22 	bl	1ac64 <net_icmpv6_get_ns_hdr>
	if (!ns_hdr) {
   1c820:	4681      	mov	r9, r0
   1c822:	b908      	cbnz	r0, 1c828 <handle_ns_input+0x24>
	return NET_DROP;
   1c824:	2002      	movs	r0, #2
   1c826:	e09e      	b.n	1c966 <handle_ns_input+0x162>
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   1c828:	b2ad      	uxth	r5, r5
   1c82a:	2d3f      	cmp	r5, #63	; 0x3f
   1c82c:	d904      	bls.n	1c838 <handle_ns_input+0x34>
	return pkt->frags->data;
   1c82e:	68a3      	ldr	r3, [r4, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT)) {
   1c830:	689b      	ldr	r3, [r3, #8]
			  sizeof(struct net_icmpv6_ns_hdr))) ||
   1c832:	79db      	ldrb	r3, [r3, #7]
   1c834:	2bff      	cmp	r3, #255	; 0xff
   1c836:	d00c      	beq.n	1c852 <handle_ns_input+0x4e>
		if (net_is_ipv6_addr_mcast(&ns_hdr->tgt)) {
   1c838:	f899 3004 	ldrb.w	r3, [r9, #4]
   1c83c:	2bff      	cmp	r3, #255	; 0xff
   1c83e:	d108      	bne.n	1c852 <handle_ns_input+0x4e>
			icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1c840:	a915      	add	r1, sp, #84	; 0x54
   1c842:	4620      	mov	r0, r4
   1c844:	f7fe f8aa 	bl	1a99c <net_icmpv6_get_hdr>
			if (!icmp_hdr || icmp_hdr->code != 0) {
   1c848:	2800      	cmp	r0, #0
   1c84a:	d0eb      	beq.n	1c824 <handle_ns_input+0x20>
   1c84c:	7843      	ldrb	r3, [r0, #1]
   1c84e:	2b00      	cmp	r3, #0
   1c850:	d1e8      	bne.n	1c824 <handle_ns_input+0x20>
	pkt->ipv6_ext_opt_len = len;
   1c852:	2314      	movs	r3, #20
   1c854:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   1c858:	a904      	add	r1, sp, #16
   1c85a:	4620      	mov	r0, r4
   1c85c:	f7fe fa5d 	bl	1ad1a <net_icmpv6_get_nd_opt_hdr>
   1c860:	4607      	mov	r7, r0
	return net_buf_frags_len(pkt->frags);
   1c862:	68a0      	ldr	r0, [r4, #8]
   1c864:	f7fe fd6c 	bl	1b340 <net_buf_frags_len>
	frag = net_frag_read(pkt->frags, sllao_offset,
   1c868:	f10d 0546 	add.w	r5, sp, #70	; 0x46
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   1c86c:	f1a0 0b2c 	sub.w	fp, r0, #44	; 0x2c
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   1c870:	b11f      	cbz	r7, 1c87a <handle_ns_input+0x76>
   1c872:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   1c876:	459b      	cmp	fp, r3
   1c878:	d878      	bhi.n	1c96c <handle_ns_input+0x168>
		ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   1c87a:	f109 0604 	add.w	r6, r9, #4
   1c87e:	4631      	mov	r1, r6
   1c880:	6960      	ldr	r0, [r4, #20]
   1c882:	f7fe fe6c 	bl	1b55e <net_if_ipv6_addr_lookup_by_iface>
	if (!ifaddr) {
   1c886:	4683      	mov	fp, r0
   1c888:	2800      	cmp	r0, #0
   1c88a:	d0cb      	beq.n	1c824 <handle_ns_input+0x20>
	return pkt->frags->data;
   1c88c:	68a3      	ldr	r3, [r4, #8]
   1c88e:	689d      	ldr	r5, [r3, #8]
		src = &NET_IPV6_HDR(pkt)->src;
   1c890:	f105 0708 	add.w	r7, r5, #8
		tgt = &ifaddr->address.in6_addr;
   1c894:	f100 0804 	add.w	r8, r0, #4
	if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   1c898:	4638      	mov	r0, r7
   1c89a:	f7fe fd59 	bl	1b350 <net_is_ipv6_addr_unspecified>
   1c89e:	4601      	mov	r1, r0
   1c8a0:	2800      	cmp	r0, #0
   1c8a2:	f000 80c6 	beq.w	1ca32 <handle_ns_input+0x22e>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   1c8a6:	69aa      	ldr	r2, [r5, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1c8a8:	f240 23ff 	movw	r3, #767	; 0x2ff
   1c8ac:	429a      	cmp	r2, r3
   1c8ae:	d1b9      	bne.n	1c824 <handle_ns_input+0x20>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   1c8b0:	69eb      	ldr	r3, [r5, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   1c8b2:	2b00      	cmp	r3, #0
   1c8b4:	d1b6      	bne.n	1c824 <handle_ns_input+0x20>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1c8b6:	6a2a      	ldr	r2, [r5, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   1c8b8:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1c8bc:	d1b2      	bne.n	1c824 <handle_ns_input+0x20>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   1c8be:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1c8c0:	b2d2      	uxtb	r2, r2
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1c8c2:	2aff      	cmp	r2, #255	; 0xff
   1c8c4:	d1ae      	bne.n	1c824 <handle_ns_input+0x20>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   1c8c6:	f99b 2065 	ldrsb.w	r2, [fp, #101]	; 0x65
   1c8ca:	2a00      	cmp	r2, #0
   1c8cc:	f000 80a5 	beq.w	1ca1a <handle_ns_input+0x216>
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1c8d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c8d4:	762a      	strb	r2, [r5, #24]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1c8d6:	76ab      	strb	r3, [r5, #26]
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1c8d8:	2202      	movs	r2, #2
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1c8da:	76eb      	strb	r3, [r5, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1c8dc:	772b      	strb	r3, [r5, #28]
   1c8de:	776b      	strb	r3, [r5, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1c8e0:	77ab      	strb	r3, [r5, #30]
   1c8e2:	77eb      	strb	r3, [r5, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1c8e4:	f885 3020 	strb.w	r3, [r5, #32]
   1c8e8:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1c8ec:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1c8f0:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1c8f4:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
   1c8f8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1c8fc:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
   1c900:	2301      	movs	r3, #1
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1c902:	766a      	strb	r2, [r5, #25]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1c904:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   1c908:	f105 0118 	add.w	r1, r5, #24
   1c90c:	6960      	ldr	r0, [r4, #20]
   1c90e:	f7fc fb95 	bl	1903c <net_if_ipv6_select_src_addr>
		goto send_na;
   1c912:	ad05      	add	r5, sp, #20
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   1c914:	4603      	mov	r3, r0
		goto send_na;
   1c916:	f100 0e10 	add.w	lr, r0, #16
   1c91a:	462a      	mov	r2, r5
   1c91c:	6818      	ldr	r0, [r3, #0]
   1c91e:	6859      	ldr	r1, [r3, #4]
   1c920:	462e      	mov	r6, r5
   1c922:	c603      	stmia	r6!, {r0, r1}
   1c924:	3308      	adds	r3, #8
   1c926:	4573      	cmp	r3, lr
   1c928:	4635      	mov	r5, r6
   1c92a:	d1f7      	bne.n	1c91c <handle_ns_input+0x118>
				net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   1c92c:	463d      	mov	r5, r7
   1c92e:	ae09      	add	r6, sp, #36	; 0x24
   1c930:	4613      	mov	r3, r2
   1c932:	cb03      	ldmia	r3!, {r0, r1}
   1c934:	42b3      	cmp	r3, r6
   1c936:	6028      	str	r0, [r5, #0]
   1c938:	6069      	str	r1, [r5, #4]
   1c93a:	461a      	mov	r2, r3
   1c93c:	f105 0508 	add.w	r5, r5, #8
   1c940:	d1f6      	bne.n	1c930 <handle_ns_input+0x12c>
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   1c942:	2320      	movs	r3, #32
   1c944:	68a2      	ldr	r2, [r4, #8]
	ret = net_ipv6_send_na(net_pkt_iface(pkt),
   1c946:	6960      	ldr	r0, [r4, #20]
			       &NET_IPV6_HDR(pkt)->dst,
   1c948:	6892      	ldr	r2, [r2, #8]
	ret = net_ipv6_send_na(net_pkt_iface(pkt),
   1c94a:	9300      	str	r3, [sp, #0]
   1c94c:	3218      	adds	r2, #24
   1c94e:	4643      	mov	r3, r8
   1c950:	4639      	mov	r1, r7
   1c952:	f7ff f93a 	bl	1bbca <net_ipv6_send_na>
	if (!ret) {
   1c956:	4605      	mov	r5, r0
   1c958:	2800      	cmp	r0, #0
   1c95a:	f47f af63 	bne.w	1c824 <handle_ns_input+0x20>
		net_pkt_unref(pkt);
   1c95e:	4620      	mov	r0, r4
   1c960:	f7fc fe33 	bl	195ca <net_pkt_unref>
		return NET_OK;
   1c964:	4628      	mov	r0, r5
}
   1c966:	b01f      	add	sp, #124	; 0x7c
   1c968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!nd_opt_hdr->len) {
   1c96c:	787e      	ldrb	r6, [r7, #1]
   1c96e:	9303      	str	r3, [sp, #12]
   1c970:	2e00      	cmp	r6, #0
   1c972:	d082      	beq.n	1c87a <handle_ns_input+0x76>
		switch (nd_opt_hdr->type) {
   1c974:	783a      	ldrb	r2, [r7, #0]
   1c976:	2a01      	cmp	r2, #1
   1c978:	d13e      	bne.n	1c9f8 <handle_ns_input+0x1f4>
   1c97a:	f8d4 8008 	ldr.w	r8, [r4, #8]
				    &NET_IPV6_HDR(pkt)->src)) {
   1c97e:	f8d8 0008 	ldr.w	r0, [r8, #8]
			if (net_is_ipv6_addr_unspecified(
   1c982:	3008      	adds	r0, #8
   1c984:	f7fe fce4 	bl	1b350 <net_is_ipv6_addr_unspecified>
   1c988:	2800      	cmp	r0, #0
   1c98a:	f47f af4b 	bne.w	1c824 <handle_ns_input+0x20>
			if (nd_opt_hdr->len > 2) {
   1c98e:	2e02      	cmp	r6, #2
   1c990:	f63f af48 	bhi.w	1c824 <handle_ns_input+0x20>
						net_pkt_ipv6_ext_len(pkt) +
   1c994:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
						net_pkt_ip_hdr_len(pkt) +
   1c998:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
			if (!handle_ns_neighbor(pkt, nd_opt_hdr->len,
   1c99c:	9b03      	ldr	r3, [sp, #12]
	frag = net_frag_read(pkt->frags, sllao_offset,
   1c99e:	9500      	str	r5, [sp, #0]
						net_pkt_ip_hdr_len(pkt) +
   1c9a0:	4411      	add	r1, r2
			if (!handle_ns_neighbor(pkt, nd_opt_hdr->len,
   1c9a2:	3106      	adds	r1, #6
   1c9a4:	4419      	add	r1, r3
	lladdr.len = 8 * ll_len - 2;
   1c9a6:	00f3      	lsls	r3, r6, #3
   1c9a8:	3b02      	subs	r3, #2
   1c9aa:	b2db      	uxtb	r3, r3
	frag = net_frag_read(pkt->frags, sllao_offset,
   1c9ac:	aa0d      	add	r2, sp, #52	; 0x34
   1c9ae:	b289      	uxth	r1, r1
   1c9b0:	4640      	mov	r0, r8
	lladdr.len = 8 * ll_len - 2;
   1c9b2:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
	frag = net_frag_read(pkt->frags, sllao_offset,
   1c9b6:	f7fc ff5b 	bl	19870 <net_frag_read>
	if (!frag && pos == 0xffff) {
   1c9ba:	b930      	cbnz	r0, 1c9ca <handle_ns_input+0x1c6>
   1c9bc:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   1c9c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c9c4:	429a      	cmp	r2, r3
   1c9c6:	f43f af2d 	beq.w	1c824 <handle_ns_input+0x20>
	nbr_lladdr.len = lladdr.len;
   1c9ca:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
	if (net_pkt_ll_src(pkt)->len < nbr_lladdr.len) {
   1c9ce:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	nbr_lladdr.len = lladdr.len;
   1c9d2:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
	if (net_pkt_ll_src(pkt)->len < nbr_lladdr.len) {
   1c9d6:	429a      	cmp	r2, r3
		nbr_lladdr.len = net_pkt_ll_src(pkt)->len;
   1c9d8:	bf88      	it	hi
   1c9da:	f88d 3058 	strbhi.w	r3, [sp, #88]	; 0x58
   1c9de:	68a3      	ldr	r3, [r4, #8]
	nbr_lladdr.addr = lladdr.addr;
   1c9e0:	9515      	str	r5, [sp, #84]	; 0x54
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   1c9e2:	6899      	ldr	r1, [r3, #8]
   1c9e4:	6960      	ldr	r0, [r4, #20]
   1c9e6:	2300      	movs	r3, #0
   1c9e8:	9300      	str	r3, [sp, #0]
   1c9ea:	aa15      	add	r2, sp, #84	; 0x54
   1c9ec:	3108      	adds	r1, #8
   1c9ee:	f7ff fc79 	bl	1c2e4 <net_ipv6_nbr_add>
			if (!handle_ns_neighbor(pkt, nd_opt_hdr->len,
   1c9f2:	2800      	cmp	r0, #0
   1c9f4:	f43f af16 	beq.w	1c824 <handle_ns_input+0x20>
   1c9f8:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
					     (nd_opt_hdr->len << 3));
   1c9fc:	787b      	ldrb	r3, [r7, #1]
		net_pkt_set_ipv6_ext_opt_len(pkt,
   1c9fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1ca02:	b2db      	uxtb	r3, r3
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   1ca04:	4293      	cmp	r3, r2
	pkt->ipv6_ext_opt_len = len;
   1ca06:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   1ca0a:	f67f af0b 	bls.w	1c824 <handle_ns_input+0x20>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   1ca0e:	a904      	add	r1, sp, #16
   1ca10:	4620      	mov	r0, r4
   1ca12:	f7fe f982 	bl	1ad1a <net_icmpv6_get_nd_opt_hdr>
   1ca16:	4607      	mov	r7, r0
   1ca18:	e72a      	b.n	1c870 <handle_ns_input+0x6c>
	if (net_is_ipv6_ll_addr(addr)) {
   1ca1a:	f8bb 2004 	ldrh.w	r2, [fp, #4]
   1ca1e:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1ca22:	429a      	cmp	r2, r3
   1ca24:	f43f aefe 	beq.w	1c824 <handle_ns_input+0x20>
	net_if_ipv6_dad_failed(iface, addr);
   1ca28:	4641      	mov	r1, r8
   1ca2a:	6960      	ldr	r0, [r4, #20]
   1ca2c:	f7fc f8d4 	bl	18bd8 <net_if_ipv6_dad_failed>
   1ca30:	e6f8      	b.n	1c824 <handle_ns_input+0x20>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   1ca32:	4638      	mov	r0, r7
   1ca34:	f7fb fe9e 	bl	18774 <net_if_ipv6_addr_lookup>
	if (net_is_my_ipv6_addr(&NET_IPV6_HDR(pkt)->src)) {
   1ca38:	2800      	cmp	r0, #0
   1ca3a:	f47f aef3 	bne.w	1c824 <handle_ns_input+0x20>
	return pkt->frags->data;
   1ca3e:	68a3      	ldr	r3, [r4, #8]
   1ca40:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   1ca42:	6999      	ldr	r1, [r3, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1ca44:	f240 22ff 	movw	r2, #767	; 0x2ff
   1ca48:	4291      	cmp	r1, r2
	if (net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   1ca4a:	f103 0b18 	add.w	fp, r3, #24
   1ca4e:	d139      	bne.n	1cac4 <handle_ns_input+0x2c0>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   1ca50:	69da      	ldr	r2, [r3, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   1ca52:	bbba      	cbnz	r2, 1cac4 <handle_ns_input+0x2c0>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1ca54:	6a1a      	ldr	r2, [r3, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   1ca56:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1ca5a:	d133      	bne.n	1cac4 <handle_ns_input+0x2c0>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   1ca5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1ca5e:	b2d2      	uxtb	r2, r2
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1ca60:	2aff      	cmp	r2, #255	; 0xff
   1ca62:	d12f      	bne.n	1cac4 <handle_ns_input+0x2c0>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1ca64:	ad09      	add	r5, sp, #36	; 0x24
   1ca66:	f103 0208 	add.w	r2, r3, #8
   1ca6a:	46ac      	mov	ip, r5
   1ca6c:	6810      	ldr	r0, [r2, #0]
   1ca6e:	6851      	ldr	r1, [r2, #4]
   1ca70:	46ae      	mov	lr, r5
   1ca72:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1ca76:	3208      	adds	r2, #8
   1ca78:	455a      	cmp	r2, fp
   1ca7a:	4675      	mov	r5, lr
   1ca7c:	d1f6      	bne.n	1ca6c <handle_ns_input+0x268>
   1ca7e:	ad0d      	add	r5, sp, #52	; 0x34
   1ca80:	46e6      	mov	lr, ip
   1ca82:	e8be 0003 	ldmia.w	lr!, {r0, r1}
   1ca86:	45ae      	cmp	lr, r5
   1ca88:	6010      	str	r0, [r2, #0]
   1ca8a:	6051      	str	r1, [r2, #4]
   1ca8c:	46f4      	mov	ip, lr
   1ca8e:	f102 0208 	add.w	r2, r2, #8
   1ca92:	d1f5      	bne.n	1ca80 <handle_ns_input+0x27c>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   1ca94:	46ae      	mov	lr, r5
   1ca96:	f109 0914 	add.w	r9, r9, #20
   1ca9a:	6830      	ldr	r0, [r6, #0]
   1ca9c:	6871      	ldr	r1, [r6, #4]
   1ca9e:	4672      	mov	r2, lr
   1caa0:	c203      	stmia	r2!, {r0, r1}
   1caa2:	3608      	adds	r6, #8
   1caa4:	454e      	cmp	r6, r9
   1caa6:	4696      	mov	lr, r2
   1caa8:	d1f7      	bne.n	1ca9a <handle_ns_input+0x296>
   1caaa:	462a      	mov	r2, r5
   1caac:	3308      	adds	r3, #8
   1caae:	ae11      	add	r6, sp, #68	; 0x44
   1cab0:	4615      	mov	r5, r2
   1cab2:	cd03      	ldmia	r5!, {r0, r1}
   1cab4:	42b5      	cmp	r5, r6
   1cab6:	6018      	str	r0, [r3, #0]
   1cab8:	6059      	str	r1, [r3, #4]
   1caba:	462a      	mov	r2, r5
   1cabc:	f103 0308 	add.w	r3, r3, #8
   1cac0:	d1f6      	bne.n	1cab0 <handle_ns_input+0x2ac>
   1cac2:	e03e      	b.n	1cb42 <handle_ns_input+0x33e>
		ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   1cac4:	4659      	mov	r1, fp
   1cac6:	6960      	ldr	r0, [r4, #20]
   1cac8:	f7fe fd49 	bl	1b55e <net_if_ipv6_addr_lookup_by_iface>
	if (ifaddr) {
   1cacc:	4605      	mov	r5, r0
   1cace:	2800      	cmp	r0, #0
   1cad0:	f43f aea8 	beq.w	1c824 <handle_ns_input+0x20>
   1cad4:	68a3      	ldr	r3, [r4, #8]
   1cad6:	689b      	ldr	r3, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1cad8:	f10d 0e44 	add.w	lr, sp, #68	; 0x44
   1cadc:	f103 0208 	add.w	r2, r3, #8
   1cae0:	f103 0b18 	add.w	fp, r3, #24
   1cae4:	4617      	mov	r7, r2
   1cae6:	46f4      	mov	ip, lr
   1cae8:	6810      	ldr	r0, [r2, #0]
   1caea:	6851      	ldr	r1, [r2, #4]
   1caec:	46f0      	mov	r8, lr
   1caee:	e8a8 0003 	stmia.w	r8!, {r0, r1}
   1caf2:	3208      	adds	r2, #8
   1caf4:	455a      	cmp	r2, fp
   1caf6:	46c6      	mov	lr, r8
   1caf8:	d1f6      	bne.n	1cae8 <handle_ns_input+0x2e4>
   1cafa:	3318      	adds	r3, #24
   1cafc:	aa15      	add	r2, sp, #84	; 0x54
   1cafe:	46e6      	mov	lr, ip
   1cb00:	e8be 0003 	ldmia.w	lr!, {r0, r1}
   1cb04:	4596      	cmp	lr, r2
   1cb06:	6018      	str	r0, [r3, #0]
   1cb08:	6059      	str	r1, [r3, #4]
   1cb0a:	46f4      	mov	ip, lr
   1cb0c:	f103 0308 	add.w	r3, r3, #8
   1cb10:	d1f5      	bne.n	1cafe <handle_ns_input+0x2fa>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   1cb12:	4696      	mov	lr, r2
   1cb14:	f109 0914 	add.w	r9, r9, #20
   1cb18:	6830      	ldr	r0, [r6, #0]
   1cb1a:	6871      	ldr	r1, [r6, #4]
   1cb1c:	4673      	mov	r3, lr
   1cb1e:	c303      	stmia	r3!, {r0, r1}
   1cb20:	3608      	adds	r6, #8
   1cb22:	454e      	cmp	r6, r9
   1cb24:	469e      	mov	lr, r3
   1cb26:	d1f7      	bne.n	1cb18 <handle_ns_input+0x314>
   1cb28:	4613      	mov	r3, r2
   1cb2a:	463e      	mov	r6, r7
   1cb2c:	461a      	mov	r2, r3
   1cb2e:	ca03      	ldmia	r2!, {r0, r1}
   1cb30:	4552      	cmp	r2, sl
   1cb32:	6030      	str	r0, [r6, #0]
   1cb34:	6071      	str	r1, [r6, #4]
   1cb36:	4613      	mov	r3, r2
   1cb38:	f106 0608 	add.w	r6, r6, #8
   1cb3c:	d1f6      	bne.n	1cb2c <handle_ns_input+0x328>
		tgt = &ifaddr->address.in6_addr;
   1cb3e:	f105 0804 	add.w	r8, r5, #4
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   1cb42:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   1cb44:	e6fe      	b.n	1c944 <handle_ns_input+0x140>
	...

0001cb48 <nd_reachable_timeout>:
{
   1cb48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cb4a:	4d36      	ldr	r5, [pc, #216]	; (1cc24 <nd_reachable_timeout+0xdc>)
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   1cb4c:	f1a0 0114 	sub.w	r1, r0, #20
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1cb50:	2200      	movs	r2, #0
   1cb52:	462e      	mov	r6, r5
   1cb54:	01d3      	lsls	r3, r2, #7
   1cb56:	18ec      	adds	r4, r5, r3
		if (nbr->data == (u8_t *)data) {
   1cb58:	68e7      	ldr	r7, [r4, #12]
   1cb5a:	42b9      	cmp	r1, r7
   1cb5c:	d04f      	beq.n	1cbfe <nd_reachable_timeout+0xb6>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1cb5e:	3201      	adds	r2, #1
   1cb60:	2a08      	cmp	r2, #8
   1cb62:	d1f7      	bne.n	1cb54 <nd_reachable_timeout+0xc>
}
   1cb64:	b003      	add	sp, #12
   1cb66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (data->ns_count >= MAX_MULTICAST_SOLICIT) {
   1cb68:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
   1cb6c:	2a02      	cmp	r2, #2
   1cb6e:	d905      	bls.n	1cb7c <nd_reachable_timeout+0x34>
				nbr_free(nbr);
   1cb70:	4620      	mov	r0, r4
}
   1cb72:	b003      	add	sp, #12
   1cb74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				nbr_free(nbr);
   1cb78:	f7fe bc11 	b.w	1b39e <nbr_free>
			data->ns_count++;
   1cb7c:	3201      	adds	r2, #1
   1cb7e:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
			ret = net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   1cb82:	441e      	add	r6, r3
   1cb84:	3810      	subs	r0, #16
   1cb86:	2300      	movs	r3, #0
   1cb88:	9301      	str	r3, [sp, #4]
   1cb8a:	9000      	str	r0, [sp, #0]
   1cb8c:	461a      	mov	r2, r3
   1cb8e:	4619      	mov	r1, r3
   1cb90:	68b0      	ldr	r0, [r6, #8]
   1cb92:	f7ff fa41 	bl	1c018 <net_ipv6_send_ns>
   1cb96:	e7e5      	b.n	1cb64 <nd_reachable_timeout+0x1c>
		data->state = NET_IPV6_NBR_STATE_STALE;
   1cb98:	2302      	movs	r3, #2
   1cb9a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
		break;
   1cb9e:	e7e1      	b.n	1cb64 <nd_reachable_timeout+0x1c>
		data->state = NET_IPV6_NBR_STATE_PROBE;
   1cba0:	2204      	movs	r2, #4
   1cba2:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		data->ns_count = 0;
   1cba6:	2200      	movs	r2, #0
   1cba8:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
		if (data->ns_count >= MAX_UNICAST_SOLICIT) {
   1cbac:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
   1cbb0:	2a02      	cmp	r2, #2
   1cbb2:	f1a0 0110 	sub.w	r1, r0, #16
   1cbb6:	d90c      	bls.n	1cbd2 <nd_reachable_timeout+0x8a>
			router = net_if_ipv6_router_lookup(nbr->iface,
   1cbb8:	4433      	add	r3, r6
   1cbba:	6898      	ldr	r0, [r3, #8]
   1cbbc:	f7fc f988 	bl	18ed0 <net_if_ipv6_router_lookup>
			if (router && !router->is_infinite) {
   1cbc0:	2800      	cmp	r0, #0
   1cbc2:	d0cf      	beq.n	1cb64 <nd_reachable_timeout+0x1c>
   1cbc4:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   1cbc8:	2b00      	cmp	r3, #0
   1cbca:	d1cb      	bne.n	1cb64 <nd_reachable_timeout+0x1c>
				net_if_ipv6_router_rm(router);
   1cbcc:	f7fc f9fe 	bl	18fcc <net_if_ipv6_router_rm>
   1cbd0:	e7ce      	b.n	1cb70 <nd_reachable_timeout+0x28>
			data->ns_count++;
   1cbd2:	3201      	adds	r2, #1
   1cbd4:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
			ret = net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   1cbd8:	18f0      	adds	r0, r6, r3
   1cbda:	2300      	movs	r3, #0
   1cbdc:	e88d 000a 	stmia.w	sp, {r1, r3}
   1cbe0:	461a      	mov	r2, r3
   1cbe2:	4619      	mov	r1, r3
   1cbe4:	6880      	ldr	r0, [r0, #8]
   1cbe6:	f7ff fa17 	bl	1c018 <net_ipv6_send_ns>
			k_delayed_work_submit(
   1cbea:	68e1      	ldr	r1, [r4, #12]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1cbec:	480e      	ldr	r0, [pc, #56]	; (1cc28 <nd_reachable_timeout+0xe0>)
   1cbee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cbf2:	3114      	adds	r1, #20
}
   1cbf4:	b003      	add	sp, #12
   1cbf6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1cbfa:	f003 b9cb 	b.w	1ff94 <k_delayed_work_submit_to_queue>
	if (!data || !nbr) {
   1cbfe:	2900      	cmp	r1, #0
   1cc00:	d0b0      	beq.n	1cb64 <nd_reachable_timeout+0x1c>
	switch (data->state) {
   1cc02:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   1cc06:	2a04      	cmp	r2, #4
   1cc08:	d8ac      	bhi.n	1cb64 <nd_reachable_timeout+0x1c>
   1cc0a:	a101      	add	r1, pc, #4	; (adr r1, 1cc10 <nd_reachable_timeout+0xc8>)
   1cc0c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   1cc10:	0001cb69 	.word	0x0001cb69
   1cc14:	0001cb99 	.word	0x0001cb99
   1cc18:	0001cb71 	.word	0x0001cb71
   1cc1c:	0001cba1 	.word	0x0001cba1
   1cc20:	0001cbad 	.word	0x0001cbad
   1cc24:	2000e18c 	.word	0x2000e18c
   1cc28:	20005218 	.word	0x20005218

0001cc2c <net_ipv6_start_dad>:
{
   1cc2c:	b507      	push	{r0, r1, r2, lr}
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   1cc2e:	2301      	movs	r3, #1
   1cc30:	9301      	str	r3, [sp, #4]
   1cc32:	3104      	adds	r1, #4
   1cc34:	2300      	movs	r3, #0
   1cc36:	9100      	str	r1, [sp, #0]
   1cc38:	461a      	mov	r2, r3
   1cc3a:	4619      	mov	r1, r3
   1cc3c:	f7ff f9ec 	bl	1c018 <net_ipv6_send_ns>
}
   1cc40:	b003      	add	sp, #12
   1cc42:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001cc48 <net_ipv6_prepare_for_send>:
{
   1cc48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct net_if *iface = NULL;
   1cc4a:	2300      	movs	r3, #0
   1cc4c:	9303      	str	r3, [sp, #12]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cc4e:	6943      	ldr	r3, [r0, #20]
   1cc50:	f3bf 8f5b 	dmb	ish
   1cc54:	68db      	ldr	r3, [r3, #12]
   1cc56:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(net_pkt_iface(pkt)->flags, NET_IF_POINTOPOINT)) {
   1cc5a:	0799      	lsls	r1, r3, #30
{
   1cc5c:	4604      	mov	r4, r0
	if (atomic_test_bit(net_pkt_iface(pkt)->flags, NET_IF_POINTOPOINT)) {
   1cc5e:	d468      	bmi.n	1cd32 <net_ipv6_prepare_for_send+0xea>
	if ((net_pkt_ll_dst(pkt)->addr &&
   1cc60:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1cc62:	b923      	cbnz	r3, 1cc6e <net_ipv6_prepare_for_send+0x26>
   1cc64:	6883      	ldr	r3, [r0, #8]
   1cc66:	6899      	ldr	r1, [r3, #8]
	      !IS_ENABLED(CONFIG_NET_ROUTING))) ||
   1cc68:	7e0b      	ldrb	r3, [r1, #24]
   1cc6a:	2bff      	cmp	r3, #255	; 0xff
   1cc6c:	d10a      	bne.n	1cc84 <net_ipv6_prepare_for_send+0x3c>
	return pkt->forwarding;
   1cc6e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
	if (net_pkt_forwarding(pkt) &&
   1cc72:	075a      	lsls	r2, r3, #29
   1cc74:	d45d      	bmi.n	1cd32 <net_ipv6_prepare_for_send+0xea>
	return pkt->frags->data;
   1cc76:	68a3      	ldr	r3, [r4, #8]
		return update_ll_reserve(pkt, &NET_IPV6_HDR(pkt)->dst);
   1cc78:	6899      	ldr	r1, [r3, #8]
   1cc7a:	3118      	adds	r1, #24
   1cc7c:	4620      	mov	r0, r4
   1cc7e:	f7fe fc17 	bl	1b4b0 <update_ll_reserve.part.32>
   1cc82:	e056      	b.n	1cd32 <net_ipv6_prepare_for_send+0xea>
	if (net_if_ipv6_addr_onlink(&iface,
   1cc84:	3118      	adds	r1, #24
   1cc86:	a803      	add	r0, sp, #12
   1cc88:	f7fc f8a8 	bl	18ddc <net_if_ipv6_addr_onlink>
   1cc8c:	68a3      	ldr	r3, [r4, #8]
		nexthop = &NET_IPV6_HDR(pkt)->dst;
   1cc8e:	689d      	ldr	r5, [r3, #8]
   1cc90:	3518      	adds	r5, #24
	if (net_if_ipv6_addr_onlink(&iface,
   1cc92:	2800      	cmp	r0, #0
   1cc94:	d03c      	beq.n	1cd10 <net_ipv6_prepare_for_send+0xc8>
		net_pkt_set_iface(pkt, iface);
   1cc96:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   1cc98:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1cc9a:	7d5b      	ldrb	r3, [r3, #21]
   1cc9c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1cca0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	if (!iface) {
   1cca4:	9b03      	ldr	r3, [sp, #12]
   1cca6:	b963      	cbnz	r3, 1ccc2 <net_ipv6_prepare_for_send+0x7a>
		if (net_if_ipv6_addr_onlink(&iface, nexthop)) {
   1cca8:	4629      	mov	r1, r5
   1ccaa:	a803      	add	r0, sp, #12
   1ccac:	f7fc f896 	bl	18ddc <net_if_ipv6_addr_onlink>
   1ccb0:	2800      	cmp	r0, #0
   1ccb2:	d048      	beq.n	1cd46 <net_ipv6_prepare_for_send+0xfe>
			net_pkt_set_iface(pkt, iface);
   1ccb4:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   1ccb6:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1ccb8:	7d5b      	ldrb	r3, [r3, #21]
   1ccba:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1ccbe:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	nbr = nbr_lookup(&net_neighbor.table, iface, nexthop);
   1ccc2:	4629      	mov	r1, r5
   1ccc4:	9803      	ldr	r0, [sp, #12]
   1ccc6:	f7fe fccd 	bl	1b664 <nbr_lookup.isra.29>
	if (nbr && nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   1ccca:	4606      	mov	r6, r0
   1cccc:	2800      	cmp	r0, #0
   1ccce:	d03d      	beq.n	1cd4c <net_ipv6_prepare_for_send+0x104>
   1ccd0:	7840      	ldrb	r0, [r0, #1]
   1ccd2:	28ff      	cmp	r0, #255	; 0xff
   1ccd4:	d03a      	beq.n	1cd4c <net_ipv6_prepare_for_send+0x104>
		lladdr = net_nbr_get_lladdr(nbr->idx);
   1ccd6:	f7fe fb2b 	bl	1b330 <net_nbr_get_lladdr>
		net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   1ccda:	1c83      	adds	r3, r0, #2
   1ccdc:	62a3      	str	r3, [r4, #40]	; 0x28
		net_pkt_ll_dst(pkt)->len = lladdr->len;
   1ccde:	7843      	ldrb	r3, [r0, #1]
   1cce0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   1cce4:	68f3      	ldr	r3, [r6, #12]
   1cce6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1ccea:	2b02      	cmp	r3, #2
   1ccec:	d10a      	bne.n	1cd04 <net_ipv6_prepare_for_send+0xbc>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_DELAY);
   1ccee:	2103      	movs	r1, #3
   1ccf0:	4630      	mov	r0, r6
   1ccf2:	f7fe fb3d 	bl	1b370 <ipv6_nbr_set_state>
			k_delayed_work_submit(
   1ccf6:	68f1      	ldr	r1, [r6, #12]
   1ccf8:	481c      	ldr	r0, [pc, #112]	; (1cd6c <net_ipv6_prepare_for_send+0x124>)
   1ccfa:	f241 3288 	movw	r2, #5000	; 0x1388
   1ccfe:	3114      	adds	r1, #20
   1cd00:	f003 f948 	bl	1ff94 <k_delayed_work_submit_to_queue>
	return pkt->forwarding;
   1cd04:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
	if (net_pkt_forwarding(pkt) &&
   1cd08:	075b      	lsls	r3, r3, #29
   1cd0a:	d412      	bmi.n	1cd32 <net_ipv6_prepare_for_send+0xea>
   1cd0c:	4629      	mov	r1, r5
   1cd0e:	e7b5      	b.n	1cc7c <net_ipv6_prepare_for_send+0x34>
	route = net_route_lookup(iface, dst);
   1cd10:	4629      	mov	r1, r5
   1cd12:	f000 fbcf 	bl	1d4b4 <net_route_lookup>
	if (route) {
   1cd16:	4606      	mov	r6, r0
   1cd18:	b170      	cbz	r0, 1cd38 <net_ipv6_prepare_for_send+0xf0>
		nexthop = net_route_get_nexthop(route);
   1cd1a:	f000 fc71 	bl	1d600 <net_route_get_nexthop>
		if (!nexthop) {
   1cd1e:	4605      	mov	r5, r0
   1cd20:	2800      	cmp	r0, #0
   1cd22:	d1bf      	bne.n	1cca4 <net_ipv6_prepare_for_send+0x5c>
			net_route_del(route);
   1cd24:	4630      	mov	r0, r6
   1cd26:	f000 fc1f 	bl	1d568 <net_route_del>
			net_pkt_unref(pkt);
   1cd2a:	4620      	mov	r0, r4
   1cd2c:	f7fc fc4d 	bl	195ca <net_pkt_unref>
			return NULL;
   1cd30:	2400      	movs	r4, #0
}
   1cd32:	4620      	mov	r0, r4
   1cd34:	b004      	add	sp, #16
   1cd36:	bd70      	pop	{r4, r5, r6, pc}
		router = net_if_ipv6_router_find_default(NULL, dst);
   1cd38:	4629      	mov	r1, r5
   1cd3a:	f7fc f8df 	bl	18efc <net_if_ipv6_router_find_default>
		if (!router) {
   1cd3e:	b188      	cbz	r0, 1cd64 <net_ipv6_prepare_for_send+0x11c>
		nexthop = &router->address.in6_addr;
   1cd40:	f100 052c 	add.w	r5, r0, #44	; 0x2c
   1cd44:	e7ae      	b.n	1cca4 <net_ipv6_prepare_for_send+0x5c>
			iface = net_pkt_iface(pkt);
   1cd46:	6963      	ldr	r3, [r4, #20]
   1cd48:	9303      	str	r3, [sp, #12]
   1cd4a:	e7ba      	b.n	1ccc2 <net_ipv6_prepare_for_send+0x7a>
	return pkt->frags->data;
   1cd4c:	68a3      	ldr	r3, [r4, #8]
	ret = net_ipv6_send_ns(net_pkt_iface(pkt), pkt,
   1cd4e:	2600      	movs	r6, #0
   1cd50:	689a      	ldr	r2, [r3, #8]
   1cd52:	e88d 0060 	stmia.w	sp, {r5, r6}
   1cd56:	4633      	mov	r3, r6
   1cd58:	3208      	adds	r2, #8
   1cd5a:	4621      	mov	r1, r4
   1cd5c:	6960      	ldr	r0, [r4, #20]
   1cd5e:	f7ff f95b 	bl	1c018 <net_ipv6_send_ns>
   1cd62:	e7e5      	b.n	1cd30 <net_ipv6_prepare_for_send+0xe8>
		if (!nexthop) {
   1cd64:	2d00      	cmp	r5, #0
   1cd66:	d1ac      	bne.n	1ccc2 <net_ipv6_prepare_for_send+0x7a>
   1cd68:	e7df      	b.n	1cd2a <net_ipv6_prepare_for_send+0xe2>
   1cd6a:	bf00      	nop
   1cd6c:	20005218 	.word	0x20005218

0001cd70 <net_ipv6_send_rs>:
{
   1cd70:	b5f0      	push	{r4, r5, r6, r7, lr}
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1cd72:	2100      	movs	r1, #0
{
   1cd74:	b085      	sub	sp, #20
   1cd76:	4607      	mov	r7, r0
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1cd78:	f7fe faf7 	bl	1b36a <net_if_get_ll_reserve>
   1cd7c:	210a      	movs	r1, #10
   1cd7e:	f7fc fbed 	bl	1955c <net_pkt_get_reserve_tx>
	if (!pkt) {
   1cd82:	4605      	mov	r5, r0
   1cd84:	b138      	cbz	r0, 1cd96 <net_ipv6_send_rs+0x26>
	frag = net_pkt_get_frag(pkt, ND_NET_BUF_TIMEOUT);
   1cd86:	210a      	movs	r1, #10
   1cd88:	f7fc fc00 	bl	1958c <net_pkt_get_frag>
	if (!frag) {
   1cd8c:	4606      	mov	r6, r0
   1cd8e:	b928      	cbnz	r0, 1cd9c <net_ipv6_send_rs+0x2c>
		net_pkt_unref(pkt);
   1cd90:	4628      	mov	r0, r5
   1cd92:	f7fc fc1a 	bl	195ca <net_pkt_unref>
		return -ENOMEM;
   1cd96:	f06f 000b 	mvn.w	r0, #11
   1cd9a:	e08b      	b.n	1ceb4 <net_ipv6_send_rs+0x144>
	net_pkt_frag_add(pkt, frag);
   1cd9c:	4601      	mov	r1, r0
   1cd9e:	4628      	mov	r0, r5
   1cda0:	f7fc fc3a 	bl	19618 <net_pkt_frag_add>
	pkt->iface = iface;
   1cda4:	616f      	str	r7, [r5, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1cda6:	7d7b      	ldrb	r3, [r7, #21]
   1cda8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1cdac:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
	pkt->family = family;
   1cdb0:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
   1cdb4:	220a      	movs	r2, #10
   1cdb6:	f362 03c6 	bfi	r3, r2, #3, #4
   1cdba:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
	pkt->ip_hdr_len = len;
   1cdbe:	2328      	movs	r3, #40	; 0x28
   1cdc0:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
	net_pkt_ll_clear(pkt);
   1cdc4:	4628      	mov	r0, r5
   1cdc6:	f7fe fb4e 	bl	1b466 <net_pkt_ll_clear>
	return pkt->frags->data;
   1cdca:	68ab      	ldr	r3, [r5, #8]
   1cdcc:	689c      	ldr	r4, [r3, #8]
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1cdce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cdd2:	7623      	strb	r3, [r4, #24]
   1cdd4:	2300      	movs	r3, #0
   1cdd6:	2202      	movs	r2, #2
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1cdd8:	76a3      	strb	r3, [r4, #26]
   1cdda:	76e3      	strb	r3, [r4, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1cddc:	7723      	strb	r3, [r4, #28]
   1cdde:	7763      	strb	r3, [r4, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1cde0:	77a3      	strb	r3, [r4, #30]
   1cde2:	77e3      	strb	r3, [r4, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1cde4:	f884 3020 	strb.w	r3, [r4, #32]
   1cde8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1cdec:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1cdf0:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1cdf4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   1cdf8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1cdfc:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
   1ce00:	2301      	movs	r3, #1
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1ce02:	7662      	strb	r2, [r4, #25]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1ce04:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
						    &NET_IPV6_HDR(pkt)->dst));
   1ce08:	4638      	mov	r0, r7
   1ce0a:	f104 0118 	add.w	r1, r4, #24
   1ce0e:	f7fc f915 	bl	1903c <net_if_ipv6_select_src_addr>

   1ce12:	466f      	mov	r7, sp
						    &NET_IPV6_HDR(pkt)->dst));
   1ce14:	4603      	mov	r3, r0

   1ce16:	f100 0c10 	add.w	ip, r0, #16
   1ce1a:	466a      	mov	r2, sp
   1ce1c:	6818      	ldr	r0, [r3, #0]
   1ce1e:	6859      	ldr	r1, [r3, #4]
   1ce20:	46be      	mov	lr, r7
   1ce22:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1ce26:	3308      	adds	r3, #8
   1ce28:	4563      	cmp	r3, ip
   1ce2a:	4677      	mov	r7, lr
   1ce2c:	d1f6      	bne.n	1ce1c <net_ipv6_send_rs+0xac>
			net_if_ipv6_select_src_addr(iface,
   1ce2e:	3408      	adds	r4, #8
   1ce30:	af04      	add	r7, sp, #16
   1ce32:	4613      	mov	r3, r2
   1ce34:	cb03      	ldmia	r3!, {r0, r1}
   1ce36:	42bb      	cmp	r3, r7
   1ce38:	6020      	str	r0, [r4, #0]
   1ce3a:	6061      	str	r1, [r4, #4]
   1ce3c:	461a      	mov	r2, r3
   1ce3e:	f104 0408 	add.w	r4, r4, #8
   1ce42:	d1f6      	bne.n	1ce32 <net_ipv6_send_rs+0xc2>
   1ce44:	68ab      	ldr	r3, [r5, #8]
	unspec_src = net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src);
   1ce46:	6898      	ldr	r0, [r3, #8]
   1ce48:	3008      	adds	r0, #8
   1ce4a:	f7fe fa81 	bl	1b350 <net_is_ipv6_addr_unspecified>
	if (!unspec_src) {
   1ce4e:	4607      	mov	r7, r0
   1ce50:	bb90      	cbnz	r0, 1ceb8 <net_ipv6_send_rs+0x148>
   1ce52:	696b      	ldr	r3, [r5, #20]
   1ce54:	7d1b      	ldrb	r3, [r3, #20]
	if (iface->link_addr.len == 6) {
   1ce56:	2b06      	cmp	r3, #6
   1ce58:	d030      	beq.n	1cebc <net_ipv6_send_rs+0x14c>
		return 16;
   1ce5a:	2b08      	cmp	r3, #8
   1ce5c:	bf14      	ite	ne
   1ce5e:	2400      	movne	r4, #0
   1ce60:	2410      	moveq	r4, #16
	setup_headers(pkt, sizeof(struct net_icmpv6_rs_hdr) + llao_len,
   1ce62:	1d21      	adds	r1, r4, #4
   1ce64:	4628      	mov	r0, r5
   1ce66:	2285      	movs	r2, #133	; 0x85
	net_buf_add(frag, sizeof(struct net_icmpv6_rs_hdr));
   1ce68:	3608      	adds	r6, #8
	setup_headers(pkt, sizeof(struct net_icmpv6_rs_hdr) + llao_len,
   1ce6a:	f7fe fadb 	bl	1b424 <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_rs_hdr));
   1ce6e:	2104      	movs	r1, #4
   1ce70:	4630      	mov	r0, r6
   1ce72:	f7fa feab 	bl	17bcc <net_buf_simple_add>
	if (!unspec_src) {
   1ce76:	b97f      	cbnz	r7, 1ce98 <net_ipv6_send_rs+0x128>
		net_buf_add(frag, llao_len);
   1ce78:	4621      	mov	r1, r4
   1ce7a:	4630      	mov	r0, r6
   1ce7c:	f7fa fea6 	bl	17bcc <net_buf_simple_add>
			 (u8_t *)net_pkt_icmp_data(pkt) +
   1ce80:	4628      	mov	r0, r5
		set_llao(&net_pkt_iface(pkt)->link_addr,
   1ce82:	696e      	ldr	r6, [r5, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   1ce84:	f7fc fdda 	bl	19a3c <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   1ce88:	3610      	adds	r6, #16
   1ce8a:	f100 0108 	add.w	r1, r0, #8
   1ce8e:	2301      	movs	r3, #1
   1ce90:	4622      	mov	r2, r4
   1ce92:	4630      	mov	r0, r6
   1ce94:	f7fe faf6 	bl	1b484 <set_llao>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1ce98:	68a9      	ldr	r1, [r5, #8]
   1ce9a:	4628      	mov	r0, r5
   1ce9c:	f7fd fd34 	bl	1a908 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   1cea0:	4628      	mov	r0, r5
   1cea2:	f7fb fad9 	bl	18458 <net_send_data>
   1cea6:	2800      	cmp	r0, #0
   1cea8:	da0a      	bge.n	1cec0 <net_ipv6_send_rs+0x150>
	net_pkt_unref(pkt);
   1ceaa:	4628      	mov	r0, r5
   1ceac:	f7fc fb8d 	bl	195ca <net_pkt_unref>
	return -EINVAL;
   1ceb0:	f06f 0015 	mvn.w	r0, #21
}
   1ceb4:	b005      	add	sp, #20
   1ceb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return 0;
   1ceb8:	2400      	movs	r4, #0
   1ceba:	e7d2      	b.n	1ce62 <net_ipv6_send_rs+0xf2>
		return 8;
   1cebc:	2408      	movs	r4, #8
   1cebe:	e7d0      	b.n	1ce62 <net_ipv6_send_rs+0xf2>
	return 0;
   1cec0:	2000      	movs	r0, #0
   1cec2:	e7f7      	b.n	1ceb4 <net_ipv6_send_rs+0x144>

0001cec4 <net_ipv6_start_rs>:
	return net_ipv6_send_rs(iface);
   1cec4:	f7ff bf54 	b.w	1cd70 <net_ipv6_send_rs>

0001cec8 <net_ipv6_mld_join>:
{
   1cec8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1ceca:	ab02      	add	r3, sp, #8
   1cecc:	460d      	mov	r5, r1
   1cece:	f843 0d04 	str.w	r0, [r3, #-4]!
	maddr = net_if_ipv6_maddr_lookup(addr, &iface);
   1ced2:	4628      	mov	r0, r5
   1ced4:	4619      	mov	r1, r3
   1ced6:	f7fb fe99 	bl	18c0c <net_if_ipv6_maddr_lookup>
	if (maddr && net_if_ipv6_maddr_is_joined(maddr)) {
   1ceda:	4604      	mov	r4, r0
   1cedc:	b128      	cbz	r0, 1ceea <net_ipv6_mld_join+0x22>
	return addr->is_joined;
   1cede:	7803      	ldrb	r3, [r0, #0]
   1cee0:	079b      	lsls	r3, r3, #30
   1cee2:	d508      	bpl.n	1cef6 <net_ipv6_mld_join+0x2e>
		return -EALREADY;
   1cee4:	f06f 0644 	mvn.w	r6, #68	; 0x44
   1cee8:	e01b      	b.n	1cf22 <net_ipv6_mld_join+0x5a>
		maddr = net_if_ipv6_maddr_add(iface, addr);
   1ceea:	4629      	mov	r1, r5
   1ceec:	9801      	ldr	r0, [sp, #4]
   1ceee:	f7fb fdbd 	bl	18a6c <net_if_ipv6_maddr_add>
		if (!maddr) {
   1cef2:	4604      	mov	r4, r0
   1cef4:	b1c0      	cbz	r0, 1cf28 <net_ipv6_mld_join+0x60>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_EXCLUDE);
   1cef6:	2202      	movs	r2, #2
   1cef8:	4629      	mov	r1, r5
   1cefa:	9801      	ldr	r0, [sp, #4]
   1cefc:	f7fe fd66 	bl	1b9cc <send_mldv2>
	if (ret < 0) {
   1cf00:	1e06      	subs	r6, r0, #0
   1cf02:	db0e      	blt.n	1cf22 <net_ipv6_mld_join+0x5a>
	addr->is_joined = true;
   1cf04:	7823      	ldrb	r3, [r4, #0]
	net_if_mcast_monitor(iface, addr, true);
   1cf06:	9801      	ldr	r0, [sp, #4]
   1cf08:	f043 0302 	orr.w	r3, r3, #2
   1cf0c:	7023      	strb	r3, [r4, #0]
   1cf0e:	2201      	movs	r2, #1
   1cf10:	4629      	mov	r1, r5
   1cf12:	f7fb feb9 	bl	18c88 <net_if_mcast_monitor>
   1cf16:	2300      	movs	r3, #0
   1cf18:	461a      	mov	r2, r3
   1cf1a:	9901      	ldr	r1, [sp, #4]
   1cf1c:	4804      	ldr	r0, [pc, #16]	; (1cf30 <net_ipv6_mld_join+0x68>)
   1cf1e:	f000 fa21 	bl	1d364 <net_mgmt_event_notify_with_info>
}
   1cf22:	4630      	mov	r0, r6
   1cf24:	b002      	add	sp, #8
   1cf26:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1cf28:	f06f 060b 	mvn.w	r6, #11
   1cf2c:	e7f9      	b.n	1cf22 <net_ipv6_mld_join+0x5a>
   1cf2e:	bf00      	nop
   1cf30:	f0600007 	.word	0xf0600007

0001cf34 <net_ipv6_process_pkt>:
#endif /* CONFIG_NET_ROUTE */

int real_len;
int pkt_len; 
enum net_verdict net_ipv6_process_pkt(struct net_pkt *pkt)
{
   1cf34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf38:	4604      	mov	r4, r0
   1cf3a:	6880      	ldr	r0, [r0, #8]
   1cf3c:	6885      	ldr	r5, [r0, #8]
   1cf3e:	b087      	sub	sp, #28
	return net_buf_frags_len(pkt->frags);
   1cf40:	f7fe f9fe 	bl	1b340 <net_buf_frags_len>
	struct net_ipv6_hdr *hdr = NET_IPV6_HDR(pkt);
	real_len = net_pkt_get_len(pkt);
	pkt_len = (hdr->len[0] << 8) + hdr->len[1] + sizeof(*hdr);
   1cf44:	7929      	ldrb	r1, [r5, #4]
   1cf46:	796b      	ldrb	r3, [r5, #5]
	real_len = net_pkt_get_len(pkt);
   1cf48:	4aa2      	ldr	r2, [pc, #648]	; (1d1d4 <net_ipv6_process_pkt+0x2a0>)
	pkt_len = (hdr->len[0] << 8) + hdr->len[1] + sizeof(*hdr);
   1cf4a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   1cf4e:	3328      	adds	r3, #40	; 0x28
   1cf50:	49a1      	ldr	r1, [pc, #644]	; (1d1d8 <net_ipv6_process_pkt+0x2a4>)
	real_len = net_pkt_get_len(pkt);
   1cf52:	6010      	str	r0, [r2, #0]
	u8_t next, next_hdr, length;
	u8_t first_option;
	u16_t offset, total_len = 0;
	u8_t ext_bitmap;

	if (real_len != pkt_len) {
   1cf54:	4298      	cmp	r0, r3
	pkt_len = (hdr->len[0] << 8) + hdr->len[1] + sizeof(*hdr);
   1cf56:	600b      	str	r3, [r1, #0]
   1cf58:	4692      	mov	sl, r2
	if (real_len != pkt_len) {
   1cf5a:	d001      	beq.n	1cf60 <net_ipv6_process_pkt+0x2c>
		return NET_DROP;
#endif
	}

drop:
	return NET_DROP;
   1cf5c:	2002      	movs	r0, #2
   1cf5e:	e064      	b.n	1d02a <net_ipv6_process_pkt+0xf6>
	if (net_is_ipv6_addr_mcast(&hdr->src)) {
   1cf60:	7a2b      	ldrb	r3, [r5, #8]
   1cf62:	2bff      	cmp	r3, #255	; 0xff
   1cf64:	d0fa      	beq.n	1cf5c <net_ipv6_process_pkt+0x28>
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   1cf66:	f105 0618 	add.w	r6, r5, #24
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   1cf6a:	2100      	movs	r1, #0
   1cf6c:	4630      	mov	r0, r6
   1cf6e:	f7fb fc01 	bl	18774 <net_if_ipv6_addr_lookup>
   1cf72:	4601      	mov	r1, r0
   1cf74:	bb08      	cbnz	r0, 1cfba <net_ipv6_process_pkt+0x86>
	return net_if_ipv6_maddr_lookup(maddr, NULL) != NULL;
   1cf76:	4630      	mov	r0, r6
   1cf78:	f7fb fe48 	bl	18c0c <net_if_ipv6_maddr_lookup>
   1cf7c:	b9e8      	cbnz	r0, 1cfba <net_ipv6_process_pkt+0x86>
	    !net_is_my_ipv6_maddr(&hdr->dst) &&
   1cf7e:	7e2b      	ldrb	r3, [r5, #24]
   1cf80:	2bff      	cmp	r3, #255	; 0xff
   1cf82:	d01a      	beq.n	1cfba <net_ipv6_process_pkt+0x86>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1cf84:	69ab      	ldr	r3, [r5, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1cf86:	2b00      	cmp	r3, #0
   1cf88:	f040 8108 	bne.w	1d19c <net_ipv6_process_pkt+0x268>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1cf8c:	69eb      	ldr	r3, [r5, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1cf8e:	2b00      	cmp	r3, #0
   1cf90:	f040 8104 	bne.w	1d19c <net_ipv6_process_pkt+0x268>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1cf94:	6a2b      	ldr	r3, [r5, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1cf96:	2b00      	cmp	r3, #0
   1cf98:	f040 8100 	bne.w	1d19c <net_ipv6_process_pkt+0x268>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1cf9c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 *
   1cf9e:	061a      	lsls	r2, r3, #24

   1cfa0:	0a19      	lsrs	r1, r3, #8
 * @brief Check if the IPv6 address is a multicast address.
   1cfa2:	ea42 6213 	orr.w	r2, r2, r3, lsr #24

   1cfa6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 * @brief Check if the IPv6 address is a multicast address.
   1cfaa:	021b      	lsls	r3, r3, #8
   1cfac:	430a      	orrs	r2, r1
   1cfae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1cfb2:	4313      	orrs	r3, r2
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1cfb4:	2b01      	cmp	r3, #1
   1cfb6:	f040 80f1 	bne.w	1d19c <net_ipv6_process_pkt+0x268>
	net_pkt_set_next_hdr(pkt, &hdr->nexthdr);
   1cfba:	1dab      	adds	r3, r5, #6
	pkt->next_hdr = hdr;
   1cfbc:	61e3      	str	r3, [r4, #28]
	pkt->ipv6_ext_len = len;
   1cfbe:	2700      	movs	r7, #0
	pkt->ip_hdr_len = len;
   1cfc0:	2328      	movs	r3, #40	; 0x28
	pkt->ipv6_ext_len = len;
   1cfc2:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
	pkt->ip_hdr_len = len;
   1cfc6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	next = *(net_pkt_next_hdr(pkt));
   1cfca:	f895 9006 	ldrb.w	r9, [r5, #6]
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   1cfce:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
   1cfd2:	d01f      	beq.n	1d014 <net_ipv6_process_pkt+0xe0>
   1cfd4:	f1b9 0f11 	cmp.w	r9, #17
   1cfd8:	f000 80db 	beq.w	1d192 <net_ipv6_process_pkt+0x25e>
	if (is_upper_layer_protocol_header(next)) {
   1cfdc:	f1b9 0f06 	cmp.w	r9, #6
   1cfe0:	d0bc      	beq.n	1cf5c <net_ipv6_process_pkt+0x28>
	offset = sizeof(struct net_ipv6_hdr);
   1cfe2:	f10d 0b18 	add.w	fp, sp, #24
	frag = pkt->frags;
   1cfe6:	68a0      	ldr	r0, [r4, #8]
	offset = sizeof(struct net_ipv6_hdr);
   1cfe8:	f82b 3d08 	strh.w	r3, [fp, #-8]!
	while (frag) {
   1cfec:	464e      	mov	r6, r9
	u16_t offset, total_len = 0;
   1cfee:	46b8      	mov	r8, r7
	while (frag) {
   1cff0:	b130      	cbz	r0, 1d000 <net_ipv6_process_pkt+0xcc>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   1cff2:	2e3a      	cmp	r6, #58	; 0x3a
   1cff4:	d11c      	bne.n	1d030 <net_ipv6_process_pkt+0xfc>
			net_pkt_set_ipv6_ext_len(pkt, offset -
   1cff6:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1cffa:	3b28      	subs	r3, #40	; 0x28
	pkt->ipv6_ext_len = len;
   1cffc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	if (total_len > 0) {
   1d000:	f1b8 0f00 	cmp.w	r8, #0
   1d004:	d001      	beq.n	1d00a <net_ipv6_process_pkt+0xd6>
		net_pkt_set_ipv6_ext_len(pkt, total_len);
   1d006:	f884 8039 	strb.w	r8, [r4, #57]	; 0x39
	switch (next) {
   1d00a:	2e11      	cmp	r6, #17
   1d00c:	f000 80c1 	beq.w	1d192 <net_ipv6_process_pkt+0x25e>
   1d010:	2e3a      	cmp	r6, #58	; 0x3a
   1d012:	d1a3      	bne.n	1cf5c <net_ipv6_process_pkt+0x28>
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1d014:	a905      	add	r1, sp, #20
   1d016:	4620      	mov	r0, r4
   1d018:	f7fd fcc0 	bl	1a99c <net_icmpv6_get_hdr>
	if (!icmp_hdr) {
   1d01c:	2800      	cmp	r0, #0
   1d01e:	d09d      	beq.n	1cf5c <net_ipv6_process_pkt+0x28>
	return net_icmpv6_input(pkt, icmp_hdr->type, icmp_hdr->code);
   1d020:	7842      	ldrb	r2, [r0, #1]
   1d022:	7801      	ldrb	r1, [r0, #0]
   1d024:	4620      	mov	r0, r4
   1d026:	f7fe f8c9 	bl	1b1bc <net_icmpv6_input>

	NET_DBG("Unknown next header type");
	net_stats_update_ip_errors_protoerr();

	return NET_DROP;
}
   1d02a:	b007      	add	sp, #28
   1d02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   1d030:	2e11      	cmp	r6, #17
   1d032:	d0e0      	beq.n	1cff6 <net_ipv6_process_pkt+0xc2>
		if (is_upper_layer_protocol_header(next)) {
   1d034:	2e06      	cmp	r6, #6
   1d036:	d0de      	beq.n	1cff6 <net_ipv6_process_pkt+0xc2>
	return net_frag_read(frag, offset, pos, 1, value);
   1d038:	ab03      	add	r3, sp, #12
   1d03a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1d03e:	9300      	str	r3, [sp, #0]
   1d040:	465a      	mov	r2, fp
   1d042:	2301      	movs	r3, #1
   1d044:	f7fc fc14 	bl	19870 <net_frag_read>
   1d048:	f10d 030d 	add.w	r3, sp, #13
   1d04c:	9300      	str	r3, [sp, #0]
   1d04e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1d052:	2301      	movs	r3, #1
   1d054:	465a      	mov	r2, fp
   1d056:	f7fc fc0b 	bl	19870 <net_frag_read>
		if (!frag && offset == 0xffff) {
   1d05a:	b930      	cbnz	r0, 1d06a <net_ipv6_process_pkt+0x136>
   1d05c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   1d060:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d064:	429a      	cmp	r2, r3
   1d066:	f43f af79 	beq.w	1cf5c <net_ipv6_process_pkt+0x28>
		length = length * 8 + 8;
   1d06a:	f89d 500d 	ldrb.w	r5, [sp, #13]
   1d06e:	3501      	adds	r5, #1
   1d070:	00ed      	lsls	r5, r5, #3
   1d072:	b2ed      	uxtb	r5, r5
   1d074:	f88d 500d 	strb.w	r5, [sp, #13]
		switch (next) {
   1d078:	b13e      	cbz	r6, 1d08a <net_ipv6_process_pkt+0x156>
   1d07a:	2e3b      	cmp	r6, #59	; 0x3b
   1d07c:	f43f af6e 	beq.w	1cf5c <net_ipv6_process_pkt+0x28>
			      offset - 1);
   1d080:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   1d084:	2201      	movs	r2, #1
   1d086:	3b01      	subs	r3, #1
   1d088:	e07c      	b.n	1d184 <net_ipv6_process_pkt+0x250>
			if (first_option != NET_IPV6_NEXTHDR_HBHO) {
   1d08a:	f1b9 0f00 	cmp.w	r9, #0
   1d08e:	d1f7      	bne.n	1d080 <net_ipv6_process_pkt+0x14c>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_HBHO) {
   1d090:	2f00      	cmp	r7, #0
   1d092:	d1f5      	bne.n	1d080 <net_ipv6_process_pkt+0x14c>
	if (len > total_len) {
   1d094:	f8da 3000 	ldr.w	r3, [sl]
   1d098:	42ab      	cmp	r3, r5
   1d09a:	f6ff af5f 	blt.w	1cf5c <net_ipv6_process_pkt+0x28>
   1d09e:	f10d 030e 	add.w	r3, sp, #14
   1d0a2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1d0a6:	9300      	str	r3, [sp, #0]
   1d0a8:	aa05      	add	r2, sp, #20
   1d0aa:	2301      	movs	r3, #1
   1d0ac:	f10d 070f 	add.w	r7, sp, #15
   1d0b0:	f7fc fbde 	bl	19870 <net_frag_read>
   1d0b4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1d0b8:	9700      	str	r7, [sp, #0]
   1d0ba:	2301      	movs	r3, #1
   1d0bc:	aa05      	add	r2, sp, #20
		total_len += length;
   1d0be:	b2ad      	uxth	r5, r5
   1d0c0:	f7fc fbd6 	bl	19870 <net_frag_read>
	if (!frag && loc == 0xffff) {
   1d0c4:	2800      	cmp	r0, #0
   1d0c6:	d162      	bne.n	1d18e <net_ipv6_process_pkt+0x25a>
   1d0c8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1d0cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d0d0:	429a      	cmp	r2, r3
   1d0d2:	f43f af43 	beq.w	1cf5c <net_ipv6_process_pkt+0x28>
   1d0d6:	2602      	movs	r6, #2
	if (length != len) {
   1d0d8:	42b5      	cmp	r5, r6
   1d0da:	f47f af3f 	bne.w	1cf5c <net_ipv6_process_pkt+0x28>
	*pos += length;
   1d0de:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		next = next_hdr;
   1d0e2:	f89d 600c 	ldrb.w	r6, [sp, #12]
		total_len += length;
   1d0e6:	44a8      	add	r8, r5
	*pos += length;
   1d0e8:	441d      	add	r5, r3
		total_len += length;
   1d0ea:	fa1f f888 	uxth.w	r8, r8
	*pos += length;
   1d0ee:	f8ad 5010 	strh.w	r5, [sp, #16]
			ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_HBHO;
   1d0f2:	2701      	movs	r7, #1
   1d0f4:	e77c      	b.n	1cff0 <net_ipv6_process_pkt+0xbc>
			loc--;
   1d0f6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
			length++;
   1d0fa:	3601      	adds	r6, #1
   1d0fc:	b2b6      	uxth	r6, r6
			loc--;
   1d0fe:	3b01      	subs	r3, #1
		if (length >= len) {
   1d100:	42b5      	cmp	r5, r6
			loc += opt_len;
   1d102:	f8ad 3014 	strh.w	r3, [sp, #20]
		if (length >= len) {
   1d106:	d9e7      	bls.n	1d0d8 <net_ipv6_process_pkt+0x1a4>
   1d108:	f10d 030e 	add.w	r3, sp, #14
   1d10c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1d110:	9300      	str	r3, [sp, #0]
   1d112:	aa05      	add	r2, sp, #20
   1d114:	2301      	movs	r3, #1
   1d116:	f7fc fbab 	bl	19870 <net_frag_read>
   1d11a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1d11e:	9700      	str	r7, [sp, #0]
   1d120:	2301      	movs	r3, #1
   1d122:	aa05      	add	r2, sp, #20
   1d124:	f7fc fba4 	bl	19870 <net_frag_read>
		if (!frag && loc == 0xffff) {
   1d128:	2800      	cmp	r0, #0
   1d12a:	f43f af17 	beq.w	1cf5c <net_ipv6_process_pkt+0x28>
	while (frag && (length < len)) {
   1d12e:	42b5      	cmp	r5, r6
   1d130:	d9d2      	bls.n	1d0d8 <net_ipv6_process_pkt+0x1a4>
		switch (opt_type) {
   1d132:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1d136:	2b00      	cmp	r3, #0
   1d138:	d0dd      	beq.n	1d0f6 <net_ipv6_process_pkt+0x1c2>
   1d13a:	2b01      	cmp	r3, #1
   1d13c:	d010      	beq.n	1d160 <net_ipv6_process_pkt+0x22c>
	switch (opt_type & 0xc0) {
   1d13e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d142:	2b80      	cmp	r3, #128	; 0x80
   1d144:	d01c      	beq.n	1d180 <net_ipv6_process_pkt+0x24c>
   1d146:	2bc0      	cmp	r3, #192	; 0xc0
   1d148:	d014      	beq.n	1d174 <net_ipv6_process_pkt+0x240>
   1d14a:	2b40      	cmp	r3, #64	; 0x40
   1d14c:	f43f af06 	beq.w	1cf5c <net_ipv6_process_pkt+0x28>
			length += opt_len + 2;
   1d150:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1d154:	1c9a      	adds	r2, r3, #2
   1d156:	4416      	add	r6, r2
   1d158:	b2b6      	uxth	r6, r6
			loc += opt_len;
   1d15a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1d15e:	e007      	b.n	1d170 <net_ipv6_process_pkt+0x23c>
			length += opt_len + 2;
   1d160:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1d164:	1c9a      	adds	r2, r3, #2
   1d166:	4416      	add	r6, r2
			loc += opt_len + 2;
   1d168:	f8bd 2014 	ldrh.w	r2, [sp, #20]
			length += opt_len + 2;
   1d16c:	b2b6      	uxth	r6, r6
			loc += opt_len + 2;
   1d16e:	3202      	adds	r2, #2
			loc += opt_len;
   1d170:	4413      	add	r3, r2
   1d172:	e7c5      	b.n	1d100 <net_ipv6_process_pkt+0x1cc>
	return pkt->frags->data;
   1d174:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   1d176:	689b      	ldr	r3, [r3, #8]
   1d178:	7e1b      	ldrb	r3, [r3, #24]
   1d17a:	2bff      	cmp	r3, #255	; 0xff
   1d17c:	f43f aeee 	beq.w	1cf5c <net_ipv6_process_pkt+0x28>
		net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   1d180:	4633      	mov	r3, r6
   1d182:	2202      	movs	r2, #2
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   1d184:	2104      	movs	r1, #4
   1d186:	4620      	mov	r0, r4
   1d188:	f7fd febc 	bl	1af04 <net_icmpv6_send_error>
   1d18c:	e6e6      	b.n	1cf5c <net_ipv6_process_pkt+0x28>
	if (!frag && loc == 0xffff) {
   1d18e:	2602      	movs	r6, #2
   1d190:	e7cd      	b.n	1d12e <net_ipv6_process_pkt+0x1fa>
		return net_conn_input(IPPROTO_UDP, pkt);
   1d192:	4621      	mov	r1, r4
   1d194:	2011      	movs	r0, #17
   1d196:	f000 fbd7 	bl	1d948 <net_conn_input>
   1d19a:	e746      	b.n	1d02a <net_ipv6_process_pkt+0xf6>
		found = net_route_get_info(net_pkt_iface(pkt),
   1d19c:	ab05      	add	r3, sp, #20
   1d19e:	aa04      	add	r2, sp, #16
   1d1a0:	4631      	mov	r1, r6
   1d1a2:	6960      	ldr	r0, [r4, #20]
   1d1a4:	f000 fa3d 	bl	1d622 <net_route_get_info>
	if (found) {
   1d1a8:	2800      	cmp	r0, #0
   1d1aa:	f43f aed7 	beq.w	1cf5c <net_ipv6_process_pkt+0x28>
		if (route) {
   1d1ae:	9b04      	ldr	r3, [sp, #16]
   1d1b0:	b133      	cbz	r3, 1d1c0 <net_ipv6_process_pkt+0x28c>
			net_pkt_set_iface(pkt, route->iface);
   1d1b2:	68db      	ldr	r3, [r3, #12]
	pkt->iface = iface;
   1d1b4:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1d1b6:	7d5b      	ldrb	r3, [r3, #21]
   1d1b8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1d1bc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
		ret = net_route_packet(pkt, nexthop);
   1d1c0:	9905      	ldr	r1, [sp, #20]
   1d1c2:	4620      	mov	r0, r4
   1d1c4:	f000 fa4f 	bl	1d666 <net_route_packet>
		if (ret < 0) {
   1d1c8:	2800      	cmp	r0, #0
   1d1ca:	f6ff aec7 	blt.w	1cf5c <net_ipv6_process_pkt+0x28>
			return NET_OK;
   1d1ce:	2000      	movs	r0, #0
   1d1d0:	e72b      	b.n	1d02a <net_ipv6_process_pkt+0xf6>
   1d1d2:	bf00      	nop
   1d1d4:	20004cd4 	.word	0x20004cd4
   1d1d8:	20004cd8 	.word	0x20004cd8

0001d1dc <net_ipv6_init>:

void net_ipv6_init(void)
{
   1d1dc:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_IPV6_NBR_CACHE)
	net_icmpv6_register_handler(&ns_input_handler);
   1d1de:	4807      	ldr	r0, [pc, #28]	; (1d1fc <net_ipv6_init+0x20>)
   1d1e0:	f7fd fb88 	bl	1a8f4 <net_icmpv6_register_handler>
	net_icmpv6_register_handler(&na_input_handler);
   1d1e4:	4806      	ldr	r0, [pc, #24]	; (1d200 <net_ipv6_init+0x24>)
   1d1e6:	f7fd fb85 	bl	1a8f4 <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_ND)
	net_icmpv6_register_handler(&ra_input_handler);
   1d1ea:	4806      	ldr	r0, [pc, #24]	; (1d204 <net_ipv6_init+0x28>)
   1d1ec:	f7fd fb82 	bl	1a8f4 <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_MLD)
	net_icmpv6_register_handler(&mld_query_input_handler);
   1d1f0:	4805      	ldr	r0, [pc, #20]	; (1d208 <net_ipv6_init+0x2c>)
#endif
}
   1d1f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	net_icmpv6_register_handler(&mld_query_input_handler);
   1d1f6:	f7fd bb7d 	b.w	1a8f4 <net_icmpv6_register_handler>
   1d1fa:	bf00      	nop
   1d1fc:	2000e58c 	.word	0x2000e58c
   1d200:	2000e174 	.word	0x2000e174
   1d204:	2000e598 	.word	0x2000e598
   1d208:	2000e168 	.word	0x2000e168

0001d20c <mgmt_thread>:
			  K_THREAD_STACK_SIZEOF(mgmt_stack));
#endif
}

static void mgmt_thread(void)
{
   1d20c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!events[out_event].event) {
   1d210:	f8df 9110 	ldr.w	r9, [pc, #272]	; 1d324 <mgmt_thread+0x118>
   1d214:	464f      	mov	r7, r9
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1d216:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d21a:	483e      	ldr	r0, [pc, #248]	; (1d314 <mgmt_thread+0x108>)
   1d21c:	f002 fb76 	bl	1f90c <_impl_k_sem_take>
   1d220:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d224:	483c      	ldr	r0, [pc, #240]	; (1d318 <mgmt_thread+0x10c>)
   1d226:	f002 fb71 	bl	1f90c <_impl_k_sem_take>
   1d22a:	4a3c      	ldr	r2, [pc, #240]	; (1d31c <mgmt_thread+0x110>)
   1d22c:	8815      	ldrh	r5, [r2, #0]
   1d22e:	f859 4035 	ldr.w	r4, [r9, r5, lsl #3]
   1d232:	b964      	cbnz	r4, 1d24e <mgmt_thread+0x42>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1d234:	4838      	ldr	r0, [pc, #224]	; (1d318 <mgmt_thread+0x10c>)
   1d236:	f002 fb09 	bl	1f84c <_impl_k_sem_give>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1d23a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d23e:	4621      	mov	r1, r4
   1d240:	4834      	ldr	r0, [pc, #208]	; (1d314 <mgmt_thread+0x108>)
   1d242:	f002 faf9 	bl	1f838 <_impl_k_sem_init>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1d246:	4834      	ldr	r0, [pc, #208]	; (1d318 <mgmt_thread+0x10c>)
   1d248:	f002 fb00 	bl	1f84c <_impl_k_sem_give>
				k_sem_count_get(&network_event));

			k_sem_init(&network_event, 0, UINT_MAX);
			k_sem_give(&net_mgmt_lock);

			continue;
   1d24c:	e7e3      	b.n	1d216 <mgmt_thread+0xa>
	out_event++;
   1d24e:	1c6b      	adds	r3, r5, #1
   1d250:	4e33      	ldr	r6, [pc, #204]	; (1d320 <mgmt_thread+0x114>)
   1d252:	b29b      	uxth	r3, r3
	if (out_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   1d254:	2b02      	cmp	r3, #2
   1d256:	6834      	ldr	r4, [r6, #0]
		out_event = 0;
   1d258:	bf08      	it	eq
   1d25a:	2300      	moveq	r3, #0
   1d25c:	8013      	strh	r3, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   1d25e:	b9c4      	cbnz	r4, 1d292 <mgmt_thread+0x86>
	mgmt_event->event = 0;
   1d260:	2300      	movs	r3, #0
   1d262:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
	mgmt_event->iface = NULL;
   1d266:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
   1d26a:	482b      	ldr	r0, [pc, #172]	; (1d318 <mgmt_thread+0x10c>)
   1d26c:	606b      	str	r3, [r5, #4]
   1d26e:	f002 faed 	bl	1f84c <_impl_k_sem_give>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1d272:	f002 fa6f 	bl	1f754 <_impl_k_yield>
   1d276:	e7ce      	b.n	1d216 <mgmt_thread+0xa>
		prev_node->next = node->next;
   1d278:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   1d27a:	6872      	ldr	r2, [r6, #4]
   1d27c:	4294      	cmp	r4, r2
			list->tail = prev_node;
   1d27e:	bf08      	it	eq
   1d280:	6073      	streq	r3, [r6, #4]
   1d282:	e038      	b.n	1d2f6 <mgmt_thread+0xea>
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
   1d284:	6863      	ldr	r3, [r4, #4]
   1d286:	f8db 2004 	ldr.w	r2, [fp, #4]
   1d28a:	4620      	mov	r0, r4
   1d28c:	4798      	blx	r3
			prev = &cb->node;
   1d28e:	4623      	mov	r3, r4
   1d290:	e038      	b.n	1d304 <mgmt_thread+0xf8>
	return node->next;
   1d292:	2300      	movs	r3, #0
   1d294:	f8d4 8000 	ldr.w	r8, [r4]
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
   1d298:	eb07 0bc5 	add.w	fp, r7, r5, lsl #3
	node->next = NULL;
   1d29c:	469a      	mov	sl, r3
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
   1d29e:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   1d2a2:	68a2      	ldr	r2, [r4, #8]
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
   1d2a4:	ea81 0002 	eor.w	r0, r1, r2
   1d2a8:	f010 5f40 	tst.w	r0, #805306368	; 0x30000000
   1d2ac:	d12a      	bne.n	1d304 <mgmt_thread+0xf8>
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) ==
   1d2ae:	f3c0 400a 	ubfx	r0, r0, #16, #11
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   1d2b2:	bb38      	cbnz	r0, 1d304 <mgmt_thread+0xf8>
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   1d2b4:	b288      	uxth	r0, r1
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   1d2b6:	b130      	cbz	r0, 1d2c6 <mgmt_thread+0xba>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   1d2b8:	fa1f fe82 	uxth.w	lr, r2
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   1d2bc:	f1be 0f00 	cmp.w	lr, #0
   1d2c0:	d001      	beq.n	1d2c6 <mgmt_thread+0xba>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   1d2c2:	4202      	tst	r2, r0
   1d2c4:	d01e      	beq.n	1d304 <mgmt_thread+0xf8>
		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
   1d2c6:	0112      	lsls	r2, r2, #4
   1d2c8:	d5dc      	bpl.n	1d284 <mgmt_thread+0x78>
			struct mgmt_event_wait *sync_data =
   1d2ca:	6860      	ldr	r0, [r4, #4]
			if (sync_data->iface &&
   1d2cc:	f8d0 e018 	ldr.w	lr, [r0, #24]
   1d2d0:	f1be 0f00 	cmp.w	lr, #0
   1d2d4:	d003      	beq.n	1d2de <mgmt_thread+0xd2>
   1d2d6:	f8db 2004 	ldr.w	r2, [fp, #4]
   1d2da:	4596      	cmp	lr, r2
   1d2dc:	d112      	bne.n	1d304 <mgmt_thread+0xf8>
			cb->raised_event = mgmt_event->event;
   1d2de:	60a1      	str	r1, [r4, #8]
			sync_data->iface = mgmt_event->iface;
   1d2e0:	f8db 2004 	ldr.w	r2, [fp, #4]
   1d2e4:	6182      	str	r2, [r0, #24]
   1d2e6:	6822      	ldr	r2, [r4, #0]
	if (!prev_node) {
   1d2e8:	2b00      	cmp	r3, #0
   1d2ea:	d1c5      	bne.n	1d278 <mgmt_thread+0x6c>
		if (list->tail == node) {
   1d2ec:	6871      	ldr	r1, [r6, #4]
		list->head = node->next;
   1d2ee:	6032      	str	r2, [r6, #0]
		if (list->tail == node) {
   1d2f0:	428c      	cmp	r4, r1
   1d2f2:	d100      	bne.n	1d2f6 <mgmt_thread+0xea>
			list->tail = list->head;
   1d2f4:	6072      	str	r2, [r6, #4]
	node->next = NULL;
   1d2f6:	f8c4 a000 	str.w	sl, [r4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1d2fa:	6860      	ldr	r0, [r4, #4]
   1d2fc:	9301      	str	r3, [sp, #4]
   1d2fe:	f002 faa5 	bl	1f84c <_impl_k_sem_give>
   1d302:	9b01      	ldr	r3, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   1d304:	f1b8 0f00 	cmp.w	r8, #0
   1d308:	d0aa      	beq.n	1d260 <mgmt_thread+0x54>
   1d30a:	4644      	mov	r4, r8
   1d30c:	f8d8 8000 	ldr.w	r8, [r8]
   1d310:	e7c5      	b.n	1d29e <mgmt_thread+0x92>
   1d312:	bf00      	nop
   1d314:	2000ea3c 	.word	0x2000ea3c
   1d318:	2000ea24 	.word	0x2000ea24
   1d31c:	200031d8 	.word	0x200031d8
   1d320:	20003150 	.word	0x20003150
   1d324:	20003158 	.word	0x20003158

0001d328 <net_mgmt_add_event_callback>:

	return ret;
}

void net_mgmt_add_event_callback(struct net_mgmt_event_callback *cb)
{
   1d328:	b510      	push	{r4, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1d32a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d32e:	4604      	mov	r4, r0
   1d330:	4809      	ldr	r0, [pc, #36]	; (1d358 <net_mgmt_add_event_callback+0x30>)
   1d332:	f002 faeb 	bl	1f90c <_impl_k_sem_take>
	node->next = list->head;
   1d336:	4b09      	ldr	r3, [pc, #36]	; (1d35c <net_mgmt_add_event_callback+0x34>)
   1d338:	681a      	ldr	r2, [r3, #0]
   1d33a:	6022      	str	r2, [r4, #0]
	if (!list->tail) {
   1d33c:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1d33e:	601c      	str	r4, [r3, #0]
	if (!list->tail) {
   1d340:	b902      	cbnz	r2, 1d344 <net_mgmt_add_event_callback+0x1c>
		list->tail = list->head;
   1d342:	605c      	str	r4, [r3, #4]
	global_event_mask |= event_mask;
   1d344:	4a06      	ldr	r2, [pc, #24]	; (1d360 <net_mgmt_add_event_callback+0x38>)
   1d346:	68a3      	ldr	r3, [r4, #8]
   1d348:	6811      	ldr	r1, [r2, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1d34a:	4803      	ldr	r0, [pc, #12]	; (1d358 <net_mgmt_add_event_callback+0x30>)
   1d34c:	430b      	orrs	r3, r1
	sys_slist_prepend(&event_callbacks, &cb->node);

	mgmt_add_event_mask(cb->event_mask);

	k_sem_give(&net_mgmt_lock);
}
   1d34e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	global_event_mask |= event_mask;
   1d352:	6013      	str	r3, [r2, #0]
   1d354:	f002 ba7a 	b.w	1f84c <_impl_k_sem_give>
   1d358:	2000ea24 	.word	0x2000ea24
   1d35c:	20003150 	.word	0x20003150
   1d360:	20003168 	.word	0x20003168

0001d364 <net_mgmt_event_notify_with_info>:
	k_sem_give(&net_mgmt_lock);
}

void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length)
{
   1d364:	b538      	push	{r3, r4, r5, lr}
	return ((mgmt_event & global_event_mask) == mgmt_event);
   1d366:	4b18      	ldr	r3, [pc, #96]	; (1d3c8 <net_mgmt_event_notify_with_info+0x64>)
   1d368:	681b      	ldr	r3, [r3, #0]
	if (mgmt_is_event_handled(mgmt_event)) {
   1d36a:	ea30 0303 	bics.w	r3, r0, r3
{
   1d36e:	4604      	mov	r4, r0
   1d370:	460d      	mov	r5, r1
	if (mgmt_is_event_handled(mgmt_event)) {
   1d372:	d128      	bne.n	1d3c6 <net_mgmt_event_notify_with_info+0x62>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1d374:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d378:	4814      	ldr	r0, [pc, #80]	; (1d3cc <net_mgmt_event_notify_with_info+0x68>)
   1d37a:	f002 fac7 	bl	1f90c <_impl_k_sem_take>
	events[in_event].event = mgmt_event;
   1d37e:	4a14      	ldr	r2, [pc, #80]	; (1d3d0 <net_mgmt_event_notify_with_info+0x6c>)
   1d380:	4914      	ldr	r1, [pc, #80]	; (1d3d4 <net_mgmt_event_notify_with_info+0x70>)
   1d382:	8813      	ldrh	r3, [r2, #0]
	events[in_event].iface = iface;
   1d384:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
	events[in_event].event = mgmt_event;
   1d388:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
	in_event++;
   1d38c:	3301      	adds	r3, #1
   1d38e:	b29b      	uxth	r3, r3
	if (in_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   1d390:	2b02      	cmp	r3, #2
		in_event = 0;
   1d392:	bf08      	it	eq
   1d394:	2300      	moveq	r3, #0
   1d396:	8013      	strh	r3, [r2, #0]
	events[in_event].iface = iface;
   1d398:	6045      	str	r5, [r0, #4]
	if (in_event == out_event) {
   1d39a:	8810      	ldrh	r0, [r2, #0]
   1d39c:	4a0e      	ldr	r2, [pc, #56]	; (1d3d8 <net_mgmt_event_notify_with_info+0x74>)
   1d39e:	8813      	ldrh	r3, [r2, #0]
   1d3a0:	4283      	cmp	r3, r0
   1d3a2:	d108      	bne.n	1d3b6 <net_mgmt_event_notify_with_info+0x52>
		u16_t o_idx = out_event + 1;
   1d3a4:	3301      	adds	r3, #1
   1d3a6:	b29b      	uxth	r3, r3
			o_idx = 0;
   1d3a8:	2b02      	cmp	r3, #2
   1d3aa:	bf08      	it	eq
   1d3ac:	2300      	moveq	r3, #0
		if (events[o_idx].event) {
   1d3ae:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
   1d3b2:	b101      	cbz	r1, 1d3b6 <net_mgmt_event_notify_with_info+0x52>
			out_event = o_idx;
   1d3b4:	8013      	strh	r3, [r2, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1d3b6:	4805      	ldr	r0, [pc, #20]	; (1d3cc <net_mgmt_event_notify_with_info+0x68>)
   1d3b8:	f002 fa48 	bl	1f84c <_impl_k_sem_give>
   1d3bc:	4807      	ldr	r0, [pc, #28]	; (1d3dc <net_mgmt_event_notify_with_info+0x78>)
			NET_MGMT_GET_COMMAND(mgmt_event));

		mgmt_push_event(mgmt_event, iface, info, length);
		k_sem_give(&network_event);
	}
}
   1d3be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1d3c2:	f002 ba43 	b.w	1f84c <_impl_k_sem_give>
   1d3c6:	bd38      	pop	{r3, r4, r5, pc}
   1d3c8:	20003168 	.word	0x20003168
   1d3cc:	2000ea24 	.word	0x2000ea24
   1d3d0:	2000316c 	.word	0x2000316c
   1d3d4:	20003158 	.word	0x20003158
   1d3d8:	200031d8 	.word	0x200031d8
   1d3dc:	2000ea3c 	.word	0x2000ea3c

0001d3e0 <net_mgmt_event_init>:
	list->head = NULL;
   1d3e0:	4b10      	ldr	r3, [pc, #64]	; (1d424 <net_mgmt_event_init+0x44>)
	global_event_mask = 0;

	in_event = 0;
	out_event = 0;

	memset(events, 0,
   1d3e2:	4811      	ldr	r0, [pc, #68]	; (1d428 <net_mgmt_event_init+0x48>)
{
   1d3e4:	b510      	push	{r4, lr}
   1d3e6:	2400      	movs	r4, #0
   1d3e8:	601c      	str	r4, [r3, #0]
	list->tail = NULL;
   1d3ea:	605c      	str	r4, [r3, #4]
	global_event_mask = 0;
   1d3ec:	4b0f      	ldr	r3, [pc, #60]	; (1d42c <net_mgmt_event_init+0x4c>)
   1d3ee:	601c      	str	r4, [r3, #0]
	in_event = 0;
   1d3f0:	4b0f      	ldr	r3, [pc, #60]	; (1d430 <net_mgmt_event_init+0x50>)
   1d3f2:	801c      	strh	r4, [r3, #0]
	out_event = 0;
   1d3f4:	4b0f      	ldr	r3, [pc, #60]	; (1d434 <net_mgmt_event_init+0x54>)
{
   1d3f6:	b086      	sub	sp, #24
	memset(events, 0,
   1d3f8:	4621      	mov	r1, r4
   1d3fa:	2210      	movs	r2, #16
	out_event = 0;
   1d3fc:	801c      	strh	r4, [r3, #0]
	memset(events, 0,
   1d3fe:	f7e3 faa0 	bl	942 <memset>

   1d402:	f06f 0308 	mvn.w	r3, #8
   1d406:	9303      	str	r3, [sp, #12]
   1d408:	9405      	str	r4, [sp, #20]
   1d40a:	9404      	str	r4, [sp, #16]
   1d40c:	9402      	str	r4, [sp, #8]
   1d40e:	9401      	str	r4, [sp, #4]
   1d410:	9400      	str	r4, [sp, #0]
   1d412:	4b09      	ldr	r3, [pc, #36]	; (1d438 <net_mgmt_event_init+0x58>)
   1d414:	4909      	ldr	r1, [pc, #36]	; (1d43c <net_mgmt_event_init+0x5c>)
   1d416:	480a      	ldr	r0, [pc, #40]	; (1d440 <net_mgmt_event_init+0x60>)
   1d418:	f44f 7200 	mov.w	r2, #512	; 0x200
   1d41c:	f002 fc52 	bl	1fcc4 <_impl_k_thread_create>
			K_PRIO_COOP(CONFIG_NET_MGMT_EVENT_THREAD_PRIO), 0, 0);

	NET_DBG("Net MGMT initialized: queue of %u entries, stack size of %u",
		CONFIG_NET_MGMT_EVENT_QUEUE_SIZE,
		CONFIG_NET_MGMT_EVENT_STACK_SIZE);
}
   1d420:	b006      	add	sp, #24
   1d422:	bd10      	pop	{r4, pc}
   1d424:	20003150 	.word	0x20003150
   1d428:	20003158 	.word	0x20003158
   1d42c:	20003168 	.word	0x20003168
   1d430:	2000316c 	.word	0x2000316c
   1d434:	200031d8 	.word	0x200031d8
   1d438:	0001d20d 	.word	0x0001d20d
   1d43c:	2000c8e8 	.word	0x2000c8e8
   1d440:	20003170 	.word	0x20003170

0001d444 <sys_slist_find_and_remove.constprop.6>:
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
   1d444:	b510      	push	{r4, lr}
   1d446:	4a0e      	ldr	r2, [pc, #56]	; (1d480 <sys_slist_find_and_remove.constprop.6+0x3c>)
   1d448:	6813      	ldr	r3, [r2, #0]
	sys_snode_t *prev = NULL;
   1d44a:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1d44c:	b90b      	cbnz	r3, 1d452 <sys_slist_find_and_remove.constprop.6+0xe>
		}

		prev = test;
	}

	return false;
   1d44e:	4618      	mov	r0, r3
}
   1d450:	bd10      	pop	{r4, pc}
		if (test == node) {
   1d452:	4283      	cmp	r3, r0
   1d454:	681c      	ldr	r4, [r3, #0]
   1d456:	d10f      	bne.n	1d478 <sys_slist_find_and_remove.constprop.6+0x34>
	if (!prev_node) {
   1d458:	b941      	cbnz	r1, 1d46c <sys_slist_find_and_remove.constprop.6+0x28>
		if (list->tail == node) {
   1d45a:	6851      	ldr	r1, [r2, #4]
		list->head = node->next;
   1d45c:	6014      	str	r4, [r2, #0]
		if (list->tail == node) {
   1d45e:	428b      	cmp	r3, r1
   1d460:	d100      	bne.n	1d464 <sys_slist_find_and_remove.constprop.6+0x20>
			list->tail = list->head;
   1d462:	6054      	str	r4, [r2, #4]
	node->next = NULL;
   1d464:	2200      	movs	r2, #0
   1d466:	601a      	str	r2, [r3, #0]
			return true;
   1d468:	2001      	movs	r0, #1
   1d46a:	bd10      	pop	{r4, pc}
		if (list->tail == node) {
   1d46c:	6850      	ldr	r0, [r2, #4]
		prev_node->next = node->next;
   1d46e:	600c      	str	r4, [r1, #0]
		if (list->tail == node) {
   1d470:	4283      	cmp	r3, r0
			list->tail = prev_node;
   1d472:	bf08      	it	eq
   1d474:	6051      	streq	r1, [r2, #4]
   1d476:	e7f5      	b.n	1d464 <sys_slist_find_and_remove.constprop.6+0x20>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1d478:	4619      	mov	r1, r3
   1d47a:	4623      	mov	r3, r4
   1d47c:	e7e6      	b.n	1d44c <sys_slist_find_and_remove.constprop.6+0x8>
   1d47e:	bf00      	nop
   1d480:	200031dc 	.word	0x200031dc

0001d484 <net_route_entry_remove>:
   1d484:	4770      	bx	lr
	...

0001d488 <net_route_get_nbr>:
	NET_ASSERT(route);

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref) {
   1d488:	4909      	ldr	r1, [pc, #36]	; (1d4b0 <net_route_get_nbr+0x28>)
{
   1d48a:	b530      	push	{r4, r5, lr}
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   1d48c:	2200      	movs	r2, #0
   1d48e:	2438      	movs	r4, #56	; 0x38
   1d490:	fb04 f302 	mul.w	r3, r4, r2
		if (!nbr->ref) {
   1d494:	5c5d      	ldrb	r5, [r3, r1]
   1d496:	b11d      	cbz	r5, 1d4a0 <net_route_get_nbr+0x18>
   1d498:	440b      	add	r3, r1
			continue;
		}

		if (nbr->data == (u8_t *)route) {
   1d49a:	68dd      	ldr	r5, [r3, #12]
   1d49c:	4285      	cmp	r5, r0
   1d49e:	d004      	beq.n	1d4aa <net_route_get_nbr+0x22>
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   1d4a0:	3201      	adds	r2, #1
   1d4a2:	2a08      	cmp	r2, #8
   1d4a4:	d1f4      	bne.n	1d490 <net_route_get_nbr+0x8>

			return nbr;
		}
	}

	return NULL;
   1d4a6:	2000      	movs	r0, #0
   1d4a8:	bd30      	pop	{r4, r5, pc}
   1d4aa:	4618      	mov	r0, r3
}
   1d4ac:	bd30      	pop	{r4, r5, pc}
   1d4ae:	bf00      	nop
   1d4b0:	2000e5a4 	.word	0x2000e5a4

0001d4b4 <net_route_lookup>:
	sys_slist_prepend(&routes, &route->node);
}

struct net_route_entry *net_route_lookup(struct net_if *iface,
					 struct in6_addr *dst)
{
   1d4b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (route->prefix_len >= longest_match &&
		    net_is_ipv6_prefix((u8_t *)dst,
				       (u8_t *)&route->addr,
				       route->prefix_len)) {
			found = route;
			longest_match = route->prefix_len;
   1d4b8:	2500      	movs	r5, #0
		if (!nbr->ref) {
   1d4ba:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1d564 <net_route_lookup+0xb0>
{
   1d4be:	9000      	str	r0, [sp, #0]
   1d4c0:	460b      	mov	r3, r1
	u8_t longest_match = 0;
   1d4c2:	46a8      	mov	r8, r5
	struct net_route_entry *route, *found = NULL;
   1d4c4:	462e      	mov	r6, r5
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   1d4c6:	f018 0f80 	tst.w	r8, #128	; 0x80
   1d4ca:	d13a      	bne.n	1d542 <net_route_lookup+0x8e>
		if (!nbr->ref) {
   1d4cc:	f815 2009 	ldrb.w	r2, [r5, r9]
   1d4d0:	b39a      	cbz	r2, 1d53a <net_route_lookup+0x86>
		if (iface && nbr->iface != iface) {
   1d4d2:	9a00      	ldr	r2, [sp, #0]
   1d4d4:	b12a      	cbz	r2, 1d4e2 <net_route_lookup+0x2e>
   1d4d6:	eb09 0205 	add.w	r2, r9, r5
   1d4da:	9900      	ldr	r1, [sp, #0]
   1d4dc:	6892      	ldr	r2, [r2, #8]
   1d4de:	4291      	cmp	r1, r2
   1d4e0:	d12b      	bne.n	1d53a <net_route_lookup+0x86>
   1d4e2:	eb09 0205 	add.w	r2, r9, r5
   1d4e6:	68d7      	ldr	r7, [r2, #12]
		if (route->prefix_len >= longest_match &&
   1d4e8:	f897 4020 	ldrb.w	r4, [r7, #32]
   1d4ec:	4544      	cmp	r4, r8
   1d4ee:	d324      	bcc.n	1d53a <net_route_lookup+0x86>
	if (length > 128) {
   1d4f0:	2c80      	cmp	r4, #128	; 0x80
   1d4f2:	d822      	bhi.n	1d53a <net_route_lookup+0x86>
				       (u8_t *)&route->addr,
   1d4f4:	f107 0b10 	add.w	fp, r7, #16
	if (memcmp(addr1, addr2, bytes)) {
   1d4f8:	ea4f 0ad4 	mov.w	sl, r4, lsr #3
   1d4fc:	4618      	mov	r0, r3
   1d4fe:	4652      	mov	r2, sl
   1d500:	4659      	mov	r1, fp
   1d502:	9301      	str	r3, [sp, #4]
   1d504:	f7e3 f9c4 	bl	890 <memcmp>
   1d508:	9b01      	ldr	r3, [sp, #4]
   1d50a:	b9b0      	cbnz	r0, 1d53a <net_route_lookup+0x86>
	u8_t bits = 128 - length;
   1d50c:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	if (!remain) {
   1d510:	f014 0407 	ands.w	r4, r4, #7
   1d514:	d00e      	beq.n	1d534 <net_route_lookup+0x80>
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1d516:	f81b 200a 	ldrb.w	r2, [fp, sl]
   1d51a:	f813 100a 	ldrb.w	r1, [r3, sl]
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1d51e:	20ff      	movs	r0, #255	; 0xff
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1d520:	4051      	eors	r1, r2
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1d522:	f1c4 0208 	rsb	r2, r4, #8
   1d526:	fa00 f202 	lsl.w	r2, r0, r2
   1d52a:	4042      	eors	r2, r0
   1d52c:	fa02 f404 	lsl.w	r4, r2, r4
		if (route->prefix_len >= longest_match &&
   1d530:	4221      	tst	r1, r4
   1d532:	d102      	bne.n	1d53a <net_route_lookup+0x86>
			longest_match = route->prefix_len;
   1d534:	f897 8020 	ldrb.w	r8, [r7, #32]
   1d538:	463e      	mov	r6, r7
   1d53a:	3538      	adds	r5, #56	; 0x38
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   1d53c:	f5b5 7fe0 	cmp.w	r5, #448	; 0x1c0
   1d540:	d1c1      	bne.n	1d4c6 <net_route_lookup+0x12>
		}
	}

	if (found) {
   1d542:	b14e      	cbz	r6, 1d558 <net_route_lookup+0xa4>
	sys_slist_find_and_remove(&routes, &route->node);
   1d544:	4630      	mov	r0, r6
   1d546:	f7ff ff7d 	bl	1d444 <sys_slist_find_and_remove.constprop.6>
	node->next = list->head;
   1d54a:	4b05      	ldr	r3, [pc, #20]	; (1d560 <net_route_lookup+0xac>)
   1d54c:	681a      	ldr	r2, [r3, #0]
   1d54e:	6032      	str	r2, [r6, #0]
	if (!list->tail) {
   1d550:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1d552:	601e      	str	r6, [r3, #0]
	if (!list->tail) {
   1d554:	b902      	cbnz	r2, 1d558 <net_route_lookup+0xa4>
		list->tail = list->head;
   1d556:	605e      	str	r6, [r3, #4]

		update_route_access(found);
	}

	return found;
}
   1d558:	4630      	mov	r0, r6
   1d55a:	b003      	add	sp, #12
   1d55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d560:	200031dc 	.word	0x200031dc
   1d564:	2000e5a4 	.word	0x2000e5a4

0001d568 <net_route_del>:

	return route;
}

int net_route_del(struct net_route_entry *route)
{
   1d568:	b538      	push	{r3, r4, r5, lr}
	struct net_route_nexthop *nexthop_route;
#if defined(CONFIG_NET_MGMT_EVENT_INFO)
       struct net_event_ipv6_route info;
#endif

	if (!route) {
   1d56a:	4604      	mov	r4, r0
   1d56c:	b1d0      	cbz	r0, 1d5a4 <net_route_del+0x3c>
   1d56e:	2300      	movs	r3, #0
   1d570:	68c1      	ldr	r1, [r0, #12]
   1d572:	480f      	ldr	r0, [pc, #60]	; (1d5b0 <net_route_del+0x48>)
   1d574:	461a      	mov	r2, r3
   1d576:	f7ff fef5 	bl	1d364 <net_mgmt_event_notify_with_info>
					sizeof(struct net_event_ipv6_route));
#else
	net_mgmt_event_notify(NET_EVENT_IPV6_ROUTE_DEL, route->iface);
#endif

	sys_slist_find_and_remove(&routes, &route->node);
   1d57a:	4620      	mov	r0, r4
   1d57c:	f7ff ff62 	bl	1d444 <sys_slist_find_and_remove.constprop.6>

	nbr = net_route_get_nbr(route);
   1d580:	4620      	mov	r0, r4
   1d582:	f7ff ff81 	bl	1d488 <net_route_get_nbr>
	if (!nbr) {
   1d586:	4605      	mov	r5, r0
   1d588:	b178      	cbz	r0, 1d5aa <net_route_del+0x42>
   1d58a:	6864      	ldr	r4, [r4, #4]
		return -ENOENT;
	}

	net_route_info("Deleted", route, &route->addr);

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   1d58c:	b924      	cbnz	r4, 1d598 <net_route_del+0x30>
	net_nbr_unref(nbr);
   1d58e:	4628      	mov	r0, r5
   1d590:	f7fd fe32 	bl	1b1f8 <net_nbr_unref>
		nbr_nexthop_put(nexthop_route->nbr);
	}

	nbr_free(nbr);

	return 0;
   1d594:	2000      	movs	r0, #0
   1d596:	bd38      	pop	{r3, r4, r5, pc}
		if (!nexthop_route->nbr) {
   1d598:	6860      	ldr	r0, [r4, #4]
   1d59a:	b108      	cbz	r0, 1d5a0 <net_route_del+0x38>
	net_nbr_unref(nbr);
   1d59c:	f7fd fe2c 	bl	1b1f8 <net_nbr_unref>
	return node->next;
   1d5a0:	6824      	ldr	r4, [r4, #0]
   1d5a2:	e7f3      	b.n	1d58c <net_route_del+0x24>
		return -EINVAL;
   1d5a4:	f06f 0015 	mvn.w	r0, #21
   1d5a8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOENT;
   1d5aa:	f06f 0001 	mvn.w	r0, #1
}
   1d5ae:	bd38      	pop	{r3, r4, r5, pc}
   1d5b0:	f060000c 	.word	0xf060000c

0001d5b4 <net_route_del_by_nexthop>:

int net_route_del_by_nexthop(struct net_if *iface, struct in6_addr *nexthop)
{
   1d5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i, ret;

	NET_ASSERT(iface);
	NET_ASSERT(nexthop);

	nbr_nexthop = net_ipv6_nbr_lookup(iface, nexthop);
   1d5b6:	f7fe fb06 	bl	1bbc6 <net_ipv6_nbr_lookup>
   1d5ba:	2400      	movs	r4, #0
   1d5bc:	4607      	mov	r7, r0
	int count = 0, status = 0;
   1d5be:	4626      	mov	r6, r4
   1d5c0:	4625      	mov	r5, r4
   1d5c2:	4b0e      	ldr	r3, [pc, #56]	; (1d5fc <net_route_del_by_nexthop+0x48>)
   1d5c4:	4423      	add	r3, r4
   1d5c6:	68d8      	ldr	r0, [r3, #12]

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
		struct net_nbr *nbr = get_nbr(i);
		struct net_route_entry *route = net_route_data(nbr);

		if (!route) {
   1d5c8:	b140      	cbz	r0, 1d5dc <net_route_del_by_nexthop+0x28>
   1d5ca:	6843      	ldr	r3, [r0, #4]
			continue;
		}

		SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route,
   1d5cc:	b133      	cbz	r3, 1d5dc <net_route_del_by_nexthop+0x28>
					     node) {
			if (nexthop_route->nbr == nbr_nexthop) {
   1d5ce:	685a      	ldr	r2, [r3, #4]
   1d5d0:	4297      	cmp	r7, r2
   1d5d2:	d10c      	bne.n	1d5ee <net_route_del_by_nexthop+0x3a>
				/* This route contains this nexthop */
				ret = net_route_del(route);
   1d5d4:	f7ff ffc8 	bl	1d568 <net_route_del>
				if (!ret) {
   1d5d8:	b968      	cbnz	r0, 1d5f6 <net_route_del_by_nexthop+0x42>
					count++;
   1d5da:	3501      	adds	r5, #1
   1d5dc:	3438      	adds	r4, #56	; 0x38
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   1d5de:	f5b4 7fe0 	cmp.w	r4, #448	; 0x1c0
   1d5e2:	d1ee      	bne.n	1d5c2 <net_route_del_by_nexthop+0xe>
				break;
			}
		}
	}

	if (count) {
   1d5e4:	b90d      	cbnz	r5, 1d5ea <net_route_del_by_nexthop+0x36>
   1d5e6:	ea06 75e6 	and.w	r5, r6, r6, asr #31
	} else if (status < 0) {
		return status;
	}

	return 0;
}
   1d5ea:	4628      	mov	r0, r5
   1d5ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d5ee:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route,
   1d5f0:	2b00      	cmp	r3, #0
   1d5f2:	d1eb      	bne.n	1d5cc <net_route_del_by_nexthop+0x18>
   1d5f4:	e7f2      	b.n	1d5dc <net_route_del_by_nexthop+0x28>
   1d5f6:	4606      	mov	r6, r0
   1d5f8:	e7f0      	b.n	1d5dc <net_route_del_by_nexthop+0x28>
   1d5fa:	bf00      	nop
   1d5fc:	2000e5a4 	.word	0x2000e5a4

0001d600 <net_route_get_nexthop>:
struct in6_addr *net_route_get_nexthop(struct net_route_entry *route)
{
	struct net_route_nexthop *nexthop_route;
	struct net_ipv6_nbr_data *ipv6_nbr_data;

	if (!route) {
   1d600:	b170      	cbz	r0, 1d620 <net_route_get_nexthop+0x20>
   1d602:	6843      	ldr	r3, [r0, #4]
   1d604:	461a      	mov	r2, r3
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   1d606:	b153      	cbz	r3, 1d61e <net_route_get_nexthop+0x1e>
		struct in6_addr *addr;

		NET_ASSERT(nexthop_route->nbr->idx != NET_NBR_LLADDR_UNKNOWN);

		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   1d608:	685b      	ldr	r3, [r3, #4]
   1d60a:	7859      	ldrb	r1, [r3, #1]
   1d60c:	29ff      	cmp	r1, #255	; 0xff
   1d60e:	d003      	beq.n	1d618 <net_route_get_nexthop+0x18>
   1d610:	68d8      	ldr	r0, [r3, #12]
			continue;
		}

		ipv6_nbr_data = net_ipv6_nbr_data(nexthop_route->nbr);
		if (ipv6_nbr_data) {
   1d612:	b108      	cbz	r0, 1d618 <net_route_get_nexthop+0x18>
			addr = &ipv6_nbr_data->addr;
   1d614:	3004      	adds	r0, #4
			NET_ASSERT(addr);

			return addr;
   1d616:	4770      	bx	lr
   1d618:	6813      	ldr	r3, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   1d61a:	2b00      	cmp	r3, #0
   1d61c:	d1f2      	bne.n	1d604 <net_route_get_nexthop+0x4>
		return NULL;
   1d61e:	2000      	movs	r0, #0
			NET_ERR("could not get neighbor data from next hop");
		}
	}

	return NULL;
}
   1d620:	4770      	bx	lr

0001d622 <net_route_get_info>:

bool net_route_get_info(struct net_if *iface,
			struct in6_addr *dst,
			struct net_route_entry **route,
			struct in6_addr **nexthop)
{
   1d622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d624:	4607      	mov	r7, r0
   1d626:	460d      	mov	r5, r1
   1d628:	4616      	mov	r6, r2
   1d62a:	461c      	mov	r4, r3
	struct net_if_router *router;

	/* Search in neighbor table first, if not search in routing table. */
	if (net_ipv6_nbr_lookup(iface, dst)) {
   1d62c:	f7fe facb 	bl	1bbc6 <net_ipv6_nbr_lookup>
   1d630:	b120      	cbz	r0, 1d63c <net_route_get_info+0x1a>
		/* Found nexthop, no need to look into routing table. */
		*route = NULL;
   1d632:	2300      	movs	r3, #0
   1d634:	6033      	str	r3, [r6, #0]
		*nexthop = dst;
   1d636:	6025      	str	r5, [r4, #0]
			return false;
		}

		*nexthop = &router->address.in6_addr;

		return true;
   1d638:	2001      	movs	r0, #1
	}

	return false;
}
   1d63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*route = net_route_lookup(iface, dst);
   1d63c:	4629      	mov	r1, r5
   1d63e:	4638      	mov	r0, r7
   1d640:	f7ff ff38 	bl	1d4b4 <net_route_lookup>
   1d644:	6030      	str	r0, [r6, #0]
	if (*route) {
   1d646:	b130      	cbz	r0, 1d656 <net_route_get_info+0x34>
		*nexthop = net_route_get_nexthop(*route);
   1d648:	f7ff ffda 	bl	1d600 <net_route_get_nexthop>
   1d64c:	6020      	str	r0, [r4, #0]
		if (!*nexthop) {
   1d64e:	3000      	adds	r0, #0
   1d650:	bf18      	it	ne
   1d652:	2001      	movne	r0, #1
   1d654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		router = net_if_ipv6_router_find_default(NULL, dst);
   1d656:	4629      	mov	r1, r5
   1d658:	f7fb fc50 	bl	18efc <net_if_ipv6_router_find_default>
		if (!router) {
   1d65c:	2800      	cmp	r0, #0
   1d65e:	d0ec      	beq.n	1d63a <net_route_get_info+0x18>
		*nexthop = &router->address.in6_addr;
   1d660:	302c      	adds	r0, #44	; 0x2c
   1d662:	6020      	str	r0, [r4, #0]
   1d664:	e7e8      	b.n	1d638 <net_route_get_info+0x16>

0001d666 <net_route_packet>:

int net_route_packet(struct net_pkt *pkt, struct in6_addr *nexthop)
{
   1d666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d668:	4604      	mov	r4, r0
	struct net_linkaddr_storage *lladdr;
	struct net_nbr *nbr;

	nbr = net_ipv6_nbr_lookup(NULL, nexthop);
   1d66a:	2000      	movs	r0, #0
   1d66c:	f7fe faab 	bl	1bbc6 <net_ipv6_nbr_lookup>
	if (!nbr) {
   1d670:	4606      	mov	r6, r0
   1d672:	2800      	cmp	r0, #0
   1d674:	d033      	beq.n	1d6de <net_route_packet+0x78>
		NET_DBG("Cannot find %s neighbor",
			net_sprint_ipv6_addr(nexthop));
		return -ENOENT;
	}

	lladdr = net_nbr_get_lladdr(nbr->idx);
   1d676:	7840      	ldrb	r0, [r0, #1]
   1d678:	f7fd fe5a 	bl	1b330 <net_nbr_get_lladdr>
	if (!lladdr) {
   1d67c:	4605      	mov	r5, r0
   1d67e:	2800      	cmp	r0, #0
   1d680:	d030      	beq.n	1d6e4 <net_route_packet+0x7e>
		NET_DBG("Cannot find %s neighbor link layer address.",
			net_sprint_ipv6_addr(nexthop));
		return -ESRCH;
	}

	if (!net_pkt_ll_src(pkt)->addr) {
   1d682:	6a20      	ldr	r0, [r4, #32]
   1d684:	b910      	cbnz	r0, 1d68c <net_route_packet+0x26>
		NET_DBG("Link layer source address not set");
		return -EINVAL;
   1d686:	f06f 0015 	mvn.w	r0, #21
   1d68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	/* Sanitycheck: If src and dst ll addresses are going to be same,
	 * then something went wrong in route lookup.
	 */
	if (!memcmp(net_pkt_ll_src(pkt)->addr, lladdr->addr, lladdr->len)) {
   1d68c:	1caf      	adds	r7, r5, #2
   1d68e:	786a      	ldrb	r2, [r5, #1]
   1d690:	4639      	mov	r1, r7
   1d692:	f7e3 f8fd 	bl	890 <memcmp>
   1d696:	2800      	cmp	r0, #0
   1d698:	d0f5      	beq.n	1d686 <net_route_packet+0x20>
	pkt->forwarding = forward;
   1d69a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   1d69e:	f043 0304 	orr.w	r3, r3, #4
   1d6a2:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   1d6a6:	6963      	ldr	r3, [r4, #20]
	net_pkt_set_forwarding(pkt, true);

	/* Set the destination and source ll address in the packet.
	 * We set the destination address to be the nexthop recipient.
	 */
	net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   1d6a8:	691a      	ldr	r2, [r3, #16]
   1d6aa:	6222      	str	r2, [r4, #32]
	net_pkt_ll_src(pkt)->type = net_pkt_ll_if(pkt)->type;
   1d6ac:	7d5a      	ldrb	r2, [r3, #21]
   1d6ae:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   1d6b2:	7d1b      	ldrb	r3, [r3, #20]
   1d6b4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   1d6b8:	62a7      	str	r7, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->type = lladdr->type;
   1d6ba:	782b      	ldrb	r3, [r5, #0]
   1d6bc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_ll_dst(pkt)->len = lladdr->len;
   1d6c0:	786b      	ldrb	r3, [r5, #1]
   1d6c2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	net_pkt_set_iface(pkt, nbr->iface);
   1d6c6:	68b3      	ldr	r3, [r6, #8]
	pkt->iface = iface;
   1d6c8:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1d6ca:	7d5b      	ldrb	r3, [r3, #21]
   1d6cc:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1d6d0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d

	return net_send_data(pkt);
   1d6d4:	4620      	mov	r0, r4
}
   1d6d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return net_send_data(pkt);
   1d6da:	f7fa bebd 	b.w	18458 <net_send_data>
		return -ENOENT;
   1d6de:	f06f 0001 	mvn.w	r0, #1
   1d6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ESRCH;
   1d6e4:	f06f 0002 	mvn.w	r0, #2
}
   1d6e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d6ea <net_route_init>:

void net_route_init(void)
{
   1d6ea:	4770      	bx	lr

0001d6ec <net_is_ipv6_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d6ec:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d6ee:	b942      	cbnz	r2, 1d702 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d6f0:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d6f2:	b933      	cbnz	r3, 1d702 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d6f4:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d6f6:	b922      	cbnz	r2, 1d702 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1d6f8:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d6fa:	fab0 f080 	clz	r0, r0
   1d6fe:	0940      	lsrs	r0, r0, #5
   1d700:	4770      	bx	lr
   1d702:	2000      	movs	r0, #0
   1d704:	4770      	bx	lr

0001d706 <check_addr>:
}

static bool check_addr(struct net_pkt *pkt,
		       struct sockaddr *addr,
		       bool is_remote)
{
   1d706:	b538      	push	{r3, r4, r5, lr}
	return pkt->family;
   1d708:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
	if (addr->sa_family != net_pkt_family(pkt)) {
   1d70c:	880c      	ldrh	r4, [r1, #0]
   1d70e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1d712:	429c      	cmp	r4, r3
   1d714:	d117      	bne.n	1d746 <check_addr+0x40>
		return false;
	}

#if defined(CONFIG_NET_IPV6)
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   1d716:	2b0a      	cmp	r3, #10
   1d718:	d117      	bne.n	1d74a <check_addr+0x44>
   1d71a:	2c0a      	cmp	r4, #10
   1d71c:	d115      	bne.n	1d74a <check_addr+0x44>
   1d71e:	6883      	ldr	r3, [r0, #8]
		struct in6_addr *addr6;

		if (is_remote) {
			addr6 = &NET_IPV6_HDR(pkt)->src;
   1d720:	689c      	ldr	r4, [r3, #8]
		if (is_remote) {
   1d722:	b172      	cbz	r2, 1d742 <check_addr+0x3c>
			addr6 = &NET_IPV6_HDR(pkt)->src;
   1d724:	3408      	adds	r4, #8
		} else {
			addr6 = &NET_IPV6_HDR(pkt)->dst;
		}

		if (!net_is_ipv6_addr_unspecified(
			    &net_sin6(addr)->sin6_addr)) {
   1d726:	1d0d      	adds	r5, r1, #4
		if (!net_is_ipv6_addr_unspecified(
   1d728:	4628      	mov	r0, r5
   1d72a:	f7ff ffdf 	bl	1d6ec <net_is_ipv6_addr_unspecified>
   1d72e:	b968      	cbnz	r0, 1d74c <check_addr+0x46>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1d730:	2210      	movs	r2, #16
   1d732:	4621      	mov	r1, r4
   1d734:	4628      	mov	r0, r5
   1d736:	f7e3 f8ab 	bl	890 <memcmp>
			if (!net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
   1d73a:	fab0 f080 	clz	r0, r0
   1d73e:	0940      	lsrs	r0, r0, #5
   1d740:	bd38      	pop	{r3, r4, r5, pc}
			addr6 = &NET_IPV6_HDR(pkt)->dst;
   1d742:	3418      	adds	r4, #24
   1d744:	e7ef      	b.n	1d726 <check_addr+0x20>
		return false;
   1d746:	2000      	movs	r0, #0
   1d748:	bd38      	pop	{r3, r4, r5, pc}
			}
		}
	}
#endif /* CONFIG_NET_IPV4 */

	return true;
   1d74a:	2001      	movs	r0, #1
}
   1d74c:	bd38      	pop	{r3, r4, r5, pc}
	...

0001d750 <net_conn_unregister>:
{
   1d750:	b508      	push	{r3, lr}
	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
   1d752:	4b0b      	ldr	r3, [pc, #44]	; (1d780 <net_conn_unregister+0x30>)
   1d754:	4298      	cmp	r0, r3
   1d756:	d30c      	bcc.n	1d772 <net_conn_unregister+0x22>
   1d758:	33f0      	adds	r3, #240	; 0xf0
   1d75a:	4298      	cmp	r0, r3
   1d75c:	d809      	bhi.n	1d772 <net_conn_unregister+0x22>
	if (!(conn->flags & NET_CONN_IN_USE)) {
   1d75e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   1d762:	07db      	lsls	r3, r3, #31
   1d764:	d508      	bpl.n	1d778 <net_conn_unregister+0x28>
	memset(conn, 0, sizeof(*conn));
   1d766:	223c      	movs	r2, #60	; 0x3c
   1d768:	2100      	movs	r1, #0
   1d76a:	f7e3 f8ea 	bl	942 <memset>
	return 0;
   1d76e:	2000      	movs	r0, #0
   1d770:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1d772:	f06f 0015 	mvn.w	r0, #21
   1d776:	bd08      	pop	{r3, pc}
		return -ENOENT;
   1d778:	f06f 0001 	mvn.w	r0, #1
}
   1d77c:	bd08      	pop	{r3, pc}
   1d77e:	bf00      	nop
   1d780:	200031e4 	.word	0x200031e4

0001d784 <net_conn_register>:
{
   1d784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d788:	b087      	sub	sp, #28
   1d78a:	4c6d      	ldr	r4, [pc, #436]	; (1d940 <net_conn_register+0x1bc>)
   1d78c:	9301      	str	r3, [sp, #4]
   1d78e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1d792:	9302      	str	r3, [sp, #8]
   1d794:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1d798:	ba5b      	rev16	r3, r3
   1d79a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1d79e:	fa1f f983 	uxth.w	r9, r3
   1d7a2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1d7a6:	fa93 fb93 	rev16.w	fp, r3
   1d7aa:	fa1f f38b 	uxth.w	r3, fp
   1d7ae:	9304      	str	r3, [sp, #16]
					    &net_sin6(remote_addr)->sin6_addr,
   1d7b0:	1d0b      	adds	r3, r1, #4
{
   1d7b2:	4682      	mov	sl, r0
   1d7b4:	460e      	mov	r6, r1
   1d7b6:	4617      	mov	r7, r2
   1d7b8:	f104 08f0 	add.w	r8, r4, #240	; 0xf0
					    &net_sin6(local_addr)->sin6_addr,
   1d7bc:	1d15      	adds	r5, r2, #4
					    &net_sin6(remote_addr)->sin6_addr,
   1d7be:	9305      	str	r3, [sp, #20]
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   1d7c0:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
   1d7c4:	07d1      	lsls	r1, r2, #31
   1d7c6:	d413      	bmi.n	1d7f0 <net_conn_register+0x6c>
   1d7c8:	343c      	adds	r4, #60	; 0x3c
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   1d7ca:	45a0      	cmp	r8, r4
   1d7cc:	d1f8      	bne.n	1d7c0 <net_conn_register+0x3c>
   1d7ce:	4a5d      	ldr	r2, [pc, #372]	; (1d944 <net_conn_register+0x1c0>)
   1d7d0:	2400      	movs	r4, #0
   1d7d2:	233c      	movs	r3, #60	; 0x3c
   1d7d4:	fb03 f904 	mul.w	r9, r3, r4
   1d7d8:	eb02 0809 	add.w	r8, r2, r9
		if (conns[i].flags & NET_CONN_IN_USE) {
   1d7dc:	f898 1039 	ldrb.w	r1, [r8, #57]	; 0x39
   1d7e0:	07c9      	lsls	r1, r1, #31
   1d7e2:	d542      	bpl.n	1d86a <net_conn_register+0xe6>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   1d7e4:	3401      	adds	r4, #1
   1d7e6:	2c04      	cmp	r4, #4
   1d7e8:	d1f4      	bne.n	1d7d4 <net_conn_register+0x50>
	return -ENOENT;
   1d7ea:	f06f 0001 	mvn.w	r0, #1
   1d7ee:	e039      	b.n	1d864 <net_conn_register+0xe0>
		if (conns[i].proto != proto) {
   1d7f0:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
   1d7f4:	4551      	cmp	r1, sl
   1d7f6:	d1e7      	bne.n	1d7c8 <net_conn_register+0x44>
   1d7f8:	f002 0202 	and.w	r2, r2, #2
		if (remote_addr) {
   1d7fc:	b1ae      	cbz	r6, 1d82a <net_conn_register+0xa6>
			if (!(conns[i].flags & NET_CONN_REMOTE_ADDR_SET)) {
   1d7fe:	2a00      	cmp	r2, #0
   1d800:	d0e2      	beq.n	1d7c8 <net_conn_register+0x44>
			if (remote_addr->sa_family == AF_INET6 &&
   1d802:	8832      	ldrh	r2, [r6, #0]
   1d804:	2a0a      	cmp	r2, #10
   1d806:	d1df      	bne.n	1d7c8 <net_conn_register+0x44>
   1d808:	f834 2c04 	ldrh.w	r2, [r4, #-4]
   1d80c:	2a0a      	cmp	r2, #10
   1d80e:	d1db      	bne.n	1d7c8 <net_conn_register+0x44>
   1d810:	2210      	movs	r2, #16
   1d812:	4621      	mov	r1, r4
   1d814:	9805      	ldr	r0, [sp, #20]
   1d816:	f7e3 f83b 	bl	890 <memcmp>
				if (!net_ipv6_addr_cmp(
   1d81a:	2800      	cmp	r0, #0
   1d81c:	d1d4      	bne.n	1d7c8 <net_conn_register+0x44>
   1d81e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
		if (local_addr) {
   1d822:	b92f      	cbnz	r7, 1d830 <net_conn_register+0xac>
			if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   1d824:	0750      	lsls	r0, r2, #29
   1d826:	d4cf      	bmi.n	1d7c8 <net_conn_register+0x44>
   1d828:	e012      	b.n	1d850 <net_conn_register+0xcc>
			if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   1d82a:	2a00      	cmp	r2, #0
   1d82c:	d1cc      	bne.n	1d7c8 <net_conn_register+0x44>
   1d82e:	e7f6      	b.n	1d81e <net_conn_register+0x9a>
			if (!(conns[i].flags & NET_CONN_LOCAL_ADDR_SET)) {
   1d830:	0753      	lsls	r3, r2, #29
   1d832:	d5c9      	bpl.n	1d7c8 <net_conn_register+0x44>
			if (local_addr->sa_family == AF_INET6 &&
   1d834:	883a      	ldrh	r2, [r7, #0]
   1d836:	2a0a      	cmp	r2, #10
   1d838:	d1c6      	bne.n	1d7c8 <net_conn_register+0x44>
   1d83a:	8aa2      	ldrh	r2, [r4, #20]
   1d83c:	2a0a      	cmp	r2, #10
   1d83e:	d1c3      	bne.n	1d7c8 <net_conn_register+0x44>
   1d840:	2210      	movs	r2, #16
   1d842:	f104 0118 	add.w	r1, r4, #24
   1d846:	4628      	mov	r0, r5
   1d848:	f7e3 f822 	bl	890 <memcmp>
				if (!net_ipv6_addr_cmp(
   1d84c:	2800      	cmp	r0, #0
   1d84e:	d1bb      	bne.n	1d7c8 <net_conn_register+0x44>
		if (net_sin(&conns[i].remote_addr)->sin_port !=
   1d850:	f834 2c02 	ldrh.w	r2, [r4, #-2]
   1d854:	454a      	cmp	r2, r9
   1d856:	d1b7      	bne.n	1d7c8 <net_conn_register+0x44>
		if (net_sin(&conns[i].local_addr)->sin_port !=
   1d858:	8ae2      	ldrh	r2, [r4, #22]
   1d85a:	9b04      	ldr	r3, [sp, #16]
   1d85c:	429a      	cmp	r2, r3
   1d85e:	d1b3      	bne.n	1d7c8 <net_conn_register+0x44>
		return -EALREADY;
   1d860:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   1d864:	b007      	add	sp, #28
   1d866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (remote_addr) {
   1d86a:	2e00      	cmp	r6, #0
   1d86c:	d061      	beq.n	1d932 <net_conn_register+0x1ae>
			if (remote_addr->sa_family == AF_INET6) {
   1d86e:	8833      	ldrh	r3, [r6, #0]
   1d870:	2b0a      	cmp	r3, #10
   1d872:	d002      	beq.n	1d87a <net_conn_register+0xf6>
				return -EINVAL;
   1d874:	f06f 0015 	mvn.w	r0, #21
   1d878:	e7f4      	b.n	1d864 <net_conn_register+0xe0>
				memcpy(&conns[i].remote_addr, remote_addr,
   1d87a:	2218      	movs	r2, #24
   1d87c:	4631      	mov	r1, r6
   1d87e:	4640      	mov	r0, r8
   1d880:	f7e3 f833 	bl	8ea <memcpy>
				if (net_is_ipv6_addr_unspecified(
   1d884:	1d30      	adds	r0, r6, #4
   1d886:	f7ff ff31 	bl	1d6ec <net_is_ipv6_addr_unspecified>
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   1d88a:	f898 3039 	ldrb.w	r3, [r8, #57]	; 0x39
					rank |= NET_RANK_REMOTE_UNSPEC_ADDR;
   1d88e:	2800      	cmp	r0, #0
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   1d890:	f043 0302 	orr.w	r3, r3, #2
					rank |= NET_RANK_REMOTE_UNSPEC_ADDR;
   1d894:	bf0c      	ite	eq
   1d896:	2520      	moveq	r5, #32
   1d898:	2508      	movne	r5, #8
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   1d89a:	f888 3039 	strb.w	r3, [r8, #57]	; 0x39
		if (local_addr) {
   1d89e:	b30f      	cbz	r7, 1d8e4 <net_conn_register+0x160>
			if (local_addr->sa_family == AF_INET6) {
   1d8a0:	883b      	ldrh	r3, [r7, #0]
   1d8a2:	2b0a      	cmp	r3, #10
   1d8a4:	d1e6      	bne.n	1d874 <net_conn_register+0xf0>
				memcpy(&conns[i].local_addr, local_addr,
   1d8a6:	4b27      	ldr	r3, [pc, #156]	; (1d944 <net_conn_register+0x1c0>)
   1d8a8:	9304      	str	r3, [sp, #16]
   1d8aa:	f109 0018 	add.w	r0, r9, #24
   1d8ae:	4418      	add	r0, r3
   1d8b0:	2218      	movs	r2, #24
   1d8b2:	4639      	mov	r1, r7
   1d8b4:	f7e3 f819 	bl	8ea <memcpy>
				if (net_is_ipv6_addr_unspecified(
   1d8b8:	1d38      	adds	r0, r7, #4
   1d8ba:	f7ff ff17 	bl	1d6ec <net_is_ipv6_addr_unspecified>
   1d8be:	9b04      	ldr	r3, [sp, #16]
   1d8c0:	2800      	cmp	r0, #0
   1d8c2:	d038      	beq.n	1d936 <net_conn_register+0x1b2>
					rank |= NET_RANK_LOCAL_UNSPEC_ADDR;
   1d8c4:	f045 0504 	orr.w	r5, r5, #4
			conns[i].flags |= NET_CONN_LOCAL_ADDR_SET;
   1d8c8:	223c      	movs	r2, #60	; 0x3c
   1d8ca:	fb02 3304 	mla	r3, r2, r4, r3
   1d8ce:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   1d8d2:	f042 0204 	orr.w	r2, r2, #4
   1d8d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (remote_addr && local_addr) {
   1d8da:	b11e      	cbz	r6, 1d8e4 <net_conn_register+0x160>
			if (remote_addr->sa_family != local_addr->sa_family) {
   1d8dc:	8832      	ldrh	r2, [r6, #0]
   1d8de:	883b      	ldrh	r3, [r7, #0]
   1d8e0:	429a      	cmp	r2, r3
   1d8e2:	d1c7      	bne.n	1d874 <net_conn_register+0xf0>
		if (remote_port) {
   1d8e4:	9b01      	ldr	r3, [sp, #4]
   1d8e6:	b12b      	cbz	r3, 1d8f4 <net_conn_register+0x170>
			net_sin(&conns[i].remote_addr)->sin_port =
   1d8e8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1d8ec:	f8a8 3002 	strh.w	r3, [r8, #2]
			rank |= NET_RANK_REMOTE_PORT;
   1d8f0:	f045 0502 	orr.w	r5, r5, #2
		if (local_port) {
   1d8f4:	9a02      	ldr	r2, [sp, #8]
   1d8f6:	4b13      	ldr	r3, [pc, #76]	; (1d944 <net_conn_register+0x1c0>)
   1d8f8:	b122      	cbz	r2, 1d904 <net_conn_register+0x180>
			net_sin(&conns[i].local_addr)->sin_port =
   1d8fa:	4499      	add	r9, r3
			rank |= NET_RANK_LOCAL_PORT;
   1d8fc:	f045 0501 	orr.w	r5, r5, #1
			net_sin(&conns[i].local_addr)->sin_port =
   1d900:	f8a9 b01a 	strh.w	fp, [r9, #26]
		conns[i].flags |= NET_CONN_IN_USE;
   1d904:	223c      	movs	r2, #60	; 0x3c
   1d906:	fb02 3404 	mla	r4, r2, r4, r3
   1d90a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conns[i].rank = rank;
   1d90e:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
		conns[i].flags |= NET_CONN_IN_USE;
   1d912:	f043 0301 	orr.w	r3, r3, #1
   1d916:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conns[i].cb = cb;
   1d91a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1d91c:	6323      	str	r3, [r4, #48]	; 0x30
		conns[i].user_data = user_data;
   1d91e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1d920:	6363      	str	r3, [r4, #52]	; 0x34
		if (handle) {
   1d922:	9b13      	ldr	r3, [sp, #76]	; 0x4c
		conns[i].proto = proto;
   1d924:	f884 a038 	strb.w	sl, [r4, #56]	; 0x38
		if (handle) {
   1d928:	b143      	cbz	r3, 1d93c <net_conn_register+0x1b8>
			*handle = (struct net_conn_handle *)&conns[i];
   1d92a:	f8c3 8000 	str.w	r8, [r3]
		return 0;
   1d92e:	2000      	movs	r0, #0
   1d930:	e798      	b.n	1d864 <net_conn_register+0xe0>
	u8_t rank = 0;
   1d932:	4635      	mov	r5, r6
   1d934:	e7b3      	b.n	1d89e <net_conn_register+0x11a>
					rank |= NET_RANK_LOCAL_SPEC_ADDR;
   1d936:	f045 0510 	orr.w	r5, r5, #16
   1d93a:	e7c5      	b.n	1d8c8 <net_conn_register+0x144>
		return 0;
   1d93c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1d93e:	e791      	b.n	1d864 <net_conn_register+0xe0>
   1d940:	200031e8 	.word	0x200031e8
   1d944:	200031e4 	.word	0x200031e4

0001d948 <net_conn_input>:
#endif /* CONFIG_NET_IPV4 */
	}
}

enum net_verdict net_conn_input(enum net_ip_protocol proto, struct net_pkt *pkt)
{
   1d948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* This is only used for getting source and destination ports.
	 * Because both TCP and UDP header have these in the same
	 * location, we can check them both using the UDP struct.
	 */
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   1d94c:	2811      	cmp	r0, #17
{
   1d94e:	b085      	sub	sp, #20
   1d950:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   1d952:	d104      	bne.n	1d95e <net_conn_input+0x16>
		struct net_udp_hdr hdr, *udp_hdr;

		ARG_UNUSED(hdr);

		udp_hdr = net_udp_get_hdr(pkt, &hdr);
   1d954:	a902      	add	r1, sp, #8
   1d956:	4620      	mov	r0, r4
   1d958:	f000 f956 	bl	1dc08 <net_udp_get_hdr>
		if (!udp_hdr) {
   1d95c:	b918      	cbnz	r0, 1d966 <net_conn_input+0x1e>
	}

drop:
	net_stats_update_per_proto_drop(proto);

	return NET_DROP;
   1d95e:	2002      	movs	r0, #2
}
   1d960:	b005      	add	sp, #20
   1d962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d966:	4d39      	ldr	r5, [pc, #228]	; (1da4c <net_conn_input+0x104>)
		chksum = udp_hdr->chksum;
   1d968:	88c3      	ldrh	r3, [r0, #6]
		src_port = udp_hdr->src_port;
   1d96a:	f8b0 9000 	ldrh.w	r9, [r0]
		dst_port = udp_hdr->dst_port;
   1d96e:	f8b0 a002 	ldrh.w	sl, [r0, #2]
		chksum = udp_hdr->chksum;
   1d972:	9301      	str	r3, [sp, #4]
	s16_t best_rank = -1;
   1d974:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	int i, best_match = -1;
   1d978:	4646      	mov	r6, r8
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   1d97a:	2700      	movs	r7, #0
		    net_sin(&conns[best_match].remote_addr)->sin_port) {
   1d97c:	f1a5 0b18 	sub.w	fp, r5, #24
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   1d980:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   1d984:	07d3      	lsls	r3, r2, #31
   1d986:	d52a      	bpl.n	1d9de <net_conn_input+0x96>
		if (conns[i].proto != proto) {
   1d988:	f895 1020 	ldrb.w	r1, [r5, #32]
   1d98c:	2911      	cmp	r1, #17
   1d98e:	d126      	bne.n	1d9de <net_conn_input+0x96>
		if (net_sin(&conns[i].remote_addr)->sin_port) {
   1d990:	f835 0c16 	ldrh.w	r0, [r5, #-22]
   1d994:	f1a5 0118 	sub.w	r1, r5, #24
   1d998:	b108      	cbz	r0, 1d99e <net_conn_input+0x56>
			if (net_sin(&conns[i].remote_addr)->sin_port !=
   1d99a:	4581      	cmp	r9, r0
   1d99c:	d11f      	bne.n	1d9de <net_conn_input+0x96>
		if (net_sin(&conns[i].local_addr)->sin_port) {
   1d99e:	8868      	ldrh	r0, [r5, #2]
   1d9a0:	b108      	cbz	r0, 1d9a6 <net_conn_input+0x5e>
			if (net_sin(&conns[i].local_addr)->sin_port !=
   1d9a2:	4582      	cmp	sl, r0
   1d9a4:	d11b      	bne.n	1d9de <net_conn_input+0x96>
		if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   1d9a6:	0790      	lsls	r0, r2, #30
   1d9a8:	d413      	bmi.n	1d9d2 <net_conn_input+0x8a>
		if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   1d9aa:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   1d9ae:	0751      	lsls	r1, r2, #29
   1d9b0:	d505      	bpl.n	1d9be <net_conn_input+0x76>
			if (!check_addr(pkt, &conns[i].local_addr, false)) {
   1d9b2:	2200      	movs	r2, #0
   1d9b4:	4629      	mov	r1, r5
   1d9b6:	4620      	mov	r0, r4
   1d9b8:	f7ff fea5 	bl	1d706 <check_addr>
   1d9bc:	b178      	cbz	r0, 1d9de <net_conn_input+0x96>
		if (best_match >= 0 &&
   1d9be:	1c72      	adds	r2, r6, #1
   1d9c0:	d12b      	bne.n	1da1a <net_conn_input+0xd2>
		if (best_rank < conns[i].rank) {
   1d9c2:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
   1d9c6:	4590      	cmp	r8, r2
			best_rank = conns[i].rank;
   1d9c8:	bfbc      	itt	lt
   1d9ca:	fa0f f882 	sxthlt.w	r8, r2
   1d9ce:	463e      	movlt	r6, r7
   1d9d0:	e005      	b.n	1d9de <net_conn_input+0x96>
			if (!check_addr(pkt, &conns[i].remote_addr, true)) {
   1d9d2:	2201      	movs	r2, #1
   1d9d4:	4620      	mov	r0, r4
   1d9d6:	f7ff fe96 	bl	1d706 <check_addr>
   1d9da:	2800      	cmp	r0, #0
   1d9dc:	d1e5      	bne.n	1d9aa <net_conn_input+0x62>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   1d9de:	3701      	adds	r7, #1
   1d9e0:	2f04      	cmp	r7, #4
   1d9e2:	f105 053c 	add.w	r5, r5, #60	; 0x3c
   1d9e6:	d1cb      	bne.n	1d980 <net_conn_input+0x38>
	if (best_match >= 0) {
   1d9e8:	1c73      	adds	r3, r6, #1
   1d9ea:	d01d      	beq.n	1da28 <net_conn_input+0xe0>
			net_udp_set_chksum(pkt, pkt->frags);
   1d9ec:	68a1      	ldr	r1, [r4, #8]
   1d9ee:	4620      	mov	r0, r4
   1d9f0:	f000 f8a3 	bl	1db3a <net_udp_set_chksum>
			chksum_calc = net_udp_get_chksum(pkt, pkt->frags);
   1d9f4:	68a1      	ldr	r1, [r4, #8]
   1d9f6:	4620      	mov	r0, r4
   1d9f8:	f000 f8e7 	bl	1dbca <net_udp_get_chksum>
			if (chksum != chksum_calc) {
   1d9fc:	9b01      	ldr	r3, [sp, #4]
   1d9fe:	4283      	cmp	r3, r0
   1da00:	d1ad      	bne.n	1d95e <net_conn_input+0x16>
		if (conns[best_match].cb(&conns[best_match], pkt,
   1da02:	4813      	ldr	r0, [pc, #76]	; (1da50 <net_conn_input+0x108>)
   1da04:	233c      	movs	r3, #60	; 0x3c
   1da06:	fb03 0006 	mla	r0, r3, r6, r0
   1da0a:	4621      	mov	r1, r4
   1da0c:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1da0e:	6b42      	ldr	r2, [r0, #52]	; 0x34
   1da10:	4798      	blx	r3
   1da12:	2802      	cmp	r0, #2
   1da14:	d0a3      	beq.n	1d95e <net_conn_input+0x16>
		return NET_OK;
   1da16:	2000      	movs	r0, #0
   1da18:	e7a2      	b.n	1d960 <net_conn_input+0x18>
		    net_sin(&conns[best_match].remote_addr)->sin_port) {
   1da1a:	223c      	movs	r2, #60	; 0x3c
   1da1c:	fb02 b206 	mla	r2, r2, r6, fp
		if (best_match >= 0 &&
   1da20:	8852      	ldrh	r2, [r2, #2]
   1da22:	2a00      	cmp	r2, #0
   1da24:	d1db      	bne.n	1d9de <net_conn_input+0x96>
   1da26:	e7cc      	b.n	1d9c2 <net_conn_input+0x7a>
   1da28:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
	if (net_pkt_family(pkt) == AF_INET6 &&
   1da2c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1da30:	2b0a      	cmp	r3, #10
   1da32:	d194      	bne.n	1d95e <net_conn_input+0x16>
	return pkt->frags->data;
   1da34:	68a3      	ldr	r3, [r4, #8]
   1da36:	689b      	ldr	r3, [r3, #8]
   1da38:	7e1b      	ldrb	r3, [r3, #24]
   1da3a:	2bff      	cmp	r3, #255	; 0xff
   1da3c:	d08f      	beq.n	1d95e <net_conn_input+0x16>
		net_icmpv6_send_error(pkt, NET_ICMPV6_DST_UNREACH,
   1da3e:	2300      	movs	r3, #0
   1da40:	463a      	mov	r2, r7
   1da42:	2101      	movs	r1, #1
   1da44:	4620      	mov	r0, r4
   1da46:	f7fd fa5d 	bl	1af04 <net_icmpv6_send_error>
   1da4a:	e788      	b.n	1d95e <net_conn_input+0x16>
   1da4c:	200031fc 	.word	0x200031fc
   1da50:	200031e4 	.word	0x200031e4

0001da54 <net_conn_init>:
		cb(&conns[i], user_data);
	}
}

void net_conn_init(void)
{
   1da54:	4770      	bx	lr

0001da56 <net_udp_header_fits>:
{
   1da56:	b510      	push	{r4, lr}
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1da58:	2208      	movs	r2, #8
{
   1da5a:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1da5c:	f7fc f95f 	bl	19d1e <net_header_fits>
   1da60:	2800      	cmp	r0, #0
}
   1da62:	bf14      	ite	ne
   1da64:	4620      	movne	r0, r4
   1da66:	2000      	moveq	r0, #0
   1da68:	bd10      	pop	{r4, pc}

0001da6a <net_udp_insert_raw>:

struct net_pkt *net_udp_insert_raw(struct net_pkt *pkt,
				   u16_t offset,
				   u16_t src_port,
				   u16_t dst_port)
{
   1da6a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1da6e:	f8ad 2006 	strh.w	r2, [sp, #6]
	struct net_buf *frag, *prev, *udp;
	u16_t pos;

	frag = net_frag_get_pos(pkt, offset, &pos);
   1da72:	f10d 020e 	add.w	r2, sp, #14
{
   1da76:	f8ad 3004 	strh.w	r3, [sp, #4]
   1da7a:	4604      	mov	r4, r0
	frag = net_frag_get_pos(pkt, offset, &pos);
   1da7c:	f7fb ffd5 	bl	19a2a <net_frag_get_pos>
   1da80:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	if (!frag && pos == 0xffff) {
   1da84:	b940      	cbnz	r0, 1da98 <net_udp_insert_raw+0x2e>
   1da86:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1da8a:	4293      	cmp	r3, r2
   1da8c:	d106      	bne.n	1da9c <net_udp_insert_raw+0x32>
		NET_DBG("Offset %d out of pkt len %zd",
			offset, net_pkt_get_len(pkt));
		return NULL;
   1da8e:	2400      	movs	r4, #0
	return pkt;

fail:
	NET_DBG("Cannot insert UDP header into %p", pkt);
	return NULL;
}
   1da90:	4620      	mov	r0, r4
   1da92:	b004      	add	sp, #16
   1da94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (frag && pos != 0) {
   1da98:	2b00      	cmp	r3, #0
   1da9a:	d1f8      	bne.n	1da8e <net_udp_insert_raw+0x24>
	if (pkt->frags != frag) {
   1da9c:	68a5      	ldr	r5, [r4, #8]
   1da9e:	42a8      	cmp	r0, r5
   1daa0:	d143      	bne.n	1db2a <net_udp_insert_raw+0xc0>
	if (!prev) {
   1daa2:	2d00      	cmp	r5, #0
   1daa4:	d0f3      	beq.n	1da8e <net_udp_insert_raw+0x24>
	udp = net_pkt_get_frag(pkt, PKT_WAIT_TIME);
   1daa6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1daaa:	4620      	mov	r0, r4
   1daac:	f7fb fd6e 	bl	1958c <net_pkt_get_frag>
	if (!udp) {
   1dab0:	4680      	mov	r8, r0
   1dab2:	2800      	cmp	r0, #0
   1dab4:	d0eb      	beq.n	1da8e <net_udp_insert_raw+0x24>
	net_buf_add_mem(udp, &src_port, sizeof(src_port));
   1dab6:	f100 0708 	add.w	r7, r0, #8
   1daba:	2202      	movs	r2, #2
   1dabc:	f10d 0106 	add.w	r1, sp, #6
   1dac0:	4638      	mov	r0, r7
   1dac2:	f7fa f889 	bl	17bd8 <net_buf_simple_add_mem>
	net_buf_add_mem(udp, &dst_port, sizeof(dst_port));
   1dac6:	2202      	movs	r2, #2
   1dac8:	a901      	add	r1, sp, #4
   1daca:	4638      	mov	r0, r7
   1dacc:	f7fa f884 	bl	17bd8 <net_buf_simple_add_mem>
   1dad0:	68a6      	ldr	r6, [r4, #8]
	size_t bytes = 0;
   1dad2:	2300      	movs	r3, #0
	while (buf) {
   1dad4:	bb6e      	cbnz	r6, 1db32 <net_udp_insert_raw+0xc8>
	net_buf_add_be16(udp, net_pkt_get_len(pkt) -
   1dad6:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
   1dada:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
   1dade:	4411      	add	r1, r2
   1dae0:	f1c1 0108 	rsb	r1, r1, #8
   1dae4:	4419      	add	r1, r3
   1dae6:	b289      	uxth	r1, r1
   1dae8:	4638      	mov	r0, r7
   1daea:	f7fa f895 	bl	17c18 <net_buf_simple_add_be16>
	net_buf_add_be16(udp, 0); /* chksum */
   1daee:	4631      	mov	r1, r6
   1daf0:	4638      	mov	r0, r7
   1daf2:	f7fa f891 	bl	17c18 <net_buf_simple_add_be16>
	net_buf_frag_insert(prev, udp);
   1daf6:	4641      	mov	r1, r8
   1daf8:	4628      	mov	r0, r5
   1dafa:	f7fa f840 	bl	17b7e <net_buf_frag_insert>
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1dafe:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
				net_pkt_ipv6_ext_len(pkt) +
   1db02:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1db06:	4419      	add	r1, r3
   1db08:	f10d 020e 	add.w	r2, sp, #14
   1db0c:	3108      	adds	r1, #8
   1db0e:	4620      	mov	r0, r4
   1db10:	f7fb ff8b 	bl	19a2a <net_frag_get_pos>
	if (frag) {
   1db14:	2800      	cmp	r0, #0
   1db16:	d0bb      	beq.n	1da90 <net_udp_insert_raw+0x26>
		net_pkt_set_appdata(pkt, frag->data + pos);
   1db18:	6883      	ldr	r3, [r0, #8]
   1db1a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1db1e:	4413      	add	r3, r2
	pkt->appdata = data;
   1db20:	61a3      	str	r3, [r4, #24]
   1db22:	e7b5      	b.n	1da90 <net_udp_insert_raw+0x26>
			if (tmp->frags == frag) {
   1db24:	4298      	cmp	r0, r3
   1db26:	d0be      	beq.n	1daa6 <net_udp_insert_raw+0x3c>
   1db28:	461d      	mov	r5, r3
		while (tmp->frags) {
   1db2a:	682b      	ldr	r3, [r5, #0]
   1db2c:	2b00      	cmp	r3, #0
   1db2e:	d1f9      	bne.n	1db24 <net_udp_insert_raw+0xba>
   1db30:	e7ad      	b.n	1da8e <net_udp_insert_raw+0x24>
		bytes += buf->len;
   1db32:	89b2      	ldrh	r2, [r6, #12]
		buf = buf->frags;
   1db34:	6836      	ldr	r6, [r6, #0]
		bytes += buf->len;
   1db36:	4413      	add	r3, r2
   1db38:	e7cc      	b.n	1dad4 <net_udp_insert_raw+0x6a>

0001db3a <net_udp_set_chksum>:

struct net_buf *net_udp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   1db3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1db3e:	b086      	sub	sp, #24
	struct net_udp_hdr *hdr;
	u16_t chksum = 0;
   1db40:	2700      	movs	r7, #0
{
   1db42:	4604      	mov	r4, r0
   1db44:	460e      	mov	r6, r1
	u16_t chksum = 0;
   1db46:	f8ad 7014 	strh.w	r7, [sp, #20]
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   1db4a:	f7fb ff9d 	bl	19a88 <net_pkt_udp_data>
   1db4e:	4605      	mov	r5, r0
	if (net_udp_header_fits(pkt, hdr)) {
   1db50:	4601      	mov	r1, r0
   1db52:	4620      	mov	r0, r4
   1db54:	f7ff ff7f 	bl	1da56 <net_udp_header_fits>
   1db58:	b158      	cbz	r0, 1db72 <net_udp_set_chksum+0x38>
		hdr->chksum = 0;
   1db5a:	71af      	strb	r7, [r5, #6]
   1db5c:	71ef      	strb	r7, [r5, #7]
	return net_calc_chksum(pkt, IPPROTO_UDP);
   1db5e:	2111      	movs	r1, #17
   1db60:	4620      	mov	r0, r4
   1db62:	f7fc f889 	bl	19c78 <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_udp(pkt);
   1db66:	43c0      	mvns	r0, r0
   1db68:	80e8      	strh	r0, [r5, #6]
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   1db6a:	4630      	mov	r0, r6
   1db6c:	b006      	add	sp, #24
   1db6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			     net_pkt_ipv6_ext_len(pkt) +
   1db72:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
			     net_pkt_ip_hdr_len(pkt) +
   1db76:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
	frag = net_pkt_write(pkt, frag,
   1db7a:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   1db7e:	441a      	add	r2, r3
   1db80:	ad05      	add	r5, sp, #20
   1db82:	2702      	movs	r7, #2
   1db84:	f10d 0316 	add.w	r3, sp, #22
   1db88:	3206      	adds	r2, #6
   1db8a:	4631      	mov	r1, r6
   1db8c:	f8cd 8008 	str.w	r8, [sp, #8]
   1db90:	9501      	str	r5, [sp, #4]
   1db92:	9700      	str	r7, [sp, #0]
   1db94:	4620      	mov	r0, r4
   1db96:	f7fb febf 	bl	19918 <net_pkt_write>
   1db9a:	2111      	movs	r1, #17
   1db9c:	4606      	mov	r6, r0
   1db9e:	4620      	mov	r0, r4
   1dba0:	f7fc f86a 	bl	19c78 <net_calc_chksum>
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1dba4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1dba8:	f8cd 8008 	str.w	r8, [sp, #8]
	chksum = ~net_calc_chksum_udp(pkt);
   1dbac:	43c0      	mvns	r0, r0
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1dbae:	3a02      	subs	r2, #2
	chksum = ~net_calc_chksum_udp(pkt);
   1dbb0:	f8ad 0014 	strh.w	r0, [sp, #20]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1dbb4:	4631      	mov	r1, r6
   1dbb6:	9501      	str	r5, [sp, #4]
   1dbb8:	9700      	str	r7, [sp, #0]
   1dbba:	f10d 0316 	add.w	r3, sp, #22
   1dbbe:	b292      	uxth	r2, r2
   1dbc0:	4620      	mov	r0, r4
   1dbc2:	f7fb fea9 	bl	19918 <net_pkt_write>
   1dbc6:	4606      	mov	r6, r0
	return frag;
   1dbc8:	e7cf      	b.n	1db6a <net_udp_set_chksum+0x30>

0001dbca <net_udp_get_chksum>:

u16_t net_udp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   1dbca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1dbcc:	4604      	mov	r4, r0
   1dbce:	460e      	mov	r6, r1
	struct net_udp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   1dbd0:	f7fb ff5a 	bl	19a88 <net_pkt_udp_data>
   1dbd4:	4605      	mov	r5, r0
	if (net_udp_header_fits(pkt, hdr)) {
   1dbd6:	4601      	mov	r1, r0
   1dbd8:	4620      	mov	r0, r4
   1dbda:	f7ff ff3c 	bl	1da56 <net_udp_header_fits>
   1dbde:	b110      	cbz	r0, 1dbe6 <net_udp_get_chksum+0x1c>
		return hdr->chksum;
   1dbe0:	88e8      	ldrh	r0, [r5, #6]
			     2 + 2 + 2 /* src + dst + len */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   1dbe2:	b004      	add	sp, #16
   1dbe4:	bd70      	pop	{r4, r5, r6, pc}
			     net_pkt_ipv6_ext_len(pkt) +
   1dbe6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
			     net_pkt_ip_hdr_len(pkt) +
   1dbea:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
	frag = net_frag_read(frag,
   1dbee:	4419      	add	r1, r3
   1dbf0:	ab03      	add	r3, sp, #12
   1dbf2:	9300      	str	r3, [sp, #0]
   1dbf4:	f10d 020e 	add.w	r2, sp, #14
   1dbf8:	2302      	movs	r3, #2
   1dbfa:	3106      	adds	r1, #6
   1dbfc:	4630      	mov	r0, r6
   1dbfe:	f7fb fe37 	bl	19870 <net_frag_read>
	return chksum;
   1dc02:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   1dc06:	e7ec      	b.n	1dbe2 <net_udp_get_chksum+0x18>

0001dc08 <net_udp_get_hdr>:

struct net_udp_hdr *net_udp_get_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   1dc08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1dc0a:	4605      	mov	r5, r0
   1dc0c:	460c      	mov	r4, r1
	struct net_udp_hdr *udp_hdr;
	struct net_buf *frag;
	u16_t pos;

	udp_hdr = net_pkt_udp_data(pkt);
   1dc0e:	f7fb ff3b 	bl	19a88 <net_pkt_udp_data>
   1dc12:	4606      	mov	r6, r0
	if (net_udp_header_fits(pkt, udp_hdr)) {
   1dc14:	4601      	mov	r1, r0
   1dc16:	4628      	mov	r0, r5
   1dc18:	f7ff ff1d 	bl	1da56 <net_udp_header_fits>
   1dc1c:	bb50      	cbnz	r0, 1dc74 <net_udp_get_hdr+0x6c>
		return udp_hdr;
	}

	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1dc1e:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
			     net_pkt_ipv6_ext_len(pkt),
   1dc22:	f895 1039 	ldrb.w	r1, [r5, #57]	; 0x39
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1dc26:	9400      	str	r4, [sp, #0]
   1dc28:	4401      	add	r1, r0
   1dc2a:	2302      	movs	r3, #2
   1dc2c:	f10d 020e 	add.w	r2, sp, #14
   1dc30:	68a8      	ldr	r0, [r5, #8]
   1dc32:	f7fb fe1d 	bl	19870 <net_frag_read>
			     &pos, sizeof(hdr->src_port),
			     (u8_t *)&hdr->src_port);
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
			     (u8_t *)&hdr->dst_port);
   1dc36:	1ca3      	adds	r3, r4, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   1dc38:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1dc3c:	9300      	str	r3, [sp, #0]
   1dc3e:	f10d 020e 	add.w	r2, sp, #14
   1dc42:	2302      	movs	r3, #2
   1dc44:	f7fb fe14 	bl	19870 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
			     (u8_t *)&hdr->len);
   1dc48:	1d23      	adds	r3, r4, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   1dc4a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1dc4e:	9300      	str	r3, [sp, #0]
   1dc50:	f10d 020e 	add.w	r2, sp, #14
   1dc54:	2302      	movs	r3, #2
   1dc56:	f7fb fe0b 	bl	19870 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
			     (u8_t *)&hdr->chksum);
   1dc5a:	1da3      	adds	r3, r4, #6
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1dc5c:	9300      	str	r3, [sp, #0]
   1dc5e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1dc62:	2302      	movs	r3, #2
   1dc64:	f10d 020e 	add.w	r2, sp, #14
   1dc68:	f7fb fe02 	bl	19870 <net_frag_read>
	if (!frag) {
   1dc6c:	2800      	cmp	r0, #0
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
   1dc6e:	bf14      	ite	ne
   1dc70:	4626      	movne	r6, r4
   1dc72:	2600      	moveq	r6, #0
}
   1dc74:	4630      	mov	r0, r6
   1dc76:	b004      	add	sp, #16
   1dc78:	bd70      	pop	{r4, r5, r6, pc}

0001dc7a <net_udp_set_hdr>:

struct net_udp_hdr *net_udp_set_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   1dc7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dc7e:	b086      	sub	sp, #24
   1dc80:	4604      	mov	r4, r0
   1dc82:	460d      	mov	r5, r1
	struct net_buf *frag;
	u16_t pos;

	if (net_udp_header_fits(pkt, hdr)) {
   1dc84:	f7ff fee7 	bl	1da56 <net_udp_header_fits>
   1dc88:	4680      	mov	r8, r0
   1dc8a:	2800      	cmp	r0, #0
   1dc8c:	d135      	bne.n	1dcfa <net_udp_set_hdr+0x80>
		return hdr;
	}

	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1dc8e:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
			     net_pkt_ipv6_ext_len(pkt),
   1dc92:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1dc96:	9501      	str	r5, [sp, #4]
   1dc98:	2602      	movs	r6, #2
   1dc9a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   1dc9e:	440a      	add	r2, r1
   1dca0:	f10d 0316 	add.w	r3, sp, #22
   1dca4:	68a1      	ldr	r1, [r4, #8]
   1dca6:	9702      	str	r7, [sp, #8]
   1dca8:	9600      	str	r6, [sp, #0]
   1dcaa:	4620      	mov	r0, r4
   1dcac:	f7fb fe34 	bl	19918 <net_pkt_write>
			     &pos, sizeof(hdr->src_port),
			     (u8_t *)&hdr->src_port, PKT_WAIT_TIME);
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
			     (u8_t *)&hdr->dst_port, PKT_WAIT_TIME);
   1dcb0:	19ab      	adds	r3, r5, r6
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   1dcb2:	4601      	mov	r1, r0
   1dcb4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1dcb8:	9301      	str	r3, [sp, #4]
   1dcba:	9702      	str	r7, [sp, #8]
   1dcbc:	f10d 0316 	add.w	r3, sp, #22
   1dcc0:	9600      	str	r6, [sp, #0]
   1dcc2:	4620      	mov	r0, r4
   1dcc4:	f7fb fe28 	bl	19918 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
			     (u8_t *)&hdr->len, PKT_WAIT_TIME);
   1dcc8:	1d2b      	adds	r3, r5, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   1dcca:	4601      	mov	r1, r0
   1dccc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1dcd0:	9301      	str	r3, [sp, #4]
   1dcd2:	9702      	str	r7, [sp, #8]
   1dcd4:	f10d 0316 	add.w	r3, sp, #22
   1dcd8:	9600      	str	r6, [sp, #0]
   1dcda:	4620      	mov	r0, r4
   1dcdc:	f7fb fe1c 	bl	19918 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   1dce0:	1dab      	adds	r3, r5, #6
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   1dce2:	9301      	str	r3, [sp, #4]
   1dce4:	4601      	mov	r1, r0
   1dce6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1dcea:	9702      	str	r7, [sp, #8]
   1dcec:	9600      	str	r6, [sp, #0]
   1dcee:	f10d 0316 	add.w	r3, sp, #22
   1dcf2:	4620      	mov	r0, r4
   1dcf4:	f7fb fe10 	bl	19918 <net_pkt_write>

	if (!frag) {
   1dcf8:	b100      	cbz	r0, 1dcfc <net_udp_set_hdr+0x82>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
   1dcfa:	46a8      	mov	r8, r5
}
   1dcfc:	4640      	mov	r0, r8
   1dcfe:	b006      	add	sp, #24
   1dd00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001dd04 <net_udp_insert>:

struct net_pkt *net_udp_insert(struct net_context *context,
			       struct net_pkt *pkt,
			       u16_t offset,
			       u16_t port)
{
   1dd04:	b410      	push	{r4}
   1dd06:	460c      	mov	r4, r1
   1dd08:	4611      	mov	r1, r2
	return net_udp_insert_raw(pkt,
   1dd0a:	8942      	ldrh	r2, [r0, #10]
   1dd0c:	4620      	mov	r0, r4
				  offset,
				  net_sin((struct sockaddr *)
					  &context->local)->sin_port,
				  port);
}
   1dd0e:	bc10      	pop	{r4}
	return net_udp_insert_raw(pkt,
   1dd10:	f7ff beab 	b.w	1da6a <net_udp_insert_raw>

0001dd14 <net_udp_init>:
{
	return net_conn_unregister(handle);
}

void net_udp_init(void)
{
   1dd14:	4770      	bx	lr

0001dd16 <net_bt_reserve>:
	ARG_UNUSED(iface);
	ARG_UNUSED(unused);

	
	return 0;
}
   1dd16:	2000      	movs	r0, #0
   1dd18:	4770      	bx	lr

0001dd1a <net_bt_enable>:
{
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;

	NET_DBG("iface %p %s", iface, state ? "up" : "down");

	if (state && ctxt->ipsp_chan.chan.state != BT_L2CAP_CONNECTED) {
   1dd1a:	b149      	cbz	r1, 1dd30 <net_bt_enable+0x16>
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1dd1c:	6803      	ldr	r3, [r0, #0]
	if (state && ctxt->ipsp_chan.chan.state != BT_L2CAP_CONNECTED) {
   1dd1e:	689b      	ldr	r3, [r3, #8]
   1dd20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1dd24:	2b03      	cmp	r3, #3
		return -ENETDOWN;
   1dd26:	bf0c      	ite	eq
   1dd28:	2000      	moveq	r0, #0
   1dd2a:	f06f 003d 	mvnne.w	r0, #61	; 0x3d
   1dd2e:	4770      	bx	lr
	}

	return 0;
   1dd30:	4608      	mov	r0, r1
}
   1dd32:	4770      	bx	lr

0001dd34 <bt_iface_init>:
	return ret;
}

static void bt_iface_init(struct net_if *iface)
{
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1dd34:	6803      	ldr	r3, [r0, #0]

	bt_iface = iface;
   1dd36:	4a02      	ldr	r2, [pc, #8]	; (1dd40 <bt_iface_init+0xc>)
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1dd38:	689b      	ldr	r3, [r3, #8]
	bt_iface = iface;
   1dd3a:	6010      	str	r0, [r2, #0]

	NET_DBG("iface %p", iface);

	ctxt->iface = iface;
   1dd3c:	6018      	str	r0, [r3, #0]
   1dd3e:	4770      	bx	lr
   1dd40:	200051f0 	.word	0x200051f0

0001dd44 <ipsp_accept>:

static int ipsp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
	NET_DBG("Incoming conn %p", conn);

	if (bt_context_data.ipsp_chan.chan.conn) {
   1dd44:	4b04      	ldr	r3, [pc, #16]	; (1dd58 <ipsp_accept+0x14>)
   1dd46:	6858      	ldr	r0, [r3, #4]
   1dd48:	b910      	cbnz	r0, 1dd50 <ipsp_accept+0xc>
		NET_ERR("No channels available");
		return -ENOMEM;
	}

	*chan = &bt_context_data.ipsp_chan.chan;
   1dd4a:	3304      	adds	r3, #4
   1dd4c:	600b      	str	r3, [r1, #0]

	return 0;
   1dd4e:	4770      	bx	lr
		return -ENOMEM;
   1dd50:	f06f 000b 	mvn.w	r0, #11
}
   1dd54:	4770      	bx	lr
   1dd56:	bf00      	nop
   1dd58:	2000e768 	.word	0x2000e768

0001dd5c <disconnected>:
	
#if defined(CONFIG_NET_DEBUG_L2_BT)
	char addr[BT_ADDR_LE_STR_LEN];
#endif

	if (conn != default_conn) {
   1dd5c:	4b04      	ldr	r3, [pc, #16]	; (1dd70 <disconnected+0x14>)
   1dd5e:	681b      	ldr	r3, [r3, #0]
   1dd60:	4283      	cmp	r3, r0
   1dd62:	d104      	bne.n	1dd6e <disconnected+0x12>
	// disconnect the connection
//	bt_conn_unref(default_conn);
//	default_conn = NULL;

//#if defined(CONFIG_ECHO_SERVER)
	if(reason == 0x1A){
   1dd64:	291a      	cmp	r1, #26
		connectionless = true;
   1dd66:	bf02      	ittt	eq
   1dd68:	4b02      	ldreq	r3, [pc, #8]	; (1dd74 <disconnected+0x18>)
   1dd6a:	2201      	moveq	r2, #1
   1dd6c:	701a      	strbeq	r2, [r3, #0]
   1dd6e:	4770      	bx	lr
   1dd70:	200051f8 	.word	0x200051f8
   1dd74:	200032d6 	.word	0x200032d6

0001dd78 <net_bt_recv>:
{
   1dd78:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *frag = pkt->frags;
   1dd7a:	688d      	ldr	r5, [r1, #8]
	pkt_lenght = frag->len;
   1dd7c:	4e0c      	ldr	r6, [pc, #48]	; (1ddb0 <net_bt_recv+0x38>)
   1dd7e:	89ab      	ldrh	r3, [r5, #12]
	memset(packet, 0, 1299);
   1dd80:	480c      	ldr	r0, [pc, #48]	; (1ddb4 <net_bt_recv+0x3c>)
	pkt_lenght = frag->len;
   1dd82:	8033      	strh	r3, [r6, #0]
{
   1dd84:	460c      	mov	r4, r1
	memset(packet, 0, 1299);
   1dd86:	f240 5213 	movw	r2, #1299	; 0x513
   1dd8a:	2100      	movs	r1, #0
   1dd8c:	f7e2 fdd9 	bl	942 <memset>
	memcpy(packet, frag->data, pkt_lenght);
   1dd90:	8832      	ldrh	r2, [r6, #0]
   1dd92:	68a9      	ldr	r1, [r5, #8]
   1dd94:	4807      	ldr	r0, [pc, #28]	; (1ddb4 <net_bt_recv+0x3c>)
   1dd96:	f7e2 fda8 	bl	8ea <memcpy>
	if (!net_6lo_uncompress(pkt)) {
   1dd9a:	4620      	mov	r0, r4
   1dd9c:	f7fc fb8e 	bl	1a4bc <net_6lo_uncompress>
   1dda0:	b920      	cbnz	r0, 1ddac <net_bt_recv+0x34>
		printk("NO \n");
   1dda2:	4805      	ldr	r0, [pc, #20]	; (1ddb8 <net_bt_recv+0x40>)
   1dda4:	f7e3 fce6 	bl	1774 <printk>
		return NET_DROP;
   1dda8:	2002      	movs	r0, #2
   1ddaa:	bd70      	pop	{r4, r5, r6, pc}
	return NET_CONTINUE;
   1ddac:	2001      	movs	r0, #1
}
   1ddae:	bd70      	pop	{r4, r5, r6, pc}
   1ddb0:	200051fc 	.word	0x200051fc
   1ddb4:	20004cdc 	.word	0x20004cdc
   1ddb8:	000213ca 	.word	0x000213ca

0001ddbc <ipsp_recv>:
{
   1ddbc:	b570      	push	{r4, r5, r6, lr}
   1ddbe:	4605      	mov	r5, r0
   1ddc0:	460e      	mov	r6, r1
	pkt = net_pkt_get_reserve_rx(0, K_FOREVER);
   1ddc2:	2000      	movs	r0, #0
   1ddc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ddc8:	f7fb fbc0 	bl	1954c <net_pkt_get_reserve_rx>
	net_pkt_ll_dst(pkt)->addr = ctxt->src.val;
   1ddcc:	f105 039c 	add.w	r3, r5, #156	; 0x9c
	net_pkt_ll_dst(pkt)->len = sizeof(ctxt->src);
   1ddd0:	2206      	movs	r2, #6
	net_pkt_ll_dst(pkt)->addr = ctxt->src.val;
   1ddd2:	6283      	str	r3, [r0, #40]	; 0x28
	net_pkt_ll_src(pkt)->addr = ctxt->dst.val;
   1ddd4:	f105 01a2 	add.w	r1, r5, #162	; 0xa2
	net_pkt_ll_dst(pkt)->type = NET_LINK_BLUETOOTH;
   1ddd8:	2302      	movs	r3, #2
	net_pkt_ll_dst(pkt)->len = sizeof(ctxt->src);
   1ddda:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
	net_pkt_ll_dst(pkt)->type = NET_LINK_BLUETOOTH;
   1ddde:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	net_pkt_ll_src(pkt)->len = sizeof(ctxt->dst);
   1dde2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
	net_pkt_ll_src(pkt)->type = NET_LINK_BLUETOOTH;
   1dde6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	pkt = net_pkt_get_reserve_rx(0, K_FOREVER);
   1ddea:	4604      	mov	r4, r0
	net_pkt_ll_src(pkt)->addr = ctxt->dst.val;
   1ddec:	6201      	str	r1, [r0, #32]
	net_pkt_frag_add(pkt, net_buf_ref(buf));
   1ddee:	4630      	mov	r0, r6
   1ddf0:	f7f9 febc 	bl	17b6c <net_buf_ref>
   1ddf4:	4601      	mov	r1, r0
   1ddf6:	4620      	mov	r0, r4
   1ddf8:	f7fb fc0e 	bl	19618 <net_pkt_frag_add>
	if (net_recv_data(ctxt->iface, pkt) < 0) {      // for receving the packet
   1ddfc:	4621      	mov	r1, r4
   1ddfe:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1de02:	f7fa fbb5 	bl	18570 <net_recv_data>
   1de06:	2800      	cmp	r0, #0
   1de08:	da04      	bge.n	1de14 <ipsp_recv+0x58>
		net_pkt_unref(pkt);
   1de0a:	4620      	mov	r0, r4
}
   1de0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_pkt_unref(pkt);
   1de10:	f7fb bbdb 	b.w	195ca <net_pkt_unref>
   1de14:	bd70      	pop	{r4, r5, r6, pc}

0001de16 <ipsp_alloc_buf>:
	return net_pkt_get_reserve_rx_data(0, K_FOREVER);
   1de16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1de1a:	2000      	movs	r0, #0
   1de1c:	f7fb bba6 	b.w	1956c <net_pkt_get_reserve_rx_data>

0001de20 <ipsp_disconnected>:
{
   1de20:	b510      	push	{r4, lr}
	for_echo_server = true;
   1de22:	4b06      	ldr	r3, [pc, #24]	; (1de3c <ipsp_disconnected+0x1c>)
	if (chan->conn != default_conn) {
   1de24:	4c06      	ldr	r4, [pc, #24]	; (1de40 <ipsp_disconnected+0x20>)
   1de26:	6800      	ldr	r0, [r0, #0]
	for_echo_server = true;
   1de28:	2201      	movs	r2, #1
   1de2a:	701a      	strb	r2, [r3, #0]
	if (chan->conn != default_conn) {
   1de2c:	6823      	ldr	r3, [r4, #0]
   1de2e:	4298      	cmp	r0, r3
   1de30:	d103      	bne.n	1de3a <ipsp_disconnected+0x1a>
	bt_conn_unref(default_conn);
   1de32:	f7e8 f959 	bl	60e8 <bt_conn_unref>
	default_conn = NULL;
   1de36:	2300      	movs	r3, #0
   1de38:	6023      	str	r3, [r4, #0]
   1de3a:	bd10      	pop	{r4, pc}
   1de3c:	200032d8 	.word	0x200032d8
   1de40:	200051f8 	.word	0x200051f8

0001de44 <net_bt_init>:
	.disconnected = disconnected,
};
#endif /* CONFIG_NET_L2_BT_MGMT */

static int net_bt_init(struct device *dev)
{
   1de44:	b508      	push	{r3, lr}
	NET_DBG("dev %p driver_data %p", dev, dev->driver_data);

#if defined(CONFIG_NET_L2_BT_MGMT)
	bt_conn_cb_register(&conn_callbacks);
   1de46:	4804      	ldr	r0, [pc, #16]	; (1de58 <net_bt_init+0x14>)
   1de48:	f7e7 fe94 	bl	5b74 <bt_conn_cb_register>
#endif
	bt_l2cap_server_register(&server);
   1de4c:	4803      	ldr	r0, [pc, #12]	; (1de5c <net_bt_init+0x18>)
   1de4e:	f7e8 ff0f 	bl	6c70 <bt_l2cap_server_register>

	return 0;
}
   1de52:	2000      	movs	r0, #0
   1de54:	bd08      	pop	{r3, pc}
   1de56:	bf00      	nop
   1de58:	2000e81c 	.word	0x2000e81c
   1de5c:	2000e854 	.word	0x2000e854

0001de60 <bt_iface_send>:
{
   1de60:	b538      	push	{r3, r4, r5, lr}
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1de62:	6802      	ldr	r2, [r0, #0]
	frags = pkt->frags;
   1de64:	688d      	ldr	r5, [r1, #8]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1de66:	6894      	ldr	r4, [r2, #8]
	pkt->frags = NULL;
   1de68:	2200      	movs	r2, #0
	net_pkt_unref(pkt);
   1de6a:	4608      	mov	r0, r1
	pkt->frags = NULL;
   1de6c:	608a      	str	r2, [r1, #8]
	net_pkt_unref(pkt);
   1de6e:	f7fb fbac 	bl	195ca <net_pkt_unref>
	ret = bt_l2cap_chan_send(&ctxt->ipsp_chan.chan, frags);
   1de72:	4629      	mov	r1, r5
   1de74:	1d20      	adds	r0, r4, #4
}
   1de76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = bt_l2cap_chan_send(&ctxt->ipsp_chan.chan, frags);
   1de7a:	f7e9 ba5f 	b.w	733c <bt_l2cap_chan_send>
	...

0001de80 <net_bt_send>:
{
   1de80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return pkt->family;
   1de84:	f891 3036 	ldrb.w	r3, [r1, #54]	; 0x36
	if (net_pkt_family(pkt) != AF_INET6) {
   1de88:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1de8c:	2b0a      	cmp	r3, #10
{
   1de8e:	b08a      	sub	sp, #40	; 0x28
   1de90:	460d      	mov	r5, r1
	if (net_pkt_family(pkt) != AF_INET6) {
   1de92:	d003      	beq.n	1de9c <net_bt_send+0x1c>
   1de94:	2002      	movs	r0, #2
}
   1de96:	b00a      	add	sp, #40	; 0x28
   1de98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1de9c:	6803      	ldr	r3, [r0, #0]
	if (!net_6lo_compress(pkt, true, NULL)) {
   1de9e:	2200      	movs	r2, #0
   1dea0:	2101      	movs	r1, #1
   1dea2:	4628      	mov	r0, r5
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1dea4:	689e      	ldr	r6, [r3, #8]
	if (!net_6lo_compress(pkt, true, NULL)) {
   1dea6:	f7fc f88b 	bl	19fc0 <net_6lo_compress>
   1deaa:	2800      	cmp	r0, #0
   1deac:	d0f2      	beq.n	1de94 <net_bt_send+0x14>
	if(connectionless){
   1deae:	4b24      	ldr	r3, [pc, #144]	; (1df40 <net_bt_send+0xc0>)
   1deb0:	781b      	ldrb	r3, [r3, #0]
   1deb2:	2b00      	cmp	r3, #0
   1deb4:	d039      	beq.n	1df2a <net_bt_send+0xaa>
		struct net_buf *frag = pkt->frags;
   1deb6:	68ae      	ldr	r6, [r5, #8]
		memset(packet, 0, 1299);
   1deb8:	4822      	ldr	r0, [pc, #136]	; (1df44 <net_bt_send+0xc4>)
		if(ext_adv_actiavte == false){  // activate adv only
   1deba:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1df54 <net_bt_send+0xd4>
		memset(packet, 0, 1299);
   1debe:	f240 5213 	movw	r2, #1299	; 0x513
   1dec2:	2100      	movs	r1, #0
   1dec4:	f7e2 fd3d 	bl	942 <memset>
		memcpy(packet, frag->data, frag->len);
   1dec8:	89b2      	ldrh	r2, [r6, #12]
   1deca:	68b1      	ldr	r1, [r6, #8]
   1decc:	481d      	ldr	r0, [pc, #116]	; (1df44 <net_bt_send+0xc4>)
   1dece:	f7e2 fd0c 	bl	8ea <memcpy>
		if(ext_adv_actiavte == false){  // activate adv only
   1ded2:	f898 5000 	ldrb.w	r5, [r8]
   1ded6:	bb1d      	cbnz	r5, 1df20 <net_bt_send+0xa0>
			struct bt_data ad[] = {
   1ded8:	4b1b      	ldr	r3, [pc, #108]	; (1df48 <net_bt_send+0xc8>)
			err= bt_le_ext_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad), packet, frag->len,
   1deda:	9507      	str	r5, [sp, #28]
			struct bt_data ad[] = {
   1dedc:	e893 0003 	ldmia.w	r3, {r0, r1}
			err= bt_le_ext_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad), packet, frag->len,
   1dee0:	f44f 7348 	mov.w	r3, #800	; 0x320
   1dee4:	f8ad 301e 	strh.w	r3, [sp, #30]
   1dee8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1deec:	9508      	str	r5, [sp, #32]
   1deee:	2401      	movs	r4, #1
			struct bt_data ad[] = {
   1def0:	af05      	add	r7, sp, #20
			err= bt_le_ext_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad), packet, frag->len,
   1def2:	f8ad 3020 	strh.w	r3, [sp, #32]
   1def6:	4b15      	ldr	r3, [pc, #84]	; (1df4c <net_bt_send+0xcc>)
   1def8:	9509      	str	r5, [sp, #36]	; 0x24
			struct bt_data ad[] = {
   1defa:	e887 0003 	stmia.w	r7, {r0, r1}
			err= bt_le_ext_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad), packet, frag->len,
   1defe:	9402      	str	r4, [sp, #8]
   1df00:	9301      	str	r3, [sp, #4]
   1df02:	89b3      	ldrh	r3, [r6, #12]
   1df04:	9300      	str	r3, [sp, #0]
   1df06:	4622      	mov	r2, r4
   1df08:	4b0e      	ldr	r3, [pc, #56]	; (1df44 <net_bt_send+0xc4>)
   1df0a:	4639      	mov	r1, r7
   1df0c:	a807      	add	r0, sp, #28
   1df0e:	f7e7 fa2d 	bl	536c <bt_le_ext_adv_start>
				ext_adv_actiavte = false;
   1df12:	2800      	cmp	r0, #0
   1df14:	bf0c      	ite	eq
   1df16:	4620      	moveq	r0, r4
   1df18:	4628      	movne	r0, r5
   1df1a:	f888 0000 	strb.w	r0, [r8]
   1df1e:	e7b9      	b.n	1de94 <net_bt_send+0x14>
			ext_set_data(frag->len, packet);
   1df20:	4908      	ldr	r1, [pc, #32]	; (1df44 <net_bt_send+0xc4>)
   1df22:	89b0      	ldrh	r0, [r6, #12]
   1df24:	f7e7 f9eb 	bl	52fe <ext_set_data>
   1df28:	e7b4      	b.n	1de94 <net_bt_send+0x14>
	}else if(connection_base){
   1df2a:	4b09      	ldr	r3, [pc, #36]	; (1df50 <net_bt_send+0xd0>)
   1df2c:	781c      	ldrb	r4, [r3, #0]
   1df2e:	2c00      	cmp	r4, #0
   1df30:	d1b0      	bne.n	1de94 <net_bt_send+0x14>
	k_fifo_put(&iface->tx_queue, pkt);
   1df32:	6830      	ldr	r0, [r6, #0]
   1df34:	4629      	mov	r1, r5
   1df36:	3018      	adds	r0, #24
   1df38:	f001 fa3d 	bl	1f3b6 <k_queue_append>
	return NET_OK;
   1df3c:	4620      	mov	r0, r4
   1df3e:	e7aa      	b.n	1de96 <net_bt_send+0x16>
   1df40:	200032d6 	.word	0x200032d6
   1df44:	20004cdc 	.word	0x20004cdc
   1df48:	0002062c 	.word	0x0002062c
   1df4c:	000213d8 	.word	0x000213d8
   1df50:	200032d5 	.word	0x200032d5
   1df54:	200032d7 	.word	0x200032d7

0001df58 <connected>:
	if (err) {
   1df58:	b939      	cbnz	r1, 1df6a <connected+0x12>
	if (conn != default_conn) {
   1df5a:	4a04      	ldr	r2, [pc, #16]	; (1df6c <connected+0x14>)
   1df5c:	6812      	ldr	r2, [r2, #0]
   1df5e:	4282      	cmp	r2, r0
   1df60:	d103      	bne.n	1df6a <connected+0x12>
	bt_l2cap_chan_connect(conn, &bt_context_data.ipsp_chan.chan,
   1df62:	2223      	movs	r2, #35	; 0x23
   1df64:	4902      	ldr	r1, [pc, #8]	; (1df70 <connected+0x18>)
   1df66:	f7e8 bec9 	b.w	6cfc <bt_l2cap_chan_connect>
   1df6a:	4770      	bx	lr
   1df6c:	200051f8 	.word	0x200051f8
   1df70:	2000e76c 	.word	0x2000e76c

0001df74 <device_found>:
{
   1df74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1df78:	4d47      	ldr	r5, [pc, #284]	; (1e098 <device_found+0x124>)
   1df7a:	b085      	sub	sp, #20
   1df7c:	461c      	mov	r4, r3
   1df7e:	682b      	ldr	r3, [r5, #0]
   1df80:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1df82:	f3bf 8f5b 	dmb	ish
   1df86:	68db      	ldr	r3, [r3, #12]
   1df88:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_iface->flags, NET_IF_UP)) {
   1df8c:	07db      	lsls	r3, r3, #31
{
   1df8e:	4617      	mov	r7, r2
	if (!atomic_test_bit(bt_iface->flags, NET_IF_UP)) {
   1df90:	d402      	bmi.n	1df98 <device_found+0x24>
		printk("failed \n");
   1df92:	4842      	ldr	r0, [pc, #264]	; (1e09c <device_found+0x128>)
   1df94:	f7e3 fbee 	bl	1774 <printk>
	if (type == BT_LE_ADV_IND || type == BT_LE_ADV_DIRECT_IND) {
   1df98:	2f01      	cmp	r7, #1
   1df9a:	d848      	bhi.n	1e02e <device_found+0xba>
	while (ad->len > 1) {
   1df9c:	88a3      	ldrh	r3, [r4, #4]
   1df9e:	2b01      	cmp	r3, #1
   1dfa0:	d93e      	bls.n	1e020 <device_found+0xac>
		u8_t len = net_buf_simple_pull_u8(ad);
   1dfa2:	4620      	mov	r0, r4
   1dfa4:	f7f9 fe6a 	bl	17c7c <net_buf_simple_pull_u8>
		if (len == 0) {
   1dfa8:	4606      	mov	r6, r0
   1dfaa:	2800      	cmp	r0, #0
   1dfac:	d038      	beq.n	1e020 <device_found+0xac>
		if (len > ad->len) {
   1dfae:	88a2      	ldrh	r2, [r4, #4]
   1dfb0:	b283      	uxth	r3, r0
   1dfb2:	429a      	cmp	r2, r3
   1dfb4:	d334      	bcc.n	1e020 <device_found+0xac>
		type = net_buf_simple_pull_u8(ad);
   1dfb6:	4620      	mov	r0, r4
   1dfb8:	f7f9 fe60 	bl	17c7c <net_buf_simple_pull_u8>
	if (type != BT_DATA_UUID16_SOME && type != BT_DATA_UUID16_ALL) {
   1dfbc:	3802      	subs	r0, #2
   1dfbe:	b2c0      	uxtb	r0, r0
   1dfc0:	2801      	cmp	r0, #1
   1dfc2:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   1dfc6:	d803      	bhi.n	1dfd0 <device_found+0x5c>
		if (func(type, ad->data, len - 1, user_data)) {
   1dfc8:	b2f7      	uxtb	r7, r6
	if (data_len % sizeof(u16_t) != 0) {
   1dfca:	f017 0501 	ands.w	r5, r7, #1
   1dfce:	d02a      	beq.n	1e026 <device_found+0xb2>
		net_buf_simple_pull(ad, len - 1);
   1dfd0:	4631      	mov	r1, r6
   1dfd2:	4620      	mov	r0, r4
   1dfd4:	f7f9 fe4a 	bl	17c6c <net_buf_simple_pull>
   1dfd8:	e7e0      	b.n	1df9c <device_found+0x28>
		memcpy(&u16, &data[i], sizeof(u16));
   1dfda:	2202      	movs	r2, #2
   1dfdc:	eb09 0105 	add.w	r1, r9, r5
   1dfe0:	f10d 0006 	add.w	r0, sp, #6
   1dfe4:	f7e2 fc81 	bl	8ea <memcpy>
		uuid = BT_UUID_DECLARE_16(sys_le16_to_cpu(u16));
   1dfe8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1dfec:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (bt_uuid_cmp(uuid, BT_UUID_IPSS)) {
   1dff0:	a902      	add	r1, sp, #8
   1dff2:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
   1dff6:	a803      	add	r0, sp, #12
   1dff8:	f8ad 300a 	strh.w	r3, [sp, #10]
		uuid = BT_UUID_DECLARE_16(sys_le16_to_cpu(u16));
   1dffc:	f88d 800c 	strb.w	r8, [sp, #12]
		if (bt_uuid_cmp(uuid, BT_UUID_IPSS)) {
   1e000:	f88d 8008 	strb.w	r8, [sp, #8]
   1e004:	f7e5 fabe 	bl	3584 <bt_uuid_cmp>
   1e008:	4603      	mov	r3, r0
   1e00a:	b118      	cbz	r0, 1e014 <device_found+0xa0>
	for (i = 0; i < data_len; i += sizeof(u16_t)) {
   1e00c:	3502      	adds	r5, #2
   1e00e:	42bd      	cmp	r5, r7
   1e010:	dbe3      	blt.n	1dfda <device_found+0x66>
   1e012:	e7dd      	b.n	1dfd0 <device_found+0x5c>
   1e014:	4922      	ldr	r1, [pc, #136]	; (1e0a0 <device_found+0x12c>)
   1e016:	4602      	mov	r2, r0
   1e018:	6809      	ldr	r1, [r1, #0]
   1e01a:	4822      	ldr	r0, [pc, #136]	; (1e0a4 <device_found+0x130>)
   1e01c:	f7ff f9a2 	bl	1d364 <net_mgmt_event_notify_with_info>
}
   1e020:	b005      	add	sp, #20
   1e022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (func(type, ad->data, len - 1, user_data)) {
   1e026:	f8d4 9000 	ldr.w	r9, [r4]
		uuid = BT_UUID_DECLARE_16(sys_le16_to_cpu(u16));
   1e02a:	46a8      	mov	r8, r5
   1e02c:	e7ef      	b.n	1e00e <device_found+0x9a>
	else if(type == 0x07 && ad->len > 20){
   1e02e:	2f07      	cmp	r7, #7
   1e030:	d1f6      	bne.n	1e020 <device_found+0xac>
   1e032:	88a3      	ldrh	r3, [r4, #4]
   1e034:	2b14      	cmp	r3, #20
   1e036:	d9f3      	bls.n	1e020 <device_found+0xac>
		printk("aux packet \n");
   1e038:	481b      	ldr	r0, [pc, #108]	; (1e0a8 <device_found+0x134>)
   1e03a:	f7e3 fb9b 	bl	1774 <printk>
		buf_clone = buf;
   1e03e:	4b1b      	ldr	r3, [pc, #108]	; (1e0ac <device_found+0x138>)
		pkt = net_pkt_get_reserve_rx(0, K_FOREVER);
   1e040:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e044:	2000      	movs	r0, #0
		buf_clone = buf;
   1e046:	601e      	str	r6, [r3, #0]
		pkt = net_pkt_get_reserve_rx(0, K_FOREVER);
   1e048:	f7fb fa80 	bl	1954c <net_pkt_get_reserve_rx>
		net_pkt_ll_dst(pkt)->addr = bt_ctxt->src.val;
   1e04c:	4b18      	ldr	r3, [pc, #96]	; (1e0b0 <device_found+0x13c>)
   1e04e:	681b      	ldr	r3, [r3, #0]
   1e050:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
		net_pkt_ll_dst(pkt)->len = sizeof(bt_ctxt->src);
   1e054:	2106      	movs	r1, #6
		net_pkt_ll_src(pkt)->addr = bt_ctxt->dst.val;
   1e056:	33a6      	adds	r3, #166	; 0xa6
		net_pkt_ll_dst(pkt)->addr = bt_ctxt->src.val;
   1e058:	6282      	str	r2, [r0, #40]	; 0x28
		net_pkt_ll_dst(pkt)->type = NET_LINK_BLUETOOTH;
   1e05a:	2202      	movs	r2, #2
   1e05c:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
		net_pkt_ll_src(pkt)->addr = bt_ctxt->dst.val;
   1e060:	6203      	str	r3, [r0, #32]
		net_pkt_ll_src(pkt)->type = NET_LINK_BLUETOOTH;
   1e062:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
		pkt = net_pkt_get_reserve_rx(0, K_FOREVER);
   1e066:	4604      	mov	r4, r0
		net_pkt_ll_dst(pkt)->len = sizeof(bt_ctxt->src);
   1e068:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
		net_pkt_ll_src(pkt)->len = sizeof(bt_ctxt->dst);
   1e06c:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
		net_pkt_frag_insert(pkt, net_buf_ref(buf));
   1e070:	4630      	mov	r0, r6
   1e072:	f7f9 fd7b 	bl	17b6c <net_buf_ref>
   1e076:	4601      	mov	r1, r0
   1e078:	4620      	mov	r0, r4
   1e07a:	f7fb fae7 	bl	1964c <net_pkt_frag_insert>
		if (net_recv_data(bt_iface, pkt) < 0) {      // for receving the packet
   1e07e:	4621      	mov	r1, r4
   1e080:	6828      	ldr	r0, [r5, #0]
   1e082:	f7fa fa75 	bl	18570 <net_recv_data>
   1e086:	2800      	cmp	r0, #0
   1e088:	daca      	bge.n	1e020 <device_found+0xac>
			printk("Packet dropped by net_recv_data");
   1e08a:	480a      	ldr	r0, [pc, #40]	; (1e0b4 <device_found+0x140>)
   1e08c:	f7e3 fb72 	bl	1774 <printk>
			net_pkt_unref(pkt);
   1e090:	4620      	mov	r0, r4
   1e092:	f7fb fa9a 	bl	195ca <net_pkt_unref>
}
   1e096:	e7c3      	b.n	1e020 <device_found+0xac>
   1e098:	200051f0 	.word	0x200051f0
   1e09c:	00021394 	.word	0x00021394
   1e0a0:	2000e768 	.word	0x2000e768
   1e0a4:	e1550001 	.word	0xe1550001
   1e0a8:	0002139d 	.word	0x0002139d
   1e0ac:	200051f4 	.word	0x200051f4
   1e0b0:	20005200 	.word	0x20005200
   1e0b4:	000213aa 	.word	0x000213aa

0001e0b8 <ipsp_connected>:
{
   1e0b8:	b570      	push	{r4, r5, r6, lr}
   1e0ba:	b08e      	sub	sp, #56	; 0x38
   1e0bc:	4604      	mov	r4, r0
	if (bt_conn_get_info(chan->conn, &info) < 0) {
   1e0be:	a909      	add	r1, sp, #36	; 0x24
   1e0c0:	6800      	ldr	r0, [r0, #0]
   1e0c2:	f7e8 f814 	bl	60ee <bt_conn_get_info>
   1e0c6:	2800      	cmp	r0, #0
   1e0c8:	da04      	bge.n	1e0d4 <ipsp_connected+0x1c>
		bt_l2cap_chan_disconnect(chan);
   1e0ca:	4620      	mov	r0, r4
   1e0cc:	f7e8 fe48 	bl	6d60 <bt_l2cap_chan_disconnect>
}
   1e0d0:	b00e      	add	sp, #56	; 0x38
   1e0d2:	bd70      	pop	{r4, r5, r6, pc}
	sys_memcpy_swap(ctxt->src.val, info.le.src->a.val, sizeof(ctxt->src));
   1e0d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1e0d6:	f104 059c 	add.w	r5, r4, #156	; 0x9c
	src += length - 1;
   1e0da:	1d93      	adds	r3, r2, #6
   1e0dc:	f104 019b 	add.w	r1, r4, #155	; 0x9b
		*((u8_t *)dst++) = *((u8_t *)src--);
   1e0e0:	f813 0901 	ldrb.w	r0, [r3], #-1
   1e0e4:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
   1e0e8:	429a      	cmp	r2, r3
   1e0ea:	d1f9      	bne.n	1e0e0 <ipsp_connected+0x28>
	sys_memcpy_swap(ctxt->dst.val, info.le.dst->a.val, sizeof(ctxt->dst));
   1e0ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1e0ee:	f104 01a2 	add.w	r1, r4, #162	; 0xa2
	src += length - 1;
   1e0f2:	1d93      	adds	r3, r2, #6
   1e0f4:	f104 00a1 	add.w	r0, r4, #161	; 0xa1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1e0f8:	f813 6901 	ldrb.w	r6, [r3], #-1
   1e0fc:	f800 6f01 	strb.w	r6, [r0, #1]!
	for (; length > 0; length--) {
   1e100:	429a      	cmp	r2, r3
   1e102:	d1f9      	bne.n	1e0f8 <ipsp_connected+0x40>
	net_if_set_link_addr(ctxt->iface, ctxt->src.val, sizeof(ctxt->src.val),
   1e104:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1e108:	f3bf 8f5b 	dmb	ish
   1e10c:	68da      	ldr	r2, [r3, #12]
   1e10e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1e112:	07d2      	lsls	r2, r2, #31
   1e114:	d404      	bmi.n	1e120 <ipsp_connected+0x68>
	iface->link_addr.len = len;
   1e116:	2206      	movs	r2, #6
   1e118:	751a      	strb	r2, [r3, #20]
	iface->link_addr.type = type;
   1e11a:	2202      	movs	r2, #2
	iface->link_addr.addr = addr;
   1e11c:	611d      	str	r5, [r3, #16]
	iface->link_addr.type = type;
   1e11e:	755a      	strb	r2, [r3, #21]
	ll.len = sizeof(ctxt->dst.val);
   1e120:	2306      	movs	r3, #6
   1e122:	f88d 3010 	strb.w	r3, [sp, #16]
	ll.type = NET_LINK_BLUETOOTH;
   1e126:	2302      	movs	r3, #2
   1e128:	f88d 3011 	strb.w	r3, [sp, #17]
	addr->s6_addr[1] = 0x80;
   1e12c:	2380      	movs	r3, #128	; 0x80
	addr->s6_addr[0] = 0xfe;
   1e12e:	25fe      	movs	r5, #254	; 0xfe
	addr->s6_addr[1] = 0x80;
   1e130:	f88d 3015 	strb.w	r3, [sp, #21]
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1e134:	2203      	movs	r2, #3
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1e136:	2300      	movs	r3, #0
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1e138:	a807      	add	r0, sp, #28
	ll.addr = ctxt->dst.val;
   1e13a:	9103      	str	r1, [sp, #12]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1e13c:	f8ad 3016 	strh.w	r3, [sp, #22]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1e140:	9306      	str	r3, [sp, #24]
	addr->s6_addr[0] = 0xfe;
   1e142:	f88d 5014 	strb.w	r5, [sp, #20]
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1e146:	f7e2 fbd0 	bl	8ea <memcpy>
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1e14a:	9903      	ldr	r1, [sp, #12]
		addr->s6_addr[12] = 0xfe;
   1e14c:	f88d 5020 	strb.w	r5, [sp, #32]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1e150:	2203      	movs	r2, #3
		addr->s6_addr[11] = 0xff;
   1e152:	23ff      	movs	r3, #255	; 0xff
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1e154:	4411      	add	r1, r2
   1e156:	f10d 0021 	add.w	r0, sp, #33	; 0x21
		addr->s6_addr[11] = 0xff;
   1e15a:	f88d 301f 	strb.w	r3, [sp, #31]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1e15e:	f7e2 fbc4 	bl	8ea <memcpy>
		if (lladdr->type == NET_LINK_ETHERNET) {
   1e162:	f89d 3011 	ldrb.w	r3, [sp, #17]
	net_ipv6_nbr_add(ctxt->iface, &in6, &ll, false,
   1e166:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1e16a:	2b03      	cmp	r3, #3
			addr->s6_addr[8] ^= 0x02;
   1e16c:	bf02      	ittt	eq
   1e16e:	f89d 301c 	ldrbeq.w	r3, [sp, #28]
   1e172:	f083 0302 	eoreq.w	r3, r3, #2
   1e176:	f88d 301c 	strbeq.w	r3, [sp, #28]
   1e17a:	2305      	movs	r3, #5
   1e17c:	9300      	str	r3, [sp, #0]
   1e17e:	aa03      	add	r2, sp, #12
   1e180:	2300      	movs	r3, #0
   1e182:	a905      	add	r1, sp, #20
   1e184:	f7fe f8ae 	bl	1c2e4 <net_ipv6_nbr_add>
	connection_base = false;
   1e188:	4b03      	ldr	r3, [pc, #12]	; (1e198 <ipsp_connected+0xe0>)
	net_if_up(ctxt->iface);
   1e18a:	f854 0c04 	ldr.w	r0, [r4, #-4]
	connection_base = false;
   1e18e:	2200      	movs	r2, #0
   1e190:	701a      	strb	r2, [r3, #0]
	net_if_up(ctxt->iface);
   1e192:	f7fb f8b1 	bl	192f8 <net_if_up>
   1e196:	e79b      	b.n	1e0d0 <ipsp_connected+0x18>
   1e198:	200032d5 	.word	0x200032d5

0001e19c <net_mgmt_NET_REQUEST_BT_ADVERTISE>:
{
   1e19c:	b510      	push	{r4, lr}
	if (!strcmp(data, "on")) {
   1e19e:	4913      	ldr	r1, [pc, #76]	; (1e1ec <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x50>)
{
   1e1a0:	b086      	sub	sp, #24
	if (!strcmp(data, "on")) {
   1e1a2:	4610      	mov	r0, r2
{
   1e1a4:	4614      	mov	r4, r2
	if (!strcmp(data, "on")) {
   1e1a6:	f7e2 fb4a 	bl	83e <strcmp>
   1e1aa:	b9a0      	cbnz	r0, 1e1d6 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x3a>
		return bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   1e1ac:	22a0      	movs	r2, #160	; 0xa0
   1e1ae:	9003      	str	r0, [sp, #12]
   1e1b0:	2301      	movs	r3, #1
   1e1b2:	f8ad 200e 	strh.w	r2, [sp, #14]
   1e1b6:	22f0      	movs	r2, #240	; 0xf0
   1e1b8:	9004      	str	r0, [sp, #16]
   1e1ba:	9005      	str	r0, [sp, #20]
   1e1bc:	f88d 300c 	strb.w	r3, [sp, #12]
   1e1c0:	f8ad 2010 	strh.w	r2, [sp, #16]
   1e1c4:	9300      	str	r3, [sp, #0]
   1e1c6:	2202      	movs	r2, #2
   1e1c8:	4b09      	ldr	r3, [pc, #36]	; (1e1f0 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x54>)
   1e1ca:	490a      	ldr	r1, [pc, #40]	; (1e1f4 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x58>)
   1e1cc:	a803      	add	r0, sp, #12
   1e1ce:	f7e7 f991 	bl	54f4 <bt_le_adv_start>
}
   1e1d2:	b006      	add	sp, #24
   1e1d4:	bd10      	pop	{r4, pc}
	} else if (!strcmp(data, "off")) {
   1e1d6:	4908      	ldr	r1, [pc, #32]	; (1e1f8 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x5c>)
   1e1d8:	4620      	mov	r0, r4
   1e1da:	f7e2 fb30 	bl	83e <strcmp>
   1e1de:	b910      	cbnz	r0, 1e1e6 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x4a>
		return bt_le_adv_stop();
   1e1e0:	f7e7 fa54 	bl	568c <bt_le_adv_stop>
   1e1e4:	e7f5      	b.n	1e1d2 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x36>
		return -EINVAL;
   1e1e6:	f06f 0015 	mvn.w	r0, #21
   1e1ea:	e7f2      	b.n	1e1d2 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x36>
   1e1ec:	00021364 	.word	0x00021364
   1e1f0:	000213d0 	.word	0x000213d0
   1e1f4:	00021354 	.word	0x00021354
   1e1f8:	000214ce 	.word	0x000214ce

0001e1fc <net_mgmt_NET_REQUEST_BT_CONNECT>:
{
   1e1fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e1fe:	6809      	ldr	r1, [r1, #0]
	bt_ctxt = net_if_get_device(iface)->driver_data;
   1e200:	4812      	ldr	r0, [pc, #72]	; (1e24c <net_mgmt_NET_REQUEST_BT_CONNECT+0x50>)
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e202:	6889      	ldr	r1, [r1, #8]
	bt_ctxt = net_if_get_device(iface)->driver_data;
   1e204:	6001      	str	r1, [r0, #0]
	if (len != sizeof(*addr)) {
   1e206:	2b07      	cmp	r3, #7
   1e208:	d119      	bne.n	1e23e <net_mgmt_NET_REQUEST_BT_CONNECT+0x42>
	if (ctxt->ipsp_chan.chan.conn) {
   1e20a:	684b      	ldr	r3, [r1, #4]
   1e20c:	b9d3      	cbnz	r3, 1e244 <net_mgmt_NET_REQUEST_BT_CONNECT+0x48>
	if (default_conn) {
   1e20e:	4d10      	ldr	r5, [pc, #64]	; (1e250 <net_mgmt_NET_REQUEST_BT_CONNECT+0x54>)
   1e210:	682c      	ldr	r4, [r5, #0]
   1e212:	b134      	cbz	r4, 1e222 <net_mgmt_NET_REQUEST_BT_CONNECT+0x26>
		return bt_l2cap_chan_connect(default_conn,
   1e214:	2223      	movs	r2, #35	; 0x23
   1e216:	3104      	adds	r1, #4
   1e218:	4620      	mov	r0, r4
   1e21a:	f7e8 fd6f 	bl	6cfc <bt_l2cap_chan_connect>
}
   1e21e:	b003      	add	sp, #12
   1e220:	bd30      	pop	{r4, r5, pc}
	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
   1e222:	490c      	ldr	r1, [pc, #48]	; (1e254 <net_mgmt_NET_REQUEST_BT_CONNECT+0x58>)
   1e224:	6808      	ldr	r0, [r1, #0]
   1e226:	6849      	ldr	r1, [r1, #4]
   1e228:	466b      	mov	r3, sp
   1e22a:	c303      	stmia	r3!, {r0, r1}
   1e22c:	4669      	mov	r1, sp
   1e22e:	4610      	mov	r0, r2
   1e230:	f7e7 ff9c 	bl	616c <bt_conn_create_le>
	connectionless = false;
   1e234:	4b08      	ldr	r3, [pc, #32]	; (1e258 <net_mgmt_NET_REQUEST_BT_CONNECT+0x5c>)
	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
   1e236:	6028      	str	r0, [r5, #0]
	connectionless = false;
   1e238:	701c      	strb	r4, [r3, #0]
   1e23a:	4620      	mov	r0, r4
   1e23c:	e7ef      	b.n	1e21e <net_mgmt_NET_REQUEST_BT_CONNECT+0x22>
		return -EINVAL;
   1e23e:	f06f 0015 	mvn.w	r0, #21
   1e242:	e7ec      	b.n	1e21e <net_mgmt_NET_REQUEST_BT_CONNECT+0x22>
		return -ENOMEM;
   1e244:	f06f 000b 	mvn.w	r0, #11
   1e248:	e7e9      	b.n	1e21e <net_mgmt_NET_REQUEST_BT_CONNECT+0x22>
   1e24a:	bf00      	nop
   1e24c:	20005200 	.word	0x20005200
   1e250:	200051f8 	.word	0x200051f8
   1e254:	00020634 	.word	0x00020634
   1e258:	200032d6 	.word	0x200032d6

0001e25c <net_mgmt_NET_REQUEST_BT_SCAN>:
{
   1e25c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!strcmp(data, "on") || !strcmp(data, "active")) {
   1e25e:	491b      	ldr	r1, [pc, #108]	; (1e2cc <net_mgmt_NET_REQUEST_BT_SCAN+0x70>)
   1e260:	4610      	mov	r0, r2
{
   1e262:	4615      	mov	r5, r2
	if (!strcmp(data, "on") || !strcmp(data, "active")) {
   1e264:	f7e2 faeb 	bl	83e <strcmp>
   1e268:	b958      	cbnz	r0, 1e282 <net_mgmt_NET_REQUEST_BT_SCAN+0x26>
	err = bt_le_scan_start(&scan_param, device_found);
   1e26a:	4919      	ldr	r1, [pc, #100]	; (1e2d0 <net_mgmt_NET_REQUEST_BT_SCAN+0x74>)
   1e26c:	4819      	ldr	r0, [pc, #100]	; (1e2d4 <net_mgmt_NET_REQUEST_BT_SCAN+0x78>)
   1e26e:	f7e7 fa33 	bl	56d8 <bt_le_scan_start>
	if (err) {
   1e272:	4604      	mov	r4, r0
   1e274:	bb28      	cbnz	r0, 1e2c2 <net_mgmt_NET_REQUEST_BT_SCAN+0x66>
		printk("scan actiavted");
   1e276:	4818      	ldr	r0, [pc, #96]	; (1e2d8 <net_mgmt_NET_REQUEST_BT_SCAN+0x7c>)
   1e278:	f7e3 fa7c 	bl	1774 <printk>
}
   1e27c:	4620      	mov	r0, r4
   1e27e:	b003      	add	sp, #12
   1e280:	bd30      	pop	{r4, r5, pc}
	if (!strcmp(data, "on") || !strcmp(data, "active")) {
   1e282:	4916      	ldr	r1, [pc, #88]	; (1e2dc <net_mgmt_NET_REQUEST_BT_SCAN+0x80>)
   1e284:	4628      	mov	r0, r5
   1e286:	f7e2 fada 	bl	83e <strcmp>
   1e28a:	2800      	cmp	r0, #0
   1e28c:	d0ed      	beq.n	1e26a <net_mgmt_NET_REQUEST_BT_SCAN+0xe>
	} else if (!strcmp(data, "passive")) {
   1e28e:	4914      	ldr	r1, [pc, #80]	; (1e2e0 <net_mgmt_NET_REQUEST_BT_SCAN+0x84>)
   1e290:	4628      	mov	r0, r5
   1e292:	f7e2 fad4 	bl	83e <strcmp>
   1e296:	4604      	mov	r4, r0
   1e298:	b950      	cbnz	r0, 1e2b0 <net_mgmt_NET_REQUEST_BT_SCAN+0x54>
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
   1e29a:	4b12      	ldr	r3, [pc, #72]	; (1e2e4 <net_mgmt_NET_REQUEST_BT_SCAN+0x88>)
   1e29c:	490c      	ldr	r1, [pc, #48]	; (1e2d0 <net_mgmt_NET_REQUEST_BT_SCAN+0x74>)
   1e29e:	6818      	ldr	r0, [r3, #0]
   1e2a0:	9000      	str	r0, [sp, #0]
   1e2a2:	889b      	ldrh	r3, [r3, #4]
   1e2a4:	f8ad 3004 	strh.w	r3, [sp, #4]
   1e2a8:	4668      	mov	r0, sp
   1e2aa:	f7e7 fa15 	bl	56d8 <bt_le_scan_start>
   1e2ae:	e7e5      	b.n	1e27c <net_mgmt_NET_REQUEST_BT_SCAN+0x20>
	} else if (!strcmp("off", data)) {
   1e2b0:	4629      	mov	r1, r5
   1e2b2:	480d      	ldr	r0, [pc, #52]	; (1e2e8 <net_mgmt_NET_REQUEST_BT_SCAN+0x8c>)
   1e2b4:	f7e2 fac3 	bl	83e <strcmp>
   1e2b8:	4604      	mov	r4, r0
   1e2ba:	b920      	cbnz	r0, 1e2c6 <net_mgmt_NET_REQUEST_BT_SCAN+0x6a>
	err = bt_le_scan_stop();
   1e2bc:	f7e7 fa5e 	bl	577c <bt_le_scan_stop>
   1e2c0:	e7dc      	b.n	1e27c <net_mgmt_NET_REQUEST_BT_SCAN+0x20>
	return 0;
   1e2c2:	2400      	movs	r4, #0
   1e2c4:	e7da      	b.n	1e27c <net_mgmt_NET_REQUEST_BT_SCAN+0x20>
		return -EINVAL;
   1e2c6:	f06f 0415 	mvn.w	r4, #21
   1e2ca:	e7d7      	b.n	1e27c <net_mgmt_NET_REQUEST_BT_SCAN+0x20>
   1e2cc:	00021364 	.word	0x00021364
   1e2d0:	0001df75 	.word	0x0001df75
   1e2d4:	2000e84c 	.word	0x2000e84c
   1e2d8:	0002136e 	.word	0x0002136e
   1e2dc:	00021367 	.word	0x00021367
   1e2e0:	0002137d 	.word	0x0002137d
   1e2e4:	0002063c 	.word	0x0002063c
   1e2e8:	000214ce 	.word	0x000214ce

0001e2ec <net_mgmt_NET_REQUEST_BT_DISCONNECT>:
{
   1e2ec:	b538      	push	{r3, r4, r5, lr}
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e2ee:	680b      	ldr	r3, [r1, #0]
   1e2f0:	689d      	ldr	r5, [r3, #8]
	if (!ctxt->ipsp_chan.chan.conn) {
   1e2f2:	686b      	ldr	r3, [r5, #4]
   1e2f4:	b193      	cbz	r3, 1e31c <net_mgmt_NET_REQUEST_BT_DISCONNECT+0x30>
	if (default_conn) {
   1e2f6:	4c0b      	ldr	r4, [pc, #44]	; (1e324 <net_mgmt_NET_REQUEST_BT_DISCONNECT+0x38>)
   1e2f8:	6820      	ldr	r0, [r4, #0]
   1e2fa:	b138      	cbz	r0, 1e30c <net_mgmt_NET_REQUEST_BT_DISCONNECT+0x20>
		bt_conn_unref(default_conn);
   1e2fc:	f7e7 fef4 	bl	60e8 <bt_conn_unref>
		if(!bt_hci_disconnect(default_conn, 0x05)){
   1e300:	2105      	movs	r1, #5
   1e302:	6820      	ldr	r0, [r4, #0]
   1e304:	f7e7 ff11 	bl	612a <bt_hci_disconnect>
		default_conn = NULL;
   1e308:	2300      	movs	r3, #0
   1e30a:	6023      	str	r3, [r4, #0]
	ble_connected = true;
   1e30c:	4b06      	ldr	r3, [pc, #24]	; (1e328 <net_mgmt_NET_REQUEST_BT_DISCONNECT+0x3c>)
   1e30e:	2201      	movs	r2, #1
   1e310:	701a      	strb	r2, [r3, #0]
	return bt_l2cap_chan_disconnect(&ctxt->ipsp_chan.chan);
   1e312:	1d28      	adds	r0, r5, #4
}
   1e314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_chan_disconnect(&ctxt->ipsp_chan.chan);
   1e318:	f7e8 bd22 	b.w	6d60 <bt_l2cap_chan_disconnect>
}
   1e31c:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1e320:	bd38      	pop	{r3, r4, r5, pc}
   1e322:	bf00      	nop
   1e324:	200051f8 	.word	0x200051f8
   1e328:	200032d4 	.word	0x200032d4

0001e32c <net_mgmt_NET_REQUEST_BT_SWITCH>:
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e32c:	680b      	ldr	r3, [r1, #0]
{
   1e32e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!strcmp( data, "connless")){
   1e332:	4610      	mov	r0, r2
{
   1e334:	4688      	mov	r8, r1
	if (!strcmp( data, "connless")){
   1e336:	4921      	ldr	r1, [pc, #132]	; (1e3bc <net_mgmt_NET_REQUEST_BT_SWITCH+0x90>)
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e338:	689d      	ldr	r5, [r3, #8]
{
   1e33a:	4614      	mov	r4, r2
	if (!strcmp( data, "connless")){
   1e33c:	f7e2 fa7f 	bl	83e <strcmp>
   1e340:	4607      	mov	r7, r0
   1e342:	bb08      	cbnz	r0, 1e388 <net_mgmt_NET_REQUEST_BT_SWITCH+0x5c>
		bt_ctxt = net_if_get_device(iface)->driver_data;
   1e344:	f8d8 3000 	ldr.w	r3, [r8]
   1e348:	689a      	ldr	r2, [r3, #8]
   1e34a:	4b1d      	ldr	r3, [pc, #116]	; (1e3c0 <net_mgmt_NET_REQUEST_BT_SWITCH+0x94>)
   1e34c:	601a      	str	r2, [r3, #0]
		if (!ctxt->ipsp_chan.chan.conn) {
   1e34e:	686b      	ldr	r3, [r5, #4]
   1e350:	b38b      	cbz	r3, 1e3b6 <net_mgmt_NET_REQUEST_BT_SWITCH+0x8a>
		if (default_conn) {
   1e352:	4c1c      	ldr	r4, [pc, #112]	; (1e3c4 <net_mgmt_NET_REQUEST_BT_SWITCH+0x98>)
   1e354:	6820      	ldr	r0, [r4, #0]
   1e356:	b160      	cbz	r0, 1e372 <net_mgmt_NET_REQUEST_BT_SWITCH+0x46>
			bt_conn_unref(default_conn);
   1e358:	f7e7 fec6 	bl	60e8 <bt_conn_unref>
			if(!bt_hci_disconnect(default_conn, 0x1A)){
   1e35c:	211a      	movs	r1, #26
   1e35e:	6820      	ldr	r0, [r4, #0]
   1e360:	f7e7 fee3 	bl	612a <bt_hci_disconnect>
   1e364:	b970      	cbnz	r0, 1e384 <net_mgmt_NET_REQUEST_BT_SWITCH+0x58>
				printk("sucessful");
   1e366:	4818      	ldr	r0, [pc, #96]	; (1e3c8 <net_mgmt_NET_REQUEST_BT_SWITCH+0x9c>)
   1e368:	f7e3 fa04 	bl	1774 <printk>
				sucesss = true;
   1e36c:	2601      	movs	r6, #1
			default_conn = NULL;
   1e36e:	2300      	movs	r3, #0
   1e370:	6023      	str	r3, [r4, #0]
		if(sucesss){
   1e372:	b1ee      	cbz	r6, 1e3b0 <net_mgmt_NET_REQUEST_BT_SWITCH+0x84>
			connectionless = true;
   1e374:	4b15      	ldr	r3, [pc, #84]	; (1e3cc <net_mgmt_NET_REQUEST_BT_SWITCH+0xa0>)
   1e376:	2201      	movs	r2, #1
			return bt_l2cap_chan_disconnect(&ctxt->ipsp_chan.chan);
   1e378:	1d28      	adds	r0, r5, #4
}
   1e37a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			connectionless = true;
   1e37e:	701a      	strb	r2, [r3, #0]
			return bt_l2cap_chan_disconnect(&ctxt->ipsp_chan.chan);
   1e380:	f7e8 bcee 	b.w	6d60 <bt_l2cap_chan_disconnect>
				sucesss = false;
   1e384:	463e      	mov	r6, r7
   1e386:	e7f2      	b.n	1e36e <net_mgmt_NET_REQUEST_BT_SWITCH+0x42>
	}else if(!strcmp( data, "conn")){
   1e388:	4620      	mov	r0, r4
   1e38a:	4911      	ldr	r1, [pc, #68]	; (1e3d0 <net_mgmt_NET_REQUEST_BT_SWITCH+0xa4>)
   1e38c:	f7e2 fa57 	bl	83e <strcmp>
   1e390:	4604      	mov	r4, r0
   1e392:	b968      	cbnz	r0, 1e3b0 <net_mgmt_NET_REQUEST_BT_SWITCH+0x84>
		connectionless = false;
   1e394:	4b0d      	ldr	r3, [pc, #52]	; (1e3cc <net_mgmt_NET_REQUEST_BT_SWITCH+0xa0>)
   1e396:	7018      	strb	r0, [r3, #0]
		connection_base = true;
   1e398:	4b0e      	ldr	r3, [pc, #56]	; (1e3d4 <net_mgmt_NET_REQUEST_BT_SWITCH+0xa8>)
   1e39a:	2201      	movs	r2, #1
   1e39c:	701a      	strb	r2, [r3, #0]
		ext_adv_actiavte = false;
   1e39e:	4b0e      	ldr	r3, [pc, #56]	; (1e3d8 <net_mgmt_NET_REQUEST_BT_SWITCH+0xac>)
   1e3a0:	7018      	strb	r0, [r3, #0]
		bt_le_ext_adv_stop();
   1e3a2:	f7e7 f937 	bl	5614 <bt_le_ext_adv_stop>
		net_if_carrier_down(bt_ctxt->iface);
   1e3a6:	4b06      	ldr	r3, [pc, #24]	; (1e3c0 <net_mgmt_NET_REQUEST_BT_SWITCH+0x94>)
   1e3a8:	681b      	ldr	r3, [r3, #0]
   1e3aa:	6818      	ldr	r0, [r3, #0]
   1e3ac:	f7fa ffd0 	bl	19350 <net_if_carrier_down>
}
   1e3b0:	4620      	mov	r0, r4
   1e3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ENOTCONN;
   1e3b6:	f06f 0438 	mvn.w	r4, #56	; 0x38
   1e3ba:	e7f9      	b.n	1e3b0 <net_mgmt_NET_REQUEST_BT_SWITCH+0x84>
   1e3bc:	0002153b 	.word	0x0002153b
   1e3c0:	20005200 	.word	0x20005200
   1e3c4:	200051f8 	.word	0x200051f8
   1e3c8:	00021385 	.word	0x00021385
   1e3cc:	200032d6 	.word	0x200032d6
   1e3d0:	0002138f 	.word	0x0002138f
   1e3d4:	200032d5 	.word	0x200032d5
   1e3d8:	200032d7 	.word	0x200032d7

0001e3dc <shell_cmd_switch>:

	return 0;
}

static int shell_cmd_switch(int argc, char *argv[])
{
   1e3dc:	b538      	push	{r3, r4, r5, lr}
   1e3de:	460c      	mov	r4, r1
	struct net_if *iface = net_if_get_default();
   1e3e0:	f7fa f9a2 	bl	18728 <net_if_get_default>

	if (net_mgmt(NET_REQUEST_BT_SWITCH, iface,  argv[1], strlen(argv[1]))) {
   1e3e4:	6864      	ldr	r4, [r4, #4]
	struct net_if *iface = net_if_get_default();
   1e3e6:	4605      	mov	r5, r0
	if (net_mgmt(NET_REQUEST_BT_SWITCH, iface,  argv[1], strlen(argv[1]))) {
   1e3e8:	4620      	mov	r0, r4
   1e3ea:	f7e2 fa20 	bl	82e <strlen>
   1e3ee:	4622      	mov	r2, r4
   1e3f0:	4603      	mov	r3, r0
   1e3f2:	4629      	mov	r1, r5
   1e3f4:	4805      	ldr	r0, [pc, #20]	; (1e40c <shell_cmd_switch+0x30>)
   1e3f6:	f7ff ff99 	bl	1e32c <net_mgmt_NET_REQUEST_BT_SWITCH>
   1e3fa:	b120      	cbz	r0, 1e406 <shell_cmd_switch+0x2a>
		printk("switch failed\n");
   1e3fc:	4804      	ldr	r0, [pc, #16]	; (1e410 <shell_cmd_switch+0x34>)
	} else {
		printk("switched\n");
   1e3fe:	f7e3 f9b9 	bl	1774 <printk>
	}

	return 0;
}
   1e402:	2000      	movs	r0, #0
   1e404:	bd38      	pop	{r3, r4, r5, pc}
		printk("switched\n");
   1e406:	4803      	ldr	r0, [pc, #12]	; (1e414 <shell_cmd_switch+0x38>)
   1e408:	e7f9      	b.n	1e3fe <shell_cmd_switch+0x22>
   1e40a:	bf00      	nop
   1e40c:	61550005 	.word	0x61550005
   1e410:	000214a8 	.word	0x000214a8
   1e414:	000214b7 	.word	0x000214b7

0001e418 <shell_cmd_disconnect>:


static int shell_cmd_disconnect(int argc, char *argv[])
{
   1e418:	b508      	push	{r3, lr}
	struct net_if *iface = net_if_get_default();
   1e41a:	f7fa f985 	bl	18728 <net_if_get_default>

	if (net_mgmt(NET_REQUEST_BT_DISCONNECT, iface, NULL, 0)) {
   1e41e:	2300      	movs	r3, #0
   1e420:	4601      	mov	r1, r0
   1e422:	461a      	mov	r2, r3
   1e424:	4805      	ldr	r0, [pc, #20]	; (1e43c <shell_cmd_disconnect+0x24>)
   1e426:	f7ff ff61 	bl	1e2ec <net_mgmt_NET_REQUEST_BT_DISCONNECT>
   1e42a:	b120      	cbz	r0, 1e436 <shell_cmd_disconnect+0x1e>
		printk("Disconnect failed\n");
   1e42c:	4804      	ldr	r0, [pc, #16]	; (1e440 <shell_cmd_disconnect+0x28>)
	} else {
		printk("Disconnected\n");
   1e42e:	f7e3 f9a1 	bl	1774 <printk>
	}

	return 0;
}
   1e432:	2000      	movs	r0, #0
   1e434:	bd08      	pop	{r3, pc}
		printk("Disconnected\n");
   1e436:	4803      	ldr	r0, [pc, #12]	; (1e444 <shell_cmd_disconnect+0x2c>)
   1e438:	e7f9      	b.n	1e42e <shell_cmd_disconnect+0x16>
   1e43a:	bf00      	nop
   1e43c:	61550004 	.word	0x61550004
   1e440:	00021468 	.word	0x00021468
   1e444:	0002147b 	.word	0x0002147b

0001e448 <shell_cmd_scan>:
{
   1e448:	b570      	push	{r4, r5, r6, lr}
   1e44a:	4606      	mov	r6, r0
   1e44c:	460c      	mov	r4, r1
	struct net_if *iface = net_if_get_default();
   1e44e:	f7fa f96b 	bl	18728 <net_if_get_default>
	if (argc < 2) {
   1e452:	2e01      	cmp	r6, #1
	struct net_if *iface = net_if_get_default();
   1e454:	4605      	mov	r5, r0
	if (argc < 2) {
   1e456:	dd15      	ble.n	1e484 <shell_cmd_scan+0x3c>
	if (net_mgmt(NET_REQUEST_BT_SCAN, iface, argv[1], strlen(argv[1]))) {
   1e458:	6864      	ldr	r4, [r4, #4]
   1e45a:	4620      	mov	r0, r4
   1e45c:	f7e2 f9e7 	bl	82e <strlen>
   1e460:	4622      	mov	r2, r4
   1e462:	4603      	mov	r3, r0
   1e464:	4629      	mov	r1, r5
   1e466:	4809      	ldr	r0, [pc, #36]	; (1e48c <shell_cmd_scan+0x44>)
   1e468:	f7ff fef8 	bl	1e25c <net_mgmt_NET_REQUEST_BT_SCAN>
   1e46c:	4604      	mov	r4, r0
   1e46e:	b128      	cbz	r0, 1e47c <shell_cmd_scan+0x34>
		printk("Scan failed\n");
   1e470:	4807      	ldr	r0, [pc, #28]	; (1e490 <shell_cmd_scan+0x48>)
   1e472:	f7e3 f97f 	bl	1774 <printk>
	return 0;
   1e476:	2400      	movs	r4, #0
}
   1e478:	4620      	mov	r0, r4
   1e47a:	bd70      	pop	{r4, r5, r6, pc}
		printk("Scan in progress\n");
   1e47c:	4805      	ldr	r0, [pc, #20]	; (1e494 <shell_cmd_scan+0x4c>)
   1e47e:	f7e3 f979 	bl	1774 <printk>
   1e482:	e7f9      	b.n	1e478 <shell_cmd_scan+0x30>
		return -EINVAL;
   1e484:	f06f 0415 	mvn.w	r4, #21
   1e488:	e7f6      	b.n	1e478 <shell_cmd_scan+0x30>
   1e48a:	bf00      	nop
   1e48c:	61550003 	.word	0x61550003
   1e490:	00021489 	.word	0x00021489
   1e494:	00021496 	.word	0x00021496

0001e498 <shell_cmd_advertise>:

static int shell_cmd_advertise(int argc, char *argv[])
{
   1e498:	b570      	push	{r4, r5, r6, lr}
   1e49a:	4606      	mov	r6, r0
   1e49c:	460c      	mov	r4, r1
	struct net_if *iface = net_if_get_default();
   1e49e:	f7fa f943 	bl	18728 <net_if_get_default>

	if (argc < 2) {
   1e4a2:	2e01      	cmp	r6, #1
	struct net_if *iface = net_if_get_default();
   1e4a4:	4605      	mov	r5, r0
	if (argc < 2) {
   1e4a6:	dd15      	ble.n	1e4d4 <shell_cmd_advertise+0x3c>
		return -EINVAL;
	}

	if (net_mgmt(NET_REQUEST_BT_ADVERTISE, iface, argv[1],
   1e4a8:	6864      	ldr	r4, [r4, #4]
   1e4aa:	4620      	mov	r0, r4
   1e4ac:	f7e2 f9bf 	bl	82e <strlen>
   1e4b0:	4622      	mov	r2, r4
   1e4b2:	4603      	mov	r3, r0
   1e4b4:	4629      	mov	r1, r5
   1e4b6:	4809      	ldr	r0, [pc, #36]	; (1e4dc <shell_cmd_advertise+0x44>)
   1e4b8:	f7ff fe70 	bl	1e19c <net_mgmt_NET_REQUEST_BT_ADVERTISE>
   1e4bc:	4604      	mov	r4, r0
   1e4be:	b128      	cbz	r0, 1e4cc <shell_cmd_advertise+0x34>
		     strlen(argv[1]))) {
		printk("Advertise failed\n");
   1e4c0:	4807      	ldr	r0, [pc, #28]	; (1e4e0 <shell_cmd_advertise+0x48>)
   1e4c2:	f7e3 f957 	bl	1774 <printk>
	} else {
		printk("Advertise in progress\n");
	}

	return 0;
   1e4c6:	2400      	movs	r4, #0
}
   1e4c8:	4620      	mov	r0, r4
   1e4ca:	bd70      	pop	{r4, r5, r6, pc}
		printk("Advertise in progress\n");
   1e4cc:	4805      	ldr	r0, [pc, #20]	; (1e4e4 <shell_cmd_advertise+0x4c>)
   1e4ce:	f7e3 f951 	bl	1774 <printk>
   1e4d2:	e7f9      	b.n	1e4c8 <shell_cmd_advertise+0x30>
		return -EINVAL;
   1e4d4:	f06f 0415 	mvn.w	r4, #21
   1e4d8:	e7f6      	b.n	1e4c8 <shell_cmd_advertise+0x30>
   1e4da:	bf00      	nop
   1e4dc:	61550001 	.word	0x61550001
   1e4e0:	000213e7 	.word	0x000213e7
   1e4e4:	000213f9 	.word	0x000213f9

0001e4e8 <shell_cmd_connect>:
{
   1e4e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e4ea:	4606      	mov	r6, r0
   1e4ec:	460c      	mov	r4, r1
	struct net_if *iface = net_if_get_default();
   1e4ee:	f7fa f91b 	bl	18728 <net_if_get_default>
	if (argc < 3) {
   1e4f2:	2e02      	cmp	r6, #2
	struct net_if *iface = net_if_get_default();
   1e4f4:	4605      	mov	r5, r0
	if (argc < 3) {
   1e4f6:	dd73      	ble.n	1e5e0 <shell_cmd_connect+0xf8>
	err = str2bt_addr_le(argv[1], argv[2], &addr);
   1e4f8:	6866      	ldr	r6, [r4, #4]
   1e4fa:	68a4      	ldr	r4, [r4, #8]
	if (strlen(str) != 17) {
   1e4fc:	4630      	mov	r0, r6
   1e4fe:	f7e2 f996 	bl	82e <strlen>
   1e502:	2811      	cmp	r0, #17
   1e504:	d125      	bne.n	1e552 <shell_cmd_connect+0x6a>
   1e506:	4630      	mov	r0, r6
   1e508:	f04f 0e05 	mov.w	lr, #5
   1e50c:	2601      	movs	r6, #1
		if (!(j % 3) && (*str != ':')) {
   1e50e:	f04f 0c03 	mov.w	ip, #3
	for (i = 5, j = 1; *str != '\0'; str++, j++) {
   1e512:	7802      	ldrb	r2, [r0, #0]
   1e514:	b9aa      	cbnz	r2, 1e542 <shell_cmd_connect+0x5a>
	if (!strcmp(type, "public") || !strcmp(type, "(public)")) {
   1e516:	4935      	ldr	r1, [pc, #212]	; (1e5ec <shell_cmd_connect+0x104>)
   1e518:	4620      	mov	r0, r4
   1e51a:	f7e2 f990 	bl	83e <strcmp>
   1e51e:	2800      	cmp	r0, #0
   1e520:	d146      	bne.n	1e5b0 <shell_cmd_connect+0xc8>
		addr->type = BT_ADDR_LE_PUBLIC;
   1e522:	2300      	movs	r3, #0
		addr->type = BT_ADDR_LE_RANDOM;
   1e524:	f88d 3000 	strb.w	r3, [sp]
	if (net_mgmt(NET_REQUEST_BT_CONNECT, iface, &addr, sizeof(addr))) {
   1e528:	466a      	mov	r2, sp
   1e52a:	2307      	movs	r3, #7
   1e52c:	4629      	mov	r1, r5
   1e52e:	4830      	ldr	r0, [pc, #192]	; (1e5f0 <shell_cmd_connect+0x108>)
   1e530:	f7ff fe64 	bl	1e1fc <net_mgmt_NET_REQUEST_BT_CONNECT>
   1e534:	4604      	mov	r4, r0
   1e536:	2800      	cmp	r0, #0
   1e538:	d04e      	beq.n	1e5d8 <shell_cmd_connect+0xf0>
		printk("Connection failed\n");
   1e53a:	482e      	ldr	r0, [pc, #184]	; (1e5f4 <shell_cmd_connect+0x10c>)
   1e53c:	f7e3 f91a 	bl	1774 <printk>
   1e540:	e00c      	b.n	1e55c <shell_cmd_connect+0x74>
		if (!(j % 3) && (*str != ':')) {
   1e542:	fb96 f3fc 	sdiv	r3, r6, ip
   1e546:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1e54a:	429e      	cmp	r6, r3
   1e54c:	d10a      	bne.n	1e564 <shell_cmd_connect+0x7c>
   1e54e:	2a3a      	cmp	r2, #58	; 0x3a
   1e550:	d00a      	beq.n	1e568 <shell_cmd_connect+0x80>
		printk("Invalid peer address (err %d)\n", err);
   1e552:	f06f 0115 	mvn.w	r1, #21
   1e556:	4828      	ldr	r0, [pc, #160]	; (1e5f8 <shell_cmd_connect+0x110>)
   1e558:	f7e3 f90c 	bl	1774 <printk>
	return 0;
   1e55c:	2400      	movs	r4, #0
}
   1e55e:	4620      	mov	r0, r4
   1e560:	b003      	add	sp, #12
   1e562:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (*str == ':') {
   1e564:	2a3a      	cmp	r2, #58	; 0x3a
   1e566:	d104      	bne.n	1e572 <shell_cmd_connect+0x8a>
			i--;
   1e568:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
	for (i = 5, j = 1; *str != '\0'; str++, j++) {
   1e56c:	3001      	adds	r0, #1
   1e56e:	3601      	adds	r6, #1
   1e570:	e7cf      	b.n	1e512 <shell_cmd_connect+0x2a>
		addr->a.val[i] = addr->a.val[i] << 4;
   1e572:	ab02      	add	r3, sp, #8
   1e574:	eb03 070e 	add.w	r7, r3, lr
   1e578:	f817 2c07 	ldrb.w	r2, [r7, #-7]
   1e57c:	0112      	lsls	r2, r2, #4
   1e57e:	b2d2      	uxtb	r2, r2
   1e580:	f807 2c07 	strb.w	r2, [r7, #-7]
   1e584:	7803      	ldrb	r3, [r0, #0]
	if (*c >= '0' && *c <= '9') {
   1e586:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1e58a:	b2c9      	uxtb	r1, r1
   1e58c:	2909      	cmp	r1, #9
   1e58e:	d92a      	bls.n	1e5e6 <shell_cmd_connect+0xfe>
	} else if (*c >= 'a' && *c <= 'f') {
   1e590:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   1e594:	2905      	cmp	r1, #5
   1e596:	d805      	bhi.n	1e5a4 <shell_cmd_connect+0xbc>
		*x = *c - 'a' + 10;
   1e598:	3b57      	subs	r3, #87	; 0x57
		*x = *c - 'A' + 10;
   1e59a:	b2db      	uxtb	r3, r3
		addr->a.val[i] |= tmp;
   1e59c:	4313      	orrs	r3, r2
   1e59e:	f807 3c07 	strb.w	r3, [r7, #-7]
   1e5a2:	e7e3      	b.n	1e56c <shell_cmd_connect+0x84>
	} else if (*c >= 'A' && *c <= 'F') {
   1e5a4:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
   1e5a8:	2905      	cmp	r1, #5
   1e5aa:	d8d2      	bhi.n	1e552 <shell_cmd_connect+0x6a>
		*x = *c - 'A' + 10;
   1e5ac:	3b37      	subs	r3, #55	; 0x37
   1e5ae:	e7f4      	b.n	1e59a <shell_cmd_connect+0xb2>
	if (!strcmp(type, "public") || !strcmp(type, "(public)")) {
   1e5b0:	4912      	ldr	r1, [pc, #72]	; (1e5fc <shell_cmd_connect+0x114>)
   1e5b2:	4620      	mov	r0, r4
   1e5b4:	f7e2 f943 	bl	83e <strcmp>
   1e5b8:	2800      	cmp	r0, #0
   1e5ba:	d0b2      	beq.n	1e522 <shell_cmd_connect+0x3a>
	} else if (!strcmp(type, "random") || !strcmp(type, "(random)")) {
   1e5bc:	4910      	ldr	r1, [pc, #64]	; (1e600 <shell_cmd_connect+0x118>)
   1e5be:	4620      	mov	r0, r4
   1e5c0:	f7e2 f93d 	bl	83e <strcmp>
   1e5c4:	b908      	cbnz	r0, 1e5ca <shell_cmd_connect+0xe2>
		addr->type = BT_ADDR_LE_RANDOM;
   1e5c6:	2301      	movs	r3, #1
   1e5c8:	e7ac      	b.n	1e524 <shell_cmd_connect+0x3c>
	} else if (!strcmp(type, "random") || !strcmp(type, "(random)")) {
   1e5ca:	490e      	ldr	r1, [pc, #56]	; (1e604 <shell_cmd_connect+0x11c>)
   1e5cc:	4620      	mov	r0, r4
   1e5ce:	f7e2 f936 	bl	83e <strcmp>
   1e5d2:	2800      	cmp	r0, #0
   1e5d4:	d0f7      	beq.n	1e5c6 <shell_cmd_connect+0xde>
   1e5d6:	e7bc      	b.n	1e552 <shell_cmd_connect+0x6a>
		printk("Connection pending\n");
   1e5d8:	480b      	ldr	r0, [pc, #44]	; (1e608 <shell_cmd_connect+0x120>)
   1e5da:	f7e3 f8cb 	bl	1774 <printk>
   1e5de:	e7be      	b.n	1e55e <shell_cmd_connect+0x76>
		return -EINVAL;
   1e5e0:	f06f 0415 	mvn.w	r4, #21
   1e5e4:	e7bb      	b.n	1e55e <shell_cmd_connect+0x76>
	if (*c >= '0' && *c <= '9') {
   1e5e6:	460b      	mov	r3, r1
   1e5e8:	e7d8      	b.n	1e59c <shell_cmd_connect+0xb4>
   1e5ea:	bf00      	nop
   1e5ec:	0002128e 	.word	0x0002128e
   1e5f0:	61550002 	.word	0x61550002
   1e5f4:	00021441 	.word	0x00021441
   1e5f8:	00021422 	.word	0x00021422
   1e5fc:	00021410 	.word	0x00021410
   1e600:	00021295 	.word	0x00021295
   1e604:	00021419 	.word	0x00021419
   1e608:	00021454 	.word	0x00021454

0001e60c <ipv6_event_handler>:
static struct net_mgmt_event_callback mgmt6_cb;
static struct in6_addr laddr;

static void ipv6_event_handler(struct net_mgmt_event_callback *cb,
			       u32_t mgmt_event, struct net_if *iface)
{
   1e60c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int i;

	if (mgmt_event == NET_EVENT_IPV6_ADDR_ADD) {
   1e60e:	4b1c      	ldr	r3, [pc, #112]	; (1e680 <ipv6_event_handler+0x74>)
{
   1e610:	9201      	str	r2, [sp, #4]
	if (mgmt_event == NET_EVENT_IPV6_ADDR_ADD) {
   1e612:	4299      	cmp	r1, r3
   1e614:	d114      	bne.n	1e640 <ipv6_event_handler+0x34>
		/* save the last added IP address for this interface */
		for (i = NET_IF_MAX_IPV6_ADDR - 1; i >= 0; i--) {
			if (iface->ipv6.unicast[i].is_used) {
				memcpy(&laddr,
   1e616:	4e1b      	ldr	r6, [pc, #108]	; (1e684 <ipv6_event_handler+0x78>)
   1e618:	2402      	movs	r4, #2
			if (iface->ipv6.unicast[i].is_used) {
   1e61a:	256c      	movs	r5, #108	; 0x6c
   1e61c:	9901      	ldr	r1, [sp, #4]
   1e61e:	fb05 f304 	mul.w	r3, r5, r4
   1e622:	18ca      	adds	r2, r1, r3
   1e624:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   1e628:	b12a      	cbz	r2, 1e636 <ipv6_event_handler+0x2a>
				       &iface->ipv6.unicast[i].address.in6_addr,
   1e62a:	3330      	adds	r3, #48	; 0x30
				memcpy(&laddr,
   1e62c:	2210      	movs	r2, #16
   1e62e:	4419      	add	r1, r3
   1e630:	4630      	mov	r0, r6
   1e632:	f7e2 f95a 	bl	8ea <memcpy>
		for (i = NET_IF_MAX_IPV6_ADDR - 1; i >= 0; i--) {
   1e636:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   1e63a:	d2ef      	bcs.n	1e61c <ipv6_event_handler+0x10>

	if (mgmt_event == NET_EVENT_IPV6_ROUTER_ADD) {
		k_sem_take(&counter, K_NO_WAIT);
		k_sem_give(&waiter);
	}
}
   1e63c:	b002      	add	sp, #8
   1e63e:	bd70      	pop	{r4, r5, r6, pc}
	if (mgmt_event == NET_EVENT_IPV6_DAD_SUCCEED) {
   1e640:	4b11      	ldr	r3, [pc, #68]	; (1e688 <ipv6_event_handler+0x7c>)
   1e642:	4299      	cmp	r1, r3
   1e644:	d119      	bne.n	1e67a <ipv6_event_handler+0x6e>
		ifaddr = net_if_ipv6_addr_lookup(&laddr, &iface);
   1e646:	a901      	add	r1, sp, #4
   1e648:	480e      	ldr	r0, [pc, #56]	; (1e684 <ipv6_event_handler+0x78>)
   1e64a:	f7fa f893 	bl	18774 <net_if_ipv6_addr_lookup>
		if (!ifaddr ||
   1e64e:	4604      	mov	r4, r0
   1e650:	2800      	cmp	r0, #0
   1e652:	d0f3      	beq.n	1e63c <ipv6_event_handler+0x30>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1e654:	2210      	movs	r2, #16
   1e656:	490b      	ldr	r1, [pc, #44]	; (1e684 <ipv6_event_handler+0x78>)
   1e658:	3004      	adds	r0, #4
   1e65a:	f7e2 f919 	bl	890 <memcmp>
   1e65e:	2800      	cmp	r0, #0
   1e660:	d1ec      	bne.n	1e63c <ipv6_event_handler+0x30>
		    !(net_ipv6_addr_cmp(&ifaddr->address.in6_addr, &laddr) &&
   1e662:	f994 3065 	ldrsb.w	r3, [r4, #101]	; 0x65
   1e666:	2b01      	cmp	r3, #1
   1e668:	d1e8      	bne.n	1e63c <ipv6_event_handler+0x30>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1e66a:	2100      	movs	r1, #0
   1e66c:	4807      	ldr	r0, [pc, #28]	; (1e68c <ipv6_event_handler+0x80>)
   1e66e:	f001 f94d 	bl	1f90c <_impl_k_sem_take>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1e672:	4807      	ldr	r0, [pc, #28]	; (1e690 <ipv6_event_handler+0x84>)
   1e674:	f001 f8ea 	bl	1f84c <_impl_k_sem_give>
   1e678:	e7e0      	b.n	1e63c <ipv6_event_handler+0x30>
	if (mgmt_event == NET_EVENT_IPV6_ROUTER_ADD) {
   1e67a:	4b06      	ldr	r3, [pc, #24]	; (1e694 <ipv6_event_handler+0x88>)
   1e67c:	4299      	cmp	r1, r3
   1e67e:	e7f3      	b.n	1e668 <ipv6_event_handler+0x5c>
   1e680:	f0600001 	.word	0xf0600001
   1e684:	200032f4 	.word	0x200032f4
   1e688:	f060000d 	.word	0xf060000d
   1e68c:	200032dc 	.word	0x200032dc
   1e690:	2000ea84 	.word	0x2000ea84
   1e694:	f0600009 	.word	0xf0600009

0001e698 <net_app_init>:
#else
#define setup_ipv6(...)
#endif /* CONFIG_NET_IPV6 */

int net_app_init(const char *app_info, u32_t flags, s32_t timeout)
{
   1e698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e69c:	460e      	mov	r6, r1
   1e69e:	4615      	mov	r5, r2
#define LOOP_DIVIDER 10
	struct net_if *iface = net_if_get_default();
   1e6a0:	f7fa f842 	bl	18728 <net_if_get_default>

	if (app_info) {
		NET_INFO("%s", app_info);
	}

	if (!iface) {
   1e6a4:	4604      	mov	r4, r0
   1e6a6:	2800      	cmp	r0, #0
   1e6a8:	d044      	beq.n	1e734 <net_app_init+0x9c>

	if (flags & NET_APP_NEED_IPV6) {
		count++;
	}

	if (flags & NET_APP_NEED_IPV4) {
   1e6aa:	0772      	lsls	r2, r6, #29
	if (flags & NET_APP_NEED_IPV6) {
   1e6ac:	f3c6 0140 	ubfx	r1, r6, #1, #1
		count++;
   1e6b0:	bf48      	it	mi
   1e6b2:	3101      	addmi	r1, #1
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1e6b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e6b8:	4820      	ldr	r0, [pc, #128]	; (1e73c <net_app_init+0xa4>)
   1e6ba:	f001 f8bd 	bl	1f838 <_impl_k_sem_init>
	if (net_addr_pton(AF_INET6, CONFIG_NET_APP_MY_IPV6_ADDR, &laddr)) {
   1e6be:	4a20      	ldr	r2, [pc, #128]	; (1e740 <net_app_init+0xa8>)
   1e6c0:	4920      	ldr	r1, [pc, #128]	; (1e744 <net_app_init+0xac>)
   1e6c2:	200a      	movs	r0, #10
   1e6c4:	f7fb faa4 	bl	19c10 <net_addr_pton>
	cb->handler = handler;
   1e6c8:	481f      	ldr	r0, [pc, #124]	; (1e748 <net_app_init+0xb0>)
   1e6ca:	4b20      	ldr	r3, [pc, #128]	; (1e74c <net_app_init+0xb4>)
   1e6cc:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
   1e6ce:	4b20      	ldr	r3, [pc, #128]	; (1e750 <net_app_init+0xb8>)
   1e6d0:	6083      	str	r3, [r0, #8]
	net_mgmt_add_event_callback(&mgmt6_cb);
   1e6d2:	f7fe fe29 	bl	1d328 <net_mgmt_add_event_callback>
		ifaddr = net_if_ipv6_addr_add(iface, &laddr,
   1e6d6:	2300      	movs	r3, #0
   1e6d8:	2203      	movs	r2, #3
   1e6da:	4919      	ldr	r1, [pc, #100]	; (1e740 <net_app_init+0xa8>)
   1e6dc:	4620      	mov	r0, r4
   1e6de:	f7fa f89d 	bl	1881c <net_if_ipv6_addr_add>

	setup_dhcpv4(iface);

	setup_ipv6(iface, flags);

	if (timeout < 0) {
   1e6e2:	2d00      	cmp	r5, #0
   1e6e4:	db11      	blt.n	1e70a <net_app_init+0x72>
		count = -1;
	} else if (timeout == 0) {
   1e6e6:	d00d      	beq.n	1e704 <net_app_init+0x6c>
		count = 0;
	} else {
		count = timeout / 1000 + 1;
   1e6e8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1e6ec:	fb95 f4f4 	sdiv	r4, r5, r4
   1e6f0:	3401      	adds	r4, #1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1e6f2:	4f18      	ldr	r7, [pc, #96]	; (1e754 <net_app_init+0xbc>)
	/* Loop here until we are ready to continue. As we might need
	 * to wait multiple events, sleep smaller amounts of data.
	 */
	while (count--) {
		if (k_sem_take(&waiter, loop)) {
			if (!k_sem_count_get(&counter)) {
   1e6f4:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1e73c <net_app_init+0xa4>
   1e6f8:	3c01      	subs	r4, #1
	int loop = timeout / LOOP_DIVIDER;
   1e6fa:	260a      	movs	r6, #10
   1e6fc:	fb95 f6f6 	sdiv	r6, r5, r6
	while (count--) {
   1e700:	1c63      	adds	r3, r4, #1
   1e702:	d105      	bne.n	1e710 <net_app_init+0x78>
	if (!count && timeout) {
		NET_ERR("Timeout while waiting setup");
		return -ETIMEDOUT;
	}

	return 0;
   1e704:	2000      	movs	r0, #0
   1e706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		count = -1;
   1e70a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1e70e:	e7f0      	b.n	1e6f2 <net_app_init+0x5a>
   1e710:	4631      	mov	r1, r6
   1e712:	4638      	mov	r0, r7
   1e714:	f001 f8fa 	bl	1f90c <_impl_k_sem_take>
		if (k_sem_take(&waiter, loop)) {
   1e718:	b110      	cbz	r0, 1e720 <net_app_init+0x88>
			if (!k_sem_count_get(&counter)) {
   1e71a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1e71e:	b10b      	cbz	r3, 1e724 <net_app_init+0x8c>
   1e720:	3c01      	subs	r4, #1
   1e722:	e7ed      	b.n	1e700 <net_app_init+0x68>
	if (!count && timeout) {
   1e724:	2c00      	cmp	r4, #0
   1e726:	d1ed      	bne.n	1e704 <net_app_init+0x6c>
   1e728:	2d00      	cmp	r5, #0
   1e72a:	d0eb      	beq.n	1e704 <net_app_init+0x6c>
		return -ETIMEDOUT;
   1e72c:	f06f 003b 	mvn.w	r0, #59	; 0x3b
}
   1e730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENODEV;
   1e734:	f06f 0012 	mvn.w	r0, #18
   1e738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e73c:	200032dc 	.word	0x200032dc
   1e740:	200032f4 	.word	0x200032f4
   1e744:	00021559 	.word	0x00021559
   1e748:	20003304 	.word	0x20003304
   1e74c:	0001e60d 	.word	0x0001e60d
   1e750:	f060000d 	.word	0xf060000d
   1e754:	2000ea84 	.word	0x2000ea84

0001e758 <init_net_app>:

#if defined(CONFIG_NET_APP_AUTO_INIT)
static int init_net_app(struct device *device)
{
   1e758:	b508      	push	{r3, lr}
	ret = _net_app_ieee802154_setup();
	if (ret < 0) {
		NET_ERR("Cannot setup IEEE 802.15.4 interface (%d)", ret);
	}

	ret = _net_app_bt_setup();
   1e75a:	f000 fb83 	bl	1ee64 <_net_app_bt_setup>
	if (IS_ENABLED(CONFIG_NET_APP_NEED_IPV4)) {
		flags |= NET_APP_NEED_IPV4;
	}

	/* Initialize the application automatically if needed */
	ret = net_app_init("Initializing network", flags,
   1e75e:	f247 5230 	movw	r2, #30000	; 0x7530
   1e762:	2102      	movs	r1, #2
   1e764:	4802      	ldr	r0, [pc, #8]	; (1e770 <init_net_app+0x18>)
	if (ret < 0) {
		NET_ERR("Network initialization failed (%d)", ret);
	}

	return ret;
}
   1e766:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ret = net_app_init("Initializing network", flags,
   1e76a:	f7ff bf95 	b.w	1e698 <net_app_init>
   1e76e:	bf00      	nop
   1e770:	00021544 	.word	0x00021544

0001e774 <_app_send>:

static void _app_send(struct net_context *net_ctx,
		      int status,
		      void *token,
		      void *user_data)
{
   1e774:	4618      	mov	r0, r3
	struct net_app_ctx *ctx = user_data;

	ARG_UNUSED(ctx);

#if defined(CONFIG_NET_APP_CLIENT)
	if (ctx->app_type == NET_APP_CLIENT && ctx->cb.send) {
   1e776:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
   1e77a:	2b02      	cmp	r3, #2
{
   1e77c:	b410      	push	{r4}
	if (ctx->app_type == NET_APP_CLIENT && ctx->cb.send) {
   1e77e:	d105      	bne.n	1e78c <_app_send+0x18>
   1e780:	6c44      	ldr	r4, [r0, #68]	; 0x44
   1e782:	b11c      	cbz	r4, 1e78c <_app_send+0x18>
		ctx->cb.send(ctx, status, token, ctx->user_data);
   1e784:	46a4      	mov	ip, r4
   1e786:	6e83      	ldr	r3, [r0, #104]	; 0x68
#if defined(CONFIG_NET_APP_SERVER)
	if (ctx->app_type == NET_APP_SERVER && ctx->cb.send) {
		ctx->cb.send(ctx, status, token, ctx->user_data);
	}
#endif
}
   1e788:	bc10      	pop	{r4}
		ctx->cb.send(ctx, status, token, ctx->user_data);
   1e78a:	4760      	bx	ip
}
   1e78c:	bc10      	pop	{r4}
   1e78e:	4770      	bx	lr

0001e790 <_net_app_received>:
{
   1e790:	4618      	mov	r0, r3
	if (ctx->app_type == NET_APP_CLIENT) {
   1e792:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
   1e796:	2b02      	cmp	r3, #2
{
   1e798:	b430      	push	{r4, r5}
   1e79a:	4614      	mov	r4, r2
	if (ctx->app_type == NET_APP_CLIENT) {
   1e79c:	d10c      	bne.n	1e7b8 <_net_app_received+0x28>
		if (!pkt) {
   1e79e:	b929      	cbnz	r1, 1e7ac <_net_app_received+0x1c>
			if (ctx->cb.close) {
   1e7a0:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1e7a2:	b14b      	cbz	r3, 1e7b8 <_net_app_received+0x28>
				ctx->cb.close(ctx, status, ctx->user_data);
   1e7a4:	4621      	mov	r1, r4
   1e7a6:	6e82      	ldr	r2, [r0, #104]	; 0x68
}
   1e7a8:	bc30      	pop	{r4, r5}
				ctx->cb.close(ctx, status, ctx->user_data);
   1e7aa:	4718      	bx	r3
		if (ctx->cb.recv) {
   1e7ac:	6c04      	ldr	r4, [r0, #64]	; 0x40
   1e7ae:	b11c      	cbz	r4, 1e7b8 <_net_app_received+0x28>
			ctx->cb.recv(ctx, pkt, status, ctx->user_data);
   1e7b0:	46a4      	mov	ip, r4
   1e7b2:	6e83      	ldr	r3, [r0, #104]	; 0x68
}
   1e7b4:	bc30      	pop	{r4, r5}
			ctx->cb.recv(ctx, pkt, status, ctx->user_data);
   1e7b6:	4760      	bx	ip
}
   1e7b8:	bc30      	pop	{r4, r5}
   1e7ba:	4770      	bx	lr

0001e7bc <_net_app_set_net_ctx>:
{
   1e7bc:	b410      	push	{r4}
	if (!net_ctx || !net_context_is_used(net_ctx)) {
   1e7be:	4608      	mov	r0, r1
{
   1e7c0:	4614      	mov	r4, r2
	if (!net_ctx || !net_context_is_used(net_ctx)) {
   1e7c2:	b141      	cbz	r1, 1e7d6 <_net_app_set_net_ctx+0x1a>
   1e7c4:	f891 2055 	ldrb.w	r2, [r1, #85]	; 0x55
   1e7c8:	07d2      	lsls	r2, r2, #31
   1e7ca:	d504      	bpl.n	1e7d6 <_net_app_set_net_ctx+0x1a>
	ret = net_context_bind(net_ctx, addr, socklen);
   1e7cc:	4621      	mov	r1, r4
   1e7ce:	461a      	mov	r2, r3
}
   1e7d0:	bc10      	pop	{r4}
	ret = net_context_bind(net_ctx, addr, socklen);
   1e7d2:	f7f9 bbfd 	b.w	17fd0 <net_context_bind>
}
   1e7d6:	f06f 0001 	mvn.w	r0, #1
   1e7da:	bc10      	pop	{r4}
   1e7dc:	4770      	bx	lr

0001e7de <_net_app_set_local_addr>:
{
   1e7de:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e7e0:	4604      	mov	r4, r0
   1e7e2:	b085      	sub	sp, #20
	if (myaddr) {
   1e7e4:	460d      	mov	r5, r1
   1e7e6:	8800      	ldrh	r0, [r0, #0]
   1e7e8:	b159      	cbz	r1, 1e802 <_net_app_set_local_addr+0x24>
		if (addr->sa_family == AF_INET) {
   1e7ea:	2802      	cmp	r0, #2
   1e7ec:	d032      	beq.n	1e854 <_net_app_set_local_addr+0x76>
		} else if (addr->sa_family == AF_INET6) {
   1e7ee:	280a      	cmp	r0, #10
   1e7f0:	d133      	bne.n	1e85a <_net_app_set_local_addr+0x7c>
			net_sin6(addr)->sin6_port = htons(port);
   1e7f2:	ba52      	rev16	r2, r2
   1e7f4:	8062      	strh	r2, [r4, #2]
		return net_addr_pton(addr->sa_family, myaddr, inaddr);
   1e7f6:	1d22      	adds	r2, r4, #4
}
   1e7f8:	b005      	add	sp, #20
   1e7fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return net_addr_pton(addr->sa_family, myaddr, inaddr);
   1e7fe:	f7fb ba07 	b.w	19c10 <net_addr_pton>
	if (addr->sa_family == AF_INET6) {
   1e802:	280a      	cmp	r0, #10
   1e804:	d120      	bne.n	1e848 <_net_app_set_local_addr+0x6a>
		net_ipaddr_copy(&net_sin6(addr)->sin6_addr,
   1e806:	f7fc ff89 	bl	1b71c <net_ipv6_unspecified_address>
   1e80a:	4601      	mov	r1, r0
   1e80c:	4628      	mov	r0, r5
   1e80e:	f7fa fc15 	bl	1903c <net_if_ipv6_select_src_addr>
   1e812:	466d      	mov	r5, sp
   1e814:	4603      	mov	r3, r0
   1e816:	f100 0710 	add.w	r7, r0, #16
   1e81a:	466a      	mov	r2, sp
   1e81c:	6818      	ldr	r0, [r3, #0]
   1e81e:	6859      	ldr	r1, [r3, #4]
   1e820:	462e      	mov	r6, r5
   1e822:	c603      	stmia	r6!, {r0, r1}
   1e824:	3308      	adds	r3, #8
   1e826:	42bb      	cmp	r3, r7
   1e828:	4635      	mov	r5, r6
   1e82a:	d1f7      	bne.n	1e81c <_net_app_set_local_addr+0x3e>
   1e82c:	3404      	adds	r4, #4
   1e82e:	ad04      	add	r5, sp, #16
   1e830:	4613      	mov	r3, r2
   1e832:	cb03      	ldmia	r3!, {r0, r1}
   1e834:	42ab      	cmp	r3, r5
   1e836:	6020      	str	r0, [r4, #0]
   1e838:	6061      	str	r1, [r4, #4]
   1e83a:	461a      	mov	r2, r3
   1e83c:	f104 0408 	add.w	r4, r4, #8
   1e840:	d1f6      	bne.n	1e830 <_net_app_set_local_addr+0x52>
	return 0;
   1e842:	2000      	movs	r0, #0
}
   1e844:	b005      	add	sp, #20
   1e846:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EPFNOSUPPORT;
   1e848:	2802      	cmp	r0, #2
   1e84a:	bf14      	ite	ne
   1e84c:	2000      	movne	r0, #0
   1e84e:	f06f 002d 	mvneq.w	r0, #45	; 0x2d
   1e852:	e7f7      	b.n	1e844 <_net_app_set_local_addr+0x66>
   1e854:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   1e858:	e7f4      	b.n	1e844 <_net_app_set_local_addr+0x66>
			return -EAFNOSUPPORT;
   1e85a:	f06f 002e 	mvn.w	r0, #46	; 0x2e
   1e85e:	e7f1      	b.n	1e844 <_net_app_set_local_addr+0x66>

0001e860 <_net_app_config_local_ctx>:
{
   1e860:	b538      	push	{r3, r4, r5, lr}
   1e862:	4604      	mov	r4, r0
   1e864:	4615      	mov	r5, r2
   1e866:	4608      	mov	r0, r1
	if (!addr) {
   1e868:	b98b      	cbnz	r3, 1e88e <_net_app_config_local_ctx+0x2e>
		if (ctx->ipv6.local.sa_family == AF_INET6 ||
   1e86a:	88a3      	ldrh	r3, [r4, #4]
   1e86c:	2b0a      	cmp	r3, #10
   1e86e:	d000      	beq.n	1e872 <_net_app_config_local_ctx+0x12>
   1e870:	bb23      	cbnz	r3, 1e8bc <_net_app_config_local_ctx+0x5c>
	ret = net_context_get(AF_INET6, sock_type, proto, &ctx->ipv6.ctx);
   1e872:	4601      	mov	r1, r0
   1e874:	4623      	mov	r3, r4
   1e876:	462a      	mov	r2, r5
   1e878:	200a      	movs	r0, #10
   1e87a:	f7f9 fae3 	bl	17e44 <net_context_get>
	if (ret < 0) {
   1e87e:	2800      	cmp	r0, #0
   1e880:	da02      	bge.n	1e888 <_net_app_config_local_ctx+0x28>
		ctx->ipv6.ctx = NULL;
   1e882:	2300      	movs	r3, #0
   1e884:	6023      	str	r3, [r4, #0]
   1e886:	bd38      	pop	{r3, r4, r5, pc}
		if (!ret) {
   1e888:	d11d      	bne.n	1e8c6 <_net_app_config_local_ctx+0x66>
			ctx->default_ctx = &ctx->ipv6;
   1e88a:	6364      	str	r4, [r4, #52]	; 0x34
   1e88c:	bd38      	pop	{r3, r4, r5, pc}
		if (addr->sa_family == AF_INET6) {
   1e88e:	881d      	ldrh	r5, [r3, #0]
   1e890:	2d0a      	cmp	r5, #10
   1e892:	d108      	bne.n	1e8a6 <_net_app_config_local_ctx+0x46>
	ret = net_context_get(AF_INET6, sock_type, proto, &ctx->ipv6.ctx);
   1e894:	4623      	mov	r3, r4
   1e896:	4628      	mov	r0, r5
   1e898:	f7f9 fad4 	bl	17e44 <net_context_get>
	if (ret < 0) {
   1e89c:	2800      	cmp	r0, #0
   1e89e:	daf4      	bge.n	1e88a <_net_app_config_local_ctx+0x2a>
		ctx->ipv6.ctx = NULL;
   1e8a0:	2300      	movs	r3, #0
   1e8a2:	6023      	str	r3, [r4, #0]
   1e8a4:	e7f1      	b.n	1e88a <_net_app_config_local_ctx+0x2a>
		} else if (addr->sa_family == AF_INET) {
   1e8a6:	2d02      	cmp	r5, #2
   1e8a8:	d008      	beq.n	1e8bc <_net_app_config_local_ctx+0x5c>
		} else if (addr->sa_family == AF_UNSPEC) {
   1e8aa:	b955      	cbnz	r5, 1e8c2 <_net_app_config_local_ctx+0x62>
	ret = net_context_get(AF_INET6, sock_type, proto, &ctx->ipv6.ctx);
   1e8ac:	4623      	mov	r3, r4
   1e8ae:	200a      	movs	r0, #10
   1e8b0:	f7f9 fac8 	bl	17e44 <net_context_get>
	if (ret < 0) {
   1e8b4:	2800      	cmp	r0, #0
		ctx->ipv6.ctx = NULL;
   1e8b6:	bfb8      	it	lt
   1e8b8:	6025      	strlt	r5, [r4, #0]
   1e8ba:	e7e6      	b.n	1e88a <_net_app_config_local_ctx+0x2a>
			ret = -EPFNOSUPPORT;
   1e8bc:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   1e8c0:	bd38      	pop	{r3, r4, r5, pc}
			ret = -EINVAL;
   1e8c2:	f06f 0015 	mvn.w	r0, #21
}
   1e8c6:	bd38      	pop	{r3, r4, r5, pc}

0001e8c8 <net_app_release>:
{
   1e8c8:	b510      	push	{r4, lr}
	if (!ctx) {
   1e8ca:	4604      	mov	r4, r0
   1e8cc:	b188      	cbz	r0, 1e8f2 <net_app_release+0x2a>
	if (!ctx->is_init) {
   1e8ce:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
   1e8d2:	07db      	lsls	r3, r3, #31
   1e8d4:	d510      	bpl.n	1e8f8 <net_app_release+0x30>
	if (ctx->ipv6.ctx) {
   1e8d6:	6800      	ldr	r0, [r0, #0]
   1e8d8:	b118      	cbz	r0, 1e8e2 <net_app_release+0x1a>
		net_context_put(ctx->ipv6.ctx);
   1e8da:	f7f9 fb63 	bl	17fa4 <net_context_put>
		ctx->ipv6.ctx = NULL;
   1e8de:	2300      	movs	r3, #0
   1e8e0:	6023      	str	r3, [r4, #0]
	ctx->is_init = false;
   1e8e2:	f894 306f 	ldrb.w	r3, [r4, #111]	; 0x6f
   1e8e6:	f36f 0300 	bfc	r3, #0, #1
   1e8ea:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
	return 0;
   1e8ee:	2000      	movs	r0, #0
   1e8f0:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1e8f2:	f06f 0015 	mvn.w	r0, #21
   1e8f6:	bd10      	pop	{r4, pc}
		return -ENOENT;
   1e8f8:	f06f 0001 	mvn.w	r0, #1
}
   1e8fc:	bd10      	pop	{r4, pc}

0001e8fe <_net_app_select_net_ctx>:
	if (ctx->app_type == NET_APP_CLIENT) {
   1e8fe:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
   1e902:	2b02      	cmp	r3, #2
   1e904:	d10d      	bne.n	1e922 <_net_app_select_net_ctx+0x24>
	if (ctx->proto == IPPROTO_UDP) {
   1e906:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
   1e90a:	2b11      	cmp	r3, #17
   1e90c:	d10b      	bne.n	1e926 <_net_app_select_net_ctx+0x28>
   1e90e:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
		if (!dst) {
   1e912:	b921      	cbnz	r1, 1e91e <_net_app_select_net_ctx+0x20>
			if (ctx->is_tls) {
   1e914:	079a      	lsls	r2, r3, #30
   1e916:	d404      	bmi.n	1e922 <_net_app_select_net_ctx+0x24>
				return ctx->default_ctx->ctx;
   1e918:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1e91a:	6818      	ldr	r0, [r3, #0]
   1e91c:	4770      	bx	lr
			if (ctx->is_tls) {
   1e91e:	079b      	lsls	r3, r3, #30
   1e920:	d510      	bpl.n	1e944 <_net_app_select_net_ctx+0x46>
	struct net_context *net_ctx = NULL;
   1e922:	2000      	movs	r0, #0
}
   1e924:	4770      	bx	lr
		if (!dst) {
   1e926:	b969      	cbnz	r1, 1e944 <_net_app_select_net_ctx+0x46>
			if (ctx->default_ctx->ctx &&
   1e928:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1e92a:	681b      	ldr	r3, [r3, #0]
   1e92c:	2b00      	cmp	r3, #0
   1e92e:	d0f3      	beq.n	1e918 <_net_app_select_net_ctx+0x1a>
   1e930:	f3bf 8f5b 	dmb	ish
   1e934:	685b      	ldr	r3, [r3, #4]
   1e936:	f3bf 8f5b 	dmb	ish
   1e93a:	2b00      	cmp	r3, #0
   1e93c:	dcec      	bgt.n	1e918 <_net_app_select_net_ctx+0x1a>
				ctx->default_ctx->ctx = NULL;
   1e93e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1e940:	6019      	str	r1, [r3, #0]
   1e942:	e7e9      	b.n	1e918 <_net_app_select_net_ctx+0x1a>
			if (dst->sa_family == AF_INET) {
   1e944:	880b      	ldrh	r3, [r1, #0]
   1e946:	2b02      	cmp	r3, #2
   1e948:	d0eb      	beq.n	1e922 <_net_app_select_net_ctx+0x24>
			if (dst->sa_family == AF_INET6) {
   1e94a:	2b0a      	cmp	r3, #10
   1e94c:	d10c      	bne.n	1e968 <_net_app_select_net_ctx+0x6a>
				if (ctx->ipv6.ctx &&
   1e94e:	6803      	ldr	r3, [r0, #0]
   1e950:	b143      	cbz	r3, 1e964 <_net_app_select_net_ctx+0x66>
   1e952:	f3bf 8f5b 	dmb	ish
   1e956:	685b      	ldr	r3, [r3, #4]
   1e958:	f3bf 8f5b 	dmb	ish
   1e95c:	2b00      	cmp	r3, #0
					ctx->ipv6.ctx = NULL;
   1e95e:	bfdc      	itt	le
   1e960:	2300      	movle	r3, #0
   1e962:	6003      	strle	r3, [r0, #0]
				return ctx->ipv6.ctx;
   1e964:	6800      	ldr	r0, [r0, #0]
   1e966:	4770      	bx	lr
			if (dst->sa_family == AF_UNSPEC) {
   1e968:	2b00      	cmp	r3, #0
   1e96a:	d1da      	bne.n	1e922 <_net_app_select_net_ctx+0x24>
				if (ctx->default_ctx->ctx &&
   1e96c:	6b42      	ldr	r2, [r0, #52]	; 0x34
   1e96e:	6812      	ldr	r2, [r2, #0]
   1e970:	2a00      	cmp	r2, #0
   1e972:	d0d1      	beq.n	1e918 <_net_app_select_net_ctx+0x1a>
   1e974:	f3bf 8f5b 	dmb	ish
   1e978:	6852      	ldr	r2, [r2, #4]
   1e97a:	f3bf 8f5b 	dmb	ish
   1e97e:	2a00      	cmp	r2, #0
					ctx->default_ctx->ctx = NULL;
   1e980:	bfdc      	itt	le
   1e982:	6b42      	ldrle	r2, [r0, #52]	; 0x34
   1e984:	6013      	strle	r3, [r2, #0]
   1e986:	e7c7      	b.n	1e918 <_net_app_select_net_ctx+0x1a>

0001e988 <net_app_set_cb>:
{
   1e988:	b510      	push	{r4, lr}
	if (!ctx) {
   1e98a:	b150      	cbz	r0, 1e9a2 <net_app_set_cb+0x1a>
	if (!ctx->is_init) {
   1e98c:	f890 406f 	ldrb.w	r4, [r0, #111]	; 0x6f
   1e990:	07e4      	lsls	r4, r4, #31
   1e992:	d509      	bpl.n	1e9a8 <net_app_set_cb+0x20>
	ctx->cb.send = send_cb;
   1e994:	6443      	str	r3, [r0, #68]	; 0x44
	ctx->cb.close = close_cb;
   1e996:	9b02      	ldr	r3, [sp, #8]
	ctx->cb.connect = connect_cb;
   1e998:	63c1      	str	r1, [r0, #60]	; 0x3c
	ctx->cb.recv = recv_cb;
   1e99a:	6402      	str	r2, [r0, #64]	; 0x40
	ctx->cb.close = close_cb;
   1e99c:	6483      	str	r3, [r0, #72]	; 0x48
	return 0;
   1e99e:	2000      	movs	r0, #0
   1e9a0:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1e9a2:	f06f 0015 	mvn.w	r0, #21
   1e9a6:	bd10      	pop	{r4, pc}
		return -ENOENT;
   1e9a8:	f06f 0001 	mvn.w	r0, #1
}
   1e9ac:	bd10      	pop	{r4, pc}
	...

0001e9b0 <net_app_send_pkt>:
		     struct net_pkt *pkt,
		     const struct sockaddr *dst,
		     socklen_t dst_len,
		     s32_t timeout,
		     void *user_data_send)
{
   1e9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e9b2:	460d      	mov	r5, r1
   1e9b4:	b08b      	sub	sp, #44	; 0x2c
   1e9b6:	4616      	mov	r6, r2
   1e9b8:	461f      	mov	r7, r3
	int ret;

	if (!ctx) {
   1e9ba:	4604      	mov	r4, r0
   1e9bc:	2800      	cmp	r0, #0
   1e9be:	d054      	beq.n	1ea6a <net_app_send_pkt+0xba>
		return -EINVAL;
	}

	if (!ctx->is_init) {
   1e9c0:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
   1e9c4:	07db      	lsls	r3, r3, #31
   1e9c6:	d553      	bpl.n	1ea70 <net_app_send_pkt+0xc0>
   1e9c8:	8e49      	ldrh	r1, [r1, #50]	; 0x32
   1e9ca:	68a8      	ldr	r0, [r5, #8]
	 * will be put back just before sending the packet. Normally the
	 * data that is sent does not contain IP header, but if the caller
	 * replies the packet directly back, the IP header could be there
	 * at this point.
	 */
	if (net_pkt_appdatalen(pkt) > 0) {
   1e9cc:	b359      	cbz	r1, 1ea26 <net_app_send_pkt+0x76>
		int header_len;

		header_len = net_buf_frags_len(pkt->frags) -
   1e9ce:	4602      	mov	r2, r0
	size_t bytes = 0;
   1e9d0:	2300      	movs	r3, #0
	while (buf) {
   1e9d2:	bb02      	cbnz	r2, 1ea16 <net_app_send_pkt+0x66>
   1e9d4:	1a59      	subs	r1, r3, r1
			net_pkt_appdatalen(pkt);
		if (header_len > 0) {
   1e9d6:	2900      	cmp	r1, #0
   1e9d8:	dd02      	ble.n	1e9e0 <net_app_send_pkt+0x30>
			net_buf_pull(pkt->frags, header_len);
   1e9da:	3008      	adds	r0, #8
   1e9dc:	f7f9 f946 	bl	17c6c <net_buf_simple_pull>
		}
	} else {
		net_pkt_set_appdatalen(pkt, net_buf_frags_len(pkt->frags));
	}

	if (ctx->proto == IPPROTO_UDP) {
   1e9e0:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
   1e9e4:	2b11      	cmp	r3, #17
   1e9e6:	d109      	bne.n	1e9fc <net_app_send_pkt+0x4c>
   1e9e8:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
				dst_len = sizeof(struct sockaddr_in);
#else
				return -EPFNOSUPPORT;
#endif
			} else {
				if (net_pkt_family(pkt) == AF_INET6) {
   1e9ec:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (!dst) {
   1e9f0:	b9ee      	cbnz	r6, 1ea2e <net_app_send_pkt+0x7e>
				if (net_pkt_family(pkt) == AF_INET6) {
   1e9f2:	2b0a      	cmp	r3, #10
   1e9f4:	d13f      	bne.n	1ea76 <net_app_send_pkt+0xc6>
#if defined(CONFIG_NET_IPV6)
					dst = &ctx->ipv6.remote;
   1e9f6:	f104 061c 	add.w	r6, r4, #28
				if (net_pkt_family(pkt) == AF_INET6) {
#if defined(CONFIG_NET_IPV6)
					net_ipaddr_copy(
						net_sin6(&ctx->ipv6.remote),
						net_sin6(dst));
					dst_len = sizeof(struct sockaddr_in6);
   1e9fa:	2718      	movs	r7, #24
				}
			}
		}
	}

	ret = ctx->send_data(pkt, dst, dst_len, _app_send, timeout,
   1e9fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1e9fe:	9301      	str	r3, [sp, #4]
   1ea00:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1ea02:	9300      	str	r3, [sp, #0]
   1ea04:	9402      	str	r4, [sp, #8]
   1ea06:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   1ea08:	4b1c      	ldr	r3, [pc, #112]	; (1ea7c <net_app_send_pkt+0xcc>)
   1ea0a:	463a      	mov	r2, r7
   1ea0c:	4631      	mov	r1, r6
   1ea0e:	4628      	mov	r0, r5
   1ea10:	47a0      	blx	r4
	if (ret < 0) {
		NET_DBG("Cannot send to peer (%d)", ret);
	}

	return ret;
}
   1ea12:	b00b      	add	sp, #44	; 0x2c
   1ea14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bytes += buf->len;
   1ea16:	f8b2 e00c 	ldrh.w	lr, [r2, #12]
		buf = buf->frags;
   1ea1a:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   1ea1c:	4473      	add	r3, lr
   1ea1e:	e7d8      	b.n	1e9d2 <net_app_send_pkt+0x22>
   1ea20:	8983      	ldrh	r3, [r0, #12]
		buf = buf->frags;
   1ea22:	6800      	ldr	r0, [r0, #0]
		bytes += buf->len;
   1ea24:	4419      	add	r1, r3
	while (buf) {
   1ea26:	2800      	cmp	r0, #0
   1ea28:	d1fa      	bne.n	1ea20 <net_app_send_pkt+0x70>
		net_pkt_set_appdatalen(pkt, net_buf_frags_len(pkt->frags));
   1ea2a:	8669      	strh	r1, [r5, #50]	; 0x32
   1ea2c:	e7d8      	b.n	1e9e0 <net_app_send_pkt+0x30>
				if (net_pkt_family(pkt) == AF_INET6) {
   1ea2e:	2b0a      	cmp	r3, #10
   1ea30:	d121      	bne.n	1ea76 <net_app_send_pkt+0xc6>
					net_ipaddr_copy(
   1ea32:	af04      	add	r7, sp, #16
   1ea34:	4633      	mov	r3, r6
   1ea36:	f106 0c18 	add.w	ip, r6, #24
   1ea3a:	463a      	mov	r2, r7
   1ea3c:	6818      	ldr	r0, [r3, #0]
   1ea3e:	6859      	ldr	r1, [r3, #4]
   1ea40:	46be      	mov	lr, r7
   1ea42:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1ea46:	3308      	adds	r3, #8
   1ea48:	4563      	cmp	r3, ip
   1ea4a:	4677      	mov	r7, lr
   1ea4c:	d1f6      	bne.n	1ea3c <net_app_send_pkt+0x8c>
   1ea4e:	f104 071c 	add.w	r7, r4, #28
   1ea52:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   1ea56:	4613      	mov	r3, r2
   1ea58:	cb03      	ldmia	r3!, {r0, r1}
   1ea5a:	4573      	cmp	r3, lr
   1ea5c:	6038      	str	r0, [r7, #0]
   1ea5e:	6079      	str	r1, [r7, #4]
   1ea60:	461a      	mov	r2, r3
   1ea62:	f107 0708 	add.w	r7, r7, #8
   1ea66:	d1f6      	bne.n	1ea56 <net_app_send_pkt+0xa6>
   1ea68:	e7c7      	b.n	1e9fa <net_app_send_pkt+0x4a>
		return -EINVAL;
   1ea6a:	f06f 0015 	mvn.w	r0, #21
   1ea6e:	e7d0      	b.n	1ea12 <net_app_send_pkt+0x62>
		return -ENOENT;
   1ea70:	f06f 0001 	mvn.w	r0, #1
   1ea74:	e7cd      	b.n	1ea12 <net_app_send_pkt+0x62>
					return -EPFNOSUPPORT;
   1ea76:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   1ea7a:	e7ca      	b.n	1ea12 <net_app_send_pkt+0x62>
   1ea7c:	0001e775 	.word	0x0001e775

0001ea80 <net_app_get_net_pkt>:
}

struct net_pkt *net_app_get_net_pkt(struct net_app_ctx *ctx,
				    sa_family_t family,
				    s32_t timeout)
{
   1ea80:	b570      	push	{r4, r5, r6, lr}
   1ea82:	b086      	sub	sp, #24
   1ea84:	4604      	mov	r4, r0
   1ea86:	460e      	mov	r6, r1
   1ea88:	4615      	mov	r5, r2
	struct net_context *net_ctx;
	struct sockaddr dst = { 0 };
   1ea8a:	2100      	movs	r1, #0
   1ea8c:	2218      	movs	r2, #24
   1ea8e:	4668      	mov	r0, sp
   1ea90:	f7e1 ff57 	bl	942 <memset>

	if (!ctx) {
   1ea94:	b914      	cbnz	r4, 1ea9c <net_app_get_net_pkt+0x1c>
		return NULL;
   1ea96:	2000      	movs	r0, #0
	if (!net_ctx) {
		return NULL;
	}

	return net_pkt_get_tx(net_ctx, timeout);
}
   1ea98:	b006      	add	sp, #24
   1ea9a:	bd70      	pop	{r4, r5, r6, pc}
	if (!ctx->is_init) {
   1ea9c:	f894 306f 	ldrb.w	r3, [r4, #111]	; 0x6f
   1eaa0:	07db      	lsls	r3, r3, #31
   1eaa2:	d5f8      	bpl.n	1ea96 <net_app_get_net_pkt+0x16>
	net_ctx = _net_app_select_net_ctx(ctx, &dst);
   1eaa4:	4669      	mov	r1, sp
   1eaa6:	4620      	mov	r0, r4
	dst.sa_family = family;
   1eaa8:	f8ad 6000 	strh.w	r6, [sp]
	net_ctx = _net_app_select_net_ctx(ctx, &dst);
   1eaac:	f7ff ff27 	bl	1e8fe <_net_app_select_net_ctx>
	if (!net_ctx) {
   1eab0:	2800      	cmp	r0, #0
   1eab2:	d0f0      	beq.n	1ea96 <net_app_get_net_pkt+0x16>
	return net_pkt_get_tx(net_ctx, timeout);
   1eab4:	4629      	mov	r1, r5
   1eab6:	f7fa fd75 	bl	195a4 <net_pkt_get_tx>
   1eaba:	e7ed      	b.n	1ea98 <net_app_get_net_pkt+0x18>

0001eabc <net_app_close>:

	return frag;
}

int net_app_close(struct net_app_ctx *ctx)
{
   1eabc:	b538      	push	{r3, r4, r5, lr}
	struct net_context *net_ctx;

	if (!ctx) {
   1eabe:	4604      	mov	r4, r0
   1eac0:	b300      	cbz	r0, 1eb04 <net_app_close+0x48>
		return -EINVAL;
	}

	if (!ctx->is_init) {
   1eac2:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
   1eac6:	07db      	lsls	r3, r3, #31
   1eac8:	d51f      	bpl.n	1eb0a <net_app_close+0x4e>
		ctx->tls.close_requested = true;
		return -EINPROGRESS;
	}
#endif

	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   1eaca:	2100      	movs	r1, #0
   1eacc:	f7ff ff17 	bl	1e8fe <_net_app_select_net_ctx>

	if (ctx->cb.close) {
   1ead0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   1ead2:	4605      	mov	r5, r0
	if (ctx->cb.close) {
   1ead4:	b11b      	cbz	r3, 1eade <net_app_close+0x22>
		ctx->cb.close(ctx, 0, ctx->user_data);
   1ead6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   1ead8:	2100      	movs	r1, #0
   1eada:	4620      	mov	r0, r4
   1eadc:	4798      	blx	r3
			}
		}
	}
#endif

	if (net_ctx) {
   1eade:	b125      	cbz	r5, 1eaea <net_app_close+0x2e>
		net_ctx->net_app = NULL;
   1eae0:	2300      	movs	r3, #0
   1eae2:	65ab      	str	r3, [r5, #88]	; 0x58
		net_context_put(net_ctx);
   1eae4:	4628      	mov	r0, r5
   1eae6:	f7f9 fa5d 	bl	17fa4 <net_context_put>

		NET_DBG("Closing net_ctx %p", net_ctx);
	}

#if defined(CONFIG_NET_APP_CLIENT)
	if (ctx->app_type == NET_APP_CLIENT) {
   1eaea:	f894 306e 	ldrb.w	r3, [r4, #110]	; 0x6e
   1eaee:	2b02      	cmp	r3, #2
   1eaf0:	d10e      	bne.n	1eb10 <net_app_close+0x54>
		ctx->is_enabled = false;
   1eaf2:	f894 306f 	ldrb.w	r3, [r4, #111]	; 0x6f
		 */
#if defined(CONFIG_NET_IPV4)
		net_sin(&ctx->ipv4.local)->sin_port = 0;
#endif
#if defined(CONFIG_NET_IPV6)
		net_sin6(&ctx->ipv6.local)->sin6_port = 0;
   1eaf6:	2000      	movs	r0, #0
		ctx->is_enabled = false;
   1eaf8:	f36f 0382 	bfc	r3, #2, #1
   1eafc:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
		net_sin6(&ctx->ipv6.local)->sin6_port = 0;
   1eb00:	80e0      	strh	r0, [r4, #6]
   1eb02:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1eb04:	f06f 0015 	mvn.w	r0, #21
   1eb08:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOENT;
   1eb0a:	f06f 0001 	mvn.w	r0, #1
   1eb0e:	bd38      	pop	{r3, r4, r5, pc}
#endif
	}
#endif

	return 0;
   1eb10:	2000      	movs	r0, #0
}
   1eb12:	bd38      	pop	{r3, r4, r5, pc}

0001eb14 <_app_connected>:
}

static void _app_connected(struct net_context *net_ctx,
			   int status,
			   void *user_data)
{
   1eb14:	b570      	push	{r4, r5, r6, lr}
   1eb16:	4614      	mov	r4, r2
	if (ctx->is_tls) {
		k_sem_give(&ctx->client.connect_wait);
	}
#endif

	ret = net_context_recv(net_ctx, ctx->recv_cb, K_NO_WAIT, ctx);
   1eb18:	4613      	mov	r3, r2
{
   1eb1a:	460d      	mov	r5, r1
	ret = net_context_recv(net_ctx, ctx->recv_cb, K_NO_WAIT, ctx);
   1eb1c:	2200      	movs	r2, #0
   1eb1e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   1eb20:	f7f9 fb8c 	bl	1823c <net_context_recv>
		 */
		NET_DBG("Postponing TLS connection cb for ctx %p", ctx);
	} else
#endif
	{
		if (ctx->cb.connect) {
   1eb24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1eb26:	b12b      	cbz	r3, 1eb34 <_app_connected+0x20>
			ctx->cb.connect(ctx, status, ctx->user_data);
   1eb28:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   1eb2a:	4629      	mov	r1, r5
   1eb2c:	4620      	mov	r0, r4
		}
	}
}
   1eb2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			ctx->cb.connect(ctx, status, ctx->user_data);
   1eb32:	4718      	bx	r3
   1eb34:	bd70      	pop	{r4, r5, r6, pc}

0001eb36 <bind_local.part.5>:
static int bind_local(struct net_app_ctx *ctx)
   1eb36:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ctx->ipv6.local.sa_family = AF_INET6;
   1eb38:	4605      	mov	r5, r0
   1eb3a:	230a      	movs	r3, #10
   1eb3c:	f825 3f04 	strh.w	r3, [r5, #4]!
static int bind_local(struct net_app_ctx *ctx)
   1eb40:	4604      	mov	r4, r0
		_net_app_set_local_addr(&ctx->ipv6.local, NULL,
   1eb42:	88c2      	ldrh	r2, [r0, #6]
   1eb44:	2100      	movs	r1, #0
   1eb46:	4628      	mov	r0, r5
   1eb48:	f7ff fe49 	bl	1e7de <_net_app_set_local_addr>
		ret = _net_app_set_net_ctx(ctx, ctx->ipv6.ctx,
   1eb4c:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
   1eb50:	9300      	str	r3, [sp, #0]
   1eb52:	462a      	mov	r2, r5
   1eb54:	2318      	movs	r3, #24
   1eb56:	6821      	ldr	r1, [r4, #0]
   1eb58:	4620      	mov	r0, r4
   1eb5a:	f7ff fe2f 	bl	1e7bc <_net_app_set_net_ctx>
		if (ret < 0) {
   1eb5e:	1e05      	subs	r5, r0, #0
   1eb60:	da04      	bge.n	1eb6c <bind_local.part.5+0x36>
			net_context_put(ctx->ipv6.ctx);
   1eb62:	6820      	ldr	r0, [r4, #0]
   1eb64:	f7f9 fa1e 	bl	17fa4 <net_context_put>
			ctx->ipv6.ctx = NULL;
   1eb68:	2300      	movs	r3, #0
   1eb6a:	6023      	str	r3, [r4, #0]
}
   1eb6c:	4628      	mov	r0, r5
   1eb6e:	b003      	add	sp, #12
   1eb70:	bd30      	pop	{r4, r5, pc}
	...

0001eb74 <net_app_init_client>:
{
   1eb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb78:	b09b      	sub	sp, #108	; 0x6c
   1eb7a:	460d      	mov	r5, r1
   1eb7c:	4692      	mov	sl, r2
   1eb7e:	469b      	mov	fp, r3
   1eb80:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1eb82:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
   1eb86:	f8bd 9098 	ldrh.w	r9, [sp, #152]	; 0x98
	if (!ctx) {
   1eb8a:	4604      	mov	r4, r0
   1eb8c:	b928      	cbnz	r0, 1eb9a <net_app_init_client+0x26>
		ret = -EINVAL;
   1eb8e:	f06f 0515 	mvn.w	r5, #21
}
   1eb92:	4628      	mov	r0, r5
   1eb94:	b01b      	add	sp, #108	; 0x6c
   1eb96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ctx->is_init) {
   1eb9a:	f890 606f 	ldrb.w	r6, [r0, #111]	; 0x6f
   1eb9e:	f016 0601 	ands.w	r6, r6, #1
   1eba2:	f040 80cb 	bne.w	1ed3c <net_app_init_client+0x1c8>
	memset(&addr, 0, sizeof(addr));
   1eba6:	2218      	movs	r2, #24
   1eba8:	4631      	mov	r1, r6
   1ebaa:	a808      	add	r0, sp, #32
   1ebac:	f7e1 fec9 	bl	942 <memset>
	memset(&remote_addr, 0, sizeof(remote_addr));
   1ebb0:	2218      	movs	r2, #24
   1ebb2:	4631      	mov	r1, r6
   1ebb4:	a802      	add	r0, sp, #8
   1ebb6:	f7e1 fec4 	bl	942 <memset>
	if (peer_addr) {
   1ebba:	2f00      	cmp	r7, #0
   1ebbc:	d035      	beq.n	1ec2a <net_app_init_client+0xb6>
		memcpy(&remote_addr, peer_addr, sizeof(remote_addr));
   1ebbe:	2218      	movs	r2, #24
   1ebc0:	4639      	mov	r1, r7
   1ebc2:	a802      	add	r0, sp, #8
   1ebc4:	f7e1 fe91 	bl	8ea <memcpy>
	if (client_addr) {
   1ebc8:	f1bb 0f00 	cmp.w	fp, #0
   1ebcc:	d065      	beq.n	1ec9a <net_app_init_client+0x126>
		memcpy(&addr, client_addr, sizeof(addr));
   1ebce:	2218      	movs	r2, #24
   1ebd0:	4659      	mov	r1, fp
   1ebd2:	a808      	add	r0, sp, #32
   1ebd4:	f7e1 fe89 	bl	8ea <memcpy>
		if (addr.sa_family != remote_addr.sa_family) {
   1ebd8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1ebdc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1ebe0:	429a      	cmp	r2, r3
   1ebe2:	d1d4      	bne.n	1eb8e <net_app_init_client+0x1a>
	ctx->app_type = NET_APP_CLIENT;
   1ebe4:	2302      	movs	r3, #2
   1ebe6:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
	ctx->user_data = user_data;
   1ebea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1ebec:	66a3      	str	r3, [r4, #104]	; 0x68
	ctx->send_data = net_context_sendto;
   1ebee:	4b56      	ldr	r3, [pc, #344]	; (1ed48 <net_app_init_client+0x1d4>)
   1ebf0:	63a3      	str	r3, [r4, #56]	; 0x38
	ctx->recv_cb = _net_app_received;
   1ebf2:	4b56      	ldr	r3, [pc, #344]	; (1ed4c <net_app_init_client+0x1d8>)
   1ebf4:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->is_enabled = true;
   1ebf6:	f894 306f 	ldrb.w	r3, [r4, #111]	; 0x6f
	ctx->sock_type = sock_type;
   1ebfa:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c
	ctx->is_enabled = true;
   1ebfe:	f043 0304 	orr.w	r3, r3, #4
   1ec02:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
	ret = _net_app_config_local_ctx(ctx, sock_type, proto, &addr);
   1ec06:	4629      	mov	r1, r5
	ctx->proto = proto;
   1ec08:	f884 a06d 	strb.w	sl, [r4, #109]	; 0x6d
	ret = _net_app_config_local_ctx(ctx, sock_type, proto, &addr);
   1ec0c:	ab08      	add	r3, sp, #32
   1ec0e:	4652      	mov	r2, sl
   1ec10:	4620      	mov	r0, r4
   1ec12:	f7ff fe25 	bl	1e860 <_net_app_config_local_ctx>
	if (ret < 0) {
   1ec16:	1e05      	subs	r5, r0, #0
   1ec18:	da44      	bge.n	1eca4 <net_app_init_client+0x130>
	if (ctx->ipv6.ctx) {
   1ec1a:	6820      	ldr	r0, [r4, #0]
   1ec1c:	2800      	cmp	r0, #0
   1ec1e:	d0b8      	beq.n	1eb92 <net_app_init_client+0x1e>
		net_context_put(ctx->ipv6.ctx);
   1ec20:	f7f9 f9c0 	bl	17fa4 <net_context_put>
		ctx->ipv6.ctx = NULL;
   1ec24:	2300      	movs	r3, #0
   1ec26:	6023      	str	r3, [r4, #0]
   1ec28:	e7b3      	b.n	1eb92 <net_app_init_client+0x1e>
	} else if (peer_addr_str) {
   1ec2a:	f1b8 0f00 	cmp.w	r8, #0
   1ec2e:	d032      	beq.n	1ec96 <net_app_init_client+0x122>
	if (peer_addr_str[0] == '[') {
   1ec30:	f898 3000 	ldrb.w	r3, [r8]
   1ec34:	2b5b      	cmp	r3, #91	; 0x5b
   1ec36:	d127      	bne.n	1ec88 <net_app_init_client+0x114>
		ptr = strstr(peer_addr_str, "]:");
   1ec38:	4945      	ldr	r1, [pc, #276]	; (1ed50 <net_app_init_client+0x1dc>)
   1ec3a:	4640      	mov	r0, r8
   1ec3c:	f7e1 fda5 	bl	78a <strstr>
		if (!ptr) {
   1ec40:	b310      	cbz	r0, 1ec88 <net_app_init_client+0x114>
		end = min(INET6_ADDRSTRLEN, ptr - (peer_addr_str + 1));
   1ec42:	f108 0101 	add.w	r1, r8, #1
   1ec46:	1a46      	subs	r6, r0, r1
   1ec48:	2e2e      	cmp	r6, #46	; 0x2e
   1ec4a:	bfa8      	it	ge
   1ec4c:	262e      	movge	r6, #46	; 0x2e
		memcpy(buf, peer_addr_str + 1, end);
   1ec4e:	4632      	mov	r2, r6
		end = min(INET6_ADDRSTRLEN, ptr - (peer_addr_str + 1));
   1ec50:	9001      	str	r0, [sp, #4]
		memcpy(buf, peer_addr_str + 1, end);
   1ec52:	a80e      	add	r0, sp, #56	; 0x38
   1ec54:	f7e1 fe49 	bl	8ea <memcpy>
		buf[end] = '\0';
   1ec58:	ab1a      	add	r3, sp, #104	; 0x68
   1ec5a:	441e      	add	r6, r3
		port = strtol(ptr + 2, NULL, 10);
   1ec5c:	9b01      	ldr	r3, [sp, #4]
		buf[end] = '\0';
   1ec5e:	f806 7c30 	strb.w	r7, [r6, #-48]
		port = strtol(ptr + 2, NULL, 10);
   1ec62:	1c98      	adds	r0, r3, #2
   1ec64:	220a      	movs	r2, #10
   1ec66:	4639      	mov	r1, r7
   1ec68:	f7e1 fc9a 	bl	5a0 <strtol>
		if (ret > 0) {
   1ec6c:	b283      	uxth	r3, r0
   1ec6e:	b15b      	cbz	r3, 1ec88 <net_app_init_client+0x114>
			peer_port = ret;
   1ec70:	4699      	mov	r9, r3
			base_peer_addr = base_addr_str;
   1ec72:	ae0e      	add	r6, sp, #56	; 0x38
		addr_ok = net_ipaddr_parse(base_peer_addr,
   1ec74:	4630      	mov	r0, r6
   1ec76:	f7e1 fdda 	bl	82e <strlen>
   1ec7a:	aa02      	add	r2, sp, #8
   1ec7c:	4601      	mov	r1, r0
   1ec7e:	4630      	mov	r0, r6
   1ec80:	f7fb f85e 	bl	19d40 <net_ipaddr_parse>
   1ec84:	4606      	mov	r6, r0
   1ec86:	e79f      	b.n	1ebc8 <net_app_init_client+0x54>
			strncpy(base_addr_str, peer_addr_str,
   1ec88:	222e      	movs	r2, #46	; 0x2e
   1ec8a:	4641      	mov	r1, r8
   1ec8c:	a80e      	add	r0, sp, #56	; 0x38
   1ec8e:	f7e1 fda1 	bl	7d4 <strncpy>
   1ec92:	4646      	mov	r6, r8
   1ec94:	e7ee      	b.n	1ec74 <net_app_init_client+0x100>
	int ret, addr_ok = false;
   1ec96:	4646      	mov	r6, r8
   1ec98:	e796      	b.n	1ebc8 <net_app_init_client+0x54>
		addr.sa_family = remote_addr.sa_family;
   1ec9a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1ec9e:	f8ad 3020 	strh.w	r3, [sp, #32]
   1eca2:	e79f      	b.n	1ebe4 <net_app_init_client+0x70>
	if (peer_addr) {
   1eca4:	b197      	cbz	r7, 1eccc <net_app_init_client+0x158>
		if (peer_addr->sa_family == AF_INET) {
   1eca6:	883b      	ldrh	r3, [r7, #0]
   1eca8:	2b02      	cmp	r3, #2
   1ecaa:	d04a      	beq.n	1ed42 <net_app_init_client+0x1ce>
		} else if (peer_addr->sa_family == AF_INET6) {
   1ecac:	2b0a      	cmp	r3, #10
   1ecae:	d106      	bne.n	1ecbe <net_app_init_client+0x14a>
			memcpy(&ctx->ipv6.remote, peer_addr,
   1ecb0:	2218      	movs	r2, #24
   1ecb2:	4639      	mov	r1, r7
   1ecb4:	f104 001c 	add.w	r0, r4, #28
   1ecb8:	f7e1 fe17 	bl	8ea <memcpy>
			ctx->default_ctx = &ctx->ipv6;
   1ecbc:	6364      	str	r4, [r4, #52]	; 0x34
	ctx->is_init = true;
   1ecbe:	f894 306f 	ldrb.w	r3, [r4, #111]	; 0x6f
   1ecc2:	f043 0301 	orr.w	r3, r3, #1
   1ecc6:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
   1ecca:	e762      	b.n	1eb92 <net_app_init_client+0x1e>
	if (!peer_addr_str) {
   1eccc:	f1b8 0f00 	cmp.w	r8, #0
   1ecd0:	d108      	bne.n	1ece4 <net_app_init_client+0x170>
	if (ctx->ipv6.ctx) {
   1ecd2:	6820      	ldr	r0, [r4, #0]
   1ecd4:	2800      	cmp	r0, #0
   1ecd6:	f43f af5a 	beq.w	1eb8e <net_app_init_client+0x1a>
		net_context_put(ctx->ipv6.ctx);
   1ecda:	f7f9 f963 	bl	17fa4 <net_context_put>
		ctx->ipv6.ctx = NULL;
   1ecde:	f8c4 8000 	str.w	r8, [r4]
   1ece2:	e754      	b.n	1eb8e <net_app_init_client+0x1a>
	if (peer_addr_ok && remote_addr->sa_family == AF_INET6) {
   1ece4:	b1b6      	cbz	r6, 1ed14 <net_app_init_client+0x1a0>
   1ece6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1ecea:	2b0a      	cmp	r3, #10
   1ecec:	d10b      	bne.n	1ed06 <net_app_init_client+0x192>
		memcpy(&ctx->ipv6.remote, remote_addr,
   1ecee:	2218      	movs	r2, #24
   1ecf0:	a902      	add	r1, sp, #8
   1ecf2:	f104 001c 	add.w	r0, r4, #28
   1ecf6:	f7e1 fdf8 	bl	8ea <memcpy>
	    ctx->default_ctx->remote.sa_family == AF_UNSPEC) {
   1ecfa:	8ba3      	ldrh	r3, [r4, #28]
		ctx->default_ctx = &ctx->ipv6;
   1ecfc:	6364      	str	r4, [r4, #52]	; 0x34
	if (!ctx->default_ctx ||
   1ecfe:	b963      	cbnz	r3, 1ed1a <net_app_init_client+0x1a6>
		return -EPFNOSUPPORT;
   1ed00:	f06f 052d 	mvn.w	r5, #45	; 0x2d
   1ed04:	e745      	b.n	1eb92 <net_app_init_client+0x1e>
		return -EAFNOSUPPORT;
   1ed06:	2b02      	cmp	r3, #2
   1ed08:	bf14      	ite	ne
   1ed0a:	f06f 0515 	mvnne.w	r5, #21
   1ed0e:	f06f 052e 	mvneq.w	r5, #46	; 0x2e
   1ed12:	e782      	b.n	1ec1a <net_app_init_client+0xa6>
		return ret;
   1ed14:	f06f 0515 	mvn.w	r5, #21
   1ed18:	e77f      	b.n	1ec1a <net_app_init_client+0xa6>
		if (ctx->default_ctx->remote.sa_family == AF_INET6) {
   1ed1a:	2b0a      	cmp	r3, #10
   1ed1c:	d10c      	bne.n	1ed38 <net_app_init_client+0x1c4>
	if (ctx->ipv6.remote.sa_family == AF_INET6 && ctx->ipv6.ctx) {
   1ed1e:	6823      	ldr	r3, [r4, #0]
			net_sin6(&ctx->default_ctx->remote)->sin6_port =
   1ed20:	fa99 f999 	rev16.w	r9, r9
   1ed24:	f8a4 901e 	strh.w	r9, [r4, #30]
	if (ctx->ipv6.remote.sa_family == AF_INET6 && ctx->ipv6.ctx) {
   1ed28:	b133      	cbz	r3, 1ed38 <net_app_init_client+0x1c4>
   1ed2a:	4620      	mov	r0, r4
   1ed2c:	f7ff ff03 	bl	1eb36 <bind_local.part.5>
	if (ret < 0) {
   1ed30:	1e05      	subs	r5, r0, #0
   1ed32:	f6ff af2e 	blt.w	1eb92 <net_app_init_client+0x1e>
   1ed36:	e7c2      	b.n	1ecbe <net_app_init_client+0x14a>
	if (ctx->ipv6.remote.sa_family == AF_INET6 && ctx->ipv6.ctx) {
   1ed38:	463d      	mov	r5, r7
   1ed3a:	e7c0      	b.n	1ecbe <net_app_init_client+0x14a>
		return -EALREADY;
   1ed3c:	f06f 0544 	mvn.w	r5, #68	; 0x44
   1ed40:	e727      	b.n	1eb92 <net_app_init_client+0x1e>
			return -EPROTONOSUPPORT;
   1ed42:	f06f 052a 	mvn.w	r5, #42	; 0x2a
   1ed46:	e724      	b.n	1eb92 <net_app_init_client+0x1e>
   1ed48:	0001822b 	.word	0x0001822b
   1ed4c:	0001e791 	.word	0x0001e791
   1ed50:	00021565 	.word	0x00021565

0001ed54 <net_app_connect>:
	}
#endif
}

int net_app_connect(struct net_app_ctx *ctx, s32_t timeout)
{
   1ed54:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ed56:	460f      	mov	r7, r1
   1ed58:	b087      	sub	sp, #28
	struct net_context *net_ctx;
	bool started = false;
	int ret;

	if (!ctx) {
   1ed5a:	4604      	mov	r4, r0
   1ed5c:	b918      	cbnz	r0, 1ed66 <net_app_connect+0x12>
		return -EINVAL;
   1ed5e:	f06f 0015 	mvn.w	r0, #21
		}
#endif
	}

	return ret;
}
   1ed62:	b007      	add	sp, #28
   1ed64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!ctx->is_init) {
   1ed66:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
   1ed6a:	07d9      	lsls	r1, r3, #31
   1ed6c:	d571      	bpl.n	1ee52 <net_app_connect+0xfe>
	if (ctx->app_type != NET_APP_CLIENT) {
   1ed6e:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
   1ed72:	2b02      	cmp	r3, #2
   1ed74:	d1f3      	bne.n	1ed5e <net_app_connect+0xa>
	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   1ed76:	2100      	movs	r1, #0
   1ed78:	f7ff fdc1 	bl	1e8fe <_net_app_select_net_ctx>
   1ed7c:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
	if (!net_ctx && ctx->is_enabled) {
   1ed80:	4606      	mov	r6, r0
   1ed82:	b908      	cbnz	r0, 1ed88 <net_app_connect+0x34>
   1ed84:	074a      	lsls	r2, r1, #29
   1ed86:	d467      	bmi.n	1ee58 <net_app_connect+0x104>
	if (!ctx->is_enabled) {
   1ed88:	f011 0504 	ands.w	r5, r1, #4
   1ed8c:	d12a      	bne.n	1ede4 <net_app_connect+0x90>
		ret = _net_app_config_local_ctx(ctx, ctx->sock_type,
   1ed8e:	462b      	mov	r3, r5
   1ed90:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
   1ed94:	f894 106c 	ldrb.w	r1, [r4, #108]	; 0x6c
   1ed98:	4620      	mov	r0, r4
   1ed9a:	f7ff fd61 	bl	1e860 <_net_app_config_local_ctx>
		if (ret < 0) {
   1ed9e:	2800      	cmp	r0, #0
   1eda0:	dbdd      	blt.n	1ed5e <net_app_connect+0xa>
		net_ctx = _net_app_select_net_ctx(ctx, NULL);
   1eda2:	4629      	mov	r1, r5
   1eda4:	4620      	mov	r0, r4
   1eda6:	f7ff fdaa 	bl	1e8fe <_net_app_select_net_ctx>
	if (ctx->ipv6.remote.sa_family == AF_INET6 && ctx->ipv6.ctx) {
   1edaa:	8ba3      	ldrh	r3, [r4, #28]
   1edac:	2b0a      	cmp	r3, #10
		net_ctx = _net_app_select_net_ctx(ctx, NULL);
   1edae:	4606      	mov	r6, r0
	if (ctx->ipv6.remote.sa_family == AF_INET6 && ctx->ipv6.ctx) {
   1edb0:	d00f      	beq.n	1edd2 <net_app_connect+0x7e>
		ctx->is_enabled = true;
   1edb2:	f894 306f 	ldrb.w	r3, [r4, #111]	; 0x6f
   1edb6:	f043 0304 	orr.w	r3, r3, #4
   1edba:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
					  &ctx->default_ctx->remote,
   1edbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
		ret = net_context_connect(net_ctx,
   1edc0:	4b27      	ldr	r3, [pc, #156]	; (1ee60 <net_app_connect+0x10c>)
   1edc2:	9401      	str	r4, [sp, #4]
   1edc4:	9700      	str	r7, [sp, #0]
   1edc6:	2218      	movs	r2, #24
   1edc8:	311c      	adds	r1, #28
   1edca:	4630      	mov	r0, r6
   1edcc:	f7f9 f9dc 	bl	18188 <net_context_connect>
	return ret;
   1edd0:	e7c7      	b.n	1ed62 <net_app_connect+0xe>
	if (ctx->ipv6.remote.sa_family == AF_INET6 && ctx->ipv6.ctx) {
   1edd2:	6823      	ldr	r3, [r4, #0]
   1edd4:	2b00      	cmp	r3, #0
   1edd6:	d0ec      	beq.n	1edb2 <net_app_connect+0x5e>
   1edd8:	4620      	mov	r0, r4
   1edda:	f7ff feac 	bl	1eb36 <bind_local.part.5>
		if (ret < 0) {
   1edde:	2800      	cmp	r0, #0
   1ede0:	dae7      	bge.n	1edb2 <net_app_connect+0x5e>
   1ede2:	e7bc      	b.n	1ed5e <net_app_connect+0xa>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1ede4:	f896 3055 	ldrb.w	r3, [r6, #85]	; 0x55
   1ede8:	06db      	lsls	r3, r3, #27
   1edea:	d5e8      	bpl.n	1edbe <net_app_connect+0x6a>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1edec:	68a3      	ldr	r3, [r4, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1edee:	2b00      	cmp	r3, #0
   1edf0:	d1e5      	bne.n	1edbe <net_app_connect+0x6a>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1edf2:	68e3      	ldr	r3, [r4, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1edf4:	2b00      	cmp	r3, #0
   1edf6:	d1e2      	bne.n	1edbe <net_app_connect+0x6a>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1edf8:	6923      	ldr	r3, [r4, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1edfa:	2b00      	cmp	r3, #0
   1edfc:	d1df      	bne.n	1edbe <net_app_connect+0x6a>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1edfe:	6960      	ldr	r0, [r4, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1ee00:	2800      	cmp	r0, #0
   1ee02:	d1dc      	bne.n	1edbe <net_app_connect+0x6a>
		laddr = net_if_ipv6_select_src_addr(NULL, raddr);
   1ee04:	f104 0120 	add.w	r1, r4, #32
   1ee08:	f7fa f918 	bl	1903c <net_if_ipv6_select_src_addr>
		if (laddr && laddr != net_ipv6_unspecified_address()) {
   1ee0c:	4605      	mov	r5, r0
   1ee0e:	2800      	cmp	r0, #0
   1ee10:	d0d5      	beq.n	1edbe <net_app_connect+0x6a>
   1ee12:	f7fc fc83 	bl	1b71c <net_ipv6_unspecified_address>
   1ee16:	4285      	cmp	r5, r0
   1ee18:	d0d1      	beq.n	1edbe <net_app_connect+0x6a>
			net_ipaddr_copy(&net_sin6(&ctx->ipv6.local)->sin6_addr,
   1ee1a:	462b      	mov	r3, r5
   1ee1c:	ad02      	add	r5, sp, #8
   1ee1e:	f103 0c10 	add.w	ip, r3, #16
   1ee22:	462a      	mov	r2, r5
   1ee24:	6818      	ldr	r0, [r3, #0]
   1ee26:	6859      	ldr	r1, [r3, #4]
   1ee28:	46ae      	mov	lr, r5
   1ee2a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1ee2e:	3308      	adds	r3, #8
   1ee30:	4563      	cmp	r3, ip
   1ee32:	4675      	mov	r5, lr
   1ee34:	d1f6      	bne.n	1ee24 <net_app_connect+0xd0>
   1ee36:	f104 0508 	add.w	r5, r4, #8
   1ee3a:	f10d 0e18 	add.w	lr, sp, #24
   1ee3e:	4613      	mov	r3, r2
   1ee40:	cb03      	ldmia	r3!, {r0, r1}
   1ee42:	4573      	cmp	r3, lr
   1ee44:	6028      	str	r0, [r5, #0]
   1ee46:	6069      	str	r1, [r5, #4]
   1ee48:	461a      	mov	r2, r3
   1ee4a:	f105 0508 	add.w	r5, r5, #8
   1ee4e:	d1f6      	bne.n	1ee3e <net_app_connect+0xea>
   1ee50:	e7b5      	b.n	1edbe <net_app_connect+0x6a>
		return -ENOENT;
   1ee52:	f06f 0001 	mvn.w	r0, #1
   1ee56:	e784      	b.n	1ed62 <net_app_connect+0xe>
		return -EAFNOSUPPORT;
   1ee58:	f06f 002e 	mvn.w	r0, #46	; 0x2e
   1ee5c:	e781      	b.n	1ed62 <net_app_connect+0xe>
   1ee5e:	bf00      	nop
   1ee60:	0001eb15 	.word	0x0001eb15

0001ee64 <_net_app_bt_setup>:

static struct bt_gatt_service ipss_svc = BT_GATT_SERVICE(attrs);
#endif

int _net_app_bt_setup(void)
{
   1ee64:	b508      	push	{r3, lr}
	struct net_if *iface;
	struct device *dev;
	int err;

	err = bt_enable(NULL);
   1ee66:	2000      	movs	r0, #0
   1ee68:	f7e6 f9a4 	bl	51b4 <bt_enable>
	if (err < 0 && err != -EALREADY) {
   1ee6c:	2800      	cmp	r0, #0
   1ee6e:	da02      	bge.n	1ee76 <_net_app_bt_setup+0x12>
   1ee70:	f110 0f45 	cmn.w	r0, #69	; 0x45
   1ee74:	d10d      	bne.n	1ee92 <_net_app_bt_setup+0x2e>
		return err;
	}

	dev = device_get_binding("net_bt");
   1ee76:	4807      	ldr	r0, [pc, #28]	; (1ee94 <_net_app_bt_setup+0x30>)
   1ee78:	f000 f822 	bl	1eec0 <device_get_binding>
	if (!dev) {
   1ee7c:	b138      	cbz	r0, 1ee8e <_net_app_bt_setup+0x2a>
		return -ENODEV;
	}

	iface = net_if_lookup_by_dev(dev);
   1ee7e:	f7f9 fc41 	bl	18704 <net_if_lookup_by_dev>
		     sizeof(ADV_STR))) {
		return -EINVAL;
	}
#endif

	return 0;
   1ee82:	2800      	cmp	r0, #0
   1ee84:	bf0c      	ite	eq
   1ee86:	f06f 0015 	mvneq.w	r0, #21
   1ee8a:	2000      	movne	r0, #0
   1ee8c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1ee8e:	f06f 0012 	mvn.w	r0, #18
}
   1ee92:	bd08      	pop	{r3, pc}
   1ee94:	000213e0 	.word	0x000213e0

0001ee98 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   1ee98:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   1ee9a:	4b08      	ldr	r3, [pc, #32]	; (1eebc <_sys_device_do_config_level+0x24>)
   1ee9c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1eea0:	3001      	adds	r0, #1
   1eea2:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1eea6:	4620      	mov	r0, r4
   1eea8:	42a8      	cmp	r0, r5
   1eeaa:	f104 040c 	add.w	r4, r4, #12
   1eeae:	d300      	bcc.n	1eeb2 <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
   1eeb0:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
   1eeb2:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   1eeb6:	685b      	ldr	r3, [r3, #4]
   1eeb8:	4798      	blx	r3
   1eeba:	e7f4      	b.n	1eea6 <_sys_device_do_config_level+0xe>
   1eebc:	00021568 	.word	0x00021568

0001eec0 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   1eec0:	4b10      	ldr	r3, [pc, #64]	; (1ef04 <device_get_binding+0x44>)
{
   1eec2:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   1eec4:	4c10      	ldr	r4, [pc, #64]	; (1ef08 <device_get_binding+0x48>)
{
   1eec6:	4605      	mov	r5, r0
   1eec8:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   1eeca:	429c      	cmp	r4, r3
   1eecc:	d104      	bne.n	1eed8 <device_get_binding+0x18>
   1eece:	4c0e      	ldr	r4, [pc, #56]	; (1ef08 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   1eed0:	42b4      	cmp	r4, r6
   1eed2:	d109      	bne.n	1eee8 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   1eed4:	2400      	movs	r4, #0
   1eed6:	e012      	b.n	1eefe <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
   1eed8:	6862      	ldr	r2, [r4, #4]
   1eeda:	b11a      	cbz	r2, 1eee4 <device_get_binding+0x24>
   1eedc:	6822      	ldr	r2, [r4, #0]
   1eede:	6812      	ldr	r2, [r2, #0]
   1eee0:	42aa      	cmp	r2, r5
   1eee2:	d00c      	beq.n	1eefe <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1eee4:	340c      	adds	r4, #12
   1eee6:	e7f0      	b.n	1eeca <device_get_binding+0xa>
		if (!info->driver_api) {
   1eee8:	6863      	ldr	r3, [r4, #4]
   1eeea:	b90b      	cbnz	r3, 1eef0 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1eeec:	340c      	adds	r4, #12
   1eeee:	e7ef      	b.n	1eed0 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
   1eef0:	6823      	ldr	r3, [r4, #0]
   1eef2:	4628      	mov	r0, r5
   1eef4:	6819      	ldr	r1, [r3, #0]
   1eef6:	f7e1 fca2 	bl	83e <strcmp>
   1eefa:	2800      	cmp	r0, #0
   1eefc:	d1f6      	bne.n	1eeec <device_get_binding+0x2c>
}
   1eefe:	4620      	mov	r0, r4
   1ef00:	bd70      	pop	{r4, r5, r6, pc}
   1ef02:	bf00      	nop
   1ef04:	2000e99c 	.word	0x2000e99c
   1ef08:	2000e8d0 	.word	0x2000e8d0

0001ef0c <__errno>:
const int _k_neg_eagain = -EAGAIN;

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
   1ef0c:	4b01      	ldr	r3, [pc, #4]	; (1ef14 <__errno+0x8>)
   1ef0e:	6898      	ldr	r0, [r3, #8]
}
   1ef10:	3054      	adds	r0, #84	; 0x54
   1ef12:	4770      	bx	lr
   1ef14:	200033e0 	.word	0x200033e0

0001ef18 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   1ef18:	1c43      	adds	r3, r0, #1
   1ef1a:	d003      	beq.n	1ef24 <_sys_power_save_idle_exit+0xc>
   1ef1c:	4b03      	ldr	r3, [pc, #12]	; (1ef2c <_sys_power_save_idle_exit+0x14>)
   1ef1e:	681b      	ldr	r3, [r3, #0]
   1ef20:	4298      	cmp	r0, r3
   1ef22:	db01      	blt.n	1ef28 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   1ef24:	f7e4 ba38 	b.w	3398 <_timer_idle_exit>
   1ef28:	4770      	bx	lr
   1ef2a:	bf00      	nop
   1ef2c:	2000e8c0 	.word	0x2000e8c0

0001ef30 <idle>:
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1ef30:	4d0f      	ldr	r5, [pc, #60]	; (1ef70 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1ef32:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
   1ef34:	4f0f      	ldr	r7, [pc, #60]	; (1ef74 <idle+0x44>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ef36:	f105 0610 	add.w	r6, r5, #16
	__asm__ volatile(
   1ef3a:	f04f 0220 	mov.w	r2, #32
   1ef3e:	f3ef 8311 	mrs	r3, BASEPRI
   1ef42:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   1ef46:	692b      	ldr	r3, [r5, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ef48:	42b3      	cmp	r3, r6
   1ef4a:	d00a      	beq.n	1ef62 <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   1ef4c:	b14b      	cbz	r3, 1ef62 <idle+0x32>
   1ef4e:	691c      	ldr	r4, [r3, #16]
   1ef50:	1c63      	adds	r3, r4, #1
   1ef52:	d008      	beq.n	1ef66 <idle+0x36>
   1ef54:	683b      	ldr	r3, [r7, #0]
   1ef56:	42a3      	cmp	r3, r4
   1ef58:	dd05      	ble.n	1ef66 <idle+0x36>
	_kernel.idle = ticks;
   1ef5a:	61ac      	str	r4, [r5, #24]
	k_cpu_idle();
   1ef5c:	f7e2 f938 	bl	11d0 <k_cpu_idle>
   1ef60:	e7eb      	b.n	1ef3a <idle+0xa>
   1ef62:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
   1ef66:	4620      	mov	r0, r4
   1ef68:	f7e4 fa02 	bl	3370 <_timer_idle_enter>
   1ef6c:	e7f5      	b.n	1ef5a <idle+0x2a>
   1ef6e:	bf00      	nop
   1ef70:	200033e0 	.word	0x200033e0
   1ef74:	2000e8c0 	.word	0x2000e8c0

0001ef78 <k_call_stacks_analyze>:
	STACK_ANALYZE("idle     ", _idle_stack);
	STACK_ANALYZE("interrupt", _interrupt_stack);
	STACK_ANALYZE("workqueue", sys_work_q_stack);
}
#else
void k_call_stacks_analyze(void) { }
   1ef78:	4770      	bx	lr
	...

0001ef7c <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   1ef7c:	4802      	ldr	r0, [pc, #8]	; (1ef88 <_bss_zero+0xc>)
   1ef7e:	4a03      	ldr	r2, [pc, #12]	; (1ef8c <_bss_zero+0x10>)
   1ef80:	2100      	movs	r1, #0
   1ef82:	1a12      	subs	r2, r2, r0
   1ef84:	f7e1 bcdd 	b.w	942 <memset>
   1ef88:	20000000 	.word	0x20000000
   1ef8c:	20005290 	.word	0x20005290

0001ef90 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   1ef90:	4802      	ldr	r0, [pc, #8]	; (1ef9c <_data_copy+0xc>)
   1ef92:	4a03      	ldr	r2, [pc, #12]	; (1efa0 <_data_copy+0x10>)
   1ef94:	4903      	ldr	r1, [pc, #12]	; (1efa4 <_data_copy+0x14>)
   1ef96:	1a12      	subs	r2, r2, r0
   1ef98:	f7e1 bca7 	b.w	8ea <memcpy>
   1ef9c:	2000dc28 	.word	0x2000dc28
   1efa0:	2000edf8 	.word	0x2000edf8
   1efa4:	000215d0 	.word	0x000215d0

0001efa8 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1efa8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1efaa:	2002      	movs	r0, #2
   1efac:	f7ff ff74 	bl	1ee98 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   1efb0:	4908      	ldr	r1, [pc, #32]	; (1efd4 <bg_thread_main+0x2c>)
   1efb2:	4809      	ldr	r0, [pc, #36]	; (1efd8 <bg_thread_main+0x30>)
   1efb4:	f7e2 fbde 	bl	1774 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   1efb8:	2003      	movs	r0, #3
   1efba:	f7ff ff6d 	bl	1ee98 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   1efbe:	f000 fec5 	bl	1fd4c <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1efc2:	f7e1 fd05 	bl	9d0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   1efc6:	4a05      	ldr	r2, [pc, #20]	; (1efdc <bg_thread_main+0x34>)
   1efc8:	7a13      	ldrb	r3, [r2, #8]
   1efca:	f023 0301 	bic.w	r3, r3, #1
   1efce:	7213      	strb	r3, [r2, #8]
   1efd0:	bd08      	pop	{r3, pc}
   1efd2:	bf00      	nop
   1efd4:	00021584 	.word	0x00021584
   1efd8:	000215a0 	.word	0x000215a0
   1efdc:	20003378 	.word	0x20003378

0001efe0 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   1efe0:	b580      	push	{r7, lr}
   1efe2:	b086      	sub	sp, #24
   1efe4:	4e32      	ldr	r6, [pc, #200]	; (1f0b0 <_Cstart+0xd0>)
   1efe6:	af06      	add	r7, sp, #24
	_IntLibInit();
   1efe8:	f7e1 feac 	bl	d44 <_IntLibInit>
   1efec:	2324      	movs	r3, #36	; 0x24
   1efee:	199a      	adds	r2, r3, r6
	list->head = (sys_dnode_t *)list;
   1eff0:	519a      	str	r2, [r3, r6]
   1eff2:	3308      	adds	r3, #8
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   1eff4:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
	list->tail = (sys_dnode_t *)list;
   1eff8:	6052      	str	r2, [r2, #4]
   1effa:	d1f8      	bne.n	1efee <_Cstart+0xe>
	_ready_q.cache = _main_thread;
   1effc:	4d2d      	ldr	r5, [pc, #180]	; (1f0b4 <_Cstart+0xd4>)
	_setup_new_thread(_main_thread, _main_stack,
   1effe:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 1f0dc <_Cstart+0xfc>
	_ready_q.cache = _main_thread;
   1f002:	61f5      	str	r5, [r6, #28]
	_setup_new_thread(_main_thread, _main_stack,
   1f004:	2400      	movs	r4, #0
   1f006:	f04f 0901 	mov.w	r9, #1
   1f00a:	4643      	mov	r3, r8
   1f00c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f010:	4929      	ldr	r1, [pc, #164]	; (1f0b8 <_Cstart+0xd8>)
   1f012:	f8cd 9010 	str.w	r9, [sp, #16]
   1f016:	4628      	mov	r0, r5
   1f018:	9403      	str	r4, [sp, #12]
   1f01a:	9402      	str	r4, [sp, #8]
   1f01c:	9401      	str	r4, [sp, #4]
   1f01e:	9400      	str	r4, [sp, #0]
   1f020:	f000 fe4c 	bl	1fcbc <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f024:	7a6b      	ldrb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
   1f026:	4628      	mov	r0, r5
   1f028:	f023 0304 	bic.w	r3, r3, #4
   1f02c:	726b      	strb	r3, [r5, #9]
   1f02e:	f000 fa2d 	bl	1f48c <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
   1f032:	230f      	movs	r3, #15
   1f034:	9303      	str	r3, [sp, #12]
   1f036:	4921      	ldr	r1, [pc, #132]	; (1f0bc <_Cstart+0xdc>)
   1f038:	f8cd 9010 	str.w	r9, [sp, #16]
   1f03c:	9402      	str	r4, [sp, #8]
   1f03e:	9401      	str	r4, [sp, #4]
   1f040:	9400      	str	r4, [sp, #0]
   1f042:	4b1f      	ldr	r3, [pc, #124]	; (1f0c0 <_Cstart+0xe0>)
   1f044:	481f      	ldr	r0, [pc, #124]	; (1f0c4 <_Cstart+0xe4>)
   1f046:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1f04a:	f000 fe37 	bl	1fcbc <_setup_new_thread>
   1f04e:	4b1d      	ldr	r3, [pc, #116]	; (1f0c4 <_Cstart+0xe4>)
   1f050:	4a1c      	ldr	r2, [pc, #112]	; (1f0c4 <_Cstart+0xe4>)
   1f052:	7a5b      	ldrb	r3, [r3, #9]
   1f054:	f023 0304 	bic.w	r3, r3, #4
   1f058:	7253      	strb	r3, [r2, #9]
	_add_thread_to_ready_q(thr);
   1f05a:	4610      	mov	r0, r2
   1f05c:	f000 fa16 	bl	1f48c <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
   1f060:	4b19      	ldr	r3, [pc, #100]	; (1f0c8 <_Cstart+0xe8>)
   1f062:	6133      	str	r3, [r6, #16]
	list->tail = (sys_dnode_t *)list;
   1f064:	6173      	str	r3, [r6, #20]
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   1f066:	4b19      	ldr	r3, [pc, #100]	; (1f0cc <_Cstart+0xec>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1f068:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1f06c:	4b18      	ldr	r3, [pc, #96]	; (1f0d0 <_Cstart+0xf0>)
   1f06e:	22e0      	movs	r2, #224	; 0xe0
   1f070:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   1f074:	77dc      	strb	r4, [r3, #31]
   1f076:	761c      	strb	r4, [r3, #24]
   1f078:	765c      	strb	r4, [r3, #25]
   1f07a:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1f07c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1f07e:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   1f082:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   1f084:	f7e2 f814 	bl	10b0 <_FaultInit>
	_CpuIdleInit();
   1f088:	f7e2 f89c 	bl	11c4 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1f08c:	4620      	mov	r0, r4
   1f08e:	f7ff ff03 	bl	1ee98 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1f092:	4648      	mov	r0, r9
   1f094:	f7ff ff00 	bl	1ee98 <_sys_device_do_config_level>
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   1f098:	4b0e      	ldr	r3, [pc, #56]	; (1f0d4 <_Cstart+0xf4>)

	_current = main_thread;
   1f09a:	60b5      	str	r5, [r6, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   1f09c:	f023 0307 	bic.w	r3, r3, #7

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
   1f0a0:	4a0d      	ldr	r2, [pc, #52]	; (1f0d8 <_Cstart+0xf8>)
   1f0a2:	f383 8809 	msr	PSP, r3
   1f0a6:	2100      	movs	r1, #0
   1f0a8:	f381 8811 	msr	BASEPRI, r1
   1f0ac:	4640      	mov	r0, r8
   1f0ae:	4710      	bx	r2
   1f0b0:	200033e0 	.word	0x200033e0
   1f0b4:	20003378 	.word	0x20003378
   1f0b8:	2000cae8 	.word	0x2000cae8
   1f0bc:	2000cee8 	.word	0x2000cee8
   1f0c0:	0001ef31 	.word	0x0001ef31
   1f0c4:	20003310 	.word	0x20003310
   1f0c8:	200033f0 	.word	0x200033f0
   1f0cc:	2000d828 	.word	0x2000d828
   1f0d0:	e000ed00 	.word	0xe000ed00
   1f0d4:	2000cee8 	.word	0x2000cee8
   1f0d8:	0001fc55 	.word	0x0001fc55
   1f0dc:	0001efa9 	.word	0x0001efa9

0001f0e0 <init_mem_slab_module>:
{
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
   1f0e0:	4b0b      	ldr	r3, [pc, #44]	; (1f110 <init_mem_slab_module+0x30>)
   1f0e2:	480c      	ldr	r0, [pc, #48]	; (1f114 <init_mem_slab_module+0x34>)
{
   1f0e4:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
   1f0e6:	2400      	movs	r4, #0
	for (slab = _k_mem_slab_list_start;
   1f0e8:	4283      	cmp	r3, r0
   1f0ea:	d301      	bcc.n	1f0f0 <init_mem_slab_module+0x10>
	     slab++) {
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
	}
	return 0;
}
   1f0ec:	2000      	movs	r0, #0
   1f0ee:	bd70      	pop	{r4, r5, r6, pc}
	p = slab->buffer;
   1f0f0:	691a      	ldr	r2, [r3, #16]
	for (j = 0; j < slab->num_blocks; j++) {
   1f0f2:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1f0f4:	615c      	str	r4, [r3, #20]
	for (j = 0; j < slab->num_blocks; j++) {
   1f0f6:	2100      	movs	r1, #0
   1f0f8:	42a9      	cmp	r1, r5
   1f0fa:	d101      	bne.n	1f100 <init_mem_slab_module+0x20>
	     slab++) {
   1f0fc:	331c      	adds	r3, #28
   1f0fe:	e7f3      	b.n	1f0e8 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   1f100:	695e      	ldr	r6, [r3, #20]
   1f102:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
   1f104:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
   1f106:	615a      	str	r2, [r3, #20]
	for (j = 0; j < slab->num_blocks; j++) {
   1f108:	3101      	adds	r1, #1
		p += slab->block_size;
   1f10a:	4432      	add	r2, r6
   1f10c:	e7f4      	b.n	1f0f8 <init_mem_slab_module+0x18>
   1f10e:	bf00      	nop
   1f110:	2000e9ec 	.word	0x2000e9ec
   1f114:	2000ea24 	.word	0x2000ea24

0001f118 <k_mem_slab_alloc>:

	_k_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   1f118:	b538      	push	{r3, r4, r5, lr}
   1f11a:	460c      	mov	r4, r1
   1f11c:	f04f 0120 	mov.w	r1, #32
   1f120:	f3ef 8511 	mrs	r5, BASEPRI
   1f124:	f381 8811 	msr	BASEPRI, r1
	unsigned int key = irq_lock();
	int result;

	if (slab->free_list != NULL) {
   1f128:	6941      	ldr	r1, [r0, #20]
   1f12a:	b151      	cbz	r1, 1f142 <k_mem_slab_alloc+0x2a>
		/* take a free block */
		*mem = slab->free_list;
   1f12c:	6021      	str	r1, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1f12e:	6942      	ldr	r2, [r0, #20]
   1f130:	6812      	ldr	r2, [r2, #0]
   1f132:	6142      	str	r2, [r0, #20]
		slab->num_used++;
   1f134:	6982      	ldr	r2, [r0, #24]
   1f136:	3201      	adds	r2, #1
   1f138:	6182      	str	r2, [r0, #24]
		result = 0;
   1f13a:	2000      	movs	r0, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1f13c:	f385 8811 	msr	BASEPRI, r5
	}

	irq_unlock(key);

	return result;
}
   1f140:	bd38      	pop	{r3, r4, r5, pc}
	} else if (timeout == K_NO_WAIT) {
   1f142:	b91a      	cbnz	r2, 1f14c <k_mem_slab_alloc+0x34>
		*mem = NULL;
   1f144:	6022      	str	r2, [r4, #0]
		result = -ENOMEM;
   1f146:	f06f 000b 	mvn.w	r0, #11
   1f14a:	e7f7      	b.n	1f13c <k_mem_slab_alloc+0x24>
		_pend_current_thread(&slab->wait_q, timeout);
   1f14c:	4611      	mov	r1, r2
   1f14e:	f000 fa87 	bl	1f660 <_pend_current_thread>
	_update_time_slice_before_swap();
   1f152:	f000 fb47 	bl	1f7e4 <_update_time_slice_before_swap>
	return __swap(key);
   1f156:	4628      	mov	r0, r5
   1f158:	f7e1 fe00 	bl	d5c <__swap>
		if (result == 0) {
   1f15c:	2800      	cmp	r0, #0
   1f15e:	d1ef      	bne.n	1f140 <k_mem_slab_alloc+0x28>
			*mem = _current->base.swap_data;
   1f160:	4b02      	ldr	r3, [pc, #8]	; (1f16c <k_mem_slab_alloc+0x54>)
   1f162:	689b      	ldr	r3, [r3, #8]
   1f164:	68db      	ldr	r3, [r3, #12]
   1f166:	6023      	str	r3, [r4, #0]
   1f168:	bd38      	pop	{r3, r4, r5, pc}
   1f16a:	bf00      	nop
   1f16c:	200033e0 	.word	0x200033e0

0001f170 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1f170:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1f172:	f04f 0320 	mov.w	r3, #32
   1f176:	f3ef 8411 	mrs	r4, BASEPRI
   1f17a:	f383 8811 	msr	BASEPRI, r3
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   1f17e:	4b2e      	ldr	r3, [pc, #184]	; (1f238 <k_mem_slab_free+0xc8>)
   1f180:	681a      	ldr	r2, [r3, #0]
   1f182:	6803      	ldr	r3, [r0, #0]
   1f184:	b1a2      	cbz	r2, 1f1b0 <k_mem_slab_free+0x40>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f186:	4298      	cmp	r0, r3
   1f188:	bf08      	it	eq
   1f18a:	2300      	moveq	r3, #0
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   1f18c:	b943      	cbnz	r3, 1f1a0 <k_mem_slab_free+0x30>
		if (_must_switch_threads()) {
			_Swap(key);
			return;
		}
	} else {
		**(char ***)mem = slab->free_list;
   1f18e:	680b      	ldr	r3, [r1, #0]
   1f190:	6942      	ldr	r2, [r0, #20]
   1f192:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1f194:	680b      	ldr	r3, [r1, #0]
   1f196:	6143      	str	r3, [r0, #20]
		slab->num_used--;
   1f198:	6983      	ldr	r3, [r0, #24]
   1f19a:	3b01      	subs	r3, #1
   1f19c:	6183      	str	r3, [r0, #24]
   1f19e:	e03e      	b.n	1f21e <k_mem_slab_free+0xae>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
   1f1a0:	6a1a      	ldr	r2, [r3, #32]
   1f1a2:	3202      	adds	r2, #2
   1f1a4:	d108      	bne.n	1f1b8 <k_mem_slab_free+0x48>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1f1a6:	6842      	ldr	r2, [r0, #4]
   1f1a8:	4293      	cmp	r3, r2
   1f1aa:	d0f0      	beq.n	1f18e <k_mem_slab_free+0x1e>
   1f1ac:	681b      	ldr	r3, [r3, #0]
   1f1ae:	e7ed      	b.n	1f18c <k_mem_slab_free+0x1c>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f1b0:	4298      	cmp	r0, r3
   1f1b2:	d0ec      	beq.n	1f18e <k_mem_slab_free+0x1e>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   1f1b4:	2b00      	cmp	r3, #0
   1f1b6:	d0ea      	beq.n	1f18e <k_mem_slab_free+0x1e>
			if (_is_thread_timeout_expired(thread)) {
   1f1b8:	4618      	mov	r0, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1f1ba:	cb0c      	ldmia	r3, {r2, r3}
   1f1bc:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1f1be:	6802      	ldr	r2, [r0, #0]
   1f1c0:	4d1e      	ldr	r5, [pc, #120]	; (1f23c <k_mem_slab_free+0xcc>)
   1f1c2:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   1f1c4:	7a43      	ldrb	r3, [r0, #9]
   1f1c6:	f023 0302 	bic.w	r3, r3, #2
   1f1ca:	7243      	strb	r3, [r0, #9]
		_set_thread_return_value_with_data(pending_thread, 0, *mem);
   1f1cc:	680b      	ldr	r3, [r1, #0]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1f1ce:	6a01      	ldr	r1, [r0, #32]
	thread->base.swap_data = data;
   1f1d0:	60c3      	str	r3, [r0, #12]
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1f1d2:	2200      	movs	r2, #0
   1f1d4:	1c4b      	adds	r3, r1, #1
   1f1d6:	6642      	str	r2, [r0, #100]	; 0x64
	return _abort_timeout(&thread->base.timeout);
   1f1d8:	f100 0210 	add.w	r2, r0, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1f1dc:	d00e      	beq.n	1f1fc <k_mem_slab_free+0x8c>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   1f1de:	696b      	ldr	r3, [r5, #20]
   1f1e0:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
   1f1e2:	bf1f      	itttt	ne
   1f1e4:	6902      	ldrne	r2, [r0, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   1f1e6:	6913      	ldrne	r3, [r2, #16]
   1f1e8:	185b      	addne	r3, r3, r1
   1f1ea:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   1f1ec:	6943      	ldr	r3, [r0, #20]
   1f1ee:	6902      	ldr	r2, [r0, #16]
   1f1f0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1f1f2:	6902      	ldr	r2, [r0, #16]
   1f1f4:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   1f1f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f1fa:	6203      	str	r3, [r0, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f1fc:	7a43      	ldrb	r3, [r0, #9]
   1f1fe:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   1f202:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f206:	7242      	strb	r2, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   1f208:	d102      	bne.n	1f210 <k_mem_slab_free+0xa0>
   1f20a:	6a03      	ldr	r3, [r0, #32]
   1f20c:	3301      	adds	r3, #1
   1f20e:	d009      	beq.n	1f224 <k_mem_slab_free+0xb4>
	return _is_preempt(_current) && __must_switch_threads();
   1f210:	68ab      	ldr	r3, [r5, #8]
   1f212:	895b      	ldrh	r3, [r3, #10]
   1f214:	2b7f      	cmp	r3, #127	; 0x7f
   1f216:	d802      	bhi.n	1f21e <k_mem_slab_free+0xae>
   1f218:	f000 fa32 	bl	1f680 <__must_switch_threads>
   1f21c:	b928      	cbnz	r0, 1f22a <k_mem_slab_free+0xba>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1f21e:	f384 8811 	msr	BASEPRI, r4
   1f222:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   1f224:	f000 f932 	bl	1f48c <_add_thread_to_ready_q>
   1f228:	e7f2      	b.n	1f210 <k_mem_slab_free+0xa0>
	_update_time_slice_before_swap();
   1f22a:	f000 fadb 	bl	1f7e4 <_update_time_slice_before_swap>
	return __swap(key);
   1f22e:	4620      	mov	r0, r4
	}

	irq_unlock(key);
}
   1f230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1f234:	f7e1 bd92 	b.w	d5c <__swap>
   1f238:	20005208 	.word	0x20005208
   1f23c:	200033e0 	.word	0x200033e0

0001f240 <get_bit_ptr>:

/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct k_mem_pool *p, int level, int bn, u32_t **word)
{
   1f240:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
   1f242:	7ac4      	ldrb	r4, [r0, #11]
   1f244:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
   1f246:	428c      	cmp	r4, r1
   1f248:	f04f 040c 	mov.w	r4, #12
   1f24c:	bfb6      	itet	lt
   1f24e:	4361      	mullt	r1, r4
   1f250:	fb04 0101 	mlage	r1, r4, r1, r0
   1f254:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
   1f256:	2420      	movs	r4, #32
   1f258:	fb92 f4f4 	sdiv	r4, r2, r4
   1f25c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1f260:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
   1f262:	f002 001f 	and.w	r0, r2, #31
   1f266:	bd10      	pop	{r4, pc}

0001f268 <set_free_bit>:

static void set_free_bit(struct k_mem_pool *p, int level, int bn)
{
   1f268:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
   1f26a:	ab01      	add	r3, sp, #4
   1f26c:	f7ff ffe8 	bl	1f240 <get_bit_ptr>

	*word |= (1<<bit);
   1f270:	9a01      	ldr	r2, [sp, #4]
   1f272:	2301      	movs	r3, #1
   1f274:	fa03 f000 	lsl.w	r0, r3, r0
   1f278:	6813      	ldr	r3, [r2, #0]
   1f27a:	4303      	orrs	r3, r0
   1f27c:	6013      	str	r3, [r2, #0]
}
   1f27e:	b003      	add	sp, #12
   1f280:	f85d fb04 	ldr.w	pc, [sp], #4

0001f284 <init_static_pools>:
		set_free_bit(p, 0, i);
	}
}

int init_static_pools(struct device *unused)
{
   1f284:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f288:	4c30      	ldr	r4, [pc, #192]	; (1f34c <init_static_pools+0xc8>)
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   1f28a:	4e31      	ldr	r6, [pc, #196]	; (1f350 <init_static_pools+0xcc>)
		sys_dlist_init(&p->levels[i].free_list);
   1f28c:	270c      	movs	r7, #12
   1f28e:	f1a4 0510 	sub.w	r5, r4, #16
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   1f292:	42b5      	cmp	r5, r6
   1f294:	d302      	bcc.n	1f29c <init_static_pools+0x18>
		init_mem_pool(p);
	}

	return 0;
}
   1f296:	2000      	movs	r0, #0
   1f298:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1f29c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   1f2a0:	f834 ec08 	ldrh.w	lr, [r4, #-8]
	u32_t *bits = p->buf + buflen;
   1f2a4:	f854 0c10 	ldr.w	r0, [r4, #-16]
	list->head = (sys_dnode_t *)list;
   1f2a8:	6024      	str	r4, [r4, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1f2aa:	fb03 fe0e 	mul.w	lr, r3, lr
	u32_t *bits = p->buf + buflen;
   1f2ae:	4470      	add	r0, lr
	list->tail = (sys_dnode_t *)list;
   1f2b0:	6064      	str	r4, [r4, #4]
	for (i = 0; i < p->n_levels; i++) {
   1f2b2:	2100      	movs	r1, #0
			bits += (nblocks + 31)/32;
   1f2b4:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
   1f2b8:	f814 2c06 	ldrb.w	r2, [r4, #-6]
   1f2bc:	4291      	cmp	r1, r2
   1f2be:	db07      	blt.n	1f2d0 <init_static_pools+0x4c>
   1f2c0:	f04f 0800 	mov.w	r8, #0
	for (i = 0; i < p->n_max; i++) {
   1f2c4:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   1f2c8:	4598      	cmp	r8, r3
   1f2ca:	db24      	blt.n	1f316 <init_static_pools+0x92>
   1f2cc:	3418      	adds	r4, #24
   1f2ce:	e7de      	b.n	1f28e <init_static_pools+0xa>
		sys_dlist_init(&p->levels[i].free_list);
   1f2d0:	f854 ac04 	ldr.w	sl, [r4, #-4]
		int nblocks = buflen / sz;
   1f2d4:	fbbe f2f3 	udiv	r2, lr, r3
		sys_dlist_init(&p->levels[i].free_list);
   1f2d8:	fb07 f901 	mul.w	r9, r7, r1
		if (nblocks < 32) {
   1f2dc:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
   1f2de:	eb0a 0809 	add.w	r8, sl, r9
		sz = _ALIGN4(sz / 4);
   1f2e2:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
   1f2e6:	f108 0b04 	add.w	fp, r8, #4
			bits += (nblocks + 31)/32;
   1f2ea:	bfc8      	it	gt
   1f2ec:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
   1f2ee:	f103 0303 	add.w	r3, r3, #3
	list->head = (sys_dnode_t *)list;
   1f2f2:	f8c8 b004 	str.w	fp, [r8, #4]
	list->tail = (sys_dnode_t *)list;
   1f2f6:	f8c8 b008 	str.w	fp, [r8, #8]
			bits += (nblocks + 31)/32;
   1f2fa:	bfca      	itet	gt
   1f2fc:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
   1f300:	f804 1c05 	strble.w	r1, [r4, #-5]
			p->levels[i].bits_p = bits;
   1f304:	f84a 0009 	strgt.w	r0, [sl, r9]
		sz = _ALIGN4(sz / 4);
   1f308:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
   1f30c:	bfc8      	it	gt
   1f30e:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
   1f312:	3101      	adds	r1, #1
   1f314:	e7d0      	b.n	1f2b8 <init_static_pools+0x34>
	return p->buf + lsz * block;
   1f316:	f854 2c0c 	ldr.w	r2, [r4, #-12]
		sys_dlist_append(&p->levels[0].free_list, block);
   1f31a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return p->buf + lsz * block;
   1f31e:	f854 0c10 	ldr.w	r0, [r4, #-16]
   1f322:	fb02 f208 	mul.w	r2, r2, r8
		sys_dlist_append(&p->levels[0].free_list, block);
   1f326:	f103 0e04 	add.w	lr, r3, #4
	node->next = list;
   1f32a:	f840 e002 	str.w	lr, [r0, r2]
	return p->buf + lsz * block;
   1f32e:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
   1f330:	689a      	ldr	r2, [r3, #8]
   1f332:	604a      	str	r2, [r1, #4]
	list->tail->next = node;
   1f334:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
   1f336:	4628      	mov	r0, r5
   1f338:	6011      	str	r1, [r2, #0]
	list->tail = node;
   1f33a:	6099      	str	r1, [r3, #8]
   1f33c:	4642      	mov	r2, r8
   1f33e:	2100      	movs	r1, #0
   1f340:	f7ff ff92 	bl	1f268 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
   1f344:	f108 0801 	add.w	r8, r8, #1
   1f348:	e7bc      	b.n	1f2c4 <init_static_pools+0x40>
   1f34a:	bf00      	nop
   1f34c:	2000ea34 	.word	0x2000ea34
   1f350:	2000ea24 	.word	0x2000ea24

0001f354 <k_queue_init>:
	list->head = NULL;
   1f354:	2300      	movs	r3, #0
   1f356:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   1f358:	6043      	str	r3, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&queue->poll_events);
   1f35a:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   1f35e:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1f360:	60c3      	str	r3, [r0, #12]
   1f362:	4770      	bx	lr

0001f364 <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
   1f364:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f366:	f04f 0320 	mov.w	r3, #32
   1f36a:	f3ef 8411 	mrs	r4, BASEPRI
   1f36e:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
   1f372:	b931      	cbnz	r1, 1f382 <k_queue_insert+0x1e>
	node->next = list->head;
   1f374:	6803      	ldr	r3, [r0, #0]
   1f376:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
   1f378:	6843      	ldr	r3, [r0, #4]
	list->head = node;
   1f37a:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
   1f37c:	b943      	cbnz	r3, 1f390 <k_queue_insert+0x2c>
		list->tail = node;
   1f37e:	6042      	str	r2, [r0, #4]
   1f380:	e006      	b.n	1f390 <k_queue_insert+0x2c>
	} else if (!prev->next) {
   1f382:	680b      	ldr	r3, [r1, #0]
	node->next = NULL;
   1f384:	6013      	str	r3, [r2, #0]
	} else if (!prev->next) {
   1f386:	b98b      	cbnz	r3, 1f3ac <k_queue_insert+0x48>
	if (!list->tail) {
   1f388:	6843      	ldr	r3, [r0, #4]
   1f38a:	b96b      	cbnz	r3, 1f3a8 <k_queue_insert+0x44>
		list->tail = node;
   1f38c:	6042      	str	r2, [r0, #4]
		list->head = node;
   1f38e:	6002      	str	r2, [r0, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
   1f390:	2104      	movs	r1, #4
   1f392:	3008      	adds	r0, #8
   1f394:	f001 f872 	bl	2047c <_handle_obj_poll_events>
#endif /* !CONFIG_POLL */

	sys_slist_insert(&queue->data_q, prev, data);

#if defined(CONFIG_POLL)
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   1f398:	b150      	cbz	r0, 1f3b0 <k_queue_insert+0x4c>
	_update_time_slice_before_swap();
   1f39a:	f000 fa23 	bl	1f7e4 <_update_time_slice_before_swap>
	return __swap(key);
   1f39e:	4620      	mov	r0, r4
		return;
	}
#endif /* CONFIG_POLL */

	irq_unlock(key);
}
   1f3a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f3a4:	f7e1 bcda 	b.w	d5c <__swap>
		list->tail->next = node;
   1f3a8:	601a      	str	r2, [r3, #0]
   1f3aa:	e7e8      	b.n	1f37e <k_queue_insert+0x1a>
		prev->next = node;
   1f3ac:	600a      	str	r2, [r1, #0]
   1f3ae:	e7ef      	b.n	1f390 <k_queue_insert+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1f3b0:	f384 8811 	msr	BASEPRI, r4
   1f3b4:	bd10      	pop	{r4, pc}

0001f3b6 <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, queue->data_q.tail, data);
   1f3b6:	460a      	mov	r2, r1
   1f3b8:	6841      	ldr	r1, [r0, #4]
   1f3ba:	f7ff bfd3 	b.w	1f364 <k_queue_insert>

0001f3be <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, NULL, data);
   1f3be:	460a      	mov	r2, r1
   1f3c0:	2100      	movs	r1, #0
   1f3c2:	f7ff bfcf 	b.w	1f364 <k_queue_insert>

0001f3c6 <k_queue_append_list>:
}

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   1f3c6:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f3c8:	f04f 0320 	mov.w	r3, #32
   1f3cc:	f3ef 8411 	mrs	r4, BASEPRI
   1f3d0:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
   1f3d4:	6843      	ldr	r3, [r0, #4]
   1f3d6:	b96b      	cbnz	r3, 1f3f4 <k_queue_append_list+0x2e>
		list->head = (sys_snode_t *)head;
   1f3d8:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
   1f3da:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
   1f3dc:	2104      	movs	r1, #4
   1f3de:	3008      	adds	r0, #8
   1f3e0:	f001 f84c 	bl	2047c <_handle_obj_poll_events>
			return;
		}
	}
#else
	sys_slist_append_list(&queue->data_q, head, tail);
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   1f3e4:	b140      	cbz	r0, 1f3f8 <k_queue_append_list+0x32>
	_update_time_slice_before_swap();
   1f3e6:	f000 f9fd 	bl	1f7e4 <_update_time_slice_before_swap>
	return __swap(key);
   1f3ea:	4620      	mov	r0, r4
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
   1f3ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f3f0:	f7e1 bcb4 	b.w	d5c <__swap>
		list->tail->next = (sys_snode_t *)head;
   1f3f4:	6019      	str	r1, [r3, #0]
   1f3f6:	e7f0      	b.n	1f3da <k_queue_append_list+0x14>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1f3f8:	f384 8811 	msr	BASEPRI, r4
   1f3fc:	bd10      	pop	{r4, pc}

0001f3fe <k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
   1f3fe:	b530      	push	{r4, r5, lr}
   1f400:	4604      	mov	r4, r0
   1f402:	b087      	sub	sp, #28
   1f404:	460d      	mov	r5, r1
	__asm__ volatile(
   1f406:	f04f 0220 	mov.w	r2, #32
   1f40a:	f3ef 8311 	mrs	r3, BASEPRI
   1f40e:	f382 8811 	msr	BASEPRI, r2
   1f412:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
   1f414:	b152      	cbz	r2, 1f42c <k_queue_get+0x2e>
	list->head = node->next;
   1f416:	6811      	ldr	r1, [r2, #0]
   1f418:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
   1f41a:	6840      	ldr	r0, [r0, #4]
   1f41c:	4282      	cmp	r2, r0
		list->tail = list->head;
   1f41e:	bf08      	it	eq
   1f420:	6061      	streq	r1, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1f422:	f383 8811 	msr	BASEPRI, r3
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   1f426:	4610      	mov	r0, r2
   1f428:	b007      	add	sp, #28
   1f42a:	bd30      	pop	{r4, r5, pc}
	if (timeout == K_NO_WAIT) {
   1f42c:	b919      	cbnz	r1, 1f436 <k_queue_get+0x38>
   1f42e:	f383 8811 	msr	BASEPRI, r3
			return NULL;
   1f432:	2200      	movs	r2, #0
   1f434:	e7f7      	b.n	1f426 <k_queue_get+0x28>
   1f436:	f383 8811 	msr	BASEPRI, r3
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   1f43a:	2104      	movs	r1, #4
   1f43c:	4603      	mov	r3, r0
   1f43e:	eb0d 0001 	add.w	r0, sp, r1
   1f442:	f000 ff63 	bl	2030c <k_poll_event_init>
		event.state = K_POLL_STATE_NOT_READY;
   1f446:	f89d 3011 	ldrb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
   1f44a:	462a      	mov	r2, r5
		event.state = K_POLL_STATE_NOT_READY;
   1f44c:	f36f 1307 	bfc	r3, #4, #4
		err = k_poll(&event, 1, timeout);
   1f450:	2101      	movs	r1, #1
   1f452:	a801      	add	r0, sp, #4
		event.state = K_POLL_STATE_NOT_READY;
   1f454:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
   1f458:	f000 ff6c 	bl	20334 <k_poll>
		if (err) {
   1f45c:	2800      	cmp	r0, #0
   1f45e:	d1e8      	bne.n	1f432 <k_queue_get+0x34>
	__asm__ volatile(
   1f460:	f04f 0320 	mov.w	r3, #32
   1f464:	f3ef 8111 	mrs	r1, BASEPRI
   1f468:	f383 8811 	msr	BASEPRI, r3
   1f46c:	6822      	ldr	r2, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
   1f46e:	b12a      	cbz	r2, 1f47c <k_queue_get+0x7e>
	if (list->tail == node) {
   1f470:	6860      	ldr	r0, [r4, #4]
	list->head = node->next;
   1f472:	6813      	ldr	r3, [r2, #0]
   1f474:	6023      	str	r3, [r4, #0]
	if (list->tail == node) {
   1f476:	4282      	cmp	r2, r0
		list->tail = list->head;
   1f478:	bf08      	it	eq
   1f47a:	6063      	streq	r3, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1f47c:	f381 8811 	msr	BASEPRI, r1
	} while (!val && timeout == K_FOREVER);
   1f480:	2a00      	cmp	r2, #0
   1f482:	d1d0      	bne.n	1f426 <k_queue_get+0x28>
   1f484:	1c6b      	adds	r3, r5, #1
   1f486:	d0de      	beq.n	1f446 <k_queue_get+0x48>
   1f488:	e7d3      	b.n	1f432 <k_queue_get+0x34>
	...

0001f48c <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
   1f48c:	b530      	push	{r4, r5, lr}
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   1f48e:	f990 300a 	ldrsb.w	r3, [r0, #10]
	*bmap |= _get_ready_q_prio_bit(prio);
   1f492:	4911      	ldr	r1, [pc, #68]	; (1f4d8 <_add_thread_to_ready_q+0x4c>)
	return prio + _NUM_COOP_PRIO;
   1f494:	f103 0410 	add.w	r4, r3, #16
	return (prio + _NUM_COOP_PRIO) >> 5;
   1f498:	1162      	asrs	r2, r4, #5
   1f49a:	3206      	adds	r2, #6
   1f49c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   1f4a0:	f004 051f 	and.w	r5, r4, #31
   1f4a4:	2401      	movs	r4, #1
   1f4a6:	40ac      	lsls	r4, r5
   1f4a8:	6895      	ldr	r5, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
   1f4aa:	3314      	adds	r3, #20
	*bmap |= _get_ready_q_prio_bit(prio);
   1f4ac:	432c      	orrs	r4, r5
	sys_dlist_t *q = &_ready_q.q[q_index];
   1f4ae:	00db      	lsls	r3, r3, #3
	*bmap |= _get_ready_q_prio_bit(prio);
   1f4b0:	6094      	str	r4, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
   1f4b2:	1d1a      	adds	r2, r3, #4
   1f4b4:	440a      	add	r2, r1
	node->prev = list->tail;
   1f4b6:	440b      	add	r3, r1
	node->next = list;
   1f4b8:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
   1f4ba:	689a      	ldr	r2, [r3, #8]
   1f4bc:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   1f4be:	689a      	ldr	r2, [r3, #8]
   1f4c0:	6010      	str	r0, [r2, #0]
	list->tail = node;
   1f4c2:	6098      	str	r0, [r3, #8]
	sys_dlist_append(q, &thread->base.k_q_node);

# ifndef CONFIG_SMP
	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
   1f4c4:	69cb      	ldr	r3, [r1, #28]
   1f4c6:	f990 400a 	ldrsb.w	r4, [r0, #10]
   1f4ca:	f993 200a 	ldrsb.w	r2, [r3, #10]
   1f4ce:	4294      	cmp	r4, r2
   1f4d0:	bfa8      	it	ge
   1f4d2:	4618      	movge	r0, r3
   1f4d4:	61c8      	str	r0, [r1, #28]
   1f4d6:	bd30      	pop	{r4, r5, pc}
   1f4d8:	200033e0 	.word	0x200033e0

0001f4dc <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f4dc:	7a42      	ldrb	r2, [r0, #9]
   1f4de:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
   1f4e2:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f4e6:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   1f4e8:	d104      	bne.n	1f4f4 <_ready_thread+0x18>
   1f4ea:	6a03      	ldr	r3, [r0, #32]
   1f4ec:	3301      	adds	r3, #1
   1f4ee:	d101      	bne.n	1f4f4 <_ready_thread+0x18>
		_add_thread_to_ready_q(thread);
   1f4f0:	f7ff bfcc 	b.w	1f48c <_add_thread_to_ready_q>
   1f4f4:	4770      	bx	lr
	...

0001f4f8 <_add_timeout>:
{
   1f4f8:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   1f4fa:	610b      	str	r3, [r1, #16]
	timeout->thread = thread;
   1f4fc:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   1f4fe:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
   1f500:	bb13      	cbnz	r3, 1f548 <_add_timeout+0x50>
	__asm__ volatile(
   1f502:	f04f 0220 	mov.w	r2, #32
   1f506:	f3ef 8411 	mrs	r4, BASEPRI
   1f50a:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   1f50e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f512:	610a      	str	r2, [r1, #16]
	if (thread) {
   1f514:	b180      	cbz	r0, 1f538 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
   1f516:	68ca      	ldr	r2, [r1, #12]
   1f518:	b14a      	cbz	r2, 1f52e <_add_timeout+0x36>
	node->prev->next = node->next;
   1f51a:	e890 0006 	ldmia.w	r0, {r1, r2}
   1f51e:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   1f520:	6801      	ldr	r1, [r0, #0]
   1f522:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   1f524:	7a42      	ldrb	r2, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   1f526:	61c3      	str	r3, [r0, #28]
   1f528:	f022 0202 	bic.w	r2, r2, #2
   1f52c:	7242      	strb	r2, [r0, #9]
		_ready_thread(thread);
   1f52e:	f7ff ffd5 	bl	1f4dc <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1f532:	f384 8811 	msr	BASEPRI, r4
   1f536:	bd70      	pop	{r4, r5, r6, pc}
   1f538:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
   1f53c:	694b      	ldr	r3, [r1, #20]
   1f53e:	b32b      	cbz	r3, 1f58c <_add_timeout+0x94>
			timeout->func(timeout);
   1f540:	4608      	mov	r0, r1
}
   1f542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
   1f546:	4718      	bx	r3
	return list->head == list;
   1f548:	4a11      	ldr	r2, [pc, #68]	; (1f590 <_add_timeout+0x98>)
   1f54a:	4610      	mov	r0, r2
   1f54c:	f850 3f10 	ldr.w	r3, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f550:	4283      	cmp	r3, r0
   1f552:	d10c      	bne.n	1f56e <_add_timeout+0x76>
	node->next = list;
   1f554:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   1f556:	6953      	ldr	r3, [r2, #20]
   1f558:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   1f55a:	6953      	ldr	r3, [r2, #20]
   1f55c:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1f55e:	6151      	str	r1, [r2, #20]
   1f560:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
   1f562:	1b64      	subs	r4, r4, r5
   1f564:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
   1f566:	6954      	ldr	r4, [r2, #20]
   1f568:	42a3      	cmp	r3, r4
   1f56a:	d0f3      	beq.n	1f554 <_add_timeout+0x5c>
   1f56c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   1f56e:	2b00      	cmp	r3, #0
   1f570:	d0f0      	beq.n	1f554 <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
   1f572:	690c      	ldr	r4, [r1, #16]
   1f574:	691d      	ldr	r5, [r3, #16]
   1f576:	42ac      	cmp	r4, r5
   1f578:	dcf3      	bgt.n	1f562 <_add_timeout+0x6a>
		node->prev = insert_point->prev;
   1f57a:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   1f57c:	1b2c      	subs	r4, r5, r4
   1f57e:	611c      	str	r4, [r3, #16]
   1f580:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   1f582:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   1f584:	685a      	ldr	r2, [r3, #4]
   1f586:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   1f588:	6059      	str	r1, [r3, #4]
   1f58a:	bd70      	pop	{r4, r5, r6, pc}
   1f58c:	bd70      	pop	{r4, r5, r6, pc}
   1f58e:	bf00      	nop
   1f590:	200033e0 	.word	0x200033e0

0001f594 <_remove_thread_from_ready_q>:
	node->prev->next = node->next;
   1f594:	e890 000a 	ldmia.w	r0, {r1, r3}
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   1f598:	b510      	push	{r4, lr}
#if defined(CONFIG_MULTITHREADING) && !defined(CONFIG_SMP)
	int q_index = _get_ready_q_q_index(thread->base.prio);
   1f59a:	f990 200a 	ldrsb.w	r2, [r0, #10]
   1f59e:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
   1f5a0:	6801      	ldr	r1, [r0, #0]
	sys_dlist_t *q = &_ready_q.q[q_index];
   1f5a2:	3214      	adds	r2, #20
   1f5a4:	604b      	str	r3, [r1, #4]
   1f5a6:	4b14      	ldr	r3, [pc, #80]	; (1f5f8 <_remove_thread_from_ready_q+0x64>)
   1f5a8:	00d2      	lsls	r2, r2, #3
   1f5aa:	1d11      	adds	r1, r2, #4
	return list->head == list;
   1f5ac:	441a      	add	r2, r3
   1f5ae:	4419      	add	r1, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
   1f5b0:	6852      	ldr	r2, [r2, #4]
   1f5b2:	428a      	cmp	r2, r1
   1f5b4:	d10f      	bne.n	1f5d6 <_remove_thread_from_ready_q+0x42>
		clear_ready_q_prio_bit(thread->base.prio);
   1f5b6:	f990 100a 	ldrsb.w	r1, [r0, #10]
	return (prio + _NUM_COOP_PRIO) >> 5;
   1f5ba:	3110      	adds	r1, #16
   1f5bc:	114a      	asrs	r2, r1, #5
	*bmap &= ~_get_ready_q_prio_bit(prio);
   1f5be:	3206      	adds	r2, #6
   1f5c0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   1f5c4:	2401      	movs	r4, #1
   1f5c6:	f001 011f 	and.w	r1, r1, #31
   1f5ca:	fa04 f101 	lsl.w	r1, r4, r1
   1f5ce:	6894      	ldr	r4, [r2, #8]
   1f5d0:	ea24 0401 	bic.w	r4, r4, r1
   1f5d4:	6094      	str	r4, [r2, #8]
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? get_ready_q_head() : *cache;
   1f5d6:	69da      	ldr	r2, [r3, #28]
   1f5d8:	4290      	cmp	r0, r2
   1f5da:	d10b      	bne.n	1f5f4 <_remove_thread_from_ready_q+0x60>
	return __builtin_ffs(op);
   1f5dc:	6a19      	ldr	r1, [r3, #32]
   1f5de:	fa91 f2a1 	rbit	r2, r1
   1f5e2:	2900      	cmp	r1, #0
   1f5e4:	fab2 f282 	clz	r2, r2
   1f5e8:	bf08      	it	eq
   1f5ea:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   1f5ee:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   1f5f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
   1f5f4:	61da      	str	r2, [r3, #28]
   1f5f6:	bd10      	pop	{r4, pc}
   1f5f8:	200033e0 	.word	0x200033e0

0001f5fc <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
   1f5fc:	b430      	push	{r4, r5}
   1f5fe:	680c      	ldr	r4, [r1, #0]
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   1f600:	42a1      	cmp	r1, r4
   1f602:	bf08      	it	eq
   1f604:	2400      	moveq	r4, #0
   1f606:	b314      	cbz	r4, 1f64e <_pend_thread+0x52>
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
   1f608:	f990 500a 	ldrsb.w	r5, [r0, #10]
   1f60c:	f994 300a 	ldrsb.w	r3, [r4, #10]
   1f610:	429d      	cmp	r5, r3
   1f612:	da16      	bge.n	1f642 <_pend_thread+0x46>
		node->prev = insert_point->prev;
   1f614:	6863      	ldr	r3, [r4, #4]
   1f616:	6043      	str	r3, [r0, #4]
		node->next = insert_point;
   1f618:	6004      	str	r4, [r0, #0]
		insert_point->prev->next = node;
   1f61a:	6863      	ldr	r3, [r4, #4]
   1f61c:	6018      	str	r0, [r3, #0]
		insert_point->prev = node;
   1f61e:	6060      	str	r0, [r4, #4]
	thread->base.thread_state |= _THREAD_PENDING;
   1f620:	7a43      	ldrb	r3, [r0, #9]
   1f622:	f043 0302 	orr.w	r3, r3, #2
   1f626:	7243      	strb	r3, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
   1f628:	1c53      	adds	r3, r2, #1
   1f62a:	d017      	beq.n	1f65c <_pend_thread+0x60>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   1f62c:	3209      	adds	r2, #9
   1f62e:	230a      	movs	r3, #10
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
   1f630:	bc30      	pop	{r4, r5}
   1f632:	fbb2 f3f3 	udiv	r3, r2, r3
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   1f636:	460a      	mov	r2, r1
   1f638:	3301      	adds	r3, #1
   1f63a:	f100 0110 	add.w	r1, r0, #16
   1f63e:	f7ff bf5b 	b.w	1f4f8 <_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   1f642:	684b      	ldr	r3, [r1, #4]
   1f644:	429c      	cmp	r4, r3
   1f646:	d002      	beq.n	1f64e <_pend_thread+0x52>
   1f648:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   1f64a:	2c00      	cmp	r4, #0
   1f64c:	d1db      	bne.n	1f606 <_pend_thread+0xa>
	node->next = list;
   1f64e:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   1f650:	684b      	ldr	r3, [r1, #4]
   1f652:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   1f654:	684b      	ldr	r3, [r1, #4]
   1f656:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1f658:	6048      	str	r0, [r1, #4]
   1f65a:	e7e1      	b.n	1f620 <_pend_thread+0x24>
}
   1f65c:	bc30      	pop	{r4, r5}
   1f65e:	4770      	bx	lr

0001f660 <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
   1f660:	b570      	push	{r4, r5, r6, lr}
	_remove_thread_from_ready_q(_current);
   1f662:	4c06      	ldr	r4, [pc, #24]	; (1f67c <_pend_current_thread+0x1c>)
{
   1f664:	460e      	mov	r6, r1
   1f666:	4605      	mov	r5, r0
	_remove_thread_from_ready_q(_current);
   1f668:	68a0      	ldr	r0, [r4, #8]
   1f66a:	f7ff ff93 	bl	1f594 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
   1f66e:	4632      	mov	r2, r6
   1f670:	4629      	mov	r1, r5
   1f672:	68a0      	ldr	r0, [r4, #8]
}
   1f674:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_pend_thread(_current, wait_q, timeout);
   1f678:	f7ff bfc0 	b.w	1f5fc <_pend_thread>
   1f67c:	200033e0 	.word	0x200033e0

0001f680 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
   1f680:	4a09      	ldr	r2, [pc, #36]	; (1f6a8 <__must_switch_threads+0x28>)
   1f682:	6a11      	ldr	r1, [r2, #32]

#ifdef CONFIG_KERNEL_DEBUG
	dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
   1f684:	6892      	ldr	r2, [r2, #8]
   1f686:	2900      	cmp	r1, #0
   1f688:	fa91 f3a1 	rbit	r3, r1
   1f68c:	f992 000a 	ldrsb.w	r0, [r2, #10]
   1f690:	fab3 f383 	clz	r3, r3
   1f694:	bf08      	it	eq
   1f696:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
   1f69a:	3b10      	subs	r3, #16
#else
	return 0;
#endif
}
   1f69c:	4298      	cmp	r0, r3
   1f69e:	bfd4      	ite	le
   1f6a0:	2000      	movle	r0, #0
   1f6a2:	2001      	movgt	r0, #1
   1f6a4:	4770      	bx	lr
   1f6a6:	bf00      	nop
   1f6a8:	200033e0 	.word	0x200033e0

0001f6ac <_reschedule_threads>:
{
   1f6ac:	b510      	push	{r4, lr}
	return _is_preempt(_current) && __must_switch_threads();
   1f6ae:	4b0a      	ldr	r3, [pc, #40]	; (1f6d8 <_reschedule_threads+0x2c>)
   1f6b0:	689b      	ldr	r3, [r3, #8]
   1f6b2:	895b      	ldrh	r3, [r3, #10]
   1f6b4:	2b7f      	cmp	r3, #127	; 0x7f
   1f6b6:	4604      	mov	r4, r0
   1f6b8:	d802      	bhi.n	1f6c0 <_reschedule_threads+0x14>
   1f6ba:	f7ff ffe1 	bl	1f680 <__must_switch_threads>
   1f6be:	b910      	cbnz	r0, 1f6c6 <_reschedule_threads+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1f6c0:	f384 8811 	msr	BASEPRI, r4
   1f6c4:	bd10      	pop	{r4, pc}
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   1f6c6:	4b05      	ldr	r3, [pc, #20]	; (1f6dc <_reschedule_threads+0x30>)
   1f6c8:	2200      	movs	r2, #0
   1f6ca:	4620      	mov	r0, r4
}
   1f6cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
   1f6d0:	601a      	str	r2, [r3, #0]
   1f6d2:	f7e1 bb43 	b.w	d5c <__swap>
   1f6d6:	bf00      	nop
   1f6d8:	200033e0 	.word	0x200033e0
   1f6dc:	2000520c 	.word	0x2000520c

0001f6e0 <k_sched_unlock>:
	__asm__ volatile(
   1f6e0:	f04f 0320 	mov.w	r3, #32
   1f6e4:	f3ef 8011 	mrs	r0, BASEPRI
   1f6e8:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
   1f6ec:	4b03      	ldr	r3, [pc, #12]	; (1f6fc <k_sched_unlock+0x1c>)
   1f6ee:	689a      	ldr	r2, [r3, #8]
   1f6f0:	7ad3      	ldrb	r3, [r2, #11]
   1f6f2:	3301      	adds	r3, #1
   1f6f4:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
   1f6f6:	f7ff bfd9 	b.w	1f6ac <_reschedule_threads>
   1f6fa:	bf00      	nop
   1f6fc:	200033e0 	.word	0x200033e0

0001f700 <_move_thread_to_end_of_prio_q>:
	int q_index = _get_ready_q_q_index(thread->base.prio);
   1f700:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   1f704:	4a12      	ldr	r2, [pc, #72]	; (1f750 <_move_thread_to_end_of_prio_q+0x50>)
{
   1f706:	b530      	push	{r4, r5, lr}
	sys_dlist_t *q = &_ready_q.q[q_index];
   1f708:	3314      	adds	r3, #20
   1f70a:	00db      	lsls	r3, r3, #3
   1f70c:	1d19      	adds	r1, r3, #4
   1f70e:	4411      	add	r1, r2
	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
   1f710:	684c      	ldr	r4, [r1, #4]
   1f712:	42a0      	cmp	r0, r4
   1f714:	d01b      	beq.n	1f74e <_move_thread_to_end_of_prio_q+0x4e>
	node->prev->next = node->next;
   1f716:	6844      	ldr	r4, [r0, #4]
   1f718:	6805      	ldr	r5, [r0, #0]
   1f71a:	6025      	str	r5, [r4, #0]
	node->next->prev = node->prev;
   1f71c:	6805      	ldr	r5, [r0, #0]
	node->prev = list->tail;
   1f71e:	4413      	add	r3, r2
	node->next->prev = node->prev;
   1f720:	606c      	str	r4, [r5, #4]
	node->next = list;
   1f722:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   1f724:	6899      	ldr	r1, [r3, #8]
   1f726:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
   1f728:	6899      	ldr	r1, [r3, #8]
   1f72a:	6008      	str	r0, [r1, #0]
	list->tail = node;
   1f72c:	6098      	str	r0, [r3, #8]
	*cache = *cache == thread ? get_ready_q_head() : *cache;
   1f72e:	69d3      	ldr	r3, [r2, #28]
   1f730:	4298      	cmp	r0, r3
   1f732:	d10b      	bne.n	1f74c <_move_thread_to_end_of_prio_q+0x4c>
	return __builtin_ffs(op);
   1f734:	6a11      	ldr	r1, [r2, #32]
   1f736:	fa91 f3a1 	rbit	r3, r1
   1f73a:	2900      	cmp	r1, #0
   1f73c:	fab3 f383 	clz	r3, r3
   1f740:	bf08      	it	eq
   1f742:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1f746:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1f74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f74c:	61d3      	str	r3, [r2, #28]
   1f74e:	bd30      	pop	{r4, r5, pc}
   1f750:	200033e0 	.word	0x200033e0

0001f754 <_impl_k_yield>:
{
   1f754:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1f756:	f04f 0320 	mov.w	r3, #32
   1f75a:	f3ef 8511 	mrs	r5, BASEPRI
   1f75e:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
   1f762:	4c09      	ldr	r4, [pc, #36]	; (1f788 <_impl_k_yield+0x34>)
   1f764:	68a0      	ldr	r0, [r4, #8]
   1f766:	f7ff ffcb 	bl	1f700 <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
   1f76a:	68a2      	ldr	r2, [r4, #8]
   1f76c:	69e3      	ldr	r3, [r4, #28]
   1f76e:	429a      	cmp	r2, r3
   1f770:	d102      	bne.n	1f778 <_impl_k_yield+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1f772:	f385 8811 	msr	BASEPRI, r5
   1f776:	bd38      	pop	{r3, r4, r5, pc}
	_time_slice_elapsed = 0;
   1f778:	4b04      	ldr	r3, [pc, #16]	; (1f78c <_impl_k_yield+0x38>)
   1f77a:	2200      	movs	r2, #0
   1f77c:	601a      	str	r2, [r3, #0]
   1f77e:	4628      	mov	r0, r5
}
   1f780:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1f784:	f7e1 baea 	b.w	d5c <__swap>
   1f788:	200033e0 	.word	0x200033e0
   1f78c:	2000520c 	.word	0x2000520c

0001f790 <_impl_k_current_get>:
}
   1f790:	4b01      	ldr	r3, [pc, #4]	; (1f798 <_impl_k_current_get+0x8>)
   1f792:	6898      	ldr	r0, [r3, #8]
   1f794:	4770      	bx	lr
   1f796:	bf00      	nop
   1f798:	200033e0 	.word	0x200033e0

0001f79c <_is_thread_time_slicing>:
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   1f79c:	4b0d      	ldr	r3, [pc, #52]	; (1f7d4 <_is_thread_time_slicing+0x38>)
   1f79e:	681b      	ldr	r3, [r3, #0]
   1f7a0:	2b00      	cmp	r3, #0
   1f7a2:	dd14      	ble.n	1f7ce <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
   1f7a4:	4b0c      	ldr	r3, [pc, #48]	; (1f7d8 <_is_thread_time_slicing+0x3c>)
   1f7a6:	681b      	ldr	r3, [r3, #0]
   1f7a8:	4298      	cmp	r0, r3
   1f7aa:	d010      	beq.n	1f7ce <_is_thread_time_slicing+0x32>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   1f7ac:	4a0b      	ldr	r2, [pc, #44]	; (1f7dc <_is_thread_time_slicing+0x40>)
   1f7ae:	f990 300a 	ldrsb.w	r3, [r0, #10]
   1f7b2:	6812      	ldr	r2, [r2, #0]
   1f7b4:	4293      	cmp	r3, r2
   1f7b6:	db0a      	blt.n	1f7ce <_is_thread_time_slicing+0x32>
	return list->head != list->tail;
   1f7b8:	f103 0214 	add.w	r2, r3, #20
   1f7bc:	4b08      	ldr	r3, [pc, #32]	; (1f7e0 <_is_thread_time_slicing+0x44>)
   1f7be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1f7c2:	6858      	ldr	r0, [r3, #4]
   1f7c4:	689b      	ldr	r3, [r3, #8]
   1f7c6:	1ac0      	subs	r0, r0, r3
   1f7c8:	bf18      	it	ne
   1f7ca:	2001      	movne	r0, #1
	return sys_dlist_has_multiple_nodes(q);
   1f7cc:	4770      	bx	lr
		return 0;
   1f7ce:	2000      	movs	r0, #0
}
   1f7d0:	4770      	bx	lr
   1f7d2:	bf00      	nop
   1f7d4:	20003504 	.word	0x20003504
   1f7d8:	00021580 	.word	0x00021580
   1f7dc:	20003508 	.word	0x20003508
   1f7e0:	200033e0 	.word	0x200033e0

0001f7e4 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
   1f7e4:	4b01      	ldr	r3, [pc, #4]	; (1f7ec <_update_time_slice_before_swap+0x8>)
   1f7e6:	2200      	movs	r2, #0
   1f7e8:	601a      	str	r2, [r3, #0]
   1f7ea:	4770      	bx	lr
   1f7ec:	2000520c 	.word	0x2000520c

0001f7f0 <_unpend_first_thread>:
	if (_handling_timeouts) {
   1f7f0:	4a10      	ldr	r2, [pc, #64]	; (1f834 <_unpend_first_thread+0x44>)
   1f7f2:	6812      	ldr	r2, [r2, #0]
{
   1f7f4:	4603      	mov	r3, r0
   1f7f6:	6800      	ldr	r0, [r0, #0]
	if (_handling_timeouts) {
   1f7f8:	b16a      	cbz	r2, 1f816 <_unpend_first_thread+0x26>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f7fa:	4283      	cmp	r3, r0
   1f7fc:	bf08      	it	eq
   1f7fe:	2000      	moveq	r0, #0
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   1f800:	b908      	cbnz	r0, 1f806 <_unpend_first_thread+0x16>
   1f802:	2000      	movs	r0, #0
   1f804:	4770      	bx	lr
			if (_is_thread_timeout_expired(thread)) {
   1f806:	6a02      	ldr	r2, [r0, #32]
   1f808:	3202      	adds	r2, #2
   1f80a:	d107      	bne.n	1f81c <_unpend_first_thread+0x2c>
	return (node == list->tail) ? NULL : node->next;
   1f80c:	685a      	ldr	r2, [r3, #4]
   1f80e:	4290      	cmp	r0, r2
   1f810:	d0f7      	beq.n	1f802 <_unpend_first_thread+0x12>
   1f812:	6800      	ldr	r0, [r0, #0]
   1f814:	e7f4      	b.n	1f800 <_unpend_first_thread+0x10>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f816:	4283      	cmp	r3, r0
   1f818:	d00a      	beq.n	1f830 <_unpend_first_thread+0x40>
	if (thread) {
   1f81a:	b150      	cbz	r0, 1f832 <_unpend_first_thread+0x42>
	node->prev->next = node->next;
   1f81c:	e890 000c 	ldmia.w	r0, {r2, r3}
   1f820:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1f822:	6802      	ldr	r2, [r0, #0]
   1f824:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   1f826:	7a43      	ldrb	r3, [r0, #9]
   1f828:	f023 0302 	bic.w	r3, r3, #2
   1f82c:	7243      	strb	r3, [r0, #9]
   1f82e:	4770      	bx	lr
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f830:	4610      	mov	r0, r2
		_unpend_thread(thread);
	}

	return thread;
}
   1f832:	4770      	bx	lr
   1f834:	20005208 	.word	0x20005208

0001f838 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   1f838:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
   1f83c:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   1f83e:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   1f840:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   1f842:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
   1f844:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   1f846:	6143      	str	r3, [r0, #20]
   1f848:	4770      	bx	lr
	...

0001f84c <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   1f84c:	b570      	push	{r4, r5, r6, lr}
   1f84e:	4605      	mov	r5, r0
	__asm__ volatile(
   1f850:	f04f 0320 	mov.w	r3, #32
   1f854:	f3ef 8611 	mrs	r6, BASEPRI
   1f858:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   1f85c:	f7ff ffc8 	bl	1f7f0 <_unpend_first_thread>
	if (!thread) {
   1f860:	4604      	mov	r4, r0
   1f862:	b998      	cbnz	r0, 1f88c <_impl_k_sem_give+0x40>
	sem->count += (sem->count != sem->limit);
   1f864:	68ab      	ldr	r3, [r5, #8]
   1f866:	68ea      	ldr	r2, [r5, #12]
   1f868:	429a      	cmp	r2, r3
   1f86a:	bf18      	it	ne
   1f86c:	3301      	addne	r3, #1
   1f86e:	60ab      	str	r3, [r5, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
   1f870:	2102      	movs	r1, #2
   1f872:	f105 0010 	add.w	r0, r5, #16
   1f876:	f000 fe01 	bl	2047c <_handle_obj_poll_events>
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
   1f87a:	2800      	cmp	r0, #0
   1f87c:	d03b      	beq.n	1f8f6 <_impl_k_sem_give+0xaa>
	_update_time_slice_before_swap();
   1f87e:	f7ff ffb1 	bl	1f7e4 <_update_time_slice_before_swap>
	return __swap(key);
   1f882:	4630      	mov	r0, r6
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
   1f884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1f888:	f7e1 ba68 	b.w	d5c <__swap>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1f88c:	6a01      	ldr	r1, [r0, #32]
	return _abort_timeout(&thread->base.timeout);
   1f88e:	f100 0210 	add.w	r2, r0, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1f892:	1c48      	adds	r0, r1, #1
   1f894:	d00f      	beq.n	1f8b6 <_impl_k_sem_give+0x6a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   1f896:	4b1b      	ldr	r3, [pc, #108]	; (1f904 <_impl_k_sem_give+0xb8>)
   1f898:	695b      	ldr	r3, [r3, #20]
   1f89a:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
   1f89c:	bf1f      	itttt	ne
   1f89e:	6922      	ldrne	r2, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   1f8a0:	6913      	ldrne	r3, [r2, #16]
   1f8a2:	185b      	addne	r3, r3, r1
   1f8a4:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   1f8a6:	6963      	ldr	r3, [r4, #20]
   1f8a8:	6922      	ldr	r2, [r4, #16]
   1f8aa:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1f8ac:	6922      	ldr	r2, [r4, #16]
   1f8ae:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   1f8b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f8b4:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f8b6:	7a63      	ldrb	r3, [r4, #9]
   1f8b8:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   1f8bc:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f8c0:	7262      	strb	r2, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   1f8c2:	d102      	bne.n	1f8ca <_impl_k_sem_give+0x7e>
   1f8c4:	6a23      	ldr	r3, [r4, #32]
   1f8c6:	3301      	adds	r3, #1
   1f8c8:	d018      	beq.n	1f8fc <_impl_k_sem_give+0xb0>
   1f8ca:	2300      	movs	r3, #0
   1f8cc:	6663      	str	r3, [r4, #100]	; 0x64
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1f8ce:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   1f8d2:	2b0d      	cmp	r3, #13
   1f8d4:	d80f      	bhi.n	1f8f6 <_impl_k_sem_give+0xaa>
   1f8d6:	b11b      	cbz	r3, 1f8e0 <_impl_k_sem_give+0x94>
   1f8d8:	4b0b      	ldr	r3, [pc, #44]	; (1f908 <_impl_k_sem_give+0xbc>)
   1f8da:	685b      	ldr	r3, [r3, #4]
   1f8dc:	051b      	lsls	r3, r3, #20
   1f8de:	d50a      	bpl.n	1f8f6 <_impl_k_sem_give+0xaa>
	return _is_preempt(_current) && __must_switch_threads();
   1f8e0:	4b08      	ldr	r3, [pc, #32]	; (1f904 <_impl_k_sem_give+0xb8>)
   1f8e2:	689b      	ldr	r3, [r3, #8]
   1f8e4:	895b      	ldrh	r3, [r3, #10]
   1f8e6:	2b7f      	cmp	r3, #127	; 0x7f
   1f8e8:	d805      	bhi.n	1f8f6 <_impl_k_sem_give+0xaa>
   1f8ea:	f7ff fec9 	bl	1f680 <__must_switch_threads>
   1f8ee:	3000      	adds	r0, #0
   1f8f0:	bf18      	it	ne
   1f8f2:	2001      	movne	r0, #1
   1f8f4:	e7c1      	b.n	1f87a <_impl_k_sem_give+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1f8f6:	f386 8811 	msr	BASEPRI, r6
   1f8fa:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   1f8fc:	4620      	mov	r0, r4
   1f8fe:	f7ff fdc5 	bl	1f48c <_add_thread_to_ready_q>
   1f902:	e7e2      	b.n	1f8ca <_impl_k_sem_give+0x7e>
   1f904:	200033e0 	.word	0x200033e0
   1f908:	e000ed00 	.word	0xe000ed00

0001f90c <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   1f90c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1f90e:	f04f 0320 	mov.w	r3, #32
   1f912:	f3ef 8411 	mrs	r4, BASEPRI
   1f916:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   1f91a:	6883      	ldr	r3, [r0, #8]
   1f91c:	b12b      	cbz	r3, 1f92a <_impl_k_sem_take+0x1e>
		sem->count--;
   1f91e:	3b01      	subs	r3, #1
   1f920:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1f922:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
   1f926:	2000      	movs	r0, #0
   1f928:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (timeout == K_NO_WAIT) {
   1f92a:	b921      	cbnz	r1, 1f936 <_impl_k_sem_take+0x2a>
   1f92c:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return -EBUSY;
   1f930:	f06f 000f 	mvn.w	r0, #15
   1f934:	bd38      	pop	{r3, r4, r5, pc}
	}

	_pend_current_thread(&sem->wait_q, timeout);
   1f936:	f7ff fe93 	bl	1f660 <_pend_current_thread>
	_update_time_slice_before_swap();
   1f93a:	f7ff ff53 	bl	1f7e4 <_update_time_slice_before_swap>
	return __swap(key);
   1f93e:	4620      	mov	r0, r4

	return _Swap(key);
}
   1f940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1f944:	f7e1 ba0a 	b.w	d5c <__swap>

0001f948 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
   1f948:	4b03      	ldr	r3, [pc, #12]	; (1f958 <_impl_k_uptime_get_32+0x10>)
   1f94a:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
   1f94e:	230a      	movs	r3, #10
   1f950:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
   1f954:	4770      	bx	lr
   1f956:	bf00      	nop
   1f958:	20005210 	.word	0x20005210

0001f95c <_tick_get>:
	__asm__ volatile(
   1f95c:	f04f 0220 	mov.w	r2, #32
   1f960:	f3ef 8311 	mrs	r3, BASEPRI
   1f964:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   1f968:	4a02      	ldr	r2, [pc, #8]	; (1f974 <_tick_get+0x18>)
   1f96a:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1f96e:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   1f972:	4770      	bx	lr
   1f974:	20005210 	.word	0x20005210

0001f978 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
   1f978:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   1f97a:	f7ff ffef 	bl	1f95c <_tick_get>
   1f97e:	240a      	movs	r4, #10
   1f980:	fba0 2304 	umull	r2, r3, r0, r4
   1f984:	fb04 3301 	mla	r3, r4, r1, r3
}
   1f988:	4610      	mov	r0, r2
   1f98a:	4619      	mov	r1, r3
   1f98c:	bd10      	pop	{r4, pc}
	...

0001f990 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   1f990:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f994:	4607      	mov	r7, r0
	__asm__ volatile(
   1f996:	f04f 0320 	mov.w	r3, #32
   1f99a:	f3ef 8011 	mrs	r0, BASEPRI
   1f99e:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   1f9a2:	4963      	ldr	r1, [pc, #396]	; (1fb30 <_nano_sys_clock_tick_announce+0x1a0>)
   1f9a4:	e9d1 4500 	ldrd	r4, r5, [r1]
   1f9a8:	19e2      	adds	r2, r4, r7
   1f9aa:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
   1f9ae:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1f9b2:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   1f9b6:	466e      	mov	r6, sp
   1f9b8:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
   1f9bc:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
   1f9c0:	f04f 0320 	mov.w	r3, #32
   1f9c4:	f3ef 8011 	mrs	r0, BASEPRI
   1f9c8:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   1f9cc:	4c59      	ldr	r4, [pc, #356]	; (1fb34 <_nano_sys_clock_tick_announce+0x1a4>)
   1f9ce:	4621      	mov	r1, r4
   1f9d0:	4602      	mov	r2, r0
   1f9d2:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f9d6:	428b      	cmp	r3, r1
   1f9d8:	d000      	beq.n	1f9dc <_nano_sys_clock_tick_announce+0x4c>
	if (!next) {
   1f9da:	b9fb      	cbnz	r3, 1fa1c <_nano_sys_clock_tick_announce+0x8c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1f9dc:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
   1f9e0:	68a0      	ldr	r0, [r4, #8]
   1f9e2:	f7ff fedb 	bl	1f79c <_is_thread_time_slicing>
   1f9e6:	b1b0      	cbz	r0, 1fa16 <_nano_sys_clock_tick_announce+0x86>
	_time_slice_elapsed += __ticks_to_ms(ticks);
   1f9e8:	4a53      	ldr	r2, [pc, #332]	; (1fb38 <_nano_sys_clock_tick_announce+0x1a8>)
   1f9ea:	6811      	ldr	r1, [r2, #0]
   1f9ec:	230a      	movs	r3, #10
   1f9ee:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
   1f9f2:	4b52      	ldr	r3, [pc, #328]	; (1fb3c <_nano_sys_clock_tick_announce+0x1ac>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
   1f9f4:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   1f9f6:	681b      	ldr	r3, [r3, #0]
   1f9f8:	429f      	cmp	r7, r3
   1f9fa:	db0c      	blt.n	1fa16 <_nano_sys_clock_tick_announce+0x86>
		_time_slice_elapsed = 0;
   1f9fc:	2300      	movs	r3, #0
   1f9fe:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   1fa00:	f04f 0320 	mov.w	r3, #32
   1fa04:	f3ef 8511 	mrs	r5, BASEPRI
   1fa08:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
   1fa0c:	68a0      	ldr	r0, [r4, #8]
   1fa0e:	f7ff fe77 	bl	1f700 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1fa12:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   1fa16:	b003      	add	sp, #12
   1fa18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
   1fa1c:	4d48      	ldr	r5, [pc, #288]	; (1fb40 <_nano_sys_clock_tick_announce+0x1b0>)
   1fa1e:	2101      	movs	r1, #1
   1fa20:	6029      	str	r1, [r5, #0]
   1fa22:	46ab      	mov	fp, r5
   1fa24:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = 0;
   1fa26:	f04f 0e00 	mov.w	lr, #0
			timeout->delta_ticks_from_prev = _EXPIRED;
   1fa2a:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
   1fa2e:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
   1fa30:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
   1fa32:	bfaa      	itet	ge
   1fa34:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
   1fa38:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
   1fa3c:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
   1fa40:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1fa42:	6960      	ldr	r0, [r4, #20]
		if (timeout->delta_ticks_from_prev == 0) {
   1fa44:	691d      	ldr	r5, [r3, #16]
   1fa46:	4298      	cmp	r0, r3
   1fa48:	bf14      	ite	ne
   1fa4a:	6818      	ldrne	r0, [r3, #0]
   1fa4c:	2000      	moveq	r0, #0
   1fa4e:	b9d5      	cbnz	r5, 1fa86 <_nano_sys_clock_tick_announce+0xf6>
	node->prev->next = node->next;
   1fa50:	e893 0220 	ldmia.w	r3, {r5, r9}
   1fa54:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
   1fa58:	681d      	ldr	r5, [r3, #0]
   1fa5a:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
   1fa5e:	9d00      	ldr	r5, [sp, #0]
	node->prev = list;
   1fa60:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
   1fa64:	9d00      	ldr	r5, [sp, #0]
	list->head = node;
   1fa66:	9300      	str	r3, [sp, #0]
	list->head->prev = node;
   1fa68:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
   1fa6a:	f8c3 c010 	str.w	ip, [r3, #16]
   1fa6e:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   1fa72:	f04f 0320 	mov.w	r3, #32
   1fa76:	f3ef 8211 	mrs	r2, BASEPRI
   1fa7a:	f383 8811 	msr	BASEPRI, r3
	while (next) {
   1fa7e:	4603      	mov	r3, r0
   1fa80:	2800      	cmp	r0, #0
   1fa82:	d1d4      	bne.n	1fa2e <_nano_sys_clock_tick_announce+0x9e>
   1fa84:	e001      	b.n	1fa8a <_nano_sys_clock_tick_announce+0xfa>
		} else if (ticks <= 0) {
   1fa86:	2900      	cmp	r1, #0
   1fa88:	dcf1      	bgt.n	1fa6e <_nano_sys_clock_tick_announce+0xde>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1fa8a:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   1fa8e:	9800      	ldr	r0, [sp, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fa90:	42b0      	cmp	r0, r6
   1fa92:	d103      	bne.n	1fa9c <_nano_sys_clock_tick_announce+0x10c>
	_handling_timeouts = 0;
   1fa94:	2300      	movs	r3, #0
   1fa96:	f8cb 3000 	str.w	r3, [fp]
   1fa9a:	e7a1      	b.n	1f9e0 <_nano_sys_clock_tick_announce+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   1fa9c:	2800      	cmp	r0, #0
   1fa9e:	d0f9      	beq.n	1fa94 <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
   1faa0:	9b01      	ldr	r3, [sp, #4]
   1faa2:	4298      	cmp	r0, r3
   1faa4:	d101      	bne.n	1faaa <_nano_sys_clock_tick_announce+0x11a>
   1faa6:	2600      	movs	r6, #0
   1faa8:	e000      	b.n	1faac <_nano_sys_clock_tick_announce+0x11c>
   1faaa:	6806      	ldr	r6, [r0, #0]
	timeout->delta_ticks_from_prev = _INACTIVE;
   1faac:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
   1fab0:	f04f 0900 	mov.w	r9, #0
	node->prev->next = node->next;
   1fab4:	e890 000c 	ldmia.w	r0, {r2, r3}
   1fab8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1faba:	6802      	ldr	r2, [r0, #0]
   1fabc:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
   1fabe:	6883      	ldr	r3, [r0, #8]
	__asm__ volatile(
   1fac0:	f04f 0220 	mov.w	r2, #32
   1fac4:	f3ef 8a11 	mrs	sl, BASEPRI
   1fac8:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   1facc:	f8c0 8010 	str.w	r8, [r0, #16]
	if (thread) {
   1fad0:	b1fb      	cbz	r3, 1fb12 <_nano_sys_clock_tick_announce+0x182>
	if (timeout_obj->wait_q) {
   1fad2:	68c2      	ldr	r2, [r0, #12]
   1fad4:	b152      	cbz	r2, 1faec <_nano_sys_clock_tick_announce+0x15c>
	node->prev->next = node->next;
   1fad6:	6859      	ldr	r1, [r3, #4]
   1fad8:	681a      	ldr	r2, [r3, #0]
   1fada:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
   1fadc:	681a      	ldr	r2, [r3, #0]
   1fade:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   1fae0:	7a5a      	ldrb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
   1fae2:	f8c3 901c 	str.w	r9, [r3, #28]
   1fae6:	f022 0202 	bic.w	r2, r2, #2
   1faea:	725a      	strb	r2, [r3, #9]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1faec:	7a5a      	ldrb	r2, [r3, #9]
   1faee:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
   1faf2:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1faf6:	7259      	strb	r1, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   1faf8:	d102      	bne.n	1fb00 <_nano_sys_clock_tick_announce+0x170>
   1fafa:	6a1a      	ldr	r2, [r3, #32]
   1fafc:	3201      	adds	r2, #1
   1fafe:	d013      	beq.n	1fb28 <_nano_sys_clock_tick_announce+0x198>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1fb00:	f38a 8811 	msr	BASEPRI, sl
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   1fb04:	2e00      	cmp	r6, #0
   1fb06:	d0c5      	beq.n	1fa94 <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
   1fb08:	9b01      	ldr	r3, [sp, #4]
   1fb0a:	42b3      	cmp	r3, r6
   1fb0c:	d108      	bne.n	1fb20 <_nano_sys_clock_tick_announce+0x190>
   1fb0e:	2300      	movs	r3, #0
   1fb10:	e007      	b.n	1fb22 <_nano_sys_clock_tick_announce+0x192>
   1fb12:	f38a 8811 	msr	BASEPRI, sl
		if (timeout->func) {
   1fb16:	6943      	ldr	r3, [r0, #20]
   1fb18:	2b00      	cmp	r3, #0
   1fb1a:	d0f3      	beq.n	1fb04 <_nano_sys_clock_tick_announce+0x174>
			timeout->func(timeout);
   1fb1c:	4798      	blx	r3
   1fb1e:	e7f1      	b.n	1fb04 <_nano_sys_clock_tick_announce+0x174>
   1fb20:	6833      	ldr	r3, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   1fb22:	4630      	mov	r0, r6
   1fb24:	461e      	mov	r6, r3
   1fb26:	e7c5      	b.n	1fab4 <_nano_sys_clock_tick_announce+0x124>
		_add_thread_to_ready_q(thread);
   1fb28:	4618      	mov	r0, r3
   1fb2a:	f7ff fcaf 	bl	1f48c <_add_thread_to_ready_q>
   1fb2e:	e7e7      	b.n	1fb00 <_nano_sys_clock_tick_announce+0x170>
   1fb30:	20005210 	.word	0x20005210
   1fb34:	200033e0 	.word	0x200033e0
   1fb38:	2000520c 	.word	0x2000520c
   1fb3c:	20003504 	.word	0x20003504
   1fb40:	20005208 	.word	0x20005208

0001fb44 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   1fb44:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1fb46:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1fb4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fb4e:	4903      	ldr	r1, [pc, #12]	; (1fb5c <k_sys_work_q_init+0x18>)
   1fb50:	4803      	ldr	r0, [pc, #12]	; (1fb60 <k_sys_work_q_init+0x1c>)
   1fb52:	f000 f98d 	bl	1fe70 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   1fb56:	2000      	movs	r0, #0
   1fb58:	bd08      	pop	{r3, pc}
   1fb5a:	bf00      	nop
   1fb5c:	2000d828 	.word	0x2000d828
   1fb60:	20005218 	.word	0x20005218

0001fb64 <_is_thread_ready>:
	return !(_is_thread_prevented_from_running(thread) ||
   1fb64:	7a43      	ldrb	r3, [r0, #9]
   1fb66:	06da      	lsls	r2, r3, #27
   1fb68:	d104      	bne.n	1fb74 <_is_thread_ready+0x10>
   1fb6a:	6a00      	ldr	r0, [r0, #32]
   1fb6c:	1c43      	adds	r3, r0, #1
   1fb6e:	4258      	negs	r0, r3
   1fb70:	4158      	adcs	r0, r3
   1fb72:	4770      	bx	lr
   1fb74:	2000      	movs	r0, #0
}
   1fb76:	4770      	bx	lr

0001fb78 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1fb78:	6903      	ldr	r3, [r0, #16]
   1fb7a:	1c5a      	adds	r2, r3, #1
   1fb7c:	d011      	beq.n	1fba2 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   1fb7e:	4a0a      	ldr	r2, [pc, #40]	; (1fba8 <_abort_timeout+0x30>)
   1fb80:	6952      	ldr	r2, [r2, #20]
   1fb82:	4290      	cmp	r0, r2
   1fb84:	bf1f      	itttt	ne
   1fb86:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   1fb88:	690a      	ldrne	r2, [r1, #16]
   1fb8a:	189b      	addne	r3, r3, r2
   1fb8c:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   1fb8e:	e890 000c 	ldmia.w	r0, {r2, r3}
   1fb92:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1fb94:	6802      	ldr	r2, [r0, #0]
   1fb96:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   1fb98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fb9c:	6103      	str	r3, [r0, #16]
	return 0;
   1fb9e:	2000      	movs	r0, #0
   1fba0:	4770      	bx	lr
		return _INACTIVE;
   1fba2:	4618      	mov	r0, r3
}
   1fba4:	4770      	bx	lr
   1fba6:	bf00      	nop
   1fba8:	200033e0 	.word	0x200033e0

0001fbac <schedule_new_thread.part.13>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   1fbac:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   1fbae:	f04f 0320 	mov.w	r3, #32
   1fbb2:	f3ef 8611 	mrs	r6, BASEPRI
   1fbb6:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   1fbba:	4a19      	ldr	r2, [pc, #100]	; (1fc20 <schedule_new_thread.part.13+0x74>)
	timeout->thread = thread;
   1fbbc:	6180      	str	r0, [r0, #24]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   1fbbe:	230a      	movs	r3, #10
   1fbc0:	3109      	adds	r1, #9
   1fbc2:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   1fbc6:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   1fbc8:	6201      	str	r1, [r0, #32]
   1fbca:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
   1fbcc:	2300      	movs	r3, #0
   1fbce:	61c3      	str	r3, [r0, #28]
   1fbd0:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fbd4:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   1fbd6:	f100 0510 	add.w	r5, r0, #16
   1fbda:	d108      	bne.n	1fbee <schedule_new_thread.part.13+0x42>
	node->next = list;
   1fbdc:	6101      	str	r1, [r0, #16]
	node->prev = list->tail;
   1fbde:	6953      	ldr	r3, [r2, #20]
   1fbe0:	6143      	str	r3, [r0, #20]
	list->tail->next = node;
   1fbe2:	6953      	ldr	r3, [r2, #20]
   1fbe4:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1fbe6:	6155      	str	r5, [r2, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1fbe8:	f386 8811 	msr	BASEPRI, r6
   1fbec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   1fbee:	2b00      	cmp	r3, #0
   1fbf0:	d0f4      	beq.n	1fbdc <schedule_new_thread.part.13+0x30>
   1fbf2:	f8d2 e014 	ldr.w	lr, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
   1fbf6:	6a04      	ldr	r4, [r0, #32]
   1fbf8:	691f      	ldr	r7, [r3, #16]
   1fbfa:	42bc      	cmp	r4, r7
   1fbfc:	dc08      	bgt.n	1fc10 <schedule_new_thread.part.13+0x64>
		node->prev = insert_point->prev;
   1fbfe:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   1fc00:	1b3c      	subs	r4, r7, r4
   1fc02:	611c      	str	r4, [r3, #16]
   1fc04:	6142      	str	r2, [r0, #20]
		node->next = insert_point;
   1fc06:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   1fc08:	685a      	ldr	r2, [r3, #4]
   1fc0a:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   1fc0c:	605d      	str	r5, [r3, #4]
   1fc0e:	e7eb      	b.n	1fbe8 <schedule_new_thread.part.13+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
   1fc10:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
   1fc12:	4573      	cmp	r3, lr
   1fc14:	6204      	str	r4, [r0, #32]
   1fc16:	d0e1      	beq.n	1fbdc <schedule_new_thread.part.13+0x30>
   1fc18:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   1fc1a:	2b00      	cmp	r3, #0
   1fc1c:	d1eb      	bne.n	1fbf6 <schedule_new_thread.part.13+0x4a>
   1fc1e:	e7dd      	b.n	1fbdc <schedule_new_thread.part.13+0x30>
   1fc20:	200033e0 	.word	0x200033e0

0001fc24 <k_is_in_isr>:
   1fc24:	f3ef 8005 	mrs	r0, IPSR
   1fc28:	280d      	cmp	r0, #13
   1fc2a:	d807      	bhi.n	1fc3c <k_is_in_isr+0x18>
   1fc2c:	b138      	cbz	r0, 1fc3e <k_is_in_isr+0x1a>
   1fc2e:	4b04      	ldr	r3, [pc, #16]	; (1fc40 <k_is_in_isr+0x1c>)
   1fc30:	6858      	ldr	r0, [r3, #4]
   1fc32:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   1fc36:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   1fc3a:	4770      	bx	lr
   1fc3c:	2001      	movs	r0, #1
}
   1fc3e:	4770      	bx	lr
   1fc40:	e000ed00 	.word	0xe000ed00

0001fc44 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   1fc44:	4b02      	ldr	r3, [pc, #8]	; (1fc50 <_is_thread_essential+0xc>)
   1fc46:	689b      	ldr	r3, [r3, #8]
   1fc48:	7a18      	ldrb	r0, [r3, #8]
}
   1fc4a:	f000 0001 	and.w	r0, r0, #1
   1fc4e:	4770      	bx	lr
   1fc50:	200033e0 	.word	0x200033e0

0001fc54 <_thread_entry>:
{
   1fc54:	b508      	push	{r3, lr}
   1fc56:	4604      	mov	r4, r0
   1fc58:	4608      	mov	r0, r1
   1fc5a:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1fc5c:	461a      	mov	r2, r3
   1fc5e:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   1fc60:	f7ff fd96 	bl	1f790 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   1fc64:	f7e1 fb2a 	bl	12bc <_impl_k_thread_abort>

0001fc68 <_impl_k_thread_start>:
{
   1fc68:	b510      	push	{r4, lr}
   1fc6a:	4601      	mov	r1, r0
	__asm__ volatile(
   1fc6c:	f04f 0320 	mov.w	r3, #32
   1fc70:	f3ef 8411 	mrs	r4, BASEPRI
   1fc74:	f383 8811 	msr	BASEPRI, r3
   1fc78:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
   1fc7a:	075a      	lsls	r2, r3, #29
   1fc7c:	d402      	bmi.n	1fc84 <_impl_k_thread_start+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1fc7e:	f384 8811 	msr	BASEPRI, r4
   1fc82:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1fc84:	f023 0304 	bic.w	r3, r3, #4
   1fc88:	7243      	strb	r3, [r0, #9]
	if (_is_thread_ready(thread)) {
   1fc8a:	f7ff ff6b 	bl	1fb64 <_is_thread_ready>
   1fc8e:	2800      	cmp	r0, #0
   1fc90:	d0f5      	beq.n	1fc7e <_impl_k_thread_start+0x16>
		_add_thread_to_ready_q(thread);
   1fc92:	4608      	mov	r0, r1
   1fc94:	f7ff fbfa 	bl	1f48c <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
   1fc98:	4b07      	ldr	r3, [pc, #28]	; (1fcb8 <_impl_k_thread_start+0x50>)
   1fc9a:	689b      	ldr	r3, [r3, #8]
   1fc9c:	895b      	ldrh	r3, [r3, #10]
   1fc9e:	2b7f      	cmp	r3, #127	; 0x7f
   1fca0:	d8ed      	bhi.n	1fc7e <_impl_k_thread_start+0x16>
   1fca2:	f7ff fced 	bl	1f680 <__must_switch_threads>
   1fca6:	2800      	cmp	r0, #0
   1fca8:	d0e9      	beq.n	1fc7e <_impl_k_thread_start+0x16>
	_update_time_slice_before_swap();
   1fcaa:	f7ff fd9b 	bl	1f7e4 <_update_time_slice_before_swap>
	return __swap(key);
   1fcae:	4620      	mov	r0, r4
}
   1fcb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fcb4:	f7e1 b852 	b.w	d5c <__swap>
   1fcb8:	200033e0 	.word	0x200033e0

0001fcbc <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   1fcbc:	b410      	push	{r4}

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
   1fcbe:	bc10      	pop	{r4}
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1fcc0:	f7e1 ba58 	b.w	1174 <_new_thread>

0001fcc4 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   1fcc4:	b570      	push	{r4, r5, r6, lr}
   1fcc6:	b086      	sub	sp, #24
   1fcc8:	4604      	mov	r4, r0
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1fcca:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1fccc:	9604      	str	r6, [sp, #16]
   1fcce:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1fcd0:	9603      	str	r6, [sp, #12]
   1fcd2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1fcd4:	9602      	str	r6, [sp, #8]
   1fcd6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   1fcd8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1fcda:	9601      	str	r6, [sp, #4]
   1fcdc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1fcde:	9600      	str	r6, [sp, #0]
   1fce0:	f7e1 fa48 	bl	1174 <_new_thread>
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
			  prio, options);

	if (delay != K_FOREVER) {
   1fce4:	1c6b      	adds	r3, r5, #1
   1fce6:	d003      	beq.n	1fcf0 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
   1fce8:	b92d      	cbnz	r5, 1fcf6 <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   1fcea:	4620      	mov	r0, r4
   1fcec:	f7ff ffbc 	bl	1fc68 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
   1fcf0:	4620      	mov	r0, r4
   1fcf2:	b006      	add	sp, #24
   1fcf4:	bd70      	pop	{r4, r5, r6, pc}
   1fcf6:	4629      	mov	r1, r5
   1fcf8:	4620      	mov	r0, r4
   1fcfa:	f7ff ff57 	bl	1fbac <schedule_new_thread.part.13>
   1fcfe:	e7f7      	b.n	1fcf0 <_impl_k_thread_create+0x2c>

0001fd00 <_k_thread_single_abort>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   1fd00:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1fd02:	b510      	push	{r4, lr}
   1fd04:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1fd06:	b103      	cbz	r3, 1fd0a <_k_thread_single_abort+0xa>
		thread->fn_abort();
   1fd08:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
   1fd0a:	4620      	mov	r0, r4
   1fd0c:	f7ff ff2a 	bl	1fb64 <_is_thread_ready>
   1fd10:	b138      	cbz	r0, 1fd22 <_k_thread_single_abort+0x22>
		_remove_thread_from_ready_q(thread);
   1fd12:	4620      	mov	r0, r4
   1fd14:	f7ff fc3e 	bl	1f594 <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   1fd18:	7a63      	ldrb	r3, [r4, #9]
   1fd1a:	f043 0308 	orr.w	r3, r3, #8
   1fd1e:	7263      	strb	r3, [r4, #9]
   1fd20:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
   1fd22:	7a63      	ldrb	r3, [r4, #9]
   1fd24:	079b      	lsls	r3, r3, #30
   1fd26:	d508      	bpl.n	1fd3a <_k_thread_single_abort+0x3a>
	node->prev->next = node->next;
   1fd28:	e894 000c 	ldmia.w	r4, {r2, r3}
   1fd2c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1fd2e:	6822      	ldr	r2, [r4, #0]
   1fd30:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   1fd32:	7a63      	ldrb	r3, [r4, #9]
   1fd34:	f023 0302 	bic.w	r3, r3, #2
   1fd38:	7263      	strb	r3, [r4, #9]
		if (_is_thread_timeout_active(thread)) {
   1fd3a:	6a23      	ldr	r3, [r4, #32]
   1fd3c:	3301      	adds	r3, #1
   1fd3e:	d0eb      	beq.n	1fd18 <_k_thread_single_abort+0x18>
	return _abort_timeout(&thread->base.timeout);
   1fd40:	f104 0010 	add.w	r0, r4, #16
   1fd44:	f7ff ff18 	bl	1fb78 <_abort_timeout>
   1fd48:	e7e6      	b.n	1fd18 <_k_thread_single_abort+0x18>
	...

0001fd4c <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   1fd4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   1fd4e:	4f21      	ldr	r7, [pc, #132]	; (1fdd4 <_init_static_threads+0x88>)
   1fd50:	4d21      	ldr	r5, [pc, #132]	; (1fdd8 <_init_static_threads+0x8c>)
{
   1fd52:	b087      	sub	sp, #28
   1fd54:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   1fd56:	42bd      	cmp	r5, r7
   1fd58:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   1fd5c:	d314      	bcc.n	1fd88 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
   1fd5e:	4b1f      	ldr	r3, [pc, #124]	; (1fddc <_init_static_threads+0x90>)
   1fd60:	689a      	ldr	r2, [r3, #8]
   1fd62:	7ad3      	ldrb	r3, [r2, #11]
   1fd64:	3b01      	subs	r3, #1
   1fd66:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   1fd68:	f04f 0320 	mov.w	r3, #32
   1fd6c:	f3ef 8511 	mrs	r5, BASEPRI
   1fd70:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   1fd74:	4c18      	ldr	r4, [pc, #96]	; (1fdd8 <_init_static_threads+0x8c>)
   1fd76:	42b4      	cmp	r4, r6
   1fd78:	d31f      	bcc.n	1fdba <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1fd7a:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   1fd7e:	b007      	add	sp, #28
   1fd80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   1fd84:	f7ff bcac 	b.w	1f6e0 <k_sched_unlock>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1fd88:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   1fd8c:	9304      	str	r3, [sp, #16]
   1fd8e:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1fd92:	9303      	str	r3, [sp, #12]
   1fd94:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1fd98:	9302      	str	r3, [sp, #8]
   1fd9a:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1fd9e:	9301      	str	r3, [sp, #4]
   1fda0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1fda4:	9300      	str	r3, [sp, #0]
   1fda6:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
   1fdaa:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   1fdac:	f7e1 f9e2 	bl	1174 <_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1fdb0:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   1fdb4:	64dd      	str	r5, [r3, #76]	; 0x4c
   1fdb6:	4625      	mov	r5, r4
   1fdb8:	e7cd      	b.n	1fd56 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
   1fdba:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1fdbc:	1c4b      	adds	r3, r1, #1
   1fdbe:	d003      	beq.n	1fdc8 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
   1fdc0:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   1fdc2:	b919      	cbnz	r1, 1fdcc <_init_static_threads+0x80>
   1fdc4:	f7ff ff50 	bl	1fc68 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1fdc8:	342c      	adds	r4, #44	; 0x2c
   1fdca:	e7d4      	b.n	1fd76 <_init_static_threads+0x2a>
   1fdcc:	f7ff feee 	bl	1fbac <schedule_new_thread.part.13>
   1fdd0:	e7fa      	b.n	1fdc8 <_init_static_threads+0x7c>
   1fdd2:	bf00      	nop
   1fdd4:	2000e9b8 	.word	0x2000e9b8
   1fdd8:	2000e9b8 	.word	0x2000e9b8
   1fddc:	200033e0 	.word	0x200033e0

0001fde0 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   1fde0:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   1fde2:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   1fde4:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
   1fde6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
   1fdea:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
   1fdec:	72c3      	strb	r3, [r0, #11]
   1fdee:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
   1fdf0:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
   1fdf2:	6183      	str	r3, [r0, #24]
	t->func = func;
   1fdf4:	6243      	str	r3, [r0, #36]	; 0x24
   1fdf6:	4770      	bx	lr

0001fdf8 <k_work_submit_to_queue>:
{
   1fdf8:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1fdfa:	f101 0308 	add.w	r3, r1, #8
   1fdfe:	f3bf 8f5b 	dmb	ish
   1fe02:	e853 2f00 	ldrex	r2, [r3]
   1fe06:	f042 0e01 	orr.w	lr, r2, #1
   1fe0a:	e843 ec00 	strex	ip, lr, [r3]
   1fe0e:	f1bc 0f00 	cmp.w	ip, #0
   1fe12:	d1f6      	bne.n	1fe02 <k_work_submit_to_queue+0xa>
   1fe14:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1fe18:	07d3      	lsls	r3, r2, #31
   1fe1a:	d403      	bmi.n	1fe24 <k_work_submit_to_queue+0x2c>
}
   1fe1c:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1fe20:	f7ff bac9 	b.w	1f3b6 <k_queue_append>
   1fe24:	f85d fb04 	ldr.w	pc, [sp], #4

0001fe28 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   1fe28:	f1a0 010c 	sub.w	r1, r0, #12
   1fe2c:	6980      	ldr	r0, [r0, #24]
   1fe2e:	f7ff bfe3 	b.w	1fdf8 <k_work_submit_to_queue>

0001fe32 <work_q_main>:
{
   1fe32:	b510      	push	{r4, lr}
   1fe34:	4604      	mov	r4, r0
		work = k_queue_get(&work_q->queue, K_FOREVER);
   1fe36:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fe3a:	4620      	mov	r0, r4
   1fe3c:	f7ff fadf 	bl	1f3fe <k_queue_get>
		if (!work) {
   1fe40:	4603      	mov	r3, r0
   1fe42:	2800      	cmp	r0, #0
   1fe44:	d0f7      	beq.n	1fe36 <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fe46:	3308      	adds	r3, #8
		handler = work->handler;
   1fe48:	6842      	ldr	r2, [r0, #4]
   1fe4a:	f3bf 8f5b 	dmb	ish
   1fe4e:	e853 1f00 	ldrex	r1, [r3]
   1fe52:	f021 0e01 	bic.w	lr, r1, #1
   1fe56:	e843 ec00 	strex	ip, lr, [r3]
   1fe5a:	f1bc 0f00 	cmp.w	ip, #0
   1fe5e:	d1f6      	bne.n	1fe4e <work_q_main+0x1c>
   1fe60:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   1fe64:	07cb      	lsls	r3, r1, #31
   1fe66:	d500      	bpl.n	1fe6a <work_q_main+0x38>
			handler(work);
   1fe68:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1fe6a:	f7ff fc73 	bl	1f754 <_impl_k_yield>
   1fe6e:	e7e2      	b.n	1fe36 <work_q_main+0x4>

0001fe70 <k_work_q_start>:
{
   1fe70:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fe72:	b087      	sub	sp, #28
   1fe74:	4604      	mov	r4, r0
   1fe76:	461f      	mov	r7, r3
   1fe78:	460d      	mov	r5, r1
   1fe7a:	4616      	mov	r6, r2
	k_queue_init(&work_q->queue);
   1fe7c:	f7ff fa6a 	bl	1f354 <k_queue_init>

   1fe80:	2000      	movs	r0, #0
   1fe82:	9005      	str	r0, [sp, #20]
   1fe84:	9004      	str	r0, [sp, #16]
   1fe86:	9002      	str	r0, [sp, #8]
   1fe88:	9001      	str	r0, [sp, #4]
   1fe8a:	9703      	str	r7, [sp, #12]
   1fe8c:	9400      	str	r4, [sp, #0]
   1fe8e:	4b04      	ldr	r3, [pc, #16]	; (1fea0 <k_work_q_start+0x30>)
   1fe90:	4632      	mov	r2, r6
   1fe92:	4629      	mov	r1, r5
   1fe94:	f104 0010 	add.w	r0, r4, #16
   1fe98:	f7ff ff14 	bl	1fcc4 <_impl_k_thread_create>
}
   1fe9c:	b007      	add	sp, #28
   1fe9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fea0:	0001fe33 	.word	0x0001fe33

0001fea4 <k_delayed_work_init>:
}

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
   1fea4:	b500      	push	{lr}
   1fea6:	f100 0308 	add.w	r3, r0, #8
   1feaa:	f3bf 8f5b 	dmb	ish
   1feae:	e853 2f00 	ldrex	r2, [r3]
   1feb2:	f022 0201 	bic.w	r2, r2, #1
   1feb6:	e843 2e00 	strex	lr, r2, [r3]
   1feba:	f1be 0f00 	cmp.w	lr, #0
   1febe:	d1f6      	bne.n	1feae <k_delayed_work_init+0xa>
   1fec0:	f3bf 8f5b 	dmb	ish
	t->delta_ticks_from_prev = _INACTIVE;
   1fec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fec8:	61c3      	str	r3, [r0, #28]
	t->func = func;
   1feca:	4a04      	ldr	r2, [pc, #16]	; (1fedc <k_delayed_work_init+0x38>)
	work->handler = handler;
   1fecc:	6041      	str	r1, [r0, #4]
	t->wait_q = NULL;
   1fece:	2300      	movs	r3, #0
   1fed0:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   1fed2:	6143      	str	r3, [r0, #20]
	t->func = func;
   1fed4:	6202      	str	r2, [r0, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   1fed6:	6243      	str	r3, [r0, #36]	; 0x24
   1fed8:	f85d fb04 	ldr.w	pc, [sp], #4
   1fedc:	0001fe29 	.word	0x0001fe29

0001fee0 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   1fee0:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   1fee2:	f04f 0320 	mov.w	r3, #32
   1fee6:	f3ef 8411 	mrs	r4, BASEPRI
   1feea:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   1feee:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1fef0:	b923      	cbnz	r3, 1fefc <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1fef2:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   1fef6:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   1fefa:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fefc:	f3bf 8f5b 	dmb	ish
   1ff00:	6883      	ldr	r3, [r0, #8]
   1ff02:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   1ff06:	07da      	lsls	r2, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   1ff08:	f100 0508 	add.w	r5, r0, #8
   1ff0c:	d529      	bpl.n	1ff62 <k_delayed_work_cancel+0x82>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   1ff0e:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1ff10:	6813      	ldr	r3, [r2, #0]
	sys_snode_t *prev = NULL;
   1ff12:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1ff14:	2b00      	cmp	r3, #0
   1ff16:	d0ec      	beq.n	1fef2 <k_delayed_work_cancel+0x12>
		if (test == node) {
   1ff18:	4298      	cmp	r0, r3
   1ff1a:	d11f      	bne.n	1ff5c <k_delayed_work_cancel+0x7c>
   1ff1c:	6803      	ldr	r3, [r0, #0]
   1ff1e:	6856      	ldr	r6, [r2, #4]
	if (!prev_node) {
   1ff20:	b9b9      	cbnz	r1, 1ff52 <k_delayed_work_cancel+0x72>
		if (list->tail == node) {
   1ff22:	42b0      	cmp	r0, r6
		list->head = node->next;
   1ff24:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   1ff26:	d100      	bne.n	1ff2a <k_delayed_work_cancel+0x4a>
			list->tail = list->head;
   1ff28:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   1ff2a:	2300      	movs	r3, #0
   1ff2c:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   1ff2e:	2300      	movs	r3, #0
   1ff30:	6243      	str	r3, [r0, #36]	; 0x24
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ff32:	f3bf 8f5b 	dmb	ish
   1ff36:	e855 2f00 	ldrex	r2, [r5]
   1ff3a:	f022 0201 	bic.w	r2, r2, #1
   1ff3e:	e845 2100 	strex	r1, r2, [r5]
   1ff42:	2900      	cmp	r1, #0
   1ff44:	d1f7      	bne.n	1ff36 <k_delayed_work_cancel+0x56>
   1ff46:	f3bf 8f5b 	dmb	ish
   1ff4a:	f384 8811 	msr	BASEPRI, r4
	return 0;
   1ff4e:	4618      	mov	r0, r3
   1ff50:	bd70      	pop	{r4, r5, r6, pc}
		if (list->tail == node) {
   1ff52:	42b0      	cmp	r0, r6
		prev_node->next = node->next;
   1ff54:	600b      	str	r3, [r1, #0]
			list->tail = prev_node;
   1ff56:	bf08      	it	eq
   1ff58:	6051      	streq	r1, [r2, #4]
   1ff5a:	e7e6      	b.n	1ff2a <k_delayed_work_cancel+0x4a>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1ff5c:	4619      	mov	r1, r3
   1ff5e:	681b      	ldr	r3, [r3, #0]
   1ff60:	e7d8      	b.n	1ff14 <k_delayed_work_cancel+0x34>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1ff62:	69c1      	ldr	r1, [r0, #28]
   1ff64:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   1ff66:	f100 020c 	add.w	r2, r0, #12
   1ff6a:	d0e0      	beq.n	1ff2e <k_delayed_work_cancel+0x4e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   1ff6c:	4b08      	ldr	r3, [pc, #32]	; (1ff90 <k_delayed_work_cancel+0xb0>)
   1ff6e:	695b      	ldr	r3, [r3, #20]
   1ff70:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
   1ff72:	bf1f      	itttt	ne
   1ff74:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   1ff76:	6913      	ldrne	r3, [r2, #16]
   1ff78:	185b      	addne	r3, r3, r1
   1ff7a:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   1ff7c:	6903      	ldr	r3, [r0, #16]
   1ff7e:	68c2      	ldr	r2, [r0, #12]
   1ff80:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1ff82:	68c2      	ldr	r2, [r0, #12]
   1ff84:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   1ff86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ff8a:	61c3      	str	r3, [r0, #28]
   1ff8c:	e7cf      	b.n	1ff2e <k_delayed_work_cancel+0x4e>
   1ff8e:	bf00      	nop
   1ff90:	200033e0 	.word	0x200033e0

0001ff94 <k_delayed_work_submit_to_queue>:
{
   1ff94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ff96:	4607      	mov	r7, r0
   1ff98:	460c      	mov	r4, r1
   1ff9a:	4615      	mov	r5, r2
	__asm__ volatile(
   1ff9c:	f04f 0320 	mov.w	r3, #32
   1ffa0:	f3ef 8611 	mrs	r6, BASEPRI
   1ffa4:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   1ffa8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1ffaa:	b123      	cbz	r3, 1ffb6 <k_delayed_work_submit_to_queue+0x22>
   1ffac:	4283      	cmp	r3, r0
   1ffae:	d00b      	beq.n	1ffc8 <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   1ffb0:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   1ffb4:	e00d      	b.n	1ffd2 <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   1ffb6:	b138      	cbz	r0, 1ffc8 <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   1ffb8:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   1ffba:	b96d      	cbnz	r5, 1ffd8 <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   1ffbc:	4621      	mov	r1, r4
   1ffbe:	4638      	mov	r0, r7
   1ffc0:	f7ff ff1a 	bl	1fdf8 <k_work_submit_to_queue>
	err = 0;
   1ffc4:	2000      	movs	r0, #0
   1ffc6:	e004      	b.n	1ffd2 <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   1ffc8:	4620      	mov	r0, r4
   1ffca:	f7ff ff89 	bl	1fee0 <k_delayed_work_cancel>
		if (err < 0) {
   1ffce:	2800      	cmp	r0, #0
   1ffd0:	daf2      	bge.n	1ffb8 <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1ffd2:	f386 8811 	msr	BASEPRI, r6
}
   1ffd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   1ffd8:	220a      	movs	r2, #10
   1ffda:	3509      	adds	r5, #9
   1ffdc:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   1ffe0:	4a16      	ldr	r2, [pc, #88]	; (2003c <k_delayed_work_submit_to_queue+0xa8>)
   1ffe2:	4611      	mov	r1, r2
	timeout->thread = thread;
   1ffe4:	2300      	movs	r3, #0
   1ffe6:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   1ffe8:	61a3      	str	r3, [r4, #24]
   1ffea:	f851 3f10 	ldr.w	r3, [r1, #16]!
		_add_timeout(NULL, &work->timeout, NULL,
   1ffee:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fff0:	428b      	cmp	r3, r1
   1fff2:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   1fff6:	61e5      	str	r5, [r4, #28]
   1fff8:	d106      	bne.n	20008 <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   1fffa:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   1fffc:	6953      	ldr	r3, [r2, #20]
   1fffe:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   20000:	6953      	ldr	r3, [r2, #20]
   20002:	601f      	str	r7, [r3, #0]
	list->tail = node;
   20004:	6157      	str	r7, [r2, #20]
   20006:	e7dd      	b.n	1ffc4 <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   20008:	2b00      	cmp	r3, #0
   2000a:	d0f6      	beq.n	1fffa <k_delayed_work_submit_to_queue+0x66>
   2000c:	f8d2 e014 	ldr.w	lr, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
   20010:	69e0      	ldr	r0, [r4, #28]
   20012:	691d      	ldr	r5, [r3, #16]
   20014:	42a8      	cmp	r0, r5
   20016:	dc08      	bgt.n	2002a <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   20018:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   2001a:	1a28      	subs	r0, r5, r0
   2001c:	6118      	str	r0, [r3, #16]
   2001e:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   20020:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   20022:	685a      	ldr	r2, [r3, #4]
   20024:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   20026:	605f      	str	r7, [r3, #4]
   20028:	e7cc      	b.n	1ffc4 <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   2002a:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   2002c:	4573      	cmp	r3, lr
   2002e:	61e0      	str	r0, [r4, #28]
   20030:	d0e3      	beq.n	1fffa <k_delayed_work_submit_to_queue+0x66>
   20032:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   20034:	2b00      	cmp	r3, #0
   20036:	d1eb      	bne.n	20010 <k_delayed_work_submit_to_queue+0x7c>
   20038:	e7df      	b.n	1fffa <k_delayed_work_submit_to_queue+0x66>
   2003a:	bf00      	nop
   2003c:	200033e0 	.word	0x200033e0

00020040 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20040:	7a42      	ldrb	r2, [r0, #9]
   20042:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
   20046:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2004a:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2004c:	d104      	bne.n	20058 <_ready_thread+0x18>
   2004e:	6a03      	ldr	r3, [r0, #32]
   20050:	3301      	adds	r3, #1
   20052:	d101      	bne.n	20058 <_ready_thread+0x18>
		_add_thread_to_ready_q(thread);
   20054:	f7ff ba1a 	b.w	1f48c <_add_thread_to_ready_q>
   20058:	4770      	bx	lr

0002005a <_unpend_thread>:
	node->prev->next = node->next;
   2005a:	e890 000c 	ldmia.w	r0, {r2, r3}
   2005e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   20060:	6802      	ldr	r2, [r0, #0]
   20062:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   20064:	7a43      	ldrb	r3, [r0, #9]
   20066:	f023 0302 	bic.w	r3, r3, #2
   2006a:	7243      	strb	r3, [r0, #9]
   2006c:	4770      	bx	lr
	...

00020070 <_add_timeout.constprop.9>:
static inline void _add_timeout(struct k_thread *thread,
   20070:	b430      	push	{r4, r5}
	timeout->thread = thread;
   20072:	2400      	movs	r4, #0
static inline void _add_timeout(struct k_thread *thread,
   20074:	4603      	mov	r3, r0
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   20076:	6102      	str	r2, [r0, #16]
	timeout->thread = thread;
   20078:	6084      	str	r4, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   2007a:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
   2007c:	b972      	cbnz	r2, 2009c <_add_timeout.constprop.9+0x2c>
	__asm__ volatile(
   2007e:	f04f 0120 	mov.w	r1, #32
   20082:	f3ef 8211 	mrs	r2, BASEPRI
   20086:	f381 8811 	msr	BASEPRI, r1
	timeout->delta_ticks_from_prev = _INACTIVE;
   2008a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2008e:	6101      	str	r1, [r0, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   20090:	f382 8811 	msr	BASEPRI, r2
		if (timeout->func) {
   20094:	6943      	ldr	r3, [r0, #20]
   20096:	b16b      	cbz	r3, 200b4 <_add_timeout.constprop.9+0x44>
}
   20098:	bc30      	pop	{r4, r5}
			timeout->func(timeout);
   2009a:	4718      	bx	r3
	return list->head == list;
   2009c:	4911      	ldr	r1, [pc, #68]	; (200e4 <_add_timeout.constprop.9+0x74>)
   2009e:	4608      	mov	r0, r1
   200a0:	f850 2f10 	ldr.w	r2, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   200a4:	4282      	cmp	r2, r0
   200a6:	d10d      	bne.n	200c4 <_add_timeout.constprop.9+0x54>
	node->next = list;
   200a8:	6018      	str	r0, [r3, #0]
	node->prev = list->tail;
   200aa:	694a      	ldr	r2, [r1, #20]
   200ac:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   200ae:	694a      	ldr	r2, [r1, #20]
   200b0:	6013      	str	r3, [r2, #0]
	list->tail = node;
   200b2:	614b      	str	r3, [r1, #20]
}
   200b4:	bc30      	pop	{r4, r5}
   200b6:	4770      	bx	lr
		*delta -= in_q->delta_ticks_from_prev;
   200b8:	1b64      	subs	r4, r4, r5
   200ba:	611c      	str	r4, [r3, #16]
	return (node == list->tail) ? NULL : node->next;
   200bc:	694c      	ldr	r4, [r1, #20]
   200be:	42a2      	cmp	r2, r4
   200c0:	d0f2      	beq.n	200a8 <_add_timeout.constprop.9+0x38>
   200c2:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   200c4:	2a00      	cmp	r2, #0
   200c6:	d0ef      	beq.n	200a8 <_add_timeout.constprop.9+0x38>
		if (*delta <= in_q->delta_ticks_from_prev) {
   200c8:	691c      	ldr	r4, [r3, #16]
   200ca:	6915      	ldr	r5, [r2, #16]
   200cc:	42ac      	cmp	r4, r5
   200ce:	dcf3      	bgt.n	200b8 <_add_timeout.constprop.9+0x48>
		node->prev = insert_point->prev;
   200d0:	6851      	ldr	r1, [r2, #4]
			in_q->delta_ticks_from_prev -= *delta;
   200d2:	1b2c      	subs	r4, r5, r4
   200d4:	6114      	str	r4, [r2, #16]
   200d6:	6059      	str	r1, [r3, #4]
		node->next = insert_point;
   200d8:	601a      	str	r2, [r3, #0]
		insert_point->prev->next = node;
   200da:	6851      	ldr	r1, [r2, #4]
   200dc:	600b      	str	r3, [r1, #0]
		insert_point->prev = node;
   200de:	6053      	str	r3, [r2, #4]
   200e0:	e7e8      	b.n	200b4 <_add_timeout.constprop.9+0x44>
   200e2:	bf00      	nop
   200e4:	200033e0 	.word	0x200033e0

000200e8 <_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   200e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
   200ea:	2b00      	cmp	r3, #0
{
   200ec:	b570      	push	{r4, r5, r6, lr}
   200ee:	4604      	mov	r4, r0
   200f0:	f100 0518 	add.w	r5, r0, #24
	if (timer->period > 0) {
   200f4:	dd0b      	ble.n	2010e <_timer_expiration_handler+0x26>
	__asm__ volatile(
   200f6:	f04f 0320 	mov.w	r3, #32
   200fa:	f3ef 8611 	mrs	r6, BASEPRI
   200fe:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
   20102:	6a82      	ldr	r2, [r0, #40]	; 0x28
   20104:	4629      	mov	r1, r5
   20106:	f7ff ffb3 	bl	20070 <_add_timeout.constprop.9>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2010a:	f386 8811 	msr	BASEPRI, r6
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
   2010e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   20110:	3301      	adds	r3, #1
   20112:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
   20114:	6a23      	ldr	r3, [r4, #32]
   20116:	b10b      	cbz	r3, 2011c <_timer_expiration_handler+0x34>
		timer->expiry_fn(timer);
   20118:	4620      	mov	r0, r4
   2011a:	4798      	blx	r3
	return list->head == list;
   2011c:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2011e:	42ac      	cmp	r4, r5
   20120:	d010      	beq.n	20144 <_timer_expiration_handler+0x5c>
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);

	if (!thread) {
   20122:	b17c      	cbz	r4, 20144 <_timer_expiration_handler+0x5c>
	 * calling _unpend_thread() because a) this is the only place a thread
	 * can be taken off this pend queue, and b) the only place a thread
	 * can be put on the pend queue is at thread level, which of course
	 * cannot interrupt the current context.
	 */
	_unpend_thread(thread);
   20124:	4620      	mov	r0, r4
   20126:	f7ff ff98 	bl	2005a <_unpend_thread>
	__asm__ volatile(
   2012a:	f04f 0320 	mov.w	r3, #32
   2012e:	f3ef 8511 	mrs	r5, BASEPRI
   20132:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();
	_ready_thread(thread);
   20136:	4620      	mov	r0, r4
   20138:	f7ff ff82 	bl	20040 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2013c:	f385 8811 	msr	BASEPRI, r5
   20140:	2300      	movs	r3, #0
   20142:	6663      	str	r3, [r4, #100]	; 0x64
   20144:	bd70      	pop	{r4, r5, r6, pc}
	...

00020148 <_timeout_remaining_get>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE(k_timer_status_sync, K_OBJ_TIMER, struct k_timer *);
#endif

s32_t _timeout_remaining_get(struct _timeout *timeout)
{
   20148:	b530      	push	{r4, r5, lr}
	__asm__ volatile(
   2014a:	f04f 0320 	mov.w	r3, #32
   2014e:	f3ef 8411 	mrs	r4, BASEPRI
   20152:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	s32_t remaining_ticks;

	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   20156:	6903      	ldr	r3, [r0, #16]
   20158:	3301      	adds	r3, #1
   2015a:	d016      	beq.n	2018a <_timeout_remaining_get+0x42>
	return list->head == list;
   2015c:	490d      	ldr	r1, [pc, #52]	; (20194 <_timeout_remaining_get+0x4c>)
   2015e:	460a      	mov	r2, r1
   20160:	f852 3f10 	ldr.w	r3, [r2, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20164:	4293      	cmp	r3, r2
   20166:	d012      	beq.n	2018e <_timeout_remaining_get+0x46>
		 * and summing up the various tick deltas involved
		 */
		struct _timeout *t =
			(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

		remaining_ticks = t->delta_ticks_from_prev;
   20168:	691a      	ldr	r2, [r3, #16]
   2016a:	6949      	ldr	r1, [r1, #20]
		while (t != timeout) {
   2016c:	4283      	cmp	r3, r0
   2016e:	d105      	bne.n	2017c <_timeout_remaining_get+0x34>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   20170:	f384 8811 	msr	BASEPRI, r4
	return (u64_t)ticks * _ms_per_tick;
   20174:	200a      	movs	r0, #10
   20176:	fb82 0100 	smull	r0, r1, r2, r0
		}
	}

	irq_unlock(key);
	return __ticks_to_ms(remaining_ticks);
}
   2017a:	bd30      	pop	{r4, r5, pc}
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2017c:	b13b      	cbz	r3, 2018e <_timeout_remaining_get+0x46>
	return (node == list->tail) ? NULL : node->next;
   2017e:	428b      	cmp	r3, r1
   20180:	d005      	beq.n	2018e <_timeout_remaining_get+0x46>
   20182:	681b      	ldr	r3, [r3, #0]
			remaining_ticks += t->delta_ticks_from_prev;
   20184:	691d      	ldr	r5, [r3, #16]
   20186:	442a      	add	r2, r5
   20188:	e7f0      	b.n	2016c <_timeout_remaining_get+0x24>
		remaining_ticks = 0;
   2018a:	2200      	movs	r2, #0
   2018c:	e7f0      	b.n	20170 <_timeout_remaining_get+0x28>
			remaining_ticks += t->delta_ticks_from_prev;
   2018e:	2300      	movs	r3, #0
   20190:	691b      	ldr	r3, [r3, #16]
   20192:	deff      	udf	#255	; 0xff
   20194:	200033e0 	.word	0x200033e0

00020198 <sys_dlist_remove>:
	node->prev->next = node->next;
   20198:	e890 000c 	ldmia.w	r0, {r2, r3}
   2019c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2019e:	6802      	ldr	r2, [r0, #0]
   201a0:	6053      	str	r3, [r2, #4]
   201a2:	4770      	bx	lr

000201a4 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   201a4:	b570      	push	{r4, r5, r6, lr}
   201a6:	2414      	movs	r4, #20
   201a8:	4615      	mov	r5, r2
   201aa:	fb04 0401 	mla	r4, r4, r1, r0
	event->poller = NULL;
   201ae:	2600      	movs	r6, #0
	for (; last_registered >= 0; last_registered--) {
   201b0:	2900      	cmp	r1, #0
   201b2:	da00      	bge.n	201b6 <clear_event_registrations+0x12>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   201b4:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   201b6:	7b63      	ldrb	r3, [r4, #13]
	event->poller = NULL;
   201b8:	60a6      	str	r6, [r4, #8]
	switch (event->type) {
   201ba:	f003 030f 	and.w	r3, r3, #15
   201be:	2b02      	cmp	r3, #2
   201c0:	d003      	beq.n	201ca <clear_event_registrations+0x26>
   201c2:	2b04      	cmp	r3, #4
   201c4:	d001      	beq.n	201ca <clear_event_registrations+0x26>
   201c6:	2b01      	cmp	r3, #1
   201c8:	d102      	bne.n	201d0 <clear_event_registrations+0x2c>
		sys_dlist_remove(&event->_node);
   201ca:	4620      	mov	r0, r4
   201cc:	f7ff ffe4 	bl	20198 <sys_dlist_remove>
   201d0:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
   201d4:	f04f 0320 	mov.w	r3, #32
   201d8:	f3ef 8511 	mrs	r5, BASEPRI
   201dc:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   201e0:	3901      	subs	r1, #1
   201e2:	3c14      	subs	r4, #20
   201e4:	e7e4      	b.n	201b0 <clear_event_registrations+0xc>
	...

000201e8 <signal_poll_event>:
}

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   201e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*must_reschedule = 0;
   201ea:	2300      	movs	r3, #0
   201ec:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
   201ee:	6883      	ldr	r3, [r0, #8]
{
   201f0:	4605      	mov	r5, r0
   201f2:	460e      	mov	r6, r1
   201f4:	4617      	mov	r7, r2
	if (!event->poller) {
   201f6:	2b00      	cmp	r3, #0
   201f8:	d049      	beq.n	2028e <signal_poll_event+0xa6>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   201fa:	6819      	ldr	r1, [r3, #0]
	thread->base.thread_state &= ~states;
   201fc:	7a4b      	ldrb	r3, [r1, #9]
   201fe:	f023 0220 	bic.w	r2, r3, #32

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
   20202:	0798      	lsls	r0, r3, #30
   20204:	724a      	strb	r2, [r1, #9]
   20206:	d542      	bpl.n	2028e <signal_poll_event+0xa6>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   20208:	6a0b      	ldr	r3, [r1, #32]
   2020a:	3302      	adds	r3, #2
   2020c:	d04a      	beq.n	202a4 <signal_poll_event+0xbc>
	sys_dlist_remove(&thread->base.k_q_node);
   2020e:	4608      	mov	r0, r1
   20210:	f7ff ffc2 	bl	20198 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   20214:	7a4b      	ldrb	r3, [r1, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   20216:	6a0c      	ldr	r4, [r1, #32]
   20218:	f023 0302 	bic.w	r3, r3, #2
   2021c:	1c62      	adds	r2, r4, #1
   2021e:	724b      	strb	r3, [r1, #9]
	return _abort_timeout(&thread->base.timeout);
   20220:	f101 0010 	add.w	r0, r1, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   20224:	d00c      	beq.n	20240 <signal_poll_event+0x58>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   20226:	4b21      	ldr	r3, [pc, #132]	; (202ac <signal_poll_event+0xc4>)
   20228:	695b      	ldr	r3, [r3, #20]
   2022a:	4298      	cmp	r0, r3
	return (node == list->tail) ? NULL : node->next;
   2022c:	bf1f      	itttt	ne
   2022e:	690a      	ldrne	r2, [r1, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   20230:	6913      	ldrne	r3, [r2, #16]
   20232:	191b      	addne	r3, r3, r4
   20234:	6113      	strne	r3, [r2, #16]
	sys_dlist_remove(&timeout->node);
   20236:	f7ff ffaf 	bl	20198 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
   2023a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2023e:	620b      	str	r3, [r1, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   20240:	7a48      	ldrb	r0, [r1, #9]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
   20242:	2e00      	cmp	r6, #0
   20244:	bf0c      	ite	eq
   20246:	f06f 0303 	mvneq.w	r3, #3
   2024a:	2300      	movne	r3, #0
   2024c:	f010 041f 	ands.w	r4, r0, #31
   20250:	664b      	str	r3, [r1, #100]	; 0x64
   20252:	d11c      	bne.n	2028e <signal_poll_event+0xa6>
   20254:	6a0b      	ldr	r3, [r1, #32]
   20256:	3301      	adds	r3, #1
   20258:	d119      	bne.n	2028e <signal_poll_event+0xa6>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
   2025a:	4608      	mov	r0, r1
   2025c:	f7ff f916 	bl	1f48c <_add_thread_to_ready_q>
   20260:	f3ef 8305 	mrs	r3, IPSR
   20264:	2b0d      	cmp	r3, #13
   20266:	d81b      	bhi.n	202a0 <signal_poll_event+0xb8>
   20268:	b123      	cbz	r3, 20274 <signal_poll_event+0x8c>
   2026a:	4b11      	ldr	r3, [pc, #68]	; (202b0 <signal_poll_event+0xc8>)
   2026c:	6858      	ldr	r0, [r3, #4]
   2026e:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
   20272:	d00b      	beq.n	2028c <signal_poll_event+0xa4>
	return _is_preempt(_current) && __must_switch_threads();
   20274:	4b0d      	ldr	r3, [pc, #52]	; (202ac <signal_poll_event+0xc4>)
   20276:	689b      	ldr	r3, [r3, #8]
   20278:	895b      	ldrh	r3, [r3, #10]
   2027a:	2b7f      	cmp	r3, #127	; 0x7f
   2027c:	d901      	bls.n	20282 <signal_poll_event+0x9a>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   2027e:	2000      	movs	r0, #0
   20280:	e004      	b.n	2028c <signal_poll_event+0xa4>
   20282:	f7ff f9fd 	bl	1f680 <__must_switch_threads>
   20286:	3000      	adds	r0, #0
   20288:	bf18      	it	ne
   2028a:	2001      	movne	r0, #1
   2028c:	6038      	str	r0, [r7, #0]
	event->state |= state;
   2028e:	7b6b      	ldrb	r3, [r5, #13]
   20290:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   20294:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   20298:	2000      	movs	r0, #0
	event->state |= state;
   2029a:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   2029c:	60a8      	str	r0, [r5, #8]

ready_event:
	set_event_ready(event, state);
	return 0;
   2029e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   202a0:	4620      	mov	r0, r4
   202a2:	e7f3      	b.n	2028c <signal_poll_event+0xa4>
		return -EAGAIN;
   202a4:	f06f 000a 	mvn.w	r0, #10
   202a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   202aa:	bf00      	nop
   202ac:	200033e0 	.word	0x200033e0
   202b0:	e000ed00 	.word	0xe000ed00

000202b4 <add_event>:
	return list->head == list;
   202b4:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   202b6:	4298      	cmp	r0, r3
{
   202b8:	b530      	push	{r4, r5, lr}
   202ba:	d00a      	beq.n	202d2 <add_event+0x1e>
   202bc:	6844      	ldr	r4, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   202be:	b144      	cbz	r4, 202d2 <add_event+0x1e>
   202c0:	68a5      	ldr	r5, [r4, #8]
   202c2:	6812      	ldr	r2, [r2, #0]
   202c4:	682d      	ldr	r5, [r5, #0]
   202c6:	f992 200a 	ldrsb.w	r2, [r2, #10]
   202ca:	f995 500a 	ldrsb.w	r5, [r5, #10]
   202ce:	4295      	cmp	r5, r2
   202d0:	da17      	bge.n	20302 <add_event+0x4e>
	node->next = list;
   202d2:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   202d4:	6843      	ldr	r3, [r0, #4]
   202d6:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   202d8:	6843      	ldr	r3, [r0, #4]
   202da:	6019      	str	r1, [r3, #0]
	list->tail = node;
   202dc:	6041      	str	r1, [r0, #4]
   202de:	bd30      	pop	{r4, r5, pc}
		if (_is_t1_higher_prio_than_t2(poller->thread,
   202e0:	689d      	ldr	r5, [r3, #8]
   202e2:	682d      	ldr	r5, [r5, #0]
   202e4:	f995 500a 	ldrsb.w	r5, [r5, #10]
   202e8:	4295      	cmp	r5, r2
   202ea:	dd06      	ble.n	202fa <add_event+0x46>
		node->prev = insert_point->prev;
   202ec:	685a      	ldr	r2, [r3, #4]
   202ee:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   202f0:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   202f2:	685a      	ldr	r2, [r3, #4]
   202f4:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   202f6:	6059      	str	r1, [r3, #4]
   202f8:	bd30      	pop	{r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   202fa:	42a3      	cmp	r3, r4
   202fc:	d003      	beq.n	20306 <add_event+0x52>
   202fe:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   20300:	b10b      	cbz	r3, 20306 <add_event+0x52>
   20302:	2b00      	cmp	r3, #0
   20304:	d1ec      	bne.n	202e0 <add_event+0x2c>
	node->prev = list->tail;
   20306:	e881 0011 	stmia.w	r1, {r0, r4}
   2030a:	e7e5      	b.n	202d8 <add_event+0x24>

0002030c <k_poll_event_init>:
{
   2030c:	b530      	push	{r4, r5, lr}
	event->type = type;
   2030e:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   20310:	6103      	str	r3, [r0, #16]
	event->type = type;
   20312:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
   20316:	7b81      	ldrb	r1, [r0, #14]
   20318:	f362 0100 	bfi	r1, r2, #0, #1
   2031c:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   2031e:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   20320:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
   20322:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
   20326:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
   2032a:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   2032c:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
   2032e:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   20330:	bd30      	pop	{r4, r5, pc}
	...

00020334 <k_poll>:
{
   20334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20338:	b087      	sub	sp, #28
   2033a:	4680      	mov	r8, r0
   2033c:	9101      	str	r1, [sp, #4]
   2033e:	4691      	mov	r9, r2
   20340:	f04f 0320 	mov.w	r3, #32
   20344:	f3ef 8111 	mrs	r1, BASEPRI
   20348:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
   2034c:	4d4a      	ldr	r5, [pc, #296]	; (20478 <k_poll+0x144>)
   2034e:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= states;
   20350:	7a53      	ldrb	r3, [r2, #9]
   20352:	f043 0320 	orr.w	r3, r3, #32
   20356:	7253      	strb	r3, [r2, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   20358:	f381 8811 	msr	BASEPRI, r1
	struct _poller poller = { .thread = _current };
   2035c:	f10d 0a18 	add.w	sl, sp, #24
   20360:	68aa      	ldr	r2, [r5, #8]
   20362:	f84a 2d0c 	str.w	r2, [sl, #-12]!
   20366:	4604      	mov	r4, r0
	for (int ii = 0; ii < num_events; ii++) {
   20368:	2700      	movs	r7, #0
	int last_registered = -1, rc;
   2036a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
   2036e:	9b01      	ldr	r3, [sp, #4]
   20370:	429f      	cmp	r7, r3
   20372:	db15      	blt.n	203a0 <k_poll+0x6c>
	__asm__ volatile(
   20374:	f04f 0320 	mov.w	r3, #32
   20378:	f3ef 8711 	mrs	r7, BASEPRI
   2037c:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
   20380:	68aa      	ldr	r2, [r5, #8]
   20382:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
   20384:	f013 0420 	ands.w	r4, r3, #32
   20388:	d144      	bne.n	20414 <k_poll+0xe0>
		clear_event_registrations(events, last_registered, key);
   2038a:	463a      	mov	r2, r7
   2038c:	4631      	mov	r1, r6
   2038e:	4640      	mov	r0, r8
   20390:	f7ff ff08 	bl	201a4 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   20394:	f387 8811 	msr	BASEPRI, r7
}
   20398:	4620      	mov	r0, r4
   2039a:	b007      	add	sp, #28
   2039c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   203a0:	f04f 0220 	mov.w	r2, #32
   203a4:	f3ef 8b11 	mrs	fp, BASEPRI
   203a8:	f382 8811 	msr	BASEPRI, r2
	switch (event->type) {
   203ac:	7b61      	ldrb	r1, [r4, #13]
   203ae:	f001 020f 	and.w	r2, r1, #15
   203b2:	2a02      	cmp	r2, #2
   203b4:	d003      	beq.n	203be <k_poll+0x8a>
   203b6:	2a04      	cmp	r2, #4
   203b8:	d004      	beq.n	203c4 <k_poll+0x90>
   203ba:	2a01      	cmp	r2, #1
   203bc:	d106      	bne.n	203cc <k_poll+0x98>
		if (event->signal->signaled) {
   203be:	6920      	ldr	r0, [r4, #16]
   203c0:	6880      	ldr	r0, [r0, #8]
   203c2:	e001      	b.n	203c8 <k_poll+0x94>
		if (!k_queue_is_empty(event->queue)) {
   203c4:	6920      	ldr	r0, [r4, #16]
   203c6:	6800      	ldr	r0, [r0, #0]
		if (event->signal->signaled) {
   203c8:	2800      	cmp	r0, #0
   203ca:	d148      	bne.n	2045e <k_poll+0x12a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
   203cc:	f1b9 0f00 	cmp.w	r9, #0
   203d0:	d016      	beq.n	20400 <k_poll+0xcc>
   203d2:	68a9      	ldr	r1, [r5, #8]
   203d4:	7a49      	ldrb	r1, [r1, #9]
   203d6:	068b      	lsls	r3, r1, #26
   203d8:	d512      	bpl.n	20400 <k_poll+0xcc>
	switch (event->type) {
   203da:	2a02      	cmp	r2, #2
   203dc:	d007      	beq.n	203ee <k_poll+0xba>
   203de:	2a04      	cmp	r2, #4
   203e0:	d013      	beq.n	2040a <k_poll+0xd6>
   203e2:	2a01      	cmp	r2, #1
   203e4:	d109      	bne.n	203fa <k_poll+0xc6>
		add_event(&event->signal->poll_events, event, poller);
   203e6:	4652      	mov	r2, sl
   203e8:	4621      	mov	r1, r4
   203ea:	6920      	ldr	r0, [r4, #16]
   203ec:	e003      	b.n	203f6 <k_poll+0xc2>
		add_event(&event->sem->poll_events, event, poller);
   203ee:	6920      	ldr	r0, [r4, #16]
   203f0:	4652      	mov	r2, sl
   203f2:	4621      	mov	r1, r4
   203f4:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   203f6:	f7ff ff5d 	bl	202b4 <add_event>
	event->poller = poller;
   203fa:	f8c4 a008 	str.w	sl, [r4, #8]
				++last_registered;
   203fe:	3601      	adds	r6, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   20400:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   20404:	3701      	adds	r7, #1
   20406:	3414      	adds	r4, #20
   20408:	e7b1      	b.n	2036e <k_poll+0x3a>
		add_event(&event->queue->poll_events, event, poller);
   2040a:	6920      	ldr	r0, [r4, #16]
   2040c:	4652      	mov	r2, sl
   2040e:	4621      	mov	r1, r4
   20410:	3008      	adds	r0, #8
   20412:	e7f0      	b.n	203f6 <k_poll+0xc2>
	thread->base.thread_state &= ~states;
   20414:	f023 0320 	bic.w	r3, r3, #32
   20418:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
   2041a:	f1b9 0f00 	cmp.w	r9, #0
   2041e:	d104      	bne.n	2042a <k_poll+0xf6>
   20420:	f387 8811 	msr	BASEPRI, r7
		return -EAGAIN;
   20424:	f06f 040a 	mvn.w	r4, #10
   20428:	e7b6      	b.n	20398 <k_poll+0x64>
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   2042a:	a804      	add	r0, sp, #16
	_pend_current_thread(&wait_q, timeout);
   2042c:	4649      	mov	r1, r9
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   2042e:	9004      	str	r0, [sp, #16]
   20430:	9005      	str	r0, [sp, #20]
	_pend_current_thread(&wait_q, timeout);
   20432:	f7ff f915 	bl	1f660 <_pend_current_thread>
	_update_time_slice_before_swap();
   20436:	f7ff f9d5 	bl	1f7e4 <_update_time_slice_before_swap>
	return __swap(key);
   2043a:	4638      	mov	r0, r7
   2043c:	f7e0 fc8e 	bl	d5c <__swap>
   20440:	4604      	mov	r4, r0
	__asm__ volatile(
   20442:	f04f 0320 	mov.w	r3, #32
   20446:	f3ef 8511 	mrs	r5, BASEPRI
   2044a:	f383 8811 	msr	BASEPRI, r3
	clear_event_registrations(events, last_registered, key);
   2044e:	462a      	mov	r2, r5
   20450:	4631      	mov	r1, r6
   20452:	4640      	mov	r0, r8
   20454:	f7ff fea6 	bl	201a4 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   20458:	f385 8811 	msr	BASEPRI, r5
	return swap_rc;
   2045c:	e79c      	b.n	20398 <k_poll+0x64>
	event->state |= state;
   2045e:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
   20462:	f362 1107 	bfi	r1, r2, #4, #4
	event->poller = NULL;
   20466:	2300      	movs	r3, #0
   20468:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   2046a:	7361      	strb	r1, [r4, #13]
			clear_polling_state(_current);
   2046c:	68a9      	ldr	r1, [r5, #8]
   2046e:	7a4a      	ldrb	r2, [r1, #9]
   20470:	f022 0220 	bic.w	r2, r2, #32
   20474:	724a      	strb	r2, [r1, #9]
   20476:	e7c3      	b.n	20400 <k_poll+0xcc>
   20478:	200033e0 	.word	0x200033e0

0002047c <_handle_obj_poll_events>:
}

/* returns 1 if a reschedule must take place, 0 otherwise */
int _handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
   2047c:	b513      	push	{r0, r1, r4, lr}
	return list->head == list;
   2047e:	6804      	ldr	r4, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
   20480:	42a0      	cmp	r0, r4
   20482:	d102      	bne.n	2048a <_handle_obj_poll_events+0xe>
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
		return 0;
   20484:	2000      	movs	r0, #0
	}

	(void) signal_poll_event(poll_event, state, &must_reschedule);
	return must_reschedule;
}
   20486:	b002      	add	sp, #8
   20488:	bd10      	pop	{r4, pc}
		return NULL;
	}

	node = list->head;
	sys_dlist_remove(node);
   2048a:	4620      	mov	r0, r4
   2048c:	f7ff fe84 	bl	20198 <sys_dlist_remove>
	if (!poll_event) {
   20490:	2c00      	cmp	r4, #0
   20492:	d0f7      	beq.n	20484 <_handle_obj_poll_events+0x8>
	(void) signal_poll_event(poll_event, state, &must_reschedule);
   20494:	aa01      	add	r2, sp, #4
   20496:	4620      	mov	r0, r4
   20498:	f7ff fea6 	bl	201e8 <signal_poll_event>
	return must_reschedule;
   2049c:	9801      	ldr	r0, [sp, #4]
   2049e:	e7f2      	b.n	20486 <_handle_obj_poll_events+0xa>

000204a0 <k_poll_signal>:
	signal->signaled = 0;
	/* signal->result is left unitialized */
}

int k_poll_signal(struct k_poll_signal *signal, int result)
{
   204a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__asm__ volatile(
   204a2:	f04f 0320 	mov.w	r3, #32
   204a6:	f3ef 8511 	mrs	r5, BASEPRI
   204aa:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   204ae:	6804      	ldr	r4, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;
	int must_reschedule;

	signal->result = result;
   204b0:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   204b2:	42a0      	cmp	r0, r4
	signal->signaled = 1;
   204b4:	f04f 0101 	mov.w	r1, #1
   204b8:	6081      	str	r1, [r0, #8]
   204ba:	d105      	bne.n	204c8 <k_poll_signal+0x28>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   204bc:	f385 8811 	msr	BASEPRI, r5

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (!poll_event) {
		irq_unlock(key);
		return 0;
   204c0:	2400      	movs	r4, #0
	} else {
		irq_unlock(key);
	}

	return rc;
}
   204c2:	4620      	mov	r0, r4
   204c4:	b003      	add	sp, #12
   204c6:	bd30      	pop	{r4, r5, pc}
	sys_dlist_remove(node);
   204c8:	4620      	mov	r0, r4
   204ca:	f7ff fe65 	bl	20198 <sys_dlist_remove>
	if (!poll_event) {
   204ce:	2c00      	cmp	r4, #0
   204d0:	d0f4      	beq.n	204bc <k_poll_signal+0x1c>
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   204d2:	4620      	mov	r0, r4
   204d4:	aa01      	add	r2, sp, #4
   204d6:	f7ff fe87 	bl	201e8 <signal_poll_event>
	if (must_reschedule) {
   204da:	9b01      	ldr	r3, [sp, #4]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   204dc:	4604      	mov	r4, r0
	if (must_reschedule) {
   204de:	b12b      	cbz	r3, 204ec <k_poll_signal+0x4c>
	_update_time_slice_before_swap();
   204e0:	f7ff f980 	bl	1f7e4 <_update_time_slice_before_swap>
	return __swap(key);
   204e4:	4628      	mov	r0, r5
   204e6:	f7e0 fc39 	bl	d5c <__swap>
   204ea:	e7ea      	b.n	204c2 <k_poll_signal+0x22>
   204ec:	f385 8811 	msr	BASEPRI, r5
   204f0:	e7e7      	b.n	204c2 <k_poll_signal+0x22>

000204f2 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   204f2:	4770      	bx	lr
