
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	2000d088 	.word	0x2000d088
       4:	000013d9 	.word	0x000013d9
       8:	00001435 	.word	0x00001435
       c:	00001271 	.word	0x00001271
      10:	00001271 	.word	0x00001271
      14:	00001271 	.word	0x00001271
      18:	00001271 	.word	0x00001271
      1c:	00001271 	.word	0x00001271
      20:	00001271 	.word	0x00001271
      24:	00001271 	.word	0x00001271
      28:	00001271 	.word	0x00001271
      2c:	00000e5d 	.word	0x00000e5d
      30:	00001271 	.word	0x00001271
      34:	00001271 	.word	0x00001271
      38:	00000e19 	.word	0x00000e19
      3c:	00001271 	.word	0x00001271

00000040 <_irq_vector_table>:
      40:	0000139d 000156ef 0000139d 0000139d     .....V..........
      50:	0000139d 0000139d 0000139d 0000139d     ................
      60:	0000139d 0000139d 0000139d 0000139d     ................
      70:	0000139d 0000139d 0000139d 0000139d     ................
      80:	0000139d 0000139d 0000139d 0000139d     ................
      90:	0000139d 0000139d 0000139d 0000139d     ................
      a0:	0000139d 0000139d 0000139d 0000139d     ................
      b0:	0000139d 0000139d 0000139d 0000139d     ................
      c0:	0000139d 0000139d 0000139d 0000139d     ................
      d0:	0000139d 0000139d 0000139d 0000139d     ................
      e0:	0000139d 0000139d 0000139d 0000139d     ................
      f0:	0000139d 0000139d                       ........

000000f8 <_sw_isr_table>:
      f8:	00000000 00002bd1 00000000 000011e1     .....+..........
     108:	2000eb74 00003087 00000000 000011e1     t.. .0..........
     118:	00000000 000011e1 00000000 000011e1     ................
     128:	2000eba4 00002db5 00000000 000011e1     ... .-..........
     138:	00000000 000011e1 00000000 000011e1     ................
     148:	00000000 000011e1 00000000 000156b5     .............V..
     158:	00000000 000011e1 2000eb80 000032c1     ........... .2..
     168:	00000000 000011e1 00000000 000011e1     ................
     178:	00000000 000011e1 00000000 00003401     .............4..
     188:	00000000 000011e1 00000000 000011e1     ................
     198:	00000000 000011e1 00000000 000011e1     ................
     1a8:	00000000 000011e1 00000000 000011e1     ................
     1b8:	00000000 000156e9 00000000 000011e1     .....V..........
     1c8:	00000000 000011e1 00000000 000011e1     ................
     1d8:	00000000 000011e1 00000000 000011e1     ................
     1e8:	00000000 000011e1 00000000 000011e1     ................
     1f8:	00000000 000011e1 00000000 000011e1     ................
     208:	00000000 000011e1 00000000 000011e1     ................
     218:	00000000 000011e1 00000000 000011e1     ................
     228:	00000000 000011e1 00000000 000011e1     ................
     238:	00000000 000011e1 00000000 000011e1     ................
     248:	00000000 000011e1 00000000 000011e1     ................
     258:	00000000 000011e1 00000000 000011e1     ................

00000268 <__aeabi_uldivmod>:
     268:	b953      	cbnz	r3, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26a:	b94a      	cbnz	r2, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26c:	2900      	cmp	r1, #0
     26e:	bf08      	it	eq
     270:	2800      	cmpeq	r0, #0
     272:	bf1c      	itt	ne
     274:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     278:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     27c:	f000 b98e 	b.w	59c <__aeabi_idiv0>
     280:	f1ad 0c08 	sub.w	ip, sp, #8
     284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     288:	f000 f81a 	bl	2c0 <__udivmoddi4>
     28c:	f8dd e004 	ldr.w	lr, [sp, #4]
     290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     294:	b004      	add	sp, #16
     296:	4770      	bx	lr

00000298 <__popcountsi2>:
     298:	0843      	lsrs	r3, r0, #1
     29a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     29e:	1ac0      	subs	r0, r0, r3
     2a0:	0883      	lsrs	r3, r0, #2
     2a2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     2a6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     2aa:	4418      	add	r0, r3
     2ac:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     2b0:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     2b4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     2b8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     2bc:	0e00      	lsrs	r0, r0, #24
     2be:	4770      	bx	lr

000002c0 <__udivmoddi4>:
     2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2c4:	468c      	mov	ip, r1
     2c6:	460d      	mov	r5, r1
     2c8:	4604      	mov	r4, r0
     2ca:	9e08      	ldr	r6, [sp, #32]
     2cc:	2b00      	cmp	r3, #0
     2ce:	d151      	bne.n	374 <__udivmoddi4+0xb4>
     2d0:	428a      	cmp	r2, r1
     2d2:	4617      	mov	r7, r2
     2d4:	d96d      	bls.n	3b2 <__udivmoddi4+0xf2>
     2d6:	fab2 fe82 	clz	lr, r2
     2da:	f1be 0f00 	cmp.w	lr, #0
     2de:	d00b      	beq.n	2f8 <__udivmoddi4+0x38>
     2e0:	f1ce 0c20 	rsb	ip, lr, #32
     2e4:	fa01 f50e 	lsl.w	r5, r1, lr
     2e8:	fa20 fc0c 	lsr.w	ip, r0, ip
     2ec:	fa02 f70e 	lsl.w	r7, r2, lr
     2f0:	ea4c 0c05 	orr.w	ip, ip, r5
     2f4:	fa00 f40e 	lsl.w	r4, r0, lr
     2f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2fc:	0c25      	lsrs	r5, r4, #16
     2fe:	fbbc f8fa 	udiv	r8, ip, sl
     302:	fa1f f987 	uxth.w	r9, r7
     306:	fb0a cc18 	mls	ip, sl, r8, ip
     30a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     30e:	fb08 f309 	mul.w	r3, r8, r9
     312:	42ab      	cmp	r3, r5
     314:	d90a      	bls.n	32c <__udivmoddi4+0x6c>
     316:	19ed      	adds	r5, r5, r7
     318:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     31c:	f080 8123 	bcs.w	566 <CONFIG_NET_BUF_DATA_SIZE+0x52>
     320:	42ab      	cmp	r3, r5
     322:	f240 8120 	bls.w	566 <CONFIG_NET_BUF_DATA_SIZE+0x52>
     326:	f1a8 0802 	sub.w	r8, r8, #2
     32a:	443d      	add	r5, r7
     32c:	1aed      	subs	r5, r5, r3
     32e:	b2a4      	uxth	r4, r4
     330:	fbb5 f0fa 	udiv	r0, r5, sl
     334:	fb0a 5510 	mls	r5, sl, r0, r5
     338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     33c:	fb00 f909 	mul.w	r9, r0, r9
     340:	45a1      	cmp	r9, r4
     342:	d909      	bls.n	358 <__udivmoddi4+0x98>
     344:	19e4      	adds	r4, r4, r7
     346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     34a:	f080 810a 	bcs.w	562 <CONFIG_NET_BUF_DATA_SIZE+0x4e>
     34e:	45a1      	cmp	r9, r4
     350:	f240 8107 	bls.w	562 <CONFIG_NET_BUF_DATA_SIZE+0x4e>
     354:	3802      	subs	r0, #2
     356:	443c      	add	r4, r7
     358:	eba4 0409 	sub.w	r4, r4, r9
     35c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     360:	2100      	movs	r1, #0
     362:	2e00      	cmp	r6, #0
     364:	d061      	beq.n	42a <CONFIG_MAIN_STACK_SIZE+0x2a>
     366:	fa24 f40e 	lsr.w	r4, r4, lr
     36a:	2300      	movs	r3, #0
     36c:	6034      	str	r4, [r6, #0]
     36e:	6073      	str	r3, [r6, #4]
     370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     374:	428b      	cmp	r3, r1
     376:	d907      	bls.n	388 <__udivmoddi4+0xc8>
     378:	2e00      	cmp	r6, #0
     37a:	d054      	beq.n	426 <CONFIG_MAIN_STACK_SIZE+0x26>
     37c:	2100      	movs	r1, #0
     37e:	e886 0021 	stmia.w	r6, {r0, r5}
     382:	4608      	mov	r0, r1
     384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     388:	fab3 f183 	clz	r1, r3
     38c:	2900      	cmp	r1, #0
     38e:	f040 808e 	bne.w	4ae <CONFIG_MAIN_STACK_SIZE+0xae>
     392:	42ab      	cmp	r3, r5
     394:	d302      	bcc.n	39c <__udivmoddi4+0xdc>
     396:	4282      	cmp	r2, r0
     398:	f200 80fa 	bhi.w	590 <CONFIG_NET_BUF_DATA_SIZE+0x7c>
     39c:	1a84      	subs	r4, r0, r2
     39e:	eb65 0503 	sbc.w	r5, r5, r3
     3a2:	2001      	movs	r0, #1
     3a4:	46ac      	mov	ip, r5
     3a6:	2e00      	cmp	r6, #0
     3a8:	d03f      	beq.n	42a <CONFIG_MAIN_STACK_SIZE+0x2a>
     3aa:	e886 1010 	stmia.w	r6, {r4, ip}
     3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3b2:	b912      	cbnz	r2, 3ba <__udivmoddi4+0xfa>
     3b4:	2701      	movs	r7, #1
     3b6:	fbb7 f7f2 	udiv	r7, r7, r2
     3ba:	fab7 fe87 	clz	lr, r7
     3be:	f1be 0f00 	cmp.w	lr, #0
     3c2:	d134      	bne.n	42e <CONFIG_MAIN_STACK_SIZE+0x2e>
     3c4:	1beb      	subs	r3, r5, r7
     3c6:	0c3a      	lsrs	r2, r7, #16
     3c8:	fa1f fc87 	uxth.w	ip, r7
     3cc:	2101      	movs	r1, #1
     3ce:	fbb3 f8f2 	udiv	r8, r3, r2
     3d2:	0c25      	lsrs	r5, r4, #16
     3d4:	fb02 3318 	mls	r3, r2, r8, r3
     3d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     3dc:	fb0c f308 	mul.w	r3, ip, r8
     3e0:	42ab      	cmp	r3, r5
     3e2:	d907      	bls.n	3f4 <__udivmoddi4+0x134>
     3e4:	19ed      	adds	r5, r5, r7
     3e6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     3ea:	d202      	bcs.n	3f2 <__udivmoddi4+0x132>
     3ec:	42ab      	cmp	r3, r5
     3ee:	f200 80d1 	bhi.w	594 <CONFIG_NET_BUF_DATA_SIZE+0x80>
     3f2:	4680      	mov	r8, r0
     3f4:	1aed      	subs	r5, r5, r3
     3f6:	b2a3      	uxth	r3, r4
     3f8:	fbb5 f0f2 	udiv	r0, r5, r2
     3fc:	fb02 5510 	mls	r5, r2, r0, r5
     400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     404:	fb0c fc00 	mul.w	ip, ip, r0
     408:	45a4      	cmp	ip, r4
     40a:	d907      	bls.n	41c <CONFIG_MAIN_STACK_SIZE+0x1c>
     40c:	19e4      	adds	r4, r4, r7
     40e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     412:	d202      	bcs.n	41a <CONFIG_MAIN_STACK_SIZE+0x1a>
     414:	45a4      	cmp	ip, r4
     416:	f200 80b8 	bhi.w	58a <CONFIG_NET_BUF_DATA_SIZE+0x76>
     41a:	4618      	mov	r0, r3
     41c:	eba4 040c 	sub.w	r4, r4, ip
     420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     424:	e79d      	b.n	362 <__udivmoddi4+0xa2>
     426:	4631      	mov	r1, r6
     428:	4630      	mov	r0, r6
     42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     42e:	f1ce 0420 	rsb	r4, lr, #32
     432:	fa05 f30e 	lsl.w	r3, r5, lr
     436:	fa07 f70e 	lsl.w	r7, r7, lr
     43a:	fa20 f804 	lsr.w	r8, r0, r4
     43e:	0c3a      	lsrs	r2, r7, #16
     440:	fa25 f404 	lsr.w	r4, r5, r4
     444:	ea48 0803 	orr.w	r8, r8, r3
     448:	fbb4 f1f2 	udiv	r1, r4, r2
     44c:	ea4f 4518 	mov.w	r5, r8, lsr #16
     450:	fb02 4411 	mls	r4, r2, r1, r4
     454:	fa1f fc87 	uxth.w	ip, r7
     458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     45c:	fb01 f30c 	mul.w	r3, r1, ip
     460:	42ab      	cmp	r3, r5
     462:	fa00 f40e 	lsl.w	r4, r0, lr
     466:	d909      	bls.n	47c <CONFIG_MAIN_STACK_SIZE+0x7c>
     468:	19ed      	adds	r5, r5, r7
     46a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     46e:	f080 808a 	bcs.w	586 <CONFIG_NET_BUF_DATA_SIZE+0x72>
     472:	42ab      	cmp	r3, r5
     474:	f240 8087 	bls.w	586 <CONFIG_NET_BUF_DATA_SIZE+0x72>
     478:	3902      	subs	r1, #2
     47a:	443d      	add	r5, r7
     47c:	1aeb      	subs	r3, r5, r3
     47e:	fa1f f588 	uxth.w	r5, r8
     482:	fbb3 f0f2 	udiv	r0, r3, r2
     486:	fb02 3310 	mls	r3, r2, r0, r3
     48a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     48e:	fb00 f30c 	mul.w	r3, r0, ip
     492:	42ab      	cmp	r3, r5
     494:	d907      	bls.n	4a6 <CONFIG_MAIN_STACK_SIZE+0xa6>
     496:	19ed      	adds	r5, r5, r7
     498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     49c:	d26f      	bcs.n	57e <CONFIG_NET_BUF_DATA_SIZE+0x6a>
     49e:	42ab      	cmp	r3, r5
     4a0:	d96d      	bls.n	57e <CONFIG_NET_BUF_DATA_SIZE+0x6a>
     4a2:	3802      	subs	r0, #2
     4a4:	443d      	add	r5, r7
     4a6:	1aeb      	subs	r3, r5, r3
     4a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     4ac:	e78f      	b.n	3ce <__udivmoddi4+0x10e>
     4ae:	f1c1 0720 	rsb	r7, r1, #32
     4b2:	fa22 f807 	lsr.w	r8, r2, r7
     4b6:	408b      	lsls	r3, r1
     4b8:	fa05 f401 	lsl.w	r4, r5, r1
     4bc:	ea48 0303 	orr.w	r3, r8, r3
     4c0:	fa20 fe07 	lsr.w	lr, r0, r7
     4c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     4c8:	40fd      	lsrs	r5, r7
     4ca:	ea4e 0e04 	orr.w	lr, lr, r4
     4ce:	fbb5 f9fc 	udiv	r9, r5, ip
     4d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
     4d6:	fb0c 5519 	mls	r5, ip, r9, r5
     4da:	fa1f f883 	uxth.w	r8, r3
     4de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     4e2:	fb09 f408 	mul.w	r4, r9, r8
     4e6:	42ac      	cmp	r4, r5
     4e8:	fa02 f201 	lsl.w	r2, r2, r1
     4ec:	fa00 fa01 	lsl.w	sl, r0, r1
     4f0:	d908      	bls.n	504 <CONFIG_BT_RX_STACK_SIZE+0x54>
     4f2:	18ed      	adds	r5, r5, r3
     4f4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4f8:	d243      	bcs.n	582 <CONFIG_NET_BUF_DATA_SIZE+0x6e>
     4fa:	42ac      	cmp	r4, r5
     4fc:	d941      	bls.n	582 <CONFIG_NET_BUF_DATA_SIZE+0x6e>
     4fe:	f1a9 0902 	sub.w	r9, r9, #2
     502:	441d      	add	r5, r3
     504:	1b2d      	subs	r5, r5, r4
     506:	fa1f fe8e 	uxth.w	lr, lr
     50a:	fbb5 f0fc 	udiv	r0, r5, ip
     50e:	fb0c 5510 	mls	r5, ip, r0, r5
     512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     516:	fb00 f808 	mul.w	r8, r0, r8
     51a:	45a0      	cmp	r8, r4
     51c:	d907      	bls.n	52e <CONFIG_NET_BUF_DATA_SIZE+0x1a>
     51e:	18e4      	adds	r4, r4, r3
     520:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     524:	d229      	bcs.n	57a <CONFIG_NET_BUF_DATA_SIZE+0x66>
     526:	45a0      	cmp	r8, r4
     528:	d927      	bls.n	57a <CONFIG_NET_BUF_DATA_SIZE+0x66>
     52a:	3802      	subs	r0, #2
     52c:	441c      	add	r4, r3
     52e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     532:	eba4 0408 	sub.w	r4, r4, r8
     536:	fba0 8902 	umull	r8, r9, r0, r2
     53a:	454c      	cmp	r4, r9
     53c:	46c6      	mov	lr, r8
     53e:	464d      	mov	r5, r9
     540:	d315      	bcc.n	56e <CONFIG_NET_BUF_DATA_SIZE+0x5a>
     542:	d012      	beq.n	56a <CONFIG_NET_BUF_DATA_SIZE+0x56>
     544:	b156      	cbz	r6, 55c <CONFIG_NET_BUF_DATA_SIZE+0x48>
     546:	ebba 030e 	subs.w	r3, sl, lr
     54a:	eb64 0405 	sbc.w	r4, r4, r5
     54e:	fa04 f707 	lsl.w	r7, r4, r7
     552:	40cb      	lsrs	r3, r1
     554:	431f      	orrs	r7, r3
     556:	40cc      	lsrs	r4, r1
     558:	6037      	str	r7, [r6, #0]
     55a:	6074      	str	r4, [r6, #4]
     55c:	2100      	movs	r1, #0
     55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     562:	4618      	mov	r0, r3
     564:	e6f8      	b.n	358 <__udivmoddi4+0x98>
     566:	4690      	mov	r8, r2
     568:	e6e0      	b.n	32c <__udivmoddi4+0x6c>
     56a:	45c2      	cmp	sl, r8
     56c:	d2ea      	bcs.n	544 <CONFIG_NET_BUF_DATA_SIZE+0x30>
     56e:	ebb8 0e02 	subs.w	lr, r8, r2
     572:	eb69 0503 	sbc.w	r5, r9, r3
     576:	3801      	subs	r0, #1
     578:	e7e4      	b.n	544 <CONFIG_NET_BUF_DATA_SIZE+0x30>
     57a:	4628      	mov	r0, r5
     57c:	e7d7      	b.n	52e <CONFIG_NET_BUF_DATA_SIZE+0x1a>
     57e:	4640      	mov	r0, r8
     580:	e791      	b.n	4a6 <CONFIG_MAIN_STACK_SIZE+0xa6>
     582:	4681      	mov	r9, r0
     584:	e7be      	b.n	504 <CONFIG_BT_RX_STACK_SIZE+0x54>
     586:	4601      	mov	r1, r0
     588:	e778      	b.n	47c <CONFIG_MAIN_STACK_SIZE+0x7c>
     58a:	3802      	subs	r0, #2
     58c:	443c      	add	r4, r7
     58e:	e745      	b.n	41c <CONFIG_MAIN_STACK_SIZE+0x1c>
     590:	4608      	mov	r0, r1
     592:	e708      	b.n	3a6 <__udivmoddi4+0xe6>
     594:	f1a8 0802 	sub.w	r8, r8, #2
     598:	443d      	add	r5, r7
     59a:	e72b      	b.n	3f4 <__udivmoddi4+0x134>

0000059c <__aeabi_idiv0>:
     59c:	4770      	bx	lr
     59e:	bf00      	nop

000005a0 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
     5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     5a4:	4686      	mov	lr, r0
     5a6:	460f      	mov	r7, r1
	register const char *s = nptr;
     5a8:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
     5aa:	462c      	mov	r4, r5
     5ac:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (((unsigned)c|32)-'a') < 26;
}

static inline int isspace(int c)
{
	return c == ' ' || ((unsigned)c-'\t') < 5;
     5b0:	2b20      	cmp	r3, #32
     5b2:	d003      	beq.n	5bc <strtol+0x1c>
     5b4:	f1a3 0109 	sub.w	r1, r3, #9
     5b8:	2904      	cmp	r1, #4
     5ba:	d857      	bhi.n	66c <CONFIG_BT_CTLR_COMPANY_ID+0x7b>
{
     5bc:	4625      	mov	r5, r4
     5be:	e7f4      	b.n	5aa <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
		neg = 1;
		c = *s++;
	} else if (c == '+')
     5c0:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
     5c2:	bf04      	itt	eq
     5c4:	1cac      	addeq	r4, r5, #2
     5c6:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
     5c8:	2100      	movs	r1, #0
     5ca:	e054      	b.n	676 <CONFIG_BT_CTLR_COMPANY_ID+0x85>
	if ((base == 0 || base == 16) &&
     5cc:	2b30      	cmp	r3, #48	; 0x30
     5ce:	d127      	bne.n	620 <CONFIG_BT_CTLR_COMPANY_ID+0x2f>
	    c == '0' && (*s == 'x' || *s == 'X')) {
     5d0:	7823      	ldrb	r3, [r4, #0]
     5d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
     5d6:	2b58      	cmp	r3, #88	; 0x58
     5d8:	d154      	bne.n	684 <CONFIG_BT_CTLR_COMPANY_ID+0x93>
		c = s[1];
     5da:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
     5dc:	2210      	movs	r2, #16
		s += 2;
     5de:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
     5e0:	2900      	cmp	r1, #0
     5e2:	bf0c      	ite	eq
     5e4:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
     5e8:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
     5ec:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
     5ee:	fbb8 fcf2 	udiv	ip, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
     5f2:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
     5f4:	fb02 891c 	mls	r9, r2, ip, r8
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
}

static inline int isdigit(int a)
{
	return (((unsigned)(a)-'0') < 10);
     5f8:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c))
     5fc:	2d09      	cmp	r5, #9
     5fe:	d811      	bhi.n	624 <CONFIG_BT_CTLR_COMPANY_ID+0x33>
			c -= '0';
     600:	462b      	mov	r3, r5
		else if (isalpha(c))
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
		if (c >= base)
     602:	429a      	cmp	r2, r3
     604:	dd1e      	ble.n	644 <CONFIG_BT_CTLR_COMPANY_ID+0x53>
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
     606:	1c75      	adds	r5, r6, #1
     608:	d007      	beq.n	61a <CONFIG_BT_CTLR_COMPANY_ID+0x29>
     60a:	4560      	cmp	r0, ip
     60c:	d817      	bhi.n	63e <CONFIG_BT_CTLR_COMPANY_ID+0x4d>
     60e:	d101      	bne.n	614 <CONFIG_BT_CTLR_COMPANY_ID+0x23>
     610:	454b      	cmp	r3, r9
     612:	dc14      	bgt.n	63e <CONFIG_BT_CTLR_COMPANY_ID+0x4d>
			any = -1;
		else {
			any = 1;
			acc *= base;
			acc += c;
     614:	fb02 3000 	mla	r0, r2, r0, r3
			any = 1;
     618:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
     61a:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c))
     61e:	e7eb      	b.n	5f8 <CONFIG_BT_CTLR_COMPANY_ID+0x7>
		base = c == '0' ? 8 : 10;
     620:	220a      	movs	r2, #10
     622:	e7dd      	b.n	5e0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x4>
	return (((unsigned)c|32)-'a') < 26;
     624:	f043 0520 	orr.w	r5, r3, #32
     628:	3d61      	subs	r5, #97	; 0x61
		else if (isalpha(c))
     62a:	2d19      	cmp	r5, #25
     62c:	d80a      	bhi.n	644 <CONFIG_BT_CTLR_COMPANY_ID+0x53>
	return ((unsigned)(a)-'A') < 26;
     62e:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
     632:	2d19      	cmp	r5, #25
     634:	bf8c      	ite	hi
     636:	2557      	movhi	r5, #87	; 0x57
     638:	2537      	movls	r5, #55	; 0x37
     63a:	1b5b      	subs	r3, r3, r5
     63c:	e7e1      	b.n	602 <CONFIG_BT_CTLR_COMPANY_ID+0x11>
			any = -1;
     63e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
     642:	e7ea      	b.n	61a <CONFIG_BT_CTLR_COMPANY_ID+0x29>
		}
	}
	if (any < 0) {
     644:	1c73      	adds	r3, r6, #1
     646:	d107      	bne.n	658 <CONFIG_BT_CTLR_COMPANY_ID+0x67>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
     648:	f01f fd5c 	bl	20104 <__errno>
     64c:	2326      	movs	r3, #38	; 0x26
     64e:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
     650:	4640      	mov	r0, r8
	} else if (neg)
		acc = -acc;
	if (endptr != 0)
     652:	b92f      	cbnz	r7, 660 <CONFIG_BT_CTLR_COMPANY_ID+0x6f>
     654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg)
     658:	b101      	cbz	r1, 65c <CONFIG_BT_CTLR_COMPANY_ID+0x6b>
		acc = -acc;
     65a:	4240      	negs	r0, r0
	if (endptr != 0)
     65c:	b1bf      	cbz	r7, 68e <CONFIG_BT_CTLR_COMPANY_ID+0x9d>
		*endptr = (char *)(any ? s - 1 : nptr);
     65e:	b10e      	cbz	r6, 664 <CONFIG_BT_CTLR_COMPANY_ID+0x73>
     660:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
     664:	f8c7 e000 	str.w	lr, [r7]
	return acc;
     668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (c == '-') {
     66c:	2b2d      	cmp	r3, #45	; 0x2d
     66e:	d1a7      	bne.n	5c0 <strtol+0x20>
		c = *s++;
     670:	786b      	ldrb	r3, [r5, #1]
     672:	1cac      	adds	r4, r5, #2
		neg = 1;
     674:	2101      	movs	r1, #1
	if ((base == 0 || base == 16) &&
     676:	2a00      	cmp	r2, #0
     678:	d0a8      	beq.n	5cc <strtol+0x2c>
     67a:	2a10      	cmp	r2, #16
     67c:	d1b0      	bne.n	5e0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x4>
     67e:	2b30      	cmp	r3, #48	; 0x30
     680:	d0a6      	beq.n	5d0 <strtol+0x30>
     682:	e7ad      	b.n	5e0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x4>
	if (base == 0)
     684:	2330      	movs	r3, #48	; 0x30
     686:	2a00      	cmp	r2, #0
     688:	d1aa      	bne.n	5e0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x4>
		base = c == '0' ? 8 : 10;
     68a:	2208      	movs	r2, #8
     68c:	e7a8      	b.n	5e0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x4>
}
     68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00000692 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
     692:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
     694:	4603      	mov	r3, r0
     696:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     69a:	b90a      	cbnz	r2, 6a0 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
     69c:	701a      	strb	r2, [r3, #0]

	return dest;
}
     69e:	4770      	bx	lr
		*d = *s;
     6a0:	f803 2b01 	strb.w	r2, [r3], #1
     6a4:	e7f7      	b.n	696 <strcpy+0x4>

000006a6 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
     6a6:	b510      	push	{r4, lr}
     6a8:	3901      	subs	r1, #1
	char *dest = d;

	while ((n > 0) && *s != '\0') {
     6aa:	4603      	mov	r3, r0
     6ac:	b13a      	cbz	r2, 6be <strncpy+0x18>
     6ae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
     6b2:	b92c      	cbnz	r4, 6c0 <strncpy+0x1a>
     6b4:	441a      	add	r2, r3
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
     6b6:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
     6ba:	4293      	cmp	r3, r2
     6bc:	d1fb      	bne.n	6b6 <strncpy+0x10>
		d++;
		n--;
	}

	return dest;
}
     6be:	bd10      	pop	{r4, pc}
		*d = *s;
     6c0:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
     6c4:	3a01      	subs	r2, #1
     6c6:	e7f1      	b.n	6ac <strncpy+0x6>

000006c8 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
     6c8:	b2c9      	uxtb	r1, r1
     6ca:	4603      	mov	r3, r0

	while ((*s != tmp) && (*s != '\0'))
     6cc:	f810 2b01 	ldrb.w	r2, [r0], #1
     6d0:	4291      	cmp	r1, r2
     6d2:	d006      	beq.n	6e2 <strchr+0x1a>
     6d4:	2a00      	cmp	r2, #0
     6d6:	d1f8      	bne.n	6ca <strchr+0x2>
		s++;

	return (*s == tmp) ? (char *) s : NULL;
     6d8:	2900      	cmp	r1, #0
     6da:	bf0c      	ite	eq
     6dc:	4618      	moveq	r0, r3
     6de:	2000      	movne	r0, #0
     6e0:	4770      	bx	lr
     6e2:	4618      	mov	r0, r3
}
     6e4:	4770      	bx	lr

000006e6 <strrchr>:
 *
 * @return pointer to last instance of found byte, or NULL if not found
 */

char *strrchr(const char *s, int c)
{
     6e6:	b510      	push	{r4, lr}
	char *match = NULL;
     6e8:	2300      	movs	r3, #0

	do {
		if (*s == (char)c) {
     6ea:	b2c9      	uxtb	r1, r1
     6ec:	4604      	mov	r4, r0
     6ee:	f810 2b01 	ldrb.w	r2, [r0], #1
     6f2:	428a      	cmp	r2, r1
     6f4:	bf08      	it	eq
     6f6:	4623      	moveq	r3, r4
			match = (char *)s;
		}
	} while (*s++);
     6f8:	2a00      	cmp	r2, #0
     6fa:	d1f7      	bne.n	6ec <strrchr+0x6>

	return match;
}
     6fc:	4618      	mov	r0, r3
     6fe:	bd10      	pop	{r4, pc}

00000700 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
     700:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
     702:	4603      	mov	r3, r0
     704:	1a98      	subs	r0, r3, r2
     706:	f813 1b01 	ldrb.w	r1, [r3], #1
     70a:	2900      	cmp	r1, #0
     70c:	d1fa      	bne.n	704 <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
     70e:	4770      	bx	lr

00000710 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
     710:	3801      	subs	r0, #1
     712:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
     714:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     718:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     71c:	4293      	cmp	r3, r2
     71e:	d102      	bne.n	726 <strcmp+0x16>
     720:	2b00      	cmp	r3, #0
     722:	d1f7      	bne.n	714 <strcmp+0x4>
     724:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
     726:	1a98      	subs	r0, r3, r2
     728:	4770      	bx	lr

0000072a <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
     72a:	b510      	push	{r4, lr}
     72c:	3901      	subs	r1, #1
     72e:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
     730:	4290      	cmp	r0, r2
     732:	d009      	beq.n	748 <strncmp+0x1e>
     734:	7803      	ldrb	r3, [r0, #0]
     736:	f811 4f01 	ldrb.w	r4, [r1, #1]!
     73a:	42a3      	cmp	r3, r4
     73c:	d100      	bne.n	740 <strncmp+0x16>
     73e:	b90b      	cbnz	r3, 744 <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
     740:	1b18      	subs	r0, r3, r4
}
     742:	bd10      	pop	{r4, pc}
		s1++;
     744:	3001      	adds	r0, #1
     746:	e7f3      	b.n	730 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
     748:	2000      	movs	r0, #0
     74a:	bd10      	pop	{r4, pc}

0000074c <strcat>:

char *strcat(char *_MLIBC_RESTRICT dest, const char *_MLIBC_RESTRICT src)
{
     74c:	b538      	push	{r3, r4, r5, lr}
     74e:	4604      	mov	r4, r0
     750:	460d      	mov	r5, r1
	strcpy(dest + strlen(dest), src);
     752:	f7ff ffd5 	bl	700 <strlen>
     756:	4629      	mov	r1, r5
     758:	4420      	add	r0, r4
     75a:	f7ff ff9a 	bl	692 <strcpy>
	return dest;
}
     75e:	4620      	mov	r0, r4
     760:	bd38      	pop	{r3, r4, r5, pc}

00000762 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     762:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
     764:	b182      	cbz	r2, 788 <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     766:	3a01      	subs	r2, #1
     768:	460c      	mov	r4, r1
     76a:	4603      	mov	r3, r0
     76c:	d103      	bne.n	776 <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
     76e:	781a      	ldrb	r2, [r3, #0]
     770:	7820      	ldrb	r0, [r4, #0]
     772:	1a10      	subs	r0, r2, r0
     774:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
     776:	781e      	ldrb	r6, [r3, #0]
     778:	7825      	ldrb	r5, [r4, #0]
     77a:	42ae      	cmp	r6, r5
     77c:	f100 0001 	add.w	r0, r0, #1
     780:	f101 0101 	add.w	r1, r1, #1
     784:	d0ef      	beq.n	766 <memcmp+0x4>
     786:	e7f2      	b.n	76e <memcmp+0xc>
		return 0;
     788:	4610      	mov	r0, r2
}
     78a:	bd70      	pop	{r4, r5, r6, pc}

0000078c <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (d - s) < n) {
     78c:	1a43      	subs	r3, r0, r1
     78e:	4293      	cmp	r3, r2
{
     790:	b510      	push	{r4, lr}
     792:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (d - s) < n) {
     796:	d304      	bcc.n	7a2 <memmove+0x16>
     798:	3901      	subs	r1, #1
     79a:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
     79c:	429a      	cmp	r2, r3
     79e:	d108      	bne.n	7b2 <memmove+0x26>
			n--;
		}
	}

	return d;
}
     7a0:	bd10      	pop	{r4, pc}
     7a2:	440a      	add	r2, r1
			dest[n] = src[n];
     7a4:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
     7a8:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
     7ac:	428a      	cmp	r2, r1
     7ae:	d1f9      	bne.n	7a4 <memmove+0x18>
     7b0:	bd10      	pop	{r4, pc}
			*dest = *src;
     7b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
     7b6:	f802 4b01 	strb.w	r4, [r2], #1
     7ba:	e7ef      	b.n	79c <memmove+0x10>

000007bc <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     7bc:	ea81 0300 	eor.w	r3, r1, r0
     7c0:	f013 0f03 	tst.w	r3, #3
{
     7c4:	b570      	push	{r4, r5, r6, lr}
     7c6:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     7c8:	d00b      	beq.n	7e2 <CONFIG_CONSOLE_SHELL_STACKSIZE+0x12>
     7ca:	3b01      	subs	r3, #1
     7cc:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
     7ce:	4291      	cmp	r1, r2
     7d0:	d11b      	bne.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
     7d2:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
     7d4:	2a00      	cmp	r2, #0
     7d6:	d0fc      	beq.n	7d2 <CONFIG_CONSOLE_SHELL_STACKSIZE+0x2>
			*(d_byte++) = *(s_byte++);
     7d8:	f811 4b01 	ldrb.w	r4, [r1], #1
     7dc:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
     7e0:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
     7e2:	079c      	lsls	r4, r3, #30
     7e4:	d1f6      	bne.n	7d4 <CONFIG_CONSOLE_SHELL_STACKSIZE+0x4>
     7e6:	1f1e      	subs	r6, r3, #4
     7e8:	460d      	mov	r5, r1
     7ea:	1b54      	subs	r4, r2, r5
     7ec:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
     7ee:	2c03      	cmp	r4, #3
     7f0:	d806      	bhi.n	800 <CONFIG_ISR_STACK_SIZE>
     7f2:	f022 0403 	bic.w	r4, r2, #3
     7f6:	4421      	add	r1, r4
     7f8:	4423      	add	r3, r4
     7fa:	f002 0203 	and.w	r2, r2, #3
     7fe:	e7e4      	b.n	7ca <memcpy+0xe>
			*(d_word++) = *(s_word++);
     800:	f855 4b04 	ldr.w	r4, [r5], #4
     804:	f846 4f04 	str.w	r4, [r6, #4]!
     808:	e7ef      	b.n	7ea <CONFIG_CONSOLE_SHELL_STACKSIZE+0x1a>
		*(d_byte++) = *(s_byte++);
     80a:	f811 4b01 	ldrb.w	r4, [r1], #1
     80e:	f803 4f01 	strb.w	r4, [r3, #1]!
     812:	e7dc      	b.n	7ce <memcpy+0x12>

00000814 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
     814:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
     816:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
     818:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
     81a:	079c      	lsls	r4, r3, #30
     81c:	d111      	bne.n	842 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
     81e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
     822:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
     826:	461e      	mov	r6, r3
     828:	1b95      	subs	r5, r2, r6
     82a:	441d      	add	r5, r3
     82c:	2d03      	cmp	r5, #3
     82e:	d80e      	bhi.n	84e <memset+0x3a>
     830:	f022 0403 	bic.w	r4, r2, #3
     834:	4423      	add	r3, r4
     836:	f002 0203 	and.w	r2, r2, #3
     83a:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
     83c:	4293      	cmp	r3, r2
     83e:	d109      	bne.n	854 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
     840:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
     842:	2a00      	cmp	r2, #0
     844:	d0fc      	beq.n	840 <memset+0x2c>
		*(d_byte++) = c_byte;
     846:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
     84a:	3a01      	subs	r2, #1
     84c:	e7e5      	b.n	81a <memset+0x6>
		*(d_word++) = c_word;
     84e:	f846 4b04 	str.w	r4, [r6], #4
     852:	e7e9      	b.n	828 <memset+0x14>
		*(d_byte++) = c_byte;
     854:	f803 1b01 	strb.w	r1, [r3], #1
     858:	e7f0      	b.n	83c <memset+0x28>
	...

0000085c <build_reply_pkt>:
}

struct net_pkt *build_reply_pkt(const char *name,
				struct net_app_ctx *ctx,
				struct net_pkt *pkt)
{
     85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     860:	b087      	sub	sp, #28
	struct net_pkt *reply_pkt;
	struct net_buf *frag, *tmp;
	int header_len = 0, recv_len, reply_len;

	NET_INFO("%s received %d bytes", name, net_pkt_appdatalen(pkt));
     862:	4c7c      	ldr	r4, [pc, #496]	; (a54 <build_reply_pkt+0x1f8>)
{
     864:	af04      	add	r7, sp, #16
	NET_INFO("%s received %d bytes", name, net_pkt_appdatalen(pkt));
     866:	9403      	str	r4, [sp, #12]
     868:	8e53      	ldrh	r3, [r2, #50]	; 0x32
{
     86a:	6079      	str	r1, [r7, #4]
     86c:	4690      	mov	r8, r2
	NET_INFO("%s received %d bytes", name, net_pkt_appdatalen(pkt));
     86e:	9302      	str	r3, [sp, #8]
     870:	9001      	str	r0, [sp, #4]
     872:	9400      	str	r4, [sp, #0]
     874:	4b78      	ldr	r3, [pc, #480]	; (a58 <build_reply_pkt+0x1fc>)
     876:	4a79      	ldr	r2, [pc, #484]	; (a5c <build_reply_pkt+0x200>)
     878:	4979      	ldr	r1, [pc, #484]	; (a60 <build_reply_pkt+0x204>)
     87a:	487a      	ldr	r0, [pc, #488]	; (a64 <build_reply_pkt+0x208>)
     87c:	f000 ffca 	bl	1814 <printk>

	if (net_pkt_appdatalen(pkt) == 0) {
     880:	f8b8 6032 	ldrh.w	r6, [r8, #50]	; 0x32
     884:	46a1      	mov	r9, r4
     886:	2e00      	cmp	r6, #0
     888:	f000 80d6 	beq.w	a38 <build_reply_pkt+0x1dc>
#endif
}

static inline u8_t net_pkt_family(struct net_pkt *pkt)
{
	return pkt->family;
     88c:	f898 1036 	ldrb.w	r1, [r8, #54]	; 0x36
		return NULL;
	}

	reply_pkt = net_app_get_net_pkt(ctx, net_pkt_family(pkt), K_FOREVER);
     890:	6878      	ldr	r0, [r7, #4]
     892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     896:	f3c1 01c3 	ubfx	r1, r1, #3, #4
     89a:	f01f fae4 	bl	1fe66 <net_app_get_net_pkt>

	NET_ASSERT(reply_pkt);
     89e:	4606      	mov	r6, r0
     8a0:	b948      	cbnz	r0, 8b6 <build_reply_pkt+0x5a>
     8a2:	4b71      	ldr	r3, [pc, #452]	; (a68 <build_reply_pkt+0x20c>)
     8a4:	9301      	str	r3, [sp, #4]
     8a6:	4b71      	ldr	r3, [pc, #452]	; (a6c <build_reply_pkt+0x210>)
     8a8:	9300      	str	r3, [sp, #0]
     8aa:	4a71      	ldr	r2, [pc, #452]	; (a70 <build_reply_pkt+0x214>)
     8ac:	4b6a      	ldr	r3, [pc, #424]	; (a58 <build_reply_pkt+0x1fc>)
     8ae:	496c      	ldr	r1, [pc, #432]	; (a60 <build_reply_pkt+0x204>)
     8b0:	4870      	ldr	r0, [pc, #448]	; (a74 <build_reply_pkt+0x218>)
     8b2:	f000 ffaf 	bl	1814 <printk>
     8b6:	f896 2036 	ldrb.w	r2, [r6, #54]	; 0x36
     8ba:	f898 3036 	ldrb.w	r3, [r8, #54]	; 0x36
	NET_ASSERT(net_pkt_family(reply_pkt) == net_pkt_family(pkt));
     8be:	f3c2 02c3 	ubfx	r2, r2, #3, #4
     8c2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
     8c6:	429a      	cmp	r2, r3
     8c8:	d009      	beq.n	8de <build_reply_pkt+0x82>
     8ca:	4b67      	ldr	r3, [pc, #412]	; (a68 <build_reply_pkt+0x20c>)
     8cc:	9301      	str	r3, [sp, #4]
     8ce:	4b67      	ldr	r3, [pc, #412]	; (a6c <build_reply_pkt+0x210>)
     8d0:	9300      	str	r3, [sp, #0]
     8d2:	4a67      	ldr	r2, [pc, #412]	; (a70 <build_reply_pkt+0x214>)
     8d4:	4b60      	ldr	r3, [pc, #384]	; (a58 <build_reply_pkt+0x1fc>)
     8d6:	4962      	ldr	r1, [pc, #392]	; (a60 <build_reply_pkt+0x204>)
     8d8:	4867      	ldr	r0, [pc, #412]	; (a78 <build_reply_pkt+0x21c>)
     8da:	f000 ff9b 	bl	1814 <printk>
     8de:	f8d8 5008 	ldr.w	r5, [r8, #8]
 *
 *  @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
     8e2:	f04f 0a00 	mov.w	sl, #0

	while (buf) {
     8e6:	2d00      	cmp	r5, #0
     8e8:	f040 80ab 	bne.w	a42 <build_reply_pkt+0x1e6>

	recv_len = net_pkt_get_len(pkt);
	NET_INFO("recv_len %d bytes", recv_len);
     8ec:	f8cd 9008 	str.w	r9, [sp, #8]
     8f0:	e88d 0600 	stmia.w	sp, {r9, sl}
     8f4:	4b58      	ldr	r3, [pc, #352]	; (a58 <build_reply_pkt+0x1fc>)
     8f6:	4a59      	ldr	r2, [pc, #356]	; (a5c <build_reply_pkt+0x200>)
     8f8:	4959      	ldr	r1, [pc, #356]	; (a60 <build_reply_pkt+0x204>)
     8fa:	4860      	ldr	r0, [pc, #384]	; (a7c <build_reply_pkt+0x220>)
     8fc:	f000 ff8a 	bl	1814 <printk>
	
	tmp = pkt->frags;
     900:	f8d8 4008 	ldr.w	r4, [r8, #8]
	char buf1[tmp->len];
	NET_INFO("tmp->len %d bytes", tmp->len);
     904:	4956      	ldr	r1, [pc, #344]	; (a60 <build_reply_pkt+0x204>)
	char buf1[tmp->len];
     906:	89a2      	ldrh	r2, [r4, #12]
	NET_INFO("tmp->len %d bytes", tmp->len);
     908:	485d      	ldr	r0, [pc, #372]	; (a80 <build_reply_pkt+0x224>)
	char buf1[tmp->len];
     90a:	1dd3      	adds	r3, r2, #7
     90c:	f023 0307 	bic.w	r3, r3, #7
     910:	ebad 0d03 	sub.w	sp, sp, r3
     914:	f10d 0b10 	add.w	fp, sp, #16
	NET_INFO("tmp->len %d bytes", tmp->len);
     918:	4b4f      	ldr	r3, [pc, #316]	; (a58 <build_reply_pkt+0x1fc>)
	char buf1[tmp->len];
     91a:	9201      	str	r2, [sp, #4]
	NET_INFO("tmp->len %d bytes", tmp->len);
     91c:	f8cd 9008 	str.w	r9, [sp, #8]
     920:	4a4e      	ldr	r2, [pc, #312]	; (a5c <build_reply_pkt+0x200>)
     922:	f8cd 9000 	str.w	r9, [sp]
     926:	f000 ff75 	bl	1814 <printk>
	memcpy(buf1,tmp->data, tmp->len );
     92a:	89a2      	ldrh	r2, [r4, #12]
     92c:	68a1      	ldr	r1, [r4, #8]
     92e:	4658      	mov	r0, fp
     930:	f7ff ff44 	bl	7bc <memcpy>

	printk("APP \n");
     934:	4853      	ldr	r0, [pc, #332]	; (a84 <build_reply_pkt+0x228>)
     936:	f000 ff6d 	bl	1814 <printk>
		printk("0x%02X", buf[i]);
	}
*/	
	
	/* If we have link layer headers, then get rid of them here. */
	if (recv_len != net_pkt_appdatalen(pkt)) {
     93a:	f8b8 3032 	ldrh.w	r3, [r8, #50]	; 0x32
     93e:	459a      	cmp	sl, r3
     940:	d021      	beq.n	986 <build_reply_pkt+0x12a>
		/* First fragment will contain IP header so move the data
		 * down in order to get rid of it.
		 */
		header_len = net_pkt_appdata(pkt) - tmp->data;
     942:	68a3      	ldr	r3, [r4, #8]
     944:	f8d8 5018 	ldr.w	r5, [r8, #24]
		NET_INFO("header_len %d bytes", header_len);
     948:	f8cd 9008 	str.w	r9, [sp, #8]
		header_len = net_pkt_appdata(pkt) - tmp->data;
     94c:	1aed      	subs	r5, r5, r3
		NET_INFO("header_len %d bytes", header_len);
     94e:	9501      	str	r5, [sp, #4]
     950:	4b41      	ldr	r3, [pc, #260]	; (a58 <build_reply_pkt+0x1fc>)
     952:	f8cd 9000 	str.w	r9, [sp]
     956:	4a41      	ldr	r2, [pc, #260]	; (a5c <build_reply_pkt+0x200>)
     958:	4941      	ldr	r1, [pc, #260]	; (a60 <build_reply_pkt+0x204>)
     95a:	484b      	ldr	r0, [pc, #300]	; (a88 <build_reply_pkt+0x22c>)
     95c:	f000 ff5a 	bl	1814 <printk>

		NET_ASSERT(header_len < CONFIG_NET_BUF_DATA_SIZE);
     960:	f240 5313 	movw	r3, #1299	; 0x513
     964:	429d      	cmp	r5, r3
     966:	dd09      	ble.n	97c <build_reply_pkt+0x120>
     968:	4b3f      	ldr	r3, [pc, #252]	; (a68 <build_reply_pkt+0x20c>)
     96a:	9301      	str	r3, [sp, #4]
     96c:	4b3f      	ldr	r3, [pc, #252]	; (a6c <build_reply_pkt+0x210>)
     96e:	9300      	str	r3, [sp, #0]
     970:	4a3f      	ldr	r2, [pc, #252]	; (a70 <build_reply_pkt+0x214>)
     972:	4b39      	ldr	r3, [pc, #228]	; (a58 <build_reply_pkt+0x1fc>)
     974:	493a      	ldr	r1, [pc, #232]	; (a60 <build_reply_pkt+0x204>)
     976:	4845      	ldr	r0, [pc, #276]	; (a8c <build_reply_pkt+0x230>)
     978:	f000 ff4c 	bl	1814 <printk>

		/* After this pull, the tmp->data points directly to application
		 * data.
		 */
		net_buf_pull(tmp, header_len);
     97c:	4629      	mov	r1, r5
     97e:	f104 0008 	add.w	r0, r4, #8
     982:	f017 fb37 	bl	17ff4 <net_buf_simple_pull>
	//	memcpy(buf1,tmp->data, tmp->len );
	}

	printk("\n");
     986:	4842      	ldr	r0, [pc, #264]	; (a90 <build_reply_pkt+0x234>)
     988:	f000 ff44 	bl	1814 <printk>
     98c:	f8b8 3032 	ldrh.w	r3, [r8, #50]	; 0x32
	return pkt->appdatalen;
}

static inline void net_pkt_set_appdatalen(struct net_pkt *pkt, u16_t len)
{
	pkt->appdatalen = len;
     990:	8673      	strh	r3, [r6, #50]	; 0x32
	}
*/
	net_pkt_set_appdatalen(reply_pkt, net_pkt_appdatalen(pkt));
	
	while (tmp) {
		frag = net_app_get_net_buf(ctx, reply_pkt, K_FOREVER);
     992:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     996:	4631      	mov	r1, r6
     998:	6878      	ldr	r0, [r7, #4]
     99a:	f01f fa82 	bl	1fea2 <net_app_get_net_buf>
     99e:	4683      	mov	fp, r0

		if (net_buf_headroom(tmp) == 0) {
     9a0:	f104 0008 	add.w	r0, r4, #8
     9a4:	f017 fb3e 	bl	18024 <net_buf_simple_headroom>
     9a8:	f10b 0908 	add.w	r9, fp, #8
     9ac:	b960      	cbnz	r0, 9c8 <build_reply_pkt+0x16c>
     9ae:	6038      	str	r0, [r7, #0]
			 * received fragment, then get rid of that also
			 * in the sending fragment. We end up here
			 * if MTU is larger than fragment size, this
			 * is typical for ethernet.
			 */
			net_buf_push(frag, net_buf_headroom(frag));
     9b0:	4648      	mov	r0, r9
     9b2:	f017 fb37 	bl	18024 <net_buf_simple_headroom>
     9b6:	4601      	mov	r1, r0
     9b8:	4648      	mov	r0, r9
     9ba:	f017 fb02 	bl	17fc2 <net_buf_simple_push>

			frag->len = 0; /* to make fragment empty */
     9be:	683b      	ldr	r3, [r7, #0]
     9c0:	f8ab 300c 	strh.w	r3, [fp, #12]
	return pkt->ll_reserve;
}

static inline void net_pkt_set_ll_reserve(struct net_pkt *pkt, u8_t len)
{
	pkt->ll_reserve = len;
     9c4:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
			 * header if needed.
			 */
			net_pkt_set_ll_reserve(reply_pkt, 0);
		}

		NET_ASSERT_INFO(net_buf_tailroom(frag) >= tmp->len,
     9c8:	4648      	mov	r0, r9
     9ca:	f017 fb2f 	bl	1802c <net_buf_simple_tailroom>
     9ce:	89a3      	ldrh	r3, [r4, #12]
     9d0:	4298      	cmp	r0, r3
     9d2:	d20f      	bcs.n	9f4 <build_reply_pkt+0x198>
     9d4:	4648      	mov	r0, r9
     9d6:	f017 fb29 	bl	1802c <net_buf_simple_tailroom>
     9da:	4b23      	ldr	r3, [pc, #140]	; (a68 <build_reply_pkt+0x20c>)
     9dc:	9303      	str	r3, [sp, #12]
     9de:	89a3      	ldrh	r3, [r4, #12]
     9e0:	9302      	str	r3, [sp, #8]
     9e2:	4b22      	ldr	r3, [pc, #136]	; (a6c <build_reply_pkt+0x210>)
     9e4:	9001      	str	r0, [sp, #4]
     9e6:	9300      	str	r3, [sp, #0]
     9e8:	4a21      	ldr	r2, [pc, #132]	; (a70 <build_reply_pkt+0x214>)
     9ea:	4b1b      	ldr	r3, [pc, #108]	; (a58 <build_reply_pkt+0x1fc>)
     9ec:	491c      	ldr	r1, [pc, #112]	; (a60 <build_reply_pkt+0x204>)
     9ee:	4829      	ldr	r0, [pc, #164]	; (a94 <build_reply_pkt+0x238>)
     9f0:	f000 ff10 	bl	1814 <printk>
				"tail %zd longer than len %d",
				net_buf_tailroom(frag), tmp->len);

		memcpy(net_buf_add(frag, tmp->len), tmp->data, tmp->len);
     9f4:	89a1      	ldrh	r1, [r4, #12]
     9f6:	4648      	mov	r0, r9
     9f8:	f017 faac 	bl	17f54 <net_buf_simple_add>
     9fc:	89a2      	ldrh	r2, [r4, #12]
     9fe:	68a1      	ldr	r1, [r4, #8]
     a00:	f7ff fedc 	bl	7bc <memcpy>

		
		

		tmp = net_pkt_frag_del(pkt, NULL, tmp);
     a04:	4622      	mov	r2, r4
     a06:	2100      	movs	r1, #0
     a08:	4640      	mov	r0, r8
     a0a:	f018 ffe9 	bl	199e0 <net_pkt_frag_del>
	while (tmp) {
     a0e:	4604      	mov	r4, r0
     a10:	2800      	cmp	r0, #0
     a12:	d1be      	bne.n	992 <build_reply_pkt+0x136>
     a14:	68b3      	ldr	r3, [r6, #8]
     a16:	b9c3      	cbnz	r3, a4a <build_reply_pkt+0x1ee>
	}

	reply_len = net_pkt_get_len(reply_pkt);

	NET_ASSERT_INFO((recv_len - header_len) == reply_len,
     a18:	ebaa 0505 	sub.w	r5, sl, r5
     a1c:	42ac      	cmp	r4, r5
     a1e:	d00b      	beq.n	a38 <build_reply_pkt+0x1dc>
     a20:	4b11      	ldr	r3, [pc, #68]	; (a68 <build_reply_pkt+0x20c>)
     a22:	9303      	str	r3, [sp, #12]
     a24:	4b11      	ldr	r3, [pc, #68]	; (a6c <build_reply_pkt+0x210>)
     a26:	9300      	str	r3, [sp, #0]
     a28:	9402      	str	r4, [sp, #8]
     a2a:	9501      	str	r5, [sp, #4]
     a2c:	4b0a      	ldr	r3, [pc, #40]	; (a58 <build_reply_pkt+0x1fc>)
     a2e:	4a10      	ldr	r2, [pc, #64]	; (a70 <build_reply_pkt+0x214>)
     a30:	490b      	ldr	r1, [pc, #44]	; (a60 <build_reply_pkt+0x204>)
     a32:	4819      	ldr	r0, [pc, #100]	; (a98 <build_reply_pkt+0x23c>)
     a34:	f000 feee 	bl	1814 <printk>
			"Received %d bytes, sending %d bytes",
			recv_len - header_len, reply_len);

	return reply_pkt;
}
     a38:	4630      	mov	r0, r6
     a3a:	370c      	adds	r7, #12
     a3c:	46bd      	mov	sp, r7
     a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bytes += buf->len;
     a42:	89ab      	ldrh	r3, [r5, #12]
		buf = buf->frags;
     a44:	682d      	ldr	r5, [r5, #0]
		bytes += buf->len;
     a46:	449a      	add	sl, r3
     a48:	e74d      	b.n	8e6 <build_reply_pkt+0x8a>
     a4a:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
     a4c:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
     a4e:	4414      	add	r4, r2
     a50:	e7e1      	b.n	a16 <build_reply_pkt+0x1ba>
     a52:	bf00      	nop
     a54:	00023263 	.word	0x00023263
     a58:	000218ca 	.word	0x000218ca
     a5c:	000218e8 	.word	0x000218e8
     a60:	00021b3d 	.word	0x00021b3d
     a64:	000218ef 	.word	0x000218ef
     a68:	00021b5c 	.word	0x00021b5c
     a6c:	00021b61 	.word	0x00021b61
     a70:	00021b36 	.word	0x00021b36
     a74:	00021914 	.word	0x00021914
     a78:	00021941 	.word	0x00021941
     a7c:	00021995 	.word	0x00021995
     a80:	000219b7 	.word	0x000219b7
     a84:	000219d9 	.word	0x000219d9
     a88:	000219df 	.word	0x000219df
     a8c:	00021a03 	.word	0x00021a03
     a90:	000225af 	.word	0x000225af
     a94:	00021a4c 	.word	0x00021a4c
     a98:	00021aae 	.word	0x00021aae

00000a9c <pkt_sent>:

void pkt_sent(struct net_app_ctx *ctx,
	     int status,
	     void *user_data_send,
	     void *user_data)
{
     a9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (!status) {
     a9e:	b949      	cbnz	r1, ab4 <pkt_sent+0x18>
		NET_INFO("Sent %d bytes", POINTER_TO_UINT(user_data_send));
     aa0:	4b06      	ldr	r3, [pc, #24]	; (abc <pkt_sent+0x20>)
     aa2:	9302      	str	r3, [sp, #8]
     aa4:	9201      	str	r2, [sp, #4]
     aa6:	9300      	str	r3, [sp, #0]
     aa8:	4a05      	ldr	r2, [pc, #20]	; (ac0 <pkt_sent+0x24>)
     aaa:	4b06      	ldr	r3, [pc, #24]	; (ac4 <pkt_sent+0x28>)
     aac:	4906      	ldr	r1, [pc, #24]	; (ac8 <pkt_sent+0x2c>)
     aae:	4807      	ldr	r0, [pc, #28]	; (acc <pkt_sent+0x30>)
     ab0:	f000 feb0 	bl	1814 <printk>
	}
}
     ab4:	b005      	add	sp, #20
     ab6:	f85d fb04 	ldr.w	pc, [sp], #4
     aba:	bf00      	nop
     abc:	00023263 	.word	0x00023263
     ac0:	000218e8 	.word	0x000218e8
     ac4:	000218da 	.word	0x000218da
     ac8:	00021b3d 	.word	0x00021b3d
     acc:	00021b69 	.word	0x00021b69

00000ad0 <main>:

	return 0;
}

void main(void)
{
     ad0:	b513      	push	{r0, r1, r4, lr}

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
     ad2:	4c0e      	ldr	r4, [pc, #56]	; (b0c <main+0x3c>)
     ad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     ad8:	4620      	mov	r0, r4
     ada:	2100      	movs	r1, #0
     adc:	f01f fff0 	bl	20ac0 <_impl_k_sem_init>
	if (IS_ENABLED(CONFIG_NET_TCP)) {
		start_tcp();
	}

	if (IS_ENABLED(CONFIG_NET_UDP)) {
		start_udp();
     ae0:	f000 f848 	bl	b74 <start_udp>

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
     ae4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     ae8:	4620      	mov	r0, r4
     aea:	f020 f853 	bl	20b94 <_impl_k_sem_take>
	}

	k_sem_take(&quit_lock, K_FOREVER);

	NET_INFO("Stopping...");
     aee:	4b08      	ldr	r3, [pc, #32]	; (b10 <main+0x40>)
     af0:	9301      	str	r3, [sp, #4]
     af2:	9300      	str	r3, [sp, #0]
     af4:	4a07      	ldr	r2, [pc, #28]	; (b14 <main+0x44>)
     af6:	4b08      	ldr	r3, [pc, #32]	; (b18 <main+0x48>)
     af8:	4908      	ldr	r1, [pc, #32]	; (b1c <main+0x4c>)
     afa:	4809      	ldr	r0, [pc, #36]	; (b20 <main+0x50>)
     afc:	f000 fe8a 	bl	1814 <printk>
	}

	if (IS_ENABLED(CONFIG_NET_UDP)) {
		stop_udp();
	}
}
     b00:	b002      	add	sp, #8
     b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		stop_udp();
     b06:	f000 b893 	b.w	c30 <stop_udp>
     b0a:	bf00      	nop
     b0c:	20000000 	.word	0x20000000
     b10:	00023263 	.word	0x00023263
     b14:	000218e8 	.word	0x000218e8
     b18:	000218e3 	.word	0x000218e3
     b1c:	00021b3d 	.word	0x00021b3d
     b20:	00021b1a 	.word	0x00021b1a

00000b24 <udp_received>:

static void udp_received(struct net_app_ctx *ctx,
			 struct net_pkt *pkt,
			 int status,
			 void *user_data)
{
     b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return pkt->family;
     b26:	f891 3036 	ldrb.w	r3, [r1, #54]	; 0x36
	sa_family_t family = net_pkt_family(pkt);
	socklen_t dst_len;
	u32_t pkt_len;
	int ret;

	snprintk(dbg, MAX_DBG_PRINT, "UDP IPv%c",
     b2a:	4a10      	ldr	r2, [pc, #64]	; (b6c <udp_received+0x48>)
     b2c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
     b30:	2b0a      	cmp	r3, #10
{
     b32:	460c      	mov	r4, r1
	snprintk(dbg, MAX_DBG_PRINT, "UDP IPv%c",
     b34:	bf14      	ite	ne
     b36:	2334      	movne	r3, #52	; 0x34
     b38:	2336      	moveq	r3, #54	; 0x36
{
     b3a:	4605      	mov	r5, r0
	snprintk(dbg, MAX_DBG_PRINT, "UDP IPv%c",
     b3c:	2140      	movs	r1, #64	; 0x40
     b3e:	480c      	ldr	r0, [pc, #48]	; (b70 <udp_received+0x4c>)
     b40:	f000 fe76 	bl	1830 <snprintk>
	udp_hdr = net_udp_get_hdr(pkt, &hdr);
     b44:	4669      	mov	r1, sp
     b46:	4620      	mov	r0, r4
     b48:	f01e f980 	bl	1ee4c <net_udp_get_hdr>
	 * effect as the user data is sent in a DTLS tunnel where tunnel end
	 * points are already set.
	 */
	set_dst_addr(family, pkt, &dst_addr);

	reply_pkt = build_reply_pkt(dbg, ctx, pkt);
     b4c:	4629      	mov	r1, r5
     b4e:	4622      	mov	r2, r4
     b50:	4807      	ldr	r0, [pc, #28]	; (b70 <udp_received+0x4c>)
     b52:	f7ff fe83 	bl	85c <build_reply_pkt>
     b56:	4605      	mov	r5, r0

	net_pkt_unref(pkt);
     b58:	4620      	mov	r0, r4
     b5a:	f018 ff2a 	bl	199b2 <net_pkt_unref>

	if (!reply_pkt) {
     b5e:	b115      	cbz	r5, b66 <udp_received+0x42>
		return;
	}

	pkt_len = net_pkt_appdatalen(reply_pkt);

	net_pkt_unref(reply_pkt);
     b60:	4628      	mov	r0, r5
     b62:	f018 ff26 	bl	199b2 <net_pkt_unref>
		NET_ERR("Cannot send data to peer (%d)", ret);
		net_pkt_unref(reply_pkt);
	}

*/
}
     b66:	b003      	add	sp, #12
     b68:	bd30      	pop	{r4, r5, pc}
     b6a:	bf00      	nop
     b6c:	00021c1a 	.word	0x00021c1a
     b70:	20000018 	.word	0x20000018

00000b74 <start_udp>:

void start_udp(void)
{
     b74:	b530      	push	{r4, r5, lr}
     b76:	b085      	sub	sp, #20
static inline int net_app_init_udp_server(struct net_app_ctx *ctx,
					  struct sockaddr *server_addr,
					  u16_t port,
					  void *user_data)
{
	return net_app_init_server(ctx,
     b78:	2400      	movs	r4, #0
     b7a:	f241 0592 	movw	r5, #4242	; 0x1092
     b7e:	9401      	str	r4, [sp, #4]
     b80:	9500      	str	r5, [sp, #0]
     b82:	4623      	mov	r3, r4
     b84:	2211      	movs	r2, #17
     b86:	2102      	movs	r1, #2
     b88:	481e      	ldr	r0, [pc, #120]	; (c04 <start_udp+0x90>)
     b8a:	f01f f9f3 	bl	1ff74 <net_app_init_server>
	int ret;

	ret = net_app_init_udp_server(&udp, NULL, MY_PORT, NULL);
	if (ret < 0) {
     b8e:	42a0      	cmp	r0, r4
     b90:	da0c      	bge.n	bac <start_udp+0x38>
		NET_ERR("Cannot init UDP service at port %d", MY_PORT);
     b92:	4b1d      	ldr	r3, [pc, #116]	; (c08 <start_udp+0x94>)
     b94:	9302      	str	r3, [sp, #8]
     b96:	4b1d      	ldr	r3, [pc, #116]	; (c0c <start_udp+0x98>)
     b98:	9300      	str	r3, [sp, #0]
     b9a:	9501      	str	r5, [sp, #4]
     b9c:	4b1c      	ldr	r3, [pc, #112]	; (c10 <start_udp+0x9c>)
     b9e:	4a1d      	ldr	r2, [pc, #116]	; (c14 <start_udp+0xa0>)
     ba0:	491d      	ldr	r1, [pc, #116]	; (c18 <start_udp+0xa4>)
     ba2:	481e      	ldr	r0, [pc, #120]	; (c1c <start_udp+0xa8>)
     ba4:	f000 fe36 	bl	1814 <printk>
	if (ret < 0) {
		NET_ERR("Cannot wait connection (%d)", ret);
		net_app_release(&udp);
		return;
	}
}
     ba8:	b005      	add	sp, #20
     baa:	bd30      	pop	{r4, r5, pc}
	ret = net_app_set_cb(&udp, NULL, udp_received, pkt_sent, NULL);
     bac:	9400      	str	r4, [sp, #0]
     bae:	4b1c      	ldr	r3, [pc, #112]	; (c20 <start_udp+0xac>)
     bb0:	4a1c      	ldr	r2, [pc, #112]	; (c24 <start_udp+0xb0>)
     bb2:	4814      	ldr	r0, [pc, #80]	; (c04 <start_udp+0x90>)
     bb4:	4621      	mov	r1, r4
     bb6:	f01f f943 	bl	1fe40 <net_app_set_cb>
	if (ret < 0) {
     bba:	2800      	cmp	r0, #0
     bbc:	da10      	bge.n	be0 <start_udp+0x6c>
		NET_ERR("Cannot set callbacks (%d)", ret);
     bbe:	4b12      	ldr	r3, [pc, #72]	; (c08 <start_udp+0x94>)
     bc0:	9302      	str	r3, [sp, #8]
     bc2:	4b12      	ldr	r3, [pc, #72]	; (c0c <start_udp+0x98>)
     bc4:	9001      	str	r0, [sp, #4]
     bc6:	9300      	str	r3, [sp, #0]
     bc8:	4a12      	ldr	r2, [pc, #72]	; (c14 <start_udp+0xa0>)
     bca:	4b11      	ldr	r3, [pc, #68]	; (c10 <start_udp+0x9c>)
     bcc:	4912      	ldr	r1, [pc, #72]	; (c18 <start_udp+0xa4>)
     bce:	4816      	ldr	r0, [pc, #88]	; (c28 <start_udp+0xb4>)
		NET_ERR("Cannot wait connection (%d)", ret);
     bd0:	f000 fe20 	bl	1814 <printk>
		net_app_release(&udp);
     bd4:	480b      	ldr	r0, [pc, #44]	; (c04 <start_udp+0x90>)
}
     bd6:	b005      	add	sp, #20
     bd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_app_release(&udp);
     bdc:	f01f b8f5 	b.w	1fdca <net_app_release>
	net_app_server_enable(&udp);
     be0:	4808      	ldr	r0, [pc, #32]	; (c04 <start_udp+0x90>)
     be2:	f01f fa1f 	bl	20024 <net_app_server_enable>
	ret = net_app_listen(&udp);
     be6:	4807      	ldr	r0, [pc, #28]	; (c04 <start_udp+0x90>)
     be8:	f01f f995 	bl	1ff16 <net_app_listen>
	if (ret < 0) {
     bec:	2800      	cmp	r0, #0
     bee:	dadb      	bge.n	ba8 <start_udp+0x34>
		NET_ERR("Cannot wait connection (%d)", ret);
     bf0:	4b05      	ldr	r3, [pc, #20]	; (c08 <start_udp+0x94>)
     bf2:	9302      	str	r3, [sp, #8]
     bf4:	4b05      	ldr	r3, [pc, #20]	; (c0c <start_udp+0x98>)
     bf6:	9001      	str	r0, [sp, #4]
     bf8:	9300      	str	r3, [sp, #0]
     bfa:	4a06      	ldr	r2, [pc, #24]	; (c14 <start_udp+0xa0>)
     bfc:	4b04      	ldr	r3, [pc, #16]	; (c10 <start_udp+0x9c>)
     bfe:	4906      	ldr	r1, [pc, #24]	; (c18 <start_udp+0xa4>)
     c00:	480a      	ldr	r0, [pc, #40]	; (c2c <start_udp+0xb8>)
     c02:	e7e5      	b.n	bd0 <start_udp+0x5c>
     c04:	2000005c 	.word	0x2000005c
     c08:	00021b5c 	.word	0x00021b5c
     c0c:	00021b61 	.word	0x00021b61
     c10:	00021b87 	.word	0x00021b87
     c14:	00021b36 	.word	0x00021b36
     c18:	00021b3d 	.word	0x00021b3d
     c1c:	00021b91 	.word	0x00021b91
     c20:	00000a9d 	.word	0x00000a9d
     c24:	00000b25 	.word	0x00000b25
     c28:	00021bc4 	.word	0x00021bc4
     c2c:	00021bee 	.word	0x00021bee

00000c30 <stop_udp>:

void stop_udp(void)
{
     c30:	b510      	push	{r4, lr}
	net_app_close(&udp);
     c32:	4c04      	ldr	r4, [pc, #16]	; (c44 <stop_udp+0x14>)
     c34:	4620      	mov	r0, r4
     c36:	f01f f94d 	bl	1fed4 <net_app_close>
	net_app_release(&udp);
     c3a:	4620      	mov	r0, r4
}
     c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_app_release(&udp);
     c40:	f01f b8c3 	b.w	1fdca <net_app_release>
     c44:	2000005c 	.word	0x2000005c

00000c48 <errata_103>:
	return false;
}

static bool errata_136_nrf52840(void)
{
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     c48:	4b05      	ldr	r3, [pc, #20]	; (c60 <errata_103+0x18>)
     c4a:	681b      	ldr	r3, [r3, #0]
     c4c:	2b08      	cmp	r3, #8
	    (*(u32_t *)0x10000134ul == 0x0ul)) {
     c4e:	bf01      	itttt	eq
     c50:	4b04      	ldreq	r3, [pc, #16]	; (c64 <errata_103+0x1c>)
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     c52:	6818      	ldreq	r0, [r3, #0]
     c54:	fab0 f080 	clzeq	r0, r0
     c58:	0940      	lsreq	r0, r0, #5
		return true;
	}

	return false;
     c5a:	bf18      	it	ne
     c5c:	2000      	movne	r0, #0
}
     c5e:	4770      	bx	lr
     c60:	10000130 	.word	0x10000130
     c64:	10000134 	.word	0x10000134

00000c68 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     c68:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     c6a:	f04f 0320 	mov.w	r3, #32
     c6e:	f3ef 8111 	mrs	r1, BASEPRI
     c72:	f383 8811 	msr	BASEPRI, r3
	if (errata_36()) {
     c76:	f7ff ffe7 	bl	c48 <errata_103>
     c7a:	b140      	cbz	r0, c8e <nordicsemi_nrf52_init+0x26>
		NRF_CLOCK->EVENTS_DONE = 0;
     c7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     c80:	2200      	movs	r2, #0
     c82:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     c86:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		NRF_CLOCK->CTIV = 0;
     c8a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	if (errata_98()) {
     c8e:	f7ff ffdb 	bl	c48 <errata_103>
     c92:	b110      	cbz	r0, c9a <nordicsemi_nrf52_init+0x32>
		*(volatile u32_t *)0x4000568Cul = 0x00038148ul;
     c94:	4b38      	ldr	r3, [pc, #224]	; (d78 <nordicsemi_nrf52_init+0x110>)
     c96:	4a39      	ldr	r2, [pc, #228]	; (d7c <nordicsemi_nrf52_init+0x114>)
     c98:	601a      	str	r2, [r3, #0]
	if (errata_103()) {
     c9a:	f7ff ffd5 	bl	c48 <errata_103>
     c9e:	b118      	cbz	r0, ca8 <nordicsemi_nrf52_init+0x40>
		NRF_CCM->MAXPACKETSIZE = 0xFBul;
     ca0:	4b37      	ldr	r3, [pc, #220]	; (d80 <nordicsemi_nrf52_init+0x118>)
     ca2:	22fb      	movs	r2, #251	; 0xfb
     ca4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	if (errata_115()) {
     ca8:	f7ff ffce 	bl	c48 <errata_103>
     cac:	b148      	cbz	r0, cc2 <nordicsemi_nrf52_init+0x5a>
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     cae:	4835      	ldr	r0, [pc, #212]	; (d84 <nordicsemi_nrf52_init+0x11c>)
			(*(u32_t *)0x10000258 & 0x0000000F);
     cb0:	4b35      	ldr	r3, [pc, #212]	; (d88 <nordicsemi_nrf52_init+0x120>)
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     cb2:	6802      	ldr	r2, [r0, #0]
			(*(u32_t *)0x10000258 & 0x0000000F);
     cb4:	681b      	ldr	r3, [r3, #0]
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     cb6:	f022 020f 	bic.w	r2, r2, #15
			(*(u32_t *)0x10000258 & 0x0000000F);
     cba:	f003 030f 	and.w	r3, r3, #15
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     cbe:	4313      	orrs	r3, r2
		*(volatile u32_t *)0x40000EE4 =
     cc0:	6003      	str	r3, [r0, #0]
	if (errata_120()) {
     cc2:	f7ff ffc1 	bl	c48 <errata_103>
     cc6:	b118      	cbz	r0, cd0 <nordicsemi_nrf52_init+0x68>
		*(volatile u32_t *)0x40029640ul = 0x200ul;
     cc8:	4b30      	ldr	r3, [pc, #192]	; (d8c <nordicsemi_nrf52_init+0x124>)
     cca:	f44f 7200 	mov.w	r2, #512	; 0x200
     cce:	601a      	str	r2, [r3, #0]
	if (errata_136_nrf52840()) {
     cd0:	f7ff ffba 	bl	c48 <errata_103>
     cd4:	b148      	cbz	r0, cea <nordicsemi_nrf52_init+0x82>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     cd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     cda:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     cde:	07d2      	lsls	r2, r2, #31
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     ce0:	bf44      	itt	mi
     ce2:	f06f 0201 	mvnmi.w	r2, #1
     ce6:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     cea:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     cee:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     cf2:	2a00      	cmp	r2, #0
     cf4:	db03      	blt.n	cfe <nordicsemi_nrf52_init+0x96>
	    ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) !=
     cf6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     cfa:	2b00      	cmp	r3, #0
     cfc:	da2f      	bge.n	d5e <nordicsemi_nrf52_init+0xf6>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     cfe:	4b24      	ldr	r3, [pc, #144]	; (d90 <nordicsemi_nrf52_init+0x128>)
     d00:	2201      	movs	r2, #1
     d02:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     d06:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     d0a:	2a00      	cmp	r2, #0
     d0c:	d0fb      	beq.n	d06 <nordicsemi_nrf52_init+0x9e>
		NRF_UICR->PSELRESET[0] = 18;
     d0e:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     d12:	2112      	movs	r1, #18
     d14:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     d18:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     d1c:	2a00      	cmp	r2, #0
     d1e:	d0fb      	beq.n	d18 <nordicsemi_nrf52_init+0xb0>
		NRF_UICR->PSELRESET[1] = 18;
     d20:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     d24:	2212      	movs	r2, #18
     d26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     d2a:	4b19      	ldr	r3, [pc, #100]	; (d90 <nordicsemi_nrf52_init+0x128>)
     d2c:	461a      	mov	r2, r3
     d2e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     d32:	2900      	cmp	r1, #0
     d34:	d0fb      	beq.n	d2e <nordicsemi_nrf52_init+0xc6>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     d36:	2100      	movs	r1, #0
     d38:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     d3c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     d40:	2b00      	cmp	r3, #0
     d42:	d0fb      	beq.n	d3c <nordicsemi_nrf52_init+0xd4>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     d44:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     d48:	4912      	ldr	r1, [pc, #72]	; (d94 <nordicsemi_nrf52_init+0x12c>)
     d4a:	4b13      	ldr	r3, [pc, #76]	; (d98 <nordicsemi_nrf52_init+0x130>)
     d4c:	68ca      	ldr	r2, [r1, #12]
     d4e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     d52:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     d54:	60cb      	str	r3, [r1, #12]
     d56:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     d5a:	bf00      	nop
     d5c:	e7fd      	b.n	d5a <nordicsemi_nrf52_init+0xf2>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     d5e:	4b0d      	ldr	r3, [pc, #52]	; (d94 <nordicsemi_nrf52_init+0x12c>)
     d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     d64:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     d66:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     d68:	4b0c      	ldr	r3, [pc, #48]	; (d9c <nordicsemi_nrf52_init+0x134>)
     d6a:	4a0d      	ldr	r2, [pc, #52]	; (da0 <nordicsemi_nrf52_init+0x138>)
     d6c:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     d6e:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     d72:	2000      	movs	r0, #0
     d74:	bd08      	pop	{r3, pc}
     d76:	bf00      	nop
     d78:	4000568c 	.word	0x4000568c
     d7c:	00038148 	.word	0x00038148
     d80:	4000f000 	.word	0x4000f000
     d84:	40000ee4 	.word	0x40000ee4
     d88:	10000258 	.word	0x10000258
     d8c:	40029640 	.word	0x40029640
     d90:	4001e000 	.word	0x4001e000
     d94:	e000ed00 	.word	0xe000ed00
     d98:	05fa0004 	.word	0x05fa0004
     d9c:	2000de0c 	.word	0x2000de0c
     da0:	03d09000 	.word	0x03d09000

00000da4 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     da4:	4808      	ldr	r0, [pc, #32]	; (dc8 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
     da6:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
     da8:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
     daa:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
     dac:	d80b      	bhi.n	dc6 <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
     dae:	69c0      	ldr	r0, [r0, #28]
    cmp r0, r1
     db0:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     db2:	d008      	beq.n	dc6 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
     db4:	b500      	push	{lr}
    bl _update_time_slice_before_swap
     db6:	f01f fe59 	bl	20a6c <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
     dba:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     dbe:	4903      	ldr	r1, [pc, #12]	; (dcc <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
     dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
     dc4:	600a      	str	r2, [r1, #0]

00000dc6 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
     dc6:	4770      	bx	lr
    ldr r0, =_kernel
     dc8:	20003478 	.word	0x20003478
    ldr r1, =_SCS_ICSR
     dcc:	e000ed04 	.word	0xe000ed04

00000dd0 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     dd0:	4804      	ldr	r0, [pc, #16]	; (de4 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
     dd2:	2300      	movs	r3, #0
     dd4:	2120      	movs	r1, #32
     dd6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
     dd8:	3301      	adds	r3, #1
     dda:	2b2e      	cmp	r3, #46	; 0x2e
     ddc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
     de0:	d1f9      	bne.n	dd6 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
     de2:	4770      	bx	lr
     de4:	e000e100 	.word	0xe000e100

00000de8 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     de8:	4a08      	ldr	r2, [pc, #32]	; (e0c <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
     dea:	4909      	ldr	r1, [pc, #36]	; (e10 <__swap+0x28>)
	_current->arch.basepri = key;
     dec:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     dee:	6809      	ldr	r1, [r1, #0]
     df0:	6659      	str	r1, [r3, #100]	; 0x64

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     df2:	4908      	ldr	r1, [pc, #32]	; (e14 <__swap+0x2c>)
	_current->arch.basepri = key;
     df4:	6618      	str	r0, [r3, #96]	; 0x60
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     df6:	684b      	ldr	r3, [r1, #4]
     df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     dfc:	604b      	str	r3, [r1, #4]
     dfe:	2300      	movs	r3, #0
     e00:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
     e04:	6893      	ldr	r3, [r2, #8]
}
     e06:	6e58      	ldr	r0, [r3, #100]	; 0x64
     e08:	4770      	bx	lr
     e0a:	bf00      	nop
     e0c:	20003478 	.word	0x20003478
     e10:	00023ac0 	.word	0x00023ac0
     e14:	e000ed00 	.word	0xe000ed00

00000e18 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     e18:	490e      	ldr	r1, [pc, #56]	; (e54 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
     e1a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     e1c:	2028      	movs	r0, #40	; 0x28
    add r0, r2
     e1e:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
     e20:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     e24:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
     e28:	4f0b      	ldr	r7, [pc, #44]	; (e58 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     e2a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     e2e:	2020      	movs	r0, #32
    msr BASEPRI, r0
     e30:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
     e34:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
     e36:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
     e38:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
     e3a:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
     e3c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     e3e:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     e40:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     e44:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
     e48:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
     e4c:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
     e50:	4770      	bx	lr
     e52:	0000      	.short	0x0000
    ldr r1, =_kernel
     e54:	20003478 	.word	0x20003478
    ldr v4, =_SCS_ICSR
     e58:	e000ed04 	.word	0xe000ed04

00000e5c <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
     e5c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     e60:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     e62:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     e66:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     e6a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
     e6c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
     e70:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

    cmp r1, #0
#endif
    beq _context_switch
     e74:	d001      	beq.n	e7a <_context_switch>

    cmp r1, #2
     e76:	2902      	cmp	r1, #2
    beq _oops
     e78:	d007      	beq.n	e8a <_oops>

00000e7a <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
     e7a:	4040      	eors	r0, r0
    msr BASEPRI, r0
     e7c:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
     e80:	4904      	ldr	r1, [pc, #16]	; (e94 <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
     e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
     e86:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
     e88:	4770      	bx	lr

00000e8a <_oops>:

_oops:
    push {lr}
     e8a:	b500      	push	{lr}
    blx _do_kernel_oops
     e8c:	f000 fa30 	bl	12f0 <_do_kernel_oops>
    pop {pc}
     e90:	bd00      	pop	{pc}
     e92:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
     e94:	e000ed04 	.word	0xe000ed04

00000e98 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
     e98:	b510      	push	{r4, lr}
     e9a:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     e9c:	f01f fdbc 	bl	20a18 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
     ea0:	6822      	ldr	r2, [r4, #0]
     ea2:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
     ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
     ea8:	4801      	ldr	r0, [pc, #4]	; (eb0 <_FaultThreadShow.isra.2+0x18>)
     eaa:	f000 bcb3 	b.w	1814 <printk>
     eae:	bf00      	nop
     eb0:	00021d89 	.word	0x00021d89

00000eb4 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _UsageFault(const NANO_ESF *esf)
{
     eb4:	b510      	push	{r4, lr}
     eb6:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
     eb8:	481a      	ldr	r0, [pc, #104]	; (f24 <_UsageFault+0x70>)
     eba:	f000 fcab 	bl	1814 <printk>

	_FaultThreadShow(esf);
     ebe:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     ec2:	4c19      	ldr	r4, [pc, #100]	; (f28 <_UsageFault+0x74>)
	_FaultThreadShow(esf);
     ec4:	f7ff ffe8 	bl	e98 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     ec8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     eca:	019a      	lsls	r2, r3, #6
     ecc:	d502      	bpl.n	ed4 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
     ece:	4817      	ldr	r0, [pc, #92]	; (f2c <_UsageFault+0x78>)
     ed0:	f000 fca0 	bl	1814 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
     ed4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ed6:	01db      	lsls	r3, r3, #7
     ed8:	d502      	bpl.n	ee0 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
     eda:	4815      	ldr	r0, [pc, #84]	; (f30 <_UsageFault+0x7c>)
     edc:	f000 fc9a 	bl	1814 <printk>
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if (SCB->CFSR & SCB_CFSR_STKOF_Msk) {
		PR_EXC("  Stack overflow\n");
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
     ee0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ee2:	0318      	lsls	r0, r3, #12
     ee4:	d502      	bpl.n	eec <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
     ee6:	4813      	ldr	r0, [pc, #76]	; (f34 <_UsageFault+0x80>)
     ee8:	f000 fc94 	bl	1814 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
     eec:	4c0e      	ldr	r4, [pc, #56]	; (f28 <_UsageFault+0x74>)
     eee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ef0:	0359      	lsls	r1, r3, #13
     ef2:	d502      	bpl.n	efa <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
     ef4:	4810      	ldr	r0, [pc, #64]	; (f38 <_UsageFault+0x84>)
     ef6:	f000 fc8d 	bl	1814 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
     efa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     efc:	039a      	lsls	r2, r3, #14
     efe:	d502      	bpl.n	f06 <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
     f00:	480e      	ldr	r0, [pc, #56]	; (f3c <_UsageFault+0x88>)
     f02:	f000 fc87 	bl	1814 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
     f06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     f08:	03db      	lsls	r3, r3, #15
     f0a:	d502      	bpl.n	f12 <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
     f0c:	480c      	ldr	r0, [pc, #48]	; (f40 <_UsageFault+0x8c>)
     f0e:	f000 fc81 	bl	1814 <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
     f12:	4a05      	ldr	r2, [pc, #20]	; (f28 <_UsageFault+0x74>)
     f14:	6a93      	ldr	r3, [r2, #40]	; 0x28
     f16:	ea6f 4303 	mvn.w	r3, r3, lsl #16
     f1a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
     f1e:	6293      	str	r3, [r2, #40]	; 0x28
     f20:	bd10      	pop	{r4, pc}
     f22:	bf00      	nop
     f24:	00021e8a 	.word	0x00021e8a
     f28:	e000ed00 	.word	0xe000ed00
     f2c:	00021ea3 	.word	0x00021ea3
     f30:	00021eb7 	.word	0x00021eb7
     f34:	00021ed2 	.word	0x00021ed2
     f38:	00021ef1 	.word	0x00021ef1
     f3c:	00021f17 	.word	0x00021f17
     f40:	00021f32 	.word	0x00021f32

00000f44 <_MpuFault>:
{
     f44:	b538      	push	{r3, r4, r5, lr}
     f46:	4604      	mov	r4, r0
	PR_EXC("***** MPU FAULT *****\n");
     f48:	4819      	ldr	r0, [pc, #100]	; (fb0 <_MpuFault+0x6c>)
{
     f4a:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
     f4c:	f000 fc62 	bl	1814 <printk>
	_FaultThreadShow(esf);
     f50:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     f54:	4c17      	ldr	r4, [pc, #92]	; (fb4 <_MpuFault+0x70>)
	_FaultThreadShow(esf);
     f56:	f7ff ff9f 	bl	e98 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     f5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     f5c:	06d9      	lsls	r1, r3, #27
     f5e:	d504      	bpl.n	f6a <_MpuFault+0x26>
		PR_EXC("  Stacking error\n");
     f60:	4815      	ldr	r0, [pc, #84]	; (fb8 <_MpuFault+0x74>)
}
     f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
     f66:	f000 bc55 	b.w	1814 <printk>
	} else if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
     f6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     f6c:	071a      	lsls	r2, r3, #28
     f6e:	d501      	bpl.n	f74 <_MpuFault+0x30>
		PR_EXC("  Unstacking error\n");
     f70:	4812      	ldr	r0, [pc, #72]	; (fbc <_MpuFault+0x78>)
     f72:	e7f6      	b.n	f62 <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
     f74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     f76:	079b      	lsls	r3, r3, #30
     f78:	d50f      	bpl.n	f9a <_MpuFault+0x56>
		PR_EXC("  Data Access Violation\n");
     f7a:	4811      	ldr	r0, [pc, #68]	; (fc0 <_MpuFault+0x7c>)
     f7c:	f000 fc4a 	bl	1814 <printk>
		STORE_xFAR(mmfar, SCB->MMFAR);
     f80:	6b61      	ldr	r1, [r4, #52]	; 0x34
		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
     f82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     f84:	0618      	lsls	r0, r3, #24
     f86:	d512      	bpl.n	fae <_MpuFault+0x6a>
			PR_EXC("  Address: 0x%x\n", mmfar);
     f88:	480e      	ldr	r0, [pc, #56]	; (fc4 <_MpuFault+0x80>)
     f8a:	f000 fc43 	bl	1814 <printk>
			if (fromHardFault) {
     f8e:	b175      	cbz	r5, fae <_MpuFault+0x6a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
     f90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     f96:	62a3      	str	r3, [r4, #40]	; 0x28
     f98:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
     f9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     f9c:	07da      	lsls	r2, r3, #31
     f9e:	d501      	bpl.n	fa4 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
     fa0:	4809      	ldr	r0, [pc, #36]	; (fc8 <_MpuFault+0x84>)
     fa2:	e7de      	b.n	f62 <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
     fa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     fa6:	069b      	lsls	r3, r3, #26
     fa8:	d501      	bpl.n	fae <_MpuFault+0x6a>
		PR_EXC("  Floating-point lazy state preservation error\n");
     faa:	4808      	ldr	r0, [pc, #32]	; (fcc <_MpuFault+0x88>)
     fac:	e7d9      	b.n	f62 <_MpuFault+0x1e>
     fae:	bd38      	pop	{r3, r4, r5, pc}
     fb0:	00021dd3 	.word	0x00021dd3
     fb4:	e000ed00 	.word	0xe000ed00
     fb8:	00021dea 	.word	0x00021dea
     fbc:	00021dfc 	.word	0x00021dfc
     fc0:	00021e10 	.word	0x00021e10
     fc4:	00021e29 	.word	0x00021e29
     fc8:	00021e3a 	.word	0x00021e3a
     fcc:	00021e5a 	.word	0x00021e5a

00000fd0 <_BusFault>:
{
     fd0:	b538      	push	{r3, r4, r5, lr}
     fd2:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
     fd4:	481d      	ldr	r0, [pc, #116]	; (104c <_BusFault+0x7c>)
{
     fd6:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
     fd8:	f000 fc1c 	bl	1814 <printk>
	_FaultThreadShow(esf);
     fdc:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     fe0:	4c1b      	ldr	r4, [pc, #108]	; (1050 <_BusFault+0x80>)
	_FaultThreadShow(esf);
     fe2:	f7ff ff59 	bl	e98 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     fe6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     fe8:	04d8      	lsls	r0, r3, #19
     fea:	d504      	bpl.n	ff6 <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
     fec:	4819      	ldr	r0, [pc, #100]	; (1054 <_BusFault+0x84>)
}
     fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
     ff2:	f000 bc0f 	b.w	1814 <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
     ff6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ff8:	0519      	lsls	r1, r3, #20
     ffa:	d501      	bpl.n	1000 <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
     ffc:	4816      	ldr	r0, [pc, #88]	; (1058 <_BusFault+0x88>)
     ffe:	e7f6      	b.n	fee <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1000:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1002:	059a      	lsls	r2, r3, #22
    1004:	d514      	bpl.n	1030 <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
    1006:	4815      	ldr	r0, [pc, #84]	; (105c <_BusFault+0x8c>)
    1008:	f000 fc04 	bl	1814 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    100c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    100e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1010:	041b      	lsls	r3, r3, #16
    1012:	d507      	bpl.n	1024 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
    1014:	4812      	ldr	r0, [pc, #72]	; (1060 <_BusFault+0x90>)
    1016:	f000 fbfd 	bl	1814 <printk>
			if (fromHardFault) {
    101a:	b11d      	cbz	r5, 1024 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    101c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    101e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1022:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1024:	4b0a      	ldr	r3, [pc, #40]	; (1050 <_BusFault+0x80>)
    1026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1028:	0558      	lsls	r0, r3, #21
    102a:	d50e      	bpl.n	104a <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
    102c:	480d      	ldr	r0, [pc, #52]	; (1064 <_BusFault+0x94>)
    102e:	e7de      	b.n	fee <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1030:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1032:	0559      	lsls	r1, r3, #21
    1034:	d4fa      	bmi.n	102c <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    1036:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1038:	05da      	lsls	r2, r3, #23
    103a:	d501      	bpl.n	1040 <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
    103c:	480a      	ldr	r0, [pc, #40]	; (1068 <_BusFault+0x98>)
    103e:	e7d6      	b.n	fee <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1040:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1042:	049b      	lsls	r3, r3, #18
    1044:	d501      	bpl.n	104a <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1046:	4809      	ldr	r0, [pc, #36]	; (106c <_BusFault+0x9c>)
    1048:	e7d1      	b.n	fee <_BusFault+0x1e>
    104a:	bd38      	pop	{r3, r4, r5, pc}
    104c:	00021c50 	.word	0x00021c50
    1050:	e000ed00 	.word	0xe000ed00
    1054:	00021dea 	.word	0x00021dea
    1058:	00021dfc 	.word	0x00021dfc
    105c:	00021c67 	.word	0x00021c67
    1060:	00021e29 	.word	0x00021e29
    1064:	00021c81 	.word	0x00021c81
    1068:	00021c9d 	.word	0x00021c9d
    106c:	00021e5a 	.word	0x00021e5a

00001070 <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
    1070:	b538      	push	{r3, r4, r5, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1072:	4d27      	ldr	r5, [pc, #156]	; (1110 <_Fault+0xa0>)
    1074:	686b      	ldr	r3, [r5, #4]
    1076:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    107a:	1eda      	subs	r2, r3, #3
{
    107c:	4604      	mov	r4, r0
	switch (fault) {
    107e:	2a09      	cmp	r2, #9
    1080:	d83a      	bhi.n	10f8 <_Fault+0x88>
    1082:	e8df f002 	tbb	[pc, r2]
    1086:	3305      	.short	0x3305
    1088:	39392f35 	.word	0x39392f35
    108c:	37393939 	.word	0x37393939
	PR_EXC("***** HARD FAULT *****\n");
    1090:	4820      	ldr	r0, [pc, #128]	; (1114 <_Fault+0xa4>)
    1092:	f000 fbbf 	bl	1814 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    1096:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    1098:	079a      	lsls	r2, r3, #30
    109a:	d503      	bpl.n	10a4 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    109c:	481e      	ldr	r0, [pc, #120]	; (1118 <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    109e:	f000 fbb9 	bl	1814 <printk>
    10a2:	e00c      	b.n	10be <_Fault+0x4e>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    10a4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    10a6:	005b      	lsls	r3, r3, #1
    10a8:	d509      	bpl.n	10be <_Fault+0x4e>
		PR_EXC("  Fault escalation (see below)\n");
    10aa:	481c      	ldr	r0, [pc, #112]	; (111c <_Fault+0xac>)
    10ac:	f000 fbb2 	bl	1814 <printk>
		if (SCB_MMFSR) {
    10b0:	4b1b      	ldr	r3, [pc, #108]	; (1120 <_Fault+0xb0>)
    10b2:	781b      	ldrb	r3, [r3, #0]
    10b4:	b14b      	cbz	r3, 10ca <_Fault+0x5a>
			_MpuFault(esf, 1);
    10b6:	2101      	movs	r1, #1
		_MpuFault(esf, 0);
    10b8:	4620      	mov	r0, r4
    10ba:	f7ff ff43 	bl	f44 <_MpuFault>

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
    10be:	4621      	mov	r1, r4
    10c0:	2000      	movs	r0, #0
}
    10c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
    10c6:	f000 b917 	b.w	12f8 <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
    10ca:	4b16      	ldr	r3, [pc, #88]	; (1124 <_Fault+0xb4>)
    10cc:	781b      	ldrb	r3, [r3, #0]
    10ce:	b123      	cbz	r3, 10da <_Fault+0x6a>
			_BusFault(esf, 1);
    10d0:	2101      	movs	r1, #1
		_BusFault(esf, 0);
    10d2:	4620      	mov	r0, r4
    10d4:	f7ff ff7c 	bl	fd0 <_BusFault>
    10d8:	e7f1      	b.n	10be <_Fault+0x4e>
		} else if (SCB_UFSR) {
    10da:	4b13      	ldr	r3, [pc, #76]	; (1128 <_Fault+0xb8>)
    10dc:	881b      	ldrh	r3, [r3, #0]
    10de:	b29b      	uxth	r3, r3
    10e0:	2b00      	cmp	r3, #0
    10e2:	d0ec      	beq.n	10be <_Fault+0x4e>
		_UsageFault(esf);
    10e4:	4620      	mov	r0, r4
    10e6:	f7ff fee5 	bl	eb4 <_UsageFault>
    10ea:	e7e8      	b.n	10be <_Fault+0x4e>
		_MpuFault(esf, 0);
    10ec:	2100      	movs	r1, #0
    10ee:	e7e3      	b.n	10b8 <_Fault+0x48>
		_BusFault(esf, 0);
    10f0:	2100      	movs	r1, #0
    10f2:	e7ee      	b.n	10d2 <_Fault+0x62>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    10f4:	480d      	ldr	r0, [pc, #52]	; (112c <_Fault+0xbc>)
    10f6:	e7d2      	b.n	109e <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
    10f8:	480d      	ldr	r0, [pc, #52]	; (1130 <_Fault+0xc0>)
    10fa:	490e      	ldr	r1, [pc, #56]	; (1134 <_Fault+0xc4>)
    10fc:	f1a3 0210 	sub.w	r2, r3, #16
    1100:	2b0f      	cmp	r3, #15
    1102:	bfd8      	it	le
    1104:	4601      	movle	r1, r0
    1106:	480c      	ldr	r0, [pc, #48]	; (1138 <_Fault+0xc8>)
    1108:	f000 fb84 	bl	1814 <printk>
    110c:	e7d7      	b.n	10be <_Fault+0x4e>
    110e:	bf00      	nop
    1110:	e000ed00 	.word	0xe000ed00
    1114:	00021ce4 	.word	0x00021ce4
    1118:	00021cfc 	.word	0x00021cfc
    111c:	00021d1e 	.word	0x00021d1e
    1120:	e000ed28 	.word	0xe000ed28
    1124:	e000ed29 	.word	0xe000ed29
    1128:	e000ed2a 	.word	0xe000ed2a
    112c:	00021d3e 	.word	0x00021d3e
    1130:	00021cb6 	.word	0x00021cb6
    1134:	00021ccb 	.word	0x00021ccb
    1138:	00021d75 	.word	0x00021d75

0000113c <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    113c:	4a02      	ldr	r2, [pc, #8]	; (1148 <_FaultInit+0xc>)
    113e:	6953      	ldr	r3, [r2, #20]
    1140:	f043 0310 	orr.w	r3, r3, #16
    1144:	6153      	str	r3, [r2, #20]
    1146:	4770      	bx	lr
    1148:	e000ed00 	.word	0xe000ed00

0000114c <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    114c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    114e:	2b00      	cmp	r3, #0
    1150:	db08      	blt.n	1164 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1152:	2201      	movs	r2, #1
    1154:	f000 001f 	and.w	r0, r0, #31
    1158:	fa02 f000 	lsl.w	r0, r2, r0
    115c:	095b      	lsrs	r3, r3, #5
    115e:	4a02      	ldr	r2, [pc, #8]	; (1168 <_arch_irq_enable+0x1c>)
    1160:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1164:	4770      	bx	lr
    1166:	bf00      	nop
    1168:	e000e100 	.word	0xe000e100

0000116c <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    116c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    116e:	2b00      	cmp	r3, #0
    1170:	db0d      	blt.n	118e <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1172:	2201      	movs	r2, #1
    1174:	095b      	lsrs	r3, r3, #5
    1176:	f000 001f 	and.w	r0, r0, #31
    117a:	fa02 f000 	lsl.w	r0, r2, r0
    117e:	3320      	adds	r3, #32
    1180:	4a03      	ldr	r2, [pc, #12]	; (1190 <_arch_irq_disable+0x24>)
    1182:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1186:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    118a:	f3bf 8f6f 	isb	sy
    118e:	4770      	bx	lr
    1190:	e000e100 	.word	0xe000e100

00001194 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    1194:	0942      	lsrs	r2, r0, #5
    1196:	4b05      	ldr	r3, [pc, #20]	; (11ac <_arch_irq_is_enabled+0x18>)
    1198:	f000 001f 	and.w	r0, r0, #31
    119c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    11a0:	2301      	movs	r3, #1
    11a2:	fa03 f000 	lsl.w	r0, r3, r0
}
    11a6:	4010      	ands	r0, r2
    11a8:	4770      	bx	lr
    11aa:	bf00      	nop
    11ac:	e000e100 	.word	0xe000e100

000011b0 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    11b0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    11b2:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11b4:	bfa8      	it	ge
    11b6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    11ba:	f101 0101 	add.w	r1, r1, #1
    11be:	ea4f 1141 	mov.w	r1, r1, lsl #5
    11c2:	bfad      	iteet	ge
    11c4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11c8:	f000 000f 	andlt.w	r0, r0, #15
    11cc:	4b03      	ldrlt	r3, [pc, #12]	; (11dc <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11ce:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11d0:	bfb6      	itet	lt
    11d2:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11d4:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11d8:	5419      	strblt	r1, [r3, r0]
    11da:	4770      	bx	lr
    11dc:	e000ed14 	.word	0xe000ed14

000011e0 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    11e0:	f000 b846 	b.w	1270 <__bus_fault>

000011e4 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    11e4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    11e6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    11e8:	4b04      	ldr	r3, [pc, #16]	; (11fc <_arch_isr_direct_pm+0x18>)
    11ea:	6998      	ldr	r0, [r3, #24]
    11ec:	b118      	cbz	r0, 11f6 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    11ee:	2200      	movs	r2, #0
    11f0:	619a      	str	r2, [r3, #24]
		_sys_power_save_idle_exit(idle_val);
    11f2:	f01e ff8d 	bl	20110 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    11f6:	b662      	cpsie	i
    11f8:	bd08      	pop	{r3, pc}
    11fa:	bf00      	nop
    11fc:	20003478 	.word	0x20003478

00001200 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    1200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1202:	460c      	mov	r4, r1
    1204:	4605      	mov	r5, r0
	ARG_UNUSED(pStack);
	ARG_UNUSED(stackSize);
#endif

#ifdef CONFIG_INIT_STACKS
	memset(pStack, 0xaa, stackSize);
    1206:	21aa      	movs	r1, #170	; 0xaa
    1208:	4620      	mov	r0, r4
    120a:	4616      	mov	r6, r2
    120c:	461f      	mov	r7, r3
    120e:	f7ff fb01 	bl	814 <memset>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1214:	9909      	ldr	r1, [sp, #36]	; 0x24
    1216:	2204      	movs	r2, #4
    1218:	4628      	mov	r0, r5
    121a:	f01f ff25 	bl	21068 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    121e:	f1a6 0120 	sub.w	r1, r6, #32
    1222:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    1224:	4a0b      	ldr	r2, [pc, #44]	; (1254 <_new_thread+0x54>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    1226:	65ac      	str	r4, [r5, #88]	; 0x58
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1228:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    122c:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    122e:	f022 0201 	bic.w	r2, r2, #1
    1232:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
    1234:	652b      	str	r3, [r5, #80]	; 0x50
	thread->stack_info.size = (u32_t)stackSize;
    1236:	65ee      	str	r6, [r5, #92]	; 0x5c
    1238:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    123a:	9a06      	ldr	r2, [sp, #24]
    123c:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    123e:	9a07      	ldr	r2, [sp, #28]
    1240:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1242:	9a08      	ldr	r2, [sp, #32]
    1244:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    1246:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    1248:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    124c:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    124e:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    1250:	662b      	str	r3, [r5, #96]	; 0x60
    1252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1254:	00020edd 	.word	0x00020edd

00001258 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    1258:	4901      	ldr	r1, [pc, #4]	; (1260 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    125a:	2210      	movs	r2, #16
	str r2, [r1]
    125c:	600a      	str	r2, [r1, #0]
	bx lr
    125e:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1260:	e000ed10 	.word	0xe000ed10

00001264 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1264:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1266:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    126a:	bf30      	wfi

	bx lr
    126c:	4770      	bx	lr
    126e:	bf00      	nop

00001270 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1270:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1272:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    1276:	f8df c01c 	ldr.w	ip, [pc, #28]	; 1294 <__bus_fault+0x24>
	ldr ip, [ip]
    127a:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    127e:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    1282:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    1284:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    1288:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	push {lr}
    128c:	b500      	push	{lr}
	bl _Fault
    128e:	f7ff feef 	bl	1070 <_Fault>

	pop {pc}
    1292:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    1294:	e000ed04 	.word	0xe000ed04

00001298 <_NanoFatalErrorHandler>:
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
    1298:	2804      	cmp	r0, #4
{
    129a:	b538      	push	{r3, r4, r5, lr}
    129c:	4604      	mov	r4, r0
    129e:	460d      	mov	r5, r1
	switch (reason) {
    12a0:	d013      	beq.n	12ca <_NanoFatalErrorHandler+0x32>
    12a2:	2805      	cmp	r0, #5
    12a4:	d013      	beq.n	12ce <_NanoFatalErrorHandler+0x36>
    12a6:	2803      	cmp	r0, #3
    12a8:	d113      	bne.n	12d2 <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    12aa:	480c      	ldr	r0, [pc, #48]	; (12dc <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
    12ac:	f000 fab2 	bl	1814 <printk>
    12b0:	f01f fbb2 	bl	20a18 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    12b4:	69aa      	ldr	r2, [r5, #24]
    12b6:	4601      	mov	r1, r0
    12b8:	4809      	ldr	r0, [pc, #36]	; (12e0 <_NanoFatalErrorHandler+0x48>)
    12ba:	f000 faab 	bl	1814 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    12be:	4629      	mov	r1, r5
    12c0:	4620      	mov	r0, r4
}
    12c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    12c6:	f000 b817 	b.w	12f8 <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
    12ca:	4806      	ldr	r0, [pc, #24]	; (12e4 <_NanoFatalErrorHandler+0x4c>)
    12cc:	e7ee      	b.n	12ac <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
    12ce:	4806      	ldr	r0, [pc, #24]	; (12e8 <_NanoFatalErrorHandler+0x50>)
    12d0:	e7ec      	b.n	12ac <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    12d2:	4601      	mov	r1, r0
    12d4:	4805      	ldr	r0, [pc, #20]	; (12ec <_NanoFatalErrorHandler+0x54>)
    12d6:	f000 fa9d 	bl	1814 <printk>
		break;
    12da:	e7e9      	b.n	12b0 <_NanoFatalErrorHandler+0x18>
    12dc:	00021f5e 	.word	0x00021f5e
    12e0:	00021fdc 	.word	0x00021fdc
    12e4:	00021f84 	.word	0x00021f84
    12e8:	00021f9e 	.word	0x00021f9e
    12ec:	00021fb9 	.word	0x00021fb9

000012f0 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    12f0:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    12f2:	6800      	ldr	r0, [r0, #0]
    12f4:	f7ff bfd0 	b.w	1298 <_NanoFatalErrorHandler>

000012f8 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    12f8:	2805      	cmp	r0, #5
{
    12fa:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    12fc:	d00c      	beq.n	1318 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    12fe:	f01f fdd5 	bl	20eac <k_is_in_isr>
    1302:	b160      	cbz	r0, 131e <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1304:	f01f fdd2 	bl	20eac <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1308:	4b0c      	ldr	r3, [pc, #48]	; (133c <_SysFatalErrorHandler+0x44>)
    130a:	490d      	ldr	r1, [pc, #52]	; (1340 <_SysFatalErrorHandler+0x48>)
    130c:	2800      	cmp	r0, #0
    130e:	bf08      	it	eq
    1310:	4619      	moveq	r1, r3
    1312:	480c      	ldr	r0, [pc, #48]	; (1344 <_SysFatalErrorHandler+0x4c>)
    1314:	f000 fa7e 	bl	1814 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1318:	f7ff ffa4 	bl	1264 <k_cpu_idle>
    131c:	e7fc      	b.n	1318 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    131e:	f01f fdd5 	bl	20ecc <_is_thread_essential>
    1322:	2800      	cmp	r0, #0
    1324:	d1ee      	bne.n	1304 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1326:	4c08      	ldr	r4, [pc, #32]	; (1348 <_SysFatalErrorHandler+0x50>)
    1328:	4808      	ldr	r0, [pc, #32]	; (134c <_SysFatalErrorHandler+0x54>)
    132a:	68a1      	ldr	r1, [r4, #8]
    132c:	f000 fa72 	bl	1814 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1330:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1336:	f000 b80b 	b.w	1350 <_impl_k_thread_abort>
    133a:	bf00      	nop
    133c:	0002201c 	.word	0x0002201c
    1340:	00022018 	.word	0x00022018
    1344:	0002202d 	.word	0x0002202d
    1348:	20003478 	.word	0x20003478
    134c:	0002204d 	.word	0x0002204d

00001350 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1350:	b538      	push	{r3, r4, r5, lr}
    1352:	4605      	mov	r5, r0
	__asm__ volatile(
    1354:	f04f 0320 	mov.w	r3, #32
    1358:	f3ef 8411 	mrs	r4, BASEPRI
    135c:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1360:	f01f fe12 	bl	20f88 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    1364:	4b0b      	ldr	r3, [pc, #44]	; (1394 <_impl_k_thread_abort+0x44>)
    1366:	689b      	ldr	r3, [r3, #8]
    1368:	429d      	cmp	r5, r3
    136a:	d10d      	bne.n	1388 <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    136c:	4b0a      	ldr	r3, [pc, #40]	; (1398 <_impl_k_thread_abort+0x48>)
    136e:	685a      	ldr	r2, [r3, #4]
    1370:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1374:	b922      	cbnz	r2, 1380 <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    1376:	f01f fb79 	bl	20a6c <_update_time_slice_before_swap>

	return __swap(key);
    137a:	4620      	mov	r0, r4
    137c:	f7ff fd34 	bl	de8 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1380:	685a      	ldr	r2, [r3, #4]
    1382:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1386:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
    1388:	4620      	mov	r0, r4
}
    138a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule_threads(key);
    138e:	f01f bad1 	b.w	20934 <_reschedule_threads>
    1392:	bf00      	nop
    1394:	20003478 	.word	0x20003478
    1398:	e000ed00 	.word	0xe000ed00

0000139c <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    139c:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    139e:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    13a0:	4a0b      	ldr	r2, [pc, #44]	; (13d0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    13a2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    13a4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    13a6:	bf1e      	ittt	ne
	movne	r1, #0
    13a8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    13aa:	6191      	strne	r1, [r2, #24]
		blxne	_sys_power_save_idle_exit
    13ac:	f01e feb0 	blne	20110 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    13b0:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    13b2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    13b6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    13ba:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    13be:	4905      	ldr	r1, [pc, #20]	; (13d4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    13c0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    13c2:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    13c4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    13c6:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    13ca:	f7ff bceb 	b.w	da4 <_ExcExit>
    13ce:	0000      	.short	0x0000
	ldr r2, =_kernel
    13d0:	20003478 	.word	0x20003478
	ldr r1, =_sw_isr_table
    13d4:	000000f8 	.word	0x000000f8

000013d8 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    13d8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    13da:	f380 8811 	msr	BASEPRI, r0
    /* board-specific watchdog initialization is necessary */
    bl _WdogInit
#endif

#ifdef CONFIG_INIT_STACKS
    ldr r0, =_interrupt_stack
    13de:	4808      	ldr	r0, [pc, #32]	; (1400 <__reset+0x28>)
    ldr r1, =0xaa
    13e0:	21aa      	movs	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE
    13e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
    13e6:	f7ff fa15 	bl	814 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    13ea:	4805      	ldr	r0, [pc, #20]	; (1400 <__reset+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    13ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    13f0:	1840      	adds	r0, r0, r1
    msr PSP, r0
    13f2:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    13f6:	2002      	movs	r0, #2
    msr CONTROL, r0
    13f8:	f380 8814 	msr	CONTROL, r0

    b _PrepC
    13fc:	f000 b806 	b.w	140c <_PrepC>
    ldr r0, =_interrupt_stack
    1400:	2000d1c8 	.word	0x2000d1c8

00001404 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1404:	bf30      	wfi
    b _SysNmiOnReset
    1406:	f7ff bffd 	b.w	1404 <_SysNmiOnReset>
    140a:	bf00      	nop

0000140c <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    140c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    140e:	4b07      	ldr	r3, [pc, #28]	; (142c <_PrepC+0x20>)
    1410:	4a07      	ldr	r2, [pc, #28]	; (1430 <_PrepC+0x24>)
    1412:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1416:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1418:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    141c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1420:	f01e fef0 	bl	20204 <_bss_zero>
	_data_copy();
    1424:	f01e fef8 	bl	20218 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1428:	f01e ff1e 	bl	20268 <_Cstart>
    142c:	00000000 	.word	0x00000000
    1430:	e000ed00 	.word	0xe000ed00

00001434 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1434:	b508      	push	{r3, lr}
	handler();
    1436:	f7ff ffe5 	bl	1404 <_SysNmiOnReset>
	_ExcExit();
}
    143a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    143e:	f7ff bcb1 	b.w	da4 <_ExcExit>
	...

00001444 <arm_mpu_init>:
	}
}

static inline u8_t _get_num_regions(void)
{
	u32_t type = ARM_MPU_DEV->type;
    1444:	4b15      	ldr	r3, [pc, #84]	; (149c <arm_mpu_init+0x58>)
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
    1446:	4916      	ldr	r1, [pc, #88]	; (14a0 <arm_mpu_init+0x5c>)
	u32_t type = ARM_MPU_DEV->type;
    1448:	681a      	ldr	r2, [r3, #0]
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    144a:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    144c:	680d      	ldr	r5, [r1, #0]
    144e:	f3c2 2207 	ubfx	r2, r2, #8, #8
    1452:	4295      	cmp	r5, r2
    1454:	d80f      	bhi.n	1476 <arm_mpu_init+0x32>
	ARM_MPU_DEV->ctrl = 0;
    1456:	2200      	movs	r2, #0
    1458:	6848      	ldr	r0, [r1, #4]
    145a:	605a      	str	r2, [r3, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    145c:	4295      	cmp	r5, r2
    145e:	f100 000c 	add.w	r0, r0, #12
    1462:	d10a      	bne.n	147a <arm_mpu_init+0x36>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1464:	2205      	movs	r2, #5
    1466:	605a      	str	r2, [r3, #4]
	arm_mpu_enabled = 1;
    1468:	4b0e      	ldr	r3, [pc, #56]	; (14a4 <arm_mpu_init+0x60>)
    146a:	2201      	movs	r2, #1
    146c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    146e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1472:	f3bf 8f6f 	isb	sy
	ARG_UNUSED(arg);

	_arm_mpu_config();

	return 0;
}
    1476:	2000      	movs	r0, #0
    1478:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    147a:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    147e:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    1482:	609a      	str	r2, [r3, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1484:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    1488:	f041 0110 	orr.w	r1, r1, #16
    148c:	4311      	orrs	r1, r2
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    148e:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1492:	60d9      	str	r1, [r3, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1494:	3201      	adds	r2, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1496:	611c      	str	r4, [r3, #16]
    1498:	e7e0      	b.n	145c <arm_mpu_init+0x18>
    149a:	bf00      	nop
    149c:	e000ed90 	.word	0xe000ed90
    14a0:	2000ddc8 	.word	0x2000ddc8
    14a4:	200000b4 	.word	0x200000b4

000014a8 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    14a8:	2000      	movs	r0, #0
    14aa:	4770      	bx	lr

000014ac <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    14ac:	680b      	ldr	r3, [r1, #0]
    14ae:	3301      	adds	r3, #1
    14b0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    14b2:	4b01      	ldr	r3, [pc, #4]	; (14b8 <char_out+0xc>)
    14b4:	681b      	ldr	r3, [r3, #0]
    14b6:	4718      	bx	r3
    14b8:	2000de10 	.word	0x2000de10

000014bc <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    14bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14c0:	b085      	sub	sp, #20
    14c2:	469b      	mov	fp, r3
    14c4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    14c6:	f8df a090 	ldr.w	sl, [pc, #144]	; 1558 <_printk_dec_ulong+0x9c>
    14ca:	2c01      	cmp	r4, #1
    14cc:	bfb8      	it	lt
    14ce:	2401      	movlt	r4, #1
    14d0:	2b01      	cmp	r3, #1
    14d2:	bf0c      	ite	eq
    14d4:	2330      	moveq	r3, #48	; 0x30
    14d6:	2320      	movne	r3, #32
    14d8:	4615      	mov	r5, r2
    14da:	4680      	mov	r8, r0
    14dc:	4689      	mov	r9, r1
    14de:	9401      	str	r4, [sp, #4]
    14e0:	9302      	str	r3, [sp, #8]
    14e2:	2601      	movs	r6, #1
    14e4:	270a      	movs	r7, #10
    14e6:	2200      	movs	r2, #0
    14e8:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
    14ec:	b90a      	cbnz	r2, 14f2 <_printk_dec_ulong+0x36>
    14ee:	45aa      	cmp	sl, r5
    14f0:	d21f      	bcs.n	1532 <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
    14f2:	fbb5 f0f4 	udiv	r0, r5, r4
    14f6:	4649      	mov	r1, r9
    14f8:	3030      	adds	r0, #48	; 0x30
    14fa:	47c0      	blx	r8
			digits++;
    14fc:	3601      	adds	r6, #1
			found_largest_digit = 1;
    14fe:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    1500:	3f01      	subs	r7, #1
	while (pos >= 9) {
    1502:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
    1504:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
    1508:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
    150c:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
    1510:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
    1514:	d1e8      	bne.n	14e8 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
    1516:	4649      	mov	r1, r9
    1518:	f105 0030 	add.w	r0, r5, #48	; 0x30
    151c:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
    151e:	f1bb 0f03 	cmp.w	fp, #3
    1522:	d103      	bne.n	152c <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
    1524:	9b01      	ldr	r3, [sp, #4]
    1526:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
    1528:	2c00      	cmp	r4, #0
    152a:	dc0f      	bgt.n	154c <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
    152c:	b005      	add	sp, #20
    152e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    1532:	9b01      	ldr	r3, [sp, #4]
    1534:	42bb      	cmp	r3, r7
    1536:	dbe3      	blt.n	1500 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    1538:	f1bb 0f02 	cmp.w	fp, #2
    153c:	d8e0      	bhi.n	1500 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    153e:	4649      	mov	r1, r9
    1540:	9802      	ldr	r0, [sp, #8]
    1542:	9203      	str	r2, [sp, #12]
			digits++;
    1544:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    1546:	47c0      	blx	r8
			digits++;
    1548:	9a03      	ldr	r2, [sp, #12]
    154a:	e7d9      	b.n	1500 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    154c:	4649      	mov	r1, r9
    154e:	2020      	movs	r0, #32
    1550:	47c0      	blx	r8
    1552:	3c01      	subs	r4, #1
    1554:	e7e8      	b.n	1528 <_printk_dec_ulong+0x6c>
    1556:	bf00      	nop
    1558:	3b9ac9ff 	.word	0x3b9ac9ff

0000155c <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
    155c:	680a      	ldr	r2, [r1, #0]
    155e:	688b      	ldr	r3, [r1, #8]
{
    1560:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
    1562:	b112      	cbz	r2, 156a <str_out+0xe>
    1564:	684c      	ldr	r4, [r1, #4]
    1566:	42a3      	cmp	r3, r4
    1568:	db02      	blt.n	1570 <str_out+0x14>
		ctx->count++;
    156a:	3301      	adds	r3, #1
    156c:	608b      	str	r3, [r1, #8]
		return c;
    156e:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
    1570:	1e65      	subs	r5, r4, #1
    1572:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
    1574:	bf0b      	itete	eq
    1576:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
    1578:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
    157a:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
    157c:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
    157e:	bf0c      	ite	eq
    1580:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
    1582:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
    1584:	bd30      	pop	{r4, r5, pc}
	...

00001588 <__printk_hook_install>:
	_char_out = fn;
    1588:	4b01      	ldr	r3, [pc, #4]	; (1590 <__printk_hook_install+0x8>)
    158a:	6018      	str	r0, [r3, #0]
    158c:	4770      	bx	lr
    158e:	bf00      	nop
    1590:	2000de10 	.word	0x2000de10

00001594 <_vprintk>:
{
    1594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1598:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
    159a:	f04f 0a00 	mov.w	sl, #0
{
    159e:	4606      	mov	r6, r0
    15a0:	460f      	mov	r7, r1
    15a2:	9204      	str	r2, [sp, #16]
    15a4:	461c      	mov	r4, r3
	int min_width = -1;
    15a6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    15aa:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
    15ac:	4655      	mov	r5, sl
	while (*fmt) {
    15ae:	9b04      	ldr	r3, [sp, #16]
    15b0:	7818      	ldrb	r0, [r3, #0]
    15b2:	b910      	cbnz	r0, 15ba <_vprintk+0x26>
}
    15b4:	b009      	add	sp, #36	; 0x24
    15b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
    15ba:	b945      	cbnz	r5, 15ce <_vprintk+0x3a>
			if (*fmt != '%') {
    15bc:	2825      	cmp	r0, #37	; 0x25
    15be:	f000 810c 	beq.w	17da <_vprintk+0x246>
				out((int)*fmt, ctx);
    15c2:	4639      	mov	r1, r7
    15c4:	47b0      	blx	r6
		++fmt;
    15c6:	9b04      	ldr	r3, [sp, #16]
    15c8:	3301      	adds	r3, #1
    15ca:	9304      	str	r3, [sp, #16]
    15cc:	e7ef      	b.n	15ae <_vprintk+0x1a>
			switch (*fmt) {
    15ce:	2864      	cmp	r0, #100	; 0x64
    15d0:	d061      	beq.n	1696 <_vprintk+0x102>
    15d2:	d819      	bhi.n	1608 <_vprintk+0x74>
    15d4:	2839      	cmp	r0, #57	; 0x39
    15d6:	d80a      	bhi.n	15ee <_vprintk+0x5a>
    15d8:	2831      	cmp	r0, #49	; 0x31
    15da:	d250      	bcs.n	167e <_vprintk+0xea>
    15dc:	282d      	cmp	r0, #45	; 0x2d
    15de:	d03c      	beq.n	165a <_vprintk+0xc6>
    15e0:	2830      	cmp	r0, #48	; 0x30
    15e2:	d03d      	beq.n	1660 <_vprintk+0xcc>
    15e4:	2825      	cmp	r0, #37	; 0x25
    15e6:	d108      	bne.n	15fa <_vprintk+0x66>
				out((int)'%', ctx);
    15e8:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
    15ea:	47b0      	blx	r6
    15ec:	e06f      	b.n	16ce <_vprintk+0x13a>
			switch (*fmt) {
    15ee:	2858      	cmp	r0, #88	; 0x58
    15f0:	f000 8089 	beq.w	1706 <_vprintk+0x172>
    15f4:	2863      	cmp	r0, #99	; 0x63
    15f6:	f000 80ea 	beq.w	17ce <_vprintk+0x23a>
				out((int)'%', ctx);
    15fa:	4639      	mov	r1, r7
    15fc:	2025      	movs	r0, #37	; 0x25
    15fe:	47b0      	blx	r6
				out((int)*fmt, ctx);
    1600:	9b04      	ldr	r3, [sp, #16]
    1602:	4639      	mov	r1, r7
    1604:	7818      	ldrb	r0, [r3, #0]
    1606:	e7f0      	b.n	15ea <_vprintk+0x56>
			switch (*fmt) {
    1608:	2870      	cmp	r0, #112	; 0x70
    160a:	d072      	beq.n	16f2 <_vprintk+0x15e>
    160c:	d806      	bhi.n	161c <_vprintk+0x88>
    160e:	2869      	cmp	r0, #105	; 0x69
    1610:	d041      	beq.n	1696 <_vprintk+0x102>
    1612:	286c      	cmp	r0, #108	; 0x6c
    1614:	d03c      	beq.n	1690 <_vprintk+0xfc>
    1616:	2868      	cmp	r0, #104	; 0x68
    1618:	d0d5      	beq.n	15c6 <_vprintk+0x32>
    161a:	e7ee      	b.n	15fa <_vprintk+0x66>
    161c:	2875      	cmp	r0, #117	; 0x75
    161e:	d058      	beq.n	16d2 <_vprintk+0x13e>
    1620:	d817      	bhi.n	1652 <_vprintk+0xbe>
    1622:	2873      	cmp	r0, #115	; 0x73
    1624:	d1e9      	bne.n	15fa <_vprintk+0x66>
				char *s = va_arg(ap, char *);
    1626:	6823      	ldr	r3, [r4, #0]
    1628:	f104 0b04 	add.w	fp, r4, #4
    162c:	461c      	mov	r4, r3
				while (*s)
    162e:	4625      	mov	r5, r4
    1630:	f815 0b01 	ldrb.w	r0, [r5], #1
    1634:	2800      	cmp	r0, #0
    1636:	f040 80bf 	bne.w	17b8 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
    163a:	f1b8 0f03 	cmp.w	r8, #3
    163e:	f040 80d5 	bne.w	17ec <_vprintk+0x258>
					int remaining = min_width - (s - start);
    1642:	1ae4      	subs	r4, r4, r3
    1644:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
    1648:	2c00      	cmp	r4, #0
    164a:	f300 80bb 	bgt.w	17c4 <_vprintk+0x230>
				char *s = va_arg(ap, char *);
    164e:	465c      	mov	r4, fp
    1650:	e03d      	b.n	16ce <_vprintk+0x13a>
			switch (*fmt) {
    1652:	2878      	cmp	r0, #120	; 0x78
    1654:	d057      	beq.n	1706 <_vprintk+0x172>
    1656:	287a      	cmp	r0, #122	; 0x7a
    1658:	e7de      	b.n	1618 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
    165a:	f04f 0803 	mov.w	r8, #3
    165e:	e7b2      	b.n	15c6 <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
    1660:	f1b9 0f00 	cmp.w	r9, #0
    1664:	da0e      	bge.n	1684 <_vprintk+0xf0>
    1666:	f1b8 0f00 	cmp.w	r8, #0
    166a:	f000 80bc 	beq.w	17e6 <_vprintk+0x252>
					min_width = *fmt - '0';
    166e:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    1672:	f1b8 0f00 	cmp.w	r8, #0
    1676:	bf08      	it	eq
    1678:	f04f 0802 	moveq.w	r8, #2
    167c:	e7a3      	b.n	15c6 <_vprintk+0x32>
				if (min_width < 0) {
    167e:	f1b9 0f00 	cmp.w	r9, #0
    1682:	dbf4      	blt.n	166e <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
    1684:	230a      	movs	r3, #10
    1686:	fb03 0909 	mla	r9, r3, r9, r0
    168a:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    168e:	e7f0      	b.n	1672 <_vprintk+0xde>
				long_ctr++;
    1690:	f10a 0a01 	add.w	sl, sl, #1
    1694:	e797      	b.n	15c6 <_vprintk+0x32>
				if (long_ctr < 2) {
    1696:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
    169a:	bfc5      	ittet	gt
    169c:	3407      	addgt	r4, #7
    169e:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
    16a2:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
    16a4:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
    16a6:	bfd4      	ite	le
    16a8:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
    16aa:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
    16ae:	2d00      	cmp	r5, #0
    16b0:	da05      	bge.n	16be <_vprintk+0x12a>
					out((int)'-', ctx);
    16b2:	4639      	mov	r1, r7
    16b4:	202d      	movs	r0, #45	; 0x2d
    16b6:	47b0      	blx	r6
					d = -d;
    16b8:	426d      	negs	r5, r5
					min_width--;
    16ba:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    16be:	f8cd 9000 	str.w	r9, [sp]
    16c2:	4643      	mov	r3, r8
    16c4:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
    16c6:	4639      	mov	r1, r7
    16c8:	4630      	mov	r0, r6
    16ca:	f7ff fef7 	bl	14bc <_printk_dec_ulong>
			might_format = 0;
    16ce:	2500      	movs	r5, #0
				break;
    16d0:	e779      	b.n	15c6 <_vprintk+0x32>
				if (long_ctr < 2) {
    16d2:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
    16d6:	bfc5      	ittet	gt
    16d8:	3407      	addgt	r4, #7
    16da:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
    16de:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
    16e0:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    16e2:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
    16e6:	bfcc      	ite	gt
    16e8:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
    16ec:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
    16ee:	4643      	mov	r3, r8
    16f0:	e7e9      	b.n	16c6 <_vprintk+0x132>
				  out('0', ctx);
    16f2:	4639      	mov	r1, r7
    16f4:	2030      	movs	r0, #48	; 0x30
    16f6:	47b0      	blx	r6
				  out('x', ctx);
    16f8:	4639      	mov	r1, r7
    16fa:	2078      	movs	r0, #120	; 0x78
    16fc:	47b0      	blx	r6
				  min_width = 8;
    16fe:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
    1702:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
    1706:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
    170a:	bfc7      	ittee	gt
    170c:	3407      	addgt	r4, #7
    170e:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
    1712:	6823      	ldrle	r3, [r4, #0]
    1714:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
    1716:	bfc2      	ittt	gt
    1718:	f103 0408 	addgt.w	r4, r3, #8
    171c:	681b      	ldrgt	r3, [r3, #0]
    171e:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
    1720:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
    1724:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
    1728:	bfd8      	it	le
    172a:	3404      	addle	r4, #4
	int digits = 0;
    172c:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
    172e:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
    1730:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    1732:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    1736:	9b05      	ldr	r3, [sp, #20]
    1738:	ea4f 008b 	mov.w	r0, fp, lsl #2
    173c:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
    1740:	f010 000f 	ands.w	r0, r0, #15
    1744:	d109      	bne.n	175a <_vprintk+0x1c6>
    1746:	9b07      	ldr	r3, [sp, #28]
    1748:	b913      	cbnz	r3, 1750 <_vprintk+0x1bc>
    174a:	f1bb 0f00 	cmp.w	fp, #0
    174e:	d122      	bne.n	1796 <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
    1750:	f04f 0e30 	mov.w	lr, #48	; 0x30
    1754:	e007      	b.n	1766 <_vprintk+0x1d2>
	for (; size; size--) {
    1756:	9a06      	ldr	r2, [sp, #24]
    1758:	e7eb      	b.n	1732 <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
    175a:	2809      	cmp	r0, #9
    175c:	bf8c      	ite	hi
    175e:	f04f 0e57 	movhi.w	lr, #87	; 0x57
    1762:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
    1766:	4639      	mov	r1, r7
    1768:	4470      	add	r0, lr
    176a:	9206      	str	r2, [sp, #24]
    176c:	47b0      	blx	r6
			digits++;
    176e:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
    1770:	9507      	str	r5, [sp, #28]
			digits++;
    1772:	3301      	adds	r3, #1
    1774:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
    1776:	f1bb 0f00 	cmp.w	fp, #0
    177a:	d1ec      	bne.n	1756 <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
    177c:	f1b8 0f03 	cmp.w	r8, #3
    1780:	d1a5      	bne.n	16ce <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
    1782:	9b03      	ldr	r3, [sp, #12]
    1784:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
    1788:	2d00      	cmp	r5, #0
    178a:	dda0      	ble.n	16ce <_vprintk+0x13a>
			out(' ', ctx);
    178c:	4639      	mov	r1, r7
    178e:	2020      	movs	r0, #32
    1790:	47b0      	blx	r6
    1792:	3d01      	subs	r5, #1
    1794:	e7f8      	b.n	1788 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
    1796:	1e53      	subs	r3, r2, #1
    1798:	4591      	cmp	r9, r2
    179a:	9306      	str	r3, [sp, #24]
    179c:	dbeb      	blt.n	1776 <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
    179e:	f1b8 0f01 	cmp.w	r8, #1
    17a2:	d103      	bne.n	17ac <_vprintk+0x218>
				out('0', ctx);
    17a4:	4639      	mov	r1, r7
    17a6:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    17a8:	47b0      	blx	r6
    17aa:	e7e4      	b.n	1776 <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
    17ac:	f1b8 0f02 	cmp.w	r8, #2
    17b0:	d1e1      	bne.n	1776 <_vprintk+0x1e2>
				out(' ', ctx);
    17b2:	4639      	mov	r1, r7
    17b4:	2020      	movs	r0, #32
    17b6:	e7f7      	b.n	17a8 <_vprintk+0x214>
					out((int)(*s++), ctx);
    17b8:	4639      	mov	r1, r7
    17ba:	9303      	str	r3, [sp, #12]
    17bc:	462c      	mov	r4, r5
    17be:	47b0      	blx	r6
    17c0:	9b03      	ldr	r3, [sp, #12]
    17c2:	e734      	b.n	162e <_vprintk+0x9a>
						out(' ', ctx);
    17c4:	4639      	mov	r1, r7
    17c6:	2020      	movs	r0, #32
    17c8:	47b0      	blx	r6
    17ca:	3c01      	subs	r4, #1
    17cc:	e73c      	b.n	1648 <_vprintk+0xb4>
				out(c, ctx);
    17ce:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
    17d0:	1d25      	adds	r5, r4, #4
				out(c, ctx);
    17d2:	4639      	mov	r1, r7
    17d4:	47b0      	blx	r6
				int c = va_arg(ap, int);
    17d6:	462c      	mov	r4, r5
    17d8:	e779      	b.n	16ce <_vprintk+0x13a>
				long_ctr = 0;
    17da:	46aa      	mov	sl, r5
				padding = PAD_NONE;
    17dc:	46a8      	mov	r8, r5
				min_width = -1;
    17de:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
    17e2:	2501      	movs	r5, #1
    17e4:	e6ef      	b.n	15c6 <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
    17e6:	f04f 0801 	mov.w	r8, #1
    17ea:	e6ec      	b.n	15c6 <_vprintk+0x32>
				char *s = va_arg(ap, char *);
    17ec:	465c      	mov	r4, fp
			might_format = 0;
    17ee:	4605      	mov	r5, r0
    17f0:	e6e9      	b.n	15c6 <_vprintk+0x32>
	...

000017f4 <vprintk>:
{
    17f4:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
    17f6:	ac02      	add	r4, sp, #8
    17f8:	2300      	movs	r3, #0
    17fa:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    17fe:	4602      	mov	r2, r0
    1800:	460b      	mov	r3, r1
    1802:	4803      	ldr	r0, [pc, #12]	; (1810 <vprintk+0x1c>)
    1804:	4621      	mov	r1, r4
    1806:	f7ff fec5 	bl	1594 <_vprintk>
}
    180a:	9801      	ldr	r0, [sp, #4]
    180c:	b002      	add	sp, #8
    180e:	bd10      	pop	{r4, pc}
    1810:	000014ad 	.word	0x000014ad

00001814 <printk>:
{
    1814:	b40f      	push	{r0, r1, r2, r3}
    1816:	b507      	push	{r0, r1, r2, lr}
    1818:	a904      	add	r1, sp, #16
    181a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    181e:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    1820:	f7ff ffe8 	bl	17f4 <vprintk>
}
    1824:	b003      	add	sp, #12
    1826:	f85d eb04 	ldr.w	lr, [sp], #4
    182a:	b004      	add	sp, #16
    182c:	4770      	bx	lr
	...

00001830 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    1830:	b40c      	push	{r2, r3}
    1832:	b530      	push	{r4, r5, lr}
    1834:	b085      	sub	sp, #20
    1836:	ab08      	add	r3, sp, #32
    1838:	4604      	mov	r4, r0
    183a:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
    183e:	9001      	str	r0, [sp, #4]
    1840:	9102      	str	r1, [sp, #8]
    1842:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    1844:	a901      	add	r1, sp, #4
    1846:	4807      	ldr	r0, [pc, #28]	; (1864 <snprintk+0x34>)
	va_start(ap, fmt);
    1848:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
    184a:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    184c:	f7ff fea2 	bl	1594 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    1850:	9803      	ldr	r0, [sp, #12]
    1852:	9b02      	ldr	r3, [sp, #8]
    1854:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1856:	bfb8      	it	lt
    1858:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    185a:	b005      	add	sp, #20
    185c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    1860:	b002      	add	sp, #8
    1862:	4770      	bx	lr
    1864:	0000155d 	.word	0x0000155d

00001868 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_HAS_NRFX, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES_CMAC, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 46);
    1868:	4770      	bx	lr

0000186a <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
    186a:	428b      	cmp	r3, r1
{
    186c:	b538      	push	{r3, r4, r5, lr}
    186e:	4615      	mov	r5, r2
    1870:	461c      	mov	r4, r3
	if (from_len <= to_len) {
    1872:	d805      	bhi.n	1880 <_copy+0x16>
		(void)memcpy(to, from, from_len);
    1874:	461a      	mov	r2, r3
    1876:	4629      	mov	r1, r5
    1878:	f7fe ffa0 	bl	7bc <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
    187c:	4620      	mov	r0, r4
    187e:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
    1880:	2400      	movs	r4, #0
    1882:	e7fb      	b.n	187c <_copy+0x12>

00001884 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
    1884:	f7fe bfc6 	b.w	814 <memset>

00001888 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    1888:	09c3      	lsrs	r3, r0, #7
    188a:	005a      	lsls	r2, r3, #1
    188c:	4413      	add	r3, r2
    188e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    1892:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
    1896:	b2c0      	uxtb	r0, r0
    1898:	4770      	bx	lr

0000189a <add_round_key>:
	return TC_CRYPTO_SUCCESS;
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    189a:	78cb      	ldrb	r3, [r1, #3]
    189c:	7802      	ldrb	r2, [r0, #0]
    189e:	4053      	eors	r3, r2
    18a0:	7003      	strb	r3, [r0, #0]
    18a2:	884b      	ldrh	r3, [r1, #2]
    18a4:	7842      	ldrb	r2, [r0, #1]
    18a6:	4053      	eors	r3, r2
    18a8:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    18aa:	680a      	ldr	r2, [r1, #0]
    18ac:	7883      	ldrb	r3, [r0, #2]
    18ae:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    18b2:	7083      	strb	r3, [r0, #2]
    18b4:	680a      	ldr	r2, [r1, #0]
    18b6:	78c3      	ldrb	r3, [r0, #3]
    18b8:	4053      	eors	r3, r2
    18ba:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    18bc:	79cb      	ldrb	r3, [r1, #7]
    18be:	7902      	ldrb	r2, [r0, #4]
    18c0:	4053      	eors	r3, r2
    18c2:	7103      	strb	r3, [r0, #4]
    18c4:	88cb      	ldrh	r3, [r1, #6]
    18c6:	7942      	ldrb	r2, [r0, #5]
    18c8:	4053      	eors	r3, r2
    18ca:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    18cc:	684a      	ldr	r2, [r1, #4]
    18ce:	7983      	ldrb	r3, [r0, #6]
    18d0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    18d4:	7183      	strb	r3, [r0, #6]
    18d6:	684a      	ldr	r2, [r1, #4]
    18d8:	79c3      	ldrb	r3, [r0, #7]
    18da:	4053      	eors	r3, r2
    18dc:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    18de:	7acb      	ldrb	r3, [r1, #11]
    18e0:	7a02      	ldrb	r2, [r0, #8]
    18e2:	4053      	eors	r3, r2
    18e4:	7203      	strb	r3, [r0, #8]
    18e6:	7a42      	ldrb	r2, [r0, #9]
    18e8:	894b      	ldrh	r3, [r1, #10]
    18ea:	4053      	eors	r3, r2
    18ec:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    18ee:	688a      	ldr	r2, [r1, #8]
    18f0:	7a83      	ldrb	r3, [r0, #10]
    18f2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    18f6:	7283      	strb	r3, [r0, #10]
    18f8:	688a      	ldr	r2, [r1, #8]
    18fa:	7ac3      	ldrb	r3, [r0, #11]
    18fc:	4053      	eors	r3, r2
    18fe:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    1900:	7bcb      	ldrb	r3, [r1, #15]
    1902:	7b02      	ldrb	r2, [r0, #12]
    1904:	4053      	eors	r3, r2
    1906:	7303      	strb	r3, [r0, #12]
    1908:	89cb      	ldrh	r3, [r1, #14]
    190a:	7b42      	ldrb	r2, [r0, #13]
    190c:	4053      	eors	r3, r2
    190e:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    1910:	68ca      	ldr	r2, [r1, #12]
    1912:	7b83      	ldrb	r3, [r0, #14]
    1914:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    1918:	7383      	strb	r3, [r0, #14]
    191a:	68ca      	ldr	r2, [r1, #12]
    191c:	7bc3      	ldrb	r3, [r0, #15]
    191e:	4053      	eors	r3, r2
    1920:	73c3      	strb	r3, [r0, #15]
    1922:	4770      	bx	lr

00001924 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
    1924:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    1926:	7802      	ldrb	r2, [r0, #0]
    1928:	f88d 2000 	strb.w	r2, [sp]
    192c:	7942      	ldrb	r2, [r0, #5]
    192e:	f88d 2001 	strb.w	r2, [sp, #1]
    1932:	7a82      	ldrb	r2, [r0, #10]
    1934:	f88d 2002 	strb.w	r2, [sp, #2]
    1938:	7bc2      	ldrb	r2, [r0, #15]
    193a:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    193e:	7902      	ldrb	r2, [r0, #4]
    1940:	f88d 2004 	strb.w	r2, [sp, #4]
    1944:	7a42      	ldrb	r2, [r0, #9]
    1946:	f88d 2005 	strb.w	r2, [sp, #5]
    194a:	7b82      	ldrb	r2, [r0, #14]
    194c:	f88d 2006 	strb.w	r2, [sp, #6]
    1950:	78c2      	ldrb	r2, [r0, #3]
    1952:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    1956:	7a02      	ldrb	r2, [r0, #8]
    1958:	f88d 2008 	strb.w	r2, [sp, #8]
    195c:	7b42      	ldrb	r2, [r0, #13]
    195e:	f88d 2009 	strb.w	r2, [sp, #9]
    1962:	7882      	ldrb	r2, [r0, #2]
    1964:	f88d 200a 	strb.w	r2, [sp, #10]
    1968:	79c2      	ldrb	r2, [r0, #7]
    196a:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    196e:	7b02      	ldrb	r2, [r0, #12]
    1970:	f88d 200c 	strb.w	r2, [sp, #12]
    1974:	7842      	ldrb	r2, [r0, #1]
    1976:	f88d 200d 	strb.w	r2, [sp, #13]
    197a:	7ac3      	ldrb	r3, [r0, #11]
    197c:	7982      	ldrb	r2, [r0, #6]
    197e:	f88d 200e 	strb.w	r2, [sp, #14]
    1982:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    1986:	2310      	movs	r3, #16
    1988:	466a      	mov	r2, sp
    198a:	4619      	mov	r1, r3
    198c:	f7ff ff6d 	bl	186a <_copy>
}
    1990:	b005      	add	sp, #20
    1992:	f85d fb04 	ldr.w	pc, [sp], #4

00001996 <mult_row_column>:
{
    1996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1998:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    199a:	7808      	ldrb	r0, [r1, #0]
{
    199c:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    199e:	f7ff ff73 	bl	1888 <_double_byte>
    19a2:	4605      	mov	r5, r0
    19a4:	7860      	ldrb	r0, [r4, #1]
    19a6:	f7ff ff6f 	bl	1888 <_double_byte>
    19aa:	78a2      	ldrb	r2, [r4, #2]
    19ac:	7863      	ldrb	r3, [r4, #1]
    19ae:	4053      	eors	r3, r2
    19b0:	78e2      	ldrb	r2, [r4, #3]
    19b2:	4053      	eors	r3, r2
    19b4:	405d      	eors	r5, r3
    19b6:	4045      	eors	r5, r0
    19b8:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    19ba:	7860      	ldrb	r0, [r4, #1]
    19bc:	7827      	ldrb	r7, [r4, #0]
    19be:	f7ff ff63 	bl	1888 <_double_byte>
    19c2:	4605      	mov	r5, r0
    19c4:	78a0      	ldrb	r0, [r4, #2]
    19c6:	f7ff ff5f 	bl	1888 <_double_byte>
    19ca:	78a3      	ldrb	r3, [r4, #2]
    19cc:	405f      	eors	r7, r3
    19ce:	78e3      	ldrb	r3, [r4, #3]
    19d0:	405f      	eors	r7, r3
    19d2:	407d      	eors	r5, r7
    19d4:	4045      	eors	r5, r0
    19d6:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    19d8:	78a0      	ldrb	r0, [r4, #2]
    19da:	7865      	ldrb	r5, [r4, #1]
    19dc:	7827      	ldrb	r7, [r4, #0]
    19de:	f7ff ff53 	bl	1888 <_double_byte>
    19e2:	406f      	eors	r7, r5
    19e4:	4605      	mov	r5, r0
    19e6:	78e0      	ldrb	r0, [r4, #3]
    19e8:	f7ff ff4e 	bl	1888 <_double_byte>
    19ec:	78e3      	ldrb	r3, [r4, #3]
    19ee:	405f      	eors	r7, r3
    19f0:	407d      	eors	r5, r7
    19f2:	4045      	eors	r5, r0
    19f4:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    19f6:	7820      	ldrb	r0, [r4, #0]
    19f8:	f7ff ff46 	bl	1888 <_double_byte>
    19fc:	7863      	ldrb	r3, [r4, #1]
    19fe:	7825      	ldrb	r5, [r4, #0]
    1a00:	405d      	eors	r5, r3
    1a02:	78a3      	ldrb	r3, [r4, #2]
    1a04:	405d      	eors	r5, r3
    1a06:	4045      	eors	r5, r0
    1a08:	78e0      	ldrb	r0, [r4, #3]
    1a0a:	f7ff ff3d 	bl	1888 <_double_byte>
    1a0e:	b2ed      	uxtb	r5, r5
    1a10:	4068      	eors	r0, r5
    1a12:	70f0      	strb	r0, [r6, #3]
    1a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00001a18 <tc_aes128_set_encrypt_key>:
{
    1a18:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    1a1a:	4e28      	ldr	r6, [pc, #160]	; (1abc <tc_aes128_set_encrypt_key+0xa4>)
{
    1a1c:	4607      	mov	r7, r0
    1a1e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    1a20:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    1a22:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    1a24:	ad01      	add	r5, sp, #4
    1a26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1a28:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    1a2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1a2c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1a30:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    1a34:	2f00      	cmp	r7, #0
    1a36:	d03c      	beq.n	1ab2 <tc_aes128_set_encrypt_key+0x9a>
	} else if (k == (const uint8_t *) 0) {
    1a38:	2c00      	cmp	r4, #0
    1a3a:	d03c      	beq.n	1ab6 <tc_aes128_set_encrypt_key+0x9e>
    1a3c:	1f38      	subs	r0, r7, #4
    1a3e:	4621      	mov	r1, r4
    1a40:	4602      	mov	r2, r0
    1a42:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    1a44:	784b      	ldrb	r3, [r1, #1]
    1a46:	780d      	ldrb	r5, [r1, #0]
    1a48:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    1a4a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    1a4e:	78cd      	ldrb	r5, [r1, #3]
    1a50:	432b      	orrs	r3, r5
    1a52:	788d      	ldrb	r5, [r1, #2]
    1a54:	3104      	adds	r1, #4
    1a56:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    1a5a:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    1a5c:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    1a60:	d1f0      	bne.n	1a44 <tc_aes128_set_encrypt_key+0x2c>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    1a62:	4c17      	ldr	r4, [pc, #92]	; (1ac0 <tc_aes128_set_encrypt_key+0xa8>)
    1a64:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    1a66:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    1a68:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    1a6a:	d118      	bne.n	1a9e <tc_aes128_set_encrypt_key+0x86>
	return (((a) >> 24)|((a) << 8));
    1a6c:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    1a70:	0e1a      	lsrs	r2, r3, #24
    1a72:	5ca5      	ldrb	r5, [r4, r2]
    1a74:	b2da      	uxtb	r2, r3
    1a76:	5ca2      	ldrb	r2, [r4, r2]
    1a78:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    1a7c:	f3c3 4507 	ubfx	r5, r3, #16, #8
    1a80:	f3c3 2307 	ubfx	r3, r3, #8, #8
    1a84:	5d65      	ldrb	r5, [r4, r5]
    1a86:	5ce3      	ldrb	r3, [r4, r3]
    1a88:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    1a8c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    1a90:	ad0c      	add	r5, sp, #48	; 0x30
    1a92:	f021 0303 	bic.w	r3, r1, #3
    1a96:	442b      	add	r3, r5
    1a98:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    1a9c:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    1a9e:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    1aa2:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    1aa4:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    1aa6:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    1aa8:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    1aaa:	d1dc      	bne.n	1a66 <tc_aes128_set_encrypt_key+0x4e>
	return TC_CRYPTO_SUCCESS;
    1aac:	2001      	movs	r0, #1
}
    1aae:	b00d      	add	sp, #52	; 0x34
    1ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    1ab2:	4638      	mov	r0, r7
    1ab4:	e7fb      	b.n	1aae <tc_aes128_set_encrypt_key+0x96>
    1ab6:	4620      	mov	r0, r4
    1ab8:	e7f9      	b.n	1aae <tc_aes128_set_encrypt_key+0x96>
    1aba:	bf00      	nop
    1abc:	00021860 	.word	0x00021860
    1ac0:	00022072 	.word	0x00022072

00001ac4 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    1ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1ac8:	4615      	mov	r5, r2
    1aca:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    1acc:	4680      	mov	r8, r0
    1ace:	2800      	cmp	r0, #0
    1ad0:	d05b      	beq.n	1b8a <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    1ad2:	2900      	cmp	r1, #0
    1ad4:	d05a      	beq.n	1b8c <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    1ad6:	2a00      	cmp	r2, #0
    1ad8:	d05a      	beq.n	1b90 <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    1ada:	2310      	movs	r3, #16
    1adc:	460a      	mov	r2, r1
    1ade:	4668      	mov	r0, sp
    1ae0:	4619      	mov	r1, r3
    1ae2:	f7ff fec2 	bl	186a <_copy>
	add_round_key(state, s->words);
    1ae6:	4629      	mov	r1, r5
    1ae8:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    1aea:	4c2a      	ldr	r4, [pc, #168]	; (1b94 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    1aec:	f7ff fed5 	bl	189a <add_round_key>
    1af0:	f105 0710 	add.w	r7, r5, #16
    1af4:	46a1      	mov	r9, r4
    1af6:	35a0      	adds	r5, #160	; 0xa0
{
    1af8:	2600      	movs	r6, #0
		s[i] = sbox[s[i]];
    1afa:	f81d 3006 	ldrb.w	r3, [sp, r6]
    1afe:	5ce3      	ldrb	r3, [r4, r3]
    1b00:	f80d 3006 	strb.w	r3, [sp, r6]
	for (i = 0; i < (Nb * Nk); ++i) {
    1b04:	3601      	adds	r6, #1
    1b06:	2e10      	cmp	r6, #16
    1b08:	d1f7      	bne.n	1afa <tc_aes_encrypt+0x36>

	for (i = 0; i < (Nr - 1); ++i) {
		sub_bytes(state);
		shift_rows(state);
    1b0a:	4668      	mov	r0, sp
    1b0c:	f7ff ff0a 	bl	1924 <shift_rows>
	mult_row_column(t, s);
    1b10:	4669      	mov	r1, sp
    1b12:	a804      	add	r0, sp, #16
    1b14:	f7ff ff3f 	bl	1996 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    1b18:	a901      	add	r1, sp, #4
    1b1a:	a805      	add	r0, sp, #20
    1b1c:	f7ff ff3b 	bl	1996 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    1b20:	a902      	add	r1, sp, #8
    1b22:	a806      	add	r0, sp, #24
    1b24:	f7ff ff37 	bl	1996 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    1b28:	a903      	add	r1, sp, #12
    1b2a:	a807      	add	r0, sp, #28
    1b2c:	f7ff ff33 	bl	1996 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    1b30:	4633      	mov	r3, r6
    1b32:	aa04      	add	r2, sp, #16
    1b34:	4631      	mov	r1, r6
    1b36:	4668      	mov	r0, sp
    1b38:	f7ff fe97 	bl	186a <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    1b3c:	4639      	mov	r1, r7
    1b3e:	4668      	mov	r0, sp
    1b40:	3710      	adds	r7, #16
    1b42:	f7ff feaa 	bl	189a <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    1b46:	42bd      	cmp	r5, r7
    1b48:	d1d6      	bne.n	1af8 <tc_aes_encrypt+0x34>
    1b4a:	2600      	movs	r6, #0
		s[i] = sbox[s[i]];
    1b4c:	f81d 3006 	ldrb.w	r3, [sp, r6]
    1b50:	f819 3003 	ldrb.w	r3, [r9, r3]
    1b54:	f80d 3006 	strb.w	r3, [sp, r6]
	for (i = 0; i < (Nb * Nk); ++i) {
    1b58:	3601      	adds	r6, #1
    1b5a:	2e10      	cmp	r6, #16
    1b5c:	d1f6      	bne.n	1b4c <tc_aes_encrypt+0x88>
	}

	sub_bytes(state);
	shift_rows(state);
    1b5e:	4668      	mov	r0, sp
    1b60:	f7ff fee0 	bl	1924 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    1b64:	4629      	mov	r1, r5
    1b66:	4668      	mov	r0, sp
    1b68:	f7ff fe97 	bl	189a <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    1b6c:	4633      	mov	r3, r6
    1b6e:	466a      	mov	r2, sp
    1b70:	4631      	mov	r1, r6
    1b72:	4640      	mov	r0, r8
    1b74:	f7ff fe79 	bl	186a <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    1b78:	4668      	mov	r0, sp
    1b7a:	4632      	mov	r2, r6
    1b7c:	2100      	movs	r1, #0
    1b7e:	f7ff fe81 	bl	1884 <_set>

	return TC_CRYPTO_SUCCESS;
    1b82:	2001      	movs	r0, #1
}
    1b84:	b009      	add	sp, #36	; 0x24
    1b86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1b8a:	e7fb      	b.n	1b84 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
    1b8c:	4608      	mov	r0, r1
    1b8e:	e7f9      	b.n	1b84 <tc_aes_encrypt+0xc0>
    1b90:	4610      	mov	r0, r2
    1b92:	e7f7      	b.n	1b84 <tc_aes_encrypt+0xc0>
    1b94:	00022072 	.word	0x00022072

00001b98 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
    1b98:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    1b9a:	f991 3000 	ldrsb.w	r3, [r1]
    1b9e:	2b00      	cmp	r3, #0
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
    1ba0:	f101 020f 	add.w	r2, r1, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    1ba4:	bfb4      	ite	lt
    1ba6:	2387      	movlt	r3, #135	; 0x87
    1ba8:	2300      	movge	r3, #0

	out += (TC_AES_BLOCK_SIZE - 1);
    1baa:	300f      	adds	r0, #15
	for (;;) {
		*out-- = (*x << 1) ^ carry;
    1bac:	7814      	ldrb	r4, [r2, #0]
		if (x == in) {
    1bae:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
    1bb0:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
    1bb4:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
    1bb8:	d003      	beq.n	1bc2 <gf_double+0x2a>
			break;
		}
		carry = *x-- >> 7;
    1bba:	f812 3901 	ldrb.w	r3, [r2], #-1
    1bbe:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
    1bc0:	e7f4      	b.n	1bac <gf_double+0x14>
    1bc2:	bd10      	pop	{r4, pc}

00001bc4 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
    1bc4:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
    1bc6:	b128      	cbz	r0, 1bd4 <tc_cmac_erase+0x10>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
    1bc8:	2258      	movs	r2, #88	; 0x58
    1bca:	2100      	movs	r1, #0
    1bcc:	f7ff fe5a 	bl	1884 <_set>

	return TC_CRYPTO_SUCCESS;
    1bd0:	2001      	movs	r0, #1
    1bd2:	bd08      	pop	{r3, pc}
}
    1bd4:	bd08      	pop	{r3, pc}

00001bd6 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
    1bd6:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    1bd8:	4604      	mov	r4, r0
    1bda:	b190      	cbz	r0, 1c02 <tc_cmac_init+0x2c>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    1bdc:	2210      	movs	r2, #16
    1bde:	2100      	movs	r1, #0
    1be0:	f7ff fe50 	bl	1884 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
    1be4:	f104 0030 	add.w	r0, r4, #48	; 0x30
    1be8:	2210      	movs	r2, #16
    1bea:	2100      	movs	r1, #0
    1bec:	f7ff fe4a 	bl	1884 <_set>
	s->leftover_offset = 0;
    1bf0:	2300      	movs	r3, #0
    1bf2:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    1bf4:	2200      	movs	r2, #0
    1bf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1bfa:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
    1bfe:	2001      	movs	r0, #1
    1c00:	bd10      	pop	{r4, pc}
}
    1c02:	bd10      	pop	{r4, pc}

00001c04 <tc_cmac_setup>:
{
    1c04:	b570      	push	{r4, r5, r6, lr}
    1c06:	460d      	mov	r5, r1
    1c08:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
    1c0a:	4604      	mov	r4, r0
    1c0c:	b318      	cbz	r0, 1c56 <tc_cmac_setup+0x52>
    1c0e:	b319      	cbz	r1, 1c58 <tc_cmac_setup+0x54>
	_set(s, 0, sizeof(*s));
    1c10:	2258      	movs	r2, #88	; 0x58
    1c12:	2100      	movs	r1, #0
    1c14:	f7ff fe36 	bl	1884 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
    1c18:	4629      	mov	r1, r5
	s->sched = sched;
    1c1a:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
    1c1c:	4630      	mov	r0, r6
    1c1e:	f7ff fefb 	bl	1a18 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    1c22:	4620      	mov	r0, r4
    1c24:	2210      	movs	r2, #16
    1c26:	2100      	movs	r1, #0
    1c28:	f7ff fe2c 	bl	1884 <_set>
	gf_double (s->K1, s->iv);
    1c2c:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
    1c30:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1c32:	4621      	mov	r1, r4
    1c34:	4620      	mov	r0, r4
    1c36:	f7ff ff45 	bl	1ac4 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
    1c3a:	4621      	mov	r1, r4
    1c3c:	4628      	mov	r0, r5
    1c3e:	f7ff ffab 	bl	1b98 <gf_double>
	gf_double (s->K2, s->K1);
    1c42:	4629      	mov	r1, r5
    1c44:	f104 0020 	add.w	r0, r4, #32
    1c48:	f7ff ffa6 	bl	1b98 <gf_double>
	tc_cmac_init(s);
    1c4c:	4620      	mov	r0, r4
    1c4e:	f7ff ffc2 	bl	1bd6 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
    1c52:	2001      	movs	r0, #1
    1c54:	bd70      	pop	{r4, r5, r6, pc}
    1c56:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    1c58:	4608      	mov	r0, r1
}
    1c5a:	bd70      	pop	{r4, r5, r6, pc}

00001c5c <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
    1c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c5e:	460d      	mov	r5, r1
    1c60:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    1c62:	4604      	mov	r4, r0
    1c64:	2800      	cmp	r0, #0
    1c66:	d05b      	beq.n	1d20 <tc_cmac_update+0xc4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
    1c68:	b90a      	cbnz	r2, 1c6e <tc_cmac_update+0x12>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
    1c6a:	2001      	movs	r0, #1
    1c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (data == (const uint8_t *) 0) {
    1c6e:	2900      	cmp	r1, #0
    1c70:	d056      	beq.n	1d20 <tc_cmac_update+0xc4>
	if (s->countdown == 0) {
    1c72:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
    1c76:	ea52 0103 	orrs.w	r1, r2, r3
    1c7a:	d051      	beq.n	1d20 <tc_cmac_update+0xc4>
	s->countdown--;
    1c7c:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    1c80:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
    1c84:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
    1c88:	6c40      	ldr	r0, [r0, #68]	; 0x44
    1c8a:	b348      	cbz	r0, 1ce0 <tc_cmac_update+0x84>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
    1c8c:	f1c0 0710 	rsb	r7, r0, #16
		if (data_length < remaining_space) {
    1c90:	42be      	cmp	r6, r7
    1c92:	f100 0030 	add.w	r0, r0, #48	; 0x30
    1c96:	d209      	bcs.n	1cac <tc_cmac_update+0x50>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    1c98:	4633      	mov	r3, r6
    1c9a:	4631      	mov	r1, r6
    1c9c:	462a      	mov	r2, r5
    1c9e:	4420      	add	r0, r4
    1ca0:	f7ff fde3 	bl	186a <_copy>
			s->leftover_offset += data_length;
    1ca4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1ca6:	441e      	add	r6, r3
		s->leftover_offset = data_length;
    1ca8:	6466      	str	r6, [r4, #68]	; 0x44
    1caa:	e7de      	b.n	1c6a <tc_cmac_update+0xe>
		_copy(&s->leftover[s->leftover_offset],
    1cac:	463b      	mov	r3, r7
    1cae:	462a      	mov	r2, r5
    1cb0:	4639      	mov	r1, r7
    1cb2:	4420      	add	r0, r4
    1cb4:	f7ff fdd9 	bl	186a <_copy>
		s->leftover_offset = 0;
    1cb8:	2300      	movs	r3, #0
    1cba:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
    1cbc:	1bf6      	subs	r6, r6, r7
		data += remaining_space;
    1cbe:	443d      	add	r5, r7
    1cc0:	1e63      	subs	r3, r4, #1
    1cc2:	f104 000f 	add.w	r0, r4, #15
			s->iv[i] ^= s->leftover[i];
    1cc6:	785a      	ldrb	r2, [r3, #1]
    1cc8:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
    1ccc:	404a      	eors	r2, r1
    1cce:	f803 2f01 	strb.w	r2, [r3, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    1cd2:	4283      	cmp	r3, r0
    1cd4:	d1f7      	bne.n	1cc6 <tc_cmac_update+0x6a>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    1cd6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1cd8:	4621      	mov	r1, r4
    1cda:	4620      	mov	r0, r4
    1cdc:	f7ff fef2 	bl	1ac4 <tc_aes_encrypt>
    1ce0:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
    1ce4:	2e10      	cmp	r6, #16
    1ce6:	d911      	bls.n	1d0c <tc_cmac_update+0xb0>
    1ce8:	1e63      	subs	r3, r4, #1
    1cea:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
    1cec:	785a      	ldrb	r2, [r3, #1]
    1cee:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    1cf2:	4042      	eors	r2, r0
    1cf4:	f803 2f01 	strb.w	r2, [r3, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    1cf8:	42bb      	cmp	r3, r7
    1cfa:	d1f7      	bne.n	1cec <tc_cmac_update+0x90>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    1cfc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1cfe:	4621      	mov	r1, r4
    1d00:	4620      	mov	r0, r4
    1d02:	f7ff fedf 	bl	1ac4 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
    1d06:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
    1d08:	3e10      	subs	r6, #16
    1d0a:	e7eb      	b.n	1ce4 <tc_cmac_update+0x88>
	if (data_length > 0) {
    1d0c:	2e00      	cmp	r6, #0
    1d0e:	d0ac      	beq.n	1c6a <tc_cmac_update+0xe>
		_copy(s->leftover, data_length, data, data_length);
    1d10:	4633      	mov	r3, r6
    1d12:	462a      	mov	r2, r5
    1d14:	4631      	mov	r1, r6
    1d16:	f104 0030 	add.w	r0, r4, #48	; 0x30
    1d1a:	f7ff fda6 	bl	186a <_copy>
    1d1e:	e7c3      	b.n	1ca8 <tc_cmac_update+0x4c>
		return TC_CRYPTO_FAIL;
    1d20:	2000      	movs	r0, #0
}
    1d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001d24 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
    1d24:	b570      	push	{r4, r5, r6, lr}
    1d26:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    1d28:	4605      	mov	r5, r0
    1d2a:	b370      	cbz	r0, 1d8a <tc_cmac_final+0x66>
    1d2c:	b371      	cbz	r1, 1d8c <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    1d2e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    1d30:	2a10      	cmp	r2, #16
    1d32:	d11a      	bne.n	1d6a <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
    1d34:	f101 0210 	add.w	r2, r1, #16
    1d38:	1e61      	subs	r1, r4, #1
    1d3a:	3a01      	subs	r2, #1
    1d3c:	f104 060f 	add.w	r6, r4, #15
		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
		s->iv[i] ^= s->leftover[i] ^ k[i];
    1d40:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    1d44:	784b      	ldrb	r3, [r1, #1]
    1d46:	4043      	eors	r3, r0
    1d48:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    1d4c:	4043      	eors	r3, r0
    1d4e:	f801 3f01 	strb.w	r3, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    1d52:	428e      	cmp	r6, r1
    1d54:	d1f4      	bne.n	1d40 <tc_cmac_final+0x1c>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
    1d56:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1d58:	4621      	mov	r1, r4
    1d5a:	4628      	mov	r0, r5
    1d5c:	f7ff feb2 	bl	1ac4 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
    1d60:	4620      	mov	r0, r4
    1d62:	f7ff ff2f 	bl	1bc4 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
    1d66:	2001      	movs	r0, #1
    1d68:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
    1d6a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    1d6e:	2100      	movs	r1, #0
    1d70:	f1c2 0210 	rsb	r2, r2, #16
    1d74:	4420      	add	r0, r4
    1d76:	f7ff fd85 	bl	1884 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    1d7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1d7c:	4423      	add	r3, r4
    1d7e:	2280      	movs	r2, #128	; 0x80
    1d80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
    1d84:	f104 0220 	add.w	r2, r4, #32
    1d88:	e7d6      	b.n	1d38 <tc_cmac_final+0x14>
    1d8a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    1d8c:	4608      	mov	r0, r1
}
    1d8e:	bd70      	pop	{r4, r5, r6, pc}

00001d90 <shell_run>:
#include <init.h>

#define SHELL_PROMPT "shell> "

int shell_run(struct device *dev)
{
    1d90:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	shell_init(SHELL_PROMPT);
    1d92:	4802      	ldr	r0, [pc, #8]	; (1d9c <shell_run+0xc>)
    1d94:	f000 fb22 	bl	23dc <shell_init>
	return 0;
}
    1d98:	2000      	movs	r0, #0
    1d9a:	bd08      	pop	{r3, pc}
    1d9c:	00022172 	.word	0x00022172

00001da0 <cmd_exit>:
	return set_default_module(argv[1]);
}

static int cmd_exit(int argc, char *argv[])
{
	if (argc == 1) {
    1da0:	2801      	cmp	r0, #1
		default_module = NULL;
    1da2:	bf02      	ittt	eq
    1da4:	4b02      	ldreq	r3, [pc, #8]	; (1db0 <cmd_exit+0x10>)
    1da6:	2200      	moveq	r2, #0
    1da8:	601a      	streq	r2, [r3, #0]
	}

	return 0;
}
    1daa:	2000      	movs	r0, #0
    1dac:	4770      	bx	lr
    1dae:	bf00      	nop
    1db0:	20000278 	.word	0x20000278

00001db4 <cmd_noprompt>:

static int cmd_noprompt(int argc, char *argv[])
{
	no_promt = true;
    1db4:	4b02      	ldr	r3, [pc, #8]	; (1dc0 <cmd_noprompt+0xc>)
    1db6:	2201      	movs	r2, #1
    1db8:	701a      	strb	r2, [r3, #0]
	return 0;
}
    1dba:	2000      	movs	r0, #0
    1dbc:	4770      	bx	lr
    1dbe:	bf00      	nop
    1dc0:	2000029c 	.word	0x2000029c

00001dc4 <get_cmd>:
{
    1dc4:	b570      	push	{r4, r5, r6, lr}
    1dc6:	460e      	mov	r6, r1
    1dc8:	4604      	mov	r4, r0
	for (i = 0; cmds[i].cmd_name; i++) {
    1dca:	6821      	ldr	r1, [r4, #0]
    1dcc:	4625      	mov	r5, r4
    1dce:	b909      	cbnz	r1, 1dd4 <get_cmd+0x10>
	return NULL;
    1dd0:	460d      	mov	r5, r1
    1dd2:	e005      	b.n	1de0 <get_cmd+0x1c>
		if (!strcmp(cmd_str, cmds[i].cmd_name)) {
    1dd4:	4630      	mov	r0, r6
    1dd6:	f7fe fc9b 	bl	710 <strcmp>
    1dda:	3410      	adds	r4, #16
    1ddc:	2800      	cmp	r0, #0
    1dde:	d1f4      	bne.n	1dca <get_cmd+0x6>
}
    1de0:	4628      	mov	r0, r5
    1de2:	bd70      	pop	{r4, r5, r6, pc}

00001de4 <get_standalone>:
{
    1de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (i = 0; i < NUM_OF_SHELL_CMDS; i++) {
    1de8:	4d0b      	ldr	r5, [pc, #44]	; (1e18 <get_standalone+0x34>)
    1dea:	4c0c      	ldr	r4, [pc, #48]	; (1e1c <get_standalone+0x38>)
    1dec:	1b64      	subs	r4, r4, r5
{
    1dee:	4680      	mov	r8, r0
	for (i = 0; i < NUM_OF_SHELL_CMDS; i++) {
    1df0:	1124      	asrs	r4, r4, #4
    1df2:	2700      	movs	r7, #0
    1df4:	42a7      	cmp	r7, r4
    1df6:	db02      	blt.n	1dfe <get_standalone+0x1a>
	return NULL;
    1df8:	2000      	movs	r0, #0
}
    1dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1dfe:	013b      	lsls	r3, r7, #4
		if (!strcmp(command, __shell_cmd_start[i].cmd_name)) {
    1e00:	4640      	mov	r0, r8
    1e02:	58e9      	ldr	r1, [r5, r3]
    1e04:	18ee      	adds	r6, r5, r3
    1e06:	f7fe fc83 	bl	710 <strcmp>
    1e0a:	b910      	cbnz	r0, 1e12 <get_standalone+0x2e>
			return &__shell_cmd_start[i];
    1e0c:	4630      	mov	r0, r6
    1e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < NUM_OF_SHELL_CMDS; i++) {
    1e12:	3701      	adds	r7, #1
    1e14:	e7ee      	b.n	1df4 <get_standalone+0x10>
    1e16:	bf00      	nop
    1e18:	2000ec10 	.word	0x2000ec10
    1e1c:	2000ec20 	.word	0x2000ec20

00001e20 <get_destination_module>:
{
    1e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
    1e24:	4c0e      	ldr	r4, [pc, #56]	; (1e60 <get_destination_module+0x40>)
    1e26:	4b0f      	ldr	r3, [pc, #60]	; (1e64 <get_destination_module+0x44>)
    1e28:	4f0f      	ldr	r7, [pc, #60]	; (1e68 <get_destination_module+0x48>)
    1e2a:	1b1b      	subs	r3, r3, r4
    1e2c:	109b      	asrs	r3, r3, #2
{
    1e2e:	4680      	mov	r8, r0
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
    1e30:	435f      	muls	r7, r3
    1e32:	2600      	movs	r6, #0
    1e34:	f04f 090c 	mov.w	r9, #12
    1e38:	42be      	cmp	r6, r7
    1e3a:	db02      	blt.n	1e42 <get_destination_module+0x22>
	return NULL;
    1e3c:	2000      	movs	r0, #0
}
    1e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1e42:	fb09 f306 	mul.w	r3, r9, r6
		if (!strncmp(module_str,
    1e46:	2214      	movs	r2, #20
    1e48:	58e1      	ldr	r1, [r4, r3]
    1e4a:	4640      	mov	r0, r8
    1e4c:	18e5      	adds	r5, r4, r3
    1e4e:	f7fe fc6c 	bl	72a <strncmp>
    1e52:	b910      	cbnz	r0, 1e5a <get_destination_module+0x3a>
			return &__shell_module_start[i];
    1e54:	4628      	mov	r0, r5
    1e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
    1e5a:	3601      	adds	r6, #1
    1e5c:	e7ec      	b.n	1e38 <get_destination_module+0x18>
    1e5e:	bf00      	nop
    1e60:	2000ebf8 	.word	0x2000ebf8
    1e64:	2000ec10 	.word	0x2000ec10
    1e68:	aaaaaaab 	.word	0xaaaaaaab

00001e6c <set_default_module>:
{
    1e6c:	b510      	push	{r4, lr}
    1e6e:	4604      	mov	r4, r0
	if (strlen(name) > MODULE_NAME_MAX_LEN) {
    1e70:	f7fe fc46 	bl	700 <strlen>
    1e74:	2814      	cmp	r0, #20
    1e76:	d906      	bls.n	1e86 <set_default_module+0x1a>
		printk("Module name %s is too long, default is not changed\n",
    1e78:	480d      	ldr	r0, [pc, #52]	; (1eb0 <set_default_module+0x44>)
    1e7a:	4621      	mov	r1, r4
		printk("Illegal module %s, default is not changed\n", name);
    1e7c:	f7ff fcca 	bl	1814 <printk>
		return -EINVAL;
    1e80:	f06f 0015 	mvn.w	r0, #21
    1e84:	bd10      	pop	{r4, pc}
	module = get_destination_module(name);
    1e86:	4620      	mov	r0, r4
    1e88:	f7ff ffca 	bl	1e20 <get_destination_module>
	if (!module) {
    1e8c:	b910      	cbnz	r0, 1e94 <set_default_module+0x28>
		printk("Illegal module %s, default is not changed\n", name);
    1e8e:	4621      	mov	r1, r4
    1e90:	4808      	ldr	r0, [pc, #32]	; (1eb4 <set_default_module+0x48>)
    1e92:	e7f3      	b.n	1e7c <set_default_module+0x10>
	default_module = module;
    1e94:	4b08      	ldr	r3, [pc, #32]	; (1eb8 <set_default_module+0x4c>)
	strncpy(default_module_prompt, name, MODULE_NAME_MAX_LEN);
    1e96:	2214      	movs	r2, #20
	default_module = module;
    1e98:	6018      	str	r0, [r3, #0]
	strncpy(default_module_prompt, name, MODULE_NAME_MAX_LEN);
    1e9a:	4621      	mov	r1, r4
    1e9c:	4807      	ldr	r0, [pc, #28]	; (1ebc <set_default_module+0x50>)
    1e9e:	f7fe fc02 	bl	6a6 <strncpy>
	strcat(default_module_prompt, "> ");
    1ea2:	4907      	ldr	r1, [pc, #28]	; (1ec0 <set_default_module+0x54>)
    1ea4:	4805      	ldr	r0, [pc, #20]	; (1ebc <set_default_module+0x50>)
    1ea6:	f7fe fc51 	bl	74c <strcat>
	return 0;
    1eaa:	2000      	movs	r0, #0
}
    1eac:	bd10      	pop	{r4, pc}
    1eae:	bf00      	nop
    1eb0:	000222a0 	.word	0x000222a0
    1eb4:	000222d4 	.word	0x000222d4
    1eb8:	20000278 	.word	0x20000278
    1ebc:	2000027c 	.word	0x2000027c
    1ec0:	00022177 	.word	0x00022177

00001ec4 <get_prompt>:
{
    1ec4:	b508      	push	{r3, lr}
	if (app_prompt_handler) {
    1ec6:	4b0a      	ldr	r3, [pc, #40]	; (1ef0 <get_prompt+0x2c>)
    1ec8:	681b      	ldr	r3, [r3, #0]
    1eca:	b92b      	cbnz	r3, 1ed8 <get_prompt+0x14>
	if (default_module) {
    1ecc:	4b09      	ldr	r3, [pc, #36]	; (1ef4 <get_prompt+0x30>)
    1ece:	681b      	ldr	r3, [r3, #0]
    1ed0:	b933      	cbnz	r3, 1ee0 <get_prompt+0x1c>
	return prompt;
    1ed2:	4b09      	ldr	r3, [pc, #36]	; (1ef8 <get_prompt+0x34>)
    1ed4:	6818      	ldr	r0, [r3, #0]
    1ed6:	e002      	b.n	1ede <get_prompt+0x1a>
		str = app_prompt_handler();
    1ed8:	4798      	blx	r3
		if (str) {
    1eda:	2800      	cmp	r0, #0
    1edc:	d0f6      	beq.n	1ecc <get_prompt+0x8>
}
    1ede:	bd08      	pop	{r3, pc}
		if (default_module->prompt) {
    1ee0:	689b      	ldr	r3, [r3, #8]
    1ee2:	b90b      	cbnz	r3, 1ee8 <get_prompt+0x24>
		return default_module_prompt;
    1ee4:	4805      	ldr	r0, [pc, #20]	; (1efc <get_prompt+0x38>)
    1ee6:	bd08      	pop	{r3, pc}
			ret = default_module->prompt();
    1ee8:	4798      	blx	r3
			if (ret) {
    1eea:	2800      	cmp	r0, #0
    1eec:	d1f7      	bne.n	1ede <get_prompt+0x1a>
    1eee:	e7f9      	b.n	1ee4 <get_prompt+0x20>
    1ef0:	200000bc 	.word	0x200000bc
    1ef4:	20000278 	.word	0x20000278
    1ef8:	200002a0 	.word	0x200002a0
    1efc:	2000027c 	.word	0x2000027c

00001f00 <show_cmd_help>:
{
    1f00:	b538      	push	{r3, r4, r5, lr}
	printk("Usage: %s %s\n", cmd->cmd_name, cmd->help ? cmd->help : "");
    1f02:	6882      	ldr	r2, [r0, #8]
    1f04:	4b08      	ldr	r3, [pc, #32]	; (1f28 <show_cmd_help+0x28>)
{
    1f06:	460d      	mov	r5, r1
    1f08:	4604      	mov	r4, r0
	printk("Usage: %s %s\n", cmd->cmd_name, cmd->help ? cmd->help : "");
    1f0a:	6801      	ldr	r1, [r0, #0]
    1f0c:	4807      	ldr	r0, [pc, #28]	; (1f2c <show_cmd_help+0x2c>)
    1f0e:	2a00      	cmp	r2, #0
    1f10:	bf08      	it	eq
    1f12:	461a      	moveq	r2, r3
    1f14:	f7ff fc7e 	bl	1814 <printk>
	if (full && cmd->desc) {
    1f18:	b125      	cbz	r5, 1f24 <show_cmd_help+0x24>
    1f1a:	68e1      	ldr	r1, [r4, #12]
    1f1c:	b111      	cbz	r1, 1f24 <show_cmd_help+0x24>
		printk("%s\n", cmd->desc);
    1f1e:	4804      	ldr	r0, [pc, #16]	; (1f30 <show_cmd_help+0x30>)
    1f20:	f7ff fc78 	bl	1814 <printk>
}
    1f24:	2000      	movs	r0, #0
    1f26:	bd38      	pop	{r3, r4, r5, pc}
    1f28:	00023263 	.word	0x00023263
    1f2c:	000223e9 	.word	0x000223e9
    1f30:	00022aad 	.word	0x00022aad

00001f34 <cmd_help>:
	if (argc > 1) {
    1f34:	2801      	cmp	r0, #1
{
    1f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f3a:	4606      	mov	r6, r0
    1f3c:	460c      	mov	r4, r1
	if (argc > 1) {
    1f3e:	dd25      	ble.n	1f8c <cmd_help+0x58>
		module = get_destination_module(argv[1]);
    1f40:	6848      	ldr	r0, [r1, #4]
    1f42:	f7ff ff6d 	bl	1e20 <get_destination_module>
		if (module) {
    1f46:	4605      	mov	r5, r0
    1f48:	b150      	cbz	r0, 1f60 <cmd_help+0x2c>
			if (argc == 2) {
    1f4a:	2e02      	cmp	r6, #2
    1f4c:	d021      	beq.n	1f92 <cmd_help+0x5e>
			cmd_str = argv[2];
    1f4e:	68a4      	ldr	r4, [r4, #8]
	return get_cmd(module->commands, cmd_str);
    1f50:	6868      	ldr	r0, [r5, #4]
    1f52:	4621      	mov	r1, r4
    1f54:	f7ff ff36 	bl	1dc4 <get_cmd>
			if (cmd) {
    1f58:	b958      	cbnz	r0, 1f72 <cmd_help+0x3e>
				printk("Unknown command '%s'\n", cmd_str);
    1f5a:	4621      	mov	r1, r4
    1f5c:	4837      	ldr	r0, [pc, #220]	; (203c <cmd_help+0x108>)
    1f5e:	e00f      	b.n	1f80 <cmd_help+0x4c>
			module = default_module;
    1f60:	4b37      	ldr	r3, [pc, #220]	; (2040 <cmd_help+0x10c>)
			cmd_str = argv[1];
    1f62:	6864      	ldr	r4, [r4, #4]
			module = default_module;
    1f64:	681d      	ldr	r5, [r3, #0]
		if (!module) {
    1f66:	2d00      	cmp	r5, #0
    1f68:	d1f2      	bne.n	1f50 <cmd_help+0x1c>
			cmd = get_standalone(cmd_str);
    1f6a:	4620      	mov	r0, r4
    1f6c:	f7ff ff3a 	bl	1de4 <get_standalone>
			if (cmd) {
    1f70:	b120      	cbz	r0, 1f7c <cmd_help+0x48>
				return show_cmd_help(cmd, true);
    1f72:	2101      	movs	r1, #1
}
    1f74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				return show_cmd_help(cmd, true);
    1f78:	f7ff bfc2 	b.w	1f00 <show_cmd_help>
				printk("No help found for '%s'\n", cmd_str);
    1f7c:	4831      	ldr	r0, [pc, #196]	; (2044 <cmd_help+0x110>)
    1f7e:	4621      	mov	r1, r4
				printk("Unknown command '%s'\n", cmd_str);
    1f80:	f7ff fc48 	bl	1814 <printk>
				return -EINVAL;
    1f84:	f06f 0015 	mvn.w	r0, #21
    1f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct shell_module *module = default_module;
    1f8c:	4b2c      	ldr	r3, [pc, #176]	; (2040 <cmd_help+0x10c>)
    1f8e:	681d      	ldr	r5, [r3, #0]
	if (module) {
    1f90:	b1d5      	cbz	r5, 1fc8 <cmd_help+0x94>
	printk("help\n");
    1f92:	482d      	ldr	r0, [pc, #180]	; (2048 <cmd_help+0x114>)
		printk("%-28s %s\n",
    1f94:	4f2d      	ldr	r7, [pc, #180]	; (204c <cmd_help+0x118>)
    1f96:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 2088 <cmd_help+0x154>
	printk("help\n");
    1f9a:	f7ff fc3b 	bl	1814 <printk>
    1f9e:	2600      	movs	r6, #0
	for (i = 0; module->commands[i].cmd_name; i++) {
    1fa0:	686b      	ldr	r3, [r5, #4]
    1fa2:	599c      	ldr	r4, [r3, r6]
    1fa4:	199a      	adds	r2, r3, r6
    1fa6:	b92c      	cbnz	r4, 1fb4 <cmd_help+0x80>
		printk("\nEnter 'exit' to leave current module.\n");
    1fa8:	4829      	ldr	r0, [pc, #164]	; (2050 <cmd_help+0x11c>)
		printk("\nTo select a module, enter 'select <module name>'.\n");
    1faa:	f7ff fc33 	bl	1814 <printk>
	return 0;
    1fae:	2000      	movs	r0, #0
}
    1fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		       module->commands[i].help ?
    1fb4:	6892      	ldr	r2, [r2, #8]
		printk("%-28s %s\n",
    1fb6:	4621      	mov	r1, r4
    1fb8:	2a00      	cmp	r2, #0
    1fba:	bf08      	it	eq
    1fbc:	463a      	moveq	r2, r7
    1fbe:	4640      	mov	r0, r8
    1fc0:	f7ff fc28 	bl	1814 <printk>
    1fc4:	3610      	adds	r6, #16
    1fc6:	e7eb      	b.n	1fa0 <cmd_help+0x6c>
		printk("[Modules]\n");
    1fc8:	4822      	ldr	r0, [pc, #136]	; (2054 <cmd_help+0x120>)
		if (NUM_OF_SHELL_ENTITIES == 0) {
    1fca:	4c23      	ldr	r4, [pc, #140]	; (2058 <cmd_help+0x124>)
		printk("[Modules]\n");
    1fcc:	f7ff fc22 	bl	1814 <printk>
		if (NUM_OF_SHELL_ENTITIES == 0) {
    1fd0:	4b22      	ldr	r3, [pc, #136]	; (205c <cmd_help+0x128>)
    1fd2:	1b1b      	subs	r3, r3, r4
    1fd4:	2b16      	cmp	r3, #22
    1fd6:	d802      	bhi.n	1fde <cmd_help+0xaa>
			printk("No registered modules.\n");
    1fd8:	4821      	ldr	r0, [pc, #132]	; (2060 <cmd_help+0x12c>)
    1fda:	f7ff fc1b 	bl	1814 <printk>
		for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
    1fde:	4b21      	ldr	r3, [pc, #132]	; (2064 <cmd_help+0x130>)
    1fe0:	4e21      	ldr	r6, [pc, #132]	; (2068 <cmd_help+0x134>)
			printk("%s\n", __shell_module_start[i].module_name);
    1fe2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 2080 <cmd_help+0x14c>
		for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
    1fe6:	1b1b      	subs	r3, r3, r4
    1fe8:	109b      	asrs	r3, r3, #2
    1fea:	435e      	muls	r6, r3
    1fec:	2500      	movs	r5, #0
			printk("%s\n", __shell_module_start[i].module_name);
    1fee:	270c      	movs	r7, #12
		for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
    1ff0:	42b5      	cmp	r5, r6
    1ff2:	db13      	blt.n	201c <cmd_help+0xe8>
		printk("\n[Commands]\n");
    1ff4:	481d      	ldr	r0, [pc, #116]	; (206c <cmd_help+0x138>)
		if (NUM_OF_SHELL_CMDS == 0) {
    1ff6:	4d1e      	ldr	r5, [pc, #120]	; (2070 <cmd_help+0x13c>)
		printk("\n[Commands]\n");
    1ff8:	f7ff fc0c 	bl	1814 <printk>
		if (NUM_OF_SHELL_CMDS == 0) {
    1ffc:	4b1d      	ldr	r3, [pc, #116]	; (2074 <cmd_help+0x140>)
    1ffe:	1b5b      	subs	r3, r3, r5
    2000:	2b1e      	cmp	r3, #30
    2002:	d802      	bhi.n	200a <cmd_help+0xd6>
			printk("No registered commands.\n");
    2004:	481c      	ldr	r0, [pc, #112]	; (2078 <cmd_help+0x144>)
    2006:	f7ff fc05 	bl	1814 <printk>
		for (i = 0; i < NUM_OF_SHELL_CMDS; i++) {
    200a:	4c1c      	ldr	r4, [pc, #112]	; (207c <cmd_help+0x148>)
			printk("%s\n", __shell_cmd_start[i].cmd_name);
    200c:	4f1c      	ldr	r7, [pc, #112]	; (2080 <cmd_help+0x14c>)
		for (i = 0; i < NUM_OF_SHELL_CMDS; i++) {
    200e:	1b64      	subs	r4, r4, r5
    2010:	1124      	asrs	r4, r4, #4
    2012:	2600      	movs	r6, #0
    2014:	42a6      	cmp	r6, r4
    2016:	db09      	blt.n	202c <cmd_help+0xf8>
		printk("\nTo select a module, enter 'select <module name>'.\n");
    2018:	481a      	ldr	r0, [pc, #104]	; (2084 <cmd_help+0x150>)
    201a:	e7c6      	b.n	1faa <cmd_help+0x76>
			printk("%s\n", __shell_module_start[i].module_name);
    201c:	fb07 f305 	mul.w	r3, r7, r5
    2020:	4640      	mov	r0, r8
    2022:	58e1      	ldr	r1, [r4, r3]
    2024:	f7ff fbf6 	bl	1814 <printk>
		for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
    2028:	3501      	adds	r5, #1
    202a:	e7e1      	b.n	1ff0 <cmd_help+0xbc>
			printk("%s\n", __shell_cmd_start[i].cmd_name);
    202c:	0133      	lsls	r3, r6, #4
    202e:	4638      	mov	r0, r7
    2030:	58e9      	ldr	r1, [r5, r3]
    2032:	f7ff fbef 	bl	1814 <printk>
		for (i = 0; i < NUM_OF_SHELL_CMDS; i++) {
    2036:	3601      	adds	r6, #1
    2038:	e7ec      	b.n	2014 <cmd_help+0xe0>
    203a:	bf00      	nop
    203c:	00022192 	.word	0x00022192
    2040:	20000278 	.word	0x20000278
    2044:	0002217a 	.word	0x0002217a
    2048:	000221a8 	.word	0x000221a8
    204c:	00023263 	.word	0x00023263
    2050:	000221b8 	.word	0x000221b8
    2054:	000221e0 	.word	0x000221e0
    2058:	2000ebf8 	.word	0x2000ebf8
    205c:	2000ec1b 	.word	0x2000ec1b
    2060:	000221eb 	.word	0x000221eb
    2064:	2000ec10 	.word	0x2000ec10
    2068:	aaaaaaab 	.word	0xaaaaaaab
    206c:	00022203 	.word	0x00022203
    2070:	2000ec10 	.word	0x2000ec10
    2074:	2000ec2f 	.word	0x2000ec2f
    2078:	00022210 	.word	0x00022210
    207c:	2000ec20 	.word	0x2000ec20
    2080:	00022aad 	.word	0x00022aad
    2084:	00022229 	.word	0x00022229
    2088:	000221ae 	.word	0x000221ae

0000208c <cmd_select>:
	if (argc == 1) {
    208c:	2801      	cmp	r0, #1
    208e:	d002      	beq.n	2096 <cmd_select+0xa>
	return set_default_module(argv[1]);
    2090:	6848      	ldr	r0, [r1, #4]
    2092:	f7ff beeb 	b.w	1e6c <set_default_module>
		default_module = NULL;
    2096:	4b02      	ldr	r3, [pc, #8]	; (20a0 <cmd_select+0x14>)
    2098:	2000      	movs	r0, #0
    209a:	6018      	str	r0, [r3, #0]
}
    209c:	4770      	bx	lr
    209e:	bf00      	nop
    20a0:	20000278 	.word	0x20000278

000020a4 <completion>:
	/* only two parameters are possibles in case of no default module */
	return str ? dest : NULL;
}

static u8_t completion(char *line, u8_t len)
{
    20a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int common_chars = -1, space = 0;
	int i, command_len;
	const struct shell_module *module;
	char *command_prefix;

	if (len >= (MODULE_NAME_MAX_LEN + COMMAND_MAX_LEN - 1)) {
    20a8:	2944      	cmp	r1, #68	; 0x44
{
    20aa:	b089      	sub	sp, #36	; 0x24
    20ac:	4681      	mov	r9, r0
    20ae:	4688      	mov	r8, r1
	if (len >= (MODULE_NAME_MAX_LEN + COMMAND_MAX_LEN - 1)) {
    20b0:	d901      	bls.n	20b6 <completion+0x12>
	 * k_fifo_get function
	 */
	line[len] = '\0';
	module = get_completion_module(line, &command_prefix);
	if (!module) {
		return 0;
    20b2:	2000      	movs	r0, #0
    20b4:	e069      	b.n	218a <completion+0xe6>
	line[len] = '\0';
    20b6:	2300      	movs	r3, #0
    20b8:	5443      	strb	r3, [r0, r1]
    20ba:	4604      	mov	r4, r0
	while (*str && *str == ' ') {
    20bc:	4623      	mov	r3, r4
    20be:	f813 2b01 	ldrb.w	r2, [r3], #1
    20c2:	2a20      	cmp	r2, #32
    20c4:	d016      	beq.n	20f4 <completion+0x50>
	if (!*str) {
    20c6:	2a00      	cmp	r2, #0
    20c8:	d0f3      	beq.n	20b2 <completion+0xe>
	if (default_module) {
    20ca:	4e50      	ldr	r6, [pc, #320]	; (220c <completion+0x168>)
	str = strchr(str, ' ');
    20cc:	2120      	movs	r1, #32
    20ce:	4620      	mov	r0, r4
	if (default_module) {
    20d0:	6837      	ldr	r7, [r6, #0]
	str = strchr(str, ' ');
    20d2:	f7fe faf9 	bl	6c8 <strchr>
	if (default_module) {
    20d6:	f8d6 b000 	ldr.w	fp, [r6]
	if (default_module) {
    20da:	2f00      	cmp	r7, #0
    20dc:	bf14      	ite	ne
    20de:	46a2      	movne	sl, r4
    20e0:	f04f 0a00 	moveq.w	sl, #0
	str = strchr(str, ' ');
    20e4:	4605      	mov	r5, r0
	if (default_module) {
    20e6:	f1bb 0f00 	cmp.w	fp, #0
    20ea:	d005      	beq.n	20f8 <completion+0x54>
		return str ? dest : NULL;
    20ec:	2800      	cmp	r0, #0
    20ee:	d0e0      	beq.n	20b2 <completion+0xe>
	if (!module) {
    20f0:	b9f7      	cbnz	r7, 2130 <completion+0x8c>
    20f2:	e7de      	b.n	20b2 <completion+0xe>
	while (*str && *str == ' ') {
    20f4:	461c      	mov	r4, r3
    20f6:	e7e1      	b.n	20bc <completion+0x18>
	if (!str) {
    20f8:	2800      	cmp	r0, #0
    20fa:	d0da      	beq.n	20b2 <completion+0xe>
	if ((str - start + 1) >= MODULE_NAME_MAX_LEN) {
    20fc:	1b06      	subs	r6, r0, r4
    20fe:	1c72      	adds	r2, r6, #1
    2100:	2a13      	cmp	r2, #19
    2102:	dcd6      	bgt.n	20b2 <completion+0xe>
	strncpy(dest_str, start, (str - start + 1));
    2104:	4621      	mov	r1, r4
    2106:	a803      	add	r0, sp, #12
    2108:	f7fe facd 	bl	6a6 <strncpy>
	dest_str[str - start] = '\0';
    210c:	ab08      	add	r3, sp, #32
    210e:	441e      	add	r6, r3
	dest = get_destination_module(dest_str);
    2110:	a803      	add	r0, sp, #12
	dest_str[str - start] = '\0';
    2112:	f806 bc14 	strb.w	fp, [r6, #-20]
	dest = get_destination_module(dest_str);
    2116:	f7ff fe83 	bl	1e20 <get_destination_module>
	if (!dest) {
    211a:	4607      	mov	r7, r0
    211c:	2800      	cmp	r0, #0
    211e:	d0c8      	beq.n	20b2 <completion+0xe>
	str++;
    2120:	f105 0a01 	add.w	sl, r5, #1
	str = strchr(str, ' ');
    2124:	2120      	movs	r1, #32
    2126:	4650      	mov	r0, sl
    2128:	f7fe face 	bl	6c8 <strchr>
	return str ? dest : NULL;
    212c:	2800      	cmp	r0, #0
    212e:	d0c0      	beq.n	20b2 <completion+0xe>
	}

	command_len = strlen(command_prefix);
    2130:	4650      	mov	r0, sl
    2132:	f7fe fae5 	bl	700 <strlen>
    2136:	f04f 0b00 	mov.w	fp, #0
    213a:	9001      	str	r0, [sp, #4]
	int common_chars = -1, space = 0;
    213c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	const char *first_match = NULL;
    2140:	465d      	mov	r5, fp

	for (i = 0; module->commands[i].cmd_name; i++) {
    2142:	687a      	ldr	r2, [r7, #4]
    2144:	f852 600b 	ldr.w	r6, [r2, fp]
    2148:	bb16      	cbnz	r6, 2190 <completion+0xec>

		printk("%s\n", module->commands[i].cmd_name);
	}

	/* no match, do nothing */
	if (!first_match) {
    214a:	2d00      	cmp	r5, #0
    214c:	d0b1      	beq.n	20b2 <completion+0xe>
		return 0;
	}

	if (common_chars >= 0) {
    214e:	2c00      	cmp	r4, #0
    2150:	db48      	blt.n	21e4 <completion+0x140>
		/* multiple match, restore prompt */
		printk("%s", get_prompt());
    2152:	f7ff feb7 	bl	1ec4 <get_prompt>
    2156:	4601      	mov	r1, r0
    2158:	482d      	ldr	r0, [pc, #180]	; (2210 <completion+0x16c>)
    215a:	f7ff fb5b 	bl	1814 <printk>
		printk("%s", line);
    215e:	4649      	mov	r1, r9
    2160:	482b      	ldr	r0, [pc, #172]	; (2210 <completion+0x16c>)
    2162:	f7ff fb57 	bl	1814 <printk>
    2166:	9b01      	ldr	r3, [sp, #4]
		space = 1;
	}

	/* complete common part */
	for (i = command_len; i < common_chars; i++) {
		printk("%c", first_match[i]);
    2168:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 2220 <completion+0x17c>
    216c:	18ef      	adds	r7, r5, r3
	for (i = command_len; i < common_chars; i++) {
    216e:	1b7b      	subs	r3, r7, r5
    2170:	429c      	cmp	r4, r3
    2172:	dc3d      	bgt.n	21f0 <completion+0x14c>
		line[len++] = first_match[i];
	}

	/* for convenience add space after command */
	if (space) {
    2174:	b12e      	cbz	r6, 2182 <completion+0xde>
		printk(" ");
    2176:	4827      	ldr	r0, [pc, #156]	; (2214 <completion+0x170>)
    2178:	f7ff fb4c 	bl	1814 <printk>
		line[len] = ' ';
    217c:	2320      	movs	r3, #32
    217e:	f809 3008 	strb.w	r3, [r9, r8]
	}

	return common_chars - command_len + space;
    2182:	9b01      	ldr	r3, [sp, #4]
    2184:	19a0      	adds	r0, r4, r6
    2186:	1ac0      	subs	r0, r0, r3
    2188:	b2c0      	uxtb	r0, r0
}
    218a:	b009      	add	sp, #36	; 0x24
    218c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (strncmp(command_prefix,
    2190:	4631      	mov	r1, r6
    2192:	9a01      	ldr	r2, [sp, #4]
    2194:	4650      	mov	r0, sl
    2196:	f7fe fac8 	bl	72a <strncmp>
    219a:	4606      	mov	r6, r0
    219c:	b918      	cbnz	r0, 21a6 <completion+0x102>
		if (!first_match) {
    219e:	b92d      	cbnz	r5, 21ac <completion+0x108>
			first_match = module->commands[i].cmd_name;
    21a0:	687a      	ldr	r2, [r7, #4]
    21a2:	f852 500b 	ldr.w	r5, [r2, fp]
    21a6:	f10b 0b10 	add.w	fp, fp, #16
    21aa:	e7ca      	b.n	2142 <completion+0x9e>
		if (first_match && (common_chars < 0)) {
    21ac:	2c00      	cmp	r4, #0
    21ae:	da07      	bge.n	21c0 <completion+0x11c>
			printk("\n%s\n", first_match);
    21b0:	4629      	mov	r1, r5
    21b2:	4819      	ldr	r0, [pc, #100]	; (2218 <completion+0x174>)
    21b4:	f7ff fb2e 	bl	1814 <printk>
			common_chars = strlen(first_match);
    21b8:	4628      	mov	r0, r5
    21ba:	f7fe faa1 	bl	700 <strlen>
    21be:	4604      	mov	r4, r0
		for (j = 0; j < common_chars; j++) {
    21c0:	42a6      	cmp	r6, r4
    21c2:	687a      	ldr	r2, [r7, #4]
    21c4:	da05      	bge.n	21d2 <completion+0x12e>
			if (first_match[j] != module->commands[i].cmd_name[j]) {
    21c6:	f852 100b 	ldr.w	r1, [r2, fp]
    21ca:	5da8      	ldrb	r0, [r5, r6]
    21cc:	5d89      	ldrb	r1, [r1, r6]
    21ce:	4288      	cmp	r0, r1
    21d0:	d006      	beq.n	21e0 <completion+0x13c>
		printk("%s\n", module->commands[i].cmd_name);
    21d2:	f852 100b 	ldr.w	r1, [r2, fp]
    21d6:	4811      	ldr	r0, [pc, #68]	; (221c <completion+0x178>)
    21d8:	f7ff fb1c 	bl	1814 <printk>
    21dc:	4634      	mov	r4, r6
    21de:	e7e2      	b.n	21a6 <completion+0x102>
		for (j = 0; j < common_chars; j++) {
    21e0:	3601      	adds	r6, #1
    21e2:	e7ed      	b.n	21c0 <completion+0x11c>
		common_chars = strlen(first_match);
    21e4:	4628      	mov	r0, r5
    21e6:	f7fe fa8b 	bl	700 <strlen>
		space = 1;
    21ea:	2601      	movs	r6, #1
		common_chars = strlen(first_match);
    21ec:	4604      	mov	r4, r0
    21ee:	e7ba      	b.n	2166 <completion+0xc2>
		printk("%c", first_match[i]);
    21f0:	7839      	ldrb	r1, [r7, #0]
    21f2:	4650      	mov	r0, sl
    21f4:	f7ff fb0e 	bl	1814 <printk>
		line[len++] = first_match[i];
    21f8:	f108 0301 	add.w	r3, r8, #1
    21fc:	f817 2b01 	ldrb.w	r2, [r7], #1
    2200:	f809 2008 	strb.w	r2, [r9, r8]
    2204:	fa5f f883 	uxtb.w	r8, r3
    2208:	e7b1      	b.n	216e <completion+0xca>
    220a:	bf00      	nop
    220c:	20000278 	.word	0x20000278
    2210:	0002225d 	.word	0x0002225d
    2214:	00023b33 	.word	0x00023b33
    2218:	00023821 	.word	0x00023821
    221c:	00022aad 	.word	0x00022aad
    2220:	00021c21 	.word	0x00021c21

00002224 <shell_exec>:
{
    2224:	b570      	push	{r4, r5, r6, lr}
    2226:	b08c      	sub	sp, #48	; 0x30
    2228:	4605      	mov	r5, r0
	if (!strlen(str)) {
    222a:	f7fe fa69 	bl	700 <strlen>
    222e:	4604      	mov	r4, r0
    2230:	b1f8      	cbz	r0, 2272 <shell_exec+0x4e>
    2232:	462b      	mov	r3, r5
	while (*str && *str == ' ') {
    2234:	781c      	ldrb	r4, [r3, #0]
    2236:	2c20      	cmp	r4, #32
    2238:	4618      	mov	r0, r3
    223a:	f103 0301 	add.w	r3, r3, #1
    223e:	d0f9      	beq.n	2234 <shell_exec+0x10>
	if (!*str) {
    2240:	b1bc      	cbz	r4, 2272 <shell_exec+0x4e>
	argv[argc++] = str;
    2242:	ad0c      	add	r5, sp, #48	; 0x30
    2244:	2401      	movs	r4, #1
    2246:	f845 0d2c 	str.w	r0, [r5, #-44]!
		*str++ = '\0';
    224a:	2600      	movs	r6, #0
	while ((str = strchr(str, ' '))) {
    224c:	2120      	movs	r1, #32
    224e:	f7fe fa3b 	bl	6c8 <strchr>
    2252:	b140      	cbz	r0, 2266 <shell_exec+0x42>
		*str++ = '\0';
    2254:	4603      	mov	r3, r0
    2256:	f803 6b01 	strb.w	r6, [r3], #1
    225a:	4618      	mov	r0, r3
		while (*str && *str == ' ') {
    225c:	f813 2b01 	ldrb.w	r2, [r3], #1
    2260:	2a20      	cmp	r2, #32
    2262:	d0fa      	beq.n	225a <shell_exec+0x36>
		if (!*str) {
    2264:	bb1a      	cbnz	r2, 22ae <shell_exec+0x8a>
	argv[argc] = NULL;
    2266:	ab0c      	add	r3, sp, #48	; 0x30
    2268:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    226c:	2200      	movs	r2, #0
    226e:	f843 2c2c 	str.w	r2, [r3, #-44]
	argc = line2argv(line, argv, ARRAY_SIZE(argv));
    2272:	4626      	mov	r6, r4
	if (!argc) {
    2274:	b1c4      	cbz	r4, 22a8 <shell_exec+0x84>
	return get_cmd(internal_commands, command);
    2276:	9901      	ldr	r1, [sp, #4]
    2278:	482d      	ldr	r0, [pc, #180]	; (2330 <shell_exec+0x10c>)
    227a:	f7ff fda3 	bl	1dc4 <get_cmd>
	if (cmd) {
    227e:	4605      	mov	r5, r0
    2280:	2800      	cmp	r0, #0
    2282:	d133      	bne.n	22ec <shell_exec+0xc8>
	cmd = get_standalone(argv[0]);
    2284:	9801      	ldr	r0, [sp, #4]
    2286:	f7ff fdad 	bl	1de4 <get_standalone>
	if (cmd) {
    228a:	4605      	mov	r5, r0
    228c:	bb70      	cbnz	r0, 22ec <shell_exec+0xc8>
	if (argc == 1 && !default_module && NUM_OF_SHELL_CMDS == 0) {
    228e:	2c01      	cmp	r4, #1
    2290:	4a28      	ldr	r2, [pc, #160]	; (2334 <shell_exec+0x110>)
    2292:	d117      	bne.n	22c4 <shell_exec+0xa0>
    2294:	6813      	ldr	r3, [r2, #0]
    2296:	b9ab      	cbnz	r3, 22c4 <shell_exec+0xa0>
    2298:	4927      	ldr	r1, [pc, #156]	; (2338 <shell_exec+0x114>)
    229a:	4b28      	ldr	r3, [pc, #160]	; (233c <shell_exec+0x118>)
    229c:	1a5b      	subs	r3, r3, r1
    229e:	2b1e      	cmp	r3, #30
    22a0:	d810      	bhi.n	22c4 <shell_exec+0xa0>
		printk("No module selected. Use 'select' or 'help'.\n");
    22a2:	4827      	ldr	r0, [pc, #156]	; (2340 <shell_exec+0x11c>)
		printk("Type 'help' for list of available commands\n");
    22a4:	f7ff fab6 	bl	1814 <printk>
		return -EINVAL;
    22a8:	f06f 0415 	mvn.w	r4, #21
    22ac:	e03c      	b.n	2328 <shell_exec+0x104>
		argv[argc++] = str;
    22ae:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
    22b2:	3401      	adds	r4, #1
		if (argc == size) {
    22b4:	2c0b      	cmp	r4, #11
    22b6:	d1c9      	bne.n	224c <shell_exec+0x28>
			printk("Too many parameters (max %zu)\n", size - 1);
    22b8:	210a      	movs	r1, #10
    22ba:	4822      	ldr	r0, [pc, #136]	; (2344 <shell_exec+0x120>)
    22bc:	f7ff faaa 	bl	1814 <printk>
			return 0;
    22c0:	2400      	movs	r4, #0
    22c2:	e7d6      	b.n	2272 <shell_exec+0x4e>
	if (default_module) {
    22c4:	6813      	ldr	r3, [r2, #0]
    22c6:	b953      	cbnz	r3, 22de <shell_exec+0xba>
	if (!cmd && argc > 1) {
    22c8:	2c01      	cmp	r4, #1
    22ca:	dc11      	bgt.n	22f0 <shell_exec+0xcc>
		if (app_cmd_handler) {
    22cc:	4b1e      	ldr	r3, [pc, #120]	; (2348 <shell_exec+0x124>)
    22ce:	681b      	ldr	r3, [r3, #0]
    22d0:	bb33      	cbnz	r3, 2320 <shell_exec+0xfc>
		printk("Unrecognized command: %s\n", argv[0]);
    22d2:	9901      	ldr	r1, [sp, #4]
    22d4:	481d      	ldr	r0, [pc, #116]	; (234c <shell_exec+0x128>)
    22d6:	f7ff fa9d 	bl	1814 <printk>
		printk("Type 'help' for list of available commands\n");
    22da:	481d      	ldr	r0, [pc, #116]	; (2350 <shell_exec+0x12c>)
    22dc:	e7e2      	b.n	22a4 <shell_exec+0x80>
	return get_cmd(module->commands, cmd_str);
    22de:	9901      	ldr	r1, [sp, #4]
    22e0:	6858      	ldr	r0, [r3, #4]
    22e2:	f7ff fd6f 	bl	1dc4 <get_cmd>
	if (!cmd && argc > 1) {
    22e6:	4605      	mov	r5, r0
    22e8:	2800      	cmp	r0, #0
    22ea:	d0ed      	beq.n	22c8 <shell_exec+0xa4>
	char *argv[ARGC_MAX + 1], **argv_start = argv;
    22ec:	a901      	add	r1, sp, #4
    22ee:	e00d      	b.n	230c <shell_exec+0xe8>
		module = get_destination_module(argv[0]);
    22f0:	9801      	ldr	r0, [sp, #4]
    22f2:	f7ff fd95 	bl	1e20 <get_destination_module>
		if (module) {
    22f6:	2800      	cmp	r0, #0
    22f8:	d0e8      	beq.n	22cc <shell_exec+0xa8>
	return get_cmd(module->commands, cmd_str);
    22fa:	9902      	ldr	r1, [sp, #8]
    22fc:	6840      	ldr	r0, [r0, #4]
    22fe:	f7ff fd61 	bl	1dc4 <get_cmd>
			if (cmd) {
    2302:	4605      	mov	r5, r0
    2304:	2800      	cmp	r0, #0
    2306:	d0e1      	beq.n	22cc <shell_exec+0xa8>
				argc--;
    2308:	1e66      	subs	r6, r4, #1
				argv_start++;
    230a:	a902      	add	r1, sp, #8
	err = cmd->cb(argc, argv_start);
    230c:	686b      	ldr	r3, [r5, #4]
    230e:	4630      	mov	r0, r6
    2310:	4798      	blx	r3
	if (err < 0) {
    2312:	1e04      	subs	r4, r0, #0
    2314:	da08      	bge.n	2328 <shell_exec+0x104>
		show_cmd_help(cmd, false);
    2316:	2100      	movs	r1, #0
    2318:	4628      	mov	r0, r5
    231a:	f7ff fdf1 	bl	1f00 <show_cmd_help>
    231e:	e003      	b.n	2328 <shell_exec+0x104>
			return app_cmd_handler(argc, argv);
    2320:	4620      	mov	r0, r4
    2322:	a901      	add	r1, sp, #4
    2324:	4798      	blx	r3
    2326:	4604      	mov	r4, r0
}
    2328:	4620      	mov	r0, r4
    232a:	b00c      	add	sp, #48	; 0x30
    232c:	bd70      	pop	{r4, r5, r6, pc}
    232e:	bf00      	nop
    2330:	00022260 	.word	0x00022260
    2334:	20000278 	.word	0x20000278
    2338:	2000ec10 	.word	0x2000ec10
    233c:	2000ec2f 	.word	0x2000ec2f
    2340:	00022376 	.word	0x00022376
    2344:	00022357 	.word	0x00022357
    2348:	200000b8 	.word	0x200000b8
    234c:	000223a3 	.word	0x000223a3
    2350:	000223bd 	.word	0x000223bd

00002354 <shell>:
{
    2354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	printk("Zephyr Shell, Zephyr version: %s\n", KERNEL_VERSION_STRING);
    2358:	4917      	ldr	r1, [pc, #92]	; (23b8 <shell+0x64>)
    235a:	4818      	ldr	r0, [pc, #96]	; (23bc <shell+0x68>)
		if (!no_promt && !skip_prompt) {
    235c:	4e18      	ldr	r6, [pc, #96]	; (23c0 <shell+0x6c>)
			printk("%s", get_prompt());
    235e:	4f19      	ldr	r7, [pc, #100]	; (23c4 <shell+0x70>)
		cmd = k_fifo_get(&cmds_queue, K_FOREVER);
    2360:	f8df 8074 	ldr.w	r8, [pc, #116]	; 23d8 <shell+0x84>
	printk("Zephyr Shell, Zephyr version: %s\n", KERNEL_VERSION_STRING);
    2364:	f7ff fa56 	bl	1814 <printk>
	printk("Type 'help' for a list of available commands\n");
    2368:	4817      	ldr	r0, [pc, #92]	; (23c8 <shell+0x74>)
    236a:	f7ff fa53 	bl	1814 <printk>
	bool skip_prompt = false;
    236e:	2500      	movs	r5, #0
		if (!no_promt && !skip_prompt) {
    2370:	7833      	ldrb	r3, [r6, #0]
    2372:	b933      	cbnz	r3, 2382 <shell+0x2e>
    2374:	b92d      	cbnz	r5, 2382 <shell+0x2e>
			printk("%s", get_prompt());
    2376:	f7ff fda5 	bl	1ec4 <get_prompt>
    237a:	4601      	mov	r1, r0
    237c:	4638      	mov	r0, r7
    237e:	f7ff fa49 	bl	1814 <printk>
		cmd = k_fifo_get(&cmds_queue, K_FOREVER);
    2382:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2386:	4640      	mov	r0, r8
    2388:	f01e f97d 	bl	20686 <k_queue_get>
		if (mcumgr_cmd_handler != NULL && cmd->is_mcumgr) {
    238c:	4b0f      	ldr	r3, [pc, #60]	; (23cc <shell+0x78>)
    238e:	681b      	ldr	r3, [r3, #0]
		cmd = k_fifo_get(&cmds_queue, K_FOREVER);
    2390:	4604      	mov	r4, r0
    2392:	3005      	adds	r0, #5
		if (mcumgr_cmd_handler != NULL && cmd->is_mcumgr) {
    2394:	b15b      	cbz	r3, 23ae <shell+0x5a>
    2396:	7922      	ldrb	r2, [r4, #4]
    2398:	07d2      	lsls	r2, r2, #31
    239a:	d508      	bpl.n	23ae <shell+0x5a>
			mcumgr_cmd_handler(cmd->line, mcumgr_arg);
    239c:	4a0c      	ldr	r2, [pc, #48]	; (23d0 <shell+0x7c>)
    239e:	6811      	ldr	r1, [r2, #0]
    23a0:	4798      	blx	r3
			skip_prompt = true;
    23a2:	2501      	movs	r5, #1
		k_fifo_put(&avail_queue, cmd);
    23a4:	4621      	mov	r1, r4
    23a6:	480b      	ldr	r0, [pc, #44]	; (23d4 <shell+0x80>)
    23a8:	f01e f949 	bl	2063e <k_queue_append>
	while (1) {
    23ac:	e7e0      	b.n	2370 <shell+0x1c>
			shell_exec(cmd->line);
    23ae:	f7ff ff39 	bl	2224 <shell_exec>
			skip_prompt = false;
    23b2:	2500      	movs	r5, #0
    23b4:	e7f6      	b.n	23a4 <shell+0x50>
    23b6:	bf00      	nop
    23b8:	000222ff 	.word	0x000222ff
    23bc:	00022307 	.word	0x00022307
    23c0:	2000029c 	.word	0x2000029c
    23c4:	0002225d 	.word	0x0002225d
    23c8:	00022329 	.word	0x00022329
    23cc:	20000298 	.word	0x20000298
    23d0:	20000294 	.word	0x20000294
    23d4:	200000c0 	.word	0x200000c0
    23d8:	20000268 	.word	0x20000268

000023dc <shell_init>:


void shell_init(const char *str)
{
    23dc:	b510      	push	{r4, lr}
    23de:	4604      	mov	r4, r0
    23e0:	b086      	sub	sp, #24
	k_fifo_init(&cmds_queue);
    23e2:	4818      	ldr	r0, [pc, #96]	; (2444 <shell_init+0x68>)
    23e4:	f01e f8fa 	bl	205dc <k_queue_init>
	k_fifo_init(&avail_queue);
    23e8:	4817      	ldr	r0, [pc, #92]	; (2448 <shell_init+0x6c>)
    23ea:	f01e f8f7 	bl	205dc <k_queue_init>
		k_fifo_put(&avail_queue, &buf[i]);
    23ee:	4917      	ldr	r1, [pc, #92]	; (244c <shell_init+0x70>)
    23f0:	4815      	ldr	r0, [pc, #84]	; (2448 <shell_init+0x6c>)
    23f2:	f01e f924 	bl	2063e <k_queue_append>
    23f6:	4916      	ldr	r1, [pc, #88]	; (2450 <shell_init+0x74>)
    23f8:	4813      	ldr	r0, [pc, #76]	; (2448 <shell_init+0x6c>)
    23fa:	f01e f920 	bl	2063e <k_queue_append>
    23fe:	4915      	ldr	r1, [pc, #84]	; (2454 <shell_init+0x78>)
    2400:	4811      	ldr	r0, [pc, #68]	; (2448 <shell_init+0x6c>)
    2402:	f01e f91c 	bl	2063e <k_queue_append>

	line_queue_init();

	prompt = str ? str : "";
    2406:	4b14      	ldr	r3, [pc, #80]	; (2458 <shell_init+0x7c>)

    2408:	4914      	ldr	r1, [pc, #80]	; (245c <shell_init+0x80>)
    240a:	4815      	ldr	r0, [pc, #84]	; (2460 <shell_init+0x84>)
    240c:	2c00      	cmp	r4, #0
    240e:	bf08      	it	eq
    2410:	461c      	moveq	r4, r3
    2412:	4b14      	ldr	r3, [pc, #80]	; (2464 <shell_init+0x88>)
    2414:	f06f 0208 	mvn.w	r2, #8
    2418:	601c      	str	r4, [r3, #0]
    241a:	2300      	movs	r3, #0
    241c:	9305      	str	r3, [sp, #20]
    241e:	9304      	str	r3, [sp, #16]
    2420:	9203      	str	r2, [sp, #12]
    2422:	9302      	str	r3, [sp, #8]
    2424:	9301      	str	r3, [sp, #4]
    2426:	9300      	str	r3, [sp, #0]
    2428:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    242c:	4b0e      	ldr	r3, [pc, #56]	; (2468 <shell_init+0x8c>)
    242e:	f01e fd8d 	bl	20f4c <_impl_k_thread_create>
	k_thread_create(&shell_thread, stack, STACKSIZE, shell, NULL, NULL,
			NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);

	/* Register serial console handler */
#ifdef CONFIG_UART_CONSOLE
	uart_register_input(&avail_queue, &cmds_queue, completion);
    2432:	4a0e      	ldr	r2, [pc, #56]	; (246c <shell_init+0x90>)
    2434:	4903      	ldr	r1, [pc, #12]	; (2444 <shell_init+0x68>)
    2436:	4804      	ldr	r0, [pc, #16]	; (2448 <shell_init+0x6c>)
	telnet_register_input(&avail_queue, &cmds_queue, completion);
#endif
#ifdef CONFIG_NATIVE_POSIX_STDIN_CONSOLE
	native_stdin_register_input(&avail_queue, &cmds_queue, completion);
#endif
}
    2438:	b006      	add	sp, #24
    243a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	uart_register_input(&avail_queue, &cmds_queue, completion);
    243e:	f000 ba81 	b.w	2944 <uart_register_input>
    2442:	bf00      	nop
    2444:	20000268 	.word	0x20000268
    2448:	200000c0 	.word	0x200000c0
    244c:	200000d0 	.word	0x200000d0
    2450:	20000158 	.word	0x20000158
    2454:	200001e0 	.word	0x200001e0
    2458:	00023263 	.word	0x00023263
    245c:	20005318 	.word	0x20005318
    2460:	200002a4 	.word	0x200002a4
    2464:	200002a0 	.word	0x200002a0
    2468:	00002355 	.word	0x00002355
    246c:	000020a5 	.word	0x000020a5

00002470 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    2470:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2472:	4c11      	ldr	r4, [pc, #68]	; (24b8 <sys_rand32_get+0x48>)
    2474:	f3bf 8f5b 	dmb	ish
    2478:	6820      	ldr	r0, [r4, #0]
    247a:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    247e:	b960      	cbnz	r0, 249a <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
    2480:	480e      	ldr	r0, [pc, #56]	; (24bc <sys_rand32_get+0x4c>)
    2482:	f01d fe19 	bl	200b8 <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2486:	f3bf 8f5b 	dmb	ish
    248a:	e854 3f00 	ldrex	r3, [r4]
    248e:	e844 0200 	strex	r2, r0, [r4]
    2492:	2a00      	cmp	r2, #0
    2494:	d1f9      	bne.n	248a <sys_rand32_get+0x1a>
    2496:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    249a:	6843      	ldr	r3, [r0, #4]
    249c:	2204      	movs	r2, #4
    249e:	681b      	ldr	r3, [r3, #0]
    24a0:	eb0d 0102 	add.w	r1, sp, r2
    24a4:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    24a6:	2800      	cmp	r0, #0
    24a8:	da02      	bge.n	24b0 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    24aa:	f001 f817 	bl	34dc <_timer_cycle_get_32>
    24ae:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    24b0:	9801      	ldr	r0, [sp, #4]
    24b2:	b002      	add	sp, #8
    24b4:	bd10      	pop	{r4, pc}
    24b6:	bf00      	nop
    24b8:	2000030c 	.word	0x2000030c
    24bc:	00022439 	.word	0x00022439

000024c0 <_impl_uart_irq_rx_disable>:

static inline void _impl_uart_irq_rx_disable(struct device *dev)
{
	const struct uart_driver_api *api = dev->driver_api;

	if (api->irq_rx_disable) {
    24c0:	6843      	ldr	r3, [r0, #4]
    24c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    24c4:	b103      	cbz	r3, 24c8 <_impl_uart_irq_rx_disable+0x8>
		api->irq_rx_disable(dev);
    24c6:	4718      	bx	r3
    24c8:	4770      	bx	lr

000024ca <uart_poll_out>:
	return api->poll_out(dev, out_char);
    24ca:	6843      	ldr	r3, [r0, #4]
    24cc:	685b      	ldr	r3, [r3, #4]
    24ce:	4718      	bx	r3

000024d0 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    24d0:	280a      	cmp	r0, #10
{
    24d2:	b538      	push	{r3, r4, r5, lr}
    24d4:	4604      	mov	r4, r0
    24d6:	4d06      	ldr	r5, [pc, #24]	; (24f0 <console_out+0x20>)
	if ('\n' == c) {
    24d8:	d103      	bne.n	24e2 <console_out+0x12>
		uart_poll_out(uart_console_dev, '\r');
    24da:	210d      	movs	r1, #13
    24dc:	6828      	ldr	r0, [r5, #0]
    24de:	f7ff fff4 	bl	24ca <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
    24e2:	b2e1      	uxtb	r1, r4
    24e4:	6828      	ldr	r0, [r5, #0]
    24e6:	f7ff fff0 	bl	24ca <uart_poll_out>

	return c;
}
    24ea:	4620      	mov	r0, r4
    24ec:	bd38      	pop	{r3, r4, r5, pc}
    24ee:	bf00      	nop
    24f0:	20000330 	.word	0x20000330

000024f4 <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    24f4:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    24f6:	f3bf 8f5b 	dmb	ish
    24fa:	e850 3f00 	ldrex	r3, [r0]
    24fe:	ea43 0201 	orr.w	r2, r3, r1
    2502:	e840 2e00 	strex	lr, r2, [r0]
    2506:	f1be 0f00 	cmp.w	lr, #0
    250a:	d1f6      	bne.n	24fa <atomic_or+0x6>
    250c:	f3bf 8f5b 	dmb	ish
    2510:	4618      	mov	r0, r3
    2512:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00002518 <del_char>:
	/* Move cursor back to right place */
	cursor_restore();
}

static void del_char(char *pos, u8_t end)
{
    2518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uart_poll_out(uart_console_dev, '\b');
    251a:	4e14      	ldr	r6, [pc, #80]	; (256c <del_char+0x54>)
{
    251c:	4604      	mov	r4, r0
    251e:	460d      	mov	r5, r1
	uart_poll_out(uart_console_dev, '\b');
    2520:	6830      	ldr	r0, [r6, #0]
    2522:	2108      	movs	r1, #8
    2524:	f7ff ffd1 	bl	24ca <uart_poll_out>
    2528:	4637      	mov	r7, r6

	if (end == 0) {
    252a:	b94d      	cbnz	r5, 2540 <del_char+0x28>
		uart_poll_out(uart_console_dev, ' ');
    252c:	2120      	movs	r1, #32
    252e:	6830      	ldr	r0, [r6, #0]
    2530:	f7ff ffcb 	bl	24ca <uart_poll_out>
		uart_poll_out(uart_console_dev, '\b');
    2534:	6830      	ldr	r0, [r6, #0]
    2536:	2108      	movs	r1, #8

	uart_poll_out(uart_console_dev, ' ');

	/* Move cursor back to right place */
	cursor_restore();
}
    2538:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		uart_poll_out(uart_console_dev, '\b');
    253c:	f7ff bfc5 	b.w	24ca <uart_poll_out>
	printk("\x1b[s");
    2540:	480b      	ldr	r0, [pc, #44]	; (2570 <del_char+0x58>)
    2542:	f7ff f967 	bl	1814 <printk>
    2546:	4425      	add	r5, r4
	while (end-- > 0) {
    2548:	42ac      	cmp	r4, r5
    254a:	d108      	bne.n	255e <del_char+0x46>
	uart_poll_out(uart_console_dev, ' ');
    254c:	6838      	ldr	r0, [r7, #0]
    254e:	2120      	movs	r1, #32
    2550:	f7ff ffbb 	bl	24ca <uart_poll_out>
	printk("\x1b[u");
    2554:	4807      	ldr	r0, [pc, #28]	; (2574 <del_char+0x5c>)
}
    2556:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printk("\x1b[u");
    255a:	f7ff b95b 	b.w	1814 <printk>
		*pos = *(pos + 1);
    255e:	7861      	ldrb	r1, [r4, #1]
    2560:	f804 1b01 	strb.w	r1, [r4], #1
		uart_poll_out(uart_console_dev, *(pos++));
    2564:	6838      	ldr	r0, [r7, #0]
    2566:	f7ff ffb0 	bl	24ca <uart_poll_out>
    256a:	e7ed      	b.n	2548 <del_char+0x30>
    256c:	20000330 	.word	0x20000330
    2570:	00022443 	.word	0x00022443
    2574:	00022447 	.word	0x00022447

00002578 <uart_console_isr>:
}

#endif /* CONFIG_UART_CONSOLE_MCUMGR */

void uart_console_isr(struct device *unused)
{
    2578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ARG_UNUSED(unused);

	while (uart_irq_update(uart_console_dev) &&
    257c:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 2860 <uart_console_isr+0x2e8>
			 */
			return;
		}
#endif

		if (!cmd) {
    2580:	4fae      	ldr	r7, [pc, #696]	; (283c <uart_console_isr+0x2c4>)
{
    2582:	b085      	sub	sp, #20
    2584:	46c1      	mov	r9, r8
	while (uart_irq_update(uart_console_dev) &&
    2586:	f8d8 0000 	ldr.w	r0, [r8]

static inline int _impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api = dev->driver_api;

	if (api->irq_update) {
    258a:	6843      	ldr	r3, [r0, #4]
    258c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    258e:	b31b      	cbz	r3, 25d8 <uart_console_isr+0x60>
		return api->irq_update(dev);
    2590:	4798      	blx	r3
    2592:	b308      	cbz	r0, 25d8 <uart_console_isr+0x60>
	       uart_irq_is_pending(uart_console_dev)) {
    2594:	f8d8 0000 	ldr.w	r0, [r8]
	if (api->irq_is_pending)	{
    2598:	6843      	ldr	r3, [r0, #4]
    259a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    259c:	b1e3      	cbz	r3, 25d8 <uart_console_isr+0x60>
		return api->irq_is_pending(dev);
    259e:	4798      	blx	r3
	while (uart_irq_update(uart_console_dev) &&
    25a0:	b1d0      	cbz	r0, 25d8 <uart_console_isr+0x60>
		if (!uart_irq_rx_ready(uart_console_dev)) {
    25a2:	f8d8 0000 	ldr.w	r0, [r8]
	if (api->irq_rx_ready) {
    25a6:	6843      	ldr	r3, [r0, #4]
    25a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    25aa:	2b00      	cmp	r3, #0
    25ac:	d0eb      	beq.n	2586 <uart_console_isr+0xe>
		return api->irq_rx_ready(dev);
    25ae:	4798      	blx	r3
    25b0:	2800      	cmp	r0, #0
    25b2:	d0e8      	beq.n	2586 <uart_console_isr+0xe>
		rx = read_uart(uart_console_dev, &byte, 1);
    25b4:	f8d8 4000 	ldr.w	r4, [r8]
	if (api->fifo_read) {
    25b8:	6863      	ldr	r3, [r4, #4]
    25ba:	691b      	ldr	r3, [r3, #16]
    25bc:	2b00      	cmp	r3, #0
    25be:	f000 816d 	beq.w	289c <uart_console_isr+0x324>
		return api->fifo_read(dev, rx_data, size);
    25c2:	2201      	movs	r2, #1
    25c4:	f10d 010f 	add.w	r1, sp, #15
    25c8:	4620      	mov	r0, r4
    25ca:	4798      	blx	r3
	if (rx < 0) {
    25cc:	2800      	cmp	r0, #0
    25ce:	f280 8165 	bge.w	289c <uart_console_isr+0x324>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_DISABLE, uart_irq_tx_disable, struct device *, dev);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_RX_ENABLE, uart_irq_rx_enable, struct device *, dev);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_RX_DISABLE, uart_irq_rx_disable, struct device *, dev);
    25d2:	4620      	mov	r0, r4
    25d4:	f7ff ff74 	bl	24c0 <_impl_uart_irq_rx_disable>
		/* Ignore characters if there's no more buffer space */
		if (cur + end < sizeof(cmd->line) - 1) {
			insert_char(&cmd->line[cur++], byte, end);
		}
	}
}
    25d8:	b005      	add	sp, #20
    25da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    25de:	2108      	movs	r1, #8
    25e0:	4620      	mov	r0, r4
    25e2:	9301      	str	r3, [sp, #4]
    25e4:	f7ff ff86 	bl	24f4 <atomic_or>
		ansi_val = byte - '0';
    25e8:	9b01      	ldr	r3, [sp, #4]
    25ea:	f8cb 3000 	str.w	r3, [fp]
		ansi_val_2 = 0;
    25ee:	4b94      	ldr	r3, [pc, #592]	; (2840 <uart_console_isr+0x2c8>)
    25f0:	2200      	movs	r2, #0
    25f2:	601a      	str	r2, [r3, #0]
    25f4:	e7c7      	b.n	2586 <uart_console_isr+0xe>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    25f6:	f3bf 8f5b 	dmb	ish
    25fa:	6823      	ldr	r3, [r4, #0]
    25fc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(&esc_state, ESC_ANSI_VAL)) {
    2600:	071a      	lsls	r2, r3, #28
    2602:	f140 817d 	bpl.w	2900 <uart_console_isr+0x388>
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
}

static inline int isdigit(int a)
{
	return (((unsigned)(a)-'0') < 10);
    2606:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
		if (isdigit(byte)) {
    260a:	2b09      	cmp	r3, #9
    260c:	d817      	bhi.n	263e <uart_console_isr+0xc6>
    260e:	f3bf 8f5b 	dmb	ish
    2612:	6823      	ldr	r3, [r4, #0]
    2614:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(&esc_state, ESC_ANSI_VAL_2)) {
    2618:	f013 0f10 	tst.w	r3, #16
    261c:	f04f 000a 	mov.w	r0, #10
    2620:	d006      	beq.n	2630 <uart_console_isr+0xb8>
				ansi_val_2 += byte - '0';
    2622:	4b87      	ldr	r3, [pc, #540]	; (2840 <uart_console_isr+0x2c8>)
				ansi_val_2 *= 10;
    2624:	681a      	ldr	r2, [r3, #0]
				ansi_val_2 += byte - '0';
    2626:	fb00 6602 	mla	r6, r0, r2, r6
    262a:	3e30      	subs	r6, #48	; 0x30
    262c:	601e      	str	r6, [r3, #0]
    262e:	e7aa      	b.n	2586 <uart_console_isr+0xe>
				ansi_val += byte - '0';
    2630:	4984      	ldr	r1, [pc, #528]	; (2844 <uart_console_isr+0x2cc>)
				ansi_val *= 10;
    2632:	680b      	ldr	r3, [r1, #0]
				ansi_val += byte - '0';
    2634:	fb00 6603 	mla	r6, r0, r3, r6
    2638:	3e30      	subs	r6, #48	; 0x30
    263a:	600e      	str	r6, [r1, #0]
    263c:	e7a3      	b.n	2586 <uart_console_isr+0xe>
		if (byte == ';' &&
    263e:	2e3b      	cmp	r6, #59	; 0x3b
    2640:	d018      	beq.n	2674 <uart_console_isr+0xfc>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2642:	f3bf 8f5b 	dmb	ish
    2646:	e855 3f00 	ldrex	r3, [r5]
    264a:	f023 0308 	bic.w	r3, r3, #8
    264e:	e845 3200 	strex	r2, r3, [r5]
    2652:	2a00      	cmp	r2, #0
    2654:	d1f7      	bne.n	2646 <uart_console_isr+0xce>
    2656:	f3bf 8f5b 	dmb	ish
    265a:	f3bf 8f5b 	dmb	ish
    265e:	e855 3f00 	ldrex	r3, [r5]
    2662:	f023 0310 	bic.w	r3, r3, #16
    2666:	e845 3200 	strex	r2, r3, [r5]
    266a:	2a00      	cmp	r2, #0
    266c:	d1f7      	bne.n	265e <uart_console_isr+0xe6>
    266e:	f3bf 8f5b 	dmb	ish
    2672:	e145      	b.n	2900 <uart_console_isr+0x388>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    2674:	2110      	movs	r1, #16
    2676:	4628      	mov	r0, r5
    2678:	f7ff ff3c 	bl	24f4 <atomic_or>
    267c:	06c3      	lsls	r3, r0, #27
    267e:	d4e0      	bmi.n	2642 <uart_console_isr+0xca>
    2680:	e781      	b.n	2586 <uart_console_isr+0xe>
	switch (byte) {
    2682:	2e48      	cmp	r6, #72	; 0x48
    2684:	d039      	beq.n	26fa <uart_console_isr+0x182>
    2686:	2e7e      	cmp	r6, #126	; 0x7e
    2688:	f040 8145 	bne.w	2916 <uart_console_isr+0x39e>
		if (!end) {
    268c:	4c6e      	ldr	r4, [pc, #440]	; (2848 <uart_console_isr+0x2d0>)
    268e:	7823      	ldrb	r3, [r4, #0]
    2690:	2b00      	cmp	r3, #0
    2692:	f000 8140 	beq.w	2916 <uart_console_isr+0x39e>
	printk("\x1b[%uC", count);
    2696:	2101      	movs	r1, #1
    2698:	486c      	ldr	r0, [pc, #432]	; (284c <uart_console_isr+0x2d4>)
    269a:	f7ff f8bb 	bl	1814 <printk>
		del_char(&line[cur], --end);
    269e:	4b6c      	ldr	r3, [pc, #432]	; (2850 <uart_console_isr+0x2d8>)
    26a0:	7821      	ldrb	r1, [r4, #0]
    26a2:	7818      	ldrb	r0, [r3, #0]
			handle_ansi(byte, cmd->line);
    26a4:	f10a 0a05 	add.w	sl, sl, #5
		del_char(&line[cur], --end);
    26a8:	3901      	subs	r1, #1
    26aa:	b2c9      	uxtb	r1, r1
    26ac:	4450      	add	r0, sl
    26ae:	7021      	strb	r1, [r4, #0]
    26b0:	f7ff ff32 	bl	2518 <del_char>
    26b4:	e12f      	b.n	2916 <uart_console_isr+0x39e>
		if (ansi_val > cur) {
    26b6:	4866      	ldr	r0, [pc, #408]	; (2850 <uart_console_isr+0x2d8>)
    26b8:	4a62      	ldr	r2, [pc, #392]	; (2844 <uart_console_isr+0x2cc>)
    26ba:	7803      	ldrb	r3, [r0, #0]
    26bc:	6811      	ldr	r1, [r2, #0]
    26be:	428b      	cmp	r3, r1
    26c0:	f0c0 8129 	bcc.w	2916 <uart_console_isr+0x39e>
		end += ansi_val;
    26c4:	4e60      	ldr	r6, [pc, #384]	; (2848 <uart_console_isr+0x2d0>)
    26c6:	b2cc      	uxtb	r4, r1
    26c8:	7832      	ldrb	r2, [r6, #0]
		cur -= ansi_val;
    26ca:	1b1b      	subs	r3, r3, r4
		end += ansi_val;
    26cc:	4422      	add	r2, r4
		cur -= ansi_val;
    26ce:	7003      	strb	r3, [r0, #0]
	printk("\x1b[%uD", count);
    26d0:	4860      	ldr	r0, [pc, #384]	; (2854 <uart_console_isr+0x2dc>)
		end += ansi_val;
    26d2:	7032      	strb	r2, [r6, #0]
	printk("\x1b[%uC", count);
    26d4:	f7ff f89e 	bl	1814 <printk>
    26d8:	e11d      	b.n	2916 <uart_console_isr+0x39e>
		if (ansi_val > end) {
    26da:	485b      	ldr	r0, [pc, #364]	; (2848 <uart_console_isr+0x2d0>)
    26dc:	4b59      	ldr	r3, [pc, #356]	; (2844 <uart_console_isr+0x2cc>)
    26de:	7802      	ldrb	r2, [r0, #0]
    26e0:	6819      	ldr	r1, [r3, #0]
    26e2:	428a      	cmp	r2, r1
    26e4:	f0c0 8117 	bcc.w	2916 <uart_console_isr+0x39e>
		end -= ansi_val;
    26e8:	b2cb      	uxtb	r3, r1
    26ea:	1ad2      	subs	r2, r2, r3
    26ec:	7002      	strb	r2, [r0, #0]
		cur += ansi_val;
    26ee:	4a58      	ldr	r2, [pc, #352]	; (2850 <uart_console_isr+0x2d8>)
    26f0:	7810      	ldrb	r0, [r2, #0]
    26f2:	4403      	add	r3, r0
    26f4:	7013      	strb	r3, [r2, #0]
	printk("\x1b[%uC", count);
    26f6:	4855      	ldr	r0, [pc, #340]	; (284c <uart_console_isr+0x2d4>)
    26f8:	e7ec      	b.n	26d4 <uart_console_isr+0x15c>
		if (!cur) {
    26fa:	4c55      	ldr	r4, [pc, #340]	; (2850 <uart_console_isr+0x2d8>)
    26fc:	7821      	ldrb	r1, [r4, #0]
    26fe:	2900      	cmp	r1, #0
    2700:	f000 8109 	beq.w	2916 <uart_console_isr+0x39e>
	printk("\x1b[%uD", count);
    2704:	4853      	ldr	r0, [pc, #332]	; (2854 <uart_console_isr+0x2dc>)
    2706:	f7ff f885 	bl	1814 <printk>
		end += cur;
    270a:	4a4f      	ldr	r2, [pc, #316]	; (2848 <uart_console_isr+0x2d0>)
		cur += end;
    270c:	7813      	ldrb	r3, [r2, #0]
    270e:	7821      	ldrb	r1, [r4, #0]
    2710:	440b      	add	r3, r1
    2712:	7013      	strb	r3, [r2, #0]
		end = 0;
    2714:	2300      	movs	r3, #0
    2716:	7023      	strb	r3, [r4, #0]
    2718:	e0fd      	b.n	2916 <uart_console_isr+0x39e>
		if (!end) {
    271a:	4c4b      	ldr	r4, [pc, #300]	; (2848 <uart_console_isr+0x2d0>)
    271c:	7821      	ldrb	r1, [r4, #0]
    271e:	2900      	cmp	r1, #0
    2720:	f000 80f9 	beq.w	2916 <uart_console_isr+0x39e>
	printk("\x1b[%uC", count);
    2724:	4849      	ldr	r0, [pc, #292]	; (284c <uart_console_isr+0x2d4>)
    2726:	f7ff f875 	bl	1814 <printk>
		cur += end;
    272a:	4a49      	ldr	r2, [pc, #292]	; (2850 <uart_console_isr+0x2d8>)
    272c:	e7ee      	b.n	270c <uart_console_isr+0x194>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    272e:	f3bf 8f5b 	dmb	ish
    2732:	e854 6f00 	ldrex	r6, [r4]
    2736:	f026 0301 	bic.w	r3, r6, #1
    273a:	e844 3200 	strex	r2, r3, [r4]
    273e:	2a00      	cmp	r2, #0
    2740:	d1f7      	bne.n	2732 <uart_console_isr+0x1ba>
    2742:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(&esc_state, ESC_ESC)) {
    2746:	f016 0601 	ands.w	r6, r6, #1
    274a:	f89d 500f 	ldrb.w	r5, [sp, #15]
    274e:	d00b      	beq.n	2768 <uart_console_isr+0x1f0>
			if (byte == ANSI_ESC) {
    2750:	2d5b      	cmp	r5, #91	; 0x5b
    2752:	f47f af18 	bne.w	2586 <uart_console_isr+0xe>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2756:	2102      	movs	r1, #2
    2758:	4620      	mov	r0, r4
    275a:	f7ff fecb 	bl	24f4 <atomic_or>
    275e:	2104      	movs	r1, #4
    2760:	4620      	mov	r0, r4
    2762:	f7ff fec7 	bl	24f4 <atomic_or>
    2766:	e70e      	b.n	2586 <uart_console_isr+0xe>
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
    2768:	f1a5 0320 	sub.w	r3, r5, #32
		if (!isprint(byte)) {
    276c:	2b5e      	cmp	r3, #94	; 0x5e
    276e:	d94d      	bls.n	280c <uart_console_isr+0x294>
			switch (byte) {
    2770:	2d0d      	cmp	r5, #13
    2772:	d02d      	beq.n	27d0 <uart_console_isr+0x258>
    2774:	d815      	bhi.n	27a2 <uart_console_isr+0x22a>
    2776:	2d09      	cmp	r5, #9
    2778:	f47f af05 	bne.w	2586 <uart_console_isr+0xe>
				if (completion_cb && !end) {
    277c:	4b36      	ldr	r3, [pc, #216]	; (2858 <uart_console_isr+0x2e0>)
    277e:	681b      	ldr	r3, [r3, #0]
    2780:	2b00      	cmp	r3, #0
    2782:	f43f af00 	beq.w	2586 <uart_console_isr+0xe>
    2786:	4a30      	ldr	r2, [pc, #192]	; (2848 <uart_console_isr+0x2d0>)
    2788:	7812      	ldrb	r2, [r2, #0]
    278a:	2a00      	cmp	r2, #0
    278c:	f47f aefb 	bne.w	2586 <uart_console_isr+0xe>
					cur += completion_cb(cmd->line, cur);
    2790:	4c2f      	ldr	r4, [pc, #188]	; (2850 <uart_console_isr+0x2d8>)
    2792:	6838      	ldr	r0, [r7, #0]
    2794:	7821      	ldrb	r1, [r4, #0]
    2796:	3005      	adds	r0, #5
    2798:	4798      	blx	r3
    279a:	7823      	ldrb	r3, [r4, #0]
    279c:	4418      	add	r0, r3
    279e:	7020      	strb	r0, [r4, #0]
    27a0:	e6f1      	b.n	2586 <uart_console_isr+0xe>
			switch (byte) {
    27a2:	2d1b      	cmp	r5, #27
    27a4:	d012      	beq.n	27cc <uart_console_isr+0x254>
    27a6:	2d7f      	cmp	r5, #127	; 0x7f
    27a8:	f47f aeed 	bne.w	2586 <uart_console_isr+0xe>
				if (cur > 0) {
    27ac:	4a28      	ldr	r2, [pc, #160]	; (2850 <uart_console_isr+0x2d8>)
    27ae:	7813      	ldrb	r3, [r2, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	f43f aee8 	beq.w	2586 <uart_console_isr+0xe>
					del_char(&cmd->line[--cur], end);
    27b6:	3b01      	subs	r3, #1
    27b8:	b2db      	uxtb	r3, r3
    27ba:	7013      	strb	r3, [r2, #0]
    27bc:	6838      	ldr	r0, [r7, #0]
    27be:	4a22      	ldr	r2, [pc, #136]	; (2848 <uart_console_isr+0x2d0>)
    27c0:	3305      	adds	r3, #5
    27c2:	7811      	ldrb	r1, [r2, #0]
    27c4:	4418      	add	r0, r3
    27c6:	f7ff fea7 	bl	2518 <del_char>
    27ca:	e6dc      	b.n	2586 <uart_console_isr+0xe>
    27cc:	2101      	movs	r1, #1
    27ce:	e7c7      	b.n	2760 <uart_console_isr+0x1e8>
				cmd->line[cur + end] = '\0';
    27d0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 2850 <uart_console_isr+0x2d8>
    27d4:	4c1c      	ldr	r4, [pc, #112]	; (2848 <uart_console_isr+0x2d0>)
    27d6:	f89a 1000 	ldrb.w	r1, [sl]
    27da:	683b      	ldr	r3, [r7, #0]
    27dc:	7822      	ldrb	r2, [r4, #0]
				uart_poll_out(uart_console_dev, '\r');
    27de:	f8d9 0000 	ldr.w	r0, [r9]
				cmd->line[cur + end] = '\0';
    27e2:	440b      	add	r3, r1
    27e4:	4413      	add	r3, r2
				uart_poll_out(uart_console_dev, '\r');
    27e6:	4629      	mov	r1, r5
				cmd->line[cur + end] = '\0';
    27e8:	715e      	strb	r6, [r3, #5]
				uart_poll_out(uart_console_dev, '\r');
    27ea:	f7ff fe6e 	bl	24ca <uart_poll_out>
				uart_poll_out(uart_console_dev, '\n');
    27ee:	210a      	movs	r1, #10
    27f0:	f8d9 0000 	ldr.w	r0, [r9]
    27f4:	f7ff fe69 	bl	24ca <uart_poll_out>
				k_fifo_put(lines_queue, cmd);
    27f8:	4b18      	ldr	r3, [pc, #96]	; (285c <uart_console_isr+0x2e4>)
    27fa:	6839      	ldr	r1, [r7, #0]
    27fc:	6818      	ldr	r0, [r3, #0]
				cur = 0;
    27fe:	f88a 6000 	strb.w	r6, [sl]
				end = 0;
    2802:	7026      	strb	r6, [r4, #0]
				k_fifo_put(lines_queue, cmd);
    2804:	f01d ff1b 	bl	2063e <k_queue_append>
				cmd = NULL;
    2808:	603e      	str	r6, [r7, #0]
				break;
    280a:	e6bc      	b.n	2586 <uart_console_isr+0xe>
		if (cur + end < sizeof(cmd->line) - 1) {
    280c:	4a0e      	ldr	r2, [pc, #56]	; (2848 <uart_console_isr+0x2d0>)
    280e:	4b10      	ldr	r3, [pc, #64]	; (2850 <uart_console_isr+0x2d8>)
    2810:	f892 b000 	ldrb.w	fp, [r2]
    2814:	781e      	ldrb	r6, [r3, #0]
    2816:	eb0b 0206 	add.w	r2, fp, r6
    281a:	2a7e      	cmp	r2, #126	; 0x7e
    281c:	f73f aeb3 	bgt.w	2586 <uart_console_isr+0xe>
			insert_char(&cmd->line[cur++], byte, end);
    2820:	683c      	ldr	r4, [r7, #0]
	uart_poll_out(uart_console_dev, c);
    2822:	f8d9 0000 	ldr.w	r0, [r9]
			insert_char(&cmd->line[cur++], byte, end);
    2826:	1c72      	adds	r2, r6, #1
	uart_poll_out(uart_console_dev, c);
    2828:	4629      	mov	r1, r5
			insert_char(&cmd->line[cur++], byte, end);
    282a:	701a      	strb	r2, [r3, #0]
	uart_poll_out(uart_console_dev, c);
    282c:	f7ff fe4d 	bl	24ca <uart_poll_out>
    2830:	19a3      	adds	r3, r4, r6
	if (end == 0) {
    2832:	f1bb 0f00 	cmp.w	fp, #0
    2836:	d115      	bne.n	2864 <uart_console_isr+0x2ec>
		*pos = c;
    2838:	715d      	strb	r5, [r3, #5]
    283a:	e6a4      	b.n	2586 <uart_console_isr+0xe>
    283c:	2000031c 	.word	0x2000031c
    2840:	20000314 	.word	0x20000314
    2844:	20000310 	.word	0x20000310
    2848:	20000325 	.word	0x20000325
    284c:	00022458 	.word	0x00022458
    2850:	20000324 	.word	0x20000324
    2854:	00022452 	.word	0x00022452
    2858:	20000320 	.word	0x20000320
    285c:	2000032c 	.word	0x2000032c
    2860:	20000330 	.word	0x20000330
	tmp = *pos;
    2864:	f893 a005 	ldrb.w	sl, [r3, #5]
	printk("\x1b[s");
    2868:	4831      	ldr	r0, [pc, #196]	; (2930 <uart_console_isr+0x3b8>)
	*(pos++) = c;
    286a:	715d      	strb	r5, [r3, #5]
			insert_char(&cmd->line[cur++], byte, end);
    286c:	3605      	adds	r6, #5
	printk("\x1b[s");
    286e:	f7fe ffd1 	bl	1814 <printk>
			insert_char(&cmd->line[cur++], byte, end);
    2872:	4434      	add	r4, r6
    2874:	f10b 0b01 	add.w	fp, fp, #1
	*(pos++) = c;
    2878:	1c66      	adds	r6, r4, #1
    287a:	445c      	add	r4, fp
	while (end-- > 0) {
    287c:	42b4      	cmp	r4, r6
    287e:	d103      	bne.n	2888 <uart_console_isr+0x310>
	printk("\x1b[u");
    2880:	482c      	ldr	r0, [pc, #176]	; (2934 <uart_console_isr+0x3bc>)
    2882:	f7fe ffc7 	bl	1814 <printk>
    2886:	e67e      	b.n	2586 <uart_console_isr+0xe>
		uart_poll_out(uart_console_dev, tmp);
    2888:	4651      	mov	r1, sl
    288a:	f8d9 0000 	ldr.w	r0, [r9]
    288e:	f7ff fe1c 	bl	24ca <uart_poll_out>
		c = *pos;
    2892:	7833      	ldrb	r3, [r6, #0]
		*(pos++) = tmp;
    2894:	f806 ab01 	strb.w	sl, [r6], #1
		tmp = c;
    2898:	469a      	mov	sl, r3
    289a:	e7ef      	b.n	287c <uart_console_isr+0x304>
		if (!cmd) {
    289c:	6839      	ldr	r1, [r7, #0]
    289e:	b939      	cbnz	r1, 28b0 <uart_console_isr+0x338>
			cmd = k_fifo_get(avail_queue, K_NO_WAIT);
    28a0:	4b25      	ldr	r3, [pc, #148]	; (2938 <uart_console_isr+0x3c0>)
    28a2:	6818      	ldr	r0, [r3, #0]
    28a4:	f01d feef 	bl	20686 <k_queue_get>
    28a8:	6038      	str	r0, [r7, #0]
			if (!cmd) {
    28aa:	2800      	cmp	r0, #0
    28ac:	f43f ae94 	beq.w	25d8 <uart_console_isr+0x60>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    28b0:	f3bf 8f5b 	dmb	ish
    28b4:	4c21      	ldr	r4, [pc, #132]	; (293c <uart_console_isr+0x3c4>)
    28b6:	6823      	ldr	r3, [r4, #0]
    28b8:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(&esc_state, ESC_ANSI)) {
    28bc:	f013 0f02 	tst.w	r3, #2
    28c0:	4625      	mov	r5, r4
    28c2:	f43f af34 	beq.w	272e <uart_console_isr+0x1b6>
			handle_ansi(byte, cmd->line);
    28c6:	f89d 600f 	ldrb.w	r6, [sp, #15]
    28ca:	f8d7 a000 	ldr.w	sl, [r7]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    28ce:	f3bf 8f5b 	dmb	ish
    28d2:	e855 3f00 	ldrex	r3, [r5]
    28d6:	f023 0204 	bic.w	r2, r3, #4
    28da:	e845 2100 	strex	r1, r2, [r5]
    28de:	2900      	cmp	r1, #0
    28e0:	d1f7      	bne.n	28d2 <uart_console_isr+0x35a>
    28e2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(&esc_state, ESC_ANSI_FIRST)) {
    28e6:	0759      	lsls	r1, r3, #29
    28e8:	f57f ae85 	bpl.w	25f6 <uart_console_isr+0x7e>
	return (((unsigned)(a)-'0') < 10);
    28ec:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
		if (!isdigit(byte)) {
    28f0:	2b09      	cmp	r3, #9
    28f2:	f8df b04c 	ldr.w	fp, [pc, #76]	; 2940 <uart_console_isr+0x3c8>
    28f6:	f67f ae72 	bls.w	25de <uart_console_isr+0x66>
			ansi_val = 1;
    28fa:	2301      	movs	r3, #1
    28fc:	f8cb 3000 	str.w	r3, [fp]
	switch (byte) {
    2900:	2e46      	cmp	r6, #70	; 0x46
    2902:	f43f af0a 	beq.w	271a <uart_console_isr+0x1a2>
    2906:	f63f aebc 	bhi.w	2682 <uart_console_isr+0x10a>
    290a:	2e43      	cmp	r6, #67	; 0x43
    290c:	f43f aee5 	beq.w	26da <uart_console_isr+0x162>
    2910:	2e44      	cmp	r6, #68	; 0x44
    2912:	f43f aed0 	beq.w	26b6 <uart_console_isr+0x13e>
    2916:	f3bf 8f5b 	dmb	ish
    291a:	e855 3f00 	ldrex	r3, [r5]
    291e:	f023 0302 	bic.w	r3, r3, #2
    2922:	e845 3200 	strex	r2, r3, [r5]
    2926:	2a00      	cmp	r2, #0
    2928:	d1f7      	bne.n	291a <uart_console_isr+0x3a2>
    292a:	f3bf 8f5b 	dmb	ish
    292e:	e62a      	b.n	2586 <uart_console_isr+0xe>
    2930:	00022443 	.word	0x00022443
    2934:	00022447 	.word	0x00022447
    2938:	20000318 	.word	0x20000318
    293c:	20000328 	.word	0x20000328
    2940:	20000310 	.word	0x20000310

00002944 <uart_register_input>:
}

void uart_register_input(struct k_fifo *avail, struct k_fifo *lines,
			 u8_t (*completion)(char *str, u8_t len))
{
	avail_queue = avail;
    2944:	4b17      	ldr	r3, [pc, #92]	; (29a4 <uart_register_input+0x60>)
{
    2946:	b513      	push	{r0, r1, r4, lr}
	avail_queue = avail;
    2948:	6018      	str	r0, [r3, #0]
	lines_queue = lines;
    294a:	4b17      	ldr	r3, [pc, #92]	; (29a8 <uart_register_input+0x64>)
	uart_irq_rx_disable(uart_console_dev);
    294c:	4c17      	ldr	r4, [pc, #92]	; (29ac <uart_register_input+0x68>)
	lines_queue = lines;
    294e:	6019      	str	r1, [r3, #0]
	completion_cb = completion;
    2950:	4b17      	ldr	r3, [pc, #92]	; (29b0 <uart_register_input+0x6c>)
    2952:	6820      	ldr	r0, [r4, #0]
    2954:	601a      	str	r2, [r3, #0]
    2956:	f7ff fdb3 	bl	24c0 <_impl_uart_irq_rx_disable>
	uart_irq_tx_disable(uart_console_dev);
    295a:	6820      	ldr	r0, [r4, #0]
	if (api->irq_tx_disable) {
    295c:	6843      	ldr	r3, [r0, #4]
    295e:	699b      	ldr	r3, [r3, #24]
    2960:	b103      	cbz	r3, 2964 <uart_register_input+0x20>
		api->irq_tx_disable(dev);
    2962:	4798      	blx	r3
	uart_irq_callback_set(uart_console_dev, uart_console_isr);
    2964:	6820      	ldr	r0, [r4, #0]
 * @return N/A
 */
static inline void uart_irq_callback_set(struct device *dev,
					 uart_irq_callback_t cb)
{
	const struct uart_driver_api *api = dev->driver_api;
    2966:	6843      	ldr	r3, [r0, #4]

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    2968:	b11b      	cbz	r3, 2972 <uart_register_input+0x2e>
    296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    296c:	b10b      	cbz	r3, 2972 <uart_register_input+0x2e>
		api->irq_callback_set(dev, cb);
    296e:	4911      	ldr	r1, [pc, #68]	; (29b4 <uart_register_input+0x70>)
    2970:	4798      	blx	r3
	while (uart_irq_rx_ready(uart_console_dev)) {
    2972:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_ready) {
    2974:	6843      	ldr	r3, [r0, #4]
    2976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2978:	b92b      	cbnz	r3, 2986 <uart_register_input+0x42>
	uart_irq_rx_enable(uart_console_dev);
    297a:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_enable) {
    297c:	6843      	ldr	r3, [r0, #4]
    297e:	6a1b      	ldr	r3, [r3, #32]
    2980:	b973      	cbnz	r3, 29a0 <uart_register_input+0x5c>

	console_input_init();
}
    2982:	b002      	add	sp, #8
    2984:	bd10      	pop	{r4, pc}
		return api->irq_rx_ready(dev);
    2986:	4798      	blx	r3
	while (uart_irq_rx_ready(uart_console_dev)) {
    2988:	2800      	cmp	r0, #0
    298a:	d0f6      	beq.n	297a <uart_register_input+0x36>
		uart_fifo_read(uart_console_dev, &c, 1);
    298c:	6820      	ldr	r0, [r4, #0]
	if (api->fifo_read) {
    298e:	6843      	ldr	r3, [r0, #4]
    2990:	691b      	ldr	r3, [r3, #16]
    2992:	2b00      	cmp	r3, #0
    2994:	d0ed      	beq.n	2972 <uart_register_input+0x2e>
		return api->fifo_read(dev, rx_data, size);
    2996:	2201      	movs	r2, #1
    2998:	f10d 0107 	add.w	r1, sp, #7
    299c:	4798      	blx	r3
    299e:	e7e8      	b.n	2972 <uart_register_input+0x2e>
		api->irq_rx_enable(dev);
    29a0:	4798      	blx	r3
}
    29a2:	e7ee      	b.n	2982 <uart_register_input+0x3e>
    29a4:	20000318 	.word	0x20000318
    29a8:	2000032c 	.word	0x2000032c
    29ac:	20000330 	.word	0x20000330
    29b0:	20000320 	.word	0x20000320
    29b4:	00002579 	.word	0x00002579

000029b8 <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    29b8:	4801      	ldr	r0, [pc, #4]	; (29c0 <uart_console_hook_install+0x8>)
    29ba:	f7fe bde5 	b.w	1588 <__printk_hook_install>
    29be:	bf00      	nop
    29c0:	000024d1 	.word	0x000024d1

000029c4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    29c4:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    29c6:	4804      	ldr	r0, [pc, #16]	; (29d8 <uart_console_init+0x14>)
    29c8:	f01d fb76 	bl	200b8 <device_get_binding>
    29cc:	4b03      	ldr	r3, [pc, #12]	; (29dc <uart_console_init+0x18>)
    29ce:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    29d0:	f7ff fff2 	bl	29b8 <uart_console_hook_install>

	return 0;
}
    29d4:	2000      	movs	r0, #0
    29d6:	bd08      	pop	{r3, pc}
    29d8:	0002244b 	.word	0x0002244b
    29dc:	20000330 	.word	0x20000330

000029e0 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    29e0:	b510      	push	{r4, lr}
    29e2:	f04f 0320 	mov.w	r3, #32
    29e6:	f3ef 8211 	mrs	r2, BASEPRI
    29ea:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    29ee:	4c11      	ldr	r4, [pc, #68]	; (2a34 <_m16src_stop+0x54>)
    29f0:	7823      	ldrb	r3, [r4, #0]
    29f2:	b923      	cbnz	r3, 29fe <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    29f4:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    29f8:	f06f 0044 	mvn.w	r0, #68	; 0x44
    29fc:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    29fe:	3b01      	subs	r3, #1
    2a00:	b2db      	uxtb	r3, r3
    2a02:	7023      	strb	r3, [r4, #0]
    2a04:	b123      	cbz	r3, 2a10 <_m16src_stop+0x30>
    2a06:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    2a0a:	f06f 000f 	mvn.w	r0, #15
    2a0e:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    2a10:	4b09      	ldr	r3, [pc, #36]	; (2a38 <_m16src_stop+0x58>)
    2a12:	7818      	ldrb	r0, [r3, #0]
    2a14:	2101      	movs	r1, #1
    2a16:	b128      	cbz	r0, 2a24 <_m16src_stop+0x44>
		m16src_ref++;
    2a18:	7021      	strb	r1, [r4, #0]
    2a1a:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    2a1e:	f06f 000a 	mvn.w	r0, #10
    2a22:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    2a24:	7019      	strb	r1, [r3, #0]
    2a26:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    2a2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2a2e:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    2a30:	7018      	strb	r0, [r3, #0]

	return 0;
}
    2a32:	bd10      	pop	{r4, pc}
    2a34:	20000336 	.word	0x20000336
    2a38:	20000335 	.word	0x20000335

00002a3c <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    2a3c:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    2a3e:	2200      	movs	r2, #0
    2a40:	4610      	mov	r0, r2
    2a42:	2101      	movs	r1, #1
    2a44:	f7fe fbb4 	bl	11b0 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    2a48:	2000      	movs	r0, #0
    2a4a:	f7fe fb7f 	bl	114c <_arch_irq_enable>

	return 0;
}
    2a4e:	2000      	movs	r0, #0
    2a50:	bd08      	pop	{r3, pc}
	...

00002a54 <_m16src_start>:
{
    2a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    2a56:	f04f 0220 	mov.w	r2, #32
    2a5a:	f3ef 8311 	mrs	r3, BASEPRI
    2a5e:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    2a62:	4a25      	ldr	r2, [pc, #148]	; (2af8 <_m16src_start+0xa4>)
    2a64:	7810      	ldrb	r0, [r2, #0]
    2a66:	1c44      	adds	r4, r0, #1
    2a68:	7014      	strb	r4, [r2, #0]
    2a6a:	b160      	cbz	r0, 2a86 <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2a6c:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    2a70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a74:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    2a78:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2a7c:	bf14      	ite	ne
    2a7e:	2000      	movne	r0, #0
    2a80:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    2a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    2a86:	4d1d      	ldr	r5, [pc, #116]	; (2afc <_m16src_start+0xa8>)
    2a88:	782f      	ldrb	r7, [r5, #0]
    2a8a:	b12f      	cbz	r7, 2a98 <_m16src_start+0x44>
		m16src_ref--;
    2a8c:	7010      	strb	r0, [r2, #0]
    2a8e:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    2a92:	f06f 000a 	mvn.w	r0, #10
    2a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    2a98:	2601      	movs	r6, #1
    2a9a:	702e      	strb	r6, [r5, #0]
    2a9c:	f383 8811 	msr	BASEPRI, r3
    2aa0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    2aa4:	b319      	cbz	r1, 2aee <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    2aa6:	4638      	mov	r0, r7
    2aa8:	f7fe fb60 	bl	116c <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2aac:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    2ab0:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2ab4:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    2ab8:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    2aba:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    2abe:	b192      	cbz	r2, 2ae6 <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2ac0:	2200      	movs	r2, #0
    2ac2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ac6:	4a0e      	ldr	r2, [pc, #56]	; (2b00 <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    2ac8:	f013 0f01 	tst.w	r3, #1
    2acc:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    2ad0:	bf08      	it	eq
    2ad2:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    2ad6:	2000      	movs	r0, #0
    2ad8:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    2adc:	f7fe fb36 	bl	114c <_arch_irq_enable>
	m16src_grd = 0;
    2ae0:	2300      	movs	r3, #0
    2ae2:	702b      	strb	r3, [r5, #0]
    2ae4:	e7c4      	b.n	2a70 <_m16src_start+0x1c>
			__WFE();
    2ae6:	bf20      	wfe
			__SEV();
    2ae8:	bf40      	sev
			__WFE();
    2aea:	bf20      	wfe
    2aec:	e7e5      	b.n	2aba <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2aee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    2af2:	6026      	str	r6, [r4, #0]
    2af4:	e7f4      	b.n	2ae0 <_m16src_start+0x8c>
    2af6:	bf00      	nop
    2af8:	20000336 	.word	0x20000336
    2afc:	20000335 	.word	0x20000335
    2b00:	e000e100 	.word	0xe000e100

00002b04 <_k32src_start>:
{
    2b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b06:	4606      	mov	r6, r0
    2b08:	460c      	mov	r4, r1
	__asm__ volatile(
    2b0a:	f04f 0220 	mov.w	r2, #32
    2b0e:	f3ef 8311 	mrs	r3, BASEPRI
    2b12:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    2b16:	4a2c      	ldr	r2, [pc, #176]	; (2bc8 <_k32src_start+0xc4>)
    2b18:	7815      	ldrb	r5, [r2, #0]
    2b1a:	b165      	cbz	r5, 2b36 <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2b1c:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    2b20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b24:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    2b28:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    2b2c:	bf0c      	ite	eq
    2b2e:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    2b32:	2000      	movne	r0, #0
    2b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    2b36:	2701      	movs	r7, #1
    2b38:	7017      	strb	r7, [r2, #0]
    2b3a:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    2b3e:	4628      	mov	r0, r5
    2b40:	f7fe fb14 	bl	116c <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2b44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    2b48:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2b4a:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    2b4e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    2b52:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    2b56:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    2b5a:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    2b5c:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    2b60:	b371      	cbz	r1, 2bc0 <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    2b62:	0792      	lsls	r2, r2, #30
    2b64:	4f19      	ldr	r7, [pc, #100]	; (2bcc <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    2b66:	bf58      	it	pl
    2b68:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2b6a:	f04f 0100 	mov.w	r1, #0
    2b6e:	f04f 0501 	mov.w	r5, #1
    2b72:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    2b76:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    2b7a:	bf58      	it	pl
    2b7c:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    2b80:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    2b84:	f7fe fae2 	bl	114c <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    2b88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    2b8c:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    2b8e:	2218      	movs	r2, #24
    2b90:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    2b94:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    2b98:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    2b9c:	f014 0103 	ands.w	r1, r4, #3
    2ba0:	d1be      	bne.n	2b20 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    2ba2:	2010      	movs	r0, #16
    2ba4:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    2ba8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2bac:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2bae:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2bb2:	f7ff ff4f 	bl	2a54 <_m16src_start>
		if (!err) {
    2bb6:	2800      	cmp	r0, #0
    2bb8:	d1b2      	bne.n	2b20 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2bba:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    2bbe:	e7af      	b.n	2b20 <_k32src_start+0x1c>
		__WFE();
    2bc0:	bf20      	wfe
		__SEV();
    2bc2:	bf40      	sev
		__WFE();
    2bc4:	bf20      	wfe
    2bc6:	e7c9      	b.n	2b5c <_k32src_start+0x58>
    2bc8:	20000334 	.word	0x20000334
    2bcc:	e000e100 	.word	0xe000e100

00002bd0 <_power_clock_isr>:
{
    2bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    2bd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    2bd6:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    2bd8:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    2bdc:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    2be0:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    2be4:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    2be8:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    2bec:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    2bf0:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    2bf4:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    2bf8:	f1be 0f00 	cmp.w	lr, #0
    2bfc:	d003      	beq.n	2c06 <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    2bfe:	f04f 0e00 	mov.w	lr, #0
    2c02:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    2c06:	b127      	cbz	r7, 2c12 <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2c08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c0c:	2700      	movs	r7, #0
    2c0e:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    2c12:	b13a      	cbz	r2, 2c24 <_power_clock_isr+0x54>
    2c14:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    2c16:	bf41      	itttt	mi
    2c18:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    2c1c:	2201      	movmi	r2, #1
    2c1e:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    2c22:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    2c24:	b120      	cbz	r0, 2c30 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2c26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c2a:	2200      	movs	r2, #0
    2c2c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    2c30:	b149      	cbz	r1, 2c46 <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    2c32:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    2c36:	2100      	movs	r1, #0
    2c38:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    2c3c:	4628      	mov	r0, r5
    2c3e:	f7ff fecf 	bl	29e0 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    2c42:	2301      	movs	r3, #1
    2c44:	6163      	str	r3, [r4, #20]
	if (ctto) {
    2c46:	b176      	cbz	r6, 2c66 <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    2c48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c4c:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2c4e:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    2c50:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    2c54:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2c56:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2c5a:	f7ff fefb 	bl	2a54 <_m16src_start>
		if (!err) {
    2c5e:	b910      	cbnz	r0, 2c66 <_power_clock_isr+0x96>
    2c60:	4b01      	ldr	r3, [pc, #4]	; (2c68 <_power_clock_isr+0x98>)
    2c62:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    2c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c68:	e000e100 	.word	0xe000e100

00002c6c <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2c6c:	6803      	ldr	r3, [r0, #0]
    2c6e:	689b      	ldr	r3, [r3, #8]
    2c70:	689a      	ldr	r2, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2c72:	6883      	ldr	r3, [r0, #8]
{
    2c74:	b510      	push	{r4, lr}
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2c76:	68dc      	ldr	r4, [r3, #12]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2c78:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2c7a:	fa24 f300 	lsr.w	r3, r4, r0
    2c7e:	07db      	lsls	r3, r3, #31
    2c80:	d507      	bpl.n	2c92 <gpiote_find_channel+0x26>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    2c82:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    2c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2c8a:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2c8e:	428b      	cmp	r3, r1
    2c90:	d004      	beq.n	2c9c <gpiote_find_channel+0x30>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2c92:	3001      	adds	r0, #1
    2c94:	2808      	cmp	r0, #8
    2c96:	d1f0      	bne.n	2c7a <gpiote_find_channel+0xe>
			return i;
		}
	}

	return -ENODEV;
    2c98:	f06f 0012 	mvn.w	r0, #18
}
    2c9c:	bd10      	pop	{r4, pc}

00002c9e <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2c9e:	6800      	ldr	r0, [r0, #0]
    2ca0:	6880      	ldr	r0, [r0, #8]
    2ca2:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2ca4:	b941      	cbnz	r1, 2cb8 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
    2ca6:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    2caa:	fa21 f202 	lsr.w	r2, r1, r2
    2cae:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
    2cb2:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    2cb4:	2000      	movs	r0, #0
    2cb6:	4770      	bx	lr
		*value = gpio->IN;
    2cb8:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    2cbc:	e7f9      	b.n	2cb2 <gpio_nrf5_read+0x14>

00002cbe <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2cbe:	6800      	ldr	r0, [r0, #0]
    2cc0:	6880      	ldr	r0, [r0, #8]
    2cc2:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2cc4:	b949      	cbnz	r1, 2cda <gpio_nrf5_write+0x1c>
    2cc6:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
    2cc8:	4091      	lsls	r1, r2
		if (value) { /* 1 */
    2cca:	b11b      	cbz	r3, 2cd4 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
    2ccc:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
    2cd0:	2000      	movs	r0, #0
    2cd2:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
    2cd4:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
    2cd8:	e7fa      	b.n	2cd0 <gpio_nrf5_write+0x12>
		gpio->OUT = value;
    2cda:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    2cde:	e7f7      	b.n	2cd0 <gpio_nrf5_write+0x12>

00002ce0 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    2ce0:	b510      	push	{r4, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2ce2:	6883      	ldr	r3, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    2ce4:	b13a      	cbz	r2, 2cf6 <gpio_nrf5_manage_callback+0x16>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    2ce6:	681a      	ldr	r2, [r3, #0]
    2ce8:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
    2cea:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    2cec:	6019      	str	r1, [r3, #0]
	if (!list->tail) {
    2cee:	b902      	cbnz	r2, 2cf2 <gpio_nrf5_manage_callback+0x12>
		list->tail = list->head;
    2cf0:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    2cf2:	2000      	movs	r0, #0
    2cf4:	bd10      	pop	{r4, pc}
    2cf6:	6818      	ldr	r0, [r3, #0]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    2cf8:	2800      	cmp	r0, #0
    2cfa:	d0fa      	beq.n	2cf2 <gpio_nrf5_manage_callback+0x12>
		if (test == node) {
    2cfc:	4281      	cmp	r1, r0
    2cfe:	d10e      	bne.n	2d1e <gpio_nrf5_manage_callback+0x3e>
    2d00:	685c      	ldr	r4, [r3, #4]
    2d02:	6808      	ldr	r0, [r1, #0]
	if (!prev_node) {
    2d04:	b932      	cbnz	r2, 2d14 <gpio_nrf5_manage_callback+0x34>
		if (list->tail == node) {
    2d06:	42a1      	cmp	r1, r4
		list->head = node->next;
    2d08:	6018      	str	r0, [r3, #0]
		if (list->tail == node) {
    2d0a:	d100      	bne.n	2d0e <gpio_nrf5_manage_callback+0x2e>
			list->tail = list->head;
    2d0c:	6058      	str	r0, [r3, #4]
	node->next = NULL;
    2d0e:	2300      	movs	r3, #0
    2d10:	600b      	str	r3, [r1, #0]
    2d12:	e7ee      	b.n	2cf2 <gpio_nrf5_manage_callback+0x12>
		if (list->tail == node) {
    2d14:	42a1      	cmp	r1, r4
		prev_node->next = node->next;
    2d16:	6010      	str	r0, [r2, #0]
			list->tail = prev_node;
    2d18:	bf08      	it	eq
    2d1a:	605a      	streq	r2, [r3, #4]
    2d1c:	e7f7      	b.n	2d0e <gpio_nrf5_manage_callback+0x2e>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    2d1e:	4602      	mov	r2, r0
    2d20:	6800      	ldr	r0, [r0, #0]
    2d22:	e7e9      	b.n	2cf8 <gpio_nrf5_manage_callback+0x18>

00002d24 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    2d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d26:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2d28:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2d2a:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2d2c:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2d2e:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2d30:	6896      	ldr	r6, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    2d32:	b9a1      	cbnz	r1, 2d5e <gpio_nrf5_enable_callback+0x3a>

		i = gpiote_find_channel(dev, pin);
    2d34:	4621      	mov	r1, r4
    2d36:	f7ff ff99 	bl	2c6c <gpiote_find_channel>
		if (i < 0) {
    2d3a:	2800      	cmp	r0, #0
    2d3c:	db11      	blt.n	2d62 <gpio_nrf5_enable_callback+0x3e>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    2d3e:	68ba      	ldr	r2, [r7, #8]
    2d40:	2301      	movs	r3, #1
    2d42:	fa03 f404 	lsl.w	r4, r3, r4
    2d46:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    2d48:	f100 0240 	add.w	r2, r0, #64	; 0x40
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    2d4c:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables |= BIT(pin);
    2d50:	60bc      	str	r4, [r7, #8]
		gpiote->EVENTS_IN[i] = 0;
    2d52:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
		gpiote->INTENSET = BIT(i);
    2d56:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    2d5a:	4628      	mov	r0, r5
    2d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    2d5e:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    2d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002d64 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    2d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d66:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2d68:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2d6a:	6886      	ldr	r6, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2d6c:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2d6e:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2d70:	6897      	ldr	r7, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    2d72:	b989      	cbnz	r1, 2d98 <gpio_nrf5_disable_callback+0x34>
		i = gpiote_find_channel(dev, pin);
    2d74:	4621      	mov	r1, r4
    2d76:	f7ff ff79 	bl	2c6c <gpiote_find_channel>
		if (i < 0) {
    2d7a:	2800      	cmp	r0, #0
    2d7c:	db0e      	blt.n	2d9c <gpio_nrf5_disable_callback+0x38>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    2d7e:	68b2      	ldr	r2, [r6, #8]
    2d80:	2301      	movs	r3, #1
    2d82:	fa03 f404 	lsl.w	r4, r3, r4
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    2d86:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
    2d8a:	ea22 0404 	bic.w	r4, r2, r4
    2d8e:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
    2d90:	f8c7 0308 	str.w	r0, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    2d94:	4628      	mov	r0, r5
    2d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    2d98:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    2d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002d9e <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    2d9e:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    2da0:	2200      	movs	r2, #0
    2da2:	2101      	movs	r1, #1
    2da4:	2006      	movs	r0, #6
    2da6:	f7fe fa03 	bl	11b0 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    2daa:	2006      	movs	r0, #6
    2dac:	f7fe f9ce 	bl	114c <_arch_irq_enable>

	return 0;
}
    2db0:	2000      	movs	r0, #0
    2db2:	bd08      	pop	{r3, pc}

00002db4 <gpio_nrf5_port_isr>:
{
    2db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2db6:	6803      	ldr	r3, [r0, #0]
{
    2db8:	4606      	mov	r6, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2dba:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2dbc:	68b4      	ldr	r4, [r6, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2dbe:	6898      	ldr	r0, [r3, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2dc0:	2200      	movs	r2, #0
	u32_t enabled_int, int_status = 0;
    2dc2:	4613      	mov	r3, r2
			gpiote->EVENTS_IN[i] = 0;
    2dc4:	4615      	mov	r5, r2
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    2dc6:	2701      	movs	r7, #1
    2dc8:	eb00 0182 	add.w	r1, r0, r2, lsl #2
		if (gpiote->EVENTS_IN[i]) {
    2dcc:	f8d1 e100 	ldr.w	lr, [r1, #256]	; 0x100
    2dd0:	f1be 0f00 	cmp.w	lr, #0
    2dd4:	d008      	beq.n	2de8 <gpio_nrf5_port_isr+0x34>
			gpiote->EVENTS_IN[i] = 0;
    2dd6:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    2dda:	f8d1 1510 	ldr.w	r1, [r1, #1296]	; 0x510
    2dde:	f3c1 2104 	ubfx	r1, r1, #8, #5
    2de2:	fa07 f101 	lsl.w	r1, r7, r1
    2de6:	430b      	orrs	r3, r1
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2de8:	3201      	adds	r2, #1
    2dea:	2a08      	cmp	r2, #8
    2dec:	d1ec      	bne.n	2dc8 <gpio_nrf5_port_isr+0x14>
	enabled_int = int_status & data->pin_callback_enables;
    2dee:	68a5      	ldr	r5, [r4, #8]
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    2df0:	2006      	movs	r0, #6
	enabled_int = int_status & data->pin_callback_enables;
    2df2:	401d      	ands	r5, r3
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    2df4:	f7fe f9ba 	bl	116c <_arch_irq_disable>
    2df8:	6824      	ldr	r4, [r4, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    2dfa:	b924      	cbnz	r4, 2e06 <gpio_nrf5_port_isr+0x52>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    2dfc:	2006      	movs	r0, #6
}
    2dfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    2e02:	f7fe b9a3 	b.w	114c <_arch_irq_enable>
		if (cb->pin_mask & pins) {
    2e06:	68a3      	ldr	r3, [r4, #8]
    2e08:	421d      	tst	r5, r3
    2e0a:	d0f5      	beq.n	2df8 <gpio_nrf5_port_isr+0x44>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    2e0c:	6863      	ldr	r3, [r4, #4]
    2e0e:	462a      	mov	r2, r5
    2e10:	4621      	mov	r1, r4
    2e12:	4630      	mov	r0, r6
    2e14:	4798      	blx	r3
    2e16:	e7ef      	b.n	2df8 <gpio_nrf5_port_isr+0x44>

00002e18 <gpio_nrf5_config>:
{
    2e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2e1c:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2e1e:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2e20:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2e22:	6892      	ldr	r2, [r2, #8]
{
    2e24:	4680      	mov	r8, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2e26:	6895      	ldr	r5, [r2, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2e28:	6810      	ldr	r0, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    2e2a:	b119      	cbz	r1, 2e34 <gpio_nrf5_config+0x1c>
		return -ENOTSUP;
    2e2c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    2e30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    2e34:	f403 7240 	and.w	r2, r3, #768	; 0x300
    2e38:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    2e3c:	f3c3 3101 	ubfx	r1, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    2e40:	f3c3 3981 	ubfx	r9, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    2e44:	f403 3e40 	and.w	lr, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    2e48:	d056      	beq.n	2ef8 <gpio_nrf5_config+0xe0>
		u8_t pull = GPIO_PULL_DISABLE;
    2e4a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    2e4e:	bf0c      	ite	eq
    2e50:	2204      	moveq	r2, #4
    2e52:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
    2e54:	f5be 3f80 	cmp.w	lr, #65536	; 0x10000
    2e58:	bf08      	it	eq
    2e5a:	f04f 0e00 	moveq.w	lr, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    2e5e:	f013 0f01 	tst.w	r3, #1
    2e62:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 2f2c <gpio_nrf5_config+0x114>
    2e66:	ea4f 0181 	mov.w	r1, r1, lsl #2
    2e6a:	f504 76e0 	add.w	r6, r4, #448	; 0x1c0
    2e6e:	d04e      	beq.n	2f0e <gpio_nrf5_config+0xf6>
			if (pull == GPIO_PULL_UP) {
    2e70:	2a0c      	cmp	r2, #12
    2e72:	d143      	bne.n	2efc <gpio_nrf5_config+0xe4>
				gpio->OUTSET = BIT(pin);
    2e74:	f04f 0e01 	mov.w	lr, #1
    2e78:	fa0e fe04 	lsl.w	lr, lr, r4
    2e7c:	f8c0 e508 	str.w	lr, [r0, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
    2e80:	4449      	add	r1, r9
					      GPIO_INPUT_DISCONNECT |
    2e82:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    2e86:	f041 0103 	orr.w	r1, r1, #3
    2e8a:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
    2e8c:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
	if (flags & GPIO_INT) {
    2e90:	f013 0002 	ands.w	r0, r3, #2
    2e94:	d047      	beq.n	2f26 <gpio_nrf5_config+0x10e>
		if (flags & GPIO_INT_EDGE) {
    2e96:	0699      	lsls	r1, r3, #26
    2e98:	d5c8      	bpl.n	2e2c <gpio_nrf5_config+0x14>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    2e9a:	065a      	lsls	r2, r3, #25
    2e9c:	d43e      	bmi.n	2f1c <gpio_nrf5_config+0x104>
				config |= GPIOTE_CFG_POL_H2L;
    2e9e:	f013 0f04 	tst.w	r3, #4
    2ea2:	bf14      	ite	ne
    2ea4:	f44f 3680 	movne.w	r6, #65536	; 0x10000
    2ea8:	f44f 3600 	moveq.w	r6, #131072	; 0x20000
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    2eac:	68f8      	ldr	r0, [r7, #12]
    2eae:	f7fd f9f3 	bl	298 <__popcountsi2>
    2eb2:	2808      	cmp	r0, #8
    2eb4:	d035      	beq.n	2f22 <gpio_nrf5_config+0x10a>
		int i = gpiote_find_channel(dev, pin);
    2eb6:	4621      	mov	r1, r4
    2eb8:	4640      	mov	r0, r8
    2eba:	f7ff fed7 	bl	2c6c <gpiote_find_channel>
		if (i < 0) {
    2ebe:	2800      	cmp	r0, #0
    2ec0:	68fb      	ldr	r3, [r7, #12]
    2ec2:	da08      	bge.n	2ed6 <gpio_nrf5_config+0xbe>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    2ec4:	43da      	mvns	r2, r3
    2ec6:	fa92 f0a2 	rbit	r0, r2
    2eca:	2a00      	cmp	r2, #0
    2ecc:	fab0 f080 	clz	r0, r0
    2ed0:	bf08      	it	eq
    2ed2:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		config |= GPIOTE_CFG_PIN(pin);
    2ed6:	0224      	lsls	r4, r4, #8
		data->gpiote_chan_mask |= BIT(i);
    2ed8:	2201      	movs	r2, #1
		config |= GPIOTE_CFG_PIN(pin);
    2eda:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		data->gpiote_chan_mask |= BIT(i);
    2ede:	4082      	lsls	r2, r0
		config |= GPIOTE_CFG_PIN(pin);
    2ee0:	f044 0401 	orr.w	r4, r4, #1
		gpiote->CONFIG[i] = config;
    2ee4:	f500 70a2 	add.w	r0, r0, #324	; 0x144
		data->gpiote_chan_mask |= BIT(i);
    2ee8:	4313      	orrs	r3, r2
		config |= GPIOTE_CFG_PIN(pin);
    2eea:	4334      	orrs	r4, r6
		data->gpiote_chan_mask |= BIT(i);
    2eec:	60fb      	str	r3, [r7, #12]
		gpiote->CONFIG[i] = config;
    2eee:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
	return 0;
    2ef2:	2000      	movs	r0, #0
    2ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pull = GPIO_PULL_UP;
    2ef8:	220c      	movs	r2, #12
    2efa:	e7ab      	b.n	2e54 <gpio_nrf5_config+0x3c>
			} else if (pull == GPIO_PULL_DOWN) {
    2efc:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
    2efe:	bf02      	ittt	eq
    2f00:	f04f 0e01 	moveq.w	lr, #1
    2f04:	fa0e fe04 	lsleq.w	lr, lr, r4
    2f08:	f8c0 e50c 	streq.w	lr, [r0, #1292]	; 0x50c
    2f0c:	e7b8      	b.n	2e80 <gpio_nrf5_config+0x68>
					      drive_strength[ds_low][ds_high] |
    2f0e:	4449      	add	r1, r9
    2f10:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    2f14:	430a      	orrs	r2, r1
    2f16:	ea42 020e 	orr.w	r2, r2, lr
    2f1a:	e7b7      	b.n	2e8c <gpio_nrf5_config+0x74>
				config |= GPIOTE_CFG_POL_TOGG;
    2f1c:	f44f 3640 	mov.w	r6, #196608	; 0x30000
    2f20:	e7c4      	b.n	2eac <gpio_nrf5_config+0x94>
			return -EIO;
    2f22:	f06f 0004 	mvn.w	r0, #4
}
    2f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2f2a:	bf00      	nop
    2f2c:	00022490 	.word	0x00022490

00002f30 <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2f30:	6803      	ldr	r3, [r0, #0]
    2f32:	689b      	ldr	r3, [r3, #8]
    2f34:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    2f36:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    2f3a:	b132      	cbz	r2, 2f4a <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    2f3c:	2000      	movs	r0, #0
    2f3e:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    2f42:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    2f46:	700b      	strb	r3, [r1, #0]

	return 0;
    2f48:	4770      	bx	lr
		return -1;
    2f4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2f4e:	4770      	bx	lr

00002f50 <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2f50:	6803      	ldr	r3, [r0, #0]
    2f52:	689b      	ldr	r3, [r3, #8]
    2f54:	681b      	ldr	r3, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    2f56:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    2f5a:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
    2f5e:	2a00      	cmp	r2, #0
    2f60:	d0fb      	beq.n	2f5a <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    2f62:	2200      	movs	r2, #0
    2f64:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	return c;
}
    2f68:	4608      	mov	r0, r1
    2f6a:	4770      	bx	lr

00002f6c <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2f6c:	6803      	ldr	r3, [r0, #0]
    2f6e:	689b      	ldr	r3, [r3, #8]
    2f70:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    2f72:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
    2f76:	b118      	cbz	r0, 2f80 <uart_nrf5_err_check+0x14>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    2f78:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    2f7c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    2f80:	f000 000f 	and.w	r0, r0, #15
    2f84:	4770      	bx	lr

00002f86 <uart_nrf5_fifo_fill>:

#ifdef CONFIG_UART_INTERRUPT_DRIVEN

/** Interrupt driven FIFO fill function */
static int uart_nrf5_fifo_fill(struct device *dev, const u8_t *tx_data, int len)
{
    2f86:	b570      	push	{r4, r5, r6, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
    2f88:	6803      	ldr	r3, [r0, #0]
    2f8a:	689b      	ldr	r3, [r3, #8]
    2f8c:	681c      	ldr	r4, [r3, #0]
	u8_t num_tx = 0;

	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    2f8e:	2300      	movs	r3, #0
		/* Clear the interrupt */
		uart->EVENTS_TXDRDY = 0;
    2f90:	461e      	mov	r6, r3
	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    2f92:	b2d8      	uxtb	r0, r3
    2f94:	1a15      	subs	r5, r2, r0
    2f96:	2d00      	cmp	r5, #0
    2f98:	dd03      	ble.n	2fa2 <uart_nrf5_fifo_fill+0x1c>
    2f9a:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
    2f9e:	3301      	adds	r3, #1
    2fa0:	b905      	cbnz	r5, 2fa4 <uart_nrf5_fifo_fill+0x1e>
		/* Send a character */
		uart->TXD = (u8_t)tx_data[num_tx++];
	}

	return (int)num_tx;
}
    2fa2:	bd70      	pop	{r4, r5, r6, pc}
		uart->EVENTS_TXDRDY = 0;
    2fa4:	f8c4 611c 	str.w	r6, [r4, #284]	; 0x11c
		uart->TXD = (u8_t)tx_data[num_tx++];
    2fa8:	5c08      	ldrb	r0, [r1, r0]
    2faa:	f8c4 051c 	str.w	r0, [r4, #1308]	; 0x51c
    2fae:	e7f0      	b.n	2f92 <uart_nrf5_fifo_fill+0xc>

00002fb0 <uart_nrf5_fifo_read>:

/** Interrupt driven FIFO read function */
static int uart_nrf5_fifo_read(struct device *dev, u8_t *rx_data, const int size)
{
    2fb0:	b570      	push	{r4, r5, r6, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
    2fb2:	6803      	ldr	r3, [r0, #0]
    2fb4:	689b      	ldr	r3, [r3, #8]
    2fb6:	681c      	ldr	r4, [r3, #0]
	u8_t num_rx = 0;

	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    2fb8:	2300      	movs	r3, #0
		/* Clear the interrupt */
		uart->EVENTS_RXDRDY = 0;
    2fba:	461e      	mov	r6, r3
	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    2fbc:	b2d8      	uxtb	r0, r3
    2fbe:	1a15      	subs	r5, r2, r0
    2fc0:	2d00      	cmp	r5, #0
    2fc2:	dd03      	ble.n	2fcc <uart_nrf5_fifo_read+0x1c>
    2fc4:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
    2fc8:	3301      	adds	r3, #1
    2fca:	b905      	cbnz	r5, 2fce <uart_nrf5_fifo_read+0x1e>
		/* Receive a character */
		rx_data[num_rx++] = (u8_t)uart->RXD;
	}

	return num_rx;
}
    2fcc:	bd70      	pop	{r4, r5, r6, pc}
		uart->EVENTS_RXDRDY = 0;
    2fce:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
		rx_data[num_rx++] = (u8_t)uart->RXD;
    2fd2:	f8d4 5518 	ldr.w	r5, [r4, #1304]	; 0x518
    2fd6:	540d      	strb	r5, [r1, r0]
    2fd8:	e7f0      	b.n	2fbc <uart_nrf5_fifo_read+0xc>

00002fda <uart_nrf5_irq_tx_enable>:

/** Interrupt driven transfer enabling function */
static void uart_nrf5_irq_tx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2fda:	6803      	ldr	r3, [r0, #0]
    2fdc:	689b      	ldr	r3, [r3, #8]
    2fde:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_TX;
    2fe0:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    2fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2fe8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    2fec:	4770      	bx	lr

00002fee <uart_nrf5_irq_tx_disable>:
}

/** Interrupt driven transfer disabling function */
static void uart_nrf5_irq_tx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2fee:	6803      	ldr	r3, [r0, #0]
    2ff0:	689b      	ldr	r3, [r3, #8]
    2ff2:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_TX;
    2ff4:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    2ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2ffc:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    3000:	4770      	bx	lr

00003002 <uart_nrf5_irq_tx_ready>:
}

/** Interrupt driven transfer ready function */
static int uart_nrf5_irq_tx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    3002:	6803      	ldr	r3, [r0, #0]
    3004:	689b      	ldr	r3, [r3, #8]
    3006:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_TXDRDY;
    3008:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    300c:	4770      	bx	lr

0000300e <uart_nrf5_irq_rx_enable>:

/** Interrupt driven receiver enabling function */
static void uart_nrf5_irq_rx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    300e:	6803      	ldr	r3, [r0, #0]
    3010:	689b      	ldr	r3, [r3, #8]
    3012:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_RX;
    3014:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    3018:	f043 0304 	orr.w	r3, r3, #4
    301c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    3020:	4770      	bx	lr

00003022 <uart_nrf5_irq_rx_disable>:
}

/** Interrupt driven receiver disabling function */
static void uart_nrf5_irq_rx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    3022:	6803      	ldr	r3, [r0, #0]
    3024:	689b      	ldr	r3, [r3, #8]
    3026:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_RX;
    3028:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    302c:	f043 0304 	orr.w	r3, r3, #4
    3030:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    3034:	4770      	bx	lr

00003036 <uart_nrf5_irq_tx_complete>:
}

/** Interrupt driven transfer empty function */
static int uart_nrf5_irq_tx_complete(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    3036:	6803      	ldr	r3, [r0, #0]
    3038:	689b      	ldr	r3, [r3, #8]
    303a:	681b      	ldr	r3, [r3, #0]

	return !(uart->EVENTS_TXDRDY);
    303c:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    3040:	fab0 f080 	clz	r0, r0
    3044:	0940      	lsrs	r0, r0, #5
    3046:	4770      	bx	lr

00003048 <uart_nrf5_irq_rx_ready>:

/** Interrupt driven receiver ready function */
static int uart_nrf5_irq_rx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    3048:	6803      	ldr	r3, [r0, #0]
    304a:	689b      	ldr	r3, [r3, #8]
    304c:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_RXDRDY;
    304e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    3052:	4770      	bx	lr

00003054 <uart_nrf5_irq_err_enable>:

/** Interrupt driven error enabling function */
static void uart_nrf5_irq_err_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    3054:	6803      	ldr	r3, [r0, #0]
    3056:	689b      	ldr	r3, [r3, #8]
    3058:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_ERROR;
    305a:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    305e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3062:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    3066:	4770      	bx	lr

00003068 <uart_nrf5_irq_err_disable>:
}

/** Interrupt driven error disabling function */
static void uart_nrf5_irq_err_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    3068:	6803      	ldr	r3, [r0, #0]
    306a:	689b      	ldr	r3, [r3, #8]
    306c:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_ERROR;
    306e:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    3072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3076:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    307a:	4770      	bx	lr

0000307c <uart_nrf5_irq_update>:

/** Interrupt driven interrupt update function */
static int uart_nrf5_irq_update(struct device *dev)
{
	return 1;
}
    307c:	2001      	movs	r0, #1
    307e:	4770      	bx	lr

00003080 <uart_nrf5_irq_callback_set>:
/** Set the callback function */
static void uart_nrf5_irq_callback_set(struct device *dev, uart_irq_callback_t cb)
{
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);

	dev_data->cb = cb;
    3080:	6883      	ldr	r3, [r0, #8]
    3082:	6059      	str	r1, [r3, #4]
    3084:	4770      	bx	lr

00003086 <uart_nrf5_isr>:
void uart_nrf5_isr(void *arg)
{
	struct device *dev = arg;
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);

	if (dev_data->cb) {
    3086:	6883      	ldr	r3, [r0, #8]
    3088:	685b      	ldr	r3, [r3, #4]
    308a:	b103      	cbz	r3, 308e <uart_nrf5_isr+0x8>
		dev_data->cb(dev);
    308c:	4718      	bx	r3
    308e:	4770      	bx	lr

00003090 <uart_nrf5_irq_config>:
	    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE);


#ifdef CONFIG_UART_INTERRUPT_DRIVEN
static void uart_nrf5_irq_config(struct device *port)
{
    3090:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_UART0_IRQn,
    3092:	2002      	movs	r0, #2
    3094:	2200      	movs	r2, #0
    3096:	2101      	movs	r1, #1
    3098:	f7fe f88a 	bl	11b0 <_irq_priority_set>
		    CONFIG_UART_NRF5_IRQ_PRI,
		    uart_nrf5_isr, DEVICE_GET(uart_nrf5_0),
		    0);
	irq_enable(NRF5_IRQ_UART0_IRQn);
    309c:	2002      	movs	r0, #2
}
    309e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(NRF5_IRQ_UART0_IRQn);
    30a2:	f7fe b853 	b.w	114c <_arch_irq_enable>

000030a6 <uart_nrf5_irq_is_pending>:
{
    30a6:	b508      	push	{r3, lr}
    30a8:	4602      	mov	r2, r0
	return (uart_nrf5_irq_tx_ready(dev) || uart_nrf5_irq_rx_ready(dev));
    30aa:	f7ff ffaa 	bl	3002 <uart_nrf5_irq_tx_ready>
    30ae:	b930      	cbnz	r0, 30be <uart_nrf5_irq_is_pending+0x18>
    30b0:	4610      	mov	r0, r2
    30b2:	f7ff ffc9 	bl	3048 <uart_nrf5_irq_rx_ready>
    30b6:	3000      	adds	r0, #0
    30b8:	bf18      	it	ne
    30ba:	2001      	movne	r0, #1
    30bc:	bd08      	pop	{r3, pc}
    30be:	2001      	movs	r0, #1
}
    30c0:	bd08      	pop	{r3, pc}
	...

000030c4 <uart_nrf5_init>:
{
    30c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
    30c6:	6803      	ldr	r3, [r0, #0]
    30c8:	689b      	ldr	r3, [r3, #8]
{
    30ca:	4605      	mov	r5, r0
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    30cc:	481a      	ldr	r0, [pc, #104]	; (3138 <uart_nrf5_init+0x74>)
	volatile struct _uart *uart = UART_STRUCT(dev);
    30ce:	681c      	ldr	r4, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    30d0:	f01c fff2 	bl	200b8 <device_get_binding>
static inline int _impl_gpio_config(struct device *port, int access_op,
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, access_op, pin, flags);
    30d4:	6843      	ldr	r3, [r0, #4]
    30d6:	4606      	mov	r6, r0
    30d8:	681f      	ldr	r7, [r3, #0]
    30da:	2206      	movs	r2, #6
    30dc:	f240 1301 	movw	r3, #257	; 0x101
    30e0:	2100      	movs	r1, #0
    30e2:	47b8      	blx	r7
    30e4:	6873      	ldr	r3, [r6, #4]
    30e6:	681f      	ldr	r7, [r3, #0]
    30e8:	2300      	movs	r3, #0
    30ea:	4619      	mov	r1, r3
    30ec:	2208      	movs	r2, #8
    30ee:	4630      	mov	r0, r6
    30f0:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    30f2:	2306      	movs	r3, #6
    30f4:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    30f8:	2308      	movs	r3, #8
    30fa:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    30fe:	68ab      	ldr	r3, [r5, #8]
    3100:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    3104:	601a      	str	r2, [r3, #0]
	volatile struct _uart *uart = UART_STRUCT(dev);
    3106:	682b      	ldr	r3, [r5, #0]
    3108:	689b      	ldr	r3, [r3, #8]
    310a:	681a      	ldr	r2, [r3, #0]
	DEV_CFG(dev)->irq_config_func(dev);
    310c:	689b      	ldr	r3, [r3, #8]
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    310e:	f04f 71eb 	mov.w	r1, #30801920	; 0x1d60000
    3112:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    3116:	2204      	movs	r2, #4
    3118:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    311c:	2600      	movs	r6, #0
	uart->TASKS_STARTTX = 1;
    311e:	2201      	movs	r2, #1
	uart->EVENTS_TXDRDY = 0;
    3120:	f8c4 611c 	str.w	r6, [r4, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    3124:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    3128:	60a2      	str	r2, [r4, #8]
	uart->TASKS_STARTRX = 1;
    312a:	6022      	str	r2, [r4, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    312c:	4a03      	ldr	r2, [pc, #12]	; (313c <uart_nrf5_init+0x78>)
    312e:	606a      	str	r2, [r5, #4]
	DEV_CFG(dev)->irq_config_func(dev);
    3130:	4628      	mov	r0, r5
    3132:	4798      	blx	r3
}
    3134:	4630      	mov	r0, r6
    3136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3138:	000224f8 	.word	0x000224f8
    313c:	0002250c 	.word	0x0002250c

00003140 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
    3140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
    3144:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
    3146:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
    3148:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
    314a:	42a3      	cmp	r3, r4
	d = &rand[octets];
    314c:	440a      	add	r2, r1
	s = &rng->rand[first];
    314e:	4406      	add	r6, r0
	if (first <= last) {
    3150:	d81f      	bhi.n	3192 <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
    3152:	1ae4      	subs	r4, r4, r3
    3154:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    3156:	42a1      	cmp	r1, r4
			remaining = avail - octets;
    3158:	bf3e      	ittt	cc
    315a:	1a64      	subcc	r4, r4, r1
    315c:	b2e7      	uxtbcc	r7, r4
    315e:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
    3160:	4423      	add	r3, r4
		octets -= avail;
    3162:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
    3166:	bf28      	it	cs
    3168:	2700      	movcs	r7, #0
		first += avail;
    316a:	b2db      	uxtb	r3, r3
		octets -= avail;
    316c:	b2c9      	uxtb	r1, r1
    316e:	4434      	add	r4, r6

		while (avail--) {
    3170:	42a6      	cmp	r6, r4
    3172:	d109      	bne.n	3188 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
    3174:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
    3176:	7843      	ldrb	r3, [r0, #1]
    3178:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
    317a:	bf82      	ittt	hi
    317c:	4b20      	ldrhi	r3, [pc, #128]	; (3200 <get+0xc0>)
    317e:	2201      	movhi	r2, #1
    3180:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
    3182:	4608      	mov	r0, r1
    3184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
    3188:	f816 5b01 	ldrb.w	r5, [r6], #1
    318c:	f802 5d01 	strb.w	r5, [r2, #-1]!
    3190:	e7ee      	b.n	3170 <get+0x30>
		avail = rng->count - first;
    3192:	7805      	ldrb	r5, [r0, #0]
    3194:	1aed      	subs	r5, r5, r3
    3196:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
    3198:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
    319a:	bf3f      	itttt	cc
    319c:	1a67      	subcc	r7, r4, r1
    319e:	19ed      	addcc	r5, r5, r7
    31a0:	b2ef      	uxtbcc	r7, r5
    31a2:	460d      	movcc	r5, r1
			first += avail;
    31a4:	bf38      	it	cc
    31a6:	185b      	addcc	r3, r3, r1
		octets -= avail;
    31a8:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
    31ac:	bf32      	itee	cc
    31ae:	b2db      	uxtbcc	r3, r3
    31b0:	4627      	movcs	r7, r4
			first = 0;
    31b2:	2300      	movcs	r3, #0
		octets -= avail;
    31b4:	b2c9      	uxtb	r1, r1
    31b6:	4696      	mov	lr, r2
    31b8:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
    31bc:	4566      	cmp	r6, ip
    31be:	d119      	bne.n	31f4 <get+0xb4>
    31c0:	1b52      	subs	r2, r2, r5
		if (octets && last) {
    31c2:	2900      	cmp	r1, #0
    31c4:	d0d6      	beq.n	3174 <get+0x34>
    31c6:	2c00      	cmp	r4, #0
    31c8:	d0d4      	beq.n	3174 <get+0x34>
			if (octets < last) {
    31ca:	428c      	cmp	r4, r1
    31cc:	bf8a      	itet	hi
    31ce:	460b      	movhi	r3, r1
    31d0:	4623      	movls	r3, r4
				remaining = last - octets;
    31d2:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
    31d4:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
    31d8:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
    31dc:	bf8c      	ite	hi
    31de:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
    31e0:	2700      	movls	r7, #0
			octets -= last;
    31e2:	b2c9      	uxtb	r1, r1
    31e4:	18f4      	adds	r4, r6, r3
			while (last--) {
    31e6:	42a6      	cmp	r6, r4
    31e8:	d0c4      	beq.n	3174 <get+0x34>
				*(--d) = *s++;
    31ea:	f816 5b01 	ldrb.w	r5, [r6], #1
    31ee:	f802 5d01 	strb.w	r5, [r2, #-1]!
    31f2:	e7f8      	b.n	31e6 <get+0xa6>
			*(--d) = *s++;
    31f4:	f816 8b01 	ldrb.w	r8, [r6], #1
    31f8:	f80e 8d01 	strb.w	r8, [lr, #-1]!
    31fc:	e7de      	b.n	31bc <get+0x7c>
    31fe:	bf00      	nop
    3200:	4000d000 	.word	0x4000d000

00003204 <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
    3204:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
    3206:	b1d0      	cbz	r0, 323e <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
    3208:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
    320a:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
    320c:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
    320e:	1c53      	adds	r3, r2, #1
    3210:	b2db      	uxtb	r3, r3
		last = 0;
    3212:	42ab      	cmp	r3, r5
    3214:	bf08      	it	eq
    3216:	2300      	moveq	r3, #0
	if (last == rng->first) {
    3218:	42a3      	cmp	r3, r4
    321a:	d010      	beq.n	323e <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    321c:	b161      	cbz	r1, 3238 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    321e:	490a      	ldr	r1, [pc, #40]	; (3248 <isr+0x44>)
    3220:	4402      	add	r2, r0
    3222:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    3226:	7111      	strb	r1, [r2, #4]
	rng->last = last;
    3228:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
    322a:	3301      	adds	r3, #1
    322c:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
    322e:	429d      	cmp	r5, r3
    3230:	bf08      	it	eq
    3232:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
    3234:	42a3      	cmp	r3, r4
    3236:	d005      	beq.n	3244 <isr+0x40>
		return 0;
	}

	return -EBUSY;
    3238:	f06f 000f 	mvn.w	r0, #15
    323c:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
    323e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    3242:	bd30      	pop	{r4, r5, pc}
		return 0;
    3244:	2000      	movs	r0, #0
}
    3246:	bd30      	pop	{r4, r5, pc}
    3248:	4000d000 	.word	0x4000d000

0000324c <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
    324c:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    324e:	6884      	ldr	r4, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    3250:	2201      	movs	r2, #1
    3252:	4611      	mov	r1, r2
    3254:	4620      	mov	r0, r4
    3256:	f01d fc33 	bl	20ac0 <_impl_k_sem_init>
    325a:	f104 0018 	add.w	r0, r4, #24
    325e:	2201      	movs	r2, #1
    3260:	2100      	movs	r1, #0
    3262:	f01d fc2d 	bl	20ac0 <_impl_k_sem_init>
	rng->threshold = threshold;
    3266:	2304      	movs	r3, #4
    3268:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    326c:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
    326e:	2500      	movs	r5, #0
	rng->threshold = threshold;
    3270:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
    3274:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    3276:	4b11      	ldr	r3, [pc, #68]	; (32bc <entropy_nrf5_init+0x70>)
	rng->count = len;
    3278:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    327c:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
    327e:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
    3282:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
    3286:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
    328a:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
    328e:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    3292:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    3296:	f042 0201 	orr.w	r2, r2, #1
    329a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    329e:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
    32a0:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    32a4:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    32a6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
    32aa:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    32ac:	462a      	mov	r2, r5
    32ae:	f7fd ff7f 	bl	11b0 <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
    32b2:	4630      	mov	r0, r6
    32b4:	f7fd ff4a 	bl	114c <_arch_irq_enable>

	return 0;
}
    32b8:	4628      	mov	r0, r5
    32ba:	bd70      	pop	{r4, r5, r6, pc}
    32bc:	4000d000 	.word	0x4000d000

000032c0 <isr_rand>:
{
    32c0:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
    32c2:	4b12      	ldr	r3, [pc, #72]	; (330c <isr_rand+0x4c>)
    32c4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    32c8:	b1fb      	cbz	r3, 330a <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    32ca:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
    32cc:	2101      	movs	r1, #1
    32ce:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    32d2:	f7ff ff97 	bl	3204 <isr>
		if (ret != -EBUSY) {
    32d6:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
    32da:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
    32dc:	d00d      	beq.n	32fa <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
    32de:	f110 0437 	adds.w	r4, r0, #55	; 0x37
    32e2:	bf14      	ite	ne
    32e4:	2100      	movne	r1, #0
    32e6:	2101      	moveq	r1, #1
    32e8:	f105 0030 	add.w	r0, r5, #48	; 0x30
    32ec:	f7ff ff8a 	bl	3204 <isr>
    32f0:	4604      	mov	r4, r0

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    32f2:	f105 0018 	add.w	r0, r5, #24
    32f6:	f01d fbed 	bl	20ad4 <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
    32fa:	4b04      	ldr	r3, [pc, #16]	; (330c <isr_rand+0x4c>)
    32fc:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
    32fe:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
    3300:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
    3304:	bf1c      	itt	ne
    3306:	2201      	movne	r2, #1
    3308:	605a      	strne	r2, [r3, #4]
    330a:	bd38      	pop	{r3, r4, r5, pc}
    330c:	4000d000 	.word	0x4000d000

00003310 <entropy_nrf5_get_entropy>:
{
    3310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    3314:	6885      	ldr	r5, [r0, #8]
{
    3316:	460f      	mov	r7, r1
    3318:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
    331a:	f105 0818 	add.w	r8, r5, #24
	while (len) {
    331e:	b914      	cbnz	r4, 3326 <entropy_nrf5_get_entropy+0x16>
}
    3320:	4620      	mov	r0, r4
    3322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3326:	2cff      	cmp	r4, #255	; 0xff
    3328:	4623      	mov	r3, r4
    332a:	bf28      	it	cs
    332c:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
    332e:	1ae4      	subs	r4, r4, r3
    3330:	b2de      	uxtb	r6, r3
    3332:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
    3334:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    3338:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    333c:	4628      	mov	r0, r5
    333e:	f01d fc29 	bl	20b94 <_impl_k_sem_take>
    3342:	4631      	mov	r1, r6
    3344:	463a      	mov	r2, r7
    3346:	4648      	mov	r0, r9
    3348:	f7ff fefa 	bl	3140 <get>
    334c:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    334e:	4628      	mov	r0, r5
    3350:	f01d fbc0 	bl	20ad4 <_impl_k_sem_give>
			if (len8) {
    3354:	2e00      	cmp	r6, #0
    3356:	d0e2      	beq.n	331e <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    3358:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    335c:	4640      	mov	r0, r8
    335e:	f01d fc19 	bl	20b94 <_impl_k_sem_take>
    3362:	e7e9      	b.n	3338 <entropy_nrf5_get_entropy+0x28>

00003364 <entropy_get_entropy_isr>:

u8_t entropy_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
    3364:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
    3366:	4802      	ldr	r0, [pc, #8]	; (3370 <entropy_get_entropy_isr+0xc>)
    3368:	460a      	mov	r2, r1
    336a:	4619      	mov	r1, r3
    336c:	f7ff bee8 	b.w	3140 <get>
    3370:	20000384 	.word	0x20000384

00003374 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    3374:	4b08      	ldr	r3, [pc, #32]	; (3398 <rtc_compare_set+0x24>)
    3376:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    337a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    337e:	1ac0      	subs	r0, r0, r3
    3380:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3384:	4b05      	ldr	r3, [pc, #20]	; (339c <rtc_compare_set+0x28>)
    3386:	3802      	subs	r0, #2
    3388:	4298      	cmp	r0, r3
    338a:	bf82      	ittt	hi
    338c:	4b04      	ldrhi	r3, [pc, #16]	; (33a0 <rtc_compare_set+0x2c>)
    338e:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    3392:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    3396:	4770      	bx	lr
    3398:	40011000 	.word	0x40011000
    339c:	007ffffd 	.word	0x007ffffd
    33a0:	e000e100 	.word	0xe000e100

000033a4 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    33a4:	b510      	push	{r4, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    33a6:	4b12      	ldr	r3, [pc, #72]	; (33f0 <rtc_announce_set_next+0x4c>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    33a8:	4c12      	ldr	r4, [pc, #72]	; (33f4 <rtc_announce_set_next+0x50>)
	rtc_now = RTC_COUNTER;
    33aa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    33ae:	6822      	ldr	r2, [r4, #0]
    33b0:	1a80      	subs	r0, r0, r2
    33b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    33b6:	f5b0 7fa3 	cmp.w	r0, #326	; 0x146
    33ba:	d911      	bls.n	33e0 <rtc_announce_set_next+0x3c>
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;

		if (sys_elapsed > expected_sys_ticks) {
    33bc:	490e      	ldr	r1, [pc, #56]	; (33f8 <rtc_announce_set_next+0x54>)
    33be:	6809      	ldr	r1, [r1, #0]
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    33c0:	f240 1347 	movw	r3, #327	; 0x147
    33c4:	fbb0 f0f3 	udiv	r0, r0, r3
    33c8:	4288      	cmp	r0, r1
    33ca:	bf28      	it	cs
    33cc:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    33ce:	fb03 2300 	mla	r3, r3, r0, r2
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    33d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    33d6:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    33d8:	4b08      	ldr	r3, [pc, #32]	; (33fc <rtc_announce_set_next+0x58>)
    33da:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    33dc:	f01d fc1c 	bl	20c18 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    33e0:	6820      	ldr	r0, [r4, #0]
}
    33e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    33e6:	f200 1047 	addw	r0, r0, #327	; 0x147
    33ea:	f7ff bfc3 	b.w	3374 <rtc_compare_set>
    33ee:	bf00      	nop
    33f0:	40011000 	.word	0x40011000
    33f4:	2000039c 	.word	0x2000039c
    33f8:	20000398 	.word	0x20000398
    33fc:	2000eb20 	.word	0x2000eb20

00003400 <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    3400:	4b02      	ldr	r3, [pc, #8]	; (340c <rtc1_nrf5_isr+0xc>)
    3402:	2200      	movs	r2, #0
    3404:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    3408:	f7ff bfcc 	b.w	33a4 <rtc_announce_set_next>
    340c:	40011000 	.word	0x40011000

00003410 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    3410:	f246 4335 	movw	r3, #25653	; 0x6435
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    3414:	4298      	cmp	r0, r3
    3416:	bf28      	it	cs
    3418:	4618      	movcs	r0, r3
	expected_sys_ticks = sys_ticks;
    341a:	4b05      	ldr	r3, [pc, #20]	; (3430 <_timer_idle_enter+0x20>)
    341c:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    341e:	4b05      	ldr	r3, [pc, #20]	; (3434 <_timer_idle_enter+0x24>)
    3420:	681b      	ldr	r3, [r3, #0]
    3422:	f240 1247 	movw	r2, #327	; 0x147
    3426:	fb02 3000 	mla	r0, r2, r0, r3
    342a:	f7ff bfa3 	b.w	3374 <rtc_compare_set>
    342e:	bf00      	nop
    3430:	20000398 	.word	0x20000398
    3434:	2000039c 	.word	0x2000039c

00003438 <_timer_idle_exit>:
{
    3438:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    343a:	4b07      	ldr	r3, [pc, #28]	; (3458 <_timer_idle_exit+0x20>)
    343c:	2200      	movs	r2, #0
    343e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3442:	4b06      	ldr	r3, [pc, #24]	; (345c <_timer_idle_exit+0x24>)
    3444:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3448:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    344c:	f7ff ffaa 	bl	33a4 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    3450:	4b03      	ldr	r3, [pc, #12]	; (3460 <_timer_idle_exit+0x28>)
    3452:	2201      	movs	r2, #1
    3454:	601a      	str	r2, [r3, #0]
    3456:	bd08      	pop	{r3, pc}
    3458:	40011000 	.word	0x40011000
    345c:	e000e100 	.word	0xe000e100
    3460:	20000398 	.word	0x20000398

00003464 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    3464:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    3466:	4818      	ldr	r0, [pc, #96]	; (34c8 <_sys_clock_driver_init+0x64>)
    3468:	f01c fe26 	bl	200b8 <device_get_binding>
	if (!clock) {
    346c:	b348      	cbz	r0, 34c2 <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    346e:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    3470:	4d16      	ldr	r5, [pc, #88]	; (34cc <_sys_clock_driver_init+0x68>)
    3472:	681b      	ldr	r3, [r3, #0]
    3474:	2101      	movs	r1, #1
    3476:	4798      	blx	r3
	rtc_past = 0;
    3478:	4b15      	ldr	r3, [pc, #84]	; (34d0 <_sys_clock_driver_init+0x6c>)
    347a:	2400      	movs	r4, #0
    347c:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    347e:	4b15      	ldr	r3, [pc, #84]	; (34d4 <_sys_clock_driver_init+0x70>)
    3480:	2601      	movs	r6, #1
    3482:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    3484:	f240 1347 	movw	r3, #327	; 0x147
	SYS_CLOCK_RTC->PRESCALER = 0;
    3488:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    348c:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    3490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3494:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    3498:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    349c:	4b0e      	ldr	r3, [pc, #56]	; (34d8 <_sys_clock_driver_init+0x74>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    349e:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    34a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    34a6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    34aa:	4631      	mov	r1, r6
    34ac:	4622      	mov	r2, r4
    34ae:	2011      	movs	r0, #17
    34b0:	f7fd fe7e 	bl	11b0 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    34b4:	2011      	movs	r0, #17
    34b6:	f7fd fe49 	bl	114c <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    34ba:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    34bc:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    34be:	602e      	str	r6, [r5, #0]
	return 0;
    34c0:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    34c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    34c6:	bd70      	pop	{r4, r5, r6, pc}
    34c8:	00022478 	.word	0x00022478
    34cc:	40011000 	.word	0x40011000
    34d0:	2000039c 	.word	0x2000039c
    34d4:	20000398 	.word	0x20000398
    34d8:	e000e100 	.word	0xe000e100

000034dc <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    34dc:	b530      	push	{r4, r5, lr}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    34de:	4a0b      	ldr	r2, [pc, #44]	; (350c <_timer_cycle_get_32+0x30>)
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    34e0:	480b      	ldr	r0, [pc, #44]	; (3510 <_timer_cycle_get_32+0x34>)
	rtc_now = RTC_COUNTER;
    34e2:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
		sys_clock_tick_count = _sys_clock_tick_count;
    34e6:	e9d0 4500 	ldrd	r4, r5, [r0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    34ea:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    34ee:	4299      	cmp	r1, r3
    34f0:	d10a      	bne.n	3508 <_timer_cycle_get_32+0x2c>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    34f2:	4a08      	ldr	r2, [pc, #32]	; (3514 <_timer_cycle_get_32+0x38>)
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    34f4:	f240 1347 	movw	r3, #327	; 0x147
    34f8:	fb03 1314 	mls	r3, r3, r4, r1
	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    34fc:	6810      	ldr	r0, [r2, #0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    34fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	       elapsed_cycles;
}
    3502:	fb00 3004 	mla	r0, r0, r4, r3
    3506:	bd30      	pop	{r4, r5, pc}
    3508:	4619      	mov	r1, r3
    350a:	e7ec      	b.n	34e6 <_timer_cycle_get_32+0xa>
    350c:	40011000 	.word	0x40011000
    3510:	20005298 	.word	0x20005298
    3514:	2000eb24 	.word	0x2000eb24

00003518 <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    3518:	b530      	push	{r4, r5, lr}
    351a:	b085      	sub	sp, #20
    351c:	4604      	mov	r4, r0
    351e:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    3520:	4668      	mov	r0, sp
    3522:	2203      	movs	r2, #3
    3524:	f7fd f94a 	bl	7bc <memcpy>
	memset(res + 3, 0, 13);
    3528:	220d      	movs	r2, #13
    352a:	2100      	movs	r1, #0
    352c:	f10d 0003 	add.w	r0, sp, #3
    3530:	f7fd f970 	bl	814 <memset>

	err = bt_encrypt_le(irk, res, res);
    3534:	4620      	mov	r0, r4
    3536:	466a      	mov	r2, sp
    3538:	4669      	mov	r1, sp
    353a:	f008 fc2d 	bl	bd98 <bt_encrypt_le>
	if (err) {
    353e:	4604      	mov	r4, r0
    3540:	b920      	cbnz	r0, 354c <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    3542:	2203      	movs	r2, #3
    3544:	4669      	mov	r1, sp
    3546:	4628      	mov	r0, r5
    3548:	f7fd f938 	bl	7bc <memcpy>

	return 0;
}
    354c:	4620      	mov	r0, r4
    354e:	b005      	add	sp, #20
    3550:	bd30      	pop	{r4, r5, pc}

00003552 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    3552:	b513      	push	{r0, r1, r4, lr}
    3554:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    3556:	aa01      	add	r2, sp, #4
    3558:	3103      	adds	r1, #3
    355a:	f7ff ffdd 	bl	3518 <ah>
	if (err) {
    355e:	b948      	cbnz	r0, 3574 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    3560:	2203      	movs	r2, #3
    3562:	a901      	add	r1, sp, #4
    3564:	4620      	mov	r0, r4
    3566:	f7fd f8fc 	bl	762 <memcmp>
    356a:	fab0 f080 	clz	r0, r0
    356e:	0940      	lsrs	r0, r0, #5
}
    3570:	b002      	add	sp, #8
    3572:	bd10      	pop	{r4, pc}
		return false;
    3574:	2000      	movs	r0, #0
    3576:	e7fb      	b.n	3570 <bt_rpa_irk_matches+0x1e>

00003578 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    3578:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    357a:	1ccd      	adds	r5, r1, #3
{
    357c:	4606      	mov	r6, r0
    357e:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    3580:	4628      	mov	r0, r5
    3582:	2103      	movs	r1, #3
    3584:	f008 fbec 	bl	bd60 <bt_rand>
	if (err) {
    3588:	b960      	cbnz	r0, 35a4 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    358a:	7963      	ldrb	r3, [r4, #5]
    358c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3594:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    3596:	4622      	mov	r2, r4
    3598:	4629      	mov	r1, r5
    359a:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    359c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    35a0:	f7ff bfba 	b.w	3518 <ah>
}
    35a4:	bd70      	pop	{r4, r5, r6, pc}
	...

000035a8 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    35a8:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    35aa:	7802      	ldrb	r2, [r0, #0]
    35ac:	2a01      	cmp	r2, #1
{
    35ae:	4604      	mov	r4, r0
    35b0:	460b      	mov	r3, r1
	switch (src->type) {
    35b2:	d017      	beq.n	35e4 <uuid_to_uuid128+0x3c>
    35b4:	d303      	bcc.n	35be <uuid_to_uuid128+0x16>
    35b6:	2a02      	cmp	r2, #2
    35b8:	d02c      	beq.n	3614 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    35ba:	bcf0      	pop	{r4, r5, r6, r7}
    35bc:	4770      	bx	lr
		*dst = uuid128_base;
    35be:	4a18      	ldr	r2, [pc, #96]	; (3620 <uuid_to_uuid128+0x78>)
    35c0:	460d      	mov	r5, r1
    35c2:	f102 0710 	add.w	r7, r2, #16
    35c6:	6810      	ldr	r0, [r2, #0]
    35c8:	6851      	ldr	r1, [r2, #4]
    35ca:	462e      	mov	r6, r5
    35cc:	c603      	stmia	r6!, {r0, r1}
    35ce:	3208      	adds	r2, #8
    35d0:	42ba      	cmp	r2, r7
    35d2:	4635      	mov	r5, r6
    35d4:	d1f7      	bne.n	35c6 <uuid_to_uuid128+0x1e>
    35d6:	7812      	ldrb	r2, [r2, #0]
    35d8:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    35da:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    35dc:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    35de:	0a12      	lsrs	r2, r2, #8
    35e0:	739a      	strb	r2, [r3, #14]
    35e2:	e7ea      	b.n	35ba <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    35e4:	4a0e      	ldr	r2, [pc, #56]	; (3620 <uuid_to_uuid128+0x78>)
    35e6:	460d      	mov	r5, r1
    35e8:	f102 0710 	add.w	r7, r2, #16
    35ec:	6810      	ldr	r0, [r2, #0]
    35ee:	6851      	ldr	r1, [r2, #4]
    35f0:	462e      	mov	r6, r5
    35f2:	c603      	stmia	r6!, {r0, r1}
    35f4:	3208      	adds	r2, #8
    35f6:	42ba      	cmp	r2, r7
    35f8:	4635      	mov	r5, r6
    35fa:	d1f7      	bne.n	35ec <uuid_to_uuid128+0x44>
    35fc:	7812      	ldrb	r2, [r2, #0]
    35fe:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    3600:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    3602:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    3604:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    3608:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    360a:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    360c:	0a12      	lsrs	r2, r2, #8
    360e:	7399      	strb	r1, [r3, #14]
    3610:	741a      	strb	r2, [r3, #16]
    3612:	e7d2      	b.n	35ba <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    3614:	4601      	mov	r1, r0
    3616:	2211      	movs	r2, #17
    3618:	4618      	mov	r0, r3
}
    361a:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    361c:	f7fd b8ce 	b.w	7bc <memcpy>
    3620:	0002255e 	.word	0x0002255e

00003624 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    3624:	b510      	push	{r4, lr}
    3626:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    3628:	7801      	ldrb	r1, [r0, #0]
    362a:	7822      	ldrb	r2, [r4, #0]
    362c:	428a      	cmp	r2, r1
{
    362e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    3630:	d00e      	beq.n	3650 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    3632:	4669      	mov	r1, sp
    3634:	f7ff ffb8 	bl	35a8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    3638:	a905      	add	r1, sp, #20
    363a:	4620      	mov	r0, r4
    363c:	f7ff ffb4 	bl	35a8 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    3640:	2210      	movs	r2, #16
    3642:	f10d 0115 	add.w	r1, sp, #21
    3646:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    364a:	f7fd f88a 	bl	762 <memcmp>
    364e:	e00a      	b.n	3666 <bt_uuid_cmp+0x42>
	switch (u1->type) {
    3650:	2a01      	cmp	r2, #1
    3652:	d00a      	beq.n	366a <bt_uuid_cmp+0x46>
    3654:	d304      	bcc.n	3660 <bt_uuid_cmp+0x3c>
    3656:	2a02      	cmp	r2, #2
    3658:	d00a      	beq.n	3670 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    365a:	f06f 0015 	mvn.w	r0, #21
    365e:	e002      	b.n	3666 <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    3660:	8840      	ldrh	r0, [r0, #2]
    3662:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    3664:	1ac0      	subs	r0, r0, r3
}
    3666:	b00a      	add	sp, #40	; 0x28
    3668:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    366a:	6840      	ldr	r0, [r0, #4]
    366c:	6863      	ldr	r3, [r4, #4]
    366e:	e7f9      	b.n	3664 <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    3670:	2210      	movs	r2, #16
    3672:	1c61      	adds	r1, r4, #1
    3674:	3001      	adds	r0, #1
    3676:	e7e8      	b.n	364a <bt_uuid_cmp+0x26>

00003678 <valid_adv_param>:
	}
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3678:	7803      	ldrb	r3, [r0, #0]
    367a:	8842      	ldrh	r2, [r0, #2]
    367c:	f013 0301 	ands.w	r3, r3, #1
    3680:	d105      	bne.n	368e <valid_adv_param+0x16>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    3682:	4909      	ldr	r1, [pc, #36]	; (36a8 <valid_adv_param+0x30>)
    3684:	7b89      	ldrb	r1, [r1, #14]
    3686:	2908      	cmp	r1, #8
    3688:	d801      	bhi.n	368e <valid_adv_param+0x16>
    368a:	2a9f      	cmp	r2, #159	; 0x9f
    368c:	d90a      	bls.n	36a4 <valid_adv_param+0x2c>
		    param->interval_min < 0x00a0) {
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    368e:	8880      	ldrh	r0, [r0, #4]
    3690:	4282      	cmp	r2, r0
    3692:	d807      	bhi.n	36a4 <valid_adv_param+0x2c>
    3694:	2a1f      	cmp	r2, #31
    3696:	d905      	bls.n	36a4 <valid_adv_param+0x2c>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    3698:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    369c:	bf8c      	ite	hi
    369e:	2000      	movhi	r0, #0
    36a0:	2001      	movls	r0, #1
    36a2:	4770      	bx	lr
			return false;
    36a4:	2000      	movs	r0, #0
		return false;
	}

	return true;
}
    36a6:	4770      	bx	lr
    36a8:	2000de20 	.word	0x2000de20

000036ac <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    36ac:	2207      	movs	r2, #7
    36ae:	f7fd b885 	b.w	7bc <memcpy>

000036b2 <atomic_or>:
{
    36b2:	b500      	push	{lr}
}
    36b4:	f3bf 8f5b 	dmb	ish
    36b8:	e850 3f00 	ldrex	r3, [r0]
    36bc:	ea43 0201 	orr.w	r2, r3, r1
    36c0:	e840 2e00 	strex	lr, r2, [r0]
    36c4:	f1be 0f00 	cmp.w	lr, #0
    36c8:	d1f6      	bne.n	36b8 <atomic_or+0x6>
    36ca:	f3bf 8f5b 	dmb	ish
    36ce:	4618      	mov	r0, r3
    36d0:	f85d fb04 	ldr.w	pc, [sp], #4

000036d4 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    36d4:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    36d6:	f3bf 8f5b 	dmb	ish
    36da:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    36de:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    36e2:	f001 011f 	and.w	r1, r1, #31
    36e6:	4108      	asrs	r0, r1
}
    36e8:	f000 0001 	and.w	r0, r0, #1
    36ec:	4770      	bx	lr

000036ee <atomic_and>:
{
    36ee:	b500      	push	{lr}
}
    36f0:	f3bf 8f5b 	dmb	ish
    36f4:	e850 3f00 	ldrex	r3, [r0]
    36f8:	ea03 0201 	and.w	r2, r3, r1
    36fc:	e840 2e00 	strex	lr, r2, [r0]
    3700:	f1be 0f00 	cmp.w	lr, #0
    3704:	d1f6      	bne.n	36f4 <atomic_and+0x6>
    3706:	f3bf 8f5b 	dmb	ish
    370a:	4618      	mov	r0, r3
    370c:	f85d fb04 	ldr.w	pc, [sp], #4

00003710 <atomic_test_and_clear_bit>:
{
    3710:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    3712:	f001 031f 	and.w	r3, r1, #31
    3716:	2401      	movs	r4, #1
    3718:	409c      	lsls	r4, r3
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    371a:	094b      	lsrs	r3, r1, #5
    371c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    3720:	43e1      	mvns	r1, r4
    3722:	f7ff ffe4 	bl	36ee <atomic_and>
	return (old & mask) != 0;
    3726:	4204      	tst	r4, r0
}
    3728:	bf14      	ite	ne
    372a:	2001      	movne	r0, #1
    372c:	2000      	moveq	r0, #0
    372e:	bd10      	pop	{r4, pc}

00003730 <update_conn_param>:
	k_delayed_work_submit(&conn->le.update_work,
    3730:	78c3      	ldrb	r3, [r0, #3]
    3732:	2b00      	cmp	r3, #0
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    3734:	f241 3288 	movw	r2, #5000	; 0x1388
    3738:	f100 0174 	add.w	r1, r0, #116	; 0x74
    373c:	bf08      	it	eq
    373e:	2200      	moveq	r2, #0
    3740:	4801      	ldr	r0, [pc, #4]	; (3748 <update_conn_param+0x18>)
    3742:	f01d bd6b 	b.w	2121c <k_delayed_work_submit_to_queue>
    3746:	bf00      	nop
    3748:	200052a0 	.word	0x200052a0

0000374c <update_sec_level.part.12>:
static void update_sec_level(struct bt_conn *conn)
    374c:	b508      	push	{r3, lr}
    374e:	4602      	mov	r2, r0
	if (conn->le.keys && atomic_test_bit(conn->le.keys->flags,
    3750:	6f00      	ldr	r0, [r0, #112]	; 0x70
    3752:	b1a8      	cbz	r0, 3780 <update_sec_level.part.12+0x34>
    3754:	2100      	movs	r1, #0
    3756:	3008      	adds	r0, #8
    3758:	f7ff ffbc 	bl	36d4 <atomic_test_bit>
    375c:	b180      	cbz	r0, 3780 <update_sec_level.part.12+0x34>
		if (conn->le.keys->keys & BT_KEYS_LTK_P256) {
    375e:	6f13      	ldr	r3, [r2, #112]	; 0x70
    3760:	899b      	ldrh	r3, [r3, #12]
    3762:	069b      	lsls	r3, r3, #26
			conn->sec_level = BT_SECURITY_FIPS;
    3764:	bf4c      	ite	mi
    3766:	2304      	movmi	r3, #4
			conn->sec_level = BT_SECURITY_HIGH;
    3768:	2303      	movpl	r3, #3
		conn->sec_level = BT_SECURITY_MEDIUM;
    376a:	7213      	strb	r3, [r2, #8]
	if (conn->required_sec_level > conn->sec_level) {
    376c:	7a51      	ldrb	r1, [r2, #9]
    376e:	7a13      	ldrb	r3, [r2, #8]
    3770:	4299      	cmp	r1, r3
    3772:	d907      	bls.n	3784 <update_sec_level.part.12+0x38>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    3774:	2105      	movs	r1, #5
    3776:	4610      	mov	r0, r2
}
    3778:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    377c:	f002 be18 	b.w	63b0 <bt_conn_disconnect>
		conn->sec_level = BT_SECURITY_MEDIUM;
    3780:	2302      	movs	r3, #2
    3782:	e7f2      	b.n	376a <update_sec_level.part.12+0x1e>
    3784:	bd08      	pop	{r3, pc}
	...

00003788 <hci_cmd_done.isra.17>:
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    3788:	b570      	push	{r4, r5, r6, lr}
    378a:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    378c:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    378e:	460d      	mov	r5, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    3790:	f014 fabe 	bl	17d10 <net_buf_pool_get>
    3794:	4b0e      	ldr	r3, [pc, #56]	; (37d0 <hci_cmd_done.isra.17+0x48>)
    3796:	4283      	cmp	r3, r0
    3798:	d119      	bne.n	37ce <hci_cmd_done.isra.17+0x46>
	if (cmd(buf)->opcode != opcode) {
    379a:	4628      	mov	r0, r5
    379c:	f014 fabe 	bl	17d1c <net_buf_id>
	if (cmd(buf)->sync) {
    37a0:	4628      	mov	r0, r5
    37a2:	f014 fabb 	bl	17d1c <net_buf_id>
    37a6:	4c0b      	ldr	r4, [pc, #44]	; (37d4 <hci_cmd_done.isra.17+0x4c>)
    37a8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    37ac:	6843      	ldr	r3, [r0, #4]
    37ae:	b173      	cbz	r3, 37ce <hci_cmd_done.isra.17+0x46>
		cmd(buf)->status = status;
    37b0:	4628      	mov	r0, r5
    37b2:	f014 fab3 	bl	17d1c <net_buf_id>
    37b6:	f804 6030 	strb.w	r6, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    37ba:	4628      	mov	r0, r5
    37bc:	f014 faae 	bl	17d1c <net_buf_id>
    37c0:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
}
    37c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    37c8:	6840      	ldr	r0, [r0, #4]
    37ca:	f01d b983 	b.w	20ad4 <_impl_k_sem_give>
    37ce:	bd70      	pop	{r4, r5, r6, pc}
    37d0:	2000ed6c 	.word	0x2000ed6c
    37d4:	200003a4 	.word	0x200003a4

000037d8 <sys_put_le64>:
    37d8:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    37dc:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
    37de:	7053      	strb	r3, [r2, #1]
	sys_put_le16(val >> 16, &dst[2]);
    37e0:	0c00      	lsrs	r0, r0, #16
	dst[1] = val >> 8;
    37e2:	f3c1 2307 	ubfx	r3, r1, #8, #8
	dst[0] = val;
    37e6:	7111      	strb	r1, [r2, #4]
	sys_put_le16(val >> 16, &dst[2]);
    37e8:	0c09      	lsrs	r1, r1, #16
	dst[0] = val;
    37ea:	7090      	strb	r0, [r2, #2]
    37ec:	7191      	strb	r1, [r2, #6]
	dst[1] = val >> 8;
    37ee:	0a00      	lsrs	r0, r0, #8
    37f0:	0a09      	lsrs	r1, r1, #8
    37f2:	70d0      	strb	r0, [r2, #3]
    37f4:	7153      	strb	r3, [r2, #5]
    37f6:	71d1      	strb	r1, [r2, #7]
    37f8:	4770      	bx	lr
	...

000037fc <bt_hci_cmd_create>:
{
    37fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3800:	4680      	mov	r8, r0
    3802:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    3804:	4813      	ldr	r0, [pc, #76]	; (3854 <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    3806:	4d14      	ldr	r5, [pc, #80]	; (3858 <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    3808:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    380c:	f014 fb14 	bl	17e38 <net_buf_alloc_fixed>
    3810:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3812:	f100 0608 	add.w	r6, r0, #8
    3816:	2100      	movs	r1, #0
    3818:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    381a:	2700      	movs	r7, #0
    381c:	f014 fb2b 	bl	17e76 <net_buf_simple_reserve>
    3820:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    3822:	4620      	mov	r0, r4
    3824:	f014 fa7a 	bl	17d1c <net_buf_id>
    3828:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    382c:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    3830:	4620      	mov	r0, r4
    3832:	f014 fa73 	bl	17d1c <net_buf_id>
    3836:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    383a:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    383c:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    383e:	4630      	mov	r0, r6
    3840:	f014 fb88 	bl	17f54 <net_buf_simple_add>
	hdr->param_len = param_len;
    3844:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    3848:	f8a0 8000 	strh.w	r8, [r0]
}
    384c:	4620      	mov	r0, r4
    384e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3852:	bf00      	nop
    3854:	2000ed6c 	.word	0x2000ed6c
    3858:	200003a4 	.word	0x200003a4

0000385c <bt_hci_cmd_send_sync>:
{
    385c:	b570      	push	{r4, r5, r6, lr}
    385e:	4615      	mov	r5, r2
    3860:	b086      	sub	sp, #24
	if (!buf) {
    3862:	460c      	mov	r4, r1
    3864:	b919      	cbnz	r1, 386e <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    3866:	f7ff ffc9 	bl	37fc <bt_hci_cmd_create>
		if (!buf) {
    386a:	4604      	mov	r4, r0
    386c:	b368      	cbz	r0, 38ca <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    386e:	2201      	movs	r2, #1
    3870:	2100      	movs	r1, #0
    3872:	4668      	mov	r0, sp
    3874:	f01d f924 	bl	20ac0 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    3878:	4620      	mov	r0, r4
    387a:	f014 fa4f 	bl	17d1c <net_buf_id>
    387e:	4e14      	ldr	r6, [pc, #80]	; (38d0 <bt_hci_cmd_send_sync+0x74>)
    3880:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    3884:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    3888:	4620      	mov	r0, r4
    388a:	f014 fb33 	bl	17ef4 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    388e:	4621      	mov	r1, r4
    3890:	4810      	ldr	r0, [pc, #64]	; (38d4 <bt_hci_cmd_send_sync+0x78>)
    3892:	f014 faf4 	bl	17e7e <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    3896:	f242 7110 	movw	r1, #10000	; 0x2710
    389a:	4668      	mov	r0, sp
    389c:	f01d f97a 	bl	20b94 <_impl_k_sem_take>
	if (cmd(buf)->status) {
    38a0:	4620      	mov	r0, r4
    38a2:	f014 fa3b 	bl	17d1c <net_buf_id>
    38a6:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    38aa:	b130      	cbz	r0, 38ba <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    38ac:	4620      	mov	r0, r4
    38ae:	f014 faf3 	bl	17e98 <net_buf_unref>
		err = -EIO;
    38b2:	f06f 0004 	mvn.w	r0, #4
}
    38b6:	b006      	add	sp, #24
    38b8:	bd70      	pop	{r4, r5, r6, pc}
		if (rsp) {
    38ba:	b10d      	cbz	r5, 38c0 <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    38bc:	602c      	str	r4, [r5, #0]
    38be:	e7fa      	b.n	38b6 <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    38c0:	4620      	mov	r0, r4
    38c2:	f014 fae9 	bl	17e98 <net_buf_unref>
		err = 0;
    38c6:	4628      	mov	r0, r5
    38c8:	e7f5      	b.n	38b6 <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    38ca:	f06f 0036 	mvn.w	r0, #54	; 0x36
    38ce:	e7f2      	b.n	38b6 <bt_hci_cmd_send_sync+0x5a>
    38d0:	200003a4 	.word	0x200003a4
    38d4:	2000def4 	.word	0x2000def4

000038d8 <set_random_address>:
{
    38d8:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    38da:	4d15      	ldr	r5, [pc, #84]	; (3930 <set_random_address+0x58>)
    38dc:	2206      	movs	r2, #6
    38de:	f105 0108 	add.w	r1, r5, #8
    38e2:	4606      	mov	r6, r0
    38e4:	f7fc ff3d 	bl	762 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    38e8:	4604      	mov	r4, r0
    38ea:	b1d8      	cbz	r0, 3924 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    38ec:	2106      	movs	r1, #6
    38ee:	f242 0005 	movw	r0, #8197	; 0x2005
    38f2:	f7ff ff83 	bl	37fc <bt_hci_cmd_create>
	if (!buf) {
    38f6:	4604      	mov	r4, r0
    38f8:	b1b0      	cbz	r0, 3928 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    38fa:	2206      	movs	r2, #6
    38fc:	4631      	mov	r1, r6
    38fe:	3008      	adds	r0, #8
    3900:	f014 fb2e 	bl	17f60 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    3904:	4621      	mov	r1, r4
    3906:	2200      	movs	r2, #0
    3908:	f242 0005 	movw	r0, #8197	; 0x2005
    390c:	f7ff ffa6 	bl	385c <bt_hci_cmd_send_sync>
	if (err) {
    3910:	4604      	mov	r4, r0
    3912:	b938      	cbnz	r0, 3924 <set_random_address+0x4c>
	memcpy(dst, src, sizeof(*dst));
    3914:	2206      	movs	r2, #6
    3916:	4631      	mov	r1, r6
    3918:	f105 0008 	add.w	r0, r5, #8
    391c:	f7fc ff4e 	bl	7bc <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    3920:	2301      	movs	r3, #1
    3922:	71eb      	strb	r3, [r5, #7]
}
    3924:	4620      	mov	r0, r4
    3926:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    3928:	f06f 0436 	mvn.w	r4, #54	; 0x36
    392c:	e7fa      	b.n	3924 <set_random_address+0x4c>
    392e:	bf00      	nop
    3930:	2000de20 	.word	0x2000de20

00003934 <le_set_private_addr>:
{
    3934:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    3936:	2106      	movs	r1, #6
    3938:	4668      	mov	r0, sp
    393a:	f008 fa11 	bl	bd60 <bt_rand>
	if (err) {
    393e:	b940      	cbnz	r0, 3952 <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    3940:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    3944:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    3946:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    394a:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    394e:	f7ff ffc3 	bl	38d8 <set_random_address>
}
    3952:	b003      	add	sp, #12
    3954:	f85d fb04 	ldr.w	pc, [sp], #4

00003958 <hci_id_add>:
{
    3958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    395a:	4607      	mov	r7, r0
    395c:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    395e:	f242 0027 	movw	r0, #8231	; 0x2027
    3962:	2127      	movs	r1, #39	; 0x27
    3964:	f7ff ff4a 	bl	37fc <bt_hci_cmd_create>
	if (!buf) {
    3968:	4604      	mov	r4, r0
    396a:	b1d0      	cbz	r0, 39a2 <hci_id_add+0x4a>
	cp = net_buf_add(buf, sizeof(*cp));
    396c:	2127      	movs	r1, #39	; 0x27
    396e:	3008      	adds	r0, #8
    3970:	f014 faf0 	bl	17f54 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    3974:	4639      	mov	r1, r7
	cp = net_buf_add(buf, sizeof(*cp));
    3976:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    3978:	f7ff fe98 	bl	36ac <bt_addr_le_copy>
	memcpy(cp->peer_irk, val, 16);
    397c:	4631      	mov	r1, r6
    397e:	2210      	movs	r2, #16
    3980:	1de8      	adds	r0, r5, #7
    3982:	f7fc ff1b 	bl	7bc <memcpy>
	memset(cp->local_irk, 0, 16);
    3986:	2210      	movs	r2, #16
    3988:	2100      	movs	r1, #0
    398a:	f105 0017 	add.w	r0, r5, #23
    398e:	f7fc ff41 	bl	814 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    3992:	4621      	mov	r1, r4
    3994:	2200      	movs	r2, #0
    3996:	f242 0027 	movw	r0, #8231	; 0x2027
}
    399a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    399e:	f7ff bf5d 	b.w	385c <bt_hci_cmd_send_sync>
}
    39a2:	f06f 0036 	mvn.w	r0, #54	; 0x36
    39a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000039a8 <keys_add_id>:
	hci_id_add(&keys->addr, keys->irk.val);
    39a8:	f100 0130 	add.w	r1, r0, #48	; 0x30
    39ac:	f7ff bfd4 	b.w	3958 <hci_id_add>

000039b0 <addr_res_enable>:
{
    39b0:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
    39b2:	2101      	movs	r1, #1
{
    39b4:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
    39b6:	f242 002d 	movw	r0, #8237	; 0x202d
    39ba:	f7ff ff1f 	bl	37fc <bt_hci_cmd_create>
	if (!buf) {
    39be:	4604      	mov	r4, r0
    39c0:	b158      	cbz	r0, 39da <addr_res_enable+0x2a>
	net_buf_add_u8(buf, enable);
    39c2:	4629      	mov	r1, r5
    39c4:	3008      	adds	r0, #8
    39c6:	f014 fad4 	bl	17f72 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
    39ca:	4621      	mov	r1, r4
    39cc:	2200      	movs	r2, #0
    39ce:	f242 002d 	movw	r0, #8237	; 0x202d
}
    39d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
    39d6:	f7ff bf41 	b.w	385c <bt_hci_cmd_send_sync>
}
    39da:	f06f 0036 	mvn.w	r0, #54	; 0x36
    39de:	bd38      	pop	{r3, r4, r5, pc}

000039e0 <set_le_scan_enable>:
{
    39e0:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    39e2:	2102      	movs	r1, #2
{
    39e4:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    39e6:	f242 000c 	movw	r0, #8204	; 0x200c
    39ea:	f7ff ff07 	bl	37fc <bt_hci_cmd_create>
	if (!buf) {
    39ee:	4604      	mov	r4, r0
    39f0:	b328      	cbz	r0, 3a3e <set_le_scan_enable+0x5e>
	cp = net_buf_add(buf, sizeof(*cp));
    39f2:	2102      	movs	r1, #2
    39f4:	3008      	adds	r0, #8
    39f6:	f014 faad 	bl	17f54 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    39fa:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    39fc:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    39fe:	d115      	bne.n	3a2c <set_le_scan_enable+0x4c>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    3a00:	210a      	movs	r1, #10
    3a02:	4810      	ldr	r0, [pc, #64]	; (3a44 <set_le_scan_enable+0x64>)
    3a04:	f7ff fe66 	bl	36d4 <atomic_test_bit>
    3a08:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    3a0a:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    3a0c:	4621      	mov	r1, r4
    3a0e:	2200      	movs	r2, #0
    3a10:	f242 000c 	movw	r0, #8204	; 0x200c
    3a14:	f7ff ff22 	bl	385c <bt_hci_cmd_send_sync>
	if (err) {
    3a18:	4604      	mov	r4, r0
    3a1a:	b928      	cbnz	r0, 3a28 <set_le_scan_enable+0x48>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    3a1c:	2d01      	cmp	r5, #1
    3a1e:	d108      	bne.n	3a32 <set_le_scan_enable+0x52>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3a20:	2180      	movs	r1, #128	; 0x80
    3a22:	4808      	ldr	r0, [pc, #32]	; (3a44 <set_le_scan_enable+0x64>)
    3a24:	f7ff fe45 	bl	36b2 <atomic_or>
}
    3a28:	4620      	mov	r0, r4
    3a2a:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    3a2c:	2300      	movs	r3, #0
    3a2e:	7043      	strb	r3, [r0, #1]
    3a30:	e7eb      	b.n	3a0a <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3a32:	f06f 0180 	mvn.w	r1, #128	; 0x80
    3a36:	4803      	ldr	r0, [pc, #12]	; (3a44 <set_le_scan_enable+0x64>)
    3a38:	f7ff fe59 	bl	36ee <atomic_and>
    3a3c:	e7f4      	b.n	3a28 <set_le_scan_enable+0x48>
		return -ENOBUFS;
    3a3e:	f06f 0436 	mvn.w	r4, #54	; 0x36
    3a42:	e7f1      	b.n	3a28 <set_le_scan_enable+0x48>
    3a44:	2000de90 	.word	0x2000de90

00003a48 <set_advertise_enable>:
{
    3a48:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    3a4a:	2101      	movs	r1, #1
{
    3a4c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    3a4e:	f242 000a 	movw	r0, #8202	; 0x200a
    3a52:	f7ff fed3 	bl	37fc <bt_hci_cmd_create>
	if (!buf) {
    3a56:	4604      	mov	r4, r0
    3a58:	b1d8      	cbz	r0, 3a92 <set_advertise_enable+0x4a>
    3a5a:	3008      	adds	r0, #8
	if (enable) {
    3a5c:	b18d      	cbz	r5, 3a82 <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    3a5e:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    3a60:	f014 fa87 	bl	17f72 <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    3a64:	4621      	mov	r1, r4
    3a66:	2200      	movs	r2, #0
    3a68:	f242 000a 	movw	r0, #8202	; 0x200a
    3a6c:	f7ff fef6 	bl	385c <bt_hci_cmd_send_sync>
	if (err) {
    3a70:	4604      	mov	r4, r0
    3a72:	b920      	cbnz	r0, 3a7e <set_advertise_enable+0x36>
	if (enable) {
    3a74:	b13d      	cbz	r5, 3a86 <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3a76:	2120      	movs	r1, #32
    3a78:	4807      	ldr	r0, [pc, #28]	; (3a98 <set_advertise_enable+0x50>)
    3a7a:	f7ff fe1a 	bl	36b2 <atomic_or>
}
    3a7e:	4620      	mov	r0, r4
    3a80:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    3a82:	4629      	mov	r1, r5
    3a84:	e7ec      	b.n	3a60 <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3a86:	f06f 0120 	mvn.w	r1, #32
    3a8a:	4803      	ldr	r0, [pc, #12]	; (3a98 <set_advertise_enable+0x50>)
    3a8c:	f7ff fe2f 	bl	36ee <atomic_and>
    3a90:	e7f5      	b.n	3a7e <set_advertise_enable+0x36>
		return -ENOBUFS;
    3a92:	f06f 0436 	mvn.w	r4, #54	; 0x36
    3a96:	e7f2      	b.n	3a7e <set_advertise_enable+0x36>
    3a98:	2000de90 	.word	0x2000de90

00003a9c <set_ad>:

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    3a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3aa0:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    3aa2:	2120      	movs	r1, #32
{
    3aa4:	4607      	mov	r7, r0
    3aa6:	4690      	mov	r8, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    3aa8:	f7ff fea8 	bl	37fc <bt_hci_cmd_create>
	if (!buf) {
    3aac:	4606      	mov	r6, r0
    3aae:	2800      	cmp	r0, #0
    3ab0:	d03c      	beq.n	3b2c <set_ad+0x90>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    3ab2:	2120      	movs	r1, #32
    3ab4:	3008      	adds	r0, #8
    3ab6:	f014 fa4d 	bl	17f54 <net_buf_simple_add>

	memset(set_data, 0, sizeof(*set_data));
    3aba:	2220      	movs	r2, #32
    3abc:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    3abe:	4605      	mov	r5, r0
	memset(set_data, 0, sizeof(*set_data));
    3ac0:	f7fc fea8 	bl	814 <memset>

	for (i = 0; i < ad_len; i++) {
    3ac4:	f04f 0900 	mov.w	r9, #0
    3ac8:	45c1      	cmp	r9, r8
    3aca:	d106      	bne.n	3ada <set_ad+0x3e>
		memcpy(&set_data->data[set_data->len], ad[i].data,
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    3acc:	4631      	mov	r1, r6
    3ace:	4638      	mov	r0, r7
    3ad0:	2200      	movs	r2, #0
}
    3ad2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    3ad6:	f7ff bec1 	b.w	385c <bt_hci_cmd_send_sync>
		if (set_data->len + ad[i].data_len + 2 > 31) {
    3ada:	7862      	ldrb	r2, [r4, #1]
    3adc:	782b      	ldrb	r3, [r5, #0]
    3ade:	18d1      	adds	r1, r2, r3
    3ae0:	3102      	adds	r1, #2
    3ae2:	291f      	cmp	r1, #31
    3ae4:	f104 0408 	add.w	r4, r4, #8
    3ae8:	dd06      	ble.n	3af8 <set_ad+0x5c>
			net_buf_unref(buf);
    3aea:	4630      	mov	r0, r6
    3aec:	f014 f9d4 	bl	17e98 <net_buf_unref>
			return -EINVAL;
    3af0:	f06f 0015 	mvn.w	r0, #21
    3af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    3af8:	18e9      	adds	r1, r5, r3
    3afa:	1c50      	adds	r0, r2, #1
    3afc:	7048      	strb	r0, [r1, #1]
		set_data->data[set_data->len++] = ad[i].type;
    3afe:	1c98      	adds	r0, r3, #2
    3b00:	b2c0      	uxtb	r0, r0
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    3b02:	3301      	adds	r3, #1
		set_data->data[set_data->len++] = ad[i].type;
    3b04:	7028      	strb	r0, [r5, #0]
    3b06:	fa55 f383 	uxtab	r3, r5, r3
    3b0a:	f814 1c08 	ldrb.w	r1, [r4, #-8]
    3b0e:	7059      	strb	r1, [r3, #1]
		memcpy(&set_data->data[set_data->len], ad[i].data,
    3b10:	3001      	adds	r0, #1
    3b12:	f854 1c04 	ldr.w	r1, [r4, #-4]
    3b16:	4428      	add	r0, r5
    3b18:	f7fc fe50 	bl	7bc <memcpy>
		set_data->len += ad[i].data_len;
    3b1c:	782b      	ldrb	r3, [r5, #0]
    3b1e:	f814 2c07 	ldrb.w	r2, [r4, #-7]
    3b22:	4413      	add	r3, r2
    3b24:	702b      	strb	r3, [r5, #0]
	for (i = 0; i < ad_len; i++) {
    3b26:	f109 0901 	add.w	r9, r9, #1
    3b2a:	e7cd      	b.n	3ac8 <set_ad+0x2c>
		return -ENOBUFS;
    3b2c:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    3b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00003b34 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    3b34:	8802      	ldrh	r2, [r0, #0]
    3b36:	8843      	ldrh	r3, [r0, #2]
    3b38:	429a      	cmp	r2, r3
{
    3b3a:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    3b3c:	d818      	bhi.n	3b70 <bt_le_conn_params_valid+0x3c>
    3b3e:	2a05      	cmp	r2, #5
    3b40:	d916      	bls.n	3b70 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    3b42:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    3b46:	d813      	bhi.n	3b70 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    3b48:	8884      	ldrh	r4, [r0, #4]
    3b4a:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    3b4e:	d20f      	bcs.n	3b70 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    3b50:	88c1      	ldrh	r1, [r0, #6]
    3b52:	f1a1 020a 	sub.w	r2, r1, #10
    3b56:	b292      	uxth	r2, r2
    3b58:	f640 4076 	movw	r0, #3190	; 0xc76
    3b5c:	4282      	cmp	r2, r0
    3b5e:	d807      	bhi.n	3b70 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    3b60:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    3b64:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    3b68:	bfb4      	ite	lt
    3b6a:	2001      	movlt	r0, #1
    3b6c:	2000      	movge	r0, #0
    3b6e:	bd10      	pop	{r4, pc}
		return false;
    3b70:	2000      	movs	r0, #0
}
    3b72:	bd10      	pop	{r4, pc}

00003b74 <bt_id_add>:
{
    3b74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    3b78:	4c4c      	ldr	r4, [pc, #304]	; (3cac <bt_id_add+0x138>)
    3b7a:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
{
    3b7e:	4606      	mov	r6, r0
    3b80:	4625      	mov	r5, r4
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    3b82:	b11b      	cbz	r3, 3b8c <bt_id_add+0x18>
    3b84:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    3b88:	429a      	cmp	r2, r3
    3b8a:	d909      	bls.n	3ba0 <bt_id_add+0x2c>
		bt_dev.le.rl_entries++;
    3b8c:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
    3b90:	3301      	adds	r3, #1
    3b92:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
		return 0;
    3b96:	2400      	movs	r4, #0
}
    3b98:	4620      	mov	r0, r4
    3b9a:	b002      	add	sp, #8
    3b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    3ba0:	2102      	movs	r1, #2
    3ba2:	2000      	movs	r0, #0
    3ba4:	f002 faec 	bl	6180 <bt_conn_lookup_state_le>
	if (conn) {
    3ba8:	4680      	mov	r8, r0
    3baa:	b180      	cbz	r0, 3bce <bt_id_add+0x5a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3bac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    3bb0:	f104 0070 	add.w	r0, r4, #112	; 0x70
    3bb4:	f7ff fd7d 	bl	36b2 <atomic_or>
    3bb8:	2104      	movs	r1, #4
    3bba:	f106 0008 	add.w	r0, r6, #8
    3bbe:	f7ff fd78 	bl	36b2 <atomic_or>
		bt_conn_unref(conn);
    3bc2:	4640      	mov	r0, r8
    3bc4:	f002 fafe 	bl	61c4 <bt_conn_unref>
		return -EAGAIN;
    3bc8:	f06f 040a 	mvn.w	r4, #10
    3bcc:	e7e4      	b.n	3b98 <bt_id_add+0x24>
	adv_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING);
    3bce:	2105      	movs	r1, #5
    3bd0:	f104 0070 	add.w	r0, r4, #112	; 0x70
    3bd4:	f7ff fd7e 	bl	36d4 <atomic_test_bit>
	if (adv_enabled) {
    3bd8:	4607      	mov	r7, r0
    3bda:	b110      	cbz	r0, 3be2 <bt_id_add+0x6e>
		set_advertise_enable(false);
    3bdc:	4640      	mov	r0, r8
    3bde:	f7ff ff33 	bl	3a48 <set_advertise_enable>
	scan_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING);
    3be2:	2107      	movs	r1, #7
    3be4:	4832      	ldr	r0, [pc, #200]	; (3cb0 <bt_id_add+0x13c>)
    3be6:	f7ff fd75 	bl	36d4 <atomic_test_bit>
	if (scan_enabled) {
    3bea:	4680      	mov	r8, r0
    3bec:	b110      	cbz	r0, 3bf4 <bt_id_add+0x80>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    3bee:	2000      	movs	r0, #0
    3bf0:	f7ff fef6 	bl	39e0 <set_le_scan_enable>
	if (bt_dev.le.rl_entries) {
    3bf4:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
    3bf8:	b99b      	cbnz	r3, 3c22 <bt_id_add+0xae>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    3bfa:	f895 20a5 	ldrb.w	r2, [r5, #165]	; 0xa5
    3bfe:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    3c02:	429a      	cmp	r2, r3
    3c04:	d122      	bne.n	3c4c <bt_id_add+0xd8>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    3c06:	2200      	movs	r2, #0
    3c08:	4611      	mov	r1, r2
    3c0a:	f242 0029 	movw	r0, #8233	; 0x2029
    3c0e:	f7ff fe25 	bl	385c <bt_hci_cmd_send_sync>
		if (err) {
    3c12:	4604      	mov	r4, r0
    3c14:	b958      	cbnz	r0, 3c2e <bt_id_add+0xba>
		bt_dev.le.rl_entries++;
    3c16:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
    3c1a:	3301      	adds	r3, #1
    3c1c:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
    3c20:	e005      	b.n	3c2e <bt_id_add+0xba>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    3c22:	2000      	movs	r0, #0
    3c24:	f7ff fec4 	bl	39b0 <addr_res_enable>
		if (err) {
    3c28:	4604      	mov	r4, r0
    3c2a:	2800      	cmp	r0, #0
    3c2c:	d0e5      	beq.n	3bfa <bt_id_add+0x86>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    3c2e:	2001      	movs	r0, #1
    3c30:	f7ff febe 	bl	39b0 <addr_res_enable>
	if (scan_enabled) {
    3c34:	f1b8 0f00 	cmp.w	r8, #0
    3c38:	d002      	beq.n	3c40 <bt_id_add+0xcc>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    3c3a:	2001      	movs	r0, #1
    3c3c:	f7ff fed0 	bl	39e0 <set_le_scan_enable>
	if (adv_enabled) {
    3c40:	2f00      	cmp	r7, #0
    3c42:	d0a9      	beq.n	3b98 <bt_id_add+0x24>
		set_advertise_enable(true);
    3c44:	2001      	movs	r0, #1
    3c46:	f7ff feff 	bl	3a48 <set_advertise_enable>
    3c4a:	e7a5      	b.n	3b98 <bt_id_add+0x24>
	err = hci_id_add(&keys->addr, keys->irk.val);
    3c4c:	f106 0130 	add.w	r1, r6, #48	; 0x30
    3c50:	4630      	mov	r0, r6
    3c52:	f7ff fe81 	bl	3958 <hci_id_add>
	if (err) {
    3c56:	4604      	mov	r4, r0
    3c58:	2800      	cmp	r0, #0
    3c5a:	d1e8      	bne.n	3c2e <bt_id_add+0xba>
	bt_dev.le.rl_entries++;
    3c5c:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
    3c60:	3301      	adds	r3, #1
    3c62:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    3c66:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
    3c6a:	075b      	lsls	r3, r3, #29
    3c6c:	d5df      	bpl.n	3c2e <bt_id_add+0xba>
	bt_addr_le_copy(&cp.id_addr, addr);
    3c6e:	4631      	mov	r1, r6
    3c70:	4668      	mov	r0, sp
    3c72:	f7ff fd1b 	bl	36ac <bt_addr_le_copy>
	cp.mode = mode;
    3c76:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    3c78:	2108      	movs	r1, #8
    3c7a:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    3c7e:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    3c82:	f7ff fdbb 	bl	37fc <bt_hci_cmd_create>
	if (!buf) {
    3c86:	4605      	mov	r5, r0
    3c88:	b160      	cbz	r0, 3ca4 <bt_id_add+0x130>
	net_buf_add_mem(buf, &cp, sizeof(cp));
    3c8a:	2208      	movs	r2, #8
    3c8c:	4669      	mov	r1, sp
    3c8e:	4410      	add	r0, r2
    3c90:	f014 f966 	bl	17f60 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    3c94:	4622      	mov	r2, r4
    3c96:	4629      	mov	r1, r5
    3c98:	f242 004e 	movw	r0, #8270	; 0x204e
    3c9c:	f7ff fdde 	bl	385c <bt_hci_cmd_send_sync>
    3ca0:	4604      	mov	r4, r0
    3ca2:	e7c4      	b.n	3c2e <bt_id_add+0xba>
		return -ENOBUFS;
    3ca4:	f06f 0436 	mvn.w	r4, #54	; 0x36
    3ca8:	e7c1      	b.n	3c2e <bt_id_add+0xba>
    3caa:	bf00      	nop
    3cac:	2000de20 	.word	0x2000de20
    3cb0:	2000de90 	.word	0x2000de90

00003cb4 <bt_id_del>:
{
    3cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
    3cb8:	4d42      	ldr	r5, [pc, #264]	; (3dc4 <bt_id_del+0x110>)
    3cba:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
{
    3cbe:	4606      	mov	r6, r0
    3cc0:	462c      	mov	r4, r5
	if (!bt_dev.le.rl_size ||
    3cc2:	b123      	cbz	r3, 3cce <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    3cc4:	f895 20a5 	ldrb.w	r2, [r5, #165]	; 0xa5
    3cc8:	3301      	adds	r3, #1
	if (!bt_dev.le.rl_size ||
    3cca:	429a      	cmp	r2, r3
    3ccc:	dd08      	ble.n	3ce0 <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
    3cce:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    3cd2:	3b01      	subs	r3, #1
    3cd4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		return 0;
    3cd8:	2500      	movs	r5, #0
}
    3cda:	4628      	mov	r0, r5
    3cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    3ce0:	2102      	movs	r1, #2
    3ce2:	2000      	movs	r0, #0
    3ce4:	f002 fa4c 	bl	6180 <bt_conn_lookup_state_le>
	if (conn) {
    3ce8:	4680      	mov	r8, r0
    3cea:	b178      	cbz	r0, 3d0c <bt_id_del+0x58>
    3cec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    3cf0:	f105 0070 	add.w	r0, r5, #112	; 0x70
    3cf4:	f7ff fcdd 	bl	36b2 <atomic_or>
    3cf8:	2108      	movs	r1, #8
    3cfa:	1870      	adds	r0, r6, r1
    3cfc:	f7ff fcd9 	bl	36b2 <atomic_or>
		bt_conn_unref(conn);
    3d00:	4640      	mov	r0, r8
    3d02:	f002 fa5f 	bl	61c4 <bt_conn_unref>
		return -EAGAIN;
    3d06:	f06f 050a 	mvn.w	r5, #10
    3d0a:	e7e6      	b.n	3cda <bt_id_del+0x26>
	adv_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING);
    3d0c:	2105      	movs	r1, #5
    3d0e:	f105 0070 	add.w	r0, r5, #112	; 0x70
    3d12:	f7ff fcdf 	bl	36d4 <atomic_test_bit>
	if (adv_enabled) {
    3d16:	4607      	mov	r7, r0
    3d18:	b110      	cbz	r0, 3d20 <bt_id_del+0x6c>
		set_advertise_enable(false);
    3d1a:	4640      	mov	r0, r8
    3d1c:	f7ff fe94 	bl	3a48 <set_advertise_enable>
	scan_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING);
    3d20:	2107      	movs	r1, #7
    3d22:	4829      	ldr	r0, [pc, #164]	; (3dc8 <bt_id_del+0x114>)
    3d24:	f7ff fcd6 	bl	36d4 <atomic_test_bit>
	if (scan_enabled) {
    3d28:	4680      	mov	r8, r0
    3d2a:	b110      	cbz	r0, 3d32 <bt_id_del+0x7e>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    3d2c:	2000      	movs	r0, #0
    3d2e:	f7ff fe57 	bl	39e0 <set_le_scan_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    3d32:	2000      	movs	r0, #0
    3d34:	f7ff fe3c 	bl	39b0 <addr_res_enable>
	if (err) {
    3d38:	4605      	mov	r5, r0
    3d3a:	b980      	cbnz	r0, 3d5e <bt_id_del+0xaa>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    3d3c:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    3d40:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
    3d44:	429a      	cmp	r2, r3
    3d46:	d21c      	bcs.n	3d82 <bt_id_del+0xce>
		bt_dev.le.rl_entries--;
    3d48:	3b01      	subs	r3, #1
    3d4a:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		keys->keys &= ~BT_KEYS_IRK;
    3d4e:	89b3      	ldrh	r3, [r6, #12]
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id);
    3d50:	491e      	ldr	r1, [pc, #120]	; (3dcc <bt_id_del+0x118>)
		keys->keys &= ~BT_KEYS_IRK;
    3d52:	f023 0302 	bic.w	r3, r3, #2
    3d56:	81b3      	strh	r3, [r6, #12]
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id);
    3d58:	2002      	movs	r0, #2
    3d5a:	f006 ff49 	bl	abf0 <bt_keys_foreach>
	if (bt_dev.le.rl_entries) {
    3d5e:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    3d62:	b113      	cbz	r3, 3d6a <bt_id_del+0xb6>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    3d64:	2001      	movs	r0, #1
    3d66:	f7ff fe23 	bl	39b0 <addr_res_enable>
	if (scan_enabled) {
    3d6a:	f1b8 0f00 	cmp.w	r8, #0
    3d6e:	d002      	beq.n	3d76 <bt_id_del+0xc2>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    3d70:	2001      	movs	r0, #1
    3d72:	f7ff fe35 	bl	39e0 <set_le_scan_enable>
	if (adv_enabled) {
    3d76:	2f00      	cmp	r7, #0
    3d78:	d0af      	beq.n	3cda <bt_id_del+0x26>
		set_advertise_enable(true);
    3d7a:	2001      	movs	r0, #1
    3d7c:	f7ff fe64 	bl	3a48 <set_advertise_enable>
    3d80:	e7ab      	b.n	3cda <bt_id_del+0x26>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    3d82:	2107      	movs	r1, #7
    3d84:	f242 0028 	movw	r0, #8232	; 0x2028
    3d88:	f7ff fd38 	bl	37fc <bt_hci_cmd_create>
	if (!buf) {
    3d8c:	4681      	mov	r9, r0
    3d8e:	b1a8      	cbz	r0, 3dbc <bt_id_del+0x108>
	cp = net_buf_add(buf, sizeof(*cp));
    3d90:	2107      	movs	r1, #7
    3d92:	3008      	adds	r0, #8
    3d94:	f014 f8de 	bl	17f54 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, &keys->addr);
    3d98:	4631      	mov	r1, r6
    3d9a:	f7ff fc87 	bl	36ac <bt_addr_le_copy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    3d9e:	462a      	mov	r2, r5
    3da0:	4649      	mov	r1, r9
    3da2:	f242 0028 	movw	r0, #8232	; 0x2028
    3da6:	f7ff fd59 	bl	385c <bt_hci_cmd_send_sync>
	if (err) {
    3daa:	4605      	mov	r5, r0
    3dac:	2800      	cmp	r0, #0
    3dae:	d1d6      	bne.n	3d5e <bt_id_del+0xaa>
	bt_dev.le.rl_entries--;
    3db0:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    3db4:	3b01      	subs	r3, #1
    3db6:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
    3dba:	e7d0      	b.n	3d5e <bt_id_del+0xaa>
		err = -ENOBUFS;
    3dbc:	f06f 0536 	mvn.w	r5, #54	; 0x36
    3dc0:	e7cd      	b.n	3d5e <bt_id_del+0xaa>
    3dc2:	bf00      	nop
    3dc4:	2000de20 	.word	0x2000de20
    3dc8:	2000de90 	.word	0x2000de90
    3dcc:	000039a9 	.word	0x000039a9

00003dd0 <update_pending_id>:
{
    3dd0:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_and_clear_bit(keys->flags, BT_KEYS_ID_PENDING_ADD)) {
    3dd2:	f100 0508 	add.w	r5, r0, #8
{
    3dd6:	4604      	mov	r4, r0
	if (atomic_test_and_clear_bit(keys->flags, BT_KEYS_ID_PENDING_ADD)) {
    3dd8:	2102      	movs	r1, #2
    3dda:	4628      	mov	r0, r5
    3ddc:	f7ff fc98 	bl	3710 <atomic_test_and_clear_bit>
    3de0:	b120      	cbz	r0, 3dec <update_pending_id+0x1c>
		bt_id_add(keys);
    3de2:	4620      	mov	r0, r4
}
    3de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_id_add(keys);
    3de8:	f7ff bec4 	b.w	3b74 <bt_id_add>
	if (atomic_test_and_clear_bit(keys->flags, BT_KEYS_ID_PENDING_DEL)) {
    3dec:	2103      	movs	r1, #3
    3dee:	4628      	mov	r0, r5
    3df0:	f7ff fc8e 	bl	3710 <atomic_test_and_clear_bit>
    3df4:	b120      	cbz	r0, 3e00 <update_pending_id+0x30>
		bt_id_del(keys);
    3df6:	4620      	mov	r0, r4
}
    3df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_id_del(keys);
    3dfc:	f7ff bf5a 	b.w	3cb4 <bt_id_del>
    3e00:	bd38      	pop	{r3, r4, r5, pc}

00003e02 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    3e02:	2301      	movs	r3, #1
{
    3e04:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    3e06:	2106      	movs	r1, #6
{
    3e08:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    3e0a:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    3e0e:	f007 ffa7 	bl	bd60 <bt_rand>
	if (err) {
    3e12:	b918      	cbnz	r0, 3e1c <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    3e14:	79a3      	ldrb	r3, [r4, #6]
    3e16:	f063 033f 	orn	r3, r3, #63	; 0x3f
    3e1a:	71a3      	strb	r3, [r4, #6]
}
    3e1c:	bd10      	pop	{r4, pc}
	...

00003e20 <bt_send>:
	return bt_dev.drv->send(buf);
    3e20:	4b02      	ldr	r3, [pc, #8]	; (3e2c <bt_send+0xc>)
    3e22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3e26:	68db      	ldr	r3, [r3, #12]
    3e28:	4718      	bx	r3
    3e2a:	bf00      	nop
    3e2c:	2000de20 	.word	0x2000de20

00003e30 <bt_hci_cmd_send>:
{
    3e30:	b538      	push	{r3, r4, r5, lr}
    3e32:	4605      	mov	r5, r0
	if (!buf) {
    3e34:	460c      	mov	r4, r1
    3e36:	b919      	cbnz	r1, 3e40 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    3e38:	f7ff fce0 	bl	37fc <bt_hci_cmd_create>
		if (!buf) {
    3e3c:	4604      	mov	r4, r0
    3e3e:	b198      	cbz	r0, 3e68 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    3e40:	f640 4335 	movw	r3, #3125	; 0xc35
    3e44:	429d      	cmp	r5, r3
    3e46:	d109      	bne.n	3e5c <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
    3e48:	4620      	mov	r0, r4
    3e4a:	f7ff ffe9 	bl	3e20 <bt_send>
		if (err) {
    3e4e:	4605      	mov	r5, r0
    3e50:	b110      	cbz	r0, 3e58 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
    3e52:	4620      	mov	r0, r4
    3e54:	f014 f820 	bl	17e98 <net_buf_unref>
}
    3e58:	4628      	mov	r0, r5
    3e5a:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    3e5c:	4621      	mov	r1, r4
    3e5e:	4804      	ldr	r0, [pc, #16]	; (3e70 <bt_hci_cmd_send+0x40>)
    3e60:	f014 f80d 	bl	17e7e <net_buf_put>
	return 0;
    3e64:	2500      	movs	r5, #0
    3e66:	e7f7      	b.n	3e58 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
    3e68:	f06f 0536 	mvn.w	r5, #54	; 0x36
    3e6c:	e7f4      	b.n	3e58 <bt_hci_cmd_send+0x28>
    3e6e:	bf00      	nop
    3e70:	2000def4 	.word	0x2000def4

00003e74 <start_le_scan>:
{
    3e74:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3e76:	4605      	mov	r5, r0
    3e78:	460e      	mov	r6, r1
    3e7a:	4614      	mov	r4, r2
	memset(&set_param, 0, sizeof(set_param));
    3e7c:	2100      	movs	r1, #0
    3e7e:	2207      	movs	r2, #7
    3e80:	4668      	mov	r0, sp
    3e82:	f7fc fcc7 	bl	814 <memset>
		set_param.addr_type =  bt_dev.id_addr.type;
    3e86:	4821      	ldr	r0, [pc, #132]	; (3f0c <start_le_scan+0x98>)
	set_param.scan_type = scan_type;
    3e88:	f88d 5000 	strb.w	r5, [sp]
	set_param.filter_policy = 0x00;
    3e8c:	2300      	movs	r3, #0
    3e8e:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    3e92:	2d01      	cmp	r5, #1
		set_param.addr_type =  bt_dev.id_addr.type;
    3e94:	7803      	ldrb	r3, [r0, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    3e96:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    3e9a:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr.type;
    3e9e:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    3ea2:	d10a      	bne.n	3eba <start_le_scan+0x46>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    3ea4:	2105      	movs	r1, #5
    3ea6:	3070      	adds	r0, #112	; 0x70
    3ea8:	f7ff fc14 	bl	36d4 <atomic_test_bit>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    3eac:	b928      	cbnz	r0, 3eba <start_le_scan+0x46>
			err = le_set_private_addr();
    3eae:	f7ff fd41 	bl	3934 <le_set_private_addr>
			if (err) {
    3eb2:	4604      	mov	r4, r0
    3eb4:	b9f0      	cbnz	r0, 3ef4 <start_le_scan+0x80>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    3eb6:	f88d 5005 	strb.w	r5, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    3eba:	2107      	movs	r1, #7
    3ebc:	f242 000b 	movw	r0, #8203	; 0x200b
    3ec0:	f7ff fc9c 	bl	37fc <bt_hci_cmd_create>
	if (!buf) {
    3ec4:	4604      	mov	r4, r0
    3ec6:	b1f0      	cbz	r0, 3f06 <start_le_scan+0x92>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    3ec8:	2207      	movs	r2, #7
    3eca:	4669      	mov	r1, sp
    3ecc:	3008      	adds	r0, #8
    3ece:	f014 f847 	bl	17f60 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    3ed2:	4621      	mov	r1, r4
    3ed4:	f242 000b 	movw	r0, #8203	; 0x200b
    3ed8:	f7ff ffaa 	bl	3e30 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    3edc:	2001      	movs	r0, #1
    3ede:	f7ff fd7f 	bl	39e0 <set_le_scan_enable>
	if (err) {
    3ee2:	4604      	mov	r4, r0
    3ee4:	b930      	cbnz	r0, 3ef4 <start_le_scan+0x80>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    3ee6:	2d01      	cmp	r5, #1
    3ee8:	d107      	bne.n	3efa <start_le_scan+0x86>
    3eea:	f44f 7100 	mov.w	r1, #512	; 0x200
    3eee:	4808      	ldr	r0, [pc, #32]	; (3f10 <start_le_scan+0x9c>)
    3ef0:	f7ff fbdf 	bl	36b2 <atomic_or>
}
    3ef4:	4620      	mov	r0, r4
    3ef6:	b002      	add	sp, #8
    3ef8:	bd70      	pop	{r4, r5, r6, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3efa:	f46f 7100 	mvn.w	r1, #512	; 0x200
    3efe:	4804      	ldr	r0, [pc, #16]	; (3f10 <start_le_scan+0x9c>)
    3f00:	f7ff fbf5 	bl	36ee <atomic_and>
    3f04:	e7f6      	b.n	3ef4 <start_le_scan+0x80>
		return -ENOBUFS;
    3f06:	f06f 0436 	mvn.w	r4, #54	; 0x36
    3f0a:	e7f3      	b.n	3ef4 <start_le_scan+0x80>
    3f0c:	2000de20 	.word	0x2000de20
    3f10:	2000de90 	.word	0x2000de90

00003f14 <bt_le_scan_update>:
{
    3f14:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3f16:	2108      	movs	r1, #8
{
    3f18:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3f1a:	4816      	ldr	r0, [pc, #88]	; (3f74 <bt_le_scan_update+0x60>)
    3f1c:	f7ff fbda 	bl	36d4 <atomic_test_bit>
    3f20:	4602      	mov	r2, r0
    3f22:	b108      	cbz	r0, 3f28 <bt_le_scan_update+0x14>
		return 0;
    3f24:	2000      	movs	r0, #0
    3f26:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    3f28:	2107      	movs	r1, #7
    3f2a:	4812      	ldr	r0, [pc, #72]	; (3f74 <bt_le_scan_update+0x60>)
    3f2c:	f7ff fbd2 	bl	36d4 <atomic_test_bit>
    3f30:	b9d0      	cbnz	r0, 3f68 <bt_le_scan_update+0x54>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    3f32:	2101      	movs	r1, #1
    3f34:	2000      	movs	r0, #0
    3f36:	f002 f923 	bl	6180 <bt_conn_lookup_state_le>
		if (!conn) {
    3f3a:	4604      	mov	r4, r0
    3f3c:	2800      	cmp	r0, #0
    3f3e:	d0f1      	beq.n	3f24 <bt_le_scan_update+0x10>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3f40:	f44f 6180 	mov.w	r1, #1024	; 0x400
    3f44:	480b      	ldr	r0, [pc, #44]	; (3f74 <bt_le_scan_update+0x60>)
    3f46:	f7ff fbb4 	bl	36b2 <atomic_or>
		bt_conn_unref(conn);
    3f4a:	4620      	mov	r0, r4
    3f4c:	f002 f93a 	bl	61c4 <bt_conn_unref>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    3f50:	2d00      	cmp	r5, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    3f52:	bf15      	itete	ne
    3f54:	2230      	movne	r2, #48	; 0x30
    3f56:	2212      	moveq	r2, #18
    3f58:	2160      	movne	r1, #96	; 0x60
    3f5a:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    3f5e:	2000      	movs	r0, #0
}
    3f60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    3f64:	f7ff bf86 	b.w	3e74 <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    3f68:	4610      	mov	r0, r2
    3f6a:	f7ff fd39 	bl	39e0 <set_le_scan_enable>
		if (err) {
    3f6e:	2800      	cmp	r0, #0
    3f70:	d0df      	beq.n	3f32 <bt_le_scan_update+0x1e>
    3f72:	bd38      	pop	{r3, r4, r5, pc}
    3f74:	2000de90 	.word	0x2000de90

00003f78 <bt_init>:
{
    3f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f7c:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    3f7e:	aa04      	add	r2, sp, #16
    3f80:	2100      	movs	r1, #0
    3f82:	f640 4003 	movw	r0, #3075	; 0xc03
    3f86:	f7ff fc69 	bl	385c <bt_hci_cmd_send_sync>
	if (err) {
    3f8a:	4604      	mov	r4, r0
    3f8c:	2800      	cmp	r0, #0
    3f8e:	f040 81cb 	bne.w	4328 <bt_init+0x3b0>
	u8_t status = buf->data[0];
    3f92:	9b04      	ldr	r3, [sp, #16]
    3f94:	689b      	ldr	r3, [r3, #8]
	if (status) {
    3f96:	781b      	ldrb	r3, [r3, #0]
    3f98:	b96b      	cbnz	r3, 3fb6 <bt_init+0x3e>
	scan_dev_found_cb = NULL;
    3f9a:	4ac3      	ldr	r2, [pc, #780]	; (42a8 <bt_init+0x330>)
    3f9c:	6013      	str	r3, [r2, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3f9e:	4bc3      	ldr	r3, [pc, #780]	; (42ac <bt_init+0x334>)
    3fa0:	f3bf 8f5b 	dmb	ish
    3fa4:	2201      	movs	r2, #1
    3fa6:	e853 1f00 	ldrex	r1, [r3]
    3faa:	e843 2000 	strex	r0, r2, [r3]
    3fae:	2800      	cmp	r0, #0
    3fb0:	d1f9      	bne.n	3fa6 <bt_init+0x2e>
    3fb2:	f3bf 8f5b 	dmb	ish
	net_buf_unref(rsp);
    3fb6:	9804      	ldr	r0, [sp, #16]
    3fb8:	f013 ff6e 	bl	17e98 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    3fbc:	aa04      	add	r2, sp, #16
    3fbe:	2100      	movs	r1, #0
    3fc0:	f241 0003 	movw	r0, #4099	; 0x1003
    3fc4:	f7ff fc4a 	bl	385c <bt_hci_cmd_send_sync>
	if (err) {
    3fc8:	4604      	mov	r4, r0
    3fca:	2800      	cmp	r0, #0
    3fcc:	f040 81ac 	bne.w	4328 <bt_init+0x3b0>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    3fd0:	9b04      	ldr	r3, [sp, #16]
    3fd2:	4db7      	ldr	r5, [pc, #732]	; (42b0 <bt_init+0x338>)
    3fd4:	6899      	ldr	r1, [r3, #8]
    3fd6:	2208      	movs	r2, #8
    3fd8:	3101      	adds	r1, #1
    3fda:	f105 0016 	add.w	r0, r5, #22
    3fde:	f7fc fbed 	bl	7bc <memcpy>
	net_buf_unref(rsp);
    3fe2:	9804      	ldr	r0, [sp, #16]
    3fe4:	f013 ff58 	bl	17e98 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    3fe8:	4621      	mov	r1, r4
    3fea:	aa04      	add	r2, sp, #16
    3fec:	f241 0001 	movw	r0, #4097	; 0x1001
    3ff0:	f7ff fc34 	bl	385c <bt_hci_cmd_send_sync>
	if (err) {
    3ff4:	4604      	mov	r4, r0
    3ff6:	2800      	cmp	r0, #0
    3ff8:	f040 8196 	bne.w	4328 <bt_init+0x3b0>
	read_local_ver_complete(rsp);
    3ffc:	9804      	ldr	r0, [sp, #16]
    3ffe:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    4000:	785a      	ldrb	r2, [r3, #1]
    4002:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    4004:	78d9      	ldrb	r1, [r3, #3]
    4006:	789a      	ldrb	r2, [r3, #2]
    4008:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    400c:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    400e:	791a      	ldrb	r2, [r3, #4]
    4010:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    4012:	7a19      	ldrb	r1, [r3, #8]
    4014:	79da      	ldrb	r2, [r3, #7]
    4016:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    401a:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    401c:	795a      	ldrb	r2, [r3, #5]
    401e:	799b      	ldrb	r3, [r3, #6]
    4020:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    4024:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    4026:	f013 ff37 	bl	17e98 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    402a:	4621      	mov	r1, r4
    402c:	aa04      	add	r2, sp, #16
    402e:	f241 0009 	movw	r0, #4105	; 0x1009
    4032:	f7ff fc13 	bl	385c <bt_hci_cmd_send_sync>
	if (err) {
    4036:	4604      	mov	r4, r0
    4038:	2800      	cmp	r0, #0
    403a:	f040 8175 	bne.w	4328 <bt_init+0x3b0>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    403e:	9b04      	ldr	r3, [sp, #16]
    4040:	6899      	ldr	r1, [r3, #8]
    4042:	2206      	movs	r2, #6
    4044:	3101      	adds	r1, #1
    4046:	1c68      	adds	r0, r5, #1
    4048:	f7fc fbb8 	bl	7bc <memcpy>
	net_buf_unref(rsp);
    404c:	9804      	ldr	r0, [sp, #16]
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    404e:	702c      	strb	r4, [r5, #0]
	net_buf_unref(rsp);
    4050:	f013 ff22 	bl	17e98 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    4054:	4621      	mov	r1, r4
    4056:	aa04      	add	r2, sp, #16
    4058:	f241 0002 	movw	r0, #4098	; 0x1002
    405c:	f7ff fbfe 	bl	385c <bt_hci_cmd_send_sync>
	if (err) {
    4060:	4604      	mov	r4, r0
    4062:	2800      	cmp	r0, #0
    4064:	f040 8160 	bne.w	4328 <bt_init+0x3b0>
	memcpy(bt_dev.supported_commands, rp->commands,
    4068:	9b04      	ldr	r3, [sp, #16]
    406a:	6899      	ldr	r1, [r3, #8]
    406c:	2240      	movs	r2, #64	; 0x40
    406e:	3101      	adds	r1, #1
    4070:	f105 001e 	add.w	r0, r5, #30
    4074:	f7fc fba2 	bl	7bc <memcpy>
	net_buf_unref(rsp);
    4078:	9804      	ldr	r0, [sp, #16]
    407a:	f013 ff0d 	bl	17e98 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    407e:	7eab      	ldrb	r3, [r5, #26]
    4080:	065e      	lsls	r6, r3, #25
    4082:	f140 81db 	bpl.w	443c <bt_init+0x4c4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    4086:	4621      	mov	r1, r4
    4088:	aa04      	add	r2, sp, #16
    408a:	f242 0003 	movw	r0, #8195	; 0x2003
    408e:	f7ff fbe5 	bl	385c <bt_hci_cmd_send_sync>
	if (err) {
    4092:	4604      	mov	r4, r0
    4094:	2800      	cmp	r0, #0
    4096:	f040 8147 	bne.w	4328 <bt_init+0x3b0>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    409a:	9b04      	ldr	r3, [sp, #16]
    409c:	6899      	ldr	r1, [r3, #8]
    409e:	2208      	movs	r2, #8
    40a0:	3101      	adds	r1, #1
    40a2:	f105 0078 	add.w	r0, r5, #120	; 0x78
    40a6:	f7fc fb89 	bl	7bc <memcpy>
	net_buf_unref(rsp);
    40aa:	9804      	ldr	r0, [sp, #16]
    40ac:	f013 fef4 	bl	17e98 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    40b0:	4621      	mov	r1, r4
    40b2:	aa04      	add	r2, sp, #16
    40b4:	f242 0002 	movw	r0, #8194	; 0x2002
    40b8:	f7ff fbd0 	bl	385c <bt_hci_cmd_send_sync>
	if (err) {
    40bc:	4604      	mov	r4, r0
    40be:	2800      	cmp	r0, #0
    40c0:	f040 8132 	bne.w	4328 <bt_init+0x3b0>
    40c4:	9b04      	ldr	r3, [sp, #16]
    40c6:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    40c8:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    40cc:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    40d0:	b142      	cbz	r2, 40e4 <bt_init+0x16c>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    40d2:	78da      	ldrb	r2, [r3, #3]
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    40d4:	2a02      	cmp	r2, #2
    40d6:	bf28      	it	cs
    40d8:	2202      	movcs	r2, #2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    40da:	4611      	mov	r1, r2
    40dc:	f105 008c 	add.w	r0, r5, #140	; 0x8c
    40e0:	f01c fcee 	bl	20ac0 <_impl_k_sem_init>
	net_buf_unref(rsp);
    40e4:	9804      	ldr	r0, [sp, #16]
    40e6:	f013 fed7 	bl	17e98 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    40ea:	7eac      	ldrb	r4, [r5, #26]
    40ec:	f014 0420 	ands.w	r4, r4, #32
    40f0:	f000 80ff 	beq.w	42f2 <bt_init+0x37a>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    40f4:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    40f8:	071c      	lsls	r4, r3, #28
    40fa:	d514      	bpl.n	4126 <bt_init+0x1ae>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    40fc:	aa04      	add	r2, sp, #16
    40fe:	2100      	movs	r1, #0
    4100:	f242 001c 	movw	r0, #8220	; 0x201c
    4104:	f7ff fbaa 	bl	385c <bt_hci_cmd_send_sync>
		if (err) {
    4108:	4604      	mov	r4, r0
    410a:	2800      	cmp	r0, #0
    410c:	f040 810c 	bne.w	4328 <bt_init+0x3b0>
		le_read_supp_states_complete(rsp);
    4110:	9804      	ldr	r0, [sp, #16]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    4112:	6883      	ldr	r3, [r0, #8]
    4114:	f853 2f01 	ldr.w	r2, [r3, #1]!
    4118:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    411a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    411e:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    4122:	f013 feb9 	bl	17e98 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    4126:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    412a:	0698      	lsls	r0, r3, #26
    412c:	f100 8100 	bmi.w	4330 <bt_init+0x3b8>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    4130:	2108      	movs	r1, #8
    4132:	f242 0001 	movw	r0, #8193	; 0x2001
    4136:	f7ff fb61 	bl	37fc <bt_hci_cmd_create>
	if (!buf) {
    413a:	4604      	mov	r4, r0
    413c:	2800      	cmp	r0, #0
    413e:	f000 80df 	beq.w	4300 <bt_init+0x388>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    4142:	2108      	movs	r1, #8
    4144:	4408      	add	r0, r1
    4146:	f013 ff05 	bl	17f54 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    414a:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    414e:	f895 6079 	ldrb.w	r6, [r5, #121]	; 0x79
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    4152:	0799      	lsls	r1, r3, #30
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    4154:	4602      	mov	r2, r0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    4156:	bf4c      	ite	mi
    4158:	202f      	movmi	r0, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    415a:	200f      	movpl	r0, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    415c:	069f      	lsls	r7, r3, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    415e:	bf48      	it	mi
    4160:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    4164:	f016 0f09 	tst.w	r6, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    4168:	bf18      	it	ne
    416a:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    416e:	07de      	lsls	r6, r3, #31
	if ((bt_dev.supported_commands[34] & 0x02) &&
    4170:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    4174:	f003 0306 	and.w	r3, r3, #6
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    4178:	bf48      	it	mi
    417a:	f040 0010 	orrmi.w	r0, r0, #16
	if ((bt_dev.supported_commands[34] & 0x02) &&
    417e:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    4180:	bf08      	it	eq
    4182:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    4186:	2100      	movs	r1, #0
	sys_put_le64(mask, cp_mask->events);
    4188:	f7ff fb26 	bl	37d8 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    418c:	4621      	mov	r1, r4
    418e:	2200      	movs	r2, #0
    4190:	f242 0001 	movw	r0, #8193	; 0x2001
    4194:	f7ff fb62 	bl	385c <bt_hci_cmd_send_sync>
	if (err) {
    4198:	4604      	mov	r4, r0
    419a:	2800      	cmp	r0, #0
    419c:	f040 80c4 	bne.w	4328 <bt_init+0x3b0>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    41a0:	7eab      	ldrb	r3, [r5, #26]
    41a2:	0698      	lsls	r0, r3, #26
    41a4:	d421      	bmi.n	41ea <bt_init+0x272>
	if (bt_dev.le.mtu) {
    41a6:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
    41aa:	b9f1      	cbnz	r1, 41ea <bt_init+0x272>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    41ac:	aa04      	add	r2, sp, #16
    41ae:	f241 0005 	movw	r0, #4101	; 0x1005
    41b2:	f7ff fb53 	bl	385c <bt_hci_cmd_send_sync>
	if (err) {
    41b6:	4604      	mov	r4, r0
    41b8:	2800      	cmp	r0, #0
    41ba:	f040 80b5 	bne.w	4328 <bt_init+0x3b0>
	if (bt_dev.le.mtu) {
    41be:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    41c2:	b97b      	cbnz	r3, 41e4 <bt_init+0x26c>
    41c4:	9b04      	ldr	r3, [sp, #16]
    41c6:	483b      	ldr	r0, [pc, #236]	; (42b4 <bt_init+0x33c>)
    41c8:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    41ca:	7899      	ldrb	r1, [r3, #2]
    41cc:	785a      	ldrb	r2, [r3, #1]
    41ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    41d2:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    41d6:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    41d8:	2a02      	cmp	r2, #2
    41da:	bf28      	it	cs
    41dc:	2202      	movcs	r2, #2
    41de:	4611      	mov	r1, r2
    41e0:	f01c fc6e 	bl	20ac0 <_impl_k_sem_init>
	net_buf_unref(rsp);
    41e4:	9804      	ldr	r0, [sp, #16]
    41e6:	f013 fe57 	bl	17e98 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    41ea:	2108      	movs	r1, #8
    41ec:	f640 4001 	movw	r0, #3073	; 0xc01
    41f0:	f7ff fb04 	bl	37fc <bt_hci_cmd_create>
	if (!buf) {
    41f4:	4604      	mov	r4, r0
    41f6:	2800      	cmp	r0, #0
    41f8:	f000 8082 	beq.w	4300 <bt_init+0x388>
	ev = net_buf_add(buf, sizeof(*ev));
    41fc:	2108      	movs	r1, #8
    41fe:	4408      	add	r0, r1
    4200:	f013 fea8 	bl	17f54 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    4204:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    4208:	07d9      	lsls	r1, r3, #31
	ev = net_buf_add(buf, sizeof(*ev));
    420a:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    420c:	f140 80bb 	bpl.w	4386 <bt_init+0x40e>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    4210:	a123      	add	r1, pc, #140	; (adr r1, 42a0 <bt_init+0x328>)
    4212:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    4216:	f7ff fadf 	bl	37d8 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    421a:	4621      	mov	r1, r4
    421c:	2200      	movs	r2, #0
    421e:	f640 4001 	movw	r0, #3073	; 0xc01
    4222:	f7ff fb1b 	bl	385c <bt_hci_cmd_send_sync>
	if (err) {
    4226:	4604      	mov	r4, r0
    4228:	2800      	cmp	r0, #0
    422a:	d17d      	bne.n	4328 <bt_init+0x3b0>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    422c:	4601      	mov	r1, r0
    422e:	aa04      	add	r2, sp, #16
    4230:	f64f 4001 	movw	r0, #64513	; 0xfc01
    4234:	f7ff fb12 	bl	385c <bt_hci_cmd_send_sync>
	if (err) {
    4238:	4604      	mov	r4, r0
    423a:	bb28      	cbnz	r0, 4288 <bt_init+0x310>
	net_buf_unref(rsp);
    423c:	9804      	ldr	r0, [sp, #16]
    423e:	f013 fe2b 	bl	17e98 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    4242:	4621      	mov	r1, r4
    4244:	aa04      	add	r2, sp, #16
    4246:	f64f 4002 	movw	r0, #64514	; 0xfc02
    424a:	f7ff fb07 	bl	385c <bt_hci_cmd_send_sync>
	if (err) {
    424e:	4604      	mov	r4, r0
    4250:	b9d0      	cbnz	r0, 4288 <bt_init+0x310>
	rp.cmds = (void *)rsp->data;
    4252:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    4254:	4818      	ldr	r0, [pc, #96]	; (42b8 <bt_init+0x340>)
    4256:	6899      	ldr	r1, [r3, #8]
    4258:	2202      	movs	r2, #2
    425a:	3101      	adds	r1, #1
    425c:	f7fc faae 	bl	7bc <memcpy>
	net_buf_unref(rsp);
    4260:	9804      	ldr	r0, [sp, #16]
    4262:	f013 fe19 	bl	17e98 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    4266:	aa04      	add	r2, sp, #16
    4268:	4621      	mov	r1, r4
    426a:	f64f 4003 	movw	r0, #64515	; 0xfc03
    426e:	f7ff faf5 	bl	385c <bt_hci_cmd_send_sync>
	if (err) {
    4272:	b948      	cbnz	r0, 4288 <bt_init+0x310>
	rp.feat = (void *)rsp->data;
    4274:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    4276:	4811      	ldr	r0, [pc, #68]	; (42bc <bt_init+0x344>)
    4278:	6899      	ldr	r1, [r3, #8]
    427a:	2201      	movs	r2, #1
    427c:	4411      	add	r1, r2
    427e:	f7fc fa9d 	bl	7bc <memcpy>
	net_buf_unref(rsp);
    4282:	9804      	ldr	r0, [sp, #16]
    4284:	f013 fe08 	bl	17e98 <net_buf_unref>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    4288:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    428a:	2207      	movs	r2, #7
    428c:	a904      	add	r1, sp, #16
    428e:	4808      	ldr	r0, [pc, #32]	; (42b0 <bt_init+0x338>)
    4290:	9304      	str	r3, [sp, #16]
    4292:	f8cd 3013 	str.w	r3, [sp, #19]
    4296:	f7fc fa64 	bl	762 <memcmp>
    429a:	e011      	b.n	42c0 <bt_init+0x348>
    429c:	f3af 8000 	nop.w
    42a0:	02008890 	.word	0x02008890
    42a4:	20008000 	.word	0x20008000
    42a8:	20000404 	.word	0x20000404
    42ac:	2000de90 	.word	0x2000de90
    42b0:	2000de20 	.word	0x2000de20
    42b4:	2000deac 	.word	0x2000deac
    42b8:	2000de7f 	.word	0x2000de7f
    42bc:	2000de7e 	.word	0x2000de7e
    42c0:	2800      	cmp	r0, #0
    42c2:	d164      	bne.n	438e <bt_init+0x416>
	if (bt_storage) {
    42c4:	4e5f      	ldr	r6, [pc, #380]	; (4444 <bt_init+0x4cc>)
    42c6:	6833      	ldr	r3, [r6, #0]
    42c8:	2b00      	cmp	r3, #0
    42ca:	d17d      	bne.n	43c8 <bt_init+0x450>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    42cc:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    42d0:	07db      	lsls	r3, r3, #31
    42d2:	f100 8095 	bmi.w	4400 <bt_init+0x488>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    42d6:	485c      	ldr	r0, [pc, #368]	; (4448 <bt_init+0x4d0>)
    42d8:	f7ff fd93 	bl	3e02 <bt_addr_le_create_static>
	if (err) {
    42dc:	4604      	mov	r4, r0
    42de:	bb18      	cbnz	r0, 4328 <bt_init+0x3b0>
	if (bt_storage) {
    42e0:	6833      	ldr	r3, [r6, #0]
    42e2:	2b00      	cmp	r3, #0
    42e4:	d079      	beq.n	43da <bt_init+0x462>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    42e6:	685e      	ldr	r6, [r3, #4]
    42e8:	4a57      	ldr	r2, [pc, #348]	; (4448 <bt_init+0x4d0>)
    42ea:	2307      	movs	r3, #7
    42ec:	4601      	mov	r1, r0
    42ee:	47b0      	blx	r6
    42f0:	e073      	b.n	43da <bt_init+0x462>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    42f2:	2102      	movs	r1, #2
    42f4:	f640 406d 	movw	r0, #3181	; 0xc6d
    42f8:	f7ff fa80 	bl	37fc <bt_hci_cmd_create>
		if (!buf) {
    42fc:	4606      	mov	r6, r0
    42fe:	b910      	cbnz	r0, 4306 <bt_init+0x38e>
		return -ENOBUFS;
    4300:	f06f 0436 	mvn.w	r4, #54	; 0x36
    4304:	e010      	b.n	4328 <bt_init+0x3b0>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    4306:	2102      	movs	r1, #2
    4308:	3008      	adds	r0, #8
    430a:	f013 fe23 	bl	17f54 <net_buf_simple_add>
		cp_le->le = 0x01;
    430e:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    4310:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    4312:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    4314:	4622      	mov	r2, r4
    4316:	4631      	mov	r1, r6
    4318:	f640 406d 	movw	r0, #3181	; 0xc6d
    431c:	f7ff fa9e 	bl	385c <bt_hci_cmd_send_sync>
		if (err) {
    4320:	4604      	mov	r4, r0
    4322:	2800      	cmp	r0, #0
    4324:	f43f aee6 	beq.w	40f4 <bt_init+0x17c>
}
    4328:	4620      	mov	r0, r4
    432a:	b006      	add	sp, #24
    432c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    4330:	aa04      	add	r2, sp, #16
    4332:	2100      	movs	r1, #0
    4334:	f242 002f 	movw	r0, #8239	; 0x202f
    4338:	f7ff fa90 	bl	385c <bt_hci_cmd_send_sync>
		if (err) {
    433c:	4604      	mov	r4, r0
    433e:	2800      	cmp	r0, #0
    4340:	d1f2      	bne.n	4328 <bt_init+0x3b0>
		rp = (void *)rsp->data;
    4342:	9804      	ldr	r0, [sp, #16]
    4344:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    4346:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    434a:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
    434e:	f013 fda3 	bl	17e98 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    4352:	2104      	movs	r1, #4
    4354:	f242 0024 	movw	r0, #8228	; 0x2024
    4358:	f7ff fa50 	bl	37fc <bt_hci_cmd_create>
		if (!buf) {
    435c:	4606      	mov	r6, r0
    435e:	2800      	cmp	r0, #0
    4360:	d0ce      	beq.n	4300 <bt_init+0x388>
		cp = net_buf_add(buf, sizeof(*cp));
    4362:	2104      	movs	r1, #4
    4364:	3008      	adds	r0, #8
    4366:	f013 fdf5 	bl	17f54 <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    436a:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    436c:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    4370:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    4372:	4631      	mov	r1, r6
    4374:	f242 0024 	movw	r0, #8228	; 0x2024
    4378:	f7ff fa70 	bl	385c <bt_hci_cmd_send_sync>
		if (err) {
    437c:	4604      	mov	r4, r0
    437e:	2800      	cmp	r0, #0
    4380:	f43f aed6 	beq.w	4130 <bt_init+0x1b8>
    4384:	e7d0      	b.n	4328 <bt_init+0x3b0>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    4386:	4831      	ldr	r0, [pc, #196]	; (444c <bt_init+0x4d4>)
    4388:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    438c:	e743      	b.n	4216 <bt_init+0x29e>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    438e:	4b30      	ldr	r3, [pc, #192]	; (4450 <bt_init+0x4d8>)
    4390:	6818      	ldr	r0, [r3, #0]
    4392:	889a      	ldrh	r2, [r3, #4]
    4394:	9002      	str	r0, [sp, #8]
    4396:	799b      	ldrb	r3, [r3, #6]
    4398:	f8ad 200c 	strh.w	r2, [sp, #12]
    439c:	a902      	add	r1, sp, #8
    439e:	2207      	movs	r2, #7
    43a0:	4829      	ldr	r0, [pc, #164]	; (4448 <bt_init+0x4d0>)
    43a2:	f88d 300e 	strb.w	r3, [sp, #14]
    43a6:	f7fc f9dc 	bl	762 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    43aa:	2800      	cmp	r0, #0
    43ac:	d08a      	beq.n	42c4 <bt_init+0x34c>
		err = bt_conn_init();
    43ae:	f002 f95d 	bl	666c <bt_conn_init>
		if (err) {
    43b2:	4604      	mov	r4, r0
    43b4:	2800      	cmp	r0, #0
    43b6:	d1b7      	bne.n	4328 <bt_init+0x3b0>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    43b8:	2102      	movs	r1, #2
    43ba:	4826      	ldr	r0, [pc, #152]	; (4454 <bt_init+0x4dc>)
    43bc:	f7ff f979 	bl	36b2 <atomic_or>
	bt_le_scan_update(false);
    43c0:	4620      	mov	r0, r4
    43c2:	f7ff fda7 	bl	3f14 <bt_le_scan_update>
    43c6:	e7af      	b.n	4328 <bt_init+0x3b0>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    43c8:	2100      	movs	r1, #0
    43ca:	681c      	ldr	r4, [r3, #0]
    43cc:	4a1e      	ldr	r2, [pc, #120]	; (4448 <bt_init+0x4d0>)
    43ce:	2307      	movs	r3, #7
    43d0:	4608      	mov	r0, r1
    43d2:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    43d4:	2807      	cmp	r0, #7
    43d6:	f47f af79 	bne.w	42cc <bt_init+0x354>
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    43da:	782b      	ldrb	r3, [r5, #0]
    43dc:	2b01      	cmp	r3, #1
    43de:	d12a      	bne.n	4436 <bt_init+0x4be>
    43e0:	79ab      	ldrb	r3, [r5, #6]
    43e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    43e6:	2bc0      	cmp	r3, #192	; 0xc0
    43e8:	d125      	bne.n	4436 <bt_init+0x4be>
	err = set_random_address(&bt_dev.id_addr.a);
    43ea:	481b      	ldr	r0, [pc, #108]	; (4458 <bt_init+0x4e0>)
    43ec:	f7ff fa74 	bl	38d8 <set_random_address>
	if (err) {
    43f0:	4604      	mov	r4, r0
    43f2:	2800      	cmp	r0, #0
    43f4:	d198      	bne.n	4328 <bt_init+0x3b0>
    43f6:	2104      	movs	r1, #4
    43f8:	4816      	ldr	r0, [pc, #88]	; (4454 <bt_init+0x4dc>)
    43fa:	f7ff f95a 	bl	36b2 <atomic_or>
    43fe:	e7d6      	b.n	43ae <bt_init+0x436>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    4400:	aa01      	add	r2, sp, #4
    4402:	2100      	movs	r1, #0
    4404:	f64f 4009 	movw	r0, #64521	; 0xfc09
    4408:	f7ff fa28 	bl	385c <bt_hci_cmd_send_sync>
		if (err) {
    440c:	2800      	cmp	r0, #0
    440e:	f47f af62 	bne.w	42d6 <bt_init+0x35e>
		rp = (void *)rsp->data;
    4412:	9801      	ldr	r0, [sp, #4]
    4414:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    4416:	784b      	ldrb	r3, [r1, #1]
    4418:	b153      	cbz	r3, 4430 <bt_init+0x4b8>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    441a:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    441c:	2206      	movs	r2, #6
    441e:	3102      	adds	r1, #2
    4420:	480d      	ldr	r0, [pc, #52]	; (4458 <bt_init+0x4e0>)
    4422:	702b      	strb	r3, [r5, #0]
    4424:	f7fc f9ca 	bl	7bc <memcpy>
			net_buf_unref(rsp);
    4428:	9801      	ldr	r0, [sp, #4]
    442a:	f013 fd35 	bl	17e98 <net_buf_unref>
    442e:	e7d4      	b.n	43da <bt_init+0x462>
		net_buf_unref(rsp);
    4430:	f013 fd32 	bl	17e98 <net_buf_unref>
    4434:	e74f      	b.n	42d6 <bt_init+0x35e>
		return -EINVAL;
    4436:	f06f 0415 	mvn.w	r4, #21
    443a:	e775      	b.n	4328 <bt_init+0x3b0>
		return -ENODEV;
    443c:	f06f 0412 	mvn.w	r4, #18
    4440:	e772      	b.n	4328 <bt_init+0x3b0>
    4442:	bf00      	nop
    4444:	20003abc 	.word	0x20003abc
    4448:	2000de20 	.word	0x2000de20
    444c:	02008810 	.word	0x02008810
    4450:	0002188c 	.word	0x0002188c
    4454:	2000de90 	.word	0x2000de90
    4458:	2000de21 	.word	0x2000de21

0000445c <init_work>:
{
    445c:	b510      	push	{r4, lr}
	err = bt_init();
    445e:	f7ff fd8b 	bl	3f78 <bt_init>
	if (ready_cb) {
    4462:	4b03      	ldr	r3, [pc, #12]	; (4470 <init_work+0x14>)
    4464:	681b      	ldr	r3, [r3, #0]
    4466:	b113      	cbz	r3, 446e <init_work+0x12>
}
    4468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    446c:	4718      	bx	r3
    446e:	bd10      	pop	{r4, pc}
    4470:	20000400 	.word	0x20000400

00004474 <check_pending_conn.part.29>:
static void check_pending_conn(const bt_addr_le_t *id_addr,
    4474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4478:	460d      	mov	r5, r1
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    447a:	2101      	movs	r1, #1
    447c:	f001 fe80 	bl	6180 <bt_conn_lookup_state_le>
	if (!conn) {
    4480:	4604      	mov	r4, r0
    4482:	2800      	cmp	r0, #0
    4484:	d068      	beq.n	4558 <check_pending_conn.part.29+0xe4>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    4486:	2107      	movs	r1, #7
    4488:	4834      	ldr	r0, [pc, #208]	; (455c <check_pending_conn.part.29+0xe8>)
    448a:	f7ff f923 	bl	36d4 <atomic_test_bit>
    448e:	2800      	cmp	r0, #0
    4490:	d14f      	bne.n	4532 <check_pending_conn.part.29+0xbe>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    4492:	2102      	movs	r1, #2
    4494:	4831      	ldr	r0, [pc, #196]	; (455c <check_pending_conn.part.29+0xe8>)
    4496:	f7ff f91d 	bl	36d4 <atomic_test_bit>
    449a:	b110      	cbz	r0, 44a2 <check_pending_conn.part.29+0x2e>
			set_random_address(&bt_dev.id_addr.a);
    449c:	4830      	ldr	r0, [pc, #192]	; (4560 <check_pending_conn.part.29+0xec>)
    449e:	f7ff fa1b 	bl	38d8 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    44a2:	4930      	ldr	r1, [pc, #192]	; (4564 <check_pending_conn.part.29+0xf0>)
    44a4:	f104 004f 	add.w	r0, r4, #79	; 0x4f
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    44a8:	f104 0856 	add.w	r8, r4, #86	; 0x56
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    44ac:	f7ff f8fe 	bl	36ac <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    44b0:	4629      	mov	r1, r5
    44b2:	4640      	mov	r0, r8
    44b4:	f7ff f8fa 	bl	36ac <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    44b8:	2119      	movs	r1, #25
    44ba:	f242 000d 	movw	r0, #8205	; 0x200d
    44be:	f7ff f99d 	bl	37fc <bt_hci_cmd_create>
	if (!buf) {
    44c2:	4606      	mov	r6, r0
    44c4:	b3d0      	cbz	r0, 453c <check_pending_conn.part.29+0xc8>
	cp = net_buf_add(buf, sizeof(*cp));
    44c6:	2119      	movs	r1, #25
    44c8:	3008      	adds	r0, #8
    44ca:	f013 fd43 	bl	17f54 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    44ce:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    44d0:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    44d2:	2100      	movs	r1, #0
    44d4:	f7fc f99e 	bl	814 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    44d8:	2700      	movs	r7, #0
    44da:	2360      	movs	r3, #96	; 0x60
    44dc:	702b      	strb	r3, [r5, #0]
	cp->scan_window = cp->scan_interval;
    44de:	70ab      	strb	r3, [r5, #2]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    44e0:	4641      	mov	r1, r8
    44e2:	1d68      	adds	r0, r5, #5
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    44e4:	706f      	strb	r7, [r5, #1]
	cp->scan_window = cp->scan_interval;
    44e6:	70ef      	strb	r7, [r5, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    44e8:	f7ff f8e0 	bl	36ac <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    44ec:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
    44f0:	732b      	strb	r3, [r5, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    44f2:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    44f6:	f8a5 300d 	strh.w	r3, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    44fa:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    44fe:	f8a5 300f 	strh.w	r3, [r5, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    4502:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    4506:	f8a5 3011 	strh.w	r3, [r5, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    450a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    450e:	f8a5 3013 	strh.w	r3, [r5, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    4512:	463a      	mov	r2, r7
    4514:	4631      	mov	r1, r6
    4516:	f242 000d 	movw	r0, #8205	; 0x200d
    451a:	f7ff f99f 	bl	385c <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    451e:	b968      	cbnz	r0, 453c <check_pending_conn.part.29+0xc8>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    4520:	4620      	mov	r0, r4
    4522:	2102      	movs	r1, #2
    4524:	f001 fd36 	bl	5f94 <bt_conn_set_state>
	bt_conn_unref(conn);
    4528:	4620      	mov	r0, r4
}
    452a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_conn_unref(conn);
    452e:	f001 be49 	b.w	61c4 <bt_conn_unref>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    4532:	2000      	movs	r0, #0
    4534:	f7ff fa54 	bl	39e0 <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    4538:	2800      	cmp	r0, #0
    453a:	d0aa      	beq.n	4492 <check_pending_conn.part.29+0x1e>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    453c:	231f      	movs	r3, #31
    453e:	72e3      	strb	r3, [r4, #11]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4540:	4620      	mov	r0, r4
    4542:	2100      	movs	r1, #0
    4544:	f001 fd26 	bl	5f94 <bt_conn_set_state>
	bt_conn_unref(conn);
    4548:	4620      	mov	r0, r4
    454a:	f001 fe3b 	bl	61c4 <bt_conn_unref>
	bt_le_scan_update(false);
    454e:	2000      	movs	r0, #0
}
    4550:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_le_scan_update(false);
    4554:	f7ff bcde 	b.w	3f14 <bt_le_scan_update>
    4558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    455c:	2000de90 	.word	0x2000de90
    4560:	2000de21 	.word	0x2000de21
    4564:	2000de20 	.word	0x2000de20

00004568 <hci_le_set_phy.isra.31>:
static int hci_le_set_phy(struct bt_conn *conn)
    4568:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    456a:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    456c:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    456e:	f242 0032 	movw	r0, #8242	; 0x2032
    4572:	f7ff f943 	bl	37fc <bt_hci_cmd_create>
	if (!buf) {
    4576:	4605      	mov	r5, r0
    4578:	b198      	cbz	r0, 45a2 <hci_le_set_phy.isra.31+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    457a:	2107      	movs	r1, #7
    457c:	3008      	adds	r0, #8
    457e:	f013 fce9 	bl	17f54 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    4582:	8823      	ldrh	r3, [r4, #0]
    4584:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    4586:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    4588:	2302      	movs	r3, #2
	cp->all_phys = 0;
    458a:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    458c:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    458e:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    4590:	7144      	strb	r4, [r0, #5]
    4592:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    4594:	4629      	mov	r1, r5
    4596:	f242 0032 	movw	r0, #8242	; 0x2032
    459a:	f7ff fc49 	bl	3e30 <bt_hci_cmd_send>
	return 0;
    459e:	4620      	mov	r0, r4
    45a0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    45a2:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    45a6:	bd38      	pop	{r3, r4, r5, pc}

000045a8 <hci_le_set_data_len.isra.32>:
static int hci_le_set_data_len(struct bt_conn *conn)
    45a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    45aa:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    45ac:	aa01      	add	r2, sp, #4
    45ae:	2100      	movs	r1, #0
    45b0:	f242 002f 	movw	r0, #8239	; 0x202f
    45b4:	f7ff f952 	bl	385c <bt_hci_cmd_send_sync>
	if (err) {
    45b8:	b9d8      	cbnz	r0, 45f2 <hci_le_set_data_len.isra.32+0x4a>
	rp = (void *)rsp->data;
    45ba:	9801      	ldr	r0, [sp, #4]
    45bc:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    45be:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    45c2:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    45c6:	f013 fc67 	bl	17e98 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    45ca:	2106      	movs	r1, #6
    45cc:	f242 0022 	movw	r0, #8226	; 0x2022
    45d0:	f7ff f914 	bl	37fc <bt_hci_cmd_create>
	if (!buf) {
    45d4:	4604      	mov	r4, r0
    45d6:	b170      	cbz	r0, 45f6 <hci_le_set_data_len.isra.32+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    45d8:	2106      	movs	r1, #6
    45da:	3008      	adds	r0, #8
    45dc:	f013 fcba 	bl	17f54 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    45e0:	883b      	ldrh	r3, [r7, #0]
    45e2:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    45e4:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    45e6:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    45e8:	4621      	mov	r1, r4
    45ea:	f242 0022 	movw	r0, #8226	; 0x2022
    45ee:	f7ff fc1f 	bl	3e30 <bt_hci_cmd_send>
}
    45f2:	b003      	add	sp, #12
    45f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    45f6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    45fa:	e7fa      	b.n	45f2 <hci_le_set_data_len.isra.32+0x4a>

000045fc <le_enh_conn_complete>:
{
    45fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    45fe:	210c      	movs	r1, #12
{
    4600:	b085      	sub	sp, #20
    4602:	4605      	mov	r5, r0
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4604:	f8b0 6001 	ldrh.w	r6, [r0, #1]
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    4608:	4862      	ldr	r0, [pc, #392]	; (4794 <le_enh_conn_complete+0x198>)
    460a:	f7ff f881 	bl	3710 <atomic_test_and_clear_bit>
    460e:	b118      	cbz	r0, 4618 <le_enh_conn_complete+0x1c>
		bt_keys_foreach(BT_KEYS_IRK, update_pending_id);
    4610:	4961      	ldr	r1, [pc, #388]	; (4798 <le_enh_conn_complete+0x19c>)
    4612:	2002      	movs	r0, #2
    4614:	f006 faec 	bl	abf0 <bt_keys_foreach>
	if (evt->status) {
    4618:	782b      	ldrb	r3, [r5, #0]
    461a:	b17b      	cbz	r3, 463c <le_enh_conn_complete+0x40>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    461c:	2102      	movs	r1, #2
    461e:	2000      	movs	r0, #0
    4620:	f001 fdae 	bl	6180 <bt_conn_lookup_state_le>
		if (!conn) {
    4624:	4604      	mov	r4, r0
    4626:	b138      	cbz	r0, 4638 <le_enh_conn_complete+0x3c>
		conn->err = evt->status;
    4628:	782b      	ldrb	r3, [r5, #0]
    462a:	72c3      	strb	r3, [r0, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    462c:	2100      	movs	r1, #0
    462e:	f001 fcb1 	bl	5f94 <bt_conn_set_state>
		bt_conn_unref(conn);
    4632:	4620      	mov	r0, r4
    4634:	f001 fdc6 	bl	61c4 <bt_conn_unref>
}
    4638:	b005      	add	sp, #20
    463a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    463c:	1d2c      	adds	r4, r5, #4
    463e:	4621      	mov	r1, r4
    4640:	a802      	add	r0, sp, #8
    4642:	f7ff f833 	bl	36ac <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    4646:	f89d 3008 	ldrb.w	r3, [sp, #8]
    464a:	3b02      	subs	r3, #2
    464c:	b2db      	uxtb	r3, r3
    464e:	2b01      	cmp	r3, #1
    4650:	d87d      	bhi.n	474e <le_enh_conn_complete+0x152>
    4652:	2206      	movs	r2, #6
    4654:	f105 0111 	add.w	r1, r5, #17
    4658:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    465c:	f88d 3008 	strb.w	r3, [sp, #8]
    4660:	f7fc f8ac 	bl	7bc <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    4664:	2301      	movs	r3, #1
    4666:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    466a:	2102      	movs	r1, #2
    466c:	a802      	add	r0, sp, #8
    466e:	f001 fd87 	bl	6180 <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    4672:	78eb      	ldrb	r3, [r5, #3]
    4674:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    4676:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    4678:	d109      	bne.n	468e <le_enh_conn_complete+0x92>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    467a:	f06f 0120 	mvn.w	r1, #32
    467e:	4845      	ldr	r0, [pc, #276]	; (4794 <le_enh_conn_complete+0x198>)
    4680:	f7ff f835 	bl	36ee <atomic_and>
		if (!conn) {
    4684:	b92c      	cbnz	r4, 4692 <le_enh_conn_complete+0x96>
			conn = bt_conn_add_le(&id_addr);
    4686:	a802      	add	r0, sp, #8
    4688:	f001 fc4a 	bl	5f20 <bt_conn_add_le>
    468c:	4604      	mov	r4, r0
	if (!conn) {
    468e:	2c00      	cmp	r4, #0
    4690:	d0d2      	beq.n	4638 <le_enh_conn_complete+0x3c>
	conn->handle   = handle;
    4692:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    4694:	a902      	add	r1, sp, #8
	conn->handle   = handle;
    4696:	f820 6b48 	strh.w	r6, [r0], #72
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    469a:	f7ff f807 	bl	36ac <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    469e:	7e2a      	ldrb	r2, [r5, #24]
    46a0:	7deb      	ldrb	r3, [r5, #23]
    46a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    46a6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    46aa:	7eaa      	ldrb	r2, [r5, #26]
    46ac:	7e6b      	ldrb	r3, [r5, #25]
    46ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    46b2:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    46b6:	7eeb      	ldrb	r3, [r5, #27]
    46b8:	7f2a      	ldrb	r2, [r5, #28]
    46ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    46be:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->role = evt->role;
    46c2:	78ee      	ldrb	r6, [r5, #3]
    46c4:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    46c6:	2e01      	cmp	r6, #1
    46c8:	d11a      	bne.n	4700 <le_enh_conn_complete+0x104>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    46ca:	4f34      	ldr	r7, [pc, #208]	; (479c <le_enh_conn_complete+0x1a0>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    46cc:	4669      	mov	r1, sp
    46ce:	f104 004f 	add.w	r0, r4, #79	; 0x4f
    46d2:	f7fe ffeb 	bl	36ac <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    46d6:	4639      	mov	r1, r7
    46d8:	f104 0056 	add.w	r0, r4, #86	; 0x56
    46dc:	f7fe ffe6 	bl	36ac <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    46e0:	2106      	movs	r1, #6
    46e2:	f107 0070 	add.w	r0, r7, #112	; 0x70
    46e6:	f7fe fff5 	bl	36d4 <atomic_test_bit>
    46ea:	b148      	cbz	r0, 4700 <le_enh_conn_complete+0x104>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    46ec:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    46f0:	2200      	movs	r2, #0
    46f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    46f6:	4313      	orrs	r3, r2
    46f8:	d002      	beq.n	4700 <le_enh_conn_complete+0x104>
			set_advertise_enable(true);
    46fa:	4630      	mov	r0, r6
    46fc:	f7ff f9a4 	bl	3a48 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    4700:	2103      	movs	r1, #3
    4702:	4620      	mov	r0, r4
    4704:	f001 fc46 	bl	5f94 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    4708:	7b23      	ldrb	r3, [r4, #12]
    470a:	2b03      	cmp	r3, #3
    470c:	d118      	bne.n	4740 <le_enh_conn_complete+0x144>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    470e:	78eb      	ldrb	r3, [r5, #3]
    4710:	b123      	cbz	r3, 471c <le_enh_conn_complete+0x120>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    4712:	4b22      	ldr	r3, [pc, #136]	; (479c <le_enh_conn_complete+0x1a0>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    4714:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    4718:	0719      	lsls	r1, r3, #28
    471a:	d51d      	bpl.n	4758 <le_enh_conn_complete+0x15c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    471c:	2102      	movs	r1, #2
    471e:	f242 0016 	movw	r0, #8214	; 0x2016
    4722:	f7ff f86b 	bl	37fc <bt_hci_cmd_create>
	if (!buf) {
    4726:	4605      	mov	r5, r0
    4728:	b1b0      	cbz	r0, 4758 <le_enh_conn_complete+0x15c>
	cp = net_buf_add(buf, sizeof(*cp));
    472a:	2102      	movs	r1, #2
    472c:	3008      	adds	r0, #8
    472e:	f013 fc11 	bl	17f54 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    4732:	8823      	ldrh	r3, [r4, #0]
    4734:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    4736:	4629      	mov	r1, r5
    4738:	f242 0016 	movw	r0, #8214	; 0x2016
    473c:	f7ff fb78 	bl	3e30 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    4740:	4620      	mov	r0, r4
    4742:	f001 fd3f 	bl	61c4 <bt_conn_unref>
	bt_le_scan_update(false);
    4746:	2000      	movs	r0, #0
    4748:	f7ff fbe4 	bl	3f14 <bt_le_scan_update>
    474c:	e774      	b.n	4638 <le_enh_conn_complete+0x3c>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    474e:	4621      	mov	r1, r4
    4750:	4668      	mov	r0, sp
    4752:	f7fe ffab 	bl	36ac <bt_addr_le_copy>
    4756:	e788      	b.n	466a <le_enh_conn_complete+0x6e>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    4758:	4d10      	ldr	r5, [pc, #64]	; (479c <le_enh_conn_complete+0x1a0>)
    475a:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    475e:	07d2      	lsls	r2, r2, #31
    4760:	d508      	bpl.n	4774 <le_enh_conn_complete+0x178>
		err = hci_le_set_phy(conn);
    4762:	4620      	mov	r0, r4
    4764:	f7ff ff00 	bl	4568 <hci_le_set_phy.isra.31>
		if (!err) {
    4768:	b920      	cbnz	r0, 4774 <le_enh_conn_complete+0x178>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    476a:	2180      	movs	r1, #128	; 0x80
    476c:	1d20      	adds	r0, r4, #4
    476e:	f7fe ffa0 	bl	36b2 <atomic_or>
    4772:	e7e5      	b.n	4740 <le_enh_conn_complete+0x144>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    4774:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    4778:	069b      	lsls	r3, r3, #26
    477a:	d506      	bpl.n	478a <le_enh_conn_complete+0x18e>
		err = hci_le_set_data_len(conn);
    477c:	4620      	mov	r0, r4
    477e:	f7ff ff13 	bl	45a8 <hci_le_set_data_len.isra.32>
		if (!err) {
    4782:	b910      	cbnz	r0, 478a <le_enh_conn_complete+0x18e>
    4784:	f44f 7180 	mov.w	r1, #256	; 0x100
    4788:	e7f0      	b.n	476c <le_enh_conn_complete+0x170>
	update_conn_param(conn);
    478a:	4620      	mov	r0, r4
    478c:	f7fe ffd0 	bl	3730 <update_conn_param>
    4790:	e7d6      	b.n	4740 <le_enh_conn_complete+0x144>
    4792:	bf00      	nop
    4794:	2000de90 	.word	0x2000de90
    4798:	00003dd1 	.word	0x00003dd1
    479c:	2000de20 	.word	0x2000de20

000047a0 <le_conn_param_neg_reply>:
{
    47a0:	b570      	push	{r4, r5, r6, lr}
    47a2:	4606      	mov	r6, r0
    47a4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    47a6:	f242 0021 	movw	r0, #8225	; 0x2021
    47aa:	2103      	movs	r1, #3
    47ac:	f7ff f826 	bl	37fc <bt_hci_cmd_create>
	if (!buf) {
    47b0:	4604      	mov	r4, r0
    47b2:	b160      	cbz	r0, 47ce <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    47b4:	2103      	movs	r1, #3
    47b6:	3008      	adds	r0, #8
    47b8:	f013 fbcc 	bl	17f54 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    47bc:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    47be:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    47c0:	4621      	mov	r1, r4
    47c2:	f242 0021 	movw	r0, #8225	; 0x2021
}
    47c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    47ca:	f7ff bb31 	b.w	3e30 <bt_hci_cmd_send>
}
    47ce:	f06f 0036 	mvn.w	r0, #54	; 0x36
    47d2:	bd70      	pop	{r4, r5, r6, pc}

000047d4 <hci_tx_thread>:
{
    47d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    47d8:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 48bc <hci_tx_thread+0xe8>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    47dc:	4c35      	ldr	r4, [pc, #212]	; (48b4 <hci_tx_thread+0xe0>)
		events[0].state = K_POLL_STATE_NOT_READY;
    47de:	f898 300d 	ldrb.w	r3, [r8, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    47e2:	4835      	ldr	r0, [pc, #212]	; (48b8 <hci_tx_thread+0xe4>)
		events[0].state = K_POLL_STATE_NOT_READY;
    47e4:	f36f 1307 	bfc	r3, #4, #4
    47e8:	f888 300d 	strb.w	r3, [r8, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    47ec:	f001 fb50 	bl	5e90 <bt_conn_prepare_events>
    47f0:	1c47      	adds	r7, r0, #1
		err = k_poll(events, ev_count, K_FOREVER);
    47f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    47f6:	4639      	mov	r1, r7
    47f8:	4830      	ldr	r0, [pc, #192]	; (48bc <hci_tx_thread+0xe8>)
    47fa:	f01c fedf 	bl	215bc <k_poll>
		BT_ASSERT(err == 0);
    47fe:	b9b8      	cbnz	r0, 4830 <hci_tx_thread+0x5c>
    4800:	4d2e      	ldr	r5, [pc, #184]	; (48bc <hci_tx_thread+0xe8>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    4802:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 48c0 <hci_tx_thread+0xec>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    4806:	f104 0bd4 	add.w	fp, r4, #212	; 0xd4
	for (; count; ev++, count--) {
    480a:	b917      	cbnz	r7, 4812 <hci_tx_thread+0x3e>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    480c:	f01c f8e6 	bl	209dc <_impl_k_yield>
    4810:	e7e5      	b.n	47de <hci_tx_thread+0xa>
		switch (ev->state) {
    4812:	7b6b      	ldrb	r3, [r5, #13]
    4814:	091b      	lsrs	r3, r3, #4
    4816:	2b04      	cmp	r3, #4
    4818:	d139      	bne.n	488e <hci_tx_thread+0xba>
			if (ev->tag == BT_EVENT_CMD_TX) {
    481a:	f895 a00c 	ldrb.w	sl, [r5, #12]
    481e:	f1ba 0f00 	cmp.w	sl, #0
    4822:	d137      	bne.n	4894 <hci_tx_thread+0xc0>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    4824:	4651      	mov	r1, sl
    4826:	4658      	mov	r0, fp
    4828:	f013 fb0c 	bl	17e44 <net_buf_get>
	BT_ASSERT(buf);
    482c:	4606      	mov	r6, r0
    482e:	b928      	cbnz	r0, 483c <hci_tx_thread+0x68>
    4830:	4040      	eors	r0, r0
    4832:	f380 8811 	msr	BASEPRI, r0
    4836:	f04f 0004 	mov.w	r0, #4
    483a:	df02      	svc	2
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    483c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4840:	4648      	mov	r0, r9
    4842:	f01c f9a7 	bl	20b94 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    4846:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    484a:	b118      	cbz	r0, 4854 <hci_tx_thread+0x80>
		net_buf_unref(bt_dev.sent_cmd);
    484c:	f013 fb24 	bl	17e98 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    4850:	f8c4 a0c0 	str.w	sl, [r4, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    4854:	4630      	mov	r0, r6
    4856:	f013 fb4d 	bl	17ef4 <net_buf_ref>
    485a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	err = bt_send(buf);
    485e:	4630      	mov	r0, r6
    4860:	f7ff fade 	bl	3e20 <bt_send>
	if (err) {
    4864:	b198      	cbz	r0, 488e <hci_tx_thread+0xba>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4866:	4648      	mov	r0, r9
    4868:	f01c f934 	bl	20ad4 <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    486c:	4630      	mov	r0, r6
    486e:	f013 fa55 	bl	17d1c <net_buf_id>
    4872:	2100      	movs	r1, #0
    4874:	201f      	movs	r0, #31
    4876:	f7fe ff87 	bl	3788 <hci_cmd_done.isra.17>
		net_buf_unref(bt_dev.sent_cmd);
    487a:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    487e:	f013 fb0b 	bl	17e98 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    4882:	2300      	movs	r3, #0
		net_buf_unref(buf);
    4884:	4630      	mov	r0, r6
		bt_dev.sent_cmd = NULL;
    4886:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
		net_buf_unref(buf);
    488a:	f013 fb05 	bl	17e98 <net_buf_unref>
	for (; count; ev++, count--) {
    488e:	3514      	adds	r5, #20
    4890:	3f01      	subs	r7, #1
    4892:	e7ba      	b.n	480a <hci_tx_thread+0x36>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    4894:	f1ba 0f01 	cmp.w	sl, #1
    4898:	d104      	bne.n	48a4 <hci_tx_thread+0xd0>
					conn = CONTAINER_OF(ev->fifo,
    489a:	6928      	ldr	r0, [r5, #16]
					bt_conn_notify_tx(conn);
    489c:	381c      	subs	r0, #28
    489e:	f001 fa37 	bl	5d10 <bt_conn_notify_tx>
    48a2:	e7f4      	b.n	488e <hci_tx_thread+0xba>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    48a4:	f1ba 0f02 	cmp.w	sl, #2
    48a8:	d1f1      	bne.n	488e <hci_tx_thread+0xba>
					conn = CONTAINER_OF(ev->fifo,
    48aa:	6928      	ldr	r0, [r5, #16]
					bt_conn_process_tx(conn);
    48ac:	382c      	subs	r0, #44	; 0x2c
    48ae:	f001 fe77 	bl	65a0 <bt_conn_process_tx>
    48b2:	e7ec      	b.n	488e <hci_tx_thread+0xba>
    48b4:	2000de20 	.word	0x2000de20
    48b8:	2000df1c 	.word	0x2000df1c
    48bc:	2000df08 	.word	0x2000df08
    48c0:	2000dec8 	.word	0x2000dec8

000048c4 <bt_recv>:
{
    48c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (bt_buf_get_type(buf)) {
    48c8:	7d03      	ldrb	r3, [r0, #20]
    48ca:	2b01      	cmp	r3, #1
{
    48cc:	b093      	sub	sp, #76	; 0x4c
    48ce:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    48d0:	d02a      	beq.n	4928 <bt_recv+0x64>
    48d2:	2b03      	cmp	r3, #3
    48d4:	f040 83a6 	bne.w	5024 <bt_recv+0x760>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    48d8:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(hdr->handle);
    48da:	881e      	ldrh	r6, [r3, #0]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    48dc:	885d      	ldrh	r5, [r3, #2]
	acl(buf)->handle = bt_acl_handle(handle);
    48de:	f3c6 030b 	ubfx	r3, r6, #0, #12
    48e2:	82c3      	strh	r3, [r0, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    48e4:	23ff      	movs	r3, #255	; 0xff
    48e6:	7543      	strb	r3, [r0, #21]
	net_buf_pull(buf, sizeof(*hdr));
    48e8:	2104      	movs	r1, #4
    48ea:	3008      	adds	r0, #8
    48ec:	f013 fb82 	bl	17ff4 <net_buf_simple_pull>
	if (buf->len != len) {
    48f0:	89a3      	ldrh	r3, [r4, #12]
    48f2:	42ab      	cmp	r3, r5
    48f4:	d003      	beq.n	48fe <bt_recv+0x3a>
	net_buf_unref(buf);
    48f6:	4620      	mov	r0, r4
    48f8:	f013 face 	bl	17e98 <net_buf_unref>
    48fc:	e010      	b.n	4920 <bt_recv+0x5c>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    48fe:	8ae0      	ldrh	r0, [r4, #22]
    4900:	f001 fbf2 	bl	60e8 <bt_conn_lookup_handle>
	if (!conn) {
    4904:	4605      	mov	r5, r0
    4906:	2800      	cmp	r0, #0
    4908:	d0f5      	beq.n	48f6 <bt_recv+0x32>
	acl(buf)->id = bt_conn_get_id(conn);
    490a:	f001 fea3 	bl	6654 <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    490e:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_get_id(conn);
    4910:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    4912:	4621      	mov	r1, r4
    4914:	4628      	mov	r0, r5
    4916:	f001 f9a3 	bl	5c60 <bt_conn_recv>
	bt_conn_unref(conn);
    491a:	4628      	mov	r0, r5
    491c:	f001 fc52 	bl	61c4 <bt_conn_unref>
		return 0;
    4920:	2000      	movs	r0, #0
}
    4922:	b013      	add	sp, #76	; 0x4c
    4924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    4928:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    492a:	7832      	ldrb	r2, [r6, #0]
    492c:	2a13      	cmp	r2, #19
    492e:	f200 8397 	bhi.w	5060 <bt_recv+0x79c>
    4932:	4093      	lsls	r3, r2
    4934:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    4938:	f000 8392 	beq.w	5060 <bt_recv+0x79c>
    493c:	4040      	eors	r0, r0
    493e:	f380 8811 	msr	BASEPRI, r0
    4942:	f04f 0004 	mov.w	r0, #4
    4946:	df02      	svc	2
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    4948:	4631      	mov	r1, r6
    494a:	1d28      	adds	r0, r5, #4
    494c:	f7fe fec2 	bl	36d4 <atomic_test_bit>
    4950:	b130      	cbz	r0, 4960 <bt_recv+0x9c>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4952:	4628      	mov	r0, r5
    4954:	2101      	movs	r1, #1
    4956:	f001 fb1d 	bl	5f94 <bt_conn_set_state>
		bt_le_scan_update(false);
    495a:	4630      	mov	r0, r6
    495c:	f7ff fada 	bl	3f14 <bt_le_scan_update>
	bt_conn_unref(conn);
    4960:	4628      	mov	r0, r5
    4962:	f001 fc2f 	bl	61c4 <bt_conn_unref>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    4966:	2106      	movs	r1, #6
    4968:	48ba      	ldr	r0, [pc, #744]	; (4c54 <bt_recv+0x390>)
    496a:	f7fe feb3 	bl	36d4 <atomic_test_bit>
    496e:	2800      	cmp	r0, #0
    4970:	d0c1      	beq.n	48f6 <bt_recv+0x32>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    4972:	2105      	movs	r1, #5
    4974:	48b7      	ldr	r0, [pc, #732]	; (4c54 <bt_recv+0x390>)
    4976:	f7fe fead 	bl	36d4 <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    497a:	2800      	cmp	r0, #0
    497c:	d1bb      	bne.n	48f6 <bt_recv+0x32>
		set_advertise_enable(true);
    497e:	2001      	movs	r0, #1
    4980:	f7ff f862 	bl	3a48 <set_advertise_enable>
    4984:	e7b7      	b.n	48f6 <bt_recv+0x32>
    4986:	68a6      	ldr	r6, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    4988:	f8b6 0001 	ldrh.w	r0, [r6, #1]
    498c:	f001 fbac 	bl	60e8 <bt_conn_lookup_handle>
	if (!conn) {
    4990:	4605      	mov	r5, r0
    4992:	2800      	cmp	r0, #0
    4994:	d0af      	beq.n	48f6 <bt_recv+0x32>
	if (evt->status) {
    4996:	7833      	ldrb	r3, [r6, #0]
    4998:	7882      	ldrb	r2, [r0, #2]
    499a:	b12b      	cbz	r3, 49a8 <bt_recv+0xe4>
		if (conn->type == BT_CONN_TYPE_LE) {
    499c:	2a00      	cmp	r2, #0
    499e:	f040 83a0 	bne.w	50e2 <bt_recv+0x81e>
			conn->required_sec_level = conn->sec_level;
    49a2:	7a03      	ldrb	r3, [r0, #8]
    49a4:	7243      	strb	r3, [r0, #9]
    49a6:	e39c      	b.n	50e2 <bt_recv+0x81e>
	conn->encrypt = evt->encrypt;
    49a8:	78f3      	ldrb	r3, [r6, #3]
    49aa:	7283      	strb	r3, [r0, #10]
	if (conn->type == BT_CONN_TYPE_LE) {
    49ac:	b9ba      	cbnz	r2, 49de <bt_recv+0x11a>
		if (conn->encrypt) {
    49ae:	b10b      	cbz	r3, 49b4 <bt_recv+0xf0>
		bt_smp_update_keys(conn);
    49b0:	f006 f84a 	bl	aa48 <bt_smp_update_keys>
	if (!conn->encrypt) {
    49b4:	7aab      	ldrb	r3, [r5, #10]
    49b6:	b9d3      	cbnz	r3, 49ee <bt_recv+0x12a>
		conn->sec_level = BT_SECURITY_LOW;
    49b8:	2301      	movs	r3, #1
    49ba:	722b      	strb	r3, [r5, #8]
    49bc:	e00f      	b.n	49de <bt_recv+0x11a>
    49be:	68a6      	ldr	r6, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    49c0:	f8b6 0001 	ldrh.w	r0, [r6, #1]
    49c4:	f001 fb90 	bl	60e8 <bt_conn_lookup_handle>
	if (!conn) {
    49c8:	4605      	mov	r5, r0
    49ca:	2800      	cmp	r0, #0
    49cc:	d093      	beq.n	48f6 <bt_recv+0x32>
	if (evt->status) {
    49ce:	7831      	ldrb	r1, [r6, #0]
    49d0:	b111      	cbz	r1, 49d8 <bt_recv+0x114>
		bt_l2cap_encrypt_change(conn, evt->status);
    49d2:	f002 f811 	bl	69f8 <bt_l2cap_encrypt_change>
    49d6:	e78e      	b.n	48f6 <bt_recv+0x32>
	if (conn->type == BT_CONN_TYPE_LE) {
    49d8:	7883      	ldrb	r3, [r0, #2]
    49da:	2b00      	cmp	r3, #0
    49dc:	d0e8      	beq.n	49b0 <bt_recv+0xec>
	bt_l2cap_encrypt_change(conn, evt->status);
    49de:	4628      	mov	r0, r5
    49e0:	7831      	ldrb	r1, [r6, #0]
    49e2:	f002 f809 	bl	69f8 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    49e6:	4628      	mov	r0, r5
    49e8:	f001 f8c0 	bl	5b6c <bt_conn_security_changed>
    49ec:	e379      	b.n	50e2 <bt_recv+0x81e>
    49ee:	4628      	mov	r0, r5
    49f0:	f7fe feac 	bl	374c <update_sec_level.part.12>
    49f4:	e7f3      	b.n	49de <bt_recv+0x11a>
    49f6:	68a1      	ldr	r1, [r4, #8]
	enh.status         = evt->status;
    49f8:	780b      	ldrb	r3, [r1, #0]
    49fa:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	enh.handle         = evt->handle;
    49fe:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    4a02:	f8ad 3029 	strh.w	r3, [sp, #41]	; 0x29
	enh.role           = evt->role;
    4a06:	78cb      	ldrb	r3, [r1, #3]
    4a08:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	enh.interval       = evt->interval;
    4a0c:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    4a10:	f8ad 303f 	strh.w	r3, [sp, #63]	; 0x3f
	enh.latency        = evt->latency;
    4a14:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    4a18:	f8ad 3041 	strh.w	r3, [sp, #65]	; 0x41
	enh.supv_timeout   = evt->supv_timeout;
    4a1c:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    4a20:	f8ad 3043 	strh.w	r3, [sp, #67]	; 0x43
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    4a24:	ae0b      	add	r6, sp, #44	; 0x2c
	enh.clock_accuracy = evt->clock_accuracy;
    4a26:	7c4b      	ldrb	r3, [r1, #17]
    4a28:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    4a2c:	3104      	adds	r1, #4
    4a2e:	4630      	mov	r0, r6
    4a30:	f7fe fe3c 	bl	36ac <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    4a34:	2500      	movs	r5, #0
    4a36:	2206      	movs	r2, #6
    4a38:	a906      	add	r1, sp, #24
    4a3a:	f10d 0033 	add.w	r0, sp, #51	; 0x33
    4a3e:	9506      	str	r5, [sp, #24]
    4a40:	f8ad 501c 	strh.w	r5, [sp, #28]
    4a44:	f7fb feba 	bl	7bc <memcpy>
		keys = bt_keys_find_irk(addr);
    4a48:	4630      	mov	r0, r6
    4a4a:	f006 f8f9 	bl	ac40 <bt_keys_find_irk>
		if (keys) {
    4a4e:	4607      	mov	r7, r0
    4a50:	b1a8      	cbz	r0, 4a7e <bt_recv+0x1ba>
	if (id_addr != &enh.peer_addr) {
    4a52:	42b0      	cmp	r0, r6
    4a54:	d013      	beq.n	4a7e <bt_recv+0x1ba>
    4a56:	2206      	movs	r2, #6
    4a58:	f10d 012d 	add.w	r1, sp, #45	; 0x2d
    4a5c:	f10d 0039 	add.w	r0, sp, #57	; 0x39
    4a60:	f7fb feac 	bl	7bc <memcpy>
		bt_addr_le_copy(&enh.peer_addr, id_addr);
    4a64:	4639      	mov	r1, r7
    4a66:	4630      	mov	r0, r6
    4a68:	f7fe fe20 	bl	36ac <bt_addr_le_copy>
		enh.peer_addr.type += BT_ADDR_LE_PUBLIC_ID;
    4a6c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    4a70:	3302      	adds	r3, #2
    4a72:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	le_enh_conn_complete(&enh);
    4a76:	a80a      	add	r0, sp, #40	; 0x28
		le_enh_conn_complete((void *)buf->data);
    4a78:	f7ff fdc0 	bl	45fc <le_enh_conn_complete>
    4a7c:	e73b      	b.n	48f6 <bt_recv+0x32>
    4a7e:	2206      	movs	r2, #6
    4a80:	a908      	add	r1, sp, #32
    4a82:	f10d 0039 	add.w	r0, sp, #57	; 0x39
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    4a86:	9508      	str	r5, [sp, #32]
    4a88:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
    4a8c:	f7fb fe96 	bl	7bc <memcpy>
    4a90:	e7f1      	b.n	4a76 <bt_recv+0x1b2>
		le_enh_conn_complete((void *)buf->data);
    4a92:	68a0      	ldr	r0, [r4, #8]
    4a94:	e7f0      	b.n	4a78 <bt_recv+0x1b4>
    4a96:	68a5      	ldr	r5, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    4a98:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    4a9c:	f001 fb24 	bl	60e8 <bt_conn_lookup_handle>
	if (!conn) {
    4aa0:	4606      	mov	r6, r0
    4aa2:	2800      	cmp	r0, #0
    4aa4:	f43f af27 	beq.w	48f6 <bt_recv+0x32>
	if (!evt->status) {
    4aa8:	782b      	ldrb	r3, [r5, #0]
    4aaa:	b99b      	cbnz	r3, 4ad4 <bt_recv+0x210>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    4aac:	792a      	ldrb	r2, [r5, #4]
    4aae:	78eb      	ldrb	r3, [r5, #3]
    4ab0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4ab4:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    4ab8:	79aa      	ldrb	r2, [r5, #6]
    4aba:	796b      	ldrb	r3, [r5, #5]
    4abc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4ac0:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    4ac4:	79eb      	ldrb	r3, [r5, #7]
    4ac6:	7a2a      	ldrb	r2, [r5, #8]
    4ac8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4acc:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
		notify_le_param_updated(conn);
    4ad0:	f000 ffc4 	bl	5a5c <notify_le_param_updated>
	bt_conn_unref(conn);
    4ad4:	4630      	mov	r0, r6
    4ad6:	e05f      	b.n	4b98 <bt_recv+0x2d4>
    4ad8:	68a6      	ldr	r6, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    4ada:	f8b6 0001 	ldrh.w	r0, [r6, #1]
    4ade:	f001 fb03 	bl	60e8 <bt_conn_lookup_handle>
	if (!conn) {
    4ae2:	4605      	mov	r5, r0
    4ae4:	2800      	cmp	r0, #0
    4ae6:	f43f af06 	beq.w	48f6 <bt_recv+0x32>
	if (!evt->status) {
    4aea:	7833      	ldrb	r3, [r6, #0]
    4aec:	b923      	cbnz	r3, 4af8 <bt_recv+0x234>
		memcpy(conn->le.features, evt->features,
    4aee:	2208      	movs	r2, #8
    4af0:	1cf1      	adds	r1, r6, #3
    4af2:	3068      	adds	r0, #104	; 0x68
    4af4:	f7fb fe62 	bl	7bc <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    4af8:	4e57      	ldr	r6, [pc, #348]	; (4c58 <bt_recv+0x394>)
    4afa:	f896 2079 	ldrb.w	r2, [r6, #121]	; 0x79
    4afe:	07d2      	lsls	r2, r2, #31
    4b00:	d50c      	bpl.n	4b1c <bt_recv+0x258>
    4b02:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
    4b06:	07db      	lsls	r3, r3, #31
    4b08:	d508      	bpl.n	4b1c <bt_recv+0x258>
		err = hci_le_set_phy(conn);
    4b0a:	4628      	mov	r0, r5
    4b0c:	f7ff fd2c 	bl	4568 <hci_le_set_phy.isra.31>
		if (!err) {
    4b10:	b920      	cbnz	r0, 4b1c <bt_recv+0x258>
    4b12:	2180      	movs	r1, #128	; 0x80
    4b14:	1d28      	adds	r0, r5, #4
    4b16:	f7fe fdcc 	bl	36b2 <atomic_or>
    4b1a:	e2e2      	b.n	50e2 <bt_recv+0x81e>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    4b1c:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    4b20:	069f      	lsls	r7, r3, #26
    4b22:	d56f      	bpl.n	4c04 <bt_recv+0x340>
    4b24:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    4b28:	069e      	lsls	r6, r3, #26
    4b2a:	d56b      	bpl.n	4c04 <bt_recv+0x340>
		err = hci_le_set_data_len(conn);
    4b2c:	4628      	mov	r0, r5
    4b2e:	f7ff fd3b 	bl	45a8 <hci_le_set_data_len.isra.32>
		if (!err) {
    4b32:	2800      	cmp	r0, #0
    4b34:	d166      	bne.n	4c04 <bt_recv+0x340>
    4b36:	f44f 7180 	mov.w	r1, #256	; 0x100
    4b3a:	e7eb      	b.n	4b14 <bt_recv+0x250>
    4b3c:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    4b3e:	78d9      	ldrb	r1, [r3, #3]
    4b40:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    4b42:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    4b44:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4b48:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    4b4c:	7959      	ldrb	r1, [r3, #5]
    4b4e:	791a      	ldrb	r2, [r3, #4]
    4b50:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4b54:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
	param.latency = sys_le16_to_cpu(evt->latency);
    4b58:	799a      	ldrb	r2, [r3, #6]
    4b5a:	79d9      	ldrb	r1, [r3, #7]
    4b5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4b60:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
	param.timeout = sys_le16_to_cpu(evt->timeout);
    4b64:	7a1a      	ldrb	r2, [r3, #8]
    4b66:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    4b68:	b2bd      	uxth	r5, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    4b6a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    4b6e:	4628      	mov	r0, r5
	param.timeout = sys_le16_to_cpu(evt->timeout);
    4b70:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
	conn = bt_conn_lookup_handle(handle);
    4b74:	f001 fab8 	bl	60e8 <bt_conn_lookup_handle>
	if (!conn) {
    4b78:	4680      	mov	r8, r0
    4b7a:	b920      	cbnz	r0, 4b86 <bt_recv+0x2c2>
		return le_conn_param_neg_reply(handle,
    4b7c:	2102      	movs	r1, #2
    4b7e:	4628      	mov	r0, r5
    4b80:	f7ff fe0e 	bl	47a0 <le_conn_param_neg_reply>
    4b84:	e6b7      	b.n	48f6 <bt_recv+0x32>
	if (!le_param_req(conn, &param)) {
    4b86:	a90a      	add	r1, sp, #40	; 0x28
    4b88:	f000 ff7c 	bl	5a84 <le_param_req>
    4b8c:	b938      	cbnz	r0, 4b9e <bt_recv+0x2da>
		err = le_conn_param_neg_reply(handle,
    4b8e:	211e      	movs	r1, #30
    4b90:	4628      	mov	r0, r5
    4b92:	f7ff fe05 	bl	47a0 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    4b96:	4640      	mov	r0, r8
	bt_conn_unref(conn);
    4b98:	f001 fb14 	bl	61c4 <bt_conn_unref>
    4b9c:	e6ab      	b.n	48f6 <bt_recv+0x32>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    4b9e:	210e      	movs	r1, #14
    4ba0:	f242 0020 	movw	r0, #8224	; 0x2020
    4ba4:	f7fe fe2a 	bl	37fc <bt_hci_cmd_create>
	if (!buf) {
    4ba8:	4606      	mov	r6, r0
    4baa:	2800      	cmp	r0, #0
    4bac:	d0f3      	beq.n	4b96 <bt_recv+0x2d2>
	cp = net_buf_add(buf, sizeof(*cp));
    4bae:	210e      	movs	r1, #14
    4bb0:	3008      	adds	r0, #8
    4bb2:	f013 f9cf 	bl	17f54 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    4bb6:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    4bb8:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    4bba:	2100      	movs	r1, #0
    4bbc:	f7fb fe2a 	bl	814 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    4bc0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    4bc4:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    4bc6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    4bca:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    4bcc:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    4bd0:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    4bd2:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
	cp->handle = sys_cpu_to_le16(handle);
    4bd6:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    4bd8:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    4bda:	4631      	mov	r1, r6
    4bdc:	f242 0020 	movw	r0, #8224	; 0x2020
    4be0:	f7ff f926 	bl	3e30 <bt_hci_cmd_send>
    4be4:	e7d7      	b.n	4b96 <bt_recv+0x2d2>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4be6:	68a3      	ldr	r3, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    4be8:	8818      	ldrh	r0, [r3, #0]
    4bea:	f001 fa7d 	bl	60e8 <bt_conn_lookup_handle>
	if (!conn) {
    4bee:	4605      	mov	r5, r0
    4bf0:	2800      	cmp	r0, #0
    4bf2:	f43f ae80 	beq.w	48f6 <bt_recv+0x32>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    4bf6:	2108      	movs	r1, #8
    4bf8:	3004      	adds	r0, #4
    4bfa:	f7fe fd89 	bl	3710 <atomic_test_and_clear_bit>
    4bfe:	2800      	cmp	r0, #0
    4c00:	f000 826f 	beq.w	50e2 <bt_recv+0x81e>
	update_conn_param(conn);
    4c04:	4628      	mov	r0, r5
    4c06:	f7fe fd93 	bl	3730 <update_conn_param>
    4c0a:	e26a      	b.n	50e2 <bt_recv+0x81e>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4c0c:	68a3      	ldr	r3, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    4c0e:	f8b3 0001 	ldrh.w	r0, [r3, #1]
    4c12:	f001 fa69 	bl	60e8 <bt_conn_lookup_handle>
	if (!conn) {
    4c16:	4605      	mov	r5, r0
    4c18:	2800      	cmp	r0, #0
    4c1a:	f43f ae6c 	beq.w	48f6 <bt_recv+0x32>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    4c1e:	1d06      	adds	r6, r0, #4
    4c20:	2107      	movs	r1, #7
    4c22:	4630      	mov	r0, r6
    4c24:	f7fe fd74 	bl	3710 <atomic_test_and_clear_bit>
    4c28:	2800      	cmp	r0, #0
    4c2a:	f000 825a 	beq.w	50e2 <bt_recv+0x81e>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    4c2e:	4b0a      	ldr	r3, [pc, #40]	; (4c58 <bt_recv+0x394>)
    4c30:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    4c34:	0698      	lsls	r0, r3, #26
    4c36:	d5e5      	bpl.n	4c04 <bt_recv+0x340>
    4c38:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    4c3c:	0699      	lsls	r1, r3, #26
    4c3e:	d5e1      	bpl.n	4c04 <bt_recv+0x340>
		err = hci_le_set_data_len(conn);
    4c40:	4628      	mov	r0, r5
    4c42:	f7ff fcb1 	bl	45a8 <hci_le_set_data_len.isra.32>
		if (!err) {
    4c46:	2800      	cmp	r0, #0
    4c48:	d1dc      	bne.n	4c04 <bt_recv+0x340>
    4c4a:	f44f 7180 	mov.w	r1, #256	; 0x100
    4c4e:	4630      	mov	r0, r6
    4c50:	e761      	b.n	4b16 <bt_recv+0x252>
    4c52:	bf00      	nop
    4c54:	2000de90 	.word	0x2000de90
    4c58:	2000de20 	.word	0x2000de20
    4c5c:	68a5      	ldr	r5, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    4c5e:	8828      	ldrh	r0, [r5, #0]
    4c60:	f001 fa42 	bl	60e8 <bt_conn_lookup_handle>
	if (!conn) {
    4c64:	4606      	mov	r6, r0
    4c66:	2800      	cmp	r0, #0
    4c68:	f43f ae45 	beq.w	48f6 <bt_recv+0x32>
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    4c6c:	f8d5 2002 	ldr.w	r2, [r5, #2]
    4c70:	f8d5 3006 	ldr.w	r3, [r5, #6]
    4c74:	4313      	orrs	r3, r2
    4c76:	d11f      	bne.n	4cb8 <bt_recv+0x3f4>
    4c78:	896b      	ldrh	r3, [r5, #10]
    4c7a:	b9eb      	cbnz	r3, 4cb8 <bt_recv+0x3f4>
    4c7c:	a90a      	add	r1, sp, #40	; 0x28
    4c7e:	f005 ff4a 	bl	ab16 <bt_smp_get_tk>
    4c82:	b1c8      	cbz	r0, 4cb8 <bt_recv+0x3f4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    4c84:	2112      	movs	r1, #18
    4c86:	f242 001a 	movw	r0, #8218	; 0x201a
    4c8a:	f7fe fdb7 	bl	37fc <bt_hci_cmd_create>
		if (!buf) {
    4c8e:	4607      	mov	r7, r0
    4c90:	2800      	cmp	r0, #0
    4c92:	f43f af1f 	beq.w	4ad4 <bt_recv+0x210>
		cp = net_buf_add(buf, sizeof(*cp));
    4c96:	2112      	movs	r1, #18
    4c98:	3008      	adds	r0, #8
    4c9a:	f013 f95b 	bl	17f54 <net_buf_simple_add>
		cp->handle = evt->handle;
    4c9e:	882b      	ldrh	r3, [r5, #0]
    4ca0:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(cp->ltk, tk, sizeof(cp->ltk));
    4ca4:	2210      	movs	r2, #16
    4ca6:	a90a      	add	r1, sp, #40	; 0x28
    4ca8:	f7fb fd88 	bl	7bc <memcpy>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    4cac:	4639      	mov	r1, r7
    4cae:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    4cb2:	f7ff f8bd 	bl	3e30 <bt_hci_cmd_send>
    4cb6:	e70d      	b.n	4ad4 <bt_recv+0x210>
	if (!conn->le.keys) {
    4cb8:	6f33      	ldr	r3, [r6, #112]	; 0x70
    4cba:	2b00      	cmp	r3, #0
    4cbc:	f040 8240 	bne.w	5140 <bt_recv+0x87c>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    4cc0:	f106 0748 	add.w	r7, r6, #72	; 0x48
    4cc4:	4639      	mov	r1, r7
    4cc6:	2020      	movs	r0, #32
    4cc8:	f005 ff9c 	bl	ac04 <bt_keys_find>
    4ccc:	6730      	str	r0, [r6, #112]	; 0x70
		if (!conn->le.keys) {
    4cce:	2800      	cmp	r0, #0
    4cd0:	f040 8236 	bne.w	5140 <bt_recv+0x87c>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
    4cd4:	4639      	mov	r1, r7
    4cd6:	2001      	movs	r0, #1
    4cd8:	f005 ff94 	bl	ac04 <bt_keys_find>
    4cdc:	6730      	str	r0, [r6, #112]	; 0x70
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    4cde:	2800      	cmp	r0, #0
    4ce0:	d055      	beq.n	4d8e <bt_recv+0x4ca>
    4ce2:	8981      	ldrh	r1, [r0, #12]
    4ce4:	068a      	lsls	r2, r1, #26
    4ce6:	d52c      	bpl.n	4d42 <bt_recv+0x47e>
	    evt->rand == 0 && evt->ediv == 0) {
    4ce8:	f8d5 2002 	ldr.w	r2, [r5, #2]
    4cec:	f8d5 3006 	ldr.w	r3, [r5, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    4cf0:	4313      	orrs	r3, r2
    4cf2:	d126      	bne.n	4d42 <bt_recv+0x47e>
	    evt->rand == 0 && evt->ediv == 0) {
    4cf4:	f8b5 800a 	ldrh.w	r8, [r5, #10]
    4cf8:	f1b8 0f00 	cmp.w	r8, #0
    4cfc:	d121      	bne.n	4d42 <bt_recv+0x47e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    4cfe:	2112      	movs	r1, #18
    4d00:	f242 001a 	movw	r0, #8218	; 0x201a
    4d04:	f7fe fd7a 	bl	37fc <bt_hci_cmd_create>
		if (!buf) {
    4d08:	4607      	mov	r7, r0
    4d0a:	2800      	cmp	r0, #0
    4d0c:	f43f aee2 	beq.w	4ad4 <bt_recv+0x210>
		cp = net_buf_add(buf, sizeof(*cp));
    4d10:	2112      	movs	r1, #18
    4d12:	3008      	adds	r0, #8
    4d14:	f013 f91e 	bl	17f54 <net_buf_simple_add>
		cp->handle = evt->handle;
    4d18:	882b      	ldrh	r3, [r5, #0]
    4d1a:	4605      	mov	r5, r0
    4d1c:	f825 3b02 	strh.w	r3, [r5], #2
		memcpy(cp->ltk, conn->le.keys->ltk.val,
    4d20:	6f31      	ldr	r1, [r6, #112]	; 0x70
    4d22:	79ca      	ldrb	r2, [r1, #7]
    4d24:	311a      	adds	r1, #26
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    4d26:	4628      	mov	r0, r5
    4d28:	f7fb fd48 	bl	7bc <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    4d2c:	6f33      	ldr	r3, [r6, #112]	; 0x70
    4d2e:	79d8      	ldrb	r0, [r3, #7]
    4d30:	280f      	cmp	r0, #15
    4d32:	d8bb      	bhi.n	4cac <bt_recv+0x3e8>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    4d34:	f1c0 0210 	rsb	r2, r0, #16
    4d38:	2100      	movs	r1, #0
    4d3a:	4428      	add	r0, r5
    4d3c:	f7fb fd6a 	bl	814 <memset>
    4d40:	e7b4      	b.n	4cac <bt_recv+0x3e8>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    4d42:	07cb      	lsls	r3, r1, #31
    4d44:	d523      	bpl.n	4d8e <bt_recv+0x4ca>
    4d46:	e9d0 231c 	ldrd	r2, r3, [r0, #112]	; 0x70
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    4d4a:	f8d5 9006 	ldr.w	r9, [r5, #6]
    4d4e:	f8d5 8002 	ldr.w	r8, [r5, #2]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    4d52:	454b      	cmp	r3, r9
    4d54:	bf08      	it	eq
    4d56:	4542      	cmpeq	r2, r8
    4d58:	d119      	bne.n	4d8e <bt_recv+0x4ca>
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    4d5a:	f8b0 2078 	ldrh.w	r2, [r0, #120]	; 0x78
    4d5e:	896b      	ldrh	r3, [r5, #10]
    4d60:	429a      	cmp	r2, r3
    4d62:	d114      	bne.n	4d8e <bt_recv+0x4ca>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    4d64:	2112      	movs	r1, #18
    4d66:	f242 001a 	movw	r0, #8218	; 0x201a
    4d6a:	f7fe fd47 	bl	37fc <bt_hci_cmd_create>
		if (!buf) {
    4d6e:	4607      	mov	r7, r0
    4d70:	2800      	cmp	r0, #0
    4d72:	f43f aeaf 	beq.w	4ad4 <bt_recv+0x210>
		cp = net_buf_add(buf, sizeof(*cp));
    4d76:	2112      	movs	r1, #18
    4d78:	3008      	adds	r0, #8
    4d7a:	f013 f8eb 	bl	17f54 <net_buf_simple_add>
		cp->handle = evt->handle;
    4d7e:	882b      	ldrh	r3, [r5, #0]
    4d80:	4605      	mov	r5, r0
    4d82:	f825 3b02 	strh.w	r3, [r5], #2
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    4d86:	6f31      	ldr	r1, [r6, #112]	; 0x70
    4d88:	79ca      	ldrb	r2, [r1, #7]
    4d8a:	317a      	adds	r1, #122	; 0x7a
    4d8c:	e7cb      	b.n	4d26 <bt_recv+0x462>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    4d8e:	2102      	movs	r1, #2
    4d90:	f242 001b 	movw	r0, #8219	; 0x201b
	le_ltk_neg_reply(evt->handle);
    4d94:	882f      	ldrh	r7, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    4d96:	f7fe fd31 	bl	37fc <bt_hci_cmd_create>
	if (!buf) {
    4d9a:	4605      	mov	r5, r0
    4d9c:	2800      	cmp	r0, #0
    4d9e:	f43f ae99 	beq.w	4ad4 <bt_recv+0x210>
	cp = net_buf_add(buf, sizeof(*cp));
    4da2:	2102      	movs	r1, #2
    4da4:	3008      	adds	r0, #8
    4da6:	f013 f8d5 	bl	17f54 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    4daa:	4629      	mov	r1, r5
	cp->handle = handle;
    4dac:	8007      	strh	r7, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    4dae:	f242 001b 	movw	r0, #8219	; 0x201b
    4db2:	e77e      	b.n	4cb2 <bt_recv+0x3ee>
    4db4:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4db6:	489e      	ldr	r0, [pc, #632]	; (5030 <bt_recv+0x76c>)
    4db8:	f06f 0110 	mvn.w	r1, #16
    4dbc:	f7fe fc97 	bl	36ee <atomic_and>
	if (!evt->status) {
    4dc0:	7833      	ldrb	r3, [r6, #0]
    4dc2:	b943      	cbnz	r3, 4dd6 <bt_recv+0x512>
		memcpy(pub_key, evt->key, 64);
    4dc4:	1c71      	adds	r1, r6, #1
    4dc6:	2240      	movs	r2, #64	; 0x40
    4dc8:	489a      	ldr	r0, [pc, #616]	; (5034 <bt_recv+0x770>)
    4dca:	f7fb fcf7 	bl	7bc <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    4dce:	2108      	movs	r1, #8
    4dd0:	4897      	ldr	r0, [pc, #604]	; (5030 <bt_recv+0x76c>)
    4dd2:	f7fe fc6e 	bl	36b2 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    4dd6:	4b98      	ldr	r3, [pc, #608]	; (5038 <bt_recv+0x774>)
    4dd8:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    4dda:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    4ddc:	2d00      	cmp	r5, #0
    4dde:	f43f ad8a 	beq.w	48f6 <bt_recv+0x32>
		cb->func(evt->status ? NULL : evt->key);
    4de2:	7832      	ldrb	r2, [r6, #0]
    4de4:	682b      	ldr	r3, [r5, #0]
    4de6:	2a00      	cmp	r2, #0
    4de8:	bf0c      	ite	eq
    4dea:	4638      	moveq	r0, r7
    4dec:	2000      	movne	r0, #0
    4dee:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    4df0:	686d      	ldr	r5, [r5, #4]
    4df2:	e7f3      	b.n	4ddc <bt_recv+0x518>
	if (dh_key_cb) {
    4df4:	4d91      	ldr	r5, [pc, #580]	; (503c <bt_recv+0x778>)
    4df6:	68a0      	ldr	r0, [r4, #8]
    4df8:	682a      	ldr	r2, [r5, #0]
    4dfa:	2a00      	cmp	r2, #0
    4dfc:	f43f ad7b 	beq.w	48f6 <bt_recv+0x32>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    4e00:	7803      	ldrb	r3, [r0, #0]
    4e02:	b923      	cbnz	r3, 4e0e <bt_recv+0x54a>
    4e04:	3001      	adds	r0, #1
    4e06:	4790      	blx	r2
		dh_key_cb = NULL;
    4e08:	2300      	movs	r3, #0
    4e0a:	602b      	str	r3, [r5, #0]
    4e0c:	e573      	b.n	48f6 <bt_recv+0x32>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    4e0e:	2000      	movs	r0, #0
    4e10:	e7f9      	b.n	4e06 <bt_recv+0x542>
	u8_t num_reports = net_buf_pull_u8(buf);
    4e12:	4628      	mov	r0, r5
    4e14:	f013 f8f6 	bl	18004 <net_buf_simple_pull_u8>
		if (scan_dev_found_cb) {
    4e18:	f8df a23c 	ldr.w	sl, [pc, #572]	; 5058 <bt_recv+0x794>
	u8_t num_reports = net_buf_pull_u8(buf);
    4e1c:	9004      	str	r0, [sp, #16]
	while (num_reports--) {
    4e1e:	9b04      	ldr	r3, [sp, #16]
    4e20:	2b00      	cmp	r3, #0
    4e22:	f43f ad68 	beq.w	48f6 <bt_recv+0x32>
		info = (void *)buf->data;
    4e26:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    4e28:	2109      	movs	r1, #9
    4e2a:	4628      	mov	r0, r5
    4e2c:	f013 f8e2 	bl	17ff4 <net_buf_simple_pull>
		rssi = info->data[info->length];
    4e30:	7a33      	ldrb	r3, [r6, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    4e32:	46b0      	mov	r8, r6
		rssi = info->data[info->length];
    4e34:	4433      	add	r3, r6
    4e36:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    4e3a:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    4e3e:	3b02      	subs	r3, #2
    4e40:	2b01      	cmp	r3, #1
    4e42:	d83c      	bhi.n	4ebe <bt_recv+0x5fa>
			bt_addr_le_copy(&id_addr, &info->addr);
    4e44:	4641      	mov	r1, r8
    4e46:	a80a      	add	r0, sp, #40	; 0x28
    4e48:	f7fe fc30 	bl	36ac <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    4e4c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    4e50:	3b02      	subs	r3, #2
    4e52:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		if (scan_dev_found_cb) {
    4e56:	f8da 3000 	ldr.w	r3, [sl]
    4e5a:	b1c3      	cbz	r3, 4e8e <bt_recv+0x5ca>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    4e5c:	4628      	mov	r0, r5
    4e5e:	f013 f8e1 	bl	18024 <net_buf_simple_headroom>
			buf->len = info->length;
    4e62:	7a33      	ldrb	r3, [r6, #8]
	state->len = buf->len;
    4e64:	f8b4 900c 	ldrh.w	r9, [r4, #12]
    4e68:	81a3      	strh	r3, [r4, #12]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    4e6a:	7832      	ldrb	r2, [r6, #0]
    4e6c:	9400      	str	r4, [sp, #0]
	state->offset = net_buf_simple_headroom(buf);
    4e6e:	9005      	str	r0, [sp, #20]
    4e70:	462b      	mov	r3, r5
    4e72:	fa4f f18b 	sxtb.w	r1, fp
    4e76:	a80a      	add	r0, sp, #40	; 0x28
    4e78:	f8da 7000 	ldr.w	r7, [sl]
    4e7c:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    4e7e:	6923      	ldr	r3, [r4, #16]
    4e80:	f8bd 2014 	ldrh.w	r2, [sp, #20]
	buf->len = state->len;
    4e84:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    4e88:	fa13 f382 	uxtah	r3, r3, r2
    4e8c:	60a3      	str	r3, [r4, #8]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4e8e:	2108      	movs	r1, #8
    4e90:	4867      	ldr	r0, [pc, #412]	; (5030 <bt_recv+0x76c>)
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    4e92:	7837      	ldrb	r7, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4e94:	f7fe fc1e 	bl	36d4 <atomic_test_bit>
    4e98:	b928      	cbnz	r0, 4ea6 <bt_recv+0x5e2>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    4e9a:	2f01      	cmp	r7, #1
    4e9c:	d803      	bhi.n	4ea6 <bt_recv+0x5e2>
    4e9e:	4641      	mov	r1, r8
    4ea0:	a80a      	add	r0, sp, #40	; 0x28
    4ea2:	f7ff fae7 	bl	4474 <check_pending_conn.part.29>
		net_buf_pull(buf, info->length + sizeof(rssi));
    4ea6:	7a31      	ldrb	r1, [r6, #8]
    4ea8:	4628      	mov	r0, r5
    4eaa:	3101      	adds	r1, #1
    4eac:	f013 f8a2 	bl	17ff4 <net_buf_simple_pull>
    4eb0:	9b04      	ldr	r3, [sp, #16]
    4eb2:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
    4eb6:	fa5f f389 	uxtb.w	r3, r9
    4eba:	9304      	str	r3, [sp, #16]
    4ebc:	e7af      	b.n	4e1e <bt_recv+0x55a>
		keys = bt_keys_find_irk(addr);
    4ebe:	4640      	mov	r0, r8
    4ec0:	f005 febe 	bl	ac40 <bt_keys_find_irk>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    4ec4:	2800      	cmp	r0, #0
    4ec6:	bf14      	ite	ne
    4ec8:	4601      	movne	r1, r0
    4eca:	4641      	moveq	r1, r8
    4ecc:	a80a      	add	r0, sp, #40	; 0x28
    4ece:	f7fe fbed 	bl	36ac <bt_addr_le_copy>
    4ed2:	e7c0      	b.n	4e56 <bt_recv+0x592>
	num_reports = net_buf_pull_u8(buf);
    4ed4:	4628      	mov	r0, r5
    4ed6:	f013 f895 	bl	18004 <net_buf_simple_pull_u8>
    4eda:	4b59      	ldr	r3, [pc, #356]	; (5040 <bt_recv+0x77c>)
		if (scan_dev_found_cb) {
    4edc:	f8df b178 	ldr.w	fp, [pc, #376]	; 5058 <bt_recv+0x794>
				pointer_index = 0;
    4ee0:	f8df 8178 	ldr.w	r8, [pc, #376]	; 505c <bt_recv+0x798>
	num_reports = net_buf_pull_u8(buf);
    4ee4:	7018      	strb	r0, [r3, #0]
    4ee6:	9304      	str	r3, [sp, #16]
	while (num_reports--) {
    4ee8:	9b04      	ldr	r3, [sp, #16]
    4eea:	9904      	ldr	r1, [sp, #16]
    4eec:	781b      	ldrb	r3, [r3, #0]
    4eee:	1e5a      	subs	r2, r3, #1
    4ef0:	700a      	strb	r2, [r1, #0]
    4ef2:	2b00      	cmp	r3, #0
    4ef4:	f43f acff 	beq.w	48f6 <bt_recv+0x32>
		info = (void *)buf->data;
    4ef8:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    4efa:	2118      	movs	r1, #24
    4efc:	4628      	mov	r0, r5
    4efe:	f013 f879 	bl	17ff4 <net_buf_simple_pull>
		net_buf_pull(buf, 2);   // remove 0x81 0xFF 
    4f02:	2102      	movs	r1, #2
    4f04:	4628      	mov	r0, r5
    4f06:	f013 f875 	bl	17ff4 <net_buf_simple_pull>
		rssi = info->data[info->length - 2];
    4f0a:	7df3      	ldrb	r3, [r6, #23]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    4f0c:	46b1      	mov	r9, r6
		rssi = info->data[info->length - 2];
    4f0e:	4433      	add	r3, r6
    4f10:	f893 a016 	ldrb.w	sl, [r3, #22]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    4f14:	f819 3f02 	ldrb.w	r3, [r9, #2]!
    4f18:	3b02      	subs	r3, #2
    4f1a:	2b01      	cmp	r3, #1
    4f1c:	d840      	bhi.n	4fa0 <bt_recv+0x6dc>
			bt_addr_le_copy(&id_addr, &info->addr);
    4f1e:	4649      	mov	r1, r9
    4f20:	a80a      	add	r0, sp, #40	; 0x28
    4f22:	f7fe fbc3 	bl	36ac <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    4f26:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    4f2a:	3b02      	subs	r3, #2
    4f2c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		if (scan_dev_found_cb) {
    4f30:	f8db 3000 	ldr.w	r3, [fp]
		buf->len = info->length;
    4f34:	7df2      	ldrb	r2, [r6, #23]
    4f36:	81a2      	strh	r2, [r4, #12]
		if (scan_dev_found_cb) {
    4f38:	b323      	cbz	r3, 4f84 <bt_recv+0x6c0>
			if(info->frag == 0x01){  //First fragment - more packets to come;
    4f3a:	7873      	ldrb	r3, [r6, #1]
    4f3c:	2b01      	cmp	r3, #1
    4f3e:	d13a      	bne.n	4fb6 <bt_recv+0x6f2>
				memcpy(&copied_data[pointer_index], buf->b.data, buf->b.len);
    4f40:	4b40      	ldr	r3, [pc, #256]	; (5044 <bt_recv+0x780>)
    4f42:	f8b8 0000 	ldrh.w	r0, [r8]
				memcpy(temp_data, buf->b.data , buf->b.len);
    4f46:	4f40      	ldr	r7, [pc, #256]	; (5048 <bt_recv+0x784>)
				memcpy(&copied_data[pointer_index], buf->b.data, buf->b.len);
    4f48:	68a1      	ldr	r1, [r4, #8]
    4f4a:	4418      	add	r0, r3
    4f4c:	f7fb fc36 	bl	7bc <memcpy>
				memcpy(temp_data, buf->b.data , buf->b.len);
    4f50:	89a2      	ldrh	r2, [r4, #12]
    4f52:	68a1      	ldr	r1, [r4, #8]
    4f54:	4638      	mov	r0, r7
    4f56:	f7fb fc31 	bl	7bc <memcpy>
				pointer_index += (buf->b.len - 2);
    4f5a:	f8b8 3000 	ldrh.w	r3, [r8]
    4f5e:	89a2      	ldrh	r2, [r4, #12]
    4f60:	3b02      	subs	r3, #2
    4f62:	4413      	add	r3, r2
    4f64:	f8a8 3000 	strh.w	r3, [r8]
				if(temp_data[100] == 0xDD){
    4f68:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
    4f6c:	2bdd      	cmp	r3, #221	; 0xdd
    4f6e:	d102      	bne.n	4f76 <bt_recv+0x6b2>
					printk("DD \n");
    4f70:	4836      	ldr	r0, [pc, #216]	; (504c <bt_recv+0x788>)
    4f72:	f7fc fc4f 	bl	1814 <printk>
				if(temp_data[100] == 0xEE){
    4f76:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
    4f7a:	2bee      	cmp	r3, #238	; 0xee
    4f7c:	d102      	bne.n	4f84 <bt_recv+0x6c0>
					printk("EE \n");
    4f7e:	4834      	ldr	r0, [pc, #208]	; (5050 <bt_recv+0x78c>)
    4f80:	f7fc fc48 	bl	1814 <printk>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4f84:	2108      	movs	r1, #8
    4f86:	482a      	ldr	r0, [pc, #168]	; (5030 <bt_recv+0x76c>)
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    4f88:	7836      	ldrb	r6, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4f8a:	f7fe fba3 	bl	36d4 <atomic_test_bit>
    4f8e:	2800      	cmp	r0, #0
    4f90:	d1aa      	bne.n	4ee8 <bt_recv+0x624>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    4f92:	2e01      	cmp	r6, #1
    4f94:	d8a8      	bhi.n	4ee8 <bt_recv+0x624>
    4f96:	4649      	mov	r1, r9
    4f98:	a80a      	add	r0, sp, #40	; 0x28
    4f9a:	f7ff fa6b 	bl	4474 <check_pending_conn.part.29>
    4f9e:	e7a3      	b.n	4ee8 <bt_recv+0x624>
		keys = bt_keys_find_irk(addr);
    4fa0:	4648      	mov	r0, r9
    4fa2:	f005 fe4d 	bl	ac40 <bt_keys_find_irk>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    4fa6:	2800      	cmp	r0, #0
    4fa8:	bf14      	ite	ne
    4faa:	4601      	movne	r1, r0
    4fac:	4649      	moveq	r1, r9
    4fae:	a80a      	add	r0, sp, #40	; 0x28
    4fb0:	f7fe fb7c 	bl	36ac <bt_addr_le_copy>
    4fb4:	e7bc      	b.n	4f30 <bt_recv+0x66c>
			}else if (info->frag == 0x02){  //last paacket of the data or complete data which is less than 254 bytes
    4fb6:	2b02      	cmp	r3, #2
		rssi = info->data[info->length - 2];
    4fb8:	fa4f fa8a 	sxtb.w	sl, sl
			}else if (info->frag == 0x02){  //last paacket of the data or complete data which is less than 254 bytes
    4fbc:	d127      	bne.n	500e <bt_recv+0x74a>
				memcpy(&copied_data[pointer_index], buf->b.data , buf->b.len);
    4fbe:	4b21      	ldr	r3, [pc, #132]	; (5044 <bt_recv+0x780>)
    4fc0:	f8b8 0000 	ldrh.w	r0, [r8]
    4fc4:	68a1      	ldr	r1, [r4, #8]
    4fc6:	4418      	add	r0, r3
    4fc8:	f7fb fbf8 	bl	7bc <memcpy>
				memcpy(temp_data, buf->b.data , buf->b.len);
    4fcc:	89a2      	ldrh	r2, [r4, #12]
    4fce:	68a1      	ldr	r1, [r4, #8]
    4fd0:	481d      	ldr	r0, [pc, #116]	; (5048 <bt_recv+0x784>)
    4fd2:	f7fb fbf3 	bl	7bc <memcpy>
				pointer_index += (buf->b.len - 2);
    4fd6:	f8b8 2000 	ldrh.w	r2, [r8]
    4fda:	89a3      	ldrh	r3, [r4, #12]
				buffer_size1 = (buf->b.len - 2);
    4fdc:	491d      	ldr	r1, [pc, #116]	; (5054 <bt_recv+0x790>)
				pointer_index += (buf->b.len - 2);
    4fde:	3a02      	subs	r2, #2
    4fe0:	441a      	add	r2, r3
				buffer_size1 = (buf->b.len - 2);
    4fe2:	3b02      	subs	r3, #2
				pointer_index += (buf->b.len - 2);
    4fe4:	b292      	uxth	r2, r2
				buffer_size1 = (buf->b.len - 2);
    4fe6:	800b      	strh	r3, [r1, #0]
				net_buf_add_mem(buf, copied_data, pointer_index);
    4fe8:	4628      	mov	r0, r5
    4fea:	4916      	ldr	r1, [pc, #88]	; (5044 <bt_recv+0x780>)
				pointer_index += (buf->b.len - 2);
    4fec:	f8a8 2000 	strh.w	r2, [r8]
				net_buf_add_mem(buf, copied_data, pointer_index);
    4ff0:	f012 ffb6 	bl	17f60 <net_buf_simple_add_mem>
				net_buf_pull(buf, info->length);
    4ff4:	7df1      	ldrb	r1, [r6, #23]
    4ff6:	4628      	mov	r0, r5
    4ff8:	f012 fffc 	bl	17ff4 <net_buf_simple_pull>
				scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    4ffc:	7832      	ldrb	r2, [r6, #0]
    4ffe:	9400      	str	r4, [sp, #0]
    5000:	f8db 7000 	ldr.w	r7, [fp]
    5004:	462b      	mov	r3, r5
    5006:	4651      	mov	r1, sl
    5008:	a80a      	add	r0, sp, #40	; 0x28
    500a:	47b8      	blx	r7
    500c:	e7ba      	b.n	4f84 <bt_recv+0x6c0>
			else if(info->frag == 0x03){        // packet received on primary adv channel
    500e:	2b03      	cmp	r3, #3
    5010:	d1b8      	bne.n	4f84 <bt_recv+0x6c0>
				pointer_index = 0;
    5012:	2100      	movs	r1, #0
				memset(copied_data, 0, 1500);
    5014:	f240 52dc 	movw	r2, #1500	; 0x5dc
    5018:	480a      	ldr	r0, [pc, #40]	; (5044 <bt_recv+0x780>)
				pointer_index = 0;
    501a:	f8a8 1000 	strh.w	r1, [r8]
				memset(copied_data, 0, 1500);
    501e:	f7fb fbf9 	bl	814 <memset>
    5022:	e7eb      	b.n	4ffc <bt_recv+0x738>
		net_buf_unref(buf);
    5024:	f012 ff38 	bl	17e98 <net_buf_unref>
		return -EINVAL;
    5028:	f06f 0015 	mvn.w	r0, #21
    502c:	e479      	b.n	4922 <bt_recv+0x5e>
    502e:	bf00      	nop
    5030:	2000de90 	.word	0x2000de90
    5034:	200003ba 	.word	0x200003ba
    5038:	200003fc 	.word	0x200003fc
    503c:	200003b4 	.word	0x200003b4
    5040:	20003aba 	.word	0x20003aba
    5044:	20003bdc 	.word	0x20003bdc
    5048:	20003ac0 	.word	0x20003ac0
    504c:	000225ac 	.word	0x000225ac
    5050:	000225b1 	.word	0x000225b1
    5054:	200003a0 	.word	0x200003a0
    5058:	20000404 	.word	0x20000404
    505c:	200003b8 	.word	0x200003b8
	net_buf_pull(buf, sizeof(*hdr));
    5060:	f104 0508 	add.w	r5, r4, #8
    5064:	2102      	movs	r1, #2
    5066:	4628      	mov	r0, r5
    5068:	f012 ffc4 	bl	17ff4 <net_buf_simple_pull>
	switch (hdr->evt) {
    506c:	7833      	ldrb	r3, [r6, #0]
    506e:	2b08      	cmp	r3, #8
    5070:	f43f ac89 	beq.w	4986 <bt_recv+0xc2>
    5074:	d837      	bhi.n	50e6 <bt_recv+0x822>
    5076:	2b05      	cmp	r3, #5
    5078:	f47f ac3d 	bne.w	48f6 <bt_recv+0x32>
    507c:	68a7      	ldr	r7, [r4, #8]
	if (evt->status) {
    507e:	783e      	ldrb	r6, [r7, #0]
    5080:	2e00      	cmp	r6, #0
    5082:	f47f ac38 	bne.w	48f6 <bt_recv+0x32>
	conn = bt_conn_lookup_handle(handle);
    5086:	f8b7 0001 	ldrh.w	r0, [r7, #1]
    508a:	f001 f82d 	bl	60e8 <bt_conn_lookup_handle>
	if (!conn) {
    508e:	4605      	mov	r5, r0
    5090:	2800      	cmp	r0, #0
    5092:	f43f ac68 	beq.w	4966 <bt_recv+0xa2>
	conn->err = evt->reason;
    5096:	78fb      	ldrb	r3, [r7, #3]
    5098:	72c3      	strb	r3, [r0, #11]
	k_call_stacks_analyze();
    509a:	f01b f883 	bl	201a4 <k_call_stacks_analyze>
			break;
		}
	}
#else
	for (i = 0; i < size; i++) {
		if ((unsigned char)stack[i] == 0xaa) {
    509e:	4a29      	ldr	r2, [pc, #164]	; (5144 <bt_recv+0x880>)
	size_t unused = 0;
    50a0:	4633      	mov	r3, r6
		if ((unsigned char)stack[i] == 0xaa) {
    50a2:	5c99      	ldrb	r1, [r3, r2]
    50a4:	29aa      	cmp	r1, #170	; 0xaa
    50a6:	d103      	bne.n	50b0 <bt_recv+0x7ec>
			unused++;
    50a8:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    50aa:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
    50ae:	d1f8      	bne.n	50a2 <bt_recv+0x7de>
	unsigned int pcnt, unused = 0;

	unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	pcnt = ((size - unused) * 100) / size;
    50b0:	f5c3 7020 	rsb	r0, r3, #640	; 0x280
    50b4:	f44f 7220 	mov.w	r2, #640	; 0x280
    50b8:	2164      	movs	r1, #100	; 0x64

	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    50ba:	e88d 0005 	stmia.w	sp, {r0, r2}
	pcnt = ((size - unused) * 100) / size;
    50be:	4341      	muls	r1, r0
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    50c0:	4821      	ldr	r0, [pc, #132]	; (5148 <bt_recv+0x884>)
	pcnt = ((size - unused) * 100) / size;
    50c2:	fbb1 f1f2 	udiv	r1, r1, r2
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    50c6:	9102      	str	r1, [sp, #8]
    50c8:	4920      	ldr	r1, [pc, #128]	; (514c <bt_recv+0x888>)
    50ca:	f7fc fba3 	bl	1814 <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    50ce:	2100      	movs	r1, #0
    50d0:	4628      	mov	r0, r5
    50d2:	f000 ff5f 	bl	5f94 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    50d6:	78ae      	ldrb	r6, [r5, #2]
	conn->handle = 0;
    50d8:	2300      	movs	r3, #0
    50da:	802b      	strh	r3, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    50dc:	2e00      	cmp	r6, #0
    50de:	f43f ac33 	beq.w	4948 <bt_recv+0x84>
	bt_conn_unref(conn);
    50e2:	4628      	mov	r0, r5
    50e4:	e558      	b.n	4b98 <bt_recv+0x2d4>
	switch (hdr->evt) {
    50e6:	2b30      	cmp	r3, #48	; 0x30
    50e8:	f43f ac69 	beq.w	49be <bt_recv+0xfa>
    50ec:	2b3e      	cmp	r3, #62	; 0x3e
    50ee:	f47f ac02 	bne.w	48f6 <bt_recv+0x32>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    50f2:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    50f4:	2101      	movs	r1, #1
    50f6:	4628      	mov	r0, r5
    50f8:	f012 ff7c 	bl	17ff4 <net_buf_simple_pull>
	switch (evt->subevent) {
    50fc:	7833      	ldrb	r3, [r6, #0]
    50fe:	3b01      	subs	r3, #1
    5100:	2b0c      	cmp	r3, #12
    5102:	f63f abf8 	bhi.w	48f6 <bt_recv+0x32>
    5106:	a201      	add	r2, pc, #4	; (adr r2, 510c <bt_recv+0x848>)
    5108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    510c:	000049f7 	.word	0x000049f7
    5110:	00004e13 	.word	0x00004e13
    5114:	00004a97 	.word	0x00004a97
    5118:	00004ad9 	.word	0x00004ad9
    511c:	00004c5d 	.word	0x00004c5d
    5120:	00004b3d 	.word	0x00004b3d
    5124:	00004be7 	.word	0x00004be7
    5128:	00004db5 	.word	0x00004db5
    512c:	00004df5 	.word	0x00004df5
    5130:	00004a93 	.word	0x00004a93
    5134:	000048f7 	.word	0x000048f7
    5138:	00004c0d 	.word	0x00004c0d
    513c:	00004ed5 	.word	0x00004ed5
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    5140:	6f30      	ldr	r0, [r6, #112]	; 0x70
    5142:	e5ce      	b.n	4ce2 <bt_recv+0x41e>
    5144:	20005ae8 	.word	0x20005ae8
    5148:	00022578 	.word	0x00022578
    514c:	0002256f 	.word	0x0002256f

00005150 <bt_recv_prio>:
{
    5150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    5154:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    5156:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    5158:	2b01      	cmp	r3, #1
{
    515a:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    515c:	d005      	beq.n	516a <bt_recv_prio+0x1a>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    515e:	4040      	eors	r0, r0
    5160:	f380 8811 	msr	BASEPRI, r0
    5164:	f04f 0004 	mov.w	r0, #4
    5168:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    516a:	8982      	ldrh	r2, [r0, #12]
    516c:	2a01      	cmp	r2, #1
    516e:	d9f6      	bls.n	515e <bt_recv_prio+0xe>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    5170:	7832      	ldrb	r2, [r6, #0]
    5172:	2a13      	cmp	r2, #19
    5174:	d8f3      	bhi.n	515e <bt_recv_prio+0xe>
    5176:	4093      	lsls	r3, r2
    5178:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    517c:	d0ef      	beq.n	515e <bt_recv_prio+0xe>
	net_buf_pull(buf, sizeof(*hdr));
    517e:	f100 0508 	add.w	r5, r0, #8
    5182:	2102      	movs	r1, #2
    5184:	4628      	mov	r0, r5
    5186:	f012 ff35 	bl	17ff4 <net_buf_simple_pull>
	switch (hdr->evt) {
    518a:	7833      	ldrb	r3, [r6, #0]
    518c:	2b0f      	cmp	r3, #15
    518e:	d018      	beq.n	51c2 <bt_recv_prio+0x72>
    5190:	2b13      	cmp	r3, #19
    5192:	d023      	beq.n	51dc <bt_recv_prio+0x8c>
    5194:	2b0e      	cmp	r3, #14
    5196:	d161      	bne.n	525c <bt_recv_prio+0x10c>
	u8_t status, ncmd = evt->ncmd;
    5198:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    519a:	2103      	movs	r1, #3
    519c:	4628      	mov	r0, r5
	u8_t status, ncmd = evt->ncmd;
    519e:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    51a0:	f012 ff28 	bl	17ff4 <net_buf_simple_pull>
	status = buf->data[0];
    51a4:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    51a6:	4621      	mov	r1, r4
    51a8:	7818      	ldrb	r0, [r3, #0]
    51aa:	f7fe faed 	bl	3788 <hci_cmd_done.isra.17>
	if (ncmd) {
    51ae:	b116      	cbz	r6, 51b6 <bt_recv_prio+0x66>
    51b0:	482c      	ldr	r0, [pc, #176]	; (5264 <bt_recv_prio+0x114>)
    51b2:	f01b fc8f 	bl	20ad4 <_impl_k_sem_give>
	net_buf_unref(buf);
    51b6:	4620      	mov	r0, r4
    51b8:	f012 fe6e 	bl	17e98 <net_buf_unref>
}
    51bc:	2000      	movs	r0, #0
    51be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    51c2:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    51c4:	2104      	movs	r1, #4
	u8_t ncmd = evt->ncmd;
    51c6:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    51c8:	4628      	mov	r0, r5
    51ca:	f012 ff13 	bl	17ff4 <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    51ce:	4621      	mov	r1, r4
    51d0:	7830      	ldrb	r0, [r6, #0]
    51d2:	f7fe fad9 	bl	3788 <hci_cmd_done.isra.17>
	if (ncmd) {
    51d6:	2f00      	cmp	r7, #0
    51d8:	d0ed      	beq.n	51b6 <bt_recv_prio+0x66>
    51da:	e7e9      	b.n	51b0 <bt_recv_prio+0x60>
    51dc:	f8d4 8008 	ldr.w	r8, [r4, #8]
	for (i = 0; i < evt->num_handles; i++) {
    51e0:	2700      	movs	r7, #0
    51e2:	f898 3000 	ldrb.w	r3, [r8]
    51e6:	429f      	cmp	r7, r3
    51e8:	dae5      	bge.n	51b6 <bt_recv_prio+0x66>
    51ea:	eb08 0387 	add.w	r3, r8, r7, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
    51ee:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    51f2:	f8b3 6003 	ldrh.w	r6, [r3, #3]
	__asm__ volatile(
    51f6:	f04f 0320 	mov.w	r3, #32
    51fa:	f3ef 8911 	mrs	r9, BASEPRI
    51fe:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    5202:	f000 ff71 	bl	60e8 <bt_conn_lookup_handle>
		if (!conn) {
    5206:	4605      	mov	r5, r0
    5208:	b918      	cbnz	r0, 5212 <bt_recv_prio+0xc2>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    520a:	f389 8811 	msr	BASEPRI, r9
	for (i = 0; i < evt->num_handles; i++) {
    520e:	3701      	adds	r7, #1
    5210:	e7e7      	b.n	51e2 <bt_recv_prio+0x92>
    5212:	f389 8811 	msr	BASEPRI, r9
			k_fifo_put(&conn->tx_notify, node);
    5216:	f100 091c 	add.w	r9, r0, #28
		while (count--) {
    521a:	b196      	cbz	r6, 5242 <bt_recv_prio+0xf2>
	__asm__ volatile(
    521c:	f04f 0320 	mov.w	r3, #32
    5220:	f3ef 8011 	mrs	r0, BASEPRI
    5224:	f383 8811 	msr	BASEPRI, r3
    5228:	6969      	ldr	r1, [r5, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    522a:	b129      	cbz	r1, 5238 <bt_recv_prio+0xe8>
	if (list->tail == node) {
    522c:	69aa      	ldr	r2, [r5, #24]
	list->head = node->next;
    522e:	680b      	ldr	r3, [r1, #0]
    5230:	616b      	str	r3, [r5, #20]
	if (list->tail == node) {
    5232:	4291      	cmp	r1, r2
		list->tail = list->head;
    5234:	bf08      	it	eq
    5236:	61ab      	streq	r3, [r5, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    5238:	f380 8811 	msr	BASEPRI, r0
    523c:	3e01      	subs	r6, #1
    523e:	b2b6      	uxth	r6, r6
			if (!node) {
    5240:	b919      	cbnz	r1, 524a <bt_recv_prio+0xfa>
		bt_conn_unref(conn);
    5242:	4628      	mov	r0, r5
    5244:	f000 ffbe 	bl	61c4 <bt_conn_unref>
    5248:	e7e1      	b.n	520e <bt_recv_prio+0xbe>
			k_fifo_put(&conn->tx_notify, node);
    524a:	4648      	mov	r0, r9
    524c:	f01b f9f7 	bl	2063e <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    5250:	4628      	mov	r0, r5
    5252:	f000 fbff 	bl	5a54 <bt_conn_get_pkts>
    5256:	f01b fc3d 	bl	20ad4 <_impl_k_sem_give>
    525a:	e7de      	b.n	521a <bt_recv_prio+0xca>
		net_buf_unref(buf);
    525c:	4620      	mov	r0, r4
    525e:	f012 fe1b 	bl	17e98 <net_buf_unref>
    5262:	e77c      	b.n	515e <bt_recv_prio+0xe>
    5264:	2000dec8 	.word	0x2000dec8

00005268 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    5268:	4a08      	ldr	r2, [pc, #32]	; (528c <bt_hci_driver_register+0x24>)
    526a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    526e:	b93b      	cbnz	r3, 5280 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    5270:	6881      	ldr	r1, [r0, #8]
    5272:	b141      	cbz	r1, 5286 <bt_hci_driver_register+0x1e>
    5274:	68c1      	ldr	r1, [r0, #12]
    5276:	b131      	cbz	r1, 5286 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    5278:	f8c2 00e4 	str.w	r0, [r2, #228]	; 0xe4
	return 0;
    527c:	4618      	mov	r0, r3
    527e:	4770      	bx	lr
		return -EALREADY;
    5280:	f06f 0044 	mvn.w	r0, #68	; 0x44
    5284:	4770      	bx	lr
		return -EINVAL;
    5286:	f06f 0015 	mvn.w	r0, #21
}
    528a:	4770      	bx	lr
    528c:	2000de20 	.word	0x2000de20

00005290 <bt_enable>:
{
    5290:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    5292:	4c20      	ldr	r4, [pc, #128]	; (5314 <bt_enable+0x84>)
    5294:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
{
    5298:	b086      	sub	sp, #24
    529a:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    529c:	2b00      	cmp	r3, #0
    529e:	d033      	beq.n	5308 <bt_enable+0x78>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    52a0:	2101      	movs	r1, #1
    52a2:	f104 0070 	add.w	r0, r4, #112	; 0x70
    52a6:	f7fe fa04 	bl	36b2 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    52aa:	f010 0001 	ands.w	r0, r0, #1
    52ae:	d12e      	bne.n	530e <bt_enable+0x7e>
	ready_cb = cb;
    52b0:	4b19      	ldr	r3, [pc, #100]	; (5318 <bt_enable+0x88>)

    52b2:	491a      	ldr	r1, [pc, #104]	; (531c <bt_enable+0x8c>)
    52b4:	601e      	str	r6, [r3, #0]
    52b6:	f06f 0308 	mvn.w	r3, #8
    52ba:	9005      	str	r0, [sp, #20]
    52bc:	9004      	str	r0, [sp, #16]
    52be:	9303      	str	r3, [sp, #12]
    52c0:	9002      	str	r0, [sp, #8]
    52c2:	9001      	str	r0, [sp, #4]
    52c4:	9000      	str	r0, [sp, #0]
    52c6:	4b16      	ldr	r3, [pc, #88]	; (5320 <bt_enable+0x90>)
    52c8:	4816      	ldr	r0, [pc, #88]	; (5324 <bt_enable+0x94>)
    52ca:	f44f 7220 	mov.w	r2, #640	; 0x280
    52ce:	f01b fe3d 	bl	20f4c <_impl_k_thread_create>
	err = bt_dev.drv->open();
    52d2:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    52d6:	689b      	ldr	r3, [r3, #8]
    52d8:	4798      	blx	r3
	if (err) {
    52da:	4605      	mov	r5, r0
    52dc:	b988      	cbnz	r0, 5302 <bt_enable+0x72>
	if (!cb) {
    52de:	b926      	cbnz	r6, 52ea <bt_enable+0x5a>
}
    52e0:	b006      	add	sp, #24
    52e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    52e6:	f7fe be47 	b.w	3f78 <bt_init>
    52ea:	2101      	movs	r1, #1
    52ec:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    52f0:	f7fe f9df 	bl	36b2 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    52f4:	07c3      	lsls	r3, r0, #31
    52f6:	d404      	bmi.n	5302 <bt_enable+0x72>
		k_queue_append(&work_q->queue, work);
    52f8:	f104 0164 	add.w	r1, r4, #100	; 0x64
    52fc:	480a      	ldr	r0, [pc, #40]	; (5328 <bt_enable+0x98>)
    52fe:	f01b f99e 	bl	2063e <k_queue_append>
}
    5302:	4628      	mov	r0, r5
    5304:	b006      	add	sp, #24
    5306:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    5308:	f06f 0512 	mvn.w	r5, #18
    530c:	e7f9      	b.n	5302 <bt_enable+0x72>
		return -EALREADY;
    530e:	f06f 0544 	mvn.w	r5, #68	; 0x44
    5312:	e7f6      	b.n	5302 <bt_enable+0x72>
    5314:	2000de20 	.word	0x2000de20
    5318:	20000400 	.word	0x20000400
    531c:	20005ae8 	.word	0x20005ae8
    5320:	000047d5 	.word	0x000047d5
    5324:	20000408 	.word	0x20000408
    5328:	200052a0 	.word	0x200052a0

0000532c <bt_addr_le_is_bonded>:
{
    532c:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(addr);
    532e:	f005 fcbb 	bl	aca8 <bt_keys_find_addr>
		return keys && keys->keys;
    5332:	b118      	cbz	r0, 533c <bt_addr_le_is_bonded+0x10>
    5334:	8980      	ldrh	r0, [r0, #12]
    5336:	3000      	adds	r0, #0
    5338:	bf18      	it	ne
    533a:	2001      	movne	r0, #1
}
    533c:	bd08      	pop	{r3, pc}

0000533e <set_ext_ad>:

//#if defined(CONFIG_EXT_ADV)
int set_ext_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len, u8_t operation)
{
    533e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5342:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_ext_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    5344:	21ff      	movs	r1, #255	; 0xff
{
    5346:	4607      	mov	r7, r0
    5348:	4690      	mov	r8, r2
    534a:	469a      	mov	sl, r3
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    534c:	f7fe fa56 	bl	37fc <bt_hci_cmd_create>
	if (!buf) {
    5350:	4681      	mov	r9, r0
    5352:	2800      	cmp	r0, #0
    5354:	d03d      	beq.n	53d2 <set_ext_ad+0x94>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    5356:	21ff      	movs	r1, #255	; 0xff
    5358:	3008      	adds	r0, #8
    535a:	f012 fdfb 	bl	17f54 <net_buf_simple_add>
    535e:	4604      	mov	r4, r0

	memset(set_data, 0, sizeof(*set_data));
    5360:	22ff      	movs	r2, #255	; 0xff
    5362:	2100      	movs	r1, #0
	set_data->len = 0;
    5364:	2600      	movs	r6, #0
	memset(set_data, 0, sizeof(*set_data));
    5366:	f7fb fa55 	bl	814 <memset>
	set_data->len = 0;
    536a:	70e6      	strb	r6, [r4, #3]
	set_data->op = operation;
    536c:	f884 a001 	strb.w	sl, [r4, #1]
	for (i = 0; i < ad_len; i++) {
    5370:	4546      	cmp	r6, r8
    5372:	d106      	bne.n	5382 <set_ext_ad+0x44>
		memcpy(&set_data->data[set_data->len], ad[i].data,
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    5374:	4649      	mov	r1, r9
    5376:	4638      	mov	r0, r7
    5378:	2200      	movs	r2, #0
}
    537a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    537e:	f7fe ba6d 	b.w	385c <bt_hci_cmd_send_sync>
		if (set_data->len + ad[i].data_len + 2 > 255) {
    5382:	786a      	ldrb	r2, [r5, #1]
    5384:	78e3      	ldrb	r3, [r4, #3]
    5386:	18d1      	adds	r1, r2, r3
    5388:	3102      	adds	r1, #2
    538a:	29ff      	cmp	r1, #255	; 0xff
    538c:	f105 0508 	add.w	r5, r5, #8
    5390:	dd06      	ble.n	53a0 <set_ext_ad+0x62>
			net_buf_unref(buf);
    5392:	4648      	mov	r0, r9
    5394:	f012 fd80 	bl	17e98 <net_buf_unref>
			return -EINVAL;
    5398:	f06f 0015 	mvn.w	r0, #21
    539c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    53a0:	18e1      	adds	r1, r4, r3
    53a2:	1c50      	adds	r0, r2, #1
    53a4:	7108      	strb	r0, [r1, #4]
		set_data->data[set_data->len++] = ad[i].type;
    53a6:	1c98      	adds	r0, r3, #2
    53a8:	b2c0      	uxtb	r0, r0
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    53aa:	3301      	adds	r3, #1
		set_data->data[set_data->len++] = ad[i].type;
    53ac:	70e0      	strb	r0, [r4, #3]
    53ae:	fa54 f383 	uxtab	r3, r4, r3
    53b2:	f815 1c08 	ldrb.w	r1, [r5, #-8]
    53b6:	7119      	strb	r1, [r3, #4]
		memcpy(&set_data->data[set_data->len], ad[i].data,
    53b8:	3004      	adds	r0, #4
    53ba:	f855 1c04 	ldr.w	r1, [r5, #-4]
    53be:	4420      	add	r0, r4
    53c0:	f7fb f9fc 	bl	7bc <memcpy>
		set_data->len += ad[i].data_len;
    53c4:	78e3      	ldrb	r3, [r4, #3]
    53c6:	f815 2c07 	ldrb.w	r2, [r5, #-7]
    53ca:	4413      	add	r3, r2
    53cc:	70e3      	strb	r3, [r4, #3]
	for (i = 0; i < ad_len; i++) {
    53ce:	3601      	adds	r6, #1
    53d0:	e7ce      	b.n	5370 <set_ext_ad+0x32>
		return -ENOBUFS;
    53d2:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    53d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000053da <ext_set_data>:

int ext_set_data(u16_t data_lenght,u8_t *data){
    53da:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	u8_t fragment_count;
	fragment_count = data_lenght/246;
	int err = 0;
	int i =0;
	int ptr = 0;
    53de:	2700      	movs	r7, #0
	fragment_count = data_lenght/246;
    53e0:	24f6      	movs	r4, #246	; 0xf6
int ext_set_data(u16_t data_lenght,u8_t *data){
    53e2:	4680      	mov	r8, r0
	fragment_count = data_lenght/246;
    53e4:	fbb0 f4f4 	udiv	r4, r0, r4
int ext_set_data(u16_t data_lenght,u8_t *data){
    53e8:	4689      	mov	r9, r1
	fragment_count = data_lenght/246;
    53ea:	b2e4      	uxtb	r4, r4
	int i =0;
    53ec:	463d      	mov	r5, r7
			operation = 2;	//last fragment
		}else{
			operation = 0; //middle packets
		}

		struct bt_data chain_ad[] = {
    53ee:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while(i <= fragment_count){
    53f2:	42a5      	cmp	r5, r4
    53f4:	dd03      	ble.n	53fe <ext_set_data+0x24>

		ptr = ptr + packet_size;
		data_lenght = data_lenght - packet_size;
		i++;		
	}
	return 0;
    53f6:	2000      	movs	r0, #0
}
    53f8:	b002      	add	sp, #8
    53fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    53fe:	4646      	mov	r6, r8
    5400:	2ef6      	cmp	r6, #246	; 0xf6
    5402:	bf28      	it	cs
    5404:	26f6      	movcs	r6, #246	; 0xf6
		if((i == 0)&& (fragment_count == 0)){
    5406:	b9cd      	cbnz	r5, 543c <ext_set_data+0x62>
			operation = 3;  //complete data
    5408:	2c00      	cmp	r4, #0
    540a:	bf14      	ite	ne
    540c:	2301      	movne	r3, #1
    540e:	2303      	moveq	r3, #3
			BT_DATA(BT_DATA_MANUFACTURER_DATA, &data[ptr], packet_size),
    5410:	eb09 0207 	add.w	r2, r9, r7
		struct bt_data chain_ad[] = {
    5414:	9201      	str	r2, [sp, #4]
		err = set_ext_ad(BT_HCI_OP_LE_SET_EXT_ADV_DATA, chain_ad, 1, operation);
    5416:	4669      	mov	r1, sp
    5418:	2201      	movs	r2, #1
    541a:	f242 0037 	movw	r0, #8247	; 0x2037
		struct bt_data chain_ad[] = {
    541e:	f88d a000 	strb.w	sl, [sp]
    5422:	f88d 6001 	strb.w	r6, [sp, #1]
		err = set_ext_ad(BT_HCI_OP_LE_SET_EXT_ADV_DATA, chain_ad, 1, operation);
    5426:	f7ff ff8a 	bl	533e <set_ext_ad>
		if (err) {
    542a:	2800      	cmp	r0, #0
    542c:	d1e4      	bne.n	53f8 <ext_set_data+0x1e>
		ptr = ptr + packet_size;
    542e:	4437      	add	r7, r6
		data_lenght = data_lenght - packet_size;
    5430:	eba8 0606 	sub.w	r6, r8, r6
    5434:	fa1f f886 	uxth.w	r8, r6
		i++;		
    5438:	3501      	adds	r5, #1
    543a:	e7da      	b.n	53f2 <ext_set_data+0x18>
			operation = 2;	//last fragment
    543c:	42a5      	cmp	r5, r4
    543e:	bf0c      	ite	eq
    5440:	2302      	moveq	r3, #2
    5442:	2300      	movne	r3, #0
    5444:	e7e4      	b.n	5410 <ext_set_data+0x36>
	...

00005448 <bt_le_ext_adv_start>:

int bt_le_ext_adv_start(const struct bt_le_adv_param *param,
			const struct bt_data *ad, size_t ad_len,
			u8_t *data, u16_t data_lenght,
		    const struct bt_data *sd, size_t sd_len)
{
    5448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    544c:	b089      	sub	sp, #36	; 0x24
    544e:	4605      	mov	r5, r0
    5450:	4698      	mov	r8, r3
    5452:	9f11      	ldr	r7, [sp, #68]	; 0x44
	struct bt_hci_cp_le_set_ext_adv_param set_param;
	struct net_buf *buf;
	int err;
	

	if (!valid_adv_param(param)) {
    5454:	f7fe f910 	bl	3678 <valid_adv_param>
    5458:	b928      	cbnz	r0, 5466 <bt_le_ext_adv_start+0x1e>
		return -EINVAL;
    545a:	f06f 0415 	mvn.w	r4, #21
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    545e:	4620      	mov	r0, r4
    5460:	b009      	add	sp, #36	; 0x24
    5462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    5466:	2105      	movs	r1, #5
    5468:	4856      	ldr	r0, [pc, #344]	; (55c4 <bt_le_ext_adv_start+0x17c>)
    546a:	4e57      	ldr	r6, [pc, #348]	; (55c8 <bt_le_ext_adv_start+0x180>)
    546c:	f7fe f932 	bl	36d4 <atomic_test_bit>
    5470:	4604      	mov	r4, r0
    5472:	2800      	cmp	r0, #0
    5474:	f040 80a3 	bne.w	55be <bt_le_ext_adv_start+0x176>
	memset(&set_param, 0, sizeof(set_param));
    5478:	4601      	mov	r1, r0
    547a:	2217      	movs	r2, #23
    547c:	a802      	add	r0, sp, #8
    547e:	f7fb f9c9 	bl	814 <memset>
	set_param.prim_min_interval = sys_cpu_to_le16(param->interval_min);
    5482:	886b      	ldrh	r3, [r5, #2]
    5484:	f8ad 300b 	strh.w	r3, [sp, #11]
	set_param.prim_max_interval = sys_cpu_to_le16(param->interval_max);
    5488:	88ab      	ldrh	r3, [r5, #4]
    548a:	f8ad 300d 	strh.w	r3, [sp, #13]
	set_param.prim_channel_map  =   0x01;//0x07;
    548e:	2301      	movs	r3, #1
    5490:	f88d 300f 	strb.w	r3, [sp, #15]
	set_param.prim_adv_phy  	= 0x01;
    5494:	f88d 301a 	strb.w	r3, [sp, #26]
	u8_t direct_address[]		= {0x06,0x05,0x04,0x03,0x02,0x01};			//write address in reverse order
    5498:	4b4c      	ldr	r3, [pc, #304]	; (55cc <bt_le_ext_adv_start+0x184>)
	set_param.handle			= 0x00;
    549a:	f88d 4008 	strb.w	r4, [sp, #8]
	u8_t direct_address[]		= {0x06,0x05,0x04,0x03,0x02,0x01};			//write address in reverse order
    549e:	6818      	ldr	r0, [r3, #0]
    54a0:	9000      	str	r0, [sp, #0]
    54a2:	889b      	ldrh	r3, [r3, #4]
    54a4:	f8ad 3004 	strh.w	r3, [sp, #4]
	memcpy(&set_param.direct_addr.a.val, direct_address, sizeof(direct_address));
    54a8:	4669      	mov	r1, sp
	set_param.sid 				= 0x02;
    54aa:	f04f 0902 	mov.w	r9, #2
	memcpy(&set_param.direct_addr.a.val, direct_address, sizeof(direct_address));
    54ae:	2206      	movs	r2, #6
    54b0:	f10d 0012 	add.w	r0, sp, #18
	set_param.sid 				= 0x02;
    54b4:	f88d 901d 	strb.w	r9, [sp, #29]
	set_param.sec_adv_phy		= 0x00;  
    54b8:	f88d 401c 	strb.w	r4, [sp, #28]
	set_param.sec_adv_max_skip  = 0;                                   //0x01
    54bc:	f88d 401b 	strb.w	r4, [sp, #27]
	memcpy(&set_param.direct_addr.a.val, direct_address, sizeof(direct_address));
    54c0:	f7fb f97c 	bl	7bc <memcpy>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    54c4:	782b      	ldrb	r3, [r5, #0]
    54c6:	07d9      	lsls	r1, r3, #31
    54c8:	d51b      	bpl.n	5502 <bt_le_ext_adv_start+0xba>
			if (atomic_test_bit(bt_dev.flags,
    54ca:	4649      	mov	r1, r9
    54cc:	f106 0070 	add.w	r0, r6, #112	; 0x70
    54d0:	f7fe f900 	bl	36d4 <atomic_test_bit>
    54d4:	b110      	cbz	r0, 54dc <bt_le_ext_adv_start+0x94>
				set_random_address(&bt_dev.id_addr.a);
    54d6:	1c70      	adds	r0, r6, #1
    54d8:	f7fe f9fe 	bl	38d8 <set_random_address>
			set_param.own_addr_type = bt_dev.id_addr.type;
    54dc:	7833      	ldrb	r3, [r6, #0]
    54de:	f88d 3010 	strb.w	r3, [sp, #16]
		set_param.props = BT_HCI_LE_ADV_PROP_CONN | BT_HCI_LE_ADV_PROP_SCAN;				// BT_LE_ADV_IND;
    54e2:	2303      	movs	r3, #3
    54e4:	f88d 3009 	strb.w	r3, [sp, #9]
    54e8:	2300      	movs	r3, #0
    54ea:	f88d 300a 	strb.w	r3, [sp, #10]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, sizeof(set_param));
    54ee:	2117      	movs	r1, #23
    54f0:	f242 0036 	movw	r0, #8246	; 0x2036
    54f4:	f7fe f982 	bl	37fc <bt_hci_cmd_create>
	if (!buf) {
    54f8:	4604      	mov	r4, r0
    54fa:	b9c8      	cbnz	r0, 5530 <bt_le_ext_adv_start+0xe8>
		return -ENOBUFS;
    54fc:	f06f 0436 	mvn.w	r4, #54	; 0x36
    5500:	e7ad      	b.n	545e <bt_le_ext_adv_start+0x16>
		if (param->own_addr) {
    5502:	68a8      	ldr	r0, [r5, #8]
    5504:	b188      	cbz	r0, 552a <bt_le_ext_adv_start+0xe2>
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    5506:	7943      	ldrb	r3, [r0, #5]
    5508:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    550c:	d1a5      	bne.n	545a <bt_le_ext_adv_start+0x12>
			err = set_random_address(param->own_addr);
    550e:	f7fe f9e3 	bl	38d8 <set_random_address>
			err = le_set_private_addr();
    5512:	4604      	mov	r4, r0
		if (err) {
    5514:	2800      	cmp	r0, #0
    5516:	d1a2      	bne.n	545e <bt_le_ext_adv_start+0x16>
		set_param.own_addr_type = BT_ADDR_LE_RANDOM;									//own_addr_type
    5518:	2301      	movs	r3, #1
    551a:	f88d 3010 	strb.w	r3, [sp, #16]
			set_param.props =  BT_HCI_LE_ADV_PROP_TX_POWER  ; //|BT_HCI_LE_ADV_PROP_DIRECT |BT_HCI_LE_ADV_PROP_SCAN |;		//BT_LE_ADV_SCAN_IND and trx pwr
    551e:	2340      	movs	r3, #64	; 0x40
    5520:	f88d 3009 	strb.w	r3, [sp, #9]
    5524:	f88d 000a 	strb.w	r0, [sp, #10]
    5528:	e7e1      	b.n	54ee <bt_le_ext_adv_start+0xa6>
			err = le_set_private_addr();
    552a:	f7fe fa03 	bl	3934 <le_set_private_addr>
    552e:	e7f0      	b.n	5512 <bt_le_ext_adv_start+0xca>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    5530:	2217      	movs	r2, #23
    5532:	a902      	add	r1, sp, #8
    5534:	3008      	adds	r0, #8
    5536:	f012 fd13 	bl	17f60 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, buf, NULL);
    553a:	4621      	mov	r1, r4
    553c:	2200      	movs	r2, #0
    553e:	f242 0036 	movw	r0, #8246	; 0x2036
    5542:	f7fe f98b 	bl	385c <bt_hci_cmd_send_sync>
	if (err) {
    5546:	4604      	mov	r4, r0
    5548:	2800      	cmp	r0, #0
    554a:	d188      	bne.n	545e <bt_le_ext_adv_start+0x16>
	err = ext_set_data(data_lenght, data);
    554c:	4641      	mov	r1, r8
    554e:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
    5552:	f7ff ff42 	bl	53da <ext_set_data>
	if (err) {
    5556:	4604      	mov	r4, r0
    5558:	2800      	cmp	r0, #0
    555a:	d180      	bne.n	545e <bt_le_ext_adv_start+0x16>
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    555c:	bb2f      	cbnz	r7, 55aa <bt_le_ext_adv_start+0x162>
    555e:	782b      	ldrb	r3, [r5, #0]
    5560:	07da      	lsls	r2, r3, #31
    5562:	d422      	bmi.n	55aa <bt_le_ext_adv_start+0x162>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, 1);
    5564:	2101      	movs	r1, #1
    5566:	f242 0039 	movw	r0, #8249	; 0x2039
    556a:	f7fe f947 	bl	37fc <bt_hci_cmd_create>
	if (!buf) {
    556e:	4604      	mov	r4, r0
    5570:	2800      	cmp	r0, #0
    5572:	d0c3      	beq.n	54fc <bt_le_ext_adv_start+0xb4>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    5574:	2101      	movs	r1, #1
    5576:	3008      	adds	r0, #8
    5578:	f012 fcfb 	bl	17f72 <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, buf, NULL);
    557c:	4621      	mov	r1, r4
    557e:	2200      	movs	r2, #0
    5580:	f242 0039 	movw	r0, #8249	; 0x2039
    5584:	f7fe f96a 	bl	385c <bt_hci_cmd_send_sync>
	if (err) {
    5588:	4604      	mov	r4, r0
    558a:	2800      	cmp	r0, #0
    558c:	f47f af67 	bne.w	545e <bt_le_ext_adv_start+0x16>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    5590:	2120      	movs	r1, #32
    5592:	480c      	ldr	r0, [pc, #48]	; (55c4 <bt_le_ext_adv_start+0x17c>)
    5594:	f7fe f88d 	bl	36b2 <atomic_or>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    5598:	782b      	ldrb	r3, [r5, #0]
    559a:	079b      	lsls	r3, r3, #30
    559c:	f53f af5f 	bmi.w	545e <bt_le_ext_adv_start+0x16>
    55a0:	2140      	movs	r1, #64	; 0x40
    55a2:	4808      	ldr	r0, [pc, #32]	; (55c4 <bt_le_ext_adv_start+0x17c>)
    55a4:	f7fe f885 	bl	36b2 <atomic_or>
    55a8:	e759      	b.n	545e <bt_le_ext_adv_start+0x16>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    55aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
    55ac:	4639      	mov	r1, r7
    55ae:	f242 0009 	movw	r0, #8201	; 0x2009
    55b2:	f7fe fa73 	bl	3a9c <set_ad>
		if (err) {
    55b6:	4604      	mov	r4, r0
    55b8:	2800      	cmp	r0, #0
    55ba:	d0d3      	beq.n	5564 <bt_le_ext_adv_start+0x11c>
    55bc:	e74f      	b.n	545e <bt_le_ext_adv_start+0x16>
		return -EALREADY;
    55be:	f06f 0444 	mvn.w	r4, #68	; 0x44
    55c2:	e74c      	b.n	545e <bt_le_ext_adv_start+0x16>
    55c4:	2000de90 	.word	0x2000de90
    55c8:	2000de20 	.word	0x2000de20
    55cc:	00021893 	.word	0x00021893

000055d0 <bt_le_adv_start>:
//#endif /*CONFIG_EXT_ADV*/

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    55d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    55d2:	b085      	sub	sp, #20
    55d4:	4605      	mov	r5, r0
    55d6:	460c      	mov	r4, r1
    55d8:	4617      	mov	r7, r2
    55da:	461e      	mov	r6, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct net_buf *buf;
	int err;

	if (!valid_adv_param(param)) {
    55dc:	f7fe f84c 	bl	3678 <valid_adv_param>
    55e0:	b920      	cbnz	r0, 55ec <bt_le_adv_start+0x1c>
		return -EINVAL;
    55e2:	f06f 0415 	mvn.w	r4, #21
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    55e6:	4620      	mov	r0, r4
    55e8:	b005      	add	sp, #20
    55ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    55ec:	2105      	movs	r1, #5
    55ee:	483e      	ldr	r0, [pc, #248]	; (56e8 <bt_le_adv_start+0x118>)
    55f0:	f7fe f870 	bl	36d4 <atomic_test_bit>
    55f4:	2800      	cmp	r0, #0
    55f6:	d171      	bne.n	56dc <bt_le_adv_start+0x10c>
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    55f8:	4621      	mov	r1, r4
    55fa:	463a      	mov	r2, r7
    55fc:	f242 0008 	movw	r0, #8200	; 0x2008
    5600:	f7fe fa4c 	bl	3a9c <set_ad>
	if (err) {
    5604:	4604      	mov	r4, r0
    5606:	2800      	cmp	r0, #0
    5608:	d1ed      	bne.n	55e6 <bt_le_adv_start+0x16>
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    560a:	2e00      	cmp	r6, #0
    560c:	d146      	bne.n	569c <bt_le_adv_start+0xcc>
    560e:	782b      	ldrb	r3, [r5, #0]
    5610:	07d9      	lsls	r1, r3, #31
    5612:	d443      	bmi.n	569c <bt_le_adv_start+0xcc>
	memset(&set_param, 0, sizeof(set_param));
    5614:	220f      	movs	r2, #15
    5616:	2100      	movs	r1, #0
    5618:	4668      	mov	r0, sp
    561a:	f7fb f8fb 	bl	814 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    561e:	886b      	ldrh	r3, [r5, #2]
    5620:	f8ad 3000 	strh.w	r3, [sp]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    5624:	88ab      	ldrh	r3, [r5, #4]
    5626:	f8ad 3002 	strh.w	r3, [sp, #2]
	set_param.channel_map  = 0x07;
    562a:	2307      	movs	r3, #7
    562c:	f88d 300d 	strb.w	r3, [sp, #13]
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    5630:	782b      	ldrb	r3, [r5, #0]
    5632:	07da      	lsls	r2, r3, #31
    5634:	d53c      	bpl.n	56b0 <bt_le_adv_start+0xe0>
			if (atomic_test_bit(bt_dev.flags,
    5636:	2102      	movs	r1, #2
    5638:	482b      	ldr	r0, [pc, #172]	; (56e8 <bt_le_adv_start+0x118>)
    563a:	4c2c      	ldr	r4, [pc, #176]	; (56ec <bt_le_adv_start+0x11c>)
    563c:	f7fe f84a 	bl	36d4 <atomic_test_bit>
    5640:	b110      	cbz	r0, 5648 <bt_le_adv_start+0x78>
				set_random_address(&bt_dev.id_addr.a);
    5642:	1c60      	adds	r0, r4, #1
    5644:	f7fe f948 	bl	38d8 <set_random_address>
			set_param.own_addr_type = bt_dev.id_addr.type;
    5648:	7823      	ldrb	r3, [r4, #0]
    564a:	f88d 3005 	strb.w	r3, [sp, #5]
		set_param.type = BT_LE_ADV_IND;
    564e:	2300      	movs	r3, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    5650:	210f      	movs	r1, #15
    5652:	f242 0006 	movw	r0, #8198	; 0x2006
			set_param.type = BT_LE_ADV_NONCONN_IND;
    5656:	f88d 3004 	strb.w	r3, [sp, #4]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    565a:	f7fe f8cf 	bl	37fc <bt_hci_cmd_create>
	if (!buf) {
    565e:	4604      	mov	r4, r0
    5660:	2800      	cmp	r0, #0
    5662:	d03e      	beq.n	56e2 <bt_le_adv_start+0x112>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    5664:	220f      	movs	r2, #15
    5666:	4669      	mov	r1, sp
    5668:	3008      	adds	r0, #8
    566a:	f012 fc79 	bl	17f60 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    566e:	4621      	mov	r1, r4
    5670:	2200      	movs	r2, #0
    5672:	f242 0006 	movw	r0, #8198	; 0x2006
    5676:	f7fe f8f1 	bl	385c <bt_hci_cmd_send_sync>
	if (err) {
    567a:	4604      	mov	r4, r0
    567c:	2800      	cmp	r0, #0
    567e:	d1b2      	bne.n	55e6 <bt_le_adv_start+0x16>
	err = set_advertise_enable(true);
    5680:	2001      	movs	r0, #1
    5682:	f7fe f9e1 	bl	3a48 <set_advertise_enable>
	if (err) {
    5686:	4604      	mov	r4, r0
    5688:	2800      	cmp	r0, #0
    568a:	d1ac      	bne.n	55e6 <bt_le_adv_start+0x16>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    568c:	782b      	ldrb	r3, [r5, #0]
    568e:	079b      	lsls	r3, r3, #30
    5690:	d4a9      	bmi.n	55e6 <bt_le_adv_start+0x16>
    5692:	2140      	movs	r1, #64	; 0x40
    5694:	4814      	ldr	r0, [pc, #80]	; (56e8 <bt_le_adv_start+0x118>)
    5696:	f7fe f80c 	bl	36b2 <atomic_or>
    569a:	e7a4      	b.n	55e6 <bt_le_adv_start+0x16>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    569c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    569e:	4631      	mov	r1, r6
    56a0:	f242 0009 	movw	r0, #8201	; 0x2009
    56a4:	f7fe f9fa 	bl	3a9c <set_ad>
		if (err) {
    56a8:	4604      	mov	r4, r0
    56aa:	2800      	cmp	r0, #0
    56ac:	d0b2      	beq.n	5614 <bt_le_adv_start+0x44>
    56ae:	e79a      	b.n	55e6 <bt_le_adv_start+0x16>
		if (param->own_addr) {
    56b0:	68a8      	ldr	r0, [r5, #8]
    56b2:	b170      	cbz	r0, 56d2 <bt_le_adv_start+0x102>
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    56b4:	7943      	ldrb	r3, [r0, #5]
    56b6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    56ba:	d192      	bne.n	55e2 <bt_le_adv_start+0x12>
			err = set_random_address(param->own_addr);
    56bc:	f7fe f90c 	bl	38d8 <set_random_address>
			err = le_set_private_addr();
    56c0:	4604      	mov	r4, r0
		if (err) {
    56c2:	2800      	cmp	r0, #0
    56c4:	d18f      	bne.n	55e6 <bt_le_adv_start+0x16>
		set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    56c6:	2301      	movs	r3, #1
    56c8:	f88d 3005 	strb.w	r3, [sp, #5]
		if (sd) {
    56cc:	b126      	cbz	r6, 56d8 <bt_le_adv_start+0x108>
			set_param.type = BT_LE_ADV_SCAN_IND;
    56ce:	2302      	movs	r3, #2
    56d0:	e7be      	b.n	5650 <bt_le_adv_start+0x80>
			err = le_set_private_addr();
    56d2:	f7fe f92f 	bl	3934 <le_set_private_addr>
    56d6:	e7f3      	b.n	56c0 <bt_le_adv_start+0xf0>
			set_param.type = BT_LE_ADV_NONCONN_IND;
    56d8:	2303      	movs	r3, #3
    56da:	e7b9      	b.n	5650 <bt_le_adv_start+0x80>
		return -EALREADY;
    56dc:	f06f 0444 	mvn.w	r4, #68	; 0x44
    56e0:	e781      	b.n	55e6 <bt_le_adv_start+0x16>
		return -ENOBUFS;
    56e2:	f06f 0436 	mvn.w	r4, #54	; 0x36
    56e6:	e77e      	b.n	55e6 <bt_le_adv_start+0x16>
    56e8:	2000de90 	.word	0x2000de90
    56ec:	2000de20 	.word	0x2000de20

000056f0 <bt_le_ext_adv_stop>:

int bt_le_ext_adv_stop(void)
{
    56f0:	b510      	push	{r4, lr}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    56f2:	f06f 0140 	mvn.w	r1, #64	; 0x40
    56f6:	481b      	ldr	r0, [pc, #108]	; (5764 <bt_le_ext_adv_stop+0x74>)
    56f8:	f7fd fff9 	bl	36ee <atomic_and>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    56fc:	2105      	movs	r1, #5
    56fe:	4819      	ldr	r0, [pc, #100]	; (5764 <bt_le_ext_adv_stop+0x74>)
    5700:	f7fd ffe8 	bl	36d4 <atomic_test_bit>
    5704:	b910      	cbnz	r0, 570c <bt_le_ext_adv_stop+0x1c>
		return 0;
    5706:	2400      	movs	r4, #0
			le_set_private_addr();
		}
	}

	return 0;
}
    5708:	4620      	mov	r0, r4
    570a:	bd10      	pop	{r4, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, 1);
    570c:	2101      	movs	r1, #1
    570e:	f242 0039 	movw	r0, #8249	; 0x2039
    5712:	f7fe f873 	bl	37fc <bt_hci_cmd_create>
	if (!buf) {
    5716:	4604      	mov	r4, r0
    5718:	b300      	cbz	r0, 575c <bt_le_ext_adv_stop+0x6c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    571a:	2100      	movs	r1, #0
    571c:	3008      	adds	r0, #8
    571e:	f012 fc28 	bl	17f72 <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, buf, NULL);
    5722:	4621      	mov	r1, r4
    5724:	2200      	movs	r2, #0
    5726:	f242 0039 	movw	r0, #8249	; 0x2039
    572a:	f7fe f897 	bl	385c <bt_hci_cmd_send_sync>
	if (err) {
    572e:	4604      	mov	r4, r0
    5730:	2800      	cmp	r0, #0
    5732:	d1e9      	bne.n	5708 <bt_le_ext_adv_stop+0x18>
    5734:	f06f 0120 	mvn.w	r1, #32
    5738:	480a      	ldr	r0, [pc, #40]	; (5764 <bt_le_ext_adv_stop+0x74>)
    573a:	f7fd ffd8 	bl	36ee <atomic_and>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    573e:	2107      	movs	r1, #7
    5740:	4808      	ldr	r0, [pc, #32]	; (5764 <bt_le_ext_adv_stop+0x74>)
    5742:	f7fd ffc7 	bl	36d4 <atomic_test_bit>
    5746:	2800      	cmp	r0, #0
    5748:	d0dd      	beq.n	5706 <bt_le_ext_adv_stop+0x16>
		    atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    574a:	2109      	movs	r1, #9
    574c:	4805      	ldr	r0, [pc, #20]	; (5764 <bt_le_ext_adv_stop+0x74>)
    574e:	f7fd ffc1 	bl	36d4 <atomic_test_bit>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    5752:	2800      	cmp	r0, #0
    5754:	d0d7      	beq.n	5706 <bt_le_ext_adv_stop+0x16>
			le_set_private_addr();
    5756:	f7fe f8ed 	bl	3934 <le_set_private_addr>
    575a:	e7d5      	b.n	5708 <bt_le_ext_adv_stop+0x18>
		return -ENOBUFS;
    575c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    5760:	e7d2      	b.n	5708 <bt_le_ext_adv_stop+0x18>
    5762:	bf00      	nop
    5764:	2000de90 	.word	0x2000de90

00005768 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    5768:	b510      	push	{r4, lr}
    576a:	f06f 0140 	mvn.w	r1, #64	; 0x40
    576e:	4810      	ldr	r0, [pc, #64]	; (57b0 <bt_le_adv_stop+0x48>)
    5770:	f7fd ffbd 	bl	36ee <atomic_and>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    5774:	2105      	movs	r1, #5
    5776:	480e      	ldr	r0, [pc, #56]	; (57b0 <bt_le_adv_stop+0x48>)
    5778:	f7fd ffac 	bl	36d4 <atomic_test_bit>
    577c:	b910      	cbnz	r0, 5784 <bt_le_adv_stop+0x1c>
		return 0;
    577e:	2400      	movs	r4, #0
			le_set_private_addr();
		}
	}

	return 0;
}
    5780:	4620      	mov	r0, r4
    5782:	bd10      	pop	{r4, pc}
	err = set_advertise_enable(false);
    5784:	2000      	movs	r0, #0
    5786:	f7fe f95f 	bl	3a48 <set_advertise_enable>
	if (err) {
    578a:	4604      	mov	r4, r0
    578c:	2800      	cmp	r0, #0
    578e:	d1f7      	bne.n	5780 <bt_le_adv_stop+0x18>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    5790:	2107      	movs	r1, #7
    5792:	4807      	ldr	r0, [pc, #28]	; (57b0 <bt_le_adv_stop+0x48>)
    5794:	f7fd ff9e 	bl	36d4 <atomic_test_bit>
    5798:	2800      	cmp	r0, #0
    579a:	d0f0      	beq.n	577e <bt_le_adv_stop+0x16>
		    atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    579c:	2109      	movs	r1, #9
    579e:	4804      	ldr	r0, [pc, #16]	; (57b0 <bt_le_adv_stop+0x48>)
    57a0:	f7fd ff98 	bl	36d4 <atomic_test_bit>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    57a4:	2800      	cmp	r0, #0
    57a6:	d0ea      	beq.n	577e <bt_le_adv_stop+0x16>
			le_set_private_addr();
    57a8:	f7fe f8c4 	bl	3934 <le_set_private_addr>
    57ac:	e7e8      	b.n	5780 <bt_le_adv_stop+0x18>
    57ae:	bf00      	nop
    57b0:	2000de90 	.word	0x2000de90

000057b4 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    57b4:	b570      	push	{r4, r5, r6, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    57b6:	7803      	ldrb	r3, [r0, #0]
    57b8:	2b01      	cmp	r3, #1
{
    57ba:	4605      	mov	r5, r0
    57bc:	460e      	mov	r6, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    57be:	d810      	bhi.n	57e2 <bt_le_scan_start+0x2e>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    57c0:	7843      	ldrb	r3, [r0, #1]
    57c2:	2b01      	cmp	r3, #1
    57c4:	d80d      	bhi.n	57e2 <bt_le_scan_start+0x2e>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    57c6:	8841      	ldrh	r1, [r0, #2]
    57c8:	1f0b      	subs	r3, r1, #4
    57ca:	b29b      	uxth	r3, r3
    57cc:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    57d0:	4283      	cmp	r3, r0
    57d2:	d806      	bhi.n	57e2 <bt_le_scan_start+0x2e>
	if (param->window < 0x0004 || param->window > 0x4000) {
    57d4:	88aa      	ldrh	r2, [r5, #4]
    57d6:	1f13      	subs	r3, r2, #4
    57d8:	b29b      	uxth	r3, r3
    57da:	4283      	cmp	r3, r0
    57dc:	d801      	bhi.n	57e2 <bt_le_scan_start+0x2e>
	if (param->window > param->interval) {
    57de:	4291      	cmp	r1, r2
    57e0:	d22b      	bcs.n	583a <bt_le_scan_start+0x86>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    57e2:	f06f 0415 	mvn.w	r4, #21
    57e6:	e00e      	b.n	5806 <bt_le_scan_start+0x52>
	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    57e8:	2107      	movs	r1, #7
    57ea:	4819      	ldr	r0, [pc, #100]	; (5850 <bt_le_scan_start+0x9c>)
    57ec:	f7fd ff72 	bl	36d4 <atomic_test_bit>
    57f0:	b158      	cbz	r0, 580a <bt_le_scan_start+0x56>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    57f2:	4610      	mov	r0, r2
    57f4:	f7fe f8f4 	bl	39e0 <set_le_scan_enable>
		if (err) {
    57f8:	4604      	mov	r4, r0
    57fa:	b130      	cbz	r0, 580a <bt_le_scan_start+0x56>
    57fc:	f46f 7180 	mvn.w	r1, #256	; 0x100
    5800:	4813      	ldr	r0, [pc, #76]	; (5850 <bt_le_scan_start+0x9c>)
    5802:	f7fd ff74 	bl	36ee <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    5806:	4620      	mov	r0, r4
    5808:	bd70      	pop	{r4, r5, r6, pc}
	if (param->filter_dup) {
    580a:	786b      	ldrb	r3, [r5, #1]
    580c:	b17b      	cbz	r3, 582e <bt_le_scan_start+0x7a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    580e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    5812:	480f      	ldr	r0, [pc, #60]	; (5850 <bt_le_scan_start+0x9c>)
    5814:	f7fd ff4d 	bl	36b2 <atomic_or>
	err = start_le_scan(param->type, param->interval, param->window);
    5818:	88aa      	ldrh	r2, [r5, #4]
    581a:	8869      	ldrh	r1, [r5, #2]
    581c:	7828      	ldrb	r0, [r5, #0]
    581e:	f7fe fb29 	bl	3e74 <start_le_scan>
	if (err) {
    5822:	4604      	mov	r4, r0
    5824:	2800      	cmp	r0, #0
    5826:	d1e9      	bne.n	57fc <bt_le_scan_start+0x48>
	scan_dev_found_cb = cb;
    5828:	4b0a      	ldr	r3, [pc, #40]	; (5854 <bt_le_scan_start+0xa0>)
    582a:	601e      	str	r6, [r3, #0]
	return 0;
    582c:	e7eb      	b.n	5806 <bt_le_scan_start+0x52>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    582e:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    5832:	4807      	ldr	r0, [pc, #28]	; (5850 <bt_le_scan_start+0x9c>)
    5834:	f7fd ff5b 	bl	36ee <atomic_and>
    5838:	e7ee      	b.n	5818 <bt_le_scan_start+0x64>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    583a:	f44f 7180 	mov.w	r1, #256	; 0x100
    583e:	4804      	ldr	r0, [pc, #16]	; (5850 <bt_le_scan_start+0x9c>)
    5840:	f7fd ff37 	bl	36b2 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5844:	f410 7280 	ands.w	r2, r0, #256	; 0x100
    5848:	d0ce      	beq.n	57e8 <bt_le_scan_start+0x34>
		return -EALREADY;
    584a:	f06f 0444 	mvn.w	r4, #68	; 0x44
    584e:	e7da      	b.n	5806 <bt_le_scan_start+0x52>
    5850:	2000de90 	.word	0x2000de90
    5854:	20000404 	.word	0x20000404

00005858 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    5858:	b508      	push	{r3, lr}
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    585a:	2108      	movs	r1, #8
    585c:	4806      	ldr	r0, [pc, #24]	; (5878 <bt_le_scan_stop+0x20>)
    585e:	f7fd ff57 	bl	3710 <atomic_test_and_clear_bit>
    5862:	b130      	cbz	r0, 5872 <bt_le_scan_stop+0x1a>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    5864:	4b05      	ldr	r3, [pc, #20]	; (587c <bt_le_scan_stop+0x24>)
    5866:	2000      	movs	r0, #0
    5868:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
    586a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    586e:	f7fe bb51 	b.w	3f14 <bt_le_scan_update>
}
    5872:	f06f 0044 	mvn.w	r0, #68	; 0x44
    5876:	bd08      	pop	{r3, pc}
    5878:	2000de90 	.word	0x2000de90
    587c:	20000404 	.word	0x20000404

00005880 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    5880:	b538      	push	{r3, r4, r5, lr}
    5882:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    5884:	4805      	ldr	r0, [pc, #20]	; (589c <bt_buf_get_rx+0x1c>)
    5886:	f012 fad7 	bl	17e38 <net_buf_alloc_fixed>
#endif

	if (buf) {
    588a:	4604      	mov	r4, r0
    588c:	b120      	cbz	r0, 5898 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    588e:	2100      	movs	r1, #0
    5890:	3008      	adds	r0, #8
    5892:	f012 faf0 	bl	17e76 <net_buf_simple_reserve>
    5896:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    5898:	4620      	mov	r0, r4
    589a:	bd38      	pop	{r3, r4, r5, pc}
    589c:	2000ed8c 	.word	0x2000ed8c

000058a0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    58a0:	b510      	push	{r4, lr}
    58a2:	4601      	mov	r1, r0
	__asm__ volatile(
    58a4:	f04f 0320 	mov.w	r3, #32
    58a8:	f3ef 8011 	mrs	r0, BASEPRI
    58ac:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    58b0:	4a0b      	ldr	r2, [pc, #44]	; (58e0 <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    58b2:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    58b4:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    58b8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    58bc:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    58c0:	b924      	cbnz	r4, 58cc <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    58c2:	2001      	movs	r0, #1
}
    58c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    58c8:	f7ff bfda 	b.w	5880 <bt_buf_get_rx>
    58cc:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    58ce:	f104 0008 	add.w	r0, r4, #8
    58d2:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    58d4:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    58d6:	4619      	mov	r1, r3
    58d8:	f012 facd 	bl	17e76 <net_buf_simple_reserve>
}
    58dc:	4620      	mov	r0, r4
    58de:	bd10      	pop	{r4, pc}
    58e0:	2000de20 	.word	0x2000de20

000058e4 <bt_pub_key_gen>:
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    58e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    58e8:	4e1d      	ldr	r6, [pc, #116]	; (5960 <bt_pub_key_gen+0x7c>)
    58ea:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
    58ee:	f003 0306 	and.w	r3, r3, #6
    58f2:	2b06      	cmp	r3, #6
{
    58f4:	4607      	mov	r7, r0
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    58f6:	d130      	bne.n	595a <bt_pub_key_gen+0x76>
	    !(bt_dev.supported_commands[34] & 0x04)) {
		BT_WARN("ECC HCI commands not available");
		return -ENOTSUP;
	}

	new_cb->_next = pub_key_cb;
    58f8:	4d1a      	ldr	r5, [pc, #104]	; (5964 <bt_pub_key_gen+0x80>)
    58fa:	682b      	ldr	r3, [r5, #0]
    58fc:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    58fe:	6028      	str	r0, [r5, #0]
    5900:	2110      	movs	r1, #16
    5902:	f106 0070 	add.w	r0, r6, #112	; 0x70
    5906:	f7fd fed4 	bl	36b2 <atomic_or>

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    590a:	f010 0810 	ands.w	r8, r0, #16
    590e:	d003      	beq.n	5918 <bt_pub_key_gen+0x34>
		return 0;
    5910:	2400      	movs	r4, #0
			cb->func(NULL);
		}
	}

	return 0;
}
    5912:	4620      	mov	r0, r4
    5914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5918:	f06f 0108 	mvn.w	r1, #8
    591c:	f106 0070 	add.w	r0, r6, #112	; 0x70
    5920:	f7fd fee5 	bl	36ee <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    5924:	4642      	mov	r2, r8
    5926:	4641      	mov	r1, r8
    5928:	f242 0025 	movw	r0, #8229	; 0x2025
    592c:	f7fd ff96 	bl	385c <bt_hci_cmd_send_sync>
	if (err) {
    5930:	4604      	mov	r4, r0
    5932:	b140      	cbz	r0, 5946 <bt_pub_key_gen+0x62>
    5934:	f06f 0110 	mvn.w	r1, #16
    5938:	f106 0070 	add.w	r0, r6, #112	; 0x70
    593c:	f7fd fed7 	bl	36ee <atomic_and>
		pub_key_cb = NULL;
    5940:	f8c5 8000 	str.w	r8, [r5]
		return err;
    5944:	e7e5      	b.n	5912 <bt_pub_key_gen+0x2e>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    5946:	682c      	ldr	r4, [r5, #0]
    5948:	2c00      	cmp	r4, #0
    594a:	d0e1      	beq.n	5910 <bt_pub_key_gen+0x2c>
		if (cb != new_cb) {
    594c:	42bc      	cmp	r4, r7
    594e:	d002      	beq.n	5956 <bt_pub_key_gen+0x72>
			cb->func(NULL);
    5950:	6823      	ldr	r3, [r4, #0]
    5952:	2000      	movs	r0, #0
    5954:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    5956:	6864      	ldr	r4, [r4, #4]
    5958:	e7f6      	b.n	5948 <bt_pub_key_gen+0x64>
		return -ENOTSUP;
    595a:	f06f 0422 	mvn.w	r4, #34	; 0x22
    595e:	e7d8      	b.n	5912 <bt_pub_key_gen+0x2e>
    5960:	2000de20 	.word	0x2000de20
    5964:	200003fc 	.word	0x200003fc

00005968 <bt_dh_key_gen>:

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    5968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    596a:	4c1a      	ldr	r4, [pc, #104]	; (59d4 <bt_dh_key_gen+0x6c>)
    596c:	6823      	ldr	r3, [r4, #0]
{
    596e:	4607      	mov	r7, r0
    5970:	460a      	mov	r2, r1
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    5972:	b113      	cbz	r3, 597a <bt_dh_key_gen+0x12>
		return -EBUSY;
    5974:	f06f 000f 	mvn.w	r0, #15
    5978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    597a:	2104      	movs	r1, #4
    597c:	4816      	ldr	r0, [pc, #88]	; (59d8 <bt_dh_key_gen+0x70>)
    597e:	f7fd fea9 	bl	36d4 <atomic_test_bit>
    5982:	4606      	mov	r6, r0
    5984:	2800      	cmp	r0, #0
    5986:	d1f5      	bne.n	5974 <bt_dh_key_gen+0xc>
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    5988:	2103      	movs	r1, #3
    598a:	4813      	ldr	r0, [pc, #76]	; (59d8 <bt_dh_key_gen+0x70>)
    598c:	f7fd fea2 	bl	36d4 <atomic_test_bit>
    5990:	b1e0      	cbz	r0, 59cc <bt_dh_key_gen+0x64>
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    5992:	2140      	movs	r1, #64	; 0x40
    5994:	f242 0026 	movw	r0, #8230	; 0x2026
	dh_key_cb = cb;
    5998:	6022      	str	r2, [r4, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    599a:	f7fd ff2f 	bl	37fc <bt_hci_cmd_create>
	if (!buf) {
    599e:	4605      	mov	r5, r0
    59a0:	b918      	cbnz	r0, 59aa <bt_dh_key_gen+0x42>
		dh_key_cb = NULL;
    59a2:	6020      	str	r0, [r4, #0]
		return -ENOBUFS;
    59a4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    59a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	cp = net_buf_add(buf, sizeof(*cp));
    59aa:	2140      	movs	r1, #64	; 0x40
    59ac:	3008      	adds	r0, #8
    59ae:	f012 fad1 	bl	17f54 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    59b2:	2240      	movs	r2, #64	; 0x40
    59b4:	4639      	mov	r1, r7
    59b6:	f7fa ff01 	bl	7bc <memcpy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    59ba:	4632      	mov	r2, r6
    59bc:	4629      	mov	r1, r5
    59be:	f242 0026 	movw	r0, #8230	; 0x2026
    59c2:	f7fd ff4b 	bl	385c <bt_hci_cmd_send_sync>
	if (err) {
    59c6:	b118      	cbz	r0, 59d0 <bt_dh_key_gen+0x68>
		dh_key_cb = NULL;
    59c8:	6026      	str	r6, [r4, #0]
		return err;
    59ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EADDRNOTAVAIL;
    59cc:	f06f 0030 	mvn.w	r0, #48	; 0x30
	}

	return 0;
}
    59d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    59d2:	bf00      	nop
    59d4:	200003b4 	.word	0x200003b4
    59d8:	2000de90 	.word	0x2000de90

000059dc <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    59dc:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    59de:	4b06      	ldr	r3, [pc, #24]	; (59f8 <notify_connected+0x1c>)
    59e0:	681c      	ldr	r4, [r3, #0]
{
    59e2:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    59e4:	b904      	cbnz	r4, 59e8 <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    59e6:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    59e8:	6823      	ldr	r3, [r4, #0]
    59ea:	b113      	cbz	r3, 59f2 <notify_connected+0x16>
			cb->connected(conn, conn->err);
    59ec:	7ae9      	ldrb	r1, [r5, #11]
    59ee:	4628      	mov	r0, r5
    59f0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    59f2:	69a4      	ldr	r4, [r4, #24]
    59f4:	e7f6      	b.n	59e4 <notify_connected+0x8>
    59f6:	bf00      	nop
    59f8:	20000470 	.word	0x20000470

000059fc <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    59fc:	f3bf 8f5b 	dmb	ish
    5a00:	6800      	ldr	r0, [r0, #0]
    5a02:	f3bf 8f5b 	dmb	ish
}
    5a06:	4770      	bx	lr

00005a08 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    5a08:	89c3      	ldrh	r3, [r0, #14]
{
    5a0a:	b510      	push	{r4, lr}
    5a0c:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    5a0e:	b12b      	cbz	r3, 5a1c <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    5a10:	6900      	ldr	r0, [r0, #16]
    5a12:	f012 fa41 	bl	17e98 <net_buf_unref>
	conn->rx = NULL;
    5a16:	2300      	movs	r3, #0
    5a18:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0;
    5a1a:	81e3      	strh	r3, [r4, #14]
    5a1c:	bd10      	pop	{r4, pc}

00005a1e <atomic_dec>:
}
    5a1e:	f3bf 8f5b 	dmb	ish
    5a22:	e850 3f00 	ldrex	r3, [r0]
    5a26:	1e5a      	subs	r2, r3, #1
    5a28:	e840 2100 	strex	r1, r2, [r0]
    5a2c:	2900      	cmp	r1, #0
    5a2e:	d1f8      	bne.n	5a22 <atomic_dec+0x4>
    5a30:	f3bf 8f5b 	dmb	ish
    5a34:	4618      	mov	r0, r3
    5a36:	4770      	bx	lr

00005a38 <atomic_inc>:
}
    5a38:	f3bf 8f5b 	dmb	ish
    5a3c:	e850 3f00 	ldrex	r3, [r0]
    5a40:	1c5a      	adds	r2, r3, #1
    5a42:	e840 2100 	strex	r1, r2, [r0]
    5a46:	2900      	cmp	r1, #0
    5a48:	d1f8      	bne.n	5a3c <atomic_inc+0x4>
    5a4a:	f3bf 8f5b 	dmb	ish
    5a4e:	4618      	mov	r0, r3
    5a50:	4770      	bx	lr
	...

00005a54 <bt_conn_get_pkts>:
}
    5a54:	4800      	ldr	r0, [pc, #0]	; (5a58 <bt_conn_get_pkts+0x4>)
    5a56:	4770      	bx	lr
    5a58:	2000deac 	.word	0x2000deac

00005a5c <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    5a5c:	4b08      	ldr	r3, [pc, #32]	; (5a80 <notify_le_param_updated+0x24>)
{
    5a5e:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    5a60:	681c      	ldr	r4, [r3, #0]
{
    5a62:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    5a64:	b904      	cbnz	r4, 5a68 <notify_le_param_updated+0xc>
}
    5a66:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    5a68:	68e6      	ldr	r6, [r4, #12]
    5a6a:	b13e      	cbz	r6, 5a7c <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    5a6c:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    5a70:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    5a74:	f8b5 105e 	ldrh.w	r1, [r5, #94]	; 0x5e
    5a78:	4628      	mov	r0, r5
    5a7a:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    5a7c:	69a4      	ldr	r4, [r4, #24]
    5a7e:	e7f1      	b.n	5a64 <notify_le_param_updated+0x8>
    5a80:	20000470 	.word	0x20000470

00005a84 <le_param_req>:
{
    5a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a86:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    5a88:	4608      	mov	r0, r1
{
    5a8a:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    5a8c:	f7fe f852 	bl	3b34 <bt_le_conn_params_valid>
    5a90:	4605      	mov	r5, r0
    5a92:	b910      	cbnz	r0, 5a9a <le_param_req+0x16>
		return false;
    5a94:	2500      	movs	r5, #0
}
    5a96:	4628      	mov	r0, r5
    5a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    5a9a:	4b09      	ldr	r3, [pc, #36]	; (5ac0 <le_param_req+0x3c>)
    5a9c:	681c      	ldr	r4, [r3, #0]
    5a9e:	2c00      	cmp	r4, #0
    5aa0:	d0f9      	beq.n	5a96 <le_param_req+0x12>
		if (!cb->le_param_req) {
    5aa2:	68a3      	ldr	r3, [r4, #8]
    5aa4:	b90b      	cbnz	r3, 5aaa <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    5aa6:	69a4      	ldr	r4, [r4, #24]
    5aa8:	e7f9      	b.n	5a9e <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    5aaa:	4631      	mov	r1, r6
    5aac:	4638      	mov	r0, r7
    5aae:	4798      	blx	r3
    5ab0:	2800      	cmp	r0, #0
    5ab2:	d0ef      	beq.n	5a94 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    5ab4:	4630      	mov	r0, r6
    5ab6:	f7fe f83d 	bl	3b34 <bt_le_conn_params_valid>
    5aba:	2800      	cmp	r0, #0
    5abc:	d1f3      	bne.n	5aa6 <le_param_req+0x22>
    5abe:	e7e9      	b.n	5a94 <le_param_req+0x10>
    5ac0:	20000470 	.word	0x20000470

00005ac4 <bt_conn_identity_resolved>:
{
    5ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    5ac6:	78c3      	ldrb	r3, [r0, #3]
{
    5ac8:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    5aca:	b93b      	cbnz	r3, 5adc <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    5acc:	f100 0656 	add.w	r6, r0, #86	; 0x56
	for (cb = callback_list; cb; cb = cb->_next) {
    5ad0:	4b08      	ldr	r3, [pc, #32]	; (5af4 <bt_conn_identity_resolved+0x30>)
    5ad2:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    5ad4:	f104 0748 	add.w	r7, r4, #72	; 0x48
	for (cb = callback_list; cb; cb = cb->_next) {
    5ad8:	b91d      	cbnz	r5, 5ae2 <bt_conn_identity_resolved+0x1e>
}
    5ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    5adc:	f100 064f 	add.w	r6, r0, #79	; 0x4f
    5ae0:	e7f6      	b.n	5ad0 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    5ae2:	692b      	ldr	r3, [r5, #16]
    5ae4:	b11b      	cbz	r3, 5aee <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    5ae6:	463a      	mov	r2, r7
    5ae8:	4631      	mov	r1, r6
    5aea:	4620      	mov	r0, r4
    5aec:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    5aee:	69ad      	ldr	r5, [r5, #24]
    5af0:	e7f2      	b.n	5ad8 <bt_conn_identity_resolved+0x14>
    5af2:	bf00      	nop
    5af4:	20000470 	.word	0x20000470

00005af8 <bt_conn_le_start_encryption>:
{
    5af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    5afc:	211c      	movs	r1, #28
{
    5afe:	4682      	mov	sl, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    5b00:	f242 0019 	movw	r0, #8217	; 0x2019
{
    5b04:	4691      	mov	r9, r2
    5b06:	4698      	mov	r8, r3
    5b08:	f8bd 4020 	ldrh.w	r4, [sp, #32]
    5b0c:	9f09      	ldr	r7, [sp, #36]	; 0x24
    5b0e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    5b10:	f7fd fe74 	bl	37fc <bt_hci_cmd_create>
	if (!buf) {
    5b14:	4606      	mov	r6, r0
    5b16:	b320      	cbz	r0, 5b62 <bt_conn_le_start_encryption+0x6a>
	cp = net_buf_add(buf, sizeof(*cp));
    5b18:	211c      	movs	r1, #28
    5b1a:	3008      	adds	r0, #8
    5b1c:	f012 fa1a 	bl	17f54 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5b20:	4603      	mov	r3, r0
    5b22:	f8ba 2000 	ldrh.w	r2, [sl]
    5b26:	f823 2b02 	strh.w	r2, [r3], #2
	cp->rand = rand;
    5b2a:	f8c0 9002 	str.w	r9, [r0, #2]
    5b2e:	f8c3 8004 	str.w	r8, [r3, #4]
	cp->ediv = ediv;
    5b32:	8144      	strh	r4, [r0, #10]
	memcpy(cp->ltk, ltk, len);
    5b34:	f100 040c 	add.w	r4, r0, #12
    5b38:	462a      	mov	r2, r5
    5b3a:	4639      	mov	r1, r7
    5b3c:	4620      	mov	r0, r4
    5b3e:	f7fa fe3d 	bl	7bc <memcpy>
	if (len < sizeof(cp->ltk)) {
    5b42:	2d0f      	cmp	r5, #15
    5b44:	d805      	bhi.n	5b52 <bt_conn_le_start_encryption+0x5a>
		memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
    5b46:	f1c5 0210 	rsb	r2, r5, #16
    5b4a:	2100      	movs	r1, #0
    5b4c:	1960      	adds	r0, r4, r5
    5b4e:	f7fa fe61 	bl	814 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
    5b52:	4631      	mov	r1, r6
    5b54:	2200      	movs	r2, #0
    5b56:	f242 0019 	movw	r0, #8217	; 0x2019
}
    5b5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
    5b5e:	f7fd be7d 	b.w	385c <bt_hci_cmd_send_sync>
}
    5b62:	f06f 0036 	mvn.w	r0, #54	; 0x36
    5b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00005b6c <bt_conn_security_changed>:
{
    5b6c:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    5b6e:	4b06      	ldr	r3, [pc, #24]	; (5b88 <bt_conn_security_changed+0x1c>)
    5b70:	681c      	ldr	r4, [r3, #0]
{
    5b72:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    5b74:	b904      	cbnz	r4, 5b78 <bt_conn_security_changed+0xc>
}
    5b76:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->security_changed) {
    5b78:	6963      	ldr	r3, [r4, #20]
    5b7a:	b113      	cbz	r3, 5b82 <bt_conn_security_changed+0x16>
			cb->security_changed(conn, conn->sec_level);
    5b7c:	7a29      	ldrb	r1, [r5, #8]
    5b7e:	4628      	mov	r0, r5
    5b80:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    5b82:	69a4      	ldr	r4, [r4, #24]
    5b84:	e7f6      	b.n	5b74 <bt_conn_security_changed+0x8>
    5b86:	bf00      	nop
    5b88:	20000470 	.word	0x20000470

00005b8c <bt_conn_security>:
{
    5b8c:	b530      	push	{r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    5b8e:	7b03      	ldrb	r3, [r0, #12]
    5b90:	2b03      	cmp	r3, #3
{
    5b92:	b085      	sub	sp, #20
    5b94:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    5b96:	d156      	bne.n	5c46 <bt_conn_security+0xba>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    5b98:	7a03      	ldrb	r3, [r0, #8]
    5b9a:	428b      	cmp	r3, r1
    5b9c:	d302      	bcc.n	5ba4 <bt_conn_security+0x18>
		return 0;
    5b9e:	2000      	movs	r0, #0
}
    5ba0:	b005      	add	sp, #20
    5ba2:	bd30      	pop	{r4, r5, pc}
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    5ba4:	7a43      	ldrb	r3, [r0, #9]
    5ba6:	428b      	cmp	r3, r1
    5ba8:	d2f9      	bcs.n	5b9e <bt_conn_security+0x12>
	switch (conn->role) {
    5baa:	78c3      	ldrb	r3, [r0, #3]
	conn->required_sec_level = sec;
    5bac:	7241      	strb	r1, [r0, #9]
	switch (conn->role) {
    5bae:	b123      	cbz	r3, 5bba <bt_conn_security+0x2e>
    5bb0:	2b01      	cmp	r3, #1
    5bb2:	d045      	beq.n	5c40 <bt_conn_security+0xb4>
		return -EINVAL;
    5bb4:	f06f 0015 	mvn.w	r0, #21
    5bb8:	e01a      	b.n	5bf0 <bt_conn_security+0x64>
		if (!conn->le.keys) {
    5bba:	6f03      	ldr	r3, [r0, #112]	; 0x70
    5bbc:	2b00      	cmp	r3, #0
    5bbe:	d145      	bne.n	5c4c <bt_conn_security+0xc0>
						     &conn->le.dst);
    5bc0:	f100 0548 	add.w	r5, r0, #72	; 0x48
			conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    5bc4:	4629      	mov	r1, r5
    5bc6:	2020      	movs	r0, #32
    5bc8:	f005 f81c 	bl	ac04 <bt_keys_find>
    5bcc:	6720      	str	r0, [r4, #112]	; 0x70
			if (!conn->le.keys) {
    5bce:	2800      	cmp	r0, #0
    5bd0:	d13c      	bne.n	5c4c <bt_conn_security+0xc0>
				conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    5bd2:	4629      	mov	r1, r5
    5bd4:	2004      	movs	r0, #4
    5bd6:	f005 f815 	bl	ac04 <bt_keys_find>
    5bda:	6720      	str	r0, [r4, #112]	; 0x70
		if (!conn->le.keys ||
    5bdc:	b118      	cbz	r0, 5be6 <bt_conn_security+0x5a>
    5bde:	8983      	ldrh	r3, [r0, #12]
    5be0:	f003 0324 	and.w	r3, r3, #36	; 0x24
    5be4:	b93b      	cbnz	r3, 5bf6 <bt_conn_security+0x6a>
			return bt_smp_send_pairing_req(conn);
    5be6:	4620      	mov	r0, r4
    5be8:	f004 fe34 	bl	a854 <bt_smp_send_pairing_req>
	if (err) {
    5bec:	2800      	cmp	r0, #0
    5bee:	d0d6      	beq.n	5b9e <bt_conn_security+0x12>
		conn->required_sec_level = conn->sec_level;
    5bf0:	7a23      	ldrb	r3, [r4, #8]
    5bf2:	7263      	strb	r3, [r4, #9]
    5bf4:	e7d4      	b.n	5ba0 <bt_conn_security+0x14>
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    5bf6:	7a63      	ldrb	r3, [r4, #9]
    5bf8:	2b02      	cmp	r3, #2
    5bfa:	d904      	bls.n	5c06 <bt_conn_security+0x7a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5bfc:	3008      	adds	r0, #8
    5bfe:	f7ff fefd 	bl	59fc <atomic_get>
    5c02:	07c1      	lsls	r1, r0, #31
    5c04:	d5ef      	bpl.n	5be6 <bt_conn_security+0x5a>
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    5c06:	7a63      	ldrb	r3, [r4, #9]
    5c08:	2b03      	cmp	r3, #3
    5c0a:	d909      	bls.n	5c20 <bt_conn_security+0x94>
		    !atomic_test_bit(conn->le.keys->flags,
    5c0c:	6f20      	ldr	r0, [r4, #112]	; 0x70
    5c0e:	3008      	adds	r0, #8
    5c10:	f7ff fef4 	bl	59fc <atomic_get>
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    5c14:	07c2      	lsls	r2, r0, #31
    5c16:	d403      	bmi.n	5c20 <bt_conn_security+0x94>
		    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    5c18:	6f23      	ldr	r3, [r4, #112]	; 0x70
				     BT_KEYS_AUTHENTICATED) &&
    5c1a:	899b      	ldrh	r3, [r3, #12]
    5c1c:	069b      	lsls	r3, r3, #26
    5c1e:	d5e2      	bpl.n	5be6 <bt_conn_security+0x5a>
						   conn->le.keys->ltk.rand,
    5c20:	6f23      	ldr	r3, [r4, #112]	; 0x70
		return bt_conn_le_start_encryption(conn,
    5c22:	79da      	ldrb	r2, [r3, #7]
    5c24:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    5c28:	9202      	str	r2, [sp, #8]
						   conn->le.keys->ltk.val,
    5c2a:	f103 021a 	add.w	r2, r3, #26
		return bt_conn_le_start_encryption(conn,
    5c2e:	9201      	str	r2, [sp, #4]
    5c30:	8b1b      	ldrh	r3, [r3, #24]
    5c32:	9300      	str	r3, [sp, #0]
    5c34:	4602      	mov	r2, r0
    5c36:	460b      	mov	r3, r1
    5c38:	4620      	mov	r0, r4
    5c3a:	f7ff ff5d 	bl	5af8 <bt_conn_le_start_encryption>
    5c3e:	e7d5      	b.n	5bec <bt_conn_security+0x60>
		return bt_smp_send_security_req(conn);
    5c40:	f004 fdc4 	bl	a7cc <bt_smp_send_security_req>
    5c44:	e7d2      	b.n	5bec <bt_conn_security+0x60>
		return -ENOTCONN;
    5c46:	f06f 0038 	mvn.w	r0, #56	; 0x38
    5c4a:	e7a9      	b.n	5ba0 <bt_conn_security+0x14>
		if (!conn->le.keys ||
    5c4c:	6f20      	ldr	r0, [r4, #112]	; 0x70
    5c4e:	e7c6      	b.n	5bde <bt_conn_security+0x52>

00005c50 <bt_conn_cb_register>:
	cb->_next = callback_list;
    5c50:	4b02      	ldr	r3, [pc, #8]	; (5c5c <bt_conn_cb_register+0xc>)
    5c52:	681a      	ldr	r2, [r3, #0]
    5c54:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    5c56:	6018      	str	r0, [r3, #0]
    5c58:	4770      	bx	lr
    5c5a:	bf00      	nop
    5c5c:	20000470 	.word	0x20000470

00005c60 <bt_conn_recv>:
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);

	/* Check packet boundary flags */
	switch (flags) {
    5c60:	2a01      	cmp	r2, #1
{
    5c62:	b570      	push	{r4, r5, r6, lr}
    5c64:	4605      	mov	r5, r0
    5c66:	460c      	mov	r4, r1
	switch (flags) {
    5c68:	d00f      	beq.n	5c8a <bt_conn_recv+0x2a>
    5c6a:	2a02      	cmp	r2, #2
    5c6c:	d110      	bne.n	5c90 <bt_conn_recv+0x30>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    5c6e:	688b      	ldr	r3, [r1, #8]
    5c70:	881e      	ldrh	r6, [r3, #0]

		BT_DBG("First, len %u final %u", buf->len, len);

		if (conn->rx_len) {
    5c72:	89c3      	ldrh	r3, [r0, #14]
    5c74:	b10b      	cbz	r3, 5c7a <bt_conn_recv+0x1a>
			BT_ERR("Unexpected first L2CAP frame");
			bt_conn_reset_rx_state(conn);
    5c76:	f7ff fec7 	bl	5a08 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    5c7a:	89a3      	ldrh	r3, [r4, #12]
    5c7c:	1af3      	subs	r3, r6, r3
    5c7e:	3304      	adds	r3, #4
    5c80:	b29b      	uxth	r3, r3
    5c82:	81eb      	strh	r3, [r5, #14]
		BT_DBG("rx_len %u", conn->rx_len);
		if (conn->rx_len) {
    5c84:	b333      	cbz	r3, 5cd4 <bt_conn_recv+0x74>
			conn->rx = buf;
    5c86:	612c      	str	r4, [r5, #16]
			return;
    5c88:	bd70      	pop	{r4, r5, r6, pc}
		}

		break;
	case BT_ACL_CONT:
		if (!conn->rx_len) {
    5c8a:	89c3      	ldrh	r3, [r0, #14]
    5c8c:	b93b      	cbnz	r3, 5c9e <bt_conn_recv+0x3e>
			BT_ERR("Unexpected L2CAP continuation");
			bt_conn_reset_rx_state(conn);
    5c8e:	4628      	mov	r0, r5
		conn->rx_len = 0;

		break;
	default:
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
		bt_conn_reset_rx_state(conn);
    5c90:	f7ff feba 	bl	5a08 <bt_conn_reset_rx_state>
	hdr = (void *)buf->data;
	len = sys_le16_to_cpu(hdr->len);

	if (sizeof(*hdr) + len != buf->len) {
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
		net_buf_unref(buf);
    5c94:	4620      	mov	r0, r4
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    5c96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    5c9a:	f012 b8fd 	b.w	17e98 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    5c9e:	898e      	ldrh	r6, [r1, #12]
    5ca0:	42b3      	cmp	r3, r6
    5ca2:	d3f4      	bcc.n	5c8e <bt_conn_recv+0x2e>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    5ca4:	6900      	ldr	r0, [r0, #16]
    5ca6:	3008      	adds	r0, #8
    5ca8:	f012 f9c0 	bl	1802c <net_buf_simple_tailroom>
    5cac:	4286      	cmp	r6, r0
    5cae:	d8ee      	bhi.n	5c8e <bt_conn_recv+0x2e>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    5cb0:	6928      	ldr	r0, [r5, #16]
    5cb2:	89a2      	ldrh	r2, [r4, #12]
    5cb4:	68a1      	ldr	r1, [r4, #8]
    5cb6:	3008      	adds	r0, #8
    5cb8:	f012 f952 	bl	17f60 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    5cbc:	89eb      	ldrh	r3, [r5, #14]
    5cbe:	89a2      	ldrh	r2, [r4, #12]
    5cc0:	1a9b      	subs	r3, r3, r2
    5cc2:	81eb      	strh	r3, [r5, #14]
		net_buf_unref(buf);
    5cc4:	4620      	mov	r0, r4
    5cc6:	f012 f8e7 	bl	17e98 <net_buf_unref>
		if (conn->rx_len) {
    5cca:	89eb      	ldrh	r3, [r5, #14]
    5ccc:	b973      	cbnz	r3, 5cec <bt_conn_recv+0x8c>
		buf = conn->rx;
    5cce:	692c      	ldr	r4, [r5, #16]
		conn->rx_len = 0;
    5cd0:	81eb      	strh	r3, [r5, #14]
		conn->rx = NULL;
    5cd2:	612b      	str	r3, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
    5cd4:	68a3      	ldr	r3, [r4, #8]
	if (sizeof(*hdr) + len != buf->len) {
    5cd6:	89a2      	ldrh	r2, [r4, #12]
    5cd8:	881b      	ldrh	r3, [r3, #0]
    5cda:	3304      	adds	r3, #4
    5cdc:	4293      	cmp	r3, r2
    5cde:	d1d9      	bne.n	5c94 <bt_conn_recv+0x34>
	bt_l2cap_recv(conn, buf);
    5ce0:	4621      	mov	r1, r4
    5ce2:	4628      	mov	r0, r5
}
    5ce4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    5ce8:	f001 b937 	b.w	6f5a <bt_l2cap_recv>
    5cec:	bd70      	pop	{r4, r5, r6, pc}

00005cee <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    5cee:	b510      	push	{r4, lr}
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	if (conn->state != BT_CONN_CONNECTED) {
    5cf0:	7b04      	ldrb	r4, [r0, #12]
    5cf2:	2c03      	cmp	r4, #3
    5cf4:	d005      	beq.n	5d02 <bt_conn_send_cb+0x14>
		BT_ERR("not connected!");
		net_buf_unref(buf);
    5cf6:	4608      	mov	r0, r1
    5cf8:	f012 f8ce 	bl	17e98 <net_buf_unref>
		return -ENOTCONN;
    5cfc:	f06f 0038 	mvn.w	r0, #56	; 0x38
    5d00:	bd10      	pop	{r4, pc}
	}

	conn_tx(buf)->cb = cb;
    5d02:	614a      	str	r2, [r1, #20]

	net_buf_put(&conn->tx_queue, buf);
    5d04:	302c      	adds	r0, #44	; 0x2c
    5d06:	f012 f8ba 	bl	17e7e <net_buf_put>
	return 0;
    5d0a:	2000      	movs	r0, #0
}
    5d0c:	bd10      	pop	{r4, pc}
	...

00005d10 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    5d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	node->next = list->head;
    5d14:	4d0d      	ldr	r5, [pc, #52]	; (5d4c <bt_conn_notify_tx+0x3c>)
    5d16:	4606      	mov	r6, r0
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    5d18:	f100 071c 	add.w	r7, r0, #28
    5d1c:	f04f 0800 	mov.w	r8, #0
    5d20:	2100      	movs	r1, #0
    5d22:	4638      	mov	r0, r7
    5d24:	f01a fcaf 	bl	20686 <k_queue_get>
    5d28:	4604      	mov	r4, r0
    5d2a:	b908      	cbnz	r0, 5d30 <bt_conn_notify_tx+0x20>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    5d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    5d30:	6863      	ldr	r3, [r4, #4]
    5d32:	b10b      	cbz	r3, 5d38 <bt_conn_notify_tx+0x28>
			tx->cb(conn);
    5d34:	4630      	mov	r0, r6
    5d36:	4798      	blx	r3
    5d38:	682b      	ldr	r3, [r5, #0]
    5d3a:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
    5d3c:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    5d3e:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    5d42:	602c      	str	r4, [r5, #0]
	if (!list->tail) {
    5d44:	2b00      	cmp	r3, #0
    5d46:	d1eb      	bne.n	5d20 <bt_conn_notify_tx+0x10>
		list->tail = list->head;
    5d48:	606c      	str	r4, [r5, #4]
    5d4a:	e7e7      	b.n	5d1c <bt_conn_notify_tx+0xc>
    5d4c:	20000520 	.word	0x20000520

00005d50 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    5d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d54:	4605      	mov	r5, r0
    5d56:	460f      	mov	r7, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    5d58:	483e      	ldr	r0, [pc, #248]	; (5e54 <send_frag+0x104>)
    5d5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5d5e:	4698      	mov	r8, r3
    5d60:	4614      	mov	r4, r2
    5d62:	f01a ff17 	bl	20b94 <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    5d66:	4b3c      	ldr	r3, [pc, #240]	; (5e58 <send_frag+0x108>)
    5d68:	f103 0044 	add.w	r0, r3, #68	; 0x44
    5d6c:	f7ff fe46 	bl	59fc <atomic_get>
    5d70:	b130      	cbz	r0, 5d80 <send_frag+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    5d72:	7b1a      	ldrb	r2, [r3, #12]
    5d74:	3a03      	subs	r2, #3
    5d76:	2a01      	cmp	r2, #1
    5d78:	d802      	bhi.n	5d80 <send_frag+0x30>
			bt_conn_notify_tx(&conns[i]);
    5d7a:	4618      	mov	r0, r3
    5d7c:	f7ff ffc8 	bl	5d10 <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    5d80:	7b2b      	ldrb	r3, [r5, #12]
    5d82:	2b03      	cmp	r3, #3
    5d84:	d149      	bne.n	5e1a <send_frag+0xca>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    5d86:	2104      	movs	r1, #4
    5d88:	f107 0008 	add.w	r0, r7, #8
    5d8c:	f012 f919 	bl	17fc2 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    5d90:	882a      	ldrh	r2, [r5, #0]
	sys_snode_t *node = list->head;
    5d92:	4e32      	ldr	r6, [pc, #200]	; (5e5c <send_frag+0x10c>)
    5d94:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    5d98:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5d9a:	89bb      	ldrh	r3, [r7, #12]
    5d9c:	6834      	ldr	r4, [r6, #0]
	if (list->tail == node) {
    5d9e:	6871      	ldr	r1, [r6, #4]

	cb = conn_tx(buf)->cb;
    5da0:	697a      	ldr	r2, [r7, #20]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5da2:	3b04      	subs	r3, #4
    5da4:	8043      	strh	r3, [r0, #2]
    5da6:	2302      	movs	r3, #2
    5da8:	753b      	strb	r3, [r7, #20]
	list->head = node->next;
    5daa:	6823      	ldr	r3, [r4, #0]
    5dac:	6033      	str	r3, [r6, #0]
	if (list->tail == node) {
    5dae:	428c      	cmp	r4, r1
		list->tail = list->head;
    5db0:	bf08      	it	eq
    5db2:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    5db4:	6062      	str	r2, [r4, #4]
	__asm__ volatile(
    5db6:	f04f 0320 	mov.w	r3, #32
    5dba:	f3ef 8211 	mrs	r2, BASEPRI
    5dbe:	f383 8811 	msr	BASEPRI, r3
	node->next = NULL;
    5dc2:	2300      	movs	r3, #0
    5dc4:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
    5dc6:	69ab      	ldr	r3, [r5, #24]
    5dc8:	2b00      	cmp	r3, #0
    5dca:	d134      	bne.n	5e36 <send_frag+0xe6>
		list->tail = node;
    5dcc:	61ac      	str	r4, [r5, #24]
		list->head = node;
    5dce:	616c      	str	r4, [r5, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    5dd0:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    5dd4:	4638      	mov	r0, r7
    5dd6:	f7fe f823 	bl	3e20 <bt_send>
	if (err) {
    5dda:	2800      	cmp	r0, #0
    5ddc:	d036      	beq.n	5e4c <send_frag+0xfc>
	__asm__ volatile(
    5dde:	f04f 0320 	mov.w	r3, #32
    5de2:	f3ef 8011 	mrs	r0, BASEPRI
    5de6:	f383 8811 	msr	BASEPRI, r3
    5dea:	696b      	ldr	r3, [r5, #20]
	sys_snode_t *prev = NULL;
    5dec:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    5dee:	b153      	cbz	r3, 5e06 <send_frag+0xb6>
		if (test == node) {
    5df0:	429c      	cmp	r4, r3
    5df2:	d128      	bne.n	5e46 <send_frag+0xf6>
    5df4:	6823      	ldr	r3, [r4, #0]
    5df6:	69a9      	ldr	r1, [r5, #24]
	if (!prev_node) {
    5df8:	bb02      	cbnz	r2, 5e3c <send_frag+0xec>
		if (list->tail == node) {
    5dfa:	428c      	cmp	r4, r1
		list->head = node->next;
    5dfc:	616b      	str	r3, [r5, #20]
		if (list->tail == node) {
    5dfe:	d100      	bne.n	5e02 <send_frag+0xb2>
			list->tail = list->head;
    5e00:	61ab      	str	r3, [r5, #24]
	node->next = NULL;
    5e02:	2300      	movs	r3, #0
    5e04:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    5e06:	f380 8811 	msr	BASEPRI, r0
	tx->cb = NULL;
    5e0a:	2300      	movs	r3, #0
    5e0c:	6063      	str	r3, [r4, #4]
	node->next = list->head;
    5e0e:	6833      	ldr	r3, [r6, #0]
    5e10:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
    5e12:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    5e14:	6034      	str	r4, [r6, #0]
	if (!list->tail) {
    5e16:	b903      	cbnz	r3, 5e1a <send_frag+0xca>
		list->tail = list->head;
    5e18:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    5e1a:	480e      	ldr	r0, [pc, #56]	; (5e54 <send_frag+0x104>)
    5e1c:	f01a fe5a 	bl	20ad4 <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    5e20:	f1b8 0f00 	cmp.w	r8, #0
    5e24:	d004      	beq.n	5e30 <send_frag+0xe0>
		net_buf_unref(buf);
    5e26:	4638      	mov	r0, r7
    5e28:	f012 f836 	bl	17e98 <net_buf_unref>
	}
	return false;
    5e2c:	f04f 0800 	mov.w	r8, #0
}
    5e30:	4640      	mov	r0, r8
    5e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		list->tail->next = node;
    5e36:	601c      	str	r4, [r3, #0]
		list->tail = node;
    5e38:	61ac      	str	r4, [r5, #24]
    5e3a:	e7c9      	b.n	5dd0 <send_frag+0x80>
		if (list->tail == node) {
    5e3c:	428c      	cmp	r4, r1
		prev_node->next = node->next;
    5e3e:	6013      	str	r3, [r2, #0]
			list->tail = prev_node;
    5e40:	bf08      	it	eq
    5e42:	61aa      	streq	r2, [r5, #24]
    5e44:	e7dd      	b.n	5e02 <send_frag+0xb2>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    5e46:	461a      	mov	r2, r3
    5e48:	681b      	ldr	r3, [r3, #0]
    5e4a:	e7d0      	b.n	5dee <send_frag+0x9e>
	return true;
    5e4c:	f04f 0801 	mov.w	r8, #1
    5e50:	e7ee      	b.n	5e30 <send_frag+0xe0>
    5e52:	bf00      	nop
    5e54:	2000deac 	.word	0x2000deac
    5e58:	20000484 	.word	0x20000484
    5e5c:	20000520 	.word	0x20000520

00005e60 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    5e60:	b538      	push	{r3, r4, r5, lr}
    5e62:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    5e64:	f100 052c 	add.w	r5, r0, #44	; 0x2c
    5e68:	2100      	movs	r1, #0
    5e6a:	4628      	mov	r0, r5
    5e6c:	f011 ffea 	bl	17e44 <net_buf_get>
    5e70:	b958      	cbnz	r0, 5e8a <conn_cleanup+0x2a>
		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");

	bt_conn_notify_tx(conn);
    5e72:	4620      	mov	r0, r4
    5e74:	f7ff ff4c 	bl	5d10 <bt_conn_notify_tx>

	bt_conn_reset_rx_state(conn);
    5e78:	4620      	mov	r0, r4
    5e7a:	f7ff fdc5 	bl	5a08 <bt_conn_reset_rx_state>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    5e7e:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
    5e82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_dec(&conn->ref);
    5e86:	f7ff bdca 	b.w	5a1e <atomic_dec>
		net_buf_unref(buf);
    5e8a:	f012 f805 	bl	17e98 <net_buf_unref>
    5e8e:	e7eb      	b.n	5e68 <conn_cleanup+0x8>

00005e90 <bt_conn_prepare_events>:
{
    5e90:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0;
    5e92:	4b1f      	ldr	r3, [pc, #124]	; (5f10 <bt_conn_prepare_events+0x80>)
    5e94:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    5e96:	2101      	movs	r1, #1
	conn_change.signaled = 0;
    5e98:	609a      	str	r2, [r3, #8]
{
    5e9a:	4605      	mov	r5, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    5e9c:	f01b fb7a 	bl	21594 <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    5ea0:	4b1c      	ldr	r3, [pc, #112]	; (5f14 <bt_conn_prepare_events+0x84>)
    5ea2:	f103 0044 	add.w	r0, r3, #68	; 0x44
    5ea6:	f7ff fda9 	bl	59fc <atomic_get>
    5eaa:	4619      	mov	r1, r3
    5eac:	b908      	cbnz	r0, 5eb2 <bt_conn_prepare_events+0x22>
			continue;
    5eae:	2001      	movs	r0, #1
    5eb0:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    5eb2:	7b1a      	ldrb	r2, [r3, #12]
    5eb4:	b99a      	cbnz	r2, 5ede <bt_conn_prepare_events+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5eb6:	f3bf 8f5b 	dmb	ish
    5eba:	1d1a      	adds	r2, r3, #4
    5ebc:	e852 0f00 	ldrex	r0, [r2]
    5ec0:	f020 0440 	bic.w	r4, r0, #64	; 0x40
    5ec4:	e842 4e00 	strex	lr, r4, [r2]
    5ec8:	f1be 0f00 	cmp.w	lr, #0
    5ecc:	d1f6      	bne.n	5ebc <bt_conn_prepare_events+0x2c>
    5ece:	f3bf 8f5b 	dmb	ish
    5ed2:	0642      	lsls	r2, r0, #25
    5ed4:	d503      	bpl.n	5ede <bt_conn_prepare_events+0x4e>
			conn_cleanup(conn);
    5ed6:	4618      	mov	r0, r3
    5ed8:	f7ff ffc2 	bl	5e60 <conn_cleanup>
    5edc:	e7e7      	b.n	5eae <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    5ede:	7b0c      	ldrb	r4, [r1, #12]
    5ee0:	2c03      	cmp	r4, #3
    5ee2:	d1e4      	bne.n	5eae <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    5ee4:	f105 0014 	add.w	r0, r5, #20
    5ee8:	4b0b      	ldr	r3, [pc, #44]	; (5f18 <bt_conn_prepare_events+0x88>)
    5eea:	2200      	movs	r2, #0
    5eec:	2104      	movs	r1, #4
    5eee:	f01b fb51 	bl	21594 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    5ef2:	2301      	movs	r3, #1
    5ef4:	f885 3020 	strb.w	r3, [r5, #32]
		k_poll_event_init(&events[ev_count],
    5ef8:	f105 0028 	add.w	r0, r5, #40	; 0x28
    5efc:	4b07      	ldr	r3, [pc, #28]	; (5f1c <bt_conn_prepare_events+0x8c>)
    5efe:	2200      	movs	r2, #0
    5f00:	2104      	movs	r1, #4
    5f02:	f01b fb47 	bl	21594 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    5f06:	2302      	movs	r3, #2
    5f08:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    5f0c:	4620      	mov	r0, r4
}
    5f0e:	bd38      	pop	{r3, r4, r5, pc}
    5f10:	2000df58 	.word	0x2000df58
    5f14:	20000484 	.word	0x20000484
    5f18:	200004a0 	.word	0x200004a0
    5f1c:	200004b0 	.word	0x200004b0

00005f20 <bt_conn_add_le>:
{
    5f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!atomic_get(&conns[i].ref)) {
    5f24:	4c19      	ldr	r4, [pc, #100]	; (5f8c <bt_conn_add_le+0x6c>)
    5f26:	f104 0744 	add.w	r7, r4, #68	; 0x44
{
    5f2a:	4680      	mov	r8, r0
		if (!atomic_get(&conns[i].ref)) {
    5f2c:	4638      	mov	r0, r7
    5f2e:	f7ff fd65 	bl	59fc <atomic_get>
    5f32:	4605      	mov	r5, r0
    5f34:	b110      	cbz	r0, 5f3c <bt_conn_add_le+0x1c>
		return NULL;
    5f36:	2000      	movs	r0, #0
    5f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memset(conn, 0, sizeof(*conn));
    5f3c:	4601      	mov	r1, r0
    5f3e:	229c      	movs	r2, #156	; 0x9c
    5f40:	4620      	mov	r0, r4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5f42:	2601      	movs	r6, #1
    5f44:	f7fa fc66 	bl	814 <memset>
    5f48:	f3bf 8f5b 	dmb	ish
    5f4c:	e857 3f00 	ldrex	r3, [r7]
    5f50:	e847 6200 	strex	r2, r6, [r7]
    5f54:	2a00      	cmp	r2, #0
    5f56:	d1f9      	bne.n	5f4c <bt_conn_add_le+0x2c>
    5f58:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    5f5c:	2207      	movs	r2, #7
    5f5e:	4641      	mov	r1, r8
    5f60:	f104 0048 	add.w	r0, r4, #72	; 0x48
    5f64:	f7fa fc2a 	bl	7bc <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    5f68:	2318      	movs	r3, #24
    5f6a:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    5f6e:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    5f70:	f104 0074 	add.w	r0, r4, #116	; 0x74
	conn->sec_level = BT_SECURITY_LOW;
    5f74:	7226      	strb	r6, [r4, #8]
	conn->required_sec_level = BT_SECURITY_LOW;
    5f76:	7266      	strb	r6, [r4, #9]
	conn->type = BT_CONN_TYPE_LE;
    5f78:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    5f7a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    5f7e:	4904      	ldr	r1, [pc, #16]	; (5f90 <bt_conn_add_le+0x70>)
    5f80:	f01b f8d4 	bl	2112c <k_delayed_work_init>
			conn = &conns[i];
    5f84:	4620      	mov	r0, r4
}
    5f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f8a:	bf00      	nop
    5f8c:	20000484 	.word	0x20000484
    5f90:	000064c9 	.word	0x000064c9

00005f94 <bt_conn_set_state>:
{
    5f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
    5f96:	7b05      	ldrb	r5, [r0, #12]
    5f98:	428d      	cmp	r5, r1
{
    5f9a:	4604      	mov	r4, r0
	if (conn->state == state) {
    5f9c:	f000 8099 	beq.w	60d2 <bt_conn_set_state+0x13e>
	conn->state = state;
    5fa0:	7301      	strb	r1, [r0, #12]
	switch (old_state) {
    5fa2:	b19d      	cbz	r5, 5fcc <bt_conn_set_state+0x38>
    5fa4:	2d02      	cmp	r5, #2
    5fa6:	d015      	beq.n	5fd4 <bt_conn_set_state+0x40>
	switch (conn->state) {
    5fa8:	7b23      	ldrb	r3, [r4, #12]
    5faa:	2b02      	cmp	r3, #2
    5fac:	f000 8086 	beq.w	60bc <bt_conn_set_state+0x128>
    5fb0:	2b03      	cmp	r3, #3
    5fb2:	d016      	beq.n	5fe2 <bt_conn_set_state+0x4e>
    5fb4:	2b00      	cmp	r3, #0
    5fb6:	f040 808c 	bne.w	60d2 <bt_conn_set_state+0x13e>
		if (conn->type == BT_CONN_TYPE_SCO) {
    5fba:	78a3      	ldrb	r3, [r4, #2]
    5fbc:	2b02      	cmp	r3, #2
    5fbe:	d12a      	bne.n	6016 <bt_conn_set_state+0x82>
	atomic_dec(&conn->ref);
    5fc0:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
    5fc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	atomic_dec(&conn->ref);
    5fc8:	f7ff bd29 	b.w	5a1e <atomic_dec>
	atomic_inc(&conn->ref);
    5fcc:	3044      	adds	r0, #68	; 0x44
    5fce:	f7ff fd33 	bl	5a38 <atomic_inc>
    5fd2:	e7e9      	b.n	5fa8 <bt_conn_set_state+0x14>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5fd4:	7883      	ldrb	r3, [r0, #2]
    5fd6:	2b00      	cmp	r3, #0
    5fd8:	d1e6      	bne.n	5fa8 <bt_conn_set_state+0x14>
			k_delayed_work_cancel(&conn->le.update_work);
    5fda:	3074      	adds	r0, #116	; 0x74
    5fdc:	f01b f8c4 	bl	21168 <k_delayed_work_cancel>
    5fe0:	e7e2      	b.n	5fa8 <bt_conn_set_state+0x14>
		if (conn->type == BT_CONN_TYPE_SCO) {
    5fe2:	78a3      	ldrb	r3, [r4, #2]
    5fe4:	2b02      	cmp	r3, #2
    5fe6:	d074      	beq.n	60d2 <bt_conn_set_state+0x13e>
		k_fifo_init(&conn->tx_queue);
    5fe8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    5fec:	f01a faf6 	bl	205dc <k_queue_init>
		k_fifo_init(&conn->tx_notify);
    5ff0:	f104 001c 	add.w	r0, r4, #28
    5ff4:	f01a faf2 	bl	205dc <k_queue_init>
		k_poll_signal(&conn_change, 0);
    5ff8:	2100      	movs	r1, #0
    5ffa:	4836      	ldr	r0, [pc, #216]	; (60d4 <bt_conn_set_state+0x140>)
    5ffc:	f01b fb94 	bl	21728 <k_poll_signal>
	list->head = NULL;
    6000:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    6002:	4620      	mov	r0, r4
    6004:	63e3      	str	r3, [r4, #60]	; 0x3c
	list->tail = NULL;
    6006:	6423      	str	r3, [r4, #64]	; 0x40
    6008:	f000 fe7e 	bl	6d08 <bt_l2cap_connected>
		notify_connected(conn);
    600c:	4620      	mov	r0, r4
}
    600e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		notify_connected(conn);
    6012:	f7ff bce3 	b.w	59dc <notify_connected>
		if (old_state == BT_CONN_CONNECTED ||
    6016:	1eeb      	subs	r3, r5, #3
    6018:	2b01      	cmp	r3, #1
    601a:	d843      	bhi.n	60a4 <bt_conn_set_state+0x110>
			bt_l2cap_disconnected(conn);
    601c:	4620      	mov	r0, r4
    601e:	f000 fc8a 	bl	6936 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    6022:	4b2d      	ldr	r3, [pc, #180]	; (60d8 <bt_conn_set_state+0x144>)
    6024:	681d      	ldr	r5, [r3, #0]
    6026:	b9ed      	cbnz	r5, 6064 <bt_conn_set_state+0xd0>
	node->next = list->head;
    6028:	4e2c      	ldr	r6, [pc, #176]	; (60dc <bt_conn_set_state+0x148>)
    602a:	4f2d      	ldr	r7, [pc, #180]	; (60e0 <bt_conn_set_state+0x14c>)
	__asm__ volatile(
    602c:	f04f 0320 	mov.w	r3, #32
    6030:	f3ef 8111 	mrs	r1, BASEPRI
    6034:	f383 8811 	msr	BASEPRI, r3
    6038:	6963      	ldr	r3, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    603a:	b12b      	cbz	r3, 6048 <bt_conn_set_state+0xb4>
	if (list->tail == node) {
    603c:	69a0      	ldr	r0, [r4, #24]
	list->head = node->next;
    603e:	681a      	ldr	r2, [r3, #0]
    6040:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    6042:	4283      	cmp	r3, r0
		list->tail = list->head;
    6044:	bf08      	it	eq
    6046:	61a2      	streq	r2, [r4, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    6048:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
    604c:	b18b      	cbz	r3, 6072 <bt_conn_set_state+0xde>
	node->next = list->head;
    604e:	6832      	ldr	r2, [r6, #0]
    6050:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
    6052:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    6054:	605d      	str	r5, [r3, #4]
	list->head = node;
    6056:	6033      	str	r3, [r6, #0]
	if (!list->tail) {
    6058:	b902      	cbnz	r2, 605c <bt_conn_set_state+0xc8>
		list->tail = list->head;
    605a:	6073      	str	r3, [r6, #4]
    605c:	4638      	mov	r0, r7
    605e:	f01a fd39 	bl	20ad4 <_impl_k_sem_give>
    6062:	e7e3      	b.n	602c <bt_conn_set_state+0x98>
		if (cb->disconnected) {
    6064:	686b      	ldr	r3, [r5, #4]
    6066:	b113      	cbz	r3, 606e <bt_conn_set_state+0xda>
			cb->disconnected(conn, conn->err);
    6068:	7ae1      	ldrb	r1, [r4, #11]
    606a:	4620      	mov	r0, r4
    606c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    606e:	69ad      	ldr	r5, [r5, #24]
    6070:	e7d9      	b.n	6026 <bt_conn_set_state+0x92>
			if (conn->type == BT_CONN_TYPE_LE) {
    6072:	78a3      	ldrb	r3, [r4, #2]
    6074:	b91b      	cbnz	r3, 607e <bt_conn_set_state+0xea>
				k_delayed_work_cancel(&conn->le.update_work);
    6076:	f104 0074 	add.w	r0, r4, #116	; 0x74
    607a:	f01b f875 	bl	21168 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    607e:	f3bf 8f5b 	dmb	ish
    6082:	3404      	adds	r4, #4
    6084:	e854 3f00 	ldrex	r3, [r4]
    6088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    608c:	e844 3200 	strex	r2, r3, [r4]
    6090:	2a00      	cmp	r2, #0
    6092:	d1f7      	bne.n	6084 <bt_conn_set_state+0xf0>
    6094:	f3bf 8f5b 	dmb	ish
			k_poll_signal(&conn_change, 0);
    6098:	2100      	movs	r1, #0
    609a:	480e      	ldr	r0, [pc, #56]	; (60d4 <bt_conn_set_state+0x140>)
}
    609c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			k_poll_signal(&conn_change, 0);
    60a0:	f01b bb42 	b.w	21728 <k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
    60a4:	2d02      	cmp	r5, #2
    60a6:	d103      	bne.n	60b0 <bt_conn_set_state+0x11c>
			notify_connected(conn);
    60a8:	4620      	mov	r0, r4
    60aa:	f7ff fc97 	bl	59dc <notify_connected>
    60ae:	e787      	b.n	5fc0 <bt_conn_set_state+0x2c>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    60b0:	2d01      	cmp	r5, #1
    60b2:	d10e      	bne.n	60d2 <bt_conn_set_state+0x13e>
			if (conn->err) {
    60b4:	7ae3      	ldrb	r3, [r4, #11]
    60b6:	2b00      	cmp	r3, #0
    60b8:	d082      	beq.n	5fc0 <bt_conn_set_state+0x2c>
    60ba:	e7f5      	b.n	60a8 <bt_conn_set_state+0x114>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    60bc:	78a3      	ldrb	r3, [r4, #2]
    60be:	b943      	cbnz	r3, 60d2 <bt_conn_set_state+0x13e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    60c0:	f104 0174 	add.w	r1, r4, #116	; 0x74
    60c4:	f640 32b8 	movw	r2, #3000	; 0xbb8
    60c8:	4806      	ldr	r0, [pc, #24]	; (60e4 <bt_conn_set_state+0x150>)
}
    60ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    60ce:	f01b b8a5 	b.w	2121c <k_delayed_work_submit_to_queue>
    60d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    60d4:	2000df58 	.word	0x2000df58
    60d8:	20000470 	.word	0x20000470
    60dc:	20000520 	.word	0x20000520
    60e0:	2000deac 	.word	0x2000deac
    60e4:	200052a0 	.word	0x200052a0

000060e8 <bt_conn_lookup_handle>:
{
    60e8:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    60ea:	4c0b      	ldr	r4, [pc, #44]	; (6118 <bt_conn_lookup_handle+0x30>)
{
    60ec:	4602      	mov	r2, r0
		if (!atomic_get(&conns[i].ref)) {
    60ee:	f104 0044 	add.w	r0, r4, #68	; 0x44
    60f2:	f7ff fc83 	bl	59fc <atomic_get>
    60f6:	b168      	cbz	r0, 6114 <bt_conn_lookup_handle+0x2c>
		if (conns[i].state != BT_CONN_CONNECTED &&
    60f8:	7b23      	ldrb	r3, [r4, #12]
    60fa:	3b03      	subs	r3, #3
    60fc:	2b01      	cmp	r3, #1
    60fe:	d808      	bhi.n	6112 <bt_conn_lookup_handle+0x2a>
		if (conns[i].handle == handle) {
    6100:	8823      	ldrh	r3, [r4, #0]
    6102:	4293      	cmp	r3, r2
    6104:	d105      	bne.n	6112 <bt_conn_lookup_handle+0x2a>
	atomic_inc(&conn->ref);
    6106:	f104 0044 	add.w	r0, r4, #68	; 0x44
    610a:	f7ff fc95 	bl	5a38 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    610e:	4620      	mov	r0, r4
    6110:	bd10      	pop	{r4, pc}
	return NULL;
    6112:	2000      	movs	r0, #0
}
    6114:	bd10      	pop	{r4, pc}
    6116:	bf00      	nop
    6118:	20000484 	.word	0x20000484

0000611c <bt_conn_addr_le_cmp>:
{
    611c:	b538      	push	{r3, r4, r5, lr}
    611e:	460d      	mov	r5, r1
    6120:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    6122:	f100 0148 	add.w	r1, r0, #72	; 0x48
    6126:	2207      	movs	r2, #7
    6128:	4628      	mov	r0, r5
    612a:	f7fa fb1a 	bl	762 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    612e:	b160      	cbz	r0, 614a <bt_conn_addr_le_cmp+0x2e>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    6130:	78e3      	ldrb	r3, [r4, #3]
    6132:	2207      	movs	r2, #7
    6134:	b933      	cbnz	r3, 6144 <bt_conn_addr_le_cmp+0x28>
    6136:	f104 0156 	add.w	r1, r4, #86	; 0x56
    613a:	4628      	mov	r0, r5
}
    613c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6140:	f7fa bb0f 	b.w	762 <memcmp>
    6144:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    6148:	e7f7      	b.n	613a <bt_conn_addr_le_cmp+0x1e>
    614a:	bd38      	pop	{r3, r4, r5, pc}

0000614c <bt_conn_lookup_addr_le>:
{
    614c:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    614e:	4c0b      	ldr	r4, [pc, #44]	; (617c <bt_conn_lookup_addr_le+0x30>)
{
    6150:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    6152:	f104 0044 	add.w	r0, r4, #68	; 0x44
    6156:	f7ff fc51 	bl	59fc <atomic_get>
    615a:	b908      	cbnz	r0, 6160 <bt_conn_lookup_addr_le+0x14>
	return NULL;
    615c:	2000      	movs	r0, #0
    615e:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    6160:	78a3      	ldrb	r3, [r4, #2]
    6162:	2b00      	cmp	r3, #0
    6164:	d1fa      	bne.n	615c <bt_conn_lookup_addr_le+0x10>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    6166:	4620      	mov	r0, r4
    6168:	f7ff ffd8 	bl	611c <bt_conn_addr_le_cmp>
    616c:	2800      	cmp	r0, #0
    616e:	d1f5      	bne.n	615c <bt_conn_lookup_addr_le+0x10>
	atomic_inc(&conn->ref);
    6170:	f104 0044 	add.w	r0, r4, #68	; 0x44
    6174:	f7ff fc60 	bl	5a38 <atomic_inc>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    6178:	4620      	mov	r0, r4
}
    617a:	bd10      	pop	{r4, pc}
    617c:	20000484 	.word	0x20000484

00006180 <bt_conn_lookup_state_le>:
{
    6180:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    6182:	4c0e      	ldr	r4, [pc, #56]	; (61bc <bt_conn_lookup_state_le+0x3c>)
{
    6184:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    6186:	f104 0044 	add.w	r0, r4, #68	; 0x44
{
    618a:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    618c:	f7ff fc36 	bl	59fc <atomic_get>
    6190:	b908      	cbnz	r0, 6196 <bt_conn_lookup_state_le+0x16>
	return NULL;
    6192:	2000      	movs	r0, #0
    6194:	bd38      	pop	{r3, r4, r5, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    6196:	78a2      	ldrb	r2, [r4, #2]
    6198:	2a00      	cmp	r2, #0
    619a:	d1fa      	bne.n	6192 <bt_conn_lookup_state_le+0x12>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    619c:	b93b      	cbnz	r3, 61ae <bt_conn_lookup_state_le+0x2e>
		if (conns[i].state == state) {
    619e:	7b23      	ldrb	r3, [r4, #12]
    61a0:	42ab      	cmp	r3, r5
    61a2:	d1f6      	bne.n	6192 <bt_conn_lookup_state_le+0x12>
	atomic_inc(&conn->ref);
    61a4:	4806      	ldr	r0, [pc, #24]	; (61c0 <bt_conn_lookup_state_le+0x40>)
    61a6:	f7ff fc47 	bl	5a38 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    61aa:	4804      	ldr	r0, [pc, #16]	; (61bc <bt_conn_lookup_state_le+0x3c>)
}
    61ac:	bd38      	pop	{r3, r4, r5, pc}
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    61ae:	4619      	mov	r1, r3
    61b0:	4620      	mov	r0, r4
    61b2:	f7ff ffb3 	bl	611c <bt_conn_addr_le_cmp>
    61b6:	2800      	cmp	r0, #0
    61b8:	d1eb      	bne.n	6192 <bt_conn_lookup_state_le+0x12>
    61ba:	e7f0      	b.n	619e <bt_conn_lookup_state_le+0x1e>
    61bc:	20000484 	.word	0x20000484
    61c0:	200004c8 	.word	0x200004c8

000061c4 <bt_conn_unref>:
	atomic_dec(&conn->ref);
    61c4:	3044      	adds	r0, #68	; 0x44
    61c6:	f7ff bc2a 	b.w	5a1e <atomic_dec>

000061ca <bt_conn_get_dst>:
}

const bt_addr_le_t *bt_conn_get_dst(const struct bt_conn *conn)
{
	return &conn->le.dst;
}
    61ca:	3048      	adds	r0, #72	; 0x48
    61cc:	4770      	bx	lr

000061ce <bt_conn_get_info>:

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
    61ce:	b510      	push	{r4, lr}
	info->type = conn->type;
    61d0:	7883      	ldrb	r3, [r0, #2]
    61d2:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
    61d4:	78c4      	ldrb	r4, [r0, #3]
    61d6:	704c      	strb	r4, [r1, #1]

	switch (conn->type) {
    61d8:	b9a3      	cbnz	r3, 6204 <bt_conn_get_info+0x36>
    61da:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    61de:	f100 0256 	add.w	r2, r0, #86	; 0x56
	case BT_CONN_TYPE_LE:
		if (conn->role == BT_HCI_ROLE_MASTER) {
    61e2:	b964      	cbnz	r4, 61fe <bt_conn_get_info+0x30>
			info->le.src = &conn->le.init_addr;
    61e4:	604b      	str	r3, [r1, #4]
			info->le.dst = &conn->le.resp_addr;
    61e6:	608a      	str	r2, [r1, #8]
		} else {
			info->le.src = &conn->le.resp_addr;
			info->le.dst = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
    61e8:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    61ec:	818b      	strh	r3, [r1, #12]
		info->le.latency = conn->le.latency;
    61ee:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
    61f2:	81cb      	strh	r3, [r1, #14]
		info->le.timeout = conn->le.timeout;
    61f4:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
    61f8:	820b      	strh	r3, [r1, #16]
		return 0;
    61fa:	2000      	movs	r0, #0
    61fc:	bd10      	pop	{r4, pc}
			info->le.src = &conn->le.resp_addr;
    61fe:	604a      	str	r2, [r1, #4]
			info->le.dst = &conn->le.init_addr;
    6200:	608b      	str	r3, [r1, #8]
    6202:	e7f1      	b.n	61e8 <bt_conn_get_info+0x1a>
		info->br.dst = &conn->br.dst;
		return 0;
#endif
	}

	return -EINVAL;
    6204:	f06f 0015 	mvn.w	r0, #21
}
    6208:	bd10      	pop	{r4, pc}

0000620a <bt_hci_disconnect>:

int bt_hci_disconnect(struct bt_conn *conn, u8_t reason)
{
    620a:	b570      	push	{r4, r5, r6, lr}
    620c:	4605      	mov	r5, r0
    620e:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_cp_disconnect *disconn;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    6210:	f240 4006 	movw	r0, #1030	; 0x406
    6214:	2103      	movs	r1, #3
    6216:	f7fd faf1 	bl	37fc <bt_hci_cmd_create>
	if (!buf) {
    621a:	4604      	mov	r4, r0
    621c:	b198      	cbz	r0, 6246 <bt_hci_disconnect+0x3c>
		return -ENOBUFS;
	}

	disconn = net_buf_add(buf, sizeof(*disconn));
    621e:	2103      	movs	r1, #3
    6220:	3008      	adds	r0, #8
    6222:	f011 fe97 	bl	17f54 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    6226:	882b      	ldrh	r3, [r5, #0]
    6228:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    622a:	7086      	strb	r6, [r0, #2]

	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    622c:	4621      	mov	r1, r4
    622e:	f240 4006 	movw	r0, #1030	; 0x406
    6232:	f7fd fdfd 	bl	3e30 <bt_hci_cmd_send>
	if (err) {
    6236:	4604      	mov	r4, r0
    6238:	b918      	cbnz	r0, 6242 <bt_hci_disconnect+0x38>
		return err;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    623a:	2104      	movs	r1, #4
    623c:	4628      	mov	r0, r5
    623e:	f7ff fea9 	bl	5f94 <bt_conn_set_state>

	return 0;
}
    6242:	4620      	mov	r0, r4
    6244:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    6246:	f06f 0436 	mvn.w	r4, #54	; 0x36
    624a:	e7fa      	b.n	6242 <bt_hci_disconnect+0x38>

0000624c <bt_conn_create_le>:
	conn->le.timeout = param->timeout;
}

struct bt_conn *bt_conn_create_le(const bt_addr_le_t *peer,
				  const struct bt_le_conn_param *param)
{
    624c:	b570      	push	{r4, r5, r6, lr}
    624e:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (!bt_le_conn_params_valid(param)) {
    6250:	4608      	mov	r0, r1
{
    6252:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    6254:	f7fd fc6e 	bl	3b34 <bt_le_conn_params_valid>
    6258:	b908      	cbnz	r0, 625e <bt_conn_create_le+0x12>
		case BT_CONN_CONNECT:
		case BT_CONN_CONNECTED:
			return conn;
		default:
			bt_conn_unref(conn);
			return NULL;
    625a:	2400      	movs	r4, #0
    625c:	e01d      	b.n	629a <bt_conn_create_le+0x4e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    625e:	481e      	ldr	r0, [pc, #120]	; (62d8 <bt_conn_create_le+0x8c>)
    6260:	f7ff fbcc 	bl	59fc <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    6264:	05c3      	lsls	r3, r0, #23
    6266:	d4f8      	bmi.n	625a <bt_conn_create_le+0xe>
	conn = bt_conn_lookup_addr_le(peer);
    6268:	4630      	mov	r0, r6
    626a:	f7ff ff6f 	bl	614c <bt_conn_lookup_addr_le>
	if (conn) {
    626e:	4604      	mov	r4, r0
    6270:	b1a8      	cbz	r0, 629e <bt_conn_create_le+0x52>
		switch (conn->state) {
    6272:	7b03      	ldrb	r3, [r0, #12]
    6274:	2b01      	cmp	r3, #1
    6276:	d007      	beq.n	6288 <bt_conn_create_le+0x3c>
    6278:	d301      	bcc.n	627e <bt_conn_create_le+0x32>
    627a:	2b03      	cmp	r3, #3
    627c:	d90d      	bls.n	629a <bt_conn_create_le+0x4e>
	atomic_dec(&conn->ref);
    627e:	f104 0044 	add.w	r0, r4, #68	; 0x44
    6282:	f7ff fbcc 	bl	5a1e <atomic_dec>
    6286:	e7e8      	b.n	625a <bt_conn_create_le+0xe>
	conn->le.interval_max = param->interval_max;
    6288:	886b      	ldrh	r3, [r5, #2]
    628a:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	conn->le.latency = param->latency;
    628e:	88ab      	ldrh	r3, [r5, #4]
    6290:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
	conn->le.timeout = param->timeout;
    6294:	88eb      	ldrh	r3, [r5, #6]
    6296:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);

	bt_le_scan_update(true);

	return conn;
}
    629a:	4620      	mov	r0, r4
    629c:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_add_le(peer);
    629e:	4630      	mov	r0, r6
    62a0:	f7ff fe3e 	bl	5f20 <bt_conn_add_le>
	if (!conn) {
    62a4:	4604      	mov	r4, r0
    62a6:	2800      	cmp	r0, #0
    62a8:	d0f7      	beq.n	629a <bt_conn_create_le+0x4e>
	memcpy(dst, src, sizeof(*dst));
    62aa:	2207      	movs	r2, #7
    62ac:	4631      	mov	r1, r6
    62ae:	3056      	adds	r0, #86	; 0x56
    62b0:	f7fa fa84 	bl	7bc <memcpy>
	conn->le.interval_max = param->interval_max;
    62b4:	886b      	ldrh	r3, [r5, #2]
    62b6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	conn->le.latency = param->latency;
    62ba:	88ab      	ldrh	r3, [r5, #4]
    62bc:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	conn->le.timeout = param->timeout;
    62c0:	88eb      	ldrh	r3, [r5, #6]
    62c2:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    62c6:	4620      	mov	r0, r4
    62c8:	2101      	movs	r1, #1
    62ca:	f7ff fe63 	bl	5f94 <bt_conn_set_state>
	bt_le_scan_update(true);
    62ce:	2001      	movs	r0, #1
    62d0:	f7fd fe20 	bl	3f14 <bt_le_scan_update>
	return conn;
    62d4:	e7e1      	b.n	629a <bt_conn_create_le+0x4e>
    62d6:	bf00      	nop
    62d8:	2000de90 	.word	0x2000de90

000062dc <bt_le_set_auto_conn>:

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    62dc:	b570      	push	{r4, r5, r6, lr}
    62de:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    62e0:	460d      	mov	r5, r1
    62e2:	2900      	cmp	r1, #0
    62e4:	d13d      	bne.n	6362 <bt_le_set_auto_conn+0x86>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    62e6:	4630      	mov	r0, r6
    62e8:	f7ff ff30 	bl	614c <bt_conn_lookup_addr_le>
	if (!conn) {
    62ec:	4604      	mov	r4, r0
    62ee:	b928      	cbnz	r0, 62fc <bt_le_set_auto_conn+0x20>
		conn = bt_conn_add_le(addr);
    62f0:	4630      	mov	r0, r6
    62f2:	f7ff fe15 	bl	5f20 <bt_conn_add_le>
		if (!conn) {
    62f6:	4604      	mov	r4, r0
    62f8:	2800      	cmp	r0, #0
    62fa:	d053      	beq.n	63a4 <bt_le_set_auto_conn+0xc8>
    62fc:	1d23      	adds	r3, r4, #4
    62fe:	f104 0644 	add.w	r6, r4, #68	; 0x44
			return -ENOMEM;
		}
	}

	if (param) {
    6302:	2d00      	cmp	r5, #0
    6304:	d035      	beq.n	6372 <bt_le_set_auto_conn+0x96>
	conn->le.interval_max = param->interval_max;
    6306:	886a      	ldrh	r2, [r5, #2]
    6308:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
	conn->le.latency = param->latency;
    630c:	88aa      	ldrh	r2, [r5, #4]
    630e:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
	conn->le.timeout = param->timeout;
    6312:	88ea      	ldrh	r2, [r5, #6]
    6314:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6318:	f3bf 8f5b 	dmb	ish
    631c:	e853 2f00 	ldrex	r2, [r3]
    6320:	f042 0101 	orr.w	r1, r2, #1
    6324:	e843 1000 	strex	r0, r1, [r3]
    6328:	2800      	cmp	r0, #0
    632a:	d1f7      	bne.n	631c <bt_le_set_auto_conn+0x40>
    632c:	f3bf 8f5b 	dmb	ish
		bt_conn_set_param_le(conn, param);

		if (!atomic_test_and_set_bit(conn->flags,
    6330:	07d1      	lsls	r1, r2, #31
    6332:	d402      	bmi.n	633a <bt_le_set_auto_conn+0x5e>
	atomic_inc(&conn->ref);
    6334:	4630      	mov	r0, r6
    6336:	f7ff fb7f 	bl	5a38 <atomic_inc>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    633a:	7b23      	ldrb	r3, [r4, #12]
    633c:	b963      	cbnz	r3, 6358 <bt_le_set_auto_conn+0x7c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    633e:	481b      	ldr	r0, [pc, #108]	; (63ac <bt_le_set_auto_conn+0xd0>)
    6340:	f7ff fb5c 	bl	59fc <atomic_get>
    6344:	0783      	lsls	r3, r0, #30
    6346:	d507      	bpl.n	6358 <bt_le_set_auto_conn+0x7c>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		if (param) {
    6348:	b11d      	cbz	r5, 6352 <bt_le_set_auto_conn+0x76>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    634a:	2101      	movs	r1, #1
    634c:	4620      	mov	r0, r4
    634e:	f7ff fe21 	bl	5f94 <bt_conn_set_state>
		}
		bt_le_scan_update(false);
    6352:	2000      	movs	r0, #0
    6354:	f7fd fdde 	bl	3f14 <bt_le_scan_update>
	atomic_dec(&conn->ref);
    6358:	4630      	mov	r0, r6
    635a:	f7ff fb60 	bl	5a1e <atomic_dec>
	}

	bt_conn_unref(conn);

	return 0;
    635e:	2000      	movs	r0, #0
    6360:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    6362:	4608      	mov	r0, r1
    6364:	f7fd fbe6 	bl	3b34 <bt_le_conn_params_valid>
    6368:	2800      	cmp	r0, #0
    636a:	d1bc      	bne.n	62e6 <bt_le_set_auto_conn+0xa>
		return -EINVAL;
    636c:	f06f 0015 	mvn.w	r0, #21
    6370:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6372:	f3bf 8f5b 	dmb	ish
    6376:	e853 2f00 	ldrex	r2, [r3]
    637a:	f022 0101 	bic.w	r1, r2, #1
    637e:	e843 1000 	strex	r0, r1, [r3]
    6382:	2800      	cmp	r0, #0
    6384:	d1f7      	bne.n	6376 <bt_le_set_auto_conn+0x9a>
    6386:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    638a:	07d2      	lsls	r2, r2, #31
    638c:	d5d5      	bpl.n	633a <bt_le_set_auto_conn+0x5e>
	atomic_dec(&conn->ref);
    638e:	4630      	mov	r0, r6
    6390:	f7ff fb45 	bl	5a1e <atomic_dec>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    6394:	7b23      	ldrb	r3, [r4, #12]
    6396:	2b01      	cmp	r3, #1
    6398:	d1cf      	bne.n	633a <bt_le_set_auto_conn+0x5e>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    639a:	4629      	mov	r1, r5
    639c:	4620      	mov	r0, r4
    639e:	f7ff fdf9 	bl	5f94 <bt_conn_set_state>
    63a2:	e7ca      	b.n	633a <bt_le_set_auto_conn+0x5e>
			return -ENOMEM;
    63a4:	f06f 000b 	mvn.w	r0, #11
}
    63a8:	bd70      	pop	{r4, r5, r6, pc}
    63aa:	bf00      	nop
    63ac:	2000de90 	.word	0x2000de90

000063b0 <bt_conn_disconnect>:
{
    63b0:	b538      	push	{r3, r4, r5, lr}
    63b2:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    63b4:	7881      	ldrb	r1, [r0, #2]
{
    63b6:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    63b8:	b911      	cbnz	r1, 63c0 <bt_conn_disconnect+0x10>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    63ba:	3048      	adds	r0, #72	; 0x48
    63bc:	f7ff ff8e 	bl	62dc <bt_le_set_auto_conn>
	switch (conn->state) {
    63c0:	7b23      	ldrb	r3, [r4, #12]
    63c2:	3b01      	subs	r3, #1
    63c4:	2b03      	cmp	r3, #3
    63c6:	d803      	bhi.n	63d0 <bt_conn_disconnect+0x20>
    63c8:	e8df f003 	tbb	[pc, r3]
    63cc:	0d1a0f05 	.word	0x0d1a0f05
		return -ENOTCONN;
    63d0:	f06f 0038 	mvn.w	r0, #56	; 0x38
    63d4:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    63d6:	4620      	mov	r0, r4
		conn->err = reason;
    63d8:	72e5      	strb	r5, [r4, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    63da:	2100      	movs	r1, #0
    63dc:	f7ff fdda 	bl	5f94 <bt_conn_set_state>
		bt_le_scan_update(false);
    63e0:	2000      	movs	r0, #0
    63e2:	f7fd fd97 	bl	3f14 <bt_le_scan_update>
		return 0;
    63e6:	2000      	movs	r0, #0
}
    63e8:	bd38      	pop	{r3, r4, r5, pc}
			k_delayed_work_cancel(&conn->le.update_work);
    63ea:	f104 0074 	add.w	r0, r4, #116	; 0x74
    63ee:	f01a febb 	bl	21168 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    63f2:	2100      	movs	r1, #0
    63f4:	f242 000e 	movw	r0, #8206	; 0x200e
}
    63f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    63fc:	f7fd bd18 	b.w	3e30 <bt_hci_cmd_send>
		return bt_hci_disconnect(conn, reason);
    6400:	4629      	mov	r1, r5
    6402:	4620      	mov	r0, r4
}
    6404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_hci_disconnect(conn, reason);
    6408:	f7ff beff 	b.w	620a <bt_hci_disconnect>

0000640c <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    640c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    640e:	4607      	mov	r7, r0
    6410:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    6412:	f242 0013 	movw	r0, #8211	; 0x2013
    6416:	210e      	movs	r1, #14
    6418:	f7fd f9f0 	bl	37fc <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    641c:	4606      	mov	r6, r0
    641e:	b1c8      	cbz	r0, 6454 <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    6420:	210e      	movs	r1, #14
    6422:	3008      	adds	r0, #8
    6424:	f011 fd96 	bl	17f54 <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    6428:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    642a:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    642c:	220e      	movs	r2, #14
    642e:	f7fa f9f1 	bl	814 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    6432:	883b      	ldrh	r3, [r7, #0]
    6434:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    6436:	882b      	ldrh	r3, [r5, #0]
    6438:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    643a:	886b      	ldrh	r3, [r5, #2]
    643c:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    643e:	88ab      	ldrh	r3, [r5, #4]
    6440:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    6442:	88eb      	ldrh	r3, [r5, #6]
    6444:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    6446:	4631      	mov	r1, r6
    6448:	f242 0013 	movw	r0, #8211	; 0x2013
}
    644c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    6450:	f7fd bcee 	b.w	3e30 <bt_hci_cmd_send>
}
    6454:	f06f 0036 	mvn.w	r0, #54	; 0x36
    6458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000645c <bt_conn_le_param_update>:
{
    645c:	b538      	push	{r3, r4, r5, lr}
	if (conn->le.interval >= param->interval_min &&
    645e:	880a      	ldrh	r2, [r1, #0]
    6460:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    6464:	429a      	cmp	r2, r3
{
    6466:	4604      	mov	r4, r0
    6468:	460d      	mov	r5, r1
	if (conn->le.interval >= param->interval_min &&
    646a:	d80c      	bhi.n	6486 <bt_conn_le_param_update+0x2a>
    646c:	884a      	ldrh	r2, [r1, #2]
    646e:	429a      	cmp	r2, r3
    6470:	d309      	bcc.n	6486 <bt_conn_le_param_update+0x2a>
	    conn->le.interval <= param->interval_max &&
    6472:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
    6476:	888b      	ldrh	r3, [r1, #4]
    6478:	429a      	cmp	r2, r3
    647a:	d104      	bne.n	6486 <bt_conn_le_param_update+0x2a>
	    conn->le.latency == param->latency &&
    647c:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
    6480:	88cb      	ldrh	r3, [r1, #6]
    6482:	429a      	cmp	r2, r3
    6484:	d01a      	beq.n	64bc <bt_conn_le_param_update+0x60>
	k_delayed_work_cancel(&conn->le.update_work);
    6486:	f104 0074 	add.w	r0, r4, #116	; 0x74
    648a:	f01a fe6d 	bl	21168 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    648e:	4b0d      	ldr	r3, [pc, #52]	; (64c4 <bt_conn_le_param_update+0x68>)
    6490:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    6494:	079a      	lsls	r2, r3, #30
    6496:	d503      	bpl.n	64a0 <bt_conn_le_param_update+0x44>
    6498:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    649c:	079b      	lsls	r3, r3, #30
    649e:	d401      	bmi.n	64a4 <bt_conn_le_param_update+0x48>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    64a0:	78e3      	ldrb	r3, [r4, #3]
    64a2:	b92b      	cbnz	r3, 64b0 <bt_conn_le_param_update+0x54>
		return bt_conn_le_conn_update(conn, param);
    64a4:	4629      	mov	r1, r5
    64a6:	4620      	mov	r0, r4
}
    64a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_conn_le_conn_update(conn, param);
    64ac:	f7ff bfae 	b.w	640c <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    64b0:	4629      	mov	r1, r5
    64b2:	4620      	mov	r0, r4
}
    64b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    64b8:	f000 bc6a 	b.w	6d90 <bt_l2cap_update_conn_param>
}
    64bc:	f06f 0044 	mvn.w	r0, #68	; 0x44
    64c0:	bd38      	pop	{r3, r4, r5, pc}
    64c2:	bf00      	nop
    64c4:	2000de20 	.word	0x2000de20

000064c8 <le_conn_update>:
{
    64c8:	4603      	mov	r3, r0
    64ca:	b507      	push	{r0, r1, r2, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    64cc:	f813 2c68 	ldrb.w	r2, [r3, #-104]
    64d0:	2a02      	cmp	r2, #2
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    64d2:	f1a0 0074 	sub.w	r0, r0, #116	; 0x74
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    64d6:	d105      	bne.n	64e4 <le_conn_update+0x1c>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    64d8:	2113      	movs	r1, #19
    64da:	f7ff ff69 	bl	63b0 <bt_conn_disconnect>
}
    64de:	b003      	add	sp, #12
    64e0:	f85d fb04 	ldr.w	pc, [sp], #4
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    64e4:	f833 2c14 	ldrh.w	r2, [r3, #-20]
    64e8:	f8ad 2000 	strh.w	r2, [sp]
    64ec:	f833 2c12 	ldrh.w	r2, [r3, #-18]
    64f0:	f8ad 2002 	strh.w	r2, [sp, #2]
	bt_conn_le_param_update(conn, param);
    64f4:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    64f6:	f833 2c10 	ldrh.w	r2, [r3, #-16]
    64fa:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
    64fe:	f8ad 2004 	strh.w	r2, [sp, #4]
    6502:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    6506:	f7ff ffa9 	bl	645c <bt_conn_le_param_update>
    650a:	e7e8      	b.n	64de <le_conn_update+0x16>

0000650c <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    650c:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    650e:	4b08      	ldr	r3, [pc, #32]	; (6530 <bt_conn_create_pdu+0x24>)
{
    6510:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    6512:	2800      	cmp	r0, #0
    6514:	bf08      	it	eq
    6516:	4618      	moveq	r0, r3
    6518:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    651c:	f011 fc8c 	bl	17e38 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    6520:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    6522:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    6524:	3008      	adds	r0, #8
    6526:	f011 fca6 	bl	17e76 <net_buf_simple_reserve>

	return buf;
}
    652a:	4620      	mov	r0, r4
    652c:	bd38      	pop	{r3, r4, r5, pc}
    652e:	bf00      	nop
    6530:	2000ed2c 	.word	0x2000ed2c

00006534 <create_frag.isra.6>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    6534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6538:	4606      	mov	r6, r0
    653a:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    653c:	4816      	ldr	r0, [pc, #88]	; (6598 <create_frag.isra.6+0x64>)
    653e:	2100      	movs	r1, #0
    6540:	f7ff ffe4 	bl	650c <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    6544:	7833      	ldrb	r3, [r6, #0]
    6546:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(&frag_pool, 0);
    6548:	4605      	mov	r5, r0
    654a:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    654e:	d005      	beq.n	655c <create_frag.isra.6+0x28>
		net_buf_unref(frag);
    6550:	f011 fca2 	bl	17e98 <net_buf_unref>
		return NULL;
    6554:	4635      	mov	r5, r6
}
    6556:	4628      	mov	r0, r5
    6558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    655c:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    655e:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    6562:	4e0e      	ldr	r6, [pc, #56]	; (659c <create_frag.isra.6+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    6564:	4638      	mov	r0, r7
    6566:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    656a:	f011 fd5f 	bl	1802c <net_buf_simple_tailroom>
    656e:	4580      	cmp	r8, r0
    6570:	d20c      	bcs.n	658c <create_frag.isra.6+0x58>
	return bt_dev.le.mtu;
    6572:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    6576:	f854 1f08 	ldr.w	r1, [r4, #8]!
    657a:	4632      	mov	r2, r6
    657c:	4638      	mov	r0, r7
    657e:	f011 fcef 	bl	17f60 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    6582:	4631      	mov	r1, r6
    6584:	4620      	mov	r0, r4
    6586:	f011 fd35 	bl	17ff4 <net_buf_simple_pull>
    658a:	e7e4      	b.n	6556 <create_frag.isra.6+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    658c:	4638      	mov	r0, r7
    658e:	f011 fd4d 	bl	1802c <net_buf_simple_tailroom>
    6592:	b286      	uxth	r6, r0
    6594:	e7ef      	b.n	6576 <create_frag.isra.6+0x42>
    6596:	bf00      	nop
    6598:	2000ed4c 	.word	0x2000ed4c
    659c:	2000de20 	.word	0x2000de20

000065a0 <bt_conn_process_tx>:
{
    65a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    65a2:	7b03      	ldrb	r3, [r0, #12]
{
    65a4:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    65a6:	b993      	cbnz	r3, 65ce <bt_conn_process_tx+0x2e>
    65a8:	f3bf 8f5b 	dmb	ish
    65ac:	1d03      	adds	r3, r0, #4
    65ae:	e853 2f00 	ldrex	r2, [r3]
    65b2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    65b6:	e843 1400 	strex	r4, r1, [r3]
    65ba:	2c00      	cmp	r4, #0
    65bc:	d1f7      	bne.n	65ae <bt_conn_process_tx+0xe>
    65be:	f3bf 8f5b 	dmb	ish
    65c2:	0653      	lsls	r3, r2, #25
    65c4:	d503      	bpl.n	65ce <bt_conn_process_tx+0x2e>
}
    65c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    65ca:	f7ff bc49 	b.w	5e60 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    65ce:	2100      	movs	r1, #0
    65d0:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    65d4:	f011 fc36 	bl	17e44 <net_buf_get>
	BT_ASSERT(buf);
    65d8:	4604      	mov	r4, r0
    65da:	b928      	cbnz	r0, 65e8 <bt_conn_process_tx+0x48>
    65dc:	4040      	eors	r0, r0
    65de:	f380 8811 	msr	BASEPRI, r0
    65e2:	f04f 0004 	mov.w	r0, #4
    65e6:	df02      	svc	2
	return bt_dev.le.mtu;
    65e8:	4e19      	ldr	r6, [pc, #100]	; (6650 <bt_conn_process_tx+0xb0>)
	if (buf->len <= conn_mtu(conn)) {
    65ea:	8981      	ldrh	r1, [r0, #12]
    65ec:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    65f0:	4291      	cmp	r1, r2
    65f2:	d807      	bhi.n	6604 <bt_conn_process_tx+0x64>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    65f4:	2300      	movs	r3, #0
    65f6:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    65f8:	4621      	mov	r1, r4
    65fa:	4628      	mov	r0, r5
    65fc:	f7ff fba8 	bl	5d50 <send_frag>
	if (!send_buf(conn, buf)) {
    6600:	b140      	cbz	r0, 6614 <bt_conn_process_tx+0x74>
}
    6602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6604:	f105 070c 	add.w	r7, r5, #12
	frag = create_frag(conn, buf);
    6608:	4601      	mov	r1, r0
    660a:	4638      	mov	r0, r7
    660c:	f7ff ff92 	bl	6534 <create_frag.isra.6>
	if (!frag) {
    6610:	4601      	mov	r1, r0
    6612:	b920      	cbnz	r0, 661e <bt_conn_process_tx+0x7e>
		net_buf_unref(buf);
    6614:	4620      	mov	r0, r4
}
    6616:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    661a:	f011 bc3d 	b.w	17e98 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    661e:	2301      	movs	r3, #1
    6620:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    6622:	4628      	mov	r0, r5
    6624:	f7ff fb94 	bl	5d50 <send_frag>
    6628:	2800      	cmp	r0, #0
    662a:	d0f3      	beq.n	6614 <bt_conn_process_tx+0x74>
	while (buf->len > conn_mtu(conn)) {
    662c:	89a2      	ldrh	r2, [r4, #12]
    662e:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    6632:	429a      	cmp	r2, r3
    6634:	d802      	bhi.n	663c <bt_conn_process_tx+0x9c>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    6636:	2300      	movs	r3, #0
    6638:	2201      	movs	r2, #1
    663a:	e7dd      	b.n	65f8 <bt_conn_process_tx+0x58>
		frag = create_frag(conn, buf);
    663c:	4621      	mov	r1, r4
    663e:	4638      	mov	r0, r7
    6640:	f7ff ff78 	bl	6534 <create_frag.isra.6>
		if (!frag) {
    6644:	4601      	mov	r1, r0
    6646:	2800      	cmp	r0, #0
    6648:	d0e4      	beq.n	6614 <bt_conn_process_tx+0x74>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    664a:	2301      	movs	r3, #1
    664c:	461a      	mov	r2, r3
    664e:	e7e8      	b.n	6622 <bt_conn_process_tx+0x82>
    6650:	2000de20 	.word	0x2000de20

00006654 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    6654:	4b03      	ldr	r3, [pc, #12]	; (6664 <bt_conn_get_id+0x10>)
    6656:	1ac0      	subs	r0, r0, r3
    6658:	4b03      	ldr	r3, [pc, #12]	; (6668 <bt_conn_get_id+0x14>)
    665a:	1080      	asrs	r0, r0, #2
    665c:	4358      	muls	r0, r3
}
    665e:	b2c0      	uxtb	r0, r0
    6660:	4770      	bx	lr
    6662:	bf00      	nop
    6664:	20000484 	.word	0x20000484
    6668:	96f96f97 	.word	0x96f96f97

0000666c <bt_conn_init>:
	node->next = list->head;
    666c:	4b12      	ldr	r3, [pc, #72]	; (66b8 <bt_conn_init+0x4c>)
    666e:	4a13      	ldr	r2, [pc, #76]	; (66bc <bt_conn_init+0x50>)
    6670:	6819      	ldr	r1, [r3, #0]

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    6672:	b510      	push	{r4, lr}
    6674:	6011      	str	r1, [r2, #0]
	if (!list->tail) {
    6676:	6859      	ldr	r1, [r3, #4]
    6678:	b901      	cbnz	r1, 667c <bt_conn_init+0x10>
		list->tail = list->head;
    667a:	605a      	str	r2, [r3, #4]
	if (!list->tail) {
    667c:	6859      	ldr	r1, [r3, #4]
	node->next = list->head;
    667e:	6092      	str	r2, [r2, #8]
	list->head = node;
    6680:	4a0f      	ldr	r2, [pc, #60]	; (66c0 <bt_conn_init+0x54>)
    6682:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
    6684:	b901      	cbnz	r1, 6688 <bt_conn_init+0x1c>
		list->tail = list->head;
    6686:	605a      	str	r2, [r3, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    6688:	f001 ff32 	bl	84f0 <bt_att_init>

	err = bt_smp_init();
    668c:	f004 fa68 	bl	ab60 <bt_smp_init>
	if (err) {
    6690:	4604      	mov	r4, r0
    6692:	b970      	cbnz	r0, 66b2 <bt_conn_init+0x46>
		return err;
	}

	bt_l2cap_init();
    6694:	f000 fb9c 	bl	6dd0 <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    6698:	480a      	ldr	r0, [pc, #40]	; (66c4 <bt_conn_init+0x58>)
    669a:	f7ff f9af 	bl	59fc <atomic_get>
    669e:	b140      	cbz	r0, 66b2 <bt_conn_init+0x46>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    66a0:	4809      	ldr	r0, [pc, #36]	; (66c8 <bt_conn_init+0x5c>)
    66a2:	f7ff f9ab 	bl	59fc <atomic_get>
				continue;
			}

			if (atomic_test_bit(conn->flags,
    66a6:	07c3      	lsls	r3, r0, #31
    66a8:	d503      	bpl.n	66b2 <bt_conn_init+0x46>
					    BT_CONN_AUTO_CONNECT)) {
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    66aa:	2101      	movs	r1, #1
    66ac:	4807      	ldr	r0, [pc, #28]	; (66cc <bt_conn_init+0x60>)
    66ae:	f7ff fc71 	bl	5f94 <bt_conn_set_state>
			}
		}
	}

	return 0;
}
    66b2:	4620      	mov	r0, r4
    66b4:	bd10      	pop	{r4, pc}
    66b6:	bf00      	nop
    66b8:	20000520 	.word	0x20000520
    66bc:	20000474 	.word	0x20000474
    66c0:	2000047c 	.word	0x2000047c
    66c4:	200004c8 	.word	0x200004c8
    66c8:	20000488 	.word	0x20000488
    66cc:	20000484 	.word	0x20000484

000066d0 <sys_slist_append>:
	node->next = NULL;
    66d0:	2300      	movs	r3, #0
    66d2:	600b      	str	r3, [r1, #0]
	if (!list->tail) {
    66d4:	6843      	ldr	r3, [r0, #4]
    66d6:	b913      	cbnz	r3, 66de <sys_slist_append+0xe>
		list->tail = node;
    66d8:	6041      	str	r1, [r0, #4]
		list->head = node;
    66da:	6001      	str	r1, [r0, #0]
    66dc:	4770      	bx	lr
		list->tail->next = node;
    66de:	6019      	str	r1, [r3, #0]
		list->tail = node;
    66e0:	6041      	str	r1, [r0, #4]
    66e2:	4770      	bx	lr

000066e4 <sys_slist_remove>:
{
    66e4:	b510      	push	{r4, lr}
    66e6:	6813      	ldr	r3, [r2, #0]
    66e8:	6844      	ldr	r4, [r0, #4]
	if (!prev_node) {
    66ea:	b931      	cbnz	r1, 66fa <sys_slist_remove+0x16>
		if (list->tail == node) {
    66ec:	42a2      	cmp	r2, r4
		list->head = node->next;
    66ee:	6003      	str	r3, [r0, #0]
		if (list->tail == node) {
    66f0:	d100      	bne.n	66f4 <sys_slist_remove+0x10>
			list->tail = list->head;
    66f2:	6043      	str	r3, [r0, #4]
	node->next = NULL;
    66f4:	2300      	movs	r3, #0
    66f6:	6013      	str	r3, [r2, #0]
    66f8:	bd10      	pop	{r4, pc}
		if (list->tail == node) {
    66fa:	42a2      	cmp	r2, r4
		prev_node->next = node->next;
    66fc:	600b      	str	r3, [r1, #0]
			list->tail = prev_node;
    66fe:	bf08      	it	eq
    6700:	6041      	streq	r1, [r0, #4]
    6702:	e7f7      	b.n	66f4 <sys_slist_remove+0x10>

00006704 <net_buf_frags_len>:
 *  @param buf Buffer to start off with.
 *
 *  @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
    6704:	4603      	mov	r3, r0
	size_t bytes = 0;
    6706:	2000      	movs	r0, #0

	while (buf) {
    6708:	b903      	cbnz	r3, 670c <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
    670a:	4770      	bx	lr
		bytes += buf->len;
    670c:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
    670e:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
    6710:	4410      	add	r0, r2
    6712:	e7f9      	b.n	6708 <net_buf_frags_len+0x4>

00006714 <get_ident>:

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    6714:	4b04      	ldr	r3, [pc, #16]	; (6728 <get_ident+0x14>)
    6716:	781a      	ldrb	r2, [r3, #0]
    6718:	3201      	adds	r2, #1
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    671a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    671e:	bf08      	it	eq
    6720:	2201      	moveq	r2, #1
    6722:	701a      	strb	r2, [r3, #0]
	}

	return ident;
}
    6724:	7818      	ldrb	r0, [r3, #0]
    6726:	4770      	bx	lr
    6728:	200005c4 	.word	0x200005c4

0000672c <__l2cap_lookup_ident>:
	return NULL;
}

static struct bt_l2cap_le_chan *
__l2cap_lookup_ident(struct bt_conn *conn, u16_t ident, bool remove)
{
    672c:	b538      	push	{r3, r4, r5, lr}
    672e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6730:	b17c      	cbz	r4, 6752 <__l2cap_lookup_ident+0x26>
    6732:	3c08      	subs	r4, #8
    6734:	2300      	movs	r3, #0
    6736:	b90c      	cbnz	r4, 673c <__l2cap_lookup_ident+0x10>
		}

		prev = &chan->node;
	}

	return NULL;
    6738:	2400      	movs	r4, #0
    673a:	e00a      	b.n	6752 <__l2cap_lookup_ident+0x26>
		if (chan->ident == ident) {
    673c:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
    6740:	428d      	cmp	r5, r1
    6742:	d108      	bne.n	6756 <__l2cap_lookup_ident+0x2a>
			if (remove) {
    6744:	b12a      	cbz	r2, 6752 <__l2cap_lookup_ident+0x26>
				sys_slist_remove(&conn->channels, prev,
    6746:	f104 0208 	add.w	r2, r4, #8
    674a:	4619      	mov	r1, r3
    674c:	303c      	adds	r0, #60	; 0x3c
    674e:	f7ff ffc9 	bl	66e4 <sys_slist_remove>
}
    6752:	4620      	mov	r0, r4
    6754:	bd38      	pop	{r3, r4, r5, pc}
		prev = &chan->node;
    6756:	f104 0308 	add.w	r3, r4, #8
	return node->next;
    675a:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    675c:	2c00      	cmp	r4, #0
    675e:	d0eb      	beq.n	6738 <__l2cap_lookup_ident+0xc>
    6760:	3c08      	subs	r4, #8
    6762:	e7e8      	b.n	6736 <__l2cap_lookup_ident+0xa>

00006764 <l2cap_server_lookup_psm>:
	return NULL;
}

#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static struct bt_l2cap_server *l2cap_server_lookup_psm(u16_t psm)
{
    6764:	4b08      	ldr	r3, [pc, #32]	; (6788 <l2cap_server_lookup_psm+0x24>)
    6766:	4602      	mov	r2, r0
    6768:	6818      	ldr	r0, [r3, #0]
	struct bt_l2cap_server *server;

	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    676a:	b100      	cbz	r0, 676e <l2cap_server_lookup_psm+0xa>
    676c:	3808      	subs	r0, #8
    676e:	b900      	cbnz	r0, 6772 <l2cap_server_lookup_psm+0xe>
			return server;
		}
	}

	return NULL;
}
    6770:	4770      	bx	lr
		if (server->psm == psm) {
    6772:	8803      	ldrh	r3, [r0, #0]
    6774:	4293      	cmp	r3, r2
    6776:	d0fb      	beq.n	6770 <l2cap_server_lookup_psm+0xc>
    6778:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    677a:	2000      	movs	r0, #0
    677c:	2b00      	cmp	r3, #0
    677e:	d0f7      	beq.n	6770 <l2cap_server_lookup_psm+0xc>
    6780:	f1a3 0008 	sub.w	r0, r3, #8
    6784:	e7f3      	b.n	676e <l2cap_server_lookup_psm+0xa>
    6786:	bf00      	nop
    6788:	200005d0 	.word	0x200005d0

0000678c <l2cap_remove_tx_cid>:
{
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	/* Protect fixed channels against accidental removal */
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
    678c:	f1a1 0340 	sub.w	r3, r1, #64	; 0x40
    6790:	2b3f      	cmp	r3, #63	; 0x3f
{
    6792:	b510      	push	{r4, lr}
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
    6794:	d804      	bhi.n	67a0 <l2cap_remove_tx_cid+0x14>
    6796:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6798:	b114      	cbz	r4, 67a0 <l2cap_remove_tx_cid+0x14>
    679a:	3c08      	subs	r4, #8
    679c:	2300      	movs	r3, #0
    679e:	b90c      	cbnz	r4, 67a4 <l2cap_remove_tx_cid+0x18>
		return NULL;
    67a0:	2000      	movs	r0, #0
    67a2:	bd10      	pop	{r4, pc}
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    67a4:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
    67a8:	428a      	cmp	r2, r1
    67aa:	f104 0208 	add.w	r2, r4, #8
    67ae:	d105      	bne.n	67bc <l2cap_remove_tx_cid+0x30>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    67b0:	4619      	mov	r1, r3
    67b2:	303c      	adds	r0, #60	; 0x3c
    67b4:	f7ff ff96 	bl	66e4 <sys_slist_remove>
			return BT_L2CAP_LE_CHAN(chan);
    67b8:	4620      	mov	r0, r4
    67ba:	bd10      	pop	{r4, pc}
    67bc:	68a4      	ldr	r4, [r4, #8]
		}

		prev = &chan->node;
    67be:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    67c0:	2c00      	cmp	r4, #0
    67c2:	d0ed      	beq.n	67a0 <l2cap_remove_tx_cid+0x14>
    67c4:	3c08      	subs	r4, #8
    67c6:	e7ea      	b.n	679e <l2cap_remove_tx_cid+0x12>

000067c8 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    67c8:	4770      	bx	lr
	...

000067cc <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    67cc:	4b04      	ldr	r3, [pc, #16]	; (67e0 <l2cap_accept+0x14>)
    67ce:	6818      	ldr	r0, [r3, #0]
    67d0:	b918      	cbnz	r0, 67da <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    67d2:	4a04      	ldr	r2, [pc, #16]	; (67e4 <l2cap_accept+0x18>)
    67d4:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    67d6:	600b      	str	r3, [r1, #0]

		return 0;
    67d8:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    67da:	f06f 000b 	mvn.w	r0, #11
}
    67de:	4770      	bx	lr
    67e0:	20000528 	.word	0x20000528
    67e4:	2000df74 	.word	0x2000df74

000067e8 <l2cap_chan_destroy>:
{
    67e8:	b570      	push	{r4, r5, r6, lr}
    67ea:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->rtx_work);
    67ec:	3010      	adds	r0, #16
    67ee:	f01a fcbb 	bl	21168 <k_delayed_work_cancel>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    67f2:	f104 0680 	add.w	r6, r4, #128	; 0x80
    67f6:	2100      	movs	r1, #0
    67f8:	4630      	mov	r0, r6
    67fa:	f011 fb23 	bl	17e44 <net_buf_get>
    67fe:	4605      	mov	r5, r0
    6800:	b948      	cbnz	r0, 6816 <l2cap_chan_destroy+0x2e>
	if (ch->_sdu) {
    6802:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    6806:	b128      	cbz	r0, 6814 <l2cap_chan_destroy+0x2c>
		net_buf_unref(ch->_sdu);
    6808:	f011 fb46 	bl	17e98 <net_buf_unref>
		ch->_sdu = NULL;
    680c:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
		ch->_sdu_len = 0;
    6810:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
    6814:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    6816:	f011 fb3f 	bl	17e98 <net_buf_unref>
    681a:	e7ec      	b.n	67f6 <l2cap_chan_destroy+0xe>

0000681c <l2cap_chan_tx_init>:
{
    681c:	b510      	push	{r4, lr}
	memset(&chan->tx, 0, sizeof(chan->tx));
    681e:	2220      	movs	r2, #32
{
    6820:	4604      	mov	r4, r0
	memset(&chan->tx, 0, sizeof(chan->tx));
    6822:	2100      	movs	r1, #0
    6824:	3060      	adds	r0, #96	; 0x60
    6826:	f7f9 fff5 	bl	814 <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    682a:	f104 0068 	add.w	r0, r4, #104	; 0x68
    682e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6832:	2100      	movs	r1, #0
    6834:	f01a f944 	bl	20ac0 <_impl_k_sem_init>
	k_fifo_init(&chan->tx_queue);
    6838:	f104 0080 	add.w	r0, r4, #128	; 0x80
}
    683c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_init(&chan->tx_queue);
    6840:	f019 becc 	b.w	205dc <k_queue_init>

00006844 <l2cap_chan_rx_init>:
	if (!chan->rx.mtu) {
    6844:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    6848:	b913      	cbnz	r3, 6850 <l2cap_chan_rx_init+0xc>
		chan->rx.mtu = L2CAP_MAX_LE_MTU;
    684a:	23f7      	movs	r3, #247	; 0xf7
    684c:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	if (!chan->rx.init_credits) {
    6850:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
    6854:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    6858:	b94a      	cbnz	r2, 686e <l2cap_chan_rx_init+0x2a>
		if (chan->chan.ops->alloc_buf) {
    685a:	6842      	ldr	r2, [r0, #4]
    685c:	68d2      	ldr	r2, [r2, #12]
    685e:	b192      	cbz	r2, 6886 <l2cap_chan_rx_init+0x42>
			chan->rx.init_credits = (chan->rx.mtu +
    6860:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
						 (L2CAP_MAX_LE_MPS - 1)) /
    6864:	21f9      	movs	r1, #249	; 0xf9
    6866:	fb92 f2f1 	sdiv	r2, r2, r1
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
    686a:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
	chan->rx.mps = min(chan->rx.mtu + 2, L2CAP_MAX_LE_MPS);
    686e:	3302      	adds	r3, #2
    6870:	2bf9      	cmp	r3, #249	; 0xf9
    6872:	bfa8      	it	ge
    6874:	23f9      	movge	r3, #249	; 0xf9
    6876:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    687a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    687e:	2100      	movs	r1, #0
    6880:	3048      	adds	r0, #72	; 0x48
    6882:	f01a b91d 	b.w	20ac0 <_impl_k_sem_init>
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
    6886:	2202      	movs	r2, #2
    6888:	e7ef      	b.n	686a <l2cap_chan_rx_init+0x26>

0000688a <l2cap_create_le_sig_pdu.isra.6>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    688a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    688c:	4607      	mov	r7, r0
    688e:	460e      	mov	r6, r1
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    6890:	2000      	movs	r0, #0
    6892:	2104      	movs	r1, #4
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    6894:	4615      	mov	r5, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    6896:	f7ff fe39 	bl	650c <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    689a:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    689c:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    689e:	3008      	adds	r0, #8
    68a0:	f011 fb58 	bl	17f54 <net_buf_simple_add>
	hdr->code = code;
    68a4:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    68a6:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    68a8:	8045      	strh	r5, [r0, #2]
}
    68aa:	4620      	mov	r0, r4
    68ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000068ae <l2cap_connected>:
    68ae:	4770      	bx	lr

000068b0 <bt_l2cap_le_fixed_chan_register>:
	sys_slist_append(&le_channels, &chan->node);
    68b0:	f100 0108 	add.w	r1, r0, #8
    68b4:	4801      	ldr	r0, [pc, #4]	; (68bc <bt_l2cap_le_fixed_chan_register+0xc>)
    68b6:	f7ff bf0b 	b.w	66d0 <sys_slist_append>
    68ba:	bf00      	nop
    68bc:	200005c8 	.word	0x200005c8

000068c0 <bt_l2cap_chan_remove>:
{
    68c0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    68c2:	b410      	push	{r4}
    68c4:	460c      	mov	r4, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    68c6:	b113      	cbz	r3, 68ce <bt_l2cap_chan_remove+0xe>
    68c8:	3b08      	subs	r3, #8
    68ca:	2100      	movs	r1, #0
    68cc:	b90b      	cbnz	r3, 68d2 <bt_l2cap_chan_remove+0x12>
}
    68ce:	bc10      	pop	{r4}
    68d0:	4770      	bx	lr
		if (chan == ch) {
    68d2:	42a3      	cmp	r3, r4
    68d4:	f103 0208 	add.w	r2, r3, #8
    68d8:	d103      	bne.n	68e2 <bt_l2cap_chan_remove+0x22>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    68da:	303c      	adds	r0, #60	; 0x3c
}
    68dc:	bc10      	pop	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
    68de:	f7ff bf01 	b.w	66e4 <sys_slist_remove>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    68e2:	4611      	mov	r1, r2
    68e4:	2a00      	cmp	r2, #0
    68e6:	d0f2      	beq.n	68ce <bt_l2cap_chan_remove+0xe>
	return node->next;
    68e8:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    68ea:	2b00      	cmp	r3, #0
    68ec:	d0ef      	beq.n	68ce <bt_l2cap_chan_remove+0xe>
    68ee:	3b08      	subs	r3, #8
    68f0:	e7ec      	b.n	68cc <bt_l2cap_chan_remove+0xc>

000068f2 <bt_l2cap_chan_del>:
	if (!chan->conn) {
    68f2:	6803      	ldr	r3, [r0, #0]
{
    68f4:	b510      	push	{r4, lr}
    68f6:	4604      	mov	r4, r0
	if (!chan->conn) {
    68f8:	b12b      	cbz	r3, 6906 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    68fa:	6843      	ldr	r3, [r0, #4]
    68fc:	685b      	ldr	r3, [r3, #4]
    68fe:	b103      	cbz	r3, 6902 <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    6900:	4798      	blx	r3
	chan->conn = NULL;
    6902:	2300      	movs	r3, #0
    6904:	6023      	str	r3, [r4, #0]
	chan->state = state;
    6906:	2300      	movs	r3, #0
    6908:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	chan->psm = 0;
    690c:	8763      	strh	r3, [r4, #58]	; 0x3a
	if (chan->destroy) {
    690e:	68e3      	ldr	r3, [r4, #12]
    6910:	b11b      	cbz	r3, 691a <bt_l2cap_chan_del+0x28>
		chan->destroy(chan);
    6912:	4620      	mov	r0, r4
}
    6914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    6918:	4718      	bx	r3
    691a:	bd10      	pop	{r4, pc}

0000691c <l2cap_rtx_timeout>:
{
    691c:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    691e:	f1a0 0410 	sub.w	r4, r0, #16
    6922:	4621      	mov	r1, r4
    6924:	f850 0c10 	ldr.w	r0, [r0, #-16]
    6928:	f7ff ffca 	bl	68c0 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    692c:	4620      	mov	r0, r4
}
    692e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
    6932:	f7ff bfde 	b.w	68f2 <bt_l2cap_chan_del>

00006936 <bt_l2cap_disconnected>:
{
    6936:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    6938:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    693a:	b1a3      	cbz	r3, 6966 <bt_l2cap_disconnected+0x30>
    693c:	f1b3 0008 	subs.w	r0, r3, #8
    6940:	d10a      	bne.n	6958 <bt_l2cap_disconnected+0x22>
    6942:	bd10      	pop	{r4, pc}
    6944:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    6946:	f7ff ffd4 	bl	68f2 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    694a:	b164      	cbz	r4, 6966 <bt_l2cap_disconnected+0x30>
    694c:	68a3      	ldr	r3, [r4, #8]
    694e:	b103      	cbz	r3, 6952 <bt_l2cap_disconnected+0x1c>
    6950:	3b08      	subs	r3, #8
{
    6952:	4620      	mov	r0, r4
    6954:	461c      	mov	r4, r3
    6956:	e7f6      	b.n	6946 <bt_l2cap_disconnected+0x10>
    6958:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    695a:	2c00      	cmp	r4, #0
    695c:	d1f2      	bne.n	6944 <bt_l2cap_disconnected+0xe>
}
    695e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    6962:	f7ff bfc6 	b.w	68f2 <bt_l2cap_chan_del>
    6966:	bd10      	pop	{r4, pc}

00006968 <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    6968:	3104      	adds	r1, #4
    696a:	f7ff bdcf 	b.w	650c <bt_conn_create_pdu>

0000696e <bt_l2cap_send_cb>:
{
    696e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6970:	4614      	mov	r4, r2
    6972:	4605      	mov	r5, r0
    6974:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    6976:	f102 0008 	add.w	r0, r2, #8
    697a:	2104      	movs	r1, #4
{
    697c:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    697e:	f011 fb20 	bl	17fc2 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    6982:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    6984:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    6986:	3904      	subs	r1, #4
    6988:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    698a:	4632      	mov	r2, r6
    698c:	4621      	mov	r1, r4
    698e:	4628      	mov	r0, r5
}
    6990:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    6994:	f7ff b9ab 	b.w	5cee <bt_conn_send_cb>

00006998 <l2cap_le_conn_req>:
{
    6998:	b538      	push	{r3, r4, r5, lr}
    699a:	4604      	mov	r4, r0
	ch->chan.ident = get_ident();
    699c:	f7ff feba 	bl	6714 <get_ident>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    69a0:	220a      	movs	r2, #10
	ch->chan.ident = get_ident();
    69a2:	4601      	mov	r1, r0
    69a4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    69a8:	2014      	movs	r0, #20
    69aa:	f7ff ff6e 	bl	688a <l2cap_create_le_sig_pdu.isra.6>
	req = net_buf_add(buf, sizeof(*req));
    69ae:	210a      	movs	r1, #10
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    69b0:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    69b2:	3008      	adds	r0, #8
    69b4:	f011 face 	bl	17f54 <net_buf_simple_add>
	req->psm = sys_cpu_to_le16(ch->chan.psm);
    69b8:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    69ba:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    69bc:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    69c0:	8043      	strh	r3, [r0, #2]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
    69c2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    69c6:	8083      	strh	r3, [r0, #4]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
    69c8:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    69cc:	80c3      	strh	r3, [r0, #6]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
    69ce:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    69d2:	8103      	strh	r3, [r0, #8]
    69d4:	f104 0110 	add.w	r1, r4, #16
    69d8:	f649 4240 	movw	r2, #40000	; 0x9c40
    69dc:	4805      	ldr	r0, [pc, #20]	; (69f4 <l2cap_le_conn_req+0x5c>)
    69de:	f01a fc1d 	bl	2121c <k_delayed_work_submit_to_queue>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    69e2:	6820      	ldr	r0, [r4, #0]
    69e4:	2300      	movs	r3, #0
    69e6:	462a      	mov	r2, r5
    69e8:	2105      	movs	r1, #5
    69ea:	f7ff ffc0 	bl	696e <bt_l2cap_send_cb>
}
    69ee:	2000      	movs	r0, #0
    69f0:	bd38      	pop	{r3, r4, r5, pc}
    69f2:	bf00      	nop
    69f4:	200052a0 	.word	0x200052a0

000069f8 <bt_l2cap_encrypt_change>:
{
    69f8:	b538      	push	{r3, r4, r5, lr}
    69fa:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    69fc:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    69fe:	b10c      	cbz	r4, 6a04 <bt_l2cap_encrypt_change+0xc>
    6a00:	3c08      	subs	r4, #8
    6a02:	b904      	cbnz	r4, 6a06 <bt_l2cap_encrypt_change+0xe>
    6a04:	bd38      	pop	{r3, r4, r5, pc}
	if (chan->state != BT_L2CAP_CONNECT || chan->ident) {
    6a06:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    6a0a:	2b01      	cmp	r3, #1
    6a0c:	d10a      	bne.n	6a24 <bt_l2cap_encrypt_change+0x2c>
    6a0e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    6a12:	b93b      	cbnz	r3, 6a24 <bt_l2cap_encrypt_change+0x2c>
	if (status) {
    6a14:	b175      	cbz	r5, 6a34 <bt_l2cap_encrypt_change+0x3c>
		bt_l2cap_chan_remove(chan->conn, chan);
    6a16:	6820      	ldr	r0, [r4, #0]
    6a18:	4621      	mov	r1, r4
    6a1a:	f7ff ff51 	bl	68c0 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(chan);
    6a1e:	4620      	mov	r0, r4
    6a20:	f7ff ff67 	bl	68f2 <bt_l2cap_chan_del>
		if (chan->ops->encrypt_change) {
    6a24:	6863      	ldr	r3, [r4, #4]
    6a26:	689b      	ldr	r3, [r3, #8]
    6a28:	b113      	cbz	r3, 6a30 <bt_l2cap_encrypt_change+0x38>
			chan->ops->encrypt_change(chan, hci_status);
    6a2a:	4629      	mov	r1, r5
    6a2c:	4620      	mov	r0, r4
    6a2e:	4798      	blx	r3
    6a30:	68a4      	ldr	r4, [r4, #8]
    6a32:	e7e4      	b.n	69fe <bt_l2cap_encrypt_change+0x6>
	l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
    6a34:	4620      	mov	r0, r4
    6a36:	f7ff ffaf 	bl	6998 <l2cap_le_conn_req>
    6a3a:	e7f3      	b.n	6a24 <bt_l2cap_encrypt_change+0x2c>

00006a3c <l2cap_send_reject>:
{
    6a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6a40:	f89d 7020 	ldrb.w	r7, [sp, #32]
    6a44:	4691      	mov	r9, r2
    6a46:	4680      	mov	r8, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    6a48:	1cba      	adds	r2, r7, #2
    6a4a:	2001      	movs	r0, #1
{
    6a4c:	461e      	mov	r6, r3
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    6a4e:	f7ff ff1c 	bl	688a <l2cap_create_le_sig_pdu.isra.6>
	rej = net_buf_add(buf, sizeof(*rej));
    6a52:	f100 0508 	add.w	r5, r0, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    6a56:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    6a58:	2102      	movs	r1, #2
    6a5a:	4628      	mov	r0, r5
    6a5c:	f011 fa7a 	bl	17f54 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    6a60:	f8a0 9000 	strh.w	r9, [r0]
	if (data) {
    6a64:	b126      	cbz	r6, 6a70 <l2cap_send_reject+0x34>
		net_buf_add_mem(buf, data, data_len);
    6a66:	463a      	mov	r2, r7
    6a68:	4631      	mov	r1, r6
    6a6a:	4628      	mov	r0, r5
    6a6c:	f011 fa78 	bl	17f60 <net_buf_simple_add_mem>
    6a70:	4622      	mov	r2, r4
    6a72:	4640      	mov	r0, r8
    6a74:	2300      	movs	r3, #0
    6a76:	2105      	movs	r1, #5
}
    6a78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6a7c:	f7ff bf77 	b.w	696e <bt_l2cap_send_cb>

00006a80 <l2cap_chan_le_send>:
{
    6a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6a84:	4607      	mov	r7, r0
    6a86:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    6a88:	3068      	adds	r0, #104	; 0x68
    6a8a:	2100      	movs	r1, #0
    6a8c:	4616      	mov	r6, r2
    6a8e:	f01a f881 	bl	20b94 <_impl_k_sem_take>
	if (k_sem_take(&ch->tx.credits, K_NO_WAIT)) {
    6a92:	2800      	cmp	r0, #0
    6a94:	d169      	bne.n	6b6a <l2cap_chan_le_send+0xea>
	if (buf->len + sdu_hdr_len > ch->tx.mps) {
    6a96:	89a3      	ldrh	r3, [r4, #12]
    6a98:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
    6a9c:	4433      	add	r3, r6
    6a9e:	4293      	cmp	r3, r2
    6aa0:	f104 0908 	add.w	r9, r4, #8
    6aa4:	d820      	bhi.n	6ae8 <l2cap_chan_le_send+0x68>
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    6aa6:	4648      	mov	r0, r9
    6aa8:	f011 fabc 	bl	18024 <net_buf_simple_headroom>
	headroom = BT_L2CAP_CHAN_SEND_RESERVE + sdu_hdr_len;
    6aac:	f106 0308 	add.w	r3, r6, #8
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    6ab0:	b29b      	uxth	r3, r3
    6ab2:	4298      	cmp	r0, r3
    6ab4:	d318      	bcc.n	6ae8 <l2cap_chan_le_send+0x68>
    6ab6:	6823      	ldr	r3, [r4, #0]
    6ab8:	b9b3      	cbnz	r3, 6ae8 <l2cap_chan_le_send+0x68>
		if (sdu_hdr_len) {
    6aba:	b136      	cbz	r6, 6aca <l2cap_chan_le_send+0x4a>
			net_buf_push_le16(buf, net_buf_frags_len(buf));
    6abc:	4620      	mov	r0, r4
    6abe:	f7ff fe21 	bl	6704 <net_buf_frags_len>
    6ac2:	b281      	uxth	r1, r0
    6ac4:	4648      	mov	r0, r9
    6ac6:	f011 fa84 	bl	17fd2 <net_buf_simple_push_le16>
		return net_buf_ref(buf);
    6aca:	4620      	mov	r0, r4
    6acc:	f011 fa12 	bl	17ef4 <net_buf_ref>
    6ad0:	4605      	mov	r5, r0
	if (!ch->chan.conn) {
    6ad2:	6838      	ldr	r0, [r7, #0]
    6ad4:	2800      	cmp	r0, #0
    6ad6:	d13f      	bne.n	6b58 <l2cap_chan_le_send+0xd8>
		net_buf_unref(buf);
    6ad8:	4628      	mov	r0, r5
    6ada:	f011 f9dd 	bl	17e98 <net_buf_unref>
		return -ECONNRESET;
    6ade:	f06f 0635 	mvn.w	r6, #53	; 0x35
}
    6ae2:	4630      	mov	r0, r6
    6ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    6ae8:	79a0      	ldrb	r0, [r4, #6]
    6aea:	f011 f911 	bl	17d10 <net_buf_pool_get>
	seg = net_buf_alloc(pool, K_NO_WAIT);
    6aee:	2100      	movs	r1, #0
    6af0:	f011 f9a2 	bl	17e38 <net_buf_alloc_fixed>
	if (seg) {
    6af4:	4605      	mov	r5, r0
    6af6:	b340      	cbz	r0, 6b4a <l2cap_chan_le_send+0xca>
		net_buf_reserve(seg, BT_L2CAP_CHAN_SEND_RESERVE);
    6af8:	2108      	movs	r1, #8
    6afa:	4408      	add	r0, r1
    6afc:	f011 f9bb 	bl	17e76 <net_buf_simple_reserve>
    6b00:	f105 0808 	add.w	r8, r5, #8
	if (sdu_hdr_len) {
    6b04:	b136      	cbz	r6, 6b14 <l2cap_chan_le_send+0x94>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    6b06:	4620      	mov	r0, r4
    6b08:	f7ff fdfc 	bl	6704 <net_buf_frags_len>
    6b0c:	b281      	uxth	r1, r0
    6b0e:	4640      	mov	r0, r8
    6b10:	f011 fa37 	bl	17f82 <net_buf_simple_add_le16>
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    6b14:	4640      	mov	r0, r8
    6b16:	f011 fa89 	bl	1802c <net_buf_simple_tailroom>
    6b1a:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
    6b1e:	1b89      	subs	r1, r1, r6
    6b20:	4288      	cmp	r0, r1
    6b22:	d217      	bcs.n	6b54 <l2cap_chan_le_send+0xd4>
    6b24:	4640      	mov	r0, r8
    6b26:	f011 fa81 	bl	1802c <net_buf_simple_tailroom>
    6b2a:	b280      	uxth	r0, r0
	len = min(buf->len, len);
    6b2c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
	net_buf_add_mem(seg, buf->data, len);
    6b30:	68a1      	ldr	r1, [r4, #8]
    6b32:	4582      	cmp	sl, r0
    6b34:	bf28      	it	cs
    6b36:	4682      	movcs	sl, r0
    6b38:	4652      	mov	r2, sl
    6b3a:	4640      	mov	r0, r8
    6b3c:	f011 fa10 	bl	17f60 <net_buf_simple_add_mem>
	net_buf_pull(buf, len);
    6b40:	4651      	mov	r1, sl
    6b42:	4648      	mov	r0, r9
    6b44:	f011 fa56 	bl	17ff4 <net_buf_simple_pull>
    6b48:	e7c3      	b.n	6ad2 <l2cap_chan_le_send+0x52>
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    6b4a:	2104      	movs	r1, #4
    6b4c:	f7ff fcde 	bl	650c <bt_conn_create_pdu>
    6b50:	4605      	mov	r5, r0
    6b52:	e7d5      	b.n	6b00 <l2cap_chan_le_send+0x80>
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    6b54:	b288      	uxth	r0, r1
    6b56:	e7e9      	b.n	6b2c <l2cap_chan_le_send+0xac>
	len = buf->len - sdu_hdr_len;
    6b58:	89ab      	ldrh	r3, [r5, #12]
    6b5a:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
    6b5e:	1b9e      	subs	r6, r3, r6
    6b60:	462a      	mov	r2, r5
    6b62:	2300      	movs	r3, #0
    6b64:	f7ff ff03 	bl	696e <bt_l2cap_send_cb>
    6b68:	e7bb      	b.n	6ae2 <l2cap_chan_le_send+0x62>
		return -EAGAIN;
    6b6a:	f06f 060a 	mvn.w	r6, #10
    6b6e:	e7b8      	b.n	6ae2 <l2cap_chan_le_send+0x62>

00006b70 <l2cap_chan_le_send_sdu>:
{
    6b70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	total_len = net_buf_frags_len(*buf) + sent;
    6b74:	680c      	ldr	r4, [r1, #0]
{
    6b76:	9201      	str	r2, [sp, #4]
    6b78:	4606      	mov	r6, r0
	total_len = net_buf_frags_len(*buf) + sent;
    6b7a:	4620      	mov	r0, r4
{
    6b7c:	460f      	mov	r7, r1
	total_len = net_buf_frags_len(*buf) + sent;
    6b7e:	f7ff fdc1 	bl	6704 <net_buf_frags_len>
    6b82:	9b01      	ldr	r3, [sp, #4]
	if (total_len > ch->tx.mtu) {
    6b84:	f8b6 2062 	ldrh.w	r2, [r6, #98]	; 0x62
	total_len = net_buf_frags_len(*buf) + sent;
    6b88:	eb03 0800 	add.w	r8, r3, r0
	if (total_len > ch->tx.mtu) {
    6b8c:	4590      	cmp	r8, r2
    6b8e:	dc36      	bgt.n	6bfe <l2cap_chan_le_send_sdu+0x8e>
	if (!frag->len && frag->frags) {
    6b90:	89a2      	ldrh	r2, [r4, #12]
    6b92:	b91a      	cbnz	r2, 6b9c <l2cap_chan_le_send_sdu+0x2c>
    6b94:	6822      	ldr	r2, [r4, #0]
    6b96:	2a00      	cmp	r2, #0
    6b98:	bf18      	it	ne
    6b9a:	4614      	movne	r4, r2
	if (!sent) {
    6b9c:	b9b3      	cbnz	r3, 6bcc <l2cap_chan_le_send_sdu+0x5c>
		ret = l2cap_chan_le_send(ch, frag, BT_L2CAP_SDU_HDR_LEN);
    6b9e:	2202      	movs	r2, #2
    6ba0:	4621      	mov	r1, r4
    6ba2:	4630      	mov	r0, r6
    6ba4:	f7ff ff6c 	bl	6a80 <l2cap_chan_le_send>
		if (ret < 0) {
    6ba8:	1e05      	subs	r5, r0, #0
    6baa:	da0e      	bge.n	6bca <l2cap_chan_le_send_sdu+0x5a>
			if (ret == -EAGAIN) {
    6bac:	f115 0f0b 	cmn.w	r5, #11
    6bb0:	d106      	bne.n	6bc0 <l2cap_chan_le_send_sdu+0x50>
				memcpy(net_buf_user_data(frag), &sent,
    6bb2:	2204      	movs	r2, #4
    6bb4:	eb0d 0102 	add.w	r1, sp, r2
    6bb8:	f104 0014 	add.w	r0, r4, #20
    6bbc:	f7f9 fdfe 	bl	7bc <memcpy>
			*buf = frag;
    6bc0:	603c      	str	r4, [r7, #0]
}
    6bc2:	4628      	mov	r0, r5
    6bc4:	b002      	add	sp, #8
    6bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sent = ret;
    6bca:	9501      	str	r5, [sp, #4]
	if (!frag->len && frag->frags) {
    6bcc:	2500      	movs	r5, #0
	for (ret = 0; sent < total_len; sent += ret) {
    6bce:	9b01      	ldr	r3, [sp, #4]
    6bd0:	4598      	cmp	r8, r3
    6bd2:	dc03      	bgt.n	6bdc <l2cap_chan_le_send_sdu+0x6c>
	net_buf_unref(frag);
    6bd4:	4620      	mov	r0, r4
    6bd6:	f011 f95f 	bl	17e98 <net_buf_unref>
	return ret;
    6bda:	e7f2      	b.n	6bc2 <l2cap_chan_le_send_sdu+0x52>
		if (!frag->len) {
    6bdc:	89a0      	ldrh	r0, [r4, #12]
    6bde:	b918      	cbnz	r0, 6be8 <l2cap_chan_le_send_sdu+0x78>
			frag = net_buf_frag_del(NULL, frag);
    6be0:	4621      	mov	r1, r4
    6be2:	f011 f9ab 	bl	17f3c <net_buf_frag_del>
    6be6:	4604      	mov	r4, r0
		ret = l2cap_chan_le_send(ch, frag, 0);
    6be8:	2200      	movs	r2, #0
    6bea:	4621      	mov	r1, r4
    6bec:	4630      	mov	r0, r6
    6bee:	f7ff ff47 	bl	6a80 <l2cap_chan_le_send>
		if (ret < 0) {
    6bf2:	1e05      	subs	r5, r0, #0
    6bf4:	dbda      	blt.n	6bac <l2cap_chan_le_send_sdu+0x3c>
	for (ret = 0; sent < total_len; sent += ret) {
    6bf6:	9b01      	ldr	r3, [sp, #4]
    6bf8:	442b      	add	r3, r5
    6bfa:	9301      	str	r3, [sp, #4]
    6bfc:	e7e7      	b.n	6bce <l2cap_chan_le_send_sdu+0x5e>
		return -EMSGSIZE;
    6bfe:	f06f 0523 	mvn.w	r5, #35	; 0x23
    6c02:	e7de      	b.n	6bc2 <l2cap_chan_le_send_sdu+0x52>

00006c04 <l2cap_chan_update_credits.isra.9>:
static void l2cap_chan_update_credits(struct bt_l2cap_le_chan *chan,
    6c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c08:	6d03      	ldr	r3, [r0, #80]	; 0x50
	    L2CAP_LE_CREDITS_THRESHOLD(chan->rx.init_credits)) {
    6c0a:	f8b0 4046 	ldrh.w	r4, [r0, #70]	; 0x46
	if (k_sem_count_get(&chan->rx.credits) >
    6c0e:	ebb3 0f54 	cmp.w	r3, r4, lsr #1
static void l2cap_chan_update_credits(struct bt_l2cap_le_chan *chan,
    6c12:	4606      	mov	r6, r0
	if (k_sem_count_get(&chan->rx.credits) >
    6c14:	d823      	bhi.n	6c5e <l2cap_chan_update_credits.isra.9+0x5a>
	credits = chan->rx.init_credits - k_sem_count_get(&chan->rx.credits);
    6c16:	1ae4      	subs	r4, r4, r3
    6c18:	b2a4      	uxth	r4, r4
    6c1a:	4625      	mov	r5, r4
		k_sem_give(&chan->rx.credits);
    6c1c:	f100 0748 	add.w	r7, r0, #72	; 0x48
	while (credits--) {
    6c20:	b9bd      	cbnz	r5, 6c52 <l2cap_chan_update_credits.isra.9+0x4e>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    6c22:	f7ff fd77 	bl	6714 <get_ident>
    6c26:	2204      	movs	r2, #4
    6c28:	4601      	mov	r1, r0
    6c2a:	2016      	movs	r0, #22
    6c2c:	f7ff fe2d 	bl	688a <l2cap_create_le_sig_pdu.isra.6>
	ev = net_buf_add(buf, sizeof(*ev));
    6c30:	2104      	movs	r1, #4
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    6c32:	4607      	mov	r7, r0
	ev = net_buf_add(buf, sizeof(*ev));
    6c34:	3008      	adds	r0, #8
    6c36:	f011 f98d 	bl	17f54 <net_buf_simple_add>
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
    6c3a:	f8b6 3040 	ldrh.w	r3, [r6, #64]	; 0x40
    6c3e:	8003      	strh	r3, [r0, #0]
	ev->credits = sys_cpu_to_le16(credits);
    6c40:	8044      	strh	r4, [r0, #2]
    6c42:	462b      	mov	r3, r5
    6c44:	463a      	mov	r2, r7
    6c46:	6830      	ldr	r0, [r6, #0]
    6c48:	2105      	movs	r1, #5
}
    6c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6c4e:	f7ff be8e 	b.w	696e <bt_l2cap_send_cb>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    6c52:	4638      	mov	r0, r7
    6c54:	3d01      	subs	r5, #1
    6c56:	f019 ff3d 	bl	20ad4 <_impl_k_sem_give>
    6c5a:	b2ad      	uxth	r5, r5
    6c5c:	e7e0      	b.n	6c20 <l2cap_chan_update_credits.isra.9+0x1c>
    6c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006c62 <bt_l2cap_le_lookup_tx_cid>:
{
    6c62:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6c64:	b100      	cbz	r0, 6c68 <bt_l2cap_le_lookup_tx_cid+0x6>
    6c66:	3808      	subs	r0, #8
    6c68:	b900      	cbnz	r0, 6c6c <bt_l2cap_le_lookup_tx_cid+0xa>
}
    6c6a:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    6c6c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
    6c70:	428b      	cmp	r3, r1
    6c72:	d0fa      	beq.n	6c6a <bt_l2cap_le_lookup_tx_cid+0x8>
    6c74:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6c76:	2000      	movs	r0, #0
    6c78:	2b00      	cmp	r3, #0
    6c7a:	d0f6      	beq.n	6c6a <bt_l2cap_le_lookup_tx_cid+0x8>
    6c7c:	f1a3 0008 	sub.w	r0, r3, #8
    6c80:	e7f2      	b.n	6c68 <bt_l2cap_le_lookup_tx_cid+0x6>

00006c82 <bt_l2cap_le_lookup_rx_cid>:
{
    6c82:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6c84:	b100      	cbz	r0, 6c88 <bt_l2cap_le_lookup_rx_cid+0x6>
    6c86:	3808      	subs	r0, #8
    6c88:	b900      	cbnz	r0, 6c8c <bt_l2cap_le_lookup_rx_cid+0xa>
}
    6c8a:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    6c8c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    6c90:	428b      	cmp	r3, r1
    6c92:	d0fa      	beq.n	6c8a <bt_l2cap_le_lookup_rx_cid+0x8>
    6c94:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6c96:	2000      	movs	r0, #0
    6c98:	2b00      	cmp	r3, #0
    6c9a:	d0f6      	beq.n	6c8a <bt_l2cap_le_lookup_rx_cid+0x8>
    6c9c:	f1a3 0008 	sub.w	r0, r3, #8
    6ca0:	e7f2      	b.n	6c88 <bt_l2cap_le_lookup_rx_cid+0x6>
	...

00006ca4 <l2cap_chan_add>:
{
    6ca4:	b570      	push	{r4, r5, r6, lr}
    6ca6:	4605      	mov	r5, r0
    6ca8:	4616      	mov	r6, r2
	if (ch && ch->rx.cid > 0) {
    6caa:	460c      	mov	r4, r1
    6cac:	b111      	cbz	r1, 6cb4 <l2cap_chan_add+0x10>
    6cae:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
    6cb2:	b943      	cbnz	r3, 6cc6 <l2cap_chan_add+0x22>
    6cb4:	2240      	movs	r2, #64	; 0x40
		if (ch && !bt_l2cap_le_lookup_rx_cid(conn, cid)) {
    6cb6:	b1e4      	cbz	r4, 6cf2 <l2cap_chan_add+0x4e>
    6cb8:	4611      	mov	r1, r2
    6cba:	4628      	mov	r0, r5
    6cbc:	f7ff ffe1 	bl	6c82 <bt_l2cap_le_lookup_rx_cid>
    6cc0:	b9b8      	cbnz	r0, 6cf2 <l2cap_chan_add+0x4e>
			ch->rx.cid = cid;
    6cc2:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    6cc6:	490f      	ldr	r1, [pc, #60]	; (6d04 <l2cap_chan_add+0x60>)
    6cc8:	f104 0010 	add.w	r0, r4, #16
    6ccc:	f01a fa2e 	bl	2112c <k_delayed_work_init>
	sys_slist_append(&conn->channels, &chan->node);
    6cd0:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    6cd4:	f104 0108 	add.w	r1, r4, #8
    6cd8:	f7ff fcfa 	bl	66d0 <sys_slist_append>
	    L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    6cdc:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
	chan->conn = conn;
    6ce0:	6025      	str	r5, [r4, #0]
	    L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    6ce2:	3b40      	subs	r3, #64	; 0x40
	if (IS_ENABLED(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL) &&
    6ce4:	b29b      	uxth	r3, r3
    6ce6:	2b3f      	cmp	r3, #63	; 0x3f
	chan->destroy = destroy;
    6ce8:	60e6      	str	r6, [r4, #12]
    6cea:	f04f 0001 	mov.w	r0, #1
	if (IS_ENABLED(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL) &&
    6cee:	d906      	bls.n	6cfe <l2cap_chan_add+0x5a>
}
    6cf0:	bd70      	pop	{r4, r5, r6, pc}
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    6cf2:	3201      	adds	r2, #1
    6cf4:	b292      	uxth	r2, r2
    6cf6:	2a80      	cmp	r2, #128	; 0x80
    6cf8:	d1dd      	bne.n	6cb6 <l2cap_chan_add+0x12>
		return false;
    6cfa:	2000      	movs	r0, #0
    6cfc:	bd70      	pop	{r4, r5, r6, pc}
	chan->state = state;
    6cfe:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    6d02:	bd70      	pop	{r4, r5, r6, pc}
    6d04:	0000691d 	.word	0x0000691d

00006d08 <bt_l2cap_connected>:
{
    6d08:	4b10      	ldr	r3, [pc, #64]	; (6d4c <bt_l2cap_connected+0x44>)
    6d0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6d0c:	681c      	ldr	r4, [r3, #0]
    6d0e:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    6d10:	b10c      	cbz	r4, 6d16 <bt_l2cap_connected+0xe>
    6d12:	3c08      	subs	r4, #8
    6d14:	b90c      	cbnz	r4, 6d1a <bt_l2cap_connected+0x12>
}
    6d16:	b003      	add	sp, #12
    6d18:	bd30      	pop	{r4, r5, pc}
		if (fchan->accept(conn, &chan) < 0) {
    6d1a:	6863      	ldr	r3, [r4, #4]
    6d1c:	a901      	add	r1, sp, #4
    6d1e:	4628      	mov	r0, r5
    6d20:	4798      	blx	r3
    6d22:	2800      	cmp	r0, #0
    6d24:	db10      	blt.n	6d48 <bt_l2cap_connected+0x40>
		ch = BT_L2CAP_LE_CHAN(chan);
    6d26:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
    6d28:	8823      	ldrh	r3, [r4, #0]
    6d2a:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
		ch->tx.cid = fchan->cid;
    6d2e:	f8a1 3060 	strh.w	r3, [r1, #96]	; 0x60
		if (!l2cap_chan_add(conn, chan, NULL)) {
    6d32:	2200      	movs	r2, #0
    6d34:	4628      	mov	r0, r5
    6d36:	f7ff ffb5 	bl	6ca4 <l2cap_chan_add>
    6d3a:	2800      	cmp	r0, #0
    6d3c:	d0eb      	beq.n	6d16 <bt_l2cap_connected+0xe>
		if (chan->ops->connected) {
    6d3e:	9801      	ldr	r0, [sp, #4]
    6d40:	6843      	ldr	r3, [r0, #4]
    6d42:	681b      	ldr	r3, [r3, #0]
    6d44:	b103      	cbz	r3, 6d48 <bt_l2cap_connected+0x40>
			chan->ops->connected(chan);
    6d46:	4798      	blx	r3
    6d48:	68a4      	ldr	r4, [r4, #8]
    6d4a:	e7e1      	b.n	6d10 <bt_l2cap_connected+0x8>
    6d4c:	200005c8 	.word	0x200005c8

00006d50 <bt_l2cap_server_register>:
{
    6d50:	4601      	mov	r1, r0
	if (server->psm < L2CAP_LE_PSM_START ||
    6d52:	8800      	ldrh	r0, [r0, #0]
{
    6d54:	b508      	push	{r3, lr}
	if (server->psm < L2CAP_LE_PSM_START ||
    6d56:	1e43      	subs	r3, r0, #1
    6d58:	2bfe      	cmp	r3, #254	; 0xfe
    6d5a:	d811      	bhi.n	6d80 <bt_l2cap_server_register+0x30>
	    server->psm > L2CAP_LE_PSM_END || !server->accept) {
    6d5c:	684b      	ldr	r3, [r1, #4]
    6d5e:	b17b      	cbz	r3, 6d80 <bt_l2cap_server_register+0x30>
	if (server->sec_level > BT_SECURITY_FIPS) {
    6d60:	788b      	ldrb	r3, [r1, #2]
    6d62:	2b04      	cmp	r3, #4
    6d64:	d80c      	bhi.n	6d80 <bt_l2cap_server_register+0x30>
	} else if (server->sec_level < BT_SECURITY_LOW) {
    6d66:	b90b      	cbnz	r3, 6d6c <bt_l2cap_server_register+0x1c>
		server->sec_level = BT_SECURITY_LOW;
    6d68:	2301      	movs	r3, #1
    6d6a:	708b      	strb	r3, [r1, #2]
	if (l2cap_server_lookup_psm(server->psm)) {
    6d6c:	f7ff fcfa 	bl	6764 <l2cap_server_lookup_psm>
    6d70:	4602      	mov	r2, r0
    6d72:	b940      	cbnz	r0, 6d86 <bt_l2cap_server_register+0x36>
	sys_slist_append(&servers, &server->node);
    6d74:	3108      	adds	r1, #8
    6d76:	4805      	ldr	r0, [pc, #20]	; (6d8c <bt_l2cap_server_register+0x3c>)
    6d78:	f7ff fcaa 	bl	66d0 <sys_slist_append>
	return 0;
    6d7c:	4610      	mov	r0, r2
    6d7e:	bd08      	pop	{r3, pc}
		return -EINVAL;
    6d80:	f06f 0015 	mvn.w	r0, #21
    6d84:	bd08      	pop	{r3, pc}
		return -EADDRINUSE;
    6d86:	f06f 002f 	mvn.w	r0, #47	; 0x2f
}
    6d8a:	bd08      	pop	{r3, pc}
    6d8c:	200005d0 	.word	0x200005d0

00006d90 <bt_l2cap_update_conn_param>:
{
    6d90:	b570      	push	{r4, r5, r6, lr}
    6d92:	460c      	mov	r4, r1
    6d94:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    6d96:	f7ff fcbd 	bl	6714 <get_ident>
    6d9a:	2208      	movs	r2, #8
    6d9c:	4601      	mov	r1, r0
    6d9e:	2012      	movs	r0, #18
    6da0:	f7ff fd73 	bl	688a <l2cap_create_le_sig_pdu.isra.6>
	req = net_buf_add(buf, sizeof(*req));
    6da4:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    6da6:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    6da8:	4408      	add	r0, r1
    6daa:	f011 f8d3 	bl	17f54 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    6dae:	8823      	ldrh	r3, [r4, #0]
    6db0:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    6db2:	8863      	ldrh	r3, [r4, #2]
    6db4:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    6db6:	88a3      	ldrh	r3, [r4, #4]
    6db8:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    6dba:	88e3      	ldrh	r3, [r4, #6]
    6dbc:	80c3      	strh	r3, [r0, #6]
    6dbe:	462a      	mov	r2, r5
    6dc0:	4630      	mov	r0, r6
    6dc2:	2300      	movs	r3, #0
    6dc4:	2105      	movs	r1, #5
    6dc6:	f7ff fdd2 	bl	696e <bt_l2cap_send_cb>
}
    6dca:	2000      	movs	r0, #0
    6dcc:	bd70      	pop	{r4, r5, r6, pc}
	...

00006dd0 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    6dd0:	4801      	ldr	r0, [pc, #4]	; (6dd8 <bt_l2cap_init+0x8>)
    6dd2:	f7ff bd6d 	b.w	68b0 <bt_l2cap_le_fixed_chan_register>
    6dd6:	bf00      	nop
    6dd8:	2000df68 	.word	0x2000df68

00006ddc <bt_l2cap_chan_connect>:
	return l2cap_le_conn_req(ch);
}

int bt_l2cap_chan_connect(struct bt_conn *conn, struct bt_l2cap_chan *chan,
			  u16_t psm)
{
    6ddc:	b570      	push	{r4, r5, r6, lr}
    6dde:	460c      	mov	r4, r1
    6de0:	4616      	mov	r6, r2
	BT_DBG("conn %p chan %p psm 0x%04x", conn, chan, psm);

	if (!conn || conn->state != BT_CONN_CONNECTED) {
    6de2:	4605      	mov	r5, r0
    6de4:	b318      	cbz	r0, 6e2e <bt_l2cap_chan_connect+0x52>
    6de6:	7b03      	ldrb	r3, [r0, #12]
    6de8:	2b03      	cmp	r3, #3
    6dea:	d120      	bne.n	6e2e <bt_l2cap_chan_connect+0x52>
		return -ENOTCONN;
	}

	if (!chan) {
    6dec:	b911      	cbnz	r1, 6df4 <bt_l2cap_chan_connect+0x18>
		return -EINVAL;
    6dee:	f06f 0015 	mvn.w	r0, #21
    6df2:	bd70      	pop	{r4, r5, r6, pc}
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_connect(conn, chan, psm);
	}

	if (chan->required_sec_level > BT_SECURITY_FIPS) {
    6df4:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
    6df8:	2b04      	cmp	r3, #4
    6dfa:	d8f8      	bhi.n	6dee <bt_l2cap_chan_connect+0x12>
		return -EINVAL;
	} else if (chan->required_sec_level == BT_SECURITY_NONE) {
    6dfc:	b913      	cbnz	r3, 6e04 <bt_l2cap_chan_connect+0x28>
		chan->required_sec_level = BT_SECURITY_LOW;
    6dfe:	2301      	movs	r3, #1
    6e00:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
	if (psm < L2CAP_LE_PSM_START || psm > L2CAP_LE_PSM_END) {
    6e04:	1e73      	subs	r3, r6, #1
    6e06:	2bfe      	cmp	r3, #254	; 0xfe
    6e08:	d8f1      	bhi.n	6dee <bt_l2cap_chan_connect+0x12>
	l2cap_chan_tx_init(ch);
    6e0a:	4620      	mov	r0, r4
    6e0c:	f7ff fd06 	bl	681c <l2cap_chan_tx_init>
	l2cap_chan_rx_init(ch);
    6e10:	4620      	mov	r0, r4
    6e12:	f7ff fd17 	bl	6844 <l2cap_chan_rx_init>
	if (!l2cap_chan_add(conn, &ch->chan, l2cap_chan_destroy)) {
    6e16:	4a09      	ldr	r2, [pc, #36]	; (6e3c <bt_l2cap_chan_connect+0x60>)
    6e18:	4621      	mov	r1, r4
    6e1a:	4628      	mov	r0, r5
    6e1c:	f7ff ff42 	bl	6ca4 <l2cap_chan_add>
    6e20:	b140      	cbz	r0, 6e34 <bt_l2cap_chan_connect+0x58>
	ch->chan.psm = psm;
    6e22:	8766      	strh	r6, [r4, #58]	; 0x3a
	return l2cap_le_conn_req(ch);
    6e24:	4620      	mov	r0, r4
	}

	return l2cap_le_connect(conn, BT_L2CAP_LE_CHAN(chan), psm);
}
    6e26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return l2cap_le_conn_req(ch);
    6e2a:	f7ff bdb5 	b.w	6998 <l2cap_le_conn_req>
		return -ENOTCONN;
    6e2e:	f06f 0038 	mvn.w	r0, #56	; 0x38
    6e32:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    6e34:	f06f 000b 	mvn.w	r0, #11
}
    6e38:	bd70      	pop	{r4, r5, r6, pc}
    6e3a:	bf00      	nop
    6e3c:	000067e9 	.word	0x000067e9

00006e40 <bt_l2cap_chan_disconnect>:

int bt_l2cap_chan_disconnect(struct bt_l2cap_chan *chan)
{
    6e40:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->conn;
	struct net_buf *buf;
	struct bt_l2cap_disconn_req *req;
	struct bt_l2cap_le_chan *ch;

	if (!conn) {
    6e42:	6803      	ldr	r3, [r0, #0]
{
    6e44:	4604      	mov	r4, r0
	if (!conn) {
    6e46:	b32b      	cbz	r3, 6e94 <bt_l2cap_chan_disconnect+0x54>
	ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p scid 0x%04x dcid 0x%04x", chan, ch->rx.cid,
	       ch->tx.cid);

	ch->chan.ident = get_ident();
    6e48:	f7ff fc64 	bl	6714 <get_ident>

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    6e4c:	2204      	movs	r2, #4
	ch->chan.ident = get_ident();
    6e4e:	4601      	mov	r1, r0
    6e50:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    6e54:	2006      	movs	r0, #6
    6e56:	f7ff fd18 	bl	688a <l2cap_create_le_sig_pdu.isra.6>
				      ch->chan.ident, sizeof(*req));

	req = net_buf_add(buf, sizeof(*req));
    6e5a:	2104      	movs	r1, #4
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    6e5c:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    6e5e:	3008      	adds	r0, #8
    6e60:	f011 f878 	bl	17f54 <net_buf_simple_add>
	req->dcid = sys_cpu_to_le16(ch->tx.cid);
    6e64:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    6e68:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    6e6a:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    6e6e:	8043      	strh	r3, [r0, #2]
    6e70:	f104 0110 	add.w	r1, r4, #16
    6e74:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    6e78:	4808      	ldr	r0, [pc, #32]	; (6e9c <bt_l2cap_chan_disconnect+0x5c>)
    6e7a:	f01a f9cf 	bl	2121c <k_delayed_work_submit_to_queue>
    6e7e:	6820      	ldr	r0, [r4, #0]
    6e80:	2300      	movs	r3, #0
    6e82:	462a      	mov	r2, r5
    6e84:	2105      	movs	r1, #5
    6e86:	f7ff fd72 	bl	696e <bt_l2cap_send_cb>
	chan->state = state;
    6e8a:	2304      	movs	r3, #4
    6e8c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

	l2cap_chan_send_req(ch, buf, L2CAP_DISC_TIMEOUT);
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECT);

	return 0;
    6e90:	2000      	movs	r0, #0
    6e92:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    6e94:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    6e98:	bd38      	pop	{r3, r4, r5, pc}
    6e9a:	bf00      	nop
    6e9c:	200052a0 	.word	0x200052a0

00006ea0 <l2cap_chan_le_recv_sdu>:
{
    6ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6ea4:	460d      	mov	r5, r1
	if (net_buf_frags_len(chan->_sdu) + buf->len > chan->_sdu_len) {
    6ea6:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
{
    6eaa:	4604      	mov	r4, r0
	if (net_buf_frags_len(chan->_sdu) + buf->len > chan->_sdu_len) {
    6eac:	4608      	mov	r0, r1
    6eae:	f7ff fc29 	bl	6704 <net_buf_frags_len>
    6eb2:	89ab      	ldrh	r3, [r5, #12]
    6eb4:	4418      	add	r0, r3
    6eb6:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
    6eba:	4298      	cmp	r0, r3
    6ebc:	d904      	bls.n	6ec8 <l2cap_chan_le_recv_sdu+0x28>
		bt_l2cap_chan_disconnect(&chan->chan);
    6ebe:	4620      	mov	r0, r4
}
    6ec0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_l2cap_chan_disconnect(&chan->chan);
    6ec4:	f7ff bfbc 	b.w	6e40 <bt_l2cap_chan_disconnect>
	frag = net_buf_frag_last(chan->_sdu);
    6ec8:	4608      	mov	r0, r1
    6eca:	f011 f817 	bl	17efc <net_buf_frag_last>
		net_buf_pull(buf, len);
    6ece:	f105 0908 	add.w	r9, r5, #8
	frag = net_buf_frag_last(chan->_sdu);
    6ed2:	4606      	mov	r6, r0
	while (buf->len) {
    6ed4:	89af      	ldrh	r7, [r5, #12]
    6ed6:	b9cf      	cbnz	r7, 6f0c <l2cap_chan_le_recv_sdu+0x6c>
	if (net_buf_frags_len(chan->_sdu) == chan->_sdu_len) {
    6ed8:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
    6edc:	4608      	mov	r0, r1
    6ede:	f7ff fc11 	bl	6704 <net_buf_frags_len>
    6ee2:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
    6ee6:	4298      	cmp	r0, r3
    6ee8:	d10b      	bne.n	6f02 <l2cap_chan_le_recv_sdu+0x62>
		chan->chan.ops->recv(&chan->chan, chan->_sdu);
    6eea:	6863      	ldr	r3, [r4, #4]
    6eec:	4620      	mov	r0, r4
    6eee:	691b      	ldr	r3, [r3, #16]
    6ef0:	4798      	blx	r3
		net_buf_unref(chan->_sdu);
    6ef2:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    6ef6:	f010 ffcf 	bl	17e98 <net_buf_unref>
		chan->_sdu = NULL;
    6efa:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94
		chan->_sdu_len = 0;
    6efe:	f8a4 7098 	strh.w	r7, [r4, #152]	; 0x98
	l2cap_chan_update_credits(chan, buf);
    6f02:	4620      	mov	r0, r4
}
    6f04:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	l2cap_chan_update_credits(chan, buf);
    6f08:	f7ff be7c 	b.w	6c04 <l2cap_chan_update_credits.isra.9>
		if (!net_buf_tailroom(frag)) {
    6f0c:	f106 0008 	add.w	r0, r6, #8
    6f10:	f011 f88c 	bl	1802c <net_buf_simple_tailroom>
    6f14:	b958      	cbnz	r0, 6f2e <l2cap_chan_le_recv_sdu+0x8e>
	frag = chan->chan.ops->alloc_buf(&chan->chan);
    6f16:	6863      	ldr	r3, [r4, #4]
    6f18:	4620      	mov	r0, r4
    6f1a:	68db      	ldr	r3, [r3, #12]
    6f1c:	4798      	blx	r3
	if (!frag) {
    6f1e:	4606      	mov	r6, r0
    6f20:	2800      	cmp	r0, #0
    6f22:	d0cc      	beq.n	6ebe <l2cap_chan_le_recv_sdu+0x1e>
	net_buf_frag_add(chan->_sdu, frag);
    6f24:	4601      	mov	r1, r0
    6f26:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    6f2a:	f010 fff7 	bl	17f1c <net_buf_frag_add>
		len = min(net_buf_tailroom(frag), buf->len);
    6f2e:	f106 0808 	add.w	r8, r6, #8
    6f32:	4640      	mov	r0, r8
    6f34:	f011 f87a 	bl	1802c <net_buf_simple_tailroom>
    6f38:	89af      	ldrh	r7, [r5, #12]
    6f3a:	42b8      	cmp	r0, r7
    6f3c:	d203      	bcs.n	6f46 <l2cap_chan_le_recv_sdu+0xa6>
    6f3e:	4640      	mov	r0, r8
    6f40:	f011 f874 	bl	1802c <net_buf_simple_tailroom>
    6f44:	b287      	uxth	r7, r0
		net_buf_add_mem(frag, buf->data, len);
    6f46:	68a9      	ldr	r1, [r5, #8]
    6f48:	463a      	mov	r2, r7
    6f4a:	4640      	mov	r0, r8
    6f4c:	f011 f808 	bl	17f60 <net_buf_simple_add_mem>
		net_buf_pull(buf, len);
    6f50:	4639      	mov	r1, r7
    6f52:	4648      	mov	r0, r9
    6f54:	f011 f84e 	bl	17ff4 <net_buf_simple_pull>
    6f58:	e7bc      	b.n	6ed4 <l2cap_chan_le_recv_sdu+0x34>

00006f5a <bt_l2cap_recv>:
{
    6f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    6f5c:	898b      	ldrh	r3, [r1, #12]
    6f5e:	2b03      	cmp	r3, #3
{
    6f60:	4604      	mov	r4, r0
    6f62:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    6f64:	d804      	bhi.n	6f70 <bt_l2cap_recv+0x16>
		net_buf_unref(buf);
    6f66:	4628      	mov	r0, r5
}
    6f68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    6f6c:	f010 bf94 	b.w	17e98 <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    6f70:	460e      	mov	r6, r1
	net_buf_pull(buf, sizeof(*hdr));
    6f72:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    6f74:	f856 3f08 	ldr.w	r3, [r6, #8]!
    6f78:	885f      	ldrh	r7, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    6f7a:	4630      	mov	r0, r6
    6f7c:	f011 f83a 	bl	17ff4 <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    6f80:	4620      	mov	r0, r4
    6f82:	4639      	mov	r1, r7
    6f84:	f7ff fe7d 	bl	6c82 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    6f88:	4604      	mov	r4, r0
    6f8a:	2800      	cmp	r0, #0
    6f8c:	d0eb      	beq.n	6f66 <bt_l2cap_recv+0xc>
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    6f8e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    6f92:	3b40      	subs	r3, #64	; 0x40
    6f94:	b29b      	uxth	r3, r3
    6f96:	2b3f      	cmp	r3, #63	; 0x3f
    6f98:	d82c      	bhi.n	6ff4 <bt_l2cap_recv+0x9a>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    6f9a:	2100      	movs	r1, #0
    6f9c:	3048      	adds	r0, #72	; 0x48
    6f9e:	f019 fdf9 	bl	20b94 <_impl_k_sem_take>
	if (k_sem_take(&chan->rx.credits, K_NO_WAIT)) {
    6fa2:	b118      	cbz	r0, 6fac <bt_l2cap_recv+0x52>
			bt_l2cap_chan_disconnect(&chan->chan);
    6fa4:	4620      	mov	r0, r4
    6fa6:	f7ff ff4b 	bl	6e40 <bt_l2cap_chan_disconnect>
    6faa:	e7dc      	b.n	6f66 <bt_l2cap_recv+0xc>
	if (chan->_sdu) {
    6fac:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    6fb0:	b123      	cbz	r3, 6fbc <bt_l2cap_recv+0x62>
		l2cap_chan_le_recv_sdu(chan, buf);
    6fb2:	4629      	mov	r1, r5
    6fb4:	4620      	mov	r0, r4
    6fb6:	f7ff ff73 	bl	6ea0 <l2cap_chan_le_recv_sdu>
    6fba:	e7d4      	b.n	6f66 <bt_l2cap_recv+0xc>
	sdu_len = net_buf_pull_le16(buf);
    6fbc:	4630      	mov	r0, r6
    6fbe:	f011 f829 	bl	18014 <net_buf_simple_pull_le16>
	if (sdu_len > chan->rx.mtu) {
    6fc2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    6fc6:	4283      	cmp	r3, r0
	sdu_len = net_buf_pull_le16(buf);
    6fc8:	4606      	mov	r6, r0
	if (sdu_len > chan->rx.mtu) {
    6fca:	d3eb      	bcc.n	6fa4 <bt_l2cap_recv+0x4a>
	if (chan->chan.ops->alloc_buf) {
    6fcc:	6863      	ldr	r3, [r4, #4]
    6fce:	68da      	ldr	r2, [r3, #12]
    6fd0:	b142      	cbz	r2, 6fe4 <bt_l2cap_recv+0x8a>
		chan->_sdu = chan->chan.ops->alloc_buf(&chan->chan);
    6fd2:	4620      	mov	r0, r4
    6fd4:	4790      	blx	r2
    6fd6:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
		if (!chan->_sdu) {
    6fda:	2800      	cmp	r0, #0
    6fdc:	d0e2      	beq.n	6fa4 <bt_l2cap_recv+0x4a>
		chan->_sdu_len = sdu_len;
    6fde:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98
    6fe2:	e7e6      	b.n	6fb2 <bt_l2cap_recv+0x58>
	chan->chan.ops->recv(&chan->chan, buf);
    6fe4:	4620      	mov	r0, r4
    6fe6:	691b      	ldr	r3, [r3, #16]
    6fe8:	4629      	mov	r1, r5
    6fea:	4798      	blx	r3
	l2cap_chan_update_credits(chan, buf);
    6fec:	4620      	mov	r0, r4
    6fee:	f7ff fe09 	bl	6c04 <l2cap_chan_update_credits.isra.9>
    6ff2:	e7b8      	b.n	6f66 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
    6ff4:	6843      	ldr	r3, [r0, #4]
    6ff6:	4629      	mov	r1, r5
    6ff8:	691b      	ldr	r3, [r3, #16]
    6ffa:	4798      	blx	r3
    6ffc:	e7b3      	b.n	6f66 <bt_l2cap_recv+0xc>
	...

00007000 <l2cap_recv>:
{
    7000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*hdr)) {
    7004:	898b      	ldrh	r3, [r1, #12]
    7006:	2b03      	cmp	r3, #3
{
    7008:	b087      	sub	sp, #28
    700a:	4606      	mov	r6, r0
    700c:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    700e:	d970      	bls.n	70f2 <l2cap_recv+0xf2>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    7010:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    7012:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    7014:	f850 8f08 	ldr.w	r8, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    7018:	f8b8 7002 	ldrh.w	r7, [r8, #2]
	net_buf_pull(buf, sizeof(*hdr));
    701c:	f010 ffea 	bl	17ff4 <net_buf_simple_pull>
	if (buf->len != len) {
    7020:	89ab      	ldrh	r3, [r5, #12]
    7022:	42bb      	cmp	r3, r7
    7024:	d165      	bne.n	70f2 <l2cap_recv+0xf2>
	if (!hdr->ident) {
    7026:	f898 4001 	ldrb.w	r4, [r8, #1]
    702a:	2c00      	cmp	r4, #0
    702c:	d061      	beq.n	70f2 <l2cap_recv+0xf2>
	switch (hdr->code) {
    702e:	f898 3000 	ldrb.w	r3, [r8]
    7032:	3b01      	subs	r3, #1
    7034:	2b15      	cmp	r3, #21
    7036:	f200 81e9 	bhi.w	740c <l2cap_recv+0x40c>
    703a:	e8df f013 	tbh	[pc, r3, lsl #1]
    703e:	01e1      	.short	0x01e1
    7040:	01e701e7 	.word	0x01e701e7
    7044:	01e701e7 	.word	0x01e701e7
    7048:	019a0164 	.word	0x019a0164
    704c:	01e701e7 	.word	0x01e701e7
    7050:	01e701e7 	.word	0x01e701e7
    7054:	01e701e7 	.word	0x01e701e7
    7058:	01e701e7 	.word	0x01e701e7
    705c:	01e701e7 	.word	0x01e701e7
    7060:	005a0016 	.word	0x005a0016
    7064:	00f60061 	.word	0x00f60061
    7068:	01a5      	.short	0x01a5
	if (buf->len < sizeof(*req)) {
    706a:	2f07      	cmp	r7, #7
    706c:	d941      	bls.n	70f2 <l2cap_recv+0xf2>
    706e:	6836      	ldr	r6, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    7070:	78f7      	ldrb	r7, [r6, #3]
    7072:	b13f      	cbz	r7, 7084 <l2cap_recv+0x84>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    7074:	2300      	movs	r3, #0
    7076:	9300      	str	r3, [sp, #0]
    7078:	461a      	mov	r2, r3
    707a:	4621      	mov	r1, r4
    707c:	4630      	mov	r0, r6
		l2cap_send_reject(chan->conn, hdr->ident,
    707e:	f7ff fcdd 	bl	6a3c <l2cap_send_reject>
		break;
    7082:	e036      	b.n	70f2 <l2cap_recv+0xf2>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    7084:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    7086:	7859      	ldrb	r1, [r3, #1]
    7088:	781a      	ldrb	r2, [r3, #0]
    708a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    708e:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    7092:	78d9      	ldrb	r1, [r3, #3]
    7094:	789a      	ldrb	r2, [r3, #2]
    7096:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    709a:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(req->latency);
    709e:	7959      	ldrb	r1, [r3, #5]
    70a0:	791a      	ldrb	r2, [r3, #4]
    70a2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    70a6:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(req->timeout);
    70aa:	799a      	ldrb	r2, [r3, #6]
    70ac:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    70ae:	4621      	mov	r1, r4
	param.timeout = sys_le16_to_cpu(req->timeout);
    70b0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    70b4:	2013      	movs	r0, #19
    70b6:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    70b8:	f8ad 3016 	strh.w	r3, [sp, #22]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    70bc:	f7ff fbe5 	bl	688a <l2cap_create_le_sig_pdu.isra.6>
	accepted = le_param_req(conn, &param);
    70c0:	a904      	add	r1, sp, #16
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    70c2:	4605      	mov	r5, r0
	accepted = le_param_req(conn, &param);
    70c4:	4630      	mov	r0, r6
    70c6:	f7fe fcdd 	bl	5a84 <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    70ca:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    70cc:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    70ce:	f105 0008 	add.w	r0, r5, #8
    70d2:	f010 ff3f 	bl	17f54 <net_buf_simple_add>
	if (accepted) {
    70d6:	b17c      	cbz	r4, 70f8 <l2cap_recv+0xf8>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    70d8:	7007      	strb	r7, [r0, #0]
    70da:	7047      	strb	r7, [r0, #1]
    70dc:	2300      	movs	r3, #0
    70de:	462a      	mov	r2, r5
    70e0:	2105      	movs	r1, #5
    70e2:	4630      	mov	r0, r6
    70e4:	f7ff fc43 	bl	696e <bt_l2cap_send_cb>
	if (accepted) {
    70e8:	b11c      	cbz	r4, 70f2 <l2cap_recv+0xf2>
		bt_conn_le_conn_update(conn, &param);
    70ea:	a904      	add	r1, sp, #16
    70ec:	4630      	mov	r0, r6
    70ee:	f7ff f98d 	bl	640c <bt_conn_le_conn_update>
}
    70f2:	b007      	add	sp, #28
    70f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    70f8:	2301      	movs	r3, #1
    70fa:	7003      	strb	r3, [r0, #0]
    70fc:	7044      	strb	r4, [r0, #1]
    70fe:	e7ed      	b.n	70dc <l2cap_recv+0xdc>
	if (buf->len < sizeof(*req)) {
    7100:	2f09      	cmp	r7, #9
    7102:	d9f6      	bls.n	70f2 <l2cap_recv+0xf2>
	struct bt_l2cap_le_conn_req *req = (void *)buf->data;
    7104:	68aa      	ldr	r2, [r5, #8]
	mtu = sys_le16_to_cpu(req->mtu);
    7106:	f8b2 9004 	ldrh.w	r9, [r2, #4]
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    710a:	f1b9 0f16 	cmp.w	r9, #22
    710e:	d9f0      	bls.n	70f2 <l2cap_recv+0xf2>
	mps = sys_le16_to_cpu(req->mps);
    7110:	f8b2 a006 	ldrh.w	sl, [r2, #6]
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    7114:	f1ba 0f16 	cmp.w	sl, #22
    7118:	d9eb      	bls.n	70f2 <l2cap_recv+0xf2>
	credits = sys_le16_to_cpu(req->credits);
    711a:	8913      	ldrh	r3, [r2, #8]
	scid = sys_le16_to_cpu(req->scid);
    711c:	f8b2 b002 	ldrh.w	fp, [r2, #2]
    7120:	6835      	ldr	r5, [r6, #0]
	psm = sys_le16_to_cpu(req->psm);
    7122:	8816      	ldrh	r6, [r2, #0]
	credits = sys_le16_to_cpu(req->credits);
    7124:	9303      	str	r3, [sp, #12]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    7126:	220a      	movs	r2, #10
    7128:	4621      	mov	r1, r4
    712a:	2015      	movs	r0, #21
	credits = sys_le16_to_cpu(req->credits);
    712c:	461f      	mov	r7, r3
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    712e:	f7ff fbac 	bl	688a <l2cap_create_le_sig_pdu.isra.6>
	rsp = net_buf_add(buf, sizeof(*rsp));
    7132:	210a      	movs	r1, #10
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    7134:	9002      	str	r0, [sp, #8]
	rsp = net_buf_add(buf, sizeof(*rsp));
    7136:	3008      	adds	r0, #8
    7138:	f010 ff0c 	bl	17f54 <net_buf_simple_add>
	memset(rsp, 0, sizeof(*rsp));
    713c:	220a      	movs	r2, #10
    713e:	2100      	movs	r1, #0
	rsp = net_buf_add(buf, sizeof(*rsp));
    7140:	4604      	mov	r4, r0
	memset(rsp, 0, sizeof(*rsp));
    7142:	f7f9 fb67 	bl	814 <memset>
	server = l2cap_server_lookup_psm(psm);
    7146:	4630      	mov	r0, r6
    7148:	f7ff fb0c 	bl	6764 <l2cap_server_lookup_psm>
	if (!server) {
    714c:	4606      	mov	r6, r0
    714e:	b940      	cbnz	r0, 7162 <l2cap_recv+0x162>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_PSM_NOT_SUPP);
    7150:	2302      	movs	r3, #2
    7152:	9a02      	ldr	r2, [sp, #8]
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    7154:	8123      	strh	r3, [r4, #8]
    7156:	2105      	movs	r1, #5
    7158:	2300      	movs	r3, #0
    715a:	4628      	mov	r0, r5
    715c:	f7ff fc07 	bl	696e <bt_l2cap_send_cb>
    7160:	e7c7      	b.n	70f2 <l2cap_recv+0xf2>
	if (conn->sec_level < server->sec_level) {
    7162:	7a29      	ldrb	r1, [r5, #8]
    7164:	7882      	ldrb	r2, [r0, #2]
    7166:	4291      	cmp	r1, r2
    7168:	d201      	bcs.n	716e <l2cap_recv+0x16e>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_AUTHENTICATION);
    716a:	2305      	movs	r3, #5
    716c:	e7f1      	b.n	7152 <l2cap_recv+0x152>
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    716e:	f1ab 0240 	sub.w	r2, fp, #64	; 0x40
    7172:	2a3f      	cmp	r2, #63	; 0x3f
    7174:	d901      	bls.n	717a <l2cap_recv+0x17a>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_INVALID_SCID);
    7176:	2309      	movs	r3, #9
    7178:	e7eb      	b.n	7152 <l2cap_recv+0x152>
	chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    717a:	4659      	mov	r1, fp
    717c:	4628      	mov	r0, r5
    717e:	f7ff fd70 	bl	6c62 <bt_l2cap_le_lookup_tx_cid>
    7182:	9004      	str	r0, [sp, #16]
	if (chan) {
    7184:	b108      	cbz	r0, 718a <l2cap_recv+0x18a>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_SCID_IN_USE);
    7186:	230a      	movs	r3, #10
    7188:	e7e3      	b.n	7152 <l2cap_recv+0x152>
	if (server->accept(conn, &chan) < 0) {
    718a:	6873      	ldr	r3, [r6, #4]
    718c:	a904      	add	r1, sp, #16
    718e:	4628      	mov	r0, r5
    7190:	4798      	blx	r3
    7192:	2800      	cmp	r0, #0
    7194:	da01      	bge.n	719a <l2cap_recv+0x19a>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    7196:	2304      	movs	r3, #4
    7198:	e7db      	b.n	7152 <l2cap_recv+0x152>
	chan->required_sec_level = server->sec_level;
    719a:	9904      	ldr	r1, [sp, #16]
    719c:	78b3      	ldrb	r3, [r6, #2]
    719e:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
	if (l2cap_chan_add(conn, chan, l2cap_chan_destroy)) {
    71a2:	4a9d      	ldr	r2, [pc, #628]	; (7418 <l2cap_recv+0x418>)
    71a4:	4628      	mov	r0, r5
    71a6:	f7ff fd7d 	bl	6ca4 <l2cap_chan_add>
    71aa:	2800      	cmp	r0, #0
    71ac:	d0f3      	beq.n	7196 <l2cap_recv+0x196>
		struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);
    71ae:	f8dd 8010 	ldr.w	r8, [sp, #16]
		l2cap_chan_tx_init(ch);
    71b2:	4640      	mov	r0, r8
    71b4:	f7ff fb32 	bl	681c <l2cap_chan_tx_init>
		ch->tx.init_credits = credits;
    71b8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
		ch->tx.mtu = mtu;
    71bc:	f8a8 9062 	strh.w	r9, [r8, #98]	; 0x62
		ch->tx.cid = scid;
    71c0:	f8a8 b060 	strh.w	fp, [r8, #96]	; 0x60
		ch->tx.mps = mps;
    71c4:	f8a8 a064 	strh.w	sl, [r8, #100]	; 0x64
		ch->tx.init_credits = credits;
    71c8:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
		k_sem_give(&chan->tx.credits);
    71cc:	f108 0968 	add.w	r9, r8, #104	; 0x68
	while (credits--) {
    71d0:	b9ff      	cbnz	r7, 7212 <l2cap_recv+0x212>
		l2cap_chan_rx_init(ch);
    71d2:	4640      	mov	r0, r8
    71d4:	f7ff fb36 	bl	6844 <l2cap_chan_rx_init>
		l2cap_chan_rx_give_credits(ch, ch->rx.init_credits);
    71d8:	f8b8 7046 	ldrh.w	r7, [r8, #70]	; 0x46
		k_sem_give(&chan->rx.credits);
    71dc:	f108 0948 	add.w	r9, r8, #72	; 0x48
	while (credits--) {
    71e0:	b9ef      	cbnz	r7, 721e <l2cap_recv+0x21e>
		chan->psm = server->psm;
    71e2:	9804      	ldr	r0, [sp, #16]
    71e4:	8832      	ldrh	r2, [r6, #0]
    71e6:	8742      	strh	r2, [r0, #58]	; 0x3a
	chan->state = state;
    71e8:	2203      	movs	r2, #3
    71ea:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
		if (chan->ops->connected) {
    71ee:	6842      	ldr	r2, [r0, #4]
    71f0:	6812      	ldr	r2, [r2, #0]
    71f2:	b102      	cbz	r2, 71f6 <l2cap_recv+0x1f6>
			chan->ops->connected(chan);
    71f4:	4790      	blx	r2
		rsp->dcid = sys_cpu_to_le16(ch->rx.cid);
    71f6:	f8b8 2040 	ldrh.w	r2, [r8, #64]	; 0x40
    71fa:	8022      	strh	r2, [r4, #0]
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    71fc:	f8b8 2044 	ldrh.w	r2, [r8, #68]	; 0x44
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    7200:	f8b8 3046 	ldrh.w	r3, [r8, #70]	; 0x46
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    7204:	80a2      	strh	r2, [r4, #4]
		rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    7206:	f8b8 2042 	ldrh.w	r2, [r8, #66]	; 0x42
    720a:	8062      	strh	r2, [r4, #2]
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    720c:	80e3      	strh	r3, [r4, #6]
		rsp->result = BT_L2CAP_SUCCESS;
    720e:	2300      	movs	r3, #0
    7210:	e79f      	b.n	7152 <l2cap_recv+0x152>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    7212:	4648      	mov	r0, r9
    7214:	3f01      	subs	r7, #1
    7216:	f019 fc5d 	bl	20ad4 <_impl_k_sem_give>
    721a:	b2bf      	uxth	r7, r7
    721c:	e7d8      	b.n	71d0 <l2cap_recv+0x1d0>
    721e:	4648      	mov	r0, r9
    7220:	3f01      	subs	r7, #1
    7222:	f019 fc57 	bl	20ad4 <_impl_k_sem_give>
    7226:	b2bf      	uxth	r7, r7
    7228:	e7da      	b.n	71e0 <l2cap_recv+0x1e0>
	if (buf->len < sizeof(*rsp)) {
    722a:	2f09      	cmp	r7, #9
    722c:	f67f af61 	bls.w	70f2 <l2cap_recv+0xf2>
	struct bt_l2cap_le_conn_rsp *rsp = (void *)buf->data;
    7230:	68ab      	ldr	r3, [r5, #8]
    7232:	6837      	ldr	r7, [r6, #0]
	result = sys_le16_to_cpu(rsp->result);
    7234:	891e      	ldrh	r6, [r3, #8]
	dcid = sys_le16_to_cpu(rsp->dcid);
    7236:	f8b3 a000 	ldrh.w	sl, [r3]
	mtu = sys_le16_to_cpu(rsp->mtu);
    723a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
	mps = sys_le16_to_cpu(rsp->mps);
    723e:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	credits = sys_le16_to_cpu(rsp->credits);
    7242:	88dd      	ldrh	r5, [r3, #6]
	if (result == BT_L2CAP_SUCCESS ||
    7244:	f026 0308 	bic.w	r3, r6, #8
    7248:	b2a1      	uxth	r1, r4
    724a:	b10b      	cbz	r3, 7250 <l2cap_recv+0x250>
    724c:	2e05      	cmp	r6, #5
    724e:	d12f      	bne.n	72b0 <l2cap_recv+0x2b0>
		chan = l2cap_lookup_ident(conn, ident);
    7250:	2200      	movs	r2, #0
		chan = l2cap_remove_ident(conn, ident);
    7252:	4638      	mov	r0, r7
    7254:	f7ff fa6a 	bl	672c <__l2cap_lookup_ident>
    7258:	4604      	mov	r4, r0
	if (!chan) {
    725a:	2800      	cmp	r0, #0
    725c:	f43f af49 	beq.w	70f2 <l2cap_recv+0xf2>
	k_delayed_work_cancel(&chan->chan.rtx_work);
    7260:	3010      	adds	r0, #16
    7262:	f019 ff81 	bl	21168 <k_delayed_work_cancel>
	chan->chan.ident = 0;
    7266:	2300      	movs	r3, #0
	switch (result) {
    7268:	2e05      	cmp	r6, #5
	chan->chan.ident = 0;
    726a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	switch (result) {
    726e:	d03e      	beq.n	72ee <l2cap_recv+0x2ee>
    7270:	2e08      	cmp	r6, #8
    7272:	d025      	beq.n	72c0 <l2cap_recv+0x2c0>
    7274:	bbbe      	cbnz	r6, 72e6 <l2cap_recv+0x2e6>
	chan->state = state;
    7276:	2303      	movs	r3, #3
    7278:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (chan->chan.ops->connected) {
    727c:	6863      	ldr	r3, [r4, #4]
		chan->tx.cid = dcid;
    727e:	f8a4 a060 	strh.w	sl, [r4, #96]	; 0x60
		if (chan->chan.ops->connected) {
    7282:	681b      	ldr	r3, [r3, #0]
		chan->tx.mtu = mtu;
    7284:	f8a4 9062 	strh.w	r9, [r4, #98]	; 0x62
		chan->tx.mps = mps;
    7288:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
		if (chan->chan.ops->connected) {
    728c:	b10b      	cbz	r3, 7292 <l2cap_recv+0x292>
			chan->chan.ops->connected(&chan->chan);
    728e:	4620      	mov	r0, r4
    7290:	4798      	blx	r3
		k_sem_give(&chan->tx.credits);
    7292:	f104 0668 	add.w	r6, r4, #104	; 0x68
	while (credits--) {
    7296:	b96d      	cbnz	r5, 72b4 <l2cap_recv+0x2b4>
		l2cap_chan_rx_give_credits(chan, chan->rx.init_credits);
    7298:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
		k_sem_give(&chan->rx.credits);
    729c:	3448      	adds	r4, #72	; 0x48
	while (credits--) {
    729e:	2d00      	cmp	r5, #0
    72a0:	f43f af27 	beq.w	70f2 <l2cap_recv+0xf2>
    72a4:	4620      	mov	r0, r4
    72a6:	3d01      	subs	r5, #1
    72a8:	f019 fc14 	bl	20ad4 <_impl_k_sem_give>
    72ac:	b2ad      	uxth	r5, r5
    72ae:	e7f6      	b.n	729e <l2cap_recv+0x29e>
		chan = l2cap_remove_ident(conn, ident);
    72b0:	2201      	movs	r2, #1
    72b2:	e7ce      	b.n	7252 <l2cap_recv+0x252>
    72b4:	4630      	mov	r0, r6
    72b6:	3d01      	subs	r5, #1
    72b8:	f019 fc0c 	bl	20ad4 <_impl_k_sem_give>
    72bc:	b2ad      	uxth	r5, r5
    72be:	e7ea      	b.n	7296 <l2cap_recv+0x296>
		if (chan->chan.required_sec_level >= BT_SECURITY_MEDIUM) {
    72c0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    72c4:	2b01      	cmp	r3, #1
    72c6:	d80a      	bhi.n	72de <l2cap_recv+0x2de>
			chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    72c8:	2302      	movs	r3, #2
			chan->chan.required_sec_level = BT_SECURITY_FIPS;
    72ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	return bt_conn_security(chan->chan.conn, chan->chan.required_sec_level);
    72ce:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    72d2:	6820      	ldr	r0, [r4, #0]
    72d4:	f7fe fc5a 	bl	5b8c <bt_conn_security>
		if (l2cap_change_security(chan, result) == 0) {
    72d8:	2800      	cmp	r0, #0
    72da:	f43f af0a 	beq.w	70f2 <l2cap_recv+0xf2>
		bt_l2cap_chan_remove(conn, &chan->chan);
    72de:	4621      	mov	r1, r4
    72e0:	4638      	mov	r0, r7
    72e2:	f7ff faed 	bl	68c0 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(&chan->chan);
    72e6:	4620      	mov	r0, r4
	bt_l2cap_chan_del(&chan->chan);
    72e8:	f7ff fb03 	bl	68f2 <bt_l2cap_chan_del>
    72ec:	e701      	b.n	70f2 <l2cap_recv+0xf2>
		if (chan->chan.required_sec_level < BT_SECURITY_MEDIUM) {
    72ee:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    72f2:	2b01      	cmp	r3, #1
    72f4:	d9e8      	bls.n	72c8 <l2cap_recv+0x2c8>
		} else if (chan->chan.required_sec_level < BT_SECURITY_HIGH) {
    72f6:	2b02      	cmp	r3, #2
    72f8:	d101      	bne.n	72fe <l2cap_recv+0x2fe>
			chan->chan.required_sec_level = BT_SECURITY_HIGH;
    72fa:	2303      	movs	r3, #3
    72fc:	e7e5      	b.n	72ca <l2cap_recv+0x2ca>
		} else if (chan->chan.required_sec_level < BT_SECURITY_FIPS) {
    72fe:	2b03      	cmp	r3, #3
    7300:	d1ed      	bne.n	72de <l2cap_recv+0x2de>
			chan->chan.required_sec_level = BT_SECURITY_FIPS;
    7302:	2304      	movs	r3, #4
    7304:	e7e1      	b.n	72ca <l2cap_recv+0x2ca>
	if (buf->len < sizeof(*req)) {
    7306:	2f03      	cmp	r7, #3
    7308:	f67f aef3 	bls.w	70f2 <l2cap_recv+0xf2>
    730c:	6837      	ldr	r7, [r6, #0]
	struct bt_l2cap_disconn_req *req = (void *)buf->data;
    730e:	68ad      	ldr	r5, [r5, #8]
	chan = l2cap_remove_tx_cid(conn, scid);
    7310:	4638      	mov	r0, r7
    7312:	8869      	ldrh	r1, [r5, #2]
    7314:	f7ff fa3a 	bl	678c <l2cap_remove_tx_cid>
	if (!chan) {
    7318:	4606      	mov	r6, r0
    731a:	b990      	cbnz	r0, 7342 <l2cap_recv+0x342>
		data.scid = req->scid;
    731c:	78ea      	ldrb	r2, [r5, #3]
    731e:	78ab      	ldrb	r3, [r5, #2]
    7320:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7324:	f8ad 3010 	strh.w	r3, [sp, #16]
		data.dcid = req->dcid;
    7328:	786a      	ldrb	r2, [r5, #1]
    732a:	782b      	ldrb	r3, [r5, #0]
    732c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7330:	f8ad 3012 	strh.w	r3, [sp, #18]
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_INVALID_CID, &data,
    7334:	2304      	movs	r3, #4
    7336:	9300      	str	r3, [sp, #0]
    7338:	2202      	movs	r2, #2
    733a:	ab04      	add	r3, sp, #16
    733c:	4621      	mov	r1, r4
    733e:	4638      	mov	r0, r7
    7340:	e69d      	b.n	707e <l2cap_recv+0x7e>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    7342:	2204      	movs	r2, #4
    7344:	4621      	mov	r1, r4
    7346:	2007      	movs	r0, #7
    7348:	f7ff fa9f 	bl	688a <l2cap_create_le_sig_pdu.isra.6>
	rsp = net_buf_add(buf, sizeof(*rsp));
    734c:	2104      	movs	r1, #4
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    734e:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    7350:	3008      	adds	r0, #8
    7352:	f010 fdff 	bl	17f54 <net_buf_simple_add>
	rsp->dcid = sys_cpu_to_le16(chan->rx.cid);
    7356:	f8b6 3040 	ldrh.w	r3, [r6, #64]	; 0x40
    735a:	8003      	strh	r3, [r0, #0]
	rsp->scid = sys_cpu_to_le16(chan->tx.cid);
    735c:	f8b6 3060 	ldrh.w	r3, [r6, #96]	; 0x60
    7360:	8043      	strh	r3, [r0, #2]
	bt_l2cap_chan_del(&chan->chan);
    7362:	4630      	mov	r0, r6
    7364:	f7ff fac5 	bl	68f2 <bt_l2cap_chan_del>
    7368:	2300      	movs	r3, #0
    736a:	4622      	mov	r2, r4
    736c:	2105      	movs	r1, #5
    736e:	4638      	mov	r0, r7
    7370:	e6f4      	b.n	715c <l2cap_recv+0x15c>
	if (buf->len < sizeof(*rsp)) {
    7372:	2f03      	cmp	r7, #3
    7374:	f67f aebd 	bls.w	70f2 <l2cap_recv+0xf2>
	dcid = sys_le16_to_cpu(rsp->dcid);
    7378:	68ab      	ldr	r3, [r5, #8]
	chan = l2cap_remove_tx_cid(conn, dcid);
    737a:	6830      	ldr	r0, [r6, #0]
    737c:	8819      	ldrh	r1, [r3, #0]
    737e:	f7ff fa05 	bl	678c <l2cap_remove_tx_cid>
	if (!chan) {
    7382:	2800      	cmp	r0, #0
    7384:	d1b0      	bne.n	72e8 <l2cap_recv+0x2e8>
    7386:	e6b4      	b.n	70f2 <l2cap_recv+0xf2>
	if (buf->len < sizeof(*ev)) {
    7388:	2f03      	cmp	r7, #3
    738a:	f67f aeb2 	bls.w	70f2 <l2cap_recv+0xf2>
	struct bt_l2cap_le_credits *ev = (void *)buf->data;
    738e:	68ab      	ldr	r3, [r5, #8]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    7390:	6830      	ldr	r0, [r6, #0]
    7392:	8819      	ldrh	r1, [r3, #0]
	credits = sys_le16_to_cpu(ev->credits);
    7394:	885c      	ldrh	r4, [r3, #2]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    7396:	f7ff fc64 	bl	6c62 <bt_l2cap_le_lookup_tx_cid>
	if (!chan) {
    739a:	4605      	mov	r5, r0
    739c:	2800      	cmp	r0, #0
    739e:	f43f aea8 	beq.w	70f2 <l2cap_recv+0xf2>
	if (k_sem_count_get(&ch->tx.credits) + credits > UINT16_MAX) {
    73a2:	6f03      	ldr	r3, [r0, #112]	; 0x70
    73a4:	4423      	add	r3, r4
    73a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    73aa:	d21b      	bcs.n	73e4 <l2cap_recv+0x3e4>
		k_sem_give(&chan->tx.credits);
    73ac:	f100 0668 	add.w	r6, r0, #104	; 0x68
	while (credits--) {
    73b0:	b9dc      	cbnz	r4, 73ea <l2cap_recv+0x3ea>
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
    73b2:	f105 0680 	add.w	r6, r5, #128	; 0x80
	if (ch->tx_buf) {
    73b6:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
    73ba:	b1e1      	cbz	r1, 73f6 <l2cap_recv+0x3f6>
		ch->tx_buf = NULL;
    73bc:	f8c5 4090 	str.w	r4, [r5, #144]	; 0x90
	while ((buf = l2cap_chan_le_get_tx_buf(ch))) {
    73c0:	9104      	str	r1, [sp, #16]
    73c2:	2900      	cmp	r1, #0
    73c4:	f43f ae95 	beq.w	70f2 <l2cap_recv+0xf2>
		sent = l2cap_chan_le_send_sdu(ch, &buf, sent);
    73c8:	694a      	ldr	r2, [r1, #20]
    73ca:	4628      	mov	r0, r5
    73cc:	a904      	add	r1, sp, #16
    73ce:	f7ff fbcf 	bl	6b70 <l2cap_chan_le_send_sdu>
		if (sent < 0) {
    73d2:	2800      	cmp	r0, #0
    73d4:	daef      	bge.n	73b6 <l2cap_recv+0x3b6>
			if (sent == -EAGAIN) {
    73d6:	300b      	adds	r0, #11
    73d8:	f47f ae8b 	bne.w	70f2 <l2cap_recv+0xf2>
				ch->tx_buf = buf;
    73dc:	9b04      	ldr	r3, [sp, #16]
    73de:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
    73e2:	e686      	b.n	70f2 <l2cap_recv+0xf2>
		bt_l2cap_chan_disconnect(chan);
    73e4:	f7ff fd2c 	bl	6e40 <bt_l2cap_chan_disconnect>
    73e8:	e683      	b.n	70f2 <l2cap_recv+0xf2>
    73ea:	4630      	mov	r0, r6
    73ec:	3c01      	subs	r4, #1
    73ee:	f019 fb71 	bl	20ad4 <_impl_k_sem_give>
    73f2:	b2a4      	uxth	r4, r4
    73f4:	e7dc      	b.n	73b0 <l2cap_recv+0x3b0>
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
    73f6:	4630      	mov	r0, r6
    73f8:	f010 fd24 	bl	17e44 <net_buf_get>
    73fc:	4601      	mov	r1, r0
    73fe:	e7df      	b.n	73c0 <l2cap_recv+0x3c0>
	chan = l2cap_remove_ident(conn, ident);
    7400:	2201      	movs	r2, #1
    7402:	4621      	mov	r1, r4
    7404:	6830      	ldr	r0, [r6, #0]
    7406:	f7ff f991 	bl	672c <__l2cap_lookup_ident>
    740a:	e7ba      	b.n	7382 <l2cap_recv+0x382>
		l2cap_send_reject(chan->conn, hdr->ident,
    740c:	2300      	movs	r3, #0
    740e:	9300      	str	r3, [sp, #0]
    7410:	461a      	mov	r2, r3
    7412:	4621      	mov	r1, r4
    7414:	6830      	ldr	r0, [r6, #0]
    7416:	e632      	b.n	707e <l2cap_recv+0x7e>
    7418:	000067e9 	.word	0x000067e9

0000741c <bt_l2cap_chan_send>:

int bt_l2cap_chan_send(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    741c:	b513      	push	{r0, r1, r4, lr}
    741e:	4604      	mov	r4, r0
    7420:	9101      	str	r1, [sp, #4]
	int err;

	if (!buf) {
    7422:	b1a1      	cbz	r1, 744e <bt_l2cap_chan_send+0x32>
		return -EINVAL;
	}

	BT_DBG("chan %p buf %p len %zu", chan, buf, net_buf_frags_len(buf));

	if (!chan->conn || chan->conn->state != BT_CONN_CONNECTED) {
    7424:	6803      	ldr	r3, [r0, #0]
    7426:	b1ab      	cbz	r3, 7454 <bt_l2cap_chan_send+0x38>
    7428:	7b1b      	ldrb	r3, [r3, #12]
    742a:	2b03      	cmp	r3, #3
    742c:	d112      	bne.n	7454 <bt_l2cap_chan_send+0x38>
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    chan->conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_send(chan, buf);
	}

	err = l2cap_chan_le_send_sdu(BT_L2CAP_LE_CHAN(chan), &buf, 0);
    742e:	2200      	movs	r2, #0
    7430:	a901      	add	r1, sp, #4
    7432:	f7ff fb9d 	bl	6b70 <l2cap_chan_le_send_sdu>
	if (err < 0) {
		if (err == -EAGAIN) {
    7436:	f110 0f0b 	cmn.w	r0, #11
    743a:	d106      	bne.n	744a <bt_l2cap_chan_send+0x2e>
			/* Queue buffer to be sent later */
			net_buf_put(&(BT_L2CAP_LE_CHAN(chan))->tx_queue, buf);
    743c:	f104 0080 	add.w	r0, r4, #128	; 0x80
    7440:	9901      	ldr	r1, [sp, #4]
    7442:	f010 fd1c 	bl	17e7e <net_buf_put>
			return *((int *)net_buf_user_data(buf));
    7446:	9b01      	ldr	r3, [sp, #4]
    7448:	6958      	ldr	r0, [r3, #20]
		}
		BT_ERR("failed to send message %d", err);
	}

	return err;
}
    744a:	b002      	add	sp, #8
    744c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    744e:	f06f 0015 	mvn.w	r0, #21
    7452:	e7fa      	b.n	744a <bt_l2cap_chan_send+0x2e>
		return -ENOTCONN;
    7454:	f06f 0038 	mvn.w	r0, #56	; 0x38
    7458:	e7f7      	b.n	744a <bt_l2cap_chan_send+0x2e>

0000745a <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    745a:	2006      	movs	r0, #6
    745c:	4770      	bx	lr
	...

00007460 <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    7460:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    7462:	4a0a      	ldr	r2, [pc, #40]	; (748c <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    7464:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    7466:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    746a:	4284      	cmp	r4, r0
    746c:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    7470:	d102      	bne.n	7478 <att_op_get_type+0x18>
			return handlers[i].type;
    7472:	440a      	add	r2, r1
    7474:	7890      	ldrb	r0, [r2, #2]
    7476:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    7478:	3301      	adds	r3, #1
    747a:	2b1b      	cmp	r3, #27
    747c:	d1f3      	bne.n	7466 <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    747e:	f010 0f40 	tst.w	r0, #64	; 0x40
    7482:	bf14      	ite	ne
    7484:	2000      	movne	r0, #0
    7486:	2006      	moveq	r0, #6
}
    7488:	bd10      	pop	{r4, pc}
    748a:	bf00      	nop
    748c:	0002260c 	.word	0x0002260c

00007490 <att_req_destroy>:
{
    7490:	b510      	push	{r4, lr}
    7492:	4604      	mov	r4, r0
	if (req->buf) {
    7494:	6900      	ldr	r0, [r0, #16]
    7496:	b108      	cbz	r0, 749c <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    7498:	f010 fcfe 	bl	17e98 <net_buf_unref>
	if (req->destroy) {
    749c:	68a3      	ldr	r3, [r4, #8]
    749e:	b10b      	cbz	r3, 74a4 <att_req_destroy+0x14>
		req->destroy(req);
    74a0:	4620      	mov	r0, r4
    74a2:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    74a4:	4620      	mov	r0, r4
    74a6:	2218      	movs	r2, #24
    74a8:	2100      	movs	r1, #0
}
    74aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
    74ae:	f7f9 b9b1 	b.w	814 <memset>

000074b2 <att_notify>:
{
    74b2:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    74b4:	f101 0008 	add.w	r0, r1, #8
    74b8:	f010 fdac 	bl	18014 <net_buf_simple_pull_le16>
}
    74bc:	2000      	movs	r0, #0
    74be:	bd08      	pop	{r3, pc}

000074c0 <read_group_cb>:
{
    74c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    74c4:	680d      	ldr	r5, [r1, #0]
{
    74c6:	4606      	mov	r6, r0
    74c8:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    74ca:	f04f 0800 	mov.w	r8, #0
    74ce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    74d2:	a902      	add	r1, sp, #8
    74d4:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    74d6:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    74d8:	f88d 8008 	strb.w	r8, [sp, #8]
    74dc:	f8ad 300a 	strh.w	r3, [sp, #10]
    74e0:	f7fc f8a0 	bl	3624 <bt_uuid_cmp>
    74e4:	b198      	cbz	r0, 750e <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    74e6:	f642 0301 	movw	r3, #10241	; 0x2801
    74ea:	a903      	add	r1, sp, #12
    74ec:	6830      	ldr	r0, [r6, #0]
    74ee:	f88d 800c 	strb.w	r8, [sp, #12]
    74f2:	f8ad 300e 	strh.w	r3, [sp, #14]
    74f6:	f7fc f895 	bl	3624 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    74fa:	b140      	cbz	r0, 750e <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    74fc:	6923      	ldr	r3, [r4, #16]
    74fe:	b123      	cbz	r3, 750a <read_group_cb+0x4a>
    7500:	8a32      	ldrh	r2, [r6, #16]
    7502:	8859      	ldrh	r1, [r3, #2]
    7504:	4291      	cmp	r1, r2
    7506:	d200      	bcs.n	750a <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    7508:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    750a:	2001      	movs	r0, #1
    750c:	e012      	b.n	7534 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    750e:	6861      	ldr	r1, [r4, #4]
    7510:	6830      	ldr	r0, [r6, #0]
    7512:	f7fc f887 	bl	3624 <bt_uuid_cmp>
    7516:	b110      	cbz	r0, 751e <read_group_cb+0x5e>
		data->group = NULL;
    7518:	2300      	movs	r3, #0
    751a:	6123      	str	r3, [r4, #16]
    751c:	e7f5      	b.n	750a <read_group_cb+0x4a>
	if (data->rsp->len &&
    751e:	68e3      	ldr	r3, [r4, #12]
    7520:	68a0      	ldr	r0, [r4, #8]
    7522:	781a      	ldrb	r2, [r3, #0]
    7524:	b14a      	cbz	r2, 753a <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    7526:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    752a:	8981      	ldrh	r1, [r0, #12]
    752c:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    752e:	4293      	cmp	r3, r2
    7530:	da03      	bge.n	753a <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    7532:	2000      	movs	r0, #0
}
    7534:	b004      	add	sp, #16
    7536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    753a:	2104      	movs	r1, #4
    753c:	3008      	adds	r0, #8
    753e:	f010 fd09 	bl	17f54 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    7542:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    7544:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    7546:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    7548:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    754a:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    754c:	898a      	ldrh	r2, [r1, #12]
    754e:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    7552:	6889      	ldr	r1, [r1, #8]
    7554:	f8d6 8004 	ldr.w	r8, [r6, #4]
    7558:	1a9b      	subs	r3, r3, r2
    755a:	2500      	movs	r5, #0
    755c:	440a      	add	r2, r1
    755e:	9500      	str	r5, [sp, #0]
    7560:	4631      	mov	r1, r6
    7562:	b29b      	uxth	r3, r3
    7564:	4638      	mov	r0, r7
    7566:	47c0      	blx	r8
	if (read < 0) {
    7568:	1e01      	subs	r1, r0, #0
    756a:	dbe2      	blt.n	7532 <read_group_cb+0x72>
	if (!data->rsp->len) {
    756c:	68e0      	ldr	r0, [r4, #12]
    756e:	7802      	ldrb	r2, [r0, #0]
    7570:	1d0b      	adds	r3, r1, #4
    7572:	b92a      	cbnz	r2, 7580 <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
    7574:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    7576:	68a0      	ldr	r0, [r4, #8]
    7578:	3008      	adds	r0, #8
    757a:	f010 fceb 	bl	17f54 <net_buf_simple_add>
    757e:	e7c4      	b.n	750a <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    7580:	429a      	cmp	r2, r3
    7582:	d0f8      	beq.n	7576 <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
    7584:	68a2      	ldr	r2, [r4, #8]
    7586:	8993      	ldrh	r3, [r2, #12]
    7588:	3b04      	subs	r3, #4
    758a:	8193      	strh	r3, [r2, #12]
    758c:	e7d1      	b.n	7532 <read_group_cb+0x72>

0000758e <find_info_cb>:
	if (!data->rsp) {
    758e:	688b      	ldr	r3, [r1, #8]
{
    7590:	b570      	push	{r4, r5, r6, lr}
    7592:	4605      	mov	r5, r0
    7594:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    7596:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    7598:	b963      	cbnz	r3, 75b4 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    759a:	6848      	ldr	r0, [r1, #4]
    759c:	2101      	movs	r1, #1
    759e:	3008      	adds	r0, #8
    75a0:	f010 fcd8 	bl	17f54 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    75a4:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    75a6:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    75a8:	781b      	ldrb	r3, [r3, #0]
    75aa:	2b00      	cmp	r3, #0
    75ac:	bf0c      	ite	eq
    75ae:	2301      	moveq	r3, #1
    75b0:	2302      	movne	r3, #2
    75b2:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    75b4:	68a3      	ldr	r3, [r4, #8]
    75b6:	781b      	ldrb	r3, [r3, #0]
    75b8:	2b01      	cmp	r3, #1
    75ba:	d003      	beq.n	75c4 <find_info_cb+0x36>
    75bc:	2b02      	cmp	r3, #2
    75be:	d01a      	beq.n	75f6 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    75c0:	2000      	movs	r0, #0
}
    75c2:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    75c4:	682b      	ldr	r3, [r5, #0]
    75c6:	781b      	ldrb	r3, [r3, #0]
    75c8:	2b00      	cmp	r3, #0
    75ca:	d1f9      	bne.n	75c0 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    75cc:	6860      	ldr	r0, [r4, #4]
    75ce:	2104      	movs	r1, #4
    75d0:	3008      	adds	r0, #8
    75d2:	f010 fcbf 	bl	17f54 <net_buf_simple_add>
    75d6:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    75d8:	8a2b      	ldrh	r3, [r5, #16]
    75da:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    75dc:	682b      	ldr	r3, [r5, #0]
    75de:	885b      	ldrh	r3, [r3, #2]
    75e0:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    75e2:	6863      	ldr	r3, [r4, #4]
    75e4:	f8b6 0062 	ldrh.w	r0, [r6, #98]	; 0x62
    75e8:	899b      	ldrh	r3, [r3, #12]
    75ea:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    75ec:	2804      	cmp	r0, #4
    75ee:	bf94      	ite	ls
    75f0:	2000      	movls	r0, #0
    75f2:	2001      	movhi	r0, #1
    75f4:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    75f6:	682b      	ldr	r3, [r5, #0]
    75f8:	781b      	ldrb	r3, [r3, #0]
    75fa:	2b02      	cmp	r3, #2
    75fc:	d1e0      	bne.n	75c0 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    75fe:	6860      	ldr	r0, [r4, #4]
    7600:	2112      	movs	r1, #18
    7602:	3008      	adds	r0, #8
    7604:	f010 fca6 	bl	17f54 <net_buf_simple_add>
    7608:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    760a:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    760c:	8a2b      	ldrh	r3, [r5, #16]
    760e:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    7612:	2210      	movs	r2, #16
    7614:	3101      	adds	r1, #1
    7616:	f7f9 f8d1 	bl	7bc <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    761a:	6863      	ldr	r3, [r4, #4]
    761c:	f8b6 0062 	ldrh.w	r0, [r6, #98]	; 0x62
    7620:	899b      	ldrh	r3, [r3, #12]
    7622:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    7624:	2812      	cmp	r0, #18
    7626:	e7e2      	b.n	75ee <find_info_cb+0x60>

00007628 <find_type_cb>:
{
    7628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    762c:	680e      	ldr	r6, [r1, #0]
{
    762e:	b088      	sub	sp, #32
    7630:	4605      	mov	r5, r0
    7632:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    7634:	2700      	movs	r7, #0
    7636:	f642 0301 	movw	r3, #10241	; 0x2801
    763a:	a902      	add	r1, sp, #8
    763c:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    763e:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    7642:	f88d 7008 	strb.w	r7, [sp, #8]
    7646:	f8ad 300a 	strh.w	r3, [sp, #10]
    764a:	f7fb ffeb 	bl	3624 <bt_uuid_cmp>
    764e:	b928      	cbnz	r0, 765c <find_type_cb+0x34>
		data->group = NULL;
    7650:	2300      	movs	r3, #0
    7652:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    7654:	2001      	movs	r0, #1
}
    7656:	b008      	add	sp, #32
    7658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    765c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    7660:	a903      	add	r1, sp, #12
    7662:	6828      	ldr	r0, [r5, #0]
    7664:	f88d 700c 	strb.w	r7, [sp, #12]
    7668:	f8ad 300e 	strh.w	r3, [sp, #14]
    766c:	f7fb ffda 	bl	3624 <bt_uuid_cmp>
    7670:	b140      	cbz	r0, 7684 <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    7672:	68a3      	ldr	r3, [r4, #8]
    7674:	2b00      	cmp	r3, #0
    7676:	d0ed      	beq.n	7654 <find_type_cb+0x2c>
    7678:	8a2a      	ldrh	r2, [r5, #16]
    767a:	8859      	ldrh	r1, [r3, #2]
    767c:	4291      	cmp	r1, r2
    767e:	d2e9      	bcs.n	7654 <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    7680:	805a      	strh	r2, [r3, #2]
    7682:	e7e7      	b.n	7654 <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    7684:	6862      	ldr	r2, [r4, #4]
    7686:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    768a:	8992      	ldrh	r2, [r2, #12]
    768c:	1a9b      	subs	r3, r3, r2
    768e:	2b03      	cmp	r3, #3
    7690:	d9e1      	bls.n	7656 <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    7692:	2310      	movs	r3, #16
    7694:	9000      	str	r0, [sp, #0]
    7696:	eb0d 0203 	add.w	r2, sp, r3
    769a:	686e      	ldr	r6, [r5, #4]
    769c:	4629      	mov	r1, r5
    769e:	4640      	mov	r0, r8
    76a0:	47b0      	blx	r6
	if (read < 0) {
    76a2:	1e02      	subs	r2, r0, #0
    76a4:	dbd4      	blt.n	7650 <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    76a6:	7c23      	ldrb	r3, [r4, #16]
    76a8:	429a      	cmp	r2, r3
    76aa:	d1d1      	bne.n	7650 <find_type_cb+0x28>
    76ac:	a904      	add	r1, sp, #16
    76ae:	68e0      	ldr	r0, [r4, #12]
    76b0:	f7f9 f857 	bl	762 <memcmp>
    76b4:	2800      	cmp	r0, #0
    76b6:	d1cb      	bne.n	7650 <find_type_cb+0x28>
	data->err = 0x00;
    76b8:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    76ba:	6860      	ldr	r0, [r4, #4]
    76bc:	2104      	movs	r1, #4
    76be:	3008      	adds	r0, #8
    76c0:	f010 fc48 	bl	17f54 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    76c4:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    76c6:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    76c8:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    76ca:	8043      	strh	r3, [r0, #2]
    76cc:	e7c2      	b.n	7654 <find_type_cb+0x2c>
	...

000076d0 <bt_att_connected>:
	bt_gatt_disconnected(ch->chan.conn);
	ch->chan.conn = NULL;
}

static void bt_att_connected(struct bt_l2cap_chan *chan)
{
    76d0:	b510      	push	{r4, lr}

#if CONFIG_BT_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    76d2:	2317      	movs	r3, #23
{
    76d4:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    76d6:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    76da:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42

	k_delayed_work_init(&att->timeout_work, att_timeout);
    76de:	4907      	ldr	r1, [pc, #28]	; (76fc <bt_att_connected+0x2c>)
    76e0:	30ac      	adds	r0, #172	; 0xac
    76e2:	f019 fd23 	bl	2112c <k_delayed_work_init>
	list->head = NULL;
    76e6:	2300      	movs	r3, #0
    76e8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	list->tail = NULL;
    76ec:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	sys_slist_init(&att->reqs);

	bt_gatt_connected(ch->chan.conn);
    76f0:	6820      	ldr	r0, [r4, #0]
}
    76f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    76f6:	f001 bb4d 	b.w	8d94 <bt_gatt_connected>
    76fa:	bf00      	nop
    76fc:	00007bab 	.word	0x00007bab

00007700 <check_perm>:
{
    7700:	b510      	push	{r4, lr}
	if ((mask & BT_GATT_PERM_READ) &&
    7702:	f012 0f01 	tst.w	r2, #1
    7706:	7c8b      	ldrb	r3, [r1, #18]
    7708:	d004      	beq.n	7714 <check_perm+0x14>
    770a:	f013 0f15 	tst.w	r3, #21
    770e:	d018      	beq.n	7742 <check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    7710:	684c      	ldr	r4, [r1, #4]
    7712:	b1b4      	cbz	r4, 7742 <check_perm+0x42>
	if ((mask & BT_GATT_PERM_WRITE) &&
    7714:	0794      	lsls	r4, r2, #30
    7716:	d504      	bpl.n	7722 <check_perm+0x22>
    7718:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    771c:	d013      	beq.n	7746 <check_perm+0x46>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    771e:	6889      	ldr	r1, [r1, #8]
    7720:	b189      	cbz	r1, 7746 <check_perm+0x46>
	mask &= attr->perm;
    7722:	401a      	ands	r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    7724:	f012 0f30 	tst.w	r2, #48	; 0x30
    7728:	d002      	beq.n	7730 <check_perm+0x30>
		if (conn->sec_level < BT_SECURITY_HIGH) {
    772a:	7a03      	ldrb	r3, [r0, #8]
    772c:	2b02      	cmp	r3, #2
    772e:	d90c      	bls.n	774a <check_perm+0x4a>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
    7730:	f012 020c 	ands.w	r2, r2, #12
    7734:	d00b      	beq.n	774e <check_perm+0x4e>
		if (!conn->encrypt) {
    7736:	7a83      	ldrb	r3, [r0, #10]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
    7738:	2b00      	cmp	r3, #0
    773a:	bf14      	ite	ne
    773c:	2000      	movne	r0, #0
    773e:	200f      	moveq	r0, #15
    7740:	bd10      	pop	{r4, pc}
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    7742:	2002      	movs	r0, #2
    7744:	bd10      	pop	{r4, pc}
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    7746:	2003      	movs	r0, #3
    7748:	bd10      	pop	{r4, pc}
			return BT_ATT_ERR_AUTHENTICATION;
    774a:	2005      	movs	r0, #5
    774c:	bd10      	pop	{r4, pc}
	return 0;
    774e:	4610      	mov	r0, r2
}
    7750:	bd10      	pop	{r4, pc}

00007752 <read_type_cb>:
{
    7752:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    7756:	680f      	ldr	r7, [r1, #0]
{
    7758:	4606      	mov	r6, r0
    775a:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    775c:	6800      	ldr	r0, [r0, #0]
    775e:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    7760:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    7764:	f7fb ff5e 	bl	3624 <bt_uuid_cmp>
    7768:	4680      	mov	r8, r0
    776a:	2800      	cmp	r0, #0
    776c:	d14e      	bne.n	780c <read_type_cb+0xba>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    776e:	2215      	movs	r2, #21
    7770:	4631      	mov	r1, r6
    7772:	4648      	mov	r0, r9
    7774:	f7ff ffc4 	bl	7700 <check_perm>
    7778:	4605      	mov	r5, r0
    777a:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    777c:	b148      	cbz	r0, 7792 <read_type_cb+0x40>
		if (data->rsp->len) {
    777e:	68e3      	ldr	r3, [r4, #12]
    7780:	781d      	ldrb	r5, [r3, #0]
    7782:	b115      	cbz	r5, 778a <read_type_cb+0x38>
			data->err = 0x00;
    7784:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
    7788:	4645      	mov	r5, r8
}
    778a:	4628      	mov	r0, r5
    778c:	b003      	add	sp, #12
    778e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    7792:	68a0      	ldr	r0, [r4, #8]
    7794:	2102      	movs	r1, #2
    7796:	3008      	adds	r0, #8
    7798:	f010 fbdc 	bl	17f54 <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    779c:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    779e:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    77a0:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    77a2:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    77a4:	898a      	ldrh	r2, [r1, #12]
    77a6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
    77aa:	6889      	ldr	r1, [r1, #8]
    77ac:	f8d6 8004 	ldr.w	r8, [r6, #4]
    77b0:	9500      	str	r5, [sp, #0]
    77b2:	1a9b      	subs	r3, r3, r2
    77b4:	b29b      	uxth	r3, r3
    77b6:	440a      	add	r2, r1
    77b8:	4648      	mov	r0, r9
    77ba:	4631      	mov	r1, r6
    77bc:	47c0      	blx	r8
	if (read < 0) {
    77be:	1e01      	subs	r1, r0, #0
    77c0:	da08      	bge.n	77d4 <read_type_cb+0x82>
	if (err < 0 && err >= -0xff) {
    77c2:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    77c6:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    77c8:	bf9a      	itte	ls
    77ca:	4249      	negls	r1, r1
    77cc:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    77ce:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    77d0:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
    77d2:	e7da      	b.n	778a <read_type_cb+0x38>
	if (!data->rsp->len) {
    77d4:	68e0      	ldr	r0, [r4, #12]
    77d6:	7802      	ldrb	r2, [r0, #0]
    77d8:	1c8b      	adds	r3, r1, #2
    77da:	b982      	cbnz	r2, 77fe <read_type_cb+0xac>
		data->rsp->len = read + sizeof(*data->item);
    77dc:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    77de:	68a0      	ldr	r0, [r4, #8]
    77e0:	3008      	adds	r0, #8
    77e2:	f010 fbb7 	bl	17f54 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    77e6:	68a3      	ldr	r3, [r4, #8]
    77e8:	f8b7 5062 	ldrh.w	r5, [r7, #98]	; 0x62
    77ec:	899b      	ldrh	r3, [r3, #12]
    77ee:	1aed      	subs	r5, r5, r3
    77f0:	68e3      	ldr	r3, [r4, #12]
    77f2:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    77f4:	429d      	cmp	r5, r3
    77f6:	bfd4      	ite	le
    77f8:	2500      	movle	r5, #0
    77fa:	2501      	movgt	r5, #1
    77fc:	e7c5      	b.n	778a <read_type_cb+0x38>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    77fe:	429a      	cmp	r2, r3
    7800:	d0ed      	beq.n	77de <read_type_cb+0x8c>
		data->buf->len -= sizeof(*data->item);
    7802:	68a2      	ldr	r2, [r4, #8]
    7804:	8993      	ldrh	r3, [r2, #12]
    7806:	3b02      	subs	r3, #2
    7808:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    780a:	e7be      	b.n	778a <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    780c:	2501      	movs	r5, #1
    780e:	e7bc      	b.n	778a <read_type_cb+0x38>

00007810 <att_cb.isra.4>:
static bt_conn_tx_cb_t att_cb(struct net_buf *buf)
    7810:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
    7812:	7800      	ldrb	r0, [r0, #0]
    7814:	f7ff fe24 	bl	7460 <att_op_get_type>
    7818:	3801      	subs	r0, #1
    781a:	b2c0      	uxtb	r0, r0
    781c:	2804      	cmp	r0, #4
    781e:	bf9a      	itte	ls
    7820:	4b02      	ldrls	r3, [pc, #8]	; (782c <att_cb.isra.4+0x1c>)
    7822:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    7826:	4802      	ldrhi	r0, [pc, #8]	; (7830 <att_cb.isra.4+0x20>)
}
    7828:	bd08      	pop	{r3, pc}
    782a:	bf00      	nop
    782c:	000225f8 	.word	0x000225f8
    7830:	00007bed 	.word	0x00007bed

00007834 <uuid_create>:
{
    7834:	b510      	push	{r4, lr}
	switch (buf->len) {
    7836:	898a      	ldrh	r2, [r1, #12]
    7838:	2a02      	cmp	r2, #2
{
    783a:	4604      	mov	r4, r0
	switch (buf->len) {
    783c:	d003      	beq.n	7846 <uuid_create+0x12>
    783e:	2a10      	cmp	r2, #16
    7840:	d00a      	beq.n	7858 <uuid_create+0x24>
	return false;
    7842:	2000      	movs	r0, #0
}
    7844:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    7846:	2300      	movs	r3, #0
    7848:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    784a:	f101 0008 	add.w	r0, r1, #8
    784e:	f010 fbe1 	bl	18014 <net_buf_simple_pull_le16>
    7852:	8060      	strh	r0, [r4, #2]
		return true;
    7854:	2001      	movs	r0, #1
    7856:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    7858:	2302      	movs	r3, #2
    785a:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    785e:	6889      	ldr	r1, [r1, #8]
    7860:	f7f8 ffac 	bl	7bc <memcpy>
    7864:	e7f6      	b.n	7854 <uuid_create+0x20>
	...

00007868 <att_req_sent>:
{
    7868:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    786a:	2104      	movs	r1, #4
    786c:	f7ff f9f9 	bl	6c62 <bt_l2cap_le_lookup_tx_cid>
    7870:	4604      	mov	r4, r0
    7872:	30d4      	adds	r0, #212	; 0xd4
    7874:	f019 f92e 	bl	20ad4 <_impl_k_sem_give>
	if (att->req) {
    7878:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    787c:	b143      	cbz	r3, 7890 <att_req_sent+0x28>
    787e:	f104 01ac 	add.w	r1, r4, #172	; 0xac
    7882:	f247 5230 	movw	r2, #30000	; 0x7530
    7886:	4803      	ldr	r0, [pc, #12]	; (7894 <att_req_sent+0x2c>)
}
    7888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    788c:	f019 bcc6 	b.w	2121c <k_delayed_work_submit_to_queue>
    7890:	bd10      	pop	{r4, pc}
    7892:	bf00      	nop
    7894:	200052a0 	.word	0x200052a0

00007898 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    7898:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    789a:	4d0f      	ldr	r5, [pc, #60]	; (78d8 <bt_att_accept+0x40>)
    789c:	682c      	ldr	r4, [r5, #0]
{
    789e:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    78a0:	b9b4      	cbnz	r4, 78d0 <bt_att_accept+0x38>
			continue;
		}

		att->chan.chan.ops = &ops;
    78a2:	4b0e      	ldr	r3, [pc, #56]	; (78dc <bt_att_accept+0x44>)
    78a4:	606b      	str	r3, [r5, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    78a6:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    78aa:	f3bf 8f5b 	dmb	ish
    78ae:	e853 2f00 	ldrex	r2, [r3]
    78b2:	e843 4100 	strex	r1, r4, [r3]
    78b6:	2900      	cmp	r1, #0
    78b8:	d1f9      	bne.n	78ae <bt_att_accept+0x16>
    78ba:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    78be:	2202      	movs	r2, #2
    78c0:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
    78c4:	4611      	mov	r1, r2
    78c6:	f019 f8fb 	bl	20ac0 <_impl_k_sem_init>
		atomic_set(att->flags, 0);
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    78ca:	6035      	str	r5, [r6, #0]

		return 0;
    78cc:	4620      	mov	r0, r4
    78ce:	bd70      	pop	{r4, r5, r6, pc}
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
    78d0:	f06f 000b 	mvn.w	r0, #11
}
    78d4:	bd70      	pop	{r4, r5, r6, pc}
    78d6:	bf00      	nop
    78d8:	200005d8 	.word	0x200005d8
    78dc:	2000df94 	.word	0x2000df94

000078e0 <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    78e0:	6803      	ldr	r3, [r0, #0]
    78e2:	7b1b      	ldrb	r3, [r3, #12]
    78e4:	2b03      	cmp	r3, #3
    78e6:	d10a      	bne.n	78fe <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    78e8:	f3bf 8f5b 	dmb	ish
    78ec:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    78f0:	f3bf 8f5b 	dmb	ish
    78f4:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    78f8:	f000 0001 	and.w	r0, r0, #1
    78fc:	4770      	bx	lr
    78fe:	2001      	movs	r0, #1
}
    7900:	4770      	bx	lr

00007902 <att_prepare_write_req>:
    7902:	2006      	movs	r0, #6
    7904:	4770      	bx	lr

00007906 <att_send_req>:
{
    7906:	b570      	push	{r4, r5, r6, lr}
    7908:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    790a:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
	att->req = req;
    790e:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
{
    7912:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    7914:	4630      	mov	r0, r6
    7916:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    791a:	f019 f93b 	bl	20b94 <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    791e:	4628      	mov	r0, r5
    7920:	f7ff ffde 	bl	78e0 <att_is_connected>
    7924:	b928      	cbnz	r0, 7932 <att_send_req+0x2c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    7926:	4630      	mov	r0, r6
    7928:	f019 f8d4 	bl	20ad4 <_impl_k_sem_give>
		return -ENOTCONN;
    792c:	f06f 0038 	mvn.w	r0, #56	; 0x38
    7930:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    7932:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    7934:	f106 0008 	add.w	r0, r6, #8
    7938:	f010 fb74 	bl	18024 <net_buf_simple_headroom>
	state->len = buf->len;
    793c:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    793e:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    7940:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    7942:	6920      	ldr	r0, [r4, #16]
    7944:	682d      	ldr	r5, [r5, #0]
    7946:	f010 fad5 	bl	17ef4 <net_buf_ref>
    794a:	6923      	ldr	r3, [r4, #16]
    794c:	4606      	mov	r6, r0
    794e:	6898      	ldr	r0, [r3, #8]
    7950:	f7ff ff5e 	bl	7810 <att_cb.isra.4>
    7954:	4632      	mov	r2, r6
    7956:	4603      	mov	r3, r0
    7958:	2104      	movs	r1, #4
    795a:	4628      	mov	r0, r5
    795c:	f7ff f807 	bl	696e <bt_l2cap_send_cb>
	return 0;
    7960:	2000      	movs	r0, #0
}
    7962:	bd70      	pop	{r4, r5, r6, pc}

00007964 <att_handle_rsp>:
{
    7964:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    7968:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    796a:	30ac      	adds	r0, #172	; 0xac
{
    796c:	461e      	mov	r6, r3
    796e:	460f      	mov	r7, r1
    7970:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    7972:	f019 fbf9 	bl	21168 <k_delayed_work_cancel>
	if (!att->req) {
    7976:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    797a:	b1db      	cbz	r3, 79b4 <att_handle_rsp+0x50>
	if (att->req->buf) {
    797c:	6918      	ldr	r0, [r3, #16]
    797e:	b128      	cbz	r0, 798c <att_handle_rsp+0x28>
		net_buf_unref(att->req->buf);
    7980:	f010 fa8a 	bl	17e98 <net_buf_unref>
		att->req->buf = NULL;
    7984:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    7988:	2200      	movs	r2, #0
    798a:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    798c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	func(att->chan.chan.conn, err, pdu, len, att->req);
    7990:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    7992:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    7996:	2500      	movs	r5, #0
    7998:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    799a:	463a      	mov	r2, r7
    799c:	9300      	str	r3, [sp, #0]
    799e:	4631      	mov	r1, r6
    79a0:	4643      	mov	r3, r8
    79a2:	47c8      	blx	r9
	if (!att->req->func) {
    79a4:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    79a8:	6843      	ldr	r3, [r0, #4]
    79aa:	b90b      	cbnz	r3, 79b0 <att_handle_rsp+0x4c>
		att_req_destroy(att->req);
    79ac:	f7ff fd70 	bl	7490 <att_req_destroy>
	att->req = NULL;
    79b0:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
    79b4:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    79b8:	b159      	cbz	r1, 79d2 <att_handle_rsp+0x6e>
	if (list->tail == node) {
    79ba:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
	list->head = node->next;
    79be:	680b      	ldr	r3, [r1, #0]
    79c0:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	if (list->tail == node) {
    79c4:	4291      	cmp	r1, r2
		list->tail = list->head;
    79c6:	bf08      	it	eq
    79c8:	f8c4 30a8 	streq.w	r3, [r4, #168]	; 0xa8
	att_send_req(att, ATT_REQ(node));
    79cc:	4620      	mov	r0, r4
    79ce:	f7ff ff9a 	bl	7906 <att_send_req>
}
    79d2:	2000      	movs	r0, #0
    79d4:	b003      	add	sp, #12
    79d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000079da <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    79da:	898a      	ldrh	r2, [r1, #12]
    79dc:	6889      	ldr	r1, [r1, #8]
    79de:	2300      	movs	r3, #0
    79e0:	f7ff bfc0 	b.w	7964 <att_handle_rsp>

000079e4 <att_handle_exec_write_rsp>:
    79e4:	f7ff bff9 	b.w	79da <att_confirm>

000079e8 <att_handle_prepare_write_rsp>:
    79e8:	f7ff bff7 	b.w	79da <att_confirm>

000079ec <att_handle_write_rsp>:
    79ec:	f7ff bff5 	b.w	79da <att_confirm>

000079f0 <att_handle_read_mult_rsp>:
    79f0:	f7ff bff3 	b.w	79da <att_confirm>

000079f4 <att_handle_read_blob_rsp>:
    79f4:	f7ff bff1 	b.w	79da <att_confirm>

000079f8 <att_handle_read_rsp>:
    79f8:	f7ff bfef 	b.w	79da <att_confirm>

000079fc <att_handle_read_type_rsp>:
    79fc:	f7ff bfed 	b.w	79da <att_confirm>

00007a00 <att_handle_find_type_rsp>:
    7a00:	f7ff bfeb 	b.w	79da <att_confirm>

00007a04 <att_handle_find_info_rsp>:
    7a04:	f7ff bfe9 	b.w	79da <att_confirm>

00007a08 <att_mtu_rsp>:
{
    7a08:	b410      	push	{r4}
    7a0a:	460a      	mov	r2, r1
	if (!att) {
    7a0c:	b198      	cbz	r0, 7a36 <att_mtu_rsp+0x2e>
	rsp = (void *)buf->data;
    7a0e:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
    7a10:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    7a12:	2b16      	cmp	r3, #22
    7a14:	d805      	bhi.n	7a22 <att_mtu_rsp+0x1a>
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    7a16:	2200      	movs	r2, #0
    7a18:	2304      	movs	r3, #4
    7a1a:	4611      	mov	r1, r2
}
    7a1c:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    7a1e:	f7ff bfa1 	b.w	7964 <att_handle_rsp>
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    7a22:	2bf9      	cmp	r3, #249	; 0xf9
    7a24:	bf28      	it	cs
    7a26:	23f9      	movcs	r3, #249	; 0xf9
    7a28:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    7a2c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	return att_handle_rsp(att, rsp, buf->len, 0);
    7a30:	8992      	ldrh	r2, [r2, #12]
    7a32:	2300      	movs	r3, #0
    7a34:	e7f2      	b.n	7a1c <att_mtu_rsp+0x14>
}
    7a36:	bc10      	pop	{r4}
    7a38:	4770      	bx	lr

00007a3a <bt_att_encrypt_change>:
{
    7a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a3e:	4604      	mov	r4, r0
	if (hci_status) {
    7a40:	460d      	mov	r5, r1
    7a42:	b131      	cbz	r1, 7a52 <bt_att_encrypt_change+0x18>
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    7a44:	2200      	movs	r2, #0
    7a46:	2305      	movs	r3, #5
    7a48:	4611      	mov	r1, r2
}
    7a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    7a4e:	f7ff bf89 	b.w	7964 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
    7a52:	6806      	ldr	r6, [r0, #0]
	if (conn->sec_level == BT_SECURITY_LOW) {
    7a54:	7a33      	ldrb	r3, [r6, #8]
    7a56:	2b01      	cmp	r3, #1
    7a58:	d023      	beq.n	7aa2 <bt_att_encrypt_change+0x68>
	if (!att->req || !att->req->retrying) {
    7a5a:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    7a5e:	b303      	cbz	r3, 7aa2 <bt_att_encrypt_change+0x68>
    7a60:	7d1b      	ldrb	r3, [r3, #20]
    7a62:	b1f3      	cbz	r3, 7aa2 <bt_att_encrypt_change+0x68>
	k_sem_take(&att->tx_sem, K_FOREVER);
    7a64:	f100 07d4 	add.w	r7, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    7a68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7a6c:	4638      	mov	r0, r7
    7a6e:	f019 f891 	bl	20b94 <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    7a72:	4620      	mov	r0, r4
    7a74:	f7ff ff34 	bl	78e0 <att_is_connected>
    7a78:	b920      	cbnz	r0, 7a84 <bt_att_encrypt_change+0x4a>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    7a7a:	4638      	mov	r0, r7
}
    7a7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7a80:	f019 b828 	b.w	20ad4 <_impl_k_sem_give>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    7a84:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    7a88:	691f      	ldr	r7, [r3, #16]
    7a8a:	68b8      	ldr	r0, [r7, #8]
    7a8c:	f7ff fec0 	bl	7810 <att_cb.isra.4>
    7a90:	463a      	mov	r2, r7
    7a92:	4603      	mov	r3, r0
    7a94:	2104      	movs	r1, #4
    7a96:	4630      	mov	r0, r6
    7a98:	f7fe ff69 	bl	696e <bt_l2cap_send_cb>
	att->req->buf = NULL;
    7a9c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    7aa0:	611d      	str	r5, [r3, #16]
    7aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007aa6 <att_error_rsp>:
{
    7aa6:	b570      	push	{r4, r5, r6, lr}
    7aa8:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
    7aaa:	6888      	ldr	r0, [r1, #8]
	if (!att->req) {
    7aac:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    7ab0:	b332      	cbz	r2, 7b00 <att_error_rsp+0x5a>
	if (att->req->buf) {
    7ab2:	6913      	ldr	r3, [r2, #16]
    7ab4:	b12b      	cbz	r3, 7ac2 <att_error_rsp+0x1c>
	buf->data = buf->__buf + state->offset;
    7ab6:	8995      	ldrh	r5, [r2, #12]
    7ab8:	6919      	ldr	r1, [r3, #16]
    7aba:	4429      	add	r1, r5
    7abc:	6099      	str	r1, [r3, #8]
	buf->len = state->len;
    7abe:	89d1      	ldrh	r1, [r2, #14]
    7ac0:	8199      	strh	r1, [r3, #12]
	if (att->req->retrying) {
    7ac2:	7d13      	ldrb	r3, [r2, #20]
	err = rsp->error;
    7ac4:	78c5      	ldrb	r5, [r0, #3]
	if (att->req->retrying) {
    7ac6:	b9e3      	cbnz	r3, 7b02 <att_error_rsp+0x5c>
	switch (err) {
    7ac8:	2d05      	cmp	r5, #5
	if (!att_change_security(att->chan.chan.conn, err)) {
    7aca:	6820      	ldr	r0, [r4, #0]
	switch (err) {
    7acc:	d006      	beq.n	7adc <att_error_rsp+0x36>
    7ace:	2d0f      	cmp	r5, #15
    7ad0:	d117      	bne.n	7b02 <att_error_rsp+0x5c>
		if (conn->sec_level >= BT_SECURITY_MEDIUM)
    7ad2:	7a03      	ldrb	r3, [r0, #8]
    7ad4:	2b01      	cmp	r3, #1
    7ad6:	d814      	bhi.n	7b02 <att_error_rsp+0x5c>
		sec = BT_SECURITY_MEDIUM;
    7ad8:	2102      	movs	r1, #2
    7ada:	e007      	b.n	7aec <att_error_rsp+0x46>
		if (conn->sec_level < BT_SECURITY_MEDIUM) {
    7adc:	7a03      	ldrb	r3, [r0, #8]
    7ade:	2b01      	cmp	r3, #1
    7ae0:	d9fa      	bls.n	7ad8 <att_error_rsp+0x32>
		} else if (conn->sec_level < BT_SECURITY_HIGH) {
    7ae2:	2b02      	cmp	r3, #2
    7ae4:	d00a      	beq.n	7afc <att_error_rsp+0x56>
		} else if (conn->sec_level < BT_SECURITY_FIPS) {
    7ae6:	2b03      	cmp	r3, #3
    7ae8:	d10b      	bne.n	7b02 <att_error_rsp+0x5c>
			sec = BT_SECURITY_FIPS;
    7aea:	2104      	movs	r1, #4
	return bt_conn_security(conn, sec);
    7aec:	f7fe f84e 	bl	5b8c <bt_conn_security>
	if (!att_change_security(att->chan.chan.conn, err)) {
    7af0:	b938      	cbnz	r0, 7b02 <att_error_rsp+0x5c>
		att->req->retrying = true;
    7af2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    7af6:	2201      	movs	r2, #1
    7af8:	751a      	strb	r2, [r3, #20]
		return 0;
    7afa:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_HIGH;
    7afc:	2103      	movs	r1, #3
    7afe:	e7f5      	b.n	7aec <att_error_rsp+0x46>
		err = BT_ATT_ERR_UNLIKELY;
    7b00:	250e      	movs	r5, #14
	return att_handle_rsp(att, NULL, 0, err);
    7b02:	2200      	movs	r2, #0
    7b04:	462b      	mov	r3, r5
    7b06:	4620      	mov	r0, r4
    7b08:	4611      	mov	r1, r2
}
    7b0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(att, NULL, 0, err);
    7b0e:	f7ff bf29 	b.w	7964 <att_handle_rsp>

00007b12 <att_reset>:
{
    7b12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7b14:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    7b18:	4605      	mov	r5, r0
    7b1a:	f3bf 8f5b 	dmb	ish
    7b1e:	e853 2f00 	ldrex	r2, [r3]
    7b22:	f042 0204 	orr.w	r2, r2, #4
    7b26:	e843 2100 	strex	r1, r2, [r3]
    7b2a:	2900      	cmp	r1, #0
    7b2c:	d1f7      	bne.n	7b1e <att_reset+0xc>
    7b2e:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    7b32:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    7b36:	4620      	mov	r0, r4
    7b38:	f018 ffcc 	bl	20ad4 <_impl_k_sem_give>
    7b3c:	4620      	mov	r0, r4
    7b3e:	f018 ffc9 	bl	20ad4 <_impl_k_sem_give>
    7b42:	f8d5 40a4 	ldr.w	r4, [r5, #164]	; 0xa4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    7b46:	b98c      	cbnz	r4, 7b6c <att_reset+0x5a>
	if (!att->req) {
    7b48:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	list->head = NULL;
    7b4c:	2200      	movs	r2, #0
    7b4e:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	list->tail = NULL;
    7b52:	f8c5 20a8 	str.w	r2, [r5, #168]	; 0xa8
    7b56:	b90b      	cbnz	r3, 7b5c <att_reset+0x4a>
}
    7b58:	b003      	add	sp, #12
    7b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    7b5c:	230e      	movs	r3, #14
    7b5e:	4611      	mov	r1, r2
    7b60:	4628      	mov	r0, r5
}
    7b62:	b003      	add	sp, #12
    7b64:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    7b68:	f7ff befc 	b.w	7964 <att_handle_rsp>
	return node->next;
    7b6c:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
    7b6e:	6867      	ldr	r7, [r4, #4]
    7b70:	b12f      	cbz	r7, 7b7e <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    7b72:	2300      	movs	r3, #0
    7b74:	9400      	str	r4, [sp, #0]
    7b76:	461a      	mov	r2, r3
    7b78:	210e      	movs	r1, #14
    7b7a:	4618      	mov	r0, r3
    7b7c:	47b8      	blx	r7
		att_req_destroy(req);
    7b7e:	4620      	mov	r0, r4
    7b80:	f7ff fc86 	bl	7490 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    7b84:	2e00      	cmp	r6, #0
    7b86:	d0df      	beq.n	7b48 <att_reset+0x36>
    7b88:	4634      	mov	r4, r6
    7b8a:	6836      	ldr	r6, [r6, #0]
    7b8c:	e7ef      	b.n	7b6e <att_reset+0x5c>

00007b8e <bt_att_disconnected>:
{
    7b8e:	b510      	push	{r4, lr}
    7b90:	4604      	mov	r4, r0
	att_reset(att);
    7b92:	f7ff ffbe 	bl	7b12 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    7b96:	6820      	ldr	r0, [r4, #0]
    7b98:	f001 f906 	bl	8da8 <bt_gatt_disconnected>
	memset(att, 0, sizeof(*att));
    7b9c:	4620      	mov	r0, r4
    7b9e:	22ec      	movs	r2, #236	; 0xec
    7ba0:	2100      	movs	r1, #0
}
    7ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(att, 0, sizeof(*att));
    7ba6:	f7f8 be35 	b.w	814 <memset>

00007baa <att_timeout>:
{
    7baa:	b510      	push	{r4, lr}
    7bac:	4604      	mov	r4, r0
	att_reset(att);
    7bae:	38ac      	subs	r0, #172	; 0xac
    7bb0:	f7ff ffaf 	bl	7b12 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    7bb4:	f854 0cac 	ldr.w	r0, [r4, #-172]
    7bb8:	f001 f8f6 	bl	8da8 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    7bbc:	2300      	movs	r3, #0
    7bbe:	f844 3cac 	str.w	r3, [r4, #-172]
    7bc2:	bd10      	pop	{r4, pc}

00007bc4 <att_chan_get>:
{
    7bc4:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    7bc6:	7b03      	ldrb	r3, [r0, #12]
    7bc8:	2b03      	cmp	r3, #3
    7bca:	d001      	beq.n	7bd0 <att_chan_get+0xc>
		return NULL;
    7bcc:	2000      	movs	r0, #0
    7bce:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    7bd0:	2104      	movs	r1, #4
    7bd2:	f7ff f856 	bl	6c82 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    7bd6:	2800      	cmp	r0, #0
    7bd8:	d0f8      	beq.n	7bcc <att_chan_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7bda:	f3bf 8f5b 	dmb	ish
    7bde:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    7be2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    7be6:	075b      	lsls	r3, r3, #29
    7be8:	d4f0      	bmi.n	7bcc <att_chan_get+0x8>
}
    7bea:	bd08      	pop	{r3, pc}

00007bec <att_pdu_sent>:
{
    7bec:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    7bee:	2104      	movs	r1, #4
    7bf0:	f7ff f837 	bl	6c62 <bt_l2cap_le_lookup_tx_cid>
}
    7bf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    7bf8:	30d4      	adds	r0, #212	; 0xd4
    7bfa:	f018 bf6b 	b.w	20ad4 <_impl_k_sem_give>

00007bfe <att_rsp_sent>:
{
    7bfe:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    7c00:	2104      	movs	r1, #4
    7c02:	f7ff f82e 	bl	6c62 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7c06:	f3bf 8f5b 	dmb	ish
    7c0a:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    7c0e:	e853 2f00 	ldrex	r2, [r3]
    7c12:	f022 0201 	bic.w	r2, r2, #1
    7c16:	e843 2100 	strex	r1, r2, [r3]
    7c1a:	2900      	cmp	r1, #0
    7c1c:	d1f7      	bne.n	7c0e <att_rsp_sent+0x10>
    7c1e:	f3bf 8f5b 	dmb	ish
    7c22:	30d4      	adds	r0, #212	; 0xd4
}
    7c24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    7c28:	f018 bf54 	b.w	20ad4 <_impl_k_sem_give>

00007c2c <att_cfm_sent>:
{
    7c2c:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    7c2e:	2104      	movs	r1, #4
    7c30:	f7ff f817 	bl	6c62 <bt_l2cap_le_lookup_tx_cid>
    7c34:	f3bf 8f5b 	dmb	ish
    7c38:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    7c3c:	e853 2f00 	ldrex	r2, [r3]
    7c40:	f022 0202 	bic.w	r2, r2, #2
    7c44:	e843 2100 	strex	r1, r2, [r3]
    7c48:	2900      	cmp	r1, #0
    7c4a:	d1f7      	bne.n	7c3c <att_cfm_sent+0x10>
    7c4c:	f3bf 8f5b 	dmb	ish
    7c50:	30d4      	adds	r0, #212	; 0xd4
}
    7c52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    7c56:	f018 bf3d 	b.w	20ad4 <_impl_k_sem_give>

00007c5a <write_cb>:
{
    7c5a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    7c5e:	680f      	ldr	r7, [r1, #0]
{
    7c60:	460c      	mov	r4, r1
    7c62:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    7c64:	4601      	mov	r1, r0
    7c66:	222a      	movs	r2, #42	; 0x2a
    7c68:	4638      	mov	r0, r7
    7c6a:	f7ff fd49 	bl	7700 <check_perm>
    7c6e:	4605      	mov	r5, r0
    7c70:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    7c72:	b9e8      	cbnz	r0, 7cb0 <write_cb+0x56>
	write = attr->write(data->conn, attr, data->value, data->len,
    7c74:	8a62      	ldrh	r2, [r4, #18]
    7c76:	9001      	str	r0, [sp, #4]
    7c78:	9200      	str	r2, [sp, #0]
    7c7a:	7c23      	ldrb	r3, [r4, #16]
    7c7c:	f8d6 8008 	ldr.w	r8, [r6, #8]
    7c80:	68e2      	ldr	r2, [r4, #12]
    7c82:	4631      	mov	r1, r6
    7c84:	4638      	mov	r0, r7
    7c86:	47c0      	blx	r8
	if (write < 0 || write != data->len) {
    7c88:	2800      	cmp	r0, #0
    7c8a:	db02      	blt.n	7c92 <write_cb+0x38>
    7c8c:	7c23      	ldrb	r3, [r4, #16]
    7c8e:	4298      	cmp	r0, r3
    7c90:	d00b      	beq.n	7caa <write_cb+0x50>
	if (err < 0 && err >= -0xff) {
    7c92:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    7c96:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    7c98:	bf9a      	itte	ls
    7c9a:	4240      	negls	r0, r0
    7c9c:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    7c9e:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
    7ca0:	7520      	strb	r0, [r4, #20]
}
    7ca2:	4628      	mov	r0, r5
    7ca4:	b002      	add	sp, #8
    7ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    7caa:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    7cac:	2501      	movs	r5, #1
    7cae:	e7f8      	b.n	7ca2 <write_cb+0x48>
		return BT_GATT_ITER_STOP;
    7cb0:	2500      	movs	r5, #0
    7cb2:	e7f6      	b.n	7ca2 <write_cb+0x48>

00007cb4 <read_cb>:
{
    7cb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    7cb8:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    7cba:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    7cbc:	f8d1 9000 	ldr.w	r9, [r1]
{
    7cc0:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    7cc2:	3008      	adds	r0, #8
    7cc4:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    7cc6:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    7cca:	f010 f943 	bl	17f54 <net_buf_simple_add>
	data->err = 0x00;
    7cce:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    7cd0:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    7cd2:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    7cd4:	2215      	movs	r2, #21
    7cd6:	4631      	mov	r1, r6
    7cd8:	4640      	mov	r0, r8
    7cda:	f7ff fd11 	bl	7700 <check_perm>
    7cde:	4605      	mov	r5, r0
    7ce0:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    7ce2:	bb08      	cbnz	r0, 7d28 <read_cb+0x74>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    7ce4:	68a1      	ldr	r1, [r4, #8]
    7ce6:	f8b9 3062 	ldrh.w	r3, [r9, #98]	; 0x62
    7cea:	898a      	ldrh	r2, [r1, #12]
    7cec:	6889      	ldr	r1, [r1, #8]
    7cee:	88a0      	ldrh	r0, [r4, #4]
    7cf0:	9000      	str	r0, [sp, #0]
    7cf2:	1a9b      	subs	r3, r3, r2
    7cf4:	6877      	ldr	r7, [r6, #4]
    7cf6:	440a      	add	r2, r1
    7cf8:	b29b      	uxth	r3, r3
    7cfa:	4631      	mov	r1, r6
    7cfc:	4640      	mov	r0, r8
    7cfe:	47b8      	blx	r7
	if (read < 0) {
    7d00:	1e01      	subs	r1, r0, #0
    7d02:	da0b      	bge.n	7d1c <read_cb+0x68>
	if (err < 0 && err >= -0xff) {
    7d04:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    7d08:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    7d0a:	bf9a      	itte	ls
    7d0c:	4249      	negls	r1, r1
    7d0e:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    7d10:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    7d12:	7421      	strb	r1, [r4, #16]
}
    7d14:	4628      	mov	r0, r5
    7d16:	b003      	add	sp, #12
    7d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    7d1c:	68a0      	ldr	r0, [r4, #8]
    7d1e:	3008      	adds	r0, #8
    7d20:	f010 f918 	bl	17f54 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    7d24:	2501      	movs	r5, #1
    7d26:	e7f5      	b.n	7d14 <read_cb+0x60>
		return BT_GATT_ITER_STOP;
    7d28:	463d      	mov	r5, r7
    7d2a:	e7f3      	b.n	7d14 <read_cb+0x60>

00007d2c <bt_att_create_pdu>:
{
    7d2c:	b538      	push	{r3, r4, r5, lr}
    7d2e:	460d      	mov	r5, r1
    7d30:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    7d32:	f7ff ff47 	bl	7bc4 <att_chan_get>
	if (!att) {
    7d36:	b180      	cbz	r0, 7d5a <bt_att_create_pdu+0x2e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    7d38:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
    7d3c:	3401      	adds	r4, #1
    7d3e:	429c      	cmp	r4, r3
    7d40:	d80b      	bhi.n	7d5a <bt_att_create_pdu+0x2e>
	buf = bt_l2cap_create_pdu(NULL, 0);
    7d42:	2100      	movs	r1, #0
    7d44:	4608      	mov	r0, r1
    7d46:	f7fe fe0f 	bl	6968 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    7d4a:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    7d4c:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    7d4e:	3008      	adds	r0, #8
    7d50:	f010 f900 	bl	17f54 <net_buf_simple_add>
	hdr->code = op;
    7d54:	7005      	strb	r5, [r0, #0]
}
    7d56:	4620      	mov	r0, r4
    7d58:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    7d5a:	2400      	movs	r4, #0
    7d5c:	e7fb      	b.n	7d56 <bt_att_create_pdu+0x2a>
	...

00007d60 <att_indicate>:
{
    7d60:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    7d62:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    7d64:	f101 0008 	add.w	r0, r1, #8
    7d68:	f010 f954 	bl	18014 <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    7d6c:	2200      	movs	r2, #0
    7d6e:	211e      	movs	r1, #30
    7d70:	4620      	mov	r0, r4
    7d72:	f7ff ffdb 	bl	7d2c <bt_att_create_pdu>
	if (!buf) {
    7d76:	4602      	mov	r2, r0
    7d78:	b120      	cbz	r0, 7d84 <att_indicate+0x24>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    7d7a:	4b03      	ldr	r3, [pc, #12]	; (7d88 <att_indicate+0x28>)
    7d7c:	2104      	movs	r1, #4
    7d7e:	4620      	mov	r0, r4
    7d80:	f7fe fdf5 	bl	696e <bt_l2cap_send_cb>
}
    7d84:	2000      	movs	r0, #0
    7d86:	bd10      	pop	{r4, pc}
    7d88:	00007c2d 	.word	0x00007c2d

00007d8c <att_mtu_req>:
{
    7d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    7d90:	688b      	ldr	r3, [r1, #8]
    7d92:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    7d94:	2d16      	cmp	r5, #22
{
    7d96:	4606      	mov	r6, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    7d98:	d921      	bls.n	7dde <att_mtu_req+0x52>
	struct bt_conn *conn = att->chan.chan.conn;
    7d9a:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    7d9e:	2202      	movs	r2, #2
    7da0:	2103      	movs	r1, #3
    7da2:	4640      	mov	r0, r8
    7da4:	f7ff ffc2 	bl	7d2c <bt_att_create_pdu>
	if (!pdu) {
    7da8:	4607      	mov	r7, r0
    7daa:	b1d8      	cbz	r0, 7de4 <att_mtu_req+0x58>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    7dac:	2102      	movs	r1, #2
    7dae:	3008      	adds	r0, #8
    7db0:	f010 f8d0 	bl	17f54 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    7db4:	2400      	movs	r4, #0
    7db6:	f06f 0306 	mvn.w	r3, #6
    7dba:	7003      	strb	r3, [r0, #0]
    7dbc:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    7dbe:	4b0b      	ldr	r3, [pc, #44]	; (7dec <att_mtu_req+0x60>)
    7dc0:	4640      	mov	r0, r8
    7dc2:	463a      	mov	r2, r7
    7dc4:	2104      	movs	r1, #4
    7dc6:	f7fe fdd2 	bl	696e <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    7dca:	2df9      	cmp	r5, #249	; 0xf9
    7dcc:	bf28      	it	cs
    7dce:	25f9      	movcs	r5, #249	; 0xf9
    7dd0:	f8a6 5042 	strh.w	r5, [r6, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    7dd4:	f8a6 5062 	strh.w	r5, [r6, #98]	; 0x62
	return 0;
    7dd8:	4620      	mov	r0, r4
    7dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    7dde:	2004      	movs	r0, #4
    7de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    7de4:	200e      	movs	r0, #14
}
    7de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7dea:	bf00      	nop
    7dec:	00007bff 	.word	0x00007bff

00007df0 <send_err_rsp.part.9>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    7df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7df4:	4688      	mov	r8, r1
    7df6:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    7df8:	2101      	movs	r1, #1
    7dfa:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    7dfc:	4605      	mov	r5, r0
    7dfe:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    7e00:	f7ff ff94 	bl	7d2c <bt_att_create_pdu>
	if (!buf) {
    7e04:	4604      	mov	r4, r0
    7e06:	b180      	cbz	r0, 7e2a <send_err_rsp.part.9+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    7e08:	2104      	movs	r1, #4
    7e0a:	3008      	adds	r0, #8
    7e0c:	f010 f8a2 	bl	17f54 <net_buf_simple_add>
	rsp->request = req;
    7e10:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    7e14:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    7e16:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    7e1a:	4622      	mov	r2, r4
    7e1c:	4628      	mov	r0, r5
    7e1e:	4b04      	ldr	r3, [pc, #16]	; (7e30 <send_err_rsp.part.9+0x40>)
    7e20:	2104      	movs	r1, #4
}
    7e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    7e26:	f7fe bda2 	b.w	696e <bt_l2cap_send_cb>
    7e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e2e:	bf00      	nop
    7e30:	00007bff 	.word	0x00007bff

00007e34 <bt_att_recv>:
{
    7e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
    7e38:	898b      	ldrh	r3, [r1, #12]
{
    7e3a:	4604      	mov	r4, r0
    7e3c:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
    7e3e:	2b00      	cmp	r3, #0
    7e40:	d05e      	beq.n	7f00 <bt_att_recv+0xcc>
	struct bt_att_hdr *hdr = (void *)buf->data;
    7e42:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    7e44:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    7e46:	f850 7f08 	ldr.w	r7, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    7e4a:	f010 f8d3 	bl	17ff4 <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    7e4e:	4a2d      	ldr	r2, [pc, #180]	; (7f04 <bt_att_recv+0xd0>)
    7e50:	783d      	ldrb	r5, [r7, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    7e52:	2300      	movs	r3, #0
    7e54:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    7e56:	f812 e033 	ldrb.w	lr, [r2, r3, lsl #3]
    7e5a:	45ae      	cmp	lr, r5
    7e5c:	ea4f 00c3 	mov.w	r0, r3, lsl #3
    7e60:	d118      	bne.n	7e94 <bt_att_recv+0x60>
		if (handler->type == ATT_REQUEST &&
    7e62:	4402      	add	r2, r0
    7e64:	7895      	ldrb	r5, [r2, #2]
    7e66:	2d01      	cmp	r5, #1
    7e68:	d024      	beq.n	7eb4 <bt_att_recv+0x80>
		} else if (handler->type == ATT_INDICATION &&
    7e6a:	2d05      	cmp	r5, #5
    7e6c:	d133      	bne.n	7ed6 <bt_att_recv+0xa2>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7e6e:	f3bf 8f5b 	dmb	ish
    7e72:	f104 029c 	add.w	r2, r4, #156	; 0x9c
    7e76:	e852 3f00 	ldrex	r3, [r2]
    7e7a:	f043 0e02 	orr.w	lr, r3, #2
    7e7e:	e842 ec00 	strex	ip, lr, [r2]
    7e82:	f1bc 0f00 	cmp.w	ip, #0
    7e86:	d1f6      	bne.n	7e76 <bt_att_recv+0x42>
    7e88:	f3bf 8f5b 	dmb	ish
    7e8c:	079b      	lsls	r3, r3, #30
    7e8e:	d522      	bpl.n	7ed6 <bt_att_recv+0xa2>
    7e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    7e94:	3301      	adds	r3, #1
    7e96:	2b1b      	cmp	r3, #27
    7e98:	d1dd      	bne.n	7e56 <bt_att_recv+0x22>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    7e9a:	4628      	mov	r0, r5
    7e9c:	f7ff fae0 	bl	7460 <att_op_get_type>
    7ea0:	b370      	cbz	r0, 7f00 <bt_att_recv+0xcc>
	if (!req) {
    7ea2:	b36d      	cbz	r5, 7f00 <bt_att_recv+0xcc>
    7ea4:	2306      	movs	r3, #6
    7ea6:	2200      	movs	r2, #0
    7ea8:	4629      	mov	r1, r5
    7eaa:	6820      	ldr	r0, [r4, #0]
}
    7eac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7eb0:	f7ff bf9e 	b.w	7df0 <send_err_rsp.part.9>
    7eb4:	f104 029c 	add.w	r2, r4, #156	; 0x9c
    7eb8:	f3bf 8f5b 	dmb	ish
    7ebc:	e852 3f00 	ldrex	r3, [r2]
    7ec0:	f043 0e01 	orr.w	lr, r3, #1
    7ec4:	e842 ec00 	strex	ip, lr, [r2]
    7ec8:	f1bc 0f00 	cmp.w	ip, #0
    7ecc:	d1f6      	bne.n	7ebc <bt_att_recv+0x88>
    7ece:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    7ed2:	07da      	lsls	r2, r3, #31
    7ed4:	d414      	bmi.n	7f00 <bt_att_recv+0xcc>
	if (buf->len < handler->expect_len) {
    7ed6:	180b      	adds	r3, r1, r0
    7ed8:	89b1      	ldrh	r1, [r6, #12]
    7eda:	785a      	ldrb	r2, [r3, #1]
    7edc:	4291      	cmp	r1, r2
    7ede:	d30d      	bcc.n	7efc <bt_att_recv+0xc8>
		err = handler->func(att, buf);
    7ee0:	685b      	ldr	r3, [r3, #4]
    7ee2:	4631      	mov	r1, r6
    7ee4:	4620      	mov	r0, r4
    7ee6:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    7ee8:	2d01      	cmp	r5, #1
		err = handler->func(att, buf);
    7eea:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    7eec:	d108      	bne.n	7f00 <bt_att_recv+0xcc>
    7eee:	b138      	cbz	r0, 7f00 <bt_att_recv+0xcc>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    7ef0:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
    7ef2:	b129      	cbz	r1, 7f00 <bt_att_recv+0xcc>
    7ef4:	2200      	movs	r2, #0
    7ef6:	e7d8      	b.n	7eaa <bt_att_recv+0x76>
		err = BT_ATT_ERR_INVALID_PDU;
    7ef8:	2304      	movs	r3, #4
    7efa:	e7f9      	b.n	7ef0 <bt_att_recv+0xbc>
	if (handler->type == ATT_REQUEST && err) {
    7efc:	2d01      	cmp	r5, #1
    7efe:	d0fb      	beq.n	7ef8 <bt_att_recv+0xc4>
    7f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f04:	0002260c 	.word	0x0002260c

00007f08 <att_read_group_req>:
{
    7f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    7f0c:	898b      	ldrh	r3, [r1, #12]
    7f0e:	2b06      	cmp	r3, #6
{
    7f10:	b08d      	sub	sp, #52	; 0x34
    7f12:	4680      	mov	r8, r0
    7f14:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    7f16:	d001      	beq.n	7f1c <att_read_group_req+0x14>
    7f18:	2b14      	cmp	r3, #20
    7f1a:	d168      	bne.n	7fee <att_read_group_req+0xe6>
	req = (void *)buf->data;
    7f1c:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    7f1e:	2104      	movs	r1, #4
	req = (void *)buf->data;
    7f20:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    7f24:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    7f28:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    7f2a:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    7f2c:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    7f2e:	f010 f861 	bl	17ff4 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    7f32:	4621      	mov	r1, r4
    7f34:	4638      	mov	r0, r7
    7f36:	f7ff fc7d 	bl	7834 <uuid_create>
    7f3a:	2800      	cmp	r0, #0
    7f3c:	d059      	beq.n	7ff2 <att_read_group_req+0xea>
	if (!start || !end) {
    7f3e:	2d00      	cmp	r5, #0
    7f40:	d05a      	beq.n	7ff8 <att_read_group_req+0xf0>
    7f42:	2400      	movs	r4, #0
    7f44:	2e00      	cmp	r6, #0
    7f46:	d056      	beq.n	7ff6 <att_read_group_req+0xee>
	if (start > end) {
    7f48:	42b5      	cmp	r5, r6
    7f4a:	d855      	bhi.n	7ff8 <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    7f4c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    7f50:	4669      	mov	r1, sp
    7f52:	4638      	mov	r0, r7
    7f54:	f88d 4000 	strb.w	r4, [sp]
    7f58:	f8ad 3002 	strh.w	r3, [sp, #2]
    7f5c:	f7fb fb62 	bl	3624 <bt_uuid_cmp>
    7f60:	bb38      	cbnz	r0, 7fb2 <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
    7f62:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
    7f66:	2214      	movs	r2, #20
    7f68:	2100      	movs	r1, #0
    7f6a:	a807      	add	r0, sp, #28
    7f6c:	f7f8 fc52 	bl	814 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    7f70:	2201      	movs	r2, #1
    7f72:	2111      	movs	r1, #17
    7f74:	4648      	mov	r0, r9
    7f76:	f7ff fed9 	bl	7d2c <bt_att_create_pdu>
    7f7a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    7f7c:	2800      	cmp	r0, #0
    7f7e:	d038      	beq.n	7ff2 <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    7f80:	2101      	movs	r1, #1
    7f82:	3008      	adds	r0, #8
	data.uuid = uuid;
    7f84:	9708      	str	r7, [sp, #32]
	data.att = att;
    7f86:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    7f8a:	f00f ffe3 	bl	17f54 <net_buf_simple_add>
	data.rsp->len = 0;
    7f8e:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    7f90:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    7f92:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    7f94:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    7f96:	4a1c      	ldr	r2, [pc, #112]	; (8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>)
	data.group = NULL;
    7f98:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    7f9a:	4631      	mov	r1, r6
    7f9c:	4628      	mov	r0, r5
    7f9e:	f000 fe2f 	bl	8c00 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    7fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7fa4:	781c      	ldrb	r4, [r3, #0]
    7fa6:	b9d4      	cbnz	r4, 7fde <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
    7fa8:	9809      	ldr	r0, [sp, #36]	; 0x24
    7faa:	f00f ff75 	bl	17e98 <net_buf_unref>
    7fae:	230a      	movs	r3, #10
    7fb0:	e00c      	b.n	7fcc <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    7fb2:	f642 0301 	movw	r3, #10241	; 0x2801
    7fb6:	a901      	add	r1, sp, #4
    7fb8:	4638      	mov	r0, r7
    7fba:	f88d 4004 	strb.w	r4, [sp, #4]
    7fbe:	f8ad 3006 	strh.w	r3, [sp, #6]
    7fc2:	f7fb fb2f 	bl	3624 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    7fc6:	2800      	cmp	r0, #0
    7fc8:	d0cb      	beq.n	7f62 <att_read_group_req+0x5a>
    7fca:	2310      	movs	r3, #16
    7fcc:	462a      	mov	r2, r5
    7fce:	2110      	movs	r1, #16
    7fd0:	4648      	mov	r0, r9
    7fd2:	f7ff ff0d 	bl	7df0 <send_err_rsp.part.9>
}
    7fd6:	4620      	mov	r0, r4
    7fd8:	b00d      	add	sp, #52	; 0x34
    7fda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    7fde:	4b0b      	ldr	r3, [pc, #44]	; (800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>)
    7fe0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7fe2:	2104      	movs	r1, #4
    7fe4:	4648      	mov	r0, r9
    7fe6:	f7fe fcc2 	bl	696e <bt_l2cap_send_cb>
		return 0;
    7fea:	2400      	movs	r4, #0
    7fec:	e7f3      	b.n	7fd6 <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
    7fee:	2404      	movs	r4, #4
    7ff0:	e7f1      	b.n	7fd6 <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
    7ff2:	240e      	movs	r4, #14
    7ff4:	e7ef      	b.n	7fd6 <att_read_group_req+0xce>
			*err = 0;
    7ff6:	4635      	mov	r5, r6
    7ff8:	2301      	movs	r3, #1
    7ffa:	462a      	mov	r2, r5
    7ffc:	2110      	movs	r1, #16
    7ffe:	4648      	mov	r0, r9
    8000:	f7ff fef6 	bl	7df0 <send_err_rsp.part.9>
    8004:	e7f1      	b.n	7fea <att_read_group_req+0xe2>
    8006:	bf00      	nop
    8008:	000074c1 	.word	0x000074c1
    800c:	00007bff 	.word	0x00007bff

00008010 <att_read_mult_req>:
{
    8010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    8014:	6804      	ldr	r4, [r0, #0]
{
    8016:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
    8018:	2214      	movs	r2, #20
{
    801a:	4606      	mov	r6, r0
    801c:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
    801e:	a801      	add	r0, sp, #4
    8020:	2100      	movs	r1, #0
    8022:	f7f8 fbf7 	bl	814 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    8026:	2200      	movs	r2, #0
    8028:	210f      	movs	r1, #15
    802a:	4620      	mov	r0, r4
    802c:	f7ff fe7e 	bl	7d2c <bt_att_create_pdu>
    8030:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    8032:	b368      	cbz	r0, 8090 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8034:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8098 <att_read_mult_req+0x88>
	data.att = att;
    8038:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    803a:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    803e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    8042:	89ab      	ldrh	r3, [r5, #12]
    8044:	2b01      	cmp	r3, #1
    8046:	d806      	bhi.n	8056 <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    8048:	4b12      	ldr	r3, [pc, #72]	; (8094 <att_read_mult_req+0x84>)
    804a:	9a03      	ldr	r2, [sp, #12]
    804c:	2104      	movs	r1, #4
    804e:	4620      	mov	r0, r4
    8050:	f7fe fc8d 	bl	696e <bt_l2cap_send_cb>
    8054:	e018      	b.n	8088 <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    8056:	4638      	mov	r0, r7
    8058:	f00f ffdc 	bl	18014 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    805c:	ab01      	add	r3, sp, #4
    805e:	464a      	mov	r2, r9
    8060:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    8062:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    8064:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8068:	f000 fdca 	bl	8c00 <bt_gatt_foreach_attr>
		if (data.err) {
    806c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8070:	2b00      	cmp	r3, #0
    8072:	d0e6      	beq.n	8042 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    8074:	9803      	ldr	r0, [sp, #12]
    8076:	f00f ff0f 	bl	17e98 <net_buf_unref>
    807a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    807e:	4632      	mov	r2, r6
    8080:	210e      	movs	r1, #14
    8082:	4620      	mov	r0, r4
    8084:	f7ff feb4 	bl	7df0 <send_err_rsp.part.9>
	return 0;
    8088:	2000      	movs	r0, #0
}
    808a:	b007      	add	sp, #28
    808c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    8090:	200e      	movs	r0, #14
    8092:	e7fa      	b.n	808a <att_read_mult_req+0x7a>
    8094:	00007bff 	.word	0x00007bff
    8098:	00007cb5 	.word	0x00007cb5

0000809c <att_read_rsp>:
{
    809c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80a0:	4607      	mov	r7, r0
    80a2:	b086      	sub	sp, #24
    80a4:	460c      	mov	r4, r1
    80a6:	4690      	mov	r8, r2
	if (!handle) {
    80a8:	461d      	mov	r5, r3
    80aa:	b3a3      	cbz	r3, 8116 <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
    80ac:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    80ae:	2214      	movs	r2, #20
    80b0:	2100      	movs	r1, #0
    80b2:	a801      	add	r0, sp, #4
    80b4:	f7f8 fbae 	bl	814 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    80b8:	2200      	movs	r2, #0
    80ba:	4641      	mov	r1, r8
    80bc:	4630      	mov	r0, r6
    80be:	f7ff fe35 	bl	7d2c <bt_att_create_pdu>
    80c2:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    80c4:	b348      	cbz	r0, 811a <att_read_rsp+0x7e>
	data.offset = offset;
    80c6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    80ca:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    80ce:	2301      	movs	r3, #1
    80d0:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    80d4:	4a12      	ldr	r2, [pc, #72]	; (8120 <att_read_rsp+0x84>)
	data.att = att;
    80d6:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    80d8:	ab01      	add	r3, sp, #4
    80da:	4629      	mov	r1, r5
    80dc:	4628      	mov	r0, r5
    80de:	f000 fd8f 	bl	8c00 <bt_gatt_foreach_attr>
	if (data.err) {
    80e2:	f89d 7014 	ldrb.w	r7, [sp, #20]
    80e6:	b17f      	cbz	r7, 8108 <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
    80e8:	9803      	ldr	r0, [sp, #12]
    80ea:	f00f fed5 	bl	17e98 <net_buf_unref>
	if (!req) {
    80ee:	b13c      	cbz	r4, 8100 <att_read_rsp+0x64>
    80f0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    80f4:	462a      	mov	r2, r5
    80f6:	4621      	mov	r1, r4
    80f8:	4630      	mov	r0, r6
    80fa:	f7ff fe79 	bl	7df0 <send_err_rsp.part.9>
		return 0;
    80fe:	2400      	movs	r4, #0
}
    8100:	4620      	mov	r0, r4
    8102:	b006      	add	sp, #24
    8104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    8108:	4b06      	ldr	r3, [pc, #24]	; (8124 <att_read_rsp+0x88>)
    810a:	9a03      	ldr	r2, [sp, #12]
    810c:	2104      	movs	r1, #4
    810e:	4630      	mov	r0, r6
    8110:	f7fe fc2d 	bl	696e <bt_l2cap_send_cb>
    8114:	e7f3      	b.n	80fe <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    8116:	2401      	movs	r4, #1
    8118:	e7f2      	b.n	8100 <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
    811a:	240e      	movs	r4, #14
    811c:	e7f0      	b.n	8100 <att_read_rsp+0x64>
    811e:	bf00      	nop
    8120:	00007cb5 	.word	0x00007cb5
    8124:	00007bff 	.word	0x00007bff

00008128 <att_read_blob_req>:
{
    8128:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    812a:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    812c:	8813      	ldrh	r3, [r2, #0]
    812e:	8852      	ldrh	r2, [r2, #2]
    8130:	9200      	str	r2, [sp, #0]
    8132:	210c      	movs	r1, #12
    8134:	220d      	movs	r2, #13
    8136:	f7ff ffb1 	bl	809c <att_read_rsp>
}
    813a:	b003      	add	sp, #12
    813c:	f85d fb04 	ldr.w	pc, [sp], #4

00008140 <att_read_req>:
{
    8140:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    8142:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    8144:	2200      	movs	r2, #0
    8146:	881b      	ldrh	r3, [r3, #0]
    8148:	9200      	str	r2, [sp, #0]
    814a:	210a      	movs	r1, #10
    814c:	220b      	movs	r2, #11
    814e:	f7ff ffa5 	bl	809c <att_read_rsp>
}
    8152:	b003      	add	sp, #12
    8154:	f85d fb04 	ldr.w	pc, [sp], #4

00008158 <att_read_type_req>:
{
    8158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    815c:	898b      	ldrh	r3, [r1, #12]
    815e:	2b06      	cmp	r3, #6
{
    8160:	b08d      	sub	sp, #52	; 0x34
    8162:	4607      	mov	r7, r0
    8164:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    8166:	d001      	beq.n	816c <att_read_type_req+0x14>
    8168:	2b14      	cmp	r3, #20
    816a:	d152      	bne.n	8212 <att_read_type_req+0xba>
	req = (void *)buf->data;
    816c:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    816e:	2104      	movs	r1, #4
	req = (void *)buf->data;
    8170:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    8174:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    8178:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    817a:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    817c:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    8180:	f00f ff38 	bl	17ff4 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    8184:	4631      	mov	r1, r6
    8186:	4640      	mov	r0, r8
    8188:	f7ff fb54 	bl	7834 <uuid_create>
    818c:	b198      	cbz	r0, 81b6 <att_read_type_req+0x5e>
	if (!start || !end) {
    818e:	2d00      	cmp	r5, #0
    8190:	d042      	beq.n	8218 <att_read_type_req+0xc0>
    8192:	2c00      	cmp	r4, #0
    8194:	d03f      	beq.n	8216 <att_read_type_req+0xbe>
	if (start > end) {
    8196:	42a5      	cmp	r5, r4
    8198:	d83e      	bhi.n	8218 <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
    819a:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    819c:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    819e:	2100      	movs	r1, #0
    81a0:	eb0d 0002 	add.w	r0, sp, r2
    81a4:	f7f8 fb36 	bl	814 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    81a8:	2201      	movs	r2, #1
    81aa:	2109      	movs	r1, #9
    81ac:	4630      	mov	r0, r6
    81ae:	f7ff fdbd 	bl	7d2c <bt_att_create_pdu>
    81b2:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    81b4:	b908      	cbnz	r0, 81ba <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
    81b6:	240e      	movs	r4, #14
    81b8:	e027      	b.n	820a <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    81ba:	2101      	movs	r1, #1
    81bc:	3008      	adds	r0, #8
	data.att = att;
    81be:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
    81c0:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    81c4:	f00f fec6 	bl	17f54 <net_buf_simple_add>
	data.rsp->len = 0;
    81c8:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    81ca:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    81cc:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    81ce:	4621      	mov	r1, r4
	data.rsp->len = 0;
    81d0:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    81d2:	4a14      	ldr	r2, [pc, #80]	; (8224 <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    81d4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    81d8:	4628      	mov	r0, r5
    81da:	ab06      	add	r3, sp, #24
    81dc:	f000 fd10 	bl	8c00 <bt_gatt_foreach_attr>
	if (data.err) {
    81e0:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    81e4:	b15c      	cbz	r4, 81fe <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
    81e6:	9808      	ldr	r0, [sp, #32]
    81e8:	f00f fe56 	bl	17e98 <net_buf_unref>
    81ec:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    81f0:	462a      	mov	r2, r5
    81f2:	2108      	movs	r1, #8
    81f4:	4630      	mov	r0, r6
    81f6:	f7ff fdfb 	bl	7df0 <send_err_rsp.part.9>
		return 0;
    81fa:	2400      	movs	r4, #0
    81fc:	e005      	b.n	820a <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    81fe:	4b0a      	ldr	r3, [pc, #40]	; (8228 <att_read_type_req+0xd0>)
    8200:	9a08      	ldr	r2, [sp, #32]
    8202:	2104      	movs	r1, #4
    8204:	4630      	mov	r0, r6
    8206:	f7fe fbb2 	bl	696e <bt_l2cap_send_cb>
}
    820a:	4620      	mov	r0, r4
    820c:	b00d      	add	sp, #52	; 0x34
    820e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    8212:	2404      	movs	r4, #4
    8214:	e7f9      	b.n	820a <att_read_type_req+0xb2>
			*err = 0;
    8216:	4625      	mov	r5, r4
    8218:	2301      	movs	r3, #1
    821a:	462a      	mov	r2, r5
    821c:	2108      	movs	r1, #8
    821e:	4648      	mov	r0, r9
    8220:	e7e9      	b.n	81f6 <att_read_type_req+0x9e>
    8222:	bf00      	nop
    8224:	00007753 	.word	0x00007753
    8228:	00007bff 	.word	0x00007bff

0000822c <att_find_type_req>:
{
    822c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    8230:	f8d0 9000 	ldr.w	r9, [r0]
{
    8234:	4680      	mov	r8, r0
	req = (void *)buf->data;
    8236:	4608      	mov	r0, r1
{
    8238:	b089      	sub	sp, #36	; 0x24
	req = (void *)buf->data;
    823a:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    823e:	468b      	mov	fp, r1
	value = net_buf_pull(buf, sizeof(*req));
    8240:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    8242:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    8244:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    8246:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    8248:	f00f fed4 	bl	17ff4 <net_buf_simple_pull>
    824c:	4682      	mov	sl, r0
	if (!start || !end) {
    824e:	2d00      	cmp	r5, #0
    8250:	d057      	beq.n	8302 <att_find_type_req+0xd6>
    8252:	2400      	movs	r4, #0
    8254:	2f00      	cmp	r7, #0
    8256:	d053      	beq.n	8300 <att_find_type_req+0xd4>
	if (start > end) {
    8258:	42bd      	cmp	r5, r7
    825a:	d852      	bhi.n	8302 <att_find_type_req+0xd6>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    825c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8260:	a902      	add	r1, sp, #8
    8262:	a801      	add	r0, sp, #4
    8264:	f8ad 6006 	strh.w	r6, [sp, #6]
    8268:	f88d 4004 	strb.w	r4, [sp, #4]
    826c:	f88d 4008 	strb.w	r4, [sp, #8]
    8270:	f8ad 300a 	strh.w	r3, [sp, #10]
    8274:	f7fb f9d6 	bl	3624 <bt_uuid_cmp>
    8278:	4606      	mov	r6, r0
    827a:	b148      	cbz	r0, 8290 <att_find_type_req+0x64>
    827c:	230a      	movs	r3, #10
    827e:	462a      	mov	r2, r5
    8280:	2106      	movs	r1, #6
    8282:	4648      	mov	r0, r9
    8284:	f7ff fdb4 	bl	7df0 <send_err_rsp.part.9>
}
    8288:	4620      	mov	r0, r4
    828a:	b009      	add	sp, #36	; 0x24
    828c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_conn *conn = att->chan.chan.conn;
    8290:	f8d8 9000 	ldr.w	r9, [r8]
				 buf->len);
    8294:	f8bb 400c 	ldrh.w	r4, [fp, #12]
	memset(&data, 0, sizeof(data));
    8298:	2214      	movs	r2, #20
    829a:	4631      	mov	r1, r6
    829c:	a803      	add	r0, sp, #12
    829e:	f7f8 fab9 	bl	814 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    82a2:	4632      	mov	r2, r6
    82a4:	2107      	movs	r1, #7
    82a6:	4648      	mov	r0, r9
    82a8:	f7ff fd40 	bl	7d2c <bt_att_create_pdu>
    82ac:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    82ae:	b328      	cbz	r0, 82fc <att_find_type_req+0xd0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    82b0:	230a      	movs	r3, #10
    82b2:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    82b6:	4a14      	ldr	r2, [pc, #80]	; (8308 <att_find_type_req+0xdc>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    82b8:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    82bc:	ab03      	add	r3, sp, #12
    82be:	4639      	mov	r1, r7
    82c0:	4628      	mov	r0, r5
	data.att = att;
    82c2:	f8cd 800c 	str.w	r8, [sp, #12]
	data.group = NULL;
    82c6:	9605      	str	r6, [sp, #20]
	data.value = value;
    82c8:	f8cd a018 	str.w	sl, [sp, #24]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    82cc:	f000 fc98 	bl	8c00 <bt_gatt_foreach_attr>
	if (data.err) {
    82d0:	f89d 401d 	ldrb.w	r4, [sp, #29]
    82d4:	b15c      	cbz	r4, 82ee <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    82d6:	9804      	ldr	r0, [sp, #16]
    82d8:	f00f fdde 	bl	17e98 <net_buf_unref>
    82dc:	f89d 301d 	ldrb.w	r3, [sp, #29]
    82e0:	462a      	mov	r2, r5
    82e2:	2106      	movs	r1, #6
    82e4:	4648      	mov	r0, r9
    82e6:	f7ff fd83 	bl	7df0 <send_err_rsp.part.9>
		return 0;
    82ea:	2400      	movs	r4, #0
    82ec:	e7cc      	b.n	8288 <att_find_type_req+0x5c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    82ee:	4b07      	ldr	r3, [pc, #28]	; (830c <att_find_type_req+0xe0>)
    82f0:	9a04      	ldr	r2, [sp, #16]
    82f2:	2104      	movs	r1, #4
    82f4:	4648      	mov	r0, r9
    82f6:	f7fe fb3a 	bl	696e <bt_l2cap_send_cb>
    82fa:	e7c5      	b.n	8288 <att_find_type_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
    82fc:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    82fe:	e7c3      	b.n	8288 <att_find_type_req+0x5c>
			*err = 0;
    8300:	463d      	mov	r5, r7
    8302:	2301      	movs	r3, #1
    8304:	e7ec      	b.n	82e0 <att_find_type_req+0xb4>
    8306:	bf00      	nop
    8308:	00007629 	.word	0x00007629
    830c:	00007bff 	.word	0x00007bff

00008310 <att_find_info_req>:
{
    8310:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    8312:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    8314:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    8316:	881d      	ldrh	r5, [r3, #0]
{
    8318:	b085      	sub	sp, #20
    831a:	4607      	mov	r7, r0
	if (!start || !end) {
    831c:	b375      	cbz	r5, 837c <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    831e:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    8320:	b35c      	cbz	r4, 837a <att_find_info_req+0x6a>
	if (start > end) {
    8322:	42a5      	cmp	r5, r4
    8324:	d82a      	bhi.n	837c <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
    8326:	2210      	movs	r2, #16
    8328:	2100      	movs	r1, #0
    832a:	4668      	mov	r0, sp
    832c:	f7f8 fa72 	bl	814 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    8330:	2200      	movs	r2, #0
    8332:	2105      	movs	r1, #5
    8334:	4630      	mov	r0, r6
    8336:	f7ff fcf9 	bl	7d2c <bt_att_create_pdu>
    833a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    833c:	b910      	cbnz	r0, 8344 <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
    833e:	200e      	movs	r0, #14
}
    8340:	b005      	add	sp, #20
    8342:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    8344:	4621      	mov	r1, r4
    8346:	466b      	mov	r3, sp
    8348:	4a0d      	ldr	r2, [pc, #52]	; (8380 <att_find_info_req+0x70>)
	data.att = att;
    834a:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    834c:	4628      	mov	r0, r5
    834e:	f000 fc57 	bl	8c00 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    8352:	9c02      	ldr	r4, [sp, #8]
    8354:	b94c      	cbnz	r4, 836a <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
    8356:	9801      	ldr	r0, [sp, #4]
    8358:	f00f fd9e 	bl	17e98 <net_buf_unref>
    835c:	230a      	movs	r3, #10
    835e:	462a      	mov	r2, r5
    8360:	2104      	movs	r1, #4
    8362:	4630      	mov	r0, r6
    8364:	f7ff fd44 	bl	7df0 <send_err_rsp.part.9>
    8368:	e005      	b.n	8376 <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    836a:	4b06      	ldr	r3, [pc, #24]	; (8384 <att_find_info_req+0x74>)
    836c:	9a01      	ldr	r2, [sp, #4]
    836e:	2104      	movs	r1, #4
    8370:	4630      	mov	r0, r6
    8372:	f7fe fafc 	bl	696e <bt_l2cap_send_cb>
		return 0;
    8376:	2000      	movs	r0, #0
    8378:	e7e2      	b.n	8340 <att_find_info_req+0x30>
			*err = 0;
    837a:	4625      	mov	r5, r4
    837c:	2301      	movs	r3, #1
    837e:	e7ee      	b.n	835e <att_find_info_req+0x4e>
    8380:	0000758f 	.word	0x0000758f
    8384:	00007bff 	.word	0x00007bff

00008388 <att_write_rsp.part.10.constprop.13>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    8388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    838c:	b086      	sub	sp, #24
    838e:	4690      	mov	r8, r2
    8390:	4605      	mov	r5, r0
    8392:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    8394:	2218      	movs	r2, #24
    8396:	2100      	movs	r1, #0
    8398:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    839a:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
    839c:	f7f8 fa3a 	bl	814 <memset>
	if (rsp) {
    83a0:	f1b8 0f00 	cmp.w	r8, #0
    83a4:	d11f      	bne.n	83e6 <att_write_rsp.part.10.constprop.13+0x5e>
	data.offset = offset;
    83a6:	2300      	movs	r3, #0
    83a8:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    83ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    83ae:	9303      	str	r3, [sp, #12]
	data.len = len;
    83b0:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    83b4:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    83b8:	2301      	movs	r3, #1
    83ba:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    83be:	4a1b      	ldr	r2, [pc, #108]	; (842c <att_write_rsp.part.10.constprop.13+0xa4>)
	data.conn = conn;
    83c0:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    83c2:	466b      	mov	r3, sp
    83c4:	4639      	mov	r1, r7
    83c6:	4638      	mov	r0, r7
	data.op = op;
    83c8:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    83cc:	f000 fc18 	bl	8c00 <bt_gatt_foreach_attr>
	if (data.err) {
    83d0:	f89d 4014 	ldrb.w	r4, [sp, #20]
    83d4:	b98c      	cbnz	r4, 83fa <att_write_rsp.part.10.constprop.13+0x72>
	if (data.buf) {
    83d6:	9a01      	ldr	r2, [sp, #4]
    83d8:	b1b2      	cbz	r2, 8408 <att_write_rsp.part.10.constprop.13+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    83da:	4b15      	ldr	r3, [pc, #84]	; (8430 <att_write_rsp.part.10.constprop.13+0xa8>)
    83dc:	2104      	movs	r1, #4
    83de:	4628      	mov	r0, r5
    83e0:	f7fe fac5 	bl	696e <bt_l2cap_send_cb>
    83e4:	e011      	b.n	840a <att_write_rsp.part.10.constprop.13+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    83e6:	2200      	movs	r2, #0
    83e8:	4641      	mov	r1, r8
    83ea:	4628      	mov	r0, r5
    83ec:	f7ff fc9e 	bl	7d2c <bt_att_create_pdu>
    83f0:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    83f2:	2800      	cmp	r0, #0
    83f4:	d1d7      	bne.n	83a6 <att_write_rsp.part.10.constprop.13+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    83f6:	240e      	movs	r4, #14
    83f8:	e007      	b.n	840a <att_write_rsp.part.10.constprop.13+0x82>
		if (rsp) {
    83fa:	f1b8 0f00 	cmp.w	r8, #0
    83fe:	d00f      	beq.n	8420 <att_write_rsp.part.10.constprop.13+0x98>
			net_buf_unref(data.buf);
    8400:	9801      	ldr	r0, [sp, #4]
    8402:	f00f fd49 	bl	17e98 <net_buf_unref>
	if (!req) {
    8406:	b926      	cbnz	r6, 8412 <att_write_rsp.part.10.constprop.13+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8408:	2400      	movs	r4, #0
}
    840a:	4620      	mov	r0, r4
    840c:	b006      	add	sp, #24
    840e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8412:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8416:	463a      	mov	r2, r7
    8418:	4631      	mov	r1, r6
    841a:	4628      	mov	r0, r5
    841c:	f7ff fce8 	bl	7df0 <send_err_rsp.part.9>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8420:	2e18      	cmp	r6, #24
    8422:	d1f1      	bne.n	8408 <att_write_rsp.part.10.constprop.13+0x80>
    8424:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8428:	e7ef      	b.n	840a <att_write_rsp.part.10.constprop.13+0x82>
    842a:	bf00      	nop
    842c:	00007c5b 	.word	0x00007c5b
    8430:	00007bff 	.word	0x00007bff

00008434 <att_signed_write_cmd>:
{
    8434:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    8438:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    843a:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    843c:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    8440:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    8442:	4620      	mov	r0, r4
    8444:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    8446:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    844a:	f00f fdba 	bl	17fc2 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    844e:	4629      	mov	r1, r5
    8450:	4630      	mov	r0, r6
    8452:	f002 fabb 	bl	a9cc <bt_smp_sign_verify>
	if (err) {
    8456:	4607      	mov	r7, r0
    8458:	b9c8      	cbnz	r0, 848e <att_signed_write_cmd+0x5a>
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    845a:	2101      	movs	r1, #1
    845c:	4620      	mov	r0, r4
    845e:	f00f fdc9 	bl	17ff4 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    8462:	2102      	movs	r1, #2
    8464:	4620      	mov	r0, r4
    8466:	f00f fdc5 	bl	17ff4 <net_buf_simple_pull>
	if (!handle) {
    846a:	f1b8 0f00 	cmp.w	r8, #0
    846e:	d010      	beq.n	8492 <att_signed_write_cmd+0x5e>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    8470:	7b2b      	ldrb	r3, [r5, #12]
    8472:	3b0c      	subs	r3, #12
    8474:	b2db      	uxtb	r3, r3
    8476:	9301      	str	r3, [sp, #4]
    8478:	68ab      	ldr	r3, [r5, #8]
    847a:	9300      	str	r3, [sp, #0]
    847c:	463a      	mov	r2, r7
    847e:	4643      	mov	r3, r8
    8480:	4639      	mov	r1, r7
    8482:	4630      	mov	r0, r6
    8484:	f7ff ff80 	bl	8388 <att_write_rsp.part.10.constprop.13>
}
    8488:	b002      	add	sp, #8
    848a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
    848e:	2000      	movs	r0, #0
    8490:	e7fa      	b.n	8488 <att_signed_write_cmd+0x54>
		return BT_ATT_ERR_INVALID_HANDLE;
    8492:	2001      	movs	r0, #1
    8494:	e7f8      	b.n	8488 <att_signed_write_cmd+0x54>

00008496 <att_write_cmd>:
{
    8496:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    8498:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    849a:	f101 0008 	add.w	r0, r1, #8
{
    849e:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    84a0:	f00f fdb8 	bl	18014 <net_buf_simple_pull_le16>
	if (!handle) {
    84a4:	4603      	mov	r3, r0
    84a6:	b150      	cbz	r0, 84be <att_write_cmd+0x28>
    84a8:	7b22      	ldrb	r2, [r4, #12]
    84aa:	9201      	str	r2, [sp, #4]
    84ac:	68a2      	ldr	r2, [r4, #8]
    84ae:	9200      	str	r2, [sp, #0]
    84b0:	2200      	movs	r2, #0
    84b2:	4611      	mov	r1, r2
    84b4:	4628      	mov	r0, r5
    84b6:	f7ff ff67 	bl	8388 <att_write_rsp.part.10.constprop.13>
}
    84ba:	b003      	add	sp, #12
    84bc:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    84be:	2001      	movs	r0, #1
    84c0:	e7fb      	b.n	84ba <att_write_cmd+0x24>

000084c2 <att_write_req>:
{
    84c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    84c4:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    84c6:	f101 0008 	add.w	r0, r1, #8
{
    84ca:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    84cc:	f00f fda2 	bl	18014 <net_buf_simple_pull_le16>
	if (!handle) {
    84d0:	4603      	mov	r3, r0
    84d2:	b150      	cbz	r0, 84ea <att_write_req+0x28>
    84d4:	7b22      	ldrb	r2, [r4, #12]
    84d6:	9201      	str	r2, [sp, #4]
    84d8:	68a2      	ldr	r2, [r4, #8]
    84da:	9200      	str	r2, [sp, #0]
    84dc:	2112      	movs	r1, #18
    84de:	2213      	movs	r2, #19
    84e0:	4628      	mov	r0, r5
    84e2:	f7ff ff51 	bl	8388 <att_write_rsp.part.10.constprop.13>
}
    84e6:	b003      	add	sp, #12
    84e8:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    84ea:	2001      	movs	r0, #1
    84ec:	e7fb      	b.n	84e6 <att_write_req+0x24>
	...

000084f0 <bt_att_init>:

void bt_att_init(void)
{
    84f0:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    84f2:	4803      	ldr	r0, [pc, #12]	; (8500 <bt_att_init+0x10>)
    84f4:	f7fe f9dc 	bl	68b0 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    84f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    84fc:	f000 bb38 	b.w	8b70 <bt_gatt_init>
    8500:	2000df88 	.word	0x2000df88

00008504 <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    8504:	b510      	push	{r4, lr}
    8506:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    8508:	b1d8      	cbz	r0, 8542 <bt_att_req_send+0x3e>
    850a:	b1d1      	cbz	r1, 8542 <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    850c:	f7ff fb5a 	bl	7bc4 <att_chan_get>
	if (!att) {
    8510:	4603      	mov	r3, r0
    8512:	b1c8      	cbz	r0, 8548 <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    8514:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    8518:	b172      	cbz	r2, 8538 <bt_att_req_send+0x34>
	if (!list->tail) {
    851a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
	node->next = NULL;
    851e:	2000      	movs	r0, #0
    8520:	6020      	str	r0, [r4, #0]
	if (!list->tail) {
    8522:	b92a      	cbnz	r2, 8530 <bt_att_req_send+0x2c>
		list->tail = node;
    8524:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
		list->head = node;
    8528:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    852c:	4610      	mov	r0, r2
    852e:	bd10      	pop	{r4, pc}
		list->tail->next = node;
    8530:	6014      	str	r4, [r2, #0]
		list->tail = node;
    8532:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
    8536:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    8538:	4621      	mov	r1, r4
}
    853a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    853e:	f7ff b9e2 	b.w	7906 <att_send_req>
		return -EINVAL;
    8542:	f06f 0015 	mvn.w	r0, #21
    8546:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    8548:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    854c:	bd10      	pop	{r4, pc}

0000854e <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    854e:	4770      	bx	lr

00008550 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    8550:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    8552:	2000      	movs	r0, #0
    8554:	4770      	bx	lr

00008556 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    8556:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
    8558:	2300      	movs	r3, #0
    855a:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    855c:	461a      	mov	r2, r3
    855e:	42aa      	cmp	r2, r5
    8560:	d107      	bne.n	8572 <gatt_ccc_changed+0x1c>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    8562:	890a      	ldrh	r2, [r1, #8]
    8564:	429a      	cmp	r2, r3
    8566:	d00d      	beq.n	8584 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    8568:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    856a:	68ca      	ldr	r2, [r1, #12]
	}
}
    856c:	bc30      	pop	{r4, r5}
		ccc->cfg_changed(attr, value);
    856e:	4619      	mov	r1, r3
    8570:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
    8572:	680c      	ldr	r4, [r1, #0]
    8574:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    8578:	3201      	adds	r2, #1
    857a:	8924      	ldrh	r4, [r4, #8]
    857c:	42a3      	cmp	r3, r4
    857e:	bf38      	it	cc
    8580:	4623      	movcc	r3, r4
    8582:	e7ec      	b.n	855e <gatt_ccc_changed+0x8>
}
    8584:	bc30      	pop	{r4, r5}
    8586:	4770      	bx	lr

00008588 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    8588:	b410      	push	{r4}
    858a:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    858c:	69dc      	ldr	r4, [r3, #28]
    858e:	460a      	mov	r2, r1
    8590:	6999      	ldr	r1, [r3, #24]
    8592:	4623      	mov	r3, r4
}
    8594:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    8596:	4718      	bx	r3

00008598 <bt_gatt_attr_write_ccc>:
{
    8598:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    859c:	4689      	mov	r9, r1
    859e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
    85a2:	f8d9 400c 	ldr.w	r4, [r9, #12]
	if (offset > sizeof(u16_t)) {
    85a6:	2902      	cmp	r1, #2
{
    85a8:	4682      	mov	sl, r0
	if (offset > sizeof(u16_t)) {
    85aa:	d84d      	bhi.n	8648 <bt_gatt_attr_write_ccc+0xb0>
	if (offset + len > sizeof(u16_t)) {
    85ac:	4419      	add	r1, r3
    85ae:	2902      	cmp	r1, #2
    85b0:	461e      	mov	r6, r3
    85b2:	dc4c      	bgt.n	864e <bt_gatt_attr_write_ccc+0xb6>
	return ((u16_t)src[1] << 8) | src[0];
    85b4:	7853      	ldrb	r3, [r2, #1]
    85b6:	7817      	ldrb	r7, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    85b8:	2500      	movs	r5, #0
    85ba:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
    85be:	6863      	ldr	r3, [r4, #4]
    85c0:	429d      	cmp	r5, r3
    85c2:	d207      	bcs.n	85d4 <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    85c4:	6821      	ldr	r1, [r4, #0]
    85c6:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    85ca:	3101      	adds	r1, #1
    85cc:	4650      	mov	r0, sl
    85ce:	f7fd fda5 	bl	611c <bt_conn_addr_le_cmp>
    85d2:	b948      	cbnz	r0, 85e8 <bt_gatt_attr_write_ccc+0x50>
	if (i == ccc->cfg_len) {
    85d4:	6863      	ldr	r3, [r4, #4]
    85d6:	429d      	cmp	r5, r3
    85d8:	d130      	bne.n	863c <bt_gatt_attr_write_ccc+0xa4>
    85da:	f04f 0800 	mov.w	r8, #0
		for (i = 0; i < ccc->cfg_len; i++) {
    85de:	4545      	cmp	r5, r8
    85e0:	d104      	bne.n	85ec <bt_gatt_attr_write_ccc+0x54>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    85e2:	f06f 0610 	mvn.w	r6, #16
    85e6:	e026      	b.n	8636 <bt_gatt_attr_write_ccc+0x9e>
	for (i = 0; i < ccc->cfg_len; i++) {
    85e8:	3501      	adds	r5, #1
    85ea:	e7e8      	b.n	85be <bt_gatt_attr_write_ccc+0x26>
    85ec:	ea4f 1b08 	mov.w	fp, r8, lsl #4
			if (ccc->cfg[i].valid) {
    85f0:	6823      	ldr	r3, [r4, #0]
    85f2:	eb03 000b 	add.w	r0, r3, fp
    85f6:	f813 300b 	ldrb.w	r3, [r3, fp]
    85fa:	b113      	cbz	r3, 8602 <bt_gatt_attr_write_ccc+0x6a>
		for (i = 0; i < ccc->cfg_len; i++) {
    85fc:	f108 0801 	add.w	r8, r8, #1
    8600:	e7ed      	b.n	85de <bt_gatt_attr_write_ccc+0x46>
    8602:	2207      	movs	r2, #7
    8604:	f10a 0148 	add.w	r1, sl, #72	; 0x48
    8608:	3001      	adds	r0, #1
    860a:	f7f8 f8d7 	bl	7bc <memcpy>
			if (value) {
    860e:	b11f      	cbz	r7, 8618 <bt_gatt_attr_write_ccc+0x80>
				ccc->cfg[i].valid = true;
    8610:	6823      	ldr	r3, [r4, #0]
    8612:	2201      	movs	r2, #1
    8614:	f803 200b 	strb.w	r2, [r3, fp]
		if (i == ccc->cfg_len) {
    8618:	6863      	ldr	r3, [r4, #4]
    861a:	4598      	cmp	r8, r3
    861c:	d0e1      	beq.n	85e2 <bt_gatt_attr_write_ccc+0x4a>
    861e:	4645      	mov	r5, r8
	ccc->cfg[i].value = value;
    8620:	6823      	ldr	r3, [r4, #0]
    8622:	eb03 1505 	add.w	r5, r3, r5, lsl #4
	if (ccc->cfg[i].value != ccc->value) {
    8626:	8923      	ldrh	r3, [r4, #8]
	ccc->cfg[i].value = value;
    8628:	812f      	strh	r7, [r5, #8]
	if (ccc->cfg[i].value != ccc->value) {
    862a:	42bb      	cmp	r3, r7
    862c:	d003      	beq.n	8636 <bt_gatt_attr_write_ccc+0x9e>
		gatt_ccc_changed(attr, ccc);
    862e:	4621      	mov	r1, r4
    8630:	4648      	mov	r0, r9
    8632:	f7ff ff90 	bl	8556 <gatt_ccc_changed>
}
    8636:	4630      	mov	r0, r6
    8638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (!value) {
    863c:	2f00      	cmp	r7, #0
    863e:	d1ef      	bne.n	8620 <bt_gatt_attr_write_ccc+0x88>
		ccc->cfg[i].valid = false;
    8640:	6822      	ldr	r2, [r4, #0]
    8642:	012b      	lsls	r3, r5, #4
    8644:	54d7      	strb	r7, [r2, r3]
    8646:	e7eb      	b.n	8620 <bt_gatt_attr_write_ccc+0x88>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    8648:	f06f 0606 	mvn.w	r6, #6
    864c:	e7f3      	b.n	8636 <bt_gatt_attr_write_ccc+0x9e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    864e:	f06f 060c 	mvn.w	r6, #12
    8652:	e7f0      	b.n	8636 <bt_gatt_attr_write_ccc+0x9e>

00008654 <gatt_notify>:
{
    8654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8658:	468a      	mov	sl, r1
    865a:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    865c:	211b      	movs	r1, #27
    865e:	1c9a      	adds	r2, r3, #2
{
    8660:	4680      	mov	r8, r0
    8662:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    8664:	f7ff fb62 	bl	7d2c <bt_att_create_pdu>
	if (!buf) {
    8668:	4604      	mov	r4, r0
    866a:	b1d0      	cbz	r0, 86a2 <gatt_notify+0x4e>
	nfy = net_buf_add(buf, sizeof(*nfy));
    866c:	f100 0708 	add.w	r7, r0, #8
    8670:	2102      	movs	r1, #2
    8672:	4638      	mov	r0, r7
    8674:	f00f fc6e 	bl	17f54 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    8678:	4605      	mov	r5, r0
	net_buf_add(buf, len);
    867a:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    867c:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    8680:	4638      	mov	r0, r7
    8682:	f00f fc67 	bl	17f54 <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    8686:	4632      	mov	r2, r6
    8688:	4649      	mov	r1, r9
    868a:	4628      	mov	r0, r5
    868c:	f7f8 f896 	bl	7bc <memcpy>
    8690:	4640      	mov	r0, r8
    8692:	2300      	movs	r3, #0
    8694:	4622      	mov	r2, r4
    8696:	2104      	movs	r1, #4
    8698:	f7fe f969 	bl	696e <bt_l2cap_send_cb>
	return 0;
    869c:	2000      	movs	r0, #0
    869e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
    86a2:	f06f 000b 	mvn.w	r0, #11
}
    86a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000086ac <gatt_indicate>:
{
	struct net_buf *buf;
	struct bt_att_indicate *ind;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
    86ac:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
{
    86ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    86b2:	3202      	adds	r2, #2
{
    86b4:	460c      	mov	r4, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    86b6:	211d      	movs	r1, #29
{
    86b8:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    86ba:	f7ff fb37 	bl	7d2c <bt_att_create_pdu>
	if (!buf) {
    86be:	4605      	mov	r5, r0
    86c0:	b320      	cbz	r0, 870c <gatt_indicate+0x60>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, params->attr->handle);

	ind = net_buf_add(buf, sizeof(*ind));
    86c2:	f100 0608 	add.w	r6, r0, #8
    86c6:	2102      	movs	r1, #2
    86c8:	4630      	mov	r0, r6
    86ca:	f00f fc43 	bl	17f54 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    86ce:	69a3      	ldr	r3, [r4, #24]

	net_buf_add(buf, params->len);
    86d0:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    86d2:	8a1b      	ldrh	r3, [r3, #16]
    86d4:	4607      	mov	r7, r0
	net_buf_add(buf, params->len);
    86d6:	4630      	mov	r0, r6
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    86d8:	f827 3b02 	strh.w	r3, [r7], #2
	net_buf_add(buf, params->len);
    86dc:	f00f fc3a 	bl	17f54 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    86e0:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    86e2:	6a21      	ldr	r1, [r4, #32]
    86e4:	4638      	mov	r0, r7
    86e6:	f7f8 f869 	bl	7bc <memcpy>
		req->func = func;
    86ea:	4b0a      	ldr	r3, [pc, #40]	; (8714 <gatt_indicate+0x68>)
    86ec:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    86ee:	2300      	movs	r3, #0
		req->buf = buf;
    86f0:	6125      	str	r5, [r4, #16]
		req->destroy = destroy;
    86f2:	60a3      	str	r3, [r4, #8]
		err = bt_att_req_send(conn, req);
    86f4:	4621      	mov	r1, r4
    86f6:	4640      	mov	r0, r8
    86f8:	f7ff ff04 	bl	8504 <bt_att_req_send>
	if (err) {
    86fc:	4604      	mov	r4, r0
    86fe:	b110      	cbz	r0, 8706 <gatt_indicate+0x5a>
		net_buf_unref(buf);
    8700:	4628      	mov	r0, r5
    8702:	f00f fbc9 	bl	17e98 <net_buf_unref>

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
    8706:	4620      	mov	r0, r4
    8708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOMEM;
    870c:	f06f 040b 	mvn.w	r4, #11
    8710:	e7f9      	b.n	8706 <gatt_indicate+0x5a>
    8712:	bf00      	nop
    8714:	00008589 	.word	0x00008589

00008718 <gatt_register>:
	if (sys_slist_is_empty(&db)) {
    8718:	4a19      	ldr	r2, [pc, #100]	; (8780 <gatt_register+0x68>)
	struct bt_gatt_attr *attrs = svc->attrs;
    871a:	6801      	ldr	r1, [r0, #0]
	if (sys_slist_is_empty(&db)) {
    871c:	6813      	ldr	r3, [r2, #0]
{
    871e:	b570      	push	{r4, r5, r6, lr}
	u16_t count = svc->attr_count;
    8720:	8885      	ldrh	r5, [r0, #4]
	if (sys_slist_is_empty(&db)) {
    8722:	b153      	cbz	r3, 873a <gatt_register+0x22>
    8724:	6853      	ldr	r3, [r2, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    8726:	b343      	cbz	r3, 877a <gatt_register+0x62>
	handle = last->attrs[last->attr_count - 1].handle;
    8728:	f833 4c04 	ldrh.w	r4, [r3, #-4]
    872c:	f853 3c08 	ldr.w	r3, [r3, #-8]
    8730:	2614      	movs	r6, #20
    8732:	fb06 3304 	mla	r3, r6, r4, r3
    8736:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    873a:	2414      	movs	r4, #20
    873c:	fb04 1505 	mla	r5, r4, r5, r1
	for (; attrs && count; attrs++, count--) {
    8740:	b109      	cbz	r1, 8746 <gatt_register+0x2e>
    8742:	42a9      	cmp	r1, r5
    8744:	d108      	bne.n	8758 <gatt_register+0x40>
	node->next = NULL;
    8746:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    8748:	f100 0108 	add.w	r1, r0, #8
    874c:	6083      	str	r3, [r0, #8]
	if (!list->tail) {
    874e:	6850      	ldr	r0, [r2, #4]
    8750:	b978      	cbnz	r0, 8772 <gatt_register+0x5a>
		list->tail = node;
    8752:	6051      	str	r1, [r2, #4]
		list->head = node;
    8754:	6011      	str	r1, [r2, #0]
    8756:	bd70      	pop	{r4, r5, r6, pc}
		if (!attrs->handle) {
    8758:	8a0c      	ldrh	r4, [r1, #16]
    875a:	b92c      	cbnz	r4, 8768 <gatt_register+0x50>
			attrs->handle = ++handle;
    875c:	3301      	adds	r3, #1
    875e:	b29c      	uxth	r4, r3
    8760:	820c      	strh	r4, [r1, #16]
	for (; attrs && count; attrs++, count--) {
    8762:	3114      	adds	r1, #20
    8764:	4623      	mov	r3, r4
    8766:	e7eb      	b.n	8740 <gatt_register+0x28>
		} else if (attrs->handle > handle) {
    8768:	42a3      	cmp	r3, r4
    876a:	d3fa      	bcc.n	8762 <gatt_register+0x4a>
			return -EINVAL;
    876c:	f06f 0015 	mvn.w	r0, #21
    8770:	bd70      	pop	{r4, r5, r6, pc}
		list->tail->next = node;
    8772:	6001      	str	r1, [r0, #0]
		list->tail = node;
    8774:	6051      	str	r1, [r2, #4]
	return 0;
    8776:	4618      	mov	r0, r3
    8778:	bd70      	pop	{r4, r5, r6, pc}
	handle = last->attrs[last->attr_count - 1].handle;
    877a:	681b      	ldr	r3, [r3, #0]
    877c:	deff      	udf	#255	; 0xff
    877e:	bf00      	nop
    8780:	200006c4 	.word	0x200006c4

00008784 <sc_indicate.constprop.17>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    8784:	b510      	push	{r4, lr}
    8786:	4b17      	ldr	r3, [pc, #92]	; (87e4 <sc_indicate.constprop.17+0x60>)
    8788:	f3bf 8f5b 	dmb	ish
    878c:	f103 0254 	add.w	r2, r3, #84	; 0x54
    8790:	e852 4f00 	ldrex	r4, [r2]
    8794:	f044 0e01 	orr.w	lr, r4, #1
    8798:	e842 ec00 	strex	ip, lr, [r2]
    879c:	f1bc 0f00 	cmp.w	ip, #0
    87a0:	d1f6      	bne.n	8790 <sc_indicate.constprop.17+0xc>
    87a2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    87a6:	07e2      	lsls	r2, r4, #31
    87a8:	d402      	bmi.n	87b0 <sc_indicate.constprop.17+0x2c>
		sc->start = start;
    87aa:	8518      	strh	r0, [r3, #40]	; 0x28
		*end = new_end;
    87ac:	8559      	strh	r1, [r3, #42]	; 0x2a
    87ae:	e00a      	b.n	87c6 <sc_indicate.constprop.17+0x42>
	if (new_start >= *start && new_end <= *end) {
    87b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    87b2:	4282      	cmp	r2, r0
    87b4:	d803      	bhi.n	87be <sc_indicate.constprop.17+0x3a>
    87b6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    87b8:	428a      	cmp	r2, r1
    87ba:	d301      	bcc.n	87c0 <sc_indicate.constprop.17+0x3c>
    87bc:	bd10      	pop	{r4, pc}
		*start = new_start;
    87be:	8518      	strh	r0, [r3, #40]	; 0x28
	if (*end < new_end) {
    87c0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    87c2:	428a      	cmp	r2, r1
    87c4:	d3f2      	bcc.n	87ac <sc_indicate.constprop.17+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    87c6:	f3bf 8f5b 	dmb	ish
    87ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    87cc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    87d0:	079b      	lsls	r3, r3, #30
    87d2:	d406      	bmi.n	87e2 <sc_indicate.constprop.17+0x5e>
    87d4:	220a      	movs	r2, #10
    87d6:	4904      	ldr	r1, [pc, #16]	; (87e8 <sc_indicate.constprop.17+0x64>)
    87d8:	4804      	ldr	r0, [pc, #16]	; (87ec <sc_indicate.constprop.17+0x68>)
}
    87da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    87de:	f018 bd1d 	b.w	2121c <k_delayed_work_submit_to_queue>
    87e2:	bd10      	pop	{r4, pc}
    87e4:	200006cc 	.word	0x200006cc
    87e8:	200006f8 	.word	0x200006f8
    87ec:	200052a0 	.word	0x200052a0

000087f0 <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    87f0:	6882      	ldr	r2, [r0, #8]
    87f2:	4b19      	ldr	r3, [pc, #100]	; (8858 <connected_cb+0x68>)
    87f4:	429a      	cmp	r2, r3
{
    87f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    87fa:	4607      	mov	r7, r0
    87fc:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    87fe:	d126      	bne.n	884e <connected_cb+0x5e>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    8800:	68c5      	ldr	r5, [r0, #12]

	for (i = 0; i < ccc->cfg_len; i++) {
    8802:	2600      	movs	r6, #0
    8804:	686b      	ldr	r3, [r5, #4]
    8806:	429e      	cmp	r6, r3
    8808:	d221      	bcs.n	884e <connected_cb+0x5e>
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    880a:	6829      	ldr	r1, [r5, #0]
    880c:	ea4f 1806 	mov.w	r8, r6, lsl #4
    8810:	4441      	add	r1, r8
    8812:	3101      	adds	r1, #1
    8814:	4620      	mov	r0, r4
    8816:	f7fd fc81 	bl	611c <bt_conn_addr_le_cmp>
    881a:	b9d8      	cbnz	r0, 8854 <connected_cb+0x64>
			continue;
		}

		if (ccc->cfg[i].value) {
    881c:	682b      	ldr	r3, [r5, #0]
    881e:	4443      	add	r3, r8
    8820:	891b      	ldrh	r3, [r3, #8]
    8822:	b1bb      	cbz	r3, 8854 <connected_cb+0x64>
			gatt_ccc_changed(attr, ccc);
    8824:	4629      	mov	r1, r5
    8826:	4638      	mov	r0, r7
    8828:	f7ff fe95 	bl	8556 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    882c:	682c      	ldr	r4, [r5, #0]
    882e:	4b0b      	ldr	r3, [pc, #44]	; (885c <connected_cb+0x6c>)
    8830:	429c      	cmp	r4, r3
    8832:	d10c      	bne.n	884e <connected_cb+0x5e>
				sc_restore(&ccc->cfg[i]);
    8834:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    8836:	89a0      	ldrh	r0, [r4, #12]
    8838:	89e1      	ldrh	r1, [r4, #14]
    883a:	b900      	cbnz	r0, 883e <connected_cb+0x4e>
    883c:	b139      	cbz	r1, 884e <connected_cb+0x5e>
	sc_indicate(&gatt_sc, data->start, data->end);
    883e:	f7ff ffa1 	bl	8784 <sc_indicate.constprop.17>
	memset(cfg->data, 0, sizeof(cfg->data));
    8842:	2204      	movs	r2, #4
    8844:	2100      	movs	r1, #0
    8846:	f104 000c 	add.w	r0, r4, #12
    884a:	f7f7 ffe3 	bl	814 <memset>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    884e:	2001      	movs	r0, #1
    8850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    8854:	3601      	adds	r6, #1
    8856:	e7d5      	b.n	8804 <connected_cb+0x14>
    8858:	00008599 	.word	0x00008599
    885c:	20000724 	.word	0x20000724

00008860 <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8860:	490d      	ldr	r1, [pc, #52]	; (8898 <sc_indicate_rsp+0x38>)
    8862:	f3bf 8f5b 	dmb	ish
    8866:	f101 0354 	add.w	r3, r1, #84	; 0x54
    886a:	e853 2f00 	ldrex	r2, [r3]
    886e:	f022 0202 	bic.w	r2, r2, #2
    8872:	e843 2000 	strex	r0, r2, [r3]
    8876:	2800      	cmp	r0, #0
    8878:	d1f7      	bne.n	886a <sc_indicate_rsp+0xa>
    887a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    887e:	f3bf 8f5b 	dmb	ish
    8882:	6d4b      	ldr	r3, [r1, #84]	; 0x54
    8884:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    8888:	07db      	lsls	r3, r3, #31
    888a:	d504      	bpl.n	8896 <sc_indicate_rsp+0x36>
    888c:	2200      	movs	r2, #0
    888e:	312c      	adds	r1, #44	; 0x2c
    8890:	4802      	ldr	r0, [pc, #8]	; (889c <sc_indicate_rsp+0x3c>)
    8892:	f018 bcc3 	b.w	2121c <k_delayed_work_submit_to_queue>
    8896:	4770      	bx	lr
    8898:	200006cc 	.word	0x200006cc
    889c:	200052a0 	.word	0x200052a0

000088a0 <read_appearance>:
{
    88a0:	b513      	push	{r0, r1, r4, lr}
    88a2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    88a6:	4610      	mov	r0, r2
	if (offset > value_len) {
    88a8:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    88aa:	f04f 0200 	mov.w	r2, #0
    88ae:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    88b2:	d80d      	bhi.n	88d0 <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
    88b4:	f1c1 0402 	rsb	r4, r1, #2
    88b8:	429c      	cmp	r4, r3
    88ba:	bfa8      	it	ge
    88bc:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    88be:	f10d 0306 	add.w	r3, sp, #6
    88c2:	4622      	mov	r2, r4
    88c4:	4419      	add	r1, r3
    88c6:	f7f7 ff79 	bl	7bc <memcpy>
}
    88ca:	4620      	mov	r0, r4
    88cc:	b002      	add	sp, #8
    88ce:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    88d0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    88d4:	e7f9      	b.n	88ca <read_appearance+0x2a>
	...

000088d8 <disconnected_cb>:

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    88d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    88dc:	6882      	ldr	r2, [r0, #8]
    88de:	4b24      	ldr	r3, [pc, #144]	; (8970 <disconnected_cb+0x98>)
    88e0:	429a      	cmp	r2, r3
{
    88e2:	4607      	mov	r7, r0
    88e4:	4688      	mov	r8, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    88e6:	d129      	bne.n	893c <disconnected_cb+0x64>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    88e8:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    88ea:	8923      	ldrh	r3, [r4, #8]
    88ec:	b333      	cbz	r3, 893c <disconnected_cb+0x64>
    88ee:	2600      	movs	r6, #0

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    88f0:	f101 0948 	add.w	r9, r1, #72	; 0x48
	for (i = 0; i < ccc->cfg_len; i++) {
    88f4:	6863      	ldr	r3, [r4, #4]
    88f6:	429e      	cmp	r6, r3
    88f8:	d30b      	bcc.n	8912 <disconnected_cb+0x3a>
			}
		}
	}

	/* Reset value while disconnected */
	memset(&ccc->value, 0, sizeof(ccc->value));
    88fa:	2202      	movs	r2, #2
    88fc:	2100      	movs	r1, #0
    88fe:	f104 0008 	add.w	r0, r4, #8
    8902:	f7f7 ff87 	bl	814 <memset>
	if (ccc->cfg_changed) {
    8906:	68e3      	ldr	r3, [r4, #12]
    8908:	b1c3      	cbz	r3, 893c <disconnected_cb+0x64>
		ccc->cfg_changed(attr, ccc->value);
    890a:	8921      	ldrh	r1, [r4, #8]
    890c:	4638      	mov	r0, r7
    890e:	4798      	blx	r3
    8910:	e014      	b.n	893c <disconnected_cb+0x64>
		if (!ccc->cfg[i].value) {
    8912:	6821      	ldr	r1, [r4, #0]
    8914:	0135      	lsls	r5, r6, #4
    8916:	4429      	add	r1, r5
    8918:	890b      	ldrh	r3, [r1, #8]
    891a:	b1a3      	cbz	r3, 8946 <disconnected_cb+0x6e>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    891c:	3101      	adds	r1, #1
    891e:	4640      	mov	r0, r8
    8920:	f7fd fbfc 	bl	611c <bt_conn_addr_le_cmp>
    8924:	b188      	cbz	r0, 894a <disconnected_cb+0x72>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    8926:	6820      	ldr	r0, [r4, #0]
    8928:	4428      	add	r0, r5
    892a:	3001      	adds	r0, #1
    892c:	f7fd fc0e 	bl	614c <bt_conn_lookup_addr_le>
			if (tmp) {
    8930:	b148      	cbz	r0, 8946 <disconnected_cb+0x6e>
				if (tmp->state == BT_CONN_CONNECTED) {
    8932:	7b03      	ldrb	r3, [r0, #12]
    8934:	2b03      	cmp	r3, #3
    8936:	d104      	bne.n	8942 <disconnected_cb+0x6a>
					bt_conn_unref(tmp);
    8938:	f7fd fc44 	bl	61c4 <bt_conn_unref>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    893c:	2001      	movs	r0, #1
    893e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				bt_conn_unref(tmp);
    8942:	f7fd fc3f 	bl	61c4 <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    8946:	3601      	adds	r6, #1
    8948:	e7d4      	b.n	88f4 <disconnected_cb+0x1c>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    894a:	4648      	mov	r0, r9
    894c:	f7fc fcee 	bl	532c <bt_addr_le_is_bonded>
    8950:	6823      	ldr	r3, [r4, #0]
    8952:	4601      	mov	r1, r0
				ccc->cfg[i].valid = false;
    8954:	1958      	adds	r0, r3, r5
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    8956:	b929      	cbnz	r1, 8964 <disconnected_cb+0x8c>
				ccc->cfg[i].valid = false;
    8958:	5559      	strb	r1, [r3, r5]
				memset(&ccc->cfg[i].value, 0,
    895a:	2202      	movs	r2, #2
    895c:	3008      	adds	r0, #8
    895e:	f7f7 ff59 	bl	814 <memset>
    8962:	e7f0      	b.n	8946 <disconnected_cb+0x6e>
    8964:	2207      	movs	r2, #7
    8966:	4649      	mov	r1, r9
    8968:	3001      	adds	r0, #1
    896a:	f7f7 ff27 	bl	7bc <memcpy>
    896e:	e7ea      	b.n	8946 <disconnected_cb+0x6e>
    8970:	00008599 	.word	0x00008599

00008974 <read_name>:
{
    8974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
    8978:	4e0d      	ldr	r6, [pc, #52]	; (89b0 <read_name+0x3c>)
{
    897a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
				 strlen(gap_name));
    897e:	4630      	mov	r0, r6
{
    8980:	4698      	mov	r8, r3
    8982:	4617      	mov	r7, r2
				 strlen(gap_name));
    8984:	f7f7 febc 	bl	700 <strlen>
	if (offset > value_len) {
    8988:	b283      	uxth	r3, r0
    898a:	42ab      	cmp	r3, r5
    898c:	d30d      	bcc.n	89aa <read_name+0x36>
	len = min(buf_len, value_len - offset);
    898e:	1b5c      	subs	r4, r3, r5
    8990:	4544      	cmp	r4, r8
    8992:	4623      	mov	r3, r4
    8994:	bfa8      	it	ge
    8996:	4643      	movge	r3, r8
    8998:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    899a:	4622      	mov	r2, r4
    899c:	1971      	adds	r1, r6, r5
    899e:	4638      	mov	r0, r7
    89a0:	f7f7 ff0c 	bl	7bc <memcpy>
}
    89a4:	4620      	mov	r0, r4
    89a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    89aa:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    89ae:	e7f9      	b.n	89a4 <read_name+0x30>
    89b0:	000226e4 	.word	0x000226e4

000089b4 <bt_gatt_attr_read_ccc>:
{
    89b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    89b8:	68ce      	ldr	r6, [r1, #12]
{
    89ba:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    89be:	4604      	mov	r4, r0
    89c0:	4690      	mov	r8, r2
    89c2:	4699      	mov	r9, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    89c4:	2500      	movs	r5, #0
    89c6:	6873      	ldr	r3, [r6, #4]
    89c8:	429d      	cmp	r5, r3
    89ca:	d20f      	bcs.n	89ec <bt_gatt_attr_read_ccc+0x38>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    89cc:	6831      	ldr	r1, [r6, #0]
    89ce:	ea4f 1a05 	mov.w	sl, r5, lsl #4
    89d2:	4451      	add	r1, sl
    89d4:	3101      	adds	r1, #1
    89d6:	4620      	mov	r0, r4
    89d8:	f7fd fba0 	bl	611c <bt_conn_addr_le_cmp>
    89dc:	b108      	cbz	r0, 89e2 <bt_gatt_attr_read_ccc+0x2e>
	for (i = 0; i < ccc->cfg_len; i++) {
    89de:	3501      	adds	r5, #1
    89e0:	e7f1      	b.n	89c6 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    89e2:	6832      	ldr	r2, [r6, #0]
    89e4:	4452      	add	r2, sl
    89e6:	8913      	ldrh	r3, [r2, #8]
    89e8:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
    89ec:	6873      	ldr	r3, [r6, #4]
    89ee:	429d      	cmp	r5, r3
		value = 0x0000;
    89f0:	bf04      	itt	eq
    89f2:	2300      	moveq	r3, #0
    89f4:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
    89f8:	2f02      	cmp	r7, #2
    89fa:	d80f      	bhi.n	8a1c <bt_gatt_attr_read_ccc+0x68>
	len = min(buf_len, value_len - offset);
    89fc:	f1c7 0402 	rsb	r4, r7, #2
    8a00:	454c      	cmp	r4, r9
    8a02:	bfa8      	it	ge
    8a04:	464c      	movge	r4, r9
	memcpy(buf, value + offset, len);
    8a06:	f10d 0306 	add.w	r3, sp, #6
    8a0a:	4622      	mov	r2, r4
    8a0c:	19d9      	adds	r1, r3, r7
    8a0e:	4640      	mov	r0, r8
    8a10:	f7f7 fed4 	bl	7bc <memcpy>
}
    8a14:	4620      	mov	r0, r4
    8a16:	b002      	add	sp, #8
    8a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    8a1c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    8a20:	e7f8      	b.n	8a14 <bt_gatt_attr_read_ccc+0x60>

00008a22 <bt_gatt_attr_read_service>:
{
    8a22:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    8a24:	68c9      	ldr	r1, [r1, #12]
{
    8a26:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    8a2a:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    8a2c:	780a      	ldrb	r2, [r1, #0]
    8a2e:	b992      	cbnz	r2, 8a56 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    8a30:	884a      	ldrh	r2, [r1, #2]
    8a32:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    8a36:	2d02      	cmp	r5, #2
    8a38:	d819      	bhi.n	8a6e <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    8a3a:	f1c5 0402 	rsb	r4, r5, #2
    8a3e:	429c      	cmp	r4, r3
    8a40:	bfa8      	it	ge
    8a42:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    8a44:	f10d 0306 	add.w	r3, sp, #6
    8a48:	4622      	mov	r2, r4
    8a4a:	1959      	adds	r1, r3, r5
    8a4c:	f7f7 feb6 	bl	7bc <memcpy>
}
    8a50:	4620      	mov	r0, r4
    8a52:	b003      	add	sp, #12
    8a54:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    8a56:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    8a58:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    8a5c:	d807      	bhi.n	8a6e <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    8a5e:	f1c5 0410 	rsb	r4, r5, #16
    8a62:	429c      	cmp	r4, r3
    8a64:	bfa8      	it	ge
    8a66:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    8a68:	4622      	mov	r2, r4
    8a6a:	4429      	add	r1, r5
    8a6c:	e7ee      	b.n	8a4c <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    8a6e:	f06f 0406 	mvn.w	r4, #6
    8a72:	e7ed      	b.n	8a50 <bt_gatt_attr_read_service+0x2e>

00008a74 <notify_cb>:
{
    8a74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    8a78:	f642 1302 	movw	r3, #10498	; 0x2902
{
    8a7c:	4605      	mov	r5, r0
    8a7e:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    8a80:	2400      	movs	r4, #0
    8a82:	4669      	mov	r1, sp
    8a84:	6800      	ldr	r0, [r0, #0]
    8a86:	f88d 4000 	strb.w	r4, [sp]
    8a8a:	f8ad 3002 	strh.w	r3, [sp, #2]
    8a8e:	f7fa fdc9 	bl	3624 <bt_uuid_cmp>
    8a92:	b178      	cbz	r0, 8ab4 <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    8a94:	f642 0303 	movw	r3, #10243	; 0x2803
    8a98:	6828      	ldr	r0, [r5, #0]
    8a9a:	f88d 4004 	strb.w	r4, [sp, #4]
    8a9e:	a901      	add	r1, sp, #4
    8aa0:	f8ad 3006 	strh.w	r3, [sp, #6]
    8aa4:	f7fa fdbe 	bl	3624 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    8aa8:	1b00      	subs	r0, r0, r4
    8aaa:	bf18      	it	ne
    8aac:	2001      	movne	r0, #1
}
    8aae:	b003      	add	sp, #12
    8ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    8ab4:	68aa      	ldr	r2, [r5, #8]
    8ab6:	4b2c      	ldr	r3, [pc, #176]	; (8b68 <notify_cb+0xf4>)
    8ab8:	429a      	cmp	r2, r3
    8aba:	d001      	beq.n	8ac0 <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
    8abc:	2001      	movs	r0, #1
    8abe:	e7f6      	b.n	8aae <notify_cb+0x3a>
	ccc = attr->user_data;
    8ac0:	68ef      	ldr	r7, [r5, #12]
    8ac2:	4d2a      	ldr	r5, [pc, #168]	; (8b6c <notify_cb+0xf8>)
	for (i = 0; i < ccc->cfg_len; i++) {
    8ac4:	4604      	mov	r4, r0
    8ac6:	46a8      	mov	r8, r5
    8ac8:	4681      	mov	r9, r0
    8aca:	687b      	ldr	r3, [r7, #4]
    8acc:	429c      	cmp	r4, r3
    8ace:	d2f5      	bcs.n	8abc <notify_cb+0x48>
		if (ccc->cfg[i].value != data->type) {
    8ad0:	6838      	ldr	r0, [r7, #0]
    8ad2:	88b3      	ldrh	r3, [r6, #4]
    8ad4:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    8ad8:	8902      	ldrh	r2, [r0, #8]
    8ada:	429a      	cmp	r2, r3
    8adc:	d115      	bne.n	8b0a <notify_cb+0x96>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    8ade:	3001      	adds	r0, #1
    8ae0:	f7fd fb34 	bl	614c <bt_conn_lookup_addr_le>
		if (!conn) {
    8ae4:	4683      	mov	fp, r0
    8ae6:	b9f8      	cbnz	r0, 8b28 <notify_cb+0xb4>
			if (ccc->cfg == sc_ccc_cfg) {
    8ae8:	683b      	ldr	r3, [r7, #0]
    8aea:	4543      	cmp	r3, r8
    8aec:	d10d      	bne.n	8b0a <notify_cb+0x96>
				sc_save(&ccc->cfg[i], data->params);
    8aee:	6973      	ldr	r3, [r6, #20]
	memcpy(&data, params->data, params->len);
    8af0:	a801      	add	r0, sp, #4
    8af2:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    8af4:	6a19      	ldr	r1, [r3, #32]
    8af6:	f7f7 fe61 	bl	7bc <memcpy>
	if (!stored->start && !stored->end) {
    8afa:	89a8      	ldrh	r0, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    8afc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8b00:	89ea      	ldrh	r2, [r5, #14]
	if (!stored->start && !stored->end) {
    8b02:	b928      	cbnz	r0, 8b10 <notify_cb+0x9c>
    8b04:	b942      	cbnz	r2, 8b18 <notify_cb+0xa4>
		*stored = data;
    8b06:	9801      	ldr	r0, [sp, #4]
    8b08:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    8b0a:	3401      	adds	r4, #1
    8b0c:	3510      	adds	r5, #16
    8b0e:	e7dc      	b.n	8aca <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
    8b10:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	if (new_start >= *start && new_end <= *end) {
    8b14:	4281      	cmp	r1, r0
    8b16:	d305      	bcc.n	8b24 <notify_cb+0xb0>
    8b18:	429a      	cmp	r2, r3
    8b1a:	d2f6      	bcs.n	8b0a <notify_cb+0x96>
	if (*end < new_end) {
    8b1c:	429a      	cmp	r2, r3
    8b1e:	d2f4      	bcs.n	8b0a <notify_cb+0x96>
		*end = new_end;
    8b20:	81eb      	strh	r3, [r5, #14]
    8b22:	e7f2      	b.n	8b0a <notify_cb+0x96>
		*start = new_start;
    8b24:	81a9      	strh	r1, [r5, #12]
    8b26:	e7f9      	b.n	8b1c <notify_cb+0xa8>
		if (conn->state != BT_CONN_CONNECTED) {
    8b28:	7b03      	ldrb	r3, [r0, #12]
    8b2a:	2b03      	cmp	r3, #3
    8b2c:	d002      	beq.n	8b34 <notify_cb+0xc0>
			bt_conn_unref(conn);
    8b2e:	f7fd fb49 	bl	61c4 <bt_conn_unref>
    8b32:	e7ea      	b.n	8b0a <notify_cb+0x96>
		if (data->type == BT_GATT_CCC_INDICATE) {
    8b34:	88b3      	ldrh	r3, [r6, #4]
    8b36:	2b02      	cmp	r3, #2
    8b38:	d10c      	bne.n	8b54 <notify_cb+0xe0>
			err = gatt_indicate(conn, data->params);
    8b3a:	6971      	ldr	r1, [r6, #20]
    8b3c:	f7ff fdb6 	bl	86ac <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle, data->data,
    8b40:	4682      	mov	sl, r0
		bt_conn_unref(conn);
    8b42:	4658      	mov	r0, fp
    8b44:	f7fd fb3e 	bl	61c4 <bt_conn_unref>
		if (err < 0) {
    8b48:	f1ba 0f00 	cmp.w	sl, #0
    8b4c:	db09      	blt.n	8b62 <notify_cb+0xee>
		data->err = 0;
    8b4e:	f8c6 9000 	str.w	r9, [r6]
    8b52:	e7da      	b.n	8b0a <notify_cb+0x96>
			err = gatt_notify(conn, data->attr->handle, data->data,
    8b54:	68b1      	ldr	r1, [r6, #8]
    8b56:	8a33      	ldrh	r3, [r6, #16]
    8b58:	68f2      	ldr	r2, [r6, #12]
    8b5a:	8a09      	ldrh	r1, [r1, #16]
    8b5c:	f7ff fd7a 	bl	8654 <gatt_notify>
    8b60:	e7ee      	b.n	8b40 <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
    8b62:	2000      	movs	r0, #0
    8b64:	e7a3      	b.n	8aae <notify_cb+0x3a>
    8b66:	bf00      	nop
    8b68:	00008599 	.word	0x00008599
    8b6c:	20000724 	.word	0x20000724

00008b70 <bt_gatt_init>:
{
    8b70:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    8b72:	4806      	ldr	r0, [pc, #24]	; (8b8c <bt_gatt_init+0x1c>)
    8b74:	f7ff fdd0 	bl	8718 <gatt_register>
	gatt_register(&gatt_svc);
    8b78:	4805      	ldr	r0, [pc, #20]	; (8b90 <bt_gatt_init+0x20>)
    8b7a:	f7ff fdcd 	bl	8718 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    8b7e:	4905      	ldr	r1, [pc, #20]	; (8b94 <bt_gatt_init+0x24>)
    8b80:	4805      	ldr	r0, [pc, #20]	; (8b98 <bt_gatt_init+0x28>)
}
    8b82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    8b86:	f018 bad1 	b.w	2112c <k_delayed_work_init>
    8b8a:	bf00      	nop
    8b8c:	2000e06c 	.word	0x2000e06c
    8b90:	2000e0c8 	.word	0x2000e0c8
    8b94:	00008c81 	.word	0x00008c81
    8b98:	200006f8 	.word	0x200006f8

00008b9c <bt_gatt_service_register>:
{
    8b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    8b9e:	6803      	ldr	r3, [r0, #0]
{
    8ba0:	4604      	mov	r4, r0
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    8ba2:	2500      	movs	r5, #0
    8ba4:	6818      	ldr	r0, [r3, #0]
    8ba6:	f88d 5000 	strb.w	r5, [sp]
    8baa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    8bae:	4669      	mov	r1, sp
    8bb0:	f8ad 3002 	strh.w	r3, [sp, #2]
    8bb4:	f7fa fd36 	bl	3624 <bt_uuid_cmp>
    8bb8:	b918      	cbnz	r0, 8bc2 <bt_gatt_service_register+0x26>
		return -EALREADY;
    8bba:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
    8bbe:	b003      	add	sp, #12
    8bc0:	bd30      	pop	{r4, r5, pc}
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    8bc2:	6823      	ldr	r3, [r4, #0]
    8bc4:	a901      	add	r1, sp, #4
    8bc6:	6818      	ldr	r0, [r3, #0]
    8bc8:	f88d 5004 	strb.w	r5, [sp, #4]
    8bcc:	f641 0301 	movw	r3, #6145	; 0x1801
    8bd0:	f8ad 3006 	strh.w	r3, [sp, #6]
    8bd4:	f7fa fd26 	bl	3624 <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    8bd8:	2800      	cmp	r0, #0
    8bda:	d0ee      	beq.n	8bba <bt_gatt_service_register+0x1e>
	err = gatt_register(svc);
    8bdc:	4620      	mov	r0, r4
    8bde:	f7ff fd9b 	bl	8718 <gatt_register>
	if (err < 0) {
    8be2:	2800      	cmp	r0, #0
    8be4:	dbeb      	blt.n	8bbe <bt_gatt_service_register+0x22>
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    8be6:	6822      	ldr	r2, [r4, #0]
		    svc->attrs[svc->attr_count - 1].handle);
    8be8:	88a3      	ldrh	r3, [r4, #4]
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    8bea:	8a10      	ldrh	r0, [r2, #16]
    8bec:	2114      	movs	r1, #20
    8bee:	fb01 2303 	mla	r3, r1, r3, r2
    8bf2:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    8bf6:	f7ff fdc5 	bl	8784 <sc_indicate.constprop.17>
	return 0;
    8bfa:	4628      	mov	r0, r5
    8bfc:	e7df      	b.n	8bbe <bt_gatt_service_register+0x22>
	...

00008c00 <bt_gatt_foreach_attr>:
{
    8c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8c04:	4699      	mov	r9, r3
    8c06:	4b12      	ldr	r3, [pc, #72]	; (8c50 <bt_gatt_foreach_attr+0x50>)
    8c08:	681c      	ldr	r4, [r3, #0]
    8c0a:	4606      	mov	r6, r0
    8c0c:	460f      	mov	r7, r1
    8c0e:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    8c10:	b1dc      	cbz	r4, 8c4a <bt_gatt_foreach_attr+0x4a>
    8c12:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    8c14:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    8c18:	b1bc      	cbz	r4, 8c4a <bt_gatt_foreach_attr+0x4a>
    8c1a:	2500      	movs	r5, #0
    8c1c:	e006      	b.n	8c2c <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    8c1e:	6820      	ldr	r0, [r4, #0]
    8c20:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
    8c24:	8a03      	ldrh	r3, [r0, #16]
    8c26:	42b3      	cmp	r3, r6
    8c28:	d207      	bcs.n	8c3a <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
    8c2a:	3501      	adds	r5, #1
    8c2c:	88a3      	ldrh	r3, [r4, #4]
    8c2e:	429d      	cmp	r5, r3
    8c30:	dbf5      	blt.n	8c1e <bt_gatt_foreach_attr+0x1e>
	return node->next;
    8c32:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    8c34:	b14c      	cbz	r4, 8c4a <bt_gatt_foreach_attr+0x4a>
    8c36:	3c08      	subs	r4, #8
    8c38:	e7ee      	b.n	8c18 <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    8c3a:	42bb      	cmp	r3, r7
    8c3c:	d8f5      	bhi.n	8c2a <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    8c3e:	4649      	mov	r1, r9
    8c40:	47c0      	blx	r8
    8c42:	2800      	cmp	r0, #0
    8c44:	d1f1      	bne.n	8c2a <bt_gatt_foreach_attr+0x2a>
    8c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8c4e:	bf00      	nop
    8c50:	200006c4 	.word	0x200006c4

00008c54 <bt_gatt_indicate.part.8>:
int bt_gatt_indicate(struct bt_conn *conn,
    8c54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nfy.err = -ENOTCONN;
    8c56:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    8c5a:	9005      	str	r0, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    8c5c:	6980      	ldr	r0, [r0, #24]
	nfy.err = -ENOTCONN;
    8c5e:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    8c60:	2302      	movs	r3, #2
    8c62:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    8c66:	4a05      	ldr	r2, [pc, #20]	; (8c7c <bt_gatt_indicate.part.8+0x28>)
    8c68:	8a00      	ldrh	r0, [r0, #16]
    8c6a:	466b      	mov	r3, sp
    8c6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8c70:	f7ff ffc6 	bl	8c00 <bt_gatt_foreach_attr>
}
    8c74:	9800      	ldr	r0, [sp, #0]
    8c76:	b007      	add	sp, #28
    8c78:	f85d fb04 	ldr.w	pc, [sp], #4
    8c7c:	00008a75 	.word	0x00008a75

00008c80 <sc_process>:
{
    8c80:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    8c82:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    8c86:	f8ad 2004 	strh.w	r2, [sp, #4]
{
    8c8a:	4603      	mov	r3, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    8c8c:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    8c90:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    8c94:	382c      	subs	r0, #44	; 0x2c
    8c96:	f103 0428 	add.w	r4, r3, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8c9a:	f3bf 8f5b 	dmb	ish
    8c9e:	e854 2f00 	ldrex	r2, [r4]
    8ca2:	f022 0201 	bic.w	r2, r2, #1
    8ca6:	e844 2100 	strex	r1, r2, [r4]
    8caa:	2900      	cmp	r1, #0
    8cac:	d1f7      	bne.n	8c9e <sc_process+0x1e>
    8cae:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    8cb2:	2200      	movs	r2, #0
    8cb4:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0;
    8cb8:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    8cbc:	4a0e      	ldr	r2, [pc, #56]	; (8cf8 <sc_process+0x78>)
    8cbe:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    8cc2:	4a0e      	ldr	r2, [pc, #56]	; (8cfc <sc_process+0x7c>)
    8cc4:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    8cc8:	aa01      	add	r2, sp, #4
    8cca:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    8cce:	2204      	movs	r2, #4
    8cd0:	f823 2c08 	strh.w	r2, [r3, #-8]
    8cd4:	f7ff ffbe 	bl	8c54 <bt_gatt_indicate.part.8>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    8cd8:	b958      	cbnz	r0, 8cf2 <sc_process+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8cda:	f3bf 8f5b 	dmb	ish
    8cde:	e854 3f00 	ldrex	r3, [r4]
    8ce2:	f043 0302 	orr.w	r3, r3, #2
    8ce6:	e844 3200 	strex	r2, r3, [r4]
    8cea:	2a00      	cmp	r2, #0
    8cec:	d1f7      	bne.n	8cde <sc_process+0x5e>
    8cee:	f3bf 8f5b 	dmb	ish
}
    8cf2:	b002      	add	sp, #8
    8cf4:	bd10      	pop	{r4, pc}
    8cf6:	bf00      	nop
    8cf8:	2000e0a0 	.word	0x2000e0a0
    8cfc:	00008861 	.word	0x00008861

00008d00 <bt_gatt_attr_next>:
{
    8d00:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    8d02:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    8d04:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    8d06:	3101      	adds	r1, #1
    8d08:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    8d0a:	2200      	movs	r2, #0
    8d0c:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    8d10:	4608      	mov	r0, r1
    8d12:	4a03      	ldr	r2, [pc, #12]	; (8d20 <bt_gatt_attr_next+0x20>)
    8d14:	f7ff ff74 	bl	8c00 <bt_gatt_foreach_attr>
}
    8d18:	9801      	ldr	r0, [sp, #4]
    8d1a:	b003      	add	sp, #12
    8d1c:	f85d fb04 	ldr.w	pc, [sp], #4
    8d20:	00008551 	.word	0x00008551

00008d24 <bt_gatt_attr_read_chrc>:
{
    8d24:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    8d26:	68cf      	ldr	r7, [r1, #12]
{
    8d28:	b087      	sub	sp, #28
    8d2a:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
    8d2c:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    8d2e:	793b      	ldrb	r3, [r7, #4]
{
    8d30:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	pdu.properties = chrc->properties;
    8d34:	f88d 3004 	strb.w	r3, [sp, #4]
{
    8d38:	4616      	mov	r6, r2
	next = bt_gatt_attr_next(attr);
    8d3a:	f7ff ffe1 	bl	8d00 <bt_gatt_attr_next>
	if (!next) {
    8d3e:	b9d0      	cbnz	r0, 8d76 <bt_gatt_attr_read_chrc+0x52>
		pdu.value_handle = 0x0000;
    8d40:	f88d 0005 	strb.w	r0, [sp, #5]
    8d44:	f88d 0006 	strb.w	r0, [sp, #6]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    8d48:	6839      	ldr	r1, [r7, #0]
    8d4a:	780b      	ldrb	r3, [r1, #0]
    8d4c:	b9bb      	cbnz	r3, 8d7e <bt_gatt_attr_read_chrc+0x5a>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    8d4e:	884b      	ldrh	r3, [r1, #2]
    8d50:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2;
    8d54:	2305      	movs	r3, #5
	if (offset > value_len) {
    8d56:	42ab      	cmp	r3, r5
    8d58:	d319      	bcc.n	8d8e <bt_gatt_attr_read_chrc+0x6a>
	len = min(buf_len, value_len - offset);
    8d5a:	1b5b      	subs	r3, r3, r5
    8d5c:	42a3      	cmp	r3, r4
    8d5e:	bfa8      	it	ge
    8d60:	4623      	movge	r3, r4
    8d62:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    8d64:	ab01      	add	r3, sp, #4
    8d66:	4622      	mov	r2, r4
    8d68:	1959      	adds	r1, r3, r5
    8d6a:	4630      	mov	r0, r6
    8d6c:	f7f7 fd26 	bl	7bc <memcpy>
}
    8d70:	4620      	mov	r0, r4
    8d72:	b007      	add	sp, #28
    8d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    8d76:	8a03      	ldrh	r3, [r0, #16]
    8d78:	f8ad 3005 	strh.w	r3, [sp, #5]
    8d7c:	e7e4      	b.n	8d48 <bt_gatt_attr_read_chrc+0x24>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    8d7e:	2210      	movs	r2, #16
    8d80:	3101      	adds	r1, #1
    8d82:	f10d 0007 	add.w	r0, sp, #7
    8d86:	f7f7 fd19 	bl	7bc <memcpy>
		value_len += 16;
    8d8a:	2313      	movs	r3, #19
    8d8c:	e7e3      	b.n	8d56 <bt_gatt_attr_read_chrc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    8d8e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    8d92:	e7ed      	b.n	8d70 <bt_gatt_attr_read_chrc+0x4c>

00008d94 <bt_gatt_connected>:
#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    8d94:	4603      	mov	r3, r0
    8d96:	4a03      	ldr	r2, [pc, #12]	; (8da4 <bt_gatt_connected+0x10>)
    8d98:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8d9c:	2001      	movs	r0, #1
    8d9e:	f7ff bf2f 	b.w	8c00 <bt_gatt_foreach_attr>
    8da2:	bf00      	nop
    8da4:	000087f1 	.word	0x000087f1

00008da8 <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    8da8:	4603      	mov	r3, r0
    8daa:	4a03      	ldr	r2, [pc, #12]	; (8db8 <bt_gatt_disconnected+0x10>)
    8dac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8db0:	2001      	movs	r0, #1
    8db2:	f7ff bf25 	b.w	8c00 <bt_gatt_foreach_attr>
    8db6:	bf00      	nop
    8db8:	000088d9 	.word	0x000088d9

00008dbc <sys_memcpy_swap>:
{
	__ASSERT(((src < dst && (src + length) <= dst) ||
		  (src > dst && (dst + length) <= src)),
		 "Source and destination buffers must not overlap");

	src += length - 1;
    8dbc:	1e53      	subs	r3, r2, #1
    8dbe:	4419      	add	r1, r3
    8dc0:	3801      	subs	r0, #1
    8dc2:	1a52      	subs	r2, r2, r1

	for (; length > 0; length--) {
    8dc4:	42d1      	cmn	r1, r2
    8dc6:	d100      	bne.n	8dca <sys_memcpy_swap+0xe>
		*((u8_t *)dst++) = *((u8_t *)src--);
	}
}
    8dc8:	4770      	bx	lr
		*((u8_t *)dst++) = *((u8_t *)src--);
    8dca:	f811 3901 	ldrb.w	r3, [r1], #-1
    8dce:	f800 3f01 	strb.w	r3, [r0, #1]!
    8dd2:	e7f7      	b.n	8dc4 <sys_memcpy_swap+0x8>

00008dd4 <sys_mem_swap>:
 *
 * @param buf A valid pointer on a memory area to swap
 * @param length Size of buf memory area
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
    8dd4:	b510      	push	{r4, lr}
    8dd6:	1843      	adds	r3, r0, r1
    8dd8:	eb00 0151 	add.w	r1, r0, r1, lsr #1
	size_t i;

	for (i = 0; i < (length/2); i++) {
    8ddc:	4288      	cmp	r0, r1
    8dde:	d100      	bne.n	8de2 <sys_mem_swap+0xe>
		u8_t tmp = ((u8_t *)buf)[i];

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
		((u8_t *)buf)[length - 1 - i] = tmp;
	}
}
    8de0:	bd10      	pop	{r4, pc}
		u8_t tmp = ((u8_t *)buf)[i];
    8de2:	7802      	ldrb	r2, [r0, #0]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    8de4:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    8de8:	f800 4b01 	strb.w	r4, [r0], #1
		((u8_t *)buf)[length - 1 - i] = tmp;
    8dec:	f803 2d01 	strb.w	r2, [r3, #-1]!
    8df0:	e7f4      	b.n	8ddc <sys_mem_swap+0x8>
	...

00008df4 <get_io_capa>:
static bool sc_local_pkey_valid;
static u8_t sc_public_key[64];

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    8df4:	4b10      	ldr	r3, [pc, #64]	; (8e38 <get_io_capa+0x44>)
    8df6:	681b      	ldr	r3, [r3, #0]
    8df8:	b1ab      	cbz	r3, 8e26 <get_io_capa+0x32>
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    8dfa:	681a      	ldr	r2, [r3, #0]
    8dfc:	b132      	cbz	r2, 8e0c <get_io_capa+0x18>
    8dfe:	6859      	ldr	r1, [r3, #4]
    8e00:	b121      	cbz	r1, 8e0c <get_io_capa+0x18>
    8e02:	6899      	ldr	r1, [r3, #8]
    8e04:	b989      	cbnz	r1, 8e2a <get_io_capa+0x36>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    8e06:	490d      	ldr	r1, [pc, #52]	; (8e3c <get_io_capa+0x48>)
    8e08:	7809      	ldrb	r1, [r1, #0]
    8e0a:	b171      	cbz	r1, 8e2a <get_io_capa+0x36>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    8e0c:	490b      	ldr	r1, [pc, #44]	; (8e3c <get_io_capa+0x48>)
    8e0e:	7809      	ldrb	r1, [r1, #0]
    8e10:	b111      	cbz	r1, 8e18 <get_io_capa+0x24>
    8e12:	b10a      	cbz	r2, 8e18 <get_io_capa+0x24>
    8e14:	6899      	ldr	r1, [r3, #8]
    8e16:	b951      	cbnz	r1, 8e2e <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    8e18:	685b      	ldr	r3, [r3, #4]
    8e1a:	b953      	cbnz	r3, 8e32 <get_io_capa+0x3e>
		return BT_SMP_IO_KEYBOARD_ONLY;
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    8e1c:	2a00      	cmp	r2, #0
    8e1e:	bf0c      	ite	eq
    8e20:	2003      	moveq	r0, #3
    8e22:	2000      	movne	r0, #0
    8e24:	4770      	bx	lr
	}

	return BT_SMP_IO_NO_INPUT_OUTPUT;
    8e26:	2003      	movs	r0, #3
    8e28:	4770      	bx	lr
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    8e2a:	2004      	movs	r0, #4
    8e2c:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    8e2e:	2001      	movs	r0, #1
    8e30:	4770      	bx	lr
		return BT_SMP_IO_KEYBOARD_ONLY;
    8e32:	2002      	movs	r0, #2
}
    8e34:	4770      	bx	lr
    8e36:	bf00      	nop
    8e38:	200041b8 	.word	0x200041b8
    8e3c:	20000929 	.word	0x20000929

00008e40 <get_auth>:
	return 0;
}

static u8_t get_auth(u8_t auth)
{
	if (sc_supported) {
    8e40:	4b08      	ldr	r3, [pc, #32]	; (8e64 <get_auth+0x24>)
    8e42:	781b      	ldrb	r3, [r3, #0]
{
    8e44:	b510      	push	{r4, lr}
	if (sc_supported) {
    8e46:	b153      	cbz	r3, 8e5e <get_auth+0x1e>
		auth &= BT_SMP_AUTH_MASK_SC;
    8e48:	f000 040f 	and.w	r4, r0, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    8e4c:	f7ff ffd2 	bl	8df4 <get_io_capa>
    8e50:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    8e52:	bf0c      	ite	eq
    8e54:	f004 000b 	andeq.w	r0, r4, #11
	} else {
		auth |= BT_SMP_AUTH_MITM;
    8e58:	f044 0004 	orrne.w	r0, r4, #4
	}

	return auth;
}
    8e5c:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    8e5e:	f000 0407 	and.w	r4, r0, #7
    8e62:	e7f3      	b.n	8e4c <get_auth+0xc>
    8e64:	20000929 	.word	0x20000929

00008e68 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    8e68:	4b04      	ldr	r3, [pc, #16]	; (8e7c <bt_smp_accept+0x14>)
    8e6a:	6818      	ldr	r0, [r3, #0]
    8e6c:	b918      	cbnz	r0, 8e76 <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.chan.ops = &ops;
    8e6e:	4a04      	ldr	r2, [pc, #16]	; (8e80 <bt_smp_accept+0x18>)
    8e70:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan.chan;
    8e72:	600b      	str	r3, [r1, #0]

		return 0;
    8e74:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    8e76:	f06f 000b 	mvn.w	r0, #11
}
    8e7a:	4770      	bx	lr
    8e7c:	20000744 	.word	0x20000744
    8e80:	2000e0e0 	.word	0x2000e0e0

00008e84 <smp_chan_get>:
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    8e84:	2106      	movs	r1, #6
    8e86:	f7fd befc 	b.w	6c82 <bt_l2cap_le_lookup_rx_cid>

00008e8a <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8e8a:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8e8c:	f3bf 8f5b 	dmb	ish
    8e90:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    8e94:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    8e98:	f001 011f 	and.w	r1, r1, #31
    8e9c:	4108      	asrs	r0, r1
}
    8e9e:	f000 0001 	and.w	r0, r0, #1
    8ea2:	4770      	bx	lr

00008ea4 <atomic_set_bit>:
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    8ea4:	094b      	lsrs	r3, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    8ea6:	2201      	movs	r2, #1
    8ea8:	f001 011f 	and.w	r1, r1, #31
    8eac:	fa02 f101 	lsl.w	r1, r2, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8eb0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8eb4:	f3bf 8f5b 	dmb	ish
    8eb8:	e850 3f00 	ldrex	r3, [r0]
    8ebc:	430b      	orrs	r3, r1
    8ebe:	e840 3200 	strex	r2, r3, [r0]
    8ec2:	2a00      	cmp	r2, #0
    8ec4:	d1f8      	bne.n	8eb8 <atomic_set_bit+0x14>
    8ec6:	f3bf 8f5b 	dmb	ish
    8eca:	4770      	bx	lr

00008ecc <smp_init>:
{
    8ecc:	b538      	push	{r3, r4, r5, lr}
	memset((u8_t *)smp + sizeof(smp->chan), 0,
    8ece:	f100 059c 	add.w	r5, r0, #156	; 0x9c
{
    8ed2:	4604      	mov	r4, r0
	memset((u8_t *)smp + sizeof(smp->chan), 0,
    8ed4:	22e0      	movs	r2, #224	; 0xe0
    8ed6:	2100      	movs	r1, #0
    8ed8:	4628      	mov	r0, r5
    8eda:	f7f7 fc9b 	bl	814 <memset>
	if (bt_rand(smp->prnd, 16)) {
    8ede:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    8ee2:	2110      	movs	r1, #16
    8ee4:	f002 ff3c 	bl	bd60 <bt_rand>
    8ee8:	4604      	mov	r4, r0
    8eea:	b928      	cbnz	r0, 8ef8 <smp_init+0x2c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    8eec:	2105      	movs	r1, #5
    8eee:	4628      	mov	r0, r5
    8ef0:	f7ff ffd8 	bl	8ea4 <atomic_set_bit>
}
    8ef4:	4620      	mov	r0, r4
    8ef6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    8ef8:	2408      	movs	r4, #8
    8efa:	e7fb      	b.n	8ef4 <smp_init+0x28>

00008efc <bt_smp_aes_cmac>:
{
    8efc:	b570      	push	{r4, r5, r6, lr}
    8efe:	b0c2      	sub	sp, #264	; 0x108
    8f00:	460d      	mov	r5, r1
    8f02:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    8f04:	4601      	mov	r1, r0
    8f06:	aa16      	add	r2, sp, #88	; 0x58
    8f08:	4668      	mov	r0, sp
{
    8f0a:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    8f0c:	f7f8 fe7a 	bl	1c04 <tc_cmac_setup>
    8f10:	b918      	cbnz	r0, 8f1a <bt_smp_aes_cmac+0x1e>
		return -EIO;
    8f12:	f06f 0004 	mvn.w	r0, #4
}
    8f16:	b042      	add	sp, #264	; 0x108
    8f18:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
    8f1a:	4632      	mov	r2, r6
    8f1c:	4629      	mov	r1, r5
    8f1e:	4668      	mov	r0, sp
    8f20:	f7f8 fe9c 	bl	1c5c <tc_cmac_update>
    8f24:	2800      	cmp	r0, #0
    8f26:	d0f4      	beq.n	8f12 <bt_smp_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
    8f28:	4669      	mov	r1, sp
    8f2a:	4620      	mov	r0, r4
    8f2c:	f7f8 fefa 	bl	1d24 <tc_cmac_final>
    8f30:	2800      	cmp	r0, #0
    8f32:	d0ee      	beq.n	8f12 <bt_smp_aes_cmac+0x16>
	return 0;
    8f34:	2000      	movs	r0, #0
    8f36:	e7ee      	b.n	8f16 <bt_smp_aes_cmac+0x1a>

00008f38 <smp_sign_buf>:
{
    8f38:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    8f3a:	188f      	adds	r7, r1, r2
{
    8f3c:	b08b      	sub	sp, #44	; 0x2c
	sys_mem_swap(m, len + sizeof(cnt));
    8f3e:	1d14      	adds	r4, r2, #4
{
    8f40:	460d      	mov	r5, r1
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    8f42:	683b      	ldr	r3, [r7, #0]
    8f44:	9301      	str	r3, [sp, #4]
{
    8f46:	4606      	mov	r6, r0
	sys_mem_swap(m, len + sizeof(cnt));
    8f48:	4621      	mov	r1, r4
    8f4a:	4628      	mov	r0, r5
    8f4c:	f7ff ff42 	bl	8dd4 <sys_mem_swap>
	sys_memcpy_swap(key_s, key, 16);
    8f50:	4631      	mov	r1, r6
    8f52:	2210      	movs	r2, #16
    8f54:	a802      	add	r0, sp, #8
    8f56:	f7ff ff31 	bl	8dbc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
    8f5a:	ab06      	add	r3, sp, #24
    8f5c:	4622      	mov	r2, r4
    8f5e:	4629      	mov	r1, r5
    8f60:	a802      	add	r0, sp, #8
    8f62:	f7ff ffcb 	bl	8efc <bt_smp_aes_cmac>
	if (err) {
    8f66:	4606      	mov	r6, r0
    8f68:	b990      	cbnz	r0, 8f90 <smp_sign_buf+0x58>
	sys_mem_swap(tmp, sizeof(tmp));
    8f6a:	2110      	movs	r1, #16
    8f6c:	a806      	add	r0, sp, #24
    8f6e:	f7ff ff31 	bl	8dd4 <sys_mem_swap>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
    8f72:	2204      	movs	r2, #4
    8f74:	eb0d 0102 	add.w	r1, sp, r2
    8f78:	a807      	add	r0, sp, #28
    8f7a:	f7f7 fc1f 	bl	7bc <memcpy>
	sys_mem_swap(m, len + sizeof(cnt));
    8f7e:	4621      	mov	r1, r4
    8f80:	4628      	mov	r0, r5
    8f82:	f7ff ff27 	bl	8dd4 <sys_mem_swap>
	memcpy(sig, tmp + 4, 12);
    8f86:	220c      	movs	r2, #12
    8f88:	a907      	add	r1, sp, #28
    8f8a:	4638      	mov	r0, r7
    8f8c:	f7f7 fc16 	bl	7bc <memcpy>
}
    8f90:	4630      	mov	r0, r6
    8f92:	b00b      	add	sp, #44	; 0x2c
    8f94:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008f96 <smp_f4>:
{
    8f96:	b570      	push	{r4, r5, r6, lr}
    8f98:	b096      	sub	sp, #88	; 0x58
    8f9a:	4614      	mov	r4, r2
    8f9c:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
    8f9e:	2220      	movs	r2, #32
    8fa0:	4601      	mov	r1, r0
    8fa2:	a805      	add	r0, sp, #20
{
    8fa4:	461d      	mov	r5, r3
	sys_memcpy_swap(m, u, 32);
    8fa6:	f7ff ff09 	bl	8dbc <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    8faa:	2220      	movs	r2, #32
    8fac:	4631      	mov	r1, r6
    8fae:	a80d      	add	r0, sp, #52	; 0x34
    8fb0:	f7ff ff04 	bl	8dbc <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    8fb4:	4621      	mov	r1, r4
    8fb6:	2210      	movs	r2, #16
    8fb8:	a801      	add	r0, sp, #4
	m[64] = z;
    8fba:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
    8fbe:	f7ff fefd 	bl	8dbc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
    8fc2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8fc4:	2241      	movs	r2, #65	; 0x41
    8fc6:	a905      	add	r1, sp, #20
    8fc8:	a801      	add	r0, sp, #4
    8fca:	f7ff ff97 	bl	8efc <bt_smp_aes_cmac>
	if (err) {
    8fce:	4604      	mov	r4, r0
    8fd0:	b918      	cbnz	r0, 8fda <smp_f4+0x44>
	sys_mem_swap(res, 16);
    8fd2:	2110      	movs	r1, #16
    8fd4:	981a      	ldr	r0, [sp, #104]	; 0x68
    8fd6:	f7ff fefd 	bl	8dd4 <sys_mem_swap>
}
    8fda:	4620      	mov	r0, r4
    8fdc:	b016      	add	sp, #88	; 0x58
    8fde:	bd70      	pop	{r4, r5, r6, pc}

00008fe0 <sc_smp_check_confirm>:
{
    8fe0:	b530      	push	{r4, r5, lr}
	switch (smp->method) {
    8fe2:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
{
    8fe6:	b087      	sub	sp, #28
    8fe8:	4604      	mov	r4, r0
	switch (smp->method) {
    8fea:	2b03      	cmp	r3, #3
    8fec:	d825      	bhi.n	903a <sc_smp_check_confirm+0x5a>
    8fee:	e8df f003 	tbb	[pc, r3]
    8ff2:	0222      	.short	0x0222
    8ff4:	2202      	.short	0x2202
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    8ff6:	f890 2178 	ldrb.w	r2, [r0, #376]	; 0x178
    8ffa:	f8d0 3174 	ldr.w	r3, [r0, #372]	; 0x174
    8ffe:	40d3      	lsrs	r3, r2
    9000:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    9004:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9008:	b2db      	uxtb	r3, r3
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    900a:	ad02      	add	r5, sp, #8
    900c:	9500      	str	r5, [sp, #0]
    900e:	f104 02d3 	add.w	r2, r4, #211	; 0xd3
    9012:	490b      	ldr	r1, [pc, #44]	; (9040 <sc_smp_check_confirm+0x60>)
    9014:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
    9018:	f7ff ffbd 	bl	8f96 <smp_f4>
    901c:	b968      	cbnz	r0, 903a <sc_smp_check_confirm+0x5a>
	if (memcmp(smp->pcnf, cfm, 16)) {
    901e:	2210      	movs	r2, #16
    9020:	4629      	mov	r1, r5
    9022:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    9026:	f7f7 fb9c 	bl	762 <memcmp>
    902a:	2800      	cmp	r0, #0
	return 0;
    902c:	bf14      	ite	ne
    902e:	2004      	movne	r0, #4
    9030:	2000      	moveq	r0, #0
}
    9032:	b007      	add	sp, #28
    9034:	bd30      	pop	{r4, r5, pc}
		r = 0;
    9036:	2300      	movs	r3, #0
    9038:	e7e7      	b.n	900a <sc_smp_check_confirm+0x2a>
		return BT_SMP_ERR_UNSPECIFIED;
    903a:	2008      	movs	r0, #8
    903c:	e7f9      	b.n	9032 <sc_smp_check_confirm+0x52>
    903e:	bf00      	nop
    9040:	200008e9 	.word	0x200008e9

00009044 <smp_f5>:
{
    9044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9048:	b09a      	sub	sp, #104	; 0x68
    904a:	4604      	mov	r4, r0
    904c:	4688      	mov	r8, r1
    904e:	4617      	mov	r7, r2
	u8_t m[53] = { 0x00, /* counter */
    9050:	2100      	movs	r1, #0
    9052:	2235      	movs	r2, #53	; 0x35
    9054:	a80c      	add	r0, sp, #48	; 0x30
{
    9056:	461d      	mov	r5, r3
	u8_t m[53] = { 0x00, /* counter */
    9058:	f7f7 fbdc 	bl	814 <memset>
    905c:	2362      	movs	r3, #98	; 0x62
    905e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    9062:	2374      	movs	r3, #116	; 0x74
    9064:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    9068:	236c      	movs	r3, #108	; 0x6c
	sys_memcpy_swap(ws, w, 32);
    906a:	4621      	mov	r1, r4
	u8_t m[53] = { 0x00, /* counter */
    906c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	sys_memcpy_swap(ws, w, 32);
    9070:	2220      	movs	r2, #32
	u8_t m[53] = { 0x00, /* counter */
    9072:	2365      	movs	r3, #101	; 0x65
	sys_memcpy_swap(ws, w, 32);
    9074:	a804      	add	r0, sp, #16
	u8_t m[53] = { 0x00, /* counter */
    9076:	2601      	movs	r6, #1
    9078:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    907c:	f88d 6063 	strb.w	r6, [sp, #99]	; 0x63
	sys_memcpy_swap(ws, w, 32);
    9080:	f7ff fe9c 	bl	8dbc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    9084:	466b      	mov	r3, sp
    9086:	2220      	movs	r2, #32
    9088:	a904      	add	r1, sp, #16
    908a:	4822      	ldr	r0, [pc, #136]	; (9114 <smp_f5+0xd0>)
    908c:	f7ff ff36 	bl	8efc <bt_smp_aes_cmac>
	if (err) {
    9090:	4604      	mov	r4, r0
    9092:	2800      	cmp	r0, #0
    9094:	d139      	bne.n	910a <smp_f5+0xc6>
	sys_memcpy_swap(m + 5, n1, 16);
    9096:	2210      	movs	r2, #16
    9098:	4641      	mov	r1, r8
    909a:	f10d 0035 	add.w	r0, sp, #53	; 0x35
    909e:	f7ff fe8d 	bl	8dbc <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    90a2:	2210      	movs	r2, #16
    90a4:	4639      	mov	r1, r7
    90a6:	f10d 0045 	add.w	r0, sp, #69	; 0x45
    90aa:	f7ff fe87 	bl	8dbc <sys_memcpy_swap>
	m[37] = a1->type;
    90ae:	4629      	mov	r1, r5
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    90b0:	2206      	movs	r2, #6
	m[37] = a1->type;
    90b2:	f811 3b01 	ldrb.w	r3, [r1], #1
    90b6:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    90ba:	f10d 0056 	add.w	r0, sp, #86	; 0x56
    90be:	f7ff fe7d 	bl	8dbc <sys_memcpy_swap>
	m[44] = a2->type;
    90c2:	9920      	ldr	r1, [sp, #128]	; 0x80
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    90c4:	2206      	movs	r2, #6
	m[44] = a2->type;
    90c6:	f811 3b01 	ldrb.w	r3, [r1], #1
    90ca:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    90ce:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
    90d2:	f7ff fe73 	bl	8dbc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    90d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
    90d8:	2235      	movs	r2, #53	; 0x35
    90da:	a90c      	add	r1, sp, #48	; 0x30
    90dc:	4668      	mov	r0, sp
    90de:	f7ff ff0d 	bl	8efc <bt_smp_aes_cmac>
	if (err) {
    90e2:	4604      	mov	r4, r0
    90e4:	b988      	cbnz	r0, 910a <smp_f5+0xc6>
	sys_mem_swap(mackey, 16);
    90e6:	2110      	movs	r1, #16
    90e8:	9821      	ldr	r0, [sp, #132]	; 0x84
    90ea:	f7ff fe73 	bl	8dd4 <sys_mem_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    90ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
	m[0] = 0x01;
    90f0:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    90f4:	2235      	movs	r2, #53	; 0x35
    90f6:	a90c      	add	r1, sp, #48	; 0x30
    90f8:	4668      	mov	r0, sp
    90fa:	f7ff feff 	bl	8efc <bt_smp_aes_cmac>
	if (err) {
    90fe:	4604      	mov	r4, r0
    9100:	b918      	cbnz	r0, 910a <smp_f5+0xc6>
	sys_mem_swap(ltk, 16);
    9102:	2110      	movs	r1, #16
    9104:	9822      	ldr	r0, [sp, #136]	; 0x88
    9106:	f7ff fe65 	bl	8dd4 <sys_mem_swap>
}
    910a:	4620      	mov	r0, r4
    910c:	b01a      	add	sp, #104	; 0x68
    910e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9112:	bf00      	nop
    9114:	00022794 	.word	0x00022794

00009118 <smp_f6>:
{
    9118:	b570      	push	{r4, r5, r6, lr}
    911a:	b096      	sub	sp, #88	; 0x58
    911c:	4605      	mov	r5, r0
    911e:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
    9120:	a805      	add	r0, sp, #20
    9122:	2210      	movs	r2, #16
{
    9124:	461c      	mov	r4, r3
	sys_memcpy_swap(m, n1, 16);
    9126:	f7ff fe49 	bl	8dbc <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
    912a:	2210      	movs	r2, #16
    912c:	4631      	mov	r1, r6
    912e:	a809      	add	r0, sp, #36	; 0x24
    9130:	f7ff fe44 	bl	8dbc <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
    9134:	4621      	mov	r1, r4
    9136:	2210      	movs	r2, #16
    9138:	a80d      	add	r0, sp, #52	; 0x34
    913a:	f7ff fe3f 	bl	8dbc <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
    913e:	2203      	movs	r2, #3
    9140:	991a      	ldr	r1, [sp, #104]	; 0x68
    9142:	a811      	add	r0, sp, #68	; 0x44
    9144:	f7ff fe3a 	bl	8dbc <sys_memcpy_swap>
	m[51] = a1->type;
    9148:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    914a:	f814 3b01 	ldrb.w	r3, [r4], #1
    914e:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
    9152:	4621      	mov	r1, r4
    9154:	2206      	movs	r2, #6
    9156:	a812      	add	r0, sp, #72	; 0x48
    9158:	f7f7 fb30 	bl	7bc <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
    915c:	4621      	mov	r1, r4
    915e:	2206      	movs	r2, #6
    9160:	a812      	add	r0, sp, #72	; 0x48
    9162:	f7ff fe2b 	bl	8dbc <sys_memcpy_swap>
	m[58] = a2->type;
    9166:	9c1c      	ldr	r4, [sp, #112]	; 0x70
    9168:	f814 3b01 	ldrb.w	r3, [r4], #1
    916c:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
    9170:	4621      	mov	r1, r4
    9172:	2206      	movs	r2, #6
    9174:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    9178:	f7f7 fb20 	bl	7bc <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
    917c:	4621      	mov	r1, r4
    917e:	2206      	movs	r2, #6
    9180:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    9184:	f7ff fe1a 	bl	8dbc <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
    9188:	2210      	movs	r2, #16
    918a:	4629      	mov	r1, r5
    918c:	a801      	add	r0, sp, #4
    918e:	f7ff fe15 	bl	8dbc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
    9192:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9194:	2241      	movs	r2, #65	; 0x41
    9196:	a905      	add	r1, sp, #20
    9198:	a801      	add	r0, sp, #4
    919a:	f7ff feaf 	bl	8efc <bt_smp_aes_cmac>
	if (err) {
    919e:	4604      	mov	r4, r0
    91a0:	b918      	cbnz	r0, 91aa <smp_f6+0x92>
	sys_mem_swap(check, 16);
    91a2:	2110      	movs	r1, #16
    91a4:	981d      	ldr	r0, [sp, #116]	; 0x74
    91a6:	f7ff fe15 	bl	8dd4 <sys_mem_swap>
}
    91aa:	4620      	mov	r0, r4
    91ac:	b016      	add	sp, #88	; 0x58
    91ae:	bd70      	pop	{r4, r5, r6, pc}

000091b0 <smp_g2>:
{
    91b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    91b2:	b099      	sub	sp, #100	; 0x64
    91b4:	4615      	mov	r5, r2
    91b6:	460f      	mov	r7, r1
	sys_memcpy_swap(m, u, 32);
    91b8:	2220      	movs	r2, #32
    91ba:	4601      	mov	r1, r0
    91bc:	a804      	add	r0, sp, #16
{
    91be:	461e      	mov	r6, r3
    91c0:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
    91c2:	f7ff fdfb 	bl	8dbc <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    91c6:	2220      	movs	r2, #32
    91c8:	4639      	mov	r1, r7
    91ca:	a80c      	add	r0, sp, #48	; 0x30
    91cc:	f7ff fdf6 	bl	8dbc <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    91d0:	2210      	movs	r2, #16
    91d2:	4631      	mov	r1, r6
    91d4:	a814      	add	r0, sp, #80	; 0x50
    91d6:	f7ff fdf1 	bl	8dbc <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    91da:	4629      	mov	r1, r5
    91dc:	2210      	movs	r2, #16
    91de:	4668      	mov	r0, sp
    91e0:	f7ff fdec 	bl	8dbc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    91e4:	466b      	mov	r3, sp
    91e6:	2250      	movs	r2, #80	; 0x50
    91e8:	a904      	add	r1, sp, #16
    91ea:	4668      	mov	r0, sp
    91ec:	f7ff fe86 	bl	8efc <bt_smp_aes_cmac>
	if (err) {
    91f0:	4605      	mov	r5, r0
    91f2:	b960      	cbnz	r0, 920e <smp_g2+0x5e>
	memcpy(passkey, xs + 12, 4);
    91f4:	2204      	movs	r2, #4
    91f6:	a903      	add	r1, sp, #12
    91f8:	4620      	mov	r0, r4
    91fa:	f7f7 fadf 	bl	7bc <memcpy>
    91fe:	6823      	ldr	r3, [r4, #0]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    9200:	4904      	ldr	r1, [pc, #16]	; (9214 <smp_g2+0x64>)
    9202:	ba1b      	rev	r3, r3
    9204:	fbb3 f2f1 	udiv	r2, r3, r1
    9208:	fb01 3312 	mls	r3, r1, r2, r3
    920c:	6023      	str	r3, [r4, #0]
}
    920e:	4628      	mov	r0, r5
    9210:	b019      	add	sp, #100	; 0x64
    9212:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9214:	000f4240 	.word	0x000f4240

00009218 <bt_smp_disconnected>:
{
    9218:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
    921a:	6803      	ldr	r3, [r0, #0]
    921c:	6f1c      	ldr	r4, [r3, #112]	; 0x70
{
    921e:	4605      	mov	r5, r0
	k_delayed_work_cancel(&smp->work);
    9220:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    9224:	f017 ffa0 	bl	21168 <k_delayed_work_cancel>
	if (keys) {
    9228:	b124      	cbz	r4, 9234 <bt_smp_disconnected+0x1c>
		if (!keys->keys ||
    922a:	89a3      	ldrh	r3, [r4, #12]
    922c:	b953      	cbnz	r3, 9244 <bt_smp_disconnected+0x2c>
			bt_keys_clear(keys);
    922e:	4620      	mov	r0, r4
    9230:	f001 fcb2 	bl	ab98 <bt_keys_clear>
	memset(smp, 0, sizeof(*smp));
    9234:	4628      	mov	r0, r5
    9236:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    923a:	2100      	movs	r1, #0
}
    923c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(smp, 0, sizeof(*smp));
    9240:	f7f7 bae8 	b.w	814 <memset>
		    atomic_test_bit(keys->flags, BT_KEYS_DEBUG)) {
    9244:	2101      	movs	r1, #1
    9246:	f104 0008 	add.w	r0, r4, #8
    924a:	f7ff fe1e 	bl	8e8a <atomic_test_bit>
		if (!keys->keys ||
    924e:	2800      	cmp	r0, #0
    9250:	d1ed      	bne.n	922e <bt_smp_disconnected+0x16>
    9252:	e7ef      	b.n	9234 <bt_smp_disconnected+0x1c>

00009254 <smp_ident_info>:
{
    9254:	b538      	push	{r3, r4, r5, lr}
    9256:	460a      	mov	r2, r1
    9258:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    925a:	210a      	movs	r1, #10
    925c:	30a0      	adds	r0, #160	; 0xa0
    925e:	f7ff fe14 	bl	8e8a <atomic_test_bit>
    9262:	b158      	cbz	r0, 927c <smp_ident_info+0x28>
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    9264:	6821      	ldr	r1, [r4, #0]
		struct bt_smp_ident_info *req = (void *)buf->data;
    9266:	6895      	ldr	r5, [r2, #8]
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    9268:	3148      	adds	r1, #72	; 0x48
    926a:	2002      	movs	r0, #2
    926c:	f001 fcda 	bl	ac24 <bt_keys_get_type>
		if (!keys) {
    9270:	b158      	cbz	r0, 928a <smp_ident_info+0x36>
		memcpy(keys->irk.val, req->irk, 16);
    9272:	2210      	movs	r2, #16
    9274:	4629      	mov	r1, r5
    9276:	3030      	adds	r0, #48	; 0x30
    9278:	f7f7 faa0 	bl	7bc <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    927c:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    9280:	2109      	movs	r1, #9
    9282:	f7ff fe0f 	bl	8ea4 <atomic_set_bit>
	return 0;
    9286:	2000      	movs	r0, #0
    9288:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    928a:	2008      	movs	r0, #8
}
    928c:	bd38      	pop	{r3, r4, r5, pc}

0000928e <smp_encrypt_info>:
{
    928e:	b538      	push	{r3, r4, r5, lr}
    9290:	460a      	mov	r2, r1
    9292:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    9294:	210a      	movs	r1, #10
    9296:	30a0      	adds	r0, #160	; 0xa0
    9298:	f7ff fdf7 	bl	8e8a <atomic_test_bit>
    929c:	b158      	cbz	r0, 92b6 <smp_encrypt_info+0x28>
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    929e:	6821      	ldr	r1, [r4, #0]
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    92a0:	6895      	ldr	r5, [r2, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    92a2:	3148      	adds	r1, #72	; 0x48
    92a4:	2004      	movs	r0, #4
    92a6:	f001 fcbd 	bl	ac24 <bt_keys_get_type>
		if (!keys) {
    92aa:	b158      	cbz	r0, 92c4 <smp_encrypt_info+0x36>
		memcpy(keys->ltk.val, req->ltk, 16);
    92ac:	2210      	movs	r2, #16
    92ae:	4629      	mov	r1, r5
    92b0:	301a      	adds	r0, #26
    92b2:	f7f7 fa83 	bl	7bc <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    92b6:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    92ba:	2107      	movs	r1, #7
    92bc:	f7ff fdf2 	bl	8ea4 <atomic_set_bit>
	return 0;
    92c0:	2000      	movs	r0, #0
    92c2:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    92c4:	2008      	movs	r0, #8
}
    92c6:	bd38      	pop	{r3, r4, r5, pc}

000092c8 <legacy_request_tk>:
{
    92c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    92ca:	6806      	ldr	r6, [r0, #0]
{
    92cc:	4605      	mov	r5, r0
	keys = bt_keys_find_addr(&conn->le.dst);
    92ce:	f106 0048 	add.w	r0, r6, #72	; 0x48
    92d2:	f001 fce9 	bl	aca8 <bt_keys_find_addr>
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    92d6:	b940      	cbnz	r0, 92ea <legacy_request_tk+0x22>
	switch (smp->method) {
    92d8:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    92dc:	2b01      	cmp	r3, #1
    92de:	d02c      	beq.n	933a <legacy_request_tk+0x72>
    92e0:	d328      	bcc.n	9334 <legacy_request_tk+0x6c>
    92e2:	2b02      	cmp	r3, #2
    92e4:	d00c      	beq.n	9300 <legacy_request_tk+0x38>
		return BT_SMP_ERR_UNSPECIFIED;
    92e6:	2008      	movs	r0, #8
    92e8:	e025      	b.n	9336 <legacy_request_tk+0x6e>
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    92ea:	2100      	movs	r1, #0
    92ec:	3008      	adds	r0, #8
    92ee:	f7ff fdcc 	bl	8e8a <atomic_test_bit>
    92f2:	2800      	cmp	r0, #0
    92f4:	d0f0      	beq.n	92d8 <legacy_request_tk+0x10>
    92f6:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    92fa:	2b00      	cmp	r3, #0
    92fc:	d0f3      	beq.n	92e6 <legacy_request_tk+0x1e>
    92fe:	e7eb      	b.n	92d8 <legacy_request_tk+0x10>
		if (bt_rand(&passkey, sizeof(passkey))) {
    9300:	2104      	movs	r1, #4
    9302:	eb0d 0001 	add.w	r0, sp, r1
    9306:	f002 fd2b 	bl	bd60 <bt_rand>
    930a:	2800      	cmp	r0, #0
    930c:	d1eb      	bne.n	92e6 <legacy_request_tk+0x1e>
		passkey %= 1000000;
    930e:	9a01      	ldr	r2, [sp, #4]
    9310:	4b0f      	ldr	r3, [pc, #60]	; (9350 <legacy_request_tk+0x88>)
    9312:	fbb2 f1f3 	udiv	r1, r2, r3
    9316:	fb03 2111 	mls	r1, r3, r1, r2
		bt_auth->passkey_display(conn, passkey);
    931a:	4b0e      	ldr	r3, [pc, #56]	; (9354 <legacy_request_tk+0x8c>)
		passkey %= 1000000;
    931c:	9101      	str	r1, [sp, #4]
		bt_auth->passkey_display(conn, passkey);
    931e:	681b      	ldr	r3, [r3, #0]
    9320:	4630      	mov	r0, r6
    9322:	681b      	ldr	r3, [r3, #0]
    9324:	4798      	blx	r3
		memcpy(smp->tk, &passkey, sizeof(passkey));
    9326:	2204      	movs	r2, #4
    9328:	eb0d 0102 	add.w	r1, sp, r2
    932c:	f105 00e3 	add.w	r0, r5, #227	; 0xe3
    9330:	f7f7 fa44 	bl	7bc <memcpy>
	return 0;
    9334:	2000      	movs	r0, #0
}
    9336:	b002      	add	sp, #8
    9338:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    933a:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    933e:	2109      	movs	r1, #9
    9340:	f7ff fdb0 	bl	8ea4 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    9344:	4b03      	ldr	r3, [pc, #12]	; (9354 <legacy_request_tk+0x8c>)
    9346:	681b      	ldr	r3, [r3, #0]
    9348:	4630      	mov	r0, r6
    934a:	685b      	ldr	r3, [r3, #4]
    934c:	4798      	blx	r3
    934e:	e7f1      	b.n	9334 <legacy_request_tk+0x6c>
    9350:	000f4240 	.word	0x000f4240
    9354:	200041b8 	.word	0x200041b8

00009358 <legacy_get_pair_method>:
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    9358:	2904      	cmp	r1, #4
{
    935a:	b538      	push	{r3, r4, r5, lr}
    935c:	4605      	mov	r5, r0
    935e:	460c      	mov	r4, r1
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    9360:	d817      	bhi.n	9392 <legacy_get_pair_method+0x3a>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    9362:	f890 00a8 	ldrb.w	r0, [r0, #168]	; 0xa8
    9366:	f895 30af 	ldrb.w	r3, [r5, #175]	; 0xaf
    936a:	4318      	orrs	r0, r3
    936c:	f010 0004 	ands.w	r0, r0, #4
    9370:	d010      	beq.n	9394 <legacy_get_pair_method+0x3c>
	method = gen_method_legacy[remote_io][get_io_capa()];
    9372:	f7ff fd3f 	bl	8df4 <get_io_capa>
    9376:	4908      	ldr	r1, [pc, #32]	; (9398 <legacy_get_pair_method+0x40>)
    9378:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    937c:	440c      	add	r4, r1
    937e:	5c20      	ldrb	r0, [r4, r0]
	if (method == PASSKEY_ROLE) {
    9380:	2804      	cmp	r0, #4
    9382:	d107      	bne.n	9394 <legacy_get_pair_method+0x3c>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    9384:	682b      	ldr	r3, [r5, #0]
    9386:	78db      	ldrb	r3, [r3, #3]
    9388:	2b00      	cmp	r3, #0
			method = PASSKEY_INPUT;
    938a:	bf0c      	ite	eq
    938c:	2002      	moveq	r0, #2
    938e:	2001      	movne	r0, #1
    9390:	bd38      	pop	{r3, r4, r5, pc}
		return JUST_WORKS;
    9392:	2000      	movs	r0, #0
}
    9394:	bd38      	pop	{r3, r4, r5, pc}
    9396:	bf00      	nop
    9398:	000226f0 	.word	0x000226f0

0000939c <sec_level_reachable.isra.2>:
	switch (conn->required_sec_level) {
    939c:	3801      	subs	r0, #1
static bool sec_level_reachable(struct bt_conn *conn)
    939e:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
    93a0:	2803      	cmp	r0, #3
    93a2:	d803      	bhi.n	93ac <sec_level_reachable.isra.2+0x10>
    93a4:	e8df f000 	tbb	[pc, r0]
    93a8:	0a041414 	.word	0x0a041414
		return false;
    93ac:	2000      	movs	r0, #0
    93ae:	bd08      	pop	{r3, pc}
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT;
    93b0:	f7ff fd20 	bl	8df4 <get_io_capa>
    93b4:	3803      	subs	r0, #3
    93b6:	bf18      	it	ne
    93b8:	2001      	movne	r0, #1
    93ba:	bd08      	pop	{r3, pc}
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT &&
    93bc:	f7ff fd1a 	bl	8df4 <get_io_capa>
    93c0:	2803      	cmp	r0, #3
    93c2:	bf1a      	itte	ne
    93c4:	4b03      	ldrne	r3, [pc, #12]	; (93d4 <sec_level_reachable.isra.2+0x38>)
    93c6:	7818      	ldrbne	r0, [r3, #0]
    93c8:	2000      	moveq	r0, #0
    93ca:	f000 0001 	and.w	r0, r0, #1
    93ce:	bd08      	pop	{r3, pc}
		return true;
    93d0:	2001      	movs	r0, #1
}
    93d2:	bd08      	pop	{r3, pc}
    93d4:	20000929 	.word	0x20000929

000093d8 <smp_create_pdu.isra.4>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    93d8:	2100      	movs	r1, #0
static struct net_buf *smp_create_pdu(struct bt_conn *conn, u8_t op,
    93da:	b538      	push	{r3, r4, r5, lr}
    93dc:	4605      	mov	r5, r0
	buf = bt_l2cap_create_pdu(NULL, 0);
    93de:	4608      	mov	r0, r1
    93e0:	f7fd fac2 	bl	6968 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    93e4:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    93e6:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    93e8:	3008      	adds	r0, #8
    93ea:	f00e fdb3 	bl	17f54 <net_buf_simple_add>
	hdr->code = op;
    93ee:	7005      	strb	r5, [r0, #0]
}
    93f0:	4620      	mov	r0, r4
    93f2:	bd38      	pop	{r3, r4, r5, pc}

000093f4 <display_passkey>:
{
    93f4:	b538      	push	{r3, r4, r5, lr}
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    93f6:	2104      	movs	r1, #4
{
    93f8:	4605      	mov	r5, r0
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    93fa:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    93fe:	f002 fcaf 	bl	bd60 <bt_rand>
    9402:	4604      	mov	r4, r0
    9404:	b988      	cbnz	r0, 942a <display_passkey+0x36>
	smp->passkey %= 1000000;
    9406:	f8d5 2174 	ldr.w	r2, [r5, #372]	; 0x174
    940a:	4b09      	ldr	r3, [pc, #36]	; (9430 <display_passkey+0x3c>)
    940c:	fbb2 f1f3 	udiv	r1, r2, r3
    9410:	fb03 2111 	mls	r1, r3, r1, r2
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    9414:	4b07      	ldr	r3, [pc, #28]	; (9434 <display_passkey+0x40>)
	smp->passkey_round = 0;
    9416:	f885 0178 	strb.w	r0, [r5, #376]	; 0x178
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    941a:	681b      	ldr	r3, [r3, #0]
    941c:	6828      	ldr	r0, [r5, #0]
	smp->passkey %= 1000000;
    941e:	f8c5 1174 	str.w	r1, [r5, #372]	; 0x174
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    9422:	681b      	ldr	r3, [r3, #0]
    9424:	4798      	blx	r3
    9426:	4620      	mov	r0, r4
    9428:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    942a:	2008      	movs	r0, #8
}
    942c:	bd38      	pop	{r3, r4, r5, pc}
    942e:	bf00      	nop
    9430:	000f4240 	.word	0x000f4240
    9434:	200041b8 	.word	0x200041b8

00009438 <smp_send>:
{
    9438:	b510      	push	{r4, lr}
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    943a:	4613      	mov	r3, r2
{
    943c:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    943e:	460a      	mov	r2, r1
    9440:	6800      	ldr	r0, [r0, #0]
    9442:	2106      	movs	r1, #6
    9444:	f7fd fa93 	bl	696e <bt_l2cap_send_cb>
    9448:	f504 71be 	add.w	r1, r4, #380	; 0x17c
    944c:	f247 5230 	movw	r2, #30000	; 0x7530
    9450:	4802      	ldr	r0, [pc, #8]	; (945c <smp_send+0x24>)
}
    9452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9456:	f017 bee1 	b.w	2121c <k_delayed_work_submit_to_queue>
    945a:	bf00      	nop
    945c:	200052a0 	.word	0x200052a0

00009460 <sc_smp_send_dhkey_check>:
{
    9460:	b570      	push	{r4, r5, r6, lr}
    9462:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    9464:	200d      	movs	r0, #13
{
    9466:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    9468:	f7ff ffb6 	bl	93d8 <smp_create_pdu.isra.4>
	if (!buf) {
    946c:	4604      	mov	r4, r0
    946e:	b170      	cbz	r0, 948e <sc_smp_send_dhkey_check+0x2e>
	req = net_buf_add(buf, sizeof(*req));
    9470:	2110      	movs	r1, #16
    9472:	3008      	adds	r0, #8
    9474:	f00e fd6e 	bl	17f54 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    9478:	4631      	mov	r1, r6
    947a:	2210      	movs	r2, #16
    947c:	f7f7 f99e 	bl	7bc <memcpy>
	smp_send(smp, buf, NULL);
    9480:	4628      	mov	r0, r5
    9482:	2200      	movs	r2, #0
    9484:	4621      	mov	r1, r4
    9486:	f7ff ffd7 	bl	9438 <smp_send>
	return 0;
    948a:	2000      	movs	r0, #0
    948c:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    948e:	2008      	movs	r0, #8
}
    9490:	bd70      	pop	{r4, r5, r6, pc}

00009492 <compute_and_send_master_dhcheck>:
{
    9492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9496:	4604      	mov	r4, r0
    9498:	b08c      	sub	sp, #48	; 0x30
	memset(r, 0, sizeof(r));
    949a:	2210      	movs	r2, #16
    949c:	2100      	movs	r1, #0
    949e:	a808      	add	r0, sp, #32
    94a0:	f7f7 f9b8 	bl	814 <memset>
	switch (smp->method) {
    94a4:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    94a8:	2b03      	cmp	r3, #3
    94aa:	d81f      	bhi.n	94ec <compute_and_send_master_dhcheck+0x5a>
    94ac:	e8df f003 	tbb	[pc, r3]
    94b0:	08020208 	.word	0x08020208
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    94b4:	2204      	movs	r2, #4
    94b6:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    94ba:	a808      	add	r0, sp, #32
    94bc:	f7f7 f97e 	bl	7bc <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    94c0:	6823      	ldr	r3, [r4, #0]
		   smp->tk)) {
    94c2:	f104 02e3 	add.w	r2, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    94c6:	f104 07c3 	add.w	r7, r4, #195	; 0xc3
    94ca:	f104 08d3 	add.w	r8, r4, #211	; 0xd3
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    94ce:	f204 1563 	addw	r5, r4, #355	; 0x163
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    94d2:	9202      	str	r2, [sp, #8]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    94d4:	f103 0256 	add.w	r2, r3, #86	; 0x56
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    94d8:	9200      	str	r2, [sp, #0]
    94da:	9501      	str	r5, [sp, #4]
    94dc:	334f      	adds	r3, #79	; 0x4f
    94de:	4642      	mov	r2, r8
    94e0:	4639      	mov	r1, r7
    94e2:	f204 1033 	addw	r0, r4, #307	; 0x133
    94e6:	f7ff fdad 	bl	9044 <smp_f5>
    94ea:	b108      	cbz	r0, 94f0 <compute_and_send_master_dhcheck+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
    94ec:	2008      	movs	r0, #8
    94ee:	e01d      	b.n	952c <compute_and_send_master_dhcheck+0x9a>
		   &smp->chan.chan.conn->le.init_addr,
    94f0:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    94f2:	ae04      	add	r6, sp, #16
		   &smp->chan.chan.conn->le.init_addr,
    94f4:	f852 3ba6 	ldr.w	r3, [r2], #166
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    94f8:	9603      	str	r6, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, e)) {
    94fa:	f103 0156 	add.w	r1, r3, #86	; 0x56
		   &smp->chan.chan.conn->le.init_addr,
    94fe:	334f      	adds	r3, #79	; 0x4f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    9500:	e88d 000c 	stmia.w	sp, {r2, r3}
    9504:	9102      	str	r1, [sp, #8]
    9506:	4628      	mov	r0, r5
    9508:	ab08      	add	r3, sp, #32
    950a:	4642      	mov	r2, r8
    950c:	4639      	mov	r1, r7
    950e:	f7ff fe03 	bl	9118 <smp_f6>
    9512:	4605      	mov	r5, r0
    9514:	2800      	cmp	r0, #0
    9516:	d1e9      	bne.n	94ec <compute_and_send_master_dhcheck+0x5a>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    9518:	210d      	movs	r1, #13
    951a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    951e:	f7ff fcc1 	bl	8ea4 <atomic_set_bit>
	sc_smp_send_dhkey_check(smp, e);
    9522:	4631      	mov	r1, r6
    9524:	4620      	mov	r0, r4
    9526:	f7ff ff9b 	bl	9460 <sc_smp_send_dhkey_check>
	return 0;
    952a:	4628      	mov	r0, r5
}
    952c:	b00c      	add	sp, #48	; 0x30
    952e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009532 <compute_and_check_and_send_slave_dhcheck>:
{
    9532:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9536:	4604      	mov	r4, r0
    9538:	b091      	sub	sp, #68	; 0x44
	memset(r, 0, sizeof(r));
    953a:	2210      	movs	r2, #16
    953c:	2100      	movs	r1, #0
    953e:	a80c      	add	r0, sp, #48	; 0x30
    9540:	f7f7 f968 	bl	814 <memset>
	switch (smp->method) {
    9544:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    9548:	2b03      	cmp	r3, #3
    954a:	d81f      	bhi.n	958c <compute_and_check_and_send_slave_dhcheck+0x5a>
    954c:	e8df f003 	tbb	[pc, r3]
    9550:	08020208 	.word	0x08020208
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    9554:	2204      	movs	r2, #4
    9556:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    955a:	a80c      	add	r0, sp, #48	; 0x30
    955c:	f7f7 f92e 	bl	7bc <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    9560:	6823      	ldr	r3, [r4, #0]
		   smp->tk)) {
    9562:	f104 02e3 	add.w	r2, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    9566:	f104 06d3 	add.w	r6, r4, #211	; 0xd3
    956a:	f104 08c3 	add.w	r8, r4, #195	; 0xc3
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    956e:	f204 1563 	addw	r5, r4, #355	; 0x163
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    9572:	9202      	str	r2, [sp, #8]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    9574:	f103 0256 	add.w	r2, r3, #86	; 0x56
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    9578:	9200      	str	r2, [sp, #0]
    957a:	9501      	str	r5, [sp, #4]
    957c:	334f      	adds	r3, #79	; 0x4f
    957e:	4642      	mov	r2, r8
    9580:	4631      	mov	r1, r6
    9582:	f204 1033 	addw	r0, r4, #307	; 0x133
    9586:	f7ff fd5d 	bl	9044 <smp_f5>
    958a:	b108      	cbz	r0, 9590 <compute_and_check_and_send_slave_dhcheck+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
    958c:	2008      	movs	r0, #8
    958e:	e039      	b.n	9604 <compute_and_check_and_send_slave_dhcheck+0xd2>
		   &smp->chan.chan.conn->le.resp_addr,
    9590:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    9592:	af08      	add	r7, sp, #32
		   &smp->chan.chan.conn->le.resp_addr,
    9594:	f852 3bad 	ldr.w	r3, [r2], #173
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    9598:	9703      	str	r7, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
    959a:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr,
    959e:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    95a0:	e88d 000c 	stmia.w	sp, {r2, r3}
    95a4:	9102      	str	r1, [sp, #8]
    95a6:	ab0c      	add	r3, sp, #48	; 0x30
    95a8:	4632      	mov	r2, r6
    95aa:	4641      	mov	r1, r8
    95ac:	4628      	mov	r0, r5
    95ae:	f7ff fdb3 	bl	9118 <smp_f6>
    95b2:	2800      	cmp	r0, #0
    95b4:	d1ea      	bne.n	958c <compute_and_check_and_send_slave_dhcheck+0x5a>
		   &smp->chan.chan.conn->le.init_addr,
    95b6:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    95b8:	f10d 0910 	add.w	r9, sp, #16
		   &smp->chan.chan.conn->le.init_addr,
    95bc:	f852 3ba6 	ldr.w	r3, [r2], #166
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    95c0:	f8cd 900c 	str.w	r9, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    95c4:	f103 0156 	add.w	r1, r3, #86	; 0x56
		   &smp->chan.chan.conn->le.init_addr,
    95c8:	334f      	adds	r3, #79	; 0x4f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    95ca:	e88d 000c 	stmia.w	sp, {r2, r3}
    95ce:	9102      	str	r1, [sp, #8]
    95d0:	ab0c      	add	r3, sp, #48	; 0x30
    95d2:	4642      	mov	r2, r8
    95d4:	4631      	mov	r1, r6
    95d6:	4628      	mov	r0, r5
    95d8:	f7ff fd9e 	bl	9118 <smp_f6>
    95dc:	2800      	cmp	r0, #0
    95de:	d1d5      	bne.n	958c <compute_and_check_and_send_slave_dhcheck+0x5a>
	if (memcmp(smp->e, re, 16)) {
    95e0:	2210      	movs	r2, #16
    95e2:	4649      	mov	r1, r9
    95e4:	f204 1053 	addw	r0, r4, #339	; 0x153
    95e8:	f7f7 f8bb 	bl	762 <memcmp>
    95ec:	4605      	mov	r5, r0
    95ee:	b960      	cbnz	r0, 960a <compute_and_check_and_send_slave_dhcheck+0xd8>
	sc_smp_send_dhkey_check(smp, e);
    95f0:	4639      	mov	r1, r7
    95f2:	4620      	mov	r0, r4
    95f4:	f7ff ff34 	bl	9460 <sc_smp_send_dhkey_check>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    95f8:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    95fc:	2101      	movs	r1, #1
    95fe:	f7ff fc51 	bl	8ea4 <atomic_set_bit>
	return 0;
    9602:	4628      	mov	r0, r5
}
    9604:	b011      	add	sp, #68	; 0x44
    9606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    960a:	200b      	movs	r0, #11
    960c:	e7fa      	b.n	9604 <compute_and_check_and_send_slave_dhcheck+0xd2>

0000960e <smp_dhkey_check>:
{
    960e:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    9610:	6803      	ldr	r3, [r0, #0]
	struct bt_smp_dhkey_check *req = (void *)buf->data;
    9612:	688f      	ldr	r7, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    9614:	78dd      	ldrb	r5, [r3, #3]
{
    9616:	b08d      	sub	sp, #52	; 0x34
    9618:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    961a:	2d00      	cmp	r5, #0
    961c:	d14c      	bne.n	96b8 <smp_dhkey_check+0xaa>
		memset(r, 0, sizeof(r));
    961e:	2210      	movs	r2, #16
    9620:	4629      	mov	r1, r5
    9622:	a808      	add	r0, sp, #32
    9624:	f7f7 f8f6 	bl	814 <memset>
		switch (smp->method) {
    9628:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    962c:	2b03      	cmp	r3, #3
    962e:	d81e      	bhi.n	966e <smp_dhkey_check+0x60>
    9630:	e8df f003 	tbb	[pc, r3]
    9634:	08020208 	.word	0x08020208
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
    9638:	2204      	movs	r2, #4
    963a:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    963e:	a808      	add	r0, sp, #32
    9640:	f7f7 f8bc 	bl	7bc <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
    9644:	4622      	mov	r2, r4
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    9646:	ae04      	add	r6, sp, #16
			   &smp->chan.chan.conn->le.resp_addr,
    9648:	f852 3bc3 	ldr.w	r3, [r2], #195
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    964c:	9603      	str	r6, [sp, #12]
			   &smp->chan.chan.conn->le.init_addr, e)) {
    964e:	f103 014f 	add.w	r1, r3, #79	; 0x4f
			   &smp->chan.chan.conn->le.resp_addr,
    9652:	3356      	adds	r3, #86	; 0x56
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    9654:	9301      	str	r3, [sp, #4]
    9656:	f104 03ad 	add.w	r3, r4, #173	; 0xad
    965a:	9102      	str	r1, [sp, #8]
    965c:	9300      	str	r3, [sp, #0]
    965e:	f104 01d3 	add.w	r1, r4, #211	; 0xd3
    9662:	ab08      	add	r3, sp, #32
    9664:	f204 1063 	addw	r0, r4, #355	; 0x163
    9668:	f7ff fd56 	bl	9118 <smp_f6>
    966c:	b118      	cbz	r0, 9676 <smp_dhkey_check+0x68>
			return BT_SMP_ERR_UNSPECIFIED;
    966e:	2508      	movs	r5, #8
}
    9670:	4628      	mov	r0, r5
    9672:	b00d      	add	sp, #52	; 0x34
    9674:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (memcmp(e, req->e, 16)) {
    9676:	2210      	movs	r2, #16
    9678:	4639      	mov	r1, r7
    967a:	4630      	mov	r0, r6
    967c:	f7f7 f871 	bl	762 <memcmp>
    9680:	b9c0      	cbnz	r0, 96b4 <smp_dhkey_check+0xa6>
	return min(req->max_key_size, rsp->max_key_size);
    9682:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
    9686:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, 0, 0,
    968a:	429a      	cmp	r2, r3
    968c:	bf94      	ite	ls
    968e:	9202      	strls	r2, [sp, #8]
    9690:	9302      	strhi	r3, [sp, #8]
						smp->tk, enc_size) < 0) {
    9692:	f104 03e3 	add.w	r3, r4, #227	; 0xe3
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, 0, 0,
    9696:	e88d 0009 	stmia.w	sp, {r0, r3}
    969a:	2200      	movs	r2, #0
    969c:	2300      	movs	r3, #0
    969e:	6820      	ldr	r0, [r4, #0]
    96a0:	f7fc fa2a 	bl	5af8 <bt_conn_le_start_encryption>
    96a4:	2800      	cmp	r0, #0
    96a6:	dbe2      	blt.n	966e <smp_dhkey_check+0x60>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    96a8:	2101      	movs	r1, #1
    96aa:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    96ae:	f7ff fbf9 	bl	8ea4 <atomic_set_bit>
			return 0;
    96b2:	e7dd      	b.n	9670 <smp_dhkey_check+0x62>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    96b4:	250b      	movs	r5, #11
    96b6:	e7db      	b.n	9670 <smp_dhkey_check+0x62>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    96b8:	2d01      	cmp	r5, #1
    96ba:	d11d      	bne.n	96f8 <smp_dhkey_check+0xea>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    96bc:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    96c0:	f100 06a0 	add.w	r6, r0, #160	; 0xa0
    96c4:	e856 3f00 	ldrex	r3, [r6]
    96c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    96cc:	e846 3200 	strex	r2, r3, [r6]
    96d0:	2a00      	cmp	r2, #0
    96d2:	d1f7      	bne.n	96c4 <smp_dhkey_check+0xb6>
    96d4:	f3bf 8f5b 	dmb	ish
		memcpy(smp->e, req->e, sizeof(smp->e));
    96d8:	2210      	movs	r2, #16
    96da:	4639      	mov	r1, r7
    96dc:	f204 1053 	addw	r0, r4, #339	; 0x153
    96e0:	f7f7 f86c 	bl	7bc <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    96e4:	2107      	movs	r1, #7
    96e6:	4630      	mov	r0, r6
    96e8:	f7ff fbcf 	bl	8e8a <atomic_test_bit>
    96ec:	4605      	mov	r5, r0
    96ee:	b128      	cbz	r0, 96fc <smp_dhkey_check+0xee>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    96f0:	2108      	movs	r1, #8
    96f2:	4630      	mov	r0, r6
    96f4:	f7ff fbd6 	bl	8ea4 <atomic_set_bit>
	return 0;
    96f8:	2500      	movs	r5, #0
    96fa:	e7b9      	b.n	9670 <smp_dhkey_check+0x62>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    96fc:	2109      	movs	r1, #9
    96fe:	4630      	mov	r0, r6
    9700:	f7ff fbc3 	bl	8e8a <atomic_test_bit>
    9704:	b110      	cbz	r0, 970c <smp_dhkey_check+0xfe>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    9706:	2108      	movs	r1, #8
    9708:	4630      	mov	r0, r6
    970a:	e7d0      	b.n	96ae <smp_dhkey_check+0xa0>
		return compute_and_check_and_send_slave_dhcheck(smp);
    970c:	4620      	mov	r0, r4
    970e:	f7ff ff10 	bl	9532 <compute_and_check_and_send_slave_dhcheck>
    9712:	4605      	mov	r5, r0
    9714:	e7ac      	b.n	9670 <smp_dhkey_check+0x62>
	...

00009718 <sc_send_public_key>:
{
    9718:	b570      	push	{r4, r5, r6, lr}
    971a:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PUBLIC_KEY,
    971c:	200c      	movs	r0, #12
    971e:	f7ff fe5b 	bl	93d8 <smp_create_pdu.isra.4>
	if (!req_buf) {
    9722:	4604      	mov	r4, r0
    9724:	b1a0      	cbz	r0, 9750 <sc_send_public_key+0x38>
	req = net_buf_add(req_buf, sizeof(*req));
    9726:	2140      	movs	r1, #64	; 0x40
    9728:	3008      	adds	r0, #8
    972a:	f00e fc13 	bl	17f54 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    972e:	2220      	movs	r2, #32
    9730:	4908      	ldr	r1, [pc, #32]	; (9754 <sc_send_public_key+0x3c>)
	req = net_buf_add(req_buf, sizeof(*req));
    9732:	4606      	mov	r6, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    9734:	f7f7 f842 	bl	7bc <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    9738:	2220      	movs	r2, #32
    973a:	18b0      	adds	r0, r6, r2
    973c:	4906      	ldr	r1, [pc, #24]	; (9758 <sc_send_public_key+0x40>)
    973e:	f7f7 f83d 	bl	7bc <memcpy>
	smp_send(smp, req_buf, NULL);
    9742:	4628      	mov	r0, r5
    9744:	2200      	movs	r2, #0
    9746:	4621      	mov	r1, r4
    9748:	f7ff fe76 	bl	9438 <smp_send>
	return 0;
    974c:	2000      	movs	r0, #0
    974e:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    9750:	2008      	movs	r0, #8
}
    9752:	bd70      	pop	{r4, r5, r6, pc}
    9754:	200008e9 	.word	0x200008e9
    9758:	20000909 	.word	0x20000909

0000975c <send_pairing_rsp>:
{
    975c:	b538      	push	{r3, r4, r5, lr}
    975e:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
    9760:	2002      	movs	r0, #2
    9762:	f7ff fe39 	bl	93d8 <smp_create_pdu.isra.4>
	if (!rsp_buf) {
    9766:	4604      	mov	r4, r0
    9768:	b178      	cbz	r0, 978a <send_pairing_rsp+0x2e>
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
    976a:	2106      	movs	r1, #6
    976c:	3008      	adds	r0, #8
    976e:	f00e fbf1 	bl	17f54 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
    9772:	f105 01ad 	add.w	r1, r5, #173	; 0xad
    9776:	2206      	movs	r2, #6
    9778:	f7f7 f820 	bl	7bc <memcpy>
	smp_send(smp, rsp_buf, NULL);
    977c:	4628      	mov	r0, r5
    977e:	2200      	movs	r2, #0
    9780:	4621      	mov	r1, r4
    9782:	f7ff fe59 	bl	9438 <smp_send>
	return 0;
    9786:	2000      	movs	r0, #0
    9788:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    978a:	2008      	movs	r0, #8
}
    978c:	bd38      	pop	{r3, r4, r5, pc}
	...

00009790 <smp_pairing_req>:
{
    9790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    9792:	688f      	ldr	r7, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    9794:	78fb      	ldrb	r3, [r7, #3]
    9796:	3b07      	subs	r3, #7
    9798:	2b09      	cmp	r3, #9
{
    979a:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    979c:	f200 80c3 	bhi.w	9926 <smp_pairing_req+0x196>
	ret = smp_init(smp);
    97a0:	f7ff fb94 	bl	8ecc <smp_init>
	if (ret) {
    97a4:	4605      	mov	r5, r0
    97a6:	b110      	cbz	r0, 97ae <smp_pairing_req+0x1e>
		return ret;
    97a8:	b2c5      	uxtb	r5, r0
}
    97aa:	4628      	mov	r0, r5
    97ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    97ae:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
    97b0:	2206      	movs	r2, #6
    97b2:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    97b4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	memcpy(smp->preq + 1, req, sizeof(*req));
    97b8:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    97bc:	f7f6 fffe 	bl	7bc <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    97c0:	2302      	movs	r3, #2
    97c2:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
	rsp->auth_req = get_auth(req->auth_req);
    97c6:	78b8      	ldrb	r0, [r7, #2]
    97c8:	f7ff fb3a 	bl	8e40 <get_auth>
    97cc:	f884 00af 	strb.w	r0, [r4, #175]	; 0xaf
    97d0:	4606      	mov	r6, r0
	rsp->io_capability = get_io_capa();
    97d2:	f7ff fb0f 	bl	8df4 <get_io_capa>
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    97d6:	2310      	movs	r3, #16
	rsp->io_capability = get_io_capa();
    97d8:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    97dc:	f884 50ae 	strb.w	r5, [r4, #174]	; 0xae
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    97e0:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    97e4:	793b      	ldrb	r3, [r7, #4]
    97e6:	f003 0307 	and.w	r3, r3, #7
    97ea:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    97ee:	797b      	ldrb	r3, [r7, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    97f0:	f016 0f08 	tst.w	r6, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    97f4:	f003 0305 	and.w	r3, r3, #5
    97f8:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
    97fc:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    9800:	d012      	beq.n	9828 <smp_pairing_req+0x98>
    9802:	78bb      	ldrb	r3, [r7, #2]
    9804:	071d      	lsls	r5, r3, #28
    9806:	d50f      	bpl.n	9828 <smp_pairing_req+0x98>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    9808:	2105      	movs	r1, #5
    980a:	4630      	mov	r0, r6
    980c:	f7ff fb4a 	bl	8ea4 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    9810:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    9814:	f003 0306 	and.w	r3, r3, #6
    9818:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
		rsp->resp_key_dist &= SEND_KEYS_SC;
    981c:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    9820:	f003 0304 	and.w	r3, r3, #4
    9824:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    9828:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    982c:	0698      	lsls	r0, r3, #26
    982e:	d506      	bpl.n	983e <smp_pairing_req+0xae>
    9830:	78bb      	ldrb	r3, [r7, #2]
    9832:	0699      	lsls	r1, r3, #26
    9834:	d503      	bpl.n	983e <smp_pairing_req+0xae>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    9836:	2111      	movs	r1, #17
    9838:	4630      	mov	r0, r6
    983a:	f7ff fb33 	bl	8ea4 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    983e:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    9842:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist = rsp->init_key_dist;
    9846:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    984a:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    984e:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    9852:	07da      	lsls	r2, r3, #31
    9854:	d506      	bpl.n	9864 <smp_pairing_req+0xd4>
    9856:	78bb      	ldrb	r3, [r7, #2]
    9858:	07db      	lsls	r3, r3, #31
    985a:	d503      	bpl.n	9864 <smp_pairing_req+0xd4>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    985c:	210a      	movs	r1, #10
    985e:	4630      	mov	r0, r6
    9860:	f7ff fb20 	bl	8ea4 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    9864:	2103      	movs	r1, #3
    9866:	4630      	mov	r0, r6
    9868:	f7ff fb1c 	bl	8ea4 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    986c:	2105      	movs	r1, #5
    986e:	4630      	mov	r0, r6
    9870:	f7ff fb0b 	bl	8e8a <atomic_test_bit>
    9874:	783f      	ldrb	r7, [r7, #0]
    9876:	bb58      	cbnz	r0, 98d0 <smp_pairing_req+0x140>
	smp->method = legacy_get_pair_method(smp, remote_io);
    9878:	4639      	mov	r1, r7
    987a:	4620      	mov	r0, r4
    987c:	f7ff fd6c 	bl	9358 <legacy_get_pair_method>
    9880:	4605      	mov	r5, r0
    9882:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    9886:	b990      	cbnz	r0, 98ae <smp_pairing_req+0x11e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    9888:	210c      	movs	r1, #12
    988a:	4630      	mov	r0, r6
    988c:	f7ff fafd 	bl	8e8a <atomic_test_bit>
	if (smp->method == JUST_WORKS &&
    9890:	b968      	cbnz	r0, 98ae <smp_pairing_req+0x11e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    9892:	4f26      	ldr	r7, [pc, #152]	; (992c <smp_pairing_req+0x19c>)
    9894:	683b      	ldr	r3, [r7, #0]
    9896:	b153      	cbz	r3, 98ae <smp_pairing_req+0x11e>
	    bt_auth && bt_auth->pairing_confirm) {
    9898:	691b      	ldr	r3, [r3, #16]
    989a:	b143      	cbz	r3, 98ae <smp_pairing_req+0x11e>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    989c:	4630      	mov	r0, r6
    989e:	2109      	movs	r1, #9
    98a0:	f7ff fb00 	bl	8ea4 <atomic_set_bit>
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    98a4:	683b      	ldr	r3, [r7, #0]
    98a6:	6820      	ldr	r0, [r4, #0]
    98a8:	691b      	ldr	r3, [r3, #16]
    98aa:	4798      	blx	r3
			return 0;
    98ac:	e77d      	b.n	97aa <smp_pairing_req+0x1a>
	ret = send_pairing_rsp(smp);
    98ae:	4620      	mov	r0, r4
    98b0:	f7ff ff54 	bl	975c <send_pairing_rsp>
	if (ret) {
    98b4:	4605      	mov	r5, r0
    98b6:	2800      	cmp	r0, #0
    98b8:	f47f af77 	bne.w	97aa <smp_pairing_req+0x1a>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    98bc:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    98c0:	2103      	movs	r1, #3
    98c2:	f7ff faef 	bl	8ea4 <atomic_set_bit>
	return legacy_request_tk(smp);
    98c6:	4620      	mov	r0, r4
}
    98c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return legacy_request_tk(smp);
    98cc:	f7ff bcfc 	b.w	92c8 <legacy_request_tk>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    98d0:	2f04      	cmp	r7, #4
    98d2:	d826      	bhi.n	9922 <smp_pairing_req+0x192>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    98d4:	f894 50a8 	ldrb.w	r5, [r4, #168]	; 0xa8
    98d8:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    98dc:	431d      	orrs	r5, r3
    98de:	f015 0504 	ands.w	r5, r5, #4
    98e2:	d006      	beq.n	98f2 <smp_pairing_req+0x162>
	return gen_method_sc[remote_io][get_io_capa()];
    98e4:	f7ff fa86 	bl	8df4 <get_io_capa>
    98e8:	4911      	ldr	r1, [pc, #68]	; (9930 <smp_pairing_req+0x1a0>)
    98ea:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    98ee:	440f      	add	r7, r1
    98f0:	5c3d      	ldrb	r5, [r7, r0]
	smp->method = get_pair_method(smp, req->io_capability);
    98f2:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
	if (smp->method == JUST_WORKS) {
    98f6:	b955      	cbnz	r5, 990e <smp_pairing_req+0x17e>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    98f8:	210c      	movs	r1, #12
    98fa:	4630      	mov	r0, r6
    98fc:	f7ff fac5 	bl	8e8a <atomic_test_bit>
    9900:	b928      	cbnz	r0, 990e <smp_pairing_req+0x17e>
    9902:	4f0a      	ldr	r7, [pc, #40]	; (992c <smp_pairing_req+0x19c>)
    9904:	683b      	ldr	r3, [r7, #0]
    9906:	b113      	cbz	r3, 990e <smp_pairing_req+0x17e>
		    bt_auth && bt_auth->pairing_confirm) {
    9908:	691b      	ldr	r3, [r3, #16]
    990a:	2b00      	cmp	r3, #0
    990c:	d1c6      	bne.n	989c <smp_pairing_req+0x10c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    990e:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    9912:	210c      	movs	r1, #12
    9914:	f7ff fac6 	bl	8ea4 <atomic_set_bit>
	return send_pairing_rsp(smp);
    9918:	4620      	mov	r0, r4
}
    991a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return send_pairing_rsp(smp);
    991e:	f7ff bf1d 	b.w	975c <send_pairing_rsp>
		return JUST_WORKS;
    9922:	2500      	movs	r5, #0
    9924:	e7e5      	b.n	98f2 <smp_pairing_req+0x162>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    9926:	2506      	movs	r5, #6
    9928:	e73f      	b.n	97aa <smp_pairing_req+0x1a>
    992a:	bf00      	nop
    992c:	200041b8 	.word	0x200041b8
    9930:	00022709 	.word	0x00022709

00009934 <smp_send_pairing_random>:
{
    9934:	b538      	push	{r3, r4, r5, lr}
    9936:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
    9938:	2004      	movs	r0, #4
    993a:	f7ff fd4d 	bl	93d8 <smp_create_pdu.isra.4>
	if (!rsp_buf) {
    993e:	4604      	mov	r4, r0
    9940:	b178      	cbz	r0, 9962 <smp_send_pairing_random+0x2e>
	req = net_buf_add(rsp_buf, sizeof(*req));
    9942:	2110      	movs	r1, #16
    9944:	3008      	adds	r0, #8
    9946:	f00e fb05 	bl	17f54 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
    994a:	f105 01c3 	add.w	r1, r5, #195	; 0xc3
    994e:	2210      	movs	r2, #16
    9950:	f7f6 ff34 	bl	7bc <memcpy>
	smp_send(smp, rsp_buf, NULL);
    9954:	4628      	mov	r0, r5
    9956:	2200      	movs	r2, #0
    9958:	4621      	mov	r1, r4
    995a:	f7ff fd6d 	bl	9438 <smp_send>
	return 0;
    995e:	2000      	movs	r0, #0
    9960:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    9962:	2008      	movs	r0, #8
}
    9964:	bd38      	pop	{r3, r4, r5, pc}
	...

00009968 <bt_smp_distribute_keys>:
{
    9968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_keys *keys = conn->le.keys;
    996c:	6803      	ldr	r3, [r0, #0]
    996e:	6f1e      	ldr	r6, [r3, #112]	; 0x70
{
    9970:	b088      	sub	sp, #32
    9972:	4604      	mov	r4, r0
	if (!keys) {
    9974:	2e00      	cmp	r6, #0
    9976:	f000 8091 	beq.w	9a9c <bt_smp_distribute_keys+0x134>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    997a:	f100 07a0 	add.w	r7, r0, #160	; 0xa0
    997e:	2105      	movs	r1, #5
    9980:	4638      	mov	r0, r7
    9982:	f7ff fa82 	bl	8e8a <atomic_test_bit>
    9986:	4681      	mov	r9, r0
    9988:	2800      	cmp	r0, #0
    998a:	d160      	bne.n	9a4e <bt_smp_distribute_keys+0xe6>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    998c:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    9990:	07da      	lsls	r2, r3, #31
    9992:	d55c      	bpl.n	9a4e <bt_smp_distribute_keys+0xe6>
	struct bt_keys *keys = conn->le.keys;
    9994:	6823      	ldr	r3, [r4, #0]
		bt_rand(key, sizeof(key));
    9996:	2110      	movs	r1, #16
    9998:	eb0d 0001 	add.w	r0, sp, r1
	struct bt_keys *keys = conn->le.keys;
    999c:	6f1d      	ldr	r5, [r3, #112]	; 0x70
		bt_rand(key, sizeof(key));
    999e:	f002 f9df 	bl	bd60 <bt_rand>
		bt_rand(&rand, sizeof(rand));
    99a2:	2108      	movs	r1, #8
    99a4:	eb0d 0001 	add.w	r0, sp, r1
    99a8:	f002 f9da 	bl	bd60 <bt_rand>
		bt_rand(&ediv, sizeof(ediv));
    99ac:	2102      	movs	r1, #2
    99ae:	f10d 0006 	add.w	r0, sp, #6
    99b2:	f002 f9d5 	bl	bd60 <bt_rand>
		buf = smp_create_pdu(conn, BT_SMP_CMD_ENCRYPT_INFO,
    99b6:	2006      	movs	r0, #6
    99b8:	f7ff fd0e 	bl	93d8 <smp_create_pdu.isra.4>
		if (!buf) {
    99bc:	4680      	mov	r8, r0
    99be:	2800      	cmp	r0, #0
    99c0:	d045      	beq.n	9a4e <bt_smp_distribute_keys+0xe6>
		info = net_buf_add(buf, sizeof(*info));
    99c2:	2110      	movs	r1, #16
    99c4:	3008      	adds	r0, #8
    99c6:	f00e fac5 	bl	17f54 <net_buf_simple_add>
		memcpy(info->ltk, key, keys->enc_size);
    99ca:	79ea      	ldrb	r2, [r5, #7]
    99cc:	a904      	add	r1, sp, #16
		info = net_buf_add(buf, sizeof(*info));
    99ce:	4682      	mov	sl, r0
		memcpy(info->ltk, key, keys->enc_size);
    99d0:	f7f6 fef4 	bl	7bc <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    99d4:	79e8      	ldrb	r0, [r5, #7]
    99d6:	280f      	cmp	r0, #15
    99d8:	d805      	bhi.n	99e6 <bt_smp_distribute_keys+0x7e>
			memset(info->ltk + keys->enc_size, 0,
    99da:	f1c0 0210 	rsb	r2, r0, #16
    99de:	4649      	mov	r1, r9
    99e0:	4450      	add	r0, sl
    99e2:	f7f6 ff17 	bl	814 <memset>
		smp_send(smp, buf, NULL);
    99e6:	4641      	mov	r1, r8
    99e8:	2200      	movs	r2, #0
    99ea:	4620      	mov	r0, r4
    99ec:	f7ff fd24 	bl	9438 <smp_send>
		buf = smp_create_pdu(conn, BT_SMP_CMD_MASTER_IDENT,
    99f0:	2007      	movs	r0, #7
    99f2:	f7ff fcf1 	bl	93d8 <smp_create_pdu.isra.4>
		if (!buf) {
    99f6:	4680      	mov	r8, r0
    99f8:	b348      	cbz	r0, 9a4e <bt_smp_distribute_keys+0xe6>
		ident = net_buf_add(buf, sizeof(*ident));
    99fa:	210a      	movs	r1, #10
    99fc:	3008      	adds	r0, #8
    99fe:	f00e faa9 	bl	17f54 <net_buf_simple_add>
		ident->rand = rand;
    9a02:	9b02      	ldr	r3, [sp, #8]
    9a04:	f8c0 3002 	str.w	r3, [r0, #2]
    9a08:	9b03      	ldr	r3, [sp, #12]
    9a0a:	f8c0 3006 	str.w	r3, [r0, #6]
		ident->ediv = ediv;
    9a0e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9a12:	8003      	strh	r3, [r0, #0]
		smp_send(smp, buf, ident_sent);
    9a14:	4641      	mov	r1, r8
    9a16:	4620      	mov	r0, r4
    9a18:	4a22      	ldr	r2, [pc, #136]	; (9aa4 <bt_smp_distribute_keys+0x13c>)
    9a1a:	f7ff fd0d 	bl	9438 <smp_send>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    9a1e:	210a      	movs	r1, #10
    9a20:	4638      	mov	r0, r7
    9a22:	f7ff fa32 	bl	8e8a <atomic_test_bit>
    9a26:	b190      	cbz	r0, 9a4e <bt_smp_distribute_keys+0xe6>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    9a28:	2101      	movs	r1, #1
    9a2a:	4628      	mov	r0, r5
    9a2c:	f001 f94a 	bl	acc4 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, key,
    9a30:	2210      	movs	r2, #16
    9a32:	eb0d 0102 	add.w	r1, sp, r2
    9a36:	f105 007a 	add.w	r0, r5, #122	; 0x7a
    9a3a:	f7f6 febf 	bl	7bc <memcpy>
			keys->slave_ltk.rand = rand;
    9a3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    9a42:	e9c5 231c 	strd	r2, r3, [r5, #112]	; 0x70
			keys->slave_ltk.ediv = ediv;
    9a46:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9a4a:	f8a5 3078 	strh.w	r3, [r5, #120]	; 0x78
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
    9a4e:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    9a52:	075b      	lsls	r3, r3, #29
    9a54:	d522      	bpl.n	9a9c <bt_smp_distribute_keys+0x134>
		buf = smp_create_pdu(conn, BT_SMP_CMD_SIGNING_INFO,
    9a56:	200a      	movs	r0, #10
    9a58:	f7ff fcbe 	bl	93d8 <smp_create_pdu.isra.4>
		if (!buf) {
    9a5c:	4605      	mov	r5, r0
    9a5e:	b1e8      	cbz	r0, 9a9c <bt_smp_distribute_keys+0x134>
		info = net_buf_add(buf, sizeof(*info));
    9a60:	2110      	movs	r1, #16
    9a62:	3008      	adds	r0, #8
    9a64:	f00e fa76 	bl	17f54 <net_buf_simple_add>
		bt_rand(info->csrk, sizeof(info->csrk));
    9a68:	2110      	movs	r1, #16
		info = net_buf_add(buf, sizeof(*info));
    9a6a:	4680      	mov	r8, r0
		bt_rand(info->csrk, sizeof(info->csrk));
    9a6c:	f002 f978 	bl	bd60 <bt_rand>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    9a70:	210a      	movs	r1, #10
    9a72:	4638      	mov	r0, r7
    9a74:	f7ff fa09 	bl	8e8a <atomic_test_bit>
    9a78:	b158      	cbz	r0, 9a92 <bt_smp_distribute_keys+0x12a>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
    9a7a:	2108      	movs	r1, #8
    9a7c:	4630      	mov	r0, r6
    9a7e:	f001 f921 	bl	acc4 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
    9a82:	2210      	movs	r2, #16
    9a84:	4641      	mov	r1, r8
    9a86:	f106 0048 	add.w	r0, r6, #72	; 0x48
    9a8a:	f7f6 fe97 	bl	7bc <memcpy>
			keys->local_csrk.cnt = 0;
    9a8e:	2300      	movs	r3, #0
    9a90:	65b3      	str	r3, [r6, #88]	; 0x58
		smp_send(smp, buf, sign_info_sent);
    9a92:	4a05      	ldr	r2, [pc, #20]	; (9aa8 <bt_smp_distribute_keys+0x140>)
    9a94:	4629      	mov	r1, r5
    9a96:	4620      	mov	r0, r4
    9a98:	f7ff fcce 	bl	9438 <smp_send>
}
    9a9c:	b008      	add	sp, #32
    9a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9aa2:	bf00      	nop
    9aa4:	00009edd 	.word	0x00009edd
    9aa8:	00009eb3 	.word	0x00009eb3

00009aac <atomic_test_and_clear_bit>:
{
    9aac:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    9aae:	f001 021f 	and.w	r2, r1, #31
    9ab2:	2301      	movs	r3, #1
    9ab4:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9ab6:	0949      	lsrs	r1, r1, #5
    9ab8:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9aba:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    9abe:	f3bf 8f5b 	dmb	ish
    9ac2:	e850 2f00 	ldrex	r2, [r0]
    9ac6:	ea02 0104 	and.w	r1, r2, r4
    9aca:	e840 1e00 	strex	lr, r1, [r0]
    9ace:	f1be 0f00 	cmp.w	lr, #0
    9ad2:	d1f6      	bne.n	9ac2 <atomic_test_and_clear_bit+0x16>
    9ad4:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
    9ad8:	421a      	tst	r2, r3
}
    9ada:	bf14      	ite	ne
    9adc:	2001      	movne	r0, #1
    9ade:	2000      	moveq	r0, #0
    9ae0:	bd10      	pop	{r4, pc}

00009ae2 <smp_reset>:
{
    9ae2:	b538      	push	{r3, r4, r5, lr}
    9ae4:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    9ae6:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
    9ae8:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    9aec:	f017 fb3c 	bl	21168 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
    9af0:	2300      	movs	r3, #0
    9af2:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
	atomic_set(&smp->allowed_cmds, 0);
    9af6:	f104 009c 	add.w	r0, r4, #156	; 0x9c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9afa:	f3bf 8f5b 	dmb	ish
    9afe:	e850 2f00 	ldrex	r2, [r0]
    9b02:	e840 3100 	strex	r1, r3, [r0]
    9b06:	2900      	cmp	r1, #0
    9b08:	d1f9      	bne.n	9afe <smp_reset+0x1c>
    9b0a:	f3bf 8f5b 	dmb	ish
    9b0e:	f3bf 8f5b 	dmb	ish
    9b12:	34a0      	adds	r4, #160	; 0xa0
    9b14:	e854 2f00 	ldrex	r2, [r4]
    9b18:	e844 3100 	strex	r1, r3, [r4]
    9b1c:	2900      	cmp	r1, #0
    9b1e:	d1f9      	bne.n	9b14 <smp_reset+0x32>
    9b20:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
    9b24:	7a2b      	ldrb	r3, [r5, #8]
    9b26:	7a6a      	ldrb	r2, [r5, #9]
    9b28:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
    9b2a:	bf18      	it	ne
    9b2c:	726b      	strbne	r3, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9b2e:	78eb      	ldrb	r3, [r5, #3]
    9b30:	b923      	cbnz	r3, 9b3c <smp_reset+0x5a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    9b32:	210b      	movs	r1, #11
}
    9b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    9b38:	f7ff b9b4 	b.w	8ea4 <atomic_set_bit>
    9b3c:	2101      	movs	r1, #1
    9b3e:	e7f9      	b.n	9b34 <smp_reset+0x52>

00009b40 <smp_error>:
{
    9b40:	b570      	push	{r4, r5, r6, lr}
    9b42:	4605      	mov	r5, r0
    9b44:	460e      	mov	r6, r1
	smp_reset(smp);
    9b46:	f7ff ffcc 	bl	9ae2 <smp_reset>
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PAIRING_FAIL,
    9b4a:	2005      	movs	r0, #5
    9b4c:	f7ff fc44 	bl	93d8 <smp_create_pdu.isra.4>
	if (!buf) {
    9b50:	4604      	mov	r4, r0
    9b52:	b160      	cbz	r0, 9b6e <smp_error+0x2e>
	rsp = net_buf_add(buf, sizeof(*rsp));
    9b54:	2101      	movs	r1, #1
    9b56:	3008      	adds	r0, #8
    9b58:	f00e f9fc 	bl	17f54 <net_buf_simple_add>
	rsp->reason = reason;
    9b5c:	7006      	strb	r6, [r0, #0]
    9b5e:	6828      	ldr	r0, [r5, #0]
    9b60:	2300      	movs	r3, #0
    9b62:	4622      	mov	r2, r4
    9b64:	2106      	movs	r1, #6
    9b66:	f7fc ff02 	bl	696e <bt_l2cap_send_cb>
	return 0;
    9b6a:	2000      	movs	r0, #0
    9b6c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    9b6e:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    9b72:	bd70      	pop	{r4, r5, r6, pc}

00009b74 <bt_smp_dhkey_ready>:
{
    9b74:	b538      	push	{r3, r4, r5, lr}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    9b76:	4c1d      	ldr	r4, [pc, #116]	; (9bec <bt_smp_dhkey_ready+0x78>)
{
    9b78:	4605      	mov	r5, r0
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    9b7a:	2107      	movs	r1, #7
    9b7c:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    9b80:	f7ff ff94 	bl	9aac <atomic_test_and_clear_bit>
    9b84:	b370      	cbz	r0, 9be4 <bt_smp_dhkey_ready+0x70>
	if (!dhkey) {
    9b86:	b92d      	cbnz	r5, 9b94 <bt_smp_dhkey_ready+0x20>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    9b88:	210b      	movs	r1, #11
			smp_error(smp, err);
    9b8a:	4620      	mov	r0, r4
}
    9b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			smp_error(smp, err);
    9b90:	f7ff bfd6 	b.w	9b40 <smp_error>
	memcpy(smp->dhkey, dhkey, 32);
    9b94:	4629      	mov	r1, r5
    9b96:	2220      	movs	r2, #32
    9b98:	f204 1033 	addw	r0, r4, #307	; 0x133
    9b9c:	f7f6 fe0e 	bl	7bc <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    9ba0:	2109      	movs	r1, #9
    9ba2:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    9ba6:	f7ff f970 	bl	8e8a <atomic_test_bit>
    9baa:	b128      	cbz	r0, 9bb8 <bt_smp_dhkey_ready+0x44>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    9bac:	2108      	movs	r1, #8
    9bae:	4810      	ldr	r0, [pc, #64]	; (9bf0 <bt_smp_dhkey_ready+0x7c>)
}
    9bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    9bb4:	f7ff b976 	b.w	8ea4 <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    9bb8:	210d      	movs	r1, #13
    9bba:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    9bbe:	f7ff f964 	bl	8e8a <atomic_test_bit>
    9bc2:	2800      	cmp	r0, #0
    9bc4:	d1f2      	bne.n	9bac <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    9bc6:	2108      	movs	r1, #8
    9bc8:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    9bcc:	f7ff f95d 	bl	8e8a <atomic_test_bit>
    9bd0:	b140      	cbz	r0, 9be4 <bt_smp_dhkey_ready+0x70>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    9bd2:	6823      	ldr	r3, [r4, #0]
    9bd4:	78db      	ldrb	r3, [r3, #3]
			err = compute_and_send_master_dhcheck(smp);
    9bd6:	4620      	mov	r0, r4
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    9bd8:	b92b      	cbnz	r3, 9be6 <bt_smp_dhkey_ready+0x72>
			err = compute_and_send_master_dhcheck(smp);
    9bda:	f7ff fc5a 	bl	9492 <compute_and_send_master_dhcheck>
		if (err) {
    9bde:	4601      	mov	r1, r0
    9be0:	2800      	cmp	r0, #0
    9be2:	d1d2      	bne.n	9b8a <bt_smp_dhkey_ready+0x16>
    9be4:	bd38      	pop	{r3, r4, r5, pc}
		err = compute_and_check_and_send_slave_dhcheck(smp);
    9be6:	f7ff fca4 	bl	9532 <compute_and_check_and_send_slave_dhcheck>
    9bea:	e7f8      	b.n	9bde <bt_smp_dhkey_ready+0x6a>
    9bec:	20000744 	.word	0x20000744
    9bf0:	200007e4 	.word	0x200007e4

00009bf4 <bt_smp_recv>:
{
    9bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    9bf6:	898b      	ldrh	r3, [r1, #12]
{
    9bf8:	4604      	mov	r4, r0
    9bfa:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    9bfc:	b393      	cbz	r3, 9c64 <bt_smp_recv+0x70>
	struct bt_smp_hdr *hdr = (void *)buf->data;
    9bfe:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    9c00:	2101      	movs	r1, #1
	struct bt_smp_hdr *hdr = (void *)buf->data;
    9c02:	f850 7f08 	ldr.w	r7, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    9c06:	f00e f9f5 	bl	17ff4 <net_buf_simple_pull>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    9c0a:	2104      	movs	r1, #4
    9c0c:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    9c10:	f7ff f93b 	bl	8e8a <atomic_test_bit>
    9c14:	bb30      	cbnz	r0, 9c64 <bt_smp_recv+0x70>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    9c16:	7839      	ldrb	r1, [r7, #0]
    9c18:	290d      	cmp	r1, #13
    9c1a:	d803      	bhi.n	9c24 <bt_smp_recv+0x30>
    9c1c:	4e12      	ldr	r6, [pc, #72]	; (9c68 <bt_smp_recv+0x74>)
    9c1e:	f856 3031 	ldr.w	r3, [r6, r1, lsl #3]
    9c22:	b92b      	cbnz	r3, 9c30 <bt_smp_recv+0x3c>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    9c24:	2107      	movs	r1, #7
		smp_error(smp, err);
    9c26:	4620      	mov	r0, r4
}
    9c28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, err);
    9c2c:	f7ff bf88 	b.w	9b40 <smp_error>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    9c30:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    9c34:	f7ff ff3a 	bl	9aac <atomic_test_and_clear_bit>
    9c38:	783b      	ldrb	r3, [r7, #0]
    9c3a:	b918      	cbnz	r0, 9c44 <bt_smp_recv+0x50>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    9c3c:	2b05      	cmp	r3, #5
    9c3e:	d011      	beq.n	9c64 <bt_smp_recv+0x70>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    9c40:	2108      	movs	r1, #8
    9c42:	e7f0      	b.n	9c26 <bt_smp_recv+0x32>
	if (buf->len != handlers[hdr->code].expect_len) {
    9c44:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
    9c48:	89a9      	ldrh	r1, [r5, #12]
    9c4a:	7912      	ldrb	r2, [r2, #4]
    9c4c:	4291      	cmp	r1, r2
    9c4e:	d001      	beq.n	9c54 <bt_smp_recv+0x60>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    9c50:	210a      	movs	r1, #10
    9c52:	e7e8      	b.n	9c26 <bt_smp_recv+0x32>
	err = handlers[hdr->code].func(smp, buf);
    9c54:	4629      	mov	r1, r5
    9c56:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
    9c5a:	4620      	mov	r0, r4
    9c5c:	4798      	blx	r3
	if (err) {
    9c5e:	4601      	mov	r1, r0
    9c60:	2800      	cmp	r0, #0
    9c62:	d1e0      	bne.n	9c26 <bt_smp_recv+0x32>
    9c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9c66:	bf00      	nop
    9c68:	00022724 	.word	0x00022724

00009c6c <smp_pairing_failed>:
{
    9c6c:	b510      	push	{r4, lr}
	switch (smp->method) {
    9c6e:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
    9c72:	3b01      	subs	r3, #1
    9c74:	2b02      	cmp	r3, #2
{
    9c76:	4604      	mov	r4, r0
	switch (smp->method) {
    9c78:	d804      	bhi.n	9c84 <smp_pairing_failed+0x18>
		bt_auth->cancel(conn);
    9c7a:	4b0a      	ldr	r3, [pc, #40]	; (9ca4 <smp_pairing_failed+0x38>)
    9c7c:	6800      	ldr	r0, [r0, #0]
    9c7e:	681b      	ldr	r3, [r3, #0]
    9c80:	68db      	ldr	r3, [r3, #12]
    9c82:	4798      	blx	r3
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    9c84:	2102      	movs	r1, #2
    9c86:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    9c8a:	f7ff f8fe 	bl	8e8a <atomic_test_bit>
    9c8e:	b120      	cbz	r0, 9c9a <smp_pairing_failed+0x2e>
	    smp->chan.chan.conn->le.keys) {
    9c90:	6823      	ldr	r3, [r4, #0]
    9c92:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    9c94:	b108      	cbz	r0, 9c9a <smp_pairing_failed+0x2e>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    9c96:	f000 ff7f 	bl	ab98 <bt_keys_clear>
	smp_reset(smp);
    9c9a:	4620      	mov	r0, r4
    9c9c:	f7ff ff21 	bl	9ae2 <smp_reset>
}
    9ca0:	2000      	movs	r0, #0
    9ca2:	bd10      	pop	{r4, pc}
    9ca4:	200041b8 	.word	0x200041b8

00009ca8 <smp_timeout>:
{
    9ca8:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    9caa:	f1a0 04dc 	sub.w	r4, r0, #220	; 0xdc
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    9cae:	f5a0 75be 	sub.w	r5, r0, #380	; 0x17c
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    9cb2:	2102      	movs	r1, #2
    9cb4:	4620      	mov	r0, r4
    9cb6:	f7ff f8e8 	bl	8e8a <atomic_test_bit>
    9cba:	b120      	cbz	r0, 9cc6 <smp_timeout+0x1e>
	    smp->chan.chan.conn->le.keys) {
    9cbc:	682b      	ldr	r3, [r5, #0]
    9cbe:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    9cc0:	b108      	cbz	r0, 9cc6 <smp_timeout+0x1e>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    9cc2:	f000 ff69 	bl	ab98 <bt_keys_clear>
	smp_reset(smp);
    9cc6:	4628      	mov	r0, r5
    9cc8:	f7ff ff0b 	bl	9ae2 <smp_reset>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    9ccc:	4620      	mov	r0, r4
    9cce:	2104      	movs	r1, #4
}
    9cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    9cd4:	f7ff b8e6 	b.w	8ea4 <atomic_set_bit>

00009cd8 <bt_smp_encrypt_change>:
{
    9cd8:	b570      	push	{r4, r5, r6, lr}
    9cda:	4604      	mov	r4, r0
	if (hci_status) {
    9cdc:	2900      	cmp	r1, #0
    9cde:	d15d      	bne.n	9d9c <bt_smp_encrypt_change+0xc4>
	struct bt_conn *conn = chan->conn;
    9ce0:	6806      	ldr	r6, [r0, #0]
	if (!smp || !conn->encrypt) {
    9ce2:	7ab3      	ldrb	r3, [r6, #10]
    9ce4:	2b00      	cmp	r3, #0
    9ce6:	d059      	beq.n	9d9c <bt_smp_encrypt_change+0xc4>
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    9ce8:	f100 05a0 	add.w	r5, r0, #160	; 0xa0
    9cec:	2101      	movs	r1, #1
    9cee:	4628      	mov	r0, r5
    9cf0:	f7ff fedc 	bl	9aac <atomic_test_and_clear_bit>
    9cf4:	2800      	cmp	r0, #0
    9cf6:	d051      	beq.n	9d9c <bt_smp_encrypt_change+0xc4>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    9cf8:	2103      	movs	r1, #3
    9cfa:	4628      	mov	r0, r5
    9cfc:	f7ff f8c5 	bl	8e8a <atomic_test_bit>
    9d00:	b930      	cbnz	r0, 9d10 <bt_smp_encrypt_change+0x38>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    9d02:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    9d06:	210b      	movs	r1, #11
}
    9d08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    9d0c:	f7ff b8ca 	b.w	8ea4 <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    9d10:	2105      	movs	r1, #5
    9d12:	4628      	mov	r0, r5
    9d14:	f7ff f8b9 	bl	8e8a <atomic_test_bit>
    9d18:	b1b8      	cbz	r0, 9d4a <bt_smp_encrypt_change+0x72>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    9d1a:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    9d1e:	071b      	lsls	r3, r3, #28
    9d20:	d507      	bpl.n	9d32 <bt_smp_encrypt_change+0x5a>
    9d22:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    9d26:	0718      	lsls	r0, r3, #28
    9d28:	d503      	bpl.n	9d32 <bt_smp_encrypt_change+0x5a>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    9d2a:	210e      	movs	r1, #14
    9d2c:	4628      	mov	r0, r5
    9d2e:	f7ff f8b9 	bl	8ea4 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    9d32:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    9d36:	f023 0308 	bic.w	r3, r3, #8
    9d3a:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    9d3e:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    9d42:	f023 0308 	bic.w	r3, r3, #8
    9d46:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    9d4a:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    9d4e:	07d9      	lsls	r1, r3, #31
    9d50:	d51c      	bpl.n	9d8c <bt_smp_encrypt_change+0xb4>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    9d52:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    9d54:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    9d58:	f7ff f8a4 	bl	8ea4 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    9d5c:	2102      	movs	r1, #2
    9d5e:	4628      	mov	r0, r5
    9d60:	f7ff f8a0 	bl	8ea4 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9d64:	78f3      	ldrb	r3, [r6, #3]
    9d66:	b913      	cbnz	r3, 9d6e <bt_smp_encrypt_change+0x96>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    9d68:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    9d6c:	b9b3      	cbnz	r3, 9d9c <bt_smp_encrypt_change+0xc4>
	bt_smp_distribute_keys(smp);
    9d6e:	4620      	mov	r0, r4
    9d70:	f7ff fdfa 	bl	9968 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    9d74:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    9d78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9d7c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    9d80:	b963      	cbnz	r3, 9d9c <bt_smp_encrypt_change+0xc4>
	smp_reset(smp);
    9d82:	4620      	mov	r0, r4
}
    9d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	smp_reset(smp);
    9d88:	f7ff beab 	b.w	9ae2 <smp_reset>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    9d8c:	079a      	lsls	r2, r3, #30
    9d8e:	d501      	bpl.n	9d94 <bt_smp_encrypt_change+0xbc>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    9d90:	2108      	movs	r1, #8
    9d92:	e7df      	b.n	9d54 <bt_smp_encrypt_change+0x7c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    9d94:	075b      	lsls	r3, r3, #29
    9d96:	d5e1      	bpl.n	9d5c <bt_smp_encrypt_change+0x84>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    9d98:	210a      	movs	r1, #10
    9d9a:	e7db      	b.n	9d54 <bt_smp_encrypt_change+0x7c>
    9d9c:	bd70      	pop	{r4, r5, r6, pc}

00009d9e <smp_signing_info>:
{
    9d9e:	b570      	push	{r4, r5, r6, lr}
    9da0:	460a      	mov	r2, r1
    9da2:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    9da4:	210a      	movs	r1, #10
	struct bt_conn *conn = smp->chan.chan.conn;
    9da6:	f850 4ba0 	ldr.w	r4, [r0], #160
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    9daa:	f7ff f86e 	bl	8e8a <atomic_test_bit>
    9dae:	b158      	cbz	r0, 9dc8 <smp_signing_info+0x2a>
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    9db0:	f104 0148 	add.w	r1, r4, #72	; 0x48
    9db4:	2010      	movs	r0, #16
		struct bt_smp_signing_info *req = (void *)buf->data;
    9db6:	6896      	ldr	r6, [r2, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    9db8:	f000 ff34 	bl	ac24 <bt_keys_get_type>
		if (!keys) {
    9dbc:	b1e0      	cbz	r0, 9df8 <smp_signing_info+0x5a>
		memcpy(keys->remote_csrk.val, req->csrk,
    9dbe:	2210      	movs	r2, #16
    9dc0:	4631      	mov	r1, r6
    9dc2:	305c      	adds	r0, #92	; 0x5c
    9dc4:	f7f6 fcfa 	bl	7bc <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
    9dc8:	f895 317a 	ldrb.w	r3, [r5, #378]	; 0x17a
    9dcc:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    9dd0:	f885 317a 	strb.w	r3, [r5, #378]	; 0x17a
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9dd4:	78e2      	ldrb	r2, [r4, #3]
    9dd6:	b91a      	cbnz	r2, 9de0 <smp_signing_info+0x42>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    9dd8:	b913      	cbnz	r3, 9de0 <smp_signing_info+0x42>
		bt_smp_distribute_keys(smp);
    9dda:	4628      	mov	r0, r5
    9ddc:	f7ff fdc4 	bl	9968 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    9de0:	f8d5 4178 	ldr.w	r4, [r5, #376]	; 0x178
    9de4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    9de8:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    9dec:	b914      	cbnz	r4, 9df4 <smp_signing_info+0x56>
	smp_reset(smp);
    9dee:	4628      	mov	r0, r5
    9df0:	f7ff fe77 	bl	9ae2 <smp_reset>
	return 0;
    9df4:	2000      	movs	r0, #0
}
    9df6:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    9df8:	2008      	movs	r0, #8
    9dfa:	bd70      	pop	{r4, r5, r6, pc}

00009dfc <smp_master_ident>:
{
    9dfc:	b570      	push	{r4, r5, r6, lr}
    9dfe:	460a      	mov	r2, r1
    9e00:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    9e02:	210a      	movs	r1, #10
	struct bt_conn *conn = smp->chan.chan.conn;
    9e04:	f850 6ba0 	ldr.w	r6, [r0], #160
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    9e08:	f7ff f83f 	bl	8e8a <atomic_test_bit>
    9e0c:	b1b8      	cbz	r0, 9e3e <smp_master_ident+0x42>
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    9e0e:	f106 0148 	add.w	r1, r6, #72	; 0x48
    9e12:	2004      	movs	r0, #4
		struct bt_smp_master_ident *req = (void *)buf->data;
    9e14:	6894      	ldr	r4, [r2, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    9e16:	f000 ff05 	bl	ac24 <bt_keys_get_type>
		if (!keys) {
    9e1a:	b388      	cbz	r0, 9e80 <smp_master_ident+0x84>
		keys->ltk.ediv = req->ediv;
    9e1c:	7862      	ldrb	r2, [r4, #1]
    9e1e:	7823      	ldrb	r3, [r4, #0]
    9e20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9e24:	8303      	strh	r3, [r0, #24]
		keys->ltk.rand = req->rand;
    9e26:	f8d4 2002 	ldr.w	r2, [r4, #2]
    9e2a:	f8d4 3006 	ldr.w	r3, [r4, #6]
    9e2e:	6143      	str	r3, [r0, #20]
    9e30:	6102      	str	r2, [r0, #16]
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    9e32:	f895 317a 	ldrb.w	r3, [r5, #378]	; 0x17a
    9e36:	f023 0301 	bic.w	r3, r3, #1
    9e3a:	f885 317a 	strb.w	r3, [r5, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    9e3e:	f895 317a 	ldrb.w	r3, [r5, #378]	; 0x17a
    9e42:	079a      	lsls	r2, r3, #30
    9e44:	d518      	bpl.n	9e78 <smp_master_ident+0x7c>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    9e46:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    9e48:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    9e4c:	f7ff f82a 	bl	8ea4 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9e50:	78f3      	ldrb	r3, [r6, #3]
    9e52:	b92b      	cbnz	r3, 9e60 <smp_master_ident+0x64>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    9e54:	f895 317a 	ldrb.w	r3, [r5, #378]	; 0x17a
    9e58:	b913      	cbnz	r3, 9e60 <smp_master_ident+0x64>
		bt_smp_distribute_keys(smp);
    9e5a:	4628      	mov	r0, r5
    9e5c:	f7ff fd84 	bl	9968 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    9e60:	f8d5 4178 	ldr.w	r4, [r5, #376]	; 0x178
    9e64:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    9e68:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    9e6c:	b914      	cbnz	r4, 9e74 <smp_master_ident+0x78>
	smp_reset(smp);
    9e6e:	4628      	mov	r0, r5
    9e70:	f7ff fe37 	bl	9ae2 <smp_reset>
	return 0;
    9e74:	2000      	movs	r0, #0
}
    9e76:	bd70      	pop	{r4, r5, r6, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    9e78:	075b      	lsls	r3, r3, #29
    9e7a:	d5e9      	bpl.n	9e50 <smp_master_ident+0x54>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    9e7c:	210a      	movs	r1, #10
    9e7e:	e7e3      	b.n	9e48 <smp_master_ident+0x4c>
			return BT_SMP_ERR_UNSPECIFIED;
    9e80:	2008      	movs	r0, #8
    9e82:	bd70      	pop	{r4, r5, r6, pc}

00009e84 <smp_check_complete.part.13>:
static void smp_check_complete(struct bt_conn *conn, u8_t dist_complete)
    9e84:	b510      	push	{r4, lr}
    9e86:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
    9e88:	2106      	movs	r1, #6
    9e8a:	f7fc feea 	bl	6c62 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
    9e8e:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    9e92:	ea21 0104 	bic.w	r1, r1, r4
    9e96:	f880 1179 	strb.w	r1, [r0, #377]	; 0x179
		if (!smp->local_dist && !smp->remote_dist) {
    9e9a:	f8d0 3178 	ldr.w	r3, [r0, #376]	; 0x178
    9e9e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9ea2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    9ea6:	b91b      	cbnz	r3, 9eb0 <smp_check_complete.part.13+0x2c>
}
    9ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    9eac:	f7ff be19 	b.w	9ae2 <smp_reset>
    9eb0:	bd10      	pop	{r4, pc}

00009eb2 <sign_info_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
    9eb2:	7883      	ldrb	r3, [r0, #2]
    9eb4:	b913      	cbnz	r3, 9ebc <sign_info_sent+0xa>
    9eb6:	2104      	movs	r1, #4
    9eb8:	f7ff bfe4 	b.w	9e84 <smp_check_complete.part.13>
    9ebc:	4770      	bx	lr
	...

00009ec0 <bt_smp_connected>:
{
    9ec0:	b510      	push	{r4, lr}
	k_delayed_work_init(&smp->work, smp_timeout);
    9ec2:	4905      	ldr	r1, [pc, #20]	; (9ed8 <bt_smp_connected+0x18>)
{
    9ec4:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    9ec6:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    9eca:	f017 f92f 	bl	2112c <k_delayed_work_init>
	smp_reset(smp);
    9ece:	4620      	mov	r0, r4
}
    9ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    9ed4:	f7ff be05 	b.w	9ae2 <smp_reset>
    9ed8:	00009ca9 	.word	0x00009ca9

00009edc <ident_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
    9edc:	7883      	ldrb	r3, [r0, #2]
    9ede:	b913      	cbnz	r3, 9ee6 <ident_sent+0xa>
    9ee0:	2101      	movs	r1, #1
    9ee2:	f7ff bfcf 	b.w	9e84 <smp_check_complete.part.13>
    9ee6:	4770      	bx	lr

00009ee8 <smp_send_pairing_confirm>:
{
    9ee8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    9eea:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
{
    9eee:	4604      	mov	r4, r0
	switch (smp->method) {
    9ef0:	2b03      	cmp	r3, #3
    9ef2:	d824      	bhi.n	9f3e <smp_send_pairing_confirm+0x56>
    9ef4:	e8df f003 	tbb	[pc, r3]
    9ef8:	25020225 	.word	0x25020225
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    9efc:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    9f00:	f8d0 5174 	ldr.w	r5, [r0, #372]	; 0x174
    9f04:	40dd      	lsrs	r5, r3
    9f06:	f005 0501 	and.w	r5, r5, #1
		r |= 0x80;
    9f0a:	f065 057f 	orn	r5, r5, #127	; 0x7f
    9f0e:	b2ed      	uxtb	r5, r5
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    9f10:	2003      	movs	r0, #3
    9f12:	f7ff fa61 	bl	93d8 <smp_create_pdu.isra.4>
	if (!buf) {
    9f16:	4606      	mov	r6, r0
    9f18:	b188      	cbz	r0, 9f3e <smp_send_pairing_confirm+0x56>
	req = net_buf_add(buf, sizeof(*req));
    9f1a:	2110      	movs	r1, #16
    9f1c:	3008      	adds	r0, #8
    9f1e:	f00e f819 	bl	17f54 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    9f22:	462b      	mov	r3, r5
    9f24:	9000      	str	r0, [sp, #0]
    9f26:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    9f2a:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    9f2e:	4810      	ldr	r0, [pc, #64]	; (9f70 <smp_send_pairing_confirm+0x88>)
    9f30:	f7ff f831 	bl	8f96 <smp_f4>
    9f34:	4605      	mov	r5, r0
    9f36:	b130      	cbz	r0, 9f46 <smp_send_pairing_confirm+0x5e>
		net_buf_unref(buf);
    9f38:	4630      	mov	r0, r6
    9f3a:	f00d ffad 	bl	17e98 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    9f3e:	2008      	movs	r0, #8
    9f40:	e014      	b.n	9f6c <smp_send_pairing_confirm+0x84>
		r = 0;
    9f42:	2500      	movs	r5, #0
    9f44:	e7e4      	b.n	9f10 <smp_send_pairing_confirm+0x28>
	smp_send(smp, buf, NULL);
    9f46:	4602      	mov	r2, r0
    9f48:	4631      	mov	r1, r6
    9f4a:	4620      	mov	r0, r4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9f4c:	34a0      	adds	r4, #160	; 0xa0
    9f4e:	f7ff fa73 	bl	9438 <smp_send>
    9f52:	f3bf 8f5b 	dmb	ish
    9f56:	e854 3f00 	ldrex	r3, [r4]
    9f5a:	f023 0301 	bic.w	r3, r3, #1
    9f5e:	e844 3200 	strex	r2, r3, [r4]
    9f62:	2a00      	cmp	r2, #0
    9f64:	d1f7      	bne.n	9f56 <smp_send_pairing_confirm+0x6e>
    9f66:	f3bf 8f5b 	dmb	ish
	return 0;
    9f6a:	4628      	mov	r0, r5
}
    9f6c:	b002      	add	sp, #8
    9f6e:	bd70      	pop	{r4, r5, r6, pc}
    9f70:	200008e9 	.word	0x200008e9

00009f74 <smp_public_key_slave.part.10>:
static u8_t smp_public_key_slave(struct bt_smp *smp)
    9f74:	b538      	push	{r3, r4, r5, lr}
	switch (smp->method) {
    9f76:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
static u8_t smp_public_key_slave(struct bt_smp *smp)
    9f7a:	4605      	mov	r5, r0
	switch (smp->method) {
    9f7c:	2b03      	cmp	r3, #3
    9f7e:	d831      	bhi.n	9fe4 <smp_public_key_slave.part.10+0x70>
    9f80:	e8df f003 	tbb	[pc, r3]
    9f84:	020b2102 	.word	0x020b2102
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    9f88:	309c      	adds	r0, #156	; 0x9c
    9f8a:	2104      	movs	r1, #4
    9f8c:	f7fe ff8a 	bl	8ea4 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    9f90:	4628      	mov	r0, r5
    9f92:	f7ff ffa9 	bl	9ee8 <smp_send_pairing_confirm>
		if (err) {
    9f96:	b140      	cbz	r0, 9faa <smp_public_key_slave.part.10+0x36>
    9f98:	bd38      	pop	{r3, r4, r5, pc}
		err = display_passkey(smp);
    9f9a:	f7ff fa2b 	bl	93f4 <display_passkey>
		if (err) {
    9f9e:	bb10      	cbnz	r0, 9fe6 <smp_public_key_slave.part.10+0x72>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    9fa0:	2103      	movs	r1, #3
    9fa2:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    9fa6:	f7fe ff7d 	bl	8ea4 <atomic_set_bit>
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    9faa:	490f      	ldr	r1, [pc, #60]	; (9fe8 <smp_public_key_slave.part.10+0x74>)
    9fac:	f105 00f3 	add.w	r0, r5, #243	; 0xf3
    9fb0:	f7fb fcda 	bl	5968 <bt_dh_key_gen>
    9fb4:	4604      	mov	r4, r0
    9fb6:	b9a8      	cbnz	r0, 9fe4 <smp_public_key_slave.part.10+0x70>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    9fb8:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    9fbc:	2107      	movs	r1, #7
    9fbe:	f7fe ff71 	bl	8ea4 <atomic_set_bit>
	return 0;
    9fc2:	4620      	mov	r0, r4
    9fc4:	bd38      	pop	{r3, r4, r5, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    9fc6:	2103      	movs	r1, #3
    9fc8:	309c      	adds	r0, #156	; 0x9c
    9fca:	f7fe ff6b 	bl	8ea4 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    9fce:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    9fd2:	2109      	movs	r1, #9
    9fd4:	f7fe ff66 	bl	8ea4 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    9fd8:	4b04      	ldr	r3, [pc, #16]	; (9fec <smp_public_key_slave.part.10+0x78>)
    9fda:	6828      	ldr	r0, [r5, #0]
    9fdc:	681b      	ldr	r3, [r3, #0]
    9fde:	685b      	ldr	r3, [r3, #4]
    9fe0:	4798      	blx	r3
    9fe2:	e7e2      	b.n	9faa <smp_public_key_slave.part.10+0x36>
		return BT_SMP_ERR_UNSPECIFIED;
    9fe4:	2008      	movs	r0, #8
}
    9fe6:	bd38      	pop	{r3, r4, r5, pc}
    9fe8:	00009b75 	.word	0x00009b75
    9fec:	200041b8 	.word	0x200041b8

00009ff0 <bt_smp_pkey_ready>:
{
    9ff0:	b510      	push	{r4, lr}
	if (!pkey) {
    9ff2:	4601      	mov	r1, r0
    9ff4:	4c17      	ldr	r4, [pc, #92]	; (a054 <bt_smp_pkey_ready+0x64>)
    9ff6:	b908      	cbnz	r0, 9ffc <bt_smp_pkey_ready+0xc>
		sc_local_pkey_valid = false;
    9ff8:	7020      	strb	r0, [r4, #0]
		return;
    9ffa:	bd10      	pop	{r4, pc}
	memcpy(sc_public_key, pkey, 64);
    9ffc:	2240      	movs	r2, #64	; 0x40
    9ffe:	4816      	ldr	r0, [pc, #88]	; (a058 <bt_smp_pkey_ready+0x68>)
    a000:	f7f6 fbdc 	bl	7bc <memcpy>
	sc_local_pkey_valid = true;
    a004:	2301      	movs	r3, #1
    a006:	7023      	strb	r3, [r4, #0]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    a008:	4c14      	ldr	r4, [pc, #80]	; (a05c <bt_smp_pkey_ready+0x6c>)
    a00a:	2106      	movs	r1, #6
    a00c:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    a010:	f7fe ff3b 	bl	8e8a <atomic_test_bit>
    a014:	b1e8      	cbz	r0, a052 <bt_smp_pkey_ready+0x62>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    a016:	6823      	ldr	r3, [r4, #0]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a018:	78db      	ldrb	r3, [r3, #3]
			err = sc_send_public_key(smp);
    a01a:	4620      	mov	r0, r4
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a01c:	b963      	cbnz	r3, a038 <bt_smp_pkey_ready+0x48>
			err = sc_send_public_key(smp);
    a01e:	f7ff fb7b 	bl	9718 <sc_send_public_key>
			if (err) {
    a022:	4601      	mov	r1, r0
    a024:	b110      	cbz	r0, a02c <bt_smp_pkey_ready+0x3c>
				smp_error(smp, err);
    a026:	4620      	mov	r0, r4
    a028:	f7ff fd8a 	bl	9b40 <smp_error>
			atomic_set_bit(&smp->allowed_cmds,
    a02c:	210c      	movs	r1, #12
    a02e:	480c      	ldr	r0, [pc, #48]	; (a060 <bt_smp_pkey_ready+0x70>)
}
    a030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(&smp->allowed_cmds,
    a034:	f7fe bf36 	b.w	8ea4 <atomic_set_bit>
	err = sc_send_public_key(smp);
    a038:	f7ff fb6e 	bl	9718 <sc_send_public_key>
	if (err) {
    a03c:	b918      	cbnz	r0, a046 <bt_smp_pkey_ready+0x56>
    a03e:	4620      	mov	r0, r4
    a040:	f7ff ff98 	bl	9f74 <smp_public_key_slave.part.10>
		if (err) {
    a044:	b128      	cbz	r0, a052 <bt_smp_pkey_ready+0x62>
			smp_error(smp, err);
    a046:	4601      	mov	r1, r0
}
    a048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    a04c:	4803      	ldr	r0, [pc, #12]	; (a05c <bt_smp_pkey_ready+0x6c>)
    a04e:	f7ff bd77 	b.w	9b40 <smp_error>
    a052:	bd10      	pop	{r4, pc}
    a054:	200008e8 	.word	0x200008e8
    a058:	200008e9 	.word	0x200008e9
    a05c:	20000744 	.word	0x20000744
    a060:	200007e0 	.word	0x200007e0

0000a064 <smp_c1>:
{
    a064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a068:	b089      	sub	sp, #36	; 0x24
    a06a:	461f      	mov	r7, r3
    a06c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    a070:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
	p1[0] = ia->type;
    a074:	f898 3000 	ldrb.w	r3, [r8]
    a078:	f88d 3000 	strb.w	r3, [sp]
{
    a07c:	4606      	mov	r6, r0
	p1[1] = ra->type;
    a07e:	f899 3000 	ldrb.w	r3, [r9]
    a082:	f88d 3001 	strb.w	r3, [sp, #1]
{
    a086:	460c      	mov	r4, r1
	memcpy(p1 + 2, preq, 7);
    a088:	f10d 0002 	add.w	r0, sp, #2
{
    a08c:	4611      	mov	r1, r2
	memcpy(p1 + 2, preq, 7);
    a08e:	2207      	movs	r2, #7
{
    a090:	9d12      	ldr	r5, [sp, #72]	; 0x48
	memcpy(p1 + 2, preq, 7);
    a092:	f7f6 fb93 	bl	7bc <memcpy>
	memcpy(p1 + 9, pres, 7);
    a096:	2207      	movs	r2, #7
    a098:	4639      	mov	r1, r7
    a09a:	f10d 0009 	add.w	r0, sp, #9
    a09e:	f7f6 fb8d 	bl	7bc <memcpy>
    a0a2:	2300      	movs	r3, #0
		*r++ = *p++ ^ *q++;
    a0a4:	f814 2b01 	ldrb.w	r2, [r4], #1
    a0a8:	f81d 1003 	ldrb.w	r1, [sp, r3]
    a0ac:	404a      	eors	r2, r1
    a0ae:	54ea      	strb	r2, [r5, r3]
    a0b0:	3301      	adds	r3, #1
	while (len--) {
    a0b2:	2b10      	cmp	r3, #16
    a0b4:	d1f6      	bne.n	a0a4 <smp_c1+0x40>
	err = bt_encrypt_le(k, enc_data, enc_data);
    a0b6:	462a      	mov	r2, r5
    a0b8:	4629      	mov	r1, r5
    a0ba:	4630      	mov	r0, r6
    a0bc:	f001 fe6c 	bl	bd98 <bt_encrypt_le>
	if (err) {
    a0c0:	4604      	mov	r4, r0
    a0c2:	bb08      	cbnz	r0, a108 <smp_c1+0xa4>
	memcpy(p2, ra->a.val, 6);
    a0c4:	af04      	add	r7, sp, #16
    a0c6:	2206      	movs	r2, #6
    a0c8:	f109 0101 	add.w	r1, r9, #1
    a0cc:	4638      	mov	r0, r7
    a0ce:	f7f6 fb75 	bl	7bc <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
    a0d2:	2206      	movs	r2, #6
    a0d4:	f108 0101 	add.w	r1, r8, #1
    a0d8:	f10d 0016 	add.w	r0, sp, #22
    a0dc:	f7f6 fb6e 	bl	7bc <memcpy>
	memset(p2 + 12, 0, 4);
    a0e0:	2204      	movs	r2, #4
    a0e2:	4621      	mov	r1, r4
    a0e4:	a807      	add	r0, sp, #28
    a0e6:	f7f6 fb95 	bl	814 <memset>
    a0ea:	1e6b      	subs	r3, r5, #1
		*r++ = *p++ ^ *q++;
    a0ec:	785a      	ldrb	r2, [r3, #1]
    a0ee:	5d39      	ldrb	r1, [r7, r4]
    a0f0:	3401      	adds	r4, #1
    a0f2:	404a      	eors	r2, r1
	while (len--) {
    a0f4:	2c10      	cmp	r4, #16
		*r++ = *p++ ^ *q++;
    a0f6:	f803 2f01 	strb.w	r2, [r3, #1]!
	while (len--) {
    a0fa:	d1f7      	bne.n	a0ec <smp_c1+0x88>
	return bt_encrypt_le(k, enc_data, enc_data);
    a0fc:	462a      	mov	r2, r5
    a0fe:	4629      	mov	r1, r5
    a100:	4630      	mov	r0, r6
    a102:	f001 fe49 	bl	bd98 <bt_encrypt_le>
    a106:	4604      	mov	r4, r0
}
    a108:	4620      	mov	r0, r4
    a10a:	b009      	add	sp, #36	; 0x24
    a10c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000a110 <legacy_send_pairing_confirm>:
{
    a110:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    a112:	6805      	ldr	r5, [r0, #0]
{
    a114:	4604      	mov	r4, r0
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    a116:	2003      	movs	r0, #3
    a118:	f7ff f95e 	bl	93d8 <smp_create_pdu.isra.4>
	if (!buf) {
    a11c:	4606      	mov	r6, r0
    a11e:	b1c0      	cbz	r0, a152 <legacy_send_pairing_confirm+0x42>
	req = net_buf_add(buf, sizeof(*req));
    a120:	2110      	movs	r1, #16
    a122:	3008      	adds	r0, #8
    a124:	f00d ff16 	bl	17f54 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
    a128:	f105 0356 	add.w	r3, r5, #86	; 0x56
    a12c:	354f      	adds	r5, #79	; 0x4f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
    a12e:	9002      	str	r0, [sp, #8]
    a130:	9301      	str	r3, [sp, #4]
    a132:	9500      	str	r5, [sp, #0]
    a134:	f104 03ac 	add.w	r3, r4, #172	; 0xac
    a138:	f104 02a5 	add.w	r2, r4, #165	; 0xa5
    a13c:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    a140:	f104 00e3 	add.w	r0, r4, #227	; 0xe3
    a144:	f7ff ff8e 	bl	a064 <smp_c1>
    a148:	4605      	mov	r5, r0
    a14a:	b120      	cbz	r0, a156 <legacy_send_pairing_confirm+0x46>
		net_buf_unref(buf);
    a14c:	4630      	mov	r0, r6
    a14e:	f00d fea3 	bl	17e98 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    a152:	2008      	movs	r0, #8
    a154:	e012      	b.n	a17c <legacy_send_pairing_confirm+0x6c>
	smp_send(smp, buf, NULL);
    a156:	4602      	mov	r2, r0
    a158:	4631      	mov	r1, r6
    a15a:	4620      	mov	r0, r4
    a15c:	34a0      	adds	r4, #160	; 0xa0
    a15e:	f7ff f96b 	bl	9438 <smp_send>
    a162:	f3bf 8f5b 	dmb	ish
    a166:	e854 3f00 	ldrex	r3, [r4]
    a16a:	f023 0301 	bic.w	r3, r3, #1
    a16e:	e844 3200 	strex	r2, r3, [r4]
    a172:	2a00      	cmp	r2, #0
    a174:	d1f7      	bne.n	a166 <legacy_send_pairing_confirm+0x56>
    a176:	f3bf 8f5b 	dmb	ish
	return 0;
    a17a:	4628      	mov	r0, r5
}
    a17c:	b004      	add	sp, #16
    a17e:	bd70      	pop	{r4, r5, r6, pc}

0000a180 <legacy_pairing_confirm>:
{
    a180:	b510      	push	{r4, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    a182:	6803      	ldr	r3, [r0, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a184:	78db      	ldrb	r3, [r3, #3]
{
    a186:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a188:	b94b      	cbnz	r3, a19e <legacy_pairing_confirm+0x1e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    a18a:	2103      	movs	r1, #3
			atomic_set_bit(&smp->allowed_cmds,
    a18c:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    a190:	f7fe fe88 	bl	8ea4 <atomic_set_bit>
			return legacy_send_pairing_confirm(smp);
    a194:	4620      	mov	r0, r4
}
    a196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return legacy_send_pairing_confirm(smp);
    a19a:	f7ff bfb9 	b.w	a110 <legacy_send_pairing_confirm>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    a19e:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
    a1a2:	2109      	movs	r1, #9
    a1a4:	4610      	mov	r0, r2
    a1a6:	f7fe fe70 	bl	8e8a <atomic_test_bit>
    a1aa:	b908      	cbnz	r0, a1b0 <legacy_pairing_confirm+0x30>
			atomic_set_bit(&smp->allowed_cmds,
    a1ac:	2104      	movs	r1, #4
    a1ae:	e7ed      	b.n	a18c <legacy_pairing_confirm+0xc>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    a1b0:	4610      	mov	r0, r2
    a1b2:	2100      	movs	r1, #0
    a1b4:	f7fe fe76 	bl	8ea4 <atomic_set_bit>
}
    a1b8:	2000      	movs	r0, #0
    a1ba:	bd10      	pop	{r4, pc}

0000a1bc <smp_pairing_confirm>:
{
    a1bc:	b510      	push	{r4, lr}
    a1be:	4604      	mov	r4, r0
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    a1c0:	2210      	movs	r2, #16
    a1c2:	6889      	ldr	r1, [r1, #8]
    a1c4:	30b3      	adds	r0, #179	; 0xb3
    a1c6:	f7f6 faf9 	bl	7bc <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    a1ca:	6823      	ldr	r3, [r4, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a1cc:	78db      	ldrb	r3, [r3, #3]
    a1ce:	b94b      	cbnz	r3, a1e4 <smp_pairing_confirm+0x28>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    a1d0:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    a1d4:	2104      	movs	r1, #4
    a1d6:	f7fe fe65 	bl	8ea4 <atomic_set_bit>
		return smp_send_pairing_random(smp);
    a1da:	4620      	mov	r0, r4
}
    a1dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_send_pairing_random(smp);
    a1e0:	f7ff bba8 	b.w	9934 <smp_send_pairing_random>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a1e4:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    a1e8:	2105      	movs	r1, #5
    a1ea:	4610      	mov	r0, r2
    a1ec:	f7fe fe4d 	bl	8e8a <atomic_test_bit>
    a1f0:	b920      	cbnz	r0, a1fc <smp_pairing_confirm+0x40>
		return legacy_pairing_confirm(smp);
    a1f2:	4620      	mov	r0, r4
}
    a1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return legacy_pairing_confirm(smp);
    a1f8:	f7ff bfc2 	b.w	a180 <legacy_pairing_confirm>
	switch (smp->method) {
    a1fc:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    a200:	2b01      	cmp	r3, #1
    a202:	d00b      	beq.n	a21c <smp_pairing_confirm+0x60>
    a204:	2b02      	cmp	r3, #2
    a206:	d115      	bne.n	a234 <smp_pairing_confirm+0x78>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    a208:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    a20c:	2104      	movs	r1, #4
    a20e:	f7fe fe49 	bl	8ea4 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
    a212:	4620      	mov	r0, r4
}
    a214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_send_pairing_confirm(smp);
    a218:	f7ff be66 	b.w	9ee8 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    a21c:	2109      	movs	r1, #9
    a21e:	4610      	mov	r0, r2
    a220:	f7fe fe33 	bl	8e8a <atomic_test_bit>
    a224:	2800      	cmp	r0, #0
    a226:	d0ef      	beq.n	a208 <smp_pairing_confirm+0x4c>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    a228:	4610      	mov	r0, r2
    a22a:	2100      	movs	r1, #0
    a22c:	f7fe fe3a 	bl	8ea4 <atomic_set_bit>
			return 0;
    a230:	2000      	movs	r0, #0
    a232:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    a234:	2008      	movs	r0, #8
}
    a236:	bd10      	pop	{r4, pc}

0000a238 <smp_public_key>:
{
    a238:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    a23a:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    a23c:	f100 04f3 	add.w	r4, r0, #243	; 0xf3
{
    a240:	4605      	mov	r5, r0
	memcpy(smp->pkey, req->x, 32);
    a242:	2220      	movs	r2, #32
    a244:	4631      	mov	r1, r6
    a246:	4620      	mov	r0, r4
    a248:	f7f6 fab8 	bl	7bc <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    a24c:	2220      	movs	r2, #32
    a24e:	18b1      	adds	r1, r6, r2
    a250:	f205 1013 	addw	r0, r5, #275	; 0x113
    a254:	f7f6 fab2 	bl	7bc <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    a258:	2240      	movs	r2, #64	; 0x40
    a25a:	4929      	ldr	r1, [pc, #164]	; (a300 <smp_public_key+0xc8>)
    a25c:	4620      	mov	r0, r4
    a25e:	f7f6 fa80 	bl	762 <memcmp>
    a262:	b920      	cbnz	r0, a26e <smp_public_key+0x36>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    a264:	210b      	movs	r1, #11
    a266:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    a26a:	f7fe fe1b 	bl	8ea4 <atomic_set_bit>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    a26e:	682b      	ldr	r3, [r5, #0]
    a270:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a272:	2b00      	cmp	r3, #0
    a274:	d133      	bne.n	a2de <smp_public_key+0xa6>
		switch (smp->method) {
    a276:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    a27a:	2b03      	cmp	r3, #3
    a27c:	d83e      	bhi.n	a2fc <smp_public_key+0xc4>
    a27e:	e8df f003 	tbb	[pc, r3]
    a282:	2302      	.short	0x2302
    a284:	0214      	.short	0x0214
			atomic_set_bit(&smp->allowed_cmds,
    a286:	2103      	movs	r1, #3
    a288:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    a28c:	f7fe fe0a 	bl	8ea4 <atomic_set_bit>
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    a290:	4620      	mov	r0, r4
    a292:	491c      	ldr	r1, [pc, #112]	; (a304 <smp_public_key+0xcc>)
    a294:	f7fb fb68 	bl	5968 <bt_dh_key_gen>
    a298:	4604      	mov	r4, r0
    a29a:	bb78      	cbnz	r0, a2fc <smp_public_key+0xc4>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    a29c:	2107      	movs	r1, #7
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    a29e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    a2a2:	f7fe fdff 	bl	8ea4 <atomic_set_bit>
		return 0;
    a2a6:	4620      	mov	r0, r4
    a2a8:	bd70      	pop	{r4, r5, r6, pc}
			err = display_passkey(smp);
    a2aa:	4628      	mov	r0, r5
    a2ac:	f7ff f8a2 	bl	93f4 <display_passkey>
			if (err) {
    a2b0:	b948      	cbnz	r0, a2c6 <smp_public_key+0x8e>
			atomic_set_bit(&smp->allowed_cmds,
    a2b2:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    a2b6:	2103      	movs	r1, #3
    a2b8:	f7fe fdf4 	bl	8ea4 <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
    a2bc:	4628      	mov	r0, r5
    a2be:	f7ff fe13 	bl	9ee8 <smp_send_pairing_confirm>
			if (err) {
    a2c2:	2800      	cmp	r0, #0
    a2c4:	d0e4      	beq.n	a290 <smp_public_key+0x58>
}
    a2c6:	bd70      	pop	{r4, r5, r6, pc}
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    a2c8:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    a2cc:	2109      	movs	r1, #9
    a2ce:	f7fe fde9 	bl	8ea4 <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
    a2d2:	4b0d      	ldr	r3, [pc, #52]	; (a308 <smp_public_key+0xd0>)
    a2d4:	6828      	ldr	r0, [r5, #0]
    a2d6:	681b      	ldr	r3, [r3, #0]
    a2d8:	685b      	ldr	r3, [r3, #4]
    a2da:	4798      	blx	r3
    a2dc:	e7d8      	b.n	a290 <smp_public_key+0x58>
	if (!sc_local_pkey_valid) {
    a2de:	4b0b      	ldr	r3, [pc, #44]	; (a30c <smp_public_key+0xd4>)
    a2e0:	781c      	ldrb	r4, [r3, #0]
    a2e2:	b90c      	cbnz	r4, a2e8 <smp_public_key+0xb0>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    a2e4:	2106      	movs	r1, #6
    a2e6:	e7da      	b.n	a29e <smp_public_key+0x66>
	err = sc_send_public_key(smp);
    a2e8:	4628      	mov	r0, r5
    a2ea:	f7ff fa15 	bl	9718 <sc_send_public_key>
	if (err) {
    a2ee:	2800      	cmp	r0, #0
    a2f0:	d1e9      	bne.n	a2c6 <smp_public_key+0x8e>
    a2f2:	4628      	mov	r0, r5
}
    a2f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a2f8:	f7ff be3c 	b.w	9f74 <smp_public_key_slave.part.10>
		return BT_SMP_ERR_UNSPECIFIED;
    a2fc:	2008      	movs	r0, #8
    a2fe:	e7e2      	b.n	a2c6 <smp_public_key+0x8e>
    a300:	000227a4 	.word	0x000227a4
    a304:	00009b75 	.word	0x00009b75
    a308:	200041b8 	.word	0x200041b8
    a30c:	200008e8 	.word	0x200008e8

0000a310 <smp_ident_addr_info>:
{
    a310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    a314:	688f      	ldr	r7, [r1, #8]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    a316:	783b      	ldrb	r3, [r7, #0]
{
    a318:	4605      	mov	r5, r0
    a31a:	b123      	cbz	r3, a326 <smp_ident_addr_info+0x16>
	if (!bt_addr_le_is_identity(&req->addr)) {
    a31c:	79bb      	ldrb	r3, [r7, #6]
    a31e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a322:	2bc0      	cmp	r3, #192	; 0xc0
    a324:	d160      	bne.n	a3e8 <smp_ident_addr_info+0xd8>
	struct bt_conn *conn = smp->chan.chan.conn;
    a326:	4628      	mov	r0, r5
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    a328:	210a      	movs	r1, #10
	struct bt_conn *conn = smp->chan.chan.conn;
    a32a:	f850 4ba0 	ldr.w	r4, [r0], #160
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    a32e:	f7fe fdac 	bl	8e8a <atomic_test_bit>
    a332:	b3a0      	cbz	r0, a39e <smp_ident_addr_info+0x8e>
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    a334:	f104 0848 	add.w	r8, r4, #72	; 0x48
    a338:	4641      	mov	r1, r8
    a33a:	2002      	movs	r0, #2
    a33c:	f000 fc72 	bl	ac24 <bt_keys_get_type>
		if (!keys) {
    a340:	4606      	mov	r6, r0
    a342:	2800      	cmp	r0, #0
    a344:	d053      	beq.n	a3ee <smp_ident_addr_info+0xde>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    a346:	78e3      	ldrb	r3, [r4, #3]
    a348:	2b00      	cmp	r3, #0
    a34a:	d14a      	bne.n	a3e2 <smp_ident_addr_info+0xd2>
			dst = &conn->le.resp_addr;
    a34c:	f104 0156 	add.w	r1, r4, #86	; 0x56
	if (addr->type != BT_ADDR_LE_RANDOM) {
    a350:	780b      	ldrb	r3, [r1, #0]
    a352:	2b01      	cmp	r3, #1
    a354:	d120      	bne.n	a398 <smp_ident_addr_info+0x88>
		if (bt_addr_le_is_rpa(dst)) {
    a356:	798b      	ldrb	r3, [r1, #6]
    a358:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a35c:	2b40      	cmp	r3, #64	; 0x40
    a35e:	d11b      	bne.n	a398 <smp_ident_addr_info+0x88>
	memcpy(dst, src, sizeof(*dst));
    a360:	2206      	movs	r2, #6
    a362:	3101      	adds	r1, #1
    a364:	f106 0040 	add.w	r0, r6, #64	; 0x40
    a368:	f7f6 fa28 	bl	7bc <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    a36c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    a370:	b193      	cbz	r3, a398 <smp_ident_addr_info+0x88>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    a372:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
    a376:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a37a:	2bc0      	cmp	r3, #192	; 0xc0
    a37c:	d00c      	beq.n	a398 <smp_ident_addr_info+0x88>
	memcpy(dst, src, sizeof(*dst));
    a37e:	2207      	movs	r2, #7
    a380:	4639      	mov	r1, r7
    a382:	4630      	mov	r0, r6
    a384:	f7f6 fa1a 	bl	7bc <memcpy>
    a388:	2207      	movs	r2, #7
    a38a:	4639      	mov	r1, r7
    a38c:	4640      	mov	r0, r8
    a38e:	f7f6 fa15 	bl	7bc <memcpy>
				bt_conn_identity_resolved(conn);
    a392:	4620      	mov	r0, r4
    a394:	f7fb fb96 	bl	5ac4 <bt_conn_identity_resolved>
		bt_id_add(keys);
    a398:	4630      	mov	r0, r6
    a39a:	f7f9 fbeb 	bl	3b74 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    a39e:	f895 317a 	ldrb.w	r3, [r5, #378]	; 0x17a
    a3a2:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    a3a6:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    a3a8:	f885 217a 	strb.w	r2, [r5, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    a3ac:	d504      	bpl.n	a3b8 <smp_ident_addr_info+0xa8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    a3ae:	210a      	movs	r1, #10
    a3b0:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    a3b4:	f7fe fd76 	bl	8ea4 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a3b8:	78e3      	ldrb	r3, [r4, #3]
    a3ba:	b92b      	cbnz	r3, a3c8 <smp_ident_addr_info+0xb8>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    a3bc:	f895 317a 	ldrb.w	r3, [r5, #378]	; 0x17a
    a3c0:	b913      	cbnz	r3, a3c8 <smp_ident_addr_info+0xb8>
		bt_smp_distribute_keys(smp);
    a3c2:	4628      	mov	r0, r5
    a3c4:	f7ff fad0 	bl	9968 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    a3c8:	f8d5 4178 	ldr.w	r4, [r5, #376]	; 0x178
    a3cc:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    a3d0:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    a3d4:	b914      	cbnz	r4, a3dc <smp_ident_addr_info+0xcc>
	smp_reset(smp);
    a3d6:	4628      	mov	r0, r5
    a3d8:	f7ff fb83 	bl	9ae2 <smp_reset>
	return 0;
    a3dc:	2000      	movs	r0, #0
}
    a3de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			dst = &conn->le.init_addr;
    a3e2:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    a3e6:	e7b3      	b.n	a350 <smp_ident_addr_info+0x40>
		return BT_SMP_ERR_INVALID_PARAMS;
    a3e8:	200a      	movs	r0, #10
    a3ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    a3ee:	2008      	movs	r0, #8
    a3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a3f4 <smp_pairing_rsp>:
{
    a3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    a3f6:	688d      	ldr	r5, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    a3f8:	78eb      	ldrb	r3, [r5, #3]
    a3fa:	3b07      	subs	r3, #7
    a3fc:	2b09      	cmp	r3, #9
{
    a3fe:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    a400:	f200 80b0 	bhi.w	a564 <smp_pairing_rsp+0x170>
	smp->local_dist &= rsp->init_key_dist;
    a404:	792a      	ldrb	r2, [r5, #4]
    a406:	f890 3179 	ldrb.w	r3, [r0, #377]	; 0x179
    a40a:	4013      	ands	r3, r2
    a40c:	f880 3179 	strb.w	r3, [r0, #377]	; 0x179
	smp->remote_dist &= rsp->resp_key_dist;
    a410:	796a      	ldrb	r2, [r5, #5]
    a412:	f890 317a 	ldrb.w	r3, [r0, #378]	; 0x17a
    a416:	4013      	ands	r3, r2
    a418:	f880 317a 	strb.w	r3, [r0, #378]	; 0x17a
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    a41c:	2302      	movs	r3, #2
    a41e:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    a422:	2206      	movs	r2, #6
    a424:	4629      	mov	r1, r5
    a426:	30ad      	adds	r0, #173	; 0xad
    a428:	f7f6 f9c8 	bl	7bc <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    a42c:	78ab      	ldrb	r3, [r5, #2]
    a42e:	f013 0f08 	tst.w	r3, #8
    a432:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
    a436:	d007      	beq.n	a448 <smp_pairing_rsp+0x54>
    a438:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    a43c:	071f      	lsls	r7, r3, #28
    a43e:	d503      	bpl.n	a448 <smp_pairing_rsp+0x54>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    a440:	2105      	movs	r1, #5
    a442:	4630      	mov	r0, r6
    a444:	f7fe fd2e 	bl	8ea4 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    a448:	78ab      	ldrb	r3, [r5, #2]
    a44a:	0698      	lsls	r0, r3, #26
    a44c:	d507      	bpl.n	a45e <smp_pairing_rsp+0x6a>
    a44e:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    a452:	0699      	lsls	r1, r3, #26
    a454:	d503      	bpl.n	a45e <smp_pairing_rsp+0x6a>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    a456:	2111      	movs	r1, #17
    a458:	4630      	mov	r0, r6
    a45a:	f7fe fd23 	bl	8ea4 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    a45e:	78ab      	ldrb	r3, [r5, #2]
    a460:	07da      	lsls	r2, r3, #31
    a462:	d507      	bpl.n	a474 <smp_pairing_rsp+0x80>
    a464:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    a468:	07db      	lsls	r3, r3, #31
    a46a:	d503      	bpl.n	a474 <smp_pairing_rsp+0x80>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    a46c:	210a      	movs	r1, #10
    a46e:	4630      	mov	r0, r6
    a470:	f7fe fd18 	bl	8ea4 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a474:	2105      	movs	r1, #5
    a476:	4630      	mov	r0, r6
    a478:	f7fe fd07 	bl	8e8a <atomic_test_bit>
    a47c:	782f      	ldrb	r7, [r5, #0]
    a47e:	bba8      	cbnz	r0, a4ec <smp_pairing_rsp+0xf8>
	smp->method = legacy_get_pair_method(smp, remote_io);
    a480:	4639      	mov	r1, r7
    a482:	4620      	mov	r0, r4
    a484:	f7fe ff68 	bl	9358 <legacy_get_pair_method>
    a488:	4605      	mov	r5, r0
    a48a:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    a48e:	b998      	cbnz	r0, a4b8 <smp_pairing_rsp+0xc4>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    a490:	210c      	movs	r1, #12
    a492:	4630      	mov	r0, r6
    a494:	f7fe fcf9 	bl	8e8a <atomic_test_bit>
	if (smp->method == JUST_WORKS &&
    a498:	b170      	cbz	r0, a4b8 <smp_pairing_rsp+0xc4>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    a49a:	4f33      	ldr	r7, [pc, #204]	; (a568 <smp_pairing_rsp+0x174>)
    a49c:	683b      	ldr	r3, [r7, #0]
    a49e:	b15b      	cbz	r3, a4b8 <smp_pairing_rsp+0xc4>
	    bt_auth && bt_auth->pairing_confirm) {
    a4a0:	691b      	ldr	r3, [r3, #16]
    a4a2:	b14b      	cbz	r3, a4b8 <smp_pairing_rsp+0xc4>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    a4a4:	4630      	mov	r0, r6
    a4a6:	2109      	movs	r1, #9
    a4a8:	f7fe fcfc 	bl	8ea4 <atomic_set_bit>
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    a4ac:	683b      	ldr	r3, [r7, #0]
    a4ae:	6820      	ldr	r0, [r4, #0]
    a4b0:	691b      	ldr	r3, [r3, #16]
    a4b2:	4798      	blx	r3
}
    a4b4:	4628      	mov	r0, r5
    a4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ret = legacy_request_tk(smp);
    a4b8:	4620      	mov	r0, r4
    a4ba:	f7fe ff05 	bl	92c8 <legacy_request_tk>
	if (ret) {
    a4be:	4605      	mov	r5, r0
    a4c0:	2800      	cmp	r0, #0
    a4c2:	d1f7      	bne.n	a4b4 <smp_pairing_rsp+0xc0>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    a4c4:	2109      	movs	r1, #9
    a4c6:	4630      	mov	r0, r6
    a4c8:	f7fe fcdf 	bl	8e8a <atomic_test_bit>
    a4cc:	b948      	cbnz	r0, a4e2 <smp_pairing_rsp+0xee>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    a4ce:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    a4d2:	2103      	movs	r1, #3
    a4d4:	f7fe fce6 	bl	8ea4 <atomic_set_bit>
		return legacy_send_pairing_confirm(smp);
    a4d8:	4620      	mov	r0, r4
}
    a4da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return legacy_send_pairing_confirm(smp);
    a4de:	f7ff be17 	b.w	a110 <legacy_send_pairing_confirm>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    a4e2:	4629      	mov	r1, r5
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    a4e4:	4630      	mov	r0, r6
    a4e6:	f7fe fcdd 	bl	8ea4 <atomic_set_bit>
		return 0;
    a4ea:	e7e3      	b.n	a4b4 <smp_pairing_rsp+0xc0>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    a4ec:	2f04      	cmp	r7, #4
    a4ee:	d82d      	bhi.n	a54c <smp_pairing_rsp+0x158>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    a4f0:	f894 50a8 	ldrb.w	r5, [r4, #168]	; 0xa8
    a4f4:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    a4f8:	431d      	orrs	r5, r3
    a4fa:	f015 0504 	ands.w	r5, r5, #4
    a4fe:	d006      	beq.n	a50e <smp_pairing_rsp+0x11a>
	return gen_method_sc[remote_io][get_io_capa()];
    a500:	f7fe fc78 	bl	8df4 <get_io_capa>
    a504:	4919      	ldr	r1, [pc, #100]	; (a56c <smp_pairing_rsp+0x178>)
    a506:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    a50a:	440f      	add	r7, r1
    a50c:	5c3d      	ldrb	r5, [r7, r0]
	smp->local_dist &= SEND_KEYS_SC;
    a50e:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
	smp->method = get_pair_method(smp, rsp->io_capability);
    a512:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
	smp->local_dist &= SEND_KEYS_SC;
    a516:	f003 0304 	and.w	r3, r3, #4
    a51a:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist &= RECV_KEYS_SC;
    a51e:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    a522:	f003 0306 	and.w	r3, r3, #6
    a526:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->method == JUST_WORKS) {
    a52a:	b955      	cbnz	r5, a542 <smp_pairing_rsp+0x14e>
		if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    a52c:	210c      	movs	r1, #12
    a52e:	4630      	mov	r0, r6
    a530:	f7fe fcab 	bl	8e8a <atomic_test_bit>
    a534:	b128      	cbz	r0, a542 <smp_pairing_rsp+0x14e>
    a536:	4f0c      	ldr	r7, [pc, #48]	; (a568 <smp_pairing_rsp+0x174>)
    a538:	683b      	ldr	r3, [r7, #0]
    a53a:	b113      	cbz	r3, a542 <smp_pairing_rsp+0x14e>
		    bt_auth && bt_auth->pairing_confirm) {
    a53c:	691b      	ldr	r3, [r3, #16]
    a53e:	2b00      	cmp	r3, #0
    a540:	d1b0      	bne.n	a4a4 <smp_pairing_rsp+0xb0>
	if (!sc_local_pkey_valid) {
    a542:	4b0b      	ldr	r3, [pc, #44]	; (a570 <smp_pairing_rsp+0x17c>)
    a544:	781d      	ldrb	r5, [r3, #0]
    a546:	b91d      	cbnz	r5, a550 <smp_pairing_rsp+0x15c>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    a548:	2106      	movs	r1, #6
    a54a:	e7cb      	b.n	a4e4 <smp_pairing_rsp+0xf0>
		return JUST_WORKS;
    a54c:	2500      	movs	r5, #0
    a54e:	e7de      	b.n	a50e <smp_pairing_rsp+0x11a>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    a550:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    a554:	210c      	movs	r1, #12
    a556:	f7fe fca5 	bl	8ea4 <atomic_set_bit>
	return sc_send_public_key(smp);
    a55a:	4620      	mov	r0, r4
}
    a55c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return sc_send_public_key(smp);
    a560:	f7ff b8da 	b.w	9718 <sc_send_public_key>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    a564:	2506      	movs	r5, #6
    a566:	e7a5      	b.n	a4b4 <smp_pairing_rsp+0xc0>
    a568:	200041b8 	.word	0x200041b8
    a56c:	00022709 	.word	0x00022709
    a570:	200008e8 	.word	0x200008e8

0000a574 <smp_pairing_random>:
{
    a574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a578:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    a57a:	f100 08d3 	add.w	r8, r0, #211	; 0xd3
{
    a57e:	b089      	sub	sp, #36	; 0x24
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    a580:	2210      	movs	r2, #16
    a582:	6889      	ldr	r1, [r1, #8]
    a584:	4640      	mov	r0, r8
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a586:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    a58a:	f7f6 f917 	bl	7bc <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a58e:	2105      	movs	r1, #5
    a590:	4630      	mov	r0, r6
    a592:	f7fe fc7a 	bl	8e8a <atomic_test_bit>
    a596:	f8d4 9000 	ldr.w	r9, [r4]
    a59a:	2800      	cmp	r0, #0
    a59c:	d16b      	bne.n	a676 <smp_pairing_random+0x102>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    a59e:	f109 0356 	add.w	r3, r9, #86	; 0x56
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    a5a2:	f104 0ae3 	add.w	sl, r4, #227	; 0xe3
    a5a6:	af04      	add	r7, sp, #16
    a5a8:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    a5aa:	f109 034f 	add.w	r3, r9, #79	; 0x4f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    a5ae:	9300      	str	r3, [sp, #0]
    a5b0:	9702      	str	r7, [sp, #8]
    a5b2:	f104 03ac 	add.w	r3, r4, #172	; 0xac
    a5b6:	f104 02a5 	add.w	r2, r4, #165	; 0xa5
    a5ba:	4641      	mov	r1, r8
    a5bc:	4650      	mov	r0, sl
    a5be:	f7ff fd51 	bl	a064 <smp_c1>
	if (err) {
    a5c2:	b108      	cbz	r0, a5c8 <smp_pairing_random+0x54>
		return BT_SMP_ERR_UNSPECIFIED;
    a5c4:	2508      	movs	r5, #8
    a5c6:	e050      	b.n	a66a <smp_pairing_random+0xf6>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    a5c8:	2210      	movs	r2, #16
    a5ca:	4639      	mov	r1, r7
    a5cc:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    a5d0:	f7f6 f8c7 	bl	762 <memcmp>
    a5d4:	2800      	cmp	r0, #0
    a5d6:	d14c      	bne.n	a672 <smp_pairing_random+0xfe>
	    conn->role == BT_HCI_ROLE_MASTER) {
    a5d8:	f899 5003 	ldrb.w	r5, [r9, #3]
    a5dc:	f104 0bc3 	add.w	fp, r4, #195	; 0xc3
	memcpy(out, r2, 8);
    a5e0:	2208      	movs	r2, #8
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a5e2:	bb2d      	cbnz	r5, a630 <smp_pairing_random+0xbc>
	memcpy(out, r2, 8);
    a5e4:	4659      	mov	r1, fp
    a5e6:	4638      	mov	r0, r7
    a5e8:	f7f6 f8e8 	bl	7bc <memcpy>
	memcpy(out + 8, r1, 8);
    a5ec:	2208      	movs	r2, #8
    a5ee:	4641      	mov	r1, r8
    a5f0:	a806      	add	r0, sp, #24
    a5f2:	f7f6 f8e3 	bl	7bc <memcpy>
	return bt_encrypt_le(k, out, out);
    a5f6:	463a      	mov	r2, r7
    a5f8:	4639      	mov	r1, r7
    a5fa:	4650      	mov	r0, sl
    a5fc:	f001 fbcc 	bl	bd98 <bt_encrypt_le>
		if (err) {
    a600:	2800      	cmp	r0, #0
    a602:	d1df      	bne.n	a5c4 <smp_pairing_random+0x50>
	return min(req->max_key_size, rsp->max_key_size);
    a604:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
    a608:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
		if (bt_conn_le_start_encryption(conn, 0, 0, tmp,
    a60c:	429a      	cmp	r2, r3
    a60e:	bf94      	ite	ls
    a610:	9202      	strls	r2, [sp, #8]
    a612:	9302      	strhi	r3, [sp, #8]
    a614:	e88d 00a0 	stmia.w	sp, {r5, r7}
    a618:	2200      	movs	r2, #0
    a61a:	2300      	movs	r3, #0
    a61c:	4648      	mov	r0, r9
    a61e:	f7fb fa6b 	bl	5af8 <bt_conn_le_start_encryption>
    a622:	2800      	cmp	r0, #0
    a624:	d1ce      	bne.n	a5c4 <smp_pairing_random+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    a626:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    a628:	4630      	mov	r0, r6
    a62a:	f7fe fc3b 	bl	8ea4 <atomic_set_bit>
			return 0;
    a62e:	e01c      	b.n	a66a <smp_pairing_random+0xf6>
	memcpy(out, r2, 8);
    a630:	4641      	mov	r1, r8
    a632:	4638      	mov	r0, r7
    a634:	f7f6 f8c2 	bl	7bc <memcpy>
	memcpy(out + 8, r1, 8);
    a638:	2208      	movs	r2, #8
    a63a:	4659      	mov	r1, fp
    a63c:	a806      	add	r0, sp, #24
    a63e:	f7f6 f8bd 	bl	7bc <memcpy>
	return bt_encrypt_le(k, out, out);
    a642:	463a      	mov	r2, r7
    a644:	4639      	mov	r1, r7
    a646:	4650      	mov	r0, sl
    a648:	f001 fba6 	bl	bd98 <bt_encrypt_le>
		if (err) {
    a64c:	4605      	mov	r5, r0
    a64e:	2800      	cmp	r0, #0
    a650:	d1b8      	bne.n	a5c4 <smp_pairing_random+0x50>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    a652:	2210      	movs	r2, #16
    a654:	4639      	mov	r1, r7
    a656:	4650      	mov	r0, sl
    a658:	f7f6 f8b0 	bl	7bc <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    a65c:	4630      	mov	r0, r6
    a65e:	2101      	movs	r1, #1
    a660:	f7fe fc20 	bl	8ea4 <atomic_set_bit>
		smp_send_pairing_random(smp);
    a664:	4620      	mov	r0, r4
    a666:	f7ff f965 	bl	9934 <smp_send_pairing_random>
}
    a66a:	4628      	mov	r0, r5
    a66c:	b009      	add	sp, #36	; 0x24
    a66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_SMP_ERR_CONFIRM_FAILED;
    a672:	2504      	movs	r5, #4
		return legacy_pairing_random(smp);
    a674:	e7f9      	b.n	a66a <smp_pairing_random+0xf6>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    a676:	f899 3003 	ldrb.w	r3, [r9, #3]
    a67a:	2b00      	cmp	r3, #0
    a67c:	d14d      	bne.n	a71a <smp_pairing_random+0x1a6>
		err = sc_smp_check_confirm(smp);
    a67e:	4620      	mov	r0, r4
    a680:	f7fe fcae 	bl	8fe0 <sc_smp_check_confirm>
		if (err) {
    a684:	4605      	mov	r5, r0
    a686:	2800      	cmp	r0, #0
    a688:	d1ef      	bne.n	a66a <smp_pairing_random+0xf6>
		switch (smp->method) {
    a68a:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    a68e:	2b03      	cmp	r3, #3
    a690:	d898      	bhi.n	a5c4 <smp_pairing_random+0x50>
    a692:	e8df f003 	tbb	[pc, r3]
    a696:	1d36      	.short	0x1d36
    a698:	021d      	.short	0x021d
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
    a69a:	ab04      	add	r3, sp, #16
    a69c:	9300      	str	r3, [sp, #0]
    a69e:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    a6a2:	4643      	mov	r3, r8
    a6a4:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    a6a8:	4846      	ldr	r0, [pc, #280]	; (a7c4 <smp_pairing_random+0x250>)
    a6aa:	f7fe fd81 	bl	91b0 <smp_g2>
    a6ae:	2800      	cmp	r0, #0
    a6b0:	d188      	bne.n	a5c4 <smp_pairing_random+0x50>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    a6b2:	4630      	mov	r0, r6
    a6b4:	2109      	movs	r1, #9
    a6b6:	f7fe fbf5 	bl	8ea4 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    a6ba:	4630      	mov	r0, r6
    a6bc:	2108      	movs	r1, #8
    a6be:	f7fe fbf1 	bl	8ea4 <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    a6c2:	4b41      	ldr	r3, [pc, #260]	; (a7c8 <smp_pairing_random+0x254>)
    a6c4:	9904      	ldr	r1, [sp, #16]
    a6c6:	681b      	ldr	r3, [r3, #0]
    a6c8:	6820      	ldr	r0, [r4, #0]
    a6ca:	689b      	ldr	r3, [r3, #8]
    a6cc:	4798      	blx	r3
			return 0;
    a6ce:	e7cc      	b.n	a66a <smp_pairing_random+0xf6>
			smp->passkey_round++;
    a6d0:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    a6d4:	3301      	adds	r3, #1
    a6d6:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20) {
    a6d8:	2b14      	cmp	r3, #20
			smp->passkey_round++;
    a6da:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
			if (smp->passkey_round == 20) {
    a6de:	d010      	beq.n	a702 <smp_pairing_random+0x18e>
			if (bt_rand(smp->prnd, 16)) {
    a6e0:	2110      	movs	r1, #16
    a6e2:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    a6e6:	f001 fb3b 	bl	bd60 <bt_rand>
    a6ea:	2800      	cmp	r0, #0
    a6ec:	f47f af6a 	bne.w	a5c4 <smp_pairing_random+0x50>
			atomic_set_bit(&smp->allowed_cmds,
    a6f0:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    a6f4:	2103      	movs	r1, #3
    a6f6:	f7fe fbd5 	bl	8ea4 <atomic_set_bit>
			smp_send_pairing_confirm(smp);
    a6fa:	4620      	mov	r0, r4
    a6fc:	f7ff fbf4 	bl	9ee8 <smp_send_pairing_confirm>
			return 0;
    a700:	e7b3      	b.n	a66a <smp_pairing_random+0xf6>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    a702:	2107      	movs	r1, #7
    a704:	4630      	mov	r0, r6
    a706:	f7fe fbc0 	bl	8e8a <atomic_test_bit>
    a70a:	b108      	cbz	r0, a710 <smp_pairing_random+0x19c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    a70c:	2108      	movs	r1, #8
    a70e:	e78b      	b.n	a628 <smp_pairing_random+0xb4>
		return compute_and_send_master_dhcheck(smp);
    a710:	4620      	mov	r0, r4
    a712:	f7fe febe 	bl	9492 <compute_and_send_master_dhcheck>
    a716:	4605      	mov	r5, r0
    a718:	e7a7      	b.n	a66a <smp_pairing_random+0xf6>
	switch (smp->method) {
    a71a:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    a71e:	2b03      	cmp	r3, #3
    a720:	f63f af50 	bhi.w	a5c4 <smp_pairing_random+0x50>
    a724:	e8df f003 	tbb	[pc, r3]
    a728:	02272719 	.word	0x02272719
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    a72c:	ab04      	add	r3, sp, #16
    a72e:	9300      	str	r3, [sp, #0]
    a730:	4642      	mov	r2, r8
    a732:	f104 03c3 	add.w	r3, r4, #195	; 0xc3
    a736:	4923      	ldr	r1, [pc, #140]	; (a7c4 <smp_pairing_random+0x250>)
    a738:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
    a73c:	f7fe fd38 	bl	91b0 <smp_g2>
    a740:	2800      	cmp	r0, #0
    a742:	f47f af3f 	bne.w	a5c4 <smp_pairing_random+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    a746:	2109      	movs	r1, #9
    a748:	4630      	mov	r0, r6
    a74a:	f7fe fbab 	bl	8ea4 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    a74e:	4b1e      	ldr	r3, [pc, #120]	; (a7c8 <smp_pairing_random+0x254>)
    a750:	9904      	ldr	r1, [sp, #16]
    a752:	681b      	ldr	r3, [r3, #0]
    a754:	6820      	ldr	r0, [r4, #0]
    a756:	689b      	ldr	r3, [r3, #8]
    a758:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    a75a:	210d      	movs	r1, #13
    a75c:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    a760:	f7fe fba0 	bl	8ea4 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    a764:	210d      	movs	r1, #13
    a766:	4630      	mov	r0, r6
    a768:	f7fe fb9c 	bl	8ea4 <atomic_set_bit>
	smp_send_pairing_random(smp);
    a76c:	4620      	mov	r0, r4
    a76e:	f7ff f8e1 	bl	9934 <smp_send_pairing_random>
	return 0;
    a772:	2500      	movs	r5, #0
    a774:	e779      	b.n	a66a <smp_pairing_random+0xf6>
		err = sc_smp_check_confirm(smp);
    a776:	4620      	mov	r0, r4
    a778:	f7fe fc32 	bl	8fe0 <sc_smp_check_confirm>
		if (err) {
    a77c:	4605      	mov	r5, r0
    a77e:	2800      	cmp	r0, #0
    a780:	f47f af73 	bne.w	a66a <smp_pairing_random+0xf6>
		atomic_set_bit(&smp->allowed_cmds,
    a784:	f104 079c 	add.w	r7, r4, #156	; 0x9c
    a788:	2103      	movs	r1, #3
    a78a:	4638      	mov	r0, r7
    a78c:	f7fe fb8a 	bl	8ea4 <atomic_set_bit>
		smp_send_pairing_random(smp);
    a790:	4620      	mov	r0, r4
    a792:	f7ff f8cf 	bl	9934 <smp_send_pairing_random>
		smp->passkey_round++;
    a796:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    a79a:	3301      	adds	r3, #1
    a79c:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20) {
    a79e:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    a7a0:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
		if (smp->passkey_round == 20) {
    a7a4:	d105      	bne.n	a7b2 <smp_pairing_random+0x23e>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    a7a6:	210d      	movs	r1, #13
    a7a8:	4638      	mov	r0, r7
    a7aa:	f7fe fb7b 	bl	8ea4 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    a7ae:	210d      	movs	r1, #13
    a7b0:	e73a      	b.n	a628 <smp_pairing_random+0xb4>
		if (bt_rand(smp->prnd, 16)) {
    a7b2:	2110      	movs	r1, #16
    a7b4:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    a7b8:	f001 fad2 	bl	bd60 <bt_rand>
    a7bc:	2800      	cmp	r0, #0
    a7be:	f47f af01 	bne.w	a5c4 <smp_pairing_random+0x50>
    a7c2:	e752      	b.n	a66a <smp_pairing_random+0xf6>
    a7c4:	200008e9 	.word	0x200008e9
    a7c8:	200041b8 	.word	0x200041b8

0000a7cc <bt_smp_send_security_req>:
{
    a7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a7d0:	4607      	mov	r7, r0
	smp = smp_chan_get(conn);
    a7d2:	f7fe fb57 	bl	8e84 <smp_chan_get>
	if (!smp) {
    a7d6:	4605      	mov	r5, r0
    a7d8:	b368      	cbz	r0, a836 <bt_smp_send_security_req+0x6a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    a7da:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
    a7de:	2104      	movs	r1, #4
    a7e0:	4610      	mov	r0, r2
    a7e2:	f7fe fb52 	bl	8e8a <atomic_test_bit>
    a7e6:	bb48      	cbnz	r0, a83c <bt_smp_send_security_req+0x70>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    a7e8:	2103      	movs	r1, #3
    a7ea:	4610      	mov	r0, r2
    a7ec:	f7fe fb4d 	bl	8e8a <atomic_test_bit>
    a7f0:	4604      	mov	r4, r0
    a7f2:	bb30      	cbnz	r0, a842 <bt_smp_send_security_req+0x76>
	if (!sec_level_reachable(conn)) {
    a7f4:	7a78      	ldrb	r0, [r7, #9]
    a7f6:	f7fe fdd1 	bl	939c <sec_level_reachable.isra.2>
    a7fa:	b328      	cbz	r0, a848 <bt_smp_send_security_req+0x7c>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_SECURITY_REQUEST,
    a7fc:	200b      	movs	r0, #11
    a7fe:	f7fe fdeb 	bl	93d8 <smp_create_pdu.isra.4>
	if (!req_buf) {
    a802:	4606      	mov	r6, r0
    a804:	b318      	cbz	r0, a84e <bt_smp_send_security_req+0x82>
	req = net_buf_add(req_buf, sizeof(*req));
    a806:	2101      	movs	r1, #1
    a808:	3008      	adds	r0, #8
    a80a:	f00d fba3 	bl	17f54 <net_buf_simple_add>
    a80e:	4680      	mov	r8, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    a810:	2009      	movs	r0, #9
    a812:	f7fe fb15 	bl	8e40 <get_auth>
    a816:	2106      	movs	r1, #6
    a818:	f888 0000 	strb.w	r0, [r8]
    a81c:	4623      	mov	r3, r4
    a81e:	4638      	mov	r0, r7
    a820:	4632      	mov	r2, r6
    a822:	f7fc f8a4 	bl	696e <bt_l2cap_send_cb>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    a826:	2105      	movs	r1, #5
    a828:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    a82c:	f7fe fb3a 	bl	8ea4 <atomic_set_bit>
}
    a830:	4620      	mov	r0, r4
    a832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOTCONN;
    a836:	f06f 0438 	mvn.w	r4, #56	; 0x38
    a83a:	e7f9      	b.n	a830 <bt_smp_send_security_req+0x64>
		return -EIO;
    a83c:	f06f 0404 	mvn.w	r4, #4
    a840:	e7f6      	b.n	a830 <bt_smp_send_security_req+0x64>
		return -EBUSY;
    a842:	f06f 040f 	mvn.w	r4, #15
    a846:	e7f3      	b.n	a830 <bt_smp_send_security_req+0x64>
		return -EINVAL;
    a848:	f06f 0415 	mvn.w	r4, #21
    a84c:	e7f0      	b.n	a830 <bt_smp_send_security_req+0x64>
		return -ENOBUFS;
    a84e:	f06f 0436 	mvn.w	r4, #54	; 0x36
    a852:	e7ed      	b.n	a830 <bt_smp_send_security_req+0x64>

0000a854 <bt_smp_send_pairing_req>:
{
    a854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a858:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    a85a:	f7fe fb13 	bl	8e84 <smp_chan_get>
	if (!smp) {
    a85e:	4605      	mov	r5, r0
    a860:	2800      	cmp	r0, #0
    a862:	d051      	beq.n	a908 <bt_smp_send_pairing_req+0xb4>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    a864:	f100 07a0 	add.w	r7, r0, #160	; 0xa0
    a868:	2104      	movs	r1, #4
    a86a:	4638      	mov	r0, r7
    a86c:	f7fe fb0d 	bl	8e8a <atomic_test_bit>
    a870:	2800      	cmp	r0, #0
    a872:	d14c      	bne.n	a90e <bt_smp_send_pairing_req+0xba>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    a874:	2103      	movs	r1, #3
    a876:	4638      	mov	r0, r7
    a878:	f7fe fb07 	bl	8e8a <atomic_test_bit>
    a87c:	2800      	cmp	r0, #0
    a87e:	d149      	bne.n	a914 <bt_smp_send_pairing_req+0xc0>
	if (!sec_level_reachable(conn)) {
    a880:	7a60      	ldrb	r0, [r4, #9]
    a882:	f7fe fd8b 	bl	939c <sec_level_reachable.isra.2>
    a886:	2800      	cmp	r0, #0
    a888:	d047      	beq.n	a91a <bt_smp_send_pairing_req+0xc6>
	if (smp_init(smp)) {
    a88a:	4628      	mov	r0, r5
    a88c:	f7fe fb1e 	bl	8ecc <smp_init>
    a890:	4604      	mov	r4, r0
    a892:	b120      	cbz	r0, a89e <bt_smp_send_pairing_req+0x4a>
		return -ENOBUFS;
    a894:	f06f 0436 	mvn.w	r4, #54	; 0x36
}
    a898:	4620      	mov	r0, r4
    a89a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    a89e:	2001      	movs	r0, #1
    a8a0:	f7fe fd9a 	bl	93d8 <smp_create_pdu.isra.4>
	if (!req_buf) {
    a8a4:	4680      	mov	r8, r0
    a8a6:	2800      	cmp	r0, #0
    a8a8:	d0f4      	beq.n	a894 <bt_smp_send_pairing_req+0x40>
	req = net_buf_add(req_buf, sizeof(*req));
    a8aa:	2106      	movs	r1, #6
    a8ac:	3008      	adds	r0, #8
    a8ae:	f00d fb51 	bl	17f54 <net_buf_simple_add>
    a8b2:	4606      	mov	r6, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    a8b4:	2009      	movs	r0, #9
    a8b6:	f7fe fac3 	bl	8e40 <get_auth>
    a8ba:	70b0      	strb	r0, [r6, #2]
	req->io_capability = get_io_capa();
    a8bc:	f7fe fa9a 	bl	8df4 <get_io_capa>
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    a8c0:	2310      	movs	r3, #16
    a8c2:	70f3      	strb	r3, [r6, #3]
	req->init_key_dist = SEND_KEYS;
    a8c4:	2205      	movs	r2, #5
	req->resp_key_dist = RECV_KEYS;
    a8c6:	2307      	movs	r3, #7
	req->io_capability = get_io_capa();
    a8c8:	7030      	strb	r0, [r6, #0]
	req->init_key_dist = SEND_KEYS;
    a8ca:	7132      	strb	r2, [r6, #4]
	req->resp_key_dist = RECV_KEYS;
    a8cc:	7173      	strb	r3, [r6, #5]
	req->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    a8ce:	7074      	strb	r4, [r6, #1]
	smp->remote_dist = RECV_KEYS;
    a8d0:	f885 317a 	strb.w	r3, [r5, #378]	; 0x17a
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    a8d4:	2301      	movs	r3, #1
    a8d6:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
	smp->local_dist = SEND_KEYS;
    a8da:	f885 2179 	strb.w	r2, [r5, #377]	; 0x179
	memcpy(smp->preq + 1, req, sizeof(*req));
    a8de:	4631      	mov	r1, r6
    a8e0:	2206      	movs	r2, #6
    a8e2:	f105 00a6 	add.w	r0, r5, #166	; 0xa6
    a8e6:	f7f5 ff69 	bl	7bc <memcpy>
	smp_send(smp, req_buf, NULL);
    a8ea:	4622      	mov	r2, r4
    a8ec:	4641      	mov	r1, r8
    a8ee:	4628      	mov	r0, r5
    a8f0:	f7fe fda2 	bl	9438 <smp_send>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    a8f4:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    a8f8:	2102      	movs	r1, #2
    a8fa:	f7fe fad3 	bl	8ea4 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    a8fe:	2103      	movs	r1, #3
    a900:	4638      	mov	r0, r7
    a902:	f7fe facf 	bl	8ea4 <atomic_set_bit>
	return 0;
    a906:	e7c7      	b.n	a898 <bt_smp_send_pairing_req+0x44>
		return -ENOTCONN;
    a908:	f06f 0438 	mvn.w	r4, #56	; 0x38
    a90c:	e7c4      	b.n	a898 <bt_smp_send_pairing_req+0x44>
		return -EIO;
    a90e:	f06f 0404 	mvn.w	r4, #4
    a912:	e7c1      	b.n	a898 <bt_smp_send_pairing_req+0x44>
		return -EBUSY;
    a914:	f06f 040f 	mvn.w	r4, #15
    a918:	e7be      	b.n	a898 <bt_smp_send_pairing_req+0x44>
		return -EINVAL;
    a91a:	f06f 0415 	mvn.w	r4, #21
    a91e:	e7bb      	b.n	a898 <bt_smp_send_pairing_req+0x44>

0000a920 <smp_security_request>:
{
    a920:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (sc_supported) {
    a922:	4b29      	ldr	r3, [pc, #164]	; (a9c8 <smp_security_request+0xa8>)
	struct bt_smp_security_request *req = (void *)buf->data;
    a924:	688a      	ldr	r2, [r1, #8]
	if (sc_supported) {
    a926:	781b      	ldrb	r3, [r3, #0]
	struct bt_conn *conn = smp->chan.chan.conn;
    a928:	6804      	ldr	r4, [r0, #0]
    a92a:	7815      	ldrb	r5, [r2, #0]
{
    a92c:	b085      	sub	sp, #20
    a92e:	4606      	mov	r6, r0
	if (sc_supported) {
    a930:	b363      	cbz	r3, a98c <smp_security_request+0x6c>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    a932:	f005 050f 	and.w	r5, r5, #15
	if (!conn->le.keys) {
    a936:	6f23      	ldr	r3, [r4, #112]	; 0x70
    a938:	2b00      	cmp	r3, #0
    a93a:	d142      	bne.n	a9c2 <smp_security_request+0xa2>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    a93c:	f104 0748 	add.w	r7, r4, #72	; 0x48
    a940:	4639      	mov	r1, r7
    a942:	2020      	movs	r0, #32
    a944:	f000 f95e 	bl	ac04 <bt_keys_find>
    a948:	6720      	str	r0, [r4, #112]	; 0x70
		if (!conn->le.keys) {
    a94a:	2800      	cmp	r0, #0
    a94c:	d139      	bne.n	a9c2 <smp_security_request+0xa2>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    a94e:	4639      	mov	r1, r7
    a950:	2004      	movs	r0, #4
    a952:	f000 f957 	bl	ac04 <bt_keys_find>
    a956:	6720      	str	r0, [r4, #112]	; 0x70
	if (!conn->le.keys) {
    a958:	b308      	cbz	r0, a99e <smp_security_request+0x7e>
	if ((auth & BT_SMP_AUTH_MITM) &&
    a95a:	0769      	lsls	r1, r5, #29
    a95c:	d419      	bmi.n	a992 <smp_security_request+0x72>
	if ((auth & BT_SMP_AUTH_SC) &&
    a95e:	f015 0f08 	tst.w	r5, #8
    a962:	6f23      	ldr	r3, [r4, #112]	; 0x70
    a964:	d122      	bne.n	a9ac <smp_security_request+0x8c>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    a966:	79da      	ldrb	r2, [r3, #7]
    a968:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    a96c:	9202      	str	r2, [sp, #8]
					conn->le.keys->ltk.val,
    a96e:	f103 021a 	add.w	r2, r3, #26
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    a972:	9201      	str	r2, [sp, #4]
    a974:	8b1b      	ldrh	r3, [r3, #24]
    a976:	9300      	str	r3, [sp, #0]
    a978:	4602      	mov	r2, r0
    a97a:	460b      	mov	r3, r1
    a97c:	4620      	mov	r0, r4
    a97e:	f7fb f8bb 	bl	5af8 <bt_conn_le_start_encryption>
    a982:	2800      	cmp	r0, #0
    a984:	da16      	bge.n	a9b4 <smp_security_request+0x94>
		return BT_SMP_ERR_UNSPECIFIED;
    a986:	2008      	movs	r0, #8
}
    a988:	b005      	add	sp, #20
    a98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    a98c:	f005 0507 	and.w	r5, r5, #7
    a990:	e7d1      	b.n	a936 <smp_security_request+0x16>
	    !atomic_test_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED)) {
    a992:	2100      	movs	r1, #0
    a994:	3008      	adds	r0, #8
    a996:	f7fe fa78 	bl	8e8a <atomic_test_bit>
	if ((auth & BT_SMP_AUTH_MITM) &&
    a99a:	2800      	cmp	r0, #0
    a99c:	d1df      	bne.n	a95e <smp_security_request+0x3e>
	if (bt_smp_send_pairing_req(conn) < 0) {
    a99e:	4620      	mov	r0, r4
    a9a0:	f7ff ff58 	bl	a854 <bt_smp_send_pairing_req>
    a9a4:	2800      	cmp	r0, #0
    a9a6:	dbee      	blt.n	a986 <smp_security_request+0x66>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    a9a8:	210c      	movs	r1, #12
    a9aa:	e004      	b.n	a9b6 <smp_security_request+0x96>
	if ((auth & BT_SMP_AUTH_SC) &&
    a9ac:	899a      	ldrh	r2, [r3, #12]
    a9ae:	0692      	lsls	r2, r2, #26
    a9b0:	d5f5      	bpl.n	a99e <smp_security_request+0x7e>
    a9b2:	e7d8      	b.n	a966 <smp_security_request+0x46>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    a9b4:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    a9b6:	f106 00a0 	add.w	r0, r6, #160	; 0xa0
    a9ba:	f7fe fa73 	bl	8ea4 <atomic_set_bit>
	return 0;
    a9be:	2000      	movs	r0, #0
    a9c0:	e7e2      	b.n	a988 <smp_security_request+0x68>
	if (!conn->le.keys) {
    a9c2:	6f20      	ldr	r0, [r4, #112]	; 0x70
    a9c4:	e7c9      	b.n	a95a <smp_security_request+0x3a>
    a9c6:	bf00      	nop
    a9c8:	20000929 	.word	0x20000929

0000a9cc <bt_smp_sign_verify>:
{
    a9cc:	b530      	push	{r4, r5, lr}
	return buf->data + buf->len;
    a9ce:	898b      	ldrh	r3, [r1, #12]
    a9d0:	460c      	mov	r4, r1
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    a9d2:	6889      	ldr	r1, [r1, #8]
{
    a9d4:	b085      	sub	sp, #20
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    a9d6:	3b0c      	subs	r3, #12
{
    a9d8:	4605      	mov	r5, r0
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    a9da:	4419      	add	r1, r3
    a9dc:	220c      	movs	r2, #12
    a9de:	a801      	add	r0, sp, #4
    a9e0:	f7f5 feec 	bl	7bc <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    a9e4:	f105 0148 	add.w	r1, r5, #72	; 0x48
    a9e8:	2010      	movs	r0, #16
    a9ea:	f000 f90b 	bl	ac04 <bt_keys_find>
	if (!keys) {
    a9ee:	4605      	mov	r5, r0
    a9f0:	b308      	cbz	r0, aa36 <bt_smp_sign_verify+0x6a>
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
    a9f2:	a904      	add	r1, sp, #16
    a9f4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    a9f6:	f841 3d10 	str.w	r3, [r1, #-16]!
    a9fa:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
    a9fc:	68a0      	ldr	r0, [r4, #8]
    a9fe:	3b0c      	subs	r3, #12
    aa00:	2204      	movs	r2, #4
    aa02:	4418      	add	r0, r3
    aa04:	f7f5 feda 	bl	7bc <memcpy>
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
    aa08:	89a2      	ldrh	r2, [r4, #12]
    aa0a:	68a1      	ldr	r1, [r4, #8]
    aa0c:	3a0c      	subs	r2, #12
    aa0e:	b292      	uxth	r2, r2
    aa10:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    aa14:	f7fe fa90 	bl	8f38 <smp_sign_buf>
	if (err) {
    aa18:	b980      	cbnz	r0, aa3c <bt_smp_sign_verify+0x70>
    aa1a:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
    aa1c:	68a1      	ldr	r1, [r4, #8]
    aa1e:	3b0c      	subs	r3, #12
    aa20:	220c      	movs	r2, #12
    aa22:	4419      	add	r1, r3
    aa24:	a801      	add	r0, sp, #4
    aa26:	f7f5 fe9c 	bl	762 <memcmp>
    aa2a:	b950      	cbnz	r0, aa42 <bt_smp_sign_verify+0x76>
	keys->remote_csrk.cnt++;
    aa2c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    aa2e:	3301      	adds	r3, #1
    aa30:	66eb      	str	r3, [r5, #108]	; 0x6c
}
    aa32:	b005      	add	sp, #20
    aa34:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
    aa36:	f06f 0001 	mvn.w	r0, #1
    aa3a:	e7fa      	b.n	aa32 <bt_smp_sign_verify+0x66>
		return -EIO;
    aa3c:	f06f 0004 	mvn.w	r0, #4
    aa40:	e7f7      	b.n	aa32 <bt_smp_sign_verify+0x66>
		return -EBADMSG;
    aa42:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    aa46:	e7f4      	b.n	aa32 <bt_smp_sign_verify+0x66>

0000aa48 <bt_smp_update_keys>:
{
    aa48:	b570      	push	{r4, r5, r6, lr}
    aa4a:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    aa4c:	f7fe fa1a 	bl	8e84 <smp_chan_get>
	if (!smp) {
    aa50:	4605      	mov	r5, r0
    aa52:	2800      	cmp	r0, #0
    aa54:	d050      	beq.n	aaf8 <bt_smp_update_keys+0xb0>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    aa56:	f100 06a0 	add.w	r6, r0, #160	; 0xa0
    aa5a:	2103      	movs	r1, #3
    aa5c:	4630      	mov	r0, r6
    aa5e:	f7fe fa14 	bl	8e8a <atomic_test_bit>
    aa62:	2800      	cmp	r0, #0
    aa64:	d048      	beq.n	aaf8 <bt_smp_update_keys+0xb0>
	if (conn->le.keys) {
    aa66:	6f20      	ldr	r0, [r4, #112]	; 0x70
    aa68:	b108      	cbz	r0, aa6e <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
    aa6a:	f000 f895 	bl	ab98 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(&conn->le.dst);
    aa6e:	f104 0048 	add.w	r0, r4, #72	; 0x48
    aa72:	f000 f89f 	bl	abb4 <bt_keys_get_addr>
    aa76:	6720      	str	r0, [r4, #112]	; 0x70
	if (!conn->le.keys) {
    aa78:	b928      	cbnz	r0, aa86 <bt_smp_update_keys+0x3e>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    aa7a:	4628      	mov	r0, r5
    aa7c:	2108      	movs	r1, #8
}
    aa7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    aa82:	f7ff b85d 	b.w	9b40 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    aa86:	210b      	movs	r1, #11
    aa88:	4630      	mov	r0, r6
    aa8a:	f7fe f9fe 	bl	8e8a <atomic_test_bit>
    aa8e:	b120      	cbz	r0, aa9a <bt_smp_update_keys+0x52>
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_DEBUG);
    aa90:	6f20      	ldr	r0, [r4, #112]	; 0x70
    aa92:	2101      	movs	r1, #1
    aa94:	3008      	adds	r0, #8
    aa96:	f7fe fa05 	bl	8ea4 <atomic_set_bit>
	switch (smp->method) {
    aa9a:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    aa9e:	6f20      	ldr	r0, [r4, #112]	; 0x70
    aaa0:	3b01      	subs	r3, #1
    aaa2:	2b02      	cmp	r3, #2
    aaa4:	d829      	bhi.n	aafa <bt_smp_update_keys+0xb2>
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    aaa6:	2100      	movs	r1, #0
    aaa8:	3008      	adds	r0, #8
    aaaa:	f7fe f9fb 	bl	8ea4 <atomic_set_bit>
	return min(req->max_key_size, rsp->max_key_size);
    aaae:	f895 10a9 	ldrb.w	r1, [r5, #169]	; 0xa9
    aab2:	f895 30b0 	ldrb.w	r3, [r5, #176]	; 0xb0
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    aab6:	6f22      	ldr	r2, [r4, #112]	; 0x70
	return min(req->max_key_size, rsp->max_key_size);
    aab8:	428b      	cmp	r3, r1
    aaba:	bf28      	it	cs
    aabc:	460b      	movcs	r3, r1
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    aabe:	71d3      	strb	r3, [r2, #7]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    aac0:	2105      	movs	r1, #5
    aac2:	4630      	mov	r0, r6
    aac4:	f7fe f9e1 	bl	8e8a <atomic_test_bit>
    aac8:	b1b0      	cbz	r0, aaf8 <bt_smp_update_keys+0xb0>
	    atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    aaca:	210a      	movs	r1, #10
    aacc:	4630      	mov	r0, r6
    aace:	f7fe f9dc 	bl	8e8a <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    aad2:	b188      	cbz	r0, aaf8 <bt_smp_update_keys+0xb0>
		bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    aad4:	2120      	movs	r1, #32
    aad6:	6f20      	ldr	r0, [r4, #112]	; 0x70
    aad8:	f000 f8f4 	bl	acc4 <bt_keys_add_type>
		memcpy(conn->le.keys->ltk.val, smp->tk,
    aadc:	6f20      	ldr	r0, [r4, #112]	; 0x70
    aade:	2210      	movs	r2, #16
    aae0:	f105 01e3 	add.w	r1, r5, #227	; 0xe3
    aae4:	301a      	adds	r0, #26
    aae6:	f7f5 fe69 	bl	7bc <memcpy>
		conn->le.keys->ltk.rand = 0;
    aaea:	6f23      	ldr	r3, [r4, #112]	; 0x70
    aaec:	2000      	movs	r0, #0
    aaee:	2100      	movs	r1, #0
    aaf0:	e9c3 0104 	strd	r0, r1, [r3, #16]
		conn->le.keys->ltk.ediv = 0;
    aaf4:	2200      	movs	r2, #0
    aaf6:	831a      	strh	r2, [r3, #24]
    aaf8:	bd70      	pop	{r4, r5, r6, pc}
    aafa:	3008      	adds	r0, #8
    aafc:	f3bf 8f5b 	dmb	ish
    ab00:	e850 3f00 	ldrex	r3, [r0]
    ab04:	f023 0301 	bic.w	r3, r3, #1
    ab08:	e840 3200 	strex	r2, r3, [r0]
    ab0c:	2a00      	cmp	r2, #0
    ab0e:	d1f7      	bne.n	ab00 <bt_smp_update_keys+0xb8>
    ab10:	f3bf 8f5b 	dmb	ish
    ab14:	e7cb      	b.n	aaae <bt_smp_update_keys+0x66>

0000ab16 <bt_smp_get_tk>:
{
    ab16:	b570      	push	{r4, r5, r6, lr}
    ab18:	460e      	mov	r6, r1
	smp = smp_chan_get(conn);
    ab1a:	f7fe f9b3 	bl	8e84 <smp_chan_get>
	if (!smp) {
    ab1e:	4605      	mov	r5, r0
    ab20:	b908      	cbnz	r0, ab26 <bt_smp_get_tk+0x10>
		return false;
    ab22:	2000      	movs	r0, #0
    ab24:	bd70      	pop	{r4, r5, r6, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    ab26:	2103      	movs	r1, #3
    ab28:	30a0      	adds	r0, #160	; 0xa0
    ab2a:	f7fe f9ae 	bl	8e8a <atomic_test_bit>
    ab2e:	2800      	cmp	r0, #0
    ab30:	d0f7      	beq.n	ab22 <bt_smp_get_tk+0xc>
	return min(req->max_key_size, rsp->max_key_size);
    ab32:	f895 40b0 	ldrb.w	r4, [r5, #176]	; 0xb0
    ab36:	f895 30a9 	ldrb.w	r3, [r5, #169]	; 0xa9
    ab3a:	429c      	cmp	r4, r3
    ab3c:	bf28      	it	cs
    ab3e:	461c      	movcs	r4, r3
	memcpy(tk, smp->tk, enc_size);
    ab40:	4622      	mov	r2, r4
    ab42:	f105 01e3 	add.w	r1, r5, #227	; 0xe3
    ab46:	4630      	mov	r0, r6
    ab48:	f7f5 fe38 	bl	7bc <memcpy>
	if (enc_size < sizeof(smp->tk)) {
    ab4c:	2c0f      	cmp	r4, #15
    ab4e:	d805      	bhi.n	ab5c <bt_smp_get_tk+0x46>
		memset(tk + enc_size, 0, sizeof(smp->tk) - enc_size);
    ab50:	f1c4 0210 	rsb	r2, r4, #16
    ab54:	2100      	movs	r1, #0
    ab56:	1930      	adds	r0, r6, r4
    ab58:	f7f5 fe5c 	bl	814 <memset>
	return true;
    ab5c:	2001      	movs	r0, #1
}
    ab5e:	bd70      	pop	{r4, r5, r6, pc}

0000ab60 <bt_smp_init>:
	return (bt_dev.supported_commands[34] & 0x02) &&
	       (bt_dev.supported_commands[34] & 0x04);
}

int bt_smp_init(void)
{
    ab60:	b508      	push	{r3, lr}
	return (bt_dev.supported_commands[34] & 0x02) &&
    ab62:	4b09      	ldr	r3, [pc, #36]	; (ab88 <bt_smp_init+0x28>)
	if (IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) && !sc_supported) {
		BT_ERR("SC Only Mode selected but LE SC not supported");
		return -ENOENT;
	}

	bt_l2cap_le_fixed_chan_register(&chan);
    ab64:	4809      	ldr	r0, [pc, #36]	; (ab8c <bt_smp_init+0x2c>)
	return (bt_dev.supported_commands[34] & 0x02) &&
    ab66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    ab6a:	f003 0306 	and.w	r3, r3, #6
    ab6e:	1f9a      	subs	r2, r3, #6
    ab70:	4253      	negs	r3, r2
    ab72:	4153      	adcs	r3, r2
    ab74:	4a06      	ldr	r2, [pc, #24]	; (ab90 <bt_smp_init+0x30>)
    ab76:	7013      	strb	r3, [r2, #0]
	bt_l2cap_le_fixed_chan_register(&chan);
    ab78:	f7fb fe9a 	bl	68b0 <bt_l2cap_le_fixed_chan_register>
	}
#endif

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
    ab7c:	4805      	ldr	r0, [pc, #20]	; (ab94 <bt_smp_init+0x34>)
    ab7e:	f7fa feb1 	bl	58e4 <bt_pub_key_gen>

	return smp_self_test();
}
    ab82:	2000      	movs	r0, #0
    ab84:	bd08      	pop	{r3, pc}
    ab86:	bf00      	nop
    ab88:	2000de20 	.word	0x2000de20
    ab8c:	2000e0d4 	.word	0x2000e0d4
    ab90:	20000929 	.word	0x20000929
    ab94:	2000e0f4 	.word	0x2000e0f4

0000ab98 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
	BT_DBG("keys for %s", bt_addr_le_str(&keys->addr));

	if (keys->keys & BT_KEYS_IRK) {
    ab98:	8983      	ldrh	r3, [r0, #12]
    ab9a:	079b      	lsls	r3, r3, #30
{
    ab9c:	b510      	push	{r4, lr}
    ab9e:	4604      	mov	r4, r0
	if (keys->keys & BT_KEYS_IRK) {
    aba0:	d501      	bpl.n	aba6 <bt_keys_clear+0xe>
		bt_id_del(keys);
    aba2:	f7f9 f887 	bl	3cb4 <bt_id_del>
	}

	memset(keys, 0, sizeof(*keys));
    aba6:	4620      	mov	r0, r4
    aba8:	2290      	movs	r2, #144	; 0x90
    abaa:	2100      	movs	r1, #0
}
    abac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(keys, 0, sizeof(*keys));
    abb0:	f7f5 be30 	b.w	814 <memset>

0000abb4 <bt_keys_get_addr>:
{
    abb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    abb6:	4605      	mov	r5, r0
	return memcmp(a, b, sizeof(*a));
    abb8:	4601      	mov	r1, r0
    abba:	2207      	movs	r2, #7
    abbc:	480b      	ldr	r0, [pc, #44]	; (abec <bt_keys_get_addr+0x38>)
    abbe:	f7f5 fdd0 	bl	762 <memcmp>
		if (!bt_addr_le_cmp(&keys->addr, addr)) {
    abc2:	b170      	cbz	r0, abe2 <bt_keys_get_addr+0x2e>
		if (!bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    abc4:	2400      	movs	r4, #0
    abc6:	2207      	movs	r2, #7
    abc8:	4669      	mov	r1, sp
    abca:	4808      	ldr	r0, [pc, #32]	; (abec <bt_keys_get_addr+0x38>)
    abcc:	9400      	str	r4, [sp, #0]
    abce:	f8cd 4003 	str.w	r4, [sp, #3]
    abd2:	f7f5 fdc6 	bl	762 <memcmp>
    abd6:	b938      	cbnz	r0, abe8 <bt_keys_get_addr+0x34>
	memcpy(dst, src, sizeof(*dst));
    abd8:	2207      	movs	r2, #7
    abda:	4629      	mov	r1, r5
    abdc:	4803      	ldr	r0, [pc, #12]	; (abec <bt_keys_get_addr+0x38>)
    abde:	f7f5 fded 	bl	7bc <memcpy>
		keys = &key_pool[i];
    abe2:	4802      	ldr	r0, [pc, #8]	; (abec <bt_keys_get_addr+0x38>)
}
    abe4:	b003      	add	sp, #12
    abe6:	bd30      	pop	{r4, r5, pc}
	return NULL;
    abe8:	4620      	mov	r0, r4
    abea:	e7fb      	b.n	abe4 <bt_keys_get_addr+0x30>
    abec:	20000930 	.word	0x20000930

0000abf0 <bt_keys_foreach>:
		if ((key_pool[i].keys & type)) {
    abf0:	4b03      	ldr	r3, [pc, #12]	; (ac00 <bt_keys_foreach+0x10>)
    abf2:	899a      	ldrh	r2, [r3, #12]
    abf4:	4202      	tst	r2, r0
    abf6:	d001      	beq.n	abfc <bt_keys_foreach+0xc>
			func(&key_pool[i]);
    abf8:	4618      	mov	r0, r3
    abfa:	4708      	bx	r1
    abfc:	4770      	bx	lr
    abfe:	bf00      	nop
    ac00:	20000930 	.word	0x20000930

0000ac04 <bt_keys_find>:
{
    ac04:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) &&
    ac06:	4c06      	ldr	r4, [pc, #24]	; (ac20 <bt_keys_find+0x1c>)
    ac08:	89a3      	ldrh	r3, [r4, #12]
    ac0a:	4203      	tst	r3, r0
    ac0c:	d004      	beq.n	ac18 <bt_keys_find+0x14>
	return memcmp(a, b, sizeof(*a));
    ac0e:	2207      	movs	r2, #7
    ac10:	4620      	mov	r0, r4
    ac12:	f7f5 fda6 	bl	762 <memcmp>
    ac16:	b108      	cbz	r0, ac1c <bt_keys_find+0x18>
	return NULL;
    ac18:	2000      	movs	r0, #0
    ac1a:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    ac1c:	4620      	mov	r0, r4
}
    ac1e:	bd10      	pop	{r4, pc}
    ac20:	20000930 	.word	0x20000930

0000ac24 <bt_keys_get_type>:
{
    ac24:	b538      	push	{r3, r4, r5, lr}
    ac26:	4604      	mov	r4, r0
    ac28:	460d      	mov	r5, r1
	keys = bt_keys_find(type, addr);
    ac2a:	f7ff ffeb 	bl	ac04 <bt_keys_find>
	if (keys) {
    ac2e:	b930      	cbnz	r0, ac3e <bt_keys_get_type+0x1a>
	keys = bt_keys_get_addr(addr);
    ac30:	4628      	mov	r0, r5
    ac32:	f7ff ffbf 	bl	abb4 <bt_keys_get_addr>
	if (!keys) {
    ac36:	b110      	cbz	r0, ac3e <bt_keys_get_type+0x1a>
	keys->keys |= type;
    ac38:	8983      	ldrh	r3, [r0, #12]
    ac3a:	431c      	orrs	r4, r3
    ac3c:	8184      	strh	r4, [r0, #12]
}
    ac3e:	bd38      	pop	{r3, r4, r5, pc}

0000ac40 <bt_keys_find_irk>:
{
    ac40:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    ac42:	7803      	ldrb	r3, [r0, #0]
    ac44:	2b01      	cmp	r3, #1
    ac46:	4605      	mov	r5, r0
    ac48:	d001      	beq.n	ac4e <bt_keys_find_irk+0xe>
		return NULL;
    ac4a:	2000      	movs	r0, #0
    ac4c:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    ac4e:	7983      	ldrb	r3, [r0, #6]
    ac50:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ac54:	2b40      	cmp	r3, #64	; 0x40
    ac56:	d1f8      	bne.n	ac4a <bt_keys_find_irk+0xa>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    ac58:	4c10      	ldr	r4, [pc, #64]	; (ac9c <bt_keys_find_irk+0x5c>)
    ac5a:	89a3      	ldrh	r3, [r4, #12]
    ac5c:	f013 0f02 	tst.w	r3, #2
    ac60:	4626      	mov	r6, r4
    ac62:	d110      	bne.n	ac86 <bt_keys_find_irk+0x46>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    ac64:	89b3      	ldrh	r3, [r6, #12]
    ac66:	079b      	lsls	r3, r3, #30
    ac68:	d5ef      	bpl.n	ac4a <bt_keys_find_irk+0xa>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    ac6a:	3501      	adds	r5, #1
    ac6c:	4629      	mov	r1, r5
    ac6e:	480c      	ldr	r0, [pc, #48]	; (aca0 <bt_keys_find_irk+0x60>)
    ac70:	f7f8 fc6f 	bl	3552 <bt_rpa_irk_matches>
    ac74:	2800      	cmp	r0, #0
    ac76:	d0e8      	beq.n	ac4a <bt_keys_find_irk+0xa>
	memcpy(dst, src, sizeof(*dst));
    ac78:	2206      	movs	r2, #6
    ac7a:	4629      	mov	r1, r5
    ac7c:	4809      	ldr	r0, [pc, #36]	; (aca4 <bt_keys_find_irk+0x64>)
    ac7e:	f7f5 fd9d 	bl	7bc <memcpy>
			return &key_pool[i];
    ac82:	4806      	ldr	r0, [pc, #24]	; (ac9c <bt_keys_find_irk+0x5c>)
    ac84:	bd70      	pop	{r4, r5, r6, pc}
	return memcmp(a, b, sizeof(*a));
    ac86:	2206      	movs	r2, #6
    ac88:	f104 0140 	add.w	r1, r4, #64	; 0x40
    ac8c:	3001      	adds	r0, #1
    ac8e:	f7f5 fd68 	bl	762 <memcmp>
		if (!bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
    ac92:	2800      	cmp	r0, #0
    ac94:	d1e6      	bne.n	ac64 <bt_keys_find_irk+0x24>
			return &key_pool[i];
    ac96:	4620      	mov	r0, r4
}
    ac98:	bd70      	pop	{r4, r5, r6, pc}
    ac9a:	bf00      	nop
    ac9c:	20000930 	.word	0x20000930
    aca0:	20000960 	.word	0x20000960
    aca4:	20000970 	.word	0x20000970

0000aca8 <bt_keys_find_addr>:
	return memcmp(a, b, sizeof(*a));
    aca8:	4601      	mov	r1, r0
{
    acaa:	b508      	push	{r3, lr}
    acac:	2207      	movs	r2, #7
    acae:	4804      	ldr	r0, [pc, #16]	; (acc0 <bt_keys_find_addr+0x18>)
    acb0:	f7f5 fd57 	bl	762 <memcmp>
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    acb4:	2800      	cmp	r0, #0
}
    acb6:	4802      	ldr	r0, [pc, #8]	; (acc0 <bt_keys_find_addr+0x18>)
    acb8:	bf18      	it	ne
    acba:	2000      	movne	r0, #0
    acbc:	bd08      	pop	{r3, pc}
    acbe:	bf00      	nop
    acc0:	20000930 	.word	0x20000930

0000acc4 <bt_keys_add_type>:
	keys->keys |= type;
    acc4:	8983      	ldrh	r3, [r0, #12]
    acc6:	4319      	orrs	r1, r3
    acc8:	8181      	strh	r1, [r0, #12]
    acca:	4770      	bx	lr

0000accc <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    accc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    acce:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    acd0:	1dc3      	adds	r3, r0, #7
{
    acd2:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    acd4:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    acd8:	1e50      	subs	r0, r2, #1
{
    acda:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    acdc:	b280      	uxth	r0, r0
{
    acde:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    ace0:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    ace2:	2100      	movs	r1, #0
    ace4:	2204      	movs	r2, #4
    ace6:	fb06 5000 	mla	r0, r6, r0, r5
    acea:	f7f5 fd93 	bl	814 <memset>
    acee:	3c02      	subs	r4, #2
    acf0:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    acf2:	f64f 77ff 	movw	r7, #65535	; 0xffff
    acf6:	42bc      	cmp	r4, r7
    acf8:	d101      	bne.n	acfe <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    acfa:	b003      	add	sp, #12
    acfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    acfe:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    ad02:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    ad04:	2204      	movs	r2, #4
    ad06:	1b80      	subs	r0, r0, r6
    ad08:	eb0d 0102 	add.w	r1, sp, r2
    ad0c:	4428      	add	r0, r5
    ad0e:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    ad10:	9301      	str	r3, [sp, #4]
    ad12:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    ad14:	f7f5 fd52 	bl	7bc <memcpy>
    ad18:	e7ed      	b.n	acf6 <mem_init+0x2a>

0000ad1a <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    ad1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    ad1c:	6805      	ldr	r5, [r0, #0]
{
    ad1e:	4606      	mov	r6, r0
	if (*mem_head) {
    ad20:	b195      	cbz	r5, ad48 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    ad22:	1deb      	adds	r3, r5, #7
    ad24:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    ad28:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    ad2a:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    ad2c:	4629      	mov	r1, r5
    ad2e:	eb0d 0002 	add.w	r0, sp, r2
    ad32:	f7f5 fd43 	bl	7bc <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    ad36:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    ad38:	3c01      	subs	r4, #1
    ad3a:	b2a4      	uxth	r4, r4
		if (head) {
    ad3c:	b11b      	cbz	r3, ad46 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    ad3e:	1dda      	adds	r2, r3, #7
    ad40:	f022 0203 	bic.w	r2, r2, #3
    ad44:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    ad46:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    ad48:	4628      	mov	r0, r5
    ad4a:	b002      	add	sp, #8
    ad4c:	bd70      	pop	{r4, r5, r6, pc}

0000ad4e <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    ad4e:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    ad50:	680c      	ldr	r4, [r1, #0]
{
    ad52:	4606      	mov	r6, r0
    ad54:	460d      	mov	r5, r1
	if (*mem_head) {
    ad56:	b11c      	cbz	r4, ad60 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    ad58:	1de3      	adds	r3, r4, #7
    ad5a:	f023 0303 	bic.w	r3, r3, #3
    ad5e:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    ad60:	2204      	movs	r2, #4
    ad62:	4629      	mov	r1, r5
    ad64:	4630      	mov	r0, r6
    ad66:	f7f5 fd29 	bl	7bc <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    ad6a:	1df2      	adds	r2, r6, #7
    ad6c:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    ad70:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    ad72:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    ad74:	602e      	str	r6, [r5, #0]
    ad76:	bd70      	pop	{r4, r5, r6, pc}

0000ad78 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    ad78:	b118      	cbz	r0, ad82 <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    ad7a:	3007      	adds	r0, #7
    ad7c:	f020 0003 	bic.w	r0, r0, #3
    ad80:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    ad82:	4770      	bx	lr

0000ad84 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    ad84:	fb02 0001 	mla	r0, r2, r1, r0
    ad88:	4770      	bx	lr

0000ad8a <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    ad8a:	1a40      	subs	r0, r0, r1
    ad8c:	b280      	uxth	r0, r0
}
    ad8e:	fbb0 f0f2 	udiv	r0, r0, r2
    ad92:	4770      	bx	lr

0000ad94 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    ad94:	b510      	push	{r4, lr}
	src += len;
    ad96:	4411      	add	r1, r2
    ad98:	3801      	subs	r0, #1
	while (len--) {
    ad9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ad9e:	3a01      	subs	r2, #1
    ada0:	b292      	uxth	r2, r2
    ada2:	429a      	cmp	r2, r3
    ada4:	d100      	bne.n	ada8 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    ada6:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    ada8:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    adac:	f800 4f01 	strb.w	r4, [r0, #1]!
    adb0:	e7f5      	b.n	ad9e <mem_rcopy+0xa>

0000adb2 <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    adb2:	4401      	add	r1, r0
	while (len--) {
    adb4:	4288      	cmp	r0, r1
    adb6:	d101      	bne.n	adbc <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    adb8:	2000      	movs	r0, #0
    adba:	4770      	bx	lr
		if (*src++) {
    adbc:	f810 3b01 	ldrb.w	r3, [r0], #1
    adc0:	2b00      	cmp	r3, #0
    adc2:	d0f7      	beq.n	adb4 <mem_nz+0x2>
			return 1;
    adc4:	2001      	movs	r0, #1
}
    adc6:	4770      	bx	lr

0000adc8 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    adc8:	6010      	str	r0, [r2, #0]
    adca:	6008      	str	r0, [r1, #0]

	return link;
}
    adcc:	4770      	bx	lr

0000adce <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    adce:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    add0:	6814      	ldr	r4, [r2, #0]
    add2:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    add4:	6814      	ldr	r4, [r2, #0]
    add6:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    add8:	6010      	str	r0, [r2, #0]

	return link;
}
    adda:	bd10      	pop	{r4, pc}

0000addc <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    addc:	4288      	cmp	r0, r1
    adde:	d003      	beq.n	ade8 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    ade0:	b11a      	cbz	r2, adea <memq_peek+0xe>
		*mem = head->mem;
    ade2:	6843      	ldr	r3, [r0, #4]
    ade4:	6013      	str	r3, [r2, #0]
    ade6:	4770      	bx	lr
		return NULL;
    ade8:	2000      	movs	r0, #0
	}

	return head;
}
    adea:	4770      	bx	lr

0000adec <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    adec:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    adee:	4283      	cmp	r3, r0
    adf0:	d009      	beq.n	ae06 <memq_dequeue+0x1a>
	if (mem) {
    adf2:	b122      	cbz	r2, adfe <memq_dequeue+0x12>
		*mem = head->mem;
    adf4:	6858      	ldr	r0, [r3, #4]
    adf6:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    adf8:	681a      	ldr	r2, [r3, #0]
    adfa:	600a      	str	r2, [r1, #0]

	return link;
    adfc:	e001      	b.n	ae02 <memq_dequeue+0x16>
	if (!link) {
    adfe:	2b00      	cmp	r3, #0
    ae00:	d1fa      	bne.n	adf8 <memq_dequeue+0xc>
}
    ae02:	4618      	mov	r0, r3
    ae04:	4770      	bx	lr
		return NULL;
    ae06:	2300      	movs	r3, #0
    ae08:	e7fb      	b.n	ae02 <memq_dequeue+0x16>
	...

0000ae0c <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    ae0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    ae10:	4f11      	ldr	r7, [pc, #68]	; (ae58 <mayfly_init+0x4c>)
    ae12:	f8df 9048 	ldr.w	r9, [pc, #72]	; ae5c <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    ae16:	2604      	movs	r6, #4
	while (callee_id--) {
    ae18:	3e01      	subs	r6, #1
    ae1a:	b2f6      	uxtb	r6, r6
    ae1c:	2eff      	cmp	r6, #255	; 0xff
    ae1e:	d019      	beq.n	ae54 <mayfly_init+0x48>
    ae20:	b233      	sxth	r3, r6
    ae22:	ea4f 0883 	mov.w	r8, r3, lsl #2
    ae26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    ae2a:	011d      	lsls	r5, r3, #4
    ae2c:	2404      	movs	r4, #4
    ae2e:	f04f 0a0c 	mov.w	sl, #12
    ae32:	e00a      	b.n	ae4a <mayfly_init+0x3e>
    ae34:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    ae38:	1d0a      	adds	r2, r1, #4
    ae3a:	eb04 0008 	add.w	r0, r4, r8
    ae3e:	443a      	add	r2, r7
    ae40:	4439      	add	r1, r7
    ae42:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    ae46:	f7ff ffbf 	bl	adc8 <memq_init>
		while (caller_id--) {
    ae4a:	3c01      	subs	r4, #1
    ae4c:	b2e4      	uxtb	r4, r4
    ae4e:	2cff      	cmp	r4, #255	; 0xff
    ae50:	d1f0      	bne.n	ae34 <mayfly_init+0x28>
    ae52:	e7e1      	b.n	ae18 <mayfly_init+0xc>
    ae54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ae58:	20000a40 	.word	0x20000a40
    ae5c:	200009c0 	.word	0x200009c0

0000ae60 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    ae60:	b4f0      	push	{r4, r5, r6, r7}
    ae62:	4b12      	ldr	r3, [pc, #72]	; (aeac <mayfly_enable+0x4c>)
    ae64:	4605      	mov	r5, r0
    ae66:	460f      	mov	r7, r1
    ae68:	260c      	movs	r6, #12
    ae6a:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    ae6c:	b172      	cbz	r2, ae8c <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    ae6e:	4361      	muls	r1, r4
    ae70:	fb06 1400 	mla	r4, r6, r0, r1
    ae74:	4423      	add	r3, r4
    ae76:	7a59      	ldrb	r1, [r3, #9]
    ae78:	7a18      	ldrb	r0, [r3, #8]
    ae7a:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    ae7c:	bf04      	itt	eq
    ae7e:	3101      	addeq	r1, #1
    ae80:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    ae82:	4628      	mov	r0, r5
    ae84:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    ae86:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    ae88:	f00c beae 	b.w	17be8 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    ae8c:	434c      	muls	r4, r1
    ae8e:	fb06 4400 	mla	r4, r6, r0, r4
    ae92:	4423      	add	r3, r4
    ae94:	7a9c      	ldrb	r4, [r3, #10]
    ae96:	7ada      	ldrb	r2, [r3, #11]
    ae98:	42a2      	cmp	r2, r4
    ae9a:	d104      	bne.n	aea6 <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    ae9c:	3201      	adds	r2, #1
    ae9e:	729a      	strb	r2, [r3, #10]
}
    aea0:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    aea2:	f00c becf 	b.w	17c44 <mayfly_pend>
}
    aea6:	bcf0      	pop	{r4, r5, r6, r7}
    aea8:	4770      	bx	lr
    aeaa:	bf00      	nop
    aeac:	20000a40 	.word	0x20000a40

0000aeb0 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    aeb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aeb2:	4605      	mov	r5, r0
    aeb4:	460e      	mov	r6, r1
    aeb6:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    aeb8:	b18a      	cbz	r2, aede <mayfly_enqueue+0x2e>
    aeba:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    aebc:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    aebe:	7820      	ldrb	r0, [r4, #0]
    aec0:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    aec2:	f010 0703 	ands.w	r7, r0, #3
    aec6:	d029      	beq.n	af1c <mayfly_enqueue+0x6c>
		if (chain) {
    aec8:	b303      	cbz	r3, af0c <mayfly_enqueue+0x5c>
			if (state != 1) {
    aeca:	2f01      	cmp	r7, #1
    aecc:	d039      	beq.n	af42 <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    aece:	3201      	adds	r2, #1
    aed0:	b2d2      	uxtb	r2, r2
    aed2:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    aed4:	4631      	mov	r1, r6
    aed6:	4628      	mov	r0, r5
    aed8:	f00c feb4 	bl	17c44 <mayfly_pend>
    aedc:	e01c      	b.n	af18 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    aede:	f00c fe9f 	bl	17c20 <mayfly_prio_is_equal>
    aee2:	2800      	cmp	r0, #0
    aee4:	d0e9      	beq.n	aeba <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    aee6:	4631      	mov	r1, r6
    aee8:	4628      	mov	r0, r5
    aeea:	f00c fe8b 	bl	17c04 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    aeee:	2800      	cmp	r0, #0
    aef0:	d0e3      	beq.n	aeba <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    aef2:	2330      	movs	r3, #48	; 0x30
    aef4:	220c      	movs	r2, #12
    aef6:	4373      	muls	r3, r6
    aef8:	fb02 3305 	mla	r3, r2, r5, r3
    aefc:	4a12      	ldr	r2, [pc, #72]	; (af48 <mayfly_enqueue+0x98>)
    aefe:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    af00:	7a93      	ldrb	r3, [r2, #10]
    af02:	7ad2      	ldrb	r2, [r2, #11]
    af04:	1a9b      	subs	r3, r3, r2
    af06:	bf18      	it	ne
    af08:	2301      	movne	r3, #1
    af0a:	e7d7      	b.n	aebc <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    af0c:	3202      	adds	r2, #2
    af0e:	b2d2      	uxtb	r2, r2
    af10:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    af12:	68e3      	ldr	r3, [r4, #12]
    af14:	68a0      	ldr	r0, [r4, #8]
    af16:	4798      	blx	r3
		return 0;
    af18:	2000      	movs	r0, #0
    af1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    af1c:	2b00      	cmp	r3, #0
    af1e:	d0f8      	beq.n	af12 <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    af20:	3201      	adds	r2, #1
    af22:	b2d2      	uxtb	r2, r2
    af24:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    af26:	2304      	movs	r3, #4
    af28:	2230      	movs	r2, #48	; 0x30
    af2a:	fb12 3206 	smlabb	r2, r2, r6, r3
    af2e:	230c      	movs	r3, #12
    af30:	fb13 2305 	smlabb	r3, r3, r5, r2
    af34:	4a04      	ldr	r2, [pc, #16]	; (af48 <mayfly_enqueue+0x98>)
    af36:	6860      	ldr	r0, [r4, #4]
    af38:	441a      	add	r2, r3
    af3a:	4621      	mov	r1, r4
    af3c:	f7ff ff47 	bl	adce <memq_enqueue>
    af40:	e7c8      	b.n	aed4 <mayfly_enqueue+0x24>
			return 1;
    af42:	4638      	mov	r0, r7

	return 0;
}
    af44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    af46:	bf00      	nop
    af48:	20000a40 	.word	0x20000a40

0000af4c <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    af4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af50:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    af54:	b089      	sub	sp, #36	; 0x24
    af56:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    af58:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    af5c:	4e43      	ldr	r6, [pc, #268]	; (b06c <mayfly_run+0x120>)
    af5e:	9304      	str	r3, [sp, #16]
{
    af60:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    af62:	2404      	movs	r4, #4
	u8_t disable = 0;
    af64:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    af68:	3c01      	subs	r4, #1
    af6a:	b2e4      	uxtb	r4, r4
    af6c:	2cff      	cmp	r4, #255	; 0xff
    af6e:	d10b      	bne.n	af88 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    af70:	9b01      	ldr	r3, [sp, #4]
    af72:	2b00      	cmp	r3, #0
    af74:	d076      	beq.n	b064 <mayfly_run+0x118>
    af76:	f1b8 0f00 	cmp.w	r8, #0
    af7a:	d173      	bne.n	b064 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    af7c:	4642      	mov	r2, r8
    af7e:	4629      	mov	r1, r5
    af80:	4628      	mov	r0, r5
    af82:	f00c fe31 	bl	17be8 <mayfly_enable_cb>
    af86:	e06d      	b.n	b064 <mayfly_run+0x118>
		struct mayfly *m = 0;
    af88:	f10d 0b20 	add.w	fp, sp, #32
    af8c:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    af8e:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    af90:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    af94:	f04f 0930 	mov.w	r9, #48	; 0x30
    af98:	fb07 f304 	mul.w	r3, r7, r4
    af9c:	fb09 3005 	mla	r0, r9, r5, r3
    afa0:	1831      	adds	r1, r6, r0
    afa2:	465a      	mov	r2, fp
    afa4:	6849      	ldr	r1, [r1, #4]
    afa6:	5830      	ldr	r0, [r6, r0]
    afa8:	9302      	str	r3, [sp, #8]
    afaa:	f7ff ff17 	bl	addc <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    afae:	9b04      	ldr	r3, [sp, #16]
    afb0:	fb17 3704 	smlabb	r7, r7, r4, r3
    afb4:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    afb6:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    afb8:	9303      	str	r3, [sp, #12]
		while (link) {
    afba:	f1ba 0f00 	cmp.w	sl, #0
    afbe:	d119      	bne.n	aff4 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    afc0:	2230      	movs	r2, #48	; 0x30
    afc2:	230c      	movs	r3, #12
    afc4:	436a      	muls	r2, r5
    afc6:	fb03 2204 	mla	r2, r3, r4, r2
    afca:	4432      	add	r2, r6
    afcc:	7a91      	ldrb	r1, [r2, #10]
    afce:	7ad0      	ldrb	r0, [r2, #11]
    afd0:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    afd2:	bf1e      	ittt	ne
    afd4:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    afd6:	2201      	movne	r2, #1
    afd8:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    afda:	2230      	movs	r2, #48	; 0x30
    afdc:	436a      	muls	r2, r5
    afde:	fb03 2304 	mla	r3, r3, r4, r2
    afe2:	4433      	add	r3, r6
    afe4:	7a1a      	ldrb	r2, [r3, #8]
    afe6:	7a59      	ldrb	r1, [r3, #9]
    afe8:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    afea:	bf1c      	itt	ne
    afec:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    afee:	f04f 0801 	movne.w	r8, #1
    aff2:	e7b9      	b.n	af68 <mayfly_run+0x1c>
			req = m->_req;
    aff4:	9b07      	ldr	r3, [sp, #28]
    aff6:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    aff8:	785a      	ldrb	r2, [r3, #1]
    affa:	1abf      	subs	r7, r7, r2
    affc:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    b000:	2f01      	cmp	r7, #1
    b002:	d104      	bne.n	b00e <mayfly_run+0xc2>
				m->_ack--;
    b004:	3a01      	subs	r2, #1
    b006:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    b008:	6898      	ldr	r0, [r3, #8]
    b00a:	68da      	ldr	r2, [r3, #12]
    b00c:	4790      	blx	r2
			req = m->_req;
    b00e:	9a07      	ldr	r2, [sp, #28]
    b010:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    b012:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    b014:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    b016:	1a9a      	subs	r2, r3, r2
    b018:	f002 0203 	and.w	r2, r2, #3
    b01c:	2a01      	cmp	r2, #1
    b01e:	9305      	str	r3, [sp, #20]
    b020:	d00d      	beq.n	b03e <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    b022:	9b02      	ldr	r3, [sp, #8]
    b024:	9903      	ldr	r1, [sp, #12]
    b026:	fb09 3005 	mla	r0, r9, r5, r3
    b02a:	4430      	add	r0, r6
    b02c:	2200      	movs	r2, #0
    b02e:	6840      	ldr	r0, [r0, #4]
    b030:	f7ff fedc 	bl	adec <memq_dequeue>
				m->_link = link;
    b034:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    b036:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    b038:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    b03c:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    b03e:	9b02      	ldr	r3, [sp, #8]
    b040:	fb09 3305 	mla	r3, r9, r5, r3
    b044:	18f1      	adds	r1, r6, r3
    b046:	465a      	mov	r2, fp
    b048:	6849      	ldr	r1, [r1, #4]
    b04a:	58f0      	ldr	r0, [r6, r3]
    b04c:	f7ff fec6 	bl	addc <memq_peek>
			if (state == 1) {
    b050:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    b052:	4682      	mov	sl, r0
			if (state == 1) {
    b054:	d1b1      	bne.n	afba <mayfly_run+0x6e>
				if (caller_id || link) {
    b056:	b90c      	cbnz	r4, b05c <mayfly_run+0x110>
    b058:	2800      	cmp	r0, #0
    b05a:	d0b1      	beq.n	afc0 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    b05c:	4629      	mov	r1, r5
    b05e:	4628      	mov	r0, r5
    b060:	f00c fdf0 	bl	17c44 <mayfly_pend>
	}
}
    b064:	b009      	add	sp, #36	; 0x24
    b066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b06a:	bf00      	nop
    b06c:	20000a40 	.word	0x20000a40

0000b070 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    b070:	b510      	push	{r4, lr}
    b072:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    b074:	2000      	movs	r0, #0

	while (octets_len--) {
    b076:	3901      	subs	r1, #1
    b078:	b2c9      	uxtb	r1, r1
    b07a:	29ff      	cmp	r1, #255	; 0xff
    b07c:	d100      	bne.n	b080 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    b07e:	bd10      	pop	{r4, pc}
		bite = *octets;
    b080:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    b084:	2b00      	cmp	r3, #0
    b086:	d0f6      	beq.n	b076 <util_ones_count_get+0x6>
			bite &= (bite - 1);
    b088:	1e5c      	subs	r4, r3, #1
			one_count++;
    b08a:	3001      	adds	r0, #1
			bite &= (bite - 1);
    b08c:	4023      	ands	r3, r4
			one_count++;
    b08e:	b2c0      	uxtb	r0, r0
    b090:	e7f8      	b.n	b084 <util_ones_count_get+0x14>

0000b092 <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    b092:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    b094:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    b096:	6805      	ldr	r5, [r0, #0]
	current = previous;
    b098:	461a      	mov	r2, r3
	total = 0;
    b09a:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    b09c:	2aff      	cmp	r2, #255	; 0xff
    b09e:	d101      	bne.n	b0a4 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    b0a0:	2000      	movs	r0, #0
    b0a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    b0a4:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    b0a8:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    b0aa:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    b0ae:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    b0b2:	d004      	beq.n	b0be <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    b0b4:	68b3      	ldr	r3, [r6, #8]
    b0b6:	441c      	add	r4, r3
		current = ticker_current->next;
    b0b8:	4613      	mov	r3, r2
    b0ba:	463a      	mov	r2, r7
    b0bc:	e7ee      	b.n	b09c <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    b0be:	4293      	cmp	r3, r2
    b0c0:	d100      	bne.n	b0c4 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    b0c2:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    b0c4:	b21b      	sxth	r3, r3
    b0c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b0ca:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    b0cc:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    b0ce:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    b0d2:	7833      	ldrb	r3, [r6, #0]
    b0d4:	2bff      	cmp	r3, #255	; 0xff
    b0d6:	d006      	beq.n	b0e6 <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    b0d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b0dc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    b0e0:	689a      	ldr	r2, [r3, #8]
    b0e2:	4402      	add	r2, r0
    b0e4:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    b0e6:	4420      	add	r0, r4
    b0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b0ea <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    b0ea:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    b0ec:	1a55      	subs	r5, r2, r1
    b0ee:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    b0f2:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    b0f4:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    b0f6:	d109      	bne.n	b10c <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    b0f8:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    b0fc:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    b0fe:	42a2      	cmp	r2, r4
    b100:	d90e      	bls.n	b120 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    b102:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    b104:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    b106:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    b108:	6144      	str	r4, [r0, #20]
    b10a:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    b10c:	1a8a      	subs	r2, r1, r2
    b10e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    b112:	4293      	cmp	r3, r2
    b114:	d901      	bls.n	b11a <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    b116:	1a9a      	subs	r2, r3, r2
    b118:	e7f1      	b.n	b0fe <ticks_to_expire_prep+0x14>
    b11a:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    b11c:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    b11e:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    b120:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    b122:	2200      	movs	r2, #0
    b124:	e7ef      	b.n	b106 <ticks_to_expire_prep+0x1c>

0000b126 <ticker_job_op_cb>:
{
    b126:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    b128:	2200      	movs	r2, #0
    b12a:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    b12c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    b12e:	6259      	str	r1, [r3, #36]	; 0x24
{
    b130:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    b132:	b10a      	cbz	r2, b138 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    b134:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    b136:	4710      	bx	r2
    b138:	4770      	bx	lr

0000b13a <ticker_worker>:
{
    b13a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    b13e:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    b140:	2301      	movs	r3, #1
{
    b142:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    b144:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    b146:	2d00      	cmp	r5, #0
    b148:	d14c      	bne.n	b1e4 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    b14a:	7f43      	ldrb	r3, [r0, #29]
    b14c:	2bff      	cmp	r3, #255	; 0xff
    b14e:	d102      	bne.n	b156 <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    b150:	77c5      	strb	r5, [r0, #31]
		return;
    b152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    b156:	f00b ffdb 	bl	17110 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    b15a:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    b15c:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    b15e:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    b162:	1bc7      	subs	r7, r0, r7
    b164:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    b168:	2eff      	cmp	r6, #255	; 0xff
    b16a:	d006      	beq.n	b17a <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    b16c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    b170:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    b174:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    b176:	429f      	cmp	r7, r3
    b178:	d218      	bcs.n	b1ac <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    b17a:	7aa2      	ldrb	r2, [r4, #10]
    b17c:	7ae3      	ldrb	r3, [r4, #11]
    b17e:	4293      	cmp	r3, r2
    b180:	d105      	bne.n	b18e <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    b182:	3301      	adds	r3, #1
    b184:	b2db      	uxtb	r3, r3
			last = 0;
    b186:	2b02      	cmp	r3, #2
    b188:	bf08      	it	eq
    b18a:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    b18c:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    b18e:	7ae3      	ldrb	r3, [r4, #11]
    b190:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    b194:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    b196:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    b198:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    b19a:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    b19c:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    b19e:	46ac      	mov	ip, r5
    b1a0:	4623      	mov	r3, r4
    b1a2:	2104      	movs	r1, #4
    b1a4:	2003      	movs	r0, #3
}
    b1a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    b1aa:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    b1ac:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    b1ae:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    b1b0:	788a      	ldrb	r2, [r1, #2]
    b1b2:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    b1b4:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    b1b8:	1a9b      	subs	r3, r3, r2
    b1ba:	b2db      	uxtb	r3, r3
    b1bc:	2b01      	cmp	r3, #1
    b1be:	d1d3      	bne.n	b168 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    b1c0:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    b1c4:	3a01      	subs	r2, #1
    b1c6:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    b1c8:	f1b9 0f00 	cmp.w	r9, #0
    b1cc:	d0cc      	beq.n	b168 <ticker_worker+0x2e>
					   ticks_expired -
    b1ce:	6948      	ldr	r0, [r1, #20]
    b1d0:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    b1d2:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    b1d4:	1a28      	subs	r0, r5, r0
    b1d6:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    b1d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b1dc:	690b      	ldr	r3, [r1, #16]
    b1de:	6a49      	ldr	r1, [r1, #36]	; 0x24
    b1e0:	47c8      	blx	r9
    b1e2:	e7c1      	b.n	b168 <ticker_worker+0x2e>
    b1e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000b1e8 <ticker_job>:
{
    b1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    b1ec:	7fc2      	ldrb	r2, [r0, #31]
{
    b1ee:	b093      	sub	sp, #76	; 0x4c
    b1f0:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    b1f2:	2a00      	cmp	r2, #0
    b1f4:	f040 83b5 	bne.w	b962 <ticker_job+0x77a>
	ticks_previous = instance->ticks_current;
    b1f8:	6943      	ldr	r3, [r0, #20]
    b1fa:	9305      	str	r3, [sp, #20]
	instance->job_guard = 1;
    b1fc:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    b1fe:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    b200:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    b202:	7ac0      	ldrb	r0, [r0, #11]
    b204:	4298      	cmp	r0, r3
    b206:	f000 808f 	beq.w	b328 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    b20a:	440b      	add	r3, r1
    b20c:	b2db      	uxtb	r3, r3
			first = 0;
    b20e:	2b02      	cmp	r3, #2
    b210:	bf08      	it	eq
    b212:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    b214:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    b218:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    b21c:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
    b21e:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    b222:	9b05      	ldr	r3, [sp, #20]
    b224:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    b226:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b22a:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    b22e:	f89b 301d 	ldrb.w	r3, [fp, #29]
    b232:	9303      	str	r3, [sp, #12]
	node = &instance->node[0];
    b234:	f8db 3000 	ldr.w	r3, [fp]
    b238:	9304      	str	r3, [sp, #16]
	users = &instance->user[0];
    b23a:	f8db 3004 	ldr.w	r3, [fp, #4]
    b23e:	930b      	str	r3, [sp, #44]	; 0x2c
    b240:	f89b 3009 	ldrb.w	r3, [fp, #9]
    b244:	3b01      	subs	r3, #1
    b246:	b2db      	uxtb	r3, r3
    b248:	9302      	str	r3, [sp, #8]
	pending = 0;
    b24a:	2300      	movs	r3, #0
    b24c:	9307      	str	r3, [sp, #28]
	insert_head = TICKER_NULL;
    b24e:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    b252:	9b02      	ldr	r3, [sp, #8]
    b254:	2bff      	cmp	r3, #255	; 0xff
    b256:	d16a      	bne.n	b32e <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    b258:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    b25c:	9a03      	ldr	r2, [sp, #12]
    b25e:	1a9b      	subs	r3, r3, r2
    b260:	bf18      	it	ne
    b262:	2301      	movne	r3, #1
    b264:	9302      	str	r3, [sp, #8]
	if (flag_elapsed) {
    b266:	9b01      	ldr	r3, [sp, #4]
    b268:	b1e3      	cbz	r3, b2a4 <ticker_job+0xbc>
	node = &instance->node[0];
    b26a:	f8db 3000 	ldr.w	r3, [fp]
    b26e:	9304      	str	r3, [sp, #16]
	ticks_expired = 0;
    b270:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    b274:	f89b 601d 	ldrb.w	r6, [fp, #29]
    b278:	2eff      	cmp	r6, #255	; 0xff
    b27a:	d00c      	beq.n	b296 <ticker_job+0xae>
		ticker = &node[id_expired];
    b27c:	b237      	sxth	r7, r6
    b27e:	9b04      	ldr	r3, [sp, #16]
    b280:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    b284:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    b288:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    b28a:	4545      	cmp	r5, r8
    b28c:	f240 8136 	bls.w	b4fc <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    b290:	eba5 0508 	sub.w	r5, r5, r8
    b294:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    b296:	9b02      	ldr	r3, [sp, #8]
    b298:	9a01      	ldr	r2, [sp, #4]
    b29a:	9903      	ldr	r1, [sp, #12]
    b29c:	42b1      	cmp	r1, r6
    b29e:	bf18      	it	ne
    b2a0:	4613      	movne	r3, r2
    b2a2:	9302      	str	r3, [sp, #8]
	node = &instance->node[0];
    b2a4:	f8db 3000 	ldr.w	r3, [fp]
    b2a8:	9308      	str	r3, [sp, #32]
	users = &instance->user[0];
    b2aa:	f8db 3004 	ldr.w	r3, [fp, #4]
    b2ae:	9310      	str	r3, [sp, #64]	; 0x40
    b2b0:	f89b 3009 	ldrb.w	r3, [fp, #9]
    b2b4:	3b01      	subs	r3, #1
    b2b6:	b2db      	uxtb	r3, r3
    b2b8:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    b2ba:	9b01      	ldr	r3, [sp, #4]
    b2bc:	2bff      	cmp	r3, #255	; 0xff
    b2be:	f040 8170 	bne.w	b5a2 <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    b2c2:	f89b 301d 	ldrb.w	r3, [fp, #29]
    b2c6:	9a03      	ldr	r2, [sp, #12]
    b2c8:	4293      	cmp	r3, r2
	if (!pending) {
    b2ca:	9b07      	ldr	r3, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
    b2cc:	f040 8340 	bne.w	b950 <ticker_job+0x768>
	if (!pending) {
    b2d0:	b95b      	cbnz	r3, b2ea <ticker_job+0x102>
    b2d2:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    b2d6:	f8db 3004 	ldr.w	r3, [fp, #4]
    b2da:	9301      	str	r3, [sp, #4]
    b2dc:	3c01      	subs	r4, #1
    b2de:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    b2e0:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    b2e4:	2cff      	cmp	r4, #255	; 0xff
    b2e6:	f040 82a0 	bne.w	b82a <ticker_job+0x642>
	instance->job_guard = 0;
    b2ea:	2300      	movs	r3, #0
    b2ec:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    b2f0:	9b02      	ldr	r3, [sp, #8]
    b2f2:	b14b      	cbz	r3, b308 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    b2f4:	f89b 301d 	ldrb.w	r3, [fp, #29]
    b2f8:	2bff      	cmp	r3, #255	; 0xff
    b2fa:	f040 82e9 	bne.w	b8d0 <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    b2fe:	f00b feef 	bl	170e0 <cntr_stop>
    b302:	b908      	cbnz	r0, b308 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    b304:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    b308:	f89b 301f 	ldrb.w	r3, [fp, #31]
    b30c:	2b00      	cmp	r3, #0
    b30e:	f000 8328 	beq.w	b962 <ticker_job+0x77a>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    b312:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    b316:	465b      	mov	r3, fp
    b318:	2201      	movs	r2, #1
    b31a:	2103      	movs	r1, #3
    b31c:	2004      	movs	r0, #4
    b31e:	46a4      	mov	ip, r4
}
    b320:	b013      	add	sp, #76	; 0x4c
    b322:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    b326:	4760      	bx	ip
		flag_elapsed = 0;
    b328:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0;
    b32a:	4690      	mov	r8, r2
    b32c:	e77f      	b.n	b22e <ticker_job+0x46>
		user = &users[count_user];
    b32e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b330:	9a02      	ldr	r2, [sp, #8]
    b332:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    b336:	687b      	ldr	r3, [r7, #4]
    b338:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
    b33a:	78f9      	ldrb	r1, [r7, #3]
    b33c:	78be      	ldrb	r6, [r7, #2]
    b33e:	428e      	cmp	r6, r1
    b340:	f000 80d7 	beq.w	b4f2 <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    b344:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
    b346:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    b348:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    b34c:	0112      	lsls	r2, r2, #4
    b34e:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    b350:	1c73      	adds	r3, r6, #1
    b352:	b2db      	uxtb	r3, r3
				middle = 0;
    b354:	4298      	cmp	r0, r3
    b356:	bf08      	it	eq
    b358:	2300      	moveq	r3, #0
			user->middle = middle;
    b35a:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    b35c:	9b06      	ldr	r3, [sp, #24]
    b35e:	5c9a      	ldrb	r2, [r3, r2]
    b360:	2a03      	cmp	r2, #3
    b362:	d9eb      	bls.n	b33c <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    b364:	2a05      	cmp	r2, #5
    b366:	d817      	bhi.n	b398 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    b368:	7869      	ldrb	r1, [r5, #1]
    b36a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    b36e:	930a      	str	r3, [sp, #40]	; 0x28
    b370:	980a      	ldr	r0, [sp, #40]	; 0x28
    b372:	9b04      	ldr	r3, [sp, #16]
    b374:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    b378:	7863      	ldrb	r3, [r4, #1]
    b37a:	78a0      	ldrb	r0, [r4, #2]
    b37c:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    b37e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    b382:	d009      	beq.n	b398 <ticker_job+0x1b0>
			    (state == 0) ||
    b384:	2a04      	cmp	r2, #4
    b386:	d10c      	bne.n	b3a2 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    b388:	686a      	ldr	r2, [r5, #4]
    b38a:	b952      	cbnz	r2, b3a2 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    b38c:	68aa      	ldr	r2, [r5, #8]
    b38e:	b942      	cbnz	r2, b3a2 <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    b390:	68ea      	ldr	r2, [r5, #12]
    b392:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    b396:	d104      	bne.n	b3a2 <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    b398:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    b39a:	4628      	mov	r0, r5
    b39c:	f7ff fec3 	bl	b126 <ticker_job_op_cb>
    b3a0:	e7cb      	b.n	b33a <ticker_job+0x152>
			if (state == 1) {
    b3a2:	2b01      	cmp	r3, #1
    b3a4:	f040 809b 	bne.w	b4de <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    b3a8:	4658      	mov	r0, fp
    b3aa:	f7ff fe72 	bl	b092 <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    b3ae:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    b3b0:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    b3b2:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    b3b4:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    b3b6:	f040 8084 	bne.w	b4c2 <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    b3ba:	f8db 3014 	ldr.w	r3, [fp, #20]
    b3be:	9308      	str	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    b3c0:	f00b fea6 	bl	17110 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    b3c4:	9b08      	ldr	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    b3c6:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    b3c8:	1ac3      	subs	r3, r0, r3
    b3ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    b3ce:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    b3d0:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    b3d2:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    b3d4:	bf9e      	ittt	ls
    b3d6:	6962      	ldrls	r2, [r4, #20]
    b3d8:	1b92      	subls	r2, r2, r6
    b3da:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    b3dc:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    b3de:	bf96      	itet	ls
    b3e0:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    b3e2:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    b3e4:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    b3e6:	b18a      	cbz	r2, b40c <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    b3e8:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    b3ea:	b179      	cbz	r1, b40c <ticker_job+0x224>
		user_op->params.update.lazy--;
    b3ec:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    b3f0:	fa1f fe8e 	uxth.w	lr, lr
    b3f4:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    b3f8:	429a      	cmp	r2, r3
    b3fa:	d32b      	bcc.n	b454 <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    b3fc:	f8df 9324 	ldr.w	r9, [pc, #804]	; b724 <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    b400:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    b404:	45e6      	cmp	lr, ip
    b406:	d847      	bhi.n	b498 <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    b408:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    b40c:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    b40e:	9908      	ldr	r1, [sp, #32]
	ticker->ticks_to_expire = ticks_to_expire +
    b410:	4413      	add	r3, r2
    b412:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    b414:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    b416:	6963      	ldr	r3, [r4, #20]
    b418:	4413      	add	r3, r2
    b41a:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    b41c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b41e:	4620      	mov	r0, r4
    b420:	f7ff fe63 	bl	b0ea <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    b424:	69a2      	ldr	r2, [r4, #24]
    b426:	892b      	ldrh	r3, [r5, #8]
    b428:	4413      	add	r3, r2
    b42a:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    b42c:	896a      	ldrh	r2, [r5, #10]
    b42e:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    b430:	bf8c      	ite	hi
    b432:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    b434:	2300      	movls	r3, #0
    b436:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    b438:	7bab      	ldrb	r3, [r5, #14]
    b43a:	b103      	cbz	r3, b43e <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    b43c:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    b43e:	9b04      	ldr	r3, [sp, #16]
    b440:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b442:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    b446:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    b448:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    b44c:	3301      	adds	r3, #1
    b44e:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    b450:	2100      	movs	r1, #0
    b452:	e7a2      	b.n	b39a <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    b454:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    b458:	45e6      	cmp	lr, ip
    b45a:	d2cf      	bcs.n	b3fc <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    b45c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    b45e:	4eaf      	ldr	r6, [pc, #700]	; (b71c <ticker_job+0x534>)
    b460:	48af      	ldr	r0, [pc, #700]	; (b720 <ticker_job+0x538>)
    b462:	198e      	adds	r6, r1, r6
    b464:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    b466:	bf81      	itttt	hi
    b468:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    b46c:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    b470:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    b474:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    b476:	6a66      	ldr	r6, [r4, #36]	; 0x24
    b478:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    b47a:	bf8c      	ite	hi
    b47c:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    b480:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    b484:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    b486:	4491      	add	r9, r2
			ticker->lazy_current--;
    b488:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    b48c:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    b48e:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    b492:	f8a4 c01e 	strh.w	ip, [r4, #30]
    b496:	e7af      	b.n	b3f8 <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    b498:	6a66      	ldr	r6, [r4, #36]	; 0x24
    b49a:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    b49c:	48a0      	ldr	r0, [pc, #640]	; (b720 <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    b49e:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    b4a0:	499e      	ldr	r1, [pc, #632]	; (b71c <ticker_job+0x534>)
    b4a2:	1871      	adds	r1, r6, r1
    b4a4:	4281      	cmp	r1, r0
	return 0;
    b4a6:	bf8e      	itee	hi
    b4a8:	2100      	movhi	r1, #0
		return 1;
    b4aa:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    b4ac:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    b4ae:	4411      	add	r1, r2
			ticker->lazy_current++;
    b4b0:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    b4b4:	bf8c      	ite	hi
    b4b6:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    b4b8:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    b4ba:	440b      	add	r3, r1
			ticker->lazy_current++;
    b4bc:	f8a4 c01e 	strh.w	ip, [r4, #30]
    b4c0:	e79e      	b.n	b400 <ticker_job+0x218>
		ticker->req = ticker->ack;
    b4c2:	78a3      	ldrb	r3, [r4, #2]
    b4c4:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    b4c6:	786b      	ldrb	r3, [r5, #1]
    b4c8:	f89b 201c 	ldrb.w	r2, [fp, #28]
    b4cc:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    b4ce:	bf01      	itttt	eq
    b4d0:	23ff      	moveq	r3, #255	; 0xff
    b4d2:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    b4d6:	2300      	moveq	r3, #0
    b4d8:	f8cb 3018 	streq.w	r3, [fp, #24]
    b4dc:	e7b8      	b.n	b450 <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    b4de:	2104      	movs	r1, #4
    b4e0:	465b      	mov	r3, fp
    b4e2:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    b4e6:	2201      	movs	r2, #1
    b4e8:	4608      	mov	r0, r1
    b4ea:	47a0      	blx	r4
				pending = 1;
    b4ec:	2301      	movs	r3, #1
				user->middle = prev;
    b4ee:	70be      	strb	r6, [r7, #2]
				pending = 1;
    b4f0:	9307      	str	r3, [sp, #28]
    b4f2:	9b02      	ldr	r3, [sp, #8]
    b4f4:	3b01      	subs	r3, #1
    b4f6:	b2db      	uxtb	r3, r3
    b4f8:	9302      	str	r3, [sp, #8]
    b4fa:	e6aa      	b.n	b252 <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    b4fc:	f8db 3018 	ldr.w	r3, [fp, #24]
    b500:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    b502:	bf29      	itett	cs
    b504:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    b506:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    b508:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    b50c:	2300      	movcs	r3, #0
    b50e:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    b512:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    b514:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    b516:	b11b      	cbz	r3, b520 <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    b518:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    b51c:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    b520:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    b522:	9b04      	ldr	r3, [sp, #16]
		ticker->ticks_to_expire = 0;
    b524:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    b526:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    b52a:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    b52e:	f8d4 e004 	ldr.w	lr, [r4, #4]
    b532:	f1be 0f00 	cmp.w	lr, #0
    b536:	d030      	beq.n	b59a <ticker_job+0x3b2>
    b538:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    b53a:	f8df c1e4 	ldr.w	ip, [pc, #484]	; b720 <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    b53e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b540:	6a21      	ldr	r1, [r4, #32]
    b542:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    b544:	4975      	ldr	r1, [pc, #468]	; (b71c <ticker_job+0x534>)
    b546:	1859      	adds	r1, r3, r1
    b548:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    b54a:	bf9f      	itttt	ls
    b54c:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    b550:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    b554:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    b558:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    b55a:	bf92      	itee	ls
    b55c:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    b55e:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    b560:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    b562:	4473      	add	r3, lr
			while (count--) {
    b564:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    b568:	441a      	add	r2, r3
			while (count--) {
    b56a:	d2e8      	bcs.n	b53e <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    b56c:	9b05      	ldr	r3, [sp, #20]
			ticker->ticks_to_expire = ticks_to_expire;
    b56e:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    b570:	f8db 1014 	ldr.w	r1, [fp, #20]
    b574:	eb03 0209 	add.w	r2, r3, r9
    b578:	4620      	mov	r0, r4
    b57a:	f7ff fdb6 	bl	b0ea <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    b57e:	8ba3      	ldrh	r3, [r4, #28]
    b580:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    b582:	2300      	movs	r3, #0
    b584:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    b586:	9b04      	ldr	r3, [sp, #16]
    b588:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    b58c:	7863      	ldrb	r3, [r4, #1]
    b58e:	3301      	adds	r3, #1
    b590:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    b592:	eba8 0805 	sub.w	r8, r8, r5
    b596:	46b2      	mov	sl, r6
    b598:	e66c      	b.n	b274 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    b59a:	78a3      	ldrb	r3, [r4, #2]
    b59c:	7063      	strb	r3, [r4, #1]
    b59e:	4656      	mov	r6, sl
    b5a0:	e7f7      	b.n	b592 <ticker_job+0x3aa>
		user = &users[count_user];
    b5a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b5a4:	9a01      	ldr	r2, [sp, #4]
    b5a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    b5aa:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
    b5ac:	685b      	ldr	r3, [r3, #4]
    b5ae:	930a      	str	r3, [sp, #40]	; 0x28
		user_ops_first = user->first;
    b5b0:	9b04      	ldr	r3, [sp, #16]
    b5b2:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    b5b6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    b5ba:	f000 808e 	beq.w	b6da <ticker_job+0x4f2>
				ticker = &node[id_insert];
    b5be:	fa0f f38a 	sxth.w	r3, sl
    b5c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b5c6:	9a08      	ldr	r2, [sp, #32]
				insert_head = ticker->next;
    b5c8:	46d0      	mov	r8, sl
    b5ca:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    b5ce:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    b5d2:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    b5d4:	f8db 3000 	ldr.w	r3, [fp]
    b5d8:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker->next = TICKER_NULL;
    b5da:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    b5dc:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    b5de:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    b5e0:	8be3      	ldrh	r3, [r4, #30]
    b5e2:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    b5e4:	bf86      	itte	hi
    b5e6:	1a9b      	subhi	r3, r3, r2
    b5e8:	b29b      	uxthhi	r3, r3
		skip = 0;
    b5ea:	2300      	movls	r3, #0
    b5ec:	930c      	str	r3, [sp, #48]	; 0x30
	ticker_new = &node[id];
    b5ee:	fa0f f388 	sxth.w	r3, r8
    b5f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b5f6:	00db      	lsls	r3, r3, #3
    b5f8:	9311      	str	r3, [sp, #68]	; 0x44
    b5fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
	node = &instance->node[0];
    b5fc:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    b600:	f8db 0018 	ldr.w	r0, [fp, #24]
    b604:	9005      	str	r0, [sp, #20]
	ticker_new = &node[id];
    b606:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    b60a:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    b60c:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    b610:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    b614:	9309      	str	r3, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
    b616:	9006      	str	r0, [sp, #24]
	while ((current != TICKER_NULL) &&
    b618:	2bff      	cmp	r3, #255	; 0xff
    b61a:	d007      	beq.n	b62c <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    b61c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    b620:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    b624:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    b626:	4281      	cmp	r1, r0
    b628:	f200 80a9 	bhi.w	b77e <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    b62c:	f8de 0018 	ldr.w	r0, [lr, #24]
    b630:	900d      	str	r0, [sp, #52]	; 0x34
	collide = ticker_by_slot_get(&node[0], current,
    b632:	eb01 0c00 	add.w	ip, r1, r0
    b636:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    b638:	2eff      	cmp	r6, #255	; 0xff
    b63a:	f040 80ae 	bne.w	b79a <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    b63e:	980d      	ldr	r0, [sp, #52]	; 0x34
    b640:	b130      	cbz	r0, b650 <ticker_job+0x468>
    b642:	9805      	ldr	r0, [sp, #20]
    b644:	4281      	cmp	r1, r0
    b646:	f0c0 80bf 	bcc.w	b7c8 <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    b64a:	2eff      	cmp	r6, #255	; 0xff
    b64c:	f040 8185 	bne.w	b95a <ticker_job+0x772>
		if (previous == current) {
    b650:	9809      	ldr	r0, [sp, #36]	; 0x24
		ticker_new->ticks_to_expire = ticks_to_expire;
    b652:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    b656:	4283      	cmp	r3, r0
			node[previous].next = id;
    b658:	bf18      	it	ne
    b65a:	f9bd 0024 	ldrshne.w	r0, [sp, #36]	; 0x24
		ticker_new->next = current;
    b65e:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    b662:	bf16      	itet	ne
    b664:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    b668:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    b66c:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    b670:	2bff      	cmp	r3, #255	; 0xff
    b672:	d006      	beq.n	b682 <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    b674:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b678:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    b67c:	689a      	ldr	r2, [r3, #8]
    b67e:	1a51      	subs	r1, r2, r1
    b680:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    b682:	78a3      	ldrb	r3, [r4, #2]
    b684:	3301      	adds	r3, #1
    b686:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    b688:	2100      	movs	r1, #0
			if (user_op) {
    b68a:	2d00      	cmp	r5, #0
    b68c:	d093      	beq.n	b5b6 <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    b68e:	4628      	mov	r0, r5
    b690:	f7ff fd49 	bl	b126 <ticker_job_op_cb>
    b694:	e78f      	b.n	b5b6 <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    b696:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    b69a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b69c:	011b      	lsls	r3, r3, #4
    b69e:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    b6a0:	f109 0201 	add.w	r2, r9, #1
    b6a4:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    b6a8:	9a04      	ldr	r2, [sp, #16]
    b6aa:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    b6ac:	454a      	cmp	r2, r9
    b6ae:	bf08      	it	eq
    b6b0:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    b6b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b6b6:	5cd3      	ldrb	r3, [r2, r3]
    b6b8:	2b03      	cmp	r3, #3
    b6ba:	d10e      	bne.n	b6da <ticker_job+0x4f2>
				id_insert = user_op->id;
    b6bc:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    b6c0:	9b08      	ldr	r3, [sp, #32]
    b6c2:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    b6c6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    b6ca:	7862      	ldrb	r2, [r4, #1]
    b6cc:	78a3      	ldrb	r3, [r4, #2]
    b6ce:	429a      	cmp	r2, r3
    b6d0:	d009      	beq.n	b6e6 <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    b6d2:	2101      	movs	r1, #1
    b6d4:	4628      	mov	r0, r5
    b6d6:	f7ff fd26 	bl	b126 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    b6da:	9b04      	ldr	r3, [sp, #16]
    b6dc:	789b      	ldrb	r3, [r3, #2]
    b6de:	454b      	cmp	r3, r9
    b6e0:	d1d9      	bne.n	b696 <ticker_job+0x4ae>
    b6e2:	9b01      	ldr	r3, [sp, #4]
    b6e4:	e5e6      	b.n	b2b4 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    b6e6:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    b6e8:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    b6ec:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    b6ee:	692b      	ldr	r3, [r5, #16]
    b6f0:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    b6f2:	8aab      	ldrh	r3, [r5, #20]
    b6f4:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    b6f6:	69ab      	ldr	r3, [r5, #24]
    b6f8:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    b6fa:	69eb      	ldr	r3, [r5, #28]
    b6fc:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    b6fe:	6a2b      	ldr	r3, [r5, #32]
    b700:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    b702:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    b704:	68ab      	ldr	r3, [r5, #8]
    b706:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    b708:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    b70a:	686a      	ldr	r2, [r5, #4]
    b70c:	4620      	mov	r0, r4
    b70e:	f7ff fcec 	bl	b0ea <ticks_to_expire_prep>
	ticker->force = 1;
    b712:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    b714:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    b716:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    b718:	70e3      	strb	r3, [r4, #3]
    b71a:	e75b      	b.n	b5d4 <ticker_job+0x3ec>
    b71c:	ff172b5a 	.word	0xff172b5a
    b720:	7f172b59 	.word	0x7f172b59
    b724:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    b728:	6860      	ldr	r0, [r4, #4]
    b72a:	2800      	cmp	r0, #0
    b72c:	d07b      	beq.n	b826 <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    b72e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    b730:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    b732:	4b8d      	ldr	r3, [pc, #564]	; (b968 <ticker_job+0x780>)
	ticker->remainder_current += ticker->remainder_periodic;
    b734:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    b736:	498d      	ldr	r1, [pc, #564]	; (b96c <ticker_job+0x784>)
    b738:	18d3      	adds	r3, r2, r3
    b73a:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    b73c:	bf9c      	itt	ls
    b73e:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    b742:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    b746:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    b748:	bf8b      	itete	hi
    b74a:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    b74c:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    b750:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    b752:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    b754:	4403      	add	r3, r0
		return 1;
    b756:	bf98      	it	ls
    b758:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    b75a:	4413      	add	r3, r2
			ticker->lazy_current++;
    b75c:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    b75e:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    b760:	3201      	adds	r2, #1
    b762:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    b764:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    b766:	4293      	cmp	r3, r2
    b768:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    b76c:	bf89      	itett	hi
    b76e:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    b770:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    b772:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    b774:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    b776:	bf9c      	itt	ls
    b778:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    b77a:	60a1      	strls	r1, [r4, #8]
    b77c:	e73d      	b.n	b5fa <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    b77e:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    b780:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    b782:	b946      	cbnz	r6, b796 <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    b784:	9f05      	ldr	r7, [sp, #20]
    b786:	42b8      	cmp	r0, r7
    b788:	d200      	bcs.n	b78c <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    b78a:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    b78c:	9309      	str	r3, [sp, #36]	; 0x24
    b78e:	9605      	str	r6, [sp, #20]
    b790:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    b794:	e740      	b.n	b618 <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    b796:	9306      	str	r3, [sp, #24]
    b798:	e7f8      	b.n	b78c <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    b79a:	b230      	sxth	r0, r6
    b79c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    b7a0:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    b7a4:	970e      	str	r7, [sp, #56]	; 0x38
		ticks_to_expire = ticker->ticks_to_expire;
    b7a6:	68bf      	ldr	r7, [r7, #8]
    b7a8:	970f      	str	r7, [sp, #60]	; 0x3c
		if (ticks_slot <= ticks_to_expire) {
    b7aa:	4567      	cmp	r7, ip
    b7ac:	d20a      	bcs.n	b7c4 <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    b7ae:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    b7b0:	69bf      	ldr	r7, [r7, #24]
    b7b2:	2f00      	cmp	r7, #0
    b7b4:	f47f af43 	bne.w	b63e <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    b7b8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    b7ba:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    b7be:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    b7c2:	e739      	b.n	b638 <ticker_job+0x450>
			return TICKER_NULL;
    b7c4:	26ff      	movs	r6, #255	; 0xff
    b7c6:	e73a      	b.n	b63e <ticker_job+0x456>
	while (id_insert !=
    b7c8:	9b06      	ldr	r3, [sp, #24]
    b7ca:	4598      	cmp	r8, r3
    b7cc:	f43f af59 	beq.w	b682 <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    b7d0:	9b06      	ldr	r3, [sp, #24]
    b7d2:	2bff      	cmp	r3, #255	; 0xff
    b7d4:	d0a8      	beq.n	b728 <ticker_job+0x540>
    b7d6:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    b7d8:	b233      	sxth	r3, r6
    b7da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b7de:	9305      	str	r3, [sp, #20]
    b7e0:	9a05      	ldr	r2, [sp, #20]
    b7e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b7e4:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    b7e8:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    b7ea:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    b7ec:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    b7ee:	bf88      	it	hi
    b7f0:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    b7f2:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    b7f4:	bf8c      	ite	hi
    b7f6:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    b7f8:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    b7fa:	2a00      	cmp	r2, #0
    b7fc:	d094      	beq.n	b728 <ticker_job+0x540>
    b7fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b800:	4293      	cmp	r3, r2
    b802:	d891      	bhi.n	b728 <ticker_job+0x540>
			    skip_collide <= skip &&
    b804:	78fa      	ldrb	r2, [r7, #3]
    b806:	78e3      	ldrb	r3, [r4, #3]
    b808:	429a      	cmp	r2, r3
    b80a:	d28d      	bcs.n	b728 <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    b80c:	4631      	mov	r1, r6
    b80e:	4658      	mov	r0, fp
    b810:	f7ff fc3f 	bl	b092 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    b814:	78bb      	ldrb	r3, [r7, #2]
    b816:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    b818:	9a05      	ldr	r2, [sp, #20]
    b81a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				ticker_collide->ticks_to_expire =
    b81c:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    b81e:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    b822:	46b2      	mov	sl, r6
    b824:	e6e9      	b.n	b5fa <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    b826:	2101      	movs	r1, #1
    b828:	e72f      	b.n	b68a <ticker_job+0x4a2>
		user = &users[count_user];
    b82a:	9b01      	ldr	r3, [sp, #4]
    b82c:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    b830:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    b832:	786b      	ldrb	r3, [r5, #1]
    b834:	78ea      	ldrb	r2, [r5, #3]
    b836:	429a      	cmp	r2, r3
    b838:	d102      	bne.n	b840 <ticker_job+0x658>
    b83a:	3c01      	subs	r4, #1
    b83c:	b2e4      	uxtb	r4, r4
    b83e:	e551      	b.n	b2e4 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    b840:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    b844:	011b      	lsls	r3, r3, #4
    b846:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    b848:	5cf3      	ldrb	r3, [r6, r3]
    b84a:	2b01      	cmp	r3, #1
    b84c:	d025      	beq.n	b89a <ticker_job+0x6b2>
    b84e:	2b02      	cmp	r3, #2
    b850:	d12a      	bne.n	b8a8 <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    b852:	f8d2 c004 	ldr.w	ip, [r2, #4]
    b856:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    b858:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    b85c:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    b860:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    b864:	28ff      	cmp	r0, #255	; 0xff
    b866:	d004      	beq.n	b872 <ticker_job+0x68a>
    b868:	6819      	ldr	r1, [r3, #0]
    b86a:	f8db 7014 	ldr.w	r7, [fp, #20]
    b86e:	42b9      	cmp	r1, r7
    b870:	d023      	beq.n	b8ba <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    b872:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    b876:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    b87a:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    b87c:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    b87e:	29ff      	cmp	r1, #255	; 0xff
    b880:	d007      	beq.n	b892 <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    b882:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    b886:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    b88a:	6987      	ldr	r7, [r0, #24]
    b88c:	6880      	ldr	r0, [r0, #8]
    b88e:	b1df      	cbz	r7, b8c8 <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    b890:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    b892:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    b896:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    b89a:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    b89c:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    b8a0:	b113      	cbz	r3, b8a8 <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    b8a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    b8a4:	2000      	movs	r0, #0
    b8a6:	4798      	blx	r3
			first = user->first + 1;
    b8a8:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    b8aa:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    b8ac:	3301      	adds	r3, #1
    b8ae:	b2db      	uxtb	r3, r3
				first = 0;
    b8b0:	429a      	cmp	r2, r3
    b8b2:	bf08      	it	eq
    b8b4:	2300      	moveq	r3, #0
			user->first = first;
    b8b6:	706b      	strb	r3, [r5, #1]
    b8b8:	e7bb      	b.n	b832 <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    b8ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    b8be:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    b8c2:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    b8c6:	e7da      	b.n	b87e <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    b8c8:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    b8ca:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    b8ce:	e7d6      	b.n	b87e <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    b8d0:	9b03      	ldr	r3, [sp, #12]
    b8d2:	2bff      	cmp	r3, #255	; 0xff
    b8d4:	d107      	bne.n	b8e6 <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    b8d6:	f00b fc1b 	bl	17110 <cntr_cnt_get>
    b8da:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    b8dc:	f00b fbf2 	bl	170c4 <cntr_start>
    b8e0:	b908      	cbnz	r0, b8e6 <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    b8e2:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    b8e6:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    b8ea:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    b8ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    b8f2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    b8f6:	260a      	movs	r6, #10
    b8f8:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    b8fa:	f00b fc09 	bl	17110 <cntr_cnt_get>
		cc = instance->ticks_current;
    b8fe:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    b902:	1b03      	subs	r3, r0, r4
    b904:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    b908:	3303      	adds	r3, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
    b90a:	42ab      	cmp	r3, r5
    b90c:	bf2c      	ite	cs
    b90e:	18e4      	addcs	r4, r4, r3
    b910:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    b912:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    b916:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    b918:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    b91c:	4620      	mov	r0, r4
    b91e:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    b920:	f00b fbf6 	bl	17110 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    b924:	1bc0      	subs	r0, r0, r7
    b926:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b92a:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    b92c:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    b92e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    b932:	42a0      	cmp	r0, r4
    b934:	f67f ace8 	bls.w	b308 <ticker_job+0x120>
		LL_ASSERT(i);
    b938:	3e01      	subs	r6, #1
    b93a:	d1de      	bne.n	b8fa <ticker_job+0x712>
    b93c:	4040      	eors	r0, r0
    b93e:	f380 8811 	msr	BASEPRI, r0
    b942:	f04f 0004 	mov.w	r0, #4
    b946:	df02      	svc	2
	instance->job_guard = 0;
    b948:	2300      	movs	r3, #0
    b94a:	f88b 301e 	strb.w	r3, [fp, #30]
    b94e:	e4d1      	b.n	b2f4 <ticker_job+0x10c>
	if (!pending) {
    b950:	2b00      	cmp	r3, #0
    b952:	d1f9      	bne.n	b948 <ticker_job+0x760>
		flag_compare_update = 1;
    b954:	2301      	movs	r3, #1
    b956:	9302      	str	r3, [sp, #8]
    b958:	e4bb      	b.n	b2d2 <ticker_job+0xea>
	while (id_insert !=
    b95a:	45b0      	cmp	r8, r6
    b95c:	f47f af3c 	bne.w	b7d8 <ticker_job+0x5f0>
    b960:	e68f      	b.n	b682 <ticker_job+0x49a>
}
    b962:	b013      	add	sp, #76	; 0x4c
    b964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b968:	ff172b5a 	.word	0xff172b5a
    b96c:	7f172b59 	.word	0x7f172b59

0000b970 <ticker_init>:
{
    b970:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    b972:	4d1a      	ldr	r5, [pc, #104]	; (b9dc <ticker_init+0x6c>)
{
    b974:	9f05      	ldr	r7, [sp, #20]
    b976:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    b97a:	262c      	movs	r6, #44	; 0x2c
    b97c:	4346      	muls	r6, r0
    b97e:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    b982:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    b984:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    b988:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    b98a:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    b98e:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    b992:	3b01      	subs	r3, #1
    b994:	b2db      	uxtb	r3, r3
    b996:	2bff      	cmp	r3, #255	; 0xff
    b998:	d111      	bne.n	b9be <ticker_init+0x4e>
	if (count_op) {
    b99a:	b9ec      	cbnz	r4, b9d8 <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    b99c:	222c      	movs	r2, #44	; 0x2c
    b99e:	fb02 5200 	mla	r2, r2, r0, r5
    b9a2:	9908      	ldr	r1, [sp, #32]
    b9a4:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    b9a6:	9909      	ldr	r1, [sp, #36]	; 0x24
    b9a8:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    b9aa:	990a      	ldr	r1, [sp, #40]	; 0x28
    b9ac:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    b9ae:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    b9b0:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    b9b2:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    b9b4:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    b9b6:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    b9b8:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    b9ba:	4620      	mov	r0, r4
    b9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    b9be:	b21a      	sxth	r2, r3
    b9c0:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    b9c4:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    b9c6:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    b9ca:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    b9ce:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    b9d0:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    b9d4:	b2e4      	uxtb	r4, r4
    b9d6:	e7dc      	b.n	b992 <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    b9d8:	2001      	movs	r0, #1
}
    b9da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b9dc:	20000b00 	.word	0x20000b00

0000b9e0 <ticker_trigger>:
	instance = &_instance[instance_index];
    b9e0:	4a07      	ldr	r2, [pc, #28]	; (ba00 <ticker_trigger+0x20>)
    b9e2:	212c      	movs	r1, #44	; 0x2c
    b9e4:	fb00 2301 	mla	r3, r0, r1, r2
{
    b9e8:	b410      	push	{r4}
	if (instance->sched_cb) {
    b9ea:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    b9ec:	b12c      	cbz	r4, b9fa <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    b9ee:	46a4      	mov	ip, r4
    b9f0:	2201      	movs	r2, #1
    b9f2:	2103      	movs	r1, #3
    b9f4:	2002      	movs	r0, #2
}
    b9f6:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    b9f8:	4760      	bx	ip
}
    b9fa:	bc10      	pop	{r4}
    b9fc:	4770      	bx	lr
    b9fe:	bf00      	nop
    ba00:	20000b00 	.word	0x20000b00

0000ba04 <ticker_start>:
{
    ba04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    ba08:	4f25      	ldr	r7, [pc, #148]	; (baa0 <ticker_start+0x9c>)
    ba0a:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    ba0e:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    ba10:	fb08 7000 	mla	r0, r8, r0, r7
    ba14:	fa0f fc81 	sxth.w	ip, r1
    ba18:	f8d0 e004 	ldr.w	lr, [r0, #4]
    ba1c:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    ba20:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    ba24:	78f4      	ldrb	r4, [r6, #3]
    ba26:	1c65      	adds	r5, r4, #1
    ba28:	b2ed      	uxtb	r5, r5
		last = 0;
    ba2a:	45ae      	cmp	lr, r5
    ba2c:	bf98      	it	ls
    ba2e:	2500      	movls	r5, #0
	if (last == user->first) {
    ba30:	f896 e001 	ldrb.w	lr, [r6, #1]
    ba34:	45ae      	cmp	lr, r5
    ba36:	d02f      	beq.n	ba98 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    ba38:	f8d6 c004 	ldr.w	ip, [r6, #4]
    ba3c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    ba40:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    ba44:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    ba48:	f04f 0a03 	mov.w	sl, #3
    ba4c:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    ba50:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    ba52:	9b08      	ldr	r3, [sp, #32]
    ba54:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    ba56:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ba58:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    ba5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ba5c:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    ba5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ba60:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    ba62:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    ba66:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    ba68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ba6a:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    ba6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ba6e:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    ba70:	2302      	movs	r3, #2
    ba72:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    ba74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ba76:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    ba78:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    ba7a:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    ba7c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    ba7e:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    ba80:	6a45      	ldr	r5, [r0, #36]	; 0x24
    ba82:	6a03      	ldr	r3, [r0, #32]
    ba84:	4608      	mov	r0, r1
    ba86:	4798      	blx	r3
    ba88:	fb09 7308 	mla	r3, r9, r8, r7
    ba8c:	2200      	movs	r2, #0
    ba8e:	2104      	movs	r1, #4
    ba90:	47a8      	blx	r5
	return user_op->status;
    ba92:	6a60      	ldr	r0, [r4, #36]	; 0x24
    ba94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    ba98:	2001      	movs	r0, #1
}
    ba9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ba9e:	bf00      	nop
    baa0:	20000b00 	.word	0x20000b00

0000baa4 <ticker_update>:
{
    baa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    baa8:	f8df 8090 	ldr.w	r8, [pc, #144]	; bb3c <ticker_update+0x98>
    baac:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    bab0:	fb0a 8e00 	mla	lr, sl, r0, r8
    bab4:	b20f      	sxth	r7, r1
    bab6:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    baba:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    babc:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    bac0:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    bac4:	78c4      	ldrb	r4, [r0, #3]
    bac6:	1c66      	adds	r6, r4, #1
    bac8:	b2f6      	uxtb	r6, r6
		last = 0;
    baca:	42b5      	cmp	r5, r6
    bacc:	bf98      	it	ls
    bace:	2600      	movls	r6, #0
	if (last == user->first) {
    bad0:	7845      	ldrb	r5, [r0, #1]
    bad2:	42b5      	cmp	r5, r6
    bad4:	d02f      	beq.n	bb36 <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    bad6:	f8d0 c004 	ldr.w	ip, [r0, #4]
    bada:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    bade:	0125      	lsls	r5, r4, #4
    bae0:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    bae4:	2704      	movs	r7, #4
    bae6:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    baea:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    baec:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    baf0:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    baf2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    baf6:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    baf8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    bafc:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    bafe:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    bb02:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    bb04:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    bb08:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    bb0a:	2302      	movs	r3, #2
    bb0c:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    bb0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bb10:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    bb12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    bb14:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    bb16:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    bb18:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    bb1a:	f8de 3020 	ldr.w	r3, [lr, #32]
    bb1e:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    bb22:	4608      	mov	r0, r1
    bb24:	4798      	blx	r3
    bb26:	fb09 830a 	mla	r3, r9, sl, r8
    bb2a:	2200      	movs	r2, #0
    bb2c:	4639      	mov	r1, r7
    bb2e:	47a8      	blx	r5
	return user_op->status;
    bb30:	6a60      	ldr	r0, [r4, #36]	; 0x24
    bb32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    bb36:	2001      	movs	r0, #1
}
    bb38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bb3c:	20000b00 	.word	0x20000b00

0000bb40 <ticker_stop>:
{
    bb40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    bb44:	f8df 906c 	ldr.w	r9, [pc, #108]	; bbb4 <ticker_stop+0x74>
    bb48:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    bb4c:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    bb50:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    bb52:	f8de 0004 	ldr.w	r0, [lr, #4]
    bb56:	b20e      	sxth	r6, r1
    bb58:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    bb5c:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    bb60:	78fc      	ldrb	r4, [r7, #3]
    bb62:	1c65      	adds	r5, r4, #1
    bb64:	b2ed      	uxtb	r5, r5
		last = 0;
    bb66:	42a8      	cmp	r0, r5
    bb68:	bf98      	it	ls
    bb6a:	2500      	movls	r5, #0
	if (last == user->first) {
    bb6c:	7878      	ldrb	r0, [r7, #1]
    bb6e:	42a8      	cmp	r0, r5
    bb70:	d01d      	beq.n	bbae <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    bb72:	6878      	ldr	r0, [r7, #4]
    bb74:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    bb78:	0124      	lsls	r4, r4, #4
    bb7a:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    bb7c:	f04f 0c05 	mov.w	ip, #5
    bb80:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    bb84:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    bb86:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    bb88:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    bb8a:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    bb8c:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    bb8e:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    bb90:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    bb92:	f8de 3020 	ldr.w	r3, [lr, #32]
    bb96:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    bb9a:	4608      	mov	r0, r1
    bb9c:	4798      	blx	r3
    bb9e:	fb08 930a 	mla	r3, r8, sl, r9
    bba2:	2200      	movs	r2, #0
    bba4:	2104      	movs	r1, #4
    bba6:	47a0      	blx	r4
	return user_op->status;
    bba8:	6a70      	ldr	r0, [r6, #36]	; 0x24
    bbaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    bbae:	2001      	movs	r0, #1
}
    bbb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bbb4:	20000b00 	.word	0x20000b00

0000bbb8 <ticker_next_slot_get>:
{
    bbb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    bbbc:	f8df 8078 	ldr.w	r8, [pc, #120]	; bc38 <ticker_next_slot_get+0x80>
    bbc0:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    bbc4:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    bbc6:	fb0a 8000 	mla	r0, sl, r0, r8
    bbca:	fa0f fe81 	sxth.w	lr, r1
    bbce:	6845      	ldr	r5, [r0, #4]
    bbd0:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    bbd4:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    bbd8:	78fc      	ldrb	r4, [r7, #3]
    bbda:	1c66      	adds	r6, r4, #1
    bbdc:	b2f6      	uxtb	r6, r6
		last = 0;
    bbde:	42b5      	cmp	r5, r6
    bbe0:	bf98      	it	ls
    bbe2:	2600      	movls	r6, #0
	if (last == user->first) {
    bbe4:	787d      	ldrb	r5, [r7, #1]
    bbe6:	42b5      	cmp	r5, r6
    bbe8:	d023      	beq.n	bc32 <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    bbea:	f8d7 c004 	ldr.w	ip, [r7, #4]
    bbee:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    bbf2:	0125      	lsls	r5, r4, #4
    bbf4:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    bbf8:	f04f 0e02 	mov.w	lr, #2
    bbfc:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    bc00:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    bc02:	9b08      	ldr	r3, [sp, #32]
    bc04:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    bc06:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bc08:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    bc0a:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    bc0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    bc0e:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    bc10:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    bc12:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    bc16:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    bc18:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    bc1a:	6a45      	ldr	r5, [r0, #36]	; 0x24
    bc1c:	6a03      	ldr	r3, [r0, #32]
    bc1e:	4608      	mov	r0, r1
    bc20:	4798      	blx	r3
    bc22:	fb09 830a 	mla	r3, r9, sl, r8
    bc26:	2200      	movs	r2, #0
    bc28:	2104      	movs	r1, #4
    bc2a:	47a8      	blx	r5
	return user_op->status;
    bc2c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    bc2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    bc32:	2001      	movs	r0, #1
}
    bc34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bc38:	20000b00 	.word	0x20000b00

0000bc3c <ticker_job_idle_get>:
{
    bc3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    bc40:	f8df 906c 	ldr.w	r9, [pc, #108]	; bcb0 <ticker_job_idle_get+0x74>
    bc44:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    bc48:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    bc4c:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    bc4e:	f8de 0004 	ldr.w	r0, [lr, #4]
    bc52:	b20e      	sxth	r6, r1
    bc54:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    bc58:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    bc5c:	78fc      	ldrb	r4, [r7, #3]
    bc5e:	1c65      	adds	r5, r4, #1
    bc60:	b2ed      	uxtb	r5, r5
		last = 0;
    bc62:	42a8      	cmp	r0, r5
    bc64:	bf98      	it	ls
    bc66:	2500      	movls	r5, #0
	if (last == user->first) {
    bc68:	7878      	ldrb	r0, [r7, #1]
    bc6a:	42a8      	cmp	r0, r5
    bc6c:	d01d      	beq.n	bcaa <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    bc6e:	6878      	ldr	r0, [r7, #4]
    bc70:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    bc74:	0124      	lsls	r4, r4, #4
    bc76:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    bc78:	f04f 0c01 	mov.w	ip, #1
    bc7c:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    bc80:	20ff      	movs	r0, #255	; 0xff
    bc82:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    bc84:	2002      	movs	r0, #2
    bc86:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    bc88:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    bc8a:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    bc8c:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    bc8e:	f8de 3020 	ldr.w	r3, [lr, #32]
    bc92:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    bc96:	4608      	mov	r0, r1
    bc98:	4798      	blx	r3
    bc9a:	fb08 930a 	mla	r3, r8, sl, r9
    bc9e:	2200      	movs	r2, #0
    bca0:	2104      	movs	r1, #4
    bca2:	47a0      	blx	r4
	return user_op->status;
    bca4:	6a70      	ldr	r0, [r6, #36]	; 0x24
    bca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    bcaa:	2001      	movs	r0, #1
}
    bcac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bcb0:	20000b00 	.word	0x20000b00

0000bcb4 <ticker_job_sched>:
{
    bcb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    bcb8:	4c08      	ldr	r4, [pc, #32]	; (bcdc <ticker_job_sched+0x28>)
    bcba:	252c      	movs	r5, #44	; 0x2c
    bcbc:	fb05 4300 	mla	r3, r5, r0, r4
{
    bcc0:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    bcc2:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    bcc4:	6a1b      	ldr	r3, [r3, #32]
    bcc6:	4608      	mov	r0, r1
    bcc8:	4798      	blx	r3
    bcca:	fb06 4305 	mla	r3, r6, r5, r4
    bcce:	46bc      	mov	ip, r7
    bcd0:	2200      	movs	r2, #0
    bcd2:	2104      	movs	r1, #4
}
    bcd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    bcd8:	4760      	bx	ip
    bcda:	bf00      	nop
    bcdc:	20000b00 	.word	0x20000b00

0000bce0 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    bce0:	f00b ba16 	b.w	17110 <cntr_cnt_get>

0000bce4 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    bce4:	1a40      	subs	r0, r0, r1
}
    bce6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bcea:	4770      	bx	lr

0000bcec <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    bcec:	b508      	push	{r3, lr}
    bcee:	4603      	mov	r3, r0
	if (addr_type > 1) {
    bcf0:	2b01      	cmp	r3, #1
{
    bcf2:	4608      	mov	r0, r1
	if (addr_type > 1) {
    bcf4:	d80e      	bhi.n	bd14 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    bcf6:	b133      	cbz	r3, bd06 <ll_addr_get+0x1a>
		if (bdaddr) {
    bcf8:	b119      	cbz	r1, bd02 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    bcfa:	2206      	movs	r2, #6
    bcfc:	4906      	ldr	r1, [pc, #24]	; (bd18 <ll_addr_get+0x2c>)
    bcfe:	f7f4 fd5d 	bl	7bc <memcpy>
		}

		return rnd_addr;
    bd02:	4805      	ldr	r0, [pc, #20]	; (bd18 <ll_addr_get+0x2c>)
    bd04:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    bd06:	b119      	cbz	r1, bd10 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    bd08:	2206      	movs	r2, #6
    bd0a:	4904      	ldr	r1, [pc, #16]	; (bd1c <ll_addr_get+0x30>)
    bd0c:	f7f4 fd56 	bl	7bc <memcpy>
	}

	return pub_addr;
    bd10:	4802      	ldr	r0, [pc, #8]	; (bd1c <ll_addr_get+0x30>)
}
    bd12:	bd08      	pop	{r3, pc}
		return NULL;
    bd14:	2000      	movs	r0, #0
    bd16:	bd08      	pop	{r3, pc}
    bd18:	20000b5e 	.word	0x20000b5e
    bd1c:	20000b58 	.word	0x20000b58

0000bd20 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    bd20:	b570      	push	{r4, r5, r6, lr}
    bd22:	4606      	mov	r6, r0
    bd24:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    bd26:	f008 f8e9 	bl	13efc <ll_adv_is_enabled>
    bd2a:	4604      	mov	r4, r0
    bd2c:	b110      	cbz	r0, bd34 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    bd2e:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    bd30:	4620      	mov	r0, r4
    bd32:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    bd34:	f008 f8f8 	bl	13f28 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    bd38:	f010 0f06 	tst.w	r0, #6
    bd3c:	d1f7      	bne.n	bd2e <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    bd3e:	2206      	movs	r2, #6
    bd40:	4629      	mov	r1, r5
	if (addr_type) {
    bd42:	b11e      	cbz	r6, bd4c <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    bd44:	4802      	ldr	r0, [pc, #8]	; (bd50 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    bd46:	f7f4 fd39 	bl	7bc <memcpy>
    bd4a:	e7f1      	b.n	bd30 <ll_addr_set+0x10>
    bd4c:	4801      	ldr	r0, [pc, #4]	; (bd54 <ll_addr_set+0x34>)
    bd4e:	e7fa      	b.n	bd46 <ll_addr_set+0x26>
    bd50:	20000b5e 	.word	0x20000b5e
    bd54:	20000b58 	.word	0x20000b58

0000bd58 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    bd58:	2300      	movs	r3, #0
    bd5a:	7003      	strb	r3, [r0, #0]
	*max = 0;
    bd5c:	700b      	strb	r3, [r1, #0]
    bd5e:	4770      	bx	lr

0000bd60 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    bd60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bd62:	4607      	mov	r7, r0
    bd64:	460e      	mov	r6, r1
	while (len) {
    bd66:	460c      	mov	r4, r1
    bd68:	1b35      	subs	r5, r6, r4
    bd6a:	443d      	add	r5, r7
    bd6c:	b18c      	cbz	r4, bd92 <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    bd6e:	f7f6 fb7f 	bl	2470 <sys_rand32_get>

		if (len >= sizeof(v)) {
    bd72:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    bd74:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    bd76:	d907      	bls.n	bd88 <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    bd78:	2204      	movs	r2, #4
    bd7a:	eb0d 0102 	add.w	r1, sp, r2
    bd7e:	4628      	mov	r0, r5
    bd80:	f7f4 fd1c 	bl	7bc <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    bd84:	3c04      	subs	r4, #4
    bd86:	e7ef      	b.n	bd68 <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    bd88:	4622      	mov	r2, r4
    bd8a:	a901      	add	r1, sp, #4
    bd8c:	4628      	mov	r0, r5
    bd8e:	f7f4 fd15 	bl	7bc <memcpy>
			break;
		}
	}

	return 0;
}
    bd92:	2000      	movs	r0, #0
    bd94:	b003      	add	sp, #12
    bd96:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000bd98 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    bd98:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    bd9a:	2300      	movs	r3, #0
    bd9c:	f00b f9ec 	bl	17178 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    bda0:	2000      	movs	r0, #0
    bda2:	bd08      	pop	{r3, pc}

0000bda4 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    bda4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    bda6:	4802      	ldr	r0, [pc, #8]	; (bdb0 <_hci_driver_init+0xc>)
    bda8:	f7f9 fa5e 	bl	5268 <bt_hci_driver_register>

	return 0;
}
    bdac:	2000      	movs	r0, #0
    bdae:	bd08      	pop	{r3, pc}
    bdb0:	000227e4 	.word	0x000227e4

0000bdb4 <hci_driver_send>:
{
    bdb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!buf->len) {
    bdb6:	8983      	ldrh	r3, [r0, #12]
{
    bdb8:	4605      	mov	r5, r0
	if (!buf->len) {
    bdba:	b1d3      	cbz	r3, bdf2 <hci_driver_send+0x3e>
	switch (type) {
    bdbc:	7d03      	ldrb	r3, [r0, #20]
    bdbe:	b18b      	cbz	r3, bde4 <hci_driver_send+0x30>
    bdc0:	2b02      	cmp	r3, #2
    bdc2:	d116      	bne.n	bdf2 <hci_driver_send+0x3e>
	err = hci_acl_handle(buf, &evt);
    bdc4:	a901      	add	r1, sp, #4
    bdc6:	f001 fa19 	bl	d1fc <hci_acl_handle>
    bdca:	4604      	mov	r4, r0
	if (evt) {
    bdcc:	9801      	ldr	r0, [sp, #4]
    bdce:	b108      	cbz	r0, bdd4 <hci_driver_send+0x20>
		bt_recv_prio(evt);
    bdd0:	f7f9 f9be 	bl	5150 <bt_recv_prio>
	if (!err) {
    bdd4:	b91c      	cbnz	r4, bdde <hci_driver_send+0x2a>
		net_buf_unref(buf);
    bdd6:	4628      	mov	r0, r5
    bdd8:	f00c f85e 	bl	17e98 <net_buf_unref>
    bddc:	2400      	movs	r4, #0
}
    bdde:	4620      	mov	r0, r4
    bde0:	b003      	add	sp, #12
    bde2:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf);
    bde4:	f000 fc5e 	bl	c6a4 <hci_cmd_handle>
	if (evt) {
    bde8:	2800      	cmp	r0, #0
    bdea:	d0f4      	beq.n	bdd6 <hci_driver_send+0x22>
		bt_recv_prio(evt);
    bdec:	f7f9 f9b0 	bl	5150 <bt_recv_prio>
    bdf0:	e7f1      	b.n	bdd6 <hci_driver_send+0x22>
		return -EINVAL;
    bdf2:	f06f 0415 	mvn.w	r4, #21
    bdf6:	e7f2      	b.n	bdde <hci_driver_send+0x2a>

0000bdf8 <stack_analyze>:
{
    bdf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	size_t unused = 0;
    bdfa:	2300      	movs	r3, #0
	for (i = 0; i < size; i++) {
    bdfc:	429a      	cmp	r2, r3
    bdfe:	d002      	beq.n	be06 <stack_analyze+0xe>
		if ((unsigned char)stack[i] == 0xaa) {
    be00:	5ccc      	ldrb	r4, [r1, r3]
    be02:	2caa      	cmp	r4, #170	; 0xaa
    be04:	d00d      	beq.n	be22 <stack_analyze+0x2a>
	pcnt = ((size - unused) * 100) / size;
    be06:	1ad4      	subs	r4, r2, r3
    be08:	2164      	movs	r1, #100	; 0x64
    be0a:	4361      	muls	r1, r4
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    be0c:	9201      	str	r2, [sp, #4]
	pcnt = ((size - unused) * 100) / size;
    be0e:	fbb1 f1f2 	udiv	r1, r1, r2
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    be12:	9400      	str	r4, [sp, #0]
    be14:	9102      	str	r1, [sp, #8]
    be16:	4601      	mov	r1, r0
    be18:	4803      	ldr	r0, [pc, #12]	; (be28 <stack_analyze+0x30>)
    be1a:	f7f5 fcfb 	bl	1814 <printk>
	       size, unused, size - unused, size, pcnt);
}
    be1e:	b004      	add	sp, #16
    be20:	bd10      	pop	{r4, pc}
			unused++;
    be22:	3301      	adds	r3, #1
    be24:	e7ea      	b.n	bdfc <stack_analyze+0x4>
    be26:	bf00      	nop
    be28:	00022578 	.word	0x00022578

0000be2c <recv_thread>:
{
    be2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    be2e:	4e2c      	ldr	r6, [pc, #176]	; (bee0 <recv_thread+0xb4>)
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
    be30:	4d2c      	ldr	r5, [pc, #176]	; (bee4 <recv_thread+0xb8>)
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    be32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    be36:	4630      	mov	r0, r6
    be38:	f014 fc25 	bl	20686 <k_queue_get>
		if (node_rx && !buf) {
    be3c:	4604      	mov	r4, r0
    be3e:	b370      	cbz	r0, be9e <recv_thread+0x72>
	s8_t class = hci_get_class(node_rx);
    be40:	f001 fc74 	bl	d72c <hci_get_class>
	switch (class) {
    be44:	1e03      	subs	r3, r0, #0
    be46:	9401      	str	r4, [sp, #4]
    be48:	db03      	blt.n	be52 <recv_thread+0x26>
    be4a:	2b02      	cmp	r3, #2
    be4c:	dd07      	ble.n	be5e <recv_thread+0x32>
    be4e:	2b03      	cmp	r3, #3
    be50:	d039      	beq.n	bec6 <recv_thread+0x9a>
		LL_ASSERT(0);
    be52:	4040      	eors	r0, r0
    be54:	f380 8811 	msr	BASEPRI, r0
    be58:	f04f 0004 	mov.w	r0, #4
    be5c:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    be5e:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    be60:	bf0e      	itee	eq
    be62:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    be64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    be68:	2001      	movne	r0, #1
    be6a:	f7f9 fd09 	bl	5880 <bt_buf_get_rx>
    be6e:	4604      	mov	r4, r0
		if (buf) {
    be70:	b118      	cbz	r0, be7a <recv_thread+0x4e>
			hci_evt_encode(node_rx, buf);
    be72:	4601      	mov	r1, r0
    be74:	9801      	ldr	r0, [sp, #4]
    be76:	f001 fa4b 	bl	d310 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    be7a:	9b01      	ldr	r3, [sp, #4]
    be7c:	2100      	movs	r1, #0
    be7e:	88d8      	ldrh	r0, [r3, #6]
    be80:	f008 fcd6 	bl	14830 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    be84:	a802      	add	r0, sp, #8
    be86:	2200      	movs	r2, #0
    be88:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    be8c:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    be8e:	f008 fc6d 	bl	1476c <ll_rx_mem_release>
		if (buf) {
    be92:	b124      	cbz	r4, be9e <recv_thread+0x72>
			if (buf->len) {
    be94:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    be96:	4620      	mov	r0, r4
			if (buf->len) {
    be98:	b1fb      	cbz	r3, beda <recv_thread+0xae>
				bt_recv(buf);
    be9a:	f7f8 fd13 	bl	48c4 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    be9e:	f014 fd9d 	bl	209dc <_impl_k_yield>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    bea2:	f014 fe95 	bl	20bd0 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
    bea6:	682b      	ldr	r3, [r5, #0]
    bea8:	1ac0      	subs	r0, r0, r3
    beaa:	f241 3388 	movw	r3, #5000	; 0x1388
    beae:	4298      	cmp	r0, r3
    beb0:	d9bf      	bls.n	be32 <recv_thread+0x6>
			STACK_ANALYZE("recv thread stack", recv_thread_stack);
    beb2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    beb6:	490c      	ldr	r1, [pc, #48]	; (bee8 <recv_thread+0xbc>)
    beb8:	480c      	ldr	r0, [pc, #48]	; (beec <recv_thread+0xc0>)
    beba:	f7ff ff9d 	bl	bdf8 <stack_analyze>
    bebe:	f014 fe87 	bl	20bd0 <_impl_k_uptime_get_32>
			rx_ts = k_uptime_get_32();
    bec2:	6028      	str	r0, [r5, #0]
    bec4:	e7b5      	b.n	be32 <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    bec6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    beca:	f7f9 fcd9 	bl	5880 <bt_buf_get_rx>
    bece:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    bed0:	4601      	mov	r1, r0
    bed2:	9801      	ldr	r0, [sp, #4]
    bed4:	f001 f9f0 	bl	d2b8 <hci_acl_encode>
    bed8:	e7cf      	b.n	be7a <recv_thread+0x4e>
				net_buf_unref(buf);
    beda:	f00b ffdd 	bl	17e98 <net_buf_unref>
    bede:	e7de      	b.n	be9e <recv_thread+0x72>
    bee0:	2000ed1c 	.word	0x2000ed1c
    bee4:	20000b68 	.word	0x20000b68
    bee8:	20006a50 	.word	0x20006a50
    beec:	000227f9 	.word	0x000227f9

0000bef0 <prio_recv_thread>:
{
    bef0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    bef4:	4f1d      	ldr	r7, [pc, #116]	; (bf6c <prio_recv_thread+0x7c>)
		if (k_uptime_get_32() - prio_ts > K_SECONDS(5)) {
    bef6:	4c1e      	ldr	r4, [pc, #120]	; (bf70 <prio_recv_thread+0x80>)
			STACK_ANALYZE("prio recv thread stack",
    bef8:	4e1e      	ldr	r6, [pc, #120]	; (bf74 <prio_recv_thread+0x84>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    befa:	f10d 0102 	add.w	r1, sp, #2
    befe:	a801      	add	r0, sp, #4
    bf00:	f008 fbfc 	bl	146fc <ll_rx_get>
    bf04:	4605      	mov	r5, r0
    bf06:	b940      	cbnz	r0, bf1a <prio_recv_thread+0x2a>
		if (node_rx) {
    bf08:	9b01      	ldr	r3, [sp, #4]
    bf0a:	b1bb      	cbz	r3, bf3c <prio_recv_thread+0x4c>
			ll_rx_dequeue();
    bf0c:	f009 fb62 	bl	155d4 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    bf10:	9901      	ldr	r1, [sp, #4]
    bf12:	4819      	ldr	r0, [pc, #100]	; (bf78 <prio_recv_thread+0x88>)
    bf14:	f014 fb93 	bl	2063e <k_queue_append>
    bf18:	e7ef      	b.n	befa <prio_recv_thread+0xa>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    bf1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    bf1e:	2001      	movs	r0, #1
    bf20:	f7f9 fcae 	bl	5880 <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    bf24:	462a      	mov	r2, r5
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    bf26:	4680      	mov	r8, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    bf28:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    bf2c:	f001 fbea 	bl	d704 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    bf30:	4640      	mov	r0, r8
    bf32:	f7f9 f90d 	bl	5150 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    bf36:	f014 fd51 	bl	209dc <_impl_k_yield>
    bf3a:	e7de      	b.n	befa <prio_recv_thread+0xa>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    bf3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    bf40:	4638      	mov	r0, r7
    bf42:	f014 fe27 	bl	20b94 <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    bf46:	f014 fe43 	bl	20bd0 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - prio_ts > K_SECONDS(5)) {
    bf4a:	6823      	ldr	r3, [r4, #0]
    bf4c:	1ac0      	subs	r0, r0, r3
    bf4e:	f241 3388 	movw	r3, #5000	; 0x1388
    bf52:	4298      	cmp	r0, r3
    bf54:	d9d1      	bls.n	befa <prio_recv_thread+0xa>
			STACK_ANALYZE("prio recv thread stack",
    bf56:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    bf5a:	4631      	mov	r1, r6
    bf5c:	4807      	ldr	r0, [pc, #28]	; (bf7c <prio_recv_thread+0x8c>)
    bf5e:	f7ff ff4b 	bl	bdf8 <stack_analyze>
    bf62:	f014 fe35 	bl	20bd0 <_impl_k_uptime_get_32>
			prio_ts = k_uptime_get_32();
    bf66:	6020      	str	r0, [r4, #0]
    bf68:	e7c7      	b.n	befa <prio_recv_thread+0xa>
    bf6a:	bf00      	nop
    bf6c:	2000ecd4 	.word	0x2000ecd4
    bf70:	20000b64 	.word	0x20000b64
    bf74:	20006890 	.word	0x20006890
    bf78:	2000ed1c 	.word	0x2000ed1c
    bf7c:	000227f4 	.word	0x000227f4

0000bf80 <hci_driver_open>:
{
    bf80:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    bf82:	4814      	ldr	r0, [pc, #80]	; (bfd4 <hci_driver_open+0x54>)
{
    bf84:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    bf86:	f009 fbc9 	bl	1571c <ll_init>
	if (err) {
    bf8a:	4604      	mov	r4, r0
    bf8c:	b9f8      	cbnz	r0, bfce <hci_driver_open+0x4e>
	hci_init(NULL);
    bf8e:	f001 fbe5 	bl	d75c <hci_init>

    bf92:	f06f 0309 	mvn.w	r3, #9
    bf96:	9303      	str	r3, [sp, #12]
    bf98:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    bf9c:	4b0e      	ldr	r3, [pc, #56]	; (bfd8 <hci_driver_open+0x58>)
    bf9e:	490f      	ldr	r1, [pc, #60]	; (bfdc <hci_driver_open+0x5c>)
    bfa0:	9405      	str	r4, [sp, #20]
    bfa2:	9404      	str	r4, [sp, #16]
    bfa4:	9402      	str	r4, [sp, #8]
    bfa6:	9401      	str	r4, [sp, #4]
    bfa8:	9400      	str	r4, [sp, #0]
    bfaa:	480d      	ldr	r0, [pc, #52]	; (bfe0 <hci_driver_open+0x60>)
    bfac:	f014 ffce 	bl	20f4c <_impl_k_thread_create>
    bfb0:	f06f 0307 	mvn.w	r3, #7
    bfb4:	9303      	str	r3, [sp, #12]
    bfb6:	9405      	str	r4, [sp, #20]
    bfb8:	9404      	str	r4, [sp, #16]
    bfba:	9402      	str	r4, [sp, #8]
    bfbc:	9401      	str	r4, [sp, #4]
    bfbe:	9400      	str	r4, [sp, #0]
    bfc0:	4b08      	ldr	r3, [pc, #32]	; (bfe4 <hci_driver_open+0x64>)
    bfc2:	4909      	ldr	r1, [pc, #36]	; (bfe8 <hci_driver_open+0x68>)
    bfc4:	4809      	ldr	r0, [pc, #36]	; (bfec <hci_driver_open+0x6c>)
    bfc6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    bfca:	f014 ffbf 	bl	20f4c <_impl_k_thread_create>
}
    bfce:	4620      	mov	r0, r4
    bfd0:	b006      	add	sp, #24
    bfd2:	bd10      	pop	{r4, pc}
    bfd4:	2000ecd4 	.word	0x2000ecd4
    bfd8:	0000bef1 	.word	0x0000bef1
    bfdc:	20006890 	.word	0x20006890
    bfe0:	20004224 	.word	0x20004224
    bfe4:	0000be2d 	.word	0x0000be2d
    bfe8:	20006a50 	.word	0x20006a50
    bfec:	200041bc 	.word	0x200041bc

0000bff0 <sys_put_le32>:
	dst[1] = val >> 8;
    bff0:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    bff4:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    bff6:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    bff8:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    bffa:	0a00      	lsrs	r0, r0, #8
    bffc:	704b      	strb	r3, [r1, #1]
    bffe:	70c8      	strb	r0, [r1, #3]
    c000:	4770      	bx	lr

0000c002 <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    c002:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    c004:	3008      	adds	r0, #8
{
    c006:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    c008:	2102      	movs	r1, #2
{
    c00a:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    c00c:	f00b ffa2 	bl	17f54 <net_buf_simple_add>
	hdr->evt = evt;
    c010:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    c012:	7044      	strb	r4, [r0, #1]
    c014:	bd38      	pop	{r3, r4, r5, pc}
	...

0000c018 <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    c018:	b538      	push	{r3, r4, r5, lr}
    c01a:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    c01c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c020:	f7f9 fc3e 	bl	58a0 <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    c024:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    c026:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    c028:	210f      	movs	r1, #15
    c02a:	f7ff ffea 	bl	c002 <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    c02e:	2104      	movs	r1, #4
    c030:	f104 0008 	add.w	r0, r4, #8
    c034:	f00b ff8e 	bl	17f54 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    c038:	2301      	movs	r3, #1
    c03a:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    c03c:	4b02      	ldr	r3, [pc, #8]	; (c048 <cmd_status+0x30>)
	cs->status = status;
    c03e:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    c040:	881b      	ldrh	r3, [r3, #0]
    c042:	8043      	strh	r3, [r0, #2]

	return buf;
}
    c044:	4620      	mov	r0, r4
    c046:	bd38      	pop	{r3, r4, r5, pc}
    c048:	20000b6c 	.word	0x20000b6c

0000c04c <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    c04c:	b570      	push	{r4, r5, r6, lr}
    c04e:	4604      	mov	r4, r0
    c050:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    c052:	3201      	adds	r2, #1
{
    c054:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    c056:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    c058:	b2d2      	uxtb	r2, r2
    c05a:	213e      	movs	r1, #62	; 0x3e
    c05c:	f7ff ffd1 	bl	c002 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    c060:	2101      	movs	r1, #1
    c062:	4620      	mov	r0, r4
    c064:	f00b ff76 	bl	17f54 <net_buf_simple_add>
	me->subevent = subevt;
    c068:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    c06a:	4629      	mov	r1, r5
    c06c:	4620      	mov	r0, r4
}
    c06e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    c072:	f00b bf6f 	b.w	17f54 <net_buf_simple_add>
	...

0000c078 <cmd_complete>:
{
    c078:	b538      	push	{r3, r4, r5, lr}
    c07a:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    c07c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    c080:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    c082:	f7f9 fc0d 	bl	58a0 <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    c086:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    c088:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    c08a:	b2d2      	uxtb	r2, r2
    c08c:	210e      	movs	r1, #14
    c08e:	f7ff ffb8 	bl	c002 <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    c092:	6820      	ldr	r0, [r4, #0]
    c094:	2103      	movs	r1, #3
    c096:	3008      	adds	r0, #8
    c098:	f00b ff5c 	bl	17f54 <net_buf_simple_add>
	cc->ncmd = 1;
    c09c:	2301      	movs	r3, #1
    c09e:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    c0a0:	4b05      	ldr	r3, [pc, #20]	; (c0b8 <cmd_complete+0x40>)
    c0a2:	881b      	ldrh	r3, [r3, #0]
    c0a4:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    c0a8:	6820      	ldr	r0, [r4, #0]
    c0aa:	4629      	mov	r1, r5
    c0ac:	3008      	adds	r0, #8
}
    c0ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    c0b2:	f00b bf4f 	b.w	17f54 <net_buf_simple_add>
    c0b6:	bf00      	nop
    c0b8:	20000b6c 	.word	0x20000b6c

0000c0bc <le_advertising_report>:
}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

static void le_advertising_report(struct pdu_data *pdu_data, u8_t *b,
				  struct net_buf *buf)
{
    c0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c0c0:	b085      	sub	sp, #20
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    c0c2:	2301      	movs	r3, #1
    c0c4:	f88d 3009 	strb.w	r3, [sp, #9]
    c0c8:	2303      	movs	r3, #3
    c0ca:	f88d 300a 	strb.w	r3, [sp, #10]
    c0ce:	23ff      	movs	r3, #255	; 0xff
    c0d0:	f88d 300b 	strb.w	r3, [sp, #11]
    c0d4:	f88d 300d 	strb.w	r3, [sp, #13]
    c0d8:	2302      	movs	r3, #2
    c0da:	f88d 300e 	strb.w	r3, [sp, #14]
	u8_t direct;
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */
	s8_t *prssi;

#if defined(CONFIG_BT_CTLR_PRIVACY)
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    c0de:	7843      	ldrb	r3, [r0, #1]
{
    c0e0:	4688      	mov	r8, r1
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    c0e2:	4443      	add	r3, r8
{
    c0e4:	4604      	mov	r4, r0
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    c0e6:	7add      	ldrb	r5, [r3, #11]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
	/* Update current RPA */
	if (adv->tx_addr) {
    c0e8:	7803      	ldrb	r3, [r0, #0]
{
    c0ea:	4693      	mov	fp, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    c0ec:	2100      	movs	r1, #0
    c0ee:	2204      	movs	r2, #4
	if (adv->tx_addr) {
    c0f0:	0658      	lsls	r0, r3, #25
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    c0f2:	f88d 1008 	strb.w	r1, [sp, #8]
    c0f6:	f88d 200c 	strb.w	r2, [sp, #12]
	if (adv->tx_addr) {
    c0fa:	d504      	bpl.n	c106 <le_advertising_report+0x4a>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    c0fc:	1ca3      	adds	r3, r4, #2
    c0fe:	462a      	mov	r2, r5
    c100:	4608      	mov	r0, r1
    c102:	f00a feed 	bl	16ee0 <ll_rl_crpa_set>
	}
#endif

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    c106:	4b79      	ldr	r3, [pc, #484]	; (c2ec <le_advertising_report+0x230>)
    c108:	e9d3 2300 	ldrd	r2, r3, [r3]
    c10c:	2200      	movs	r2, #0
    c10e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    c112:	4313      	orrs	r3, r2
    c114:	f000 80a5 	beq.w	c262 <le_advertising_report+0x1a6>
		return;
	}

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    c118:	7863      	ldrb	r3, [r4, #1]
    c11a:	4443      	add	r3, r8
    c11c:	f893 a00c 	ldrb.w	sl, [r3, #12]
    c120:	4b73      	ldr	r3, [pc, #460]	; (c2f0 <le_advertising_report+0x234>)
		   offsetof(struct pdu_adv, payload) + adv->len + 2];

	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    c122:	e9d3 2300 	ldrd	r2, r3, [r3]
    c126:	f1ba 0f00 	cmp.w	sl, #0
    c12a:	d138      	bne.n	c19e <le_advertising_report+0xe2>
    c12c:	f002 0202 	and.w	r2, r2, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    c130:	2300      	movs	r3, #0
    c132:	4313      	orrs	r3, r2
    c134:	f000 8095 	beq.w	c262 <le_advertising_report+0x1a6>
	if (dup_count >= 0) {
    c138:	4f6e      	ldr	r7, [pc, #440]	; (c2f4 <le_advertising_report+0x238>)
    c13a:	683b      	ldr	r3, [r7, #0]
    c13c:	2b00      	cmp	r3, #0
    c13e:	db50      	blt.n	c1e2 <le_advertising_report+0x126>
    c140:	f8df 91bc 	ldr.w	r9, [pc, #444]	; c300 <le_advertising_report+0x244>
    c144:	2600      	movs	r6, #0
    c146:	1ca3      	adds	r3, r4, #2
		for (i = 0; i < dup_count; i++) {
    c148:	683a      	ldr	r2, [r7, #0]
    c14a:	4296      	cmp	r6, r2
    c14c:	db2a      	blt.n	c1a4 <le_advertising_report+0xe8>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    c14e:	4e6a      	ldr	r6, [pc, #424]	; (c2f8 <le_advertising_report+0x23c>)
    c150:	f8df 91a8 	ldr.w	r9, [pc, #424]	; c2fc <le_advertising_report+0x240>
    c154:	6830      	ldr	r0, [r6, #0]
    c156:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    c15a:	4619      	mov	r1, r3
    c15c:	2206      	movs	r2, #6
    c15e:	3002      	adds	r0, #2
    c160:	f7f4 fb2c 	bl	7bc <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    c164:	6832      	ldr	r2, [r6, #0]
    c166:	7823      	ldrb	r3, [r4, #0]
    c168:	eb09 01c2 	add.w	r1, r9, r2, lsl #3
    c16c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    c170:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    c172:	7823      	ldrb	r3, [r4, #0]
    c174:	f003 010f 	and.w	r1, r3, #15
    c178:	2301      	movs	r3, #1
    c17a:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    c17c:	6839      	ldr	r1, [r7, #0]
		dup_filter[dup_curr].mask = BIT(adv->type);
    c17e:	f809 3032 	strb.w	r3, [r9, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    c182:	290f      	cmp	r1, #15
			dup_count++;
    c184:	bfd5      	itete	le
    c186:	3101      	addle	r1, #1
			dup_curr++;
    c188:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    c18a:	6031      	strle	r1, [r6, #0]
			dup_curr++;
    c18c:	6032      	strgt	r2, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    c18e:	6832      	ldr	r2, [r6, #0]
			dup_count++;
    c190:	bfd8      	it	le
    c192:	6039      	strle	r1, [r7, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    c194:	2a10      	cmp	r2, #16
    c196:	d124      	bne.n	c1e2 <le_advertising_report+0x126>
			dup_curr = 0;
    c198:	2200      	movs	r2, #0
    c19a:	6032      	str	r2, [r6, #0]
    c19c:	e021      	b.n	c1e2 <le_advertising_report+0x126>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    c19e:	f002 020b 	and.w	r2, r2, #11
    c1a2:	e7c5      	b.n	c130 <le_advertising_report+0x74>
			if (!memcmp(&adv->adv_ind.addr[0],
    c1a4:	4618      	mov	r0, r3
    c1a6:	2206      	movs	r2, #6
    c1a8:	4649      	mov	r1, r9
    c1aa:	9301      	str	r3, [sp, #4]
    c1ac:	f7f4 fad9 	bl	762 <memcmp>
    c1b0:	9b01      	ldr	r3, [sp, #4]
    c1b2:	b9f0      	cbnz	r0, c1f2 <le_advertising_report+0x136>
			    adv->tx_addr == dup_filter[i].addr.type) {
    c1b4:	7821      	ldrb	r1, [r4, #0]
    c1b6:	f819 0c01 	ldrb.w	r0, [r9, #-1]
    c1ba:	460a      	mov	r2, r1
    c1bc:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
    c1c0:	4281      	cmp	r1, r0
    c1c2:	d116      	bne.n	c1f2 <le_advertising_report+0x136>
				if (dup_filter[i].mask & BIT(adv->type)) {
    c1c4:	484d      	ldr	r0, [pc, #308]	; (c2fc <le_advertising_report+0x240>)
    c1c6:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
    c1ca:	f002 020f 	and.w	r2, r2, #15
    c1ce:	fa23 f102 	lsr.w	r1, r3, r2
    c1d2:	07c9      	lsls	r1, r1, #31
    c1d4:	d445      	bmi.n	c262 <le_advertising_report+0x1a6>
				dup_filter[i].mask |= BIT(adv->type);
    c1d6:	2101      	movs	r1, #1
    c1d8:	fa01 f202 	lsl.w	r2, r1, r2
    c1dc:	4313      	orrs	r3, r2
    c1de:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	if (dup_found(adv)) {
		return;
	}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    c1e2:	7823      	ldrb	r3, [r4, #0]
    c1e4:	7862      	ldrb	r2, [r4, #1]
    c1e6:	f003 030f 	and.w	r3, r3, #15
    c1ea:	2b01      	cmp	r3, #1
    c1ec:	d105      	bne.n	c1fa <le_advertising_report+0x13e>
		data_len = (adv->len - BDADDR_SIZE);
	} else {
		data_len = 0;
    c1ee:	2600      	movs	r6, #0
    c1f0:	e005      	b.n	c1fe <le_advertising_report+0x142>
		for (i = 0; i < dup_count; i++) {
    c1f2:	3601      	adds	r6, #1
    c1f4:	f109 0908 	add.w	r9, r9, #8
    c1f8:	e7a6      	b.n	c148 <le_advertising_report+0x8c>
		data_len = (adv->len - BDADDR_SIZE);
    c1fa:	1f96      	subs	r6, r2, #6
    c1fc:	b2f6      	uxtb	r6, r6
	}

	/* The Link Layer currently returns RSSI as an absolute value */
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    c1fe:	4442      	add	r2, r8
    c200:	f104 0908 	add.w	r9, r4, #8
    c204:	7a97      	ldrb	r7, [r2, #10]
    c206:	427f      	negs	r7, r7
    c208:	b27f      	sxtb	r7, r7
		  offsetof(struct pdu_adv, payload) + adv->len];

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	if (direct) {
    c20a:	f1ba 0f00 	cmp.w	sl, #0
    c20e:	d035      	beq.n	c27c <le_advertising_report+0x1c0>
		struct bt_hci_evt_le_direct_adv_report *drp;
		struct bt_hci_evt_le_direct_adv_info *dir_info;

		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    c210:	2b01      	cmp	r3, #1
    c212:	d005      	beq.n	c220 <le_advertising_report+0x164>
    c214:	4040      	eors	r0, r0
    c216:	f380 8811 	msr	BASEPRI, r0
    c21a:	f04f 0004 	mov.w	r0, #4
    c21e:	df02      	svc	2
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    c220:	2211      	movs	r2, #17
    c222:	210b      	movs	r1, #11
    c224:	4658      	mov	r0, fp
    c226:	9301      	str	r3, [sp, #4]
    c228:	f7ff ff10 	bl	c04c <meta_evt>
			       sizeof(*drp) + sizeof(*dir_info));

		drp->num_reports = 1;
    c22c:	9b01      	ldr	r3, [sp, #4]
    c22e:	7003      	strb	r3, [r0, #0]
		dir_info = (void *)(((u8_t *)drp) + sizeof(*drp));

		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    c230:	7043      	strb	r3, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    c232:	4606      	mov	r6, r0

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (rl_idx < ll_rl_size_get()) {
    c234:	f00a fd2a 	bl	16c8c <ll_rl_size_get>
    c238:	4285      	cmp	r5, r0
    c23a:	f106 0003 	add.w	r0, r6, #3
    c23e:	d213      	bcs.n	c268 <le_advertising_report+0x1ac>
			/* Store identity address */
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    c240:	4602      	mov	r2, r0
    c242:	1cb1      	adds	r1, r6, #2
    c244:	4628      	mov	r0, r5
    c246:	f00a fb4b 	bl	168e0 <ll_rl_id_addr_get>
					  &dir_info->addr.a.val[0]);
			/* Mark it as identity address from RPA (0x02, 0x03) */
			dir_info->addr.type += 2;
    c24a:	78b3      	ldrb	r3, [r6, #2]
    c24c:	3302      	adds	r3, #2
    c24e:	70b3      	strb	r3, [r6, #2]
			memcpy(&dir_info->addr.a.val[0],
			       &adv->direct_ind.adv_addr[0],
			       sizeof(bt_addr_t));
		}

		dir_info->dir_addr.type = 0x1;
    c250:	2301      	movs	r3, #1
    c252:	7273      	strb	r3, [r6, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    c254:	2206      	movs	r2, #6
    c256:	4649      	mov	r1, r9
    c258:	f106 000a 	add.w	r0, r6, #10
    c25c:	f7f4 faae 	bl	7bc <memcpy>
		       &adv->direct_ind.tgt_addr[0], sizeof(bt_addr_t));

		dir_info->rssi = rssi;
    c260:	7437      	strb	r7, [r6, #16]
	adv_info->length = data_len;
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
	/* RSSI */
	prssi = &adv_info->data[0] + data_len;
	*prssi = rssi;
}
    c262:	b005      	add	sp, #20
    c264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
    c268:	4621      	mov	r1, r4
			memcpy(&dir_info->addr.a.val[0],
    c26a:	2206      	movs	r2, #6
			dir_info->addr.type = adv->tx_addr;
    c26c:	f811 3b02 	ldrb.w	r3, [r1], #2
    c270:	f3c3 1380 	ubfx	r3, r3, #6, #1
    c274:	70b3      	strb	r3, [r6, #2]
			memcpy(&dir_info->addr.a.val[0],
    c276:	f7f4 faa1 	bl	7bc <memcpy>
    c27a:	e7e9      	b.n	c250 <le_advertising_report+0x194>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    c27c:	f106 020b 	add.w	r2, r6, #11
    c280:	b2d2      	uxtb	r2, r2
    c282:	2102      	movs	r1, #2
    c284:	4658      	mov	r0, fp
    c286:	f7ff fee1 	bl	c04c <meta_evt>
	sep->num_reports = 1;
    c28a:	2301      	movs	r3, #1
    c28c:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    c28e:	7823      	ldrb	r3, [r4, #0]
    c290:	aa04      	add	r2, sp, #16
    c292:	f003 030f 	and.w	r3, r3, #15
    c296:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    c298:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    c29a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    c29e:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    c2a0:	7863      	ldrb	r3, [r4, #1]
    c2a2:	4498      	add	r8, r3
    c2a4:	f898 800b 	ldrb.w	r8, [r8, #11]
	if (rl_idx < ll_rl_size_get()) {
    c2a8:	f00a fcf0 	bl	16c8c <ll_rl_size_get>
    c2ac:	4580      	cmp	r8, r0
    c2ae:	f105 0003 	add.w	r0, r5, #3
    c2b2:	d210      	bcs.n	c2d6 <le_advertising_report+0x21a>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    c2b4:	4602      	mov	r2, r0
    c2b6:	1ca9      	adds	r1, r5, #2
    c2b8:	4640      	mov	r0, r8
    c2ba:	f00a fb11 	bl	168e0 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    c2be:	78ab      	ldrb	r3, [r5, #2]
    c2c0:	3302      	adds	r3, #2
    c2c2:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    c2c4:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    c2c6:	350a      	adds	r5, #10
    c2c8:	4632      	mov	r2, r6
    c2ca:	4649      	mov	r1, r9
    c2cc:	4628      	mov	r0, r5
    c2ce:	f7f4 fa75 	bl	7bc <memcpy>
	*prssi = rssi;
    c2d2:	55af      	strb	r7, [r5, r6]
    c2d4:	e7c5      	b.n	c262 <le_advertising_report+0x1a6>
		adv_info->addr.type = adv->tx_addr;
    c2d6:	4621      	mov	r1, r4
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    c2d8:	2206      	movs	r2, #6
		adv_info->addr.type = adv->tx_addr;
    c2da:	f811 3b02 	ldrb.w	r3, [r1], #2
    c2de:	f3c3 1380 	ubfx	r3, r3, #6, #1
    c2e2:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    c2e4:	f7f4 fa6a 	bl	7bc <memcpy>
    c2e8:	e7ec      	b.n	c2c4 <le_advertising_report+0x208>
    c2ea:	bf00      	nop
    c2ec:	2000e100 	.word	0x2000e100
    c2f0:	2000e108 	.word	0x2000e108
    c2f4:	20000b74 	.word	0x20000b74
    c2f8:	20000b78 	.word	0x20000b78
    c2fc:	20000b7c 	.word	0x20000b7c
    c300:	20000b7e 	.word	0x20000b7e

0000c304 <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    c304:	4b0e      	ldr	r3, [pc, #56]	; (c340 <encrypt_change+0x3c>)
{
    c306:	b570      	push	{r4, r5, r6, lr}
    c308:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    c30a:	e9d3 2300 	ldrd	r2, r3, [r3]
    c30e:	2300      	movs	r3, #0
    c310:	f002 0280 	and.w	r2, r2, #128	; 0x80
    c314:	4313      	orrs	r3, r2
{
    c316:	4604      	mov	r4, r0
    c318:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    c31a:	d010      	beq.n	c33e <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    c31c:	2204      	movs	r2, #4
    c31e:	2108      	movs	r1, #8
    c320:	4628      	mov	r0, r5
    c322:	f7ff fe6e 	bl	c002 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    c326:	2104      	movs	r1, #4
    c328:	f105 0008 	add.w	r0, r5, #8
    c32c:	f00b fe12 	bl	17f54 <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    c330:	fab4 f384 	clz	r3, r4
    c334:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    c336:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    c338:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    c33c:	70c3      	strb	r3, [r0, #3]
    c33e:	bd70      	pop	{r4, r5, r6, pc}
    c340:	2000e100 	.word	0x2000e100

0000c344 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    c344:	b570      	push	{r4, r5, r6, lr}
    c346:	4604      	mov	r4, r0
    c348:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c34a:	4b13      	ldr	r3, [pc, #76]	; (c398 <le_remote_feat_complete+0x54>)
{
    c34c:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c34e:	e9d3 2300 	ldrd	r2, r3, [r3]
    c352:	2200      	movs	r2, #0
    c354:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    c358:	4313      	orrs	r3, r2
{
    c35a:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c35c:	d01b      	beq.n	c396 <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    c35e:	4b0f      	ldr	r3, [pc, #60]	; (c39c <le_remote_feat_complete+0x58>)
    c360:	e9d3 2300 	ldrd	r2, r3, [r3]
    c364:	2300      	movs	r3, #0
    c366:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c36a:	4313      	orrs	r3, r2
    c36c:	d013      	beq.n	c396 <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    c36e:	220b      	movs	r2, #11
    c370:	2104      	movs	r1, #4
    c372:	f7ff fe6b 	bl	c04c <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    c376:	2208      	movs	r2, #8
	sep->status = status;
    c378:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    c37a:	f8a0 6001 	strh.w	r6, [r0, #1]
    c37e:	3003      	adds	r0, #3
	if (!status) {
    c380:	b924      	cbnz	r4, c38c <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    c382:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    c384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    c388:	f7f4 ba18 	b.w	7bc <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    c38c:	2100      	movs	r1, #0
}
    c38e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    c392:	f7f4 ba3f 	b.w	814 <memset>
    c396:	bd70      	pop	{r4, r5, r6, pc}
    c398:	2000e100 	.word	0x2000e100
    c39c:	2000e108 	.word	0x2000e108

0000c3a0 <le_conn_complete.part.48>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    c3a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c3a4:	4605      	mov	r5, r0
    c3a6:	4618      	mov	r0, r3
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    c3a8:	4b46      	ldr	r3, [pc, #280]	; (c4c4 <le_conn_complete.part.48+0x124>)
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    c3aa:	4616      	mov	r6, r2
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    c3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    c3b0:	f240 2801 	movw	r8, #513	; 0x201
    c3b4:	f04f 0900 	mov.w	r9, #0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    c3b8:	f402 7a00 	and.w	sl, r2, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    c3bc:	ea03 0309 	and.w	r3, r3, r9
    c3c0:	ea02 0208 	and.w	r2, r2, r8
    c3c4:	4313      	orrs	r3, r2
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    c3c6:	460c      	mov	r4, r1
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    c3c8:	f04f 0b00 	mov.w	fp, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    c3cc:	d077      	beq.n	c4be <le_conn_complete.part.48+0x11e>
	if (!status) {
    c3ce:	2d00      	cmp	r5, #0
    c3d0:	d150      	bne.n	c474 <le_conn_complete.part.48+0xd4>
		conn_count++;
    c3d2:	4a3d      	ldr	r2, [pc, #244]	; (c4c8 <le_conn_complete.part.48+0x128>)
    c3d4:	6813      	ldr	r3, [r2, #0]
    c3d6:	3301      	adds	r3, #1
    c3d8:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    c3da:	ea5a 030b 	orrs.w	r3, sl, fp
    c3de:	f101 0803 	add.w	r8, r1, #3
    c3e2:	d151      	bne.n	c488 <le_conn_complete.part.48+0xe8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    c3e4:	2212      	movs	r2, #18
    c3e6:	2101      	movs	r1, #1
    c3e8:	f7ff fe30 	bl	c04c <meta_evt>
	lecc->status = 0x00;
    c3ec:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    c3ee:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
    c3f2:	7863      	ldrb	r3, [r4, #1]
    c3f4:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    c3f6:	78a3      	ldrb	r3, [r4, #2]
    c3f8:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    c3fa:	4607      	mov	r7, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    c3fc:	2206      	movs	r2, #6
    c3fe:	4641      	mov	r1, r8
    c400:	3005      	adds	r0, #5
    c402:	f7f4 f9db 	bl	7bc <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    c406:	8ae3      	ldrh	r3, [r4, #22]
    c408:	f8a7 300b 	strh.w	r3, [r7, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    c40c:	8b23      	ldrh	r3, [r4, #24]
    c40e:	f8a7 300d 	strh.w	r3, [r7, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    c412:	8b63      	ldrh	r3, [r4, #26]
    c414:	f8a7 300f 	strh.w	r3, [r7, #15]
	lecc->clock_accuracy = radio_cc->mca;
    c418:	7f23      	ldrb	r3, [r4, #28]
    c41a:	747b      	strb	r3, [r7, #17]
    c41c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    c420:	221e      	movs	r2, #30
    c422:	210a      	movs	r1, #10
    c424:	f7ff fe12 	bl	c04c <meta_evt>
			memset(leecc, 0x00, sizeof(*leecc));
    c428:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    c42a:	4604      	mov	r4, r0
		memset(lecc, 0x00, sizeof(*lecc));
    c42c:	2100      	movs	r1, #0
    c42e:	f7f4 f9f1 	bl	814 <memset>
		lecc->status = status;
    c432:	7025      	strb	r5, [r4, #0]
    c434:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((radio_cc->own_addr_type) &&
    c438:	7d63      	ldrb	r3, [r4, #21]
    c43a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c43e:	2b40      	cmp	r3, #64	; 0x40
    c440:	d138      	bne.n	c4b4 <le_conn_complete.part.48+0x114>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    c442:	2206      	movs	r2, #6
    c444:	f104 0110 	add.w	r1, r4, #16
    c448:	f7f4 f9b8 	bl	7bc <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    c44c:	2206      	movs	r2, #6
    c44e:	f104 0109 	add.w	r1, r4, #9
    c452:	f107 0011 	add.w	r0, r7, #17
    c456:	f7f4 f9b1 	bl	7bc <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    c45a:	8ae3      	ldrh	r3, [r4, #22]
    c45c:	f8a7 3017 	strh.w	r3, [r7, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    c460:	8b23      	ldrh	r3, [r4, #24]
    c462:	f8a7 3019 	strh.w	r3, [r7, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    c466:	8b63      	ldrh	r3, [r4, #26]
    c468:	f8a7 301b 	strh.w	r3, [r7, #27]
		leecc->clock_accuracy = radio_cc->mca;
    c46c:	7f23      	ldrb	r3, [r4, #28]
    c46e:	777b      	strb	r3, [r7, #29]
    c470:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    c474:	ea5a 030b 	orrs.w	r3, sl, fp
    c478:	d1d2      	bne.n	c420 <le_conn_complete.part.48+0x80>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    c47a:	2212      	movs	r2, #18
    c47c:	2101      	movs	r1, #1
    c47e:	f7ff fde5 	bl	c04c <meta_evt>
		memset(lecc, 0x00, sizeof(*lecc));
    c482:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    c484:	4604      	mov	r4, r0
    c486:	e7d1      	b.n	c42c <le_conn_complete.part.48+0x8c>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    c488:	221e      	movs	r2, #30
    c48a:	210a      	movs	r1, #10
    c48c:	f7ff fdde 	bl	c04c <meta_evt>
		leecc->status = 0x00;
    c490:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    c492:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
    c496:	7863      	ldrb	r3, [r4, #1]
    c498:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    c49a:	78a3      	ldrb	r3, [r4, #2]
    c49c:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    c49e:	4607      	mov	r7, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    c4a0:	2206      	movs	r2, #6
    c4a2:	4641      	mov	r1, r8
    c4a4:	3005      	adds	r0, #5
    c4a6:	f7f4 f989 	bl	7bc <memcpy>
		if ((radio_cc->own_addr_type) &&
    c4aa:	7be3      	ldrb	r3, [r4, #15]
    c4ac:	f107 000b 	add.w	r0, r7, #11
    c4b0:	2b00      	cmp	r3, #0
    c4b2:	d1c1      	bne.n	c438 <le_conn_complete.part.48+0x98>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    c4b4:	2206      	movs	r2, #6
    c4b6:	2100      	movs	r1, #0
    c4b8:	f7f4 f9ac 	bl	814 <memset>
    c4bc:	e7c6      	b.n	c44c <le_conn_complete.part.48+0xac>
    c4be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c4c2:	bf00      	nop
    c4c4:	2000e108 	.word	0x2000e108
    c4c8:	20000b70 	.word	0x20000b70

0000c4cc <bt_addr_le_to_str.constprop.79>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    c4cc:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    c4ce:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    c4d0:	b08a      	sub	sp, #40	; 0x28
    c4d2:	4604      	mov	r4, r0
    c4d4:	460e      	mov	r6, r1
    c4d6:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    c4d8:	2b03      	cmp	r3, #3
    c4da:	d820      	bhi.n	c51e <bt_addr_le_to_str.constprop.79+0x52>
    c4dc:	e8df f003 	tbb	[pc, r3]
    c4e0:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    c4e4:	4911      	ldr	r1, [pc, #68]	; (c52c <bt_addr_le_to_str.constprop.79+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    c4e6:	4628      	mov	r0, r5
    c4e8:	f7f4 f8d3 	bl	692 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    c4ec:	7862      	ldrb	r2, [r4, #1]
    c4ee:	9204      	str	r2, [sp, #16]
    c4f0:	78a2      	ldrb	r2, [r4, #2]
    c4f2:	9203      	str	r2, [sp, #12]
    c4f4:	78e2      	ldrb	r2, [r4, #3]
    c4f6:	9202      	str	r2, [sp, #8]
    c4f8:	7922      	ldrb	r2, [r4, #4]
    c4fa:	9201      	str	r2, [sp, #4]
    c4fc:	7962      	ldrb	r2, [r4, #5]
    c4fe:	9200      	str	r2, [sp, #0]
    c500:	79a3      	ldrb	r3, [r4, #6]
    c502:	9505      	str	r5, [sp, #20]
    c504:	4a0a      	ldr	r2, [pc, #40]	; (c530 <bt_addr_le_to_str.constprop.79+0x64>)
    c506:	211b      	movs	r1, #27
    c508:	4630      	mov	r0, r6
    c50a:	f7f5 f991 	bl	1830 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    c50e:	b00a      	add	sp, #40	; 0x28
    c510:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    c512:	4908      	ldr	r1, [pc, #32]	; (c534 <bt_addr_le_to_str.constprop.79+0x68>)
    c514:	e7e7      	b.n	c4e6 <bt_addr_le_to_str.constprop.79+0x1a>
		strcpy(type, "public id");
    c516:	4908      	ldr	r1, [pc, #32]	; (c538 <bt_addr_le_to_str.constprop.79+0x6c>)
    c518:	e7e5      	b.n	c4e6 <bt_addr_le_to_str.constprop.79+0x1a>
		strcpy(type, "random id");
    c51a:	4908      	ldr	r1, [pc, #32]	; (c53c <bt_addr_le_to_str.constprop.79+0x70>)
    c51c:	e7e3      	b.n	c4e6 <bt_addr_le_to_str.constprop.79+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    c51e:	4a08      	ldr	r2, [pc, #32]	; (c540 <bt_addr_le_to_str.constprop.79+0x74>)
    c520:	210a      	movs	r1, #10
    c522:	4628      	mov	r0, r5
    c524:	f7f5 f984 	bl	1830 <snprintk>
    c528:	e7e0      	b.n	c4ec <bt_addr_le_to_str.constprop.79+0x20>
    c52a:	bf00      	nop
    c52c:	00022821 	.word	0x00022821
    c530:	0002284a 	.word	0x0002284a
    c534:	00022828 	.word	0x00022828
    c538:	0002282f 	.word	0x0002282f
    c53c:	00022839 	.word	0x00022839
    c540:	00022843 	.word	0x00022843

0000c544 <le_adv_ext_report.isra.77>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    c544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    c548:	7803      	ldrb	r3, [r0, #0]
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    c54a:	4615      	mov	r5, r2
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    c54c:	f003 020f 	and.w	r2, r3, #15
    c550:	2a07      	cmp	r2, #7
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    c552:	b08d      	sub	sp, #52	; 0x34
    c554:	4606      	mov	r6, r0
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    c556:	f040 808e 	bne.w	c676 <le_adv_ext_report.isra.77+0x132>
		  offsetof(struct pdu_adv, payload) + adv->len];
    c55a:	7842      	ldrb	r2, [r0, #1]
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    c55c:	2a00      	cmp	r2, #0
    c55e:	f000 808a 	beq.w	c676 <le_adv_ext_report.isra.77+0x132>
		if (!p->ext_hdr_len) {
    c562:	7880      	ldrb	r0, [r0, #2]
    c564:	0680      	lsls	r0, r0, #26
    c566:	d076      	beq.n	c656 <le_adv_ext_report.isra.77+0x112>
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    c568:	4411      	add	r1, r2
		ptr = (u8_t *)h + sizeof(*h);
    c56a:	1d34      	adds	r4, r6, #4
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    c56c:	7a8a      	ldrb	r2, [r1, #10]
    c56e:	9200      	str	r2, [sp, #0]
		if (h->adv_addr) {
    c570:	78f2      	ldrb	r2, [r6, #3]
    c572:	07d7      	lsls	r7, r2, #31
    c574:	d510      	bpl.n	c598 <le_adv_ext_report.isra.77+0x54>
			addr.type = adv->tx_addr;
    c576:	af0c      	add	r7, sp, #48	; 0x30
    c578:	f3c3 1380 	ubfx	r3, r3, #6, #1
    c57c:	f807 3d24 	strb.w	r3, [r7, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    c580:	4621      	mov	r1, r4
    c582:	2206      	movs	r2, #6
    c584:	f10d 000d 	add.w	r0, sp, #13
    c588:	f7f4 f918 	bl	7bc <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    c58c:	a905      	add	r1, sp, #20
    c58e:	4638      	mov	r0, r7
			ptr += BDADDR_SIZE;
    c590:	f106 040a 	add.w	r4, r6, #10
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    c594:	f7ff ff9a 	bl	c4cc <bt_addr_le_to_str.constprop.79>
		if(h->tgt_addr){
    c598:	78f2      	ldrb	r2, [r6, #3]
    c59a:	0790      	lsls	r0, r2, #30
			ptr += BDADDR_SIZE;
    c59c:	bf48      	it	mi
    c59e:	3406      	addmi	r4, #6
		if(h->adi){
    c5a0:	f012 0908 	ands.w	r9, r2, #8
    c5a4:	d05e      	beq.n	c664 <le_adv_ext_report.isra.77+0x120>
			sid_for_info = adi_ptr->sid;
    c5a6:	7867      	ldrb	r7, [r4, #1]
    c5a8:	ea4f 1a17 	mov.w	sl, r7, lsr #4
			if(adi_ptr->sid == 0x04){
    c5ac:	f007 07f0 	and.w	r7, r7, #240	; 0xf0
    c5b0:	2f40      	cmp	r7, #64	; 0x40
    c5b2:	d053      	beq.n	c65c <le_adv_ext_report.isra.77+0x118>
			}else if(adi_ptr->sid == 0x02){
    c5b4:	f1a7 0120 	sub.w	r1, r7, #32
    c5b8:	424f      	negs	r7, r1
    c5ba:	414f      	adcs	r7, r1
	bool aux_adi_present = false;
    c5bc:	f04f 0900 	mov.w	r9, #0
			ptr += sizeof(*adi_ptr);
    c5c0:	46a3      	mov	fp, r4
    c5c2:	3402      	adds	r4, #2
		if(h->aux_ptr){
    c5c4:	f012 0310 	ands.w	r3, r2, #16
			aux_ptr_present = true;
    c5c8:	bf1c      	itt	ne
    c5ca:	2301      	movne	r3, #1
			ptr += sizeof(*ap);
    c5cc:	3403      	addne	r4, #3
		if (h->tx_pwr) {
    c5ce:	0652      	lsls	r2, r2, #25
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    c5d0:	78b2      	ldrb	r2, [r6, #2]
    c5d2:	9301      	str	r3, [sp, #4]
    c5d4:	f3c2 0105 	ubfx	r1, r2, #0, #6
    c5d8:	7872      	ldrb	r2, [r6, #1]
    c5da:	eba2 0201 	sub.w	r2, r2, r1
    c5de:	b2d2      	uxtb	r2, r2
    c5e0:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    c5e4:	f102 0218 	add.w	r2, r2, #24
    c5e8:	b2d2      	uxtb	r2, r2
    c5ea:	4628      	mov	r0, r5
    c5ec:	f04f 010d 	mov.w	r1, #13
			ptr++;
    c5f0:	bf48      	it	mi
    c5f2:	3401      	addmi	r4, #1
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    c5f4:	f7ff fd2a 	bl	c04c <meta_evt>
		sep->num_reports = 1;
    c5f8:	2201      	movs	r2, #1
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    c5fa:	fa5f f888 	uxtb.w	r8, r8
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    c5fe:	4605      	mov	r5, r0
		sep->num_reports = 1;
    c600:	7002      	strb	r2, [r0, #0]
		if( aux_adi_present && aux_ptr_present){ //aux packet
    c602:	9b01      	ldr	r3, [sp, #4]
    c604:	f1b9 0f00 	cmp.w	r9, #0
    c608:	d03f      	beq.n	c68a <le_adv_ext_report.isra.77+0x146>
    c60a:	b3cb      	cbz	r3, c680 <le_adv_ext_report.isra.77+0x13c>
			adv_info->frag = 0x01;	//First fragment - more packets to come;
    c60c:	7082      	strb	r2, [r0, #2]
		if(h->adv_addr){
    c60e:	78f3      	ldrb	r3, [r6, #3]
    c610:	07db      	lsls	r3, r3, #31
    c612:	d508      	bpl.n	c626 <le_adv_ext_report.isra.77+0xe2>
			adv_info->addr.type = addr.type;
    c614:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c618:	70eb      	strb	r3, [r5, #3]
			memcpy(&adv_info->addr.a.val[0], &addr.a.val[0],
    c61a:	2206      	movs	r2, #6
    c61c:	f10d 010d 	add.w	r1, sp, #13
    c620:	1d28      	adds	r0, r5, #4
    c622:	f7f4 f8cb 	bl	7bc <memcpy>
		adv_info->evt_type = 0x07;
    c626:	2307      	movs	r3, #7
    c628:	706b      	strb	r3, [r5, #1]
		adv_info->sid = sid_for_info;
    c62a:	f885 a00c 	strb.w	sl, [r5, #12]
		if(adi_ptr->sid == 0x04){
    c62e:	f89b 3001 	ldrb.w	r3, [fp, #1]
			adv_info->length = data_len;
    c632:	f885 8018 	strb.w	r8, [r5, #24]
		if(adi_ptr->sid == 0x04){
    c636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    c63a:	f105 0619 	add.w	r6, r5, #25
    c63e:	2b40      	cmp	r3, #64	; 0x40
			memcpy(&adv_info->data[0], ptr, data_len);
    c640:	4642      	mov	r2, r8
    c642:	4621      	mov	r1, r4
    c644:	4630      	mov	r0, r6
		if(adi_ptr->sid == 0x04){
    c646:	d10f      	bne.n	c668 <le_adv_ext_report.isra.77+0x124>
			memcpy(&adv_info->data[0], ptr, data_len);
    c648:	f7f4 f8b8 	bl	7bc <memcpy>
			memcpy(copy_data, ptr, data_len);
    c64c:	4642      	mov	r2, r8
    c64e:	4621      	mov	r1, r4
    c650:	4811      	ldr	r0, [pc, #68]	; (c698 <le_adv_ext_report.isra.77+0x154>)
    c652:	f7f4 f8b3 	bl	7bc <memcpy>
}
    c656:	b00d      	add	sp, #52	; 0x34
    c658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				aux_adi_present = true;				// chain pdu's
    c65c:	f04f 0901 	mov.w	r9, #1
	bool adi_present = false;		// to identify aux packet and fragment it
    c660:	2700      	movs	r7, #0
    c662:	e7ad      	b.n	c5c0 <le_adv_ext_report.isra.77+0x7c>
    c664:	464f      	mov	r7, r9
    c666:	e7ad      	b.n	c5c4 <le_adv_ext_report.isra.77+0x80>
			memcpy(&adv_info->data[0], ptr, data_len);
    c668:	f7f4 f8a8 	bl	7bc <memcpy>
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    c66c:	9b00      	ldr	r3, [sp, #0]
    c66e:	425b      	negs	r3, r3
			*prssi = rssi;
    c670:	f806 3008 	strb.w	r3, [r6, r8]
    c674:	e7ef      	b.n	c656 <le_adv_ext_report.isra.77+0x112>
		le_advertising_report(pdu_data, b, buf);
    c676:	462a      	mov	r2, r5
    c678:	4630      	mov	r0, r6
    c67a:	f7ff fd1f 	bl	c0bc <le_advertising_report>
    c67e:	e7ea      	b.n	c656 <le_adv_ext_report.isra.77+0x112>
		}else if(!adi_present && aux_adi_present && !aux_ptr_present){		//aux packet
    c680:	2f00      	cmp	r7, #0
    c682:	d1c4      	bne.n	c60e <le_adv_ext_report.isra.77+0xca>
			adv_info->frag = 0x02; //last paacket of the data or complete packet
    c684:	2302      	movs	r3, #2
			adv_info->frag = 0x03;  // packet received on primary adv channel.
    c686:	70ab      	strb	r3, [r5, #2]
    c688:	e7c1      	b.n	c60e <le_adv_ext_report.isra.77+0xca>
		}else if(!adi_present && aux_adi_present && !aux_ptr_present){		//aux packet
    c68a:	2f00      	cmp	r7, #0
    c68c:	d0bf      	beq.n	c60e <le_adv_ext_report.isra.77+0xca>
		}else if(adi_present && aux_ptr_present){
    c68e:	2b00      	cmp	r3, #0
    c690:	d0bd      	beq.n	c60e <le_adv_ext_report.isra.77+0xca>
			adv_info->frag = 0x03;  // packet received on primary adv channel.
    c692:	2303      	movs	r3, #3
    c694:	e7f7      	b.n	c686 <le_adv_ext_report.isra.77+0x142>
    c696:	bf00      	nop
    c698:	2000428c 	.word	0x2000428c

0000c69c <sys_get_le64>:
{
    c69c:	4603      	mov	r3, r0
}
    c69e:	6800      	ldr	r0, [r0, #0]
    c6a0:	6859      	ldr	r1, [r3, #4]
    c6a2:	4770      	bx	lr

0000c6a4 <hci_cmd_handle>:
{
    c6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    c6a6:	8981      	ldrh	r1, [r0, #12]
{
    c6a8:	b097      	sub	sp, #92	; 0x5c
	struct net_buf *evt = NULL;
    c6aa:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    c6ac:	2902      	cmp	r1, #2
{
    c6ae:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    c6b0:	950b      	str	r5, [sp, #44]	; 0x2c
	if (cmd->len < sizeof(*chdr)) {
    c6b2:	d802      	bhi.n	c6ba <hci_cmd_handle+0x16>
		return NULL;
    c6b4:	2000      	movs	r0, #0
}
    c6b6:	b017      	add	sp, #92	; 0x5c
    c6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    c6ba:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    c6bc:	4ebe      	ldr	r6, [pc, #760]	; (c9b8 <hci_cmd_handle+0x314>)
    c6be:	781a      	ldrb	r2, [r3, #0]
    c6c0:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    c6c2:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    c6c4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    c6c8:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    c6ca:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    c6cc:	d8f2      	bhi.n	c6b4 <hci_cmd_handle+0x10>
	net_buf_pull(cmd, sizeof(*chdr));
    c6ce:	2103      	movs	r1, #3
    c6d0:	f104 0008 	add.w	r0, r4, #8
    c6d4:	f00b fc8e 	bl	17ff4 <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    c6d8:	8833      	ldrh	r3, [r6, #0]
    c6da:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    c6de:	0a9b      	lsrs	r3, r3, #10
    c6e0:	2b04      	cmp	r3, #4
    c6e2:	f000 80bd 	beq.w	c860 <hci_cmd_handle+0x1bc>
    c6e6:	d809      	bhi.n	c6fc <hci_cmd_handle+0x58>
    c6e8:	2b01      	cmp	r3, #1
    c6ea:	d027      	beq.n	c73c <hci_cmd_handle+0x98>
    c6ec:	2b03      	cmp	r3, #3
    c6ee:	d03c      	beq.n	c76a <hci_cmd_handle+0xc6>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    c6f0:	2101      	movs	r1, #1
    c6f2:	a80b      	add	r0, sp, #44	; 0x2c
    c6f4:	f7ff fcc0 	bl	c078 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    c6f8:	2301      	movs	r3, #1
    c6fa:	e2d5      	b.n	cca8 <hci_cmd_handle+0x604>
	switch (BT_OGF(_opcode)) {
    c6fc:	2b08      	cmp	r3, #8
    c6fe:	f000 8165 	beq.w	c9cc <hci_cmd_handle+0x328>
    c702:	2b3f      	cmp	r3, #63	; 0x3f
    c704:	d1f4      	bne.n	c6f0 <hci_cmd_handle+0x4c>
	switch (ocf) {
    c706:	3a01      	subs	r2, #1
    c708:	2a09      	cmp	r2, #9
    c70a:	d8f1      	bhi.n	c6f0 <hci_cmd_handle+0x4c>
    c70c:	a301      	add	r3, pc, #4	; (adr r3, c714 <hci_cmd_handle+0x70>)
    c70e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    c712:	bf00      	nop
    c714:	0000d015 	.word	0x0000d015
    c718:	0000d045 	.word	0x0000d045
    c71c:	0000d06f 	.word	0x0000d06f
    c720:	0000c6f1 	.word	0x0000c6f1
    c724:	0000c6f1 	.word	0x0000c6f1
    c728:	0000d0b5 	.word	0x0000d0b5
    c72c:	0000c6f1 	.word	0x0000c6f1
    c730:	0000d087 	.word	0x0000d087
    c734:	0000d0c1 	.word	0x0000d0c1
    c738:	0000d12f 	.word	0x0000d12f
	switch (ocf) {
    c73c:	2a06      	cmp	r2, #6
    c73e:	d006      	beq.n	c74e <hci_cmd_handle+0xaa>
    c740:	2a1d      	cmp	r2, #29
    c742:	d1d5      	bne.n	c6f0 <hci_cmd_handle+0x4c>
	handle = sys_le16_to_cpu(cmd->handle);
    c744:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    c746:	8818      	ldrh	r0, [r3, #0]
    c748:	f007 feec 	bl	14524 <ll_version_ind_send>
    c74c:	e004      	b.n	c758 <hci_cmd_handle+0xb4>
    c74e:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    c750:	7899      	ldrb	r1, [r3, #2]
    c752:	8818      	ldrh	r0, [r3, #0]
    c754:	f007 fefa 	bl	1454c <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    c758:	2800      	cmp	r0, #0
    c75a:	bf14      	ite	ne
    c75c:	200c      	movne	r0, #12
    c75e:	2000      	moveq	r0, #0
    c760:	f7ff fc5a 	bl	c018 <cmd_status>
    c764:	900b      	str	r0, [sp, #44]	; 0x2c
	return evt;
    c766:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c768:	e7a5      	b.n	c6b6 <hci_cmd_handle+0x12>
	switch (ocf) {
    c76a:	2a2d      	cmp	r2, #45	; 0x2d
    c76c:	d03a      	beq.n	c7e4 <hci_cmd_handle+0x140>
    c76e:	d820      	bhi.n	c7b2 <hci_cmd_handle+0x10e>
    c770:	2a01      	cmp	r2, #1
    c772:	d02b      	beq.n	c7cc <hci_cmd_handle+0x128>
    c774:	2a03      	cmp	r2, #3
    c776:	d1bb      	bne.n	c6f0 <hci_cmd_handle+0x4c>
	dup_count = -1;
    c778:	4b90      	ldr	r3, [pc, #576]	; (c9bc <hci_cmd_handle+0x318>)
    c77a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c77e:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    c780:	4b8f      	ldr	r3, [pc, #572]	; (c9c0 <hci_cmd_handle+0x31c>)
    c782:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c786:	f641 71ff 	movw	r1, #8191	; 0x1fff
    c78a:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    c78e:	4b8d      	ldr	r3, [pc, #564]	; (c9c4 <hci_cmd_handle+0x320>)
    c790:	2000      	movs	r0, #0
    c792:	2100      	movs	r1, #0
    c794:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    c798:	4b8b      	ldr	r3, [pc, #556]	; (c9c8 <hci_cmd_handle+0x324>)
    c79a:	201f      	movs	r0, #31
    c79c:	2100      	movs	r1, #0
    c79e:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    c7a2:	f007 fb4b 	bl	13e3c <ll_reset>
	ccst = cmd_complete(evt, sizeof(*ccst));
    c7a6:	2101      	movs	r1, #1
    c7a8:	a80b      	add	r0, sp, #44	; 0x2c
    c7aa:	f7ff fc65 	bl	c078 <cmd_complete>
	ccst->status = 0x00;
    c7ae:	2300      	movs	r3, #0
    c7b0:	e27a      	b.n	cca8 <hci_cmd_handle+0x604>
	switch (ocf) {
    c7b2:	2a7b      	cmp	r2, #123	; 0x7b
    c7b4:	d02c      	beq.n	c810 <hci_cmd_handle+0x16c>
    c7b6:	2a7c      	cmp	r2, #124	; 0x7c
    c7b8:	d041      	beq.n	c83e <hci_cmd_handle+0x19a>
    c7ba:	2a63      	cmp	r2, #99	; 0x63
    c7bc:	d198      	bne.n	c6f0 <hci_cmd_handle+0x4c>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    c7be:	68a0      	ldr	r0, [r4, #8]
    c7c0:	f7ff ff6c 	bl	c69c <sys_get_le64>
    c7c4:	4b7f      	ldr	r3, [pc, #508]	; (c9c4 <hci_cmd_handle+0x320>)
	le_event_mask = sys_get_le64(cmd->events);
    c7c6:	e9c3 0100 	strd	r0, r1, [r3]
    c7ca:	e7ec      	b.n	c7a6 <hci_cmd_handle+0x102>
	event_mask = sys_get_le64(cmd->events);
    c7cc:	68a0      	ldr	r0, [r4, #8]
    c7ce:	f7ff ff65 	bl	c69c <sys_get_le64>
    c7d2:	4b7b      	ldr	r3, [pc, #492]	; (c9c0 <hci_cmd_handle+0x31c>)
    c7d4:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    c7d8:	4611      	mov	r1, r2
    c7da:	a80b      	add	r0, sp, #44	; 0x2c
    c7dc:	f7ff fc4c 	bl	c078 <cmd_complete>
	ccst->status = 0x00;
    c7e0:	7005      	strb	r5, [r0, #0]
    c7e2:	e7c0      	b.n	c766 <hci_cmd_handle+0xc2>
    c7e4:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    c7e6:	2104      	movs	r1, #4
    c7e8:	a80b      	add	r0, sp, #44	; 0x2c
	handle = sys_le16_to_cpu(cmd->handle);
    c7ea:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    c7ec:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    c7ee:	f7ff fc43 	bl	c078 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    c7f2:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    c7f4:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    c7f6:	1cc2      	adds	r2, r0, #3
    c7f8:	4639      	mov	r1, r7
    c7fa:	4630      	mov	r0, r6
    c7fc:	f007 feba 	bl	14574 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    c800:	2800      	cmp	r0, #0
    c802:	bf14      	ite	ne
    c804:	2302      	movne	r3, #2
    c806:	2300      	moveq	r3, #0
    c808:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    c80a:	f8a4 5001 	strh.w	r5, [r4, #1]
    c80e:	e7aa      	b.n	c766 <hci_cmd_handle+0xc2>
	handle = sys_le16_to_cpu(cmd->handle);
    c810:	68a3      	ldr	r3, [r4, #8]
    c812:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    c814:	a90c      	add	r1, sp, #48	; 0x30
    c816:	b2a0      	uxth	r0, r4
    c818:	f007 feb6 	bl	14588 <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
    c81c:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    c81e:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    c820:	a80b      	add	r0, sp, #44	; 0x2c
    c822:	f7ff fc29 	bl	c078 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    c826:	2d00      	cmp	r5, #0
    c828:	bf14      	ite	ne
    c82a:	230c      	movne	r3, #12
    c82c:	2300      	moveq	r3, #0
    c82e:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    c830:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    c834:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    c838:	f8a0 3003 	strh.w	r3, [r0, #3]
    c83c:	e793      	b.n	c766 <hci_cmd_handle+0xc2>
    c83e:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    c840:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    c842:	8859      	ldrh	r1, [r3, #2]
    c844:	b2a0      	uxth	r0, r4
    c846:	f007 feb3 	bl	145b0 <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    c84a:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    c84c:	2103      	movs	r1, #3
    c84e:	a80b      	add	r0, sp, #44	; 0x2c
    c850:	f7ff fc12 	bl	c078 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    c854:	2d00      	cmp	r5, #0
    c856:	bf14      	ite	ne
    c858:	230c      	movne	r3, #12
    c85a:	2300      	moveq	r3, #0
    c85c:	7003      	strb	r3, [r0, #0]
    c85e:	e2db      	b.n	ce18 <hci_cmd_handle+0x774>
	switch (ocf) {
    c860:	3a01      	subs	r2, #1
    c862:	2a08      	cmp	r2, #8
    c864:	f63f af44 	bhi.w	c6f0 <hci_cmd_handle+0x4c>
    c868:	a301      	add	r3, pc, #4	; (adr r3, c870 <hci_cmd_handle+0x1cc>)
    c86a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    c86e:	bf00      	nop
    c870:	0000c895 	.word	0x0000c895
    c874:	0000c8bf 	.word	0x0000c8bf
    c878:	0000c985 	.word	0x0000c985
    c87c:	0000c6f1 	.word	0x0000c6f1
    c880:	0000c6f1 	.word	0x0000c6f1
    c884:	0000c6f1 	.word	0x0000c6f1
    c888:	0000c6f1 	.word	0x0000c6f1
    c88c:	0000c6f1 	.word	0x0000c6f1
    c890:	0000c9a1 	.word	0x0000c9a1
	rp = cmd_complete(evt, sizeof(*rp));
    c894:	2109      	movs	r1, #9
    c896:	a80b      	add	r0, sp, #44	; 0x2c
    c898:	f7ff fbee 	bl	c078 <cmd_complete>
	rp->status = 0x00;
    c89c:	2300      	movs	r3, #0
    c89e:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    c8a0:	7083      	strb	r3, [r0, #2]
    c8a2:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    c8a4:	f06f 030e 	mvn.w	r3, #14
    c8a8:	7143      	strb	r3, [r0, #5]
    c8aa:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    c8ac:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    c8ae:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    c8b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    c8b4:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    c8b6:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    c8b8:	71c3      	strb	r3, [r0, #7]
    c8ba:	7203      	strb	r3, [r0, #8]
    c8bc:	e753      	b.n	c766 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    c8be:	2141      	movs	r1, #65	; 0x41
    c8c0:	a80b      	add	r0, sp, #44	; 0x2c
    c8c2:	f7ff fbd9 	bl	c078 <cmd_complete>
	rp->status = 0x00;
    c8c6:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    c8c8:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    c8ca:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    c8cc:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    c8d0:	f7f3 ffa0 	bl	814 <memset>
	rp->commands[2] |= BIT(7);
    c8d4:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    c8d6:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[36] |= BIT(1);
    c8d8:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
	rp->commands[38] |= BIT(7);
    c8dc:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
	rp->commands[2] |= BIT(7);
    c8e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    c8e4:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    c8e6:	79a3      	ldrb	r3, [r4, #6]
    c8e8:	f063 033f 	orn	r3, r3, #63	; 0x3f
    c8ec:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    c8ee:	7ae3      	ldrb	r3, [r4, #11]
    c8f0:	f043 0304 	orr.w	r3, r3, #4
    c8f4:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    c8f6:	7be3      	ldrb	r3, [r4, #15]
    c8f8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    c8fc:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    c8fe:	7c23      	ldrb	r3, [r4, #16]
    c900:	f043 0302 	orr.w	r3, r3, #2
    c904:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    c906:	7de3      	ldrb	r3, [r4, #23]
    c908:	f043 0304 	orr.w	r3, r3, #4
    c90c:	75e3      	strb	r3, [r4, #23]
	rp->commands[28] |= BIT(3);
    c90e:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    c910:	f062 0208 	orn	r2, r2, #8
    c914:	76a2      	strb	r2, [r4, #26]
	rp->commands[28] |= BIT(1) | BIT(2);
    c916:	f043 030f 	orr.w	r3, r3, #15
	rp->commands[37] |= BIT(5);
    c91a:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
	rp->commands[28] |= BIT(1) | BIT(2);
    c91e:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    c920:	7863      	ldrb	r3, [r4, #1]
	rp->commands[37] |= BIT(6);
    c922:	f042 0260 	orr.w	r2, r2, #96	; 0x60
    c926:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
	rp->commands[0] |= BIT(5);
    c92a:	f043 0320 	orr.w	r3, r3, #32
	rp->commands[26] |= BIT(4) | BIT(5);
    c92e:	22ff      	movs	r2, #255	; 0xff
    c930:	76e2      	strb	r2, [r4, #27]
	rp->commands[0] |= BIT(5);
    c932:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    c934:	7722      	strb	r2, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    c936:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[32] |= BIT(4) | BIT(5);
    c93a:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[33] |= BIT(6) | BIT(7);
    c93e:	f063 030f 	orn	r3, r3, #15
	rp->commands[32] |= BIT(4) | BIT(5);
    c942:	f042 0230 	orr.w	r2, r2, #48	; 0x30
    c946:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[33] |= BIT(6) | BIT(7);
    c94a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    c94e:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(3);
    c952:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[38] |= BIT(7);
    c956:	f060 007f 	orn	r0, r0, #127	; 0x7f
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    c95a:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[36] |= BIT(4);
    c95e:	f061 0101 	orn	r1, r1, #1
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    c962:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
    c966:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
	rp->commands[36] |= BIT(4);
    c96a:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    c96e:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    c972:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
    c976:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    c97a:	f043 0304 	orr.w	r3, r3, #4
    c97e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    c982:	e6f0      	b.n	c766 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    c984:	2109      	movs	r1, #9
    c986:	a80b      	add	r0, sp, #44	; 0x2c
    c988:	f7ff fb76 	bl	c078 <cmd_complete>
	rp->status = 0x00;
    c98c:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    c98e:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    c990:	2208      	movs	r2, #8
	rp->status = 0x00;
    c992:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    c996:	f7f3 ff3d 	bl	814 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    c99a:	2360      	movs	r3, #96	; 0x60
    c99c:	7163      	strb	r3, [r4, #5]
    c99e:	e6e2      	b.n	c766 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    c9a0:	2107      	movs	r1, #7
    c9a2:	a80b      	add	r0, sp, #44	; 0x2c
    c9a4:	f7ff fb68 	bl	c078 <cmd_complete>
	rp->status = 0x00;
    c9a8:	4601      	mov	r1, r0
    c9aa:	2300      	movs	r3, #0
    c9ac:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    c9b0:	4618      	mov	r0, r3
    c9b2:	f7ff f99b 	bl	bcec <ll_addr_get>
    c9b6:	e6d6      	b.n	c766 <hci_cmd_handle+0xc2>
    c9b8:	20000b6c 	.word	0x20000b6c
    c9bc:	20000b74 	.word	0x20000b74
    c9c0:	2000e100 	.word	0x2000e100
    c9c4:	20000c00 	.word	0x20000c00
    c9c8:	2000e108 	.word	0x2000e108
	switch (ocf) {
    c9cc:	3a01      	subs	r2, #1
    c9ce:	2a4d      	cmp	r2, #77	; 0x4d
    c9d0:	f63f ae8e 	bhi.w	c6f0 <hci_cmd_handle+0x4c>
    c9d4:	a301      	add	r3, pc, #4	; (adr r3, c9dc <hci_cmd_handle+0x338>)
    c9d6:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    c9da:	bf00      	nop
    c9dc:	0000cb15 	.word	0x0000cb15
    c9e0:	0000cb1f 	.word	0x0000cb1f
    c9e4:	0000cb37 	.word	0x0000cb37
    c9e8:	0000c6f1 	.word	0x0000c6f1
    c9ec:	0000cb5b 	.word	0x0000cb5b
    c9f0:	0000cc01 	.word	0x0000cc01
    c9f4:	0000d11d 	.word	0x0000d11d
    c9f8:	0000cc65 	.word	0x0000cc65
    c9fc:	0000cc81 	.word	0x0000cc81
    ca00:	0000cc8d 	.word	0x0000cc8d
    ca04:	0000ccb7 	.word	0x0000ccb7
    ca08:	0000cccf 	.word	0x0000cccf
    ca0c:	0000ccef 	.word	0x0000ccef
    ca10:	0000cd19 	.word	0x0000cd19
    ca14:	0000cb67 	.word	0x0000cb67
    ca18:	0000cb7d 	.word	0x0000cb7d
    ca1c:	0000cb8f 	.word	0x0000cb8f
    ca20:	0000cb97 	.word	0x0000cb97
    ca24:	0000cdcb 	.word	0x0000cdcb
    ca28:	0000cd71 	.word	0x0000cd71
    ca2c:	0000cda7 	.word	0x0000cda7
    ca30:	0000cdc1 	.word	0x0000cdc1
    ca34:	0000cb9f 	.word	0x0000cb9f
    ca38:	0000cbc5 	.word	0x0000cbc5
    ca3c:	0000cd79 	.word	0x0000cd79
    ca40:	0000cd8d 	.word	0x0000cd8d
    ca44:	0000cd9d 	.word	0x0000cd9d
    ca48:	0000cbdb 	.word	0x0000cbdb
    ca4c:	0000c6f1 	.word	0x0000c6f1
    ca50:	0000c6f1 	.word	0x0000c6f1
    ca54:	0000c6f1 	.word	0x0000c6f1
    ca58:	0000cdf5 	.word	0x0000cdf5
    ca5c:	0000ce1f 	.word	0x0000ce1f
    ca60:	0000ce2d 	.word	0x0000ce2d
    ca64:	0000ce3d 	.word	0x0000ce3d
    ca68:	0000ce55 	.word	0x0000ce55
    ca6c:	0000c6f1 	.word	0x0000c6f1
    ca70:	0000c6f1 	.word	0x0000c6f1
    ca74:	0000cf5b 	.word	0x0000cf5b
    ca78:	0000cf69 	.word	0x0000cf69
    ca7c:	0000cf71 	.word	0x0000cf71
    ca80:	0000cf81 	.word	0x0000cf81
    ca84:	0000cf93 	.word	0x0000cf93
    ca88:	0000cfb1 	.word	0x0000cfb1
    ca8c:	0000cfcf 	.word	0x0000cfcf
    ca90:	0000cfe5 	.word	0x0000cfe5
    ca94:	0000ce71 	.word	0x0000ce71
    ca98:	0000ce89 	.word	0x0000ce89
    ca9c:	0000cedf 	.word	0x0000cedf
    caa0:	0000cefd 	.word	0x0000cefd
    caa4:	0000c6f1 	.word	0x0000c6f1
    caa8:	0000c6f1 	.word	0x0000c6f1
    caac:	0000c6f1 	.word	0x0000c6f1
    cab0:	0000cc1d 	.word	0x0000cc1d
    cab4:	0000cc71 	.word	0x0000cc71
    cab8:	0000cc81 	.word	0x0000cc81
    cabc:	0000ccad 	.word	0x0000ccad
    cac0:	0000c6f1 	.word	0x0000c6f1
    cac4:	0000c6f1 	.word	0x0000c6f1
    cac8:	0000c6f1 	.word	0x0000c6f1
    cacc:	0000c6f1 	.word	0x0000c6f1
    cad0:	0000c6f1 	.word	0x0000c6f1
    cad4:	0000c6f1 	.word	0x0000c6f1
    cad8:	0000c6f1 	.word	0x0000c6f1
    cadc:	0000c6f1 	.word	0x0000c6f1
    cae0:	0000c6f1 	.word	0x0000c6f1
    cae4:	0000c6f1 	.word	0x0000c6f1
    cae8:	0000c6f1 	.word	0x0000c6f1
    caec:	0000c6f1 	.word	0x0000c6f1
    caf0:	0000c6f1 	.word	0x0000c6f1
    caf4:	0000c6f1 	.word	0x0000c6f1
    caf8:	0000c6f1 	.word	0x0000c6f1
    cafc:	0000c6f1 	.word	0x0000c6f1
    cb00:	0000c6f1 	.word	0x0000c6f1
    cb04:	0000cffb 	.word	0x0000cffb
    cb08:	0000c6f1 	.word	0x0000c6f1
    cb0c:	0000c6f1 	.word	0x0000c6f1
    cb10:	0000cff1 	.word	0x0000cff1
	le_event_mask = sys_get_le64(cmd->events);
    cb14:	68a0      	ldr	r0, [r4, #8]
    cb16:	f7ff fdc1 	bl	c69c <sys_get_le64>
    cb1a:	4bb2      	ldr	r3, [pc, #712]	; (cde4 <hci_cmd_handle+0x740>)
    cb1c:	e653      	b.n	c7c6 <hci_cmd_handle+0x122>
	rp = cmd_complete(evt, sizeof(*rp));
    cb1e:	2104      	movs	r1, #4
    cb20:	a80b      	add	r0, sp, #44	; 0x2c
    cb22:	f7ff faa9 	bl	c078 <cmd_complete>
	rp->status = 0x00;
    cb26:	2300      	movs	r3, #0
    cb28:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    cb2a:	2301      	movs	r3, #1
    cb2c:	7043      	strb	r3, [r0, #1]
    cb2e:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    cb30:	2302      	movs	r3, #2
    cb32:	70c3      	strb	r3, [r0, #3]
    cb34:	e617      	b.n	c766 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    cb36:	2109      	movs	r1, #9
    cb38:	a80b      	add	r0, sp, #44	; 0x2c
    cb3a:	f7ff fa9d 	bl	c078 <cmd_complete>
	rp->status = 0x00;
    cb3e:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    cb40:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    cb42:	2208      	movs	r2, #8
	rp->status = 0x00;
    cb44:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    cb48:	f7f3 fe64 	bl	814 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    cb4c:	23ff      	movs	r3, #255	; 0xff
    cb4e:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    cb50:	2349      	movs	r3, #73	; 0x49
    cb52:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    cb54:	2301      	movs	r3, #1
    cb56:	70e3      	strb	r3, [r4, #3]
    cb58:	e605      	b.n	c766 <hci_cmd_handle+0xc2>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    cb5a:	68a1      	ldr	r1, [r4, #8]
    cb5c:	2001      	movs	r0, #1
    cb5e:	f7ff f8df 	bl	bd20 <ll_addr_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    cb62:	4604      	mov	r4, r0
    cb64:	e100      	b.n	cd68 <hci_cmd_handle+0x6c4>
	rp = cmd_complete(evt, sizeof(*rp));
    cb66:	2102      	movs	r1, #2
    cb68:	a80b      	add	r0, sp, #44	; 0x2c
    cb6a:	f7ff fa85 	bl	c078 <cmd_complete>
	rp->status = 0x00;
    cb6e:	2300      	movs	r3, #0
    cb70:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    cb72:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    cb74:	f009 fd86 	bl	16684 <ll_wl_size_get>
    cb78:	7060      	strb	r0, [r4, #1]
    cb7a:	e5f4      	b.n	c766 <hci_cmd_handle+0xc2>
	ccst = cmd_complete(evt, sizeof(*ccst));
    cb7c:	2101      	movs	r1, #1
    cb7e:	a80b      	add	r0, sp, #44	; 0x2c
    cb80:	f7ff fa7a 	bl	c078 <cmd_complete>
    cb84:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    cb86:	f009 fd7f 	bl	16688 <ll_wl_clear>
	ccst->status = ll_rl_enable(enable);
    cb8a:	7020      	strb	r0, [r4, #0]
    cb8c:	e5eb      	b.n	c766 <hci_cmd_handle+0xc2>
	status = ll_wl_add(&cmd->addr);
    cb8e:	68a0      	ldr	r0, [r4, #8]
    cb90:	f009 fe30 	bl	167f4 <ll_wl_add>
    cb94:	e7e5      	b.n	cb62 <hci_cmd_handle+0x4be>
	status = ll_wl_remove(&cmd->addr);
    cb96:	68a0      	ldr	r0, [r4, #8]
    cb98:	f009 fd96 	bl	166c8 <ll_wl_remove>
    cb9c:	e7e1      	b.n	cb62 <hci_cmd_handle+0x4be>
    cb9e:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    cba0:	2300      	movs	r3, #0
    cba2:	aa0c      	add	r2, sp, #48	; 0x30
    cba4:	f100 0110 	add.w	r1, r0, #16
    cba8:	f00a fae6 	bl	17178 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    cbac:	2111      	movs	r1, #17
    cbae:	a80b      	add	r0, sp, #44	; 0x2c
    cbb0:	f7ff fa62 	bl	c078 <cmd_complete>
	rp->status = 0x00;
    cbb4:	2300      	movs	r3, #0
    cbb6:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    cbba:	2210      	movs	r2, #16
    cbbc:	a90c      	add	r1, sp, #48	; 0x30
	memcpy(rp->info, build_info, sizeof(build_info));
    cbbe:	f7f3 fdfd 	bl	7bc <memcpy>
    cbc2:	e5d0      	b.n	c766 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    cbc4:	2109      	movs	r1, #9
    cbc6:	a80b      	add	r0, sp, #44	; 0x2c
    cbc8:	f7ff fa56 	bl	c078 <cmd_complete>
	rp->status = 0x00;
    cbcc:	2300      	movs	r3, #0
    cbce:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    cbd2:	2108      	movs	r1, #8
    cbd4:	f7ff f8c4 	bl	bd60 <bt_rand>
    cbd8:	e5c5      	b.n	c766 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    cbda:	2109      	movs	r1, #9
    cbdc:	a80b      	add	r0, sp, #44	; 0x2c
    cbde:	f7ff fa4b 	bl	c078 <cmd_complete>
	rp->status = 0x00;
    cbe2:	4601      	mov	r1, r0
    cbe4:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
    cbe6:	4602      	mov	r2, r0
	rp->status = 0x00;
    cbe8:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
    cbec:	f46f 0040 	mvn.w	r0, #12582912	; 0xc00000
    cbf0:	f7ff f9fe 	bl	bff0 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    cbf4:	f240 30ff 	movw	r0, #1023	; 0x3ff
    cbf8:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    cbfa:	f7ff f9f9 	bl	bff0 <sys_put_le32>
    cbfe:	e5b2      	b.n	c766 <hci_cmd_handle+0xc2>
    cc00:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
    cc02:	7ba5      	ldrb	r5, [r4, #14]
    cc04:	79a3      	ldrb	r3, [r4, #6]
    cc06:	7962      	ldrb	r2, [r4, #5]
    cc08:	7921      	ldrb	r1, [r4, #4]
    cc0a:	8820      	ldrh	r0, [r4, #0]
    cc0c:	9502      	str	r5, [sp, #8]
    cc0e:	7b65      	ldrb	r5, [r4, #13]
    cc10:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    cc12:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    cc14:	9400      	str	r4, [sp, #0]
    cc16:	f008 fe0d 	bl	15834 <ll_adv_params_set>
    cc1a:	e7a2      	b.n	cb62 <hci_cmd_handle+0x4be>
    cc1c:	68a4      	ldr	r4, [r4, #8]
	status = ll_ext_adv_params_set(cmd->handle, cmd->props, min_interval,
    cc1e:	2500      	movs	r5, #0
    cc20:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    cc24:	7a23      	ldrb	r3, [r4, #8]
    cc26:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    cc2a:	7820      	ldrb	r0, [r4, #0]
    cc2c:	9509      	str	r5, [sp, #36]	; 0x24
    cc2e:	7d66      	ldrb	r6, [r4, #21]
    cc30:	9608      	str	r6, [sp, #32]
    cc32:	7d26      	ldrb	r6, [r4, #20]
    cc34:	9607      	str	r6, [sp, #28]
    cc36:	7ce6      	ldrb	r6, [r4, #19]
    cc38:	9606      	str	r6, [sp, #24]
    cc3a:	7ca6      	ldrb	r6, [r4, #18]
    cc3c:	9605      	str	r6, [sp, #20]
    cc3e:	9504      	str	r5, [sp, #16]
    cc40:	7c25      	ldrb	r5, [r4, #16]
    cc42:	9503      	str	r5, [sp, #12]
    cc44:	79e5      	ldrb	r5, [r4, #7]
    cc46:	9502      	str	r5, [sp, #8]
				   &cmd->direct_addr.a.val[0], cmd->prim_channel_map,
    cc48:	f104 050a 	add.w	r5, r4, #10
	status = ll_ext_adv_params_set(cmd->handle, cmd->props, min_interval,
    cc4c:	9501      	str	r5, [sp, #4]
    cc4e:	7a64      	ldrb	r4, [r4, #9]
    cc50:	9400      	str	r4, [sp, #0]
    cc52:	f008 fe8b 	bl	1596c <ll_ext_adv_params_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    cc56:	2102      	movs	r1, #2
	status = ll_ext_adv_params_set(cmd->handle, cmd->props, min_interval,
    cc58:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    cc5a:	a80b      	add	r0, sp, #44	; 0x2c
    cc5c:	f7ff fa0c 	bl	c078 <cmd_complete>
	ccst->status = status;
    cc60:	7004      	strb	r4, [r0, #0]
    cc62:	e580      	b.n	c766 <hci_cmd_handle+0xc2>
    cc64:	68a3      	ldr	r3, [r4, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    cc66:	1c59      	adds	r1, r3, #1
    cc68:	7818      	ldrb	r0, [r3, #0]
    cc6a:	f009 f86f 	bl	15d4c <ll_adv_data_set>
    cc6e:	e59a      	b.n	c7a6 <hci_cmd_handle+0x102>
    cc70:	68a0      	ldr	r0, [r4, #8]
	ll_ext_adv_data_set(cmd->len, &cmd->data[0], cmd->op, cmd->frag_pref);
    cc72:	7883      	ldrb	r3, [r0, #2]
    cc74:	7842      	ldrb	r2, [r0, #1]
    cc76:	1d01      	adds	r1, r0, #4
    cc78:	78c0      	ldrb	r0, [r0, #3]
    cc7a:	f009 f8d7 	bl	15e2c <ll_ext_adv_data_set>
    cc7e:	e592      	b.n	c7a6 <hci_cmd_handle+0x102>
    cc80:	68a3      	ldr	r3, [r4, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    cc82:	1c59      	adds	r1, r3, #1
    cc84:	7818      	ldrb	r0, [r3, #0]
    cc86:	f009 fa07 	bl	16098 <ll_scan_data_set>
    cc8a:	e58c      	b.n	c7a6 <hci_cmd_handle+0x102>
	status = ll_adv_enable(cmd->enable);
    cc8c:	68a3      	ldr	r3, [r4, #8]
    cc8e:	7818      	ldrb	r0, [r3, #0]
    cc90:	f009 fa44 	bl	1611c <ll_adv_enable>
	status = ll_scan_enable(cmd->enable);
    cc94:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    cc96:	2101      	movs	r1, #1
    cc98:	a80b      	add	r0, sp, #44	; 0x2c
    cc9a:	f7ff f9ed 	bl	c078 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    cc9e:	2c00      	cmp	r4, #0
    cca0:	bf18      	it	ne
    cca2:	230c      	movne	r3, #12
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    cca4:	bf08      	it	eq
    cca6:	2300      	moveq	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    cca8:	7003      	strb	r3, [r0, #0]
    ccaa:	e55c      	b.n	c766 <hci_cmd_handle+0xc2>
	status = ll_ext_adv_enable(cmd->enable);
    ccac:	68a3      	ldr	r3, [r4, #8]
    ccae:	7818      	ldrb	r0, [r3, #0]
    ccb0:	f009 fa96 	bl	161e0 <ll_ext_adv_enable>
    ccb4:	e7ee      	b.n	cc94 <hci_cmd_handle+0x5f0>
    ccb6:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    ccb8:	7963      	ldrb	r3, [r4, #5]
    ccba:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    ccbe:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    ccc2:	7820      	ldrb	r0, [r4, #0]
    ccc4:	79a4      	ldrb	r4, [r4, #6]
    ccc6:	9400      	str	r4, [sp, #0]
    ccc8:	f009 fb08 	bl	162dc <ll_scan_params_set>
    cccc:	e7e2      	b.n	cc94 <hci_cmd_handle+0x5f0>
    ccce:	68a2      	ldr	r2, [r4, #8]
    ccd0:	4b45      	ldr	r3, [pc, #276]	; (cde8 <hci_cmd_handle+0x744>)
	if (cmd->enable && cmd->filter_dup) {
    ccd2:	7810      	ldrb	r0, [r2, #0]
    ccd4:	b140      	cbz	r0, cce8 <hci_cmd_handle+0x644>
    ccd6:	7852      	ldrb	r2, [r2, #1]
    ccd8:	b132      	cbz	r2, cce8 <hci_cmd_handle+0x644>
		dup_count = 0;
    ccda:	2200      	movs	r2, #0
    ccdc:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    ccde:	4b43      	ldr	r3, [pc, #268]	; (cdec <hci_cmd_handle+0x748>)
		dup_count = -1;
    cce0:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    cce2:	f009 fb1f 	bl	16324 <ll_scan_enable>
    cce6:	e7d5      	b.n	cc94 <hci_cmd_handle+0x5f0>
		dup_count = -1;
    cce8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ccec:	e7f8      	b.n	cce0 <hci_cmd_handle+0x63c>
    ccee:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    ccf0:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    ccf4:	7963      	ldrb	r3, [r4, #5]
    ccf6:	7922      	ldrb	r2, [r4, #4]
    ccf8:	8861      	ldrh	r1, [r4, #2]
    ccfa:	8820      	ldrh	r0, [r4, #0]
    ccfc:	9504      	str	r5, [sp, #16]
    ccfe:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    cd02:	9503      	str	r5, [sp, #12]
    cd04:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    cd08:	9502      	str	r5, [sp, #8]
    cd0a:	7b25      	ldrb	r5, [r4, #12]
    cd0c:	9501      	str	r5, [sp, #4]
    cd0e:	3406      	adds	r4, #6
    cd10:	9400      	str	r4, [sp, #0]
    cd12:	f009 fb41 	bl	16398 <ll_create_connection>
    cd16:	e51f      	b.n	c758 <hci_cmd_handle+0xb4>
	status = ll_connect_disable();
    cd18:	f008 fc52 	bl	155c0 <ll_connect_disable>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    cd1c:	4606      	mov	r6, r0
    cd1e:	bb28      	cbnz	r0, cd6c <hci_cmd_handle+0x6c8>
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    cd20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    cd24:	2001      	movs	r0, #1
    cd26:	f7f8 fdab 	bl	5880 <bt_buf_get_rx>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cd2a:	4a31      	ldr	r2, [pc, #196]	; (cdf0 <hci_cmd_handle+0x74c>)
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    cd2c:	900b      	str	r0, [sp, #44]	; 0x2c
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cd2e:	e9d2 4500 	ldrd	r4, r5, [r2]
    cd32:	2400      	movs	r4, #0
    cd34:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    cd38:	ea54 0205 	orrs.w	r2, r4, r5
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    cd3c:	4603      	mov	r3, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cd3e:	d004      	beq.n	cd4a <hci_cmd_handle+0x6a6>
    cd40:	4632      	mov	r2, r6
    cd42:	4631      	mov	r1, r6
    cd44:	2002      	movs	r0, #2
    cd46:	f7ff fb2b 	bl	c3a0 <le_conn_complete.part.48>
		if ((*evt)->len) {
    cd4a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    cd4c:	8984      	ldrh	r4, [r0, #12]
    cd4e:	b14c      	cbz	r4, cd64 <hci_cmd_handle+0x6c0>
			ccst = cmd_complete(&cc, sizeof(*ccst));
    cd50:	2101      	movs	r1, #1
    cd52:	a80c      	add	r0, sp, #48	; 0x30
    cd54:	f7ff f990 	bl	c078 <cmd_complete>
			ccst->status = cmd_status;
    cd58:	2300      	movs	r3, #0
    cd5a:	7003      	strb	r3, [r0, #0]
			bt_recv_prio(cc);
    cd5c:	980c      	ldr	r0, [sp, #48]	; 0x30
    cd5e:	f7f8 f9f7 	bl	5150 <bt_recv_prio>
    cd62:	e500      	b.n	c766 <hci_cmd_handle+0xc2>
			net_buf_unref(*evt);
    cd64:	f00b f898 	bl	17e98 <net_buf_unref>
	ccst = cmd_complete(evt, sizeof(*ccst));
    cd68:	2101      	movs	r1, #1
    cd6a:	e776      	b.n	cc5a <hci_cmd_handle+0x5b6>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    cd6c:	240c      	movs	r4, #12
    cd6e:	e7fb      	b.n	cd68 <hci_cmd_handle+0x6c4>
	status = ll_chm_update(&cmd->ch_map[0]);
    cd70:	68a0      	ldr	r0, [r4, #8]
    cd72:	f007 fb29 	bl	143c8 <ll_chm_update>
    cd76:	e78d      	b.n	cc94 <hci_cmd_handle+0x5f0>
    cd78:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
    cd7a:	f100 030c 	add.w	r3, r0, #12
    cd7e:	f100 020a 	add.w	r2, r0, #10
    cd82:	1c81      	adds	r1, r0, #2
    cd84:	8800      	ldrh	r0, [r0, #0]
    cd86:	f007 fde7 	bl	14958 <ll_enc_req_send>
    cd8a:	e4e5      	b.n	c758 <hci_cmd_handle+0xb4>
	handle = sys_le16_to_cpu(cmd->handle);
    cd8c:	68a2      	ldr	r2, [r4, #8]
    cd8e:	f832 4b02 	ldrh.w	r4, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    cd92:	2100      	movs	r1, #0
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    cd94:	b2a0      	uxth	r0, r4
    cd96:	f007 fb6e 	bl	14476 <ll_start_enc_req_send>
    cd9a:	e556      	b.n	c84a <hci_cmd_handle+0x1a6>
	handle = sys_le16_to_cpu(cmd->handle);
    cd9c:	68a3      	ldr	r3, [r4, #8]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    cd9e:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(cmd->handle);
    cda0:	881c      	ldrh	r4, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    cda2:	2106      	movs	r1, #6
    cda4:	e7f6      	b.n	cd94 <hci_cmd_handle+0x6f0>
	handle = sys_le16_to_cpu(cmd->handle);
    cda6:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    cda8:	2108      	movs	r1, #8
    cdaa:	a80b      	add	r0, sp, #44	; 0x2c
	handle = sys_le16_to_cpu(cmd->handle);
    cdac:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    cdae:	f7ff f963 	bl	c078 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    cdb2:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    cdb4:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    cdb6:	1cc1      	adds	r1, r0, #3
    cdb8:	4630      	mov	r0, r6
    cdba:	f007 fb47 	bl	1444c <ll_chm_get>
    cdbe:	e51f      	b.n	c800 <hci_cmd_handle+0x15c>
	handle = sys_le16_to_cpu(cmd->handle);
    cdc0:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    cdc2:	8818      	ldrh	r0, [r3, #0]
    cdc4:	f007 fb9a 	bl	144fc <ll_feature_req_send>
    cdc8:	e4c6      	b.n	c758 <hci_cmd_handle+0xb4>
    cdca:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    cdcc:	8911      	ldrh	r1, [r2, #8]
    cdce:	8893      	ldrh	r3, [r2, #4]
    cdd0:	8810      	ldrh	r0, [r2, #0]
    cdd2:	9101      	str	r1, [sp, #4]
    cdd4:	88d2      	ldrh	r2, [r2, #6]
    cdd6:	9200      	str	r2, [sp, #0]
    cdd8:	2200      	movs	r2, #0
    cdda:	4611      	mov	r1, r2
    cddc:	f007 fa7c 	bl	142d8 <ll_conn_update>
	*evt = cmd_status(status);
    cde0:	b2c0      	uxtb	r0, r0
    cde2:	e4bd      	b.n	c760 <hci_cmd_handle+0xbc>
    cde4:	2000e108 	.word	0x2000e108
    cde8:	20000b74 	.word	0x20000b74
    cdec:	20000b78 	.word	0x20000b78
    cdf0:	2000e100 	.word	0x2000e100
    cdf4:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    cdf6:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    cdf8:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    cdfa:	8893      	ldrh	r3, [r2, #4]
    cdfc:	9101      	str	r1, [sp, #4]
    cdfe:	88d2      	ldrh	r2, [r2, #6]
    ce00:	9200      	str	r2, [sp, #0]
    ce02:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    ce04:	2102      	movs	r1, #2
    ce06:	b2a0      	uxth	r0, r4
    ce08:	f007 fa66 	bl	142d8 <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
    ce0c:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    ce0e:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    ce10:	a80b      	add	r0, sp, #44	; 0x2c
    ce12:	f7ff f931 	bl	c078 <cmd_complete>
	rp->status = status;
    ce16:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    ce18:	f8a0 4001 	strh.w	r4, [r0, #1]
    ce1c:	e4a3      	b.n	c766 <hci_cmd_handle+0xc2>
    ce1e:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    ce20:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    ce22:	789a      	ldrb	r2, [r3, #2]
    ce24:	2300      	movs	r3, #0
    ce26:	9301      	str	r3, [sp, #4]
    ce28:	9300      	str	r3, [sp, #0]
    ce2a:	e7eb      	b.n	ce04 <hci_cmd_handle+0x760>
    ce2c:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    ce2e:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    ce30:	889a      	ldrh	r2, [r3, #4]
    ce32:	8859      	ldrh	r1, [r3, #2]
    ce34:	b2a0      	uxth	r0, r4
    ce36:	f007 fbd1 	bl	145dc <ll_length_req_send>
    ce3a:	e506      	b.n	c84a <hci_cmd_handle+0x1a6>
	rp = cmd_complete(evt, sizeof(*rp));
    ce3c:	2105      	movs	r1, #5
    ce3e:	a80b      	add	r0, sp, #44	; 0x2c
    ce40:	f7ff f91a 	bl	c078 <cmd_complete>
    ce44:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    ce46:	1cc1      	adds	r1, r0, #3
    ce48:	3001      	adds	r0, #1
    ce4a:	f007 fbeb 	bl	14624 <ll_length_default_get>
	rp->status = 0x00;
    ce4e:	2300      	movs	r3, #0
    ce50:	7023      	strb	r3, [r4, #0]
    ce52:	e488      	b.n	c766 <hci_cmd_handle+0xc2>
    ce54:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    ce56:	8859      	ldrh	r1, [r3, #2]
    ce58:	8818      	ldrh	r0, [r3, #0]
    ce5a:	f007 fbed 	bl	14638 <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    ce5e:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    ce60:	2101      	movs	r1, #1
    ce62:	a80b      	add	r0, sp, #44	; 0x2c
    ce64:	f7ff f908 	bl	c078 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    ce68:	2c00      	cmp	r4, #0
    ce6a:	bf18      	it	ne
    ce6c:	231e      	movne	r3, #30
    ce6e:	e719      	b.n	cca4 <hci_cmd_handle+0x600>
	rp = cmd_complete(evt, sizeof(*rp));
    ce70:	2109      	movs	r1, #9
    ce72:	a80b      	add	r0, sp, #44	; 0x2c
    ce74:	f7ff f900 	bl	c078 <cmd_complete>
    ce78:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    ce7a:	1dc3      	adds	r3, r0, #7
    ce7c:	1d42      	adds	r2, r0, #5
    ce7e:	1cc1      	adds	r1, r0, #3
    ce80:	3001      	adds	r0, #1
    ce82:	f007 fbe3 	bl	1464c <ll_length_max_get>
    ce86:	e7e2      	b.n	ce4e <hci_cmd_handle+0x7aa>
	handle = sys_le16_to_cpu(cmd->handle);
    ce88:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    ce8a:	2105      	movs	r1, #5
    ce8c:	a80b      	add	r0, sp, #44	; 0x2c
	handle = sys_le16_to_cpu(cmd->handle);
    ce8e:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    ce90:	f7ff f8f2 	bl	c078 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    ce94:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    ce96:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    ce98:	1d02      	adds	r2, r0, #4
    ce9a:	1cc1      	adds	r1, r0, #3
    ce9c:	4630      	mov	r0, r6
    ce9e:	f007 fbde 	bl	1465e <ll_phy_get>
	return __builtin_ffs(op);
    cea2:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    cea4:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    cea8:	2800      	cmp	r0, #0
    ceaa:	bf14      	ite	ne
    ceac:	230c      	movne	r3, #12
    ceae:	2300      	moveq	r3, #0
    ceb0:	7023      	strb	r3, [r4, #0]
    ceb2:	2a00      	cmp	r2, #0
    ceb4:	fa92 f3a2 	rbit	r3, r2
    ceb8:	fab3 f383 	clz	r3, r3
    cebc:	7922      	ldrb	r2, [r4, #4]
    cebe:	bf08      	it	eq
    cec0:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    cec4:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    cec6:	70e3      	strb	r3, [r4, #3]
    cec8:	2a00      	cmp	r2, #0
    ceca:	fa92 f3a2 	rbit	r3, r2
    cece:	fab3 f383 	clz	r3, r3
    ced2:	bf08      	it	eq
    ced4:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    ced8:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    ceda:	7123      	strb	r3, [r4, #4]
    cedc:	e443      	b.n	c766 <hci_cmd_handle+0xc2>
    cede:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    cee0:	781a      	ldrb	r2, [r3, #0]
    cee2:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    cee4:	bf44      	itt	mi
    cee6:	2107      	movmi	r1, #7
    cee8:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    ceea:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    ceec:	bf44      	itt	mi
    ceee:	2207      	movmi	r2, #7
    cef0:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    cef2:	7899      	ldrb	r1, [r3, #2]
    cef4:	7858      	ldrb	r0, [r3, #1]
    cef6:	f007 fbc7 	bl	14688 <ll_phy_default_set>
    cefa:	e7b0      	b.n	ce5e <hci_cmd_handle+0x7ba>
    cefc:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    cefe:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    cf00:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    cf02:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    cf06:	07d7      	lsls	r7, r2, #31
		cmd->tx_phys = mask_phys;
    cf08:	bf44      	itt	mi
    cf0a:	2107      	movmi	r1, #7
    cf0c:	70d9      	strbmi	r1, [r3, #3]
	if (!(cmd->tx_phys & 0x07) ||
    cf0e:	78d9      	ldrb	r1, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    cf10:	0796      	lsls	r6, r2, #30
		cmd->rx_phys = mask_phys;
    cf12:	bf44      	itt	mi
    cf14:	2207      	movmi	r2, #7
    cf16:	711a      	strbmi	r2, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    cf18:	074d      	lsls	r5, r1, #29
    cf1a:	d002      	beq.n	cf22 <hci_cmd_handle+0x87e>
	    !(cmd->rx_phys & 0x07)) {
    cf1c:	791b      	ldrb	r3, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    cf1e:	075a      	lsls	r2, r3, #29
    cf20:	d105      	bne.n	cf2e <hci_cmd_handle+0x88a>
		ccst = cmd_complete(evt, sizeof(*ccst));
    cf22:	2101      	movs	r1, #1
    cf24:	a80b      	add	r0, sp, #44	; 0x2c
    cf26:	f7ff f8a7 	bl	c078 <cmd_complete>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    cf2a:	2312      	movs	r3, #18
    cf2c:	e6bc      	b.n	cca8 <hci_cmd_handle+0x604>
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    cf2e:	ea41 0203 	orr.w	r2, r1, r3
    cf32:	f012 0ff8 	tst.w	r2, #248	; 0xf8
    cf36:	d005      	beq.n	cf44 <hci_cmd_handle+0x8a0>
		ccst = cmd_complete(evt, sizeof(*ccst));
    cf38:	2101      	movs	r1, #1
    cf3a:	a80b      	add	r0, sp, #44	; 0x2c
    cf3c:	f7ff f89c 	bl	c078 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    cf40:	2311      	movs	r3, #17
    cf42:	e6b1      	b.n	cca8 <hci_cmd_handle+0x604>
	if (phy_opts & 0x03) {
    cf44:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
    cf48:	bf1c      	itt	ne
    cf4a:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    cf4e:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    cf52:	f007 fba3 	bl	1469c <ll_phy_req_send>
    cf56:	f7ff bbff 	b.w	c758 <hci_cmd_handle+0xb4>
    cf5a:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    cf5c:	f100 0217 	add.w	r2, r0, #23
    cf60:	1dc1      	adds	r1, r0, #7
    cf62:	f009 feaf 	bl	16cc4 <ll_rl_add>
    cf66:	e5fc      	b.n	cb62 <hci_cmd_handle+0x4be>
	status = ll_rl_remove(&cmd->peer_id_addr);
    cf68:	68a0      	ldr	r0, [r4, #8]
    cf6a:	f009 ff4d 	bl	16e08 <ll_rl_remove>
    cf6e:	e5f8      	b.n	cb62 <hci_cmd_handle+0x4be>
	ccst = cmd_complete(evt, sizeof(*ccst));
    cf70:	2101      	movs	r1, #1
    cf72:	a80b      	add	r0, sp, #44	; 0x2c
    cf74:	f7ff f880 	bl	c078 <cmd_complete>
    cf78:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    cf7a:	f009 fe89 	bl	16c90 <ll_rl_clear>
    cf7e:	e604      	b.n	cb8a <hci_cmd_handle+0x4e6>
	rp = cmd_complete(evt, sizeof(*rp));
    cf80:	2102      	movs	r1, #2
    cf82:	a80b      	add	r0, sp, #44	; 0x2c
    cf84:	f7ff f878 	bl	c078 <cmd_complete>
    cf88:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    cf8a:	f009 fe7f 	bl	16c8c <ll_rl_size_get>
    cf8e:	7060      	strb	r0, [r4, #1]
    cf90:	e75d      	b.n	ce4e <hci_cmd_handle+0x7aa>
	memcpy(dst, src, sizeof(*dst));
    cf92:	2207      	movs	r2, #7
    cf94:	68a1      	ldr	r1, [r4, #8]
    cf96:	a80c      	add	r0, sp, #48	; 0x30
    cf98:	f7f3 fc10 	bl	7bc <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    cf9c:	2107      	movs	r1, #7
    cf9e:	a80b      	add	r0, sp, #44	; 0x2c
    cfa0:	f7ff f86a 	bl	c078 <cmd_complete>
    cfa4:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    cfa6:	1c41      	adds	r1, r0, #1
    cfa8:	a80c      	add	r0, sp, #48	; 0x30
    cfaa:	f009 ffbb 	bl	16f24 <ll_rl_crpa_get>
    cfae:	e5ec      	b.n	cb8a <hci_cmd_handle+0x4e6>
    cfb0:	2207      	movs	r2, #7
    cfb2:	68a1      	ldr	r1, [r4, #8]
    cfb4:	a80c      	add	r0, sp, #48	; 0x30
    cfb6:	f7f3 fc01 	bl	7bc <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    cfba:	2107      	movs	r1, #7
    cfbc:	a80b      	add	r0, sp, #44	; 0x2c
    cfbe:	f7ff f85b 	bl	c078 <cmd_complete>
    cfc2:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    cfc4:	1c41      	adds	r1, r0, #1
    cfc6:	a80c      	add	r0, sp, #48	; 0x30
    cfc8:	f009 ffcc 	bl	16f64 <ll_rl_lrpa_get>
    cfcc:	e5dd      	b.n	cb8a <hci_cmd_handle+0x4e6>
	u8_t enable = cmd->enable;
    cfce:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    cfd0:	2101      	movs	r1, #1
    cfd2:	a80b      	add	r0, sp, #44	; 0x2c
	u8_t enable = cmd->enable;
    cfd4:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    cfd6:	f7ff f84f 	bl	c078 <cmd_complete>
    cfda:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    cfdc:	4628      	mov	r0, r5
    cfde:	f009 ffd9 	bl	16f94 <ll_rl_enable>
    cfe2:	e5d2      	b.n	cb8a <hci_cmd_handle+0x4e6>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    cfe4:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    cfe6:	8818      	ldrh	r0, [r3, #0]
    cfe8:	f009 ffe6 	bl	16fb8 <ll_rl_timeout_set>
    cfec:	f7ff bbdb 	b.w	c7a6 <hci_cmd_handle+0x102>
    cff0:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    cff2:	79c1      	ldrb	r1, [r0, #7]
    cff4:	f009 ffe8 	bl	16fc8 <ll_priv_mode_set>
    cff8:	e5b3      	b.n	cb62 <hci_cmd_handle+0x4be>
	rp = cmd_complete(evt, sizeof(*rp));
    cffa:	2103      	movs	r1, #3
    cffc:	a80b      	add	r0, sp, #44	; 0x2c
    cffe:	f7ff f83b 	bl	c078 <cmd_complete>
	rp->status = 0x00;
    d002:	4601      	mov	r1, r0
    d004:	2300      	movs	r3, #0
    d006:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    d00a:	3001      	adds	r0, #1
    d00c:	f7fe fea4 	bl	bd58 <ll_tx_pwr_get>
    d010:	f7ff bba9 	b.w	c766 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    d014:	210d      	movs	r1, #13
    d016:	a80b      	add	r0, sp, #44	; 0x2c
    d018:	f7ff f82e 	bl	c078 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    d01c:	2202      	movs	r2, #2
    d01e:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    d020:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    d022:	2201      	movs	r2, #1
    d024:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    d026:	220b      	movs	r2, #11
	rp->status = 0x00;
    d028:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    d02a:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    d02c:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    d02e:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    d030:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    d032:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    d034:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    d036:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    d038:	7242      	strb	r2, [r0, #9]
    d03a:	7283      	strb	r3, [r0, #10]
    d03c:	72c3      	strb	r3, [r0, #11]
    d03e:	7303      	strb	r3, [r0, #12]
    d040:	f7ff bb91 	b.w	c766 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    d044:	2141      	movs	r1, #65	; 0x41
    d046:	a80b      	add	r0, sp, #44	; 0x2c
    d048:	f7ff f816 	bl	c078 <cmd_complete>
	rp->status = 0x00;
    d04c:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    d04e:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    d050:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    d052:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    d056:	f7f3 fbdd 	bl	814 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    d05a:	7863      	ldrb	r3, [r4, #1]
    d05c:	f063 0358 	orn	r3, r3, #88	; 0x58
    d060:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    d062:	78a3      	ldrb	r3, [r4, #2]
    d064:	f043 0303 	orr.w	r3, r3, #3
    d068:	70a3      	strb	r3, [r4, #2]
    d06a:	f7ff bb7c 	b.w	c766 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    d06e:	2109      	movs	r1, #9
    d070:	a80b      	add	r0, sp, #44	; 0x2c
    d072:	f7ff f801 	bl	c078 <cmd_complete>
	rp->status = 0x00;
    d076:	2100      	movs	r1, #0
    d078:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    d07c:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    d07e:	f7f3 fbc9 	bl	814 <memset>
    d082:	f7ff bb70 	b.w	c766 <hci_cmd_handle+0xc2>
	const char build_info[] = HCI_VS_BUILD_INFO;
    d086:	4b5c      	ldr	r3, [pc, #368]	; (d1f8 <hci_cmd_handle+0xb54>)
    d088:	aa0c      	add	r2, sp, #48	; 0x30
    d08a:	f103 0628 	add.w	r6, r3, #40	; 0x28
    d08e:	4615      	mov	r5, r2
    d090:	6818      	ldr	r0, [r3, #0]
    d092:	6859      	ldr	r1, [r3, #4]
    d094:	4614      	mov	r4, r2
    d096:	c403      	stmia	r4!, {r0, r1}
    d098:	3308      	adds	r3, #8
    d09a:	42b3      	cmp	r3, r6
    d09c:	4622      	mov	r2, r4
    d09e:	d1f7      	bne.n	d090 <hci_cmd_handle+0x9ec>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    d0a0:	2129      	movs	r1, #41	; 0x29
    d0a2:	a80b      	add	r0, sp, #44	; 0x2c
    d0a4:	f7fe ffe8 	bl	c078 <cmd_complete>
	rp->status = 0x00;
    d0a8:	2300      	movs	r3, #0
    d0aa:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    d0ae:	2228      	movs	r2, #40	; 0x28
    d0b0:	4629      	mov	r1, r5
    d0b2:	e584      	b.n	cbbe <hci_cmd_handle+0x51a>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    d0b4:	68a1      	ldr	r1, [r4, #8]
    d0b6:	2000      	movs	r0, #0
    d0b8:	f7fe fe32 	bl	bd20 <ll_addr_set>
    d0bc:	f7ff bb73 	b.w	c7a6 <hci_cmd_handle+0x102>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    d0c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d0c4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    d0c8:	3201      	adds	r2, #1
    d0ca:	d106      	bne.n	d0da <hci_cmd_handle+0xa36>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    d0cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    d0d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    d0d4:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    d0d6:	4293      	cmp	r3, r2
    d0d8:	d020      	beq.n	d11c <hci_cmd_handle+0xa78>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    d0da:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d0de:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    d0e2:	07db      	lsls	r3, r3, #31
    d0e4:	d51a      	bpl.n	d11c <hci_cmd_handle+0xa78>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    d0e6:	2118      	movs	r1, #24
    d0e8:	a80b      	add	r0, sp, #44	; 0x2c
    d0ea:	f7fe ffc5 	bl	c078 <cmd_complete>
		rp->status = 0x00;
    d0ee:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    d0f0:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    d0f2:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    d0f4:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    d0f6:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    d0f8:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d0fc:	1ca1      	adds	r1, r4, #2
    d0fe:	f7fe ff77 	bl	bff0 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    d102:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    d106:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    d108:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    d10c:	f063 033f 	orn	r3, r3, #63	; 0x3f
    d110:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    d112:	2210      	movs	r2, #16
    d114:	4631      	mov	r1, r6
    d116:	f104 0008 	add.w	r0, r4, #8
    d11a:	e7b0      	b.n	d07e <hci_cmd_handle+0x9da>
	rp = cmd_complete(evt, sizeof(*rp));
    d11c:	2102      	movs	r1, #2
    d11e:	a80b      	add	r0, sp, #44	; 0x2c
    d120:	f7fe ffaa 	bl	c078 <cmd_complete>
	rp->status = 0x00;
    d124:	2300      	movs	r3, #0
    d126:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    d128:	7043      	strb	r3, [r0, #1]
    d12a:	f7ff bb1c 	b.w	c766 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    d12e:	2121      	movs	r1, #33	; 0x21
    d130:	a80b      	add	r0, sp, #44	; 0x2c
    d132:	f7fe ffa1 	bl	c078 <cmd_complete>
	rp->status = 0x00;
    d136:	4603      	mov	r3, r0
    d138:	2200      	movs	r2, #0
    d13a:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    d13e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    d142:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    d144:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    d148:	3101      	adds	r1, #1
    d14a:	d04b      	beq.n	d1e4 <hci_cmd_handle+0xb40>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    d14c:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    d150:	3101      	adds	r1, #1
    d152:	d047      	beq.n	d1e4 <hci_cmd_handle+0xb40>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    d154:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    d158:	3101      	adds	r1, #1
    d15a:	d043      	beq.n	d1e4 <hci_cmd_handle+0xb40>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    d15c:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    d160:	3101      	adds	r1, #1
    d162:	d03f      	beq.n	d1e4 <hci_cmd_handle+0xb40>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    d164:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    d168:	4619      	mov	r1, r3
    d16a:	f7fe ff41 	bl	bff0 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    d16e:	1d61      	adds	r1, r4, #5
    d170:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    d174:	f7fe ff3c 	bl	bff0 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    d178:	f104 0109 	add.w	r1, r4, #9
    d17c:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    d180:	f7fe ff36 	bl	bff0 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    d184:	f104 010d 	add.w	r1, r4, #13
    d188:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    d18c:	f7fe ff30 	bl	bff0 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    d190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    d194:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    d198:	3301      	adds	r3, #1
    d19a:	f104 0311 	add.w	r3, r4, #17
    d19e:	d027      	beq.n	d1f0 <hci_cmd_handle+0xb4c>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    d1a0:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    d1a4:	3101      	adds	r1, #1
    d1a6:	d023      	beq.n	d1f0 <hci_cmd_handle+0xb4c>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    d1a8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    d1ac:	3101      	adds	r1, #1
    d1ae:	d01f      	beq.n	d1f0 <hci_cmd_handle+0xb4c>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    d1b0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    d1b4:	3101      	adds	r1, #1
    d1b6:	d01b      	beq.n	d1f0 <hci_cmd_handle+0xb4c>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    d1b8:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    d1bc:	4619      	mov	r1, r3
    d1be:	f7fe ff17 	bl	bff0 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    d1c2:	f104 0115 	add.w	r1, r4, #21
    d1c6:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    d1ca:	f7fe ff11 	bl	bff0 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    d1ce:	f104 0119 	add.w	r1, r4, #25
    d1d2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    d1d6:	f7fe ff0b 	bl	bff0 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    d1da:	f104 011d 	add.w	r1, r4, #29
    d1de:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    d1e2:	e50a      	b.n	cbfa <hci_cmd_handle+0x556>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    d1e4:	2210      	movs	r2, #16
    d1e6:	2100      	movs	r1, #0
    d1e8:	4618      	mov	r0, r3
    d1ea:	f7f3 fb13 	bl	814 <memset>
    d1ee:	e7cf      	b.n	d190 <hci_cmd_handle+0xaec>
		memset(rp->er, 0x00, sizeof(rp->er));
    d1f0:	2210      	movs	r2, #16
    d1f2:	2100      	movs	r1, #0
    d1f4:	4618      	mov	r0, r3
    d1f6:	e742      	b.n	d07e <hci_cmd_handle+0x9da>
    d1f8:	0002286d 	.word	0x0002286d

0000d1fc <hci_acl_handle>:
{
    d1fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    d200:	2300      	movs	r3, #0
    d202:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    d204:	8983      	ldrh	r3, [r0, #12]
    d206:	2b03      	cmp	r3, #3
{
    d208:	4606      	mov	r6, r0
    d20a:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    d20c:	d803      	bhi.n	d216 <hci_acl_handle+0x1a>
		return -EINVAL;
    d20e:	f06f 0015 	mvn.w	r0, #21
    d212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
    d216:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
    d21a:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
    d21c:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    d21e:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    d220:	f00a fee8 	bl	17ff4 <net_buf_simple_pull>
	if (buf->len < len) {
    d224:	89b3      	ldrh	r3, [r6, #12]
    d226:	42bb      	cmp	r3, r7
    d228:	d3f1      	bcc.n	d20e <hci_acl_handle+0x12>
	node_tx = ll_tx_mem_acquire();
    d22a:	f007 fb2d 	bl	14888 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    d22e:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    d232:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    d234:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    d238:	b9f0      	cbnz	r0, d278 <hci_acl_handle+0x7c>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    d23a:	4b1e      	ldr	r3, [pc, #120]	; (d2b4 <hci_acl_handle+0xb8>)
    d23c:	e9d3 2300 	ldrd	r2, r3, [r3]
    d240:	2300      	movs	r3, #0
    d242:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    d246:	4313      	orrs	r3, r2
    d248:	d012      	beq.n	d270 <hci_acl_handle+0x74>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    d24a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d24e:	2001      	movs	r0, #1
    d250:	f7f8 fb16 	bl	5880 <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    d254:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    d256:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    d25a:	211a      	movs	r1, #26
    d25c:	f7fe fed1 	bl	c002 <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    d260:	f8d8 0000 	ldr.w	r0, [r8]
    d264:	2101      	movs	r1, #1
    d266:	3008      	adds	r0, #8
    d268:	f00a fe74 	bl	17f54 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    d26c:	2301      	movs	r3, #1
    d26e:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    d270:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    d274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d278:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    d27a:	f1b9 0f00 	cmp.w	r9, #0
    d27e:	d002      	beq.n	d286 <hci_acl_handle+0x8a>
    d280:	f1b9 0f02 	cmp.w	r9, #2
    d284:	d113      	bne.n	d2ae <hci_acl_handle+0xb2>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    d286:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d288:	f362 0301 	bfi	r3, r2, #0, #2
    d28c:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
    d28e:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    d290:	68b1      	ldr	r1, [r6, #8]
    d292:	463a      	mov	r2, r7
    d294:	1de0      	adds	r0, r4, #7
    d296:	f7f3 fa91 	bl	7bc <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    d29a:	4621      	mov	r1, r4
    d29c:	4628      	mov	r0, r5
    d29e:	f007 faff 	bl	148a0 <ll_tx_mem_enqueue>
    d2a2:	2800      	cmp	r0, #0
    d2a4:	d0e6      	beq.n	d274 <hci_acl_handle+0x78>
		ll_tx_mem_release(node_tx);
    d2a6:	4620      	mov	r0, r4
    d2a8:	f007 faf4 	bl	14894 <ll_tx_mem_release>
    d2ac:	e7af      	b.n	d20e <hci_acl_handle+0x12>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d2ae:	2201      	movs	r2, #1
    d2b0:	e7ea      	b.n	d288 <hci_acl_handle+0x8c>
    d2b2:	bf00      	nop
    d2b4:	2000e100 	.word	0x2000e100

0000d2b8 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    d2b8:	7a03      	ldrb	r3, [r0, #8]
    d2ba:	f003 0303 	and.w	r3, r3, #3
    d2be:	3b01      	subs	r3, #1
    d2c0:	2b01      	cmp	r3, #1
{
    d2c2:	b570      	push	{r4, r5, r6, lr}
    d2c4:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
    d2c6:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
    d2c8:	d81b      	bhi.n	d302 <hci_acl_encode+0x4a>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    d2ca:	f101 0608 	add.w	r6, r1, #8
    d2ce:	4630      	mov	r0, r6
    d2d0:	2104      	movs	r1, #4
    d2d2:	f00a fe3f 	bl	17f54 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    d2d6:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
    d2d8:	7a61      	ldrb	r1, [r4, #9]
    d2da:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    d2dc:	f003 0303 	and.w	r3, r3, #3
    d2e0:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    d2e2:	bf0c      	ite	eq
    d2e4:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    d2e8:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    d2ec:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
    d2ee:	4630      	mov	r0, r6
    d2f0:	f00a fe30 	bl	17f54 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    d2f4:	7a62      	ldrb	r2, [r4, #9]
    d2f6:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
    d2fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    d2fe:	f7f3 ba5d 	b.w	7bc <memcpy>
		LL_ASSERT(0);
    d302:	4040      	eors	r0, r0
    d304:	f380 8811 	msr	BASEPRI, r0
    d308:	f04f 0004 	mov.w	r0, #4
    d30c:	df02      	svc	2
	...

0000d310 <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    d310:	b5f0      	push	{r4, r5, r6, r7, lr}
    d312:	4604      	mov	r4, r0
    d314:	b08d      	sub	sp, #52	; 0x34
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    d316:	7923      	ldrb	r3, [r4, #4]
	handle = node_rx->hdr.handle;
    d318:	88e6      	ldrh	r6, [r4, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    d31a:	2b01      	cmp	r3, #1
{
    d31c:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    d31e:	f100 0008 	add.w	r0, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    d322:	f000 8125 	beq.w	d570 <hci_evt_encode+0x260>
	switch (node_rx->hdr.type) {
    d326:	3b02      	subs	r3, #2
    d328:	2b0a      	cmp	r3, #10
    d32a:	f200 81e0 	bhi.w	d6ee <hci_evt_encode+0x3de>
    d32e:	e8df f013 	tbh	[pc, r3, lsl #1]
    d332:	000b      	.short	0x000b
    d334:	00110011 	.word	0x00110011
    d338:	004a0016 	.word	0x004a0016
    d33c:	00810064 	.word	0x00810064
    d340:	00bd00a5 	.word	0x00bd00a5
    d344:	00ed00d2 	.word	0x00ed00d2
		le_advertising_report(pdu_data, b, buf);
    d348:	460a      	mov	r2, r1
    d34a:	4621      	mov	r1, r4
    d34c:	f7fe feb6 	bl	c0bc <le_advertising_report>
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    d350:	b00d      	add	sp, #52	; 0x34
    d352:	bdf0      	pop	{r4, r5, r6, r7, pc}
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    d354:	460a      	mov	r2, r1
    d356:	4621      	mov	r1, r4
    d358:	f7ff f8f4 	bl	c544 <le_adv_ext_report.isra.77>
    d35c:	e7f8      	b.n	d350 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d35e:	4bb7      	ldr	r3, [pc, #732]	; (d63c <hci_evt_encode+0x32c>)
    d360:	e9d3 2300 	ldrd	r2, r3, [r3]
    d364:	2200      	movs	r2, #0
    d366:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    d36a:	4313      	orrs	r3, r2
    d36c:	f104 060a 	add.w	r6, r4, #10
    d370:	d007      	beq.n	d382 <hci_evt_encode+0x72>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    d372:	4bb3      	ldr	r3, [pc, #716]	; (d640 <hci_evt_encode+0x330>)
    d374:	e9d3 2300 	ldrd	r2, r3, [r3]
    d378:	2300      	movs	r3, #0
    d37a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d37e:	4313      	orrs	r3, r2
    d380:	d110      	bne.n	d3a4 <hci_evt_encode+0x94>
		addr.type = adv->tx_addr;
    d382:	7a23      	ldrb	r3, [r4, #8]
    d384:	ac0c      	add	r4, sp, #48	; 0x30
    d386:	f3c3 1380 	ubfx	r3, r3, #6, #1
    d38a:	f804 3d24 	strb.w	r3, [r4, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    d38e:	4631      	mov	r1, r6
    d390:	2206      	movs	r2, #6
    d392:	f10d 000d 	add.w	r0, sp, #13
    d396:	f7f3 fa11 	bl	7bc <memcpy>
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    d39a:	a905      	add	r1, sp, #20
    d39c:	4620      	mov	r0, r4
    d39e:	f7ff f895 	bl	c4cc <bt_addr_le_to_str.constprop.79>
    d3a2:	e7d5      	b.n	d350 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    d3a4:	2208      	movs	r2, #8
    d3a6:	2113      	movs	r1, #19
    d3a8:	4628      	mov	r0, r5
    d3aa:	f7fe fe4f 	bl	c04c <meta_evt>
	sep->handle = 0;
    d3ae:	2300      	movs	r3, #0
    d3b0:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    d3b2:	7a23      	ldrb	r3, [r4, #8]
    d3b4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    d3b8:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    d3ba:	2206      	movs	r2, #6
    d3bc:	4631      	mov	r1, r6
    d3be:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    d3c0:	f7f3 f9fc 	bl	7bc <memcpy>
    d3c4:	e7c4      	b.n	d350 <hci_evt_encode+0x40>
			le_conn_complete(cc->status, cc, handle, buf);
    d3c6:	7ae7      	ldrb	r7, [r4, #11]
	if (!status) {
    d3c8:	b93f      	cbnz	r7, d3da <hci_evt_encode+0xca>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
    d3ca:	f104 0314 	add.w	r3, r4, #20
    d3ce:	22ff      	movs	r2, #255	; 0xff
    d3d0:	f104 010e 	add.w	r1, r4, #14
    d3d4:	7b60      	ldrb	r0, [r4, #13]
    d3d6:	f009 fd83 	bl	16ee0 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d3da:	4b98      	ldr	r3, [pc, #608]	; (d63c <hci_evt_encode+0x32c>)
    d3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
    d3e0:	2200      	movs	r2, #0
    d3e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    d3e6:	4313      	orrs	r3, r2
    d3e8:	d0b2      	beq.n	d350 <hci_evt_encode+0x40>
    d3ea:	462b      	mov	r3, r5
    d3ec:	4632      	mov	r2, r6
    d3ee:	f104 010b 	add.w	r1, r4, #11
    d3f2:	4638      	mov	r0, r7
    d3f4:	f7fe ffd4 	bl	c3a0 <le_conn_complete.part.48>
    d3f8:	e7aa      	b.n	d350 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    d3fa:	4b90      	ldr	r3, [pc, #576]	; (d63c <hci_evt_encode+0x32c>)
    d3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    d400:	2300      	movs	r3, #0
    d402:	f002 0210 	and.w	r2, r2, #16
    d406:	4313      	orrs	r3, r2
    d408:	d0a2      	beq.n	d350 <hci_evt_encode+0x40>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    d40a:	2204      	movs	r2, #4
    d40c:	2105      	movs	r1, #5
    d40e:	4628      	mov	r0, r5
    d410:	f7fe fdf7 	bl	c002 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d414:	2104      	movs	r1, #4
    d416:	f105 0008 	add.w	r0, r5, #8
    d41a:	f00a fd9b 	bl	17f54 <net_buf_simple_add>
	ep->status = 0x00;
    d41e:	2300      	movs	r3, #0
	conn_count--;
    d420:	4a88      	ldr	r2, [pc, #544]	; (d644 <hci_evt_encode+0x334>)
	ep->status = 0x00;
    d422:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d424:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    d428:	7a23      	ldrb	r3, [r4, #8]
    d42a:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    d42c:	6813      	ldr	r3, [r2, #0]
    d42e:	3b01      	subs	r3, #1
    d430:	6013      	str	r3, [r2, #0]
    d432:	e78d      	b.n	d350 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d434:	4b81      	ldr	r3, [pc, #516]	; (d63c <hci_evt_encode+0x32c>)
    d436:	e9d3 2300 	ldrd	r2, r3, [r3]
    d43a:	2200      	movs	r2, #0
    d43c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    d440:	4313      	orrs	r3, r2
    d442:	d085      	beq.n	d350 <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    d444:	4b7e      	ldr	r3, [pc, #504]	; (d640 <hci_evt_encode+0x330>)
    d446:	e9d3 2300 	ldrd	r2, r3, [r3]
    d44a:	2300      	movs	r3, #0
    d44c:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d450:	4313      	orrs	r3, r2
    d452:	f43f af7d 	beq.w	d350 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    d456:	2209      	movs	r2, #9
    d458:	2103      	movs	r1, #3
    d45a:	4628      	mov	r0, r5
    d45c:	f7fe fdf6 	bl	c04c <meta_evt>
	sep->status = radio_cu->status;
    d460:	7ae3      	ldrb	r3, [r4, #11]
    d462:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    d464:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
    d466:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    d46a:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    d46e:	89e3      	ldrh	r3, [r4, #14]
    d470:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    d474:	8a23      	ldrh	r3, [r4, #16]
    d476:	f8a0 3007 	strh.w	r3, [r0, #7]
    d47a:	e769      	b.n	d350 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    d47c:	4b6f      	ldr	r3, [pc, #444]	; (d63c <hci_evt_encode+0x32c>)
    d47e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d482:	2200      	movs	r2, #0
    d484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d488:	4313      	orrs	r3, r2
    d48a:	f43f af61 	beq.w	d350 <hci_evt_encode+0x40>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    d48e:	2203      	movs	r2, #3
    d490:	2130      	movs	r1, #48	; 0x30
    d492:	4628      	mov	r0, r5
    d494:	f7fe fdb5 	bl	c002 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d498:	2103      	movs	r1, #3
    d49a:	f105 0008 	add.w	r0, r5, #8
    d49e:	f00a fd59 	bl	17f54 <net_buf_simple_add>
	ep->status = 0x00;
    d4a2:	2300      	movs	r3, #0
    d4a4:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d4a6:	f8a0 6001 	strh.w	r6, [r0, #1]
    d4aa:	e751      	b.n	d350 <hci_evt_encode+0x40>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    d4ac:	4b66      	ldr	r3, [pc, #408]	; (d648 <hci_evt_encode+0x338>)
    d4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    d4b2:	2300      	movs	r3, #0
    d4b4:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    d4b8:	4313      	orrs	r3, r2
    d4ba:	f43f af49 	beq.w	d350 <hci_evt_encode+0x40>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    d4be:	2202      	movs	r2, #2
    d4c0:	2157      	movs	r1, #87	; 0x57
    d4c2:	4628      	mov	r0, r5
    d4c4:	f7fe fd9d 	bl	c002 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d4c8:	2102      	movs	r1, #2
    d4ca:	f105 0008 	add.w	r0, r5, #8
    d4ce:	f00a fd41 	bl	17f54 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    d4d2:	8006      	strh	r6, [r0, #0]
    d4d4:	e73c      	b.n	d350 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d4d6:	4b59      	ldr	r3, [pc, #356]	; (d63c <hci_evt_encode+0x32c>)
    d4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    d4dc:	2200      	movs	r2, #0
    d4de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    d4e2:	4313      	orrs	r3, r2
    d4e4:	f43f af34 	beq.w	d350 <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    d4e8:	4b55      	ldr	r3, [pc, #340]	; (d640 <hci_evt_encode+0x330>)
    d4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    d4ee:	2300      	movs	r3, #0
    d4f0:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d4f4:	4313      	orrs	r3, r2
    d4f6:	f43f af2b 	beq.w	d350 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    d4fa:	2203      	movs	r2, #3
    d4fc:	2114      	movs	r1, #20
    d4fe:	4628      	mov	r0, r5
    d500:	f7fe fda4 	bl	c04c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    d504:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    d506:	7ae3      	ldrb	r3, [r4, #11]
    d508:	7083      	strb	r3, [r0, #2]
    d50a:	e721      	b.n	d350 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d50c:	4b4b      	ldr	r3, [pc, #300]	; (d63c <hci_evt_encode+0x32c>)
    d50e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d512:	2200      	movs	r2, #0
    d514:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    d518:	4313      	orrs	r3, r2
    d51a:	f43f af19 	beq.w	d350 <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    d51e:	4b48      	ldr	r3, [pc, #288]	; (d640 <hci_evt_encode+0x330>)
    d520:	e9d3 2300 	ldrd	r2, r3, [r3]
    d524:	2300      	movs	r3, #0
    d526:	f402 6200 	and.w	r2, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d52a:	4313      	orrs	r3, r2
    d52c:	f43f af10 	beq.w	d350 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    d530:	2205      	movs	r2, #5
    d532:	210c      	movs	r1, #12
    d534:	4628      	mov	r0, r5
    d536:	f7fe fd89 	bl	c04c <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    d53a:	7ae3      	ldrb	r3, [r4, #11]
    d53c:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    d53e:	f8a0 6001 	strh.w	r6, [r0, #1]
    d542:	7b22      	ldrb	r2, [r4, #12]
    d544:	2a00      	cmp	r2, #0
    d546:	fa92 f3a2 	rbit	r3, r2
    d54a:	fab3 f383 	clz	r3, r3
    d54e:	bf08      	it	eq
    d550:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    d554:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    d556:	70c3      	strb	r3, [r0, #3]
    d558:	7b62      	ldrb	r2, [r4, #13]
    d55a:	fa92 f3a2 	rbit	r3, r2
    d55e:	2a00      	cmp	r2, #0
    d560:	fab3 f383 	clz	r3, r3
    d564:	bf08      	it	eq
    d566:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    d56a:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    d56c:	7103      	strb	r3, [r0, #4]
    d56e:	e6ef      	b.n	d350 <hci_evt_encode+0x40>
	switch (pdu_data->llctrl.opcode) {
    d570:	7ae3      	ldrb	r3, [r4, #11]
    d572:	3b03      	subs	r3, #3
    d574:	2b12      	cmp	r3, #18
    d576:	f200 80ba 	bhi.w	d6ee <hci_evt_encode+0x3de>
    d57a:	e8df f003 	tbb	[pc, r3]
    d57e:	b80a      	.short	0xb80a
    d580:	b8af2fb8 	.word	0xb8af2fb8
    d584:	3cb8b835 	.word	0x3cb8b835
    d588:	b867b85b 	.word	0xb867b85b
    d58c:	8fb8b8b8 	.word	0x8fb8b8b8
    d590:	8f          	.byte	0x8f
    d591:	00          	.byte	0x00
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d592:	4b2a      	ldr	r3, [pc, #168]	; (d63c <hci_evt_encode+0x32c>)
    d594:	e9d3 2300 	ldrd	r2, r3, [r3]
    d598:	2200      	movs	r2, #0
    d59a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    d59e:	4313      	orrs	r3, r2
    d5a0:	f43f aed6 	beq.w	d350 <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    d5a4:	4b26      	ldr	r3, [pc, #152]	; (d640 <hci_evt_encode+0x330>)
    d5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    d5aa:	2300      	movs	r3, #0
    d5ac:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d5b0:	4313      	orrs	r3, r2
    d5b2:	f43f aecd 	beq.w	d350 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    d5b6:	220c      	movs	r2, #12
    d5b8:	2105      	movs	r1, #5
    d5ba:	4628      	mov	r0, r5
    d5bc:	f7fe fd46 	bl	c04c <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    d5c0:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    d5c2:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    d5c4:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    d5c8:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    d5cc:	f7f3 f8f6 	bl	7bc <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    d5d0:	2202      	movs	r2, #2
    d5d2:	f104 0114 	add.w	r1, r4, #20
    d5d6:	f105 000a 	add.w	r0, r5, #10
    d5da:	e6f1      	b.n	d3c0 <hci_evt_encode+0xb0>
		encrypt_change(0x00, handle, buf);
    d5dc:	460a      	mov	r2, r1
    d5de:	2000      	movs	r0, #0
    d5e0:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    d5e2:	f7fe fe8f 	bl	c304 <encrypt_change>
    d5e6:	e6b3      	b.n	d350 <hci_evt_encode+0x40>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    d5e8:	460b      	mov	r3, r1
    d5ea:	4632      	mov	r2, r6
    d5ec:	4601      	mov	r1, r0
    d5ee:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    d5f0:	f7fe fea8 	bl	c344 <le_remote_feat_complete>
    d5f4:	e6ac      	b.n	d350 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    d5f6:	4b11      	ldr	r3, [pc, #68]	; (d63c <hci_evt_encode+0x32c>)
    d5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    d5fc:	2300      	movs	r3, #0
    d5fe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    d602:	4313      	orrs	r3, r2
    d604:	f43f aea4 	beq.w	d350 <hci_evt_encode+0x40>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    d608:	2208      	movs	r2, #8
    d60a:	210c      	movs	r1, #12
    d60c:	4628      	mov	r0, r5
    d60e:	f7fe fcf8 	bl	c002 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d612:	2108      	movs	r1, #8
    d614:	1868      	adds	r0, r5, r1
    d616:	f00a fc9d 	bl	17f54 <net_buf_simple_add>
	ep->status = 0x00;
    d61a:	2300      	movs	r3, #0
    d61c:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d61e:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    d622:	7b23      	ldrb	r3, [r4, #12]
    d624:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    d626:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    d62a:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    d62c:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    d630:	80c3      	strh	r3, [r0, #6]
    d632:	e68d      	b.n	d350 <hci_evt_encode+0x40>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    d634:	460a      	mov	r2, r1
    d636:	7b20      	ldrb	r0, [r4, #12]
    d638:	4631      	mov	r1, r6
    d63a:	e7d2      	b.n	d5e2 <hci_evt_encode+0x2d2>
    d63c:	2000e100 	.word	0x2000e100
    d640:	2000e108 	.word	0x2000e108
    d644:	20000b70 	.word	0x20000b70
    d648:	20000c00 	.word	0x20000c00
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d64c:	4b2b      	ldr	r3, [pc, #172]	; (d6fc <hci_evt_encode+0x3ec>)
    d64e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d652:	2200      	movs	r2, #0
    d654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    d658:	4313      	orrs	r3, r2
    d65a:	d007      	beq.n	d66c <hci_evt_encode+0x35c>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    d65c:	4b28      	ldr	r3, [pc, #160]	; (d700 <hci_evt_encode+0x3f0>)
    d65e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d662:	2300      	movs	r3, #0
    d664:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d668:	4313      	orrs	r3, r2
    d66a:	d108      	bne.n	d67e <hci_evt_encode+0x36e>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    d66c:	2300      	movs	r3, #0
    d66e:	9301      	str	r3, [sp, #4]
    d670:	9300      	str	r3, [sp, #0]
    d672:	221a      	movs	r2, #26
    d674:	2102      	movs	r1, #2
    d676:	4630      	mov	r0, r6
    d678:	f006 fe2e 	bl	142d8 <ll_conn_update>
    d67c:	e668      	b.n	d350 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    d67e:	220a      	movs	r2, #10
    d680:	2106      	movs	r1, #6
    d682:	4628      	mov	r0, r5
    d684:	f7fe fce2 	bl	c04c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    d688:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    d68a:	89a3      	ldrh	r3, [r4, #12]
    d68c:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    d68e:	89e3      	ldrh	r3, [r4, #14]
    d690:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    d692:	8a23      	ldrh	r3, [r4, #16]
    d694:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    d696:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    d698:	8103      	strh	r3, [r0, #8]
    d69a:	e659      	b.n	d350 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d69c:	4b17      	ldr	r3, [pc, #92]	; (d6fc <hci_evt_encode+0x3ec>)
    d69e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d6a2:	2200      	movs	r2, #0
    d6a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    d6a8:	4313      	orrs	r3, r2
    d6aa:	f43f ae51 	beq.w	d350 <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    d6ae:	4b14      	ldr	r3, [pc, #80]	; (d700 <hci_evt_encode+0x3f0>)
    d6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    d6b4:	2300      	movs	r3, #0
    d6b6:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d6ba:	4313      	orrs	r3, r2
    d6bc:	f43f ae48 	beq.w	d350 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    d6c0:	220a      	movs	r2, #10
    d6c2:	2107      	movs	r1, #7
    d6c4:	4628      	mov	r0, r5
    d6c6:	f7fe fcc1 	bl	c04c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    d6ca:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    d6cc:	8a23      	ldrh	r3, [r4, #16]
    d6ce:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    d6d0:	8a63      	ldrh	r3, [r4, #18]
    d6d2:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    d6d4:	89a3      	ldrh	r3, [r4, #12]
    d6d6:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    d6d8:	89e3      	ldrh	r3, [r4, #14]
    d6da:	e7dd      	b.n	d698 <hci_evt_encode+0x388>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    d6dc:	7b23      	ldrb	r3, [r4, #12]
    d6de:	2b0e      	cmp	r3, #14
    d6e0:	f47f ae36 	bne.w	d350 <hci_evt_encode+0x40>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    d6e4:	460b      	mov	r3, r1
    d6e6:	4632      	mov	r2, r6
    d6e8:	2100      	movs	r1, #0
    d6ea:	201a      	movs	r0, #26
    d6ec:	e780      	b.n	d5f0 <hci_evt_encode+0x2e0>
		LL_ASSERT(0);
    d6ee:	4040      	eors	r0, r0
    d6f0:	f380 8811 	msr	BASEPRI, r0
    d6f4:	f04f 0004 	mov.w	r0, #4
    d6f8:	df02      	svc	2
    d6fa:	bf00      	nop
    d6fc:	2000e100 	.word	0x2000e100
    d700:	2000e108 	.word	0x2000e108

0000d704 <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    d704:	b570      	push	{r4, r5, r6, lr}
    d706:	4606      	mov	r6, r0
    d708:	460d      	mov	r5, r1
    d70a:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    d70c:	2113      	movs	r1, #19
    d70e:	2205      	movs	r2, #5
    d710:	f7fe fc77 	bl	c002 <evt_create>

	ep = net_buf_add(buf, len);
    d714:	2105      	movs	r1, #5
    d716:	f106 0008 	add.w	r0, r6, #8
    d71a:	f00a fc1b 	bl	17f54 <net_buf_simple_add>
	ep->num_handles = num_handles;
    d71e:	2301      	movs	r3, #1
    d720:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    d722:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    d726:	f8a0 4003 	strh.w	r4, [r0, #3]
    d72a:	bd70      	pop	{r4, r5, r6, pc}

0000d72c <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    d72c:	7903      	ldrb	r3, [r0, #4]
    d72e:	2b01      	cmp	r3, #1
    d730:	d006      	beq.n	d740 <hci_get_class+0x14>
    d732:	3b02      	subs	r3, #2
    d734:	b2db      	uxtb	r3, r3
    d736:	2b0a      	cmp	r3, #10
    d738:	d80a      	bhi.n	d750 <hci_get_class+0x24>
    d73a:	4a07      	ldr	r2, [pc, #28]	; (d758 <hci_get_class+0x2c>)
    d73c:	56d0      	ldrsb	r0, [r2, r3]
    d73e:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    d740:	7a03      	ldrb	r3, [r0, #8]
    d742:	f003 0303 	and.w	r3, r3, #3
    d746:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    d748:	bf0c      	ite	eq
    d74a:	2002      	moveq	r0, #2
    d74c:	2003      	movne	r0, #3
    d74e:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    d750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
    d754:	4770      	bx	lr
    d756:	bf00      	nop
    d758:	00022816 	.word	0x00022816

0000d75c <hci_init>:
	dup_count = -1;
    d75c:	4b0a      	ldr	r3, [pc, #40]	; (d788 <hci_init+0x2c>)
    d75e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d762:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    d764:	4b09      	ldr	r3, [pc, #36]	; (d78c <hci_init+0x30>)
    d766:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d76a:	f641 71ff 	movw	r1, #8191	; 0x1fff
    d76e:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    d772:	4b07      	ldr	r3, [pc, #28]	; (d790 <hci_init+0x34>)
    d774:	2000      	movs	r0, #0
    d776:	2100      	movs	r1, #0
    d778:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    d77c:	4b05      	ldr	r3, [pc, #20]	; (d794 <hci_init+0x38>)
    d77e:	201f      	movs	r0, #31
    d780:	2100      	movs	r1, #0
    d782:	e9c3 0100 	strd	r0, r1, [r3]
    d786:	4770      	bx	lr
    d788:	20000b74 	.word	0x20000b74
    d78c:	2000e100 	.word	0x2000e100
    d790:	20000c00 	.word	0x20000c00
    d794:	2000e108 	.word	0x2000e108

0000d798 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    d798:	bf20      	wfe
	__SEV();
    d79a:	bf40      	sev
	__WFE();
    d79c:	bf20      	wfe
    d79e:	4770      	bx	lr

0000d7a0 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    d7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    d7a2:	4b0d      	ldr	r3, [pc, #52]	; (d7d8 <pdu_len_cmp+0x38>)
{
    d7a4:	b089      	sub	sp, #36	; 0x24
    d7a6:	4605      	mov	r5, r0
    d7a8:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    d7aa:	aa01      	add	r2, sp, #4
    d7ac:	f103 0718 	add.w	r7, r3, #24
    d7b0:	6818      	ldr	r0, [r3, #0]
    d7b2:	6859      	ldr	r1, [r3, #4]
    d7b4:	4614      	mov	r4, r2
    d7b6:	c403      	stmia	r4!, {r0, r1}
    d7b8:	3308      	adds	r3, #8
    d7ba:	42bb      	cmp	r3, r7
    d7bc:	4622      	mov	r2, r4
    d7be:	d1f7      	bne.n	d7b0 <pdu_len_cmp+0x10>
    d7c0:	881b      	ldrh	r3, [r3, #0]
    d7c2:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    d7c4:	ab08      	add	r3, sp, #32
    d7c6:	441d      	add	r5, r3
    d7c8:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    d7cc:	1b83      	subs	r3, r0, r6
    d7ce:	4258      	negs	r0, r3
    d7d0:	4158      	adcs	r0, r3
    d7d2:	b009      	add	sp, #36	; 0x24
    d7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d7d6:	bf00      	nop
    d7d8:	00021899 	.word	0x00021899

0000d7dc <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    d7dc:	6008      	str	r0, [r1, #0]
    d7de:	4770      	bx	lr

0000d7e0 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    d7e0:	b918      	cbnz	r0, d7ea <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    d7e2:	680b      	ldr	r3, [r1, #0]
    d7e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d7e8:	600b      	str	r3, [r1, #0]
    d7ea:	4770      	bx	lr

0000d7ec <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    d7ec:	b918      	cbnz	r0, d7f6 <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    d7ee:	680b      	ldr	r3, [r1, #0]
    d7f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    d7f4:	600b      	str	r3, [r1, #0]
    d7f6:	4770      	bx	lr

0000d7f8 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    d7f8:	b570      	push	{r4, r5, r6, lr}
    d7fa:	1d03      	adds	r3, r0, #4
    d7fc:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    d7fe:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    d800:	429d      	cmp	r5, r3
    d802:	d101      	bne.n	d808 <chan_sel_remap+0x10>
    d804:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    d806:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    d808:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    d80c:	2200      	movs	r2, #0
    d80e:	18a0      	adds	r0, r4, r2
    d810:	2a08      	cmp	r2, #8
    d812:	b2c0      	uxtb	r0, r0
    d814:	d101      	bne.n	d81a <chan_sel_remap+0x22>
    d816:	4604      	mov	r4, r0
    d818:	e7f2      	b.n	d800 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    d81a:	f016 0f01 	tst.w	r6, #1
    d81e:	d003      	beq.n	d828 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    d820:	2900      	cmp	r1, #0
    d822:	d0f0      	beq.n	d806 <chan_sel_remap+0xe>
				chan_index--;
    d824:	3901      	subs	r1, #1
    d826:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    d828:	0876      	lsrs	r6, r6, #1
    d82a:	3201      	adds	r2, #1
    d82c:	e7ef      	b.n	d80e <chan_sel_remap+0x16>
	...

0000d830 <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    d830:	4b09      	ldr	r3, [pc, #36]	; (d858 <packet_rx_acquired_count_get+0x28>)
    d832:	f893 0d2a 	ldrb.w	r0, [r3, #3370]	; 0xd2a
	    _radio.packet_rx_last) {
    d836:	f893 2d29 	ldrb.w	r2, [r3, #3369]	; 0xd29
	if (_radio.packet_rx_acquire >=
    d83a:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    d83c:	bf3b      	ittet	cc
    d83e:	f893 2d29 	ldrbcc.w	r2, [r3, #3369]	; 0xd29
    d842:	f893 3d28 	ldrbcc.w	r3, [r3, #3368]	; 0xd28
			_radio.packet_rx_last);
    d846:	f893 3d29 	ldrbcs.w	r3, [r3, #3369]	; 0xd29
			_radio.packet_rx_last +
    d84a:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    d84c:	bf2c      	ite	cs
    d84e:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    d850:	1a80      	subcc	r0, r0, r2
    d852:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
    d854:	4770      	bx	lr
    d856:	bf00      	nop
    d858:	20000c08 	.word	0x20000c08

0000d85c <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    d85c:	b508      	push	{r3, lr}
    d85e:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    d860:	f7ff ffe6 	bl	d830 <packet_rx_acquired_count_get>
    d864:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    d866:	bf21      	itttt	cs
    d868:	4b04      	ldrcs	r3, [pc, #16]	; (d87c <packet_rx_reserve_get+0x20>)
    d86a:	f893 2d29 	ldrbcs.w	r2, [r3, #3369]	; 0xd29
    d86e:	f8d3 3d24 	ldrcs.w	r3, [r3, #3364]	; 0xd24
    d872:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
		return 0;
    d876:	bf38      	it	cc
    d878:	2000      	movcc	r0, #0
}
    d87a:	bd08      	pop	{r3, pc}
    d87c:	20000c08 	.word	0x20000c08

0000d880 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    d880:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    d882:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    d886:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
    d88a:	429c      	cmp	r4, r3
    d88c:	d15a      	bne.n	d944 <conn_update_req+0xc4>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
    d88e:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    d892:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    d896:	428b      	cmp	r3, r1
    d898:	d154      	bne.n	d944 <conn_update_req+0xc4>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    d89a:	f990 301d 	ldrsb.w	r3, [r0, #29]
    d89e:	2b00      	cmp	r3, #0
    d8a0:	db25      	blt.n	d8ee <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    d8a2:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    d8a4:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    d8a6:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    d8aa:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    d8ac:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    d8b0:	4351      	muls	r1, r2
					      conn->supervision_reload *
    d8b2:	227d      	movs	r2, #125	; 0x7d
    d8b4:	434a      	muls	r2, r1
					      125 / 1000;
    d8b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    d8ba:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    d8be:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    d8c2:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
    d8c6:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    d8c8:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    d8cc:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    d8ce:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    d8d0:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    d8d4:	3c01      	subs	r4, #1
		conn->llcp.conn_upd.win_size = 1;
    d8d6:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    d8da:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
    d8de:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    d8e2:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
    d8e6:	f880 4075 	strb.w	r4, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
    d8ea:	4618      	mov	r0, r3
    d8ec:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
    d8ee:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    d8f2:	06dc      	lsls	r4, r3, #27
    d8f4:	d428      	bmi.n	d948 <conn_update_req+0xc8>
		   (!conn->common.fex_valid ||
    d8f6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
    d8fa:	069a      	lsls	r2, r3, #26
    d8fc:	d503      	bpl.n	d906 <conn_update_req+0x86>
		    (conn->llcp_features &
    d8fe:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
    d902:	079b      	lsls	r3, r3, #30
    d904:	d520      	bpl.n	d948 <conn_update_req+0xc8>
		conn->llcp_conn_param.latency = conn->latency;
    d906:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval = conn->conn_interval;
    d908:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
    d90a:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
						conn->supervision_reload *
    d90e:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval = conn->conn_interval;
    d910:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    d914:	4354      	muls	r4, r2
						conn->supervision_reload *
    d916:	227d      	movs	r2, #125	; 0x7d
    d918:	4362      	muls	r2, r4
						125 / 1000;
    d91a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    d91e:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    d922:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
    d926:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
    d92a:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
    d92c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    d930:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
    d934:	3901      	subs	r1, #1
		conn->llcp_conn_param.status = 0;
    d936:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
    d93a:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
    d93e:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    d942:	e7d2      	b.n	d8ea <conn_update_req+0x6a>
		return 1;
    d944:	2001      	movs	r0, #1
    d946:	bd30      	pop	{r4, r5, pc}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    d948:	2002      	movs	r0, #2
}
    d94a:	bd30      	pop	{r4, r5, pc}

0000d94c <packet_rx_allocate>:
{
    d94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    d950:	4d22      	ldr	r5, [pc, #136]	; (d9dc <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    d952:	f895 4d2a 	ldrb.w	r4, [r5, #3370]	; 0xd2a
    d956:	f895 9d3c 	ldrb.w	r9, [r5, #3388]	; 0xd3c
	if (acquire == _radio.packet_rx_count) {
    d95a:	f895 3d28 	ldrb.w	r3, [r5, #3368]	; 0xd28
	acquire = _radio.packet_rx_acquire + 1;
    d95e:	3401      	adds	r4, #1
    d960:	4581      	cmp	r9, r0
    d962:	b2e4      	uxtb	r4, r4
    d964:	bf28      	it	cs
    d966:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    d968:	f505 6753 	add.w	r7, r5, #3376	; 0xd30
		acquire = 0;
    d96c:	42a3      	cmp	r3, r4
    d96e:	bf08      	it	eq
    d970:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    d972:	f605 5818 	addw	r8, r5, #3352	; 0xd18
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    d976:	f1b9 0f00 	cmp.w	r9, #0
    d97a:	d003      	beq.n	d984 <packet_rx_allocate+0x38>
    d97c:	f895 3d29 	ldrb.w	r3, [r5, #3369]	; 0xd29
    d980:	429c      	cmp	r4, r3
    d982:	d101      	bne.n	d988 <packet_rx_allocate+0x3c>
    d984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    d988:	4638      	mov	r0, r7
    d98a:	f7fd f9c6 	bl	ad1a <mem_acquire>
		if (!link) {
    d98e:	4606      	mov	r6, r0
    d990:	2800      	cmp	r0, #0
    d992:	d0f7      	beq.n	d984 <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    d994:	4640      	mov	r0, r8
    d996:	f7fd f9c0 	bl	ad1a <mem_acquire>
		if (!node_rx) {
    d99a:	b928      	cbnz	r0, d9a8 <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    d99c:	4630      	mov	r0, r6
    d99e:	4910      	ldr	r1, [pc, #64]	; (d9e0 <packet_rx_allocate+0x94>)
}
    d9a0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    d9a4:	f7fd b9d3 	b.w	ad4e <mem_release>
		node_rx->hdr.onion.link = link;
    d9a8:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    d9aa:	f895 2d2a 	ldrb.w	r2, [r5, #3370]	; 0xd2a
    d9ae:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
    d9b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    d9b6:	f885 4d2a 	strb.w	r4, [r5, #3370]	; 0xd2a
		if (acquire == _radio.packet_rx_count) {
    d9ba:	f895 3d28 	ldrb.w	r3, [r5, #3368]	; 0xd28
		acquire = _radio.packet_rx_acquire + 1;
    d9be:	3401      	adds	r4, #1
    d9c0:	b2e4      	uxtb	r4, r4
			acquire = 0;
    d9c2:	42a3      	cmp	r3, r4
    d9c4:	bf08      	it	eq
    d9c6:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    d9c8:	f895 3d3c 	ldrb.w	r3, [r5, #3388]	; 0xd3c
    d9cc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    d9d0:	3b01      	subs	r3, #1
    d9d2:	f885 3d3c 	strb.w	r3, [r5, #3388]	; 0xd3c
    d9d6:	fa5f f989 	uxtb.w	r9, r9
    d9da:	e7cc      	b.n	d976 <packet_rx_allocate+0x2a>
    d9dc:	20000c08 	.word	0x20000c08
    d9e0:	20001938 	.word	0x20001938

0000d9e4 <common_init>:
{
    d9e4:	b510      	push	{r4, lr}
	if (_radio.connection_count) {
    d9e6:	4c34      	ldr	r4, [pc, #208]	; (dab8 <common_init+0xd4>)
    d9e8:	f894 2cf8 	ldrb.w	r2, [r4, #3320]	; 0xcf8
    d9ec:	2a00      	cmp	r2, #0
    d9ee:	d037      	beq.n	da60 <common_init+0x7c>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    d9f0:	f604 43f4 	addw	r3, r4, #3316	; 0xcf4
    d9f4:	f44f 71aa 	mov.w	r1, #340	; 0x154
    d9f8:	f8d4 0cf0 	ldr.w	r0, [r4, #3312]	; 0xcf0
    d9fc:	f7fd f966 	bl	accc <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    da00:	4b2e      	ldr	r3, [pc, #184]	; (dabc <common_init+0xd8>)
    da02:	f894 2d22 	ldrb.w	r2, [r4, #3362]	; 0xd22
    da06:	f8b4 1d20 	ldrh.w	r1, [r4, #3360]	; 0xd20
    da0a:	f8d4 0d14 	ldr.w	r0, [r4, #3348]	; 0xd14
    da0e:	f7fd f95d 	bl	accc <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    da12:	f894 1d28 	ldrb.w	r1, [r4, #3368]	; 0xd28
    da16:	f894 2cf8 	ldrb.w	r2, [r4, #3320]	; 0xcf8
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    da1a:	4b29      	ldr	r3, [pc, #164]	; (dac0 <common_init+0xdc>)
    da1c:	f8d4 0d2c 	ldr.w	r0, [r4, #3372]	; 0xd2c
    da20:	440a      	add	r2, r1
    da22:	2108      	movs	r1, #8
    da24:	f7fd f952 	bl	accc <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    da28:	4b26      	ldr	r3, [pc, #152]	; (dac4 <common_init+0xe0>)
    da2a:	f8d4 0d40 	ldr.w	r0, [r4, #3392]	; 0xd40
    da2e:	2202      	movs	r2, #2
    da30:	2124      	movs	r1, #36	; 0x24
    da32:	f7fd f94b 	bl	accc <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    da36:	f894 2d5c 	ldrb.w	r2, [r4, #3420]	; 0xd5c
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    da3a:	f8d4 0d48 	ldr.w	r0, [r4, #3400]	; 0xd48
    da3e:	4b22      	ldr	r3, [pc, #136]	; (dac8 <common_init+0xe4>)
    da40:	f8b4 1d50 	ldrh.w	r1, [r4, #3408]	; 0xd50
    da44:	3a01      	subs	r2, #1
    da46:	b292      	uxth	r2, r2
    da48:	f7fd f940 	bl	accc <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    da4c:	481c      	ldr	r0, [pc, #112]	; (dac0 <common_init+0xdc>)
    da4e:	f7fd f964 	bl	ad1a <mem_acquire>
	LL_ASSERT(link);
    da52:	b940      	cbnz	r0, da66 <common_init+0x82>
    da54:	4040      	eors	r0, r0
    da56:	f380 8811 	msr	BASEPRI, r0
    da5a:	f04f 0004 	mov.w	r0, #4
    da5e:	df02      	svc	2
		_radio.conn_free = NULL;
    da60:	f8c4 2cf4 	str.w	r2, [r4, #3316]	; 0xcf4
    da64:	e7cc      	b.n	da00 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    da66:	4a19      	ldr	r2, [pc, #100]	; (dacc <common_init+0xe8>)
    da68:	1f11      	subs	r1, r2, #4
    da6a:	f7fd f9ad 	bl	adc8 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    da6e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    da72:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    da76:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[4] = 0x1F;
    da7a:	231f      	movs	r3, #31
    da7c:	f884 3d06 	strb.w	r3, [r4, #3334]	; 0xd06
	_radio.data_chan_count = 37;
    da80:	2325      	movs	r3, #37	; 0x25
    da82:	f884 3d07 	strb.w	r3, [r4, #3335]	; 0xd07
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    da86:	231b      	movs	r3, #27
    da88:	f8a4 3d0a 	strh.w	r3, [r4, #3338]	; 0xd0a
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    da8c:	f44f 73a4 	mov.w	r3, #328	; 0x148
	_radio.data_chan_map[0] = 0xFF;
    da90:	20ff      	movs	r0, #255	; 0xff
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    da92:	f8a4 3d0c 	strh.w	r3, [r4, #3340]	; 0xd0c
	_radio.default_phy_tx |= BIT(2);
    da96:	2307      	movs	r3, #7
	_radio.data_chan_map[0] = 0xFF;
    da98:	f884 0d02 	strb.w	r0, [r4, #3330]	; 0xd02
	_radio.data_chan_map[1] = 0xFF;
    da9c:	f884 0d03 	strb.w	r0, [r4, #3331]	; 0xd03
	_radio.data_chan_map[2] = 0xFF;
    daa0:	f884 0d04 	strb.w	r0, [r4, #3332]	; 0xd04
	_radio.data_chan_map[3] = 0xFF;
    daa4:	f884 0d05 	strb.w	r0, [r4, #3333]	; 0xd05
	_radio.default_phy_tx |= BIT(2);
    daa8:	f8a4 3d0e 	strh.w	r3, [r4, #3342]	; 0xd0e
	_radio.default_phy_rx |= BIT(2);
    daac:	f8a4 3d10 	strh.w	r3, [r4, #3344]	; 0xd10
}
    dab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    dab4:	f7ff bf4a 	b.w	d94c <packet_rx_allocate>
    dab8:	20000c08 	.word	0x20000c08
    dabc:	20001920 	.word	0x20001920
    dac0:	20001938 	.word	0x20001938
    dac4:	2000194c 	.word	0x2000194c
    dac8:	20001954 	.word	0x20001954
    dacc:	20001940 	.word	0x20001940

0000dad0 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    dad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    dad4:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    dad6:	4294      	cmp	r4, r2
{
    dad8:	4681      	mov	r9, r0
    dada:	460f      	mov	r7, r1
    dadc:	4690      	mov	r8, r2
	if (_first == last) {
    dade:	d03d      	beq.n	db5c <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    dae0:	4e1f      	ldr	r6, [pc, #124]	; (db60 <tx_cmplt_get+0x90>)
    dae2:	f8d6 3d58 	ldr.w	r3, [r6, #3416]	; 0xd58
    dae6:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    daea:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    daec:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    daee:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    daf2:	f606 5a4c 	addw	sl, r6, #3404	; 0xd4c
		if (*handle != _radio.pkt_release[_first].handle) {
    daf6:	b222      	sxth	r2, r4
    daf8:	f8d6 0d58 	ldr.w	r0, [r6, #3416]	; 0xd58
    dafc:	f8b9 e000 	ldrh.w	lr, [r9]
    db00:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    db04:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    db08:	4596      	cmp	lr, r2
    db0a:	d120      	bne.n	db4e <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    db0c:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    db0e:	2801      	cmp	r0, #1
    db10:	f020 0303 	bic.w	r3, r0, #3
    db14:	d90a      	bls.n	db2c <tx_cmplt_get+0x5c>
    db16:	b1f3      	cbz	r3, db56 <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    db18:	1d02      	adds	r2, r0, #4
    db1a:	d01c      	beq.n	db56 <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    db1c:	7942      	ldrb	r2, [r0, #5]
    db1e:	b1d2      	cbz	r2, db56 <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    db20:	7902      	ldrb	r2, [r0, #4]
    db22:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    db26:	3a01      	subs	r2, #1
    db28:	2a01      	cmp	r2, #1
    db2a:	d814      	bhi.n	db56 <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    db2c:	2201      	movs	r2, #1
			cmplt++;
    db2e:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    db30:	604a      	str	r2, [r1, #4]
			cmplt++;
    db32:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    db34:	b113      	cbz	r3, db3c <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    db36:	4651      	mov	r1, sl
    db38:	f7fd f909 	bl	ad4e <mem_release>
		}

		_first = _first + 1;
    db3c:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    db3e:	f896 2d5c 	ldrb.w	r2, [r6, #3420]	; 0xd5c
		_first = _first + 1;
    db42:	b2e4      	uxtb	r4, r4
			_first = 0;
    db44:	42a2      	cmp	r2, r4
    db46:	bf08      	it	eq
    db48:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    db4a:	4544      	cmp	r4, r8
    db4c:	d1d3      	bne.n	daf6 <tx_cmplt_get+0x26>

	*first = _first;
    db4e:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    db50:	4628      	mov	r0, r5
    db52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    db56:	f8c1 b004 	str.w	fp, [r1, #4]
    db5a:	e7eb      	b.n	db34 <tx_cmplt_get+0x64>
		return 0;
    db5c:	2500      	movs	r5, #0
    db5e:	e7f7      	b.n	db50 <tx_cmplt_get+0x80>
    db60:	20000c08 	.word	0x20000c08

0000db64 <connection_get>:
{
    db64:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    db66:	4b09      	ldr	r3, [pc, #36]	; (db8c <connection_get+0x28>)
    db68:	f893 2cf8 	ldrb.w	r2, [r3, #3320]	; 0xcf8
    db6c:	4282      	cmp	r2, r0
{
    db6e:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    db70:	d90a      	bls.n	db88 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    db72:	4602      	mov	r2, r0
    db74:	f44f 71aa 	mov.w	r1, #340	; 0x154
    db78:	f8d3 0cf0 	ldr.w	r0, [r3, #3312]	; 0xcf0
    db7c:	f7fd f902 	bl	ad84 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    db80:	b110      	cbz	r0, db88 <connection_get+0x24>
    db82:	8c03      	ldrh	r3, [r0, #32]
    db84:	42a3      	cmp	r3, r4
    db86:	d000      	beq.n	db8a <connection_get+0x26>
	return 0;
    db88:	2000      	movs	r0, #0
}
    db8a:	bd10      	pop	{r4, pc}
    db8c:	20000c08 	.word	0x20000c08

0000db90 <role_disable>:
{
    db90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db94:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    db96:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    db98:	2805      	cmp	r0, #5
{
    db9a:	4605      	mov	r5, r0
    db9c:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    db9e:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    dba0:	d00e      	beq.n	dbc0 <role_disable+0x30>
    dba2:	2806      	cmp	r0, #6
    dba4:	f000 808e 	beq.w	dcc4 <role_disable+0x134>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    dba8:	f240 8086 	bls.w	dcb8 <role_disable+0x128>
			conn_handle = ticker_id_primary -
    dbac:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    dbae:	b280      	uxth	r0, r0
    dbb0:	f7ff ffd8 	bl	db64 <connection_get>
			if (!conn) {
    dbb4:	2800      	cmp	r0, #0
    dbb6:	f000 80d9 	beq.w	dd6c <role_disable+0x1dc>
			ticks_active_to_start =
    dbba:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    dbbe:	e010      	b.n	dbe2 <role_disable+0x52>
		ticks_xtal_to_start =
    dbc0:	4b6b      	ldr	r3, [pc, #428]	; (dd70 <role_disable+0x1e0>)
    dbc2:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    dbc4:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    dbc8:	ab02      	add	r3, sp, #8
    dbca:	9300      	str	r3, [sp, #0]
    dbcc:	460a      	mov	r2, r1
    dbce:	4b69      	ldr	r3, [pc, #420]	; (dd74 <role_disable+0x1e4>)
    dbd0:	2103      	movs	r1, #3
    dbd2:	2000      	movs	r0, #0
    dbd4:	f7fd ffb4 	bl	bb40 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    dbd8:	2802      	cmp	r0, #2
    dbda:	d066      	beq.n	dcaa <role_disable+0x11a>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    dbdc:	9b02      	ldr	r3, [sp, #8]
    dbde:	2b00      	cmp	r3, #0
    dbe0:	d167      	bne.n	dcb2 <role_disable+0x122>
	LL_ASSERT(!_radio.ticker_id_stop);
    dbe2:	4c63      	ldr	r4, [pc, #396]	; (dd70 <role_disable+0x1e0>)
    dbe4:	7ca3      	ldrb	r3, [r4, #18]
    dbe6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    dbea:	2b00      	cmp	r3, #0
    dbec:	d164      	bne.n	dcb8 <role_disable+0x128>
	ret_cb = TICKER_STATUS_BUSY;
    dbee:	ab06      	add	r3, sp, #24
    dbf0:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    dbf2:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    dbf4:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    dbf8:	2103      	movs	r1, #3
    dbfa:	9300      	str	r3, [sp, #0]
    dbfc:	462a      	mov	r2, r5
    dbfe:	4b5d      	ldr	r3, [pc, #372]	; (dd74 <role_disable+0x1e4>)
    dc00:	f7fd ff9e 	bl	bb40 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    dc04:	2802      	cmp	r0, #2
    dc06:	d063      	beq.n	dcd0 <role_disable+0x140>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    dc08:	9b02      	ldr	r3, [sp, #8]
    dc0a:	2b00      	cmp	r3, #0
    dc0c:	d145      	bne.n	dc9a <role_disable+0x10a>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    dc0e:	7c23      	ldrb	r3, [r4, #16]
    dc10:	429d      	cmp	r5, r3
    dc12:	d002      	beq.n	dc1a <role_disable+0x8a>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    dc14:	7c63      	ldrb	r3, [r4, #17]
    dc16:	429d      	cmp	r5, r3
    dc18:	d13b      	bne.n	dc92 <role_disable+0x102>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    dc1a:	ab06      	add	r3, sp, #24
    dc1c:	2202      	movs	r2, #2
    dc1e:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    dc22:	2200      	movs	r2, #0
    dc24:	9300      	str	r3, [sp, #0]
    dc26:	2103      	movs	r1, #3
    dc28:	4b52      	ldr	r3, [pc, #328]	; (dd74 <role_disable+0x1e4>)
    dc2a:	4610      	mov	r0, r2
    dc2c:	f7fd ff88 	bl	bb40 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    dc30:	2802      	cmp	r0, #2
    dc32:	d107      	bne.n	dc44 <role_disable+0xb4>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    dc34:	2201      	movs	r2, #1
    dc36:	4611      	mov	r1, r2
    dc38:	2003      	movs	r0, #3
    dc3a:	f7fd f911 	bl	ae60 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    dc3e:	9b03      	ldr	r3, [sp, #12]
    dc40:	2b02      	cmp	r3, #2
    dc42:	d039      	beq.n	dcb8 <role_disable+0x128>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    dc44:	9803      	ldr	r0, [sp, #12]
    dc46:	2800      	cmp	r0, #0
    dc48:	d15e      	bne.n	dd08 <role_disable+0x178>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    dc4a:	2302      	movs	r3, #2
    dc4c:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    dc4e:	7c23      	ldrb	r3, [r4, #16]
    dc50:	2b00      	cmp	r3, #0
    dc52:	d031      	beq.n	dcb8 <role_disable+0x128>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    dc54:	ab04      	add	r3, sp, #16
    dc56:	9300      	str	r3, [sp, #0]
    dc58:	2201      	movs	r2, #1
    dc5a:	4b46      	ldr	r3, [pc, #280]	; (dd74 <role_disable+0x1e4>)
		_radio.ticker_id_prepare = 0;
    dc5c:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    dc5e:	2103      	movs	r1, #3
    dc60:	f7fd ff6e 	bl	bb40 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    dc64:	2802      	cmp	r0, #2
    dc66:	d107      	bne.n	dc78 <role_disable+0xe8>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    dc68:	2201      	movs	r2, #1
    dc6a:	4611      	mov	r1, r2
    dc6c:	2003      	movs	r0, #3
    dc6e:	f7fd f8f7 	bl	ae60 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    dc72:	9b04      	ldr	r3, [sp, #16]
    dc74:	2b02      	cmp	r3, #2
    dc76:	d01f      	beq.n	dcb8 <role_disable+0x128>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    dc78:	9a04      	ldr	r2, [sp, #16]
    dc7a:	2a00      	cmp	r2, #0
    dc7c:	d136      	bne.n	dcec <role_disable+0x15c>
			ticks_xtal_to_start &= ~XON_BITMASK;
    dc7e:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    dc82:	45b0      	cmp	r8, r6
    dc84:	d93e      	bls.n	dd04 <role_disable+0x174>
				ret = mayfly_enqueue(
    dc86:	4b3c      	ldr	r3, [pc, #240]	; (dd78 <role_disable+0x1e8>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    dc88:	4611      	mov	r1, r2
    dc8a:	2003      	movs	r0, #3
    dc8c:	f7fd f910 	bl	aeb0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    dc90:	b990      	cbnz	r0, dcb8 <role_disable+0x128>
	if (!_radio.ticker_id_stop) {
    dc92:	7ca3      	ldrb	r3, [r4, #18]
    dc94:	b90b      	cbnz	r3, dc9a <role_disable+0x10a>
		ret_cb = TICKER_STATUS_FAILURE;
    dc96:	2301      	movs	r3, #1
    dc98:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    dc9a:	2300      	movs	r3, #0
    dc9c:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    dc9e:	9802      	ldr	r0, [sp, #8]
}
    dca0:	b006      	add	sp, #24
    dca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				cpu_sleep();
    dca6:	f7ff fd77 	bl	d798 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    dcaa:	9b02      	ldr	r3, [sp, #8]
    dcac:	2b02      	cmp	r3, #2
    dcae:	d0fa      	beq.n	dca6 <role_disable+0x116>
    dcb0:	e794      	b.n	dbdc <role_disable+0x4c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    dcb2:	9b02      	ldr	r3, [sp, #8]
    dcb4:	2b01      	cmp	r3, #1
    dcb6:	d094      	beq.n	dbe2 <role_disable+0x52>
		LL_ASSERT(0);
    dcb8:	4040      	eors	r0, r0
    dcba:	f380 8811 	msr	BASEPRI, r0
    dcbe:	f04f 0004 	mov.w	r0, #4
    dcc2:	df02      	svc	2
		ticks_xtal_to_start =
    dcc4:	4b2a      	ldr	r3, [pc, #168]	; (dd70 <role_disable+0x1e0>)
    dcc6:	f8d3 6c1c 	ldr.w	r6, [r3, #3100]	; 0xc1c
		ticks_active_to_start =
    dcca:	f8d3 8c20 	ldr.w	r8, [r3, #3104]	; 0xc20
		break;
    dcce:	e788      	b.n	dbe2 <role_disable+0x52>
		if (_radio.ticker_id_event == ticker_id_primary) {
    dcd0:	7c63      	ldrb	r3, [r4, #17]
    dcd2:	429d      	cmp	r5, r3
    dcd4:	d104      	bne.n	dce0 <role_disable+0x150>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    dcd6:	2201      	movs	r2, #1
    dcd8:	4611      	mov	r1, r2
    dcda:	2003      	movs	r0, #3
    dcdc:	f7fd f8c0 	bl	ae60 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    dce0:	9b02      	ldr	r3, [sp, #8]
    dce2:	2b02      	cmp	r3, #2
    dce4:	d190      	bne.n	dc08 <role_disable+0x78>
			cpu_sleep();
    dce6:	f7ff fd57 	bl	d798 <cpu_sleep>
    dcea:	e7f9      	b.n	dce0 <role_disable+0x150>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    dcec:	9b04      	ldr	r3, [sp, #16]
    dcee:	2b01      	cmp	r3, #1
    dcf0:	d1e2      	bne.n	dcb8 <role_disable+0x128>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    dcf2:	2200      	movs	r2, #0
    dcf4:	4611      	mov	r1, r2
    dcf6:	4b20      	ldr	r3, [pc, #128]	; (dd78 <role_disable+0x1e8>)
    dcf8:	2003      	movs	r0, #3
    dcfa:	f7fd f8d9 	bl	aeb0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    dcfe:	4602      	mov	r2, r0
    dd00:	2800      	cmp	r0, #0
    dd02:	d1d9      	bne.n	dcb8 <role_disable+0x128>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    dd04:	4b1d      	ldr	r3, [pc, #116]	; (dd7c <role_disable+0x1ec>)
    dd06:	e7bf      	b.n	dc88 <role_disable+0xf8>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    dd08:	9d03      	ldr	r5, [sp, #12]
    dd0a:	2d01      	cmp	r5, #1
    dd0c:	d1d4      	bne.n	dcb8 <role_disable+0x128>
		if (ticker_id_stop != TICKER_NULL) {
    dd0e:	2fff      	cmp	r7, #255	; 0xff
    dd10:	d019      	beq.n	dd46 <role_disable+0x1b6>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    dd12:	ab06      	add	r3, sp, #24
    dd14:	2202      	movs	r2, #2
    dd16:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    dd1a:	2103      	movs	r1, #3
    dd1c:	9300      	str	r3, [sp, #0]
    dd1e:	463a      	mov	r2, r7
    dd20:	4b14      	ldr	r3, [pc, #80]	; (dd74 <role_disable+0x1e4>)
    dd22:	2000      	movs	r0, #0
    dd24:	f7fd ff0c 	bl	bb40 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    dd28:	2802      	cmp	r0, #2
    dd2a:	d107      	bne.n	dd3c <role_disable+0x1ac>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    dd2c:	462a      	mov	r2, r5
    dd2e:	4629      	mov	r1, r5
    dd30:	2003      	movs	r0, #3
    dd32:	f7fd f895 	bl	ae60 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    dd36:	9b05      	ldr	r3, [sp, #20]
    dd38:	2b02      	cmp	r3, #2
    dd3a:	d0bd      	beq.n	dcb8 <role_disable+0x128>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    dd3c:	9b05      	ldr	r3, [sp, #20]
    dd3e:	b113      	cbz	r3, dd46 <role_disable+0x1b6>
    dd40:	9b05      	ldr	r3, [sp, #20]
    dd42:	2b01      	cmp	r3, #1
    dd44:	d1b8      	bne.n	dcb8 <role_disable+0x128>
		if (_radio.role != ROLE_NONE) {
    dd46:	7ce3      	ldrb	r3, [r4, #19]
    dd48:	2b00      	cmp	r3, #0
    dd4a:	d0a2      	beq.n	dc92 <role_disable+0x102>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    dd4c:	4b0c      	ldr	r3, [pc, #48]	; (dd80 <role_disable+0x1f0>)
    dd4e:	2204      	movs	r2, #4
    dd50:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    dd52:	2200      	movs	r2, #0
    dd54:	4611      	mov	r1, r2
    dd56:	2003      	movs	r0, #3
    dd58:	f7fd f8aa 	bl	aeb0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    dd5c:	2800      	cmp	r0, #0
    dd5e:	d1ab      	bne.n	dcb8 <role_disable+0x128>
			while (_radio.role != ROLE_NONE) {
    dd60:	7ce3      	ldrb	r3, [r4, #19]
    dd62:	2b00      	cmp	r3, #0
    dd64:	d095      	beq.n	dc92 <role_disable+0x102>
				cpu_sleep();
    dd66:	f7ff fd17 	bl	d798 <cpu_sleep>
    dd6a:	e7f9      	b.n	dd60 <role_disable+0x1d0>
				return 1;
    dd6c:	2001      	movs	r0, #1
    dd6e:	e797      	b.n	dca0 <role_disable+0x110>
    dd70:	20000c08 	.word	0x20000c08
    dd74:	0000d7dd 	.word	0x0000d7dd
    dd78:	2000e150 	.word	0x2000e150
    dd7c:	2000e210 	.word	0x2000e210
    dd80:	2000e180 	.word	0x2000e180

0000dd84 <rx_packet_set>:
{
    dd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
    dd86:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
    dd8a:	8e05      	ldrh	r5, [r0, #48]	; 0x30
{
    dd8c:	4606      	mov	r6, r0
	phy = conn->phy_rx;
    dd8e:	f004 0407 	and.w	r4, r4, #7
{
    dd92:	460f      	mov	r7, r1
	radio_phy_set(phy, 0);
    dd94:	4620      	mov	r0, r4
    dd96:	2100      	movs	r1, #0
    dd98:	f009 fb80 	bl	1749c <radio_phy_set>
	if (conn->enc_rx) {
    dd9c:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    dda0:	f013 0f10 	tst.w	r3, #16
    dda4:	ea4f 0244 	mov.w	r2, r4, lsl #1
    dda8:	d010      	beq.n	ddcc <rx_packet_set+0x48>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    ddaa:	1d29      	adds	r1, r5, #4
    ddac:	f042 0201 	orr.w	r2, r2, #1
    ddb0:	b2c9      	uxtb	r1, r1
    ddb2:	2008      	movs	r0, #8
    ddb4:	f009 fbd6 	bl	17564 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    ddb8:	463a      	mov	r2, r7
    ddba:	4621      	mov	r1, r4
    ddbc:	f106 00f9 	add.w	r0, r6, #249	; 0xf9
    ddc0:	f009 fe16 	bl	179f0 <radio_ccm_rx_pkt_set>
}
    ddc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
    ddc8:	f009 bbfe 	b.w	175c8 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    ddcc:	2008      	movs	r0, #8
    ddce:	f042 0201 	orr.w	r2, r2, #1
    ddd2:	b2e9      	uxtb	r1, r5
    ddd4:	f009 fbc6 	bl	17564 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    ddd8:	4638      	mov	r0, r7
    ddda:	e7f3      	b.n	ddc4 <rx_packet_set+0x40>

0000dddc <tx_packet_set>:
{
    dddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ddde:	460f      	mov	r7, r1
	phy = conn->phy_tx;
    dde0:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
    dde4:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
    dde6:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
    ddea:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
    ddec:	09c9      	lsrs	r1, r1, #7
    ddee:	4620      	mov	r0, r4
    ddf0:	f009 fb54 	bl	1749c <radio_phy_set>
	if (conn->enc_tx) {
    ddf4:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    ddf8:	f013 0f20 	tst.w	r3, #32
    ddfc:	ea4f 0244 	mov.w	r2, r4, lsl #1
    de00:	d00f      	beq.n	de22 <tx_packet_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    de02:	1d29      	adds	r1, r5, #4
    de04:	b2c9      	uxtb	r1, r1
    de06:	2008      	movs	r0, #8
    de08:	f042 0201 	orr.w	r2, r2, #1
    de0c:	f009 fbaa 	bl	17564 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    de10:	4639      	mov	r1, r7
    de12:	f506 708d 	add.w	r0, r6, #282	; 0x11a
    de16:	f009 fe41 	bl	17a9c <radio_ccm_tx_pkt_set>
}
    de1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
    de1e:	f009 bbd9 	b.w	175d4 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    de22:	2008      	movs	r0, #8
    de24:	f042 0201 	orr.w	r2, r2, #1
    de28:	b2e9      	uxtb	r1, r5
    de2a:	f009 fb9b 	bl	17564 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    de2e:	4638      	mov	r0, r7
    de30:	e7f3      	b.n	de1a <tx_packet_set+0x3e>
	...

0000de34 <chan_set>:
{
    de34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	pdu = (void *)_radio.advertiser.adv_data.data
    de38:	4e7d      	ldr	r6, [pc, #500]	; (e030 <chan_set+0x1fc>)
    de3a:	f896 322e 	ldrb.w	r3, [r6, #558]	; 0x22e
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    de3e:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    de42:	4433      	add	r3, r6
{
    de44:	4604      	mov	r4, r0
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    de46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    de4a:	f003 030f 	and.w	r3, r3, #15
    de4e:	2b07      	cmp	r3, #7
    de50:	f040 80e0 	bne.w	e014 <chan_set+0x1e0>
		switch (chan) {
    de54:	2826      	cmp	r0, #38	; 0x26
    de56:	f8df 8214 	ldr.w	r8, [pc, #532]	; e06c <chan_set+0x238>
    de5a:	d030      	beq.n	debe <chan_set+0x8a>
    de5c:	2827      	cmp	r0, #39	; 0x27
    de5e:	f8df a210 	ldr.w	sl, [pc, #528]	; e070 <chan_set+0x23c>
    de62:	f8df 9210 	ldr.w	r9, [pc, #528]	; e074 <chan_set+0x240>
    de66:	d034      	beq.n	ded2 <chan_set+0x9e>
    de68:	2825      	cmp	r0, #37	; 0x25
    de6a:	d162      	bne.n	df32 <chan_set+0xfe>
			stop_time_37 = k_cycle_get_32();
    de6c:	f7f5 fb36 	bl	34dc <_timer_cycle_get_32>
			cycles_spent_37 = stop_time_37 - start_time37;
    de70:	4e70      	ldr	r6, [pc, #448]	; (e034 <chan_set+0x200>)
			stop_time_37 = k_cycle_get_32();
    de72:	4b71      	ldr	r3, [pc, #452]	; (e038 <chan_set+0x204>)
			cycles_spent_37 = stop_time_37 - start_time37;
    de74:	6837      	ldr	r7, [r6, #0]
			stop_time_37 = k_cycle_get_32();
    de76:	6018      	str	r0, [r3, #0]
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    de78:	f8da 2000 	ldr.w	r2, [sl]
			cycles_spent_37 = stop_time_37 - start_time37;
    de7c:	4b6f      	ldr	r3, [pc, #444]	; (e03c <chan_set+0x208>)
    de7e:	1bc7      	subs	r7, r0, r7
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    de80:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
			cycles_spent_37 = stop_time_37 - start_time37;
    de84:	601f      	str	r7, [r3, #0]
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    de86:	fb82 2305 	smull	r2, r3, r2, r5
    de8a:	fba2 0107 	umull	r0, r1, r2, r7
    de8e:	f8d9 2000 	ldr.w	r2, [r9]
    de92:	fb07 1103 	mla	r1, r7, r3, r1
    de96:	17d3      	asrs	r3, r2, #31
    de98:	f7f2 f9e6 	bl	268 <__aeabi_uldivmod>
    de9c:	4b68      	ldr	r3, [pc, #416]	; (e040 <chan_set+0x20c>)
    de9e:	fbb0 f0f5 	udiv	r0, r0, r5
    dea2:	6018      	str	r0, [r3, #0]
			start_time = k_cycle_get_32();
    dea4:	f7f5 fb1a 	bl	34dc <_timer_cycle_get_32>
    dea8:	f8c8 0000 	str.w	r0, [r8]
			start_time37= k_cycle_get_32();
    deac:	f7f5 fb16 	bl	34dc <_timer_cycle_get_32>
			pckt_send++;
    deb0:	4a64      	ldr	r2, [pc, #400]	; (e044 <chan_set+0x210>)
			start_time37= k_cycle_get_32();
    deb2:	6030      	str	r0, [r6, #0]
			pckt_send++;
    deb4:	7813      	ldrb	r3, [r2, #0]
    deb6:	3301      	adds	r3, #1
    deb8:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(2);
    deba:	2002      	movs	r0, #2
    debc:	e09e      	b.n	dffc <chan_set+0x1c8>
			start_time = k_cycle_get_32();
    debe:	f7f5 fb0d 	bl	34dc <_timer_cycle_get_32>
			pckt_send++;
    dec2:	4a60      	ldr	r2, [pc, #384]	; (e044 <chan_set+0x210>)
			start_time = k_cycle_get_32();
    dec4:	f8c8 0000 	str.w	r0, [r8]
			pckt_send++;
    dec8:	7813      	ldrb	r3, [r2, #0]
    deca:	3301      	adds	r3, #1
    decc:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(26);
    dece:	201a      	movs	r0, #26
    ded0:	e094      	b.n	dffc <chan_set+0x1c8>
			stop_time_39 = k_cycle_get_32();
    ded2:	f7f5 fb03 	bl	34dc <_timer_cycle_get_32>
    ded6:	4b5c      	ldr	r3, [pc, #368]	; (e048 <chan_set+0x214>)
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    ded8:	f8da 2000 	ldr.w	r2, [sl]
			stop_time_39 = k_cycle_get_32();
    dedc:	6018      	str	r0, [r3, #0]
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    dede:	f8d8 3000 	ldr.w	r3, [r8]
    dee2:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    dee6:	eba0 0e03 	sub.w	lr, r0, r3
    deea:	fb82 2307 	smull	r2, r3, r2, r7
    deee:	fbae 0102 	umull	r0, r1, lr, r2
    def2:	f8d9 2000 	ldr.w	r2, [r9]
    def6:	fb0e 1103 	mla	r1, lr, r3, r1
    defa:	17d3      	asrs	r3, r2, #31
    defc:	f7f2 f9b4 	bl	268 <__aeabi_uldivmod>
    df00:	4b52      	ldr	r3, [pc, #328]	; (e04c <chan_set+0x218>)
    df02:	fbb0 f0f7 	udiv	r0, r0, r7
    df06:	6018      	str	r0, [r3, #0]
			pckt_send = 0;
    df08:	4b4e      	ldr	r3, [pc, #312]	; (e044 <chan_set+0x210>)
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    df0a:	2500      	movs	r5, #0
			pckt_send = 0;
    df0c:	701d      	strb	r5, [r3, #0]
			start_time = k_cycle_get_32();
    df0e:	f7f5 fae5 	bl	34dc <_timer_cycle_get_32>
			_radio.ext_advertiser.current_slot++;
    df12:	f896 3c69 	ldrb.w	r3, [r6, #3177]	; 0xc69
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    df16:	f896 2c68 	ldrb.w	r2, [r6, #3176]	; 0xc68
			start_time = k_cycle_get_32();
    df1a:	f8c8 0000 	str.w	r0, [r8]
			_radio.ext_advertiser.current_slot++;
    df1e:	3301      	adds	r3, #1
    df20:	b2db      	uxtb	r3, r3
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    df22:	429a      	cmp	r2, r3
			_radio.ext_advertiser.current_slot++;
    df24:	f886 3c69 	strb.w	r3, [r6, #3177]	; 0xc69
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    df28:	d201      	bcs.n	df2e <chan_set+0xfa>
			_radio.ext_advertiser.current_slot= 0;
    df2a:	f886 5c69 	strb.w	r5, [r6, #3177]	; 0xc69
			radio_freq_chan_set(80);
    df2e:	2050      	movs	r0, #80	; 0x50
    df30:	e064      	b.n	dffc <chan_set+0x1c8>
			stop_time_aux1 = k_cycle_get_32();
    df32:	f7f5 fad3 	bl	34dc <_timer_cycle_get_32>
    df36:	4b46      	ldr	r3, [pc, #280]	; (e050 <chan_set+0x21c>)
    df38:	6018      	str	r0, [r3, #0]
    df3a:	f8da 3000 	ldr.w	r3, [sl]
    df3e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    df42:	fb83 2305 	smull	r2, r3, r3, r5
    df46:	e9cd 2300 	strd	r2, r3, [sp]
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    df4a:	f8d9 3000 	ldr.w	r3, [r9]
    df4e:	4619      	mov	r1, r3
    df50:	17da      	asrs	r2, r3, #31
    df52:	f8d8 3000 	ldr.w	r3, [r8]
    df56:	e9cd 1202 	strd	r1, r2, [sp, #8]
    df5a:	9a00      	ldr	r2, [sp, #0]
    df5c:	1ac3      	subs	r3, r0, r3
			stop_time_aux1 = k_cycle_get_32();
    df5e:	4607      	mov	r7, r0
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    df60:	fba3 0102 	umull	r0, r1, r3, r2
    df64:	9a01      	ldr	r2, [sp, #4]
    df66:	fb03 1102 	mla	r1, r3, r2, r1
    df6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    df6e:	f7f2 f97b 	bl	268 <__aeabi_uldivmod>
    df72:	4b38      	ldr	r3, [pc, #224]	; (e054 <chan_set+0x220>)
    df74:	fbb0 f0f5 	udiv	r0, r0, r5
    df78:	6018      	str	r0, [r3, #0]
			us_spent_aux = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time37)/1000;
    df7a:	4b2e      	ldr	r3, [pc, #184]	; (e034 <chan_set+0x200>)
    df7c:	681b      	ldr	r3, [r3, #0]
    df7e:	1aff      	subs	r7, r7, r3
    df80:	9b00      	ldr	r3, [sp, #0]
    df82:	fba7 0103 	umull	r0, r1, r7, r3
    df86:	9b01      	ldr	r3, [sp, #4]
    df88:	fb07 1103 	mla	r1, r7, r3, r1
    df8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    df90:	f7f2 f96a 	bl	268 <__aeabi_uldivmod>
    df94:	4b30      	ldr	r3, [pc, #192]	; (e058 <chan_set+0x224>)
    df96:	fbb0 f0f5 	udiv	r0, r0, r5
    df9a:	6018      	str	r0, [r3, #0]
 			stop_dynamic_cal = k_cycle_get_32(); 
    df9c:	f7f5 fa9e 	bl	34dc <_timer_cycle_get_32>
    dfa0:	4b2e      	ldr	r3, [pc, #184]	; (e05c <chan_set+0x228>)
			last_dynamic_cal = final_dynamic_cal;
    dfa2:	4f2f      	ldr	r7, [pc, #188]	; (e060 <chan_set+0x22c>)
 			stop_dynamic_cal = k_cycle_get_32(); 
    dfa4:	2100      	movs	r1, #0
    dfa6:	e9c3 0100 	strd	r0, r1, [r3]
			last_dynamic_cal = final_dynamic_cal;
    dfaa:	4b2e      	ldr	r3, [pc, #184]	; (e064 <chan_set+0x230>)
    dfac:	f8d7 8000 	ldr.w	r8, [r7]
    dfb0:	687a      	ldr	r2, [r7, #4]
    dfb2:	f8c3 8000 	str.w	r8, [r3]
    dfb6:	605a      	str	r2, [r3, #4]
			final_dynamic_cal = SYS_CLOCK_HW_CYCLES_TO_NS(stop_dynamic_cal - start_dynamic_cal)/1000;
    dfb8:	4b2b      	ldr	r3, [pc, #172]	; (e068 <chan_set+0x234>)
    dfba:	e9d3 2300 	ldrd	r2, r3, [r3]
    dfbe:	1a82      	subs	r2, r0, r2
    dfc0:	f8da 0000 	ldr.w	r0, [sl]
    dfc4:	eb61 0303 	sbc.w	r3, r1, r3
    dfc8:	fb80 0105 	smull	r0, r1, r0, r5
    dfcc:	4351      	muls	r1, r2
    dfce:	fb00 1303 	mla	r3, r0, r3, r1
    dfd2:	fba2 0100 	umull	r0, r1, r2, r0
    dfd6:	f8d9 2000 	ldr.w	r2, [r9]
    dfda:	4419      	add	r1, r3
    dfdc:	17d3      	asrs	r3, r2, #31
    dfde:	f7f2 f943 	bl	268 <__aeabi_uldivmod>
    dfe2:	2300      	movs	r3, #0
    dfe4:	fbb0 f0f5 	udiv	r0, r0, r5
    dfe8:	6038      	str	r0, [r7, #0]
			_radio.ext_advertiser.last_dynamic_cal = final_dynamic_cal-last_dynamic_cal;
    dfea:	eba0 0008 	sub.w	r0, r0, r8
			final_dynamic_cal = SYS_CLOCK_HW_CYCLES_TO_NS(stop_dynamic_cal - start_dynamic_cal)/1000;
    dfee:	607b      	str	r3, [r7, #4]
			_radio.ext_advertiser.last_dynamic_cal = final_dynamic_cal-last_dynamic_cal;
    dff0:	f8c6 0c88 	str.w	r0, [r6, #3208]	; 0xc88
			if (chan < 11) {
    dff4:	2c0a      	cmp	r4, #10
    dff6:	d809      	bhi.n	e00c <chan_set+0x1d8>
				radio_freq_chan_set(4 + (2 * chan));
    dff8:	1ca0      	adds	r0, r4, #2
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    dffa:	0040      	lsls	r0, r0, #1
    dffc:	f009 fa82 	bl	17504 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    e000:	4620      	mov	r0, r4
}
    e002:	b004      	add	sp, #16
    e004:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	radio_whiten_iv_set(chan);
    e008:	f009 ba82 	b.w	17510 <radio_whiten_iv_set>
			} else if (chan < 40) {
    e00c:	2c27      	cmp	r4, #39	; 0x27
    e00e:	d809      	bhi.n	e024 <chan_set+0x1f0>
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    e010:	1ce0      	adds	r0, r4, #3
    e012:	e7f2      	b.n	dffa <chan_set+0x1c6>
		switch (chan) {
    e014:	2826      	cmp	r0, #38	; 0x26
    e016:	f43f af5a 	beq.w	dece <chan_set+0x9a>
    e01a:	2827      	cmp	r0, #39	; 0x27
    e01c:	d087      	beq.n	df2e <chan_set+0xfa>
    e01e:	2825      	cmp	r0, #37	; 0x25
    e020:	d1e8      	bne.n	dff4 <chan_set+0x1c0>
    e022:	e74a      	b.n	deba <chan_set+0x86>
				LL_ASSERT(0);
    e024:	4040      	eors	r0, r0
    e026:	f380 8811 	msr	BASEPRI, r0
    e02a:	f04f 0004 	mov.w	r0, #4
    e02e:	df02      	svc	2
    e030:	20000c08 	.word	0x20000c08
    e034:	20004884 	.word	0x20004884
    e038:	200048ec 	.word	0x200048ec
    e03c:	20004940 	.word	0x20004940
    e040:	20004960 	.word	0x20004960
    e044:	200019c8 	.word	0x200019c8
    e048:	200048f0 	.word	0x200048f0
    e04c:	20004948 	.word	0x20004948
    e050:	20004954 	.word	0x20004954
    e054:	2000491c 	.word	0x2000491c
    e058:	20004870 	.word	0x20004870
    e05c:	20004910 	.word	0x20004910
    e060:	20001988 	.word	0x20001988
    e064:	20001990 	.word	0x20001990
    e068:	20004878 	.word	0x20004878
    e06c:	20004908 	.word	0x20004908
    e070:	2000eb28 	.word	0x2000eb28
    e074:	2000eb24 	.word	0x2000eb24

0000e078 <adv_setup>:
{
    e078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.advertiser.adv_data.first !=
    e07c:	4c8c      	ldr	r4, [pc, #560]	; (e2b0 <adv_setup+0x238>)
    e07e:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
    e082:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    e086:	429a      	cmp	r2, r3
    e088:	f000 80db 	beq.w	e242 <adv_setup+0x1ca>
		first = _radio.advertiser.adv_data.first + 1;
    e08c:	3301      	adds	r3, #1
    e08e:	b2db      	uxtb	r3, r3
			first = 0;
    e090:	2b02      	cmp	r3, #2
    e092:	bf08      	it	eq
    e094:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    e096:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
		upd = 1;
    e09a:	f04f 0a01 	mov.w	sl, #1
	if (_radio.advertiser.scan_data.first != _radio.
    e09e:	f894 3c14 	ldrb.w	r3, [r4, #3092]	; 0xc14
    e0a2:	f894 2c15 	ldrb.w	r2, [r4, #3093]	; 0xc15
    e0a6:	429a      	cmp	r2, r3
    e0a8:	d008      	beq.n	e0bc <adv_setup+0x44>
		first = _radio.advertiser.scan_data.first + 1;
    e0aa:	3301      	adds	r3, #1
    e0ac:	b2db      	uxtb	r3, r3
			first = 0;
    e0ae:	2b02      	cmp	r3, #2
    e0b0:	bf08      	it	eq
    e0b2:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    e0b4:	f884 3c14 	strb.w	r3, [r4, #3092]	; 0xc14
		upd = 1;
    e0b8:	f04f 0a01 	mov.w	sl, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    e0bc:	f894 722e 	ldrb.w	r7, [r4, #558]	; 0x22e
    e0c0:	eb07 2707 	add.w	r7, r7, r7, lsl #8
    e0c4:	372c      	adds	r7, #44	; 0x2c
    e0c6:	eb04 0907 	add.w	r9, r4, r7
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    e0ca:	5de3      	ldrb	r3, [r4, r7]
    e0cc:	f003 030f 	and.w	r3, r3, #15
    e0d0:	2b07      	cmp	r3, #7
    e0d2:	d160      	bne.n	e196 <adv_setup+0x11e>
			if(h->adv_addr){
    e0d4:	f899 3003 	ldrb.w	r3, [r9, #3]
    e0d8:	07dd      	lsls	r5, r3, #31
				ptr += BDADDR_SIZE;
    e0da:	bf4c      	ite	mi
    e0dc:	f109 050a 	addmi.w	r5, r9, #10
		ptr = (u8_t *)h + sizeof(*h);
    e0e0:	f109 0504 	addpl.w	r5, r9, #4
			if(h->tgt_addr){
    e0e4:	079a      	lsls	r2, r3, #30
				ptr += BDADDR_SIZE;
    e0e6:	bf48      	it	mi
    e0e8:	3506      	addmi	r5, #6
			if(h->adi){
    e0ea:	071e      	lsls	r6, r3, #28
				ptr += sizeof(*adi_ptr);
    e0ec:	bf48      	it	mi
    e0ee:	3502      	addmi	r5, #2
			if(h->aux_ptr){
    e0f0:	06da      	lsls	r2, r3, #27
    e0f2:	d54a      	bpl.n	e18a <adv_setup+0x112>
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    e0f4:	f8d4 2c84 	ldr.w	r2, [r4, #3204]	; 0xc84
    e0f8:	f8d4 3c60 	ldr.w	r3, [r4, #3168]	; 0xc60
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    e0fc:	f894 6029 	ldrb.w	r6, [r4, #41]	; 0x29
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    e100:	4413      	add	r3, r2
    e102:	f894 2c69 	ldrb.w	r2, [r4, #3177]	; 0xc69
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    e106:	f3c6 1602 	ubfx	r6, r6, #4, #3
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    e10a:	435a      	muls	r2, r3
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    e10c:	2e07      	cmp	r6, #7
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    e10e:	f8c4 2c6c 	str.w	r2, [r4, #3180]	; 0xc6c
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    e112:	f040 80a6 	bne.w	e262 <adv_setup+0x1ea>
					if((_radio.advertiser.chan_map_current & 0x07) == 0x07){
    e116:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    e11a:	f003 0307 	and.w	r3, r3, #7
    e11e:	2b07      	cmp	r3, #7
    e120:	f040 8092 	bne.w	e248 <adv_setup+0x1d0>
						offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    e124:	f8d4 0c70 	ldr.w	r0, [r4, #3184]	; 0xc70
    e128:	1a82      	subs	r2, r0, r2
    e12a:	4610      	mov	r0, r2
    e12c:	2100      	movs	r1, #0
						_radio.ext_advertiser.chan_offset = offset;
    e12e:	f8c4 2c7c 	str.w	r2, [r4, #3196]	; 0xc7c
				if(offset > 245700){
    e132:	4a60      	ldr	r2, [pc, #384]	; (e2b4 <adv_setup+0x23c>)
    e134:	78ae      	ldrb	r6, [r5, #2]
    e136:	f895 8000 	ldrb.w	r8, [r5]
    e13a:	2300      	movs	r3, #0
    e13c:	428b      	cmp	r3, r1
    e13e:	bf08      	it	eq
    e140:	4282      	cmpeq	r2, r0
    e142:	f080 809f 	bcs.w	e284 <adv_setup+0x20c>
					ap->offs = offset/300;
    e146:	f44f 7296 	mov.w	r2, #300	; 0x12c
    e14a:	2300      	movs	r3, #0
    e14c:	f7f2 f88c 	bl	268 <__aeabi_uldivmod>
    e150:	f026 061f 	bic.w	r6, r6, #31
    e154:	7068      	strb	r0, [r5, #1]
    e156:	f3c0 2004 	ubfx	r0, r0, #8, #5
    e15a:	4330      	orrs	r0, r6
    e15c:	70a8      	strb	r0, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_300;
    e15e:	f048 0880 	orr.w	r8, r8, #128	; 0x80
				if(_radio.advertiser.ext_adv == 1){
    e162:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    e166:	f885 8000 	strb.w	r8, [r5]
				if(_radio.advertiser.ext_adv == 1){
    e16a:	07db      	lsls	r3, r3, #31
    e16c:	d508      	bpl.n	e180 <adv_setup+0x108>
					_radio.ext_advertiser.aux_pckt_chan++;
    e16e:	f894 3c80 	ldrb.w	r3, [r4, #3200]	; 0xc80
    e172:	3301      	adds	r3, #1
    e174:	b2db      	uxtb	r3, r3
					if(_radio.ext_advertiser.aux_pckt_chan == 0x25){ //37 channel
    e176:	2b25      	cmp	r3, #37	; 0x25
						_radio.ext_advertiser.aux_pckt_chan = 0;
    e178:	bf08      	it	eq
    e17a:	2300      	moveq	r3, #0
    e17c:	f884 3c80 	strb.w	r3, [r4, #3200]	; 0xc80
				ap->chan_idx = 0x03;
    e180:	782b      	ldrb	r3, [r5, #0]
    e182:	2203      	movs	r2, #3
    e184:	f362 0305 	bfi	r3, r2, #0, #6
    e188:	702b      	strb	r3, [r5, #0]
		_radio.advertiser.ext_adv = 0;   //in order to change the aux packet channel index
    e18a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    e18e:	f36f 0300 	bfc	r3, #0, #1
    e192:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (upd) {
    e196:	f1ba 0f00 	cmp.w	sl, #0
    e19a:	d00b      	beq.n	e1b4 <adv_setup+0x13c>
		struct pdu_adv *scan_pdu = (void *)
    e19c:	f894 0c14 	ldrb.w	r0, [r4, #3092]	; 0xc14
    e1a0:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    e1a4:	4420      	add	r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    e1a6:	2206      	movs	r2, #6
    e1a8:	f109 0102 	add.w	r1, r9, #2
    e1ac:	f600 2014 	addw	r0, r0, #2580	; 0xa14
    e1b0:	f7f2 fb04 	bl	7bc <memcpy>
		radio_pkt_tx_set(pdu);
    e1b4:	4648      	mov	r0, r9
    e1b6:	f009 fa0d 	bl	175d4 <radio_pkt_tx_set>
		if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    e1ba:	5de3      	ldrb	r3, [r4, r7]
    e1bc:	f003 030f 	and.w	r3, r3, #15
    e1c0:	2b02      	cmp	r3, #2
    e1c2:	d06d      	beq.n	e2a0 <adv_setup+0x228>
    e1c4:	2b07      	cmp	r3, #7
    e1c6:	d06b      	beq.n	e2a0 <adv_setup+0x228>
			_radio.state = STATE_TX;
    e1c8:	2302      	movs	r3, #2
			radio_tmr_tifs_set(RADIO_TIFS);
    e1ca:	2096      	movs	r0, #150	; 0x96
			_radio.state = STATE_TX;
    e1cc:	7523      	strb	r3, [r4, #20]
			radio_tmr_tifs_set(RADIO_TIFS);
    e1ce:	f009 fb27 	bl	17820 <radio_tmr_tifs_set>
			radio_switch_complete_and_rx(0);
    e1d2:	2000      	movs	r0, #0
    e1d4:	f009 fa86 	bl	176e4 <radio_switch_complete_and_rx>
		bitmap = _radio.advertiser.chan_map_current;
    e1d8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    e1dc:	f3c3 0202 	ubfx	r2, r3, #0, #3
    e1e0:	b2d3      	uxtb	r3, r2
    e1e2:	4619      	mov	r1, r3
		while ((bitmap & 0x01) == 0) {
    e1e4:	2000      	movs	r0, #0
    e1e6:	07ce      	lsls	r6, r1, #31
    e1e8:	f100 0501 	add.w	r5, r0, #1
    e1ec:	d55d      	bpl.n	e2aa <adv_setup+0x232>
			(_radio.advertiser.chan_map_current - 1);
    e1ee:	3b01      	subs	r3, #1
			_radio.advertiser.chan_map_current &=
    e1f0:	4013      	ands	r3, r2
    e1f2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
		count++;
    e1f6:	4d30      	ldr	r5, [pc, #192]	; (e2b8 <adv_setup+0x240>)
			_radio.advertiser.chan_map_current &=
    e1f8:	f363 0202 	bfi	r2, r3, #0, #3
    e1fc:	4b2f      	ldr	r3, [pc, #188]	; (e2bc <adv_setup+0x244>)
    e1fe:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if(! _radio.advertiser.chan_map_current){	
    e202:	f012 0f07 	tst.w	r2, #7
			chan_case ++;
    e206:	bf08      	it	eq
    e208:	781a      	ldrbeq	r2, [r3, #0]
		count++;
    e20a:	7829      	ldrb	r1, [r5, #0]
			chan_case ++;
    e20c:	bf0c      	ite	eq
    e20e:	3201      	addeq	r2, #1
			chan_case = 0 ;
    e210:	2200      	movne	r2, #0
    e212:	701a      	strb	r2, [r3, #0]
		_radio.ext_advertiser.event++;
    e214:	f894 3c6a 	ldrb.w	r3, [r4, #3178]	; 0xc6a
		if(_radio.ext_advertiser.event > _radio.ext_advertiser.max_skip){
    e218:	f894 2c68 	ldrb.w	r2, [r4, #3176]	; 0xc68
		_radio.ext_advertiser.event++;
    e21c:	3301      	adds	r3, #1
    e21e:	b2db      	uxtb	r3, r3
		if(_radio.ext_advertiser.event > _radio.ext_advertiser.max_skip){
    e220:	429a      	cmp	r2, r3
		count++;
    e222:	f101 0101 	add.w	r1, r1, #1
		_radio.ext_advertiser.event++;
    e226:	f884 3c6a 	strb.w	r3, [r4, #3178]	; 0xc6a
		count++;
    e22a:	7029      	strb	r1, [r5, #0]
			_radio.ext_advertiser.event = 0;
    e22c:	bf38      	it	cc
    e22e:	2300      	movcc	r3, #0
		chan_set(37 + chan);
    e230:	b2c0      	uxtb	r0, r0
			_radio.ext_advertiser.event = 0;
    e232:	bf38      	it	cc
    e234:	f884 3c6a 	strbcc.w	r3, [r4, #3178]	; 0xc6a
		chan_set(37 + chan);
    e238:	3025      	adds	r0, #37	; 0x25
}
    e23a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		chan_set(37 + chan);
    e23e:	f7ff bdf9 	b.w	de34 <chan_set>
	u8_t upd = 0;
    e242:	f04f 0a00 	mov.w	sl, #0
    e246:	e72a      	b.n	e09e <adv_setup+0x26>
					}else if((_radio.advertiser.chan_map_current & 0x07) == 0x06){
    e248:	2b06      	cmp	r3, #6
    e24a:	d104      	bne.n	e256 <adv_setup+0x1de>
						offset = (_radio.ext_advertiser.chan_38 - _radio.ext_advertiser.slot );
    e24c:	f8d4 0c74 	ldr.w	r0, [r4, #3188]	; 0xc74
						offset = (_radio.ext_advertiser.chan_39 - _radio.ext_advertiser.slot );
    e250:	1a80      	subs	r0, r0, r2
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    e252:	2100      	movs	r1, #0
    e254:	e76d      	b.n	e132 <adv_setup+0xba>
					}else if((_radio.advertiser.chan_map_current & 0x07) == 0x04){
    e256:	2b04      	cmp	r3, #4
    e258:	f47f af6b 	bne.w	e132 <adv_setup+0xba>
						offset = (_radio.ext_advertiser.chan_39 - _radio.ext_advertiser.slot );
    e25c:	f8d4 0c78 	ldr.w	r0, [r4, #3192]	; 0xc78
    e260:	e7f6      	b.n	e250 <adv_setup+0x1d8>
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset ) * _radio.ext_advertiser.event;
    e262:	f894 6c6a 	ldrb.w	r6, [r4, #3178]	; 0xc6a
    e266:	4373      	muls	r3, r6
    e268:	f8c4 3c6c 	str.w	r3, [r4, #3180]	; 0xc6c
					if(_radio.ext_advertiser.event == 0){
    e26c:	b926      	cbnz	r6, e278 <adv_setup+0x200>
						start_dynamic_cal = k_cycle_get_32(); 
    e26e:	f7f5 f935 	bl	34dc <_timer_cycle_get_32>
    e272:	4b13      	ldr	r3, [pc, #76]	; (e2c0 <adv_setup+0x248>)
    e274:	e883 0041 	stmia.w	r3, {r0, r6}
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    e278:	f8d4 0c70 	ldr.w	r0, [r4, #3184]	; 0xc70
    e27c:	f8d4 3c6c 	ldr.w	r3, [r4, #3180]	; 0xc6c
    e280:	1ac0      	subs	r0, r0, r3
    e282:	e7e6      	b.n	e252 <adv_setup+0x1da>
					ap->offs = offset /30;
    e284:	221e      	movs	r2, #30
    e286:	2300      	movs	r3, #0
    e288:	f7f1 ffee 	bl	268 <__aeabi_uldivmod>
    e28c:	f026 061f 	bic.w	r6, r6, #31
    e290:	7068      	strb	r0, [r5, #1]
    e292:	f3c0 2004 	ubfx	r0, r0, #8, #5
    e296:	4306      	orrs	r6, r0
    e298:	70ae      	strb	r6, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    e29a:	f36f 18c7 	bfc	r8, #7, #1
    e29e:	e760      	b.n	e162 <adv_setup+0xea>
			_radio.state = STATE_CLOSE;
    e2a0:	2303      	movs	r3, #3
    e2a2:	7523      	strb	r3, [r4, #20]
			radio_switch_complete_and_disable();
    e2a4:	f009 fa34 	bl	17710 <radio_switch_complete_and_disable>
    e2a8:	e796      	b.n	e1d8 <adv_setup+0x160>
			bitmap >>= 1;
    e2aa:	0849      	lsrs	r1, r1, #1
    e2ac:	4628      	mov	r0, r5
    e2ae:	e79a      	b.n	e1e6 <adv_setup+0x16e>
    e2b0:	20000c08 	.word	0x20000c08
    e2b4:	0003bfc4 	.word	0x0003bfc4
    e2b8:	20001983 	.word	0x20001983
    e2bc:	20001982 	.word	0x20001982
    e2c0:	20004878 	.word	0x20004878

0000e2c4 <ext_adv_setup>:
{
    e2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (_radio.advertiser.adv_data.first !=
    e2c8:	4c63      	ldr	r4, [pc, #396]	; (e458 <ext_adv_setup+0x194>)
    e2ca:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
    e2ce:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    e2d2:	429a      	cmp	r2, r3
    e2d4:	d02d      	beq.n	e332 <ext_adv_setup+0x6e>
		first = _radio.advertiser.adv_data.first + 1;
    e2d6:	3301      	adds	r3, #1
    e2d8:	b2db      	uxtb	r3, r3
			first = 0;
    e2da:	2b02      	cmp	r3, #2
    e2dc:	bf08      	it	eq
    e2de:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    e2e0:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
		upd = 1;
    e2e4:	f04f 0801 	mov.w	r8, #1
	if (_radio.advertiser.scan_data.first != _radio.
    e2e8:	f894 3c14 	ldrb.w	r3, [r4, #3092]	; 0xc14
    e2ec:	f894 2c15 	ldrb.w	r2, [r4, #3093]	; 0xc15
    e2f0:	429a      	cmp	r2, r3
    e2f2:	d008      	beq.n	e306 <ext_adv_setup+0x42>
		first = _radio.advertiser.scan_data.first + 1;
    e2f4:	3301      	adds	r3, #1
    e2f6:	b2db      	uxtb	r3, r3
			first = 0;
    e2f8:	2b02      	cmp	r3, #2
    e2fa:	bf08      	it	eq
    e2fc:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    e2fe:	f884 3c14 	strb.w	r3, [r4, #3092]	; 0xc14
		upd = 1;
    e302:	f04f 0801 	mov.w	r8, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    e306:	f894 622e 	ldrb.w	r6, [r4, #558]	; 0x22e
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    e30a:	f894 5433 	ldrb.w	r5, [r4, #1075]	; 0x433
	switch(_radio.ext_advertiser.aux_chain_count_current){
    e30e:	f894 3c8d 	ldrb.w	r3, [r4, #3213]	; 0xc8d
	pdu = (void *)_radio.advertiser.adv_data.data
    e312:	eb06 2606 	add.w	r6, r6, r6, lsl #8
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    e316:	eb05 2505 	add.w	r5, r5, r5, lsl #8
	pdu = (void *)_radio.advertiser.adv_data.data
    e31a:	362c      	adds	r6, #44	; 0x2c
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    e31c:	f505 750c 	add.w	r5, r5, #560	; 0x230
	pdu = (void *)_radio.advertiser.adv_data.data
    e320:	19a7      	adds	r7, r4, r6
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    e322:	4425      	add	r5, r4
	switch(_radio.ext_advertiser.aux_chain_count_current){
    e324:	2b05      	cmp	r3, #5
    e326:	d80d      	bhi.n	e344 <ext_adv_setup+0x80>
    e328:	e8df f003 	tbb	[pc, r3]
    e32c:	68605606 	.word	0x68605606
    e330:	7870      	.short	0x7870
	u8_t upd = 0;
    e332:	f04f 0800 	mov.w	r8, #0
    e336:	e7d7      	b.n	e2e8 <ext_adv_setup+0x24>
			memcpy(aux_pdu, copy_pdu, 257);
    e338:	f240 1201 	movw	r2, #257	; 0x101
    e33c:	4947      	ldr	r1, [pc, #284]	; (e45c <ext_adv_setup+0x198>)
    e33e:	4628      	mov	r0, r5
    e340:	f7f2 fa3c 	bl	7bc <memcpy>
		if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    e344:	5da3      	ldrb	r3, [r4, r6]
    e346:	f003 030f 	and.w	r3, r3, #15
    e34a:	2b07      	cmp	r3, #7
    e34c:	d11a      	bne.n	e384 <ext_adv_setup+0xc0>
			if(h->adv_addr){
    e34e:	78fa      	ldrb	r2, [r7, #3]
    e350:	07d3      	lsls	r3, r2, #31
				ptr += BDADDR_SIZE;
    e352:	bf4c      	ite	mi
    e354:	f107 030a 	addmi.w	r3, r7, #10
		ptr = (u8_t *)h + sizeof(*h);
    e358:	1d3b      	addpl	r3, r7, #4
			if(h->tgt_addr){
    e35a:	0790      	lsls	r0, r2, #30
				ptr += BDADDR_SIZE;
    e35c:	bf48      	it	mi
    e35e:	3306      	addmi	r3, #6
			if(h->adi){
    e360:	0711      	lsls	r1, r2, #28
				ptr += sizeof(*adi_ptr);
    e362:	bf48      	it	mi
    e364:	3302      	addmi	r3, #2
			if(h->aux_ptr){
    e366:	06d2      	lsls	r2, r2, #27
    e368:	d50c      	bpl.n	e384 <ext_adv_setup+0xc0>
					ap->offs = offset /30;
    e36a:	2206      	movs	r2, #6
    e36c:	705a      	strb	r2, [r3, #1]
    e36e:	789a      	ldrb	r2, [r3, #2]
    e370:	f022 021f 	bic.w	r2, r2, #31
    e374:	709a      	strb	r2, [r3, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    e376:	781a      	ldrb	r2, [r3, #0]
				ap->chan_idx = 0x03;
    e378:	2103      	movs	r1, #3
    e37a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    e37e:	f361 0205 	bfi	r2, r1, #0, #6
    e382:	701a      	strb	r2, [r3, #0]
	if (upd) {
    e384:	f1b8 0f00 	cmp.w	r8, #0
    e388:	d00a      	beq.n	e3a0 <ext_adv_setup+0xdc>
		struct pdu_adv *scan_pdu = (void *)
    e38a:	f894 0c14 	ldrb.w	r0, [r4, #3092]	; 0xc14
    e38e:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    e392:	4420      	add	r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    e394:	2206      	movs	r2, #6
    e396:	1cb9      	adds	r1, r7, #2
    e398:	f600 2014 	addw	r0, r0, #2580	; 0xa14
    e39c:	f7f2 fa0e 	bl	7bc <memcpy>
			radio_pkt_tx_set(aux_pdu);
    e3a0:	4628      	mov	r0, r5
    e3a2:	f009 f917 	bl	175d4 <radio_pkt_tx_set>
			if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    e3a6:	5da3      	ldrb	r3, [r4, r6]
    e3a8:	f003 030f 	and.w	r3, r3, #15
    e3ac:	2b02      	cmp	r3, #2
    e3ae:	d03d      	beq.n	e42c <ext_adv_setup+0x168>
    e3b0:	2b07      	cmp	r3, #7
    e3b2:	d03b      	beq.n	e42c <ext_adv_setup+0x168>
				_radio.state = STATE_TX;
    e3b4:	2302      	movs	r3, #2
				radio_tmr_tifs_set(RADIO_TIFS);
    e3b6:	2096      	movs	r0, #150	; 0x96
				_radio.state = STATE_TX;
    e3b8:	7523      	strb	r3, [r4, #20]
				radio_tmr_tifs_set(RADIO_TIFS);
    e3ba:	f009 fa31 	bl	17820 <radio_tmr_tifs_set>
				radio_switch_complete_and_rx(0);
    e3be:	2000      	movs	r0, #0
    e3c0:	f009 f990 	bl	176e4 <radio_switch_complete_and_rx>
			_radio.ext_advertiser.current_slot = 0;			// for packets which are transmittedon primaty channels
    e3c4:	2300      	movs	r3, #0
    e3c6:	f884 3c69 	strb.w	r3, [r4, #3177]	; 0xc69
			_radio.ext_advertiser.event = 0;				// skip number of events before transmitting aux
    e3ca:	f884 3c6a 	strb.w	r3, [r4, #3178]	; 0xc6a
			chan_set(03);
    e3ce:	2003      	movs	r0, #3
}
    e3d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			chan_set(03);
    e3d4:	f7ff bd2e 	b.w	de34 <chan_set>
			memcpy(aux_pdu, copy_pdu, 257);
    e3d8:	f240 1201 	movw	r2, #257	; 0x101
    e3dc:	4920      	ldr	r1, [pc, #128]	; (e460 <ext_adv_setup+0x19c>)
    e3de:	4628      	mov	r0, r5
    e3e0:	f7f2 f9ec 	bl	7bc <memcpy>
			chan_set(1);
    e3e4:	2001      	movs	r0, #1
			chan_set(5);
    e3e6:	f7ff fd25 	bl	de34 <chan_set>
			break;
    e3ea:	e7ab      	b.n	e344 <ext_adv_setup+0x80>
			memcpy(aux_pdu, copy_pdu, 257);
    e3ec:	f240 1201 	movw	r2, #257	; 0x101
    e3f0:	491c      	ldr	r1, [pc, #112]	; (e464 <ext_adv_setup+0x1a0>)
    e3f2:	4628      	mov	r0, r5
    e3f4:	f7f2 f9e2 	bl	7bc <memcpy>
			chan_set(2);
    e3f8:	2002      	movs	r0, #2
    e3fa:	e7f4      	b.n	e3e6 <ext_adv_setup+0x122>
			memcpy(aux_pdu, copy_pdu, 257);
    e3fc:	f240 1201 	movw	r2, #257	; 0x101
    e400:	4919      	ldr	r1, [pc, #100]	; (e468 <ext_adv_setup+0x1a4>)
    e402:	4628      	mov	r0, r5
    e404:	f7f2 f9da 	bl	7bc <memcpy>
			chan_set(3);
    e408:	2003      	movs	r0, #3
    e40a:	e7ec      	b.n	e3e6 <ext_adv_setup+0x122>
			memcpy(aux_pdu, copy_pdu, 257);
    e40c:	f240 1201 	movw	r2, #257	; 0x101
    e410:	4916      	ldr	r1, [pc, #88]	; (e46c <ext_adv_setup+0x1a8>)
    e412:	4628      	mov	r0, r5
    e414:	f7f2 f9d2 	bl	7bc <memcpy>
			chan_set(4);
    e418:	2004      	movs	r0, #4
    e41a:	e7e4      	b.n	e3e6 <ext_adv_setup+0x122>
			memcpy(aux_pdu, copy_pdu, 257);
    e41c:	f240 1201 	movw	r2, #257	; 0x101
    e420:	4913      	ldr	r1, [pc, #76]	; (e470 <ext_adv_setup+0x1ac>)
    e422:	4628      	mov	r0, r5
    e424:	f7f2 f9ca 	bl	7bc <memcpy>
			chan_set(5);
    e428:	2005      	movs	r0, #5
    e42a:	e7dc      	b.n	e3e6 <ext_adv_setup+0x122>
				chain_flag = 1;
    e42c:	4a11      	ldr	r2, [pc, #68]	; (e474 <ext_adv_setup+0x1b0>)
				if( _radio.ext_advertiser.aux_chain_count == _radio.ext_advertiser.aux_chain_count_current ){
    e42e:	f894 1c8c 	ldrb.w	r1, [r4, #3212]	; 0xc8c
				chain_flag = 1;
    e432:	2301      	movs	r3, #1
    e434:	7013      	strb	r3, [r2, #0]
				_radio.ext_advertiser.aux_chain_count_current++;
    e436:	f894 3c8d 	ldrb.w	r3, [r4, #3213]	; 0xc8d
    e43a:	3301      	adds	r3, #1
    e43c:	b2db      	uxtb	r3, r3
				if( _radio.ext_advertiser.aux_chain_count == _radio.ext_advertiser.aux_chain_count_current ){
    e43e:	4299      	cmp	r1, r3
				_radio.ext_advertiser.aux_chain_count_current++;
    e440:	f884 3c8d 	strb.w	r3, [r4, #3213]	; 0xc8d
				if( _radio.ext_advertiser.aux_chain_count == _radio.ext_advertiser.aux_chain_count_current ){
    e444:	d1b6      	bne.n	e3b4 <ext_adv_setup+0xf0>
					_radio.advertiser.ext_adv = 1;
    e446:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    e44a:	f043 0301 	orr.w	r3, r3, #1
    e44e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
					chain_flag = 0;
    e452:	2300      	movs	r3, #0
    e454:	7013      	strb	r3, [r2, #0]
    e456:	e7ad      	b.n	e3b4 <ext_adv_setup+0xf0>
    e458:	20000c08 	.word	0x20000c08
    e45c:	2000103c 	.word	0x2000103c
    e460:	2000113d 	.word	0x2000113d
    e464:	2000123e 	.word	0x2000123e
    e468:	2000133f 	.word	0x2000133f
    e46c:	20001440 	.word	0x20001440
    e470:	20001541 	.word	0x20001541
    e474:	20001981 	.word	0x20001981

0000e478 <sched_free_win_offset_calc>:
{
    e478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e47c:	b08f      	sub	sp, #60	; 0x3c
    e47e:	4692      	mov	sl, r2
    e480:	9304      	str	r3, [sp, #16]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    e482:	6803      	ldr	r3, [r0, #0]
{
    e484:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    e486:	2b00      	cmp	r3, #0
{
    e488:	4680      	mov	r8, r0
    e48a:	6842      	ldr	r2, [r0, #4]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    e48c:	da31      	bge.n	e4f2 <sched_free_win_offset_calc+0x7a>
		u32_t ticks_prepare_to_start =
    e48e:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
    e490:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
    e494:	4291      	cmp	r1, r2
    e496:	bf2c      	ite	cs
    e498:	1a5a      	subcs	r2, r3, r1
    e49a:	1a9a      	subcc	r2, r3, r2
	u32_t ticks_prepare_reduced = 0;
    e49c:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    e49e:	f8d8 200c 	ldr.w	r2, [r8, #12]
    e4a2:	323d      	adds	r2, #61	; 0x3d
		ticks_anchor_prev = offset_index = _win_offset = 0;
    e4a4:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    e4a6:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    e4a8:	18d3      	adds	r3, r2, r3
    e4aa:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    e4ac:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
    e4b0:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    e4b4:	940c      	str	r4, [sp, #48]	; 0x30
    e4b6:	940b      	str	r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    e4b8:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
    e4ba:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
    e4bc:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    e4be:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    e4c0:	2302      	movs	r3, #2
    e4c2:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    e4c4:	ab0d      	add	r3, sp, #52	; 0x34
    e4c6:	9302      	str	r3, [sp, #8]
    e4c8:	4b77      	ldr	r3, [pc, #476]	; (e6a8 <sched_free_win_offset_calc+0x230>)
    e4ca:	9301      	str	r3, [sp, #4]
    e4cc:	ab0b      	add	r3, sp, #44	; 0x2c
    e4ce:	9300      	str	r3, [sp, #0]
    e4d0:	f10d 0229 	add.w	r2, sp, #41	; 0x29
    e4d4:	ab0c      	add	r3, sp, #48	; 0x30
    e4d6:	2101      	movs	r1, #1
    e4d8:	2000      	movs	r0, #0
    e4da:	f7fd fb6d 	bl	bbb8 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    e4de:	2802      	cmp	r0, #2
    e4e0:	d010      	beq.n	e504 <sched_free_win_offset_calc+0x8c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    e4e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e4e4:	b193      	cbz	r3, e50c <sched_free_win_offset_calc+0x94>
			LL_ASSERT(0);
    e4e6:	4040      	eors	r0, r0
    e4e8:	f380 8811 	msr	BASEPRI, r0
    e4ec:	f04f 0004 	mov.w	r0, #4
    e4f0:	df02      	svc	2
		u32_t ticks_prepare_to_start =
    e4f2:	4293      	cmp	r3, r2
    e4f4:	bf38      	it	cc
    e4f6:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
    e4f8:	2200      	movs	r2, #0
    e4fa:	e7cf      	b.n	e49c <sched_free_win_offset_calc+0x24>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    e4fc:	2101      	movs	r1, #1
    e4fe:	2000      	movs	r0, #0
    e500:	f7fd fbd8 	bl	bcb4 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    e504:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e506:	2b02      	cmp	r3, #2
    e508:	d0f8      	beq.n	e4fc <sched_free_win_offset_calc+0x84>
    e50a:	e7ea      	b.n	e4e2 <sched_free_win_offset_calc+0x6a>
		if (ticker_id == 0xff) {
    e50c:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    e510:	2aff      	cmp	r2, #255	; 0xff
    e512:	d05d      	beq.n	e5d0 <sched_free_win_offset_calc+0x158>
		if ((ticker_id_prev != 0xff) &&
    e514:	2fff      	cmp	r7, #255	; 0xff
    e516:	d002      	beq.n	e51e <sched_free_win_offset_calc+0xa6>
    e518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e51a:	4599      	cmp	r9, r3
    e51c:	d1e3      	bne.n	e4e6 <sched_free_win_offset_calc+0x6e>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    e51e:	2a05      	cmp	r2, #5
    e520:	d951      	bls.n	e5c6 <sched_free_win_offset_calc+0x14e>
				  _radio.connection_count)) {
    e522:	4862      	ldr	r0, [pc, #392]	; (e6ac <sched_free_win_offset_calc+0x234>)
    e524:	f890 3cf8 	ldrb.w	r3, [r0, #3320]	; 0xcf8
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    e528:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    e52a:	429a      	cmp	r2, r3
    e52c:	da4b      	bge.n	e5c6 <sched_free_win_offset_calc+0x14e>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    e52e:	2a06      	cmp	r2, #6
    e530:	f000 8092 	beq.w	e658 <sched_free_win_offset_calc+0x1e0>
		if (ticker_id_other != 0xFF) {
    e534:	9b06      	ldr	r3, [sp, #24]
    e536:	2bff      	cmp	r3, #255	; 0xff
    e538:	d14a      	bne.n	e5d0 <sched_free_win_offset_calc+0x158>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    e53a:	3a07      	subs	r2, #7
    e53c:	b292      	uxth	r2, r2
    e53e:	f44f 71aa 	mov.w	r1, #340	; 0x154
    e542:	f8d0 0cf0 	ldr.w	r0, [r0, #3312]	; 0xcf0
    e546:	f7fc fc1d 	bl	ad84 <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
    e54a:	4580      	cmp	r8, r0
    e54c:	d03b      	beq.n	e5c6 <sched_free_win_offset_calc+0x14e>
    e54e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e550:	b91b      	cbnz	r3, e55a <sched_free_win_offset_calc+0xe2>
    e552:	f990 301d 	ldrsb.w	r3, [r0, #29]
    e556:	2b00      	cmp	r3, #0
    e558:	db35      	blt.n	e5c6 <sched_free_win_offset_calc+0x14e>
			u32_t ticks_to_expire_normal =
    e55a:	9b05      	ldr	r3, [sp, #20]
    e55c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    e55e:	6841      	ldr	r1, [r0, #4]
    e560:	441e      	add	r6, r3
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    e562:	6803      	ldr	r3, [r0, #0]
    e564:	2b00      	cmp	r3, #0
    e566:	da4e      	bge.n	e606 <sched_free_win_offset_calc+0x18e>
				u32_t ticks_prepare_to_start =
    e568:	6882      	ldr	r2, [r0, #8]
				ticks_slot_abs_curr =
    e56a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    e56e:	428a      	cmp	r2, r1
    e570:	bf2c      	ite	cs
    e572:	18b6      	addcs	r6, r6, r2
    e574:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
    e576:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
    e578:	68c2      	ldr	r2, [r0, #12]
    e57a:	f102 093d 	add.w	r9, r2, #61	; 0x3d
    e57e:	444b      	add	r3, r9
    e580:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    e582:	f8da 3000 	ldr.w	r3, [sl]
    e586:	429e      	cmp	r6, r3
    e588:	d916      	bls.n	e5b8 <sched_free_win_offset_calc+0x140>
    e58a:	429d      	cmp	r5, r3
    e58c:	bf38      	it	cc
    e58e:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
    e590:	9b07      	ldr	r3, [sp, #28]
    e592:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
    e596:	9b18      	ldr	r3, [sp, #96]	; 0x60
    e598:	781b      	ldrb	r3, [r3, #0]
    e59a:	42a3      	cmp	r3, r4
    e59c:	d905      	bls.n	e5aa <sched_free_win_offset_calc+0x132>
				       (ticker_ticks_diff_get(
    e59e:	4629      	mov	r1, r5
    e5a0:	4630      	mov	r0, r6
    e5a2:	f7fd fb9f 	bl	bce4 <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
    e5a6:	42b8      	cmp	r0, r7
    e5a8:	d231      	bcs.n	e60e <sched_free_win_offset_calc+0x196>
				if (_win_offset >= conn_interval) {
    e5aa:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    e5ae:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
    e5b0:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
    e5b4:	4293      	cmp	r3, r2
    e5b6:	d20b      	bcs.n	e5d0 <sched_free_win_offset_calc+0x158>
			ticks_anchor_prev = ticks_anchor;
    e5b8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
    e5bc:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    e5c0:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
    e5c4:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
    e5c6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    e5c8:	781b      	ldrb	r3, [r3, #0]
    e5ca:	42a3      	cmp	r3, r4
    e5cc:	f63f af78 	bhi.w	e4c0 <sched_free_win_offset_calc+0x48>
	if (ticker_id == 0xFF) {
    e5d0:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    e5d4:	2bff      	cmp	r3, #255	; 0xff
    e5d6:	d111      	bne.n	e5fc <sched_free_win_offset_calc+0x184>
    e5d8:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    e5dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; e6b0 <sched_free_win_offset_calc+0x238>
    e5e0:	a72f      	add	r7, pc, #188	; (adr r7, e6a0 <sched_free_win_offset_calc+0x228>)
    e5e2:	e9d7 6700 	ldrd	r6, r7, [r7]
    e5e6:	429d      	cmp	r5, r3
    e5e8:	bf38      	it	cc
    e5ea:	461d      	movcc	r5, r3
    e5ec:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
    e5f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    e5f2:	781b      	ldrb	r3, [r3, #0]
    e5f4:	42a3      	cmp	r3, r4
    e5f6:	d831      	bhi.n	e65c <sched_free_win_offset_calc+0x1e4>
		*ticks_to_offset_next = ticks_to_expire_prev;
    e5f8:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
    e5fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
    e5fe:	701c      	strb	r4, [r3, #0]
}
    e600:	b00f      	add	sp, #60	; 0x3c
    e602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u32_t ticks_prepare_to_start =
    e606:	428b      	cmp	r3, r1
    e608:	bf38      	it	cc
    e60a:	460b      	movcc	r3, r1
    e60c:	e7b4      	b.n	e578 <sched_free_win_offset_calc+0x100>
					_win_offset = HAL_TICKER_TICKS_TO_US(
    e60e:	4a28      	ldr	r2, [pc, #160]	; (e6b0 <sched_free_win_offset_calc+0x238>)
    e610:	eb05 030b 	add.w	r3, r5, fp
    e614:	fba3 0102 	umull	r0, r1, r3, r2
    e618:	2207      	movs	r2, #7
    e61a:	fb02 1103 	mla	r1, r2, r3, r1
    e61e:	a320      	add	r3, pc, #128	; (adr r3, e6a0 <sched_free_win_offset_calc+0x228>)
    e620:	e9d3 2300 	ldrd	r2, r3, [r3]
    e624:	f7f1 fe20 	bl	268 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    e628:	f240 43e2 	movw	r3, #1250	; 0x4e2
    e62c:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
    e630:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
    e632:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
    e634:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
    e636:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
    e63a:	d20b      	bcs.n	e654 <sched_free_win_offset_calc+0x1dc>
					memcpy(win_offset +
    e63c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    e63e:	2202      	movs	r2, #2
    e640:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    e644:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
    e648:	3401      	adds	r4, #1
					memcpy(win_offset +
    e64a:	f7f2 f8b7 	bl	7bc <memcpy>
					offset_index++;
    e64e:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
    e650:	3528      	adds	r5, #40	; 0x28
    e652:	e7a0      	b.n	e596 <sched_free_win_offset_calc+0x11e>
						ticks_to_expire_prev = 0;
    e654:	2500      	movs	r5, #0
    e656:	e7a8      	b.n	e5aa <sched_free_win_offset_calc+0x132>
    e658:	9206      	str	r2, [sp, #24]
    e65a:	e7b4      	b.n	e5c6 <sched_free_win_offset_calc+0x14e>
			_win_offset = HAL_TICKER_TICKS_TO_US(
    e65c:	eb05 030b 	add.w	r3, r5, fp
    e660:	fba3 0108 	umull	r0, r1, r3, r8
    e664:	fb09 1103 	mla	r1, r9, r3, r1
    e668:	4632      	mov	r2, r6
    e66a:	463b      	mov	r3, r7
    e66c:	f7f1 fdfc 	bl	268 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
    e670:	f240 43e2 	movw	r3, #1250	; 0x4e2
    e674:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
    e678:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    e67a:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
    e67c:	4283      	cmp	r3, r0
			_win_offset = HAL_TICKER_TICKS_TO_US(
    e67e:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
    e682:	d90b      	bls.n	e69c <sched_free_win_offset_calc+0x224>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    e684:	9b19      	ldr	r3, [sp, #100]	; 0x64
    e686:	2202      	movs	r2, #2
    e688:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    e68c:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
    e690:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    e692:	f7f2 f893 	bl	7bc <memcpy>
			offset_index++;
    e696:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    e698:	3528      	adds	r5, #40	; 0x28
    e69a:	e7a9      	b.n	e5f0 <sched_free_win_offset_calc+0x178>
				ticks_to_expire_prev = 0;
    e69c:	2500      	movs	r5, #0
    e69e:	e7ab      	b.n	e5f8 <sched_free_win_offset_calc+0x180>
    e6a0:	3b9aca00 	.word	0x3b9aca00
    e6a4:	00000000 	.word	0x00000000
    e6a8:	0000d7dd 	.word	0x0000d7dd
    e6ac:	20000c08 	.word	0x20000c08
    e6b0:	1afd498d 	.word	0x1afd498d

0000e6b4 <mayfly_sched_free_win_offset_calc>:
{
    e6b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
    e6b6:	2300      	movs	r3, #0
    e6b8:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
    e6ba:	2306      	movs	r3, #6
    e6bc:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
    e6c0:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    e6c4:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
    e6c8:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
    e6ca:	bfbe      	ittt	lt
    e6cc:	4602      	movlt	r2, r0
    e6ce:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
    e6d0:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    e6d4:	9101      	str	r1, [sp, #4]
    e6d6:	f10d 010b 	add.w	r1, sp, #11
    e6da:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
    e6dc:	bfa8      	it	ge
    e6de:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    e6e0:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
    e6e4:	2100      	movs	r1, #0
    e6e6:	f7ff fec7 	bl	e478 <sched_free_win_offset_calc>
}
    e6ea:	b005      	add	sp, #20
    e6ec:	f85d fb04 	ldr.w	pc, [sp], #4

0000e6f0 <mayfly_sched_win_offset_select>:
{
    e6f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    e6f4:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
{
    e6f8:	b089      	sub	sp, #36	; 0x24
    e6fa:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    e6fc:	4840      	ldr	r0, [pc, #256]	; (e800 <mayfly_sched_win_offset_select+0x110>)
	u8_t offset_m_max = OFFSET_M_MAX;
    e6fe:	2306      	movs	r3, #6
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    e700:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    e702:	fba2 0100 	umull	r0, r1, r2, r0
	u8_t offset_m_max = OFFSET_M_MAX;
    e706:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    e70a:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    e70e:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    e710:	fb03 1102 	mla	r1, r3, r2, r1
    e714:	a338      	add	r3, pc, #224	; (adr r3, e7f8 <mayfly_sched_win_offset_select+0x108>)
    e716:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    e71a:	9505      	str	r5, [sp, #20]
    e71c:	6075      	str	r5, [r6, #4]
    e71e:	60b5      	str	r5, [r6, #8]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    e720:	f7f1 fda2 	bl	268 <__aeabi_uldivmod>
    e724:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    e726:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    e72a:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    e72e:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    e732:	9100      	str	r1, [sp, #0]
    e734:	9601      	str	r6, [sp, #4]
    e736:	2101      	movs	r1, #1
    e738:	4620      	mov	r0, r4
    e73a:	f7ff fe9d 	bl	e478 <sched_free_win_offset_calc>
    e73e:	f104 07ce 	add.w	r7, r4, #206	; 0xce
    e742:	f104 08da 	add.w	r8, r4, #218	; 0xda
			if (win_offset_s != 0xffff) {
    e746:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
    e74a:	2202      	movs	r2, #2
    e74c:	4639      	mov	r1, r7
    e74e:	f10d 000e 	add.w	r0, sp, #14
    e752:	f7f2 f833 	bl	7bc <memcpy>
		while (offset_index_m < offset_m_max) {
    e756:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
    e75a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
    e75e:	2300      	movs	r3, #0
    e760:	b2d9      	uxtb	r1, r3
    e762:	4288      	cmp	r0, r1
    e764:	d811      	bhi.n	e78a <mayfly_sched_win_offset_select+0x9a>
    e766:	3702      	adds	r7, #2
	while (offset_index_s < OFFSET_S_MAX) {
    e768:	4547      	cmp	r7, r8
    e76a:	d1ee      	bne.n	e74a <mayfly_sched_win_offset_select+0x5a>
	} else if (!has_offset_s) {
    e76c:	b9b5      	cbnz	r5, e79c <mayfly_sched_win_offset_select+0xac>
			win_offset_m[0] * 1250;
    e76e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e772:	f240 43e2 	movw	r3, #1250	; 0x4e2
    e776:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    e778:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    e77c:	2202      	movs	r2, #2
    e77e:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    e780:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    e784:	f7f2 f81a 	bl	7bc <memcpy>
    e788:	e027      	b.n	e7da <mayfly_sched_win_offset_select+0xea>
			if (win_offset_s != 0xffff) {
    e78a:	454a      	cmp	r2, r9
    e78c:	d004      	beq.n	e798 <mayfly_sched_win_offset_select+0xa8>
				if (win_offset_s ==
    e78e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    e792:	4291      	cmp	r1, r2
    e794:	d024      	beq.n	e7e0 <mayfly_sched_win_offset_select+0xf0>
				has_offset_s = 1;
    e796:	2501      	movs	r5, #1
    e798:	3301      	adds	r3, #1
    e79a:	e7e1      	b.n	e760 <mayfly_sched_win_offset_select+0x70>
		conn->llcp_ack = conn->llcp_req;
    e79c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    e7a0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    e7a4:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    e7a8:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    e7ac:	4b15      	ldr	r3, [pc, #84]	; (e804 <mayfly_sched_win_offset_select+0x114>)
    e7ae:	2200      	movs	r2, #0
    e7b0:	f8c3 2d70 	str.w	r2, [r3, #3440]	; 0xd70
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
    e7b4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e7b8:	f813 2c05 	ldrb.w	r2, [r3, #-5]
    e7bc:	f042 0203 	orr.w	r2, r2, #3
    e7c0:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    e7c4:	2203      	movs	r2, #3
    e7c6:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    e7ca:	2211      	movs	r2, #17
    e7cc:	f803 2c02 	strb.w	r2, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    e7d0:	220f      	movs	r2, #15
    e7d2:	f803 2c01 	strb.w	r2, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    e7d6:	2220      	movs	r2, #32
    e7d8:	701a      	strb	r2, [r3, #0]
}
    e7da:	b009      	add	sp, #36	; 0x24
    e7dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
    e7e0:	f240 43e2 	movw	r3, #1250	; 0x4e2
    e7e4:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    e7e6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    e7ea:	2202      	movs	r2, #2
    e7ec:	f10d 010e 	add.w	r1, sp, #14
    e7f0:	e7c6      	b.n	e780 <mayfly_sched_win_offset_select+0x90>
    e7f2:	bf00      	nop
    e7f4:	f3af 8000 	nop.w
    e7f8:	1afd498d 	.word	0x1afd498d
    e7fc:	00000007 	.word	0x00000007
    e800:	09ce5400 	.word	0x09ce5400
    e804:	20000c08 	.word	0x20000c08

0000e808 <sched_after_mstr_free_slot_get>:
{
    e808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e80c:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    e80e:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    e810:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    e812:	f8df 9114 	ldr.w	r9, [pc, #276]	; e928 <sched_after_mstr_free_slot_get+0x120>
	ticker_id = ticker_id_prev = 0xff;
    e816:	f88d 501f 	strb.w	r5, [sp, #31]
{
    e81a:	4680      	mov	r8, r0
    e81c:	4693      	mov	fp, r2
    e81e:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    e820:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    e824:	601c      	str	r4, [r3, #0]
    e826:	9408      	str	r4, [sp, #32]
    e828:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    e82a:	2302      	movs	r3, #2
    e82c:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    e82e:	ab09      	add	r3, sp, #36	; 0x24
    e830:	9302      	str	r3, [sp, #8]
    e832:	4b3b      	ldr	r3, [pc, #236]	; (e920 <sched_after_mstr_free_slot_get+0x118>)
    e834:	9301      	str	r3, [sp, #4]
    e836:	ab08      	add	r3, sp, #32
    e838:	9300      	str	r3, [sp, #0]
    e83a:	f10d 021f 	add.w	r2, sp, #31
    e83e:	465b      	mov	r3, fp
    e840:	4641      	mov	r1, r8
    e842:	2000      	movs	r0, #0
    e844:	f7fd f9b8 	bl	bbb8 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    e848:	2802      	cmp	r0, #2
    e84a:	d00b      	beq.n	e864 <sched_after_mstr_free_slot_get+0x5c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    e84c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e84e:	b16b      	cbz	r3, e86c <sched_after_mstr_free_slot_get+0x64>
    e850:	4040      	eors	r0, r0
    e852:	f380 8811 	msr	BASEPRI, r0
    e856:	f04f 0004 	mov.w	r0, #4
    e85a:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    e85c:	4641      	mov	r1, r8
    e85e:	2000      	movs	r0, #0
    e860:	f7fd fa28 	bl	bcb4 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    e864:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e866:	2b02      	cmp	r3, #2
    e868:	d0f8      	beq.n	e85c <sched_after_mstr_free_slot_get+0x54>
    e86a:	e7ef      	b.n	e84c <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    e86c:	f89d 201f 	ldrb.w	r2, [sp, #31]
    e870:	2aff      	cmp	r2, #255	; 0xff
    e872:	d04e      	beq.n	e912 <sched_after_mstr_free_slot_get+0x10a>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    e874:	2a06      	cmp	r2, #6
    e876:	d9d8      	bls.n	e82a <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    e878:	f899 3cf8 	ldrb.w	r3, [r9, #3320]	; 0xcf8
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    e87c:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    e87e:	429a      	cmp	r2, r3
    e880:	dad3      	bge.n	e82a <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    e882:	3a07      	subs	r2, #7
    e884:	b292      	uxth	r2, r2
    e886:	f44f 71aa 	mov.w	r1, #340	; 0x154
    e88a:	f8d9 0cf0 	ldr.w	r0, [r9, #3312]	; 0xcf0
    e88e:	f7fc fa79 	bl	ad84 <mem_get>
		if (conn && !conn->role) {
    e892:	2800      	cmp	r0, #0
    e894:	d0c9      	beq.n	e82a <sched_after_mstr_free_slot_get+0x22>
    e896:	f990 301d 	ldrsb.w	r3, [r0, #29]
    e89a:	2b00      	cmp	r3, #0
    e89c:	dbc5      	blt.n	e82a <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    e89e:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    e8a0:	9a08      	ldr	r2, [sp, #32]
    e8a2:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    e8a6:	2b00      	cmp	r3, #0
    e8a8:	da12      	bge.n	e8d0 <sched_after_mstr_free_slot_get+0xc8>
    e8aa:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    e8ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    e8b0:	4571      	cmp	r1, lr
    e8b2:	bf2c      	ite	cs
    e8b4:	1852      	addcs	r2, r2, r1
    e8b6:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    e8b8:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    e8ba:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    e8bc:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    e8be:	f101 0104 	add.w	r1, r1, #4
    e8c2:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    e8c4:	d108      	bne.n	e8d8 <sched_after_mstr_free_slot_get+0xd0>
			ticker_id_prev = ticker_id;
    e8c6:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    e8ca:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    e8cc:	4616      	mov	r6, r2
    e8ce:	e7ac      	b.n	e82a <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    e8d0:	4573      	cmp	r3, lr
    e8d2:	bf38      	it	cc
    e8d4:	4673      	movcc	r3, lr
    e8d6:	e7f0      	b.n	e8ba <sched_after_mstr_free_slot_get+0xb2>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    e8d8:	4631      	mov	r1, r6
    e8da:	4610      	mov	r0, r2
    e8dc:	9305      	str	r3, [sp, #20]
    e8de:	9204      	str	r2, [sp, #16]
    e8e0:	f7fd fa00 	bl	bce4 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    e8e4:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    e8e8:	4288      	cmp	r0, r1
    e8ea:	9a04      	ldr	r2, [sp, #16]
    e8ec:	9b05      	ldr	r3, [sp, #20]
    e8ee:	d9ea      	bls.n	e8c6 <sched_after_mstr_free_slot_get+0xbe>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    e8f0:	480c      	ldr	r0, [pc, #48]	; (e924 <sched_after_mstr_free_slot_get+0x11c>)
    e8f2:	4434      	add	r4, r6
    e8f4:	fba4 0100 	umull	r0, r1, r4, r0
    e8f8:	2307      	movs	r3, #7
    e8fa:	fb03 1104 	mla	r1, r3, r4, r1
    e8fe:	a306      	add	r3, pc, #24	; (adr r3, e918 <sched_after_mstr_free_slot_get+0x110>)
    e900:	e9d3 2300 	ldrd	r2, r3, [r3]
    e904:	f7f1 fcb0 	bl	268 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    e908:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    e90a:	6038      	str	r0, [r7, #0]
}
    e90c:	b00b      	add	sp, #44	; 0x2c
    e90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    e912:	2dff      	cmp	r5, #255	; 0xff
    e914:	d1ec      	bne.n	e8f0 <sched_after_mstr_free_slot_get+0xe8>
    e916:	e7f9      	b.n	e90c <sched_after_mstr_free_slot_get+0x104>
    e918:	3b9aca00 	.word	0x3b9aca00
    e91c:	00000000 	.word	0x00000000
    e920:	0000d7dd 	.word	0x0000d7dd
    e924:	1afd498d 	.word	0x1afd498d
    e928:	20000c08 	.word	0x20000c08

0000e92c <isr_adv_ci_adva_check>:
{
    e92c:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    e92e:	7804      	ldrb	r4, [r0, #0]
    e930:	780a      	ldrb	r2, [r1, #0]
    e932:	f3c4 1380 	ubfx	r3, r4, #6, #1
    e936:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    e93a:	d119      	bne.n	e970 <isr_adv_ci_adva_check+0x44>
    e93c:	f004 040f 	and.w	r4, r4, #15
    e940:	2c01      	cmp	r4, #1
    e942:	f101 0608 	add.w	r6, r1, #8
    e946:	f100 0502 	add.w	r5, r0, #2
    e94a:	d008      	beq.n	e95e <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    e94c:	2206      	movs	r2, #6
    e94e:	4631      	mov	r1, r6
    e950:	4628      	mov	r0, r5
    e952:	f7f1 ff06 	bl	762 <memcmp>
			 BDADDR_SIZE)) ||
    e956:	fab0 f080 	clz	r0, r0
    e95a:	0940      	lsrs	r0, r0, #5
    e95c:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    e95e:	2206      	movs	r2, #6
    e960:	4631      	mov	r1, r6
    e962:	4628      	mov	r0, r5
    e964:	f7f1 fefd 	bl	762 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    e968:	2800      	cmp	r0, #0
    e96a:	d1ef      	bne.n	e94c <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    e96c:	4620      	mov	r0, r4
    e96e:	bd70      	pop	{r4, r5, r6, pc}
    e970:	2000      	movs	r0, #0
}
    e972:	bd70      	pop	{r4, r5, r6, pc}

0000e974 <isr_scan_tgta_check>:
{
    e974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e978:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    e97a:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    e97c:	f101 0808 	add.w	r8, r1, #8
{
    e980:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    e982:	09c0      	lsrs	r0, r0, #7
    e984:	4641      	mov	r1, r8
{
    e986:	4691      	mov	r9, r2
    e988:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    e98a:	f008 f805 	bl	16998 <ctrl_rl_addr_resolve>
    e98e:	4604      	mov	r4, r0
    e990:	b9d8      	cbnz	r0, e9ca <isr_scan_tgta_check+0x56>
    e992:	4f1c      	ldr	r7, [pc, #112]	; (ea04 <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    e994:	f1ba 0f00 	cmp.w	sl, #0
    e998:	d10e      	bne.n	e9b8 <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    e99a:	782b      	ldrb	r3, [r5, #0]
    e99c:	f897 2c2d 	ldrb.w	r2, [r7, #3117]	; 0xc2d
			BDADDR_SIZE) == 0))) ||
    e9a0:	09db      	lsrs	r3, r3, #7
    e9a2:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    e9a6:	d113      	bne.n	e9d0 <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
    e9a8:	2206      	movs	r2, #6
    e9aa:	4641      	mov	r1, r8
    e9ac:	4816      	ldr	r0, [pc, #88]	; (ea08 <isr_scan_tgta_check+0x94>)
    e9ae:	f7f1 fed8 	bl	762 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    e9b2:	b968      	cbnz	r0, e9d0 <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
    e9b4:	2001      	movs	r0, #1
    e9b6:	e012      	b.n	e9de <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    e9b8:	f897 3c2e 	ldrb.w	r3, [r7, #3118]	; 0xc2e
    e9bc:	07db      	lsls	r3, r3, #31
    e9be:	d5ec      	bpl.n	e99a <isr_scan_tgta_check+0x26>
    e9c0:	4648      	mov	r0, r9
    e9c2:	f007 fde3 	bl	1658c <ctrl_lrpa_get>
    e9c6:	2800      	cmp	r0, #0
    e9c8:	d0e7      	beq.n	e99a <isr_scan_tgta_check+0x26>
}
    e9ca:	4620      	mov	r0, r4
    e9cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    e9d0:	f897 0c2d 	ldrb.w	r0, [r7, #3117]	; 0xc2d
    e9d4:	f3c0 1001 	ubfx	r0, r0, #4, #2
    e9d8:	f010 0002 	ands.w	r0, r0, #2
    e9dc:	d101      	bne.n	e9e2 <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
    e9de:	4604      	mov	r4, r0
    e9e0:	e7f3      	b.n	e9ca <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    e9e2:	f995 3000 	ldrsb.w	r3, [r5]
    e9e6:	2b00      	cmp	r3, #0
    e9e8:	da09      	bge.n	e9fe <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
    e9ea:	7b6b      	ldrb	r3, [r5, #13]
    e9ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e9f0:	2b40      	cmp	r3, #64	; 0x40
    e9f2:	d104      	bne.n	e9fe <isr_scan_tgta_check+0x8a>
		if (dir_report) {
    e9f4:	2e00      	cmp	r6, #0
    e9f6:	d0dd      	beq.n	e9b4 <isr_scan_tgta_check+0x40>
			*dir_report = true;
    e9f8:	2001      	movs	r0, #1
    e9fa:	7030      	strb	r0, [r6, #0]
    e9fc:	e7ef      	b.n	e9de <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
    e9fe:	2000      	movs	r0, #0
    ea00:	e7ed      	b.n	e9de <isr_scan_tgta_check+0x6a>
    ea02:	bf00      	nop
    ea04:	20000c08 	.word	0x20000c08
    ea08:	20001838 	.word	0x20001838

0000ea0c <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    ea0c:	4a0b      	ldr	r2, [pc, #44]	; (ea3c <rx_fc_lock+0x30>)
    ea0e:	f892 3d68 	ldrb.w	r3, [r2, #3432]	; 0xd68
    ea12:	f892 1d69 	ldrb.w	r1, [r2, #3433]	; 0xd69
    ea16:	4299      	cmp	r1, r3
    ea18:	d10e      	bne.n	ea38 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    ea1a:	f892 3d68 	ldrb.w	r3, [r2, #3432]	; 0xd68
    ea1e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    ea22:	f8a3 0d62 	strh.w	r0, [r3, #3426]	; 0xd62
		req = _radio.fc_req + 1;
    ea26:	f892 3d68 	ldrb.w	r3, [r2, #3432]	; 0xd68
    ea2a:	3301      	adds	r3, #1
    ea2c:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    ea2e:	2b03      	cmp	r3, #3
    ea30:	bf08      	it	eq
    ea32:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    ea34:	f882 3d68 	strb.w	r3, [r2, #3432]	; 0xd68
    ea38:	4770      	bx	lr
    ea3a:	bf00      	nop
    ea3c:	20000c08 	.word	0x20000c08

0000ea40 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    ea40:	4b04      	ldr	r3, [pc, #16]	; (ea54 <ticker_job_disable+0x14>)
    ea42:	7d1b      	ldrb	r3, [r3, #20]
    ea44:	b123      	cbz	r3, ea50 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    ea46:	2101      	movs	r1, #1
    ea48:	2200      	movs	r2, #0
    ea4a:	4608      	mov	r0, r1
    ea4c:	f7fc ba08 	b.w	ae60 <mayfly_enable>
    ea50:	4770      	bx	lr
    ea52:	bf00      	nop
    ea54:	20000c08 	.word	0x20000c08

0000ea58 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    ea58:	2806      	cmp	r0, #6
{
    ea5a:	b510      	push	{r4, lr}
    ea5c:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    ea5e:	d90a      	bls.n	ea76 <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    ea60:	4b09      	ldr	r3, [pc, #36]	; (ea88 <hdr_conn_get+0x30>)
    ea62:	1fc2      	subs	r2, r0, #7
    ea64:	b292      	uxth	r2, r2
    ea66:	f44f 71aa 	mov.w	r1, #340	; 0x154
    ea6a:	f8d3 0cf0 	ldr.w	r0, [r3, #3312]	; 0xcf0
    ea6e:	f7fc f989 	bl	ad84 <mem_get>
    ea72:	6020      	str	r0, [r4, #0]
    ea74:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    ea76:	2805      	cmp	r0, #5
    ea78:	d004      	beq.n	ea84 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    ea7a:	2806      	cmp	r0, #6
	return NULL;
    ea7c:	4803      	ldr	r0, [pc, #12]	; (ea8c <hdr_conn_get+0x34>)
    ea7e:	bf18      	it	ne
    ea80:	2000      	movne	r0, #0
    ea82:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    ea84:	4802      	ldr	r0, [pc, #8]	; (ea90 <hdr_conn_get+0x38>)
}
    ea86:	bd10      	pop	{r4, pc}
    ea88:	20000c08 	.word	0x20000c08
    ea8c:	20001824 	.word	0x20001824
    ea90:	20000c20 	.word	0x20000c20

0000ea94 <mayfly_xtal_retain.part.14>:
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
    ea94:	b508      	push	{r3, lr}
			s_xtal_retained = 0;
    ea96:	4b0a      	ldr	r3, [pc, #40]	; (eac0 <mayfly_xtal_retain.part.14+0x2c>)
    ea98:	2200      	movs	r2, #0
    ea9a:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
    ea9c:	b168      	cbz	r0, eaba <mayfly_xtal_retain.part.14+0x26>
    ea9e:	2801      	cmp	r0, #1
    eaa0:	d105      	bne.n	eaae <mayfly_xtal_retain.part.14+0x1a>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    eaa2:	4b08      	ldr	r3, [pc, #32]	; (eac4 <mayfly_xtal_retain.part.14+0x30>)
			retval = mayfly_enqueue(caller_id,
    eaa4:	2200      	movs	r2, #0
    eaa6:	4611      	mov	r1, r2
    eaa8:	f7fc fa02 	bl	aeb0 <mayfly_enqueue>
			LL_ASSERT(!retval);
    eaac:	b138      	cbz	r0, eabe <mayfly_xtal_retain.part.14+0x2a>
    eaae:	4040      	eors	r0, r0
    eab0:	f380 8811 	msr	BASEPRI, r0
    eab4:	f04f 0004 	mov.w	r0, #4
    eab8:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    eaba:	4b03      	ldr	r3, [pc, #12]	; (eac8 <mayfly_xtal_retain.part.14+0x34>)
    eabc:	e7f2      	b.n	eaa4 <mayfly_xtal_retain.part.14+0x10>
    eabe:	bd08      	pop	{r3, pc}
    eac0:	20001a2c 	.word	0x20001a2c
    eac4:	2000e1f0 	.word	0x2000e1f0
    eac8:	2000e1e0 	.word	0x2000e1e0

0000eacc <event_active.part.15>:
	LL_ASSERT(!_radio.ticker_id_prepare);
    eacc:	4040      	eors	r0, r0
    eace:	f380 8811 	msr	BASEPRI, r0
    ead2:	f04f 0004 	mov.w	r0, #4
    ead6:	df02      	svc	2

0000ead8 <prepare_normal_set>:
{
    ead8:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    eada:	6804      	ldr	r4, [r0, #0]
    eadc:	2c00      	cmp	r4, #0
{
    eade:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    eae0:	da19      	bge.n	eb16 <prepare_normal_set+0x3e>
		u32_t ticks_prepare_to_start =
    eae2:	6843      	ldr	r3, [r0, #4]
    eae4:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    eae6:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    eae8:	429d      	cmp	r5, r3
    eaea:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    eaee:	bf34      	ite	cc
    eaf0:	1ae4      	subcc	r4, r4, r3
    eaf2:	1b64      	subcs	r4, r4, r5
		ticker_status =
    eaf4:	4b09      	ldr	r3, [pc, #36]	; (eb1c <prepare_normal_set+0x44>)
    eaf6:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    eaf8:	b2a4      	uxth	r4, r4
		ticker_status =
    eafa:	2300      	movs	r3, #0
    eafc:	9304      	str	r3, [sp, #16]
    eafe:	9303      	str	r3, [sp, #12]
    eb00:	9302      	str	r3, [sp, #8]
    eb02:	4618      	mov	r0, r3
    eb04:	9401      	str	r4, [sp, #4]
    eb06:	9400      	str	r4, [sp, #0]
    eb08:	f7fc ffcc 	bl	baa4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    eb0c:	f030 0302 	bics.w	r3, r0, #2
    eb10:	d001      	beq.n	eb16 <prepare_normal_set+0x3e>
    eb12:	f7ff ffdb 	bl	eacc <event_active.part.15>
}
    eb16:	b009      	add	sp, #36	; 0x24
    eb18:	bd30      	pop	{r4, r5, pc}
    eb1a:	bf00      	nop
    eb1c:	0000d7ed 	.word	0x0000d7ed

0000eb20 <scan_ticker_enable>:
static void scan_ticker_enable (void){
    eb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			HAL_TICKER_US_TO_TICKS((u64_t) _radio.scanner.interval * 625),
    eb24:	4f2c      	ldr	r7, [pc, #176]	; (ebd8 <scan_ticker_enable+0xb8>)
static void scan_ticker_enable (void){
    eb26:	b08a      	sub	sp, #40	; 0x28
	ticks_anchor = ticker_ticks_now_get();
    eb28:	f7fd f8da 	bl	bce0 <ticker_ticks_now_get>
			HAL_TICKER_US_TO_TICKS((u64_t) _radio.scanner.interval * 625),
    eb2c:	f8d7 8c40 	ldr.w	r8, [r7, #3136]	; 0xc40
			HAL_TICKER_REMAINDER((u64_t) (_radio.scanner.interval * 625)),
    eb30:	4b2a      	ldr	r3, [pc, #168]	; (ebdc <scan_ticker_enable+0xbc>)
    eb32:	f240 2471 	movw	r4, #625	; 0x271
    eb36:	fb04 f408 	mul.w	r4, r4, r8
    eb3a:	fba4 4503 	umull	r4, r5, r4, r3
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    eb3e:	f642 63ed 	movw	r3, #12013	; 0x2eed
    eb42:	9308      	str	r3, [sp, #32]
    eb44:	4b26      	ldr	r3, [pc, #152]	; (ebe0 <scan_ticker_enable+0xc0>)
    eb46:	9307      	str	r3, [sp, #28]
    eb48:	2600      	movs	r6, #0
    eb4a:	4b26      	ldr	r3, [pc, #152]	; (ebe4 <scan_ticker_enable+0xc4>)
    eb4c:	9606      	str	r6, [sp, #24]
    eb4e:	9305      	str	r3, [sp, #20]
    eb50:	f8d7 2c28 	ldr.w	r2, [r7, #3112]	; 0xc28
    eb54:	f8d7 3c44 	ldr.w	r3, [r7, #3140]	; 0xc44
    eb58:	9603      	str	r6, [sp, #12]
    eb5a:	4413      	add	r3, r2
    eb5c:	9304      	str	r3, [sp, #16]
			HAL_TICKER_REMAINDER((u64_t) (_radio.scanner.interval * 625)),
    eb5e:	4620      	mov	r0, r4
    eb60:	a31b      	add	r3, pc, #108	; (adr r3, ebd0 <scan_ticker_enable+0xb0>)
    eb62:	e9d3 2300 	ldrd	r2, r3, [r3]
    eb66:	4629      	mov	r1, r5
    eb68:	f7f1 fb7e 	bl	268 <__aeabi_uldivmod>
    eb6c:	4a1e      	ldr	r2, [pc, #120]	; (ebe8 <scan_ticker_enable+0xc8>)
    eb6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    eb72:	2307      	movs	r3, #7
    eb74:	2100      	movs	r1, #0
    eb76:	4343      	muls	r3, r0
    eb78:	fb02 3301 	mla	r3, r2, r1, r3
    eb7c:	fba0 0102 	umull	r0, r1, r0, r2
    eb80:	1a20      	subs	r0, r4, r0
    eb82:	4419      	add	r1, r3
    eb84:	eb65 0101 	sbc.w	r1, r5, r1
    eb88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    eb8c:	2300      	movs	r3, #0
    eb8e:	f7f1 fb6b 	bl	268 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    eb92:	9002      	str	r0, [sp, #8]
			HAL_TICKER_US_TO_TICKS((u64_t) _radio.scanner.interval * 625),
    eb94:	4815      	ldr	r0, [pc, #84]	; (ebec <scan_ticker_enable+0xcc>)
    eb96:	2391      	movs	r3, #145	; 0x91
    eb98:	fba8 0100 	umull	r0, r1, r8, r0
    eb9c:	fb03 1108 	mla	r1, r3, r8, r1
    eba0:	a30b      	add	r3, pc, #44	; (adr r3, ebd0 <scan_ticker_enable+0xb0>)
    eba2:	e9d3 2300 	ldrd	r2, r3, [r3]
    eba6:	f7f1 fb5f 	bl	268 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ebaa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ebae:	9001      	str	r0, [sp, #4]
    ebb0:	9600      	str	r6, [sp, #0]
    ebb2:	f8d7 3cec 	ldr.w	r3, [r7, #3308]	; 0xcec
    ebb6:	2206      	movs	r2, #6
    ebb8:	4631      	mov	r1, r6
    ebba:	4630      	mov	r0, r6
    ebbc:	f7fc ff22 	bl	ba04 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    ebc0:	f030 0302 	bics.w	r3, r0, #2
    ebc4:	d001      	beq.n	ebca <scan_ticker_enable+0xaa>
    ebc6:	f7ff ff81 	bl	eacc <event_active.part.15>
}
    ebca:	b00a      	add	sp, #40	; 0x28
    ebcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ebd0:	1afd498d 	.word	0x1afd498d
    ebd4:	00000007 	.word	0x00000007
    ebd8:	20000c08 	.word	0x20000c08
    ebdc:	3b9aca00 	.word	0x3b9aca00
    ebe0:	0000f29d 	.word	0x0000f29d
    ebe4:	0000f4c5 	.word	0x0000f4c5
    ebe8:	1afd498d 	.word	0x1afd498d
    ebec:	84e72a00 	.word	0x84e72a00

0000ebf0 <aux_packet_function>:
scan_ticker_enable();	
    ebf0:	f7ff bf96 	b.w	eb20 <scan_ticker_enable>

0000ebf4 <terminate_ind_rx_enqueue>:
{
    ebf4:	b510      	push	{r4, lr}
    ebf6:	4603      	mov	r3, r0
    ebf8:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    ebfa:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
    ebfe:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
    ec02:	b908      	cbnz	r0, ec08 <terminate_ind_rx_enqueue+0x14>
    ec04:	f7ff ff62 	bl	eacc <event_active.part.15>
	node_rx->hdr.handle = conn->handle;
    ec08:	8c1c      	ldrh	r4, [r3, #32]
    ec0a:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
    ec0e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    ec12:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    ec14:	4a0a      	ldr	r2, [pc, #40]	; (ec40 <terminate_ind_rx_enqueue+0x4c>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    ec16:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    ec1a:	f892 4d60 	ldrb.w	r4, [r2, #3424]	; 0xd60
    ec1e:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    ec22:	f602 5238 	addw	r2, r2, #3384	; 0xd38
    ec26:	f7fc f8d2 	bl	adce <memq_enqueue>
	LL_ASSERT(link);
    ec2a:	b928      	cbnz	r0, ec38 <terminate_ind_rx_enqueue+0x44>
    ec2c:	4040      	eors	r0, r0
    ec2e:	f380 8811 	msr	BASEPRI, r0
    ec32:	f04f 0004 	mov.w	r0, #4
    ec36:	df02      	svc	2
}
    ec38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    ec3c:	f006 bd68 	b.w	15710 <radio_event_callback>
    ec40:	20000c08 	.word	0x20000c08

0000ec44 <packet_rx_enqueue>:
{
    ec44:	b510      	push	{r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    ec46:	4a16      	ldr	r2, [pc, #88]	; (eca0 <packet_rx_enqueue+0x5c>)
    ec48:	f892 3d29 	ldrb.w	r3, [r2, #3369]	; 0xd29
    ec4c:	f892 1d2a 	ldrb.w	r1, [r2, #3370]	; 0xd2a
    ec50:	4299      	cmp	r1, r3
    ec52:	d101      	bne.n	ec58 <packet_rx_enqueue+0x14>
    ec54:	f7ff ff3a 	bl	eacc <event_active.part.15>
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    ec58:	f892 1d29 	ldrb.w	r1, [r2, #3369]	; 0xd29
    ec5c:	f8d2 3d24 	ldr.w	r3, [r2, #3364]	; 0xd24
    ec60:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    ec64:	f892 3d60 	ldrb.w	r3, [r2, #3424]	; 0xd60
	link = node_rx->hdr.onion.link;
    ec68:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    ec6a:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    ec6c:	f892 3d29 	ldrb.w	r3, [r2, #3369]	; 0xd29
	if (last == _radio.packet_rx_count) {
    ec70:	f892 4d28 	ldrb.w	r4, [r2, #3368]	; 0xd28
	last = _radio.packet_rx_last + 1;
    ec74:	3301      	adds	r3, #1
    ec76:	b2db      	uxtb	r3, r3
		last = 0;
    ec78:	429c      	cmp	r4, r3
    ec7a:	bf08      	it	eq
    ec7c:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    ec7e:	f882 3d29 	strb.w	r3, [r2, #3369]	; 0xd29
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    ec82:	f602 5238 	addw	r2, r2, #3384	; 0xd38
    ec86:	f7fc f8a2 	bl	adce <memq_enqueue>
	LL_ASSERT(link);
    ec8a:	b928      	cbnz	r0, ec98 <packet_rx_enqueue+0x54>
    ec8c:	4040      	eors	r0, r0
    ec8e:	f380 8811 	msr	BASEPRI, r0
    ec92:	f04f 0004 	mov.w	r0, #4
    ec96:	df02      	svc	2
}
    ec98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    ec9c:	f006 bd38 	b.w	15710 <radio_event_callback>
    eca0:	20000c08 	.word	0x20000c08

0000eca4 <mayfly_adv_stop>:
{
    eca4:	b510      	push	{r4, lr}
	node_rx = packet_rx_reserve_get(1);
    eca6:	2001      	movs	r0, #1
    eca8:	f7fe fdd8 	bl	d85c <packet_rx_reserve_get>
	LL_ASSERT(node_rx);
    ecac:	4604      	mov	r4, r0
    ecae:	b908      	cbnz	r0, ecb4 <mayfly_adv_stop+0x10>
    ecb0:	f7ff ff0c 	bl	eacc <event_active.part.15>
	node_rx->hdr.handle = 0xffff;
    ecb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ecb8:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ecba:	2306      	movs	r3, #6
    ecbc:	7103      	strb	r3, [r0, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    ecbe:	221d      	movs	r2, #29
    ecc0:	2100      	movs	r1, #0
    ecc2:	300b      	adds	r0, #11
    ecc4:	f7f1 fda6 	bl	814 <memset>
	radio_le_conn_cmplt->status = 0x3c;
    ecc8:	233c      	movs	r3, #60	; 0x3c
    ecca:	72e3      	strb	r3, [r4, #11]
}
    eccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_enqueue();
    ecd0:	f7ff bfb8 	b.w	ec44 <packet_rx_enqueue>

0000ecd4 <isr_rx_scan_report>:
{
    ecd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ecd8:	4681      	mov	r9, r0
	node_rx = packet_rx_reserve_get(3);
    ecda:	2003      	movs	r0, #3
{
    ecdc:	460f      	mov	r7, r1
    ecde:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
    ece0:	f7fe fdbc 	bl	d85c <packet_rx_reserve_get>
	if (node_rx == 0) {
    ece4:	4604      	mov	r4, r0
    ece6:	b3a0      	cbz	r0, ed52 <isr_rx_scan_report+0x7e>
	node_rx->hdr.handle = 0xffff;
    ece8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ecec:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    ecee:	4b1a      	ldr	r3, [pc, #104]	; (ed58 <isr_rx_scan_report+0x84>)
    ecf0:	f893 3c2d 	ldrb.w	r3, [r3, #3117]	; 0xc2d
    ecf4:	075a      	lsls	r2, r3, #29
    ecf6:	d028      	beq.n	ed4a <isr_rx_scan_report+0x76>
		switch (_radio.scanner.phy) {
    ecf8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ecfc:	b2da      	uxtb	r2, r3
    ecfe:	2a01      	cmp	r2, #1
    ed00:	d007      	beq.n	ed12 <isr_rx_scan_report+0x3e>
    ed02:	2a04      	cmp	r2, #4
    ed04:	d006      	beq.n	ed14 <isr_rx_scan_report+0x40>
			LL_ASSERT(0);
    ed06:	4040      	eors	r0, r0
    ed08:	f380 8811 	msr	BASEPRI, r0
    ed0c:	f04f 0004 	mov.w	r0, #4
    ed10:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    ed12:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    ed14:	f894 8009 	ldrb.w	r8, [r4, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    ed18:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    ed1a:	f104 0508 	add.w	r5, r4, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    ed1e:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
    ed22:	f1b9 0f00 	cmp.w	r9, #0
    ed26:	d012      	beq.n	ed4e <isr_rx_scan_report+0x7a>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    ed28:	f008 fd0a 	bl	17740 <radio_rssi_get>
			     pdu_adv_rx->len] =
    ed2c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    ed30:	f805 0008 	strb.w	r0, [r5, r8]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    ed34:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
    ed36:	442b      	add	r3, r5
    ed38:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    ed3a:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
    ed3c:	441d      	add	r5, r3
    ed3e:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
    ed40:	f7ff ff80 	bl	ec44 <packet_rx_enqueue>
	return 0;
    ed44:	2000      	movs	r0, #0
    ed46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    ed4a:	2302      	movs	r3, #2
    ed4c:	e7e2      	b.n	ed14 <isr_rx_scan_report+0x40>
			     pdu_adv_rx->len] =
    ed4e:	207f      	movs	r0, #127	; 0x7f
    ed50:	e7ee      	b.n	ed30 <isr_rx_scan_report+0x5c>
		return 1;
    ed52:	2001      	movs	r0, #1
}
    ed54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ed58:	20000c08 	.word	0x20000c08
    ed5c:	00000000 	.word	0x00000000

0000ed60 <sched_after_mstr_free_offset_get>:
{
    ed60:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ed62:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    ed64:	aa02      	add	r2, sp, #8
{
    ed66:	461c      	mov	r4, r3
    ed68:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    ed6a:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    ed6e:	3127      	adds	r1, #39	; 0x27
    ed70:	2001      	movs	r0, #1
    ed72:	f7ff fd49 	bl	e808 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    ed76:	6823      	ldr	r3, [r4, #0]
    ed78:	b1fb      	cbz	r3, edba <sched_after_mstr_free_offset_get+0x5a>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    ed7a:	9801      	ldr	r0, [sp, #4]
    ed7c:	1b83      	subs	r3, r0, r6
    ed7e:	021b      	lsls	r3, r3, #8
    ed80:	d501      	bpl.n	ed86 <sched_after_mstr_free_offset_get+0x26>
    ed82:	f7ff fea3 	bl	eacc <event_active.part.15>
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    ed86:	4631      	mov	r1, r6
    ed88:	f7fc ffac 	bl	bce4 <ticker_ticks_diff_get>
    ed8c:	4602      	mov	r2, r0
    ed8e:	4810      	ldr	r0, [pc, #64]	; (edd0 <sched_after_mstr_free_offset_get+0x70>)
    ed90:	2307      	movs	r3, #7
    ed92:	fba2 0100 	umull	r0, r1, r2, r0
    ed96:	fb03 1102 	mla	r1, r3, r2, r1
    ed9a:	a30b      	add	r3, pc, #44	; (adr r3, edc8 <sched_after_mstr_free_offset_get+0x68>)
    ed9c:	e9d3 2300 	ldrd	r2, r3, [r3]
    eda0:	f7f1 fa62 	bl	268 <__aeabi_uldivmod>
    eda4:	6823      	ldr	r3, [r4, #0]
    eda6:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    eda8:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    edaa:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    edac:	db05      	blt.n	edba <sched_after_mstr_free_offset_get+0x5a>
		u32_t conn_interval_us = conn_interval * 1250;
    edae:	f240 40e2 	movw	r0, #1250	; 0x4e2
    edb2:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    edb4:	6823      	ldr	r3, [r4, #0]
    edb6:	4298      	cmp	r0, r3
    edb8:	d301      	bcc.n	edbe <sched_after_mstr_free_offset_get+0x5e>
}
    edba:	b002      	add	sp, #8
    edbc:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    edbe:	1a1b      	subs	r3, r3, r0
    edc0:	6023      	str	r3, [r4, #0]
    edc2:	e7f7      	b.n	edb4 <sched_after_mstr_free_offset_get+0x54>
    edc4:	f3af 8000 	nop.w
    edc8:	3b9aca00 	.word	0x3b9aca00
    edcc:	00000000 	.word	0x00000000
    edd0:	1afd498d 	.word	0x1afd498d

0000edd4 <mayfly_sched_win_offset_use>:
{
    edd4:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    edd6:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
    edda:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    eddc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    ede0:	68c1      	ldr	r1, [r0, #12]
    ede2:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    ede4:	f7ff ffbc 	bl	ed60 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    ede8:	a902      	add	r1, sp, #8
    edea:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    edee:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    edf2:	f240 42e2 	movw	r2, #1250	; 0x4e2
    edf6:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    edfa:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    edfc:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    ee00:	f7f1 fcdc 	bl	7bc <memcpy>
}
    ee04:	b002      	add	sp, #8
    ee06:	bd10      	pop	{r4, pc}

0000ee08 <mayfly_sched_after_mstr_free_offset_get>:
{
    ee08:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    ee0a:	4c05      	ldr	r4, [pc, #20]	; (ee20 <mayfly_sched_after_mstr_free_offset_get+0x18>)
    ee0c:	4602      	mov	r2, r0
    ee0e:	f604 4358 	addw	r3, r4, #3160	; 0xc58
    ee12:	f8d4 1c50 	ldr.w	r1, [r4, #3152]	; 0xc50
    ee16:	f8b4 0c48 	ldrh.w	r0, [r4, #3144]	; 0xc48
}
    ee1a:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    ee1c:	f7ff bfa0 	b.w	ed60 <sched_after_mstr_free_offset_get>
    ee20:	20000c08 	.word	0x20000c08

0000ee24 <ticker_stop_adv_stop>:
{
    ee24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ee26:	4c3e      	ldr	r4, [pc, #248]	; (ef20 <ticker_stop_adv_stop+0xfc>)
	if (status != TICKER_STATUS_SUCCESS) {
    ee28:	b120      	cbz	r0, ee34 <ticker_stop_adv_stop+0x10>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
    ee2a:	7ca3      	ldrb	r3, [r4, #18]
    ee2c:	2b05      	cmp	r3, #5
    ee2e:	d075      	beq.n	ef1c <ticker_stop_adv_stop+0xf8>
    ee30:	f7ff fe4c 	bl	eacc <event_active.part.15>
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    ee34:	7c23      	ldrb	r3, [r4, #16]
    ee36:	2b05      	cmp	r3, #5
    ee38:	d002      	beq.n	ee40 <ticker_stop_adv_stop+0x1c>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
    ee3a:	7c63      	ldrb	r3, [r4, #17]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    ee3c:	2b05      	cmp	r3, #5
    ee3e:	d165      	bne.n	ef0c <ticker_stop_adv_stop+0xe8>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    ee40:	ab04      	add	r3, sp, #16
    ee42:	2202      	movs	r2, #2
    ee44:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ee48:	2200      	movs	r2, #0
    ee4a:	9300      	str	r3, [sp, #0]
    ee4c:	2101      	movs	r1, #1
    ee4e:	4b35      	ldr	r3, [pc, #212]	; (ef24 <ticker_stop_adv_stop+0x100>)
    ee50:	4610      	mov	r0, r2
    ee52:	f7fc fe75 	bl	bb40 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    ee56:	2802      	cmp	r0, #2
    ee58:	d00d      	beq.n	ee76 <ticker_stop_adv_stop+0x52>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    ee5a:	9802      	ldr	r0, [sp, #8]
    ee5c:	b1c0      	cbz	r0, ee90 <ticker_stop_adv_stop+0x6c>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    ee5e:	9802      	ldr	r0, [sp, #8]
    ee60:	2801      	cmp	r0, #1
    ee62:	d119      	bne.n	ee98 <ticker_stop_adv_stop+0x74>
		if (_radio.role != ROLE_NONE) {
    ee64:	7ce3      	ldrb	r3, [r4, #19]
    ee66:	2b00      	cmp	r3, #0
    ee68:	d050      	beq.n	ef0c <ticker_stop_adv_stop+0xe8>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    ee6a:	4b2f      	ldr	r3, [pc, #188]	; (ef28 <ticker_stop_adv_stop+0x104>)
    ee6c:	2204      	movs	r2, #4
    ee6e:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    ee70:	2200      	movs	r2, #0
    ee72:	4611      	mov	r1, r2
    ee74:	e046      	b.n	ef04 <ticker_stop_adv_stop+0xe0>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    ee76:	2201      	movs	r2, #1
    ee78:	4611      	mov	r1, r2
    ee7a:	4610      	mov	r0, r2
    ee7c:	f7fb fff0 	bl	ae60 <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
    ee80:	9b02      	ldr	r3, [sp, #8]
    ee82:	2b02      	cmp	r3, #2
    ee84:	d1e9      	bne.n	ee5a <ticker_stop_adv_stop+0x36>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    ee86:	2101      	movs	r1, #1
    ee88:	2000      	movs	r0, #0
    ee8a:	f7fc ff13 	bl	bcb4 <ticker_job_sched>
    ee8e:	e7f7      	b.n	ee80 <ticker_stop_adv_stop+0x5c>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    ee90:	2302      	movs	r3, #2
    ee92:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
    ee94:	7c23      	ldrb	r3, [r4, #16]
    ee96:	b92b      	cbnz	r3, eea4 <ticker_stop_adv_stop+0x80>
	LL_ASSERT(!retval);
    ee98:	4040      	eors	r0, r0
    ee9a:	f380 8811 	msr	BASEPRI, r0
    ee9e:	f04f 0004 	mov.w	r0, #4
    eea2:	df02      	svc	2
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    eea4:	ab03      	add	r3, sp, #12
    eea6:	2201      	movs	r2, #1
		_radio.ticker_id_prepare = 0;
    eea8:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    eeaa:	4611      	mov	r1, r2
    eeac:	9300      	str	r3, [sp, #0]
    eeae:	4b1d      	ldr	r3, [pc, #116]	; (ef24 <ticker_stop_adv_stop+0x100>)
    eeb0:	f7fc fe46 	bl	bb40 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    eeb4:	2802      	cmp	r0, #2
    eeb6:	d00f      	beq.n	eed8 <ticker_stop_adv_stop+0xb4>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    eeb8:	9a03      	ldr	r2, [sp, #12]
    eeba:	b1d2      	cbz	r2, eef2 <ticker_stop_adv_stop+0xce>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    eebc:	9c03      	ldr	r4, [sp, #12]
    eebe:	2c01      	cmp	r4, #1
    eec0:	d1ea      	bne.n	ee98 <ticker_stop_adv_stop+0x74>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    eec2:	2200      	movs	r2, #0
    eec4:	4611      	mov	r1, r2
    eec6:	4b19      	ldr	r3, [pc, #100]	; (ef2c <ticker_stop_adv_stop+0x108>)
    eec8:	4620      	mov	r0, r4
    eeca:	f7fb fff1 	bl	aeb0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    eece:	4602      	mov	r2, r0
    eed0:	2800      	cmp	r0, #0
    eed2:	d1e1      	bne.n	ee98 <ticker_stop_adv_stop+0x74>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    eed4:	4b16      	ldr	r3, [pc, #88]	; (ef30 <ticker_stop_adv_stop+0x10c>)
    eed6:	e013      	b.n	ef00 <ticker_stop_adv_stop+0xdc>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    eed8:	2201      	movs	r2, #1
    eeda:	4611      	mov	r1, r2
    eedc:	4610      	mov	r0, r2
    eede:	f7fb ffbf 	bl	ae60 <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
    eee2:	9b03      	ldr	r3, [sp, #12]
    eee4:	2b02      	cmp	r3, #2
    eee6:	d1e7      	bne.n	eeb8 <ticker_stop_adv_stop+0x94>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    eee8:	2101      	movs	r1, #1
    eeea:	2000      	movs	r0, #0
    eeec:	f7fc fee2 	bl	bcb4 <ticker_job_sched>
    eef0:	e7f7      	b.n	eee2 <ticker_stop_adv_stop+0xbe>
			u32_t ticks_xtal_to_start =
    eef2:	69a3      	ldr	r3, [r4, #24]
			if (_radio.advertiser.hdr.ticks_active_to_start >
    eef4:	69e1      	ldr	r1, [r4, #28]
			ticks_xtal_to_start &= ~XON_BITMASK;
    eef6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
    eefa:	428b      	cmp	r3, r1
    eefc:	d2ea      	bcs.n	eed4 <ticker_stop_adv_stop+0xb0>
				ret = mayfly_enqueue(
    eefe:	4b0b      	ldr	r3, [pc, #44]	; (ef2c <ticker_stop_adv_stop+0x108>)
    ef00:	4611      	mov	r1, r2
    ef02:	2001      	movs	r0, #1
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    ef04:	f7fb ffd4 	bl	aeb0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    ef08:	2800      	cmp	r0, #0
    ef0a:	d1c5      	bne.n	ee98 <ticker_stop_adv_stop+0x74>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    ef0c:	2200      	movs	r2, #0
    ef0e:	4b09      	ldr	r3, [pc, #36]	; (ef34 <ticker_stop_adv_stop+0x110>)
    ef10:	4611      	mov	r1, r2
    ef12:	2001      	movs	r0, #1
    ef14:	f7fb ffcc 	bl	aeb0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    ef18:	2800      	cmp	r0, #0
    ef1a:	d1bd      	bne.n	ee98 <ticker_stop_adv_stop+0x74>
}
    ef1c:	b004      	add	sp, #16
    ef1e:	bd10      	pop	{r4, pc}
    ef20:	20000c08 	.word	0x20000c08
    ef24:	0000d7dd 	.word	0x0000d7dd
    ef28:	2000e170 	.word	0x2000e170
    ef2c:	2000e140 	.word	0x2000e140
    ef30:	2000e200 	.word	0x2000e200
    ef34:	2000e110 	.word	0x2000e110

0000ef38 <pdu_node_tx_release>:
{
    ef38:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    ef3a:	4a10      	ldr	r2, [pc, #64]	; (ef7c <pdu_node_tx_release+0x44>)
    ef3c:	f892 3d60 	ldrb.w	r3, [r2, #3424]	; 0xd60
	if (last == _radio.packet_tx_count) {
    ef40:	f892 4d5c 	ldrb.w	r4, [r2, #3420]	; 0xd5c
	last = _radio.packet_release_last + 1;
    ef44:	3301      	adds	r3, #1
    ef46:	b2db      	uxtb	r3, r3
		last = 0;
    ef48:	429c      	cmp	r4, r3
    ef4a:	bf08      	it	eq
    ef4c:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    ef4e:	f892 4d5f 	ldrb.w	r4, [r2, #3423]	; 0xd5f
    ef52:	429c      	cmp	r4, r3
    ef54:	d101      	bne.n	ef5a <pdu_node_tx_release+0x22>
    ef56:	f7ff fdb9 	bl	eacc <event_active.part.15>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    ef5a:	f892 5d60 	ldrb.w	r5, [r2, #3424]	; 0xd60
    ef5e:	f8d2 4d58 	ldr.w	r4, [r2, #3416]	; 0xd58
    ef62:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    ef66:	f892 0d60 	ldrb.w	r0, [r2, #3424]	; 0xd60
    ef6a:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    ef6e:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    ef70:	f882 3d60 	strb.w	r3, [r2, #3424]	; 0xd60
}
    ef74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_event_callback();
    ef78:	f006 bbca 	b.w	15710 <radio_event_callback>
    ef7c:	20000c08 	.word	0x20000c08

0000ef80 <packet_tx_enqueue>:
{
    ef80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    ef84:	4c24      	ldr	r4, [pc, #144]	; (f018 <packet_tx_enqueue+0x98>)
{
    ef86:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    ef88:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    ef8a:	b12e      	cbz	r6, ef98 <packet_tx_enqueue+0x18>
    ef8c:	f894 3d5d 	ldrb.w	r3, [r4, #3421]	; 0xd5d
    ef90:	f894 2d5e 	ldrb.w	r2, [r4, #3422]	; 0xd5e
    ef94:	429a      	cmp	r2, r3
    ef96:	d101      	bne.n	ef9c <packet_tx_enqueue+0x1c>
    ef98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    ef9c:	f894 8d5d 	ldrb.w	r8, [r4, #3421]	; 0xd5d
    efa0:	f8d4 9d54 	ldr.w	r9, [r4, #3412]	; 0xd54
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    efa4:	f8d4 0cf0 	ldr.w	r0, [r4, #3312]	; 0xcf0
    efa8:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    efac:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    efb0:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
    efb4:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    efb6:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    efb8:	f7fb fee4 	bl	ad84 <mem_get>
    efbc:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    efbe:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    efc2:	8c1a      	ldrh	r2, [r3, #32]
    efc4:	4282      	cmp	r2, r0
    efc6:	d11f      	bne.n	f008 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    efc8:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    efcc:	b942      	cbnz	r2, efe0 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    efce:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
    efd2:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
    efd6:	b91a      	cbnz	r2, efe0 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    efd8:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
    efdc:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
    efe0:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
    efe4:	b102      	cbz	r2, efe8 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    efe6:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    efe8:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
    efec:	f894 3d5d 	ldrb.w	r3, [r4, #3421]	; 0xd5d
		if (first == _radio.packet_tx_count) {
    eff0:	f894 2d5c 	ldrb.w	r2, [r4, #3420]	; 0xd5c
		first = _radio.packet_tx_first + 1;
    eff4:	3301      	adds	r3, #1
    eff6:	b2db      	uxtb	r3, r3
			first = 0;
    eff8:	429a      	cmp	r2, r3
    effa:	bf08      	it	eq
    effc:	2300      	moveq	r3, #0
    effe:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    f000:	f884 3d5d 	strb.w	r3, [r4, #3421]	; 0xd5d
    f004:	b2f6      	uxtb	r6, r6
    f006:	e7c0      	b.n	ef8a <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    f008:	792b      	ldrb	r3, [r5, #4]
    f00a:	f367 0301 	bfi	r3, r7, #0, #2
    f00e:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    f010:	4629      	mov	r1, r5
    f012:	f7ff ff91 	bl	ef38 <pdu_node_tx_release>
    f016:	e7e9      	b.n	efec <packet_tx_enqueue+0x6c>
    f018:	20000c08 	.word	0x20000c08

0000f01c <connection_release>:
{
    f01c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    f01e:	2201      	movs	r2, #1
{
    f020:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    f022:	4611      	mov	r1, r2
    f024:	2000      	movs	r0, #0
    f026:	f7fb ff1b 	bl	ae60 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f02a:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    f02e:	2100      	movs	r1, #0
    f030:	f242 73e2 	movw	r3, #10210	; 0x27e2
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f034:	3207      	adds	r2, #7
	ticker_status =
    f036:	9300      	str	r3, [sp, #0]
    f038:	4608      	mov	r0, r1
    f03a:	4b3a      	ldr	r3, [pc, #232]	; (f124 <connection_release+0x108>)
    f03c:	b2d2      	uxtb	r2, r2
    f03e:	f7fc fd7f 	bl	bb40 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f042:	f030 0102 	bics.w	r1, r0, #2
    f046:	d005      	beq.n	f054 <connection_release+0x38>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f048:	4040      	eors	r0, r0
    f04a:	f380 8811 	msr	BASEPRI, r0
    f04e:	f04f 0004 	mov.w	r0, #4
    f052:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    f054:	4b34      	ldr	r3, [pc, #208]	; (f128 <connection_release+0x10c>)
    f056:	7d1a      	ldrb	r2, [r3, #20]
    f058:	2a05      	cmp	r2, #5
    f05a:	461d      	mov	r5, r3
    f05c:	d11b      	bne.n	f096 <connection_release+0x7a>
					  conn->handle))) {
    f05e:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    f060:	7c18      	ldrb	r0, [r3, #16]
    f062:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    f064:	4290      	cmp	r0, r2
    f066:	d116      	bne.n	f096 <connection_release+0x7a>
		_radio.ticker_id_prepare = 0;
    f068:	7419      	strb	r1, [r3, #16]
		ticker_status =
    f06a:	f242 73f3 	movw	r3, #10227	; 0x27f3
    f06e:	9300      	str	r3, [sp, #0]
    f070:	2201      	movs	r2, #1
    f072:	4b2c      	ldr	r3, [pc, #176]	; (f124 <connection_release+0x108>)
    f074:	4608      	mov	r0, r1
    f076:	f7fc fd63 	bl	bb40 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f07a:	f030 0202 	bics.w	r2, r0, #2
    f07e:	d1e3      	bne.n	f048 <connection_release+0x2c>
		ticker_status =
    f080:	f242 73fa 	movw	r3, #10234	; 0x27fa
    f084:	9300      	str	r3, [sp, #0]
    f086:	4611      	mov	r1, r2
    f088:	4b26      	ldr	r3, [pc, #152]	; (f124 <connection_release+0x108>)
    f08a:	4610      	mov	r0, r2
    f08c:	f7fc fd58 	bl	bb40 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f090:	f030 0302 	bics.w	r3, r0, #2
    f094:	d1d8      	bne.n	f048 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    f096:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    f09a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    f09e:	4299      	cmp	r1, r3
    f0a0:	d003      	beq.n	f0aa <connection_release+0x8e>
    f0a2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    f0a6:	4299      	cmp	r1, r3
    f0a8:	d101      	bne.n	f0ae <connection_release+0x92>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    f0aa:	4e20      	ldr	r6, [pc, #128]	; (f12c <connection_release+0x110>)
    f0ac:	e012      	b.n	f0d4 <connection_release+0xb8>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    f0ae:	790b      	ldrb	r3, [r1, #4]
    f0b0:	f36f 0301 	bfc	r3, #0, #2
    f0b4:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    f0b6:	680b      	ldr	r3, [r1, #0]
    f0b8:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
    f0bc:	8c20      	ldrh	r0, [r4, #32]
    f0be:	f7ff ff3b 	bl	ef38 <pdu_node_tx_release>
    f0c2:	e7e8      	b.n	f096 <connection_release+0x7a>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    f0c4:	6803      	ldr	r3, [r0, #0]
    f0c6:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    f0ca:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    f0ce:	4631      	mov	r1, r6
    f0d0:	f7fb fe3d 	bl	ad4e <mem_release>
	while ((conn->pkt_tx_head) &&
    f0d4:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    f0d8:	b118      	cbz	r0, f0e2 <connection_release+0xc6>
    f0da:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    f0de:	4298      	cmp	r0, r3
    f0e0:	d1f0      	bne.n	f0c4 <connection_release+0xa8>
	conn->pkt_tx_ctrl = NULL;
    f0e2:	2300      	movs	r3, #0
    f0e4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    f0e8:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
    f0ec:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    f0f0:	b951      	cbnz	r1, f108 <connection_release+0xec>
	conn->handle = 0xffff;
    f0f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f0f6:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    f0f8:	f8d5 3d70 	ldr.w	r3, [r5, #3440]	; 0xd70
    f0fc:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    f0fe:	bf08      	it	eq
    f100:	f8c5 1d70 	streq.w	r1, [r5, #3440]	; 0xd70
}
    f104:	b002      	add	sp, #8
    f106:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    f108:	790b      	ldrb	r3, [r1, #4]
    f10a:	f36f 0301 	bfc	r3, #0, #2
    f10e:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    f110:	680b      	ldr	r3, [r1, #0]
    f112:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
    f116:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    f11a:	8c20      	ldrh	r0, [r4, #32]
    f11c:	f7ff ff0c 	bl	ef38 <pdu_node_tx_release>
    f120:	e7e4      	b.n	f0ec <connection_release+0xd0>
    f122:	bf00      	nop
    f124:	0000f29d 	.word	0x0000f29d
    f128:	20000c08 	.word	0x20000c08
    f12c:	2000194c 	.word	0x2000194c

0000f130 <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
    f130:	b2c0      	uxtb	r0, r0
{
    f132:	b508      	push	{r3, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    f134:	1f03      	subs	r3, r0, #4
    f136:	2b01      	cmp	r3, #1
    f138:	d901      	bls.n	f13e <mayfly_radio_stop+0xe>
    f13a:	f7ff fcc7 	bl	eacc <event_active.part.15>
	radio_used = ((_radio.state != STATE_NONE) &&
    f13e:	4a08      	ldr	r2, [pc, #32]	; (f160 <mayfly_radio_stop+0x30>)
    f140:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    f142:	b13b      	cbz	r3, f154 <mayfly_radio_stop+0x24>
	radio_used = ((_radio.state != STATE_NONE) &&
    f144:	3b04      	subs	r3, #4
    f146:	2b01      	cmp	r3, #1
    f148:	d904      	bls.n	f154 <mayfly_radio_stop+0x24>
			_radio.state = state;
    f14a:	7510      	strb	r0, [r2, #20]
}
    f14c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_disable();
    f150:	f008 ba6e 	b.w	17630 <radio_disable>
	if (radio_used || !radio_is_idle()) {
    f154:	f008 fa9e 	bl	17694 <radio_is_idle>
    f158:	2800      	cmp	r0, #0
    f15a:	d0f7      	beq.n	f14c <mayfly_radio_stop+0x1c>
}
    f15c:	bd08      	pop	{r3, pc}
    f15e:	bf00      	nop
    f160:	20000c08 	.word	0x20000c08

0000f164 <mayfly_radio_active>:
{
    f164:	b508      	push	{r3, lr}
    f166:	4a0a      	ldr	r2, [pc, #40]	; (f190 <mayfly_radio_active+0x2c>)
		if (s_active++) {
    f168:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    f16a:	b138      	cbz	r0, f17c <mayfly_radio_active+0x18>
		if (s_active++) {
    f16c:	1c59      	adds	r1, r3, #1
    f16e:	7011      	strb	r1, [r2, #0]
    f170:	b963      	cbnz	r3, f18c <mayfly_radio_active+0x28>
		radio_active_callback(1);
    f172:	2001      	movs	r0, #1
}
    f174:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_active_callback(0);
    f178:	f006 bac8 	b.w	1570c <radio_active_callback>
		LL_ASSERT(s_active);
    f17c:	b90b      	cbnz	r3, f182 <mayfly_radio_active+0x1e>
    f17e:	f7ff fca5 	bl	eacc <event_active.part.15>
		if (--s_active) {
    f182:	3b01      	subs	r3, #1
    f184:	b2db      	uxtb	r3, r3
    f186:	7013      	strb	r3, [r2, #0]
    f188:	2b00      	cmp	r3, #0
    f18a:	d0f3      	beq.n	f174 <mayfly_radio_active+0x10>
    f18c:	bd08      	pop	{r3, pc}
    f18e:	bf00      	nop
    f190:	200019ca 	.word	0x200019ca

0000f194 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    f194:	2000      	movs	r0, #0
    f196:	f7ff bfe5 	b.w	f164 <mayfly_radio_active>
	...

0000f19c <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f19c:	2200      	movs	r2, #0
{
    f19e:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f1a0:	4611      	mov	r1, r2
    f1a2:	4b04      	ldr	r3, [pc, #16]	; (f1b4 <event_xtal+0x18>)
    f1a4:	4610      	mov	r0, r2
    f1a6:	f7fb fe83 	bl	aeb0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    f1aa:	b108      	cbz	r0, f1b0 <event_xtal+0x14>
    f1ac:	f7ff fc8e 	bl	eacc <event_active.part.15>
    f1b0:	bd08      	pop	{r3, pc}
    f1b2:	bf00      	nop
    f1b4:	2000e1c0 	.word	0x2000e1c0

0000f1b8 <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f1b8:	2200      	movs	r2, #0
{
    f1ba:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f1bc:	4611      	mov	r1, r2
    f1be:	4b04      	ldr	r3, [pc, #16]	; (f1d0 <event_active+0x18>)
    f1c0:	4610      	mov	r0, r2
    f1c2:	f7fb fe75 	bl	aeb0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    f1c6:	b108      	cbz	r0, f1cc <event_active+0x14>
    f1c8:	f7ff fc80 	bl	eacc <event_active.part.15>
    f1cc:	bd08      	pop	{r3, pc}
    f1ce:	bf00      	nop
    f1d0:	2000e120 	.word	0x2000e120

0000f1d4 <event_stop>:
	s_mfy_radio_stop.param = context;
    f1d4:	4a06      	ldr	r2, [pc, #24]	; (f1f0 <event_stop+0x1c>)
{
    f1d6:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    f1d8:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f1da:	4613      	mov	r3, r2
    f1dc:	2200      	movs	r2, #0
    f1de:	4611      	mov	r1, r2
    f1e0:	4610      	mov	r0, r2
    f1e2:	f7fb fe65 	bl	aeb0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    f1e6:	b108      	cbz	r0, f1ec <event_stop+0x18>
    f1e8:	f7ff fc70 	bl	eacc <event_active.part.15>
    f1ec:	bd08      	pop	{r3, pc}
    f1ee:	bf00      	nop
    f1f0:	2000e160 	.word	0x2000e160

0000f1f4 <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    f1f4:	b508      	push	{r3, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    f1f6:	b108      	cbz	r0, f1fc <ticker_op_latency_cancelled+0x8>
    f1f8:	f7ff fc68 	bl	eacc <event_active.part.15>

	conn->slave.latency_cancel = 0;
    f1fc:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    f200:	f360 0341 	bfi	r3, r0, #1, #1
    f204:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
    f208:	bd08      	pop	{r3, pc}
	...

0000f20c <ticker_update_slave_assert>:
{
    f20c:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    f20e:	b130      	cbz	r0, f21e <ticker_update_slave_assert+0x12>
    f210:	4b03      	ldr	r3, [pc, #12]	; (f220 <ticker_update_slave_assert+0x14>)
    f212:	7c9b      	ldrb	r3, [r3, #18]
    f214:	b2c9      	uxtb	r1, r1
    f216:	4299      	cmp	r1, r3
    f218:	d001      	beq.n	f21e <ticker_update_slave_assert+0x12>
    f21a:	f7ff fc57 	bl	eacc <event_active.part.15>
    f21e:	bd08      	pop	{r3, pc}
    f220:	20000c08 	.word	0x20000c08

0000f224 <ticker_update_adv_assert>:
{
    f224:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    f226:	b128      	cbz	r0, f234 <ticker_update_adv_assert+0x10>
    f228:	4b03      	ldr	r3, [pc, #12]	; (f238 <ticker_update_adv_assert+0x14>)
    f22a:	7c9b      	ldrb	r3, [r3, #18]
    f22c:	2b05      	cmp	r3, #5
    f22e:	d001      	beq.n	f234 <ticker_update_adv_assert+0x10>
    f230:	f7ff fc4c 	bl	eacc <event_active.part.15>
    f234:	bd08      	pop	{r3, pc}
    f236:	bf00      	nop
    f238:	20000c08 	.word	0x20000c08

0000f23c <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    f23c:	2801      	cmp	r0, #1
{
    f23e:	b508      	push	{r3, lr}
    f240:	4b09      	ldr	r3, [pc, #36]	; (f268 <ticker_stop_scan_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
    f242:	d107      	bne.n	f254 <ticker_stop_scan_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    f244:	7c9a      	ldrb	r2, [r3, #18]
    f246:	2a06      	cmp	r2, #6
    f248:	d102      	bne.n	f250 <ticker_stop_scan_assert+0x14>
			_radio.ticker_id_stop = 0;
    f24a:	2200      	movs	r2, #0
    f24c:	749a      	strb	r2, [r3, #18]
    f24e:	bd08      	pop	{r3, pc}
    f250:	f7ff fc3c 	bl	eacc <event_active.part.15>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    f254:	7c1b      	ldrb	r3, [r3, #16]
    f256:	2b06      	cmp	r3, #6
    f258:	d105      	bne.n	f266 <ticker_stop_scan_assert+0x2a>
    f25a:	4040      	eors	r0, r0
    f25c:	f380 8811 	msr	BASEPRI, r0
    f260:	f04f 0004 	mov.w	r0, #4
    f264:	df02      	svc	2
    f266:	bd08      	pop	{r3, pc}
    f268:	20000c08 	.word	0x20000c08

0000f26c <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    f26c:	2801      	cmp	r0, #1
{
    f26e:	b508      	push	{r3, lr}
    f270:	4b09      	ldr	r3, [pc, #36]	; (f298 <ticker_stop_adv_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
    f272:	d107      	bne.n	f284 <ticker_stop_adv_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    f274:	7c9a      	ldrb	r2, [r3, #18]
    f276:	2a05      	cmp	r2, #5
    f278:	d102      	bne.n	f280 <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0;
    f27a:	2200      	movs	r2, #0
    f27c:	749a      	strb	r2, [r3, #18]
    f27e:	bd08      	pop	{r3, pc}
    f280:	f7ff fc24 	bl	eacc <event_active.part.15>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    f284:	7c1b      	ldrb	r3, [r3, #16]
    f286:	2b05      	cmp	r3, #5
    f288:	d105      	bne.n	f296 <ticker_stop_adv_assert+0x2a>
    f28a:	4040      	eors	r0, r0
    f28c:	f380 8811 	msr	BASEPRI, r0
    f290:	f04f 0004 	mov.w	r0, #4
    f294:	df02      	svc	2
    f296:	bd08      	pop	{r3, pc}
    f298:	20000c08 	.word	0x20000c08

0000f29c <ticker_success_assert>:
{
    f29c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    f29e:	b108      	cbz	r0, f2a4 <ticker_success_assert+0x8>
    f2a0:	f7ff fc14 	bl	eacc <event_active.part.15>
    f2a4:	bd08      	pop	{r3, pc}
	...

0000f2a8 <adv_scan_configure.constprop.34>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    f2a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    f2aa:	ad02      	add	r5, sp, #8
    f2ac:	4b10      	ldr	r3, [pc, #64]	; (f2f0 <adv_scan_configure.constprop.34+0x48>)
    f2ae:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    f2b2:	4604      	mov	r4, r0
	radio_reset();
    f2b4:	f008 f8d8 	bl	17468 <radio_reset>
	radio_tx_power_set(0);
    f2b8:	2000      	movs	r0, #0
    f2ba:	f008 f91d 	bl	174f8 <radio_tx_power_set>
	radio_isr_set(isr);
    f2be:	480d      	ldr	r0, [pc, #52]	; (f2f4 <adv_scan_configure.constprop.34+0x4c>)
    f2c0:	f008 f89c 	bl	173fc <radio_isr_set>
	radio_phy_set(phy, flags);
    f2c4:	2101      	movs	r1, #1
    f2c6:	4620      	mov	r0, r4
    f2c8:	f008 f8e8 	bl	1749c <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    f2cc:	4628      	mov	r0, r5
    f2ce:	f008 f931 	bl	17534 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    f2d2:	0062      	lsls	r2, r4, #1
    f2d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    f2d8:	21ff      	movs	r1, #255	; 0xff
    f2da:	2008      	movs	r0, #8
    f2dc:	f008 f942 	bl	17564 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    f2e0:	4905      	ldr	r1, [pc, #20]	; (f2f8 <adv_scan_configure.constprop.34+0x50>)
    f2e2:	f240 605b 	movw	r0, #1627	; 0x65b
    f2e6:	f008 f9df 	bl	176a8 <radio_crc_configure>
}
    f2ea:	b003      	add	sp, #12
    f2ec:	bd30      	pop	{r4, r5, pc}
    f2ee:	bf00      	nop
    f2f0:	8e89bed6 	.word	0x8e89bed6
    f2f4:	00012429 	.word	0x00012429
    f2f8:	00555555 	.word	0x00555555

0000f2fc <event_stop.constprop.35>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    f2fc:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    f2fe:	4b05      	ldr	r3, [pc, #20]	; (f314 <event_stop.constprop.35+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f300:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    f302:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f304:	4611      	mov	r1, r2
    f306:	4610      	mov	r0, r2
    f308:	f7fb fdd2 	bl	aeb0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    f30c:	b108      	cbz	r0, f312 <event_stop.constprop.35+0x16>
    f30e:	f7ff fbdd 	bl	eacc <event_active.part.15>
    f312:	bd08      	pop	{r3, pc}
    f314:	2000e160 	.word	0x2000e160

0000f318 <event_common_prepare>:
{
    f318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    f31c:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    f31e:	681d      	ldr	r5, [r3, #0]
{
    f320:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    f322:	2c00      	cmp	r4, #0
{
    f324:	4681      	mov	r9, r0
    f326:	910b      	str	r1, [sp, #44]	; 0x2c
    f328:	4690      	mov	r8, r2
    f32a:	469b      	mov	fp, r3
    f32c:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    f330:	da03      	bge.n	f33a <event_common_prepare+0x22>
		_ticks_xtal_to_start =
    f332:	9c16      	ldr	r4, [sp, #88]	; 0x58
    f334:	42ac      	cmp	r4, r5
    f336:	bf38      	it	cc
    f338:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    f33a:	42ac      	cmp	r4, r5
    f33c:	4f4e      	ldr	r7, [pc, #312]	; (f478 <event_common_prepare+0x160>)
    f33e:	d91b      	bls.n	f378 <event_common_prepare+0x60>
		ticker_status =
    f340:	f241 7348 	movw	r3, #5960	; 0x1748
    f344:	9308      	str	r3, [sp, #32]
    f346:	4b4d      	ldr	r3, [pc, #308]	; (f47c <event_common_prepare+0x164>)
    f348:	9305      	str	r3, [sp, #20]
    f34a:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    f34c:	1b63      	subs	r3, r4, r5
		ticker_status =
    f34e:	9300      	str	r3, [sp, #0]
    f350:	9707      	str	r7, [sp, #28]
    f352:	464b      	mov	r3, r9
    f354:	9106      	str	r1, [sp, #24]
    f356:	9104      	str	r1, [sp, #16]
    f358:	9103      	str	r1, [sp, #12]
    f35a:	9102      	str	r1, [sp, #8]
    f35c:	9101      	str	r1, [sp, #4]
    f35e:	2201      	movs	r2, #1
    f360:	4608      	mov	r0, r1
    f362:	f7fc fb4f 	bl	ba04 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f366:	f030 0302 	bics.w	r3, r0, #2
    f36a:	d02b      	beq.n	f3c4 <event_common_prepare+0xac>
		LL_ASSERT(!retval);
    f36c:	4040      	eors	r0, r0
    f36e:	f380 8811 	msr	BASEPRI, r0
    f372:	f04f 0004 	mov.w	r0, #4
    f376:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    f378:	d21d      	bcs.n	f3b6 <event_common_prepare+0x9e>
		event_active(0, 0, 0, NULL);
    f37a:	2300      	movs	r3, #0
    f37c:	461a      	mov	r2, r3
    f37e:	4619      	mov	r1, r3
    f380:	4618      	mov	r0, r3
    f382:	f7ff ff19 	bl	f1b8 <event_active>
		ticker_status =
    f386:	f241 735d 	movw	r3, #5981	; 0x175d
    f38a:	2100      	movs	r1, #0
    f38c:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    f38e:	1b2c      	subs	r4, r5, r4
		ticker_status =
    f390:	4b3b      	ldr	r3, [pc, #236]	; (f480 <event_common_prepare+0x168>)
    f392:	9305      	str	r3, [sp, #20]
    f394:	9707      	str	r7, [sp, #28]
    f396:	464b      	mov	r3, r9
    f398:	9106      	str	r1, [sp, #24]
    f39a:	9104      	str	r1, [sp, #16]
    f39c:	9103      	str	r1, [sp, #12]
    f39e:	9102      	str	r1, [sp, #8]
    f3a0:	9101      	str	r1, [sp, #4]
    f3a2:	9400      	str	r4, [sp, #0]
    f3a4:	2201      	movs	r2, #1
    f3a6:	4608      	mov	r0, r1
    f3a8:	f7fc fb2c 	bl	ba04 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f3ac:	f030 0302 	bics.w	r3, r0, #2
    f3b0:	d1dc      	bne.n	f36c <event_common_prepare+0x54>
    f3b2:	462c      	mov	r4, r5
    f3b4:	e00b      	b.n	f3ce <event_common_prepare+0xb6>
		event_active(0, 0, 0, NULL);
    f3b6:	2300      	movs	r3, #0
    f3b8:	461a      	mov	r2, r3
    f3ba:	4619      	mov	r1, r3
    f3bc:	4618      	mov	r0, r3
    f3be:	f7ff fefb 	bl	f1b8 <event_active>
		event_xtal(0, 0, 0, NULL);
    f3c2:	2300      	movs	r3, #0
    f3c4:	461a      	mov	r2, r3
    f3c6:	4619      	mov	r1, r3
    f3c8:	4618      	mov	r0, r3
    f3ca:	f7ff fee7 	bl	f19c <event_xtal>
	_radio.remainder_anchor = remainder;
    f3ce:	4e2d      	ldr	r6, [pc, #180]	; (f484 <event_common_prepare+0x16c>)
    f3d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f3d2:	60f3      	str	r3, [r6, #12]
	ticker_status =
    f3d4:	f241 7375 	movw	r3, #6005	; 0x1775
    f3d8:	9308      	str	r3, [sp, #32]
    f3da:	9b19      	ldr	r3, [sp, #100]	; 0x64
    f3dc:	9306      	str	r3, [sp, #24]
    f3de:	2200      	movs	r2, #0
    f3e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    f3e2:	9305      	str	r3, [sp, #20]
    f3e4:	9707      	str	r7, [sp, #28]
    f3e6:	464b      	mov	r3, r9
    f3e8:	9204      	str	r2, [sp, #16]
    f3ea:	9203      	str	r2, [sp, #12]
    f3ec:	9202      	str	r2, [sp, #8]
    f3ee:	9201      	str	r2, [sp, #4]
    f3f0:	9400      	str	r4, [sp, #0]
    f3f2:	4611      	mov	r1, r2
    f3f4:	4610      	mov	r0, r2
    f3f6:	f7fc fb05 	bl	ba04 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f3fa:	f030 0302 	bics.w	r3, r0, #2
    f3fe:	d1b5      	bne.n	f36c <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    f400:	2005      	movs	r0, #5
    f402:	f7ff ff7b 	bl	f2fc <event_stop.constprop.35>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    f406:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
    f40a:	429d      	cmp	r5, r3
    f40c:	d023      	beq.n	f456 <event_common_prepare+0x13e>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    f40e:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    f412:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    f416:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    f418:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    f41a:	bfbc      	itt	lt
    f41c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    f420:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = (_radio.ticks_active_to_start <
    f424:	f8d6 2d6c 	ldr.w	r2, [r6, #3436]	; 0xd6c
    f428:	f8d8 1000 	ldr.w	r1, [r8]
    f42c:	428a      	cmp	r2, r1
    f42e:	bf38      	it	cc
    f430:	460a      	movcc	r2, r1
		ticker_status =
    f432:	f241 71a5 	movw	r1, #6053	; 0x17a5
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    f436:	b2a3      	uxth	r3, r4
    f438:	b292      	uxth	r2, r2
		ticker_status =
    f43a:	9106      	str	r1, [sp, #24]
    f43c:	2100      	movs	r1, #0
    f43e:	9302      	str	r3, [sp, #8]
    f440:	9201      	str	r2, [sp, #4]
    f442:	9200      	str	r2, [sp, #0]
    f444:	9104      	str	r1, [sp, #16]
    f446:	9103      	str	r1, [sp, #12]
    f448:	4652      	mov	r2, sl
    f44a:	4608      	mov	r0, r1
    f44c:	f7fc fb2a 	bl	baa4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f450:	f030 0302 	bics.w	r3, r0, #2
    f454:	d18a      	bne.n	f36c <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    f456:	20ff      	movs	r0, #255	; 0xff
    f458:	f7ff fd92 	bl	ef80 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    f45c:	4b0a      	ldr	r3, [pc, #40]	; (f488 <event_common_prepare+0x170>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f45e:	2201      	movs	r2, #1
    f460:	4611      	mov	r1, r2
    f462:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    f464:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f468:	f7fb fd22 	bl	aeb0 <mayfly_enqueue>
		LL_ASSERT(!retval);
    f46c:	2800      	cmp	r0, #0
    f46e:	f47f af7d 	bne.w	f36c <event_common_prepare+0x54>
}
    f472:	b00d      	add	sp, #52	; 0x34
    f474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f478:	0000f29d 	.word	0x0000f29d
    f47c:	0000f1b9 	.word	0x0000f1b9
    f480:	0000f19d 	.word	0x0000f19d
    f484:	20000c08 	.word	0x20000c08
    f488:	2000e220 	.word	0x2000e220

0000f48c <radio_event_adv_prepare>:
{
    f48c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    f48e:	4a0b      	ldr	r2, [pc, #44]	; (f4bc <radio_event_adv_prepare+0x30>)
    f490:	7c13      	ldrb	r3, [r2, #16]
    f492:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    f496:	b10b      	cbz	r3, f49c <radio_event_adv_prepare+0x10>
    f498:	f7ff fb18 	bl	eacc <event_active.part.15>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    f49c:	2305      	movs	r3, #5
    f49e:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
    f4a0:	9403      	str	r4, [sp, #12]
    f4a2:	4c07      	ldr	r4, [pc, #28]	; (f4c0 <radio_event_adv_prepare+0x34>)
    f4a4:	9402      	str	r4, [sp, #8]
    f4a6:	9301      	str	r3, [sp, #4]
    f4a8:	6a13      	ldr	r3, [r2, #32]
    f4aa:	9300      	str	r3, [sp, #0]
    f4ac:	f102 031c 	add.w	r3, r2, #28
    f4b0:	3218      	adds	r2, #24
    f4b2:	f7ff ff31 	bl	f318 <event_common_prepare>
}
    f4b6:	b004      	add	sp, #16
    f4b8:	bd10      	pop	{r4, pc}
    f4ba:	bf00      	nop
    f4bc:	20000c08 	.word	0x20000c08
    f4c0:	0000f69d 	.word	0x0000f69d

0000f4c4 <event_scan_prepare>:
{
    f4c4:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    f4c6:	4c1d      	ldr	r4, [pc, #116]	; (f53c <event_scan_prepare+0x78>)
    f4c8:	7c23      	ldrb	r3, [r4, #16]
{
    f4ca:	b085      	sub	sp, #20
    f4cc:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    f4ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    f4d2:	b12b      	cbz	r3, f4e0 <event_scan_prepare+0x1c>
		LL_ASSERT(!retval);
    f4d4:	4040      	eors	r0, r0
    f4d6:	f380 8811 	msr	BASEPRI, r0
    f4da:	f04f 0004 	mov.w	r0, #4
    f4de:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    f4e0:	2306      	movs	r3, #6
    f4e2:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    f4e4:	9203      	str	r2, [sp, #12]
    f4e6:	9301      	str	r3, [sp, #4]
    f4e8:	4a15      	ldr	r2, [pc, #84]	; (f540 <event_scan_prepare+0x7c>)
    f4ea:	f8d4 3c24 	ldr.w	r3, [r4, #3108]	; 0xc24
    f4ee:	9202      	str	r2, [sp, #8]
    f4f0:	9300      	str	r3, [sp, #0]
    f4f2:	f604 421c 	addw	r2, r4, #3100	; 0xc1c
    f4f6:	f504 6342 	add.w	r3, r4, #3104	; 0xc20
    f4fa:	f7ff ff0d 	bl	f318 <event_common_prepare>
	if (_radio.scanner.conn) {
    f4fe:	f8d4 3c54 	ldr.w	r3, [r4, #3156]	; 0xc54
    f502:	b1cb      	cbz	r3, f538 <event_scan_prepare+0x74>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    f504:	f8d4 3c1c 	ldr.w	r3, [r4, #3100]	; 0xc1c
    f508:	2b00      	cmp	r3, #0
    f50a:	da0c      	bge.n	f526 <event_scan_prepare+0x62>
			u32_t ticks_prepare_to_start =
    f50c:	f8d4 1c24 	ldr.w	r1, [r4, #3108]	; 0xc24
    f510:	f8d4 2c20 	ldr.w	r2, [r4, #3104]	; 0xc20
				(_radio.scanner.hdr.ticks_xtal_to_start &
    f514:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    f518:	4291      	cmp	r1, r2
    f51a:	bf2c      	ite	cs
    f51c:	ebc3 0301 	rsbcs	r3, r3, r1
    f520:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    f524:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    f526:	4b07      	ldr	r3, [pc, #28]	; (f544 <event_scan_prepare+0x80>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f528:	2201      	movs	r2, #1
    f52a:	4611      	mov	r1, r2
    f52c:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    f52e:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f530:	f7fb fcbe 	bl	aeb0 <mayfly_enqueue>
		LL_ASSERT(!retval);
    f534:	2800      	cmp	r0, #0
    f536:	d1cd      	bne.n	f4d4 <event_scan_prepare+0x10>
}
    f538:	b005      	add	sp, #20
    f53a:	bd30      	pop	{r4, r5, pc}
    f53c:	20000c08 	.word	0x20000c08
    f540:	0000f75d 	.word	0x0000f75d
    f544:	2000e190 	.word	0x2000e190

0000f548 <radio_event_ext_adv_prepare>:
{
    f548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    f54a:	4a0b      	ldr	r2, [pc, #44]	; (f578 <radio_event_ext_adv_prepare+0x30>)
    f54c:	7c13      	ldrb	r3, [r2, #16]
    f54e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    f552:	b10b      	cbz	r3, f558 <radio_event_ext_adv_prepare+0x10>
    f554:	f7ff faba 	bl	eacc <event_active.part.15>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    f558:	2305      	movs	r3, #5
    f55a:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
    f55c:	9403      	str	r4, [sp, #12]
    f55e:	4c07      	ldr	r4, [pc, #28]	; (f57c <radio_event_ext_adv_prepare+0x34>)
    f560:	9402      	str	r4, [sp, #8]
    f562:	9301      	str	r3, [sp, #4]
    f564:	6a13      	ldr	r3, [r2, #32]
    f566:	9300      	str	r3, [sp, #0]
    f568:	f102 031c 	add.w	r3, r2, #28
    f56c:	3218      	adds	r2, #24
    f56e:	f7ff fed3 	bl	f318 <event_common_prepare>
}
    f572:	b004      	add	sp, #16
    f574:	bd10      	pop	{r4, pc}
    f576:	bf00      	nop
    f578:	20000c08 	.word	0x20000c08
    f57c:	0000f999 	.word	0x0000f999

0000f580 <event_adv_stop>:
{
    f580:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    f582:	2005      	movs	r0, #5
    f584:	f7ff feba 	bl	f2fc <event_stop.constprop.35>
	ticker_status =
    f588:	f641 438b 	movw	r3, #7307	; 0x1c8b
    f58c:	2100      	movs	r1, #0
    f58e:	9300      	str	r3, [sp, #0]
    f590:	2205      	movs	r2, #5
    f592:	4b06      	ldr	r3, [pc, #24]	; (f5ac <event_adv_stop+0x2c>)
    f594:	4608      	mov	r0, r1
    f596:	f7fc fad3 	bl	bb40 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f59a:	f030 0302 	bics.w	r3, r0, #2
    f59e:	d001      	beq.n	f5a4 <event_adv_stop+0x24>
    f5a0:	f7ff fa94 	bl	eacc <event_active.part.15>
}
    f5a4:	b003      	add	sp, #12
    f5a6:	f85d fb04 	ldr.w	pc, [sp], #4
    f5aa:	bf00      	nop
    f5ac:	0000ee25 	.word	0x0000ee25

0000f5b0 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    f5b0:	4b02      	ldr	r3, [pc, #8]	; (f5bc <mayfly_xtal_start+0xc>)
    f5b2:	6818      	ldr	r0, [r3, #0]
    f5b4:	6843      	ldr	r3, [r0, #4]
    f5b6:	2100      	movs	r1, #0
    f5b8:	681b      	ldr	r3, [r3, #0]
    f5ba:	4718      	bx	r3
    f5bc:	20000c08 	.word	0x20000c08

0000f5c0 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    f5c0:	4b02      	ldr	r3, [pc, #8]	; (f5cc <mayfly_xtal_stop+0xc>)
    f5c2:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    f5c4:	6843      	ldr	r3, [r0, #4]
    f5c6:	2100      	movs	r1, #0
    f5c8:	685b      	ldr	r3, [r3, #4]
    f5ca:	4718      	bx	r3
    f5cc:	20000c08 	.word	0x20000c08

0000f5d0 <chan_sel_2>:
{
    f5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    f5d2:	4048      	eors	r0, r1
    f5d4:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    f5d6:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    f5da:	2608      	movs	r6, #8
	o = 0;
    f5dc:	2400      	movs	r4, #0
		o |= (i & 1);
    f5de:	f00e 0501 	and.w	r5, lr, #1
    f5e2:	3e01      	subs	r6, #1
    f5e4:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    f5e8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    f5ec:	b2ec      	uxtb	r4, r5
		i >>= 1;
    f5ee:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    f5f2:	d1f4      	bne.n	f5de <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    f5f4:	0225      	lsls	r5, r4, #8
    f5f6:	b22d      	sxth	r5, r5
    f5f8:	b2c0      	uxtb	r0, r0
    f5fa:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    f5fe:	4634      	mov	r4, r6
		o |= (i & 1);
    f600:	f000 0601 	and.w	r6, r0, #1
    f604:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    f608:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    f60c:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    f610:	b2e4      	uxtb	r4, r4
		i >>= 1;
    f612:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    f616:	d1f3      	bne.n	f600 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    f618:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    f61a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    f61e:	3f01      	subs	r7, #1
    f620:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    f622:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    f626:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    f628:	d1d5      	bne.n	f5d6 <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    f62a:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    f62c:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    f62e:	fbb1 f0f4 	udiv	r0, r1, r4
    f632:	fb04 1010 	mls	r0, r4, r0, r1
    f636:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    f638:	08c4      	lsrs	r4, r0, #3
    f63a:	f000 0507 	and.w	r5, r0, #7
    f63e:	5d14      	ldrb	r4, [r2, r4]
    f640:	412c      	asrs	r4, r5
    f642:	07e4      	lsls	r4, r4, #31
    f644:	d407      	bmi.n	f656 <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    f646:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    f648:	f3c1 4107 	ubfx	r1, r1, #16, #8
    f64c:	4610      	mov	r0, r2
}
    f64e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    f652:	f7fe b8d1 	b.w	d7f8 <chan_sel_remap>
}
    f656:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f658 <preempt_calc>:
{
    f658:	b570      	push	{r4, r5, r6, lr}
    f65a:	4614      	mov	r4, r2
    f65c:	460e      	mov	r6, r1
    f65e:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    f660:	f7fc fb3e 	bl	bce0 <ticker_ticks_now_get>
	u32_t diff =
    f664:	4621      	mov	r1, r4
    f666:	f7fc fb3d 	bl	bce4 <ticker_ticks_diff_get>
	diff += 3;
    f66a:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    f66c:	2c09      	cmp	r4, #9
    f66e:	d911      	bls.n	f694 <preempt_calc+0x3c>
		if (s_xtal_retained) {
    f670:	4b09      	ldr	r3, [pc, #36]	; (f698 <preempt_calc+0x40>)
    f672:	781b      	ldrb	r3, [r3, #0]
    f674:	b113      	cbz	r3, f67c <preempt_calc+0x24>
    f676:	2000      	movs	r0, #0
    f678:	f7ff fa0c 	bl	ea94 <mayfly_xtal_retain.part.14>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    f67c:	4632      	mov	r2, r6
    f67e:	2100      	movs	r1, #0
    f680:	4628      	mov	r0, r5
    f682:	f7ff fa29 	bl	ead8 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    f686:	68ab      	ldr	r3, [r5, #8]
    f688:	441c      	add	r4, r3
		if (diff <
    f68a:	2c26      	cmp	r4, #38	; 0x26
    f68c:	d800      	bhi.n	f690 <preempt_calc+0x38>
			hdr->ticks_preempt_to_start = diff;
    f68e:	60ac      	str	r4, [r5, #8]
		return 1;
    f690:	2001      	movs	r0, #1
}
    f692:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    f694:	2000      	movs	r0, #0
    f696:	bd70      	pop	{r4, r5, r6, pc}
    f698:	20001a2c 	.word	0x20001a2c

0000f69c <event_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
    f69c:	4b2c      	ldr	r3, [pc, #176]	; (f750 <event_adv+0xb4>)
    f69e:	7cda      	ldrb	r2, [r3, #19]
{
    f6a0:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    f6a2:	f002 01ff 	and.w	r1, r2, #255	; 0xff
{
    f6a6:	4605      	mov	r5, r0
    f6a8:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    f6aa:	b12a      	cbz	r2, f6b8 <event_adv+0x1c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f6ac:	4040      	eors	r0, r0
    f6ae:	f380 8811 	msr	BASEPRI, r0
    f6b2:	f04f 0004 	mov.w	r0, #4
    f6b6:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    f6b8:	7c1b      	ldrb	r3, [r3, #16]
    f6ba:	b2db      	uxtb	r3, r3
    f6bc:	2b05      	cmp	r3, #5
    f6be:	d1f5      	bne.n	f6ac <event_adv+0x10>
	_radio.ticks_anchor = ticks_at_expire;
    f6c0:	60a0      	str	r0, [r4, #8]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    f6c2:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	_radio.role = ROLE_ADV;
    f6c6:	2601      	movs	r6, #1
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    f6c8:	f3c0 0042 	ubfx	r0, r0, #1, #3
	_radio.role = ROLE_ADV;
    f6cc:	74e6      	strb	r6, [r4, #19]
	_radio.ticker_id_prepare = 0;
    f6ce:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    f6d0:	7463      	strb	r3, [r4, #17]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    f6d2:	f7ff fde9 	bl	f2a8 <adv_scan_configure.constprop.34>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
    f6d6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    f6da:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    f6de:	f3c3 1302 	ubfx	r3, r3, #4, #3
    f6e2:	f363 0202 	bfi	r2, r3, #0, #3
    f6e6:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	adv_setup();
    f6ea:	f7fe fcc5 	bl	e078 <adv_setup>
	if (ctrl_rl_enabled()) {
    f6ee:	f007 f973 	bl	169d8 <ctrl_rl_enabled>
    f6f2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    f6f6:	b1f8      	cbz	r0, f738 <event_adv+0x9c>
		struct ll_filter *filter =
    f6f8:	f013 0003 	ands.w	r0, r3, #3
    f6fc:	bf18      	it	ne
    f6fe:	4630      	movne	r0, r6
		struct ll_filter *wl = ctrl_filter_get(true);
    f700:	f006 ffb4 	bl	1666c <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    f704:	1c82      	adds	r2, r0, #2
    f706:	7841      	ldrb	r1, [r0, #1]
    f708:	7800      	ldrb	r0, [r0, #0]
    f70a:	f008 f831 	bl	17770 <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    f70e:	68e2      	ldr	r2, [r4, #12]
    f710:	f105 0109 	add.w	r1, r5, #9
    f714:	2001      	movs	r0, #1
    f716:	f008 f88f 	bl	17838 <radio_tmr_start>
	radio_tmr_end_capture();
    f71a:	f008 f94b 	bl	179b4 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    f71e:	462a      	mov	r2, r5
    f720:	2105      	movs	r1, #5
    f722:	480c      	ldr	r0, [pc, #48]	; (f754 <event_adv+0xb8>)
    f724:	f7ff ff98 	bl	f658 <preempt_calc>
    f728:	4603      	mov	r3, r0
    f72a:	b148      	cbz	r0, f740 <event_adv+0xa4>
		_radio.state = STATE_STOP;
    f72c:	2304      	movs	r3, #4
    f72e:	7523      	strb	r3, [r4, #20]
}
    f730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    f734:	f007 bf7c 	b.w	17630 <radio_disable>
	if (_radio.advertiser.filter_policy) {
    f738:	079b      	lsls	r3, r3, #30
    f73a:	d0e8      	beq.n	f70e <event_adv+0x72>
		struct ll_filter *wl = ctrl_filter_get(true);
    f73c:	4630      	mov	r0, r6
    f73e:	e7df      	b.n	f700 <event_adv+0x64>
		ticker_status =
    f740:	4a05      	ldr	r2, [pc, #20]	; (f758 <event_adv+0xbc>)
    f742:	4601      	mov	r1, r0
    f744:	f7fc fa7a 	bl	bc3c <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f748:	f030 0302 	bics.w	r3, r0, #2
    f74c:	d1ae      	bne.n	f6ac <event_adv+0x10>
    f74e:	bd70      	pop	{r4, r5, r6, pc}
    f750:	20000c08 	.word	0x20000c08
    f754:	20000c20 	.word	0x20000c20
    f758:	0000ea41 	.word	0x0000ea41

0000f75c <event_scan>:
{
    f75c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    f760:	4b80      	ldr	r3, [pc, #512]	; (f964 <event_scan+0x208>)
    f762:	7cd9      	ldrb	r1, [r3, #19]
{
    f764:	b08d      	sub	sp, #52	; 0x34
    f766:	4606      	mov	r6, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    f768:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    f76c:	461c      	mov	r4, r3
    f76e:	b129      	cbz	r1, f77c <event_scan+0x20>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    f770:	4040      	eors	r0, r0
    f772:	f380 8811 	msr	BASEPRI, r0
    f776:	f04f 0004 	mov.w	r0, #4
    f77a:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    f77c:	7c1b      	ldrb	r3, [r3, #16]
    f77e:	b2db      	uxtb	r3, r3
    f780:	2b06      	cmp	r3, #6
    f782:	d1f5      	bne.n	f770 <event_scan+0x14>
	_radio.role = ROLE_SCAN;
    f784:	2102      	movs	r1, #2
    f786:	74e1      	strb	r1, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    f788:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    f78a:	7422      	strb	r2, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    f78c:	f894 0c2d 	ldrb.w	r0, [r4, #3117]	; 0xc2d
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    f790:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    f792:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
	if(aux_scan){
    f796:	4d74      	ldr	r5, [pc, #464]	; (f968 <event_scan+0x20c>)
	_radio.state = STATE_RX;
    f798:	2101      	movs	r1, #1
	_radio.scanner.state = 0;
    f79a:	f362 0341 	bfi	r3, r2, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    f79e:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
    f7a2:	7521      	strb	r1, [r4, #20]
	_radio.scanner.state = 0;
    f7a4:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    f7a8:	f7ff fd7e 	bl	f2a8 <adv_scan_configure.constprop.34>
	if(aux_scan){
    f7ac:	782f      	ldrb	r7, [r5, #0]
    f7ae:	2f00      	cmp	r7, #0
    f7b0:	f000 8092 	beq.w	f8d8 <event_scan+0x17c>
		stop_time_ticker = k_cycle_get_32();
    f7b4:	f7f3 fe92 	bl	34dc <_timer_cycle_get_32>
    f7b8:	4b6c      	ldr	r3, [pc, #432]	; (f96c <event_scan+0x210>)
    f7ba:	6018      	str	r0, [r3, #0]
		event_time_diff = (stop_time_ticker - start_time_ticker);
    f7bc:	4b6c      	ldr	r3, [pc, #432]	; (f970 <event_scan+0x214>)
    f7be:	681b      	ldr	r3, [r3, #0]
    f7c0:	eba0 0e03 	sub.w	lr, r0, r3
    f7c4:	4b6b      	ldr	r3, [pc, #428]	; (f974 <event_scan+0x218>)
    f7c6:	f8c3 e000 	str.w	lr, [r3]
		Time_difference_ticker = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_diff))/1000;
    f7ca:	4b6b      	ldr	r3, [pc, #428]	; (f978 <event_scan+0x21c>)
    f7cc:	681a      	ldr	r2, [r3, #0]
    f7ce:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    f7d2:	fb82 2307 	smull	r2, r3, r2, r7
    f7d6:	fba2 010e 	umull	r0, r1, r2, lr
    f7da:	fb0e 1103 	mla	r1, lr, r3, r1
    f7de:	4b67      	ldr	r3, [pc, #412]	; (f97c <event_scan+0x220>)
    f7e0:	681a      	ldr	r2, [r3, #0]
    f7e2:	17d3      	asrs	r3, r2, #31
    f7e4:	f7f0 fd40 	bl	268 <__aeabi_uldivmod>
    f7e8:	4b65      	ldr	r3, [pc, #404]	; (f980 <event_scan+0x224>)
		counter++;
    f7ea:	4a66      	ldr	r2, [pc, #408]	; (f984 <event_scan+0x228>)
		Time_difference_ticker = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_diff))/1000;
    f7ec:	fbb0 f0f7 	udiv	r0, r0, r7
    f7f0:	2100      	movs	r1, #0
    f7f2:	e9c3 0100 	strd	r0, r1, [r3]
		counter++;
    f7f6:	7813      	ldrb	r3, [r2, #0]
    f7f8:	3301      	adds	r3, #1
    f7fa:	7013      	strb	r3, [r2, #0]
		if(Time_difference_ticker < _radio.ext_scanner.chan_off){
    f7fc:	f604 4398 	addw	r3, r4, #3224	; 0xc98
    f800:	e9d3 8900 	ldrd	r8, r9, [r3]
    f804:	4549      	cmp	r1, r9
    f806:	bf08      	it	eq
    f808:	4540      	cmpeq	r0, r8
    f80a:	f604 47a8 	addw	r7, r4, #3240	; 0xca8
    f80e:	d206      	bcs.n	f81e <event_scan+0xc2>
			_radio.ext_scanner.chan_off_calculation -= Time_difference_ticker;
    f810:	e9d7 2300 	ldrd	r2, r3, [r7]
    f814:	1a10      	subs	r0, r2, r0
    f816:	eb63 0101 	sbc.w	r1, r3, r1
    f81a:	e9c7 0100 	strd	r0, r1, [r7]
		if( _radio.ext_scanner.chan_off_calculation < 0x7530){				//2710
    f81e:	e9d7 2300 	ldrd	r2, r3, [r7]
    f822:	2100      	movs	r1, #0
    f824:	f247 502f 	movw	r0, #29999	; 0x752f
    f828:	4299      	cmp	r1, r3
    f82a:	bf08      	it	eq
    f82c:	4290      	cmpeq	r0, r2
    f82e:	d350      	bcc.n	f8d2 <event_scan+0x176>
			if(_radio.ext_scanner.chan_off_calculation <= 0 ){
    f830:	4313      	orrs	r3, r2
				aux_scan = 0x00;
    f832:	bf08      	it	eq
    f834:	2300      	moveq	r3, #0
			chan_set(3);
    f836:	f04f 0003 	mov.w	r0, #3
				aux_scan = 0x00;
    f83a:	bf08      	it	eq
    f83c:	702b      	strbeq	r3, [r5, #0]
			chan_set(3);
    f83e:	f7fe faf9 	bl	de34 <chan_set>
			aux_scan = 0x00;
    f842:	2300      	movs	r3, #0
    f844:	702b      	strb	r3, [r5, #0]
	radio_tmr_tifs_set(RADIO_TIFS);
    f846:	2096      	movs	r0, #150	; 0x96
    f848:	f007 ffea 	bl	17820 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    f84c:	2300      	movs	r3, #0
    f84e:	4619      	mov	r1, r3
    f850:	461a      	mov	r2, r3
    f852:	4618      	mov	r0, r3
    f854:	f007 ff52 	bl	176fc <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    f858:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
    f85c:	f894 2d29 	ldrb.w	r2, [r4, #3369]	; 0xd29
    f860:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    f864:	3008      	adds	r0, #8
    f866:	f007 feaf 	bl	175c8 <radio_pkt_rx_set>
	radio_rssi_measure();
    f86a:	f007 ff5f 	bl	1772c <radio_rssi_measure>
	pdu = (void *)radio_pkt_scratch_get();
    f86e:	f007 ff35 	bl	176dc <radio_pkt_scratch_get>
	if (ctrl_rl_enabled()) {
    f872:	f007 f8b1 	bl	169d8 <ctrl_rl_enabled>
    f876:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
    f87a:	2800      	cmp	r0, #0
    f87c:	d043      	beq.n	f906 <event_scan+0x1aa>
		struct ll_filter *filter =
    f87e:	f3c3 1000 	ubfx	r0, r3, #4, #1
    f882:	f006 fef3 	bl	1666c <ctrl_filter_get>
    f886:	4605      	mov	r5, r0
		u8_t count, *irks = ctrl_irks_get(&count);
    f888:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    f88c:	f006 fe92 	bl	165b4 <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
    f890:	7869      	ldrb	r1, [r5, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
    f892:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
    f894:	1caa      	adds	r2, r5, #2
    f896:	7828      	ldrb	r0, [r5, #0]
    f898:	f007 ff6a 	bl	17770 <radio_filter_configure>
		radio_ar_configure(count, irks);
    f89c:	4639      	mov	r1, r7
    f89e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    f8a2:	f008 f949 	bl	17b38 <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    f8a6:	68e2      	ldr	r2, [r4, #12]
    f8a8:	f106 0109 	add.w	r1, r6, #9
    f8ac:	2000      	movs	r0, #0
    f8ae:	f007 ffc3 	bl	17838 <radio_tmr_start>
	radio_tmr_end_capture();
    f8b2:	f008 f87f 	bl	179b4 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    f8b6:	2106      	movs	r1, #6
    f8b8:	4632      	mov	r2, r6
    f8ba:	4833      	ldr	r0, [pc, #204]	; (f988 <event_scan+0x22c>)
    f8bc:	f7ff fecc 	bl	f658 <preempt_calc>
    f8c0:	4601      	mov	r1, r0
    f8c2:	b360      	cbz	r0, f91e <event_scan+0x1c2>
		_radio.state = STATE_STOP;
    f8c4:	2304      	movs	r3, #4
    f8c6:	7523      	strb	r3, [r4, #20]
		radio_disable();
    f8c8:	f007 feb2 	bl	17630 <radio_disable>
}
    f8cc:	b00d      	add	sp, #52	; 0x34
    f8ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			_radio.ext_scanner.chan_off_calculation = _radio.ext_scanner.chan_off;
    f8d2:	e9c7 8900 	strd	r8, r9, [r7]
    f8d6:	e7b6      	b.n	f846 <event_scan+0xea>
		chan_set(37 + _radio.scanner.chan++);
    f8d8:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
    f8dc:	f3c3 0081 	ubfx	r0, r3, #2, #2
    f8e0:	1c42      	adds	r2, r0, #1
    f8e2:	f362 0383 	bfi	r3, r2, #2, #2
    f8e6:	3025      	adds	r0, #37	; 0x25
    f8e8:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
    f8ec:	f7fe faa2 	bl	de34 <chan_set>
		if (_radio.scanner.chan == 3) {
    f8f0:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
    f8f4:	f003 020c 	and.w	r2, r3, #12
    f8f8:	2a0c      	cmp	r2, #12
			_radio.scanner.chan = 0;
    f8fa:	bf04      	itt	eq
    f8fc:	f367 0383 	bfieq	r3, r7, #2, #2
    f900:	f884 3c2c 	strbeq.w	r3, [r4, #3116]	; 0xc2c
    f904:	e79f      	b.n	f846 <event_scan+0xea>
	if (_radio.scanner.filter_policy) {
    f906:	f013 0f30 	tst.w	r3, #48	; 0x30
    f90a:	d0cc      	beq.n	f8a6 <event_scan+0x14a>
		struct ll_filter *wl = ctrl_filter_get(true);
    f90c:	2001      	movs	r0, #1
    f90e:	f006 fead 	bl	1666c <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    f912:	1c82      	adds	r2, r0, #2
    f914:	7841      	ldrb	r1, [r0, #1]
    f916:	7800      	ldrb	r0, [r0, #0]
    f918:	f007 ff2a 	bl	17770 <radio_filter_configure>
    f91c:	e7c3      	b.n	f8a6 <event_scan+0x14a>
		ret = ticker_start(															//this ticker was for closing the window.we ll use it for Aux packet
    f91e:	f641 537b 	movw	r3, #7547	; 0x1d7b
    f922:	9308      	str	r3, [sp, #32]
    f924:	4b19      	ldr	r3, [pc, #100]	; (f98c <event_scan+0x230>)
    f926:	9307      	str	r3, [sp, #28]
    f928:	2204      	movs	r2, #4
    f92a:	4b19      	ldr	r3, [pc, #100]	; (f990 <event_scan+0x234>)
    f92c:	9206      	str	r2, [sp, #24]
    f92e:	9305      	str	r3, [sp, #20]
    f930:	9004      	str	r0, [sp, #16]
    f932:	9003      	str	r0, [sp, #12]
    f934:	9002      	str	r0, [sp, #8]
    f936:	9001      	str	r0, [sp, #4]
    f938:	f8d4 3c3c 	ldr.w	r3, [r4, #3132]	; 0xc3c
    f93c:	3309      	adds	r3, #9
    f93e:	9300      	str	r3, [sp, #0]
    f940:	4633      	mov	r3, r6
    f942:	f7fc f85f 	bl	ba04 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    f946:	f030 0302 	bics.w	r3, r0, #2
    f94a:	f47f af11 	bne.w	f770 <event_scan+0x14>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    f94e:	4619      	mov	r1, r3
    f950:	4618      	mov	r0, r3
    f952:	4a10      	ldr	r2, [pc, #64]	; (f994 <event_scan+0x238>)
    f954:	f7fc f972 	bl	bc3c <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    f958:	f030 0302 	bics.w	r3, r0, #2
    f95c:	f47f af08 	bne.w	f770 <event_scan+0x14>
    f960:	e7b4      	b.n	f8cc <event_scan+0x170>
    f962:	bf00      	nop
    f964:	20000c08 	.word	0x20000c08
    f968:	20001980 	.word	0x20001980
    f96c:	20004928 	.word	0x20004928
    f970:	2000492c 	.word	0x2000492c
    f974:	20004950 	.word	0x20004950
    f978:	2000eb28 	.word	0x2000eb28
    f97c:	2000eb24 	.word	0x2000eb24
    f980:	200048f8 	.word	0x200048f8
    f984:	20001984 	.word	0x20001984
    f988:	20001824 	.word	0x20001824
    f98c:	0000f29d 	.word	0x0000f29d
    f990:	0000f1d5 	.word	0x0000f1d5
    f994:	0000ea41 	.word	0x0000ea41

0000f998 <event_ext_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
    f998:	4b25      	ldr	r3, [pc, #148]	; (fa30 <event_ext_adv+0x98>)
    f99a:	7cd9      	ldrb	r1, [r3, #19]
{
    f99c:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    f99e:	f001 02ff 	and.w	r2, r1, #255	; 0xff
{
    f9a2:	4605      	mov	r5, r0
    f9a4:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    f9a6:	b129      	cbz	r1, f9b4 <event_ext_adv+0x1c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f9a8:	4040      	eors	r0, r0
    f9aa:	f380 8811 	msr	BASEPRI, r0
    f9ae:	f04f 0004 	mov.w	r0, #4
    f9b2:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    f9b4:	7c1b      	ldrb	r3, [r3, #16]
    f9b6:	b2db      	uxtb	r3, r3
    f9b8:	2b05      	cmp	r3, #5
    f9ba:	d1f5      	bne.n	f9a8 <event_ext_adv+0x10>
	_radio.role = ROLE_ADV;
    f9bc:	2601      	movs	r6, #1
    f9be:	74e6      	strb	r6, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    f9c0:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    f9c2:	7422      	strb	r2, [r4, #16]
	_radio.ext_advertiser.aux_chain_count_current = 0;
    f9c4:	f884 2c8d 	strb.w	r2, [r4, #3213]	; 0xc8d
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    f9c8:	7463      	strb	r3, [r4, #17]
	ext_adv_setup();
    f9ca:	f7fe fc7b 	bl	e2c4 <ext_adv_setup>
	if (ctrl_rl_enabled()) {
    f9ce:	f007 f803 	bl	169d8 <ctrl_rl_enabled>
    f9d2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    f9d6:	b1f8      	cbz	r0, fa18 <event_ext_adv+0x80>
		struct ll_filter *filter =
    f9d8:	f013 0003 	ands.w	r0, r3, #3
    f9dc:	bf18      	it	ne
    f9de:	4630      	movne	r0, r6
		struct ll_filter *wl = ctrl_filter_get(true);
    f9e0:	f006 fe44 	bl	1666c <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    f9e4:	1c82      	adds	r2, r0, #2
    f9e6:	7841      	ldrb	r1, [r0, #1]
    f9e8:	7800      	ldrb	r0, [r0, #0]
    f9ea:	f007 fec1 	bl	17770 <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    f9ee:	68e2      	ldr	r2, [r4, #12]
    f9f0:	f105 0109 	add.w	r1, r5, #9
    f9f4:	2001      	movs	r0, #1
    f9f6:	f007 ff1f 	bl	17838 <radio_tmr_start>
	radio_tmr_end_capture();
    f9fa:	f007 ffdb 	bl	179b4 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    f9fe:	462a      	mov	r2, r5
    fa00:	2105      	movs	r1, #5
    fa02:	480c      	ldr	r0, [pc, #48]	; (fa34 <event_ext_adv+0x9c>)
    fa04:	f7ff fe28 	bl	f658 <preempt_calc>
    fa08:	4603      	mov	r3, r0
    fa0a:	b148      	cbz	r0, fa20 <event_ext_adv+0x88>
		_radio.state = STATE_STOP;
    fa0c:	2304      	movs	r3, #4
    fa0e:	7523      	strb	r3, [r4, #20]
}
    fa10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    fa14:	f007 be0c 	b.w	17630 <radio_disable>
	if (_radio.advertiser.filter_policy) {
    fa18:	079b      	lsls	r3, r3, #30
    fa1a:	d0e8      	beq.n	f9ee <event_ext_adv+0x56>
		struct ll_filter *wl = ctrl_filter_get(true);
    fa1c:	4630      	mov	r0, r6
    fa1e:	e7df      	b.n	f9e0 <event_ext_adv+0x48>
		ticker_status =
    fa20:	4a05      	ldr	r2, [pc, #20]	; (fa38 <event_ext_adv+0xa0>)
    fa22:	4601      	mov	r1, r0
    fa24:	f7fc f90a 	bl	bc3c <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    fa28:	f030 0302 	bics.w	r3, r0, #2
    fa2c:	d1bc      	bne.n	f9a8 <event_ext_adv+0x10>
    fa2e:	bd70      	pop	{r4, r5, r6, pc}
    fa30:	20000c08 	.word	0x20000c08
    fa34:	20000c20 	.word	0x20000c20
    fa38:	0000ea41 	.word	0x0000ea41

0000fa3c <ctrl_tx_enqueue>:
{
    fa3c:	b510      	push	{r4, lr}
	    !conn->empty &&
    fa3e:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    fa42:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
    fa46:	f014 0f80 	tst.w	r4, #128	; 0x80
    fa4a:	d118      	bne.n	fa7e <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    fa4c:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
    fa50:	b1ab      	cbz	r3, fa7e <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    fa52:	0724      	lsls	r4, r4, #28
    fa54:	d413      	bmi.n	fa7e <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    fa56:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
    fa5a:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    fa5c:	bf04      	itt	eq
    fa5e:	681c      	ldreq	r4, [r3, #0]
    fa60:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
    fa64:	b992      	cbnz	r2, fa8c <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    fa66:	681a      	ldr	r2, [r3, #0]
    fa68:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    fa6a:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    fa6c:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
    fa70:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
    fa74:	680b      	ldr	r3, [r1, #0]
    fa76:	b90b      	cbnz	r3, fa7c <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    fa78:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    fa7c:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    fa7e:	b92a      	cbnz	r2, fa8c <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    fa80:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    fa84:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    fa86:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    fa8a:	e7ef      	b.n	fa6c <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    fa8c:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    fa90:	681a      	ldr	r2, [r3, #0]
    fa92:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    fa94:	6019      	str	r1, [r3, #0]
    fa96:	e7eb      	b.n	fa70 <ctrl_tx_enqueue+0x34>

0000fa98 <ctrl_tx_sec_enqueue>:
{
    fa98:	b410      	push	{r4}
	if (conn->pause_tx) {
    fa9a:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    fa9e:	0724      	lsls	r4, r4, #28
{
    faa0:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    faa2:	d50f      	bpl.n	fac4 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    faa4:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
    faa8:	b931      	cbnz	r1, fab8 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    faaa:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
    faae:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    fab0:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
    fab4:	bc10      	pop	{r4}
    fab6:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    fab8:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    fabc:	6819      	ldr	r1, [r3, #0]
    fabe:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    fac0:	601a      	str	r2, [r3, #0]
    fac2:	e7f7      	b.n	fab4 <ctrl_tx_sec_enqueue+0x1c>
}
    fac4:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    fac6:	f7ff bfb9 	b.w	fa3c <ctrl_tx_enqueue>
	...

0000facc <feature_rsp_send>:
{
    facc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    face:	4f21      	ldr	r7, [pc, #132]	; (fb54 <feature_rsp_send+0x88>)
{
    fad0:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    fad2:	f607 5044 	addw	r0, r7, #3396	; 0xd44
{
    fad6:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    fad8:	f7fb f91f 	bl	ad1a <mem_acquire>
	if (!node_tx) {
    fadc:	4604      	mov	r4, r0
    fade:	b3b0      	cbz	r0, fb4e <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    fae0:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    fae2:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    fae4:	f8d7 2cfc 	ldr.w	r2, [r7, #3324]	; 0xcfc
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    fae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    faec:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    faf0:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    faf4:	f043 0310 	orr.w	r3, r3, #16
    faf8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    fafc:	79b1      	ldrb	r1, [r6, #6]
    fafe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    fb02:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    fb06:	f3c1 0110 	ubfx	r1, r1, #0, #17
    fb0a:	400b      	ands	r3, r1
    fb0c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
    fb10:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    fb14:	f043 0320 	orr.w	r3, r3, #32
    fb18:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fb1c:	7903      	ldrb	r3, [r0, #4]
    fb1e:	f043 0303 	orr.w	r3, r3, #3
    fb22:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    fb24:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    fb26:	2309      	movs	r3, #9
    fb28:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    fb2a:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    fb2c:	2100      	movs	r1, #0
    fb2e:	4410      	add	r0, r2
    fb30:	f7f0 fe70 	bl	814 <memset>
		conn->llcp_features & 0xFF;
    fb34:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    fb38:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    fb3a:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    fb3c:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    fb3e:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    fb40:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    fb42:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    fb44:	4621      	mov	r1, r4
    fb46:	f7ff ffa7 	bl	fa98 <ctrl_tx_sec_enqueue>
	return 0;
    fb4a:	2000      	movs	r0, #0
    fb4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    fb4e:	2001      	movs	r0, #1
}
    fb50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fb52:	bf00      	nop
    fb54:	20000c08 	.word	0x20000c08

0000fb58 <start_enc_rsp_send>:
{
    fb58:	b510      	push	{r4, lr}
    fb5a:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    fb5c:	b9c9      	cbnz	r1, fb92 <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    fb5e:	480f      	ldr	r0, [pc, #60]	; (fb9c <start_enc_rsp_send+0x44>)
    fb60:	f7fb f8db 	bl	ad1a <mem_acquire>
		if (!node_tx) {
    fb64:	b1b8      	cbz	r0, fb96 <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (void *)node_tx->pdu_data;
    fb66:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
    fb68:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    fb6c:	f043 0320 	orr.w	r3, r3, #32
    fb70:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fb74:	780b      	ldrb	r3, [r1, #0]
    fb76:	f043 0303 	orr.w	r3, r3, #3
    fb7a:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    fb7c:	2301      	movs	r3, #1
    fb7e:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    fb80:	2306      	movs	r3, #6
    fb82:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
    fb84:	b140      	cbz	r0, fb98 <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
    fb86:	4601      	mov	r1, r0
    fb88:	4620      	mov	r0, r4
    fb8a:	f7ff ff57 	bl	fa3c <ctrl_tx_enqueue>
	return 0;
    fb8e:	2000      	movs	r0, #0
    fb90:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
    fb92:	2000      	movs	r0, #0
    fb94:	e7e8      	b.n	fb68 <start_enc_rsp_send+0x10>
			return 1;
    fb96:	2001      	movs	r0, #1
}
    fb98:	bd10      	pop	{r4, pc}
    fb9a:	bf00      	nop
    fb9c:	2000194c 	.word	0x2000194c

0000fba0 <reject_ext_ind_send>:
{
    fba0:	b570      	push	{r4, r5, r6, lr}
    fba2:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    fba4:	480b      	ldr	r0, [pc, #44]	; (fbd4 <reject_ext_ind_send+0x34>)
{
    fba6:	460e      	mov	r6, r1
    fba8:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    fbaa:	f7fb f8b6 	bl	ad1a <mem_acquire>
	if (!node_tx) {
    fbae:	b178      	cbz	r0, fbd0 <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fbb0:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    fbb2:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fbb4:	f043 0303 	orr.w	r3, r3, #3
    fbb8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    fbba:	2303      	movs	r3, #3
    fbbc:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    fbbe:	2311      	movs	r3, #17
    fbc0:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    fbc2:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
    fbc4:	4601      	mov	r1, r0
    fbc6:	4620      	mov	r0, r4
    fbc8:	f7ff ff38 	bl	fa3c <ctrl_tx_enqueue>
	return 0;
    fbcc:	2000      	movs	r0, #0
    fbce:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    fbd0:	2001      	movs	r0, #1
}
    fbd2:	bd70      	pop	{r4, r5, r6, pc}
    fbd4:	2000194c 	.word	0x2000194c

0000fbd8 <event_connection_prepare>:
{
    fbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    fbdc:	4dc5      	ldr	r5, [pc, #788]	; (fef4 <event_connection_prepare+0x31c>)
{
    fbde:	b08f      	sub	sp, #60	; 0x3c
    fbe0:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    fbe2:	7c2b      	ldrb	r3, [r5, #16]
{
    fbe4:	910c      	str	r1, [sp, #48]	; 0x30
    fbe6:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    fbe8:	b12b      	cbz	r3, fbf6 <event_connection_prepare+0x1e>
		LL_ASSERT(0);
    fbea:	4040      	eors	r0, r0
    fbec:	f380 8811 	msr	BASEPRI, r0
    fbf0:	f04f 0004 	mov.w	r0, #4
    fbf4:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    fbf6:	f894 3020 	ldrb.w	r3, [r4, #32]
    fbfa:	3307      	adds	r3, #7
    fbfc:	b2db      	uxtb	r3, r3
    fbfe:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    fc00:	f994 301d 	ldrsb.w	r3, [r4, #29]
    fc04:	2b00      	cmp	r3, #0
    fc06:	da09      	bge.n	fc1c <event_connection_prepare+0x44>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    fc08:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
    fc0a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    fc0c:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    fc10:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    fc12:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
    fc14:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
    fc16:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    fc18:	bf88      	it	hi
    fc1a:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    fc1c:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    fc1e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
    fc22:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    fc24:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    fc26:	b292      	uxth	r2, r2
    fc28:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    fc2a:	4432      	add	r2, r6
    fc2c:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    fc2e:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    fc32:	429a      	cmp	r2, r3
    fc34:	f040 819d 	bne.w	ff72 <event_connection_prepare+0x39a>
    fc38:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    fc3c:	075f      	lsls	r7, r3, #29
    fc3e:	f100 8281 	bmi.w	10144 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x145>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    fc42:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    fc46:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    fc4a:	429a      	cmp	r2, r3
    fc4c:	d06e      	beq.n	fd2c <event_connection_prepare+0x154>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    fc4e:	2005      	movs	r0, #5
    fc50:	f7ff fb54 	bl	f2fc <event_stop.constprop.35>
	conn_upd = _radio.conn_upd;
    fc54:	f8d5 3d70 	ldr.w	r3, [r5, #3440]	; 0xd70
	if (conn_upd && (conn_upd != conn)) {
    fc58:	b10b      	cbz	r3, fc5e <event_connection_prepare+0x86>
    fc5a:	429c      	cmp	r4, r3
    fc5c:	d166      	bne.n	fd2c <event_connection_prepare+0x154>
	switch (conn->llcp_conn_param.state) {
    fc5e:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    fc62:	f003 0307 	and.w	r3, r3, #7
    fc66:	2b05      	cmp	r3, #5
    fc68:	d8bf      	bhi.n	fbea <event_connection_prepare+0x12>
    fc6a:	e8df f013 	tbh	[pc, r3, lsl #1]
    fc6e:	0006      	.short	0x0006
    fc70:	01180076 	.word	0x01180076
    fc74:	005f005f 	.word	0x005f005f
    fc78:	005f      	.short	0x005f
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    fc7a:	489f      	ldr	r0, [pc, #636]	; (fef8 <event_connection_prepare+0x320>)
    fc7c:	f7fb f84d 	bl	ad1a <mem_acquire>
	if (!node_tx) {
    fc80:	4607      	mov	r7, r0
    fc82:	2800      	cmp	r0, #0
    fc84:	d052      	beq.n	fd2c <event_connection_prepare+0x154>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    fc86:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    fc8a:	2204      	movs	r2, #4
    fc8c:	f362 0302 	bfi	r3, r2, #0, #3
    fc90:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fc94:	7903      	ldrb	r3, [r0, #4]
    fc96:	f043 0303 	orr.w	r3, r3, #3
    fc9a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    fc9c:	2318      	movs	r3, #24
    fc9e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    fca0:	230f      	movs	r3, #15
    fca2:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
    fca4:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    fca8:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
    fcaa:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
    fcac:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    fcb0:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
    fcb2:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    fcb6:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
    fcb8:	2300      	movs	r3, #0
    fcba:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
    fcbc:	74c3      	strb	r3, [r0, #19]
    fcbe:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
    fcc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fcc4:	7543      	strb	r3, [r0, #21]
    fcc6:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
    fcc8:	75c3      	strb	r3, [r0, #23]
    fcca:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
    fccc:	7643      	strb	r3, [r0, #25]
    fcce:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
    fcd0:	76c3      	strb	r3, [r0, #27]
    fcd2:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
    fcd4:	7743      	strb	r3, [r0, #29]
    fcd6:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
    fcd8:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
    fcdc:	4601      	mov	r1, r0
    fcde:	4620      	mov	r0, r4
    fce0:	f7ff feac 	bl	fa3c <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    fce4:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    fce6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
    fcea:	f8c5 4d70 	str.w	r4, [r5, #3440]	; 0xd70
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    fcee:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
    fcf0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    fcf4:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    fcf8:	da0b      	bge.n	fd12 <event_connection_prepare+0x13a>
			u32_t ticks_prepare_to_start =
    fcfa:	68a3      	ldr	r3, [r4, #8]
    fcfc:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    fcfe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    fd02:	428b      	cmp	r3, r1
    fd04:	bf2c      	ite	cs
    fd06:	4443      	addcs	r3, r8
    fd08:	eb08 0301 	addcc.w	r3, r8, r1
    fd0c:	1a9b      	subs	r3, r3, r2
    fd0e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    fd12:	3713      	adds	r7, #19
		s_mfy_sched_offset.param = (void *)conn;
    fd14:	4b79      	ldr	r3, [pc, #484]	; (fefc <event_connection_prepare+0x324>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    fd16:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    fd1a:	2201      	movs	r2, #1
    fd1c:	4611      	mov	r1, r2
    fd1e:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
    fd20:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    fd22:	f7fb f8c5 	bl	aeb0 <mayfly_enqueue>
		LL_ASSERT(!retval);
    fd26:	2800      	cmp	r0, #0
    fd28:	f47f af5f 	bne.w	fbea <event_connection_prepare+0x12>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    fd2c:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
    fd30:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    fd34:	429a      	cmp	r2, r3
    fd36:	f000 8115 	beq.w	ff64 <event_connection_prepare+0x38c>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    fd3a:	2005      	movs	r0, #5
    fd3c:	f7ff fade 	bl	f2fc <event_stop.constprop.35>
	switch (conn->llcp_phy.state) {
    fd40:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    fd44:	f003 0203 	and.w	r2, r3, #3
    fd48:	2a03      	cmp	r2, #3
    fd4a:	f63f af4e 	bhi.w	fbea <event_connection_prepare+0x12>
    fd4e:	e8df f012 	tbh	[pc, r2, lsl #1]
    fd52:	00d7      	.short	0x00d7
    fd54:	01090109 	.word	0x01090109
    fd58:	012d      	.short	0x012d
	if (conn->llcp_conn_param.status) {
    fd5a:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
    fd5e:	b1ef      	cbz	r7, fd9c <event_connection_prepare+0x1c4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    fd60:	4865      	ldr	r0, [pc, #404]	; (fef8 <event_connection_prepare+0x320>)
    fd62:	f7fa ffda 	bl	ad1a <mem_acquire>
		if (!node_tx) {
    fd66:	4601      	mov	r1, r0
    fd68:	2800      	cmp	r0, #0
    fd6a:	d0df      	beq.n	fd2c <event_connection_prepare+0x154>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    fd6c:	7903      	ldrb	r3, [r0, #4]
    fd6e:	f043 0303 	orr.w	r3, r3, #3
    fd72:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    fd74:	2311      	movs	r3, #17
    fd76:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    fd78:	2303      	movs	r3, #3
    fd7a:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    fd7c:	230f      	movs	r3, #15
    fd7e:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    fd80:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    fd84:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
    fd86:	4620      	mov	r0, r4
    fd88:	f7ff fe58 	bl	fa3c <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    fd8c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    fd90:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    fd94:	2300      	movs	r3, #0
    fd96:	f8c5 3d70 	str.w	r3, [r5, #3440]	; 0xd70
    fd9a:	e7c7      	b.n	fd2c <event_connection_prepare+0x154>
	if (!conn->role) {
    fd9c:	f994 301d 	ldrsb.w	r3, [r4, #29]
    fda0:	2b00      	cmp	r3, #0
    fda2:	db3b      	blt.n	fe1c <event_connection_prepare+0x244>
		if (conn->llcp_req != conn->llcp_ack) {
    fda4:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    fda8:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    fdac:	428b      	cmp	r3, r1
    fdae:	d1bd      	bne.n	fd2c <event_connection_prepare+0x154>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    fdb0:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
    fdb4:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    fdb8:	2205      	movs	r2, #5
    fdba:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    fdbe:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    fdc2:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
    fdc6:	2301      	movs	r3, #1
    fdc8:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
				((conn->llcp_conn_param.interval /
    fdcc:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
		if (conn->llcp_conn_param.preferred_periodicity) {
    fdd0:	b122      	cbz	r2, fddc <event_connection_prepare+0x204>
				((conn->llcp_conn_param.interval /
    fdd2:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    fdd6:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
    fdd8:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
    fddc:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    fde0:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    fde4:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
    fde8:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    fdec:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    fdf0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    fdf4:	2202      	movs	r2, #2
    fdf6:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    fdfa:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
    fdfe:	f082 0208 	eor.w	r2, r2, #8
    fe02:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    fe06:	f362 0382 	bfi	r3, r2, #2, #1
    fe0a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
    fe0e:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
    fe10:	2301      	movs	r3, #1
    fe12:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    fe16:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    fe1a:	e787      	b.n	fd2c <event_connection_prepare+0x154>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    fe1c:	4836      	ldr	r0, [pc, #216]	; (fef8 <event_connection_prepare+0x320>)
    fe1e:	f7fa ff7c 	bl	ad1a <mem_acquire>
	if (!node_tx) {
    fe22:	4601      	mov	r1, r0
    fe24:	2800      	cmp	r0, #0
    fe26:	d081      	beq.n	fd2c <event_connection_prepare+0x154>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    fe28:	7903      	ldrb	r3, [r0, #4]
    fe2a:	f043 0303 	orr.w	r3, r3, #3
    fe2e:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    fe30:	2318      	movs	r3, #24
    fe32:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    fe34:	2310      	movs	r3, #16
    fe36:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
    fe38:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    fe3c:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
    fe3e:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
    fe40:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    fe44:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
    fe46:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    fe4a:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    fe4c:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    fe50:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    fe52:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    fe56:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
    fe5a:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    fe5e:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
    fe62:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    fe66:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
    fe6a:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    fe6e:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
    fe72:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    fe76:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
    fe7a:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
    fe7e:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
    fe82:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
    fe86:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
    fe8a:	4620      	mov	r0, r4
    fe8c:	f7ff fdd6 	bl	fa3c <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    fe90:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    fe94:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
    fe98:	f8c5 7d70 	str.w	r7, [r5, #3440]	; 0xd70
    fe9c:	e746      	b.n	fd2c <event_connection_prepare+0x154>
	if (conn->pause_tx) {
    fe9e:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    fea2:	0718      	lsls	r0, r3, #28
    fea4:	f53f af42 	bmi.w	fd2c <event_connection_prepare+0x154>
	node_rx = packet_rx_reserve_get(2);
    fea8:	2002      	movs	r0, #2
    feaa:	f7fd fcd7 	bl	d85c <packet_rx_reserve_get>
	if (!node_rx) {
    feae:	2800      	cmp	r0, #0
    feb0:	f43f af3c 	beq.w	fd2c <event_connection_prepare+0x154>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    feb4:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    feb8:	2203      	movs	r2, #3
    feba:	f362 0302 	bfi	r3, r2, #0, #3
    febe:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
    fec2:	8c23      	ldrh	r3, [r4, #32]
    fec4:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    fec6:	2301      	movs	r3, #1
    fec8:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    feca:	7a03      	ldrb	r3, [r0, #8]
    fecc:	4313      	orrs	r3, r2
    fece:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    fed0:	2318      	movs	r3, #24
    fed2:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    fed4:	230f      	movs	r3, #15
    fed6:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
    fed8:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    fedc:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
    fede:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
    fee0:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    fee4:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
    fee6:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    feea:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
    feec:	f7fe feaa 	bl	ec44 <packet_rx_enqueue>
    fef0:	e71c      	b.n	fd2c <event_connection_prepare+0x154>
    fef2:	bf00      	nop
    fef4:	20000c08 	.word	0x20000c08
    fef8:	2000194c 	.word	0x2000194c
    fefc:	2000e1b0 	.word	0x2000e1b0
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ff00:	48af      	ldr	r0, [pc, #700]	; (101c0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1c1>)
    ff02:	f7fa ff0a 	bl	ad1a <mem_acquire>
		if (!node_tx) {
    ff06:	4601      	mov	r1, r0
    ff08:	b360      	cbz	r0, ff64 <event_connection_prepare+0x38c>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    ff0a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
    ff0e:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    ff12:	2201      	movs	r2, #1
    ff14:	f362 0301 	bfi	r3, r2, #0, #2
    ff18:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
    ff1c:	b2db      	uxtb	r3, r3
    ff1e:	f3c3 0082 	ubfx	r0, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    ff22:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
    ff26:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
    ff2a:	f363 07c5 	bfi	r7, r3, #3, #3
    ff2e:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
    ff32:	f894 70f7 	ldrb.w	r7, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
    ff36:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    ff3a:	f367 1286 	bfi	r2, r7, #6, #1
    ff3e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ff42:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    ff44:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ff46:	f042 0203 	orr.w	r2, r2, #3
    ff4a:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    ff4c:	2203      	movs	r2, #3
    ff4e:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    ff50:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
    ff52:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    ff54:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_enqueue(conn, node_tx);
    ff56:	4620      	mov	r0, r4
    ff58:	f7ff fd70 	bl	fa3c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    ff5c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    ff60:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    ff64:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    ff68:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    ff6c:	429a      	cmp	r2, r3
    ff6e:	f000 80e9 	beq.w	10144 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x145>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    ff72:	2005      	movs	r0, #5
    ff74:	f7ff f9c2 	bl	f2fc <event_stop.constprop.35>
		switch (conn->llcp_type) {
    ff78:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    ff7c:	3b01      	subs	r3, #1
    ff7e:	2b07      	cmp	r3, #7
    ff80:	f63f ae33 	bhi.w	fbea <event_connection_prepare+0x12>
    ff84:	a201      	add	r2, pc, #4	; (adr r2, ff8c <event_connection_prepare+0x3b4>)
    ff86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ff8a:	bf00      	nop
    ff8c:	0001006b 	.word	0x0001006b
    ff90:	00010501 	.word	0x00010501
    ff94:	000105bd 	.word	0x000105bd
    ff98:	000107f1 	.word	0x000107f1
    ff9c:	00010851 	.word	0x00010851
    ffa0:	0000fbeb 	.word	0x0000fbeb
    ffa4:	000108f1 	.word	0x000108f1
    ffa8:	00010921 	.word	0x00010921
		conn->llcp_phy.ack = conn->llcp_phy.req;
    ffac:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    ffb0:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
    ffb4:	f3c3 0282 	ubfx	r2, r3, #2, #3
    ffb8:	0791      	lsls	r1, r2, #30
    ffba:	d544      	bpl.n	10046 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x47>
			conn->llcp_phy.tx = BIT(1);
    ffbc:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
    ffbe:	f362 0384 	bfi	r3, r2, #2, #3
    ffc2:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
    ffc6:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    ffca:	095a      	lsrs	r2, r3, #5
    ffcc:	0790      	lsls	r0, r2, #30
    ffce:	d543      	bpl.n	10058 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x59>
			conn->llcp_phy.rx = BIT(1);
    ffd0:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
    ffd2:	f362 1347 	bfi	r3, r2, #5, #3
    ffd6:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
    ffda:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    ffde:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    ffe2:	f3c2 0182 	ubfx	r1, r2, #2, #3
    ffe6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    ffea:	428b      	cmp	r3, r1
    ffec:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    fff0:	bf14      	ite	ne
    fff2:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
    fff6:	f36f 0384 	bfceq	r3, #2, #3
    fffa:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
    fffe:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   10002:	0952      	lsrs	r2, r2, #5
   10004:	f003 0307 	and.w	r3, r3, #7
   10008:	4293      	cmp	r3, r2
   1000a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
   1000e:	bf14      	ite	ne
   10010:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
   10014:	f36f 1347 	bfceq	r3, #5, #3
   10018:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
   1001c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   10020:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
   10024:	f043 0301 	orr.w	r3, r3, #1
   10028:	f3c2 0240 	ubfx	r2, r2, #1, #1
   1002c:	f362 0341 	bfi	r3, r2, #1, #1
   10030:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
   10034:	2308      	movs	r3, #8
   10036:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
   1003a:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   1003e:	3b01      	subs	r3, #1
   10040:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   10044:	e78e      	b.n	ff64 <event_connection_prepare+0x38c>
		} else if (conn->llcp_phy.tx & BIT(0)) {
   10046:	07d7      	lsls	r7, r2, #31
   10048:	d501      	bpl.n	1004e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4f>
			conn->llcp_phy.tx = BIT(0);
   1004a:	2201      	movs	r2, #1
   1004c:	e7b7      	b.n	ffbe <event_connection_prepare+0x3e6>
		} else if (conn->llcp_phy.tx & BIT(2)) {
   1004e:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
   10052:	bf18      	it	ne
   10054:	2204      	movne	r2, #4
   10056:	e7b2      	b.n	ffbe <event_connection_prepare+0x3e6>
		} else if (conn->llcp_phy.rx & BIT(0)) {
   10058:	07d1      	lsls	r1, r2, #31
   1005a:	d501      	bpl.n	10060 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x61>
			conn->llcp_phy.rx = BIT(0);
   1005c:	2201      	movs	r2, #1
   1005e:	e7b8      	b.n	ffd2 <event_connection_prepare+0x3fa>
		} else if (conn->llcp_phy.rx & BIT(2)) {
   10060:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
   10064:	bf18      	it	ne
   10066:	2204      	movne	r2, #4
   10068:	e7b3      	b.n	ffd2 <event_connection_prepare+0x3fa>
	if (!conn_upd) {
   1006a:	f8d5 3d70 	ldr.w	r3, [r5, #3440]	; 0xd70
   1006e:	b90b      	cbnz	r3, 10074 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x75>
		_radio.conn_upd = conn;
   10070:	f8c5 4d70 	str.w	r4, [r5, #3440]	; 0xd70
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
   10074:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   10078:	f013 0303 	ands.w	r3, r3, #3
   1007c:	f000 80a8 	beq.w	101d0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1d1>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10080:	484f      	ldr	r0, [pc, #316]	; (101c0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1c1>)
   10082:	f7fa fe4a 	bl	ad1a <mem_acquire>
		if (!node_tx) {
   10086:	4607      	mov	r7, r0
   10088:	2800      	cmp	r0, #0
   1008a:	d05b      	beq.n	10144 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x145>
		switch (conn->llcp.conn_upd.state) {
   1008c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   10090:	f003 0303 	and.w	r3, r3, #3
   10094:	2b01      	cmp	r3, #1
   10096:	f000 8091 	beq.w	101bc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1bd>
   1009a:	2b02      	cmp	r3, #2
   1009c:	f47f ada5 	bne.w	fbea <event_connection_prepare+0x12>
			fp_mayfly_select_or_use =
   100a0:	4a48      	ldr	r2, [pc, #288]	; (101c4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1c5>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   100a2:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   100a6:	f36f 0301 	bfc	r3, #0, #2
   100aa:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
   100ae:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   100b0:	3306      	adds	r3, #6
   100b2:	4433      	add	r3, r6
   100b4:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
   100b6:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   100ba:	7939      	ldrb	r1, [r7, #4]
   100bc:	f041 0103 	orr.w	r1, r1, #3
   100c0:	7139      	strb	r1, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
   100c2:	210c      	movs	r1, #12
   100c4:	7179      	strb	r1, [r7, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   100c6:	2100      	movs	r1, #0
   100c8:	71f9      	strb	r1, [r7, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
   100ca:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
   100ce:	7239      	strb	r1, [r7, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   100d0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   100d4:	f240 40e2 	movw	r0, #1250	; 0x4e2
   100d8:	fbb1 f1f0 	udiv	r1, r1, r0
   100dc:	f8a7 1009 	strh.w	r1, [r7, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
   100e0:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
   100e4:	f8a7 100b 	strh.w	r1, [r7, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
   100e8:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   100ec:	f8a7 100d 	strh.w	r1, [r7, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
   100f0:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
   100f4:	f8a7 100f 	strh.w	r1, [r7, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
   100f8:	f8a7 3011 	strh.w	r3, [r7, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   100fc:	6821      	ldr	r1, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
   100fe:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   10102:	2900      	cmp	r1, #0
   10104:	da0b      	bge.n	1011e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x11f>
			u32_t ticks_prepare_to_start =
   10106:	68a3      	ldr	r3, [r4, #8]
   10108:	6860      	ldr	r0, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
   1010a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
   1010e:	4283      	cmp	r3, r0
   10110:	bf2c      	ite	cs
   10112:	4443      	addcs	r3, r8
   10114:	eb08 0300 	addcc.w	r3, r8, r0
   10118:	1a5b      	subs	r3, r3, r1
   1011a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
   1011e:	f107 0309 	add.w	r3, r7, #9
   10122:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
   10126:	4b28      	ldr	r3, [pc, #160]	; (101c8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1c9>)
   10128:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1012a:	2201      	movs	r2, #1
   1012c:	4611      	mov	r1, r2
   1012e:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
   10130:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   10132:	f7fa febd 	bl	aeb0 <mayfly_enqueue>
		LL_ASSERT(!retval);
   10136:	2800      	cmp	r0, #0
   10138:	f47f ad57 	bne.w	fbea <event_connection_prepare+0x12>
			ctrl_tx_enqueue(conn, node_tx);
   1013c:	4639      	mov	r1, r7
   1013e:	4620      	mov	r0, r4
   10140:	f7ff fc7c 	bl	fa3c <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   10144:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
   10148:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   1014c:	429a      	cmp	r2, r3
   1014e:	d01e      	beq.n	1018e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x18f>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   10150:	2005      	movs	r0, #5
   10152:	f7ff f8d3 	bl	f2fc <event_stop.constprop.35>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10156:	481a      	ldr	r0, [pc, #104]	; (101c0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1c1>)
   10158:	f7fa fddf 	bl	ad1a <mem_acquire>
		if (node_tx) {
   1015c:	4601      	mov	r1, r0
   1015e:	b1b0      	cbz	r0, 1018e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x18f>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   10160:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   10164:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10168:	7903      	ldrb	r3, [r0, #4]
   1016a:	f043 0303 	orr.w	r3, r3, #3
   1016e:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   10170:	2302      	movs	r3, #2
   10172:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   10174:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
   10176:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   1017a:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
   1017c:	4620      	mov	r0, r4
   1017e:	f7ff fc5d 	bl	fa3c <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
   10182:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
   10184:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
   10186:	bf98      	it	ls
   10188:	3301      	addls	r3, #1
   1018a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
   1018e:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   10192:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   10196:	429a      	cmp	r2, r3
   10198:	f000 84a9 	beq.w	10aee <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xaef>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   1019c:	2005      	movs	r0, #5
   1019e:	f7ff f8ad 	bl	f2fc <event_stop.constprop.35>
	switch (conn->llcp_length.state) {
   101a2:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   101a6:	f003 0303 	and.w	r3, r3, #3
   101aa:	2b03      	cmp	r3, #3
   101ac:	f63f ad1d 	bhi.w	fbea <event_connection_prepare+0x12>
   101b0:	e8df f013 	tbh	[pc, r3, lsl #1]
   101b4:	049d0460 	.word	0x049d0460
   101b8:	04b9049d 	.word	0x04b9049d
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
   101bc:	4a03      	ldr	r2, [pc, #12]	; (101cc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1cd>)
   101be:	e770      	b.n	100a2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa3>
   101c0:	2000194c 	.word	0x2000194c
   101c4:	0000e6f1 	.word	0x0000e6f1
   101c8:	2000e1a0 	.word	0x2000e1a0
   101cc:	0000edd5 	.word	0x0000edd5
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   101d0:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
   101d4:	1bf7      	subs	r7, r6, r7
   101d6:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
   101d8:	043a      	lsls	r2, r7, #16
   101da:	d4b3      	bmi.n	10144 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x145>
		conn->llcp_ack = conn->llcp_req;
   101dc:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   101e0:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   101e4:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
   101e8:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
   101ec:	428a      	cmp	r2, r1
   101ee:	d009      	beq.n	10204 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x205>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   101f0:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   101f4:	f002 0207 	and.w	r2, r2, #7
   101f8:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   101fa:	bf04      	itt	eq
   101fc:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
   10200:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
   10204:	f8d5 2d70 	ldr.w	r2, [r5, #3440]	; 0xd70
		_radio.ticker_id_prepare = 0;
   10208:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
   1020a:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
   1020c:	bf08      	it	eq
   1020e:	f8c5 3d70 	streq.w	r3, [r5, #3440]	; 0xd70
		_radio.ticker_id_prepare = 0;
   10212:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
   10214:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   10216:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   1021a:	429a      	cmp	r2, r3
   1021c:	d114      	bne.n	10248 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x249>
		     conn->conn_interval) ||
   1021e:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   10222:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   10224:	4299      	cmp	r1, r3
   10226:	d10f      	bne.n	10248 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x249>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
   10228:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1022c:	435a      	muls	r2, r3
   1022e:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   10232:	f242 7110 	movw	r1, #10000	; 0x2710
   10236:	fb01 2303 	mla	r3, r1, r3, r2
   1023a:	3b01      	subs	r3, #1
   1023c:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   10240:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
   10242:	b29b      	uxth	r3, r3
   10244:	429a      	cmp	r2, r3
   10246:	d016      	beq.n	10276 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x277>
			node_rx = packet_rx_reserve_get(2);
   10248:	2002      	movs	r0, #2
   1024a:	f7fd fb07 	bl	d85c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   1024e:	2800      	cmp	r0, #0
   10250:	f43f accb 	beq.w	fbea <event_connection_prepare+0x12>
			node_rx->hdr.handle = conn->handle;
   10254:	8c23      	ldrh	r3, [r4, #32]
   10256:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   10258:	2308      	movs	r3, #8
   1025a:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
   1025c:	2300      	movs	r3, #0
   1025e:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
   10260:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   10264:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
   10266:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
   1026a:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
   1026c:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   10270:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
   10272:	f7fe fce7 	bl	ec44 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   10276:	6823      	ldr	r3, [r4, #0]
   10278:	6866      	ldr	r6, [r4, #4]
   1027a:	2b00      	cmp	r3, #0
   1027c:	da09      	bge.n	10292 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x293>
			u32_t ticks_prepare_to_start =
   1027e:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
   10280:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
   10284:	42b0      	cmp	r0, r6
   10286:	bf2c      	ite	cs
   10288:	4480      	addcs	r8, r0
   1028a:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
   1028c:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
   1028e:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
   10292:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
   10294:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
   10298:	49bd      	ldr	r1, [pc, #756]	; (10590 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x591>)
		conn_interval_old = instant_latency * conn->conn_interval;
   1029a:	fb13 f307 	smulbb	r3, r3, r7
   1029e:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
   102a0:	fbb3 f2fa 	udiv	r2, r3, sl
   102a4:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
   102a8:	fb1a f009 	smulbb	r0, sl, r9
   102ac:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
   102ae:	4283      	cmp	r3, r0
   102b0:	f080 8108 	bcs.w	104c4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4c5>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
   102b4:	1ac0      	subs	r0, r0, r3
   102b6:	f240 1223 	movw	r2, #291	; 0x123
   102ba:	4342      	muls	r2, r0
   102bc:	17c3      	asrs	r3, r0, #31
   102be:	fb01 2303 	mla	r3, r1, r3, r2
   102c2:	fba0 0101 	umull	r0, r1, r0, r1
   102c6:	4419      	add	r1, r3
   102c8:	a3af      	add	r3, pc, #700	; (adr r3, 10588 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x589>)
   102ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   102ce:	f7ef ffcb 	bl	268 <__aeabi_uldivmod>
   102d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   102d6:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   102da:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
   102dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   102de:	f8df b2d8 	ldr.w	fp, [pc, #728]	; 105b8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5b9>
   102e2:	1bdb      	subs	r3, r3, r7
   102e4:	444b      	add	r3, r9
   102e6:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset =
   102e8:	6823      	ldr	r3, [r4, #0]
   102ea:	429e      	cmp	r6, r3
   102ec:	bf38      	it	cc
   102ee:	461e      	movcc	r6, r3
		if (conn->role) {
   102f0:	f994 301d 	ldrsb.w	r3, [r4, #29]
		ticks_slot_offset =
   102f4:	960d      	str	r6, [sp, #52]	; 0x34
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
   102f6:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
   102fa:	2b00      	cmp	r3, #0
   102fc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   10300:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
   10302:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
   10306:	f280 80ee 	bge.w	104e6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4e7>
				conn->slave.window_widening_periodic_us *
   1030a:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
   1030c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1030e:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
   10312:	f895 3d08 	ldrb.w	r3, [r5, #3336]	; 0xd08
   10316:	4a9f      	ldr	r2, [pc, #636]	; (10594 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x595>)
   10318:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
   1031c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   10320:	f3c3 0382 	ubfx	r3, r3, #2, #3
   10324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
   10328:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
   1032c:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
   1032e:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
   10330:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
   10334:	4b98      	ldr	r3, [pc, #608]	; (10598 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x599>)
				conn->llcp.conn_upd.win_size * 1250;
   10336:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
   1033a:	f205 253f 	addw	r5, r5, #575	; 0x23f
   1033e:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
   10342:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
   10344:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
   10348:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
   1034a:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
   1034c:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
   1034e:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
   10350:	429f      	cmp	r7, r3
   10352:	bf94      	ite	ls
   10354:	65e7      	strls	r7, [r4, #92]	; 0x5c
   10356:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
   10358:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
   1035a:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
   1035c:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   1035e:	fba0 010b 	umull	r0, r1, r0, fp
   10362:	a389      	add	r3, pc, #548	; (adr r3, 10588 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x589>)
   10364:	e9d3 2300 	ldrd	r2, r3, [r3]
   10368:	f7ef ff7e 	bl	268 <__aeabi_uldivmod>
   1036c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1036e:	1a1b      	subs	r3, r3, r0
   10370:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   10372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10374:	fbb3 f0f8 	udiv	r0, r3, r8
   10378:	fb08 f000 	mul.w	r0, r8, r0
   1037c:	a382      	add	r3, pc, #520	; (adr r3, 10588 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x589>)
   1037e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10382:	fba0 010b 	umull	r0, r1, r0, fp
   10386:	f7ef ff6f 	bl	268 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
   1038a:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   1038c:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   10390:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
   10394:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   10398:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   1039a:	f242 7110 	movw	r1, #10000	; 0x2710
   1039e:	fb01 6303 	mla	r3, r1, r3, r6
   103a2:	3b01      	subs	r3, #1
   103a4:	fbb3 f3f6 	udiv	r3, r3, r6
   103a8:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   103aa:	4b7c      	ldr	r3, [pc, #496]	; (1059c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x59d>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
   103ac:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   103b0:	4433      	add	r3, r6
   103b2:	fbb3 f3f6 	udiv	r3, r3, r6
   103b6:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   103ba:	4b79      	ldr	r3, [pc, #484]	; (105a0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5a1>)
   103bc:	4433      	add	r3, r6
   103be:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   103c2:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   103c4:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   103c6:	4299      	cmp	r1, r3
   103c8:	bfc4      	itt	gt
   103ca:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
   103ce:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   103d0:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   103d4:	bfc8      	it	gt
   103d6:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
   103d8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   103dc:	bfc8      	it	gt
   103de:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
   103e0:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
   103e4:	bf08      	it	eq
   103e6:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   103ea:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
   103ee:	2000      	movs	r0, #0
   103f0:	2101      	movs	r1, #1
   103f2:	f007 fc07 	bl	17c04 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   103f6:	2200      	movs	r2, #0
   103f8:	2101      	movs	r1, #1
		mayfly_was_enabled =
   103fa:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   103fc:	4610      	mov	r0, r2
   103fe:	f7fa fd2f 	bl	ae60 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   10402:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
   10406:	f641 737b 	movw	r3, #8059	; 0x1f7b
   1040a:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1040c:	3207      	adds	r2, #7
		ticker_status =
   1040e:	9300      	str	r3, [sp, #0]
   10410:	b2d2      	uxtb	r2, r2
   10412:	4b64      	ldr	r3, [pc, #400]	; (105a4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5a5>)
   10414:	4608      	mov	r0, r1
   10416:	f7fb fb93 	bl	bb40 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1041a:	f030 0802 	bics.w	r8, r0, #2
   1041e:	f47f abe4 	bne.w	fbea <event_connection_prepare+0x12>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
   10422:	fba5 ab0b 	umull	sl, fp, r5, fp
   10426:	a358      	add	r3, pc, #352	; (adr r3, 10588 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x589>)
   10428:	e9d3 2300 	ldrd	r2, r3, [r3]
   1042c:	4650      	mov	r0, sl
   1042e:	4659      	mov	r1, fp
   10430:	f7ef ff1a 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
   10434:	4a5c      	ldr	r2, [pc, #368]	; (105a8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5a9>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10436:	f894 6020 	ldrb.w	r6, [r4, #32]
   1043a:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
   1043e:	2307      	movs	r3, #7
   10440:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10444:	2100      	movs	r1, #0
   10446:	4343      	muls	r3, r0
   10448:	fb02 3301 	mla	r3, r2, r1, r3
   1044c:	fba0 0102 	umull	r0, r1, r0, r2
   10450:	ebba 0000 	subs.w	r0, sl, r0
   10454:	4419      	add	r1, r3
   10456:	eb6b 0101 	sbc.w	r1, fp, r1
   1045a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1045e:	2300      	movs	r3, #0
   10460:	f7ef ff02 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10464:	68e3      	ldr	r3, [r4, #12]
   10466:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   10468:	f994 e01d 	ldrsb.w	lr, [r4, #29]
   1046c:	494f      	ldr	r1, [pc, #316]	; (105ac <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5ad>)
		ticker_status =
   1046e:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10470:	441a      	add	r2, r3
   10472:	4613      	mov	r3, r2
   10474:	4a4e      	ldr	r2, [pc, #312]	; (105b0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5b1>)
		ticker_status =
   10476:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10478:	ea12 022e 	ands.w	r2, r2, lr, asr #32
   1047c:	bf38      	it	cc
   1047e:	460a      	movcc	r2, r1
   10480:	3607      	adds	r6, #7
		ticker_status =
   10482:	f641 718b 	movw	r1, #8075	; 0x1f8b
   10486:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10488:	b2f6      	uxtb	r6, r6
		ticker_status =
   1048a:	4946      	ldr	r1, [pc, #280]	; (105a4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5a5>)
   1048c:	9107      	str	r1, [sp, #28]
   1048e:	9205      	str	r2, [sp, #20]
   10490:	9406      	str	r4, [sp, #24]
   10492:	f8cd 800c 	str.w	r8, [sp, #12]
   10496:	9501      	str	r5, [sp, #4]
   10498:	9700      	str	r7, [sp, #0]
   1049a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1049c:	4632      	mov	r2, r6
   1049e:	4641      	mov	r1, r8
   104a0:	4640      	mov	r0, r8
   104a2:	f7fb faaf 	bl	ba04 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   104a6:	f030 0002 	bics.w	r0, r0, #2
   104aa:	f47f ab9e 	bne.w	fbea <event_connection_prepare+0x12>
		if (mayfly_was_enabled) {
   104ae:	f1b9 0f00 	cmp.w	r9, #0
   104b2:	f000 8335 	beq.w	10b20 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb21>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   104b6:	2201      	movs	r2, #1
   104b8:	4611      	mov	r1, r2
}
   104ba:	b00f      	add	sp, #60	; 0x3c
   104bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   104c0:	f7fa bcce 	b.w	ae60 <mayfly_enable>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   104c4:	fb0a 3212 	mls	r2, sl, r2, r3
   104c8:	b292      	uxth	r2, r2
   104ca:	fba2 0101 	umull	r0, r1, r2, r1
   104ce:	f240 1323 	movw	r3, #291	; 0x123
   104d2:	fb03 1102 	mla	r1, r3, r2, r1
   104d6:	a32c      	add	r3, pc, #176	; (adr r3, 10588 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x589>)
   104d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   104dc:	f7ef fec4 	bl	268 <__aeabi_uldivmod>
   104e0:	eba8 0300 	sub.w	r3, r8, r0
   104e4:	e6f9      	b.n	102da <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2db>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   104e6:	990c      	ldr	r1, [sp, #48]	; 0x30
   104e8:	a327      	add	r3, pc, #156	; (adr r3, 10588 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x589>)
   104ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   104ee:	fba1 010b 	umull	r0, r1, r1, fp
   104f2:	f7ef feb9 	bl	268 <__aeabi_uldivmod>
   104f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
   104fa:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
   104fc:	4635      	mov	r5, r6
   104fe:	e747      	b.n	10390 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x391>
	if (conn->llcp.chan_map.initiate) {
   10500:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   10504:	b30b      	cbz	r3, 1054a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x54b>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10506:	482b      	ldr	r0, [pc, #172]	; (105b4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5b5>)
   10508:	f7fa fc07 	bl	ad1a <mem_acquire>
		if (node_tx) {
   1050c:	4607      	mov	r7, r0
   1050e:	2800      	cmp	r0, #0
   10510:	f43f ae18 	beq.w	10144 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x145>
			conn->llcp.chan_map.initiate = 0;
   10514:	2300      	movs	r3, #0
   10516:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
   1051a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1051c:	3306      	adds	r3, #6
   1051e:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
   10520:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10524:	7903      	ldrb	r3, [r0, #4]
   10526:	f043 0303 	orr.w	r3, r3, #3
   1052a:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   1052c:	2308      	movs	r3, #8
   1052e:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   10530:	2301      	movs	r3, #1
   10532:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   10534:	2205      	movs	r2, #5
   10536:	f104 0179 	add.w	r1, r4, #121	; 0x79
   1053a:	3008      	adds	r0, #8
   1053c:	f7f0 f93e 	bl	7bc <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   10540:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   10544:	f8a7 300d 	strh.w	r3, [r7, #13]
   10548:	e5f8      	b.n	1013c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x13d>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   1054a:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   1054e:	1af3      	subs	r3, r6, r3
   10550:	041f      	lsls	r7, r3, #16
   10552:	f53f adf7 	bmi.w	10144 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x145>
		conn->llcp_ack = conn->llcp_req;
   10556:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1055a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
   1055e:	f104 0717 	add.w	r7, r4, #23
   10562:	2205      	movs	r2, #5
   10564:	f104 0179 	add.w	r1, r4, #121	; 0x79
   10568:	4638      	mov	r0, r7
   1056a:	f7f0 f927 	bl	7bc <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   1056e:	2105      	movs	r1, #5
   10570:	4638      	mov	r0, r7
   10572:	f7fa fd7d 	bl	b070 <util_ones_count_get>
		conn->data_chan_count =
   10576:	7f63      	ldrb	r3, [r4, #29]
   10578:	f360 0305 	bfi	r3, r0, #0, #6
   1057c:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
   1057e:	2301      	movs	r3, #1
   10580:	7723      	strb	r3, [r4, #28]
   10582:	e5df      	b.n	10144 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x145>
   10584:	f3af 8000 	nop.w
   10588:	1afd498d 	.word	0x1afd498d
   1058c:	00000007 	.word	0x00000007
   10590:	09ce5400 	.word	0x09ce5400
   10594:	00022896 	.word	0x00022896
   10598:	000f4240 	.word	0x000f4240
   1059c:	026259ff 	.word	0x026259ff
   105a0:	01c9c37f 	.word	0x01c9c37f
   105a4:	0000f29d 	.word	0x0000f29d
   105a8:	1afd498d 	.word	0x1afd498d
   105ac:	00010c8d 	.word	0x00010c8d
   105b0:	00010c91 	.word	0x00010c91
   105b4:	2000194c 	.word	0x2000194c
   105b8:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.encryption.initiate) {
   105bc:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
   105c0:	f1b9 0f00 	cmp.w	r9, #0
   105c4:	f47f adbe 	bne.w	10144 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x145>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   105c8:	48d3      	ldr	r0, [pc, #844]	; (10918 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x919>)
   105ca:	f7fa fba6 	bl	ad1a <mem_acquire>
	if (!node_tx) {
   105ce:	4607      	mov	r7, r0
   105d0:	2800      	cmp	r0, #0
   105d2:	f43f adb7 	beq.w	10144 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x145>
	if (!conn->role) {
   105d6:	f994 301d 	ldrsb.w	r3, [r4, #29]
   105da:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
   105dc:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
   105e0:	db4d      	blt.n	1067e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x67f>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
   105e2:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
   105e6:	465b      	mov	r3, fp
   105e8:	464a      	mov	r2, r9
   105ea:	f104 0194 	add.w	r1, r4, #148	; 0x94
   105ee:	f104 0084 	add.w	r0, r4, #132	; 0x84
   105f2:	f006 fdc1 	bl	17178 <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
   105f6:	2210      	movs	r2, #16
   105f8:	4659      	mov	r1, fp
   105fa:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   105fe:	f7f0 f8dd 	bl	7bc <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   10602:	f504 7189 	add.w	r1, r4, #274	; 0x112
   10606:	2208      	movs	r2, #8
   10608:	f204 1033 	addw	r0, r4, #307	; 0x133
   1060c:	f7f0 f8d6 	bl	7bc <memcpy>
		conn->ccm_rx.direction = 0;
   10610:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
   10614:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
   10618:	f369 0300 	bfi	r3, r9, #0, #1
   1061c:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
   10620:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
   10624:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
   10628:	f043 0301 	orr.w	r3, r3, #1
   1062c:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
   10630:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
   10634:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
   10638:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
   1063c:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
   10640:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
   10644:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
   10648:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
   1064c:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
   10650:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
   10654:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
   10658:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
   1065c:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
   10660:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
   10664:	4651      	mov	r1, sl
   10666:	4620      	mov	r0, r4
   10668:	f7ff fa76 	bl	fb58 <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
   1066c:	4639      	mov	r1, r7
   1066e:	4620      	mov	r0, r4
   10670:	f7ff f9e4 	bl	fa3c <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
   10674:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   10678:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   1067c:	e562      	b.n	10144 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x145>
	else if (!conn->pause_tx || conn->refresh) {
   1067e:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   10682:	f003 0348 	and.w	r3, r3, #72	; 0x48
   10686:	2b08      	cmp	r3, #8
   10688:	f000 80a2 	beq.w	107d0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7d1>
		if (conn->llcp.encryption.error_code) {
   1068c:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
   10690:	f1b9 0f00 	cmp.w	r9, #0
   10694:	d020      	beq.n	106d8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6d9>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10696:	7903      	ldrb	r3, [r0, #4]
   10698:	f043 0303 	orr.w	r3, r3, #3
   1069c:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   1069e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   106a2:	0698      	lsls	r0, r3, #26
   106a4:	d512      	bpl.n	106cc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6cd>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
   106a6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
   106aa:	0759      	lsls	r1, r3, #29
   106ac:	d50e      	bpl.n	106cc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6cd>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   106ae:	2311      	movs	r3, #17
   106b0:	71fb      	strb	r3, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   106b2:	2303      	movs	r3, #3
   106b4:	723b      	strb	r3, [r7, #8]
		p->error_code = conn->llcp.encryption.error_code;
   106b6:	f887 9009 	strb.w	r9, [r7, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
   106ba:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   106bc:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   106be:	797b      	ldrb	r3, [r7, #5]
   106c0:	3301      	adds	r3, #1
   106c2:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
   106c4:	2300      	movs	r3, #0
   106c6:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
   106ca:	e7cf      	b.n	1066c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x66d>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   106cc:	230d      	movs	r3, #13
   106ce:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   106d0:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   106d4:	2301      	movs	r3, #1
   106d6:	e7f1      	b.n	106bc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6bd>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   106d8:	488f      	ldr	r0, [pc, #572]	; (10918 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x919>)
   106da:	f7fa fb1e 	bl	ad1a <mem_acquire>
	if (!node_tx) {
   106de:	4682      	mov	sl, r0
   106e0:	2800      	cmp	r0, #0
   106e2:	f000 82c2 	beq.w	10c6a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc6b>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   106e6:	7903      	ldrb	r3, [r0, #4]
   106e8:	f043 0303 	orr.w	r3, r3, #3
   106ec:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   106ee:	f04f 0b04 	mov.w	fp, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   106f2:	230d      	movs	r3, #13
   106f4:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   106f6:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
   106fa:	f100 0308 	add.w	r3, r0, #8
   106fe:	4619      	mov	r1, r3
   10700:	2208      	movs	r2, #8
   10702:	6868      	ldr	r0, [r5, #4]
   10704:	930d      	str	r3, [sp, #52]	; 0x34
   10706:	f7f2 fe2d 	bl	3364 <entropy_get_entropy_isr>
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.ivs,
   1070a:	f10a 0310 	add.w	r3, sl, #16
   1070e:	4619      	mov	r1, r3
   10710:	465a      	mov	r2, fp
   10712:	6868      	ldr	r0, [r5, #4]
   10714:	930b      	str	r3, [sp, #44]	; 0x2c
   10716:	f7f2 fe25 	bl	3364 <entropy_get_entropy_isr>
	memcpy(&conn->llcp.encryption.skd[8],
   1071a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1071c:	2208      	movs	r2, #8
   1071e:	4619      	mov	r1, r3
   10720:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   10724:	f7f0 f84a 	bl	7bc <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
   10728:	465a      	mov	r2, fp
   1072a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1072c:	f504 708b 	add.w	r0, r4, #278	; 0x116
   10730:	f7f0 f844 	bl	7bc <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
   10734:	4651      	mov	r1, sl
   10736:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   10738:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
   1073c:	f7ff f97e 	bl	fa3c <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   10740:	4653      	mov	r3, sl
   10742:	464a      	mov	r2, r9
   10744:	f104 0194 	add.w	r1, r4, #148	; 0x94
   10748:	f104 0084 	add.w	r0, r4, #132	; 0x84
   1074c:	f006 fd14 	bl	17178 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
   10750:	2210      	movs	r2, #16
   10752:	4651      	mov	r1, sl
   10754:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   10758:	f7f0 f830 	bl	7bc <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   1075c:	2208      	movs	r2, #8
   1075e:	f504 7189 	add.w	r1, r4, #274	; 0x112
   10762:	f204 1033 	addw	r0, r4, #307	; 0x133
   10766:	f7f0 f829 	bl	7bc <memcpy>
			conn->ccm_rx.direction = 1;
   1076a:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
   1076e:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
   10772:	f043 0301 	orr.w	r3, r3, #1
   10776:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
   1077a:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
   1077e:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
   10782:	f369 0300 	bfi	r3, r9, #0, #1
   10786:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
   1078a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
   1078e:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
   10792:	f043 0310 	orr.w	r3, r3, #16
   10796:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1079a:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
   1079c:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   107a0:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
   107a4:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
   107a8:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
   107ac:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
   107b0:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
   107b4:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
   107b8:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
   107bc:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
   107c0:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   107c4:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   107c6:	2301      	movs	r3, #1
   107c8:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
   107ca:	2305      	movs	r3, #5
   107cc:	71fb      	strb	r3, [r7, #7]
   107ce:	e74d      	b.n	1066c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x66d>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
   107d0:	4651      	mov	r1, sl
   107d2:	f8d5 0cfc 	ldr.w	r0, [r5, #3324]	; 0xcfc
   107d6:	f7ff f9bf 	bl	fb58 <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
   107da:	f8d5 2cfc 	ldr.w	r2, [r5, #3324]	; 0xcfc
   107de:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   107e2:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
   107e6:	f369 03c3 	bfi	r3, r9, #3, #1
   107ea:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
   107ee:	e73d      	b.n	1066c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x66d>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   107f0:	4849      	ldr	r0, [pc, #292]	; (10918 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x919>)
   107f2:	f7fa fa92 	bl	ad1a <mem_acquire>
	if (node_tx) {
   107f6:	4607      	mov	r7, r0
   107f8:	2800      	cmp	r0, #0
   107fa:	f43f aca3 	beq.w	10144 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x145>
		conn->llcp_ack = conn->llcp_req;
   107fe:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   10802:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
   10806:	4b45      	ldr	r3, [pc, #276]	; (1091c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x91d>)
   10808:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1080c:	7903      	ldrb	r3, [r0, #4]
   1080e:	f043 0303 	orr.w	r3, r3, #3
   10812:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
   10814:	2309      	movs	r3, #9
   10816:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
   10818:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1081c:	2b00      	cmp	r3, #0
   1081e:	bfac      	ite	ge
   10820:	2308      	movge	r3, #8
   10822:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
   10824:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
   10826:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
   10828:	2100      	movs	r1, #0
   1082a:	4410      	add	r0, r2
   1082c:	f7ef fff2 	bl	814 <memset>
			conn->llcp_features & 0xFF;
   10830:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
   10834:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
   10836:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
   10838:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
   1083a:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
   1083c:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
   1083e:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
   10840:	4620      	mov	r0, r4
   10842:	f7ff f8fb 	bl	fa3c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   10846:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   1084a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   1084e:	e479      	b.n	10144 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x145>
	if (conn->llcp_version.tx == 0) {
   10850:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   10854:	07da      	lsls	r2, r3, #31
   10856:	d424      	bmi.n	108a2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8a3>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10858:	482f      	ldr	r0, [pc, #188]	; (10918 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x919>)
   1085a:	f7fa fa5e 	bl	ad1a <mem_acquire>
		if (node_tx) {
   1085e:	4601      	mov	r1, r0
   10860:	2800      	cmp	r0, #0
   10862:	f43f ac6f 	beq.w	10144 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x145>
			conn->llcp_ack = conn->llcp_req;
   10866:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1086a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
   1086e:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   10872:	f043 0301 	orr.w	r3, r3, #1
   10876:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1087a:	7903      	ldrb	r3, [r0, #4]
   1087c:	f043 0303 	orr.w	r3, r3, #3
   10880:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
   10882:	2306      	movs	r3, #6
   10884:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   10886:	230c      	movs	r3, #12
   10888:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
   1088a:	2309      	movs	r3, #9
   1088c:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
   1088e:	f06f 030e 	mvn.w	r3, #14
   10892:	7243      	strb	r3, [r0, #9]
   10894:	2305      	movs	r3, #5
   10896:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
   10898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1089c:	72c3      	strb	r3, [r0, #11]
   1089e:	7303      	strb	r3, [r0, #12]
   108a0:	e7ce      	b.n	10840 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x841>
	} else if (conn->llcp_version.rx != 0) {
   108a2:	079b      	lsls	r3, r3, #30
   108a4:	f57f a9a1 	bpl.w	fbea <event_connection_prepare+0x12>
		conn->llcp_ack = conn->llcp_req;
   108a8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   108ac:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
   108b0:	2002      	movs	r0, #2
   108b2:	f7fc ffd3 	bl	d85c <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
   108b6:	2800      	cmp	r0, #0
   108b8:	f43f a997 	beq.w	fbea <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
   108bc:	8c23      	ldrh	r3, [r4, #32]
   108be:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   108c0:	2301      	movs	r3, #1
   108c2:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   108c4:	7a03      	ldrb	r3, [r0, #8]
   108c6:	f043 0303 	orr.w	r3, r3, #3
   108ca:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
   108cc:	2306      	movs	r3, #6
   108ce:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
   108d0:	230c      	movs	r3, #12
   108d2:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
   108d4:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   108d8:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
   108da:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   108de:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
   108e2:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
   108e6:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
   108ea:	f7fe f9ab 	bl	ec44 <packet_rx_enqueue>
   108ee:	e429      	b.n	10144 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x145>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   108f0:	4809      	ldr	r0, [pc, #36]	; (10918 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x919>)
   108f2:	f7fa fa12 	bl	ad1a <mem_acquire>
	if (node_tx) {
   108f6:	4601      	mov	r1, r0
   108f8:	2800      	cmp	r0, #0
   108fa:	f43f ac23 	beq.w	10144 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x145>
		conn->llcp_ack = conn->llcp_req;
   108fe:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   10902:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10906:	7903      	ldrb	r3, [r0, #4]
   10908:	f043 0303 	orr.w	r3, r3, #3
   1090c:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   1090e:	2301      	movs	r3, #1
   10910:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   10912:	2312      	movs	r3, #18
   10914:	71c3      	strb	r3, [r0, #7]
   10916:	e793      	b.n	10840 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x841>
   10918:	2000194c 	.word	0x2000194c
   1091c:	000149ff 	.word	0x000149ff
	if (conn->llcp.phy_upd_ind.initiate) {
   10920:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   10924:	07d7      	lsls	r7, r2, #31
   10926:	d54f      	bpl.n	109c8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9c9>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10928:	48d3      	ldr	r0, [pc, #844]	; (10c78 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc79>)
   1092a:	f7fa f9f6 	bl	ad1a <mem_acquire>
		if (node_tx) {
   1092e:	4607      	mov	r7, r0
   10930:	2800      	cmp	r0, #0
   10932:	f43f ac07 	beq.w	10144 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x145>
			conn->llcp.phy_upd_ind.initiate = 0;
   10936:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1093a:	f36f 0300 	bfc	r3, #0, #1
   1093e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
   10942:	b2db      	uxtb	r3, r3
   10944:	f3c3 0982 	ubfx	r9, r3, #2, #3
   10948:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
   1094c:	d136      	bne.n	109bc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9bd>
				conn->llcp_ack = conn->llcp_req;
   1094e:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   10952:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
   10956:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
   10958:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
   1095c:	d517      	bpl.n	1098e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x98f>
					node_rx = packet_rx_reserve_get(2);
   1095e:	2002      	movs	r0, #2
   10960:	f7fc ff7c 	bl	d85c <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
   10964:	2800      	cmp	r0, #0
   10966:	f43f a940 	beq.w	fbea <event_connection_prepare+0x12>
					node_rx->hdr.handle = conn->handle;
   1096a:	8c23      	ldrh	r3, [r4, #32]
   1096c:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
   1096e:	f880 900b 	strb.w	r9, [r0, #11]
					node_rx->hdr.type =
   10972:	230c      	movs	r3, #12
   10974:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
   10976:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1097a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1097e:	7303      	strb	r3, [r0, #12]
					upd->rx = conn->phy_rx;
   10980:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   10984:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10988:	7343      	strb	r3, [r0, #13]
					packet_rx_enqueue();
   1098a:	f7fe f95b 	bl	ec44 <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1098e:	793b      	ldrb	r3, [r7, #4]
   10990:	f043 0303 	orr.w	r3, r3, #3
   10994:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
   10996:	2305      	movs	r3, #5
   10998:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
   1099a:	2318      	movs	r3, #24
   1099c:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   1099e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   109a2:	f3c3 0382 	ubfx	r3, r3, #2, #3
   109a6:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   109a8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   109ac:	f3c3 1342 	ubfx	r3, r3, #5, #3
   109b0:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
   109b2:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   109b6:	817b      	strh	r3, [r7, #10]
   109b8:	f7ff bbc0 	b.w	1013c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x13d>
								 conn->latency +
   109bc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   109be:	3306      	adds	r3, #6
   109c0:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
   109c2:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
   109c6:	e7e2      	b.n	1098e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x98f>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
   109c8:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   109cc:	1af3      	subs	r3, r6, r3
   109ce:	0419      	lsls	r1, r3, #16
   109d0:	f53f abb8 	bmi.w	10144 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x145>
		conn->llcp_ack = conn->llcp_req;
   109d4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   109d8:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
   109dc:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
   109e0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
   109e4:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
   109e8:	bf18      	it	ne
   109ea:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
   109ee:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
   109f2:	bf1c      	itt	ne
   109f4:	f367 03c5 	bfine	r3, r7, #3, #3
   109f8:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
   109fc:	f012 0fe0 	tst.w	r2, #224	; 0xe0
		old_rx = conn->phy_rx;
   10a00:	f001 0107 	and.w	r1, r1, #7
		if (conn->llcp.phy_upd_ind.rx) {
   10a04:	d008      	beq.n	10a18 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa19>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
   10a06:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   10a0a:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
   10a0e:	095b      	lsrs	r3, r3, #5
   10a10:	f363 0702 	bfi	r7, r3, #0, #3
   10a14:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
   10a18:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   10a1c:	461f      	mov	r7, r3
   10a1e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   10a22:	f363 17c7 	bfi	r7, r3, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   10a26:	0793      	lsls	r3, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
   10a28:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   10a2c:	d40b      	bmi.n	10a46 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa47>
   10a2e:	b2fb      	uxtb	r3, r7
   10a30:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   10a34:	4283      	cmp	r3, r0
   10a36:	d106      	bne.n	10a46 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa47>
		    (conn->phy_rx == old_rx)) {
   10a38:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   10a3c:	f003 0307 	and.w	r3, r3, #7
   10a40:	428b      	cmp	r3, r1
   10a42:	f43f ab7f 	beq.w	10144 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x145>
		node_rx = packet_rx_reserve_get(2);
   10a46:	2002      	movs	r0, #2
   10a48:	f7fc ff08 	bl	d85c <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
   10a4c:	2800      	cmp	r0, #0
   10a4e:	f43f a8cc 	beq.w	fbea <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
   10a52:	8c23      	ldrh	r3, [r4, #32]
   10a54:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   10a56:	230c      	movs	r3, #12
   10a58:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
   10a5a:	2300      	movs	r3, #0
   10a5c:	72c3      	strb	r3, [r0, #11]
		upd->tx = conn->phy_tx;
   10a5e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   10a62:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   10a66:	7303      	strb	r3, [r0, #12]
		upd->rx = conn->phy_rx;
   10a68:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   10a6c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10a70:	7343      	strb	r3, [r0, #13]
   10a72:	e73a      	b.n	108ea <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8eb>
		free_count_rx = packet_rx_acquired_count_get() +
   10a74:	f7fc fedc 	bl	d830 <packet_rx_acquired_count_get>
   10a78:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
   10a7a:	f8d5 0d18 	ldr.w	r0, [r5, #3352]	; 0xd18
   10a7e:	f7fa f97b 	bl	ad78 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   10a82:	4438      	add	r0, r7
   10a84:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   10a86:	28ff      	cmp	r0, #255	; 0xff
   10a88:	f63f a8af 	bhi.w	fbea <event_connection_prepare+0x12>
		if (_radio.packet_rx_data_count != free_count_rx) {
   10a8c:	f895 3d22 	ldrb.w	r3, [r5, #3362]	; 0xd22
   10a90:	4283      	cmp	r3, r0
   10a92:	d12c      	bne.n	10aee <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xaef>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10a94:	4878      	ldr	r0, [pc, #480]	; (10c78 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc79>)
   10a96:	f7fa f940 	bl	ad1a <mem_acquire>
		if (!node_tx) {
   10a9a:	4601      	mov	r1, r0
   10a9c:	b338      	cbz	r0, 10aee <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xaef>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   10a9e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
   10aa2:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
   10aa6:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   10aa8:	2201      	movs	r2, #1
   10aaa:	f362 0301 	bfi	r3, r2, #0, #2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   10aae:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   10ab2:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   10ab4:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10ab8:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
   10aba:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10abc:	f043 0303 	orr.w	r3, r3, #3
   10ac0:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
   10ac2:	2309      	movs	r3, #9
   10ac4:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   10ac6:	2314      	movs	r3, #20
   10ac8:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   10aca:	f06f 0304 	mvn.w	r3, #4
   10ace:	720b      	strb	r3, [r1, #8]
   10ad0:	2300      	movs	r3, #0
   10ad2:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
   10ad4:	f06f 036f 	mvn.w	r3, #111	; 0x6f
   10ad8:	728b      	strb	r3, [r1, #10]
   10ada:	2342      	movs	r3, #66	; 0x42
   10adc:	72cb      	strb	r3, [r1, #11]
		lr->max_tx_octets = conn->default_tx_octets;
   10ade:	818a      	strh	r2, [r1, #12]
		ctrl_tx_enqueue(conn, node_tx);
   10ae0:	4620      	mov	r0, r4
   10ae2:	f7fe ffab 	bl	fa3c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   10ae6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   10aea:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
   10aee:	f894 3020 	ldrb.w	r3, [r4, #32]
   10af2:	f994 501d 	ldrsb.w	r5, [r4, #29]
   10af6:	4861      	ldr	r0, [pc, #388]	; (10c7c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc7d>)
   10af8:	4961      	ldr	r1, [pc, #388]	; (10c80 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc81>)
   10afa:	68a2      	ldr	r2, [r4, #8]
   10afc:	9403      	str	r4, [sp, #12]
   10afe:	3307      	adds	r3, #7
   10b00:	ea11 0125 	ands.w	r1, r1, r5, asr #32
   10b04:	bf38      	it	cc
   10b06:	4601      	movcc	r1, r0
   10b08:	b2db      	uxtb	r3, r3
   10b0a:	e88d 000c 	stmia.w	sp, {r2, r3}
   10b0e:	9102      	str	r1, [sp, #8]
   10b10:	1d23      	adds	r3, r4, #4
   10b12:	4622      	mov	r2, r4
   10b14:	990c      	ldr	r1, [sp, #48]	; 0x30
   10b16:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
   10b18:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
   10b1a:	f7fe fbfd 	bl	f318 <event_common_prepare>
	conn->event_counter = event_counter + 1;
   10b1e:	8466      	strh	r6, [r4, #34]	; 0x22
}
   10b20:	b00f      	add	sp, #60	; 0x3c
   10b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
   10b26:	f7fc fe83 	bl	d830 <packet_rx_acquired_count_get>
   10b2a:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
   10b2c:	f8d5 0d18 	ldr.w	r0, [r5, #3352]	; 0xd18
   10b30:	f7fa f922 	bl	ad78 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   10b34:	4438      	add	r0, r7
   10b36:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   10b38:	28ff      	cmp	r0, #255	; 0xff
   10b3a:	f63f a856 	bhi.w	fbea <event_connection_prepare+0x12>
		if (_radio.packet_rx_data_count != free_count_rx) {
   10b3e:	f895 3d22 	ldrb.w	r3, [r5, #3362]	; 0xd22
   10b42:	4283      	cmp	r3, r0
   10b44:	f47f a851 	bne.w	fbea <event_connection_prepare+0x12>
		conn->llcp_length.ack = conn->llcp_length.req;
   10b48:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   10b4c:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		_radio.conn_curr->pause_tx = 0;
   10b50:	f8d5 3cfc 	ldr.w	r3, [r5, #3324]	; 0xcfc
		conn->procedure_expire = 0;
   10b54:	2100      	movs	r1, #0
   10b56:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
   10b5a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   10b5e:	f361 02c3 	bfi	r2, r1, #3, #1
   10b62:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
   10b66:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   10b6a:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
   10b6c:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
   10b70:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
   10b72:	f8d5 0cf4 	ldr.w	r0, [r5, #3316]	; 0xcf4
   10b76:	f7fa f8ff 	bl	ad78 <mem_free_count_get>
		if (_radio.advertiser.conn) {
   10b7a:	f8d5 3c18 	ldr.w	r3, [r5, #3096]	; 0xc18
   10b7e:	b10b      	cbz	r3, 10b84 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb85>
			free_count_conn++;
   10b80:	3001      	adds	r0, #1
   10b82:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
   10b84:	f8d5 3c54 	ldr.w	r3, [r5, #3156]	; 0xc54
   10b88:	b10b      	cbz	r3, 10b8e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb8f>
			free_count_conn++;
   10b8a:	3001      	adds	r0, #1
   10b8c:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   10b8e:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
   10b90:	f895 3cf8 	ldrb.w	r3, [r5, #3320]	; 0xcf8
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   10b94:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
   10b96:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   10b98:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
   10b9c:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   10b9e:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
   10ba0:	d060      	beq.n	10c64 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc65>
   10ba2:	f8b5 3d20 	ldrh.w	r3, [r5, #3360]	; 0xd20
   10ba6:	42bb      	cmp	r3, r7
   10ba8:	d35c      	bcc.n	10c64 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc65>
		node_rx = packet_rx_reserve_get(2);
   10baa:	2002      	movs	r0, #2
   10bac:	f7fc fe56 	bl	d85c <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
   10bb0:	2800      	cmp	r0, #0
   10bb2:	f43f a81a 	beq.w	fbea <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
   10bb6:	8c23      	ldrh	r3, [r4, #32]
   10bb8:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   10bba:	2301      	movs	r3, #1
   10bbc:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   10bbe:	7a03      	ldrb	r3, [r0, #8]
   10bc0:	f043 0303 	orr.w	r3, r3, #3
   10bc4:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
   10bc6:	2309      	movs	r3, #9
   10bc8:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   10bca:	2315      	movs	r3, #21
   10bcc:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   10bce:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   10bd0:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   10bd2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   10bd4:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
   10bd6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   10bd8:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
   10bda:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   10bdc:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
   10bde:	f7fe f831 	bl	ec44 <packet_rx_enqueue>
   10be2:	e784      	b.n	10aee <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xaef>
				if (_radio.packet_rx_acquire == 0) {
   10be4:	b90b      	cbnz	r3, 10bea <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbeb>
						_radio.packet_rx_count - 1;
   10be6:	f895 3d28 	ldrb.w	r3, [r5, #3368]	; 0xd28
					_radio.packet_rx_acquire -= 1;
   10bea:	3b01      	subs	r3, #1
   10bec:	f885 3d2a 	strb.w	r3, [r5, #3370]	; 0xd2a
				node_rx = _radio.packet_rx[
   10bf0:	f895 2d2a 	ldrb.w	r2, [r5, #3370]	; 0xd2a
   10bf4:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
				mem_release(node_rx->hdr.onion.link,
   10bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10bfc:	4649      	mov	r1, r9
   10bfe:	6818      	ldr	r0, [r3, #0]
   10c00:	f7fa f8a5 	bl	ad4e <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
   10c04:	f895 2d28 	ldrb.w	r2, [r5, #3368]	; 0xd28
   10c08:	f895 3d3c 	ldrb.w	r3, [r5, #3388]	; 0xd3c
   10c0c:	3a01      	subs	r2, #1
   10c0e:	4293      	cmp	r3, r2
   10c10:	f6be afeb 	bge.w	fbea <event_connection_prepare+0x12>
				_radio.link_rx_data_quota++;
   10c14:	3301      	adds	r3, #1
   10c16:	f885 3d3c 	strb.w	r3, [r5, #3388]	; 0xd3c
			while (_radio.packet_rx_acquire !=
   10c1a:	f895 3d2a 	ldrb.w	r3, [r5, #3370]	; 0xd2a
				_radio.packet_rx_last) {
   10c1e:	f895 2d29 	ldrb.w	r2, [r5, #3369]	; 0xd29
			while (_radio.packet_rx_acquire !=
   10c22:	4293      	cmp	r3, r2
   10c24:	d1de      	bne.n	10be4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbe5>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
   10c26:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
   10c28:	f8b5 2d1e 	ldrh.w	r2, [r5, #3358]	; 0xd1e
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
   10c2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
				_radio.packet_rx_data_size =
   10c30:	bf3a      	itte	cc
   10c32:	f44f 7386 	movcc.w	r3, #268	; 0x10c
   10c36:	f8a5 3d20 	strhcc.w	r3, [r5, #3360]	; 0xd20
				_radio.packet_rx_data_size =
   10c3a:	f8a5 7d20 	strhcs.w	r7, [r5, #3360]	; 0xd20
				_radio.packet_rx_data_size;
   10c3e:	f8b5 1d20 	ldrh.w	r1, [r5, #3360]	; 0xd20
			_radio.packet_rx_data_count =
   10c42:	fbb2 f2f1 	udiv	r2, r2, r1
   10c46:	b2d2      	uxtb	r2, r2
   10c48:	f885 2d22 	strb.w	r2, [r5, #3362]	; 0xd22
			LL_ASSERT(_radio.packet_rx_data_count);
   10c4c:	2a00      	cmp	r2, #0
   10c4e:	f43e afcc 	beq.w	fbea <event_connection_prepare+0x12>
			mem_init(_radio.pkt_rx_data_pool,
   10c52:	f8d5 0d14 	ldr.w	r0, [r5, #3348]	; 0xd14
   10c56:	4b0b      	ldr	r3, [pc, #44]	; (10c84 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc85>)
   10c58:	f7fa f838 	bl	accc <mem_init>
			packet_rx_allocate(4);
   10c5c:	2004      	movs	r0, #4
   10c5e:	f7fc fe75 	bl	d94c <packet_rx_allocate>
   10c62:	e7a2      	b.n	10baa <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbab>
				mem_release(node_rx->hdr.onion.link,
   10c64:	f8df 9020 	ldr.w	r9, [pc, #32]	; 10c88 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc89>
   10c68:	e7d7      	b.n	10c1a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc1b>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   10c6a:	4903      	ldr	r1, [pc, #12]	; (10c78 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc79>)
   10c6c:	4638      	mov	r0, r7
   10c6e:	f7fa f86e 	bl	ad4e <mem_release>
   10c72:	f7ff ba67 	b.w	10144 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x145>
   10c76:	bf00      	nop
   10c78:	2000194c 	.word	0x2000194c
   10c7c:	00011191 	.word	0x00011191
   10c80:	00010cd1 	.word	0x00010cd1
   10c84:	20001920 	.word	0x20001920
   10c88:	20001938 	.word	0x20001938

00010c8c <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   10c8c:	f7fe bfa4 	b.w	fbd8 <event_connection_prepare>

00010c90 <event_slave_prepare>:
   10c90:	f7fe bfa2 	b.w	fbd8 <event_connection_prepare>

00010c94 <connection_configure>:
{
   10c94:	b510      	push	{r4, lr}
   10c96:	4604      	mov	r4, r0
	radio_reset();
   10c98:	f006 fbe6 	bl	17468 <radio_reset>
	radio_tx_power_set(0);
   10c9c:	2000      	movs	r0, #0
   10c9e:	f006 fc2b 	bl	174f8 <radio_tx_power_set>
	radio_isr_set(isr);
   10ca2:	480a      	ldr	r0, [pc, #40]	; (10ccc <connection_configure+0x38>)
   10ca4:	f006 fbaa 	bl	173fc <radio_isr_set>
	radio_aa_set(conn->access_addr);
   10ca8:	f104 0010 	add.w	r0, r4, #16
   10cac:	f006 fc42 	bl	17534 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
   10cb0:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
   10cb2:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
   10cb4:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
   10cb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
   10cba:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   10cbc:	f240 605b 	movw	r0, #1627	; 0x65b
   10cc0:	4319      	orrs	r1, r3
}
   10cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   10cc6:	f006 bcef 	b.w	176a8 <radio_crc_configure>
   10cca:	bf00      	nop
   10ccc:	00012429 	.word	0x00012429

00010cd0 <event_slave>:
{
   10cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10cd4:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
   10cd6:	4b65      	ldr	r3, [pc, #404]	; (10e6c <event_slave+0x19c>)
   10cd8:	7cda      	ldrb	r2, [r3, #19]
{
   10cda:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   10cdc:	f002 06ff 	and.w	r6, r2, #255	; 0xff
   10ce0:	461d      	mov	r5, r3
   10ce2:	b12a      	cbz	r2, 10cf0 <event_slave+0x20>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10ce4:	4040      	eors	r0, r0
   10ce6:	f380 8811 	msr	BASEPRI, r0
   10cea:	f04f 0004 	mov.w	r0, #4
   10cee:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   10cf0:	7c1b      	ldrb	r3, [r3, #16]
   10cf2:	8c22      	ldrh	r2, [r4, #32]
   10cf4:	b2db      	uxtb	r3, r3
   10cf6:	3207      	adds	r2, #7
   10cf8:	4293      	cmp	r3, r2
   10cfa:	d1f3      	bne.n	10ce4 <event_slave+0x14>
	_radio.packet_counter = 0;
   10cfc:	f885 6d00 	strb.w	r6, [r5, #3328]	; 0xd00
	_radio.crc_expire = 0;
   10d00:	f885 6d01 	strb.w	r6, [r5, #3329]	; 0xd01
	_radio.role = ROLE_SLAVE;
   10d04:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   10d06:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
   10d08:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
   10d0a:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
   10d0c:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
   10d0e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
   10d10:	f8c5 4cfc 	str.w	r4, [r5, #3324]	; 0xcfc
	_radio.state = STATE_RX;
   10d14:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
   10d16:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
   10d18:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
   10d1a:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
   10d1c:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
   10d1e:	752a      	strb	r2, [r5, #20]
	connection_configure(conn);
   10d20:	f7ff ffb8 	bl	10c94 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   10d24:	2096      	movs	r0, #150	; 0x96
   10d26:	f006 fd7b 	bl	17820 <radio_tmr_tifs_set>
				     conn->phy_flags);
   10d2a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
   10d2e:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   10d32:	09d3      	lsrs	r3, r2, #7
   10d34:	4631      	mov	r1, r6
   10d36:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   10d3a:	f000 0007 	and.w	r0, r0, #7
   10d3e:	f006 fcdd 	bl	176fc <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   10d42:	f895 2d29 	ldrb.w	r2, [r5, #3369]	; 0xd29
   10d46:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
   10d4a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
   10d4e:	4620      	mov	r0, r4
   10d50:	3108      	adds	r1, #8
   10d52:	f7fd f817 	bl	dd84 <rx_packet_set>
	if (conn->data_chan_sel) {
   10d56:	7f63      	ldrb	r3, [r4, #29]
   10d58:	f013 0f40 	tst.w	r3, #64	; 0x40
   10d5c:	f104 0217 	add.w	r2, r4, #23
   10d60:	d059      	beq.n	10e16 <event_slave+0x146>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   10d62:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   10d64:	8be1      	ldrh	r1, [r4, #30]
   10d66:	3801      	subs	r0, #1
   10d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   10d6c:	b280      	uxth	r0, r0
   10d6e:	f7fe fc2f 	bl	f5d0 <chan_sel_2>
	chan_set(data_chan_use);
   10d72:	f7fd f85f 	bl	de34 <chan_set>
	conn->slave.window_widening_event_us +=
   10d76:	6e23      	ldr	r3, [r4, #96]	; 0x60
   10d78:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   10d7a:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
   10d7c:	2200      	movs	r2, #0
   10d7e:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
   10d80:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
   10d82:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
   10d84:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
   10d86:	bf88      	it	hi
   10d88:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
   10d8a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   10d8c:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
   10d8e:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
   10d90:	4413      	add	r3, r2
   10d92:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   10d94:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
   10d96:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   10d98:	f107 0109 	add.w	r1, r7, #9
   10d9c:	4630      	mov	r0, r6
   10d9e:	f006 fd4b 	bl	17838 <radio_tmr_start>
   10da2:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
   10da4:	f006 fdd2 	bl	1794c <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   10da8:	4630      	mov	r0, r6
   10daa:	f006 fdf1 	bl	17990 <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   10dae:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
   10db0:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   10db2:	f103 0650 	add.w	r6, r3, #80	; 0x50
   10db6:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
   10dba:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   10dbe:	2101      	movs	r1, #1
   10dc0:	f000 0007 	and.w	r0, r0, #7
   10dc4:	f006 fc17 	bl	175f6 <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   10dc8:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
   10dca:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
   10dcc:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   10dd0:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
   10dd4:	2802      	cmp	r0, #2
   10dd6:	d03e      	beq.n	10e56 <event_slave+0x186>
		return 40;
   10dd8:	2804      	cmp	r0, #4
   10dda:	bf0c      	ite	eq
   10ddc:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   10de0:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
   10de2:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
   10de4:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
   10de6:	f006 fc08 	bl	175fa <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   10dea:	4430      	add	r0, r6
   10dec:	f006 fd90 	bl	17910 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   10df0:	f894 1020 	ldrb.w	r1, [r4, #32]
   10df4:	3107      	adds	r1, #7
   10df6:	463a      	mov	r2, r7
   10df8:	b2c9      	uxtb	r1, r1
   10dfa:	4620      	mov	r0, r4
   10dfc:	f7fe fc2c 	bl	f658 <preempt_calc>
   10e00:	4603      	mov	r3, r0
   10e02:	b350      	cbz	r0, 10e5a <event_slave+0x18a>
		_radio.state = STATE_STOP;
   10e04:	2304      	movs	r3, #4
   10e06:	752b      	strb	r3, [r5, #20]
		radio_disable();
   10e08:	f006 fc12 	bl	17630 <radio_disable>
	packet_tx_enqueue(2);
   10e0c:	2002      	movs	r0, #2
}
   10e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
   10e12:	f7fe b8b5 	b.w	ef80 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   10e16:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   10e18:	7fa6      	ldrb	r6, [r4, #30]
   10e1a:	fb01 6606 	mla	r6, r1, r6, r6
   10e1e:	7fe1      	ldrb	r1, [r4, #31]
   10e20:	2025      	movs	r0, #37	; 0x25
   10e22:	440e      	add	r6, r1
   10e24:	fb96 f1f0 	sdiv	r1, r6, r0
   10e28:	fb00 6611 	mls	r6, r0, r1, r6
   10e2c:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   10e2e:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
   10e30:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   10e32:	5c51      	ldrb	r1, [r2, r1]
   10e34:	f006 0607 	and.w	r6, r6, #7
   10e38:	fa41 f606 	asr.w	r6, r1, r6
   10e3c:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
   10e3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   10e42:	d496      	bmi.n	10d72 <event_slave+0xa2>
		chan_index = chan_next % chan_count;
   10e44:	fbb0 f1f3 	udiv	r1, r0, r3
   10e48:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
   10e4c:	b2c9      	uxtb	r1, r1
   10e4e:	4610      	mov	r0, r2
   10e50:	f7fc fcd2 	bl	d7f8 <chan_sel_remap>
   10e54:	e78d      	b.n	10d72 <event_slave+0xa2>
		return 24;
   10e56:	2318      	movs	r3, #24
   10e58:	e7c3      	b.n	10de2 <event_slave+0x112>
		ticker_status =
   10e5a:	4a05      	ldr	r2, [pc, #20]	; (10e70 <event_slave+0x1a0>)
   10e5c:	4601      	mov	r1, r0
   10e5e:	f7fa feed 	bl	bc3c <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10e62:	f030 0302 	bics.w	r3, r0, #2
   10e66:	f47f af3d 	bne.w	10ce4 <event_slave+0x14>
   10e6a:	e7cf      	b.n	10e0c <event_slave+0x13c>
   10e6c:	20000c08 	.word	0x20000c08
   10e70:	0000ea41 	.word	0x0000ea41

00010e74 <prepare_pdu_data_tx>:
	    conn->empty ||
   10e74:	f890 c0f8 	ldrb.w	ip, [r0, #248]	; 0xf8
	if (/* empty packet */
   10e78:	f01c 0f80 	tst.w	ip, #128	; 0x80
{
   10e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e80:	4604      	mov	r4, r0
   10e82:	460e      	mov	r6, r1
	if (/* empty packet */
   10e84:	d109      	bne.n	10e9a <prepare_pdu_data_tx+0x26>
	    !conn->pkt_tx_head ||
   10e86:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
   10e8a:	b131      	cbz	r1, 10e9a <prepare_pdu_data_tx+0x26>
	    !conn->pkt_tx_head ||
   10e8c:	f01c 0f08 	tst.w	ip, #8
   10e90:	f8d0 e140 	ldr.w	lr, [r0, #320]	; 0x140
   10e94:	d023      	beq.n	10ede <prepare_pdu_data_tx+0x6a>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
   10e96:	4571      	cmp	r1, lr
   10e98:	d021      	beq.n	10ede <prepare_pdu_data_tx+0x6a>
	conn->empty = 1;
   10e9a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   10e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10ea2:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
   10ea6:	f006 fc15 	bl	176d4 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   10eaa:	7803      	ldrb	r3, [r0, #0]
   10eac:	2201      	movs	r2, #1
   10eae:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
   10eb2:	2200      	movs	r2, #0
   10eb4:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
   10eb6:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   10eba:	7003      	strb	r3, [r0, #0]
   10ebc:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
   10ebe:	b15a      	cbz	r2, 10ed8 <prepare_pdu_data_tx+0x64>
		pdu_data_tx->md = 1;
   10ec0:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
   10ec4:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
   10ec6:	7803      	ldrb	r3, [r0, #0]
   10ec8:	f36f 1347 	bfc	r3, #5, #3
   10ecc:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
   10ece:	2300      	movs	r3, #0
   10ed0:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
   10ed2:	6030      	str	r0, [r6, #0]
   10ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data_tx->md = 0;
   10ed8:	f362 1304 	bfi	r3, r2, #4, #1
   10edc:	e7f2      	b.n	10ec4 <prepare_pdu_data_tx+0x50>
					conn->packet_tx_head_offset);
   10ede:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
   10ee2:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   10ee6:	1d0d      	adds	r5, r1, #4
   10ee8:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
   10eea:	b913      	cbnz	r3, 10ef2 <prepare_pdu_data_tx+0x7e>
			conn->packet_tx_head_len = _pdu_data_tx->len;
   10eec:	7843      	ldrb	r3, [r0, #1]
   10eee:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
   10ef2:	b122      	cbz	r2, 10efe <prepare_pdu_data_tx+0x8a>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   10ef4:	5cab      	ldrb	r3, [r5, r2]
   10ef6:	2701      	movs	r7, #1
   10ef8:	f367 0301 	bfi	r3, r7, #0, #2
   10efc:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
   10efe:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
		switch (conn->phy_tx_time) {
   10f02:	f894 8039 	ldrb.w	r8, [r4, #57]	; 0x39
		_pdu_data_tx->len = conn->packet_tx_head_len -
   10f06:	1abf      	subs	r7, r7, r2
   10f08:	b2ff      	uxtb	r7, r7
   10f0a:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
   10f0c:	5cab      	ldrb	r3, [r5, r2]
   10f0e:	f36f 1304 	bfc	r3, #4, #1
   10f12:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
   10f14:	f008 0807 	and.w	r8, r8, #7
   10f18:	f1b8 0f02 	cmp.w	r8, #2
   10f1c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   10f1e:	d029      	beq.n	10f74 <prepare_pdu_data_tx+0x100>
   10f20:	f1b8 0f04 	cmp.w	r8, #4
   10f24:	d029      	beq.n	10f7a <prepare_pdu_data_tx+0x106>
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
   10f26:	08db      	lsrs	r3, r3, #3
   10f28:	3b0a      	subs	r3, #10
				max_tx_octets = ((conn->max_tx_time - 430) >>
   10f2a:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
   10f2c:	f01c 0f20 	tst.w	ip, #32
			max_tx_octets -= 4;
   10f30:	bf18      	it	ne
   10f32:	3b04      	subne	r3, #4
   10f34:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
   10f38:	bf18      	it	ne
   10f3a:	b29b      	uxthne	r3, r3
   10f3c:	4563      	cmp	r3, ip
   10f3e:	bf28      	it	cs
   10f40:	4663      	movcs	r3, ip
		if (_pdu_data_tx->len > max_tx_octets) {
   10f42:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
   10f44:	bf81      	itttt	hi
   10f46:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
   10f48:	5cab      	ldrbhi	r3, [r5, r2]
   10f4a:	f043 0310 	orrhi.w	r3, r3, #16
   10f4e:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
   10f50:	680b      	ldr	r3, [r1, #0]
   10f52:	b11b      	cbz	r3, 10f5c <prepare_pdu_data_tx+0xe8>
			_pdu_data_tx->md = 1;
   10f54:	5cab      	ldrb	r3, [r5, r2]
   10f56:	f043 0310 	orr.w	r3, r3, #16
   10f5a:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
   10f5c:	f1be 0f00 	cmp.w	lr, #0
   10f60:	d1b1      	bne.n	10ec6 <prepare_pdu_data_tx+0x52>
   10f62:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   10f66:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
   10f68:	bf1c      	itt	ne
   10f6a:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
   10f6e:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
   10f72:	e7a8      	b.n	10ec6 <prepare_pdu_data_tx+0x52>
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
   10f74:	089b      	lsrs	r3, r3, #2
   10f76:	3b0b      	subs	r3, #11
   10f78:	e7d7      	b.n	10f2a <prepare_pdu_data_tx+0xb6>
			if (conn->phy_flags & 0x01) {
   10f7a:	f894 8038 	ldrb.w	r8, [r4, #56]	; 0x38
   10f7e:	ea5f 18d8 	movs.w	r8, r8, lsr #7
				max_tx_octets = ((conn->max_tx_time - 592) >>
   10f82:	bf15      	itete	ne
   10f84:	f5a3 7314 	subne.w	r3, r3, #592	; 0x250
				max_tx_octets = ((conn->max_tx_time - 430) >>
   10f88:	f5a3 73d7 	subeq.w	r3, r3, #430	; 0x1ae
				max_tx_octets = ((conn->max_tx_time - 592) >>
   10f8c:	119b      	asrne	r3, r3, #6
				max_tx_octets = ((conn->max_tx_time - 430) >>
   10f8e:	111b      	asreq	r3, r3, #4
   10f90:	3b02      	subs	r3, #2
   10f92:	e7ca      	b.n	10f2a <prepare_pdu_data_tx+0xb6>
   10f94:	0000      	movs	r0, r0
	...

00010f98 <mayfly_xtal_stop_calc>:
{
   10f98:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f9a:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   10f9c:	2302      	movs	r3, #2
   10f9e:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
   10fa0:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
   10fa2:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   10fa4:	4e74      	ldr	r6, [pc, #464]	; (11178 <mayfly_xtal_stop_calc+0x1e0>)
				    _radio.connection_count));
   10fa6:	4d75      	ldr	r5, [pc, #468]	; (1117c <mayfly_xtal_stop_calc+0x1e4>)
	struct connection *conn_curr = NULL;
   10fa8:	930a      	str	r3, [sp, #40]	; 0x28
{
   10faa:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
   10fac:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
   10fae:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
   10fb2:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   10fb4:	ab09      	add	r3, sp, #36	; 0x24
   10fb6:	9302      	str	r3, [sp, #8]
   10fb8:	ab0c      	add	r3, sp, #48	; 0x30
   10fba:	9300      	str	r3, [sp, #0]
   10fbc:	9601      	str	r6, [sp, #4]
   10fbe:	ab0d      	add	r3, sp, #52	; 0x34
   10fc0:	f10d 0223 	add.w	r2, sp, #35	; 0x23
   10fc4:	2101      	movs	r1, #1
   10fc6:	2000      	movs	r0, #0
   10fc8:	f7fa fdf6 	bl	bbb8 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   10fcc:	2802      	cmp	r0, #2
   10fce:	d00b      	beq.n	10fe8 <mayfly_xtal_stop_calc+0x50>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   10fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10fd2:	b16b      	cbz	r3, 10ff0 <mayfly_xtal_stop_calc+0x58>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10fd4:	4040      	eors	r0, r0
   10fd6:	f380 8811 	msr	BASEPRI, r0
   10fda:	f04f 0004 	mov.w	r0, #4
   10fde:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   10fe0:	2101      	movs	r1, #1
   10fe2:	2000      	movs	r0, #0
   10fe4:	f7fa fe66 	bl	bcb4 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   10fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10fea:	2b02      	cmp	r3, #2
   10fec:	d0f8      	beq.n	10fe0 <mayfly_xtal_stop_calc+0x48>
   10fee:	e7ef      	b.n	10fd0 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
   10ff0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
   10ff4:	2bff      	cmp	r3, #255	; 0xff
   10ff6:	d004      	beq.n	11002 <mayfly_xtal_stop_calc+0x6a>
   10ff8:	f895 2cf8 	ldrb.w	r2, [r5, #3320]	; 0xcf8
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   10ffc:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
   10ffe:	4293      	cmp	r3, r2
   11000:	dad8      	bge.n	10fb4 <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
   11002:	1f5a      	subs	r2, r3, #5
   11004:	b2d2      	uxtb	r2, r2
   11006:	2af9      	cmp	r2, #249	; 0xf9
   11008:	4f5d      	ldr	r7, [pc, #372]	; (11180 <mayfly_xtal_stop_calc+0x1e8>)
   1100a:	d805      	bhi.n	11018 <mayfly_xtal_stop_calc+0x80>
				_radio.connection_count))) {
   1100c:	4a5b      	ldr	r2, [pc, #364]	; (1117c <mayfly_xtal_stop_calc+0x1e4>)
   1100e:	f892 2cf8 	ldrb.w	r2, [r2, #3320]	; 0xcf8
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   11012:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
   11014:	4293      	cmp	r3, r2
   11016:	db06      	blt.n	11026 <mayfly_xtal_stop_calc+0x8e>
		if (s_xtal_retained) {
   11018:	783b      	ldrb	r3, [r7, #0]
   1101a:	b113      	cbz	r3, 11022 <mayfly_xtal_stop_calc+0x8a>
   1101c:	2001      	movs	r0, #1
   1101e:	f7fd fd39 	bl	ea94 <mayfly_xtal_retain.part.14>
}
   11022:	b00f      	add	sp, #60	; 0x3c
   11024:	bdf0      	pop	{r4, r5, r6, r7, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
   11026:	a90a      	add	r1, sp, #40	; 0x28
   11028:	b2e0      	uxtb	r0, r4
   1102a:	f7fd fd15 	bl	ea58 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
   1102e:	2800      	cmp	r0, #0
   11030:	d0d0      	beq.n	10fd4 <mayfly_xtal_stop_calc+0x3c>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
   11032:	6803      	ldr	r3, [r0, #0]
   11034:	6844      	ldr	r4, [r0, #4]
   11036:	2b00      	cmp	r3, #0
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
   11038:	bfb8      	it	lt
   1103a:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
   1103c:	429c      	cmp	r4, r3
   1103e:	bf38      	it	cc
   11040:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
   11042:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
   11044:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   11048:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
   1104a:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
   1104c:	f7fd fd04 	bl	ea58 <hdr_conn_get>
	LL_ASSERT(hdr_next);
   11050:	4605      	mov	r5, r0
   11052:	2800      	cmp	r0, #0
   11054:	d0be      	beq.n	10fd4 <mayfly_xtal_stop_calc+0x3c>
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
   11056:	6886      	ldr	r6, [r0, #8]
   11058:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
   1105a:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
   1105c:	429e      	cmp	r6, r3
   1105e:	bf38      	it	cc
   11060:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
   11062:	2a00      	cmp	r2, #0
   11064:	da05      	bge.n	11072 <mayfly_xtal_stop_calc+0xda>
		ticks_to_expire -=
   11066:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
   11068:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
   1106c:	4433      	add	r3, r6
   1106e:	1a9b      	subs	r3, r3, r2
   11070:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
   11072:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
   11074:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
   11078:	4293      	cmp	r3, r2
   1107a:	d20b      	bcs.n	11094 <mayfly_xtal_stop_calc+0xfc>
		if (s_xtal_retained) {
   1107c:	783b      	ldrb	r3, [r7, #0]
   1107e:	b113      	cbz	r3, 11086 <mayfly_xtal_stop_calc+0xee>
   11080:	2001      	movs	r0, #1
   11082:	f7fd fd07 	bl	ea94 <mayfly_xtal_retain.part.14>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
   11086:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   1108a:	2101      	movs	r1, #1
   1108c:	4628      	mov	r0, r5
   1108e:	f7fd fd23 	bl	ead8 <prepare_normal_set>
   11092:	e7c6      	b.n	11022 <mayfly_xtal_stop_calc+0x8a>
		if (!s_xtal_retained) {
   11094:	783a      	ldrb	r2, [r7, #0]
   11096:	b93a      	cbnz	r2, 110a8 <mayfly_xtal_stop_calc+0x110>
			s_xtal_retained = 1;
   11098:	2001      	movs	r0, #1
			retval = mayfly_enqueue(caller_id,
   1109a:	4b3a      	ldr	r3, [pc, #232]	; (11184 <mayfly_xtal_stop_calc+0x1ec>)
			s_xtal_retained = 1;
   1109c:	7038      	strb	r0, [r7, #0]
			retval = mayfly_enqueue(caller_id,
   1109e:	4611      	mov	r1, r2
   110a0:	f7f9 ff06 	bl	aeb0 <mayfly_enqueue>
			LL_ASSERT(!retval);
   110a4:	2800      	cmp	r0, #0
   110a6:	d195      	bne.n	10fd4 <mayfly_xtal_stop_calc+0x3c>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
   110a8:	682b      	ldr	r3, [r5, #0]
   110aa:	2b00      	cmp	r3, #0
   110ac:	db15      	blt.n	110da <mayfly_xtal_stop_calc+0x142>
   110ae:	429e      	cmp	r6, r3
   110b0:	d213      	bcs.n	110da <mayfly_xtal_stop_calc+0x142>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
   110b2:	1b9b      	subs	r3, r3, r6
			ticker_status =
   110b4:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   110b6:	b29b      	uxth	r3, r3
			ticker_status =
   110b8:	4933      	ldr	r1, [pc, #204]	; (11188 <mayfly_xtal_stop_calc+0x1f0>)
   110ba:	9105      	str	r1, [sp, #20]
   110bc:	9302      	str	r3, [sp, #8]
   110be:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   110c2:	9506      	str	r5, [sp, #24]
   110c4:	9004      	str	r0, [sp, #16]
   110c6:	9003      	str	r0, [sp, #12]
   110c8:	9001      	str	r0, [sp, #4]
   110ca:	9000      	str	r0, [sp, #0]
   110cc:	2101      	movs	r1, #1
   110ce:	f7fa fce9 	bl	baa4 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   110d2:	f030 0302 	bics.w	r3, r0, #2
   110d6:	f47f af7d 	bne.w	10fd4 <mayfly_xtal_stop_calc+0x3c>
		if (!conn_curr || !conn_next) {
   110da:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   110dc:	2e00      	cmp	r6, #0
   110de:	d0a0      	beq.n	11022 <mayfly_xtal_stop_calc+0x8a>
   110e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   110e2:	2d00      	cmp	r5, #0
   110e4:	d09d      	beq.n	11022 <mayfly_xtal_stop_calc+0x8a>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
   110e6:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
   110e8:	8caa      	ldrh	r2, [r5, #36]	; 0x24
   110ea:	429a      	cmp	r2, r3
   110ec:	d199      	bne.n	11022 <mayfly_xtal_stop_calc+0x8a>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
   110ee:	4827      	ldr	r0, [pc, #156]	; (1118c <mayfly_xtal_stop_calc+0x1f4>)
   110f0:	b292      	uxth	r2, r2
   110f2:	fba2 0100 	umull	r0, r1, r2, r0
   110f6:	f240 1323 	movw	r3, #291	; 0x123
   110fa:	fb03 1102 	mla	r1, r3, r2, r1
   110fe:	a31c      	add	r3, pc, #112	; (adr r3, 11170 <mayfly_xtal_stop_calc+0x1d8>)
   11100:	e9d3 2300 	ldrd	r2, r3, [r3]
   11104:	f7ef f8b0 	bl	268 <__aeabi_uldivmod>
   11108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1110a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
   1110e:	2200      	movs	r2, #0
   11110:	4298      	cmp	r0, r3
   11112:	d318      	bcc.n	11146 <mayfly_xtal_stop_calc+0x1ae>
   11114:	b102      	cbz	r2, 11118 <mayfly_xtal_stop_calc+0x180>
   11116:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
   11118:	f996 201d 	ldrsb.w	r2, [r6, #29]
   1111c:	2a00      	cmp	r2, #0
   1111e:	f995 201d 	ldrsb.w	r2, [r5, #29]
   11122:	da13      	bge.n	1114c <mayfly_xtal_stop_calc+0x1b4>
   11124:	2a00      	cmp	r2, #0
   11126:	f6ff af7c 	blt.w	11022 <mayfly_xtal_stop_calc+0x8a>
			     (ticks_slot_abs +
   1112a:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
   1112c:	429c      	cmp	r4, r3
   1112e:	f67f af78 	bls.w	11022 <mayfly_xtal_stop_calc+0x8a>
				status = conn_update_req(conn_curr);
   11132:	4630      	mov	r0, r6
   11134:	f7fc fba4 	bl	d880 <conn_update_req>
				if (status == 2) {
   11138:	2802      	cmp	r0, #2
   1113a:	f47f af72 	bne.w	11022 <mayfly_xtal_stop_calc+0x8a>
					conn_update_req(conn_next);
   1113e:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
   11140:	f7fc fb9e 	bl	d880 <conn_update_req>
   11144:	e76d      	b.n	11022 <mayfly_xtal_stop_calc+0x8a>
				ticks_to_expire -= ticks_conn_interval;
   11146:	1a1b      	subs	r3, r3, r0
   11148:	2201      	movs	r2, #1
   1114a:	e7e1      	b.n	11110 <mayfly_xtal_stop_calc+0x178>
			} else if (!conn_curr->role && conn_next->role &&
   1114c:	2a00      	cmp	r2, #0
   1114e:	f6bf af68 	bge.w	11022 <mayfly_xtal_stop_calc+0x8a>
				    (ticks_slot_abs +
   11152:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
   11154:	429c      	cmp	r4, r3
   11156:	f67f af64 	bls.w	11022 <mayfly_xtal_stop_calc+0x8a>
				status = conn_update_req(conn_next);
   1115a:	4628      	mov	r0, r5
   1115c:	f7fc fb90 	bl	d880 <conn_update_req>
				if (status == 2) {
   11160:	2802      	cmp	r0, #2
   11162:	f47f af5e 	bne.w	11022 <mayfly_xtal_stop_calc+0x8a>
					conn_update_req(conn_curr);
   11166:	980a      	ldr	r0, [sp, #40]	; 0x28
   11168:	e7ea      	b.n	11140 <mayfly_xtal_stop_calc+0x1a8>
   1116a:	bf00      	nop
   1116c:	f3af 8000 	nop.w
   11170:	1afd498d 	.word	0x1afd498d
   11174:	00000007 	.word	0x00000007
   11178:	0000d7dd 	.word	0x0000d7dd
   1117c:	20000c08 	.word	0x20000c08
   11180:	20001a2c 	.word	0x20001a2c
   11184:	2000e1d0 	.word	0x2000e1d0
   11188:	0000d7e1 	.word	0x0000d7e1
   1118c:	09ce5400 	.word	0x09ce5400

00011190 <event_master>:
{
   11190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11192:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
   11194:	4b4a      	ldr	r3, [pc, #296]	; (112c0 <event_master+0x130>)
   11196:	7cd9      	ldrb	r1, [r3, #19]
{
   11198:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   1119a:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   1119e:	461d      	mov	r5, r3
   111a0:	b129      	cbz	r1, 111ae <event_master+0x1e>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   111a2:	4040      	eors	r0, r0
   111a4:	f380 8811 	msr	BASEPRI, r0
   111a8:	f04f 0004 	mov.w	r0, #4
   111ac:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   111ae:	7c1b      	ldrb	r3, [r3, #16]
   111b0:	8c21      	ldrh	r1, [r4, #32]
   111b2:	b2db      	uxtb	r3, r3
   111b4:	3107      	adds	r1, #7
   111b6:	428b      	cmp	r3, r1
   111b8:	d1f3      	bne.n	111a2 <event_master+0x12>
	_radio.packet_counter = 0;
   111ba:	f885 2d00 	strb.w	r2, [r5, #3328]	; 0xd00
	_radio.crc_expire = 0;
   111be:	f885 2d01 	strb.w	r2, [r5, #3329]	; 0xd01
	_radio.role = ROLE_MASTER;
   111c2:	2104      	movs	r1, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   111c4:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
   111c6:	74e9      	strb	r1, [r5, #19]
	_radio.ticker_id_prepare = 0;
   111c8:	742a      	strb	r2, [r5, #16]
	_radio.ticker_id_event =
   111ca:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
   111cc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
   111ce:	f8c5 4cfc 	str.w	r4, [r5, #3324]	; 0xcfc
	_radio.state = STATE_TX;
   111d2:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
   111d4:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   111d6:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
   111d8:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
   111da:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
   111dc:	f7fd fed0 	bl	ef80 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
   111e0:	a901      	add	r1, sp, #4
   111e2:	4620      	mov	r0, r4
   111e4:	f7ff fe46 	bl	10e74 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
   111e8:	9901      	ldr	r1, [sp, #4]
   111ea:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
   111ee:	780b      	ldrb	r3, [r1, #0]
   111f0:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
   111f4:	f3c2 0240 	ubfx	r2, r2, #1, #1
   111f8:	f362 0382 	bfi	r3, r2, #2, #1
   111fc:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
   111fe:	4620      	mov	r0, r4
   11200:	f7ff fd48 	bl	10c94 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   11204:	2096      	movs	r0, #150	; 0x96
   11206:	f006 fb0b 	bl	17820 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
   1120a:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   1120e:	f000 0007 	and.w	r0, r0, #7
   11212:	f006 fa67 	bl	176e4 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
   11216:	9901      	ldr	r1, [sp, #4]
   11218:	4620      	mov	r0, r4
   1121a:	f7fc fddf 	bl	dddc <tx_packet_set>
	if (conn->data_chan_sel) {
   1121e:	7f63      	ldrb	r3, [r4, #29]
   11220:	f013 0f40 	tst.w	r3, #64	; 0x40
   11224:	f104 0217 	add.w	r2, r4, #23
   11228:	d021      	beq.n	1126e <event_master+0xde>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   1122a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   1122c:	8be1      	ldrh	r1, [r4, #30]
   1122e:	3801      	subs	r0, #1
   11230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   11234:	b280      	uxth	r0, r0
   11236:	f7fe f9cb 	bl	f5d0 <chan_sel_2>
	chan_set(data_chan_use);
   1123a:	f7fc fdfb 	bl	de34 <chan_set>
		remainder_us = radio_tmr_start(1,
   1123e:	68ea      	ldr	r2, [r5, #12]
   11240:	f107 0109 	add.w	r1, r7, #9
   11244:	2001      	movs	r0, #1
   11246:	f006 faf7 	bl	17838 <radio_tmr_start>
		radio_tmr_end_capture();
   1124a:	f006 fbb3 	bl	179b4 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   1124e:	f894 1020 	ldrb.w	r1, [r4, #32]
   11252:	3107      	adds	r1, #7
   11254:	463a      	mov	r2, r7
   11256:	b2c9      	uxtb	r1, r1
   11258:	4620      	mov	r0, r4
   1125a:	f7fe f9fd 	bl	f658 <preempt_calc>
	if (0 !=
   1125e:	4603      	mov	r3, r0
   11260:	b328      	cbz	r0, 112ae <event_master+0x11e>
		_radio.state = STATE_STOP;
   11262:	2304      	movs	r3, #4
   11264:	752b      	strb	r3, [r5, #20]
		radio_disable();
   11266:	f006 f9e3 	bl	17630 <radio_disable>
}
   1126a:	b003      	add	sp, #12
   1126c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1126e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   11270:	7fa6      	ldrb	r6, [r4, #30]
   11272:	fb01 6606 	mla	r6, r1, r6, r6
   11276:	7fe1      	ldrb	r1, [r4, #31]
   11278:	2025      	movs	r0, #37	; 0x25
   1127a:	440e      	add	r6, r1
   1127c:	fb96 f1f0 	sdiv	r1, r6, r0
   11280:	fb00 6611 	mls	r6, r0, r1, r6
   11284:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   11286:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
   11288:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   1128a:	5c51      	ldrb	r1, [r2, r1]
   1128c:	f006 0607 	and.w	r6, r6, #7
   11290:	fa41 f606 	asr.w	r6, r1, r6
   11294:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
   11296:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   1129a:	d4ce      	bmi.n	1123a <event_master+0xaa>
		chan_index = chan_next % chan_count;
   1129c:	fbb0 f1f3 	udiv	r1, r0, r3
   112a0:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
   112a4:	b2c9      	uxtb	r1, r1
   112a6:	4610      	mov	r0, r2
   112a8:	f7fc faa6 	bl	d7f8 <chan_sel_remap>
   112ac:	e7c5      	b.n	1123a <event_master+0xaa>
		ticker_status =
   112ae:	4a05      	ldr	r2, [pc, #20]	; (112c4 <event_master+0x134>)
   112b0:	4601      	mov	r1, r0
   112b2:	f7fa fcc3 	bl	bc3c <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   112b6:	f030 0302 	bics.w	r3, r0, #2
   112ba:	f47f af72 	bne.w	111a2 <event_master+0x12>
   112be:	e7d4      	b.n	1126a <event_master+0xda>
   112c0:	20000c08 	.word	0x20000c08
   112c4:	0000ea41 	.word	0x0000ea41

000112c8 <isr_rx_conn_pkt_ctrl>:
{
   112c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
   112cc:	7ac7      	ldrb	r7, [r0, #11]
{
   112ce:	4604      	mov	r4, r0
   112d0:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
   112d2:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
   112d6:	2f19      	cmp	r7, #25
   112d8:	f201 8077 	bhi.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
   112dc:	e8df f017 	tbh	[pc, r7, lsl #1]
   112e0:	007f001a 	.word	0x007f001a
   112e4:	00c500b6 	.word	0x00c500b6
   112e8:	011b00f3 	.word	0x011b00f3
   112ec:	057a013f 	.word	0x057a013f
   112f0:	019d017c 	.word	0x019d017c
   112f4:	01f801ce 	.word	0x01f801ce
   112f8:	02920229 	.word	0x02920229
   112fc:	02aa0192 	.word	0x02aa0192
   11300:	047803f5 	.word	0x047803f5
   11304:	056d0553 	.word	0x056d0553
   11308:	05f205f2 	.word	0x05f205f2
   1130c:	078606c7 	.word	0x078606c7
   11310:	084207bd 	.word	0x084207bd
		if (!_radio.conn_curr->role ||
   11314:	4ed8      	ldr	r6, [pc, #864]	; (11678 <isr_rx_conn_pkt_ctrl+0x3b0>)
   11316:	f8d6 5cfc 	ldr.w	r5, [r6, #3324]	; 0xcfc
   1131a:	f995 301d 	ldrsb.w	r3, [r5, #29]
   1131e:	2b00      	cmp	r3, #0
   11320:	f281 8053 	bge.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
   11324:	7a41      	ldrb	r1, [r0, #9]
   11326:	2000      	movs	r0, #0
   11328:	f7fc fa3a 	bl	d7a0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   1132c:	2800      	cmp	r0, #0
   1132e:	f001 804c 	beq.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
   11332:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
   11336:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   11338:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
   1133a:	041b      	lsls	r3, r3, #16
   1133c:	f101 805b 	bmi.w	123f6 <isr_rx_conn_pkt_ctrl+0x112e>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11340:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   11344:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
   11348:	429a      	cmp	r2, r3
   1134a:	d005      	beq.n	11358 <isr_rx_conn_pkt_ctrl+0x90>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   1134c:	4040      	eors	r0, r0
   1134e:	f380 8811 	msr	BASEPRI, r0
   11352:	f04f 0004 	mov.w	r0, #4
   11356:	df02      	svc	2
	if (_radio.conn_upd == 0) {
   11358:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
   1135c:	b90a      	cbnz	r2, 11362 <isr_rx_conn_pkt_ctrl+0x9a>
		_radio.conn_upd = conn;
   1135e:	f8c6 5d70 	str.w	r5, [r6, #3440]	; 0xd70
	conn->llcp.conn_upd.win_size =
   11362:	7b22      	ldrb	r2, [r4, #12]
   11364:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
   11368:	f8b4 000d 	ldrh.w	r0, [r4, #13]
   1136c:	f240 42e2 	movw	r2, #1250	; 0x4e2
   11370:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
   11372:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
   11376:	7c20      	ldrb	r0, [r4, #16]
   11378:	7be2      	ldrb	r2, [r4, #15]
   1137a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
   1137e:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
   11382:	7ca0      	ldrb	r0, [r4, #18]
   11384:	7c62      	ldrb	r2, [r4, #17]
   11386:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
   1138a:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
   1138e:	7ce2      	ldrb	r2, [r4, #19]
   11390:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
   11392:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
   11396:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
   1139a:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   1139e:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
   113a2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
   113a6:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
   113aa:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
   113ac:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
   113b0:	2201      	movs	r2, #1
   113b2:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
   113b6:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   113ba:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
   113be:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   113c2:	4293      	cmp	r3, r2
   113c4:	d007      	beq.n	113d6 <isr_rx_conn_pkt_ctrl+0x10e>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   113c6:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   113ca:	f003 0307 	and.w	r3, r3, #7
   113ce:	2b04      	cmp	r3, #4
   113d0:	d101      	bne.n	113d6 <isr_rx_conn_pkt_ctrl+0x10e>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   113d2:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
   113d6:	2000      	movs	r0, #0
   113d8:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
   113dc:	e033      	b.n	11446 <isr_rx_conn_pkt_ctrl+0x17e>
		if (!_radio.conn_curr->role ||
   113de:	4ba6      	ldr	r3, [pc, #664]	; (11678 <isr_rx_conn_pkt_ctrl+0x3b0>)
   113e0:	f8d3 5cfc 	ldr.w	r5, [r3, #3324]	; 0xcfc
   113e4:	f995 301d 	ldrsb.w	r3, [r5, #29]
   113e8:	2b00      	cmp	r3, #0
   113ea:	f280 87ee 	bge.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
   113ee:	7a41      	ldrb	r1, [r0, #9]
   113f0:	2001      	movs	r0, #1
   113f2:	f7fc f9d5 	bl	d7a0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   113f6:	2800      	cmp	r0, #0
   113f8:	f000 87e7 	beq.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
   113fc:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
   11400:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
   11402:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
   11404:	041f      	lsls	r7, r3, #16
   11406:	f100 87f6 	bmi.w	123f6 <isr_rx_conn_pkt_ctrl+0x112e>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   1140a:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   1140e:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   11412:	429a      	cmp	r2, r3
   11414:	d19a      	bne.n	1134c <isr_rx_conn_pkt_ctrl+0x84>
	memcpy(&conn->llcp.chan_map.chm[0],
   11416:	2205      	movs	r2, #5
   11418:	f104 010c 	add.w	r1, r4, #12
   1141c:	f105 0079 	add.w	r0, r5, #121	; 0x79
   11420:	f7ef f9cc 	bl	7bc <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
   11424:	7c63      	ldrb	r3, [r4, #17]
   11426:	7ca2      	ldrb	r2, [r4, #18]
   11428:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
   1142c:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
   11430:	2302      	movs	r3, #2
   11432:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
   11436:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
   1143a:	2000      	movs	r0, #0
	conn->llcp_ack--;
   1143c:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
   1143e:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
   11442:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
}
   11446:	b003      	add	sp, #12
   11448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   1144c:	7a41      	ldrb	r1, [r0, #9]
   1144e:	2002      	movs	r0, #2
   11450:	f7fc f9a6 	bl	d7a0 <pdu_len_cmp>
   11454:	2800      	cmp	r0, #0
   11456:	f000 87b8 	beq.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		_radio.conn_curr->llcp_terminate.reason_peer =
   1145a:	4b87      	ldr	r3, [pc, #540]	; (11678 <isr_rx_conn_pkt_ctrl+0x3b0>)
   1145c:	7b22      	ldrb	r2, [r4, #12]
   1145e:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
   11462:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   11466:	2000      	movs	r0, #0
	return nack;
   11468:	e7ed      	b.n	11446 <isr_rx_conn_pkt_ctrl+0x17e>
		if (!_radio.conn_curr->role ||
   1146a:	4e83      	ldr	r6, [pc, #524]	; (11678 <isr_rx_conn_pkt_ctrl+0x3b0>)
   1146c:	f8d6 8cfc 	ldr.w	r8, [r6, #3324]	; 0xcfc
   11470:	f998 301d 	ldrsb.w	r3, [r8, #29]
   11474:	2b00      	cmp	r3, #0
   11476:	f280 87a8 	bge.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
   1147a:	7a41      	ldrb	r1, [r0, #9]
   1147c:	2003      	movs	r0, #3
   1147e:	f7fc f98f 	bl	d7a0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   11482:	2800      	cmp	r0, #0
   11484:	f000 87a1 	beq.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   11488:	2208      	movs	r2, #8
   1148a:	f104 0116 	add.w	r1, r4, #22
   1148e:	f108 0094 	add.w	r0, r8, #148	; 0x94
   11492:	f7ef f993 	bl	7bc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   11496:	f8d6 0cfc 	ldr.w	r0, [r6, #3324]	; 0xcfc
   1149a:	2204      	movs	r2, #4
   1149c:	f104 011e 	add.w	r1, r4, #30
   114a0:	f500 7089 	add.w	r0, r0, #274	; 0x112
   114a4:	f7ef f98a 	bl	7bc <memcpy>
		_radio.conn_curr->pause_rx = 1;
   114a8:	f8d6 3cfc 	ldr.w	r3, [r6, #3324]	; 0xcfc
   114ac:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   114b0:	f042 0204 	orr.w	r2, r2, #4
   114b4:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   114b8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
   114bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
   114c0:	2301      	movs	r3, #1
   114c2:	702b      	strb	r3, [r5, #0]
   114c4:	e7cf      	b.n	11466 <isr_rx_conn_pkt_ctrl+0x19e>
		if (_radio.conn_curr->role ||
   114c6:	4d6c      	ldr	r5, [pc, #432]	; (11678 <isr_rx_conn_pkt_ctrl+0x3b0>)
   114c8:	f8d5 6cfc 	ldr.w	r6, [r5, #3324]	; 0xcfc
   114cc:	f996 301d 	ldrsb.w	r3, [r6, #29]
   114d0:	2b00      	cmp	r3, #0
   114d2:	f2c0 877a 	blt.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
   114d6:	7a41      	ldrb	r1, [r0, #9]
   114d8:	2004      	movs	r0, #4
   114da:	f7fc f961 	bl	d7a0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   114de:	2800      	cmp	r0, #0
   114e0:	f000 8773 	beq.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
   114e4:	2208      	movs	r2, #8
   114e6:	f104 010c 	add.w	r1, r4, #12
   114ea:	f106 009c 	add.w	r0, r6, #156	; 0x9c
   114ee:	f7ef f965 	bl	7bc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
   114f2:	f8d5 0cfc 	ldr.w	r0, [r5, #3324]	; 0xcfc
   114f6:	2204      	movs	r2, #4
   114f8:	f104 0114 	add.w	r1, r4, #20
   114fc:	f500 708b 	add.w	r0, r0, #278	; 0x116
   11500:	f7ef f95c 	bl	7bc <memcpy>
		_radio.conn_curr->pause_rx = 1;
   11504:	f8d5 2cfc 	ldr.w	r2, [r5, #3324]	; 0xcfc
   11508:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   1150c:	f043 0304 	orr.w	r3, r3, #4
   11510:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
   11514:	e7a7      	b.n	11466 <isr_rx_conn_pkt_ctrl+0x19e>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
   11516:	4b58      	ldr	r3, [pc, #352]	; (11678 <isr_rx_conn_pkt_ctrl+0x3b0>)
   11518:	f8d3 5cfc 	ldr.w	r5, [r3, #3324]	; 0xcfc
   1151c:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
   11520:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   11524:	42b3      	cmp	r3, r6
   11526:	d004      	beq.n	11532 <isr_rx_conn_pkt_ctrl+0x26a>
   11528:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
   1152c:	2b03      	cmp	r3, #3
   1152e:	f47f af0d 	bne.w	1134c <isr_rx_conn_pkt_ctrl+0x84>
		if (_radio.conn_curr->role ||
   11532:	f995 301d 	ldrsb.w	r3, [r5, #29]
   11536:	2b00      	cmp	r3, #0
   11538:	f2c0 8747 	blt.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
   1153c:	7a61      	ldrb	r1, [r4, #9]
   1153e:	2005      	movs	r0, #5
   11540:	f7fc f92e 	bl	d7a0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   11544:	2800      	cmp	r0, #0
   11546:	f000 8740 	beq.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		_radio.conn_curr->llcp.encryption.initiate = 0;
   1154a:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   1154c:	2303      	movs	r3, #3
		_radio.conn_curr->llcp_ack--;
   1154e:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp.encryption.initiate = 0;
   11550:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   11554:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
   11558:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		break;
   1155c:	e773      	b.n	11446 <isr_rx_conn_pkt_ctrl+0x17e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   1155e:	7a41      	ldrb	r1, [r0, #9]
   11560:	2006      	movs	r0, #6
   11562:	f7fc f91d 	bl	d7a0 <pdu_len_cmp>
   11566:	2800      	cmp	r0, #0
   11568:	f000 872f 	beq.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		if (_radio.role == ROLE_SLAVE) {
   1156c:	4b42      	ldr	r3, [pc, #264]	; (11678 <isr_rx_conn_pkt_ctrl+0x3b0>)
   1156e:	7cda      	ldrb	r2, [r3, #19]
   11570:	2a03      	cmp	r2, #3
   11572:	4619      	mov	r1, r3
   11574:	d125      	bne.n	115c2 <isr_rx_conn_pkt_ctrl+0x2fa>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
   11576:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
   1157a:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
   1157e:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
   11582:	4290      	cmp	r0, r2
   11584:	d004      	beq.n	11590 <isr_rx_conn_pkt_ctrl+0x2c8>
   11586:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   1158a:	2803      	cmp	r0, #3
   1158c:	f47f aede 	bne.w	1134c <isr_rx_conn_pkt_ctrl+0x84>
			_radio.conn_curr->llcp.encryption.initiate = 0;
   11590:	2000      	movs	r0, #0
   11592:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
   11596:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   11598:	2003      	movs	r0, #3
   1159a:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
   1159e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
   115a2:	f8d1 2cfc 	ldr.w	r2, [r1, #3324]	; 0xcfc
   115a6:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   115aa:	065e      	lsls	r6, r3, #25
   115ac:	d505      	bpl.n	115ba <isr_rx_conn_pkt_ctrl+0x2f2>
			_radio.conn_curr->refresh = 0;
   115ae:	f36f 1386 	bfc	r3, #6, #1
   115b2:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   115b6:	2309      	movs	r3, #9
   115b8:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
   115ba:	2301      	movs	r3, #1
   115bc:	702b      	strb	r3, [r5, #0]
				break;
   115be:	f000 bc7d 	b.w	11ebc <isr_rx_conn_pkt_ctrl+0xbf4>
			_radio.conn_curr->pause_rx = 0;
   115c2:	f8d3 2cfc 	ldr.w	r2, [r3, #3324]	; 0xcfc
   115c6:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   115ca:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   115ce:	f36f 03c3 	bfc	r3, #3, #1
   115d2:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
   115d6:	e7e4      	b.n	115a2 <isr_rx_conn_pkt_ctrl+0x2da>
		if (!_radio.conn_curr->role ||
   115d8:	4b27      	ldr	r3, [pc, #156]	; (11678 <isr_rx_conn_pkt_ctrl+0x3b0>)
   115da:	f8d3 5cfc 	ldr.w	r5, [r3, #3324]	; 0xcfc
   115de:	f995 301d 	ldrsb.w	r3, [r5, #29]
   115e2:	2b00      	cmp	r3, #0
   115e4:	f280 86f1 	bge.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
   115e8:	7a41      	ldrb	r1, [r0, #9]
   115ea:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
   115ec:	f7fc f8d8 	bl	d7a0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   115f0:	2800      	cmp	r0, #0
   115f2:	f000 86ea 	beq.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
   115f6:	4631      	mov	r1, r6
   115f8:	4628      	mov	r0, r5
}
   115fa:	b003      	add	sp, #12
   115fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
   11600:	f7fe ba64 	b.w	facc <feature_rsp_send>
		if (_radio.conn_curr->role ||
   11604:	4b1c      	ldr	r3, [pc, #112]	; (11678 <isr_rx_conn_pkt_ctrl+0x3b0>)
   11606:	f8d3 5cfc 	ldr.w	r5, [r3, #3324]	; 0xcfc
   1160a:	f995 301d 	ldrsb.w	r3, [r5, #29]
   1160e:	2b00      	cmp	r3, #0
   11610:	f2c0 86db 	blt.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
   11614:	7a41      	ldrb	r1, [r0, #9]
   11616:	200e      	movs	r0, #14
   11618:	e7e8      	b.n	115ec <isr_rx_conn_pkt_ctrl+0x324>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
   1161a:	7a41      	ldrb	r1, [r0, #9]
   1161c:	2009      	movs	r0, #9
   1161e:	f7fc f8bf 	bl	d7a0 <pdu_len_cmp>
   11622:	2800      	cmp	r0, #0
   11624:	f000 86d1 	beq.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   11628:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
   1162a:	7b61      	ldrb	r1, [r4, #13]
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   1162c:	4812      	ldr	r0, [pc, #72]	; (11678 <isr_rx_conn_pkt_ctrl+0x3b0>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   1162e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   11632:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   11636:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   1163a:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   1163e:	f8d0 2cfc 	ldr.w	r2, [r0, #3324]	; 0xcfc
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   11642:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   11646:	7ba1      	ldrb	r1, [r4, #14]
   11648:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   1164c:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
   11650:	f3c1 0110 	ubfx	r1, r1, #0, #17
   11654:	400b      	ands	r3, r1
   11656:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   1165a:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   1165e:	f043 0320 	orr.w	r3, r3, #32
   11662:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		*rx_enqueue = 1;
   11666:	2301      	movs	r3, #1
   11668:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
   1166a:	f8d0 3cfc 	ldr.w	r3, [r0, #3324]	; 0xcfc
		_radio.conn_curr->procedure_expire = 0;
   1166e:	2000      	movs	r0, #0
   11670:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
   11674:	e6e7      	b.n	11446 <isr_rx_conn_pkt_ctrl+0x17e>
   11676:	bf00      	nop
   11678:	20000c08 	.word	0x20000c08
		if (!_radio.conn_curr->role ||
   1167c:	4ed0      	ldr	r6, [pc, #832]	; (119c0 <isr_rx_conn_pkt_ctrl+0x6f8>)
   1167e:	f8d6 5cfc 	ldr.w	r5, [r6, #3324]	; 0xcfc
   11682:	f995 301d 	ldrsb.w	r3, [r5, #29]
   11686:	2b00      	cmp	r3, #0
   11688:	f280 869f 	bge.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
   1168c:	7a41      	ldrb	r1, [r0, #9]
   1168e:	200a      	movs	r0, #10
   11690:	f7fc f886 	bl	d7a0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   11694:	2800      	cmp	r0, #0
   11696:	f000 8698 	beq.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1169a:	f606 5044 	addw	r0, r6, #3396	; 0xd44
   1169e:	f7f9 fb3c 	bl	ad1a <mem_acquire>
		if (!node_tx) {
   116a2:	4601      	mov	r1, r0
   116a4:	b908      	cbnz	r0, 116aa <isr_rx_conn_pkt_ctrl+0x3e2>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   116a6:	2001      	movs	r0, #1
   116a8:	e6cd      	b.n	11446 <isr_rx_conn_pkt_ctrl+0x17e>
		conn->refresh = 1;
   116aa:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
   116ae:	f043 0344 	orr.w	r3, r3, #68	; 0x44
   116b2:	f36f 1304 	bfc	r3, #4, #1
   116b6:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   116ba:	7903      	ldrb	r3, [r0, #4]
   116bc:	f043 0303 	orr.w	r3, r3, #3
   116c0:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   116c2:	2301      	movs	r3, #1
   116c4:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   116c6:	230b      	movs	r3, #11
   116c8:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   116ca:	4628      	mov	r0, r5
   116cc:	f000 bca0 	b.w	12010 <isr_rx_conn_pkt_ctrl+0xd48>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   116d0:	7a41      	ldrb	r1, [r0, #9]
   116d2:	200b      	movs	r0, #11
   116d4:	f7fc f864 	bl	d7a0 <pdu_len_cmp>
   116d8:	2800      	cmp	r0, #0
   116da:	f000 8676 	beq.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		nack = pause_enc_rsp_send(_radio.conn_curr, 0);
   116de:	48b8      	ldr	r0, [pc, #736]	; (119c0 <isr_rx_conn_pkt_ctrl+0x6f8>)
   116e0:	f8d0 4cfc 	ldr.w	r4, [r0, #3324]	; 0xcfc
	} else if (!conn->role) {
   116e4:	f994 301d 	ldrsb.w	r3, [r4, #29]
   116e8:	2b00      	cmp	r3, #0
   116ea:	db1b      	blt.n	11724 <isr_rx_conn_pkt_ctrl+0x45c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   116ec:	f600 5044 	addw	r0, r0, #3396	; 0xd44
   116f0:	f7f9 fb13 	bl	ad1a <mem_acquire>
		if (!node_tx) {
   116f4:	4601      	mov	r1, r0
   116f6:	2800      	cmp	r0, #0
   116f8:	d0d5      	beq.n	116a6 <isr_rx_conn_pkt_ctrl+0x3de>
		conn->enc_tx = 0;
   116fa:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
   116fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
   11702:	f043 0304 	orr.w	r3, r3, #4
   11706:	f36f 1304 	bfc	r3, #4, #1
   1170a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1170e:	7903      	ldrb	r3, [r0, #4]
   11710:	f043 0303 	orr.w	r3, r3, #3
   11714:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   11716:	2301      	movs	r3, #1
   11718:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   1171a:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   1171c:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
   1171e:	4620      	mov	r0, r4
   11720:	f000 bc76 	b.w	12010 <isr_rx_conn_pkt_ctrl+0xd48>
		conn->enc_tx = 0;
   11724:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   11728:	f36f 1345 	bfc	r3, #5, #1
   1172c:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
   11730:	e699      	b.n	11466 <isr_rx_conn_pkt_ctrl+0x19e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   11732:	7a41      	ldrb	r1, [r0, #9]
   11734:	200c      	movs	r0, #12
   11736:	f7fc f833 	bl	d7a0 <pdu_len_cmp>
   1173a:	2800      	cmp	r0, #0
   1173c:	f000 8645 	beq.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		nack = version_ind_send(_radio.conn_curr, pdu_data_rx,
   11740:	489f      	ldr	r0, [pc, #636]	; (119c0 <isr_rx_conn_pkt_ctrl+0x6f8>)
   11742:	f8d0 6cfc 	ldr.w	r6, [r0, #3324]	; 0xcfc
	if (!conn->llcp_version.tx) {
   11746:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
   1174a:	f013 0701 	ands.w	r7, r3, #1
   1174e:	d150      	bne.n	117f2 <isr_rx_conn_pkt_ctrl+0x52a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11750:	f600 5044 	addw	r0, r0, #3396	; 0xd44
   11754:	f7f9 fae1 	bl	ad1a <mem_acquire>
		if (!node_tx) {
   11758:	4601      	mov	r1, r0
   1175a:	2800      	cmp	r0, #0
   1175c:	d0a3      	beq.n	116a6 <isr_rx_conn_pkt_ctrl+0x3de>
		conn->llcp_version.tx = 1;
   1175e:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
   11762:	f043 0301 	orr.w	r3, r3, #1
   11766:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1176a:	7903      	ldrb	r3, [r0, #4]
   1176c:	f043 0303 	orr.w	r3, r3, #3
   11770:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
   11772:	2306      	movs	r3, #6
   11774:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   11776:	230c      	movs	r3, #12
   11778:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
   1177a:	2309      	movs	r3, #9
   1177c:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
   1177e:	f06f 030e 	mvn.w	r3, #14
   11782:	7243      	strb	r3, [r0, #9]
   11784:	2305      	movs	r3, #5
   11786:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
   11788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1178c:	72c3      	strb	r3, [r0, #11]
   1178e:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
   11790:	4630      	mov	r0, r6
   11792:	f7fe f981 	bl	fa98 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
   11796:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
   1179a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1179e:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
   117a2:	f005 ff97 	bl	176d4 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   117a6:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
   117a8:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   117aa:	2201      	movs	r2, #1
   117ac:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
   117b0:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   117b4:	7003      	strb	r3, [r0, #0]
   117b6:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
   117b8:	b1c2      	cbz	r2, 117ec <isr_rx_conn_pkt_ctrl+0x524>
		pdu_data_tx->md = 1;
   117ba:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
   117be:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
   117c0:	7b23      	ldrb	r3, [r4, #12]
   117c2:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
   117c6:	7ba2      	ldrb	r2, [r4, #14]
   117c8:	7b63      	ldrb	r3, [r4, #13]
   117ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   117ce:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
   117d2:	7be3      	ldrb	r3, [r4, #15]
   117d4:	7c22      	ldrb	r2, [r4, #16]
   117d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   117da:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
   117de:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
   117e2:	f043 0302 	orr.w	r3, r3, #2
   117e6:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
   117ea:	e63c      	b.n	11466 <isr_rx_conn_pkt_ctrl+0x19e>
		pdu_data_tx->md = 0;
   117ec:	f362 1304 	bfi	r3, r2, #4, #1
   117f0:	e7e5      	b.n	117be <isr_rx_conn_pkt_ctrl+0x4f6>
	} else if (!conn->llcp_version.rx) {
   117f2:	f013 0302 	ands.w	r3, r3, #2
   117f6:	f47f ae36 	bne.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
		conn->procedure_expire = 0;
   117fa:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
   117fe:	2301      	movs	r3, #1
   11800:	702b      	strb	r3, [r5, #0]
   11802:	e7dd      	b.n	117c0 <isr_rx_conn_pkt_ctrl+0x4f8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
   11804:	7a41      	ldrb	r1, [r0, #9]
   11806:	200d      	movs	r0, #13
   11808:	f7fb ffca 	bl	d7a0 <pdu_len_cmp>
   1180c:	2800      	cmp	r0, #0
   1180e:	f000 85dc 	beq.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		_radio.conn_curr->pause_rx = 0;
   11812:	4b6b      	ldr	r3, [pc, #428]	; (119c0 <isr_rx_conn_pkt_ctrl+0x6f8>)
   11814:	f8d3 2cfc 	ldr.w	r2, [r3, #3324]	; 0xcfc
   11818:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   1181c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   11820:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
   11824:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
   11826:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   1182a:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
   1182e:	2301      	movs	r3, #1
   11830:	702b      	strb	r3, [r5, #0]
   11832:	e608      	b.n	11446 <isr_rx_conn_pkt_ctrl+0x17e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   11834:	7a41      	ldrb	r1, [r0, #9]
   11836:	200f      	movs	r0, #15
   11838:	f7fb ffb2 	bl	d7a0 <pdu_len_cmp>
   1183c:	2800      	cmp	r0, #0
   1183e:	f000 85c4 	beq.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
   11842:	4b5f      	ldr	r3, [pc, #380]	; (119c0 <isr_rx_conn_pkt_ctrl+0x6f8>)
   11844:	f8d3 1d70 	ldr.w	r1, [r3, #3440]	; 0xd70
   11848:	461a      	mov	r2, r3
   1184a:	b151      	cbz	r1, 11862 <isr_rx_conn_pkt_ctrl+0x59a>
   1184c:	f8d3 0cfc 	ldr.w	r0, [r3, #3324]	; 0xcfc
   11850:	4281      	cmp	r1, r0
   11852:	d006      	beq.n	11862 <isr_rx_conn_pkt_ctrl+0x59a>
			nack = reject_ext_ind_send(_radio.conn_curr,
   11854:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
   11856:	210f      	movs	r1, #15
}
   11858:	b003      	add	sp, #12
   1185a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
   1185e:	f7fe b99f 	b.w	fba0 <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
   11862:	f8d2 0cfc 	ldr.w	r0, [r2, #3324]	; 0xcfc
   11866:	f990 301d 	ldrsb.w	r3, [r0, #29]
   1186a:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
   1186e:	2b00      	cmp	r3, #0
   11870:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   11874:	f2c0 80a6 	blt.w	119c4 <isr_rx_conn_pkt_ctrl+0x6fc>
			if ((conn->llcp_conn_param.req !=
   11878:	4299      	cmp	r1, r3
   1187a:	d009      	beq.n	11890 <isr_rx_conn_pkt_ctrl+0x5c8>
			    ((conn->llcp_conn_param.state ==
   1187c:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
   11880:	f013 0307 	ands.w	r3, r3, #7
   11884:	d002      	beq.n	1188c <isr_rx_conn_pkt_ctrl+0x5c4>
			      LLCP_CPR_STATE_REQ) ||
   11886:	3b04      	subs	r3, #4
   11888:	2b01      	cmp	r3, #1
   1188a:	d801      	bhi.n	11890 <isr_rx_conn_pkt_ctrl+0x5c8>
				nack = reject_ext_ind_send(_radio.conn_curr,
   1188c:	2223      	movs	r2, #35	; 0x23
   1188e:	e7e2      	b.n	11856 <isr_rx_conn_pkt_ctrl+0x58e>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
   11890:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   11894:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11898:	4299      	cmp	r1, r3
   1189a:	d003      	beq.n	118a4 <isr_rx_conn_pkt_ctrl+0x5dc>
   1189c:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
   118a0:	2b03      	cmp	r3, #3
   118a2:	d105      	bne.n	118b0 <isr_rx_conn_pkt_ctrl+0x5e8>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   118a4:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
   118a8:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
   118ac:	4299      	cmp	r1, r3
   118ae:	d001      	beq.n	118b4 <isr_rx_conn_pkt_ctrl+0x5ec>
				nack = reject_ext_ind_send(_radio.conn_curr,
   118b0:	222a      	movs	r2, #42	; 0x2a
   118b2:	e7d0      	b.n	11856 <isr_rx_conn_pkt_ctrl+0x58e>
				if ((cpr->interval_min < 6) ||
   118b4:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   118b8:	4643      	mov	r3, r8
   118ba:	2b05      	cmp	r3, #5
   118bc:	d91b      	bls.n	118f6 <isr_rx_conn_pkt_ctrl+0x62e>
				    (cpr->interval_max > 3200) ||
   118be:	89e7      	ldrh	r7, [r4, #14]
				if ((cpr->interval_min < 6) ||
   118c0:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   118c4:	d817      	bhi.n	118f6 <isr_rx_conn_pkt_ctrl+0x62e>
				    (cpr->interval_max > 3200) ||
   118c6:	45b8      	cmp	r8, r7
   118c8:	d815      	bhi.n	118f6 <isr_rx_conn_pkt_ctrl+0x62e>
				    (cpr->latency > 499) ||
   118ca:	f8b4 c010 	ldrh.w	ip, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
   118ce:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   118d2:	d210      	bcs.n	118f6 <isr_rx_conn_pkt_ctrl+0x62e>
				    (cpr->timeout < 10) ||
   118d4:	f8b4 e012 	ldrh.w	lr, [r4, #18]
				    (cpr->latency > 499) ||
   118d8:	f1ae 060a 	sub.w	r6, lr, #10
   118dc:	b2b6      	uxth	r6, r6
   118de:	f640 4976 	movw	r9, #3190	; 0xc76
   118e2:	454e      	cmp	r6, r9
   118e4:	d807      	bhi.n	118f6 <isr_rx_conn_pkt_ctrl+0x62e>
				     ((cpr->latency + 1) *
   118e6:	fb0c 7107 	mla	r1, ip, r7, r7
				    (cpr->timeout > 3200) ||
   118ea:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
   118ee:	da02      	bge.n	118f6 <isr_rx_conn_pkt_ctrl+0x62e>
				    (cpr->preferred_periodicity >
   118f0:	7d21      	ldrb	r1, [r4, #20]
				      cpr->interval_max)) ||
   118f2:	428f      	cmp	r7, r1
   118f4:	d201      	bcs.n	118fa <isr_rx_conn_pkt_ctrl+0x632>
				nack = reject_ext_ind_send(conn,
   118f6:	221e      	movs	r2, #30
   118f8:	e7ad      	b.n	11856 <isr_rx_conn_pkt_ctrl+0x58e>
				conn->llcp_conn_param.interval = cpr->interval_min;
   118fa:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
   118fe:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
   11902:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.preferred_periodicity =
   11906:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
					cpr->reference_conn_event_count;
   1190a:	7da6      	ldrb	r6, [r4, #22]
   1190c:	7d61      	ldrb	r1, [r4, #21]
   1190e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   11912:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
   11916:	7e26      	ldrb	r6, [r4, #24]
   11918:	7de1      	ldrb	r1, [r4, #23]
   1191a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   1191e:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
   11922:	7ea6      	ldrb	r6, [r4, #26]
   11924:	7e61      	ldrb	r1, [r4, #25]
   11926:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   1192a:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
   1192e:	7f26      	ldrb	r6, [r4, #28]
   11930:	7ee1      	ldrb	r1, [r4, #27]
   11932:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   11936:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
   1193a:	7fa6      	ldrb	r6, [r4, #30]
   1193c:	7f61      	ldrb	r1, [r4, #29]
   1193e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   11942:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
   11946:	7fe1      	ldrb	r1, [r4, #31]
   11948:	f894 6020 	ldrb.w	r6, [r4, #32]
   1194c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   11950:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
   11954:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   11958:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
   1195c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
   11960:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
				if ((conn->llcp_conn_param.interval !=
   11964:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
   11968:	6a41      	ldr	r1, [r0, #36]	; 0x24
   1196a:	428c      	cmp	r4, r1
   1196c:	d10f      	bne.n	1198e <isr_rx_conn_pkt_ctrl+0x6c6>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1196e:	8c84      	ldrh	r4, [r0, #36]	; 0x24
   11970:	f240 41e2 	movw	r1, #1250	; 0x4e2
   11974:	4361      	muls	r1, r4
   11976:	f242 7410 	movw	r4, #10000	; 0x2710
   1197a:	fb04 130e 	mla	r3, r4, lr, r1
   1197e:	3b01      	subs	r3, #1
   11980:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
   11984:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   11986:	b29b      	uxth	r3, r3
   11988:	4299      	cmp	r1, r3
   1198a:	f000 8095 	beq.w	11ab8 <isr_rx_conn_pkt_ctrl+0x7f0>
					if (conn->pause_tx) {
   1198e:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   11992:	071c      	lsls	r4, r3, #28
   11994:	f140 808a 	bpl.w	11aac <isr_rx_conn_pkt_ctrl+0x7e4>
						conn->llcp_conn_param.state =
   11998:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   1199c:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
   1199e:	f361 0302 	bfi	r3, r1, #0, #3
   119a2:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
   119a6:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   119aa:	3b01      	subs	r3, #1
   119ac:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
   119b0:	f8d2 3d70 	ldr.w	r3, [r2, #3440]	; 0xd70
   119b4:	2b00      	cmp	r3, #0
   119b6:	f47f ad56 	bne.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
				_radio.conn_upd = conn;
   119ba:	f8c2 0d70 	str.w	r0, [r2, #3440]	; 0xd70
   119be:	e552      	b.n	11466 <isr_rx_conn_pkt_ctrl+0x19e>
   119c0:	20000c08 	.word	0x20000c08
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   119c4:	4299      	cmp	r1, r3
   119c6:	d004      	beq.n	119d2 <isr_rx_conn_pkt_ctrl+0x70a>
			    _radio.conn_curr->llcp_conn_param.ack) ||
   119c8:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   119cc:	0799      	lsls	r1, r3, #30
   119ce:	f47f acbd 	bne.w	1134c <isr_rx_conn_pkt_ctrl+0x84>
			if ((cpr->interval_min < 6) ||
   119d2:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   119d6:	4643      	mov	r3, r8
   119d8:	2b05      	cmp	r3, #5
   119da:	d98c      	bls.n	118f6 <isr_rx_conn_pkt_ctrl+0x62e>
			    (cpr->interval_max > 3200) ||
   119dc:	89e7      	ldrh	r7, [r4, #14]
			if ((cpr->interval_min < 6) ||
   119de:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   119e2:	d888      	bhi.n	118f6 <isr_rx_conn_pkt_ctrl+0x62e>
			    (cpr->interval_max > 3200) ||
   119e4:	45b8      	cmp	r8, r7
   119e6:	d886      	bhi.n	118f6 <isr_rx_conn_pkt_ctrl+0x62e>
			    (cpr->latency > 499) ||
   119e8:	f8b4 c010 	ldrh.w	ip, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   119ec:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   119f0:	d281      	bcs.n	118f6 <isr_rx_conn_pkt_ctrl+0x62e>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   119f2:	f8b4 e012 	ldrh.w	lr, [r4, #18]
			    (cpr->latency > 499) ||
   119f6:	f1ae 060a 	sub.w	r6, lr, #10
   119fa:	b2b6      	uxth	r6, r6
   119fc:	f640 4976 	movw	r9, #3190	; 0xc76
   11a00:	454e      	cmp	r6, r9
   11a02:	f63f af78 	bhi.w	118f6 <isr_rx_conn_pkt_ctrl+0x62e>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   11a06:	fb0c 7107 	mla	r1, ip, r7, r7
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   11a0a:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
   11a0e:	f6bf af72 	bge.w	118f6 <isr_rx_conn_pkt_ctrl+0x62e>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   11a12:	7d21      	ldrb	r1, [r4, #20]
						    cpr->interval_max)) ||
   11a14:	428f      	cmp	r7, r1
   11a16:	f4ff af6e 	bcc.w	118f6 <isr_rx_conn_pkt_ctrl+0x62e>
			conn->llcp_conn_param.interval = cpr->interval_min;
   11a1a:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   11a1e:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   11a22:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
   11a26:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
				cpr->reference_conn_event_count;
   11a2a:	7da6      	ldrb	r6, [r4, #22]
   11a2c:	7d61      	ldrb	r1, [r4, #21]
   11a2e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   11a32:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   11a36:	7e26      	ldrb	r6, [r4, #24]
   11a38:	7de1      	ldrb	r1, [r4, #23]
   11a3a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   11a3e:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   11a42:	7ea6      	ldrb	r6, [r4, #26]
   11a44:	7e61      	ldrb	r1, [r4, #25]
   11a46:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   11a4a:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   11a4e:	7f26      	ldrb	r6, [r4, #28]
   11a50:	7ee1      	ldrb	r1, [r4, #27]
   11a52:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   11a56:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   11a5a:	7fa6      	ldrb	r6, [r4, #30]
   11a5c:	7f61      	ldrb	r1, [r4, #29]
   11a5e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   11a62:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   11a66:	7fe1      	ldrb	r1, [r4, #31]
   11a68:	f894 6020 	ldrb.w	r6, [r4, #32]
   11a6c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   11a70:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   11a74:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   11a78:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
   11a7c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
   11a80:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
			if ((conn->llcp_conn_param.interval !=
   11a84:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
   11a88:	6a41      	ldr	r1, [r0, #36]	; 0x24
   11a8a:	428c      	cmp	r4, r1
   11a8c:	d10e      	bne.n	11aac <isr_rx_conn_pkt_ctrl+0x7e4>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   11a8e:	8c84      	ldrh	r4, [r0, #36]	; 0x24
   11a90:	f240 41e2 	movw	r1, #1250	; 0x4e2
   11a94:	4361      	muls	r1, r4
   11a96:	f242 7410 	movw	r4, #10000	; 0x2710
   11a9a:	fb04 130e 	mla	r3, r4, lr, r1
   11a9e:	3b01      	subs	r3, #1
   11aa0:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
   11aa4:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   11aa6:	b29b      	uxth	r3, r3
   11aa8:	4299      	cmp	r1, r3
   11aaa:	d005      	beq.n	11ab8 <isr_rx_conn_pkt_ctrl+0x7f0>
				*rx_enqueue = 1;
   11aac:	2301      	movs	r3, #1
   11aae:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
   11ab0:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   11ab4:	2103      	movs	r1, #3
   11ab6:	e772      	b.n	1199e <isr_rx_conn_pkt_ctrl+0x6d6>
				conn->llcp_conn_param.status = 0;
   11ab8:	2300      	movs	r3, #0
   11aba:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
   11abe:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
   11ac2:	2101      	movs	r1, #1
   11ac4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   11ac8:	e769      	b.n	1199e <isr_rx_conn_pkt_ctrl+0x6d6>
		if (_radio.conn_curr->role ||
   11aca:	4bc1      	ldr	r3, [pc, #772]	; (11dd0 <isr_rx_conn_pkt_ctrl+0xb08>)
   11acc:	f8d3 5cfc 	ldr.w	r5, [r3, #3324]	; 0xcfc
   11ad0:	f995 301d 	ldrsb.w	r3, [r5, #29]
   11ad4:	2b00      	cmp	r3, #0
   11ad6:	f2c0 8478 	blt.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
   11ada:	7a41      	ldrb	r1, [r0, #9]
   11adc:	2010      	movs	r0, #16
   11ade:	f7fb fe5f 	bl	d7a0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   11ae2:	2800      	cmp	r0, #0
   11ae4:	f000 8471 	beq.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		if (!_radio.conn_curr->role &&
   11ae8:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
   11aec:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   11af0:	429a      	cmp	r2, r3
   11af2:	f43f acb8 	beq.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
		    (_radio.conn_curr->llcp_conn_param.state ==
   11af6:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
   11afa:	f003 0307 	and.w	r3, r3, #7
   11afe:	2b04      	cmp	r3, #4
   11b00:	f47f acb1 	bne.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
			if ((cpr->interval_min < 6) ||
   11b04:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   11b08:	fa1f f28e 	uxth.w	r2, lr
   11b0c:	2a05      	cmp	r2, #5
   11b0e:	d91b      	bls.n	11b48 <isr_rx_conn_pkt_ctrl+0x880>
			    (cpr->interval_max > 3200) ||
   11b10:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   11b12:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   11b16:	d817      	bhi.n	11b48 <isr_rx_conn_pkt_ctrl+0x880>
			    (cpr->interval_max > 3200) ||
   11b18:	429a      	cmp	r2, r3
   11b1a:	d815      	bhi.n	11b48 <isr_rx_conn_pkt_ctrl+0x880>
			    (cpr->latency > 499) ||
   11b1c:	8a27      	ldrh	r7, [r4, #16]
   11b1e:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
   11b20:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   11b24:	d210      	bcs.n	11b48 <isr_rx_conn_pkt_ctrl+0x880>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   11b26:	8a66      	ldrh	r6, [r4, #18]
   11b28:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
   11b2a:	f1a0 010a 	sub.w	r1, r0, #10
   11b2e:	b289      	uxth	r1, r1
   11b30:	f640 4c76 	movw	ip, #3190	; 0xc76
   11b34:	4561      	cmp	r1, ip
   11b36:	d807      	bhi.n	11b48 <isr_rx_conn_pkt_ctrl+0x880>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   11b38:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   11b3c:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
   11b40:	da02      	bge.n	11b48 <isr_rx_conn_pkt_ctrl+0x880>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   11b42:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   11b44:	4293      	cmp	r3, r2
   11b46:	d203      	bcs.n	11b50 <isr_rx_conn_pkt_ctrl+0x888>
				nack = reject_ext_ind_send(conn,
   11b48:	221e      	movs	r2, #30
   11b4a:	2110      	movs	r1, #16
   11b4c:	4628      	mov	r0, r5
   11b4e:	e683      	b.n	11858 <isr_rx_conn_pkt_ctrl+0x590>
			_radio.conn_curr->procedure_expire = 0;
   11b50:	2000      	movs	r0, #0
   11b52:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
   11b56:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   11b5a:	f8a5 70c6 	strh.w	r7, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   11b5e:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
   11b62:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   11b66:	7da2      	ldrb	r2, [r4, #22]
   11b68:	7d63      	ldrb	r3, [r4, #21]
   11b6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   11b6e:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   11b72:	7e22      	ldrb	r2, [r4, #24]
   11b74:	7de3      	ldrb	r3, [r4, #23]
   11b76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   11b7a:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   11b7e:	7ea2      	ldrb	r2, [r4, #26]
   11b80:	7e63      	ldrb	r3, [r4, #25]
   11b82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   11b86:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   11b8a:	7f22      	ldrb	r2, [r4, #28]
   11b8c:	7ee3      	ldrb	r3, [r4, #27]
   11b8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   11b92:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   11b96:	7fa2      	ldrb	r2, [r4, #30]
   11b98:	7f63      	ldrb	r3, [r4, #29]
   11b9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   11b9e:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   11ba2:	f894 2020 	ldrb.w	r2, [r4, #32]
   11ba6:	7fe3      	ldrb	r3, [r4, #31]
   11ba8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   11bac:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   11bb0:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   11bb4:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   11bb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   11bbc:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   11bc0:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   11bc4:	2201      	movs	r2, #1
   11bc6:	f362 0302 	bfi	r3, r2, #0, #3
   11bca:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   11bce:	e43a      	b.n	11446 <isr_rx_conn_pkt_ctrl+0x17e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   11bd0:	7a41      	ldrb	r1, [r0, #9]
   11bd2:	2011      	movs	r0, #17
   11bd4:	f7fb fde4 	bl	d7a0 <pdu_len_cmp>
   11bd8:	2800      	cmp	r0, #0
   11bda:	f000 83f6 	beq.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
	} else if (_radio.conn_curr->llcp_phy.ack !=
   11bde:	4a7c      	ldr	r2, [pc, #496]	; (11dd0 <isr_rx_conn_pkt_ctrl+0xb08>)
   11be0:	f8d2 3cfc 	ldr.w	r3, [r2, #3324]	; 0xcfc
   11be4:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
   11be8:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
   11bec:	4281      	cmp	r1, r0
   11bee:	7b21      	ldrb	r1, [r4, #12]
   11bf0:	d027      	beq.n	11c42 <isr_rx_conn_pkt_ctrl+0x97a>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
   11bf2:	2916      	cmp	r1, #22
   11bf4:	f47f ac37 	bne.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
		if (rej_ext_ind->error_code != 0x23) {
   11bf8:	7b61      	ldrb	r1, [r4, #13]
   11bfa:	2923      	cmp	r1, #35	; 0x23
   11bfc:	d00e      	beq.n	11c1c <isr_rx_conn_pkt_ctrl+0x954>
				_radio.conn_curr->phy_tx;
   11bfe:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
   11c02:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   11c06:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
   11c0a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   11c0e:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
   11c12:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
   11c14:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
   11c18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
   11c1c:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
   11c20:	0792      	lsls	r2, r2, #30
   11c22:	f57f ac20 	bpl.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   11c26:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
   11c28:	72e1      	strb	r1, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   11c2a:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
   11c2c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   11c30:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   11c34:	7322      	strb	r2, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
   11c36:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   11c3a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11c3e:	7363      	strb	r3, [r4, #13]
   11c40:	e43e      	b.n	114c0 <isr_rx_conn_pkt_ctrl+0x1f8>
		   _radio.conn_curr->llcp_conn_param.req) {
   11c42:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   11c46:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
   11c4a:	42b8      	cmp	r0, r7
   11c4c:	d067      	beq.n	11d1e <isr_rx_conn_pkt_ctrl+0xa56>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
   11c4e:	290f      	cmp	r1, #15
   11c50:	f47f ac09 	bne.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
   11c54:	f993 001d 	ldrsb.w	r0, [r3, #29]
   11c58:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
   11c5a:	2800      	cmp	r0, #0
   11c5c:	db34      	blt.n	11cc8 <isr_rx_conn_pkt_ctrl+0xa00>
   11c5e:	291a      	cmp	r1, #26
   11c60:	d132      	bne.n	11cc8 <isr_rx_conn_pkt_ctrl+0xa00>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11c62:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   11c66:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
   11c6a:	4294      	cmp	r4, r2
   11c6c:	f47f ab6e 	bne.w	1134c <isr_rx_conn_pkt_ctrl+0x84>
				conn->llcp_conn_param.state =
   11c70:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   11c74:	2105      	movs	r1, #5
   11c76:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
   11c7a:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
   11c7e:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
   11c82:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
   11c86:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
   11c8a:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
   11c8e:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   11c92:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
   11c96:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
   11c9a:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
   11c9c:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   11ca0:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
   11ca4:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
   11ca8:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
   11caa:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
   11cae:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
   11cb0:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
   11cb4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
   11cb8:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_type = LLCP_CONN_UPD;
   11cbc:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				conn->llcp_ack--;
   11cc0:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				break;
   11cc4:	f7ff bbbf 	b.w	11446 <isr_rx_conn_pkt_ctrl+0x17e>
	else if (rej_ext_ind->error_code != 0x23) {
   11cc8:	2923      	cmp	r1, #35	; 0x23
   11cca:	d011      	beq.n	11cf0 <isr_rx_conn_pkt_ctrl+0xa28>
		LL_ASSERT(_radio.conn_upd == conn);
   11ccc:	f8d2 6d70 	ldr.w	r6, [r2, #3440]	; 0xd70
   11cd0:	42b3      	cmp	r3, r6
   11cd2:	f47f ab3b 	bne.w	1134c <isr_rx_conn_pkt_ctrl+0x84>
		_radio.conn_upd = NULL;
   11cd6:	2600      	movs	r6, #0
		if (conn->role) {
   11cd8:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
   11cda:	f8c2 6d70 	str.w	r6, [r2, #3440]	; 0xd70
			conn->slave.ticks_to_offset =
   11cde:	bfb8      	it	lt
   11ce0:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
   11ce4:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
   11ce8:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
   11cec:	bfb8      	it	lt
   11cee:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
   11cf0:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   11cf4:	0717      	lsls	r7, r2, #28
   11cf6:	f57f abb6 	bpl.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
	cp->status = rej_ext_ind->error_code;
   11cfa:	72e1      	strb	r1, [r4, #11]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   11cfc:	2208      	movs	r2, #8
	cp->latency = conn->latency;
   11cfe:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   11d00:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
   11d02:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
   11d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
   11d06:	81a2      	strh	r2, [r4, #12]
	cp->timeout = conn->supervision_reload *
   11d08:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
   11d0a:	237d      	movs	r3, #125	; 0x7d
   11d0c:	4353      	muls	r3, r2
	cp->latency = conn->latency;
   11d0e:	81e1      	strh	r1, [r4, #14]
	cp->timeout = conn->supervision_reload *
   11d10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11d14:	fb93 f3f2 	sdiv	r3, r3, r2
   11d18:	8223      	strh	r3, [r4, #16]
   11d1a:	f7ff bbd1 	b.w	114c0 <isr_rx_conn_pkt_ctrl+0x1f8>
		   _radio.conn_curr->llcp_length.req) {
   11d1e:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
   11d22:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
   11d26:	4290      	cmp	r0, r2
   11d28:	d01a      	beq.n	11d60 <isr_rx_conn_pkt_ctrl+0xa98>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   11d2a:	2914      	cmp	r1, #20
   11d2c:	f47f ab9b 	bne.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
		conn->llcp_length.ack = conn->llcp_length.req;
   11d30:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->pause_tx = 0;
   11d34:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
		conn->procedure_expire = 0;
   11d38:	2000      	movs	r0, #0
		conn->pause_tx = 0;
   11d3a:	f360 02c3 	bfi	r2, r0, #3, #1
   11d3e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
   11d42:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
   11d44:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
   11d48:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   11d4a:	2215      	movs	r2, #21
   11d4c:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   11d4e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
   11d50:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   11d52:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
   11d54:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
   11d56:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
   11d58:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
   11d5a:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
   11d5c:	8263      	strh	r3, [r4, #18]
   11d5e:	e566      	b.n	1182e <isr_rx_conn_pkt_ctrl+0x566>
		switch (rej_ext_ind->reject_opcode) {
   11d60:	2903      	cmp	r1, #3
   11d62:	f47f ab80 	bne.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
			_radio.conn_curr->pause_rx = 0;
   11d66:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   11d6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   11d6e:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
   11d72:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
   11d74:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
   11d78:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   11d7c:	230d      	movs	r3, #13
   11d7e:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
   11d80:	7b63      	ldrb	r3, [r4, #13]
   11d82:	7323      	strb	r3, [r4, #12]
   11d84:	e553      	b.n	1182e <isr_rx_conn_pkt_ctrl+0x566>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
   11d86:	7a41      	ldrb	r1, [r0, #9]
   11d88:	2012      	movs	r0, #18
   11d8a:	f7fb fd09 	bl	d7a0 <pdu_len_cmp>
   11d8e:	2800      	cmp	r0, #0
   11d90:	f000 831b 	beq.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		nack = ping_resp_send(_radio.conn_curr);
   11d94:	480e      	ldr	r0, [pc, #56]	; (11dd0 <isr_rx_conn_pkt_ctrl+0xb08>)
   11d96:	f8d0 4cfc 	ldr.w	r4, [r0, #3324]	; 0xcfc
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11d9a:	f600 5044 	addw	r0, r0, #3396	; 0xd44
   11d9e:	f7f8 ffbc 	bl	ad1a <mem_acquire>
	if (!node_tx) {
   11da2:	4601      	mov	r1, r0
   11da4:	2800      	cmp	r0, #0
   11da6:	f43f ac7e 	beq.w	116a6 <isr_rx_conn_pkt_ctrl+0x3de>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11daa:	7903      	ldrb	r3, [r0, #4]
   11dac:	f043 0303 	orr.w	r3, r3, #3
   11db0:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   11db2:	2301      	movs	r3, #1
   11db4:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   11db6:	2313      	movs	r3, #19
   11db8:	e4b0      	b.n	1171c <isr_rx_conn_pkt_ctrl+0x454>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
   11dba:	7a41      	ldrb	r1, [r0, #9]
   11dbc:	2013      	movs	r0, #19
   11dbe:	f7fb fcef 	bl	d7a0 <pdu_len_cmp>
   11dc2:	2800      	cmp	r0, #0
   11dc4:	f000 8301 	beq.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		_radio.conn_curr->procedure_expire = 0;
   11dc8:	4b01      	ldr	r3, [pc, #4]	; (11dd0 <isr_rx_conn_pkt_ctrl+0xb08>)
   11dca:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
   11dce:	e44e      	b.n	1166e <isr_rx_conn_pkt_ctrl+0x3a6>
   11dd0:	20000c08 	.word	0x20000c08
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   11dd4:	7a41      	ldrb	r1, [r0, #9]
   11dd6:	2007      	movs	r0, #7
   11dd8:	f7fb fce2 	bl	d7a0 <pdu_len_cmp>
   11ddc:	2800      	cmp	r0, #0
   11dde:	f000 82f4 	beq.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
   11de2:	4ad4      	ldr	r2, [pc, #848]	; (12134 <isr_rx_conn_pkt_ctrl+0xe6c>)
   11de4:	f8d2 3cfc 	ldr.w	r3, [r2, #3324]	; 0xcfc
   11de8:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
   11dec:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
   11df0:	42b1      	cmp	r1, r6
   11df2:	4611      	mov	r1, r2
   11df4:	d02c      	beq.n	11e50 <isr_rx_conn_pkt_ctrl+0xb88>
			conn->llcp_conn_param.disabled = 1;
   11df6:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
   11dfa:	f040 0010 	orr.w	r0, r0, #16
   11dfe:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
   11e02:	f993 001d 	ldrsb.w	r0, [r3, #29]
   11e06:	2800      	cmp	r0, #0
   11e08:	f6bf af2b 	bge.w	11c62 <isr_rx_conn_pkt_ctrl+0x99a>
			LL_ASSERT(_radio.conn_upd == conn);
   11e0c:	f8d2 2d70 	ldr.w	r2, [r2, #3440]	; 0xd70
   11e10:	4293      	cmp	r3, r2
   11e12:	f47f aa9b 	bne.w	1134c <isr_rx_conn_pkt_ctrl+0x84>
			_radio.conn_upd = NULL;
   11e16:	2200      	movs	r2, #0
   11e18:	f8c1 2d70 	str.w	r2, [r1, #3440]	; 0xd70
			if (!conn->llcp_conn_param.cmd) {
   11e1c:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   11e20:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
   11e24:	0716      	lsls	r6, r2, #28
   11e26:	f57f ab1e 	bpl.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   11e2a:	2208      	movs	r2, #8
   11e2c:	7122      	strb	r2, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   11e2e:	221a      	movs	r2, #26
   11e30:	72e2      	strb	r2, [r4, #11]
			cp->interval = conn->conn_interval;
   11e32:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
			cp->latency = conn->latency;
   11e34:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
   11e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
			cp->interval = conn->conn_interval;
   11e38:	81a2      	strh	r2, [r4, #12]
			cp->timeout = conn->supervision_reload *
   11e3a:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
   11e3c:	237d      	movs	r3, #125	; 0x7d
   11e3e:	4353      	muls	r3, r2
			cp->latency = conn->latency;
   11e40:	81e0      	strh	r0, [r4, #14]
			cp->timeout = conn->supervision_reload *
   11e42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11e46:	fb93 f3f2 	sdiv	r3, r3, r2
   11e4a:	8223      	strh	r3, [r4, #16]
   11e4c:	f7ff bbb5 	b.w	115ba <isr_rx_conn_pkt_ctrl+0x2f2>
		} else if (_radio.conn_curr->llcp_length.req !=
   11e50:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
   11e54:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
   11e58:	4290      	cmp	r0, r2
   11e5a:	d009      	beq.n	11e70 <isr_rx_conn_pkt_ctrl+0xba8>
			_radio.conn_curr->llcp_length.ack =
   11e5c:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
   11e60:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   11e64:	f36f 02c3 	bfc	r2, #3, #1
   11e68:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   11e6c:	f7ff bba5 	b.w	115ba <isr_rx_conn_pkt_ctrl+0x2f2>
		} else if (_radio.conn_curr->llcp_phy.req !=
   11e70:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
   11e74:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
   11e78:	4290      	cmp	r0, r2
   11e7a:	d01b      	beq.n	11eb4 <isr_rx_conn_pkt_ctrl+0xbec>
			_radio.conn_curr->llcp_phy.ack =
   11e7c:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
   11e80:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
   11e84:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
   11e88:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
   11e8c:	f362 0002 	bfi	r0, r2, #0, #3
   11e90:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
   11e94:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
   11e98:	0780      	lsls	r0, r0, #30
   11e9a:	d50f      	bpl.n	11ebc <isr_rx_conn_pkt_ctrl+0xbf4>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   11e9c:	200c      	movs	r0, #12
   11e9e:	7120      	strb	r0, [r4, #4]
				p->status = 0;
   11ea0:	2000      	movs	r0, #0
   11ea2:	72e0      	strb	r0, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
   11ea4:	7322      	strb	r2, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
   11ea6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   11eaa:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11eae:	7363      	strb	r3, [r4, #13]
   11eb0:	f7ff bb83 	b.w	115ba <isr_rx_conn_pkt_ctrl+0x2f2>
			switch (llctrl->unknown_rsp.type) {
   11eb4:	7b23      	ldrb	r3, [r4, #12]
   11eb6:	2b12      	cmp	r3, #18
   11eb8:	f47f ab7f 	bne.w	115ba <isr_rx_conn_pkt_ctrl+0x2f2>
		_radio.conn_curr->procedure_expire = 0;
   11ebc:	f8d1 3cfc 	ldr.w	r3, [r1, #3324]	; 0xcfc
   11ec0:	f7ff bbd5 	b.w	1166e <isr_rx_conn_pkt_ctrl+0x3a6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
   11ec4:	7a41      	ldrb	r1, [r0, #9]
   11ec6:	2014      	movs	r0, #20
   11ec8:	f7fb fc6a 	bl	d7a0 <pdu_len_cmp>
   11ecc:	2800      	cmp	r0, #0
   11ece:	f000 827c 	beq.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   11ed2:	2f14      	cmp	r7, #20
   11ed4:	d125      	bne.n	11f22 <isr_rx_conn_pkt_ctrl+0xc5a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11ed6:	4898      	ldr	r0, [pc, #608]	; (12138 <isr_rx_conn_pkt_ctrl+0xe70>)
   11ed8:	f7f8 ff1f 	bl	ad1a <mem_acquire>
		if (!node_tx) {
   11edc:	4606      	mov	r6, r0
   11ede:	2800      	cmp	r0, #0
   11ee0:	f43f abe1 	beq.w	116a6 <isr_rx_conn_pkt_ctrl+0x3de>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   11ee4:	f8df 824c 	ldr.w	r8, [pc, #588]	; 12134 <isr_rx_conn_pkt_ctrl+0xe6c>
   11ee8:	f8d8 3cfc 	ldr.w	r3, [r8, #3324]	; 0xcfc
	    ((_radio.conn_curr->llcp_length.req ==
   11eec:	f893 70e8 	ldrb.w	r7, [r3, #232]	; 0xe8
	if (/* Local idle, and Peer request then complete the Peer procedure
   11ef0:	f893 c0e9 	ldrb.w	ip, [r3, #233]	; 0xe9
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   11ef4:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   11ef6:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
   11ef8:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
   11efa:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
	    ((_radio.conn_curr->llcp_length.req ==
   11efe:	9701      	str	r7, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   11f00:	45bc      	cmp	ip, r7
   11f02:	46c3      	mov	fp, r8
   11f04:	f894 c00b 	ldrb.w	ip, [r4, #11]
   11f08:	d10d      	bne.n	11f26 <isr_rx_conn_pkt_ctrl+0xc5e>
	      _radio.conn_curr->llcp_length.ack) &&
   11f0a:	f1bc 0f14 	cmp.w	ip, #20
   11f0e:	d016      	beq.n	11f3e <isr_rx_conn_pkt_ctrl+0xc76>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
   11f10:	f1bc 0f15 	cmp.w	ip, #21
   11f14:	f47f aa1a 	bne.w	1134c <isr_rx_conn_pkt_ctrl+0x84>
	eff_tx_time = _radio.conn_curr->max_tx_time;
   11f18:	46f0      	mov	r8, lr
	eff_rx_time = _radio.conn_curr->max_rx_time;
   11f1a:	4681      	mov	r9, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   11f1c:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   11f1e:	4692      	mov	sl, r2
   11f20:	e061      	b.n	11fe6 <isr_rx_conn_pkt_ctrl+0xd1e>
	struct radio_pdu_node_tx *node_tx = NULL;
   11f22:	2600      	movs	r6, #0
   11f24:	e7de      	b.n	11ee4 <isr_rx_conn_pkt_ctrl+0xc1c>
		 LLCP_LENGTH_STATE_REQ) ||
   11f26:	f893 70ea 	ldrb.w	r7, [r3, #234]	; 0xea
   11f2a:	f007 0703 	and.w	r7, r7, #3
	      _radio.conn_curr->llcp_length.ack) &&
   11f2e:	2f01      	cmp	r7, #1
   11f30:	d9eb      	bls.n	11f0a <isr_rx_conn_pkt_ctrl+0xc42>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   11f32:	2f02      	cmp	r7, #2
   11f34:	d1ec      	bne.n	11f10 <isr_rx_conn_pkt_ctrl+0xc48>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
   11f36:	f1ac 0714 	sub.w	r7, ip, #20
   11f3a:	2f01      	cmp	r7, #1
   11f3c:	d8e8      	bhi.n	11f10 <isr_rx_conn_pkt_ctrl+0xc48>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   11f3e:	89a7      	ldrh	r7, [r4, #12]
   11f40:	2f1a      	cmp	r7, #26
   11f42:	d969      	bls.n	12018 <isr_rx_conn_pkt_ctrl+0xd50>
			eff_tx_octets = min(lr->max_rx_octets,
   11f44:	f8b3 c02c 	ldrh.w	ip, [r3, #44]	; 0x2c
   11f48:	4567      	cmp	r7, ip
   11f4a:	bf28      	it	cs
   11f4c:	4667      	movcs	r7, ip
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   11f4e:	f8b4 a010 	ldrh.w	sl, [r4, #16]
   11f52:	f1ba 0f1a 	cmp.w	sl, #26
   11f56:	d961      	bls.n	1201c <isr_rx_conn_pkt_ctrl+0xd54>
			eff_rx_octets = min(lr->max_tx_octets,
   11f58:	f1ba 0ffb 	cmp.w	sl, #251	; 0xfb
   11f5c:	bf28      	it	cs
   11f5e:	f04f 0afb 	movcs.w	sl, #251	; 0xfb
		if (lr->max_rx_time >=
   11f62:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
   11f66:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   11f6a:	d359      	bcc.n	12020 <isr_rx_conn_pkt_ctrl+0xd58>
			eff_tx_time = min(lr->max_rx_time,
   11f6c:	f8b3 8032 	ldrh.w	r8, [r3, #50]	; 0x32
   11f70:	45e0      	cmp	r8, ip
   11f72:	bf28      	it	cs
   11f74:	46e0      	movcs	r8, ip
		if (lr->max_tx_time >=
   11f76:	f8b4 9012 	ldrh.w	r9, [r4, #18]
   11f7a:	f5b9 7fa4 	cmp.w	r9, #328	; 0x148
   11f7e:	d351      	bcc.n	12024 <isr_rx_conn_pkt_ctrl+0xd5c>
			eff_rx_time = min(lr->max_tx_time,
   11f80:	f244 2c90 	movw	ip, #17040	; 0x4290
   11f84:	45e1      	cmp	r9, ip
   11f86:	bf28      	it	cs
   11f88:	46e1      	movcs	r9, ip
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
   11f8a:	4552      	cmp	r2, sl
   11f8c:	d04c      	beq.n	12028 <isr_rx_conn_pkt_ctrl+0xd60>
			free_count_rx = packet_rx_acquired_count_get() +
   11f8e:	f7fb fc4f 	bl	d830 <packet_rx_acquired_count_get>
   11f92:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
   11f94:	f8db 0d18 	ldr.w	r0, [fp, #3352]	; 0xd18
   11f98:	f7f8 feee 	bl	ad78 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
   11f9c:	4420      	add	r0, r4
   11f9e:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
   11fa0:	28ff      	cmp	r0, #255	; 0xff
   11fa2:	f63f a9d3 	bhi.w	1134c <isr_rx_conn_pkt_ctrl+0x84>
			if (_radio.packet_rx_data_count == free_count_rx) {
   11fa6:	f89b 3d22 	ldrb.w	r3, [fp, #3362]	; 0xd22
   11faa:	4283      	cmp	r3, r0
   11fac:	f040 8228 	bne.w	12400 <isr_rx_conn_pkt_ctrl+0x1138>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   11fb0:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
					(_radio.conn_curr->llcp_length.req - 1);
   11fb4:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   11fb8:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
   11fba:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
   11fbc:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
   11fc0:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
   11fc4:	f8a3 a0ec 	strh.w	sl, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
   11fc8:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
   11fcc:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
   11fd0:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
   11fd4:	f8a3 90f0 	strh.w	r9, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
   11fd8:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
   11fdc:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
   11fe0:	2303      	movs	r3, #3
   11fe2:	f88b 3014 	strb.w	r3, [fp, #20]
	if (node_tx) {
   11fe6:	2e00      	cmp	r6, #0
   11fe8:	f43f aa3d 	beq.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11fec:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
   11fee:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
   11ff2:	f8a6 a008 	strh.w	sl, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11ff6:	f043 0303 	orr.w	r3, r3, #3
   11ffa:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   11ffc:	2309      	movs	r3, #9
   11ffe:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   12000:	2315      	movs	r3, #21
   12002:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
   12004:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
   12006:	f8a6 900a 	strh.w	r9, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
   1200a:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
   1200e:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
   12010:	f7fd fd14 	bl	fa3c <ctrl_tx_enqueue>
   12014:	f7ff ba27 	b.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   12018:	460f      	mov	r7, r1
   1201a:	e798      	b.n	11f4e <isr_rx_conn_pkt_ctrl+0xc86>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   1201c:	4692      	mov	sl, r2
   1201e:	e7a0      	b.n	11f62 <isr_rx_conn_pkt_ctrl+0xc9a>
	eff_tx_time = _radio.conn_curr->max_tx_time;
   12020:	46f0      	mov	r8, lr
   12022:	e7a8      	b.n	11f76 <isr_rx_conn_pkt_ctrl+0xcae>
	eff_rx_time = _radio.conn_curr->max_rx_time;
   12024:	4681      	mov	r9, r0
   12026:	e7b0      	b.n	11f8a <isr_rx_conn_pkt_ctrl+0xcc2>
			_radio.conn_curr->llcp_length.ack =
   12028:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1202c:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
   12030:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
   12034:	f04f 0c00 	mov.w	ip, #0
			_radio.conn_curr->pause_tx = 0;
   12038:	f36c 02c3 	bfi	r2, ip, #3, #1
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
   1203c:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
   1203e:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
			_radio.conn_curr->pause_tx = 0;
   12042:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
   12046:	d103      	bne.n	12050 <isr_rx_conn_pkt_ctrl+0xd88>
   12048:	45c6      	cmp	lr, r8
   1204a:	d101      	bne.n	12050 <isr_rx_conn_pkt_ctrl+0xd88>
			    eff_tx_time == _radio.conn_curr->max_tx_time &&
   1204c:	4548      	cmp	r0, r9
   1204e:	d0ca      	beq.n	11fe6 <isr_rx_conn_pkt_ctrl+0xd1e>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
   12050:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
   12052:	f8a3 9036 	strh.w	r9, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
   12056:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
   1205a:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
   1205c:	f8a4 a00c 	strh.w	sl, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
   12060:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
   12062:	f8a4 900e 	strh.w	r9, [r4, #14]
			lr->max_tx_time = eff_tx_time;
   12066:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
   1206a:	702b      	strb	r3, [r5, #0]
   1206c:	e7bb      	b.n	11fe6 <isr_rx_conn_pkt_ctrl+0xd1e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
   1206e:	7a41      	ldrb	r1, [r0, #9]
   12070:	2016      	movs	r0, #22
   12072:	f7fb fb95 	bl	d7a0 <pdu_len_cmp>
   12076:	2800      	cmp	r0, #0
   12078:	f000 81a7 	beq.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		if (_radio.role == ROLE_MASTER) {
   1207c:	482d      	ldr	r0, [pc, #180]	; (12134 <isr_rx_conn_pkt_ctrl+0xe6c>)
   1207e:	7cc3      	ldrb	r3, [r0, #19]
   12080:	2b04      	cmp	r3, #4
   12082:	d15b      	bne.n	1213c <isr_rx_conn_pkt_ctrl+0xe74>
			if ((_radio.conn_curr->llcp_phy.ack !=
   12084:	f8d0 0cfc 	ldr.w	r0, [r0, #3324]	; 0xcfc
   12088:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
   1208c:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
   12090:	428b      	cmp	r3, r1
   12092:	d00a      	beq.n	120aa <isr_rx_conn_pkt_ctrl+0xde2>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   12094:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
   12098:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
   1209c:	3a01      	subs	r2, #1
   1209e:	2a02      	cmp	r2, #2
   120a0:	d803      	bhi.n	120aa <isr_rx_conn_pkt_ctrl+0xde2>
				nack = reject_ext_ind_send(_radio.conn_curr,
   120a2:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
   120a4:	2116      	movs	r1, #22
   120a6:	f7ff bbd7 	b.w	11858 <isr_rx_conn_pkt_ctrl+0x590>
			} else if (((_radio.conn_curr->llcp_req !=
   120aa:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
   120ae:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   120b2:	4295      	cmp	r5, r2
   120b4:	d003      	beq.n	120be <isr_rx_conn_pkt_ctrl+0xdf6>
				     _radio.conn_curr->llcp_ack) &&
   120b6:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
   120ba:	2a03      	cmp	r2, #3
   120bc:	d105      	bne.n	120ca <isr_rx_conn_pkt_ctrl+0xe02>
				     LLCP_ENCRYPTION)) ||
   120be:	f890 50c0 	ldrb.w	r5, [r0, #192]	; 0xc0
   120c2:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
   120c6:	4295      	cmp	r5, r2
   120c8:	d001      	beq.n	120ce <isr_rx_conn_pkt_ctrl+0xe06>
				nack = reject_ext_ind_send(_radio.conn_curr,
   120ca:	222a      	movs	r2, #42	; 0x2a
   120cc:	e7ea      	b.n	120a4 <isr_rx_conn_pkt_ctrl+0xddc>
				_radio.conn_curr->llcp_phy.state =
   120ce:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
   120d2:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
   120d4:	f042 0203 	orr.w	r2, r2, #3
   120d8:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
   120dc:	d116      	bne.n	1210c <isr_rx_conn_pkt_ctrl+0xe44>
					_radio.conn_curr->llcp_phy.ack--;
   120de:	3b01      	subs	r3, #1
   120e0:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
   120e4:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
   120e8:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
   120ec:	f36f 0341 	bfc	r3, #1, #1
   120f0:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
   120f4:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   120f8:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
   120fc:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
					_radio.conn_curr->llcp_phy.rx =
   12100:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   12104:	f362 1347 	bfi	r3, r2, #5, #3
   12108:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   1210c:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   12110:	7b62      	ldrb	r2, [r4, #13]
   12112:	f3c3 0182 	ubfx	r1, r3, #2, #3
   12116:	400a      	ands	r2, r1
   12118:	f362 0384 	bfi	r3, r2, #2, #3
   1211c:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   12120:	7b22      	ldrb	r2, [r4, #12]
   12122:	b2db      	uxtb	r3, r3
   12124:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   12128:	f362 1347 	bfi	r3, r2, #5, #3
   1212c:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
   12130:	f7ff b999 	b.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
   12134:	20000c08 	.word	0x20000c08
   12138:	2000194c 	.word	0x2000194c
			nack = phy_rsp_send(_radio.conn_curr, pdu_data_rx);
   1213c:	f8d0 5cfc 	ldr.w	r5, [r0, #3324]	; 0xcfc
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   12140:	f600 5044 	addw	r0, r0, #3396	; 0xd44
   12144:	f7f8 fde9 	bl	ad1a <mem_acquire>
	if (!node_tx) {
   12148:	4601      	mov	r1, r0
   1214a:	2800      	cmp	r0, #0
   1214c:	f43f aaab 	beq.w	116a6 <isr_rx_conn_pkt_ctrl+0x3de>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   12150:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   12154:	2202      	movs	r2, #2
   12156:	f362 0301 	bfi	r3, r2, #0, #2
   1215a:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
   1215e:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
   12162:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
   12166:	4293      	cmp	r3, r2
   12168:	d11a      	bne.n	121a0 <isr_rx_conn_pkt_ctrl+0xed8>
		conn->llcp_phy.ack--;
   1216a:	3b01      	subs	r3, #1
   1216c:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
   12170:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
			conn->phy_pref_tx;
   12174:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
		conn->llcp_phy.cmd = 0;
   12178:	f36f 0341 	bfc	r3, #1, #1
   1217c:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
   12180:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   12184:	f362 0384 	bfi	r3, r2, #2, #3
			conn->phy_pref_rx;
   12188:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn->llcp_phy.rx =
   1218c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   12190:	f362 1347 	bfi	r3, r2, #5, #3
   12194:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
   12198:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
   1219c:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
   121a0:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   121a4:	7b62      	ldrb	r2, [r4, #13]
   121a6:	f3c3 0082 	ubfx	r0, r3, #2, #3
   121aa:	4002      	ands	r2, r0
   121ac:	f362 0384 	bfi	r3, r2, #2, #3
   121b0:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
   121b4:	7b22      	ldrb	r2, [r4, #12]
   121b6:	b2db      	uxtb	r3, r3
   121b8:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   121bc:	f362 1347 	bfi	r3, r2, #5, #3
   121c0:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   121c4:	790b      	ldrb	r3, [r1, #4]
   121c6:	f043 0303 	orr.w	r3, r3, #3
   121ca:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   121cc:	2303      	movs	r3, #3
   121ce:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   121d0:	2317      	movs	r3, #23
   121d2:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   121d4:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   121d8:	f3c3 0302 	ubfx	r3, r3, #0, #3
   121dc:	720b      	strb	r3, [r1, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   121de:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   121e2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   121e6:	724b      	strb	r3, [r1, #9]
   121e8:	f7ff ba6f 	b.w	116ca <isr_rx_conn_pkt_ctrl+0x402>
		if (_radio.conn_curr->role ||
   121ec:	4e8b      	ldr	r6, [pc, #556]	; (1241c <isr_rx_conn_pkt_ctrl+0x1154>)
   121ee:	f8d6 5cfc 	ldr.w	r5, [r6, #3324]	; 0xcfc
   121f2:	f995 301d 	ldrsb.w	r3, [r5, #29]
   121f6:	2b00      	cmp	r3, #0
   121f8:	f2c0 80e7 	blt.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
   121fc:	7a41      	ldrb	r1, [r0, #9]
   121fe:	2017      	movs	r0, #23
   12200:	f7fb face 	bl	d7a0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   12204:	2800      	cmp	r0, #0
   12206:	f000 80e0 	beq.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		if ((_radio.role == ROLE_MASTER) &&
   1220a:	7cf3      	ldrb	r3, [r6, #19]
   1220c:	2b04      	cmp	r3, #4
   1220e:	f47f a92a 	bne.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
   12212:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
   12216:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
   1221a:	429a      	cmp	r2, r3
   1221c:	f43f a923 	beq.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
		    (_radio.conn_curr->llcp_phy.state ==
   12220:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
   12224:	f003 0203 	and.w	r2, r3, #3
   12228:	2a02      	cmp	r2, #2
   1222a:	f47f a91c 	bne.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
   1222e:	f043 0303 	orr.w	r3, r3, #3
   12232:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   12236:	7b62      	ldrb	r2, [r4, #13]
   12238:	f3c3 0182 	ubfx	r1, r3, #2, #3
   1223c:	400a      	ands	r2, r1
   1223e:	f362 0384 	bfi	r3, r2, #2, #3
   12242:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   12246:	7b22      	ldrb	r2, [r4, #12]
   12248:	b2db      	uxtb	r3, r3
   1224a:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   1224e:	f362 1347 	bfi	r3, r2, #5, #3
   12252:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
   12256:	f7ff b8be 	b.w	113d6 <isr_rx_conn_pkt_ctrl+0x10e>
		if (!_radio.conn_curr->role ||
   1225a:	4b70      	ldr	r3, [pc, #448]	; (1241c <isr_rx_conn_pkt_ctrl+0x1154>)
   1225c:	f8d3 6cfc 	ldr.w	r6, [r3, #3324]	; 0xcfc
   12260:	f996 301d 	ldrsb.w	r3, [r6, #29]
   12264:	2b00      	cmp	r3, #0
   12266:	f280 80b0 	bge.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
   1226a:	7a41      	ldrb	r1, [r0, #9]
   1226c:	2018      	movs	r0, #24
   1226e:	f7fb fa97 	bl	d7a0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   12272:	2800      	cmp	r0, #0
   12274:	f000 80a9 	beq.w	123ca <isr_rx_conn_pkt_ctrl+0x1102>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   12278:	7b27      	ldrb	r7, [r4, #12]
   1227a:	7b62      	ldrb	r2, [r4, #13]
   1227c:	ea47 0002 	orr.w	r0, r7, r2
   12280:	f010 0007 	ands.w	r0, r0, #7
   12284:	d125      	bne.n	122d2 <isr_rx_conn_pkt_ctrl+0x100a>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   12286:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
   1228a:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
   1228e:	4293      	cmp	r3, r2
   12290:	f43f a8e9 	beq.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   12294:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   12298:	f003 0303 	and.w	r3, r3, #3
   1229c:	2b02      	cmp	r3, #2
   1229e:	f47f a8e2 	bne.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
		if (!conn->llcp_phy.cmd) {
   122a2:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   122a6:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
   122aa:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
   122ac:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
   122b0:	f57f a8d9 	bpl.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   122b4:	230c      	movs	r3, #12
		upd->status = 0;
   122b6:	72e0      	strb	r0, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   122b8:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
   122ba:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
   122be:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   122c2:	7323      	strb	r3, [r4, #12]
		upd->rx = conn->phy_rx;
   122c4:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
   122c8:	f3c3 0302 	ubfx	r3, r3, #0, #3
   122cc:	7363      	strb	r3, [r4, #13]
   122ce:	f7ff baae 	b.w	1182e <isr_rx_conn_pkt_ctrl+0x566>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
   122d2:	89e0      	ldrh	r0, [r4, #14]
   122d4:	8c73      	ldrh	r3, [r6, #34]	; 0x22
   122d6:	1ac3      	subs	r3, r0, r3
   122d8:	041b      	lsls	r3, r3, #16
   122da:	f100 809a 	bmi.w	12412 <isr_rx_conn_pkt_ctrl+0x114a>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   122de:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
   122e2:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
   122e6:	428b      	cmp	r3, r1
   122e8:	f47f a830 	bne.w	1134c <isr_rx_conn_pkt_ctrl+0x84>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   122ec:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
   122f0:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
   122f4:	42a3      	cmp	r3, r4
   122f6:	d014      	beq.n	12322 <isr_rx_conn_pkt_ctrl+0x105a>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   122f8:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   122fc:	f003 0303 	and.w	r3, r3, #3
   12300:	2b02      	cmp	r3, #2
   12302:	d10e      	bne.n	12322 <isr_rx_conn_pkt_ctrl+0x105a>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   12304:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   12308:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1230c:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
   12310:	f3c3 0340 	ubfx	r3, r3, #1, #1
   12314:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
   12318:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1231a:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
   1231e:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
   12322:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
   12326:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
   1232a:	f002 0207 	and.w	r2, r2, #7
   1232e:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
   12332:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
   12336:	f36f 0300 	bfc	r3, #0, #1
   1233a:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
   1233e:	2008      	movs	r0, #8
	conn->llcp_ack--;
   12340:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
   12342:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
   12346:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
   1234a:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
   1234e:	2b00      	cmp	r3, #0
   12350:	f43f a889 	beq.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
   12354:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
   12358:	f362 0302 	bfi	r3, r2, #0, #3
   1235c:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
   12360:	f7ff b881 	b.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
		if (_radio.conn_curr->role ||
   12364:	4e2d      	ldr	r6, [pc, #180]	; (1241c <isr_rx_conn_pkt_ctrl+0x1154>)
   12366:	f8d6 5cfc 	ldr.w	r5, [r6, #3324]	; 0xcfc
   1236a:	f995 301d 	ldrsb.w	r3, [r5, #29]
   1236e:	2b00      	cmp	r3, #0
   12370:	db2b      	blt.n	123ca <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
   12372:	7a41      	ldrb	r1, [r0, #9]
   12374:	2019      	movs	r0, #25
   12376:	f7fb fa13 	bl	d7a0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   1237a:	b330      	cbz	r0, 123ca <isr_rx_conn_pkt_ctrl+0x1102>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
   1237c:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
   12380:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   12384:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
   12388:	7b22      	ldrb	r2, [r4, #12]
   1238a:	f003 0307 	and.w	r3, r3, #7
   1238e:	4213      	tst	r3, r2
   12390:	f43f a869 	beq.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
			if (conn->llcp_req != conn->llcp_ack) {
   12394:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   12398:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   1239c:	429a      	cmp	r2, r3
   1239e:	f47f a862 	bne.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
			memcpy(&conn->llcp.chan_map.chm[0],
   123a2:	2205      	movs	r2, #5
   123a4:	f606 5102 	addw	r1, r6, #3330	; 0xd02
   123a8:	f105 0079 	add.w	r0, r5, #121	; 0x79
   123ac:	f7ee fa06 	bl	7bc <memcpy>
			conn->llcp.chan_map.initiate = 1;
   123b0:	2301      	movs	r3, #1
   123b2:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
   123b6:	2302      	movs	r3, #2
   123b8:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
   123bc:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   123c0:	3b01      	subs	r3, #1
   123c2:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
   123c6:	f7ff b84e 	b.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
		nack = unknown_rsp_send(_radio.conn_curr,
   123ca:	4814      	ldr	r0, [pc, #80]	; (1241c <isr_rx_conn_pkt_ctrl+0x1154>)
   123cc:	f8d0 4cfc 	ldr.w	r4, [r0, #3324]	; 0xcfc
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   123d0:	f600 5044 	addw	r0, r0, #3396	; 0xd44
   123d4:	f7f8 fca1 	bl	ad1a <mem_acquire>
	if (!node_tx) {
   123d8:	4601      	mov	r1, r0
   123da:	2800      	cmp	r0, #0
   123dc:	f43f a963 	beq.w	116a6 <isr_rx_conn_pkt_ctrl+0x3de>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   123e0:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
   123e2:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   123e4:	f043 0303 	orr.w	r3, r3, #3
   123e8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   123ea:	2302      	movs	r3, #2
   123ec:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   123ee:	2307      	movs	r3, #7
   123f0:	71c3      	strb	r3, [r0, #7]
   123f2:	f7ff b994 	b.w	1171e <isr_rx_conn_pkt_ctrl+0x456>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   123f6:	2328      	movs	r3, #40	; 0x28
   123f8:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
   123fc:	f7ff b833 	b.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
	if (node_tx) {
   12400:	2e00      	cmp	r6, #0
   12402:	f43f a950 	beq.w	116a6 <isr_rx_conn_pkt_ctrl+0x3de>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   12406:	4906      	ldr	r1, [pc, #24]	; (12420 <isr_rx_conn_pkt_ctrl+0x1158>)
   12408:	4630      	mov	r0, r6
   1240a:	f7f8 fca0 	bl	ad4e <mem_release>
   1240e:	f7ff b94a 	b.w	116a6 <isr_rx_conn_pkt_ctrl+0x3de>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   12412:	2328      	movs	r3, #40	; 0x28
   12414:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
   12418:	f7ff b825 	b.w	11466 <isr_rx_conn_pkt_ctrl+0x19e>
   1241c:	20000c08 	.word	0x20000c08
   12420:	2000194c 	.word	0x2000194c
   12424:	00000000 	.word	0x00000000

00012428 <isr>:
{
   12428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1242c:	b093      	sub	sp, #76	; 0x4c
	trx_done = radio_is_done();
   1242e:	f005 f927 	bl	17680 <radio_is_done>
   12432:	b2c6      	uxtb	r6, r0
	if (trx_done) {
   12434:	b35e      	cbz	r6, 1248e <isr+0x66>
		crc_ok = radio_crc_is_valid();
   12436:	f005 f943 	bl	176c0 <radio_crc_is_valid>
   1243a:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
   1243c:	f005 f9c4 	bl	177c8 <radio_filter_has_match>
   12440:	fa5f f880 	uxtb.w	r8, r0
		devmatch_id = radio_filter_match_get();
   12444:	f005 f9ca 	bl	177dc <radio_filter_match_get>
   12448:	fa5f f980 	uxtb.w	r9, r0
		irkmatch_ok = radio_ar_has_match();
   1244c:	f005 fbb8 	bl	17bc0 <radio_ar_has_match>
   12450:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
   12454:	f005 fba2 	bl	17b9c <radio_ar_match_get>
   12458:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
   1245c:	f005 f97e 	bl	1775c <radio_rssi_is_ready>
   12460:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
   12462:	4cad      	ldr	r4, [pc, #692]	; (12718 <isr+0x2f0>)
	radio_status_reset();
   12464:	f005 f8f6 	bl	17654 <radio_status_reset>
	radio_tmr_status_reset();
   12468:	f005 f9ca 	bl	17800 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1246c:	f005 f9a4 	bl	177b8 <radio_filter_status_reset>
	radio_ar_status_reset();
   12470:	f005 fb9a 	bl	17ba8 <radio_ar_status_reset>
	radio_rssi_status_reset();
   12474:	f005 f96a 	bl	1774c <radio_rssi_status_reset>
	switch (_radio.state) {
   12478:	7d23      	ldrb	r3, [r4, #20]
   1247a:	2b05      	cmp	r3, #5
   1247c:	d82c      	bhi.n	124d8 <isr+0xb0>
   1247e:	e8df f013 	tbh	[pc, r3, lsl #1]
   12482:	007b      	.short	0x007b
   12484:	000e00c5 	.word	0x000e00c5
   12488:	0a350a35 	.word	0x0a350a35
   1248c:	0a35      	.short	0x0a35
		devmatch_id = irkmatch_id = 0xFF;
   1248e:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
   12492:	4635      	mov	r5, r6
   12494:	46b2      	mov	sl, r6
   12496:	46b0      	mov	r8, r6
   12498:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
   1249a:	46d9      	mov	r9, fp
   1249c:	e7e1      	b.n	12462 <isr+0x3a>
	_radio.state = STATE_RX;
   1249e:	2301      	movs	r3, #1
   124a0:	7523      	strb	r3, [r4, #20]
	hcto = radio_tmr_tifs_base_get() + 600
   124a2:	f005 fa9f 	bl	179e4 <radio_tmr_tifs_base_get>
   124a6:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
   124a8:	2096      	movs	r0, #150	; 0x96
   124aa:	f005 f9b9 	bl	17820 <radio_tmr_tifs_set>
	switch (_radio.role) {
   124ae:	7ce3      	ldrb	r3, [r4, #19]
   124b0:	3b01      	subs	r3, #1
   124b2:	2b03      	cmp	r3, #3
   124b4:	d810      	bhi.n	124d8 <isr+0xb0>
   124b6:	e8df f003 	tbb	[pc, r3]
   124ba:	3102      	.short	0x3102
   124bc:	6262      	.short	0x6262
		radio_switch_complete_and_tx(0, 0, 0, 0);
   124be:	2300      	movs	r3, #0
   124c0:	461a      	mov	r2, r3
   124c2:	4619      	mov	r1, r3
   124c4:	4618      	mov	r0, r3
   124c6:	f005 f919 	bl	176fc <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
   124ca:	f005 f907 	bl	176dc <radio_pkt_scratch_get>
   124ce:	f005 f87b 	bl	175c8 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
   124d2:	f005 f8cb 	bl	1766c <radio_is_ready>
   124d6:	b128      	cbz	r0, 124e4 <isr+0xbc>
		LL_ASSERT(0);
   124d8:	4040      	eors	r0, r0
   124da:	f380 8811 	msr	BASEPRI, r0
   124de:	f04f 0004 	mov.w	r0, #4
   124e2:	df02      	svc	2
		if (ctrl_rl_enabled()) {
   124e4:	f004 fa78 	bl	169d8 <ctrl_rl_enabled>
   124e8:	b138      	cbz	r0, 124fa <isr+0xd2>
			u8_t count, *irks = ctrl_irks_get(&count);
   124ea:	a810      	add	r0, sp, #64	; 0x40
   124ec:	f004 f862 	bl	165b4 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   124f0:	4601      	mov	r1, r0
   124f2:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   124f6:	f005 fb1f 	bl	17b38 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
   124fa:	2100      	movs	r1, #0
   124fc:	4608      	mov	r0, r1
   124fe:	f005 f87c 	bl	175fa <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
   12502:	f205 351b 	addw	r5, r5, #795	; 0x31b
		hcto -= radio_tx_chain_delay_get(0, 0);
   12506:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
   12508:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
   1250a:	4608      	mov	r0, r1
   1250c:	f005 f871 	bl	175f2 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   12510:	1a28      	subs	r0, r5, r0
   12512:	f005 f9fd 	bl	17910 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
   12516:	f005 fa4d 	bl	179b4 <radio_tmr_end_capture>
   1251a:	e02d      	b.n	12578 <isr+0x150>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1251c:	2300      	movs	r3, #0
   1251e:	461a      	mov	r2, r3
   12520:	4619      	mov	r1, r3
   12522:	4618      	mov	r0, r3
   12524:	f005 f8ea 	bl	176fc <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
   12528:	f894 2d29 	ldrb.w	r2, [r4, #3369]	; 0xd29
   1252c:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
		radio_pkt_rx_set(_radio.packet_rx
   12530:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   12534:	3008      	adds	r0, #8
   12536:	f005 f847 	bl	175c8 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
   1253a:	f005 f897 	bl	1766c <radio_is_ready>
   1253e:	2800      	cmp	r0, #0
   12540:	d1ca      	bne.n	124d8 <isr+0xb0>
		if (ctrl_rl_enabled()) {
   12542:	f004 fa49 	bl	169d8 <ctrl_rl_enabled>
   12546:	b138      	cbz	r0, 12558 <isr+0x130>
			u8_t count, *irks = ctrl_irks_get(&count);
   12548:	a810      	add	r0, sp, #64	; 0x40
   1254a:	f004 f833 	bl	165b4 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   1254e:	4601      	mov	r1, r0
   12550:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   12554:	f005 faf0 	bl	17b38 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
   12558:	2100      	movs	r1, #0
   1255a:	4608      	mov	r0, r1
   1255c:	f005 f84d 	bl	175fa <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
   12560:	f205 351b 	addw	r5, r5, #795	; 0x31b
		hcto -= radio_tx_chain_delay_get(0, 0);
   12564:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
   12566:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
   12568:	4608      	mov	r0, r1
   1256a:	f005 f842 	bl	175f2 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   1256e:	1a28      	subs	r0, r5, r0
   12570:	f005 f9ce 	bl	17910 <radio_tmr_hcto_configure>
		radio_rssi_measure();
   12574:	f005 f8da 	bl	1772c <radio_rssi_measure>
}
   12578:	b013      	add	sp, #76	; 0x4c
   1257a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
   1257e:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
					     _radio.conn_curr->phy_flags);
   12582:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
   12586:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   1258a:	2100      	movs	r1, #0
   1258c:	09d3      	lsrs	r3, r2, #7
   1258e:	f000 0007 	and.w	r0, r0, #7
   12592:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   12596:	f005 f8b1 	bl	176fc <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   1259a:	f894 2d29 	ldrb.w	r2, [r4, #3369]	; 0xd29
   1259e:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
		rx_packet_set(_radio.conn_curr,	(void *)
   125a2:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   125a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
   125aa:	3108      	adds	r1, #8
   125ac:	f7fb fbea 	bl	dd84 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
   125b0:	f005 f85c 	bl	1766c <radio_is_ready>
   125b4:	2800      	cmp	r0, #0
   125b6:	d18f      	bne.n	124d8 <isr+0xb0>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
   125b8:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   125bc:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   125c0:	2101      	movs	r1, #1
   125c2:	f000 0007 	and.w	r0, r0, #7
   125c6:	f005 f818 	bl	175fa <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
   125ca:	f8d4 2cfc 	ldr.w	r2, [r4, #3324]	; 0xcfc
   125ce:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
   125d2:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get() + 600
   125d6:	f205 25f3 	addw	r5, r5, #755	; 0x2f3
	switch (phy) {
   125da:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
   125dc:	4405      	add	r5, r0
	switch (phy) {
   125de:	d013      	beq.n	12608 <isr+0x1e0>
		return 40;
   125e0:	2b04      	cmp	r3, #4
   125e2:	bf0c      	ite	eq
   125e4:	f44f 70bc 	moveq.w	r0, #376	; 0x178
   125e8:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
   125ea:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
   125ec:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
   125f0:	09c1      	lsrs	r1, r0, #7
   125f2:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   125f6:	f004 fffc 	bl	175f2 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   125fa:	1a28      	subs	r0, r5, r0
   125fc:	f005 f988 	bl	17910 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
   12600:	2001      	movs	r0, #1
   12602:	f7fc fcbd 	bl	ef80 <packet_tx_enqueue>
   12606:	e7b7      	b.n	12578 <isr+0x150>
		return 24;
   12608:	2018      	movs	r0, #24
   1260a:	e7ee      	b.n	125ea <isr+0x1c2>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
   1260c:	b926      	cbnz	r6, 12618 <isr+0x1f0>
		_radio.state = STATE_CLOSE;
   1260e:	2303      	movs	r3, #3
   12610:	7523      	strb	r3, [r4, #20]
		radio_disable();
   12612:	f005 f80d 	bl	17630 <radio_disable>
   12616:	e7af      	b.n	12578 <isr+0x150>
	switch (_radio.role) {
   12618:	7ce3      	ldrb	r3, [r4, #19]
   1261a:	3b01      	subs	r3, #1
   1261c:	2b03      	cmp	r3, #3
   1261e:	f63f af5b 	bhi.w	124d8 <isr+0xb0>
   12622:	e8df f013 	tbh	[pc, r3, lsl #1]
   12626:	0004      	.short	0x0004
   12628:	0641028f 	.word	0x0641028f
   1262c:	0641      	.short	0x0641
		if (crc_ok) {
   1262e:	2f00      	cmp	r7, #0
   12630:	d0ed      	beq.n	1260e <isr+0x1e6>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   12632:	f1ba 0f00 	cmp.w	sl, #0
   12636:	d038      	beq.n	126aa <isr+0x282>
   12638:	4658      	mov	r0, fp
   1263a:	f003 ffe5 	bl	16608 <ctrl_rl_irk_idx>
   1263e:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	pdu_adv = (void *)radio_pkt_scratch_get();
   12642:	f005 f84b 	bl	176dc <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
   12646:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
	pdu_adv = (void *)radio_pkt_scratch_get();
   1264a:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
   1264c:	eb03 2303 	add.w	r3, r3, r3, lsl #8
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   12650:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
   12652:	332c      	adds	r3, #44	; 0x2c
   12654:	930a      	str	r3, [sp, #40]	; 0x28
   12656:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   12658:	f000 030f 	and.w	r3, r0, #15
   1265c:	2b03      	cmp	r3, #3
   1265e:	d10a      	bne.n	12676 <isr+0x24e>
   12660:	7873      	ldrb	r3, [r6, #1]
   12662:	2b0c      	cmp	r3, #12
   12664:	d107      	bne.n	12676 <isr+0x24e>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   12666:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   1266a:	07df      	lsls	r7, r3, #31
   1266c:	d51f      	bpl.n	126ae <isr+0x286>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   1266e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
				      rl_idx)) ||
   12672:	07d8      	lsls	r0, r3, #31
   12674:	d446      	bmi.n	12704 <isr+0x2dc>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   12676:	7830      	ldrb	r0, [r6, #0]
   12678:	f000 030f 	and.w	r3, r0, #15
   1267c:	2b05      	cmp	r3, #5
   1267e:	d1c6      	bne.n	1260e <isr+0x1e6>
   12680:	7873      	ldrb	r3, [r6, #1]
   12682:	2b22      	cmp	r3, #34	; 0x22
   12684:	d1c3      	bne.n	1260e <isr+0x1e6>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   12686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12688:	5ce3      	ldrb	r3, [r4, r3]
   1268a:	f003 030f 	and.w	r3, r3, #15
   1268e:	2b01      	cmp	r3, #1
   12690:	f040 8216 	bne.w	12ac0 <isr+0x698>
					    ci->connect_ind.init_addr,
   12694:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
   12696:	aa10      	add	r2, sp, #64	; 0x40
   12698:	4639      	mov	r1, r7
   1269a:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1269e:	f004 f93f 	bl	16920 <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
   126a2:	2800      	cmp	r0, #0
   126a4:	d13a      	bne.n	1271c <isr+0x2f4>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   126a6:	2000      	movs	r0, #0
   126a8:	e048      	b.n	1273c <isr+0x314>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   126aa:	20ff      	movs	r0, #255	; 0xff
   126ac:	e7c7      	b.n	1263e <isr+0x216>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
   126ae:	aa10      	add	r2, sp, #64	; 0x40
   126b0:	1cb1      	adds	r1, r6, #2
   126b2:	f3c0 1080 	ubfx	r0, r0, #6, #1
   126b6:	f004 f933 	bl	16920 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   126ba:	2800      	cmp	r0, #0
   126bc:	d0d7      	beq.n	1266e <isr+0x246>
	return (adv->tx_addr == sr->rx_addr) &&
   126be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   126c0:	7832      	ldrb	r2, [r6, #0]
   126c2:	5ce3      	ldrb	r3, [r4, r3]
   126c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
   126c8:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   126cc:	d1d3      	bne.n	12676 <isr+0x24e>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   126ce:	2206      	movs	r2, #6
   126d0:	f106 0108 	add.w	r1, r6, #8
   126d4:	1ca8      	adds	r0, r5, #2
   126d6:	f7ee f844 	bl	762 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
   126da:	2800      	cmp	r0, #0
   126dc:	d1cb      	bne.n	12676 <isr+0x24e>
		_radio.state = STATE_CLOSE;
   126de:	2303      	movs	r3, #3
   126e0:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
   126e2:	f005 f815 	bl	17710 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
   126e6:	f894 0c14 	ldrb.w	r0, [r4, #3092]	; 0xc14
   126ea:	eb00 2000 	add.w	r0, r0, r0, lsl #8
   126ee:	f600 2012 	addw	r0, r0, #2578	; 0xa12
   126f2:	4420      	add	r0, r4
   126f4:	f004 ff6e 	bl	175d4 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   126f8:	f004 ffb8 	bl	1766c <radio_is_ready>
   126fc:	2800      	cmp	r0, #0
   126fe:	f43f af3b 	beq.w	12578 <isr+0x150>
   12702:	e6e9      	b.n	124d8 <isr+0xb0>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   12704:	f1b8 0f00 	cmp.w	r8, #0
   12708:	d1d9      	bne.n	126be <isr+0x296>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   1270a:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   1270e:	f003 ff97 	bl	16640 <ctrl_irk_whitelisted>
   12712:	2800      	cmp	r0, #0
   12714:	d1d3      	bne.n	126be <isr+0x296>
   12716:	e7ae      	b.n	12676 <isr+0x24e>
   12718:	20000c08 	.word	0x20000c08
		       isr_adv_ci_adva_check(adv, ci) &&
   1271c:	4631      	mov	r1, r6
   1271e:	4628      	mov	r0, r5
   12720:	f7fc f904 	bl	e92c <isr_adv_ci_adva_check>
					    rl_idx) &&
   12724:	2800      	cmp	r0, #0
   12726:	d0be      	beq.n	126a6 <isr+0x27e>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
   12728:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (rl_idx != FILTER_IDX_NONE) {
   1272c:	2bff      	cmp	r3, #255	; 0xff
   1272e:	f000 81b4 	beq.w	12a9a <isr+0x672>
		return rl_idx == _radio.advertiser.rl_idx;
   12732:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   12736:	1ac1      	subs	r1, r0, r3
   12738:	4248      	negs	r0, r1
   1273a:	4148      	adcs	r0, r1
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   1273c:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
   12740:	2800      	cmp	r0, #0
   12742:	f43f af64 	beq.w	1260e <isr+0x1e6>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
   12746:	f894 3d6a 	ldrb.w	r3, [r4, #3434]	; 0xd6a
   1274a:	b133      	cbz	r3, 1275a <isr+0x332>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   1274c:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
   12750:	f894 2d69 	ldrb.w	r2, [r4, #3433]	; 0xd69
   12754:	429a      	cmp	r2, r3
   12756:	f47f af5a 	bne.w	1260e <isr+0x1e6>
   1275a:	f8d4 3c18 	ldr.w	r3, [r4, #3096]	; 0xc18
   1275e:	2b00      	cmp	r3, #0
   12760:	f43f af55 	beq.w	1260e <isr+0x1e6>
			node_rx = packet_rx_reserve_get(4);
   12764:	2004      	movs	r0, #4
   12766:	f7fb f879 	bl	d85c <packet_rx_reserve_get>
		if (!node_rx) {
   1276a:	4607      	mov	r7, r0
   1276c:	2800      	cmp	r0, #0
   1276e:	f43f af4e 	beq.w	1260e <isr+0x1e6>
		_radio.state = STATE_STOP;
   12772:	f04f 0904 	mov.w	r9, #4
   12776:	f884 9014 	strb.w	r9, [r4, #20]
		radio_disable();
   1277a:	f004 ff59 	bl	17630 <radio_disable>
		conn = _radio.advertiser.conn;
   1277e:	f8d4 5c18 	ldr.w	r5, [r4, #3096]	; 0xc18
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   12782:	f8d4 1cf0 	ldr.w	r1, [r4, #3312]	; 0xcf0
		_radio.advertiser.conn = NULL;
   12786:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   12788:	f44f 72aa 	mov.w	r2, #340	; 0x154
   1278c:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
   1278e:	f8c4 3c18 	str.w	r3, [r4, #3096]	; 0xc18
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   12792:	f7f8 fafa 	bl	ad8a <mem_index_get>
		memcpy(&conn->access_addr[0],
   12796:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   1279a:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
   1279c:	2203      	movs	r2, #3
   1279e:	f106 0112 	add.w	r1, r6, #18
   127a2:	f105 0014 	add.w	r0, r5, #20
   127a6:	f7ee f809 	bl	7bc <memcpy>
		memcpy(&conn->data_chan_map[0],
   127aa:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
   127ae:	464a      	mov	r2, r9
   127b0:	f106 010e 	add.w	r1, r6, #14
   127b4:	4650      	mov	r0, sl
   127b6:	f7ee f801 	bl	7bc <memcpy>
		memcpy(&conn->data_chan_map[0],
   127ba:	2205      	movs	r2, #5
   127bc:	f106 011e 	add.w	r1, r6, #30
   127c0:	4640      	mov	r0, r8
   127c2:	f7ed fffb 	bl	7bc <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   127c6:	2105      	movs	r1, #5
   127c8:	4640      	mov	r0, r8
   127ca:	f7f8 fc51 	bl	b070 <util_ones_count_get>
		conn->data_chan_count =
   127ce:	7f6b      	ldrb	r3, [r5, #29]
   127d0:	f360 0305 	bfi	r3, r0, #0, #6
   127d4:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
   127d6:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   127da:	f3c3 0304 	ubfx	r3, r3, #0, #5
   127de:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
   127e0:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
   127e2:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
   127e4:	f240 48e2 	movw	r8, #1250	; 0x4e2
   127e8:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
   127ec:	7ef2      	ldrb	r2, [r6, #27]
   127ee:	7eb3      	ldrb	r3, [r6, #26]
   127f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   127f4:	4651      	mov	r1, sl
   127f6:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
   127f8:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   127fa:	f105 006c 	add.w	r0, r5, #108	; 0x6c
   127fe:	f7ed ffdd 	bl	7bc <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
   12802:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   12804:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
   12806:	f242 7210 	movw	r2, #10000	; 0x2710
   1280a:	fb02 8303 	mla	r3, r2, r3, r8
   1280e:	3b01      	subs	r3, #1
   12810:	fbb3 f3f8 	udiv	r3, r3, r8
   12814:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
   12816:	4bc2      	ldr	r3, [pc, #776]	; (12b20 <isr+0x6f8>)
   12818:	4443      	add	r3, r8
   1281a:	fbb3 f3f8 	udiv	r3, r3, r8
   1281e:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   12822:	4bc0      	ldr	r3, [pc, #768]	; (12b24 <isr+0x6fc>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   12824:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   12826:	4443      	add	r3, r8
   12828:	fbb3 f3f8 	udiv	r3, r3, r8
   1282c:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1282e:	4282      	cmp	r2, r0
   12830:	4613      	mov	r3, r2
   12832:	bfc4      	itt	gt
   12834:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
   12838:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1283a:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1283e:	bfc4      	itt	gt
   12840:	18d2      	addgt	r2, r2, r3
   12842:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
   12844:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   12846:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   1284a:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
   1284c:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
   1284e:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
   12850:	2300      	movs	r3, #0
   12852:	72fb      	strb	r3, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
   12854:	733a      	strb	r2, [r7, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   12856:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
   1285a:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1285c:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   12860:	f3c2 12c0 	ubfx	r2, r2, #7, #1
   12864:	76ba      	strb	r2, [r7, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   12866:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   1286a:	464a      	mov	r2, r9
   1286c:	f107 001b 	add.w	r0, r7, #27
   12870:	f7ed ffa4 	bl	7bc <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
   12874:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   12878:	f107 030e 	add.w	r3, r7, #14
   1287c:	28ff      	cmp	r0, #255	; 0xff
   1287e:	930b      	str	r3, [sp, #44]	; 0x2c
   12880:	f106 0a02 	add.w	sl, r6, #2
   12884:	f107 0b14 	add.w	fp, r7, #20
   12888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1288a:	f000 8138 	beq.w	12afe <isr+0x6d6>
			ll_rl_id_addr_get(rl_idx,
   1288e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12890:	f107 010d 	add.w	r1, r7, #13
   12894:	f004 f824 	bl	168e0 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   12898:	7b7b      	ldrb	r3, [r7, #13]
   1289a:	3302      	adds	r3, #2
   1289c:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   1289e:	464a      	mov	r2, r9
   128a0:	4651      	mov	r1, sl
   128a2:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   128a4:	f7ed ff8a 	bl	7bc <memcpy>
			pdu_adv->connect_ind.interval;
   128a8:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
   128aa:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
			pdu_adv->connect_ind.latency;
   128ae:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
   128b0:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
			pdu_adv->connect_ind.timeout;
   128b4:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
   128b6:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv->connect_ind.sca;
   128ba:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   128be:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   128c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
   128c6:	8c28      	ldrh	r0, [r5, #32]
   128c8:	f7fc f8a0 	bl	ea0c <rx_fc_lock>
		packet_rx_enqueue();
   128cc:	f7fc f9ba 	bl	ec44 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
   128d0:	2003      	movs	r0, #3
   128d2:	f7fa ffc3 	bl	d85c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   128d6:	2800      	cmp	r0, #0
   128d8:	f43f adfe 	beq.w	124d8 <isr+0xb0>
			node_rx->hdr.handle = conn->handle;
   128dc:	8c2b      	ldrh	r3, [r5, #32]
   128de:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   128e0:	230b      	movs	r3, #11
   128e2:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
   128e4:	7833      	ldrb	r3, [r6, #0]
   128e6:	f013 0320 	ands.w	r3, r3, #32
   128ea:	d00e      	beq.n	1290a <isr+0x4e2>
					((u16_t)conn->access_addr[1] << 8) |
   128ec:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
   128ee:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
   128f0:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
   128f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
   128f6:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
   128f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
   128fc:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   128fe:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
   12900:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
   12904:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
   12906:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   12908:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
   1290a:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
   1290c:	f7fc f99a 	bl	ec44 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
   12910:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   12914:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   12918:	4983      	ldr	r1, [pc, #524]	; (12b28 <isr+0x700>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
   1291a:	0952      	lsrs	r2, r2, #5
   1291c:	f362 0384 	bfi	r3, r2, #2, #3
   12920:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   12924:	f894 3d08 	ldrb.w	r3, [r4, #3336]	; 0xd08
			   gc_lookup_ppm[conn->slave.sca]) *
   12928:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
   1292c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   12930:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
   12932:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
   12936:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   1293a:	4a7c      	ldr	r2, [pc, #496]	; (12b2c <isr+0x704>)
   1293c:	f203 233f 	addw	r3, r3, #575	; 0x23f
   12940:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
   12944:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
   12946:	ea4f 0358 	mov.w	r3, r8, lsr #1
   1294a:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
   1294c:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
   1294e:	7d73      	ldrb	r3, [r6, #21]
   12950:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
   12954:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
   12956:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
   1295a:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
   1295c:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
   1295e:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
   12960:	4638      	mov	r0, r7
   12962:	f004 fe48 	bl	175f6 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   12966:	4972      	ldr	r1, [pc, #456]	; (12b30 <isr+0x708>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
   12968:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   1296a:	f200 4052 	addw	r0, r0, #1106	; 0x452
   1296e:	a36a      	add	r3, pc, #424	; (adr r3, 12b18 <isr+0x6f0>)
   12970:	e9d3 2300 	ldrd	r2, r3, [r3]
   12974:	fba0 0101 	umull	r0, r1, r0, r1
   12978:	f7ed fc76 	bl	268 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   1297c:	f8d4 3d6c 	ldr.w	r3, [r4, #3436]	; 0xd6c
   12980:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
   12982:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset =
   12984:	4293      	cmp	r3, r2
   12986:	bf38      	it	cc
   12988:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   1298a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset =
   1298e:	469a      	mov	sl, r3
		conn_interval_us -=
   12990:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
   12992:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
   12994:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
   12996:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
   12998:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
   1299c:	f005 f81c 	bl	179d8 <radio_tmr_end_get>
   129a0:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
   129a2:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   129a4:	4639      	mov	r1, r7
		conn_offset_us +=
   129a6:	fb00 9909 	mla	r9, r0, r9, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   129aa:	4638      	mov	r0, r7
   129ac:	f004 fe21 	bl	175f2 <radio_tx_chain_delay_get>
   129b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   129b2:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   129b6:	4499      	add	r9, r3
   129b8:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
   129bc:	eba9 030b 	sub.w	r3, r9, fp
   129c0:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   129c2:	f240 532d 	movw	r3, #1325	; 0x52d
   129c6:	9300      	str	r3, [sp, #0]
   129c8:	2205      	movs	r2, #5
   129ca:	4b5a      	ldr	r3, [pc, #360]	; (12b34 <isr+0x70c>)
   129cc:	f8df b160 	ldr.w	fp, [pc, #352]	; 12b30 <isr+0x708>
   129d0:	4639      	mov	r1, r7
   129d2:	4638      	mov	r0, r7
   129d4:	f7f9 f8b4 	bl	bb40 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
   129d8:	f240 512e 	movw	r1, #1326	; 0x52e
   129dc:	f7fc fc46 	bl	f26c <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   129e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   129e2:	5ce3      	ldrb	r3, [r4, r3]
   129e4:	f003 030f 	and.w	r3, r3, #15
   129e8:	2b01      	cmp	r3, #1
   129ea:	d106      	bne.n	129fa <isr+0x5d2>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   129ec:	9700      	str	r7, [sp, #0]
   129ee:	463b      	mov	r3, r7
   129f0:	2203      	movs	r2, #3
   129f2:	4639      	mov	r1, r7
   129f4:	4638      	mov	r0, r7
   129f6:	f7f9 f8a3 	bl	bb40 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   129fa:	fba8 890b 	umull	r8, r9, r8, fp
   129fe:	a346      	add	r3, pc, #280	; (adr r3, 12b18 <isr+0x6f0>)
   12a00:	e9d3 2300 	ldrd	r2, r3, [r3]
   12a04:	4640      	mov	r0, r8
   12a06:	4649      	mov	r1, r9
   12a08:	f7ed fc2e 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12a0c:	f895 3020 	ldrb.w	r3, [r5, #32]
   12a10:	68a4      	ldr	r4, [r4, #8]
   12a12:	9506      	str	r5, [sp, #24]
   12a14:	3307      	adds	r3, #7
   12a16:	b2db      	uxtb	r3, r3
   12a18:	930a      	str	r3, [sp, #40]	; 0x28
   12a1a:	f240 5345 	movw	r3, #1349	; 0x545
   12a1e:	9308      	str	r3, [sp, #32]
   12a20:	4b45      	ldr	r3, [pc, #276]	; (12b38 <isr+0x710>)
   12a22:	9307      	str	r3, [sp, #28]
   12a24:	4b45      	ldr	r3, [pc, #276]	; (12b3c <isr+0x714>)
   12a26:	9305      	str	r3, [sp, #20]
   12a28:	68eb      	ldr	r3, [r5, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   12a2a:	4a45      	ldr	r2, [pc, #276]	; (12b40 <isr+0x718>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12a2c:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   12a2e:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12a30:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   12a32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   12a36:	2307      	movs	r3, #7
   12a38:	2100      	movs	r1, #0
   12a3a:	4343      	muls	r3, r0
   12a3c:	fb02 3301 	mla	r3, r2, r1, r3
   12a40:	fba0 1202 	umull	r1, r2, r0, r2
   12a44:	441a      	add	r2, r3
   12a46:	4608      	mov	r0, r1
   12a48:	ebb8 0000 	subs.w	r0, r8, r0
   12a4c:	4611      	mov	r1, r2
   12a4e:	f04f 0300 	mov.w	r3, #0
   12a52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12a56:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12a5a:	2500      	movs	r5, #0
   12a5c:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   12a5e:	f7ed fc03 	bl	268 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   12a62:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12a64:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   12a66:	a32c      	add	r3, pc, #176	; (adr r3, 12b18 <isr+0x6f0>)
   12a68:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12a6c:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   12a70:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12a74:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   12a76:	f7ed fbf7 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12a7a:	eba4 040a 	sub.w	r4, r4, sl
   12a7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   12a82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12a84:	9000      	str	r0, [sp, #0]
   12a86:	4623      	mov	r3, r4
		ticker_status =
   12a88:	4629      	mov	r1, r5
   12a8a:	4628      	mov	r0, r5
   12a8c:	f7f8 ffba 	bl	ba04 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12a90:	f030 0302 	bics.w	r3, r0, #2
   12a94:	f47f ad20 	bne.w	124d8 <isr+0xb0>
   12a98:	e56e      	b.n	12578 <isr+0x150>
	return (adv->rx_addr == ci->tx_addr) &&
   12a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12a9c:	5ce2      	ldrb	r2, [r4, r3]
   12a9e:	7833      	ldrb	r3, [r6, #0]
   12aa0:	f3c3 1380 	ubfx	r3, r3, #6, #1
   12aa4:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   12aa8:	f47f adfd 	bne.w	126a6 <isr+0x27e>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
   12aac:	2206      	movs	r2, #6
   12aae:	4639      	mov	r1, r7
   12ab0:	f105 0008 	add.w	r0, r5, #8
   12ab4:	f7ed fe55 	bl	762 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   12ab8:	fab0 f080 	clz	r0, r0
   12abc:	0940      	lsrs	r0, r0, #5
   12abe:	e63d      	b.n	1273c <isr+0x314>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   12ac0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   12ac4:	079a      	lsls	r2, r3, #30
   12ac6:	d50d      	bpl.n	12ae4 <isr+0x6bc>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   12ac8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
				      rl_idx)) ||
   12acc:	079b      	lsls	r3, r3, #30
   12ace:	f57f adea 	bpl.w	126a6 <isr+0x27e>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   12ad2:	f1b8 0f00 	cmp.w	r8, #0
   12ad6:	d10d      	bne.n	12af4 <isr+0x6cc>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   12ad8:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   12adc:	f003 fdb0 	bl	16640 <ctrl_irk_whitelisted>
   12ae0:	b940      	cbnz	r0, 12af4 <isr+0x6cc>
   12ae2:	e5e0      	b.n	126a6 <isr+0x27e>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
   12ae4:	aa10      	add	r2, sp, #64	; 0x40
   12ae6:	1cb1      	adds	r1, r6, #2
   12ae8:	f3c0 1080 	ubfx	r0, r0, #6, #1
   12aec:	f003 ff18 	bl	16920 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   12af0:	2800      	cmp	r0, #0
   12af2:	d0e9      	beq.n	12ac8 <isr+0x6a0>
	       isr_adv_ci_adva_check(adv, ci);
   12af4:	4631      	mov	r1, r6
   12af6:	4628      	mov	r0, r5
   12af8:	f7fb ff18 	bl	e92c <isr_adv_ci_adva_check>
   12afc:	e61e      	b.n	1273c <isr+0x314>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   12afe:	4619      	mov	r1, r3
   12b00:	464a      	mov	r2, r9
   12b02:	4658      	mov	r0, fp
   12b04:	f7ed fe86 	bl	814 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   12b08:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   12b0a:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   12b0c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   12b10:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   12b12:	464a      	mov	r2, r9
   12b14:	4651      	mov	r1, sl
   12b16:	e6c5      	b.n	128a4 <isr+0x47c>
   12b18:	1afd498d 	.word	0x1afd498d
   12b1c:	00000007 	.word	0x00000007
   12b20:	026259ff 	.word	0x026259ff
   12b24:	01c9c37f 	.word	0x01c9c37f
   12b28:	00022896 	.word	0x00022896
   12b2c:	000f4240 	.word	0x000f4240
   12b30:	3b9aca00 	.word	0x3b9aca00
   12b34:	0000f26d 	.word	0x0000f26d
   12b38:	0000f29d 	.word	0x0000f29d
   12b3c:	00010c91 	.word	0x00010c91
   12b40:	1afd498d 	.word	0x1afd498d
		rl_idx = devmatch_ok ?
   12b44:	f1b8 0f00 	cmp.w	r8, #0
   12b48:	d01c      	beq.n	12b84 <isr+0x75c>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
   12b4a:	f894 0c2d 	ldrb.w	r0, [r4, #3117]	; 0xc2d
		rl_idx = devmatch_ok ?
   12b4e:	4649      	mov	r1, r9
   12b50:	f3c0 1000 	ubfx	r0, r0, #4, #1
   12b54:	f003 fd38 	bl	165c8 <ctrl_rl_idx>
   12b58:	4681      	mov	r9, r0
		if (crc_ok &&
   12b5a:	b147      	cbz	r7, 12b6e <isr+0x746>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
   12b5c:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   12b60:	06df      	lsls	r7, r3, #27
   12b62:	d519      	bpl.n	12b98 <isr+0x770>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   12b64:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   12b68:	06de      	lsls	r6, r3, #27
   12b6a:	f100 8271 	bmi.w	13050 <isr+0xc28>
			_radio.state = STATE_CLOSE;
   12b6e:	2303      	movs	r3, #3
   12b70:	7523      	strb	r3, [r4, #20]
			radio_disable();
   12b72:	f004 fd5d 	bl	17630 <radio_disable>
			_radio.scanner.state = 0;
   12b76:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
   12b7a:	f36f 0341 	bfc	r3, #1, #1
   12b7e:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
   12b82:	e4f9      	b.n	12578 <isr+0x150>
		rl_idx = devmatch_ok ?
   12b84:	f1ba 0f00 	cmp.w	sl, #0
   12b88:	d003      	beq.n	12b92 <isr+0x76a>
   12b8a:	4658      	mov	r0, fp
   12b8c:	f003 fd3c 	bl	16608 <ctrl_rl_irk_idx>
   12b90:	e7e2      	b.n	12b58 <isr+0x730>
   12b92:	f04f 09ff 	mov.w	r9, #255	; 0xff
   12b96:	e7e0      	b.n	12b5a <isr+0x732>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
   12b98:	f1b8 0f00 	cmp.w	r8, #0
   12b9c:	d005      	beq.n	12baa <isr+0x782>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   12b9e:	4649      	mov	r1, r9
   12ba0:	4650      	mov	r0, sl
   12ba2:	f003 fe7f 	bl	168a4 <ctrl_rl_idx_allowed>
   12ba6:	2800      	cmp	r0, #0
   12ba8:	d0dc      	beq.n	12b64 <isr+0x73c>
	bool dir_report = false;
   12baa:	2300      	movs	r3, #0
   12bac:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   12bb0:	f894 2d29 	ldrb.w	r2, [r4, #3369]	; 0xd29
   12bb4:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
   12bb8:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
	if(pdu_adv_rx->type == 0x07){			//PDU_ADV_TYPE_EXT_IND
   12bbc:	7a3b      	ldrb	r3, [r7, #8]
   12bbe:	f003 030f 	and.w	r3, r3, #15
   12bc2:	2b07      	cmp	r3, #7
   12bc4:	f040 8082 	bne.w	12ccc <isr+0x8a4>
		if(h->adv_addr){
   12bc8:	7afb      	ldrb	r3, [r7, #11]
   12bca:	f8df 8350 	ldr.w	r8, [pc, #848]	; 12f1c <isr+0xaf4>
   12bce:	07d8      	lsls	r0, r3, #31
			ptr += BDADDR_SIZE;
   12bd0:	bf4c      	ite	mi
   12bd2:	f107 0612 	addmi.w	r6, r7, #18
		ptr = (u8_t *)h + sizeof(*h);
   12bd6:	f107 060c 	addpl.w	r6, r7, #12
		if(h->tgt_addr){
   12bda:	079a      	lsls	r2, r3, #30
			ptr += BDADDR_SIZE;
   12bdc:	bf48      	it	mi
   12bde:	3606      	addmi	r6, #6
		if(h->adi){
   12be0:	f013 0f08 	tst.w	r3, #8
			sid = (u8_t)adi_ptr->sid;
   12be4:	bf1e      	ittt	ne
   12be6:	7873      	ldrbne	r3, [r6, #1]
   12be8:	f3c3 1303 	ubfxne	r3, r3, #4, #4
   12bec:	f888 3000 	strbne.w	r3, [r8]
		if(sid == 0x04){
   12bf0:	f898 3000 	ldrb.w	r3, [r8]
			ptr += sizeof(*adi_ptr);
   12bf4:	bf18      	it	ne
   12bf6:	3602      	addne	r6, #2
		if(sid == 0x04){
   12bf8:	2b04      	cmp	r3, #4
   12bfa:	d11d      	bne.n	12c38 <isr+0x810>
			stop_time_int = k_cycle_get_32();
   12bfc:	f7f0 fc6e 	bl	34dc <_timer_cycle_get_32>
   12c00:	4bbb      	ldr	r3, [pc, #748]	; (12ef0 <isr+0xac8>)
   12c02:	6018      	str	r0, [r3, #0]
			event_time_int = (stop_time_int - start_time_int);
   12c04:	4bbb      	ldr	r3, [pc, #748]	; (12ef4 <isr+0xacc>)
   12c06:	681b      	ldr	r3, [r3, #0]
   12c08:	eba0 0e03 	sub.w	lr, r0, r3
   12c0c:	4bba      	ldr	r3, [pc, #744]	; (12ef8 <isr+0xad0>)
   12c0e:	f8c3 e000 	str.w	lr, [r3]
			Time_difference_int = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_int))/1000;
   12c12:	4bba      	ldr	r3, [pc, #744]	; (12efc <isr+0xad4>)
   12c14:	681a      	ldr	r2, [r3, #0]
   12c16:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
   12c1a:	fb82 230b 	smull	r2, r3, r2, fp
   12c1e:	fba2 010e 	umull	r0, r1, r2, lr
   12c22:	fb0e 1103 	mla	r1, lr, r3, r1
   12c26:	4bb6      	ldr	r3, [pc, #728]	; (12f00 <isr+0xad8>)
   12c28:	681a      	ldr	r2, [r3, #0]
   12c2a:	17d3      	asrs	r3, r2, #31
   12c2c:	f7ed fb1c 	bl	268 <__aeabi_uldivmod>
   12c30:	4bb4      	ldr	r3, [pc, #720]	; (12f04 <isr+0xadc>)
   12c32:	fbb0 f0fb 	udiv	r0, r0, fp
   12c36:	6018      	str	r0, [r3, #0]
		if((h->aux_ptr && !aux_scan && (sid == 0x02)) || 
   12c38:	7afb      	ldrb	r3, [r7, #11]
   12c3a:	f013 0310 	ands.w	r3, r3, #16
   12c3e:	d006      	beq.n	12c4e <isr+0x826>
   12c40:	4ab1      	ldr	r2, [pc, #708]	; (12f08 <isr+0xae0>)
   12c42:	7812      	ldrb	r2, [r2, #0]
   12c44:	b91a      	cbnz	r2, 12c4e <isr+0x826>
   12c46:	f898 2000 	ldrb.w	r2, [r8]
   12c4a:	2a02      	cmp	r2, #2
   12c4c:	d005      	beq.n	12c5a <isr+0x832>
   12c4e:	f898 2000 	ldrb.w	r2, [r8]
   12c52:	2a04      	cmp	r2, #4
   12c54:	d13a      	bne.n	12ccc <isr+0x8a4>
			((sid == 0x04) && h->aux_ptr)){
   12c56:	2b00      	cmp	r3, #0
   12c58:	d038      	beq.n	12ccc <isr+0x8a4>
			aux_scan = 0x01;
   12c5a:	4bab      	ldr	r3, [pc, #684]	; (12f08 <isr+0xae0>)
   12c5c:	2201      	movs	r2, #1
   12c5e:	701a      	strb	r2, [r3, #0]
			_radio.ext_scanner.chan_index = ap->chan_idx;
   12c60:	7833      	ldrb	r3, [r6, #0]
   12c62:	f3c3 0305 	ubfx	r3, r3, #0, #6
   12c66:	f884 3c90 	strb.w	r3, [r4, #3216]	; 0xc90
			_radio.ext_scanner.chan_off	= ap->offs;
   12c6a:	78b3      	ldrb	r3, [r6, #2]
   12c6c:	7870      	ldrb	r0, [r6, #1]
			_radio.ext_scanner.off_unit	= ap->offs_units;
   12c6e:	7832      	ldrb	r2, [r6, #0]
			_radio.ext_scanner.chan_off	= ap->offs;
   12c70:	f003 031f 	and.w	r3, r3, #31
   12c74:	ea40 2e03 	orr.w	lr, r0, r3, lsl #8
			_radio.ext_scanner.off_unit	= ap->offs_units;
   12c78:	f3c2 12c0 	ubfx	r2, r2, #7, #1
			_radio.ext_scanner.chan_off	= ap->offs;
   12c7c:	4ba3      	ldr	r3, [pc, #652]	; (12f0c <isr+0xae4>)
			_radio.ext_scanner.off_unit	= ap->offs_units;
   12c7e:	f884 2cb4 	strb.w	r2, [r4, #3252]	; 0xcb4
			_radio.ext_scanner.chan_off	= ap->offs;
   12c82:	fa1f f08e 	uxth.w	r0, lr
			if(_radio.ext_scanner.off_unit == 0 ){
   12c86:	f012 0fff 	tst.w	r2, #255	; 0xff
			_radio.ext_scanner.chan_off	= ap->offs;
   12c8a:	f04f 0100 	mov.w	r1, #0
   12c8e:	e9c3 0100 	strd	r0, r1, [r3]
			_radio.ext_scanner.chan_off_debug = ap->offs;
   12c92:	e9c3 0102 	strd	r0, r1, [r3, #8]
				_radio.ext_scanner.chan_off *= 30;
   12c96:	bf0b      	itete	eq
   12c98:	221e      	moveq	r2, #30
				_radio.ext_scanner.chan_off *= 300;
   12c9a:	f44f 7096 	movne.w	r0, #300	; 0x12c
				_radio.ext_scanner.chan_off *= 30;
   12c9e:	fbae 0102 	umulleq	r0, r1, lr, r2
				_radio.ext_scanner.chan_off *= 300;
   12ca2:	fbae 0100 	umullne	r0, r1, lr, r0
   12ca6:	e9c3 0100 	strd	r0, r1, [r3]
			_radio.ext_scanner.chan_off_calculation = _radio.ext_scanner.chan_off;
   12caa:	e9d3 0100 	ldrd	r0, r1, [r3]
   12cae:	4b98      	ldr	r3, [pc, #608]	; (12f10 <isr+0xae8>)
   12cb0:	e9c3 0100 	strd	r0, r1, [r3]
			start_time_ticker = k_cycle_get_32();
   12cb4:	f7f0 fc12 	bl	34dc <_timer_cycle_get_32>
   12cb8:	4b96      	ldr	r3, [pc, #600]	; (12f14 <isr+0xaec>)
   12cba:	6018      	str	r0, [r3, #0]
			start_time_int = k_cycle_get_32();
   12cbc:	f7f0 fc0e 	bl	34dc <_timer_cycle_get_32>
   12cc0:	4b8c      	ldr	r3, [pc, #560]	; (12ef4 <isr+0xacc>)
   12cc2:	6018      	str	r0, [r3, #0]
		_radio.ext_scanner.ticks_now = ticker_ticks_now_get();
   12cc4:	f7f9 f80c 	bl	bce0 <ticker_ticks_now_get>
   12cc8:	f8c4 0cec 	str.w	r0, [r4, #3308]	; 0xcec
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   12ccc:	f8d4 3c54 	ldr.w	r3, [r4, #3156]	; 0xc54
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   12cd0:	f107 0608 	add.w	r6, r7, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   12cd4:	2b00      	cmp	r3, #0
   12cd6:	f000 81d4 	beq.w	13082 <isr+0xc5a>
   12cda:	f894 3d6a 	ldrb.w	r3, [r4, #3434]	; 0xd6a
   12cde:	b133      	cbz	r3, 12cee <isr+0x8c6>
				      (_radio.fc_req == _radio.fc_ack)) &&
   12ce0:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   12ce4:	f894 2d69 	ldrb.w	r2, [r4, #3433]	; 0xd69
   12ce8:	429a      	cmp	r2, r3
   12cea:	f040 81ca 	bne.w	13082 <isr+0xc5a>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   12cee:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   12cf2:	f3c3 1000 	ubfx	r0, r3, #4, #1
   12cf6:	2800      	cmp	r0, #0
   12cf8:	f000 81b5 	beq.w	13066 <isr+0xc3e>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   12cfc:	7a38      	ldrb	r0, [r7, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   12cfe:	f010 000f 	ands.w	r0, r0, #15
   12d02:	f040 81f3 	bne.w	130ec <isr+0xcc4>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   12d06:	f004 fe67 	bl	179d8 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   12d0a:	f8d4 3c28 	ldr.w	r3, [r4, #3112]	; 0xc28
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   12d0e:	f200 2816 	addw	r8, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   12d12:	4881      	ldr	r0, [pc, #516]	; (12f18 <isr+0xaf0>)
   12d14:	2207      	movs	r2, #7
   12d16:	fba3 0100 	umull	r0, r1, r3, r0
   12d1a:	fb02 1103 	mla	r1, r2, r3, r1
   12d1e:	a372      	add	r3, pc, #456	; (adr r3, 12ee8 <isr+0xac0>)
   12d20:	e9d3 2300 	ldrd	r2, r3, [r3]
   12d24:	f7ed faa0 	bl	268 <__aeabi_uldivmod>
   12d28:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
   12d2c:	4580      	cmp	r8, r0
   12d2e:	f080 81a8 	bcs.w	13082 <isr+0xc5a>
			node_rx = packet_rx_reserve_get(4);
   12d32:	2004      	movs	r0, #4
   12d34:	f7fa fd92 	bl	d85c <packet_rx_reserve_get>
		if (node_rx == 0) {
   12d38:	4680      	mov	r8, r0
   12d3a:	2800      	cmp	r0, #0
   12d3c:	f43f af17 	beq.w	12b6e <isr+0x746>
		_radio.state = STATE_STOP;
   12d40:	2304      	movs	r3, #4
   12d42:	7523      	strb	r3, [r4, #20]
		_radio.scanner.conn = NULL;
   12d44:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
   12d46:	f8d4 6c54 	ldr.w	r6, [r4, #3156]	; 0xc54
		_radio.scanner.conn = NULL;
   12d4a:	f8c4 3c54 	str.w	r3, [r4, #3156]	; 0xc54
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   12d4e:	f004 fcc5 	bl	176dc <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   12d52:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
   12d54:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
   12d58:	f043 0325 	orr.w	r3, r3, #37	; 0x25
   12d5c:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   12d5e:	7a3b      	ldrb	r3, [r7, #8]
   12d60:	7802      	ldrb	r2, [r0, #0]
   12d62:	f3c3 1380 	ubfx	r3, r3, #6, #1
   12d66:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
   12d6a:	2322      	movs	r3, #34	; 0x22
   12d6c:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   12d6e:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   12d70:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
   12d72:	4648      	mov	r0, r9
   12d74:	f003 fc0a 	bl	1658c <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   12d78:	f894 3c2e 	ldrb.w	r3, [r4, #3118]	; 0xc2e
		lrpa = ctrl_lrpa_get(rl_idx);
   12d7c:	4601      	mov	r1, r0
   12d7e:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
   12d80:	f013 0f01 	tst.w	r3, #1
   12d84:	f810 3b02 	ldrb.w	r3, [r0], #2
   12d88:	f000 81ba 	beq.w	13100 <isr+0xcd8>
   12d8c:	2900      	cmp	r1, #0
   12d8e:	f000 81b7 	beq.w	13100 <isr+0xcd8>
			pdu_adv_tx->tx_addr = 1;
   12d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12d96:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   12d98:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   12d9a:	f7ed fd0f 	bl	7bc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
   12d9e:	f105 0308 	add.w	r3, r5, #8
   12da2:	4618      	mov	r0, r3
   12da4:	2206      	movs	r2, #6
   12da6:	f107 010a 	add.w	r1, r7, #10
   12daa:	930a      	str	r3, [sp, #40]	; 0x28
   12dac:	f7ed fd06 	bl	7bc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
   12db0:	2204      	movs	r2, #4
   12db2:	f106 0110 	add.w	r1, r6, #16
   12db6:	f105 000e 	add.w	r0, r5, #14
   12dba:	f7ed fcff 	bl	7bc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
   12dbe:	2203      	movs	r2, #3
   12dc0:	f106 0114 	add.w	r1, r6, #20
   12dc4:	f105 0012 	add.w	r0, r5, #18
   12dc8:	f7ed fcf8 	bl	7bc <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
   12dcc:	2301      	movs	r3, #1
   12dce:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
   12dd0:	f8b4 3c48 	ldrh.w	r3, [r4, #3144]	; 0xc48
		conn_interval_us =
   12dd4:	f240 42e2 	movw	r2, #1250	; 0x4e2
   12dd8:	4353      	muls	r3, r2
   12dda:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   12ddc:	f004 fdfc 	bl	179d8 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
   12de0:	68e2      	ldr	r2, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
   12de2:	f8d4 bc58 	ldr.w	fp, [r4, #3160]	; 0xc58
		if (!_radio.remainder_anchor ||
   12de6:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   12de8:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
   12dec:	bfd8      	it	le
   12dee:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
   12df2:	f1bb 0f00 	cmp.w	fp, #0
   12df6:	f040 818e 	bne.w	13116 <isr+0xcee>
			pdu_adv_tx->connect_ind.win_offset = 0;
   12dfa:	f885 b016 	strb.w	fp, [r5, #22]
   12dfe:	f885 b017 	strb.w	fp, [r5, #23]
   12e02:	469b      	mov	fp, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   12e04:	2100      	movs	r1, #0
   12e06:	4608      	mov	r0, r1
   12e08:	f004 fbea 	bl	175e0 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   12e0c:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   12e0e:	ebab 0b00 	sub.w	fp, fp, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   12e12:	4608      	mov	r0, r1
   12e14:	f004 fbed 	bl	175f2 <radio_tx_chain_delay_get>
   12e18:	ebab 0000 	sub.w	r0, fp, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
   12e1c:	f100 031e 	add.w	r3, r0, #30
   12e20:	930c      	str	r3, [sp, #48]	; 0x30
		pdu_adv_tx->connect_ind.interval =
   12e22:	f8b4 3c48 	ldrh.w	r3, [r4, #3144]	; 0xc48
   12e26:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
   12e28:	f8b4 3c4a 	ldrh.w	r3, [r4, #3146]	; 0xc4a
   12e2c:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
   12e2e:	f8b4 3c4c 	ldrh.w	r3, [r4, #3148]	; 0xc4c
   12e32:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
   12e34:	f106 0117 	add.w	r1, r6, #23
   12e38:	2205      	movs	r2, #5
   12e3a:	f105 001e 	add.w	r0, r5, #30
   12e3e:	f7ed fcbd 	bl	7bc <memcpy>
		pdu_adv_tx->connect_ind.hop =
   12e42:	7fb2      	ldrb	r2, [r6, #30]
   12e44:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   12e48:	f362 0304 	bfi	r3, r2, #0, #5
   12e4c:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
   12e50:	f894 2d08 	ldrb.w	r2, [r4, #3336]	; 0xd08
   12e54:	f362 1347 	bfi	r3, r2, #5, #3
   12e58:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
   12e5c:	f004 fc58 	bl	17710 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
   12e60:	4628      	mov	r0, r5
   12e62:	f004 fbb7 	bl	175d4 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   12e66:	f004 fc01 	bl	1766c <radio_is_ready>
   12e6a:	4683      	mov	fp, r0
   12e6c:	2800      	cmp	r0, #0
   12e6e:	f47f ab33 	bne.w	124d8 <isr+0xb0>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   12e72:	f44f 72aa 	mov.w	r2, #340	; 0x154
   12e76:	f8d4 1cf0 	ldr.w	r1, [r4, #3312]	; 0xcf0
   12e7a:	4630      	mov	r0, r6
   12e7c:	f7f7 ff85 	bl	ad8a <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   12e80:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   12e82:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   12e84:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
   12e88:	f888 b00b 	strb.w	fp, [r8, #11]
		radio_le_conn_cmplt->role = 0x00;
   12e8c:	f888 b00c 	strb.w	fp, [r8, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   12e90:	f888 3004 	strb.w	r3, [r8, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   12e94:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
   12e98:	f8a8 0006 	strh.w	r0, [r8, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   12e9c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   12ea0:	f888 301a 	strb.w	r3, [r8, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   12ea4:	2206      	movs	r2, #6
   12ea6:	f108 001b 	add.w	r0, r8, #27
   12eaa:	f7ed fc87 	bl	7bc <memcpy>
   12eae:	f108 0b0e 	add.w	fp, r8, #14
   12eb2:	f108 0314 	add.w	r3, r8, #20
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
   12eb6:	f1ba 0f00 	cmp.w	sl, #0
   12eba:	f000 813c 	beq.w	13136 <isr+0xd0e>
   12ebe:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   12ec2:	f000 8138 	beq.w	13136 <isr+0xd0e>
			ll_rl_id_addr_get(rl_idx,
   12ec6:	465a      	mov	r2, fp
   12ec8:	f108 010d 	add.w	r1, r8, #13
   12ecc:	4648      	mov	r0, r9
   12ece:	930d      	str	r3, [sp, #52]	; 0x34
   12ed0:	f003 fd06 	bl	168e0 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   12ed4:	f898 200d 	ldrb.w	r2, [r8, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   12ed8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12eda:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
   12edc:	3202      	adds	r2, #2
   12ede:	f888 200d 	strb.w	r2, [r8, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   12ee2:	4618      	mov	r0, r3
   12ee4:	2206      	movs	r2, #6
   12ee6:	e01b      	b.n	12f20 <isr+0xaf8>
   12ee8:	3b9aca00 	.word	0x3b9aca00
   12eec:	00000000 	.word	0x00000000
   12ef0:	20004900 	.word	0x20004900
   12ef4:	20004874 	.word	0x20004874
   12ef8:	20004934 	.word	0x20004934
   12efc:	2000eb28 	.word	0x2000eb28
   12f00:	2000eb24 	.word	0x2000eb24
   12f04:	2000495c 	.word	0x2000495c
   12f08:	20001980 	.word	0x20001980
   12f0c:	200018a0 	.word	0x200018a0
   12f10:	200018b0 	.word	0x200018b0
   12f14:	2000492c 	.word	0x2000492c
   12f18:	1afd498d 	.word	0x1afd498d
   12f1c:	20004920 	.word	0x20004920
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   12f20:	f7ed fc4c 	bl	7bc <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
   12f24:	f8b4 3c48 	ldrh.w	r3, [r4, #3144]	; 0xc48
   12f28:	f8a8 3021 	strh.w	r3, [r8, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
   12f2c:	f8b4 3c4a 	ldrh.w	r3, [r4, #3146]	; 0xc4a
   12f30:	f8a8 3023 	strh.w	r3, [r8, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
   12f34:	f8b4 3c4c 	ldrh.w	r3, [r4, #3148]	; 0xc4c
   12f38:	f8a8 3025 	strh.w	r3, [r8, #37]	; 0x25
			pdu_adv_tx->connect_ind.sca;
   12f3c:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   12f40:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   12f44:	f888 3027 	strb.w	r3, [r8, #39]	; 0x27
		rx_fc_lock(conn->handle);
   12f48:	8c30      	ldrh	r0, [r6, #32]
   12f4a:	f7fb fd5f 	bl	ea0c <rx_fc_lock>
		packet_rx_enqueue();
   12f4e:	f7fb fe79 	bl	ec44 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
   12f52:	2003      	movs	r0, #3
   12f54:	f7fa fc82 	bl	d85c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   12f58:	2800      	cmp	r0, #0
   12f5a:	f43f aabd 	beq.w	124d8 <isr+0xb0>
			node_rx->hdr.handle = conn->handle;
   12f5e:	8c33      	ldrh	r3, [r6, #32]
   12f60:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   12f62:	230b      	movs	r3, #11
   12f64:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
   12f66:	7a3b      	ldrb	r3, [r7, #8]
   12f68:	f013 0320 	ands.w	r3, r3, #32
   12f6c:	d00e      	beq.n	12f8c <isr+0xb64>
					((u16_t)conn->access_addr[1] << 8) |
   12f6e:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
   12f70:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
   12f72:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
   12f74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
   12f78:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
   12f7a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
   12f7e:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   12f80:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
   12f82:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
   12f86:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
   12f88:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   12f8a:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
   12f8c:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
   12f8e:	f7fb fe59 	bl	ec44 <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
   12f92:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   12f94:	f8d4 7d6c 	ldr.w	r7, [r4, #3436]	; 0xd6c
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
   12f98:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
   12f9a:	f8d4 3c50 	ldr.w	r3, [r4, #3152]	; 0xc50
   12f9e:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
   12fa0:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12fa2:	f44f 63ef 	mov.w	r3, #1912	; 0x778
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
   12fa6:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   12fa8:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12faa:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
   12fae:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12fb0:	4629      	mov	r1, r5
   12fb2:	9300      	str	r3, [sp, #0]
   12fb4:	4628      	mov	r0, r5
   12fb6:	4bb6      	ldr	r3, [pc, #728]	; (13290 <isr+0xe68>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   12fb8:	f8df a2e8 	ldr.w	sl, [pc, #744]	; 132a4 <isr+0xe7c>
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
   12fbc:	bf38      	it	cc
   12fbe:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12fc0:	f7f8 fdbe 	bl	bb40 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
   12fc4:	f240 7179 	movw	r1, #1913	; 0x779
   12fc8:	f7fc f938 	bl	f23c <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12fcc:	462b      	mov	r3, r5
   12fce:	2204      	movs	r2, #4
   12fd0:	4629      	mov	r1, r5
   12fd2:	9500      	str	r5, [sp, #0]
   12fd4:	4628      	mov	r0, r5
   12fd6:	f7f8 fdb3 	bl	bb40 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   12fda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12fdc:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12fe0:	68a3      	ldr	r3, [r4, #8]
   12fe2:	f896 4020 	ldrb.w	r4, [r6, #32]
		ticker_status =
   12fe6:	9606      	str	r6, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12fe8:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
   12fec:	f44f 63f2 	mov.w	r3, #1936	; 0x790
   12ff0:	9308      	str	r3, [sp, #32]
   12ff2:	4ba8      	ldr	r3, [pc, #672]	; (13294 <isr+0xe6c>)
   12ff4:	9307      	str	r3, [sp, #28]
   12ff6:	4ba8      	ldr	r3, [pc, #672]	; (13298 <isr+0xe70>)
   12ff8:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12ffa:	68f3      	ldr	r3, [r6, #12]
		ticker_status =
   12ffc:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12ffe:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
   13000:	4640      	mov	r0, r8
   13002:	a3a1      	add	r3, pc, #644	; (adr r3, 13288 <isr+0xe60>)
   13004:	e9d3 2300 	ldrd	r2, r3, [r3]
   13008:	4649      	mov	r1, r9
		ticker_status =
   1300a:	9704      	str	r7, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   1300c:	f7ed f92c 	bl	268 <__aeabi_uldivmod>
   13010:	4610      	mov	r0, r2
   13012:	4619      	mov	r1, r3
   13014:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13018:	2300      	movs	r3, #0
   1301a:	f7ed f925 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   1301e:	a39a      	add	r3, pc, #616	; (adr r3, 13288 <isr+0xe60>)
   13020:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   13024:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   13026:	4649      	mov	r1, r9
   13028:	4640      	mov	r0, r8
   1302a:	f7ed f91d 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
   1302e:	990c      	ldr	r1, [sp, #48]	; 0x30
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   13030:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
   13032:	a395      	add	r3, pc, #596	; (adr r3, 13288 <isr+0xe60>)
   13034:	e9d3 2300 	ldrd	r2, r3, [r3]
   13038:	fba1 010a 	umull	r0, r1, r1, sl
   1303c:	f7ed f914 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   13040:	3407      	adds	r4, #7
		ticker_status =
   13042:	b2e4      	uxtb	r4, r4
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   13044:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
   13048:	9000      	str	r0, [sp, #0]
   1304a:	465b      	mov	r3, fp
   1304c:	4622      	mov	r2, r4
   1304e:	e51b      	b.n	12a88 <isr+0x660>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   13050:	f1b8 0f00 	cmp.w	r8, #0
   13054:	f47f ada9 	bne.w	12baa <isr+0x782>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
   13058:	4648      	mov	r0, r9
   1305a:	f003 faf1 	bl	16640 <ctrl_irk_whitelisted>
		if (crc_ok &&
   1305e:	2800      	cmp	r0, #0
   13060:	f43f ad85 	beq.w	12b6e <isr+0x746>
   13064:	e5a1      	b.n	12baa <isr+0x782>
	if (rl_idx != FILTER_IDX_NONE) {
   13066:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   1306a:	d02e      	beq.n	130ca <isr+0xca2>
		return (rl_idx == _radio.scanner.rl_idx);
   1306c:	f894 0c2f 	ldrb.w	r0, [r4, #3119]	; 0xc2f
   13070:	eba0 0e09 	sub.w	lr, r0, r9
   13074:	f1de 0000 	rsbs	r0, lr, #0
   13078:	eb40 000e 	adc.w	r0, r0, lr
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   1307c:	2800      	cmp	r0, #0
   1307e:	f47f ae3d 	bne.w	12cfc <isr+0x8d4>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   13082:	7a38      	ldrb	r0, [r7, #8]
   13084:	f010 000f 	ands.w	r0, r0, #15
   13088:	d065      	beq.n	13156 <isr+0xd2e>
   1308a:	2807      	cmp	r0, #7
   1308c:	d161      	bne.n	13152 <isr+0xd2a>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
   1308e:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
   13092:	075a      	lsls	r2, r3, #29
   13094:	d15f      	bne.n	13156 <isr+0xd2e>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   13096:	7a3b      	ldrb	r3, [r7, #8]
					&dir_report))) ||
   13098:	f003 020b 	and.w	r2, r3, #11
   1309c:	2a02      	cmp	r2, #2
   1309e:	f040 80cd 	bne.w	1323c <isr+0xe14>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   130a2:	7a7b      	ldrb	r3, [r7, #9]
   130a4:	2b00      	cmp	r3, #0
   130a6:	f43f ad62 	beq.w	12b6e <isr+0x746>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   130aa:	f8d4 3c54 	ldr.w	r3, [r4, #3156]	; 0xc54
   130ae:	2b00      	cmp	r3, #0
   130b0:	f47f ad5d 	bne.w	12b6e <isr+0x746>
		err = isr_rx_scan_report(rssi_ready,
   130b4:	f1ba 0f00 	cmp.w	sl, #0
   130b8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   130bc:	bf14      	ite	ne
   130be:	4649      	movne	r1, r9
   130c0:	21ff      	moveq	r1, #255	; 0xff
   130c2:	4628      	mov	r0, r5
   130c4:	f7fb fe06 	bl	ecd4 <isr_rx_scan_report>
   130c8:	e551      	b.n	12b6e <isr+0x746>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   130ca:	7a3a      	ldrb	r2, [r7, #8]
   130cc:	f3c3 1380 	ubfx	r3, r3, #6, #1
   130d0:	f3c2 1280 	ubfx	r2, r2, #6, #1
   130d4:	4293      	cmp	r3, r2
   130d6:	d1d1      	bne.n	1307c <isr+0xc54>
		(memcmp(&_radio.scanner.adv_addr[0],
   130d8:	2206      	movs	r2, #6
   130da:	f107 010a 	add.w	r1, r7, #10
   130de:	486f      	ldr	r0, [pc, #444]	; (1329c <isr+0xe74>)
   130e0:	f7ed fb3f 	bl	762 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   130e4:	fab0 f080 	clz	r0, r0
   130e8:	0940      	lsrs	r0, r0, #5
   130ea:	e7c7      	b.n	1307c <isr+0xc54>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   130ec:	2801      	cmp	r0, #1
   130ee:	d1cc      	bne.n	1308a <isr+0xc62>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
   130f0:	2300      	movs	r3, #0
   130f2:	464a      	mov	r2, r9
   130f4:	4631      	mov	r1, r6
   130f6:	f7fb fc3d 	bl	e974 <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
   130fa:	2800      	cmp	r0, #0
   130fc:	d0c1      	beq.n	13082 <isr+0xc5a>
   130fe:	e602      	b.n	12d06 <isr+0x8de>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   13100:	f894 2c2d 	ldrb.w	r2, [r4, #3117]	; 0xc2d
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   13104:	4966      	ldr	r1, [pc, #408]	; (132a0 <isr+0xe78>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   13106:	09d2      	lsrs	r2, r2, #7
   13108:	f362 1386 	bfi	r3, r2, #6, #1
   1310c:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   1310e:	2206      	movs	r2, #6
   13110:	e643      	b.n	12d9a <isr+0x972>
				conn_space_us += conn_interval_us;
   13112:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13114:	4493      	add	fp, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
   13116:	f1bb 0f00 	cmp.w	fp, #0
   1311a:	dbfa      	blt.n	13112 <isr+0xcea>
   1311c:	459b      	cmp	fp, r3
   1311e:	d3f8      	bcc.n	13112 <isr+0xcea>
				(conn_space_us - conn_offset_us) / 1250;
   13120:	ebab 0303 	sub.w	r3, fp, r3
			pdu_adv_tx->connect_ind.win_offset =
   13124:	f240 42e2 	movw	r2, #1250	; 0x4e2
   13128:	fbb3 f3f2 	udiv	r3, r3, r2
   1312c:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
   1312e:	7d6b      	ldrb	r3, [r5, #21]
   13130:	3301      	adds	r3, #1
   13132:	756b      	strb	r3, [r5, #21]
   13134:	e666      	b.n	12e04 <isr+0x9dc>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   13136:	2206      	movs	r2, #6
   13138:	2100      	movs	r1, #0
   1313a:	4618      	mov	r0, r3
   1313c:	f7ed fb6a 	bl	814 <memset>
				pdu_adv_tx->rx_addr;
   13140:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   13142:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
   13144:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
   13148:	f888 300d 	strb.w	r3, [r8, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   1314c:	2206      	movs	r2, #6
   1314e:	4658      	mov	r0, fp
   13150:	e6e6      	b.n	12f20 <isr+0xaf8>
		   (_radio.scanner.phy)) ||
   13152:	2806      	cmp	r0, #6
   13154:	d165      	bne.n	13222 <isr+0xdfa>
		 (_radio.scanner.type != 0) &&
   13156:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   1315a:	071b      	lsls	r3, r3, #28
   1315c:	d55e      	bpl.n	1321c <isr+0xdf4>
		 (_radio.scanner.type != 0) &&
   1315e:	f8d4 2c54 	ldr.w	r2, [r4, #3156]	; 0xc54
   13162:	2a00      	cmp	r2, #0
   13164:	d15a      	bne.n	1321c <isr+0xdf4>
		err = isr_rx_scan_report(rssi_ready,
   13166:	f1ba 0f00 	cmp.w	sl, #0
   1316a:	bf14      	ite	ne
   1316c:	4649      	movne	r1, r9
   1316e:	21ff      	moveq	r1, #255	; 0xff
   13170:	4628      	mov	r0, r5
   13172:	f7fb fdaf 	bl	ecd4 <isr_rx_scan_report>
		if (err) {
   13176:	2800      	cmp	r0, #0
   13178:	f47f acf9 	bne.w	12b6e <isr+0x746>
		if(pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND){
   1317c:	7a3b      	ldrb	r3, [r7, #8]
   1317e:	f003 030f 	and.w	r3, r3, #15
   13182:	2b07      	cmp	r3, #7
   13184:	d101      	bne.n	1318a <isr+0xd62>
			pdu_adv_tx = (void *)radio_pkt_scratch_get();
   13186:	f004 faa9 	bl	176dc <radio_pkt_scratch_get>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   1318a:	f004 faa7 	bl	176dc <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   1318e:	7803      	ldrb	r3, [r0, #0]
   13190:	2203      	movs	r2, #3
   13192:	f362 0303 	bfi	r3, r2, #0, #4
   13196:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   13198:	7a3b      	ldrb	r3, [r7, #8]
   1319a:	7802      	ldrb	r2, [r0, #0]
   1319c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   131a0:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
   131a4:	230c      	movs	r3, #12
   131a6:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   131a8:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   131aa:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
   131ac:	4648      	mov	r0, r9
   131ae:	f003 f9ed 	bl	1658c <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   131b2:	f894 3c2e 	ldrb.w	r3, [r4, #3118]	; 0xc2e
		lrpa = ctrl_lrpa_get(rl_idx);
   131b6:	4601      	mov	r1, r0
   131b8:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
   131ba:	f013 0f01 	tst.w	r3, #1
   131be:	f810 3b02 	ldrb.w	r3, [r0], #2
   131c2:	d022      	beq.n	1320a <isr+0xde2>
   131c4:	b309      	cbz	r1, 1320a <isr+0xde2>
			pdu_adv_tx->tx_addr = 1;
   131c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   131ca:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   131cc:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   131ce:	f7ed faf5 	bl	7bc <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
   131d2:	2206      	movs	r2, #6
   131d4:	f107 010a 	add.w	r1, r7, #10
   131d8:	f105 0008 	add.w	r0, r5, #8
   131dc:	f7ed faee 	bl	7bc <memcpy>
		_radio.scanner.state = 1;
   131e0:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
   131e4:	f043 0302 	orr.w	r3, r3, #2
   131e8:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
		radio_tmr_tifs_set(RADIO_TIFS);
   131ec:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
   131ee:	2302      	movs	r3, #2
   131f0:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
   131f2:	f004 fb15 	bl	17820 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   131f6:	2000      	movs	r0, #0
   131f8:	f004 fa74 	bl	176e4 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
   131fc:	4628      	mov	r0, r5
   131fe:	f004 f9e9 	bl	175d4 <radio_pkt_tx_set>
		radio_tmr_end_capture();
   13202:	f004 fbd7 	bl	179b4 <radio_tmr_end_capture>
   13206:	f7ff ba77 	b.w	126f8 <isr+0x2d0>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   1320a:	f894 2c2d 	ldrb.w	r2, [r4, #3117]	; 0xc2d
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   1320e:	4924      	ldr	r1, [pc, #144]	; (132a0 <isr+0xe78>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   13210:	09d2      	lsrs	r2, r2, #7
   13212:	f362 1386 	bfi	r3, r2, #6, #1
   13216:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   13218:	2206      	movs	r2, #6
   1321a:	e7d8      	b.n	131ce <isr+0xda6>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1321c:	2800      	cmp	r0, #0
   1321e:	f43f af40 	beq.w	130a2 <isr+0xc7a>
   13222:	2801      	cmp	r0, #1
   13224:	f47f af37 	bne.w	13096 <isr+0xc6e>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
   13228:	ab10      	add	r3, sp, #64	; 0x40
   1322a:	464a      	mov	r2, r9
   1322c:	4631      	mov	r1, r6
   1322e:	2000      	movs	r0, #0
   13230:	f7fb fba0 	bl	e974 <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   13234:	2800      	cmp	r0, #0
   13236:	f47f af34 	bne.w	130a2 <isr+0xc7a>
   1323a:	e72c      	b.n	13096 <isr+0xc6e>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   1323c:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
   13240:	2b07      	cmp	r3, #7
   13242:	d105      	bne.n	13250 <isr+0xe28>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
   13244:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
   13248:	0758      	lsls	r0, r3, #29
   1324a:	f47f af2a 	bne.w	130a2 <isr+0xc7a>
   1324e:	e48e      	b.n	12b6e <isr+0x746>
		   (_radio.scanner.phy)) ||
   13250:	2b04      	cmp	r3, #4
   13252:	f47f ac8c 	bne.w	12b6e <isr+0x746>
		   (_radio.scanner.state != 0) &&
   13256:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   1325a:	0799      	lsls	r1, r3, #30
   1325c:	f57f ac87 	bpl.w	12b6e <isr+0x746>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   13260:	f004 fa3c 	bl	176dc <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   13264:	7a3b      	ldrb	r3, [r7, #8]
   13266:	7802      	ldrb	r2, [r0, #0]
   13268:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1326c:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   13270:	f47f ac7d 	bne.w	12b6e <isr+0x746>
		(memcmp(&sreq->scan_req.adv_addr[0],
   13274:	2206      	movs	r2, #6
   13276:	f107 010a 	add.w	r1, r7, #10
   1327a:	3008      	adds	r0, #8
   1327c:	f7ed fa71 	bl	762 <memcmp>
		   (_radio.scanner.state != 0) &&
   13280:	2800      	cmp	r0, #0
   13282:	f43f af0e 	beq.w	130a2 <isr+0xc7a>
   13286:	e472      	b.n	12b6e <isr+0x746>
   13288:	1afd498d 	.word	0x1afd498d
   1328c:	00000007 	.word	0x00000007
   13290:	0000f23d 	.word	0x0000f23d
   13294:	0000f29d 	.word	0x0000f29d
   13298:	00010c8d 	.word	0x00010c8d
   1329c:	2000183e 	.word	0x2000183e
   132a0:	20001838 	.word	0x20001838
   132a4:	3b9aca00 	.word	0x3b9aca00
	_radio.packet_counter++;
   132a8:	f894 3d00 	ldrb.w	r3, [r4, #3328]	; 0xd00
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   132ac:	f894 2d29 	ldrb.w	r2, [r4, #3369]	; 0xd29
	_radio.packet_counter++;
   132b0:	3301      	adds	r3, #1
   132b2:	f884 3d00 	strb.w	r3, [r4, #3328]	; 0xd00
	u8_t rx_enqueue = 0;
   132b6:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   132b8:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
	u8_t rx_enqueue = 0;
   132bc:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   132c0:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   132c4:	2301      	movs	r3, #1
   132c6:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
   132ca:	2f00      	cmp	r7, #0
   132cc:	f000 829f 	beq.w	1380e <isr+0x13e6>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
   132d0:	f8d4 5cfc 	ldr.w	r5, [r4, #3324]	; 0xcfc
   132d4:	f898 1008 	ldrb.w	r1, [r8, #8]
   132d8:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   132dc:	f3c1 0180 	ubfx	r1, r1, #2, #1
   132e0:	f003 0201 	and.w	r2, r3, #1
   132e4:	4291      	cmp	r1, r2
   132e6:	f000 8181 	beq.w	135ec <isr+0x11c4>
		_radio.conn_curr->sn++;
   132ea:	f082 0201 	eor.w	r2, r2, #1
   132ee:	f362 0300 	bfi	r3, r2, #0, #1
   132f2:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
   132f6:	7ce3      	ldrb	r3, [r4, #19]
   132f8:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
   132fa:	bf02      	ittt	eq
   132fc:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
   13300:	f043 0301 	orreq.w	r3, r3, #1
   13304:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
   13308:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   1330c:	061a      	lsls	r2, r3, #24
   1330e:	f100 8168 	bmi.w	135e2 <isr+0x11ba>
			node_tx = _radio.conn_curr->pkt_tx_head;
   13312:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
   13316:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
   1331a:	1d30      	adds	r0, r6, #4
   1331c:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
   13320:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
   13324:	f1b9 0f00 	cmp.w	r9, #0
   13328:	f000 808e 	beq.w	13448 <isr+0x1020>
				if (_radio.conn_curr->enc_tx) {
   1332c:	069b      	lsls	r3, r3, #26
   1332e:	d50b      	bpl.n	13348 <isr+0xf20>
					_radio.conn_curr->ccm_tx.counter++;
   13330:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
   13334:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
   13338:	f11b 0201 	adds.w	r2, fp, #1
   1333c:	f14c 0300 	adc.w	r3, ip, #0
   13340:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
   13344:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
   13348:	5c43      	ldrb	r3, [r0, r1]
   1334a:	f003 0303 	and.w	r3, r3, #3
   1334e:	2b03      	cmp	r3, #3
   13350:	d17a      	bne.n	13448 <isr+0x1020>
	switch (pdu_data_tx->llctrl.opcode) {
   13352:	f89a 3003 	ldrb.w	r3, [sl, #3]
   13356:	3b02      	subs	r3, #2
   13358:	2b16      	cmp	r3, #22
   1335a:	d875      	bhi.n	13448 <isr+0x1020>
   1335c:	e8df f013 	tbh	[pc, r3, lsl #1]
   13360:	00580017 	.word	0x00580017
   13364:	007400aa 	.word	0x007400aa
   13368:	00740074 	.word	0x00740074
   1336c:	00740074 	.word	0x00740074
   13370:	00810076 	.word	0x00810076
   13374:	00b10074 	.word	0x00b10074
   13378:	00740074 	.word	0x00740074
   1337c:	00740074 	.word	0x00740074
   13380:	00740074 	.word	0x00740074
   13384:	007400bb 	.word	0x007400bb
   13388:	00da00d3 	.word	0x00da00d3
   1338c:	0105      	.short	0x0105
		_radio.state = STATE_CLOSE;
   1338e:	2303      	movs	r3, #3
   13390:	7523      	strb	r3, [r4, #20]
		radio_disable();
   13392:	f004 f94d 	bl	17630 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   13396:	f004 f969 	bl	1766c <radio_is_ready>
   1339a:	2800      	cmp	r0, #0
   1339c:	f47f a89c 	bne.w	124d8 <isr+0xb0>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
   133a0:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
   133a4:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   133a8:	2913      	cmp	r1, #19
   133aa:	bf08      	it	eq
   133ac:	2116      	moveq	r1, #22
   133ae:	f7fb fc21 	bl	ebf4 <terminate_ind_rx_enqueue>
		terminate = 1;
   133b2:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   133b4:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   133b8:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
   133bc:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
   133be:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   133c2:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
   133c6:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   133c8:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
   133cc:	d11e      	bne.n	1340c <isr+0xfe4>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   133ce:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   133d2:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
   133d6:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   133d8:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
   133da:	f880 2150 	strb.w	r2, [r0, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   133de:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   133e2:	f040 80c9 	bne.w	13578 <isr+0x1150>
		if (node_tx) {
   133e6:	b18e      	cbz	r6, 1340c <isr+0xfe4>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   133e8:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
   133ec:	f8d3 e000 	ldr.w	lr, [r3]
   133f0:	f8c0 e13c 	str.w	lr, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   133f4:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
   133f6:	bf06      	itte	eq
   133f8:	f8c0 2140 	streq.w	r2, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
   133fc:	f8c0 2144 	streq.w	r2, [r0, #324]	; 0x144
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
   13400:	f8c0 e140 	strne.w	lr, [r0, #320]	; 0x140
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   13404:	49d7      	ldr	r1, [pc, #860]	; (13764 <isr+0x133c>)
   13406:	4630      	mov	r0, r6
   13408:	f7f7 fca1 	bl	ad4e <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
   1340c:	2600      	movs	r6, #0
   1340e:	e0bc      	b.n	1358a <isr+0x1162>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   13410:	2208      	movs	r2, #8
   13412:	f10a 010e 	add.w	r1, sl, #14
   13416:	f105 0094 	add.w	r0, r5, #148	; 0x94
   1341a:	f7ed f9cf 	bl	7bc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   1341e:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   13422:	2204      	movs	r2, #4
   13424:	f10a 0116 	add.w	r1, sl, #22
   13428:	f500 7089 	add.w	r0, r0, #274	; 0x112
   1342c:	f7ed f9c6 	bl	7bc <memcpy>
		_radio.conn_curr->pause_tx = 1;
   13430:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   13434:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13438:	f042 0208 	orr.w	r2, r2, #8
   1343c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   13440:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
   13444:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   13448:	2500      	movs	r5, #0
   1344a:	e7b3      	b.n	133b4 <isr+0xf8c>
		_radio.conn_curr->pause_tx = 1;
   1344c:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   13450:	f043 0348 	orr.w	r3, r3, #72	; 0x48
   13454:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   13458:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
   1345c:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
   13460:	e7f2      	b.n	13448 <isr+0x1020>
		if (_radio.role == ROLE_MASTER) {
   13462:	f894 a013 	ldrb.w	sl, [r4, #19]
   13466:	fa5f fa8a 	uxtb.w	sl, sl
   1346a:	f1ba 0f04 	cmp.w	sl, #4
   1346e:	d121      	bne.n	134b4 <isr+0x108c>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13470:	7933      	ldrb	r3, [r6, #4]
   13472:	f043 0303 	orr.w	r3, r3, #3
   13476:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   13478:	2317      	movs	r3, #23
   1347a:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1347c:	2303      	movs	r3, #3
   1347e:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
   13480:	2208      	movs	r2, #8
   13482:	f105 017a 	add.w	r1, r5, #122	; 0x7a
   13486:	3004      	adds	r0, #4
   13488:	f7ed f998 	bl	7bc <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
   1348c:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
   13490:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
   13492:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
   13496:	7473      	strb	r3, [r6, #17]
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
   13498:	f106 0112 	add.w	r1, r6, #18
   1349c:	2208      	movs	r2, #8
   1349e:	6860      	ldr	r0, [r4, #4]
   134a0:	f7ef ff60 	bl	3364 <entropy_get_entropy_isr>
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.ivm,
   134a4:	f106 011a 	add.w	r1, r6, #26
   134a8:	4652      	mov	r2, sl
   134aa:	6860      	ldr	r0, [r4, #4]
   134ac:	f7ef ff5a 	bl	3364 <entropy_get_entropy_isr>
			*node_tx = NULL;
   134b0:	2600      	movs	r6, #0
   134b2:	e7c9      	b.n	13448 <isr+0x1020>
			_radio.conn_curr->pause_tx = 1;
   134b4:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   134b8:	f043 0308 	orr.w	r3, r3, #8
   134bc:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
   134c0:	e7c2      	b.n	13448 <isr+0x1020>
		_radio.conn_curr->pause_rx = 0;
   134c2:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   134c6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   134ca:	f36f 03c3 	bfc	r3, #3, #1
   134ce:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   134d2:	2300      	movs	r3, #0
   134d4:	e7c2      	b.n	1345c <isr+0x1034>
		if ((_radio.conn_curr->llcp_length.req !=
   134d6:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   134da:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   134de:	429a      	cmp	r2, r3
   134e0:	d0b2      	beq.n	13448 <isr+0x1020>
		    (_radio.conn_curr->llcp_length.state ==
   134e2:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
   134e6:	f003 0203 	and.w	r2, r3, #3
   134ea:	2a01      	cmp	r2, #1
   134ec:	d1ac      	bne.n	13448 <isr+0x1020>
			_radio.conn_curr->pause_tx = 1;
   134ee:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
   134f2:	f042 0208 	orr.w	r2, r2, #8
   134f6:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
   134fa:	2202      	movs	r2, #2
   134fc:	f362 0301 	bfi	r3, r2, #0, #2
   13500:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
   13504:	e7a0      	b.n	13448 <isr+0x1020>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   13506:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   1350a:	2202      	movs	r2, #2
   1350c:	f362 0301 	bfi	r3, r2, #0, #2
   13510:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
   13514:	7ce3      	ldrb	r3, [r4, #19]
   13516:	2b03      	cmp	r3, #3
   13518:	d196      	bne.n	13448 <isr+0x1020>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   1351a:	2301      	movs	r3, #1
   1351c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   13520:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
   13524:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   13528:	2202      	movs	r2, #2
   1352a:	2304      	movs	r3, #4
   1352c:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
   13530:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   13534:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
   13538:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
   1353c:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
   13540:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   13544:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
   13548:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1354c:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
	conn->phy_tx_time = phy_tx_time[phys];
   13550:	f003 0307 	and.w	r3, r3, #7
   13554:	aa12      	add	r2, sp, #72	; 0x48
   13556:	4413      	add	r3, r2
   13558:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   1355c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
   13560:	f363 0202 	bfi	r2, r3, #0, #3
   13564:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
   13568:	e76e      	b.n	13448 <isr+0x1020>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
   1356a:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
   1356e:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   13572:	f3c3 0382 	ubfx	r3, r3, #2, #3
   13576:	e7f3      	b.n	13560 <isr+0x1138>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   13578:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
   1357c:	4293      	cmp	r3, r2
   1357e:	681b      	ldr	r3, [r3, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   13580:	bf08      	it	eq
   13582:	f8c0 3148 	streq.w	r3, [r0, #328]	; 0x148
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   13586:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
	if (terminate) {
   1358a:	b37d      	cbz	r5, 135ec <isr+0x11c4>
		connection_release(_radio.conn_curr);
   1358c:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   13590:	f7fb fd44 	bl	f01c <connection_release>
		_radio.conn_curr = NULL;
   13594:	2300      	movs	r3, #0
   13596:	f8c4 3cfc 	str.w	r3, [r4, #3324]	; 0xcfc
	if (!radio_tmr_aa_restore()) {
   1359a:	f004 f9ff 	bl	1799c <radio_tmr_aa_restore>
   1359e:	b918      	cbnz	r0, 135a8 <isr+0x1180>
		radio_tmr_aa_save(radio_tmr_aa_get());
   135a0:	f004 f9f0 	bl	17984 <radio_tmr_aa_get>
   135a4:	f004 f9f4 	bl	17990 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
   135a8:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   135ac:	2b00      	cmp	r3, #0
   135ae:	f43e afe3 	beq.w	12578 <isr+0x150>
	if (tx_release) {
   135b2:	b11e      	cbz	r6, 135bc <isr+0x1194>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   135b4:	4631      	mov	r1, r6
   135b6:	8c18      	ldrh	r0, [r3, #32]
   135b8:	f7fb fcbe 	bl	ef38 <pdu_node_tx_release>
	if (rx_enqueue) {
   135bc:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
   135c0:	2b00      	cmp	r3, #0
   135c2:	f43e afd9 	beq.w	12578 <isr+0x150>
		rx_fc_lock(_radio.conn_curr->handle);
   135c6:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   135ca:	8c18      	ldrh	r0, [r3, #32]
   135cc:	f7fb fa1e 	bl	ea0c <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
   135d0:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   135d4:	8c1b      	ldrh	r3, [r3, #32]
   135d6:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
   135da:	f7fb fb33 	bl	ec44 <packet_rx_enqueue>
   135de:	f7fe bfcb 	b.w	12578 <isr+0x150>
			_radio.conn_curr->empty = 0;
   135e2:	f36f 13c7 	bfc	r3, #7, #1
   135e6:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
   135ea:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   135ec:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   135f0:	f898 2008 	ldrb.w	r2, [r8, #8]
   135f4:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   135f8:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   135fc:	f3c3 0340 	ubfx	r3, r3, #1, #1
   13600:	429a      	cmp	r2, r3
   13602:	f040 80d4 	bne.w	137ae <isr+0x1386>
	    (packet_rx_reserve_get(3) != 0) &&
   13606:	2003      	movs	r0, #3
   13608:	f7fa f928 	bl	d85c <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   1360c:	2800      	cmp	r0, #0
   1360e:	f000 80ce 	beq.w	137ae <isr+0x1386>
	    (packet_rx_reserve_get(3) != 0) &&
   13612:	f894 3d6a 	ldrb.w	r3, [r4, #3434]	; 0xd6a
   13616:	b393      	cbz	r3, 1367e <isr+0x1256>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   13618:	f8d4 3d34 	ldr.w	r3, [r4, #3380]	; 0xd34
   1361c:	f8d4 2d38 	ldr.w	r2, [r4, #3384]	; 0xd38
	    ((_radio.fc_ena == 0) ||
   13620:	4293      	cmp	r3, r2
   13622:	d105      	bne.n	13630 <isr+0x1208>
	      (_radio.fc_req == _radio.fc_ack)) ||
   13624:	f894 2d68 	ldrb.w	r2, [r4, #3432]	; 0xd68
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   13628:	f894 1d69 	ldrb.w	r1, [r4, #3433]	; 0xd69
   1362c:	4291      	cmp	r1, r2
   1362e:	d026      	beq.n	1367e <isr+0x1256>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   13630:	f8d4 2d38 	ldr.w	r2, [r4, #3384]	; 0xd38
	      (_radio.fc_req == _radio.fc_ack)) ||
   13634:	4293      	cmp	r3, r2
   13636:	f000 80ba 	beq.w	137ae <isr+0x1386>
	      (_radio.fc_req != _radio.fc_ack) &&
   1363a:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1363e:	f894 2d69 	ldrb.w	r2, [r4, #3433]	; 0xd69
   13642:	429a      	cmp	r2, r3
   13644:	f000 80b3 	beq.w	137ae <isr+0x1386>
		(((_radio.fc_req == 0) &&
   13648:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
	      (_radio.fc_req != _radio.fc_ack) &&
   1364c:	b933      	cbnz	r3, 1365c <isr+0x1234>
		   _radio.conn_curr->handle)) ||
   1364e:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
		(((_radio.fc_req == 0) &&
   13652:	f8b4 2d66 	ldrh.w	r2, [r4, #3430]	; 0xd66
   13656:	8c1b      	ldrh	r3, [r3, #32]
   13658:	429a      	cmp	r2, r3
   1365a:	d010      	beq.n	1367e <isr+0x1256>
		 ((_radio.fc_req != 0) &&
   1365c:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
		   _radio.conn_curr->handle)) ||
   13660:	2b00      	cmp	r3, #0
   13662:	f000 80a4 	beq.w	137ae <isr+0x1386>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   13666:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
		   _radio.conn_curr->handle)))))) {
   1366a:	f8d4 1cfc 	ldr.w	r1, [r4, #3324]	; 0xcfc
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   1366e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
   13672:	f8b3 2d60 	ldrh.w	r2, [r3, #3424]	; 0xd60
   13676:	8c0b      	ldrh	r3, [r1, #32]
   13678:	429a      	cmp	r2, r3
   1367a:	f040 8098 	bne.w	137ae <isr+0x1386>
		if (pdu_data_rx->len != 0) {
   1367e:	f898 5009 	ldrb.w	r5, [r8, #9]
   13682:	2d00      	cmp	r5, #0
   13684:	f000 809c 	beq.w	137c0 <isr+0x1398>
			if (_radio.conn_curr->enc_rx) {
   13688:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   1368c:	f893 50f8 	ldrb.w	r5, [r3, #248]	; 0xf8
   13690:	f015 0510 	ands.w	r5, r5, #16
   13694:	d005      	beq.n	136a2 <isr+0x127a>
				done = radio_ccm_is_done();
   13696:	f004 fa27 	bl	17ae8 <radio_ccm_is_done>
				LL_ASSERT(done);
   1369a:	2800      	cmp	r0, #0
   1369c:	f43e af1c 	beq.w	124d8 <isr+0xb0>
				ccm_rx_increment = 1;
   136a0:	2501      	movs	r5, #1
			if ((_radio.conn_curr->enc_rx &&
   136a2:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   136a6:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   136aa:	06d9      	lsls	r1, r3, #27
   136ac:	d42c      	bmi.n	13708 <isr+0x12e0>
			    (_radio.conn_curr->pause_rx &&
   136ae:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   136b2:	f898 3008 	ldrb.w	r3, [r8, #8]
   136b6:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
   136ba:	f012 0f04 	tst.w	r2, #4
   136be:	d13d      	bne.n	1373c <isr+0x1314>
			_radio.conn_curr->appto_expire = 0;
   136c0:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
   136c2:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
   136c6:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
   136ca:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
   136ce:	d004      	beq.n	136da <isr+0x12b2>
   136d0:	2b02      	cmp	r3, #2
   136d2:	d865      	bhi.n	137a0 <isr+0x1378>
				*rx_enqueue = 1;
   136d4:	2301      	movs	r3, #1
   136d6:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			_radio.conn_curr->nesn++;
   136da:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   136de:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   136e2:	f082 0202 	eor.w	r2, r2, #2
   136e6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
   136ea:	2d00      	cmp	r5, #0
   136ec:	d05f      	beq.n	137ae <isr+0x1386>
				_radio.conn_curr->ccm_rx.counter++;
   136ee:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
   136f2:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
   136f6:	f119 0001 	adds.w	r0, r9, #1
   136fa:	f14a 0100 	adc.w	r1, sl, #0
   136fe:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
   13702:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
   13706:	e052      	b.n	137ae <isr+0x1386>
			     !radio_ccm_mic_is_valid()) ||
   13708:	f004 fa0c 	bl	17b24 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
   1370c:	2800      	cmp	r0, #0
   1370e:	d1ce      	bne.n	136ae <isr+0x1286>
				_radio.state = STATE_CLOSE;
   13710:	2303      	movs	r3, #3
   13712:	7523      	strb	r3, [r4, #20]
				radio_disable();
   13714:	f003 ff8c 	bl	17630 <radio_disable>
				LL_ASSERT(!radio_is_ready());
   13718:	f003 ffa8 	bl	1766c <radio_is_ready>
   1371c:	4605      	mov	r5, r0
   1371e:	2800      	cmp	r0, #0
   13720:	f47e aeda 	bne.w	124d8 <isr+0xb0>
				terminate_ind_rx_enqueue(_radio.conn_curr,
   13724:	213d      	movs	r1, #61	; 0x3d
   13726:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   1372a:	f7fb fa63 	bl	ebf4 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
   1372e:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   13732:	f7fb fc73 	bl	f01c <connection_release>
				_radio.conn_curr = NULL;
   13736:	f8c4 5cfc 	str.w	r5, [r4, #3324]	; 0xcfc
   1373a:	e72e      	b.n	1359a <isr+0x1172>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   1373c:	f003 0103 	and.w	r1, r3, #3
   13740:	2903      	cmp	r1, #3
   13742:	d1e5      	bne.n	13710 <isr+0x12e8>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   13744:	f990 e01d 	ldrsb.w	lr, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
   13748:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   1374c:	f1be 0f00 	cmp.w	lr, #0
   13750:	f002 0240 	and.w	r2, r2, #64	; 0x40
   13754:	db18      	blt.n	13788 <isr+0x1360>
	       (!conn->role &&
   13756:	b93a      	cbnz	r2, 13768 <isr+0x1340>
		((!conn->refresh &&
   13758:	2902      	cmp	r1, #2
   1375a:	d0b1      	beq.n	136c0 <isr+0x1298>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1375c:	2911      	cmp	r1, #17
   1375e:	d8d7      	bhi.n	13710 <isr+0x12e8>
   13760:	e00c      	b.n	1377c <isr+0x1354>
   13762:	bf00      	nop
   13764:	2000194c 	.word	0x2000194c
		 (conn->refresh &&
   13768:	1e8a      	subs	r2, r1, #2
   1376a:	b2d2      	uxtb	r2, r2
   1376c:	2a09      	cmp	r2, #9
   1376e:	d8f5      	bhi.n	1375c <isr+0x1334>
   13770:	f240 2e05 	movw	lr, #517	; 0x205
   13774:	fa2e f202 	lsr.w	r2, lr, r2
   13778:	07d2      	lsls	r2, r2, #31
   1377a:	d4a1      	bmi.n	136c0 <isr+0x1298>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1377c:	4ab6      	ldr	r2, [pc, #728]	; (13a58 <isr+0x1630>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1377e:	fa22 f101 	lsr.w	r1, r2, r1
   13782:	07ca      	lsls	r2, r1, #31
   13784:	d5c4      	bpl.n	13710 <isr+0x12e8>
   13786:	e79b      	b.n	136c0 <isr+0x1298>
	       (conn->role &&
   13788:	b92a      	cbnz	r2, 13796 <isr+0x136e>
		((!conn->refresh &&
   1378a:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1378c:	d098      	beq.n	136c0 <isr+0x1298>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1378e:	2911      	cmp	r1, #17
   13790:	d8be      	bhi.n	13710 <isr+0x12e8>
   13792:	4ab2      	ldr	r2, [pc, #712]	; (13a5c <isr+0x1634>)
   13794:	e7f3      	b.n	1377e <isr+0x1356>
		 (conn->refresh &&
   13796:	1e8a      	subs	r2, r1, #2
   13798:	2a01      	cmp	r2, #1
   1379a:	d991      	bls.n	136c0 <isr+0x1298>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1379c:	290b      	cmp	r1, #11
   1379e:	e7f5      	b.n	1378c <isr+0x1364>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
   137a0:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
   137a4:	4640      	mov	r0, r8
   137a6:	f7fd fd8f 	bl	112c8 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
   137aa:	2800      	cmp	r0, #0
   137ac:	d095      	beq.n	136da <isr+0x12b2>
		_radio.conn_curr->supervision_expire = 0;
   137ae:	f8d4 2cfc 	ldr.w	r2, [r4, #3324]	; 0xcfc
		_radio.crc_expire = 0;
   137b2:	2300      	movs	r3, #0
   137b4:	f884 3d01 	strb.w	r3, [r4, #3329]	; 0xd01
	u8_t crc_close = 0;
   137b8:	461d      	mov	r5, r3
		_radio.conn_curr->supervision_expire = 0;
   137ba:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
   137be:	e03d      	b.n	1383c <isr+0x1414>
		} else if ((_radio.conn_curr->enc_rx) ||
   137c0:	f8d4 2cfc 	ldr.w	r2, [r4, #3324]	; 0xcfc
   137c4:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   137c8:	f013 0f14 	tst.w	r3, #20
   137cc:	d085      	beq.n	136da <isr+0x12b2>
					    (conn->latency + 6)) ?
   137ce:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
   137d0:	f8b2 004a 	ldrh.w	r0, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
   137d4:	1d8b      	adds	r3, r1, #6
			appto_reload_new = (conn->apto_reload >
   137d6:	4298      	cmp	r0, r3
   137d8:	bfc4      	itt	gt
   137da:	1f83      	subgt	r3, r0, #6
   137dc:	1a5b      	subgt	r3, r3, r1
			if (conn->appto_reload != appto_reload_new) {
   137de:	f8b2 1046 	ldrh.w	r1, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
   137e2:	bfcc      	ite	gt
   137e4:	b29b      	uxthgt	r3, r3
   137e6:	4603      	movle	r3, r0
			if (conn->appto_reload != appto_reload_new) {
   137e8:	4299      	cmp	r1, r3
				conn->appto_reload = appto_reload_new;
   137ea:	bf1e      	ittt	ne
   137ec:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
   137f0:	2300      	movne	r3, #0
   137f2:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
   137f6:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
   137fa:	2b00      	cmp	r3, #0
   137fc:	f47f af6d 	bne.w	136da <isr+0x12b2>
				conn->appto_expire = conn->appto_reload;
   13800:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
   13804:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
   13808:	f8a2 004c 	strh.w	r0, [r2, #76]	; 0x4c
   1380c:	e765      	b.n	136da <isr+0x12b2>
		if (_radio.crc_expire == 0) {
   1380e:	f894 3d01 	ldrb.w	r3, [r4, #3329]	; 0xd01
   13812:	b913      	cbnz	r3, 1381a <isr+0x13f2>
			_radio.crc_expire = 2;
   13814:	2302      	movs	r3, #2
   13816:	f884 3d01 	strb.w	r3, [r4, #3329]	; 0xd01
		_radio.crc_expire--;
   1381a:	f894 3d01 	ldrb.w	r3, [r4, #3329]	; 0xd01
		if (!_radio.conn_curr->supervision_expire) {
   1381e:	f8d4 2cfc 	ldr.w	r2, [r4, #3324]	; 0xcfc
		_radio.crc_expire--;
   13822:	3b01      	subs	r3, #1
   13824:	b2db      	uxtb	r3, r3
   13826:	f884 3d01 	strb.w	r3, [r4, #3329]	; 0xd01
		if (!_radio.conn_curr->supervision_expire) {
   1382a:	f8b2 6040 	ldrh.w	r6, [r2, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
   1382e:	fab3 f583 	clz	r5, r3
   13832:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
   13834:	bb86      	cbnz	r6, 13898 <isr+0x1470>
			_radio.conn_curr->supervision_expire =
   13836:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
   13838:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   1383c:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   13840:	a910      	add	r1, sp, #64	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   13842:	f890 90f8 	ldrb.w	r9, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   13846:	f7fd fb15 	bl	10e74 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   1384a:	7d23      	ldrb	r3, [r4, #20]
   1384c:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   1384e:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   13852:	d010      	beq.n	13876 <isr+0x144e>
   13854:	bb15      	cbnz	r5, 1389c <isr+0x1474>
   13856:	b137      	cbz	r7, 13866 <isr+0x143e>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   13858:	f898 3008 	ldrb.w	r3, [r8, #8]
   1385c:	06dd      	lsls	r5, r3, #27
   1385e:	d402      	bmi.n	13866 <isr+0x143e>
			 (pdu_data_tx->len == 0)) ||
   13860:	9b10      	ldr	r3, [sp, #64]	; 0x40
			((crc_ok) && (pdu_data_rx->md == 0) &&
   13862:	785b      	ldrb	r3, [r3, #1]
   13864:	b1d3      	cbz	r3, 1389c <isr+0x1474>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
   13866:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
			 (pdu_data_tx->len == 0)) ||
   1386a:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   1386e:	2b00      	cmp	r3, #0
   13870:	bf0c      	ite	eq
   13872:	2302      	moveq	r3, #2
   13874:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
   13876:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   13878:	7523      	strb	r3, [r4, #20]
	if (_radio.state == STATE_CLOSE) {
   1387a:	d129      	bne.n	138d0 <isr+0x14a8>
		if (_radio.role == ROLE_MASTER) {
   1387c:	7ce3      	ldrb	r3, [r4, #19]
   1387e:	2b04      	cmp	r3, #4
   13880:	d10e      	bne.n	138a0 <isr+0x1478>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   13882:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   13886:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1388a:	f369 12c7 	bfi	r2, r9, #7, #1
   1388e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
   13892:	f003 fecd 	bl	17630 <radio_disable>
   13896:	e680      	b.n	1359a <isr+0x1172>
	struct radio_pdu_node_tx *tx_release = NULL;
   13898:	2600      	movs	r6, #0
   1389a:	e7cf      	b.n	1383c <isr+0x1414>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   1389c:	2303      	movs	r3, #3
   1389e:	e7ea      	b.n	13876 <isr+0x144e>
			radio_switch_complete_and_disable();
   138a0:	f003 ff36 	bl	17710 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
   138a4:	9910      	ldr	r1, [sp, #64]	; 0x40
   138a6:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   138aa:	780b      	ldrb	r3, [r1, #0]
   138ac:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
   138b0:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   138b4:	f3c2 0240 	ubfx	r2, r2, #1, #1
   138b8:	f362 0382 	bfi	r3, r2, #2, #1
   138bc:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   138be:	f7fa fa8d 	bl	dddc <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
   138c2:	f003 fed3 	bl	1766c <radio_is_ready>
   138c6:	2800      	cmp	r0, #0
   138c8:	f43f ae67 	beq.w	1359a <isr+0x1172>
   138cc:	f7fe be04 	b.w	124d8 <isr+0xb0>
		radio_tmr_tifs_set(RADIO_TIFS);
   138d0:	2096      	movs	r0, #150	; 0x96
   138d2:	f003 ffa5 	bl	17820 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
   138d6:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   138da:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   138de:	f000 0007 	and.w	r0, r0, #7
   138e2:	f003 feff 	bl	176e4 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
   138e6:	f004 f865 	bl	179b4 <radio_tmr_end_capture>
   138ea:	e7db      	b.n	138a4 <isr+0x147c>
	switch (_radio.role) {
   138ec:	7ce2      	ldrb	r2, [r4, #19]
   138ee:	2a04      	cmp	r2, #4
   138f0:	f63e adf2 	bhi.w	124d8 <isr+0xb0>
   138f4:	e8df f012 	tbh	[pc, r2, lsl #1]
   138f8:	0005020f 	.word	0x0005020f
   138fc:	00cc0085 	.word	0x00cc0085
   13900:	00cc      	.short	0x00cc
	if(radio_ext_adv_enable_flag ==  true){
   13902:	4a57      	ldr	r2, [pc, #348]	; (13a60 <isr+0x1638>)
   13904:	7812      	ldrb	r2, [r2, #0]
   13906:	2a00      	cmp	r2, #0
   13908:	d037      	beq.n	1397a <isr+0x1552>
		if((chain_flag ==1) &&
   1390a:	4a56      	ldr	r2, [pc, #344]	; (13a64 <isr+0x163c>)
   1390c:	7812      	ldrb	r2, [r2, #0]
   1390e:	2a01      	cmp	r2, #1
   13910:	d10b      	bne.n	1392a <isr+0x1502>
   13912:	f894 2c8d 	ldrb.w	r2, [r4, #3213]	; 0xc8d
   13916:	f894 3c8c 	ldrb.w	r3, [r4, #3212]	; 0xc8c
   1391a:	429a      	cmp	r2, r3
   1391c:	d00f      	beq.n	1393e <isr+0x1516>
			ext_adv_setup();
   1391e:	f7fa fcd1 	bl	e2c4 <ext_adv_setup>
			radio_tx_enable();
   13922:	f003 fe7f 	bl	17624 <radio_tx_enable>
   13926:	f7fe bdf6 	b.w	12516 <isr+0xee>
		}else if ((_radio.state == STATE_CLOSE) && (chain_flag == 0) &&
   1392a:	2b03      	cmp	r3, #3
   1392c:	d107      	bne.n	1393e <isr+0x1516>
   1392e:	b932      	cbnz	r2, 1393e <isr+0x1516>
			(_radio.advertiser.chan_map_current != 0)) {
   13930:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		}else if ((_radio.state == STATE_CLOSE) && (chain_flag == 0) &&
   13934:	0758      	lsls	r0, r3, #29
   13936:	d002      	beq.n	1393e <isr+0x1516>
			adv_setup();
   13938:	f7fa fb9e 	bl	e078 <adv_setup>
   1393c:	e7f1      	b.n	13922 <isr+0x14fa>
			radio_filter_disable();
   1393e:	f003 ff31 	bl	177a4 <radio_filter_disable>
	_radio.role = ROLE_NONE;
   13942:	2500      	movs	r5, #0
   13944:	74e5      	strb	r5, [r4, #19]
	_radio.state = STATE_NONE;
   13946:	7525      	strb	r5, [r4, #20]
	_radio.ticker_id_event = 0;
   13948:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
   1394a:	f003 ffd5 	bl	178f8 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1394e:	462a      	mov	r2, r5
   13950:	4629      	mov	r1, r5
   13952:	4628      	mov	r0, r5
   13954:	4b44      	ldr	r3, [pc, #272]	; (13a68 <isr+0x1640>)
   13956:	f7f7 faab 	bl	aeb0 <mayfly_enqueue>
	LL_ASSERT(!retval);
   1395a:	4605      	mov	r5, r0
   1395c:	2800      	cmp	r0, #0
   1395e:	f47e adbb 	bne.w	124d8 <isr+0xb0>
	clock_control_off(_radio.hf_clock, NULL);
   13962:	6820      	ldr	r0, [r4, #0]
   13964:	6843      	ldr	r3, [r0, #4]
   13966:	4629      	mov	r1, r5
   13968:	685b      	ldr	r3, [r3, #4]
   1396a:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   1396c:	2201      	movs	r2, #1
   1396e:	4611      	mov	r1, r2
   13970:	4628      	mov	r0, r5
   13972:	f7f7 fa75 	bl	ae60 <mayfly_enable>
   13976:	f7fe bdff 	b.w	12578 <isr+0x150>
		if ((_radio.state == STATE_CLOSE) &&
   1397a:	2b03      	cmp	r3, #3
   1397c:	d103      	bne.n	13986 <isr+0x155e>
			(_radio.advertiser.chan_map_current != 0)) {
   1397e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
   13982:	0759      	lsls	r1, r3, #29
   13984:	d1d8      	bne.n	13938 <isr+0x1510>
			radio_filter_disable();
   13986:	f003 ff0d 	bl	177a4 <radio_filter_disable>
			if ((_radio.state == STATE_CLOSE) &&
   1398a:	7d23      	ldrb	r3, [r4, #20]
   1398c:	2b03      	cmp	r3, #3
   1398e:	d1d8      	bne.n	13942 <isr+0x151a>
				(!_radio.advertiser.is_hdcd)) {
   13990:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
			if ((_radio.state == STATE_CLOSE) &&
   13994:	f015 0540 	ands.w	r5, r5, #64	; 0x40
   13998:	d1d3      	bne.n	13942 <isr+0x151a>
				entropy_get_entropy_isr(_radio.entropy, &random_delay,
   1399a:	2201      	movs	r2, #1
   1399c:	a910      	add	r1, sp, #64	; 0x40
   1399e:	6860      	ldr	r0, [r4, #4]
   139a0:	f7ef fce0 	bl	3364 <entropy_get_entropy_isr>
				random_delay %= 10;
   139a4:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
						HAL_TICKER_US_TO_TICKS(random_delay *
   139a8:	4830      	ldr	r0, [pc, #192]	; (13a6c <isr+0x1644>)
				random_delay %= 10;
   139aa:	230a      	movs	r3, #10
   139ac:	fbb1 f2f3 	udiv	r2, r1, r3
   139b0:	fb03 1212 	mls	r2, r3, r2, r1
				random_delay += 1;
   139b4:	3201      	adds	r2, #1
   139b6:	b2d2      	uxtb	r2, r2
						HAL_TICKER_US_TO_TICKS(random_delay *
   139b8:	b2d6      	uxtb	r6, r2
   139ba:	fba6 0100 	umull	r0, r1, r6, r0
   139be:	23e8      	movs	r3, #232	; 0xe8
				random_delay += 1;
   139c0:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
						HAL_TICKER_US_TO_TICKS(random_delay *
   139c4:	fb03 1106 	mla	r1, r3, r6, r1
   139c8:	a321      	add	r3, pc, #132	; (adr r3, 13a50 <isr+0x1628>)
   139ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   139ce:	f7ec fc4b 	bl	268 <__aeabi_uldivmod>
				ticker_status =
   139d2:	f241 1309 	movw	r3, #4361	; 0x1109
   139d6:	9306      	str	r3, [sp, #24]
   139d8:	4b25      	ldr	r3, [pc, #148]	; (13a70 <isr+0x1648>)
   139da:	9305      	str	r3, [sp, #20]
   139dc:	9504      	str	r5, [sp, #16]
   139de:	b283      	uxth	r3, r0
   139e0:	9503      	str	r5, [sp, #12]
   139e2:	9502      	str	r5, [sp, #8]
   139e4:	9501      	str	r5, [sp, #4]
   139e6:	9500      	str	r5, [sp, #0]
   139e8:	2205      	movs	r2, #5
   139ea:	4629      	mov	r1, r5
   139ec:	4628      	mov	r0, r5
   139ee:	f7f8 f859 	bl	baa4 <ticker_update>
				LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   139f2:	f030 0302 	bics.w	r3, r0, #2
   139f6:	d0a4      	beq.n	13942 <isr+0x151a>
   139f8:	7ca3      	ldrb	r3, [r4, #18]
   139fa:	2b05      	cmp	r3, #5
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   139fc:	d0a1      	beq.n	13942 <isr+0x151a>
   139fe:	f7fe bd6b 	b.w	124d8 <isr+0xb0>
	if (_radio.state == STATE_CLOSE) {
   13a02:	2b03      	cmp	r3, #3
   13a04:	d136      	bne.n	13a74 <isr+0x164c>
		radio_tmr_tifs_set(RADIO_TIFS);
   13a06:	2096      	movs	r0, #150	; 0x96
   13a08:	f003 ff0a 	bl	17820 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   13a0c:	2300      	movs	r3, #0
   13a0e:	4619      	mov	r1, r3
   13a10:	461a      	mov	r2, r3
   13a12:	4618      	mov	r0, r3
   13a14:	f003 fe72 	bl	176fc <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
   13a18:	f894 2d29 	ldrb.w	r2, [r4, #3369]	; 0xd29
   13a1c:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
		radio_pkt_rx_set(_radio.packet_rx
   13a20:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   13a24:	3008      	adds	r0, #8
   13a26:	f003 fdcf 	bl	175c8 <radio_pkt_rx_set>
		radio_rssi_measure();
   13a2a:	f003 fe7f 	bl	1772c <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
   13a2e:	f002 ffd3 	bl	169d8 <ctrl_rl_enabled>
   13a32:	b138      	cbz	r0, 13a44 <isr+0x161c>
			u8_t count, *irks = ctrl_irks_get(&count);
   13a34:	a810      	add	r0, sp, #64	; 0x40
   13a36:	f002 fdbd 	bl	165b4 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   13a3a:	4601      	mov	r1, r0
   13a3c:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   13a40:	f004 f87a 	bl	17b38 <radio_ar_configure>
		_radio.state = STATE_RX;
   13a44:	2301      	movs	r3, #1
   13a46:	7523      	strb	r3, [r4, #20]
		radio_rx_enable();
   13a48:	f003 fde6 	bl	17618 <radio_rx_enable>
   13a4c:	f7fe bd63 	b.w	12516 <isr+0xee>
   13a50:	1afd498d 	.word	0x1afd498d
   13a54:	00000007 	.word	0x00000007
   13a58:	00022060 	.word	0x00022060
   13a5c:	00022040 	.word	0x00022040
   13a60:	200019c9 	.word	0x200019c9
   13a64:	20001981 	.word	0x20001981
   13a68:	2000e130 	.word	0x2000e130
   13a6c:	d4a51000 	.word	0xd4a51000
   13a70:	0000f225 	.word	0x0000f225
		radio_filter_disable();
   13a74:	f003 fe96 	bl	177a4 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
   13a78:	7d23      	ldrb	r3, [r4, #20]
   13a7a:	2b05      	cmp	r3, #5
   13a7c:	f47f af61 	bne.w	13942 <isr+0x151a>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   13a80:	2300      	movs	r3, #0
   13a82:	9300      	str	r3, [sp, #0]
   13a84:	2204      	movs	r2, #4
   13a86:	4619      	mov	r1, r3
   13a88:	4618      	mov	r0, r3
   13a8a:	f7f8 f859 	bl	bb40 <ticker_stop>
   13a8e:	e758      	b.n	13942 <isr+0x151a>
	if (_radio.conn_curr == 0) {
   13a90:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   13a94:	2800      	cmp	r0, #0
   13a96:	f43f af54 	beq.w	13942 <isr+0x151a>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
   13a9a:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
   13a9e:	b181      	cbz	r1, 13ac2 <isr+0x169a>
   13aa0:	7ce3      	ldrb	r3, [r4, #19]
   13aa2:	2b03      	cmp	r3, #3
   13aa4:	d003      	beq.n	13aae <isr+0x1686>
   13aa6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   13aaa:	07da      	lsls	r2, r3, #31
   13aac:	d509      	bpl.n	13ac2 <isr+0x169a>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   13aae:	f7fb f8a1 	bl	ebf4 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   13ab2:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   13ab6:	f7fb fab1 	bl	f01c <connection_release>
			_radio.conn_curr = NULL;
   13aba:	2300      	movs	r3, #0
   13abc:	f8c4 3cfc 	str.w	r3, [r4, #3324]	; 0xcfc
   13ac0:	e73f      	b.n	13942 <isr+0x151a>
	latency_event = _radio.conn_curr->latency_event;
   13ac2:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
   13ac6:	f894 7d00 	ldrb.w	r7, [r4, #3328]	; 0xd00
	elapsed_event = latency_event + 1;
   13aca:	f10b 0601 	add.w	r6, fp, #1
   13ace:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
   13ad0:	2f00      	cmp	r7, #0
   13ad2:	f000 8084 	beq.w	13bde <isr+0x17b6>
		if (_radio.role == ROLE_SLAVE) {
   13ad6:	7ce3      	ldrb	r3, [r4, #19]
   13ad8:	2b03      	cmp	r3, #3
   13ada:	d173      	bne.n	13bc4 <isr+0x179c>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   13adc:	f003 ff5e 	bl	1799c <radio_tmr_aa_restore>
   13ae0:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
   13ae2:	f003 ff61 	bl	179a8 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
   13ae6:	f8d4 7cfc 	ldr.w	r7, [r4, #3324]	; 0xcfc
				addr_us_get(_radio.conn_curr->phy_rx);
   13aea:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
   13aee:	f003 0307 	and.w	r3, r3, #7
   13af2:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
   13af4:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
   13af8:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
   13afa:	d052      	beq.n	13ba2 <isr+0x177a>
		return 40;
   13afc:	2b04      	cmp	r3, #4
   13afe:	bf0c      	ite	eq
   13b00:	f44f 78bc 	moveq.w	r8, #376	; 0x178
   13b04:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   13b08:	f100 0330 	add.w	r3, r0, #48	; 0x30
   13b0c:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
   13b0e:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   13b10:	930a      	str	r3, [sp, #40]	; 0x28
   13b12:	f8df a220 	ldr.w	sl, [pc, #544]	; 13d34 <isr+0x190c>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   13b16:	a385      	add	r3, pc, #532	; (adr r3, 13d2c <isr+0x1904>)
   13b18:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
   13b1c:	d844      	bhi.n	13ba8 <isr+0x1780>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   13b1e:	fba0 010a 	umull	r0, r1, r0, sl
   13b22:	f7ec fba1 	bl	268 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   13b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   13b28:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   13b2a:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   13b2e:	a37f      	add	r3, pc, #508	; (adr r3, 13d2c <isr+0x1904>)
   13b30:	e9d3 2300 	ldrd	r2, r3, [r3]
   13b34:	fba0 010a 	umull	r0, r1, r0, sl
   13b38:	f7ec fb96 	bl	268 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
   13b3c:	2300      	movs	r3, #0
   13b3e:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
   13b40:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
   13b42:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   13b46:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
   13b4a:	b3ab      	cbz	r3, 13bb8 <isr+0x1790>
				if (pdu_data_tx->len ||
   13b4c:	795b      	ldrb	r3, [r3, #5]
   13b4e:	b913      	cbnz	r3, 13b56 <isr+0x172e>
   13b50:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
   13b54:	b10b      	cbz	r3, 13b5a <isr+0x1732>
					_radio.conn_curr->latency_event = 0;
   13b56:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
   13b58:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
   13b5a:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   13b5e:	2200      	movs	r2, #0
   13b60:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
   13b62:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   13b66:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   13b6a:	b1c3      	cbz	r3, 13b9e <isr+0x1776>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
   13b6c:	429e      	cmp	r6, r3
   13b6e:	f080 80a6 	bcs.w	13cbe <isr+0x1896>
			_radio.conn_curr->supervision_expire -= elapsed_event;
   13b72:	1b9b      	subs	r3, r3, r6
   13b74:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
   13b76:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
   13b78:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
   13b7a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
   13b7e:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
   13b80:	f240 809f 	bls.w	13cc2 <isr+0x189a>
			else if (_radio.role == ROLE_SLAVE) {
   13b84:	7ce3      	ldrb	r3, [r4, #19]
   13b86:	2b03      	cmp	r3, #3
   13b88:	d109      	bne.n	13b9e <isr+0x1776>
				if (latency_event != 0) {
   13b8a:	f1bb 0f00 	cmp.w	fp, #0
   13b8e:	f040 8098 	bne.w	13cc2 <isr+0x189a>
					force = _radio.conn_curr->slave.force & 0x01;
   13b92:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
   13b94:	087b      	lsrs	r3, r7, #1
					if (force) {
   13b96:	f017 0701 	ands.w	r7, r7, #1
   13b9a:	d13d      	bne.n	13c18 <isr+0x17f0>
					_radio.conn_curr->slave.force >>= 1;
   13b9c:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
   13b9e:	2700      	movs	r7, #0
   13ba0:	e03d      	b.n	13c1e <isr+0x17f6>
		return 24;
   13ba2:	f04f 0818 	mov.w	r8, #24
   13ba6:	e7af      	b.n	13b08 <isr+0x16e0>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   13ba8:	fba9 010a 	umull	r0, r1, r9, sl
   13bac:	f7ec fb5c 	bl	268 <__aeabi_uldivmod>
   13bb0:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   13bb2:	f108 0030 	add.w	r0, r8, #48	; 0x30
   13bb6:	e7ba      	b.n	13b2e <isr+0x1706>
			} else if (_radio.conn_curr->slave.latency_enabled) {
   13bb8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
   13bbc:	07db      	lsls	r3, r3, #31
   13bbe:	d5cc      	bpl.n	13b5a <isr+0x1732>
				_radio.conn_curr->latency_event =
   13bc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   13bc2:	e7c9      	b.n	13b58 <isr+0x1730>
		} else if (reason_peer) {
   13bc4:	b149      	cbz	r1, 13bda <isr+0x17b2>
			_radio.conn_curr->master.terminate_ack = 1;
   13bc6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   13bca:	f043 0301 	orr.w	r3, r3, #1
   13bce:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
   13bd2:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
   13bd6:	4645      	mov	r5, r8
   13bd8:	e7bf      	b.n	13b5a <isr+0x1732>
	ticks_drift_minus = 0;
   13bda:	4688      	mov	r8, r1
   13bdc:	e7fb      	b.n	13bd6 <isr+0x17ae>
	else if (_radio.conn_curr->connect_expire) {
   13bde:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
   13be0:	b185      	cbz	r5, 13c04 <isr+0x17dc>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
   13be2:	42ae      	cmp	r6, r5
   13be4:	d204      	bcs.n	13bf0 <isr+0x17c8>
			_radio.conn_curr->connect_expire -= elapsed_event;
   13be6:	1bad      	subs	r5, r5, r6
   13be8:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
   13bea:	463d      	mov	r5, r7
   13bec:	46a8      	mov	r8, r5
   13bee:	e7b8      	b.n	13b62 <isr+0x173a>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
   13bf0:	213e      	movs	r1, #62	; 0x3e
   13bf2:	f7fa ffff 	bl	ebf4 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   13bf6:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   13bfa:	f7fb fa0f 	bl	f01c <connection_release>
			_radio.conn_curr = NULL;
   13bfe:	f8c4 7cfc 	str.w	r7, [r4, #3324]	; 0xcfc
   13c02:	e69e      	b.n	13942 <isr+0x151a>
		if (!_radio.conn_curr->supervision_expire) {
   13c04:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
   13c08:	f1b8 0f00 	cmp.w	r8, #0
   13c0c:	d1ee      	bne.n	13bec <isr+0x17c4>
			_radio.conn_curr->supervision_expire =
   13c0e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   13c10:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
   13c14:	4645      	mov	r5, r8
   13c16:	e7a4      	b.n	13b62 <isr+0x173a>
						_radio.conn_curr->slave.force |=
   13c18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13c1c:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
   13c1e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   13c22:	b123      	cbz	r3, 13c2e <isr+0x1806>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
   13c24:	429e      	cmp	r6, r3
   13c26:	d24e      	bcs.n	13cc6 <isr+0x189e>
			_radio.conn_curr->procedure_expire -= elapsed_event;
   13c28:	1b9b      	subs	r3, r3, r6
   13c2a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
   13c2e:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
   13c32:	b123      	cbz	r3, 13c3e <isr+0x1816>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
   13c34:	429e      	cmp	r6, r3
   13c36:	d248      	bcs.n	13cca <isr+0x18a2>
			_radio.conn_curr->apto_expire -= elapsed_event;
   13c38:	1b9b      	subs	r3, r3, r6
   13c3a:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
   13c3e:	f8d4 2cfc 	ldr.w	r2, [r4, #3324]	; 0xcfc
   13c42:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
   13c46:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
   13c4a:	b123      	cbz	r3, 13c56 <isr+0x182e>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
   13c4c:	429e      	cmp	r6, r3
   13c4e:	d24e      	bcs.n	13cee <isr+0x18c6>
			_radio.conn_curr->appto_expire -= elapsed_event;
   13c50:	1b9e      	subs	r6, r3, r6
   13c52:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   13c56:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   13c5a:	428b      	cmp	r3, r1
   13c5c:	d006      	beq.n	13c6c <isr+0x1844>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
   13c5e:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   13c62:	3b01      	subs	r3, #1
   13c64:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
   13c66:	bf9c      	itt	ls
   13c68:	2300      	movls	r3, #0
   13c6a:	8553      	strhls	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   13c6c:	b917      	cbnz	r7, 13c74 <isr+0x184c>
   13c6e:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   13c70:	455b      	cmp	r3, fp
   13c72:	d04e      	beq.n	13d12 <isr+0x18ea>
		lazy = _radio.conn_curr->latency_event + 1;
   13c74:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   13c76:	3301      	adds	r3, #1
   13c78:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
   13c7a:	b935      	cbnz	r5, 13c8a <isr+0x1862>
   13c7c:	f1b8 0f00 	cmp.w	r8, #0
   13c80:	d103      	bne.n	13c8a <isr+0x1862>
   13c82:	b913      	cbnz	r3, 13c8a <isr+0x1862>
	    (lazy != 0) || (force != 0)) {
   13c84:	2f00      	cmp	r7, #0
   13c86:	f43f ae5c 	beq.w	13942 <isr+0x151a>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   13c8a:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
   13c8e:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   13c90:	3207      	adds	r2, #7
		ticker_status =
   13c92:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   13c94:	b2d6      	uxtb	r6, r2
		ticker_status =
   13c96:	4a24      	ldr	r2, [pc, #144]	; (13d28 <isr+0x1900>)
   13c98:	9205      	str	r2, [sp, #20]
   13c9a:	462b      	mov	r3, r5
				      (void *)(u32_t)ticker_id);
   13c9c:	9606      	str	r6, [sp, #24]
		ticker_status =
   13c9e:	9704      	str	r7, [sp, #16]
   13ca0:	9102      	str	r1, [sp, #8]
   13ca2:	9101      	str	r1, [sp, #4]
   13ca4:	f8cd 8000 	str.w	r8, [sp]
   13ca8:	4632      	mov	r2, r6
   13caa:	4608      	mov	r0, r1
   13cac:	f7f7 fefa 	bl	baa4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13cb0:	f030 0302 	bics.w	r3, r0, #2
   13cb4:	f43f ae45 	beq.w	13942 <isr+0x151a>
   13cb8:	7ca3      	ldrb	r3, [r4, #18]
   13cba:	429e      	cmp	r6, r3
   13cbc:	e69e      	b.n	139fc <isr+0x15d4>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   13cbe:	2108      	movs	r1, #8
   13cc0:	e6f5      	b.n	13aae <isr+0x1686>
				force = 1;
   13cc2:	2701      	movs	r7, #1
   13cc4:	e7ab      	b.n	13c1e <isr+0x17f6>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
   13cc6:	2122      	movs	r1, #34	; 0x22
   13cc8:	e6f1      	b.n	13aae <isr+0x1686>
			_radio.conn_curr->apto_expire = 0;
   13cca:	2300      	movs	r3, #0
   13ccc:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
   13cd0:	2002      	movs	r0, #2
   13cd2:	f7f9 fdc3 	bl	d85c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   13cd6:	2800      	cmp	r0, #0
   13cd8:	f43e abfe 	beq.w	124d8 <isr+0xb0>
			node_rx->hdr.handle = _radio.conn_curr->handle;
   13cdc:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   13ce0:	8c1b      	ldrh	r3, [r3, #32]
   13ce2:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
   13ce4:	230a      	movs	r3, #10
   13ce6:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
   13ce8:	f7fa ffac 	bl	ec44 <packet_rx_enqueue>
   13cec:	e7a7      	b.n	13c3e <isr+0x1816>
			_radio.conn_curr->appto_expire = 0;
   13cee:	2300      	movs	r3, #0
   13cf0:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
   13cf4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
   13cf8:	2b00      	cmp	r3, #0
   13cfa:	d1ac      	bne.n	13c56 <isr+0x182e>
   13cfc:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   13d00:	428b      	cmp	r3, r1
   13d02:	d1ac      	bne.n	13c5e <isr+0x1836>
				_radio.conn_curr->llcp_type = LLCP_PING;
   13d04:	2307      	movs	r3, #7
   13d06:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
   13d0a:	1e4b      	subs	r3, r1, #1
   13d0c:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   13d10:	e7a1      	b.n	13c56 <isr+0x182e>
	lazy = 0;
   13d12:	463b      	mov	r3, r7
   13d14:	e7b1      	b.n	13c7a <isr+0x1852>
		LL_ASSERT((_radio.state == STATE_STOP) ||
   13d16:	3b04      	subs	r3, #4
   13d18:	2b01      	cmp	r3, #1
   13d1a:	f63e abdd 	bhi.w	124d8 <isr+0xb0>
		_radio.state = STATE_NONE;
   13d1e:	2300      	movs	r3, #0
   13d20:	7523      	strb	r3, [r4, #20]
   13d22:	f7fe bc29 	b.w	12578 <isr+0x150>
   13d26:	bf00      	nop
   13d28:	0000f20d 	.word	0x0000f20d
   13d2c:	1afd498d 	.word	0x1afd498d
   13d30:	00000007 	.word	0x00000007
   13d34:	3b9aca00 	.word	0x3b9aca00

00013d38 <radio_init>:
{
   13d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
   13d3c:	4e3e      	ldr	r6, [pc, #248]	; (13e38 <radio_init+0x100>)
{
   13d3e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   13d40:	f89d c01c 	ldrb.w	ip, [sp, #28]
   13d44:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
   13d48:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   13d4c:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
   13d50:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   13d52:	f44f 70aa 	mov.w	r0, #340	; 0x154
   13d56:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
   13d5a:	f886 1d08 	strb.w	r1, [r6, #3336]	; 0xd08
	_radio.conn_pool = mem_radio;
   13d5e:	f8c6 4cf0 	str.w	r4, [r6, #3312]	; 0xcf0
	mem_radio_end = mem_radio + mem_size;
   13d62:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
   13d64:	f10c 0401 	add.w	r4, ip, #1
   13d68:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
   13d6a:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
   13d6c:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
   13d70:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   13d74:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
	rx_count_max += 3;
   13d78:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   13d7a:	bf98      	it	ls
   13d7c:	eb02 1442 	addls.w	r4, r2, r2, lsl #5
	_radio.packet_data_octets_max = packet_data_octets_max;
   13d80:	f8a6 8d1c 	strh.w	r8, [r6, #3356]	; 0xd1c
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   13d84:	bf88      	it	hi
   13d86:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
   13d8a:	f886 2d3c 	strb.w	r2, [r6, #3388]	; 0xd3c
		_radio.packet_rx_data_pool_size =
   13d8e:	bf8c      	ite	hi
   13d90:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   13d94:	eb02 0244 	addls.w	r2, r2, r4, lsl #1
	_radio.packet_rx_count = (rx_count_max + 1);
   13d98:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
   13d9c:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
   13da0:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
   13da4:	bf8c      	ite	hi
   13da6:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   13daa:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
   13dac:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
   13db0:	f8a6 2d1e 	strh.w	r2, [r6, #3358]	; 0xd1e
	_radio.packet_tx_count = (tx_count_max + 1);
   13db4:	f886 cd5c 	strb.w	ip, [r6, #3420]	; 0xd5c
	_radio.packet_rx = (void *)mem_radio;
   13db8:	f8c6 0d24 	str.w	r0, [r6, #3364]	; 0xd24
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   13dbc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
   13dc0:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   13dc4:	f8b6 4d1e 	ldrh.w	r4, [r6, #3358]	; 0xd1e
	_radio.pkt_tx = (void *)mem_radio;
   13dc8:	f8c6 0d54 	str.w	r0, [r6, #3412]	; 0xd54
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   13dcc:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   13dce:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.pkt_release = (void *)mem_radio;
   13dd2:	f8c6 0d58 	str.w	r0, [r6, #3416]	; 0xd58
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   13dd6:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   13dd8:	f8a6 2d20 	strh.w	r2, [r6, #3360]	; 0xd20
	_radio.pkt_rx_data_pool = mem_radio;
   13ddc:	f8c6 0d14 	str.w	r0, [r6, #3348]	; 0xd14
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   13de0:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
   13de4:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   13de6:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
   13dea:	f8c6 0d2c 	str.w	r0, [r6, #3372]	; 0xd2c
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   13dee:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   13df2:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
   13df6:	f8c6 0d40 	str.w	r0, [r6, #3392]	; 0xd40
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   13dfa:	340a      	adds	r4, #10
   13dfc:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   13e00:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   13e02:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
   13e04:	f8a6 4d50 	strh.w	r4, [r6, #3408]	; 0xd50
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   13e08:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
   13e0c:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
   13e0e:	f886 3cf8 	strb.w	r3, [r6, #3320]	; 0xcf8
	_radio.packet_rx_count = (rx_count_max + 1);
   13e12:	f886 ed28 	strb.w	lr, [r6, #3368]	; 0xd28
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   13e16:	f886 2d22 	strb.w	r2, [r6, #3362]	; 0xd22
	_radio.pkt_tx_data_pool = mem_radio;
   13e1a:	f8c6 0d48 	str.w	r0, [r6, #3400]	; 0xd48
	if (retcode) {
   13e1e:	d003      	beq.n	13e28 <radio_init+0xf0>
		return (retcode + mem_size);
   13e20:	442c      	add	r4, r5
}
   13e22:	4620      	mov	r0, r4
   13e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
   13e28:	2301      	movs	r3, #1
   13e2a:	f886 3d6a 	strb.w	r3, [r6, #3434]	; 0xd6a
	common_init();
   13e2e:	f7f9 fdd9 	bl	d9e4 <common_init>
	radio_setup();
   13e32:	f003 faf7 	bl	17424 <radio_setup>
	return retcode;
   13e36:	e7f4      	b.n	13e22 <radio_init+0xea>
   13e38:	20000c08 	.word	0x20000c08

00013e3c <ll_reset>:
{
   13e3c:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   13e3e:	2103      	movs	r1, #3
   13e40:	2005      	movs	r0, #5
   13e42:	f7f9 fea5 	bl	db90 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   13e46:	2104      	movs	r1, #4
   13e48:	2006      	movs	r0, #6
   13e4a:	f7f9 fea1 	bl	db90 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   13e4e:	4c22      	ldr	r4, [pc, #136]	; (13ed8 <ll_reset+0x9c>)
   13e50:	2500      	movs	r5, #0
   13e52:	f894 2cf8 	ldrb.w	r2, [r4, #3320]	; 0xcf8
   13e56:	b2ab      	uxth	r3, r5
   13e58:	429a      	cmp	r2, r3
   13e5a:	f105 0501 	add.w	r5, r5, #1
   13e5e:	d835      	bhi.n	13ecc <ll_reset+0x90>
	_radio.advertiser.is_enabled = 0;
   13e60:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   13e64:	f36f 13c7 	bfc	r3, #7, #1
   13e68:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
   13e6c:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
	_radio.advertiser.conn = NULL;
   13e70:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
   13e72:	f360 0300 	bfi	r3, r0, #0, #1
   13e76:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   13e7a:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   13e7e:	f8b4 3d1e 	ldrh.w	r3, [r4, #3358]	; 0xd1e
   13e82:	fbb3 f3f2 	udiv	r3, r3, r2
   13e86:	f884 3d22 	strb.w	r3, [r4, #3362]	; 0xd22
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   13e8a:	f894 3d28 	ldrb.w	r3, [r4, #3368]	; 0xd28
	_radio.packet_rx_last = 0;
   13e8e:	f884 0d29 	strb.w	r0, [r4, #3369]	; 0xd29
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   13e92:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
   13e94:	f884 0d5d 	strb.w	r0, [r4, #3421]	; 0xd5d
	_radio.packet_release_last = 0;
   13e98:	f884 0d60 	strb.w	r0, [r4, #3424]	; 0xd60
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   13e9c:	f884 3d3c 	strb.w	r3, [r4, #3388]	; 0xd3c
	_radio.fc_ack = _radio.fc_req;
   13ea0:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
	_radio.advertiser.conn = NULL;
   13ea4:	f8c4 0c18 	str.w	r0, [r4, #3096]	; 0xc18
	_radio.scanner.conn = NULL;
   13ea8:	f8c4 0c54 	str.w	r0, [r4, #3156]	; 0xc54
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   13eac:	f8a4 2d20 	strh.w	r2, [r4, #3360]	; 0xd20
	_radio.packet_rx_acquire = 0;
   13eb0:	f884 0d2a 	strb.w	r0, [r4, #3370]	; 0xd2a
	_radio.packet_tx_last = 0;
   13eb4:	f884 0d5e 	strb.w	r0, [r4, #3422]	; 0xd5e
	_radio.packet_release_first = 0;
   13eb8:	f884 0d5f 	strb.w	r0, [r4, #3423]	; 0xd5f
	_radio.fc_ack = _radio.fc_req;
   13ebc:	f884 3d69 	strb.w	r3, [r4, #3433]	; 0xd69
	ll_filter_reset(false);
   13ec0:	f003 f8aa 	bl	17018 <ll_filter_reset>
}
   13ec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
   13ec8:	f7f9 bd8c 	b.w	d9e4 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   13ecc:	1da8      	adds	r0, r5, #6
   13ece:	21ff      	movs	r1, #255	; 0xff
   13ed0:	b2c0      	uxtb	r0, r0
   13ed2:	f7f9 fe5d 	bl	db90 <role_disable>
   13ed6:	e7bc      	b.n	13e52 <ll_reset+0x16>
   13ed8:	20000c08 	.word	0x20000c08

00013edc <radio_adv_data_get>:
}
   13edc:	4800      	ldr	r0, [pc, #0]	; (13ee0 <radio_adv_data_get+0x4>)
   13ede:	4770      	bx	lr
   13ee0:	20000c34 	.word	0x20000c34

00013ee4 <radio_aux_adv_data_get>:
}
   13ee4:	4800      	ldr	r0, [pc, #0]	; (13ee8 <radio_aux_adv_data_get+0x4>)
   13ee6:	4770      	bx	lr
   13ee8:	20000e38 	.word	0x20000e38

00013eec <radio_chain_adv_data_get>:
}
   13eec:	4800      	ldr	r0, [pc, #0]	; (13ef0 <radio_chain_adv_data_get+0x4>)
   13eee:	4770      	bx	lr
   13ef0:	2000103c 	.word	0x2000103c

00013ef4 <radio_scan_data_get>:
}
   13ef4:	4800      	ldr	r0, [pc, #0]	; (13ef8 <radio_scan_data_get+0x4>)
   13ef6:	4770      	bx	lr
   13ef8:	2000161a 	.word	0x2000161a

00013efc <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   13efc:	4b02      	ldr	r3, [pc, #8]	; (13f08 <ll_adv_is_enabled+0xc>)
   13efe:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   13f02:	09c0      	lsrs	r0, r0, #7
   13f04:	4770      	bx	lr
   13f06:	bf00      	nop
   13f08:	20000c08 	.word	0x20000c08

00013f0c <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   13f0c:	4b05      	ldr	r3, [pc, #20]	; (13f24 <radio_adv_filter_pol_get+0x18>)
   13f0e:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
   13f12:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
   13f14:	bfba      	itte	lt
   13f16:	f893 002a 	ldrblt.w	r0, [r3, #42]	; 0x2a
   13f1a:	f000 0003 	andlt.w	r0, r0, #3
   13f1e:	2000      	movge	r0, #0
}
   13f20:	4770      	bx	lr
   13f22:	bf00      	nop
   13f24:	20000c08 	.word	0x20000c08

00013f28 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   13f28:	4a09      	ldr	r2, [pc, #36]	; (13f50 <ll_scan_is_enabled+0x28>)
   13f2a:	f892 3c2c 	ldrb.w	r3, [r2, #3116]	; 0xc2c
   13f2e:	f892 0c2d 	ldrb.w	r0, [r2, #3117]	; 0xc2d
	       (_radio.scanner.conn ? BIT(2) : 0);
   13f32:	f8d2 2c54 	ldr.w	r2, [r2, #3156]	; 0xc54
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   13f36:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
   13f3a:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   13f3c:	f003 0301 	and.w	r3, r3, #1
   13f40:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
   13f44:	bf14      	ite	ne
   13f46:	2004      	movne	r0, #4
   13f48:	2000      	moveq	r0, #0
}
   13f4a:	4318      	orrs	r0, r3
   13f4c:	4770      	bx	lr
   13f4e:	bf00      	nop
   13f50:	20000c08 	.word	0x20000c08

00013f54 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   13f54:	4b05      	ldr	r3, [pc, #20]	; (13f6c <radio_scan_filter_pol_get+0x18>)
   13f56:	f893 0c2c 	ldrb.w	r0, [r3, #3116]	; 0xc2c
   13f5a:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
   13f5e:	bf1c      	itt	ne
   13f60:	f893 0c2d 	ldrbne.w	r0, [r3, #3117]	; 0xc2d
   13f64:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
   13f68:	4770      	bx	lr
   13f6a:	bf00      	nop
   13f6c:	20000c08 	.word	0x20000c08

00013f70 <radio_connect_enable>:
{
   13f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
   13f74:	f8df 8358 	ldr.w	r8, [pc, #856]	; 142d0 <radio_connect_enable+0x360>
{
   13f78:	b085      	sub	sp, #20
	if (_radio.scanner.conn) {
   13f7a:	f8d8 6c54 	ldr.w	r6, [r8, #3156]	; 0xc54
{
   13f7e:	9301      	str	r3, [sp, #4]
   13f80:	4683      	mov	fp, r0
   13f82:	468a      	mov	sl, r1
   13f84:	4691      	mov	r9, r2
   13f86:	4645      	mov	r5, r8
	if (_radio.scanner.conn) {
   13f88:	2e00      	cmp	r6, #0
   13f8a:	f040 8193 	bne.w	142b4 <radio_connect_enable+0x344>
	link = mem_acquire(&_radio.link_rx_free);
   13f8e:	f508 6053 	add.w	r0, r8, #3376	; 0xd30
   13f92:	f7f6 fec2 	bl	ad1a <mem_acquire>
	if (!link) {
   13f96:	4607      	mov	r7, r0
   13f98:	b150      	cbz	r0, 13fb0 <radio_connect_enable+0x40>
	conn = mem_acquire(&_radio.conn_free);
   13f9a:	f608 40f4 	addw	r0, r8, #3316	; 0xcf4
   13f9e:	f7f6 febc 	bl	ad1a <mem_acquire>
	if (!conn) {
   13fa2:	4604      	mov	r4, r0
   13fa4:	b930      	cbnz	r0, 13fb4 <radio_connect_enable+0x44>
		mem_release(link, &_radio.link_rx_free);
   13fa6:	f508 6153 	add.w	r1, r8, #3376	; 0xd30
   13faa:	4638      	mov	r0, r7
   13fac:	f7f6 fecf 	bl	ad4e <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   13fb0:	2007      	movs	r0, #7
   13fb2:	e15c      	b.n	1426e <radio_connect_enable+0x2fe>
	_radio.scanner.adv_addr_type = adv_addr_type;
   13fb4:	f898 3c2d 	ldrb.w	r3, [r8, #3117]	; 0xc2d
   13fb8:	f36b 1386 	bfi	r3, fp, #6, #1
   13fbc:	f888 3c2d 	strb.w	r3, [r8, #3117]	; 0xc2d
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   13fc0:	2206      	movs	r2, #6
   13fc2:	4651      	mov	r1, sl
   13fc4:	f608 4036 	addw	r0, r8, #3126	; 0xc36
   13fc8:	f7ec fbf8 	bl	7bc <memcpy>
	_radio.scanner.conn_latency = latency;
   13fcc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   13fd0:	f8a8 3c4a 	strh.w	r3, [r8, #3146]	; 0xc4a
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   13fd4:	4631      	mov	r1, r6
	_radio.scanner.conn_timeout = timeout;
   13fd6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	_radio.scanner.conn_interval = interval;
   13fda:	f8a8 9c48 	strh.w	r9, [r8, #3144]	; 0xc48
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   13fde:	4630      	mov	r0, r6
	_radio.scanner.conn_timeout = timeout;
   13fe0:	f8a8 3c4c 	strh.w	r3, [r8, #3148]	; 0xc4c
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   13fe4:	f003 fafc 	bl	175e0 <radio_tx_ready_delay_get>
   13fe8:	49b5      	ldr	r1, [pc, #724]	; (142c0 <radio_connect_enable+0x350>)
   13fea:	f200 4052 	addw	r0, r0, #1106	; 0x452
   13fee:	a3b2      	add	r3, pc, #712	; (adr r3, 142b8 <radio_connect_enable+0x348>)
   13ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
   13ff4:	fba0 0101 	umull	r0, r1, r0, r1
   13ff8:	f7ec f936 	bl	268 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
   13ffc:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   14000:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   14004:	f8c8 0c50 	str.w	r0, [r8, #3152]	; 0xc50
	conn->handle = 0xFFFF;
   14008:	8423      	strh	r3, [r4, #32]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   1400a:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 142d4 <radio_connect_enable+0x364>
	conn->llcp_features = RADIO_BLE_FEAT;
   1400e:	f503 4394 	add.w	r3, r3, #18944	; 0x4a00
   14012:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   14016:	2603      	movs	r6, #3
	consecutive_cnt = 1;
   14018:	f04f 0901 	mov.w	r9, #1
	bt_rand(&access_addr, sizeof(u32_t));
   1401c:	2104      	movs	r1, #4
   1401e:	a803      	add	r0, sp, #12
   14020:	f7f7 fe9e 	bl	bd60 <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   14024:	f8dd c00c 	ldr.w	ip, [sp, #12]
   14028:	2000      	movs	r0, #0
   1402a:	ea4f 7adc 	mov.w	sl, ip, lsr #31
	bit_idx = 31;
   1402e:	231f      	movs	r3, #31
	transitions = 0;
   14030:	4602      	mov	r2, r0
	consecutive_cnt = 1;
   14032:	2101      	movs	r1, #1
	while (bit_idx--) {
   14034:	3b01      	subs	r3, #1
   14036:	b2db      	uxtb	r3, r3
   14038:	2bff      	cmp	r3, #255	; 0xff
   1403a:	d103      	bne.n	14044 <radio_connect_enable+0xd4>
   1403c:	b3d0      	cbz	r0, 140b4 <radio_connect_enable+0x144>
   1403e:	f8cd c00c 	str.w	ip, [sp, #12]
   14042:	e037      	b.n	140b4 <radio_connect_enable+0x144>
		bit = (access_addr >> bit_idx) & 0x01;
   14044:	fa2c fe03 	lsr.w	lr, ip, r3
   14048:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
   1404c:	45d6      	cmp	lr, sl
   1404e:	d11a      	bne.n	14086 <radio_connect_enable+0x116>
			consecutive_cnt++;
   14050:	3101      	adds	r1, #1
   14052:	b2c9      	uxtb	r1, r1
		if ((consecutive_cnt > 6) ||
   14054:	2906      	cmp	r1, #6
   14056:	d807      	bhi.n	14068 <radio_connect_enable+0xf8>
   14058:	2b1b      	cmp	r3, #27
   1405a:	d81a      	bhi.n	14092 <radio_connect_enable+0x122>
		    ((bit_idx < 28) && (transitions < 1)) ||
   1405c:	b122      	cbz	r2, 14068 <radio_connect_enable+0xf8>
   1405e:	2b1b      	cmp	r3, #27
   14060:	d017      	beq.n	14092 <radio_connect_enable+0x122>
		    ((bit_idx < 27) && (transitions < 2))) {
   14062:	2a01      	cmp	r2, #1
   14064:	d815      	bhi.n	14092 <radio_connect_enable+0x122>
   14066:	2201      	movs	r2, #1
				access_addr &= ~BIT(bit_idx);
   14068:	fa09 f103 	lsl.w	r1, r9, r3
			if (consecutive_bit) {
   1406c:	f1be 0f00 	cmp.w	lr, #0
   14070:	f000 8100 	beq.w	14274 <radio_connect_enable+0x304>
				access_addr &= ~BIT(bit_idx);
   14074:	ea2c 0c01 	bic.w	ip, ip, r1
				consecutive_bit = 0;
   14078:	f04f 0e00 	mov.w	lr, #0
			transitions++;
   1407c:	3201      	adds	r2, #1
   1407e:	2001      	movs	r0, #1
   14080:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   14082:	4601      	mov	r1, r0
   14084:	e005      	b.n	14092 <radio_connect_enable+0x122>
			transitions++;
   14086:	3201      	adds	r2, #1
		if ((consecutive_cnt > 6) ||
   14088:	2b1b      	cmp	r3, #27
			transitions++;
   1408a:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   1408c:	f04f 0101 	mov.w	r1, #1
		if ((consecutive_cnt > 6) ||
   14090:	d9e5      	bls.n	1405e <radio_connect_enable+0xee>
		if (transitions > 24) {
   14092:	2a18      	cmp	r2, #24
   14094:	f240 80f6 	bls.w	14284 <radio_connect_enable+0x314>
   14098:	b108      	cbz	r0, 1409e <radio_connect_enable+0x12e>
   1409a:	f8cd c00c 	str.w	ip, [sp, #12]
   1409e:	3301      	adds	r3, #1
   140a0:	9a03      	ldr	r2, [sp, #12]
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   140a2:	fa09 f303 	lsl.w	r3, r9, r3
			if (consecutive_bit) {
   140a6:	f1be 0f00 	cmp.w	lr, #0
   140aa:	f000 80e8 	beq.w	1427e <radio_connect_enable+0x30e>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   140ae:	425b      	negs	r3, r3
   140b0:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
   140b2:	9303      	str	r3, [sp, #12]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   140b4:	9b03      	ldr	r3, [sp, #12]
   140b6:	a804      	add	r0, sp, #16
   140b8:	ea83 0308 	eor.w	r3, r3, r8
   140bc:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   140c0:	2104      	movs	r1, #4
   140c2:	f7f6 ffd5 	bl	b070 <util_ones_count_get>
   140c6:	2801      	cmp	r0, #1
   140c8:	f240 80e3 	bls.w	14292 <radio_connect_enable+0x322>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   140cc:	9b03      	ldr	r3, [sp, #12]
   140ce:	b29a      	uxth	r2, r3
   140d0:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   140d4:	f000 80d8 	beq.w	14288 <radio_connect_enable+0x318>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   140d8:	2204      	movs	r2, #4
   140da:	a903      	add	r1, sp, #12
   140dc:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
   140e0:	9303      	str	r3, [sp, #12]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   140e2:	f7ec fb6b 	bl	7bc <memcpy>
	bt_rand(&conn->crc_init[0], 3);
   140e6:	2103      	movs	r1, #3
   140e8:	f104 0014 	add.w	r0, r4, #20
   140ec:	f7f7 fe38 	bl	bd60 <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   140f0:	2205      	movs	r2, #5
   140f2:	4974      	ldr	r1, [pc, #464]	; (142c4 <radio_connect_enable+0x354>)
   140f4:	f104 0017 	add.w	r0, r4, #23
   140f8:	f7ec fb60 	bl	7bc <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   140fc:	f895 2d07 	ldrb.w	r2, [r5, #3335]	; 0xd07
   14100:	7f63      	ldrb	r3, [r4, #29]
   14102:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
   14106:	f36f 1386 	bfc	r3, #6, #1
   1410a:	7763      	strb	r3, [r4, #29]
	conn->data_chan_hop = 6;
   1410c:	2206      	movs	r2, #6
	conn->data_chan_use = 0;
   1410e:	2300      	movs	r3, #0
	conn->data_chan_hop = 6;
   14110:	77a2      	strb	r2, [r4, #30]
	conn->data_chan_use = 0;
   14112:	77e3      	strb	r3, [r4, #31]
	conn->default_tx_octets = _radio.default_tx_octets;
   14114:	f8b5 1d0a 	ldrh.w	r1, [r5, #3338]	; 0xd0a
	conn->conn_interval = _radio.scanner.conn_interval;
   14118:	f8b5 ec48 	ldrh.w	lr, [r5, #3144]	; 0xc48
	conn->latency = _radio.scanner.conn_latency;
   1411c:	f8b5 0c4a 	ldrh.w	r0, [r5, #3146]	; 0xc4a
	conn->default_tx_octets = _radio.default_tx_octets;
   14120:	85a1      	strh	r1, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   14122:	211b      	movs	r1, #27
   14124:	85e1      	strh	r1, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   14126:	8621      	strh	r1, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   14128:	f8b5 1d0c 	ldrh.w	r1, [r5, #3340]	; 0xd0c
   1412c:	8661      	strh	r1, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   1412e:	f44f 71a4 	mov.w	r1, #328	; 0x148
	conn->phy_pref_tx = _radio.default_phy_tx;
   14132:	f8b5 6d0e 	ldrh.w	r6, [r5, #3342]	; 0xd0e
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   14136:	86a1      	strh	r1, [r4, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   14138:	86e1      	strh	r1, [r4, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   1413a:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->event_counter = 0;
   1413e:	8463      	strh	r3, [r4, #34]	; 0x22
	conn->phy_pref_tx = _radio.default_phy_tx;
   14140:	f366 0102 	bfi	r1, r6, #0, #3
	conn->phy_tx = BIT(0);
   14144:	2601      	movs	r6, #1
   14146:	f366 01c5 	bfi	r1, r6, #3, #3
	conn->phy_flags = 0;
   1414a:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   1414e:	f363 11c7 	bfi	r1, r3, #7, #1
   14152:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   14156:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->conn_interval = _radio.scanner.conn_interval;
   1415a:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
	conn->phy_tx_time = BIT(0);
   1415e:	f366 0102 	bfi	r1, r6, #0, #3
   14162:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   14166:	f8b5 cd10 	ldrh.w	ip, [r5, #3344]	; 0xd10
	conn->latency_prepare = 0;
   1416a:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->phy_pref_rx = _radio.default_phy_rx;
   1416c:	b2c9      	uxtb	r1, r1
   1416e:	f36c 01c5 	bfi	r1, ip, #3, #3
   14172:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
   14176:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
	conn->latency_event = 0;
   1417a:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->phy_rx = BIT(0);
   1417c:	f366 0102 	bfi	r1, r6, #0, #3
   14180:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->role = 0;
   14184:	7f61      	ldrb	r1, [r4, #29]
	conn->connect_expire = 6;
   14186:	87a2      	strh	r2, [r4, #60]	; 0x3c
	conn->role = 0;
   14188:	f363 11c7 	bfi	r1, r3, #7, #1
	conn->latency = _radio.scanner.conn_latency;
   1418c:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->role = 0;
   1418e:	7761      	strb	r1, [r4, #29]
	conn->common.fex_valid = 0;
   14190:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->master.terminate_ack = 0;
   14194:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   14198:	f363 0100 	bfi	r1, r3, #0, #1
   1419c:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	conn_interval_us =
   141a0:	f240 42e2 	movw	r2, #1250	; 0x4e2
   141a4:	fb02 f20e 	mul.w	r2, r2, lr
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   141a8:	f8b5 1c4c 	ldrh.w	r1, [r5, #3148]	; 0xc4c
	conn->supervision_expire = 0;
   141ac:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   141b0:	1e56      	subs	r6, r2, #1
   141b2:	f242 7e10 	movw	lr, #10000	; 0x2710
   141b6:	fb0e 6101 	mla	r1, lr, r1, r6
	conn->procedure_expire = 0;
   141ba:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   141be:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   141c2:	4b41      	ldr	r3, [pc, #260]	; (142c8 <radio_connect_enable+0x358>)
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   141c4:	87e1      	strh	r1, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   141c6:	4941      	ldr	r1, [pc, #260]	; (142cc <radio_connect_enable+0x35c>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   141c8:	4413      	add	r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   141ca:	4411      	add	r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   141cc:	fbb3 f3f2 	udiv	r3, r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   141d0:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   141d4:	b29a      	uxth	r2, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   141d6:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   141da:	1d81      	adds	r1, r0, #6
   141dc:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   141de:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   141e2:	dc61      	bgt.n	142a8 <radio_connect_enable+0x338>
	conn->llcp_version.tx = 0;
   141e4:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   141e8:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->apto_expire = 0;
   141ec:	2000      	movs	r0, #0
	conn->llcp_version.rx = 0;
   141ee:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   141f2:	f360 0341 	bfi	r3, r0, #1, #1
   141f6:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
   141fa:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
   141fe:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
   14202:	f360 1304 	bfi	r3, r0, #4, #1
   14206:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->sn = 0;
   1420a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->appto_expire = 0;
   1420e:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	conn->empty = 0;
   14212:	f003 0380 	and.w	r3, r3, #128	; 0x80
   14216:	f360 13c7 	bfi	r3, r0, #7, #1
	conn->llcp_req = 0;
   1421a:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
	conn->llcp_ack = 0;
   1421e:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
	conn->llcp_terminate.req = 0;
   14222:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   14226:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   1422a:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   1422e:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   14232:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   14236:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
	conn->llcp_length.req = 0;
   1423a:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   1423e:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   14242:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   14246:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
	conn->empty = 0;
   1424a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   1424e:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   14252:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   14256:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   1425a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   1425e:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   14262:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   14266:	f884 0151 	strb.w	r0, [r4, #337]	; 0x151
	_radio.scanner.conn = conn;
   1426a:	f8c5 4c54 	str.w	r4, [r5, #3156]	; 0xc54
}
   1426e:	b005      	add	sp, #20
   14270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				access_addr |= BIT(bit_idx);
   14274:	ea41 0c0c 	orr.w	ip, r1, ip
				consecutive_bit = 1;
   14278:	f04f 0e01 	mov.w	lr, #1
   1427c:	e6fe      	b.n	1407c <radio_connect_enable+0x10c>
				access_addr |= (BIT(bit_idx + 1) - 1);
   1427e:	3b01      	subs	r3, #1
   14280:	4313      	orrs	r3, r2
   14282:	e716      	b.n	140b2 <radio_connect_enable+0x142>
		if (transitions > 24) {
   14284:	46f2      	mov	sl, lr
   14286:	e6d5      	b.n	14034 <radio_connect_enable+0xc4>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   14288:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   1428a:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
   1428e:	f47f af23 	bne.w	140d8 <radio_connect_enable+0x168>
   14292:	3e01      	subs	r6, #1
	LL_ASSERT(retry);
   14294:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   14298:	f47f aec0 	bne.w	1401c <radio_connect_enable+0xac>
   1429c:	4040      	eors	r0, r0
   1429e:	f380 8811 	msr	BASEPRI, r0
   142a2:	f04f 0004 	mov.w	r0, #4
   142a6:	df02      	svc	2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   142a8:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
   142ac:	33fa      	adds	r3, #250	; 0xfa
   142ae:	441a      	add	r2, r3
   142b0:	b292      	uxth	r2, r2
   142b2:	e797      	b.n	141e4 <radio_connect_enable+0x274>
		return BT_HCI_ERR_CMD_DISALLOWED;
   142b4:	200c      	movs	r0, #12
   142b6:	e7da      	b.n	1426e <radio_connect_enable+0x2fe>
   142b8:	1afd498d 	.word	0x1afd498d
   142bc:	00000007 	.word	0x00000007
   142c0:	3b9aca00 	.word	0x3b9aca00
   142c4:	2000190a 	.word	0x2000190a
   142c8:	01c9c37f 	.word	0x01c9c37f
   142cc:	026259ff 	.word	0x026259ff
   142d0:	20000c08 	.word	0x20000c08
   142d4:	8e89bed6 	.word	0x8e89bed6

000142d8 <ll_conn_update>:
{
   142d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   142dc:	460c      	mov	r4, r1
   142de:	4690      	mov	r8, r2
   142e0:	461d      	mov	r5, r3
   142e2:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   142e6:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
   142ea:	f7f9 fc3b 	bl	db64 <connection_get>
	if (!conn) {
   142ee:	b330      	cbz	r0, 1433e <ll_conn_update+0x66>
	if (!cmd) {
   142f0:	2c00      	cmp	r4, #0
   142f2:	d14a      	bne.n	1438a <ll_conn_update+0xb2>
		if (!conn->llcp_conn_param.disabled &&
   142f4:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   142f8:	06d9      	lsls	r1, r3, #27
   142fa:	d407      	bmi.n	1430c <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
   142fc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
   14300:	069a      	lsls	r2, r3, #26
   14302:	d541      	bpl.n	14388 <ll_conn_update+0xb0>
		     (conn->llcp_features &
   14304:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
   14308:	079b      	lsls	r3, r3, #30
   1430a:	d43d      	bmi.n	14388 <ll_conn_update+0xb0>
		} else if (conn->role) {
   1430c:	f990 301d 	ldrsb.w	r3, [r0, #29]
   14310:	2b00      	cmp	r3, #0
   14312:	da17      	bge.n	14344 <ll_conn_update+0x6c>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   14314:	201a      	movs	r0, #26
   14316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
   1431a:	428b      	cmp	r3, r1
   1431c:	d00f      	beq.n	1433e <ll_conn_update+0x66>
			    (conn->llcp_conn_param.state !=
   1431e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
   14322:	f003 0207 	and.w	r2, r3, #7
   14326:	2a03      	cmp	r2, #3
   14328:	d109      	bne.n	1433e <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   1432a:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   1432e:	b2db      	uxtb	r3, r3
   14330:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   14334:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
   14338:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
   1433c:	e021      	b.n	14382 <ll_conn_update+0xaa>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1433e:	200c      	movs	r0, #12
   14340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->llcp_req != conn->llcp_ack) {
   14344:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   14348:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   1434c:	429a      	cmp	r2, r3
   1434e:	d1f6      	bne.n	1433e <ll_conn_update+0x66>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   14350:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
   14354:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
   14358:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
   1435a:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   1435c:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   14360:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
   14364:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
   14366:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   1436a:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
   1436e:	f8a0 607c 	strh.w	r6, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   14372:	f8a0 707e 	strh.w	r7, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
   14376:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   1437a:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
   1437e:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   14382:	2000      	movs	r0, #0
   14384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
   14388:	2401      	movs	r4, #1
		cmd--;
   1438a:	3c01      	subs	r4, #1
		if (cmd) {
   1438c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   14390:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   14394:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
   14398:	d1bf      	bne.n	1431a <ll_conn_update+0x42>
			if (conn->llcp_conn_param.req !=
   1439a:	4299      	cmp	r1, r3
   1439c:	d1cf      	bne.n	1433e <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   1439e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
   143a2:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   143a6:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   143aa:	b2db      	uxtb	r3, r3
   143ac:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   143b0:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval = interval;
   143b2:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   143b6:	f8a0 60c6 	strh.w	r6, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   143ba:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.cmd = 1;
   143be:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   143c2:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
   143c6:	e7dc      	b.n	14382 <ll_conn_update+0xaa>

000143c8 <ll_chm_update>:
{
   143c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
   143cc:	4c1e      	ldr	r4, [pc, #120]	; (14448 <ll_chm_update+0x80>)
   143ce:	4601      	mov	r1, r0
   143d0:	2205      	movs	r2, #5
{
   143d2:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
   143d4:	f604 5002 	addw	r0, r4, #3330	; 0xd02
   143d8:	f7ec f9f0 	bl	7bc <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   143dc:	f604 5002 	addw	r0, r4, #3330	; 0xd02
   143e0:	2105      	movs	r1, #5
   143e2:	f7f6 fe45 	bl	b070 <util_ones_count_get>
	_radio.data_chan_count =
   143e6:	f884 0d07 	strb.w	r0, [r4, #3335]	; 0xd07
   143ea:	f894 4cf8 	ldrb.w	r4, [r4, #3320]	; 0xcf8
   143ee:	3c01      	subs	r4, #1
   143f0:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
   143f2:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   143f4:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
   143f8:	2cff      	cmp	r4, #255	; 0xff
   143fa:	d102      	bne.n	14402 <ll_chm_update+0x3a>
	return 0;
   143fc:	2000      	movs	r0, #0
   143fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
   14402:	4620      	mov	r0, r4
   14404:	f7f9 fbae 	bl	db64 <connection_get>
		if (!conn || conn->role) {
   14408:	4606      	mov	r6, r0
   1440a:	b1b8      	cbz	r0, 1443c <ll_chm_update+0x74>
   1440c:	f990 301d 	ldrsb.w	r3, [r0, #29]
   14410:	2b00      	cmp	r3, #0
   14412:	db13      	blt.n	1443c <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
   14414:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   14418:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1441c:	429a      	cmp	r2, r3
   1441e:	d110      	bne.n	14442 <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   14420:	2205      	movs	r2, #5
   14422:	4629      	mov	r1, r5
   14424:	3079      	adds	r0, #121	; 0x79
   14426:	f7ec f9c9 	bl	7bc <memcpy>
		conn->llcp_req++;
   1442a:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
   1442e:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
   14432:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   14434:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
   14438:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
   1443c:	3c01      	subs	r4, #1
   1443e:	b2e4      	uxtb	r4, r4
   14440:	e7da      	b.n	143f8 <ll_chm_update+0x30>
			return 1;
   14442:	2001      	movs	r0, #1
}
   14444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14448:	20000c08 	.word	0x20000c08

0001444c <ll_chm_get>:
{
   1444c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1444e:	460d      	mov	r5, r1
	conn = connection_get(handle);
   14450:	f7f9 fb88 	bl	db64 <connection_get>
	if (!conn) {
   14454:	4604      	mov	r4, r0
   14456:	b160      	cbz	r0, 14472 <ll_chm_get+0x26>
		conn->chm_update = 0;
   14458:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   1445a:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
   1445e:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   14460:	2205      	movs	r2, #5
   14462:	4631      	mov	r1, r6
   14464:	4628      	mov	r0, r5
   14466:	f7ec f9a9 	bl	7bc <memcpy>
	} while (conn->chm_update);
   1446a:	7f20      	ldrb	r0, [r4, #28]
   1446c:	2800      	cmp	r0, #0
   1446e:	d1f6      	bne.n	1445e <ll_chm_get+0x12>
   14470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   14472:	2001      	movs	r0, #1
}
   14474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014476 <ll_start_enc_req_send>:
{
   14476:	b570      	push	{r4, r5, r6, lr}
   14478:	460d      	mov	r5, r1
   1447a:	4616      	mov	r6, r2
	conn = connection_get(handle);
   1447c:	f7f9 fb72 	bl	db64 <connection_get>
	if (!conn) {
   14480:	4604      	mov	r4, r0
   14482:	b908      	cbnz	r0, 14488 <ll_start_enc_req_send+0x12>
		return 1;
   14484:	2001      	movs	r0, #1
   14486:	bd70      	pop	{r4, r5, r6, pc}
	if (error_code) {
   14488:	b315      	cbz	r5, 144d0 <ll_start_enc_req_send+0x5a>
		if (conn->refresh == 0) {
   1448a:	f890 00f8 	ldrb.w	r0, [r0, #248]	; 0xf8
   1448e:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   14492:	d110      	bne.n	144b6 <ll_start_enc_req_send+0x40>
			if (conn->llcp_req != conn->llcp_ack) {
   14494:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   14498:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   1449c:	4293      	cmp	r3, r2
   1449e:	d1f1      	bne.n	14484 <ll_start_enc_req_send+0xe>
			conn->llcp_req++;
   144a0:	3301      	adds	r3, #1
			conn->llcp_type = LLCP_ENCRYPTION;
   144a2:	2203      	movs	r2, #3
			conn->llcp.encryption.error_code = error_code;
   144a4:	f884 5079 	strb.w	r5, [r4, #121]	; 0x79
			conn->llcp.encryption.initiate = 0;
   144a8:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
			conn->llcp_req++;
   144ac:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
			conn->llcp_type = LLCP_ENCRYPTION;
   144b0:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
   144b4:	bd70      	pop	{r4, r5, r6, pc}
			if (conn->llcp_terminate.ack !=
   144b6:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
   144ba:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   144be:	4293      	cmp	r3, r2
   144c0:	d1e0      	bne.n	14484 <ll_start_enc_req_send+0xe>
			conn->llcp_terminate.req++;
   144c2:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   144c4:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
			conn->llcp_terminate.req++;
   144c8:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	return 0;
   144cc:	2000      	movs	r0, #0
   144ce:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   144d0:	2210      	movs	r2, #16
   144d2:	4631      	mov	r1, r6
   144d4:	3084      	adds	r0, #132	; 0x84
   144d6:	f7ec f971 	bl	7bc <memcpy>
		if (conn->llcp_req != conn->llcp_ack) {
   144da:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   144de:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   144e2:	4293      	cmp	r3, r2
   144e4:	d1ce      	bne.n	14484 <ll_start_enc_req_send+0xe>
		conn->llcp_type = LLCP_ENCRYPTION;
   144e6:	2203      	movs	r2, #3
		conn->llcp_req++;
   144e8:	3301      	adds	r3, #1
		conn->llcp.encryption.error_code = 0;
   144ea:	f884 5079 	strb.w	r5, [r4, #121]	; 0x79
		conn->llcp.encryption.initiate = 0;
   144ee:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_ENCRYPTION;
   144f2:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
		conn->llcp_req++;
   144f6:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   144fa:	e7e7      	b.n	144cc <ll_start_enc_req_send+0x56>

000144fc <ll_feature_req_send>:
{
   144fc:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   144fe:	f7f9 fb31 	bl	db64 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   14502:	b168      	cbz	r0, 14520 <ll_feature_req_send+0x24>
   14504:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   14508:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1450c:	4293      	cmp	r3, r2
   1450e:	d107      	bne.n	14520 <ll_feature_req_send+0x24>
	conn->llcp_req++;
   14510:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   14512:	2204      	movs	r2, #4
	conn->llcp_req++;
   14514:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   14518:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   1451c:	2000      	movs	r0, #0
   1451e:	bd08      	pop	{r3, pc}
		return 1;
   14520:	2001      	movs	r0, #1
}
   14522:	bd08      	pop	{r3, pc}

00014524 <ll_version_ind_send>:
{
   14524:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   14526:	f7f9 fb1d 	bl	db64 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   1452a:	b168      	cbz	r0, 14548 <ll_version_ind_send+0x24>
   1452c:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   14530:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   14534:	4293      	cmp	r3, r2
   14536:	d107      	bne.n	14548 <ll_version_ind_send+0x24>
	conn->llcp_req++;
   14538:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   1453a:	2205      	movs	r2, #5
	conn->llcp_req++;
   1453c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   14540:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   14544:	2000      	movs	r0, #0
   14546:	bd08      	pop	{r3, pc}
		return 1;
   14548:	2001      	movs	r0, #1
}
   1454a:	bd08      	pop	{r3, pc}

0001454c <ll_terminate_ind_send>:
{
   1454c:	b510      	push	{r4, lr}
   1454e:	460c      	mov	r4, r1
	conn = connection_get(handle);
   14550:	f7f9 fb08 	bl	db64 <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   14554:	b160      	cbz	r0, 14570 <ll_terminate_ind_send+0x24>
   14556:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   1455a:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
   1455e:	4293      	cmp	r3, r2
   14560:	d106      	bne.n	14570 <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
   14562:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   14564:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   14568:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   1456c:	2000      	movs	r0, #0
   1456e:	bd10      	pop	{r4, pc}
		return 1;
   14570:	2001      	movs	r0, #1
}
   14572:	bd10      	pop	{r4, pc}

00014574 <ll_tx_pwr_lvl_get>:
{
   14574:	b510      	push	{r4, lr}
   14576:	4614      	mov	r4, r2
	conn = connection_get(handle);
   14578:	f7f9 faf4 	bl	db64 <connection_get>
	if (!conn) {
   1457c:	b110      	cbz	r0, 14584 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
   1457e:	2000      	movs	r0, #0
   14580:	7020      	strb	r0, [r4, #0]
	return 0;
   14582:	bd10      	pop	{r4, pc}
		return 1;
   14584:	2001      	movs	r0, #1
}
   14586:	bd10      	pop	{r4, pc}

00014588 <ll_apto_get>:
{
   14588:	b510      	push	{r4, lr}
   1458a:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1458c:	f7f9 faea 	bl	db64 <connection_get>
	if (!conn) {
   14590:	b160      	cbz	r0, 145ac <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   14592:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   14594:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
   14598:	435a      	muls	r2, r3
   1459a:	237d      	movs	r3, #125	; 0x7d
   1459c:	4353      	muls	r3, r2
	return 0;
   1459e:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   145a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   145a4:	fb93 f3f2 	sdiv	r3, r3, r2
   145a8:	8023      	strh	r3, [r4, #0]
	return 0;
   145aa:	bd10      	pop	{r4, pc}
		return 1;
   145ac:	2001      	movs	r0, #1
}
   145ae:	bd10      	pop	{r4, pc}

000145b0 <ll_apto_set>:
{
   145b0:	b510      	push	{r4, lr}
   145b2:	460c      	mov	r4, r1
	conn = connection_get(handle);
   145b4:	f7f9 fad6 	bl	db64 <connection_get>
	if (!conn) {
   145b8:	b170      	cbz	r0, 145d8 <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   145ba:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   145bc:	f240 43e2 	movw	r3, #1250	; 0x4e2
   145c0:	4353      	muls	r3, r2
   145c2:	f242 7110 	movw	r1, #10000	; 0x2710
   145c6:	fb01 3404 	mla	r4, r1, r4, r3
   145ca:	3c01      	subs	r4, #1
   145cc:	fb94 f4f3 	sdiv	r4, r4, r3
   145d0:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   145d4:	2000      	movs	r0, #0
   145d6:	bd10      	pop	{r4, pc}
		return 1;
   145d8:	2001      	movs	r0, #1
}
   145da:	bd10      	pop	{r4, pc}

000145dc <ll_length_req_send>:
{
   145dc:	b570      	push	{r4, r5, r6, lr}
   145de:	460e      	mov	r6, r1
   145e0:	4615      	mov	r5, r2
	conn = connection_get(handle);
   145e2:	f7f9 fabf 	bl	db64 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   145e6:	b1d0      	cbz	r0, 1461e <ll_length_req_send+0x42>
   145e8:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   145ec:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   145f0:	429a      	cmp	r2, r3
   145f2:	d114      	bne.n	1461e <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   145f4:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   145f8:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   145fc:	4293      	cmp	r3, r2
   145fe:	d10e      	bne.n	1461e <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   14600:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   14604:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.req++;
   14608:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1460a:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
   1460e:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   14612:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
   14616:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	return 0;
   1461a:	2000      	movs	r0, #0
   1461c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   1461e:	2001      	movs	r0, #1
}
   14620:	bd70      	pop	{r4, r5, r6, pc}
	...

00014624 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   14624:	4b03      	ldr	r3, [pc, #12]	; (14634 <ll_length_default_get+0x10>)
   14626:	f8b3 2d0a 	ldrh.w	r2, [r3, #3338]	; 0xd0a
   1462a:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   1462c:	f8b3 3d0c 	ldrh.w	r3, [r3, #3340]	; 0xd0c
   14630:	800b      	strh	r3, [r1, #0]
   14632:	4770      	bx	lr
   14634:	20000c08 	.word	0x20000c08

00014638 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   14638:	4b03      	ldr	r3, [pc, #12]	; (14648 <ll_length_default_set+0x10>)
   1463a:	f8a3 0d0a 	strh.w	r0, [r3, #3338]	; 0xd0a
	_radio.default_tx_time = max_tx_time;
   1463e:	f8a3 1d0c 	strh.w	r1, [r3, #3340]	; 0xd0c
}
   14642:	2000      	movs	r0, #0
   14644:	4770      	bx	lr
   14646:	bf00      	nop
   14648:	20000c08 	.word	0x20000c08

0001464c <ll_length_max_get>:
{
   1464c:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   1464e:	24fb      	movs	r4, #251	; 0xfb
   14650:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   14652:	f244 2090 	movw	r0, #17040	; 0x4290
   14656:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   14658:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   1465a:	8018      	strh	r0, [r3, #0]
   1465c:	bd10      	pop	{r4, pc}

0001465e <ll_phy_get>:
{
   1465e:	b538      	push	{r3, r4, r5, lr}
   14660:	460d      	mov	r5, r1
   14662:	4614      	mov	r4, r2
	conn = connection_get(handle);
   14664:	f7f9 fa7e 	bl	db64 <connection_get>
	if (!conn) {
   14668:	b158      	cbz	r0, 14682 <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   1466a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1466e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   14672:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   14674:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   14678:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1467c:	7023      	strb	r3, [r4, #0]
	return 0;
   1467e:	2000      	movs	r0, #0
   14680:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   14682:	2001      	movs	r0, #1
}
   14684:	bd38      	pop	{r3, r4, r5, pc}
	...

00014688 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   14688:	4b03      	ldr	r3, [pc, #12]	; (14698 <ll_phy_default_set+0x10>)
   1468a:	f8a3 0d0e 	strh.w	r0, [r3, #3342]	; 0xd0e
	_radio.default_phy_rx = rx;
   1468e:	f8a3 1d10 	strh.w	r1, [r3, #3344]	; 0xd10
}
   14692:	2000      	movs	r0, #0
   14694:	4770      	bx	lr
   14696:	bf00      	nop
   14698:	20000c08 	.word	0x20000c08

0001469c <ll_phy_req_send>:
{
   1469c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   146a0:	4689      	mov	r9, r1
   146a2:	4690      	mov	r8, r2
   146a4:	461f      	mov	r7, r3
	conn = connection_get(handle);
   146a6:	f7f9 fa5d 	bl	db64 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   146aa:	b320      	cbz	r0, 146f6 <ll_phy_req_send+0x5a>
   146ac:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   146b0:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   146b4:	429a      	cmp	r2, r3
   146b6:	d11e      	bne.n	146f6 <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   146b8:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   146bc:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
   146c0:	429d      	cmp	r5, r3
   146c2:	d118      	bne.n	146f6 <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   146c4:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   146c8:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   146cc:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
   146d0:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
   146d4:	f046 0102 	orr.w	r1, r6, #2
   146d8:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
   146dc:	4622      	mov	r2, r4
	conn->llcp_phy.req++;
   146de:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
   146e0:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   146e4:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
   146e8:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	conn->llcp_phy.rx = rx;
   146ec:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	return 0;
   146f0:	2000      	movs	r0, #0
   146f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   146f6:	2001      	movs	r0, #1
}
   146f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000146fc <ll_rx_get>:
{
   146fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14700:	4605      	mov	r5, r0
   14702:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   14704:	4918      	ldr	r1, [pc, #96]	; (14768 <ll_rx_get+0x6c>)
   14706:	f8d1 3d34 	ldr.w	r3, [r1, #3380]	; 0xd34
   1470a:	f8d1 2d38 	ldr.w	r2, [r1, #3384]	; 0xd38
   1470e:	4293      	cmp	r3, r2
   14710:	460f      	mov	r7, r1
   14712:	d01f      	beq.n	14754 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
   14714:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   14718:	f601 515f 	addw	r1, r1, #3423	; 0xd5f
   1471c:	f898 2000 	ldrb.w	r2, [r8]
   14720:	f7f9 f9d6 	bl	dad0 <tx_cmplt_get>
		if (!cmplt) {
   14724:	4604      	mov	r4, r0
   14726:	b9e0      	cbnz	r0, 14762 <ll_rx_get+0x66>
			first = _radio.packet_release_first;
   14728:	ae02      	add	r6, sp, #8
   1472a:	f897 3d5f 	ldrb.w	r3, [r7, #3423]	; 0xd5f
   1472e:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
   14732:	f897 2d60 	ldrb.w	r2, [r7, #3424]	; 0xd60
   14736:	4631      	mov	r1, r6
   14738:	f10d 0006 	add.w	r0, sp, #6
   1473c:	f7f9 f9c8 	bl	dad0 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   14740:	b934      	cbnz	r4, 14750 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
   14742:	b928      	cbnz	r0, 14750 <ll_rx_get+0x54>
			*node_rx = _node_rx;
   14744:	f8c5 8000 	str.w	r8, [r5]
}
   14748:	4620      	mov	r0, r4
   1474a:	b002      	add	sp, #8
   1474c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   14750:	4604      	mov	r4, r0
   14752:	e7ee      	b.n	14732 <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   14754:	f891 2d60 	ldrb.w	r2, [r1, #3424]	; 0xd60
   14758:	f601 515f 	addw	r1, r1, #3423	; 0xd5f
   1475c:	f7f9 f9b8 	bl	dad0 <tx_cmplt_get>
   14760:	4604      	mov	r4, r0
		*node_rx = NULL;
   14762:	2300      	movs	r3, #0
   14764:	602b      	str	r3, [r5, #0]
   14766:	e7ef      	b.n	14748 <ll_rx_get+0x4c>
   14768:	20000c08 	.word	0x20000c08

0001476c <ll_rx_mem_release>:
{
   1476c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
   14770:	4c17      	ldr	r4, [pc, #92]	; (147d0 <ll_rx_mem_release+0x64>)
{
   14772:	4605      	mov	r5, r0
	_node_rx = *node_rx;
   14774:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   14776:	f6a4 5618 	subw	r6, r4, #3352	; 0xd18
			mem_release(conn, &_radio.conn_free);
   1477a:	f1a4 0724 	sub.w	r7, r4, #36	; 0x24
	while (_node_rx) {
   1477e:	b928      	cbnz	r0, 1478c <ll_rx_mem_release+0x20>
	*node_rx = _node_rx;
   14780:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
   14782:	20ff      	movs	r0, #255	; 0xff
}
   14784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
   14788:	f7f9 b8e0 	b.w	d94c <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
   1478c:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
   1478e:	f8d0 8000 	ldr.w	r8, [r0]
   14792:	2a0c      	cmp	r2, #12
   14794:	d807      	bhi.n	147a6 <ll_rx_mem_release+0x3a>
   14796:	2301      	movs	r3, #1
   14798:	4093      	lsls	r3, r2
   1479a:	f641 727e 	movw	r2, #8062	; 0x1f7e
   1479e:	4213      	tst	r3, r2
   147a0:	d107      	bne.n	147b2 <ll_rx_mem_release+0x46>
   147a2:	061b      	lsls	r3, r3, #24
   147a4:	d40a      	bmi.n	147bc <ll_rx_mem_release+0x50>
			LL_ASSERT(0);
   147a6:	4040      	eors	r0, r0
   147a8:	f380 8811 	msr	BASEPRI, r0
   147ac:	f04f 0004 	mov.w	r0, #4
   147b0:	df02      	svc	2
			mem_release(_node_rx_free,
   147b2:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
   147b4:	f7f6 facb 	bl	ad4e <mem_release>
{
   147b8:	4640      	mov	r0, r8
   147ba:	e7e0      	b.n	1477e <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   147bc:	88c2      	ldrh	r2, [r0, #6]
   147be:	f8d6 0cf0 	ldr.w	r0, [r6, #3312]	; 0xcf0
   147c2:	f44f 71aa 	mov.w	r1, #340	; 0x154
   147c6:	f7f6 fadd 	bl	ad84 <mem_get>
			mem_release(conn, &_radio.conn_free);
   147ca:	4639      	mov	r1, r7
   147cc:	e7f2      	b.n	147b4 <ll_rx_mem_release+0x48>
   147ce:	bf00      	nop
   147d0:	20001920 	.word	0x20001920

000147d4 <do_radio_rx_fc_set>:
	if (req == ack) {
   147d4:	4291      	cmp	r1, r2
{
   147d6:	b510      	push	{r4, lr}
   147d8:	4b14      	ldr	r3, [pc, #80]	; (1482c <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
   147da:	d119      	bne.n	14810 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   147dc:	f8d3 2d38 	ldr.w	r2, [r3, #3384]	; 0xd38
   147e0:	f8d3 4d34 	ldr.w	r4, [r3, #3380]	; 0xd34
   147e4:	4294      	cmp	r4, r2
   147e6:	d111      	bne.n	1480c <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
   147e8:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
   147ea:	bf14      	ite	ne
   147ec:	460a      	movne	r2, r1
   147ee:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   147f0:	3a01      	subs	r2, #1
   147f2:	b2d2      	uxtb	r2, r2
   147f4:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   147f8:	f883 2d69 	strb.w	r2, [r3, #3433]	; 0xd69
			if (req != _radio.fc_req) {
   147fc:	f893 2d68 	ldrb.w	r2, [r3, #3432]	; 0xd68
			_radio.fc_handle[--ack1] = handle;
   14800:	f8a4 0d62 	strh.w	r0, [r4, #3426]	; 0xd62
			if (req != _radio.fc_req) {
   14804:	4291      	cmp	r1, r2
   14806:	d00f      	beq.n	14828 <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
   14808:	f883 1d69 	strb.w	r1, [r3, #3433]	; 0xd69
			return 1;
   1480c:	2001      	movs	r0, #1
   1480e:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
   14810:	b929      	cbnz	r1, 1481e <do_radio_rx_fc_set+0x4a>
   14812:	f8b3 3d66 	ldrh.w	r3, [r3, #3430]	; 0xd66
				return 1;
   14816:	1a18      	subs	r0, r3, r0
   14818:	bf18      	it	ne
   1481a:	2001      	movne	r0, #1
   1481c:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   1481e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   14822:	f8b3 3d60 	ldrh.w	r3, [r3, #3424]	; 0xd60
   14826:	e7f6      	b.n	14816 <do_radio_rx_fc_set+0x42>
	return 0;
   14828:	2000      	movs	r0, #0
}
   1482a:	bd10      	pop	{r4, pc}
   1482c:	20000c08 	.word	0x20000c08

00014830 <radio_rx_fc_set>:
{
   14830:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
   14832:	4b14      	ldr	r3, [pc, #80]	; (14884 <radio_rx_fc_set+0x54>)
   14834:	f893 2d6a 	ldrb.w	r2, [r3, #3434]	; 0xd6a
{
   14838:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
   1483a:	b302      	cbz	r2, 1487e <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
   1483c:	f893 2d68 	ldrb.w	r2, [r3, #3432]	; 0xd68
   14840:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
   14842:	f893 2d69 	ldrb.w	r2, [r3, #3433]	; 0xd69
		if (fc) {
   14846:	b135      	cbz	r5, 14856 <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
   14848:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1484c:	4298      	cmp	r0, r3
   1484e:	d016      	beq.n	1487e <radio_rx_fc_set+0x4e>
}
   14850:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
   14852:	f7ff bfbf 	b.w	147d4 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   14856:	f8d3 0d34 	ldr.w	r0, [r3, #3380]	; 0xd34
   1485a:	f8d3 4d38 	ldr.w	r4, [r3, #3384]	; 0xd38
   1485e:	42a0      	cmp	r0, r4
   14860:	d10d      	bne.n	1487e <radio_rx_fc_set+0x4e>
   14862:	4291      	cmp	r1, r2
   14864:	d00b      	beq.n	1487e <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   14866:	f8d3 4d38 	ldr.w	r4, [r3, #3384]	; 0xd38
			_radio.fc_ack = req;
   1486a:	f883 1d69 	strb.w	r1, [r3, #3433]	; 0xd69
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1486e:	42a0      	cmp	r0, r4
   14870:	d005      	beq.n	1487e <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
   14872:	f893 0d68 	ldrb.w	r0, [r3, #3432]	; 0xd68
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   14876:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
   14878:	bf08      	it	eq
   1487a:	f883 2d69 	strbeq.w	r2, [r3, #3433]	; 0xd69
}
   1487e:	2000      	movs	r0, #0
   14880:	bc30      	pop	{r4, r5}
   14882:	4770      	bx	lr
   14884:	20000c08 	.word	0x20000c08

00014888 <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   14888:	4801      	ldr	r0, [pc, #4]	; (14890 <ll_tx_mem_acquire+0x8>)
   1488a:	f7f6 ba46 	b.w	ad1a <mem_acquire>
   1488e:	bf00      	nop
   14890:	20001954 	.word	0x20001954

00014894 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   14894:	4901      	ldr	r1, [pc, #4]	; (1489c <ll_tx_mem_release+0x8>)
   14896:	f7f6 ba5a 	b.w	ad4e <mem_release>
   1489a:	bf00      	nop
   1489c:	20001954 	.word	0x20001954

000148a0 <ll_tx_mem_enqueue>:
}

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   148a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   148a2:	4d2b      	ldr	r5, [pc, #172]	; (14950 <ll_tx_mem_enqueue+0xb0>)
   148a4:	f895 4d5e 	ldrb.w	r4, [r5, #3422]	; 0xd5e
	if (last == _radio.packet_tx_count) {
   148a8:	f895 3d5c 	ldrb.w	r3, [r5, #3420]	; 0xd5c
	last = _radio.packet_tx_last + 1;
   148ac:	3401      	adds	r4, #1
{
   148ae:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   148b0:	b2e4      	uxtb	r4, r4
{
   148b2:	4607      	mov	r7, r0
   148b4:	460e      	mov	r6, r1
		last = 0;
   148b6:	42a3      	cmp	r3, r4
   148b8:	bf08      	it	eq
   148ba:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   148bc:	f7f9 f952 	bl	db64 <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   148c0:	2800      	cmp	r0, #0
   148c2:	d042      	beq.n	1494a <ll_tx_mem_enqueue+0xaa>
   148c4:	f895 3d5d 	ldrb.w	r3, [r5, #3421]	; 0xd5d
   148c8:	429c      	cmp	r4, r3
   148ca:	d03e      	beq.n	1494a <ll_tx_mem_enqueue+0xaa>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   148cc:	f8b5 3d50 	ldrh.w	r3, [r5, #3408]	; 0xd50
   148d0:	7972      	ldrb	r2, [r6, #5]
   148d2:	3b07      	subs	r3, #7
   148d4:	429a      	cmp	r2, r3
   148d6:	d905      	bls.n	148e4 <ll_tx_mem_enqueue+0x44>
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   148d8:	4040      	eors	r0, r0
   148da:	f380 8811 	msr	BASEPRI, r0
   148de:	f04f 0004 	mov.w	r0, #4
   148e2:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   148e4:	f895 2d5e 	ldrb.w	r2, [r5, #3422]	; 0xd5e
   148e8:	f8d5 3d54 	ldr.w	r3, [r5, #3412]	; 0xd54
   148ec:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   148f0:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   148f4:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   148f6:	f885 4d5e 	strb.w	r4, [r5, #3422]	; 0xd5e
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   148fa:	f990 301d 	ldrsb.w	r3, [r0, #29]
   148fe:	2b00      	cmp	r3, #0
   14900:	db02      	blt.n	14908 <ll_tx_mem_enqueue+0x68>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   14902:	2000      	movs	r0, #0
}
   14904:	b009      	add	sp, #36	; 0x24
   14906:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   14908:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   1490a:	2b00      	cmp	r3, #0
   1490c:	d0f9      	beq.n	14902 <ll_tx_mem_enqueue+0x62>
   1490e:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   14912:	f012 0302 	ands.w	r3, r2, #2
   14916:	d1f4      	bne.n	14902 <ll_tx_mem_enqueue+0x62>
		conn->slave.latency_cancel = 1;
   14918:	f042 0202 	orr.w	r2, r2, #2
   1491c:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   14920:	f890 2020 	ldrb.w	r2, [r0, #32]
   14924:	490b      	ldr	r1, [pc, #44]	; (14954 <ll_tx_mem_enqueue+0xb4>)
   14926:	9105      	str	r1, [sp, #20]
   14928:	3207      	adds	r2, #7
   1492a:	2101      	movs	r1, #1
   1492c:	9006      	str	r0, [sp, #24]
   1492e:	9304      	str	r3, [sp, #16]
   14930:	9103      	str	r1, [sp, #12]
   14932:	9302      	str	r3, [sp, #8]
   14934:	9301      	str	r3, [sp, #4]
   14936:	9300      	str	r3, [sp, #0]
   14938:	4618      	mov	r0, r3
   1493a:	b2d2      	uxtb	r2, r2
   1493c:	2103      	movs	r1, #3
   1493e:	f7f7 f8b1 	bl	baa4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14942:	f030 0302 	bics.w	r3, r0, #2
   14946:	d1c7      	bne.n	148d8 <ll_tx_mem_enqueue+0x38>
   14948:	e7db      	b.n	14902 <ll_tx_mem_enqueue+0x62>
		return 1;
   1494a:	2001      	movs	r0, #1
   1494c:	e7da      	b.n	14904 <ll_tx_mem_enqueue+0x64>
   1494e:	bf00      	nop
   14950:	20000c08 	.word	0x20000c08
   14954:	0000f1f5 	.word	0x0000f1f5

00014958 <ll_enc_req_send>:
{
   14958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1495c:	4607      	mov	r7, r0
   1495e:	4688      	mov	r8, r1
   14960:	4616      	mov	r6, r2
   14962:	4699      	mov	r9, r3
	conn = connection_get(handle);
   14964:	f7f9 f8fe 	bl	db64 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   14968:	4605      	mov	r5, r0
   1496a:	b910      	cbnz	r0, 14972 <ll_enc_req_send+0x1a>
			return 1;
   1496c:	2001      	movs	r0, #1
   1496e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   14972:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   14976:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1497a:	429a      	cmp	r2, r3
   1497c:	d1f6      	bne.n	1496c <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
   1497e:	f7ff ff83 	bl	14888 <ll_tx_mem_acquire>
	if (node_tx) {
   14982:	4604      	mov	r4, r0
   14984:	2800      	cmp	r0, #0
   14986:	d0f1      	beq.n	1496c <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   14988:	2210      	movs	r2, #16
   1498a:	4649      	mov	r1, r9
   1498c:	f105 0084 	add.w	r0, r5, #132	; 0x84
   14990:	f7eb ff14 	bl	7bc <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   14994:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   14998:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   1499c:	d124      	bne.n	149e8 <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1499e:	7923      	ldrb	r3, [r4, #4]
   149a0:	f043 0303 	orr.w	r3, r3, #3
   149a4:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   149a6:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   149a8:	2208      	movs	r2, #8
			pdu_data_tx->len =
   149aa:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   149ac:	2303      	movs	r3, #3
   149ae:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   149b0:	4641      	mov	r1, r8
   149b2:	18a0      	adds	r0, r4, r2
   149b4:	f7eb ff02 	bl	7bc <memcpy>
			enc_req->ediv[0] = ediv[0];
   149b8:	7833      	ldrb	r3, [r6, #0]
   149ba:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   149bc:	7873      	ldrb	r3, [r6, #1]
   149be:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   149c0:	2108      	movs	r1, #8
   149c2:	f104 0012 	add.w	r0, r4, #18
   149c6:	f7f7 f9cb 	bl	bd60 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   149ca:	2104      	movs	r1, #4
   149cc:	f104 001a 	add.w	r0, r4, #26
   149d0:	f7f7 f9c6 	bl	bd60 <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
   149d4:	4621      	mov	r1, r4
   149d6:	4638      	mov	r0, r7
   149d8:	f7ff ff62 	bl	148a0 <ll_tx_mem_enqueue>
   149dc:	2601      	movs	r6, #1
   149de:	b1d0      	cbz	r0, 14a16 <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
   149e0:	4620      	mov	r0, r4
   149e2:	f7ff ff57 	bl	14894 <ll_tx_mem_release>
   149e6:	e7c1      	b.n	1496c <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   149e8:	2b30      	cmp	r3, #48	; 0x30
   149ea:	d1f9      	bne.n	149e0 <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   149ec:	2208      	movs	r2, #8
   149ee:	4641      	mov	r1, r8
   149f0:	f105 007a 	add.w	r0, r5, #122	; 0x7a
   149f4:	f7eb fee2 	bl	7bc <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   149f8:	7833      	ldrb	r3, [r6, #0]
   149fa:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
   149fe:	7873      	ldrb	r3, [r6, #1]
   14a00:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   14a04:	7923      	ldrb	r3, [r4, #4]
   14a06:	f043 0303 	orr.w	r3, r3, #3
   14a0a:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   14a0c:	2301      	movs	r3, #1
   14a0e:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   14a10:	230a      	movs	r3, #10
   14a12:	71e3      	strb	r3, [r4, #7]
   14a14:	e7de      	b.n	149d4 <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
   14a16:	2303      	movs	r3, #3
   14a18:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
   14a1c:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
   14a20:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
   14a24:	3301      	adds	r3, #1
   14a26:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
}
   14a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

00014a30 <radio_adv_enable>:
{
   14a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a34:	b08f      	sub	sp, #60	; 0x3c
   14a36:	4699      	mov	r9, r3
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   14a38:	2302      	movs	r3, #2
	if (_radio.advertiser.is_enabled) {
   14a3a:	f8df b35c 	ldr.w	fp, [pc, #860]	; 14d98 <radio_adv_enable+0x368>
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   14a3e:	930d      	str	r3, [sp, #52]	; 0x34
	radio_ext_adv_enable_flag = false;
   14a40:	4bcf      	ldr	r3, [pc, #828]	; (14d80 <radio_adv_enable+0x350>)
{
   14a42:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
	radio_ext_adv_enable_flag = false;
   14a46:	2400      	movs	r4, #0
   14a48:	701c      	strb	r4, [r3, #0]
	if (_radio.advertiser.is_enabled) {
   14a4a:	f99b 3028 	ldrsb.w	r3, [fp, #40]	; 0x28
   14a4e:	42a3      	cmp	r3, r4
{
   14a50:	4680      	mov	r8, r0
   14a52:	4692      	mov	sl, r2
   14a54:	465d      	mov	r5, fp
	if (_radio.advertiser.is_enabled) {
   14a56:	da01      	bge.n	14a5c <radio_adv_enable+0x2c>
	return BT_HCI_ERR_CMD_DISALLOWED;
   14a58:	200c      	movs	r0, #12
   14a5a:	e1b2      	b.n	14dc2 <radio_adv_enable+0x392>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
   14a5c:	f89b 722f 	ldrb.w	r7, [fp, #559]	; 0x22f
   14a60:	eb07 2707 	add.w	r7, r7, r7, lsl #8
   14a64:	372c      	adds	r7, #44	; 0x2c
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   14a66:	f81b 3007 	ldrb.w	r3, [fp, r7]
   14a6a:	f003 030f 	and.w	r3, r3, #15
   14a6e:	2b01      	cmp	r3, #1
   14a70:	f200 80bb 	bhi.w	14bea <radio_adv_enable+0x1ba>
		if (_radio.advertiser.conn) {
   14a74:	f8db 6c18 	ldr.w	r6, [fp, #3096]	; 0xc18
   14a78:	2e00      	cmp	r6, #0
   14a7a:	d1ed      	bne.n	14a58 <radio_adv_enable+0x28>
		link = mem_acquire(&_radio.link_rx_free);
   14a7c:	f50b 6053 	add.w	r0, fp, #3376	; 0xd30
   14a80:	f7f6 f94b 	bl	ad1a <mem_acquire>
		if (!link) {
   14a84:	900a      	str	r0, [sp, #40]	; 0x28
   14a86:	b158      	cbz	r0, 14aa0 <radio_adv_enable+0x70>
		conn = mem_acquire(&_radio.conn_free);
   14a88:	f60b 40f4 	addw	r0, fp, #3316	; 0xcf4
   14a8c:	f7f6 f945 	bl	ad1a <mem_acquire>
		if (!conn) {
   14a90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14a92:	4604      	mov	r4, r0
   14a94:	b930      	cbnz	r0, 14aa4 <radio_adv_enable+0x74>
			mem_release(link, &_radio.link_rx_free);
   14a96:	f50b 6153 	add.w	r1, fp, #3376	; 0xd30
   14a9a:	4610      	mov	r0, r2
   14a9c:	f7f6 f957 	bl	ad4e <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   14aa0:	2007      	movs	r0, #7
   14aa2:	e18e      	b.n	14dc2 <radio_adv_enable+0x392>
		conn->handle = 0xFFFF;
   14aa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14aa8:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
   14aaa:	f503 4394 	add.w	r3, r3, #18944	; 0x4a00
   14aae:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
		conn->data_chan_sel = 0;
   14ab2:	7f43      	ldrb	r3, [r0, #29]
		conn->data_chan_use = 0;
   14ab4:	77c6      	strb	r6, [r0, #31]
		conn->data_chan_sel = 0;
   14ab6:	f366 1386 	bfi	r3, r6, #6, #1
   14aba:	7743      	strb	r3, [r0, #29]
		conn->default_tx_octets = _radio.default_tx_octets;
   14abc:	f8bb 3d0a 	ldrh.w	r3, [fp, #3338]	; 0xd0a
   14ac0:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   14ac2:	231b      	movs	r3, #27
   14ac4:	85c3      	strh	r3, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   14ac6:	8603      	strh	r3, [r0, #48]	; 0x30
		conn->default_tx_time = _radio.default_tx_time;
   14ac8:	f8bb 3d0c 	ldrh.w	r3, [fp, #3340]	; 0xd0c
   14acc:	8643      	strh	r3, [r0, #50]	; 0x32
		conn->max_tx_time =
   14ace:	f44f 73a4 	mov.w	r3, #328	; 0x148
   14ad2:	8683      	strh	r3, [r0, #52]	; 0x34
		conn->max_rx_time =
   14ad4:	86c3      	strh	r3, [r0, #54]	; 0x36
		conn->phy_pref_tx = _radio.default_phy_tx;
   14ad6:	f8bb 1d0e 	ldrh.w	r1, [fp, #3342]	; 0xd0e
   14ada:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
		conn->event_counter = 0;
   14ade:	8446      	strh	r6, [r0, #34]	; 0x22
		conn->phy_pref_tx = _radio.default_phy_tx;
   14ae0:	f361 0302 	bfi	r3, r1, #0, #3
		conn->phy_tx = BIT(0);
   14ae4:	2101      	movs	r1, #1
   14ae6:	f361 03c5 	bfi	r3, r1, #3, #3
		conn->phy_pref_flags = 0;
   14aea:	f366 1386 	bfi	r3, r6, #6, #1
		conn->phy_flags = 0;
   14aee:	f366 13c7 	bfi	r3, r6, #7, #1
   14af2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		conn->phy_tx_time = BIT(0);
   14af6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
		conn->latency_prepare = 0;
   14afa:	8506      	strh	r6, [r0, #40]	; 0x28
		conn->phy_tx_time = BIT(0);
   14afc:	f361 0302 	bfi	r3, r1, #0, #3
   14b00:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		conn->latency_event = 0;
   14b04:	8546      	strh	r6, [r0, #42]	; 0x2a
		conn->phy_pref_rx = _radio.default_phy_rx;
   14b06:	f8bb 0d10 	ldrh.w	r0, [fp, #3344]	; 0xd10
		conn->slave.window_widening_prepare_us = 0;
   14b0a:	65e6      	str	r6, [r4, #92]	; 0x5c
		conn->phy_pref_rx = _radio.default_phy_rx;
   14b0c:	b2db      	uxtb	r3, r3
   14b0e:	f360 03c5 	bfi	r3, r0, #3, #3
   14b12:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->phy_rx = BIT(0);
   14b16:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		conn->slave.window_widening_event_us = 0;
   14b1a:	6626      	str	r6, [r4, #96]	; 0x60
		conn->phy_rx = BIT(0);
   14b1c:	f361 0302 	bfi	r3, r1, #0, #3
   14b20:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
		conn->role = 1;
   14b24:	7f63      	ldrb	r3, [r4, #29]
   14b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14b2a:	7763      	strb	r3, [r4, #29]
		conn->connect_expire = 6;
   14b2c:	2306      	movs	r3, #6
   14b2e:	87a3      	strh	r3, [r4, #60]	; 0x3c
		conn->common.fex_valid = 0;
   14b30:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   14b34:	f366 1345 	bfi	r3, r6, #5, #1
		conn->slave.latency_enabled = 0;
   14b38:	f366 0300 	bfi	r3, r6, #0, #1
		conn->slave.latency_cancel = 0;
   14b3c:	f366 0341 	bfi	r3, r6, #1, #1
   14b40:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		conn->slave.ticks_to_offset = 0;
   14b44:	6726      	str	r6, [r4, #112]	; 0x70
		conn->llcp_version.tx = 0;
   14b46:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
		conn->supervision_expire = 0;
   14b4a:	f8a4 6040 	strh.w	r6, [r4, #64]	; 0x40
		conn->llcp_version.tx = 0;
   14b4e:	f366 0300 	bfi	r3, r6, #0, #1
		conn->llcp_version.rx = 0;
   14b52:	f366 0341 	bfi	r3, r6, #1, #1
   14b56:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
		conn->llcp_conn_param.disabled = 0;
   14b5a:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->procedure_expire = 0;
   14b5e:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
		conn->llcp_conn_param.disabled = 0;
   14b62:	f366 1304 	bfi	r3, r6, #4, #1
   14b66:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->sn = 0;
   14b6a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->apto_expire = 0;
   14b6e:	f8a4 604c 	strh.w	r6, [r4, #76]	; 0x4c
		conn->sn = 0;
   14b72:	f366 0300 	bfi	r3, r6, #0, #1
		conn->nesn = 0;
   14b76:	f366 0341 	bfi	r3, r6, #1, #1
		conn->pause_rx = 0;
   14b7a:	f366 0382 	bfi	r3, r6, #2, #1
		conn->pause_tx = 0;
   14b7e:	f366 03c3 	bfi	r3, r6, #3, #1
		conn->enc_rx = 0;
   14b82:	f366 1304 	bfi	r3, r6, #4, #1
		conn->enc_tx = 0;
   14b86:	f366 1345 	bfi	r3, r6, #5, #1
		conn->refresh = 0;
   14b8a:	f366 1386 	bfi	r3, r6, #6, #1
		conn->empty = 0;
   14b8e:	f366 13c7 	bfi	r3, r6, #7, #1
		conn->appto_expire = 0;
   14b92:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
		conn->llcp_req = 0;
   14b96:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
		conn->llcp_ack = 0;
   14b9a:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
		conn->llcp_terminate.req = 0;
   14b9e:	f884 60b0 	strb.w	r6, [r4, #176]	; 0xb0
		conn->llcp_terminate.ack = 0;
   14ba2:	f884 60b1 	strb.w	r6, [r4, #177]	; 0xb1
		conn->llcp_terminate.reason_peer = 0;
   14ba6:	f884 60b3 	strb.w	r6, [r4, #179]	; 0xb3
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   14baa:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
		conn->llcp_conn_param.req = 0;
   14bae:	f884 60c0 	strb.w	r6, [r4, #192]	; 0xc0
		conn->llcp_conn_param.ack = 0;
   14bb2:	f884 60c1 	strb.w	r6, [r4, #193]	; 0xc1
		conn->llcp_length.req = 0;
   14bb6:	f884 60e8 	strb.w	r6, [r4, #232]	; 0xe8
		conn->llcp_length.ack = 0;
   14bba:	f884 60e9 	strb.w	r6, [r4, #233]	; 0xe9
		conn->llcp_phy.req = 0;
   14bbe:	f884 60f4 	strb.w	r6, [r4, #244]	; 0xf4
		conn->llcp_phy.ack = 0;
   14bc2:	f884 60f5 	strb.w	r6, [r4, #245]	; 0xf5
		conn->empty = 0;
   14bc6:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		conn->pkt_tx_head = NULL;
   14bca:	f8c4 613c 	str.w	r6, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = NULL;
   14bce:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
		conn->pkt_tx_ctrl_last = NULL;
   14bd2:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
		conn->pkt_tx_data = NULL;
   14bd6:	f8c4 6148 	str.w	r6, [r4, #328]	; 0x148
		conn->pkt_tx_last = NULL;
   14bda:	f8c4 614c 	str.w	r6, [r4, #332]	; 0x14c
		conn->packet_tx_head_len = 0;
   14bde:	f884 6150 	strb.w	r6, [r4, #336]	; 0x150
		conn->packet_tx_head_offset = 0;
   14be2:	f884 6151 	strb.w	r6, [r4, #337]	; 0x151
		_radio.advertiser.conn = conn;
   14be6:	f8cb 4c18 	str.w	r4, [fp, #3096]	; 0xc18
	_radio.advertiser.chan_map = chan_map;
   14bea:	a80e      	add	r0, sp, #56	; 0x38
   14bec:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   14bf0:	f810 2d09 	ldrb.w	r2, [r0, #-9]!
	_radio.advertiser.rl_idx = rl_idx;
   14bf4:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
	_radio.advertiser.chan_map = chan_map;
   14bf8:	f362 1306 	bfi	r3, r2, #4, #3
   14bfc:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.filter_policy = filter_policy;
   14c00:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
   14c04:	f36a 0301 	bfi	r3, sl, #0, #2
   14c08:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
	_radio.advertiser.hdr.ticks_active_to_start =
   14c0c:	f8d5 3d6c 	ldr.w	r3, [r5, #3436]	; 0xd6c
   14c10:	61eb      	str	r3, [r5, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
   14c12:	2327      	movs	r3, #39	; 0x27
   14c14:	61ab      	str	r3, [r5, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   14c16:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
   14c18:	2300      	movs	r3, #0
   14c1a:	622b      	str	r3, [r5, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   14c1c:	f7f6 fa28 	bl	b070 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   14c20:	f81b 6007 	ldrb.w	r6, [fp, r7]
   14c24:	f006 060f 	and.w	r6, r6, #15
   14c28:	2e01      	cmp	r6, #1
   14c2a:	d169      	bne.n	14d00 <radio_adv_enable+0x2d0>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
   14c2c:	f44f 7327 	mov.w	r3, #668	; 0x29c
   14c30:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
   14c32:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
   14c36:	4953      	ldr	r1, [pc, #332]	; (14d84 <radio_adv_enable+0x354>)
   14c38:	a34f      	add	r3, pc, #316	; (adr r3, 14d78 <radio_adv_enable+0x348>)
   14c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   14c3e:	fba0 0101 	umull	r0, r1, r0, r1
   14c42:	f7eb fb11 	bl	268 <__aeabi_uldivmod>
	ticks_slot_offset =
   14c46:	69ef      	ldr	r7, [r5, #28]
   14c48:	69ab      	ldr	r3, [r5, #24]
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
   14c4a:	6268      	str	r0, [r5, #36]	; 0x24
	ticks_slot_offset =
   14c4c:	429f      	cmp	r7, r3
   14c4e:	bf38      	it	cc
   14c50:	461f      	movcc	r7, r3
	_radio.advertiser.is_hdcd = !interval &&
   14c52:	f1b8 0f00 	cmp.w	r8, #0
   14c56:	d15b      	bne.n	14d10 <radio_adv_enable+0x2e0>
   14c58:	1e72      	subs	r2, r6, #1
   14c5a:	4253      	negs	r3, r2
   14c5c:	4153      	adcs	r3, r2
   14c5e:	f895 6028 	ldrb.w	r6, [r5, #40]	; 0x28
   14c62:	f8df 9138 	ldr.w	r9, [pc, #312]	; 14d9c <radio_adv_enable+0x36c>
   14c66:	f8df b138 	ldr.w	fp, [pc, #312]	; 14da0 <radio_adv_enable+0x370>
   14c6a:	f363 1686 	bfi	r6, r3, #6, #1
   14c6e:	f885 6028 	strb.w	r6, [r5, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
   14c72:	f016 0640 	ands.w	r6, r6, #64	; 0x40
   14c76:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   14c7a:	d051      	beq.n	14d20 <radio_adv_enable+0x2f0>
		u32_t ticks_now = ticker_ticks_now_get();
   14c7c:	f7f7 f830 	bl	bce0 <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14c80:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   14c82:	f8cd a020 	str.w	sl, [sp, #32]
   14c86:	441f      	add	r7, r3
		u32_t ticks_now = ticker_ticks_now_get();
   14c88:	4606      	mov	r6, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14c8a:	2000      	movs	r0, #0
   14c8c:	f8cd 901c 	str.w	r9, [sp, #28]
   14c90:	9006      	str	r0, [sp, #24]
   14c92:	f8cd b014 	str.w	fp, [sp, #20]
   14c96:	9704      	str	r7, [sp, #16]
   14c98:	9003      	str	r0, [sp, #12]
   14c9a:	9002      	str	r0, [sp, #8]
   14c9c:	e88d 0081 	stmia.w	sp, {r0, r7}
   14ca0:	4633      	mov	r3, r6
   14ca2:	2205      	movs	r2, #5
   14ca4:	2103      	movs	r1, #3
   14ca6:	f7f6 fead 	bl	ba04 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   14caa:	2802      	cmp	r0, #2
   14cac:	d034      	beq.n	14d18 <radio_adv_enable+0x2e8>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   14cae:	980d      	ldr	r0, [sp, #52]	; 0x34
   14cb0:	b9c8      	cbnz	r0, 14ce6 <radio_adv_enable+0x2b6>
		ret_cb = TICKER_STATUS_BUSY;
   14cb2:	2302      	movs	r3, #2
   14cb4:	930d      	str	r3, [sp, #52]	; 0x34
		ret =
   14cb6:	4b34      	ldr	r3, [pc, #208]	; (14d88 <radio_adv_enable+0x358>)
   14cb8:	9305      	str	r3, [sp, #20]
   14cba:	2203      	movs	r2, #3
   14cbc:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
   14cc0:	9300      	str	r3, [sp, #0]
   14cc2:	f8cd a020 	str.w	sl, [sp, #32]
   14cc6:	f8cd 901c 	str.w	r9, [sp, #28]
   14cca:	9006      	str	r0, [sp, #24]
   14ccc:	9004      	str	r0, [sp, #16]
   14cce:	9003      	str	r0, [sp, #12]
   14cd0:	9002      	str	r0, [sp, #8]
   14cd2:	9001      	str	r0, [sp, #4]
   14cd4:	4633      	mov	r3, r6
   14cd6:	4611      	mov	r1, r2
		ret =
   14cd8:	f7f6 fe94 	bl	ba04 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   14cdc:	2802      	cmp	r0, #2
   14cde:	d044      	beq.n	14d6a <radio_adv_enable+0x33a>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   14ce0:	980d      	ldr	r0, [sp, #52]	; 0x34
   14ce2:	2800      	cmp	r0, #0
   14ce4:	d05e      	beq.n	14da4 <radio_adv_enable+0x374>
	if (conn) {
   14ce6:	2c00      	cmp	r4, #0
   14ce8:	f43f aeb6 	beq.w	14a58 <radio_adv_enable+0x28>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
   14cec:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   14cf0:	4926      	ldr	r1, [pc, #152]	; (14d8c <radio_adv_enable+0x35c>)
   14cf2:	f7f6 f82c 	bl	ad4e <mem_release>
		mem_release(conn, &_radio.conn_free);
   14cf6:	4926      	ldr	r1, [pc, #152]	; (14d90 <radio_adv_enable+0x360>)
   14cf8:	4620      	mov	r0, r4
   14cfa:	f7f6 f828 	bl	ad4e <mem_release>
   14cfe:	e6ab      	b.n	14a58 <radio_adv_enable+0x28>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
   14d00:	2e02      	cmp	r6, #2
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
   14d02:	bf0c      	ite	eq
   14d04:	f44f 7329 	moveq.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
   14d08:	f240 53fc 	movwne	r3, #1532	; 0x5fc
   14d0c:	4358      	muls	r0, r3
   14d0e:	e792      	b.n	14c36 <radio_adv_enable+0x206>
   14d10:	2300      	movs	r3, #0
   14d12:	e7a4      	b.n	14c5e <radio_adv_enable+0x22e>
				cpu_sleep();
   14d14:	f7f8 fd40 	bl	d798 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
   14d18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14d1a:	2b02      	cmp	r3, #2
   14d1c:	d0fa      	beq.n	14d14 <radio_adv_enable+0x2e4>
   14d1e:	e7c6      	b.n	14cae <radio_adv_enable+0x27e>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14d20:	f7f6 ffde 	bl	bce0 <ticker_ticks_now_get>
		ret =
   14d24:	f8cd a020 	str.w	sl, [sp, #32]
   14d28:	f8cd 901c 	str.w	r9, [sp, #28]
   14d2c:	9606      	str	r6, [sp, #24]
   14d2e:	f8cd b014 	str.w	fp, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14d32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   14d34:	900a      	str	r0, [sp, #40]	; 0x28
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   14d36:	4817      	ldr	r0, [pc, #92]	; (14d94 <radio_adv_enable+0x364>)
		ret =
   14d38:	9603      	str	r6, [sp, #12]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   14d3a:	fa1f f888 	uxth.w	r8, r8
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14d3e:	441f      	add	r7, r3
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   14d40:	fba8 0100 	umull	r0, r1, r8, r0
   14d44:	2391      	movs	r3, #145	; 0x91
   14d46:	fb03 1108 	mla	r1, r3, r8, r1
   14d4a:	a30b      	add	r3, pc, #44	; (adr r3, 14d78 <radio_adv_enable+0x348>)
   14d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret =
   14d50:	9704      	str	r7, [sp, #16]
   14d52:	9602      	str	r6, [sp, #8]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   14d54:	f7eb fa88 	bl	268 <__aeabi_uldivmod>
		ret =
   14d58:	9600      	str	r6, [sp, #0]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   14d5a:	9001      	str	r0, [sp, #4]
		ret =
   14d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14d5e:	2205      	movs	r2, #5
   14d60:	2103      	movs	r1, #3
   14d62:	4630      	mov	r0, r6
   14d64:	e7b8      	b.n	14cd8 <radio_adv_enable+0x2a8>
			cpu_sleep();
   14d66:	f7f8 fd17 	bl	d798 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   14d6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14d6c:	2b02      	cmp	r3, #2
   14d6e:	d0fa      	beq.n	14d66 <radio_adv_enable+0x336>
   14d70:	e7b6      	b.n	14ce0 <radio_adv_enable+0x2b0>
   14d72:	bf00      	nop
   14d74:	f3af 8000 	nop.w
   14d78:	1afd498d 	.word	0x1afd498d
   14d7c:	00000007 	.word	0x00000007
   14d80:	200019c9 	.word	0x200019c9
   14d84:	3b9aca00 	.word	0x3b9aca00
   14d88:	0000f581 	.word	0x0000f581
   14d8c:	20001938 	.word	0x20001938
   14d90:	200018fc 	.word	0x200018fc
   14d94:	84e72a00 	.word	0x84e72a00
   14d98:	20000c08 	.word	0x20000c08
   14d9c:	0000d7dd 	.word	0x0000d7dd
   14da0:	0000f48d 	.word	0x0000f48d
		_radio.advertiser.is_enabled = 1;
   14da4:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   14da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14dac:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
   14db0:	f895 3c2c 	ldrb.w	r3, [r5, #3116]	; 0xc2c
   14db4:	f013 0401 	ands.w	r4, r3, #1
   14db8:	d103      	bne.n	14dc2 <radio_adv_enable+0x392>
			ll_adv_scan_state_cb(BIT(0));
   14dba:	2001      	movs	r0, #1
   14dbc:	f001 ff4e 	bl	16c5c <ll_adv_scan_state_cb>
		return 0;
   14dc0:	4620      	mov	r0, r4
}
   14dc2:	b00f      	add	sp, #60	; 0x3c
   14dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014dc8 <radio_ext_adv_enable>:
{
   14dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14dcc:	b093      	sub	sp, #76	; 0x4c
	if (_radio.advertiser.is_enabled) {
   14dce:	4ec4      	ldr	r6, [pc, #784]	; (150e0 <radio_ext_adv_enable+0x318>)
{
   14dd0:	930b      	str	r3, [sp, #44]	; 0x2c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   14dd2:	2302      	movs	r3, #2
   14dd4:	9311      	str	r3, [sp, #68]	; 0x44
	radio_ext_adv_enable_flag = true;
   14dd6:	4bc3      	ldr	r3, [pc, #780]	; (150e4 <radio_ext_adv_enable+0x31c>)
{
   14dd8:	f89d 8074 	ldrb.w	r8, [sp, #116]	; 0x74
   14ddc:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
	radio_ext_adv_enable_flag = true;
   14de0:	f04f 0901 	mov.w	r9, #1
   14de4:	f883 9000 	strb.w	r9, [r3]
	if (_radio.advertiser.is_enabled) {
   14de8:	f996 3028 	ldrsb.w	r3, [r6, #40]	; 0x28
   14dec:	2b00      	cmp	r3, #0
{
   14dee:	4683      	mov	fp, r0
   14df0:	468a      	mov	sl, r1
	if (_radio.advertiser.is_enabled) {
   14df2:	da01      	bge.n	14df8 <radio_ext_adv_enable+0x30>
	return BT_HCI_ERR_CMD_DISALLOWED;
   14df4:	200c      	movs	r0, #12
   14df6:	e274      	b.n	152e2 <radio_ext_adv_enable+0x51a>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
   14df8:	f896 722f 	ldrb.w	r7, [r6, #559]	; 0x22f
   14dfc:	eb07 2707 	add.w	r7, r7, r7, lsl #8
   14e00:	372c      	adds	r7, #44	; 0x2c
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   14e02:	5df3      	ldrb	r3, [r6, r7]
   14e04:	f003 030f 	and.w	r3, r3, #15
   14e08:	2b01      	cmp	r3, #1
   14e0a:	f200 814d 	bhi.w	150a8 <radio_ext_adv_enable+0x2e0>
		if (_radio.advertiser.conn) {
   14e0e:	f8d6 5c18 	ldr.w	r5, [r6, #3096]	; 0xc18
   14e12:	2d00      	cmp	r5, #0
   14e14:	d1ee      	bne.n	14df4 <radio_ext_adv_enable+0x2c>
		link = mem_acquire(&_radio.link_rx_free);
   14e16:	f506 6053 	add.w	r0, r6, #3376	; 0xd30
   14e1a:	f7f5 ff7e 	bl	ad1a <mem_acquire>
		if (!link) {
   14e1e:	900e      	str	r0, [sp, #56]	; 0x38
   14e20:	b158      	cbz	r0, 14e3a <radio_ext_adv_enable+0x72>
		conn = mem_acquire(&_radio.conn_free);
   14e22:	f606 40f4 	addw	r0, r6, #3316	; 0xcf4
   14e26:	f7f5 ff78 	bl	ad1a <mem_acquire>
		if (!conn) {
   14e2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14e2c:	4604      	mov	r4, r0
   14e2e:	b930      	cbnz	r0, 14e3e <radio_ext_adv_enable+0x76>
			mem_release(link, &_radio.link_rx_free);
   14e30:	f506 6153 	add.w	r1, r6, #3376	; 0xd30
   14e34:	4610      	mov	r0, r2
   14e36:	f7f5 ff8a 	bl	ad4e <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   14e3a:	2007      	movs	r0, #7
   14e3c:	e251      	b.n	152e2 <radio_ext_adv_enable+0x51a>
		conn->handle = 0xFFFF;
   14e3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14e42:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
   14e44:	f503 4394 	add.w	r3, r3, #18944	; 0x4a00
   14e48:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
		conn->data_chan_sel = 0;
   14e4c:	7f43      	ldrb	r3, [r0, #29]
		conn->data_chan_use = 0;
   14e4e:	77c5      	strb	r5, [r0, #31]
		conn->data_chan_sel = 0;
   14e50:	f365 1386 	bfi	r3, r5, #6, #1
   14e54:	7743      	strb	r3, [r0, #29]
		conn->default_tx_octets = _radio.default_tx_octets;
   14e56:	f8b6 3d0a 	ldrh.w	r3, [r6, #3338]	; 0xd0a
   14e5a:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   14e5c:	231b      	movs	r3, #27
   14e5e:	85c3      	strh	r3, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   14e60:	8603      	strh	r3, [r0, #48]	; 0x30
		conn->default_tx_time = _radio.default_tx_time;
   14e62:	f8b6 3d0c 	ldrh.w	r3, [r6, #3340]	; 0xd0c
   14e66:	8643      	strh	r3, [r0, #50]	; 0x32
		conn->max_tx_time =
   14e68:	f44f 73a4 	mov.w	r3, #328	; 0x148
   14e6c:	8683      	strh	r3, [r0, #52]	; 0x34
		conn->max_rx_time =
   14e6e:	86c3      	strh	r3, [r0, #54]	; 0x36
		conn->event_counter = 0;
   14e70:	8445      	strh	r5, [r0, #34]	; 0x22
		conn->latency_prepare = 0;
   14e72:	8505      	strh	r5, [r0, #40]	; 0x28
		conn->latency_event = 0;
   14e74:	8545      	strh	r5, [r0, #42]	; 0x2a
		conn->phy_pref_tx = _radio.default_phy_tx;
   14e76:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   14e7a:	f8b6 0d0e 	ldrh.w	r0, [r6, #3342]	; 0xd0e
   14e7e:	f360 0302 	bfi	r3, r0, #0, #3
		conn->phy_tx = BIT(0);
   14e82:	f369 03c5 	bfi	r3, r9, #3, #3
		conn->phy_pref_flags = 0;
   14e86:	f365 1386 	bfi	r3, r5, #6, #1
		conn->phy_flags = 0;
   14e8a:	f365 13c7 	bfi	r3, r5, #7, #1
   14e8e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		conn->phy_tx_time = BIT(0);
   14e92:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   14e96:	f369 0302 	bfi	r3, r9, #0, #3
   14e9a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->phy_pref_rx = _radio.default_phy_rx;
   14e9e:	f8b6 0d10 	ldrh.w	r0, [r6, #3344]	; 0xd10
		conn->slave.window_widening_prepare_us = 0;
   14ea2:	65e5      	str	r5, [r4, #92]	; 0x5c
		conn->phy_pref_rx = _radio.default_phy_rx;
   14ea4:	b2db      	uxtb	r3, r3
   14ea6:	f360 03c5 	bfi	r3, r0, #3, #3
   14eaa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->phy_rx = BIT(0);
   14eae:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		conn->slave.window_widening_event_us = 0;
   14eb2:	6625      	str	r5, [r4, #96]	; 0x60
		conn->phy_rx = BIT(0);
   14eb4:	f369 0302 	bfi	r3, r9, #0, #3
   14eb8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
		conn->role = 1;
   14ebc:	7f63      	ldrb	r3, [r4, #29]
   14ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14ec2:	7763      	strb	r3, [r4, #29]
		conn->connect_expire = 6;
   14ec4:	2306      	movs	r3, #6
   14ec6:	87a3      	strh	r3, [r4, #60]	; 0x3c
		conn->common.fex_valid = 0;
   14ec8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   14ecc:	f365 1345 	bfi	r3, r5, #5, #1
		conn->slave.latency_enabled = 0;
   14ed0:	f365 0300 	bfi	r3, r5, #0, #1
		conn->slave.latency_cancel = 0;
   14ed4:	f365 0341 	bfi	r3, r5, #1, #1
   14ed8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		conn->slave.ticks_to_offset = 0;
   14edc:	6725      	str	r5, [r4, #112]	; 0x70
		conn->llcp_version.tx = 0;
   14ede:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
		conn->supervision_expire = 0;
   14ee2:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
		conn->llcp_version.tx = 0;
   14ee6:	f365 0300 	bfi	r3, r5, #0, #1
		conn->llcp_version.rx = 0;
   14eea:	f365 0341 	bfi	r3, r5, #1, #1
   14eee:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
		conn->llcp_conn_param.disabled = 0;
   14ef2:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->procedure_expire = 0;
   14ef6:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
		conn->llcp_conn_param.disabled = 0;
   14efa:	f365 1304 	bfi	r3, r5, #4, #1
   14efe:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->sn = 0;
   14f02:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->apto_expire = 0;
   14f06:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
		conn->sn = 0;
   14f0a:	f365 0300 	bfi	r3, r5, #0, #1
		conn->nesn = 0;
   14f0e:	f365 0341 	bfi	r3, r5, #1, #1
		conn->pause_rx = 0;
   14f12:	f365 0382 	bfi	r3, r5, #2, #1
		conn->pause_tx = 0;
   14f16:	f365 03c3 	bfi	r3, r5, #3, #1
		conn->enc_rx = 0;
   14f1a:	f365 1304 	bfi	r3, r5, #4, #1
		conn->enc_tx = 0;
   14f1e:	f365 1345 	bfi	r3, r5, #5, #1
		conn->refresh = 0;
   14f22:	f365 1386 	bfi	r3, r5, #6, #1
		conn->empty = 0;
   14f26:	f365 13c7 	bfi	r3, r5, #7, #1
		conn->appto_expire = 0;
   14f2a:	f8a4 5048 	strh.w	r5, [r4, #72]	; 0x48
		conn->llcp_req = 0;
   14f2e:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
		conn->llcp_ack = 0;
   14f32:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
		conn->llcp_terminate.req = 0;
   14f36:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
		conn->llcp_terminate.ack = 0;
   14f3a:	f884 50b1 	strb.w	r5, [r4, #177]	; 0xb1
		conn->llcp_terminate.reason_peer = 0;
   14f3e:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   14f42:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
		conn->llcp_conn_param.req = 0;
   14f46:	f884 50c0 	strb.w	r5, [r4, #192]	; 0xc0
		conn->llcp_conn_param.ack = 0;
   14f4a:	f884 50c1 	strb.w	r5, [r4, #193]	; 0xc1
		conn->llcp_length.req = 0;
   14f4e:	f884 50e8 	strb.w	r5, [r4, #232]	; 0xe8
		conn->llcp_length.ack = 0;
   14f52:	f884 50e9 	strb.w	r5, [r4, #233]	; 0xe9
		conn->llcp_phy.req = 0;
   14f56:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
		conn->llcp_phy.ack = 0;
   14f5a:	f884 50f5 	strb.w	r5, [r4, #245]	; 0xf5
		conn->empty = 0;
   14f5e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		conn->pkt_tx_head = NULL;
   14f62:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = NULL;
   14f66:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
		conn->pkt_tx_ctrl_last = NULL;
   14f6a:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
		conn->pkt_tx_data = NULL;
   14f6e:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
		conn->pkt_tx_last = NULL;
   14f72:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
		conn->packet_tx_head_len = 0;
   14f76:	f884 5150 	strb.w	r5, [r4, #336]	; 0x150
		conn->packet_tx_head_offset = 0;
   14f7a:	f884 5151 	strb.w	r5, [r4, #337]	; 0x151
		_radio.advertiser.conn = conn;
   14f7e:	f8c6 4c18 	str.w	r4, [r6, #3096]	; 0xc18
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
   14f82:	4d57      	ldr	r5, [pc, #348]	; (150e0 <radio_ext_adv_enable+0x318>)
	_radio.advertiser.chan_map = chan_map;							//chan_map
   14f84:	a812      	add	r0, sp, #72	; 0x48
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
   14f86:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.chan_map = chan_map;							//chan_map
   14f8a:	f810 2d09 	ldrb.w	r2, [r0, #-9]!
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
   14f8e:	f36b 0343 	bfi	r3, fp, #1, #3
	_radio.advertiser.chan_map = chan_map;							//chan_map
   14f92:	f362 1306 	bfi	r3, r2, #4, #3
   14f96:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
	_radio.ext_advertiser.aux_chain_count = aux_chain_count;		
   14f9a:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
	_radio.advertiser.filter_policy = filter_policy;				//filter plicy
   14f9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	_radio.ext_advertiser.aux_chain_count = aux_chain_count;		
   14fa0:	f885 3c8c 	strb.w	r3, [r5, #3212]	; 0xc8c
	_radio.advertiser.filter_policy = filter_policy;				//filter plicy
   14fa4:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
   14fa8:	f362 0301 	bfi	r3, r2, #0, #2
   14fac:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
	_radio.advertiser.rl_idx = rl_idx;								//rl_idx
   14fb0:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   14fb4:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
	_radio.advertiser.hdr.ticks_active_to_start =
   14fb8:	f8d5 3d6c 	ldr.w	r3, [r5, #3436]	; 0xd6c
   14fbc:	61eb      	str	r3, [r5, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
   14fbe:	2327      	movs	r3, #39	; 0x27
   14fc0:	61ab      	str	r3, [r5, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   14fc2:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
   14fc4:	2300      	movs	r3, #0
   14fc6:	622b      	str	r3, [r5, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   14fc8:	f7f6 f852 	bl	b070 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   14fcc:	5df7      	ldrb	r7, [r6, r7]
   14fce:	f007 070f 	and.w	r7, r7, #15
   14fd2:	2f01      	cmp	r7, #1
   14fd4:	462e      	mov	r6, r5
   14fd6:	d169      	bne.n	150ac <radio_ext_adv_enable+0x2e4>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
   14fd8:	f44f 7327 	mov.w	r3, #668	; 0x29c
   14fdc:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
   14fde:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
   14fe2:	4d41      	ldr	r5, [pc, #260]	; (150e8 <radio_ext_adv_enable+0x320>)
   14fe4:	a33c      	add	r3, pc, #240	; (adr r3, 150d8 <radio_ext_adv_enable+0x310>)
   14fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
   14fea:	fba0 0105 	umull	r0, r1, r0, r5
   14fee:	f7eb f93b 	bl	268 <__aeabi_uldivmod>
	ticks_slot_offset =
   14ff2:	69f3      	ldr	r3, [r6, #28]
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
   14ff4:	6270      	str	r0, [r6, #36]	; 0x24
	ticks_slot_offset =
   14ff6:	69b0      	ldr	r0, [r6, #24]
   14ff8:	4283      	cmp	r3, r0
   14ffa:	bf38      	it	cc
   14ffc:	4603      	movcc	r3, r0
   14ffe:	930b      	str	r3, [sp, #44]	; 0x2c
   15000:	46a9      	mov	r9, r5
	_radio.advertiser.is_hdcd = !interval &&
   15002:	f1ba 0f00 	cmp.w	sl, #0
   15006:	d15e      	bne.n	150c6 <radio_ext_adv_enable+0x2fe>
   15008:	1e7b      	subs	r3, r7, #1
   1500a:	425f      	negs	r7, r3
   1500c:	415f      	adcs	r7, r3
   1500e:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
   15012:	f367 1586 	bfi	r5, r7, #6, #1
   15016:	f886 5028 	strb.w	r5, [r6, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
   1501a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
   1501e:	d06f      	beq.n	15100 <radio_ext_adv_enable+0x338>
		u32_t ticks_now = ticker_ticks_now_get();
   15020:	f7f6 fe5e 	bl	bce0 <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   15024:	6a73      	ldr	r3, [r6, #36]	; 0x24
   15026:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15028:	4e30      	ldr	r6, [pc, #192]	; (150ec <radio_ext_adv_enable+0x324>)
   1502a:	9607      	str	r6, [sp, #28]
   1502c:	441a      	add	r2, r3
   1502e:	4613      	mov	r3, r2
		u32_t ticks_now = ticker_ticks_now_get();
   15030:	4607      	mov	r7, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   15032:	4a2f      	ldr	r2, [pc, #188]	; (150f0 <radio_ext_adv_enable+0x328>)
   15034:	9205      	str	r2, [sp, #20]
   15036:	2000      	movs	r0, #0
   15038:	ad11      	add	r5, sp, #68	; 0x44
   1503a:	9304      	str	r3, [sp, #16]
   1503c:	e88d 0009 	stmia.w	sp, {r0, r3}
   15040:	9508      	str	r5, [sp, #32]
   15042:	9006      	str	r0, [sp, #24]
   15044:	9003      	str	r0, [sp, #12]
   15046:	9002      	str	r0, [sp, #8]
   15048:	463b      	mov	r3, r7
   1504a:	2205      	movs	r2, #5
   1504c:	2103      	movs	r1, #3
   1504e:	f7f6 fcd9 	bl	ba04 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   15052:	2802      	cmp	r0, #2
   15054:	d03b      	beq.n	150ce <radio_ext_adv_enable+0x306>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   15056:	9811      	ldr	r0, [sp, #68]	; 0x44
   15058:	b9c8      	cbnz	r0, 1508e <radio_ext_adv_enable+0x2c6>
		ret_cb = TICKER_STATUS_BUSY;
   1505a:	2302      	movs	r3, #2
   1505c:	9311      	str	r3, [sp, #68]	; 0x44
		ret =
   1505e:	4b25      	ldr	r3, [pc, #148]	; (150f4 <radio_ext_adv_enable+0x32c>)
   15060:	9305      	str	r3, [sp, #20]
   15062:	2203      	movs	r2, #3
   15064:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
   15068:	9300      	str	r3, [sp, #0]
   1506a:	9508      	str	r5, [sp, #32]
   1506c:	9607      	str	r6, [sp, #28]
   1506e:	9006      	str	r0, [sp, #24]
   15070:	9004      	str	r0, [sp, #16]
   15072:	9003      	str	r0, [sp, #12]
   15074:	9002      	str	r0, [sp, #8]
   15076:	9001      	str	r0, [sp, #4]
   15078:	463b      	mov	r3, r7
   1507a:	4611      	mov	r1, r2
		ret=	
   1507c:	f7f6 fcc2 	bl	ba04 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   15080:	2802      	cmp	r0, #2
   15082:	f000 811a 	beq.w	152ba <radio_ext_adv_enable+0x4f2>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   15086:	9811      	ldr	r0, [sp, #68]	; 0x44
   15088:	2800      	cmp	r0, #0
   1508a:	f000 811a 	beq.w	152c2 <radio_ext_adv_enable+0x4fa>
	if (conn) {
   1508e:	2c00      	cmp	r4, #0
   15090:	f43f aeb0 	beq.w	14df4 <radio_ext_adv_enable+0x2c>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
   15094:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   15098:	4917      	ldr	r1, [pc, #92]	; (150f8 <radio_ext_adv_enable+0x330>)
   1509a:	f7f5 fe58 	bl	ad4e <mem_release>
		mem_release(conn, &_radio.conn_free);
   1509e:	4917      	ldr	r1, [pc, #92]	; (150fc <radio_ext_adv_enable+0x334>)
   150a0:	4620      	mov	r0, r4
   150a2:	f7f5 fe54 	bl	ad4e <mem_release>
   150a6:	e6a5      	b.n	14df4 <radio_ext_adv_enable+0x2c>
		conn = NULL;
   150a8:	2400      	movs	r4, #0
   150aa:	e76a      	b.n	14f82 <radio_ext_adv_enable+0x1ba>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
   150ac:	2f02      	cmp	r7, #2
   150ae:	d103      	bne.n	150b8 <radio_ext_adv_enable+0x2f0>
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
   150b0:	f44f 7329 	mov.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
   150b4:	4358      	muls	r0, r3
   150b6:	e794      	b.n	14fe2 <radio_ext_adv_enable+0x21a>
	else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   150b8:	2f07      	cmp	r7, #7
		slot_us = ((RADIO_TICKER_START_PART_US + 2500) * chan_cnt) ;  // 265byte =2120us
   150ba:	bf0c      	ite	eq
   150bc:	f44f 632f 	moveq.w	r3, #2800	; 0xaf0
			   152 + 376) * chan_cnt;
   150c0:	f240 53fc 	movwne	r3, #1532	; 0x5fc
   150c4:	e7f6      	b.n	150b4 <radio_ext_adv_enable+0x2ec>
   150c6:	2700      	movs	r7, #0
   150c8:	e7a1      	b.n	1500e <radio_ext_adv_enable+0x246>
				cpu_sleep();
   150ca:	f7f8 fb65 	bl	d798 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
   150ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
   150d0:	2b02      	cmp	r3, #2
   150d2:	d0fa      	beq.n	150ca <radio_ext_adv_enable+0x302>
   150d4:	e7bf      	b.n	15056 <radio_ext_adv_enable+0x28e>
   150d6:	bf00      	nop
   150d8:	1afd498d 	.word	0x1afd498d
   150dc:	00000007 	.word	0x00000007
   150e0:	20000c08 	.word	0x20000c08
   150e4:	200019c9 	.word	0x200019c9
   150e8:	3b9aca00 	.word	0x3b9aca00
   150ec:	0000d7dd 	.word	0x0000d7dd
   150f0:	0000f48d 	.word	0x0000f48d
   150f4:	0000f581 	.word	0x0000f581
   150f8:	20001938 	.word	0x20001938
   150fc:	200018fc 	.word	0x200018fc
		u32_t ticks_now = ticker_ticks_now_get();
   15100:	f7f6 fdee 	bl	bce0 <ticker_ticks_now_get>
		if(((u64_t)interval * 625) <= 100000){
   15104:	fa1f f28a 	uxth.w	r2, sl
   15108:	2300      	movs	r3, #0
		u32_t ticks_now = ticker_ticks_now_get();
   1510a:	900e      	str	r0, [sp, #56]	; 0x38
		if(((u64_t)interval * 625) <= 100000){
   1510c:	f240 2071 	movw	r0, #625	; 0x271
   15110:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   15114:	fbaa 0100 	umull	r0, r1, sl, r0
   15118:	4a75      	ldr	r2, [pc, #468]	; (152f0 <radio_ext_adv_enable+0x528>)
		_radio.ext_advertiser.max_skip = skip;
   1511a:	f886 8c68 	strb.w	r8, [r6, #3176]	; 0xc68
		if(((u64_t)interval * 625) <= 100000){
   1511e:	2300      	movs	r3, #0
   15120:	428b      	cmp	r3, r1
   15122:	bf08      	it	eq
   15124:	4282      	cmpeq	r2, r0
   15126:	d30b      	bcc.n	15140 <radio_ext_adv_enable+0x378>
		int calculation = max_skip / 5;
   15128:	2305      	movs	r3, #5
   1512a:	fbb8 f3f3 	udiv	r3, r8, r3
			if(calculation >= 5){
   1512e:	2b04      	cmp	r3, #4
   15130:	f240 80a5 	bls.w	1527e <radio_ext_adv_enable+0x4b6>
				ticker_offset = 30 * (max_skip-5);
   15134:	f1a8 0505 	sub.w	r5, r8, #5
				ticker_offset = 30 * (max_skip-1);
   15138:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
				ticker_offset = 30 * max_skip;
   1513c:	006d      	lsls	r5, r5, #1
   1513e:	b2ad      	uxth	r5, r5
		_radio.ext_advertiser.aux_pckt_time = ((((u64_t)interval * 625 ) ) * skip) + 30000; //(10005 * offset) ;
   15140:	f240 2371 	movw	r3, #625	; 0x271
   15144:	fb03 f708 	mul.w	r7, r3, r8
   15148:	f247 5230 	movw	r2, #30000	; 0x7530
   1514c:	fb0a 2707 	mla	r7, sl, r7, r2
		_radio.ext_advertiser.prim_interval = (u64_t)interval * 625;
   15150:	fb03 f30a 	mul.w	r3, r3, sl
		_radio.ext_advertiser.aux_pckt_time = ((((u64_t)interval * 625 ) ) * skip) + 30000; //(10005 * offset) ;
   15154:	f8c6 7c5c 	str.w	r7, [r6, #3164]	; 0xc5c
		_radio.ext_advertiser.prim_interval = (u64_t)interval * 625;
   15158:	f8c6 3c60 	str.w	r3, [r6, #3168]	; 0xc60
		_radio.ext_advertiser.ticker_offset = 183 * (((u64_t)interval * 625 )/100000);
   1515c:	4a64      	ldr	r2, [pc, #400]	; (152f0 <radio_ext_adv_enable+0x528>)
   1515e:	2300      	movs	r3, #0
   15160:	f7eb f882 	bl	268 <__aeabi_uldivmod>
   15164:	23b7      	movs	r3, #183	; 0xb7
   15166:	4358      	muls	r0, r3
		pdu = (void *)_radio.advertiser.adv_data.data
   15168:	f896 322e 	ldrb.w	r3, [r6, #558]	; 0x22e
		_radio.ext_advertiser.ticker_offset = 183 * (((u64_t)interval * 625 )/100000);
   1516c:	f8c6 0c84 	str.w	r0, [r6, #3204]	; 0xc84
		size = pdu->len + 2;
   15170:	eb03 2303 	add.w	r3, r3, r3, lsl #8
   15174:	4433      	add	r3, r6
		_radio.ext_advertiser.chan_37 = (_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) );
   15176:	fb00 7708 	mla	r7, r0, r8, r7
		size = pdu->len + 2;
   1517a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
		_radio.ext_advertiser.chan_37 = (_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) );
   1517e:	f8c6 7c70 	str.w	r7, [r6, #3184]	; 0xc70
		final_pckt_size = (size + 1 + 4 + 3)*8 ; 
   15182:	00db      	lsls	r3, r3, #3
   15184:	3350      	adds	r3, #80	; 0x50
		_radio.ext_advertiser.chan_38 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) ) -((final_pckt_size + 50)));
   15186:	f1a7 0232 	sub.w	r2, r7, #50	; 0x32
   1518a:	1ad2      	subs	r2, r2, r3
		_radio.ext_advertiser.chan_39 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip )) -(((final_pckt_size + 50)* 2))) ;
   1518c:	3332      	adds	r3, #50	; 0x32
   1518e:	eba7 0743 	sub.w	r7, r7, r3, lsl #1
		ret =
   15192:	4b58      	ldr	r3, [pc, #352]	; (152f4 <radio_ext_adv_enable+0x52c>)
		_radio.ext_advertiser.chan_38 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) ) -((final_pckt_size + 50)));
   15194:	f8c6 2c74 	str.w	r2, [r6, #3188]	; 0xc74
		_radio.ext_advertiser.chan_39 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip )) -(((final_pckt_size + 50)* 2))) ;
   15198:	f8c6 7c78 	str.w	r7, [r6, #3192]	; 0xc78
		ret =
   1519c:	f04f 0b00 	mov.w	fp, #0
   151a0:	9307      	str	r3, [sp, #28]
   151a2:	af11      	add	r7, sp, #68	; 0x44
   151a4:	4b54      	ldr	r3, [pc, #336]	; (152f8 <radio_ext_adv_enable+0x530>)
   151a6:	9708      	str	r7, [sp, #32]
   151a8:	f8cd b018 	str.w	fp, [sp, #24]
   151ac:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   151ae:	6a73      	ldr	r3, [r6, #36]	; 0x24
   151b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
   151b2:	4852      	ldr	r0, [pc, #328]	; (152fc <radio_ext_adv_enable+0x534>)
		ret =
   151b4:	f8cd b00c 	str.w	fp, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   151b8:	4413      	add	r3, r2
		ret =
   151ba:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
   151bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   151be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		ret =
   151c0:	f8cd b008 	str.w	fp, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
   151c4:	fba3 0100 	umull	r0, r1, r3, r0
   151c8:	2391      	movs	r3, #145	; 0x91
   151ca:	fb03 1102 	mla	r1, r3, r2, r1
   151ce:	a346      	add	r3, pc, #280	; (adr r3, 152e8 <radio_ext_adv_enable+0x520>)
   151d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   151d4:	f7eb f848 	bl	268 <__aeabi_uldivmod>
		ret =
   151d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
   151da:	9001      	str	r0, [sp, #4]
		ret =
   151dc:	f8cd b000 	str.w	fp, [sp]
   151e0:	2205      	movs	r2, #5
   151e2:	2103      	movs	r1, #3
   151e4:	4658      	mov	r0, fp
   151e6:	f7f6 fc0d 	bl	ba04 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   151ea:	2802      	cmp	r0, #2
   151ec:	4b41      	ldr	r3, [pc, #260]	; (152f4 <radio_ext_adv_enable+0x52c>)
   151ee:	d05e      	beq.n	152ae <radio_ext_adv_enable+0x4e6>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   151f0:	9e11      	ldr	r6, [sp, #68]	; 0x44
   151f2:	2e00      	cmp	r6, #0
   151f4:	f47f af4b 	bne.w	1508e <radio_ext_adv_enable+0x2c6>
		ret=	
   151f8:	9307      	str	r3, [sp, #28]
   151fa:	4b41      	ldr	r3, [pc, #260]	; (15300 <radio_ext_adv_enable+0x538>)
   151fc:	9305      	str	r3, [sp, #20]
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
   151fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		ret=	
   15200:	9708      	str	r7, [sp, #32]
		ret_cb = TICKER_STATUS_BUSY;
   15202:	2202      	movs	r2, #2
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
   15204:	f503 70bc 	add.w	r0, r3, #376	; 0x178
		ret_cb = TICKER_STATUS_BUSY;
   15208:	9211      	str	r2, [sp, #68]	; 0x44
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
   1520a:	fba0 0109 	umull	r0, r1, r0, r9
   1520e:	a336      	add	r3, pc, #216	; (adr r3, 152e8 <radio_ext_adv_enable+0x520>)
   15210:	e9d3 2300 	ldrd	r2, r3, [r3]
		u8_t offset = skip + 1;
   15214:	f108 0801 	add.w	r8, r8, #1
		ret=	
   15218:	9606      	str	r6, [sp, #24]
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
   1521a:	fa5f f888 	uxtb.w	r8, r8
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
   1521e:	f7eb f823 	bl	268 <__aeabi_uldivmod>
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
   15222:	fba8 ab0a 	umull	sl, fp, r8, sl
   15226:	f240 2171 	movw	r1, #625	; 0x271
   1522a:	fbaa 2301 	umull	r2, r3, sl, r1
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
   1522e:	1b52      	subs	r2, r2, r5
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   15230:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
   15234:	fb01 330b 	mla	r3, r1, fp, r3
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
   15238:	f163 0300 	sbc.w	r3, r3, #0
		ret=	
   1523c:	9004      	str	r0, [sp, #16]
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
   1523e:	fba2 0109 	umull	r0, r1, r2, r9
   15242:	fb09 1103 	mla	r1, r9, r3, r1
   15246:	a328      	add	r3, pc, #160	; (adr r3, 152e8 <radio_ext_adv_enable+0x520>)
   15248:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret=	
   1524c:	9603      	str	r6, [sp, #12]
   1524e:	9602      	str	r6, [sp, #8]
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
   15250:	f7eb f80a 	bl	268 <__aeabi_uldivmod>
					HAL_TICKER_US_TO_TICKS(	_radio.ext_advertiser.aux_pckt_time  ),			//ticks periodic
   15254:	4b2b      	ldr	r3, [pc, #172]	; (15304 <radio_ext_adv_enable+0x53c>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   15256:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ret=	
   1525a:	9001      	str	r0, [sp, #4]
					HAL_TICKER_US_TO_TICKS(	_radio.ext_advertiser.aux_pckt_time  ),			//ticks periodic
   1525c:	f8d3 0c5c 	ldr.w	r0, [r3, #3164]	; 0xc5c
   15260:	a321      	add	r3, pc, #132	; (adr r3, 152e8 <radio_ext_adv_enable+0x520>)
   15262:	e9d3 2300 	ldrd	r2, r3, [r3]
   15266:	fba0 0109 	umull	r0, r1, r0, r9
   1526a:	f7ea fffd 	bl	268 <__aeabi_uldivmod>
		ret=	
   1526e:	2203      	movs	r2, #3
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   15270:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ret=	
   15274:	9000      	str	r0, [sp, #0]
   15276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15278:	4611      	mov	r1, r2
   1527a:	4630      	mov	r0, r6
   1527c:	e6fe      	b.n	1507c <radio_ext_adv_enable+0x2b4>
			}else if(calculation >= 4){
   1527e:	d102      	bne.n	15286 <radio_ext_adv_enable+0x4be>
				ticker_offset = 30 * (max_skip-4);
   15280:	f1a8 0504 	sub.w	r5, r8, #4
   15284:	e758      	b.n	15138 <radio_ext_adv_enable+0x370>
			}else if(calculation >=3){
   15286:	2b03      	cmp	r3, #3
   15288:	d102      	bne.n	15290 <radio_ext_adv_enable+0x4c8>
				ticker_offset = 30 * (max_skip-3);
   1528a:	f1a8 0503 	sub.w	r5, r8, #3
   1528e:	e753      	b.n	15138 <radio_ext_adv_enable+0x370>
			}else if(calculation >= 2){
   15290:	2b02      	cmp	r3, #2
   15292:	d102      	bne.n	1529a <radio_ext_adv_enable+0x4d2>
				ticker_offset = 30 * (max_skip-2);
   15294:	f1a8 0502 	sub.w	r5, r8, #2
   15298:	e74e      	b.n	15138 <radio_ext_adv_enable+0x370>
			}else if(calculation >= 1){
   1529a:	2b01      	cmp	r3, #1
   1529c:	d102      	bne.n	152a4 <radio_ext_adv_enable+0x4dc>
				ticker_offset = 30 * (max_skip-1);
   1529e:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
   152a2:	e749      	b.n	15138 <radio_ext_adv_enable+0x370>
				ticker_offset = 30 * max_skip;
   152a4:	ebc8 1508 	rsb	r5, r8, r8, lsl #4
   152a8:	e748      	b.n	1513c <radio_ext_adv_enable+0x374>
				cpu_sleep();
   152aa:	f7f8 fa75 	bl	d798 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
   152ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
   152b0:	2a02      	cmp	r2, #2
   152b2:	d0fa      	beq.n	152aa <radio_ext_adv_enable+0x4e2>
   152b4:	e79c      	b.n	151f0 <radio_ext_adv_enable+0x428>
			cpu_sleep();
   152b6:	f7f8 fa6f 	bl	d798 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   152ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
   152bc:	2b02      	cmp	r3, #2
   152be:	d0fa      	beq.n	152b6 <radio_ext_adv_enable+0x4ee>
   152c0:	e6e1      	b.n	15086 <radio_ext_adv_enable+0x2be>
		_radio.advertiser.is_enabled = 1;
   152c2:	4b10      	ldr	r3, [pc, #64]	; (15304 <radio_ext_adv_enable+0x53c>)
   152c4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   152c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   152cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
   152d0:	f893 3c2c 	ldrb.w	r3, [r3, #3116]	; 0xc2c
   152d4:	f013 0401 	ands.w	r4, r3, #1
   152d8:	d103      	bne.n	152e2 <radio_ext_adv_enable+0x51a>
			ll_adv_scan_state_cb(BIT(0));
   152da:	2001      	movs	r0, #1
   152dc:	f001 fcbe 	bl	16c5c <ll_adv_scan_state_cb>
		return 0;
   152e0:	4620      	mov	r0, r4
}
   152e2:	b013      	add	sp, #76	; 0x4c
   152e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152e8:	1afd498d 	.word	0x1afd498d
   152ec:	00000007 	.word	0x00000007
   152f0:	000186a0 	.word	0x000186a0
   152f4:	0000d7dd 	.word	0x0000d7dd
   152f8:	0000f48d 	.word	0x0000f48d
   152fc:	84e72a00 	.word	0x84e72a00
   15300:	0000f549 	.word	0x0000f549
   15304:	20000c08 	.word	0x20000c08

00015308 <radio_adv_disable>:
{
   15308:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
   1530a:	2103      	movs	r1, #3
   1530c:	2005      	movs	r0, #5
   1530e:	f7f8 fc3f 	bl	db90 <role_disable>
	if (!status) {
   15312:	4605      	mov	r5, r0
   15314:	b9e8      	cbnz	r0, 15352 <radio_adv_disable+0x4a>
		_radio.advertiser.is_enabled = 0;
   15316:	4c10      	ldr	r4, [pc, #64]	; (15358 <radio_adv_disable+0x50>)
   15318:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   1531c:	f360 12c7 	bfi	r2, r0, #7, #1
   15320:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
   15324:	f894 2c2c 	ldrb.w	r2, [r4, #3116]	; 0xc2c
   15328:	07d3      	lsls	r3, r2, #31
   1532a:	d401      	bmi.n	15330 <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
   1532c:	f001 fc96 	bl	16c5c <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
   15330:	f8d4 6c18 	ldr.w	r6, [r4, #3096]	; 0xc18
		if (conn) {
   15334:	b15e      	cbz	r6, 1534e <radio_adv_disable+0x46>
			_radio.advertiser.conn = NULL;
   15336:	2300      	movs	r3, #0
   15338:	f8c4 3c18 	str.w	r3, [r4, #3096]	; 0xc18
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   1533c:	4907      	ldr	r1, [pc, #28]	; (1535c <radio_adv_disable+0x54>)
   1533e:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   15342:	f7f5 fd04 	bl	ad4e <mem_release>
			mem_release(conn, &_radio.conn_free);
   15346:	4906      	ldr	r1, [pc, #24]	; (15360 <radio_adv_disable+0x58>)
   15348:	4630      	mov	r0, r6
   1534a:	f7f5 fd00 	bl	ad4e <mem_release>
}
   1534e:	4628      	mov	r0, r5
   15350:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   15352:	250c      	movs	r5, #12
   15354:	e7fb      	b.n	1534e <radio_adv_disable+0x46>
   15356:	bf00      	nop
   15358:	20000c08 	.word	0x20000c08
   1535c:	20001938 	.word	0x20001938
   15360:	200018fc 	.word	0x200018fc
   15364:	00000000 	.word	0x00000000

00015368 <radio_scan_enable>:
{
   15368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
   1536c:	4c76      	ldr	r4, [pc, #472]	; (15548 <radio_scan_enable+0x1e0>)
   1536e:	f894 7c2c 	ldrb.w	r7, [r4, #3116]	; 0xc2c
{
   15372:	b08e      	sub	sp, #56	; 0x38
   15374:	461d      	mov	r5, r3
	if (_radio.scanner.is_enabled) {
   15376:	f017 0701 	ands.w	r7, r7, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1537a:	f04f 0302 	mov.w	r3, #2
{
   1537e:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   15380:	930b      	str	r3, [sp, #44]	; 0x2c
{
   15382:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
   15384:	d003      	beq.n	1538e <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15386:	200c      	movs	r0, #12
}
   15388:	b00e      	add	sp, #56	; 0x38
   1538a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
   1538e:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
	_radio.scanner.rpa_gen = rpa_gen;
   15392:	f894 2c2e 	ldrb.w	r2, [r4, #3118]	; 0xc2e
	_radio.scanner.type = type;
   15396:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;				//1
   1539a:	0840      	lsrs	r0, r0, #1
   1539c:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   153a0:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   153a4:	f360 0200 	bfi	r2, r0, #0, #1
   153a8:	f884 2c2e 	strb.w	r2, [r4, #3118]	; 0xc2e
	_radio.scanner.rl_idx = rl_idx;
   153ac:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   153b0:	f884 2c2f 	strb.w	r2, [r4, #3119]	; 0xc2f
	_radio.scanner.init_addr_type = init_addr_type;
   153b4:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   153b8:	2206      	movs	r2, #6
   153ba:	f504 6043 	add.w	r0, r4, #3120	; 0xc30
	_radio.scanner.init_addr_type = init_addr_type;
   153be:	f884 3c2d 	strb.w	r3, [r4, #3117]	; 0xc2d
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   153c2:	4e62      	ldr	r6, [pc, #392]	; (1554c <radio_scan_enable+0x1e4>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   153c4:	f7eb f9fa 	bl	7bc <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   153c8:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   153cc:	f04f 0891 	mov.w	r8, #145	; 0x91
   153d0:	fba2 0106 	umull	r0, r1, r2, r6
   153d4:	fb08 1102 	mla	r1, r8, r2, r1
   153d8:	a359      	add	r3, pc, #356	; (adr r3, 15540 <radio_scan_enable+0x1d8>)
   153da:	e9d3 2300 	ldrd	r2, r3, [r3]
   153de:	f7ea ff43 	bl	268 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
   153e2:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
   153e6:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
	_radio.scanner.hdr.ticks_preempt_to_start =
   153ea:	f8c4 7c24 	str.w	r7, [r4, #3108]	; 0xc24
	_radio.scanner.filter_policy = filter_policy;
   153ee:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   153f2:	b2aa      	uxth	r2, r5
   153f4:	fba2 6706 	umull	r6, r7, r2, r6
		_radio.ticks_active_to_start;
   153f8:	f8d4 ad6c 	ldr.w	sl, [r4, #3436]	; 0xd6c
	_radio.scanner.filter_policy = filter_policy;
   153fc:	f884 3c2d 	strb.w	r3, [r4, #3117]	; 0xc2d
		_radio.scanner.ticks_window +
   15400:	f100 0909 	add.w	r9, r0, #9
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   15404:	fb08 7702 	mla	r7, r8, r2, r7
	_radio.scanner.hdr.ticks_xtal_to_start =
   15408:	2327      	movs	r3, #39	; 0x27
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   1540a:	f8c4 0c3c 	str.w	r0, [r4, #3132]	; 0xc3c
	_radio.scanner.hdr.ticks_active_to_start =
   1540e:	f8c4 ac20 	str.w	sl, [r4, #3104]	; 0xc20
	_radio.scanner.hdr.ticks_xtal_to_start =
   15412:	f8c4 3c1c 	str.w	r3, [r4, #3100]	; 0xc1c
	_radio.scanner.hdr.ticks_slot =
   15416:	f8c4 9c28 	str.w	r9, [r4, #3112]	; 0xc28
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   1541a:	a349      	add	r3, pc, #292	; (adr r3, 15540 <radio_scan_enable+0x1d8>)
   1541c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15420:	4630      	mov	r0, r6
   15422:	4639      	mov	r1, r7
   15424:	f7ea ff20 	bl	268 <__aeabi_uldivmod>
	    (ticks_interval -
   15428:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	if (_radio.scanner.hdr.ticks_slot >
   1542c:	4599      	cmp	r9, r3
	_radio.scanner.interval = interval;
   1542e:	f8c4 5c40 	str.w	r5, [r4, #3136]	; 0xc40
	ticks_slot_offset =
   15432:	4655      	mov	r5, sl
		_radio.scanner.hdr.ticks_slot =
   15434:	bf88      	it	hi
   15436:	f8c4 3c28 	strhi.w	r3, [r4, #3112]	; 0xc28
	ticks_slot_offset =
   1543a:	2d27      	cmp	r5, #39	; 0x27
   1543c:	bf38      	it	cc
   1543e:	2527      	movcc	r5, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   15440:	4680      	mov	r8, r0
	_radio.scanner.slot_offset = ticks_slot_offset ;
   15442:	f8c4 5c44 	str.w	r5, [r4, #3140]	; 0xc44
	ticks_anchor = ticker_ticks_now_get();
   15446:	f7f6 fc4b 	bl	bce0 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
   1544a:	f8d4 3c54 	ldr.w	r3, [r4, #3156]	; 0xc54
	ticks_anchor = ticker_ticks_now_get();
   1544e:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
   15450:	2b00      	cmp	r3, #0
   15452:	d05e      	beq.n	15512 <radio_scan_enable+0x1aa>
		us_offset = 0;
   15454:	2300      	movs	r3, #0
   15456:	930c      	str	r3, [sp, #48]	; 0x30
   15458:	483d      	ldr	r0, [pc, #244]	; (15550 <radio_scan_enable+0x1e8>)
   1545a:	f3bf 8f5b 	dmb	ish
   1545e:	e850 3f00 	ldrex	r3, [r0]
   15462:	f023 0301 	bic.w	r3, r3, #1
   15466:	e840 3200 	strex	r2, r3, [r0]
   1546a:	2a00      	cmp	r2, #0
   1546c:	d1f7      	bne.n	1545e <radio_scan_enable+0xf6>
   1546e:	f3bf 8f5b 	dmb	ish
	work->handler = handler;
   15472:	4938      	ldr	r1, [pc, #224]	; (15554 <radio_scan_enable+0x1ec>)
   15474:	f840 1c04 	str.w	r1, [r0, #-4]
	k_delayed_work_init(&aux_scanning.work_d, aux_packet_function);
   15478:	3004      	adds	r0, #4
   1547a:	f00b fe57 	bl	2112c <k_delayed_work_init>
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   1547e:	980c      	ldr	r0, [sp, #48]	; 0x30
   15480:	4935      	ldr	r1, [pc, #212]	; (15558 <radio_scan_enable+0x1f0>)
   15482:	a32f      	add	r3, pc, #188	; (adr r3, 15540 <radio_scan_enable+0x1d8>)
   15484:	e9d3 2300 	ldrd	r2, r3, [r3]
   15488:	fba0 0101 	umull	r0, r1, r0, r1
   1548c:	f7ea feec 	bl	268 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   15490:	ab0b      	add	r3, sp, #44	; 0x2c
   15492:	9308      	str	r3, [sp, #32]
   15494:	4b31      	ldr	r3, [pc, #196]	; (1555c <radio_scan_enable+0x1f4>)
   15496:	9307      	str	r3, [sp, #28]
   15498:	4b31      	ldr	r3, [pc, #196]	; (15560 <radio_scan_enable+0x1f8>)
   1549a:	9305      	str	r3, [sp, #20]
   1549c:	f8d4 3c28 	ldr.w	r3, [r4, #3112]	; 0xc28
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   154a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   154a4:	f04f 0900 	mov.w	r9, #0
   154a8:	4482      	add	sl, r0
   154aa:	441d      	add	r5, r3
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   154ac:	4630      	mov	r0, r6
   154ae:	a324      	add	r3, pc, #144	; (adr r3, 15540 <radio_scan_enable+0x1d8>)
   154b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   154b4:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   154b6:	f8cd 9018 	str.w	r9, [sp, #24]
   154ba:	9504      	str	r5, [sp, #16]
   154bc:	f8cd 900c 	str.w	r9, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   154c0:	f7ea fed2 	bl	268 <__aeabi_uldivmod>
   154c4:	4610      	mov	r0, r2
   154c6:	4619      	mov	r1, r3
   154c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   154cc:	2300      	movs	r3, #0
   154ce:	f7ea fecb 	bl	268 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   154d2:	f8cd 8004 	str.w	r8, [sp, #4]
   154d6:	9002      	str	r0, [sp, #8]
   154d8:	f8cd 9000 	str.w	r9, [sp]
   154dc:	4653      	mov	r3, sl
   154de:	2206      	movs	r2, #6
   154e0:	2103      	movs	r1, #3
   154e2:	4648      	mov	r0, r9
   154e4:	f7f6 fa8e 	bl	ba04 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   154e8:	2802      	cmp	r0, #2
   154ea:	d023      	beq.n	15534 <radio_scan_enable+0x1cc>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   154ec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   154ee:	2d00      	cmp	r5, #0
   154f0:	f47f af49 	bne.w	15386 <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
   154f4:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
   154f8:	f043 0301 	orr.w	r3, r3, #1
   154fc:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
	if (!_radio.advertiser.is_enabled) {
   15500:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   15504:	2b00      	cmp	r3, #0
   15506:	db02      	blt.n	1550e <radio_scan_enable+0x1a6>
		ll_adv_scan_state_cb(BIT(1));
   15508:	2002      	movs	r0, #2
   1550a:	f001 fba7 	bl	16c5c <ll_adv_scan_state_cb>
	return 0;
   1550e:	4628      	mov	r0, r5
   15510:	e73a      	b.n	15388 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   15512:	f8d4 1c28 	ldr.w	r1, [r4, #3112]	; 0xc28
		u32_t ticks_ref = 0;
   15516:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   15518:	aa0d      	add	r2, sp, #52	; 0x34
   1551a:	ab0c      	add	r3, sp, #48	; 0x30
   1551c:	4429      	add	r1, r5
   1551e:	2003      	movs	r0, #3
   15520:	f7f9 f972 	bl	e808 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   15524:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15526:	2b00      	cmp	r3, #0
   15528:	d096      	beq.n	15458 <radio_scan_enable+0xf0>
			ticks_anchor = ticks_ref;
   1552a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   1552e:	e793      	b.n	15458 <radio_scan_enable+0xf0>
			cpu_sleep();
   15530:	f7f8 f932 	bl	d798 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   15534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15536:	2b02      	cmp	r3, #2
   15538:	d0fa      	beq.n	15530 <radio_scan_enable+0x1c8>
   1553a:	e7d7      	b.n	154ec <radio_scan_enable+0x184>
   1553c:	f3af 8000 	nop.w
   15540:	1afd498d 	.word	0x1afd498d
   15544:	00000007 	.word	0x00000007
   15548:	20000c08 	.word	0x20000c08
   1554c:	84e72a00 	.word	0x84e72a00
   15550:	200048b8 	.word	0x200048b8
   15554:	0000ebf1 	.word	0x0000ebf1
   15558:	3b9aca00 	.word	0x3b9aca00
   1555c:	0000d7dd 	.word	0x0000d7dd
   15560:	0000f4c5 	.word	0x0000f4c5

00015564 <radio_scan_disable>:
{
   15564:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   15566:	2104      	movs	r1, #4
   15568:	2006      	movs	r0, #6
   1556a:	f7f8 fb11 	bl	db90 <role_disable>
	if (!status) {
   1556e:	4605      	mov	r5, r0
   15570:	b9e8      	cbnz	r0, 155ae <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
   15572:	4c10      	ldr	r4, [pc, #64]	; (155b4 <radio_scan_disable+0x50>)
   15574:	f894 2c2c 	ldrb.w	r2, [r4, #3116]	; 0xc2c
   15578:	f360 0200 	bfi	r2, r0, #0, #1
   1557c:	f884 2c2c 	strb.w	r2, [r4, #3116]	; 0xc2c
		if (!_radio.advertiser.is_enabled) {
   15580:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
   15584:	2a00      	cmp	r2, #0
   15586:	db01      	blt.n	1558c <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
   15588:	f001 fb68 	bl	16c5c <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
   1558c:	f8d4 6c54 	ldr.w	r6, [r4, #3156]	; 0xc54
		if (conn) {
   15590:	b15e      	cbz	r6, 155aa <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
   15592:	2300      	movs	r3, #0
   15594:	f8c4 3c54 	str.w	r3, [r4, #3156]	; 0xc54
			mem_release(conn->llcp_terminate.
   15598:	4907      	ldr	r1, [pc, #28]	; (155b8 <radio_scan_disable+0x54>)
   1559a:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   1559e:	f7f5 fbd6 	bl	ad4e <mem_release>
			mem_release(conn, &_radio.conn_free);
   155a2:	4906      	ldr	r1, [pc, #24]	; (155bc <radio_scan_disable+0x58>)
   155a4:	4630      	mov	r0, r6
   155a6:	f7f5 fbd2 	bl	ad4e <mem_release>
}
   155aa:	4628      	mov	r0, r5
   155ac:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   155ae:	250c      	movs	r5, #12
   155b0:	e7fb      	b.n	155aa <radio_scan_disable+0x46>
   155b2:	bf00      	nop
   155b4:	20000c08 	.word	0x20000c08
   155b8:	20001938 	.word	0x20001938
   155bc:	200018fc 	.word	0x200018fc

000155c0 <ll_connect_disable>:
	if (_radio.scanner.conn == 0) {
   155c0:	4b03      	ldr	r3, [pc, #12]	; (155d0 <ll_connect_disable+0x10>)
   155c2:	f8d3 3c54 	ldr.w	r3, [r3, #3156]	; 0xc54
   155c6:	b10b      	cbz	r3, 155cc <ll_connect_disable+0xc>
	status = radio_scan_disable();
   155c8:	f7ff bfcc 	b.w	15564 <radio_scan_disable>
}
   155cc:	200c      	movs	r0, #12
   155ce:	4770      	bx	lr
   155d0:	20000c08 	.word	0x20000c08

000155d4 <ll_rx_dequeue>:
{
   155d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   155d6:	4d34      	ldr	r5, [pc, #208]	; (156a8 <ll_rx_dequeue+0xd4>)
	struct radio_pdu_node_rx *node_rx = NULL;
   155d8:	aa02      	add	r2, sp, #8
   155da:	2300      	movs	r3, #0
   155dc:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   155e0:	f8d5 0d38 	ldr.w	r0, [r5, #3384]	; 0xd38
   155e4:	f605 5134 	addw	r1, r5, #3380	; 0xd34
   155e8:	f7f5 fc00 	bl	adec <memq_dequeue>
   155ec:	462c      	mov	r4, r5
	LL_ASSERT(link);
   155ee:	b928      	cbnz	r0, 155fc <ll_rx_dequeue+0x28>
			LL_ASSERT(_radio.scanner.is_enabled);
   155f0:	4040      	eors	r0, r0
   155f2:	f380 8811 	msr	BASEPRI, r0
   155f6:	f04f 0004 	mov.w	r0, #4
   155fa:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   155fc:	f505 6153 	add.w	r1, r5, #3376	; 0xd30
   15600:	f7f5 fba5 	bl	ad4e <mem_release>
	switch (node_rx->hdr.type) {
   15604:	9a01      	ldr	r2, [sp, #4]
   15606:	7911      	ldrb	r1, [r2, #4]
   15608:	290c      	cmp	r1, #12
   1560a:	d8f1      	bhi.n	155f0 <ll_rx_dequeue+0x1c>
   1560c:	2301      	movs	r3, #1
   1560e:	408b      	lsls	r3, r1
   15610:	f641 707e 	movw	r0, #8062	; 0x1f7e
   15614:	4203      	tst	r3, r0
   15616:	d111      	bne.n	1563c <ll_rx_dequeue+0x68>
   15618:	0618      	lsls	r0, r3, #24
   1561a:	d5e9      	bpl.n	155f0 <ll_rx_dequeue+0x1c>
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   1561c:	2906      	cmp	r1, #6
   1561e:	d134      	bne.n	1568a <ll_rx_dequeue+0xb6>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   15620:	7ad3      	ldrb	r3, [r2, #11]
   15622:	2b3c      	cmp	r3, #60	; 0x3c
   15624:	d015      	beq.n	15652 <ll_rx_dequeue+0x7e>
   15626:	7b12      	ldrb	r2, [r2, #12]
   15628:	bb8a      	cbnz	r2, 1568e <ll_rx_dequeue+0xba>
			LL_ASSERT(_radio.scanner.is_enabled);
   1562a:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
   1562e:	07d9      	lsls	r1, r3, #31
   15630:	d5de      	bpl.n	155f0 <ll_rx_dequeue+0x1c>
			_radio.scanner.is_enabled = 0;
   15632:	f362 0300 	bfi	r3, r2, #0, #1
   15636:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
   1563a:	e01a      	b.n	15672 <ll_rx_dequeue+0x9e>
		LL_ASSERT(_radio.link_rx_data_quota <
   1563c:	f895 0d28 	ldrb.w	r0, [r5, #3368]	; 0xd28
   15640:	f895 3d3c 	ldrb.w	r3, [r5, #3388]	; 0xd3c
   15644:	3801      	subs	r0, #1
   15646:	4283      	cmp	r3, r0
   15648:	dad2      	bge.n	155f0 <ll_rx_dequeue+0x1c>
		_radio.link_rx_data_quota++;
   1564a:	3301      	adds	r3, #1
   1564c:	f885 3d3c 	strb.w	r3, [r5, #3388]	; 0xd3c
		break;
   15650:	e7e4      	b.n	1561c <ll_rx_dequeue+0x48>
				_radio.advertiser.conn = NULL;
   15652:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   15654:	f8d4 5c18 	ldr.w	r5, [r4, #3096]	; 0xc18
				_radio.advertiser.conn = NULL;
   15658:	f8c4 3c18 	str.w	r3, [r4, #3096]	; 0xc18
			LL_ASSERT(_radio.advertiser.is_enabled);
   1565c:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   15660:	2b00      	cmp	r3, #0
   15662:	dac5      	bge.n	155f0 <ll_rx_dequeue+0x1c>
			_radio.advertiser.is_enabled = 0;
   15664:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   15668:	f36f 13c7 	bfc	r3, #7, #1
   1566c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   15670:	b97d      	cbnz	r5, 15692 <ll_rx_dequeue+0xbe>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   15672:	f894 0c2c 	ldrb.w	r0, [r4, #3116]	; 0xc2c
		     _radio.advertiser.is_enabled;
   15676:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   1567a:	f000 0001 	and.w	r0, r0, #1
   1567e:	0040      	lsls	r0, r0, #1
		if (!bm) {
   15680:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
   15684:	d101      	bne.n	1568a <ll_rx_dequeue+0xb6>
			ll_adv_scan_state_cb(0);
   15686:	f001 fae9 	bl	16c5c <ll_adv_scan_state_cb>
}
   1568a:	b003      	add	sp, #12
   1568c:	bd30      	pop	{r4, r5, pc}
		struct connection *conn = NULL;
   1568e:	2500      	movs	r5, #0
   15690:	e7e4      	b.n	1565c <ll_rx_dequeue+0x88>
			mem_release(node_rx->hdr.onion.link,
   15692:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   15696:	4905      	ldr	r1, [pc, #20]	; (156ac <ll_rx_dequeue+0xd8>)
   15698:	f7f5 fb59 	bl	ad4e <mem_release>
			mem_release(conn, &_radio.conn_free);
   1569c:	4904      	ldr	r1, [pc, #16]	; (156b0 <ll_rx_dequeue+0xdc>)
   1569e:	4628      	mov	r0, r5
   156a0:	f7f5 fb55 	bl	ad4e <mem_release>
   156a4:	e7e5      	b.n	15672 <ll_rx_dequeue+0x9e>
   156a6:	bf00      	nop
   156a8:	20000c08 	.word	0x20000c08
   156ac:	20001938 	.word	0x20001938
   156b0:	200018fc 	.word	0x200018fc

000156b4 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   156b4:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   156b6:	4c0b      	ldr	r4, [pc, #44]	; (156e4 <rtc0_nrf5_isr+0x30>)
   156b8:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   156bc:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   156c0:	b122      	cbz	r2, 156cc <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   156c2:	2000      	movs	r0, #0
   156c4:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
   156c8:	f7f6 f98a 	bl	b9e0 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   156cc:	b12d      	cbz	r5, 156da <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   156ce:	2300      	movs	r3, #0
   156d0:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
   156d4:	2001      	movs	r0, #1
   156d6:	f7f6 f983 	bl	b9e0 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   156da:	2000      	movs	r0, #0
}
   156dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   156e0:	f7f5 bc34 	b.w	af4c <mayfly_run>
   156e4:	4000b000 	.word	0x4000b000

000156e8 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
   156e8:	2001      	movs	r0, #1
   156ea:	f7f5 bc2f 	b.w	af4c <mayfly_run>

000156ee <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   156ee:	4668      	mov	r0, sp
   156f0:	f020 0107 	bic.w	r1, r0, #7
   156f4:	468d      	mov	sp, r1
   156f6:	b501      	push	{r0, lr}
	isr_radio();
   156f8:	f001 fe78 	bl	173ec <isr_radio>
	ISR_DIRECT_PM();
   156fc:	f7eb fd72 	bl	11e4 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   15700:	f7eb fb50 	bl	da4 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   15704:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   15708:	4685      	mov	sp, r0
   1570a:	4770      	bx	lr

0001570c <radio_active_callback>:
{
   1570c:	4770      	bx	lr
	...

00015710 <radio_event_callback>:
	k_sem_give(sem_recv);
   15710:	4b01      	ldr	r3, [pc, #4]	; (15718 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   15712:	6818      	ldr	r0, [r3, #0]
   15714:	f00b b9de 	b.w	20ad4 <_impl_k_sem_give>
   15718:	20002768 	.word	0x20002768

0001571c <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   1571c:	b530      	push	{r4, r5, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   1571e:	4b38      	ldr	r3, [pc, #224]	; (15800 <ll_init+0xe4>)
{
   15720:	b087      	sub	sp, #28
	sem_recv = sem_rx;
   15722:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   15724:	4837      	ldr	r0, [pc, #220]	; (15804 <ll_init+0xe8>)
   15726:	f00a fcc7 	bl	200b8 <device_get_binding>
	if (!clk_k32) {
   1572a:	b918      	cbnz	r0, 15734 <ll_init+0x18>
		return -ENODEV;
   1572c:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
   15730:	b007      	add	sp, #28
   15732:	bd30      	pop	{r4, r5, pc}
	return api->on(dev, sys);
   15734:	6843      	ldr	r3, [r0, #4]
   15736:	2101      	movs	r1, #1
   15738:	681b      	ldr	r3, [r3, #0]
   1573a:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   1573c:	4832      	ldr	r0, [pc, #200]	; (15808 <ll_init+0xec>)
   1573e:	f00a fcbb 	bl	200b8 <device_get_binding>
	if (!entropy) {
   15742:	4604      	mov	r4, r0
   15744:	2800      	cmp	r0, #0
   15746:	d0f1      	beq.n	1572c <ll_init+0x10>
	cntr_init();
   15748:	f001 fcae 	bl	170a8 <cntr_init>
	mayfly_init();
   1574c:	f7f5 fb5e 	bl	ae0c <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   15750:	4b2e      	ldr	r3, [pc, #184]	; (1580c <ll_init+0xf0>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   15752:	2203      	movs	r2, #3
   15754:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   15756:	2108      	movs	r1, #8
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   15758:	4a2d      	ldr	r2, [pc, #180]	; (15810 <ll_init+0xf4>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   1575a:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   1575c:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   1575e:	2502      	movs	r5, #2
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   15760:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   15762:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   15764:	9205      	str	r2, [sp, #20]
   15766:	4a2b      	ldr	r2, [pc, #172]	; (15814 <ll_init+0xf8>)
   15768:	9204      	str	r2, [sp, #16]
   1576a:	4a2b      	ldr	r2, [pc, #172]	; (15818 <ll_init+0xfc>)
   1576c:	9203      	str	r2, [sp, #12]
   1576e:	4a2b      	ldr	r2, [pc, #172]	; (1581c <ll_init+0x100>)
   15770:	9202      	str	r2, [sp, #8]
   15772:	220d      	movs	r2, #13
   15774:	9201      	str	r2, [sp, #4]
   15776:	9300      	str	r3, [sp, #0]
   15778:	4a29      	ldr	r2, [pc, #164]	; (15820 <ll_init+0x104>)
   1577a:	2304      	movs	r3, #4
   1577c:	f7f6 f8f8 	bl	b970 <ticker_init>
	LL_ASSERT(!err);
   15780:	b128      	cbz	r0, 1578e <ll_init+0x72>
   15782:	4040      	eors	r0, r0
   15784:	f380 8811 	msr	BASEPRI, r0
   15788:	f04f 0004 	mov.w	r0, #4
   1578c:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   1578e:	4825      	ldr	r0, [pc, #148]	; (15824 <ll_init+0x108>)
   15790:	f00a fc92 	bl	200b8 <device_get_binding>
	if (!clk_m16) {
   15794:	2800      	cmp	r0, #0
   15796:	d0c9      	beq.n	1572c <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
   15798:	f640 1368 	movw	r3, #2408	; 0x968
   1579c:	9305      	str	r3, [sp, #20]
   1579e:	4b22      	ldr	r3, [pc, #136]	; (15828 <ll_init+0x10c>)
   157a0:	9304      	str	r3, [sp, #16]
   157a2:	f240 1301 	movw	r3, #257	; 0x101
   157a6:	9303      	str	r3, [sp, #12]
   157a8:	9501      	str	r5, [sp, #4]
   157aa:	23fb      	movs	r3, #251	; 0xfb
   157ac:	2501      	movs	r5, #1
   157ae:	9302      	str	r3, [sp, #8]
   157b0:	4622      	mov	r2, r4
   157b2:	9500      	str	r5, [sp, #0]
   157b4:	462b      	mov	r3, r5
   157b6:	2107      	movs	r1, #7
   157b8:	f7fe fabe 	bl	13d38 <radio_init>
	if (err) {
   157bc:	4604      	mov	r4, r0
   157be:	b9e0      	cbnz	r0, 157fa <ll_init+0xde>
	ll_filter_reset(true);
   157c0:	4628      	mov	r0, r5
   157c2:	f001 fc29 	bl	17018 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   157c6:	4622      	mov	r2, r4
   157c8:	4621      	mov	r1, r4
   157ca:	4628      	mov	r0, r5
   157cc:	f7eb fcf0 	bl	11b0 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   157d0:	4622      	mov	r2, r4
   157d2:	4621      	mov	r1, r4
   157d4:	200b      	movs	r0, #11
   157d6:	f7eb fceb 	bl	11b0 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   157da:	4622      	mov	r2, r4
   157dc:	4621      	mov	r1, r4
   157de:	2018      	movs	r0, #24
   157e0:	f7eb fce6 	bl	11b0 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   157e4:	4628      	mov	r0, r5
   157e6:	f7eb fcb1 	bl	114c <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   157ea:	200b      	movs	r0, #11
   157ec:	f7eb fcae 	bl	114c <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   157f0:	2018      	movs	r0, #24
   157f2:	f7eb fcab 	bl	114c <_arch_irq_enable>
	return 0;
   157f6:	4620      	mov	r0, r4
   157f8:	e79a      	b.n	15730 <ll_init+0x14>
		return -ENOMEM;
   157fa:	f06f 000b 	mvn.w	r0, #11
   157fe:	e797      	b.n	15730 <ll_init+0x14>
   15800:	20002768 	.word	0x20002768
   15804:	00022478 	.word	0x00022478
   15808:	00022439 	.word	0x00022439
   1580c:	20002748 	.word	0x20002748
   15810:	00017d05 	.word	0x00017d05
   15814:	00017c8d 	.word	0x00017c8d
   15818:	00017c6d 	.word	0x00017c6d
   1581c:	200024d8 	.word	0x200024d8
   15820:	20002398 	.word	0x20002398
   15824:	00022483 	.word	0x00022483
   15828:	20001a30 	.word	0x20001a30

0001582c <ll_adv_set_get>:


struct ll_adv_set *ll_adv_set_get(void)
{
	return &ll_adv;
}
   1582c:	4800      	ldr	r0, [pc, #0]	; (15830 <ll_adv_set_get+0x4>)
   1582e:	4770      	bx	lr
   15830:	2000276e 	.word	0x2000276e

00015834 <ll_adv_params_set>:

u32_t ll_adv_params_set(u16_t interval, u8_t adv_type,
			u8_t own_addr_type, u8_t direct_addr_type,
			u8_t const *const direct_addr, u8_t chan_map,
			u8_t filter_policy)
{
   15834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15838:	4616      	mov	r6, r2
   1583a:	4698      	mov	r8, r3
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1583c:	2206      	movs	r2, #6
   1583e:	2300      	movs	r3, #0
   15840:	f88d 3000 	strb.w	r3, [sp]
   15844:	f88d 2002 	strb.w	r2, [sp, #2]
   15848:	2301      	movs	r3, #1
   1584a:	2202      	movs	r2, #2
{
   1584c:	4604      	mov	r4, r0
   1584e:	468b      	mov	fp, r1
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   15850:	f88d 3001 	strb.w	r3, [sp, #1]
   15854:	f88d 2003 	strb.w	r2, [sp, #3]
   15858:	f88d 3004 	strb.w	r3, [sp, #4]
				     PDU_ADV_TYPE_DIRECT_IND};

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (ll_adv_is_enabled()) {
   1585c:	f7fe fb4e 	bl	13efc <ll_adv_is_enabled>
   15860:	4607      	mov	r7, r0
   15862:	2800      	cmp	r0, #0
   15864:	d17c      	bne.n	15960 <ll_adv_params_set+0x12c>
   15866:	f8df a100 	ldr.w	sl, [pc, #256]	; 15968 <ll_adv_params_set+0x134>
	if (adv_type != 0x01) {
		ll_adv.interval = interval;
	} else {
		ll_adv.interval = 0;
	}
	ll_adv.chan_map = chan_map;
   1586a:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   1586e:	f89a 3000 	ldrb.w	r3, [sl]
   15872:	f362 0302 	bfi	r3, r2, #0, #3
	ll_adv.filter_policy = filter_policy;
   15876:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	if (adv_type != 0x01) {
   1587a:	f1bb 0f01 	cmp.w	fp, #1
	ll_adv.filter_policy = filter_policy;
   1587e:	f362 03c4 	bfi	r3, r2, #3, #2
		ll_adv.interval = interval;
   15882:	bf14      	ite	ne
   15884:	f8aa 400a 	strhne.w	r4, [sl, #10]
		ll_adv.interval = 0;
   15888:	f8aa 000a 	strheq.w	r0, [sl, #10]
	ll_adv.filter_policy = filter_policy;
   1588c:	f88a 3000 	strb.w	r3, [sl]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
   15890:	f7fe fb24 	bl	13edc <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   15894:	f890 4203 	ldrb.w	r4, [r0, #515]	; 0x203
	pdu->type = pdu_adv_type[adv_type];
   15898:	ab02      	add	r3, sp, #8
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1589a:	eb04 2404 	add.w	r4, r4, r4, lsl #8
	pdu->type = pdu_adv_type[adv_type];
   1589e:	449b      	add	fp, r3
   158a0:	5d03      	ldrb	r3, [r0, r4]
   158a2:	f81b 2c08 	ldrb.w	r2, [fp, #-8]
   158a6:	f362 0303 	bfi	r3, r2, #0, #4
	pdu->rfu = 0;
   158aa:	f36f 1304 	bfc	r3, #4, #1
   158ae:	5503      	strb	r3, [r0, r4]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   158b0:	b2db      	uxtb	r3, r3
   158b2:	f003 020f 	and.w	r2, r3, #15
   158b6:	2a01      	cmp	r2, #1
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
	     (pdu->type == PDU_ADV_TYPE_DIRECT_IND))) {
		pdu->chan_sel = 1;
   158b8:	bf94      	ite	ls
   158ba:	f043 0320 	orrls.w	r3, r3, #32
	} else {
		pdu->chan_sel = 0;
   158be:	f36f 1345 	bfchi	r3, #5, #1
   158c2:	5503      	strb	r3, [r0, r4]
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
   158c4:	f89a 3000 	ldrb.w	r3, [sl]
   158c8:	f366 1346 	bfi	r3, r6, #5, #2
   158cc:	f88a 3000 	strb.w	r3, [sl]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   158d0:	b2db      	uxtb	r3, r3
   158d2:	065a      	lsls	r2, r3, #25
	radio_adv_data = radio_adv_data_get();
   158d4:	4605      	mov	r5, r0
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   158d6:	eb00 0904 	add.w	r9, r0, r4
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   158da:	d508      	bpl.n	158ee <ll_adv_params_set+0xba>
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
   158dc:	f368 13c7 	bfi	r3, r8, #7, #1
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   158e0:	2206      	movs	r2, #6
   158e2:	990c      	ldr	r1, [sp, #48]	; 0x30
   158e4:	481f      	ldr	r0, [pc, #124]	; (15964 <ll_adv_params_set+0x130>)
		ll_adv.id_addr_type = direct_addr_type;
   158e6:	f88a 3000 	strb.w	r3, [sl]
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   158ea:	f7ea ff67 	bl	7bc <memcpy>
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
   158ee:	5d2b      	ldrb	r3, [r5, r4]
   158f0:	f006 0601 	and.w	r6, r6, #1
   158f4:	f366 1386 	bfi	r3, r6, #6, #1
	pdu->rx_addr = 0;
   158f8:	f36f 13c7 	bfc	r3, #7, #1
   158fc:	552b      	strb	r3, [r5, r4]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   158fe:	b2db      	uxtb	r3, r3
   15900:	f003 020f 	and.w	r2, r3, #15
   15904:	2a01      	cmp	r2, #1
   15906:	d125      	bne.n	15954 <ll_adv_params_set+0x120>
		pdu->rx_addr = direct_addr_type;
   15908:	f368 13c7 	bfi	r3, r8, #7, #1
   1590c:	552b      	strb	r3, [r5, r4]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   1590e:	2206      	movs	r2, #6
   15910:	990c      	ldr	r1, [sp, #48]	; 0x30
   15912:	f109 0008 	add.w	r0, r9, #8
   15916:	f7ea ff51 	bl	7bc <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   1591a:	230c      	movs	r3, #12

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
   1591c:	f889 3001 	strb.w	r3, [r9, #1]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
   15920:	f7fe fae8 	bl	13ef4 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   15924:	f890 2203 	ldrb.w	r2, [r0, #515]	; 0x203
   15928:	eb02 2202 	add.w	r2, r2, r2, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1592c:	2404      	movs	r4, #4
   1592e:	5c83      	ldrb	r3, [r0, r2]
   15930:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
   15934:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   15938:	f366 1386 	bfi	r3, r6, #6, #1
	pdu->rx_addr = 0;
   1593c:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   15940:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
   15942:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
   15944:	784b      	ldrb	r3, [r1, #1]
   15946:	b90b      	cbnz	r3, 1594c <ll_adv_params_set+0x118>
		pdu->len = BDADDR_SIZE;
   15948:	2306      	movs	r3, #6
   1594a:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
   1594c:	4638      	mov	r0, r7
   1594e:	b003      	add	sp, #12
   15950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (pdu->len == 0) {
   15954:	f899 3001 	ldrb.w	r3, [r9, #1]
   15958:	2b00      	cmp	r3, #0
   1595a:	d1e1      	bne.n	15920 <ll_adv_params_set+0xec>
		pdu->len = BDADDR_SIZE;
   1595c:	2306      	movs	r3, #6
   1595e:	e7dd      	b.n	1591c <ll_adv_params_set+0xe8>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15960:	270c      	movs	r7, #12
   15962:	e7f3      	b.n	1594c <ll_adv_params_set+0x118>
   15964:	20002770 	.word	0x20002770
   15968:	2000276e 	.word	0x2000276e

0001596c <ll_ext_adv_params_set>:
u32_t ll_ext_adv_params_set(u8_t Adv_handle, u16_t evt_prop, u16_t interval,
			u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   1596c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15970:	b08d      	sub	sp, #52	; 0x34
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   15972:	2601      	movs	r6, #1
{
   15974:	9304      	str	r3, [sp, #16]
   15976:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   1597a:	9305      	str	r3, [sp, #20]
   1597c:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   15980:	9306      	str	r3, [sp, #24]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   15982:	2300      	movs	r3, #0
   15984:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   15988:	2306      	movs	r3, #6
   1598a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1598e:	2502      	movs	r5, #2
   15990:	2307      	movs	r3, #7
{
   15992:	4689      	mov	r9, r1
   15994:	4614      	mov	r4, r2
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   15996:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
   1599a:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
   1599e:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   159a2:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
//	struct radio_ext_adv_data *radio_aux_adv_data;
	struct radio_adv_data *radio_aux_adv_data;
	struct pdu_adv *pdu;
	struct pdu_adv *aux_pdu;
	
	if (ll_adv_is_enabled()) {
   159a6:	f7fe faa9 	bl	13efc <ll_adv_is_enabled>
   159aa:	4682      	mov	sl, r0
   159ac:	2800      	cmp	r0, #0
   159ae:	f040 81c3 	bne.w	15d38 <ll_ext_adv_params_set+0x3cc>

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */
	ll_adv.max_skip = skip;
   159b2:	4b61      	ldr	r3, [pc, #388]	; (15b38 <ll_ext_adv_params_set+0x1cc>)
   159b4:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
   159b8:	731a      	strb	r2, [r3, #12]
	
	u8_t adv_type;
	ll_adv.phy_p = BIT(0);
   159ba:	7a1a      	ldrb	r2, [r3, #8]
		adv_type = 0x05;
	}			
	/* extended */
	//if (adv_type > 0x04) {
		/* legacy */
		if (evt_prop & BIT(4)) {
   159bc:	f019 0f10 	tst.w	r9, #16
	ll_adv.phy_p = BIT(0);
   159c0:	f366 0202 	bfi	r2, r6, #0, #3
   159c4:	721a      	strb	r2, [r3, #8]
		if (evt_prop & BIT(4)) {
   159c6:	f000 80a4 	beq.w	15b12 <ll_ext_adv_params_set+0x1a6>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   159ca:	2203      	movs	r2, #3
   159cc:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24

			adv_type = leg_adv_type[evt_prop & 0x03];

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
   159d0:	f019 0f08 	tst.w	r9, #8
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   159d4:	f04f 0204 	mov.w	r2, #4
   159d8:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   159dc:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
   159e0:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
			if (evt_prop & BIT(3)) {
   159e4:	d108      	bne.n	159f8 <ll_ext_adv_params_set+0x8c>
			adv_type = leg_adv_type[evt_prop & 0x03];
   159e6:	a90c      	add	r1, sp, #48	; 0x30
   159e8:	f009 0203 	and.w	r2, r9, #3
   159ec:	440a      	add	r2, r1
   159ee:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type == 0x01) {
   159f2:	42b1      	cmp	r1, r6
   159f4:	f040 809d 	bne.w	15b32 <ll_ext_adv_params_set+0x1c6>
		ll_adv.interval = 0;  				//interval = 0 for ADV_DIRECT_IND
   159f8:	2200      	movs	r2, #0
   159fa:	815a      	strh	r2, [r3, #10]
   159fc:	2101      	movs	r1, #1
	} else {
		ll_adv.interval = interval;
	}
	ll_adv.chan_map = chan_map;  			
   159fe:	781a      	ldrb	r2, [r3, #0]
   15a00:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   15a04:	9107      	str	r1, [sp, #28]
   15a06:	f360 0202 	bfi	r2, r0, #0, #3
	ll_adv.filter_policy = filter_policy;
   15a0a:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
   15a0e:	f360 02c4 	bfi	r2, r0, #3, #2
   15a12:	701a      	strb	r2, [r3, #0]
	
	/* update the "current" primary adv data and Aux packet */
	radio_adv_data = radio_adv_data_get();
   15a14:	f7fe fa62 	bl	13edc <radio_adv_data_get>
   15a18:	4606      	mov	r6, r0
	radio_aux_adv_data = radio_aux_adv_data_get();							// testing
   15a1a:	f7fe fa63 	bl	13ee4 <radio_aux_adv_data_get>
//	radio_aux_adv_data = radio_chain_adv_data_get();

	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];

	pdu->type = pdu_adv_type[adv_type];
   15a1e:	9907      	ldr	r1, [sp, #28]
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   15a20:	f896 5203 	ldrb.w	r5, [r6, #515]	; 0x203
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
   15a24:	f890 7203 	ldrb.w	r7, [r0, #515]	; 0x203
	pdu->type = pdu_adv_type[adv_type];
   15a28:	aa0c      	add	r2, sp, #48	; 0x30
   15a2a:	4411      	add	r1, r2
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   15a2c:	eb05 2505 	add.w	r5, r5, r5, lsl #8
	pdu->type = pdu_adv_type[adv_type];
   15a30:	f811 2c08 	ldrb.w	r2, [r1, #-8]
   15a34:	5d71      	ldrb	r1, [r6, r5]
   15a36:	f002 020f 	and.w	r2, r2, #15
   15a3a:	f362 0103 	bfi	r1, r2, #0, #4
   15a3e:	5571      	strb	r1, [r6, r5]
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
   15a40:	eb07 2707 	add.w	r7, r7, r7, lsl #8
	radio_aux_adv_data = radio_aux_adv_data_get();							// testing
   15a44:	4603      	mov	r3, r0
	aux_pdu->type = pdu->type;
   15a46:	5dc1      	ldrb	r1, [r0, r7]
   15a48:	f362 0103 	bfi	r1, r2, #0, #4
   15a4c:	55c1      	strb	r1, [r0, r7]
	
	pdu->rfu = 0;
   15a4e:	5d72      	ldrb	r2, [r6, r5]
   15a50:	f36f 1204 	bfc	r2, #4, #1
   15a54:	5572      	strb	r2, [r6, r5]
	aux_pdu->rfu = pdu->rfu;
   15a56:	5dc2      	ldrb	r2, [r0, r7]
   15a58:	f36f 1204 	bfc	r2, #4, #1
   15a5c:	55c2      	strb	r2, [r0, r7]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) && 
   15a5e:	5d72      	ldrb	r2, [r6, r5]
   15a60:	f002 010f 	and.w	r1, r2, #15
   15a64:	2901      	cmp	r1, #1
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
	     (pdu->type == PDU_ADV_TYPE_DIRECT_IND))) {
		pdu->chan_sel = 1;           // could be same for ext adv  LE Channel Selection Algorithm #2 feature 
   15a66:	bf95      	itete	ls
   15a68:	f042 0220 	orrls.w	r2, r2, #32
		aux_pdu->chan_sel = pdu->chan_sel;
	} else {
		pdu->chan_sel = 0;
   15a6c:	f36f 1245 	bfchi	r2, #5, #1
		pdu->chan_sel = 1;           // could be same for ext adv  LE Channel Selection Algorithm #2 feature 
   15a70:	5572      	strbls	r2, [r6, r5]
		pdu->chan_sel = 0;
   15a72:	5572      	strbhi	r2, [r6, r5]
		aux_pdu->chan_sel = pdu->chan_sel;
   15a74:	bf94      	ite	ls
   15a76:	5dc2      	ldrbls	r2, [r0, r7]
		aux_pdu->chan_sel = pdu->chan_sel;
   15a78:	5dc2      	ldrbhi	r2, [r0, r7]
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
   15a7a:	9904      	ldr	r1, [sp, #16]
		aux_pdu->chan_sel = pdu->chan_sel;
   15a7c:	bf94      	ite	ls
   15a7e:	f042 0220 	orrls.w	r2, r2, #32
		aux_pdu->chan_sel = pdu->chan_sel;
   15a82:	f36f 1245 	bfchi	r2, #5, #1
   15a86:	55c2      	strb	r2, [r0, r7]
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
   15a88:	eb00 0807 	add.w	r8, r0, r7
	ll_adv.own_addr_type = own_addr_type;
   15a8c:	482a      	ldr	r0, [pc, #168]	; (15b38 <ll_ext_adv_params_set+0x1cc>)
   15a8e:	7802      	ldrb	r2, [r0, #0]
   15a90:	f361 1246 	bfi	r2, r1, #5, #2
   15a94:	7002      	strb	r2, [r0, #0]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   15a96:	b2d2      	uxtb	r2, r2
   15a98:	0651      	lsls	r1, r2, #25
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   15a9a:	eb06 0405 	add.w	r4, r6, r5
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   15a9e:	d50a      	bpl.n	15ab6 <ll_ext_adv_params_set+0x14a>
   15aa0:	9307      	str	r3, [sp, #28]
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
   15aa2:	9b05      	ldr	r3, [sp, #20]
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   15aa4:	9917      	ldr	r1, [sp, #92]	; 0x5c
		ll_adv.id_addr_type = direct_addr_type;
   15aa6:	f363 12c7 	bfi	r2, r3, #7, #1
   15aaa:	f800 2b02 	strb.w	r2, [r0], #2
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   15aae:	2206      	movs	r2, #6
   15ab0:	f7ea fe84 	bl	7bc <memcpy>
   15ab4:	9b07      	ldr	r3, [sp, #28]
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr =  own_addr_type & 0x1;
   15ab6:	9a04      	ldr	r2, [sp, #16]
   15ab8:	f002 0201 	and.w	r2, r2, #1
   15abc:	9204      	str	r2, [sp, #16]
   15abe:	9904      	ldr	r1, [sp, #16]
   15ac0:	5d72      	ldrb	r2, [r6, r5]
   15ac2:	f361 1286 	bfi	r2, r1, #6, #1
   15ac6:	5572      	strb	r2, [r6, r5]
	aux_pdu->tx_addr = 0;						//not sending transmitting address in aux packet
   15ac8:	5dda      	ldrb	r2, [r3, r7]
   15aca:	f36f 1286 	bfc	r2, #6, #1
   15ace:	55da      	strb	r2, [r3, r7]
	pdu->rx_addr = 0;  							
   15ad0:	5d72      	ldrb	r2, [r6, r5]
   15ad2:	f36f 12c7 	bfc	r2, #7, #1
   15ad6:	5572      	strb	r2, [r6, r5]
	aux_pdu->rx_addr = pdu->rx_addr;
   15ad8:	5dda      	ldrb	r2, [r3, r7]
   15ada:	f36f 12c7 	bfc	r2, #7, #1
   15ade:	55da      	strb	r2, [r3, r7]
	if(evt_prop & BIT(2)){							// for directed ADV wuth public address
   15ae0:	f019 0204 	ands.w	r2, r9, #4
		pdu->rx_addr = 0;//direct_addr_type;
   15ae4:	bf1e      	ittt	ne
   15ae6:	5d73      	ldrbne	r3, [r6, r5]
   15ae8:	f36f 13c7 	bfcne	r3, #7, #1
   15aec:	5573      	strbne	r3, [r6, r5]
	}

	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   15aee:	5d73      	ldrb	r3, [r6, r5]
   15af0:	f003 010f 	and.w	r1, r3, #15
   15af4:	2901      	cmp	r1, #1
   15af6:	d121      	bne.n	15b3c <ll_ext_adv_params_set+0x1d0>
		pdu->rx_addr = direct_addr_type;
   15af8:	9a05      	ldr	r2, [sp, #20]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   15afa:	9917      	ldr	r1, [sp, #92]	; 0x5c
		pdu->rx_addr = direct_addr_type;
   15afc:	f362 13c7 	bfi	r3, r2, #7, #1
   15b00:	5573      	strb	r3, [r6, r5]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   15b02:	2206      	movs	r2, #6
   15b04:	f104 0008 	add.w	r0, r4, #8
   15b08:	f7ea fe58 	bl	7bc <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   15b0c:	230c      	movs	r3, #12
		/* NOTE: AdvA, filled at enable and RPA timeout */
		
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
   15b0e:	7063      	strb	r3, [r4, #1]
   15b10:	e0ec      	b.n	15cec <ll_ext_adv_params_set+0x380>
			if (((evt_prop & 0x03) == 0x03) ||
   15b12:	f009 0203 	and.w	r2, r9, #3
   15b16:	2a03      	cmp	r2, #3
   15b18:	f000 8111 	beq.w	15d3e <ll_ext_adv_params_set+0x3d2>
   15b1c:	f009 020c 	and.w	r2, r9, #12
   15b20:	2a0c      	cmp	r2, #12
   15b22:	f000 810c 	beq.w	15d3e <ll_ext_adv_params_set+0x3d2>
			ll_adv.phy_p = phy_p;
   15b26:	7a1a      	ldrb	r2, [r3, #8]
   15b28:	9906      	ldr	r1, [sp, #24]
   15b2a:	f361 0202 	bfi	r2, r1, #0, #3
   15b2e:	721a      	strb	r2, [r3, #8]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
   15b30:	2105      	movs	r1, #5
		ll_adv.interval = interval;
   15b32:	815c      	strh	r4, [r3, #10]
   15b34:	e763      	b.n	159fe <ll_ext_adv_params_set+0x92>
   15b36:	bf00      	nop
   15b38:	2000276e 	.word	0x2000276e
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
   15b3c:	2907      	cmp	r1, #7
   15b3e:	f040 80f6 	bne.w	15d2e <ll_ext_adv_params_set+0x3c2>
		p->ext_hdr_len = 0;
   15b42:	78a3      	ldrb	r3, [r4, #2]
		p->adv_mode = 0x00;//evt_prop & 0x03;
   15b44:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   15b48:	f36f 1387 	bfc	r3, #6, #2
   15b4c:	70a3      	strb	r3, [r4, #2]
		aux_p->ext_hdr_len = p->ext_hdr_len;
   15b4e:	f898 3002 	ldrb.w	r3, [r8, #2]
		aux_p->adv_mode = p->adv_mode;
   15b52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   15b56:	f36f 1387 	bfc	r3, #6, #2
   15b5a:	f888 3002 	strb.w	r3, [r8, #2]
		if (!((evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2)))) {
   15b5e:	f019 0f20 	tst.w	r9, #32
		*(u8_t *)h = 0;
   15b62:	f04f 0300 	mov.w	r3, #0
   15b66:	70e3      	strb	r3, [r4, #3]
		p = (void *)&pdu->adv_ext_ind;
   15b68:	f104 0002 	add.w	r0, r4, #2
		ptr = (u8_t *)h + sizeof(*h);
   15b6c:	f104 0504 	add.w	r5, r4, #4
		aux_p = (void *)&aux_pdu->adv_ext_ind;
   15b70:	f108 0102 	add.w	r1, r8, #2
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
   15b74:	f108 0604 	add.w	r6, r8, #4
		*(u8_t *)aux_h = 0;
   15b78:	f888 3003 	strb.w	r3, [r8, #3]
		if (!((evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2)))) {
   15b7c:	d007      	beq.n	15b8e <ll_ext_adv_params_set+0x222>
   15b7e:	78a3      	ldrb	r3, [r4, #2]
   15b80:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   15b84:	d103      	bne.n	15b8e <ll_ext_adv_params_set+0x222>
   15b86:	9b06      	ldr	r3, [sp, #24]
   15b88:	2b04      	cmp	r3, #4
   15b8a:	f040 80ca 	bne.w	15d22 <ll_ext_adv_params_set+0x3b6>
			h->adv_addr = 1;
   15b8e:	78e3      	ldrb	r3, [r4, #3]
   15b90:	f043 0301 	orr.w	r3, r3, #1
   15b94:	70e3      	strb	r3, [r4, #3]
			ptr += BDADDR_SIZE;
   15b96:	f104 030a 	add.w	r3, r4, #10
		if(evt_prop & BIT(2)){
   15b9a:	b122      	cbz	r2, 15ba6 <ll_ext_adv_params_set+0x23a>
			h->tgt_addr = 1;
   15b9c:	78e2      	ldrb	r2, [r4, #3]
   15b9e:	f042 0202 	orr.w	r2, r2, #2
   15ba2:	70e2      	strb	r2, [r4, #3]
			ptr += BDADDR_SIZE;
   15ba4:	3306      	adds	r3, #6
		if(evt_prop & BIT(6)){
   15ba6:	f019 0f40 	tst.w	r9, #64	; 0x40
   15baa:	f000 80bc 	beq.w	15d26 <ll_ext_adv_params_set+0x3ba>
			h->adi = 1;
   15bae:	78e2      	ldrb	r2, [r4, #3]
			adi_ptr = ptr;
   15bb0:	9302      	str	r3, [sp, #8]
			h->adi = 1;
   15bb2:	f042 0208 	orr.w	r2, r2, #8
   15bb6:	70e2      	strb	r2, [r4, #3]
			aux_h->adi = h->adi;
   15bb8:	f898 2003 	ldrb.w	r2, [r8, #3]
			aux_adi_ptr = aux_ptr;
   15bbc:	9603      	str	r6, [sp, #12]
			aux_h->adi = h->adi;
   15bbe:	f042 0208 	orr.w	r2, r2, #8
   15bc2:	f888 2003 	strb.w	r2, [r8, #3]
			h->aux_ptr = 1;
   15bc6:	78e2      	ldrb	r2, [r4, #3]
   15bc8:	f042 0210 	orr.w	r2, r2, #16
   15bcc:	70e2      	strb	r2, [r4, #3]
			aux_h->aux_ptr = h->aux_ptr;
   15bce:	f898 2003 	ldrb.w	r2, [r8, #3]
   15bd2:	f042 0210 	orr.w	r2, r2, #16
   15bd6:	f888 2003 	strb.w	r2, [r8, #3]
			h->tx_pwr = 1;
   15bda:	78e7      	ldrb	r7, [r4, #3]
			ptr += sizeof(*adi_ptr);
   15bdc:	f103 0b02 	add.w	fp, r3, #2
			h->tx_pwr = 1;
   15be0:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			aux_ptr+= sizeof(*aux_ap);
   15be4:	f108 0209 	add.w	r2, r8, #9
			h->tx_pwr = 1;
   15be8:	70e7      	strb	r7, [r4, #3]
			ptr += sizeof(*adi_ptr);
   15bea:	f8cd b004 	str.w	fp, [sp, #4]
			ptr ++;
   15bee:	3306      	adds	r3, #6
		len = ptr - (u8_t *)p;
   15bf0:	1a1b      	subs	r3, r3, r0
   15bf2:	b2db      	uxtb	r3, r3
		if (len > (offsetof(struct pdu_adv_com_ext_adv,
   15bf4:	2b02      	cmp	r3, #2
			p->ext_hdr_len = (len -
   15bf6:	bf8c      	ite	hi
   15bf8:	78a0      	ldrbhi	r0, [r4, #2]
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
   15bfa:	2301      	movls	r3, #1
   15bfc:	7063      	strb	r3, [r4, #1]
			p->ext_hdr_len = (len -
   15bfe:	bf88      	it	hi
   15c00:	f103 37ff 	addhi.w	r7, r3, #4294967295	; 0xffffffff
		aux_len = aux_ptr - (u8_t *)aux_p;
   15c04:	eba2 0301 	sub.w	r3, r2, r1
			p->ext_hdr_len = (len -
   15c08:	bf88      	it	hi
   15c0a:	f367 0005 	bfihi	r0, r7, #0, #6
		aux_len = aux_ptr - (u8_t *)aux_p;
   15c0e:	b2db      	uxtb	r3, r3
			p->ext_hdr_len = (len -
   15c10:	bf88      	it	hi
   15c12:	70a0      	strbhi	r0, [r4, #2]
   15c14:	4a4b      	ldr	r2, [pc, #300]	; (15d44 <ll_ext_adv_params_set+0x3d8>)
		if (aux_len > (offsetof(struct pdu_adv_com_ext_adv,
   15c16:	2b02      	cmp	r3, #2
			aux_p->ext_hdr_len = (aux_len -
   15c18:	bf82      	ittt	hi
   15c1a:	f898 1002 	ldrbhi.w	r1, [r8, #2]
			aux_pdu->len = aux_len;
   15c1e:	f888 3001 	strbhi.w	r3, [r8, #1]
			aux_p->ext_hdr_len = (aux_len -
   15c22:	f103 30ff 	addhi.w	r0, r3, #4294967295	; 0xffffffff
			aux_ptr_len = aux_len;
   15c26:	7013      	strb	r3, [r2, #0]
		if(h->adv_addr){
   15c28:	78e3      	ldrb	r3, [r4, #3]
			aux_p->ext_hdr_len = (aux_len -
   15c2a:	bf8b      	itete	hi
   15c2c:	f360 0105 	bfihi	r1, r0, #0, #6
			aux_pdu->len = offsetof(struct pdu_adv_com_ext_adv,
   15c30:	2101      	movls	r1, #1
			aux_p->ext_hdr_len = (aux_len -
   15c32:	f888 1002 	strbhi.w	r1, [r8, #2]
			aux_pdu->len = offsetof(struct pdu_adv_com_ext_adv,
   15c36:	f888 1001 	strbls.w	r1, [r8, #1]
		if(h->adv_addr){
   15c3a:	07da      	lsls	r2, r3, #31
			ptr += BDADDR_SIZE;
   15c3c:	bf48      	it	mi
   15c3e:	f104 050a 	addmi.w	r5, r4, #10
		if(h->tgt_addr){
   15c42:	079f      	lsls	r7, r3, #30
   15c44:	d505      	bpl.n	15c52 <ll_ext_adv_params_set+0x2e6>
			memcpy(ptr, direct_addr, BDADDR_SIZE);
   15c46:	4628      	mov	r0, r5
   15c48:	2206      	movs	r2, #6
   15c4a:	9917      	ldr	r1, [sp, #92]	; 0x5c
   15c4c:	f7ea fdb6 	bl	7bc <memcpy>
			ptr += BDADDR_SIZE;
   15c50:	3506      	adds	r5, #6
		if(h->adi){
   15c52:	78e1      	ldrb	r1, [r4, #3]
   15c54:	0708      	lsls	r0, r1, #28
   15c56:	d517      	bpl.n	15c88 <ll_ext_adv_params_set+0x31c>
			adi_ptr->did = 0x00;
   15c58:	9b02      	ldr	r3, [sp, #8]
   15c5a:	2200      	movs	r2, #0
   15c5c:	701a      	strb	r2, [r3, #0]
   15c5e:	785b      	ldrb	r3, [r3, #1]
			adi_ptr->sid = 0x02;//sid & 0x0f;
   15c60:	2002      	movs	r0, #2
   15c62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   15c66:	f360 1307 	bfi	r3, r0, #4, #4
   15c6a:	9802      	ldr	r0, [sp, #8]
   15c6c:	7043      	strb	r3, [r0, #1]
			aux_adi_ptr->did = adi_ptr->did;
   15c6e:	9b03      	ldr	r3, [sp, #12]
   15c70:	701a      	strb	r2, [r3, #0]
   15c72:	785b      	ldrb	r3, [r3, #1]
			aux_adi_ptr->sid = 0x04;//adi_ptr->sid;
   15c74:	2204      	movs	r2, #4
   15c76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   15c7a:	f362 1307 	bfi	r3, r2, #4, #4
   15c7e:	9a03      	ldr	r2, [sp, #12]
			ptr += sizeof(*adi_ptr);
   15c80:	3502      	adds	r5, #2
			aux_adi_ptr->sid = 0x04;//adi_ptr->sid;
   15c82:	7053      	strb	r3, [r2, #1]
			aux_ptr += sizeof(*aux_adi_ptr);
   15c84:	f108 0606 	add.w	r6, r8, #6
		if(h->aux_ptr){
   15c88:	06ca      	lsls	r2, r1, #27
   15c8a:	d522      	bpl.n	15cd2 <ll_ext_adv_params_set+0x366>
			ap->offs_units = 0;
   15c8c:	9b01      	ldr	r3, [sp, #4]
			ap->offs = 00;
   15c8e:	9a01      	ldr	r2, [sp, #4]
			ap->phy = 0;
   15c90:	9c01      	ldr	r4, [sp, #4]
			ap->chan_idx = 0x03;
   15c92:	2003      	movs	r0, #3
			ap->offs_units = 0;
   15c94:	7018      	strb	r0, [r3, #0]
			ap->offs = 00;
   15c96:	2300      	movs	r3, #0
   15c98:	7053      	strb	r3, [r2, #1]
   15c9a:	7892      	ldrb	r2, [r2, #2]
			ap->phy = 0;
   15c9c:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   15ca0:	f363 1247 	bfi	r2, r3, #5, #3
   15ca4:	70a2      	strb	r2, [r4, #2]
			aux_ap->chan_idx = 0x03;
   15ca6:	f89b 2000 	ldrb.w	r2, [fp]
			aux_ap->offs = 00;
   15caa:	f88b 3001 	strb.w	r3, [fp, #1]
			aux_ap->chan_idx = 0x03;
   15cae:	f360 0205 	bfi	r2, r0, #0, #6
			aux_ap->offs_units = 0;
   15cb2:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   15cb6:	f363 12c7 	bfi	r2, r3, #7, #1
   15cba:	f88b 2000 	strb.w	r2, [fp]
			aux_ap->offs = 00;
   15cbe:	f89b 2002 	ldrb.w	r2, [fp, #2]
			aux_ap->phy = 0;
   15cc2:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   15cc6:	f363 1247 	bfi	r2, r3, #5, #3
			ptr += sizeof(*ap);
   15cca:	4405      	add	r5, r0
			aux_ap->phy = 0;
   15ccc:	f88b 2002 	strb.w	r2, [fp, #2]
			aux_ptr += sizeof(*ap);
   15cd0:	4406      	add	r6, r0
		if (h->tx_pwr) {
   15cd2:	064b      	lsls	r3, r1, #25
   15cd4:	d508      	bpl.n	15ce8 <ll_ext_adv_params_set+0x37c>
			if (tx_pwr) {
   15cd6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15cd8:	b33b      	cbz	r3, 15d2a <ll_ext_adv_params_set+0x3be>
				if (*tx_pwr != 0x7F) {
   15cda:	781b      	ldrb	r3, [r3, #0]
   15cdc:	2b7f      	cmp	r3, #127	; 0x7f
   15cde:	d102      	bne.n	15ce6 <ll_ext_adv_params_set+0x37a>
					*tx_pwr = _tx_pwr;
   15ce0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   15ce2:	2300      	movs	r3, #0
   15ce4:	7013      	strb	r3, [r2, #0]
			*ptr = _tx_pwr;
   15ce6:	702b      	strb	r3, [r5, #0]
		set_data_ptr = aux_ptr; 
   15ce8:	4b17      	ldr	r3, [pc, #92]	; (15d48 <ll_ext_adv_params_set+0x3dc>)
   15cea:	601e      	str	r6, [r3, #0]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
   15cec:	f7fe f902 	bl	13ef4 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   15cf0:	f890 2203 	ldrb.w	r2, [r0, #515]	; 0x203
   15cf4:	eb02 2202 	add.w	r2, r2, r2, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   15cf8:	2404      	movs	r4, #4
   15cfa:	5c83      	ldrb	r3, [r0, r2]
   15cfc:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
   15d00:	9c04      	ldr	r4, [sp, #16]
   15d02:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   15d06:	f364 1386 	bfi	r3, r4, #6, #1
	pdu->rx_addr = 0;
   15d0a:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   15d0e:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
   15d10:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
   15d12:	784b      	ldrb	r3, [r1, #1]
   15d14:	b90b      	cbnz	r3, 15d1a <ll_ext_adv_params_set+0x3ae>
		pdu->len = BDADDR_SIZE;
   15d16:	2306      	movs	r3, #6
   15d18:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
   15d1a:	4650      	mov	r0, sl
   15d1c:	b00d      	add	sp, #52	; 0x34
   15d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ptr = (u8_t *)h + sizeof(*h);
   15d22:	462b      	mov	r3, r5
   15d24:	e739      	b.n	15b9a <ll_ext_adv_params_set+0x22e>
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
   15d26:	4632      	mov	r2, r6
   15d28:	e762      	b.n	15bf0 <ll_ext_adv_params_set+0x284>
			_tx_pwr = 0;
   15d2a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15d2c:	e7db      	b.n	15ce6 <ll_ext_adv_params_set+0x37a>
	} else if (pdu->len == 0) {
   15d2e:	7863      	ldrb	r3, [r4, #1]
   15d30:	2b00      	cmp	r3, #0
   15d32:	d1db      	bne.n	15cec <ll_ext_adv_params_set+0x380>
		pdu->len = BDADDR_SIZE;
   15d34:	2306      	movs	r3, #6
   15d36:	e6ea      	b.n	15b0e <ll_ext_adv_params_set+0x1a2>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15d38:	f04f 0a0c 	mov.w	sl, #12
   15d3c:	e7ed      	b.n	15d1a <ll_ext_adv_params_set+0x3ae>
				return 0x12; /* invalid HCI cmd param */
   15d3e:	f04f 0a12 	mov.w	sl, #18
   15d42:	e7ea      	b.n	15d1a <ll_ext_adv_params_set+0x3ae>
   15d44:	2000276c 	.word	0x2000276c
   15d48:	2000277c 	.word	0x2000277c

00015d4c <ll_adv_data_set>:


void ll_adv_data_set(u8_t len, u8_t const *const data)
{
   15d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15d50:	4688      	mov	r8, r1
   15d52:	4606      	mov	r6, r0
	struct pdu_adv *pdu;
	u8_t last;


	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   15d54:	f7fe f8c2 	bl	13edc <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   15d58:	f890 5203 	ldrb.w	r5, [r0, #515]	; 0x203
   15d5c:	eb05 2205 	add.w	r2, r5, r5, lsl #8
	radio_adv_data = radio_adv_data_get();
   15d60:	4604      	mov	r4, r0
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
   15d62:	f810 e002 	ldrb.w	lr, [r0, r2]
   15d66:	f00e 030f 	and.w	r3, lr, #15
   15d6a:	2b07      	cmp	r3, #7
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   15d6c:	eb00 0102 	add.w	r1, r0, r2
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
   15d70:	d118      	bne.n	15da4 <ll_adv_data_set+0x58>
	//	struct radio_ext_adv_data *radio_aux_adv_data;
		struct radio_adv_data *radio_aux_adv_data;
		struct pdu_adv *aux_pdu;
		u8_t last;

		radio_aux_adv_data = radio_aux_adv_data_get();					//testing
   15d72:	f7fe f8b7 	bl	13ee4 <radio_aux_adv_data_get>
	//	radio_aux_adv_data = radio_chain_adv_data_get();
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
   15d76:	f890 5203 	ldrb.w	r5, [r0, #515]	; 0x203
	
		memcpy(set_data_ptr, data, len);
   15d7a:	4b29      	ldr	r3, [pc, #164]	; (15e20 <ll_adv_data_set+0xd4>)
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
   15d7c:	eb05 2505 	add.w	r5, r5, r5, lsl #8
		memcpy(set_data_ptr, data, len);
   15d80:	4632      	mov	r2, r6
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
   15d82:	4405      	add	r5, r0
		memcpy(set_data_ptr, data, len);
   15d84:	4641      	mov	r1, r8
   15d86:	6818      	ldr	r0, [r3, #0]
   15d88:	f7ea fd18 	bl	7bc <memcpy>
		aux_pdu->len = aux_ptr_len + len;
   15d8c:	4b25      	ldr	r3, [pc, #148]	; (15e24 <ll_adv_data_set+0xd8>)
   15d8e:	781b      	ldrb	r3, [r3, #0]
   15d90:	441e      	add	r6, r3
		radio_adv_data->last = last;
   15d92:	2300      	movs	r3, #0
		aux_pdu->len = aux_ptr_len + len;
   15d94:	706e      	strb	r6, [r5, #1]
		radio_adv_data->last = last;
   15d96:	f884 3203 	strb.w	r3, [r4, #515]	; 0x203
		ll_adv.aux_chain_count = 1; 	// fragment count which should come from host
   15d9a:	4b23      	ldr	r3, [pc, #140]	; (15e28 <ll_adv_data_set+0xdc>)
   15d9c:	2201      	movs	r2, #1
   15d9e:	735a      	strb	r2, [r3, #13]
   15da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}else{
		if ((prev->type == PDU_ADV_TYPE_DIRECT_IND)) {
   15da4:	2b01      	cmp	r3, #1
   15da6:	d039      	beq.n	15e1c <ll_adv_data_set+0xd0>
		
		return;
		}

		/* use the last index in double buffer, */
		if (radio_adv_data->first == radio_adv_data->last) {
   15da8:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
   15dac:	42ab      	cmp	r3, r5
   15dae:	d104      	bne.n	15dba <ll_adv_data_set+0x6e>
			last = radio_adv_data->last + 1;
   15db0:	3501      	adds	r5, #1
   15db2:	b2ed      	uxtb	r5, r5
			if (last == DOUBLE_BUFFER_SIZE) {
				last = 0;
   15db4:	2d02      	cmp	r5, #2
   15db6:	bf08      	it	eq
   15db8:	2500      	moveq	r5, #0
		} else {
			last = radio_adv_data->last;
		}

		/* update adv pdu fields. */
		pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   15dba:	eb05 2305 	add.w	r3, r5, r5, lsl #8
   15dbe:	18e7      	adds	r7, r4, r3
		pdu->type = prev->type;
   15dc0:	5ce0      	ldrb	r0, [r4, r3]
   15dc2:	f36e 0003 	bfi	r0, lr, #0, #4
		pdu->rfu = 0;
   15dc6:	f36f 1004 	bfc	r0, #4, #1
   15dca:	54e0      	strb	r0, [r4, r3]

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			pdu->chan_sel = prev->chan_sel;
   15dcc:	5ca0      	ldrb	r0, [r4, r2]
   15dce:	f814 e003 	ldrb.w	lr, [r4, r3]
   15dd2:	f3c0 1040 	ubfx	r0, r0, #5, #1
   15dd6:	f360 1e45 	bfi	lr, r0, #5, #1
   15dda:	f804 e003 	strb.w	lr, [r4, r3]
		} else {
			pdu->chan_sel = 0;
		}

		pdu->tx_addr = prev->tx_addr;
   15dde:	5ca0      	ldrb	r0, [r4, r2]
   15de0:	fa5f fe8e 	uxtb.w	lr, lr
   15de4:	f3c0 1080 	ubfx	r0, r0, #6, #1
   15de8:	f360 1e86 	bfi	lr, r0, #6, #1
   15dec:	f804 e003 	strb.w	lr, [r4, r3]
		pdu->rx_addr = prev->rx_addr;
   15df0:	5ca2      	ldrb	r2, [r4, r2]
   15df2:	fa5f f08e 	uxtb.w	r0, lr
   15df6:	09d2      	lsrs	r2, r2, #7
   15df8:	f362 10c7 	bfi	r0, r2, #7, #1
   15dfc:	54e0      	strb	r0, [r4, r3]
		
		
		memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   15dfe:	2206      	movs	r2, #6
   15e00:	3102      	adds	r1, #2
   15e02:	1cb8      	adds	r0, r7, #2
   15e04:	f7ea fcda 	bl	7bc <memcpy>
		memcpy(&pdu->adv_ind.data[0], data, len);
   15e08:	4632      	mov	r2, r6
   15e0a:	4641      	mov	r1, r8
   15e0c:	f107 0008 	add.w	r0, r7, #8
		pdu->len = BDADDR_SIZE + len;
   15e10:	3606      	adds	r6, #6
		memcpy(&pdu->adv_ind.data[0], data, len);
   15e12:	f7ea fcd3 	bl	7bc <memcpy>
		pdu->len = BDADDR_SIZE + len;
   15e16:	707e      	strb	r6, [r7, #1]
		
		/* commit the update so controller picks it. */
		radio_adv_data->last = last;
   15e18:	f884 5203 	strb.w	r5, [r4, #515]	; 0x203
   15e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15e20:	2000277c 	.word	0x2000277c
   15e24:	2000276c 	.word	0x2000276c
   15e28:	2000276e 	.word	0x2000276e

00015e2c <ll_ext_adv_data_set>:
#endif


u8_t temp_buffer[270];
void ll_ext_adv_data_set(u8_t len, u8_t const *const data, u8_t operation, u8_t frag_pref)
{
   15e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15e30:	4689      	mov	r9, r1
   15e32:	4617      	mov	r7, r2
   15e34:	4680      	mov	r8, r0
	struct pdu_adv *pdu;
	u8_t last;


	
	radio_adv_data = radio_adv_data_get();
   15e36:	f7fe f851 	bl	13edc <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   15e3a:	f890 4203 	ldrb.w	r4, [r0, #515]	; 0x203
   15e3e:	eb04 2204 	add.w	r2, r4, r4, lsl #8
	radio_adv_data = radio_adv_data_get();
   15e42:	4605      	mov	r5, r0
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
   15e44:	f810 e002 	ldrb.w	lr, [r0, r2]
   15e48:	f00e 030f 	and.w	r3, lr, #15
   15e4c:	2b07      	cmp	r3, #7
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   15e4e:	eb00 0102 	add.w	r1, r0, r2
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
   15e52:	f040 80db 	bne.w	1600c <ll_ext_adv_data_set+0x1e0>
		struct pdu_adv *aux_pdu;
		struct pdu_adv *copy_pdu;
		u8_t last;
		u8_t length;

		radio_aux_adv_data = radio_aux_adv_data_get();					//testing
   15e56:	f7fe f845 	bl	13ee4 <radio_aux_adv_data_get>
   15e5a:	4604      	mov	r4, r0
		radio_chain_adv_data = radio_chain_adv_data_get();
   15e5c:	f7fe f846 	bl	13eec <radio_chain_adv_data_get>
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
   15e60:	f894 3203 	ldrb.w	r3, [r4, #515]	; 0x203
   15e64:	eb03 2303 	add.w	r3, r3, r3, lsl #8
   15e68:	441c      	add	r4, r3

		memcpy(set_data_ptr, data, len);
   15e6a:	4b86      	ldr	r3, [pc, #536]	; (16084 <ll_ext_adv_data_set+0x258>)
   15e6c:	4649      	mov	r1, r9
   15e6e:	4642      	mov	r2, r8
		radio_chain_adv_data = radio_chain_adv_data_get();
   15e70:	4606      	mov	r6, r0
		memcpy(set_data_ptr, data, len);
   15e72:	6818      	ldr	r0, [r3, #0]
   15e74:	f7ea fca2 	bl	7bc <memcpy>
		length = len;
		aux_pdu->len = aux_ptr_len + len;
   15e78:	4b83      	ldr	r3, [pc, #524]	; (16088 <ll_ext_adv_data_set+0x25c>)
   15e7a:	781a      	ldrb	r2, [r3, #0]
   15e7c:	4442      	add	r2, r8
		radio_adv_data->last = last;
   15e7e:	2300      	movs	r3, #0
		aux_pdu->len = aux_ptr_len + len;
   15e80:	b2d2      	uxtb	r2, r2
   15e82:	7062      	strb	r2, [r4, #1]
		radio_adv_data->last = last;
   15e84:	f885 3203 	strb.w	r3, [r5, #515]	; 0x203
			memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); // 2 is for the header of the PDU
			pointer_offset = 257;
			ll_adv.aux_chain_count = 1;
		}
*/		
		if(aux_h->adv_addr){
   15e88:	78e3      	ldrb	r3, [r4, #3]
   15e8a:	07d9      	lsls	r1, r3, #31
			aux_ptr += BDADDR_SIZE;
   15e8c:	bf4c      	ite	mi
   15e8e:	f104 000a 	addmi.w	r0, r4, #10
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
   15e92:	1d20      	addpl	r0, r4, #4
		}
		if(aux_h->tgt_addr){
   15e94:	079d      	lsls	r5, r3, #30
			aux_ptr += BDADDR_SIZE;
   15e96:	bf48      	it	mi
   15e98:	3006      	addmi	r0, #6
		}
		if(aux_h->adi){
   15e9a:	0719      	lsls	r1, r3, #28
   15e9c:	d509      	bpl.n	15eb2 <ll_ext_adv_data_set+0x86>
			aux_adi_ptr = aux_ptr;
			aux_adi_ptr->did = 0x00;
   15e9e:	2100      	movs	r1, #0
   15ea0:	7001      	strb	r1, [r0, #0]
   15ea2:	7841      	ldrb	r1, [r0, #1]
			aux_adi_ptr->sid = 0x04;//sid & 0x0f;
   15ea4:	2504      	movs	r5, #4
   15ea6:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
   15eaa:	f365 1107 	bfi	r1, r5, #4, #4
   15eae:	7041      	strb	r1, [r0, #1]
			aux_ptr += sizeof(*aux_adi_ptr);
   15eb0:	3002      	adds	r0, #2
		}

		switch (operation){
   15eb2:	2f03      	cmp	r7, #3
   15eb4:	f200 80e3 	bhi.w	1607e <ll_ext_adv_data_set+0x252>
   15eb8:	e8df f007 	tbb	[pc, r7]
   15ebc:	805d022e 	.word	0x805d022e
			case 1:  //First fragment 
					
				if(!aux_h->aux_ptr){
   15ec0:	f013 0310 	ands.w	r3, r3, #16
   15ec4:	d11a      	bne.n	15efc <ll_ext_adv_data_set+0xd0>
					aux_ap = aux_ptr;
					aux_ap->chan_idx = 0x03;
   15ec6:	7801      	ldrb	r1, [r0, #0]
					aux_ap->ca = 0;	
					aux_ap->offs_units = 0;
					aux_ap->offs = 00;
   15ec8:	7043      	strb	r3, [r0, #1]
					aux_ap->chan_idx = 0x03;
   15eca:	2503      	movs	r5, #3
   15ecc:	f365 0105 	bfi	r1, r5, #0, #6
					aux_ap->offs_units = 0;
   15ed0:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   15ed4:	f363 11c7 	bfi	r1, r3, #7, #1
   15ed8:	7001      	strb	r1, [r0, #0]
					aux_ap->offs = 00;
   15eda:	7881      	ldrb	r1, [r0, #2]
					aux_ap->phy = 0;
   15edc:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
   15ee0:	f363 1147 	bfi	r1, r3, #5, #3

					aux_h->aux_ptr = 1;
   15ee4:	78e3      	ldrb	r3, [r4, #3]
					aux_ap->phy = 0;
   15ee6:	7081      	strb	r1, [r0, #2]
					aux_h->aux_ptr = 1;
   15ee8:	f043 0310 	orr.w	r3, r3, #16
   15eec:	70e3      	strb	r3, [r4, #3]
					aux_p->ext_hdr_len = aux_p->ext_hdr_len + 3;
   15eee:	78a3      	ldrb	r3, [r4, #2]
   15ef0:	f3c3 0105 	ubfx	r1, r3, #0, #6
   15ef4:	4429      	add	r1, r5
   15ef6:	f361 0305 	bfi	r3, r1, #0, #6
   15efa:	70a3      	strb	r3, [r4, #2]
				//	memset(aux_ptr, 0 , 3);
				}

				copy_pdu =  (struct pdu_adv *)&radio_chain_adv_data->data[0];
				memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); // 2 is for the header of the PDU
   15efc:	3202      	adds	r2, #2
   15efe:	4621      	mov	r1, r4
   15f00:	4630      	mov	r0, r6
					memcpy(aux_ptr , (aux_ptr+3) ,length_d);
					aux_pdu->len = aux_pdu->len - 3;
				}

				memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); // 2 is for the header of the PDU
				memcpy(temp_buffer, aux_pdu, aux_pdu->len + 2);
   15f02:	f7ea fc5b 	bl	7bc <memcpy>
				pointer_offset = 257;
   15f06:	4b61      	ldr	r3, [pc, #388]	; (1608c <ll_ext_adv_data_set+0x260>)
   15f08:	f240 1201 	movw	r2, #257	; 0x101
   15f0c:	801a      	strh	r2, [r3, #0]
				ll_adv.aux_chain_count = 1;
   15f0e:	4b60      	ldr	r3, [pc, #384]	; (16090 <ll_ext_adv_data_set+0x264>)
   15f10:	2201      	movs	r2, #1
   15f12:	735a      	strb	r2, [r3, #13]
				break;
   15f14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if(!aux_h->aux_ptr){
   15f18:	f013 0310 	ands.w	r3, r3, #16
   15f1c:	d11a      	bne.n	15f54 <ll_ext_adv_data_set+0x128>
					aux_ap->chan_idx = 0x03;
   15f1e:	7801      	ldrb	r1, [r0, #0]
					aux_ap->offs = 00;
   15f20:	7043      	strb	r3, [r0, #1]
					aux_ap->chan_idx = 0x03;
   15f22:	2503      	movs	r5, #3
   15f24:	f365 0105 	bfi	r1, r5, #0, #6
					aux_ap->offs_units = 0;
   15f28:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   15f2c:	f363 11c7 	bfi	r1, r3, #7, #1
   15f30:	7001      	strb	r1, [r0, #0]
					aux_ap->offs = 00;
   15f32:	7881      	ldrb	r1, [r0, #2]
					aux_ap->phy = 0;
   15f34:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
   15f38:	f363 1147 	bfi	r1, r3, #5, #3
					aux_h->aux_ptr = 1;
   15f3c:	78e3      	ldrb	r3, [r4, #3]
					aux_ap->phy = 0;
   15f3e:	7081      	strb	r1, [r0, #2]
					aux_h->aux_ptr = 1;
   15f40:	f043 0310 	orr.w	r3, r3, #16
   15f44:	70e3      	strb	r3, [r4, #3]
					aux_p->ext_hdr_len = aux_p->ext_hdr_len + 3;
   15f46:	78a3      	ldrb	r3, [r4, #2]
   15f48:	f3c3 0105 	ubfx	r1, r3, #0, #6
   15f4c:	4429      	add	r1, r5
   15f4e:	f361 0305 	bfi	r3, r1, #0, #6
   15f52:	70a3      	strb	r3, [r4, #2]
				copy_pdu =  (struct pdu_adv *)&radio_chain_adv_data->data[pointer_offset];
   15f54:	4d4d      	ldr	r5, [pc, #308]	; (1608c <ll_ext_adv_data_set+0x260>)
   15f56:	8828      	ldrh	r0, [r5, #0]
				memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); 
   15f58:	3202      	adds	r2, #2
   15f5a:	4621      	mov	r1, r4
   15f5c:	4430      	add	r0, r6
   15f5e:	f7ea fc2d 	bl	7bc <memcpy>
				pointer_offset += 257;
   15f62:	882b      	ldrh	r3, [r5, #0]
   15f64:	f203 1301 	addw	r3, r3, #257	; 0x101
				ll_adv.aux_chain_count++;
   15f68:	4a49      	ldr	r2, [pc, #292]	; (16090 <ll_ext_adv_data_set+0x264>)
				pointer_offset = 257;
   15f6a:	802b      	strh	r3, [r5, #0]
				ll_adv.aux_chain_count++;
   15f6c:	7b53      	ldrb	r3, [r2, #13]
   15f6e:	3301      	adds	r3, #1
   15f70:	7353      	strb	r3, [r2, #13]
				break;
   15f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				copy_pdu =  (struct pdu_adv *)&radio_chain_adv_data->data[pointer_offset];
   15f76:	4d45      	ldr	r5, [pc, #276]	; (1608c <ll_ext_adv_data_set+0x260>)
   15f78:	8829      	ldrh	r1, [r5, #0]
				if(aux_h->aux_ptr){
   15f7a:	06db      	lsls	r3, r3, #27
				copy_pdu =  (struct pdu_adv *)&radio_chain_adv_data->data[pointer_offset];
   15f7c:	440e      	add	r6, r1
				if(aux_h->aux_ptr){
   15f7e:	d514      	bpl.n	15faa <ll_ext_adv_data_set+0x17e>
					int length_d = (aux_pdu->len - aux_p->ext_hdr_len);
   15f80:	78a3      	ldrb	r3, [r4, #2]
   15f82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
					memcpy(aux_ptr , (aux_ptr+3) ,length_d);
   15f86:	1ad2      	subs	r2, r2, r3
   15f88:	1cc1      	adds	r1, r0, #3
   15f8a:	f7ea fc17 	bl	7bc <memcpy>
					aux_h->aux_ptr = 0;
   15f8e:	78e3      	ldrb	r3, [r4, #3]
   15f90:	f36f 1304 	bfc	r3, #4, #1
   15f94:	70e3      	strb	r3, [r4, #3]
					aux_p->ext_hdr_len = aux_p->ext_hdr_len - 3;
   15f96:	78a3      	ldrb	r3, [r4, #2]
   15f98:	f3c3 0205 	ubfx	r2, r3, #0, #6
   15f9c:	3a03      	subs	r2, #3
   15f9e:	f362 0305 	bfi	r3, r2, #0, #6
   15fa2:	70a3      	strb	r3, [r4, #2]
					aux_pdu->len = aux_pdu->len - 3;
   15fa4:	7863      	ldrb	r3, [r4, #1]
   15fa6:	3b03      	subs	r3, #3
   15fa8:	7063      	strb	r3, [r4, #1]
				memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); 
   15faa:	7862      	ldrb	r2, [r4, #1]
   15fac:	4621      	mov	r1, r4
   15fae:	3202      	adds	r2, #2
   15fb0:	4630      	mov	r0, r6
   15fb2:	f7ea fc03 	bl	7bc <memcpy>
				pointer_offset = 257;
   15fb6:	f240 1301 	movw	r3, #257	; 0x101
   15fba:	e7d5      	b.n	15f68 <ll_ext_adv_data_set+0x13c>
				if(aux_h->aux_ptr){
   15fbc:	f013 0f10 	tst.w	r3, #16
   15fc0:	78a3      	ldrb	r3, [r4, #2]
					int length_d = (aux_pdu->len - aux_p->ext_hdr_len);
   15fc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15fc6:	f100 0103 	add.w	r1, r0, #3
					memcpy(aux_ptr , (aux_ptr+3) ,length_d);
   15fca:	eba2 0203 	sub.w	r2, r2, r3
				if(aux_h->aux_ptr){
   15fce:	d01a      	beq.n	16006 <ll_ext_adv_data_set+0x1da>
					memcpy(aux_ptr , (aux_ptr+3) ,length_d);
   15fd0:	f7ea fbf4 	bl	7bc <memcpy>
					aux_h->aux_ptr = 0;
   15fd4:	78e3      	ldrb	r3, [r4, #3]
   15fd6:	f36f 1304 	bfc	r3, #4, #1
   15fda:	70e3      	strb	r3, [r4, #3]
					aux_p->ext_hdr_len = aux_p->ext_hdr_len - 3;
   15fdc:	78a3      	ldrb	r3, [r4, #2]
   15fde:	f3c3 0205 	ubfx	r2, r3, #0, #6
   15fe2:	3a03      	subs	r2, #3
   15fe4:	f362 0305 	bfi	r3, r2, #0, #6
   15fe8:	70a3      	strb	r3, [r4, #2]
					aux_pdu->len = aux_pdu->len - 3;
   15fea:	7863      	ldrb	r3, [r4, #1]
   15fec:	3b03      	subs	r3, #3
   15fee:	7063      	strb	r3, [r4, #1]
				memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); // 2 is for the header of the PDU
   15ff0:	7862      	ldrb	r2, [r4, #1]
   15ff2:	4621      	mov	r1, r4
   15ff4:	3202      	adds	r2, #2
   15ff6:	4630      	mov	r0, r6
   15ff8:	f7ea fbe0 	bl	7bc <memcpy>
				memcpy(temp_buffer, aux_pdu, aux_pdu->len + 2);
   15ffc:	7862      	ldrb	r2, [r4, #1]
   15ffe:	4825      	ldr	r0, [pc, #148]	; (16094 <ll_ext_adv_data_set+0x268>)
   16000:	3202      	adds	r2, #2
   16002:	4621      	mov	r1, r4
   16004:	e77d      	b.n	15f02 <ll_ext_adv_data_set+0xd6>
					memcpy(aux_ptr , (aux_ptr+3) ,length_d);
   16006:	f7ea fbd9 	bl	7bc <memcpy>
   1600a:	e7ee      	b.n	15fea <ll_ext_adv_data_set+0x1be>
		}

	}else{
		if ((prev->type == PDU_ADV_TYPE_DIRECT_IND)) {
   1600c:	2b01      	cmp	r3, #1
   1600e:	d036      	beq.n	1607e <ll_ext_adv_data_set+0x252>
		
		return;
		}

		/* use the last index in double buffer, */
		if (radio_adv_data->first == radio_adv_data->last) {
   16010:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
   16014:	42a3      	cmp	r3, r4
   16016:	d104      	bne.n	16022 <ll_ext_adv_data_set+0x1f6>
			last = radio_adv_data->last + 1;
   16018:	3401      	adds	r4, #1
   1601a:	b2e4      	uxtb	r4, r4
			if (last == DOUBLE_BUFFER_SIZE) {
				last = 0;
   1601c:	2c02      	cmp	r4, #2
   1601e:	bf08      	it	eq
   16020:	2400      	moveq	r4, #0
		} else {
			last = radio_adv_data->last;
		}

		/* update adv pdu fields. */
		pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   16022:	eb04 2304 	add.w	r3, r4, r4, lsl #8
   16026:	18ee      	adds	r6, r5, r3
		pdu->type = prev->type;
   16028:	5ce8      	ldrb	r0, [r5, r3]
   1602a:	f36e 0003 	bfi	r0, lr, #0, #4
		pdu->rfu = 0;
   1602e:	f36f 1004 	bfc	r0, #4, #1
   16032:	54e8      	strb	r0, [r5, r3]

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			pdu->chan_sel = prev->chan_sel;
   16034:	5ca8      	ldrb	r0, [r5, r2]
   16036:	5cef      	ldrb	r7, [r5, r3]
   16038:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1603c:	f360 1745 	bfi	r7, r0, #5, #1
   16040:	54ef      	strb	r7, [r5, r3]
		} else {
			pdu->chan_sel = 0;
		}

		pdu->tx_addr = prev->tx_addr;
   16042:	5ca8      	ldrb	r0, [r5, r2]
   16044:	b2ff      	uxtb	r7, r7
   16046:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1604a:	f360 1786 	bfi	r7, r0, #6, #1
   1604e:	54ef      	strb	r7, [r5, r3]
		pdu->rx_addr = prev->rx_addr;
   16050:	5caa      	ldrb	r2, [r5, r2]
   16052:	b2f8      	uxtb	r0, r7
   16054:	09d2      	lsrs	r2, r2, #7
   16056:	f362 10c7 	bfi	r0, r2, #7, #1
   1605a:	54e8      	strb	r0, [r5, r3]
		
		
		memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   1605c:	2206      	movs	r2, #6
   1605e:	3102      	adds	r1, #2
   16060:	1cb0      	adds	r0, r6, #2
   16062:	f7ea fbab 	bl	7bc <memcpy>
		memcpy(&pdu->adv_ind.data[0], data, len);
   16066:	4642      	mov	r2, r8
   16068:	4649      	mov	r1, r9
   1606a:	f106 0008 	add.w	r0, r6, #8
		pdu->len = BDADDR_SIZE + len;
   1606e:	f108 0806 	add.w	r8, r8, #6
		memcpy(&pdu->adv_ind.data[0], data, len);
   16072:	f7ea fba3 	bl	7bc <memcpy>
		pdu->len = BDADDR_SIZE + len;
   16076:	f886 8001 	strb.w	r8, [r6, #1]
		
		/* commit the update so controller picks it. */
		radio_adv_data->last = last;
   1607a:	f885 4203 	strb.w	r4, [r5, #515]	; 0x203
   1607e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16082:	bf00      	nop
   16084:	2000277c 	.word	0x2000277c
   16088:	2000276c 	.word	0x2000276c
   1608c:	2000e230 	.word	0x2000e230
   16090:	2000276e 	.word	0x2000276e
   16094:	20004a75 	.word	0x20004a75

00016098 <ll_scan_data_set>:
}



void ll_scan_data_set(u8_t len, u8_t const *const data)
{
   16098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1609c:	4606      	mov	r6, r0
   1609e:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   160a0:	f7fd ff28 	bl	13ef4 <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
   160a4:	f890 3203 	ldrb.w	r3, [r0, #515]	; 0x203
   160a8:	f890 2202 	ldrb.w	r2, [r0, #514]	; 0x202
   160ac:	429a      	cmp	r2, r3
	radio_scan_data = radio_scan_data_get();
   160ae:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
   160b0:	d131      	bne.n	16116 <ll_scan_data_set+0x7e>
		last = radio_scan_data->last + 1;
   160b2:	1c5d      	adds	r5, r3, #1
   160b4:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   160b6:	2d02      	cmp	r5, #2
			last = 0;
   160b8:	bf08      	it	eq
   160ba:	2500      	moveq	r5, #0
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   160bc:	eb05 2205 	add.w	r2, r5, r5, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   160c0:	f04f 0e04 	mov.w	lr, #4
   160c4:	5ca0      	ldrb	r0, [r4, r2]
   160c6:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
   160ca:	f000 00ef 	and.w	r0, r0, #239	; 0xef
   160ce:	f36f 1045 	bfc	r0, #5, #1
   160d2:	54a0      	strb	r0, [r4, r2]
	prev = (struct pdu_adv *)
   160d4:	eb03 2303 	add.w	r3, r3, r3, lsl #8
   160d8:	18e1      	adds	r1, r4, r3
	pdu->tx_addr = prev->tx_addr;
   160da:	5ce0      	ldrb	r0, [r4, r3]
   160dc:	5ca3      	ldrb	r3, [r4, r2]
   160de:	f3c0 1080 	ubfx	r0, r0, #6, #1
   160e2:	f360 1386 	bfi	r3, r0, #6, #1
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   160e6:	eb04 0802 	add.w	r8, r4, r2
	pdu->rx_addr = 0;
   160ea:	f36f 13c7 	bfc	r3, #7, #1
   160ee:	54a3      	strb	r3, [r4, r2]
	pdu->len = BDADDR_SIZE + len;
   160f0:	1db3      	adds	r3, r6, #6
   160f2:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   160f6:	2206      	movs	r2, #6
   160f8:	3102      	adds	r1, #2
   160fa:	f108 0002 	add.w	r0, r8, #2
   160fe:	f7ea fb5d 	bl	7bc <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   16102:	4632      	mov	r2, r6
   16104:	4639      	mov	r1, r7
   16106:	f108 0008 	add.w	r0, r8, #8
   1610a:	f7ea fb57 	bl	7bc <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   1610e:	f884 5203 	strb.w	r5, [r4, #515]	; 0x203
   16112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16116:	461d      	mov	r5, r3
   16118:	e7d0      	b.n	160bc <ll_scan_data_set+0x24>
	...

0001611c <ll_adv_enable>:
}


u32_t ll_adv_enable(u8_t enable)
{
   1611c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
   16120:	b918      	cbnz	r0, 1612a <ll_adv_enable+0xe>
	}
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);

	return status;
}
   16122:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return radio_adv_disable();
   16126:	f7ff b8ef 	b.w	15308 <radio_adv_disable>
	} else if (ll_adv_is_enabled()) {
   1612a:	f7fd fee7 	bl	13efc <ll_adv_is_enabled>
   1612e:	4681      	mov	r9, r0
   16130:	2800      	cmp	r0, #0
   16132:	d150      	bne.n	161d6 <ll_adv_enable+0xba>
	radio_adv_data = radio_adv_data_get();
   16134:	f7fd fed2 	bl	13edc <radio_adv_data_get>
   16138:	4607      	mov	r7, r0
	radio_scan_data = radio_scan_data_get();
   1613a:	f7fd fedb 	bl	13ef4 <radio_scan_data_get>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   1613e:	f890 3203 	ldrb.w	r3, [r0, #515]	; 0x203
		ll_filters_adv_update(ll_adv.filter_policy);
   16142:	4c26      	ldr	r4, [pc, #152]	; (161dc <ll_adv_enable+0xc0>)
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   16144:	f897 5203 	ldrb.w	r5, [r7, #515]	; 0x203
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   16148:	eb03 2303 	add.w	r3, r3, r3, lsl #8
   1614c:	18c6      	adds	r6, r0, r3
		ll_filters_adv_update(ll_adv.filter_policy);
   1614e:	7820      	ldrb	r0, [r4, #0]
   16150:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   16154:	f000 faee 	bl	16734 <ll_filters_adv_update>
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   16158:	7820      	ldrb	r0, [r4, #0]
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   1615a:	eb05 2505 	add.w	r5, r5, r5, lsl #8
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1615e:	f010 0a40 	ands.w	sl, r0, #64	; 0x40
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   16162:	eb07 0805 	add.w	r8, r7, r5
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   16166:	d01d      	beq.n	161a4 <ll_adv_enable+0x88>
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   16168:	464a      	mov	r2, r9
   1616a:	1ca1      	adds	r1, r4, #2
   1616c:	09c0      	lsrs	r0, r0, #7
   1616e:	f000 fb0d 	bl	1678c <ll_rl_find>
			if (rl_idx != FILTER_IDX_NONE) {
   16172:	28ff      	cmp	r0, #255	; 0xff
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   16174:	4605      	mov	r5, r0
			if (rl_idx != FILTER_IDX_NONE) {
   16176:	d002      	beq.n	1617e <ll_adv_enable+0x62>
				ll_rl_rpa_update(false);
   16178:	4648      	mov	r0, r9
   1617a:	f000 fc8b 	bl	16a94 <ll_rl_rpa_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
   1617e:	4641      	mov	r1, r8
   16180:	4628      	mov	r0, r5
   16182:	f000 fc31 	bl	169e8 <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
   16186:	4631      	mov	r1, r6
   16188:	4628      	mov	r0, r5
   1618a:	f000 fc2d 	bl	169e8 <ll_rl_pdu_adv_update>
				  ll_adv.filter_policy, rl_idx);
   1618e:	7821      	ldrb	r1, [r4, #0]
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
   16190:	8960      	ldrh	r0, [r4, #10]
   16192:	462b      	mov	r3, r5
   16194:	f3c1 02c1 	ubfx	r2, r1, #3, #2
}
   16198:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
   1619c:	f001 0107 	and.w	r1, r1, #7
   161a0:	f7fe bc46 	b.w	14a30 <radio_adv_enable>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   161a4:	5d78      	ldrb	r0, [r7, r5]
   161a6:	4651      	mov	r1, sl
   161a8:	f3c0 1080 	ubfx	r0, r0, #6, #1
   161ac:	f7f5 fd9e 	bl	bcec <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
   161b0:	2206      	movs	r2, #6
   161b2:	4601      	mov	r1, r0
   161b4:	f108 0002 	add.w	r0, r8, #2
   161b8:	f7ea fb00 	bl	7bc <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   161bc:	5d78      	ldrb	r0, [r7, r5]
   161be:	4651      	mov	r1, sl
   161c0:	f3c0 1080 	ubfx	r0, r0, #6, #1
   161c4:	f7f5 fd92 	bl	bcec <ll_addr_get>
			memcpy(&pdu_scan->scan_rsp.addr[0],
   161c8:	2206      	movs	r2, #6
   161ca:	4601      	mov	r1, r0
   161cc:	1cb0      	adds	r0, r6, #2
   161ce:	f7ea faf5 	bl	7bc <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
   161d2:	25ff      	movs	r5, #255	; 0xff
   161d4:	e7db      	b.n	1618e <ll_adv_enable+0x72>
}
   161d6:	2000      	movs	r0, #0
   161d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   161dc:	2000276e 	.word	0x2000276e

000161e0 <ll_ext_adv_enable>:



u32_t ll_ext_adv_enable(u8_t enable)
{
   161e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
//	struct pdu_adv *aux_pdu_adv;
	u32_t status;

	if (!enable) {
   161e4:	b920      	cbnz	r0, 161f0 <ll_ext_adv_enable+0x10>
	status = radio_ext_adv_enable(ll_adv.phy_p, ll_adv.interval,
				  ll_adv.chan_map, ll_adv.filter_policy,
				  rl_idx, ll_adv.max_skip, ll_adv.aux_chain_count);

	return status;
}
   161e6:	b004      	add	sp, #16
   161e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return radio_adv_disable();
   161ec:	f7ff b88c 	b.w	15308 <radio_adv_disable>
	} else if (ll_adv_is_enabled()) {
   161f0:	f7fd fe84 	bl	13efc <ll_adv_is_enabled>
   161f4:	4681      	mov	r9, r0
   161f6:	2800      	cmp	r0, #0
   161f8:	d155      	bne.n	162a6 <ll_ext_adv_enable+0xc6>
	radio_adv_data = radio_adv_data_get();
   161fa:	f7fd fe6f 	bl	13edc <radio_adv_data_get>
   161fe:	4607      	mov	r7, r0
	radio_scan_data = radio_scan_data_get();
   16200:	f7fd fe78 	bl	13ef4 <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   16204:	f897 5203 	ldrb.w	r5, [r7, #515]	; 0x203
   16208:	4c33      	ldr	r4, [pc, #204]	; (162d8 <ll_ext_adv_enable+0xf8>)
   1620a:	eb05 2505 	add.w	r5, r5, r5, lsl #8
   1620e:	eb07 0805 	add.w	r8, r7, r5
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   16212:	5d7b      	ldrb	r3, [r7, r5]
   16214:	f003 020f 	and.w	r2, r3, #15
   16218:	2a07      	cmp	r2, #7
   1621a:	d110      	bne.n	1623e <ll_ext_adv_enable+0x5e>
		if (h->adv_addr) {
   1621c:	f898 2003 	ldrb.w	r2, [r8, #3]
   16220:	07d2      	lsls	r2, r2, #31
   16222:	d50a      	bpl.n	1623a <ll_ext_adv_enable+0x5a>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
   16224:	4649      	mov	r1, r9
   16226:	f3c3 1080 	ubfx	r0, r3, #6, #1
   1622a:	f7f5 fd5f 	bl	bcec <ll_addr_get>
   1622e:	2206      	movs	r2, #6
   16230:	4601      	mov	r1, r0
   16232:	f108 0004 	add.w	r0, r8, #4
			memcpy(&pdu_scan->scan_rsp.addr[0],
   16236:	f7ea fac1 	bl	7bc <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
   1623a:	25ff      	movs	r5, #255	; 0xff
   1623c:	e020      	b.n	16280 <ll_ext_adv_enable+0xa0>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   1623e:	f890 3203 	ldrb.w	r3, [r0, #515]	; 0x203
   16242:	eb03 2303 	add.w	r3, r3, r3, lsl #8
   16246:	18c6      	adds	r6, r0, r3
		ll_filters_adv_update(ll_adv.filter_policy);
   16248:	7820      	ldrb	r0, [r4, #0]
   1624a:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   1624e:	f000 fa71 	bl	16734 <ll_filters_adv_update>
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   16252:	7820      	ldrb	r0, [r4, #0]
   16254:	f010 0a40 	ands.w	sl, r0, #64	; 0x40
   16258:	d027      	beq.n	162aa <ll_ext_adv_enable+0xca>
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   1625a:	464a      	mov	r2, r9
   1625c:	1ca1      	adds	r1, r4, #2
   1625e:	09c0      	lsrs	r0, r0, #7
   16260:	f000 fa94 	bl	1678c <ll_rl_find>
			if (rl_idx != FILTER_IDX_NONE) {
   16264:	28ff      	cmp	r0, #255	; 0xff
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   16266:	4605      	mov	r5, r0
			if (rl_idx != FILTER_IDX_NONE) {
   16268:	d002      	beq.n	16270 <ll_ext_adv_enable+0x90>
				ll_rl_rpa_update(false);
   1626a:	4648      	mov	r0, r9
   1626c:	f000 fc12 	bl	16a94 <ll_rl_rpa_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
   16270:	4641      	mov	r1, r8
   16272:	4628      	mov	r0, r5
   16274:	f000 fbb8 	bl	169e8 <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
   16278:	4631      	mov	r1, r6
   1627a:	4628      	mov	r0, r5
   1627c:	f000 fbb4 	bl	169e8 <ll_rl_pdu_adv_update>
				  ll_adv.chan_map, ll_adv.filter_policy,
   16280:	7822      	ldrb	r2, [r4, #0]
	status = radio_ext_adv_enable(ll_adv.phy_p, ll_adv.interval,
   16282:	7b63      	ldrb	r3, [r4, #13]
   16284:	7a20      	ldrb	r0, [r4, #8]
   16286:	9302      	str	r3, [sp, #8]
   16288:	7b23      	ldrb	r3, [r4, #12]
   1628a:	9301      	str	r3, [sp, #4]
   1628c:	8961      	ldrh	r1, [r4, #10]
   1628e:	9500      	str	r5, [sp, #0]
   16290:	f3c2 03c1 	ubfx	r3, r2, #3, #2
   16294:	f000 0007 	and.w	r0, r0, #7
   16298:	f002 0207 	and.w	r2, r2, #7
   1629c:	f7fe fd94 	bl	14dc8 <radio_ext_adv_enable>
}
   162a0:	b004      	add	sp, #16
   162a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
   162a6:	2000      	movs	r0, #0
   162a8:	e7fa      	b.n	162a0 <ll_ext_adv_enable+0xc0>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   162aa:	5d78      	ldrb	r0, [r7, r5]
   162ac:	4651      	mov	r1, sl
   162ae:	f3c0 1080 	ubfx	r0, r0, #6, #1
   162b2:	f7f5 fd1b 	bl	bcec <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
   162b6:	2206      	movs	r2, #6
   162b8:	4601      	mov	r1, r0
   162ba:	f108 0002 	add.w	r0, r8, #2
   162be:	f7ea fa7d 	bl	7bc <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   162c2:	5d78      	ldrb	r0, [r7, r5]
   162c4:	4651      	mov	r1, sl
   162c6:	f3c0 1080 	ubfx	r0, r0, #6, #1
   162ca:	f7f5 fd0f 	bl	bcec <ll_addr_get>
			memcpy(&pdu_scan->scan_rsp.addr[0],
   162ce:	2206      	movs	r2, #6
   162d0:	4601      	mov	r1, r0
   162d2:	1cb0      	adds	r0, r6, #2
   162d4:	e7af      	b.n	16236 <ll_ext_adv_enable+0x56>
   162d6:	bf00      	nop
   162d8:	2000276e 	.word	0x2000276e

000162dc <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   162dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   162e0:	4606      	mov	r6, r0
   162e2:	4689      	mov	r9, r1
   162e4:	4690      	mov	r8, r2
   162e6:	461f      	mov	r7, r3
	if (ll_scan_is_enabled()) {
   162e8:	f7fd fe1e 	bl	13f28 <ll_scan_is_enabled>
   162ec:	b9a0      	cbnz	r0, 16318 <ll_scan_params_set+0x3c>
	 * 1001b - Ext. Coded active
	 */


	/* for ext adv 0010 type */
	ll_scan.type = type | 0x03;  			//for time being just to test
   162ee:	4d0c      	ldr	r5, [pc, #48]	; (16320 <ll_scan_params_set+0x44>)
   162f0:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   162f2:	f8a5 9000 	strh.w	r9, [r5]
	ll_scan.type = type | 0x03;  			//for time being just to test
   162f6:	f046 0603 	orr.w	r6, r6, #3
   162fa:	f366 0403 	bfi	r4, r6, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
   162fe:	4622      	mov	r2, r4
   16300:	f367 1205 	bfi	r2, r7, #4, #2
	ll_scan.filter_policy = filter_policy;
   16304:	4613      	mov	r3, r2
   16306:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
   1630a:	f8a5 8002 	strh.w	r8, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   1630e:	f362 1387 	bfi	r3, r2, #6, #2
   16312:	712b      	strb	r3, [r5, #4]

	return 0;
   16314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16318:	200c      	movs	r0, #12
}
   1631a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1631e:	bf00      	nop
   16320:	20002780 	.word	0x20002780

00016324 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   16324:	b5f0      	push	{r4, r5, r6, r7, lr}
   16326:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   16328:	b920      	cbnz	r0, 16334 <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   1632a:	b005      	add	sp, #20
   1632c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
   16330:	f7ff b918 	b.w	15564 <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
   16334:	f7fd fdf8 	bl	13f28 <ll_scan_is_enabled>
   16338:	4606      	mov	r6, r0
   1633a:	bb40      	cbnz	r0, 1638e <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
   1633c:	4c15      	ldr	r4, [pc, #84]	; (16394 <ll_scan_enable+0x70>)
   1633e:	7920      	ldrb	r0, [r4, #4]
   16340:	0980      	lsrs	r0, r0, #6
   16342:	f000 fa0d 	bl	16760 <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   16346:	7923      	ldrb	r3, [r4, #4]
   16348:	f013 0501 	ands.w	r5, r3, #1
   1634c:	d006      	beq.n	1635c <ll_scan_enable+0x38>
   1634e:	f013 0520 	ands.w	r5, r3, #32
   16352:	d003      	beq.n	1635c <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
   16354:	4630      	mov	r0, r6
   16356:	f000 fb9d 	bl	16a94 <ll_rl_rpa_update>
		rpa_gen = 1;
   1635a:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1635c:	7926      	ldrb	r6, [r4, #4]
   1635e:	f006 070f 	and.w	r7, r6, #15
   16362:	f3c6 1600 	ubfx	r6, r6, #4, #1
   16366:	2100      	movs	r1, #0
   16368:	4630      	mov	r0, r6
   1636a:	f7f5 fcbf 	bl	bcec <ll_addr_get>
   1636e:	22ff      	movs	r2, #255	; 0xff
   16370:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
   16372:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   16374:	8823      	ldrh	r3, [r4, #0]
   16376:	9502      	str	r5, [sp, #8]
   16378:	0992      	lsrs	r2, r2, #6
   1637a:	9201      	str	r2, [sp, #4]
   1637c:	8862      	ldrh	r2, [r4, #2]
   1637e:	9200      	str	r2, [sp, #0]
   16380:	4631      	mov	r1, r6
   16382:	4602      	mov	r2, r0
   16384:	4638      	mov	r0, r7
   16386:	f7fe ffef 	bl	15368 <radio_scan_enable>
}
   1638a:	b005      	add	sp, #20
   1638c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   1638e:	2000      	movs	r0, #0
   16390:	e7fb      	b.n	1638a <ll_scan_enable+0x66>
   16392:	bf00      	nop
   16394:	20002780 	.word	0x20002780

00016398 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   16398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1639c:	b085      	sub	sp, #20
   1639e:	461e      	mov	r6, r3
   163a0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   163a4:	9303      	str	r3, [sp, #12]
   163a6:	4680      	mov	r8, r0
   163a8:	4689      	mov	r9, r1
   163aa:	4615      	mov	r5, r2
   163ac:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   163ae:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   163b2:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
   163b6:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
   163ba:	f7fd fdb5 	bl	13f28 <ll_scan_is_enabled>
   163be:	9b03      	ldr	r3, [sp, #12]
   163c0:	bba0      	cbnz	r0, 1642c <ll_create_connection+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   163c2:	9300      	str	r3, [sp, #0]
   163c4:	4652      	mov	r2, sl
   163c6:	465b      	mov	r3, fp
   163c8:	4639      	mov	r1, r7
   163ca:	4630      	mov	r0, r6
   163cc:	f7fd fdd0 	bl	13f70 <radio_connect_enable>
				      latency, timeout);

	if (status) {
   163d0:	bb68      	cbnz	r0, 1642e <ll_create_connection+0x96>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
   163d2:	4628      	mov	r0, r5
   163d4:	f000 f9c4 	bl	16760 <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
   163d8:	b1dd      	cbz	r5, 16412 <ll_create_connection+0x7a>
	u8_t  rl_idx = FILTER_IDX_NONE;
   163da:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   163dc:	1ea3      	subs	r3, r4, #2
   163de:	2b01      	cmp	r3, #1
   163e0:	d822      	bhi.n	16428 <ll_create_connection+0x90>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
   163e2:	2000      	movs	r0, #0
   163e4:	f000 fb56 	bl	16a94 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   163e8:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   163ec:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
   163ee:	2100      	movs	r1, #0
   163f0:	4620      	mov	r0, r4
   163f2:	f7f5 fc7b 	bl	bcec <ll_addr_get>
   163f6:	4643      	mov	r3, r8
   163f8:	4602      	mov	r2, r0
   163fa:	4621      	mov	r1, r4
   163fc:	2000      	movs	r0, #0
   163fe:	9711      	str	r7, [sp, #68]	; 0x44
   16400:	9610      	str	r6, [sp, #64]	; 0x40
   16402:	950f      	str	r5, [sp, #60]	; 0x3c
   16404:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   16408:	b005      	add	sp, #20
   1640a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
   1640e:	f7fe bfab 	b.w	15368 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
   16412:	f000 fae1 	bl	169d8 <ctrl_rl_enabled>
   16416:	2800      	cmp	r0, #0
   16418:	d0df      	beq.n	163da <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   1641a:	4639      	mov	r1, r7
   1641c:	462a      	mov	r2, r5
   1641e:	4630      	mov	r0, r6
   16420:	f000 f9b4 	bl	1678c <ll_rl_find>
   16424:	4607      	mov	r7, r0
   16426:	e7d9      	b.n	163dc <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
   16428:	2600      	movs	r6, #0
   1642a:	e7e0      	b.n	163ee <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1642c:	200c      	movs	r0, #12
}
   1642e:	b005      	add	sp, #20
   16430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016434 <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   16434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16438:	4688      	mov	r8, r1
	int i;

	if (free) {
   1643a:	4615      	mov	r5, r2
   1643c:	b10a      	cbz	r2, 16442 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   1643e:	23ff      	movs	r3, #255	; 0xff
   16440:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   16442:	4e14      	ldr	r6, [pc, #80]	; (16494 <wl_find+0x60>)
{
   16444:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   16446:	f000 0701 	and.w	r7, r0, #1
   1644a:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   1644e:	07da      	lsls	r2, r3, #31
   16450:	d51d      	bpl.n	1648e <wl_find+0x5a>
   16452:	f3c3 0340 	ubfx	r3, r3, #1, #1
   16456:	42bb      	cmp	r3, r7
   16458:	d113      	bne.n	16482 <wl_find+0x4e>
   1645a:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
   1645e:	2206      	movs	r2, #6
   16460:	4641      	mov	r1, r8
   16462:	3002      	adds	r0, #2
   16464:	f7ea f97d 	bl	762 <memcmp>
   16468:	b910      	cbnz	r0, 16470 <wl_find+0x3c>
			return i;
   1646a:	b2e0      	uxtb	r0, r4
   1646c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   16470:	b13d      	cbz	r5, 16482 <wl_find+0x4e>
   16472:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   16476:	07db      	lsls	r3, r3, #31
   16478:	d403      	bmi.n	16482 <wl_find+0x4e>
   1647a:	782b      	ldrb	r3, [r5, #0]
   1647c:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   1647e:	bf08      	it	eq
   16480:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   16482:	3401      	adds	r4, #1
   16484:	2c08      	cmp	r4, #8
   16486:	d1e0      	bne.n	1644a <wl_find+0x16>
		}
	}

	return FILTER_IDX_NONE;
   16488:	20ff      	movs	r0, #255	; 0xff
   1648a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   1648e:	2d00      	cmp	r5, #0
   16490:	d1f3      	bne.n	1647a <wl_find+0x46>
   16492:	e7f6      	b.n	16482 <wl_find+0x4e>
   16494:	200029b3 	.word	0x200029b3

00016498 <filter_rl_update>:
		}
	}
}

static void filter_rl_update(void)
{
   16498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	filter->enable_bitmask = 0;
   1649c:	4d12      	ldr	r5, [pc, #72]	; (164e8 <filter_rl_update+0x50>)

	/* No whitelist: populate filter from rl peers */
	filter_clear(&rl_filter);

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if (rl[i].taken) {
   1649e:	4e13      	ldr	r6, [pc, #76]	; (164ec <filter_rl_update+0x54>)
	filter->enable_bitmask = 0;
   164a0:	2400      	movs	r4, #0
   164a2:	702c      	strb	r4, [r5, #0]
	filter->addr_type_bitmask = 0;
   164a4:	706c      	strb	r4, [r5, #1]
		if (rl[i].taken) {
   164a6:	2728      	movs	r7, #40	; 0x28
	filter->enable_bitmask |= BIT(index);
   164a8:	f04f 0801 	mov.w	r8, #1
		if (rl[i].taken) {
   164ac:	fb07 f104 	mul.w	r1, r7, r4
   164b0:	5c73      	ldrb	r3, [r6, r1]
   164b2:	07da      	lsls	r2, r3, #31
   164b4:	d512      	bpl.n	164dc <filter_rl_update+0x44>
	filter->enable_bitmask |= BIT(index);
   164b6:	7828      	ldrb	r0, [r5, #0]
   164b8:	fa08 f204 	lsl.w	r2, r8, r4
   164bc:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   164be:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   164c2:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   164c4:	786a      	ldrb	r2, [r5, #1]
   164c6:	40a3      	lsls	r3, r4
   164c8:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   164ca:	2206      	movs	r2, #6
   164cc:	3101      	adds	r1, #1
   164ce:	fb02 5004 	mla	r0, r2, r4, r5
   164d2:	4431      	add	r1, r6
   164d4:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   164d6:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   164d8:	f7ea f970 	bl	7bc <memcpy>
   164dc:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   164de:	2c08      	cmp	r4, #8
   164e0:	d1e4      	bne.n	164ac <filter_rl_update+0x14>
				      rl[i].id_addr.val);
		}
	}
}
   164e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   164e6:	bf00      	nop
   164e8:	20002981 	.word	0x20002981
   164ec:	20002840 	.word	0x20002840

000164f0 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
   164f0:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
   164f2:	f7fd fd03 	bl	13efc <ll_adv_is_enabled>
   164f6:	b928      	cbnz	r0, 16504 <rl_access_check.constprop.1+0x14>
   164f8:	f7fd fd16 	bl	13f28 <ll_scan_is_enabled>
   164fc:	fab0 f080 	clz	r0, r0
   16500:	0940      	lsrs	r0, r0, #5
   16502:	bd08      	pop	{r3, pc}
   16504:	2000      	movs	r0, #0
}
   16506:	bd08      	pop	{r3, pc}

00016508 <filter_wl_update>:
{
   16508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1650c:	4e1b      	ldr	r6, [pc, #108]	; (1657c <filter_wl_update+0x74>)
	filter->enable_bitmask = 0;
   1650e:	4d1c      	ldr	r5, [pc, #112]	; (16580 <filter_wl_update+0x78>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   16510:	f8df 9074 	ldr.w	r9, [pc, #116]	; 16588 <filter_wl_update+0x80>
	filter->enable_bitmask = 0;
   16514:	2400      	movs	r4, #0
		if (!wl[i].taken) {
   16516:	1eb7      	subs	r7, r6, #2
	filter->enable_bitmask = 0;
   16518:	702c      	strb	r4, [r5, #0]
	filter->addr_type_bitmask = 0;
   1651a:	706c      	strb	r4, [r5, #1]
   1651c:	46b8      	mov	r8, r7
		if (!wl[i].taken) {
   1651e:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   16522:	07d9      	lsls	r1, r3, #31
   16524:	d523      	bpl.n	1656e <filter_wl_update+0x66>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   16526:	f899 3000 	ldrb.w	r3, [r9]
   1652a:	b15b      	cbz	r3, 16544 <filter_wl_update+0x3c>
		j = wl[i].rl_idx;
   1652c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   16530:	2a07      	cmp	r2, #7
   16532:	d807      	bhi.n	16544 <filter_wl_update+0x3c>
   16534:	2328      	movs	r3, #40	; 0x28
   16536:	4353      	muls	r3, r2
   16538:	4a12      	ldr	r2, [pc, #72]	; (16584 <filter_wl_update+0x7c>)
   1653a:	5cd3      	ldrb	r3, [r2, r3]
   1653c:	075a      	lsls	r2, r3, #29
   1653e:	d501      	bpl.n	16544 <filter_wl_update+0x3c>
   16540:	06db      	lsls	r3, r3, #27
   16542:	d514      	bpl.n	1656e <filter_wl_update+0x66>
	filter->enable_bitmask |= BIT(index);
   16544:	2201      	movs	r2, #1
   16546:	fa02 f104 	lsl.w	r1, r2, r4
   1654a:	782a      	ldrb	r2, [r5, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1654c:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   16550:	430a      	orrs	r2, r1
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   16552:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   16556:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   16558:	786a      	ldrb	r2, [r5, #1]
   1655a:	40a3      	lsls	r3, r4
   1655c:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1655e:	2206      	movs	r2, #6
   16560:	fb02 5004 	mla	r0, r2, r4, r5
   16564:	4631      	mov	r1, r6
   16566:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   16568:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1656a:	f7ea f927 	bl	7bc <memcpy>
   1656e:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
   16570:	2c08      	cmp	r4, #8
   16572:	f106 0608 	add.w	r6, r6, #8
   16576:	d1d2      	bne.n	1651e <filter_wl_update+0x16>
}
   16578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1657c:	200029b5 	.word	0x200029b5
   16580:	200029f3 	.word	0x200029f3
   16584:	20002840 	.word	0x20002840
   16588:	20002980 	.word	0x20002980

0001658c <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   1658c:	2807      	cmp	r0, #7
   1658e:	d80c      	bhi.n	165aa <ctrl_lrpa_get+0x1e>
   16590:	2328      	movs	r3, #40	; 0x28
   16592:	4358      	muls	r0, r3
   16594:	4a06      	ldr	r2, [pc, #24]	; (165b0 <ctrl_lrpa_get+0x24>)
   16596:	5c13      	ldrb	r3, [r2, r0]
   16598:	1811      	adds	r1, r2, r0
   1659a:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1659e:	b128      	cbz	r0, 165ac <ctrl_lrpa_get+0x20>
   165a0:	f3c3 0040 	ubfx	r0, r3, #1, #1
   165a4:	b110      	cbz	r0, 165ac <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   165a6:	6a48      	ldr	r0, [r1, #36]	; 0x24
   165a8:	4770      	bx	lr
		return NULL;
   165aa:	2000      	movs	r0, #0
}
   165ac:	4770      	bx	lr
   165ae:	bf00      	nop
   165b0:	20002840 	.word	0x20002840

000165b4 <ctrl_irks_get>:
	*count = peer_irk_count;
   165b4:	4b02      	ldr	r3, [pc, #8]	; (165c0 <ctrl_irks_get+0xc>)
   165b6:	781b      	ldrb	r3, [r3, #0]
   165b8:	7003      	strb	r3, [r0, #0]
}
   165ba:	4802      	ldr	r0, [pc, #8]	; (165c4 <ctrl_irks_get+0x10>)
   165bc:	4770      	bx	lr
   165be:	bf00      	nop
   165c0:	200027b6 	.word	0x200027b6
   165c4:	200027bf 	.word	0x200027bf

000165c8 <ctrl_rl_idx>:
	if (whitelist) {
   165c8:	b188      	cbz	r0, 165ee <ctrl_rl_idx+0x26>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   165ca:	2907      	cmp	r1, #7
   165cc:	d905      	bls.n	165da <ctrl_rl_idx+0x12>
		LL_ASSERT(rl[i].taken);
   165ce:	4040      	eors	r0, r0
   165d0:	f380 8811 	msr	BASEPRI, r0
   165d4:	f04f 0004 	mov.w	r0, #4
   165d8:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
   165da:	4b09      	ldr	r3, [pc, #36]	; (16600 <ctrl_rl_idx+0x38>)
   165dc:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
   165e0:	07d2      	lsls	r2, r2, #31
   165e2:	d5f4      	bpl.n	165ce <ctrl_rl_idx+0x6>
		i = wl[devmatch_id].rl_idx;
   165e4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   165e8:	7849      	ldrb	r1, [r1, #1]
}
   165ea:	4608      	mov	r0, r1
   165ec:	4770      	bx	lr
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   165ee:	2907      	cmp	r1, #7
   165f0:	d8ed      	bhi.n	165ce <ctrl_rl_idx+0x6>
		LL_ASSERT(rl[i].taken);
   165f2:	2328      	movs	r3, #40	; 0x28
   165f4:	434b      	muls	r3, r1
   165f6:	4a03      	ldr	r2, [pc, #12]	; (16604 <ctrl_rl_idx+0x3c>)
   165f8:	5cd3      	ldrb	r3, [r2, r3]
   165fa:	07db      	lsls	r3, r3, #31
   165fc:	d4f5      	bmi.n	165ea <ctrl_rl_idx+0x22>
   165fe:	e7e6      	b.n	165ce <ctrl_rl_idx+0x6>
   16600:	200029b3 	.word	0x200029b3
   16604:	20002840 	.word	0x20002840

00016608 <ctrl_rl_irk_idx>:
	LL_ASSERT(irkmatch_id < peer_irk_count);
   16608:	4b0a      	ldr	r3, [pc, #40]	; (16634 <ctrl_rl_irk_idx+0x2c>)
   1660a:	781b      	ldrb	r3, [r3, #0]
   1660c:	4283      	cmp	r3, r0
   1660e:	d805      	bhi.n	1661c <ctrl_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   16610:	4040      	eors	r0, r0
   16612:	f380 8811 	msr	BASEPRI, r0
   16616:	f04f 0004 	mov.w	r0, #4
   1661a:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   1661c:	4b06      	ldr	r3, [pc, #24]	; (16638 <ctrl_rl_irk_idx+0x30>)
   1661e:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   16620:	2807      	cmp	r0, #7
   16622:	d8f5      	bhi.n	16610 <ctrl_rl_irk_idx+0x8>
	LL_ASSERT(rl[i].taken);
   16624:	2328      	movs	r3, #40	; 0x28
   16626:	4343      	muls	r3, r0
   16628:	4a04      	ldr	r2, [pc, #16]	; (1663c <ctrl_rl_irk_idx+0x34>)
   1662a:	5cd3      	ldrb	r3, [r2, r3]
   1662c:	07db      	lsls	r3, r3, #31
   1662e:	d5ef      	bpl.n	16610 <ctrl_rl_irk_idx+0x8>
}
   16630:	4770      	bx	lr
   16632:	bf00      	nop
   16634:	200027b6 	.word	0x200027b6
   16638:	200027b7 	.word	0x200027b7
   1663c:	20002840 	.word	0x20002840

00016640 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   16640:	2807      	cmp	r0, #7
   16642:	d80e      	bhi.n	16662 <ctrl_irk_whitelisted+0x22>
	LL_ASSERT(rl[rl_idx].taken);
   16644:	2328      	movs	r3, #40	; 0x28
   16646:	4358      	muls	r0, r3
   16648:	4b07      	ldr	r3, [pc, #28]	; (16668 <ctrl_irk_whitelisted+0x28>)
   1664a:	5c18      	ldrb	r0, [r3, r0]
   1664c:	07c3      	lsls	r3, r0, #31
   1664e:	d405      	bmi.n	1665c <ctrl_irk_whitelisted+0x1c>
   16650:	4040      	eors	r0, r0
   16652:	f380 8811 	msr	BASEPRI, r0
   16656:	f04f 0004 	mov.w	r0, #4
   1665a:	df02      	svc	2
	return rl[rl_idx].wl;
   1665c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   16660:	4770      	bx	lr
		return false;
   16662:	2000      	movs	r0, #0
}
   16664:	4770      	bx	lr
   16666:	bf00      	nop
   16668:	20002840 	.word	0x20002840

0001666c <ctrl_filter_get>:
}
   1666c:	4b03      	ldr	r3, [pc, #12]	; (1667c <ctrl_filter_get+0x10>)
   1666e:	4a04      	ldr	r2, [pc, #16]	; (16680 <ctrl_filter_get+0x14>)
   16670:	2800      	cmp	r0, #0
   16672:	bf14      	ite	ne
   16674:	4610      	movne	r0, r2
   16676:	4618      	moveq	r0, r3
   16678:	4770      	bx	lr
   1667a:	bf00      	nop
   1667c:	20002981 	.word	0x20002981
   16680:	200029f3 	.word	0x200029f3

00016684 <ll_wl_size_get>:
   16684:	2008      	movs	r0, #8
   16686:	4770      	bx	lr

00016688 <ll_wl_clear>:
{
   16688:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1668a:	f7fd fc3f 	bl	13f0c <radio_adv_filter_pol_get>
   1668e:	4604      	mov	r4, r0
   16690:	b110      	cbz	r0, 16698 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   16692:	240c      	movs	r4, #12
}
   16694:	4620      	mov	r0, r4
   16696:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   16698:	f7fd fc5c 	bl	13f54 <radio_scan_filter_pol_get>
   1669c:	07c3      	lsls	r3, r0, #31
   1669e:	d4f8      	bmi.n	16692 <ll_wl_clear+0xa>
		wl[i].taken = 0;
   166a0:	4a07      	ldr	r2, [pc, #28]	; (166c0 <ll_wl_clear+0x38>)
   166a2:	4623      	mov	r3, r4
   166a4:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   166a8:	f36f 0100 	bfc	r1, #0, #1
   166ac:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   166b0:	3301      	adds	r3, #1
   166b2:	2b08      	cmp	r3, #8
   166b4:	d1f6      	bne.n	166a4 <ll_wl_clear+0x1c>
	wl_anon = 0;
   166b6:	4b03      	ldr	r3, [pc, #12]	; (166c4 <ll_wl_clear+0x3c>)
   166b8:	2200      	movs	r2, #0
   166ba:	701a      	strb	r2, [r3, #0]
	return 0;
   166bc:	e7ea      	b.n	16694 <ll_wl_clear+0xc>
   166be:	bf00      	nop
   166c0:	200029b3 	.word	0x200029b3
   166c4:	20004b90 	.word	0x20004b90

000166c8 <ll_wl_remove>:
{
   166c8:	b538      	push	{r3, r4, r5, lr}
   166ca:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   166cc:	f7fd fc1e 	bl	13f0c <radio_adv_filter_pol_get>
   166d0:	4604      	mov	r4, r0
   166d2:	b110      	cbz	r0, 166da <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   166d4:	240c      	movs	r4, #12
}
   166d6:	4620      	mov	r0, r4
   166d8:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   166da:	f7fd fc3b 	bl	13f54 <radio_scan_filter_pol_get>
   166de:	07c3      	lsls	r3, r0, #31
   166e0:	d4f8      	bmi.n	166d4 <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   166e2:	7828      	ldrb	r0, [r5, #0]
   166e4:	28ff      	cmp	r0, #255	; 0xff
   166e6:	d102      	bne.n	166ee <ll_wl_remove+0x26>
		wl_anon = 0;
   166e8:	4b0f      	ldr	r3, [pc, #60]	; (16728 <ll_wl_remove+0x60>)
   166ea:	701c      	strb	r4, [r3, #0]
		return 0;
   166ec:	e7f3      	b.n	166d6 <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   166ee:	4622      	mov	r2, r4
   166f0:	1c69      	adds	r1, r5, #1
   166f2:	f7ff fe9f 	bl	16434 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   166f6:	2807      	cmp	r0, #7
   166f8:	d813      	bhi.n	16722 <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
   166fa:	4b0c      	ldr	r3, [pc, #48]	; (1672c <ll_wl_remove+0x64>)
   166fc:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   16700:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   16702:	2d07      	cmp	r5, #7
   16704:	d806      	bhi.n	16714 <ll_wl_remove+0x4c>
			rl[j].wl = 0;
   16706:	2228      	movs	r2, #40	; 0x28
   16708:	4909      	ldr	r1, [pc, #36]	; (16730 <ll_wl_remove+0x68>)
   1670a:	436a      	muls	r2, r5
   1670c:	5c8d      	ldrb	r5, [r1, r2]
   1670e:	f364 1545 	bfi	r5, r4, #5, #1
   16712:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
   16714:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   16718:	f36f 0200 	bfc	r2, #0, #1
   1671c:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
   16720:	e7d9      	b.n	166d6 <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16722:	2402      	movs	r4, #2
   16724:	e7d7      	b.n	166d6 <ll_wl_remove+0xe>
   16726:	bf00      	nop
   16728:	20004b90 	.word	0x20004b90
   1672c:	200029b3 	.word	0x200029b3
   16730:	20002840 	.word	0x20002840

00016734 <ll_filters_adv_update>:
{
   16734:	b508      	push	{r3, lr}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   16736:	b128      	cbz	r0, 16744 <ll_filters_adv_update+0x10>
   16738:	f7fd fc0c 	bl	13f54 <radio_scan_filter_pol_get>
   1673c:	07c3      	lsls	r3, r0, #31
   1673e:	d401      	bmi.n	16744 <ll_filters_adv_update+0x10>
		filter_wl_update();
   16740:	f7ff fee2 	bl	16508 <filter_wl_update>
	if (rl_enable && !ll_scan_is_enabled()) {
   16744:	4b05      	ldr	r3, [pc, #20]	; (1675c <ll_filters_adv_update+0x28>)
   16746:	781b      	ldrb	r3, [r3, #0]
   16748:	b133      	cbz	r3, 16758 <ll_filters_adv_update+0x24>
   1674a:	f7fd fbed 	bl	13f28 <ll_scan_is_enabled>
   1674e:	b918      	cbnz	r0, 16758 <ll_filters_adv_update+0x24>
}
   16750:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   16754:	f7ff bea0 	b.w	16498 <filter_rl_update>
   16758:	bd08      	pop	{r3, pc}
   1675a:	bf00      	nop
   1675c:	20002980 	.word	0x20002980

00016760 <ll_filters_scan_update>:
{
   16760:	b508      	push	{r3, lr}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   16762:	07c3      	lsls	r3, r0, #31
   16764:	d504      	bpl.n	16770 <ll_filters_scan_update+0x10>
   16766:	f7fd fbd1 	bl	13f0c <radio_adv_filter_pol_get>
   1676a:	b908      	cbnz	r0, 16770 <ll_filters_scan_update+0x10>
		filter_wl_update();
   1676c:	f7ff fecc 	bl	16508 <filter_wl_update>
	if (rl_enable && !ll_adv_is_enabled()) {
   16770:	4b05      	ldr	r3, [pc, #20]	; (16788 <ll_filters_scan_update+0x28>)
   16772:	781b      	ldrb	r3, [r3, #0]
   16774:	b133      	cbz	r3, 16784 <ll_filters_scan_update+0x24>
   16776:	f7fd fbc1 	bl	13efc <ll_adv_is_enabled>
   1677a:	b918      	cbnz	r0, 16784 <ll_filters_scan_update+0x24>
}
   1677c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   16780:	f7ff be8a 	b.w	16498 <filter_rl_update>
   16784:	bd08      	pop	{r3, pc}
   16786:	bf00      	nop
   16788:	20002980 	.word	0x20002980

0001678c <ll_rl_find>:
{
   1678c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16790:	468a      	mov	sl, r1
	if (free) {
   16792:	4614      	mov	r4, r2
   16794:	b10a      	cbz	r2, 1679a <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   16796:	23ff      	movs	r3, #255	; 0xff
   16798:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1679a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 167f0 <ll_rl_find+0x64>
{
   1679e:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   167a0:	f000 0901 	and.w	r9, r0, #1
   167a4:	2628      	movs	r6, #40	; 0x28
   167a6:	436e      	muls	r6, r5
   167a8:	b2ef      	uxtb	r7, r5
   167aa:	f818 3006 	ldrb.w	r3, [r8, r6]
   167ae:	07da      	lsls	r2, r3, #31
   167b0:	d51a      	bpl.n	167e8 <ll_rl_find+0x5c>
   167b2:	f3c3 1380 	ubfx	r3, r3, #6, #1
   167b6:	454b      	cmp	r3, r9
   167b8:	d10f      	bne.n	167da <ll_rl_find+0x4e>
   167ba:	1c70      	adds	r0, r6, #1
   167bc:	2206      	movs	r2, #6
   167be:	4651      	mov	r1, sl
   167c0:	4440      	add	r0, r8
   167c2:	f7e9 ffce 	bl	762 <memcmp>
   167c6:	b160      	cbz	r0, 167e2 <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   167c8:	b13c      	cbz	r4, 167da <ll_rl_find+0x4e>
   167ca:	f818 3006 	ldrb.w	r3, [r8, r6]
   167ce:	07db      	lsls	r3, r3, #31
   167d0:	d403      	bmi.n	167da <ll_rl_find+0x4e>
   167d2:	7823      	ldrb	r3, [r4, #0]
   167d4:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   167d6:	bf08      	it	eq
   167d8:	7027      	strbeq	r7, [r4, #0]
   167da:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   167dc:	2d08      	cmp	r5, #8
   167de:	d1e1      	bne.n	167a4 <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
   167e0:	27ff      	movs	r7, #255	; 0xff
}
   167e2:	4638      	mov	r0, r7
   167e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   167e8:	2c00      	cmp	r4, #0
   167ea:	d1f2      	bne.n	167d2 <ll_rl_find+0x46>
   167ec:	e7f5      	b.n	167da <ll_rl_find+0x4e>
   167ee:	bf00      	nop
   167f0:	20002840 	.word	0x20002840

000167f4 <ll_wl_add>:
{
   167f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   167f8:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   167fa:	f7fd fb87 	bl	13f0c <radio_adv_filter_pol_get>
   167fe:	4605      	mov	r5, r0
   16800:	b120      	cbz	r0, 1680c <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   16802:	250c      	movs	r5, #12
}
   16804:	4628      	mov	r0, r5
   16806:	b002      	add	sp, #8
   16808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1680c:	f7fd fba2 	bl	13f54 <radio_scan_filter_pol_get>
   16810:	07c3      	lsls	r3, r0, #31
   16812:	d4f6      	bmi.n	16802 <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   16814:	7838      	ldrb	r0, [r7, #0]
   16816:	28ff      	cmp	r0, #255	; 0xff
   16818:	d103      	bne.n	16822 <ll_wl_add+0x2e>
		wl_anon = 1;
   1681a:	4b1f      	ldr	r3, [pc, #124]	; (16898 <ll_wl_add+0xa4>)
   1681c:	2201      	movs	r2, #1
   1681e:	701a      	strb	r2, [r3, #0]
		return 0;
   16820:	e7f0      	b.n	16804 <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   16822:	f107 0801 	add.w	r8, r7, #1
   16826:	f10d 0207 	add.w	r2, sp, #7
   1682a:	4641      	mov	r1, r8
   1682c:	f7ff fe02 	bl	16434 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   16830:	2807      	cmp	r0, #7
   16832:	d92d      	bls.n	16890 <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
   16834:	f89d 6007 	ldrb.w	r6, [sp, #7]
   16838:	2e07      	cmp	r6, #7
   1683a:	d82b      	bhi.n	16894 <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
   1683c:	4c17      	ldr	r4, [pc, #92]	; (1689c <ll_wl_add+0xa8>)
   1683e:	783a      	ldrb	r2, [r7, #0]
   16840:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   16844:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   16848:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   1684c:	4641      	mov	r1, r8
   1684e:	2206      	movs	r2, #6
   16850:	3002      	adds	r0, #2
   16852:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   16856:	f7e9 ffb1 	bl	7bc <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1685a:	462a      	mov	r2, r5
   1685c:	4641      	mov	r1, r8
   1685e:	7838      	ldrb	r0, [r7, #0]
   16860:	f7ff ff94 	bl	1678c <ll_rl_find>
   16864:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
   16866:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   16868:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
   1686a:	d80e      	bhi.n	1688a <ll_wl_add+0x96>
		wl[i].rl_idx = j;
   1686c:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   1686e:	2328      	movs	r3, #40	; 0x28
   16870:	4a0b      	ldr	r2, [pc, #44]	; (168a0 <ll_wl_add+0xac>)
   16872:	4358      	muls	r0, r3
   16874:	5c13      	ldrb	r3, [r2, r0]
   16876:	f043 0320 	orr.w	r3, r3, #32
   1687a:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
   1687c:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   16880:	f043 0301 	orr.w	r3, r3, #1
   16884:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   16888:	e7bc      	b.n	16804 <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
   1688a:	22ff      	movs	r2, #255	; 0xff
   1688c:	705a      	strb	r2, [r3, #1]
   1688e:	e7f5      	b.n	1687c <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
   16890:	2512      	movs	r5, #18
   16892:	e7b7      	b.n	16804 <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   16894:	2507      	movs	r5, #7
	return wl_add(addr);
   16896:	e7b5      	b.n	16804 <ll_wl_add+0x10>
   16898:	20004b90 	.word	0x20004b90
   1689c:	200029b3 	.word	0x200029b3
   168a0:	20002840 	.word	0x20002840

000168a4 <ctrl_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   168a4:	4b0c      	ldr	r3, [pc, #48]	; (168d8 <ctrl_rl_idx_allowed+0x34>)
   168a6:	781b      	ldrb	r3, [r3, #0]
   168a8:	b19b      	cbz	r3, 168d2 <ctrl_rl_idx_allowed+0x2e>
   168aa:	2907      	cmp	r1, #7
   168ac:	d811      	bhi.n	168d2 <ctrl_rl_idx_allowed+0x2e>
   168ae:	b980      	cbnz	r0, 168d2 <ctrl_rl_idx_allowed+0x2e>
	LL_ASSERT(rl[rl_idx].taken);
   168b0:	2328      	movs	r3, #40	; 0x28
   168b2:	4359      	muls	r1, r3
   168b4:	4b09      	ldr	r3, [pc, #36]	; (168dc <ctrl_rl_idx_allowed+0x38>)
   168b6:	5c58      	ldrb	r0, [r3, r1]
   168b8:	07c2      	lsls	r2, r0, #31
   168ba:	d405      	bmi.n	168c8 <ctrl_rl_idx_allowed+0x24>
   168bc:	4040      	eors	r0, r0
   168be:	f380 8811 	msr	BASEPRI, r0
   168c2:	f04f 0004 	mov.w	r0, #4
   168c6:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   168c8:	0743      	lsls	r3, r0, #29
   168ca:	d502      	bpl.n	168d2 <ctrl_rl_idx_allowed+0x2e>
   168cc:	f3c0 1000 	ubfx	r0, r0, #4, #1
   168d0:	4770      	bx	lr
		return true;
   168d2:	2001      	movs	r0, #1
}
   168d4:	4770      	bx	lr
   168d6:	bf00      	nop
   168d8:	20002980 	.word	0x20002980
   168dc:	20002840 	.word	0x20002840

000168e0 <ll_rl_id_addr_get>:
{
   168e0:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   168e2:	2b07      	cmp	r3, #7
{
   168e4:	b430      	push	{r4, r5}
   168e6:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   168e8:	d905      	bls.n	168f6 <ll_rl_id_addr_get+0x16>
	LL_ASSERT(rl[rl_idx].taken);
   168ea:	4040      	eors	r0, r0
   168ec:	f380 8811 	msr	BASEPRI, r0
   168f0:	f04f 0004 	mov.w	r0, #4
   168f4:	df02      	svc	2
   168f6:	2528      	movs	r5, #40	; 0x28
   168f8:	4c08      	ldr	r4, [pc, #32]	; (1691c <ll_rl_id_addr_get+0x3c>)
   168fa:	fb05 f203 	mul.w	r2, r5, r3
   168fe:	5ca2      	ldrb	r2, [r4, r2]
   16900:	f012 0f01 	tst.w	r2, #1
   16904:	d0f1      	beq.n	168ea <ll_rl_id_addr_get+0xa>
	*id_addr_type = rl[rl_idx].id_addr_type;
   16906:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1690a:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1690c:	fb05 4103 	mla	r1, r5, r3, r4
   16910:	2206      	movs	r2, #6
   16912:	3101      	adds	r1, #1
}
   16914:	bc30      	pop	{r4, r5}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   16916:	f7e9 bf51 	b.w	7bc <memcpy>
   1691a:	bf00      	nop
   1691c:	20002840 	.word	0x20002840

00016920 <ctrl_rl_addr_allowed>:
{
   16920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   16924:	4b1a      	ldr	r3, [pc, #104]	; (16990 <ctrl_rl_addr_allowed+0x70>)
   16926:	781b      	ldrb	r3, [r3, #0]
   16928:	b37b      	cbz	r3, 1698a <ctrl_rl_addr_allowed+0x6a>
   1692a:	7813      	ldrb	r3, [r2, #0]
   1692c:	2bff      	cmp	r3, #255	; 0xff
   1692e:	d12c      	bne.n	1698a <ctrl_rl_addr_allowed+0x6a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   16930:	4e18      	ldr	r6, [pc, #96]	; (16994 <ctrl_rl_addr_allowed+0x74>)
   16932:	2400      	movs	r4, #0
   16934:	f04f 0828 	mov.w	r8, #40	; 0x28
   16938:	46b6      	mov	lr, r6
   1693a:	fb08 f304 	mul.w	r3, r8, r4
   1693e:	fa5f fc84 	uxtb.w	ip, r4
   16942:	5cf7      	ldrb	r7, [r6, r3]
   16944:	f017 0f01 	tst.w	r7, #1
   16948:	eb06 0503 	add.w	r5, r6, r3
   1694c:	d01a      	beq.n	16984 <ctrl_rl_addr_allowed+0x64>
   1694e:	f3c7 1780 	ubfx	r7, r7, #6, #1
   16952:	4287      	cmp	r7, r0
   16954:	d116      	bne.n	16984 <ctrl_rl_addr_allowed+0x64>
   16956:	3306      	adds	r3, #6
   16958:	1e4f      	subs	r7, r1, #1
   1695a:	4433      	add	r3, r6
				if (addr[j] != id_addr[j]) {
   1695c:	f815 af01 	ldrb.w	sl, [r5, #1]!
   16960:	f817 9f01 	ldrb.w	r9, [r7, #1]!
   16964:	45ca      	cmp	sl, r9
   16966:	d10d      	bne.n	16984 <ctrl_rl_addr_allowed+0x64>
			for (j = 0; j < BDADDR_SIZE; j++) {
   16968:	429d      	cmp	r5, r3
   1696a:	d1f7      	bne.n	1695c <ctrl_rl_addr_allowed+0x3c>
				return !rl[i].pirk || rl[i].dev;
   1696c:	2328      	movs	r3, #40	; 0x28
   1696e:	435c      	muls	r4, r3
				*rl_idx = i;
   16970:	f882 c000 	strb.w	ip, [r2]
				return !rl[i].pirk || rl[i].dev;
   16974:	f81e 0004 	ldrb.w	r0, [lr, r4]
   16978:	0743      	lsls	r3, r0, #29
   1697a:	d506      	bpl.n	1698a <ctrl_rl_addr_allowed+0x6a>
   1697c:	f3c0 1000 	ubfx	r0, r0, #4, #1
   16980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16984:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16986:	2c08      	cmp	r4, #8
   16988:	d1d7      	bne.n	1693a <ctrl_rl_addr_allowed+0x1a>
   1698a:	2001      	movs	r0, #1
}
   1698c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16990:	20002980 	.word	0x20002980
   16994:	20002840 	.word	0x20002840

00016998 <ctrl_rl_addr_resolve>:
{
   16998:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   1699a:	4c0d      	ldr	r4, [pc, #52]	; (169d0 <ctrl_rl_addr_resolve+0x38>)
   1699c:	7824      	ldrb	r4, [r4, #0]
   1699e:	b1a4      	cbz	r4, 169ca <ctrl_rl_addr_resolve+0x32>
   169a0:	2a07      	cmp	r2, #7
   169a2:	d812      	bhi.n	169ca <ctrl_rl_addr_resolve+0x32>
   169a4:	2528      	movs	r5, #40	; 0x28
   169a6:	4c0b      	ldr	r4, [pc, #44]	; (169d4 <ctrl_rl_addr_resolve+0x3c>)
   169a8:	fb05 f602 	mul.w	r6, r5, r2
   169ac:	5da6      	ldrb	r6, [r4, r6]
   169ae:	0736      	lsls	r6, r6, #28
   169b0:	d50b      	bpl.n	169ca <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   169b2:	b150      	cbz	r0, 169ca <ctrl_rl_addr_resolve+0x32>
   169b4:	794b      	ldrb	r3, [r1, #5]
   169b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   169ba:	2b40      	cmp	r3, #64	; 0x40
   169bc:	d105      	bne.n	169ca <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   169be:	fb05 4202 	mla	r2, r5, r2, r4
   169c2:	1dd0      	adds	r0, r2, #7
}
   169c4:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   169c6:	f7ec bdc4 	b.w	3552 <bt_rpa_irk_matches>
}
   169ca:	2000      	movs	r0, #0
   169cc:	bc70      	pop	{r4, r5, r6}
   169ce:	4770      	bx	lr
   169d0:	20002980 	.word	0x20002980
   169d4:	20002840 	.word	0x20002840

000169d8 <ctrl_rl_enabled>:
	return rl_enable;
   169d8:	4b02      	ldr	r3, [pc, #8]	; (169e4 <ctrl_rl_enabled+0xc>)
   169da:	7818      	ldrb	r0, [r3, #0]
}
   169dc:	3000      	adds	r0, #0
   169de:	bf18      	it	ne
   169e0:	2001      	movne	r0, #1
   169e2:	4770      	bx	lr
   169e4:	20002980 	.word	0x20002980

000169e8 <ll_rl_pdu_adv_update>:
{
   169e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   169ea:	4605      	mov	r5, r0
   169ec:	460c      	mov	r4, r1
				  &pdu->scan_rsp.addr[0] :
   169ee:	1c8f      	adds	r7, r1, #2
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   169f0:	f7fe ff1c 	bl	1582c <ll_adv_set_get>
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   169f4:	2d07      	cmp	r5, #7
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   169f6:	4606      	mov	r6, r0
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   169f8:	d832      	bhi.n	16a60 <ll_rl_pdu_adv_update+0x78>
   169fa:	2328      	movs	r3, #40	; 0x28
   169fc:	4a24      	ldr	r2, [pc, #144]	; (16a90 <ll_rl_pdu_adv_update+0xa8>)
   169fe:	436b      	muls	r3, r5
   16a00:	18d1      	adds	r1, r2, r3
   16a02:	5cd3      	ldrb	r3, [r2, r3]
   16a04:	071a      	lsls	r2, r3, #28
   16a06:	d52b      	bpl.n	16a60 <ll_rl_pdu_adv_update+0x78>
		LL_ASSERT(rl[idx].rpas_ready);
   16a08:	079b      	lsls	r3, r3, #30
   16a0a:	d405      	bmi.n	16a18 <ll_rl_pdu_adv_update+0x30>
   16a0c:	4040      	eors	r0, r0
   16a0e:	f380 8811 	msr	BASEPRI, r0
   16a12:	f04f 0004 	mov.w	r0, #4
   16a16:	df02      	svc	2
		pdu->tx_addr = 1;
   16a18:	7823      	ldrb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   16a1a:	6a49      	ldr	r1, [r1, #36]	; 0x24
		pdu->tx_addr = 1;
   16a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16a20:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   16a22:	2206      	movs	r2, #6
   16a24:	4638      	mov	r0, r7
   16a26:	f7e9 fec9 	bl	7bc <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   16a2a:	7823      	ldrb	r3, [r4, #0]
   16a2c:	f003 020f 	and.w	r2, r3, #15
   16a30:	2a01      	cmp	r2, #1
   16a32:	d12c      	bne.n	16a8e <ll_rl_pdu_adv_update+0xa6>
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   16a34:	2d07      	cmp	r5, #7
   16a36:	f104 0008 	add.w	r0, r4, #8
   16a3a:	d81e      	bhi.n	16a7a <ll_rl_pdu_adv_update+0x92>
   16a3c:	2228      	movs	r2, #40	; 0x28
   16a3e:	4914      	ldr	r1, [pc, #80]	; (16a90 <ll_rl_pdu_adv_update+0xa8>)
   16a40:	fb02 f705 	mul.w	r7, r2, r5
   16a44:	5dcf      	ldrb	r7, [r1, r7]
   16a46:	077f      	lsls	r7, r7, #29
   16a48:	d517      	bpl.n	16a7a <ll_rl_pdu_adv_update+0x92>
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   16a4a:	fb02 1105 	mla	r1, r2, r5, r1
			pdu->rx_addr = 1;
   16a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   16a52:	7023      	strb	r3, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   16a54:	2206      	movs	r2, #6
   16a56:	311e      	adds	r1, #30
}
   16a58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			memcpy(&pdu->direct_ind.tgt_addr[0],
   16a5c:	f7e9 beae 	b.w	7bc <memcpy>
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
   16a60:	7830      	ldrb	r0, [r6, #0]
   16a62:	7823      	ldrb	r3, [r4, #0]
   16a64:	f3c0 1041 	ubfx	r0, r0, #5, #2
   16a68:	f360 1386 	bfi	r3, r0, #6, #1
   16a6c:	7023      	strb	r3, [r4, #0]
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
   16a6e:	4639      	mov	r1, r7
   16a70:	f000 0001 	and.w	r0, r0, #1
   16a74:	f7f5 f93a 	bl	bcec <ll_addr_get>
   16a78:	e7d7      	b.n	16a2a <ll_rl_pdu_adv_update+0x42>
			pdu->rx_addr = ll_adv->id_addr_type;
   16a7a:	4631      	mov	r1, r6
   16a7c:	7822      	ldrb	r2, [r4, #0]
   16a7e:	f811 3b02 	ldrb.w	r3, [r1], #2
   16a82:	09db      	lsrs	r3, r3, #7
   16a84:	f363 12c7 	bfi	r2, r3, #7, #1
   16a88:	7022      	strb	r2, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   16a8a:	2206      	movs	r2, #6
   16a8c:	e7e4      	b.n	16a58 <ll_rl_pdu_adv_update+0x70>
   16a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16a90:	20002840 	.word	0x20002840

00016a94 <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
   16a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a98:	b087      	sub	sp, #28
   16a9a:	4680      	mov	r8, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   16a9c:	f00a f8b0 	bl	20c00 <_impl_k_uptime_get>
   16aa0:	e9cd 0100 	strd	r0, r1, [sp]
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   16aa4:	f1b8 0f00 	cmp.w	r8, #0
   16aa8:	d145      	bne.n	16b36 <ll_rl_rpa_update+0xa2>
   16aaa:	4b5e      	ldr	r3, [pc, #376]	; (16c24 <ll_rl_rpa_update+0x190>)
   16aac:	e9d3 0100 	ldrd	r0, r1, [r3]
   16ab0:	1c4c      	adds	r4, r1, #1
   16ab2:	bf08      	it	eq
   16ab4:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   16ab8:	d03d      	beq.n	16b36 <ll_rl_rpa_update+0xa2>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   16aba:	e9dd 3400 	ldrd	r3, r4, [sp]
   16abe:	1a1b      	subs	r3, r3, r0
   16ac0:	4618      	mov	r0, r3
   16ac2:	4b59      	ldr	r3, [pc, #356]	; (16c28 <ll_rl_rpa_update+0x194>)
   16ac4:	681a      	ldr	r2, [r3, #0]
   16ac6:	eb64 0401 	sbc.w	r4, r4, r1
   16aca:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   16acc:	4290      	cmp	r0, r2
   16ace:	eb74 0303 	sbcs.w	r3, r4, r3
   16ad2:	bfac      	ite	ge
   16ad4:	2601      	movge	r6, #1
   16ad6:	2600      	movlt	r6, #0
   16ad8:	4d54      	ldr	r5, [pc, #336]	; (16c2c <ll_rl_rpa_update+0x198>)
   16ada:	f8df b158 	ldr.w	fp, [pc, #344]	; 16c34 <ll_rl_rpa_update+0x1a0>
	BT_DBG("");

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   16ade:	f1a5 0907 	sub.w	r9, r5, #7
	bool all = timeout || (rpa_last_ms == -1) ||
   16ae2:	2400      	movs	r4, #0
   16ae4:	464f      	mov	r7, r9
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   16ae6:	2328      	movs	r3, #40	; 0x28
   16ae8:	4363      	muls	r3, r4
   16aea:	f819 3003 	ldrb.w	r3, [r9, r3]
   16aee:	07da      	lsls	r2, r3, #31
   16af0:	d540      	bpl.n	16b74 <ll_rl_rpa_update+0xe0>
   16af2:	b90e      	cbnz	r6, 16af8 <ll_rl_rpa_update+0x64>
   16af4:	0798      	lsls	r0, r3, #30
   16af6:	d43d      	bmi.n	16b74 <ll_rl_rpa_update+0xe0>

			if (rl[i].pirk) {
   16af8:	2328      	movs	r3, #40	; 0x28
   16afa:	4363      	muls	r3, r4
   16afc:	5cfb      	ldrb	r3, [r7, r3]
   16afe:	0759      	lsls	r1, r3, #29
   16b00:	d51b      	bpl.n	16b3a <ll_rl_rpa_update+0xa6>
				u8_t irk[16];

				/* TODO: move this swap to the driver level */
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   16b02:	7c2a      	ldrb	r2, [r5, #16]
   16b04:	4b4a      	ldr	r3, [pc, #296]	; (16c30 <ll_rl_rpa_update+0x19c>)
   16b06:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   16b0a:	f103 0210 	add.w	r2, r3, #16
   16b0e:	f10d 0107 	add.w	r1, sp, #7
		*((u8_t *)dst++) = *((u8_t *)src--);
   16b12:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   16b16:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
   16b1a:	429a      	cmp	r2, r3
   16b1c:	d1f9      	bne.n	16b12 <ll_rl_rpa_update+0x7e>
						16);
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   16b1e:	f105 0117 	add.w	r1, r5, #23
   16b22:	a802      	add	r0, sp, #8
   16b24:	f7ec fd28 	bl	3578 <bt_rpa_create>
				LL_ASSERT(!err);
   16b28:	b138      	cbz	r0, 16b3a <ll_rl_rpa_update+0xa6>
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
   16b2a:	4040      	eors	r0, r0
   16b2c:	f380 8811 	msr	BASEPRI, r0
   16b30:	f04f 0004 	mov.w	r0, #4
   16b34:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
   16b36:	2601      	movs	r6, #1
   16b38:	e7ce      	b.n	16ad8 <ll_rl_rpa_update+0x44>
			}

			if (rl[i].lirk) {
   16b3a:	2328      	movs	r3, #40	; 0x28
   16b3c:	4363      	muls	r3, r4
   16b3e:	5cfb      	ldrb	r3, [r7, r3]
   16b40:	071a      	lsls	r2, r3, #28
   16b42:	d511      	bpl.n	16b68 <ll_rl_rpa_update+0xd4>
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
   16b44:	a902      	add	r1, sp, #8
   16b46:	4628      	mov	r0, r5
   16b48:	f7ec fd16 	bl	3578 <bt_rpa_create>
				LL_ASSERT(!err);
   16b4c:	2800      	cmp	r0, #0
   16b4e:	d1ec      	bne.n	16b2a <ll_rl_rpa_update+0x96>
   16b50:	2206      	movs	r2, #6
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
   16b52:	ab02      	add	r3, sp, #8
   16b54:	fb02 ba04 	mla	sl, r2, r4, fp
   16b58:	f8c5 301d 	str.w	r3, [r5, #29]
   16b5c:	4619      	mov	r1, r3
   16b5e:	4650      	mov	r0, sl
   16b60:	f7e9 fe2c 	bl	7bc <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
   16b64:	f8c5 a01d 	str.w	sl, [r5, #29]
			}

			rl[i].rpas_ready = 1;
   16b68:	2328      	movs	r3, #40	; 0x28
   16b6a:	4363      	muls	r3, r4
   16b6c:	5cfa      	ldrb	r2, [r7, r3]
   16b6e:	f042 0202 	orr.w	r2, r2, #2
   16b72:	54fa      	strb	r2, [r7, r3]
   16b74:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16b76:	2c08      	cmp	r4, #8
   16b78:	f105 0528 	add.w	r5, r5, #40	; 0x28
   16b7c:	d1b3      	bne.n	16ae6 <ll_rl_rpa_update+0x52>
		}
	}

	if (all) {
   16b7e:	b126      	cbz	r6, 16b8a <ll_rl_rpa_update+0xf6>
		rpa_last_ms = now;
   16b80:	e9dd 1200 	ldrd	r1, r2, [sp]
   16b84:	4b27      	ldr	r3, [pc, #156]	; (16c24 <ll_rl_rpa_update+0x190>)
   16b86:	e9c3 1200 	strd	r1, r2, [r3]
	}

	if (timeout) {
   16b8a:	f1b8 0f00 	cmp.w	r8, #0
   16b8e:	d045      	beq.n	16c1c <ll_rl_rpa_update+0x188>
#if defined(CONFIG_BT_BROADCASTER)
		if (ll_adv_is_enabled()) {
   16b90:	f7fd f9b4 	bl	13efc <ll_adv_is_enabled>
   16b94:	2800      	cmp	r0, #0
   16b96:	d041      	beq.n	16c1c <ll_rl_rpa_update+0x188>
	ll_adv = ll_adv_set_get();
   16b98:	f7fe fe48 	bl	1582c <ll_adv_set_get>
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   16b9c:	7803      	ldrb	r3, [r0, #0]
   16b9e:	065b      	lsls	r3, r3, #25
	ll_adv = ll_adv_set_get();
   16ba0:	4680      	mov	r8, r0
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   16ba2:	d53b      	bpl.n	16c1c <ll_rl_rpa_update+0x188>
	radio_adv_data = radio_adv_data_get();
   16ba4:	f7fd f99a 	bl	13edc <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   16ba8:	f890 4203 	ldrb.w	r4, [r0, #515]	; 0x203
	if (radio_adv_data->first == radio_adv_data->last) {
   16bac:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   16bb0:	eb04 2104 	add.w	r1, r4, r4, lsl #8
	if (radio_adv_data->first == radio_adv_data->last) {
   16bb4:	42a3      	cmp	r3, r4
	radio_adv_data = radio_adv_data_get();
   16bb6:	4605      	mov	r5, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   16bb8:	eb00 0701 	add.w	r7, r0, r1
	if (radio_adv_data->first == radio_adv_data->last) {
   16bbc:	d104      	bne.n	16bc8 <ll_rl_rpa_update+0x134>
		last = radio_adv_data->last + 1;
   16bbe:	3401      	adds	r4, #1
   16bc0:	b2e4      	uxtb	r4, r4
			last = 0;
   16bc2:	2c02      	cmp	r4, #2
   16bc4:	bf08      	it	eq
   16bc6:	2400      	moveq	r4, #0
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   16bc8:	eb04 2304 	add.w	r3, r4, r4, lsl #8
	pdu->type = prev->type;
   16bcc:	5c68      	ldrb	r0, [r5, r1]
   16bce:	5cea      	ldrb	r2, [r5, r3]
   16bd0:	f360 0203 	bfi	r2, r0, #0, #4
	pdu->rfu = 0;
   16bd4:	f36f 1204 	bfc	r2, #4, #1
   16bd8:	54ea      	strb	r2, [r5, r3]
		pdu->chan_sel = prev->chan_sel;
   16bda:	5c6a      	ldrb	r2, [r5, r1]
   16bdc:	5ce9      	ldrb	r1, [r5, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   16bde:	f898 0000 	ldrb.w	r0, [r8]
		pdu->chan_sel = prev->chan_sel;
   16be2:	f3c2 1240 	ubfx	r2, r2, #5, #1
   16be6:	f362 1145 	bfi	r1, r2, #5, #1
   16bea:	54e9      	strb	r1, [r5, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   16bec:	2200      	movs	r2, #0
   16bee:	f108 0102 	add.w	r1, r8, #2
   16bf2:	09c0      	lsrs	r0, r0, #7
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   16bf4:	18ee      	adds	r6, r5, r3
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   16bf6:	f7ff fdc9 	bl	1678c <ll_rl_find>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   16bfa:	2807      	cmp	r0, #7
   16bfc:	d895      	bhi.n	16b2a <ll_rl_rpa_update+0x96>
	ll_rl_pdu_adv_update(idx, pdu);
   16bfe:	4631      	mov	r1, r6
   16c00:	f7ff fef2 	bl	169e8 <ll_rl_pdu_adv_update>
	       prev->len - BDADDR_SIZE);
   16c04:	787a      	ldrb	r2, [r7, #1]
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
   16c06:	f107 0108 	add.w	r1, r7, #8
   16c0a:	3a06      	subs	r2, #6
   16c0c:	f106 0008 	add.w	r0, r6, #8
   16c10:	f7e9 fdd4 	bl	7bc <memcpy>
	pdu->len = prev->len;
   16c14:	787b      	ldrb	r3, [r7, #1]
   16c16:	7073      	strb	r3, [r6, #1]
	radio_adv_data->last = last;
   16c18:	f885 4203 	strb.w	r4, [r5, #515]	; 0x203
			rpa_adv_refresh();
		}
#endif
	}
}
   16c1c:	b007      	add	sp, #28
   16c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c22:	bf00      	nop
   16c24:	20004b88 	.word	0x20004b88
   16c28:	20004bbc 	.word	0x20004bbc
   16c2c:	20002847 	.word	0x20002847
   16c30:	200027bf 	.word	0x200027bf
   16c34:	20002786 	.word	0x20002786

00016c38 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
   16c38:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   16c3a:	2001      	movs	r0, #1
   16c3c:	f7ff ff2a 	bl	16a94 <ll_rl_rpa_update>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   16c40:	4b03      	ldr	r3, [pc, #12]	; (16c50 <rpa_timeout+0x18>)
   16c42:	4904      	ldr	r1, [pc, #16]	; (16c54 <rpa_timeout+0x1c>)
   16c44:	681a      	ldr	r2, [r3, #0]
   16c46:	4804      	ldr	r0, [pc, #16]	; (16c58 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
   16c48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   16c4c:	f00a bae6 	b.w	2121c <k_delayed_work_submit_to_queue>
   16c50:	20004bbc 	.word	0x20004bbc
   16c54:	20004b94 	.word	0x20004b94
   16c58:	200052a0 	.word	0x200052a0

00016c5c <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   16c5c:	4b07      	ldr	r3, [pc, #28]	; (16c7c <ll_adv_scan_state_cb+0x20>)
	if (!rl_enable) {
   16c5e:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
   16c60:	b130      	cbz	r0, 16c70 <ll_adv_scan_state_cb+0x14>
	if (!rl_enable) {
   16c62:	b14b      	cbz	r3, 16c78 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   16c64:	4b06      	ldr	r3, [pc, #24]	; (16c80 <ll_adv_scan_state_cb+0x24>)
   16c66:	4907      	ldr	r1, [pc, #28]	; (16c84 <ll_adv_scan_state_cb+0x28>)
   16c68:	681a      	ldr	r2, [r3, #0]
   16c6a:	4807      	ldr	r0, [pc, #28]	; (16c88 <ll_adv_scan_state_cb+0x2c>)
   16c6c:	f00a bad6 	b.w	2121c <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
   16c70:	b113      	cbz	r3, 16c78 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_cancel(&rpa_work);
   16c72:	4804      	ldr	r0, [pc, #16]	; (16c84 <ll_adv_scan_state_cb+0x28>)
   16c74:	f00a ba78 	b.w	21168 <k_delayed_work_cancel>
   16c78:	4770      	bx	lr
   16c7a:	bf00      	nop
   16c7c:	20002980 	.word	0x20002980
   16c80:	20004bbc 	.word	0x20004bbc
   16c84:	20004b94 	.word	0x20004b94
   16c88:	200052a0 	.word	0x200052a0

00016c8c <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   16c8c:	2008      	movs	r0, #8
   16c8e:	4770      	bx	lr

00016c90 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   16c90:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
   16c92:	f7ff fc2d 	bl	164f0 <rl_access_check.constprop.1>
   16c96:	b178      	cbz	r0, 16cb8 <ll_rl_clear+0x28>
		rl[i].taken = 0;
   16c98:	4908      	ldr	r1, [pc, #32]	; (16cbc <ll_rl_clear+0x2c>)
   16c9a:	2300      	movs	r3, #0
   16c9c:	2428      	movs	r4, #40	; 0x28
   16c9e:	fb04 f203 	mul.w	r2, r4, r3
   16ca2:	3301      	adds	r3, #1
   16ca4:	5c88      	ldrb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16ca6:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   16ca8:	f36f 0000 	bfc	r0, #0, #1
   16cac:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16cae:	d1f6      	bne.n	16c9e <ll_rl_clear+0xe>
	peer_irk_count = 0;
   16cb0:	4b03      	ldr	r3, [pc, #12]	; (16cc0 <ll_rl_clear+0x30>)
   16cb2:	2000      	movs	r0, #0
   16cb4:	7018      	strb	r0, [r3, #0]
   16cb6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16cb8:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   16cba:	bd10      	pop	{r4, pc}
   16cbc:	20002840 	.word	0x20002840
   16cc0:	200027b6 	.word	0x200027b6

00016cc4 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   16cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cc8:	b085      	sub	sp, #20
   16cca:	4607      	mov	r7, r0
   16ccc:	4689      	mov	r9, r1
   16cce:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   16cd0:	f7ff fc0e 	bl	164f0 <rl_access_check.constprop.1>
   16cd4:	2800      	cmp	r0, #0
   16cd6:	f000 8086 	beq.w	16de6 <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   16cda:	f107 0801 	add.w	r8, r7, #1
   16cde:	f10d 020f 	add.w	r2, sp, #15
   16ce2:	4641      	mov	r1, r8
   16ce4:	7838      	ldrb	r0, [r7, #0]
   16ce6:	f7ff fd51 	bl	1678c <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
   16cea:	2807      	cmp	r0, #7
   16cec:	d97d      	bls.n	16dea <ll_rl_add+0x126>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
   16cee:	f89d 500f 	ldrb.w	r5, [sp, #15]
   16cf2:	2d07      	cmp	r5, #7
   16cf4:	d87b      	bhi.n	16dee <ll_rl_add+0x12a>
   16cf6:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   16cfa:	4c3e      	ldr	r4, [pc, #248]	; (16df4 <ll_rl_add+0x130>)
   16cfc:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   16d00:	2628      	movs	r6, #40	; 0x28
   16d02:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   16d04:	f10b 0001 	add.w	r0, fp, #1
   16d08:	2206      	movs	r2, #6
   16d0a:	4641      	mov	r1, r8
   16d0c:	4420      	add	r0, r4
   16d0e:	f7e9 fd55 	bl	7bc <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   16d12:	7839      	ldrb	r1, [r7, #0]
   16d14:	5da3      	ldrb	r3, [r4, r6]
   16d16:	19a2      	adds	r2, r4, r6
   16d18:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   16d1c:	4648      	mov	r0, r9
   16d1e:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   16d20:	9201      	str	r2, [sp, #4]
   16d22:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   16d24:	f7f4 f845 	bl	adb2 <mem_nz>
   16d28:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   16d2a:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   16d2c:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   16d30:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   16d32:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   16d34:	f7f4 f83d 	bl	adb2 <mem_nz>
   16d38:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
   16d3a:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   16d3c:	f000 0001 	and.w	r0, r0, #1
   16d40:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   16d44:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   16d48:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
   16d4a:	d138      	bne.n	16dbe <ll_rl_add+0xfa>
		rl[i].pirk_idx = peer_irk_count;
		peer_irk_rl_ids[peer_irk_count] = i;
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
   16d4c:	b158      	cbz	r0, 16d66 <ll_rl_add+0xa2>
		memcpy(rl[i].local_irk, lirk, 16);
   16d4e:	f10b 0007 	add.w	r0, fp, #7
   16d52:	2210      	movs	r2, #16
   16d54:	4651      	mov	r1, sl
   16d56:	4420      	add	r0, r4
   16d58:	f7e9 fd30 	bl	7bc <memcpy>
		rl[i].local_rpa = NULL;
   16d5c:	2328      	movs	r3, #40	; 0x28
   16d5e:	fb03 4305 	mla	r3, r3, r5, r4
   16d62:	2200      	movs	r2, #0
   16d64:	625a      	str	r2, [r3, #36]	; 0x24
	}
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0;
   16d66:	2628      	movs	r6, #40	; 0x28
   16d68:	436e      	muls	r6, r5
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   16d6a:	f10b 0018 	add.w	r0, fp, #24
   16d6e:	2206      	movs	r2, #6
   16d70:	2100      	movs	r1, #0
   16d72:	4420      	add	r0, r4
   16d74:	f7e9 fd4e 	bl	814 <memset>
	rl[i].rpas_ready = 0;
   16d78:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
   16d7a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   16d7e:	f36f 1304 	bfc	r3, #4, #1
   16d82:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   16d84:	2200      	movs	r2, #0
   16d86:	4641      	mov	r1, r8
   16d88:	7838      	ldrb	r0, [r7, #0]
   16d8a:	f7ff fb53 	bl	16434 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   16d8e:	2807      	cmp	r0, #7
   16d90:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   16d92:	bf9d      	ittte	ls
   16d94:	4a18      	ldrls	r2, [pc, #96]	; (16df8 <ll_rl_add+0x134>)
		rl[i].wl = 1;
   16d96:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   16d9a:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
   16d9e:	f36f 1345 	bfchi	r3, #5, #1
   16da2:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
   16da4:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   16da8:	bf98      	it	ls
   16daa:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
   16dac:	435d      	muls	r5, r3

	return 0;
   16dae:	2000      	movs	r0, #0
	rl[i].taken = 1;
   16db0:	5d63      	ldrb	r3, [r4, r5]
   16db2:	f043 0301 	orr.w	r3, r3, #1
   16db6:	5563      	strb	r3, [r4, r5]
}
   16db8:	b005      	add	sp, #20
   16dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   16dbe:	4b0f      	ldr	r3, [pc, #60]	; (16dfc <ll_rl_add+0x138>)
   16dc0:	7819      	ldrb	r1, [r3, #0]
   16dc2:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   16dc4:	4a0e      	ldr	r2, [pc, #56]	; (16e00 <ll_rl_add+0x13c>)
   16dc6:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   16dc8:	1c4a      	adds	r2, r1, #1
   16dca:	701a      	strb	r2, [r3, #0]
   16dcc:	4b0d      	ldr	r3, [pc, #52]	; (16e04 <ll_rl_add+0x140>)
   16dce:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   16dd2:	f109 0210 	add.w	r2, r9, #16
   16dd6:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   16dd8:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   16ddc:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   16de0:	454a      	cmp	r2, r9
   16de2:	d1f9      	bne.n	16dd8 <ll_rl_add+0x114>
   16de4:	e7b2      	b.n	16d4c <ll_rl_add+0x88>
		return BT_HCI_ERR_CMD_DISALLOWED;
   16de6:	200c      	movs	r0, #12
   16de8:	e7e6      	b.n	16db8 <ll_rl_add+0xf4>
		return BT_HCI_ERR_INVALID_PARAM;
   16dea:	2012      	movs	r0, #18
   16dec:	e7e4      	b.n	16db8 <ll_rl_add+0xf4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   16dee:	2007      	movs	r0, #7
   16df0:	e7e2      	b.n	16db8 <ll_rl_add+0xf4>
   16df2:	bf00      	nop
   16df4:	20002840 	.word	0x20002840
   16df8:	200029b3 	.word	0x200029b3
   16dfc:	200027b6 	.word	0x200027b6
   16e00:	200027b7 	.word	0x200027b7
   16e04:	200027bf 	.word	0x200027bf

00016e08 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   16e08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e0c:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
   16e0e:	f7ff fb6f 	bl	164f0 <rl_access_check.constprop.1>
   16e12:	2800      	cmp	r0, #0
   16e14:	d053      	beq.n	16ebe <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   16e16:	f109 0a01 	add.w	sl, r9, #1
   16e1a:	2200      	movs	r2, #0
   16e1c:	4651      	mov	r1, sl
   16e1e:	f899 0000 	ldrb.w	r0, [r9]
   16e22:	f7ff fcb3 	bl	1678c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   16e26:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   16e28:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
   16e2a:	d84b      	bhi.n	16ec4 <ll_rl_remove+0xbc>
		u8_t j, k;

		if (rl[i].pirk) {
   16e2c:	f04f 0b28 	mov.w	fp, #40	; 0x28
   16e30:	4c26      	ldr	r4, [pc, #152]	; (16ecc <ll_rl_remove+0xc4>)
   16e32:	fb0b f300 	mul.w	r3, fp, r0
   16e36:	18e2      	adds	r2, r4, r3
   16e38:	5ce3      	ldrb	r3, [r4, r3]
   16e3a:	075b      	lsls	r3, r3, #29
   16e3c:	d524      	bpl.n	16e88 <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   16e3e:	4e24      	ldr	r6, [pc, #144]	; (16ed0 <ll_rl_remove+0xc8>)
   16e40:	7835      	ldrb	r5, [r6, #0]
   16e42:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
   16e44:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   16e48:	d01b      	beq.n	16e82 <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   16e4a:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
   16e4c:	42af      	cmp	r7, r5
   16e4e:	d018      	beq.n	16e82 <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   16e50:	4820      	ldr	r0, [pc, #128]	; (16ed4 <ll_rl_remove+0xcc>)
   16e52:	2210      	movs	r2, #16
   16e54:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   16e58:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   16e5c:	f7e9 fcae 	bl	7bc <memcpy>
   16e60:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
   16e62:	fb0b f103 	mul.w	r1, fp, r3
   16e66:	1862      	adds	r2, r4, r1
   16e68:	5c61      	ldrb	r1, [r4, r1]
   16e6a:	f011 0f01 	tst.w	r1, #1
   16e6e:	b2d8      	uxtb	r0, r3
   16e70:	d021      	beq.n	16eb6 <ll_rl_remove+0xae>
   16e72:	0749      	lsls	r1, r1, #29
   16e74:	d51f      	bpl.n	16eb6 <ll_rl_remove+0xae>
   16e76:	7dd1      	ldrb	r1, [r2, #23]
   16e78:	42a9      	cmp	r1, r5
   16e7a:	d11c      	bne.n	16eb6 <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
   16e7c:	4b16      	ldr	r3, [pc, #88]	; (16ed8 <ll_rl_remove+0xd0>)
						rl[k].pirk_idx = pi;
   16e7e:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   16e80:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
   16e82:	7833      	ldrb	r3, [r6, #0]
   16e84:	3b01      	subs	r3, #1
   16e86:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   16e88:	2200      	movs	r2, #0
   16e8a:	4651      	mov	r1, sl
   16e8c:	f899 0000 	ldrb.w	r0, [r9]
   16e90:	f7ff fad0 	bl	16434 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   16e94:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   16e96:	bf9f      	itttt	ls
   16e98:	4b10      	ldrls	r3, [pc, #64]	; (16edc <ll_rl_remove+0xd4>)
   16e9a:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
   16e9e:	23ff      	movls	r3, #255	; 0xff
   16ea0:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
   16ea2:	2028      	movs	r0, #40	; 0x28
   16ea4:	fb00 f008 	mul.w	r0, r0, r8
   16ea8:	5c23      	ldrb	r3, [r4, r0]
   16eaa:	f36f 0300 	bfc	r3, #0, #1
   16eae:	5423      	strb	r3, [r4, r0]
		return 0;
   16eb0:	2000      	movs	r0, #0
   16eb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16eb6:	3301      	adds	r3, #1
				for (k = 0;
   16eb8:	2b08      	cmp	r3, #8
   16eba:	d1d2      	bne.n	16e62 <ll_rl_remove+0x5a>
   16ebc:	e7e1      	b.n	16e82 <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   16ebe:	200c      	movs	r0, #12
   16ec0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16ec4:	2002      	movs	r0, #2
}
   16ec6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16eca:	bf00      	nop
   16ecc:	20002840 	.word	0x20002840
   16ed0:	200027b6 	.word	0x200027b6
   16ed4:	200027bf 	.word	0x200027bf
   16ed8:	200027b7 	.word	0x200027b7
   16edc:	200029b3 	.word	0x200029b3

00016ee0 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   16ee0:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   16ee2:	795c      	ldrb	r4, [r3, #5]
   16ee4:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   16ee8:	2c40      	cmp	r4, #64	; 0x40
{
   16eea:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   16eec:	d117      	bne.n	16f1e <ll_rl_crpa_set+0x3e>

		if (id_addr) {
   16eee:	b119      	cbz	r1, 16ef8 <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   16ef0:	2200      	movs	r2, #0
   16ef2:	f7ff fc4b 	bl	1678c <ll_rl_find>
   16ef6:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   16ef8:	2a07      	cmp	r2, #7
   16efa:	d810      	bhi.n	16f1e <ll_rl_crpa_set+0x3e>
   16efc:	2128      	movs	r1, #40	; 0x28
   16efe:	4c08      	ldr	r4, [pc, #32]	; (16f20 <ll_rl_crpa_set+0x40>)
   16f00:	fb01 f302 	mul.w	r3, r1, r2
   16f04:	5ce3      	ldrb	r3, [r4, r3]
   16f06:	07db      	lsls	r3, r3, #31
   16f08:	d509      	bpl.n	16f1e <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   16f0a:	2018      	movs	r0, #24
   16f0c:	fb11 0002 	smlabb	r0, r1, r2, r0
   16f10:	4420      	add	r0, r4
   16f12:	4629      	mov	r1, r5
   16f14:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
   16f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   16f1a:	f7e9 bc4f 	b.w	7bc <memcpy>
   16f1e:	bd70      	pop	{r4, r5, r6, pc}
   16f20:	20002840 	.word	0x20002840

00016f24 <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   16f24:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   16f26:	2200      	movs	r2, #0
{
   16f28:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   16f2a:	1c41      	adds	r1, r0, #1
   16f2c:	7800      	ldrb	r0, [r0, #0]
   16f2e:	f7ff fc2d 	bl	1678c <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   16f32:	2807      	cmp	r0, #7
   16f34:	d901      	bls.n	16f3a <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16f36:	2002      	movs	r0, #2
   16f38:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   16f3a:	2428      	movs	r4, #40	; 0x28
   16f3c:	2318      	movs	r3, #24
   16f3e:	fb14 3000 	smlabb	r0, r4, r0, r3
   16f42:	4c07      	ldr	r4, [pc, #28]	; (16f60 <ll_rl_crpa_get+0x3c>)
   16f44:	4404      	add	r4, r0
   16f46:	2106      	movs	r1, #6
   16f48:	4620      	mov	r0, r4
   16f4a:	f7f3 ff32 	bl	adb2 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   16f4e:	2800      	cmp	r0, #0
   16f50:	d0f1      	beq.n	16f36 <ll_rl_crpa_get+0x12>
   16f52:	2206      	movs	r2, #6
   16f54:	4621      	mov	r1, r4
   16f56:	4628      	mov	r0, r5
   16f58:	f7e9 fc30 	bl	7bc <memcpy>
			return 0;
   16f5c:	2000      	movs	r0, #0
}
   16f5e:	bd38      	pop	{r3, r4, r5, pc}
   16f60:	20002840 	.word	0x20002840

00016f64 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   16f64:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   16f66:	2200      	movs	r2, #0
{
   16f68:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   16f6a:	1c41      	adds	r1, r0, #1
   16f6c:	7800      	ldrb	r0, [r0, #0]
   16f6e:	f7ff fc0d 	bl	1678c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   16f72:	2807      	cmp	r0, #7
   16f74:	d80a      	bhi.n	16f8c <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   16f76:	4b06      	ldr	r3, [pc, #24]	; (16f90 <ll_rl_lrpa_get+0x2c>)
   16f78:	2228      	movs	r2, #40	; 0x28
   16f7a:	fb02 3000 	mla	r0, r2, r0, r3
   16f7e:	2206      	movs	r2, #6
   16f80:	6a41      	ldr	r1, [r0, #36]	; 0x24
   16f82:	4620      	mov	r0, r4
   16f84:	f7e9 fc1a 	bl	7bc <memcpy>
		return 0;
   16f88:	2000      	movs	r0, #0
   16f8a:	bd10      	pop	{r4, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16f8c:	2002      	movs	r0, #2
}
   16f8e:	bd10      	pop	{r4, pc}
   16f90:	20002840 	.word	0x20002840

00016f94 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   16f94:	b510      	push	{r4, lr}
   16f96:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   16f98:	f7ff faaa 	bl	164f0 <rl_access_check.constprop.1>
   16f9c:	b140      	cbz	r0, 16fb0 <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   16f9e:	b11c      	cbz	r4, 16fa8 <ll_rl_enable+0x14>
   16fa0:	2c01      	cmp	r4, #1
   16fa2:	d001      	beq.n	16fa8 <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   16fa4:	2012      	movs	r0, #18
	}

	return 0;
}
   16fa6:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   16fa8:	4b02      	ldr	r3, [pc, #8]	; (16fb4 <ll_rl_enable+0x20>)
   16faa:	701c      	strb	r4, [r3, #0]
	return 0;
   16fac:	2000      	movs	r0, #0
		break;
   16fae:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16fb0:	200c      	movs	r0, #12
   16fb2:	bd10      	pop	{r4, pc}
   16fb4:	20002980 	.word	0x20002980

00016fb8 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   16fb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16fbc:	4358      	muls	r0, r3
   16fbe:	4b01      	ldr	r3, [pc, #4]	; (16fc4 <ll_rl_timeout_set+0xc>)
   16fc0:	6018      	str	r0, [r3, #0]
   16fc2:	4770      	bx	lr
   16fc4:	20004bbc 	.word	0x20004bbc

00016fc8 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   16fc8:	b538      	push	{r3, r4, r5, lr}
   16fca:	4605      	mov	r5, r0
   16fcc:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
   16fce:	f7ff fa8f 	bl	164f0 <rl_access_check.constprop.1>
   16fd2:	b1d8      	cbz	r0, 1700c <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   16fd4:	2200      	movs	r2, #0
   16fd6:	1c69      	adds	r1, r5, #1
   16fd8:	7828      	ldrb	r0, [r5, #0]
   16fda:	f7ff fbd7 	bl	1678c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   16fde:	2807      	cmp	r0, #7
   16fe0:	d816      	bhi.n	17010 <ll_priv_mode_set+0x48>
		switch (mode) {
   16fe2:	b11c      	cbz	r4, 16fec <ll_priv_mode_set+0x24>
   16fe4:	2c01      	cmp	r4, #1
   16fe6:	d00a      	beq.n	16ffe <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
   16fe8:	2012      	movs	r0, #18
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
   16fea:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   16fec:	2328      	movs	r3, #40	; 0x28
   16fee:	4a09      	ldr	r2, [pc, #36]	; (17014 <ll_priv_mode_set+0x4c>)
   16ff0:	4358      	muls	r0, r3
   16ff2:	5c13      	ldrb	r3, [r2, r0]
   16ff4:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
   16ff8:	5413      	strb	r3, [r2, r0]
	return 0;
   16ffa:	2000      	movs	r0, #0
			break;
   16ffc:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   16ffe:	2328      	movs	r3, #40	; 0x28
   17000:	4a04      	ldr	r2, [pc, #16]	; (17014 <ll_priv_mode_set+0x4c>)
   17002:	4358      	muls	r0, r3
   17004:	5c13      	ldrb	r3, [r2, r0]
   17006:	f043 0310 	orr.w	r3, r3, #16
   1700a:	e7f5      	b.n	16ff8 <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1700c:	200c      	movs	r0, #12
   1700e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   17010:	2002      	movs	r0, #2
   17012:	bd38      	pop	{r3, r4, r5, pc}
   17014:	20002840 	.word	0x20002840

00017018 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   17018:	4a19      	ldr	r2, [pc, #100]	; (17080 <ll_filter_reset+0x68>)
   1701a:	2300      	movs	r3, #0
{
   1701c:	b430      	push	{r4, r5}
	wl_anon = 0;
   1701e:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
   17020:	4a18      	ldr	r2, [pc, #96]	; (17084 <ll_filter_reset+0x6c>)
   17022:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   17026:	f36f 0100 	bfc	r1, #0, #1
   1702a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   1702e:	3301      	adds	r3, #1
   17030:	2b08      	cmp	r3, #8
   17032:	d1f6      	bne.n	17022 <ll_filter_reset+0xa>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
   17034:	4a14      	ldr	r2, [pc, #80]	; (17088 <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   17036:	4915      	ldr	r1, [pc, #84]	; (1708c <ll_filter_reset+0x74>)
	rl_enable = 0;
   17038:	2300      	movs	r3, #0
   1703a:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1703c:	4a14      	ldr	r2, [pc, #80]	; (17090 <ll_filter_reset+0x78>)
   1703e:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   17040:	4a14      	ldr	r2, [pc, #80]	; (17094 <ll_filter_reset+0x7c>)
		rl[i].taken = 0;
   17042:	4915      	ldr	r1, [pc, #84]	; (17098 <ll_filter_reset+0x80>)
	rpa_last_ms = -1;
   17044:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   17048:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1704c:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
   17050:	2528      	movs	r5, #40	; 0x28
   17052:	fb05 f203 	mul.w	r2, r5, r3
   17056:	3301      	adds	r3, #1
   17058:	5c8c      	ldrb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1705a:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   1705c:	f36f 0400 	bfc	r4, #0, #1
   17060:	548c      	strb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   17062:	d1f6      	bne.n	17052 <ll_filter_reset+0x3a>
	peer_irk_count = 0;
   17064:	4b0d      	ldr	r3, [pc, #52]	; (1709c <ll_filter_reset+0x84>)
   17066:	2200      	movs	r2, #0
   17068:	701a      	strb	r2, [r3, #0]
	rl_clear();
	if (init) {
   1706a:	b120      	cbz	r0, 17076 <ll_filter_reset+0x5e>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   1706c:	490c      	ldr	r1, [pc, #48]	; (170a0 <ll_filter_reset+0x88>)
   1706e:	480d      	ldr	r0, [pc, #52]	; (170a4 <ll_filter_reset+0x8c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   17070:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   17072:	f00a b85b 	b.w	2112c <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   17076:	480b      	ldr	r0, [pc, #44]	; (170a4 <ll_filter_reset+0x8c>)
}
   17078:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   1707a:	f00a b875 	b.w	21168 <k_delayed_work_cancel>
   1707e:	bf00      	nop
   17080:	20004b90 	.word	0x20004b90
   17084:	200029b3 	.word	0x200029b3
   17088:	20002980 	.word	0x20002980
   1708c:	000dbba0 	.word	0x000dbba0
   17090:	20004bbc 	.word	0x20004bbc
   17094:	20004b88 	.word	0x20004b88
   17098:	20002840 	.word	0x20002840
   1709c:	200027b6 	.word	0x200027b6
   170a0:	00016c39 	.word	0x00016c39
   170a4:	20004b94 	.word	0x20004b94

000170a8 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   170a8:	4b05      	ldr	r3, [pc, #20]	; (170c0 <cntr_init+0x18>)
   170aa:	2200      	movs	r2, #0
   170ac:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
   170b0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   170b4:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
   170b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   170bc:	4770      	bx	lr
   170be:	bf00      	nop
   170c0:	4000b000 	.word	0x4000b000

000170c4 <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
   170c4:	4a04      	ldr	r2, [pc, #16]	; (170d8 <cntr_start+0x14>)
   170c6:	7813      	ldrb	r3, [r2, #0]
   170c8:	1c59      	adds	r1, r3, #1
   170ca:	7011      	strb	r1, [r2, #0]
   170cc:	2001      	movs	r0, #1
   170ce:	b913      	cbnz	r3, 170d6 <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
   170d0:	4a02      	ldr	r2, [pc, #8]	; (170dc <cntr_start+0x18>)
   170d2:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   170d4:	4618      	mov	r0, r3
}
   170d6:	4770      	bx	lr
   170d8:	20002a25 	.word	0x20002a25
   170dc:	4000b000 	.word	0x4000b000

000170e0 <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
   170e0:	4b09      	ldr	r3, [pc, #36]	; (17108 <cntr_stop+0x28>)
   170e2:	7818      	ldrb	r0, [r3, #0]
   170e4:	b928      	cbnz	r0, 170f2 <cntr_stop+0x12>
   170e6:	4040      	eors	r0, r0
   170e8:	f380 8811 	msr	BASEPRI, r0
   170ec:	f04f 0004 	mov.w	r0, #4
   170f0:	df02      	svc	2

	if (--_refcount) {
   170f2:	3801      	subs	r0, #1
   170f4:	b2c0      	uxtb	r0, r0
   170f6:	7018      	strb	r0, [r3, #0]
   170f8:	2301      	movs	r3, #1
   170fa:	b910      	cbnz	r0, 17102 <cntr_stop+0x22>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
   170fc:	4a03      	ldr	r2, [pc, #12]	; (1710c <cntr_stop+0x2c>)
   170fe:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   17100:	4770      	bx	lr
		return 1;
   17102:	4618      	mov	r0, r3
}
   17104:	4770      	bx	lr
   17106:	bf00      	nop
   17108:	20002a25 	.word	0x20002a25
   1710c:	4000b000 	.word	0x4000b000

00017110 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
   17110:	4b01      	ldr	r3, [pc, #4]	; (17118 <cntr_cnt_get+0x8>)
   17112:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   17116:	4770      	bx	lr
   17118:	4000b000 	.word	0x4000b000

0001711c <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
   1711c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   17120:	4b01      	ldr	r3, [pc, #4]	; (17128 <cntr_cmp_set+0xc>)
   17122:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
   17126:	4770      	bx	lr
   17128:	4000b000 	.word	0x4000b000

0001712c <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
   1712c:	4b11      	ldr	r3, [pc, #68]	; (17174 <do_ecb+0x48>)
{
   1712e:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
   17130:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   17132:	2500      	movs	r5, #0
   17134:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
   17136:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   17138:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1713c:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   17140:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
   17144:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   17146:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   1714a:	b934      	cbnz	r4, 1715a <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1714c:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   17150:	b91c      	cbnz	r4, 1715a <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   17152:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   17156:	2c00      	cmp	r4, #0
   17158:	d1f5      	bne.n	17146 <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
   1715a:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1715c:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
   17160:	2c00      	cmp	r4, #0
   17162:	d1e8      	bne.n	17136 <do_ecb+0xa>
   17164:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
   17168:	2e00      	cmp	r6, #0
   1716a:	d0e4      	beq.n	17136 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   1716c:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   17170:	bd70      	pop	{r4, r5, r6, pc}
   17172:	bf00      	nop
   17174:	4000e000 	.word	0x4000e000

00017178 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   17178:	b570      	push	{r4, r5, r6, lr}
   1717a:	b08c      	sub	sp, #48	; 0x30
   1717c:	460e      	mov	r6, r1
   1717e:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   17180:	4601      	mov	r1, r0
   17182:	2210      	movs	r2, #16
   17184:	4668      	mov	r0, sp
{
   17186:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   17188:	f7f3 fe04 	bl	ad94 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1718c:	2210      	movs	r2, #16
   1718e:	eb0d 0002 	add.w	r0, sp, r2
   17192:	4631      	mov	r1, r6
   17194:	f7f3 fdfe 	bl	ad94 <mem_rcopy>

	do_ecb(&ecb);
   17198:	4668      	mov	r0, sp
   1719a:	f7ff ffc7 	bl	1712c <do_ecb>

	if (cipher_text_le) {
   1719e:	b125      	cbz	r5, 171aa <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   171a0:	2210      	movs	r2, #16
   171a2:	a908      	add	r1, sp, #32
   171a4:	4628      	mov	r0, r5
   171a6:	f7f3 fdf5 	bl	ad94 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   171aa:	b124      	cbz	r4, 171b6 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   171ac:	2210      	movs	r2, #16
   171ae:	a908      	add	r1, sp, #32
   171b0:	4620      	mov	r0, r4
   171b2:	f7e9 fb03 	bl	7bc <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   171b6:	b00c      	add	sp, #48	; 0x30
   171b8:	bd70      	pop	{r4, r5, r6, pc}
	...

000171bc <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
   171bc:	4b07      	ldr	r3, [pc, #28]	; (171dc <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
   171be:	4a08      	ldr	r2, [pc, #32]	; (171e0 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   171c0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
   171c4:	4907      	ldr	r1, [pc, #28]	; (171e4 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
   171c6:	4a08      	ldr	r2, [pc, #32]	; (171e8 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
   171c8:	2800      	cmp	r0, #0
   171ca:	bf14      	ite	ne
   171cc:	4610      	movne	r0, r2
   171ce:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   171d0:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
   171d2:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   171d6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   171da:	4770      	bx	lr
   171dc:	4001f000 	.word	0x4001f000
   171e0:	40008140 	.word	0x40008140
   171e4:	40001004 	.word	0x40001004
   171e8:	40001000 	.word	0x40001000

000171ec <sw_switch.isra.6>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   171ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   171f0:	4d75      	ldr	r5, [pc, #468]	; (173c8 <sw_switch.isra.6+0x1dc>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   171f2:	4c76      	ldr	r4, [pc, #472]	; (173cc <sw_switch.isra.6+0x1e0>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   171f4:	782e      	ldrb	r6, [r5, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   171f6:	4b76      	ldr	r3, [pc, #472]	; (173d0 <sw_switch.isra.6+0x1e4>)
   171f8:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   171fc:	b233      	sxth	r3, r6
   171fe:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   17202:	4688      	mov	r8, r1
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   17204:	f10e 4180 	add.w	r1, lr, #1073741824	; 0x40000000
   17208:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
   1720c:	f8c4 1564 	str.w	r1, [r4, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   17210:	f106 040b 	add.w	r4, r6, #11
   17214:	b2e4      	uxtb	r4, r4
   17216:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
   17218:	496e      	ldr	r1, [pc, #440]	; (173d4 <sw_switch.isra.6+0x1e8>)
   1721a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1721e:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   17222:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   17226:	4461      	add	r1, ip
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
   17228:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
   1722c:	f106 0708 	add.w	r7, r6, #8
   17230:	f10e 0e04 	add.w	lr, lr, #4

	if (dir) {
   17234:	2800      	cmp	r0, #0
   17236:	f000 80aa 	beq.w	1738e <sw_switch.isra.6+0x1a2>
	}
}

static inline u32_t hal_radio_tx_ready_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
   1723a:	2a02      	cmp	r2, #2
   1723c:	f000 8087 	beq.w	1734e <sw_switch.isra.6+0x162>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
   17240:	f649 70c4 	movw	r0, #40900	; 0x9fc4
   17244:	f64a 095c 	movw	r9, #43100	; 0xa85c
   17248:	2a04      	cmp	r2, #4
   1724a:	bf18      	it	ne
   1724c:	4681      	movne	r9, r0
	}
}

static inline u32_t hal_radio_rx_chain_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
   1724e:	f1b8 0f02 	cmp.w	r8, #2
   17252:	d07f      	beq.n	17354 <sw_switch.isra.6+0x168>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
   17254:	f242 42b8 	movw	r2, #9400	; 0x24b8
   17258:	f247 2074 	movw	r0, #29300	; 0x7274
   1725c:	f1b8 0f04 	cmp.w	r8, #4
   17260:	bf18      	it	ne
   17262:	4610      	movne	r0, r2
   17264:	f509 79fa 	add.w	r9, r9, #500	; 0x1f4
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   17268:	4a5b      	ldr	r2, [pc, #364]	; (173d8 <sw_switch.isra.6+0x1ec>)
   1726a:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

		hal_radio_txen_on_sw_switch(ppi);

#if defined(CONFIG_BT_CTLR_PHY_CODED)
#if defined(CONFIG_SOC_NRF52840)
		if (phy_curr & BIT(2)) {
   1726e:	f018 0f04 	tst.w	r8, #4
		delay = HAL_RADIO_NS2US_ROUND(
   17272:	4448      	add	r0, r9
   17274:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
   17278:	fbb0 f0fa 	udiv	r0, r0, sl
		if (phy_curr & BIT(2)) {
   1727c:	d06d      	beq.n	1735a <sw_switch.isra.6+0x16e>
   1727e:	f242 44b8 	movw	r4, #9400	; 0x24b8
   17282:	f644 4190 	movw	r1, #19600	; 0x4c90
   17286:	f1b8 0f04 	cmp.w	r8, #4
   1728a:	bf18      	it	ne
   1728c:	4621      	movne	r1, r4
   1728e:	009c      	lsls	r4, r3, #2
   17290:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000

			u8_t ppi_en =
			    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI;
			u8_t cc_s2 =
			    SW_SWITCH_TIMER_EVTS_COMP_S2_BASE;
			u8_t ppi_dis =
   17294:	b2fa      	uxtb	r2, r7
   17296:	f504 4710 	add.w	r7, r4, #36864	; 0x9000
				HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
				    sw_tifs_toggle);
			u32_t delay_s2;

			/* Calculate assuming reception on S2 coding scheme. */
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   1729a:	4449      	add	r1, r9
				hal_radio_tx_ready_delay_ns_get(
					phy_next, flags_next) +
				hal_radio_rx_chain_delay_ns_get(phy_curr, 0));

			SW_SWITCH_TIMER->CC[cc_s2] =
				SW_SWITCH_TIMER->CC[cc];
   1729c:	f8d7 8540 	ldr.w	r8, [r7, #1344]	; 0x540
			SW_SWITCH_TIMER->CC[cc_s2] =
   172a0:	4f4e      	ldr	r7, [pc, #312]	; (173dc <sw_switch.isra.6+0x1f0>)
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   172a2:	fbb1 f1fa 	udiv	r1, r1, sl
			SW_SWITCH_TIMER->CC[cc_s2] =
   172a6:	f8c7 8548 	str.w	r8, [r7, #1352]	; 0x548

			if (delay_s2 < SW_SWITCH_TIMER->CC[cc_s2]) {
   172aa:	f8d7 8548 	ldr.w	r8, [r7, #1352]	; 0x548
   172ae:	4541      	cmp	r1, r8
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   172b0:	bf36      	itet	cc
   172b2:	f8d7 8548 	ldrcc.w	r8, [r7, #1352]	; 0x548
			} else {
				SW_SWITCH_TIMER->CC[cc_s2] = 1;
   172b6:	2101      	movcs	r1, #1
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   172b8:	eba8 0101 	subcc.w	r1, r8, r1
				SW_SWITCH_TIMER->CC[cc_s2] = 1;
   172bc:	f8c7 1548 	str.w	r1, [r7, #1352]	; 0x548
			}

			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi_en) =
   172c0:	4f42      	ldr	r7, [pc, #264]	; (173cc <sw_switch.isra.6+0x1e0>)
   172c2:	f8df 8124 	ldr.w	r8, [pc, #292]	; 173e8 <sw_switch.isra.6+0x1fc>
				HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc_s2);
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   172c6:	4944      	ldr	r1, [pc, #272]	; (173d8 <sw_switch.isra.6+0x1ec>)
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi_en) =
   172c8:	f8c7 8590 	str.w	r8, [r7, #1424]	; 0x590
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   172cc:	f8c7 1594 	str.w	r1, [r7, #1428]	; 0x594
   172d0:	f504 31f8 	add.w	r1, r4, #126976	; 0x1f000
				HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;

			/* Include PPI for S2 timing in the active group */
			NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(
				sw_tifs_toggle)] |=
   172d4:	f8d1 4800 	ldr.w	r4, [r1, #2048]	; 0x800
   172d8:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
   172dc:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
   172e0:	00d1      	lsls	r1, r2, #3
   172e2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   172e6:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
			    ppi_dis)	=
			    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(cc_s2);

			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
			    ppi_dis) =
			    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   172ea:	f10e 4280 	add.w	r2, lr, #1073741824	; 0x40000000
   172ee:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
			    ppi_dis)	=
   172f2:	f8c1 8510 	str.w	r8, [r1, #1296]	; 0x510
			    ppi_dis) =
   172f6:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
			    sw_tifs_toggle);

			/* Capture CC to cancel the timer that has assumed
			 * S8 reception, if packet will be received in S2.
			 */
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   172fa:	4a39      	ldr	r2, [pc, #228]	; (173e0 <sw_switch.isra.6+0x1f4>)
   172fc:	f8c7 2598 	str.w	r2, [r7, #1432]	; 0x598
				HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_EVT;
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_TASK =
				HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_TASK(
   17300:	f502 42fd 	add.w	r2, r2, #32384	; 0x7e80
   17304:	3270      	adds	r2, #112	; 0x70
   17306:	4462      	add	r2, ip
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_TASK =
   17308:	f8c7 259c 	str.w	r2, [r7, #1436]	; 0x59c
				    sw_tifs_toggle);

			NRF_PPI->CHENSET =
   1730c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   17310:	f8c7 2504 	str.w	r2, [r7, #1284]	; 0x504
   17314:	009b      	lsls	r3, r3, #2
   17316:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1731a:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
   1731e:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   17322:	4282      	cmp	r2, r0
		SW_SWITCH_TIMER->CC[cc] -= delay;
   17324:	bf8b      	itete	hi
   17326:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
   1732a:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   1732c:	1a10      	subhi	r0, r2, r0
		SW_SWITCH_TIMER->CC[cc] = 1;
   1732e:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
   17332:	bf88      	it	hi
   17334:	f8c3 0540 	strhi.w	r0, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
   17338:	4b24      	ldr	r3, [pc, #144]	; (173cc <sw_switch.isra.6+0x1e0>)
   1733a:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1733e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   17342:	1c73      	adds	r3, r6, #1
	sw_tifs_toggle &= 1;
   17344:	f003 0301 	and.w	r3, r3, #1
   17348:	702b      	strb	r3, [r5, #0]
   1734a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_NS;
   1734e:	f649 4940 	movw	r9, #40000	; 0x9c40
   17352:	e77c      	b.n	1724e <sw_switch.isra.6+0x62>
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   17354:	f241 3088 	movw	r0, #5000	; 0x1388
   17358:	e784      	b.n	17264 <sw_switch.isra.6+0x78>
   1735a:	009a      	lsls	r2, r3, #2
   1735c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   17360:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
				sw_tifs_toggle)] &=
   17364:	f8d2 4800 	ldr.w	r4, [r2, #2048]	; 0x800
   17368:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
   1736c:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800
   17370:	b2fa      	uxtb	r2, r7
   17372:	00d2      	lsls	r2, r2, #3
   17374:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   17378:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
			    ppi_dis) =
   1737c:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   17380:	f10e 4180 	add.w	r1, lr, #1073741824	; 0x40000000
   17384:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
			    ppi_dis) =
   17388:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
   1738c:	e7c2      	b.n	17314 <sw_switch.isra.6+0x128>
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   1738e:	4a15      	ldr	r2, [pc, #84]	; (173e4 <sw_switch.isra.6+0x1f8>)
   17390:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   17394:	b2fa      	uxtb	r2, r7
   17396:	00d2      	lsls	r2, r2, #3
   17398:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1739c:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
		delay = HAL_RADIO_NS2US_CEIL(
   173a0:	202c      	movs	r0, #44	; 0x2c
				ppi_dis) =
   173a2:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
				HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   173a6:	f10e 4180 	add.w	r1, lr, #1073741824	; 0x40000000
   173aa:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
				ppi_dis) =
   173ae:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
   173b2:	f10c 4280 	add.w	r2, ip, #1073741824	; 0x40000000
   173b6:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
				sw_tifs_toggle)] &=
   173ba:	f8d2 1800 	ldr.w	r1, [r2, #2048]	; 0x800
   173be:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
   173c2:	f8c2 1800 	str.w	r1, [r2, #2048]	; 0x800
   173c6:	e7a5      	b.n	17314 <sw_switch.isra.6+0x128>
   173c8:	20002c48 	.word	0x20002c48
   173cc:	4001f000 	.word	0x4001f000
   173d0:	4000110c 	.word	0x4000110c
   173d4:	40009140 	.word	0x40009140
   173d8:	40001000 	.word	0x40001000
   173dc:	40009000 	.word	0x40009000
   173e0:	40001150 	.word	0x40001150
   173e4:	40001004 	.word	0x40001004
   173e8:	40009148 	.word	0x40009148

000173ec <isr_radio>:
	if (sfp_radio_isr) {
   173ec:	4b02      	ldr	r3, [pc, #8]	; (173f8 <isr_radio+0xc>)
   173ee:	681b      	ldr	r3, [r3, #0]
   173f0:	b103      	cbz	r3, 173f4 <isr_radio+0x8>
		sfp_radio_isr();
   173f2:	4718      	bx	r3
   173f4:	4770      	bx	lr
   173f6:	bf00      	nop
   173f8:	20002c44 	.word	0x20002c44

000173fc <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
   173fc:	4b06      	ldr	r3, [pc, #24]	; (17418 <radio_isr_set+0x1c>)
   173fe:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
   17400:	4b06      	ldr	r3, [pc, #24]	; (1741c <radio_isr_set+0x20>)
   17402:	2210      	movs	r2, #16
   17404:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   17408:	4b05      	ldr	r3, [pc, #20]	; (17420 <radio_isr_set+0x24>)
   1740a:	2202      	movs	r2, #2
   1740c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   17410:	2001      	movs	r0, #1
   17412:	f7e9 be9b 	b.w	114c <_arch_irq_enable>
   17416:	bf00      	nop
   17418:	20002c44 	.word	0x20002c44
   1741c:	40001000 	.word	0x40001000
   17420:	e000e100 	.word	0xe000e100

00017424 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   17424:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1742c:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1742e:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   17432:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   17436:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   1743a:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   1743e:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   17442:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   17446:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   1744a:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   1744e:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   17452:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   17456:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1745a:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   1745e:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   17462:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
   17466:	4770      	bx	lr

00017468 <radio_reset>:
{
   17468:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   1746a:	2001      	movs	r0, #1
   1746c:	f7e9 fe7e 	bl	116c <_arch_irq_disable>
	NRF_RADIO->POWER =
   17470:	4b08      	ldr	r3, [pc, #32]	; (17494 <radio_reset+0x2c>)
   17472:	2200      	movs	r2, #0
   17474:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
   17478:	2201      	movs	r2, #1
   1747a:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1747e:	4a06      	ldr	r2, [pc, #24]	; (17498 <radio_reset+0x30>)
   17480:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   17482:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   17486:	f023 0301 	bic.w	r3, r3, #1
   1748a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1748e:	6013      	str	r3, [r2, #0]
   17490:	bd08      	pop	{r3, pc}
   17492:	bf00      	nop
   17494:	40001000 	.word	0x40001000
   17498:	40001774 	.word	0x40001774

0001749c <radio_phy_set>:
	switch (phy) {
   1749c:	2802      	cmp	r0, #2
   1749e:	4b14      	ldr	r3, [pc, #80]	; (174f0 <radio_phy_set+0x54>)
   174a0:	d010      	beq.n	174c4 <radio_phy_set+0x28>
   174a2:	2804      	cmp	r0, #4
   174a4:	d014      	beq.n	174d0 <radio_phy_set+0x34>
		*(volatile u32_t *)0x4000173c &= ~0x80000000;
   174a6:	681a      	ldr	r2, [r3, #0]
   174a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
   174ac:	601a      	str	r2, [r3, #0]
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   174ae:	2103      	movs	r1, #3
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   174b0:	4b10      	ldr	r3, [pc, #64]	; (174f4 <radio_phy_set+0x58>)
   174b2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   174b6:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   174ba:	f042 0201 	orr.w	r2, r2, #1
   174be:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   174c2:	4770      	bx	lr
		*(volatile u32_t *)0x4000173c &= ~0x80000000;
   174c4:	681a      	ldr	r2, [r3, #0]
   174c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
   174ca:	601a      	str	r2, [r3, #0]
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   174cc:	2104      	movs	r1, #4
   174ce:	e7ef      	b.n	174b0 <radio_phy_set+0x14>
		*(volatile u32_t *)0x4000173c |= 0x80000000;
   174d0:	681a      	ldr	r2, [r3, #0]
   174d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   174d6:	601a      	str	r2, [r3, #0]
				((*(volatile u32_t *)0x4000173c) & 0xFFFFFF00) |
   174d8:	681a      	ldr	r2, [r3, #0]
   174da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
		if (flags & 0x01) {
   174de:	f011 0f01 	tst.w	r1, #1
				((*(volatile u32_t *)0x4000173c) & 0xFFFFFF00) |
   174e2:	f042 025c 	orr.w	r2, r2, #92	; 0x5c
			mode = RADIO_MODE_MODE_Ble_LR500Kbit;
   174e6:	bf14      	ite	ne
   174e8:	2105      	movne	r1, #5
   174ea:	2106      	moveq	r1, #6
		*(volatile u32_t *)0x4000173c =
   174ec:	601a      	str	r2, [r3, #0]
   174ee:	e7df      	b.n	174b0 <radio_phy_set+0x14>
   174f0:	4000173c 	.word	0x4000173c
   174f4:	40001000 	.word	0x40001000

000174f8 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   174f8:	4b01      	ldr	r3, [pc, #4]	; (17500 <radio_tx_power_set+0x8>)
   174fa:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   174fe:	4770      	bx	lr
   17500:	40001000 	.word	0x40001000

00017504 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   17504:	4b01      	ldr	r3, [pc, #4]	; (1750c <radio_freq_chan_set+0x8>)
   17506:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   1750a:	4770      	bx	lr
   1750c:	40001000 	.word	0x40001000

00017510 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   17510:	4b07      	ldr	r3, [pc, #28]	; (17530 <radio_whiten_iv_set+0x20>)
   17512:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   17516:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1751a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1751e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   17522:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   17526:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1752a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   1752e:	4770      	bx	lr
   17530:	40001000 	.word	0x40001000

00017534 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   17534:	4a0a      	ldr	r2, [pc, #40]	; (17560 <radio_aa_set+0x2c>)
   17536:	2300      	movs	r3, #0
   17538:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1753c:	2301      	movs	r3, #1
   1753e:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   17542:	78c3      	ldrb	r3, [r0, #3]
   17544:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   17548:	7843      	ldrb	r3, [r0, #1]
   1754a:	7881      	ldrb	r1, [r0, #2]
   1754c:	041b      	lsls	r3, r3, #16
   1754e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   17552:	7801      	ldrb	r1, [r0, #0]
   17554:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   17558:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   1755c:	4770      	bx	lr
   1755e:	bf00      	nop
   17560:	40001000 	.word	0x40001000

00017564 <radio_pkt_configure>:
	u8_t dc = flags & 0x01; /* Adv or Data channel */
   17564:	f002 0301 	and.w	r3, r2, #1
	switch (phy) {
   17568:	f3c2 0242 	ubfx	r2, r2, #1, #3
   1756c:	2a02      	cmp	r2, #2
   1756e:	d023      	beq.n	175b8 <radio_pkt_configure+0x54>
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   17570:	2a04      	cmp	r2, #4
   17572:	bf0c      	ite	eq
   17574:	f04f 42c7 	moveq.w	r2, #1669332992	; 0x63800000
   17578:	2200      	movne	r2, #0
	if (dc) {
   1757a:	b10b      	cbz	r3, 17580 <radio_pkt_configure+0x1c>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1757c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   17580:	f1c0 0308 	rsb	r3, r0, #8
   17584:	041b      	lsls	r3, r3, #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   17586:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1758a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1758e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
			    RADIO_PCNF0_S1LEN_Msk) |
   17592:	4303      	orrs	r3, r0
   17594:	4313      	orrs	r3, r2
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   17596:	4a0a      	ldr	r2, [pc, #40]	; (175c0 <radio_pkt_configure+0x5c>)
   17598:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1759c:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   175a0:	4b08      	ldr	r3, [pc, #32]	; (175c4 <radio_pkt_configure+0x60>)
   175a2:	4003      	ands	r3, r0
   175a4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   175a8:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   175ac:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
   175b0:	4319      	orrs	r1, r3
   175b2:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   175b6:	4770      	bx	lr
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   175b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   175bc:	e7dd      	b.n	1757a <radio_pkt_configure+0x16>
   175be:	bf00      	nop
   175c0:	40001000 	.word	0x40001000
   175c4:	fef80000 	.word	0xfef80000

000175c8 <radio_pkt_rx_set>:
   175c8:	4b01      	ldr	r3, [pc, #4]	; (175d0 <radio_pkt_rx_set+0x8>)
   175ca:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   175ce:	4770      	bx	lr
   175d0:	40001000 	.word	0x40001000

000175d4 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
   175d4:	4b01      	ldr	r3, [pc, #4]	; (175dc <radio_pkt_tx_set+0x8>)
   175d6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   175da:	4770      	bx	lr
   175dc:	40001000 	.word	0x40001000

000175e0 <radio_tx_ready_delay_get>:
	switch (phy) {
   175e0:	2802      	cmp	r0, #2
   175e2:	d004      	beq.n	175ee <radio_tx_ready_delay_get+0xe>
   175e4:	2804      	cmp	r0, #4
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_US;
   175e6:	bf0c      	ite	eq
   175e8:	202b      	moveq	r0, #43	; 0x2b
   175ea:	2029      	movne	r0, #41	; 0x29
   175ec:	4770      	bx	lr
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_US;
   175ee:	2028      	movs	r0, #40	; 0x28
}
   175f0:	4770      	bx	lr

000175f2 <radio_tx_chain_delay_get>:
}
   175f2:	2001      	movs	r0, #1
   175f4:	4770      	bx	lr

000175f6 <radio_rx_ready_delay_get>:
}
   175f6:	2029      	movs	r0, #41	; 0x29
   175f8:	4770      	bx	lr

000175fa <radio_rx_chain_delay_get>:
	switch (phy) {
   175fa:	2802      	cmp	r0, #2
   175fc:	d003      	beq.n	17606 <radio_rx_chain_delay_get+0xc>
   175fe:	2804      	cmp	r0, #4
   17600:	d003      	beq.n	1760a <radio_rx_chain_delay_get+0x10>
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
   17602:	200a      	movs	r0, #10
}
   17604:	4770      	bx	lr
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   17606:	2005      	movs	r0, #5
   17608:	4770      	bx	lr
		if (flags & 0x01) {
   1760a:	f011 0f01 	tst.w	r1, #1
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S2_US;
   1760e:	bf14      	ite	ne
   17610:	201e      	movne	r0, #30
   17612:	2014      	moveq	r0, #20
   17614:	4770      	bx	lr
	...

00017618 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
   17618:	4b01      	ldr	r3, [pc, #4]	; (17620 <radio_rx_enable+0x8>)
   1761a:	2201      	movs	r2, #1
   1761c:	605a      	str	r2, [r3, #4]
   1761e:	4770      	bx	lr
   17620:	40001000 	.word	0x40001000

00017624 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
   17624:	4b01      	ldr	r3, [pc, #4]	; (1762c <radio_tx_enable+0x8>)
   17626:	2201      	movs	r2, #1
   17628:	601a      	str	r2, [r3, #0]
   1762a:	4770      	bx	lr
   1762c:	40001000 	.word	0x40001000

00017630 <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   17630:	4a07      	ldr	r2, [pc, #28]	; (17650 <radio_disable+0x20>)
   17632:	f44f 6390 	mov.w	r3, #1152	; 0x480
   17636:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
   1763a:	2301      	movs	r3, #1
   1763c:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
   1763e:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   17640:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   17644:	2100      	movs	r1, #0
   17646:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
   1764a:	6113      	str	r3, [r2, #16]
   1764c:	4770      	bx	lr
   1764e:	bf00      	nop
   17650:	4001f000 	.word	0x4001f000

00017654 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   17654:	4b04      	ldr	r3, [pc, #16]	; (17668 <radio_status_reset+0x14>)
   17656:	2200      	movs	r2, #0
   17658:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1765c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   17660:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   17664:	4770      	bx	lr
   17666:	bf00      	nop
   17668:	40001000 	.word	0x40001000

0001766c <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1766c:	4b03      	ldr	r3, [pc, #12]	; (1767c <radio_is_ready+0x10>)
   1766e:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   17672:	3000      	adds	r0, #0
   17674:	bf18      	it	ne
   17676:	2001      	movne	r0, #1
   17678:	4770      	bx	lr
   1767a:	bf00      	nop
   1767c:	40001000 	.word	0x40001000

00017680 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   17680:	4b03      	ldr	r3, [pc, #12]	; (17690 <radio_is_done+0x10>)
   17682:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   17686:	3000      	adds	r0, #0
   17688:	bf18      	it	ne
   1768a:	2001      	movne	r0, #1
   1768c:	4770      	bx	lr
   1768e:	bf00      	nop
   17690:	40001000 	.word	0x40001000

00017694 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   17694:	4b03      	ldr	r3, [pc, #12]	; (176a4 <radio_is_idle+0x10>)
   17696:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1769a:	fab0 f080 	clz	r0, r0
   1769e:	0940      	lsrs	r0, r0, #5
   176a0:	4770      	bx	lr
   176a2:	bf00      	nop
   176a4:	40001000 	.word	0x40001000

000176a8 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   176a8:	4b04      	ldr	r3, [pc, #16]	; (176bc <radio_crc_configure+0x14>)
   176aa:	f240 1203 	movw	r2, #259	; 0x103
   176ae:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   176b2:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   176b6:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
   176ba:	4770      	bx	lr
   176bc:	40001000 	.word	0x40001000

000176c0 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   176c0:	4b03      	ldr	r3, [pc, #12]	; (176d0 <radio_crc_is_valid+0x10>)
   176c2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   176c6:	3000      	adds	r0, #0
   176c8:	bf18      	it	ne
   176ca:	2001      	movne	r0, #1
   176cc:	4770      	bx	lr
   176ce:	bf00      	nop
   176d0:	40001000 	.word	0x40001000

000176d4 <radio_pkt_empty_get>:
}
   176d4:	4800      	ldr	r0, [pc, #0]	; (176d8 <radio_pkt_empty_get+0x4>)
   176d6:	4770      	bx	lr
   176d8:	20002b38 	.word	0x20002b38

000176dc <radio_pkt_scratch_get>:
}
   176dc:	4800      	ldr	r0, [pc, #0]	; (176e0 <radio_pkt_scratch_get+0x4>)
   176de:	4770      	bx	lr
   176e0:	20002b3c 	.word	0x20002b3c

000176e4 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   176e4:	4b04      	ldr	r3, [pc, #16]	; (176f8 <radio_switch_complete_and_rx+0x14>)
   176e6:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   176e8:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   176ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   176ee:	4602      	mov	r2, r0
   176f0:	4608      	mov	r0, r1
   176f2:	f7ff bd7b 	b.w	171ec <sw_switch.isra.6>
   176f6:	bf00      	nop
   176f8:	40001000 	.word	0x40001000

000176fc <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   176fc:	4b03      	ldr	r3, [pc, #12]	; (1770c <radio_switch_complete_and_tx+0x10>)
   176fe:	2103      	movs	r1, #3
   17700:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   17704:	4601      	mov	r1, r0
   17706:	2001      	movs	r0, #1
   17708:	f7ff bd70 	b.w	171ec <sw_switch.isra.6>
   1770c:	40001000 	.word	0x40001000

00017710 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   17710:	4b05      	ldr	r3, [pc, #20]	; (17728 <radio_switch_complete_and_disable+0x18>)
   17712:	2203      	movs	r2, #3
   17714:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   17718:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   1771c:	f44f 6290 	mov.w	r2, #1152	; 0x480
   17720:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   17724:	4770      	bx	lr
   17726:	bf00      	nop
   17728:	40001000 	.word	0x40001000

0001772c <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   1772c:	4a03      	ldr	r2, [pc, #12]	; (1773c <radio_rssi_measure+0x10>)
   1772e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   17732:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   17736:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   1773a:	4770      	bx	lr
   1773c:	40001000 	.word	0x40001000

00017740 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   17740:	4b01      	ldr	r3, [pc, #4]	; (17748 <radio_rssi_get+0x8>)
   17742:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   17746:	4770      	bx	lr
   17748:	40001000 	.word	0x40001000

0001774c <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1774c:	4b02      	ldr	r3, [pc, #8]	; (17758 <radio_rssi_status_reset+0xc>)
   1774e:	2200      	movs	r2, #0
   17750:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   17754:	4770      	bx	lr
   17756:	bf00      	nop
   17758:	40001000 	.word	0x40001000

0001775c <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1775c:	4b03      	ldr	r3, [pc, #12]	; (1776c <radio_rssi_is_ready+0x10>)
   1775e:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   17762:	3000      	adds	r0, #0
   17764:	bf18      	it	ne
   17766:	2001      	movne	r0, #1
   17768:	4770      	bx	lr
   1776a:	bf00      	nop
   1776c:	40001000 	.word	0x40001000

00017770 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   17770:	b530      	push	{r4, r5, lr}
   17772:	2400      	movs	r4, #0
   17774:	00a3      	lsls	r3, r4, #2
   17776:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1777a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   1777e:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   17780:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
   17784:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   17786:	8895      	ldrh	r5, [r2, #4]
   17788:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
   1778c:	2c08      	cmp	r4, #8
		bdaddr += 6;
   1778e:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
   17792:	d1ef      	bne.n	17774 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   17794:	4b02      	ldr	r3, [pc, #8]	; (177a0 <radio_filter_configure+0x30>)
   17796:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   1779a:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   1779e:	bd30      	pop	{r4, r5, pc}
   177a0:	40001000 	.word	0x40001000

000177a4 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   177a4:	4a03      	ldr	r2, [pc, #12]	; (177b4 <radio_filter_disable+0x10>)
   177a6:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   177aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   177ae:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   177b2:	4770      	bx	lr
   177b4:	40001000 	.word	0x40001000

000177b8 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   177b8:	4b02      	ldr	r3, [pc, #8]	; (177c4 <radio_filter_status_reset+0xc>)
   177ba:	2200      	movs	r2, #0
   177bc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   177c0:	4770      	bx	lr
   177c2:	bf00      	nop
   177c4:	40001000 	.word	0x40001000

000177c8 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   177c8:	4b03      	ldr	r3, [pc, #12]	; (177d8 <radio_filter_has_match+0x10>)
   177ca:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   177ce:	3000      	adds	r0, #0
   177d0:	bf18      	it	ne
   177d2:	2001      	movne	r0, #1
   177d4:	4770      	bx	lr
   177d6:	bf00      	nop
   177d8:	40001000 	.word	0x40001000

000177dc <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   177dc:	4b01      	ldr	r3, [pc, #4]	; (177e4 <radio_filter_match_get+0x8>)
   177de:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   177e2:	4770      	bx	lr
   177e4:	40001000 	.word	0x40001000

000177e8 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
   177e8:	4b04      	ldr	r3, [pc, #16]	; (177fc <radio_bc_configure+0x14>)
   177ea:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   177ee:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   177f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   177f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   177fa:	4770      	bx	lr
   177fc:	40001000 	.word	0x40001000

00017800 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   17800:	4b05      	ldr	r3, [pc, #20]	; (17818 <radio_tmr_status_reset+0x18>)
   17802:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   17806:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
   1780a:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1780e:	4a03      	ldr	r2, [pc, #12]	; (1781c <radio_tmr_status_reset+0x1c>)
   17810:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   17814:	4770      	bx	lr
   17816:	bf00      	nop
   17818:	4000b000 	.word	0x4000b000
   1781c:	0004207f 	.word	0x0004207f

00017820 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
   17820:	4b03      	ldr	r3, [pc, #12]	; (17830 <radio_tmr_tifs_set+0x10>)
   17822:	4a04      	ldr	r2, [pc, #16]	; (17834 <radio_tmr_tifs_set+0x14>)
   17824:	781b      	ldrb	r3, [r3, #0]
   17826:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1782a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   1782e:	4770      	bx	lr
   17830:	20002c48 	.word	0x20002c48
   17834:	40009000 	.word	0x40009000

00017838 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   17838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1783c:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   17840:	4c27      	ldr	r4, [pc, #156]	; (178e0 <radio_tmr_start+0xa8>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
   17842:	4d28      	ldr	r5, [pc, #160]	; (178e4 <radio_tmr_start+0xac>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   17844:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   17848:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
   1784a:	bf88      	it	hi
   1784c:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
	EVENT_TIMER->TASKS_CLEAR = 1;
   17850:	4b25      	ldr	r3, [pc, #148]	; (178e8 <radio_tmr_start+0xb0>)
	remainder /= 1000000UL;
   17852:	4c26      	ldr	r4, [pc, #152]	; (178ec <radio_tmr_start+0xb4>)
		remainder += 30517578UL;
   17854:	bf82      	ittt	hi
   17856:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   1785a:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   1785e:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
   17862:	2601      	movs	r6, #1
	remainder /= 1000000UL;
   17864:	fbb2 f4f4 	udiv	r4, r2, r4
	EVENT_TIMER->MODE = 0;
   17868:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1786a:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   1786c:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
   17870:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
   17872:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   17876:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1787a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
   1787e:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
   17882:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   17886:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1788a:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
   1788e:	f505 35a0 	add.w	r5, r5, #81920	; 0x14000
   17892:	4917      	ldr	r1, [pc, #92]	; (178f0 <radio_tmr_start+0xb8>)
   17894:	f8c5 1518 	str.w	r1, [r5, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
   17898:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
   1789c:	f8c5 2504 	str.w	r2, [r5, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   178a0:	f7ff fc8c 	bl	171bc <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
   178a4:	4b13      	ldr	r3, [pc, #76]	; (178f4 <radio_tmr_start+0xbc>)
   178a6:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   178a8:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   178ac:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   178b0:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
   178b4:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
   178b6:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   178ba:	3b74      	subs	r3, #116	; 0x74
   178bc:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
   178c0:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   178c4:	f8c5 354c 	str.w	r3, [r5, #1356]	; 0x54c
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   178c8:	f44f 6310 	mov.w	r3, #2304	; 0x900
   178cc:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   178d0:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   178d4:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
   178d8:	4620      	mov	r0, r4
   178da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   178de:	bf00      	nop
   178e0:	7ff0bdbf 	.word	0x7ff0bdbf
   178e4:	4000b000 	.word	0x4000b000
   178e8:	40008000 	.word	0x40008000
   178ec:	000f4240 	.word	0x000f4240
   178f0:	4000b148 	.word	0x4000b148
   178f4:	40009000 	.word	0x40009000

000178f8 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
   178f8:	4a04      	ldr	r2, [pc, #16]	; (1790c <radio_tmr_stop+0x14>)
   178fa:	2301      	movs	r3, #1
   178fc:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
   178fe:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
   17900:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   17904:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
   17906:	6113      	str	r3, [r2, #16]
   17908:	4770      	bx	lr
   1790a:	bf00      	nop
   1790c:	40008000 	.word	0x40008000

00017910 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
   17910:	4b0c      	ldr	r3, [pc, #48]	; (17944 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   17912:	4a0d      	ldr	r2, [pc, #52]	; (17948 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
   17914:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   17918:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   1791c:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   17920:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   17924:	3240      	adds	r2, #64	; 0x40
   17926:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
   1792a:	f502 7280 	add.w	r2, r2, #256	; 0x100
   1792e:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
   17932:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   17936:	3a34      	subs	r2, #52	; 0x34
   17938:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
   1793c:	2218      	movs	r2, #24
   1793e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   17942:	4770      	bx	lr
   17944:	40008000 	.word	0x40008000
   17948:	40001104 	.word	0x40001104

0001794c <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
   1794c:	4b0b      	ldr	r3, [pc, #44]	; (1797c <radio_tmr_aa_capture+0x30>)
   1794e:	4a0c      	ldr	r2, [pc, #48]	; (17980 <radio_tmr_aa_capture+0x34>)
   17950:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
   17954:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   17958:	3240      	adds	r2, #64	; 0x40
   1795a:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   1795e:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   17962:	3a3c      	subs	r2, #60	; 0x3c
   17964:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   17968:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1796c:	3240      	adds	r2, #64	; 0x40
   1796e:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
   17972:	220c      	movs	r2, #12
   17974:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   17978:	4770      	bx	lr
   1797a:	bf00      	nop
   1797c:	4001f000 	.word	0x4001f000
   17980:	40001100 	.word	0x40001100

00017984 <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   17984:	4b01      	ldr	r3, [pc, #4]	; (1798c <radio_tmr_aa_get+0x8>)
   17986:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1798a:	4770      	bx	lr
   1798c:	40008000 	.word	0x40008000

00017990 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   17990:	4b01      	ldr	r3, [pc, #4]	; (17998 <radio_tmr_aa_save+0x8>)
   17992:	6018      	str	r0, [r3, #0]
   17994:	4770      	bx	lr
   17996:	bf00      	nop
   17998:	20002c40 	.word	0x20002c40

0001799c <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   1799c:	4b01      	ldr	r3, [pc, #4]	; (179a4 <radio_tmr_aa_restore+0x8>)
   1799e:	6818      	ldr	r0, [r3, #0]
   179a0:	4770      	bx	lr
   179a2:	bf00      	nop
   179a4:	20002c40 	.word	0x20002c40

000179a8 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   179a8:	4b01      	ldr	r3, [pc, #4]	; (179b0 <radio_tmr_ready_get+0x8>)
   179aa:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   179ae:	4770      	bx	lr
   179b0:	40008000 	.word	0x40008000

000179b4 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
   179b4:	4b06      	ldr	r3, [pc, #24]	; (179d0 <radio_tmr_end_capture+0x1c>)
   179b6:	4a07      	ldr	r2, [pc, #28]	; (179d4 <radio_tmr_end_capture+0x20>)
   179b8:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
   179bc:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   179c0:	323c      	adds	r2, #60	; 0x3c
   179c2:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
   179c6:	2220      	movs	r2, #32
   179c8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   179cc:	4770      	bx	lr
   179ce:	bf00      	nop
   179d0:	4001f000 	.word	0x4001f000
   179d4:	4000110c 	.word	0x4000110c

000179d8 <radio_tmr_end_get>:
   179d8:	4b01      	ldr	r3, [pc, #4]	; (179e0 <radio_tmr_end_get+0x8>)
   179da:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   179de:	4770      	bx	lr
   179e0:	40008000 	.word	0x40008000

000179e4 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   179e4:	4b01      	ldr	r3, [pc, #4]	; (179ec <radio_tmr_tifs_base_get+0x8>)
   179e6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
   179ea:	4770      	bx	lr
   179ec:	40008000 	.word	0x40008000

000179f0 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   179f0:	4b21      	ldr	r3, [pc, #132]	; (17a78 <radio_ccm_rx_pkt_set+0x88>)
{
   179f2:	b510      	push	{r4, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   179f4:	2400      	movs	r4, #0
   179f6:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   179fa:	2402      	movs	r4, #2
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
   179fc:	42a1      	cmp	r1, r4
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   179fe:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	switch (phy) {
   17a02:	d003      	beq.n	17a0c <radio_ccm_rx_pkt_set+0x1c>
   17a04:	2904      	cmp	r1, #4
   17a06:	d024      	beq.n	17a52 <radio_ccm_rx_pkt_set+0x62>
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   17a08:	491c      	ldr	r1, [pc, #112]	; (17a7c <radio_ccm_rx_pkt_set+0x8c>)
   17a0a:	e000      	b.n	17a0e <radio_ccm_rx_pkt_set+0x1e>
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   17a0c:	491c      	ldr	r1, [pc, #112]	; (17a80 <radio_ccm_rx_pkt_set+0x90>)
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   17a0e:	4b1a      	ldr	r3, [pc, #104]	; (17a78 <radio_ccm_rx_pkt_set+0x88>)
   17a10:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   17a14:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   17a18:	481a      	ldr	r0, [pc, #104]	; (17a84 <radio_ccm_rx_pkt_set+0x94>)
   17a1a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   17a1e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   17a22:	4a19      	ldr	r2, [pc, #100]	; (17a88 <radio_ccm_rx_pkt_set+0x98>)
   17a24:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   17a28:	2200      	movs	r2, #0
   17a2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   17a2e:	4917      	ldr	r1, [pc, #92]	; (17a8c <radio_ccm_rx_pkt_set+0x9c>)
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   17a30:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   17a34:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   17a38:	4a15      	ldr	r2, [pc, #84]	; (17a90 <radio_ccm_rx_pkt_set+0xa0>)
   17a3a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
   17a3e:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   17a42:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
   17a46:	2140      	movs	r1, #64	; 0x40
   17a48:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
   17a4c:	2201      	movs	r2, #1
   17a4e:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   17a50:	bd10      	pop	{r4, pc}
		NRF_CCM->RATEOVERRIDE =
   17a52:	2103      	movs	r1, #3
   17a54:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
		HAL_TRIGGER_RATEOVERRIDE_PPI_REGISTER_EVT =
   17a58:	4b0d      	ldr	r3, [pc, #52]	; (17a90 <radio_ccm_rx_pkt_set+0xa0>)
   17a5a:	490e      	ldr	r1, [pc, #56]	; (17a94 <radio_ccm_rx_pkt_set+0xa4>)
   17a5c:	f8c3 1578 	str.w	r1, [r3, #1400]	; 0x578
		HAL_TRIGGER_RATEOVERRIDE_PPI_REGISTER_TASK =
   17a60:	f501 415e 	add.w	r1, r1, #56832	; 0xde00
   17a64:	31bc      	adds	r1, #188	; 0xbc
   17a66:	f8c3 157c 	str.w	r1, [r3, #1404]	; 0x57c
		NRF_PPI->CHENSET = HAL_TRIGGER_RATEOVERRIDE_PPI_ENABLE;
   17a6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   17a6e:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
		mode |= (CCM_MODE_DATARATE_125Kbps <<
   17a72:	4909      	ldr	r1, [pc, #36]	; (17a98 <radio_ccm_rx_pkt_set+0xa8>)
		break;
   17a74:	e7cb      	b.n	17a0e <radio_ccm_rx_pkt_set+0x1e>
   17a76:	bf00      	nop
   17a78:	4000f000 	.word	0x4000f000
   17a7c:	01000001 	.word	0x01000001
   17a80:	01010001 	.word	0x01010001
   17a84:	20002b3c 	.word	0x20002b3c
   17a88:	20002a2c 	.word	0x20002a2c
   17a8c:	40001104 	.word	0x40001104
   17a90:	4001f000 	.word	0x4001f000
   17a94:	40001150 	.word	0x40001150
   17a98:	01020001 	.word	0x01020001

00017a9c <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   17a9c:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   17a9e:	4b0e      	ldr	r3, [pc, #56]	; (17ad8 <radio_ccm_tx_pkt_set+0x3c>)
   17aa0:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   17aa2:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   17aa4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   17aa8:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   17aac:	4c0b      	ldr	r4, [pc, #44]	; (17adc <radio_ccm_tx_pkt_set+0x40>)
   17aae:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   17ab2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   17ab6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   17aba:	4809      	ldr	r0, [pc, #36]	; (17ae0 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   17abc:	4909      	ldr	r1, [pc, #36]	; (17ae4 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   17abe:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   17ac2:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   17ac6:	2101      	movs	r1, #1
   17ac8:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   17acc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   17ad0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   17ad4:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   17ad6:	bd10      	pop	{r4, pc}
   17ad8:	4000f000 	.word	0x4000f000
   17adc:	01010000 	.word	0x01010000
   17ae0:	20002b3c 	.word	0x20002b3c
   17ae4:	20002a2c 	.word	0x20002a2c

00017ae8 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   17ae8:	4b0c      	ldr	r3, [pc, #48]	; (17b1c <radio_ccm_is_done+0x34>)
   17aea:	2202      	movs	r2, #2
   17aec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   17af0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   17af4:	b16a      	cbz	r2, 17b12 <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   17af6:	2202      	movs	r2, #2
   17af8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   17afc:	4a08      	ldr	r2, [pc, #32]	; (17b20 <radio_ccm_is_done+0x38>)
   17afe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   17b02:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   17b06:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   17b0a:	fab0 f080 	clz	r0, r0
   17b0e:	0940      	lsrs	r0, r0, #5
   17b10:	4770      	bx	lr
		__WFE();
   17b12:	bf20      	wfe
		__SEV();
   17b14:	bf40      	sev
		__WFE();
   17b16:	bf20      	wfe
   17b18:	e7ea      	b.n	17af0 <radio_ccm_is_done+0x8>
   17b1a:	bf00      	nop
   17b1c:	4000f000 	.word	0x4000f000
   17b20:	e000e100 	.word	0xe000e100

00017b24 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   17b24:	4b03      	ldr	r3, [pc, #12]	; (17b34 <radio_ccm_mic_is_valid+0x10>)
   17b26:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   17b2a:	3000      	adds	r0, #0
   17b2c:	bf18      	it	ne
   17b2e:	2001      	movne	r0, #1
   17b30:	4770      	bx	lr
   17b32:	bf00      	nop
   17b34:	4000f000 	.word	0x4000f000

00017b38 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   17b38:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   17b3a:	4c13      	ldr	r4, [pc, #76]	; (17b88 <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   17b3c:	4d13      	ldr	r5, [pc, #76]	; (17b8c <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   17b3e:	2303      	movs	r3, #3
   17b40:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   17b44:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   17b48:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   17b4c:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   17b50:	3b01      	subs	r3, #1
   17b52:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   17b56:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   17b58:	4b0d      	ldr	r3, [pc, #52]	; (17b90 <radio_ar_configure+0x58>)
   17b5a:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   17b5e:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   17b60:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   17b64:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   17b68:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   17b6c:	f7ff fe3c 	bl	177e8 <radio_bc_configure>
	radio_bc_status_reset();

	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   17b70:	4b08      	ldr	r3, [pc, #32]	; (17b94 <radio_ar_configure+0x5c>)
   17b72:	4a09      	ldr	r2, [pc, #36]	; (17b98 <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   17b74:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   17b78:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   17b7c:	2240      	movs	r2, #64	; 0x40
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
   17b7e:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   17b82:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   17b86:	bd38      	pop	{r3, r4, r5, pc}
   17b88:	4000f000 	.word	0x4000f000
   17b8c:	40001000 	.word	0x40001000
   17b90:	20002a28 	.word	0x20002a28
   17b94:	4001f000 	.word	0x4001f000
   17b98:	40001128 	.word	0x40001128

00017b9c <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   17b9c:	4b01      	ldr	r3, [pc, #4]	; (17ba4 <radio_ar_match_get+0x8>)
   17b9e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   17ba2:	4770      	bx	lr
   17ba4:	4000f000 	.word	0x4000f000

00017ba8 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   17ba8:	4a04      	ldr	r2, [pc, #16]	; (17bbc <radio_ar_status_reset+0x14>)
   17baa:	2300      	movs	r3, #0
   17bac:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   17bb0:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   17bb4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   17bb8:	4770      	bx	lr
   17bba:	bf00      	nop
   17bbc:	40001000 	.word	0x40001000

00017bc0 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   17bc0:	4b08      	ldr	r3, [pc, #32]	; (17be4 <radio_ar_has_match+0x24>)
   17bc2:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   17bc6:	b160      	cbz	r0, 17be2 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   17bc8:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   17bcc:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   17bd0:	b138      	cbz	r0, 17be2 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   17bd2:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   17bd6:	b120      	cbz	r0, 17be2 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   17bd8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   17bdc:	fab0 f080 	clz	r0, r0
   17be0:	0940      	lsrs	r0, r0, #5
}
   17be2:	4770      	bx	lr
   17be4:	40001000 	.word	0x40001000

00017be8 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   17be8:	2901      	cmp	r1, #1
   17bea:	d005      	beq.n	17bf8 <mayfly_enable_cb+0x10>
   17bec:	4040      	eors	r0, r0
   17bee:	f380 8811 	msr	BASEPRI, r0
   17bf2:	f04f 0004 	mov.w	r0, #4
   17bf6:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   17bf8:	2018      	movs	r0, #24
	if (enable) {
   17bfa:	b10a      	cbz	r2, 17c00 <mayfly_enable_cb+0x18>
		irq_enable(SWI4_IRQn);
   17bfc:	f7e9 baa6 	b.w	114c <_arch_irq_enable>
	} else {
		irq_disable(SWI4_IRQn);
   17c00:	f7e9 bab4 	b.w	116c <_arch_irq_disable>

00017c04 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   17c04:	b139      	cbz	r1, 17c16 <mayfly_is_enabled+0x12>
   17c06:	2901      	cmp	r1, #1
   17c08:	d008      	beq.n	17c1c <mayfly_is_enabled+0x18>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   17c0a:	4040      	eors	r0, r0
   17c0c:	f380 8811 	msr	BASEPRI, r0
   17c10:	f04f 0004 	mov.w	r0, #4
   17c14:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   17c16:	200b      	movs	r0, #11
		return irq_is_enabled(SWI4_IRQn);
   17c18:	f7e9 babc 	b.w	1194 <_arch_irq_is_enabled>
   17c1c:	2018      	movs	r0, #24
   17c1e:	e7fb      	b.n	17c18 <mayfly_is_enabled+0x14>

00017c20 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   17c20:	4288      	cmp	r0, r1
   17c22:	d00a      	beq.n	17c3a <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   17c24:	b918      	cbnz	r0, 17c2e <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   17c26:	1e4b      	subs	r3, r1, #1
   17c28:	4258      	negs	r0, r3
   17c2a:	4158      	adcs	r0, r3
   17c2c:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   17c2e:	2801      	cmp	r0, #1
   17c30:	d105      	bne.n	17c3e <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   17c32:	fab1 f081 	clz	r0, r1
   17c36:	0940      	lsrs	r0, r0, #5
   17c38:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   17c3a:	2001      	movs	r0, #1
   17c3c:	4770      	bx	lr
   17c3e:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   17c40:	4770      	bx	lr
	...

00017c44 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   17c44:	4b08      	ldr	r3, [pc, #32]	; (17c68 <mayfly_pend+0x24>)
	(void)caller_id;

	switch (callee_id) {
   17c46:	b139      	cbz	r1, 17c58 <mayfly_pend+0x14>
   17c48:	2901      	cmp	r1, #1
   17c4a:	d00a      	beq.n	17c62 <mayfly_pend+0x1e>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   17c4c:	4040      	eors	r0, r0
   17c4e:	f380 8811 	msr	BASEPRI, r0
   17c52:	f04f 0004 	mov.w	r0, #4
   17c56:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17c58:	f44f 6200 	mov.w	r2, #2048	; 0x800
   17c5c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   17c60:	4770      	bx	lr
   17c62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   17c66:	e7f9      	b.n	17c5c <mayfly_pend+0x18>
   17c68:	e000e100 	.word	0xe000e100

00017c6c <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   17c6c:	2803      	cmp	r0, #3
   17c6e:	d905      	bls.n	17c7c <hal_ticker_instance0_caller_id_get+0x10>

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   17c70:	4040      	eors	r0, r0
   17c72:	f380 8811 	msr	BASEPRI, r0
   17c76:	f04f 0004 	mov.w	r0, #4
   17c7a:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   17c7c:	4b02      	ldr	r3, [pc, #8]	; (17c88 <hal_ticker_instance0_caller_id_get+0x1c>)
   17c7e:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   17c80:	2800      	cmp	r0, #0
   17c82:	d0f5      	beq.n	17c70 <hal_ticker_instance0_caller_id_get+0x4>

	return caller_id;
}
   17c84:	4770      	bx	lr
   17c86:	bf00      	nop
   17c88:	000228a6 	.word	0x000228a6

00017c8c <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   17c8c:	3802      	subs	r0, #2
{
   17c8e:	b410      	push	{r4}
   17c90:	461c      	mov	r4, r3
	switch (caller_id) {
   17c92:	2803      	cmp	r0, #3
   17c94:	d816      	bhi.n	17cc4 <hal_ticker_instance0_sched+0x38>
   17c96:	e8df f000 	tbb	[pc, r0]
   17c9a:	0b02      	.short	0x0b02
   17c9c:	2411      	.short	0x2411
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   17c9e:	2903      	cmp	r1, #3
   17ca0:	d110      	bne.n	17cc4 <hal_ticker_instance0_sched+0x38>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   17ca2:	4b13      	ldr	r3, [pc, #76]	; (17cf0 <hal_ticker_instance0_sched+0x64>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   17ca4:	2100      	movs	r1, #0
			m.param = instance;
   17ca6:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   17ca8:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   17caa:	bc10      	pop	{r4}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   17cac:	f7f3 b900 	b.w	aeb0 <mayfly_enqueue>
		switch (callee_id) {
   17cb0:	2904      	cmp	r1, #4
   17cb2:	d107      	bne.n	17cc4 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
   17cb4:	4b0f      	ldr	r3, [pc, #60]	; (17cf4 <hal_ticker_instance0_sched+0x68>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   17cb6:	2101      	movs	r1, #1
			m.param = instance;
   17cb8:	609c      	str	r4, [r3, #8]
   17cba:	e7f5      	b.n	17ca8 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   17cbc:	2903      	cmp	r1, #3
   17cbe:	d007      	beq.n	17cd0 <hal_ticker_instance0_sched+0x44>
   17cc0:	2904      	cmp	r1, #4
   17cc2:	d00a      	beq.n	17cda <hal_ticker_instance0_sched+0x4e>
		LL_ASSERT(0);
   17cc4:	4040      	eors	r0, r0
   17cc6:	f380 8811 	msr	BASEPRI, r0
   17cca:	f04f 0004 	mov.w	r0, #4
   17cce:	df02      	svc	2
			m.param = instance;
   17cd0:	4b09      	ldr	r3, [pc, #36]	; (17cf8 <hal_ticker_instance0_sched+0x6c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   17cd2:	2100      	movs	r1, #0
			m.param = instance;
   17cd4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   17cd6:	2001      	movs	r0, #1
   17cd8:	e7e7      	b.n	17caa <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   17cda:	4b08      	ldr	r3, [pc, #32]	; (17cfc <hal_ticker_instance0_sched+0x70>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   17cdc:	2101      	movs	r1, #1
			m.param = instance;
   17cde:	609c      	str	r4, [r3, #8]
   17ce0:	e7f9      	b.n	17cd6 <hal_ticker_instance0_sched+0x4a>
		switch (callee_id) {
   17ce2:	2904      	cmp	r1, #4
   17ce4:	d1ee      	bne.n	17cc4 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
   17ce6:	4b06      	ldr	r3, [pc, #24]	; (17d00 <hal_ticker_instance0_sched+0x74>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   17ce8:	2101      	movs	r1, #1
			m.param = instance;
   17cea:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   17cec:	2003      	movs	r0, #3
   17cee:	e7dc      	b.n	17caa <hal_ticker_instance0_sched+0x1e>
   17cf0:	2000e234 	.word	0x2000e234
   17cf4:	2000e244 	.word	0x2000e244
   17cf8:	2000e254 	.word	0x2000e254
   17cfc:	2000e264 	.word	0x2000e264
   17d00:	2000e274 	.word	0x2000e274

00017d04 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   17d04:	4601      	mov	r1, r0
   17d06:	2000      	movs	r0, #0
   17d08:	f7ff ba08 	b.w	1711c <cntr_cmp_set>

00017d0c <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
   17d0c:	4770      	bx	lr
	...

00017d10 <net_buf_pool_get>:
}
   17d10:	4b01      	ldr	r3, [pc, #4]	; (17d18 <net_buf_pool_get+0x8>)
   17d12:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   17d16:	4770      	bx	lr
   17d18:	2000ed2c 	.word	0x2000ed2c

00017d1c <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   17d1c:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   17d1e:	4b04      	ldr	r3, [pc, #16]	; (17d30 <net_buf_id+0x14>)
   17d20:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   17d24:	69db      	ldr	r3, [r3, #28]
   17d26:	1ac0      	subs	r0, r0, r3
}
   17d28:	4b02      	ldr	r3, [pc, #8]	; (17d34 <net_buf_id+0x18>)
	return buf - pool->__bufs;
   17d2a:	10c0      	asrs	r0, r0, #3
}
   17d2c:	4358      	muls	r0, r3
   17d2e:	4770      	bx	lr
   17d30:	2000ed2c 	.word	0x2000ed2c
   17d34:	aaaaaaab 	.word	0xaaaaaaab

00017d38 <fixed_data_alloc>:
{
   17d38:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   17d3a:	4b09      	ldr	r3, [pc, #36]	; (17d60 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   17d3c:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   17d3e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
   17d42:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   17d44:	699b      	ldr	r3, [r3, #24]
   17d46:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   17d48:	6823      	ldr	r3, [r4, #0]
   17d4a:	429a      	cmp	r2, r3
   17d4c:	bf94      	ite	ls
   17d4e:	600a      	strls	r2, [r1, #0]
   17d50:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   17d52:	f7ff ffe3 	bl	17d1c <net_buf_id>
   17d56:	e894 000c 	ldmia.w	r4, {r2, r3}
}
   17d5a:	fb02 3000 	mla	r0, r2, r0, r3
   17d5e:	bd10      	pop	{r4, pc}
   17d60:	2000ed2c 	.word	0x2000ed2c

00017d64 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   17d64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   17d68:	4605      	mov	r5, r0
   17d6a:	9101      	str	r1, [sp, #4]
   17d6c:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   17d6e:	f008 ff2f 	bl	20bd0 <_impl_k_uptime_get_32>
   17d72:	4607      	mov	r7, r0
	__asm__ volatile(
   17d74:	f04f 0320 	mov.w	r3, #32
   17d78:	f3ef 8811 	mrs	r8, BASEPRI
   17d7c:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   17d80:	8a6b      	ldrh	r3, [r5, #18]
   17d82:	2b00      	cmp	r3, #0
   17d84:	d03d      	beq.n	17e02 <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   17d86:	8a2a      	ldrh	r2, [r5, #16]
   17d88:	429a      	cmp	r2, r3
   17d8a:	d92a      	bls.n	17de2 <net_buf_alloc_len+0x7e>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
   17d8c:	2100      	movs	r1, #0
   17d8e:	4628      	mov	r0, r5
   17d90:	f008 fc79 	bl	20686 <k_queue_get>
			if (buf) {
   17d94:	4604      	mov	r4, r0
   17d96:	b320      	cbz	r0, 17de2 <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   17d98:	f388 8811 	msr	BASEPRI, r8
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   17d9c:	9b01      	ldr	r3, [sp, #4]
   17d9e:	2b00      	cmp	r3, #0
   17da0:	d03c      	beq.n	17e1c <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   17da2:	1c73      	adds	r3, r6, #1
   17da4:	2b01      	cmp	r3, #1
   17da6:	d906      	bls.n	17db6 <net_buf_alloc_len+0x52>
   17da8:	f008 ff12 	bl	20bd0 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   17dac:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   17dae:	42b0      	cmp	r0, r6
   17db0:	bf94      	ite	ls
   17db2:	1a36      	subls	r6, r6, r0
   17db4:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   17db6:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   17db8:	4f1e      	ldr	r7, [pc, #120]	; (17e34 <net_buf_alloc_len+0xd0>)
   17dba:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   17dbe:	4632      	mov	r2, r6
   17dc0:	699b      	ldr	r3, [r3, #24]
   17dc2:	681b      	ldr	r3, [r3, #0]
   17dc4:	a901      	add	r1, sp, #4
   17dc6:	681b      	ldr	r3, [r3, #0]
   17dc8:	4620      	mov	r0, r4
   17dca:	4798      	blx	r3
   17dcc:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   17dce:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   17dd0:	bb28      	cbnz	r0, 17e1e <net_buf_alloc_len+0xba>
	k_lifo_put(&pool->free, buf);
   17dd2:	79a0      	ldrb	r0, [r4, #6]
   17dd4:	4621      	mov	r1, r4
   17dd6:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   17dda:	f008 fc34 	bl	20646 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   17dde:	462c      	mov	r4, r5
   17de0:	e018      	b.n	17e14 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
   17de2:	8a6b      	ldrh	r3, [r5, #18]
   17de4:	1e5a      	subs	r2, r3, #1
   17de6:	826a      	strh	r2, [r5, #18]
   17de8:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   17dec:	8a2c      	ldrh	r4, [r5, #16]
   17dee:	1ae4      	subs	r4, r4, r3
   17df0:	69eb      	ldr	r3, [r5, #28]
   17df2:	2218      	movs	r2, #24
   17df4:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
   17df8:	4b0e      	ldr	r3, [pc, #56]	; (17e34 <net_buf_alloc_len+0xd0>)
   17dfa:	1aed      	subs	r5, r5, r3
   17dfc:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   17dfe:	71a5      	strb	r5, [r4, #6]
		goto success;
   17e00:	e7cc      	b.n	17d9c <net_buf_alloc_len+0x38>
   17e02:	f388 8811 	msr	BASEPRI, r8
	buf = k_lifo_get(&pool->free, timeout);
   17e06:	4631      	mov	r1, r6
   17e08:	4628      	mov	r0, r5
   17e0a:	f008 fc3c 	bl	20686 <k_queue_get>
	if (!buf) {
   17e0e:	4604      	mov	r4, r0
   17e10:	2800      	cmp	r0, #0
   17e12:	d1c3      	bne.n	17d9c <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   17e14:	4620      	mov	r0, r4
   17e16:	b002      	add	sp, #8
   17e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   17e1c:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
   17e1e:	2301      	movs	r3, #1
   17e20:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   17e22:	2300      	movs	r3, #0
	buf->frags = NULL;
   17e24:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
   17e26:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
   17e28:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
   17e2a:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   17e2c:	6923      	ldr	r3, [r4, #16]
   17e2e:	81e2      	strh	r2, [r4, #14]
   17e30:	60a3      	str	r3, [r4, #8]
	return buf;
   17e32:	e7ef      	b.n	17e14 <net_buf_alloc_len+0xb0>
   17e34:	2000ed2c 	.word	0x2000ed2c

00017e38 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   17e38:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   17e3a:	685b      	ldr	r3, [r3, #4]
   17e3c:	460a      	mov	r2, r1
   17e3e:	6819      	ldr	r1, [r3, #0]
   17e40:	f7ff bf90 	b.w	17d64 <net_buf_alloc_len>

00017e44 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   17e44:	b570      	push	{r4, r5, r6, lr}
   17e46:	4606      	mov	r6, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
   17e48:	f008 fc1d 	bl	20686 <k_queue_get>
	if (!buf) {
   17e4c:	4605      	mov	r5, r0
   17e4e:	b128      	cbz	r0, 17e5c <net_buf_get+0x18>
   17e50:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   17e52:	7963      	ldrb	r3, [r4, #5]
   17e54:	f013 0301 	ands.w	r3, r3, #1
   17e58:	d102      	bne.n	17e60 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   17e5a:	6023      	str	r3, [r4, #0]

	return buf;
}
   17e5c:	4628      	mov	r0, r5
   17e5e:	bd70      	pop	{r4, r5, r6, pc}
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   17e60:	2100      	movs	r1, #0
   17e62:	4630      	mov	r0, r6
   17e64:	f008 fc0f 	bl	20686 <k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   17e68:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   17e6a:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   17e6c:	f023 0301 	bic.w	r3, r3, #1
   17e70:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   17e72:	4604      	mov	r4, r0
   17e74:	e7ed      	b.n	17e52 <net_buf_get+0xe>

00017e76 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   17e76:	6883      	ldr	r3, [r0, #8]
   17e78:	4419      	add	r1, r3
   17e7a:	6001      	str	r1, [r0, #0]
   17e7c:	4770      	bx	lr

00017e7e <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   17e7e:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   17e80:	460a      	mov	r2, r1
   17e82:	6814      	ldr	r4, [r2, #0]
   17e84:	b914      	cbnz	r4, 17e8c <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   17e86:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   17e88:	f008 bbe1 	b.w	2064e <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   17e8c:	7953      	ldrb	r3, [r2, #5]
   17e8e:	f043 0301 	orr.w	r3, r3, #1
   17e92:	7153      	strb	r3, [r2, #5]
   17e94:	4622      	mov	r2, r4
   17e96:	e7f4      	b.n	17e82 <net_buf_put+0x4>

00017e98 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   17e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17e9a:	4d15      	ldr	r5, [pc, #84]	; (17ef0 <net_buf_unref+0x58>)
   17e9c:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   17e9e:	2600      	movs	r6, #0
	while (buf) {
   17ea0:	b904      	cbnz	r4, 17ea4 <net_buf_unref+0xc>
   17ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   17ea4:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   17ea6:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   17ea8:	3b01      	subs	r3, #1
   17eaa:	b2db      	uxtb	r3, r3
   17eac:	7123      	strb	r3, [r4, #4]
   17eae:	2b00      	cmp	r3, #0
   17eb0:	d1f7      	bne.n	17ea2 <net_buf_unref+0xa>
		if (buf->__buf) {
   17eb2:	6921      	ldr	r1, [r4, #16]
   17eb4:	b159      	cbz	r1, 17ece <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   17eb6:	7963      	ldrb	r3, [r4, #5]
   17eb8:	079b      	lsls	r3, r3, #30
   17eba:	d407      	bmi.n	17ecc <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   17ebc:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   17ebe:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   17ec2:	4620      	mov	r0, r4
   17ec4:	699b      	ldr	r3, [r3, #24]
   17ec6:	681b      	ldr	r3, [r3, #0]
   17ec8:	689b      	ldr	r3, [r3, #8]
   17eca:	4798      	blx	r3
			buf->__buf = NULL;
   17ecc:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   17ece:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   17ed0:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   17ed2:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   17ed6:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   17ed8:	695b      	ldr	r3, [r3, #20]
   17eda:	b11b      	cbz	r3, 17ee4 <net_buf_unref+0x4c>
			pool->destroy(buf);
   17edc:	4620      	mov	r0, r4
   17ede:	4798      	blx	r3
{
   17ee0:	463c      	mov	r4, r7
   17ee2:	e7dd      	b.n	17ea0 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   17ee4:	4621      	mov	r1, r4
   17ee6:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   17eea:	f008 fbac 	bl	20646 <k_queue_prepend>
   17eee:	e7f7      	b.n	17ee0 <net_buf_unref+0x48>
   17ef0:	2000ed2c 	.word	0x2000ed2c

00017ef4 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   17ef4:	7903      	ldrb	r3, [r0, #4]
   17ef6:	3301      	adds	r3, #1
   17ef8:	7103      	strb	r3, [r0, #4]
	return buf;
}
   17efa:	4770      	bx	lr

00017efc <net_buf_frag_last>:

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf);

	while (buf->frags) {
   17efc:	6803      	ldr	r3, [r0, #0]
   17efe:	b903      	cbnz	r3, 17f02 <net_buf_frag_last+0x6>
		buf = buf->frags;
	}

	return buf;
}
   17f00:	4770      	bx	lr
   17f02:	4618      	mov	r0, r3
   17f04:	e7fa      	b.n	17efc <net_buf_frag_last>

00017f06 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	NET_BUF_ASSERT(parent);
	NET_BUF_ASSERT(frag);

	if (parent->frags) {
   17f06:	6802      	ldr	r2, [r0, #0]
{
   17f08:	b510      	push	{r4, lr}
	if (parent->frags) {
   17f0a:	b11a      	cbz	r2, 17f14 <net_buf_frag_insert+0xe>
   17f0c:	460b      	mov	r3, r1
	while (buf->frags) {
   17f0e:	681c      	ldr	r4, [r3, #0]
   17f10:	b914      	cbnz	r4, 17f18 <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   17f12:	601a      	str	r2, [r3, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   17f14:	6001      	str	r1, [r0, #0]
   17f16:	bd10      	pop	{r4, pc}
	while (buf->frags) {
   17f18:	4623      	mov	r3, r4
   17f1a:	e7f8      	b.n	17f0e <net_buf_frag_insert+0x8>

00017f1c <net_buf_frag_add>:
}

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   17f1c:	b510      	push	{r4, lr}
	NET_BUF_ASSERT(frag);

	if (!head) {
   17f1e:	4604      	mov	r4, r0
   17f20:	b928      	cbnz	r0, 17f2e <net_buf_frag_add+0x12>
	buf->ref++;
   17f22:	790b      	ldrb	r3, [r1, #4]
   17f24:	3301      	adds	r3, #1
   17f26:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   17f28:	4608      	mov	r0, r1
   17f2a:	bd10      	pop	{r4, pc}
	while (buf->frags) {
   17f2c:	4618      	mov	r0, r3
   17f2e:	6803      	ldr	r3, [r0, #0]
   17f30:	2b00      	cmp	r3, #0
   17f32:	d1fb      	bne.n	17f2c <net_buf_frag_add+0x10>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   17f34:	f7ff ffe7 	bl	17f06 <net_buf_frag_insert>

	return head;
   17f38:	4620      	mov	r0, r4
}
   17f3a:	bd10      	pop	{r4, pc}

00017f3c <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   17f3c:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	NET_BUF_ASSERT(frag);

	if (parent) {
   17f3e:	b108      	cbz	r0, 17f44 <net_buf_frag_del+0x8>
		NET_BUF_ASSERT(parent->frags);
		NET_BUF_ASSERT(parent->frags == frag);
		parent->frags = frag->frags;
   17f40:	680b      	ldr	r3, [r1, #0]
   17f42:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   17f44:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   17f46:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   17f48:	4608      	mov	r0, r1
	frag->frags = NULL;
   17f4a:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   17f4c:	f7ff ffa4 	bl	17e98 <net_buf_unref>
#endif

	return next_frag;
}
   17f50:	4620      	mov	r0, r4
   17f52:	bd10      	pop	{r4, pc}

00017f54 <net_buf_simple_add>:
	return buf->data + buf->len;
   17f54:	8883      	ldrh	r3, [r0, #4]
   17f56:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   17f58:	4419      	add	r1, r3
   17f5a:	8081      	strh	r1, [r0, #4]
	return tail;
}
   17f5c:	18d0      	adds	r0, r2, r3
   17f5e:	4770      	bx	lr

00017f60 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   17f60:	b430      	push	{r4, r5}
   17f62:	8883      	ldrh	r3, [r0, #4]
   17f64:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   17f66:	189d      	adds	r5, r3, r2
   17f68:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   17f6a:	18e0      	adds	r0, r4, r3
}
   17f6c:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   17f6e:	f7e8 bc25 	b.w	7bc <memcpy>

00017f72 <net_buf_simple_add_u8>:
   17f72:	8883      	ldrh	r3, [r0, #4]
   17f74:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   17f76:	b510      	push	{r4, lr}
	buf->len += len;
   17f78:	1c5c      	adds	r4, r3, #1
   17f7a:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   17f7c:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   17f7e:	18d0      	adds	r0, r2, r3
   17f80:	bd10      	pop	{r4, pc}

00017f82 <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   17f82:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17f84:	ab02      	add	r3, sp, #8
   17f86:	8884      	ldrh	r4, [r0, #4]
   17f88:	f823 1d02 	strh.w	r1, [r3, #-2]!
   17f8c:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   17f8e:	1ca2      	adds	r2, r4, #2
   17f90:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   17f92:	4619      	mov	r1, r3
   17f94:	2202      	movs	r2, #2
   17f96:	1928      	adds	r0, r5, r4
   17f98:	f7e8 fc10 	bl	7bc <memcpy>
}
   17f9c:	b003      	add	sp, #12
   17f9e:	bd30      	pop	{r4, r5, pc}

00017fa0 <net_buf_simple_add_be16>:

void net_buf_simple_add_be16(struct net_buf_simple *buf, u16_t val)
{
   17fa0:	b513      	push	{r0, r1, r4, lr}
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
   17fa2:	020b      	lsls	r3, r1, #8
   17fa4:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
   17fa8:	a902      	add	r1, sp, #8
   17faa:	6804      	ldr	r4, [r0, #0]
   17fac:	f821 3d02 	strh.w	r3, [r1, #-2]!
   17fb0:	8883      	ldrh	r3, [r0, #4]
	buf->len += len;
   17fb2:	1c9a      	adds	r2, r3, #2
   17fb4:	8082      	strh	r2, [r0, #4]
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   17fb6:	2202      	movs	r2, #2
   17fb8:	18e0      	adds	r0, r4, r3
   17fba:	f7e8 fbff 	bl	7bc <memcpy>
}
   17fbe:	b002      	add	sp, #8
   17fc0:	bd10      	pop	{r4, pc}

00017fc2 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   17fc2:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   17fc4:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   17fc6:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   17fc8:	4411      	add	r1, r2
	buf->data -= len;
   17fca:	6003      	str	r3, [r0, #0]
	buf->len += len;
   17fcc:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   17fce:	4618      	mov	r0, r3
   17fd0:	4770      	bx	lr

00017fd2 <net_buf_simple_push_le16>:

void net_buf_simple_push_le16(struct net_buf_simple *buf, u16_t val)
{
   17fd2:	b513      	push	{r0, r1, r4, lr}
   17fd4:	ac02      	add	r4, sp, #8
	buf->data -= len;
   17fd6:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   17fd8:	8882      	ldrh	r2, [r0, #4]
{
   17fda:	f824 1d02 	strh.w	r1, [r4, #-2]!
	buf->data -= len;
   17fde:	3b02      	subs	r3, #2
	buf->len += len;
   17fe0:	3202      	adds	r2, #2
	buf->data -= len;
   17fe2:	6003      	str	r3, [r0, #0]
	buf->len += len;
   17fe4:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
   17fe6:	4621      	mov	r1, r4
   17fe8:	2202      	movs	r2, #2
   17fea:	4618      	mov	r0, r3
   17fec:	f7e8 fbe6 	bl	7bc <memcpy>
}
   17ff0:	b002      	add	sp, #8
   17ff2:	bd10      	pop	{r4, pc}

00017ff4 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   17ff4:	8883      	ldrh	r3, [r0, #4]
   17ff6:	1a5b      	subs	r3, r3, r1
   17ff8:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   17ffa:	6803      	ldr	r3, [r0, #0]
   17ffc:	4419      	add	r1, r3
   17ffe:	6001      	str	r1, [r0, #0]
}
   18000:	4608      	mov	r0, r1
   18002:	4770      	bx	lr

00018004 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   18004:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   18006:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   18008:	2101      	movs	r1, #1
	val = buf->data[0];
   1800a:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1800c:	f7ff fff2 	bl	17ff4 <net_buf_simple_pull>

	return val;
}
   18010:	4610      	mov	r0, r2
   18012:	bd08      	pop	{r3, pc}

00018014 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   18014:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   18016:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   18018:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   1801a:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1801c:	f7ff ffea 	bl	17ff4 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   18020:	4610      	mov	r0, r2
   18022:	bd08      	pop	{r3, pc}

00018024 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   18024:	6802      	ldr	r2, [r0, #0]
   18026:	6880      	ldr	r0, [r0, #8]
}
   18028:	1a10      	subs	r0, r2, r0
   1802a:	4770      	bx	lr

0001802c <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   1802c:	6802      	ldr	r2, [r0, #0]
   1802e:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   18030:	88c3      	ldrh	r3, [r0, #6]
   18032:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   18034:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   18036:	1a9b      	subs	r3, r3, r2
}
   18038:	1a18      	subs	r0, r3, r0
   1803a:	4770      	bx	lr

0001803c <net_is_ipv6_addr_unspecified>:
 *
 *  @return True if the address is unspecified, false otherwise.
 */
static inline bool net_is_ipv6_addr_unspecified(const struct in6_addr *addr)
{
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1803c:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1803e:	b942      	cbnz	r2, 18052 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   18040:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   18042:	b933      	cbnz	r3, 18052 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   18044:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   18046:	b922      	cbnz	r2, 18052 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   18048:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1804a:	fab0 f080 	clz	r0, r0
   1804e:	0940      	lsrs	r0, r0, #5
   18050:	4770      	bx	lr
   18052:	2000      	movs	r0, #0
   18054:	4770      	bx	lr
	...

00018058 <check_used_port>:

static int check_used_port(enum net_ip_protocol ip_proto,
			   u16_t local_port,
			   const struct sockaddr *local_addr)

{
   18058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1805c:	4c17      	ldr	r4, [pc, #92]	; (180bc <check_used_port+0x64>)
   1805e:	4607      	mov	r7, r0
   18060:	4688      	mov	r8, r1
   18062:	4615      	mov	r5, r2
   18064:	f504 7666 	add.w	r6, r4, #920	; 0x398

		if (local_addr->sa_family == AF_INET6) {
			if (net_ipv6_addr_cmp(
				    net_sin6_ptr(&contexts[i].local)->
							     sin6_addr,
				    &((struct sockaddr_in6 *)
   18068:	f102 0904 	add.w	r9, r2, #4
   1806c:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
		if (!net_context_is_used(&contexts[i])) {
   18070:	07da      	lsls	r2, r3, #31
   18072:	d405      	bmi.n	18080 <check_used_port+0x28>
   18074:	345c      	adds	r4, #92	; 0x5c
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   18076:	42a6      	cmp	r6, r4
   18078:	d1f8      	bne.n	1806c <check_used_port+0x14>
				return -EEXIST;
			}
		}
	}

	return 0;
   1807a:	2000      	movs	r0, #0
   1807c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
enum net_ip_protocol net_context_get_ip_proto(struct net_context *context)
{
	NET_ASSERT(context);

	if (context->flags & NET_CONTEXT_PROTO) {
		return IPPROTO_TCP;
   18080:	f013 0f40 	tst.w	r3, #64	; 0x40
   18084:	bf0c      	ite	eq
   18086:	2311      	moveq	r3, #17
   18088:	2306      	movne	r3, #6
		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1808a:	42bb      	cmp	r3, r7
   1808c:	d1f2      	bne.n	18074 <check_used_port+0x1c>
   1808e:	8963      	ldrh	r3, [r4, #10]
   18090:	4543      	cmp	r3, r8
   18092:	d1ef      	bne.n	18074 <check_used_port+0x1c>
		if (local_addr->sa_family == AF_INET6) {
   18094:	882b      	ldrh	r3, [r5, #0]
   18096:	2b0a      	cmp	r3, #10
   18098:	d10a      	bne.n	180b0 <check_used_port+0x58>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1809a:	2210      	movs	r2, #16
   1809c:	4649      	mov	r1, r9
   1809e:	68e0      	ldr	r0, [r4, #12]
   180a0:	f7e8 fb5f 	bl	762 <memcmp>
			if (net_ipv6_addr_cmp(
   180a4:	2800      	cmp	r0, #0
   180a6:	d1e5      	bne.n	18074 <check_used_port+0x1c>
				return -EEXIST;
   180a8:	f06f 0010 	mvn.w	r0, #16
   180ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   180b0:	68e3      	ldr	r3, [r4, #12]
   180b2:	681a      	ldr	r2, [r3, #0]
   180b4:	686b      	ldr	r3, [r5, #4]
			if (net_ipv4_addr_cmp(
   180b6:	429a      	cmp	r2, r3
   180b8:	d1dc      	bne.n	18074 <check_used_port+0x1c>
   180ba:	e7f5      	b.n	180a8 <check_used_port+0x50>
   180bc:	20002c74 	.word	0x20002c74

000180c0 <find_available_port>:
}

static u16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
   180c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u16_t local_port;

	do {
		local_port = sys_rand32_get() | 0x8000;
   180c2:	4f0c      	ldr	r7, [pc, #48]	; (180f4 <find_available_port+0x34>)
{
   180c4:	4606      	mov	r6, r0
   180c6:	460d      	mov	r5, r1
		local_port = sys_rand32_get() | 0x8000;
   180c8:	f7ea f9d2 	bl	2470 <sys_rand32_get>
	if (context->flags & NET_CONTEXT_PROTO) {
   180cc:	f896 3055 	ldrb.w	r3, [r6, #85]	; 0x55
   180d0:	ea40 0407 	orr.w	r4, r0, r7
   180d4:	ba64      	rev16	r4, r4
		return IPPROTO_TCP;
   180d6:	f013 0f40 	tst.w	r3, #64	; 0x40
   180da:	b2a4      	uxth	r4, r4
		if (local_port <= 1023) {
			/* 0 - 1023 ports are reserved */
			continue;
		}
	} while (check_used_port(
   180dc:	bf0c      	ite	eq
   180de:	2011      	moveq	r0, #17
   180e0:	2006      	movne	r0, #6
   180e2:	462a      	mov	r2, r5
   180e4:	4621      	mov	r1, r4
   180e6:	f7ff ffb7 	bl	18058 <check_used_port>
				net_context_get_ip_proto(context),
				htons(local_port), addr) == -EEXIST);
   180ea:	3011      	adds	r0, #17
   180ec:	d0ec      	beq.n	180c8 <find_available_port+0x8>

	return htons(local_port);
}
   180ee:	4620      	mov	r0, r4
   180f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   180f2:	bf00      	nop
   180f4:	ffff8000 	.word	0xffff8000

000180f8 <packet_received>:
}

static enum net_verdict packet_received(struct net_conn *conn,
					struct net_pkt *pkt,
					void *user_data)
{
   180f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   180fc:	4d32      	ldr	r5, [pc, #200]	; (181c8 <packet_received+0xd0>)
   180fe:	460c      	mov	r4, r1
   18100:	4690      	mov	r8, r2
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   18102:	f04f 0900 	mov.w	r9, #0
   18106:	462f      	mov	r7, r5
   18108:	235c      	movs	r3, #92	; 0x5c
		if (!net_context_is_used(&contexts[i])) {
   1810a:	f895 2055 	ldrb.w	r2, [r5, #85]	; 0x55
   1810e:	07d2      	lsls	r2, r2, #31
   18110:	fb03 f609 	mul.w	r6, r3, r9
   18114:	d502      	bpl.n	1811c <packet_received+0x24>
		if (contexts[i].conn_handler == conn_handler) {
   18116:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   18118:	4290      	cmp	r0, r2
   1811a:	d00d      	beq.n	18138 <packet_received+0x40>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1811c:	f109 0901 	add.w	r9, r9, #1
   18120:	f1b9 0f0a 	cmp.w	r9, #10
   18124:	f105 055c 	add.w	r5, r5, #92	; 0x5c
   18128:	d1ef      	bne.n	1810a <packet_received+0x12>
static inline void net_context_set_iface(struct net_context *context,
					 struct net_if *iface)
{
	NET_ASSERT(iface);

	context->iface = net_if_get_by_iface(iface);
   1812a:	6960      	ldr	r0, [r4, #20]
   1812c:	f001 faba 	bl	196a4 <net_if_get_by_iface>
   18130:	2300      	movs	r3, #0
   18132:	f883 3054 	strb.w	r3, [r3, #84]	; 0x54
   18136:	deff      	udf	#255	; 0xff
   18138:	6960      	ldr	r0, [r4, #20]
   1813a:	f001 fab3 	bl	196a4 <net_if_get_by_iface>

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */

	if (!context->recv_cb) {
   1813e:	19bb      	adds	r3, r7, r6
   18140:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
}

static inline void net_pkt_set_context(struct net_pkt *pkt,
				       struct net_context *ctx)
{
	pkt->context = ctx;
   18144:	60e5      	str	r5, [r4, #12]
   18146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18148:	2b00      	cmp	r3, #0
   1814a:	d03a      	beq.n	181c2 <packet_received+0xca>
	if (context->flags & NET_CONTEXT_PROTO) {
   1814c:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
   18150:	f013 0340 	ands.w	r3, r3, #64	; 0x40
   18154:	d122      	bne.n	1819c <packet_received+0xa4>
   18156:	68a2      	ldr	r2, [r4, #8]
	size_t bytes = 0;
   18158:	469a      	mov	sl, r3
   1815a:	e002      	b.n	18162 <packet_received+0x6a>
		bytes += buf->len;
   1815c:	8993      	ldrh	r3, [r2, #12]
		buf = buf->frags;
   1815e:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   18160:	449a      	add	sl, r3
	while (buf) {
   18162:	2a00      	cmp	r2, #0
   18164:	d1fa      	bne.n	1815c <packet_received+0x64>
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   18166:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
				net_pkt_ipv6_ext_len(pkt) +
   1816a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1816e:	4419      	add	r1, r3
   18170:	f10d 0206 	add.w	r2, sp, #6
   18174:	3108      	adds	r1, #8
   18176:	4620      	mov	r0, r4
   18178:	f001 fe62 	bl	19e40 <net_frag_get_pos>
	if (frag) {
   1817c:	b120      	cbz	r0, 18188 <packet_received+0x90>
		net_pkt_set_appdata(pkt, frag->data + offset);
   1817e:	6883      	ldr	r3, [r0, #8]
   18180:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   18184:	4413      	add	r3, r2
	return pkt->appdata;
}

static inline void net_pkt_set_appdata(struct net_pkt *pkt, u8_t *data)
{
	pkt->appdata = data;
   18186:	61a3      	str	r3, [r4, #24]
	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   18188:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
			       net_pkt_ipv6_ext_len(pkt) - proto_len);
   1818c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   18190:	441a      	add	r2, r3
   18192:	f5c2 437f 	rsb	r3, r2, #65280	; 0xff00
   18196:	33f8      	adds	r3, #248	; 0xf8
   18198:	4453      	add	r3, sl
	return pkt->appdatalen;
}

static inline void net_pkt_set_appdatalen(struct net_pkt *pkt, u16_t len)
{
	pkt->appdatalen = len;
   1819a:	8663      	strh	r3, [r4, #50]	; 0x32
		net_pkt_appdata(pkt), net_pkt_appdatalen(pkt),
		net_pkt_get_len(pkt));

	net_stats_update_tcp_recv(net_pkt_appdatalen(pkt));     

	context->recv_cb(context, pkt, 0, user_data);   // pkt send to udp received function in udp.c 133
   1819c:	235c      	movs	r3, #92	; 0x5c
   1819e:	fb03 7909 	mla	r9, r3, r9, r7
   181a2:	2200      	movs	r2, #0
   181a4:	4643      	mov	r3, r8
   181a6:	4621      	mov	r1, r4
   181a8:	4628      	mov	r0, r5
   181aa:	f8d9 9030 	ldr.w	r9, [r9, #48]	; 0x30
   181ae:	47c8      	blx	r9


#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	k_sem_give(&context->recv_data_wait);
   181b0:	f106 003c 	add.w	r0, r6, #60	; 0x3c
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   181b4:	4438      	add	r0, r7
   181b6:	f008 fc8d 	bl	20ad4 <_impl_k_sem_give>
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return NET_OK;
   181ba:	2000      	movs	r0, #0
}
   181bc:	b002      	add	sp, #8
   181be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NET_DROP;
   181c2:	2002      	movs	r0, #2
   181c4:	e7fa      	b.n	181bc <packet_received+0xc4>
   181c6:	bf00      	nop
   181c8:	20002c74 	.word	0x20002c74

000181cc <net_context_get>:
	if (family == AF_INET) {
   181cc:	2802      	cmp	r0, #2
{
   181ce:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181d2:	469a      	mov	sl, r3
	if (family == AF_INET) {
   181d4:	d06d      	beq.n	182b2 <net_context_get+0xe6>
	if (type == SOCK_STREAM) {
   181d6:	2901      	cmp	r1, #1
   181d8:	d071      	beq.n	182be <net_context_get+0xf2>
	if (ip_proto == IPPROTO_TCP) {
   181da:	2a06      	cmp	r2, #6
   181dc:	d072      	beq.n	182c4 <net_context_get+0xf8>
	if (family != AF_INET && family != AF_INET6) {
   181de:	280a      	cmp	r0, #10
   181e0:	d16a      	bne.n	182b8 <net_context_get+0xec>
	if (type != SOCK_DGRAM && type != SOCK_STREAM) {
   181e2:	2902      	cmp	r1, #2
   181e4:	d16b      	bne.n	182be <net_context_get+0xf2>
	if (ip_proto != IPPROTO_UDP && ip_proto != IPPROTO_TCP) {
   181e6:	2a11      	cmp	r2, #17
   181e8:	d16c      	bne.n	182c4 <net_context_get+0xf8>
	if (!context) {
   181ea:	2b00      	cmp	r3, #0
   181ec:	d06d      	beq.n	182ca <net_context_get+0xfe>
   181ee:	4d38      	ldr	r5, [pc, #224]	; (182d0 <net_context_get+0x104>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   181f0:	4838      	ldr	r0, [pc, #224]	; (182d4 <net_context_get+0x108>)
   181f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   181f6:	f008 fccd 	bl	20b94 <_impl_k_sem_take>
   181fa:	46a9      	mov	r9, r5
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   181fc:	2300      	movs	r3, #0
   181fe:	225c      	movs	r2, #92	; 0x5c
		if (net_context_is_used(&contexts[i])) {
   18200:	f895 4055 	ldrb.w	r4, [r5, #85]	; 0x55
   18204:	f014 0401 	ands.w	r4, r4, #1
   18208:	fb02 f603 	mul.w	r6, r2, r3
   1820c:	d00c      	beq.n	18228 <net_context_get+0x5c>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1820e:	3301      	adds	r3, #1
   18210:	2b0a      	cmp	r3, #10
   18212:	f105 055c 	add.w	r5, r5, #92	; 0x5c
   18216:	d1f3      	bne.n	18200 <net_context_get+0x34>
	int i, ret = -ENOENT;
   18218:	f06f 0401 	mvn.w	r4, #1
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1821c:	482d      	ldr	r0, [pc, #180]	; (182d4 <net_context_get+0x108>)
   1821e:	f008 fc59 	bl	20ad4 <_impl_k_sem_give>
}
   18222:	4620      	mov	r0, r4
   18224:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		contexts[i].iface = 0;
   18228:	eb09 0706 	add.w	r7, r9, r6
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1822c:	1d3b      	adds	r3, r7, #4
   1822e:	f887 4054 	strb.w	r4, [r7, #84]	; 0x54
		contexts[i].flags = 0;
   18232:	f887 4055 	strb.w	r4, [r7, #85]	; 0x55
   18236:	f04f 0b01 	mov.w	fp, #1
   1823a:	f3bf 8f5b 	dmb	ish
   1823e:	e853 2f00 	ldrex	r2, [r3]
   18242:	e843 b100 	strex	r1, fp, [r3]
   18246:	2900      	cmp	r1, #0
   18248:	d1f9      	bne.n	1823e <net_context_get+0x72>
   1824a:	f3bf 8f5b 	dmb	ish
	context->flags &= ~NET_CONTEXT_PROTO;
   1824e:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
   18252:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   18256:	f043 0310 	orr.w	r3, r3, #16
		memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
   1825a:	f106 0014 	add.w	r0, r6, #20
		memset(&contexts[i].local, 0, sizeof(struct sockaddr_ptr));
   1825e:	f106 0808 	add.w	r8, r6, #8
   18262:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
   18266:	44c8      	add	r8, r9
		memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
   18268:	2218      	movs	r2, #24
   1826a:	4621      	mov	r1, r4
   1826c:	4448      	add	r0, r9
   1826e:	f7e8 fad1 	bl	814 <memset>
		memset(&contexts[i].local, 0, sizeof(struct sockaddr_ptr));
   18272:	220c      	movs	r2, #12
   18274:	4621      	mov	r1, r4
   18276:	4640      	mov	r0, r8
   18278:	f7e8 facc 	bl	814 <memset>
			addr6->sin6_port = find_available_port(&contexts[i],
   1827c:	4641      	mov	r1, r8
   1827e:	4628      	mov	r0, r5
   18280:	f7ff ff1e 	bl	180c0 <find_available_port>
   18284:	f8a8 0002 	strh.w	r0, [r8, #2]
			if (!addr6->sin6_port) {
   18288:	b180      	cbz	r0, 182ac <net_context_get+0xe0>
		k_sem_init(&contexts[i].recv_data_wait, 1, UINT_MAX);
   1828a:	f106 003c 	add.w	r0, r6, #60	; 0x3c
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1828e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18292:	4659      	mov	r1, fp
   18294:	4448      	add	r0, r9
   18296:	f008 fc13 	bl	20ac0 <_impl_k_sem_init>
		contexts[i].flags |= NET_CONTEXT_IN_USE;
   1829a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
   1829e:	ea43 030b 	orr.w	r3, r3, fp
   182a2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
		*context = &contexts[i];
   182a6:	f8ca 5000 	str.w	r5, [sl]
		break;
   182aa:	e7b7      	b.n	1821c <net_context_get+0x50>
				ret = -EADDRINUSE;
   182ac:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   182b0:	e7b4      	b.n	1821c <net_context_get+0x50>
		return -EPFNOSUPPORT;
   182b2:	f06f 042d 	mvn.w	r4, #45	; 0x2d
   182b6:	e7b4      	b.n	18222 <net_context_get+0x56>
		return -EAFNOSUPPORT;
   182b8:	f06f 042e 	mvn.w	r4, #46	; 0x2e
   182bc:	e7b1      	b.n	18222 <net_context_get+0x56>
		return -EPROTOTYPE;
   182be:	f06f 0428 	mvn.w	r4, #40	; 0x28
   182c2:	e7ae      	b.n	18222 <net_context_get+0x56>
		return -EPROTONOSUPPORT;
   182c4:	f06f 042a 	mvn.w	r4, #42	; 0x2a
   182c8:	e7ab      	b.n	18222 <net_context_get+0x56>
		return -EINVAL;
   182ca:	f06f 0415 	mvn.w	r4, #21
   182ce:	e7a8      	b.n	18222 <net_context_get+0x56>
   182d0:	20002c74 	.word	0x20002c74
   182d4:	2000300c 	.word	0x2000300c

000182d8 <net_context_unref>:
{
   182d8:	b510      	push	{r4, lr}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   182da:	1d03      	adds	r3, r0, #4
   182dc:	4604      	mov	r4, r0
   182de:	f3bf 8f5b 	dmb	ish
   182e2:	e853 0f00 	ldrex	r0, [r3]
   182e6:	1e42      	subs	r2, r0, #1
   182e8:	e843 2100 	strex	r1, r2, [r3]
   182ec:	2900      	cmp	r1, #0
   182ee:	d1f8      	bne.n	182e2 <net_context_unref+0xa>
   182f0:	f3bf 8f5b 	dmb	ish
	if (old_rc != 1) {
   182f4:	2801      	cmp	r0, #1
   182f6:	d001      	beq.n	182fc <net_context_unref+0x24>
		return old_rc - 1;
   182f8:	3801      	subs	r0, #1
   182fa:	bd10      	pop	{r4, pc}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   182fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18300:	4809      	ldr	r0, [pc, #36]	; (18328 <net_context_unref+0x50>)
   18302:	f008 fc47 	bl	20b94 <_impl_k_sem_take>
	if (context->conn_handler) {
   18306:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   18308:	b118      	cbz	r0, 18312 <net_context_unref+0x3a>
		net_conn_unregister(context->conn_handler);
   1830a:	f006 fb35 	bl	1e978 <net_conn_unregister>
		context->conn_handler = NULL;
   1830e:	2300      	movs	r3, #0
   18310:	62e3      	str	r3, [r4, #44]	; 0x2c
	context->flags &= ~NET_CONTEXT_IN_USE;
   18312:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   18316:	4804      	ldr	r0, [pc, #16]	; (18328 <net_context_unref+0x50>)
   18318:	f023 0307 	bic.w	r3, r3, #7
   1831c:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
   18320:	f008 fbd8 	bl	20ad4 <_impl_k_sem_give>
   18324:	2000      	movs	r0, #0
}
   18326:	bd10      	pop	{r4, pc}
   18328:	2000300c 	.word	0x2000300c

0001832c <net_context_put>:
{
   1832c:	b510      	push	{r4, lr}
	if (!PART_OF_ARRAY(contexts, context)) {
   1832e:	b170      	cbz	r0, 1834e <net_context_put+0x22>
   18330:	4a08      	ldr	r2, [pc, #32]	; (18354 <net_context_put+0x28>)
   18332:	4290      	cmp	r0, r2
   18334:	d30b      	bcc.n	1834e <net_context_put+0x22>
   18336:	f502 7266 	add.w	r2, r2, #920	; 0x398
   1833a:	4290      	cmp	r0, r2
   1833c:	d207      	bcs.n	1834e <net_context_put+0x22>
	context->connect_cb = NULL;
   1833e:	2400      	movs	r4, #0
   18340:	6384      	str	r4, [r0, #56]	; 0x38
	context->recv_cb = NULL;
   18342:	6304      	str	r4, [r0, #48]	; 0x30
	context->send_cb = NULL;
   18344:	6344      	str	r4, [r0, #52]	; 0x34
	net_context_unref(context);
   18346:	f7ff ffc7 	bl	182d8 <net_context_unref>
	return 0;
   1834a:	4620      	mov	r0, r4
   1834c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1834e:	f06f 0015 	mvn.w	r0, #21
}
   18352:	bd10      	pop	{r4, pc}
   18354:	20002c74 	.word	0x20002c74

00018358 <net_context_bind>:
	if (context->conn_handler) {
   18358:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   1835a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1835c:	4606      	mov	r6, r0
   1835e:	460d      	mov	r5, r1
	if (context->conn_handler) {
   18360:	2b00      	cmp	r3, #0
   18362:	d142      	bne.n	183ea <net_context_bind+0x92>
	if (addr->sa_family == AF_INET6) {
   18364:	8809      	ldrh	r1, [r1, #0]
   18366:	290a      	cmp	r1, #10
   18368:	d142      	bne.n	183f0 <net_context_bind+0x98>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1836a:	2a17      	cmp	r2, #23
		struct net_if *iface = NULL;
   1836c:	9301      	str	r3, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1836e:	d93f      	bls.n	183f0 <net_context_bind+0x98>
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   18370:	462c      	mov	r4, r5
   18372:	f814 3f04 	ldrb.w	r3, [r4, #4]!
   18376:	2bff      	cmp	r3, #255	; 0xff
   18378:	d11d      	bne.n	183b6 <net_context_bind+0x5e>
			maddr = net_if_ipv6_maddr_lookup(&addr6->sin6_addr,
   1837a:	a901      	add	r1, sp, #4
   1837c:	4620      	mov	r0, r4
   1837e:	f000 fe1f 	bl	18fc0 <net_if_ipv6_maddr_lookup>
			if (!maddr) {
   18382:	b918      	cbnz	r0, 1838c <net_context_bind+0x34>
				return -ENOENT;
   18384:	f06f 0001 	mvn.w	r0, #1
}
   18388:	b002      	add	sp, #8
   1838a:	bd70      	pop	{r4, r5, r6, pc}
			ptr = &maddr->address.in6_addr;
   1838c:	f100 0408 	add.w	r4, r0, #8
		if (!iface) {
   18390:	9801      	ldr	r0, [sp, #4]
   18392:	b338      	cbz	r0, 183e4 <net_context_bind+0x8c>
	context->iface = net_if_get_by_iface(iface);
   18394:	f001 f986 	bl	196a4 <net_if_get_by_iface>
   18398:	f886 0054 	strb.w	r0, [r6, #84]	; 0x54
		if (addr6->sin6_port) {
   1839c:	8869      	ldrh	r1, [r5, #2]
		net_sin6_ptr(&context->local)->sin6_addr = ptr;
   1839e:	60f4      	str	r4, [r6, #12]
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   183a0:	200a      	movs	r0, #10
   183a2:	8130      	strh	r0, [r6, #8]
		if (addr6->sin6_port) {
   183a4:	b1d1      	cbz	r1, 183dc <net_context_bind+0x84>
			ret = check_used_port(AF_INET6, addr6->sin6_port,
   183a6:	462a      	mov	r2, r5
   183a8:	f7ff fe56 	bl	18058 <check_used_port>
			if (!ret) {
   183ac:	2800      	cmp	r0, #0
   183ae:	d1eb      	bne.n	18388 <net_context_bind+0x30>
				net_sin6_ptr(&context->local)->sin6_port =
   183b0:	886b      	ldrh	r3, [r5, #2]
   183b2:	8173      	strh	r3, [r6, #10]
   183b4:	e7e8      	b.n	18388 <net_context_bind+0x30>
		} else if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   183b6:	4620      	mov	r0, r4
   183b8:	f7ff fe40 	bl	1803c <net_is_ipv6_addr_unspecified>
   183bc:	b130      	cbz	r0, 183cc <net_context_bind+0x74>
			iface = net_if_get_default();
   183be:	f000 fb8d 	bl	18adc <net_if_get_default>
   183c2:	9001      	str	r0, [sp, #4]
			ptr = (struct in6_addr *)net_ipv6_unspecified_address();
   183c4:	f003 fd64 	bl	1be90 <net_ipv6_unspecified_address>
   183c8:	4604      	mov	r4, r0
   183ca:	e7e1      	b.n	18390 <net_context_bind+0x38>
			ifaddr = net_if_ipv6_addr_lookup(&addr6->sin6_addr,
   183cc:	a901      	add	r1, sp, #4
   183ce:	4620      	mov	r0, r4
   183d0:	f000 fbaa 	bl	18b28 <net_if_ipv6_addr_lookup>
			if (!ifaddr) {
   183d4:	2800      	cmp	r0, #0
   183d6:	d0d5      	beq.n	18384 <net_context_bind+0x2c>
			ptr = &ifaddr->address.in6_addr;
   183d8:	1d04      	adds	r4, r0, #4
   183da:	e7d9      	b.n	18390 <net_context_bind+0x38>
			addr6->sin6_port =
   183dc:	8973      	ldrh	r3, [r6, #10]
   183de:	806b      	strh	r3, [r5, #2]
		return 0;
   183e0:	4608      	mov	r0, r1
   183e2:	e7d1      	b.n	18388 <net_context_bind+0x30>
			return -EADDRNOTAVAIL;
   183e4:	f06f 0030 	mvn.w	r0, #48	; 0x30
   183e8:	e7ce      	b.n	18388 <net_context_bind+0x30>
		return -EISCONN;
   183ea:	f06f 0037 	mvn.w	r0, #55	; 0x37
   183ee:	e7cb      	b.n	18388 <net_context_bind+0x30>
	return -EINVAL;
   183f0:	f06f 0015 	mvn.w	r0, #21
   183f4:	e7c8      	b.n	18388 <net_context_bind+0x30>

000183f6 <bind_default>:
{
   183f6:	b530      	push	{r4, r5, lr}
	if (context->flags & NET_CONTEXT_FAMILY) {
   183f8:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
   183fc:	06db      	lsls	r3, r3, #27
   183fe:	b087      	sub	sp, #28
   18400:	4604      	mov	r4, r0
   18402:	d405      	bmi.n	18410 <bind_default+0x1a>
	return -EINVAL;
   18404:	f06f 0015 	mvn.w	r0, #21
}
   18408:	b007      	add	sp, #28
   1840a:	bd30      	pop	{r4, r5, pc}
			return 0;
   1840c:	2000      	movs	r0, #0
   1840e:	e7fb      	b.n	18408 <bind_default+0x12>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   18410:	68c3      	ldr	r3, [r0, #12]
   18412:	2b00      	cmp	r3, #0
   18414:	d1fa      	bne.n	1840c <bind_default+0x16>
		addr6.sin6_family = AF_INET6;
   18416:	ad06      	add	r5, sp, #24
   18418:	230a      	movs	r3, #10
   1841a:	f825 3d18 	strh.w	r3, [r5, #-24]!
		memcpy(&addr6.sin6_addr, net_ipv6_unspecified_address(),
   1841e:	f003 fd37 	bl	1be90 <net_ipv6_unspecified_address>
   18422:	2210      	movs	r2, #16
   18424:	4601      	mov	r1, r0
   18426:	a801      	add	r0, sp, #4
   18428:	f7e8 f9c8 	bl	7bc <memcpy>
			find_available_port(context,
   1842c:	4629      	mov	r1, r5
   1842e:	4620      	mov	r0, r4
   18430:	f7ff fe46 	bl	180c0 <find_available_port>
		return net_context_bind(context, (struct sockaddr *)&addr6,
   18434:	2218      	movs	r2, #24
		addr6.sin6_port =
   18436:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr6,
   1843a:	4629      	mov	r1, r5
   1843c:	4620      	mov	r0, r4
   1843e:	f7ff ff8b 	bl	18358 <net_context_bind>
   18442:	e7e1      	b.n	18408 <bind_default+0x12>

00018444 <sendto.isra.23>:
static int sendto(struct net_pkt *pkt,
   18444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18448:	68c4      	ldr	r4, [r0, #12]
   1844a:	9f08      	ldr	r7, [sp, #32]
   1844c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   18450:	461e      	mov	r6, r3
   18452:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   18456:	460d      	mov	r5, r1
	if (!net_context_is_used(context)) {
   18458:	07d9      	lsls	r1, r3, #31
static int sendto(struct net_pkt *pkt,
   1845a:	4681      	mov	r9, r0
   1845c:	4692      	mov	sl, r2
	if (!net_context_is_used(context)) {
   1845e:	d52c      	bpl.n	184ba <sendto.isra.23+0x76>
	if (context->flags & NET_CONTEXT_PROTO) {
   18460:	065a      	lsls	r2, r3, #25
   18462:	d536      	bpl.n	184d2 <sendto.isra.23+0x8e>
	if (!dst_addr) {
   18464:	b38d      	cbz	r5, 184ca <sendto.isra.23+0x86>
	return pkt->family;
   18466:	f899 3036 	ldrb.w	r3, [r9, #54]	; 0x36
	if (net_pkt_family(pkt) == AF_INET6) {
   1846a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1846e:	2b0a      	cmp	r3, #10
   18470:	d127      	bne.n	184c2 <sendto.isra.23+0x7e>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   18472:	f1ba 0f17 	cmp.w	sl, #23
   18476:	d924      	bls.n	184c2 <sendto.isra.23+0x7e>
		if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   18478:	1d29      	adds	r1, r5, #4
   1847a:	4608      	mov	r0, r1
   1847c:	f7ff fdde 	bl	1803c <net_is_ipv6_addr_unspecified>
   18480:	bb18      	cbnz	r0, 184ca <sendto.isra.23+0x86>
   18482:	f894 2055 	ldrb.w	r2, [r4, #85]	; 0x55
   18486:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   1848a:	d029      	beq.n	184e0 <sendto.isra.23+0x9c>
		return -EPROTONOSUPPORT;
   1848c:	f06f 002a 	mvn.w	r0, #42	; 0x2a
   18490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		r = net_ipv6_finalize(context, pkt);
   18494:	4629      	mov	r1, r5
   18496:	4620      	mov	r0, r4
   18498:	f003 ff64 	bl	1c364 <net_ipv6_finalize>
	if (ret < 0) {
   1849c:	2800      	cmp	r0, #0
   1849e:	db35      	blt.n	1850c <sendto.isra.23+0xc8>
	context->send_cb = cb;
   184a0:	6366      	str	r6, [r4, #52]	; 0x34
	context->user_data = user_data;
   184a2:	f8c4 8000 	str.w	r8, [r4]
	pkt->token = token;
   184a6:	612f      	str	r7, [r5, #16]
   184a8:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   184ac:	065b      	lsls	r3, r3, #25
   184ae:	d4ed      	bmi.n	1848c <sendto.isra.23+0x48>
		return net_send_data(pkt);
   184b0:	4628      	mov	r0, r5
}
   184b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return net_send_data(pkt);
   184b6:	f000 b989 	b.w	187cc <net_send_data>
		return -EBADF;
   184ba:	f06f 0008 	mvn.w	r0, #8
   184be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
   184c2:	f06f 0015 	mvn.w	r0, #21
   184c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EDESTADDRREQ;
   184ca:	f06f 0027 	mvn.w	r0, #39	; 0x27
   184ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ret = bind_default(context);
   184d2:	4620      	mov	r0, r4
   184d4:	f7ff ff8f 	bl	183f6 <bind_default>
		if (ret) {
   184d8:	2800      	cmp	r0, #0
   184da:	d0c3      	beq.n	18464 <sendto.isra.23+0x20>
   184dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pkt = net_ipv6_create(context, pkt, NULL, &addr6->sin6_addr);
   184e0:	460b      	mov	r3, r1
   184e2:	4620      	mov	r0, r4
   184e4:	4649      	mov	r1, r9
   184e6:	f003 fd47 	bl	1bf78 <net_ipv6_create>
   184ea:	4601      	mov	r1, r0
				     net_pkt_ip_hdr_len(pkt) +
   184ec:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
				     net_pkt_ipv6_ext_len(pkt),
   184f0:	f891 2039 	ldrb.w	r2, [r1, #57]	; 0x39
		tmp = net_udp_insert(context, pkt,
   184f4:	886b      	ldrh	r3, [r5, #2]
   184f6:	4402      	add	r2, r0
   184f8:	4620      	mov	r0, r4
   184fa:	f006 fd25 	bl	1ef48 <net_udp_insert>
		if (!tmp) {
   184fe:	4605      	mov	r5, r0
   18500:	2800      	cmp	r0, #0
   18502:	d1c7      	bne.n	18494 <sendto.isra.23+0x50>
			return -ENOMEM;
   18504:	f06f 000b 	mvn.w	r0, #11
   18508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
}
   1850c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00018510 <net_context_sendto>:
{
   18510:	b430      	push	{r4, r5}
   18512:	9c03      	ldr	r4, [sp, #12]
	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
   18514:	9d04      	ldr	r5, [sp, #16]
   18516:	9503      	str	r5, [sp, #12]
   18518:	9402      	str	r4, [sp, #8]
}
   1851a:	bc30      	pop	{r4, r5}
	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
   1851c:	f7ff bf92 	b.w	18444 <sendto.isra.23>

00018520 <net_context_recv>:

int net_context_recv(struct net_context *context,
		     net_context_recv_cb_t cb,
		     s32_t timeout,
		     void *user_data)
{
   18520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18524:	f890 5055 	ldrb.w	r5, [r0, #85]	; 0x55
   18528:	4698      	mov	r8, r3
	NET_ASSERT(context);

	if (!net_context_is_used(context)) {
   1852a:	07eb      	lsls	r3, r5, #31
{
   1852c:	b08f      	sub	sp, #60	; 0x3c
   1852e:	4604      	mov	r4, r0
   18530:	460f      	mov	r7, r1
   18532:	4616      	mov	r6, r2
	if (!net_context_is_used(context)) {
   18534:	d54b      	bpl.n	185ce <net_context_recv+0xae>
   18536:	f015 0940 	ands.w	r9, r5, #64	; 0x40
   1853a:	d14b      	bne.n	185d4 <net_context_recv+0xb4>
	struct sockaddr local_addr = {
   1853c:	2218      	movs	r2, #24
   1853e:	4649      	mov	r1, r9
   18540:	a808      	add	r0, sp, #32
   18542:	f7e8 f967 	bl	814 <memset>
		return AF_INET6;
   18546:	f015 0f10 	tst.w	r5, #16
	if (context->conn_handler) {
   1854a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1854c:	bf0c      	ite	eq
   1854e:	2302      	moveq	r3, #2
   18550:	230a      	movne	r3, #10
	struct sockaddr local_addr = {
   18552:	f8ad 3020 	strh.w	r3, [sp, #32]
	if (context->conn_handler) {
   18556:	b118      	cbz	r0, 18560 <net_context_recv+0x40>
		net_conn_unregister(context->conn_handler);
   18558:	f006 fa0e 	bl	1e978 <net_conn_unregister>
		context->conn_handler = NULL;
   1855c:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
	ret = bind_default(context);
   18560:	4620      	mov	r0, r4
   18562:	f7ff ff48 	bl	183f6 <bind_default>
	if (ret) {
   18566:	bb10      	cbnz	r0, 185ae <net_context_recv+0x8e>
   18568:	f894 e055 	ldrb.w	lr, [r4, #85]	; 0x55
	if (context->flags & NET_CONTEXT_FAMILY) {
   1856c:	f01e 0510 	ands.w	r5, lr, #16
   18570:	d136      	bne.n	185e0 <net_context_recv+0xc0>
	struct sockaddr *laddr = NULL;
   18572:	462a      	mov	r2, r5
	context->recv_cb = cb;
   18574:	6327      	str	r7, [r4, #48]	; 0x30
				ntohs(net_sin(&context->remote)->sin_port),
   18576:	8ae7      	ldrh	r7, [r4, #22]
	ret = net_conn_register(net_context_get_ip_proto(context),
   18578:	f8cd 8008 	str.w	r8, [sp, #8]
				ntohs(net_sin(&context->remote)->sin_port),
   1857c:	0a3b      	lsrs	r3, r7, #8
		return IPPROTO_TCP;
   1857e:	f01e 0f40 	tst.w	lr, #64	; 0x40
   18582:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
	ret = net_conn_register(net_context_get_ip_proto(context),
   18586:	ba6d      	rev16	r5, r5
   18588:	f104 072c 	add.w	r7, r4, #44	; 0x2c
   1858c:	bf0c      	ite	eq
   1858e:	2011      	moveq	r0, #17
   18590:	2006      	movne	r0, #6
   18592:	9703      	str	r7, [sp, #12]
   18594:	f01e 0f80 	tst.w	lr, #128	; 0x80
   18598:	4f1d      	ldr	r7, [pc, #116]	; (18610 <net_context_recv+0xf0>)
   1859a:	9701      	str	r7, [sp, #4]
   1859c:	b2ad      	uxth	r5, r5
   1859e:	bf14      	ite	ne
   185a0:	f104 0114 	addne.w	r1, r4, #20
   185a4:	2100      	moveq	r1, #0
   185a6:	9500      	str	r5, [sp, #0]
   185a8:	b29b      	uxth	r3, r3
   185aa:	f006 f9ff 	bl	1e9ac <net_conn_register>
#endif /* CONFIG_NET_OFFLOAD */

#if defined(CONFIG_NET_UDP)
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
		int ret = recv_udp(context, cb, timeout, user_data);
		if (ret < 0) {
   185ae:	2800      	cmp	r0, #0
   185b0:	db0a      	blt.n	185c8 <net_context_recv+0xa8>
	{
		return -EPROTOTYPE;
	}

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	if (timeout) {
   185b2:	b146      	cbz	r6, 185c6 <net_context_recv+0xa6>
 */
__syscall void k_sem_reset(struct k_sem *sem);

static inline void _impl_k_sem_reset(struct k_sem *sem)
{
	sem->count = 0;
   185b4:	2300      	movs	r3, #0
   185b6:	6463      	str	r3, [r4, #68]	; 0x44
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   185b8:	4631      	mov	r1, r6
   185ba:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   185be:	f008 fae9 	bl	20b94 <_impl_k_sem_take>
		 * received.
		 */
		k_sem_reset(&context->recv_data_wait);

		ret = k_sem_take(&context->recv_data_wait, timeout);
		if (ret == -EAGAIN) {
   185c2:	300b      	adds	r0, #11
   185c4:	d009      	beq.n	185da <net_context_recv+0xba>
			return -ETIMEDOUT;
		}
	}
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return 0;
   185c6:	2000      	movs	r0, #0
}
   185c8:	b00f      	add	sp, #60	; 0x3c
   185ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EBADF;
   185ce:	f06f 0008 	mvn.w	r0, #8
   185d2:	e7f9      	b.n	185c8 <net_context_recv+0xa8>
		return -EPROTOTYPE;
   185d4:	f06f 0028 	mvn.w	r0, #40	; 0x28
   185d8:	e7f6      	b.n	185c8 <net_context_recv+0xa8>
			return -ETIMEDOUT;
   185da:	f06f 003b 	mvn.w	r0, #59	; 0x3b
   185de:	e7f3      	b.n	185c8 <net_context_recv+0xa8>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   185e0:	68e2      	ldr	r2, [r4, #12]
   185e2:	b18a      	cbz	r2, 18608 <net_context_recv+0xe8>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   185e4:	ad04      	add	r5, sp, #16
   185e6:	f102 0910 	add.w	r9, r2, #16
   185ea:	462b      	mov	r3, r5
   185ec:	6810      	ldr	r0, [r2, #0]
   185ee:	6851      	ldr	r1, [r2, #4]
   185f0:	46ac      	mov	ip, r5
   185f2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   185f6:	3208      	adds	r2, #8
   185f8:	454a      	cmp	r2, r9
   185fa:	4665      	mov	r5, ip
   185fc:	d1f6      	bne.n	185ec <net_context_recv+0xcc>
   185fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   18600:	ad09      	add	r5, sp, #36	; 0x24
   18602:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			laddr = &local_addr;
   18606:	aa08      	add	r2, sp, #32
			net_sin6((struct sockaddr *)&context->local)->sin6_port;
   18608:	8965      	ldrh	r5, [r4, #10]
		net_sin6(&local_addr)->sin6_port =
   1860a:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
   1860e:	e7b1      	b.n	18574 <net_context_recv+0x54>
   18610:	000180f9 	.word	0x000180f9

00018614 <net_context_foreach>:
#else
	return -EPROTOTYPE;
#endif
}
void net_context_foreach(net_context_cb_t cb, void *user_data)
{
   18614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18616:	4605      	mov	r5, r0
   18618:	460e      	mov	r6, r1
   1861a:	480b      	ldr	r0, [pc, #44]	; (18648 <net_context_foreach+0x34>)
	int i;

	k_sem_take(&contexts_lock, K_FOREVER);

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
		if (!net_context_is_used(&contexts[i])) {
   1861c:	4f0b      	ldr	r7, [pc, #44]	; (1864c <net_context_foreach+0x38>)
   1861e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18622:	f008 fab7 	bl	20b94 <_impl_k_sem_take>
   18626:	2400      	movs	r4, #0
   18628:	1938      	adds	r0, r7, r4
   1862a:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
   1862e:	07db      	lsls	r3, r3, #31
   18630:	d501      	bpl.n	18636 <net_context_foreach+0x22>
			continue;
		}

		cb(&contexts[i], user_data);
   18632:	4631      	mov	r1, r6
   18634:	47a8      	blx	r5
   18636:	345c      	adds	r4, #92	; 0x5c
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   18638:	f5b4 7f66 	cmp.w	r4, #920	; 0x398
   1863c:	d1f4      	bne.n	18628 <net_context_foreach+0x14>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1863e:	4802      	ldr	r0, [pc, #8]	; (18648 <net_context_foreach+0x34>)
	}

	k_sem_give(&contexts_lock);
}
   18640:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   18644:	f008 ba46 	b.w	20ad4 <_impl_k_sem_give>
   18648:	2000300c 	.word	0x2000300c
   1864c:	20002c74 	.word	0x20002c74

00018650 <net_context_init>:
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   18650:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18654:	2101      	movs	r1, #1
   18656:	4801      	ldr	r0, [pc, #4]	; (1865c <net_context_init+0xc>)
   18658:	f008 ba32 	b.w	20ac0 <_impl_k_sem_init>
   1865c:	2000300c 	.word	0x2000300c

00018660 <net_is_ipv6_addr_loopback>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   18660:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   18662:	b99a      	cbnz	r2, 1868c <net_is_ipv6_addr_loopback+0x2c>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   18664:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   18666:	b98b      	cbnz	r3, 1868c <net_is_ipv6_addr_loopback+0x2c>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   18668:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1866a:	b97a      	cbnz	r2, 1868c <net_is_ipv6_addr_loopback+0x2c>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1866c:	68c3      	ldr	r3, [r0, #12]
 *
   1866e:	0618      	lsls	r0, r3, #24

   18670:	0a1a      	lsrs	r2, r3, #8
 * @brief Check if the IPv6 address is a multicast address.
   18672:	ea40 6013 	orr.w	r0, r0, r3, lsr #24

   18676:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 * @brief Check if the IPv6 address is a multicast address.
   1867a:	021b      	lsls	r3, r3, #8
   1867c:	4310      	orrs	r0, r2
   1867e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   18682:	4318      	orrs	r0, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   18684:	1e43      	subs	r3, r0, #1
   18686:	4258      	negs	r0, r3
   18688:	4158      	adcs	r0, r3
   1868a:	4770      	bx	lr
   1868c:	2000      	movs	r0, #0
   1868e:	4770      	bx	lr

00018690 <net_init>:

	NET_DBG("Network L2 init done");
}

static int net_init(struct device *unused)
{
   18690:	b510      	push	{r4, lr}
   18692:	b086      	sub	sp, #24

	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   18694:	f001 fc15 	bl	19ec2 <net_pkt_init>

	net_context_init();
   18698:	f7ff ffda 	bl	18650 <net_context_init>
	net_icmpv6_init();
   1869c:	f003 f922 	bl	1b8e4 <net_icmpv6_init>
	net_ipv6_init();
   186a0:	f005 f9a8 	bl	1d9f4 <net_ipv6_init>
	net_conn_init();
   186a4:	f006 faf8 	bl	1ec98 <net_conn_init>
	net_udp_init();
   186a8:	f006 fc56 	bl	1ef58 <net_udp_init>
	net_route_init();
   186ac:	f005 fc42 	bl	1df34 <net_route_init>

	l2_init();
	l3_init();

	net_mgmt_event_init();
   186b0:	f005 faa2 	bl	1dbf8 <net_mgmt_event_init>
	k_fifo_init(&rx_queue);
   186b4:	480b      	ldr	r0, [pc, #44]	; (186e4 <net_init+0x54>)
   186b6:	f007 ff91 	bl	205dc <k_queue_init>

   186ba:	2301      	movs	r3, #1
   186bc:	2400      	movs	r4, #0
   186be:	9304      	str	r3, [sp, #16]
   186c0:	f06f 0307 	mvn.w	r3, #7
   186c4:	9303      	str	r3, [sp, #12]
   186c6:	9405      	str	r4, [sp, #20]
   186c8:	9402      	str	r4, [sp, #8]
   186ca:	9401      	str	r4, [sp, #4]
   186cc:	9400      	str	r4, [sp, #0]
   186ce:	4b06      	ldr	r3, [pc, #24]	; (186e8 <net_init+0x58>)
   186d0:	4906      	ldr	r1, [pc, #24]	; (186ec <net_init+0x5c>)
   186d2:	4807      	ldr	r0, [pc, #28]	; (186f0 <net_init+0x60>)
   186d4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   186d8:	f008 fc38 	bl	20f4c <_impl_k_thread_create>
		return status;
	}
#endif

	return status;
}
   186dc:	4620      	mov	r0, r4
   186de:	b006      	add	sp, #24
   186e0:	bd10      	pop	{r4, pc}
   186e2:	bf00      	nop
   186e4:	20003024 	.word	0x20003024
   186e8:	00018769 	.word	0x00018769
   186ec:	20006f00 	.word	0x20006f00
   186f0:	20003034 	.word	0x20003034

000186f4 <processing_data>:
	if (!pkt->frags) {
   186f4:	6883      	ldr	r3, [r0, #8]
{
   186f6:	b510      	push	{r4, lr}
   186f8:	4604      	mov	r4, r0
	if (!pkt->frags) {
   186fa:	b943      	cbnz	r3, 1870e <processing_data+0x1a>

/* Core stats */

static inline void net_stats_update_processing_error(void)
{
	net_stats.processing_error++;
   186fc:	4a19      	ldr	r2, [pc, #100]	; (18764 <processing_data+0x70>)
   186fe:	6813      	ldr	r3, [r2, #0]
   18700:	3301      	adds	r3, #1
   18702:	6013      	str	r3, [r2, #0]
		net_pkt_unref(pkt);
   18704:	4620      	mov	r0, r4
}
   18706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_pkt_unref(pkt);
   1870a:	f001 b952 	b.w	199b2 <net_pkt_unref>
	if (!is_loopback && !locally_routed) {
   1870e:	b959      	cbnz	r1, 18728 <processing_data+0x34>
   18710:	6940      	ldr	r0, [r0, #20]
 * @return verdict about the packet
 */
static inline enum net_verdict net_if_recv_data(struct net_if *iface,
						struct net_pkt *pkt)
{
	return iface->l2->recv(iface, pkt);
   18712:	6843      	ldr	r3, [r0, #4]
   18714:	4621      	mov	r1, r4
   18716:	681b      	ldr	r3, [r3, #0]
   18718:	4798      	blx	r3
		if (ret != NET_CONTINUE) {
   1871a:	2801      	cmp	r0, #1
   1871c:	d004      	beq.n	18728 <processing_data+0x34>
			if (ret == NET_DROP) {
   1871e:	2802      	cmp	r0, #2
   18720:	d0ec      	beq.n	186fc <processing_data+0x8>
	switch (process_data(pkt, is_loopback)) {
   18722:	2800      	cmp	r0, #0
   18724:	d1ee      	bne.n	18704 <processing_data+0x10>
   18726:	bd10      	pop	{r4, pc}
	return pkt->frags->data;
   18728:	68a3      	ldr	r3, [r4, #8]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   1872a:	689b      	ldr	r3, [r3, #8]
   1872c:	781b      	ldrb	r3, [r3, #0]
   1872e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   18732:	2b60      	cmp	r3, #96	; 0x60
   18734:	4b0b      	ldr	r3, [pc, #44]	; (18764 <processing_data+0x70>)
   18736:	d10d      	bne.n	18754 <processing_data+0x60>
	net_stats.ipv6.sent++;
}

static inline void net_stats_update_ipv6_recv(void)
{
	net_stats.ipv6.recv++;
   18738:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1873a:	3201      	adds	r2, #1
   1873c:	625a      	str	r2, [r3, #36]	; 0x24
	pkt->family = family;
   1873e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   18742:	220a      	movs	r2, #10
   18744:	f362 03c6 	bfi	r3, r2, #3, #4
   18748:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
		return net_ipv6_process_pkt(pkt);
   1874c:	4620      	mov	r0, r4
   1874e:	f004 fff5 	bl	1d73c <net_ipv6_process_pkt>
   18752:	e7e6      	b.n	18722 <processing_data+0x2e>
	net_stats.ip_errors.protoerr++;
   18754:	6a1a      	ldr	r2, [r3, #32]
   18756:	3201      	adds	r2, #1
   18758:	621a      	str	r2, [r3, #32]
	net_stats.ip_errors.vhlerr++;
   1875a:	68da      	ldr	r2, [r3, #12]
   1875c:	3201      	adds	r2, #1
   1875e:	60da      	str	r2, [r3, #12]
   18760:	e7d0      	b.n	18704 <processing_data+0x10>
   18762:	bf00      	nop
   18764:	20004cf4 	.word	0x20004cf4

00018768 <net_rx_thread>:
{
   18768:	b570      	push	{r4, r5, r6, lr}
	net_if_init(&startup_sync);
   1876a:	4814      	ldr	r0, [pc, #80]	; (187bc <net_rx_thread+0x54>)
		pkt = k_fifo_get(&rx_queue, K_FOREVER);
   1876c:	4d14      	ldr	r5, [pc, #80]	; (187c0 <net_rx_thread+0x58>)
		if ((unsigned char)stack[i] == 0xaa) {
   1876e:	4c15      	ldr	r4, [pc, #84]	; (187c4 <net_rx_thread+0x5c>)
	net_stats.bytes.received += bytes;
   18770:	4e15      	ldr	r6, [pc, #84]	; (187c8 <net_rx_thread+0x60>)
	net_if_init(&startup_sync);
   18772:	f000 fffb 	bl	1976c <net_if_init>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   18776:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1877a:	4810      	ldr	r0, [pc, #64]	; (187bc <net_rx_thread+0x54>)
   1877c:	f008 fa0a 	bl	20b94 <_impl_k_sem_take>
	net_if_post_init();
   18780:	f001 f842 	bl	19808 <net_if_post_init>
		pkt = k_fifo_get(&rx_queue, K_FOREVER);
   18784:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18788:	4628      	mov	r0, r5
   1878a:	f007 ff7c 	bl	20686 <k_queue_get>
	for (i = 0; i < size; i++) {
   1878e:	2300      	movs	r3, #0
		if ((unsigned char)stack[i] == 0xaa) {
   18790:	5d1a      	ldrb	r2, [r3, r4]
   18792:	2aaa      	cmp	r2, #170	; 0xaa
   18794:	d103      	bne.n	1879e <net_rx_thread+0x36>
	for (i = 0; i < size; i++) {
   18796:	3301      	adds	r3, #1
   18798:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   1879c:	d1f8      	bne.n	18790 <net_rx_thread+0x28>
   1879e:	6881      	ldr	r1, [r0, #8]
	size_t bytes = 0;
   187a0:	2200      	movs	r2, #0
	while (buf) {
   187a2:	b939      	cbnz	r1, 187b4 <net_rx_thread+0x4c>
   187a4:	68b3      	ldr	r3, [r6, #8]
   187a6:	4413      	add	r3, r2
   187a8:	60b3      	str	r3, [r6, #8]
		processing_data(pkt, false);
   187aa:	f7ff ffa3 	bl	186f4 <processing_data>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   187ae:	f008 f915 	bl	209dc <_impl_k_yield>
   187b2:	e7e7      	b.n	18784 <net_rx_thread+0x1c>
		bytes += buf->len;
   187b4:	898b      	ldrh	r3, [r1, #12]
		buf = buf->frags;
   187b6:	6809      	ldr	r1, [r1, #0]
		bytes += buf->len;
   187b8:	441a      	add	r2, r3
   187ba:	e7f2      	b.n	187a2 <net_rx_thread+0x3a>
   187bc:	2000ecec 	.word	0x2000ecec
   187c0:	20003024 	.word	0x20003024
   187c4:	20006f00 	.word	0x20006f00
   187c8:	20004cf4 	.word	0x20004cf4

000187cc <net_send_data>:
{
   187cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!pkt || !pkt->frags) {
   187d0:	4604      	mov	r4, r0
{
   187d2:	b091      	sub	sp, #68	; 0x44
	if (!pkt || !pkt->frags) {
   187d4:	2800      	cmp	r0, #0
   187d6:	f000 8086 	beq.w	188e6 <net_send_data+0x11a>
   187da:	6882      	ldr	r2, [r0, #8]
   187dc:	2a00      	cmp	r2, #0
   187de:	f000 8082 	beq.w	188e6 <net_send_data+0x11a>
	if (!net_pkt_iface(pkt)) {
   187e2:	6943      	ldr	r3, [r0, #20]
   187e4:	2b00      	cmp	r3, #0
   187e6:	f000 8081 	beq.w	188ec <net_send_data+0x120>
	return pkt->family;
   187ea:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
   187ee:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	switch (net_pkt_family(pkt)) {
   187f2:	2b0a      	cmp	r3, #10
   187f4:	d16d      	bne.n	188d2 <net_send_data+0x106>
	net_stats.ipv6.sent++;
   187f6:	493f      	ldr	r1, [pc, #252]	; (188f4 <net_send_data+0x128>)
   187f8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   187fa:	3301      	adds	r3, #1
   187fc:	628b      	str	r3, [r1, #40]	; 0x28
		if (net_ipv6_addr_cmp(&NET_IPV6_HDR(pkt)->dst,
   187fe:	6895      	ldr	r5, [r2, #8]
   18800:	f003 fb46 	bl	1be90 <net_ipv6_unspecified_address>
   18804:	3518      	adds	r5, #24
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   18806:	4601      	mov	r1, r0
   18808:	2210      	movs	r2, #16
   1880a:	4628      	mov	r0, r5
   1880c:	f7e7 ffa9 	bl	762 <memcmp>
   18810:	b920      	cbnz	r0, 1881c <net_send_data+0x50>
		return -EINVAL;
   18812:	f06f 0030 	mvn.w	r0, #48	; 0x30
}
   18816:	b011      	add	sp, #68	; 0x44
   18818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return pkt->frags->data;
   1881c:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1881e:	689d      	ldr	r5, [r3, #8]
   18820:	3518      	adds	r5, #24
   18822:	4628      	mov	r0, r5
   18824:	f7ff ff1c 	bl	18660 <net_is_ipv6_addr_loopback>
   18828:	4601      	mov	r1, r0
   1882a:	2800      	cmp	r0, #0
   1882c:	d045      	beq.n	188ba <net_send_data+0xee>
   1882e:	68a3      	ldr	r3, [r4, #8]
   18830:	f8d3 e008 	ldr.w	lr, [r3, #8]
			net_ipaddr_copy(&addr, &NET_IPV6_HDR(pkt)->src);
   18834:	aa0c      	add	r2, sp, #48	; 0x30
   18836:	f10e 0308 	add.w	r3, lr, #8
   1883a:	f10e 0618 	add.w	r6, lr, #24
   1883e:	461d      	mov	r5, r3
   18840:	4694      	mov	ip, r2
   18842:	6818      	ldr	r0, [r3, #0]
   18844:	6859      	ldr	r1, [r3, #4]
   18846:	4617      	mov	r7, r2
   18848:	c703      	stmia	r7!, {r0, r1}
   1884a:	3308      	adds	r3, #8
   1884c:	42b3      	cmp	r3, r6
   1884e:	463a      	mov	r2, r7
   18850:	d1f7      	bne.n	18842 <net_send_data+0x76>
   18852:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   18856:	f10d 0820 	add.w	r8, sp, #32
			net_ipaddr_copy(&addr, &NET_IPV6_HDR(pkt)->src);
   1885a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   1885e:	466f      	mov	r7, sp
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   18860:	f10e 0328 	add.w	r3, lr, #40	; 0x28
   18864:	4632      	mov	r2, r6
   18866:	46c6      	mov	lr, r8
   18868:	6810      	ldr	r0, [r2, #0]
   1886a:	6851      	ldr	r1, [r2, #4]
   1886c:	46c1      	mov	r9, r8
   1886e:	e8a9 0003 	stmia.w	r9!, {r0, r1}
   18872:	3208      	adds	r2, #8
   18874:	429a      	cmp	r2, r3
   18876:	46c8      	mov	r8, r9
   18878:	d1f6      	bne.n	18868 <net_send_data+0x9c>
   1887a:	46f0      	mov	r8, lr
   1887c:	462b      	mov	r3, r5
   1887e:	4642      	mov	r2, r8
   18880:	ca03      	ldmia	r2!, {r0, r1}
   18882:	4562      	cmp	r2, ip
   18884:	6018      	str	r0, [r3, #0]
   18886:	6059      	str	r1, [r3, #4]
   18888:	4690      	mov	r8, r2
   1888a:	f103 0308 	add.w	r3, r3, #8
   1888e:	d1f6      	bne.n	1887e <net_send_data+0xb2>
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   18890:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   18894:	ad04      	add	r5, sp, #16
   18896:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1889a:	4633      	mov	r3, r6
   1889c:	462a      	mov	r2, r5
   1889e:	ca03      	ldmia	r2!, {r0, r1}
   188a0:	4572      	cmp	r2, lr
   188a2:	6018      	str	r0, [r3, #0]
   188a4:	6059      	str	r1, [r3, #4]
   188a6:	4615      	mov	r5, r2
   188a8:	f103 0308 	add.w	r3, r3, #8
   188ac:	d1f6      	bne.n	1889c <net_send_data+0xd0>
		processing_data(pkt, true);
   188ae:	4620      	mov	r0, r4
   188b0:	2101      	movs	r1, #1
   188b2:	f7ff ff1f 	bl	186f4 <processing_data>
		return 0;
   188b6:	2000      	movs	r0, #0
   188b8:	e7ad      	b.n	18816 <net_send_data+0x4a>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   188ba:	4628      	mov	r0, r5
   188bc:	f000 f934 	bl	18b28 <net_if_ipv6_addr_lookup>
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   188c0:	2800      	cmp	r0, #0
   188c2:	d1b4      	bne.n	1882e <net_send_data+0x62>
   188c4:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->src)) {
   188c6:	6898      	ldr	r0, [r3, #8]
   188c8:	3008      	adds	r0, #8
   188ca:	f7ff fec9 	bl	18660 <net_is_ipv6_addr_loopback>
   188ce:	2800      	cmp	r0, #0
   188d0:	d19f      	bne.n	18812 <net_send_data+0x46>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   188d2:	4621      	mov	r1, r4
   188d4:	6960      	ldr	r0, [r4, #20]
   188d6:	f000 fdf1 	bl	194bc <net_if_send_data>
	return 0;
   188da:	2802      	cmp	r0, #2
   188dc:	bf0c      	ite	eq
   188de:	f06f 0004 	mvneq.w	r0, #4
   188e2:	2000      	movne	r0, #0
   188e4:	e797      	b.n	18816 <net_send_data+0x4a>
		return -ENODATA;
   188e6:	f06f 004d 	mvn.w	r0, #77	; 0x4d
   188ea:	e794      	b.n	18816 <net_send_data+0x4a>
		return -EINVAL;
   188ec:	f06f 0015 	mvn.w	r0, #21
   188f0:	e791      	b.n	18816 <net_send_data+0x4a>
   188f2:	bf00      	nop
   188f4:	20004cf4 	.word	0x20004cf4

000188f8 <net_recv_data>:
	if (!pkt->frags) {
   188f8:	688a      	ldr	r2, [r1, #8]
{
   188fa:	b508      	push	{r3, lr}
	if (!pkt->frags) {
   188fc:	b18a      	cbz	r2, 18922 <net_recv_data+0x2a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   188fe:	f3bf 8f5b 	dmb	ish
   18902:	68c2      	ldr	r2, [r0, #12]
   18904:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   18908:	07d2      	lsls	r2, r2, #31
   1890a:	d50d      	bpl.n	18928 <net_recv_data+0x30>
	pkt->iface = iface;
   1890c:	6148      	str	r0, [r1, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1890e:	7d42      	ldrb	r2, [r0, #21]
   18910:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   18914:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
	k_fifo_put(&rx_queue, pkt);
   18918:	4805      	ldr	r0, [pc, #20]	; (18930 <net_recv_data+0x38>)
   1891a:	f007 fe90 	bl	2063e <k_queue_append>
	return 0;
   1891e:	2000      	movs	r0, #0
   18920:	bd08      	pop	{r3, pc}
		return -ENODATA;
   18922:	f06f 004d 	mvn.w	r0, #77	; 0x4d
   18926:	bd08      	pop	{r3, pc}
		return -ENETDOWN;
   18928:	f06f 003d 	mvn.w	r0, #61	; 0x3d
}
   1892c:	bd08      	pop	{r3, pc}
   1892e:	bf00      	nop
   18930:	20003024 	.word	0x20003024

00018934 <net_context_send_cb>:
#define debug_check_packet(...)
#endif /* CONFIG_NET_DEBUG_IF */

static inline void net_context_send_cb(struct net_context *context,
				       void *token, int status)
{
   18934:	b570      	push	{r4, r5, r6, lr}
   18936:	460e      	mov	r6, r1
	if (!context) {
   18938:	4604      	mov	r4, r0
{
   1893a:	4611      	mov	r1, r2
	if (!context) {
   1893c:	b160      	cbz	r0, 18958 <net_context_send_cb+0x24>
		return;
	}

	if (context->send_cb) {
   1893e:	6b45      	ldr	r5, [r0, #52]	; 0x34
   18940:	b115      	cbz	r5, 18948 <net_context_send_cb+0x14>
		context->send_cb(context, status, token, context->user_data);
   18942:	6803      	ldr	r3, [r0, #0]
   18944:	4632      	mov	r2, r6
   18946:	47a8      	blx	r5
	if (context->flags & NET_CONTEXT_PROTO) {
   18948:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   1894c:	065b      	lsls	r3, r3, #25

#if defined(CONFIG_NET_STATISTICS_UDP)
/* UDP stats */
static inline void net_stats_update_udp_sent(void)
{
	net_stats.udp.sent++;
   1894e:	bf5f      	itttt	pl
   18950:	4a02      	ldrpl	r2, [pc, #8]	; (1895c <net_context_send_cb+0x28>)
   18952:	6d13      	ldrpl	r3, [r2, #80]	; 0x50
   18954:	3301      	addpl	r3, #1
   18956:	6513      	strpl	r3, [r2, #80]	; 0x50
   18958:	bd70      	pop	{r4, r5, r6, pc}
   1895a:	bf00      	nop
   1895c:	20004cf4 	.word	0x20004cf4

00018960 <ipv6_addr_expired>:
						  lifetime);

	NET_DBG("IPv6 address %s is deprecated",
		net_sprint_ipv6_addr(&ifaddr->address.in6_addr));

	ifaddr->addr_state = NET_ADDR_DEPRECATED;
   18960:	2302      	movs	r3, #2
   18962:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
   18966:	4770      	bx	lr

00018968 <prefix_lf_timeout>:
		CONTAINER_OF(work, struct net_if_ipv6_prefix, lifetime);

	NET_DBG("Prefix %s/%d expired",
		net_sprint_ipv6_addr(&prefix->prefix), prefix->len);

	prefix->is_used = false;
   18968:	2300      	movs	r3, #0
   1896a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
   1896e:	4770      	bx	lr

00018970 <ipv6_router_expired>:
						    lifetime);

	NET_DBG("IPv6 router %s is expired",
		net_sprint_ipv6_addr(&router->address.in6_addr));

	router->is_used = false;
   18970:	2300      	movs	r3, #0
   18972:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   18976:	4770      	bx	lr

00018978 <net_if_ipv6_get_best_match>:
}

static inline struct in6_addr *net_if_ipv6_get_best_match(struct net_if *iface,
							  struct in6_addr *dst,
							  u8_t *best_so_far)
{
   18978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1897c:	f100 0430 	add.w	r4, r0, #48	; 0x30
   18980:	f500 76ba 	add.w	r6, r0, #372	; 0x174
	    addr->address.family == AF_INET6 &&
   18984:	f248 08fe 	movw	r8, #33022	; 0x80fe
	struct in6_addr *src = NULL;
   18988:	2000      	movs	r0, #0
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1898a:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   1898e:	b153      	cbz	r3, 189a6 <net_if_ipv6_get_best_match+0x2e>
   18990:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
   18994:	2b01      	cmp	r3, #1
   18996:	d106      	bne.n	189a6 <net_if_ipv6_get_best_match+0x2e>
   18998:	f834 3c04 	ldrh.w	r3, [r4, #-4]
   1899c:	2b0a      	cmp	r3, #10
   1899e:	d102      	bne.n	189a6 <net_if_ipv6_get_best_match+0x2e>
	    addr->address.family == AF_INET6 &&
   189a0:	8823      	ldrh	r3, [r4, #0]
   189a2:	4543      	cmp	r3, r8
   189a4:	d111      	bne.n	189ca <net_if_ipv6_get_best_match+0x52>
   189a6:	346c      	adds	r4, #108	; 0x6c
	u8_t i, len;

	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   189a8:	42b4      	cmp	r4, r6
   189aa:	d1ee      	bne.n	1898a <net_if_ipv6_get_best_match+0x12>
   189ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xor = src->s6_addr[j] ^ dst->s6_addr[j];
   189b0:	ea85 0509 	eor.w	r5, r5, r9
   189b4:	b2ff      	uxtb	r7, r7
				if (!(xor & 0x80)) {
   189b6:	f015 0f80 	tst.w	r5, #128	; 0x80
   189ba:	d116      	bne.n	189ea <net_if_ipv6_get_best_match+0x72>
					len++;
   189bc:	3301      	adds	r3, #1
   189be:	b2db      	uxtb	r3, r3
					xor <<= 1;
   189c0:	006d      	lsls	r5, r5, #1
			for (k = 0; k < 8; k++) {
   189c2:	42bb      	cmp	r3, r7
					xor <<= 1;
   189c4:	b2ed      	uxtb	r5, r5
			for (k = 0; k < 8; k++) {
   189c6:	d1f6      	bne.n	189b6 <net_if_ipv6_get_best_match+0x3e>
   189c8:	e00f      	b.n	189ea <net_if_ipv6_get_best_match+0x72>
   189ca:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   189ce:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
	u8_t len = 0;
   189d2:	2300      	movs	r3, #0
		if (src->s6_addr[j] == dst->s6_addr[j]) {
   189d4:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
   189d8:	f81e 9f01 	ldrb.w	r9, [lr, #1]!
   189dc:	454d      	cmp	r5, r9
   189de:	f103 0708 	add.w	r7, r3, #8
   189e2:	d1e5      	bne.n	189b0 <net_if_ipv6_get_best_match+0x38>
			len += 8;
   189e4:	b2fb      	uxtb	r3, r7
	for (j = 0; j < 16; j++) {
   189e6:	2b80      	cmp	r3, #128	; 0x80
   189e8:	d1f4      	bne.n	189d4 <net_if_ipv6_get_best_match+0x5c>
			continue;
		}

		len = get_length(dst,
				 &iface->ipv6.unicast[i].address.in6_addr);
		if (len >= *best_so_far) {
   189ea:	7815      	ldrb	r5, [r2, #0]
   189ec:	429d      	cmp	r5, r3
			*best_so_far = len;
   189ee:	bf9c      	itt	ls
   189f0:	7013      	strbls	r3, [r2, #0]
   189f2:	4620      	movls	r0, r4
   189f4:	e7d7      	b.n	189a6 <net_if_ipv6_get_best_match+0x2e>

000189f6 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   189f6:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   189f8:	f3bf 8f5b 	dmb	ish
   189fc:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   18a00:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
   18a04:	f001 011f 	and.w	r1, r1, #31
   18a08:	4108      	asrs	r0, r1
}
   18a0a:	f000 0001 	and.w	r0, r0, #1
   18a0e:	4770      	bx	lr

00018a10 <net_is_ipv6_prefix>:
	if (length > 128) {
   18a10:	2a80      	cmp	r2, #128	; 0x80
{
   18a12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a14:	4607      	mov	r7, r0
   18a16:	460e      	mov	r6, r1
   18a18:	4614      	mov	r4, r2
	if (length > 128) {
   18a1a:	d901      	bls.n	18a20 <net_is_ipv6_prefix+0x10>
		return false;
   18a1c:	2000      	movs	r0, #0
   18a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (memcmp(addr1, addr2, bytes)) {
   18a20:	08d5      	lsrs	r5, r2, #3
   18a22:	462a      	mov	r2, r5
   18a24:	f7e7 fe9d 	bl	762 <memcmp>
   18a28:	2800      	cmp	r0, #0
   18a2a:	d1f7      	bne.n	18a1c <net_is_ipv6_prefix+0xc>
	u8_t bits = 128 - length;
   18a2c:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	if (!remain) {
   18a30:	f014 0407 	ands.w	r4, r4, #7
   18a34:	d00f      	beq.n	18a56 <net_is_ipv6_prefix+0x46>
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   18a36:	5d73      	ldrb	r3, [r6, r5]
   18a38:	5d7a      	ldrb	r2, [r7, r5]
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   18a3a:	f1c4 0108 	rsb	r1, r4, #8
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   18a3e:	405a      	eors	r2, r3
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   18a40:	23ff      	movs	r3, #255	; 0xff
   18a42:	408b      	lsls	r3, r1
   18a44:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   18a48:	fa03 f404 	lsl.w	r4, r3, r4
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   18a4c:	4222      	tst	r2, r4
   18a4e:	bf0c      	ite	eq
   18a50:	2001      	moveq	r0, #1
   18a52:	2000      	movne	r0, #0
   18a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return true;
   18a56:	2001      	movs	r0, #1
}
   18a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018a5a <net_ipv6_addr_cmp>:
{
   18a5a:	b508      	push	{r3, lr}
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   18a5c:	2210      	movs	r2, #16
   18a5e:	f7e7 fe80 	bl	762 <memcmp>
}
   18a62:	fab0 f080 	clz	r0, r0
   18a66:	0940      	lsrs	r0, r0, #5
   18a68:	bd08      	pop	{r3, pc}
	...

00018a6c <k_delayed_work_submit>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   18a6c:	460a      	mov	r2, r1
   18a6e:	4601      	mov	r1, r0
   18a70:	4801      	ldr	r0, [pc, #4]	; (18a78 <k_delayed_work_submit+0xc>)
   18a72:	f008 bbd3 	b.w	2121c <k_delayed_work_submit_to_queue>
   18a76:	bf00      	nop
   18a78:	200052a0 	.word	0x200052a0

00018a7c <net_mgmt_event_notify>:
void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length);

static inline void net_mgmt_event_notify(u32_t mgmt_event, struct net_if *iface)
{
	net_mgmt_event_notify_with_info(mgmt_event, iface, NULL, 0);
   18a7c:	2300      	movs	r3, #0
   18a7e:	461a      	mov	r2, r3
   18a80:	f005 b87c 	b.w	1db7c <net_mgmt_event_notify_with_info>

00018a84 <net_if_ipv6_start_dad>:
{
   18a84:	b510      	push	{r4, lr}
   18a86:	460c      	mov	r4, r1
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   18a88:	2100      	movs	r1, #0
{
   18a8a:	4602      	mov	r2, r0
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   18a8c:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
 */
static inline bool net_if_is_up(struct net_if *iface)
{
	NET_ASSERT(iface);

	return atomic_test_bit(iface->flags, NET_IF_UP);
   18a90:	300c      	adds	r0, #12
   18a92:	f7ff ffb0 	bl	189f6 <atomic_test_bit>
	if (net_if_is_up(iface)) {
   18a96:	b170      	cbz	r0, 18ab6 <net_if_ipv6_start_dad+0x32>
		ifaddr->dad_count = 1;
   18a98:	2301      	movs	r3, #1
   18a9a:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
		if (!net_ipv6_start_dad(iface, ifaddr)) {
   18a9e:	4621      	mov	r1, r4
   18aa0:	4610      	mov	r0, r2
   18aa2:	f004 fcc3 	bl	1d42c <net_ipv6_start_dad>
   18aa6:	b930      	cbnz	r0, 18ab6 <net_if_ipv6_start_dad+0x32>
			k_delayed_work_submit(&ifaddr->dad_timer, DAD_TIMEOUT);
   18aa8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   18aac:	2164      	movs	r1, #100	; 0x64
}
   18aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_delayed_work_submit(&ifaddr->dad_timer, DAD_TIMEOUT);
   18ab2:	f7ff bfdb 	b.w	18a6c <k_delayed_work_submit>
   18ab6:	bd10      	pop	{r4, pc}

00018ab8 <net_if_lookup_by_dev>:
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   18ab8:	4b06      	ldr	r3, [pc, #24]	; (18ad4 <net_if_lookup_by_dev+0x1c>)
   18aba:	4a07      	ldr	r2, [pc, #28]	; (18ad8 <net_if_lookup_by_dev+0x20>)
   18abc:	4293      	cmp	r3, r2
   18abe:	d102      	bne.n	18ac6 <net_if_lookup_by_dev+0xe>
	return NULL;
   18ac0:	2300      	movs	r3, #0
}
   18ac2:	4618      	mov	r0, r3
   18ac4:	4770      	bx	lr
		if (iface->dev == dev) {
   18ac6:	6819      	ldr	r1, [r3, #0]
   18ac8:	4281      	cmp	r1, r0
   18aca:	d0fa      	beq.n	18ac2 <net_if_lookup_by_dev+0xa>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   18acc:	f503 7318 	add.w	r3, r3, #608	; 0x260
   18ad0:	e7f4      	b.n	18abc <net_if_lookup_by_dev+0x4>
   18ad2:	bf00      	nop
   18ad4:	2000ee00 	.word	0x2000ee00
   18ad8:	2000f060 	.word	0x2000f060

00018adc <net_if_get_default>:
}
   18adc:	4b02      	ldr	r3, [pc, #8]	; (18ae8 <net_if_get_default+0xc>)
	if (__net_if_start == __net_if_end) {
   18ade:	4803      	ldr	r0, [pc, #12]	; (18aec <net_if_get_default+0x10>)
}
   18ae0:	4298      	cmp	r0, r3
   18ae2:	bf08      	it	eq
   18ae4:	2000      	moveq	r0, #0
   18ae6:	4770      	bx	lr
   18ae8:	2000f060 	.word	0x2000f060
   18aec:	2000ee00 	.word	0x2000ee00

00018af0 <net_if_start_rs>:
{
   18af0:	b510      	push	{r4, lr}
   18af2:	4604      	mov	r4, r0
	if (!net_ipv6_start_rs(iface)) {
   18af4:	f004 fdea 	bl	1d6cc <net_ipv6_start_rs>
   18af8:	b938      	cbnz	r0, 18b0a <net_if_start_rs+0x1a>
		k_delayed_work_submit(&iface->ipv6.rs_timer, RS_TIMEOUT);
   18afa:	f504 7006 	add.w	r0, r4, #536	; 0x218
   18afe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
}
   18b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_delayed_work_submit(&iface->ipv6.rs_timer, RS_TIMEOUT);
   18b06:	f7ff bfb1 	b.w	18a6c <k_delayed_work_submit>
   18b0a:	bd10      	pop	{r4, pc}

00018b0c <rs_timeout>:
	iface->ipv6.rs_count++;
   18b0c:	f5a0 7006 	sub.w	r0, r0, #536	; 0x218
   18b10:	f890 324e 	ldrb.w	r3, [r0, #590]	; 0x24e
   18b14:	3301      	adds	r3, #1
   18b16:	b2db      	uxtb	r3, r3
	if (iface->ipv6.rs_count < RS_COUNT) {
   18b18:	2b02      	cmp	r3, #2
	iface->ipv6.rs_count++;
   18b1a:	f880 324e 	strb.w	r3, [r0, #590]	; 0x24e
	if (iface->ipv6.rs_count < RS_COUNT) {
   18b1e:	d801      	bhi.n	18b24 <rs_timeout+0x18>
		net_if_start_rs(iface);
   18b20:	f7ff bfe6 	b.w	18af0 <net_if_start_rs>
   18b24:	4770      	bx	lr
	...

00018b28 <net_if_ipv6_addr_lookup>:
{
   18b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   18b2c:	4c14      	ldr	r4, [pc, #80]	; (18b80 <net_if_ipv6_addr_lookup+0x58>)
   18b2e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 18b84 <net_if_ipv6_addr_lookup+0x5c>
{
   18b32:	4681      	mov	r9, r0
   18b34:	460f      	mov	r7, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   18b36:	4544      	cmp	r4, r8
   18b38:	d102      	bne.n	18b40 <net_if_ipv6_addr_lookup+0x18>
	return NULL;
   18b3a:	2000      	movs	r0, #0
}
   18b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18b40:	f104 0630 	add.w	r6, r4, #48	; 0x30
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   18b44:	2500      	movs	r5, #0
			if (!iface->ipv6.unicast[i].is_used ||
   18b46:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
   18b4a:	b183      	cbz	r3, 18b6e <net_if_ipv6_addr_lookup+0x46>
   18b4c:	f836 3c04 	ldrh.w	r3, [r6, #-4]
   18b50:	2b0a      	cmp	r3, #10
   18b52:	d10c      	bne.n	18b6e <net_if_ipv6_addr_lookup+0x46>
			if (net_is_ipv6_prefix(addr->s6_addr,
   18b54:	2280      	movs	r2, #128	; 0x80
   18b56:	4631      	mov	r1, r6
   18b58:	4648      	mov	r0, r9
   18b5a:	f7ff ff59 	bl	18a10 <net_is_ipv6_prefix>
   18b5e:	b130      	cbz	r0, 18b6e <net_if_ipv6_addr_lookup+0x46>
				if (ret) {
   18b60:	b107      	cbz	r7, 18b64 <net_if_ipv6_addr_lookup+0x3c>
					*ret = iface;
   18b62:	603c      	str	r4, [r7, #0]
				return &iface->ipv6.unicast[i];
   18b64:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   18b68:	4420      	add	r0, r4
   18b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18b6e:	356c      	adds	r5, #108	; 0x6c
		for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   18b70:	f5b5 7fa2 	cmp.w	r5, #324	; 0x144
   18b74:	f106 066c 	add.w	r6, r6, #108	; 0x6c
   18b78:	d1e5      	bne.n	18b46 <net_if_ipv6_addr_lookup+0x1e>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   18b7a:	f504 7418 	add.w	r4, r4, #608	; 0x260
   18b7e:	e7da      	b.n	18b36 <net_if_ipv6_addr_lookup+0xe>
   18b80:	2000ee00 	.word	0x2000ee00
   18b84:	2000f060 	.word	0x2000f060

00018b88 <dad_timeout>:
{
   18b88:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct net_if *iface = NULL;
   18b8a:	a902      	add	r1, sp, #8
   18b8c:	2300      	movs	r3, #0
   18b8e:	f841 3d04 	str.w	r3, [r1, #-4]!
	tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr, &iface);
   18b92:	f1a0 0438 	sub.w	r4, r0, #56	; 0x38
	ifaddr->addr_state = NET_ADDR_PREFERRED;
   18b96:	2301      	movs	r3, #1
   18b98:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr, &iface);
   18b9c:	f1a0 053c 	sub.w	r5, r0, #60	; 0x3c
   18ba0:	4620      	mov	r0, r4
   18ba2:	f7ff ffc1 	bl	18b28 <net_if_ipv6_addr_lookup>
	if (tmp == ifaddr) {
   18ba6:	4285      	cmp	r5, r0
   18ba8:	d107      	bne.n	18bba <dad_timeout+0x32>
		net_mgmt_event_notify(NET_EVENT_IPV6_DAD_SUCCEED, iface);
   18baa:	9901      	ldr	r1, [sp, #4]
   18bac:	4804      	ldr	r0, [pc, #16]	; (18bc0 <dad_timeout+0x38>)
   18bae:	f7ff ff65 	bl	18a7c <net_mgmt_event_notify>
		net_ipv6_nbr_rm(iface, &ifaddr->address.in6_addr);
   18bb2:	4621      	mov	r1, r4
   18bb4:	9801      	ldr	r0, [sp, #4]
   18bb6:	f003 f951 	bl	1be5c <net_ipv6_nbr_rm>
}
   18bba:	b003      	add	sp, #12
   18bbc:	bd30      	pop	{r4, r5, pc}
   18bbe:	bf00      	nop
   18bc0:	f060000d 	.word	0xf060000d

00018bc4 <net_if_ipv6_addr_update_lifetime>:
	k_delayed_work_submit(&ifaddr->lifetime,
   18bc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18bc8:	4359      	muls	r1, r3
   18bca:	3014      	adds	r0, #20
   18bcc:	f7ff bf4e 	b.w	18a6c <k_delayed_work_submit>

00018bd0 <net_if_ipv6_addr_add>:
{
   18bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bd4:	4604      	mov	r4, r0
   18bd6:	b089      	sub	sp, #36	; 0x24
   18bd8:	460f      	mov	r7, r1
   18bda:	4693      	mov	fp, r2
   18bdc:	469a      	mov	sl, r3
   18bde:	f100 0630 	add.w	r6, r0, #48	; 0x30
   18be2:	2500      	movs	r5, #0
		if (!iface->ipv6.unicast[i].is_used) {
   18be4:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
   18be8:	b153      	cbz	r3, 18c00 <net_if_ipv6_addr_add+0x30>
		if (net_ipv6_addr_cmp(addr,
   18bea:	4631      	mov	r1, r6
   18bec:	4638      	mov	r0, r7
   18bee:	f7ff ff34 	bl	18a5a <net_ipv6_addr_cmp>
   18bf2:	b128      	cbz	r0, 18c00 <net_if_ipv6_addr_add+0x30>
			return &iface->ipv6.unicast[i];
   18bf4:	352c      	adds	r5, #44	; 0x2c
   18bf6:	4425      	add	r5, r4
}
   18bf8:	4628      	mov	r0, r5
   18bfa:	b009      	add	sp, #36	; 0x24
   18bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c00:	356c      	adds	r5, #108	; 0x6c
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   18c02:	f5b5 7fa2 	cmp.w	r5, #324	; 0x144
   18c06:	f106 066c 	add.w	r6, r6, #108	; 0x6c
   18c0a:	d1eb      	bne.n	18be4 <net_if_ipv6_addr_add+0x14>
		if (iface->ipv6.unicast[i].is_used) {
   18c0c:	f894 6094 	ldrb.w	r6, [r4, #148]	; 0x94
   18c10:	b156      	cbz	r6, 18c28 <net_if_ipv6_addr_add+0x58>
   18c12:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   18c16:	2b00      	cmp	r3, #0
   18c18:	f000 8094 	beq.w	18d44 <net_if_ipv6_addr_add+0x174>
   18c1c:	f894 316c 	ldrb.w	r3, [r4, #364]	; 0x16c
   18c20:	2b00      	cmp	r3, #0
   18c22:	f040 8095 	bne.w	18d50 <net_if_ipv6_addr_add+0x180>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   18c26:	2602      	movs	r6, #2
   18c28:	f04f 086c 	mov.w	r8, #108	; 0x6c
   18c2c:	fb08 f806 	mul.w	r8, r8, r6
	ifaddr->is_used = true;
   18c30:	eb04 0908 	add.w	r9, r4, r8
   18c34:	2301      	movs	r3, #1
   18c36:	f889 3094 	strb.w	r3, [r9, #148]	; 0x94
	ifaddr->address.family = AF_INET6;
   18c3a:	230a      	movs	r3, #10
		net_if_addr_init(&iface->ipv6.unicast[i], addr, addr_type,
   18c3c:	f108 052c 	add.w	r5, r8, #44	; 0x2c
	ifaddr->address.family = AF_INET6;
   18c40:	f8a9 302c 	strh.w	r3, [r9, #44]	; 0x2c
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   18c44:	463b      	mov	r3, r7
   18c46:	af04      	add	r7, sp, #16
		net_if_addr_init(&iface->ipv6.unicast[i], addr, addr_type,
   18c48:	4425      	add	r5, r4
	ifaddr->addr_type = addr_type;
   18c4a:	f889 b090 	strb.w	fp, [r9, #144]	; 0x90
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   18c4e:	f103 0c10 	add.w	ip, r3, #16
   18c52:	463a      	mov	r2, r7
   18c54:	6818      	ldr	r0, [r3, #0]
   18c56:	6859      	ldr	r1, [r3, #4]
   18c58:	46be      	mov	lr, r7
   18c5a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   18c5e:	3308      	adds	r3, #8
   18c60:	4563      	cmp	r3, ip
   18c62:	4677      	mov	r7, lr
   18c64:	d1f6      	bne.n	18c54 <net_if_ipv6_addr_add+0x84>
   18c66:	1d2f      	adds	r7, r5, #4
   18c68:	f10d 0e20 	add.w	lr, sp, #32
   18c6c:	4613      	mov	r3, r2
   18c6e:	cb03      	ldmia	r3!, {r0, r1}
   18c70:	4573      	cmp	r3, lr
   18c72:	6038      	str	r0, [r7, #0]
   18c74:	6079      	str	r1, [r7, #4]
   18c76:	461a      	mov	r2, r3
   18c78:	f107 0708 	add.w	r7, r7, #8
   18c7c:	d1f6      	bne.n	18c6c <net_if_ipv6_addr_add+0x9c>
	k_delayed_work_init(&ifaddr->dad_timer, dad_timeout);
   18c7e:	f108 0068 	add.w	r0, r8, #104	; 0x68
   18c82:	4934      	ldr	r1, [pc, #208]	; (18d54 <net_if_ipv6_addr_add+0x184>)
   18c84:	4420      	add	r0, r4
   18c86:	f008 fa51 	bl	2112c <k_delayed_work_init>
   18c8a:	236c      	movs	r3, #108	; 0x6c
		ifaddr->is_infinite = false;
   18c8c:	fb03 4306 	mla	r3, r3, r6, r4
	if (vlifetime) {
   18c90:	f1ba 0f00 	cmp.w	sl, #0
   18c94:	d058      	beq.n	18d48 <net_if_ipv6_addr_add+0x178>
		ifaddr->is_infinite = false;
   18c96:	2200      	movs	r2, #0
		k_delayed_work_init(&ifaddr->lifetime, ipv6_addr_expired);
   18c98:	f108 0040 	add.w	r0, r8, #64	; 0x40
   18c9c:	492e      	ldr	r1, [pc, #184]	; (18d58 <net_if_ipv6_addr_add+0x188>)
		ifaddr->is_infinite = false;
   18c9e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		k_delayed_work_init(&ifaddr->lifetime, ipv6_addr_expired);
   18ca2:	4420      	add	r0, r4
   18ca4:	f008 fa42 	bl	2112c <k_delayed_work_init>
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
   18ca8:	4651      	mov	r1, sl
   18caa:	4628      	mov	r0, r5
   18cac:	f7ff ff8a 	bl	18bc4 <net_if_ipv6_addr_update_lifetime>
					u16_t addr0, u16_t addr1,
					u16_t addr2, u16_t addr3,
					u16_t addr4, u16_t addr5,
					u16_t addr6, u16_t addr7)
{
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   18cb0:	f240 23ff 	movw	r3, #767	; 0x2ff
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   18cb4:	2700      	movs	r7, #0
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   18cb6:	f8ad 3000 	strh.w	r3, [sp]
	ret = net_ipv6_mld_join(iface, &addr);
   18cba:	4669      	mov	r1, sp
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   18cbc:	f44f 7380 	mov.w	r3, #256	; 0x100
   18cc0:	4620      	mov	r0, r4
   18cc2:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   18cc6:	f8ad 7002 	strh.w	r7, [sp, #2]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   18cca:	f8ad 7004 	strh.w	r7, [sp, #4]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   18cce:	f8ad 7006 	strh.w	r7, [sp, #6]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   18cd2:	f8ad 7008 	strh.w	r7, [sp, #8]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   18cd6:	f8ad 700a 	strh.w	r7, [sp, #10]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   18cda:	f8ad 700c 	strh.w	r7, [sp, #12]
   18cde:	f004 fcf7 	bl	1d6d0 <net_ipv6_mld_join>
	dst->s6_addr[0]   = 0xFF;
   18ce2:	23ff      	movs	r3, #255	; 0xff
   18ce4:	f88d 3000 	strb.w	r3, [sp]
	dst->s6_addr[12]  = 0xFF;
   18ce8:	f88d 300c 	strb.w	r3, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   18cec:	236c      	movs	r3, #108	; 0x6c
   18cee:	fb03 4606 	mla	r6, r3, r6, r4
	dst->s6_addr[1]   = 0x02;
   18cf2:	2202      	movs	r2, #2
	dst->s6_addr[13]  = src->s6_addr[13];
   18cf4:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
	dst->s6_addr[1]   = 0x02;
   18cf8:	f88d 2001 	strb.w	r2, [sp, #1]
	dst->s6_addr[11]  = 0x01;
   18cfc:	2201      	movs	r2, #1
   18cfe:	f88d 200b 	strb.w	r2, [sp, #11]
	dst->s6_addr[13]  = src->s6_addr[13];
   18d02:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   18d06:	f899 203f 	ldrb.w	r2, [r9, #63]	; 0x3f
   18d0a:	f899 303e 	ldrb.w	r3, [r9, #62]	; 0x3e
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   18d0e:	f8ad 7002 	strh.w	r7, [sp, #2]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   18d12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	ret = net_ipv6_mld_join(iface, &addr);
   18d16:	4669      	mov	r1, sp
   18d18:	4620      	mov	r0, r4
   18d1a:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   18d1e:	f8ad 7004 	strh.w	r7, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   18d22:	f8ad 7006 	strh.w	r7, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   18d26:	f8ad 7008 	strh.w	r7, [sp, #8]
	dst->s6_addr[10]  = 0;
   18d2a:	f88d 700a 	strb.w	r7, [sp, #10]
   18d2e:	f004 fccf 	bl	1d6d0 <net_ipv6_mld_join>
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   18d32:	4629      	mov	r1, r5
   18d34:	4620      	mov	r0, r4
   18d36:	f7ff fea5 	bl	18a84 <net_if_ipv6_start_dad>
		net_mgmt_event_notify(NET_EVENT_IPV6_ADDR_ADD, iface);
   18d3a:	4621      	mov	r1, r4
   18d3c:	4807      	ldr	r0, [pc, #28]	; (18d5c <net_if_ipv6_addr_add+0x18c>)
   18d3e:	f7ff fe9d 	bl	18a7c <net_mgmt_event_notify>
   18d42:	e759      	b.n	18bf8 <net_if_ipv6_addr_add+0x28>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   18d44:	2601      	movs	r6, #1
   18d46:	e76f      	b.n	18c28 <net_if_ipv6_addr_add+0x58>
		ifaddr->is_infinite = true;
   18d48:	2201      	movs	r2, #1
   18d4a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
   18d4e:	e7af      	b.n	18cb0 <net_if_ipv6_addr_add+0xe0>
	return NULL;
   18d50:	2500      	movs	r5, #0
   18d52:	e751      	b.n	18bf8 <net_if_ipv6_addr_add+0x28>
   18d54:	00018b89 	.word	0x00018b89
   18d58:	00018961 	.word	0x00018961
   18d5c:	f0600001 	.word	0xf0600001

00018d60 <net_if_start_dad>:
{
   18d60:	b5f0      	push	{r4, r5, r6, r7, lr}
   18d62:	4604      	mov	r4, r0
   18d64:	b085      	sub	sp, #20
	struct in6_addr addr = { };
   18d66:	2210      	movs	r2, #16
   18d68:	2100      	movs	r1, #0
   18d6a:	4668      	mov	r0, sp
   18d6c:	f7e7 fd52 	bl	814 <memset>
	addr->s6_addr[0] = 0xfe;
	addr->s6_addr[1] = 0x80;
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);

	switch (lladdr->len) {
   18d70:	7d22      	ldrb	r2, [r4, #20]
	addr->s6_addr[0] = 0xfe;
   18d72:	25fe      	movs	r5, #254	; 0xfe
	addr->s6_addr[1] = 0x80;
   18d74:	2380      	movs	r3, #128	; 0x80
	switch (lladdr->len) {
   18d76:	2a06      	cmp	r2, #6
	addr->s6_addr[0] = 0xfe;
   18d78:	f88d 5000 	strb.w	r5, [sp]
	addr->s6_addr[1] = 0x80;
   18d7c:	f88d 3001 	strb.w	r3, [sp, #1]
	switch (lladdr->len) {
   18d80:	d02e      	beq.n	18de0 <net_if_start_dad+0x80>
   18d82:	2a08      	cmp	r2, #8
   18d84:	d047      	beq.n	18e16 <net_if_start_dad+0xb6>
   18d86:	2a02      	cmp	r2, #2
   18d88:	d10e      	bne.n	18da8 <net_if_start_dad+0x48>
	case 2:
		/* The generated IPv6 shall not toggle the
		 * Universal/Local bit. RFC 6282 ch 3.2.2
		 */
		if (lladdr->type == NET_LINK_IEEE802154) {
   18d8a:	7d63      	ldrb	r3, [r4, #21]
   18d8c:	2b01      	cmp	r3, #1
   18d8e:	d10b      	bne.n	18da8 <net_if_start_dad+0x48>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
			addr->s6_addr[11] = 0xff;
   18d90:	23ff      	movs	r3, #255	; 0xff
   18d92:	f88d 300b 	strb.w	r3, [sp, #11]
			addr->s6_addr[12] = 0xfe;
			addr->s6_addr[13] = 0;
			addr->s6_addr[14] = lladdr->addr[0];
   18d96:	6923      	ldr	r3, [r4, #16]
			addr->s6_addr[12] = 0xfe;
   18d98:	f88d 500c 	strb.w	r5, [sp, #12]
			addr->s6_addr[14] = lladdr->addr[0];
   18d9c:	781a      	ldrb	r2, [r3, #0]
   18d9e:	f88d 200e 	strb.w	r2, [sp, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   18da2:	785b      	ldrb	r3, [r3, #1]
   18da4:	f88d 300f 	strb.w	r3, [sp, #15]
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
   18da8:	2300      	movs	r3, #0
   18daa:	2201      	movs	r2, #1
   18dac:	4669      	mov	r1, sp
   18dae:	4620      	mov	r0, r4
   18db0:	f7ff ff0e 	bl	18bd0 <net_if_ipv6_addr_add>
   18db4:	f104 052c 	add.w	r5, r4, #44	; 0x2c
   18db8:	4607      	mov	r7, r0
   18dba:	f504 76b8 	add.w	r6, r4, #368	; 0x170
		if (!iface->ipv6.unicast[i].is_used ||
   18dbe:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   18dc2:	b143      	cbz	r3, 18dd6 <net_if_start_dad+0x76>
   18dc4:	882b      	ldrh	r3, [r5, #0]
   18dc6:	2b0a      	cmp	r3, #10
   18dc8:	d105      	bne.n	18dd6 <net_if_start_dad+0x76>
		    iface->ipv6.unicast[i].address.family != AF_INET6 ||
   18dca:	42af      	cmp	r7, r5
   18dcc:	d003      	beq.n	18dd6 <net_if_start_dad+0x76>
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   18dce:	4629      	mov	r1, r5
   18dd0:	4620      	mov	r0, r4
   18dd2:	f7ff fe57 	bl	18a84 <net_if_ipv6_start_dad>
   18dd6:	356c      	adds	r5, #108	; 0x6c
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   18dd8:	42b5      	cmp	r5, r6
   18dda:	d1f0      	bne.n	18dbe <net_if_start_dad+0x5e>
}
   18ddc:	b005      	add	sp, #20
   18dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
		break;
	case 6:
		/* We do not toggle the Universal/Local bit
		 * in Bluetooth. See RFC 7668 ch 3.2.2
		 */
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   18de0:	2203      	movs	r2, #3
   18de2:	6921      	ldr	r1, [r4, #16]
   18de4:	a802      	add	r0, sp, #8
   18de6:	f7e7 fce9 	bl	7bc <memcpy>
		addr->s6_addr[11] = 0xff;
		addr->s6_addr[12] = 0xfe;
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   18dea:	6921      	ldr	r1, [r4, #16]
		addr->s6_addr[12] = 0xfe;
   18dec:	f88d 500c 	strb.w	r5, [sp, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   18df0:	2203      	movs	r2, #3
		addr->s6_addr[11] = 0xff;
   18df2:	23ff      	movs	r3, #255	; 0xff
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   18df4:	4411      	add	r1, r2
   18df6:	f10d 000d 	add.w	r0, sp, #13
		addr->s6_addr[11] = 0xff;
   18dfa:	f88d 300b 	strb.w	r3, [sp, #11]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   18dfe:	f7e7 fcdd 	bl	7bc <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
			addr->s6_addr[8] ^= 0x02;
		}
#endif

		if (lladdr->type == NET_LINK_ETHERNET) {
   18e02:	7d63      	ldrb	r3, [r4, #21]
   18e04:	2b03      	cmp	r3, #3
   18e06:	d1cf      	bne.n	18da8 <net_if_start_dad+0x48>
		}

		break;
	case 8:
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
		addr->s6_addr[8] ^= 0x02;
   18e08:	f89d 3008 	ldrb.w	r3, [sp, #8]
   18e0c:	f083 0302 	eor.w	r3, r3, #2
   18e10:	f88d 3008 	strb.w	r3, [sp, #8]
   18e14:	e7c8      	b.n	18da8 <net_if_start_dad+0x48>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   18e16:	6921      	ldr	r1, [r4, #16]
   18e18:	a802      	add	r0, sp, #8
   18e1a:	f7e7 fccf 	bl	7bc <memcpy>
   18e1e:	e7f3      	b.n	18e08 <net_if_start_dad+0xa8>

00018e20 <net_if_ipv6_maddr_add>:
{
   18e20:	b538      	push	{r3, r4, r5, lr}
	if (!net_is_ipv6_addr_mcast(addr)) {
   18e22:	780b      	ldrb	r3, [r1, #0]
   18e24:	2bff      	cmp	r3, #255	; 0xff
{
   18e26:	4604      	mov	r4, r0
	if (!net_is_ipv6_addr_mcast(addr)) {
   18e28:	d125      	bne.n	18e76 <net_if_ipv6_maddr_add+0x56>
		if (iface->ipv6.mcast[i].is_used) {
   18e2a:	f890 5170 	ldrb.w	r5, [r0, #368]	; 0x170
   18e2e:	f015 0501 	ands.w	r5, r5, #1
   18e32:	d01e      	beq.n	18e72 <net_if_ipv6_maddr_add+0x52>
   18e34:	f890 3188 	ldrb.w	r3, [r0, #392]	; 0x188
   18e38:	07db      	lsls	r3, r3, #31
   18e3a:	d41c      	bmi.n	18e76 <net_if_ipv6_maddr_add+0x56>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   18e3c:	2001      	movs	r0, #1
		iface->ipv6.mcast[i].is_used = true;
   18e3e:	2518      	movs	r5, #24
   18e40:	4345      	muls	r5, r0
   18e42:	1962      	adds	r2, r4, r5
		memcpy(&iface->ipv6.mcast[i].address.in6_addr, addr, 16);
   18e44:	f505 70bc 	add.w	r0, r5, #376	; 0x178
		iface->ipv6.mcast[i].is_used = true;
   18e48:	f892 3170 	ldrb.w	r3, [r2, #368]	; 0x170
   18e4c:	f043 0301 	orr.w	r3, r3, #1
   18e50:	f882 3170 	strb.w	r3, [r2, #368]	; 0x170
		iface->ipv6.mcast[i].address.family = AF_INET6;
   18e54:	230a      	movs	r3, #10
   18e56:	f8a2 3174 	strh.w	r3, [r2, #372]	; 0x174
		memcpy(&iface->ipv6.mcast[i].address.in6_addr, addr, 16);
   18e5a:	4420      	add	r0, r4
   18e5c:	2210      	movs	r2, #16
   18e5e:	f7e7 fcad 	bl	7bc <memcpy>
		net_mgmt_event_notify(NET_EVENT_IPV6_MADDR_ADD, iface);
   18e62:	4621      	mov	r1, r4
   18e64:	4805      	ldr	r0, [pc, #20]	; (18e7c <net_if_ipv6_maddr_add+0x5c>)
   18e66:	f7ff fe09 	bl	18a7c <net_mgmt_event_notify>
		return &iface->ipv6.mcast[i];
   18e6a:	f505 70b8 	add.w	r0, r5, #368	; 0x170
   18e6e:	4420      	add	r0, r4
   18e70:	bd38      	pop	{r3, r4, r5, pc}
		if (iface->ipv6.mcast[i].is_used) {
   18e72:	4628      	mov	r0, r5
   18e74:	e7e3      	b.n	18e3e <net_if_ipv6_maddr_add+0x1e>
		return NULL;
   18e76:	2000      	movs	r0, #0
}
   18e78:	bd38      	pop	{r3, r4, r5, pc}
   18e7a:	bf00      	nop
   18e7c:	f0600003 	.word	0xf0600003

00018e80 <net_if_ipv6_maddr_rm>:
{
   18e80:	b538      	push	{r3, r4, r5, lr}
		if (!iface->ipv6.mcast[i].is_used) {
   18e82:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
   18e86:	07da      	lsls	r2, r3, #31
{
   18e88:	4604      	mov	r4, r0
   18e8a:	460d      	mov	r5, r1
		if (!iface->ipv6.mcast[i].is_used) {
   18e8c:	d504      	bpl.n	18e98 <net_if_ipv6_maddr_rm+0x18>
		if (!net_ipv6_addr_cmp(
   18e8e:	f500 70bc 	add.w	r0, r0, #376	; 0x178
   18e92:	f7ff fde2 	bl	18a5a <net_ipv6_addr_cmp>
   18e96:	b9c8      	cbnz	r0, 18ecc <net_if_ipv6_maddr_rm+0x4c>
		if (!iface->ipv6.mcast[i].is_used) {
   18e98:	f894 3188 	ldrb.w	r3, [r4, #392]	; 0x188
   18e9c:	07db      	lsls	r3, r3, #31
   18e9e:	d517      	bpl.n	18ed0 <net_if_ipv6_maddr_rm+0x50>
		if (!net_ipv6_addr_cmp(
   18ea0:	4629      	mov	r1, r5
   18ea2:	f504 70c8 	add.w	r0, r4, #400	; 0x190
   18ea6:	f7ff fdd8 	bl	18a5a <net_ipv6_addr_cmp>
   18eaa:	b188      	cbz	r0, 18ed0 <net_if_ipv6_maddr_rm+0x50>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   18eac:	2301      	movs	r3, #1
		iface->ipv6.mcast[i].is_used = false;
   18eae:	2218      	movs	r2, #24
   18eb0:	fb02 4303 	mla	r3, r2, r3, r4
		net_mgmt_event_notify(NET_EVENT_IPV6_MADDR_DEL, iface);
   18eb4:	4621      	mov	r1, r4
		iface->ipv6.mcast[i].is_used = false;
   18eb6:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
		net_mgmt_event_notify(NET_EVENT_IPV6_MADDR_DEL, iface);
   18eba:	4806      	ldr	r0, [pc, #24]	; (18ed4 <net_if_ipv6_maddr_rm+0x54>)
		iface->ipv6.mcast[i].is_used = false;
   18ebc:	f36f 0200 	bfc	r2, #0, #1
   18ec0:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		net_mgmt_event_notify(NET_EVENT_IPV6_MADDR_DEL, iface);
   18ec4:	f7ff fdda 	bl	18a7c <net_mgmt_event_notify>
		return true;
   18ec8:	2001      	movs	r0, #1
   18eca:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   18ecc:	2300      	movs	r3, #0
   18ece:	e7ee      	b.n	18eae <net_if_ipv6_maddr_rm+0x2e>
	return false;
   18ed0:	2000      	movs	r0, #0
}
   18ed2:	bd38      	pop	{r3, r4, r5, pc}
   18ed4:	f0600004 	.word	0xf0600004

00018ed8 <net_if_ipv6_addr_rm>:
{
   18ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   18edc:	4604      	mov	r4, r0
   18ede:	460f      	mov	r7, r1
   18ee0:	f100 0630 	add.w	r6, r0, #48	; 0x30
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   18ee4:	2500      	movs	r5, #0
   18ee6:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
		if (!iface->ipv6.unicast[i].is_used) {
   18eea:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
   18eee:	2b00      	cmp	r3, #0
   18ef0:	d041      	beq.n	18f76 <net_if_ipv6_addr_rm+0x9e>
		if (!net_ipv6_addr_cmp(
   18ef2:	4639      	mov	r1, r7
   18ef4:	4630      	mov	r0, r6
   18ef6:	f7ff fdb0 	bl	18a5a <net_ipv6_addr_cmp>
   18efa:	fb0a f805 	mul.w	r8, sl, r5
   18efe:	4681      	mov	r9, r0
   18f00:	b3c8      	cbz	r0, 18f76 <net_if_ipv6_addr_rm+0x9e>
		if (!iface->ipv6.unicast[i].is_infinite) {
   18f02:	eb04 0308 	add.w	r3, r4, r8
   18f06:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
   18f0a:	b923      	cbnz	r3, 18f16 <net_if_ipv6_addr_rm+0x3e>
			k_delayed_work_cancel(&iface->ipv6.unicast[i].lifetime);
   18f0c:	f108 0040 	add.w	r0, r8, #64	; 0x40
   18f10:	4420      	add	r0, r4
   18f12:	f008 f929 	bl	21168 <k_delayed_work_cancel>
		iface->ipv6.unicast[i].is_used = false;
   18f16:	236c      	movs	r3, #108	; 0x6c
   18f18:	fb03 4505 	mla	r5, r3, r5, r4
   18f1c:	2300      	movs	r3, #0
   18f1e:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   18f22:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   18f26:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   18f2a:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   18f2e:	f8ad 3008 	strh.w	r3, [sp, #8]
	dst->s6_addr[10]  = 0;
   18f32:	f88d 300a 	strb.w	r3, [sp, #10]
	dst->s6_addr[11]  = 0x01;
   18f36:	2301      	movs	r3, #1
	dst->s6_addr[0]   = 0xFF;
   18f38:	22ff      	movs	r2, #255	; 0xff
	dst->s6_addr[11]  = 0x01;
   18f3a:	f88d 300b 	strb.w	r3, [sp, #11]
	dst->s6_addr[13]  = src->s6_addr[13];
   18f3e:	7b7b      	ldrb	r3, [r7, #13]
	dst->s6_addr[0]   = 0xFF;
   18f40:	f88d 2000 	strb.w	r2, [sp]
	dst->s6_addr[12]  = 0xFF;
   18f44:	f88d 200c 	strb.w	r2, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   18f48:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   18f4c:	7bfa      	ldrb	r2, [r7, #15]
   18f4e:	7bbb      	ldrb	r3, [r7, #14]
	dst->s6_addr[1]   = 0x02;
   18f50:	2102      	movs	r1, #2
   18f52:	f88d 1001 	strb.w	r1, [sp, #1]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   18f56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		net_if_ipv6_maddr_rm(iface, &maddr);
   18f5a:	4669      	mov	r1, sp
   18f5c:	4620      	mov	r0, r4
   18f5e:	f8ad 300e 	strh.w	r3, [sp, #14]
   18f62:	f7ff ff8d 	bl	18e80 <net_if_ipv6_maddr_rm>
		net_mgmt_event_notify(NET_EVENT_IPV6_ADDR_DEL, iface);
   18f66:	4621      	mov	r1, r4
   18f68:	4807      	ldr	r0, [pc, #28]	; (18f88 <net_if_ipv6_addr_rm+0xb0>)
   18f6a:	f7ff fd87 	bl	18a7c <net_mgmt_event_notify>
}
   18f6e:	4648      	mov	r0, r9
   18f70:	b004      	add	sp, #16
   18f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   18f76:	3501      	adds	r5, #1
   18f78:	2d03      	cmp	r5, #3
   18f7a:	f106 066c 	add.w	r6, r6, #108	; 0x6c
   18f7e:	d1b4      	bne.n	18eea <net_if_ipv6_addr_rm+0x12>
	return false;
   18f80:	f04f 0900 	mov.w	r9, #0
   18f84:	e7f3      	b.n	18f6e <net_if_ipv6_addr_rm+0x96>
   18f86:	bf00      	nop
   18f88:	f0600002 	.word	0xf0600002

00018f8c <net_if_ipv6_dad_failed>:
{
   18f8c:	b513      	push	{r0, r1, r4, lr}
   18f8e:	ab02      	add	r3, sp, #8
   18f90:	460c      	mov	r4, r1
   18f92:	f843 0d04 	str.w	r0, [r3, #-4]!
	ifaddr = net_if_ipv6_addr_lookup(addr, &iface);
   18f96:	4620      	mov	r0, r4
   18f98:	4619      	mov	r1, r3
   18f9a:	f7ff fdc5 	bl	18b28 <net_if_ipv6_addr_lookup>
	if (!ifaddr) {
   18f9e:	b150      	cbz	r0, 18fb6 <net_if_ipv6_dad_failed+0x2a>
	k_delayed_work_cancel(&ifaddr->dad_timer);
   18fa0:	303c      	adds	r0, #60	; 0x3c
   18fa2:	f008 f8e1 	bl	21168 <k_delayed_work_cancel>
	net_mgmt_event_notify(NET_EVENT_IPV6_DAD_FAILED, iface);
   18fa6:	9901      	ldr	r1, [sp, #4]
   18fa8:	4804      	ldr	r0, [pc, #16]	; (18fbc <net_if_ipv6_dad_failed+0x30>)
   18faa:	f7ff fd67 	bl	18a7c <net_mgmt_event_notify>
	net_if_ipv6_addr_rm(iface, addr);
   18fae:	4621      	mov	r1, r4
   18fb0:	9801      	ldr	r0, [sp, #4]
   18fb2:	f7ff ff91 	bl	18ed8 <net_if_ipv6_addr_rm>
}
   18fb6:	b002      	add	sp, #8
   18fb8:	bd10      	pop	{r4, pc}
   18fba:	bf00      	nop
   18fbc:	f060000e 	.word	0xf060000e

00018fc0 <net_if_ipv6_maddr_lookup>:
{
   18fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   18fc2:	4c1c      	ldr	r4, [pc, #112]	; (19034 <net_if_ipv6_maddr_lookup+0x74>)
   18fc4:	4f1c      	ldr	r7, [pc, #112]	; (19038 <net_if_ipv6_maddr_lookup+0x78>)
{
   18fc6:	4606      	mov	r6, r0
   18fc8:	460d      	mov	r5, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   18fca:	42bc      	cmp	r4, r7
   18fcc:	d101      	bne.n	18fd2 <net_if_ipv6_maddr_lookup+0x12>
	return NULL;
   18fce:	2000      	movs	r0, #0
}
   18fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (ret && *ret && iface != *ret) {
   18fd2:	b10d      	cbz	r5, 18fd8 <net_if_ipv6_maddr_lookup+0x18>
   18fd4:	682b      	ldr	r3, [r5, #0]
   18fd6:	b9ab      	cbnz	r3, 19004 <net_if_ipv6_maddr_lookup+0x44>
			if (!iface->ipv6.mcast[i].is_used ||
   18fd8:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   18fdc:	07da      	lsls	r2, r3, #31
   18fde:	d50a      	bpl.n	18ff6 <net_if_ipv6_maddr_lookup+0x36>
   18fe0:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
   18fe4:	2b0a      	cmp	r3, #10
   18fe6:	d106      	bne.n	18ff6 <net_if_ipv6_maddr_lookup+0x36>
			if (net_is_ipv6_prefix(maddr->s6_addr,
   18fe8:	2280      	movs	r2, #128	; 0x80
   18fea:	f504 71bc 	add.w	r1, r4, #376	; 0x178
   18fee:	4630      	mov	r0, r6
   18ff0:	f7ff fd0e 	bl	18a10 <net_is_ipv6_prefix>
   18ff4:	b9e0      	cbnz	r0, 19030 <net_if_ipv6_maddr_lookup+0x70>
			if (!iface->ipv6.mcast[i].is_used ||
   18ff6:	f894 3188 	ldrb.w	r3, [r4, #392]	; 0x188
   18ffa:	07db      	lsls	r3, r3, #31
   18ffc:	d405      	bmi.n	1900a <net_if_ipv6_maddr_lookup+0x4a>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   18ffe:	f504 7418 	add.w	r4, r4, #608	; 0x260
   19002:	e7e2      	b.n	18fca <net_if_ipv6_maddr_lookup+0xa>
		if (ret && *ret && iface != *ret) {
   19004:	429c      	cmp	r4, r3
   19006:	d1fa      	bne.n	18ffe <net_if_ipv6_maddr_lookup+0x3e>
   19008:	e7e6      	b.n	18fd8 <net_if_ipv6_maddr_lookup+0x18>
			if (!iface->ipv6.mcast[i].is_used ||
   1900a:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
   1900e:	2b0a      	cmp	r3, #10
   19010:	d1f5      	bne.n	18ffe <net_if_ipv6_maddr_lookup+0x3e>
			if (net_is_ipv6_prefix(maddr->s6_addr,
   19012:	2280      	movs	r2, #128	; 0x80
   19014:	f504 71c8 	add.w	r1, r4, #400	; 0x190
   19018:	4630      	mov	r0, r6
   1901a:	f7ff fcf9 	bl	18a10 <net_is_ipv6_prefix>
   1901e:	2800      	cmp	r0, #0
   19020:	d0ed      	beq.n	18ffe <net_if_ipv6_maddr_lookup+0x3e>
   19022:	2018      	movs	r0, #24
				if (ret) {
   19024:	b105      	cbz	r5, 19028 <net_if_ipv6_maddr_lookup+0x68>
					*ret = iface;
   19026:	602c      	str	r4, [r5, #0]
				return &iface->ipv6.mcast[i];
   19028:	f500 70b8 	add.w	r0, r0, #368	; 0x170
   1902c:	4420      	add	r0, r4
   1902e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (net_is_ipv6_prefix(maddr->s6_addr,
   19030:	2000      	movs	r0, #0
   19032:	e7f7      	b.n	19024 <net_if_ipv6_maddr_lookup+0x64>
   19034:	2000ee00 	.word	0x2000ee00
   19038:	2000f060 	.word	0x2000f060

0001903c <net_if_mcast_monitor>:
{
   1903c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1903e:	4b0a      	ldr	r3, [pc, #40]	; (19068 <net_if_mcast_monitor+0x2c>)
   19040:	681b      	ldr	r3, [r3, #0]
   19042:	4605      	mov	r5, r0
   19044:	460e      	mov	r6, r1
   19046:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   19048:	b903      	cbnz	r3, 1904c <net_if_mcast_monitor+0x10>
   1904a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1904c:	681c      	ldr	r4, [r3, #0]
		if (iface == mon->iface) {
   1904e:	685a      	ldr	r2, [r3, #4]
   19050:	42aa      	cmp	r2, r5
   19052:	d104      	bne.n	1905e <net_if_mcast_monitor+0x22>
			mon->cb(iface, addr, is_joined);
   19054:	689b      	ldr	r3, [r3, #8]
   19056:	463a      	mov	r2, r7
   19058:	4631      	mov	r1, r6
   1905a:	4628      	mov	r0, r5
   1905c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1905e:	b904      	cbnz	r4, 19062 <net_if_mcast_monitor+0x26>
   19060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19062:	4623      	mov	r3, r4
   19064:	6824      	ldr	r4, [r4, #0]
   19066:	e7f2      	b.n	1904e <net_if_mcast_monitor+0x12>
   19068:	200030a4 	.word	0x200030a4

0001906c <net_if_ipv6_prefix_add>:
{
   1906c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19070:	4698      	mov	r8, r3
		if (!iface->ipv6.unicast[i].is_used) {
   19072:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
{
   19076:	b085      	sub	sp, #20
   19078:	4604      	mov	r4, r0
   1907a:	460e      	mov	r6, r1
   1907c:	4691      	mov	r9, r2
		if (!iface->ipv6.unicast[i].is_used) {
   1907e:	b14b      	cbz	r3, 19094 <net_if_ipv6_prefix_add+0x28>
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   19080:	f500 71e4 	add.w	r1, r0, #456	; 0x1c8
   19084:	4630      	mov	r0, r6
   19086:	f7ff fce8 	bl	18a5a <net_ipv6_addr_cmp>
   1908a:	b118      	cbz	r0, 19094 <net_if_ipv6_prefix_add+0x28>
   1908c:	f894 31d8 	ldrb.w	r3, [r4, #472]	; 0x1d8
   19090:	454b      	cmp	r3, r9
   19092:	d014      	beq.n	190be <net_if_ipv6_prefix_add+0x52>
		if (!iface->ipv6.unicast[i].is_used) {
   19094:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   19098:	b19b      	cbz	r3, 190c2 <net_if_ipv6_prefix_add+0x56>
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1909a:	f504 7101 	add.w	r1, r4, #516	; 0x204
   1909e:	4630      	mov	r0, r6
   190a0:	f7ff fcdb 	bl	18a5a <net_ipv6_addr_cmp>
   190a4:	b168      	cbz	r0, 190c2 <net_if_ipv6_prefix_add+0x56>
   190a6:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
   190aa:	454b      	cmp	r3, r9
   190ac:	d109      	bne.n	190c2 <net_if_ipv6_prefix_add+0x56>
   190ae:	253c      	movs	r5, #60	; 0x3c
			return &iface->ipv6.prefix[i];
   190b0:	f505 75d0 	add.w	r5, r5, #416	; 0x1a0
   190b4:	4425      	add	r5, r4
}
   190b6:	4628      	mov	r0, r5
   190b8:	b005      	add	sp, #20
   190ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   190be:	2500      	movs	r5, #0
   190c0:	e7f6      	b.n	190b0 <net_if_ipv6_prefix_add+0x44>
		if (iface->ipv6.prefix[i].is_used) {
   190c2:	f894 71da 	ldrb.w	r7, [r4, #474]	; 0x1da
   190c6:	b11f      	cbz	r7, 190d0 <net_if_ipv6_prefix_add+0x64>
   190c8:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
   190cc:	bbcb      	cbnz	r3, 19142 <net_if_ipv6_prefix_add+0xd6>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   190ce:	2701      	movs	r7, #1
		net_if_ipv6_prefix_init(&iface->ipv6.prefix[i], prefix, len,
   190d0:	233c      	movs	r3, #60	; 0x3c
   190d2:	437b      	muls	r3, r7
   190d4:	f503 75d0 	add.w	r5, r3, #416	; 0x1a0
	prefix->is_used = true;
   190d8:	4423      	add	r3, r4
   190da:	2201      	movs	r2, #1
   190dc:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
	prefix->len = len;
   190e0:	f883 91d8 	strb.w	r9, [r3, #472]	; 0x1d8
	net_ipaddr_copy(&prefix->prefix, addr);
   190e4:	4633      	mov	r3, r6
		net_if_ipv6_prefix_init(&iface->ipv6.prefix[i], prefix, len,
   190e6:	4425      	add	r5, r4
	net_ipaddr_copy(&prefix->prefix, addr);
   190e8:	466e      	mov	r6, sp
   190ea:	f103 0c10 	add.w	ip, r3, #16
   190ee:	466a      	mov	r2, sp
   190f0:	6818      	ldr	r0, [r3, #0]
   190f2:	6859      	ldr	r1, [r3, #4]
   190f4:	46b6      	mov	lr, r6
   190f6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   190fa:	3308      	adds	r3, #8
   190fc:	4563      	cmp	r3, ip
   190fe:	4676      	mov	r6, lr
   19100:	d1f6      	bne.n	190f0 <net_if_ipv6_prefix_add+0x84>
   19102:	f105 0628 	add.w	r6, r5, #40	; 0x28
   19106:	f10d 0e10 	add.w	lr, sp, #16
   1910a:	4613      	mov	r3, r2
   1910c:	cb03      	ldmia	r3!, {r0, r1}
   1910e:	4573      	cmp	r3, lr
   19110:	6030      	str	r0, [r6, #0]
   19112:	6071      	str	r1, [r6, #4]
   19114:	461a      	mov	r2, r3
   19116:	f106 0608 	add.w	r6, r6, #8
   1911a:	d1f6      	bne.n	1910a <net_if_ipv6_prefix_add+0x9e>
	k_delayed_work_init(&prefix->lifetime, prefix_lf_timeout);
   1911c:	4628      	mov	r0, r5
   1911e:	490a      	ldr	r1, [pc, #40]	; (19148 <net_if_ipv6_prefix_add+0xdc>)
   19120:	f008 f804 	bl	2112c <k_delayed_work_init>
   19124:	233c      	movs	r3, #60	; 0x3c
		prefix->is_infinite = true;
   19126:	fb03 4707 	mla	r7, r3, r7, r4
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
   1912a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
		prefix->is_infinite = true;
   1912e:	bf0c      	ite	eq
   19130:	2301      	moveq	r3, #1
		prefix->is_infinite = false;
   19132:	2300      	movne	r3, #0
   19134:	f887 31d9 	strb.w	r3, [r7, #473]	; 0x1d9
		net_mgmt_event_notify(NET_EVENT_IPV6_PREFIX_ADD, iface);
   19138:	4621      	mov	r1, r4
   1913a:	4804      	ldr	r0, [pc, #16]	; (1914c <net_if_ipv6_prefix_add+0xe0>)
   1913c:	f7ff fc9e 	bl	18a7c <net_mgmt_event_notify>
		return &iface->ipv6.prefix[i];
   19140:	e7b9      	b.n	190b6 <net_if_ipv6_prefix_add+0x4a>
	return NULL;
   19142:	2500      	movs	r5, #0
   19144:	e7b7      	b.n	190b6 <net_if_ipv6_prefix_add+0x4a>
   19146:	bf00      	nop
   19148:	00018969 	.word	0x00018969
   1914c:	f0600005 	.word	0xf0600005

00019150 <net_if_ipv6_prefix_lookup>:
		if (!iface->ipv6.prefix[i].is_used) {
   19150:	f890 31da 	ldrb.w	r3, [r0, #474]	; 0x1da
{
   19154:	b570      	push	{r4, r5, r6, lr}
   19156:	4604      	mov	r4, r0
   19158:	460d      	mov	r5, r1
   1915a:	4616      	mov	r6, r2
		if (!iface->ipv6.prefix[i].is_used) {
   1915c:	b123      	cbz	r3, 19168 <net_if_ipv6_prefix_lookup+0x18>
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1915e:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
   19162:	f7ff fc55 	bl	18a10 <net_is_ipv6_prefix>
   19166:	b970      	cbnz	r0, 19186 <net_if_ipv6_prefix_lookup+0x36>
		if (!iface->ipv6.prefix[i].is_used) {
   19168:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
   1916c:	b16b      	cbz	r3, 1918a <net_if_ipv6_prefix_lookup+0x3a>
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1916e:	4632      	mov	r2, r6
   19170:	4629      	mov	r1, r5
   19172:	f504 7001 	add.w	r0, r4, #516	; 0x204
   19176:	f7ff fc4b 	bl	18a10 <net_is_ipv6_prefix>
   1917a:	b130      	cbz	r0, 1918a <net_if_ipv6_prefix_lookup+0x3a>
   1917c:	203c      	movs	r0, #60	; 0x3c
			return &iface->ipv6.prefix[i];
   1917e:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
   19182:	4420      	add	r0, r4
   19184:	bd70      	pop	{r4, r5, r6, pc}
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   19186:	2000      	movs	r0, #0
   19188:	e7f9      	b.n	1917e <net_if_ipv6_prefix_lookup+0x2e>
	return NULL;
   1918a:	2000      	movs	r0, #0
}
   1918c:	bd70      	pop	{r4, r5, r6, pc}
	...

00019190 <net_if_ipv6_addr_onlink>:
{
   19190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   19192:	4c15      	ldr	r4, [pc, #84]	; (191e8 <net_if_ipv6_addr_onlink+0x58>)
   19194:	4f15      	ldr	r7, [pc, #84]	; (191ec <net_if_ipv6_addr_onlink+0x5c>)
{
   19196:	4605      	mov	r5, r0
   19198:	460e      	mov	r6, r1
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1919a:	42bc      	cmp	r4, r7
   1919c:	d101      	bne.n	191a2 <net_if_ipv6_addr_onlink+0x12>
	return false;
   1919e:	2000      	movs	r0, #0
   191a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iface && *iface && *iface != tmp) {
   191a2:	b10d      	cbz	r5, 191a8 <net_if_ipv6_addr_onlink+0x18>
   191a4:	682b      	ldr	r3, [r5, #0]
   191a6:	b9cb      	cbnz	r3, 191dc <net_if_ipv6_addr_onlink+0x4c>
			if (tmp->ipv6.prefix[i].is_used &&
   191a8:	f894 31da 	ldrb.w	r3, [r4, #474]	; 0x1da
   191ac:	b13b      	cbz	r3, 191be <net_if_ipv6_addr_onlink+0x2e>
			    net_is_ipv6_prefix(tmp->ipv6.prefix[i].prefix.
   191ae:	f894 21d8 	ldrb.w	r2, [r4, #472]	; 0x1d8
   191b2:	4631      	mov	r1, r6
   191b4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   191b8:	f7ff fc2a 	bl	18a10 <net_is_ipv6_prefix>
			if (tmp->ipv6.prefix[i].is_used &&
   191bc:	b950      	cbnz	r0, 191d4 <net_if_ipv6_addr_onlink+0x44>
   191be:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
   191c2:	b16b      	cbz	r3, 191e0 <net_if_ipv6_addr_onlink+0x50>
			    net_is_ipv6_prefix(tmp->ipv6.prefix[i].prefix.
   191c4:	f894 2214 	ldrb.w	r2, [r4, #532]	; 0x214
   191c8:	4631      	mov	r1, r6
   191ca:	f504 7001 	add.w	r0, r4, #516	; 0x204
   191ce:	f7ff fc1f 	bl	18a10 <net_is_ipv6_prefix>
			if (tmp->ipv6.prefix[i].is_used &&
   191d2:	b128      	cbz	r0, 191e0 <net_if_ipv6_addr_onlink+0x50>
				if (iface) {
   191d4:	b105      	cbz	r5, 191d8 <net_if_ipv6_addr_onlink+0x48>
					*iface = tmp;
   191d6:	602c      	str	r4, [r5, #0]
				return true;
   191d8:	2001      	movs	r0, #1
}
   191da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iface && *iface && *iface != tmp) {
   191dc:	429c      	cmp	r4, r3
   191de:	d0e3      	beq.n	191a8 <net_if_ipv6_addr_onlink+0x18>
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   191e0:	f504 7418 	add.w	r4, r4, #608	; 0x260
   191e4:	e7d9      	b.n	1919a <net_if_ipv6_addr_onlink+0xa>
   191e6:	bf00      	nop
   191e8:	2000ee00 	.word	0x2000ee00
   191ec:	2000f060 	.word	0x2000f060

000191f0 <net_if_ipv6_prefix_set_timer>:
	if (lifetime > (0xfffffffe / MSEC_PER_SEC)) {
   191f0:	4b04      	ldr	r3, [pc, #16]	; (19204 <net_if_ipv6_prefix_set_timer+0x14>)
   191f2:	4299      	cmp	r1, r3
	u32_t timeout = lifetime * MSEC_PER_SEC;
   191f4:	bf9a      	itte	ls
   191f6:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
   191fa:	4359      	mulls	r1, r3
		timeout = 0xfffffffe;
   191fc:	f06f 0101 	mvnhi.w	r1, #1
	k_delayed_work_submit(&prefix->lifetime, timeout);
   19200:	f7ff bc34 	b.w	18a6c <k_delayed_work_submit>
   19204:	00418937 	.word	0x00418937

00019208 <net_if_ipv6_prefix_unset_timer>:
	if (!prefix->is_used) {
   19208:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   1920c:	b10b      	cbz	r3, 19212 <net_if_ipv6_prefix_unset_timer+0xa>
	k_delayed_work_cancel(&prefix->lifetime);
   1920e:	f007 bfab 	b.w	21168 <k_delayed_work_cancel>
   19212:	4770      	bx	lr

00019214 <net_if_ipv6_prefix_rm>:
		if (!iface->ipv6.prefix[i].is_used) {
   19214:	f890 31da 	ldrb.w	r3, [r0, #474]	; 0x1da
{
   19218:	b570      	push	{r4, r5, r6, lr}
   1921a:	4604      	mov	r4, r0
   1921c:	460e      	mov	r6, r1
   1921e:	4615      	mov	r5, r2
		if (!iface->ipv6.prefix[i].is_used) {
   19220:	b143      	cbz	r3, 19234 <net_if_ipv6_prefix_rm+0x20>
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   19222:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
   19226:	f7ff fc18 	bl	18a5a <net_ipv6_addr_cmp>
   1922a:	b118      	cbz	r0, 19234 <net_if_ipv6_prefix_rm+0x20>
   1922c:	f894 31d8 	ldrb.w	r3, [r4, #472]	; 0x1d8
   19230:	42ab      	cmp	r3, r5
   19232:	d01f      	beq.n	19274 <net_if_ipv6_prefix_rm+0x60>
		if (!iface->ipv6.prefix[i].is_used) {
   19234:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
   19238:	b1fb      	cbz	r3, 1927a <net_if_ipv6_prefix_rm+0x66>
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1923a:	4631      	mov	r1, r6
   1923c:	f504 7001 	add.w	r0, r4, #516	; 0x204
   19240:	f7ff fc0b 	bl	18a5a <net_ipv6_addr_cmp>
   19244:	b1c8      	cbz	r0, 1927a <net_if_ipv6_prefix_rm+0x66>
   19246:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
   1924a:	42ab      	cmp	r3, r5
   1924c:	d115      	bne.n	1927a <net_if_ipv6_prefix_rm+0x66>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1924e:	2501      	movs	r5, #1
   19250:	203c      	movs	r0, #60	; 0x3c
		net_if_ipv6_prefix_unset_timer(&iface->ipv6.prefix[i]);
   19252:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
   19256:	4420      	add	r0, r4
   19258:	f7ff ffd6 	bl	19208 <net_if_ipv6_prefix_unset_timer>
		iface->ipv6.prefix[i].is_used = false;
   1925c:	233c      	movs	r3, #60	; 0x3c
   1925e:	fb03 4505 	mla	r5, r3, r5, r4
   19262:	2300      	movs	r3, #0
   19264:	f885 31da 	strb.w	r3, [r5, #474]	; 0x1da
		net_mgmt_event_notify(NET_EVENT_IPV6_PREFIX_DEL, iface);
   19268:	4621      	mov	r1, r4
   1926a:	4805      	ldr	r0, [pc, #20]	; (19280 <net_if_ipv6_prefix_rm+0x6c>)
   1926c:	f7ff fc06 	bl	18a7c <net_mgmt_event_notify>
		return true;
   19270:	2001      	movs	r0, #1
   19272:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   19274:	2500      	movs	r5, #0
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   19276:	4628      	mov	r0, r5
   19278:	e7eb      	b.n	19252 <net_if_ipv6_prefix_rm+0x3e>
	return false;
   1927a:	2000      	movs	r0, #0
}
   1927c:	bd70      	pop	{r4, r5, r6, pc}
   1927e:	bf00      	nop
   19280:	f0600006 	.word	0xf0600006

00019284 <net_if_ipv6_router_lookup>:
{
   19284:	b510      	push	{r4, lr}
		if (!routers[i].is_used ||
   19286:	4c09      	ldr	r4, [pc, #36]	; (192ac <net_if_ipv6_router_lookup+0x28>)
   19288:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1928c:	b153      	cbz	r3, 192a4 <net_if_ipv6_router_lookup+0x20>
   1928e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   19290:	2b0a      	cmp	r3, #10
   19292:	d107      	bne.n	192a4 <net_if_ipv6_router_lookup+0x20>
		    routers[i].address.family != AF_INET6 ||
   19294:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   19296:	4298      	cmp	r0, r3
   19298:	d104      	bne.n	192a4 <net_if_ipv6_router_lookup+0x20>
		if (net_ipv6_addr_cmp(&routers[i].address.in6_addr, addr)) {
   1929a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1929e:	f7ff fbdc 	bl	18a5a <net_ipv6_addr_cmp>
   192a2:	b908      	cbnz	r0, 192a8 <net_if_ipv6_router_lookup+0x24>
	return NULL;
   192a4:	2000      	movs	r0, #0
   192a6:	bd10      	pop	{r4, pc}
			return &routers[i];
   192a8:	4620      	mov	r0, r4
}
   192aa:	bd10      	pop	{r4, pc}
   192ac:	200030ac 	.word	0x200030ac

000192b0 <net_if_ipv6_router_find_default>:
		if (!routers[i].is_used ||
   192b0:	4b0a      	ldr	r3, [pc, #40]	; (192dc <net_if_ipv6_router_find_default+0x2c>)
   192b2:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   192b6:	b162      	cbz	r2, 192d2 <net_if_ipv6_router_find_default+0x22>
   192b8:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
   192bc:	b14a      	cbz	r2, 192d2 <net_if_ipv6_router_find_default+0x22>
		    !routers[i].is_default ||
   192be:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   192c0:	2a0a      	cmp	r2, #10
   192c2:	d106      	bne.n	192d2 <net_if_ipv6_router_find_default+0x22>
		if (iface && iface != routers[i].iface) {
   192c4:	b138      	cbz	r0, 192d6 <net_if_ipv6_router_find_default+0x26>
   192c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	return NULL;
   192c8:	4290      	cmp	r0, r2
   192ca:	bf0c      	ite	eq
   192cc:	4618      	moveq	r0, r3
   192ce:	2000      	movne	r0, #0
   192d0:	4770      	bx	lr
   192d2:	2000      	movs	r0, #0
   192d4:	4770      	bx	lr
		return &routers[i];
   192d6:	4618      	mov	r0, r3
}
   192d8:	4770      	bx	lr
   192da:	bf00      	nop
   192dc:	200030ac 	.word	0x200030ac

000192e0 <net_if_ipv6_router_update_lifetime>:
	k_delayed_work_submit(&router->lifetime,
   192e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   192e4:	4359      	muls	r1, r3
   192e6:	f7ff bbc1 	b.w	18a6c <k_delayed_work_submit>
	...

000192ec <net_if_ipv6_router_add>:
{
   192ec:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (routers[i].is_used) {
   192ee:	4c20      	ldr	r4, [pc, #128]	; (19370 <net_if_ipv6_router_add+0x84>)
   192f0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
{
   192f4:	b085      	sub	sp, #20
   192f6:	4607      	mov	r7, r0
   192f8:	4616      	mov	r6, r2
		if (routers[i].is_used) {
   192fa:	bbb3      	cbnz	r3, 1936a <net_if_ipv6_router_add+0x7e>
	router->is_used = true;
   192fc:	2301      	movs	r3, #1
   192fe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	router->address.family = AF_INET6;
   19302:	230a      	movs	r3, #10
   19304:	8523      	strh	r3, [r4, #40]	; 0x28
	router->iface = iface;
   19306:	63e0      	str	r0, [r4, #60]	; 0x3c
	net_ipaddr_copy(&router->address.in6_addr, addr);
   19308:	460b      	mov	r3, r1
   1930a:	466d      	mov	r5, sp
   1930c:	f101 0c10 	add.w	ip, r1, #16
   19310:	466a      	mov	r2, sp
   19312:	6818      	ldr	r0, [r3, #0]
   19314:	6859      	ldr	r1, [r3, #4]
   19316:	46ae      	mov	lr, r5
   19318:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1931c:	3308      	adds	r3, #8
   1931e:	4563      	cmp	r3, ip
   19320:	4675      	mov	r5, lr
   19322:	d1f6      	bne.n	19312 <net_if_ipv6_router_add+0x26>
   19324:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   19326:	4d13      	ldr	r5, [pc, #76]	; (19374 <net_if_ipv6_router_add+0x88>)
   19328:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1932c:	2301      	movs	r3, #1
	if (lifetime) {
   1932e:	b1be      	cbz	r6, 19360 <net_if_ipv6_router_add+0x74>
		router->is_default = true;
   19330:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   19334:	4910      	ldr	r1, [pc, #64]	; (19378 <net_if_ipv6_router_add+0x8c>)
		router->is_infinite = false;
   19336:	2300      	movs	r3, #0
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   19338:	f1a5 002c 	sub.w	r0, r5, #44	; 0x2c
		router->is_infinite = false;
   1933c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   19340:	f007 fef4 	bl	2112c <k_delayed_work_init>
		k_delayed_work_submit(&router->lifetime,
   19344:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   19348:	4371      	muls	r1, r6
   1934a:	f1a5 002c 	sub.w	r0, r5, #44	; 0x2c
   1934e:	f7ff fb8d 	bl	18a6c <k_delayed_work_submit>
		net_mgmt_event_notify(NET_EVENT_IPV6_ROUTER_ADD, iface);
   19352:	480a      	ldr	r0, [pc, #40]	; (1937c <net_if_ipv6_router_add+0x90>)
   19354:	4639      	mov	r1, r7
   19356:	f7ff fb91 	bl	18a7c <net_mgmt_event_notify>
		return &routers[i];
   1935a:	4805      	ldr	r0, [pc, #20]	; (19370 <net_if_ipv6_router_add+0x84>)
}
   1935c:	b005      	add	sp, #20
   1935e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		router->is_default = false;
   19360:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
		router->is_infinite = true;
   19364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   19368:	e7f3      	b.n	19352 <net_if_ipv6_router_add+0x66>
	return NULL;
   1936a:	2000      	movs	r0, #0
   1936c:	e7f6      	b.n	1935c <net_if_ipv6_router_add+0x70>
   1936e:	bf00      	nop
   19370:	200030ac 	.word	0x200030ac
   19374:	200030d8 	.word	0x200030d8
   19378:	00018971 	.word	0x00018971
   1937c:	f0600009 	.word	0xf0600009

00019380 <net_if_ipv6_router_rm>:
		if (!routers[i].is_used) {
   19380:	4b0a      	ldr	r3, [pc, #40]	; (193ac <net_if_ipv6_router_rm+0x2c>)
{
   19382:	b570      	push	{r4, r5, r6, lr}
		if (!routers[i].is_used) {
   19384:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
{
   19388:	4605      	mov	r5, r0
		if (!routers[i].is_used) {
   1938a:	b15c      	cbz	r4, 193a4 <net_if_ipv6_router_rm+0x24>
		if (&routers[i] != router) {
   1938c:	4298      	cmp	r0, r3
   1938e:	f04f 0600 	mov.w	r6, #0
   19392:	d109      	bne.n	193a8 <net_if_ipv6_router_rm+0x28>
		k_delayed_work_cancel(&routers[i].lifetime);
   19394:	f007 fee8 	bl	21168 <k_delayed_work_cancel>
		routers[i].is_used = false;
   19398:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
		net_mgmt_event_notify(NET_EVENT_IPV6_ROUTER_DEL,
   1939c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   1939e:	4804      	ldr	r0, [pc, #16]	; (193b0 <net_if_ipv6_router_rm+0x30>)
   193a0:	f7ff fb6c 	bl	18a7c <net_mgmt_event_notify>
}
   193a4:	4620      	mov	r0, r4
   193a6:	bd70      	pop	{r4, r5, r6, pc}
	return false;
   193a8:	4634      	mov	r4, r6
   193aa:	e7fb      	b.n	193a4 <net_if_ipv6_router_rm+0x24>
   193ac:	200030ac 	.word	0x200030ac
   193b0:	f060000a 	.word	0xf060000a

000193b4 <net_if_ipv6_get_ll>:
{
   193b4:	b510      	push	{r4, lr}
   193b6:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (net_is_ipv6_ll_addr(&iface->ipv6.unicast[i].address.in6_addr)) {
   193ba:	f248 02fe 	movw	r2, #33022	; 0x80fe
   193be:	f500 70ba 	add.w	r0, r0, #372	; 0x174
		if (!iface->ipv6.unicast[i].is_used ||
   193c2:	f893 4064 	ldrb.w	r4, [r3, #100]	; 0x64
   193c6:	b164      	cbz	r4, 193e2 <net_if_ipv6_get_ll+0x2e>
   193c8:	1c4c      	adds	r4, r1, #1
   193ca:	d003      	beq.n	193d4 <net_if_ipv6_get_ll+0x20>
		    (addr_state != NET_ADDR_ANY_STATE &&
   193cc:	f993 4061 	ldrsb.w	r4, [r3, #97]	; 0x61
   193d0:	428c      	cmp	r4, r1
   193d2:	d106      	bne.n	193e2 <net_if_ipv6_get_ll+0x2e>
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
   193d4:	f833 4c04 	ldrh.w	r4, [r3, #-4]
   193d8:	2c0a      	cmp	r4, #10
   193da:	d102      	bne.n	193e2 <net_if_ipv6_get_ll+0x2e>
		if (net_is_ipv6_ll_addr(&iface->ipv6.unicast[i].address.in6_addr)) {
   193dc:	881c      	ldrh	r4, [r3, #0]
   193de:	4294      	cmp	r4, r2
   193e0:	d004      	beq.n	193ec <net_if_ipv6_get_ll+0x38>
   193e2:	336c      	adds	r3, #108	; 0x6c
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   193e4:	4283      	cmp	r3, r0
   193e6:	d1ec      	bne.n	193c2 <net_if_ipv6_get_ll+0xe>
	return NULL;
   193e8:	2000      	movs	r0, #0
   193ea:	bd10      	pop	{r4, pc}
   193ec:	4618      	mov	r0, r3
}
   193ee:	bd10      	pop	{r4, pc}

000193f0 <net_if_ipv6_select_src_addr>:
	return src;
}

const struct in6_addr *net_if_ipv6_select_src_addr(struct net_if *dst_iface,
						   struct in6_addr *dst)
{
   193f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct in6_addr *src = NULL;
	u8_t best_match = 0;
	struct net_if *iface;

	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   193f2:	880d      	ldrh	r5, [r1, #0]
   193f4:	f248 02fe 	movw	r2, #33022	; 0x80fe
	u8_t best_match = 0;
   193f8:	2400      	movs	r4, #0
	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   193fa:	4295      	cmp	r5, r2
{
   193fc:	4603      	mov	r3, r0
   193fe:	460e      	mov	r6, r1
	u8_t best_match = 0;
   19400:	f88d 4007 	strb.w	r4, [sp, #7]
	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   19404:	d002      	beq.n	1940c <net_if_ipv6_select_src_addr+0x1c>
   19406:	780a      	ldrb	r2, [r1, #0]
   19408:	2aff      	cmp	r2, #255	; 0xff
   1940a:	d107      	bne.n	1941c <net_if_ipv6_select_src_addr+0x2c>
   1940c:	4c16      	ldr	r4, [pc, #88]	; (19468 <net_if_ipv6_select_src_addr+0x78>)
							 &best_match);
		}

	} else {
		for (iface = __net_if_start;
		     !dst_iface && iface != __net_if_end;
   1940e:	4d17      	ldr	r5, [pc, #92]	; (1946c <net_if_ipv6_select_src_addr+0x7c>)
		for (iface = __net_if_start;
   19410:	b323      	cbz	r3, 1945c <net_if_ipv6_select_src_addr+0x6c>
				break;
			}
		}

		if (dst_iface) {
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   19412:	2101      	movs	r1, #1
   19414:	4618      	mov	r0, r3
   19416:	f7ff ffcd 	bl	193b4 <net_if_ipv6_get_ll>
   1941a:	e006      	b.n	1942a <net_if_ipv6_select_src_addr+0x3a>
   1941c:	4d12      	ldr	r5, [pc, #72]	; (19468 <net_if_ipv6_select_src_addr+0x78>)
		     !dst_iface && iface != __net_if_end;
   1941e:	4f13      	ldr	r7, [pc, #76]	; (1946c <net_if_ipv6_select_src_addr+0x7c>)
		for (iface = __net_if_start;
   19420:	b180      	cbz	r0, 19444 <net_if_ipv6_select_src_addr+0x54>
			src = net_if_ipv6_get_best_match(dst_iface, dst,
   19422:	f10d 0207 	add.w	r2, sp, #7
   19426:	f7ff faa7 	bl	18978 <net_if_ipv6_get_best_match>
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   1942a:	4604      	mov	r4, r0
   1942c:	e00c      	b.n	19448 <net_if_ipv6_select_src_addr+0x58>
			addr = net_if_ipv6_get_best_match(iface, dst,
   1942e:	4628      	mov	r0, r5
   19430:	f10d 0207 	add.w	r2, sp, #7
   19434:	4631      	mov	r1, r6
   19436:	f7ff fa9f 	bl	18978 <net_if_ipv6_get_best_match>
		     iface++) {
   1943a:	f505 7518 	add.w	r5, r5, #608	; 0x260
   1943e:	2800      	cmp	r0, #0
   19440:	bf18      	it	ne
   19442:	4604      	movne	r4, r0
		     !dst_iface && iface != __net_if_end;
   19444:	42bd      	cmp	r5, r7
   19446:	d1f2      	bne.n	1942e <net_if_ipv6_select_src_addr+0x3e>
		}
	}

	if (!src) {
   19448:	b154      	cbz	r4, 19460 <net_if_ipv6_select_src_addr+0x70>
   1944a:	4620      	mov	r0, r4
   1944c:	e00a      	b.n	19464 <net_if_ipv6_select_src_addr+0x74>
			addr = net_if_ipv6_get_ll(iface, NET_ADDR_PREFERRED);
   1944e:	2101      	movs	r1, #1
   19450:	4620      	mov	r0, r4
   19452:	f7ff ffaf 	bl	193b4 <net_if_ipv6_get_ll>
			if (addr) {
   19456:	b928      	cbnz	r0, 19464 <net_if_ipv6_select_src_addr+0x74>
		     iface++) {
   19458:	f504 7418 	add.w	r4, r4, #608	; 0x260
		     !dst_iface && iface != __net_if_end;
   1945c:	42ac      	cmp	r4, r5
   1945e:	d1f6      	bne.n	1944e <net_if_ipv6_select_src_addr+0x5e>
		return net_ipv6_unspecified_address();
   19460:	f002 fd16 	bl	1be90 <net_ipv6_unspecified_address>
	}

	return src;
}
   19464:	b003      	add	sp, #12
   19466:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19468:	2000ee00 	.word	0x2000ee00
   1946c:	2000f060 	.word	0x2000f060

00019470 <net_if_ipv6_calc_reachable_time>:

u32_t net_if_ipv6_calc_reachable_time(struct net_if *iface)
{
   19470:	b538      	push	{r3, r4, r5, lr}
	u32_t min_reachable, max_reachable;

	min_reachable = (MIN_RANDOM_NUMER * iface->ipv6.base_reachable_time)
   19472:	f8d0 4240 	ldr.w	r4, [r0, #576]	; 0x240

	NET_DBG("min_reachable:%u max_reachable:%u", min_reachable,
		max_reachable);

	return min_reachable +
	       sys_rand32_get() % (max_reachable - min_reachable);
   19476:	f7e8 fffb 	bl	2470 <sys_rand32_get>
	min_reachable = (MIN_RANDOM_NUMER * iface->ipv6.base_reachable_time)
   1947a:	0865      	lsrs	r5, r4, #1
	max_reachable = (MAX_RANDOM_NUMER * iface->ipv6.base_reachable_time)
   1947c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
	       sys_rand32_get() % (max_reachable - min_reachable);
   19480:	ebc5 0454 	rsb	r4, r5, r4, lsr #1
   19484:	fbb0 f3f4 	udiv	r3, r0, r4
   19488:	fb03 0014 	mls	r0, r3, r4, r0
}
   1948c:	4428      	add	r0, r5
   1948e:	bd38      	pop	{r3, r4, r5, pc}

00019490 <net_if_call_link_cb>:
	sys_slist_find_and_remove(&link_callbacks, &link->node);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
   19490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19492:	4b09      	ldr	r3, [pc, #36]	; (194b8 <net_if_call_link_cb+0x28>)
   19494:	681b      	ldr	r3, [r3, #0]
   19496:	4605      	mov	r5, r0
   19498:	460e      	mov	r6, r1
   1949a:	4617      	mov	r7, r2
	struct net_if_link_cb *link, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1949c:	b903      	cbnz	r3, 194a0 <net_if_call_link_cb+0x10>
   1949e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   194a0:	681c      	ldr	r4, [r3, #0]
		link->cb(iface, lladdr, status);
   194a2:	685b      	ldr	r3, [r3, #4]
   194a4:	463a      	mov	r2, r7
   194a6:	4631      	mov	r1, r6
   194a8:	4628      	mov	r0, r5
   194aa:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   194ac:	b114      	cbz	r4, 194b4 <net_if_call_link_cb+0x24>
   194ae:	4623      	mov	r3, r4
   194b0:	6824      	ldr	r4, [r4, #0]
   194b2:	e7f6      	b.n	194a2 <net_if_call_link_cb+0x12>
   194b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   194b6:	bf00      	nop
   194b8:	2000309c 	.word	0x2000309c

000194bc <net_if_send_data>:
{
   194bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   194c0:	f100 090c 	add.w	r9, r0, #12
{
   194c4:	4607      	mov	r7, r0
   194c6:	460c      	mov	r4, r1
   194c8:	f8d1 a00c 	ldr.w	sl, [r1, #12]
   194cc:	f8d1 b010 	ldr.w	fp, [r1, #16]
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   194d0:	4648      	mov	r0, r9
   194d2:	2100      	movs	r1, #0
   194d4:	f7ff fa8f 	bl	189f6 <atomic_test_bit>
   194d8:	2800      	cmp	r0, #0
   194da:	d044      	beq.n	19566 <net_if_send_data+0xaa>
	if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   194dc:	2101      	movs	r1, #1
   194de:	4648      	mov	r0, r9
   194e0:	f7ff fa89 	bl	189f6 <atomic_test_bit>
   194e4:	b938      	cbnz	r0, 194f6 <net_if_send_data+0x3a>
   194e6:	6a23      	ldr	r3, [r4, #32]
   194e8:	b92b      	cbnz	r3, 194f6 <net_if_send_data+0x3a>
   194ea:	6963      	ldr	r3, [r4, #20]
		net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   194ec:	691a      	ldr	r2, [r3, #16]
   194ee:	6222      	str	r2, [r4, #32]
		net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   194f0:	7d1b      	ldrb	r3, [r3, #20]
   194f2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	return pkt->family;
   194f6:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
	if (net_pkt_family(pkt) == AF_INET6) {
   194fa:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   194fe:	2b0a      	cmp	r3, #10
   19500:	d108      	bne.n	19514 <net_if_send_data+0x58>
		pkt = net_ipv6_prepare_for_send(pkt);
   19502:	4620      	mov	r0, r4
   19504:	f003 ffa0 	bl	1d448 <net_ipv6_prepare_for_send>
		if (!pkt) {
   19508:	4605      	mov	r5, r0
   1950a:	b920      	cbnz	r0, 19516 <net_if_send_data+0x5a>
	int status = -EIO;
   1950c:	f06f 0804 	mvn.w	r8, #4
			verdict = NET_CONTINUE;
   19510:	2601      	movs	r6, #1
   19512:	e008      	b.n	19526 <net_if_send_data+0x6a>
   19514:	4625      	mov	r5, r4
	verdict = iface->l2->send(iface, pkt);
   19516:	687b      	ldr	r3, [r7, #4]
   19518:	4629      	mov	r1, r5
   1951a:	685b      	ldr	r3, [r3, #4]
   1951c:	4638      	mov	r0, r7
   1951e:	4798      	blx	r3
	int status = -EIO;
   19520:	f06f 0804 	mvn.w	r8, #4
	verdict = iface->l2->send(iface, pkt);
   19524:	4606      	mov	r6, r0
		if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   19526:	2101      	movs	r1, #1
   19528:	4648      	mov	r0, r9
   1952a:	f7ff fa64 	bl	189f6 <atomic_test_bit>
   1952e:	b938      	cbnz	r0, 19540 <net_if_send_data+0x84>
   19530:	6a2b      	ldr	r3, [r5, #32]
   19532:	b92b      	cbnz	r3, 19540 <net_if_send_data+0x84>
   19534:	696b      	ldr	r3, [r5, #20]
			net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   19536:	691a      	ldr	r2, [r3, #16]
   19538:	622a      	str	r2, [r5, #32]
			net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   1953a:	7d1b      	ldrb	r3, [r3, #20]
   1953c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
		if (context && verdict == NET_DROP) {
   19540:	f1ba 0f00 	cmp.w	sl, #0
   19544:	d014      	beq.n	19570 <net_if_send_data+0xb4>
   19546:	2e02      	cmp	r6, #2
   19548:	d114      	bne.n	19574 <net_if_send_data+0xb8>
			net_context_send_cb(context, token, status);
   1954a:	4642      	mov	r2, r8
   1954c:	4659      	mov	r1, fp
   1954e:	4650      	mov	r0, sl
   19550:	f7ff f9f0 	bl	18934 <net_context_send_cb>
		if (verdict == NET_DROP && dst->addr) {
   19554:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19556:	b16b      	cbz	r3, 19574 <net_if_send_data+0xb8>
			net_if_call_link_cb(iface, dst, status);
   19558:	4642      	mov	r2, r8
   1955a:	f104 0128 	add.w	r1, r4, #40	; 0x28
   1955e:	4638      	mov	r0, r7
   19560:	f7ff ff96 	bl	19490 <net_if_call_link_cb>
   19564:	e006      	b.n	19574 <net_if_send_data+0xb8>
   19566:	4625      	mov	r5, r4
		status = -ENETDOWN;
   19568:	f06f 083d 	mvn.w	r8, #61	; 0x3d
		verdict = NET_DROP;
   1956c:	2602      	movs	r6, #2
   1956e:	e7da      	b.n	19526 <net_if_send_data+0x6a>
		if (verdict == NET_DROP && dst->addr) {
   19570:	2e02      	cmp	r6, #2
   19572:	d0ef      	beq.n	19554 <net_if_send_data+0x98>
}
   19574:	4630      	mov	r0, r6
   19576:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0001957c <net_if_tx>:
{
   1957c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19580:	4605      	mov	r5, r0
	const struct net_if_api *api = iface->dev->driver_api;
   19582:	f850 3b18 	ldr.w	r3, [r0], #24
	pkt = k_fifo_get(&iface->tx_queue, K_NO_WAIT);
   19586:	2100      	movs	r1, #0
	const struct net_if_api *api = iface->dev->driver_api;
   19588:	685e      	ldr	r6, [r3, #4]
	pkt = k_fifo_get(&iface->tx_queue, K_NO_WAIT);
   1958a:	f007 f87c 	bl	20686 <k_queue_get>
	if (!pkt) {
   1958e:	4604      	mov	r4, r0
   19590:	b398      	cbz	r0, 195fa <net_if_tx+0x7e>
	return &pkt->lladdr_src;
}

static inline struct net_linkaddr *net_pkt_ll_dst(struct net_pkt *pkt)
{
	return &pkt->lladdr_dst;
   19592:	f100 0828 	add.w	r8, r0, #40	; 0x28
   19596:	68c7      	ldr	r7, [r0, #12]
   19598:	f8d0 9010 	ldr.w	r9, [r0, #16]
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1959c:	2100      	movs	r1, #0
   1959e:	f105 000c 	add.w	r0, r5, #12
   195a2:	f7ff fa28 	bl	189f6 <atomic_test_bit>
   195a6:	b300      	cbz	r0, 195ea <net_if_tx+0x6e>
   195a8:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   195aa:	f04f 0a00 	mov.w	sl, #0
	while (buf) {
   195ae:	b9c3      	cbnz	r3, 195e2 <net_if_tx+0x66>
		status = api->send(iface, pkt);
   195b0:	6873      	ldr	r3, [r6, #4]
   195b2:	4621      	mov	r1, r4
   195b4:	4628      	mov	r0, r5
   195b6:	4798      	blx	r3
	if (status < 0) {
   195b8:	1e06      	subs	r6, r0, #0
   195ba:	da19      	bge.n	195f0 <net_if_tx+0x74>
		net_pkt_unref(pkt);
   195bc:	4620      	mov	r0, r4
   195be:	f000 f9f8 	bl	199b2 <net_pkt_unref>
	if (context) {
   195c2:	b127      	cbz	r7, 195ce <net_if_tx+0x52>
		net_context_send_cb(context, context_token, status);
   195c4:	4632      	mov	r2, r6
   195c6:	4649      	mov	r1, r9
   195c8:	4638      	mov	r0, r7
   195ca:	f7ff f9b3 	bl	18934 <net_context_send_cb>
	if (dst->addr) {
   195ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   195d0:	b123      	cbz	r3, 195dc <net_if_tx+0x60>
		net_if_call_link_cb(iface, dst, status);
   195d2:	4632      	mov	r2, r6
   195d4:	4641      	mov	r1, r8
   195d6:	4628      	mov	r0, r5
   195d8:	f7ff ff5a 	bl	19490 <net_if_call_link_cb>
	return true;
   195dc:	2001      	movs	r0, #1
}
   195de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes += buf->len;
   195e2:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   195e4:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   195e6:	4492      	add	sl, r2
   195e8:	e7e1      	b.n	195ae <net_if_tx+0x32>
		status = -ENETDOWN;
   195ea:	f06f 063d 	mvn.w	r6, #61	; 0x3d
   195ee:	e7e5      	b.n	195bc <net_if_tx+0x40>
	net_stats.bytes.sent += bytes;
   195f0:	4a03      	ldr	r2, [pc, #12]	; (19600 <net_if_tx+0x84>)
   195f2:	6853      	ldr	r3, [r2, #4]
   195f4:	4453      	add	r3, sl
   195f6:	6053      	str	r3, [r2, #4]
   195f8:	e7e3      	b.n	195c2 <net_if_tx+0x46>
   195fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   195fe:	bf00      	nop
   19600:	20004cf4 	.word	0x20004cf4

00019604 <net_if_flush_tx>:
	if (k_fifo_is_empty(&iface->tx_queue)) {
   19604:	6983      	ldr	r3, [r0, #24]
{
   19606:	b510      	push	{r4, lr}
   19608:	4604      	mov	r4, r0
	if (k_fifo_is_empty(&iface->tx_queue)) {
   1960a:	b133      	cbz	r3, 1961a <net_if_flush_tx+0x16>
   1960c:	f007 f9e6 	bl	209dc <_impl_k_yield>
		if (!net_if_tx(iface)) {
   19610:	4620      	mov	r0, r4
   19612:	f7ff ffb3 	bl	1957c <net_if_tx>
   19616:	2800      	cmp	r0, #0
   19618:	d1fa      	bne.n	19610 <net_if_flush_tx+0xc>
   1961a:	bd10      	pop	{r4, pc}

0001961c <net_if_tx_thread>:
{
   1961c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   19620:	f007 fa58 	bl	20ad4 <_impl_k_sem_give>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19624:	4e15      	ldr	r6, [pc, #84]	; (1967c <net_if_tx_thread+0x60>)
   19626:	f8df 805c 	ldr.w	r8, [pc, #92]	; 19684 <net_if_tx_thread+0x68>
   1962a:	4f15      	ldr	r7, [pc, #84]	; (19680 <net_if_tx_thread+0x64>)
	int ev_count = 0;
   1962c:	2400      	movs	r4, #0
   1962e:	f44f 7318 	mov.w	r3, #608	; 0x260
   19632:	4363      	muls	r3, r4
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19634:	199a      	adds	r2, r3, r6
   19636:	4542      	cmp	r2, r8
   19638:	d10a      	bne.n	19650 <net_if_tx_thread+0x34>
		ret = k_poll(__net_if_event_start, ev_count, K_FOREVER);
   1963a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1963e:	4621      	mov	r1, r4
   19640:	4638      	mov	r0, r7
   19642:	f007 ffbb 	bl	215bc <k_poll>
   19646:	4d0e      	ldr	r5, [pc, #56]	; (19680 <net_if_tx_thread+0x64>)
	for (; ev_count; event++, ev_count--) {
   19648:	b96c      	cbnz	r4, 19666 <net_if_tx_thread+0x4a>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1964a:	f007 f9c7 	bl	209dc <_impl_k_yield>
   1964e:	e7ed      	b.n	1962c <net_if_tx_thread+0x10>
		k_poll_event_init(&__net_if_event_start[ev_count],
   19650:	3318      	adds	r3, #24
   19652:	2014      	movs	r0, #20
   19654:	fb00 7004 	mla	r0, r0, r4, r7
   19658:	4433      	add	r3, r6
   1965a:	2200      	movs	r2, #0
   1965c:	2104      	movs	r1, #4
   1965e:	f007 ff99 	bl	21594 <k_poll_event_init>
		ev_count++;
   19662:	3401      	adds	r4, #1
   19664:	e7e3      	b.n	1962e <net_if_tx_thread+0x12>
		switch (event->state) {
   19666:	7b6b      	ldrb	r3, [r5, #13]
   19668:	091b      	lsrs	r3, r3, #4
   1966a:	2b04      	cmp	r3, #4
   1966c:	d103      	bne.n	19676 <net_if_tx_thread+0x5a>
			iface = CONTAINER_OF(event->fifo, struct net_if,
   1966e:	6928      	ldr	r0, [r5, #16]
			net_if_tx(iface);
   19670:	3818      	subs	r0, #24
   19672:	f7ff ff83 	bl	1957c <net_if_tx>
	for (; ev_count; event++, ev_count--) {
   19676:	3514      	adds	r5, #20
   19678:	3c01      	subs	r4, #1
   1967a:	e7e5      	b.n	19648 <net_if_tx_thread+0x2c>
   1967c:	2000ee00 	.word	0x2000ee00
   19680:	2000f060 	.word	0x2000f060
   19684:	2000f060 	.word	0x2000f060

00019688 <net_if_get_by_index>:
	}
}

struct net_if *net_if_get_by_index(u8_t index)
{
	if (&__net_if_start[index] >= __net_if_end) {
   19688:	4a04      	ldr	r2, [pc, #16]	; (1969c <net_if_get_by_index+0x14>)
   1968a:	f44f 7318 	mov.w	r3, #608	; 0x260
   1968e:	fb03 2000 	mla	r0, r3, r0, r2
		NET_DBG("Index %d is too large", index);
		return NULL;
	}

	return &__net_if_start[index];
}
   19692:	4b03      	ldr	r3, [pc, #12]	; (196a0 <net_if_get_by_index+0x18>)
   19694:	4298      	cmp	r0, r3
   19696:	bf28      	it	cs
   19698:	2000      	movcs	r0, #0
   1969a:	4770      	bx	lr
   1969c:	2000ee00 	.word	0x2000ee00
   196a0:	2000f060 	.word	0x2000f060

000196a4 <net_if_get_by_iface>:

u8_t net_if_get_by_iface(struct net_if *iface)
{
	NET_ASSERT(iface >= __net_if_start && iface < __net_if_end);

	return iface - __net_if_start;
   196a4:	4b03      	ldr	r3, [pc, #12]	; (196b4 <net_if_get_by_iface+0x10>)
   196a6:	1ac0      	subs	r0, r0, r3
   196a8:	4b03      	ldr	r3, [pc, #12]	; (196b8 <net_if_get_by_iface+0x14>)
   196aa:	1140      	asrs	r0, r0, #5
   196ac:	4358      	muls	r0, r3
}
   196ae:	b2c0      	uxtb	r0, r0
   196b0:	4770      	bx	lr
   196b2:	bf00      	nop
   196b4:	2000ee00 	.word	0x2000ee00
   196b8:	286bca1b 	.word	0x286bca1b

000196bc <net_if_foreach>:

void net_if_foreach(net_if_cb_t cb, void *user_data)
{
   196bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_if *iface;

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   196be:	4c06      	ldr	r4, [pc, #24]	; (196d8 <net_if_foreach+0x1c>)
   196c0:	4d06      	ldr	r5, [pc, #24]	; (196dc <net_if_foreach+0x20>)
{
   196c2:	4606      	mov	r6, r0
   196c4:	460f      	mov	r7, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   196c6:	42ac      	cmp	r4, r5
   196c8:	d100      	bne.n	196cc <net_if_foreach+0x10>
		cb(iface, user_data);
	}
}
   196ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb(iface, user_data);
   196cc:	4620      	mov	r0, r4
   196ce:	4639      	mov	r1, r7
   196d0:	47b0      	blx	r6
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   196d2:	f504 7418 	add.w	r4, r4, #608	; 0x260
   196d6:	e7f6      	b.n	196c6 <net_if_foreach+0xa>
   196d8:	2000ee00 	.word	0x2000ee00
   196dc:	2000f060 	.word	0x2000f060

000196e0 <net_if_up>:

int net_if_up(struct net_if *iface)
{
   196e0:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   196e2:	f100 050c 	add.w	r5, r0, #12
{
   196e6:	4604      	mov	r4, r0
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   196e8:	2100      	movs	r1, #0
   196ea:	4628      	mov	r0, r5
   196ec:	f7ff f983 	bl	189f6 <atomic_test_bit>
   196f0:	b9c0      	cbnz	r0, 19724 <net_if_up+0x44>
		return 0;
	}

	/* If the L2 does not support enable just set the flag */
	if (!iface->l2->enable) {
   196f2:	6863      	ldr	r3, [r4, #4]
   196f4:	68db      	ldr	r3, [r3, #12]
   196f6:	b9bb      	cbnz	r3, 19728 <net_if_up+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   196f8:	f3bf 8f5b 	dmb	ish
   196fc:	e855 3f00 	ldrex	r3, [r5]
   19700:	f043 0301 	orr.w	r3, r3, #1
   19704:	e845 3200 	strex	r2, r3, [r5]
   19708:	2a00      	cmp	r2, #0
   1970a:	d1f7      	bne.n	196fc <net_if_up+0x1c>
   1970c:	f3bf 8f5b 	dmb	ish
done:
	atomic_set_bit(iface->flags, NET_IF_UP);

#if defined(CONFIG_NET_IPV6_DAD)
	NET_DBG("Starting DAD for iface %p", iface);
	net_if_start_dad(iface);
   19710:	4620      	mov	r0, r4
   19712:	f7ff fb25 	bl	18d60 <net_if_start_dad>
	join_mcast_solicit_node(iface, &iface->ipv6.mcast[0].address.in6_addr);
#endif

#if defined(CONFIG_NET_IPV6_ND)
	NET_DBG("Starting ND/RS for iface %p", iface);
	net_if_start_rs(iface);
   19716:	4620      	mov	r0, r4
   19718:	f7ff f9ea 	bl	18af0 <net_if_start_rs>
#endif

	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);
   1971c:	4621      	mov	r1, r4
   1971e:	4805      	ldr	r0, [pc, #20]	; (19734 <net_if_up+0x54>)
   19720:	f7ff f9ac 	bl	18a7c <net_mgmt_event_notify>
		return 0;
   19724:	2000      	movs	r0, #0

	return 0;
}
   19726:	bd38      	pop	{r3, r4, r5, pc}
	status = iface->l2->enable(iface, true);
   19728:	2101      	movs	r1, #1
   1972a:	4620      	mov	r0, r4
   1972c:	4798      	blx	r3
	if (status < 0) {
   1972e:	2800      	cmp	r0, #0
   19730:	dae2      	bge.n	196f8 <net_if_up+0x18>
   19732:	bd38      	pop	{r3, r4, r5, pc}
   19734:	d0010002 	.word	0xd0010002

00019738 <net_if_carrier_down>:

void net_if_carrier_down(struct net_if *iface)
{
   19738:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1973a:	f100 030c 	add.w	r3, r0, #12
   1973e:	4604      	mov	r4, r0
   19740:	f3bf 8f5b 	dmb	ish
   19744:	e853 2f00 	ldrex	r2, [r3]
   19748:	f022 0201 	bic.w	r2, r2, #1
   1974c:	e843 2100 	strex	r1, r2, [r3]
   19750:	2900      	cmp	r1, #0
   19752:	d1f7      	bne.n	19744 <net_if_carrier_down+0xc>
   19754:	f3bf 8f5b 	dmb	ish
	NET_DBG("iface %p", iface);

	atomic_clear_bit(iface->flags, NET_IF_UP);

	net_if_flush_tx(iface);
   19758:	f7ff ff54 	bl	19604 <net_if_flush_tx>

	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);
   1975c:	4621      	mov	r1, r4
   1975e:	4802      	ldr	r0, [pc, #8]	; (19768 <net_if_carrier_down+0x30>)
}
   19760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);
   19764:	f7ff b98a 	b.w	18a7c <net_mgmt_event_notify>
   19768:	d0010001 	.word	0xd0010001

0001976c <net_if_init>:

	return 0;
}

void net_if_init(struct k_sem *startup_sync)
{
   1976c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct net_if *iface;

	NET_DBG("");

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19770:	4c1f      	ldr	r4, [pc, #124]	; (197f0 <net_if_init+0x84>)
   19772:	4f20      	ldr	r7, [pc, #128]	; (197f4 <net_if_init+0x88>)
		iface->ipv6.base_reachable_time = REACHABLE_TIME;

		net_if_ipv6_set_reachable_time(iface);

#if defined(CONFIG_NET_IPV6_ND)
		k_delayed_work_init(&iface->ipv6.rs_timer, rs_timeout);
   19774:	f8df 908c 	ldr.w	r9, [pc, #140]	; 19804 <net_if_init+0x98>
{
   19778:	b086      	sub	sp, #24
   1977a:	4605      	mov	r5, r0
   1977c:	4626      	mov	r6, r4
		iface->ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
   1977e:	f04f 0840 	mov.w	r8, #64	; 0x40
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   19782:	42bc      	cmp	r4, r7
   19784:	d115      	bne.n	197b2 <net_if_init+0x46>
#endif
#endif
	}

	if (iface == __net_if_start) {
   19786:	42b4      	cmp	r4, r6
   19788:	d010      	beq.n	197ac <net_if_init+0x40>

   1978a:	2201      	movs	r2, #1
   1978c:	2300      	movs	r3, #0
   1978e:	9204      	str	r2, [sp, #16]
   19790:	f06f 0208 	mvn.w	r2, #8
   19794:	9305      	str	r3, [sp, #20]
   19796:	9203      	str	r2, [sp, #12]
   19798:	9302      	str	r3, [sp, #8]
   1979a:	9301      	str	r3, [sp, #4]
   1979c:	9500      	str	r5, [sp, #0]
   1979e:	4b16      	ldr	r3, [pc, #88]	; (197f8 <net_if_init+0x8c>)
   197a0:	4916      	ldr	r1, [pc, #88]	; (197fc <net_if_init+0x90>)
   197a2:	4817      	ldr	r0, [pc, #92]	; (19800 <net_if_init+0x94>)
   197a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   197a8:	f007 fbd0 	bl	20f4c <_impl_k_thread_create>
	k_thread_create(&tx_thread_data, tx_stack,
			K_THREAD_STACK_SIZEOF(tx_stack),
			(k_thread_entry_t)net_if_tx_thread,
			startup_sync, NULL, NULL, K_PRIO_COOP(7),
			K_ESSENTIAL, K_NO_WAIT);
}
   197ac:	b006      	add	sp, #24
   197ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	const struct net_if_api *api = iface->dev->driver_api;
   197b2:	4620      	mov	r0, r4
   197b4:	f850 3b18 	ldr.w	r3, [r0], #24
   197b8:	f8d3 a004 	ldr.w	sl, [r3, #4]
	k_fifo_init(&iface->tx_queue);
   197bc:	f006 ff0e 	bl	205dc <k_queue_init>
	api->init(iface);
   197c0:	4620      	mov	r0, r4
   197c2:	f8da 3000 	ldr.w	r3, [sl]
   197c6:	4798      	blx	r3
		iface->ipv6.base_reachable_time = REACHABLE_TIME;
   197c8:	f247 5330 	movw	r3, #30000	; 0x7530
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   197cc:	4620      	mov	r0, r4
   197ce:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
		iface->ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
   197d2:	f884 824c 	strb.w	r8, [r4, #588]	; 0x24c
   197d6:	f7ff fe4b 	bl	19470 <net_if_ipv6_calc_reachable_time>
		k_delayed_work_init(&iface->ipv6.rs_timer, rs_timeout);
   197da:	4649      	mov	r1, r9
   197dc:	f8c4 0244 	str.w	r0, [r4, #580]	; 0x244
   197e0:	f504 7006 	add.w	r0, r4, #536	; 0x218
   197e4:	f007 fca2 	bl	2112c <k_delayed_work_init>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   197e8:	f504 7418 	add.w	r4, r4, #608	; 0x260
   197ec:	e7c9      	b.n	19782 <net_if_init+0x16>
   197ee:	bf00      	nop
   197f0:	2000ee00 	.word	0x2000ee00
   197f4:	2000f060 	.word	0x2000f060
   197f8:	0001961d 	.word	0x0001961d
   197fc:	200076d0 	.word	0x200076d0
   19800:	200030f0 	.word	0x200030f0
   19804:	00018b0d 	.word	0x00018b0d

00019808 <net_if_post_init>:

void net_if_post_init(void)
{
   19808:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1980a:	4c05      	ldr	r4, [pc, #20]	; (19820 <net_if_post_init+0x18>)
   1980c:	4d05      	ldr	r5, [pc, #20]	; (19824 <net_if_post_init+0x1c>)
   1980e:	42ac      	cmp	r4, r5
   19810:	d100      	bne.n	19814 <net_if_post_init+0xc>

	/* RPL init must be done after the network interface is up
	 * as the RPL code wants to add multicast address to interface.
	 */
	net_rpl_init();
}
   19812:	bd38      	pop	{r3, r4, r5, pc}
		net_if_up(iface);
   19814:	4620      	mov	r0, r4
   19816:	f7ff ff63 	bl	196e0 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1981a:	f504 7418 	add.w	r4, r4, #608	; 0x260
   1981e:	e7f6      	b.n	1980e <net_if_post_init+0x6>
   19820:	2000ee00 	.word	0x2000ee00
   19824:	2000f060 	.word	0x2000f060

00019828 <net_pkt_get_reserve>:
#else /* CONFIG_NET_DEBUG_NET_PKT */
struct net_pkt *net_pkt_get_reserve(struct k_mem_slab *slab,
				    u16_t reserve_head,
				    s32_t timeout)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
   19828:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1982a:	4604      	mov	r4, r0
   1982c:	460d      	mov	r5, r1
   1982e:	4616      	mov	r6, r2
	struct net_pkt *pkt;
	int ret;

	if (k_is_in_isr()) {
   19830:	f007 fb3c 	bl	20eac <k_is_in_isr>
   19834:	b198      	cbz	r0, 1985e <net_pkt_get_reserve+0x36>
		ret = k_mem_slab_alloc(slab, (void **)&pkt, K_NO_WAIT);
   19836:	2200      	movs	r2, #0
	} else {
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   19838:	a901      	add	r1, sp, #4
   1983a:	4620      	mov	r0, r4
   1983c:	f006 fdb0 	bl	203a0 <k_mem_slab_alloc>
	}

	if (ret) {
   19840:	b978      	cbnz	r0, 19862 <net_pkt_get_reserve+0x3a>
		return NULL;
	}

	memset(pkt, 0, sizeof(struct net_pkt));
   19842:	4601      	mov	r1, r0
   19844:	2240      	movs	r2, #64	; 0x40
   19846:	9801      	ldr	r0, [sp, #4]
   19848:	f7e6 ffe4 	bl	814 <memset>

	net_pkt_set_ll_reserve(pkt, reserve_head);
   1984c:	9801      	ldr	r0, [sp, #4]

	pkt->ref = 1;
   1984e:	2301      	movs	r3, #1
	net_pkt_set_ll_reserve(pkt, reserve_head);
   19850:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
	pkt->ref = 1;
   19854:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
	pkt->slab = slab;
   19858:	6044      	str	r4, [r0, #4]
	NET_DBG("%s [%u] pkt %p reserve %u ref %d (%s():%d)",
		slab2str(slab), k_mem_slab_num_free_get(slab),
		pkt, reserve_head, pkt->ref, caller, line);
#endif
	return pkt;
}
   1985a:	b002      	add	sp, #8
   1985c:	bd70      	pop	{r4, r5, r6, pc}
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   1985e:	4632      	mov	r2, r6
   19860:	e7ea      	b.n	19838 <net_pkt_get_reserve+0x10>
		return NULL;
   19862:	2000      	movs	r0, #0
   19864:	e7f9      	b.n	1985a <net_pkt_get_reserve+0x32>
	...

00019868 <net_pkt_get>:
#else
static struct net_pkt *net_pkt_get(struct k_mem_slab *slab,
				   struct net_context *context,
				   s32_t timeout)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
   19868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1986a:	4606      	mov	r6, r0
   1986c:	4617      	mov	r7, r2
	struct in6_addr *addr6 = NULL;
	struct net_if *iface;
	struct net_pkt *pkt;
	sa_family_t family;

	if (!context) {
   1986e:	460c      	mov	r4, r1
   19870:	b909      	cbnz	r1, 19876 <net_pkt_get+0xe>
		return NULL;
   19872:	2000      	movs	r0, #0
   19874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_if_get_by_index(context->iface);
   19876:	f891 0054 	ldrb.w	r0, [r1, #84]	; 0x54
   1987a:	f7ff ff05 	bl	19688 <net_if_get_by_index>
	}

	iface = net_context_get_iface(context);
	if (!iface) {
   1987e:	4605      	mov	r5, r0
   19880:	2800      	cmp	r0, #0
   19882:	d0f6      	beq.n	19872 <net_pkt_get+0xa>
	if (context->flags & NET_CONTEXT_FAMILY) {
   19884:	f894 1055 	ldrb.w	r1, [r4, #85]	; 0x55
   19888:	f011 0110 	ands.w	r1, r1, #16
   1988c:	d133      	bne.n	198f6 <net_pkt_get+0x8e>
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1988e:	686b      	ldr	r3, [r5, #4]
   19890:	4628      	mov	r0, r5
   19892:	689b      	ldr	r3, [r3, #8]
   19894:	4798      	blx	r3
#if defined(CONFIG_NET_DEBUG_NET_PKT)
	pkt = net_pkt_get_reserve_debug(slab,
					net_if_get_ll_reserve(iface, addr6),
					timeout, caller, line);
#else
	pkt = net_pkt_get_reserve(slab, net_if_get_ll_reserve(iface, addr6),
   19896:	463a      	mov	r2, r7
   19898:	4601      	mov	r1, r0
   1989a:	4630      	mov	r0, r6
   1989c:	f7ff ffc4 	bl	19828 <net_pkt_get_reserve>
				  timeout);
#endif
	if (!pkt) {
   198a0:	2800      	cmp	r0, #0
   198a2:	d0e6      	beq.n	19872 <net_pkt_get+0xa>
	pkt->context = ctx;
   198a4:	60c4      	str	r4, [r0, #12]
	pkt->iface = iface;
   198a6:	6145      	str	r5, [r0, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   198a8:	7d6b      	ldrb	r3, [r5, #21]
   198aa:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   198ae:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
   198b2:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
	return AF_INET;
   198b6:	f013 0f10 	tst.w	r3, #16
	pkt->family = family;
   198ba:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
   198be:	bf14      	ite	ne
   198c0:	220a      	movne	r2, #10
   198c2:	2202      	moveq	r2, #2
   198c4:	f362 03c6 	bfi	r3, r2, #3, #4
   198c8:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
	net_pkt_set_context(pkt, context);
	net_pkt_set_iface(pkt, iface);
	family = net_context_get_family(context);
	net_pkt_set_family(pkt, family);

	if (slab != &rx_pkts) {
   198cc:	4b0d      	ldr	r3, [pc, #52]	; (19904 <net_pkt_get+0x9c>)
   198ce:	429e      	cmp	r6, r3
   198d0:	d017      	beq.n	19902 <net_pkt_get+0x9a>
		uint16_t iface_len, data_len = 0;
		enum net_ip_protocol proto;

		iface_len = net_if_get_mtu(iface);

		if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   198d2:	2a0a      	cmp	r2, #10
   198d4:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   198d6:	d10c      	bne.n	198f2 <net_pkt_get+0x8a>
			data_len = max(iface_len, NET_IPV6_MTU);
   198d8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   198dc:	bf38      	it	cc
   198de:	f44f 63a0 	movcc.w	r3, #1280	; 0x500
			data_len -= NET_IPV6H_LEN;
   198e2:	3b28      	subs	r3, #40	; 0x28
   198e4:	b29b      	uxth	r3, r3
	if (context->flags & NET_CONTEXT_PROTO) {
   198e6:	f894 2055 	ldrb.w	r2, [r4, #85]	; 0x55
   198ea:	0652      	lsls	r2, r2, #25
   198ec:	d506      	bpl.n	198fc <net_pkt_get+0x94>

		if (proto == IPPROTO_ICMP || proto == IPPROTO_ICMPV6) {
			data_len -= NET_ICMPH_LEN;
		}

		pkt->data_len = data_len;
   198ee:	8603      	strh	r3, [r0, #48]	; 0x30
   198f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint16_t iface_len, data_len = 0;
   198f2:	2300      	movs	r3, #0
   198f4:	e7f7      	b.n	198e6 <net_pkt_get+0x7e>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   198f6:	f104 0118 	add.w	r1, r4, #24
   198fa:	e7c8      	b.n	1988e <net_pkt_get+0x26>
			data_len -= NET_UDPH_LEN;
   198fc:	3b08      	subs	r3, #8
   198fe:	b29b      	uxth	r3, r3
   19900:	e7f5      	b.n	198ee <net_pkt_get+0x86>
	}

	return pkt;
}
   19902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19904:	2000ec54 	.word	0x2000ec54

00019908 <net_pkt_get_reserve_data>:
{
   19908:	b570      	push	{r4, r5, r6, lr}
   1990a:	4604      	mov	r4, r0
   1990c:	460d      	mov	r5, r1
   1990e:	4616      	mov	r6, r2
	if (k_is_in_isr()) {
   19910:	f007 facc 	bl	20eac <k_is_in_isr>
   19914:	b158      	cbz	r0, 1992e <net_pkt_get_reserve_data+0x26>
		frag = net_buf_alloc(pool, K_NO_WAIT);
   19916:	2100      	movs	r1, #0
		frag = net_buf_alloc(pool, timeout);
   19918:	4620      	mov	r0, r4
   1991a:	f7fe fa8d 	bl	17e38 <net_buf_alloc_fixed>
   1991e:	4604      	mov	r4, r0
	if (!frag) {
   19920:	b118      	cbz	r0, 1992a <net_pkt_get_reserve_data+0x22>
	net_buf_reserve(frag, reserve_head);
   19922:	4629      	mov	r1, r5
   19924:	3008      	adds	r0, #8
   19926:	f7fe faa6 	bl	17e76 <net_buf_simple_reserve>
}
   1992a:	4620      	mov	r0, r4
   1992c:	bd70      	pop	{r4, r5, r6, pc}
		frag = net_buf_alloc(pool, timeout);
   1992e:	4631      	mov	r1, r6
   19930:	e7f2      	b.n	19918 <net_pkt_get_reserve_data+0x10>
	...

00019934 <net_pkt_get_reserve_rx>:
	return net_pkt_get_reserve(&rx_pkts, reserve_head, timeout);
   19934:	460a      	mov	r2, r1
   19936:	4601      	mov	r1, r0
   19938:	4801      	ldr	r0, [pc, #4]	; (19940 <net_pkt_get_reserve_rx+0xc>)
   1993a:	f7ff bf75 	b.w	19828 <net_pkt_get_reserve>
   1993e:	bf00      	nop
   19940:	2000ec54 	.word	0x2000ec54

00019944 <net_pkt_get_reserve_tx>:
	return net_pkt_get_reserve(&tx_pkts, reserve_head, timeout);
   19944:	460a      	mov	r2, r1
   19946:	4601      	mov	r1, r0
   19948:	4801      	ldr	r0, [pc, #4]	; (19950 <net_pkt_get_reserve_tx+0xc>)
   1994a:	f7ff bf6d 	b.w	19828 <net_pkt_get_reserve>
   1994e:	bf00      	nop
   19950:	2000ec70 	.word	0x2000ec70

00019954 <net_pkt_get_reserve_rx_data>:
	return net_pkt_get_reserve_data(&rx_bufs, reserve_head, timeout);
   19954:	460a      	mov	r2, r1
   19956:	4601      	mov	r1, r0
   19958:	4801      	ldr	r0, [pc, #4]	; (19960 <net_pkt_get_reserve_rx_data+0xc>)
   1995a:	f7ff bfd5 	b.w	19908 <net_pkt_get_reserve_data>
   1995e:	bf00      	nop
   19960:	2000edac 	.word	0x2000edac

00019964 <net_pkt_get_reserve_tx_data>:
	return net_pkt_get_reserve_data(&tx_bufs, reserve_head, timeout);
   19964:	460a      	mov	r2, r1
   19966:	4601      	mov	r1, r0
   19968:	4801      	ldr	r0, [pc, #4]	; (19970 <net_pkt_get_reserve_tx_data+0xc>)
   1996a:	f7ff bfcd 	b.w	19908 <net_pkt_get_reserve_data>
   1996e:	bf00      	nop
   19970:	2000edcc 	.word	0x2000edcc

00019974 <net_pkt_get_frag>:
	if (pkt->slab == &rx_pkts) {
   19974:	6842      	ldr	r2, [r0, #4]
   19976:	4b04      	ldr	r3, [pc, #16]	; (19988 <net_pkt_get_frag+0x14>)
   19978:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
   1997c:	429a      	cmp	r2, r3
   1997e:	d101      	bne.n	19984 <net_pkt_get_frag+0x10>
		return net_pkt_get_reserve_rx_data(net_pkt_ll_reserve(pkt),
   19980:	f7ff bfe8 	b.w	19954 <net_pkt_get_reserve_rx_data>
	return net_pkt_get_reserve_tx_data(net_pkt_ll_reserve(pkt),
   19984:	f7ff bfee 	b.w	19964 <net_pkt_get_reserve_tx_data>
   19988:	2000ec54 	.word	0x2000ec54

0001998c <net_pkt_get_tx>:

	NET_ASSERT_INFO(context, "TX context not set");

	slab = get_tx_slab(context);

	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1998c:	460a      	mov	r2, r1
   1998e:	4601      	mov	r1, r0
   19990:	4801      	ldr	r0, [pc, #4]	; (19998 <net_pkt_get_tx+0xc>)
   19992:	f7ff bf69 	b.w	19868 <net_pkt_get>
   19996:	bf00      	nop
   19998:	2000ec70 	.word	0x2000ec70

0001999c <net_pkt_ref>:
				  int line)
#else
struct net_pkt *net_pkt_ref(struct net_pkt *pkt)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
	if (!pkt) {
   1999c:	b120      	cbz	r0, 199a8 <net_pkt_ref+0xc>
	NET_DBG("%s [%d] pkt %p ref %d (%s():%d)",
		slab2str(pkt->slab), k_mem_slab_num_free_get(pkt->slab),
		pkt, pkt->ref + 1, caller, line);
#endif

	pkt->ref++;
   1999e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
   199a2:	3301      	adds	r3, #1
   199a4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e

	return pkt;
}
   199a8:	4770      	bx	lr

000199aa <net_pkt_frag_unref>:
			      const char *caller, int line)
#else
void net_pkt_frag_unref(struct net_buf *frag)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
	if (!frag) {
   199aa:	b108      	cbz	r0, 199b0 <net_pkt_frag_unref+0x6>

	if (frag->ref == 1) {
		net_pkt_alloc_del(frag, caller, line);
	}
#endif
	net_buf_unref(frag);
   199ac:	f7fe ba74 	b.w	17e98 <net_buf_unref>
   199b0:	4770      	bx	lr

000199b2 <net_pkt_unref>:
{
   199b2:	b507      	push	{r0, r1, r2, lr}
   199b4:	9001      	str	r0, [sp, #4]
	if (!pkt) {
   199b6:	b180      	cbz	r0, 199da <net_pkt_unref+0x28>
	if (!pkt->ref) {
   199b8:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
   199bc:	b16b      	cbz	r3, 199da <net_pkt_unref+0x28>
	if (--pkt->ref > 0) {
   199be:	3b01      	subs	r3, #1
   199c0:	b2db      	uxtb	r3, r3
   199c2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
   199c6:	b943      	cbnz	r3, 199da <net_pkt_unref+0x28>
	if (pkt->frags) {
   199c8:	6880      	ldr	r0, [r0, #8]
   199ca:	b108      	cbz	r0, 199d0 <net_pkt_unref+0x1e>
		net_pkt_frag_unref(pkt->frags);
   199cc:	f7ff ffed 	bl	199aa <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   199d0:	9b01      	ldr	r3, [sp, #4]
   199d2:	a901      	add	r1, sp, #4
   199d4:	6858      	ldr	r0, [r3, #4]
   199d6:	f006 fd0f 	bl	203f8 <k_mem_slab_free>
}
   199da:	b003      	add	sp, #12
   199dc:	f85d fb04 	ldr.w	pc, [sp], #4

000199e0 <net_pkt_frag_del>:
#else
struct net_buf *net_pkt_frag_del(struct net_pkt *pkt,
				 struct net_buf *parent,
				 struct net_buf *frag)
#endif
{
   199e0:	b510      	push	{r4, lr}
   199e2:	4604      	mov	r4, r0
   199e4:	4608      	mov	r0, r1
	if (frag->ref == 1) {
		net_pkt_alloc_del(frag, caller, line);
	}
#endif

	if (pkt->frags == frag && !parent) {
   199e6:	68a1      	ldr	r1, [r4, #8]
   199e8:	4291      	cmp	r1, r2
   199ea:	d104      	bne.n	199f6 <net_pkt_frag_del+0x16>
   199ec:	b918      	cbnz	r0, 199f6 <net_pkt_frag_del+0x16>
		struct net_buf *tmp;

		tmp = net_buf_frag_del(NULL, frag);
   199ee:	f7fe faa5 	bl	17f3c <net_buf_frag_del>
		pkt->frags = tmp;
   199f2:	60a0      	str	r0, [r4, #8]
   199f4:	bd10      	pop	{r4, pc}

		return tmp;
	}

	return net_buf_frag_del(parent, frag);
   199f6:	4611      	mov	r1, r2
}
   199f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return net_buf_frag_del(parent, frag);
   199fc:	f7fe ba9e 	b.w	17f3c <net_buf_frag_del>

00019a00 <net_pkt_frag_add>:
	NET_DBG("pkt %p frag %p (%s:%d)", pkt, frag, caller, line);

	/* We do not use net_buf_frag_add() as this one will refcount
	 * the frag once more if !pkt->frags
	 */
	if (!pkt->frags) {
   19a00:	6883      	ldr	r3, [r0, #8]
{
   19a02:	b510      	push	{r4, lr}
   19a04:	460c      	mov	r4, r1
	if (!pkt->frags) {
   19a06:	b90b      	cbnz	r3, 19a0c <net_pkt_frag_add+0xc>
		pkt->frags = frag;
   19a08:	6081      	str	r1, [r0, #8]
		return;
   19a0a:	bd10      	pop	{r4, pc}
	}

	net_buf_frag_insert(net_buf_frag_last(pkt->frags), frag);
   19a0c:	4618      	mov	r0, r3
   19a0e:	f7fe fa75 	bl	17efc <net_buf_frag_last>
   19a12:	4621      	mov	r1, r4
}
   19a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_buf_frag_insert(net_buf_frag_last(pkt->frags), frag);
   19a18:	f7fe ba75 	b.w	17f06 <net_buf_frag_insert>

00019a1c <check_and_create_data.part.18>:
	*value = v32[0] << 24 | v32[1] << 16 | v32[2] << 8 | v32[3];

	return ret_frag;
}

static inline struct net_buf *check_and_create_data(struct net_pkt *pkt,
   19a1c:	b538      	push	{r3, r4, r5, lr}
   19a1e:	4605      	mov	r5, r0

	if (data) {
		return data;
	}

	frag = net_pkt_get_frag(pkt, timeout);
   19a20:	f7ff ffa8 	bl	19974 <net_pkt_get_frag>
	if (!frag) {
   19a24:	4604      	mov	r4, r0
   19a26:	b118      	cbz	r0, 19a30 <check_and_create_data.part.18+0x14>
		return NULL;
	}

	net_pkt_frag_add(pkt, frag);
   19a28:	4601      	mov	r1, r0
   19a2a:	4628      	mov	r0, r5
   19a2c:	f7ff ffe8 	bl	19a00 <net_pkt_frag_add>

	return frag;
}
   19a30:	4620      	mov	r0, r4
   19a32:	bd38      	pop	{r3, r4, r5, pc}

00019a34 <net_pkt_frag_insert>:
{
   19a34:	b538      	push	{r3, r4, r5, lr}
   19a36:	4604      	mov	r4, r0
	net_buf_frag_last(frag)->frags = pkt->frags;
   19a38:	4608      	mov	r0, r1
{
   19a3a:	460d      	mov	r5, r1
	net_buf_frag_last(frag)->frags = pkt->frags;
   19a3c:	f7fe fa5e 	bl	17efc <net_buf_frag_last>
   19a40:	68a3      	ldr	r3, [r4, #8]
   19a42:	6003      	str	r3, [r0, #0]
	pkt->frags = frag;
   19a44:	60a5      	str	r5, [r4, #8]
   19a46:	bd38      	pop	{r3, r4, r5, pc}

00019a48 <net_pkt_copy>:
{
   19a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a4c:	b085      	sub	sp, #20
   19a4e:	460f      	mov	r7, r1
   19a50:	9302      	str	r3, [sp, #8]
	frag = net_pkt_get_frag(pkt, timeout);
   19a52:	9902      	ldr	r1, [sp, #8]
{
   19a54:	9001      	str	r0, [sp, #4]
   19a56:	4690      	mov	r8, r2
	orig = pkt->frags;
   19a58:	6885      	ldr	r5, [r0, #8]
	frag = net_pkt_get_frag(pkt, timeout);
   19a5a:	f7ff ff8b 	bl	19974 <net_pkt_get_frag>
	if (!frag) {
   19a5e:	4604      	mov	r4, r0
   19a60:	b150      	cbz	r0, 19a78 <net_pkt_copy+0x30>
	if (reserve > net_buf_tailroom(frag)) {
   19a62:	f100 0608 	add.w	r6, r0, #8
   19a66:	4630      	mov	r0, r6
   19a68:	f7fe fae0 	bl	1802c <net_buf_simple_tailroom>
   19a6c:	4540      	cmp	r0, r8
   19a6e:	d207      	bcs.n	19a80 <net_pkt_copy+0x38>
		net_pkt_frag_unref(frag);
   19a70:	4620      	mov	r0, r4
   19a72:	f7ff ff9a 	bl	199aa <net_pkt_frag_unref>
		return NULL;
   19a76:	2400      	movs	r4, #0
}
   19a78:	4620      	mov	r0, r4
   19a7a:	b005      	add	sp, #20
   19a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_add(frag, reserve);
   19a80:	4630      	mov	r0, r6
   19a82:	4641      	mov	r1, r8
   19a84:	f7fe fa66 	bl	17f54 <net_buf_simple_add>
	if (!orig->len) {
   19a88:	89ae      	ldrh	r6, [r5, #12]
   19a8a:	2e00      	cmp	r6, #0
   19a8c:	d0f4      	beq.n	19a78 <net_pkt_copy+0x30>
	orig_data = orig->data;
   19a8e:	f8d5 9008 	ldr.w	r9, [r5, #8]
   19a92:	46a2      	mov	sl, r4
	while (orig && amount) {
   19a94:	2f00      	cmp	r7, #0
   19a96:	d0ef      	beq.n	19a78 <net_pkt_copy+0x30>
		int left_len = net_buf_tailroom(frag);
   19a98:	f10a 0b08 	add.w	fp, sl, #8
   19a9c:	4658      	mov	r0, fp
   19a9e:	f7fe fac5 	bl	1802c <net_buf_simple_tailroom>
			copy_len = orig_len;
   19aa2:	42be      	cmp	r6, r7
   19aa4:	4632      	mov	r2, r6
   19aa6:	bf28      	it	cs
   19aa8:	463a      	movcs	r2, r7
		if ((copy_len - left_len) >= 0) {
   19aaa:	1a11      	subs	r1, r2, r0
   19aac:	2900      	cmp	r1, #0
		int left_len = net_buf_tailroom(frag);
   19aae:	4680      	mov	r8, r0
		if ((copy_len - left_len) >= 0) {
   19ab0:	db1c      	blt.n	19aec <net_pkt_copy+0xa4>
			memcpy(net_buf_add(frag, left_len), orig_data,
   19ab2:	4601      	mov	r1, r0
			amount -= left_len;
   19ab4:	1a3f      	subs	r7, r7, r0
			memcpy(net_buf_add(frag, left_len), orig_data,
   19ab6:	4658      	mov	r0, fp
   19ab8:	f7fe fa4c 	bl	17f54 <net_buf_simple_add>
   19abc:	4642      	mov	r2, r8
   19abe:	4649      	mov	r1, r9
   19ac0:	f7e6 fe7c 	bl	7bc <memcpy>
			if (!net_buf_tailroom(frag)) {
   19ac4:	4658      	mov	r0, fp
   19ac6:	f7fe fab1 	bl	1802c <net_buf_simple_tailroom>
   19aca:	b958      	cbnz	r0, 19ae4 <net_pkt_copy+0x9c>
				struct net_buf *new_frag =
   19acc:	9902      	ldr	r1, [sp, #8]
   19ace:	9801      	ldr	r0, [sp, #4]
   19ad0:	f7ff ff50 	bl	19974 <net_pkt_get_frag>
				if (!new_frag) {
   19ad4:	4683      	mov	fp, r0
   19ad6:	2800      	cmp	r0, #0
   19ad8:	d0ca      	beq.n	19a70 <net_pkt_copy+0x28>
				net_buf_frag_add(frag, new_frag);
   19ada:	4601      	mov	r1, r0
   19adc:	4650      	mov	r0, sl
   19ade:	f7fe fa1d 	bl	17f1c <net_buf_frag_add>
   19ae2:	46da      	mov	sl, fp
			orig_len -= left_len;
   19ae4:	eba6 0608 	sub.w	r6, r6, r8
			orig_data += left_len;
   19ae8:	44c1      	add	r9, r8
   19aea:	e7d3      	b.n	19a94 <net_pkt_copy+0x4c>
			memcpy(net_buf_add(frag, copy_len), orig_data,
   19aec:	4611      	mov	r1, r2
   19aee:	4658      	mov	r0, fp
			amount -= copy_len;
   19af0:	1abf      	subs	r7, r7, r2
			memcpy(net_buf_add(frag, copy_len), orig_data,
   19af2:	9203      	str	r2, [sp, #12]
   19af4:	f7fe fa2e 	bl	17f54 <net_buf_simple_add>
   19af8:	9a03      	ldr	r2, [sp, #12]
   19afa:	4649      	mov	r1, r9
   19afc:	f7e6 fe5e 	bl	7bc <memcpy>
		orig = orig->frags;
   19b00:	682d      	ldr	r5, [r5, #0]
		if (orig) {
   19b02:	2d00      	cmp	r5, #0
   19b04:	d0b8      	beq.n	19a78 <net_pkt_copy+0x30>
			orig_len = orig->len;
   19b06:	89ae      	ldrh	r6, [r5, #12]
			orig_data = orig->data;
   19b08:	f8d5 9008 	ldr.w	r9, [r5, #8]
   19b0c:	e7c2      	b.n	19a94 <net_pkt_copy+0x4c>

00019b0e <net_pkt_compact>:
{
   19b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	frag = pkt->frags;
   19b12:	6884      	ldr	r4, [r0, #8]
{
   19b14:	4607      	mov	r7, r0
	prev = NULL;
   19b16:	f04f 0800 	mov.w	r8, #0
	while (frag) {
   19b1a:	2c00      	cmp	r4, #0
   19b1c:	d035      	beq.n	19b8a <net_pkt_compact+0x7c>
		if (frag->frags) {
   19b1e:	6823      	ldr	r3, [r4, #0]
   19b20:	b363      	cbz	r3, 19b7c <net_pkt_compact+0x6e>
			if (copy_len > net_buf_tailroom(frag)) {
   19b22:	f104 0608 	add.w	r6, r4, #8
   19b26:	4630      	mov	r0, r6
			copy_len = frag->frags->len;
   19b28:	899d      	ldrh	r5, [r3, #12]
			if (copy_len > net_buf_tailroom(frag)) {
   19b2a:	f7fe fa7f 	bl	1802c <net_buf_simple_tailroom>
   19b2e:	4285      	cmp	r5, r0
   19b30:	d903      	bls.n	19b3a <net_pkt_compact+0x2c>
				copy_len = net_buf_tailroom(frag);
   19b32:	4630      	mov	r0, r6
   19b34:	f7fe fa7a 	bl	1802c <net_buf_simple_tailroom>
   19b38:	4605      	mov	r5, r0
	return buf->data + buf->len;
   19b3a:	68a3      	ldr	r3, [r4, #8]
			memcpy(net_buf_tail(frag), frag->frags->data, copy_len);
   19b3c:	6821      	ldr	r1, [r4, #0]
   19b3e:	89a0      	ldrh	r0, [r4, #12]
   19b40:	6889      	ldr	r1, [r1, #8]
   19b42:	462a      	mov	r2, r5
   19b44:	4418      	add	r0, r3
   19b46:	f7e6 fe39 	bl	7bc <memcpy>
			net_buf_add(frag, copy_len);
   19b4a:	4629      	mov	r1, r5
   19b4c:	4630      	mov	r0, r6
   19b4e:	f7fe fa01 	bl	17f54 <net_buf_simple_add>
			memmove(frag->frags->data,
   19b52:	6823      	ldr	r3, [r4, #0]
   19b54:	6898      	ldr	r0, [r3, #8]
				frag->frags->len - copy_len);
   19b56:	899a      	ldrh	r2, [r3, #12]
			memmove(frag->frags->data,
   19b58:	1941      	adds	r1, r0, r5
   19b5a:	1b52      	subs	r2, r2, r5
   19b5c:	f7e6 fe16 	bl	78c <memmove>
			frag->frags->len -= copy_len;
   19b60:	6822      	ldr	r2, [r4, #0]
   19b62:	8993      	ldrh	r3, [r2, #12]
   19b64:	1b5d      	subs	r5, r3, r5
   19b66:	8195      	strh	r5, [r2, #12]
			if (net_buf_tailroom(frag)) {
   19b68:	4630      	mov	r0, r6
   19b6a:	f7fe fa5f 	bl	1802c <net_buf_simple_tailroom>
   19b6e:	b178      	cbz	r0, 19b90 <net_pkt_compact+0x82>
				net_pkt_frag_del(pkt, frag, frag->frags);
   19b70:	6822      	ldr	r2, [r4, #0]
   19b72:	4621      	mov	r1, r4
   19b74:	4638      	mov	r0, r7
   19b76:	f7ff ff33 	bl	199e0 <net_pkt_frag_del>
				continue;
   19b7a:	e7ce      	b.n	19b1a <net_pkt_compact+0xc>
			if (!frag->len) {
   19b7c:	89a3      	ldrh	r3, [r4, #12]
   19b7e:	b93b      	cbnz	r3, 19b90 <net_pkt_compact+0x82>
				net_pkt_frag_del(pkt, prev, frag);
   19b80:	4622      	mov	r2, r4
   19b82:	4641      	mov	r1, r8
   19b84:	4638      	mov	r0, r7
   19b86:	f7ff ff2b 	bl	199e0 <net_pkt_frag_del>
}
   19b8a:	2001      	movs	r0, #1
   19b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		frag = frag->frags;
   19b90:	46a0      	mov	r8, r4
   19b92:	6824      	ldr	r4, [r4, #0]
   19b94:	e7c1      	b.n	19b1a <net_pkt_compact+0xc>
	...

00019b98 <net_pkt_append>:
{
   19b98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b9c:	460d      	mov	r5, r1
   19b9e:	4690      	mov	r8, r2
   19ba0:	469a      	mov	sl, r3
	if (!pkt || !data || !len) {
   19ba2:	4604      	mov	r4, r0
   19ba4:	b918      	cbnz	r0, 19bae <net_pkt_append+0x16>
		return 0;
   19ba6:	2700      	movs	r7, #0
}
   19ba8:	4638      	mov	r0, r7
   19baa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!pkt || !data || !len) {
   19bae:	2a00      	cmp	r2, #0
   19bb0:	d0f9      	beq.n	19ba6 <net_pkt_append+0xe>
   19bb2:	2900      	cmp	r1, #0
   19bb4:	d0f7      	beq.n	19ba6 <net_pkt_append+0xe>
	if (!pkt->frags) {
   19bb6:	6883      	ldr	r3, [r0, #8]
   19bb8:	b943      	cbnz	r3, 19bcc <net_pkt_append+0x34>
		frag = net_pkt_get_frag(pkt, timeout);
   19bba:	4651      	mov	r1, sl
   19bbc:	f7ff feda 	bl	19974 <net_pkt_get_frag>
		if (!frag) {
   19bc0:	4601      	mov	r1, r0
   19bc2:	2800      	cmp	r0, #0
   19bc4:	d0ef      	beq.n	19ba6 <net_pkt_append+0xe>
		net_pkt_frag_add(pkt, frag);
   19bc6:	4620      	mov	r0, r4
   19bc8:	f7ff ff1a 	bl	19a00 <net_pkt_frag_add>
	if (pkt->slab != &rx_pkts) {
   19bcc:	6862      	ldr	r2, [r4, #4]
   19bce:	4b21      	ldr	r3, [pc, #132]	; (19c54 <net_pkt_append+0xbc>)
   19bd0:	429a      	cmp	r2, r3
   19bd2:	d032      	beq.n	19c3a <net_pkt_append+0xa2>
   19bd4:	f8d4 900c 	ldr.w	r9, [r4, #12]
	if (ctx) {
   19bd8:	f1b9 0f00 	cmp.w	r9, #0
   19bdc:	d003      	beq.n	19be6 <net_pkt_append+0x4e>
   19bde:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   19be0:	429d      	cmp	r5, r3
   19be2:	bf28      	it	cs
   19be4:	461d      	movcs	r5, r3
	struct net_buf *frag = net_buf_frag_last(pkt->frags);
   19be6:	68a0      	ldr	r0, [r4, #8]
   19be8:	f7fe f988 	bl	17efc <net_buf_frag_last>
	u16_t added_len = 0;
   19bec:	2700      	movs	r7, #0
	struct net_buf *frag = net_buf_frag_last(pkt->frags);
   19bee:	4606      	mov	r6, r0
		u16_t count = min(len, net_buf_tailroom(frag));
   19bf0:	3608      	adds	r6, #8
   19bf2:	4630      	mov	r0, r6
   19bf4:	f7fe fa1a 	bl	1802c <net_buf_simple_tailroom>
   19bf8:	4285      	cmp	r5, r0
   19bfa:	d321      	bcc.n	19c40 <net_pkt_append+0xa8>
   19bfc:	4630      	mov	r0, r6
   19bfe:	f7fe fa15 	bl	1802c <net_buf_simple_tailroom>
   19c02:	fa1f fb80 	uxth.w	fp, r0
		void *data = net_buf_add(frag, count);
   19c06:	4659      	mov	r1, fp
   19c08:	4630      	mov	r0, r6
		len -= count;
   19c0a:	eba5 050b 	sub.w	r5, r5, fp
		void *data = net_buf_add(frag, count);
   19c0e:	f7fe f9a1 	bl	17f54 <net_buf_simple_add>
		added_len += count;
   19c12:	445f      	add	r7, fp
		memcpy(data, value, count);
   19c14:	4641      	mov	r1, r8
   19c16:	465a      	mov	r2, fp
		len -= count;
   19c18:	b2ad      	uxth	r5, r5
		memcpy(data, value, count);
   19c1a:	f7e6 fdcf 	bl	7bc <memcpy>
		added_len += count;
   19c1e:	b2bf      	uxth	r7, r7
		value += count;
   19c20:	44d8      	add	r8, fp
		if (len == 0) {
   19c22:	b17d      	cbz	r5, 19c44 <net_pkt_append+0xac>
		frag = net_pkt_get_frag(pkt, timeout);
   19c24:	4651      	mov	r1, sl
   19c26:	4620      	mov	r0, r4
   19c28:	f7ff fea4 	bl	19974 <net_pkt_get_frag>
		if (!frag) {
   19c2c:	4606      	mov	r6, r0
   19c2e:	b148      	cbz	r0, 19c44 <net_pkt_append+0xac>
		net_pkt_frag_add(pkt, frag);
   19c30:	4601      	mov	r1, r0
   19c32:	4620      	mov	r0, r4
   19c34:	f7ff fee4 	bl	19a00 <net_pkt_frag_add>
   19c38:	e7da      	b.n	19bf0 <net_pkt_append+0x58>
	struct net_context *ctx = NULL;
   19c3a:	f04f 0900 	mov.w	r9, #0
   19c3e:	e7d2      	b.n	19be6 <net_pkt_append+0x4e>
		u16_t count = min(len, net_buf_tailroom(frag));
   19c40:	46ab      	mov	fp, r5
   19c42:	e7e0      	b.n	19c06 <net_pkt_append+0x6e>
	if (ctx) {
   19c44:	f1b9 0f00 	cmp.w	r9, #0
   19c48:	d0ae      	beq.n	19ba8 <net_pkt_append+0x10>
		pkt->data_len -= appended;
   19c4a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   19c4c:	1bdb      	subs	r3, r3, r7
   19c4e:	8623      	strh	r3, [r4, #48]	; 0x30
   19c50:	e7aa      	b.n	19ba8 <net_pkt_append+0x10>
   19c52:	bf00      	nop
   19c54:	2000ec54 	.word	0x2000ec54

00019c58 <net_frag_read>:
{
   19c58:	b5f0      	push	{r4, r5, r6, r7, lr}
   19c5a:	9d05      	ldr	r5, [sp, #20]
	if (!frag) {
   19c5c:	b318      	cbz	r0, 19ca6 <net_frag_read+0x4e>
		if (offset < frag->len) {
   19c5e:	8984      	ldrh	r4, [r0, #12]
   19c60:	428c      	cmp	r4, r1
   19c62:	d907      	bls.n	19c74 <net_frag_read+0x1c>
			*pos = offset;
   19c64:	8011      	strh	r1, [r2, #0]
   19c66:	2100      	movs	r1, #0
		*pos = 0;
   19c68:	468e      	mov	lr, r1
	while (len-- > 0 && frag) {
   19c6a:	1e5c      	subs	r4, r3, #1
   19c6c:	b2a4      	uxth	r4, r4
   19c6e:	b1f3      	cbz	r3, 19cae <net_frag_read+0x56>
   19c70:	b920      	cbnz	r0, 19c7c <net_frag_read+0x24>
   19c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		offset -= frag->len;
   19c74:	1b09      	subs	r1, r1, r4
   19c76:	b289      	uxth	r1, r1
		frag = frag->frags;
   19c78:	6800      	ldr	r0, [r0, #0]
   19c7a:	e7ef      	b.n	19c5c <net_frag_read+0x4>
			frag = net_frag_read_byte(frag, *pos,
   19c7c:	8813      	ldrh	r3, [r2, #0]
		if (data) {
   19c7e:	b1bd      	cbz	r5, 19cb0 <net_frag_read+0x58>
	if (data) {
   19c80:	42cd      	cmn	r5, r1
		*data = frag->data[offset];
   19c82:	bf1e      	ittt	ne
   19c84:	6887      	ldrne	r7, [r0, #8]
   19c86:	5cff      	ldrbne	r7, [r7, r3]
   19c88:	546f      	strbne	r7, [r5, r1]
	*pos = offset + 1;
   19c8a:	3301      	adds	r3, #1
   19c8c:	b29b      	uxth	r3, r3
   19c8e:	8013      	strh	r3, [r2, #0]
						  pos, data + copy++);
   19c90:	1c4e      	adds	r6, r1, #1
	if (*pos >= frag->len) {
   19c92:	8981      	ldrh	r1, [r0, #12]
   19c94:	4299      	cmp	r1, r3
						  pos, data + copy++);
   19c96:	b2b6      	uxth	r6, r6
	if (*pos >= frag->len) {
   19c98:	d813      	bhi.n	19cc2 <net_frag_read+0x6a>
		*pos = 0;
   19c9a:	f8a2 e000 	strh.w	lr, [r2]
		return frag->frags;
   19c9e:	6800      	ldr	r0, [r0, #0]
						  pos, data + copy++);
   19ca0:	4631      	mov	r1, r6
		if (!frag && len) {
   19ca2:	b978      	cbnz	r0, 19cc4 <net_frag_read+0x6c>
   19ca4:	b174      	cbz	r4, 19cc4 <net_frag_read+0x6c>
	*pos = 0xffff;
   19ca6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19caa:	8013      	strh	r3, [r2, #0]
	return NULL;
   19cac:	2000      	movs	r0, #0
}
   19cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*pos = offset + 1;
   19cb0:	3301      	adds	r3, #1
   19cb2:	b29b      	uxth	r3, r3
   19cb4:	8013      	strh	r3, [r2, #0]
	if (*pos >= frag->len) {
   19cb6:	8986      	ldrh	r6, [r0, #12]
   19cb8:	429e      	cmp	r6, r3
   19cba:	d803      	bhi.n	19cc4 <net_frag_read+0x6c>
		*pos = 0;
   19cbc:	8015      	strh	r5, [r2, #0]
		return frag->frags;
   19cbe:	6800      	ldr	r0, [r0, #0]
   19cc0:	e7ef      	b.n	19ca2 <net_frag_read+0x4a>
						  pos, data + copy++);
   19cc2:	4631      	mov	r1, r6
   19cc4:	4623      	mov	r3, r4
   19cc6:	e7d0      	b.n	19c6a <net_frag_read+0x12>

00019cc8 <net_frag_read_be16>:
{
   19cc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   19cca:	461c      	mov	r4, r3
	ret_frag = net_frag_read(frag, offset, pos, sizeof(u16_t), v16);
   19ccc:	ab03      	add	r3, sp, #12
   19cce:	9300      	str	r3, [sp, #0]
   19cd0:	2302      	movs	r3, #2
   19cd2:	f7ff ffc1 	bl	19c58 <net_frag_read>
	*value = v16[0] << 8 | v16[1];
   19cd6:	f89d 200c 	ldrb.w	r2, [sp, #12]
   19cda:	f89d 300d 	ldrb.w	r3, [sp, #13]
   19cde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   19ce2:	8023      	strh	r3, [r4, #0]
}
   19ce4:	b004      	add	sp, #16
   19ce6:	bd10      	pop	{r4, pc}

00019ce8 <net_frag_read_be32>:
{
   19ce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   19cea:	461c      	mov	r4, r3
	ret_frag = net_frag_read(frag, offset, pos, sizeof(u32_t), v32);
   19cec:	ab03      	add	r3, sp, #12
   19cee:	9300      	str	r3, [sp, #0]
   19cf0:	2304      	movs	r3, #4
   19cf2:	f7ff ffb1 	bl	19c58 <net_frag_read>
   19cf6:	9b03      	ldr	r3, [sp, #12]
   19cf8:	ba1b      	rev	r3, r3
	*value = v32[0] << 24 | v32[1] << 16 | v32[2] << 8 | v32[3];
   19cfa:	6023      	str	r3, [r4, #0]
}
   19cfc:	b004      	add	sp, #16
   19cfe:	bd10      	pop	{r4, pc}

00019d00 <net_pkt_write>:

struct net_buf *net_pkt_write(struct net_pkt *pkt, struct net_buf *frag,
			      u16_t offset, u16_t *pos,
			      u16_t len, u8_t *data,
			      s32_t timeout)
{
   19d00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d04:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   19d08:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
   19d0c:	4615      	mov	r5, r2
   19d0e:	469a      	mov	sl, r3
	if (!pkt) {
   19d10:	4607      	mov	r7, r0
   19d12:	2800      	cmp	r0, #0
   19d14:	d077      	beq.n	19e06 <net_pkt_write+0x106>
   19d16:	460c      	mov	r4, r1
	if (data) {
   19d18:	b934      	cbnz	r4, 19d28 <net_pkt_write+0x28>
   19d1a:	990c      	ldr	r1, [sp, #48]	; 0x30
   19d1c:	4638      	mov	r0, r7
   19d1e:	f7ff fe7d 	bl	19a1c <check_and_create_data.part.18>
		if (!frag) {
   19d22:	4604      	mov	r4, r0
   19d24:	2800      	cmp	r0, #0
   19d26:	d06e      	beq.n	19e06 <net_pkt_write+0x106>
		if (offset < frag->len) {
   19d28:	89a3      	ldrh	r3, [r4, #12]
   19d2a:	42ab      	cmp	r3, r5
   19d2c:	d820      	bhi.n	19d70 <net_pkt_write+0x70>
		if (offset == frag->len) {
   19d2e:	d10f      	bne.n	19d50 <net_pkt_write+0x50>
			if (net_buf_tailroom(frag)) {
   19d30:	f104 0008 	add.w	r0, r4, #8
   19d34:	f7fe f97a 	bl	1802c <net_buf_simple_tailroom>
   19d38:	b9d0      	cbnz	r0, 19d70 <net_pkt_write+0x70>
				return check_and_create_data(pkt,
   19d3a:	6824      	ldr	r4, [r4, #0]
	if (data) {
   19d3c:	b934      	cbnz	r4, 19d4c <net_pkt_write+0x4c>
   19d3e:	990c      	ldr	r1, [sp, #48]	; 0x30
   19d40:	4638      	mov	r0, r7
   19d42:	f7ff fe6b 	bl	19a1c <check_and_create_data.part.18>
   19d46:	4604      	mov	r4, r0
		NET_ERR("Invalid packet");
		goto error;
	}

	frag = adjust_write_offset(pkt, frag, offset, &offset, timeout);
	if (!frag) {
   19d48:	2800      	cmp	r0, #0
   19d4a:	d05c      	beq.n	19e06 <net_pkt_write+0x106>
   19d4c:	2500      	movs	r5, #0
   19d4e:	e00f      	b.n	19d70 <net_pkt_write+0x70>
		if (offset > frag->len) {
   19d50:	d2e2      	bcs.n	19d18 <net_pkt_write+0x18>
			tailroom = net_buf_tailroom(frag);
   19d52:	f104 0b08 	add.w	fp, r4, #8
   19d56:	4658      	mov	r0, fp
			offset -= frag->len;
   19d58:	1aed      	subs	r5, r5, r3
			tailroom = net_buf_tailroom(frag);
   19d5a:	f7fe f967 	bl	1802c <net_buf_simple_tailroom>
			offset -= frag->len;
   19d5e:	b2ad      	uxth	r5, r5
			tailroom = net_buf_tailroom(frag);
   19d60:	b286      	uxth	r6, r0
			if (offset < tailroom) {
   19d62:	42b5      	cmp	r5, r6
   19d64:	d22a      	bcs.n	19dbc <net_pkt_write+0xbc>
				net_buf_add(frag, offset);
   19d66:	4629      	mov	r1, r5
   19d68:	4658      	mov	r0, fp
   19d6a:	f7fe f8f3 	bl	17f54 <net_buf_simple_add>
				*pos = frag->len;
   19d6e:	89a5      	ldrh	r5, [r4, #12]
		NET_DBG("Failed to adjust offset (%u)", offset);
		goto error;
	}

	do {
		u16_t space = frag->size - net_buf_headroom(frag) - offset;
   19d70:	89e6      	ldrh	r6, [r4, #14]
   19d72:	f104 0b08 	add.w	fp, r4, #8
   19d76:	4658      	mov	r0, fp
   19d78:	f7fe f954 	bl	18024 <net_buf_simple_headroom>
   19d7c:	1a36      	subs	r6, r6, r0
   19d7e:	1b76      	subs	r6, r6, r5
		u16_t count = min(len, space);
   19d80:	b2b6      	uxth	r6, r6
   19d82:	4546      	cmp	r6, r8
		int size_to_add;

		memcpy(frag->data + offset, data, count);
   19d84:	68a0      	ldr	r0, [r4, #8]
		u16_t count = min(len, space);
   19d86:	bf28      	it	cs
   19d88:	4646      	movcs	r6, r8
		memcpy(frag->data + offset, data, count);
   19d8a:	4649      	mov	r1, r9
   19d8c:	4428      	add	r0, r5
   19d8e:	4632      	mov	r2, r6
   19d90:	f7e6 fd14 	bl	7bc <memcpy>

		/* If we are overwriting on already available space then need
		 * not to update the length, otherwise increase it.
		 */
		size_to_add = offset + count - frag->len;
   19d94:	89a1      	ldrh	r1, [r4, #12]
   19d96:	4435      	add	r5, r6
   19d98:	1a69      	subs	r1, r5, r1
		if (size_to_add > 0) {
   19d9a:	2900      	cmp	r1, #0
   19d9c:	dd02      	ble.n	19da4 <net_pkt_write+0xa4>
			net_buf_add(frag, size_to_add);
   19d9e:	4658      	mov	r0, fp
   19da0:	f7fe f8d8 	bl	17f54 <net_buf_simple_add>
		}

		len -= count;
   19da4:	eba8 0806 	sub.w	r8, r8, r6
   19da8:	fa1f f888 	uxth.w	r8, r8
		if (len == 0) {
   19dac:	f1b8 0f00 	cmp.w	r8, #0
   19db0:	d11a      	bne.n	19de8 <net_pkt_write+0xe8>
			*pos = offset + count;
   19db2:	f8aa 5000 	strh.w	r5, [sl]

error:
	*pos = 0xffff;

	return NULL;
}
   19db6:	4620      	mov	r0, r4
   19db8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (offset == tailroom) {
   19dbc:	d104      	bne.n	19dc8 <net_pkt_write+0xc8>
				net_buf_add(frag, tailroom);
   19dbe:	b281      	uxth	r1, r0
   19dc0:	4658      	mov	r0, fp
   19dc2:	f7fe f8c7 	bl	17f54 <net_buf_simple_add>
   19dc6:	e7b8      	b.n	19d3a <net_pkt_write+0x3a>
			if (offset > tailroom) {
   19dc8:	d9a6      	bls.n	19d18 <net_pkt_write+0x18>
				net_buf_add(frag, tailroom);
   19dca:	b281      	uxth	r1, r0
   19dcc:	4658      	mov	r0, fp
   19dce:	f7fe f8c1 	bl	17f54 <net_buf_simple_add>
				frag = check_and_create_data(pkt,
   19dd2:	6824      	ldr	r4, [r4, #0]
				offset -= tailroom;
   19dd4:	1bad      	subs	r5, r5, r6
   19dd6:	b2ad      	uxth	r5, r5
	if (data) {
   19dd8:	2c00      	cmp	r4, #0
   19dda:	d19d      	bne.n	19d18 <net_pkt_write+0x18>
   19ddc:	990c      	ldr	r1, [sp, #48]	; 0x30
   19dde:	4638      	mov	r0, r7
   19de0:	f7ff fe1c 	bl	19a1c <check_and_create_data.part.18>
   19de4:	4604      	mov	r4, r0
   19de6:	e797      	b.n	19d18 <net_pkt_write+0x18>
		frag = frag->frags;
   19de8:	6824      	ldr	r4, [r4, #0]
		data += count;
   19dea:	44b1      	add	r9, r6
		if (!frag) {
   19dec:	2c00      	cmp	r4, #0
   19dee:	d1ad      	bne.n	19d4c <net_pkt_write+0x4c>
			frag = net_pkt_get_frag(pkt, timeout);
   19df0:	990c      	ldr	r1, [sp, #48]	; 0x30
   19df2:	4638      	mov	r0, r7
   19df4:	f7ff fdbe 	bl	19974 <net_pkt_get_frag>
			if (!frag) {
   19df8:	4604      	mov	r4, r0
   19dfa:	b120      	cbz	r0, 19e06 <net_pkt_write+0x106>
			net_pkt_frag_add(pkt, frag);
   19dfc:	4601      	mov	r1, r0
   19dfe:	4638      	mov	r0, r7
   19e00:	f7ff fdfe 	bl	19a00 <net_pkt_frag_add>
   19e04:	e7a2      	b.n	19d4c <net_pkt_write+0x4c>
	*pos = 0xffff;
   19e06:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19e0a:	f8aa 3000 	strh.w	r3, [sl]
	return NULL;
   19e0e:	2400      	movs	r4, #0
   19e10:	e7d1      	b.n	19db6 <net_pkt_write+0xb6>
	...

00019e14 <net_pkt_get_info>:

void net_pkt_get_info(struct k_mem_slab **rx,
		      struct k_mem_slab **tx,
		      struct net_buf_pool **rx_data,
		      struct net_buf_pool **tx_data)
{
   19e14:	b510      	push	{r4, lr}
	if (rx) {
   19e16:	b108      	cbz	r0, 19e1c <net_pkt_get_info+0x8>
		*rx = &rx_pkts;
   19e18:	4c05      	ldr	r4, [pc, #20]	; (19e30 <net_pkt_get_info+0x1c>)
   19e1a:	6004      	str	r4, [r0, #0]
	}

	if (tx) {
   19e1c:	b109      	cbz	r1, 19e22 <net_pkt_get_info+0xe>
		*tx = &tx_pkts;
   19e1e:	4805      	ldr	r0, [pc, #20]	; (19e34 <net_pkt_get_info+0x20>)
   19e20:	6008      	str	r0, [r1, #0]
	}

	if (rx_data) {
   19e22:	b10a      	cbz	r2, 19e28 <net_pkt_get_info+0x14>
		*rx_data = &rx_bufs;
   19e24:	4904      	ldr	r1, [pc, #16]	; (19e38 <net_pkt_get_info+0x24>)
   19e26:	6011      	str	r1, [r2, #0]
	}

	if (tx_data) {
   19e28:	b10b      	cbz	r3, 19e2e <net_pkt_get_info+0x1a>
		*tx_data = &tx_bufs;
   19e2a:	4a04      	ldr	r2, [pc, #16]	; (19e3c <net_pkt_get_info+0x28>)
   19e2c:	601a      	str	r2, [r3, #0]
   19e2e:	bd10      	pop	{r4, pc}
   19e30:	2000ec54 	.word	0x2000ec54
   19e34:	2000ec70 	.word	0x2000ec70
   19e38:	2000edac 	.word	0x2000edac
   19e3c:	2000edcc 	.word	0x2000edcc

00019e40 <net_frag_get_pos>:
#endif /* CONFIG_NET_DEBUG_NET_PKT */

struct net_buf *net_frag_get_pos(struct net_pkt *pkt,
				 u16_t offset,
				 u16_t *pos)
{
   19e40:	b507      	push	{r0, r1, r2, lr}
 */
static inline struct net_buf *net_frag_skip(struct net_buf *frag,
					    u16_t offset,
					    u16_t *pos, u16_t len)
{
	return net_frag_read(frag, offset, pos, len, NULL);
   19e42:	2300      	movs	r3, #0
   19e44:	9300      	str	r3, [sp, #0]
   19e46:	6880      	ldr	r0, [r0, #8]
   19e48:	f7ff ff06 	bl	19c58 <net_frag_read>
	if (!frag) {
		return NULL;
	}

	return frag;
}
   19e4c:	b003      	add	sp, #12
   19e4e:	f85d fb04 	ldr.w	pc, [sp], #4

00019e52 <net_pkt_icmp_data>:
#else
#define too_short_msg(...)
#endif

struct net_icmp_hdr *net_pkt_icmp_data(struct net_pkt *pkt)
{
   19e52:	b507      	push	{r0, r1, r2, lr}
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   19e54:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
				net_pkt_ipv6_ext_len(pkt),
   19e58:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
	frag = net_frag_get_pos(pkt,
   19e5c:	f10d 0206 	add.w	r2, sp, #6
   19e60:	4419      	add	r1, r3
   19e62:	f7ff ffed 	bl	19e40 <net_frag_get_pos>
				&offset);
	if (!frag) {
   19e66:	b118      	cbz	r0, 19e70 <net_pkt_icmp_data+0x1e>
		/* We tried to read past the end of the data */
		too_short_msg("icmp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_icmp_hdr *)(frag->data + offset);
   19e68:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   19e6c:	6880      	ldr	r0, [r0, #8]
   19e6e:	4418      	add	r0, r3
}
   19e70:	b003      	add	sp, #12
   19e72:	f85d fb04 	ldr.w	pc, [sp], #4

00019e76 <net_pkt_icmp_opt_data>:

u8_t *net_pkt_icmp_opt_data(struct net_pkt *pkt, size_t opt_len)
{
   19e76:	b507      	push	{r0, r1, r2, lr}
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
				net_pkt_ipv6_ext_len(pkt) + opt_len,
   19e78:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
				net_pkt_ip_hdr_len(pkt) +
   19e7c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   19e80:	4413      	add	r3, r2
	frag = net_frag_get_pos(pkt,
   19e82:	4419      	add	r1, r3
   19e84:	f10d 0206 	add.w	r2, sp, #6
   19e88:	b289      	uxth	r1, r1
   19e8a:	f7ff ffd9 	bl	19e40 <net_frag_get_pos>
				&offset);
	if (!frag) {
   19e8e:	b118      	cbz	r0, 19e98 <net_pkt_icmp_opt_data+0x22>
		/* We tried to read past the end of the data */
		too_short_msg("icmp opt data", pkt, offset, opt_len);
		return NULL;
	}

	return frag->data + offset;
   19e90:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   19e94:	6880      	ldr	r0, [r0, #8]
   19e96:	4418      	add	r0, r3
}
   19e98:	b003      	add	sp, #12
   19e9a:	f85d fb04 	ldr.w	pc, [sp], #4

00019e9e <net_pkt_udp_data>:

struct net_udp_hdr *net_pkt_udp_data(struct net_pkt *pkt)
{
   19e9e:	b507      	push	{r0, r1, r2, lr}
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   19ea0:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
				net_pkt_ipv6_ext_len(pkt),
   19ea4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
	frag = net_frag_get_pos(pkt,
   19ea8:	f10d 0206 	add.w	r2, sp, #6
   19eac:	4419      	add	r1, r3
   19eae:	f7ff ffc7 	bl	19e40 <net_frag_get_pos>
				&offset);
	if (!frag) {
   19eb2:	b118      	cbz	r0, 19ebc <net_pkt_udp_data+0x1e>
		/* We tried to read past the end of the data */
		too_short_msg("udp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_udp_hdr *)(frag->data + offset);
   19eb4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   19eb8:	6880      	ldr	r0, [r0, #8]
   19eba:	4418      	add	r0, r3
}
   19ebc:	b003      	add	sp, #12
   19ebe:	f85d fb04 	ldr.w	pc, [sp], #4

00019ec2 <net_pkt_init>:

	return clone;
}

void net_pkt_init(void)
{
   19ec2:	4770      	bx	lr

00019ec4 <calc_chksum>:

	return 0;
}

static u16_t calc_chksum(u16_t sum, const u8_t *ptr, u16_t len)
{
   19ec4:	b510      	push	{r4, lr}
	u16_t tmp;
	const u8_t *end;

	end = ptr + len - 1;
   19ec6:	3a01      	subs	r2, #1
   19ec8:	440a      	add	r2, r1

	while (ptr < end) {
   19eca:	4291      	cmp	r1, r2
   19ecc:	d309      	bcc.n	19ee2 <calc_chksum+0x1e>
			sum++;
		}
		ptr += 2;
	}

	if (ptr == end) {
   19ece:	d107      	bne.n	19ee0 <calc_chksum+0x1c>
		tmp = ptr[0] << 8;
   19ed0:	780b      	ldrb	r3, [r1, #0]
   19ed2:	021b      	lsls	r3, r3, #8
		sum += tmp;
   19ed4:	4418      	add	r0, r3
   19ed6:	b280      	uxth	r0, r0
		if (sum < tmp) {
   19ed8:	4283      	cmp	r3, r0
			sum++;
   19eda:	bf84      	itt	hi
   19edc:	3001      	addhi	r0, #1
   19ede:	b280      	uxthhi	r0, r0
		}
	}

	return sum;
}
   19ee0:	bd10      	pop	{r4, pc}
		tmp = (ptr[0] << 8) + ptr[1];
   19ee2:	780c      	ldrb	r4, [r1, #0]
   19ee4:	784b      	ldrb	r3, [r1, #1]
   19ee6:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   19eea:	b29b      	uxth	r3, r3
		sum += tmp;
   19eec:	4418      	add	r0, r3
   19eee:	b280      	uxth	r0, r0
		if (sum < tmp) {
   19ef0:	4283      	cmp	r3, r0
			sum++;
   19ef2:	bf84      	itt	hi
   19ef4:	3001      	addhi	r0, #1
   19ef6:	b280      	uxthhi	r0, r0
		ptr += 2;
   19ef8:	3102      	adds	r1, #2
   19efa:	e7e6      	b.n	19eca <calc_chksum+0x6>

00019efc <net_addr_pton.part.4>:
int net_addr_pton(sa_family_t family, const char *src,
   19efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19f00:	460f      	mov	r7, r1
		int expected_groups = strchr(src, '.') ? 6 : 8;
   19f02:	212e      	movs	r1, #46	; 0x2e
int net_addr_pton(sa_family_t family, const char *src,
   19f04:	4604      	mov	r4, r0
		int expected_groups = strchr(src, '.') ? 6 : 8;
   19f06:	f7e6 fbdf 	bl	6c8 <strchr>
		if (*src == ':') {
   19f0a:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   19f0c:	2800      	cmp	r0, #0
   19f0e:	bf14      	ite	ne
   19f10:	2606      	movne	r6, #6
   19f12:	2608      	moveq	r6, #8
		if (*src == ':') {
   19f14:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   19f16:	bf08      	it	eq
   19f18:	3401      	addeq	r4, #1
		len = strlen(src);
   19f1a:	4620      	mov	r0, r4
   19f1c:	f7e6 fbf0 	bl	700 <strlen>
   19f20:	4623      	mov	r3, r4
		for (i = 0; i < len; i++) {
   19f22:	1b1a      	subs	r2, r3, r4
   19f24:	4290      	cmp	r0, r2
   19f26:	dc19      	bgt.n	19f5c <net_addr_pton.part.4+0x60>
   19f28:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   19f2a:	46a8      	mov	r8, r5
			if (!src || *src == '\0') {
   19f2c:	b31c      	cbz	r4, 19f76 <net_addr_pton.part.4+0x7a>
   19f2e:	7823      	ldrb	r3, [r4, #0]
   19f30:	b30b      	cbz	r3, 19f76 <net_addr_pton.part.4+0x7a>
			if (*src != ':') {
   19f32:	2b3a      	cmp	r3, #58	; 0x3a
   19f34:	ea4f 0345 	mov.w	r3, r5, lsl #1
   19f38:	d121      	bne.n	19f7e <net_addr_pton.part.4+0x82>
   19f3a:	443b      	add	r3, r7
			for (; i < expected_groups; i++) {
   19f3c:	42ae      	cmp	r6, r5
   19f3e:	dc3c      	bgt.n	19fba <net_addr_pton.part.4+0xbe>
			tmp = strrchr(src, ':');
   19f40:	213a      	movs	r1, #58	; 0x3a
   19f42:	4620      	mov	r0, r4
   19f44:	f7e6 fbcf 	bl	6e6 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   19f48:	42a0      	cmp	r0, r4
   19f4a:	d14c      	bne.n	19fe6 <net_addr_pton.part.4+0xea>
   19f4c:	2e06      	cmp	r6, #6
   19f4e:	d13b      	bne.n	19fc8 <net_addr_pton.part.4+0xcc>
				src++;
   19f50:	1c44      	adds	r4, r0, #1
		if (expected_groups == 6) {
   19f52:	2e06      	cmp	r6, #6
   19f54:	d04c      	beq.n	19ff0 <net_addr_pton.part.4+0xf4>
	return 0;
   19f56:	2000      	movs	r0, #0
   19f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (!(src[i] >= '0' && src[i] <= '9') &&
   19f5c:	f813 2b01 	ldrb.w	r2, [r3], #1
   19f60:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   19f64:	290a      	cmp	r1, #10
   19f66:	d9dc      	bls.n	19f22 <net_addr_pton.part.4+0x26>
   19f68:	f022 0120 	bic.w	r1, r2, #32
   19f6c:	3941      	subs	r1, #65	; 0x41
   19f6e:	2905      	cmp	r1, #5
   19f70:	d9d7      	bls.n	19f22 <net_addr_pton.part.4+0x26>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   19f72:	2a2e      	cmp	r2, #46	; 0x2e
   19f74:	d0d5      	beq.n	19f22 <net_addr_pton.part.4+0x26>
				return -EINVAL;
   19f76:	f06f 0015 	mvn.w	r0, #21
   19f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   19f7e:	2210      	movs	r2, #16
   19f80:	2100      	movs	r1, #0
   19f82:	4620      	mov	r0, r4
   19f84:	f7e6 fb0c 	bl	5a0 <strtol>
   19f88:	2100      	movs	r1, #0
   19f8a:	4681      	mov	r9, r0
   19f8c:	2210      	movs	r2, #16
   19f8e:	4620      	mov	r0, r4
   19f90:	f7e6 fb06 	bl	5a0 <strtol>
   19f94:	f3c9 2907 	ubfx	r9, r9, #8, #8
   19f98:	ea49 2900 	orr.w	r9, r9, r0, lsl #8
   19f9c:	f827 9015 	strh.w	r9, [r7, r5, lsl #1]
				src = strchr(src, ':');
   19fa0:	213a      	movs	r1, #58	; 0x3a
   19fa2:	4620      	mov	r0, r4
   19fa4:	f7e6 fb90 	bl	6c8 <strchr>
				if (!src && i < expected_groups - 1) {
   19fa8:	b910      	cbnz	r0, 19fb0 <net_addr_pton.part.4+0xb4>
   19faa:	1e73      	subs	r3, r6, #1
   19fac:	42ab      	cmp	r3, r5
   19fae:	dce2      	bgt.n	19f76 <net_addr_pton.part.4+0x7a>
				src++;
   19fb0:	1c44      	adds	r4, r0, #1
		for (i = 0; i < expected_groups; i++) {
   19fb2:	3501      	adds	r5, #1
   19fb4:	42ae      	cmp	r6, r5
   19fb6:	dcb9      	bgt.n	19f2c <net_addr_pton.part.4+0x30>
   19fb8:	e7cb      	b.n	19f52 <net_addr_pton.part.4+0x56>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   19fba:	f883 8000 	strb.w	r8, [r3]
   19fbe:	f883 8001 	strb.w	r8, [r3, #1]
			for (; i < expected_groups; i++) {
   19fc2:	3501      	adds	r5, #1
   19fc4:	3302      	adds	r3, #2
   19fc6:	e7b9      	b.n	19f3c <net_addr_pton.part.4+0x40>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   19fc8:	7863      	ldrb	r3, [r4, #1]
   19fca:	2b00      	cmp	r3, #0
   19fcc:	d0c0      	beq.n	19f50 <net_addr_pton.part.4+0x54>
			i = expected_groups - 1;
   19fce:	1e75      	subs	r5, r6, #1
   19fd0:	3001      	adds	r0, #1
				if (*tmp == ':') {
   19fd2:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   19fd6:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   19fd8:	bf08      	it	eq
   19fda:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
			} while (tmp-- != src);
   19fde:	42a0      	cmp	r0, r4
   19fe0:	d1f7      	bne.n	19fd2 <net_addr_pton.part.4+0xd6>
			src++;
   19fe2:	3401      	adds	r4, #1
   19fe4:	e7e5      	b.n	19fb2 <net_addr_pton.part.4+0xb6>
			if (expected_groups == 6) {
   19fe6:	2e06      	cmp	r6, #6
				tmp--;
   19fe8:	bf08      	it	eq
   19fea:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
   19fee:	e7ee      	b.n	19fce <net_addr_pton.part.4+0xd2>
   19ff0:	370c      	adds	r7, #12
		if (expected_groups == 6) {
   19ff2:	2500      	movs	r5, #0
				if (!src || !*src) {
   19ff4:	2c00      	cmp	r4, #0
   19ff6:	d0be      	beq.n	19f76 <net_addr_pton.part.4+0x7a>
   19ff8:	7823      	ldrb	r3, [r4, #0]
   19ffa:	2b00      	cmp	r3, #0
   19ffc:	d0bb      	beq.n	19f76 <net_addr_pton.part.4+0x7a>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   19ffe:	2100      	movs	r1, #0
   1a000:	220a      	movs	r2, #10
   1a002:	4620      	mov	r0, r4
   1a004:	f7e6 facc 	bl	5a0 <strtol>
				src = strchr(src, '.');
   1a008:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1a00a:	f807 0b01 	strb.w	r0, [r7], #1
				src = strchr(src, '.');
   1a00e:	4620      	mov	r0, r4
   1a010:	f7e6 fb5a 	bl	6c8 <strchr>
				if (!src && i < 3) {
   1a014:	b908      	cbnz	r0, 1a01a <net_addr_pton.part.4+0x11e>
   1a016:	2d03      	cmp	r5, #3
   1a018:	d1ad      	bne.n	19f76 <net_addr_pton.part.4+0x7a>
			for (i = 0; i < 4; i++) {
   1a01a:	3501      	adds	r5, #1
   1a01c:	2d04      	cmp	r5, #4
				src++;
   1a01e:	f100 0401 	add.w	r4, r0, #1
			for (i = 0; i < 4; i++) {
   1a022:	d1e7      	bne.n	19ff4 <net_addr_pton.part.4+0xf8>
   1a024:	e797      	b.n	19f56 <net_addr_pton.part.4+0x5a>

0001a026 <net_byte_to_hex>:
{
   1a026:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1a028:	090c      	lsrs	r4, r1, #4
		if (i == 0 && !pad && !val) {
   1a02a:	b1c3      	cbz	r3, 1a05e <net_byte_to_hex+0x38>
		if (val < 10) {
   1a02c:	2c09      	cmp	r4, #9
			*ptr++ = (char) (val - 10 + base);
   1a02e:	bf88      	it	hi
   1a030:	f1a2 050a 	subhi.w	r5, r2, #10
   1a034:	f100 0301 	add.w	r3, r0, #1
   1a038:	bf8c      	ite	hi
   1a03a:	1964      	addhi	r4, r4, r5
			*ptr++ = (char) (val + '0');
   1a03c:	3430      	addls	r4, #48	; 0x30
   1a03e:	7004      	strb	r4, [r0, #0]
   1a040:	4618      	mov	r0, r3
   1a042:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   1a046:	2909      	cmp	r1, #9
   1a048:	f100 0301 	add.w	r3, r0, #1
			*ptr++ = (char) (val - 10 + base);
   1a04c:	bf86      	itte	hi
   1a04e:	3a0a      	subhi	r2, #10
   1a050:	1889      	addhi	r1, r1, r2
			*ptr++ = (char) (val + '0');
   1a052:	3130      	addls	r1, #48	; 0x30
	*ptr = '\0';
   1a054:	2200      	movs	r2, #0
			*ptr++ = (char) (val - 10 + base);
   1a056:	7001      	strb	r1, [r0, #0]
	*ptr = '\0';
   1a058:	701a      	strb	r2, [r3, #0]
}
   1a05a:	4618      	mov	r0, r3
   1a05c:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   1a05e:	2c00      	cmp	r4, #0
   1a060:	d1e4      	bne.n	1a02c <net_byte_to_hex+0x6>
   1a062:	e7ee      	b.n	1a042 <net_byte_to_hex+0x1c>

0001a064 <net_sprint_ll_addr_buf>:
{
   1a064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a068:	4616      	mov	r6, r2
   1a06a:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
   1a06e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
		len = 6;
   1a072:	2908      	cmp	r1, #8
   1a074:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
{
   1a078:	460d      	mov	r5, r1
   1a07a:	4607      	mov	r7, r0
   1a07c:	fa50 f483 	uxtab	r4, r0, r3
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1a080:	4680      	mov	r8, r0
		len = 6;
   1a082:	bf0c      	ite	eq
   1a084:	460d      	moveq	r5, r1
   1a086:	2506      	movne	r5, #6
	char *ptr = buf;
   1a088:	4630      	mov	r0, r6
		*ptr++ = ':';
   1a08a:	f04f 093a 	mov.w	r9, #58	; 0x3a
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1a08e:	45a0      	cmp	r8, r4
   1a090:	d00e      	beq.n	1a0b0 <net_sprint_ll_addr_buf+0x4c>
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
   1a092:	2301      	movs	r3, #1
   1a094:	f818 1b01 	ldrb.w	r1, [r8], #1
   1a098:	2241      	movs	r2, #65	; 0x41
   1a09a:	f7ff ffc4 	bl	1a026 <net_byte_to_hex>
   1a09e:	4603      	mov	r3, r0
		*ptr++ = ':';
   1a0a0:	3001      	adds	r0, #1
   1a0a2:	f883 9000 	strb.w	r9, [r3]
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1a0a6:	eba8 0307 	sub.w	r3, r8, r7
   1a0aa:	b2db      	uxtb	r3, r3
   1a0ac:	429d      	cmp	r5, r3
   1a0ae:	d8ee      	bhi.n	1a08e <net_sprint_ll_addr_buf+0x2a>
	if (!(ptr - buf)) {
   1a0b0:	42b0      	cmp	r0, r6
   1a0b2:	f04f 0300 	mov.w	r3, #0
	*(ptr - 1) = '\0';
   1a0b6:	bf1a      	itte	ne
   1a0b8:	f800 3c01 	strbne.w	r3, [r0, #-1]
	return buf;
   1a0bc:	4630      	movne	r0, r6
		return NULL;
   1a0be:	4618      	moveq	r0, r3
}
   1a0c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001a0c4 <net_addr_ntop>:
{
   1a0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0c8:	b087      	sub	sp, #28
	unsigned char zeros[8] = { 0 };
   1a0ca:	2300      	movs	r3, #0
	if (family == AF_INET6) {
   1a0cc:	280a      	cmp	r0, #10
{
   1a0ce:	4681      	mov	r9, r0
   1a0d0:	4690      	mov	r8, r2
	unsigned char zeros[8] = { 0 };
   1a0d2:	9304      	str	r3, [sp, #16]
   1a0d4:	9305      	str	r3, [sp, #20]
	if (family == AF_INET6) {
   1a0d6:	d138      	bne.n	1a14a <net_addr_ntop+0x86>
		w = (u16_t *)addr6->s6_addr16;
   1a0d8:	9103      	str	r1, [sp, #12]
   1a0da:	b2da      	uxtb	r2, r3
   1a0dc:	e008      	b.n	1a0f0 <net_addr_ntop+0x2c>
				zeros[i]++;
   1a0de:	a804      	add	r0, sp, #16
			for (j = i; j < 8; j++) {
   1a0e0:	3201      	adds	r2, #1
				zeros[i]++;
   1a0e2:	5cc0      	ldrb	r0, [r0, r3]
   1a0e4:	ac04      	add	r4, sp, #16
			for (j = i; j < 8; j++) {
   1a0e6:	b2d2      	uxtb	r2, r2
				zeros[i]++;
   1a0e8:	3001      	adds	r0, #1
			for (j = i; j < 8; j++) {
   1a0ea:	2a08      	cmp	r2, #8
				zeros[i]++;
   1a0ec:	54e0      	strb	r0, [r4, r3]
			for (j = i; j < 8; j++) {
   1a0ee:	d003      	beq.n	1a0f8 <net_addr_ntop+0x34>
				if (UNALIGNED_GET(&w[j]) != 0) {
   1a0f0:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
   1a0f4:	2800      	cmp	r0, #0
   1a0f6:	d0f2      	beq.n	1a0de <net_addr_ntop+0x1a>
   1a0f8:	3301      	adds	r3, #1
		for (i = 0; i < 8; i++) {
   1a0fa:	2b08      	cmp	r3, #8
   1a0fc:	d1ed      	bne.n	1a0da <net_addr_ntop+0x16>
   1a0fe:	2300      	movs	r3, #0
   1a100:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1a104:	2601      	movs	r6, #1
			if (zeros[i] > longest) {
   1a106:	aa04      	add	r2, sp, #16
   1a108:	5cd2      	ldrb	r2, [r2, r3]
   1a10a:	42b2      	cmp	r2, r6
				pos = i;
   1a10c:	bf88      	it	hi
   1a10e:	b25f      	sxtbhi	r7, r3
   1a110:	f103 0301 	add.w	r3, r3, #1
   1a114:	bf88      	it	hi
   1a116:	4616      	movhi	r6, r2
		for (i = 0; i < 8; i++) {
   1a118:	2b08      	cmp	r3, #8
   1a11a:	d1f4      	bne.n	1a106 <net_addr_ntop+0x42>
		len = 8;
   1a11c:	2e01      	cmp	r6, #1
   1a11e:	469b      	mov	fp, r3
   1a120:	f04f 0a3a 	mov.w	sl, #58	; 0x3a
   1a124:	bf08      	it	eq
   1a126:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff
	bool needcolon = false;
   1a12a:	2200      	movs	r2, #0
	char *ptr = dst;
   1a12c:	4640      	mov	r0, r8
	for (i = 0; i < len; i++) {
   1a12e:	4615      	mov	r5, r2
   1a130:	45ab      	cmp	fp, r5
   1a132:	dc1b      	bgt.n	1a16c <net_addr_ntop+0xa8>
	if (!(ptr - dst)) {
   1a134:	4540      	cmp	r0, r8
   1a136:	d00a      	beq.n	1a14e <net_addr_ntop+0x8a>
	if (family == AF_INET) {
   1a138:	f1b9 0f02 	cmp.w	r9, #2
   1a13c:	f04f 0300 	mov.w	r3, #0
		*(ptr - 1) = '\0';
   1a140:	bf0c      	ite	eq
   1a142:	f800 3c01 	strbeq.w	r3, [r0, #-1]
		*ptr = '\0';
   1a146:	7003      	strbne	r3, [r0, #0]
   1a148:	e003      	b.n	1a152 <net_addr_ntop+0x8e>
	} else if (family == AF_INET) {
   1a14a:	2802      	cmp	r0, #2
   1a14c:	d005      	beq.n	1a15a <net_addr_ntop+0x96>
		return NULL;
   1a14e:	f04f 0800 	mov.w	r8, #0
}
   1a152:	4640      	mov	r0, r8
   1a154:	b007      	add	sp, #28
   1a156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		addr = (struct in_addr *)src;
   1a15a:	9102      	str	r1, [sp, #8]
		len = 4;
   1a15c:	f04f 0b04 	mov.w	fp, #4
		delim = '.';
   1a160:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
	s8_t pos = -1;
   1a164:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1;
   1a168:	2601      	movs	r6, #1
   1a16a:	e7de      	b.n	1a12a <net_addr_ntop+0x66>
		if (len == 4) {
   1a16c:	f1bb 0f04 	cmp.w	fp, #4
   1a170:	d135      	bne.n	1a1de <net_addr_ntop+0x11a>
			value = (u32_t)addr->s4_addr[i];
   1a172:	9b02      	ldr	r3, [sp, #8]
   1a174:	5d59      	ldrb	r1, [r3, r5]
			if (value == 0) {
   1a176:	b949      	cbnz	r1, 1a18c <net_addr_ntop+0xc8>
				*ptr++ = '0';
   1a178:	4603      	mov	r3, r0
   1a17a:	2130      	movs	r1, #48	; 0x30
   1a17c:	f803 1b02 	strb.w	r1, [r3], #2
				*ptr++ = delim;
   1a180:	f880 a001 	strb.w	sl, [r0, #1]
   1a184:	4618      	mov	r0, r3
	for (i = 0; i < len; i++) {
   1a186:	3501      	adds	r5, #1
   1a188:	b2ed      	uxtb	r5, r5
   1a18a:	e7d1      	b.n	1a130 <net_addr_ntop+0x6c>
			l = net_value_to_udec(ptr, value, 0);
   1a18c:	9100      	str	r1, [sp, #0]
   1a18e:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 1a268 <net_addr_ntop+0x1a4>
   1a192:	2100      	movs	r1, #0
   1a194:	4603      	mov	r3, r0
   1a196:	2409      	movs	r4, #9
   1a198:	9101      	str	r1, [sp, #4]
		temp = value / divisor;
   1a19a:	9900      	ldr	r1, [sp, #0]
   1a19c:	fbb1 fefc 	udiv	lr, r1, ip
		value = value % divisor;
   1a1a0:	fb0c 111e 	mls	r1, ip, lr, r1
   1a1a4:	9100      	str	r1, [sp, #0]
		if ((precision > i) || (temp != 0)) {
   1a1a6:	9901      	ldr	r1, [sp, #4]
   1a1a8:	42a1      	cmp	r1, r4
   1a1aa:	dc02      	bgt.n	1a1b2 <net_addr_ntop+0xee>
   1a1ac:	f1be 0f00 	cmp.w	lr, #0
   1a1b0:	d005      	beq.n	1a1be <net_addr_ntop+0xfa>
			*buf++ = (char) (temp + '0');
   1a1b2:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
   1a1b6:	f883 e000 	strb.w	lr, [r3]
   1a1ba:	9401      	str	r4, [sp, #4]
   1a1bc:	3301      	adds	r3, #1
	for (i = 9; i >= 0; i--, divisor /= 10) {
   1a1be:	3c01      	subs	r4, #1
   1a1c0:	210a      	movs	r1, #10
   1a1c2:	fbbc fcf1 	udiv	ip, ip, r1
   1a1c6:	1c61      	adds	r1, r4, #1
   1a1c8:	d1e7      	bne.n	1a19a <net_addr_ntop+0xd6>
	*buf = 0;
   1a1ca:	f04f 0100 	mov.w	r1, #0
   1a1ce:	7019      	strb	r1, [r3, #0]
	return buf - start;
   1a1d0:	1a1b      	subs	r3, r3, r0
			ptr += l;
   1a1d2:	fa50 f383 	uxtab	r3, r0, r3
			*ptr++ = delim;
   1a1d6:	1c58      	adds	r0, r3, #1
   1a1d8:	f883 a000 	strb.w	sl, [r3]
			continue;
   1a1dc:	e7d3      	b.n	1a186 <net_addr_ntop+0xc2>
		if (i == pos) {
   1a1de:	42bd      	cmp	r5, r7
   1a1e0:	d10c      	bne.n	1a1fc <net_addr_ntop+0x138>
			if (needcolon || i == 0) {
   1a1e2:	b902      	cbnz	r2, 1a1e6 <net_addr_ntop+0x122>
   1a1e4:	b915      	cbnz	r5, 1a1ec <net_addr_ntop+0x128>
				*ptr++ = ':';
   1a1e6:	233a      	movs	r3, #58	; 0x3a
   1a1e8:	7003      	strb	r3, [r0, #0]
   1a1ea:	3001      	adds	r0, #1
			*ptr++ = ':';
   1a1ec:	233a      	movs	r3, #58	; 0x3a
   1a1ee:	7003      	strb	r3, [r0, #0]
			i += longest - 1;
   1a1f0:	1e73      	subs	r3, r6, #1
   1a1f2:	441d      	add	r5, r3
   1a1f4:	b2ed      	uxtb	r5, r5
			*ptr++ = ':';
   1a1f6:	3001      	adds	r0, #1
			needcolon = false;
   1a1f8:	2200      	movs	r2, #0
			continue;
   1a1fa:	e7c4      	b.n	1a186 <net_addr_ntop+0xc2>
		if (needcolon) {
   1a1fc:	b112      	cbz	r2, 1a204 <net_addr_ntop+0x140>
			*ptr++ = ':';
   1a1fe:	233a      	movs	r3, #58	; 0x3a
   1a200:	7003      	strb	r3, [r0, #0]
   1a202:	3001      	adds	r0, #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   1a204:	9b03      	ldr	r3, [sp, #12]
   1a206:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   1a20a:	0a1c      	lsrs	r4, r3, #8
   1a20c:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
   1a210:	b224      	sxth	r4, r4
		bh = value >> 8;
   1a212:	f3c4 2307 	ubfx	r3, r4, #8, #8
		bl = value & 0xff;
   1a216:	b2e4      	uxtb	r4, r4
		if (bh) {
   1a218:	b1bb      	cbz	r3, 1a24a <net_addr_ntop+0x186>
			if (bh > 0x0f) {
   1a21a:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   1a21c:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   1a21e:	d90c      	bls.n	1a23a <net_addr_ntop+0x176>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   1a220:	2300      	movs	r3, #0
   1a222:	2261      	movs	r2, #97	; 0x61
   1a224:	f7ff feff 	bl	1a026 <net_byte_to_hex>
   1a228:	4686      	mov	lr, r0
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   1a22a:	2301      	movs	r3, #1
   1a22c:	2261      	movs	r2, #97	; 0x61
   1a22e:	4621      	mov	r1, r4
   1a230:	4670      	mov	r0, lr
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   1a232:	f7ff fef8 	bl	1a026 <net_byte_to_hex>
		needcolon = true;
   1a236:	2201      	movs	r2, #1
   1a238:	e7a5      	b.n	1a186 <net_addr_ntop+0xc2>
				if (bh < 10) {
   1a23a:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   1a23c:	bf94      	ite	ls
   1a23e:	3130      	addls	r1, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   1a240:	3157      	addhi	r1, #87	; 0x57
   1a242:	f100 0e01 	add.w	lr, r0, #1
   1a246:	7001      	strb	r1, [r0, #0]
   1a248:	e7ef      	b.n	1a22a <net_addr_ntop+0x166>
		} else if (bl > 0x0f) {
   1a24a:	2c0f      	cmp	r4, #15
   1a24c:	d902      	bls.n	1a254 <net_addr_ntop+0x190>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   1a24e:	2261      	movs	r2, #97	; 0x61
   1a250:	4621      	mov	r1, r4
   1a252:	e7ee      	b.n	1a232 <net_addr_ntop+0x16e>
			if (bl < 10) {
   1a254:	2c09      	cmp	r4, #9
   1a256:	f100 0301 	add.w	r3, r0, #1
				*ptr++ = (char)(bl + '0');
   1a25a:	bf94      	ite	ls
   1a25c:	3430      	addls	r4, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   1a25e:	3457      	addhi	r4, #87	; 0x57
   1a260:	7004      	strb	r4, [r0, #0]
   1a262:	4618      	mov	r0, r3
   1a264:	e7e7      	b.n	1a236 <net_addr_ntop+0x172>
   1a266:	bf00      	nop
   1a268:	3b9aca00 	.word	0x3b9aca00

0001a26c <net_addr_pton>:
	if (family == AF_INET) {
   1a26c:	2802      	cmp	r0, #2
{
   1a26e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1a270:	460c      	mov	r4, r1
   1a272:	4615      	mov	r5, r2
	if (family == AF_INET) {
   1a274:	d127      	bne.n	1a2c6 <net_addr_pton+0x5a>
		len = strlen(src);
   1a276:	4608      	mov	r0, r1
   1a278:	f7e6 fa42 	bl	700 <strlen>
   1a27c:	4623      	mov	r3, r4
   1a27e:	4420      	add	r0, r4
		for (i = 0; i < len; i++) {
   1a280:	4283      	cmp	r3, r0
   1a282:	d114      	bne.n	1a2ae <net_addr_pton+0x42>
		memset(addr, 0, sizeof(struct in_addr));
   1a284:	4628      	mov	r0, r5
   1a286:	2204      	movs	r2, #4
   1a288:	2100      	movs	r1, #0
   1a28a:	f7e6 fac3 	bl	814 <memset>
   1a28e:	1e6e      	subs	r6, r5, #1
   1a290:	3503      	adds	r5, #3
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1a292:	4620      	mov	r0, r4
   1a294:	220a      	movs	r2, #10
   1a296:	a901      	add	r1, sp, #4
   1a298:	f7e6 f982 	bl	5a0 <strtol>
   1a29c:	f806 0f01 	strb.w	r0, [r6, #1]!
			src = ++endptr;
   1a2a0:	9c01      	ldr	r4, [sp, #4]
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1a2a2:	42b5      	cmp	r5, r6
			src = ++endptr;
   1a2a4:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1a2a8:	d1f3      	bne.n	1a292 <net_addr_pton+0x26>
	return 0;
   1a2aa:	2000      	movs	r0, #0
   1a2ac:	e009      	b.n	1a2c2 <net_addr_pton+0x56>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1a2ae:	f813 2b01 	ldrb.w	r2, [r3], #1
   1a2b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1a2b6:	2909      	cmp	r1, #9
   1a2b8:	d9e2      	bls.n	1a280 <net_addr_pton+0x14>
   1a2ba:	2a2e      	cmp	r2, #46	; 0x2e
   1a2bc:	d0e0      	beq.n	1a280 <net_addr_pton+0x14>
				return -EINVAL;
   1a2be:	f06f 0015 	mvn.w	r0, #21
}
   1a2c2:	b002      	add	sp, #8
   1a2c4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (family == AF_INET6) {
   1a2c6:	280a      	cmp	r0, #10
   1a2c8:	d1f9      	bne.n	1a2be <net_addr_pton+0x52>
   1a2ca:	4611      	mov	r1, r2
   1a2cc:	4620      	mov	r0, r4
   1a2ce:	f7ff fe15 	bl	19efc <net_addr_pton.part.4>
   1a2d2:	e7f6      	b.n	1a2c2 <net_addr_pton+0x56>

0001a2d4 <net_calc_chksum>:

	return sum;
}

u16_t net_calc_chksum(struct net_pkt *pkt, u8_t proto)
{
   1a2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	return pkt->family;
   1a2d6:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
	u16_t upper_layer_len;
	u16_t sum = 0;

	switch (net_pkt_family(pkt)) {
   1a2da:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1a2de:	2b0a      	cmp	r3, #10
{
   1a2e0:	b085      	sub	sp, #20
   1a2e2:	4605      	mov	r5, r0
	switch (net_pkt_family(pkt)) {
   1a2e4:	d144      	bne.n	1a370 <net_calc_chksum+0x9c>
   1a2e6:	6886      	ldr	r6, [r0, #8]
		break;
#endif
#if defined(CONFIG_NET_IPV6)
	case AF_INET6:
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
			NET_IPV6_HDR(pkt)->len[1] - net_pkt_ipv6_ext_len(pkt);
   1a2e8:	f890 7039 	ldrb.w	r7, [r0, #57]	; 0x39
	return pkt->frags->data;
   1a2ec:	68b3      	ldr	r3, [r6, #8]
   1a2ee:	7958      	ldrb	r0, [r3, #5]
		sum = calc_chksum(upper_layer_len + proto,
   1a2f0:	1bc9      	subs	r1, r1, r7
   1a2f2:	4408      	add	r0, r1
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1a2f4:	7919      	ldrb	r1, [r3, #4]
		sum = calc_chksum(upper_layer_len + proto,
   1a2f6:	eb00 2001 	add.w	r0, r0, r1, lsl #8
   1a2fa:	2220      	movs	r2, #32
   1a2fc:	f103 0108 	add.w	r1, r3, #8
   1a300:	b280      	uxth	r0, r0
   1a302:	f7ff fddf 	bl	19ec4 <calc_chksum>
	u16_t proto_len = net_pkt_ip_hdr_len(pkt) +
   1a306:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
	return net_frag_read(frag, offset, pos, len, NULL);
   1a30a:	2300      	movs	r3, #0
		sum = calc_chksum(upper_layer_len + proto,
   1a30c:	4604      	mov	r4, r0
   1a30e:	9300      	str	r3, [sp, #0]
   1a310:	4630      	mov	r0, r6
   1a312:	f10d 020e 	add.w	r2, sp, #14
   1a316:	4439      	add	r1, r7
   1a318:	f7ff fc9e 	bl	19c58 <net_frag_read>
	if (!frag) {
   1a31c:	4606      	mov	r6, r0
   1a31e:	b348      	cbz	r0, 1a374 <net_calc_chksum+0xa0>
	ptr = frag->data + offset;
   1a320:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	len = frag->len - offset;
   1a324:	8982      	ldrh	r2, [r0, #12]
	ptr = frag->data + offset;
   1a326:	6881      	ldr	r1, [r0, #8]
	len = frag->len - offset;
   1a328:	1ad2      	subs	r2, r2, r3
	ptr = frag->data + offset;
   1a32a:	4419      	add	r1, r3
	len = frag->len - offset;
   1a32c:	b212      	sxth	r2, r2
		sum = calc_chksum(sum, ptr, len);
   1a32e:	b295      	uxth	r5, r2
   1a330:	4620      	mov	r0, r4
   1a332:	462a      	mov	r2, r5
   1a334:	f7ff fdc6 	bl	19ec4 <calc_chksum>
		frag = frag->frags;
   1a338:	6836      	ldr	r6, [r6, #0]
		sum = calc_chksum(sum, ptr, len);
   1a33a:	4604      	mov	r4, r0
		if (!frag) {
   1a33c:	b926      	cbnz	r6, 1a348 <net_calc_chksum+0x74>
		return 0;
	}

	sum = calc_chksum_pkt(sum, pkt, upper_layer_len);

	sum = (sum == 0) ? 0xffff : htons(sum);
   1a33e:	b1c8      	cbz	r0, 1a374 <net_calc_chksum+0xa0>
   1a340:	ba40      	rev16	r0, r0
   1a342:	b280      	uxth	r0, r0

	return sum;
}
   1a344:	b005      	add	sp, #20
   1a346:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (len % 2) {
   1a348:	07eb      	lsls	r3, r5, #31
		ptr = frag->data;
   1a34a:	68b1      	ldr	r1, [r6, #8]
		if (len % 2) {
   1a34c:	d50d      	bpl.n	1a36a <net_calc_chksum+0x96>
			u16_t tmp = *ptr;
   1a34e:	780b      	ldrb	r3, [r1, #0]
			len = frag->len - 1;
   1a350:	89b2      	ldrh	r2, [r6, #12]
			sum += tmp;
   1a352:	441c      	add	r4, r3
   1a354:	b2a4      	uxth	r4, r4
			if (sum < tmp) {
   1a356:	42a3      	cmp	r3, r4
				sum++;
   1a358:	bf88      	it	hi
   1a35a:	3401      	addhi	r4, #1
			len = frag->len - 1;
   1a35c:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
				sum++;
   1a360:	bf88      	it	hi
   1a362:	b2a4      	uxthhi	r4, r4
			len = frag->len - 1;
   1a364:	b212      	sxth	r2, r2
			ptr++;
   1a366:	3101      	adds	r1, #1
   1a368:	e7e1      	b.n	1a32e <net_calc_chksum+0x5a>
			len = frag->len;
   1a36a:	f9b6 200c 	ldrsh.w	r2, [r6, #12]
   1a36e:	e7de      	b.n	1a32e <net_calc_chksum+0x5a>
		return 0;
   1a370:	2000      	movs	r0, #0
   1a372:	e7e7      	b.n	1a344 <net_calc_chksum+0x70>
	sum = (sum == 0) ? 0xffff : htons(sum);
   1a374:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1a378:	e7e4      	b.n	1a344 <net_calc_chksum+0x70>

0001a37a <net_header_fits>:
 * memory area. The start of the said area must be inside the first
 * fragment. This helper is used when checking whether various protocol
 * headers are split between two fragments.
 */
bool net_header_fits(struct net_pkt *pkt, u8_t *hdr, size_t hdr_size)
{
   1a37a:	b510      	push	{r4, lr}
	if (hdr && hdr > pkt->frags->data &&
   1a37c:	b159      	cbz	r1, 1a396 <net_header_fits+0x1c>
   1a37e:	6884      	ldr	r4, [r0, #8]
   1a380:	68a3      	ldr	r3, [r4, #8]
   1a382:	4299      	cmp	r1, r3
   1a384:	d907      	bls.n	1a396 <net_header_fits+0x1c>
	    (hdr + hdr_size) <= (pkt->frags->data + pkt->frags->len)) {
   1a386:	89a0      	ldrh	r0, [r4, #12]
   1a388:	4411      	add	r1, r2
   1a38a:	4418      	add	r0, r3
	if (hdr && hdr > pkt->frags->data &&
   1a38c:	4281      	cmp	r1, r0
   1a38e:	bf8c      	ite	hi
   1a390:	2000      	movhi	r0, #0
   1a392:	2001      	movls	r0, #1
   1a394:	bd10      	pop	{r4, pc}
		return true;
	}

	return false;
   1a396:	2000      	movs	r0, #0
}
   1a398:	bd10      	pop	{r4, pc}

0001a39a <net_ipv6_addr_create_iid>:
{
   1a39a:	b570      	push	{r4, r5, r6, lr}
	addr->s6_addr[1] = 0x80;
   1a39c:	2380      	movs	r3, #128	; 0x80
   1a39e:	7043      	strb	r3, [r0, #1]
	addr->s6_addr[0] = 0xfe;
   1a3a0:	26fe      	movs	r6, #254	; 0xfe
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1a3a2:	2300      	movs	r3, #0
	addr->s6_addr[0] = 0xfe;
   1a3a4:	7006      	strb	r6, [r0, #0]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1a3a6:	7083      	strb	r3, [r0, #2]
   1a3a8:	70c3      	strb	r3, [r0, #3]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1a3aa:	7103      	strb	r3, [r0, #4]
   1a3ac:	7143      	strb	r3, [r0, #5]
   1a3ae:	7183      	strb	r3, [r0, #6]
   1a3b0:	71c3      	strb	r3, [r0, #7]
	switch (lladdr->len) {
   1a3b2:	790a      	ldrb	r2, [r1, #4]
   1a3b4:	2a06      	cmp	r2, #6
{
   1a3b6:	4604      	mov	r4, r0
   1a3b8:	460d      	mov	r5, r1
	switch (lladdr->len) {
   1a3ba:	d013      	beq.n	1a3e4 <net_ipv6_addr_create_iid+0x4a>
   1a3bc:	2a08      	cmp	r2, #8
   1a3be:	d028      	beq.n	1a412 <net_ipv6_addr_create_iid+0x78>
   1a3c0:	2a02      	cmp	r2, #2
   1a3c2:	d125      	bne.n	1a410 <net_ipv6_addr_create_iid+0x76>
		if (lladdr->type == NET_LINK_IEEE802154) {
   1a3c4:	794a      	ldrb	r2, [r1, #5]
   1a3c6:	2a01      	cmp	r2, #1
   1a3c8:	d122      	bne.n	1a410 <net_ipv6_addr_create_iid+0x76>
			addr->s6_addr[11] = 0xff;
   1a3ca:	22ff      	movs	r2, #255	; 0xff
   1a3cc:	72c2      	strb	r2, [r0, #11]
			addr->s6_addr[12] = 0xfe;
   1a3ce:	7306      	strb	r6, [r0, #12]
			addr->s6_addr[13] = 0;
   1a3d0:	7343      	strb	r3, [r0, #13]
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   1a3d2:	7203      	strb	r3, [r0, #8]
   1a3d4:	7243      	strb	r3, [r0, #9]
   1a3d6:	7283      	strb	r3, [r0, #10]
			addr->s6_addr[14] = lladdr->addr[0];
   1a3d8:	680b      	ldr	r3, [r1, #0]
   1a3da:	781a      	ldrb	r2, [r3, #0]
   1a3dc:	7382      	strb	r2, [r0, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   1a3de:	785b      	ldrb	r3, [r3, #1]
   1a3e0:	73c3      	strb	r3, [r0, #15]
   1a3e2:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1a3e4:	2203      	movs	r2, #3
   1a3e6:	6809      	ldr	r1, [r1, #0]
   1a3e8:	3008      	adds	r0, #8
   1a3ea:	f7e6 f9e7 	bl	7bc <memcpy>
		addr->s6_addr[11] = 0xff;
   1a3ee:	23ff      	movs	r3, #255	; 0xff
   1a3f0:	72e3      	strb	r3, [r4, #11]
		addr->s6_addr[12] = 0xfe;
   1a3f2:	7326      	strb	r6, [r4, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1a3f4:	6829      	ldr	r1, [r5, #0]
   1a3f6:	2203      	movs	r2, #3
   1a3f8:	4411      	add	r1, r2
   1a3fa:	f104 000d 	add.w	r0, r4, #13
   1a3fe:	f7e6 f9dd 	bl	7bc <memcpy>
		if (lladdr->type == NET_LINK_ETHERNET) {
   1a402:	796b      	ldrb	r3, [r5, #5]
   1a404:	2b03      	cmp	r3, #3
   1a406:	d103      	bne.n	1a410 <net_ipv6_addr_create_iid+0x76>
		addr->s6_addr[8] ^= 0x02;
   1a408:	7a23      	ldrb	r3, [r4, #8]
   1a40a:	f083 0302 	eor.w	r3, r3, #2
   1a40e:	7223      	strb	r3, [r4, #8]
   1a410:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   1a412:	6809      	ldr	r1, [r1, #0]
   1a414:	3008      	adds	r0, #8
   1a416:	f7e6 f9d1 	bl	7bc <memcpy>
   1a41a:	e7f5      	b.n	1a408 <net_ipv6_addr_create_iid+0x6e>

0001a41c <net_ipv6_addr_based_on_ll>:
 *
 *  @return True if it is, False otherwise
 */
static inline bool net_ipv6_addr_based_on_ll(const struct in6_addr *addr,
					     const struct net_linkaddr *lladdr)
{
   1a41c:	b570      	push	{r4, r5, r6, lr}
   1a41e:	460d      	mov	r5, r1
	if (!addr || !lladdr) {
   1a420:	4604      	mov	r4, r0
   1a422:	b908      	cbnz	r0, 1a428 <net_ipv6_addr_based_on_ll+0xc>
		}

		break;
	}

	return false;
   1a424:	2000      	movs	r0, #0
}
   1a426:	bd70      	pop	{r4, r5, r6, pc}
	if (!addr || !lladdr) {
   1a428:	2900      	cmp	r1, #0
   1a42a:	d0fb      	beq.n	1a424 <net_ipv6_addr_based_on_ll+0x8>
	switch (lladdr->len) {
   1a42c:	790a      	ldrb	r2, [r1, #4]
   1a42e:	2a06      	cmp	r2, #6
   1a430:	d013      	beq.n	1a45a <net_ipv6_addr_based_on_ll+0x3e>
   1a432:	2a08      	cmp	r2, #8
   1a434:	d048      	beq.n	1a4c8 <net_ipv6_addr_based_on_ll+0xac>
   1a436:	2a02      	cmp	r2, #2
   1a438:	d1f4      	bne.n	1a424 <net_ipv6_addr_based_on_ll+0x8>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   1a43a:	6809      	ldr	r1, [r1, #0]
   1a43c:	300e      	adds	r0, #14
   1a43e:	f7e6 f990 	bl	762 <memcmp>
   1a442:	2800      	cmp	r0, #0
   1a444:	d1ee      	bne.n	1a424 <net_ipv6_addr_based_on_ll+0x8>
		    addr->s6_addr[10] == 0 &&
   1a446:	68a3      	ldr	r3, [r4, #8]
   1a448:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   1a44c:	d1ea      	bne.n	1a424 <net_ipv6_addr_based_on_ll+0x8>
			    addr->s6_addr[11] == 0xff &&
   1a44e:	7b20      	ldrb	r0, [r4, #12]
   1a450:	28fe      	cmp	r0, #254	; 0xfe
			    lladdr->len - 1) &&
   1a452:	bf14      	ite	ne
   1a454:	2000      	movne	r0, #0
   1a456:	2001      	moveq	r0, #1
   1a458:	bd70      	pop	{r4, r5, r6, pc}
		if (lladdr->type == NET_LINK_ETHERNET) {
   1a45a:	794e      	ldrb	r6, [r1, #5]
   1a45c:	2e03      	cmp	r6, #3
   1a45e:	d11d      	bne.n	1a49c <net_ipv6_addr_based_on_ll+0x80>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   1a460:	6809      	ldr	r1, [r1, #0]
   1a462:	2202      	movs	r2, #2
   1a464:	3101      	adds	r1, #1
   1a466:	3009      	adds	r0, #9
   1a468:	f7e6 f97b 	bl	762 <memcmp>
   1a46c:	2800      	cmp	r0, #0
   1a46e:	d1d9      	bne.n	1a424 <net_ipv6_addr_based_on_ll+0x8>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   1a470:	6829      	ldr	r1, [r5, #0]
   1a472:	4632      	mov	r2, r6
   1a474:	3103      	adds	r1, #3
   1a476:	f104 000d 	add.w	r0, r4, #13
   1a47a:	f7e6 f972 	bl	762 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   1a47e:	2800      	cmp	r0, #0
   1a480:	d1d0      	bne.n	1a424 <net_ipv6_addr_based_on_ll+0x8>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   1a482:	7ae3      	ldrb	r3, [r4, #11]
   1a484:	2bff      	cmp	r3, #255	; 0xff
   1a486:	d1cd      	bne.n	1a424 <net_ipv6_addr_based_on_ll+0x8>
			    addr->s6_addr[11] == 0xff &&
   1a488:	7b23      	ldrb	r3, [r4, #12]
   1a48a:	2bfe      	cmp	r3, #254	; 0xfe
   1a48c:	d1ca      	bne.n	1a424 <net_ipv6_addr_based_on_ll+0x8>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   1a48e:	682a      	ldr	r2, [r5, #0]
   1a490:	7a23      	ldrb	r3, [r4, #8]
			    lladdr->len - 1) &&
   1a492:	7810      	ldrb	r0, [r2, #0]
   1a494:	f083 0302 	eor.w	r3, r3, #2
   1a498:	4298      	cmp	r0, r3
   1a49a:	e7da      	b.n	1a452 <net_ipv6_addr_based_on_ll+0x36>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   1a49c:	2e02      	cmp	r6, #2
   1a49e:	d1c1      	bne.n	1a424 <net_ipv6_addr_based_on_ll+0x8>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   1a4a0:	6809      	ldr	r1, [r1, #0]
   1a4a2:	4632      	mov	r2, r6
   1a4a4:	3101      	adds	r1, #1
   1a4a6:	3009      	adds	r0, #9
   1a4a8:	f7e6 f95b 	bl	762 <memcmp>
   1a4ac:	2800      	cmp	r0, #0
   1a4ae:	d1b9      	bne.n	1a424 <net_ipv6_addr_based_on_ll+0x8>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   1a4b0:	6829      	ldr	r1, [r5, #0]
   1a4b2:	2203      	movs	r2, #3
   1a4b4:	4411      	add	r1, r2
   1a4b6:	f104 000d 	add.w	r0, r4, #13
   1a4ba:	f7e6 f952 	bl	762 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   1a4be:	2800      	cmp	r0, #0
   1a4c0:	d1b0      	bne.n	1a424 <net_ipv6_addr_based_on_ll+0x8>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   1a4c2:	7ae3      	ldrb	r3, [r4, #11]
   1a4c4:	2bff      	cmp	r3, #255	; 0xff
   1a4c6:	e7c1      	b.n	1a44c <net_ipv6_addr_based_on_ll+0x30>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   1a4c8:	6809      	ldr	r1, [r1, #0]
   1a4ca:	2207      	movs	r2, #7
   1a4cc:	3101      	adds	r1, #1
   1a4ce:	3009      	adds	r0, #9
   1a4d0:	f7e6 f947 	bl	762 <memcmp>
   1a4d4:	2800      	cmp	r0, #0
   1a4d6:	d0da      	beq.n	1a48e <net_ipv6_addr_based_on_ll+0x72>
   1a4d8:	e7a4      	b.n	1a424 <net_ipv6_addr_based_on_ll+0x8>

0001a4da <net_6lo_compress>:
	return true;
}

bool net_6lo_compress(struct net_pkt *pkt, bool iphc,
		      fragment_handler_t fragment)
{
   1a4da:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1a4de:	4607      	mov	r7, r0
   1a4e0:	4691      	mov	r9, r2
	if (iphc) {
   1a4e2:	2900      	cmp	r1, #0
   1a4e4:	f000 81d2 	beq.w	1a88c <net_6lo_compress+0x3b2>
   1a4e8:	6882      	ldr	r2, [r0, #8]
	if (pkt->frags->len < NET_IPV6H_LEN) {
   1a4ea:	8993      	ldrh	r3, [r2, #12]
   1a4ec:	2b27      	cmp	r3, #39	; 0x27
   1a4ee:	d803      	bhi.n	1a4f8 <net_6lo_compress+0x1e>
		return false;
   1a4f0:	2000      	movs	r0, #0
		return compress_IPHC_header(pkt, fragment);
	} else {
		return compress_ipv6_header(pkt, fragment);
	}
}
   1a4f2:	b003      	add	sp, #12
   1a4f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return pkt->frags->data;
   1a4f8:	6895      	ldr	r5, [r2, #8]
	if (ipv6->nexthdr == IPPROTO_UDP &&
   1a4fa:	79aa      	ldrb	r2, [r5, #6]
   1a4fc:	2a11      	cmp	r2, #17
   1a4fe:	d101      	bne.n	1a504 <net_6lo_compress+0x2a>
   1a500:	2b2f      	cmp	r3, #47	; 0x2f
   1a502:	d9f5      	bls.n	1a4f0 <net_6lo_compress+0x16>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   1a504:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a508:	4638      	mov	r0, r7
   1a50a:	f7ff fa33 	bl	19974 <net_pkt_get_frag>
	if (!frag) {
   1a50e:	4606      	mov	r6, r0
   1a510:	2800      	cmp	r0, #0
   1a512:	d0ed      	beq.n	1a4f0 <net_6lo_compress+0x16>
	IPHC[offset++] = NET_6LO_DISPATCH_IPHC;
   1a514:	6883      	ldr	r3, [r0, #8]
   1a516:	2260      	movs	r2, #96	; 0x60
   1a518:	701a      	strb	r2, [r3, #0]
	IPHC[offset++] = 0;
   1a51a:	6883      	ldr	r3, [r0, #8]
   1a51c:	2200      	movs	r2, #0
   1a51e:	705a      	strb	r2, [r3, #1]
	tcl = ((ipv6->vtc & 0x0F) << 4) | ((ipv6->tcflow & 0xF0) >> 4);
   1a520:	786c      	ldrb	r4, [r5, #1]
   1a522:	782a      	ldrb	r2, [r5, #0]
   1a524:	0923      	lsrs	r3, r4, #4
   1a526:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   1a52a:	b2db      	uxtb	r3, r3
	tcl = (tcl << 6) | (tcl >> 2);   /* ECN(2), DSCP(6) */
   1a52c:	0898      	lsrs	r0, r3, #2
   1a52e:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
   1a532:	b240      	sxtb	r0, r0
	if (((ipv6->tcflow & 0x0F) == 0) && (ipv6->flow == 0)) {
   1a534:	f014 0f0f 	tst.w	r4, #15
	tcl = (tcl << 6) | (tcl >> 2);   /* ECN(2), DSCP(6) */
   1a538:	fa5f fe80 	uxtb.w	lr, r0
   1a53c:	f002 020f 	and.w	r2, r2, #15
   1a540:	68b3      	ldr	r3, [r6, #8]
	if (((ipv6->tcflow & 0x0F) == 0) && (ipv6->flow == 0)) {
   1a542:	d145      	bne.n	1a5d0 <net_6lo_compress+0xf6>
   1a544:	8869      	ldrh	r1, [r5, #2]
   1a546:	2900      	cmp	r1, #0
   1a548:	d142      	bne.n	1a5d0 <net_6lo_compress+0xf6>
		if (((ipv6->vtc & 0x0F) == 0) && ((ipv6->tcflow & 0xF0) == 0)) {
   1a54a:	2a00      	cmp	r2, #0
   1a54c:	d137      	bne.n	1a5be <net_6lo_compress+0xe4>
   1a54e:	f014 0ff0 	tst.w	r4, #240	; 0xf0
   1a552:	d134      	bne.n	1a5be <net_6lo_compress+0xe4>
			IPHC[0] |= NET_6LO_IPHC_TF_11;
   1a554:	781a      	ldrb	r2, [r3, #0]
   1a556:	f042 0218 	orr.w	r2, r2, #24
   1a55a:	701a      	strb	r2, [r3, #0]
   1a55c:	2402      	movs	r4, #2
   1a55e:	79aa      	ldrb	r2, [r5, #6]
   1a560:	68b3      	ldr	r3, [r6, #8]
	if (ipv6->nexthdr == IPPROTO_UDP) {
   1a562:	2a11      	cmp	r2, #17
		IPHC[0] |= NET_6LO_IPHC_NH_1;
   1a564:	bf09      	itett	eq
   1a566:	781a      	ldrbeq	r2, [r3, #0]
		IPHC[offset++] = ipv6->nexthdr;
   1a568:	551a      	strbne	r2, [r3, r4]
		IPHC[0] |= NET_6LO_IPHC_NH_1;
   1a56a:	f042 0204 	orreq.w	r2, r2, #4
   1a56e:	701a      	strbeq	r2, [r3, #0]
   1a570:	79ea      	ldrb	r2, [r5, #7]
   1a572:	68b3      	ldr	r3, [r6, #8]
		IPHC[offset++] = ipv6->nexthdr;
   1a574:	bf1c      	itt	ne
   1a576:	1c61      	addne	r1, r4, #1
   1a578:	b2cc      	uxtbne	r4, r1
	switch (ipv6->hop_limit) {
   1a57a:	2a40      	cmp	r2, #64	; 0x40
   1a57c:	d04e      	beq.n	1a61c <net_6lo_compress+0x142>
   1a57e:	2aff      	cmp	r2, #255	; 0xff
   1a580:	d050      	beq.n	1a624 <net_6lo_compress+0x14a>
   1a582:	2a01      	cmp	r2, #1
   1a584:	d152      	bne.n	1a62c <net_6lo_compress+0x152>
		IPHC[0] |= NET_6LO_IPHC_HLIM1;
   1a586:	781a      	ldrb	r2, [r3, #0]
   1a588:	f042 0201 	orr.w	r2, r2, #1
		IPHC[0] |= NET_6LO_IPHC_HLIM64;
   1a58c:	701a      	strb	r2, [r3, #0]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1a58e:	68ab      	ldr	r3, [r5, #8]
	if (net_is_ipv6_addr_unspecified(&ipv6->src)) {
   1a590:	f105 0008 	add.w	r0, r5, #8
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a594:	2b00      	cmp	r3, #0
   1a596:	f040 8195 	bne.w	1a8c4 <net_6lo_compress+0x3ea>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1a59a:	68eb      	ldr	r3, [r5, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1a59c:	2b00      	cmp	r3, #0
   1a59e:	f040 8191 	bne.w	1a8c4 <net_6lo_compress+0x3ea>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a5a2:	692b      	ldr	r3, [r5, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1a5a4:	2b00      	cmp	r3, #0
   1a5a6:	f040 818d 	bne.w	1a8c4 <net_6lo_compress+0x3ea>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1a5aa:	696b      	ldr	r3, [r5, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a5ac:	2b00      	cmp	r3, #0
   1a5ae:	f040 8189 	bne.w	1a8c4 <net_6lo_compress+0x3ea>
		IPHC[1] |= NET_6LO_IPHC_SAC_1;
   1a5b2:	68b2      	ldr	r2, [r6, #8]
   1a5b4:	7853      	ldrb	r3, [r2, #1]
   1a5b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a5ba:	7053      	strb	r3, [r2, #1]
   1a5bc:	e050      	b.n	1a660 <net_6lo_compress+0x186>
			IPHC[0] |= NET_6LO_IPHC_TF_10;
   1a5be:	781a      	ldrb	r2, [r3, #0]
   1a5c0:	f042 0210 	orr.w	r2, r2, #16
   1a5c4:	701a      	strb	r2, [r3, #0]
			IPHC[offset++] = tcl;
   1a5c6:	68b3      	ldr	r3, [r6, #8]
   1a5c8:	2403      	movs	r4, #3
   1a5ca:	f883 e002 	strb.w	lr, [r3, #2]
   1a5ce:	e7c6      	b.n	1a55e <net_6lo_compress+0x84>
   1a5d0:	1ca9      	adds	r1, r5, #2
		if (((ipv6->vtc & 0x0F) == 0) && (ipv6->tcflow & 0x30)) {
   1a5d2:	b9aa      	cbnz	r2, 1a600 <net_6lo_compress+0x126>
   1a5d4:	f014 0f30 	tst.w	r4, #48	; 0x30
   1a5d8:	d012      	beq.n	1a600 <net_6lo_compress+0x126>
			IPHC[0] |= NET_6LO_IPHC_TF_01;
   1a5da:	781a      	ldrb	r2, [r3, #0]
   1a5dc:	f042 0208 	orr.w	r2, r2, #8
   1a5e0:	701a      	strb	r2, [r3, #0]
			IPHC[offset++] = (tcl & 0xC0) | (ipv6->tcflow & 0x0F);
   1a5e2:	786b      	ldrb	r3, [r5, #1]
   1a5e4:	68b2      	ldr	r2, [r6, #8]
   1a5e6:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
   1a5ea:	f003 030f 	and.w	r3, r3, #15
   1a5ee:	4303      	orrs	r3, r0
   1a5f0:	7093      	strb	r3, [r2, #2]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   1a5f2:	68b0      	ldr	r0, [r6, #8]
   1a5f4:	2202      	movs	r2, #2
   1a5f6:	3003      	adds	r0, #3
   1a5f8:	f7e6 f8e0 	bl	7bc <memcpy>
			offset += 2;
   1a5fc:	2405      	movs	r4, #5
   1a5fe:	e7ae      	b.n	1a55e <net_6lo_compress+0x84>
			IPHC[offset++] = tcl;
   1a600:	f883 e002 	strb.w	lr, [r3, #2]
			IPHC[offset++] = ipv6->tcflow & 0x0F;
   1a604:	786b      	ldrb	r3, [r5, #1]
   1a606:	68b2      	ldr	r2, [r6, #8]
   1a608:	f003 030f 	and.w	r3, r3, #15
   1a60c:	70d3      	strb	r3, [r2, #3]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   1a60e:	68b0      	ldr	r0, [r6, #8]
   1a610:	2202      	movs	r2, #2
   1a612:	3004      	adds	r0, #4
   1a614:	f7e6 f8d2 	bl	7bc <memcpy>
			offset += 2;
   1a618:	2406      	movs	r4, #6
   1a61a:	e7a0      	b.n	1a55e <net_6lo_compress+0x84>
		IPHC[0] |= NET_6LO_IPHC_HLIM64;
   1a61c:	781a      	ldrb	r2, [r3, #0]
   1a61e:	f042 0202 	orr.w	r2, r2, #2
   1a622:	e7b3      	b.n	1a58c <net_6lo_compress+0xb2>
		IPHC[0] |= NET_6LO_IPHC_HLIM255;
   1a624:	781a      	ldrb	r2, [r3, #0]
   1a626:	f042 0203 	orr.w	r2, r2, #3
   1a62a:	e7af      	b.n	1a58c <net_6lo_compress+0xb2>
		IPHC[offset++] = ipv6->hop_limit;
   1a62c:	1c61      	adds	r1, r4, #1
   1a62e:	551a      	strb	r2, [r3, r4]
   1a630:	b2cc      	uxtb	r4, r1
   1a632:	e7ac      	b.n	1a58e <net_6lo_compress+0xb4>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   1a634:	8aab      	ldrh	r3, [r5, #20]
   1a636:	2bfe      	cmp	r3, #254	; 0xfe
   1a638:	f040 8157 	bne.w	1a8ea <net_6lo_compress+0x410>
			IPHC[1] |= NET_6LO_IPHC_SAM_10;
   1a63c:	68b2      	ldr	r2, [r6, #8]
   1a63e:	7853      	ldrb	r3, [r2, #1]
   1a640:	f043 0320 	orr.w	r3, r3, #32
   1a644:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->src.s6_addr[14], 2);
   1a646:	68b0      	ldr	r0, [r6, #8]
   1a648:	2202      	movs	r2, #2
   1a64a:	4420      	add	r0, r4
   1a64c:	f105 0116 	add.w	r1, r5, #22
   1a650:	f7e6 f8b4 	bl	7bc <memcpy>
			offset += 2;
   1a654:	3402      	adds	r4, #2
   1a656:	e15c      	b.n	1a912 <net_6lo_compress+0x438>
				IPHC[1] |= NET_6LO_IPHC_SAM_11;
   1a658:	785a      	ldrb	r2, [r3, #1]
   1a65a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   1a65e:	705a      	strb	r2, [r3, #1]
	if (net_is_ipv6_addr_mcast(&ipv6->dst)) {
   1a660:	7e2b      	ldrb	r3, [r5, #24]
   1a662:	2bff      	cmp	r3, #255	; 0xff
   1a664:	d12f      	bne.n	1a6c6 <net_6lo_compress+0x1ec>
	IPHC[1] |= NET_6LO_IPHC_M_1;
   1a666:	68b2      	ldr	r2, [r6, #8]
   1a668:	7853      	ldrb	r3, [r2, #1]
   1a66a:	f043 0308 	orr.w	r3, r3, #8
   1a66e:	7053      	strb	r3, [r2, #1]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   1a670:	7e6b      	ldrb	r3, [r5, #25]
   1a672:	68b0      	ldr	r0, [r6, #8]
   1a674:	2b02      	cmp	r3, #2
   1a676:	f040 8154 	bne.w	1a922 <net_6lo_compress+0x448>
	return ((addr->s6_addr[1] == 0x02) &&
   1a67a:	8b6b      	ldrh	r3, [r5, #26]
   1a67c:	2b00      	cmp	r3, #0
   1a67e:	f040 8150 	bne.w	1a922 <net_6lo_compress+0x448>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   1a682:	69eb      	ldr	r3, [r5, #28]
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   1a684:	2b00      	cmp	r3, #0
   1a686:	f040 814c 	bne.w	1a922 <net_6lo_compress+0x448>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   1a68a:	6a2b      	ldr	r3, [r5, #32]
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   1a68c:	2b00      	cmp	r3, #0
   1a68e:	f040 8148 	bne.w	1a922 <net_6lo_compress+0x448>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   1a692:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   1a696:	2b00      	cmp	r3, #0
   1a698:	f040 8143 	bne.w	1a922 <net_6lo_compress+0x448>
		IPHC[1] |= NET_6LO_IPHC_DAM_11;
   1a69c:	7843      	ldrb	r3, [r0, #1]
   1a69e:	f043 0303 	orr.w	r3, r3, #3
   1a6a2:	7043      	strb	r3, [r0, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[15], 1);
   1a6a4:	68b0      	ldr	r0, [r6, #8]
   1a6a6:	2201      	movs	r2, #1
   1a6a8:	4420      	add	r0, r4
   1a6aa:	f105 0127 	add.w	r1, r5, #39	; 0x27
   1a6ae:	f7e6 f885 	bl	7bc <memcpy>
		offset++;
   1a6b2:	3401      	adds	r4, #1
   1a6b4:	e189      	b.n	1a9ca <net_6lo_compress+0x4f0>
		memcpy(&IPHC[offset], ipv6->src.s6_addr,
   1a6b6:	68b3      	ldr	r3, [r6, #8]
   1a6b8:	4601      	mov	r1, r0
   1a6ba:	2210      	movs	r2, #16
   1a6bc:	1918      	adds	r0, r3, r4
   1a6be:	f7e6 f87d 	bl	7bc <memcpy>
		offset += sizeof(struct in6_addr);
   1a6c2:	3410      	adds	r4, #16
   1a6c4:	e125      	b.n	1a912 <net_6lo_compress+0x438>
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   1a6c6:	8b2a      	ldrh	r2, [r5, #24]
   1a6c8:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1a6cc:	429a      	cmp	r2, r3
   1a6ce:	f040 8090 	bne.w	1a7f2 <net_6lo_compress+0x318>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   1a6d2:	8b6b      	ldrh	r3, [r5, #26]
   1a6d4:	2b00      	cmp	r3, #0
   1a6d6:	f040 808c 	bne.w	1a7f2 <net_6lo_compress+0x318>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   1a6da:	69eb      	ldr	r3, [r5, #28]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   1a6dc:	2b00      	cmp	r3, #0
   1a6de:	f040 8088 	bne.w	1a7f2 <net_6lo_compress+0x318>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   1a6e2:	6a2b      	ldr	r3, [r5, #32]
   1a6e4:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1a6e8:	f040 8159 	bne.w	1a99e <net_6lo_compress+0x4c4>
   1a6ec:	8cab      	ldrh	r3, [r5, #36]	; 0x24
   1a6ee:	2bfe      	cmp	r3, #254	; 0xfe
   1a6f0:	f040 8155 	bne.w	1a99e <net_6lo_compress+0x4c4>
			IPHC[1] |= NET_6LO_IPHC_DAM_10;
   1a6f4:	68b2      	ldr	r2, [r6, #8]
   1a6f6:	7853      	ldrb	r3, [r2, #1]
   1a6f8:	f043 0302 	orr.w	r3, r3, #2
   1a6fc:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->dst.s6_addr[14], 2);
   1a6fe:	68b0      	ldr	r0, [r6, #8]
   1a700:	2202      	movs	r2, #2
   1a702:	4420      	add	r0, r4
   1a704:	f105 0126 	add.w	r1, r5, #38	; 0x26
   1a708:	f7e6 f858 	bl	7bc <memcpy>
			offset += 2;
   1a70c:	3402      	adds	r4, #2
   1a70e:	e15c      	b.n	1a9ca <net_6lo_compress+0x4f0>
				IPHC[1] |= NET_6LO_IPHC_DAM_11;
   1a710:	785a      	ldrb	r2, [r3, #1]
   1a712:	f042 0203 	orr.w	r2, r2, #3
   1a716:	705a      	strb	r2, [r3, #1]
	if (ipv6->nexthdr != IPPROTO_UDP) {
   1a718:	79ab      	ldrb	r3, [r5, #6]
   1a71a:	2b11      	cmp	r3, #17
   1a71c:	f040 80b0 	bne.w	1a880 <net_6lo_compress+0x3a6>
		udp = net_udp_get_hdr(pkt, &hdr);
   1a720:	4669      	mov	r1, sp
   1a722:	4638      	mov	r0, r7
   1a724:	f004 fb92 	bl	1ee4c <net_udp_get_hdr>
		if (!udp) {
   1a728:	4605      	mov	r5, r0
   1a72a:	2800      	cmp	r0, #0
   1a72c:	f43f aee0 	beq.w	1a4f0 <net_6lo_compress+0x16>
		IPHC[offset] = NET_6LO_NHC_UDP_BARE;
   1a730:	68b3      	ldr	r3, [r6, #8]
   1a732:	22f0      	movs	r2, #240	; 0xf0
   1a734:	551a      	strb	r2, [r3, r4]
	if ((((htons(udp->src_port) >> 4) & 0xFFF) ==
   1a736:	8802      	ldrh	r2, [r0, #0]
   1a738:	f8d6 e008 	ldr.w	lr, [r6, #8]
   1a73c:	0213      	lsls	r3, r2, #8
   1a73e:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   1a742:	b29b      	uxth	r3, r3
   1a744:	f640 720b 	movw	r2, #3851	; 0xf0b
   1a748:	ea4f 1c13 	mov.w	ip, r3, lsr #4
   1a74c:	4594      	cmp	ip, r2
   1a74e:	f104 0001 	add.w	r0, r4, #1
   1a752:	886a      	ldrh	r2, [r5, #2]
   1a754:	d156      	bne.n	1a804 <net_6lo_compress+0x32a>
	    (((htons(udp->dst_port) >> 4) & 0xFFF) ==
   1a756:	0211      	lsls	r1, r2, #8
   1a758:	ea41 2112 	orr.w	r1, r1, r2, lsr #8
	    NET_6LO_NHC_UDP_4_BIT_PORT) &&
   1a75c:	f3c1 110b 	ubfx	r1, r1, #4, #12
   1a760:	4561      	cmp	r1, ip
   1a762:	d14f      	bne.n	1a804 <net_6lo_compress+0x32a>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_11;
   1a764:	f81e 3004 	ldrb.w	r3, [lr, r4]
   1a768:	f043 0303 	orr.w	r3, r3, #3
   1a76c:	f80e 3004 	strb.w	r3, [lr, r4]
		tmp = (u8_t)(htons(udp->src_port));
   1a770:	882b      	ldrh	r3, [r5, #0]
   1a772:	0a1a      	lsrs	r2, r3, #8
		tmp |= (((u8_t)(htons(udp->dst_port))) & 0x0F);
   1a774:	886b      	ldrh	r3, [r5, #2]
   1a776:	f3c3 2303 	ubfx	r3, r3, #8, #4
   1a77a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		IPHC[offset++] = tmp;
   1a77e:	b2c0      	uxtb	r0, r0
   1a780:	68b2      	ldr	r2, [r6, #8]
   1a782:	3402      	adds	r4, #2
   1a784:	5413      	strb	r3, [r2, r0]
   1a786:	fa5f f884 	uxtb.w	r8, r4
	memcpy(&IPHC[offset], &udp->chksum, 2);
   1a78a:	68b0      	ldr	r0, [r6, #8]
   1a78c:	1da9      	adds	r1, r5, #6
   1a78e:	2202      	movs	r2, #2
   1a790:	4440      	add	r0, r8
   1a792:	f7e6 f813 	bl	7bc <memcpy>
		net_udp_set_hdr(pkt, udp);
   1a796:	4629      	mov	r1, r5
   1a798:	4638      	mov	r0, r7
   1a79a:	f004 fb90 	bl	1eebe <net_udp_set_hdr>
	offset += 2;
   1a79e:	f108 0402 	add.w	r4, r8, #2
   1a7a2:	b2e4      	uxtb	r4, r4
		compressed += NET_UDPH_LEN;
   1a7a4:	2530      	movs	r5, #48	; 0x30
	net_buf_add(frag, offset);
   1a7a6:	f106 0808 	add.w	r8, r6, #8
   1a7aa:	4621      	mov	r1, r4
   1a7ac:	4640      	mov	r0, r8
   1a7ae:	f7fd fbd1 	bl	17f54 <net_buf_simple_add>
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   1a7b2:	68bb      	ldr	r3, [r7, #8]
   1a7b4:	68b0      	ldr	r0, [r6, #8]
	       pkt->frags->len - compressed);
   1a7b6:	899a      	ldrh	r2, [r3, #12]
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   1a7b8:	6899      	ldr	r1, [r3, #8]
   1a7ba:	1b52      	subs	r2, r2, r5
   1a7bc:	4429      	add	r1, r5
   1a7be:	4420      	add	r0, r4
   1a7c0:	f7e5 fffc 	bl	7bc <memcpy>
	net_buf_add(frag, pkt->frags->len - compressed);
   1a7c4:	68bb      	ldr	r3, [r7, #8]
   1a7c6:	8999      	ldrh	r1, [r3, #12]
   1a7c8:	4640      	mov	r0, r8
   1a7ca:	1b49      	subs	r1, r1, r5
   1a7cc:	f7fd fbc2 	bl	17f54 <net_buf_simple_add>
	net_pkt_frag_del(pkt, NULL, pkt->frags);
   1a7d0:	68ba      	ldr	r2, [r7, #8]
   1a7d2:	2100      	movs	r1, #0
   1a7d4:	4638      	mov	r0, r7
   1a7d6:	f7ff f903 	bl	199e0 <net_pkt_frag_del>
	net_pkt_frag_insert(pkt, frag);
   1a7da:	4638      	mov	r0, r7
   1a7dc:	4631      	mov	r1, r6
   1a7de:	f7ff f929 	bl	19a34 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   1a7e2:	4638      	mov	r0, r7
   1a7e4:	f7ff f993 	bl	19b0e <net_pkt_compact>
	if (fragment) {
   1a7e8:	f1b9 0f00 	cmp.w	r9, #0
   1a7ec:	d14a      	bne.n	1a884 <net_6lo_compress+0x3aa>
	return true;
   1a7ee:	2001      	movs	r0, #1
   1a7f0:	e67f      	b.n	1a4f2 <net_6lo_compress+0x18>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   1a7f2:	68b0      	ldr	r0, [r6, #8]
   1a7f4:	4420      	add	r0, r4
   1a7f6:	2210      	movs	r2, #16
   1a7f8:	f105 0118 	add.w	r1, r5, #24
   1a7fc:	f7e5 ffde 	bl	7bc <memcpy>
		offset += 16;
   1a800:	3410      	adds	r4, #16
   1a802:	e0e2      	b.n	1a9ca <net_6lo_compress+0x4f0>
	} else if (((htons(udp->dst_port) >> 8) & 0xFF) ==
   1a804:	b2d2      	uxtb	r2, r2
   1a806:	2af0      	cmp	r2, #240	; 0xf0
   1a808:	d117      	bne.n	1a83a <net_6lo_compress+0x360>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_01;
   1a80a:	f81e 3004 	ldrb.w	r3, [lr, r4]
   1a80e:	f043 0301 	orr.w	r3, r3, #1
   1a812:	f80e 3004 	strb.w	r3, [lr, r4]
		memcpy(&IPHC[offset], &udp->src_port, 2);
   1a816:	68b3      	ldr	r3, [r6, #8]
   1a818:	2202      	movs	r2, #2
   1a81a:	fa53 f080 	uxtab	r0, r3, r0
   1a81e:	4629      	mov	r1, r5
   1a820:	f7e5 ffcc 	bl	7bc <memcpy>
		IPHC[offset++] = (u8_t)(htons(udp->dst_port));
   1a824:	f104 0804 	add.w	r8, r4, #4
   1a828:	886b      	ldrh	r3, [r5, #2]
   1a82a:	68b2      	ldr	r2, [r6, #8]
		offset += 2;
   1a82c:	3403      	adds	r4, #3
		IPHC[offset++] = (u8_t)(htons(udp->dst_port));
   1a82e:	b2e4      	uxtb	r4, r4
   1a830:	0a1b      	lsrs	r3, r3, #8
   1a832:	fa5f f888 	uxtb.w	r8, r8
   1a836:	5513      	strb	r3, [r2, r4]
   1a838:	e7a7      	b.n	1a78a <net_6lo_compress+0x2b0>
	} else if (((htons(udp->src_port) >> 8) & 0xFF) ==
   1a83a:	0a1b      	lsrs	r3, r3, #8
   1a83c:	2bf0      	cmp	r3, #240	; 0xf0
   1a83e:	d117      	bne.n	1a870 <net_6lo_compress+0x396>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_10;
   1a840:	f81e 3004 	ldrb.w	r3, [lr, r4]
   1a844:	f043 0302 	orr.w	r3, r3, #2
   1a848:	f80e 3004 	strb.w	r3, [lr, r4]
		IPHC[offset++] = (u8_t)(htons(udp->src_port));
   1a84c:	4629      	mov	r1, r5
   1a84e:	68b2      	ldr	r2, [r6, #8]
   1a850:	f831 3b02 	ldrh.w	r3, [r1], #2
   1a854:	b2c0      	uxtb	r0, r0
   1a856:	0a1b      	lsrs	r3, r3, #8
   1a858:	5413      	strb	r3, [r2, r0]
		memcpy(&IPHC[offset], &udp->dst_port, 2);
   1a85a:	68b3      	ldr	r3, [r6, #8]
		IPHC[offset++] = (u8_t)(htons(udp->src_port));
   1a85c:	1ca0      	adds	r0, r4, #2
		memcpy(&IPHC[offset], &udp->dst_port, 2);
   1a85e:	2202      	movs	r2, #2
   1a860:	fa53 f080 	uxtab	r0, r3, r0
   1a864:	f7e5 ffaa 	bl	7bc <memcpy>
		offset += 2;
   1a868:	3404      	adds	r4, #4
		offset += 4;
   1a86a:	fa5f f884 	uxtb.w	r8, r4
   1a86e:	e78c      	b.n	1a78a <net_6lo_compress+0x2b0>
		memcpy(&IPHC[offset], &udp->src_port, 4);
   1a870:	2204      	movs	r2, #4
   1a872:	4629      	mov	r1, r5
   1a874:	fa5e f080 	uxtab	r0, lr, r0
   1a878:	f7e5 ffa0 	bl	7bc <memcpy>
		offset += 4;
   1a87c:	3405      	adds	r4, #5
   1a87e:	e7f4      	b.n	1a86a <net_6lo_compress+0x390>
	compressed = NET_IPV6H_LEN;
   1a880:	2528      	movs	r5, #40	; 0x28
   1a882:	e790      	b.n	1a7a6 <net_6lo_compress+0x2cc>
		return fragment(pkt, compressed - offset);
   1a884:	1b29      	subs	r1, r5, r4
		return fragment(pkt, -1);
   1a886:	4638      	mov	r0, r7
   1a888:	47c8      	blx	r9
   1a88a:	e632      	b.n	1a4f2 <net_6lo_compress+0x18>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   1a88c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a890:	f7ff f870 	bl	19974 <net_pkt_get_frag>
	if (!frag) {
   1a894:	4604      	mov	r4, r0
   1a896:	2800      	cmp	r0, #0
   1a898:	f43f ae2a 	beq.w	1a4f0 <net_6lo_compress+0x16>
	frag->data[0] = NET_6LO_DISPATCH_IPV6;
   1a89c:	f850 3f08 	ldr.w	r3, [r0, #8]!
   1a8a0:	2241      	movs	r2, #65	; 0x41
   1a8a2:	701a      	strb	r2, [r3, #0]
	net_buf_add(frag, 1);
   1a8a4:	2101      	movs	r1, #1
   1a8a6:	f7fd fb55 	bl	17f54 <net_buf_simple_add>
	net_pkt_frag_insert(pkt, frag);
   1a8aa:	4638      	mov	r0, r7
   1a8ac:	4621      	mov	r1, r4
   1a8ae:	f7ff f8c1 	bl	19a34 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   1a8b2:	4638      	mov	r0, r7
   1a8b4:	f7ff f92b 	bl	19b0e <net_pkt_compact>
	if (fragment) {
   1a8b8:	f1b9 0f00 	cmp.w	r9, #0
   1a8bc:	d097      	beq.n	1a7ee <net_6lo_compress+0x314>
		return fragment(pkt, -1);
   1a8be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a8c2:	e7e0      	b.n	1a886 <net_6lo_compress+0x3ac>
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   1a8c4:	892a      	ldrh	r2, [r5, #8]
   1a8c6:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1a8ca:	429a      	cmp	r2, r3
   1a8cc:	f47f aef3 	bne.w	1a6b6 <net_6lo_compress+0x1dc>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   1a8d0:	896b      	ldrh	r3, [r5, #10]
   1a8d2:	2b00      	cmp	r3, #0
   1a8d4:	f47f aeef 	bne.w	1a6b6 <net_6lo_compress+0x1dc>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   1a8d8:	68eb      	ldr	r3, [r5, #12]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   1a8da:	2b00      	cmp	r3, #0
   1a8dc:	f47f aeeb 	bne.w	1a6b6 <net_6lo_compress+0x1dc>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   1a8e0:	692b      	ldr	r3, [r5, #16]
   1a8e2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1a8e6:	f43f aea5 	beq.w	1a634 <net_6lo_compress+0x15a>
			if (net_ipv6_addr_based_on_ll(&ipv6->src,
   1a8ea:	f107 0120 	add.w	r1, r7, #32
   1a8ee:	f7ff fd95 	bl	1a41c <net_ipv6_addr_based_on_ll>
   1a8f2:	68b3      	ldr	r3, [r6, #8]
   1a8f4:	2800      	cmp	r0, #0
   1a8f6:	f47f aeaf 	bne.w	1a658 <net_6lo_compress+0x17e>
				IPHC[1] |= NET_6LO_IPHC_SAM_01;
   1a8fa:	785a      	ldrb	r2, [r3, #1]
   1a8fc:	f042 0210 	orr.w	r2, r2, #16
   1a900:	705a      	strb	r2, [r3, #1]
				memcpy(&IPHC[offset], &ipv6->src.s6_addr[8], 8);
   1a902:	68b0      	ldr	r0, [r6, #8]
   1a904:	2208      	movs	r2, #8
   1a906:	4420      	add	r0, r4
   1a908:	f105 0110 	add.w	r1, r5, #16
   1a90c:	f7e5 ff56 	bl	7bc <memcpy>
				offset += 8;
   1a910:	3408      	adds	r4, #8
		offset += sizeof(struct in6_addr);
   1a912:	b2e4      	uxtb	r4, r4
	if (!offset) {
   1a914:	2c00      	cmp	r4, #0
   1a916:	f47f aea3 	bne.w	1a660 <net_6lo_compress+0x186>
		net_pkt_frag_unref(frag);
   1a91a:	4630      	mov	r0, r6
   1a91c:	f7ff f845 	bl	199aa <net_pkt_frag_unref>
   1a920:	e5e6      	b.n	1a4f0 <net_6lo_compress+0x16>
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   1a922:	69eb      	ldr	r3, [r5, #28]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   1a924:	2b00      	cmp	r3, #0
   1a926:	f47f af65 	bne.w	1a7f4 <net_6lo_compress+0x31a>
   1a92a:	6a2b      	ldr	r3, [r5, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   1a92c:	b913      	cbnz	r3, 1a934 <net_6lo_compress+0x45a>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   1a92e:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1a932:	b1f3      	cbz	r3, 1a972 <net_6lo_compress+0x498>
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   1a934:	8c2b      	ldrh	r3, [r5, #32]
   1a936:	2b00      	cmp	r3, #0
   1a938:	f47f af5c 	bne.w	1a7f4 <net_6lo_compress+0x31a>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   1a93c:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   1a940:	2b00      	cmp	r3, #0
   1a942:	f47f af57 	bne.w	1a7f4 <net_6lo_compress+0x31a>
		IPHC[1] |= NET_6LO_IPHC_DAM_01;
   1a946:	7843      	ldrb	r3, [r0, #1]
   1a948:	f043 0301 	orr.w	r3, r3, #1
   1a94c:	7043      	strb	r3, [r0, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   1a94e:	68b0      	ldr	r0, [r6, #8]
   1a950:	2201      	movs	r2, #1
   1a952:	f105 0119 	add.w	r1, r5, #25
   1a956:	4420      	add	r0, r4
   1a958:	f7e5 ff30 	bl	7bc <memcpy>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[11], 5);
   1a95c:	68b3      	ldr	r3, [r6, #8]
		offset++;
   1a95e:	1c60      	adds	r0, r4, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[11], 5);
   1a960:	2205      	movs	r2, #5
   1a962:	f105 0123 	add.w	r1, r5, #35	; 0x23
   1a966:	fa53 f080 	uxtab	r0, r3, r0
   1a96a:	f7e5 ff27 	bl	7bc <memcpy>
		offset += 5;
   1a96e:	3406      	adds	r4, #6
   1a970:	e02b      	b.n	1a9ca <net_6lo_compress+0x4f0>
		IPHC[1] |= NET_6LO_IPHC_DAM_10;
   1a972:	7843      	ldrb	r3, [r0, #1]
   1a974:	f043 0302 	orr.w	r3, r3, #2
   1a978:	7043      	strb	r3, [r0, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   1a97a:	68b0      	ldr	r0, [r6, #8]
   1a97c:	2201      	movs	r2, #1
   1a97e:	f105 0119 	add.w	r1, r5, #25
   1a982:	4420      	add	r0, r4
   1a984:	f7e5 ff1a 	bl	7bc <memcpy>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[13], 3);
   1a988:	68b3      	ldr	r3, [r6, #8]
		offset++;
   1a98a:	1c60      	adds	r0, r4, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[13], 3);
   1a98c:	2203      	movs	r2, #3
   1a98e:	f105 0125 	add.w	r1, r5, #37	; 0x25
   1a992:	fa53 f080 	uxtab	r0, r3, r0
   1a996:	f7e5 ff11 	bl	7bc <memcpy>
		offset += 3;
   1a99a:	3404      	adds	r4, #4
   1a99c:	e015      	b.n	1a9ca <net_6lo_compress+0x4f0>
			if (net_ipv6_addr_based_on_ll(&ipv6->dst,
   1a99e:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1a9a2:	f105 0018 	add.w	r0, r5, #24
   1a9a6:	f7ff fd39 	bl	1a41c <net_ipv6_addr_based_on_ll>
   1a9aa:	68b3      	ldr	r3, [r6, #8]
   1a9ac:	2800      	cmp	r0, #0
   1a9ae:	f47f aeaf 	bne.w	1a710 <net_6lo_compress+0x236>
				IPHC[1] |= NET_6LO_IPHC_DAM_01;
   1a9b2:	785a      	ldrb	r2, [r3, #1]
   1a9b4:	f042 0201 	orr.w	r2, r2, #1
   1a9b8:	705a      	strb	r2, [r3, #1]
				memcpy(&IPHC[offset], &ipv6->dst.s6_addr[8], 8);
   1a9ba:	68b0      	ldr	r0, [r6, #8]
   1a9bc:	2208      	movs	r2, #8
   1a9be:	4420      	add	r0, r4
   1a9c0:	f105 0120 	add.w	r1, r5, #32
   1a9c4:	f7e5 fefa 	bl	7bc <memcpy>
				offset += 8;
   1a9c8:	3408      	adds	r4, #8
		offset += 16;
   1a9ca:	b2e4      	uxtb	r4, r4
	if (!offset) {
   1a9cc:	2c00      	cmp	r4, #0
   1a9ce:	f47f aea3 	bne.w	1a718 <net_6lo_compress+0x23e>
   1a9d2:	e7a2      	b.n	1a91a <net_6lo_compress+0x440>

0001a9d4 <net_6lo_uncompress>:

bool net_6lo_uncompress(struct net_pkt *pkt)
{
   1a9d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NET_ASSERT(pkt && pkt->frags);

	if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPHC) ==
   1a9d8:	6884      	ldr	r4, [r0, #8]
   1a9da:	68a3      	ldr	r3, [r4, #8]
   1a9dc:	781a      	ldrb	r2, [r3, #0]
   1a9de:	f002 0860 	and.w	r8, r2, #96	; 0x60
   1a9e2:	f1b8 0f60 	cmp.w	r8, #96	; 0x60
{
   1a9e6:	4606      	mov	r6, r0
	if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPHC) ==
   1a9e8:	f040 8200 	bne.w	1adec <net_6lo_uncompress+0x418>
	if (CIPHC[1] & NET_6LO_IPHC_CID_1) {
   1a9ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
   1a9f0:	2b00      	cmp	r3, #0
   1a9f2:	da03      	bge.n	1a9fc <net_6lo_uncompress+0x28>
	return false;
   1a9f4:	2000      	movs	r0, #0
	}

	NET_DBG("pkt %p is not compressed", pkt);

	return true;
}
   1a9f6:	b003      	add	sp, #12
   1a9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_pkt_get_frag(pkt, NET_6LO_RX_PKT_TIMEOUT);
   1a9fc:	2164      	movs	r1, #100	; 0x64
   1a9fe:	f7fe ffb9 	bl	19974 <net_pkt_get_frag>
	if (!frag) {
   1aa02:	4607      	mov	r7, r0
   1aa04:	2800      	cmp	r0, #0
   1aa06:	d0f5      	beq.n	1a9f4 <net_6lo_uncompress+0x20>
	ipv6 = (struct net_ipv6_hdr *)(frag->data);
   1aa08:	6885      	ldr	r5, [r0, #8]
	pkt->ip_hdr_len = len;
   1aa0a:	2328      	movs	r3, #40	; 0x28
	ipv6->vtc = 0x60;
   1aa0c:	f885 8000 	strb.w	r8, [r5]
   1aa10:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   1aa14:	68b3      	ldr	r3, [r6, #8]
   1aa16:	6899      	ldr	r1, [r3, #8]
   1aa18:	780b      	ldrb	r3, [r1, #0]
   1aa1a:	f003 0318 	and.w	r3, r3, #24
   1aa1e:	2b08      	cmp	r3, #8
   1aa20:	d054      	beq.n	1aacc <net_6lo_uncompress+0xf8>
   1aa22:	d802      	bhi.n	1aa2a <net_6lo_uncompress+0x56>
   1aa24:	b153      	cbz	r3, 1aa3c <net_6lo_uncompress+0x68>
   1aa26:	2402      	movs	r4, #2
   1aa28:	e01d      	b.n	1aa66 <net_6lo_uncompress+0x92>
   1aa2a:	2b10      	cmp	r3, #16
   1aa2c:	d05c      	beq.n	1aae8 <net_6lo_uncompress+0x114>
   1aa2e:	2b18      	cmp	r3, #24
   1aa30:	d1f9      	bne.n	1aa26 <net_6lo_uncompress+0x52>
		ipv6->tcflow = 0;
   1aa32:	2300      	movs	r3, #0
   1aa34:	706b      	strb	r3, [r5, #1]
		ipv6->flow = 0;
   1aa36:	70ab      	strb	r3, [r5, #2]
   1aa38:	70eb      	strb	r3, [r5, #3]
   1aa3a:	e7f4      	b.n	1aa26 <net_6lo_uncompress+0x52>
		tcl = CIPHC[offset++];
   1aa3c:	788a      	ldrb	r2, [r1, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   1aa3e:	0093      	lsls	r3, r2, #2
   1aa40:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   1aa44:	782a      	ldrb	r2, [r5, #0]
		tcl = (tcl >> 6) | (tcl << 2);
   1aa46:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   1aa48:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   1aa4c:	702a      	strb	r2, [r5, #0]
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   1aa4e:	78ca      	ldrb	r2, [r1, #3]
   1aa50:	f002 020f 	and.w	r2, r2, #15
   1aa54:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   1aa58:	2202      	movs	r2, #2
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   1aa5a:	706b      	strb	r3, [r5, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   1aa5c:	3104      	adds	r1, #4
   1aa5e:	18a8      	adds	r0, r5, r2
   1aa60:	f7e5 feac 	bl	7bc <memcpy>
		offset += 2;
   1aa64:	2406      	movs	r4, #6
	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   1aa66:	68b3      	ldr	r3, [r6, #8]
   1aa68:	689a      	ldr	r2, [r3, #8]
   1aa6a:	7813      	ldrb	r3, [r2, #0]
   1aa6c:	075b      	lsls	r3, r3, #29
		ipv6->nexthdr = CIPHC[offset];
   1aa6e:	bf5c      	itt	pl
   1aa70:	5d13      	ldrbpl	r3, [r2, r4]
   1aa72:	71ab      	strbpl	r3, [r5, #6]
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   1aa74:	7813      	ldrb	r3, [r2, #0]
		offset++;
   1aa76:	bf58      	it	pl
   1aa78:	3401      	addpl	r4, #1
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   1aa7a:	f003 0303 	and.w	r3, r3, #3
		offset++;
   1aa7e:	bf58      	it	pl
   1aa80:	b2e4      	uxtbpl	r4, r4
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   1aa82:	2b02      	cmp	r3, #2
   1aa84:	d040      	beq.n	1ab08 <net_6lo_uncompress+0x134>
   1aa86:	2b03      	cmp	r3, #3
   1aa88:	d041      	beq.n	1ab0e <net_6lo_uncompress+0x13a>
   1aa8a:	2b01      	cmp	r3, #1
   1aa8c:	d03d      	beq.n	1ab0a <net_6lo_uncompress+0x136>
		ipv6->hop_limit = CIPHC[offset++];
   1aa8e:	5d12      	ldrb	r2, [r2, r4]
   1aa90:	71ea      	strb	r2, [r5, #7]
   1aa92:	1c63      	adds	r3, r4, #1
   1aa94:	b2dc      	uxtb	r4, r3
	memset(&ipv6->src.s6_addr[0], 0, 16);
   1aa96:	f105 0908 	add.w	r9, r5, #8
   1aa9a:	2210      	movs	r2, #16
   1aa9c:	2100      	movs	r1, #0
   1aa9e:	4648      	mov	r0, r9
	memset(&ipv6->dst.s6_addr[0], 0, 16);
   1aaa0:	f105 0818 	add.w	r8, r5, #24
	memset(&ipv6->src.s6_addr[0], 0, 16);
   1aaa4:	f7e5 feb6 	bl	814 <memset>
	memset(&ipv6->dst.s6_addr[0], 0, 16);
   1aaa8:	2100      	movs	r1, #0
   1aaaa:	2210      	movs	r2, #16
   1aaac:	4640      	mov	r0, r8
   1aaae:	f7e5 feb1 	bl	814 <memset>
	if (CIPHC[1] & NET_6LO_IPHC_SAC_1) {
   1aab2:	68b3      	ldr	r3, [r6, #8]
   1aab4:	6899      	ldr	r1, [r3, #8]
   1aab6:	784b      	ldrb	r3, [r1, #1]
   1aab8:	f013 0f40 	tst.w	r3, #64	; 0x40
   1aabc:	f003 0330 	and.w	r3, r3, #48	; 0x30
   1aac0:	d027      	beq.n	1ab12 <net_6lo_uncompress+0x13e>
		if ((CIPHC[1] & NET_6LO_IPHC_SAM_11) == NET_6LO_IPHC_SAM_00) {
   1aac2:	b35b      	cbz	r3, 1ab1c <net_6lo_uncompress+0x148>
	net_pkt_frag_unref(frag);
   1aac4:	4638      	mov	r0, r7
   1aac6:	f7fe ff70 	bl	199aa <net_pkt_frag_unref>
   1aaca:	e793      	b.n	1a9f4 <net_6lo_uncompress+0x20>
		tcl = ((CIPHC[offset] & 0xF0) >> 6);
   1aacc:	788b      	ldrb	r3, [r1, #2]
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   1aace:	099a      	lsrs	r2, r3, #6
   1aad0:	f003 030f 	and.w	r3, r3, #15
   1aad4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   1aad8:	2202      	movs	r2, #2
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   1aada:	706b      	strb	r3, [r5, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   1aadc:	3103      	adds	r1, #3
   1aade:	18a8      	adds	r0, r5, r2
   1aae0:	f7e5 fe6c 	bl	7bc <memcpy>
		offset += 2;
   1aae4:	2405      	movs	r4, #5
   1aae6:	e7be      	b.n	1aa66 <net_6lo_uncompress+0x92>
		tcl = CIPHC[offset];
   1aae8:	788a      	ldrb	r2, [r1, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   1aaea:	0093      	lsls	r3, r2, #2
   1aaec:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   1aaf0:	782a      	ldrb	r2, [r5, #0]
		tcl = (tcl >> 6) | (tcl << 2);
   1aaf2:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   1aaf4:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
		ipv6->tcflow = (tcl & 0x0F) << 4;
   1aaf8:	011b      	lsls	r3, r3, #4
   1aafa:	706b      	strb	r3, [r5, #1]
		ipv6->flow = 0;
   1aafc:	2300      	movs	r3, #0
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   1aafe:	702a      	strb	r2, [r5, #0]
		ipv6->flow = 0;
   1ab00:	70ab      	strb	r3, [r5, #2]
   1ab02:	70eb      	strb	r3, [r5, #3]
		offset++;
   1ab04:	2403      	movs	r4, #3
   1ab06:	e7ae      	b.n	1aa66 <net_6lo_uncompress+0x92>
		ipv6->hop_limit = 64;
   1ab08:	2340      	movs	r3, #64	; 0x40
		ipv6->hop_limit = 255;
   1ab0a:	71eb      	strb	r3, [r5, #7]
   1ab0c:	e7c3      	b.n	1aa96 <net_6lo_uncompress+0xc2>
   1ab0e:	23ff      	movs	r3, #255	; 0xff
   1ab10:	e7fb      	b.n	1ab0a <net_6lo_uncompress+0x136>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   1ab12:	b2db      	uxtb	r3, r3
   1ab14:	2b10      	cmp	r3, #16
   1ab16:	d02b      	beq.n	1ab70 <net_6lo_uncompress+0x19c>
   1ab18:	d818      	bhi.n	1ab4c <net_6lo_uncompress+0x178>
   1ab1a:	b30b      	cbz	r3, 1ab60 <net_6lo_uncompress+0x18c>
	if (CIPHC[1] & NET_6LO_IPHC_M_1) {
   1ab1c:	68b3      	ldr	r3, [r6, #8]
   1ab1e:	6899      	ldr	r1, [r3, #8]
   1ab20:	784a      	ldrb	r2, [r1, #1]
   1ab22:	0710      	lsls	r0, r2, #28
   1ab24:	f140 80ec 	bpl.w	1ad00 <net_6lo_uncompress+0x32c>
	if (CIPHC[1] & NET_6LO_IPHC_DAC_1) {
   1ab28:	0753      	lsls	r3, r2, #29
   1ab2a:	f100 8115 	bmi.w	1ad58 <net_6lo_uncompress+0x384>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   1ab2e:	f002 0203 	and.w	r2, r2, #3
   1ab32:	2a02      	cmp	r2, #2
   1ab34:	d046      	beq.n	1abc4 <net_6lo_uncompress+0x1f0>
   1ab36:	2a03      	cmp	r2, #3
   1ab38:	d052      	beq.n	1abe0 <net_6lo_uncompress+0x20c>
   1ab3a:	2a01      	cmp	r2, #1
   1ab3c:	d033      	beq.n	1aba6 <net_6lo_uncompress+0x1d2>
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   1ab3e:	2210      	movs	r2, #16
   1ab40:	4421      	add	r1, r4
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   1ab42:	4640      	mov	r0, r8
   1ab44:	f7e5 fe3a 	bl	7bc <memcpy>
		offset += 16;
   1ab48:	3410      	adds	r4, #16
   1ab4a:	e039      	b.n	1abc0 <net_6lo_uncompress+0x1ec>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   1ab4c:	2b20      	cmp	r3, #32
   1ab4e:	d01b      	beq.n	1ab88 <net_6lo_uncompress+0x1b4>
   1ab50:	2b30      	cmp	r3, #48	; 0x30
   1ab52:	d1e3      	bne.n	1ab1c <net_6lo_uncompress+0x148>
		net_ipv6_addr_create_iid(&ipv6->src, net_pkt_ll_src(pkt));
   1ab54:	f106 0120 	add.w	r1, r6, #32
   1ab58:	4648      	mov	r0, r9
   1ab5a:	f7ff fc1e 	bl	1a39a <net_ipv6_addr_create_iid>
   1ab5e:	e7dd      	b.n	1ab1c <net_6lo_uncompress+0x148>
		memcpy(ipv6->src.s6_addr, &CIPHC[offset], 16);
   1ab60:	4421      	add	r1, r4
   1ab62:	2210      	movs	r2, #16
   1ab64:	4648      	mov	r0, r9
   1ab66:	f7e5 fe29 	bl	7bc <memcpy>
		offset += 16;
   1ab6a:	3410      	adds	r4, #16
		offset += 2;
   1ab6c:	b2e4      	uxtb	r4, r4
   1ab6e:	e7d5      	b.n	1ab1c <net_6lo_uncompress+0x148>
		ipv6->src.s6_addr[0] = 0xFE;
   1ab70:	23fe      	movs	r3, #254	; 0xfe
   1ab72:	722b      	strb	r3, [r5, #8]
		ipv6->src.s6_addr[1] = 0x80;
   1ab74:	2380      	movs	r3, #128	; 0x80
		memcpy(&ipv6->src.s6_addr[8], &CIPHC[offset], 8);
   1ab76:	4421      	add	r1, r4
		ipv6->src.s6_addr[1] = 0x80;
   1ab78:	726b      	strb	r3, [r5, #9]
		memcpy(&ipv6->src.s6_addr[8], &CIPHC[offset], 8);
   1ab7a:	2208      	movs	r2, #8
   1ab7c:	f105 0010 	add.w	r0, r5, #16
   1ab80:	f7e5 fe1c 	bl	7bc <memcpy>
		offset += 8;
   1ab84:	3408      	adds	r4, #8
   1ab86:	e7f1      	b.n	1ab6c <net_6lo_uncompress+0x198>
		ipv6->src.s6_addr[1] = 0x80;
   1ab88:	2280      	movs	r2, #128	; 0x80
		ipv6->src.s6_addr[0] = 0xFE;
   1ab8a:	23fe      	movs	r3, #254	; 0xfe
		ipv6->src.s6_addr[1] = 0x80;
   1ab8c:	726a      	strb	r2, [r5, #9]
		ipv6->src.s6_addr[11] = 0xFF;
   1ab8e:	22ff      	movs	r2, #255	; 0xff
   1ab90:	74ea      	strb	r2, [r5, #19]
		memcpy(&ipv6->src.s6_addr[14], &CIPHC[offset], 2);
   1ab92:	4421      	add	r1, r4
		ipv6->src.s6_addr[0] = 0xFE;
   1ab94:	722b      	strb	r3, [r5, #8]
		ipv6->src.s6_addr[12] = 0xFE;
   1ab96:	752b      	strb	r3, [r5, #20]
		memcpy(&ipv6->src.s6_addr[14], &CIPHC[offset], 2);
   1ab98:	2202      	movs	r2, #2
   1ab9a:	f105 0016 	add.w	r0, r5, #22
   1ab9e:	f7e5 fe0d 	bl	7bc <memcpy>
		offset += 2;
   1aba2:	3402      	adds	r4, #2
   1aba4:	e7e2      	b.n	1ab6c <net_6lo_uncompress+0x198>
		ipv6->dst.s6_addr[0] = 0xFF;
   1aba6:	23ff      	movs	r3, #255	; 0xff
   1aba8:	762b      	strb	r3, [r5, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   1abaa:	5d0b      	ldrb	r3, [r1, r4]
   1abac:	766b      	strb	r3, [r5, #25]
   1abae:	1c63      	adds	r3, r4, #1
		memcpy(&ipv6->dst.s6_addr[11], &CIPHC[offset], 5);
   1abb0:	2205      	movs	r2, #5
   1abb2:	fa51 f183 	uxtab	r1, r1, r3
   1abb6:	f105 0023 	add.w	r0, r5, #35	; 0x23
   1abba:	f7e5 fdff 	bl	7bc <memcpy>
		offset += 5;
   1abbe:	3406      	adds	r4, #6
		offset += 2;
   1abc0:	b2e4      	uxtb	r4, r4
   1abc2:	e016      	b.n	1abf2 <net_6lo_uncompress+0x21e>
		ipv6->dst.s6_addr[0] = 0xFF;
   1abc4:	23ff      	movs	r3, #255	; 0xff
   1abc6:	762b      	strb	r3, [r5, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   1abc8:	5d0b      	ldrb	r3, [r1, r4]
   1abca:	766b      	strb	r3, [r5, #25]
   1abcc:	1c63      	adds	r3, r4, #1
		memcpy(&ipv6->dst.s6_addr[13], &CIPHC[offset], 3);
   1abce:	2203      	movs	r2, #3
   1abd0:	fa51 f183 	uxtab	r1, r1, r3
   1abd4:	f105 0025 	add.w	r0, r5, #37	; 0x25
   1abd8:	f7e5 fdf0 	bl	7bc <memcpy>
		offset += 3;
   1abdc:	3404      	adds	r4, #4
   1abde:	e7ef      	b.n	1abc0 <net_6lo_uncompress+0x1ec>
		ipv6->dst.s6_addr[0] = 0xFF;
   1abe0:	23ff      	movs	r3, #255	; 0xff
   1abe2:	762b      	strb	r3, [r5, #24]
		ipv6->dst.s6_addr[1] = 0x02;
   1abe4:	2302      	movs	r3, #2
   1abe6:	766b      	strb	r3, [r5, #25]
		ipv6->dst.s6_addr[15] = CIPHC[offset++];
   1abe8:	5d0a      	ldrb	r2, [r1, r4]
   1abea:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
   1abee:	1c63      	adds	r3, r4, #1
   1abf0:	b2dc      	uxtb	r4, r3
	net_buf_add(frag, NET_IPV6H_LEN);
   1abf2:	f107 0308 	add.w	r3, r7, #8
   1abf6:	2128      	movs	r1, #40	; 0x28
   1abf8:	4618      	mov	r0, r3
   1abfa:	9301      	str	r3, [sp, #4]
   1abfc:	f7fd f9aa 	bl	17f54 <net_buf_simple_add>
	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   1ac00:	68b3      	ldr	r3, [r6, #8]
   1ac02:	6899      	ldr	r1, [r3, #8]
   1ac04:	f891 8000 	ldrb.w	r8, [r1]
   1ac08:	f018 0804 	ands.w	r8, r8, #4
   1ac0c:	f000 80d8 	beq.w	1adc0 <net_6lo_uncompress+0x3ec>
	if ((CIPHC[offset] & 0xF0) != NET_6LO_NHC_UDP_BARE) {
   1ac10:	5d0b      	ldrb	r3, [r1, r4]
   1ac12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1ac16:	2bf0      	cmp	r3, #240	; 0xf0
   1ac18:	f47f af54 	bne.w	1aac4 <net_6lo_uncompress+0xf0>
	ipv6->nexthdr = IPPROTO_UDP;
   1ac1c:	2311      	movs	r3, #17
   1ac1e:	71ab      	strb	r3, [r5, #6]
	chksum = CIPHC[offset] & NET_6LO_NHC_UDP_CHKSUM_1;
   1ac20:	5d0a      	ldrb	r2, [r1, r4]
	udp = (struct net_udp_hdr *)(frag->data + NET_IPV6H_LEN);
   1ac22:	f8d7 b008 	ldr.w	fp, [r7, #8]
	chksum = CIPHC[offset] & NET_6LO_NHC_UDP_CHKSUM_1;
   1ac26:	f002 0808 	and.w	r8, r2, #8
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   1ac2a:	f002 0203 	and.w	r2, r2, #3
   1ac2e:	1c60      	adds	r0, r4, #1
   1ac30:	2a02      	cmp	r2, #2
	udp = (struct net_udp_hdr *)(frag->data + NET_IPV6H_LEN);
   1ac32:	f10b 0928 	add.w	r9, fp, #40	; 0x28
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   1ac36:	b2c0      	uxtb	r0, r0
   1ac38:	f000 809f 	beq.w	1ad7a <net_6lo_uncompress+0x3a6>
   1ac3c:	2a03      	cmp	r2, #3
   1ac3e:	f000 80aa 	beq.w	1ad96 <net_6lo_uncompress+0x3c2>
   1ac42:	2a01      	cmp	r2, #1
   1ac44:	4401      	add	r1, r0
   1ac46:	f104 0a03 	add.w	sl, r4, #3
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   1ac4a:	f04f 0202 	mov.w	r2, #2
   1ac4e:	4648      	mov	r0, r9
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   1ac50:	f000 8084 	beq.w	1ad5c <net_6lo_uncompress+0x388>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   1ac54:	f7e5 fdb2 	bl	7bc <memcpy>
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   1ac58:	68b2      	ldr	r2, [r6, #8]
   1ac5a:	6891      	ldr	r1, [r2, #8]
   1ac5c:	f10b 002a 	add.w	r0, fp, #42	; 0x2a
   1ac60:	2202      	movs	r2, #2
   1ac62:	fa51 f18a 	uxtab	r1, r1, sl
   1ac66:	f7e5 fda9 	bl	7bc <memcpy>
		offset += 2;
   1ac6a:	3405      	adds	r4, #5
		offset++;
   1ac6c:	b2e4      	uxtb	r4, r4
	if (!chksum) {
   1ac6e:	f1b8 0f00 	cmp.w	r8, #0
   1ac72:	d109      	bne.n	1ac88 <net_6lo_uncompress+0x2b4>
		memcpy(&udp->chksum, &CIPHC[offset], 2);
   1ac74:	68b2      	ldr	r2, [r6, #8]
   1ac76:	6891      	ldr	r1, [r2, #8]
   1ac78:	f10b 002e 	add.w	r0, fp, #46	; 0x2e
   1ac7c:	4421      	add	r1, r4
   1ac7e:	2202      	movs	r2, #2
   1ac80:	f7e5 fd9c 	bl	7bc <memcpy>
		offset += 2;
   1ac84:	3402      	adds	r4, #2
   1ac86:	b2e4      	uxtb	r4, r4
	net_buf_add(frag, NET_UDPH_LEN);
   1ac88:	2108      	movs	r1, #8
   1ac8a:	9801      	ldr	r0, [sp, #4]
   1ac8c:	f7fd f962 	bl	17f54 <net_buf_simple_add>
	if (pkt->frags->len < offset) {
   1ac90:	68b3      	ldr	r3, [r6, #8]
   1ac92:	899a      	ldrh	r2, [r3, #12]
   1ac94:	fa1f fa84 	uxth.w	sl, r4
   1ac98:	4552      	cmp	r2, sl
   1ac9a:	f4ff af13 	bcc.w	1aac4 <net_6lo_uncompress+0xf0>
	memmove(pkt->frags->data, pkt->frags->data + offset,
   1ac9e:	6898      	ldr	r0, [r3, #8]
   1aca0:	1b12      	subs	r2, r2, r4
   1aca2:	1901      	adds	r1, r0, r4
   1aca4:	f7e5 fd72 	bl	78c <memmove>
	memcpy(&lo_packet , pkt->frags->data,  pkt->frags->len - offset);
   1aca8:	68b3      	ldr	r3, [r6, #8]
   1acaa:	4857      	ldr	r0, [pc, #348]	; (1ae08 <net_6lo_uncompress+0x434>)
   1acac:	899a      	ldrh	r2, [r3, #12]
   1acae:	6899      	ldr	r1, [r3, #8]
   1acb0:	1b12      	subs	r2, r2, r4
   1acb2:	f7e5 fd83 	bl	7bc <memcpy>
	pkt->frags->len -= offset;
   1acb6:	68b2      	ldr	r2, [r6, #8]
   1acb8:	8993      	ldrh	r3, [r2, #12]
   1acba:	eba3 030a 	sub.w	r3, r3, sl
   1acbe:	8193      	strh	r3, [r2, #12]
   1acc0:	f896 2034 	ldrb.w	r2, [r6, #52]	; 0x34
	if (net_pkt_ll_reserve(pkt)) {
   1acc4:	b13a      	cbz	r2, 1acd6 <net_6lo_uncompress+0x302>
	return pkt->frags->data;
   1acc6:	68b3      	ldr	r3, [r6, #8]
	return net_pkt_ip_data(pkt) - net_pkt_ll_reserve(pkt);
   1acc8:	6899      	ldr	r1, [r3, #8]
		memcpy(frag->data - net_pkt_ll_reserve(pkt),
   1acca:	68bb      	ldr	r3, [r7, #8]
   1accc:	4250      	negs	r0, r2
   1acce:	4401      	add	r1, r0
   1acd0:	4418      	add	r0, r3
   1acd2:	f7e5 fd73 	bl	7bc <memcpy>
	net_pkt_frag_insert(pkt, frag);
   1acd6:	4639      	mov	r1, r7
   1acd8:	4630      	mov	r0, r6
   1acda:	f7fe feab 	bl	19a34 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   1acde:	4630      	mov	r0, r6
   1ace0:	f7fe ff15 	bl	19b0e <net_pkt_compact>
   1ace4:	68b2      	ldr	r2, [r6, #8]
	size_t bytes = 0;
   1ace6:	2300      	movs	r3, #0
	while (buf) {
   1ace8:	2a00      	cmp	r2, #0
   1acea:	d16b      	bne.n	1adc4 <net_6lo_uncompress+0x3f0>
	len = net_pkt_get_len(pkt) - NET_IPV6H_LEN;
   1acec:	3b28      	subs	r3, #40	; 0x28
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   1acee:	79a9      	ldrb	r1, [r5, #6]
	len = net_pkt_get_len(pkt) - NET_IPV6H_LEN;
   1acf0:	b29b      	uxth	r3, r3
	ipv6->len[0] = len >> 8;
   1acf2:	0a1a      	lsrs	r2, r3, #8
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   1acf4:	2911      	cmp	r1, #17
	ipv6->len[0] = len >> 8;
   1acf6:	712a      	strb	r2, [r5, #4]
	ipv6->len[1] = (u8_t)len;
   1acf8:	716b      	strb	r3, [r5, #5]
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   1acfa:	d067      	beq.n	1adcc <net_6lo_uncompress+0x3f8>
		return uncompress_ipv6_header(pkt);
   1acfc:	2001      	movs	r0, #1
   1acfe:	e67a      	b.n	1a9f6 <net_6lo_uncompress+0x22>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   1ad00:	f002 0203 	and.w	r2, r2, #3
   1ad04:	2a02      	cmp	r2, #2
   1ad06:	d011      	beq.n	1ad2c <net_6lo_uncompress+0x358>
   1ad08:	2a03      	cmp	r2, #3
   1ad0a:	d01f      	beq.n	1ad4c <net_6lo_uncompress+0x378>
   1ad0c:	2a01      	cmp	r2, #1
   1ad0e:	4421      	add	r1, r4
   1ad10:	d001      	beq.n	1ad16 <net_6lo_uncompress+0x342>
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   1ad12:	2210      	movs	r2, #16
   1ad14:	e715      	b.n	1ab42 <net_6lo_uncompress+0x16e>
		ipv6->dst.s6_addr[0] = 0xFE;
   1ad16:	23fe      	movs	r3, #254	; 0xfe
   1ad18:	762b      	strb	r3, [r5, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   1ad1a:	2380      	movs	r3, #128	; 0x80
   1ad1c:	766b      	strb	r3, [r5, #25]
		memcpy(&ipv6->dst.s6_addr[8], &CIPHC[offset], 8);
   1ad1e:	2208      	movs	r2, #8
   1ad20:	f105 0020 	add.w	r0, r5, #32
   1ad24:	f7e5 fd4a 	bl	7bc <memcpy>
		offset += 8;
   1ad28:	3408      	adds	r4, #8
   1ad2a:	e749      	b.n	1abc0 <net_6lo_uncompress+0x1ec>
		ipv6->dst.s6_addr[1] = 0x80;
   1ad2c:	2080      	movs	r0, #128	; 0x80
		ipv6->dst.s6_addr[0] = 0xFE;
   1ad2e:	23fe      	movs	r3, #254	; 0xfe
		ipv6->dst.s6_addr[1] = 0x80;
   1ad30:	7668      	strb	r0, [r5, #25]
		ipv6->dst.s6_addr[11] = 0xFF;
   1ad32:	20ff      	movs	r0, #255	; 0xff
   1ad34:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
		memcpy(&ipv6->dst.s6_addr[14], &CIPHC[offset], 2);
   1ad38:	4421      	add	r1, r4
		ipv6->dst.s6_addr[0] = 0xFE;
   1ad3a:	762b      	strb	r3, [r5, #24]
		ipv6->dst.s6_addr[12] = 0xFE;
   1ad3c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
		memcpy(&ipv6->dst.s6_addr[14], &CIPHC[offset], 2);
   1ad40:	f105 0026 	add.w	r0, r5, #38	; 0x26
   1ad44:	f7e5 fd3a 	bl	7bc <memcpy>
		offset += 2;
   1ad48:	3402      	adds	r4, #2
   1ad4a:	e739      	b.n	1abc0 <net_6lo_uncompress+0x1ec>
		net_ipv6_addr_create_iid(&ipv6->dst, net_pkt_ll_dst(pkt));
   1ad4c:	f106 0128 	add.w	r1, r6, #40	; 0x28
   1ad50:	4640      	mov	r0, r8
   1ad52:	f7ff fb22 	bl	1a39a <net_ipv6_addr_create_iid>
   1ad56:	e74c      	b.n	1abf2 <net_6lo_uncompress+0x21e>
		return 0;
   1ad58:	2400      	movs	r4, #0
   1ad5a:	e74a      	b.n	1abf2 <net_6lo_uncompress+0x21e>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   1ad5c:	f7e5 fd2e 	bl	7bc <memcpy>
		udp->dst_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   1ad60:	68b2      	ldr	r2, [r6, #8]
   1ad62:	fa5f fa8a 	uxtb.w	sl, sl
   1ad66:	6892      	ldr	r2, [r2, #8]
   1ad68:	f812 200a 	ldrb.w	r2, [r2, sl]
   1ad6c:	0212      	lsls	r2, r2, #8
   1ad6e:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
   1ad72:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
		offset += 2;
   1ad76:	3404      	adds	r4, #4
   1ad78:	e778      	b.n	1ac6c <net_6lo_uncompress+0x298>
		udp->src_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   1ad7a:	5c08      	ldrb	r0, [r1, r0]
   1ad7c:	0200      	lsls	r0, r0, #8
   1ad7e:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
   1ad82:	f8ab 0028 	strh.w	r0, [fp, #40]	; 0x28
		offset++;
   1ad86:	1ca0      	adds	r0, r4, #2
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   1ad88:	fa51 f180 	uxtab	r1, r1, r0
   1ad8c:	f10b 002a 	add.w	r0, fp, #42	; 0x2a
   1ad90:	f7e5 fd14 	bl	7bc <memcpy>
   1ad94:	e7ef      	b.n	1ad76 <net_6lo_uncompress+0x3a2>
		udp->src_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   1ad96:	5c0a      	ldrb	r2, [r1, r0]
   1ad98:	0912      	lsrs	r2, r2, #4
   1ad9a:	0212      	lsls	r2, r2, #8
   1ad9c:	f442 4230 	orr.w	r2, r2, #45056	; 0xb000
   1ada0:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
   1ada4:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
		udp->dst_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   1ada8:	5c0a      	ldrb	r2, [r1, r0]
   1adaa:	0212      	lsls	r2, r2, #8
   1adac:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
   1adb0:	f442 4230 	orr.w	r2, r2, #45056	; 0xb000
   1adb4:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
   1adb8:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
		offset++;
   1adbc:	3402      	adds	r4, #2
   1adbe:	e755      	b.n	1ac6c <net_6lo_uncompress+0x298>
	struct net_udp_hdr *udp = NULL;
   1adc0:	46c1      	mov	r9, r8
   1adc2:	e765      	b.n	1ac90 <net_6lo_uncompress+0x2bc>
		bytes += buf->len;
   1adc4:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
   1adc6:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   1adc8:	440b      	add	r3, r1
   1adca:	e78d      	b.n	1ace8 <net_6lo_uncompress+0x314>
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   1adcc:	f1b9 0f00 	cmp.w	r9, #0
   1add0:	d094      	beq.n	1acfc <net_6lo_uncompress+0x328>
		udp->len = htons(len);
   1add2:	ba5b      	rev16	r3, r3
   1add4:	f8a9 3004 	strh.w	r3, [r9, #4]
		if (chksum) {
   1add8:	f1b8 0f00 	cmp.w	r8, #0
   1addc:	d08e      	beq.n	1acfc <net_6lo_uncompress+0x328>
	return net_calc_chksum(pkt, IPPROTO_ICMP);
}

static inline u16_t net_calc_chksum_udp(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_UDP);
   1adde:	4630      	mov	r0, r6
   1ade0:	f7ff fa78 	bl	1a2d4 <net_calc_chksum>
			udp->chksum = ~net_calc_chksum_udp(pkt);
   1ade4:	43c0      	mvns	r0, r0
   1ade6:	f8a9 0006 	strh.w	r0, [r9, #6]
   1adea:	e787      	b.n	1acfc <net_6lo_uncompress+0x328>
	} else if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPV6) ==
   1adec:	f002 0241 	and.w	r2, r2, #65	; 0x41
   1adf0:	2a41      	cmp	r2, #65	; 0x41
   1adf2:	d183      	bne.n	1acfc <net_6lo_uncompress+0x328>
	memmove(frag->data, frag->data + 1, frag->len - 1);
   1adf4:	89a2      	ldrh	r2, [r4, #12]
   1adf6:	1c59      	adds	r1, r3, #1
   1adf8:	4618      	mov	r0, r3
   1adfa:	3a01      	subs	r2, #1
   1adfc:	f7e5 fcc6 	bl	78c <memmove>
	frag->len -= 1;
   1ae00:	89a3      	ldrh	r3, [r4, #12]
   1ae02:	3b01      	subs	r3, #1
   1ae04:	81a3      	strh	r3, [r4, #12]
   1ae06:	e779      	b.n	1acfc <net_6lo_uncompress+0x328>
   1ae08:	20004bc0 	.word	0x20004bc0

0001ae0c <net_stats_update_icmp_drop>:
	net_stats.icmp.drop++;
   1ae0c:	4a02      	ldr	r2, [pc, #8]	; (1ae18 <net_stats_update_icmp_drop+0xc>)
   1ae0e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1ae10:	3301      	adds	r3, #1
   1ae12:	63d3      	str	r3, [r2, #60]	; 0x3c
   1ae14:	4770      	bx	lr
   1ae16:	bf00      	nop
   1ae18:	20004cf4 	.word	0x20004cf4

0001ae1c <net_pkt_append_be16>:
{
   1ae1c:	b507      	push	{r0, r1, r2, lr}
	u16_t value = sys_cpu_to_be16(data);
   1ae1e:	aa02      	add	r2, sp, #8
   1ae20:	ba49      	rev16	r1, r1
   1ae22:	f822 1d02 	strh.w	r1, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1ae26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ae2a:	2102      	movs	r1, #2
   1ae2c:	f7fe feb4 	bl	19b98 <net_pkt_append>
}
   1ae30:	1e83      	subs	r3, r0, #2
   1ae32:	4258      	negs	r0, r3
   1ae34:	4158      	adcs	r0, r3
   1ae36:	b003      	add	sp, #12
   1ae38:	f85d fb04 	ldr.w	pc, [sp], #4

0001ae3c <net_icmpv6_register_handler>:
	node->next = list->head;
   1ae3c:	4b03      	ldr	r3, [pc, #12]	; (1ae4c <net_icmpv6_register_handler+0x10>)
   1ae3e:	681a      	ldr	r2, [r3, #0]
   1ae40:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
   1ae42:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1ae44:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
   1ae46:	b902      	cbnz	r2, 1ae4a <net_icmpv6_register_handler+0xe>
		list->tail = list->head;
   1ae48:	6058      	str	r0, [r3, #4]
   1ae4a:	4770      	bx	lr
   1ae4c:	20003158 	.word	0x20003158

0001ae50 <net_icmpv6_unregister_handler>:
{
	sys_slist_prepend(&handlers, &handler->node);
}

void net_icmpv6_unregister_handler(struct net_icmpv6_handler *handler)
{
   1ae50:	4b0c      	ldr	r3, [pc, #48]	; (1ae84 <net_icmpv6_unregister_handler+0x34>)
   1ae52:	681a      	ldr	r2, [r3, #0]
	sys_snode_t *prev = NULL;
   1ae54:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1ae56:	b902      	cbnz	r2, 1ae5a <net_icmpv6_unregister_handler+0xa>
   1ae58:	4770      	bx	lr
		if (test == node) {
   1ae5a:	4290      	cmp	r0, r2
   1ae5c:	d10f      	bne.n	1ae7e <net_icmpv6_unregister_handler+0x2e>
   1ae5e:	6802      	ldr	r2, [r0, #0]
	if (!prev_node) {
   1ae60:	b939      	cbnz	r1, 1ae72 <net_icmpv6_unregister_handler+0x22>
		if (list->tail == node) {
   1ae62:	6859      	ldr	r1, [r3, #4]
		list->head = node->next;
   1ae64:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   1ae66:	4288      	cmp	r0, r1
   1ae68:	d100      	bne.n	1ae6c <net_icmpv6_unregister_handler+0x1c>
			list->tail = list->head;
   1ae6a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1ae6c:	2300      	movs	r3, #0
   1ae6e:	6003      	str	r3, [r0, #0]
   1ae70:	4770      	bx	lr
		prev_node->next = node->next;
   1ae72:	600a      	str	r2, [r1, #0]
		if (list->tail == node) {
   1ae74:	685a      	ldr	r2, [r3, #4]
   1ae76:	4290      	cmp	r0, r2
			list->tail = prev_node;
   1ae78:	bf08      	it	eq
   1ae7a:	6059      	streq	r1, [r3, #4]
   1ae7c:	e7f6      	b.n	1ae6c <net_icmpv6_unregister_handler+0x1c>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1ae7e:	4611      	mov	r1, r2
   1ae80:	6812      	ldr	r2, [r2, #0]
   1ae82:	e7e8      	b.n	1ae56 <net_icmpv6_unregister_handler+0x6>
   1ae84:	20003158 	.word	0x20003158

0001ae88 <net_icmpv6_set_chksum>:
#define echo_reply_debug(pkt)
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

struct net_buf *net_icmpv6_set_chksum(struct net_pkt *pkt,
				      struct net_buf *frag)
{
   1ae88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ae8c:	b086      	sub	sp, #24
	struct net_icmp_hdr *icmp_hdr;
	u16_t chksum = 0;
   1ae8e:	2700      	movs	r7, #0
{
   1ae90:	4604      	mov	r4, r0
   1ae92:	460e      	mov	r6, r1
	u16_t chksum = 0;
   1ae94:	f8ad 7014 	strh.w	r7, [sp, #20]
	u16_t pos;

	icmp_hdr = net_pkt_icmp_data(pkt);
   1ae98:	f7fe ffdb 	bl	19e52 <net_pkt_icmp_data>
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1ae9c:	2204      	movs	r2, #4
   1ae9e:	4605      	mov	r5, r0
   1aea0:	4601      	mov	r1, r0
   1aea2:	4620      	mov	r0, r4
   1aea4:	f7ff fa69 	bl	1a37a <net_header_fits>
   1aea8:	b160      	cbz	r0, 1aec4 <net_icmpv6_set_chksum+0x3c>
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1aeaa:	b15d      	cbz	r5, 1aec4 <net_icmpv6_set_chksum+0x3c>
		icmp_hdr->chksum = 0;
   1aeac:	70af      	strb	r7, [r5, #2]
   1aeae:	70ef      	strb	r7, [r5, #3]
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1aeb0:	213a      	movs	r1, #58	; 0x3a
   1aeb2:	4620      	mov	r0, r4
   1aeb4:	f7ff fa0e 	bl	1a2d4 <net_calc_chksum>
		icmp_hdr->chksum = ~net_calc_chksum_icmpv6(pkt);
   1aeb8:	43c0      	mvns	r0, r0
   1aeba:	8068      	strh	r0, [r5, #2]
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   1aebc:	4630      	mov	r0, r6
   1aebe:	b006      	add	sp, #24
   1aec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			     net_pkt_ipv6_ext_len(pkt) +
   1aec4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt) +
   1aec8:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
   1aecc:	2702      	movs	r7, #2
   1aece:	441a      	add	r2, r3
   1aed0:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   1aed4:	ad05      	add	r5, sp, #20
   1aed6:	f10d 0316 	add.w	r3, sp, #22
   1aeda:	443a      	add	r2, r7
   1aedc:	4631      	mov	r1, r6
   1aede:	f8cd 8008 	str.w	r8, [sp, #8]
   1aee2:	9501      	str	r5, [sp, #4]
   1aee4:	9700      	str	r7, [sp, #0]
   1aee6:	4620      	mov	r0, r4
   1aee8:	f7fe ff0a 	bl	19d00 <net_pkt_write>
   1aeec:	213a      	movs	r1, #58	; 0x3a
   1aeee:	4606      	mov	r6, r0
   1aef0:	4620      	mov	r0, r4
   1aef2:	f7ff f9ef 	bl	1a2d4 <net_calc_chksum>
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1aef6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1aefa:	f8cd 8008 	str.w	r8, [sp, #8]
	chksum = ~net_calc_chksum_icmpv6(pkt);
   1aefe:	43c0      	mvns	r0, r0
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1af00:	3a02      	subs	r2, #2
	chksum = ~net_calc_chksum_icmpv6(pkt);
   1af02:	f8ad 0014 	strh.w	r0, [sp, #20]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1af06:	4631      	mov	r1, r6
   1af08:	9501      	str	r5, [sp, #4]
   1af0a:	9700      	str	r7, [sp, #0]
   1af0c:	f10d 0316 	add.w	r3, sp, #22
   1af10:	b292      	uxth	r2, r2
   1af12:	4620      	mov	r0, r4
   1af14:	f7fe fef4 	bl	19d00 <net_pkt_write>
   1af18:	4606      	mov	r6, r0
	return frag;
   1af1a:	e7cf      	b.n	1aebc <net_icmpv6_set_chksum+0x34>

0001af1c <net_icmpv6_get_hdr>:

struct net_icmp_hdr *net_icmpv6_get_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1af1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1af1e:	4606      	mov	r6, r0
   1af20:	460d      	mov	r5, r1
	/* If the ICMP header can fit the first fragment, then access it
	 * directly (fast path), otherwise read the values one by one
	 * using net_frag_read*() functions (slow path).
	 */

	icmp_hdr = net_pkt_icmp_data(pkt);
   1af22:	f7fe ff96 	bl	19e52 <net_pkt_icmp_data>
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1af26:	2204      	movs	r2, #4
   1af28:	4604      	mov	r4, r0
   1af2a:	4601      	mov	r1, r0
   1af2c:	4630      	mov	r0, r6
   1af2e:	f7ff fa24 	bl	1a37a <net_header_fits>
   1af32:	b100      	cbz	r0, 1af36 <net_icmpv6_get_hdr+0x1a>
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1af34:	bb0c      	cbnz	r4, 1af7a <net_icmpv6_get_hdr+0x5e>
		return icmp_hdr;
	}

	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1af36:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
				net_pkt_ipv6_ext_len(pkt), &pos, &hdr->type);
   1af3a:	f896 1039 	ldrb.w	r1, [r6, #57]	; 0x39
static inline struct net_buf *net_frag_read_u8(struct net_buf *frag,
					      u16_t offset,
					      u16_t *pos,
					      u8_t *value)
{
	return net_frag_read(frag, offset, pos, 1, value);
   1af3e:	9500      	str	r5, [sp, #0]
   1af40:	4401      	add	r1, r0
   1af42:	2301      	movs	r3, #1
   1af44:	f10d 020e 	add.w	r2, sp, #14
   1af48:	68b0      	ldr	r0, [r6, #8]
   1af4a:	f7fe fe85 	bl	19c58 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->code);
   1af4e:	1c6b      	adds	r3, r5, #1
   1af50:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1af54:	9300      	str	r3, [sp, #0]
   1af56:	f10d 020e 	add.w	r2, sp, #14
   1af5a:	2301      	movs	r3, #1
   1af5c:	f7fe fe7c 	bl	19c58 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
			     (u8_t *)&hdr->chksum);
   1af60:	1cab      	adds	r3, r5, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1af62:	9300      	str	r3, [sp, #0]
   1af64:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1af68:	2302      	movs	r3, #2
   1af6a:	f10d 020e 	add.w	r2, sp, #14
   1af6e:	f7fe fe73 	bl	19c58 <net_frag_read>
	if (!frag) {
		NET_ASSERT(frag);
		return NULL;
   1af72:	2800      	cmp	r0, #0
   1af74:	bf14      	ite	ne
   1af76:	462c      	movne	r4, r5
   1af78:	2400      	moveq	r4, #0
	}

	return hdr;
}
   1af7a:	4620      	mov	r0, r4
   1af7c:	b004      	add	sp, #16
   1af7e:	bd70      	pop	{r4, r5, r6, pc}

0001af80 <net_icmpv6_set_hdr>:

struct net_icmp_hdr *net_icmpv6_set_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1af80:	b5f0      	push	{r4, r5, r6, r7, lr}
   1af82:	2204      	movs	r2, #4
   1af84:	b087      	sub	sp, #28
   1af86:	4605      	mov	r5, r0
   1af88:	460c      	mov	r4, r1
   1af8a:	f7ff f9f6 	bl	1a37a <net_header_fits>
   1af8e:	b100      	cbz	r0, 1af92 <net_icmpv6_set_hdr+0x12>
	struct net_buf *frag;
	u16_t pos;

	if (net_icmp_header_fits(pkt, hdr)) {
   1af90:	bb64      	cbnz	r4, 1afec <net_icmpv6_set_hdr+0x6c>
		return hdr;
	}

	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1af92:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
			     net_pkt_ipv6_ext_len(pkt), &pos,
   1af96:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1af9a:	9401      	str	r4, [sp, #4]
   1af9c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1afa0:	2701      	movs	r7, #1
   1afa2:	440a      	add	r2, r1
   1afa4:	f10d 0316 	add.w	r3, sp, #22
   1afa8:	68a9      	ldr	r1, [r5, #8]
   1afaa:	9602      	str	r6, [sp, #8]
   1afac:	9700      	str	r7, [sp, #0]
   1afae:	4628      	mov	r0, r5
   1afb0:	f7fe fea6 	bl	19d00 <net_pkt_write>
			     sizeof(hdr->type), &hdr->type, PKT_WAIT_TIME);
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->code),
   1afb4:	19e3      	adds	r3, r4, r7
   1afb6:	4601      	mov	r1, r0
   1afb8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1afbc:	9301      	str	r3, [sp, #4]
   1afbe:	9602      	str	r6, [sp, #8]
   1afc0:	f10d 0316 	add.w	r3, sp, #22
   1afc4:	9700      	str	r7, [sp, #0]
   1afc6:	4628      	mov	r0, r5
   1afc8:	f7fe fe9a 	bl	19d00 <net_pkt_write>
			     &hdr->code, PKT_WAIT_TIME);
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   1afcc:	1ca3      	adds	r3, r4, #2
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   1afce:	9301      	str	r3, [sp, #4]
   1afd0:	2302      	movs	r3, #2
   1afd2:	9300      	str	r3, [sp, #0]
   1afd4:	4601      	mov	r1, r0
   1afd6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1afda:	9602      	str	r6, [sp, #8]
   1afdc:	f10d 0316 	add.w	r3, sp, #22
   1afe0:	4628      	mov	r0, r5
   1afe2:	f7fe fe8d 	bl	19d00 <net_pkt_write>
	if (!frag) {
		NET_ASSERT(frag);
		return NULL;
   1afe6:	2800      	cmp	r0, #0
   1afe8:	bf08      	it	eq
   1afea:	2400      	moveq	r4, #0
	}

	return hdr;
}
   1afec:	4620      	mov	r0, r4
   1afee:	b007      	add	sp, #28
   1aff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0001aff4 <handle_echo_request>:

	return hdr;
}

static enum net_verdict handle_echo_request(struct net_pkt *orig)
{
   1aff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	echo_request_debug(orig);

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1aff8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1affc:	f8d0 8014 	ldr.w	r8, [r0, #20]
{
   1b000:	b096      	sub	sp, #88	; 0x58
   1b002:	4607      	mov	r7, r0
	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1b004:	2000      	movs	r0, #0
   1b006:	f7fe fc9d 	bl	19944 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1b00a:	4604      	mov	r4, r0
   1b00c:	2800      	cmp	r0, #0
   1b00e:	f000 80ec 	beq.w	1b1ea <handle_echo_request+0x1f6>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1b012:	68bd      	ldr	r5, [r7, #8]
	size_t bytes = 0;
   1b014:	2100      	movs	r1, #0
	while (buf) {
   1b016:	2d00      	cmp	r5, #0
   1b018:	f040 809c 	bne.w	1b154 <handle_echo_request+0x160>
   1b01c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1b020:	462a      	mov	r2, r5
   1b022:	4638      	mov	r0, r7
   1b024:	f7fe fd10 	bl	19a48 <net_pkt_copy>

	payload_len = sys_get_be16(NET_IPV6_HDR(orig)->len) -
		sizeof(NET_ICMPH_LEN) - NET_ICMPV6_UNUSED_LEN;

	frag = net_pkt_copy_all(orig, 0, PKT_WAIT_TIME);
	if (!frag) {
   1b028:	4606      	mov	r6, r0
   1b02a:	2800      	cmp	r0, #0
   1b02c:	f000 80da 	beq.w	1b1e4 <handle_echo_request+0x1f0>
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   1b030:	4601      	mov	r1, r0
   1b032:	4620      	mov	r0, r4
   1b034:	f7fe fce4 	bl	19a00 <net_pkt_frag_add>
	pkt->family = family;
   1b038:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
	pkt->iface = iface;
   1b03c:	f8c4 8014 	str.w	r8, [r4, #20]
	pkt->family = family;
   1b040:	220a      	movs	r2, #10
   1b042:	f362 03c6 	bfi	r3, r2, #3, #4
   1b046:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	pkt->lladdr_src.type = iface->link_addr.type;
   1b04a:	f898 3015 	ldrb.w	r3, [r8, #21]
   1b04e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1b052:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1b056:	f106 0008 	add.w	r0, r6, #8
   1b05a:	f7fc ffe3 	bl	18024 <net_buf_simple_headroom>
	pkt->ip_hdr_len = len;
   1b05e:	2328      	movs	r3, #40	; 0x28
   1b060:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
   1b064:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
   1b068:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));

	if (net_pkt_ipv6_ext_len(orig)) {
   1b06c:	2b00      	cmp	r3, #0
   1b06e:	d075      	beq.n	1b15c <handle_echo_request+0x168>
	pkt->ipv6_ext_len = len;
   1b070:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	return pkt->frags->data;
   1b074:	68a3      	ldr	r3, [r4, #8]
   1b076:	689d      	ldr	r5, [r3, #8]
	} else {
		net_pkt_set_ipv6_ext_len(pkt, 0);
	}

	/* Set up IPv6 Header fields */
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1b078:	2360      	movs	r3, #96	; 0x60
   1b07a:	702b      	strb	r3, [r5, #0]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1b07c:	2300      	movs	r3, #0
   1b07e:	706b      	strb	r3, [r5, #1]
	NET_IPV6_HDR(pkt)->flow = 0;
   1b080:	70ab      	strb	r3, [r5, #2]
   1b082:	70eb      	strb	r3, [r5, #3]
   1b084:	f898 324c 	ldrb.w	r3, [r8, #588]	; 0x24c
	NET_IPV6_HDR(pkt)->hop_limit = net_if_ipv6_get_hop_limit(iface);
   1b088:	71eb      	strb	r3, [r5, #7]

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   1b08a:	7e2b      	ldrb	r3, [r5, #24]
   1b08c:	2bff      	cmp	r3, #255	; 0xff
   1b08e:	68bb      	ldr	r3, [r7, #8]
   1b090:	d167      	bne.n	1b162 <handle_echo_request+0x16e>
   1b092:	689b      	ldr	r3, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1b094:	ae02      	add	r6, sp, #8
   1b096:	f103 0208 	add.w	r2, r3, #8
   1b09a:	46b6      	mov	lr, r6
   1b09c:	3318      	adds	r3, #24
   1b09e:	6810      	ldr	r0, [r2, #0]
   1b0a0:	6851      	ldr	r1, [r2, #4]
   1b0a2:	46b4      	mov	ip, r6
   1b0a4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1b0a8:	3208      	adds	r2, #8
   1b0aa:	429a      	cmp	r2, r3
   1b0ac:	4666      	mov	r6, ip
   1b0ae:	d1f6      	bne.n	1b09e <handle_echo_request+0xaa>
   1b0b0:	f105 0c18 	add.w	ip, r5, #24
   1b0b4:	ae06      	add	r6, sp, #24
   1b0b6:	4672      	mov	r2, lr
   1b0b8:	ca03      	ldmia	r2!, {r0, r1}
   1b0ba:	42b2      	cmp	r2, r6
   1b0bc:	f8cc 0000 	str.w	r0, [ip]
   1b0c0:	f8cc 1004 	str.w	r1, [ip, #4]
   1b0c4:	4696      	mov	lr, r2
   1b0c6:	f10c 0c08 	add.w	ip, ip, #8
   1b0ca:	d1f4      	bne.n	1b0b6 <handle_echo_request+0xc2>
				&NET_IPV6_HDR(orig)->src);

		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1b0cc:	4619      	mov	r1, r3
   1b0ce:	4640      	mov	r0, r8
   1b0d0:	f7fe f98e 	bl	193f0 <net_if_ipv6_select_src_addr>
   1b0d4:	46b6      	mov	lr, r6
   1b0d6:	4603      	mov	r3, r0
   1b0d8:	f100 0c10 	add.w	ip, r0, #16
   1b0dc:	6818      	ldr	r0, [r3, #0]
   1b0de:	6859      	ldr	r1, [r3, #4]
   1b0e0:	4672      	mov	r2, lr
   1b0e2:	c203      	stmia	r2!, {r0, r1}
   1b0e4:	3308      	adds	r3, #8
   1b0e6:	4563      	cmp	r3, ip
   1b0e8:	4696      	mov	lr, r2
   1b0ea:	d1f7      	bne.n	1b0dc <handle_echo_request+0xe8>
   1b0ec:	3508      	adds	r5, #8
   1b0ee:	aa0a      	add	r2, sp, #40	; 0x28
   1b0f0:	4633      	mov	r3, r6
   1b0f2:	cb03      	ldmia	r3!, {r0, r1}
   1b0f4:	4293      	cmp	r3, r2
   1b0f6:	6028      	str	r0, [r5, #0]
   1b0f8:	6069      	str	r1, [r5, #4]
   1b0fa:	461e      	mov	r6, r3
   1b0fc:	f105 0508 	add.w	r5, r5, #8
   1b100:	d1f6      	bne.n	1b0f0 <handle_echo_request+0xfc>
			goto drop;
		}
#endif
	}

	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1b102:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b104:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;

	/* We must not set the destination ll address here but trust
	 * that it is set properly using a value from neighbor cache.
	 */
	net_pkt_ll_dst(pkt)->addr = NULL;
   1b106:	2500      	movs	r5, #0
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1b108:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   1b10c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	/* ICMPv6 fields */
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1b110:	a901      	add	r1, sp, #4
	net_pkt_ll_dst(pkt)->addr = NULL;
   1b112:	62a5      	str	r5, [r4, #40]	; 0x28
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1b114:	4620      	mov	r0, r4
   1b116:	f7ff ff01 	bl	1af1c <net_icmpv6_get_hdr>
	icmp_hdr->type = NET_ICMPV6_ECHO_REPLY;
   1b11a:	2381      	movs	r3, #129	; 0x81
   1b11c:	7003      	strb	r3, [r0, #0]
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1b11e:	4601      	mov	r1, r0
	icmp_hdr->code = 0;
   1b120:	7045      	strb	r5, [r0, #1]
	icmp_hdr->chksum = 0;
   1b122:	7085      	strb	r5, [r0, #2]
   1b124:	70c5      	strb	r5, [r0, #3]
	net_icmpv6_set_hdr(pkt, icmp_hdr);
   1b126:	4620      	mov	r0, r4
   1b128:	f7ff ff2a 	bl	1af80 <net_icmpv6_set_hdr>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1b12c:	68a1      	ldr	r1, [r4, #8]
   1b12e:	4620      	mov	r0, r4
   1b130:	f7ff feaa 	bl	1ae88 <net_icmpv6_set_chksum>

	echo_reply_debug(pkt);

	if (net_send_data(pkt) < 0) {
   1b134:	4620      	mov	r0, r4
   1b136:	f7fd fb49 	bl	187cc <net_send_data>
   1b13a:	42a8      	cmp	r0, r5
   1b13c:	db52      	blt.n	1b1e4 <handle_echo_request+0x1f0>
		goto drop;
	}

	net_pkt_unref(orig);
   1b13e:	4638      	mov	r0, r7
   1b140:	f7fe fc37 	bl	199b2 <net_pkt_unref>
	net_stats.icmp.sent++;
   1b144:	4a2b      	ldr	r2, [pc, #172]	; (1b1f4 <handle_echo_request+0x200>)
   1b146:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1b148:	3301      	adds	r3, #1
   1b14a:	6393      	str	r3, [r2, #56]	; 0x38
	net_stats_update_icmp_sent();

	return NET_OK;
   1b14c:	4628      	mov	r0, r5

drop_no_pkt:
	net_stats_update_icmp_drop();

	return NET_DROP;
}
   1b14e:	b016      	add	sp, #88	; 0x58
   1b150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes += buf->len;
   1b154:	89ab      	ldrh	r3, [r5, #12]
		buf = buf->frags;
   1b156:	682d      	ldr	r5, [r5, #0]
		bytes += buf->len;
   1b158:	4419      	add	r1, r3
   1b15a:	e75c      	b.n	1b016 <handle_echo_request+0x22>
	pkt->ipv6_ext_len = len;
   1b15c:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
   1b160:	e788      	b.n	1b074 <handle_echo_request+0x80>
	return pkt->frags->data;
   1b162:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1b166:	aa0a      	add	r2, sp, #40	; 0x28
   1b168:	f10c 0608 	add.w	r6, ip, #8
   1b16c:	f10c 0818 	add.w	r8, ip, #24
   1b170:	4613      	mov	r3, r2
   1b172:	6830      	ldr	r0, [r6, #0]
   1b174:	6871      	ldr	r1, [r6, #4]
   1b176:	4696      	mov	lr, r2
   1b178:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1b17c:	3608      	adds	r6, #8
   1b17e:	4546      	cmp	r6, r8
   1b180:	4672      	mov	r2, lr
   1b182:	d1f6      	bne.n	1b172 <handle_echo_request+0x17e>
   1b184:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1b186:	f10d 0e18 	add.w	lr, sp, #24
   1b18a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1b18e:	ab0e      	add	r3, sp, #56	; 0x38
   1b190:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
   1b194:	461a      	mov	r2, r3
   1b196:	6830      	ldr	r0, [r6, #0]
   1b198:	6871      	ldr	r1, [r6, #4]
   1b19a:	4698      	mov	r8, r3
   1b19c:	e8a8 0003 	stmia.w	r8!, {r0, r1}
   1b1a0:	3608      	adds	r6, #8
   1b1a2:	4566      	cmp	r6, ip
   1b1a4:	4643      	mov	r3, r8
   1b1a6:	d1f6      	bne.n	1b196 <handle_echo_request+0x1a2>
   1b1a8:	f105 0c08 	add.w	ip, r5, #8
   1b1ac:	ae12      	add	r6, sp, #72	; 0x48
   1b1ae:	4613      	mov	r3, r2
   1b1b0:	cb03      	ldmia	r3!, {r0, r1}
   1b1b2:	42b3      	cmp	r3, r6
   1b1b4:	f8cc 0000 	str.w	r0, [ip]
   1b1b8:	f8cc 1004 	str.w	r1, [ip, #4]
   1b1bc:	461a      	mov	r2, r3
   1b1be:	f10c 0c08 	add.w	ip, ip, #8
   1b1c2:	d1f4      	bne.n	1b1ae <handle_echo_request+0x1ba>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1b1c4:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   1b1c8:	3518      	adds	r5, #24
   1b1ca:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1b1ce:	aa16      	add	r2, sp, #88	; 0x58
   1b1d0:	4633      	mov	r3, r6
   1b1d2:	cb03      	ldmia	r3!, {r0, r1}
   1b1d4:	4293      	cmp	r3, r2
   1b1d6:	6028      	str	r0, [r5, #0]
   1b1d8:	6069      	str	r1, [r5, #4]
   1b1da:	461e      	mov	r6, r3
   1b1dc:	f105 0508 	add.w	r5, r5, #8
   1b1e0:	d1f6      	bne.n	1b1d0 <handle_echo_request+0x1dc>
   1b1e2:	e78e      	b.n	1b102 <handle_echo_request+0x10e>
	net_pkt_unref(pkt);
   1b1e4:	4620      	mov	r0, r4
   1b1e6:	f7fe fbe4 	bl	199b2 <net_pkt_unref>
	net_stats_update_icmp_drop();
   1b1ea:	f7ff fe0f 	bl	1ae0c <net_stats_update_icmp_drop>
	return NET_DROP;
   1b1ee:	2002      	movs	r0, #2
   1b1f0:	e7ad      	b.n	1b14e <handle_echo_request+0x15a>
   1b1f2:	bf00      	nop
   1b1f4:	20004cf4 	.word	0x20004cf4

0001b1f8 <net_icmpv6_get_ns_hdr>:
{
   1b1f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1b1fa:	460c      	mov	r4, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1b1fc:	2104      	movs	r1, #4
{
   1b1fe:	4605      	mov	r5, r0
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1b200:	f7fe fe39 	bl	19e76 <net_pkt_icmp_opt_data>
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1b204:	2214      	movs	r2, #20
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1b206:	4606      	mov	r6, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1b208:	4601      	mov	r1, r0
   1b20a:	4628      	mov	r0, r5
   1b20c:	f7ff f8b5 	bl	1a37a <net_header_fits>
   1b210:	b998      	cbnz	r0, 1b23a <net_icmpv6_get_ns_hdr+0x42>
			     net_pkt_ipv6_ext_len(pkt) +
   1b212:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
			     net_pkt_ip_hdr_len(pkt) +
   1b216:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
	frag = net_frag_read(pkt->frags,
   1b21a:	68a8      	ldr	r0, [r5, #8]
   1b21c:	4419      	add	r1, r3
			     &pos, sizeof(struct in6_addr), (u8_t *)&hdr->tgt);
   1b21e:	1d23      	adds	r3, r4, #4
	frag = net_frag_read(pkt->frags,
   1b220:	9300      	str	r3, [sp, #0]
   1b222:	f10d 020e 	add.w	r2, sp, #14
   1b226:	2310      	movs	r3, #16
   1b228:	3108      	adds	r1, #8
   1b22a:	f7fe fd15 	bl	19c58 <net_frag_read>
	if (!frag) {
   1b22e:	2800      	cmp	r0, #0
		return NULL;
   1b230:	bf08      	it	eq
   1b232:	2400      	moveq	r4, #0
}
   1b234:	4620      	mov	r0, r4
   1b236:	b004      	add	sp, #16
   1b238:	bd70      	pop	{r4, r5, r6, pc}
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1b23a:	4634      	mov	r4, r6
   1b23c:	e7fa      	b.n	1b234 <net_icmpv6_get_ns_hdr+0x3c>

0001b23e <net_icmpv6_set_ns_hdr>:
{
   1b23e:	b570      	push	{r4, r5, r6, lr}
   1b240:	b086      	sub	sp, #24
	const u32_t reserved = 0;
   1b242:	2300      	movs	r3, #0
{
   1b244:	460d      	mov	r5, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1b246:	2104      	movs	r1, #4
{
   1b248:	4604      	mov	r4, r0
	const u32_t reserved = 0;
   1b24a:	9305      	str	r3, [sp, #20]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1b24c:	f7fe fe13 	bl	19e76 <net_pkt_icmp_opt_data>
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1b250:	2214      	movs	r2, #20
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1b252:	4606      	mov	r6, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1b254:	4601      	mov	r1, r0
   1b256:	4620      	mov	r0, r4
   1b258:	f7ff f88f 	bl	1a37a <net_header_fits>
   1b25c:	bb28      	cbnz	r0, 1b2aa <net_icmpv6_set_ns_hdr+0x6c>
			     net_pkt_ipv6_ext_len(pkt) +
   1b25e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1b262:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
   1b266:	68a1      	ldr	r1, [r4, #8]
   1b268:	441a      	add	r2, r3
   1b26a:	ab05      	add	r3, sp, #20
   1b26c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1b270:	9301      	str	r3, [sp, #4]
   1b272:	2304      	movs	r3, #4
   1b274:	9300      	str	r3, [sp, #0]
   1b276:	3204      	adds	r2, #4
   1b278:	f10d 0312 	add.w	r3, sp, #18
   1b27c:	9602      	str	r6, [sp, #8]
   1b27e:	4620      	mov	r0, r4
   1b280:	f7fe fd3e 	bl	19d00 <net_pkt_write>
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1b284:	1d2b      	adds	r3, r5, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1b286:	9301      	str	r3, [sp, #4]
   1b288:	2310      	movs	r3, #16
   1b28a:	9300      	str	r3, [sp, #0]
   1b28c:	4601      	mov	r1, r0
   1b28e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1b292:	9602      	str	r6, [sp, #8]
   1b294:	f10d 0312 	add.w	r3, sp, #18
   1b298:	4620      	mov	r0, r4
   1b29a:	f7fe fd31 	bl	19d00 <net_pkt_write>
	if (!frag) {
   1b29e:	2800      	cmp	r0, #0
		return NULL;
   1b2a0:	bf08      	it	eq
   1b2a2:	2500      	moveq	r5, #0
}
   1b2a4:	4628      	mov	r0, r5
   1b2a6:	b006      	add	sp, #24
   1b2a8:	bd70      	pop	{r4, r5, r6, pc}
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1b2aa:	4635      	mov	r5, r6
   1b2ac:	e7fa      	b.n	1b2a4 <net_icmpv6_set_ns_hdr+0x66>

0001b2ae <net_icmpv6_get_nd_opt_hdr>:
{
   1b2ae:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1b2b0:	460c      	mov	r4, r1
					 net_pkt_ipv6_ext_opt_len(pkt));
   1b2b2:	f890 103a 	ldrb.w	r1, [r0, #58]	; 0x3a
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr) +
   1b2b6:	3104      	adds	r1, #4
{
   1b2b8:	4605      	mov	r5, r0
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr) +
   1b2ba:	f7fe fddc 	bl	19e76 <net_pkt_icmp_opt_data>
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1b2be:	2202      	movs	r2, #2
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr) +
   1b2c0:	4606      	mov	r6, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1b2c2:	4601      	mov	r1, r0
   1b2c4:	4628      	mov	r0, r5
   1b2c6:	f7ff f858 	bl	1a37a <net_header_fits>
   1b2ca:	b9f8      	cbnz	r0, 1b30c <net_icmpv6_get_nd_opt_hdr+0x5e>
				net_pkt_ipv6_ext_len(pkt) +
   1b2cc:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
				net_pkt_ip_hdr_len(pkt) +
   1b2d0:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
	return net_frag_read(frag, offset, pos, 1, value);
   1b2d4:	9400      	str	r4, [sp, #0]
   1b2d6:	4419      	add	r1, r3
				net_pkt_ipv6_ext_opt_len(pkt),
   1b2d8:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   1b2dc:	68a8      	ldr	r0, [r5, #8]
	frag = net_frag_read_u8(pkt->frags,
   1b2de:	3104      	adds	r1, #4
   1b2e0:	4419      	add	r1, r3
   1b2e2:	f10d 020e 	add.w	r2, sp, #14
   1b2e6:	2301      	movs	r3, #1
   1b2e8:	b289      	uxth	r1, r1
   1b2ea:	f7fe fcb5 	bl	19c58 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->len);
   1b2ee:	1c63      	adds	r3, r4, #1
   1b2f0:	9300      	str	r3, [sp, #0]
   1b2f2:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1b2f6:	2301      	movs	r3, #1
   1b2f8:	f10d 020e 	add.w	r2, sp, #14
   1b2fc:	f7fe fcac 	bl	19c58 <net_frag_read>
	if (!frag) {
   1b300:	2800      	cmp	r0, #0
		return NULL;
   1b302:	bf08      	it	eq
   1b304:	2400      	moveq	r4, #0
}
   1b306:	4620      	mov	r0, r4
   1b308:	b004      	add	sp, #16
   1b30a:	bd70      	pop	{r4, r5, r6, pc}
		return (struct net_icmpv6_nd_opt_hdr *)opt_data;
   1b30c:	4634      	mov	r4, r6
   1b30e:	e7fa      	b.n	1b306 <net_icmpv6_get_nd_opt_hdr+0x58>

0001b310 <net_icmpv6_get_na_hdr>:
{
   1b310:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b312:	460c      	mov	r4, r1
   1b314:	b085      	sub	sp, #20
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1b316:	2104      	movs	r1, #4
{
   1b318:	4605      	mov	r5, r0
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1b31a:	f7fe fdac 	bl	19e76 <net_pkt_icmp_opt_data>
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1b31e:	2214      	movs	r2, #20
   1b320:	4601      	mov	r1, r0
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1b322:	4606      	mov	r6, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1b324:	4628      	mov	r0, r5
   1b326:	f7ff f828 	bl	1a37a <net_header_fits>
   1b32a:	4607      	mov	r7, r0
   1b32c:	bb18      	cbnz	r0, 1b376 <net_icmpv6_get_na_hdr+0x66>
				net_pkt_ipv6_ext_len(pkt) +
   1b32e:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1b332:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
   1b336:	9400      	str	r4, [sp, #0]
   1b338:	4419      	add	r1, r3
   1b33a:	f10d 020e 	add.w	r2, sp, #14
   1b33e:	2301      	movs	r3, #1
   1b340:	3104      	adds	r1, #4
   1b342:	68a8      	ldr	r0, [r5, #8]
   1b344:	f7fe fc88 	bl	19c58 <net_frag_read>
	return net_frag_read(frag, offset, pos, len, NULL);
   1b348:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1b34c:	9700      	str	r7, [sp, #0]
   1b34e:	2303      	movs	r3, #3
   1b350:	f10d 020e 	add.w	r2, sp, #14
   1b354:	f7fe fc80 	bl	19c58 <net_frag_read>
			     (u8_t *)&hdr->tgt);
   1b358:	1d23      	adds	r3, r4, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(struct in6_addr),
   1b35a:	9300      	str	r3, [sp, #0]
   1b35c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1b360:	2310      	movs	r3, #16
   1b362:	f10d 020e 	add.w	r2, sp, #14
   1b366:	f7fe fc77 	bl	19c58 <net_frag_read>
	if (!frag) {
   1b36a:	2800      	cmp	r0, #0
		return NULL;
   1b36c:	bf08      	it	eq
   1b36e:	2400      	moveq	r4, #0
}
   1b370:	4620      	mov	r0, r4
   1b372:	b005      	add	sp, #20
   1b374:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (struct net_icmpv6_na_hdr *)opt_data;
   1b376:	4634      	mov	r4, r6
   1b378:	e7fa      	b.n	1b370 <net_icmpv6_get_na_hdr+0x60>

0001b37a <net_icmpv6_set_na_hdr>:
{
   1b37a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b37c:	b087      	sub	sp, #28
	const u8_t reserved[3] = { 0 };
   1b37e:	2300      	movs	r3, #0
{
   1b380:	460d      	mov	r5, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1b382:	2104      	movs	r1, #4
{
   1b384:	4604      	mov	r4, r0
	const u8_t reserved[3] = { 0 };
   1b386:	f8ad 3014 	strh.w	r3, [sp, #20]
   1b38a:	f88d 3016 	strb.w	r3, [sp, #22]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1b38e:	f7fe fd72 	bl	19e76 <net_pkt_icmp_opt_data>
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1b392:	2214      	movs	r2, #20
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1b394:	4606      	mov	r6, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1b396:	4601      	mov	r1, r0
   1b398:	4620      	mov	r0, r4
	const u8_t reserved[3] = { 0 };
   1b39a:	af05      	add	r7, sp, #20
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1b39c:	f7fe ffed 	bl	1a37a <net_header_fits>
   1b3a0:	bb80      	cbnz	r0, 1b404 <net_icmpv6_set_na_hdr+0x8a>
			     net_pkt_ipv6_ext_len(pkt) +
   1b3a2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
			     net_pkt_ip_hdr_len(pkt) +
   1b3a6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
	frag = net_pkt_write(pkt, pkt->frags,
   1b3aa:	9501      	str	r5, [sp, #4]
   1b3ac:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1b3b0:	441a      	add	r2, r3
   1b3b2:	2301      	movs	r3, #1
   1b3b4:	9300      	str	r3, [sp, #0]
   1b3b6:	3204      	adds	r2, #4
   1b3b8:	f10d 0312 	add.w	r3, sp, #18
   1b3bc:	68a1      	ldr	r1, [r4, #8]
   1b3be:	9602      	str	r6, [sp, #8]
   1b3c0:	4620      	mov	r0, r4
   1b3c2:	f7fe fc9d 	bl	19d00 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(reserved),
   1b3c6:	2303      	movs	r3, #3
   1b3c8:	4601      	mov	r1, r0
   1b3ca:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1b3ce:	9300      	str	r3, [sp, #0]
   1b3d0:	9602      	str	r6, [sp, #8]
   1b3d2:	f10d 0312 	add.w	r3, sp, #18
   1b3d6:	9701      	str	r7, [sp, #4]
   1b3d8:	4620      	mov	r0, r4
   1b3da:	f7fe fc91 	bl	19d00 <net_pkt_write>
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1b3de:	1d2b      	adds	r3, r5, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1b3e0:	9301      	str	r3, [sp, #4]
   1b3e2:	2310      	movs	r3, #16
   1b3e4:	9300      	str	r3, [sp, #0]
   1b3e6:	4601      	mov	r1, r0
   1b3e8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1b3ec:	9602      	str	r6, [sp, #8]
   1b3ee:	f10d 0312 	add.w	r3, sp, #18
   1b3f2:	4620      	mov	r0, r4
   1b3f4:	f7fe fc84 	bl	19d00 <net_pkt_write>
	if (!frag) {
   1b3f8:	2800      	cmp	r0, #0
		return NULL;
   1b3fa:	bf08      	it	eq
   1b3fc:	2500      	moveq	r5, #0
}
   1b3fe:	4628      	mov	r0, r5
   1b400:	b007      	add	sp, #28
   1b402:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (struct net_icmpv6_na_hdr *)opt_data;
   1b404:	4635      	mov	r5, r6
   1b406:	e7fa      	b.n	1b3fe <net_icmpv6_set_na_hdr+0x84>

0001b408 <net_icmpv6_get_ra_hdr>:
{
   1b408:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1b40a:	460c      	mov	r4, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1b40c:	2104      	movs	r1, #4
{
   1b40e:	4605      	mov	r5, r0
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1b410:	f7fe fd31 	bl	19e76 <net_pkt_icmp_opt_data>
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1b414:	220c      	movs	r2, #12
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1b416:	4606      	mov	r6, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1b418:	4601      	mov	r1, r0
   1b41a:	4628      	mov	r0, r5
   1b41c:	f7fe ffad 	bl	1a37a <net_header_fits>
   1b420:	2800      	cmp	r0, #0
   1b422:	d137      	bne.n	1b494 <net_icmpv6_get_ra_hdr+0x8c>
				net_pkt_ipv6_ext_len(pkt) +
   1b424:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1b428:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
	return net_frag_read(frag, offset, pos, 1, value);
   1b42c:	9400      	str	r4, [sp, #0]
   1b42e:	4419      	add	r1, r3
   1b430:	f10d 020e 	add.w	r2, sp, #14
   1b434:	2301      	movs	r3, #1
   1b436:	3104      	adds	r1, #4
   1b438:	68a8      	ldr	r0, [r5, #8]
   1b43a:	f7fe fc0d 	bl	19c58 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   1b43e:	1c63      	adds	r3, r4, #1
   1b440:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1b444:	9300      	str	r3, [sp, #0]
   1b446:	f10d 020e 	add.w	r2, sp, #14
   1b44a:	2301      	movs	r3, #1
   1b44c:	f7fe fc04 	bl	19c58 <net_frag_read>
			     (u8_t *)&hdr->router_lifetime);
   1b450:	1ca3      	adds	r3, r4, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->router_lifetime),
   1b452:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1b456:	9300      	str	r3, [sp, #0]
   1b458:	f10d 020e 	add.w	r2, sp, #14
   1b45c:	2302      	movs	r3, #2
   1b45e:	f7fe fbfb 	bl	19c58 <net_frag_read>
			     (u8_t *)&hdr->reachable_time);
   1b462:	1d23      	adds	r3, r4, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->reachable_time),
   1b464:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1b468:	9300      	str	r3, [sp, #0]
   1b46a:	f10d 020e 	add.w	r2, sp, #14
   1b46e:	2304      	movs	r3, #4
   1b470:	f7fe fbf2 	bl	19c58 <net_frag_read>
			     (u8_t *)&hdr->retrans_timer);
   1b474:	f104 0308 	add.w	r3, r4, #8
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->retrans_timer),
   1b478:	9300      	str	r3, [sp, #0]
   1b47a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1b47e:	2304      	movs	r3, #4
   1b480:	f10d 020e 	add.w	r2, sp, #14
   1b484:	f7fe fbe8 	bl	19c58 <net_frag_read>
	if (!frag) {
   1b488:	2800      	cmp	r0, #0
		return NULL;
   1b48a:	bf08      	it	eq
   1b48c:	2400      	moveq	r4, #0
}
   1b48e:	4620      	mov	r0, r4
   1b490:	b004      	add	sp, #16
   1b492:	bd70      	pop	{r4, r5, r6, pc}
		return (struct net_icmpv6_ra_hdr *)opt_data;
   1b494:	4634      	mov	r4, r6
   1b496:	e7fa      	b.n	1b48e <net_icmpv6_get_ra_hdr+0x86>

0001b498 <net_icmpv6_send_error>:

int net_icmpv6_send_error(struct net_pkt *orig, u8_t type, u8_t code,
			  u32_t param)
{
   1b498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b49c:	4698      	mov	r8, r3
	return pkt->frags->data;
   1b49e:	6883      	ldr	r3, [r0, #8]
	struct net_buf *frag;
	struct net_if *iface;
	size_t extra_len, reserve;
	int err = -EIO;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_ICMPV6) {
   1b4a0:	689b      	ldr	r3, [r3, #8]
   1b4a2:	799b      	ldrb	r3, [r3, #6]
   1b4a4:	2b3a      	cmp	r3, #58	; 0x3a
{
   1b4a6:	b09b      	sub	sp, #108	; 0x6c
   1b4a8:	4606      	mov	r6, r0
   1b4aa:	4689      	mov	r9, r1
   1b4ac:	4692      	mov	sl, r2
	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_ICMPV6) {
   1b4ae:	d10c      	bne.n	1b4ca <net_icmpv6_send_error+0x32>
		struct net_icmp_hdr icmp_hdr[1];

		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   1b4b0:	a916      	add	r1, sp, #88	; 0x58
   1b4b2:	f7ff fd33 	bl	1af1c <net_icmpv6_get_hdr>
   1b4b6:	b118      	cbz	r0, 1b4c0 <net_icmpv6_send_error+0x28>
   1b4b8:	f99d 3059 	ldrsb.w	r3, [sp, #89]	; 0x59
   1b4bc:	2b00      	cmp	r3, #0
   1b4be:	db04      	blt.n	1b4ca <net_icmpv6_send_error+0x32>
		    icmp_hdr->code < 128) {
			/* We must not send ICMP errors back */
			err = -EINVAL;
   1b4c0:	f06f 0515 	mvn.w	r5, #21

drop:
	net_pkt_unref(pkt);

drop_no_pkt:
	net_stats_update_icmp_drop();
   1b4c4:	f7ff fca2 	bl	1ae0c <net_stats_update_icmp_drop>

	return err;
   1b4c8:	e0f7      	b.n	1b6ba <net_icmpv6_send_error+0x222>
	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1b4ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1b4ce:	2000      	movs	r0, #0
   1b4d0:	6977      	ldr	r7, [r6, #20]
   1b4d2:	f7fe fa37 	bl	19944 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1b4d6:	4604      	mov	r4, r0
   1b4d8:	2800      	cmp	r0, #0
   1b4da:	f000 813c 	beq.w	1b756 <net_icmpv6_send_error+0x2be>
   1b4de:	68b3      	ldr	r3, [r6, #8]
   1b4e0:	6899      	ldr	r1, [r3, #8]
	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_UDP) {
   1b4e2:	798b      	ldrb	r3, [r1, #6]
   1b4e4:	2b11      	cmp	r3, #17
   1b4e6:	f000 80ec 	beq.w	1b6c2 <net_icmpv6_send_error+0x22a>
	} else if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_TCP) {
   1b4ea:	2b06      	cmp	r3, #6
   1b4ec:	f000 80eb 	beq.w	1b6c6 <net_icmpv6_send_error+0x22e>
   1b4f0:	687b      	ldr	r3, [r7, #4]
   1b4f2:	3118      	adds	r1, #24
   1b4f4:	689b      	ldr	r3, [r3, #8]
   1b4f6:	4638      	mov	r0, r7
   1b4f8:	4798      	blx	r3
		size_t space = CONFIG_NET_BUF_DATA_SIZE -
   1b4fa:	f5c0 60a2 	rsb	r0, r0, #1296	; 0x510
   1b4fe:	3004      	adds	r0, #4
		if (reserve > space) {
   1b500:	282f      	cmp	r0, #47	; 0x2f
   1b502:	f240 80e2 	bls.w	1b6ca <net_icmpv6_send_error+0x232>
			extra_len = space - reserve;
   1b506:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
	frag = net_pkt_copy(orig, extra_len, reserve, PKT_WAIT_TIME);
   1b50a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1b50e:	2230      	movs	r2, #48	; 0x30
   1b510:	4629      	mov	r1, r5
   1b512:	4630      	mov	r0, r6
   1b514:	f7fe fa98 	bl	19a48 <net_pkt_copy>
	if (!frag) {
   1b518:	4683      	mov	fp, r0
   1b51a:	2800      	cmp	r0, #0
   1b51c:	f000 8112 	beq.w	1b744 <net_icmpv6_send_error+0x2ac>
	net_pkt_frag_add(pkt, frag);
   1b520:	4601      	mov	r1, r0
   1b522:	4620      	mov	r0, r4
   1b524:	f7fe fa6c 	bl	19a00 <net_pkt_frag_add>
	pkt->family = family;
   1b528:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
	pkt->iface = iface;
   1b52c:	6167      	str	r7, [r4, #20]
	pkt->family = family;
   1b52e:	220a      	movs	r2, #10
   1b530:	f362 03c6 	bfi	r3, r2, #3, #4
   1b534:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	pkt->lladdr_src.type = iface->link_addr.type;
   1b538:	7d7b      	ldrb	r3, [r7, #21]
   1b53a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1b53e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1b542:	f10b 0008 	add.w	r0, fp, #8
   1b546:	f7fc fd6d 	bl	18024 <net_buf_simple_headroom>
	pkt->ipv6_ext_len = len;
   1b54a:	2200      	movs	r2, #0
   1b54c:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
   1b550:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
	struct net_buf *frag = pkt->frags;
   1b554:	68a1      	ldr	r1, [r4, #8]
   1b556:	f897 024c 	ldrb.w	r0, [r7, #588]	; 0x24c
	const u32_t unused = 0;
   1b55a:	9216      	str	r2, [sp, #88]	; 0x58
	return pkt->frags->data;
   1b55c:	688b      	ldr	r3, [r1, #8]
   1b55e:	f88d a017 	strb.w	sl, [sp, #23]
	sys_put_be16(NET_ICMPH_LEN + extra_len + NET_ICMPV6_UNUSED_LEN,
   1b562:	3508      	adds	r5, #8
   1b564:	b2ad      	uxth	r5, r5
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1b566:	705a      	strb	r2, [r3, #1]
	NET_IPV6_HDR(pkt)->flow = 0;
   1b568:	709a      	strb	r2, [r3, #2]
   1b56a:	70da      	strb	r2, [r3, #3]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1b56c:	f04f 0e60 	mov.w	lr, #96	; 0x60
	dst[0] = val >> 8;
   1b570:	0a2a      	lsrs	r2, r5, #8
   1b572:	711a      	strb	r2, [r3, #4]
	dst[1] = val;
   1b574:	715d      	strb	r5, [r3, #5]
   1b576:	f88d 9016 	strb.w	r9, [sp, #22]
   1b57a:	f883 e000 	strb.w	lr, [r3]
   1b57e:	68a3      	ldr	r3, [r4, #8]
   1b580:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1b582:	223a      	movs	r2, #58	; 0x3a
   1b584:	719a      	strb	r2, [r3, #6]
	NET_IPV6_HDR(pkt)->hop_limit = hop_limit;
   1b586:	71d8      	strb	r0, [r3, #7]
	pkt->ip_hdr_len = len;
   1b588:	2228      	movs	r2, #40	; 0x28
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt), &pos,
   1b58a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1b58e:	f04f 0a01 	mov.w	sl, #1
   1b592:	f10d 0316 	add.w	r3, sp, #22
   1b596:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
   1b59a:	4620      	mov	r0, r4
   1b59c:	9301      	str	r3, [sp, #4]
   1b59e:	f8cd a000 	str.w	sl, [sp]
   1b5a2:	ab12      	add	r3, sp, #72	; 0x48
   1b5a4:	9502      	str	r5, [sp, #8]
   1b5a6:	f7fe fbab 	bl	19d00 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(icmp_code),
   1b5aa:	f10d 0317 	add.w	r3, sp, #23
   1b5ae:	4601      	mov	r1, r0
   1b5b0:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   1b5b4:	9301      	str	r3, [sp, #4]
   1b5b6:	f8cd a000 	str.w	sl, [sp]
   1b5ba:	ab12      	add	r3, sp, #72	; 0x48
   1b5bc:	9502      	str	r5, [sp, #8]
   1b5be:	4620      	mov	r0, r4
   1b5c0:	f7fe fb9e 	bl	19d00 <net_pkt_write>
	net_pkt_write(pkt, frag, pos, &pos, 4, (u8_t *)&unused, PKT_WAIT_TIME);
   1b5c4:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
   1b5c8:	2304      	movs	r3, #4
   1b5ca:	9300      	str	r3, [sp, #0]
   1b5cc:	4601      	mov	r1, r0
   1b5ce:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   1b5d2:	9502      	str	r5, [sp, #8]
   1b5d4:	f8cd a004 	str.w	sl, [sp, #4]
   1b5d8:	ab12      	add	r3, sp, #72	; 0x48
   1b5da:	4620      	mov	r0, r4
   1b5dc:	f7fe fb90 	bl	19d00 <net_pkt_write>
	if (type == NET_ICMPV6_PARAM_PROBLEM) {
   1b5e0:	f1b9 0f04 	cmp.w	r9, #4
   1b5e4:	d10c      	bne.n	1b600 <net_icmpv6_send_error+0x168>
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
   1b5e6:	4620      	mov	r0, r4
   1b5e8:	f7fe fc33 	bl	19e52 <net_pkt_icmp_data>
	sys_put_be16(val >> 16, dst);
   1b5ec:	ea4f 4318 	mov.w	r3, r8, lsr #16
	dst[0] = val >> 8;
   1b5f0:	0a1a      	lsrs	r2, r3, #8
	dst[1] = val;
   1b5f2:	7143      	strb	r3, [r0, #5]
	dst[0] = val >> 8;
   1b5f4:	f3c8 2307 	ubfx	r3, r8, #8, #8
   1b5f8:	7102      	strb	r2, [r0, #4]
   1b5fa:	7183      	strb	r3, [r0, #6]
	dst[1] = val;
   1b5fc:	f880 8007 	strb.w	r8, [r0, #7]
	return pkt->frags->data;
   1b600:	68b3      	ldr	r3, [r6, #8]
   1b602:	f8d3 c008 	ldr.w	ip, [r3, #8]
	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(orig)->dst)) {
   1b606:	f89c 3018 	ldrb.w	r3, [ip, #24]
   1b60a:	2bff      	cmp	r3, #255	; 0xff
   1b60c:	f10c 0508 	add.w	r5, ip, #8
   1b610:	f10c 0218 	add.w	r2, ip, #24
   1b614:	d15b      	bne.n	1b6ce <net_icmpv6_send_error+0x236>
   1b616:	68a3      	ldr	r3, [r4, #8]
   1b618:	f8d3 8008 	ldr.w	r8, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1b61c:	ab06      	add	r3, sp, #24
   1b61e:	469e      	mov	lr, r3
   1b620:	6828      	ldr	r0, [r5, #0]
   1b622:	6869      	ldr	r1, [r5, #4]
   1b624:	469c      	mov	ip, r3
   1b626:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1b62a:	3508      	adds	r5, #8
   1b62c:	4295      	cmp	r5, r2
   1b62e:	4663      	mov	r3, ip
   1b630:	d1f6      	bne.n	1b620 <net_icmpv6_send_error+0x188>
   1b632:	f108 0c18 	add.w	ip, r8, #24
   1b636:	ad0a      	add	r5, sp, #40	; 0x28
   1b638:	4673      	mov	r3, lr
   1b63a:	cb03      	ldmia	r3!, {r0, r1}
   1b63c:	42ab      	cmp	r3, r5
   1b63e:	f8cc 0000 	str.w	r0, [ip]
   1b642:	f8cc 1004 	str.w	r1, [ip, #4]
   1b646:	469e      	mov	lr, r3
   1b648:	f10c 0c08 	add.w	ip, ip, #8
   1b64c:	d1f4      	bne.n	1b638 <net_icmpv6_send_error+0x1a0>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1b64e:	4638      	mov	r0, r7
   1b650:	4611      	mov	r1, r2
   1b652:	f7fd fecd 	bl	193f0 <net_if_ipv6_select_src_addr>
   1b656:	462f      	mov	r7, r5
   1b658:	4603      	mov	r3, r0
   1b65a:	f100 0e10 	add.w	lr, r0, #16
   1b65e:	6818      	ldr	r0, [r3, #0]
   1b660:	6859      	ldr	r1, [r3, #4]
   1b662:	463a      	mov	r2, r7
   1b664:	c203      	stmia	r2!, {r0, r1}
   1b666:	3308      	adds	r3, #8
   1b668:	4573      	cmp	r3, lr
   1b66a:	4617      	mov	r7, r2
   1b66c:	d1f7      	bne.n	1b65e <net_icmpv6_send_error+0x1c6>
   1b66e:	f108 0308 	add.w	r3, r8, #8
   1b672:	af0e      	add	r7, sp, #56	; 0x38
   1b674:	462a      	mov	r2, r5
   1b676:	ca03      	ldmia	r2!, {r0, r1}
   1b678:	42ba      	cmp	r2, r7
   1b67a:	6018      	str	r0, [r3, #0]
   1b67c:	6059      	str	r1, [r3, #4]
   1b67e:	4615      	mov	r5, r2
   1b680:	f103 0308 	add.w	r3, r3, #8
   1b684:	d1f6      	bne.n	1b674 <net_icmpv6_send_error+0x1dc>
	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1b686:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1b688:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1b68a:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
   1b68e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	net_pkt_ll_dst(pkt)->addr = net_pkt_ll_src(orig)->addr;
   1b692:	6a33      	ldr	r3, [r6, #32]
   1b694:	62a3      	str	r3, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->len = net_pkt_ll_src(orig)->len;
   1b696:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
   1b69a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	frag = net_icmpv6_set_chksum(pkt, pkt->frags);
   1b69e:	68a1      	ldr	r1, [r4, #8]
   1b6a0:	4620      	mov	r0, r4
   1b6a2:	f7ff fbf1 	bl	1ae88 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) >= 0) {
   1b6a6:	4620      	mov	r0, r4
   1b6a8:	f7fd f890 	bl	187cc <net_send_data>
   1b6ac:	2800      	cmp	r0, #0
   1b6ae:	db4f      	blt.n	1b750 <net_icmpv6_send_error+0x2b8>
   1b6b0:	4a2a      	ldr	r2, [pc, #168]	; (1b75c <net_icmpv6_send_error+0x2c4>)
   1b6b2:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1b6b4:	3301      	adds	r3, #1
   1b6b6:	6393      	str	r3, [r2, #56]	; 0x38
		return 0;
   1b6b8:	2500      	movs	r5, #0
}
   1b6ba:	4628      	mov	r0, r5
   1b6bc:	b01b      	add	sp, #108	; 0x6c
   1b6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		extra_len = sizeof(struct net_ipv6_hdr) +
   1b6c2:	2530      	movs	r5, #48	; 0x30
   1b6c4:	e721      	b.n	1b50a <net_icmpv6_send_error+0x72>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1b6c6:	253c      	movs	r5, #60	; 0x3c
   1b6c8:	e71f      	b.n	1b50a <net_icmpv6_send_error+0x72>
			extra_len = 0;
   1b6ca:	2500      	movs	r5, #0
   1b6cc:	e71d      	b.n	1b50a <net_icmpv6_send_error+0x72>
		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1b6ce:	af0e      	add	r7, sp, #56	; 0x38
   1b6d0:	463b      	mov	r3, r7
   1b6d2:	6828      	ldr	r0, [r5, #0]
   1b6d4:	6869      	ldr	r1, [r5, #4]
   1b6d6:	46be      	mov	lr, r7
   1b6d8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1b6dc:	3508      	adds	r5, #8
   1b6de:	4295      	cmp	r5, r2
   1b6e0:	4677      	mov	r7, lr
   1b6e2:	d1f6      	bne.n	1b6d2 <net_icmpv6_send_error+0x23a>
   1b6e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1b6e6:	af0a      	add	r7, sp, #40	; 0x28
   1b6e8:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   1b6ec:	68a3      	ldr	r3, [r4, #8]
   1b6ee:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1b6f2:	aa12      	add	r2, sp, #72	; 0x48
   1b6f4:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
   1b6f8:	6828      	ldr	r0, [r5, #0]
   1b6fa:	6869      	ldr	r1, [r5, #4]
   1b6fc:	4613      	mov	r3, r2
   1b6fe:	c303      	stmia	r3!, {r0, r1}
   1b700:	3508      	adds	r5, #8
   1b702:	4565      	cmp	r5, ip
   1b704:	461a      	mov	r2, r3
   1b706:	d1f7      	bne.n	1b6f8 <net_icmpv6_send_error+0x260>
   1b708:	ab12      	add	r3, sp, #72	; 0x48
   1b70a:	f10e 0508 	add.w	r5, lr, #8
   1b70e:	461a      	mov	r2, r3
   1b710:	ca03      	ldmia	r2!, {r0, r1}
   1b712:	4552      	cmp	r2, sl
   1b714:	6028      	str	r0, [r5, #0]
   1b716:	6069      	str	r1, [r5, #4]
   1b718:	4613      	mov	r3, r2
   1b71a:	f105 0508 	add.w	r5, r5, #8
   1b71e:	d1f6      	bne.n	1b70e <net_icmpv6_send_error+0x276>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1b720:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1b724:	af1a      	add	r7, sp, #104	; 0x68
   1b726:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   1b72a:	4653      	mov	r3, sl
   1b72c:	f10e 0218 	add.w	r2, lr, #24
   1b730:	461d      	mov	r5, r3
   1b732:	cd03      	ldmia	r5!, {r0, r1}
   1b734:	42bd      	cmp	r5, r7
   1b736:	6010      	str	r0, [r2, #0]
   1b738:	6051      	str	r1, [r2, #4]
   1b73a:	462b      	mov	r3, r5
   1b73c:	f102 0208 	add.w	r2, r2, #8
   1b740:	d1f6      	bne.n	1b730 <net_icmpv6_send_error+0x298>
   1b742:	e7a0      	b.n	1b686 <net_icmpv6_send_error+0x1ee>
		err = -ENOMEM;
   1b744:	f06f 050b 	mvn.w	r5, #11
	net_pkt_unref(pkt);
   1b748:	4620      	mov	r0, r4
   1b74a:	f7fe f932 	bl	199b2 <net_pkt_unref>
   1b74e:	e6b9      	b.n	1b4c4 <net_icmpv6_send_error+0x2c>
	int err = -EIO;
   1b750:	f06f 0504 	mvn.w	r5, #4
   1b754:	e7f8      	b.n	1b748 <net_icmpv6_send_error+0x2b0>
		err = -ENOMEM;
   1b756:	f06f 050b 	mvn.w	r5, #11
   1b75a:	e6b3      	b.n	1b4c4 <net_icmpv6_send_error+0x2c>
   1b75c:	20004cf4 	.word	0x20004cf4

0001b760 <net_icmpv6_send_echo_request>:

int net_icmpv6_send_echo_request(struct net_if *iface,
				 struct in6_addr *dst,
				 u16_t identifier,
				 u16_t sequence)
{
   1b760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b764:	4607      	mov	r7, r0
   1b766:	b08d      	sub	sp, #52	; 0x34
   1b768:	4691      	mov	r9, r2
   1b76a:	4698      	mov	r8, r3
   1b76c:	460d      	mov	r5, r1
	const struct in6_addr *src;
	struct net_pkt *pkt;

	src = net_if_ipv6_select_src_addr(iface, dst);
   1b76e:	f7fd fe3f 	bl	193f0 <net_if_ipv6_select_src_addr>
   1b772:	687b      	ldr	r3, [r7, #4]
   1b774:	4606      	mov	r6, r0
   1b776:	689b      	ldr	r3, [r3, #8]
   1b778:	4629      	mov	r1, r5
   1b77a:	4638      	mov	r0, r7
   1b77c:	4798      	blx	r3

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1b77e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b782:	f7fe f8df 	bl	19944 <net_pkt_get_reserve_tx>
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt, src, dst, iface, IPPROTO_ICMPV6);
   1b786:	233a      	movs	r3, #58	; 0x3a
   1b788:	4631      	mov	r1, r6
   1b78a:	9300      	str	r3, [sp, #0]
   1b78c:	462a      	mov	r2, r5
   1b78e:	463b      	mov	r3, r7
   1b790:	f000 fb82 	bl	1be98 <net_ipv6_create_raw>
	pkt->family = family;
   1b794:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
	pkt->iface = iface;
   1b798:	6147      	str	r7, [r0, #20]
	pkt->family = family;
   1b79a:	220a      	movs	r2, #10
   1b79c:	f362 03c6 	bfi	r3, r2, #3, #4
   1b7a0:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
	pkt->lladdr_src.type = iface->link_addr.type;
   1b7a4:	7d7b      	ldrb	r3, [r7, #21]
   1b7a6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
   1b7aa:	aa0c      	add	r2, sp, #48	; 0x30
	pkt->lladdr_dst.type = iface->link_addr.type;
   1b7ac:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
   1b7b0:	2380      	movs	r3, #128	; 0x80
   1b7b2:	f802 3d21 	strb.w	r3, [r2, #-33]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1b7b6:	2101      	movs	r1, #1
   1b7b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b7bc:	4604      	mov	r4, r0
   1b7be:	f7fe f9eb 	bl	19b98 <net_pkt_append>
   1b7c2:	aa0c      	add	r2, sp, #48	; 0x30
   1b7c4:	2700      	movs	r7, #0
   1b7c6:	f802 7d22 	strb.w	r7, [r2, #-34]!
   1b7ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b7ce:	2101      	movs	r1, #1
   1b7d0:	4620      	mov	r0, r4
   1b7d2:	f7fe f9e1 	bl	19b98 <net_pkt_append>
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);

	net_pkt_append_u8(pkt, NET_ICMPV6_ECHO_REQUEST);
	net_pkt_append_u8(pkt, 0);   /* code */
	net_pkt_append_be16(pkt, 0); /* checksum */
   1b7d6:	4639      	mov	r1, r7
   1b7d8:	4620      	mov	r0, r4
   1b7da:	f7ff fb1f 	bl	1ae1c <net_pkt_append_be16>
	net_pkt_append_be16(pkt, identifier);
   1b7de:	4649      	mov	r1, r9
   1b7e0:	4620      	mov	r0, r4
   1b7e2:	f7ff fb1b 	bl	1ae1c <net_pkt_append_be16>
	net_pkt_append_be16(pkt, sequence);
   1b7e6:	4641      	mov	r1, r8
   1b7e8:	4620      	mov	r0, r4
   1b7ea:	f7ff fb17 	bl	1ae1c <net_pkt_append_be16>
   1b7ee:	f8d4 e008 	ldr.w	lr, [r4, #8]

	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1b7f2:	aa04      	add	r2, sp, #16
	return pkt->frags->data;
   1b7f4:	f8de 7008 	ldr.w	r7, [lr, #8]
   1b7f8:	4633      	mov	r3, r6
   1b7fa:	f106 0810 	add.w	r8, r6, #16
   1b7fe:	4616      	mov	r6, r2
   1b800:	6818      	ldr	r0, [r3, #0]
   1b802:	6859      	ldr	r1, [r3, #4]
   1b804:	4694      	mov	ip, r2
   1b806:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1b80a:	3308      	adds	r3, #8
   1b80c:	4543      	cmp	r3, r8
   1b80e:	4662      	mov	r2, ip
   1b810:	d1f6      	bne.n	1b800 <net_icmpv6_send_echo_request+0xa0>
   1b812:	f107 0c08 	add.w	ip, r7, #8
   1b816:	ab08      	add	r3, sp, #32
   1b818:	4632      	mov	r2, r6
   1b81a:	ca03      	ldmia	r2!, {r0, r1}
   1b81c:	429a      	cmp	r2, r3
   1b81e:	f8cc 0000 	str.w	r0, [ip]
   1b822:	f8cc 1004 	str.w	r1, [ip, #4]
   1b826:	4616      	mov	r6, r2
   1b828:	f10c 0c08 	add.w	ip, ip, #8
   1b82c:	d1f4      	bne.n	1b818 <net_icmpv6_send_echo_request+0xb8>
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1b82e:	462a      	mov	r2, r5
   1b830:	461e      	mov	r6, r3
   1b832:	f105 0c10 	add.w	ip, r5, #16
   1b836:	6810      	ldr	r0, [r2, #0]
   1b838:	6851      	ldr	r1, [r2, #4]
   1b83a:	4635      	mov	r5, r6
   1b83c:	c503      	stmia	r5!, {r0, r1}
   1b83e:	3208      	adds	r2, #8
   1b840:	4562      	cmp	r2, ip
   1b842:	462e      	mov	r6, r5
   1b844:	d1f7      	bne.n	1b836 <net_icmpv6_send_echo_request+0xd6>
   1b846:	461a      	mov	r2, r3
   1b848:	ae0c      	add	r6, sp, #48	; 0x30
   1b84a:	f107 0318 	add.w	r3, r7, #24
   1b84e:	4615      	mov	r5, r2
   1b850:	cd03      	ldmia	r5!, {r0, r1}
   1b852:	42b5      	cmp	r5, r6
   1b854:	6018      	str	r0, [r3, #0]
   1b856:	6059      	str	r1, [r3, #4]
   1b858:	462a      	mov	r2, r5
   1b85a:	f103 0308 	add.w	r3, r3, #8
   1b85e:	d1f6      	bne.n	1b84e <net_icmpv6_send_echo_request+0xee>

	/* Clear and then set the chksum */
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1b860:	4671      	mov	r1, lr
   1b862:	4620      	mov	r0, r4
   1b864:	f7ff fb10 	bl	1ae88 <net_icmpv6_set_chksum>

	if (net_ipv6_finalize_raw(pkt, IPPROTO_ICMPV6) < 0) {
   1b868:	213a      	movs	r1, #58	; 0x3a
   1b86a:	4620      	mov	r0, r4
   1b86c:	f000 fbab 	bl	1bfc6 <net_ipv6_finalize_raw>
   1b870:	2800      	cmp	r0, #0
   1b872:	db0c      	blt.n	1b88e <net_icmpv6_send_echo_request+0x12e>
			" from %s to %s", NET_ICMPV6_ECHO_REQUEST,
			net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->src), out);
	} while (0);
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

	if (net_send_data(pkt) >= 0) {
   1b874:	4620      	mov	r0, r4
   1b876:	f7fc ffa9 	bl	187cc <net_send_data>
   1b87a:	2800      	cmp	r0, #0
   1b87c:	db07      	blt.n	1b88e <net_icmpv6_send_echo_request+0x12e>
   1b87e:	4a08      	ldr	r2, [pc, #32]	; (1b8a0 <net_icmpv6_send_echo_request+0x140>)
   1b880:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1b882:	3301      	adds	r3, #1
   1b884:	6393      	str	r3, [r2, #56]	; 0x38
		net_stats_update_icmp_sent();
		return 0;
   1b886:	2000      	movs	r0, #0
drop:
	net_pkt_unref(pkt);
	net_stats_update_icmp_drop();

	return -EIO;
}
   1b888:	b00d      	add	sp, #52	; 0x34
   1b88a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_pkt_unref(pkt);
   1b88e:	4620      	mov	r0, r4
   1b890:	f7fe f88f 	bl	199b2 <net_pkt_unref>
	net_stats_update_icmp_drop();
   1b894:	f7ff faba 	bl	1ae0c <net_stats_update_icmp_drop>
	return -EIO;
   1b898:	f06f 0004 	mvn.w	r0, #4
   1b89c:	e7f4      	b.n	1b888 <net_icmpv6_send_echo_request+0x128>
   1b89e:	bf00      	nop
   1b8a0:	20004cf4 	.word	0x20004cf4

0001b8a4 <net_icmpv6_input>:

enum net_verdict net_icmpv6_input(struct net_pkt *pkt,
				  u8_t type, u8_t code)
{
   1b8a4:	b510      	push	{r4, lr}
	net_stats.icmp.recv++;
   1b8a6:	4c0d      	ldr	r4, [pc, #52]	; (1b8dc <net_icmpv6_input+0x38>)
   1b8a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1b8aa:	3301      	adds	r3, #1
   1b8ac:	6363      	str	r3, [r4, #52]	; 0x34
   1b8ae:	4b0c      	ldr	r3, [pc, #48]	; (1b8e0 <net_icmpv6_input+0x3c>)
   1b8b0:	681b      	ldr	r3, [r3, #0]
	struct net_icmpv6_handler *cb;

	net_stats_update_icmp_recv();

	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1b8b2:	461c      	mov	r4, r3
   1b8b4:	b173      	cbz	r3, 1b8d4 <net_icmpv6_input+0x30>
		if (cb->type == type && (cb->code == code || cb->code == 0)) {
   1b8b6:	791b      	ldrb	r3, [r3, #4]
   1b8b8:	428b      	cmp	r3, r1
   1b8ba:	d108      	bne.n	1b8ce <net_icmpv6_input+0x2a>
   1b8bc:	7963      	ldrb	r3, [r4, #5]
   1b8be:	4293      	cmp	r3, r2
   1b8c0:	d103      	bne.n	1b8ca <net_icmpv6_input+0x26>
			return cb->handler(pkt);
   1b8c2:	68a3      	ldr	r3, [r4, #8]
	}

	net_stats_update_icmp_drop();

	return NET_DROP;
}
   1b8c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return cb->handler(pkt);
   1b8c8:	4718      	bx	r3
		if (cb->type == type && (cb->code == code || cb->code == 0)) {
   1b8ca:	2b00      	cmp	r3, #0
   1b8cc:	d0f9      	beq.n	1b8c2 <net_icmpv6_input+0x1e>
	return node->next;
   1b8ce:	6823      	ldr	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1b8d0:	2b00      	cmp	r3, #0
   1b8d2:	d1ee      	bne.n	1b8b2 <net_icmpv6_input+0xe>
	net_stats_update_icmp_drop();
   1b8d4:	f7ff fa9a 	bl	1ae0c <net_stats_update_icmp_drop>
}
   1b8d8:	2002      	movs	r0, #2
   1b8da:	bd10      	pop	{r4, pc}
   1b8dc:	20004cf4 	.word	0x20004cf4
   1b8e0:	20003158 	.word	0x20003158

0001b8e4 <net_icmpv6_init>:
	.handler = handle_echo_request,
};

void net_icmpv6_init(void)
{
	net_icmpv6_register_handler(&echo_request_handler);
   1b8e4:	4801      	ldr	r0, [pc, #4]	; (1b8ec <net_icmpv6_init+0x8>)
   1b8e6:	f7ff baa9 	b.w	1ae3c <net_icmpv6_register_handler>
   1b8ea:	bf00      	nop
   1b8ec:	2000e284 	.word	0x2000e284

0001b8f0 <net_nbr_unref>:
#if defined(CONFIG_NET_DEBUG_IPV6_NBR_CACHE)
	NET_DBG("nbr %p ref %u (%s():%d)", nbr, nbr->ref - 1, caller, line);
#else
	NET_DBG("nbr %p ref %u", nbr, nbr->ref - 1);
#endif
	if (--nbr->ref) {
   1b8f0:	7803      	ldrb	r3, [r0, #0]
   1b8f2:	3b01      	subs	r3, #1
   1b8f4:	b2db      	uxtb	r3, r3
   1b8f6:	7003      	strb	r3, [r0, #0]
   1b8f8:	b913      	cbnz	r3, 1b900 <net_nbr_unref+0x10>
		return;
	}

	if (nbr->remove) {
   1b8fa:	6903      	ldr	r3, [r0, #16]
   1b8fc:	b103      	cbz	r3, 1b900 <net_nbr_unref+0x10>
		nbr->remove(nbr);
   1b8fe:	4718      	bx	r3
   1b900:	4770      	bx	lr

0001b902 <net_nbr_get>:
			((sizeof(struct net_nbr) +
			  start->size + start->extra_data_size) * idx));
}

struct net_nbr *net_nbr_get(struct net_nbr_table *table)
{
   1b902:	b530      	push	{r4, r5, lr}
	int i;

	for (i = 0; i < table->nbr_count; i++) {
   1b904:	8905      	ldrh	r5, [r0, #8]
   1b906:	2100      	movs	r1, #0
   1b908:	42a9      	cmp	r1, r5
   1b90a:	db01      	blt.n	1b910 <net_nbr_get+0xe>

			return net_nbr_ref(nbr);
		}
	}

	return NULL;
   1b90c:	2200      	movs	r2, #0
   1b90e:	e00d      	b.n	1b92c <net_nbr_get+0x2a>
		struct net_nbr *nbr = get_nbr(table->nbr, i);
   1b910:	6804      	ldr	r4, [r0, #0]
			  start->size + start->extra_data_size) * idx));
   1b912:	88a2      	ldrh	r2, [r4, #4]
   1b914:	8863      	ldrh	r3, [r4, #2]
   1b916:	4413      	add	r3, r2
   1b918:	3314      	adds	r3, #20
   1b91a:	434b      	muls	r3, r1
	return (struct net_nbr *)((void *)start +
   1b91c:	18e2      	adds	r2, r4, r3
		if (!nbr->ref) {
   1b91e:	5ce3      	ldrb	r3, [r4, r3]
   1b920:	b933      	cbnz	r3, 1b930 <net_nbr_get+0x2e>
			nbr->data = nbr->__nbr;
   1b922:	f102 0314 	add.w	r3, r2, #20
   1b926:	60d3      	str	r3, [r2, #12]
	nbr->ref++;
   1b928:	2301      	movs	r3, #1
   1b92a:	7013      	strb	r3, [r2, #0]
}
   1b92c:	4610      	mov	r0, r2
   1b92e:	bd30      	pop	{r4, r5, pc}
	for (i = 0; i < table->nbr_count; i++) {
   1b930:	3101      	adds	r1, #1
   1b932:	e7e9      	b.n	1b908 <net_nbr_get+0x6>

0001b934 <net_nbr_link>:

int net_nbr_link(struct net_nbr *nbr, struct net_if *iface,
		 struct net_linkaddr *lladdr)
{
   1b934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i, avail = -1;

	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   1b938:	7843      	ldrb	r3, [r0, #1]
   1b93a:	2bff      	cmp	r3, #255	; 0xff
{
   1b93c:	4607      	mov	r7, r0
   1b93e:	4688      	mov	r8, r1
   1b940:	4691      	mov	r9, r2
	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   1b942:	d144      	bne.n	1b9ce <net_nbr_link+0x9a>
   1b944:	4e26      	ldr	r6, [pc, #152]	; (1b9e0 <net_nbr_link+0xac>)
   1b946:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1b94a:	2500      	movs	r5, #0
		return -EALREADY;
	}

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   1b94c:	1c62      	adds	r2, r4, #1
   1b94e:	d103      	bne.n	1b958 <net_nbr_link+0x24>
   1b950:	79b3      	ldrb	r3, [r6, #6]
   1b952:	2b00      	cmp	r3, #0
   1b954:	bf08      	it	eq
   1b956:	462c      	moveq	r4, r5
			avail = i;
		}

		if (net_neighbor_lladdr[i].ref &&
   1b958:	79b3      	ldrb	r3, [r6, #6]
   1b95a:	b19b      	cbz	r3, 1b984 <net_nbr_link+0x50>
		    !memcmp(lladdr->addr,
   1b95c:	f899 2004 	ldrb.w	r2, [r9, #4]
   1b960:	f8d9 0000 	ldr.w	r0, [r9]
   1b964:	4631      	mov	r1, r6
   1b966:	f7e4 fefc 	bl	762 <memcmp>
		if (net_neighbor_lladdr[i].ref &&
   1b96a:	b958      	cbnz	r0, 1b984 <net_nbr_link+0x50>
			    net_neighbor_lladdr[i].lladdr.addr,
			    lladdr->len)) {
			/* We found same lladdr in nbr cache so just
			 * increase the ref count.
			 */
			net_neighbor_lladdr[i].ref++;
   1b96c:	4b1d      	ldr	r3, [pc, #116]	; (1b9e4 <net_nbr_link+0xb0>)
   1b96e:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
   1b972:	4413      	add	r3, r2
   1b974:	7a1a      	ldrb	r2, [r3, #8]
   1b976:	3201      	adds	r2, #1
   1b978:	721a      	strb	r2, [r3, #8]

			nbr->idx = i;
   1b97a:	707d      	strb	r5, [r7, #1]
			nbr->iface = iface;
   1b97c:	f8c7 8008 	str.w	r8, [r7, #8]

			return 0;
   1b980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1b984:	3501      	adds	r5, #1
   1b986:	2d08      	cmp	r5, #8
   1b988:	f106 0609 	add.w	r6, r6, #9
   1b98c:	d1de      	bne.n	1b94c <net_nbr_link+0x18>
		}
	}

	if (avail < 0) {
   1b98e:	1c63      	adds	r3, r4, #1
   1b990:	d021      	beq.n	1b9d6 <net_nbr_link+0xa2>
	}

	/* There was no existing entry in the lladdr cache,
	 * so allocate one for this lladdr.
	 */
	net_neighbor_lladdr[avail].ref++;
   1b992:	4d14      	ldr	r5, [pc, #80]	; (1b9e4 <net_nbr_link+0xb0>)
   1b994:	00e6      	lsls	r6, r4, #3
   1b996:	1930      	adds	r0, r6, r4
   1b998:	182b      	adds	r3, r5, r0
   1b99a:	7a1a      	ldrb	r2, [r3, #8]
   1b99c:	3201      	adds	r2, #1
   1b99e:	721a      	strb	r2, [r3, #8]
	nbr->idx = avail;
   1b9a0:	707c      	strb	r4, [r7, #1]

	net_linkaddr_set(&net_neighbor_lladdr[avail].lladdr, lladdr->addr,
   1b9a2:	f8d9 1000 	ldr.w	r1, [r9]
   1b9a6:	f899 2004 	ldrb.w	r2, [r9, #4]
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   u8_t *new_addr, u8_t new_len)
{
	if (!lladdr_store || !new_addr) {
   1b9aa:	b131      	cbz	r1, 1b9ba <net_nbr_link+0x86>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1b9ac:	2a06      	cmp	r2, #6
   1b9ae:	d804      	bhi.n	1b9ba <net_nbr_link+0x86>
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
	memcpy(lladdr_store->addr, new_addr, new_len);
   1b9b0:	3002      	adds	r0, #2
	lladdr_store->len = new_len;
   1b9b2:	705a      	strb	r2, [r3, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   1b9b4:	4428      	add	r0, r5
   1b9b6:	f7e4 ff01 	bl	7bc <memcpy>
			 lladdr->len);
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;
   1b9ba:	4434      	add	r4, r6
   1b9bc:	4425      	add	r5, r4
   1b9be:	f899 3004 	ldrb.w	r3, [r9, #4]
   1b9c2:	706b      	strb	r3, [r5, #1]

	nbr->iface = iface;

	return 0;
   1b9c4:	2000      	movs	r0, #0
	nbr->iface = iface;
   1b9c6:	f8c7 8008 	str.w	r8, [r7, #8]
	return 0;
   1b9ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EALREADY;
   1b9ce:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1b9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOENT;
   1b9d6:	f06f 0001 	mvn.w	r0, #1
}
   1b9da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b9de:	bf00      	nop
   1b9e0:	20003162 	.word	0x20003162
   1b9e4:	20003160 	.word	0x20003160

0001b9e8 <net_nbr_unlink>:

int net_nbr_unlink(struct net_nbr *nbr, struct net_linkaddr *lladdr)
{
   1b9e8:	b510      	push	{r4, lr}
   1b9ea:	4604      	mov	r4, r0
	ARG_UNUSED(lladdr);

	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   1b9ec:	7840      	ldrb	r0, [r0, #1]
   1b9ee:	28ff      	cmp	r0, #255	; 0xff
   1b9f0:	d014      	beq.n	1ba1c <net_nbr_unlink+0x34>
	}

	NET_ASSERT(nbr->idx < CONFIG_NET_IPV6_MAX_NEIGHBORS);
	NET_ASSERT(net_neighbor_lladdr[nbr->idx].ref > 0);

	net_neighbor_lladdr[nbr->idx].ref--;
   1b9f2:	4a0c      	ldr	r2, [pc, #48]	; (1ba24 <net_nbr_unlink+0x3c>)
   1b9f4:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
   1b9f8:	4413      	add	r3, r2
   1b9fa:	7a19      	ldrb	r1, [r3, #8]
   1b9fc:	3901      	subs	r1, #1
   1b9fe:	b2c9      	uxtb	r1, r1
   1ba00:	7219      	strb	r1, [r3, #8]

	if (!net_neighbor_lladdr[nbr->idx].ref) {
   1ba02:	b931      	cbnz	r1, 1ba12 <net_nbr_unlink+0x2a>
		memset(net_neighbor_lladdr[nbr->idx].lladdr.addr, 0,
   1ba04:	2309      	movs	r3, #9
   1ba06:	fb03 2000 	mla	r0, r3, r0, r2
   1ba0a:	3002      	adds	r0, #2
   1ba0c:	2206      	movs	r2, #6
   1ba0e:	f7e4 ff01 	bl	814 <memset>
		       sizeof(net_neighbor_lladdr[nbr->idx].lladdr.addr));
	}

	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   1ba12:	23ff      	movs	r3, #255	; 0xff
	nbr->iface = NULL;
   1ba14:	2000      	movs	r0, #0
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   1ba16:	7063      	strb	r3, [r4, #1]
	nbr->iface = NULL;
   1ba18:	60a0      	str	r0, [r4, #8]

	return 0;
   1ba1a:	bd10      	pop	{r4, pc}
		return -EALREADY;
   1ba1c:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   1ba20:	bd10      	pop	{r4, pc}
   1ba22:	bf00      	nop
   1ba24:	20003160 	.word	0x20003160

0001ba28 <net_nbr_get_lladdr>:
	NET_ASSERT_INFO(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS,
			"idx %d >= max %d", idx,
			CONFIG_NET_IPV6_MAX_NEIGHBORS);

	return &net_neighbor_lladdr[idx].lladdr;
}
   1ba28:	4b02      	ldr	r3, [pc, #8]	; (1ba34 <net_nbr_get_lladdr+0xc>)
	return &net_neighbor_lladdr[idx].lladdr;
   1ba2a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
}
   1ba2e:	4418      	add	r0, r3
   1ba30:	4770      	bx	lr
   1ba32:	bf00      	nop
   1ba34:	20003160 	.word	0x20003160

0001ba38 <net_buf_frags_len>:
{
   1ba38:	4603      	mov	r3, r0
	size_t bytes = 0;
   1ba3a:	2000      	movs	r0, #0
	while (buf) {
   1ba3c:	b903      	cbnz	r3, 1ba40 <net_buf_frags_len+0x8>
}
   1ba3e:	4770      	bx	lr
		bytes += buf->len;
   1ba40:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1ba42:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1ba44:	4410      	add	r0, r2
   1ba46:	e7f9      	b.n	1ba3c <net_buf_frags_len+0x4>

0001ba48 <net_is_ipv6_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1ba48:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1ba4a:	b942      	cbnz	r2, 1ba5e <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1ba4c:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1ba4e:	b933      	cbnz	r3, 1ba5e <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1ba50:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1ba52:	b922      	cbnz	r2, 1ba5e <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1ba54:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1ba56:	fab0 f080 	clz	r0, r0
   1ba5a:	0940      	lsrs	r0, r0, #5
   1ba5c:	4770      	bx	lr
   1ba5e:	2000      	movs	r0, #0
   1ba60:	4770      	bx	lr

0001ba62 <net_if_get_ll_reserve>:
   1ba62:	6843      	ldr	r3, [r0, #4]
   1ba64:	689b      	ldr	r3, [r3, #8]
   1ba66:	4718      	bx	r3

0001ba68 <net_stats_update_ipv6_nd_sent>:
	net_stats.ipv6_nd.sent++;
   1ba68:	4a02      	ldr	r2, [pc, #8]	; (1ba74 <net_stats_update_ipv6_nd_sent+0xc>)
   1ba6a:	6e13      	ldr	r3, [r2, #96]	; 0x60
   1ba6c:	3301      	adds	r3, #1
   1ba6e:	6613      	str	r3, [r2, #96]	; 0x60
   1ba70:	4770      	bx	lr
   1ba72:	bf00      	nop
   1ba74:	20004cf4 	.word	0x20004cf4

0001ba78 <net_stats_update_ipv6_nd_drop>:
	net_stats.ipv6_nd.drop++;
   1ba78:	4a02      	ldr	r2, [pc, #8]	; (1ba84 <net_stats_update_ipv6_nd_drop+0xc>)
   1ba7a:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1ba7c:	3301      	adds	r3, #1
   1ba7e:	6593      	str	r3, [r2, #88]	; 0x58
   1ba80:	4770      	bx	lr
   1ba82:	bf00      	nop
   1ba84:	20004cf4 	.word	0x20004cf4

0001ba88 <ipv6_nbr_set_state>:
	return "<invalid state>";
}

static void ipv6_nbr_set_state(struct net_nbr *nbr,
			       enum net_ipv6_nbr_state new_state)
{
   1ba88:	68c3      	ldr	r3, [r0, #12]
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
   1ba8a:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   1ba8e:	428a      	cmp	r2, r1
   1ba90:	d003      	beq.n	1ba9a <ipv6_nbr_set_state+0x12>
   1ba92:	2a05      	cmp	r2, #5

	NET_DBG("nbr %p %s -> %s", nbr,
		net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state),
		net_ipv6_nbr_state2str(new_state));

	net_ipv6_nbr_data(nbr)->state = new_state;
   1ba94:	bf18      	it	ne
   1ba96:	f883 1064 	strbne.w	r1, [r3, #100]	; 0x64
   1ba9a:	4770      	bx	lr

0001ba9c <iface_cb>:
	net_nbr_cb_t cb;
	void *user_data;
};

static void iface_cb(struct net_if *iface, void *user_data)
{
   1ba9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref || nbr->iface != iface) {
   1ba9e:	4e09      	ldr	r6, [pc, #36]	; (1bac4 <iface_cb+0x28>)
{
   1baa0:	4607      	mov	r7, r0
   1baa2:	460d      	mov	r5, r1
   1baa4:	2400      	movs	r4, #0
		if (!nbr->ref || nbr->iface != iface) {
   1baa6:	5da3      	ldrb	r3, [r4, r6]
   1baa8:	b133      	cbz	r3, 1bab8 <iface_cb+0x1c>
   1baaa:	1930      	adds	r0, r6, r4
   1baac:	6883      	ldr	r3, [r0, #8]
   1baae:	42bb      	cmp	r3, r7
   1bab0:	d102      	bne.n	1bab8 <iface_cb+0x1c>
			continue;
		}

		data->cb(nbr, data->user_data);
   1bab2:	682b      	ldr	r3, [r5, #0]
   1bab4:	6869      	ldr	r1, [r5, #4]
   1bab6:	4798      	blx	r3
   1bab8:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1baba:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   1babe:	d1f2      	bne.n	1baa6 <iface_cb+0xa>
	}
}
   1bac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bac2:	bf00      	nop
   1bac4:	2000e2b4 	.word	0x2000e2b4

0001bac8 <net_neighbor_table_clear>:

	return;
}

void net_neighbor_table_clear(struct net_nbr_table *table)
{
   1bac8:	4770      	bx	lr

0001baca <nbr_clear_ns_pending>:
{
   1baca:	b510      	push	{r4, lr}
   1bacc:	4604      	mov	r4, r0
	k_delayed_work_cancel(&data->send_ns);
   1bace:	303c      	adds	r0, #60	; 0x3c
   1bad0:	f005 fb4a 	bl	21168 <k_delayed_work_cancel>
	if (data->pending) {
   1bad4:	6820      	ldr	r0, [r4, #0]
   1bad6:	b118      	cbz	r0, 1bae0 <nbr_clear_ns_pending+0x16>
		net_pkt_unref(data->pending);
   1bad8:	f7fd ff6b 	bl	199b2 <net_pkt_unref>
		data->pending = NULL;
   1badc:	2300      	movs	r3, #0
   1bade:	6023      	str	r3, [r4, #0]
   1bae0:	bd10      	pop	{r4, pc}

0001bae2 <nbr_free>:
{
   1bae2:	b510      	push	{r4, lr}
   1bae4:	4604      	mov	r4, r0
	nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   1bae6:	68c0      	ldr	r0, [r0, #12]
   1bae8:	f7ff ffef 	bl	1baca <nbr_clear_ns_pending>
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   1baec:	68e0      	ldr	r0, [r4, #12]
   1baee:	3014      	adds	r0, #20
   1baf0:	f005 fb3a 	bl	21168 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   1baf4:	4620      	mov	r0, r4
   1baf6:	f7ff fefb 	bl	1b8f0 <net_nbr_unref>
	net_nbr_unlink(nbr, NULL);
   1bafa:	4620      	mov	r0, r4
   1bafc:	2100      	movs	r1, #0
}
   1bafe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_nbr_unlink(nbr, NULL);
   1bb02:	f7ff bf71 	b.w	1b9e8 <net_nbr_unlink>

0001bb06 <net_linkaddr_set>:
{
   1bb06:	b510      	push	{r4, lr}
	if (!lladdr_store || !new_addr) {
   1bb08:	b140      	cbz	r0, 1bb1c <net_linkaddr_set+0x16>
   1bb0a:	b139      	cbz	r1, 1bb1c <net_linkaddr_set+0x16>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1bb0c:	2a06      	cmp	r2, #6
   1bb0e:	d808      	bhi.n	1bb22 <net_linkaddr_set+0x1c>
	lladdr_store->len = new_len;
   1bb10:	7042      	strb	r2, [r0, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   1bb12:	3002      	adds	r0, #2
   1bb14:	f7e4 fe52 	bl	7bc <memcpy>

	return 0;
   1bb18:	2000      	movs	r0, #0
   1bb1a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1bb1c:	f06f 0015 	mvn.w	r0, #21
   1bb20:	bd10      	pop	{r4, pc}
		return -EMSGSIZE;
   1bb22:	f06f 0023 	mvn.w	r0, #35	; 0x23
}
   1bb26:	bd10      	pop	{r4, pc}

0001bb28 <net_is_solicited>:
{
   1bb28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1bb2a:	a901      	add	r1, sp, #4
   1bb2c:	f7ff fbf0 	bl	1b310 <net_icmpv6_get_na_hdr>
	if (!na_hdr) {
   1bb30:	b110      	cbz	r0, 1bb38 <net_is_solicited+0x10>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   1bb32:	7800      	ldrb	r0, [r0, #0]
   1bb34:	f3c0 1080 	ubfx	r0, r0, #6, #1
}
   1bb38:	b007      	add	sp, #28
   1bb3a:	f85d fb04 	ldr.w	pc, [sp], #4

0001bb3e <net_is_override>:
{
   1bb3e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1bb40:	a901      	add	r1, sp, #4
   1bb42:	f7ff fbe5 	bl	1b310 <net_icmpv6_get_na_hdr>
	if (!na_hdr) {
   1bb46:	b110      	cbz	r0, 1bb4e <net_is_override+0x10>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   1bb48:	7800      	ldrb	r0, [r0, #0]
   1bb4a:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1bb4e:	b007      	add	sp, #28
   1bb50:	f85d fb04 	ldr.w	pc, [sp], #4

0001bb54 <net_is_router>:
{
   1bb54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1bb56:	a901      	add	r1, sp, #4
   1bb58:	f7ff fbda 	bl	1b310 <net_icmpv6_get_na_hdr>
	if (!na_hdr) {
   1bb5c:	b108      	cbz	r0, 1bb62 <net_is_router+0xe>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER;
   1bb5e:	7800      	ldrb	r0, [r0, #0]
   1bb60:	09c0      	lsrs	r0, r0, #7
}
   1bb62:	b007      	add	sp, #28
   1bb64:	f85d fb04 	ldr.w	pc, [sp], #4

0001bb68 <setup_headers>:
	       llao_len - lladdr->len - 2);
}

static void setup_headers(struct net_pkt *pkt, u8_t nd6_len,
			  u8_t icmp_type)
{
   1bb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bb6a:	4605      	mov	r5, r0
	net_buf_add(pkt->frags,
   1bb6c:	6880      	ldr	r0, [r0, #8]
{
   1bb6e:	460e      	mov	r6, r1
	net_buf_add(pkt->frags,
   1bb70:	3008      	adds	r0, #8
   1bb72:	212c      	movs	r1, #44	; 0x2c
{
   1bb74:	4617      	mov	r7, r2
	net_buf_add(pkt->frags,
   1bb76:	f7fc f9ed 	bl	17f54 <net_buf_simple_add>
   1bb7a:	68ab      	ldr	r3, [r5, #8]
   1bb7c:	689b      	ldr	r3, [r3, #8]
		    sizeof(struct net_ipv6_hdr) +
		    sizeof(struct net_icmp_hdr));

	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1bb7e:	2260      	movs	r2, #96	; 0x60
   1bb80:	701a      	strb	r2, [r3, #0]
	NET_IPV6_HDR(pkt)->tcflow = 0;
	NET_IPV6_HDR(pkt)->flow = 0;
	NET_IPV6_HDR(pkt)->len[0] = 0;
	NET_IPV6_HDR(pkt)->len[1] = NET_ICMPH_LEN + nd6_len;

	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1bb82:	223a      	movs	r2, #58	; 0x3a
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1bb84:	2400      	movs	r4, #0
	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1bb86:	719a      	strb	r2, [r3, #6]
	NET_IPV6_HDR(pkt)->len[1] = NET_ICMPH_LEN + nd6_len;
   1bb88:	3604      	adds	r6, #4
	NET_IPV6_HDR(pkt)->hop_limit = NET_IPV6_ND_HOP_LIMIT;
   1bb8a:	22ff      	movs	r2, #255	; 0xff
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1bb8c:	705c      	strb	r4, [r3, #1]
	NET_IPV6_HDR(pkt)->flow = 0;
   1bb8e:	709c      	strb	r4, [r3, #2]
   1bb90:	70dc      	strb	r4, [r3, #3]
	NET_IPV6_HDR(pkt)->len[0] = 0;
   1bb92:	711c      	strb	r4, [r3, #4]
	NET_IPV6_HDR(pkt)->len[1] = NET_ICMPH_LEN + nd6_len;
   1bb94:	715e      	strb	r6, [r3, #5]
	NET_IPV6_HDR(pkt)->hop_limit = NET_IPV6_ND_HOP_LIMIT;
   1bb96:	71da      	strb	r2, [r3, #7]

	/* In this special case where we know there are no long extension
	 * headers, so we can use this header cast.
	 */
	net_pkt_icmp_data(pkt)->type = icmp_type;
   1bb98:	4628      	mov	r0, r5
   1bb9a:	f7fe f95a 	bl	19e52 <net_pkt_icmp_data>
   1bb9e:	7007      	strb	r7, [r0, #0]
	net_pkt_icmp_data(pkt)->code = 0;
   1bba0:	4628      	mov	r0, r5
   1bba2:	f7fe f956 	bl	19e52 <net_pkt_icmp_data>
   1bba6:	7044      	strb	r4, [r0, #1]
   1bba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001bbaa <net_pkt_ll_clear>:
{
   1bbaa:	b510      	push	{r4, lr}
	return pkt->frags->data;
   1bbac:	6883      	ldr	r3, [r0, #8]
	return net_pkt_ip_data(pkt) - net_pkt_ll_reserve(pkt);
   1bbae:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
{
   1bbb2:	4604      	mov	r4, r0
	return net_pkt_ip_data(pkt) - net_pkt_ll_reserve(pkt);
   1bbb4:	6898      	ldr	r0, [r3, #8]
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   1bbb6:	2100      	movs	r1, #0
   1bbb8:	1a80      	subs	r0, r0, r2
   1bbba:	f7e4 fe2b 	bl	814 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   1bbbe:	2300      	movs	r3, #0
	net_pkt_ll_src(pkt)->len = 0;
   1bbc0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	net_pkt_ll_src(pkt)->addr = NULL;
   1bbc4:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   1bbc6:	bd10      	pop	{r4, pc}

0001bbc8 <set_llao>:
{
   1bbc8:	b570      	push	{r4, r5, r6, lr}
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   1bbca:	700b      	strb	r3, [r1, #0]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   1bbcc:	08d3      	lsrs	r3, r2, #3
{
   1bbce:	460c      	mov	r4, r1
   1bbd0:	4606      	mov	r6, r0
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   1bbd2:	704b      	strb	r3, [r1, #1]
{
   1bbd4:	4615      	mov	r5, r2
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   1bbd6:	6801      	ldr	r1, [r0, #0]
   1bbd8:	7902      	ldrb	r2, [r0, #4]
   1bbda:	1ca0      	adds	r0, r4, #2
   1bbdc:	f7e4 fdee 	bl	7bc <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1bbe0:	7930      	ldrb	r0, [r6, #4]
	       llao_len - lladdr->len - 2);
   1bbe2:	1a2a      	subs	r2, r5, r0
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1bbe4:	3002      	adds	r0, #2
   1bbe6:	4420      	add	r0, r4
   1bbe8:	3a02      	subs	r2, #2
   1bbea:	2100      	movs	r1, #0
}
   1bbec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1bbf0:	f7e4 be10 	b.w	814 <memset>

0001bbf4 <update_ll_reserve.part.32>:
static struct net_pkt *update_ll_reserve(struct net_pkt *pkt,
   1bbf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bbf8:	4680      	mov	r8, r0
	reserve = net_if_get_ll_reserve(net_pkt_iface(pkt), addr);
   1bbfa:	6940      	ldr	r0, [r0, #20]
   1bbfc:	f7ff ff31 	bl	1ba62 <net_if_get_ll_reserve>
	if (reserve == net_pkt_ll_reserve(pkt)) {
   1bc00:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
   1bc04:	4283      	cmp	r3, r0
   1bc06:	d04a      	beq.n	1bc9e <update_ll_reserve.part.32+0xaa>
	orig_frag = pkt->frags;
   1bc08:	f8d8 7008 	ldr.w	r7, [r8, #8]
	net_pkt_set_ll_reserve(pkt, reserve);
   1bc0c:	f888 0034 	strb.w	r0, [r8, #52]	; 0x34
	pkt->frags = NULL;
   1bc10:	2500      	movs	r5, #0
	copy_len = orig_frag->len;
   1bc12:	89be      	ldrh	r6, [r7, #12]
	pkt->frags = NULL;
   1bc14:	f8c8 5008 	str.w	r5, [r8, #8]
	pos = 0;
   1bc18:	46a9      	mov	r9, r5
	room_len = 0;
   1bc1a:	462c      	mov	r4, r5
			room_len = 0;
   1bc1c:	46ab      	mov	fp, r5
		if (!room_len) {
   1bc1e:	b974      	cbnz	r4, 1bc3e <update_ll_reserve.part.32+0x4a>
			frag = net_pkt_get_frag(pkt, K_FOREVER);
   1bc20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1bc24:	4640      	mov	r0, r8
   1bc26:	f7fd fea5 	bl	19974 <net_pkt_get_frag>
			net_pkt_frag_add(pkt, frag);
   1bc2a:	4601      	mov	r1, r0
			frag = net_pkt_get_frag(pkt, K_FOREVER);
   1bc2c:	4605      	mov	r5, r0
			net_pkt_frag_add(pkt, frag);
   1bc2e:	4640      	mov	r0, r8
   1bc30:	f7fd fee6 	bl	19a00 <net_pkt_frag_add>
			room_len = net_buf_tailroom(frag);
   1bc34:	f105 0008 	add.w	r0, r5, #8
   1bc38:	f7fc f9f8 	bl	1802c <net_buf_simple_tailroom>
   1bc3c:	b284      	uxth	r4, r0
		if (room_len >= copy_len) {
   1bc3e:	42b4      	cmp	r4, r6
   1bc40:	f105 0008 	add.w	r0, r5, #8
   1bc44:	d313      	bcc.n	1bc6e <update_ll_reserve.part.32+0x7a>
			memcpy(net_buf_add(frag, copy_len),
   1bc46:	4631      	mov	r1, r6
   1bc48:	f7fc f984 	bl	17f54 <net_buf_simple_add>
			       orig_frag->data + pos, copy_len);
   1bc4c:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, copy_len),
   1bc4e:	4632      	mov	r2, r6
   1bc50:	4449      	add	r1, r9
   1bc52:	f7e4 fdb3 	bl	7bc <memcpy>
			orig_frag = orig_frag->frags;
   1bc56:	f8d7 a000 	ldr.w	sl, [r7]
			tmp->frags = NULL;
   1bc5a:	f8c7 b000 	str.w	fp, [r7]
			net_pkt_frag_unref(tmp);
   1bc5e:	4638      	mov	r0, r7
   1bc60:	f7fd fea3 	bl	199aa <net_pkt_frag_unref>
			if (!orig_frag) {
   1bc64:	f1ba 0f00 	cmp.w	sl, #0
   1bc68:	d112      	bne.n	1bc90 <update_ll_reserve.part.32+0x9c>
   1bc6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(net_buf_add(frag, room_len),
   1bc6e:	4621      	mov	r1, r4
   1bc70:	f7fc f970 	bl	17f54 <net_buf_simple_add>
			       orig_frag->data + pos, room_len);
   1bc74:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, room_len),
   1bc76:	4622      	mov	r2, r4
   1bc78:	4449      	add	r1, r9
   1bc7a:	f7e4 fd9f 	bl	7bc <memcpy>
			copy_len -= room_len;
   1bc7e:	1b36      	subs	r6, r6, r4
			pos += room_len;
   1bc80:	44a1      	add	r9, r4
			copy_len -= room_len;
   1bc82:	b2b6      	uxth	r6, r6
			pos += room_len;
   1bc84:	fa1f f989 	uxth.w	r9, r9
   1bc88:	46ba      	mov	sl, r7
			room_len = 0;
   1bc8a:	2400      	movs	r4, #0
   1bc8c:	4657      	mov	r7, sl
   1bc8e:	e7c6      	b.n	1bc1e <update_ll_reserve.part.32+0x2a>
			room_len -= copy_len;
   1bc90:	1ba4      	subs	r4, r4, r6
   1bc92:	b2a4      	uxth	r4, r4
			copy_len = orig_frag->len;
   1bc94:	f8ba 600c 	ldrh.w	r6, [sl, #12]
			pos = 0;
   1bc98:	f04f 0900 	mov.w	r9, #0
   1bc9c:	e7f6      	b.n	1bc8c <update_ll_reserve.part.32+0x98>
   1bc9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001bca2 <net_if_ipv6_addr_lookup_by_iface>:
{
   1bca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bca4:	4605      	mov	r5, r0
   1bca6:	460f      	mov	r7, r1
   1bca8:	f100 0630 	add.w	r6, r0, #48	; 0x30
   1bcac:	2400      	movs	r4, #0
		if (!iface->ipv6.unicast[i].is_used ||
   1bcae:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
   1bcb2:	b93b      	cbnz	r3, 1bcc4 <net_if_ipv6_addr_lookup_by_iface+0x22>
   1bcb4:	346c      	adds	r4, #108	; 0x6c
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1bcb6:	f5b4 7fa2 	cmp.w	r4, #324	; 0x144
   1bcba:	f106 066c 	add.w	r6, r6, #108	; 0x6c
   1bcbe:	d1f6      	bne.n	1bcae <net_if_ipv6_addr_lookup_by_iface+0xc>
	return NULL;
   1bcc0:	2000      	movs	r0, #0
   1bcc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!iface->ipv6.unicast[i].is_used ||
   1bcc4:	f836 3c04 	ldrh.w	r3, [r6, #-4]
   1bcc8:	2b0a      	cmp	r3, #10
   1bcca:	d1f3      	bne.n	1bcb4 <net_if_ipv6_addr_lookup_by_iface+0x12>
	if (memcmp(addr1, addr2, bytes)) {
   1bccc:	2210      	movs	r2, #16
   1bcce:	4631      	mov	r1, r6
   1bcd0:	4638      	mov	r0, r7
   1bcd2:	f7e4 fd46 	bl	762 <memcmp>
   1bcd6:	2800      	cmp	r0, #0
   1bcd8:	d1ec      	bne.n	1bcb4 <net_if_ipv6_addr_lookup_by_iface+0x12>
			return &iface->ipv6.unicast[i];
   1bcda:	342c      	adds	r4, #44	; 0x2c
   1bcdc:	1928      	adds	r0, r5, r4
}
   1bcde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001bce0 <nbr_new.isra.30>:
static struct net_nbr *nbr_new(struct net_if *iface,
   1bce0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1bce4:	4606      	mov	r6, r0
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   1bce6:	481d      	ldr	r0, [pc, #116]	; (1bd5c <nbr_new.isra.30+0x7c>)
static struct net_nbr *nbr_new(struct net_if *iface,
   1bce8:	460d      	mov	r5, r1
   1bcea:	4690      	mov	r8, r2
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   1bcec:	f7ff fe09 	bl	1b902 <net_nbr_get>
	if (!nbr) {
   1bcf0:	4604      	mov	r4, r0
   1bcf2:	b370      	cbz	r0, 1bd52 <nbr_new.isra.30+0x72>
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   1bcf4:	23ff      	movs	r3, #255	; 0xff
   1bcf6:	7043      	strb	r3, [r0, #1]
	nbr->iface = iface;
   1bcf8:	6086      	str	r6, [r0, #8]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   1bcfa:	462b      	mov	r3, r5
   1bcfc:	68c6      	ldr	r6, [r0, #12]
   1bcfe:	466d      	mov	r5, sp
   1bd00:	f103 0e10 	add.w	lr, r3, #16
   1bd04:	466f      	mov	r7, sp
   1bd06:	6818      	ldr	r0, [r3, #0]
   1bd08:	6859      	ldr	r1, [r3, #4]
   1bd0a:	462a      	mov	r2, r5
   1bd0c:	c203      	stmia	r2!, {r0, r1}
   1bd0e:	3308      	adds	r3, #8
   1bd10:	4573      	cmp	r3, lr
   1bd12:	4615      	mov	r5, r2
   1bd14:	d1f7      	bne.n	1bd06 <nbr_new.isra.30+0x26>
   1bd16:	1d33      	adds	r3, r6, #4
   1bd18:	aa04      	add	r2, sp, #16
   1bd1a:	463d      	mov	r5, r7
   1bd1c:	cd03      	ldmia	r5!, {r0, r1}
   1bd1e:	4295      	cmp	r5, r2
   1bd20:	6018      	str	r0, [r3, #0]
   1bd22:	6059      	str	r1, [r3, #4]
   1bd24:	462f      	mov	r7, r5
   1bd26:	f103 0308 	add.w	r3, r3, #8
   1bd2a:	d1f6      	bne.n	1bd1a <nbr_new.isra.30+0x3a>
	ipv6_nbr_set_state(nbr, state);
   1bd2c:	4641      	mov	r1, r8
   1bd2e:	4620      	mov	r0, r4
   1bd30:	f7ff feaa 	bl	1ba88 <ipv6_nbr_set_state>
   1bd34:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->reachable,
   1bd36:	490a      	ldr	r1, [pc, #40]	; (1bd60 <nbr_new.isra.30+0x80>)
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   1bd38:	2301      	movs	r3, #1
   1bd3a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
	net_ipv6_nbr_data(nbr)->pending = NULL;
   1bd3e:	2300      	movs	r3, #0
   1bd40:	f840 3b14 	str.w	r3, [r0], #20
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->reachable,
   1bd44:	f005 f9f2 	bl	2112c <k_delayed_work_init>
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->send_ns,
   1bd48:	68e0      	ldr	r0, [r4, #12]
   1bd4a:	4906      	ldr	r1, [pc, #24]	; (1bd64 <nbr_new.isra.30+0x84>)
   1bd4c:	303c      	adds	r0, #60	; 0x3c
   1bd4e:	f005 f9ed 	bl	2112c <k_delayed_work_init>
}
   1bd52:	4620      	mov	r0, r4
   1bd54:	b004      	add	sp, #16
   1bd56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bd5a:	bf00      	nop
   1bd5c:	2000e2a8 	.word	0x2000e2a8
   1bd60:	0001d349 	.word	0x0001d349
   1bd64:	0001bde5 	.word	0x0001bde5

0001bd68 <net_neighbor_data_remove>:
   1bd68:	4770      	bx	lr

0001bd6a <net_pkt_append_u8>:
{
   1bd6a:	b507      	push	{r0, r1, r2, lr}
   1bd6c:	aa02      	add	r2, sp, #8
	return net_pkt_append(pkt, len, data, timeout) == len;
   1bd6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
   1bd72:	f802 1d01 	strb.w	r1, [r2, #-1]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1bd76:	2101      	movs	r1, #1
   1bd78:	f7fd ff0e 	bl	19b98 <net_pkt_append>
}
   1bd7c:	1e43      	subs	r3, r0, #1
   1bd7e:	4258      	negs	r0, r3
   1bd80:	4158      	adcs	r0, r3
   1bd82:	b003      	add	sp, #12
   1bd84:	f85d fb04 	ldr.w	pc, [sp], #4

0001bd88 <net_pkt_append_be16>:
{
   1bd88:	b507      	push	{r0, r1, r2, lr}
	u16_t value = sys_cpu_to_be16(data);
   1bd8a:	aa02      	add	r2, sp, #8
   1bd8c:	ba49      	rev16	r1, r1
   1bd8e:	f822 1d02 	strh.w	r1, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1bd92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bd96:	2102      	movs	r1, #2
   1bd98:	f7fd fefe 	bl	19b98 <net_pkt_append>
}
   1bd9c:	1e83      	subs	r3, r0, #2
   1bd9e:	4258      	negs	r0, r3
   1bda0:	4158      	adcs	r0, r3
   1bda2:	b003      	add	sp, #12
   1bda4:	f85d fb04 	ldr.w	pc, [sp], #4

0001bda8 <nbr_lookup.isra.29>:
static struct net_nbr *nbr_lookup(struct net_nbr_table *table,
   1bda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bdaa:	4c0d      	ldr	r4, [pc, #52]	; (1bde0 <nbr_lookup.isra.29+0x38>)
   1bdac:	4605      	mov	r5, r0
   1bdae:	460e      	mov	r6, r1
   1bdb0:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		if (!nbr->ref) {
   1bdb4:	7823      	ldrb	r3, [r4, #0]
   1bdb6:	b923      	cbnz	r3, 1bdc2 <nbr_lookup.isra.29+0x1a>
   1bdb8:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1bdba:	42bc      	cmp	r4, r7
   1bdbc:	d1fa      	bne.n	1bdb4 <nbr_lookup.isra.29+0xc>
	return NULL;
   1bdbe:	2000      	movs	r0, #0
   1bdc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iface && nbr->iface != iface) {
   1bdc2:	b115      	cbz	r5, 1bdca <nbr_lookup.isra.29+0x22>
   1bdc4:	68a3      	ldr	r3, [r4, #8]
   1bdc6:	429d      	cmp	r5, r3
   1bdc8:	d1f6      	bne.n	1bdb8 <nbr_lookup.isra.29+0x10>
		if (net_ipv6_addr_cmp(&net_ipv6_nbr_data(nbr)->addr, addr)) {
   1bdca:	68e0      	ldr	r0, [r4, #12]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1bdcc:	2210      	movs	r2, #16
   1bdce:	4631      	mov	r1, r6
   1bdd0:	3004      	adds	r0, #4
   1bdd2:	f7e4 fcc6 	bl	762 <memcmp>
   1bdd6:	2800      	cmp	r0, #0
   1bdd8:	d1ee      	bne.n	1bdb8 <nbr_lookup.isra.29+0x10>
   1bdda:	4620      	mov	r0, r4
}
   1bddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bdde:	bf00      	nop
   1bde0:	2000e2b4 	.word	0x2000e2b4

0001bde4 <ns_reply_timeout>:
{
   1bde4:	4910      	ldr	r1, [pc, #64]	; (1be28 <ns_reply_timeout+0x44>)
   1bde6:	b538      	push	{r3, r4, r5, lr}
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   1bde8:	f1a0 023c 	sub.w	r2, r0, #60	; 0x3c
{
   1bdec:	4604      	mov	r4, r0
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1bdee:	2300      	movs	r3, #0
   1bdf0:	eb01 15c3 	add.w	r5, r1, r3, lsl #7
		if (nbr->data == (u8_t *)data) {
   1bdf4:	68e8      	ldr	r0, [r5, #12]
   1bdf6:	4282      	cmp	r2, r0
   1bdf8:	d011      	beq.n	1be1e <ns_reply_timeout+0x3a>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1bdfa:	3301      	adds	r3, #1
   1bdfc:	2b08      	cmp	r3, #8
   1bdfe:	d1f7      	bne.n	1bdf0 <ns_reply_timeout+0xc>
   1be00:	bd38      	pop	{r3, r4, r5, pc}
	net_pkt_unref(data->pending);
   1be02:	f7fd fdd6 	bl	199b2 <net_pkt_unref>
	net_pkt_unref(data->pending);
   1be06:	f854 0c3c 	ldr.w	r0, [r4, #-60]
   1be0a:	f7fd fdd2 	bl	199b2 <net_pkt_unref>
	data->pending = NULL;
   1be0e:	2300      	movs	r3, #0
   1be10:	f844 3c3c 	str.w	r3, [r4, #-60]
	net_nbr_unref(nbr);
   1be14:	4628      	mov	r0, r5
}
   1be16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_nbr_unref(nbr);
   1be1a:	f7ff bd69 	b.w	1b8f0 <net_nbr_unref>
	if (!data->pending) {
   1be1e:	f854 0c3c 	ldr.w	r0, [r4, #-60]
   1be22:	2800      	cmp	r0, #0
   1be24:	d1ed      	bne.n	1be02 <ns_reply_timeout+0x1e>
   1be26:	bd38      	pop	{r3, r4, r5, pc}
   1be28:	2000e2b4 	.word	0x2000e2b4

0001be2c <net_ipv6_nbr_state2str>:
{
   1be2c:	2805      	cmp	r0, #5
   1be2e:	bf9a      	itte	ls
   1be30:	4b02      	ldrls	r3, [pc, #8]	; (1be3c <net_ipv6_nbr_state2str+0x10>)
   1be32:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   1be36:	4802      	ldrhi	r0, [pc, #8]	; (1be40 <net_ipv6_nbr_state2str+0x14>)
}
   1be38:	4770      	bx	lr
   1be3a:	bf00      	nop
   1be3c:	000228f0 	.word	0x000228f0
   1be40:	00022918 	.word	0x00022918

0001be44 <net_ipv6_nbr_foreach>:
{
   1be44:	b507      	push	{r0, r1, r2, lr}
	struct iface_cb_data cb_data = {
   1be46:	e88d 0003 	stmia.w	sp, {r0, r1}
	net_if_foreach(iface_cb, &cb_data);
   1be4a:	4669      	mov	r1, sp
   1be4c:	4802      	ldr	r0, [pc, #8]	; (1be58 <net_ipv6_nbr_foreach+0x14>)
   1be4e:	f7fd fc35 	bl	196bc <net_if_foreach>
}
   1be52:	b003      	add	sp, #12
   1be54:	f85d fb04 	ldr.w	pc, [sp], #4
   1be58:	0001ba9d 	.word	0x0001ba9d

0001be5c <net_ipv6_nbr_rm>:
{
   1be5c:	b570      	push	{r4, r5, r6, lr}
   1be5e:	4605      	mov	r5, r0
   1be60:	460e      	mov	r6, r1
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   1be62:	f7ff ffa1 	bl	1bda8 <nbr_lookup.isra.29>
	if (!nbr) {
   1be66:	4604      	mov	r4, r0
   1be68:	b170      	cbz	r0, 1be88 <net_ipv6_nbr_rm+0x2c>
	net_route_del_by_nexthop(iface, addr);
   1be6a:	4631      	mov	r1, r6
   1be6c:	4628      	mov	r0, r5
   1be6e:	f001 ffad 	bl	1ddcc <net_route_del_by_nexthop>
	nbr_free(nbr);
   1be72:	4620      	mov	r0, r4
   1be74:	f7ff fe35 	bl	1bae2 <nbr_free>
   1be78:	2300      	movs	r3, #0
   1be7a:	461a      	mov	r2, r3
   1be7c:	4629      	mov	r1, r5
   1be7e:	4803      	ldr	r0, [pc, #12]	; (1be8c <net_ipv6_nbr_rm+0x30>)
   1be80:	f001 fe7c 	bl	1db7c <net_mgmt_event_notify_with_info>
	return true;
   1be84:	2001      	movs	r0, #1
   1be86:	bd70      	pop	{r4, r5, r6, pc}
}
   1be88:	bd70      	pop	{r4, r5, r6, pc}
   1be8a:	bf00      	nop
   1be8c:	f0600010 	.word	0xf0600010

0001be90 <net_ipv6_unspecified_address>:
}
   1be90:	4800      	ldr	r0, [pc, #0]	; (1be94 <net_ipv6_unspecified_address+0x4>)
   1be92:	4770      	bx	lr
   1be94:	00022908 	.word	0x00022908

0001be98 <net_ipv6_create_raw>:
{
   1be98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1be9c:	460e      	mov	r6, r1
   1be9e:	b089      	sub	sp, #36	; 0x24
	header = net_pkt_get_frag(pkt, K_FOREVER);
   1bea0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
   1bea4:	4605      	mov	r5, r0
   1bea6:	4617      	mov	r7, r2
   1bea8:	4699      	mov	r9, r3
	header = net_pkt_get_frag(pkt, K_FOREVER);
   1beaa:	f7fd fd63 	bl	19974 <net_pkt_get_frag>
	net_pkt_frag_insert(pkt, header);
   1beae:	4601      	mov	r1, r0
	header = net_pkt_get_frag(pkt, K_FOREVER);
   1beb0:	4680      	mov	r8, r0
	net_pkt_frag_insert(pkt, header);
   1beb2:	4628      	mov	r0, r5
   1beb4:	f7fd fdbe 	bl	19a34 <net_pkt_frag_insert>
   1beb8:	f8d5 e008 	ldr.w	lr, [r5, #8]
	return pkt->frags->data;
   1bebc:	f8de 4008 	ldr.w	r4, [lr, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1bec0:	2200      	movs	r2, #0
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1bec2:	2360      	movs	r3, #96	; 0x60
   1bec4:	7023      	strb	r3, [r4, #0]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1bec6:	7062      	strb	r2, [r4, #1]
	NET_IPV6_HDR(pkt)->flow = 0;
   1bec8:	70a2      	strb	r2, [r4, #2]
   1beca:	70e2      	strb	r2, [r4, #3]
	NET_IPV6_HDR(pkt)->nexthdr = 0;
   1becc:	71a2      	strb	r2, [r4, #6]
   1bece:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
	NET_IPV6_HDR(pkt)->hop_limit = net_pkt_ipv6_hop_limit(pkt);
   1bed2:	71e2      	strb	r2, [r4, #7]
	if (NET_IPV6_HDR(pkt)->hop_limit == 0) {
   1bed4:	b912      	cbnz	r2, 1bedc <net_ipv6_create_raw+0x44>
   1bed6:	f899 324c 	ldrb.w	r3, [r9, #588]	; 0x24c
		NET_IPV6_HDR(pkt)->hop_limit =
   1beda:	71e3      	strb	r3, [r4, #7]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1bedc:	463a      	mov	r2, r7
   1bede:	f107 0910 	add.w	r9, r7, #16
   1bee2:	466b      	mov	r3, sp
   1bee4:	466f      	mov	r7, sp
   1bee6:	6810      	ldr	r0, [r2, #0]
   1bee8:	6851      	ldr	r1, [r2, #4]
   1beea:	469c      	mov	ip, r3
   1beec:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1bef0:	3208      	adds	r2, #8
   1bef2:	454a      	cmp	r2, r9
   1bef4:	4663      	mov	r3, ip
   1bef6:	d1f6      	bne.n	1bee6 <net_ipv6_create_raw+0x4e>
   1bef8:	f104 0c18 	add.w	ip, r4, #24
   1befc:	aa04      	add	r2, sp, #16
   1befe:	463b      	mov	r3, r7
   1bf00:	cb03      	ldmia	r3!, {r0, r1}
   1bf02:	4293      	cmp	r3, r2
   1bf04:	f8cc 0000 	str.w	r0, [ip]
   1bf08:	f8cc 1004 	str.w	r1, [ip, #4]
   1bf0c:	461f      	mov	r7, r3
   1bf0e:	f10c 0c08 	add.w	ip, ip, #8
   1bf12:	d1f4      	bne.n	1befe <net_ipv6_create_raw+0x66>
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1bf14:	4633      	mov	r3, r6
   1bf16:	4617      	mov	r7, r2
   1bf18:	f106 0c10 	add.w	ip, r6, #16
   1bf1c:	6818      	ldr	r0, [r3, #0]
   1bf1e:	6859      	ldr	r1, [r3, #4]
   1bf20:	463e      	mov	r6, r7
   1bf22:	c603      	stmia	r6!, {r0, r1}
   1bf24:	3308      	adds	r3, #8
   1bf26:	4563      	cmp	r3, ip
   1bf28:	4637      	mov	r7, r6
   1bf2a:	d1f7      	bne.n	1bf1c <net_ipv6_create_raw+0x84>
   1bf2c:	4613      	mov	r3, r2
   1bf2e:	3408      	adds	r4, #8
   1bf30:	ae08      	add	r6, sp, #32
   1bf32:	461a      	mov	r2, r3
   1bf34:	ca03      	ldmia	r2!, {r0, r1}
   1bf36:	42b2      	cmp	r2, r6
   1bf38:	6020      	str	r0, [r4, #0]
   1bf3a:	6061      	str	r1, [r4, #4]
   1bf3c:	4613      	mov	r3, r2
   1bf3e:	f104 0408 	add.w	r4, r4, #8
   1bf42:	d1f6      	bne.n	1bf32 <net_ipv6_create_raw+0x9a>
	pkt->ipv6_ext_len = len;
   1bf44:	2300      	movs	r3, #0
   1bf46:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
	NET_IPV6_HDR(pkt)->nexthdr = next_header;
   1bf4a:	f8de 3008 	ldr.w	r3, [lr, #8]
   1bf4e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   1bf52:	719a      	strb	r2, [r3, #6]
	pkt->family = family;
   1bf54:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
   1bf58:	220a      	movs	r2, #10
	pkt->ip_hdr_len = len;
   1bf5a:	2128      	movs	r1, #40	; 0x28
	pkt->family = family;
   1bf5c:	f362 03c6 	bfi	r3, r2, #3, #4
	pkt->ip_hdr_len = len;
   1bf60:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
	pkt->family = family;
   1bf64:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
	net_buf_add(header, sizeof(struct net_ipv6_hdr));
   1bf68:	f108 0008 	add.w	r0, r8, #8
   1bf6c:	f7fb fff2 	bl	17f54 <net_buf_simple_add>
}
   1bf70:	4628      	mov	r0, r5
   1bf72:	b009      	add	sp, #36	; 0x24
   1bf74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001bf78 <net_ipv6_create>:
{
   1bf78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bf7a:	4605      	mov	r5, r0
   1bf7c:	460e      	mov	r6, r1
   1bf7e:	461f      	mov	r7, r3
	if (!src) {
   1bf80:	4614      	mov	r4, r2
   1bf82:	b902      	cbnz	r2, 1bf86 <net_ipv6_create+0xe>
		src = ((struct sockaddr_in6_ptr *)&context->local)->sin6_addr;
   1bf84:	68c4      	ldr	r4, [r0, #12]
	if (net_is_ipv6_addr_unspecified(src)
   1bf86:	4620      	mov	r0, r4
   1bf88:	f7ff fd5e 	bl	1ba48 <net_is_ipv6_addr_unspecified>
   1bf8c:	b910      	cbnz	r0, 1bf94 <net_ipv6_create+0x1c>
	    || net_is_ipv6_addr_mcast(src)) {
   1bf8e:	7823      	ldrb	r3, [r4, #0]
   1bf90:	2bff      	cmp	r3, #255	; 0xff
   1bf92:	d104      	bne.n	1bf9e <net_ipv6_create+0x26>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   1bf94:	4639      	mov	r1, r7
   1bf96:	6970      	ldr	r0, [r6, #20]
   1bf98:	f7fd fa2a 	bl	193f0 <net_if_ipv6_select_src_addr>
   1bf9c:	4604      	mov	r4, r0
	return net_if_get_by_index(context->iface);
   1bf9e:	f895 0054 	ldrb.w	r0, [r5, #84]	; 0x54
   1bfa2:	f7fd fb71 	bl	19688 <net_if_get_by_index>
	if (context->flags & NET_CONTEXT_PROTO) {
   1bfa6:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
	return IPPROTO_UDP;
   1bfaa:	f013 0f40 	tst.w	r3, #64	; 0x40
   1bfae:	bf14      	ite	ne
   1bfb0:	2306      	movne	r3, #6
   1bfb2:	2311      	moveq	r3, #17
	return net_ipv6_create_raw(pkt,
   1bfb4:	9300      	str	r3, [sp, #0]
   1bfb6:	463a      	mov	r2, r7
   1bfb8:	4603      	mov	r3, r0
   1bfba:	4621      	mov	r1, r4
   1bfbc:	4630      	mov	r0, r6
   1bfbe:	f7ff ff6b 	bl	1be98 <net_ipv6_create_raw>
}
   1bfc2:	b003      	add	sp, #12
   1bfc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001bfc6 <net_ipv6_finalize_raw>:
{
   1bfc6:	b538      	push	{r3, r4, r5, lr}
   1bfc8:	4604      	mov	r4, r0
   1bfca:	460d      	mov	r5, r1
	net_pkt_compact(pkt);
   1bfcc:	f7fd fd9f 	bl	19b0e <net_pkt_compact>
   1bfd0:	68a1      	ldr	r1, [r4, #8]
	return net_buf_frags_len(pkt->frags);
   1bfd2:	4608      	mov	r0, r1
   1bfd4:	f7ff fd30 	bl	1ba38 <net_buf_frags_len>
	total_len -= sizeof(struct net_ipv6_hdr);
   1bfd8:	3828      	subs	r0, #40	; 0x28
	return pkt->frags->data;
   1bfda:	688b      	ldr	r3, [r1, #8]
	NET_IPV6_HDR(pkt)->len[0] = total_len >> 8;
   1bfdc:	0a02      	lsrs	r2, r0, #8
	if (next_header == IPPROTO_UDP) {
   1bfde:	2d11      	cmp	r5, #17
	NET_IPV6_HDR(pkt)->len[0] = total_len >> 8;
   1bfe0:	711a      	strb	r2, [r3, #4]
	NET_IPV6_HDR(pkt)->len[1] = total_len & 0xff;
   1bfe2:	7158      	strb	r0, [r3, #5]
	if (next_header == IPPROTO_UDP) {
   1bfe4:	d104      	bne.n	1bff0 <net_ipv6_finalize_raw+0x2a>
		net_udp_set_chksum(pkt, pkt->frags);
   1bfe6:	4620      	mov	r0, r4
   1bfe8:	f002 fec9 	bl	1ed7e <net_udp_set_chksum>
}
   1bfec:	2000      	movs	r0, #0
   1bfee:	bd38      	pop	{r3, r4, r5, pc}
	if (next_header == IPPROTO_ICMPV6) {
   1bff0:	2d3a      	cmp	r5, #58	; 0x3a
   1bff2:	d1fb      	bne.n	1bfec <net_ipv6_finalize_raw+0x26>
		net_icmpv6_set_chksum(pkt, pkt->frags);
   1bff4:	4620      	mov	r0, r4
   1bff6:	f7fe ff47 	bl	1ae88 <net_icmpv6_set_chksum>
   1bffa:	e7f7      	b.n	1bfec <net_ipv6_finalize_raw+0x26>

0001bffc <send_mldv2_raw>:

	return pkt;
}

static int send_mldv2_raw(struct net_if *iface, struct net_buf *frags)
{
   1bffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c000:	b08a      	sub	sp, #40	; 0x28
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1c002:	f240 23ff 	movw	r3, #767	; 0x2ff
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1c006:	2500      	movs	r5, #0
   1c008:	460f      	mov	r7, r1
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1c00a:	f8ad 3018 	strh.w	r3, [sp, #24]
	int ret;

	/* Sent to all MLDv2-capable routers */
	net_ipv6_addr_create(&dst, 0xff02, 0, 0, 0, 0, 0, 0, 0x0016);

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, &dst),
   1c00e:	a906      	add	r1, sp, #24
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1c010:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
{
   1c014:	4606      	mov	r6, r0
   1c016:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1c01a:	f8ad 501a 	strh.w	r5, [sp, #26]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1c01e:	f8ad 501c 	strh.w	r5, [sp, #28]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1c022:	f8ad 501e 	strh.w	r5, [sp, #30]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1c026:	f8ad 5020 	strh.w	r5, [sp, #32]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1c02a:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1c02e:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, &dst),
   1c032:	f7ff fd16 	bl	1ba62 <net_if_get_ll_reserve>
   1c036:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c03a:	f7fd fc83 	bl	19944 <net_pkt_get_reserve_tx>
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt,
   1c03e:	a906      	add	r1, sp, #24
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, &dst),
   1c040:	4604      	mov	r4, r0
	pkt = net_ipv6_create_raw(pkt,
   1c042:	4630      	mov	r0, r6
   1c044:	f7fd f9d4 	bl	193f0 <net_if_ipv6_select_src_addr>
   1c048:	4633      	mov	r3, r6
   1c04a:	4601      	mov	r1, r0
   1c04c:	aa06      	add	r2, sp, #24
   1c04e:	4620      	mov	r0, r4
   1c050:	9500      	str	r5, [sp, #0]
   1c052:	f7ff ff21 	bl	1be98 <net_ipv6_create_raw>
   1c056:	6883      	ldr	r3, [r0, #8]
				  net_if_ipv6_select_src_addr(iface, &dst),
				  &dst,
				  iface,
				  NET_IPV6_NEXTHDR_HBHO);

	NET_IPV6_HDR(pkt)->hop_limit = 1; /* RFC 3810 ch 7.4 */
   1c058:	689a      	ldr	r2, [r3, #8]
   1c05a:	2101      	movs	r1, #1
   1c05c:	71d1      	strb	r1, [r2, #7]

	net_pkt_set_ipv6_hdr_prev(pkt, pkt->frags->len);
   1c05e:	899b      	ldrh	r3, [r3, #12]
	pkt->ipv6_prev_hdr_start = offset;
   1c060:	8783      	strh	r3, [r0, #60]	; 0x3c
	pkt = net_ipv6_create_raw(pkt,
   1c062:	4604      	mov	r4, r0

	/* Add hop-by-hop option and router alert option, RFC 3810 ch 5. */
	net_pkt_append_u8(pkt, IPPROTO_ICMPV6);
   1c064:	213a      	movs	r1, #58	; 0x3a
   1c066:	f7ff fe80 	bl	1bd6a <net_pkt_append_u8>
	net_pkt_append_u8(pkt, 0); /* length (0 means 8 bytes) */
   1c06a:	4629      	mov	r1, r5
   1c06c:	4620      	mov	r0, r4
   1c06e:	f7ff fe7c 	bl	1bd6a <net_pkt_append_u8>

#define ROUTER_ALERT_LEN 8

	/* IPv6 router alert option is described in RFC 2711. */
	net_pkt_append_be16(pkt, 0x0502); /* RFC 2711 ch 2.1 */
   1c072:	f240 5102 	movw	r1, #1282	; 0x502
   1c076:	4620      	mov	r0, r4
   1c078:	f7ff fe86 	bl	1bd88 <net_pkt_append_be16>
	net_pkt_append_be16(pkt, 0); /* pkt contains MLD msg */
   1c07c:	4629      	mov	r1, r5
   1c07e:	4620      	mov	r0, r4
   1c080:	f7ff fe82 	bl	1bd88 <net_pkt_append_be16>

	net_pkt_append_u8(pkt, 0); /* padding */
   1c084:	4629      	mov	r1, r5
   1c086:	4620      	mov	r0, r4
   1c088:	f7ff fe6f 	bl	1bd6a <net_pkt_append_u8>
	net_pkt_append_u8(pkt, 0); /* padding */
   1c08c:	4629      	mov	r1, r5
   1c08e:	4620      	mov	r0, r4
   1c090:	f7ff fe6b 	bl	1bd6a <net_pkt_append_u8>

	/* ICMPv6 header */
	net_pkt_append_u8(pkt, NET_ICMPV6_MLDv2); /* type */
   1c094:	218f      	movs	r1, #143	; 0x8f
   1c096:	4620      	mov	r0, r4
   1c098:	f7ff fe67 	bl	1bd6a <net_pkt_append_u8>
	net_pkt_append_u8(pkt, 0); /* code */
   1c09c:	4629      	mov	r1, r5
   1c09e:	4620      	mov	r0, r4
   1c0a0:	f7ff fe63 	bl	1bd6a <net_pkt_append_u8>
	net_pkt_append_be16(pkt, 0); /* chksum */
   1c0a4:	4629      	mov	r1, r5
   1c0a6:	4620      	mov	r0, r4
   1c0a8:	f7ff fe6e 	bl	1bd88 <net_pkt_append_be16>

	pkt->frags->len = NET_IPV6ICMPH_LEN + ROUTER_ALERT_LEN;
   1c0ac:	68a3      	ldr	r3, [r4, #8]
   1c0ae:	2234      	movs	r2, #52	; 0x34
   1c0b0:	819a      	strh	r2, [r3, #12]
	pkt->iface = iface;
   1c0b2:	6166      	str	r6, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1c0b4:	7d73      	ldrb	r3, [r6, #21]
   1c0b6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1c0ba:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_iface(pkt, iface);

	net_pkt_append_be16(pkt, 0); /* reserved field */
   1c0be:	4629      	mov	r1, r5
   1c0c0:	4620      	mov	r0, r4
   1c0c2:	f7ff fe61 	bl	1bd88 <net_pkt_append_be16>

	/* Insert the actual multicast record(s) here */
	net_pkt_frag_add(pkt, frags);
   1c0c6:	4639      	mov	r1, r7
   1c0c8:	4620      	mov	r0, r4
   1c0ca:	f7fd fc99 	bl	19a00 <net_pkt_frag_add>

	ret = net_ipv6_finalize_raw(pkt, NET_IPV6_NEXTHDR_HBHO);
   1c0ce:	4629      	mov	r1, r5
   1c0d0:	4620      	mov	r0, r4
   1c0d2:	f7ff ff78 	bl	1bfc6 <net_ipv6_finalize_raw>
	if (ret < 0) {
   1c0d6:	1e06      	subs	r6, r0, #0
   1c0d8:	4f21      	ldr	r7, [pc, #132]	; (1c160 <send_mldv2_raw+0x164>)
   1c0da:	db37      	blt.n	1c14c <send_mldv2_raw+0x150>
	pkt->ipv6_ext_len = len;
   1c0dc:	2308      	movs	r3, #8
   1c0de:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1c0e2:	213a      	movs	r1, #58	; 0x3a
   1c0e4:	4620      	mov	r0, r4
		goto drop;
	}

	net_pkt_set_ipv6_ext_len(pkt, ROUTER_ALERT_LEN);

	net_pkt_write_be16(pkt, pkt->frags,
   1c0e6:	f8d4 8008 	ldr.w	r8, [r4, #8]
   1c0ea:	f7fe f8f3 	bl	1a2d4 <net_calc_chksum>
   1c0ee:	213a      	movs	r1, #58	; 0x3a
   1c0f0:	4606      	mov	r6, r0
   1c0f2:	4620      	mov	r0, r4
   1c0f4:	f7fe f8ee 	bl	1a2d4 <net_calc_chksum>
			   NET_IPV6H_LEN + ROUTER_ALERT_LEN + 2,
			   &pos, ntohs(~net_calc_chksum_icmpv6(pkt)));
   1c0f8:	ea6f 2626 	mvn.w	r6, r6, asr #8
   1c0fc:	b2f6      	uxtb	r6, r6
   1c0fe:	43c0      	mvns	r0, r0
   1c100:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
	net_pkt_write_be16(pkt, pkt->frags,
   1c104:	b280      	uxth	r0, r0
						 struct net_buf *frag,
						 u16_t offset,
						 u16_t *pos,
						 u16_t data)
{
	u16_t value = htons(data);
   1c106:	0203      	lsls	r3, r0, #8
   1c108:	ea43 2010 	orr.w	r0, r3, r0, lsr #8

	return net_pkt_write(pkt, frag, offset, pos, sizeof(u16_t),
   1c10c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c110:	9302      	str	r3, [sp, #8]
   1c112:	f10d 0316 	add.w	r3, sp, #22
   1c116:	9301      	str	r3, [sp, #4]
   1c118:	2302      	movs	r3, #2
	u16_t value = htons(data);
   1c11a:	f8ad 0016 	strh.w	r0, [sp, #22]
	return net_pkt_write(pkt, frag, offset, pos, sizeof(u16_t),
   1c11e:	9300      	str	r3, [sp, #0]
   1c120:	2232      	movs	r2, #50	; 0x32
   1c122:	ab05      	add	r3, sp, #20
   1c124:	4641      	mov	r1, r8
   1c126:	4620      	mov	r0, r4
   1c128:	f7fd fdea 	bl	19d00 <net_pkt_write>

	ret = net_send_data(pkt);
   1c12c:	4620      	mov	r0, r4
   1c12e:	f7fc fb4d 	bl	187cc <net_send_data>
	if (ret < 0) {
   1c132:	1e06      	subs	r6, r0, #0
   1c134:	db0a      	blt.n	1c14c <send_mldv2_raw+0x150>
	net_stats.icmp.sent++;
   1c136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c138:	3301      	adds	r3, #1
   1c13a:	63bb      	str	r3, [r7, #56]	; 0x38
	net_stats.ipv6_mld.recv++;
}

static inline void net_stats_update_ipv6_mld_sent(void)
{
	net_stats.ipv6_mld.sent++;
   1c13c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1c13e:	3301      	adds	r3, #1
   1c140:	66bb      	str	r3, [r7, #104]	; 0x68
	}

	net_stats_update_icmp_sent();
	net_stats_update_ipv6_mld_sent();

	return 0;
   1c142:	462e      	mov	r6, r5
	net_pkt_unref(pkt);
	net_stats_update_icmp_drop();
	net_stats_update_ipv6_mld_drop();

	return ret;
}
   1c144:	4630      	mov	r0, r6
   1c146:	b00a      	add	sp, #40	; 0x28
   1c148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_pkt_unref(pkt);
   1c14c:	4620      	mov	r0, r4
   1c14e:	f7fd fc30 	bl	199b2 <net_pkt_unref>
	net_stats.icmp.drop++;
   1c152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1c154:	3301      	adds	r3, #1
   1c156:	63fb      	str	r3, [r7, #60]	; 0x3c
}

static inline void net_stats_update_ipv6_mld_drop(void)
{
	net_stats.ipv6_mld.drop++;
   1c158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c15a:	3301      	adds	r3, #1
   1c15c:	66fb      	str	r3, [r7, #108]	; 0x6c
   1c15e:	e7f1      	b.n	1c144 <send_mldv2_raw+0x148>
   1c160:	20004cf4 	.word	0x20004cf4

0001c164 <send_mldv2>:

static int send_mldv2(struct net_if *iface, const struct in6_addr *addr,
		      u8_t mode)
{
   1c164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c166:	460e      	mov	r6, r1
	struct net_pkt *pkt;
	int ret;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1c168:	2100      	movs	r1, #0
{
   1c16a:	4617      	mov	r7, r2
   1c16c:	4605      	mov	r5, r0
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1c16e:	f7ff fc78 	bl	1ba62 <net_if_get_ll_reserve>
   1c172:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c176:	f7fd fbe5 	bl	19944 <net_pkt_get_reserve_tx>
				     K_FOREVER);

	net_pkt_append_be16(pkt, 1); /* number of records */
   1c17a:	2101      	movs	r1, #1
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1c17c:	4604      	mov	r4, r0
	net_pkt_append_be16(pkt, 1); /* number of records */
   1c17e:	f7ff fe03 	bl	1bd88 <net_pkt_append_be16>
	net_pkt_append_u8(pkt, record_type);
   1c182:	4639      	mov	r1, r7
   1c184:	4620      	mov	r0, r4
   1c186:	f7ff fdf0 	bl	1bd6a <net_pkt_append_u8>
	net_pkt_append_u8(pkt, 0); /* aux data len */
   1c18a:	2100      	movs	r1, #0
   1c18c:	4620      	mov	r0, r4
   1c18e:	f7ff fdec 	bl	1bd6a <net_pkt_append_u8>
	net_pkt_append_be16(pkt, num_sources); /* number of addresses */
   1c192:	2101      	movs	r1, #1
   1c194:	4620      	mov	r0, r4
   1c196:	f7ff fdf7 	bl	1bd88 <net_pkt_append_be16>
	return net_pkt_append(pkt, len, data, timeout) == len;
   1c19a:	4632      	mov	r2, r6
   1c19c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c1a0:	2110      	movs	r1, #16
   1c1a2:	4620      	mov	r0, r4
   1c1a4:	f7fd fcf8 	bl	19b98 <net_pkt_append>
   1c1a8:	4a09      	ldr	r2, [pc, #36]	; (1c1d0 <send_mldv2+0x6c>)
   1c1aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c1ae:	2110      	movs	r1, #16
   1c1b0:	4620      	mov	r0, r4
   1c1b2:	f7fd fcf1 	bl	19b98 <net_pkt_append>

	pkt = create_mldv2(pkt, addr, mode, 1);

	ret = send_mldv2_raw(iface, pkt->frags);
   1c1b6:	68a1      	ldr	r1, [r4, #8]
   1c1b8:	4628      	mov	r0, r5
   1c1ba:	f7ff ff1f 	bl	1bffc <send_mldv2_raw>

	pkt->frags = NULL;
   1c1be:	2300      	movs	r3, #0
	ret = send_mldv2_raw(iface, pkt->frags);
   1c1c0:	4605      	mov	r5, r0
	pkt->frags = NULL;
   1c1c2:	60a3      	str	r3, [r4, #8]

	net_pkt_unref(pkt);
   1c1c4:	4620      	mov	r0, r4
   1c1c6:	f7fd fbf4 	bl	199b2 <net_pkt_unref>

	return ret;
}
   1c1ca:	4628      	mov	r0, r5
   1c1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c1ce:	bf00      	nop
   1c1d0:	00022908 	.word	0x00022908

0001c1d4 <handle_mld_query>:

	net_pkt_unref(pkt);
}

static enum net_verdict handle_mld_query(struct net_pkt *pkt)
{
   1c1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	net_stats.ipv6_mld.recv++;
   1c1d8:	4e60      	ldr	r6, [pc, #384]	; (1c35c <handle_mld_query+0x188>)
   1c1da:	b08c      	sub	sp, #48	; 0x30
   1c1dc:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   1c1de:	6880      	ldr	r0, [r0, #8]
   1c1e0:	f7ff fc2a 	bl	1ba38 <net_buf_frags_len>
   1c1e4:	6e73      	ldr	r3, [r6, #100]	; 0x64
   1c1e6:	3301      	adds	r3, #1
   1c1e8:	6673      	str	r3, [r6, #100]	; 0x64
	net_stats_update_ipv6_mld_recv();

	/* offset tells now where the ICMPv6 header is starting */
	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
				net_pkt_ipv6_ext_len(pkt) +
   1c1ea:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
				net_pkt_ip_hdr_len(pkt) +
   1c1ee:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
	frag = net_frag_get_pos(pkt,
   1c1f2:	4419      	add	r1, r3
   1c1f4:	aa06      	add	r2, sp, #24
   1c1f6:	3104      	adds	r1, #4
	u16_t total_len = net_pkt_get_len(pkt);
   1c1f8:	b287      	uxth	r7, r0
	frag = net_frag_get_pos(pkt,
   1c1fa:	4620      	mov	r0, r4
   1c1fc:	f7fd fe20 	bl	19e40 <net_frag_get_pos>
	return net_frag_read(frag, offset, pos, len, NULL);
   1c200:	f04f 0800 	mov.w	r8, #0
				sizeof(struct net_icmp_hdr),
				&offset);

	frag = net_frag_read_be16(frag, offset, &pos, &max_rsp_code);
   1c204:	ab05      	add	r3, sp, #20
   1c206:	f10d 021a 	add.w	r2, sp, #26
   1c20a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1c20e:	f7fd fd5b 	bl	19cc8 <net_frag_read_be16>
	frag = net_frag_skip(frag, pos, &pos, 2); /* two reserved bytes */
	frag = net_frag_read(frag, pos, &pos, sizeof(mcast), mcast.s6_addr);
   1c212:	ad08      	add	r5, sp, #32
   1c214:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   1c218:	f8cd 8000 	str.w	r8, [sp]
   1c21c:	2302      	movs	r3, #2
   1c21e:	f10d 021a 	add.w	r2, sp, #26
   1c222:	f7fd fd19 	bl	19c58 <net_frag_read>
   1c226:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   1c22a:	9500      	str	r5, [sp, #0]
   1c22c:	2310      	movs	r3, #16
   1c22e:	f10d 021a 	add.w	r2, sp, #26
   1c232:	f7fd fd11 	bl	19c58 <net_frag_read>
   1c236:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   1c23a:	f8cd 8000 	str.w	r8, [sp]
   1c23e:	2302      	movs	r3, #2
   1c240:	f10d 021a 	add.w	r2, sp, #26
   1c244:	f7fd fd08 	bl	19c58 <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 2); /* skip S, QRV & QQIC */
	frag = net_frag_read_be16(pkt->frags, pos, &pos, &num_src);
   1c248:	f10d 0316 	add.w	r3, sp, #22
   1c24c:	f10d 021a 	add.w	r2, sp, #26
   1c250:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   1c254:	68a0      	ldr	r0, [r4, #8]
   1c256:	f7fd fd37 	bl	19cc8 <net_frag_read_be16>
	if (!frag && pos == 0xffff) {
   1c25a:	b928      	cbnz	r0, 1c268 <handle_mld_query+0x94>
   1c25c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   1c260:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c264:	429a      	cmp	r2, r3
   1c266:	d072      	beq.n	1c34e <handle_mld_query+0x17a>
		goto drop;
	}

	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
		sizeof(struct in6_addr) * num_src;
   1c268:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1c26c:	011b      	lsls	r3, r3, #4
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   1c26e:	f103 0244 	add.w	r2, r3, #68	; 0x44
   1c272:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   1c276:	4413      	add	r3, r2
   1c278:	b29b      	uxth	r3, r3

	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   1c27a:	429f      	cmp	r7, r3
   1c27c:	d307      	bcc.n	1c28e <handle_mld_query+0xba>
   1c27e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   1c282:	d804      	bhi.n	1c28e <handle_mld_query+0xba>
	return pkt->frags->data;
   1c284:	68a3      	ldr	r3, [r4, #8]
	     (NET_IPV6_HDR(pkt)->hop_limit != 1))) {
   1c286:	689b      	ldr	r3, [r3, #8]
	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   1c288:	79db      	ldrb	r3, [r3, #7]
   1c28a:	2b01      	cmp	r3, #1
   1c28c:	d008      	beq.n	1c2a0 <handle_mld_query+0xcc>
		struct net_icmp_hdr hdr, *icmp_hdr;

		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1c28e:	a907      	add	r1, sp, #28
   1c290:	4620      	mov	r0, r4
   1c292:	f7fe fe43 	bl	1af1c <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1c296:	2800      	cmp	r0, #0
   1c298:	d059      	beq.n	1c34e <handle_mld_query+0x17a>
   1c29a:	7843      	ldrb	r3, [r0, #1]
   1c29c:	2b00      	cmp	r3, #0
   1c29e:	d156      	bne.n	1c34e <handle_mld_query+0x17a>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1c2a0:	4628      	mov	r0, r5
   1c2a2:	2210      	movs	r2, #16
   1c2a4:	492e      	ldr	r1, [pc, #184]	; (1c360 <handle_mld_query+0x18c>)
   1c2a6:	f7e4 fa5c 	bl	762 <memcmp>
			goto drop;
		}
	}

	/* Currently we only support a unspecified address query. */
	if (!net_ipv6_addr_cmp(&mcast, net_ipv6_unspecified_address())) {
   1c2aa:	4605      	mov	r5, r0
   1c2ac:	2800      	cmp	r0, #0
   1c2ae:	d14e      	bne.n	1c34e <handle_mld_query+0x17a>
   1c2b0:	6967      	ldr	r7, [r4, #20]
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1c2b2:	4601      	mov	r1, r0
   1c2b4:	4638      	mov	r0, r7
   1c2b6:	f7ff fbd4 	bl	1ba62 <net_if_get_ll_reserve>
   1c2ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c2be:	f7fd fb41 	bl	19944 <net_pkt_get_reserve_tx>
	net_pkt_append_u8(pkt, 0); /* This will be the record count */
   1c2c2:	4629      	mov	r1, r5
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1c2c4:	4604      	mov	r4, r0
	net_pkt_append_u8(pkt, 0); /* This will be the record count */
   1c2c6:	f7ff fd50 	bl	1bd6a <net_pkt_append_u8>
   1c2ca:	f507 79bc 	add.w	r9, r7, #376	; 0x178
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1c2ce:	46a8      	mov	r8, r5
		if (!iface->ipv6.mcast[i].is_used ||
   1c2d0:	f04f 0a18 	mov.w	sl, #24
   1c2d4:	fb0a 7308 	mla	r3, sl, r8, r7
   1c2d8:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1c2dc:	07da      	lsls	r2, r3, #31
   1c2de:	d515      	bpl.n	1c30c <handle_mld_query+0x138>
   1c2e0:	079b      	lsls	r3, r3, #30
   1c2e2:	d513      	bpl.n	1c30c <handle_mld_query+0x138>
	net_pkt_append_u8(pkt, record_type);
   1c2e4:	2102      	movs	r1, #2
   1c2e6:	4620      	mov	r0, r4
   1c2e8:	f7ff fd3f 	bl	1bd6a <net_pkt_append_u8>
	net_pkt_append_u8(pkt, 0); /* aux data len */
   1c2ec:	2100      	movs	r1, #0
   1c2ee:	4620      	mov	r0, r4
   1c2f0:	f7ff fd3b 	bl	1bd6a <net_pkt_append_u8>
	net_pkt_append_be16(pkt, num_sources); /* number of addresses */
   1c2f4:	2100      	movs	r1, #0
   1c2f6:	4620      	mov	r0, r4
   1c2f8:	f7ff fd46 	bl	1bd88 <net_pkt_append_be16>
	return net_pkt_append(pkt, len, data, timeout) == len;
   1c2fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c300:	464a      	mov	r2, r9
   1c302:	2110      	movs	r1, #16
   1c304:	4620      	mov	r0, r4
   1c306:	f7fd fc47 	bl	19b98 <net_pkt_append>
		count++;
   1c30a:	3501      	adds	r5, #1
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1c30c:	f108 0801 	add.w	r8, r8, #1
   1c310:	f1b8 0f02 	cmp.w	r8, #2
   1c314:	f109 0918 	add.w	r9, r9, #24
   1c318:	d1dc      	bne.n	1c2d4 <handle_mld_query+0x100>
	if (count > 0) {
   1c31a:	b1ad      	cbz	r5, 1c348 <handle_mld_query+0x174>
	return net_pkt_write(pkt, frag, offset, pos, sizeof(u8_t),
   1c31c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		net_pkt_write_u8(pkt, pkt->frags, 0, &pos, count);
   1c320:	68a1      	ldr	r1, [r4, #8]
   1c322:	9302      	str	r3, [sp, #8]
   1c324:	f10d 0313 	add.w	r3, sp, #19
   1c328:	9301      	str	r3, [sp, #4]
   1c32a:	2301      	movs	r3, #1
   1c32c:	9300      	str	r3, [sp, #0]
   1c32e:	2200      	movs	r2, #0
   1c330:	ab07      	add	r3, sp, #28
   1c332:	4620      	mov	r0, r4
   1c334:	f88d 5013 	strb.w	r5, [sp, #19]
   1c338:	f7fd fce2 	bl	19d00 <net_pkt_write>
		send_mldv2_raw(iface, pkt->frags);
   1c33c:	68a1      	ldr	r1, [r4, #8]
   1c33e:	4638      	mov	r0, r7
   1c340:	f7ff fe5c 	bl	1bffc <send_mldv2_raw>
		pkt->frags = NULL;
   1c344:	2300      	movs	r3, #0
   1c346:	60a3      	str	r3, [r4, #8]
	net_pkt_unref(pkt);
   1c348:	4620      	mov	r0, r4
   1c34a:	f7fd fb32 	bl	199b2 <net_pkt_unref>
	net_stats.ipv6_mld.drop++;
   1c34e:	6ef3      	ldr	r3, [r6, #108]	; 0x6c

drop:
	net_stats_update_ipv6_mld_drop();

	return NET_DROP;
}
   1c350:	2002      	movs	r0, #2
   1c352:	3301      	adds	r3, #1
   1c354:	66f3      	str	r3, [r6, #108]	; 0x6c
   1c356:	b00c      	add	sp, #48	; 0x30
   1c358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c35c:	20004cf4 	.word	0x20004cf4
   1c360:	00022908 	.word	0x00022908

0001c364 <net_ipv6_finalize>:
	if (context->flags & NET_CONTEXT_PROTO) {
   1c364:	f890 2055 	ldrb.w	r2, [r0, #85]	; 0x55
{
   1c368:	460b      	mov	r3, r1
   1c36a:	f012 0f40 	tst.w	r2, #64	; 0x40
	return net_ipv6_finalize_raw(pkt, net_context_get_ip_proto(context));
   1c36e:	bf14      	ite	ne
   1c370:	2106      	movne	r1, #6
   1c372:	2111      	moveq	r1, #17
   1c374:	4618      	mov	r0, r3
   1c376:	f7ff be26 	b.w	1bfc6 <net_ipv6_finalize_raw>

0001c37a <net_ipv6_nbr_lookup>:
	return nbr_lookup(&net_neighbor.table, iface, addr);
   1c37a:	f7ff bd15 	b.w	1bda8 <nbr_lookup.isra.29>

0001c37e <net_ipv6_send_na>:
{
   1c37e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c382:	4689      	mov	r9, r1
   1c384:	b092      	sub	sp, #72	; 0x48
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1c386:	4611      	mov	r1, r2
{
   1c388:	4615      	mov	r5, r2
   1c38a:	461e      	mov	r6, r3
   1c38c:	4607      	mov	r7, r0
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1c38e:	f7ff fb68 	bl	1ba62 <net_if_get_ll_reserve>
   1c392:	210a      	movs	r1, #10
   1c394:	f7fd fad6 	bl	19944 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1c398:	4604      	mov	r4, r0
   1c39a:	b138      	cbz	r0, 1c3ac <net_ipv6_send_na+0x2e>
	frag = net_pkt_get_frag(pkt, ND_NET_BUF_TIMEOUT);
   1c39c:	210a      	movs	r1, #10
   1c39e:	f7fd fae9 	bl	19974 <net_pkt_get_frag>
	if (!frag) {
   1c3a2:	4682      	mov	sl, r0
   1c3a4:	b928      	cbnz	r0, 1c3b2 <net_ipv6_send_na+0x34>
		net_pkt_unref(pkt);
   1c3a6:	4620      	mov	r0, r4
   1c3a8:	f7fd fb03 	bl	199b2 <net_pkt_unref>
		return -ENOMEM;
   1c3ac:	f06f 000b 	mvn.w	r0, #11
   1c3b0:	e0a9      	b.n	1c506 <net_ipv6_send_na+0x188>
	net_pkt_frag_add(pkt, frag);
   1c3b2:	4601      	mov	r1, r0
   1c3b4:	4620      	mov	r0, r4
   1c3b6:	f7fd fb23 	bl	19a00 <net_pkt_frag_add>
	pkt->iface = iface;
   1c3ba:	6167      	str	r7, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1c3bc:	7d7b      	ldrb	r3, [r7, #21]
   1c3be:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1c3c2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   1c3c6:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   1c3ca:	220a      	movs	r2, #10
   1c3cc:	f362 03c6 	bfi	r3, r2, #3, #4
   1c3d0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	pkt->ip_hdr_len = len;
   1c3d4:	2328      	movs	r3, #40	; 0x28
   1c3d6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	net_pkt_ll_clear(pkt);
   1c3da:	4620      	mov	r0, r4
   1c3dc:	f7ff fbe5 	bl	1bbaa <net_pkt_ll_clear>
   1c3e0:	7d3b      	ldrb	r3, [r7, #20]
	if (iface->link_addr.len == 6) {
   1c3e2:	2b06      	cmp	r3, #6
   1c3e4:	f000 8092 	beq.w	1c50c <net_ipv6_send_na+0x18e>
	return 0;
   1c3e8:	2b08      	cmp	r3, #8
   1c3ea:	bf0c      	ite	eq
   1c3ec:	2710      	moveq	r7, #16
   1c3ee:	2700      	movne	r7, #0
	pkt->ipv6_ext_len = len;
   1c3f0:	2300      	movs	r3, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_na_hdr) + llao_len,
   1c3f2:	f107 0814 	add.w	r8, r7, #20
   1c3f6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   1c3fa:	2288      	movs	r2, #136	; 0x88
   1c3fc:	f008 01fc 	and.w	r1, r8, #252	; 0xfc
   1c400:	4620      	mov	r0, r4
   1c402:	f7ff fbb1 	bl	1bb68 <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_na_hdr) + llao_len);
   1c406:	4641      	mov	r1, r8
   1c408:	f10a 0008 	add.w	r0, sl, #8
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1c40c:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
	net_buf_add(frag, sizeof(struct net_icmpv6_na_hdr) + llao_len);
   1c410:	f7fb fda0 	bl	17f54 <net_buf_simple_add>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1c414:	4651      	mov	r1, sl
   1c416:	4620      	mov	r0, r4
   1c418:	f7fe ff7a 	bl	1b310 <net_icmpv6_get_na_hdr>
	if (!na_hdr) {
   1c41c:	4680      	mov	r8, r0
   1c41e:	2800      	cmp	r0, #0
   1c420:	d076      	beq.n	1c510 <net_ipv6_send_na+0x192>
	return pkt->frags->data;
   1c422:	68a3      	ldr	r3, [r4, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1c424:	f10d 0c04 	add.w	ip, sp, #4
   1c428:	f8d3 e008 	ldr.w	lr, [r3, #8]
   1c42c:	464b      	mov	r3, r9
   1c42e:	f109 0910 	add.w	r9, r9, #16
   1c432:	6818      	ldr	r0, [r3, #0]
   1c434:	6859      	ldr	r1, [r3, #4]
   1c436:	4662      	mov	r2, ip
   1c438:	c203      	stmia	r2!, {r0, r1}
   1c43a:	3308      	adds	r3, #8
   1c43c:	454b      	cmp	r3, r9
   1c43e:	4694      	mov	ip, r2
   1c440:	d1f7      	bne.n	1c432 <net_ipv6_send_na+0xb4>
   1c442:	f10d 0c04 	add.w	ip, sp, #4
   1c446:	f10e 0208 	add.w	r2, lr, #8
   1c44a:	f10d 0914 	add.w	r9, sp, #20
   1c44e:	4663      	mov	r3, ip
   1c450:	cb03      	ldmia	r3!, {r0, r1}
   1c452:	454b      	cmp	r3, r9
   1c454:	6010      	str	r0, [r2, #0]
   1c456:	6051      	str	r1, [r2, #4]
   1c458:	469c      	mov	ip, r3
   1c45a:	f102 0208 	add.w	r2, r2, #8
   1c45e:	d1f6      	bne.n	1c44e <net_ipv6_send_na+0xd0>
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1c460:	ab05      	add	r3, sp, #20
   1c462:	462a      	mov	r2, r5
   1c464:	f105 0910 	add.w	r9, r5, #16
   1c468:	469c      	mov	ip, r3
   1c46a:	6810      	ldr	r0, [r2, #0]
   1c46c:	6851      	ldr	r1, [r2, #4]
   1c46e:	461d      	mov	r5, r3
   1c470:	c503      	stmia	r5!, {r0, r1}
   1c472:	3208      	adds	r2, #8
   1c474:	454a      	cmp	r2, r9
   1c476:	462b      	mov	r3, r5
   1c478:	d1f7      	bne.n	1c46a <net_ipv6_send_na+0xec>
   1c47a:	f10e 0318 	add.w	r3, lr, #24
   1c47e:	aa09      	add	r2, sp, #36	; 0x24
   1c480:	4665      	mov	r5, ip
   1c482:	cd03      	ldmia	r5!, {r0, r1}
   1c484:	4295      	cmp	r5, r2
   1c486:	6018      	str	r0, [r3, #0]
   1c488:	6059      	str	r1, [r3, #4]
   1c48a:	46ac      	mov	ip, r5
   1c48c:	f103 0308 	add.w	r3, r3, #8
   1c490:	d1f6      	bne.n	1c480 <net_ipv6_send_na+0x102>
	net_ipaddr_copy(&na_hdr->tgt, tgt);
   1c492:	4633      	mov	r3, r6
   1c494:	f103 0e10 	add.w	lr, r3, #16
   1c498:	4616      	mov	r6, r2
   1c49a:	6818      	ldr	r0, [r3, #0]
   1c49c:	6859      	ldr	r1, [r3, #4]
   1c49e:	4635      	mov	r5, r6
   1c4a0:	c503      	stmia	r5!, {r0, r1}
   1c4a2:	3308      	adds	r3, #8
   1c4a4:	4573      	cmp	r3, lr
   1c4a6:	462e      	mov	r6, r5
   1c4a8:	d1f7      	bne.n	1c49a <net_ipv6_send_na+0x11c>
   1c4aa:	4613      	mov	r3, r2
   1c4ac:	f108 0504 	add.w	r5, r8, #4
   1c4b0:	461a      	mov	r2, r3
   1c4b2:	ca03      	ldmia	r2!, {r0, r1}
   1c4b4:	4552      	cmp	r2, sl
   1c4b6:	6028      	str	r0, [r5, #0]
   1c4b8:	6069      	str	r1, [r5, #4]
   1c4ba:	4613      	mov	r3, r2
   1c4bc:	f105 0508 	add.w	r5, r5, #8
   1c4c0:	d1f6      	bne.n	1c4b0 <net_ipv6_send_na+0x132>
		 (u8_t *)net_pkt_icmp_data(pkt) + sizeof(struct net_icmp_hdr) +
   1c4c2:	4620      	mov	r0, r4
	set_llao(&net_pkt_iface(pkt)->link_addr,
   1c4c4:	6965      	ldr	r5, [r4, #20]
		 (u8_t *)net_pkt_icmp_data(pkt) + sizeof(struct net_icmp_hdr) +
   1c4c6:	f7fd fcc4 	bl	19e52 <net_pkt_icmp_data>
	set_llao(&net_pkt_iface(pkt)->link_addr,
   1c4ca:	3510      	adds	r5, #16
   1c4cc:	463a      	mov	r2, r7
   1c4ce:	f100 0118 	add.w	r1, r0, #24
   1c4d2:	2302      	movs	r3, #2
   1c4d4:	4628      	mov	r0, r5
   1c4d6:	f7ff fb77 	bl	1bbc8 <set_llao>
	na_hdr->flags = flags;
   1c4da:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   1c4de:	f888 3000 	strb.w	r3, [r8]
	net_icmpv6_set_na_hdr(pkt, na_hdr);
   1c4e2:	4641      	mov	r1, r8
   1c4e4:	4620      	mov	r0, r4
   1c4e6:	f7fe ff48 	bl	1b37a <net_icmpv6_set_na_hdr>
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   1c4ea:	68a1      	ldr	r1, [r4, #8]
		sizeof(struct net_icmpv6_na_hdr) + llao_len;
   1c4ec:	3740      	adds	r7, #64	; 0x40
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   1c4ee:	818f      	strh	r7, [r1, #12]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1c4f0:	4620      	mov	r0, r4
   1c4f2:	f7fe fcc9 	bl	1ae88 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   1c4f6:	4620      	mov	r0, r4
   1c4f8:	f7fc f968 	bl	187cc <net_send_data>
   1c4fc:	2800      	cmp	r0, #0
   1c4fe:	db07      	blt.n	1c510 <net_ipv6_send_na+0x192>
	net_stats_update_ipv6_nd_sent();
   1c500:	f7ff fab2 	bl	1ba68 <net_stats_update_ipv6_nd_sent>
	return 0;
   1c504:	2000      	movs	r0, #0
}
   1c506:	b012      	add	sp, #72	; 0x48
   1c508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 8;
   1c50c:	2708      	movs	r7, #8
   1c50e:	e76f      	b.n	1c3f0 <net_ipv6_send_na+0x72>
	net_pkt_unref(pkt);
   1c510:	4620      	mov	r0, r4
   1c512:	f7fd fa4e 	bl	199b2 <net_pkt_unref>
	net_stats_update_ipv6_nd_drop();
   1c516:	f7ff faaf 	bl	1ba78 <net_stats_update_ipv6_nd_drop>
	return -EINVAL;
   1c51a:	f06f 0015 	mvn.w	r0, #21
   1c51e:	e7f2      	b.n	1c506 <net_ipv6_send_na+0x188>

0001c520 <net_ipv6_nbr_set_reachable_timer>:
	k_delayed_work_submit(&net_ipv6_nbr_data(nbr)->reachable, time);
   1c520:	68c9      	ldr	r1, [r1, #12]
   1c522:	f8d0 2244 	ldr.w	r2, [r0, #580]	; 0x244
   1c526:	4802      	ldr	r0, [pc, #8]	; (1c530 <net_ipv6_nbr_set_reachable_timer+0x10>)
   1c528:	3114      	adds	r1, #20
   1c52a:	f004 be77 	b.w	2121c <k_delayed_work_submit_to_queue>
   1c52e:	bf00      	nop
   1c530:	200052a0 	.word	0x200052a0

0001c534 <handle_na_input>:
{
   1c534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c538:	4604      	mov	r4, r0
   1c53a:	b08c      	sub	sp, #48	; 0x30
	return net_buf_frags_len(pkt->frags);
   1c53c:	6880      	ldr	r0, [r0, #8]
   1c53e:	f7ff fa7b 	bl	1ba38 <net_buf_frags_len>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &nahdr);
   1c542:	a907      	add	r1, sp, #28
   1c544:	4606      	mov	r6, r0
   1c546:	4620      	mov	r0, r4
   1c548:	f7fe fee2 	bl	1b310 <net_icmpv6_get_na_hdr>
	if (!na_hdr) {
   1c54c:	4605      	mov	r5, r0
   1c54e:	b160      	cbz	r0, 1c56a <handle_na_input+0x36>
	net_stats.ipv6_nd.recv++;
   1c550:	4aa5      	ldr	r2, [pc, #660]	; (1c7e8 <handle_na_input+0x2b4>)
   1c552:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   1c554:	b2b6      	uxth	r6, r6
   1c556:	3301      	adds	r3, #1
   1c558:	2e41      	cmp	r6, #65	; 0x41
   1c55a:	65d3      	str	r3, [r2, #92]	; 0x5c
   1c55c:	d80b      	bhi.n	1c576 <handle_na_input+0x42>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1c55e:	a905      	add	r1, sp, #20
   1c560:	4620      	mov	r0, r4
   1c562:	f7fe fcdb 	bl	1af1c <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1c566:	2800      	cmp	r0, #0
   1c568:	d156      	bne.n	1c618 <handle_na_input+0xe4>
	net_stats_update_ipv6_nd_drop();
   1c56a:	f7ff fa85 	bl	1ba78 <net_stats_update_ipv6_nd_drop>
	return NET_DROP;
   1c56e:	2002      	movs	r0, #2
}
   1c570:	b00c      	add	sp, #48	; 0x30
   1c572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return pkt->frags->data;
   1c576:	68a3      	ldr	r3, [r4, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1c578:	689b      	ldr	r3, [r3, #8]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   1c57a:	79db      	ldrb	r3, [r3, #7]
   1c57c:	2bff      	cmp	r3, #255	; 0xff
   1c57e:	d1ee      	bne.n	1c55e <handle_na_input+0x2a>
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1c580:	7903      	ldrb	r3, [r0, #4]
   1c582:	2bff      	cmp	r3, #255	; 0xff
   1c584:	d0eb      	beq.n	1c55e <handle_na_input+0x2a>
	    (net_is_solicited(pkt) &&
   1c586:	4620      	mov	r0, r4
   1c588:	f7ff face 	bl	1bb28 <net_is_solicited>
	    net_is_ipv6_addr_mcast(&na_hdr->tgt) ||
   1c58c:	b120      	cbz	r0, 1c598 <handle_na_input+0x64>
   1c58e:	68a3      	ldr	r3, [r4, #8]
	    (net_is_solicited(pkt) &&
   1c590:	689b      	ldr	r3, [r3, #8]
   1c592:	7e1b      	ldrb	r3, [r3, #24]
   1c594:	2bff      	cmp	r3, #255	; 0xff
   1c596:	d0e2      	beq.n	1c55e <handle_na_input+0x2a>
	pkt->ipv6_ext_opt_len = len;
   1c598:	2314      	movs	r3, #20
   1c59a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   1c59e:	a902      	add	r1, sp, #8
   1c5a0:	4620      	mov	r0, r4
   1c5a2:	f7fe fe84 	bl	1b2ae <net_icmpv6_get_nd_opt_hdr>
   1c5a6:	4601      	mov	r1, r0
	return net_buf_frags_len(pkt->frags);
   1c5a8:	68a0      	ldr	r0, [r4, #8]
   1c5aa:	f7ff fa45 	bl	1ba38 <net_buf_frags_len>
	u16_t tllao_offset = 0;
   1c5ae:	2600      	movs	r6, #0
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   1c5b0:	f1a0 072c 	sub.w	r7, r0, #44	; 0x2c
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   1c5b4:	b131      	cbz	r1, 1c5c4 <handle_na_input+0x90>
   1c5b6:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   1c5ba:	4297      	cmp	r7, r2
   1c5bc:	d902      	bls.n	1c5c4 <handle_na_input+0x90>
		if (!nd_opt_hdr->len) {
   1c5be:	784b      	ldrb	r3, [r1, #1]
   1c5c0:	2b00      	cmp	r3, #0
   1c5c2:	d12d      	bne.n	1c620 <handle_na_input+0xec>
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   1c5c4:	1d2f      	adds	r7, r5, #4
   1c5c6:	4639      	mov	r1, r7
   1c5c8:	6960      	ldr	r0, [r4, #20]
   1c5ca:	f7ff fb6a 	bl	1bca2 <net_if_ipv6_addr_lookup_by_iface>
	if (ifaddr) {
   1c5ce:	2800      	cmp	r0, #0
   1c5d0:	d13e      	bne.n	1c650 <handle_na_input+0x11c>
	struct net_linkaddr_storage lladdr = { 0 };
   1c5d2:	9003      	str	r0, [sp, #12]
   1c5d4:	9004      	str	r0, [sp, #16]
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt),
   1c5d6:	4639      	mov	r1, r7
   1c5d8:	6960      	ldr	r0, [r4, #20]
   1c5da:	f7ff fbe5 	bl	1bda8 <nbr_lookup.isra.29>
	if (!nbr) {
   1c5de:	4605      	mov	r5, r0
   1c5e0:	2800      	cmp	r0, #0
   1c5e2:	d0c2      	beq.n	1c56a <handle_na_input+0x36>
	if (tllao_offset) {
   1c5e4:	2e00      	cmp	r6, #0
   1c5e6:	d141      	bne.n	1c66c <handle_na_input+0x138>
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   1c5e8:	786b      	ldrb	r3, [r5, #1]
   1c5ea:	2bff      	cmp	r3, #255	; 0xff
   1c5ec:	d154      	bne.n	1c698 <handle_na_input+0x164>
		if (!tllao_offset) {
   1c5ee:	2e00      	cmp	r6, #0
   1c5f0:	d0bb      	beq.n	1c56a <handle_na_input+0x36>
		nbr_lladdr.len = lladdr.len;
   1c5f2:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1c5f6:	f88d 3018 	strb.w	r3, [sp, #24]
		nbr_lladdr.addr = lladdr.addr;
   1c5fa:	aa0c      	add	r2, sp, #48	; 0x30
   1c5fc:	f10d 030e 	add.w	r3, sp, #14
   1c600:	f842 3d1c 	str.w	r3, [r2, #-28]!
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   1c604:	6961      	ldr	r1, [r4, #20]
   1c606:	4628      	mov	r0, r5
   1c608:	f7ff f994 	bl	1b934 <net_nbr_link>
   1c60c:	2800      	cmp	r0, #0
   1c60e:	d043      	beq.n	1c698 <handle_na_input+0x164>
			nbr_free(nbr);
   1c610:	4628      	mov	r0, r5
   1c612:	f7ff fa66 	bl	1bae2 <nbr_free>
   1c616:	e7a8      	b.n	1c56a <handle_na_input+0x36>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1c618:	7843      	ldrb	r3, [r0, #1]
   1c61a:	2b00      	cmp	r3, #0
   1c61c:	d1a5      	bne.n	1c56a <handle_na_input+0x36>
   1c61e:	e7bb      	b.n	1c598 <handle_na_input+0x64>
		switch (nd_opt_hdr->type) {
   1c620:	7809      	ldrb	r1, [r1, #0]
   1c622:	2902      	cmp	r1, #2
   1c624:	d107      	bne.n	1c636 <handle_na_input+0x102>
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   1c626:	f894 6035 	ldrb.w	r6, [r4, #53]	; 0x35
				net_pkt_ipv6_ext_len(pkt) +
   1c62a:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   1c62e:	440e      	add	r6, r1
   1c630:	3606      	adds	r6, #6
   1c632:	4416      	add	r6, r2
   1c634:	b2b6      	uxth	r6, r6
		net_pkt_set_ipv6_ext_opt_len(pkt,
   1c636:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1c63a:	b2db      	uxtb	r3, r3
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   1c63c:	4293      	cmp	r3, r2
	pkt->ipv6_ext_opt_len = len;
   1c63e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   1c642:	d992      	bls.n	1c56a <handle_na_input+0x36>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   1c644:	a902      	add	r1, sp, #8
   1c646:	4620      	mov	r0, r4
   1c648:	f7fe fe31 	bl	1b2ae <net_icmpv6_get_nd_opt_hdr>
   1c64c:	4601      	mov	r1, r0
   1c64e:	e7b1      	b.n	1c5b4 <handle_na_input+0x80>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   1c650:	f990 3065 	ldrsb.w	r3, [r0, #101]	; 0x65
   1c654:	2b00      	cmp	r3, #0
   1c656:	d188      	bne.n	1c56a <handle_na_input+0x36>
	if (net_is_ipv6_ll_addr(addr)) {
   1c658:	88aa      	ldrh	r2, [r5, #4]
   1c65a:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1c65e:	429a      	cmp	r2, r3
   1c660:	d083      	beq.n	1c56a <handle_na_input+0x36>
	net_if_ipv6_dad_failed(iface, addr);
   1c662:	4639      	mov	r1, r7
   1c664:	6960      	ldr	r0, [r4, #20]
   1c666:	f7fc fc91 	bl	18f8c <net_if_ipv6_dad_failed>
   1c66a:	e77e      	b.n	1c56a <handle_na_input+0x36>
		lladdr.len = net_pkt_iface(pkt)->link_addr.len;
   1c66c:	6963      	ldr	r3, [r4, #20]
		frag = net_frag_read(pkt->frags, tllao_offset,
   1c66e:	68a0      	ldr	r0, [r4, #8]
		lladdr.len = net_pkt_iface(pkt)->link_addr.len;
   1c670:	7d1b      	ldrb	r3, [r3, #20]
   1c672:	f88d 300d 	strb.w	r3, [sp, #13]
		frag = net_frag_read(pkt->frags, tllao_offset,
   1c676:	f10d 020e 	add.w	r2, sp, #14
   1c67a:	9200      	str	r2, [sp, #0]
   1c67c:	4631      	mov	r1, r6
   1c67e:	f10d 020a 	add.w	r2, sp, #10
   1c682:	f7fd fae9 	bl	19c58 <net_frag_read>
		if (!frag && pos == 0xffff) {
   1c686:	2800      	cmp	r0, #0
   1c688:	d1ae      	bne.n	1c5e8 <handle_na_input+0xb4>
   1c68a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1c68e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c692:	429a      	cmp	r2, r3
   1c694:	d1a8      	bne.n	1c5e8 <handle_na_input+0xb4>
   1c696:	e768      	b.n	1c56a <handle_na_input+0x36>
	cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   1c698:	7868      	ldrb	r0, [r5, #1]
   1c69a:	f7ff f9c5 	bl	1ba28 <net_nbr_get_lladdr>
	if (!cached_lladdr) {
   1c69e:	4607      	mov	r7, r0
   1c6a0:	2800      	cmp	r0, #0
   1c6a2:	f43f af62 	beq.w	1c56a <handle_na_input+0x36>
	if (tllao_offset) {
   1c6a6:	2e00      	cmp	r6, #0
   1c6a8:	d04a      	beq.n	1c740 <handle_na_input+0x20c>
		lladdr_changed = memcmp(lladdr.addr,
   1c6aa:	7842      	ldrb	r2, [r0, #1]
   1c6ac:	1c81      	adds	r1, r0, #2
   1c6ae:	f10d 000e 	add.w	r0, sp, #14
   1c6b2:	f7e4 f856 	bl	762 <memcmp>
   1c6b6:	f110 0800 	adds.w	r8, r0, #0
   1c6ba:	bf18      	it	ne
   1c6bc:	f04f 0801 	movne.w	r8, #1
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   1c6c0:	68eb      	ldr	r3, [r5, #12]
   1c6c2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1c6c6:	2b00      	cmp	r3, #0
   1c6c8:	d141      	bne.n	1c74e <handle_na_input+0x21a>
		if (!tllao_offset) {
   1c6ca:	2e00      	cmp	r6, #0
   1c6cc:	f43f af4d 	beq.w	1c56a <handle_na_input+0x36>
		if (lladdr_changed) {
   1c6d0:	f1b8 0f00 	cmp.w	r8, #0
   1c6d4:	d005      	beq.n	1c6e2 <handle_na_input+0x1ae>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   1c6d6:	787a      	ldrb	r2, [r7, #1]
   1c6d8:	f10d 010e 	add.w	r1, sp, #14
   1c6dc:	4638      	mov	r0, r7
   1c6de:	f7ff fa12 	bl	1bb06 <net_linkaddr_set>
		if (net_is_solicited(pkt)) {
   1c6e2:	4620      	mov	r0, r4
   1c6e4:	f7ff fa20 	bl	1bb28 <net_is_solicited>
   1c6e8:	b360      	cbz	r0, 1c744 <handle_na_input+0x210>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   1c6ea:	2101      	movs	r1, #1
   1c6ec:	4628      	mov	r0, r5
   1c6ee:	f7ff f9cb 	bl	1ba88 <ipv6_nbr_set_state>
   1c6f2:	68eb      	ldr	r3, [r5, #12]
			net_ipv6_nbr_data(nbr)->ns_count = 0;
   1c6f4:	2200      	movs	r2, #0
   1c6f6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			k_delayed_work_cancel(
   1c6fa:	68e8      	ldr	r0, [r5, #12]
   1c6fc:	3014      	adds	r0, #20
   1c6fe:	f004 fd33 	bl	21168 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   1c702:	4629      	mov	r1, r5
   1c704:	6960      	ldr	r0, [r4, #20]
   1c706:	f7ff ff0b 	bl	1c520 <net_ipv6_nbr_set_reachable_timer>
	net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   1c70a:	4620      	mov	r0, r4
   1c70c:	68ee      	ldr	r6, [r5, #12]
   1c70e:	f7ff fa21 	bl	1bb54 <net_is_router>
	pending = net_ipv6_nbr_data(nbr)->pending;
   1c712:	68eb      	ldr	r3, [r5, #12]
	net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   1c714:	f886 0069 	strb.w	r0, [r6, #105]	; 0x69
	pending = net_ipv6_nbr_data(nbr)->pending;
   1c718:	681e      	ldr	r6, [r3, #0]
	if (pending) {
   1c71a:	b156      	cbz	r6, 1c732 <handle_na_input+0x1fe>
		if (net_send_data(pending) < 0) {
   1c71c:	4630      	mov	r0, r6
   1c71e:	f7fc f855 	bl	187cc <net_send_data>
   1c722:	2800      	cmp	r0, #0
   1c724:	da5c      	bge.n	1c7e0 <handle_na_input+0x2ac>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   1c726:	68e8      	ldr	r0, [r5, #12]
   1c728:	f7ff f9cf 	bl	1baca <nbr_clear_ns_pending>
		net_pkt_unref(pending);
   1c72c:	4630      	mov	r0, r6
   1c72e:	f7fd f940 	bl	199b2 <net_pkt_unref>
	net_pkt_unref(pkt);
   1c732:	4620      	mov	r0, r4
   1c734:	f7fd f93d 	bl	199b2 <net_pkt_unref>
	net_stats_update_ipv6_nd_sent();
   1c738:	f7ff f996 	bl	1ba68 <net_stats_update_ipv6_nd_sent>
	return NET_OK;
   1c73c:	2000      	movs	r0, #0
   1c73e:	e717      	b.n	1c570 <handle_na_input+0x3c>
	bool lladdr_changed = false;
   1c740:	46b0      	mov	r8, r6
   1c742:	e7bd      	b.n	1c6c0 <handle_na_input+0x18c>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1c744:	2102      	movs	r1, #2
   1c746:	4628      	mov	r0, r5
   1c748:	f7ff f99e 	bl	1ba88 <ipv6_nbr_set_state>
   1c74c:	e7dd      	b.n	1c70a <handle_na_input+0x1d6>
	if (!net_is_override(pkt) && lladdr_changed) {
   1c74e:	4620      	mov	r0, r4
   1c750:	f7ff f9f5 	bl	1bb3e <net_is_override>
   1c754:	b968      	cbnz	r0, 1c772 <handle_na_input+0x23e>
   1c756:	f1b8 0f00 	cmp.w	r8, #0
   1c75a:	d00a      	beq.n	1c772 <handle_na_input+0x23e>
		if (net_ipv6_nbr_data(nbr)->state ==
   1c75c:	68eb      	ldr	r3, [r5, #12]
   1c75e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1c762:	2b01      	cmp	r3, #1
   1c764:	f47f af01 	bne.w	1c56a <handle_na_input+0x36>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1c768:	2102      	movs	r1, #2
   1c76a:	4628      	mov	r0, r5
   1c76c:	f7ff f98c 	bl	1ba88 <ipv6_nbr_set_state>
   1c770:	e6fb      	b.n	1c56a <handle_na_input+0x36>
	if (net_is_override(pkt) ||
   1c772:	4620      	mov	r0, r4
   1c774:	f7ff f9e3 	bl	1bb3e <net_is_override>
   1c778:	bb00      	cbnz	r0, 1c7bc <handle_na_input+0x288>
	    (!net_is_override(pkt) && tllao_offset && !lladdr_changed)) {
   1c77a:	4620      	mov	r0, r4
   1c77c:	f7ff f9df 	bl	1bb3e <net_is_override>
	if (net_is_override(pkt) ||
   1c780:	b998      	cbnz	r0, 1c7aa <handle_na_input+0x276>
	    (!net_is_override(pkt) && tllao_offset && !lladdr_changed)) {
   1c782:	b196      	cbz	r6, 1c7aa <handle_na_input+0x276>
   1c784:	f1b8 0f00 	cmp.w	r8, #0
   1c788:	d10f      	bne.n	1c7aa <handle_na_input+0x276>
		if (net_is_solicited(pkt)) {
   1c78a:	4620      	mov	r0, r4
   1c78c:	f7ff f9cc 	bl	1bb28 <net_is_solicited>
   1c790:	b1f0      	cbz	r0, 1c7d0 <handle_na_input+0x29c>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   1c792:	2101      	movs	r1, #1
   1c794:	4628      	mov	r0, r5
   1c796:	f7ff f977 	bl	1ba88 <ipv6_nbr_set_state>
			k_delayed_work_cancel(
   1c79a:	68e8      	ldr	r0, [r5, #12]
   1c79c:	3014      	adds	r0, #20
   1c79e:	f004 fce3 	bl	21168 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   1c7a2:	4629      	mov	r1, r5
   1c7a4:	6960      	ldr	r0, [r4, #20]
   1c7a6:	f7ff febb 	bl	1c520 <net_ipv6_nbr_set_reachable_timer>
	if (net_ipv6_nbr_data(nbr)->is_router && !net_is_router(pkt)) {
   1c7aa:	68eb      	ldr	r3, [r5, #12]
   1c7ac:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   1c7b0:	2b00      	cmp	r3, #0
   1c7b2:	d0aa      	beq.n	1c70a <handle_na_input+0x1d6>
   1c7b4:	4620      	mov	r0, r4
   1c7b6:	f7ff f9cd 	bl	1bb54 <net_is_router>
   1c7ba:	e7a6      	b.n	1c70a <handle_na_input+0x1d6>
		if (lladdr_changed) {
   1c7bc:	f1b8 0f00 	cmp.w	r8, #0
   1c7c0:	d0e3      	beq.n	1c78a <handle_na_input+0x256>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   1c7c2:	787a      	ldrb	r2, [r7, #1]
   1c7c4:	f10d 010e 	add.w	r1, sp, #14
   1c7c8:	4638      	mov	r0, r7
   1c7ca:	f7ff f99c 	bl	1bb06 <net_linkaddr_set>
   1c7ce:	e7dc      	b.n	1c78a <handle_na_input+0x256>
			if (lladdr_changed) {
   1c7d0:	f1b8 0f00 	cmp.w	r8, #0
   1c7d4:	d0e9      	beq.n	1c7aa <handle_na_input+0x276>
				ipv6_nbr_set_state(nbr,
   1c7d6:	2102      	movs	r1, #2
   1c7d8:	4628      	mov	r0, r5
   1c7da:	f7ff f955 	bl	1ba88 <ipv6_nbr_set_state>
   1c7de:	e7e4      	b.n	1c7aa <handle_na_input+0x276>
			net_ipv6_nbr_data(nbr)->pending = NULL;
   1c7e0:	68eb      	ldr	r3, [r5, #12]
   1c7e2:	2200      	movs	r2, #0
   1c7e4:	601a      	str	r2, [r3, #0]
   1c7e6:	e7a1      	b.n	1c72c <handle_na_input+0x1f8>
   1c7e8:	20004cf4 	.word	0x20004cf4

0001c7ec <net_ipv6_send_ns>:
{
   1c7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7f0:	b09d      	sub	sp, #116	; 0x74
   1c7f2:	461d      	mov	r5, r3
   1c7f4:	4689      	mov	r9, r1
   1c7f6:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
   1c7fa:	9301      	str	r3, [sp, #4]
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1c7fc:	4629      	mov	r1, r5
{
   1c7fe:	4616      	mov	r6, r2
   1c800:	4680      	mov	r8, r0
   1c802:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1c806:	f7ff f92c 	bl	1ba62 <net_if_get_ll_reserve>
   1c80a:	210a      	movs	r1, #10
   1c80c:	f7fd f89a 	bl	19944 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1c810:	4604      	mov	r4, r0
   1c812:	b138      	cbz	r0, 1c824 <net_ipv6_send_ns+0x38>
	frag = net_pkt_get_frag(pkt, ND_NET_BUF_TIMEOUT);
   1c814:	210a      	movs	r1, #10
   1c816:	f7fd f8ad 	bl	19974 <net_pkt_get_frag>
	if (!frag) {
   1c81a:	4607      	mov	r7, r0
   1c81c:	b928      	cbnz	r0, 1c82a <net_ipv6_send_ns+0x3e>
		net_pkt_unref(pkt);
   1c81e:	4620      	mov	r0, r4
   1c820:	f7fd f8c7 	bl	199b2 <net_pkt_unref>
		return -ENOMEM;
   1c824:	f06f 000b 	mvn.w	r0, #11
   1c828:	e143      	b.n	1cab2 <net_ipv6_send_ns+0x2c6>
	net_pkt_frag_add(pkt, frag);
   1c82a:	4601      	mov	r1, r0
   1c82c:	4620      	mov	r0, r4
   1c82e:	f7fd f8e7 	bl	19a00 <net_pkt_frag_add>
	pkt->iface = iface;
   1c832:	f8c4 8014 	str.w	r8, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1c836:	f898 3015 	ldrb.w	r3, [r8, #21]
   1c83a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1c83e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   1c842:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   1c846:	220a      	movs	r2, #10
   1c848:	f362 03c6 	bfi	r3, r2, #3, #4
   1c84c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	pkt->ip_hdr_len = len;
   1c850:	2328      	movs	r3, #40	; 0x28
   1c852:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	pkt->ipv6_ext_len = len;
   1c856:	2300      	movs	r3, #0
   1c858:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	net_pkt_ll_clear(pkt);
   1c85c:	4620      	mov	r0, r4
   1c85e:	f7ff f9a4 	bl	1bbaa <net_pkt_ll_clear>
   1c862:	6963      	ldr	r3, [r4, #20]
   1c864:	7d1b      	ldrb	r3, [r3, #20]
	if (iface->link_addr.len == 6) {
   1c866:	2b06      	cmp	r3, #6
   1c868:	d01c      	beq.n	1c8a4 <net_ipv6_send_ns+0xb8>
	return 0;
   1c86a:	2b08      	cmp	r3, #8
   1c86c:	bf0c      	ite	eq
   1c86e:	f04f 0810 	moveq.w	r8, #16
   1c872:	f04f 0800 	movne.w	r8, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_ns_hdr) + llao_len,
   1c876:	2287      	movs	r2, #135	; 0x87
   1c878:	f108 0114 	add.w	r1, r8, #20
   1c87c:	4620      	mov	r0, r4
	net_buf_add(frag, sizeof(struct net_icmpv6_ns_hdr));
   1c87e:	3708      	adds	r7, #8
	setup_headers(pkt, sizeof(struct net_icmpv6_ns_hdr) + llao_len,
   1c880:	f7ff f972 	bl	1bb68 <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_ns_hdr));
   1c884:	2114      	movs	r1, #20
   1c886:	4638      	mov	r0, r7
   1c888:	f7fb fb64 	bl	17f54 <net_buf_simple_add>
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &hdr);
   1c88c:	a917      	add	r1, sp, #92	; 0x5c
   1c88e:	4620      	mov	r0, r4
   1c890:	f7fe fcb2 	bl	1b1f8 <net_icmpv6_get_ns_hdr>
	if (!ns_hdr) {
   1c894:	4686      	mov	lr, r0
   1c896:	b940      	cbnz	r0, 1c8aa <net_ipv6_send_ns+0xbe>
		net_pkt_unref(pkt);
   1c898:	4620      	mov	r0, r4
   1c89a:	f7fd f88a 	bl	199b2 <net_pkt_unref>
	return -EINVAL;
   1c89e:	f06f 0015 	mvn.w	r0, #21
   1c8a2:	e106      	b.n	1cab2 <net_ipv6_send_ns+0x2c6>
		return 8;
   1c8a4:	f04f 0808 	mov.w	r8, #8
   1c8a8:	e7e5      	b.n	1c876 <net_ipv6_send_ns+0x8a>
   1c8aa:	68a3      	ldr	r3, [r4, #8]
	return pkt->frags->data;
   1c8ac:	689b      	ldr	r3, [r3, #8]
	if (!dst) {
   1c8ae:	2d00      	cmp	r5, #0
   1c8b0:	f040 8088 	bne.w	1c9c4 <net_ipv6_send_ns+0x1d8>
	dst->s6_addr[1]   = 0x02;
   1c8b4:	2102      	movs	r1, #2
	dst->s6_addr[0]   = 0xFF;
   1c8b6:	22ff      	movs	r2, #255	; 0xff
	dst->s6_addr[1]   = 0x02;
   1c8b8:	7659      	strb	r1, [r3, #25]
	dst->s6_addr[11]  = 0x01;
   1c8ba:	2101      	movs	r1, #1
	dst->s6_addr[0]   = 0xFF;
   1c8bc:	761a      	strb	r2, [r3, #24]
	dst->s6_addr[10]  = 0;
   1c8be:	f883 5022 	strb.w	r5, [r3, #34]	; 0x22
	dst->s6_addr[11]  = 0x01;
   1c8c2:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
	dst->s6_addr[12]  = 0xFF;
   1c8c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1c8ca:	769d      	strb	r5, [r3, #26]
   1c8cc:	76dd      	strb	r5, [r3, #27]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1c8ce:	771d      	strb	r5, [r3, #28]
   1c8d0:	775d      	strb	r5, [r3, #29]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1c8d2:	779d      	strb	r5, [r3, #30]
   1c8d4:	77dd      	strb	r5, [r3, #31]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1c8d6:	f883 5020 	strb.w	r5, [r3, #32]
   1c8da:	f883 5021 	strb.w	r5, [r3, #33]	; 0x21
	dst->s6_addr[13]  = src->s6_addr[13];
   1c8de:	f89a 200d 	ldrb.w	r2, [sl, #13]
   1c8e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1c8e6:	f8ba 200e 	ldrh.w	r2, [sl, #14]
   1c8ea:	84da      	strh	r2, [r3, #38]	; 0x26
	net_ipaddr_copy(&ns_hdr->tgt, tgt);
   1c8ec:	ab07      	add	r3, sp, #28
   1c8ee:	f10a 0510 	add.w	r5, sl, #16
   1c8f2:	469c      	mov	ip, r3
   1c8f4:	f8da 0000 	ldr.w	r0, [sl]
   1c8f8:	f8da 1004 	ldr.w	r1, [sl, #4]
   1c8fc:	461a      	mov	r2, r3
   1c8fe:	c203      	stmia	r2!, {r0, r1}
   1c900:	f10a 0a08 	add.w	sl, sl, #8
   1c904:	45aa      	cmp	sl, r5
   1c906:	4613      	mov	r3, r2
   1c908:	d1f4      	bne.n	1c8f4 <net_ipv6_send_ns+0x108>
   1c90a:	f10e 0204 	add.w	r2, lr, #4
   1c90e:	ad0b      	add	r5, sp, #44	; 0x2c
   1c910:	4692      	mov	sl, r2
   1c912:	4663      	mov	r3, ip
   1c914:	cb03      	ldmia	r3!, {r0, r1}
   1c916:	42ab      	cmp	r3, r5
   1c918:	6010      	str	r0, [r2, #0]
   1c91a:	6051      	str	r1, [r2, #4]
   1c91c:	469c      	mov	ip, r3
   1c91e:	f102 0208 	add.w	r2, r2, #8
   1c922:	d1f6      	bne.n	1c912 <net_ipv6_send_ns+0x126>
	net_icmpv6_set_ns_hdr(pkt, ns_hdr);
   1c924:	4671      	mov	r1, lr
   1c926:	4620      	mov	r0, r4
   1c928:	f7fe fc89 	bl	1b23e <net_icmpv6_set_ns_hdr>
	if (is_my_address) {
   1c92c:	9a01      	ldr	r2, [sp, #4]
   1c92e:	68a3      	ldr	r3, [r4, #8]
   1c930:	2a00      	cmp	r2, #0
   1c932:	d061      	beq.n	1c9f8 <net_ipv6_send_ns+0x20c>
   1c934:	689e      	ldr	r6, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1c936:	4b60      	ldr	r3, [pc, #384]	; (1cab8 <net_ipv6_send_ns+0x2cc>)
   1c938:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1c93a:	af0f      	add	r7, sp, #60	; 0x3c
   1c93c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1c940:	f106 0208 	add.w	r2, r6, #8
   1c944:	462b      	mov	r3, r5
   1c946:	cb03      	ldmia	r3!, {r0, r1}
   1c948:	42bb      	cmp	r3, r7
   1c94a:	6010      	str	r0, [r2, #0]
   1c94c:	6051      	str	r1, [r2, #4]
   1c94e:	461d      	mov	r5, r3
   1c950:	f102 0208 	add.w	r2, r2, #8
   1c954:	d1f6      	bne.n	1c944 <net_ipv6_send_ns+0x158>
		NET_IPV6_HDR(pkt)->len[1] -= llao_len;
   1c956:	7973      	ldrb	r3, [r6, #5]
   1c958:	eba3 0808 	sub.w	r8, r3, r8
   1c95c:	f886 8005 	strb.w	r8, [r6, #5]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1c960:	68a1      	ldr	r1, [r4, #8]
   1c962:	4620      	mov	r0, r4
   1c964:	f7fe fa90 	bl	1ae88 <net_icmpv6_set_chksum>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), &ns_hdr->tgt);
   1c968:	4651      	mov	r1, sl
   1c96a:	6960      	ldr	r0, [r4, #20]
   1c96c:	f7ff fa1c 	bl	1bda8 <nbr_lookup.isra.29>
	if (!nbr) {
   1c970:	4605      	mov	r5, r0
   1c972:	b940      	cbnz	r0, 1c986 <net_ipv6_send_ns+0x19a>
		nbr = nbr_new(net_pkt_iface(pkt), &ns_hdr->tgt, false,
   1c974:	4602      	mov	r2, r0
   1c976:	4651      	mov	r1, sl
   1c978:	6960      	ldr	r0, [r4, #20]
   1c97a:	f7ff f9b1 	bl	1bce0 <nbr_new.isra.30>
		if (!nbr) {
   1c97e:	4605      	mov	r5, r0
   1c980:	2800      	cmp	r0, #0
   1c982:	f000 808d 	beq.w	1caa0 <net_ipv6_send_ns+0x2b4>
	if (pending) {
   1c986:	f1b9 0f00 	cmp.w	r9, #0
   1c98a:	d00f      	beq.n	1c9ac <net_ipv6_send_ns+0x1c0>
   1c98c:	68ee      	ldr	r6, [r5, #12]
		if (!net_ipv6_nbr_data(nbr)->pending) {
   1c98e:	6833      	ldr	r3, [r6, #0]
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   1c990:	4648      	mov	r0, r9
		if (!net_ipv6_nbr_data(nbr)->pending) {
   1c992:	2b00      	cmp	r3, #0
   1c994:	f040 8082 	bne.w	1ca9c <net_ipv6_send_ns+0x2b0>
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   1c998:	f7fd f800 	bl	1999c <net_pkt_ref>
		k_delayed_work_submit(&net_ipv6_nbr_data(nbr)->send_ns,
   1c99c:	68e9      	ldr	r1, [r5, #12]
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   1c99e:	6030      	str	r0, [r6, #0]
   1c9a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c9a4:	313c      	adds	r1, #60	; 0x3c
   1c9a6:	4845      	ldr	r0, [pc, #276]	; (1cabc <net_ipv6_send_ns+0x2d0>)
   1c9a8:	f004 fc38 	bl	2121c <k_delayed_work_submit_to_queue>
	if (net_send_data(pkt) < 0) {
   1c9ac:	4620      	mov	r0, r4
   1c9ae:	f7fb ff0d 	bl	187cc <net_send_data>
   1c9b2:	2800      	cmp	r0, #0
   1c9b4:	da7a      	bge.n	1caac <net_ipv6_send_ns+0x2c0>
		if (pending) {
   1c9b6:	f1b9 0f00 	cmp.w	r9, #0
   1c9ba:	d071      	beq.n	1caa0 <net_ipv6_send_ns+0x2b4>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   1c9bc:	68e8      	ldr	r0, [r5, #12]
   1c9be:	f7ff f884 	bl	1baca <nbr_clear_ns_pending>
   1c9c2:	e06d      	b.n	1caa0 <net_ipv6_send_ns+0x2b4>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1c9c4:	f10d 0c0c 	add.w	ip, sp, #12
   1c9c8:	f105 0b10 	add.w	fp, r5, #16
   1c9cc:	6828      	ldr	r0, [r5, #0]
   1c9ce:	6869      	ldr	r1, [r5, #4]
   1c9d0:	4662      	mov	r2, ip
   1c9d2:	c203      	stmia	r2!, {r0, r1}
   1c9d4:	3508      	adds	r5, #8
   1c9d6:	455d      	cmp	r5, fp
   1c9d8:	4694      	mov	ip, r2
   1c9da:	d1f7      	bne.n	1c9cc <net_ipv6_send_ns+0x1e0>
   1c9dc:	ad03      	add	r5, sp, #12
   1c9de:	3318      	adds	r3, #24
   1c9e0:	f10d 0c1c 	add.w	ip, sp, #28
   1c9e4:	462a      	mov	r2, r5
   1c9e6:	ca03      	ldmia	r2!, {r0, r1}
   1c9e8:	4562      	cmp	r2, ip
   1c9ea:	6018      	str	r0, [r3, #0]
   1c9ec:	6059      	str	r1, [r3, #4]
   1c9ee:	4615      	mov	r5, r2
   1c9f0:	f103 0308 	add.w	r3, r3, #8
   1c9f4:	d1f6      	bne.n	1c9e4 <net_ipv6_send_ns+0x1f8>
   1c9f6:	e779      	b.n	1c8ec <net_ipv6_send_ns+0x100>
		if (src) {
   1c9f8:	b37e      	cbz	r6, 1ca5a <net_ipv6_send_ns+0x26e>
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1c9fa:	aa0f      	add	r2, sp, #60	; 0x3c
   1c9fc:	689b      	ldr	r3, [r3, #8]
   1c9fe:	f106 0c10 	add.w	ip, r6, #16
   1ca02:	4615      	mov	r5, r2
   1ca04:	6830      	ldr	r0, [r6, #0]
   1ca06:	6871      	ldr	r1, [r6, #4]
   1ca08:	4696      	mov	lr, r2
   1ca0a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1ca0e:	3608      	adds	r6, #8
   1ca10:	4566      	cmp	r6, ip
   1ca12:	4672      	mov	r2, lr
   1ca14:	d1f6      	bne.n	1ca04 <net_ipv6_send_ns+0x218>
   1ca16:	3308      	adds	r3, #8
   1ca18:	ae13      	add	r6, sp, #76	; 0x4c
   1ca1a:	462a      	mov	r2, r5
   1ca1c:	ca03      	ldmia	r2!, {r0, r1}
   1ca1e:	42b2      	cmp	r2, r6
   1ca20:	6018      	str	r0, [r3, #0]
   1ca22:	6059      	str	r1, [r3, #4]
   1ca24:	4615      	mov	r5, r2
   1ca26:	f103 0308 	add.w	r3, r3, #8
   1ca2a:	d1f6      	bne.n	1ca1a <net_ipv6_send_ns+0x22e>
   1ca2c:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   1ca2e:	6898      	ldr	r0, [r3, #8]
   1ca30:	3008      	adds	r0, #8
   1ca32:	f7ff f809 	bl	1ba48 <net_is_ipv6_addr_unspecified>
   1ca36:	bb98      	cbnz	r0, 1caa0 <net_ipv6_send_ns+0x2b4>
		net_buf_add(frag, llao_len);
   1ca38:	4641      	mov	r1, r8
   1ca3a:	4638      	mov	r0, r7
   1ca3c:	f7fb fa8a 	bl	17f54 <net_buf_simple_add>
			 (u8_t *)net_pkt_icmp_data(pkt) +
   1ca40:	4620      	mov	r0, r4
		set_llao(&net_pkt_iface(pkt)->link_addr,
   1ca42:	6965      	ldr	r5, [r4, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   1ca44:	f7fd fa05 	bl	19e52 <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   1ca48:	3510      	adds	r5, #16
   1ca4a:	f100 0118 	add.w	r1, r0, #24
   1ca4e:	2301      	movs	r3, #1
   1ca50:	4642      	mov	r2, r8
   1ca52:	4628      	mov	r0, r5
   1ca54:	f7ff f8b8 	bl	1bbc8 <set_llao>
   1ca58:	e782      	b.n	1c960 <net_ipv6_send_ns+0x174>
   1ca5a:	689d      	ldr	r5, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1ca5c:	6960      	ldr	r0, [r4, #20]
   1ca5e:	f105 0118 	add.w	r1, r5, #24
   1ca62:	f7fc fcc5 	bl	193f0 <net_if_ipv6_select_src_addr>
		}
   1ca66:	aa13      	add	r2, sp, #76	; 0x4c
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1ca68:	4603      	mov	r3, r0
		}
   1ca6a:	f100 0c10 	add.w	ip, r0, #16
   1ca6e:	4616      	mov	r6, r2
   1ca70:	6818      	ldr	r0, [r3, #0]
   1ca72:	6859      	ldr	r1, [r3, #4]
   1ca74:	4696      	mov	lr, r2
   1ca76:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1ca7a:	3308      	adds	r3, #8
   1ca7c:	4563      	cmp	r3, ip
   1ca7e:	4672      	mov	r2, lr
   1ca80:	d1f6      	bne.n	1ca70 <net_ipv6_send_ns+0x284>
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1ca82:	f105 0308 	add.w	r3, r5, #8
   1ca86:	ad17      	add	r5, sp, #92	; 0x5c
   1ca88:	4632      	mov	r2, r6
   1ca8a:	ca03      	ldmia	r2!, {r0, r1}
   1ca8c:	42aa      	cmp	r2, r5
   1ca8e:	6018      	str	r0, [r3, #0]
   1ca90:	6059      	str	r1, [r3, #4]
   1ca92:	4616      	mov	r6, r2
   1ca94:	f103 0308 	add.w	r3, r3, #8
   1ca98:	d1f6      	bne.n	1ca88 <net_ipv6_send_ns+0x29c>
   1ca9a:	e7c7      	b.n	1ca2c <net_ipv6_send_ns+0x240>
			net_pkt_unref(pending);
   1ca9c:	f7fc ff89 	bl	199b2 <net_pkt_unref>
	net_pkt_unref(pkt);
   1caa0:	4620      	mov	r0, r4
   1caa2:	f7fc ff86 	bl	199b2 <net_pkt_unref>
	net_stats_update_ipv6_nd_drop();
   1caa6:	f7fe ffe7 	bl	1ba78 <net_stats_update_ipv6_nd_drop>
   1caaa:	e6f8      	b.n	1c89e <net_ipv6_send_ns+0xb2>
	net_stats_update_ipv6_nd_sent();
   1caac:	f7fe ffdc 	bl	1ba68 <net_stats_update_ipv6_nd_sent>
	return 0;
   1cab0:	2000      	movs	r0, #0
}
   1cab2:	b01d      	add	sp, #116	; 0x74
   1cab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cab8:	00022908 	.word	0x00022908
   1cabc:	200052a0 	.word	0x200052a0

0001cac0 <net_ipv6_nbr_add>:
{
   1cac0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1cac4:	4606      	mov	r6, r0
   1cac6:	460f      	mov	r7, r1
   1cac8:	4615      	mov	r5, r2
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   1caca:	f7ff f96d 	bl	1bda8 <nbr_lookup.isra.29>
	if (!nbr) {
   1cace:	4604      	mov	r4, r0
   1cad0:	b940      	cbnz	r0, 1cae4 <net_ipv6_nbr_add+0x24>
		nbr = nbr_new(iface, addr, is_router, state);
   1cad2:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1cad6:	4639      	mov	r1, r7
   1cad8:	4630      	mov	r0, r6
   1cada:	f7ff f901 	bl	1bce0 <nbr_new.isra.30>
		if (!nbr) {
   1cade:	4604      	mov	r4, r0
   1cae0:	2800      	cmp	r0, #0
   1cae2:	d035      	beq.n	1cb50 <net_ipv6_nbr_add+0x90>
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   1cae4:	462a      	mov	r2, r5
   1cae6:	4631      	mov	r1, r6
   1cae8:	4620      	mov	r0, r4
   1caea:	f7fe ff23 	bl	1b934 <net_nbr_link>
   1caee:	3045      	adds	r0, #69	; 0x45
   1caf0:	d117      	bne.n	1cb22 <net_ipv6_nbr_add+0x62>
	    net_ipv6_nbr_data(nbr)->state != NET_IPV6_NBR_STATE_STATIC) {
   1caf2:	68e3      	ldr	r3, [r4, #12]
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   1caf4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1caf8:	2b05      	cmp	r3, #5
   1cafa:	d023      	beq.n	1cb44 <net_ipv6_nbr_add+0x84>
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   1cafc:	7860      	ldrb	r0, [r4, #1]
   1cafe:	f7fe ff93 	bl	1ba28 <net_nbr_get_lladdr>
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   1cb02:	792a      	ldrb	r2, [r5, #4]
   1cb04:	6829      	ldr	r1, [r5, #0]
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   1cb06:	4680      	mov	r8, r0
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   1cb08:	3002      	adds	r0, #2
   1cb0a:	f7e3 fe2a 	bl	762 <memcmp>
   1cb0e:	b1a0      	cbz	r0, 1cb3a <net_ipv6_nbr_add+0x7a>
			net_linkaddr_set(cached_lladdr, lladdr->addr,
   1cb10:	792a      	ldrb	r2, [r5, #4]
   1cb12:	6829      	ldr	r1, [r5, #0]
   1cb14:	4640      	mov	r0, r8
   1cb16:	f7fe fff6 	bl	1bb06 <net_linkaddr_set>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1cb1a:	2102      	movs	r1, #2
   1cb1c:	4620      	mov	r0, r4
   1cb1e:	f7fe ffb3 	bl	1ba88 <ipv6_nbr_set_state>
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   1cb22:	68e3      	ldr	r3, [r4, #12]
   1cb24:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1cb28:	b963      	cbnz	r3, 1cb44 <net_ipv6_nbr_add+0x84>
		ret = net_ipv6_send_ns(iface, NULL, NULL, NULL, addr, false);
   1cb2a:	9301      	str	r3, [sp, #4]
   1cb2c:	9700      	str	r7, [sp, #0]
   1cb2e:	461a      	mov	r2, r3
   1cb30:	4619      	mov	r1, r3
   1cb32:	4630      	mov	r0, r6
   1cb34:	f7ff fe5a 	bl	1c7ec <net_ipv6_send_ns>
   1cb38:	e004      	b.n	1cb44 <net_ipv6_nbr_add+0x84>
		} else if (net_ipv6_nbr_data(nbr)->state ==
   1cb3a:	68e3      	ldr	r3, [r4, #12]
   1cb3c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1cb40:	2b00      	cmp	r3, #0
   1cb42:	d0ea      	beq.n	1cb1a <net_ipv6_nbr_add+0x5a>
   1cb44:	2300      	movs	r3, #0
   1cb46:	461a      	mov	r2, r3
   1cb48:	4631      	mov	r1, r6
   1cb4a:	4803      	ldr	r0, [pc, #12]	; (1cb58 <net_ipv6_nbr_add+0x98>)
   1cb4c:	f001 f816 	bl	1db7c <net_mgmt_event_notify_with_info>
}
   1cb50:	4620      	mov	r0, r4
   1cb52:	b002      	add	sp, #8
   1cb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cb58:	f060000f 	.word	0xf060000f

0001cb5c <handle_ra_input>:
{
   1cb5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb60:	6885      	ldr	r5, [r0, #8]
   1cb62:	b097      	sub	sp, #92	; 0x5c
   1cb64:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   1cb66:	4628      	mov	r0, r5
   1cb68:	f7fe ff66 	bl	1ba38 <net_buf_frags_len>
   1cb6c:	4a92      	ldr	r2, [pc, #584]	; (1cdb8 <handle_ra_input+0x25c>)
   1cb6e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   1cb70:	b280      	uxth	r0, r0
   1cb72:	3301      	adds	r3, #1
   1cb74:	2839      	cmp	r0, #57	; 0x39
   1cb76:	65d3      	str	r3, [r2, #92]	; 0x5c
   1cb78:	d908      	bls.n	1cb8c <handle_ra_input+0x30>
	return pkt->frags->data;
   1cb7a:	68ab      	ldr	r3, [r5, #8]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   1cb7c:	79da      	ldrb	r2, [r3, #7]
   1cb7e:	2aff      	cmp	r2, #255	; 0xff
   1cb80:	d104      	bne.n	1cb8c <handle_ra_input+0x30>
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1cb82:	891a      	ldrh	r2, [r3, #8]
   1cb84:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1cb88:	429a      	cmp	r2, r3
   1cb8a:	d00a      	beq.n	1cba2 <handle_ra_input+0x46>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &icmphdr);
   1cb8c:	a90e      	add	r1, sp, #56	; 0x38
   1cb8e:	4620      	mov	r0, r4
   1cb90:	f7fe f9c4 	bl	1af1c <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1cb94:	2800      	cmp	r0, #0
   1cb96:	f000 80bc 	beq.w	1cd12 <handle_ra_input+0x1b6>
   1cb9a:	7843      	ldrb	r3, [r0, #1]
   1cb9c:	2b00      	cmp	r3, #0
   1cb9e:	f040 80b8 	bne.w	1cd12 <handle_ra_input+0x1b6>
	offset = sizeof(struct net_ipv6_hdr) + net_pkt_ipv6_ext_len(pkt) +
   1cba2:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	return net_frag_read(frag, offset, pos, 1, value);
   1cba6:	68a0      	ldr	r0, [r4, #8]
   1cba8:	ad16      	add	r5, sp, #88	; 0x58
   1cbaa:	312c      	adds	r1, #44	; 0x2c
   1cbac:	f825 1d4a 	strh.w	r1, [r5, #-74]!
   1cbb0:	f10d 0309 	add.w	r3, sp, #9
   1cbb4:	9300      	str	r3, [sp, #0]
   1cbb6:	462a      	mov	r2, r5
   1cbb8:	2301      	movs	r3, #1
   1cbba:	f7fd f84d 	bl	19c58 <net_frag_read>
	return net_frag_read(frag, offset, pos, len, NULL);
   1cbbe:	2300      	movs	r3, #0
   1cbc0:	9300      	str	r3, [sp, #0]
   1cbc2:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1cbc6:	2301      	movs	r3, #1
   1cbc8:	462a      	mov	r2, r5
   1cbca:	f7fd f845 	bl	19c58 <net_frag_read>
	if (!frag) {
   1cbce:	2800      	cmp	r0, #0
   1cbd0:	f000 809f 	beq.w	1cd12 <handle_ra_input+0x1b6>
	if (hop_limit) {
   1cbd4:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1cbd8:	b113      	cbz	r3, 1cbe0 <handle_ra_input+0x84>
   1cbda:	6962      	ldr	r2, [r4, #20]
	iface->ipv6.hop_limit = hop_limit;
   1cbdc:	f882 324c 	strb.w	r3, [r2, #588]	; 0x24c
	frag = net_frag_read_be16(frag, offset, &offset, &router_lifetime);
   1cbe0:	ab03      	add	r3, sp, #12
   1cbe2:	462a      	mov	r2, r5
   1cbe4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1cbe8:	f7fd f86e 	bl	19cc8 <net_frag_read_be16>
	frag = net_frag_read_be32(frag, offset, &offset, &reachable_time);
   1cbec:	ab04      	add	r3, sp, #16
   1cbee:	462a      	mov	r2, r5
   1cbf0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1cbf4:	f7fd f878 	bl	19ce8 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, offset, &offset, &retrans_timer);
   1cbf8:	ab05      	add	r3, sp, #20
   1cbfa:	462a      	mov	r2, r5
   1cbfc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1cc00:	f7fd f872 	bl	19ce8 <net_frag_read_be32>
	if (!frag) {
   1cc04:	4606      	mov	r6, r0
   1cc06:	2800      	cmp	r0, #0
   1cc08:	f000 8083 	beq.w	1cd12 <handle_ra_input+0x1b6>
	ra_hdr = net_icmpv6_get_ra_hdr(pkt, &hdr);
   1cc0c:	a907      	add	r1, sp, #28
   1cc0e:	4620      	mov	r0, r4
   1cc10:	f7fe fbfa 	bl	1b408 <net_icmpv6_get_ra_hdr>
	if (!ra_hdr) {
   1cc14:	2800      	cmp	r0, #0
   1cc16:	d07c      	beq.n	1cd12 <handle_ra_input+0x1b6>
	if (reachable_time && reachable_time <= MAX_REACHABLE_TIME &&
   1cc18:	9b04      	ldr	r3, [sp, #16]
   1cc1a:	4a68      	ldr	r2, [pc, #416]	; (1cdbc <handle_ra_input+0x260>)
   1cc1c:	1e59      	subs	r1, r3, #1
   1cc1e:	4291      	cmp	r1, r2
   1cc20:	d80c      	bhi.n	1cc3c <handle_ra_input+0xe0>
   1cc22:	6967      	ldr	r7, [r4, #20]
	     ra_hdr->reachable_time)) {
   1cc24:	6841      	ldr	r1, [r0, #4]
	if (reachable_time && reachable_time <= MAX_REACHABLE_TIME &&
   1cc26:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
   1cc2a:	4291      	cmp	r1, r2
   1cc2c:	d006      	beq.n	1cc3c <handle_ra_input+0xe0>
	iface->ipv6.base_reachable_time = reachable_time;
   1cc2e:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   1cc32:	4638      	mov	r0, r7
   1cc34:	f7fc fc1c 	bl	19470 <net_if_ipv6_calc_reachable_time>
   1cc38:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
	if (retrans_timer) {
   1cc3c:	9b05      	ldr	r3, [sp, #20]
   1cc3e:	b113      	cbz	r3, 1cc46 <handle_ra_input+0xea>
	iface->ipv6.retrans_timer = retrans_timer;
   1cc40:	6962      	ldr	r2, [r4, #20]
   1cc42:	f8c2 3248 	str.w	r3, [r2, #584]	; 0x248
{
   1cc46:	f04f 0800 	mov.w	r8, #0
		frag = net_frag_read(frag, offset, &offset, 1, &type);
   1cc4a:	f04f 0a01 	mov.w	sl, #1
   1cc4e:	f10d 030b 	add.w	r3, sp, #11
   1cc52:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1cc56:	9300      	str	r3, [sp, #0]
   1cc58:	462a      	mov	r2, r5
   1cc5a:	2301      	movs	r3, #1
   1cc5c:	4630      	mov	r0, r6
   1cc5e:	f7fc fffb 	bl	19c58 <net_frag_read>
		frag = net_frag_read(frag, offset, &offset, 1, &length);
   1cc62:	f10d 030a 	add.w	r3, sp, #10
   1cc66:	9300      	str	r3, [sp, #0]
   1cc68:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1cc6c:	2301      	movs	r3, #1
   1cc6e:	462a      	mov	r2, r5
   1cc70:	f7fc fff2 	bl	19c58 <net_frag_read>
		if (!frag) {
   1cc74:	2800      	cmp	r0, #0
   1cc76:	d04c      	beq.n	1cd12 <handle_ra_input+0x1b6>
		switch (type) {
   1cc78:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1cc7c:	f8bd b00e 	ldrh.w	fp, [sp, #14]
   1cc80:	2a03      	cmp	r2, #3
   1cc82:	f000 809d 	beq.w	1cdc0 <handle_ra_input+0x264>
   1cc86:	2a05      	cmp	r2, #5
   1cc88:	d047      	beq.n	1cd1a <handle_ra_input+0x1be>
   1cc8a:	2a01      	cmp	r2, #1
   1cc8c:	f89d 700a 	ldrb.w	r7, [sp, #10]
   1cc90:	f040 8191 	bne.w	1cfb6 <handle_ra_input+0x45a>
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
   1cc94:	2306      	movs	r3, #6
	lladdr.len = NET_LINK_ADDR_MAX_LENGTH;
   1cc96:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
   1cc9a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
	if (net_pkt_ll_src(pkt)->len < lladdr.len) {
   1cc9e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1cca2:	2b05      	cmp	r3, #5
	lladdr.addr = llstorage.addr;
   1cca4:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
		lladdr.len = net_pkt_ll_src(pkt)->len;
   1cca8:	bf98      	it	ls
   1ccaa:	f88d 302c 	strbls.w	r3, [sp, #44]	; 0x2c
	lladdr.addr = llstorage.addr;
   1ccae:	920a      	str	r2, [sp, #40]	; 0x28
	frag = net_frag_read(frag, offset, pos, lladdr.len, lladdr.addr);
   1ccb0:	9200      	str	r2, [sp, #0]
   1ccb2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1ccb6:	462a      	mov	r2, r5
   1ccb8:	4659      	mov	r1, fp
   1ccba:	f7fc ffcd 	bl	19c58 <net_frag_read>
	if (!frag && offset) {
   1ccbe:	4606      	mov	r6, r0
   1ccc0:	b910      	cbnz	r0, 1ccc8 <handle_ra_input+0x16c>
   1ccc2:	f1bb 0f00 	cmp.w	fp, #0
   1ccc6:	d121      	bne.n	1cd0c <handle_ra_input+0x1b0>
	padding = len * 8 - 2 - lladdr.len;
   1ccc8:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1cccc:	ebc3 03c7 	rsb	r3, r3, r7, lsl #3
   1ccd0:	3b02      	subs	r3, #2
	if (padding) {
   1ccd2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   1ccd6:	d00c      	beq.n	1ccf2 <handle_ra_input+0x196>
		frag = net_frag_read(frag, *pos, pos, padding, NULL);
   1ccd8:	2200      	movs	r2, #0
   1ccda:	9200      	str	r2, [sp, #0]
   1ccdc:	4630      	mov	r0, r6
   1ccde:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1cce2:	462a      	mov	r2, r5
   1cce4:	f7fc ffb8 	bl	19c58 <net_frag_read>
		if (!frag && *pos) {
   1cce8:	4606      	mov	r6, r0
   1ccea:	b910      	cbnz	r0, 1ccf2 <handle_ra_input+0x196>
   1ccec:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1ccf0:	b963      	cbnz	r3, 1cd0c <handle_ra_input+0x1b0>
	return pkt->frags->data;
   1ccf2:	68a3      	ldr	r3, [r4, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   1ccf4:	6960      	ldr	r0, [r4, #20]
   1ccf6:	6899      	ldr	r1, [r3, #8]
   1ccf8:	2302      	movs	r3, #2
   1ccfa:	9300      	str	r3, [sp, #0]
   1ccfc:	aa0a      	add	r2, sp, #40	; 0x28
   1ccfe:	2301      	movs	r3, #1
   1cd00:	3108      	adds	r1, #8
   1cd02:	f7ff fedd 	bl	1cac0 <net_ipv6_nbr_add>
   1cd06:	4680      	mov	r8, r0
			if (!frag && offset) {
   1cd08:	2e00      	cmp	r6, #0
   1cd0a:	d1a0      	bne.n	1cc4e <handle_ra_input+0xf2>
   1cd0c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1cd10:	b30b      	cbz	r3, 1cd56 <handle_ra_input+0x1fa>
	net_stats_update_ipv6_nd_drop();
   1cd12:	f7fe feb1 	bl	1ba78 <net_stats_update_ipv6_nd_drop>
	return NET_DROP;
   1cd16:	2002      	movs	r0, #2
   1cd18:	e04b      	b.n	1cdb2 <handle_ra_input+0x256>
	return net_frag_read(frag, offset, pos, len, NULL);
   1cd1a:	2300      	movs	r3, #0
   1cd1c:	9300      	str	r3, [sp, #0]
   1cd1e:	462a      	mov	r2, r5
   1cd20:	2302      	movs	r3, #2
   1cd22:	4659      	mov	r1, fp
   1cd24:	f7fc ff98 	bl	19c58 <net_frag_read>
			frag = net_frag_read_be32(frag, offset, &offset, &mtu);
   1cd28:	ab06      	add	r3, sp, #24
   1cd2a:	462a      	mov	r2, r5
   1cd2c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1cd30:	f7fc ffda 	bl	19ce8 <net_frag_read_be32>
			if (!frag && offset) {
   1cd34:	4606      	mov	r6, r0
   1cd36:	b918      	cbnz	r0, 1cd40 <handle_ra_input+0x1e4>
   1cd38:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1cd3c:	2b00      	cmp	r3, #0
   1cd3e:	d1e8      	bne.n	1cd12 <handle_ra_input+0x1b6>
			if (mtu < MIN_IPV6_MTU || mtu > MAX_IPV6_MTU) {
   1cd40:	9b06      	ldr	r3, [sp, #24]
   1cd42:	f5a3 62a0 	sub.w	r2, r3, #1280	; 0x500
   1cd46:	f5b2 4f7b 	cmp.w	r2, #64256	; 0xfb00
   1cd4a:	d2e2      	bcs.n	1cd12 <handle_ra_input+0x1b6>
	iface->mtu = mtu;
   1cd4c:	6962      	ldr	r2, [r4, #20]
			net_if_set_mtu(net_pkt_iface(pkt), mtu);
   1cd4e:	8513      	strh	r3, [r2, #40]	; 0x28
	while (frag) {
   1cd50:	2e00      	cmp	r6, #0
   1cd52:	f47f af7c 	bne.w	1cc4e <handle_ra_input+0xf2>
	return pkt->frags->data;
   1cd56:	68a3      	ldr	r3, [r4, #8]
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt),
   1cd58:	6960      	ldr	r0, [r4, #20]
   1cd5a:	6899      	ldr	r1, [r3, #8]
   1cd5c:	3108      	adds	r1, #8
   1cd5e:	f7fc fa91 	bl	19284 <net_if_ipv6_router_lookup>
   1cd62:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	if (router) {
   1cd66:	4603      	mov	r3, r0
   1cd68:	2800      	cmp	r0, #0
   1cd6a:	f000 813c 	beq.w	1cfe6 <handle_ra_input+0x48a>
		if (!router_lifetime) {
   1cd6e:	2a00      	cmp	r2, #0
   1cd70:	f040 812c 	bne.w	1cfcc <handle_ra_input+0x470>
			net_if_ipv6_router_rm(router);
   1cd74:	f7fc fb04 	bl	19380 <net_if_ipv6_router_rm>
	if (nbr && net_ipv6_nbr_data(nbr)->pending) {
   1cd78:	f1b8 0f00 	cmp.w	r8, #0
   1cd7c:	d010      	beq.n	1cda0 <handle_ra_input+0x244>
   1cd7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1cd82:	6818      	ldr	r0, [r3, #0]
   1cd84:	b160      	cbz	r0, 1cda0 <handle_ra_input+0x244>
		if (net_send_data(net_ipv6_nbr_data(nbr)->pending) < 0) {
   1cd86:	f7fb fd21 	bl	187cc <net_send_data>
   1cd8a:	2800      	cmp	r0, #0
   1cd8c:	da04      	bge.n	1cd98 <handle_ra_input+0x23c>
			net_pkt_unref(net_ipv6_nbr_data(nbr)->pending);
   1cd8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1cd92:	6818      	ldr	r0, [r3, #0]
   1cd94:	f7fc fe0d 	bl	199b2 <net_pkt_unref>
		nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   1cd98:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1cd9c:	f7fe fe95 	bl	1baca <nbr_clear_ns_pending>
	k_delayed_work_cancel(&net_pkt_iface(pkt)->ipv6.rs_timer);
   1cda0:	6960      	ldr	r0, [r4, #20]
   1cda2:	f500 7006 	add.w	r0, r0, #536	; 0x218
   1cda6:	f004 f9df 	bl	21168 <k_delayed_work_cancel>
	net_pkt_unref(pkt);
   1cdaa:	4620      	mov	r0, r4
   1cdac:	f7fc fe01 	bl	199b2 <net_pkt_unref>
	return NET_OK;
   1cdb0:	2000      	movs	r0, #0
}
   1cdb2:	b017      	add	sp, #92	; 0x5c
   1cdb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cdb8:	20004cf4 	.word	0x20004cf4
   1cdbc:	0036ee7f 	.word	0x0036ee7f
			frag = handle_ra_prefix(pkt, frag, length, offset,
   1cdc0:	f89d 300a 	ldrb.w	r3, [sp, #10]
	prefix_info.type = NET_ICMPV6_ND_OPT_PREFIX_INFO;
   1cdc4:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	prefix_info.len = len * 8 - 2;
   1cdc8:	00db      	lsls	r3, r3, #3
   1cdca:	3b02      	subs	r3, #2
   1cdcc:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
	frag = net_frag_read(frag, offset, pos, 1, &prefix_info.prefix_len);
   1cdd0:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
   1cdd4:	4659      	mov	r1, fp
   1cdd6:	9300      	str	r3, [sp, #0]
   1cdd8:	462a      	mov	r2, r5
   1cdda:	2301      	movs	r3, #1
   1cddc:	f7fc ff3c 	bl	19c58 <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, 1, &prefix_info.flags);
   1cde0:	f10d 033b 	add.w	r3, sp, #59	; 0x3b
   1cde4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1cde8:	9300      	str	r3, [sp, #0]
   1cdea:	462a      	mov	r2, r5
   1cdec:	2301      	movs	r3, #1
   1cdee:	f7fc ff33 	bl	19c58 <net_frag_read>
	frag = net_frag_read_be32(frag, *pos, pos, &prefix_info.valid_lifetime);
   1cdf2:	ab0f      	add	r3, sp, #60	; 0x3c
   1cdf4:	462a      	mov	r2, r5
   1cdf6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1cdfa:	f7fc ff75 	bl	19ce8 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, *pos, pos,
   1cdfe:	ab10      	add	r3, sp, #64	; 0x40
   1ce00:	462a      	mov	r2, r5
   1ce02:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1ce06:	f7fc ff6f 	bl	19ce8 <net_frag_read_be32>
	return net_frag_read(frag, offset, pos, len, NULL);
   1ce0a:	2300      	movs	r3, #0
   1ce0c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1ce10:	9300      	str	r3, [sp, #0]
   1ce12:	462a      	mov	r2, r5
   1ce14:	2304      	movs	r3, #4
	frag = net_frag_read(frag, *pos, pos, sizeof(struct in6_addr),
   1ce16:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   1ce1a:	f7fc ff1d 	bl	19c58 <net_frag_read>
   1ce1e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1ce22:	f8cd b000 	str.w	fp, [sp]
   1ce26:	2310      	movs	r3, #16
   1ce28:	462a      	mov	r2, r5
   1ce2a:	f7fc ff15 	bl	19c58 <net_frag_read>
	if (!frag && *pos) {
   1ce2e:	4606      	mov	r6, r0
   1ce30:	b920      	cbnz	r0, 1ce3c <handle_ra_input+0x2e0>
   1ce32:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1ce36:	2b00      	cmp	r3, #0
   1ce38:	f47f af68 	bne.w	1cd0c <handle_ra_input+0x1b0>
	if (prefix_info.valid_lifetime >= prefix_info.preferred_lifetime &&
   1ce3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1ce3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1ce40:	429a      	cmp	r2, r3
   1ce42:	f4ff af61 	bcc.w	1cd08 <handle_ra_input+0x1ac>
   1ce46:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   1ce4a:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1ce4e:	429a      	cmp	r2, r3
   1ce50:	f43f af5a 	beq.w	1cd08 <handle_ra_input+0x1ac>
		if (prefix_info.flags & NET_ICMPV6_RA_FLAG_ONLINK) {
   1ce54:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
   1ce58:	2b00      	cmp	r3, #0
   1ce5a:	da20      	bge.n	1ce9e <handle_ra_input+0x342>
	prefix = net_if_ipv6_prefix_lookup(net_pkt_iface(pkt),
   1ce5c:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   1ce60:	6960      	ldr	r0, [r4, #20]
   1ce62:	4659      	mov	r1, fp
   1ce64:	f7fc f974 	bl	19150 <net_if_ipv6_prefix_lookup>
	if (!prefix) {
   1ce68:	b940      	cbnz	r0, 1ce7c <handle_ra_input+0x320>
		if (!prefix_info->valid_lifetime) {
   1ce6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ce6c:	b1bb      	cbz	r3, 1ce9e <handle_ra_input+0x342>
		prefix = net_if_ipv6_prefix_add(net_pkt_iface(pkt),
   1ce6e:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   1ce72:	6960      	ldr	r0, [r4, #20]
   1ce74:	4659      	mov	r1, fp
   1ce76:	f7fc f8f9 	bl	1906c <net_if_ipv6_prefix_add>
		if (prefix) {
   1ce7a:	b180      	cbz	r0, 1ce9e <handle_ra_input+0x342>
	switch (prefix_info->valid_lifetime) {
   1ce7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1ce7e:	b139      	cbz	r1, 1ce90 <handle_ra_input+0x334>
   1ce80:	1c4a      	adds	r2, r1, #1
   1ce82:	d055      	beq.n	1cf30 <handle_ra_input+0x3d4>
	prefix->is_infinite = is_infinite;
   1ce84:	2300      	movs	r3, #0
   1ce86:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		net_if_ipv6_prefix_set_timer(prefix,
   1ce8a:	f7fc f9b1 	bl	191f0 <net_if_ipv6_prefix_set_timer>
   1ce8e:	e006      	b.n	1ce9e <handle_ra_input+0x342>
		net_if_ipv6_prefix_rm(net_pkt_iface(pkt),
   1ce90:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
   1ce94:	f100 0128 	add.w	r1, r0, #40	; 0x28
   1ce98:	6960      	ldr	r0, [r4, #20]
   1ce9a:	f7fc f9bb 	bl	19214 <net_if_ipv6_prefix_rm>
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   1ce9e:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   1cea2:	065b      	lsls	r3, r3, #25
   1cea4:	f57f af30 	bpl.w	1cd08 <handle_ra_input+0x1ac>
   1cea8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ceaa:	2b00      	cmp	r3, #0
   1ceac:	f43f af2c 	beq.w	1cd08 <handle_ra_input+0x1ac>
		    prefix_info.valid_lifetime &&
   1ceb0:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1ceb4:	2b40      	cmp	r3, #64	; 0x40
   1ceb6:	f47f af27 	bne.w	1cd08 <handle_ra_input+0x1ac>
	struct in6_addr addr = { };
   1ceba:	2210      	movs	r2, #16
   1cebc:	2100      	movs	r1, #0
   1cebe:	a80a      	add	r0, sp, #40	; 0x28
   1cec0:	f7e3 fca8 	bl	814 <memset>
	addr->s6_addr[0] = 0xfe;
   1cec4:	f04f 09fe 	mov.w	r9, #254	; 0xfe
	addr->s6_addr[1] = 0x80;
   1cec8:	2280      	movs	r2, #128	; 0x80
   1ceca:	6967      	ldr	r7, [r4, #20]
	addr->s6_addr[0] = 0xfe;
   1cecc:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
	addr->s6_addr[1] = 0x80;
   1ced0:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
	switch (lladdr->len) {
   1ced4:	7d3a      	ldrb	r2, [r7, #20]
   1ced6:	2a06      	cmp	r2, #6
   1ced8:	d02d      	beq.n	1cf36 <handle_ra_input+0x3da>
   1ceda:	2a08      	cmp	r2, #8
   1cedc:	d046      	beq.n	1cf6c <handle_ra_input+0x410>
   1cede:	2a02      	cmp	r2, #2
   1cee0:	d10e      	bne.n	1cf00 <handle_ra_input+0x3a4>
		if (lladdr->type == NET_LINK_IEEE802154) {
   1cee2:	7d7a      	ldrb	r2, [r7, #21]
   1cee4:	2a01      	cmp	r2, #1
   1cee6:	d10b      	bne.n	1cf00 <handle_ra_input+0x3a4>
			addr->s6_addr[11] = 0xff;
   1cee8:	22ff      	movs	r2, #255	; 0xff
   1ceea:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
			addr->s6_addr[12] = 0xfe;
   1ceee:	f88d 9034 	strb.w	r9, [sp, #52]	; 0x34
			addr->s6_addr[14] = lladdr->addr[0];
   1cef2:	693b      	ldr	r3, [r7, #16]
   1cef4:	781a      	ldrb	r2, [r3, #0]
   1cef6:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
			addr->s6_addr[15] = lladdr->addr[1];
   1cefa:	785b      	ldrb	r3, [r3, #1]
   1cefc:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	memcpy(&addr, &prefix_info->prefix, sizeof(struct in6_addr) / 2);
   1cf00:	4659      	mov	r1, fp
   1cf02:	2208      	movs	r2, #8
   1cf04:	a80a      	add	r0, sp, #40	; 0x28
   1cf06:	f7e3 fc59 	bl	7bc <memcpy>
	ifaddr = net_if_ipv6_addr_lookup(&addr, NULL);
   1cf0a:	2100      	movs	r1, #0
   1cf0c:	a80a      	add	r0, sp, #40	; 0x28
   1cf0e:	f7fb fe0b 	bl	18b28 <net_if_ipv6_addr_lookup>
   1cf12:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
	if (ifaddr && ifaddr->addr_type == NET_ADDR_AUTOCONF) {
   1cf16:	4607      	mov	r7, r0
   1cf18:	2800      	cmp	r0, #0
   1cf1a:	d041      	beq.n	1cfa0 <handle_ra_input+0x444>
   1cf1c:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   1cf20:	2b01      	cmp	r3, #1
   1cf22:	d13d      	bne.n	1cfa0 <handle_ra_input+0x444>
		if (prefix_info->valid_lifetime ==
   1cf24:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   1cf28:	d125      	bne.n	1cf76 <handle_ra_input+0x41a>
	ifaddr->is_infinite = is_infinite;
   1cf2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
   1cf2e:	e6eb      	b.n	1cd08 <handle_ra_input+0x1ac>
	prefix->is_infinite = is_infinite;
   1cf30:	f880 a039 	strb.w	sl, [r0, #57]	; 0x39
   1cf34:	e7b3      	b.n	1ce9e <handle_ra_input+0x342>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1cf36:	2203      	movs	r2, #3
   1cf38:	6939      	ldr	r1, [r7, #16]
   1cf3a:	a80c      	add	r0, sp, #48	; 0x30
   1cf3c:	f7e3 fc3e 	bl	7bc <memcpy>
		addr->s6_addr[11] = 0xff;
   1cf40:	22ff      	movs	r2, #255	; 0xff
   1cf42:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
		addr->s6_addr[12] = 0xfe;
   1cf46:	f88d 9034 	strb.w	r9, [sp, #52]	; 0x34
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1cf4a:	6939      	ldr	r1, [r7, #16]
   1cf4c:	2203      	movs	r2, #3
   1cf4e:	4411      	add	r1, r2
   1cf50:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   1cf54:	f7e3 fc32 	bl	7bc <memcpy>
		if (lladdr->type == NET_LINK_ETHERNET) {
   1cf58:	7d7b      	ldrb	r3, [r7, #21]
   1cf5a:	2b03      	cmp	r3, #3
   1cf5c:	d1d0      	bne.n	1cf00 <handle_ra_input+0x3a4>
		addr->s6_addr[8] ^= 0x02;
   1cf5e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1cf62:	f083 0302 	eor.w	r3, r3, #2
   1cf66:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   1cf6a:	e7c9      	b.n	1cf00 <handle_ra_input+0x3a4>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   1cf6c:	6939      	ldr	r1, [r7, #16]
   1cf6e:	a80c      	add	r0, sp, #48	; 0x30
   1cf70:	f7e3 fc24 	bl	7bc <memcpy>
   1cf74:	e7f3      	b.n	1cf5e <handle_ra_input+0x402>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   1cf76:	f5bb 5fe1 	cmp.w	fp, #7200	; 0x1c20
   1cf7a:	d905      	bls.n	1cf88 <handle_ra_input+0x42c>
			net_if_ipv6_addr_update_lifetime(ifaddr,
   1cf7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   1cf7e:	4638      	mov	r0, r7
   1cf80:	f7fb fe20 	bl	18bc4 <net_if_ipv6_addr_update_lifetime>
	ifaddr->is_infinite = is_infinite;
   1cf84:	2300      	movs	r3, #0
   1cf86:	e7d0      	b.n	1cf2a <handle_ra_input+0x3ce>
	return _timeout_remaining_get(&work->timeout);
   1cf88:	3020      	adds	r0, #32
   1cf8a:	f004 fa21 	bl	213d0 <_timeout_remaining_get>
	return k_delayed_work_remaining_get(work) / MSEC_PER_SEC;
   1cf8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1cf92:	fb90 f0f3 	sdiv	r0, r0, r3
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   1cf96:	4583      	cmp	fp, r0
   1cf98:	d8f0      	bhi.n	1cf7c <handle_ra_input+0x420>
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   1cf9a:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
   1cf9e:	e7ee      	b.n	1cf7e <handle_ra_input+0x422>
		if (prefix_info->valid_lifetime ==
   1cfa0:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   1cfa4:	bf0c      	ite	eq
   1cfa6:	2300      	moveq	r3, #0
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   1cfa8:	465b      	movne	r3, fp
   1cfaa:	2201      	movs	r2, #1
   1cfac:	a90a      	add	r1, sp, #40	; 0x28
   1cfae:	6960      	ldr	r0, [r4, #20]
   1cfb0:	f7fb fe0e 	bl	18bd0 <net_if_ipv6_addr_add>
   1cfb4:	e6a8      	b.n	1cd08 <handle_ra_input+0x1ac>
					     length * 8 - 2);
   1cfb6:	00fb      	lsls	r3, r7, #3
   1cfb8:	2200      	movs	r2, #0
			frag = net_frag_skip(frag, offset, &offset,
   1cfba:	3b02      	subs	r3, #2
   1cfbc:	9200      	str	r2, [sp, #0]
   1cfbe:	b29b      	uxth	r3, r3
   1cfc0:	462a      	mov	r2, r5
   1cfc2:	4659      	mov	r1, fp
   1cfc4:	f7fc fe48 	bl	19c58 <net_frag_read>
			if (!frag && offset) {
   1cfc8:	4606      	mov	r6, r0
   1cfca:	e69d      	b.n	1cd08 <handle_ra_input+0x1ac>
			if (nbr) {
   1cfcc:	f1b8 0f00 	cmp.w	r8, #0
   1cfd0:	d004      	beq.n	1cfdc <handle_ra_input+0x480>
				net_ipv6_nbr_data(nbr)->is_router = true;
   1cfd2:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1cfd6:	2001      	movs	r0, #1
   1cfd8:	f881 0069 	strb.w	r0, [r1, #105]	; 0x69
			net_if_ipv6_router_update_lifetime(router,
   1cfdc:	4611      	mov	r1, r2
   1cfde:	4618      	mov	r0, r3
   1cfe0:	f7fc f97e 	bl	192e0 <net_if_ipv6_router_update_lifetime>
   1cfe4:	e6c8      	b.n	1cd78 <handle_ra_input+0x21c>
	return pkt->frags->data;
   1cfe6:	68a3      	ldr	r3, [r4, #8]
		net_if_ipv6_router_add(net_pkt_iface(pkt),
   1cfe8:	6960      	ldr	r0, [r4, #20]
   1cfea:	6899      	ldr	r1, [r3, #8]
   1cfec:	3108      	adds	r1, #8
   1cfee:	f7fc f97d 	bl	192ec <net_if_ipv6_router_add>
   1cff2:	e6c1      	b.n	1cd78 <handle_ra_input+0x21c>

0001cff4 <handle_ns_input>:
{
   1cff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cff8:	4604      	mov	r4, r0
   1cffa:	b09f      	sub	sp, #124	; 0x7c
	return net_buf_frags_len(pkt->frags);
   1cffc:	6880      	ldr	r0, [r0, #8]
   1cffe:	f7fe fd1b 	bl	1ba38 <net_buf_frags_len>
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &nshdr);
   1d002:	f10d 0a64 	add.w	sl, sp, #100	; 0x64
   1d006:	4605      	mov	r5, r0
   1d008:	4651      	mov	r1, sl
   1d00a:	4620      	mov	r0, r4
   1d00c:	f7fe f8f4 	bl	1b1f8 <net_icmpv6_get_ns_hdr>
	if (!ns_hdr) {
   1d010:	4681      	mov	r9, r0
   1d012:	2800      	cmp	r0, #0
   1d014:	f000 8108 	beq.w	1d228 <handle_ns_input+0x234>
   1d018:	4aaa      	ldr	r2, [pc, #680]	; (1d2c4 <handle_ns_input+0x2d0>)
   1d01a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   1d01c:	b2ad      	uxth	r5, r5
   1d01e:	3301      	adds	r3, #1
   1d020:	2d3f      	cmp	r5, #63	; 0x3f
   1d022:	65d3      	str	r3, [r2, #92]	; 0x5c
   1d024:	d904      	bls.n	1d030 <handle_ns_input+0x3c>
	return pkt->frags->data;
   1d026:	68a3      	ldr	r3, [r4, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT)) {
   1d028:	689b      	ldr	r3, [r3, #8]
			  sizeof(struct net_icmpv6_ns_hdr))) ||
   1d02a:	79db      	ldrb	r3, [r3, #7]
   1d02c:	2bff      	cmp	r3, #255	; 0xff
   1d02e:	d00e      	beq.n	1d04e <handle_ns_input+0x5a>
		if (net_is_ipv6_addr_mcast(&ns_hdr->tgt)) {
   1d030:	f899 3004 	ldrb.w	r3, [r9, #4]
   1d034:	2bff      	cmp	r3, #255	; 0xff
   1d036:	d10a      	bne.n	1d04e <handle_ns_input+0x5a>
			icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1d038:	a915      	add	r1, sp, #84	; 0x54
   1d03a:	4620      	mov	r0, r4
   1d03c:	f7fd ff6e 	bl	1af1c <net_icmpv6_get_hdr>
			if (!icmp_hdr || icmp_hdr->code != 0) {
   1d040:	2800      	cmp	r0, #0
   1d042:	f000 80f1 	beq.w	1d228 <handle_ns_input+0x234>
   1d046:	7843      	ldrb	r3, [r0, #1]
   1d048:	2b00      	cmp	r3, #0
   1d04a:	f040 80ed 	bne.w	1d228 <handle_ns_input+0x234>
	pkt->ipv6_ext_opt_len = len;
   1d04e:	2314      	movs	r3, #20
   1d050:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   1d054:	a904      	add	r1, sp, #16
   1d056:	4620      	mov	r0, r4
   1d058:	f7fe f929 	bl	1b2ae <net_icmpv6_get_nd_opt_hdr>
   1d05c:	4607      	mov	r7, r0
	return net_buf_frags_len(pkt->frags);
   1d05e:	68a0      	ldr	r0, [r4, #8]
   1d060:	f7fe fcea 	bl	1ba38 <net_buf_frags_len>
	frag = net_frag_read(pkt->frags, sllao_offset,
   1d064:	f10d 0546 	add.w	r5, sp, #70	; 0x46
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   1d068:	f1a0 0b2c 	sub.w	fp, r0, #44	; 0x2c
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   1d06c:	b11f      	cbz	r7, 1d076 <handle_ns_input+0x82>
   1d06e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   1d072:	459b      	cmp	fp, r3
   1d074:	d87c      	bhi.n	1d170 <handle_ns_input+0x17c>
		ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   1d076:	f109 0604 	add.w	r6, r9, #4
   1d07a:	4631      	mov	r1, r6
   1d07c:	6960      	ldr	r0, [r4, #20]
   1d07e:	f7fe fe10 	bl	1bca2 <net_if_ipv6_addr_lookup_by_iface>
	if (!ifaddr) {
   1d082:	4683      	mov	fp, r0
   1d084:	2800      	cmp	r0, #0
   1d086:	f000 80cf 	beq.w	1d228 <handle_ns_input+0x234>
	return pkt->frags->data;
   1d08a:	68a3      	ldr	r3, [r4, #8]
   1d08c:	689d      	ldr	r5, [r3, #8]
		src = &NET_IPV6_HDR(pkt)->src;
   1d08e:	f105 0708 	add.w	r7, r5, #8
		tgt = &ifaddr->address.in6_addr;
   1d092:	f100 0804 	add.w	r8, r0, #4
	if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   1d096:	4638      	mov	r0, r7
   1d098:	f7fe fcd6 	bl	1ba48 <net_is_ipv6_addr_unspecified>
   1d09c:	4601      	mov	r1, r0
   1d09e:	2800      	cmp	r0, #0
   1d0a0:	f000 80c6 	beq.w	1d230 <handle_ns_input+0x23c>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   1d0a4:	69aa      	ldr	r2, [r5, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1d0a6:	f240 23ff 	movw	r3, #767	; 0x2ff
   1d0aa:	429a      	cmp	r2, r3
   1d0ac:	f040 80bc 	bne.w	1d228 <handle_ns_input+0x234>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   1d0b0:	69eb      	ldr	r3, [r5, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   1d0b2:	2b00      	cmp	r3, #0
   1d0b4:	f040 80b8 	bne.w	1d228 <handle_ns_input+0x234>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1d0b8:	6a2a      	ldr	r2, [r5, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   1d0ba:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1d0be:	f040 80b3 	bne.w	1d228 <handle_ns_input+0x234>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   1d0c2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1d0c4:	b2d2      	uxtb	r2, r2
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1d0c6:	2aff      	cmp	r2, #255	; 0xff
   1d0c8:	f040 80ae 	bne.w	1d228 <handle_ns_input+0x234>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   1d0cc:	f99b 2065 	ldrsb.w	r2, [fp, #101]	; 0x65
   1d0d0:	2a00      	cmp	r2, #0
   1d0d2:	f000 809f 	beq.w	1d214 <handle_ns_input+0x220>
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1d0d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d0da:	762a      	strb	r2, [r5, #24]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1d0dc:	76ab      	strb	r3, [r5, #26]
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1d0de:	2202      	movs	r2, #2
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1d0e0:	76eb      	strb	r3, [r5, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1d0e2:	772b      	strb	r3, [r5, #28]
   1d0e4:	776b      	strb	r3, [r5, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1d0e6:	77ab      	strb	r3, [r5, #30]
   1d0e8:	77eb      	strb	r3, [r5, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1d0ea:	f885 3020 	strb.w	r3, [r5, #32]
   1d0ee:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1d0f2:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1d0f6:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1d0fa:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
   1d0fe:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1d102:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
   1d106:	2301      	movs	r3, #1
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1d108:	766a      	strb	r2, [r5, #25]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1d10a:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   1d10e:	f105 0118 	add.w	r1, r5, #24
   1d112:	6960      	ldr	r0, [r4, #20]
   1d114:	f7fc f96c 	bl	193f0 <net_if_ipv6_select_src_addr>
		goto send_na;
   1d118:	ad05      	add	r5, sp, #20
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   1d11a:	4603      	mov	r3, r0
		goto send_na;
   1d11c:	f100 0e10 	add.w	lr, r0, #16
   1d120:	462a      	mov	r2, r5
   1d122:	6818      	ldr	r0, [r3, #0]
   1d124:	6859      	ldr	r1, [r3, #4]
   1d126:	462e      	mov	r6, r5
   1d128:	c603      	stmia	r6!, {r0, r1}
   1d12a:	3308      	adds	r3, #8
   1d12c:	4573      	cmp	r3, lr
   1d12e:	4635      	mov	r5, r6
   1d130:	d1f7      	bne.n	1d122 <handle_ns_input+0x12e>
				net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   1d132:	463d      	mov	r5, r7
   1d134:	ae09      	add	r6, sp, #36	; 0x24
   1d136:	4613      	mov	r3, r2
   1d138:	cb03      	ldmia	r3!, {r0, r1}
   1d13a:	42b3      	cmp	r3, r6
   1d13c:	6028      	str	r0, [r5, #0]
   1d13e:	6069      	str	r1, [r5, #4]
   1d140:	461a      	mov	r2, r3
   1d142:	f105 0508 	add.w	r5, r5, #8
   1d146:	d1f6      	bne.n	1d136 <handle_ns_input+0x142>
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   1d148:	2320      	movs	r3, #32
   1d14a:	68a2      	ldr	r2, [r4, #8]
	ret = net_ipv6_send_na(net_pkt_iface(pkt),
   1d14c:	6960      	ldr	r0, [r4, #20]
			       &NET_IPV6_HDR(pkt)->dst,
   1d14e:	6892      	ldr	r2, [r2, #8]
	ret = net_ipv6_send_na(net_pkt_iface(pkt),
   1d150:	9300      	str	r3, [sp, #0]
   1d152:	3218      	adds	r2, #24
   1d154:	4643      	mov	r3, r8
   1d156:	4639      	mov	r1, r7
   1d158:	f7ff f911 	bl	1c37e <net_ipv6_send_na>
	if (!ret) {
   1d15c:	4605      	mov	r5, r0
   1d15e:	2800      	cmp	r0, #0
   1d160:	d164      	bne.n	1d22c <handle_ns_input+0x238>
		net_pkt_unref(pkt);
   1d162:	4620      	mov	r0, r4
   1d164:	f7fc fc25 	bl	199b2 <net_pkt_unref>
		return NET_OK;
   1d168:	4628      	mov	r0, r5
}
   1d16a:	b01f      	add	sp, #124	; 0x7c
   1d16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!nd_opt_hdr->len) {
   1d170:	787e      	ldrb	r6, [r7, #1]
   1d172:	9303      	str	r3, [sp, #12]
   1d174:	2e00      	cmp	r6, #0
   1d176:	f43f af7e 	beq.w	1d076 <handle_ns_input+0x82>
		switch (nd_opt_hdr->type) {
   1d17a:	783a      	ldrb	r2, [r7, #0]
   1d17c:	2a01      	cmp	r2, #1
   1d17e:	d139      	bne.n	1d1f4 <handle_ns_input+0x200>
   1d180:	f8d4 8008 	ldr.w	r8, [r4, #8]
				    &NET_IPV6_HDR(pkt)->src)) {
   1d184:	f8d8 0008 	ldr.w	r0, [r8, #8]
			if (net_is_ipv6_addr_unspecified(
   1d188:	3008      	adds	r0, #8
   1d18a:	f7fe fc5d 	bl	1ba48 <net_is_ipv6_addr_unspecified>
   1d18e:	2800      	cmp	r0, #0
   1d190:	d14a      	bne.n	1d228 <handle_ns_input+0x234>
			if (nd_opt_hdr->len > 2) {
   1d192:	2e02      	cmp	r6, #2
   1d194:	d848      	bhi.n	1d228 <handle_ns_input+0x234>
						net_pkt_ipv6_ext_len(pkt) +
   1d196:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
						net_pkt_ip_hdr_len(pkt) +
   1d19a:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
			if (!handle_ns_neighbor(pkt, nd_opt_hdr->len,
   1d19e:	9b03      	ldr	r3, [sp, #12]
	frag = net_frag_read(pkt->frags, sllao_offset,
   1d1a0:	9500      	str	r5, [sp, #0]
						net_pkt_ip_hdr_len(pkt) +
   1d1a2:	4411      	add	r1, r2
			if (!handle_ns_neighbor(pkt, nd_opt_hdr->len,
   1d1a4:	3106      	adds	r1, #6
   1d1a6:	4419      	add	r1, r3
	lladdr.len = 8 * ll_len - 2;
   1d1a8:	00f3      	lsls	r3, r6, #3
   1d1aa:	3b02      	subs	r3, #2
   1d1ac:	b2db      	uxtb	r3, r3
	frag = net_frag_read(pkt->frags, sllao_offset,
   1d1ae:	aa0d      	add	r2, sp, #52	; 0x34
   1d1b0:	b289      	uxth	r1, r1
   1d1b2:	4640      	mov	r0, r8
	lladdr.len = 8 * ll_len - 2;
   1d1b4:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
	frag = net_frag_read(pkt->frags, sllao_offset,
   1d1b8:	f7fc fd4e 	bl	19c58 <net_frag_read>
	if (!frag && pos == 0xffff) {
   1d1bc:	b928      	cbnz	r0, 1d1ca <handle_ns_input+0x1d6>
   1d1be:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   1d1c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d1c6:	429a      	cmp	r2, r3
   1d1c8:	d02e      	beq.n	1d228 <handle_ns_input+0x234>
	nbr_lladdr.len = lladdr.len;
   1d1ca:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
	if (net_pkt_ll_src(pkt)->len < nbr_lladdr.len) {
   1d1ce:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	nbr_lladdr.len = lladdr.len;
   1d1d2:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
	if (net_pkt_ll_src(pkt)->len < nbr_lladdr.len) {
   1d1d6:	429a      	cmp	r2, r3
		nbr_lladdr.len = net_pkt_ll_src(pkt)->len;
   1d1d8:	bf88      	it	hi
   1d1da:	f88d 3058 	strbhi.w	r3, [sp, #88]	; 0x58
   1d1de:	68a3      	ldr	r3, [r4, #8]
	nbr_lladdr.addr = lladdr.addr;
   1d1e0:	9515      	str	r5, [sp, #84]	; 0x54
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   1d1e2:	6899      	ldr	r1, [r3, #8]
   1d1e4:	6960      	ldr	r0, [r4, #20]
   1d1e6:	2300      	movs	r3, #0
   1d1e8:	9300      	str	r3, [sp, #0]
   1d1ea:	aa15      	add	r2, sp, #84	; 0x54
   1d1ec:	3108      	adds	r1, #8
   1d1ee:	f7ff fc67 	bl	1cac0 <net_ipv6_nbr_add>
			if (!handle_ns_neighbor(pkt, nd_opt_hdr->len,
   1d1f2:	b1c8      	cbz	r0, 1d228 <handle_ns_input+0x234>
   1d1f4:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
					     (nd_opt_hdr->len << 3));
   1d1f8:	787b      	ldrb	r3, [r7, #1]
		net_pkt_set_ipv6_ext_opt_len(pkt,
   1d1fa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1d1fe:	b2db      	uxtb	r3, r3
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   1d200:	4293      	cmp	r3, r2
	pkt->ipv6_ext_opt_len = len;
   1d202:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   1d206:	d90f      	bls.n	1d228 <handle_ns_input+0x234>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   1d208:	a904      	add	r1, sp, #16
   1d20a:	4620      	mov	r0, r4
   1d20c:	f7fe f84f 	bl	1b2ae <net_icmpv6_get_nd_opt_hdr>
   1d210:	4607      	mov	r7, r0
   1d212:	e72b      	b.n	1d06c <handle_ns_input+0x78>
	if (net_is_ipv6_ll_addr(addr)) {
   1d214:	f8bb 2004 	ldrh.w	r2, [fp, #4]
   1d218:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1d21c:	429a      	cmp	r2, r3
   1d21e:	d003      	beq.n	1d228 <handle_ns_input+0x234>
	net_if_ipv6_dad_failed(iface, addr);
   1d220:	4641      	mov	r1, r8
   1d222:	6960      	ldr	r0, [r4, #20]
   1d224:	f7fb feb2 	bl	18f8c <net_if_ipv6_dad_failed>
	net_stats_update_ipv6_nd_drop();
   1d228:	f7fe fc26 	bl	1ba78 <net_stats_update_ipv6_nd_drop>
	return NET_DROP;
   1d22c:	2002      	movs	r0, #2
   1d22e:	e79c      	b.n	1d16a <handle_ns_input+0x176>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   1d230:	4638      	mov	r0, r7
   1d232:	f7fb fc79 	bl	18b28 <net_if_ipv6_addr_lookup>
	if (net_is_my_ipv6_addr(&NET_IPV6_HDR(pkt)->src)) {
   1d236:	2800      	cmp	r0, #0
   1d238:	d1f6      	bne.n	1d228 <handle_ns_input+0x234>
	return pkt->frags->data;
   1d23a:	68a3      	ldr	r3, [r4, #8]
   1d23c:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   1d23e:	6999      	ldr	r1, [r3, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1d240:	f240 22ff 	movw	r2, #767	; 0x2ff
   1d244:	4291      	cmp	r1, r2
	if (net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   1d246:	f103 0b18 	add.w	fp, r3, #24
   1d24a:	d13d      	bne.n	1d2c8 <handle_ns_input+0x2d4>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   1d24c:	69da      	ldr	r2, [r3, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   1d24e:	2a00      	cmp	r2, #0
   1d250:	d13a      	bne.n	1d2c8 <handle_ns_input+0x2d4>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1d252:	6a1a      	ldr	r2, [r3, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   1d254:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1d258:	d136      	bne.n	1d2c8 <handle_ns_input+0x2d4>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   1d25a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1d25c:	b2d2      	uxtb	r2, r2
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1d25e:	2aff      	cmp	r2, #255	; 0xff
   1d260:	d132      	bne.n	1d2c8 <handle_ns_input+0x2d4>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1d262:	ad09      	add	r5, sp, #36	; 0x24
   1d264:	f103 0208 	add.w	r2, r3, #8
   1d268:	46ac      	mov	ip, r5
   1d26a:	6810      	ldr	r0, [r2, #0]
   1d26c:	6851      	ldr	r1, [r2, #4]
   1d26e:	46ae      	mov	lr, r5
   1d270:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1d274:	3208      	adds	r2, #8
   1d276:	455a      	cmp	r2, fp
   1d278:	4675      	mov	r5, lr
   1d27a:	d1f6      	bne.n	1d26a <handle_ns_input+0x276>
   1d27c:	ad0d      	add	r5, sp, #52	; 0x34
   1d27e:	46e6      	mov	lr, ip
   1d280:	e8be 0003 	ldmia.w	lr!, {r0, r1}
   1d284:	45ae      	cmp	lr, r5
   1d286:	6010      	str	r0, [r2, #0]
   1d288:	6051      	str	r1, [r2, #4]
   1d28a:	46f4      	mov	ip, lr
   1d28c:	f102 0208 	add.w	r2, r2, #8
   1d290:	d1f5      	bne.n	1d27e <handle_ns_input+0x28a>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   1d292:	46ae      	mov	lr, r5
   1d294:	f109 0914 	add.w	r9, r9, #20
   1d298:	6830      	ldr	r0, [r6, #0]
   1d29a:	6871      	ldr	r1, [r6, #4]
   1d29c:	4672      	mov	r2, lr
   1d29e:	c203      	stmia	r2!, {r0, r1}
   1d2a0:	3608      	adds	r6, #8
   1d2a2:	454e      	cmp	r6, r9
   1d2a4:	4696      	mov	lr, r2
   1d2a6:	d1f7      	bne.n	1d298 <handle_ns_input+0x2a4>
   1d2a8:	462a      	mov	r2, r5
   1d2aa:	3308      	adds	r3, #8
   1d2ac:	ae11      	add	r6, sp, #68	; 0x44
   1d2ae:	4615      	mov	r5, r2
   1d2b0:	cd03      	ldmia	r5!, {r0, r1}
   1d2b2:	42b5      	cmp	r5, r6
   1d2b4:	6018      	str	r0, [r3, #0]
   1d2b6:	6059      	str	r1, [r3, #4]
   1d2b8:	462a      	mov	r2, r5
   1d2ba:	f103 0308 	add.w	r3, r3, #8
   1d2be:	d1f6      	bne.n	1d2ae <handle_ns_input+0x2ba>
   1d2c0:	e040      	b.n	1d344 <handle_ns_input+0x350>
   1d2c2:	bf00      	nop
   1d2c4:	20004cf4 	.word	0x20004cf4
		ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   1d2c8:	4659      	mov	r1, fp
   1d2ca:	6960      	ldr	r0, [r4, #20]
   1d2cc:	f7fe fce9 	bl	1bca2 <net_if_ipv6_addr_lookup_by_iface>
	if (ifaddr) {
   1d2d0:	4605      	mov	r5, r0
   1d2d2:	2800      	cmp	r0, #0
   1d2d4:	d0a8      	beq.n	1d228 <handle_ns_input+0x234>
   1d2d6:	68a3      	ldr	r3, [r4, #8]
   1d2d8:	689b      	ldr	r3, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1d2da:	f10d 0e44 	add.w	lr, sp, #68	; 0x44
   1d2de:	f103 0208 	add.w	r2, r3, #8
   1d2e2:	f103 0b18 	add.w	fp, r3, #24
   1d2e6:	4617      	mov	r7, r2
   1d2e8:	46f4      	mov	ip, lr
   1d2ea:	6810      	ldr	r0, [r2, #0]
   1d2ec:	6851      	ldr	r1, [r2, #4]
   1d2ee:	46f0      	mov	r8, lr
   1d2f0:	e8a8 0003 	stmia.w	r8!, {r0, r1}
   1d2f4:	3208      	adds	r2, #8
   1d2f6:	455a      	cmp	r2, fp
   1d2f8:	46c6      	mov	lr, r8
   1d2fa:	d1f6      	bne.n	1d2ea <handle_ns_input+0x2f6>
   1d2fc:	3318      	adds	r3, #24
   1d2fe:	aa15      	add	r2, sp, #84	; 0x54
   1d300:	46e6      	mov	lr, ip
   1d302:	e8be 0003 	ldmia.w	lr!, {r0, r1}
   1d306:	4596      	cmp	lr, r2
   1d308:	6018      	str	r0, [r3, #0]
   1d30a:	6059      	str	r1, [r3, #4]
   1d30c:	46f4      	mov	ip, lr
   1d30e:	f103 0308 	add.w	r3, r3, #8
   1d312:	d1f5      	bne.n	1d300 <handle_ns_input+0x30c>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   1d314:	4696      	mov	lr, r2
   1d316:	f109 0914 	add.w	r9, r9, #20
   1d31a:	6830      	ldr	r0, [r6, #0]
   1d31c:	6871      	ldr	r1, [r6, #4]
   1d31e:	4673      	mov	r3, lr
   1d320:	c303      	stmia	r3!, {r0, r1}
   1d322:	3608      	adds	r6, #8
   1d324:	454e      	cmp	r6, r9
   1d326:	469e      	mov	lr, r3
   1d328:	d1f7      	bne.n	1d31a <handle_ns_input+0x326>
   1d32a:	4613      	mov	r3, r2
   1d32c:	463e      	mov	r6, r7
   1d32e:	461a      	mov	r2, r3
   1d330:	ca03      	ldmia	r2!, {r0, r1}
   1d332:	4552      	cmp	r2, sl
   1d334:	6030      	str	r0, [r6, #0]
   1d336:	6071      	str	r1, [r6, #4]
   1d338:	4613      	mov	r3, r2
   1d33a:	f106 0608 	add.w	r6, r6, #8
   1d33e:	d1f6      	bne.n	1d32e <handle_ns_input+0x33a>
		tgt = &ifaddr->address.in6_addr;
   1d340:	f105 0804 	add.w	r8, r5, #4
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   1d344:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   1d346:	e700      	b.n	1d14a <handle_ns_input+0x156>

0001d348 <nd_reachable_timeout>:
{
   1d348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d34a:	4d36      	ldr	r5, [pc, #216]	; (1d424 <nd_reachable_timeout+0xdc>)
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   1d34c:	f1a0 0114 	sub.w	r1, r0, #20
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1d350:	2200      	movs	r2, #0
   1d352:	462e      	mov	r6, r5
   1d354:	01d3      	lsls	r3, r2, #7
   1d356:	18ec      	adds	r4, r5, r3
		if (nbr->data == (u8_t *)data) {
   1d358:	68e7      	ldr	r7, [r4, #12]
   1d35a:	42b9      	cmp	r1, r7
   1d35c:	d04f      	beq.n	1d3fe <nd_reachable_timeout+0xb6>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1d35e:	3201      	adds	r2, #1
   1d360:	2a08      	cmp	r2, #8
   1d362:	d1f7      	bne.n	1d354 <nd_reachable_timeout+0xc>
}
   1d364:	b003      	add	sp, #12
   1d366:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (data->ns_count >= MAX_MULTICAST_SOLICIT) {
   1d368:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
   1d36c:	2a02      	cmp	r2, #2
   1d36e:	d905      	bls.n	1d37c <nd_reachable_timeout+0x34>
				nbr_free(nbr);
   1d370:	4620      	mov	r0, r4
}
   1d372:	b003      	add	sp, #12
   1d374:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				nbr_free(nbr);
   1d378:	f7fe bbb3 	b.w	1bae2 <nbr_free>
			data->ns_count++;
   1d37c:	3201      	adds	r2, #1
   1d37e:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
			ret = net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   1d382:	441e      	add	r6, r3
   1d384:	3810      	subs	r0, #16
   1d386:	2300      	movs	r3, #0
   1d388:	9301      	str	r3, [sp, #4]
   1d38a:	9000      	str	r0, [sp, #0]
   1d38c:	461a      	mov	r2, r3
   1d38e:	4619      	mov	r1, r3
   1d390:	68b0      	ldr	r0, [r6, #8]
   1d392:	f7ff fa2b 	bl	1c7ec <net_ipv6_send_ns>
   1d396:	e7e5      	b.n	1d364 <nd_reachable_timeout+0x1c>
		data->state = NET_IPV6_NBR_STATE_STALE;
   1d398:	2302      	movs	r3, #2
   1d39a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
		break;
   1d39e:	e7e1      	b.n	1d364 <nd_reachable_timeout+0x1c>
		data->state = NET_IPV6_NBR_STATE_PROBE;
   1d3a0:	2204      	movs	r2, #4
   1d3a2:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		data->ns_count = 0;
   1d3a6:	2200      	movs	r2, #0
   1d3a8:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
		if (data->ns_count >= MAX_UNICAST_SOLICIT) {
   1d3ac:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
   1d3b0:	2a02      	cmp	r2, #2
   1d3b2:	f1a0 0110 	sub.w	r1, r0, #16
   1d3b6:	d90c      	bls.n	1d3d2 <nd_reachable_timeout+0x8a>
			router = net_if_ipv6_router_lookup(nbr->iface,
   1d3b8:	4433      	add	r3, r6
   1d3ba:	6898      	ldr	r0, [r3, #8]
   1d3bc:	f7fb ff62 	bl	19284 <net_if_ipv6_router_lookup>
			if (router && !router->is_infinite) {
   1d3c0:	2800      	cmp	r0, #0
   1d3c2:	d0cf      	beq.n	1d364 <nd_reachable_timeout+0x1c>
   1d3c4:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   1d3c8:	2b00      	cmp	r3, #0
   1d3ca:	d1cb      	bne.n	1d364 <nd_reachable_timeout+0x1c>
				net_if_ipv6_router_rm(router);
   1d3cc:	f7fb ffd8 	bl	19380 <net_if_ipv6_router_rm>
   1d3d0:	e7ce      	b.n	1d370 <nd_reachable_timeout+0x28>
			data->ns_count++;
   1d3d2:	3201      	adds	r2, #1
   1d3d4:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
			ret = net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   1d3d8:	18f0      	adds	r0, r6, r3
   1d3da:	2300      	movs	r3, #0
   1d3dc:	e88d 000a 	stmia.w	sp, {r1, r3}
   1d3e0:	461a      	mov	r2, r3
   1d3e2:	4619      	mov	r1, r3
   1d3e4:	6880      	ldr	r0, [r0, #8]
   1d3e6:	f7ff fa01 	bl	1c7ec <net_ipv6_send_ns>
			k_delayed_work_submit(
   1d3ea:	68e1      	ldr	r1, [r4, #12]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1d3ec:	480e      	ldr	r0, [pc, #56]	; (1d428 <nd_reachable_timeout+0xe0>)
   1d3ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d3f2:	3114      	adds	r1, #20
}
   1d3f4:	b003      	add	sp, #12
   1d3f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1d3fa:	f003 bf0f 	b.w	2121c <k_delayed_work_submit_to_queue>
	if (!data || !nbr) {
   1d3fe:	2900      	cmp	r1, #0
   1d400:	d0b0      	beq.n	1d364 <nd_reachable_timeout+0x1c>
	switch (data->state) {
   1d402:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   1d406:	2a04      	cmp	r2, #4
   1d408:	d8ac      	bhi.n	1d364 <nd_reachable_timeout+0x1c>
   1d40a:	a101      	add	r1, pc, #4	; (adr r1, 1d410 <nd_reachable_timeout+0xc8>)
   1d40c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   1d410:	0001d369 	.word	0x0001d369
   1d414:	0001d399 	.word	0x0001d399
   1d418:	0001d371 	.word	0x0001d371
   1d41c:	0001d3a1 	.word	0x0001d3a1
   1d420:	0001d3ad 	.word	0x0001d3ad
   1d424:	2000e2b4 	.word	0x2000e2b4
   1d428:	200052a0 	.word	0x200052a0

0001d42c <net_ipv6_start_dad>:
{
   1d42c:	b507      	push	{r0, r1, r2, lr}
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   1d42e:	2301      	movs	r3, #1
   1d430:	9301      	str	r3, [sp, #4]
   1d432:	3104      	adds	r1, #4
   1d434:	2300      	movs	r3, #0
   1d436:	9100      	str	r1, [sp, #0]
   1d438:	461a      	mov	r2, r3
   1d43a:	4619      	mov	r1, r3
   1d43c:	f7ff f9d6 	bl	1c7ec <net_ipv6_send_ns>
}
   1d440:	b003      	add	sp, #12
   1d442:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001d448 <net_ipv6_prepare_for_send>:
{
   1d448:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct net_if *iface = NULL;
   1d44a:	2300      	movs	r3, #0
   1d44c:	9303      	str	r3, [sp, #12]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d44e:	6943      	ldr	r3, [r0, #20]
   1d450:	f3bf 8f5b 	dmb	ish
   1d454:	68db      	ldr	r3, [r3, #12]
   1d456:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(net_pkt_iface(pkt)->flags, NET_IF_POINTOPOINT)) {
   1d45a:	0799      	lsls	r1, r3, #30
{
   1d45c:	4604      	mov	r4, r0
	if (atomic_test_bit(net_pkt_iface(pkt)->flags, NET_IF_POINTOPOINT)) {
   1d45e:	d468      	bmi.n	1d532 <net_ipv6_prepare_for_send+0xea>
	if ((net_pkt_ll_dst(pkt)->addr &&
   1d460:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1d462:	b923      	cbnz	r3, 1d46e <net_ipv6_prepare_for_send+0x26>
   1d464:	6883      	ldr	r3, [r0, #8]
   1d466:	6899      	ldr	r1, [r3, #8]
	      !IS_ENABLED(CONFIG_NET_ROUTING))) ||
   1d468:	7e0b      	ldrb	r3, [r1, #24]
   1d46a:	2bff      	cmp	r3, #255	; 0xff
   1d46c:	d10a      	bne.n	1d484 <net_ipv6_prepare_for_send+0x3c>
	return pkt->forwarding;
   1d46e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
	if (net_pkt_forwarding(pkt) &&
   1d472:	075a      	lsls	r2, r3, #29
   1d474:	d45d      	bmi.n	1d532 <net_ipv6_prepare_for_send+0xea>
	return pkt->frags->data;
   1d476:	68a3      	ldr	r3, [r4, #8]
		return update_ll_reserve(pkt, &NET_IPV6_HDR(pkt)->dst);
   1d478:	6899      	ldr	r1, [r3, #8]
   1d47a:	3118      	adds	r1, #24
   1d47c:	4620      	mov	r0, r4
   1d47e:	f7fe fbb9 	bl	1bbf4 <update_ll_reserve.part.32>
   1d482:	e056      	b.n	1d532 <net_ipv6_prepare_for_send+0xea>
	if (net_if_ipv6_addr_onlink(&iface,
   1d484:	3118      	adds	r1, #24
   1d486:	a803      	add	r0, sp, #12
   1d488:	f7fb fe82 	bl	19190 <net_if_ipv6_addr_onlink>
   1d48c:	68a3      	ldr	r3, [r4, #8]
		nexthop = &NET_IPV6_HDR(pkt)->dst;
   1d48e:	689d      	ldr	r5, [r3, #8]
   1d490:	3518      	adds	r5, #24
	if (net_if_ipv6_addr_onlink(&iface,
   1d492:	2800      	cmp	r0, #0
   1d494:	d03c      	beq.n	1d510 <net_ipv6_prepare_for_send+0xc8>
		net_pkt_set_iface(pkt, iface);
   1d496:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   1d498:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1d49a:	7d5b      	ldrb	r3, [r3, #21]
   1d49c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1d4a0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	if (!iface) {
   1d4a4:	9b03      	ldr	r3, [sp, #12]
   1d4a6:	b963      	cbnz	r3, 1d4c2 <net_ipv6_prepare_for_send+0x7a>
		if (net_if_ipv6_addr_onlink(&iface, nexthop)) {
   1d4a8:	4629      	mov	r1, r5
   1d4aa:	a803      	add	r0, sp, #12
   1d4ac:	f7fb fe70 	bl	19190 <net_if_ipv6_addr_onlink>
   1d4b0:	2800      	cmp	r0, #0
   1d4b2:	d048      	beq.n	1d546 <net_ipv6_prepare_for_send+0xfe>
			net_pkt_set_iface(pkt, iface);
   1d4b4:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   1d4b6:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1d4b8:	7d5b      	ldrb	r3, [r3, #21]
   1d4ba:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1d4be:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	nbr = nbr_lookup(&net_neighbor.table, iface, nexthop);
   1d4c2:	4629      	mov	r1, r5
   1d4c4:	9803      	ldr	r0, [sp, #12]
   1d4c6:	f7fe fc6f 	bl	1bda8 <nbr_lookup.isra.29>
	if (nbr && nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   1d4ca:	4606      	mov	r6, r0
   1d4cc:	2800      	cmp	r0, #0
   1d4ce:	d03d      	beq.n	1d54c <net_ipv6_prepare_for_send+0x104>
   1d4d0:	7840      	ldrb	r0, [r0, #1]
   1d4d2:	28ff      	cmp	r0, #255	; 0xff
   1d4d4:	d03a      	beq.n	1d54c <net_ipv6_prepare_for_send+0x104>
		lladdr = net_nbr_get_lladdr(nbr->idx);
   1d4d6:	f7fe faa7 	bl	1ba28 <net_nbr_get_lladdr>
		net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   1d4da:	1c83      	adds	r3, r0, #2
   1d4dc:	62a3      	str	r3, [r4, #40]	; 0x28
		net_pkt_ll_dst(pkt)->len = lladdr->len;
   1d4de:	7843      	ldrb	r3, [r0, #1]
   1d4e0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   1d4e4:	68f3      	ldr	r3, [r6, #12]
   1d4e6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1d4ea:	2b02      	cmp	r3, #2
   1d4ec:	d10a      	bne.n	1d504 <net_ipv6_prepare_for_send+0xbc>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_DELAY);
   1d4ee:	2103      	movs	r1, #3
   1d4f0:	4630      	mov	r0, r6
   1d4f2:	f7fe fac9 	bl	1ba88 <ipv6_nbr_set_state>
			k_delayed_work_submit(
   1d4f6:	68f1      	ldr	r1, [r6, #12]
   1d4f8:	481c      	ldr	r0, [pc, #112]	; (1d56c <net_ipv6_prepare_for_send+0x124>)
   1d4fa:	f241 3288 	movw	r2, #5000	; 0x1388
   1d4fe:	3114      	adds	r1, #20
   1d500:	f003 fe8c 	bl	2121c <k_delayed_work_submit_to_queue>
	return pkt->forwarding;
   1d504:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
	if (net_pkt_forwarding(pkt) &&
   1d508:	075b      	lsls	r3, r3, #29
   1d50a:	d412      	bmi.n	1d532 <net_ipv6_prepare_for_send+0xea>
   1d50c:	4629      	mov	r1, r5
   1d50e:	e7b5      	b.n	1d47c <net_ipv6_prepare_for_send+0x34>
	route = net_route_lookup(iface, dst);
   1d510:	4629      	mov	r1, r5
   1d512:	f000 fbdb 	bl	1dccc <net_route_lookup>
	if (route) {
   1d516:	4606      	mov	r6, r0
   1d518:	b170      	cbz	r0, 1d538 <net_ipv6_prepare_for_send+0xf0>
		nexthop = net_route_get_nexthop(route);
   1d51a:	f000 fc7d 	bl	1de18 <net_route_get_nexthop>
		if (!nexthop) {
   1d51e:	4605      	mov	r5, r0
   1d520:	2800      	cmp	r0, #0
   1d522:	d1bf      	bne.n	1d4a4 <net_ipv6_prepare_for_send+0x5c>
			net_route_del(route);
   1d524:	4630      	mov	r0, r6
   1d526:	f000 fc2b 	bl	1dd80 <net_route_del>
			net_pkt_unref(pkt);
   1d52a:	4620      	mov	r0, r4
   1d52c:	f7fc fa41 	bl	199b2 <net_pkt_unref>
			return NULL;
   1d530:	2400      	movs	r4, #0
}
   1d532:	4620      	mov	r0, r4
   1d534:	b004      	add	sp, #16
   1d536:	bd70      	pop	{r4, r5, r6, pc}
		router = net_if_ipv6_router_find_default(NULL, dst);
   1d538:	4629      	mov	r1, r5
   1d53a:	f7fb feb9 	bl	192b0 <net_if_ipv6_router_find_default>
		if (!router) {
   1d53e:	b188      	cbz	r0, 1d564 <net_ipv6_prepare_for_send+0x11c>
		nexthop = &router->address.in6_addr;
   1d540:	f100 052c 	add.w	r5, r0, #44	; 0x2c
   1d544:	e7ae      	b.n	1d4a4 <net_ipv6_prepare_for_send+0x5c>
			iface = net_pkt_iface(pkt);
   1d546:	6963      	ldr	r3, [r4, #20]
   1d548:	9303      	str	r3, [sp, #12]
   1d54a:	e7ba      	b.n	1d4c2 <net_ipv6_prepare_for_send+0x7a>
	return pkt->frags->data;
   1d54c:	68a3      	ldr	r3, [r4, #8]
	ret = net_ipv6_send_ns(net_pkt_iface(pkt), pkt,
   1d54e:	2600      	movs	r6, #0
   1d550:	689a      	ldr	r2, [r3, #8]
   1d552:	e88d 0060 	stmia.w	sp, {r5, r6}
   1d556:	4633      	mov	r3, r6
   1d558:	3208      	adds	r2, #8
   1d55a:	4621      	mov	r1, r4
   1d55c:	6960      	ldr	r0, [r4, #20]
   1d55e:	f7ff f945 	bl	1c7ec <net_ipv6_send_ns>
   1d562:	e7e5      	b.n	1d530 <net_ipv6_prepare_for_send+0xe8>
		if (!nexthop) {
   1d564:	2d00      	cmp	r5, #0
   1d566:	d1ac      	bne.n	1d4c2 <net_ipv6_prepare_for_send+0x7a>
   1d568:	e7df      	b.n	1d52a <net_ipv6_prepare_for_send+0xe2>
   1d56a:	bf00      	nop
   1d56c:	200052a0 	.word	0x200052a0

0001d570 <net_ipv6_send_rs>:
{
   1d570:	b5f0      	push	{r4, r5, r6, r7, lr}
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1d572:	2100      	movs	r1, #0
{
   1d574:	b085      	sub	sp, #20
   1d576:	4607      	mov	r7, r0
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1d578:	f7fe fa73 	bl	1ba62 <net_if_get_ll_reserve>
   1d57c:	210a      	movs	r1, #10
   1d57e:	f7fc f9e1 	bl	19944 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1d582:	4605      	mov	r5, r0
   1d584:	b138      	cbz	r0, 1d596 <net_ipv6_send_rs+0x26>
	frag = net_pkt_get_frag(pkt, ND_NET_BUF_TIMEOUT);
   1d586:	210a      	movs	r1, #10
   1d588:	f7fc f9f4 	bl	19974 <net_pkt_get_frag>
	if (!frag) {
   1d58c:	4606      	mov	r6, r0
   1d58e:	b928      	cbnz	r0, 1d59c <net_ipv6_send_rs+0x2c>
		net_pkt_unref(pkt);
   1d590:	4628      	mov	r0, r5
   1d592:	f7fc fa0e 	bl	199b2 <net_pkt_unref>
		return -ENOMEM;
   1d596:	f06f 000b 	mvn.w	r0, #11
   1d59a:	e089      	b.n	1d6b0 <net_ipv6_send_rs+0x140>
	net_pkt_frag_add(pkt, frag);
   1d59c:	4601      	mov	r1, r0
   1d59e:	4628      	mov	r0, r5
   1d5a0:	f7fc fa2e 	bl	19a00 <net_pkt_frag_add>
	pkt->iface = iface;
   1d5a4:	616f      	str	r7, [r5, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1d5a6:	7d7b      	ldrb	r3, [r7, #21]
   1d5a8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1d5ac:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
	pkt->family = family;
   1d5b0:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
   1d5b4:	220a      	movs	r2, #10
   1d5b6:	f362 03c6 	bfi	r3, r2, #3, #4
   1d5ba:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
	pkt->ip_hdr_len = len;
   1d5be:	2328      	movs	r3, #40	; 0x28
   1d5c0:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
	net_pkt_ll_clear(pkt);
   1d5c4:	4628      	mov	r0, r5
   1d5c6:	f7fe faf0 	bl	1bbaa <net_pkt_ll_clear>
	return pkt->frags->data;
   1d5ca:	68ab      	ldr	r3, [r5, #8]
   1d5cc:	689c      	ldr	r4, [r3, #8]
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1d5ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d5d2:	7623      	strb	r3, [r4, #24]
   1d5d4:	2300      	movs	r3, #0
   1d5d6:	2202      	movs	r2, #2
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1d5d8:	76a3      	strb	r3, [r4, #26]
   1d5da:	76e3      	strb	r3, [r4, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1d5dc:	7723      	strb	r3, [r4, #28]
   1d5de:	7763      	strb	r3, [r4, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1d5e0:	77a3      	strb	r3, [r4, #30]
   1d5e2:	77e3      	strb	r3, [r4, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1d5e4:	f884 3020 	strb.w	r3, [r4, #32]
   1d5e8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1d5ec:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1d5f0:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1d5f4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   1d5f8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1d5fc:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
   1d600:	2301      	movs	r3, #1
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1d602:	7662      	strb	r2, [r4, #25]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1d604:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
						    &NET_IPV6_HDR(pkt)->dst));
   1d608:	4638      	mov	r0, r7
   1d60a:	f104 0118 	add.w	r1, r4, #24
   1d60e:	f7fb feef 	bl	193f0 <net_if_ipv6_select_src_addr>

   1d612:	466f      	mov	r7, sp
						    &NET_IPV6_HDR(pkt)->dst));
   1d614:	4603      	mov	r3, r0

   1d616:	f100 0c10 	add.w	ip, r0, #16
   1d61a:	466a      	mov	r2, sp
   1d61c:	6818      	ldr	r0, [r3, #0]
   1d61e:	6859      	ldr	r1, [r3, #4]
   1d620:	46be      	mov	lr, r7
   1d622:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1d626:	3308      	adds	r3, #8
   1d628:	4563      	cmp	r3, ip
   1d62a:	4677      	mov	r7, lr
   1d62c:	d1f6      	bne.n	1d61c <net_ipv6_send_rs+0xac>
			net_if_ipv6_select_src_addr(iface,
   1d62e:	3408      	adds	r4, #8
   1d630:	af04      	add	r7, sp, #16
   1d632:	4613      	mov	r3, r2
   1d634:	cb03      	ldmia	r3!, {r0, r1}
   1d636:	42bb      	cmp	r3, r7
   1d638:	6020      	str	r0, [r4, #0]
   1d63a:	6061      	str	r1, [r4, #4]
   1d63c:	461a      	mov	r2, r3
   1d63e:	f104 0408 	add.w	r4, r4, #8
   1d642:	d1f6      	bne.n	1d632 <net_ipv6_send_rs+0xc2>
   1d644:	68ab      	ldr	r3, [r5, #8]
	unspec_src = net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src);
   1d646:	6898      	ldr	r0, [r3, #8]
   1d648:	3008      	adds	r0, #8
   1d64a:	f7fe f9fd 	bl	1ba48 <net_is_ipv6_addr_unspecified>
	if (!unspec_src) {
   1d64e:	4607      	mov	r7, r0
   1d650:	bb80      	cbnz	r0, 1d6b4 <net_ipv6_send_rs+0x144>
   1d652:	696b      	ldr	r3, [r5, #20]
   1d654:	7d1b      	ldrb	r3, [r3, #20]
	if (iface->link_addr.len == 6) {
   1d656:	2b06      	cmp	r3, #6
   1d658:	d02e      	beq.n	1d6b8 <net_ipv6_send_rs+0x148>
		return 16;
   1d65a:	2b08      	cmp	r3, #8
   1d65c:	bf14      	ite	ne
   1d65e:	2400      	movne	r4, #0
   1d660:	2410      	moveq	r4, #16
	setup_headers(pkt, sizeof(struct net_icmpv6_rs_hdr) + llao_len,
   1d662:	1d21      	adds	r1, r4, #4
   1d664:	4628      	mov	r0, r5
   1d666:	2285      	movs	r2, #133	; 0x85
	net_buf_add(frag, sizeof(struct net_icmpv6_rs_hdr));
   1d668:	3608      	adds	r6, #8
	setup_headers(pkt, sizeof(struct net_icmpv6_rs_hdr) + llao_len,
   1d66a:	f7fe fa7d 	bl	1bb68 <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_rs_hdr));
   1d66e:	2104      	movs	r1, #4
   1d670:	4630      	mov	r0, r6
   1d672:	f7fa fc6f 	bl	17f54 <net_buf_simple_add>
	if (!unspec_src) {
   1d676:	b97f      	cbnz	r7, 1d698 <net_ipv6_send_rs+0x128>
		net_buf_add(frag, llao_len);
   1d678:	4621      	mov	r1, r4
   1d67a:	4630      	mov	r0, r6
   1d67c:	f7fa fc6a 	bl	17f54 <net_buf_simple_add>
			 (u8_t *)net_pkt_icmp_data(pkt) +
   1d680:	4628      	mov	r0, r5
		set_llao(&net_pkt_iface(pkt)->link_addr,
   1d682:	696e      	ldr	r6, [r5, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   1d684:	f7fc fbe5 	bl	19e52 <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   1d688:	3610      	adds	r6, #16
   1d68a:	f100 0108 	add.w	r1, r0, #8
   1d68e:	2301      	movs	r3, #1
   1d690:	4622      	mov	r2, r4
   1d692:	4630      	mov	r0, r6
   1d694:	f7fe fa98 	bl	1bbc8 <set_llao>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1d698:	68a9      	ldr	r1, [r5, #8]
   1d69a:	4628      	mov	r0, r5
   1d69c:	f7fd fbf4 	bl	1ae88 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   1d6a0:	4628      	mov	r0, r5
   1d6a2:	f7fb f893 	bl	187cc <net_send_data>
   1d6a6:	2800      	cmp	r0, #0
   1d6a8:	db08      	blt.n	1d6bc <net_ipv6_send_rs+0x14c>
	net_stats_update_ipv6_nd_sent();
   1d6aa:	f7fe f9dd 	bl	1ba68 <net_stats_update_ipv6_nd_sent>
	return 0;
   1d6ae:	2000      	movs	r0, #0
}
   1d6b0:	b005      	add	sp, #20
   1d6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return 0;
   1d6b4:	2400      	movs	r4, #0
   1d6b6:	e7d4      	b.n	1d662 <net_ipv6_send_rs+0xf2>
		return 8;
   1d6b8:	2408      	movs	r4, #8
   1d6ba:	e7d2      	b.n	1d662 <net_ipv6_send_rs+0xf2>
	net_pkt_unref(pkt);
   1d6bc:	4628      	mov	r0, r5
   1d6be:	f7fc f978 	bl	199b2 <net_pkt_unref>
	net_stats_update_ipv6_nd_drop();
   1d6c2:	f7fe f9d9 	bl	1ba78 <net_stats_update_ipv6_nd_drop>
	return -EINVAL;
   1d6c6:	f06f 0015 	mvn.w	r0, #21
   1d6ca:	e7f1      	b.n	1d6b0 <net_ipv6_send_rs+0x140>

0001d6cc <net_ipv6_start_rs>:
	return net_ipv6_send_rs(iface);
   1d6cc:	f7ff bf50 	b.w	1d570 <net_ipv6_send_rs>

0001d6d0 <net_ipv6_mld_join>:
{
   1d6d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d6d2:	ab02      	add	r3, sp, #8
   1d6d4:	460d      	mov	r5, r1
   1d6d6:	f843 0d04 	str.w	r0, [r3, #-4]!
	maddr = net_if_ipv6_maddr_lookup(addr, &iface);
   1d6da:	4628      	mov	r0, r5
   1d6dc:	4619      	mov	r1, r3
   1d6de:	f7fb fc6f 	bl	18fc0 <net_if_ipv6_maddr_lookup>
	if (maddr && net_if_ipv6_maddr_is_joined(maddr)) {
   1d6e2:	4604      	mov	r4, r0
   1d6e4:	b128      	cbz	r0, 1d6f2 <net_ipv6_mld_join+0x22>
	return addr->is_joined;
   1d6e6:	7803      	ldrb	r3, [r0, #0]
   1d6e8:	079b      	lsls	r3, r3, #30
   1d6ea:	d508      	bpl.n	1d6fe <net_ipv6_mld_join+0x2e>
		return -EALREADY;
   1d6ec:	f06f 0644 	mvn.w	r6, #68	; 0x44
   1d6f0:	e01b      	b.n	1d72a <net_ipv6_mld_join+0x5a>
		maddr = net_if_ipv6_maddr_add(iface, addr);
   1d6f2:	4629      	mov	r1, r5
   1d6f4:	9801      	ldr	r0, [sp, #4]
   1d6f6:	f7fb fb93 	bl	18e20 <net_if_ipv6_maddr_add>
		if (!maddr) {
   1d6fa:	4604      	mov	r4, r0
   1d6fc:	b1c0      	cbz	r0, 1d730 <net_ipv6_mld_join+0x60>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_EXCLUDE);
   1d6fe:	2202      	movs	r2, #2
   1d700:	4629      	mov	r1, r5
   1d702:	9801      	ldr	r0, [sp, #4]
   1d704:	f7fe fd2e 	bl	1c164 <send_mldv2>
	if (ret < 0) {
   1d708:	1e06      	subs	r6, r0, #0
   1d70a:	db0e      	blt.n	1d72a <net_ipv6_mld_join+0x5a>
	addr->is_joined = true;
   1d70c:	7823      	ldrb	r3, [r4, #0]
	net_if_mcast_monitor(iface, addr, true);
   1d70e:	9801      	ldr	r0, [sp, #4]
   1d710:	f043 0302 	orr.w	r3, r3, #2
   1d714:	7023      	strb	r3, [r4, #0]
   1d716:	2201      	movs	r2, #1
   1d718:	4629      	mov	r1, r5
   1d71a:	f7fb fc8f 	bl	1903c <net_if_mcast_monitor>
   1d71e:	2300      	movs	r3, #0
   1d720:	461a      	mov	r2, r3
   1d722:	9901      	ldr	r1, [sp, #4]
   1d724:	4804      	ldr	r0, [pc, #16]	; (1d738 <net_ipv6_mld_join+0x68>)
   1d726:	f000 fa29 	bl	1db7c <net_mgmt_event_notify_with_info>
}
   1d72a:	4630      	mov	r0, r6
   1d72c:	b002      	add	sp, #8
   1d72e:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1d730:	f06f 060b 	mvn.w	r6, #11
   1d734:	e7f9      	b.n	1d72a <net_ipv6_mld_join+0x5a>
   1d736:	bf00      	nop
   1d738:	f0600007 	.word	0xf0600007

0001d73c <net_ipv6_process_pkt>:
#endif /* CONFIG_NET_ROUTE */

int real_len;
int pkt_len; 
enum net_verdict net_ipv6_process_pkt(struct net_pkt *pkt)
{
   1d73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d740:	4604      	mov	r4, r0
   1d742:	6880      	ldr	r0, [r0, #8]
   1d744:	6885      	ldr	r5, [r0, #8]
   1d746:	b087      	sub	sp, #28
	return net_buf_frags_len(pkt->frags);
   1d748:	f7fe f976 	bl	1ba38 <net_buf_frags_len>
	struct net_ipv6_hdr *hdr = NET_IPV6_HDR(pkt);
	real_len = net_pkt_get_len(pkt);
	pkt_len = (hdr->len[0] << 8) + hdr->len[1] + sizeof(*hdr);
   1d74c:	7929      	ldrb	r1, [r5, #4]
   1d74e:	796b      	ldrb	r3, [r5, #5]
	real_len = net_pkt_get_len(pkt);
   1d750:	4aa5      	ldr	r2, [pc, #660]	; (1d9e8 <net_ipv6_process_pkt+0x2ac>)
	pkt_len = (hdr->len[0] << 8) + hdr->len[1] + sizeof(*hdr);
   1d752:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   1d756:	3328      	adds	r3, #40	; 0x28
   1d758:	49a4      	ldr	r1, [pc, #656]	; (1d9ec <net_ipv6_process_pkt+0x2b0>)
	real_len = net_pkt_get_len(pkt);
   1d75a:	6010      	str	r0, [r2, #0]
	u8_t next, next_hdr, length;
	u8_t first_option;
	u16_t offset, total_len = 0;
	u8_t ext_bitmap;

	if (real_len != pkt_len) {
   1d75c:	4298      	cmp	r0, r3
	pkt_len = (hdr->len[0] << 8) + hdr->len[1] + sizeof(*hdr);
   1d75e:	600b      	str	r3, [r1, #0]
   1d760:	4692      	mov	sl, r2
	if (real_len != pkt_len) {
   1d762:	d004      	beq.n	1d76e <net_ipv6_process_pkt+0x32>
	net_stats.ipv6.drop++;
   1d764:	4aa2      	ldr	r2, [pc, #648]	; (1d9f0 <net_ipv6_process_pkt+0x2b4>)
   1d766:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1d768:	3301      	adds	r3, #1
   1d76a:	6313      	str	r3, [r2, #48]	; 0x30
   1d76c:	e0fa      	b.n	1d964 <net_ipv6_process_pkt+0x228>
		NET_DBG("IPv6 packet len %d received from %s to %s",
			real_len, net_sprint_ipv6_addr(&hdr->src), out);
	} while (0);
#endif /* CONFIG_NET_DEBUG_IPV6 */

	if (net_is_ipv6_addr_mcast(&hdr->src)) {
   1d76e:	7a2b      	ldrb	r3, [r5, #8]
   1d770:	2bff      	cmp	r3, #255	; 0xff
   1d772:	d0f7      	beq.n	1d764 <net_ipv6_process_pkt+0x28>
		NET_DBG("Dropping src multicast packet");
		net_stats_update_ipv6_drop();
		goto drop;
	}

	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   1d774:	f105 0618 	add.w	r6, r5, #24
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   1d778:	2100      	movs	r1, #0
   1d77a:	4630      	mov	r0, r6
   1d77c:	f7fb f9d4 	bl	18b28 <net_if_ipv6_addr_lookup>
   1d780:	4601      	mov	r1, r0
   1d782:	bb08      	cbnz	r0, 1d7c8 <net_ipv6_process_pkt+0x8c>
	return net_if_ipv6_maddr_lookup(maddr, NULL) != NULL;
   1d784:	4630      	mov	r0, r6
   1d786:	f7fb fc1b 	bl	18fc0 <net_if_ipv6_maddr_lookup>
   1d78a:	b9e8      	cbnz	r0, 1d7c8 <net_ipv6_process_pkt+0x8c>
	    !net_is_my_ipv6_maddr(&hdr->dst) &&
   1d78c:	7e2b      	ldrb	r3, [r5, #24]
   1d78e:	2bff      	cmp	r3, #255	; 0xff
   1d790:	d01a      	beq.n	1d7c8 <net_ipv6_process_pkt+0x8c>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d792:	69ab      	ldr	r3, [r5, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d794:	2b00      	cmp	r3, #0
   1d796:	f040 810c 	bne.w	1d9b2 <net_ipv6_process_pkt+0x276>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d79a:	69eb      	ldr	r3, [r5, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d79c:	2b00      	cmp	r3, #0
   1d79e:	f040 8108 	bne.w	1d9b2 <net_ipv6_process_pkt+0x276>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d7a2:	6a2b      	ldr	r3, [r5, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d7a4:	2b00      	cmp	r3, #0
   1d7a6:	f040 8104 	bne.w	1d9b2 <net_ipv6_process_pkt+0x276>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1d7aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 *
   1d7ac:	061a      	lsls	r2, r3, #24

   1d7ae:	0a19      	lsrs	r1, r3, #8
 * @brief Check if the IPv6 address is a multicast address.
   1d7b0:	ea42 6213 	orr.w	r2, r2, r3, lsr #24

   1d7b4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 * @brief Check if the IPv6 address is a multicast address.
   1d7b8:	021b      	lsls	r3, r3, #8
   1d7ba:	430a      	orrs	r2, r1
   1d7bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1d7c0:	4313      	orrs	r3, r2
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d7c2:	2b01      	cmp	r3, #1
   1d7c4:	f040 80f5 	bne.w	1d9b2 <net_ipv6_process_pkt+0x276>
		net_stats_update_ipv6_drop();
		goto drop;
	}

	/* Check extension headers */
	net_pkt_set_next_hdr(pkt, &hdr->nexthdr);
   1d7c8:	1dab      	adds	r3, r5, #6
	pkt->next_hdr = hdr;
   1d7ca:	61e3      	str	r3, [r4, #28]
	pkt->ipv6_ext_len = len;
   1d7cc:	2700      	movs	r7, #0
	pkt->ip_hdr_len = len;
   1d7ce:	2328      	movs	r3, #40	; 0x28
	pkt->ipv6_ext_len = len;
   1d7d0:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
	pkt->ip_hdr_len = len;
   1d7d4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

	/* Fast path for main upper layer protocols. The handling of extension
	 * headers can be slow so do this checking here. There cannot
	 * be any extension headers after the upper layer protocol header.
	 */
	next = *(net_pkt_next_hdr(pkt));
   1d7d8:	f895 9006 	ldrb.w	r9, [r5, #6]
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   1d7dc:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
   1d7e0:	d021      	beq.n	1d826 <net_ipv6_process_pkt+0xea>
   1d7e2:	f1b9 0f11 	cmp.w	r9, #17
   1d7e6:	f000 80d7 	beq.w	1d998 <net_ipv6_process_pkt+0x25c>
	if (is_upper_layer_protocol_header(next)) {
   1d7ea:	f1b9 0f06 	cmp.w	r9, #6
   1d7ee:	f000 80b9 	beq.w	1d964 <net_ipv6_process_pkt+0x228>
	/* Go through the extensions */
	frag = pkt->frags;
	next = hdr->nexthdr;
	first_option = next;
	ext_bitmap = 0;
	offset = sizeof(struct net_ipv6_hdr);
   1d7f2:	f10d 0b18 	add.w	fp, sp, #24
	frag = pkt->frags;
   1d7f6:	68a0      	ldr	r0, [r4, #8]
	offset = sizeof(struct net_ipv6_hdr);
   1d7f8:	f82b 3d08 	strh.w	r3, [fp, #-8]!
	prev_hdr = &NET_IPV6_HDR(pkt)->nexthdr - &NET_IPV6_HDR(pkt)->vtc;

	while (frag) {
   1d7fc:	464e      	mov	r6, r9
	u16_t offset, total_len = 0;
   1d7fe:	46b8      	mov	r8, r7
	while (frag) {
   1d800:	b130      	cbz	r0, 1d810 <net_ipv6_process_pkt+0xd4>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   1d802:	2e3a      	cmp	r6, #58	; 0x3a
   1d804:	d11e      	bne.n	1d844 <net_ipv6_process_pkt+0x108>
		enum net_verdict verdict;

		if (is_upper_layer_protocol_header(next)) {
			NET_DBG("IPv6 next header %d", next);
			net_pkt_set_ipv6_ext_len(pkt, offset -
   1d806:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1d80a:	3b28      	subs	r3, #40	; 0x28
	pkt->ipv6_ext_len = len;
   1d80c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		prev_hdr = start_of_ext;
		next = next_hdr;
	}

upper_proto:
	if (total_len > 0) {
   1d810:	f1b8 0f00 	cmp.w	r8, #0
   1d814:	d001      	beq.n	1d81a <net_ipv6_process_pkt+0xde>
		NET_DBG("Extension len %d", total_len);
		net_pkt_set_ipv6_ext_len(pkt, total_len);
   1d816:	f884 8039 	strb.w	r8, [r4, #57]	; 0x39
	}

	switch (next) {
   1d81a:	2e11      	cmp	r6, #17
   1d81c:	f000 80bc 	beq.w	1d998 <net_ipv6_process_pkt+0x25c>
   1d820:	2e3a      	cmp	r6, #58	; 0x3a
   1d822:	f040 809f 	bne.w	1d964 <net_ipv6_process_pkt+0x228>
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1d826:	a905      	add	r1, sp, #20
   1d828:	4620      	mov	r0, r4
   1d82a:	f7fd fb77 	bl	1af1c <net_icmpv6_get_hdr>
	if (!icmp_hdr) {
   1d82e:	2800      	cmp	r0, #0
   1d830:	f000 8098 	beq.w	1d964 <net_ipv6_process_pkt+0x228>
	return net_icmpv6_input(pkt, icmp_hdr->type, icmp_hdr->code);
   1d834:	7842      	ldrb	r2, [r0, #1]
   1d836:	7801      	ldrb	r1, [r0, #0]
   1d838:	4620      	mov	r0, r4
   1d83a:	f7fe f833 	bl	1b8a4 <net_icmpv6_input>

	NET_DBG("Unknown next header type");
	net_stats_update_ip_errors_protoerr();

	return NET_DROP;
}
   1d83e:	b007      	add	sp, #28
   1d840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   1d844:	2e11      	cmp	r6, #17
   1d846:	d0de      	beq.n	1d806 <net_ipv6_process_pkt+0xca>
		if (is_upper_layer_protocol_header(next)) {
   1d848:	2e06      	cmp	r6, #6
   1d84a:	d0dc      	beq.n	1d806 <net_ipv6_process_pkt+0xca>
	return net_frag_read(frag, offset, pos, 1, value);
   1d84c:	ab03      	add	r3, sp, #12
   1d84e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1d852:	9300      	str	r3, [sp, #0]
   1d854:	465a      	mov	r2, fp
   1d856:	2301      	movs	r3, #1
   1d858:	f7fc f9fe 	bl	19c58 <net_frag_read>
   1d85c:	f10d 030d 	add.w	r3, sp, #13
   1d860:	9300      	str	r3, [sp, #0]
   1d862:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1d866:	2301      	movs	r3, #1
   1d868:	465a      	mov	r2, fp
   1d86a:	f7fc f9f5 	bl	19c58 <net_frag_read>
		if (!frag && offset == 0xffff) {
   1d86e:	b928      	cbnz	r0, 1d87c <net_ipv6_process_pkt+0x140>
   1d870:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   1d874:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d878:	429a      	cmp	r2, r3
   1d87a:	d073      	beq.n	1d964 <net_ipv6_process_pkt+0x228>
		length = length * 8 + 8;
   1d87c:	f89d 500d 	ldrb.w	r5, [sp, #13]
   1d880:	3501      	adds	r5, #1
   1d882:	00ed      	lsls	r5, r5, #3
   1d884:	b2ed      	uxtb	r5, r5
   1d886:	f88d 500d 	strb.w	r5, [sp, #13]
		switch (next) {
   1d88a:	b176      	cbz	r6, 1d8aa <net_ipv6_process_pkt+0x16e>
   1d88c:	2e3b      	cmp	r6, #59	; 0x3b
   1d88e:	d069      	beq.n	1d964 <net_ipv6_process_pkt+0x228>
			      offset - 1);
   1d890:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   1d894:	2201      	movs	r2, #1
   1d896:	3b01      	subs	r3, #1
   1d898:	2104      	movs	r1, #4
   1d89a:	4620      	mov	r0, r4
   1d89c:	f7fd fdfc 	bl	1b498 <net_icmpv6_send_error>
	net_stats.ip_errors.protoerr++;
   1d8a0:	4a53      	ldr	r2, [pc, #332]	; (1d9f0 <net_ipv6_process_pkt+0x2b4>)
   1d8a2:	6a13      	ldr	r3, [r2, #32]
   1d8a4:	3301      	adds	r3, #1
   1d8a6:	6213      	str	r3, [r2, #32]
   1d8a8:	e05c      	b.n	1d964 <net_ipv6_process_pkt+0x228>
			if (first_option != NET_IPV6_NEXTHDR_HBHO) {
   1d8aa:	f1b9 0f00 	cmp.w	r9, #0
   1d8ae:	d1ef      	bne.n	1d890 <net_ipv6_process_pkt+0x154>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_HBHO) {
   1d8b0:	2f00      	cmp	r7, #0
   1d8b2:	d1ed      	bne.n	1d890 <net_ipv6_process_pkt+0x154>
	if (len > total_len) {
   1d8b4:	f8da 3000 	ldr.w	r3, [sl]
   1d8b8:	42ab      	cmp	r3, r5
   1d8ba:	db53      	blt.n	1d964 <net_ipv6_process_pkt+0x228>
   1d8bc:	f10d 030e 	add.w	r3, sp, #14
   1d8c0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1d8c4:	9300      	str	r3, [sp, #0]
   1d8c6:	aa05      	add	r2, sp, #20
   1d8c8:	2301      	movs	r3, #1
   1d8ca:	f10d 070f 	add.w	r7, sp, #15
   1d8ce:	f7fc f9c3 	bl	19c58 <net_frag_read>
   1d8d2:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1d8d6:	9700      	str	r7, [sp, #0]
   1d8d8:	2301      	movs	r3, #1
   1d8da:	aa05      	add	r2, sp, #20
		total_len += length;
   1d8dc:	b2ad      	uxth	r5, r5
   1d8de:	f7fc f9bb 	bl	19c58 <net_frag_read>
	if (!frag && loc == 0xffff) {
   1d8e2:	2800      	cmp	r0, #0
   1d8e4:	d156      	bne.n	1d994 <net_ipv6_process_pkt+0x258>
   1d8e6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1d8ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d8ee:	429a      	cmp	r2, r3
   1d8f0:	d038      	beq.n	1d964 <net_ipv6_process_pkt+0x228>
   1d8f2:	2602      	movs	r6, #2
	if (length != len) {
   1d8f4:	42b5      	cmp	r5, r6
   1d8f6:	d135      	bne.n	1d964 <net_ipv6_process_pkt+0x228>
	*pos += length;
   1d8f8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		next = next_hdr;
   1d8fc:	f89d 600c 	ldrb.w	r6, [sp, #12]
		total_len += length;
   1d900:	44a8      	add	r8, r5
	*pos += length;
   1d902:	441d      	add	r5, r3
		total_len += length;
   1d904:	fa1f f888 	uxth.w	r8, r8
	*pos += length;
   1d908:	f8ad 5010 	strh.w	r5, [sp, #16]
			ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_HBHO;
   1d90c:	2701      	movs	r7, #1
   1d90e:	e777      	b.n	1d800 <net_ipv6_process_pkt+0xc4>
			loc--;
   1d910:	f8bd 3014 	ldrh.w	r3, [sp, #20]
			length++;
   1d914:	3601      	adds	r6, #1
   1d916:	b2b6      	uxth	r6, r6
			loc--;
   1d918:	3b01      	subs	r3, #1
		if (length >= len) {
   1d91a:	42b5      	cmp	r5, r6
			loc += opt_len;
   1d91c:	f8ad 3014 	strh.w	r3, [sp, #20]
		if (length >= len) {
   1d920:	d9e8      	bls.n	1d8f4 <net_ipv6_process_pkt+0x1b8>
   1d922:	f10d 030e 	add.w	r3, sp, #14
   1d926:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1d92a:	9300      	str	r3, [sp, #0]
   1d92c:	aa05      	add	r2, sp, #20
   1d92e:	2301      	movs	r3, #1
   1d930:	f7fc f992 	bl	19c58 <net_frag_read>
   1d934:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1d938:	9700      	str	r7, [sp, #0]
   1d93a:	2301      	movs	r3, #1
   1d93c:	aa05      	add	r2, sp, #20
   1d93e:	f7fc f98b 	bl	19c58 <net_frag_read>
		if (!frag && loc == 0xffff) {
   1d942:	b178      	cbz	r0, 1d964 <net_ipv6_process_pkt+0x228>
	while (frag && (length < len)) {
   1d944:	42b5      	cmp	r5, r6
   1d946:	d9d5      	bls.n	1d8f4 <net_ipv6_process_pkt+0x1b8>
		switch (opt_type) {
   1d948:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1d94c:	2b00      	cmp	r3, #0
   1d94e:	d0df      	beq.n	1d910 <net_ipv6_process_pkt+0x1d4>
   1d950:	2b01      	cmp	r3, #1
   1d952:	d009      	beq.n	1d968 <net_ipv6_process_pkt+0x22c>
	switch (opt_type & 0xc0) {
   1d954:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d958:	2b80      	cmp	r3, #128	; 0x80
   1d95a:	d014      	beq.n	1d986 <net_ipv6_process_pkt+0x24a>
   1d95c:	2bc0      	cmp	r3, #192	; 0xc0
   1d95e:	d00d      	beq.n	1d97c <net_ipv6_process_pkt+0x240>
   1d960:	2b40      	cmp	r3, #64	; 0x40
   1d962:	d11e      	bne.n	1d9a2 <net_ipv6_process_pkt+0x266>
	return NET_DROP;
   1d964:	2002      	movs	r0, #2
   1d966:	e76a      	b.n	1d83e <net_ipv6_process_pkt+0x102>
			length += opt_len + 2;
   1d968:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1d96c:	1c9a      	adds	r2, r3, #2
   1d96e:	4416      	add	r6, r2
			loc += opt_len + 2;
   1d970:	f8bd 2014 	ldrh.w	r2, [sp, #20]
			length += opt_len + 2;
   1d974:	b2b6      	uxth	r6, r6
			loc += opt_len + 2;
   1d976:	3202      	adds	r2, #2
			loc += opt_len;
   1d978:	4413      	add	r3, r2
   1d97a:	e7ce      	b.n	1d91a <net_ipv6_process_pkt+0x1de>
	return pkt->frags->data;
   1d97c:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   1d97e:	689b      	ldr	r3, [r3, #8]
   1d980:	7e1b      	ldrb	r3, [r3, #24]
   1d982:	2bff      	cmp	r3, #255	; 0xff
   1d984:	d0ee      	beq.n	1d964 <net_ipv6_process_pkt+0x228>
		net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   1d986:	4633      	mov	r3, r6
   1d988:	2202      	movs	r2, #2
   1d98a:	2104      	movs	r1, #4
   1d98c:	4620      	mov	r0, r4
   1d98e:	f7fd fd83 	bl	1b498 <net_icmpv6_send_error>
   1d992:	e7e7      	b.n	1d964 <net_ipv6_process_pkt+0x228>
	if (!frag && loc == 0xffff) {
   1d994:	2602      	movs	r6, #2
   1d996:	e7d5      	b.n	1d944 <net_ipv6_process_pkt+0x208>
		return net_conn_input(IPPROTO_UDP, pkt);
   1d998:	4621      	mov	r1, r4
   1d99a:	2011      	movs	r0, #17
   1d99c:	f001 f8e8 	bl	1eb70 <net_conn_input>
   1d9a0:	e74d      	b.n	1d83e <net_ipv6_process_pkt+0x102>
			length += opt_len + 2;
   1d9a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1d9a6:	1c9a      	adds	r2, r3, #2
   1d9a8:	4416      	add	r6, r2
   1d9aa:	b2b6      	uxth	r6, r6
			loc += opt_len;
   1d9ac:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1d9b0:	e7e2      	b.n	1d978 <net_ipv6_process_pkt+0x23c>
		found = net_route_get_info(net_pkt_iface(pkt),
   1d9b2:	ab05      	add	r3, sp, #20
   1d9b4:	aa04      	add	r2, sp, #16
   1d9b6:	4631      	mov	r1, r6
   1d9b8:	6960      	ldr	r0, [r4, #20]
   1d9ba:	f000 fa57 	bl	1de6c <net_route_get_info>
	if (found) {
   1d9be:	2800      	cmp	r0, #0
   1d9c0:	f43f aed0 	beq.w	1d764 <net_ipv6_process_pkt+0x28>
		if (route) {
   1d9c4:	9b04      	ldr	r3, [sp, #16]
   1d9c6:	b133      	cbz	r3, 1d9d6 <net_ipv6_process_pkt+0x29a>
			net_pkt_set_iface(pkt, route->iface);
   1d9c8:	68db      	ldr	r3, [r3, #12]
	pkt->iface = iface;
   1d9ca:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1d9cc:	7d5b      	ldrb	r3, [r3, #21]
   1d9ce:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1d9d2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
		ret = net_route_packet(pkt, nexthop);
   1d9d6:	9905      	ldr	r1, [sp, #20]
   1d9d8:	4620      	mov	r0, r4
   1d9da:	f000 fa69 	bl	1deb0 <net_route_packet>
		if (ret < 0) {
   1d9de:	2800      	cmp	r0, #0
   1d9e0:	f6ff aec0 	blt.w	1d764 <net_ipv6_process_pkt+0x28>
			return NET_OK;
   1d9e4:	2000      	movs	r0, #0
   1d9e6:	e72a      	b.n	1d83e <net_ipv6_process_pkt+0x102>
   1d9e8:	20004cec 	.word	0x20004cec
   1d9ec:	20004cf0 	.word	0x20004cf0
   1d9f0:	20004cf4 	.word	0x20004cf4

0001d9f4 <net_ipv6_init>:

void net_ipv6_init(void)
{
   1d9f4:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_IPV6_NBR_CACHE)
	net_icmpv6_register_handler(&ns_input_handler);
   1d9f6:	4807      	ldr	r0, [pc, #28]	; (1da14 <net_ipv6_init+0x20>)
   1d9f8:	f7fd fa20 	bl	1ae3c <net_icmpv6_register_handler>
	net_icmpv6_register_handler(&na_input_handler);
   1d9fc:	4806      	ldr	r0, [pc, #24]	; (1da18 <net_ipv6_init+0x24>)
   1d9fe:	f7fd fa1d 	bl	1ae3c <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_ND)
	net_icmpv6_register_handler(&ra_input_handler);
   1da02:	4806      	ldr	r0, [pc, #24]	; (1da1c <net_ipv6_init+0x28>)
   1da04:	f7fd fa1a 	bl	1ae3c <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_MLD)
	net_icmpv6_register_handler(&mld_query_input_handler);
   1da08:	4805      	ldr	r0, [pc, #20]	; (1da20 <net_ipv6_init+0x2c>)
#endif
}
   1da0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	net_icmpv6_register_handler(&mld_query_input_handler);
   1da0e:	f7fd ba15 	b.w	1ae3c <net_icmpv6_register_handler>
   1da12:	bf00      	nop
   1da14:	2000e6b4 	.word	0x2000e6b4
   1da18:	2000e29c 	.word	0x2000e29c
   1da1c:	2000e6c0 	.word	0x2000e6c0
   1da20:	2000e290 	.word	0x2000e290

0001da24 <mgmt_thread>:
			  K_THREAD_STACK_SIZEOF(mgmt_stack));
#endif
}

static void mgmt_thread(void)
{
   1da24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!events[out_event].event) {
   1da28:	f8df 9110 	ldr.w	r9, [pc, #272]	; 1db3c <mgmt_thread+0x118>
   1da2c:	464f      	mov	r7, r9
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1da2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1da32:	483e      	ldr	r0, [pc, #248]	; (1db2c <mgmt_thread+0x108>)
   1da34:	f003 f8ae 	bl	20b94 <_impl_k_sem_take>
   1da38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1da3c:	483c      	ldr	r0, [pc, #240]	; (1db30 <mgmt_thread+0x10c>)
   1da3e:	f003 f8a9 	bl	20b94 <_impl_k_sem_take>
   1da42:	4a3c      	ldr	r2, [pc, #240]	; (1db34 <mgmt_thread+0x110>)
   1da44:	8815      	ldrh	r5, [r2, #0]
   1da46:	f859 4035 	ldr.w	r4, [r9, r5, lsl #3]
   1da4a:	b964      	cbnz	r4, 1da66 <mgmt_thread+0x42>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1da4c:	4838      	ldr	r0, [pc, #224]	; (1db30 <mgmt_thread+0x10c>)
   1da4e:	f003 f841 	bl	20ad4 <_impl_k_sem_give>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1da52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1da56:	4621      	mov	r1, r4
   1da58:	4834      	ldr	r0, [pc, #208]	; (1db2c <mgmt_thread+0x108>)
   1da5a:	f003 f831 	bl	20ac0 <_impl_k_sem_init>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1da5e:	4834      	ldr	r0, [pc, #208]	; (1db30 <mgmt_thread+0x10c>)
   1da60:	f003 f838 	bl	20ad4 <_impl_k_sem_give>
				k_sem_count_get(&network_event));

			k_sem_init(&network_event, 0, UINT_MAX);
			k_sem_give(&net_mgmt_lock);

			continue;
   1da64:	e7e3      	b.n	1da2e <mgmt_thread+0xa>
	out_event++;
   1da66:	1c6b      	adds	r3, r5, #1
   1da68:	4e33      	ldr	r6, [pc, #204]	; (1db38 <mgmt_thread+0x114>)
   1da6a:	b29b      	uxth	r3, r3
	if (out_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   1da6c:	2b02      	cmp	r3, #2
   1da6e:	6834      	ldr	r4, [r6, #0]
		out_event = 0;
   1da70:	bf08      	it	eq
   1da72:	2300      	moveq	r3, #0
   1da74:	8013      	strh	r3, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   1da76:	b9c4      	cbnz	r4, 1daaa <mgmt_thread+0x86>
	mgmt_event->event = 0;
   1da78:	2300      	movs	r3, #0
   1da7a:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
	mgmt_event->iface = NULL;
   1da7e:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
   1da82:	482b      	ldr	r0, [pc, #172]	; (1db30 <mgmt_thread+0x10c>)
   1da84:	606b      	str	r3, [r5, #4]
   1da86:	f003 f825 	bl	20ad4 <_impl_k_sem_give>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1da8a:	f002 ffa7 	bl	209dc <_impl_k_yield>
   1da8e:	e7ce      	b.n	1da2e <mgmt_thread+0xa>
		prev_node->next = node->next;
   1da90:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   1da92:	6872      	ldr	r2, [r6, #4]
   1da94:	4294      	cmp	r4, r2
			list->tail = prev_node;
   1da96:	bf08      	it	eq
   1da98:	6073      	streq	r3, [r6, #4]
   1da9a:	e038      	b.n	1db0e <mgmt_thread+0xea>
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
   1da9c:	6863      	ldr	r3, [r4, #4]
   1da9e:	f8db 2004 	ldr.w	r2, [fp, #4]
   1daa2:	4620      	mov	r0, r4
   1daa4:	4798      	blx	r3
			prev = &cb->node;
   1daa6:	4623      	mov	r3, r4
   1daa8:	e038      	b.n	1db1c <mgmt_thread+0xf8>
	return node->next;
   1daaa:	2300      	movs	r3, #0
   1daac:	f8d4 8000 	ldr.w	r8, [r4]
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
   1dab0:	eb07 0bc5 	add.w	fp, r7, r5, lsl #3
	node->next = NULL;
   1dab4:	469a      	mov	sl, r3
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
   1dab6:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   1daba:	68a2      	ldr	r2, [r4, #8]
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
   1dabc:	ea81 0002 	eor.w	r0, r1, r2
   1dac0:	f010 5f40 	tst.w	r0, #805306368	; 0x30000000
   1dac4:	d12a      	bne.n	1db1c <mgmt_thread+0xf8>
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) ==
   1dac6:	f3c0 400a 	ubfx	r0, r0, #16, #11
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   1daca:	bb38      	cbnz	r0, 1db1c <mgmt_thread+0xf8>
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   1dacc:	b288      	uxth	r0, r1
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   1dace:	b130      	cbz	r0, 1dade <mgmt_thread+0xba>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   1dad0:	fa1f fe82 	uxth.w	lr, r2
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   1dad4:	f1be 0f00 	cmp.w	lr, #0
   1dad8:	d001      	beq.n	1dade <mgmt_thread+0xba>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   1dada:	4202      	tst	r2, r0
   1dadc:	d01e      	beq.n	1db1c <mgmt_thread+0xf8>
		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
   1dade:	0112      	lsls	r2, r2, #4
   1dae0:	d5dc      	bpl.n	1da9c <mgmt_thread+0x78>
			struct mgmt_event_wait *sync_data =
   1dae2:	6860      	ldr	r0, [r4, #4]
			if (sync_data->iface &&
   1dae4:	f8d0 e018 	ldr.w	lr, [r0, #24]
   1dae8:	f1be 0f00 	cmp.w	lr, #0
   1daec:	d003      	beq.n	1daf6 <mgmt_thread+0xd2>
   1daee:	f8db 2004 	ldr.w	r2, [fp, #4]
   1daf2:	4596      	cmp	lr, r2
   1daf4:	d112      	bne.n	1db1c <mgmt_thread+0xf8>
			cb->raised_event = mgmt_event->event;
   1daf6:	60a1      	str	r1, [r4, #8]
			sync_data->iface = mgmt_event->iface;
   1daf8:	f8db 2004 	ldr.w	r2, [fp, #4]
   1dafc:	6182      	str	r2, [r0, #24]
   1dafe:	6822      	ldr	r2, [r4, #0]
	if (!prev_node) {
   1db00:	2b00      	cmp	r3, #0
   1db02:	d1c5      	bne.n	1da90 <mgmt_thread+0x6c>
		if (list->tail == node) {
   1db04:	6871      	ldr	r1, [r6, #4]
		list->head = node->next;
   1db06:	6032      	str	r2, [r6, #0]
		if (list->tail == node) {
   1db08:	428c      	cmp	r4, r1
   1db0a:	d100      	bne.n	1db0e <mgmt_thread+0xea>
			list->tail = list->head;
   1db0c:	6072      	str	r2, [r6, #4]
	node->next = NULL;
   1db0e:	f8c4 a000 	str.w	sl, [r4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1db12:	6860      	ldr	r0, [r4, #4]
   1db14:	9301      	str	r3, [sp, #4]
   1db16:	f002 ffdd 	bl	20ad4 <_impl_k_sem_give>
   1db1a:	9b01      	ldr	r3, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   1db1c:	f1b8 0f00 	cmp.w	r8, #0
   1db20:	d0aa      	beq.n	1da78 <mgmt_thread+0x54>
   1db22:	4644      	mov	r4, r8
   1db24:	f8d8 8000 	ldr.w	r8, [r8]
   1db28:	e7c5      	b.n	1dab6 <mgmt_thread+0x92>
   1db2a:	bf00      	nop
   1db2c:	2000eca4 	.word	0x2000eca4
   1db30:	2000ec8c 	.word	0x2000ec8c
   1db34:	20003230 	.word	0x20003230
   1db38:	200031a8 	.word	0x200031a8
   1db3c:	200031b0 	.word	0x200031b0

0001db40 <net_mgmt_add_event_callback>:

	return ret;
}

void net_mgmt_add_event_callback(struct net_mgmt_event_callback *cb)
{
   1db40:	b510      	push	{r4, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1db42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1db46:	4604      	mov	r4, r0
   1db48:	4809      	ldr	r0, [pc, #36]	; (1db70 <net_mgmt_add_event_callback+0x30>)
   1db4a:	f003 f823 	bl	20b94 <_impl_k_sem_take>
	node->next = list->head;
   1db4e:	4b09      	ldr	r3, [pc, #36]	; (1db74 <net_mgmt_add_event_callback+0x34>)
   1db50:	681a      	ldr	r2, [r3, #0]
   1db52:	6022      	str	r2, [r4, #0]
	if (!list->tail) {
   1db54:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1db56:	601c      	str	r4, [r3, #0]
	if (!list->tail) {
   1db58:	b902      	cbnz	r2, 1db5c <net_mgmt_add_event_callback+0x1c>
		list->tail = list->head;
   1db5a:	605c      	str	r4, [r3, #4]
	global_event_mask |= event_mask;
   1db5c:	4a06      	ldr	r2, [pc, #24]	; (1db78 <net_mgmt_add_event_callback+0x38>)
   1db5e:	68a3      	ldr	r3, [r4, #8]
   1db60:	6811      	ldr	r1, [r2, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1db62:	4803      	ldr	r0, [pc, #12]	; (1db70 <net_mgmt_add_event_callback+0x30>)
   1db64:	430b      	orrs	r3, r1
	sys_slist_prepend(&event_callbacks, &cb->node);

	mgmt_add_event_mask(cb->event_mask);

	k_sem_give(&net_mgmt_lock);
}
   1db66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	global_event_mask |= event_mask;
   1db6a:	6013      	str	r3, [r2, #0]
   1db6c:	f002 bfb2 	b.w	20ad4 <_impl_k_sem_give>
   1db70:	2000ec8c 	.word	0x2000ec8c
   1db74:	200031a8 	.word	0x200031a8
   1db78:	200031c0 	.word	0x200031c0

0001db7c <net_mgmt_event_notify_with_info>:
	k_sem_give(&net_mgmt_lock);
}

void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length)
{
   1db7c:	b538      	push	{r3, r4, r5, lr}
	return ((mgmt_event & global_event_mask) == mgmt_event);
   1db7e:	4b18      	ldr	r3, [pc, #96]	; (1dbe0 <net_mgmt_event_notify_with_info+0x64>)
   1db80:	681b      	ldr	r3, [r3, #0]
	if (mgmt_is_event_handled(mgmt_event)) {
   1db82:	ea30 0303 	bics.w	r3, r0, r3
{
   1db86:	4604      	mov	r4, r0
   1db88:	460d      	mov	r5, r1
	if (mgmt_is_event_handled(mgmt_event)) {
   1db8a:	d128      	bne.n	1dbde <net_mgmt_event_notify_with_info+0x62>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1db8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1db90:	4814      	ldr	r0, [pc, #80]	; (1dbe4 <net_mgmt_event_notify_with_info+0x68>)
   1db92:	f002 ffff 	bl	20b94 <_impl_k_sem_take>
	events[in_event].event = mgmt_event;
   1db96:	4a14      	ldr	r2, [pc, #80]	; (1dbe8 <net_mgmt_event_notify_with_info+0x6c>)
   1db98:	4914      	ldr	r1, [pc, #80]	; (1dbec <net_mgmt_event_notify_with_info+0x70>)
   1db9a:	8813      	ldrh	r3, [r2, #0]
	events[in_event].iface = iface;
   1db9c:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
	events[in_event].event = mgmt_event;
   1dba0:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
	in_event++;
   1dba4:	3301      	adds	r3, #1
   1dba6:	b29b      	uxth	r3, r3
	if (in_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   1dba8:	2b02      	cmp	r3, #2
		in_event = 0;
   1dbaa:	bf08      	it	eq
   1dbac:	2300      	moveq	r3, #0
   1dbae:	8013      	strh	r3, [r2, #0]
	events[in_event].iface = iface;
   1dbb0:	6045      	str	r5, [r0, #4]
	if (in_event == out_event) {
   1dbb2:	8810      	ldrh	r0, [r2, #0]
   1dbb4:	4a0e      	ldr	r2, [pc, #56]	; (1dbf0 <net_mgmt_event_notify_with_info+0x74>)
   1dbb6:	8813      	ldrh	r3, [r2, #0]
   1dbb8:	4283      	cmp	r3, r0
   1dbba:	d108      	bne.n	1dbce <net_mgmt_event_notify_with_info+0x52>
		u16_t o_idx = out_event + 1;
   1dbbc:	3301      	adds	r3, #1
   1dbbe:	b29b      	uxth	r3, r3
			o_idx = 0;
   1dbc0:	2b02      	cmp	r3, #2
   1dbc2:	bf08      	it	eq
   1dbc4:	2300      	moveq	r3, #0
		if (events[o_idx].event) {
   1dbc6:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
   1dbca:	b101      	cbz	r1, 1dbce <net_mgmt_event_notify_with_info+0x52>
			out_event = o_idx;
   1dbcc:	8013      	strh	r3, [r2, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1dbce:	4805      	ldr	r0, [pc, #20]	; (1dbe4 <net_mgmt_event_notify_with_info+0x68>)
   1dbd0:	f002 ff80 	bl	20ad4 <_impl_k_sem_give>
   1dbd4:	4807      	ldr	r0, [pc, #28]	; (1dbf4 <net_mgmt_event_notify_with_info+0x78>)
			NET_MGMT_GET_COMMAND(mgmt_event));

		mgmt_push_event(mgmt_event, iface, info, length);
		k_sem_give(&network_event);
	}
}
   1dbd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1dbda:	f002 bf7b 	b.w	20ad4 <_impl_k_sem_give>
   1dbde:	bd38      	pop	{r3, r4, r5, pc}
   1dbe0:	200031c0 	.word	0x200031c0
   1dbe4:	2000ec8c 	.word	0x2000ec8c
   1dbe8:	200031c4 	.word	0x200031c4
   1dbec:	200031b0 	.word	0x200031b0
   1dbf0:	20003230 	.word	0x20003230
   1dbf4:	2000eca4 	.word	0x2000eca4

0001dbf8 <net_mgmt_event_init>:
	list->head = NULL;
   1dbf8:	4b10      	ldr	r3, [pc, #64]	; (1dc3c <net_mgmt_event_init+0x44>)
	global_event_mask = 0;

	in_event = 0;
	out_event = 0;

	memset(events, 0,
   1dbfa:	4811      	ldr	r0, [pc, #68]	; (1dc40 <net_mgmt_event_init+0x48>)
{
   1dbfc:	b510      	push	{r4, lr}
   1dbfe:	2400      	movs	r4, #0
   1dc00:	601c      	str	r4, [r3, #0]
	list->tail = NULL;
   1dc02:	605c      	str	r4, [r3, #4]
	global_event_mask = 0;
   1dc04:	4b0f      	ldr	r3, [pc, #60]	; (1dc44 <net_mgmt_event_init+0x4c>)
   1dc06:	601c      	str	r4, [r3, #0]
	in_event = 0;
   1dc08:	4b0f      	ldr	r3, [pc, #60]	; (1dc48 <net_mgmt_event_init+0x50>)
   1dc0a:	801c      	strh	r4, [r3, #0]
	out_event = 0;
   1dc0c:	4b0f      	ldr	r3, [pc, #60]	; (1dc4c <net_mgmt_event_init+0x54>)
{
   1dc0e:	b086      	sub	sp, #24
	memset(events, 0,
   1dc10:	4621      	mov	r1, r4
   1dc12:	2210      	movs	r2, #16
	out_event = 0;
   1dc14:	801c      	strh	r4, [r3, #0]
	memset(events, 0,
   1dc16:	f7e2 fdfd 	bl	814 <memset>

   1dc1a:	f06f 0308 	mvn.w	r3, #8
   1dc1e:	9303      	str	r3, [sp, #12]
   1dc20:	9405      	str	r4, [sp, #20]
   1dc22:	9404      	str	r4, [sp, #16]
   1dc24:	9402      	str	r4, [sp, #8]
   1dc26:	9401      	str	r4, [sp, #4]
   1dc28:	9400      	str	r4, [sp, #0]
   1dc2a:	4b09      	ldr	r3, [pc, #36]	; (1dc50 <net_mgmt_event_init+0x58>)
   1dc2c:	4909      	ldr	r1, [pc, #36]	; (1dc54 <net_mgmt_event_init+0x5c>)
   1dc2e:	480a      	ldr	r0, [pc, #40]	; (1dc58 <net_mgmt_event_init+0x60>)
   1dc30:	f44f 7200 	mov.w	r2, #512	; 0x200
   1dc34:	f003 f98a 	bl	20f4c <_impl_k_thread_create>
			K_PRIO_COOP(CONFIG_NET_MGMT_EVENT_THREAD_PRIO), 0, 0);

	NET_DBG("Net MGMT initialized: queue of %u entries, stack size of %u",
		CONFIG_NET_MGMT_EVENT_QUEUE_SIZE,
		CONFIG_NET_MGMT_EVENT_STACK_SIZE);
}
   1dc38:	b006      	add	sp, #24
   1dc3a:	bd10      	pop	{r4, pc}
   1dc3c:	200031a8 	.word	0x200031a8
   1dc40:	200031b0 	.word	0x200031b0
   1dc44:	200031c0 	.word	0x200031c0
   1dc48:	200031c4 	.word	0x200031c4
   1dc4c:	20003230 	.word	0x20003230
   1dc50:	0001da25 	.word	0x0001da25
   1dc54:	2000ca88 	.word	0x2000ca88
   1dc58:	200031c8 	.word	0x200031c8

0001dc5c <sys_slist_find_and_remove.constprop.6>:
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
   1dc5c:	b510      	push	{r4, lr}
   1dc5e:	4a0e      	ldr	r2, [pc, #56]	; (1dc98 <sys_slist_find_and_remove.constprop.6+0x3c>)
   1dc60:	6813      	ldr	r3, [r2, #0]
	sys_snode_t *prev = NULL;
   1dc62:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1dc64:	b90b      	cbnz	r3, 1dc6a <sys_slist_find_and_remove.constprop.6+0xe>
		}

		prev = test;
	}

	return false;
   1dc66:	4618      	mov	r0, r3
}
   1dc68:	bd10      	pop	{r4, pc}
		if (test == node) {
   1dc6a:	4283      	cmp	r3, r0
   1dc6c:	681c      	ldr	r4, [r3, #0]
   1dc6e:	d10f      	bne.n	1dc90 <sys_slist_find_and_remove.constprop.6+0x34>
	if (!prev_node) {
   1dc70:	b941      	cbnz	r1, 1dc84 <sys_slist_find_and_remove.constprop.6+0x28>
		if (list->tail == node) {
   1dc72:	6851      	ldr	r1, [r2, #4]
		list->head = node->next;
   1dc74:	6014      	str	r4, [r2, #0]
		if (list->tail == node) {
   1dc76:	428b      	cmp	r3, r1
   1dc78:	d100      	bne.n	1dc7c <sys_slist_find_and_remove.constprop.6+0x20>
			list->tail = list->head;
   1dc7a:	6054      	str	r4, [r2, #4]
	node->next = NULL;
   1dc7c:	2200      	movs	r2, #0
   1dc7e:	601a      	str	r2, [r3, #0]
			return true;
   1dc80:	2001      	movs	r0, #1
   1dc82:	bd10      	pop	{r4, pc}
		if (list->tail == node) {
   1dc84:	6850      	ldr	r0, [r2, #4]
		prev_node->next = node->next;
   1dc86:	600c      	str	r4, [r1, #0]
		if (list->tail == node) {
   1dc88:	4283      	cmp	r3, r0
			list->tail = prev_node;
   1dc8a:	bf08      	it	eq
   1dc8c:	6051      	streq	r1, [r2, #4]
   1dc8e:	e7f5      	b.n	1dc7c <sys_slist_find_and_remove.constprop.6+0x20>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1dc90:	4619      	mov	r1, r3
   1dc92:	4623      	mov	r3, r4
   1dc94:	e7e6      	b.n	1dc64 <sys_slist_find_and_remove.constprop.6+0x8>
   1dc96:	bf00      	nop
   1dc98:	20003234 	.word	0x20003234

0001dc9c <net_route_entry_remove>:
   1dc9c:	4770      	bx	lr
	...

0001dca0 <net_route_get_nbr>:
	NET_ASSERT(route);

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref) {
   1dca0:	4909      	ldr	r1, [pc, #36]	; (1dcc8 <net_route_get_nbr+0x28>)
{
   1dca2:	b530      	push	{r4, r5, lr}
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   1dca4:	2200      	movs	r2, #0
   1dca6:	2438      	movs	r4, #56	; 0x38
   1dca8:	fb04 f302 	mul.w	r3, r4, r2
		if (!nbr->ref) {
   1dcac:	5c5d      	ldrb	r5, [r3, r1]
   1dcae:	b11d      	cbz	r5, 1dcb8 <net_route_get_nbr+0x18>
   1dcb0:	440b      	add	r3, r1
			continue;
		}

		if (nbr->data == (u8_t *)route) {
   1dcb2:	68dd      	ldr	r5, [r3, #12]
   1dcb4:	4285      	cmp	r5, r0
   1dcb6:	d004      	beq.n	1dcc2 <net_route_get_nbr+0x22>
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   1dcb8:	3201      	adds	r2, #1
   1dcba:	2a08      	cmp	r2, #8
   1dcbc:	d1f4      	bne.n	1dca8 <net_route_get_nbr+0x8>

			return nbr;
		}
	}

	return NULL;
   1dcbe:	2000      	movs	r0, #0
   1dcc0:	bd30      	pop	{r4, r5, pc}
   1dcc2:	4618      	mov	r0, r3
}
   1dcc4:	bd30      	pop	{r4, r5, pc}
   1dcc6:	bf00      	nop
   1dcc8:	2000e6cc 	.word	0x2000e6cc

0001dccc <net_route_lookup>:
	sys_slist_prepend(&routes, &route->node);
}

struct net_route_entry *net_route_lookup(struct net_if *iface,
					 struct in6_addr *dst)
{
   1dccc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (route->prefix_len >= longest_match &&
		    net_is_ipv6_prefix((u8_t *)dst,
				       (u8_t *)&route->addr,
				       route->prefix_len)) {
			found = route;
			longest_match = route->prefix_len;
   1dcd0:	2500      	movs	r5, #0
		if (!nbr->ref) {
   1dcd2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1dd7c <net_route_lookup+0xb0>
{
   1dcd6:	9000      	str	r0, [sp, #0]
   1dcd8:	460b      	mov	r3, r1
	u8_t longest_match = 0;
   1dcda:	46a8      	mov	r8, r5
	struct net_route_entry *route, *found = NULL;
   1dcdc:	462e      	mov	r6, r5
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   1dcde:	f018 0f80 	tst.w	r8, #128	; 0x80
   1dce2:	d13a      	bne.n	1dd5a <net_route_lookup+0x8e>
		if (!nbr->ref) {
   1dce4:	f815 2009 	ldrb.w	r2, [r5, r9]
   1dce8:	b39a      	cbz	r2, 1dd52 <net_route_lookup+0x86>
		if (iface && nbr->iface != iface) {
   1dcea:	9a00      	ldr	r2, [sp, #0]
   1dcec:	b12a      	cbz	r2, 1dcfa <net_route_lookup+0x2e>
   1dcee:	eb09 0205 	add.w	r2, r9, r5
   1dcf2:	9900      	ldr	r1, [sp, #0]
   1dcf4:	6892      	ldr	r2, [r2, #8]
   1dcf6:	4291      	cmp	r1, r2
   1dcf8:	d12b      	bne.n	1dd52 <net_route_lookup+0x86>
   1dcfa:	eb09 0205 	add.w	r2, r9, r5
   1dcfe:	68d7      	ldr	r7, [r2, #12]
		if (route->prefix_len >= longest_match &&
   1dd00:	f897 4020 	ldrb.w	r4, [r7, #32]
   1dd04:	4544      	cmp	r4, r8
   1dd06:	d324      	bcc.n	1dd52 <net_route_lookup+0x86>
	if (length > 128) {
   1dd08:	2c80      	cmp	r4, #128	; 0x80
   1dd0a:	d822      	bhi.n	1dd52 <net_route_lookup+0x86>
				       (u8_t *)&route->addr,
   1dd0c:	f107 0b10 	add.w	fp, r7, #16
	if (memcmp(addr1, addr2, bytes)) {
   1dd10:	ea4f 0ad4 	mov.w	sl, r4, lsr #3
   1dd14:	4618      	mov	r0, r3
   1dd16:	4652      	mov	r2, sl
   1dd18:	4659      	mov	r1, fp
   1dd1a:	9301      	str	r3, [sp, #4]
   1dd1c:	f7e2 fd21 	bl	762 <memcmp>
   1dd20:	9b01      	ldr	r3, [sp, #4]
   1dd22:	b9b0      	cbnz	r0, 1dd52 <net_route_lookup+0x86>
	u8_t bits = 128 - length;
   1dd24:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	if (!remain) {
   1dd28:	f014 0407 	ands.w	r4, r4, #7
   1dd2c:	d00e      	beq.n	1dd4c <net_route_lookup+0x80>
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1dd2e:	f81b 200a 	ldrb.w	r2, [fp, sl]
   1dd32:	f813 100a 	ldrb.w	r1, [r3, sl]
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1dd36:	20ff      	movs	r0, #255	; 0xff
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1dd38:	4051      	eors	r1, r2
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1dd3a:	f1c4 0208 	rsb	r2, r4, #8
   1dd3e:	fa00 f202 	lsl.w	r2, r0, r2
   1dd42:	4042      	eors	r2, r0
   1dd44:	fa02 f404 	lsl.w	r4, r2, r4
		if (route->prefix_len >= longest_match &&
   1dd48:	4221      	tst	r1, r4
   1dd4a:	d102      	bne.n	1dd52 <net_route_lookup+0x86>
			longest_match = route->prefix_len;
   1dd4c:	f897 8020 	ldrb.w	r8, [r7, #32]
   1dd50:	463e      	mov	r6, r7
   1dd52:	3538      	adds	r5, #56	; 0x38
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   1dd54:	f5b5 7fe0 	cmp.w	r5, #448	; 0x1c0
   1dd58:	d1c1      	bne.n	1dcde <net_route_lookup+0x12>
		}
	}

	if (found) {
   1dd5a:	b14e      	cbz	r6, 1dd70 <net_route_lookup+0xa4>
	sys_slist_find_and_remove(&routes, &route->node);
   1dd5c:	4630      	mov	r0, r6
   1dd5e:	f7ff ff7d 	bl	1dc5c <sys_slist_find_and_remove.constprop.6>
	node->next = list->head;
   1dd62:	4b05      	ldr	r3, [pc, #20]	; (1dd78 <net_route_lookup+0xac>)
   1dd64:	681a      	ldr	r2, [r3, #0]
   1dd66:	6032      	str	r2, [r6, #0]
	if (!list->tail) {
   1dd68:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1dd6a:	601e      	str	r6, [r3, #0]
	if (!list->tail) {
   1dd6c:	b902      	cbnz	r2, 1dd70 <net_route_lookup+0xa4>
		list->tail = list->head;
   1dd6e:	605e      	str	r6, [r3, #4]

		update_route_access(found);
	}

	return found;
}
   1dd70:	4630      	mov	r0, r6
   1dd72:	b003      	add	sp, #12
   1dd74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd78:	20003234 	.word	0x20003234
   1dd7c:	2000e6cc 	.word	0x2000e6cc

0001dd80 <net_route_del>:

	return route;
}

int net_route_del(struct net_route_entry *route)
{
   1dd80:	b538      	push	{r3, r4, r5, lr}
	struct net_route_nexthop *nexthop_route;
#if defined(CONFIG_NET_MGMT_EVENT_INFO)
       struct net_event_ipv6_route info;
#endif

	if (!route) {
   1dd82:	4604      	mov	r4, r0
   1dd84:	b1d0      	cbz	r0, 1ddbc <net_route_del+0x3c>
   1dd86:	2300      	movs	r3, #0
   1dd88:	68c1      	ldr	r1, [r0, #12]
   1dd8a:	480f      	ldr	r0, [pc, #60]	; (1ddc8 <net_route_del+0x48>)
   1dd8c:	461a      	mov	r2, r3
   1dd8e:	f7ff fef5 	bl	1db7c <net_mgmt_event_notify_with_info>
					sizeof(struct net_event_ipv6_route));
#else
	net_mgmt_event_notify(NET_EVENT_IPV6_ROUTE_DEL, route->iface);
#endif

	sys_slist_find_and_remove(&routes, &route->node);
   1dd92:	4620      	mov	r0, r4
   1dd94:	f7ff ff62 	bl	1dc5c <sys_slist_find_and_remove.constprop.6>

	nbr = net_route_get_nbr(route);
   1dd98:	4620      	mov	r0, r4
   1dd9a:	f7ff ff81 	bl	1dca0 <net_route_get_nbr>
	if (!nbr) {
   1dd9e:	4605      	mov	r5, r0
   1dda0:	b178      	cbz	r0, 1ddc2 <net_route_del+0x42>
   1dda2:	6864      	ldr	r4, [r4, #4]
		return -ENOENT;
	}

	net_route_info("Deleted", route, &route->addr);

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   1dda4:	b924      	cbnz	r4, 1ddb0 <net_route_del+0x30>
	net_nbr_unref(nbr);
   1dda6:	4628      	mov	r0, r5
   1dda8:	f7fd fda2 	bl	1b8f0 <net_nbr_unref>
		nbr_nexthop_put(nexthop_route->nbr);
	}

	nbr_free(nbr);

	return 0;
   1ddac:	2000      	movs	r0, #0
   1ddae:	bd38      	pop	{r3, r4, r5, pc}
		if (!nexthop_route->nbr) {
   1ddb0:	6860      	ldr	r0, [r4, #4]
   1ddb2:	b108      	cbz	r0, 1ddb8 <net_route_del+0x38>
	net_nbr_unref(nbr);
   1ddb4:	f7fd fd9c 	bl	1b8f0 <net_nbr_unref>
	return node->next;
   1ddb8:	6824      	ldr	r4, [r4, #0]
   1ddba:	e7f3      	b.n	1dda4 <net_route_del+0x24>
		return -EINVAL;
   1ddbc:	f06f 0015 	mvn.w	r0, #21
   1ddc0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOENT;
   1ddc2:	f06f 0001 	mvn.w	r0, #1
}
   1ddc6:	bd38      	pop	{r3, r4, r5, pc}
   1ddc8:	f060000c 	.word	0xf060000c

0001ddcc <net_route_del_by_nexthop>:

int net_route_del_by_nexthop(struct net_if *iface, struct in6_addr *nexthop)
{
   1ddcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i, ret;

	NET_ASSERT(iface);
	NET_ASSERT(nexthop);

	nbr_nexthop = net_ipv6_nbr_lookup(iface, nexthop);
   1ddce:	f7fe fad4 	bl	1c37a <net_ipv6_nbr_lookup>
   1ddd2:	2400      	movs	r4, #0
   1ddd4:	4607      	mov	r7, r0
	int count = 0, status = 0;
   1ddd6:	4626      	mov	r6, r4
   1ddd8:	4625      	mov	r5, r4
   1ddda:	4b0e      	ldr	r3, [pc, #56]	; (1de14 <net_route_del_by_nexthop+0x48>)
   1dddc:	4423      	add	r3, r4
   1ddde:	68d8      	ldr	r0, [r3, #12]

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
		struct net_nbr *nbr = get_nbr(i);
		struct net_route_entry *route = net_route_data(nbr);

		if (!route) {
   1dde0:	b140      	cbz	r0, 1ddf4 <net_route_del_by_nexthop+0x28>
   1dde2:	6843      	ldr	r3, [r0, #4]
			continue;
		}

		SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route,
   1dde4:	b133      	cbz	r3, 1ddf4 <net_route_del_by_nexthop+0x28>
					     node) {
			if (nexthop_route->nbr == nbr_nexthop) {
   1dde6:	685a      	ldr	r2, [r3, #4]
   1dde8:	4297      	cmp	r7, r2
   1ddea:	d10c      	bne.n	1de06 <net_route_del_by_nexthop+0x3a>
				/* This route contains this nexthop */
				ret = net_route_del(route);
   1ddec:	f7ff ffc8 	bl	1dd80 <net_route_del>
				if (!ret) {
   1ddf0:	b968      	cbnz	r0, 1de0e <net_route_del_by_nexthop+0x42>
					count++;
   1ddf2:	3501      	adds	r5, #1
   1ddf4:	3438      	adds	r4, #56	; 0x38
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   1ddf6:	f5b4 7fe0 	cmp.w	r4, #448	; 0x1c0
   1ddfa:	d1ee      	bne.n	1ddda <net_route_del_by_nexthop+0xe>
				break;
			}
		}
	}

	if (count) {
   1ddfc:	b90d      	cbnz	r5, 1de02 <net_route_del_by_nexthop+0x36>
   1ddfe:	ea06 75e6 	and.w	r5, r6, r6, asr #31
	} else if (status < 0) {
		return status;
	}

	return 0;
}
   1de02:	4628      	mov	r0, r5
   1de04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1de06:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route,
   1de08:	2b00      	cmp	r3, #0
   1de0a:	d1eb      	bne.n	1dde4 <net_route_del_by_nexthop+0x18>
   1de0c:	e7f2      	b.n	1ddf4 <net_route_del_by_nexthop+0x28>
   1de0e:	4606      	mov	r6, r0
   1de10:	e7f0      	b.n	1ddf4 <net_route_del_by_nexthop+0x28>
   1de12:	bf00      	nop
   1de14:	2000e6cc 	.word	0x2000e6cc

0001de18 <net_route_get_nexthop>:
struct in6_addr *net_route_get_nexthop(struct net_route_entry *route)
{
	struct net_route_nexthop *nexthop_route;
	struct net_ipv6_nbr_data *ipv6_nbr_data;

	if (!route) {
   1de18:	b170      	cbz	r0, 1de38 <net_route_get_nexthop+0x20>
   1de1a:	6843      	ldr	r3, [r0, #4]
   1de1c:	461a      	mov	r2, r3
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   1de1e:	b153      	cbz	r3, 1de36 <net_route_get_nexthop+0x1e>
		struct in6_addr *addr;

		NET_ASSERT(nexthop_route->nbr->idx != NET_NBR_LLADDR_UNKNOWN);

		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   1de20:	685b      	ldr	r3, [r3, #4]
   1de22:	7859      	ldrb	r1, [r3, #1]
   1de24:	29ff      	cmp	r1, #255	; 0xff
   1de26:	d003      	beq.n	1de30 <net_route_get_nexthop+0x18>
   1de28:	68d8      	ldr	r0, [r3, #12]
			continue;
		}

		ipv6_nbr_data = net_ipv6_nbr_data(nexthop_route->nbr);
		if (ipv6_nbr_data) {
   1de2a:	b108      	cbz	r0, 1de30 <net_route_get_nexthop+0x18>
			addr = &ipv6_nbr_data->addr;
   1de2c:	3004      	adds	r0, #4
			NET_ASSERT(addr);

			return addr;
   1de2e:	4770      	bx	lr
   1de30:	6813      	ldr	r3, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   1de32:	2b00      	cmp	r3, #0
   1de34:	d1f2      	bne.n	1de1c <net_route_get_nexthop+0x4>
		return NULL;
   1de36:	2000      	movs	r0, #0
			NET_ERR("could not get neighbor data from next hop");
		}
	}

	return NULL;
}
   1de38:	4770      	bx	lr
	...

0001de3c <net_route_foreach>:

int net_route_foreach(net_route_cb_t cb, void *user_data)
{
   1de3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1de40:	2400      	movs	r4, #0
   1de42:	f8df 8024 	ldr.w	r8, [pc, #36]	; 1de68 <net_route_foreach+0x2c>
   1de46:	4606      	mov	r6, r0
   1de48:	460f      	mov	r7, r1
	int i, ret = 0;
   1de4a:	4625      	mov	r5, r4
   1de4c:	eb08 0304 	add.w	r3, r8, r4
   1de50:	68d8      	ldr	r0, [r3, #12]
		if (!nbr) {
			continue;
		}

		route = net_route_data(nbr);
		if (!route) {
   1de52:	b110      	cbz	r0, 1de5a <net_route_foreach+0x1e>
			continue;
		}

		cb(route, user_data);
   1de54:	4639      	mov	r1, r7
   1de56:	47b0      	blx	r6

		ret++;
   1de58:	3501      	adds	r5, #1
   1de5a:	3438      	adds	r4, #56	; 0x38
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   1de5c:	f5b4 7fe0 	cmp.w	r4, #448	; 0x1c0
   1de60:	d1f4      	bne.n	1de4c <net_route_foreach+0x10>
	}

	return ret;
}
   1de62:	4628      	mov	r0, r5
   1de64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1de68:	2000e6cc 	.word	0x2000e6cc

0001de6c <net_route_get_info>:

bool net_route_get_info(struct net_if *iface,
			struct in6_addr *dst,
			struct net_route_entry **route,
			struct in6_addr **nexthop)
{
   1de6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1de6e:	4607      	mov	r7, r0
   1de70:	460d      	mov	r5, r1
   1de72:	4616      	mov	r6, r2
   1de74:	461c      	mov	r4, r3
	struct net_if_router *router;

	/* Search in neighbor table first, if not search in routing table. */
	if (net_ipv6_nbr_lookup(iface, dst)) {
   1de76:	f7fe fa80 	bl	1c37a <net_ipv6_nbr_lookup>
   1de7a:	b120      	cbz	r0, 1de86 <net_route_get_info+0x1a>
		/* Found nexthop, no need to look into routing table. */
		*route = NULL;
   1de7c:	2300      	movs	r3, #0
   1de7e:	6033      	str	r3, [r6, #0]
		*nexthop = dst;
   1de80:	6025      	str	r5, [r4, #0]
			return false;
		}

		*nexthop = &router->address.in6_addr;

		return true;
   1de82:	2001      	movs	r0, #1
	}

	return false;
}
   1de84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*route = net_route_lookup(iface, dst);
   1de86:	4629      	mov	r1, r5
   1de88:	4638      	mov	r0, r7
   1de8a:	f7ff ff1f 	bl	1dccc <net_route_lookup>
   1de8e:	6030      	str	r0, [r6, #0]
	if (*route) {
   1de90:	b130      	cbz	r0, 1dea0 <net_route_get_info+0x34>
		*nexthop = net_route_get_nexthop(*route);
   1de92:	f7ff ffc1 	bl	1de18 <net_route_get_nexthop>
   1de96:	6020      	str	r0, [r4, #0]
		if (!*nexthop) {
   1de98:	3000      	adds	r0, #0
   1de9a:	bf18      	it	ne
   1de9c:	2001      	movne	r0, #1
   1de9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		router = net_if_ipv6_router_find_default(NULL, dst);
   1dea0:	4629      	mov	r1, r5
   1dea2:	f7fb fa05 	bl	192b0 <net_if_ipv6_router_find_default>
		if (!router) {
   1dea6:	2800      	cmp	r0, #0
   1dea8:	d0ec      	beq.n	1de84 <net_route_get_info+0x18>
		*nexthop = &router->address.in6_addr;
   1deaa:	302c      	adds	r0, #44	; 0x2c
   1deac:	6020      	str	r0, [r4, #0]
   1deae:	e7e8      	b.n	1de82 <net_route_get_info+0x16>

0001deb0 <net_route_packet>:

int net_route_packet(struct net_pkt *pkt, struct in6_addr *nexthop)
{
   1deb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1deb2:	4604      	mov	r4, r0
	struct net_linkaddr_storage *lladdr;
	struct net_nbr *nbr;

	nbr = net_ipv6_nbr_lookup(NULL, nexthop);
   1deb4:	2000      	movs	r0, #0
   1deb6:	f7fe fa60 	bl	1c37a <net_ipv6_nbr_lookup>
	if (!nbr) {
   1deba:	4606      	mov	r6, r0
   1debc:	2800      	cmp	r0, #0
   1debe:	d033      	beq.n	1df28 <net_route_packet+0x78>
		NET_DBG("Cannot find %s neighbor",
			net_sprint_ipv6_addr(nexthop));
		return -ENOENT;
	}

	lladdr = net_nbr_get_lladdr(nbr->idx);
   1dec0:	7840      	ldrb	r0, [r0, #1]
   1dec2:	f7fd fdb1 	bl	1ba28 <net_nbr_get_lladdr>
	if (!lladdr) {
   1dec6:	4605      	mov	r5, r0
   1dec8:	2800      	cmp	r0, #0
   1deca:	d030      	beq.n	1df2e <net_route_packet+0x7e>
		NET_DBG("Cannot find %s neighbor link layer address.",
			net_sprint_ipv6_addr(nexthop));
		return -ESRCH;
	}

	if (!net_pkt_ll_src(pkt)->addr) {
   1decc:	6a20      	ldr	r0, [r4, #32]
   1dece:	b910      	cbnz	r0, 1ded6 <net_route_packet+0x26>
		NET_DBG("Link layer source address not set");
		return -EINVAL;
   1ded0:	f06f 0015 	mvn.w	r0, #21
   1ded4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	/* Sanitycheck: If src and dst ll addresses are going to be same,
	 * then something went wrong in route lookup.
	 */
	if (!memcmp(net_pkt_ll_src(pkt)->addr, lladdr->addr, lladdr->len)) {
   1ded6:	1caf      	adds	r7, r5, #2
   1ded8:	786a      	ldrb	r2, [r5, #1]
   1deda:	4639      	mov	r1, r7
   1dedc:	f7e2 fc41 	bl	762 <memcmp>
   1dee0:	2800      	cmp	r0, #0
   1dee2:	d0f5      	beq.n	1ded0 <net_route_packet+0x20>
	pkt->forwarding = forward;
   1dee4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   1dee8:	f043 0304 	orr.w	r3, r3, #4
   1deec:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   1def0:	6963      	ldr	r3, [r4, #20]
	net_pkt_set_forwarding(pkt, true);

	/* Set the destination and source ll address in the packet.
	 * We set the destination address to be the nexthop recipient.
	 */
	net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   1def2:	691a      	ldr	r2, [r3, #16]
   1def4:	6222      	str	r2, [r4, #32]
	net_pkt_ll_src(pkt)->type = net_pkt_ll_if(pkt)->type;
   1def6:	7d5a      	ldrb	r2, [r3, #21]
   1def8:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   1defc:	7d1b      	ldrb	r3, [r3, #20]
   1defe:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   1df02:	62a7      	str	r7, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->type = lladdr->type;
   1df04:	782b      	ldrb	r3, [r5, #0]
   1df06:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_ll_dst(pkt)->len = lladdr->len;
   1df0a:	786b      	ldrb	r3, [r5, #1]
   1df0c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	net_pkt_set_iface(pkt, nbr->iface);
   1df10:	68b3      	ldr	r3, [r6, #8]
	pkt->iface = iface;
   1df12:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1df14:	7d5b      	ldrb	r3, [r3, #21]
   1df16:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1df1a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d

	return net_send_data(pkt);
   1df1e:	4620      	mov	r0, r4
}
   1df20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return net_send_data(pkt);
   1df24:	f7fa bc52 	b.w	187cc <net_send_data>
		return -ENOENT;
   1df28:	f06f 0001 	mvn.w	r0, #1
   1df2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ESRCH;
   1df2e:	f06f 0002 	mvn.w	r0, #2
}
   1df32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001df34 <net_route_init>:

void net_route_init(void)
{
   1df34:	4770      	bx	lr

0001df36 <net_analyze_stack_get_values>:

static inline void net_analyze_stack_get_values(const char *stack,
						size_t size,
						unsigned *pcnt,
						unsigned *unused)
{
   1df36:	b530      	push	{r4, r5, lr}
	size_t unused = 0;
   1df38:	2400      	movs	r4, #0
	for (i = 0; i < size; i++) {
   1df3a:	42a1      	cmp	r1, r4
   1df3c:	d002      	beq.n	1df44 <net_analyze_stack_get_values+0xe>
		if ((unsigned char)stack[i] == 0xaa) {
   1df3e:	5d05      	ldrb	r5, [r0, r4]
   1df40:	2daa      	cmp	r5, #170	; 0xaa
   1df42:	d007      	beq.n	1df54 <net_analyze_stack_get_values+0x1e>
	*unused = stack_unused_space_get(stack, size);
   1df44:	601c      	str	r4, [r3, #0]

	/* Calculate the real size reserved for the stack */
	*pcnt = ((size - *unused) * 100) / size;
   1df46:	1b0c      	subs	r4, r1, r4
   1df48:	2364      	movs	r3, #100	; 0x64
   1df4a:	435c      	muls	r4, r3
   1df4c:	fbb4 f4f1 	udiv	r4, r4, r1
   1df50:	6014      	str	r4, [r2, #0]
}
   1df52:	bd30      	pop	{r4, r5, pc}
			unused++;
   1df54:	3401      	adds	r4, #1
   1df56:	e7f0      	b.n	1df3a <net_analyze_stack_get_values+0x4>

0001df58 <net_shell_cmd_allocs>:
#endif /* CONFIG_NET_DEBUG_NET_PKT */

/* Put the actual shell commands after this */

int net_shell_cmd_allocs(int argc, char *argv[])
{
   1df58:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_DEBUG_NET_PKT)
	printk("Network memory allocations\n\n");
	printk("memory\t\tStatus\tPool\tFunction alloc -> freed\n");
	net_pkt_allocs_foreach(allocs_cb, NULL);
#else
	printk("Enable CONFIG_NET_DEBUG_NET_PKT to see allocations.\n");
   1df5a:	4802      	ldr	r0, [pc, #8]	; (1df64 <net_shell_cmd_allocs+0xc>)
   1df5c:	f7e3 fc5a 	bl	1814 <printk>
#endif /* CONFIG_NET_DEBUG_NET_PKT */

	return 0;
}
   1df60:	2000      	movs	r0, #0
   1df62:	bd08      	pop	{r3, pc}
   1df64:	00022c6b 	.word	0x00022c6b

0001df68 <net_shell_cmd_app>:
#elif defined(CONFIG_NET_DEBUG_APP)
static void net_app_cb(struct net_app_ctx *ctx, void *user_data) {}
#endif

int net_shell_cmd_app(int argc, char *argv[])
{
   1df68:	b508      	push	{r3, lr}
		if (i == 0) {
			printk("No net app client instances found.\n");
		}
	}
#else
	printk("Enable CONFIG_NET_DEBUG_APP and either CONFIG_NET_APP_CLIENT "
   1df6a:	4802      	ldr	r0, [pc, #8]	; (1df74 <net_shell_cmd_app+0xc>)
   1df6c:	f7e3 fc52 	bl	1814 <printk>
	       "or CONFIG_NET_APP_SERVER to see client/server instance "
	       "information.\n");
#endif

	return 0;
}
   1df70:	2000      	movs	r0, #0
   1df72:	bd08      	pop	{r3, pc}
   1df74:	00022ca0 	.word	0x00022ca0

0001df78 <net_shell_cmd_arp>:
	(*count)++;
}
#endif /* CONFIG_NET_ARP */

int net_shell_cmd_arp(int argc, char *argv[])
{
   1df78:	b508      	push	{r3, lr}
		printk("Flushing ARP cache.\n");
		net_arp_clear_cache();
		return 0;
	}
#else
	printk("Enable CONFIG_NET_ARP, CONFIG_NET_IPV4 and "
   1df7a:	4802      	ldr	r0, [pc, #8]	; (1df84 <net_shell_cmd_arp+0xc>)
   1df7c:	f7e3 fc4a 	bl	1814 <printk>
	       "CONFIG_NET_L2_ETHERNET to see ARP information.\n");
#endif

	return 0;
}
   1df80:	2000      	movs	r0, #0
   1df82:	bd08      	pop	{r3, pc}
   1df84:	00022d22 	.word	0x00022d22

0001df88 <net_shell_cmd_dns>:
	}
}
#endif

int net_shell_cmd_dns(int argc, char *argv[])
{
   1df88:	b508      	push	{r3, lr}
	} else {
		printk("Query for '%s' sent.\n", host);
	}

#else
	printk("DNS resolver not supported.\n");
   1df8a:	4802      	ldr	r0, [pc, #8]	; (1df94 <net_shell_cmd_dns+0xc>)
   1df8c:	f7e3 fc42 	bl	1814 <printk>
#endif
	return 0;
}
   1df90:	2000      	movs	r0, #0
   1df92:	bd08      	pop	{r3, pc}
   1df94:	00022dca 	.word	0x00022dca

0001df98 <net_shell_cmd_http>:
	}
}
#endif /* CONFIG_NET_DEBUG_HTTP_CONN && CONFIG_HTTP_SERVER */

int net_shell_cmd_http(int argc, char *argv[])
{
   1df98:	b508      	push	{r3, lr}
		}
	} else {
		http_server_conn_foreach(http_server_cb, &count);
	}
#else
	printk("Enable CONFIG_NET_DEBUG_HTTP_CONN and CONFIG_HTTP_SERVER "
   1df9a:	4802      	ldr	r0, [pc, #8]	; (1dfa4 <net_shell_cmd_http+0xc>)
   1df9c:	f7e3 fc3a 	bl	1814 <printk>
	       "to get HTTP server connection information\n");
#endif

	return 0;
}
   1dfa0:	2000      	movs	r0, #0
   1dfa2:	bd08      	pop	{r3, pc}
   1dfa4:	00022de7 	.word	0x00022de7

0001dfa8 <net_shell_cmd_rpl>:
}

#endif /* CONFIG_NET_RPL */

int net_shell_cmd_rpl(int argc, char *argv[])
{
   1dfa8:	b508      	push	{r3, lr}
		printk("No parents found.\n");
	}

	printk("\n");
#else
	printk("RPL not enabled, set CONFIG_NET_RPL to enable it.\n");
   1dfaa:	4802      	ldr	r0, [pc, #8]	; (1dfb4 <net_shell_cmd_rpl+0xc>)
   1dfac:	f7e3 fc32 	bl	1814 <printk>
#endif

	return 0;
}
   1dfb0:	2000      	movs	r0, #0
   1dfb2:	bd08      	pop	{r3, pc}
   1dfb4:	00022fcb 	.word	0x00022fcb

0001dfb8 <net_shell_cmd_stats>:

	return 0;
}

int net_shell_cmd_stats(int argc, char *argv[])
{
   1dfb8:	b513      	push	{r0, r1, r4, lr}
	printk("IPv6 recv      %d\tsent\t%d\tdrop\t%d\tforwarded\t%d\n",
   1dfba:	4c22      	ldr	r4, [pc, #136]	; (1e044 <net_shell_cmd_stats+0x8c>)
   1dfbc:	4822      	ldr	r0, [pc, #136]	; (1e048 <net_shell_cmd_stats+0x90>)
   1dfbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1dfc0:	9300      	str	r3, [sp, #0]
   1dfc2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1dfc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1dfc6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1dfc8:	f7e3 fc24 	bl	1814 <printk>
	printk("IPv6 ND recv   %d\tsent\t%d\tdrop\t%d\n",
   1dfcc:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1dfce:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1dfd0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   1dfd2:	481e      	ldr	r0, [pc, #120]	; (1e04c <net_shell_cmd_stats+0x94>)
   1dfd4:	f7e3 fc1e 	bl	1814 <printk>
	printk("IPv6 MLD recv  %d\tsent\t%d\tdrop\t%d\n",
   1dfd8:	f104 0164 	add.w	r1, r4, #100	; 0x64
   1dfdc:	c90e      	ldmia	r1, {r1, r2, r3}
   1dfde:	481c      	ldr	r0, [pc, #112]	; (1e050 <net_shell_cmd_stats+0x98>)
   1dfe0:	f7e3 fc18 	bl	1814 <printk>
	printk("IP vhlerr      %d\thblener\t%d\tlblener\t%d\n",
   1dfe4:	f104 010c 	add.w	r1, r4, #12
   1dfe8:	c90e      	ldmia	r1, {r1, r2, r3}
   1dfea:	481a      	ldr	r0, [pc, #104]	; (1e054 <net_shell_cmd_stats+0x9c>)
   1dfec:	f7e3 fc12 	bl	1814 <printk>
	printk("IP fragerr     %d\tchkerr\t%d\tprotoer\t%d\n",
   1dff0:	f104 0118 	add.w	r1, r4, #24
   1dff4:	c90e      	ldmia	r1, {r1, r2, r3}
   1dff6:	4818      	ldr	r0, [pc, #96]	; (1e058 <net_shell_cmd_stats+0xa0>)
   1dff8:	f7e3 fc0c 	bl	1814 <printk>
	printk("ICMP recv      %d\tsent\t%d\tdrop\t%d\n",
   1dffc:	f104 0134 	add.w	r1, r4, #52	; 0x34
   1e000:	c90e      	ldmia	r1, {r1, r2, r3}
   1e002:	4816      	ldr	r0, [pc, #88]	; (1e05c <net_shell_cmd_stats+0xa4>)
   1e004:	f7e3 fc06 	bl	1814 <printk>
	printk("ICMP typeer    %d\tchkerr\t%d\n",
   1e008:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1e00a:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1e00c:	4814      	ldr	r0, [pc, #80]	; (1e060 <net_shell_cmd_stats+0xa8>)
   1e00e:	f7e3 fc01 	bl	1814 <printk>
	printk("UDP recv       %d\tsent\t%d\tdrop\t%d\n",
   1e012:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1e014:	6d22      	ldr	r2, [r4, #80]	; 0x50
   1e016:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   1e018:	4812      	ldr	r0, [pc, #72]	; (1e064 <net_shell_cmd_stats+0xac>)
   1e01a:	f7e3 fbfb 	bl	1814 <printk>
	printk("UDP chkerr     %d\n",
   1e01e:	6d61      	ldr	r1, [r4, #84]	; 0x54
   1e020:	4811      	ldr	r0, [pc, #68]	; (1e068 <net_shell_cmd_stats+0xb0>)
   1e022:	f7e3 fbf7 	bl	1814 <printk>
	printk("Bytes received %u\n", GET_STAT(bytes.received));
   1e026:	68a1      	ldr	r1, [r4, #8]
   1e028:	4810      	ldr	r0, [pc, #64]	; (1e06c <net_shell_cmd_stats+0xb4>)
   1e02a:	f7e3 fbf3 	bl	1814 <printk>
	printk("Bytes sent     %u\n", GET_STAT(bytes.sent));
   1e02e:	6861      	ldr	r1, [r4, #4]
   1e030:	480f      	ldr	r0, [pc, #60]	; (1e070 <net_shell_cmd_stats+0xb8>)
   1e032:	f7e3 fbef 	bl	1814 <printk>
	printk("Processing err %d\n", GET_STAT(processing_error));
   1e036:	6821      	ldr	r1, [r4, #0]
   1e038:	480e      	ldr	r0, [pc, #56]	; (1e074 <net_shell_cmd_stats+0xbc>)
   1e03a:	f7e3 fbeb 	bl	1814 <printk>
#else
	printk("Network statistics not compiled in.\n");
#endif

	return 0;
}
   1e03e:	2000      	movs	r0, #0
   1e040:	b002      	add	sp, #8
   1e042:	bd10      	pop	{r4, pc}
   1e044:	20004cf4 	.word	0x20004cf4
   1e048:	000230b7 	.word	0x000230b7
   1e04c:	000230e7 	.word	0x000230e7
   1e050:	0002310a 	.word	0x0002310a
   1e054:	0002312d 	.word	0x0002312d
   1e058:	00023156 	.word	0x00023156
   1e05c:	0002317e 	.word	0x0002317e
   1e060:	000231a1 	.word	0x000231a1
   1e064:	000231be 	.word	0x000231be
   1e068:	000231e1 	.word	0x000231e1
   1e06c:	000231f4 	.word	0x000231f4
   1e070:	00023207 	.word	0x00023207
   1e074:	0002321a 	.word	0x0002321a

0001e078 <net_shell_cmd_tcp>:
	printk("Message sent\n");
}
#endif

int net_shell_cmd_tcp(int argc, char *argv[])
{
   1e078:	b508      	push	{r3, lr}
		printk("\ttcp connect <ipaddr> port\n");
		printk("\ttcp send <data>\n");
		printk("\ttcp close\n");
	}
#else
	printk("TCP not enabled.\n");
   1e07a:	4802      	ldr	r0, [pc, #8]	; (1e084 <net_shell_cmd_tcp+0xc>)
   1e07c:	f7e3 fbca 	bl	1814 <printk>
#endif /* CONFIG_NET_TCP */

	return 0;
}
   1e080:	2000      	movs	r0, #0
   1e082:	bd08      	pop	{r3, pc}
   1e084:	0002322d 	.word	0x0002322d

0001e088 <net_shell_cmd_conn>:
{
   1e088:	b513      	push	{r0, r1, r4, lr}
	int count = 0;
   1e08a:	ac02      	add	r4, sp, #8
   1e08c:	2300      	movs	r3, #0
   1e08e:	f844 3d04 	str.w	r3, [r4, #-4]!
	printk("     Context   \tIface         Flags "
   1e092:	4807      	ldr	r0, [pc, #28]	; (1e0b0 <net_shell_cmd_conn+0x28>)
   1e094:	f7e3 fbbe 	bl	1814 <printk>
	net_context_foreach(context_cb, &count);
   1e098:	4621      	mov	r1, r4
   1e09a:	4806      	ldr	r0, [pc, #24]	; (1e0b4 <net_shell_cmd_conn+0x2c>)
   1e09c:	f7fa faba 	bl	18614 <net_context_foreach>
	if (count == 0) {
   1e0a0:	9b01      	ldr	r3, [sp, #4]
   1e0a2:	b913      	cbnz	r3, 1e0aa <net_shell_cmd_conn+0x22>
		printk("No connections\n");
   1e0a4:	4804      	ldr	r0, [pc, #16]	; (1e0b8 <net_shell_cmd_conn+0x30>)
   1e0a6:	f7e3 fbb5 	bl	1814 <printk>
}
   1e0aa:	2000      	movs	r0, #0
   1e0ac:	b002      	add	sp, #8
   1e0ae:	bd10      	pop	{r4, pc}
   1e0b0:	00022d7d 	.word	0x00022d7d
   1e0b4:	0001e265 	.word	0x0001e265
   1e0b8:	00022dba 	.word	0x00022dba

0001e0bc <net_sprint_ipv6_addr>:
static inline char *net_sprint_ipv6_addr(const struct in6_addr *addr)
{
#if defined(CONFIG_NET_IPV6)
	static char buf[NET_IPV6_ADDR_LEN];

	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   1e0bc:	4601      	mov	r1, r0
   1e0be:	2328      	movs	r3, #40	; 0x28
   1e0c0:	4a01      	ldr	r2, [pc, #4]	; (1e0c8 <net_sprint_ipv6_addr+0xc>)
   1e0c2:	200a      	movs	r0, #10
   1e0c4:	f7fb bffe 	b.w	1a0c4 <net_addr_ntop>
   1e0c8:	20003254 	.word	0x20003254

0001e0cc <net_shell_cmd_iface>:
{
   1e0cc:	b508      	push	{r3, lr}
	net_if_foreach(iface_cb, NULL);
   1e0ce:	2100      	movs	r1, #0
   1e0d0:	4802      	ldr	r0, [pc, #8]	; (1e0dc <net_shell_cmd_iface+0x10>)
   1e0d2:	f7fb faf3 	bl	196bc <net_if_foreach>
}
   1e0d6:	2000      	movs	r0, #0
   1e0d8:	bd08      	pop	{r3, pc}
   1e0da:	bf00      	nop
   1e0dc:	0001e341 	.word	0x0001e341

0001e0e0 <net_shell_cmd_route>:
{
   1e0e0:	b508      	push	{r3, lr}
	net_if_foreach(iface_per_route_cb, NULL);
   1e0e2:	2100      	movs	r1, #0
   1e0e4:	4802      	ldr	r0, [pc, #8]	; (1e0f0 <net_shell_cmd_route+0x10>)
   1e0e6:	f7fb fae9 	bl	196bc <net_if_foreach>
}
   1e0ea:	2000      	movs	r0, #0
   1e0ec:	bd08      	pop	{r3, pc}
   1e0ee:	bf00      	nop
   1e0f0:	0001e20d 	.word	0x0001e20d

0001e0f4 <net_shell_cmd_mem>:
{
   1e0f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	net_pkt_get_info(&rx, &tx, &rx_data, &tx_data);
   1e0f6:	ab03      	add	r3, sp, #12
   1e0f8:	aa02      	add	r2, sp, #8
   1e0fa:	a901      	add	r1, sp, #4
   1e0fc:	4668      	mov	r0, sp
   1e0fe:	f7fb fe89 	bl	19e14 <net_pkt_get_info>
	printk("Fragment length %d bytes\n", CONFIG_NET_BUF_DATA_SIZE);
   1e102:	f240 5114 	movw	r1, #1300	; 0x514
   1e106:	4812      	ldr	r0, [pc, #72]	; (1e150 <net_shell_cmd_mem+0x5c>)
   1e108:	f7e3 fb84 	bl	1814 <printk>
	printk("Network buffer pools:\n");
   1e10c:	4811      	ldr	r0, [pc, #68]	; (1e154 <net_shell_cmd_mem+0x60>)
   1e10e:	f7e3 fb81 	bl	1814 <printk>
	printk("(CONFIG_NET_BUF_POOL_USAGE to see free #s)\n");
   1e112:	4811      	ldr	r0, [pc, #68]	; (1e158 <net_shell_cmd_mem+0x64>)
   1e114:	f7e3 fb7e 	bl	1814 <printk>
	printk("Address\t\tTotal\tName\n");
   1e118:	4810      	ldr	r0, [pc, #64]	; (1e15c <net_shell_cmd_mem+0x68>)
   1e11a:	f7e3 fb7b 	bl	1814 <printk>
	printk("%p\t%d\tRX\n", rx, rx->num_blocks);
   1e11e:	9900      	ldr	r1, [sp, #0]
   1e120:	480f      	ldr	r0, [pc, #60]	; (1e160 <net_shell_cmd_mem+0x6c>)
   1e122:	688a      	ldr	r2, [r1, #8]
   1e124:	f7e3 fb76 	bl	1814 <printk>
	printk("%p\t%d\tTX\n", tx, tx->num_blocks);
   1e128:	9901      	ldr	r1, [sp, #4]
   1e12a:	480e      	ldr	r0, [pc, #56]	; (1e164 <net_shell_cmd_mem+0x70>)
   1e12c:	688a      	ldr	r2, [r1, #8]
   1e12e:	f7e3 fb71 	bl	1814 <printk>
	printk("%p\t%d\tRX DATA\n", rx_data, rx_data->buf_count);
   1e132:	9902      	ldr	r1, [sp, #8]
   1e134:	480c      	ldr	r0, [pc, #48]	; (1e168 <net_shell_cmd_mem+0x74>)
   1e136:	8a0a      	ldrh	r2, [r1, #16]
   1e138:	f7e3 fb6c 	bl	1814 <printk>
	printk("%p\t%d\tTX DATA\n", tx_data, tx_data->buf_count);
   1e13c:	9903      	ldr	r1, [sp, #12]
   1e13e:	480b      	ldr	r0, [pc, #44]	; (1e16c <net_shell_cmd_mem+0x78>)
   1e140:	8a0a      	ldrh	r2, [r1, #16]
   1e142:	f7e3 fb67 	bl	1814 <printk>
}
   1e146:	2000      	movs	r0, #0
   1e148:	b005      	add	sp, #20
   1e14a:	f85d fb04 	ldr.w	pc, [sp], #4
   1e14e:	bf00      	nop
   1e150:	00022e4b 	.word	0x00022e4b
   1e154:	00022e65 	.word	0x00022e65
   1e158:	00022e7c 	.word	0x00022e7c
   1e15c:	00022ea8 	.word	0x00022ea8
   1e160:	00022ebd 	.word	0x00022ebd
   1e164:	00022ec7 	.word	0x00022ec7
   1e168:	00022ed1 	.word	0x00022ed1
   1e16c:	00022ee0 	.word	0x00022ee0

0001e170 <net_shell_cmd_nbr>:
{
   1e170:	b530      	push	{r4, r5, lr}
	if (argv[arg]) {
   1e172:	6848      	ldr	r0, [r1, #4]
{
   1e174:	b087      	sub	sp, #28
	int count = 0;
   1e176:	2300      	movs	r3, #0
{
   1e178:	460c      	mov	r4, r1
	int count = 0;
   1e17a:	9301      	str	r3, [sp, #4]
	if (argv[arg]) {
   1e17c:	b330      	cbz	r0, 1e1cc <net_shell_cmd_nbr+0x5c>
		if (strcmp(argv[arg], "rm")) {
   1e17e:	491b      	ldr	r1, [pc, #108]	; (1e1ec <net_shell_cmd_nbr+0x7c>)
   1e180:	f7e2 fac6 	bl	710 <strcmp>
   1e184:	4605      	mov	r5, r0
   1e186:	b130      	cbz	r0, 1e196 <net_shell_cmd_nbr+0x26>
			printk("Unknown command '%s'\n", argv[arg]);
   1e188:	6861      	ldr	r1, [r4, #4]
   1e18a:	4819      	ldr	r0, [pc, #100]	; (1e1f0 <net_shell_cmd_nbr+0x80>)
			printk("Cannot parse '%s'\n", argv[arg]);
   1e18c:	f7e3 fb42 	bl	1814 <printk>
}
   1e190:	2000      	movs	r0, #0
   1e192:	b007      	add	sp, #28
   1e194:	bd30      	pop	{r4, r5, pc}
		if (!argv[++arg]) {
   1e196:	68a1      	ldr	r1, [r4, #8]
   1e198:	b919      	cbnz	r1, 1e1a2 <net_shell_cmd_nbr+0x32>
			printk("Neighbor IPv6 address missing.\n");
   1e19a:	4816      	ldr	r0, [pc, #88]	; (1e1f4 <net_shell_cmd_nbr+0x84>)
		printk("No neighbors.\n");
   1e19c:	f7e3 fb3a 	bl	1814 <printk>
   1e1a0:	e7f6      	b.n	1e190 <net_shell_cmd_nbr+0x20>
		ret = net_addr_pton(AF_INET6, argv[arg], &addr);
   1e1a2:	aa02      	add	r2, sp, #8
   1e1a4:	200a      	movs	r0, #10
   1e1a6:	f7fc f861 	bl	1a26c <net_addr_pton>
		if (ret < 0) {
   1e1aa:	2800      	cmp	r0, #0
   1e1ac:	da02      	bge.n	1e1b4 <net_shell_cmd_nbr+0x44>
			printk("Cannot parse '%s'\n", argv[arg]);
   1e1ae:	68a1      	ldr	r1, [r4, #8]
   1e1b0:	4811      	ldr	r0, [pc, #68]	; (1e1f8 <net_shell_cmd_nbr+0x88>)
   1e1b2:	e7eb      	b.n	1e18c <net_shell_cmd_nbr+0x1c>
		if (!net_ipv6_nbr_rm(NULL, &addr)) {
   1e1b4:	a902      	add	r1, sp, #8
   1e1b6:	4628      	mov	r0, r5
   1e1b8:	f7fd fe50 	bl	1be5c <net_ipv6_nbr_rm>
   1e1bc:	b978      	cbnz	r0, 1e1de <net_shell_cmd_nbr+0x6e>
			printk("Cannot remove neighbor %s\n",
   1e1be:	a802      	add	r0, sp, #8
   1e1c0:	f7ff ff7c 	bl	1e0bc <net_sprint_ipv6_addr>
   1e1c4:	4601      	mov	r1, r0
   1e1c6:	480d      	ldr	r0, [pc, #52]	; (1e1fc <net_shell_cmd_nbr+0x8c>)
			printk("Neighbor %s removed.\n",
   1e1c8:	f7e3 fb24 	bl	1814 <printk>
	net_ipv6_nbr_foreach(nbr_cb, &count);
   1e1cc:	a901      	add	r1, sp, #4
   1e1ce:	480c      	ldr	r0, [pc, #48]	; (1e200 <net_shell_cmd_nbr+0x90>)
   1e1d0:	f7fd fe38 	bl	1be44 <net_ipv6_nbr_foreach>
	if (count == 0) {
   1e1d4:	9b01      	ldr	r3, [sp, #4]
   1e1d6:	2b00      	cmp	r3, #0
   1e1d8:	d1da      	bne.n	1e190 <net_shell_cmd_nbr+0x20>
		printk("No neighbors.\n");
   1e1da:	480a      	ldr	r0, [pc, #40]	; (1e204 <net_shell_cmd_nbr+0x94>)
   1e1dc:	e7de      	b.n	1e19c <net_shell_cmd_nbr+0x2c>
			printk("Neighbor %s removed.\n",
   1e1de:	a802      	add	r0, sp, #8
   1e1e0:	f7ff ff6c 	bl	1e0bc <net_sprint_ipv6_addr>
   1e1e4:	4601      	mov	r1, r0
   1e1e6:	4808      	ldr	r0, [pc, #32]	; (1e208 <net_shell_cmd_nbr+0x98>)
   1e1e8:	e7ee      	b.n	1e1c8 <net_shell_cmd_nbr+0x58>
   1e1ea:	bf00      	nop
   1e1ec:	00022eef 	.word	0x00022eef
   1e1f0:	00022192 	.word	0x00022192
   1e1f4:	00022ef2 	.word	0x00022ef2
   1e1f8:	00022f12 	.word	0x00022f12
   1e1fc:	00022f25 	.word	0x00022f25
   1e200:	0001e835 	.word	0x0001e835
   1e204:	00022f56 	.word	0x00022f56
   1e208:	00022f40 	.word	0x00022f40

0001e20c <iface_per_route_cb>:
{
   1e20c:	b538      	push	{r3, r4, r5, lr}
	if (iface->l2 == &NET_L2_GET_NAME(BLUETOOTH)) {
   1e20e:	6842      	ldr	r2, [r0, #4]
   1e210:	4b0c      	ldr	r3, [pc, #48]	; (1e244 <iface_per_route_cb+0x38>)
		*extra = "==============";
   1e212:	4d0d      	ldr	r5, [pc, #52]	; (1e248 <iface_per_route_cb+0x3c>)
	if (iface->l2 == &NET_L2_GET_NAME(BLUETOOTH)) {
   1e214:	429a      	cmp	r2, r3
		*extra = "==============";
   1e216:	4b0d      	ldr	r3, [pc, #52]	; (1e24c <iface_per_route_cb+0x40>)
	printk("\nIPv6 routes for interface %p (%s)\n", iface,
   1e218:	4a0d      	ldr	r2, [pc, #52]	; (1e250 <iface_per_route_cb+0x44>)
		*extra = "==============";
   1e21a:	bf18      	it	ne
   1e21c:	461d      	movne	r5, r3
	printk("\nIPv6 routes for interface %p (%s)\n", iface,
   1e21e:	4b0d      	ldr	r3, [pc, #52]	; (1e254 <iface_per_route_cb+0x48>)
{
   1e220:	4604      	mov	r4, r0
	printk("\nIPv6 routes for interface %p (%s)\n", iface,
   1e222:	bf18      	it	ne
   1e224:	461a      	movne	r2, r3
   1e226:	4601      	mov	r1, r0
   1e228:	480b      	ldr	r0, [pc, #44]	; (1e258 <iface_per_route_cb+0x4c>)
   1e22a:	f7e3 faf3 	bl	1814 <printk>
	printk("=======================================%s\n", extra);
   1e22e:	4629      	mov	r1, r5
   1e230:	480a      	ldr	r0, [pc, #40]	; (1e25c <iface_per_route_cb+0x50>)
   1e232:	f7e3 faef 	bl	1814 <printk>
	net_route_foreach(route_cb, iface);
   1e236:	4621      	mov	r1, r4
   1e238:	4809      	ldr	r0, [pc, #36]	; (1e260 <iface_per_route_cb+0x54>)
}
   1e23a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_route_foreach(route_cb, iface);
   1e23e:	f7ff bdfd 	b.w	1de3c <net_route_foreach>
   1e242:	bf00      	nop
   1e244:	00021850 	.word	0x00021850
   1e248:	00022b73 	.word	0x00022b73
   1e24c:	00022b6e 	.word	0x00022b6e
   1e250:	00022b8c 	.word	0x00022b8c
   1e254:	00022b7d 	.word	0x00022b7d
   1e258:	00022b96 	.word	0x00022b96
   1e25c:	00022bba 	.word	0x00022bba
   1e260:	0001e649 	.word	0x0001e649

0001e264 <context_cb>:
{
   1e264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e268:	4604      	mov	r4, r0
   1e26a:	b09e      	sub	sp, #120	; 0x78
   1e26c:	460e      	mov	r6, r1
	char addr_remote[ADDR_LEN + 7] = "";
   1e26e:	222b      	movs	r2, #43	; 0x2b
   1e270:	2100      	movs	r1, #0
   1e272:	a813      	add	r0, sp, #76	; 0x4c
   1e274:	9112      	str	r1, [sp, #72]	; 0x48
   1e276:	f7e2 facd 	bl	814 <memset>
	if (context->local.family == AF_INET6) {
   1e27a:	8923      	ldrh	r3, [r4, #8]
   1e27c:	2b0a      	cmp	r3, #10
   1e27e:	ad06      	add	r5, sp, #24
   1e280:	af12      	add	r7, sp, #72	; 0x48
   1e282:	d147      	bne.n	1e314 <context_cb+0xb0>
		snprintk(addr_local, local_len, "[%s]:%u",
   1e284:	68e0      	ldr	r0, [r4, #12]
   1e286:	f7ff ff19 	bl	1e0bc <net_sprint_ipv6_addr>
			 ntohs(net_sin6_ptr(&context->local)->sin6_port));
   1e28a:	8962      	ldrh	r2, [r4, #10]
   1e28c:	0a13      	lsrs	r3, r2, #8
   1e28e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		snprintk(addr_local, local_len, "[%s]:%u",
   1e292:	b29b      	uxth	r3, r3
   1e294:	4a26      	ldr	r2, [pc, #152]	; (1e330 <context_cb+0xcc>)
   1e296:	9300      	str	r3, [sp, #0]
   1e298:	212f      	movs	r1, #47	; 0x2f
   1e29a:	4603      	mov	r3, r0
   1e29c:	4628      	mov	r0, r5
   1e29e:	f7e3 fac7 	bl	1830 <snprintk>
		snprintk(addr_remote, remote_len, "[%s]:%u",
   1e2a2:	f104 0018 	add.w	r0, r4, #24
   1e2a6:	f7ff ff09 	bl	1e0bc <net_sprint_ipv6_addr>
			 ntohs(net_sin6(&context->remote)->sin6_port));
   1e2aa:	8ae2      	ldrh	r2, [r4, #22]
   1e2ac:	0a13      	lsrs	r3, r2, #8
   1e2ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		snprintk(addr_remote, remote_len, "[%s]:%u",
   1e2b2:	b29b      	uxth	r3, r3
   1e2b4:	9300      	str	r3, [sp, #0]
   1e2b6:	4a1e      	ldr	r2, [pc, #120]	; (1e330 <context_cb+0xcc>)
   1e2b8:	4603      	mov	r3, r0
   1e2ba:	212f      	movs	r1, #47	; 0x2f
   1e2bc:	4638      	mov	r0, r7
   1e2be:	f7e3 fab7 	bl	1830 <snprintk>
	printk("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
   1e2c2:	6831      	ldr	r1, [r6, #0]
	return net_if_get_by_index(context->iface);
   1e2c4:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   1e2c8:	f101 0801 	add.w	r8, r1, #1
   1e2cc:	f7fb f9dc 	bl	19688 <net_if_get_by_index>
   1e2d0:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   1e2d4:	9704      	str	r7, [sp, #16]
   1e2d6:	f013 0f10 	tst.w	r3, #16
   1e2da:	bf0c      	ite	eq
   1e2dc:	2234      	moveq	r2, #52	; 0x34
   1e2de:	2236      	movne	r2, #54	; 0x36
   1e2e0:	f013 0f20 	tst.w	r3, #32
   1e2e4:	bf0c      	ite	eq
   1e2e6:	2144      	moveq	r1, #68	; 0x44
   1e2e8:	2153      	movne	r1, #83	; 0x53
   1e2ea:	f013 0f40 	tst.w	r3, #64	; 0x40
   1e2ee:	bf0c      	ite	eq
   1e2f0:	2355      	moveq	r3, #85	; 0x55
   1e2f2:	2354      	movne	r3, #84	; 0x54
   1e2f4:	9302      	str	r3, [sp, #8]
   1e2f6:	9101      	str	r1, [sp, #4]
   1e2f8:	9200      	str	r2, [sp, #0]
   1e2fa:	4603      	mov	r3, r0
   1e2fc:	9503      	str	r5, [sp, #12]
   1e2fe:	4622      	mov	r2, r4
   1e300:	4641      	mov	r1, r8
   1e302:	480c      	ldr	r0, [pc, #48]	; (1e334 <context_cb+0xd0>)
   1e304:	f7e3 fa86 	bl	1814 <printk>
	(*count)++;
   1e308:	6833      	ldr	r3, [r6, #0]
   1e30a:	3301      	adds	r3, #1
   1e30c:	6033      	str	r3, [r6, #0]
}
   1e30e:	b01e      	add	sp, #120	; 0x78
   1e310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (context->local.family == AF_UNSPEC) {
   1e314:	b92b      	cbnz	r3, 1e322 <context_cb+0xbe>
		snprintk(addr_local, local_len, "AF_UNSPEC");
   1e316:	4a08      	ldr	r2, [pc, #32]	; (1e338 <context_cb+0xd4>)
   1e318:	212f      	movs	r1, #47	; 0x2f
   1e31a:	4628      	mov	r0, r5
   1e31c:	f7e3 fa88 	bl	1830 <snprintk>
   1e320:	e7cf      	b.n	1e2c2 <context_cb+0x5e>
		snprintk(addr_local, local_len, "AF_UNK(%d)",
   1e322:	4a06      	ldr	r2, [pc, #24]	; (1e33c <context_cb+0xd8>)
   1e324:	212f      	movs	r1, #47	; 0x2f
   1e326:	4628      	mov	r0, r5
   1e328:	f7e3 fa82 	bl	1830 <snprintk>
   1e32c:	e7c9      	b.n	1e2c2 <context_cb+0x5e>
   1e32e:	bf00      	nop
   1e330:	000229af 	.word	0x000229af
   1e334:	000229cc 	.word	0x000229cc
   1e338:	000229b7 	.word	0x000229b7
   1e33c:	000229c1 	.word	0x000229c1

0001e340 <iface_cb>:
{
   1e340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		*extra = "==============";
   1e344:	4b71      	ldr	r3, [pc, #452]	; (1e50c <iface_cb+0x1cc>)
	if (iface->l2 == &NET_L2_GET_NAME(BLUETOOTH)) {
   1e346:	6842      	ldr	r2, [r0, #4]
		*extra = "==============";
   1e348:	4d71      	ldr	r5, [pc, #452]	; (1e510 <iface_cb+0x1d0>)
   1e34a:	429a      	cmp	r2, r3
   1e34c:	4b71      	ldr	r3, [pc, #452]	; (1e514 <iface_cb+0x1d4>)
	printk("\nInterface %p (%s)\n", iface, iface2str(iface, &extra));
   1e34e:	4a72      	ldr	r2, [pc, #456]	; (1e518 <iface_cb+0x1d8>)
		*extra = "==============";
   1e350:	bf18      	it	ne
   1e352:	461d      	movne	r5, r3
	printk("\nInterface %p (%s)\n", iface, iface2str(iface, &extra));
   1e354:	4b71      	ldr	r3, [pc, #452]	; (1e51c <iface_cb+0x1dc>)
   1e356:	4601      	mov	r1, r0
   1e358:	bf18      	it	ne
   1e35a:	461a      	movne	r2, r3
{
   1e35c:	4604      	mov	r4, r0
	printk("\nInterface %p (%s)\n", iface, iface2str(iface, &extra));
   1e35e:	4870      	ldr	r0, [pc, #448]	; (1e520 <iface_cb+0x1e0>)
   1e360:	f7e3 fa58 	bl	1814 <printk>
	printk("=======================%s\n", extra);
   1e364:	4629      	mov	r1, r5
   1e366:	486f      	ldr	r0, [pc, #444]	; (1e524 <iface_cb+0x1e4>)
   1e368:	f7e3 fa54 	bl	1814 <printk>
   1e36c:	f3bf 8f5b 	dmb	ish
   1e370:	68e6      	ldr	r6, [r4, #12]
   1e372:	f3bf 8f5b 	dmb	ish
	if (!net_if_is_up(iface)) {
   1e376:	f016 0601 	ands.w	r6, r6, #1
   1e37a:	d105      	bne.n	1e388 <iface_cb+0x48>
		printk("Interface is down.\n");
   1e37c:	486a      	ldr	r0, [pc, #424]	; (1e528 <iface_cb+0x1e8>)
}
   1e37e:	b003      	add	sp, #12
   1e380:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printk("Interface is down.\n");
   1e384:	f7e3 ba46 	b.w	1814 <printk>
	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   1e388:	2318      	movs	r3, #24
   1e38a:	4a68      	ldr	r2, [pc, #416]	; (1e52c <iface_cb+0x1ec>)
   1e38c:	7d21      	ldrb	r1, [r4, #20]
   1e38e:	6920      	ldr	r0, [r4, #16]
		printk("\t%s %s %s%s\n",
   1e390:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 1e564 <iface_cb+0x224>
   1e394:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 1e560 <iface_cb+0x220>
   1e398:	f8df b1e0 	ldr.w	fp, [pc, #480]	; 1e57c <iface_cb+0x23c>
   1e39c:	f7fb fe62 	bl	1a064 <net_sprint_ll_addr_buf>
	printk("Link addr : %s\n", net_sprint_ll_addr(iface->link_addr.addr,
   1e3a0:	4601      	mov	r1, r0
   1e3a2:	4863      	ldr	r0, [pc, #396]	; (1e530 <iface_cb+0x1f0>)
   1e3a4:	f7e3 fa36 	bl	1814 <printk>
	printk("MTU       : %d\n", iface->mtu);
   1e3a8:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   1e3aa:	4862      	ldr	r0, [pc, #392]	; (1e534 <iface_cb+0x1f4>)
   1e3ac:	f7e3 fa32 	bl	1814 <printk>
	printk("IPv6 unicast addresses (max %d):\n", NET_IF_MAX_IPV6_ADDR);
   1e3b0:	2103      	movs	r1, #3
   1e3b2:	4861      	ldr	r0, [pc, #388]	; (1e538 <iface_cb+0x1f8>)
   1e3b4:	f7e3 fa2e 	bl	1814 <printk>
   1e3b8:	f104 0530 	add.w	r5, r4, #48	; 0x30
   1e3bc:	f504 78ba 	add.w	r8, r4, #372	; 0x174
	count = 0;
   1e3c0:	2700      	movs	r7, #0
		if (!unicast->is_used) {
   1e3c2:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
   1e3c6:	b303      	cbz	r3, 1e40a <iface_cb+0xca>
		printk("\t%s %s %s%s\n",
   1e3c8:	4628      	mov	r0, r5
   1e3ca:	f7ff fe77 	bl	1e0bc <net_sprint_ipv6_addr>
   1e3ce:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   1e3d2:	2b04      	cmp	r3, #4
   1e3d4:	bf96      	itet	ls
   1e3d6:	4a59      	ldrls	r2, [pc, #356]	; (1e53c <iface_cb+0x1fc>)
   1e3d8:	4a59      	ldrhi	r2, [pc, #356]	; (1e540 <iface_cb+0x200>)
   1e3da:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   1e3de:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
   1e3e2:	3301      	adds	r3, #1
   1e3e4:	b2db      	uxtb	r3, r3
   1e3e6:	2b03      	cmp	r3, #3
   1e3e8:	4601      	mov	r1, r0
   1e3ea:	bf96      	itet	ls
   1e3ec:	4855      	ldrls	r0, [pc, #340]	; (1e544 <iface_cb+0x204>)
	switch (addr_state) {
   1e3ee:	4b56      	ldrhi	r3, [pc, #344]	; (1e548 <iface_cb+0x208>)
   1e3f0:	f850 3023 	ldrls.w	r3, [r0, r3, lsl #2]
		printk("\t%s %s %s%s\n",
   1e3f4:	f895 0063 	ldrb.w	r0, [r5, #99]	; 0x63
   1e3f8:	2800      	cmp	r0, #0
   1e3fa:	bf14      	ite	ne
   1e3fc:	4648      	movne	r0, r9
   1e3fe:	4650      	moveq	r0, sl
   1e400:	9000      	str	r0, [sp, #0]
   1e402:	4658      	mov	r0, fp
   1e404:	f7e3 fa06 	bl	1814 <printk>
		count++;
   1e408:	3701      	adds	r7, #1
   1e40a:	356c      	adds	r5, #108	; 0x6c
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1e40c:	4545      	cmp	r5, r8
   1e40e:	d1d8      	bne.n	1e3c2 <iface_cb+0x82>
	if (count == 0) {
   1e410:	b917      	cbnz	r7, 1e418 <iface_cb+0xd8>
		printk("\t<none>\n");
   1e412:	484e      	ldr	r0, [pc, #312]	; (1e54c <iface_cb+0x20c>)
   1e414:	f7e3 f9fe 	bl	1814 <printk>
	printk("IPv6 multicast addresses (max %d):\n", NET_IF_MAX_IPV6_MADDR);
   1e418:	2102      	movs	r1, #2
   1e41a:	484d      	ldr	r0, [pc, #308]	; (1e550 <iface_cb+0x210>)
   1e41c:	f7e3 f9fa 	bl	1814 <printk>
		if (!mcast->is_used) {
   1e420:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   1e424:	f013 0301 	ands.w	r3, r3, #1
   1e428:	d06d      	beq.n	1e506 <iface_cb+0x1c6>
		printk("\t%s\n",
   1e42a:	f504 70bc 	add.w	r0, r4, #376	; 0x178
   1e42e:	f7ff fe45 	bl	1e0bc <net_sprint_ipv6_addr>
   1e432:	4601      	mov	r1, r0
   1e434:	4847      	ldr	r0, [pc, #284]	; (1e554 <iface_cb+0x214>)
   1e436:	f7e3 f9ed 	bl	1814 <printk>
		if (!mcast->is_used) {
   1e43a:	f894 3188 	ldrb.w	r3, [r4, #392]	; 0x188
   1e43e:	07db      	lsls	r3, r3, #31
   1e440:	d508      	bpl.n	1e454 <iface_cb+0x114>
		printk("\t%s\n",
   1e442:	f504 70c8 	add.w	r0, r4, #400	; 0x190
   1e446:	f7ff fe39 	bl	1e0bc <net_sprint_ipv6_addr>
   1e44a:	4601      	mov	r1, r0
   1e44c:	4841      	ldr	r0, [pc, #260]	; (1e554 <iface_cb+0x214>)
   1e44e:	f7e3 f9e1 	bl	1814 <printk>
		count++;
   1e452:	3601      	adds	r6, #1
	if (count == 0) {
   1e454:	b916      	cbnz	r6, 1e45c <iface_cb+0x11c>
		printk("\t<none>\n");
   1e456:	483d      	ldr	r0, [pc, #244]	; (1e54c <iface_cb+0x20c>)
   1e458:	f7e3 f9dc 	bl	1814 <printk>
	printk("IPv6 prefixes (max %d):\n", NET_IF_MAX_IPV6_PREFIX);
   1e45c:	2102      	movs	r1, #2
   1e45e:	483e      	ldr	r0, [pc, #248]	; (1e558 <iface_cb+0x218>)
		printk("\t%s/%d%s\n",
   1e460:	f8df 8100 	ldr.w	r8, [pc, #256]	; 1e564 <iface_cb+0x224>
   1e464:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 1e560 <iface_cb+0x220>
   1e468:	f8df a114 	ldr.w	sl, [pc, #276]	; 1e580 <iface_cb+0x240>
	printk("IPv6 prefixes (max %d):\n", NET_IF_MAX_IPV6_PREFIX);
   1e46c:	f7e3 f9d2 	bl	1814 <printk>
   1e470:	f504 75e4 	add.w	r5, r4, #456	; 0x1c8
   1e474:	f504 7710 	add.w	r7, r4, #576	; 0x240
	count = 0;
   1e478:	2600      	movs	r6, #0
		if (!prefix->is_used) {
   1e47a:	7cab      	ldrb	r3, [r5, #18]
   1e47c:	b16b      	cbz	r3, 1e49a <iface_cb+0x15a>
		printk("\t%s/%d%s\n",
   1e47e:	4628      	mov	r0, r5
   1e480:	f7ff fe1c 	bl	1e0bc <net_sprint_ipv6_addr>
   1e484:	7c6b      	ldrb	r3, [r5, #17]
   1e486:	7c2a      	ldrb	r2, [r5, #16]
   1e488:	4601      	mov	r1, r0
   1e48a:	2b00      	cmp	r3, #0
   1e48c:	bf14      	ite	ne
   1e48e:	4643      	movne	r3, r8
   1e490:	464b      	moveq	r3, r9
   1e492:	4650      	mov	r0, sl
   1e494:	f7e3 f9be 	bl	1814 <printk>
		count++;
   1e498:	3601      	adds	r6, #1
   1e49a:	353c      	adds	r5, #60	; 0x3c
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1e49c:	42af      	cmp	r7, r5
   1e49e:	d1ec      	bne.n	1e47a <iface_cb+0x13a>
	if (count == 0) {
   1e4a0:	b916      	cbnz	r6, 1e4a8 <iface_cb+0x168>
		printk("\t<none>\n");
   1e4a2:	482a      	ldr	r0, [pc, #168]	; (1e54c <iface_cb+0x20c>)
   1e4a4:	f7e3 f9b6 	bl	1814 <printk>
	router = net_if_ipv6_router_find_default(iface, NULL);
   1e4a8:	2100      	movs	r1, #0
   1e4aa:	4620      	mov	r0, r4
   1e4ac:	f7fa ff00 	bl	192b0 <net_if_ipv6_router_find_default>
	if (router) {
   1e4b0:	4605      	mov	r5, r0
   1e4b2:	b188      	cbz	r0, 1e4d8 <iface_cb+0x198>
		printk("IPv6 default router :\n");
   1e4b4:	4829      	ldr	r0, [pc, #164]	; (1e55c <iface_cb+0x21c>)
   1e4b6:	f7e3 f9ad 	bl	1814 <printk>
		printk("\t%s%s\n",
   1e4ba:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   1e4be:	f7ff fdfd 	bl	1e0bc <net_sprint_ipv6_addr>
   1e4c2:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
   1e4c6:	4b26      	ldr	r3, [pc, #152]	; (1e560 <iface_cb+0x220>)
   1e4c8:	4a26      	ldr	r2, [pc, #152]	; (1e564 <iface_cb+0x224>)
   1e4ca:	2900      	cmp	r1, #0
   1e4cc:	bf08      	it	eq
   1e4ce:	461a      	moveq	r2, r3
   1e4d0:	4601      	mov	r1, r0
   1e4d2:	4825      	ldr	r0, [pc, #148]	; (1e568 <iface_cb+0x228>)
   1e4d4:	f7e3 f99e 	bl	1814 <printk>
	printk("IPv6 hop limit           : %d\n", iface->ipv6.hop_limit);
   1e4d8:	f894 124c 	ldrb.w	r1, [r4, #588]	; 0x24c
   1e4dc:	4823      	ldr	r0, [pc, #140]	; (1e56c <iface_cb+0x22c>)
   1e4de:	f7e3 f999 	bl	1814 <printk>
	printk("IPv6 base reachable time : %d\n",
   1e4e2:	f8d4 1240 	ldr.w	r1, [r4, #576]	; 0x240
   1e4e6:	4822      	ldr	r0, [pc, #136]	; (1e570 <iface_cb+0x230>)
   1e4e8:	f7e3 f994 	bl	1814 <printk>
	printk("IPv6 reachable time      : %d\n", iface->ipv6.reachable_time);
   1e4ec:	f8d4 1244 	ldr.w	r1, [r4, #580]	; 0x244
   1e4f0:	4820      	ldr	r0, [pc, #128]	; (1e574 <iface_cb+0x234>)
   1e4f2:	f7e3 f98f 	bl	1814 <printk>
	printk("IPv6 retransmit timer    : %d\n", iface->ipv6.retrans_timer);
   1e4f6:	f8d4 1248 	ldr.w	r1, [r4, #584]	; 0x248
   1e4fa:	481f      	ldr	r0, [pc, #124]	; (1e578 <iface_cb+0x238>)
}
   1e4fc:	b003      	add	sp, #12
   1e4fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	printk("IPv6 retransmit timer    : %d\n", iface->ipv6.retrans_timer);
   1e502:	f7e3 b987 	b.w	1814 <printk>
	count = 0;
   1e506:	461e      	mov	r6, r3
   1e508:	e797      	b.n	1e43a <iface_cb+0xfa>
   1e50a:	bf00      	nop
   1e50c:	00021850 	.word	0x00021850
   1e510:	00022b73 	.word	0x00022b73
   1e514:	00022b6e 	.word	0x00022b6e
   1e518:	00022b8c 	.word	0x00022b8c
   1e51c:	00022b7d 	.word	0x00022b7d
   1e520:	00022a08 	.word	0x00022a08
   1e524:	00022bca 	.word	0x00022bca
   1e528:	00022a1c 	.word	0x00022a1c
   1e52c:	2000323c 	.word	0x2000323c
   1e530:	00022a30 	.word	0x00022a30
   1e534:	00022a40 	.word	0x00022a40
   1e538:	00022a50 	.word	0x00022a50
   1e53c:	00022968 	.word	0x00022968
   1e540:	000229ef 	.word	0x000229ef
   1e544:	0002297c 	.word	0x0002297c
   1e548:	00022918 	.word	0x00022918
   1e54c:	00022a7f 	.word	0x00022a7f
   1e550:	00022a88 	.word	0x00022a88
   1e554:	00022aac 	.word	0x00022aac
   1e558:	00022ab1 	.word	0x00022ab1
   1e55c:	00022ad4 	.word	0x00022ad4
   1e560:	00023263 	.word	0x00023263
   1e564:	000229fe 	.word	0x000229fe
   1e568:	00022aeb 	.word	0x00022aeb
   1e56c:	00022af2 	.word	0x00022af2
   1e570:	00022b11 	.word	0x00022b11
   1e574:	00022b30 	.word	0x00022b30
   1e578:	00022b4f 	.word	0x00022b4f
   1e57c:	00022a72 	.word	0x00022a72
   1e580:	00022aca 	.word	0x00022aca

0001e584 <net_shell_cmd_ping>:
{
   1e584:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1e586:	460c      	mov	r4, r1
	if (!strcmp(argv[0], "ping")) {
   1e588:	4927      	ldr	r1, [pc, #156]	; (1e628 <net_shell_cmd_ping+0xa4>)
   1e58a:	6820      	ldr	r0, [r4, #0]
   1e58c:	f7e2 f8c0 	bl	710 <strcmp>
   1e590:	b938      	cbnz	r0, 1e5a2 <net_shell_cmd_ping+0x1e>
		host = argv[1];
   1e592:	6864      	ldr	r4, [r4, #4]
	if (!host) {
   1e594:	b93c      	cbnz	r4, 1e5a6 <net_shell_cmd_ping+0x22>
		printk("Target host missing\n");
   1e596:	4825      	ldr	r0, [pc, #148]	; (1e62c <net_shell_cmd_ping+0xa8>)
		printk("Cannot send IPv6 ping\n");
   1e598:	f7e3 f93c 	bl	1814 <printk>
}
   1e59c:	2000      	movs	r0, #0
   1e59e:	b004      	add	sp, #16
   1e5a0:	bd70      	pop	{r4, r5, r6, pc}
		host = argv[2];
   1e5a2:	68a4      	ldr	r4, [r4, #8]
   1e5a4:	e7f6      	b.n	1e594 <net_shell_cmd_ping+0x10>
	struct net_if *iface = net_if_get_default();
   1e5a6:	f7fa fa99 	bl	18adc <net_if_get_default>
	if (net_addr_pton(AF_INET6, host, &ipv6_target) < 0) {
   1e5aa:	466a      	mov	r2, sp
	struct net_if *iface = net_if_get_default();
   1e5ac:	4605      	mov	r5, r0
	if (net_addr_pton(AF_INET6, host, &ipv6_target) < 0) {
   1e5ae:	4621      	mov	r1, r4
   1e5b0:	200a      	movs	r0, #10
   1e5b2:	f7fb fe5b 	bl	1a26c <net_addr_pton>
   1e5b6:	2800      	cmp	r0, #0
   1e5b8:	db34      	blt.n	1e624 <net_shell_cmd_ping+0xa0>
	net_icmpv6_register_handler(&ping6_handler);
   1e5ba:	481d      	ldr	r0, [pc, #116]	; (1e630 <net_shell_cmd_ping+0xac>)
   1e5bc:	f7fc fc3e 	bl	1ae3c <net_icmpv6_register_handler>
	nbr = net_ipv6_nbr_lookup(NULL, &ipv6_target);
   1e5c0:	4669      	mov	r1, sp
   1e5c2:	2000      	movs	r0, #0
   1e5c4:	f7fd fed9 	bl	1c37a <net_ipv6_nbr_lookup>
	if (nbr) {
   1e5c8:	b100      	cbz	r0, 1e5cc <net_shell_cmd_ping+0x48>
		iface = nbr->iface;
   1e5ca:	6885      	ldr	r5, [r0, #8]
	route = net_route_lookup(NULL, &ipv6_target);
   1e5cc:	4669      	mov	r1, sp
   1e5ce:	2000      	movs	r0, #0
   1e5d0:	f7ff fb7c 	bl	1dccc <net_route_lookup>
	if (route) {
   1e5d4:	b100      	cbz	r0, 1e5d8 <net_shell_cmd_ping+0x54>
		iface = route->iface;
   1e5d6:	68c5      	ldr	r5, [r0, #12]
					   sys_rand32_get(),
   1e5d8:	f7e3 ff4a 	bl	2470 <sys_rand32_get>
   1e5dc:	4606      	mov	r6, r0
					   sys_rand32_get());
   1e5de:	f7e3 ff47 	bl	2470 <sys_rand32_get>
	ret = net_icmpv6_send_echo_request(iface,
   1e5e2:	b2b2      	uxth	r2, r6
   1e5e4:	b283      	uxth	r3, r0
   1e5e6:	4669      	mov	r1, sp
   1e5e8:	4628      	mov	r0, r5
   1e5ea:	f7fd f8b9 	bl	1b760 <net_icmpv6_send_echo_request>
	if (ret) {
   1e5ee:	4605      	mov	r5, r0
   1e5f0:	b130      	cbz	r0, 1e600 <net_shell_cmd_ping+0x7c>
	net_icmpv6_unregister_handler(&ping6_handler);
   1e5f2:	480f      	ldr	r0, [pc, #60]	; (1e630 <net_shell_cmd_ping+0xac>)
   1e5f4:	f7fc fc2c 	bl	1ae50 <net_icmpv6_unregister_handler>
	} else if (ret == -EIO) {
   1e5f8:	3505      	adds	r5, #5
   1e5fa:	d113      	bne.n	1e624 <net_shell_cmd_ping+0xa0>
		printk("Cannot send IPv6 ping\n");
   1e5fc:	480d      	ldr	r0, [pc, #52]	; (1e634 <net_shell_cmd_ping+0xb0>)
   1e5fe:	e7cb      	b.n	1e598 <net_shell_cmd_ping+0x14>
		printk("Sent a ping to %s\n", host);
   1e600:	4621      	mov	r1, r4
   1e602:	480d      	ldr	r0, [pc, #52]	; (1e638 <net_shell_cmd_ping+0xb4>)
   1e604:	f7e3 f906 	bl	1814 <printk>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1e608:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   1e60c:	480b      	ldr	r0, [pc, #44]	; (1e63c <net_shell_cmd_ping+0xb8>)
   1e60e:	f002 fac1 	bl	20b94 <_impl_k_sem_take>
	if (ret == -EAGAIN) {
   1e612:	300b      	adds	r0, #11
   1e614:	d1c2      	bne.n	1e59c <net_shell_cmd_ping+0x18>
		printk("Ping timeout\n");
   1e616:	480a      	ldr	r0, [pc, #40]	; (1e640 <net_shell_cmd_ping+0xbc>)
   1e618:	f7e3 f8fc 	bl	1814 <printk>
	net_icmpv6_unregister_handler(&ping6_handler);
   1e61c:	4804      	ldr	r0, [pc, #16]	; (1e630 <net_shell_cmd_ping+0xac>)
   1e61e:	f7fc fc17 	bl	1ae50 <net_icmpv6_unregister_handler>
   1e622:	e7bb      	b.n	1e59c <net_shell_cmd_ping+0x18>
			printk("Invalid IP address\n");
   1e624:	4807      	ldr	r0, [pc, #28]	; (1e644 <net_shell_cmd_ping+0xc0>)
   1e626:	e7b7      	b.n	1e598 <net_shell_cmd_ping+0x14>
   1e628:	00022f65 	.word	0x00022f65
   1e62c:	00022f6a 	.word	0x00022f6a
   1e630:	2000e98c 	.word	0x2000e98c
   1e634:	00022f92 	.word	0x00022f92
   1e638:	00022f7f 	.word	0x00022f7f
   1e63c:	2000ecbc 	.word	0x2000ecbc
   1e640:	00022fbd 	.word	0x00022fbd
   1e644:	00022fa9 	.word	0x00022fa9

0001e648 <route_cb>:
	if (entry->iface != iface) {
   1e648:	68c3      	ldr	r3, [r0, #12]
   1e64a:	428b      	cmp	r3, r1
{
   1e64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e650:	4604      	mov	r4, r0
	if (entry->iface != iface) {
   1e652:	d131      	bne.n	1e6b8 <route_cb+0x70>
	printk("IPv6 prefix : %s/%d\n",
   1e654:	3010      	adds	r0, #16
   1e656:	f7ff fd31 	bl	1e0bc <net_sprint_ipv6_addr>
   1e65a:	f894 2020 	ldrb.w	r2, [r4, #32]
		printk("\tneighbor : %p\t", nexthop_route->nbr);
   1e65e:	4e17      	ldr	r6, [pc, #92]	; (1e6bc <route_cb+0x74>)
   1e660:	4f17      	ldr	r7, [pc, #92]	; (1e6c0 <route_cb+0x78>)
			printk("addr : %s\n",
   1e662:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1e6d0 <route_cb+0x88>
	printk("IPv6 prefix : %s/%d\n",
   1e666:	4601      	mov	r1, r0
   1e668:	4816      	ldr	r0, [pc, #88]	; (1e6c4 <route_cb+0x7c>)
   1e66a:	f7e3 f8d3 	bl	1814 <printk>
   1e66e:	6864      	ldr	r4, [r4, #4]
   1e670:	2500      	movs	r5, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   1e672:	b92c      	cbnz	r4, 1e680 <route_cb+0x38>
	if (count == 0) {
   1e674:	bb05      	cbnz	r5, 1e6b8 <route_cb+0x70>
		printk("\t<none>\n");
   1e676:	4814      	ldr	r0, [pc, #80]	; (1e6c8 <route_cb+0x80>)
}
   1e678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		printk("\t<none>\n");
   1e67c:	f7e3 b8ca 	b.w	1814 <printk>
		if (!nexthop_route->nbr) {
   1e680:	6861      	ldr	r1, [r4, #4]
   1e682:	b151      	cbz	r1, 1e69a <route_cb+0x52>
		printk("\tneighbor : %p\t", nexthop_route->nbr);
   1e684:	4630      	mov	r0, r6
   1e686:	f7e3 f8c5 	bl	1814 <printk>
		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   1e68a:	6863      	ldr	r3, [r4, #4]
   1e68c:	7858      	ldrb	r0, [r3, #1]
   1e68e:	28ff      	cmp	r0, #255	; 0xff
   1e690:	d105      	bne.n	1e69e <route_cb+0x56>
			printk("addr : <unknown>\n");
   1e692:	480e      	ldr	r0, [pc, #56]	; (1e6cc <route_cb+0x84>)
   1e694:	f7e3 f8be 	bl	1814 <printk>
		count++;
   1e698:	3501      	adds	r5, #1
   1e69a:	6824      	ldr	r4, [r4, #0]
   1e69c:	e7e9      	b.n	1e672 <route_cb+0x2a>
			lladdr = net_nbr_get_lladdr(nexthop_route->nbr->idx);
   1e69e:	f7fd f9c3 	bl	1ba28 <net_nbr_get_lladdr>
   1e6a2:	2318      	movs	r3, #24
   1e6a4:	7841      	ldrb	r1, [r0, #1]
   1e6a6:	463a      	mov	r2, r7
   1e6a8:	3002      	adds	r0, #2
   1e6aa:	f7fb fcdb 	bl	1a064 <net_sprint_ll_addr_buf>
			printk("addr : %s\n",
   1e6ae:	4601      	mov	r1, r0
   1e6b0:	4640      	mov	r0, r8
   1e6b2:	f7e3 f8af 	bl	1814 <printk>
   1e6b6:	e7ef      	b.n	1e698 <route_cb+0x50>
   1e6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e6bc:	00023254 	.word	0x00023254
   1e6c0:	2000323c 	.word	0x2000323c
   1e6c4:	0002323f 	.word	0x0002323f
   1e6c8:	00022a7f 	.word	0x00022a7f
   1e6cc:	00023264 	.word	0x00023264
   1e6d0:	00022a35 	.word	0x00022a35

0001e6d4 <net_shell_cmd_stacks>:
{
   1e6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (info = __net_stack_start; info != __net_stack_end; info++) {
   1e6d6:	4c34      	ldr	r4, [pc, #208]	; (1e7a8 <net_shell_cmd_stacks+0xd4>)
   1e6d8:	4d34      	ldr	r5, [pc, #208]	; (1e7ac <net_shell_cmd_stacks+0xd8>)
		printk("%s [%s] stack size %zu/%zu bytes unused %u usage"
   1e6da:	4f35      	ldr	r7, [pc, #212]	; (1e7b0 <net_shell_cmd_stacks+0xdc>)
{
   1e6dc:	b089      	sub	sp, #36	; 0x24
	*pcnt = ((size - *unused) * 100) / size;
   1e6de:	2664      	movs	r6, #100	; 0x64
	for (info = __net_stack_start; info != __net_stack_end; info++) {
   1e6e0:	42ac      	cmp	r4, r5
   1e6e2:	d143      	bne.n	1e76c <net_shell_cmd_stacks+0x98>
	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_main_stack),
   1e6e4:	ab07      	add	r3, sp, #28
   1e6e6:	aa06      	add	r2, sp, #24
   1e6e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1e6ec:	4831      	ldr	r0, [pc, #196]	; (1e7b4 <net_shell_cmd_stacks+0xe0>)
   1e6ee:	f7ff fc22 	bl	1df36 <net_analyze_stack_get_values>
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   1e6f2:	9b07      	ldr	r3, [sp, #28]
   1e6f4:	9a06      	ldr	r2, [sp, #24]
   1e6f6:	9204      	str	r2, [sp, #16]
   1e6f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1e6fc:	1ae2      	subs	r2, r4, r3
   1e6fe:	9202      	str	r2, [sp, #8]
   1e700:	9301      	str	r3, [sp, #4]
   1e702:	9403      	str	r4, [sp, #12]
   1e704:	4623      	mov	r3, r4
   1e706:	9400      	str	r4, [sp, #0]
   1e708:	4a2b      	ldr	r2, [pc, #172]	; (1e7b8 <net_shell_cmd_stacks+0xe4>)
   1e70a:	492c      	ldr	r1, [pc, #176]	; (1e7bc <net_shell_cmd_stacks+0xe8>)
   1e70c:	482c      	ldr	r0, [pc, #176]	; (1e7c0 <net_shell_cmd_stacks+0xec>)
   1e70e:	f7e3 f881 	bl	1814 <printk>
	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_interrupt_stack),
   1e712:	ab07      	add	r3, sp, #28
   1e714:	aa06      	add	r2, sp, #24
   1e716:	f44f 6100 	mov.w	r1, #2048	; 0x800
   1e71a:	482a      	ldr	r0, [pc, #168]	; (1e7c4 <net_shell_cmd_stacks+0xf0>)
   1e71c:	f7ff fc0b 	bl	1df36 <net_analyze_stack_get_values>
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   1e720:	9a07      	ldr	r2, [sp, #28]
   1e722:	9b06      	ldr	r3, [sp, #24]
   1e724:	9304      	str	r3, [sp, #16]
   1e726:	f44f 6300 	mov.w	r3, #2048	; 0x800
   1e72a:	1a99      	subs	r1, r3, r2
   1e72c:	9303      	str	r3, [sp, #12]
   1e72e:	9102      	str	r1, [sp, #8]
   1e730:	9201      	str	r2, [sp, #4]
   1e732:	9300      	str	r3, [sp, #0]
   1e734:	4a24      	ldr	r2, [pc, #144]	; (1e7c8 <net_shell_cmd_stacks+0xf4>)
   1e736:	4925      	ldr	r1, [pc, #148]	; (1e7cc <net_shell_cmd_stacks+0xf8>)
   1e738:	4821      	ldr	r0, [pc, #132]	; (1e7c0 <net_shell_cmd_stacks+0xec>)
   1e73a:	f7e3 f86b 	bl	1814 <printk>
	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(sys_work_q_stack),
   1e73e:	ab07      	add	r3, sp, #28
   1e740:	aa06      	add	r2, sp, #24
   1e742:	4621      	mov	r1, r4
   1e744:	4822      	ldr	r0, [pc, #136]	; (1e7d0 <net_shell_cmd_stacks+0xfc>)
   1e746:	f7ff fbf6 	bl	1df36 <net_analyze_stack_get_values>
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   1e74a:	9b07      	ldr	r3, [sp, #28]
   1e74c:	9a06      	ldr	r2, [sp, #24]
   1e74e:	9204      	str	r2, [sp, #16]
   1e750:	1ae2      	subs	r2, r4, r3
   1e752:	9202      	str	r2, [sp, #8]
   1e754:	9301      	str	r3, [sp, #4]
   1e756:	9403      	str	r4, [sp, #12]
   1e758:	9400      	str	r4, [sp, #0]
   1e75a:	4623      	mov	r3, r4
   1e75c:	4a1d      	ldr	r2, [pc, #116]	; (1e7d4 <net_shell_cmd_stacks+0x100>)
   1e75e:	491e      	ldr	r1, [pc, #120]	; (1e7d8 <net_shell_cmd_stacks+0x104>)
   1e760:	4817      	ldr	r0, [pc, #92]	; (1e7c0 <net_shell_cmd_stacks+0xec>)
   1e762:	f7e3 f857 	bl	1814 <printk>
}
   1e766:	2000      	movs	r0, #0
   1e768:	b009      	add	sp, #36	; 0x24
   1e76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
   1e76c:	6821      	ldr	r1, [r4, #0]
   1e76e:	6922      	ldr	r2, [r4, #16]
	size_t unused = 0;
   1e770:	2300      	movs	r3, #0
	for (i = 0; i < size; i++) {
   1e772:	429a      	cmp	r2, r3
   1e774:	d002      	beq.n	1e77c <net_shell_cmd_stacks+0xa8>
		if ((unsigned char)stack[i] == 0xaa) {
   1e776:	5cc8      	ldrb	r0, [r1, r3]
   1e778:	28aa      	cmp	r0, #170	; 0xaa
   1e77a:	d012      	beq.n	1e7a2 <net_shell_cmd_stacks+0xce>
		printk("%s [%s] stack size %zu/%zu bytes unused %u usage"
   1e77c:	e88d 000c 	stmia.w	sp, {r2, r3}
   1e780:	1ad0      	subs	r0, r2, r3
   1e782:	9002      	str	r0, [sp, #8]
   1e784:	fb06 f100 	mul.w	r1, r6, r0
   1e788:	9203      	str	r2, [sp, #12]
   1e78a:	fbb1 f1f2 	udiv	r1, r1, r2
   1e78e:	9104      	str	r1, [sp, #16]
   1e790:	9106      	str	r1, [sp, #24]
   1e792:	1d21      	adds	r1, r4, #4
	*unused = stack_unused_space_get(stack, size);
   1e794:	9307      	str	r3, [sp, #28]
   1e796:	4638      	mov	r0, r7
   1e798:	c90e      	ldmia	r1, {r1, r2, r3}
   1e79a:	f7e3 f83b 	bl	1814 <printk>
	for (info = __net_stack_start; info != __net_stack_end; info++) {
   1e79e:	3414      	adds	r4, #20
   1e7a0:	e79e      	b.n	1e6e0 <net_shell_cmd_stacks+0xc>
			unused++;
   1e7a2:	3301      	adds	r3, #1
   1e7a4:	e7e5      	b.n	1e772 <net_shell_cmd_stacks+0x9e>
   1e7a6:	bf00      	nop
   1e7a8:	2000f074 	.word	0x2000f074
   1e7ac:	2000f0b0 	.word	0x2000f0b0
   1e7b0:	00022ffe 	.word	0x00022ffe
   1e7b4:	2000cc88 	.word	0x2000cc88
   1e7b8:	00023040 	.word	0x00023040
   1e7bc:	0002304c 	.word	0x0002304c
   1e7c0:	00023051 	.word	0x00023051
   1e7c4:	2000d1c8 	.word	0x2000d1c8
   1e7c8:	0002308f 	.word	0x0002308f
   1e7cc:	00022018 	.word	0x00022018
   1e7d0:	2000d9c8 	.word	0x2000d9c8
   1e7d4:	000230a0 	.word	0x000230a0
   1e7d8:	000230b1 	.word	0x000230b1

0001e7dc <_handle_ipv6_echo_reply>:
{
   1e7dc:	b510      	push	{r4, lr}
	return pkt->frags->data;
   1e7de:	6883      	ldr	r3, [r0, #8]
   1e7e0:	4604      	mov	r4, r0
		 net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->dst));
   1e7e2:	6898      	ldr	r0, [r3, #8]
{
   1e7e4:	b08a      	sub	sp, #40	; 0x28
	snprintk(addr, sizeof(addr), "%s",
   1e7e6:	3018      	adds	r0, #24
   1e7e8:	f7ff fc68 	bl	1e0bc <net_sprint_ipv6_addr>
   1e7ec:	4a0d      	ldr	r2, [pc, #52]	; (1e824 <_handle_ipv6_echo_reply+0x48>)
   1e7ee:	4603      	mov	r3, r0
   1e7f0:	2128      	movs	r1, #40	; 0x28
   1e7f2:	4668      	mov	r0, sp
   1e7f4:	f7e3 f81c 	bl	1830 <snprintk>
   1e7f8:	68a3      	ldr	r3, [r4, #8]
	       net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->src), addr);
   1e7fa:	6898      	ldr	r0, [r3, #8]
	printk("Received echo reply from %s to %s\n",
   1e7fc:	3008      	adds	r0, #8
   1e7fe:	f7ff fc5d 	bl	1e0bc <net_sprint_ipv6_addr>
   1e802:	466a      	mov	r2, sp
   1e804:	4601      	mov	r1, r0
   1e806:	4808      	ldr	r0, [pc, #32]	; (1e828 <_handle_ipv6_echo_reply+0x4c>)
   1e808:	f7e3 f804 	bl	1814 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1e80c:	4807      	ldr	r0, [pc, #28]	; (1e82c <_handle_ipv6_echo_reply+0x50>)
   1e80e:	f002 f961 	bl	20ad4 <_impl_k_sem_give>
	net_icmpv6_unregister_handler(&ping6_handler);
   1e812:	4807      	ldr	r0, [pc, #28]	; (1e830 <_handle_ipv6_echo_reply+0x54>)
   1e814:	f7fc fb1c 	bl	1ae50 <net_icmpv6_unregister_handler>
	net_pkt_unref(pkt);
   1e818:	4620      	mov	r0, r4
   1e81a:	f7fb f8ca 	bl	199b2 <net_pkt_unref>
}
   1e81e:	2000      	movs	r0, #0
   1e820:	b00a      	add	sp, #40	; 0x28
   1e822:	bd10      	pop	{r4, pc}
   1e824:	0002225d 	.word	0x0002225d
   1e828:	0002298c 	.word	0x0002298c
   1e82c:	2000ecbc 	.word	0x2000ecbc
   1e830:	2000e98c 	.word	0x2000e98c

0001e834 <nbr_cb>:
{
   1e834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (*count == 0) {
   1e838:	680b      	ldr	r3, [r1, #0]
{
   1e83a:	b08f      	sub	sp, #60	; 0x3c
   1e83c:	4604      	mov	r4, r0
   1e83e:	460f      	mov	r7, r1
	if (*count == 0) {
   1e840:	b91b      	cbnz	r3, 1e84a <nbr_cb+0x16>
		printk("     Neighbor   Interface        Flags State     "
   1e842:	492e      	ldr	r1, [pc, #184]	; (1e8fc <nbr_cb+0xc8>)
   1e844:	482e      	ldr	r0, [pc, #184]	; (1e900 <nbr_cb+0xcc>)
   1e846:	f7e2 ffe5 	bl	1814 <printk>
	(*count)++;
   1e84a:	683b      	ldr	r3, [r7, #0]
   1e84c:	4e2b      	ldr	r6, [pc, #172]	; (1e8fc <nbr_cb+0xc8>)
		state_pad = "    ";
   1e84e:	4d2d      	ldr	r5, [pc, #180]	; (1e904 <nbr_cb+0xd0>)
	(*count)++;
   1e850:	3301      	adds	r3, #1
   1e852:	603b      	str	r3, [r7, #0]
	state_str = net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state);
   1e854:	68e3      	ldr	r3, [r4, #12]
   1e856:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
   1e85a:	f7fd fae7 	bl	1be2c <net_ipv6_nbr_state2str>
   1e85e:	4681      	mov	r9, r0
	if (strlen(state_str) == 5) {
   1e860:	f7e1 ff4e 	bl	700 <strlen>
		state_pad = "    ";
   1e864:	2805      	cmp	r0, #5
   1e866:	bf18      	it	ne
   1e868:	4635      	movne	r5, r6
   1e86a:	68e0      	ldr	r0, [r4, #12]
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   1e86c:	683f      	ldr	r7, [r7, #0]
   1e86e:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
   1e872:	930a      	str	r3, [sp, #40]	; 0x28
   1e874:	7823      	ldrb	r3, [r4, #0]
   1e876:	930b      	str	r3, [sp, #44]	; 0x2c
   1e878:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
   1e87c:	930c      	str	r3, [sp, #48]	; 0x30
	return _timeout_remaining_get(&work->timeout);
   1e87e:	3020      	adds	r0, #32
   1e880:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
   1e884:	f8d4 8008 	ldr.w	r8, [r4, #8]
   1e888:	930d      	str	r3, [sp, #52]	; 0x34
   1e88a:	f002 fda1 	bl	213d0 <_timeout_remaining_get>
   1e88e:	4682      	mov	sl, r0
	       nbr->idx == NET_NBR_LLADDR_UNKNOWN ? "?" :
   1e890:	7860      	ldrb	r0, [r4, #1]
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   1e892:	28ff      	cmp	r0, #255	; 0xff
   1e894:	d02e      	beq.n	1e8f4 <nbr_cb+0xc0>
		       net_nbr_get_lladdr(nbr->idx)->addr,
   1e896:	f7fd f8c7 	bl	1ba28 <net_nbr_get_lladdr>
   1e89a:	4683      	mov	fp, r0
		       net_nbr_get_lladdr(nbr->idx)->len),
   1e89c:	7860      	ldrb	r0, [r4, #1]
   1e89e:	f7fd f8c3 	bl	1ba28 <net_nbr_get_lladdr>
   1e8a2:	2318      	movs	r3, #24
   1e8a4:	7841      	ldrb	r1, [r0, #1]
   1e8a6:	4a18      	ldr	r2, [pc, #96]	; (1e908 <nbr_cb+0xd4>)
   1e8a8:	f10b 0002 	add.w	r0, fp, #2
   1e8ac:	f7fb fbda 	bl	1a064 <net_sprint_ll_addr_buf>
   1e8b0:	4683      	mov	fp, r0
	       net_nbr_get_lladdr(nbr->idx)->len == 8 ? "" : padding,
   1e8b2:	7860      	ldrb	r0, [r4, #1]
   1e8b4:	f7fd f8b8 	bl	1ba28 <net_nbr_get_lladdr>
	       net_sprint_ipv6_addr(&net_ipv6_nbr_data(nbr)->addr));
   1e8b8:	68e0      	ldr	r0, [r4, #12]
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   1e8ba:	3004      	adds	r0, #4
   1e8bc:	f7ff fbfe 	bl	1e0bc <net_sprint_ipv6_addr>
   1e8c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1e8c2:	9303      	str	r3, [sp, #12]
   1e8c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1e8c6:	9302      	str	r3, [sp, #8]
   1e8c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e8ca:	9301      	str	r3, [sp, #4]
   1e8cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e8ce:	9009      	str	r0, [sp, #36]	; 0x24
   1e8d0:	9300      	str	r3, [sp, #0]
   1e8d2:	9608      	str	r6, [sp, #32]
   1e8d4:	f8cd b01c 	str.w	fp, [sp, #28]
   1e8d8:	f8cd a018 	str.w	sl, [sp, #24]
   1e8dc:	9505      	str	r5, [sp, #20]
   1e8de:	f8cd 9010 	str.w	r9, [sp, #16]
   1e8e2:	4643      	mov	r3, r8
   1e8e4:	4622      	mov	r2, r4
   1e8e6:	4639      	mov	r1, r7
   1e8e8:	4808      	ldr	r0, [pc, #32]	; (1e90c <nbr_cb+0xd8>)
   1e8ea:	f7e2 ff93 	bl	1814 <printk>
}
   1e8ee:	b00f      	add	sp, #60	; 0x3c
   1e8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   1e8f4:	f8df b018 	ldr.w	fp, [pc, #24]	; 1e910 <nbr_cb+0xdc>
   1e8f8:	e7db      	b.n	1e8b2 <nbr_cb+0x7e>
   1e8fa:	bf00      	nop
   1e8fc:	00023263 	.word	0x00023263
   1e900:	00022be7 	.word	0x00022be7
   1e904:	00023b30 	.word	0x00023b30
   1e908:	2000323c 	.word	0x2000323c
   1e90c:	00022c3d 	.word	0x00022c3d
   1e910:	00022be5 	.word	0x00022be5

0001e914 <net_is_ipv6_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1e914:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1e916:	b942      	cbnz	r2, 1e92a <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1e918:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1e91a:	b933      	cbnz	r3, 1e92a <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1e91c:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1e91e:	b922      	cbnz	r2, 1e92a <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1e920:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1e922:	fab0 f080 	clz	r0, r0
   1e926:	0940      	lsrs	r0, r0, #5
   1e928:	4770      	bx	lr
   1e92a:	2000      	movs	r0, #0
   1e92c:	4770      	bx	lr

0001e92e <check_addr>:
}

static bool check_addr(struct net_pkt *pkt,
		       struct sockaddr *addr,
		       bool is_remote)
{
   1e92e:	b538      	push	{r3, r4, r5, lr}
	return pkt->family;
   1e930:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
	if (addr->sa_family != net_pkt_family(pkt)) {
   1e934:	880c      	ldrh	r4, [r1, #0]
   1e936:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1e93a:	429c      	cmp	r4, r3
   1e93c:	d117      	bne.n	1e96e <check_addr+0x40>
		return false;
	}

#if defined(CONFIG_NET_IPV6)
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   1e93e:	2b0a      	cmp	r3, #10
   1e940:	d117      	bne.n	1e972 <check_addr+0x44>
   1e942:	2c0a      	cmp	r4, #10
   1e944:	d115      	bne.n	1e972 <check_addr+0x44>
   1e946:	6883      	ldr	r3, [r0, #8]
		struct in6_addr *addr6;

		if (is_remote) {
			addr6 = &NET_IPV6_HDR(pkt)->src;
   1e948:	689c      	ldr	r4, [r3, #8]
		if (is_remote) {
   1e94a:	b172      	cbz	r2, 1e96a <check_addr+0x3c>
			addr6 = &NET_IPV6_HDR(pkt)->src;
   1e94c:	3408      	adds	r4, #8
		} else {
			addr6 = &NET_IPV6_HDR(pkt)->dst;
		}

		if (!net_is_ipv6_addr_unspecified(
			    &net_sin6(addr)->sin6_addr)) {
   1e94e:	1d0d      	adds	r5, r1, #4
		if (!net_is_ipv6_addr_unspecified(
   1e950:	4628      	mov	r0, r5
   1e952:	f7ff ffdf 	bl	1e914 <net_is_ipv6_addr_unspecified>
   1e956:	b968      	cbnz	r0, 1e974 <check_addr+0x46>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1e958:	2210      	movs	r2, #16
   1e95a:	4621      	mov	r1, r4
   1e95c:	4628      	mov	r0, r5
   1e95e:	f7e1 ff00 	bl	762 <memcmp>
			if (!net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
   1e962:	fab0 f080 	clz	r0, r0
   1e966:	0940      	lsrs	r0, r0, #5
   1e968:	bd38      	pop	{r3, r4, r5, pc}
			addr6 = &NET_IPV6_HDR(pkt)->dst;
   1e96a:	3418      	adds	r4, #24
   1e96c:	e7ef      	b.n	1e94e <check_addr+0x20>
		return false;
   1e96e:	2000      	movs	r0, #0
   1e970:	bd38      	pop	{r3, r4, r5, pc}
			}
		}
	}
#endif /* CONFIG_NET_IPV4 */

	return true;
   1e972:	2001      	movs	r0, #1
}
   1e974:	bd38      	pop	{r3, r4, r5, pc}
	...

0001e978 <net_conn_unregister>:
{
   1e978:	b508      	push	{r3, lr}
	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
   1e97a:	4b0b      	ldr	r3, [pc, #44]	; (1e9a8 <net_conn_unregister+0x30>)
   1e97c:	4298      	cmp	r0, r3
   1e97e:	d30c      	bcc.n	1e99a <net_conn_unregister+0x22>
   1e980:	33f0      	adds	r3, #240	; 0xf0
   1e982:	4298      	cmp	r0, r3
   1e984:	d809      	bhi.n	1e99a <net_conn_unregister+0x22>
	if (!(conn->flags & NET_CONN_IN_USE)) {
   1e986:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   1e98a:	07db      	lsls	r3, r3, #31
   1e98c:	d508      	bpl.n	1e9a0 <net_conn_unregister+0x28>
	memset(conn, 0, sizeof(*conn));
   1e98e:	223c      	movs	r2, #60	; 0x3c
   1e990:	2100      	movs	r1, #0
   1e992:	f7e1 ff3f 	bl	814 <memset>
	return 0;
   1e996:	2000      	movs	r0, #0
   1e998:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1e99a:	f06f 0015 	mvn.w	r0, #21
   1e99e:	bd08      	pop	{r3, pc}
		return -ENOENT;
   1e9a0:	f06f 0001 	mvn.w	r0, #1
}
   1e9a4:	bd08      	pop	{r3, pc}
   1e9a6:	bf00      	nop
   1e9a8:	2000327c 	.word	0x2000327c

0001e9ac <net_conn_register>:
{
   1e9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e9b0:	b087      	sub	sp, #28
   1e9b2:	4c6d      	ldr	r4, [pc, #436]	; (1eb68 <net_conn_register+0x1bc>)
   1e9b4:	9301      	str	r3, [sp, #4]
   1e9b6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1e9ba:	9302      	str	r3, [sp, #8]
   1e9bc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1e9c0:	ba5b      	rev16	r3, r3
   1e9c2:	f8ad 300e 	strh.w	r3, [sp, #14]
   1e9c6:	fa1f f983 	uxth.w	r9, r3
   1e9ca:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1e9ce:	fa93 fb93 	rev16.w	fp, r3
   1e9d2:	fa1f f38b 	uxth.w	r3, fp
   1e9d6:	9304      	str	r3, [sp, #16]
					    &net_sin6(remote_addr)->sin6_addr,
   1e9d8:	1d0b      	adds	r3, r1, #4
{
   1e9da:	4682      	mov	sl, r0
   1e9dc:	460e      	mov	r6, r1
   1e9de:	4617      	mov	r7, r2
   1e9e0:	f104 08f0 	add.w	r8, r4, #240	; 0xf0
					    &net_sin6(local_addr)->sin6_addr,
   1e9e4:	1d15      	adds	r5, r2, #4
					    &net_sin6(remote_addr)->sin6_addr,
   1e9e6:	9305      	str	r3, [sp, #20]
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   1e9e8:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
   1e9ec:	07d1      	lsls	r1, r2, #31
   1e9ee:	d413      	bmi.n	1ea18 <net_conn_register+0x6c>
   1e9f0:	343c      	adds	r4, #60	; 0x3c
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   1e9f2:	45a0      	cmp	r8, r4
   1e9f4:	d1f8      	bne.n	1e9e8 <net_conn_register+0x3c>
   1e9f6:	4a5d      	ldr	r2, [pc, #372]	; (1eb6c <net_conn_register+0x1c0>)
   1e9f8:	2400      	movs	r4, #0
   1e9fa:	233c      	movs	r3, #60	; 0x3c
   1e9fc:	fb03 f904 	mul.w	r9, r3, r4
   1ea00:	eb02 0809 	add.w	r8, r2, r9
		if (conns[i].flags & NET_CONN_IN_USE) {
   1ea04:	f898 1039 	ldrb.w	r1, [r8, #57]	; 0x39
   1ea08:	07c9      	lsls	r1, r1, #31
   1ea0a:	d542      	bpl.n	1ea92 <net_conn_register+0xe6>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   1ea0c:	3401      	adds	r4, #1
   1ea0e:	2c04      	cmp	r4, #4
   1ea10:	d1f4      	bne.n	1e9fc <net_conn_register+0x50>
	return -ENOENT;
   1ea12:	f06f 0001 	mvn.w	r0, #1
   1ea16:	e039      	b.n	1ea8c <net_conn_register+0xe0>
		if (conns[i].proto != proto) {
   1ea18:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
   1ea1c:	4551      	cmp	r1, sl
   1ea1e:	d1e7      	bne.n	1e9f0 <net_conn_register+0x44>
   1ea20:	f002 0202 	and.w	r2, r2, #2
		if (remote_addr) {
   1ea24:	b1ae      	cbz	r6, 1ea52 <net_conn_register+0xa6>
			if (!(conns[i].flags & NET_CONN_REMOTE_ADDR_SET)) {
   1ea26:	2a00      	cmp	r2, #0
   1ea28:	d0e2      	beq.n	1e9f0 <net_conn_register+0x44>
			if (remote_addr->sa_family == AF_INET6 &&
   1ea2a:	8832      	ldrh	r2, [r6, #0]
   1ea2c:	2a0a      	cmp	r2, #10
   1ea2e:	d1df      	bne.n	1e9f0 <net_conn_register+0x44>
   1ea30:	f834 2c04 	ldrh.w	r2, [r4, #-4]
   1ea34:	2a0a      	cmp	r2, #10
   1ea36:	d1db      	bne.n	1e9f0 <net_conn_register+0x44>
   1ea38:	2210      	movs	r2, #16
   1ea3a:	4621      	mov	r1, r4
   1ea3c:	9805      	ldr	r0, [sp, #20]
   1ea3e:	f7e1 fe90 	bl	762 <memcmp>
				if (!net_ipv6_addr_cmp(
   1ea42:	2800      	cmp	r0, #0
   1ea44:	d1d4      	bne.n	1e9f0 <net_conn_register+0x44>
   1ea46:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
		if (local_addr) {
   1ea4a:	b92f      	cbnz	r7, 1ea58 <net_conn_register+0xac>
			if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   1ea4c:	0750      	lsls	r0, r2, #29
   1ea4e:	d4cf      	bmi.n	1e9f0 <net_conn_register+0x44>
   1ea50:	e012      	b.n	1ea78 <net_conn_register+0xcc>
			if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   1ea52:	2a00      	cmp	r2, #0
   1ea54:	d1cc      	bne.n	1e9f0 <net_conn_register+0x44>
   1ea56:	e7f6      	b.n	1ea46 <net_conn_register+0x9a>
			if (!(conns[i].flags & NET_CONN_LOCAL_ADDR_SET)) {
   1ea58:	0753      	lsls	r3, r2, #29
   1ea5a:	d5c9      	bpl.n	1e9f0 <net_conn_register+0x44>
			if (local_addr->sa_family == AF_INET6 &&
   1ea5c:	883a      	ldrh	r2, [r7, #0]
   1ea5e:	2a0a      	cmp	r2, #10
   1ea60:	d1c6      	bne.n	1e9f0 <net_conn_register+0x44>
   1ea62:	8aa2      	ldrh	r2, [r4, #20]
   1ea64:	2a0a      	cmp	r2, #10
   1ea66:	d1c3      	bne.n	1e9f0 <net_conn_register+0x44>
   1ea68:	2210      	movs	r2, #16
   1ea6a:	f104 0118 	add.w	r1, r4, #24
   1ea6e:	4628      	mov	r0, r5
   1ea70:	f7e1 fe77 	bl	762 <memcmp>
				if (!net_ipv6_addr_cmp(
   1ea74:	2800      	cmp	r0, #0
   1ea76:	d1bb      	bne.n	1e9f0 <net_conn_register+0x44>
		if (net_sin(&conns[i].remote_addr)->sin_port !=
   1ea78:	f834 2c02 	ldrh.w	r2, [r4, #-2]
   1ea7c:	454a      	cmp	r2, r9
   1ea7e:	d1b7      	bne.n	1e9f0 <net_conn_register+0x44>
		if (net_sin(&conns[i].local_addr)->sin_port !=
   1ea80:	8ae2      	ldrh	r2, [r4, #22]
   1ea82:	9b04      	ldr	r3, [sp, #16]
   1ea84:	429a      	cmp	r2, r3
   1ea86:	d1b3      	bne.n	1e9f0 <net_conn_register+0x44>
		return -EALREADY;
   1ea88:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   1ea8c:	b007      	add	sp, #28
   1ea8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (remote_addr) {
   1ea92:	2e00      	cmp	r6, #0
   1ea94:	d061      	beq.n	1eb5a <net_conn_register+0x1ae>
			if (remote_addr->sa_family == AF_INET6) {
   1ea96:	8833      	ldrh	r3, [r6, #0]
   1ea98:	2b0a      	cmp	r3, #10
   1ea9a:	d002      	beq.n	1eaa2 <net_conn_register+0xf6>
				return -EINVAL;
   1ea9c:	f06f 0015 	mvn.w	r0, #21
   1eaa0:	e7f4      	b.n	1ea8c <net_conn_register+0xe0>
				memcpy(&conns[i].remote_addr, remote_addr,
   1eaa2:	2218      	movs	r2, #24
   1eaa4:	4631      	mov	r1, r6
   1eaa6:	4640      	mov	r0, r8
   1eaa8:	f7e1 fe88 	bl	7bc <memcpy>
				if (net_is_ipv6_addr_unspecified(
   1eaac:	1d30      	adds	r0, r6, #4
   1eaae:	f7ff ff31 	bl	1e914 <net_is_ipv6_addr_unspecified>
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   1eab2:	f898 3039 	ldrb.w	r3, [r8, #57]	; 0x39
					rank |= NET_RANK_REMOTE_UNSPEC_ADDR;
   1eab6:	2800      	cmp	r0, #0
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   1eab8:	f043 0302 	orr.w	r3, r3, #2
					rank |= NET_RANK_REMOTE_UNSPEC_ADDR;
   1eabc:	bf0c      	ite	eq
   1eabe:	2520      	moveq	r5, #32
   1eac0:	2508      	movne	r5, #8
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   1eac2:	f888 3039 	strb.w	r3, [r8, #57]	; 0x39
		if (local_addr) {
   1eac6:	b30f      	cbz	r7, 1eb0c <net_conn_register+0x160>
			if (local_addr->sa_family == AF_INET6) {
   1eac8:	883b      	ldrh	r3, [r7, #0]
   1eaca:	2b0a      	cmp	r3, #10
   1eacc:	d1e6      	bne.n	1ea9c <net_conn_register+0xf0>
				memcpy(&conns[i].local_addr, local_addr,
   1eace:	4b27      	ldr	r3, [pc, #156]	; (1eb6c <net_conn_register+0x1c0>)
   1ead0:	9304      	str	r3, [sp, #16]
   1ead2:	f109 0018 	add.w	r0, r9, #24
   1ead6:	4418      	add	r0, r3
   1ead8:	2218      	movs	r2, #24
   1eada:	4639      	mov	r1, r7
   1eadc:	f7e1 fe6e 	bl	7bc <memcpy>
				if (net_is_ipv6_addr_unspecified(
   1eae0:	1d38      	adds	r0, r7, #4
   1eae2:	f7ff ff17 	bl	1e914 <net_is_ipv6_addr_unspecified>
   1eae6:	9b04      	ldr	r3, [sp, #16]
   1eae8:	2800      	cmp	r0, #0
   1eaea:	d038      	beq.n	1eb5e <net_conn_register+0x1b2>
					rank |= NET_RANK_LOCAL_UNSPEC_ADDR;
   1eaec:	f045 0504 	orr.w	r5, r5, #4
			conns[i].flags |= NET_CONN_LOCAL_ADDR_SET;
   1eaf0:	223c      	movs	r2, #60	; 0x3c
   1eaf2:	fb02 3304 	mla	r3, r2, r4, r3
   1eaf6:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   1eafa:	f042 0204 	orr.w	r2, r2, #4
   1eafe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (remote_addr && local_addr) {
   1eb02:	b11e      	cbz	r6, 1eb0c <net_conn_register+0x160>
			if (remote_addr->sa_family != local_addr->sa_family) {
   1eb04:	8832      	ldrh	r2, [r6, #0]
   1eb06:	883b      	ldrh	r3, [r7, #0]
   1eb08:	429a      	cmp	r2, r3
   1eb0a:	d1c7      	bne.n	1ea9c <net_conn_register+0xf0>
		if (remote_port) {
   1eb0c:	9b01      	ldr	r3, [sp, #4]
   1eb0e:	b12b      	cbz	r3, 1eb1c <net_conn_register+0x170>
			net_sin(&conns[i].remote_addr)->sin_port =
   1eb10:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1eb14:	f8a8 3002 	strh.w	r3, [r8, #2]
			rank |= NET_RANK_REMOTE_PORT;
   1eb18:	f045 0502 	orr.w	r5, r5, #2
		if (local_port) {
   1eb1c:	9a02      	ldr	r2, [sp, #8]
   1eb1e:	4b13      	ldr	r3, [pc, #76]	; (1eb6c <net_conn_register+0x1c0>)
   1eb20:	b122      	cbz	r2, 1eb2c <net_conn_register+0x180>
			net_sin(&conns[i].local_addr)->sin_port =
   1eb22:	4499      	add	r9, r3
			rank |= NET_RANK_LOCAL_PORT;
   1eb24:	f045 0501 	orr.w	r5, r5, #1
			net_sin(&conns[i].local_addr)->sin_port =
   1eb28:	f8a9 b01a 	strh.w	fp, [r9, #26]
		conns[i].flags |= NET_CONN_IN_USE;
   1eb2c:	223c      	movs	r2, #60	; 0x3c
   1eb2e:	fb02 3404 	mla	r4, r2, r4, r3
   1eb32:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conns[i].rank = rank;
   1eb36:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
		conns[i].flags |= NET_CONN_IN_USE;
   1eb3a:	f043 0301 	orr.w	r3, r3, #1
   1eb3e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conns[i].cb = cb;
   1eb42:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1eb44:	6323      	str	r3, [r4, #48]	; 0x30
		conns[i].user_data = user_data;
   1eb46:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1eb48:	6363      	str	r3, [r4, #52]	; 0x34
		if (handle) {
   1eb4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
		conns[i].proto = proto;
   1eb4c:	f884 a038 	strb.w	sl, [r4, #56]	; 0x38
		if (handle) {
   1eb50:	b143      	cbz	r3, 1eb64 <net_conn_register+0x1b8>
			*handle = (struct net_conn_handle *)&conns[i];
   1eb52:	f8c3 8000 	str.w	r8, [r3]
		return 0;
   1eb56:	2000      	movs	r0, #0
   1eb58:	e798      	b.n	1ea8c <net_conn_register+0xe0>
	u8_t rank = 0;
   1eb5a:	4635      	mov	r5, r6
   1eb5c:	e7b3      	b.n	1eac6 <net_conn_register+0x11a>
					rank |= NET_RANK_LOCAL_SPEC_ADDR;
   1eb5e:	f045 0510 	orr.w	r5, r5, #16
   1eb62:	e7c5      	b.n	1eaf0 <net_conn_register+0x144>
		return 0;
   1eb64:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1eb66:	e791      	b.n	1ea8c <net_conn_register+0xe0>
   1eb68:	20003280 	.word	0x20003280
   1eb6c:	2000327c 	.word	0x2000327c

0001eb70 <net_conn_input>:
#endif /* CONFIG_NET_IPV4 */
	}
}

enum net_verdict net_conn_input(enum net_ip_protocol proto, struct net_pkt *pkt)
{
   1eb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* This is only used for getting source and destination ports.
	 * Because both TCP and UDP header have these in the same
	 * location, we can check them both using the UDP struct.
	 */
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   1eb74:	2811      	cmp	r0, #17
{
   1eb76:	b085      	sub	sp, #20
   1eb78:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   1eb7a:	d104      	bne.n	1eb86 <net_conn_input+0x16>
		struct net_udp_hdr hdr, *udp_hdr;

		ARG_UNUSED(hdr);

		udp_hdr = net_udp_get_hdr(pkt, &hdr);
   1eb7c:	a902      	add	r1, sp, #8
   1eb7e:	4620      	mov	r0, r4
   1eb80:	f000 f964 	bl	1ee4c <net_udp_get_hdr>
		if (!udp_hdr) {
   1eb84:	b908      	cbnz	r0, 1eb8a <net_conn_input+0x1a>
		src_port = tcp_hdr->src_port;
		dst_port = tcp_hdr->dst_port;
		chksum = tcp_hdr->chksum;
	} else {
		NET_DBG("No UDP or TCP configured, dropping packet.");
		return NET_DROP;
   1eb86:	2002      	movs	r0, #2
   1eb88:	e06a      	b.n	1ec60 <net_conn_input+0xf0>
   1eb8a:	4d40      	ldr	r5, [pc, #256]	; (1ec8c <net_conn_input+0x11c>)
		chksum = udp_hdr->chksum;
   1eb8c:	88c3      	ldrh	r3, [r0, #6]
		src_port = udp_hdr->src_port;
   1eb8e:	f8b0 9000 	ldrh.w	r9, [r0]
		dst_port = udp_hdr->dst_port;
   1eb92:	f8b0 a002 	ldrh.w	sl, [r0, #2]
		chksum = udp_hdr->chksum;
   1eb96:	9301      	str	r3, [sp, #4]
	s16_t best_rank = -1;
   1eb98:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	int i, best_match = -1;
   1eb9c:	4646      	mov	r6, r8
			ntohs(src_port),
			ntohs(dst_port),
			net_pkt_family(pkt), ntohs(chksum), data_len);
	}

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   1eb9e:	2700      	movs	r7, #0
		/* If we have an existing best_match, and that one
		 * specifies a remote port, then we've matched to a
		 * LISTENING connection that should not override.
		 */
		if (best_match >= 0 &&
		    net_sin(&conns[best_match].remote_addr)->sin_port) {
   1eba0:	f1a5 0b18 	sub.w	fp, r5, #24
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   1eba4:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   1eba8:	07d3      	lsls	r3, r2, #31
   1ebaa:	d52a      	bpl.n	1ec02 <net_conn_input+0x92>
		if (conns[i].proto != proto) {
   1ebac:	f895 1020 	ldrb.w	r1, [r5, #32]
   1ebb0:	2911      	cmp	r1, #17
   1ebb2:	d126      	bne.n	1ec02 <net_conn_input+0x92>
		if (net_sin(&conns[i].remote_addr)->sin_port) {
   1ebb4:	f835 0c16 	ldrh.w	r0, [r5, #-22]
   1ebb8:	f1a5 0118 	sub.w	r1, r5, #24
   1ebbc:	b108      	cbz	r0, 1ebc2 <net_conn_input+0x52>
			if (net_sin(&conns[i].remote_addr)->sin_port !=
   1ebbe:	4581      	cmp	r9, r0
   1ebc0:	d11f      	bne.n	1ec02 <net_conn_input+0x92>
		if (net_sin(&conns[i].local_addr)->sin_port) {
   1ebc2:	8868      	ldrh	r0, [r5, #2]
   1ebc4:	b108      	cbz	r0, 1ebca <net_conn_input+0x5a>
			if (net_sin(&conns[i].local_addr)->sin_port !=
   1ebc6:	4582      	cmp	sl, r0
   1ebc8:	d11b      	bne.n	1ec02 <net_conn_input+0x92>
		if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   1ebca:	0790      	lsls	r0, r2, #30
   1ebcc:	d413      	bmi.n	1ebf6 <net_conn_input+0x86>
		if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   1ebce:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   1ebd2:	0751      	lsls	r1, r2, #29
   1ebd4:	d505      	bpl.n	1ebe2 <net_conn_input+0x72>
			if (!check_addr(pkt, &conns[i].local_addr, false)) {
   1ebd6:	2200      	movs	r2, #0
   1ebd8:	4629      	mov	r1, r5
   1ebda:	4620      	mov	r0, r4
   1ebdc:	f7ff fea7 	bl	1e92e <check_addr>
   1ebe0:	b178      	cbz	r0, 1ec02 <net_conn_input+0x92>
		if (best_match >= 0 &&
   1ebe2:	1c72      	adds	r2, r6, #1
   1ebe4:	d127      	bne.n	1ec36 <net_conn_input+0xc6>
			continue;
		}

		if (best_rank < conns[i].rank) {
   1ebe6:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
   1ebea:	4590      	cmp	r8, r2
			best_rank = conns[i].rank;
   1ebec:	bfbc      	itt	lt
   1ebee:	fa0f f882 	sxthlt.w	r8, r2
   1ebf2:	463e      	movlt	r6, r7
   1ebf4:	e005      	b.n	1ec02 <net_conn_input+0x92>
			if (!check_addr(pkt, &conns[i].remote_addr, true)) {
   1ebf6:	2201      	movs	r2, #1
   1ebf8:	4620      	mov	r0, r4
   1ebfa:	f7ff fe98 	bl	1e92e <check_addr>
   1ebfe:	2800      	cmp	r0, #0
   1ec00:	d1e5      	bne.n	1ebce <net_conn_input+0x5e>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   1ec02:	3701      	adds	r7, #1
   1ec04:	2f04      	cmp	r7, #4
   1ec06:	f105 053c 	add.w	r5, r5, #60	; 0x3c
   1ec0a:	d1cb      	bne.n	1eba4 <net_conn_input+0x34>
			best_match = i;
		}
	}

	if (best_match >= 0) {
   1ec0c:	1c73      	adds	r3, r6, #1
   1ec0e:	4d20      	ldr	r5, [pc, #128]	; (1ec90 <net_conn_input+0x120>)
   1ec10:	d029      	beq.n	1ec66 <net_conn_input+0xf6>
		 */
		if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
		    proto == IPPROTO_UDP) {
			u16_t chksum_calc;

			net_udp_set_chksum(pkt, pkt->frags);
   1ec12:	68a1      	ldr	r1, [r4, #8]
   1ec14:	4620      	mov	r0, r4
   1ec16:	f000 f8b2 	bl	1ed7e <net_udp_set_chksum>
			chksum_calc = net_udp_get_chksum(pkt, pkt->frags);
   1ec1a:	68a1      	ldr	r1, [r4, #8]
   1ec1c:	4620      	mov	r0, r4
   1ec1e:	f000 f8f6 	bl	1ee0e <net_udp_get_chksum>

			if (chksum != chksum_calc) {
   1ec22:	9b01      	ldr	r3, [sp, #4]
   1ec24:	4283      	cmp	r3, r0
   1ec26:	d00d      	beq.n	1ec44 <net_conn_input+0xd4>
	net_stats.udp.chkerr++;
   1ec28:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   1ec2a:	3301      	adds	r3, #1
   1ec2c:	656b      	str	r3, [r5, #84]	; 0x54
	net_stats.udp.drop++;
   1ec2e:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1ec30:	3301      	adds	r3, #1
   1ec32:	64ab      	str	r3, [r5, #72]	; 0x48
   1ec34:	e7a7      	b.n	1eb86 <net_conn_input+0x16>
		    net_sin(&conns[best_match].remote_addr)->sin_port) {
   1ec36:	223c      	movs	r2, #60	; 0x3c
   1ec38:	fb02 b206 	mla	r2, r2, r6, fp
		if (best_match >= 0 &&
   1ec3c:	8852      	ldrh	r2, [r2, #2]
   1ec3e:	2a00      	cmp	r2, #0
   1ec40:	d1df      	bne.n	1ec02 <net_conn_input+0x92>
   1ec42:	e7d0      	b.n	1ebe6 <net_conn_input+0x76>
			conns[best_match].cb,
			conns[best_match].user_data,
			conns[best_match].rank);
#endif /* CONFIG_NET_CONN_CACHE */

		if (conns[best_match].cb(&conns[best_match], pkt,
   1ec44:	4813      	ldr	r0, [pc, #76]	; (1ec94 <net_conn_input+0x124>)
   1ec46:	233c      	movs	r3, #60	; 0x3c
   1ec48:	fb03 0006 	mla	r0, r3, r6, r0
   1ec4c:	4621      	mov	r1, r4
   1ec4e:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1ec50:	6b42      	ldr	r2, [r0, #52]	; 0x34
   1ec52:	4798      	blx	r3
   1ec54:	2802      	cmp	r0, #2
   1ec56:	d0ea      	beq.n	1ec2e <net_conn_input+0xbe>
	net_stats.udp.recv++;
   1ec58:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   1ec5a:	3301      	adds	r3, #1
   1ec5c:	64eb      	str	r3, [r5, #76]	; 0x4c
			goto drop;
		}

		net_stats_update_per_proto_recv(proto);

		return NET_OK;
   1ec5e:	2000      	movs	r0, #0

drop:
	net_stats_update_per_proto_drop(proto);

	return NET_DROP;
}
   1ec60:	b005      	add	sp, #20
   1ec62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec66:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
	if (net_pkt_family(pkt) == AF_INET6 &&
   1ec6a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1ec6e:	2b0a      	cmp	r3, #10
   1ec70:	d1dd      	bne.n	1ec2e <net_conn_input+0xbe>
	return pkt->frags->data;
   1ec72:	68a3      	ldr	r3, [r4, #8]
   1ec74:	689b      	ldr	r3, [r3, #8]
   1ec76:	7e1b      	ldrb	r3, [r3, #24]
   1ec78:	2bff      	cmp	r3, #255	; 0xff
   1ec7a:	d0d8      	beq.n	1ec2e <net_conn_input+0xbe>
		net_icmpv6_send_error(pkt, NET_ICMPV6_DST_UNREACH,
   1ec7c:	2300      	movs	r3, #0
   1ec7e:	463a      	mov	r2, r7
   1ec80:	2101      	movs	r1, #1
   1ec82:	4620      	mov	r0, r4
   1ec84:	f7fc fc08 	bl	1b498 <net_icmpv6_send_error>
   1ec88:	e7d1      	b.n	1ec2e <net_conn_input+0xbe>
   1ec8a:	bf00      	nop
   1ec8c:	20003294 	.word	0x20003294
   1ec90:	20004cf4 	.word	0x20004cf4
   1ec94:	2000327c 	.word	0x2000327c

0001ec98 <net_conn_init>:
		cb(&conns[i], user_data);
	}
}

void net_conn_init(void)
{
   1ec98:	4770      	bx	lr

0001ec9a <net_udp_header_fits>:
{
   1ec9a:	b510      	push	{r4, lr}
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1ec9c:	2208      	movs	r2, #8
{
   1ec9e:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1eca0:	f7fb fb6b 	bl	1a37a <net_header_fits>
   1eca4:	2800      	cmp	r0, #0
}
   1eca6:	bf14      	ite	ne
   1eca8:	4620      	movne	r0, r4
   1ecaa:	2000      	moveq	r0, #0
   1ecac:	bd10      	pop	{r4, pc}

0001ecae <net_udp_insert_raw>:

struct net_pkt *net_udp_insert_raw(struct net_pkt *pkt,
				   u16_t offset,
				   u16_t src_port,
				   u16_t dst_port)
{
   1ecae:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1ecb2:	f8ad 2006 	strh.w	r2, [sp, #6]
	struct net_buf *frag, *prev, *udp;
	u16_t pos;

	frag = net_frag_get_pos(pkt, offset, &pos);
   1ecb6:	f10d 020e 	add.w	r2, sp, #14
{
   1ecba:	f8ad 3004 	strh.w	r3, [sp, #4]
   1ecbe:	4604      	mov	r4, r0
	frag = net_frag_get_pos(pkt, offset, &pos);
   1ecc0:	f7fb f8be 	bl	19e40 <net_frag_get_pos>
   1ecc4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	if (!frag && pos == 0xffff) {
   1ecc8:	b940      	cbnz	r0, 1ecdc <net_udp_insert_raw+0x2e>
   1ecca:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1ecce:	4293      	cmp	r3, r2
   1ecd0:	d106      	bne.n	1ece0 <net_udp_insert_raw+0x32>
		NET_DBG("Offset %d out of pkt len %zd",
			offset, net_pkt_get_len(pkt));
		return NULL;
   1ecd2:	2400      	movs	r4, #0
	return pkt;

fail:
	NET_DBG("Cannot insert UDP header into %p", pkt);
	return NULL;
}
   1ecd4:	4620      	mov	r0, r4
   1ecd6:	b004      	add	sp, #16
   1ecd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (frag && pos != 0) {
   1ecdc:	2b00      	cmp	r3, #0
   1ecde:	d1f8      	bne.n	1ecd2 <net_udp_insert_raw+0x24>
	if (pkt->frags != frag) {
   1ece0:	68a5      	ldr	r5, [r4, #8]
   1ece2:	42a8      	cmp	r0, r5
   1ece4:	d143      	bne.n	1ed6e <net_udp_insert_raw+0xc0>
	if (!prev) {
   1ece6:	2d00      	cmp	r5, #0
   1ece8:	d0f3      	beq.n	1ecd2 <net_udp_insert_raw+0x24>
	udp = net_pkt_get_frag(pkt, PKT_WAIT_TIME);
   1ecea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1ecee:	4620      	mov	r0, r4
   1ecf0:	f7fa fe40 	bl	19974 <net_pkt_get_frag>
	if (!udp) {
   1ecf4:	4680      	mov	r8, r0
   1ecf6:	2800      	cmp	r0, #0
   1ecf8:	d0eb      	beq.n	1ecd2 <net_udp_insert_raw+0x24>
	net_buf_add_mem(udp, &src_port, sizeof(src_port));
   1ecfa:	f100 0708 	add.w	r7, r0, #8
   1ecfe:	2202      	movs	r2, #2
   1ed00:	f10d 0106 	add.w	r1, sp, #6
   1ed04:	4638      	mov	r0, r7
   1ed06:	f7f9 f92b 	bl	17f60 <net_buf_simple_add_mem>
	net_buf_add_mem(udp, &dst_port, sizeof(dst_port));
   1ed0a:	2202      	movs	r2, #2
   1ed0c:	a901      	add	r1, sp, #4
   1ed0e:	4638      	mov	r0, r7
   1ed10:	f7f9 f926 	bl	17f60 <net_buf_simple_add_mem>
   1ed14:	68a6      	ldr	r6, [r4, #8]
	size_t bytes = 0;
   1ed16:	2300      	movs	r3, #0
	while (buf) {
   1ed18:	bb6e      	cbnz	r6, 1ed76 <net_udp_insert_raw+0xc8>
	net_buf_add_be16(udp, net_pkt_get_len(pkt) -
   1ed1a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
   1ed1e:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
   1ed22:	4411      	add	r1, r2
   1ed24:	f1c1 0108 	rsb	r1, r1, #8
   1ed28:	4419      	add	r1, r3
   1ed2a:	b289      	uxth	r1, r1
   1ed2c:	4638      	mov	r0, r7
   1ed2e:	f7f9 f937 	bl	17fa0 <net_buf_simple_add_be16>
	net_buf_add_be16(udp, 0); /* chksum */
   1ed32:	4631      	mov	r1, r6
   1ed34:	4638      	mov	r0, r7
   1ed36:	f7f9 f933 	bl	17fa0 <net_buf_simple_add_be16>
	net_buf_frag_insert(prev, udp);
   1ed3a:	4641      	mov	r1, r8
   1ed3c:	4628      	mov	r0, r5
   1ed3e:	f7f9 f8e2 	bl	17f06 <net_buf_frag_insert>
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1ed42:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
				net_pkt_ipv6_ext_len(pkt) +
   1ed46:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1ed4a:	4419      	add	r1, r3
   1ed4c:	f10d 020e 	add.w	r2, sp, #14
   1ed50:	3108      	adds	r1, #8
   1ed52:	4620      	mov	r0, r4
   1ed54:	f7fb f874 	bl	19e40 <net_frag_get_pos>
	if (frag) {
   1ed58:	2800      	cmp	r0, #0
   1ed5a:	d0bb      	beq.n	1ecd4 <net_udp_insert_raw+0x26>
		net_pkt_set_appdata(pkt, frag->data + pos);
   1ed5c:	6883      	ldr	r3, [r0, #8]
   1ed5e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1ed62:	4413      	add	r3, r2
	pkt->appdata = data;
   1ed64:	61a3      	str	r3, [r4, #24]
   1ed66:	e7b5      	b.n	1ecd4 <net_udp_insert_raw+0x26>
			if (tmp->frags == frag) {
   1ed68:	4298      	cmp	r0, r3
   1ed6a:	d0be      	beq.n	1ecea <net_udp_insert_raw+0x3c>
   1ed6c:	461d      	mov	r5, r3
		while (tmp->frags) {
   1ed6e:	682b      	ldr	r3, [r5, #0]
   1ed70:	2b00      	cmp	r3, #0
   1ed72:	d1f9      	bne.n	1ed68 <net_udp_insert_raw+0xba>
   1ed74:	e7ad      	b.n	1ecd2 <net_udp_insert_raw+0x24>
		bytes += buf->len;
   1ed76:	89b2      	ldrh	r2, [r6, #12]
		buf = buf->frags;
   1ed78:	6836      	ldr	r6, [r6, #0]
		bytes += buf->len;
   1ed7a:	4413      	add	r3, r2
   1ed7c:	e7cc      	b.n	1ed18 <net_udp_insert_raw+0x6a>

0001ed7e <net_udp_set_chksum>:

struct net_buf *net_udp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   1ed7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ed82:	b086      	sub	sp, #24
	struct net_udp_hdr *hdr;
	u16_t chksum = 0;
   1ed84:	2700      	movs	r7, #0
{
   1ed86:	4604      	mov	r4, r0
   1ed88:	460e      	mov	r6, r1
	u16_t chksum = 0;
   1ed8a:	f8ad 7014 	strh.w	r7, [sp, #20]
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   1ed8e:	f7fb f886 	bl	19e9e <net_pkt_udp_data>
   1ed92:	4605      	mov	r5, r0
	if (net_udp_header_fits(pkt, hdr)) {
   1ed94:	4601      	mov	r1, r0
   1ed96:	4620      	mov	r0, r4
   1ed98:	f7ff ff7f 	bl	1ec9a <net_udp_header_fits>
   1ed9c:	b158      	cbz	r0, 1edb6 <net_udp_set_chksum+0x38>
		hdr->chksum = 0;
   1ed9e:	71af      	strb	r7, [r5, #6]
   1eda0:	71ef      	strb	r7, [r5, #7]
	return net_calc_chksum(pkt, IPPROTO_UDP);
   1eda2:	2111      	movs	r1, #17
   1eda4:	4620      	mov	r0, r4
   1eda6:	f7fb fa95 	bl	1a2d4 <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_udp(pkt);
   1edaa:	43c0      	mvns	r0, r0
   1edac:	80e8      	strh	r0, [r5, #6]
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   1edae:	4630      	mov	r0, r6
   1edb0:	b006      	add	sp, #24
   1edb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			     net_pkt_ipv6_ext_len(pkt) +
   1edb6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
			     net_pkt_ip_hdr_len(pkt) +
   1edba:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
	frag = net_pkt_write(pkt, frag,
   1edbe:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   1edc2:	441a      	add	r2, r3
   1edc4:	ad05      	add	r5, sp, #20
   1edc6:	2702      	movs	r7, #2
   1edc8:	f10d 0316 	add.w	r3, sp, #22
   1edcc:	3206      	adds	r2, #6
   1edce:	4631      	mov	r1, r6
   1edd0:	f8cd 8008 	str.w	r8, [sp, #8]
   1edd4:	9501      	str	r5, [sp, #4]
   1edd6:	9700      	str	r7, [sp, #0]
   1edd8:	4620      	mov	r0, r4
   1edda:	f7fa ff91 	bl	19d00 <net_pkt_write>
   1edde:	2111      	movs	r1, #17
   1ede0:	4606      	mov	r6, r0
   1ede2:	4620      	mov	r0, r4
   1ede4:	f7fb fa76 	bl	1a2d4 <net_calc_chksum>
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1ede8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1edec:	f8cd 8008 	str.w	r8, [sp, #8]
	chksum = ~net_calc_chksum_udp(pkt);
   1edf0:	43c0      	mvns	r0, r0
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1edf2:	3a02      	subs	r2, #2
	chksum = ~net_calc_chksum_udp(pkt);
   1edf4:	f8ad 0014 	strh.w	r0, [sp, #20]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1edf8:	4631      	mov	r1, r6
   1edfa:	9501      	str	r5, [sp, #4]
   1edfc:	9700      	str	r7, [sp, #0]
   1edfe:	f10d 0316 	add.w	r3, sp, #22
   1ee02:	b292      	uxth	r2, r2
   1ee04:	4620      	mov	r0, r4
   1ee06:	f7fa ff7b 	bl	19d00 <net_pkt_write>
   1ee0a:	4606      	mov	r6, r0
	return frag;
   1ee0c:	e7cf      	b.n	1edae <net_udp_set_chksum+0x30>

0001ee0e <net_udp_get_chksum>:

u16_t net_udp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   1ee0e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1ee10:	4604      	mov	r4, r0
   1ee12:	460e      	mov	r6, r1
	struct net_udp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   1ee14:	f7fb f843 	bl	19e9e <net_pkt_udp_data>
   1ee18:	4605      	mov	r5, r0
	if (net_udp_header_fits(pkt, hdr)) {
   1ee1a:	4601      	mov	r1, r0
   1ee1c:	4620      	mov	r0, r4
   1ee1e:	f7ff ff3c 	bl	1ec9a <net_udp_header_fits>
   1ee22:	b110      	cbz	r0, 1ee2a <net_udp_get_chksum+0x1c>
		return hdr->chksum;
   1ee24:	88e8      	ldrh	r0, [r5, #6]
			     2 + 2 + 2 /* src + dst + len */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   1ee26:	b004      	add	sp, #16
   1ee28:	bd70      	pop	{r4, r5, r6, pc}
			     net_pkt_ipv6_ext_len(pkt) +
   1ee2a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
			     net_pkt_ip_hdr_len(pkt) +
   1ee2e:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
	frag = net_frag_read(frag,
   1ee32:	4419      	add	r1, r3
   1ee34:	ab03      	add	r3, sp, #12
   1ee36:	9300      	str	r3, [sp, #0]
   1ee38:	f10d 020e 	add.w	r2, sp, #14
   1ee3c:	2302      	movs	r3, #2
   1ee3e:	3106      	adds	r1, #6
   1ee40:	4630      	mov	r0, r6
   1ee42:	f7fa ff09 	bl	19c58 <net_frag_read>
	return chksum;
   1ee46:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   1ee4a:	e7ec      	b.n	1ee26 <net_udp_get_chksum+0x18>

0001ee4c <net_udp_get_hdr>:

struct net_udp_hdr *net_udp_get_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   1ee4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1ee4e:	4605      	mov	r5, r0
   1ee50:	460c      	mov	r4, r1
	struct net_udp_hdr *udp_hdr;
	struct net_buf *frag;
	u16_t pos;

	udp_hdr = net_pkt_udp_data(pkt);
   1ee52:	f7fb f824 	bl	19e9e <net_pkt_udp_data>
   1ee56:	4606      	mov	r6, r0
	if (net_udp_header_fits(pkt, udp_hdr)) {
   1ee58:	4601      	mov	r1, r0
   1ee5a:	4628      	mov	r0, r5
   1ee5c:	f7ff ff1d 	bl	1ec9a <net_udp_header_fits>
   1ee60:	bb50      	cbnz	r0, 1eeb8 <net_udp_get_hdr+0x6c>
		return udp_hdr;
	}

	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ee62:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
			     net_pkt_ipv6_ext_len(pkt),
   1ee66:	f895 1039 	ldrb.w	r1, [r5, #57]	; 0x39
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ee6a:	9400      	str	r4, [sp, #0]
   1ee6c:	4401      	add	r1, r0
   1ee6e:	2302      	movs	r3, #2
   1ee70:	f10d 020e 	add.w	r2, sp, #14
   1ee74:	68a8      	ldr	r0, [r5, #8]
   1ee76:	f7fa feef 	bl	19c58 <net_frag_read>
			     &pos, sizeof(hdr->src_port),
			     (u8_t *)&hdr->src_port);
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
			     (u8_t *)&hdr->dst_port);
   1ee7a:	1ca3      	adds	r3, r4, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   1ee7c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1ee80:	9300      	str	r3, [sp, #0]
   1ee82:	f10d 020e 	add.w	r2, sp, #14
   1ee86:	2302      	movs	r3, #2
   1ee88:	f7fa fee6 	bl	19c58 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
			     (u8_t *)&hdr->len);
   1ee8c:	1d23      	adds	r3, r4, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   1ee8e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1ee92:	9300      	str	r3, [sp, #0]
   1ee94:	f10d 020e 	add.w	r2, sp, #14
   1ee98:	2302      	movs	r3, #2
   1ee9a:	f7fa fedd 	bl	19c58 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
			     (u8_t *)&hdr->chksum);
   1ee9e:	1da3      	adds	r3, r4, #6
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1eea0:	9300      	str	r3, [sp, #0]
   1eea2:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1eea6:	2302      	movs	r3, #2
   1eea8:	f10d 020e 	add.w	r2, sp, #14
   1eeac:	f7fa fed4 	bl	19c58 <net_frag_read>
	if (!frag) {
   1eeb0:	2800      	cmp	r0, #0
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
   1eeb2:	bf14      	ite	ne
   1eeb4:	4626      	movne	r6, r4
   1eeb6:	2600      	moveq	r6, #0
}
   1eeb8:	4630      	mov	r0, r6
   1eeba:	b004      	add	sp, #16
   1eebc:	bd70      	pop	{r4, r5, r6, pc}

0001eebe <net_udp_set_hdr>:

struct net_udp_hdr *net_udp_set_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   1eebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eec2:	b086      	sub	sp, #24
   1eec4:	4604      	mov	r4, r0
   1eec6:	460d      	mov	r5, r1
	struct net_buf *frag;
	u16_t pos;

	if (net_udp_header_fits(pkt, hdr)) {
   1eec8:	f7ff fee7 	bl	1ec9a <net_udp_header_fits>
   1eecc:	4680      	mov	r8, r0
   1eece:	2800      	cmp	r0, #0
   1eed0:	d135      	bne.n	1ef3e <net_udp_set_hdr+0x80>
		return hdr;
	}

	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1eed2:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
			     net_pkt_ipv6_ext_len(pkt),
   1eed6:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1eeda:	9501      	str	r5, [sp, #4]
   1eedc:	2602      	movs	r6, #2
   1eede:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   1eee2:	440a      	add	r2, r1
   1eee4:	f10d 0316 	add.w	r3, sp, #22
   1eee8:	68a1      	ldr	r1, [r4, #8]
   1eeea:	9702      	str	r7, [sp, #8]
   1eeec:	9600      	str	r6, [sp, #0]
   1eeee:	4620      	mov	r0, r4
   1eef0:	f7fa ff06 	bl	19d00 <net_pkt_write>
			     &pos, sizeof(hdr->src_port),
			     (u8_t *)&hdr->src_port, PKT_WAIT_TIME);
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
			     (u8_t *)&hdr->dst_port, PKT_WAIT_TIME);
   1eef4:	19ab      	adds	r3, r5, r6
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   1eef6:	4601      	mov	r1, r0
   1eef8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1eefc:	9301      	str	r3, [sp, #4]
   1eefe:	9702      	str	r7, [sp, #8]
   1ef00:	f10d 0316 	add.w	r3, sp, #22
   1ef04:	9600      	str	r6, [sp, #0]
   1ef06:	4620      	mov	r0, r4
   1ef08:	f7fa fefa 	bl	19d00 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
			     (u8_t *)&hdr->len, PKT_WAIT_TIME);
   1ef0c:	1d2b      	adds	r3, r5, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   1ef0e:	4601      	mov	r1, r0
   1ef10:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1ef14:	9301      	str	r3, [sp, #4]
   1ef16:	9702      	str	r7, [sp, #8]
   1ef18:	f10d 0316 	add.w	r3, sp, #22
   1ef1c:	9600      	str	r6, [sp, #0]
   1ef1e:	4620      	mov	r0, r4
   1ef20:	f7fa feee 	bl	19d00 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   1ef24:	1dab      	adds	r3, r5, #6
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   1ef26:	9301      	str	r3, [sp, #4]
   1ef28:	4601      	mov	r1, r0
   1ef2a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1ef2e:	9702      	str	r7, [sp, #8]
   1ef30:	9600      	str	r6, [sp, #0]
   1ef32:	f10d 0316 	add.w	r3, sp, #22
   1ef36:	4620      	mov	r0, r4
   1ef38:	f7fa fee2 	bl	19d00 <net_pkt_write>

	if (!frag) {
   1ef3c:	b100      	cbz	r0, 1ef40 <net_udp_set_hdr+0x82>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
   1ef3e:	46a8      	mov	r8, r5
}
   1ef40:	4640      	mov	r0, r8
   1ef42:	b006      	add	sp, #24
   1ef44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ef48 <net_udp_insert>:

struct net_pkt *net_udp_insert(struct net_context *context,
			       struct net_pkt *pkt,
			       u16_t offset,
			       u16_t port)
{
   1ef48:	b410      	push	{r4}
   1ef4a:	460c      	mov	r4, r1
   1ef4c:	4611      	mov	r1, r2
	return net_udp_insert_raw(pkt,
   1ef4e:	8942      	ldrh	r2, [r0, #10]
   1ef50:	4620      	mov	r0, r4
				  offset,
				  net_sin((struct sockaddr *)
					  &context->local)->sin_port,
				  port);
}
   1ef52:	bc10      	pop	{r4}
	return net_udp_insert_raw(pkt,
   1ef54:	f7ff beab 	b.w	1ecae <net_udp_insert_raw>

0001ef58 <net_udp_init>:
{
	return net_conn_unregister(handle);
}

void net_udp_init(void)
{
   1ef58:	4770      	bx	lr

0001ef5a <net_bt_reserve>:
	ARG_UNUSED(iface);
	ARG_UNUSED(unused);

	
	return 0;
}
   1ef5a:	2000      	movs	r0, #0
   1ef5c:	4770      	bx	lr

0001ef5e <net_bt_enable>:
{
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;

	NET_DBG("iface %p %s", iface, state ? "up" : "down");

	if (state && ctxt->ipsp_chan.chan.state != BT_L2CAP_CONNECTED) {
   1ef5e:	b149      	cbz	r1, 1ef74 <net_bt_enable+0x16>
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1ef60:	6803      	ldr	r3, [r0, #0]
	if (state && ctxt->ipsp_chan.chan.state != BT_L2CAP_CONNECTED) {
   1ef62:	689b      	ldr	r3, [r3, #8]
   1ef64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1ef68:	2b03      	cmp	r3, #3
		return -ENETDOWN;
   1ef6a:	bf0c      	ite	eq
   1ef6c:	2000      	moveq	r0, #0
   1ef6e:	f06f 003d 	mvnne.w	r0, #61	; 0x3d
   1ef72:	4770      	bx	lr
	}

	return 0;
   1ef74:	4608      	mov	r0, r1
}
   1ef76:	4770      	bx	lr

0001ef78 <bt_iface_init>:
	return ret;
}

static void bt_iface_init(struct net_if *iface)
{
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1ef78:	6803      	ldr	r3, [r0, #0]

	bt_iface = iface;
   1ef7a:	4a02      	ldr	r2, [pc, #8]	; (1ef84 <bt_iface_init+0xc>)
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1ef7c:	689b      	ldr	r3, [r3, #8]
	bt_iface = iface;
   1ef7e:	6010      	str	r0, [r2, #0]

	NET_DBG("iface %p", iface);

	ctxt->iface = iface;
   1ef80:	6018      	str	r0, [r3, #0]
   1ef82:	4770      	bx	lr
   1ef84:	20005278 	.word	0x20005278

0001ef88 <net_bt_recv>:
{
   1ef88:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *frag = pkt->frags;
   1ef8a:	688d      	ldr	r5, [r1, #8]
	pkt_lenght = frag->len;
   1ef8c:	4e0c      	ldr	r6, [pc, #48]	; (1efc0 <net_bt_recv+0x38>)
   1ef8e:	89ab      	ldrh	r3, [r5, #12]
	memset(packet, 0, 1299);
   1ef90:	480c      	ldr	r0, [pc, #48]	; (1efc4 <net_bt_recv+0x3c>)
	pkt_lenght = frag->len;
   1ef92:	8033      	strh	r3, [r6, #0]
{
   1ef94:	460c      	mov	r4, r1
	memset(packet, 0, 1299);
   1ef96:	f240 5213 	movw	r2, #1299	; 0x513
   1ef9a:	2100      	movs	r1, #0
   1ef9c:	f7e1 fc3a 	bl	814 <memset>
	memcpy(packet, frag->data, pkt_lenght);
   1efa0:	8832      	ldrh	r2, [r6, #0]
   1efa2:	68a9      	ldr	r1, [r5, #8]
   1efa4:	4807      	ldr	r0, [pc, #28]	; (1efc4 <net_bt_recv+0x3c>)
   1efa6:	f7e1 fc09 	bl	7bc <memcpy>
	if (!net_6lo_uncompress(pkt)) {
   1efaa:	4620      	mov	r0, r4
   1efac:	f7fb fd12 	bl	1a9d4 <net_6lo_uncompress>
   1efb0:	b920      	cbnz	r0, 1efbc <net_bt_recv+0x34>
		printk("NO \n");
   1efb2:	4805      	ldr	r0, [pc, #20]	; (1efc8 <net_bt_recv+0x40>)
   1efb4:	f7e2 fc2e 	bl	1814 <printk>
		return NET_DROP;
   1efb8:	2002      	movs	r0, #2
   1efba:	bd70      	pop	{r4, r5, r6, pc}
	return NET_CONTINUE;
   1efbc:	2001      	movs	r0, #1
}
   1efbe:	bd70      	pop	{r4, r5, r6, pc}
   1efc0:	20005284 	.word	0x20005284
   1efc4:	20004d64 	.word	0x20004d64
   1efc8:	0002390d 	.word	0x0002390d

0001efcc <ipsp_recv>:
{
   1efcc:	b570      	push	{r4, r5, r6, lr}
   1efce:	4605      	mov	r5, r0
   1efd0:	460e      	mov	r6, r1
	pkt = net_pkt_get_reserve_rx(0, K_FOREVER);
   1efd2:	2000      	movs	r0, #0
   1efd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1efd8:	f7fa fcac 	bl	19934 <net_pkt_get_reserve_rx>
	net_pkt_ll_dst(pkt)->addr = ctxt->src.val;
   1efdc:	f105 039c 	add.w	r3, r5, #156	; 0x9c
	net_pkt_ll_dst(pkt)->len = sizeof(ctxt->src);
   1efe0:	2206      	movs	r2, #6
	net_pkt_ll_dst(pkt)->addr = ctxt->src.val;
   1efe2:	6283      	str	r3, [r0, #40]	; 0x28
	net_pkt_ll_src(pkt)->addr = ctxt->dst.val;
   1efe4:	f105 01a2 	add.w	r1, r5, #162	; 0xa2
	net_pkt_ll_dst(pkt)->type = NET_LINK_BLUETOOTH;
   1efe8:	2302      	movs	r3, #2
	net_pkt_ll_dst(pkt)->len = sizeof(ctxt->src);
   1efea:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
	net_pkt_ll_dst(pkt)->type = NET_LINK_BLUETOOTH;
   1efee:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	net_pkt_ll_src(pkt)->len = sizeof(ctxt->dst);
   1eff2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
	net_pkt_ll_src(pkt)->type = NET_LINK_BLUETOOTH;
   1eff6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	pkt = net_pkt_get_reserve_rx(0, K_FOREVER);
   1effa:	4604      	mov	r4, r0
	net_pkt_ll_src(pkt)->addr = ctxt->dst.val;
   1effc:	6201      	str	r1, [r0, #32]
	net_pkt_frag_add(pkt, net_buf_ref(buf));
   1effe:	4630      	mov	r0, r6
   1f000:	f7f8 ff78 	bl	17ef4 <net_buf_ref>
   1f004:	4601      	mov	r1, r0
   1f006:	4620      	mov	r0, r4
   1f008:	f7fa fcfa 	bl	19a00 <net_pkt_frag_add>
	if (net_recv_data(ctxt->iface, pkt) < 0) {      // for receving the packet
   1f00c:	4621      	mov	r1, r4
   1f00e:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1f012:	f7f9 fc71 	bl	188f8 <net_recv_data>
   1f016:	2800      	cmp	r0, #0
   1f018:	da04      	bge.n	1f024 <ipsp_recv+0x58>
		net_pkt_unref(pkt);
   1f01a:	4620      	mov	r0, r4
}
   1f01c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_pkt_unref(pkt);
   1f020:	f7fa bcc7 	b.w	199b2 <net_pkt_unref>
   1f024:	bd70      	pop	{r4, r5, r6, pc}

0001f026 <ipsp_alloc_buf>:
	return net_pkt_get_reserve_rx_data(0, K_FOREVER);
   1f026:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f02a:	2000      	movs	r0, #0
   1f02c:	f7fa bc92 	b.w	19954 <net_pkt_get_reserve_rx_data>

0001f030 <ipsp_disconnected>:
{
   1f030:	b510      	push	{r4, lr}
	for_echo_server = true;
   1f032:	4b06      	ldr	r3, [pc, #24]	; (1f04c <ipsp_disconnected+0x1c>)
	if (chan->conn != default_conn) {
   1f034:	4c06      	ldr	r4, [pc, #24]	; (1f050 <ipsp_disconnected+0x20>)
   1f036:	6800      	ldr	r0, [r0, #0]
	for_echo_server = true;
   1f038:	2201      	movs	r2, #1
   1f03a:	701a      	strb	r2, [r3, #0]
	if (chan->conn != default_conn) {
   1f03c:	6823      	ldr	r3, [r4, #0]
   1f03e:	4298      	cmp	r0, r3
   1f040:	d103      	bne.n	1f04a <ipsp_disconnected+0x1a>
	bt_conn_unref(default_conn);
   1f042:	f7e7 f8bf 	bl	61c4 <bt_conn_unref>
	default_conn = NULL;
   1f046:	2300      	movs	r3, #0
   1f048:	6023      	str	r3, [r4, #0]
   1f04a:	bd10      	pop	{r4, pc}
   1f04c:	20003370 	.word	0x20003370
   1f050:	20005280 	.word	0x20005280

0001f054 <net_bt_init>:
	.disconnected = disconnected,
};
#endif /* CONFIG_NET_L2_BT_MGMT */

static int net_bt_init(struct device *dev)
{
   1f054:	b508      	push	{r3, lr}
	NET_DBG("dev %p driver_data %p", dev, dev->driver_data);

#if defined(CONFIG_NET_L2_BT_MGMT)
	bt_conn_cb_register(&conn_callbacks);
   1f056:	4804      	ldr	r0, [pc, #16]	; (1f068 <net_bt_init+0x14>)
   1f058:	f7e6 fdfa 	bl	5c50 <bt_conn_cb_register>
#endif
	bt_l2cap_server_register(&server);
   1f05c:	4803      	ldr	r0, [pc, #12]	; (1f06c <net_bt_init+0x18>)
   1f05e:	f7e7 fe77 	bl	6d50 <bt_l2cap_server_register>

	return 0;
}
   1f062:	2000      	movs	r0, #0
   1f064:	bd08      	pop	{r3, pc}
   1f066:	bf00      	nop
   1f068:	2000ea50 	.word	0x2000ea50
   1f06c:	2000ea88 	.word	0x2000ea88

0001f070 <bt_iface_send>:
{
   1f070:	b538      	push	{r3, r4, r5, lr}
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1f072:	6802      	ldr	r2, [r0, #0]
	frags = pkt->frags;
   1f074:	688d      	ldr	r5, [r1, #8]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1f076:	6894      	ldr	r4, [r2, #8]
	pkt->frags = NULL;
   1f078:	2200      	movs	r2, #0
	net_pkt_unref(pkt);
   1f07a:	4608      	mov	r0, r1
	pkt->frags = NULL;
   1f07c:	608a      	str	r2, [r1, #8]
	net_pkt_unref(pkt);
   1f07e:	f7fa fc98 	bl	199b2 <net_pkt_unref>
	ret = bt_l2cap_chan_send(&ctxt->ipsp_chan.chan, frags);
   1f082:	4629      	mov	r1, r5
   1f084:	1d20      	adds	r0, r4, #4
}
   1f086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = bt_l2cap_chan_send(&ctxt->ipsp_chan.chan, frags);
   1f08a:	f7e8 b9c7 	b.w	741c <bt_l2cap_chan_send>
	...

0001f090 <net_bt_send>:
{
   1f090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return pkt->family;
   1f094:	f891 3036 	ldrb.w	r3, [r1, #54]	; 0x36
	if (net_pkt_family(pkt) != AF_INET6) {
   1f098:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1f09c:	2b0a      	cmp	r3, #10
{
   1f09e:	b08a      	sub	sp, #40	; 0x28
   1f0a0:	460d      	mov	r5, r1
	if (net_pkt_family(pkt) != AF_INET6) {
   1f0a2:	d003      	beq.n	1f0ac <net_bt_send+0x1c>
   1f0a4:	2002      	movs	r0, #2
}
   1f0a6:	b00a      	add	sp, #40	; 0x28
   1f0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1f0ac:	6803      	ldr	r3, [r0, #0]
	if (!net_6lo_compress(pkt, true, NULL)) {
   1f0ae:	2200      	movs	r2, #0
   1f0b0:	2101      	movs	r1, #1
   1f0b2:	4628      	mov	r0, r5
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1f0b4:	689e      	ldr	r6, [r3, #8]
	if (!net_6lo_compress(pkt, true, NULL)) {
   1f0b6:	f7fb fa10 	bl	1a4da <net_6lo_compress>
   1f0ba:	2800      	cmp	r0, #0
   1f0bc:	d0f2      	beq.n	1f0a4 <net_bt_send+0x14>
	if(connectionless){
   1f0be:	4b24      	ldr	r3, [pc, #144]	; (1f150 <net_bt_send+0xc0>)
   1f0c0:	781b      	ldrb	r3, [r3, #0]
   1f0c2:	2b00      	cmp	r3, #0
   1f0c4:	d039      	beq.n	1f13a <net_bt_send+0xaa>
		struct net_buf *frag = pkt->frags;
   1f0c6:	68ae      	ldr	r6, [r5, #8]
		memset(packet, 0, 1299);
   1f0c8:	4822      	ldr	r0, [pc, #136]	; (1f154 <net_bt_send+0xc4>)
		if(ext_adv_actiavte == false){  // activate adv only
   1f0ca:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1f164 <net_bt_send+0xd4>
		memset(packet, 0, 1299);
   1f0ce:	f240 5213 	movw	r2, #1299	; 0x513
   1f0d2:	2100      	movs	r1, #0
   1f0d4:	f7e1 fb9e 	bl	814 <memset>
		memcpy(packet, frag->data, frag->len);
   1f0d8:	89b2      	ldrh	r2, [r6, #12]
   1f0da:	68b1      	ldr	r1, [r6, #8]
   1f0dc:	481d      	ldr	r0, [pc, #116]	; (1f154 <net_bt_send+0xc4>)
   1f0de:	f7e1 fb6d 	bl	7bc <memcpy>
		if(ext_adv_actiavte == false){  // activate adv only
   1f0e2:	f898 5000 	ldrb.w	r5, [r8]
   1f0e6:	bb1d      	cbnz	r5, 1f130 <net_bt_send+0xa0>
			struct bt_data ad[] = {
   1f0e8:	4b1b      	ldr	r3, [pc, #108]	; (1f158 <net_bt_send+0xc8>)
			err= bt_le_ext_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad), packet, frag->len,
   1f0ea:	9507      	str	r5, [sp, #28]
			struct bt_data ad[] = {
   1f0ec:	e893 0003 	ldmia.w	r3, {r0, r1}
			err= bt_le_ext_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad), packet, frag->len,
   1f0f0:	f44f 7348 	mov.w	r3, #800	; 0x320
   1f0f4:	f8ad 301e 	strh.w	r3, [sp, #30]
   1f0f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1f0fc:	9508      	str	r5, [sp, #32]
   1f0fe:	2401      	movs	r4, #1
			struct bt_data ad[] = {
   1f100:	af05      	add	r7, sp, #20
			err= bt_le_ext_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad), packet, frag->len,
   1f102:	f8ad 3020 	strh.w	r3, [sp, #32]
   1f106:	4b15      	ldr	r3, [pc, #84]	; (1f15c <net_bt_send+0xcc>)
   1f108:	9509      	str	r5, [sp, #36]	; 0x24
			struct bt_data ad[] = {
   1f10a:	e887 0003 	stmia.w	r7, {r0, r1}
			err= bt_le_ext_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad), packet, frag->len,
   1f10e:	9402      	str	r4, [sp, #8]
   1f110:	9301      	str	r3, [sp, #4]
   1f112:	89b3      	ldrh	r3, [r6, #12]
   1f114:	9300      	str	r3, [sp, #0]
   1f116:	4622      	mov	r2, r4
   1f118:	4b0e      	ldr	r3, [pc, #56]	; (1f154 <net_bt_send+0xc4>)
   1f11a:	4639      	mov	r1, r7
   1f11c:	a807      	add	r0, sp, #28
   1f11e:	f7e6 f993 	bl	5448 <bt_le_ext_adv_start>
				ext_adv_actiavte = false;
   1f122:	2800      	cmp	r0, #0
   1f124:	bf0c      	ite	eq
   1f126:	4620      	moveq	r0, r4
   1f128:	4628      	movne	r0, r5
   1f12a:	f888 0000 	strb.w	r0, [r8]
   1f12e:	e7b9      	b.n	1f0a4 <net_bt_send+0x14>
			ext_set_data(frag->len, packet);
   1f130:	4908      	ldr	r1, [pc, #32]	; (1f154 <net_bt_send+0xc4>)
   1f132:	89b0      	ldrh	r0, [r6, #12]
   1f134:	f7e6 f951 	bl	53da <ext_set_data>
   1f138:	e7b4      	b.n	1f0a4 <net_bt_send+0x14>
	}else if(connection_base){
   1f13a:	4b09      	ldr	r3, [pc, #36]	; (1f160 <net_bt_send+0xd0>)
   1f13c:	781c      	ldrb	r4, [r3, #0]
   1f13e:	2c00      	cmp	r4, #0
   1f140:	d1b0      	bne.n	1f0a4 <net_bt_send+0x14>
	k_fifo_put(&iface->tx_queue, pkt);
   1f142:	6830      	ldr	r0, [r6, #0]
   1f144:	4629      	mov	r1, r5
   1f146:	3018      	adds	r0, #24
   1f148:	f001 fa79 	bl	2063e <k_queue_append>
	return NET_OK;
   1f14c:	4620      	mov	r0, r4
   1f14e:	e7aa      	b.n	1f0a6 <net_bt_send+0x16>
   1f150:	2000336e 	.word	0x2000336e
   1f154:	20004d64 	.word	0x20004d64
   1f158:	000218b4 	.word	0x000218b4
   1f15c:	0002391c 	.word	0x0002391c
   1f160:	2000336d 	.word	0x2000336d
   1f164:	2000336f 	.word	0x2000336f

0001f168 <ipsp_accept>:
	if (bt_context_data.ipsp_chan.chan.conn) {
   1f168:	4b0a      	ldr	r3, [pc, #40]	; (1f194 <ipsp_accept+0x2c>)
{
   1f16a:	b507      	push	{r0, r1, r2, lr}
	if (bt_context_data.ipsp_chan.chan.conn) {
   1f16c:	6858      	ldr	r0, [r3, #4]
   1f16e:	b170      	cbz	r0, 1f18e <ipsp_accept+0x26>
		NET_ERR("No channels available");
   1f170:	4b09      	ldr	r3, [pc, #36]	; (1f198 <ipsp_accept+0x30>)
   1f172:	9301      	str	r3, [sp, #4]
   1f174:	4b09      	ldr	r3, [pc, #36]	; (1f19c <ipsp_accept+0x34>)
   1f176:	9300      	str	r3, [sp, #0]
   1f178:	4a09      	ldr	r2, [pc, #36]	; (1f1a0 <ipsp_accept+0x38>)
   1f17a:	4b0a      	ldr	r3, [pc, #40]	; (1f1a4 <ipsp_accept+0x3c>)
   1f17c:	490a      	ldr	r1, [pc, #40]	; (1f1a8 <ipsp_accept+0x40>)
   1f17e:	480b      	ldr	r0, [pc, #44]	; (1f1ac <ipsp_accept+0x44>)
   1f180:	f7e2 fb48 	bl	1814 <printk>
   1f184:	f06f 000b 	mvn.w	r0, #11
}
   1f188:	b003      	add	sp, #12
   1f18a:	f85d fb04 	ldr.w	pc, [sp], #4
	*chan = &bt_context_data.ipsp_chan.chan;
   1f18e:	3304      	adds	r3, #4
   1f190:	600b      	str	r3, [r1, #0]
	return 0;
   1f192:	e7f9      	b.n	1f188 <ipsp_accept+0x20>
   1f194:	2000e99c 	.word	0x2000e99c
   1f198:	00021b5c 	.word	0x00021b5c
   1f19c:	00021b61 	.word	0x00021b61
   1f1a0:	00021b36 	.word	0x00021b36
   1f1a4:	00023699 	.word	0x00023699
   1f1a8:	000238b2 	.word	0x000238b2
   1f1ac:	000238b9 	.word	0x000238b9

0001f1b0 <bt_addr_le_to_str.constprop.18>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   1f1b0:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
   1f1b2:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   1f1b4:	b08a      	sub	sp, #40	; 0x28
   1f1b6:	4604      	mov	r4, r0
   1f1b8:	460e      	mov	r6, r1
   1f1ba:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   1f1bc:	2b03      	cmp	r3, #3
   1f1be:	d820      	bhi.n	1f202 <bt_addr_le_to_str.constprop.18+0x52>
   1f1c0:	e8df f003 	tbb	[pc, r3]
   1f1c4:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
   1f1c8:	4911      	ldr	r1, [pc, #68]	; (1f210 <bt_addr_le_to_str.constprop.18+0x60>)
		strcpy(type, "random");
   1f1ca:	4628      	mov	r0, r5
   1f1cc:	f7e1 fa61 	bl	692 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1f1d0:	7862      	ldrb	r2, [r4, #1]
   1f1d2:	9204      	str	r2, [sp, #16]
   1f1d4:	78a2      	ldrb	r2, [r4, #2]
   1f1d6:	9203      	str	r2, [sp, #12]
   1f1d8:	78e2      	ldrb	r2, [r4, #3]
   1f1da:	9202      	str	r2, [sp, #8]
   1f1dc:	7922      	ldrb	r2, [r4, #4]
   1f1de:	9201      	str	r2, [sp, #4]
   1f1e0:	7962      	ldrb	r2, [r4, #5]
   1f1e2:	9200      	str	r2, [sp, #0]
   1f1e4:	79a3      	ldrb	r3, [r4, #6]
   1f1e6:	9505      	str	r5, [sp, #20]
   1f1e8:	4a0a      	ldr	r2, [pc, #40]	; (1f214 <bt_addr_le_to_str.constprop.18+0x64>)
   1f1ea:	211b      	movs	r1, #27
   1f1ec:	4630      	mov	r0, r6
   1f1ee:	f7e2 fb1f 	bl	1830 <snprintk>
}
   1f1f2:	b00a      	add	sp, #40	; 0x28
   1f1f4:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   1f1f6:	4908      	ldr	r1, [pc, #32]	; (1f218 <bt_addr_le_to_str.constprop.18+0x68>)
   1f1f8:	e7e7      	b.n	1f1ca <bt_addr_le_to_str.constprop.18+0x1a>
		strcpy(type, "public id");
   1f1fa:	4908      	ldr	r1, [pc, #32]	; (1f21c <bt_addr_le_to_str.constprop.18+0x6c>)
   1f1fc:	e7e5      	b.n	1f1ca <bt_addr_le_to_str.constprop.18+0x1a>
		strcpy(type, "random id");
   1f1fe:	4908      	ldr	r1, [pc, #32]	; (1f220 <bt_addr_le_to_str.constprop.18+0x70>)
   1f200:	e7e3      	b.n	1f1ca <bt_addr_le_to_str.constprop.18+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1f202:	4a08      	ldr	r2, [pc, #32]	; (1f224 <bt_addr_le_to_str.constprop.18+0x74>)
   1f204:	210a      	movs	r1, #10
   1f206:	4628      	mov	r0, r5
   1f208:	f7e2 fb12 	bl	1830 <snprintk>
   1f20c:	e7e0      	b.n	1f1d0 <bt_addr_le_to_str.constprop.18+0x20>
   1f20e:	bf00      	nop
   1f210:	00022821 	.word	0x00022821
   1f214:	0002284a 	.word	0x0002284a
   1f218:	00022828 	.word	0x00022828
   1f21c:	0002282f 	.word	0x0002282f
   1f220:	00022839 	.word	0x00022839
   1f224:	00022843 	.word	0x00022843

0001f228 <connected>:
{
   1f228:	b530      	push	{r4, r5, lr}
	if (err) {
   1f22a:	460d      	mov	r5, r1
{
   1f22c:	b08d      	sub	sp, #52	; 0x34
	if (err) {
   1f22e:	b199      	cbz	r1, 1f258 <connected+0x30>
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   1f230:	ac05      	add	r4, sp, #20
   1f232:	f7e6 ffca 	bl	61ca <bt_conn_get_dst>
   1f236:	4621      	mov	r1, r4
   1f238:	f7ff ffba 	bl	1f1b0 <bt_addr_le_to_str.constprop.18>
		NET_ERR("Failed to connect to %s (%u)\n", addr, err);
   1f23c:	4b0b      	ldr	r3, [pc, #44]	; (1f26c <connected+0x44>)
   1f23e:	9303      	str	r3, [sp, #12]
   1f240:	4b0b      	ldr	r3, [pc, #44]	; (1f270 <connected+0x48>)
   1f242:	9300      	str	r3, [sp, #0]
   1f244:	9502      	str	r5, [sp, #8]
   1f246:	9401      	str	r4, [sp, #4]
   1f248:	4b0a      	ldr	r3, [pc, #40]	; (1f274 <connected+0x4c>)
   1f24a:	4a0b      	ldr	r2, [pc, #44]	; (1f278 <connected+0x50>)
   1f24c:	490b      	ldr	r1, [pc, #44]	; (1f27c <connected+0x54>)
   1f24e:	480c      	ldr	r0, [pc, #48]	; (1f280 <connected+0x58>)
   1f250:	f7e2 fae0 	bl	1814 <printk>
}
   1f254:	b00d      	add	sp, #52	; 0x34
   1f256:	bd30      	pop	{r4, r5, pc}
	if (conn != default_conn) {
   1f258:	4b0a      	ldr	r3, [pc, #40]	; (1f284 <connected+0x5c>)
   1f25a:	681b      	ldr	r3, [r3, #0]
   1f25c:	4298      	cmp	r0, r3
   1f25e:	d1f9      	bne.n	1f254 <connected+0x2c>
	bt_l2cap_chan_connect(conn, &bt_context_data.ipsp_chan.chan,
   1f260:	2223      	movs	r2, #35	; 0x23
   1f262:	4909      	ldr	r1, [pc, #36]	; (1f288 <connected+0x60>)
   1f264:	f7e7 fdba 	bl	6ddc <bt_l2cap_chan_connect>
   1f268:	e7f4      	b.n	1f254 <connected+0x2c>
   1f26a:	bf00      	nop
   1f26c:	00021b5c 	.word	0x00021b5c
   1f270:	00021b61 	.word	0x00021b61
   1f274:	00023706 	.word	0x00023706
   1f278:	00021b36 	.word	0x00021b36
   1f27c:	000238b2 	.word	0x000238b2
   1f280:	00023830 	.word	0x00023830
   1f284:	20005280 	.word	0x20005280
   1f288:	2000e9a0 	.word	0x2000e9a0

0001f28c <disconnected>:
{
   1f28c:	b510      	push	{r4, lr}
	if (conn != default_conn) {
   1f28e:	4b09      	ldr	r3, [pc, #36]	; (1f2b4 <disconnected+0x28>)
   1f290:	681b      	ldr	r3, [r3, #0]
   1f292:	4283      	cmp	r3, r0
{
   1f294:	b088      	sub	sp, #32
   1f296:	460c      	mov	r4, r1
	if (conn != default_conn) {
   1f298:	d109      	bne.n	1f2ae <disconnected+0x22>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   1f29a:	f7e6 ff96 	bl	61ca <bt_conn_get_dst>
   1f29e:	a901      	add	r1, sp, #4
   1f2a0:	f7ff ff86 	bl	1f1b0 <bt_addr_le_to_str.constprop.18>
	if(reason == 0x1A){
   1f2a4:	2c1a      	cmp	r4, #26
		connectionless = true;
   1f2a6:	bf02      	ittt	eq
   1f2a8:	4b03      	ldreq	r3, [pc, #12]	; (1f2b8 <disconnected+0x2c>)
   1f2aa:	2201      	moveq	r2, #1
   1f2ac:	701a      	strbeq	r2, [r3, #0]
}
   1f2ae:	b008      	add	sp, #32
   1f2b0:	bd10      	pop	{r4, pc}
   1f2b2:	bf00      	nop
   1f2b4:	20005280 	.word	0x20005280
   1f2b8:	2000336e 	.word	0x2000336e

0001f2bc <device_found>:
{
   1f2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f2c0:	4d54      	ldr	r5, [pc, #336]	; (1f414 <device_found+0x158>)
   1f2c2:	b08d      	sub	sp, #52	; 0x34
   1f2c4:	461c      	mov	r4, r3
   1f2c6:	682b      	ldr	r3, [r5, #0]
   1f2c8:	9e16      	ldr	r6, [sp, #88]	; 0x58
   1f2ca:	f3bf 8f5b 	dmb	ish
   1f2ce:	68db      	ldr	r3, [r3, #12]
   1f2d0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_iface->flags, NET_IF_UP)) {
   1f2d4:	07db      	lsls	r3, r3, #31
{
   1f2d6:	4680      	mov	r8, r0
   1f2d8:	4617      	mov	r7, r2
	if (!atomic_test_bit(bt_iface->flags, NET_IF_UP)) {
   1f2da:	d402      	bmi.n	1f2e2 <device_found+0x26>
		printk("failed \n");
   1f2dc:	484e      	ldr	r0, [pc, #312]	; (1f418 <device_found+0x15c>)
   1f2de:	f7e2 fa99 	bl	1814 <printk>
	if (type == BT_LE_ADV_IND || type == BT_LE_ADV_DIRECT_IND) {
   1f2e2:	2f01      	cmp	r7, #1
   1f2e4:	d861      	bhi.n	1f3aa <device_found+0xee>
	while (ad->len > 1) {
   1f2e6:	88a3      	ldrh	r3, [r4, #4]
   1f2e8:	2b01      	cmp	r3, #1
   1f2ea:	d912      	bls.n	1f312 <device_found+0x56>
		u8_t len = net_buf_simple_pull_u8(ad);
   1f2ec:	4620      	mov	r0, r4
   1f2ee:	f7f8 fe89 	bl	18004 <net_buf_simple_pull_u8>
		if (len == 0) {
   1f2f2:	4607      	mov	r7, r0
   1f2f4:	b168      	cbz	r0, 1f312 <device_found+0x56>
		if (len > ad->len) {
   1f2f6:	88a2      	ldrh	r2, [r4, #4]
   1f2f8:	b283      	uxth	r3, r0
   1f2fa:	429a      	cmp	r2, r3
   1f2fc:	d20c      	bcs.n	1f318 <device_found+0x5c>
			NET_ERR("AD malformed\n");
   1f2fe:	4b47      	ldr	r3, [pc, #284]	; (1f41c <device_found+0x160>)
   1f300:	9301      	str	r3, [sp, #4]
   1f302:	4b47      	ldr	r3, [pc, #284]	; (1f420 <device_found+0x164>)
   1f304:	9300      	str	r3, [sp, #0]
   1f306:	4a47      	ldr	r2, [pc, #284]	; (1f424 <device_found+0x168>)
   1f308:	4b47      	ldr	r3, [pc, #284]	; (1f428 <device_found+0x16c>)
   1f30a:	4948      	ldr	r1, [pc, #288]	; (1f42c <device_found+0x170>)
   1f30c:	4848      	ldr	r0, [pc, #288]	; (1f430 <device_found+0x174>)
   1f30e:	f7e2 fa81 	bl	1814 <printk>
}
   1f312:	b00d      	add	sp, #52	; 0x34
   1f314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		type = net_buf_simple_pull_u8(ad);
   1f318:	4620      	mov	r0, r4
   1f31a:	f7f8 fe73 	bl	18004 <net_buf_simple_pull_u8>
	if (type != BT_DATA_UUID16_SOME && type != BT_DATA_UUID16_ALL) {
   1f31e:	3802      	subs	r0, #2
   1f320:	b2c0      	uxtb	r0, r0
   1f322:	2801      	cmp	r0, #1
   1f324:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   1f328:	d80d      	bhi.n	1f346 <device_found+0x8a>
		if (func(type, ad->data, len - 1, user_data)) {
   1f32a:	b2fe      	uxtb	r6, r7
	if (data_len % sizeof(u16_t) != 0) {
   1f32c:	f016 0501 	ands.w	r5, r6, #1
   1f330:	d037      	beq.n	1f3a2 <device_found+0xe6>
		NET_ERR("AD malformed\n");
   1f332:	4b3a      	ldr	r3, [pc, #232]	; (1f41c <device_found+0x160>)
   1f334:	9301      	str	r3, [sp, #4]
   1f336:	4b3a      	ldr	r3, [pc, #232]	; (1f420 <device_found+0x164>)
   1f338:	9300      	str	r3, [sp, #0]
   1f33a:	4a3a      	ldr	r2, [pc, #232]	; (1f424 <device_found+0x168>)
   1f33c:	4b3d      	ldr	r3, [pc, #244]	; (1f434 <device_found+0x178>)
   1f33e:	493b      	ldr	r1, [pc, #236]	; (1f42c <device_found+0x170>)
   1f340:	483b      	ldr	r0, [pc, #236]	; (1f430 <device_found+0x174>)
   1f342:	f7e2 fa67 	bl	1814 <printk>
		net_buf_simple_pull(ad, len - 1);
   1f346:	4639      	mov	r1, r7
   1f348:	4620      	mov	r0, r4
   1f34a:	f7f8 fe53 	bl	17ff4 <net_buf_simple_pull>
   1f34e:	e7ca      	b.n	1f2e6 <device_found+0x2a>
		memcpy(&u16, &data[i], sizeof(u16));
   1f350:	2202      	movs	r2, #2
   1f352:	eb09 0105 	add.w	r1, r9, r5
   1f356:	f10d 000a 	add.w	r0, sp, #10
   1f35a:	f7e1 fa2f 	bl	7bc <memcpy>
		uuid = BT_UUID_DECLARE_16(sys_le16_to_cpu(u16));
   1f35e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1f362:	f8ad 2012 	strh.w	r2, [sp, #18]
		if (bt_uuid_cmp(uuid, BT_UUID_IPSS)) {
   1f366:	a903      	add	r1, sp, #12
   1f368:	f44f 52c1 	mov.w	r2, #6176	; 0x1820
   1f36c:	a804      	add	r0, sp, #16
		uuid = BT_UUID_DECLARE_16(sys_le16_to_cpu(u16));
   1f36e:	f88d a010 	strb.w	sl, [sp, #16]
		if (bt_uuid_cmp(uuid, BT_UUID_IPSS)) {
   1f372:	f88d a00c 	strb.w	sl, [sp, #12]
   1f376:	f8ad 200e 	strh.w	r2, [sp, #14]
   1f37a:	f7e4 f953 	bl	3624 <bt_uuid_cmp>
   1f37e:	4683      	mov	fp, r0
   1f380:	b118      	cbz	r0, 1f38a <device_found+0xce>
	for (i = 0; i < data_len; i += sizeof(u16_t)) {
   1f382:	3502      	adds	r5, #2
   1f384:	42b5      	cmp	r5, r6
   1f386:	dbe3      	blt.n	1f350 <device_found+0x94>
   1f388:	e7dd      	b.n	1f346 <device_found+0x8a>
		bt_addr_le_to_str(addr, dev, sizeof(dev));
   1f38a:	a905      	add	r1, sp, #20
   1f38c:	4640      	mov	r0, r8
   1f38e:	f7ff ff0f 	bl	1f1b0 <bt_addr_le_to_str.constprop.18>
   1f392:	4929      	ldr	r1, [pc, #164]	; (1f438 <device_found+0x17c>)
   1f394:	4829      	ldr	r0, [pc, #164]	; (1f43c <device_found+0x180>)
   1f396:	6809      	ldr	r1, [r1, #0]
   1f398:	465b      	mov	r3, fp
   1f39a:	465a      	mov	r2, fp
   1f39c:	f7fe fbee 	bl	1db7c <net_mgmt_event_notify_with_info>
   1f3a0:	e7b7      	b.n	1f312 <device_found+0x56>
		if (func(type, ad->data, len - 1, user_data)) {
   1f3a2:	f8d4 9000 	ldr.w	r9, [r4]
		uuid = BT_UUID_DECLARE_16(sys_le16_to_cpu(u16));
   1f3a6:	46aa      	mov	sl, r5
   1f3a8:	e7ec      	b.n	1f384 <device_found+0xc8>
	else if(type == 0x07 && ad->len > 20){
   1f3aa:	2f07      	cmp	r7, #7
   1f3ac:	d1b1      	bne.n	1f312 <device_found+0x56>
   1f3ae:	88a3      	ldrh	r3, [r4, #4]
   1f3b0:	2b14      	cmp	r3, #20
   1f3b2:	d9ae      	bls.n	1f312 <device_found+0x56>
		printk("aux packet \n");
   1f3b4:	4822      	ldr	r0, [pc, #136]	; (1f440 <device_found+0x184>)
   1f3b6:	f7e2 fa2d 	bl	1814 <printk>
		buf_clone = buf;
   1f3ba:	4b22      	ldr	r3, [pc, #136]	; (1f444 <device_found+0x188>)
		pkt = net_pkt_get_reserve_rx(0, K_FOREVER);
   1f3bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f3c0:	2000      	movs	r0, #0
		buf_clone = buf;
   1f3c2:	601e      	str	r6, [r3, #0]
		pkt = net_pkt_get_reserve_rx(0, K_FOREVER);
   1f3c4:	f7fa fab6 	bl	19934 <net_pkt_get_reserve_rx>
		net_pkt_ll_dst(pkt)->addr = bt_ctxt->src.val;
   1f3c8:	4b1f      	ldr	r3, [pc, #124]	; (1f448 <device_found+0x18c>)
   1f3ca:	681b      	ldr	r3, [r3, #0]
   1f3cc:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
		net_pkt_ll_dst(pkt)->len = sizeof(bt_ctxt->src);
   1f3d0:	2106      	movs	r1, #6
		net_pkt_ll_src(pkt)->addr = bt_ctxt->dst.val;
   1f3d2:	33a6      	adds	r3, #166	; 0xa6
		net_pkt_ll_dst(pkt)->addr = bt_ctxt->src.val;
   1f3d4:	6282      	str	r2, [r0, #40]	; 0x28
		net_pkt_ll_dst(pkt)->type = NET_LINK_BLUETOOTH;
   1f3d6:	2202      	movs	r2, #2
   1f3d8:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
		net_pkt_ll_src(pkt)->addr = bt_ctxt->dst.val;
   1f3dc:	6203      	str	r3, [r0, #32]
		net_pkt_ll_src(pkt)->type = NET_LINK_BLUETOOTH;
   1f3de:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
		pkt = net_pkt_get_reserve_rx(0, K_FOREVER);
   1f3e2:	4604      	mov	r4, r0
		net_pkt_ll_dst(pkt)->len = sizeof(bt_ctxt->src);
   1f3e4:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
		net_pkt_ll_src(pkt)->len = sizeof(bt_ctxt->dst);
   1f3e8:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
		net_pkt_frag_insert(pkt, net_buf_ref(buf));
   1f3ec:	4630      	mov	r0, r6
   1f3ee:	f7f8 fd81 	bl	17ef4 <net_buf_ref>
   1f3f2:	4601      	mov	r1, r0
   1f3f4:	4620      	mov	r0, r4
   1f3f6:	f7fa fb1d 	bl	19a34 <net_pkt_frag_insert>
		if (net_recv_data(bt_iface, pkt) < 0) {      // for receving the packet
   1f3fa:	4621      	mov	r1, r4
   1f3fc:	6828      	ldr	r0, [r5, #0]
   1f3fe:	f7f9 fa7b 	bl	188f8 <net_recv_data>
   1f402:	2800      	cmp	r0, #0
   1f404:	da85      	bge.n	1f312 <device_found+0x56>
			printk("Packet dropped by net_recv_data");
   1f406:	4811      	ldr	r0, [pc, #68]	; (1f44c <device_found+0x190>)
   1f408:	f7e2 fa04 	bl	1814 <printk>
			net_pkt_unref(pkt);
   1f40c:	4620      	mov	r0, r4
   1f40e:	f7fa fad0 	bl	199b2 <net_pkt_unref>
}
   1f412:	e77e      	b.n	1f312 <device_found+0x56>
   1f414:	20005278 	.word	0x20005278
   1f418:	0002385e 	.word	0x0002385e
   1f41c:	00021b5c 	.word	0x00021b5c
   1f420:	00021b61 	.word	0x00021b61
   1f424:	00021b36 	.word	0x00021b36
   1f428:	000236ba 	.word	0x000236ba
   1f42c:	000238b2 	.word	0x000238b2
   1f430:	00023867 	.word	0x00023867
   1f434:	000236b0 	.word	0x000236b0
   1f438:	2000e99c 	.word	0x2000e99c
   1f43c:	e1550001 	.word	0xe1550001
   1f440:	00023885 	.word	0x00023885
   1f444:	2000527c 	.word	0x2000527c
   1f448:	20005288 	.word	0x20005288
   1f44c:	00023892 	.word	0x00023892

0001f450 <ipsp_connected>:
{
   1f450:	b570      	push	{r4, r5, r6, lr}
   1f452:	b09c      	sub	sp, #112	; 0x70
   1f454:	4604      	mov	r4, r0
	if (bt_conn_get_info(chan->conn, &info) < 0) {
   1f456:	a909      	add	r1, sp, #36	; 0x24
   1f458:	6800      	ldr	r0, [r0, #0]
   1f45a:	f7e6 feb8 	bl	61ce <bt_conn_get_info>
   1f45e:	2800      	cmp	r0, #0
   1f460:	da0e      	bge.n	1f480 <ipsp_connected+0x30>
		NET_ERR("Unable to get connection info");
   1f462:	4b3c      	ldr	r3, [pc, #240]	; (1f554 <ipsp_connected+0x104>)
   1f464:	9301      	str	r3, [sp, #4]
   1f466:	4b3c      	ldr	r3, [pc, #240]	; (1f558 <ipsp_connected+0x108>)
   1f468:	9300      	str	r3, [sp, #0]
   1f46a:	4a3c      	ldr	r2, [pc, #240]	; (1f55c <ipsp_connected+0x10c>)
   1f46c:	4b3c      	ldr	r3, [pc, #240]	; (1f560 <ipsp_connected+0x110>)
   1f46e:	493d      	ldr	r1, [pc, #244]	; (1f564 <ipsp_connected+0x114>)
   1f470:	483d      	ldr	r0, [pc, #244]	; (1f568 <ipsp_connected+0x118>)
   1f472:	f7e2 f9cf 	bl	1814 <printk>
		bt_l2cap_chan_disconnect(chan);
   1f476:	4620      	mov	r0, r4
   1f478:	f7e7 fce2 	bl	6e40 <bt_l2cap_chan_disconnect>
}
   1f47c:	b01c      	add	sp, #112	; 0x70
   1f47e:	bd70      	pop	{r4, r5, r6, pc}
	bt_addr_le_to_str(info.le.src, src, sizeof(src));
   1f480:	a90e      	add	r1, sp, #56	; 0x38
   1f482:	980a      	ldr	r0, [sp, #40]	; 0x28
   1f484:	f7ff fe94 	bl	1f1b0 <bt_addr_le_to_str.constprop.18>
	bt_addr_le_to_str(info.le.dst, dst, sizeof(dst));
   1f488:	a915      	add	r1, sp, #84	; 0x54
   1f48a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1f48c:	f7ff fe90 	bl	1f1b0 <bt_addr_le_to_str.constprop.18>
	sys_memcpy_swap(ctxt->src.val, info.le.src->a.val, sizeof(ctxt->src));
   1f490:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f492:	f104 059c 	add.w	r5, r4, #156	; 0x9c
	src += length - 1;
   1f496:	1d93      	adds	r3, r2, #6
   1f498:	f104 019b 	add.w	r1, r4, #155	; 0x9b
		*((u8_t *)dst++) = *((u8_t *)src--);
   1f49c:	f813 0901 	ldrb.w	r0, [r3], #-1
   1f4a0:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
   1f4a4:	429a      	cmp	r2, r3
   1f4a6:	d1f9      	bne.n	1f49c <ipsp_connected+0x4c>
	sys_memcpy_swap(ctxt->dst.val, info.le.dst->a.val, sizeof(ctxt->dst));
   1f4a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f4aa:	f104 01a2 	add.w	r1, r4, #162	; 0xa2
	src += length - 1;
   1f4ae:	1d93      	adds	r3, r2, #6
   1f4b0:	f104 00a1 	add.w	r0, r4, #161	; 0xa1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1f4b4:	f813 6901 	ldrb.w	r6, [r3], #-1
   1f4b8:	f800 6f01 	strb.w	r6, [r0, #1]!
	for (; length > 0; length--) {
   1f4bc:	429a      	cmp	r2, r3
   1f4be:	d1f9      	bne.n	1f4b4 <ipsp_connected+0x64>
	net_if_set_link_addr(ctxt->iface, ctxt->src.val, sizeof(ctxt->src.val),
   1f4c0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1f4c4:	f3bf 8f5b 	dmb	ish
   1f4c8:	68da      	ldr	r2, [r3, #12]
   1f4ca:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1f4ce:	07d2      	lsls	r2, r2, #31
   1f4d0:	d404      	bmi.n	1f4dc <ipsp_connected+0x8c>
	iface->link_addr.len = len;
   1f4d2:	2206      	movs	r2, #6
   1f4d4:	751a      	strb	r2, [r3, #20]
	iface->link_addr.type = type;
   1f4d6:	2202      	movs	r2, #2
	iface->link_addr.addr = addr;
   1f4d8:	611d      	str	r5, [r3, #16]
	iface->link_addr.type = type;
   1f4da:	755a      	strb	r2, [r3, #21]
	ll.len = sizeof(ctxt->dst.val);
   1f4dc:	2306      	movs	r3, #6
   1f4de:	f88d 3010 	strb.w	r3, [sp, #16]
	ll.type = NET_LINK_BLUETOOTH;
   1f4e2:	2302      	movs	r3, #2
   1f4e4:	f88d 3011 	strb.w	r3, [sp, #17]
	addr->s6_addr[1] = 0x80;
   1f4e8:	2380      	movs	r3, #128	; 0x80
	addr->s6_addr[0] = 0xfe;
   1f4ea:	25fe      	movs	r5, #254	; 0xfe
	addr->s6_addr[1] = 0x80;
   1f4ec:	f88d 3015 	strb.w	r3, [sp, #21]
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1f4f0:	2203      	movs	r2, #3
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1f4f2:	2300      	movs	r3, #0
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1f4f4:	a807      	add	r0, sp, #28
	ll.addr = ctxt->dst.val;
   1f4f6:	9103      	str	r1, [sp, #12]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1f4f8:	f8ad 3016 	strh.w	r3, [sp, #22]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1f4fc:	9306      	str	r3, [sp, #24]
	addr->s6_addr[0] = 0xfe;
   1f4fe:	f88d 5014 	strb.w	r5, [sp, #20]
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1f502:	f7e1 f95b 	bl	7bc <memcpy>
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1f506:	9903      	ldr	r1, [sp, #12]
		addr->s6_addr[12] = 0xfe;
   1f508:	f88d 5020 	strb.w	r5, [sp, #32]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1f50c:	2203      	movs	r2, #3
		addr->s6_addr[11] = 0xff;
   1f50e:	23ff      	movs	r3, #255	; 0xff
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1f510:	4411      	add	r1, r2
   1f512:	f10d 0021 	add.w	r0, sp, #33	; 0x21
		addr->s6_addr[11] = 0xff;
   1f516:	f88d 301f 	strb.w	r3, [sp, #31]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1f51a:	f7e1 f94f 	bl	7bc <memcpy>
		if (lladdr->type == NET_LINK_ETHERNET) {
   1f51e:	f89d 3011 	ldrb.w	r3, [sp, #17]
	net_ipv6_nbr_add(ctxt->iface, &in6, &ll, false,
   1f522:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1f526:	2b03      	cmp	r3, #3
			addr->s6_addr[8] ^= 0x02;
   1f528:	bf02      	ittt	eq
   1f52a:	f89d 301c 	ldrbeq.w	r3, [sp, #28]
   1f52e:	f083 0302 	eoreq.w	r3, r3, #2
   1f532:	f88d 301c 	strbeq.w	r3, [sp, #28]
   1f536:	2305      	movs	r3, #5
   1f538:	9300      	str	r3, [sp, #0]
   1f53a:	aa03      	add	r2, sp, #12
   1f53c:	2300      	movs	r3, #0
   1f53e:	a905      	add	r1, sp, #20
   1f540:	f7fd fabe 	bl	1cac0 <net_ipv6_nbr_add>
	connection_base = false;
   1f544:	4b09      	ldr	r3, [pc, #36]	; (1f56c <ipsp_connected+0x11c>)
	net_if_up(ctxt->iface);
   1f546:	f854 0c04 	ldr.w	r0, [r4, #-4]
	connection_base = false;
   1f54a:	2200      	movs	r2, #0
   1f54c:	701a      	strb	r2, [r3, #0]
	net_if_up(ctxt->iface);
   1f54e:	f7fa f8c7 	bl	196e0 <net_if_up>
   1f552:	e793      	b.n	1f47c <ipsp_connected+0x2c>
   1f554:	00021b5c 	.word	0x00021b5c
   1f558:	00021b61 	.word	0x00021b61
   1f55c:	00021b36 	.word	0x00021b36
   1f560:	0002368a 	.word	0x0002368a
   1f564:	000238b2 	.word	0x000238b2
   1f568:	000238df 	.word	0x000238df
   1f56c:	2000336d 	.word	0x2000336d

0001f570 <net_mgmt_NET_REQUEST_BT_ADVERTISE>:
{
   1f570:	b510      	push	{r4, lr}
	if (!strcmp(data, "on")) {
   1f572:	4913      	ldr	r1, [pc, #76]	; (1f5c0 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x50>)
{
   1f574:	b086      	sub	sp, #24
	if (!strcmp(data, "on")) {
   1f576:	4610      	mov	r0, r2
{
   1f578:	4614      	mov	r4, r2
	if (!strcmp(data, "on")) {
   1f57a:	f7e1 f8c9 	bl	710 <strcmp>
   1f57e:	b9a0      	cbnz	r0, 1f5aa <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x3a>
		return bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   1f580:	22a0      	movs	r2, #160	; 0xa0
   1f582:	9003      	str	r0, [sp, #12]
   1f584:	2301      	movs	r3, #1
   1f586:	f8ad 200e 	strh.w	r2, [sp, #14]
   1f58a:	22f0      	movs	r2, #240	; 0xf0
   1f58c:	9004      	str	r0, [sp, #16]
   1f58e:	9005      	str	r0, [sp, #20]
   1f590:	f88d 300c 	strb.w	r3, [sp, #12]
   1f594:	f8ad 2010 	strh.w	r2, [sp, #16]
   1f598:	9300      	str	r3, [sp, #0]
   1f59a:	2202      	movs	r2, #2
   1f59c:	4b09      	ldr	r3, [pc, #36]	; (1f5c4 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x54>)
   1f59e:	490a      	ldr	r1, [pc, #40]	; (1f5c8 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x58>)
   1f5a0:	a803      	add	r0, sp, #12
   1f5a2:	f7e6 f815 	bl	55d0 <bt_le_adv_start>
}
   1f5a6:	b006      	add	sp, #24
   1f5a8:	bd10      	pop	{r4, pc}
	} else if (!strcmp(data, "off")) {
   1f5aa:	4908      	ldr	r1, [pc, #32]	; (1f5cc <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x5c>)
   1f5ac:	4620      	mov	r0, r4
   1f5ae:	f7e1 f8af 	bl	710 <strcmp>
   1f5b2:	b910      	cbnz	r0, 1f5ba <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x4a>
		return bt_le_adv_stop();
   1f5b4:	f7e6 f8d8 	bl	5768 <bt_le_adv_stop>
   1f5b8:	e7f5      	b.n	1f5a6 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x36>
		return -EINVAL;
   1f5ba:	f06f 0015 	mvn.w	r0, #21
   1f5be:	e7f2      	b.n	1f5a6 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x36>
   1f5c0:	00023327 	.word	0x00023327
   1f5c4:	00023914 	.word	0x00023914
   1f5c8:	00023710 	.word	0x00023710
   1f5cc:	00023a12 	.word	0x00023a12

0001f5d0 <net_mgmt_NET_REQUEST_BT_CONNECT>:
{
   1f5d0:	b530      	push	{r4, r5, lr}
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1f5d2:	6809      	ldr	r1, [r1, #0]
	bt_ctxt = net_if_get_device(iface)->driver_data;
   1f5d4:	481c      	ldr	r0, [pc, #112]	; (1f648 <net_mgmt_NET_REQUEST_BT_CONNECT+0x78>)
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1f5d6:	6889      	ldr	r1, [r1, #8]
	bt_ctxt = net_if_get_device(iface)->driver_data;
   1f5d8:	6001      	str	r1, [r0, #0]
	if (len != sizeof(*addr)) {
   1f5da:	2b07      	cmp	r3, #7
{
   1f5dc:	b085      	sub	sp, #20
	if (len != sizeof(*addr)) {
   1f5de:	d00d      	beq.n	1f5fc <net_mgmt_NET_REQUEST_BT_CONNECT+0x2c>
		NET_ERR("Invalid address");
   1f5e0:	4b1a      	ldr	r3, [pc, #104]	; (1f64c <net_mgmt_NET_REQUEST_BT_CONNECT+0x7c>)
   1f5e2:	9301      	str	r3, [sp, #4]
   1f5e4:	4b1a      	ldr	r3, [pc, #104]	; (1f650 <net_mgmt_NET_REQUEST_BT_CONNECT+0x80>)
   1f5e6:	9300      	str	r3, [sp, #0]
   1f5e8:	4a1a      	ldr	r2, [pc, #104]	; (1f654 <net_mgmt_NET_REQUEST_BT_CONNECT+0x84>)
   1f5ea:	4b1b      	ldr	r3, [pc, #108]	; (1f658 <net_mgmt_NET_REQUEST_BT_CONNECT+0x88>)
   1f5ec:	491b      	ldr	r1, [pc, #108]	; (1f65c <net_mgmt_NET_REQUEST_BT_CONNECT+0x8c>)
   1f5ee:	481c      	ldr	r0, [pc, #112]	; (1f660 <net_mgmt_NET_REQUEST_BT_CONNECT+0x90>)
   1f5f0:	f7e2 f910 	bl	1814 <printk>
   1f5f4:	f06f 0015 	mvn.w	r0, #21
}
   1f5f8:	b005      	add	sp, #20
   1f5fa:	bd30      	pop	{r4, r5, pc}
	if (ctxt->ipsp_chan.chan.conn) {
   1f5fc:	684b      	ldr	r3, [r1, #4]
   1f5fe:	b163      	cbz	r3, 1f61a <net_mgmt_NET_REQUEST_BT_CONNECT+0x4a>
		NET_ERR("No channels available");
   1f600:	4b12      	ldr	r3, [pc, #72]	; (1f64c <net_mgmt_NET_REQUEST_BT_CONNECT+0x7c>)
   1f602:	9301      	str	r3, [sp, #4]
   1f604:	4b12      	ldr	r3, [pc, #72]	; (1f650 <net_mgmt_NET_REQUEST_BT_CONNECT+0x80>)
   1f606:	9300      	str	r3, [sp, #0]
   1f608:	4a12      	ldr	r2, [pc, #72]	; (1f654 <net_mgmt_NET_REQUEST_BT_CONNECT+0x84>)
   1f60a:	4b13      	ldr	r3, [pc, #76]	; (1f658 <net_mgmt_NET_REQUEST_BT_CONNECT+0x88>)
   1f60c:	4913      	ldr	r1, [pc, #76]	; (1f65c <net_mgmt_NET_REQUEST_BT_CONNECT+0x8c>)
   1f60e:	4815      	ldr	r0, [pc, #84]	; (1f664 <net_mgmt_NET_REQUEST_BT_CONNECT+0x94>)
   1f610:	f7e2 f900 	bl	1814 <printk>
		return -ENOMEM;
   1f614:	f06f 000b 	mvn.w	r0, #11
   1f618:	e7ee      	b.n	1f5f8 <net_mgmt_NET_REQUEST_BT_CONNECT+0x28>
	if (default_conn) {
   1f61a:	4d13      	ldr	r5, [pc, #76]	; (1f668 <net_mgmt_NET_REQUEST_BT_CONNECT+0x98>)
   1f61c:	682c      	ldr	r4, [r5, #0]
   1f61e:	b12c      	cbz	r4, 1f62c <net_mgmt_NET_REQUEST_BT_CONNECT+0x5c>
		return bt_l2cap_chan_connect(default_conn,
   1f620:	2223      	movs	r2, #35	; 0x23
   1f622:	3104      	adds	r1, #4
   1f624:	4620      	mov	r0, r4
   1f626:	f7e7 fbd9 	bl	6ddc <bt_l2cap_chan_connect>
   1f62a:	e7e5      	b.n	1f5f8 <net_mgmt_NET_REQUEST_BT_CONNECT+0x28>
	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
   1f62c:	490f      	ldr	r1, [pc, #60]	; (1f66c <net_mgmt_NET_REQUEST_BT_CONNECT+0x9c>)
   1f62e:	6808      	ldr	r0, [r1, #0]
   1f630:	6849      	ldr	r1, [r1, #4]
   1f632:	ab02      	add	r3, sp, #8
   1f634:	c303      	stmia	r3!, {r0, r1}
   1f636:	a902      	add	r1, sp, #8
   1f638:	4610      	mov	r0, r2
   1f63a:	f7e6 fe07 	bl	624c <bt_conn_create_le>
	connectionless = false;
   1f63e:	4b0c      	ldr	r3, [pc, #48]	; (1f670 <net_mgmt_NET_REQUEST_BT_CONNECT+0xa0>)
	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
   1f640:	6028      	str	r0, [r5, #0]
	connectionless = false;
   1f642:	701c      	strb	r4, [r3, #0]
	return 0;
   1f644:	4620      	mov	r0, r4
   1f646:	e7d7      	b.n	1f5f8 <net_mgmt_NET_REQUEST_BT_CONNECT+0x28>
   1f648:	20005288 	.word	0x20005288
   1f64c:	00021b5c 	.word	0x00021b5c
   1f650:	00021b61 	.word	0x00021b61
   1f654:	00021b36 	.word	0x00021b36
   1f658:	000236a5 	.word	0x000236a5
   1f65c:	000238b2 	.word	0x000238b2
   1f660:	00023720 	.word	0x00023720
   1f664:	000238b9 	.word	0x000238b9
   1f668:	20005280 	.word	0x20005280
   1f66c:	000218bc 	.word	0x000218bc
   1f670:	2000336e 	.word	0x2000336e

0001f674 <net_mgmt_NET_REQUEST_BT_SCAN>:
{
   1f674:	b530      	push	{r4, r5, lr}
	if (!strcmp(data, "on") || !strcmp(data, "active")) {
   1f676:	492e      	ldr	r1, [pc, #184]	; (1f730 <net_mgmt_NET_REQUEST_BT_SCAN+0xbc>)
{
   1f678:	b087      	sub	sp, #28
	if (!strcmp(data, "on") || !strcmp(data, "active")) {
   1f67a:	4610      	mov	r0, r2
{
   1f67c:	4615      	mov	r5, r2
	if (!strcmp(data, "on") || !strcmp(data, "active")) {
   1f67e:	f7e1 f847 	bl	710 <strcmp>
   1f682:	b998      	cbnz	r0, 1f6ac <net_mgmt_NET_REQUEST_BT_SCAN+0x38>
	err = bt_le_scan_start(&scan_param, device_found);
   1f684:	492b      	ldr	r1, [pc, #172]	; (1f734 <net_mgmt_NET_REQUEST_BT_SCAN+0xc0>)
   1f686:	482c      	ldr	r0, [pc, #176]	; (1f738 <net_mgmt_NET_REQUEST_BT_SCAN+0xc4>)
   1f688:	f7e6 f894 	bl	57b4 <bt_le_scan_start>
	if (err) {
   1f68c:	4604      	mov	r4, r0
   1f68e:	2800      	cmp	r0, #0
   1f690:	d030      	beq.n	1f6f4 <net_mgmt_NET_REQUEST_BT_SCAN+0x80>
		NET_ERR("Bluetooth set active scan failed (err %d)\n", err);
   1f692:	4b2a      	ldr	r3, [pc, #168]	; (1f73c <net_mgmt_NET_REQUEST_BT_SCAN+0xc8>)
   1f694:	9302      	str	r3, [sp, #8]
   1f696:	4b2a      	ldr	r3, [pc, #168]	; (1f740 <net_mgmt_NET_REQUEST_BT_SCAN+0xcc>)
   1f698:	9001      	str	r0, [sp, #4]
   1f69a:	9300      	str	r3, [sp, #0]
   1f69c:	4a29      	ldr	r2, [pc, #164]	; (1f744 <net_mgmt_NET_REQUEST_BT_SCAN+0xd0>)
   1f69e:	4b2a      	ldr	r3, [pc, #168]	; (1f748 <net_mgmt_NET_REQUEST_BT_SCAN+0xd4>)
   1f6a0:	492a      	ldr	r1, [pc, #168]	; (1f74c <net_mgmt_NET_REQUEST_BT_SCAN+0xd8>)
   1f6a2:	482b      	ldr	r0, [pc, #172]	; (1f750 <net_mgmt_NET_REQUEST_BT_SCAN+0xdc>)
   1f6a4:	f7e2 f8b6 	bl	1814 <printk>
	return 0;
   1f6a8:	2400      	movs	r4, #0
   1f6aa:	e026      	b.n	1f6fa <net_mgmt_NET_REQUEST_BT_SCAN+0x86>
	if (!strcmp(data, "on") || !strcmp(data, "active")) {
   1f6ac:	4929      	ldr	r1, [pc, #164]	; (1f754 <net_mgmt_NET_REQUEST_BT_SCAN+0xe0>)
   1f6ae:	4628      	mov	r0, r5
   1f6b0:	f7e1 f82e 	bl	710 <strcmp>
   1f6b4:	2800      	cmp	r0, #0
   1f6b6:	d0e5      	beq.n	1f684 <net_mgmt_NET_REQUEST_BT_SCAN+0x10>
	} else if (!strcmp(data, "passive")) {
   1f6b8:	4927      	ldr	r1, [pc, #156]	; (1f758 <net_mgmt_NET_REQUEST_BT_SCAN+0xe4>)
   1f6ba:	4628      	mov	r0, r5
   1f6bc:	f7e1 f828 	bl	710 <strcmp>
   1f6c0:	4604      	mov	r4, r0
   1f6c2:	b9e8      	cbnz	r0, 1f700 <net_mgmt_NET_REQUEST_BT_SCAN+0x8c>
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
   1f6c4:	4b25      	ldr	r3, [pc, #148]	; (1f75c <net_mgmt_NET_REQUEST_BT_SCAN+0xe8>)
   1f6c6:	491b      	ldr	r1, [pc, #108]	; (1f734 <net_mgmt_NET_REQUEST_BT_SCAN+0xc0>)
   1f6c8:	6818      	ldr	r0, [r3, #0]
   1f6ca:	9004      	str	r0, [sp, #16]
   1f6cc:	889b      	ldrh	r3, [r3, #4]
   1f6ce:	f8ad 3014 	strh.w	r3, [sp, #20]
   1f6d2:	a804      	add	r0, sp, #16
   1f6d4:	f7e6 f86e 	bl	57b4 <bt_le_scan_start>
	if (err) {
   1f6d8:	2800      	cmp	r0, #0
   1f6da:	d0e5      	beq.n	1f6a8 <net_mgmt_NET_REQUEST_BT_SCAN+0x34>
		NET_ERR("Bluetooth set passive scan failed (err %d)\n", err);
   1f6dc:	4b17      	ldr	r3, [pc, #92]	; (1f73c <net_mgmt_NET_REQUEST_BT_SCAN+0xc8>)
   1f6de:	9302      	str	r3, [sp, #8]
   1f6e0:	4b17      	ldr	r3, [pc, #92]	; (1f740 <net_mgmt_NET_REQUEST_BT_SCAN+0xcc>)
   1f6e2:	9001      	str	r0, [sp, #4]
   1f6e4:	9300      	str	r3, [sp, #0]
   1f6e6:	4a17      	ldr	r2, [pc, #92]	; (1f744 <net_mgmt_NET_REQUEST_BT_SCAN+0xd0>)
   1f6e8:	4b1d      	ldr	r3, [pc, #116]	; (1f760 <net_mgmt_NET_REQUEST_BT_SCAN+0xec>)
   1f6ea:	4918      	ldr	r1, [pc, #96]	; (1f74c <net_mgmt_NET_REQUEST_BT_SCAN+0xd8>)
   1f6ec:	481d      	ldr	r0, [pc, #116]	; (1f764 <net_mgmt_NET_REQUEST_BT_SCAN+0xf0>)
		NET_ERR("Stopping scanning failed (err %d)\n", err);
   1f6ee:	f7e2 f891 	bl	1814 <printk>
   1f6f2:	e002      	b.n	1f6fa <net_mgmt_NET_REQUEST_BT_SCAN+0x86>
		printk("scan actiavted");
   1f6f4:	481c      	ldr	r0, [pc, #112]	; (1f768 <net_mgmt_NET_REQUEST_BT_SCAN+0xf4>)
   1f6f6:	f7e2 f88d 	bl	1814 <printk>
}
   1f6fa:	4620      	mov	r0, r4
   1f6fc:	b007      	add	sp, #28
   1f6fe:	bd30      	pop	{r4, r5, pc}
	} else if (!strcmp("off", data)) {
   1f700:	4629      	mov	r1, r5
   1f702:	481a      	ldr	r0, [pc, #104]	; (1f76c <net_mgmt_NET_REQUEST_BT_SCAN+0xf8>)
   1f704:	f7e1 f804 	bl	710 <strcmp>
   1f708:	4604      	mov	r4, r0
   1f70a:	b968      	cbnz	r0, 1f728 <net_mgmt_NET_REQUEST_BT_SCAN+0xb4>
	err = bt_le_scan_stop();
   1f70c:	f7e6 f8a4 	bl	5858 <bt_le_scan_stop>
	if (err) {
   1f710:	2800      	cmp	r0, #0
   1f712:	d0c9      	beq.n	1f6a8 <net_mgmt_NET_REQUEST_BT_SCAN+0x34>
		NET_ERR("Stopping scanning failed (err %d)\n", err);
   1f714:	4b09      	ldr	r3, [pc, #36]	; (1f73c <net_mgmt_NET_REQUEST_BT_SCAN+0xc8>)
   1f716:	9302      	str	r3, [sp, #8]
   1f718:	4b09      	ldr	r3, [pc, #36]	; (1f740 <net_mgmt_NET_REQUEST_BT_SCAN+0xcc>)
   1f71a:	9001      	str	r0, [sp, #4]
   1f71c:	9300      	str	r3, [sp, #0]
   1f71e:	4a09      	ldr	r2, [pc, #36]	; (1f744 <net_mgmt_NET_REQUEST_BT_SCAN+0xd0>)
   1f720:	4b13      	ldr	r3, [pc, #76]	; (1f770 <net_mgmt_NET_REQUEST_BT_SCAN+0xfc>)
   1f722:	490a      	ldr	r1, [pc, #40]	; (1f74c <net_mgmt_NET_REQUEST_BT_SCAN+0xd8>)
   1f724:	4813      	ldr	r0, [pc, #76]	; (1f774 <net_mgmt_NET_REQUEST_BT_SCAN+0x100>)
   1f726:	e7e2      	b.n	1f6ee <net_mgmt_NET_REQUEST_BT_SCAN+0x7a>
		return -EINVAL;
   1f728:	f06f 0415 	mvn.w	r4, #21
   1f72c:	e7e5      	b.n	1f6fa <net_mgmt_NET_REQUEST_BT_SCAN+0x86>
   1f72e:	bf00      	nop
   1f730:	00023327 	.word	0x00023327
   1f734:	0001f2bd 	.word	0x0001f2bd
   1f738:	2000ea80 	.word	0x2000ea80
   1f73c:	00021b5c 	.word	0x00021b5c
   1f740:	00021b61 	.word	0x00021b61
   1f744:	00021b36 	.word	0x00021b36
   1f748:	000236c3 	.word	0x000236c3
   1f74c:	000238b2 	.word	0x000238b2
   1f750:	00023765 	.word	0x00023765
   1f754:	0002375e 	.word	0x0002375e
   1f758:	000237af 	.word	0x000237af
   1f75c:	000218c4 	.word	0x000218c4
   1f760:	000236d2 	.word	0x000236d2
   1f764:	000237b7 	.word	0x000237b7
   1f768:	000237a0 	.word	0x000237a0
   1f76c:	00023a12 	.word	0x00023a12
   1f770:	000236e2 	.word	0x000236e2
   1f774:	000237f3 	.word	0x000237f3

0001f778 <net_mgmt_NET_REQUEST_BT_DISCONNECT>:
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1f778:	680b      	ldr	r3, [r1, #0]
{
   1f77a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1f77c:	689d      	ldr	r5, [r3, #8]
	if (!ctxt->ipsp_chan.chan.conn) {
   1f77e:	686b      	ldr	r3, [r5, #4]
   1f780:	b19b      	cbz	r3, 1f7aa <net_mgmt_NET_REQUEST_BT_DISCONNECT+0x32>
	if (default_conn) {
   1f782:	4c11      	ldr	r4, [pc, #68]	; (1f7c8 <net_mgmt_NET_REQUEST_BT_DISCONNECT+0x50>)
   1f784:	6820      	ldr	r0, [r4, #0]
   1f786:	b138      	cbz	r0, 1f798 <net_mgmt_NET_REQUEST_BT_DISCONNECT+0x20>
		bt_conn_unref(default_conn);
   1f788:	f7e6 fd1c 	bl	61c4 <bt_conn_unref>
		if(!bt_hci_disconnect(default_conn, 0x05)){
   1f78c:	2105      	movs	r1, #5
   1f78e:	6820      	ldr	r0, [r4, #0]
   1f790:	f7e6 fd3b 	bl	620a <bt_hci_disconnect>
		default_conn = NULL;
   1f794:	2300      	movs	r3, #0
   1f796:	6023      	str	r3, [r4, #0]
	ble_connected = true;
   1f798:	4b0c      	ldr	r3, [pc, #48]	; (1f7cc <net_mgmt_NET_REQUEST_BT_DISCONNECT+0x54>)
   1f79a:	2201      	movs	r2, #1
	return bt_l2cap_chan_disconnect(&ctxt->ipsp_chan.chan);
   1f79c:	1d28      	adds	r0, r5, #4
	ble_connected = true;
   1f79e:	701a      	strb	r2, [r3, #0]
}
   1f7a0:	b003      	add	sp, #12
   1f7a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return bt_l2cap_chan_disconnect(&ctxt->ipsp_chan.chan);
   1f7a6:	f7e7 bb4b 	b.w	6e40 <bt_l2cap_chan_disconnect>
		NET_ERR("Not connected");
   1f7aa:	4b09      	ldr	r3, [pc, #36]	; (1f7d0 <net_mgmt_NET_REQUEST_BT_DISCONNECT+0x58>)
   1f7ac:	9301      	str	r3, [sp, #4]
   1f7ae:	4b09      	ldr	r3, [pc, #36]	; (1f7d4 <net_mgmt_NET_REQUEST_BT_DISCONNECT+0x5c>)
   1f7b0:	9300      	str	r3, [sp, #0]
   1f7b2:	4a09      	ldr	r2, [pc, #36]	; (1f7d8 <net_mgmt_NET_REQUEST_BT_DISCONNECT+0x60>)
   1f7b4:	4b09      	ldr	r3, [pc, #36]	; (1f7dc <net_mgmt_NET_REQUEST_BT_DISCONNECT+0x64>)
   1f7b6:	490a      	ldr	r1, [pc, #40]	; (1f7e0 <net_mgmt_NET_REQUEST_BT_DISCONNECT+0x68>)
   1f7b8:	480a      	ldr	r0, [pc, #40]	; (1f7e4 <net_mgmt_NET_REQUEST_BT_DISCONNECT+0x6c>)
   1f7ba:	f7e2 f82b 	bl	1814 <printk>
}
   1f7be:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1f7c2:	b003      	add	sp, #12
   1f7c4:	bd30      	pop	{r4, r5, pc}
   1f7c6:	bf00      	nop
   1f7c8:	20005280 	.word	0x20005280
   1f7cc:	2000336c 	.word	0x2000336c
   1f7d0:	00021b5c 	.word	0x00021b5c
   1f7d4:	00021b61 	.word	0x00021b61
   1f7d8:	00021b36 	.word	0x00021b36
   1f7dc:	000236ee 	.word	0x000236ee
   1f7e0:	000238b2 	.word	0x000238b2
   1f7e4:	00023740 	.word	0x00023740

0001f7e8 <net_mgmt_NET_REQUEST_BT_SWITCH>:
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1f7e8:	680b      	ldr	r3, [r1, #0]
{
   1f7ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f7ee:	4688      	mov	r8, r1
	if (!strcmp( data, "connless")){
   1f7f0:	4610      	mov	r0, r2
   1f7f2:	4929      	ldr	r1, [pc, #164]	; (1f898 <net_mgmt_NET_REQUEST_BT_SWITCH+0xb0>)
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1f7f4:	689d      	ldr	r5, [r3, #8]
{
   1f7f6:	4614      	mov	r4, r2
	if (!strcmp( data, "connless")){
   1f7f8:	f7e0 ff8a 	bl	710 <strcmp>
   1f7fc:	4607      	mov	r7, r0
   1f7fe:	2800      	cmp	r0, #0
   1f800:	d133      	bne.n	1f86a <net_mgmt_NET_REQUEST_BT_SWITCH+0x82>
		bt_ctxt = net_if_get_device(iface)->driver_data;
   1f802:	f8d8 3000 	ldr.w	r3, [r8]
   1f806:	689a      	ldr	r2, [r3, #8]
   1f808:	4b24      	ldr	r3, [pc, #144]	; (1f89c <net_mgmt_NET_REQUEST_BT_SWITCH+0xb4>)
   1f80a:	601a      	str	r2, [r3, #0]
		if (!ctxt->ipsp_chan.chan.conn) {
   1f80c:	686b      	ldr	r3, [r5, #4]
   1f80e:	b97b      	cbnz	r3, 1f830 <net_mgmt_NET_REQUEST_BT_SWITCH+0x48>
			NET_ERR("Not connected");
   1f810:	4b23      	ldr	r3, [pc, #140]	; (1f8a0 <net_mgmt_NET_REQUEST_BT_SWITCH+0xb8>)
   1f812:	9301      	str	r3, [sp, #4]
   1f814:	4b23      	ldr	r3, [pc, #140]	; (1f8a4 <net_mgmt_NET_REQUEST_BT_SWITCH+0xbc>)
   1f816:	9300      	str	r3, [sp, #0]
   1f818:	4a23      	ldr	r2, [pc, #140]	; (1f8a8 <net_mgmt_NET_REQUEST_BT_SWITCH+0xc0>)
   1f81a:	4b24      	ldr	r3, [pc, #144]	; (1f8ac <net_mgmt_NET_REQUEST_BT_SWITCH+0xc4>)
   1f81c:	4924      	ldr	r1, [pc, #144]	; (1f8b0 <net_mgmt_NET_REQUEST_BT_SWITCH+0xc8>)
   1f81e:	4825      	ldr	r0, [pc, #148]	; (1f8b4 <net_mgmt_NET_REQUEST_BT_SWITCH+0xcc>)
   1f820:	f7e1 fff8 	bl	1814 <printk>
			return -ENOTCONN;
   1f824:	f06f 0438 	mvn.w	r4, #56	; 0x38
}
   1f828:	4620      	mov	r0, r4
   1f82a:	b002      	add	sp, #8
   1f82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (default_conn) {
   1f830:	4c21      	ldr	r4, [pc, #132]	; (1f8b8 <net_mgmt_NET_REQUEST_BT_SWITCH+0xd0>)
   1f832:	6820      	ldr	r0, [r4, #0]
   1f834:	b160      	cbz	r0, 1f850 <net_mgmt_NET_REQUEST_BT_SWITCH+0x68>
			bt_conn_unref(default_conn);
   1f836:	f7e6 fcc5 	bl	61c4 <bt_conn_unref>
			if(!bt_hci_disconnect(default_conn, 0x1A)){
   1f83a:	211a      	movs	r1, #26
   1f83c:	6820      	ldr	r0, [r4, #0]
   1f83e:	f7e6 fce4 	bl	620a <bt_hci_disconnect>
   1f842:	b980      	cbnz	r0, 1f866 <net_mgmt_NET_REQUEST_BT_SWITCH+0x7e>
				printk("sucessful");
   1f844:	481d      	ldr	r0, [pc, #116]	; (1f8bc <net_mgmt_NET_REQUEST_BT_SWITCH+0xd4>)
   1f846:	f7e1 ffe5 	bl	1814 <printk>
				sucesss = true;
   1f84a:	2601      	movs	r6, #1
			default_conn = NULL;
   1f84c:	2300      	movs	r3, #0
   1f84e:	6023      	str	r3, [r4, #0]
		if(sucesss){
   1f850:	2e00      	cmp	r6, #0
   1f852:	d0e9      	beq.n	1f828 <net_mgmt_NET_REQUEST_BT_SWITCH+0x40>
			connectionless = true;
   1f854:	4b1a      	ldr	r3, [pc, #104]	; (1f8c0 <net_mgmt_NET_REQUEST_BT_SWITCH+0xd8>)
   1f856:	2201      	movs	r2, #1
			return bt_l2cap_chan_disconnect(&ctxt->ipsp_chan.chan);
   1f858:	1d28      	adds	r0, r5, #4
			connectionless = true;
   1f85a:	701a      	strb	r2, [r3, #0]
}
   1f85c:	b002      	add	sp, #8
   1f85e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return bt_l2cap_chan_disconnect(&ctxt->ipsp_chan.chan);
   1f862:	f7e7 baed 	b.w	6e40 <bt_l2cap_chan_disconnect>
				sucesss = false;
   1f866:	463e      	mov	r6, r7
   1f868:	e7f0      	b.n	1f84c <net_mgmt_NET_REQUEST_BT_SWITCH+0x64>
	}else if(!strcmp( data, "conn")){
   1f86a:	4620      	mov	r0, r4
   1f86c:	4915      	ldr	r1, [pc, #84]	; (1f8c4 <net_mgmt_NET_REQUEST_BT_SWITCH+0xdc>)
   1f86e:	f7e0 ff4f 	bl	710 <strcmp>
   1f872:	4604      	mov	r4, r0
   1f874:	2800      	cmp	r0, #0
   1f876:	d1d7      	bne.n	1f828 <net_mgmt_NET_REQUEST_BT_SWITCH+0x40>
		connectionless = false;
   1f878:	4b11      	ldr	r3, [pc, #68]	; (1f8c0 <net_mgmt_NET_REQUEST_BT_SWITCH+0xd8>)
   1f87a:	7018      	strb	r0, [r3, #0]
		connection_base = true;
   1f87c:	4b12      	ldr	r3, [pc, #72]	; (1f8c8 <net_mgmt_NET_REQUEST_BT_SWITCH+0xe0>)
   1f87e:	2201      	movs	r2, #1
   1f880:	701a      	strb	r2, [r3, #0]
		ext_adv_actiavte = false;
   1f882:	4b12      	ldr	r3, [pc, #72]	; (1f8cc <net_mgmt_NET_REQUEST_BT_SWITCH+0xe4>)
   1f884:	7018      	strb	r0, [r3, #0]
		bt_le_ext_adv_stop();
   1f886:	f7e5 ff33 	bl	56f0 <bt_le_ext_adv_stop>
		net_if_carrier_down(bt_ctxt->iface);
   1f88a:	4b04      	ldr	r3, [pc, #16]	; (1f89c <net_mgmt_NET_REQUEST_BT_SWITCH+0xb4>)
   1f88c:	681b      	ldr	r3, [r3, #0]
   1f88e:	6818      	ldr	r0, [r3, #0]
   1f890:	f7f9 ff52 	bl	19738 <net_if_carrier_down>
		return 0;
   1f894:	e7c8      	b.n	1f828 <net_mgmt_NET_REQUEST_BT_SWITCH+0x40>
   1f896:	bf00      	nop
   1f898:	00023a7f 	.word	0x00023a7f
   1f89c:	20005288 	.word	0x20005288
   1f8a0:	00021b5c 	.word	0x00021b5c
   1f8a4:	00021b61 	.word	0x00021b61
   1f8a8:	00021b36 	.word	0x00021b36
   1f8ac:	000236fc 	.word	0x000236fc
   1f8b0:	000238b2 	.word	0x000238b2
   1f8b4:	00023740 	.word	0x00023740
   1f8b8:	20005280 	.word	0x20005280
   1f8bc:	00023826 	.word	0x00023826
   1f8c0:	2000336e 	.word	0x2000336e
   1f8c4:	00023384 	.word	0x00023384
   1f8c8:	2000336d 	.word	0x2000336d
   1f8cc:	2000336f 	.word	0x2000336f

0001f8d0 <shell_cmd_switch>:

	return 0;
}

static int shell_cmd_switch(int argc, char *argv[])
{
   1f8d0:	b538      	push	{r3, r4, r5, lr}
   1f8d2:	460c      	mov	r4, r1
	struct net_if *iface = net_if_get_default();
   1f8d4:	f7f9 f902 	bl	18adc <net_if_get_default>

	if (net_mgmt(NET_REQUEST_BT_SWITCH, iface,  argv[1], strlen(argv[1]))) {
   1f8d8:	6864      	ldr	r4, [r4, #4]
	struct net_if *iface = net_if_get_default();
   1f8da:	4605      	mov	r5, r0
	if (net_mgmt(NET_REQUEST_BT_SWITCH, iface,  argv[1], strlen(argv[1]))) {
   1f8dc:	4620      	mov	r0, r4
   1f8de:	f7e0 ff0f 	bl	700 <strlen>
   1f8e2:	4622      	mov	r2, r4
   1f8e4:	4603      	mov	r3, r0
   1f8e6:	4629      	mov	r1, r5
   1f8e8:	4805      	ldr	r0, [pc, #20]	; (1f900 <shell_cmd_switch+0x30>)
   1f8ea:	f7ff ff7d 	bl	1f7e8 <net_mgmt_NET_REQUEST_BT_SWITCH>
   1f8ee:	b120      	cbz	r0, 1f8fa <shell_cmd_switch+0x2a>
		printk("switch failed\n");
   1f8f0:	4804      	ldr	r0, [pc, #16]	; (1f904 <shell_cmd_switch+0x34>)
	} else {
		printk("switched\n");
   1f8f2:	f7e1 ff8f 	bl	1814 <printk>
	}

	return 0;
}
   1f8f6:	2000      	movs	r0, #0
   1f8f8:	bd38      	pop	{r3, r4, r5, pc}
		printk("switched\n");
   1f8fa:	4803      	ldr	r0, [pc, #12]	; (1f908 <shell_cmd_switch+0x38>)
   1f8fc:	e7f9      	b.n	1f8f2 <shell_cmd_switch+0x22>
   1f8fe:	bf00      	nop
   1f900:	61550005 	.word	0x61550005
   1f904:	000239ec 	.word	0x000239ec
   1f908:	000239fb 	.word	0x000239fb

0001f90c <shell_cmd_disconnect>:


static int shell_cmd_disconnect(int argc, char *argv[])
{
   1f90c:	b508      	push	{r3, lr}
	struct net_if *iface = net_if_get_default();
   1f90e:	f7f9 f8e5 	bl	18adc <net_if_get_default>

	if (net_mgmt(NET_REQUEST_BT_DISCONNECT, iface, NULL, 0)) {
   1f912:	2300      	movs	r3, #0
   1f914:	4601      	mov	r1, r0
   1f916:	461a      	mov	r2, r3
   1f918:	4805      	ldr	r0, [pc, #20]	; (1f930 <shell_cmd_disconnect+0x24>)
   1f91a:	f7ff ff2d 	bl	1f778 <net_mgmt_NET_REQUEST_BT_DISCONNECT>
   1f91e:	b120      	cbz	r0, 1f92a <shell_cmd_disconnect+0x1e>
		printk("Disconnect failed\n");
   1f920:	4804      	ldr	r0, [pc, #16]	; (1f934 <shell_cmd_disconnect+0x28>)
	} else {
		printk("Disconnected\n");
   1f922:	f7e1 ff77 	bl	1814 <printk>
	}

	return 0;
}
   1f926:	2000      	movs	r0, #0
   1f928:	bd08      	pop	{r3, pc}
		printk("Disconnected\n");
   1f92a:	4803      	ldr	r0, [pc, #12]	; (1f938 <shell_cmd_disconnect+0x2c>)
   1f92c:	e7f9      	b.n	1f922 <shell_cmd_disconnect+0x16>
   1f92e:	bf00      	nop
   1f930:	61550004 	.word	0x61550004
   1f934:	000239ac 	.word	0x000239ac
   1f938:	000239bf 	.word	0x000239bf

0001f93c <shell_cmd_scan>:
{
   1f93c:	b570      	push	{r4, r5, r6, lr}
   1f93e:	4606      	mov	r6, r0
   1f940:	460c      	mov	r4, r1
	struct net_if *iface = net_if_get_default();
   1f942:	f7f9 f8cb 	bl	18adc <net_if_get_default>
	if (argc < 2) {
   1f946:	2e01      	cmp	r6, #1
	struct net_if *iface = net_if_get_default();
   1f948:	4605      	mov	r5, r0
	if (argc < 2) {
   1f94a:	dd15      	ble.n	1f978 <shell_cmd_scan+0x3c>
	if (net_mgmt(NET_REQUEST_BT_SCAN, iface, argv[1], strlen(argv[1]))) {
   1f94c:	6864      	ldr	r4, [r4, #4]
   1f94e:	4620      	mov	r0, r4
   1f950:	f7e0 fed6 	bl	700 <strlen>
   1f954:	4622      	mov	r2, r4
   1f956:	4603      	mov	r3, r0
   1f958:	4629      	mov	r1, r5
   1f95a:	4809      	ldr	r0, [pc, #36]	; (1f980 <shell_cmd_scan+0x44>)
   1f95c:	f7ff fe8a 	bl	1f674 <net_mgmt_NET_REQUEST_BT_SCAN>
   1f960:	4604      	mov	r4, r0
   1f962:	b128      	cbz	r0, 1f970 <shell_cmd_scan+0x34>
		printk("Scan failed\n");
   1f964:	4807      	ldr	r0, [pc, #28]	; (1f984 <shell_cmd_scan+0x48>)
   1f966:	f7e1 ff55 	bl	1814 <printk>
	return 0;
   1f96a:	2400      	movs	r4, #0
}
   1f96c:	4620      	mov	r0, r4
   1f96e:	bd70      	pop	{r4, r5, r6, pc}
		printk("Scan in progress\n");
   1f970:	4805      	ldr	r0, [pc, #20]	; (1f988 <shell_cmd_scan+0x4c>)
   1f972:	f7e1 ff4f 	bl	1814 <printk>
   1f976:	e7f9      	b.n	1f96c <shell_cmd_scan+0x30>
		return -EINVAL;
   1f978:	f06f 0415 	mvn.w	r4, #21
   1f97c:	e7f6      	b.n	1f96c <shell_cmd_scan+0x30>
   1f97e:	bf00      	nop
   1f980:	61550003 	.word	0x61550003
   1f984:	000239cd 	.word	0x000239cd
   1f988:	000239da 	.word	0x000239da

0001f98c <shell_cmd_advertise>:

static int shell_cmd_advertise(int argc, char *argv[])
{
   1f98c:	b570      	push	{r4, r5, r6, lr}
   1f98e:	4606      	mov	r6, r0
   1f990:	460c      	mov	r4, r1
	struct net_if *iface = net_if_get_default();
   1f992:	f7f9 f8a3 	bl	18adc <net_if_get_default>

	if (argc < 2) {
   1f996:	2e01      	cmp	r6, #1
	struct net_if *iface = net_if_get_default();
   1f998:	4605      	mov	r5, r0
	if (argc < 2) {
   1f99a:	dd15      	ble.n	1f9c8 <shell_cmd_advertise+0x3c>
		return -EINVAL;
	}

	if (net_mgmt(NET_REQUEST_BT_ADVERTISE, iface, argv[1],
   1f99c:	6864      	ldr	r4, [r4, #4]
   1f99e:	4620      	mov	r0, r4
   1f9a0:	f7e0 feae 	bl	700 <strlen>
   1f9a4:	4622      	mov	r2, r4
   1f9a6:	4603      	mov	r3, r0
   1f9a8:	4629      	mov	r1, r5
   1f9aa:	4809      	ldr	r0, [pc, #36]	; (1f9d0 <shell_cmd_advertise+0x44>)
   1f9ac:	f7ff fde0 	bl	1f570 <net_mgmt_NET_REQUEST_BT_ADVERTISE>
   1f9b0:	4604      	mov	r4, r0
   1f9b2:	b128      	cbz	r0, 1f9c0 <shell_cmd_advertise+0x34>
		     strlen(argv[1]))) {
		printk("Advertise failed\n");
   1f9b4:	4807      	ldr	r0, [pc, #28]	; (1f9d4 <shell_cmd_advertise+0x48>)
   1f9b6:	f7e1 ff2d 	bl	1814 <printk>
	} else {
		printk("Advertise in progress\n");
	}

	return 0;
   1f9ba:	2400      	movs	r4, #0
}
   1f9bc:	4620      	mov	r0, r4
   1f9be:	bd70      	pop	{r4, r5, r6, pc}
		printk("Advertise in progress\n");
   1f9c0:	4805      	ldr	r0, [pc, #20]	; (1f9d8 <shell_cmd_advertise+0x4c>)
   1f9c2:	f7e1 ff27 	bl	1814 <printk>
   1f9c6:	e7f9      	b.n	1f9bc <shell_cmd_advertise+0x30>
		return -EINVAL;
   1f9c8:	f06f 0415 	mvn.w	r4, #21
   1f9cc:	e7f6      	b.n	1f9bc <shell_cmd_advertise+0x30>
   1f9ce:	bf00      	nop
   1f9d0:	61550001 	.word	0x61550001
   1f9d4:	0002392b 	.word	0x0002392b
   1f9d8:	0002393d 	.word	0x0002393d

0001f9dc <shell_cmd_connect>:
{
   1f9dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f9de:	4606      	mov	r6, r0
   1f9e0:	460c      	mov	r4, r1
	struct net_if *iface = net_if_get_default();
   1f9e2:	f7f9 f87b 	bl	18adc <net_if_get_default>
	if (argc < 3) {
   1f9e6:	2e02      	cmp	r6, #2
	struct net_if *iface = net_if_get_default();
   1f9e8:	4605      	mov	r5, r0
	if (argc < 3) {
   1f9ea:	dd73      	ble.n	1fad4 <shell_cmd_connect+0xf8>
	err = str2bt_addr_le(argv[1], argv[2], &addr);
   1f9ec:	6866      	ldr	r6, [r4, #4]
   1f9ee:	68a4      	ldr	r4, [r4, #8]
	if (strlen(str) != 17) {
   1f9f0:	4630      	mov	r0, r6
   1f9f2:	f7e0 fe85 	bl	700 <strlen>
   1f9f6:	2811      	cmp	r0, #17
   1f9f8:	d125      	bne.n	1fa46 <shell_cmd_connect+0x6a>
   1f9fa:	4630      	mov	r0, r6
   1f9fc:	f04f 0e05 	mov.w	lr, #5
   1fa00:	2601      	movs	r6, #1
		if (!(j % 3) && (*str != ':')) {
   1fa02:	f04f 0c03 	mov.w	ip, #3
	for (i = 5, j = 1; *str != '\0'; str++, j++) {
   1fa06:	7802      	ldrb	r2, [r0, #0]
   1fa08:	b9aa      	cbnz	r2, 1fa36 <shell_cmd_connect+0x5a>
	if (!strcmp(type, "public") || !strcmp(type, "(public)")) {
   1fa0a:	4935      	ldr	r1, [pc, #212]	; (1fae0 <shell_cmd_connect+0x104>)
   1fa0c:	4620      	mov	r0, r4
   1fa0e:	f7e0 fe7f 	bl	710 <strcmp>
   1fa12:	2800      	cmp	r0, #0
   1fa14:	d146      	bne.n	1faa4 <shell_cmd_connect+0xc8>
		addr->type = BT_ADDR_LE_PUBLIC;
   1fa16:	2300      	movs	r3, #0
		addr->type = BT_ADDR_LE_RANDOM;
   1fa18:	f88d 3000 	strb.w	r3, [sp]
	if (net_mgmt(NET_REQUEST_BT_CONNECT, iface, &addr, sizeof(addr))) {
   1fa1c:	466a      	mov	r2, sp
   1fa1e:	2307      	movs	r3, #7
   1fa20:	4629      	mov	r1, r5
   1fa22:	4830      	ldr	r0, [pc, #192]	; (1fae4 <shell_cmd_connect+0x108>)
   1fa24:	f7ff fdd4 	bl	1f5d0 <net_mgmt_NET_REQUEST_BT_CONNECT>
   1fa28:	4604      	mov	r4, r0
   1fa2a:	2800      	cmp	r0, #0
   1fa2c:	d04e      	beq.n	1facc <shell_cmd_connect+0xf0>
		printk("Connection failed\n");
   1fa2e:	482e      	ldr	r0, [pc, #184]	; (1fae8 <shell_cmd_connect+0x10c>)
   1fa30:	f7e1 fef0 	bl	1814 <printk>
   1fa34:	e00c      	b.n	1fa50 <shell_cmd_connect+0x74>
		if (!(j % 3) && (*str != ':')) {
   1fa36:	fb96 f3fc 	sdiv	r3, r6, ip
   1fa3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1fa3e:	429e      	cmp	r6, r3
   1fa40:	d10a      	bne.n	1fa58 <shell_cmd_connect+0x7c>
   1fa42:	2a3a      	cmp	r2, #58	; 0x3a
   1fa44:	d00a      	beq.n	1fa5c <shell_cmd_connect+0x80>
		printk("Invalid peer address (err %d)\n", err);
   1fa46:	f06f 0115 	mvn.w	r1, #21
   1fa4a:	4828      	ldr	r0, [pc, #160]	; (1faec <shell_cmd_connect+0x110>)
   1fa4c:	f7e1 fee2 	bl	1814 <printk>
	return 0;
   1fa50:	2400      	movs	r4, #0
}
   1fa52:	4620      	mov	r0, r4
   1fa54:	b003      	add	sp, #12
   1fa56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (*str == ':') {
   1fa58:	2a3a      	cmp	r2, #58	; 0x3a
   1fa5a:	d104      	bne.n	1fa66 <shell_cmd_connect+0x8a>
			i--;
   1fa5c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
	for (i = 5, j = 1; *str != '\0'; str++, j++) {
   1fa60:	3001      	adds	r0, #1
   1fa62:	3601      	adds	r6, #1
   1fa64:	e7cf      	b.n	1fa06 <shell_cmd_connect+0x2a>
		addr->a.val[i] = addr->a.val[i] << 4;
   1fa66:	ab02      	add	r3, sp, #8
   1fa68:	eb03 070e 	add.w	r7, r3, lr
   1fa6c:	f817 2c07 	ldrb.w	r2, [r7, #-7]
   1fa70:	0112      	lsls	r2, r2, #4
   1fa72:	b2d2      	uxtb	r2, r2
   1fa74:	f807 2c07 	strb.w	r2, [r7, #-7]
   1fa78:	7803      	ldrb	r3, [r0, #0]
	if (*c >= '0' && *c <= '9') {
   1fa7a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1fa7e:	b2c9      	uxtb	r1, r1
   1fa80:	2909      	cmp	r1, #9
   1fa82:	d92a      	bls.n	1fada <shell_cmd_connect+0xfe>
	} else if (*c >= 'a' && *c <= 'f') {
   1fa84:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   1fa88:	2905      	cmp	r1, #5
   1fa8a:	d805      	bhi.n	1fa98 <shell_cmd_connect+0xbc>
		*x = *c - 'a' + 10;
   1fa8c:	3b57      	subs	r3, #87	; 0x57
		*x = *c - 'A' + 10;
   1fa8e:	b2db      	uxtb	r3, r3
		addr->a.val[i] |= tmp;
   1fa90:	4313      	orrs	r3, r2
   1fa92:	f807 3c07 	strb.w	r3, [r7, #-7]
   1fa96:	e7e3      	b.n	1fa60 <shell_cmd_connect+0x84>
	} else if (*c >= 'A' && *c <= 'F') {
   1fa98:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
   1fa9c:	2905      	cmp	r1, #5
   1fa9e:	d8d2      	bhi.n	1fa46 <shell_cmd_connect+0x6a>
		*x = *c - 'A' + 10;
   1faa0:	3b37      	subs	r3, #55	; 0x37
   1faa2:	e7f4      	b.n	1fa8e <shell_cmd_connect+0xb2>
	if (!strcmp(type, "public") || !strcmp(type, "(public)")) {
   1faa4:	4912      	ldr	r1, [pc, #72]	; (1faf0 <shell_cmd_connect+0x114>)
   1faa6:	4620      	mov	r0, r4
   1faa8:	f7e0 fe32 	bl	710 <strcmp>
   1faac:	2800      	cmp	r0, #0
   1faae:	d0b2      	beq.n	1fa16 <shell_cmd_connect+0x3a>
	} else if (!strcmp(type, "random") || !strcmp(type, "(random)")) {
   1fab0:	4910      	ldr	r1, [pc, #64]	; (1faf4 <shell_cmd_connect+0x118>)
   1fab2:	4620      	mov	r0, r4
   1fab4:	f7e0 fe2c 	bl	710 <strcmp>
   1fab8:	b908      	cbnz	r0, 1fabe <shell_cmd_connect+0xe2>
		addr->type = BT_ADDR_LE_RANDOM;
   1faba:	2301      	movs	r3, #1
   1fabc:	e7ac      	b.n	1fa18 <shell_cmd_connect+0x3c>
	} else if (!strcmp(type, "random") || !strcmp(type, "(random)")) {
   1fabe:	490e      	ldr	r1, [pc, #56]	; (1faf8 <shell_cmd_connect+0x11c>)
   1fac0:	4620      	mov	r0, r4
   1fac2:	f7e0 fe25 	bl	710 <strcmp>
   1fac6:	2800      	cmp	r0, #0
   1fac8:	d0f7      	beq.n	1faba <shell_cmd_connect+0xde>
   1faca:	e7bc      	b.n	1fa46 <shell_cmd_connect+0x6a>
		printk("Connection pending\n");
   1facc:	480b      	ldr	r0, [pc, #44]	; (1fafc <shell_cmd_connect+0x120>)
   1face:	f7e1 fea1 	bl	1814 <printk>
   1fad2:	e7be      	b.n	1fa52 <shell_cmd_connect+0x76>
		return -EINVAL;
   1fad4:	f06f 0415 	mvn.w	r4, #21
   1fad8:	e7bb      	b.n	1fa52 <shell_cmd_connect+0x76>
	if (*c >= '0' && *c <= '9') {
   1fada:	460b      	mov	r3, r1
   1fadc:	e7d8      	b.n	1fa90 <shell_cmd_connect+0xb4>
   1fade:	bf00      	nop
   1fae0:	00022821 	.word	0x00022821
   1fae4:	61550002 	.word	0x61550002
   1fae8:	00023985 	.word	0x00023985
   1faec:	00023966 	.word	0x00023966
   1faf0:	00023954 	.word	0x00023954
   1faf4:	00022828 	.word	0x00022828
   1faf8:	0002395d 	.word	0x0002395d
   1fafc:	00023998 	.word	0x00023998

0001fb00 <ipv6_event_handler>:
static struct net_mgmt_event_callback mgmt6_cb;
static struct in6_addr laddr;

static void ipv6_event_handler(struct net_mgmt_event_callback *cb,
			       u32_t mgmt_event, struct net_if *iface)
{
   1fb00:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int i;

	if (mgmt_event == NET_EVENT_IPV6_ADDR_ADD) {
   1fb02:	4b1c      	ldr	r3, [pc, #112]	; (1fb74 <ipv6_event_handler+0x74>)
{
   1fb04:	9201      	str	r2, [sp, #4]
	if (mgmt_event == NET_EVENT_IPV6_ADDR_ADD) {
   1fb06:	4299      	cmp	r1, r3
   1fb08:	d114      	bne.n	1fb34 <ipv6_event_handler+0x34>
		/* save the last added IP address for this interface */
		for (i = NET_IF_MAX_IPV6_ADDR - 1; i >= 0; i--) {
			if (iface->ipv6.unicast[i].is_used) {
				memcpy(&laddr,
   1fb0a:	4e1b      	ldr	r6, [pc, #108]	; (1fb78 <ipv6_event_handler+0x78>)
   1fb0c:	2402      	movs	r4, #2
			if (iface->ipv6.unicast[i].is_used) {
   1fb0e:	256c      	movs	r5, #108	; 0x6c
   1fb10:	9901      	ldr	r1, [sp, #4]
   1fb12:	fb05 f304 	mul.w	r3, r5, r4
   1fb16:	18ca      	adds	r2, r1, r3
   1fb18:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   1fb1c:	b12a      	cbz	r2, 1fb2a <ipv6_event_handler+0x2a>
				       &iface->ipv6.unicast[i].address.in6_addr,
   1fb1e:	3330      	adds	r3, #48	; 0x30
				memcpy(&laddr,
   1fb20:	2210      	movs	r2, #16
   1fb22:	4419      	add	r1, r3
   1fb24:	4630      	mov	r0, r6
   1fb26:	f7e0 fe49 	bl	7bc <memcpy>
		for (i = NET_IF_MAX_IPV6_ADDR - 1; i >= 0; i--) {
   1fb2a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   1fb2e:	d2ef      	bcs.n	1fb10 <ipv6_event_handler+0x10>

	if (mgmt_event == NET_EVENT_IPV6_ROUTER_ADD) {
		k_sem_take(&counter, K_NO_WAIT);
		k_sem_give(&waiter);
	}
}
   1fb30:	b002      	add	sp, #8
   1fb32:	bd70      	pop	{r4, r5, r6, pc}
	if (mgmt_event == NET_EVENT_IPV6_DAD_SUCCEED) {
   1fb34:	4b11      	ldr	r3, [pc, #68]	; (1fb7c <ipv6_event_handler+0x7c>)
   1fb36:	4299      	cmp	r1, r3
   1fb38:	d119      	bne.n	1fb6e <ipv6_event_handler+0x6e>
		ifaddr = net_if_ipv6_addr_lookup(&laddr, &iface);
   1fb3a:	a901      	add	r1, sp, #4
   1fb3c:	480e      	ldr	r0, [pc, #56]	; (1fb78 <ipv6_event_handler+0x78>)
   1fb3e:	f7f8 fff3 	bl	18b28 <net_if_ipv6_addr_lookup>
		if (!ifaddr ||
   1fb42:	4604      	mov	r4, r0
   1fb44:	2800      	cmp	r0, #0
   1fb46:	d0f3      	beq.n	1fb30 <ipv6_event_handler+0x30>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1fb48:	2210      	movs	r2, #16
   1fb4a:	490b      	ldr	r1, [pc, #44]	; (1fb78 <ipv6_event_handler+0x78>)
   1fb4c:	3004      	adds	r0, #4
   1fb4e:	f7e0 fe08 	bl	762 <memcmp>
   1fb52:	2800      	cmp	r0, #0
   1fb54:	d1ec      	bne.n	1fb30 <ipv6_event_handler+0x30>
		    !(net_ipv6_addr_cmp(&ifaddr->address.in6_addr, &laddr) &&
   1fb56:	f994 3065 	ldrsb.w	r3, [r4, #101]	; 0x65
   1fb5a:	2b01      	cmp	r3, #1
   1fb5c:	d1e8      	bne.n	1fb30 <ipv6_event_handler+0x30>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1fb5e:	2100      	movs	r1, #0
   1fb60:	4807      	ldr	r0, [pc, #28]	; (1fb80 <ipv6_event_handler+0x80>)
   1fb62:	f001 f817 	bl	20b94 <_impl_k_sem_take>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1fb66:	4807      	ldr	r0, [pc, #28]	; (1fb84 <ipv6_event_handler+0x84>)
   1fb68:	f000 ffb4 	bl	20ad4 <_impl_k_sem_give>
   1fb6c:	e7e0      	b.n	1fb30 <ipv6_event_handler+0x30>
	if (mgmt_event == NET_EVENT_IPV6_ROUTER_ADD) {
   1fb6e:	4b06      	ldr	r3, [pc, #24]	; (1fb88 <ipv6_event_handler+0x88>)
   1fb70:	4299      	cmp	r1, r3
   1fb72:	e7f3      	b.n	1fb5c <ipv6_event_handler+0x5c>
   1fb74:	f0600001 	.word	0xf0600001
   1fb78:	2000338c 	.word	0x2000338c
   1fb7c:	f060000d 	.word	0xf060000d
   1fb80:	20003374 	.word	0x20003374
   1fb84:	2000ed04 	.word	0x2000ed04
   1fb88:	f0600009 	.word	0xf0600009

0001fb8c <net_app_init>:
#else
#define setup_ipv6(...)
#endif /* CONFIG_NET_IPV6 */

int net_app_init(const char *app_info, u32_t flags, s32_t timeout)
{
   1fb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fb90:	460e      	mov	r6, r1
   1fb92:	4615      	mov	r5, r2
#define LOOP_DIVIDER 10
	struct net_if *iface = net_if_get_default();
   1fb94:	f7f8 ffa2 	bl	18adc <net_if_get_default>

	if (app_info) {
		NET_INFO("%s", app_info);
	}

	if (!iface) {
   1fb98:	4604      	mov	r4, r0
   1fb9a:	2800      	cmp	r0, #0
   1fb9c:	d044      	beq.n	1fc28 <net_app_init+0x9c>

	if (flags & NET_APP_NEED_IPV6) {
		count++;
	}

	if (flags & NET_APP_NEED_IPV4) {
   1fb9e:	0772      	lsls	r2, r6, #29
	if (flags & NET_APP_NEED_IPV6) {
   1fba0:	f3c6 0140 	ubfx	r1, r6, #1, #1
		count++;
   1fba4:	bf48      	it	mi
   1fba6:	3101      	addmi	r1, #1
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1fba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1fbac:	4820      	ldr	r0, [pc, #128]	; (1fc30 <net_app_init+0xa4>)
   1fbae:	f000 ff87 	bl	20ac0 <_impl_k_sem_init>
	if (net_addr_pton(AF_INET6, CONFIG_NET_APP_MY_IPV6_ADDR, &laddr)) {
   1fbb2:	4a20      	ldr	r2, [pc, #128]	; (1fc34 <net_app_init+0xa8>)
   1fbb4:	4920      	ldr	r1, [pc, #128]	; (1fc38 <net_app_init+0xac>)
   1fbb6:	200a      	movs	r0, #10
   1fbb8:	f7fa fb58 	bl	1a26c <net_addr_pton>
	cb->handler = handler;
   1fbbc:	481f      	ldr	r0, [pc, #124]	; (1fc3c <net_app_init+0xb0>)
   1fbbe:	4b20      	ldr	r3, [pc, #128]	; (1fc40 <net_app_init+0xb4>)
   1fbc0:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
   1fbc2:	4b20      	ldr	r3, [pc, #128]	; (1fc44 <net_app_init+0xb8>)
   1fbc4:	6083      	str	r3, [r0, #8]
	net_mgmt_add_event_callback(&mgmt6_cb);
   1fbc6:	f7fd ffbb 	bl	1db40 <net_mgmt_add_event_callback>
		ifaddr = net_if_ipv6_addr_add(iface, &laddr,
   1fbca:	2300      	movs	r3, #0
   1fbcc:	2203      	movs	r2, #3
   1fbce:	4919      	ldr	r1, [pc, #100]	; (1fc34 <net_app_init+0xa8>)
   1fbd0:	4620      	mov	r0, r4
   1fbd2:	f7f8 fffd 	bl	18bd0 <net_if_ipv6_addr_add>

	setup_dhcpv4(iface);

	setup_ipv6(iface, flags);

	if (timeout < 0) {
   1fbd6:	2d00      	cmp	r5, #0
   1fbd8:	db11      	blt.n	1fbfe <net_app_init+0x72>
		count = -1;
	} else if (timeout == 0) {
   1fbda:	d00d      	beq.n	1fbf8 <net_app_init+0x6c>
		count = 0;
	} else {
		count = timeout / 1000 + 1;
   1fbdc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1fbe0:	fb95 f4f4 	sdiv	r4, r5, r4
   1fbe4:	3401      	adds	r4, #1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1fbe6:	4f18      	ldr	r7, [pc, #96]	; (1fc48 <net_app_init+0xbc>)
	/* Loop here until we are ready to continue. As we might need
	 * to wait multiple events, sleep smaller amounts of data.
	 */
	while (count--) {
		if (k_sem_take(&waiter, loop)) {
			if (!k_sem_count_get(&counter)) {
   1fbe8:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1fc30 <net_app_init+0xa4>
   1fbec:	3c01      	subs	r4, #1
	int loop = timeout / LOOP_DIVIDER;
   1fbee:	260a      	movs	r6, #10
   1fbf0:	fb95 f6f6 	sdiv	r6, r5, r6
	while (count--) {
   1fbf4:	1c63      	adds	r3, r4, #1
   1fbf6:	d105      	bne.n	1fc04 <net_app_init+0x78>
	if (!count && timeout) {
		NET_ERR("Timeout while waiting setup");
		return -ETIMEDOUT;
	}

	return 0;
   1fbf8:	2000      	movs	r0, #0
   1fbfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		count = -1;
   1fbfe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1fc02:	e7f0      	b.n	1fbe6 <net_app_init+0x5a>
   1fc04:	4631      	mov	r1, r6
   1fc06:	4638      	mov	r0, r7
   1fc08:	f000 ffc4 	bl	20b94 <_impl_k_sem_take>
		if (k_sem_take(&waiter, loop)) {
   1fc0c:	b110      	cbz	r0, 1fc14 <net_app_init+0x88>
			if (!k_sem_count_get(&counter)) {
   1fc0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1fc12:	b10b      	cbz	r3, 1fc18 <net_app_init+0x8c>
   1fc14:	3c01      	subs	r4, #1
   1fc16:	e7ed      	b.n	1fbf4 <net_app_init+0x68>
	if (!count && timeout) {
   1fc18:	2c00      	cmp	r4, #0
   1fc1a:	d1ed      	bne.n	1fbf8 <net_app_init+0x6c>
   1fc1c:	2d00      	cmp	r5, #0
   1fc1e:	d0eb      	beq.n	1fbf8 <net_app_init+0x6c>
		return -ETIMEDOUT;
   1fc20:	f06f 003b 	mvn.w	r0, #59	; 0x3b
}
   1fc24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENODEV;
   1fc28:	f06f 0012 	mvn.w	r0, #18
   1fc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fc30:	20003374 	.word	0x20003374
   1fc34:	2000338c 	.word	0x2000338c
   1fc38:	00023a9d 	.word	0x00023a9d
   1fc3c:	2000339c 	.word	0x2000339c
   1fc40:	0001fb01 	.word	0x0001fb01
   1fc44:	f060000d 	.word	0xf060000d
   1fc48:	2000ed04 	.word	0x2000ed04

0001fc4c <init_net_app>:

#if defined(CONFIG_NET_APP_AUTO_INIT)
static int init_net_app(struct device *device)
{
   1fc4c:	b508      	push	{r3, lr}
	ret = _net_app_ieee802154_setup();
	if (ret < 0) {
		NET_ERR("Cannot setup IEEE 802.15.4 interface (%d)", ret);
	}

	ret = _net_app_bt_setup();
   1fc4e:	f000 f9f3 	bl	20038 <_net_app_bt_setup>
	if (IS_ENABLED(CONFIG_NET_APP_NEED_IPV4)) {
		flags |= NET_APP_NEED_IPV4;
	}

	/* Initialize the application automatically if needed */
	ret = net_app_init("Initializing network", flags,
   1fc52:	f247 5230 	movw	r2, #30000	; 0x7530
   1fc56:	2102      	movs	r1, #2
   1fc58:	4802      	ldr	r0, [pc, #8]	; (1fc64 <init_net_app+0x18>)
	if (ret < 0) {
		NET_ERR("Network initialization failed (%d)", ret);
	}

	return ret;
}
   1fc5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ret = net_app_init("Initializing network", flags,
   1fc5e:	f7ff bf95 	b.w	1fb8c <net_app_init>
   1fc62:	bf00      	nop
   1fc64:	00023a88 	.word	0x00023a88

0001fc68 <_net_app_received>:
#if defined(CONFIG_NET_APP_SERVER) || defined(CONFIG_NET_APP_CLIENT)
void _net_app_received(struct net_context *net_ctx,
		       struct net_pkt *pkt,
		       int status,
		       void *user_data)
{
   1fc68:	4618      	mov	r0, r3
		}
	}
#endif

#if defined(CONFIG_NET_APP_SERVER)
	if (ctx->app_type == NET_APP_SERVER) {
   1fc6a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
   1fc6e:	2b01      	cmp	r3, #1
{
   1fc70:	b430      	push	{r4, r5}
   1fc72:	4614      	mov	r4, r2
	if (ctx->app_type == NET_APP_SERVER) {
   1fc74:	d10c      	bne.n	1fc90 <_net_app_received+0x28>
		bool close = true;

		if (pkt) {
   1fc76:	b129      	cbz	r1, 1fc84 <_net_app_received+0x1c>
			if (ctx->cb.recv) {
   1fc78:	6c04      	ldr	r4, [r0, #64]	; 0x40
   1fc7a:	b14c      	cbz	r4, 1fc90 <_net_app_received+0x28>
				ctx->cb.recv(ctx, pkt, status, ctx->user_data);
   1fc7c:	46a4      	mov	ip, r4
   1fc7e:	6d03      	ldr	r3, [r0, #80]	; 0x50
		if (close && ctx->cb.close) {
			ctx->cb.close(ctx, status, ctx->user_data);
		}
	}
#endif
}
   1fc80:	bc30      	pop	{r4, r5}
				ctx->cb.recv(ctx, pkt, status, ctx->user_data);
   1fc82:	4760      	bx	ip
		if (close && ctx->cb.close) {
   1fc84:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1fc86:	b11b      	cbz	r3, 1fc90 <_net_app_received+0x28>
			ctx->cb.close(ctx, status, ctx->user_data);
   1fc88:	4621      	mov	r1, r4
   1fc8a:	6d02      	ldr	r2, [r0, #80]	; 0x50
}
   1fc8c:	bc30      	pop	{r4, r5}
			ctx->cb.close(ctx, status, ctx->user_data);
   1fc8e:	4718      	bx	r3
}
   1fc90:	bc30      	pop	{r4, r5}
   1fc92:	4770      	bx	lr

0001fc94 <_net_app_set_net_ctx>:
int _net_app_set_net_ctx(struct net_app_ctx *ctx,
			 struct net_context *net_ctx,
			 struct sockaddr *addr,
			 socklen_t socklen,
			 enum net_ip_protocol proto)
{
   1fc94:	b570      	push	{r4, r5, r6, lr}
   1fc96:	4606      	mov	r6, r0
	int ret;

	if (!net_ctx || !net_context_is_used(net_ctx)) {
   1fc98:	460c      	mov	r4, r1
{
   1fc9a:	4610      	mov	r0, r2
	if (!net_ctx || !net_context_is_used(net_ctx)) {
   1fc9c:	b1d1      	cbz	r1, 1fcd4 <_net_app_set_net_ctx+0x40>
   1fc9e:	f891 2055 	ldrb.w	r2, [r1, #85]	; 0x55
   1fca2:	07d2      	lsls	r2, r2, #31
   1fca4:	d516      	bpl.n	1fcd4 <_net_app_set_net_ctx+0x40>
		return -ENOENT;
	}

	ret = net_context_bind(net_ctx, addr, socklen);
   1fca6:	4601      	mov	r1, r0
   1fca8:	461a      	mov	r2, r3
   1fcaa:	4620      	mov	r0, r4
   1fcac:	f7f8 fb54 	bl	18358 <net_context_bind>
	if (ret < 0) {
   1fcb0:	1e05      	subs	r5, r0, #0
   1fcb2:	db0d      	blt.n	1fcd0 <_net_app_set_net_ctx+0x3c>
		 */
	}
#endif /* CONFIG_NET_APP_SERVER && CONFIG_NET_TCP */

#if defined(CONFIG_NET_APP_SERVER) && defined(CONFIG_NET_UDP)
	if (ctx->app_type == NET_APP_SERVER && proto == IPPROTO_UDP) {
   1fcb4:	f896 3056 	ldrb.w	r3, [r6, #86]	; 0x56
   1fcb8:	2b01      	cmp	r3, #1
   1fcba:	d109      	bne.n	1fcd0 <_net_app_set_net_ctx+0x3c>
   1fcbc:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1fcc0:	2b11      	cmp	r3, #17
   1fcc2:	d105      	bne.n	1fcd0 <_net_app_set_net_ctx+0x3c>
		net_context_recv(net_ctx, _net_app_received, K_NO_WAIT, ctx);
   1fcc4:	4633      	mov	r3, r6
   1fcc6:	2200      	movs	r2, #0
   1fcc8:	4904      	ldr	r1, [pc, #16]	; (1fcdc <_net_app_set_net_ctx+0x48>)
   1fcca:	4620      	mov	r0, r4
   1fccc:	f7f8 fc28 	bl	18520 <net_context_recv>
	}
#endif /* CONFIG_NET_APP_SERVER && CONFIG_NET_UDP */

out:
	return ret;
}
   1fcd0:	4628      	mov	r0, r5
   1fcd2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOENT;
   1fcd4:	f06f 0501 	mvn.w	r5, #1
   1fcd8:	e7fa      	b.n	1fcd0 <_net_app_set_net_ctx+0x3c>
   1fcda:	bf00      	nop
   1fcdc:	0001fc69 	.word	0x0001fc69

0001fce0 <_net_app_set_local_addr>:

int _net_app_set_local_addr(struct sockaddr *addr, const char *myaddr,
			    u16_t port)
{
   1fce0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fce2:	4604      	mov	r4, r0
   1fce4:	b085      	sub	sp, #20
	if (myaddr) {
   1fce6:	460d      	mov	r5, r1
   1fce8:	8800      	ldrh	r0, [r0, #0]
   1fcea:	b159      	cbz	r1, 1fd04 <_net_app_set_local_addr+0x24>
		void *inaddr;

		if (addr->sa_family == AF_INET) {
   1fcec:	2802      	cmp	r0, #2
   1fcee:	d032      	beq.n	1fd56 <_net_app_set_local_addr+0x76>
			inaddr = &net_sin(addr)->sin_addr;
			net_sin(addr)->sin_port = htons(port);
#else
			return -EPFNOSUPPORT;
#endif
		} else if (addr->sa_family == AF_INET6) {
   1fcf0:	280a      	cmp	r0, #10
   1fcf2:	d133      	bne.n	1fd5c <_net_app_set_local_addr+0x7c>
#if defined(CONFIG_NET_IPV6)
			inaddr = &net_sin6(addr)->sin6_addr;
			net_sin6(addr)->sin6_port = htons(port);
   1fcf4:	ba52      	rev16	r2, r2
   1fcf6:	8062      	strh	r2, [r4, #2]
#endif
		} else {
			return -EAFNOSUPPORT;
		}

		return net_addr_pton(addr->sa_family, myaddr, inaddr);
   1fcf8:	1d22      	adds	r2, r4, #4
		return -EPFNOSUPPORT;
#endif
	}

	return 0;
}
   1fcfa:	b005      	add	sp, #20
   1fcfc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return net_addr_pton(addr->sa_family, myaddr, inaddr);
   1fd00:	f7fa bab4 	b.w	1a26c <net_addr_pton>
	if (addr->sa_family == AF_INET6) {
   1fd04:	280a      	cmp	r0, #10
   1fd06:	d120      	bne.n	1fd4a <_net_app_set_local_addr+0x6a>
		net_ipaddr_copy(&net_sin6(addr)->sin6_addr,
   1fd08:	f7fc f8c2 	bl	1be90 <net_ipv6_unspecified_address>
   1fd0c:	4601      	mov	r1, r0
   1fd0e:	4628      	mov	r0, r5
   1fd10:	f7f9 fb6e 	bl	193f0 <net_if_ipv6_select_src_addr>
   1fd14:	466d      	mov	r5, sp
   1fd16:	4603      	mov	r3, r0
   1fd18:	f100 0710 	add.w	r7, r0, #16
   1fd1c:	466a      	mov	r2, sp
   1fd1e:	6818      	ldr	r0, [r3, #0]
   1fd20:	6859      	ldr	r1, [r3, #4]
   1fd22:	462e      	mov	r6, r5
   1fd24:	c603      	stmia	r6!, {r0, r1}
   1fd26:	3308      	adds	r3, #8
   1fd28:	42bb      	cmp	r3, r7
   1fd2a:	4635      	mov	r5, r6
   1fd2c:	d1f7      	bne.n	1fd1e <_net_app_set_local_addr+0x3e>
   1fd2e:	3404      	adds	r4, #4
   1fd30:	ad04      	add	r5, sp, #16
   1fd32:	4613      	mov	r3, r2
   1fd34:	cb03      	ldmia	r3!, {r0, r1}
   1fd36:	42ab      	cmp	r3, r5
   1fd38:	6020      	str	r0, [r4, #0]
   1fd3a:	6061      	str	r1, [r4, #4]
   1fd3c:	461a      	mov	r2, r3
   1fd3e:	f104 0408 	add.w	r4, r4, #8
   1fd42:	d1f6      	bne.n	1fd32 <_net_app_set_local_addr+0x52>
	return 0;
   1fd44:	2000      	movs	r0, #0
}
   1fd46:	b005      	add	sp, #20
   1fd48:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EPFNOSUPPORT;
   1fd4a:	2802      	cmp	r0, #2
   1fd4c:	bf14      	ite	ne
   1fd4e:	2000      	movne	r0, #0
   1fd50:	f06f 002d 	mvneq.w	r0, #45	; 0x2d
   1fd54:	e7f7      	b.n	1fd46 <_net_app_set_local_addr+0x66>
   1fd56:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   1fd5a:	e7f4      	b.n	1fd46 <_net_app_set_local_addr+0x66>
			return -EAFNOSUPPORT;
   1fd5c:	f06f 002e 	mvn.w	r0, #46	; 0x2e
   1fd60:	e7f1      	b.n	1fd46 <_net_app_set_local_addr+0x66>

0001fd62 <_net_app_config_local_ctx>:

int _net_app_config_local_ctx(struct net_app_ctx *ctx,
			      enum net_sock_type sock_type,
			      enum net_ip_protocol proto,
			      struct sockaddr *addr)
{
   1fd62:	b538      	push	{r3, r4, r5, lr}
   1fd64:	4604      	mov	r4, r0
   1fd66:	4615      	mov	r5, r2
   1fd68:	4608      	mov	r0, r1
	int ret;

	if (!addr) {
   1fd6a:	b98b      	cbnz	r3, 1fd90 <_net_app_config_local_ctx+0x2e>
#if defined(CONFIG_NET_IPV6)
		if (ctx->ipv6.local.sa_family == AF_INET6 ||
   1fd6c:	88a3      	ldrh	r3, [r4, #4]
   1fd6e:	2b0a      	cmp	r3, #10
   1fd70:	d000      	beq.n	1fd74 <_net_app_config_local_ctx+0x12>
   1fd72:	bb23      	cbnz	r3, 1fdbe <_net_app_config_local_ctx+0x5c>
	ret = net_context_get(AF_INET6, sock_type, proto, &ctx->ipv6.ctx);
   1fd74:	4601      	mov	r1, r0
   1fd76:	4623      	mov	r3, r4
   1fd78:	462a      	mov	r2, r5
   1fd7a:	200a      	movs	r0, #10
   1fd7c:	f7f8 fa26 	bl	181cc <net_context_get>
	if (ret < 0) {
   1fd80:	2800      	cmp	r0, #0
   1fd82:	da02      	bge.n	1fd8a <_net_app_config_local_ctx+0x28>
		ctx->ipv6.ctx = NULL;
   1fd84:	2300      	movs	r3, #0
   1fd86:	6023      	str	r3, [r4, #0]
   1fd88:	bd38      	pop	{r3, r4, r5, pc}
		} else {
			ret = -EPFNOSUPPORT;
			goto fail;
		}

		if (!ret) {
   1fd8a:	d11d      	bne.n	1fdc8 <_net_app_config_local_ctx+0x66>
			ctx->default_ctx = &ctx->ipv4;
#endif
			/* We ignore the IPv4 error if IPv6 is enabled */
#if defined(CONFIG_NET_IPV6)
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
			ctx->default_ctx = &ctx->ipv6;
   1fd8c:	6364      	str	r4, [r4, #52]	; 0x34
   1fd8e:	bd38      	pop	{r3, r4, r5, pc}
		if (addr->sa_family == AF_INET6) {
   1fd90:	881d      	ldrh	r5, [r3, #0]
   1fd92:	2d0a      	cmp	r5, #10
   1fd94:	d108      	bne.n	1fda8 <_net_app_config_local_ctx+0x46>
	ret = net_context_get(AF_INET6, sock_type, proto, &ctx->ipv6.ctx);
   1fd96:	4623      	mov	r3, r4
   1fd98:	4628      	mov	r0, r5
   1fd9a:	f7f8 fa17 	bl	181cc <net_context_get>
	if (ret < 0) {
   1fd9e:	2800      	cmp	r0, #0
   1fda0:	daf4      	bge.n	1fd8c <_net_app_config_local_ctx+0x2a>
		ctx->ipv6.ctx = NULL;
   1fda2:	2300      	movs	r3, #0
   1fda4:	6023      	str	r3, [r4, #0]
   1fda6:	e7f1      	b.n	1fd8c <_net_app_config_local_ctx+0x2a>
		} else if (addr->sa_family == AF_INET) {
   1fda8:	2d02      	cmp	r5, #2
   1fdaa:	d008      	beq.n	1fdbe <_net_app_config_local_ctx+0x5c>
		} else if (addr->sa_family == AF_UNSPEC) {
   1fdac:	b955      	cbnz	r5, 1fdc4 <_net_app_config_local_ctx+0x62>
	ret = net_context_get(AF_INET6, sock_type, proto, &ctx->ipv6.ctx);
   1fdae:	4623      	mov	r3, r4
   1fdb0:	200a      	movs	r0, #10
   1fdb2:	f7f8 fa0b 	bl	181cc <net_context_get>
	if (ret < 0) {
   1fdb6:	2800      	cmp	r0, #0
		ctx->ipv6.ctx = NULL;
   1fdb8:	bfb8      	it	lt
   1fdba:	6025      	strlt	r5, [r4, #0]
   1fdbc:	e7e6      	b.n	1fd8c <_net_app_config_local_ctx+0x2a>
			ret = -EPFNOSUPPORT;
   1fdbe:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   1fdc2:	bd38      	pop	{r3, r4, r5, pc}
#endif
		} else {
			ret = -EINVAL;
   1fdc4:	f06f 0015 	mvn.w	r0, #21
		}
	}

fail:
	return ret;
}
   1fdc8:	bd38      	pop	{r3, r4, r5, pc}

0001fdca <net_app_release>:
#endif /* CONFIG_NET_APP_SERVER || CONFIG_NET_APP_CLIENT */

int net_app_release(struct net_app_ctx *ctx)
{
   1fdca:	b510      	push	{r4, lr}
	if (!ctx) {
   1fdcc:	4604      	mov	r4, r0
   1fdce:	b188      	cbz	r0, 1fdf4 <net_app_release+0x2a>
		return -EINVAL;
	}

	if (!ctx->is_init) {
   1fdd0:	f890 3057 	ldrb.w	r3, [r0, #87]	; 0x57
   1fdd4:	07db      	lsls	r3, r3, #31
   1fdd6:	d510      	bpl.n	1fdfa <net_app_release+0x30>
		return -ENOENT;
	}

#if defined(CONFIG_NET_IPV6)
	if (ctx->ipv6.ctx) {
   1fdd8:	6800      	ldr	r0, [r0, #0]
   1fdda:	b118      	cbz	r0, 1fde4 <net_app_release+0x1a>
		net_context_put(ctx->ipv6.ctx);
   1fddc:	f7f8 faa6 	bl	1832c <net_context_put>
		ctx->ipv6.ctx = NULL;
   1fde0:	2300      	movs	r3, #0
   1fde2:	6023      	str	r3, [r4, #0]
		net_context_put(ctx->ipv4.ctx);
		ctx->ipv4.ctx = NULL;
	}
#endif /* CONFIG_NET_IPV4 */

	ctx->is_init = false;
   1fde4:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
   1fde8:	f36f 0300 	bfc	r3, #0, #1
   1fdec:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57

	_net_app_unregister(ctx);

	return 0;
   1fdf0:	2000      	movs	r0, #0
   1fdf2:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1fdf4:	f06f 0015 	mvn.w	r0, #21
   1fdf8:	bd10      	pop	{r4, pc}
		return -ENOENT;
   1fdfa:	f06f 0001 	mvn.w	r0, #1
}
   1fdfe:	bd10      	pop	{r4, pc}

0001fe00 <_net_app_select_net_ctx>:
{
	struct net_context *net_ctx = NULL;

	if (ctx->app_type == NET_APP_CLIENT) {
		net_ctx = select_client_ctx(ctx, dst);
	} else if (ctx->app_type == NET_APP_SERVER) {
   1fe00:	f890 3056 	ldrb.w	r3, [r0, #86]	; 0x56
   1fe04:	2b01      	cmp	r3, #1
{
   1fe06:	4602      	mov	r2, r0
	} else if (ctx->app_type == NET_APP_SERVER) {
   1fe08:	d118      	bne.n	1fe3c <_net_app_select_net_ctx+0x3c>
	} else if (ctx->proto == IPPROTO_UDP) {
   1fe0a:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
   1fe0e:	2b11      	cmp	r3, #17
   1fe10:	d114      	bne.n	1fe3c <_net_app_select_net_ctx+0x3c>
   1fe12:	f890 3057 	ldrb.w	r3, [r0, #87]	; 0x57
		if (!dst) {
   1fe16:	b921      	cbnz	r1, 1fe22 <_net_app_select_net_ctx+0x22>
			if (ctx->is_tls) {
   1fe18:	079b      	lsls	r3, r3, #30
   1fe1a:	d40f      	bmi.n	1fe3c <_net_app_select_net_ctx+0x3c>
				return ctx->default_ctx->ctx;
   1fe1c:	6b53      	ldr	r3, [r2, #52]	; 0x34
   1fe1e:	6818      	ldr	r0, [r3, #0]
   1fe20:	4770      	bx	lr
			if (ctx->is_tls) {
   1fe22:	f013 0002 	ands.w	r0, r3, #2
   1fe26:	d109      	bne.n	1fe3c <_net_app_select_net_ctx+0x3c>
			if (dst->sa_family == AF_INET) {
   1fe28:	880b      	ldrh	r3, [r1, #0]
   1fe2a:	2b02      	cmp	r3, #2
   1fe2c:	d005      	beq.n	1fe3a <_net_app_select_net_ctx+0x3a>
			if (dst->sa_family == AF_INET6) {
   1fe2e:	2b0a      	cmp	r3, #10
   1fe30:	d101      	bne.n	1fe36 <_net_app_select_net_ctx+0x36>
				return ctx->ipv6.ctx;
   1fe32:	6810      	ldr	r0, [r2, #0]
   1fe34:	4770      	bx	lr
			if (dst->sa_family == AF_UNSPEC) {
   1fe36:	2b00      	cmp	r3, #0
   1fe38:	d0f0      	beq.n	1fe1c <_net_app_select_net_ctx+0x1c>
	}

	NET_DBG("Selecting %p net_ctx (%s():%d)", net_ctx, caller, line);

	return net_ctx;
}
   1fe3a:	4770      	bx	lr
	struct net_context *net_ctx = NULL;
   1fe3c:	2000      	movs	r0, #0
   1fe3e:	e7fc      	b.n	1fe3a <_net_app_select_net_ctx+0x3a>

0001fe40 <net_app_set_cb>:
int net_app_set_cb(struct net_app_ctx *ctx,
		   net_app_connect_cb_t connect_cb,
		   net_app_recv_cb_t recv_cb,
		   net_app_send_cb_t send_cb,
		   net_app_close_cb_t close_cb)
{
   1fe40:	b510      	push	{r4, lr}
	if (!ctx) {
   1fe42:	b150      	cbz	r0, 1fe5a <net_app_set_cb+0x1a>
		return -EINVAL;
	}

	if (!ctx->is_init) {
   1fe44:	f890 4057 	ldrb.w	r4, [r0, #87]	; 0x57
   1fe48:	07e4      	lsls	r4, r4, #31
   1fe4a:	d509      	bpl.n	1fe60 <net_app_set_cb+0x20>
		return -ENOENT;
	}

	ctx->cb.connect = connect_cb;
	ctx->cb.recv = recv_cb;
	ctx->cb.send = send_cb;
   1fe4c:	6443      	str	r3, [r0, #68]	; 0x44
	ctx->cb.close = close_cb;
   1fe4e:	9b02      	ldr	r3, [sp, #8]
	ctx->cb.connect = connect_cb;
   1fe50:	63c1      	str	r1, [r0, #60]	; 0x3c
	ctx->cb.recv = recv_cb;
   1fe52:	6402      	str	r2, [r0, #64]	; 0x40
	ctx->cb.close = close_cb;
   1fe54:	6483      	str	r3, [r0, #72]	; 0x48

	return 0;
   1fe56:	2000      	movs	r0, #0
   1fe58:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1fe5a:	f06f 0015 	mvn.w	r0, #21
   1fe5e:	bd10      	pop	{r4, pc}
		return -ENOENT;
   1fe60:	f06f 0001 	mvn.w	r0, #1
}
   1fe64:	bd10      	pop	{r4, pc}

0001fe66 <net_app_get_net_pkt>:
}

struct net_pkt *net_app_get_net_pkt(struct net_app_ctx *ctx,
				    sa_family_t family,
				    s32_t timeout)
{
   1fe66:	b570      	push	{r4, r5, r6, lr}
   1fe68:	b086      	sub	sp, #24
   1fe6a:	4604      	mov	r4, r0
   1fe6c:	460e      	mov	r6, r1
   1fe6e:	4615      	mov	r5, r2
	struct net_context *net_ctx;
	struct sockaddr dst = { 0 };
   1fe70:	2100      	movs	r1, #0
   1fe72:	2218      	movs	r2, #24
   1fe74:	4668      	mov	r0, sp
   1fe76:	f7e0 fccd 	bl	814 <memset>

	if (!ctx) {
   1fe7a:	b914      	cbnz	r4, 1fe82 <net_app_get_net_pkt+0x1c>
		return NULL;
   1fe7c:	2000      	movs	r0, #0
	if (!net_ctx) {
		return NULL;
	}

	return net_pkt_get_tx(net_ctx, timeout);
}
   1fe7e:	b006      	add	sp, #24
   1fe80:	bd70      	pop	{r4, r5, r6, pc}
	if (!ctx->is_init) {
   1fe82:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
   1fe86:	07db      	lsls	r3, r3, #31
   1fe88:	d5f8      	bpl.n	1fe7c <net_app_get_net_pkt+0x16>
	net_ctx = _net_app_select_net_ctx(ctx, &dst);
   1fe8a:	4669      	mov	r1, sp
   1fe8c:	4620      	mov	r0, r4
	dst.sa_family = family;
   1fe8e:	f8ad 6000 	strh.w	r6, [sp]
	net_ctx = _net_app_select_net_ctx(ctx, &dst);
   1fe92:	f7ff ffb5 	bl	1fe00 <_net_app_select_net_ctx>
	if (!net_ctx) {
   1fe96:	2800      	cmp	r0, #0
   1fe98:	d0f0      	beq.n	1fe7c <net_app_get_net_pkt+0x16>
	return net_pkt_get_tx(net_ctx, timeout);
   1fe9a:	4629      	mov	r1, r5
   1fe9c:	f7f9 fd76 	bl	1998c <net_pkt_get_tx>
   1fea0:	e7ed      	b.n	1fe7e <net_app_get_net_pkt+0x18>

0001fea2 <net_app_get_net_buf>:
}

struct net_buf *net_app_get_net_buf(struct net_app_ctx *ctx,
				    struct net_pkt *pkt,
				    s32_t timeout)
{
   1fea2:	b538      	push	{r3, r4, r5, lr}
   1fea4:	460d      	mov	r5, r1
	struct net_buf *frag;

	if (!ctx || !pkt) {
   1fea6:	b188      	cbz	r0, 1fecc <net_app_get_net_buf+0x2a>
   1fea8:	b191      	cbz	r1, 1fed0 <net_app_get_net_buf+0x2e>
		return NULL;
	}

	if (!ctx->is_init) {
   1feaa:	f890 4057 	ldrb.w	r4, [r0, #87]	; 0x57
   1feae:	f014 0401 	ands.w	r4, r4, #1
   1feb2:	d009      	beq.n	1fec8 <net_app_get_net_buf+0x26>
		return NULL;
	}

	frag = net_pkt_get_frag(pkt, timeout);
   1feb4:	4611      	mov	r1, r2
   1feb6:	4628      	mov	r0, r5
   1feb8:	f7f9 fd5c 	bl	19974 <net_pkt_get_frag>
	if (!frag) {
   1febc:	4604      	mov	r4, r0
   1febe:	b118      	cbz	r0, 1fec8 <net_app_get_net_buf+0x26>
		return NULL;
	}

	net_pkt_frag_add(pkt, frag);
   1fec0:	4601      	mov	r1, r0
   1fec2:	4628      	mov	r0, r5
   1fec4:	f7f9 fd9c 	bl	19a00 <net_pkt_frag_add>

	return frag;
}
   1fec8:	4620      	mov	r0, r4
   1feca:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   1fecc:	4604      	mov	r4, r0
   1fece:	e7fb      	b.n	1fec8 <net_app_get_net_buf+0x26>
   1fed0:	460c      	mov	r4, r1
   1fed2:	e7f9      	b.n	1fec8 <net_app_get_net_buf+0x26>

0001fed4 <net_app_close>:

int net_app_close(struct net_app_ctx *ctx)
{
   1fed4:	b538      	push	{r3, r4, r5, lr}
	struct net_context *net_ctx;

	if (!ctx) {
   1fed6:	4605      	mov	r5, r0
   1fed8:	b1a8      	cbz	r0, 1ff06 <net_app_close+0x32>
		return -EINVAL;
	}

	if (!ctx->is_init) {
   1feda:	f890 3057 	ldrb.w	r3, [r0, #87]	; 0x57
   1fede:	07db      	lsls	r3, r3, #31
   1fee0:	d514      	bpl.n	1ff0c <net_app_close+0x38>
		ctx->tls.close_requested = true;
		return -EINPROGRESS;
	}
#endif

	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   1fee2:	2100      	movs	r1, #0
   1fee4:	f7ff ff8c 	bl	1fe00 <_net_app_select_net_ctx>

	if (ctx->cb.close) {
   1fee8:	6cab      	ldr	r3, [r5, #72]	; 0x48
	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   1feea:	4604      	mov	r4, r0
	if (ctx->cb.close) {
   1feec:	b11b      	cbz	r3, 1fef6 <net_app_close+0x22>
		ctx->cb.close(ctx, 0, ctx->user_data);
   1feee:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   1fef0:	2100      	movs	r1, #0
   1fef2:	4628      	mov	r0, r5
   1fef4:	4798      	blx	r3
   1fef6:	2500      	movs	r5, #0
			}
		}
	}
#endif

	if (net_ctx) {
   1fef8:	b15c      	cbz	r4, 1ff12 <net_app_close+0x3e>
		net_ctx->net_app = NULL;
   1fefa:	65a5      	str	r5, [r4, #88]	; 0x58
		net_context_put(net_ctx);
   1fefc:	4620      	mov	r0, r4
   1fefe:	f7f8 fa15 	bl	1832c <net_context_put>
		net_sin6(&ctx->ipv6.local)->sin6_port = 0;
#endif
	}
#endif

	return 0;
   1ff02:	4628      	mov	r0, r5
   1ff04:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1ff06:	f06f 0015 	mvn.w	r0, #21
   1ff0a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOENT;
   1ff0c:	f06f 0001 	mvn.w	r0, #1
   1ff10:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   1ff12:	4620      	mov	r0, r4
}
   1ff14:	bd38      	pop	{r3, r4, r5, pc}

0001ff16 <net_app_listen>:
	}
}
#endif /* CONFIG_NET_TCP */

int net_app_listen(struct net_app_ctx *ctx)
{
   1ff16:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bool dual = false, v4_failed = false;
	int ret;

	if (!ctx) {
   1ff18:	4604      	mov	r4, r0
   1ff1a:	b340      	cbz	r0, 1ff6e <net_app_listen+0x58>
		return -EINVAL;
	}

	if (!ctx->is_init) {
   1ff1c:	f890 3057 	ldrb.w	r3, [r0, #87]	; 0x57
   1ff20:	07db      	lsls	r3, r3, #31
   1ff22:	d521      	bpl.n	1ff68 <net_app_listen+0x52>
		return -ENOENT;
	}

	if (ctx->app_type != NET_APP_SERVER) {
   1ff24:	f890 3056 	ldrb.w	r3, [r0, #86]	; 0x56
   1ff28:	2b01      	cmp	r3, #1
   1ff2a:	d120      	bne.n	1ff6e <net_app_listen+0x58>
#endif /* CONFIG_NET_IPV4 */

	/* We ignore the IPv4 error if IPv6 is enabled */

#if defined(CONFIG_NET_IPV6)
	if (ctx->ipv6.local.sa_family == AF_UNSPEC || dual) {
   1ff2c:	4605      	mov	r5, r0
   1ff2e:	f835 1f04 	ldrh.w	r1, [r5, #4]!
   1ff32:	b929      	cbnz	r1, 1ff40 <net_app_listen+0x2a>
		ctx->ipv6.local.sa_family = AF_INET6;
   1ff34:	230a      	movs	r3, #10
   1ff36:	8083      	strh	r3, [r0, #4]

		_net_app_set_local_addr(&ctx->ipv6.local, NULL,
   1ff38:	88c2      	ldrh	r2, [r0, #6]
   1ff3a:	4628      	mov	r0, r5
   1ff3c:	f7ff fed0 	bl	1fce0 <_net_app_set_local_addr>
				       net_sin6(&ctx->ipv6.local)->sin6_port);
	}

	ret = _net_app_set_net_ctx(ctx, ctx->ipv6.ctx, &ctx->ipv6.local,
   1ff40:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   1ff44:	9300      	str	r3, [sp, #0]
   1ff46:	462a      	mov	r2, r5
   1ff48:	2318      	movs	r3, #24
   1ff4a:	6821      	ldr	r1, [r4, #0]
   1ff4c:	4620      	mov	r0, r4
   1ff4e:	f7ff fea1 	bl	1fc94 <_net_app_set_net_ctx>
				   sizeof(struct sockaddr_in6), ctx->proto);
	if (ret < 0) {
   1ff52:	2800      	cmp	r0, #0
   1ff54:	da06      	bge.n	1ff64 <net_app_listen+0x4e>
		if (ctx->ipv6.ctx) {
   1ff56:	6820      	ldr	r0, [r4, #0]
   1ff58:	2500      	movs	r5, #0
   1ff5a:	b118      	cbz	r0, 1ff64 <net_app_listen+0x4e>
			net_context_put(ctx->ipv6.ctx);
   1ff5c:	f7f8 f9e6 	bl	1832c <net_context_put>
			ctx->ipv6.ctx = NULL;
   1ff60:	6025      	str	r5, [r4, #0]
		}

		if (!v4_failed) {
			ret = 0;
   1ff62:	4628      	mov	r0, r5
	}
#endif
#endif /* CONFIG_NET_IPV6 */

	return ret;
}
   1ff64:	b003      	add	sp, #12
   1ff66:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
   1ff68:	f06f 0001 	mvn.w	r0, #1
   1ff6c:	e7fa      	b.n	1ff64 <net_app_listen+0x4e>
		return -EINVAL;
   1ff6e:	f06f 0015 	mvn.w	r0, #21
   1ff72:	e7f7      	b.n	1ff64 <net_app_listen+0x4e>

0001ff74 <net_app_init_server>:
			enum net_sock_type sock_type,
			enum net_ip_protocol proto,
			struct sockaddr *server_addr,
			u16_t port,
			void *user_data)
{
   1ff74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ff78:	460f      	mov	r7, r1
   1ff7a:	4690      	mov	r8, r2
   1ff7c:	461d      	mov	r5, r3
   1ff7e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	int ret;

	if (!ctx) {
   1ff82:	4604      	mov	r4, r0
   1ff84:	b918      	cbnz	r0, 1ff8e <net_app_init_server+0x1a>
		return -EINVAL;
   1ff86:	f06f 0015 	mvn.w	r0, #21
   1ff8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	if (ctx->is_init) {
   1ff8e:	f890 1057 	ldrb.w	r1, [r0, #87]	; 0x57
   1ff92:	f011 0101 	ands.w	r1, r1, #1
   1ff96:	d138      	bne.n	2000a <net_app_init_server+0x96>

#if defined(CONFIG_NET_IPV4)
	memset(&ctx->ipv4.local, 0, sizeof(ctx->ipv4.local));
#endif
#if defined(CONFIG_NET_IPV6)
	memset(&ctx->ipv6.local, 0, sizeof(ctx->ipv6.local));
   1ff98:	f100 0904 	add.w	r9, r0, #4
   1ff9c:	2218      	movs	r2, #24
   1ff9e:	4648      	mov	r0, r9
   1ffa0:	f7e0 fc38 	bl	814 <memset>
#endif

	if (server_addr) {
   1ffa4:	b355      	cbz	r5, 1fffc <net_app_init_server+0x88>
		if (server_addr->sa_family == AF_INET) {
   1ffa6:	882b      	ldrh	r3, [r5, #0]
   1ffa8:	2b02      	cmp	r3, #2
   1ffaa:	d032      	beq.n	20012 <net_app_init_server+0x9e>
#else
			return -EPROTONOSUPPORT;
#endif
		}

		if (server_addr->sa_family == AF_INET6) {
   1ffac:	2b0a      	cmp	r3, #10
   1ffae:	d104      	bne.n	1ffba <net_app_init_server+0x46>
#if defined(CONFIG_NET_IPV6)
			memcpy(&ctx->ipv6.local, server_addr,
   1ffb0:	2218      	movs	r2, #24
   1ffb2:	4629      	mov	r1, r5
   1ffb4:	4648      	mov	r0, r9
   1ffb6:	f7e0 fc01 	bl	7bc <memcpy>
#else
			return -EPROTONOSUPPORT;
#endif
		}

		if (server_addr->sa_family == AF_UNSPEC) {
   1ffba:	882b      	ldrh	r3, [r5, #0]
   1ffbc:	b90b      	cbnz	r3, 1ffc2 <net_app_init_server+0x4e>
				net_sin(server_addr)->sin_port;
#endif

#if defined(CONFIG_NET_IPV6)
			net_sin6(&ctx->ipv6.local)->sin6_port =
				net_sin6(server_addr)->sin6_port;
   1ffbe:	886b      	ldrh	r3, [r5, #2]
			net_sin6(&ctx->ipv6.local)->sin6_port =
   1ffc0:	80e3      	strh	r3, [r4, #6]
		ctx->ipv6.local.sa_family = AF_INET6;
		net_sin6(&ctx->ipv6.local)->sin6_port = htons(port);
#endif
	}

	ctx->app_type = NET_APP_SERVER;
   1ffc2:	2301      	movs	r3, #1
   1ffc4:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
	ctx->user_data = user_data;
   1ffc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ffca:	6523      	str	r3, [r4, #80]	; 0x50
	ctx->send_data = net_context_sendto;
   1ffcc:	4b13      	ldr	r3, [pc, #76]	; (2001c <net_app_init_server+0xa8>)
   1ffce:	63a3      	str	r3, [r4, #56]	; 0x38
	ctx->recv_cb = _net_app_received;
   1ffd0:	4b13      	ldr	r3, [pc, #76]	; (20020 <net_app_init_server+0xac>)
   1ffd2:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->proto = proto;
   1ffd4:	f884 8055 	strb.w	r8, [r4, #85]	; 0x55
	ctx->sock_type = sock_type;
   1ffd8:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54

	ret = _net_app_config_local_ctx(ctx, sock_type, proto, server_addr);
   1ffdc:	462b      	mov	r3, r5
   1ffde:	4642      	mov	r2, r8
   1ffe0:	4639      	mov	r1, r7
   1ffe2:	4620      	mov	r0, r4
   1ffe4:	f7ff febd 	bl	1fd62 <_net_app_config_local_ctx>
	if (ret < 0) {
   1ffe8:	2800      	cmp	r0, #0
   1ffea:	db14      	blt.n	20016 <net_app_init_server+0xa2>
		goto fail;
	}

	NET_ASSERT_INFO(ctx->default_ctx, "Default ctx not selected");

	ctx->is_init = true;
   1ffec:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
   1fff0:	f043 0301 	orr.w	r3, r3, #1
   1fff4:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
   1fff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (port == 0) {
   1fffc:	2e00      	cmp	r6, #0
   1fffe:	d0c2      	beq.n	1ff86 <net_app_init_server+0x12>
		ctx->ipv6.local.sa_family = AF_INET6;
   20000:	230a      	movs	r3, #10
		net_sin6(&ctx->ipv6.local)->sin6_port = htons(port);
   20002:	ba76      	rev16	r6, r6
		ctx->ipv6.local.sa_family = AF_INET6;
   20004:	80a3      	strh	r3, [r4, #4]
		net_sin6(&ctx->ipv6.local)->sin6_port = htons(port);
   20006:	80e6      	strh	r6, [r4, #6]
   20008:	e7db      	b.n	1ffc2 <net_app_init_server+0x4e>
		return -EALREADY;
   2000a:	f06f 0044 	mvn.w	r0, #68	; 0x44
   2000e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EPROTONOSUPPORT;
   20012:	f06f 002a 	mvn.w	r0, #42	; 0x2a

	_net_app_register(ctx);

fail:
	return ret;
}
   20016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2001a:	bf00      	nop
   2001c:	00018511 	.word	0x00018511
   20020:	0001fc69 	.word	0x0001fc69

00020024 <net_app_server_enable>:
{
	bool old;

	NET_ASSERT(ctx);

	old = ctx->is_enabled;
   20024:	f890 3057 	ldrb.w	r3, [r0, #87]	; 0x57

	ctx->is_enabled = true;
   20028:	f043 0204 	orr.w	r2, r3, #4
   2002c:	f880 2057 	strb.w	r2, [r0, #87]	; 0x57
	if (ctx->is_tls) {
		_net_app_server_tls_enable(ctx);
	}
#endif
	return old;
}
   20030:	f3c3 0080 	ubfx	r0, r3, #2, #1
   20034:	4770      	bx	lr
	...

00020038 <_net_app_bt_setup>:

static struct bt_gatt_service ipss_svc = BT_GATT_SERVICE(attrs);
#endif

int _net_app_bt_setup(void)
{
   20038:	b510      	push	{r4, lr}
	struct net_if *iface;
	struct device *dev;
	int err;

	err = bt_enable(NULL);
   2003a:	2000      	movs	r0, #0
   2003c:	f7e5 f928 	bl	5290 <bt_enable>
	if (err < 0 && err != -EALREADY) {
   20040:	2800      	cmp	r0, #0
   20042:	da02      	bge.n	2004a <_net_app_bt_setup+0x12>
   20044:	f110 0f45 	cmn.w	r0, #69	; 0x45
   20048:	d115      	bne.n	20076 <_net_app_bt_setup+0x3e>
		return err;
	}

	dev = device_get_binding("net_bt");
   2004a:	480d      	ldr	r0, [pc, #52]	; (20080 <_net_app_bt_setup+0x48>)
   2004c:	f000 f834 	bl	200b8 <device_get_binding>
	if (!dev) {
   20050:	b190      	cbz	r0, 20078 <_net_app_bt_setup+0x40>
		return -ENODEV;
	}

	iface = net_if_lookup_by_dev(dev);
   20052:	f7f8 fd31 	bl	18ab8 <net_if_lookup_by_dev>
	if (!iface) {
   20056:	4604      	mov	r4, r0
   20058:	b910      	cbnz	r0, 20060 <_net_app_bt_setup+0x28>
		return -EINVAL;
   2005a:	f06f 0015 	mvn.w	r0, #21
   2005e:	bd10      	pop	{r4, pc}
	}

#if defined(CONFIG_NET_APP_BT_NODE)
	bt_gatt_service_register(&ipss_svc);
   20060:	4808      	ldr	r0, [pc, #32]	; (20084 <_net_app_bt_setup+0x4c>)
   20062:	f7e8 fd9b 	bl	8b9c <bt_gatt_service_register>

	if (net_mgmt(NET_REQUEST_BT_ADVERTISE, iface, ADV_STR,
   20066:	2303      	movs	r3, #3
   20068:	4a07      	ldr	r2, [pc, #28]	; (20088 <_net_app_bt_setup+0x50>)
   2006a:	4808      	ldr	r0, [pc, #32]	; (2008c <_net_app_bt_setup+0x54>)
   2006c:	4621      	mov	r1, r4
   2006e:	f7ff fa7f 	bl	1f570 <net_mgmt_NET_REQUEST_BT_ADVERTISE>
   20072:	2800      	cmp	r0, #0
   20074:	d1f1      	bne.n	2005a <_net_app_bt_setup+0x22>
		return -EINVAL;
	}
#endif

	return 0;
}
   20076:	bd10      	pop	{r4, pc}
		return -ENODEV;
   20078:	f06f 0012 	mvn.w	r0, #18
   2007c:	e7fb      	b.n	20076 <_net_app_bt_setup+0x3e>
   2007e:	bf00      	nop
   20080:	00023924 	.word	0x00023924
   20084:	2000eb10 	.word	0x2000eb10
   20088:	00023327 	.word	0x00023327
   2008c:	61550001 	.word	0x61550001

00020090 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   20090:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   20092:	4b08      	ldr	r3, [pc, #32]	; (200b4 <_sys_device_do_config_level+0x24>)
   20094:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   20098:	3001      	adds	r0, #1
   2009a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   2009e:	4620      	mov	r0, r4
   200a0:	42a8      	cmp	r0, r5
   200a2:	f104 040c 	add.w	r4, r4, #12
   200a6:	d300      	bcc.n	200aa <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
   200a8:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
   200aa:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   200ae:	685b      	ldr	r3, [r3, #4]
   200b0:	4798      	blx	r3
   200b2:	e7f4      	b.n	2009e <_sys_device_do_config_level+0xe>
   200b4:	00023aac 	.word	0x00023aac

000200b8 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   200b8:	4b10      	ldr	r3, [pc, #64]	; (200fc <device_get_binding+0x44>)
{
   200ba:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   200bc:	4c10      	ldr	r4, [pc, #64]	; (20100 <device_get_binding+0x48>)
{
   200be:	4605      	mov	r5, r0
   200c0:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   200c2:	429c      	cmp	r4, r3
   200c4:	d104      	bne.n	200d0 <device_get_binding+0x18>
   200c6:	4c0e      	ldr	r4, [pc, #56]	; (20100 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   200c8:	42b4      	cmp	r4, r6
   200ca:	d109      	bne.n	200e0 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   200cc:	2400      	movs	r4, #0
   200ce:	e012      	b.n	200f6 <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
   200d0:	6862      	ldr	r2, [r4, #4]
   200d2:	b11a      	cbz	r2, 200dc <device_get_binding+0x24>
   200d4:	6822      	ldr	r2, [r4, #0]
   200d6:	6812      	ldr	r2, [r2, #0]
   200d8:	42aa      	cmp	r2, r5
   200da:	d00c      	beq.n	200f6 <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   200dc:	340c      	adds	r4, #12
   200de:	e7f0      	b.n	200c2 <device_get_binding+0xa>
		if (!info->driver_api) {
   200e0:	6863      	ldr	r3, [r4, #4]
   200e2:	b90b      	cbnz	r3, 200e8 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   200e4:	340c      	adds	r4, #12
   200e6:	e7ef      	b.n	200c8 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
   200e8:	6823      	ldr	r3, [r4, #0]
   200ea:	4628      	mov	r0, r5
   200ec:	6819      	ldr	r1, [r3, #0]
   200ee:	f7e0 fb0f 	bl	710 <strcmp>
   200f2:	2800      	cmp	r0, #0
   200f4:	d1f6      	bne.n	200e4 <device_get_binding+0x2c>
}
   200f6:	4620      	mov	r0, r4
   200f8:	bd70      	pop	{r4, r5, r6, pc}
   200fa:	bf00      	nop
   200fc:	2000ebf8 	.word	0x2000ebf8
   20100:	2000eb2c 	.word	0x2000eb2c

00020104 <__errno>:
const int _k_neg_eagain = -EAGAIN;

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
   20104:	4b01      	ldr	r3, [pc, #4]	; (2010c <__errno+0x8>)
   20106:	6898      	ldr	r0, [r3, #8]
}
   20108:	3054      	adds	r0, #84	; 0x54
   2010a:	4770      	bx	lr
   2010c:	20003478 	.word	0x20003478

00020110 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   20110:	1c43      	adds	r3, r0, #1
   20112:	d003      	beq.n	2011c <_sys_power_save_idle_exit+0xc>
   20114:	4b03      	ldr	r3, [pc, #12]	; (20124 <_sys_power_save_idle_exit+0x14>)
   20116:	681b      	ldr	r3, [r3, #0]
   20118:	4298      	cmp	r0, r3
   2011a:	db01      	blt.n	20120 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   2011c:	f7e3 b98c 	b.w	3438 <_timer_idle_exit>
   20120:	4770      	bx	lr
   20122:	bf00      	nop
   20124:	2000eb1c 	.word	0x2000eb1c

00020128 <idle>:
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   20128:	4d0f      	ldr	r5, [pc, #60]	; (20168 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   2012a:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
   2012c:	4f0f      	ldr	r7, [pc, #60]	; (2016c <idle+0x44>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2012e:	f105 0610 	add.w	r6, r5, #16
	__asm__ volatile(
   20132:	f04f 0220 	mov.w	r2, #32
   20136:	f3ef 8311 	mrs	r3, BASEPRI
   2013a:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   2013e:	692b      	ldr	r3, [r5, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20140:	42b3      	cmp	r3, r6
   20142:	d00a      	beq.n	2015a <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   20144:	b14b      	cbz	r3, 2015a <idle+0x32>
   20146:	691c      	ldr	r4, [r3, #16]
   20148:	1c63      	adds	r3, r4, #1
   2014a:	d008      	beq.n	2015e <idle+0x36>
   2014c:	683b      	ldr	r3, [r7, #0]
   2014e:	42a3      	cmp	r3, r4
   20150:	dd05      	ble.n	2015e <idle+0x36>
	_kernel.idle = ticks;
   20152:	61ac      	str	r4, [r5, #24]
	k_cpu_idle();
   20154:	f7e1 f886 	bl	1264 <k_cpu_idle>
   20158:	e7eb      	b.n	20132 <idle+0xa>
   2015a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
   2015e:	4620      	mov	r0, r4
   20160:	f7e3 f956 	bl	3410 <_timer_idle_enter>
   20164:	e7f5      	b.n	20152 <idle+0x2a>
   20166:	bf00      	nop
   20168:	20003478 	.word	0x20003478
   2016c:	2000eb1c 	.word	0x2000eb1c

00020170 <stack_analyze>:
{
   20170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	size_t unused = 0;
   20172:	2300      	movs	r3, #0
	for (i = 0; i < size; i++) {
   20174:	429a      	cmp	r2, r3
   20176:	d002      	beq.n	2017e <stack_analyze+0xe>
		if ((unsigned char)stack[i] == 0xaa) {
   20178:	5ccc      	ldrb	r4, [r1, r3]
   2017a:	2caa      	cmp	r4, #170	; 0xaa
   2017c:	d00d      	beq.n	2019a <stack_analyze+0x2a>
	pcnt = ((size - unused) * 100) / size;
   2017e:	1ad4      	subs	r4, r2, r3
   20180:	2164      	movs	r1, #100	; 0x64
   20182:	4361      	muls	r1, r4
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   20184:	9201      	str	r2, [sp, #4]
	pcnt = ((size - unused) * 100) / size;
   20186:	fbb1 f1f2 	udiv	r1, r1, r2
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   2018a:	9400      	str	r4, [sp, #0]
   2018c:	9102      	str	r1, [sp, #8]
   2018e:	4601      	mov	r1, r0
   20190:	4803      	ldr	r0, [pc, #12]	; (201a0 <stack_analyze+0x30>)
   20192:	f7e1 fb3f 	bl	1814 <printk>
}
   20196:	b004      	add	sp, #16
   20198:	bd10      	pop	{r4, pc}
			unused++;
   2019a:	3301      	adds	r3, #1
   2019c:	e7ea      	b.n	20174 <stack_analyze+0x4>
   2019e:	bf00      	nop
   201a0:	00022578 	.word	0x00022578

000201a4 <k_call_stacks_analyze>:
extern K_THREAD_STACK_DEFINE(sys_work_q_stack,
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);


void k_call_stacks_analyze(void)
{
   201a4:	b508      	push	{r3, lr}
	printk("Kernel stacks:\n");
   201a6:	480e      	ldr	r0, [pc, #56]	; (201e0 <k_call_stacks_analyze+0x3c>)
   201a8:	f7e1 fb34 	bl	1814 <printk>
	STACK_ANALYZE("main     ", _main_stack);
   201ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
   201b0:	490c      	ldr	r1, [pc, #48]	; (201e4 <k_call_stacks_analyze+0x40>)
   201b2:	480d      	ldr	r0, [pc, #52]	; (201e8 <k_call_stacks_analyze+0x44>)
   201b4:	f7ff ffdc 	bl	20170 <stack_analyze>
	STACK_ANALYZE("idle     ", _idle_stack);
   201b8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   201bc:	490b      	ldr	r1, [pc, #44]	; (201ec <k_call_stacks_analyze+0x48>)
   201be:	480c      	ldr	r0, [pc, #48]	; (201f0 <k_call_stacks_analyze+0x4c>)
   201c0:	f7ff ffd6 	bl	20170 <stack_analyze>
	STACK_ANALYZE("interrupt", _interrupt_stack);
   201c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   201c8:	490a      	ldr	r1, [pc, #40]	; (201f4 <k_call_stacks_analyze+0x50>)
   201ca:	480b      	ldr	r0, [pc, #44]	; (201f8 <k_call_stacks_analyze+0x54>)
   201cc:	f7ff ffd0 	bl	20170 <stack_analyze>
	STACK_ANALYZE("workqueue", sys_work_q_stack);
   201d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   201d4:	4909      	ldr	r1, [pc, #36]	; (201fc <k_call_stacks_analyze+0x58>)
   201d6:	480a      	ldr	r0, [pc, #40]	; (20200 <k_call_stacks_analyze+0x5c>)
}
   201d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	STACK_ANALYZE("workqueue", sys_work_q_stack);
   201dc:	f7ff bfc8 	b.w	20170 <stack_analyze>
   201e0:	00023b11 	.word	0x00023b11
   201e4:	2000cc88 	.word	0x2000cc88
   201e8:	00023b21 	.word	0x00023b21
   201ec:	2000d088 	.word	0x2000d088
   201f0:	00023b2b 	.word	0x00023b2b
   201f4:	2000d1c8 	.word	0x2000d1c8
   201f8:	00023b35 	.word	0x00023b35
   201fc:	2000d9c8 	.word	0x2000d9c8
   20200:	000230a7 	.word	0x000230a7

00020204 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   20204:	4802      	ldr	r0, [pc, #8]	; (20210 <_bss_zero+0xc>)
   20206:	4a03      	ldr	r2, [pc, #12]	; (20214 <_bss_zero+0x10>)
   20208:	2100      	movs	r1, #0
   2020a:	1a12      	subs	r2, r2, r0
   2020c:	f7e0 bb02 	b.w	814 <memset>
   20210:	20000000 	.word	0x20000000
   20214:	20005318 	.word	0x20005318

00020218 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   20218:	4802      	ldr	r0, [pc, #8]	; (20224 <_data_copy+0xc>)
   2021a:	4a03      	ldr	r2, [pc, #12]	; (20228 <_data_copy+0x10>)
   2021c:	4903      	ldr	r1, [pc, #12]	; (2022c <_data_copy+0x14>)
   2021e:	1a12      	subs	r2, r2, r0
   20220:	f7e0 bacc 	b.w	7bc <memcpy>
   20224:	2000ddc8 	.word	0x2000ddc8
   20228:	2000f0b4 	.word	0x2000f0b4
   2022c:	00023b40 	.word	0x00023b40

00020230 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   20230:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   20232:	2002      	movs	r0, #2
   20234:	f7ff ff2c 	bl	20090 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   20238:	4908      	ldr	r1, [pc, #32]	; (2025c <bg_thread_main+0x2c>)
   2023a:	4809      	ldr	r0, [pc, #36]	; (20260 <bg_thread_main+0x30>)
   2023c:	f7e1 faea 	bl	1814 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   20240:	2003      	movs	r0, #3
   20242:	f7ff ff25 	bl	20090 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   20246:	f000 fec5 	bl	20fd4 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   2024a:	f7e0 fc41 	bl	ad0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   2024e:	4a05      	ldr	r2, [pc, #20]	; (20264 <bg_thread_main+0x34>)
   20250:	7a13      	ldrb	r3, [r2, #8]
   20252:	f023 0301 	bic.w	r3, r3, #1
   20256:	7213      	strb	r3, [r2, #8]
   20258:	bd08      	pop	{r3, pc}
   2025a:	bf00      	nop
   2025c:	00023ac8 	.word	0x00023ac8
   20260:	00023ae4 	.word	0x00023ae4
   20264:	20003410 	.word	0x20003410

00020268 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   20268:	b580      	push	{r7, lr}
   2026a:	b086      	sub	sp, #24
   2026c:	4e32      	ldr	r6, [pc, #200]	; (20338 <_Cstart+0xd0>)
   2026e:	af06      	add	r7, sp, #24
	_IntLibInit();
   20270:	f7e0 fdae 	bl	dd0 <_IntLibInit>
   20274:	2324      	movs	r3, #36	; 0x24
   20276:	199a      	adds	r2, r3, r6
	list->head = (sys_dnode_t *)list;
   20278:	519a      	str	r2, [r3, r6]
   2027a:	3308      	adds	r3, #8
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   2027c:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
	list->tail = (sys_dnode_t *)list;
   20280:	6052      	str	r2, [r2, #4]
   20282:	d1f8      	bne.n	20276 <_Cstart+0xe>
	_ready_q.cache = _main_thread;
   20284:	4d2d      	ldr	r5, [pc, #180]	; (2033c <_Cstart+0xd4>)
	_setup_new_thread(_main_thread, _main_stack,
   20286:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 20364 <_Cstart+0xfc>
	_ready_q.cache = _main_thread;
   2028a:	61f5      	str	r5, [r6, #28]
	_setup_new_thread(_main_thread, _main_stack,
   2028c:	2400      	movs	r4, #0
   2028e:	f04f 0901 	mov.w	r9, #1
   20292:	4643      	mov	r3, r8
   20294:	f44f 6280 	mov.w	r2, #1024	; 0x400
   20298:	4929      	ldr	r1, [pc, #164]	; (20340 <_Cstart+0xd8>)
   2029a:	f8cd 9010 	str.w	r9, [sp, #16]
   2029e:	4628      	mov	r0, r5
   202a0:	9403      	str	r4, [sp, #12]
   202a2:	9402      	str	r4, [sp, #8]
   202a4:	9401      	str	r4, [sp, #4]
   202a6:	9400      	str	r4, [sp, #0]
   202a8:	f000 fe4c 	bl	20f44 <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   202ac:	7a6b      	ldrb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
   202ae:	4628      	mov	r0, r5
   202b0:	f023 0304 	bic.w	r3, r3, #4
   202b4:	726b      	strb	r3, [r5, #9]
   202b6:	f000 fa2d 	bl	20714 <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
   202ba:	230f      	movs	r3, #15
   202bc:	9303      	str	r3, [sp, #12]
   202be:	4921      	ldr	r1, [pc, #132]	; (20344 <_Cstart+0xdc>)
   202c0:	f8cd 9010 	str.w	r9, [sp, #16]
   202c4:	9402      	str	r4, [sp, #8]
   202c6:	9401      	str	r4, [sp, #4]
   202c8:	9400      	str	r4, [sp, #0]
   202ca:	4b1f      	ldr	r3, [pc, #124]	; (20348 <_Cstart+0xe0>)
   202cc:	481f      	ldr	r0, [pc, #124]	; (2034c <_Cstart+0xe4>)
   202ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
   202d2:	f000 fe37 	bl	20f44 <_setup_new_thread>
   202d6:	4b1d      	ldr	r3, [pc, #116]	; (2034c <_Cstart+0xe4>)
   202d8:	4a1c      	ldr	r2, [pc, #112]	; (2034c <_Cstart+0xe4>)
   202da:	7a5b      	ldrb	r3, [r3, #9]
   202dc:	f023 0304 	bic.w	r3, r3, #4
   202e0:	7253      	strb	r3, [r2, #9]
	_add_thread_to_ready_q(thr);
   202e2:	4610      	mov	r0, r2
   202e4:	f000 fa16 	bl	20714 <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
   202e8:	4b19      	ldr	r3, [pc, #100]	; (20350 <_Cstart+0xe8>)
   202ea:	6133      	str	r3, [r6, #16]
	list->tail = (sys_dnode_t *)list;
   202ec:	6173      	str	r3, [r6, #20]
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   202ee:	4b19      	ldr	r3, [pc, #100]	; (20354 <_Cstart+0xec>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   202f0:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   202f4:	4b18      	ldr	r3, [pc, #96]	; (20358 <_Cstart+0xf0>)
   202f6:	22e0      	movs	r2, #224	; 0xe0
   202f8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   202fc:	77dc      	strb	r4, [r3, #31]
   202fe:	761c      	strb	r4, [r3, #24]
   20300:	765c      	strb	r4, [r3, #25]
   20302:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   20304:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   20306:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   2030a:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   2030c:	f7e0 ff16 	bl	113c <_FaultInit>
	_CpuIdleInit();
   20310:	f7e0 ffa2 	bl	1258 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   20314:	4620      	mov	r0, r4
   20316:	f7ff febb 	bl	20090 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   2031a:	4648      	mov	r0, r9
   2031c:	f7ff feb8 	bl	20090 <_sys_device_do_config_level>
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   20320:	4b0e      	ldr	r3, [pc, #56]	; (2035c <_Cstart+0xf4>)

	_current = main_thread;
   20322:	60b5      	str	r5, [r6, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   20324:	f023 0307 	bic.w	r3, r3, #7

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
   20328:	4a0d      	ldr	r2, [pc, #52]	; (20360 <_Cstart+0xf8>)
   2032a:	f383 8809 	msr	PSP, r3
   2032e:	2100      	movs	r1, #0
   20330:	f381 8811 	msr	BASEPRI, r1
   20334:	4640      	mov	r0, r8
   20336:	4710      	bx	r2
   20338:	20003478 	.word	0x20003478
   2033c:	20003410 	.word	0x20003410
   20340:	2000cc88 	.word	0x2000cc88
   20344:	2000d088 	.word	0x2000d088
   20348:	00020129 	.word	0x00020129
   2034c:	200033a8 	.word	0x200033a8
   20350:	20003488 	.word	0x20003488
   20354:	2000d9c8 	.word	0x2000d9c8
   20358:	e000ed00 	.word	0xe000ed00
   2035c:	2000d088 	.word	0x2000d088
   20360:	00020edd 	.word	0x00020edd
   20364:	00020231 	.word	0x00020231

00020368 <init_mem_slab_module>:
{
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
   20368:	4b0b      	ldr	r3, [pc, #44]	; (20398 <init_mem_slab_module+0x30>)
   2036a:	480c      	ldr	r0, [pc, #48]	; (2039c <init_mem_slab_module+0x34>)
{
   2036c:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
   2036e:	2400      	movs	r4, #0
	for (slab = _k_mem_slab_list_start;
   20370:	4283      	cmp	r3, r0
   20372:	d301      	bcc.n	20378 <init_mem_slab_module+0x10>
	     slab++) {
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
	}
	return 0;
}
   20374:	2000      	movs	r0, #0
   20376:	bd70      	pop	{r4, r5, r6, pc}
	p = slab->buffer;
   20378:	691a      	ldr	r2, [r3, #16]
	for (j = 0; j < slab->num_blocks; j++) {
   2037a:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   2037c:	615c      	str	r4, [r3, #20]
	for (j = 0; j < slab->num_blocks; j++) {
   2037e:	2100      	movs	r1, #0
   20380:	42a9      	cmp	r1, r5
   20382:	d101      	bne.n	20388 <init_mem_slab_module+0x20>
	     slab++) {
   20384:	331c      	adds	r3, #28
   20386:	e7f3      	b.n	20370 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   20388:	695e      	ldr	r6, [r3, #20]
   2038a:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
   2038c:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
   2038e:	615a      	str	r2, [r3, #20]
	for (j = 0; j < slab->num_blocks; j++) {
   20390:	3101      	adds	r1, #1
		p += slab->block_size;
   20392:	4432      	add	r2, r6
   20394:	e7f4      	b.n	20380 <init_mem_slab_module+0x18>
   20396:	bf00      	nop
   20398:	2000ec54 	.word	0x2000ec54
   2039c:	2000ec8c 	.word	0x2000ec8c

000203a0 <k_mem_slab_alloc>:

	_k_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   203a0:	b538      	push	{r3, r4, r5, lr}
   203a2:	460c      	mov	r4, r1
   203a4:	f04f 0120 	mov.w	r1, #32
   203a8:	f3ef 8511 	mrs	r5, BASEPRI
   203ac:	f381 8811 	msr	BASEPRI, r1
	unsigned int key = irq_lock();
	int result;

	if (slab->free_list != NULL) {
   203b0:	6941      	ldr	r1, [r0, #20]
   203b2:	b151      	cbz	r1, 203ca <k_mem_slab_alloc+0x2a>
		/* take a free block */
		*mem = slab->free_list;
   203b4:	6021      	str	r1, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   203b6:	6942      	ldr	r2, [r0, #20]
   203b8:	6812      	ldr	r2, [r2, #0]
   203ba:	6142      	str	r2, [r0, #20]
		slab->num_used++;
   203bc:	6982      	ldr	r2, [r0, #24]
   203be:	3201      	adds	r2, #1
   203c0:	6182      	str	r2, [r0, #24]
		result = 0;
   203c2:	2000      	movs	r0, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   203c4:	f385 8811 	msr	BASEPRI, r5
	}

	irq_unlock(key);

	return result;
}
   203c8:	bd38      	pop	{r3, r4, r5, pc}
	} else if (timeout == K_NO_WAIT) {
   203ca:	b91a      	cbnz	r2, 203d4 <k_mem_slab_alloc+0x34>
		*mem = NULL;
   203cc:	6022      	str	r2, [r4, #0]
		result = -ENOMEM;
   203ce:	f06f 000b 	mvn.w	r0, #11
   203d2:	e7f7      	b.n	203c4 <k_mem_slab_alloc+0x24>
		_pend_current_thread(&slab->wait_q, timeout);
   203d4:	4611      	mov	r1, r2
   203d6:	f000 fa87 	bl	208e8 <_pend_current_thread>
	_update_time_slice_before_swap();
   203da:	f000 fb47 	bl	20a6c <_update_time_slice_before_swap>
	return __swap(key);
   203de:	4628      	mov	r0, r5
   203e0:	f7e0 fd02 	bl	de8 <__swap>
		if (result == 0) {
   203e4:	2800      	cmp	r0, #0
   203e6:	d1ef      	bne.n	203c8 <k_mem_slab_alloc+0x28>
			*mem = _current->base.swap_data;
   203e8:	4b02      	ldr	r3, [pc, #8]	; (203f4 <k_mem_slab_alloc+0x54>)
   203ea:	689b      	ldr	r3, [r3, #8]
   203ec:	68db      	ldr	r3, [r3, #12]
   203ee:	6023      	str	r3, [r4, #0]
   203f0:	bd38      	pop	{r3, r4, r5, pc}
   203f2:	bf00      	nop
   203f4:	20003478 	.word	0x20003478

000203f8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   203f8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   203fa:	f04f 0320 	mov.w	r3, #32
   203fe:	f3ef 8411 	mrs	r4, BASEPRI
   20402:	f383 8811 	msr	BASEPRI, r3
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   20406:	4b2e      	ldr	r3, [pc, #184]	; (204c0 <k_mem_slab_free+0xc8>)
   20408:	681a      	ldr	r2, [r3, #0]
   2040a:	6803      	ldr	r3, [r0, #0]
   2040c:	b1a2      	cbz	r2, 20438 <k_mem_slab_free+0x40>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2040e:	4298      	cmp	r0, r3
   20410:	bf08      	it	eq
   20412:	2300      	moveq	r3, #0
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   20414:	b943      	cbnz	r3, 20428 <k_mem_slab_free+0x30>
		if (_must_switch_threads()) {
			_Swap(key);
			return;
		}
	} else {
		**(char ***)mem = slab->free_list;
   20416:	680b      	ldr	r3, [r1, #0]
   20418:	6942      	ldr	r2, [r0, #20]
   2041a:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   2041c:	680b      	ldr	r3, [r1, #0]
   2041e:	6143      	str	r3, [r0, #20]
		slab->num_used--;
   20420:	6983      	ldr	r3, [r0, #24]
   20422:	3b01      	subs	r3, #1
   20424:	6183      	str	r3, [r0, #24]
   20426:	e03e      	b.n	204a6 <k_mem_slab_free+0xae>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
   20428:	6a1a      	ldr	r2, [r3, #32]
   2042a:	3202      	adds	r2, #2
   2042c:	d108      	bne.n	20440 <k_mem_slab_free+0x48>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   2042e:	6842      	ldr	r2, [r0, #4]
   20430:	4293      	cmp	r3, r2
   20432:	d0f0      	beq.n	20416 <k_mem_slab_free+0x1e>
   20434:	681b      	ldr	r3, [r3, #0]
   20436:	e7ed      	b.n	20414 <k_mem_slab_free+0x1c>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20438:	4298      	cmp	r0, r3
   2043a:	d0ec      	beq.n	20416 <k_mem_slab_free+0x1e>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   2043c:	2b00      	cmp	r3, #0
   2043e:	d0ea      	beq.n	20416 <k_mem_slab_free+0x1e>
			if (_is_thread_timeout_expired(thread)) {
   20440:	4618      	mov	r0, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   20442:	cb0c      	ldmia	r3, {r2, r3}
   20444:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   20446:	6802      	ldr	r2, [r0, #0]
   20448:	4d1e      	ldr	r5, [pc, #120]	; (204c4 <k_mem_slab_free+0xcc>)
   2044a:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2044c:	7a43      	ldrb	r3, [r0, #9]
   2044e:	f023 0302 	bic.w	r3, r3, #2
   20452:	7243      	strb	r3, [r0, #9]
		_set_thread_return_value_with_data(pending_thread, 0, *mem);
   20454:	680b      	ldr	r3, [r1, #0]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   20456:	6a01      	ldr	r1, [r0, #32]
	thread->base.swap_data = data;
   20458:	60c3      	str	r3, [r0, #12]
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2045a:	2200      	movs	r2, #0
   2045c:	1c4b      	adds	r3, r1, #1
   2045e:	6642      	str	r2, [r0, #100]	; 0x64
	return _abort_timeout(&thread->base.timeout);
   20460:	f100 0210 	add.w	r2, r0, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   20464:	d00e      	beq.n	20484 <k_mem_slab_free+0x8c>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   20466:	696b      	ldr	r3, [r5, #20]
   20468:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
   2046a:	bf1f      	itttt	ne
   2046c:	6902      	ldrne	r2, [r0, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   2046e:	6913      	ldrne	r3, [r2, #16]
   20470:	185b      	addne	r3, r3, r1
   20472:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   20474:	6943      	ldr	r3, [r0, #20]
   20476:	6902      	ldr	r2, [r0, #16]
   20478:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2047a:	6902      	ldr	r2, [r0, #16]
   2047c:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   2047e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20482:	6203      	str	r3, [r0, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20484:	7a43      	ldrb	r3, [r0, #9]
   20486:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   2048a:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2048e:	7242      	strb	r2, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   20490:	d102      	bne.n	20498 <k_mem_slab_free+0xa0>
   20492:	6a03      	ldr	r3, [r0, #32]
   20494:	3301      	adds	r3, #1
   20496:	d009      	beq.n	204ac <k_mem_slab_free+0xb4>
	return _is_preempt(_current) && __must_switch_threads();
   20498:	68ab      	ldr	r3, [r5, #8]
   2049a:	895b      	ldrh	r3, [r3, #10]
   2049c:	2b7f      	cmp	r3, #127	; 0x7f
   2049e:	d802      	bhi.n	204a6 <k_mem_slab_free+0xae>
   204a0:	f000 fa32 	bl	20908 <__must_switch_threads>
   204a4:	b928      	cbnz	r0, 204b2 <k_mem_slab_free+0xba>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   204a6:	f384 8811 	msr	BASEPRI, r4
   204aa:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   204ac:	f000 f932 	bl	20714 <_add_thread_to_ready_q>
   204b0:	e7f2      	b.n	20498 <k_mem_slab_free+0xa0>
	_update_time_slice_before_swap();
   204b2:	f000 fadb 	bl	20a6c <_update_time_slice_before_swap>
	return __swap(key);
   204b6:	4620      	mov	r0, r4
	}

	irq_unlock(key);
}
   204b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   204bc:	f7e0 bc94 	b.w	de8 <__swap>
   204c0:	20005290 	.word	0x20005290
   204c4:	20003478 	.word	0x20003478

000204c8 <get_bit_ptr>:

/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct k_mem_pool *p, int level, int bn, u32_t **word)
{
   204c8:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
   204ca:	7ac4      	ldrb	r4, [r0, #11]
   204cc:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
   204ce:	428c      	cmp	r4, r1
   204d0:	f04f 040c 	mov.w	r4, #12
   204d4:	bfb6      	itet	lt
   204d6:	4361      	mullt	r1, r4
   204d8:	fb04 0101 	mlage	r1, r4, r1, r0
   204dc:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
   204de:	2420      	movs	r4, #32
   204e0:	fb92 f4f4 	sdiv	r4, r2, r4
   204e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   204e8:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
   204ea:	f002 001f 	and.w	r0, r2, #31
   204ee:	bd10      	pop	{r4, pc}

000204f0 <set_free_bit>:

static void set_free_bit(struct k_mem_pool *p, int level, int bn)
{
   204f0:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
   204f2:	ab01      	add	r3, sp, #4
   204f4:	f7ff ffe8 	bl	204c8 <get_bit_ptr>

	*word |= (1<<bit);
   204f8:	9a01      	ldr	r2, [sp, #4]
   204fa:	2301      	movs	r3, #1
   204fc:	fa03 f000 	lsl.w	r0, r3, r0
   20500:	6813      	ldr	r3, [r2, #0]
   20502:	4303      	orrs	r3, r0
   20504:	6013      	str	r3, [r2, #0]
}
   20506:	b003      	add	sp, #12
   20508:	f85d fb04 	ldr.w	pc, [sp], #4

0002050c <init_static_pools>:
		set_free_bit(p, 0, i);
	}
}

int init_static_pools(struct device *unused)
{
   2050c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20510:	4c30      	ldr	r4, [pc, #192]	; (205d4 <init_static_pools+0xc8>)
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   20512:	4e31      	ldr	r6, [pc, #196]	; (205d8 <init_static_pools+0xcc>)
		sys_dlist_init(&p->levels[i].free_list);
   20514:	270c      	movs	r7, #12
   20516:	f1a4 0510 	sub.w	r5, r4, #16
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   2051a:	42b5      	cmp	r5, r6
   2051c:	d302      	bcc.n	20524 <init_static_pools+0x18>
		init_mem_pool(p);
	}

	return 0;
}
   2051e:	2000      	movs	r0, #0
   20520:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   20524:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   20528:	f834 ec08 	ldrh.w	lr, [r4, #-8]
	u32_t *bits = p->buf + buflen;
   2052c:	f854 0c10 	ldr.w	r0, [r4, #-16]
	list->head = (sys_dnode_t *)list;
   20530:	6024      	str	r4, [r4, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   20532:	fb03 fe0e 	mul.w	lr, r3, lr
	u32_t *bits = p->buf + buflen;
   20536:	4470      	add	r0, lr
	list->tail = (sys_dnode_t *)list;
   20538:	6064      	str	r4, [r4, #4]
	for (i = 0; i < p->n_levels; i++) {
   2053a:	2100      	movs	r1, #0
			bits += (nblocks + 31)/32;
   2053c:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
   20540:	f814 2c06 	ldrb.w	r2, [r4, #-6]
   20544:	4291      	cmp	r1, r2
   20546:	db07      	blt.n	20558 <init_static_pools+0x4c>
   20548:	f04f 0800 	mov.w	r8, #0
	for (i = 0; i < p->n_max; i++) {
   2054c:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   20550:	4598      	cmp	r8, r3
   20552:	db24      	blt.n	2059e <init_static_pools+0x92>
   20554:	3418      	adds	r4, #24
   20556:	e7de      	b.n	20516 <init_static_pools+0xa>
		sys_dlist_init(&p->levels[i].free_list);
   20558:	f854 ac04 	ldr.w	sl, [r4, #-4]
		int nblocks = buflen / sz;
   2055c:	fbbe f2f3 	udiv	r2, lr, r3
		sys_dlist_init(&p->levels[i].free_list);
   20560:	fb07 f901 	mul.w	r9, r7, r1
		if (nblocks < 32) {
   20564:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
   20566:	eb0a 0809 	add.w	r8, sl, r9
		sz = _ALIGN4(sz / 4);
   2056a:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
   2056e:	f108 0b04 	add.w	fp, r8, #4
			bits += (nblocks + 31)/32;
   20572:	bfc8      	it	gt
   20574:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
   20576:	f103 0303 	add.w	r3, r3, #3
	list->head = (sys_dnode_t *)list;
   2057a:	f8c8 b004 	str.w	fp, [r8, #4]
	list->tail = (sys_dnode_t *)list;
   2057e:	f8c8 b008 	str.w	fp, [r8, #8]
			bits += (nblocks + 31)/32;
   20582:	bfca      	itet	gt
   20584:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
   20588:	f804 1c05 	strble.w	r1, [r4, #-5]
			p->levels[i].bits_p = bits;
   2058c:	f84a 0009 	strgt.w	r0, [sl, r9]
		sz = _ALIGN4(sz / 4);
   20590:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
   20594:	bfc8      	it	gt
   20596:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
   2059a:	3101      	adds	r1, #1
   2059c:	e7d0      	b.n	20540 <init_static_pools+0x34>
	return p->buf + lsz * block;
   2059e:	f854 2c0c 	ldr.w	r2, [r4, #-12]
		sys_dlist_append(&p->levels[0].free_list, block);
   205a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return p->buf + lsz * block;
   205a6:	f854 0c10 	ldr.w	r0, [r4, #-16]
   205aa:	fb02 f208 	mul.w	r2, r2, r8
		sys_dlist_append(&p->levels[0].free_list, block);
   205ae:	f103 0e04 	add.w	lr, r3, #4
	node->next = list;
   205b2:	f840 e002 	str.w	lr, [r0, r2]
	return p->buf + lsz * block;
   205b6:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
   205b8:	689a      	ldr	r2, [r3, #8]
   205ba:	604a      	str	r2, [r1, #4]
	list->tail->next = node;
   205bc:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
   205be:	4628      	mov	r0, r5
   205c0:	6011      	str	r1, [r2, #0]
	list->tail = node;
   205c2:	6099      	str	r1, [r3, #8]
   205c4:	4642      	mov	r2, r8
   205c6:	2100      	movs	r1, #0
   205c8:	f7ff ff92 	bl	204f0 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
   205cc:	f108 0801 	add.w	r8, r8, #1
   205d0:	e7bc      	b.n	2054c <init_static_pools+0x40>
   205d2:	bf00      	nop
   205d4:	2000ec9c 	.word	0x2000ec9c
   205d8:	2000ec8c 	.word	0x2000ec8c

000205dc <k_queue_init>:
	list->head = NULL;
   205dc:	2300      	movs	r3, #0
   205de:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   205e0:	6043      	str	r3, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&queue->poll_events);
   205e2:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   205e6:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   205e8:	60c3      	str	r3, [r0, #12]
   205ea:	4770      	bx	lr

000205ec <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
   205ec:	b510      	push	{r4, lr}
	__asm__ volatile(
   205ee:	f04f 0320 	mov.w	r3, #32
   205f2:	f3ef 8411 	mrs	r4, BASEPRI
   205f6:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
   205fa:	b931      	cbnz	r1, 2060a <k_queue_insert+0x1e>
	node->next = list->head;
   205fc:	6803      	ldr	r3, [r0, #0]
   205fe:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
   20600:	6843      	ldr	r3, [r0, #4]
	list->head = node;
   20602:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
   20604:	b943      	cbnz	r3, 20618 <k_queue_insert+0x2c>
		list->tail = node;
   20606:	6042      	str	r2, [r0, #4]
   20608:	e006      	b.n	20618 <k_queue_insert+0x2c>
	} else if (!prev->next) {
   2060a:	680b      	ldr	r3, [r1, #0]
	node->next = NULL;
   2060c:	6013      	str	r3, [r2, #0]
	} else if (!prev->next) {
   2060e:	b98b      	cbnz	r3, 20634 <k_queue_insert+0x48>
	if (!list->tail) {
   20610:	6843      	ldr	r3, [r0, #4]
   20612:	b96b      	cbnz	r3, 20630 <k_queue_insert+0x44>
		list->tail = node;
   20614:	6042      	str	r2, [r0, #4]
		list->head = node;
   20616:	6002      	str	r2, [r0, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
   20618:	2104      	movs	r1, #4
   2061a:	3008      	adds	r0, #8
   2061c:	f001 f872 	bl	21704 <_handle_obj_poll_events>
#endif /* !CONFIG_POLL */

	sys_slist_insert(&queue->data_q, prev, data);

#if defined(CONFIG_POLL)
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   20620:	b150      	cbz	r0, 20638 <k_queue_insert+0x4c>
	_update_time_slice_before_swap();
   20622:	f000 fa23 	bl	20a6c <_update_time_slice_before_swap>
	return __swap(key);
   20626:	4620      	mov	r0, r4
		return;
	}
#endif /* CONFIG_POLL */

	irq_unlock(key);
}
   20628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2062c:	f7e0 bbdc 	b.w	de8 <__swap>
		list->tail->next = node;
   20630:	601a      	str	r2, [r3, #0]
   20632:	e7e8      	b.n	20606 <k_queue_insert+0x1a>
		prev->next = node;
   20634:	600a      	str	r2, [r1, #0]
   20636:	e7ef      	b.n	20618 <k_queue_insert+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   20638:	f384 8811 	msr	BASEPRI, r4
   2063c:	bd10      	pop	{r4, pc}

0002063e <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, queue->data_q.tail, data);
   2063e:	460a      	mov	r2, r1
   20640:	6841      	ldr	r1, [r0, #4]
   20642:	f7ff bfd3 	b.w	205ec <k_queue_insert>

00020646 <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, NULL, data);
   20646:	460a      	mov	r2, r1
   20648:	2100      	movs	r1, #0
   2064a:	f7ff bfcf 	b.w	205ec <k_queue_insert>

0002064e <k_queue_append_list>:
}

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   2064e:	b510      	push	{r4, lr}
	__asm__ volatile(
   20650:	f04f 0320 	mov.w	r3, #32
   20654:	f3ef 8411 	mrs	r4, BASEPRI
   20658:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
   2065c:	6843      	ldr	r3, [r0, #4]
   2065e:	b96b      	cbnz	r3, 2067c <k_queue_append_list+0x2e>
		list->head = (sys_snode_t *)head;
   20660:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
   20662:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
   20664:	2104      	movs	r1, #4
   20666:	3008      	adds	r0, #8
   20668:	f001 f84c 	bl	21704 <_handle_obj_poll_events>
			return;
		}
	}
#else
	sys_slist_append_list(&queue->data_q, head, tail);
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   2066c:	b140      	cbz	r0, 20680 <k_queue_append_list+0x32>
	_update_time_slice_before_swap();
   2066e:	f000 f9fd 	bl	20a6c <_update_time_slice_before_swap>
	return __swap(key);
   20672:	4620      	mov	r0, r4
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
   20674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20678:	f7e0 bbb6 	b.w	de8 <__swap>
		list->tail->next = (sys_snode_t *)head;
   2067c:	6019      	str	r1, [r3, #0]
   2067e:	e7f0      	b.n	20662 <k_queue_append_list+0x14>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   20680:	f384 8811 	msr	BASEPRI, r4
   20684:	bd10      	pop	{r4, pc}

00020686 <k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
   20686:	b530      	push	{r4, r5, lr}
   20688:	4604      	mov	r4, r0
   2068a:	b087      	sub	sp, #28
   2068c:	460d      	mov	r5, r1
	__asm__ volatile(
   2068e:	f04f 0220 	mov.w	r2, #32
   20692:	f3ef 8311 	mrs	r3, BASEPRI
   20696:	f382 8811 	msr	BASEPRI, r2
   2069a:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
   2069c:	b152      	cbz	r2, 206b4 <k_queue_get+0x2e>
	list->head = node->next;
   2069e:	6811      	ldr	r1, [r2, #0]
   206a0:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
   206a2:	6840      	ldr	r0, [r0, #4]
   206a4:	4282      	cmp	r2, r0
		list->tail = list->head;
   206a6:	bf08      	it	eq
   206a8:	6061      	streq	r1, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   206aa:	f383 8811 	msr	BASEPRI, r3
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   206ae:	4610      	mov	r0, r2
   206b0:	b007      	add	sp, #28
   206b2:	bd30      	pop	{r4, r5, pc}
	if (timeout == K_NO_WAIT) {
   206b4:	b919      	cbnz	r1, 206be <k_queue_get+0x38>
   206b6:	f383 8811 	msr	BASEPRI, r3
			return NULL;
   206ba:	2200      	movs	r2, #0
   206bc:	e7f7      	b.n	206ae <k_queue_get+0x28>
   206be:	f383 8811 	msr	BASEPRI, r3
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   206c2:	2104      	movs	r1, #4
   206c4:	4603      	mov	r3, r0
   206c6:	eb0d 0001 	add.w	r0, sp, r1
   206ca:	f000 ff63 	bl	21594 <k_poll_event_init>
		event.state = K_POLL_STATE_NOT_READY;
   206ce:	f89d 3011 	ldrb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
   206d2:	462a      	mov	r2, r5
		event.state = K_POLL_STATE_NOT_READY;
   206d4:	f36f 1307 	bfc	r3, #4, #4
		err = k_poll(&event, 1, timeout);
   206d8:	2101      	movs	r1, #1
   206da:	a801      	add	r0, sp, #4
		event.state = K_POLL_STATE_NOT_READY;
   206dc:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
   206e0:	f000 ff6c 	bl	215bc <k_poll>
		if (err) {
   206e4:	2800      	cmp	r0, #0
   206e6:	d1e8      	bne.n	206ba <k_queue_get+0x34>
	__asm__ volatile(
   206e8:	f04f 0320 	mov.w	r3, #32
   206ec:	f3ef 8111 	mrs	r1, BASEPRI
   206f0:	f383 8811 	msr	BASEPRI, r3
   206f4:	6822      	ldr	r2, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
   206f6:	b12a      	cbz	r2, 20704 <k_queue_get+0x7e>
	if (list->tail == node) {
   206f8:	6860      	ldr	r0, [r4, #4]
	list->head = node->next;
   206fa:	6813      	ldr	r3, [r2, #0]
   206fc:	6023      	str	r3, [r4, #0]
	if (list->tail == node) {
   206fe:	4282      	cmp	r2, r0
		list->tail = list->head;
   20700:	bf08      	it	eq
   20702:	6063      	streq	r3, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   20704:	f381 8811 	msr	BASEPRI, r1
	} while (!val && timeout == K_FOREVER);
   20708:	2a00      	cmp	r2, #0
   2070a:	d1d0      	bne.n	206ae <k_queue_get+0x28>
   2070c:	1c6b      	adds	r3, r5, #1
   2070e:	d0de      	beq.n	206ce <k_queue_get+0x48>
   20710:	e7d3      	b.n	206ba <k_queue_get+0x34>
	...

00020714 <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
   20714:	b530      	push	{r4, r5, lr}
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   20716:	f990 300a 	ldrsb.w	r3, [r0, #10]
	*bmap |= _get_ready_q_prio_bit(prio);
   2071a:	4911      	ldr	r1, [pc, #68]	; (20760 <_add_thread_to_ready_q+0x4c>)
	return prio + _NUM_COOP_PRIO;
   2071c:	f103 0410 	add.w	r4, r3, #16
	return (prio + _NUM_COOP_PRIO) >> 5;
   20720:	1162      	asrs	r2, r4, #5
   20722:	3206      	adds	r2, #6
   20724:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   20728:	f004 051f 	and.w	r5, r4, #31
   2072c:	2401      	movs	r4, #1
   2072e:	40ac      	lsls	r4, r5
   20730:	6895      	ldr	r5, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
   20732:	3314      	adds	r3, #20
	*bmap |= _get_ready_q_prio_bit(prio);
   20734:	432c      	orrs	r4, r5
	sys_dlist_t *q = &_ready_q.q[q_index];
   20736:	00db      	lsls	r3, r3, #3
	*bmap |= _get_ready_q_prio_bit(prio);
   20738:	6094      	str	r4, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
   2073a:	1d1a      	adds	r2, r3, #4
   2073c:	440a      	add	r2, r1
	node->prev = list->tail;
   2073e:	440b      	add	r3, r1
	node->next = list;
   20740:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
   20742:	689a      	ldr	r2, [r3, #8]
   20744:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   20746:	689a      	ldr	r2, [r3, #8]
   20748:	6010      	str	r0, [r2, #0]
	list->tail = node;
   2074a:	6098      	str	r0, [r3, #8]
	sys_dlist_append(q, &thread->base.k_q_node);

# ifndef CONFIG_SMP
	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
   2074c:	69cb      	ldr	r3, [r1, #28]
   2074e:	f990 400a 	ldrsb.w	r4, [r0, #10]
   20752:	f993 200a 	ldrsb.w	r2, [r3, #10]
   20756:	4294      	cmp	r4, r2
   20758:	bfa8      	it	ge
   2075a:	4618      	movge	r0, r3
   2075c:	61c8      	str	r0, [r1, #28]
   2075e:	bd30      	pop	{r4, r5, pc}
   20760:	20003478 	.word	0x20003478

00020764 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20764:	7a42      	ldrb	r2, [r0, #9]
   20766:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
   2076a:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2076e:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   20770:	d104      	bne.n	2077c <_ready_thread+0x18>
   20772:	6a03      	ldr	r3, [r0, #32]
   20774:	3301      	adds	r3, #1
   20776:	d101      	bne.n	2077c <_ready_thread+0x18>
		_add_thread_to_ready_q(thread);
   20778:	f7ff bfcc 	b.w	20714 <_add_thread_to_ready_q>
   2077c:	4770      	bx	lr
	...

00020780 <_add_timeout>:
{
   20780:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   20782:	610b      	str	r3, [r1, #16]
	timeout->thread = thread;
   20784:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   20786:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
   20788:	bb13      	cbnz	r3, 207d0 <_add_timeout+0x50>
	__asm__ volatile(
   2078a:	f04f 0220 	mov.w	r2, #32
   2078e:	f3ef 8411 	mrs	r4, BASEPRI
   20792:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   20796:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2079a:	610a      	str	r2, [r1, #16]
	if (thread) {
   2079c:	b180      	cbz	r0, 207c0 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
   2079e:	68ca      	ldr	r2, [r1, #12]
   207a0:	b14a      	cbz	r2, 207b6 <_add_timeout+0x36>
	node->prev->next = node->next;
   207a2:	e890 0006 	ldmia.w	r0, {r1, r2}
   207a6:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   207a8:	6801      	ldr	r1, [r0, #0]
   207aa:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   207ac:	7a42      	ldrb	r2, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   207ae:	61c3      	str	r3, [r0, #28]
   207b0:	f022 0202 	bic.w	r2, r2, #2
   207b4:	7242      	strb	r2, [r0, #9]
		_ready_thread(thread);
   207b6:	f7ff ffd5 	bl	20764 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   207ba:	f384 8811 	msr	BASEPRI, r4
   207be:	bd70      	pop	{r4, r5, r6, pc}
   207c0:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
   207c4:	694b      	ldr	r3, [r1, #20]
   207c6:	b32b      	cbz	r3, 20814 <_add_timeout+0x94>
			timeout->func(timeout);
   207c8:	4608      	mov	r0, r1
}
   207ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
   207ce:	4718      	bx	r3
	return list->head == list;
   207d0:	4a11      	ldr	r2, [pc, #68]	; (20818 <_add_timeout+0x98>)
   207d2:	4610      	mov	r0, r2
   207d4:	f850 3f10 	ldr.w	r3, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   207d8:	4283      	cmp	r3, r0
   207da:	d10c      	bne.n	207f6 <_add_timeout+0x76>
	node->next = list;
   207dc:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   207de:	6953      	ldr	r3, [r2, #20]
   207e0:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   207e2:	6953      	ldr	r3, [r2, #20]
   207e4:	6019      	str	r1, [r3, #0]
	list->tail = node;
   207e6:	6151      	str	r1, [r2, #20]
   207e8:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
   207ea:	1b64      	subs	r4, r4, r5
   207ec:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
   207ee:	6954      	ldr	r4, [r2, #20]
   207f0:	42a3      	cmp	r3, r4
   207f2:	d0f3      	beq.n	207dc <_add_timeout+0x5c>
   207f4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   207f6:	2b00      	cmp	r3, #0
   207f8:	d0f0      	beq.n	207dc <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
   207fa:	690c      	ldr	r4, [r1, #16]
   207fc:	691d      	ldr	r5, [r3, #16]
   207fe:	42ac      	cmp	r4, r5
   20800:	dcf3      	bgt.n	207ea <_add_timeout+0x6a>
		node->prev = insert_point->prev;
   20802:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   20804:	1b2c      	subs	r4, r5, r4
   20806:	611c      	str	r4, [r3, #16]
   20808:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   2080a:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   2080c:	685a      	ldr	r2, [r3, #4]
   2080e:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   20810:	6059      	str	r1, [r3, #4]
   20812:	bd70      	pop	{r4, r5, r6, pc}
   20814:	bd70      	pop	{r4, r5, r6, pc}
   20816:	bf00      	nop
   20818:	20003478 	.word	0x20003478

0002081c <_remove_thread_from_ready_q>:
	node->prev->next = node->next;
   2081c:	e890 000a 	ldmia.w	r0, {r1, r3}
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   20820:	b510      	push	{r4, lr}
#if defined(CONFIG_MULTITHREADING) && !defined(CONFIG_SMP)
	int q_index = _get_ready_q_q_index(thread->base.prio);
   20822:	f990 200a 	ldrsb.w	r2, [r0, #10]
   20826:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
   20828:	6801      	ldr	r1, [r0, #0]
	sys_dlist_t *q = &_ready_q.q[q_index];
   2082a:	3214      	adds	r2, #20
   2082c:	604b      	str	r3, [r1, #4]
   2082e:	4b14      	ldr	r3, [pc, #80]	; (20880 <_remove_thread_from_ready_q+0x64>)
   20830:	00d2      	lsls	r2, r2, #3
   20832:	1d11      	adds	r1, r2, #4
	return list->head == list;
   20834:	441a      	add	r2, r3
   20836:	4419      	add	r1, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
   20838:	6852      	ldr	r2, [r2, #4]
   2083a:	428a      	cmp	r2, r1
   2083c:	d10f      	bne.n	2085e <_remove_thread_from_ready_q+0x42>
		clear_ready_q_prio_bit(thread->base.prio);
   2083e:	f990 100a 	ldrsb.w	r1, [r0, #10]
	return (prio + _NUM_COOP_PRIO) >> 5;
   20842:	3110      	adds	r1, #16
   20844:	114a      	asrs	r2, r1, #5
	*bmap &= ~_get_ready_q_prio_bit(prio);
   20846:	3206      	adds	r2, #6
   20848:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   2084c:	2401      	movs	r4, #1
   2084e:	f001 011f 	and.w	r1, r1, #31
   20852:	fa04 f101 	lsl.w	r1, r4, r1
   20856:	6894      	ldr	r4, [r2, #8]
   20858:	ea24 0401 	bic.w	r4, r4, r1
   2085c:	6094      	str	r4, [r2, #8]
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? get_ready_q_head() : *cache;
   2085e:	69da      	ldr	r2, [r3, #28]
   20860:	4290      	cmp	r0, r2
   20862:	d10b      	bne.n	2087c <_remove_thread_from_ready_q+0x60>
	return __builtin_ffs(op);
   20864:	6a19      	ldr	r1, [r3, #32]
   20866:	fa91 f2a1 	rbit	r2, r1
   2086a:	2900      	cmp	r1, #0
   2086c:	fab2 f282 	clz	r2, r2
   20870:	bf08      	it	eq
   20872:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   20876:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   2087a:	6a52      	ldr	r2, [r2, #36]	; 0x24
   2087c:	61da      	str	r2, [r3, #28]
   2087e:	bd10      	pop	{r4, pc}
   20880:	20003478 	.word	0x20003478

00020884 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
   20884:	b430      	push	{r4, r5}
   20886:	680c      	ldr	r4, [r1, #0]
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   20888:	42a1      	cmp	r1, r4
   2088a:	bf08      	it	eq
   2088c:	2400      	moveq	r4, #0
   2088e:	b314      	cbz	r4, 208d6 <_pend_thread+0x52>
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
   20890:	f990 500a 	ldrsb.w	r5, [r0, #10]
   20894:	f994 300a 	ldrsb.w	r3, [r4, #10]
   20898:	429d      	cmp	r5, r3
   2089a:	da16      	bge.n	208ca <_pend_thread+0x46>
		node->prev = insert_point->prev;
   2089c:	6863      	ldr	r3, [r4, #4]
   2089e:	6043      	str	r3, [r0, #4]
		node->next = insert_point;
   208a0:	6004      	str	r4, [r0, #0]
		insert_point->prev->next = node;
   208a2:	6863      	ldr	r3, [r4, #4]
   208a4:	6018      	str	r0, [r3, #0]
		insert_point->prev = node;
   208a6:	6060      	str	r0, [r4, #4]
	thread->base.thread_state |= _THREAD_PENDING;
   208a8:	7a43      	ldrb	r3, [r0, #9]
   208aa:	f043 0302 	orr.w	r3, r3, #2
   208ae:	7243      	strb	r3, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
   208b0:	1c53      	adds	r3, r2, #1
   208b2:	d017      	beq.n	208e4 <_pend_thread+0x60>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   208b4:	3209      	adds	r2, #9
   208b6:	230a      	movs	r3, #10
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
   208b8:	bc30      	pop	{r4, r5}
   208ba:	fbb2 f3f3 	udiv	r3, r2, r3
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   208be:	460a      	mov	r2, r1
   208c0:	3301      	adds	r3, #1
   208c2:	f100 0110 	add.w	r1, r0, #16
   208c6:	f7ff bf5b 	b.w	20780 <_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   208ca:	684b      	ldr	r3, [r1, #4]
   208cc:	429c      	cmp	r4, r3
   208ce:	d002      	beq.n	208d6 <_pend_thread+0x52>
   208d0:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   208d2:	2c00      	cmp	r4, #0
   208d4:	d1db      	bne.n	2088e <_pend_thread+0xa>
	node->next = list;
   208d6:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   208d8:	684b      	ldr	r3, [r1, #4]
   208da:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   208dc:	684b      	ldr	r3, [r1, #4]
   208de:	6018      	str	r0, [r3, #0]
	list->tail = node;
   208e0:	6048      	str	r0, [r1, #4]
   208e2:	e7e1      	b.n	208a8 <_pend_thread+0x24>
}
   208e4:	bc30      	pop	{r4, r5}
   208e6:	4770      	bx	lr

000208e8 <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
   208e8:	b570      	push	{r4, r5, r6, lr}
	_remove_thread_from_ready_q(_current);
   208ea:	4c06      	ldr	r4, [pc, #24]	; (20904 <_pend_current_thread+0x1c>)
{
   208ec:	460e      	mov	r6, r1
   208ee:	4605      	mov	r5, r0
	_remove_thread_from_ready_q(_current);
   208f0:	68a0      	ldr	r0, [r4, #8]
   208f2:	f7ff ff93 	bl	2081c <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
   208f6:	4632      	mov	r2, r6
   208f8:	4629      	mov	r1, r5
   208fa:	68a0      	ldr	r0, [r4, #8]
}
   208fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_pend_thread(_current, wait_q, timeout);
   20900:	f7ff bfc0 	b.w	20884 <_pend_thread>
   20904:	20003478 	.word	0x20003478

00020908 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
   20908:	4a09      	ldr	r2, [pc, #36]	; (20930 <__must_switch_threads+0x28>)
   2090a:	6a11      	ldr	r1, [r2, #32]

#ifdef CONFIG_KERNEL_DEBUG
	dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
   2090c:	6892      	ldr	r2, [r2, #8]
   2090e:	2900      	cmp	r1, #0
   20910:	fa91 f3a1 	rbit	r3, r1
   20914:	f992 000a 	ldrsb.w	r0, [r2, #10]
   20918:	fab3 f383 	clz	r3, r3
   2091c:	bf08      	it	eq
   2091e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
   20922:	3b10      	subs	r3, #16
#else
	return 0;
#endif
}
   20924:	4298      	cmp	r0, r3
   20926:	bfd4      	ite	le
   20928:	2000      	movle	r0, #0
   2092a:	2001      	movgt	r0, #1
   2092c:	4770      	bx	lr
   2092e:	bf00      	nop
   20930:	20003478 	.word	0x20003478

00020934 <_reschedule_threads>:
{
   20934:	b510      	push	{r4, lr}
	return _is_preempt(_current) && __must_switch_threads();
   20936:	4b0a      	ldr	r3, [pc, #40]	; (20960 <_reschedule_threads+0x2c>)
   20938:	689b      	ldr	r3, [r3, #8]
   2093a:	895b      	ldrh	r3, [r3, #10]
   2093c:	2b7f      	cmp	r3, #127	; 0x7f
   2093e:	4604      	mov	r4, r0
   20940:	d802      	bhi.n	20948 <_reschedule_threads+0x14>
   20942:	f7ff ffe1 	bl	20908 <__must_switch_threads>
   20946:	b910      	cbnz	r0, 2094e <_reschedule_threads+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   20948:	f384 8811 	msr	BASEPRI, r4
   2094c:	bd10      	pop	{r4, pc}
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   2094e:	4b05      	ldr	r3, [pc, #20]	; (20964 <_reschedule_threads+0x30>)
   20950:	2200      	movs	r2, #0
   20952:	4620      	mov	r0, r4
}
   20954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
   20958:	601a      	str	r2, [r3, #0]
   2095a:	f7e0 ba45 	b.w	de8 <__swap>
   2095e:	bf00      	nop
   20960:	20003478 	.word	0x20003478
   20964:	20005294 	.word	0x20005294

00020968 <k_sched_unlock>:
	__asm__ volatile(
   20968:	f04f 0320 	mov.w	r3, #32
   2096c:	f3ef 8011 	mrs	r0, BASEPRI
   20970:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
   20974:	4b03      	ldr	r3, [pc, #12]	; (20984 <k_sched_unlock+0x1c>)
   20976:	689a      	ldr	r2, [r3, #8]
   20978:	7ad3      	ldrb	r3, [r2, #11]
   2097a:	3301      	adds	r3, #1
   2097c:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
   2097e:	f7ff bfd9 	b.w	20934 <_reschedule_threads>
   20982:	bf00      	nop
   20984:	20003478 	.word	0x20003478

00020988 <_move_thread_to_end_of_prio_q>:
	int q_index = _get_ready_q_q_index(thread->base.prio);
   20988:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   2098c:	4a12      	ldr	r2, [pc, #72]	; (209d8 <_move_thread_to_end_of_prio_q+0x50>)
{
   2098e:	b530      	push	{r4, r5, lr}
	sys_dlist_t *q = &_ready_q.q[q_index];
   20990:	3314      	adds	r3, #20
   20992:	00db      	lsls	r3, r3, #3
   20994:	1d19      	adds	r1, r3, #4
   20996:	4411      	add	r1, r2
	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
   20998:	684c      	ldr	r4, [r1, #4]
   2099a:	42a0      	cmp	r0, r4
   2099c:	d01b      	beq.n	209d6 <_move_thread_to_end_of_prio_q+0x4e>
	node->prev->next = node->next;
   2099e:	6844      	ldr	r4, [r0, #4]
   209a0:	6805      	ldr	r5, [r0, #0]
   209a2:	6025      	str	r5, [r4, #0]
	node->next->prev = node->prev;
   209a4:	6805      	ldr	r5, [r0, #0]
	node->prev = list->tail;
   209a6:	4413      	add	r3, r2
	node->next->prev = node->prev;
   209a8:	606c      	str	r4, [r5, #4]
	node->next = list;
   209aa:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   209ac:	6899      	ldr	r1, [r3, #8]
   209ae:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
   209b0:	6899      	ldr	r1, [r3, #8]
   209b2:	6008      	str	r0, [r1, #0]
	list->tail = node;
   209b4:	6098      	str	r0, [r3, #8]
	*cache = *cache == thread ? get_ready_q_head() : *cache;
   209b6:	69d3      	ldr	r3, [r2, #28]
   209b8:	4298      	cmp	r0, r3
   209ba:	d10b      	bne.n	209d4 <_move_thread_to_end_of_prio_q+0x4c>
	return __builtin_ffs(op);
   209bc:	6a11      	ldr	r1, [r2, #32]
   209be:	fa91 f3a1 	rbit	r3, r1
   209c2:	2900      	cmp	r1, #0
   209c4:	fab3 f383 	clz	r3, r3
   209c8:	bf08      	it	eq
   209ca:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   209ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   209d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   209d4:	61d3      	str	r3, [r2, #28]
   209d6:	bd30      	pop	{r4, r5, pc}
   209d8:	20003478 	.word	0x20003478

000209dc <_impl_k_yield>:
{
   209dc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   209de:	f04f 0320 	mov.w	r3, #32
   209e2:	f3ef 8511 	mrs	r5, BASEPRI
   209e6:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
   209ea:	4c09      	ldr	r4, [pc, #36]	; (20a10 <_impl_k_yield+0x34>)
   209ec:	68a0      	ldr	r0, [r4, #8]
   209ee:	f7ff ffcb 	bl	20988 <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
   209f2:	68a2      	ldr	r2, [r4, #8]
   209f4:	69e3      	ldr	r3, [r4, #28]
   209f6:	429a      	cmp	r2, r3
   209f8:	d102      	bne.n	20a00 <_impl_k_yield+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   209fa:	f385 8811 	msr	BASEPRI, r5
   209fe:	bd38      	pop	{r3, r4, r5, pc}
	_time_slice_elapsed = 0;
   20a00:	4b04      	ldr	r3, [pc, #16]	; (20a14 <_impl_k_yield+0x38>)
   20a02:	2200      	movs	r2, #0
   20a04:	601a      	str	r2, [r3, #0]
   20a06:	4628      	mov	r0, r5
}
   20a08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   20a0c:	f7e0 b9ec 	b.w	de8 <__swap>
   20a10:	20003478 	.word	0x20003478
   20a14:	20005294 	.word	0x20005294

00020a18 <_impl_k_current_get>:
}
   20a18:	4b01      	ldr	r3, [pc, #4]	; (20a20 <_impl_k_current_get+0x8>)
   20a1a:	6898      	ldr	r0, [r3, #8]
   20a1c:	4770      	bx	lr
   20a1e:	bf00      	nop
   20a20:	20003478 	.word	0x20003478

00020a24 <_is_thread_time_slicing>:
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   20a24:	4b0d      	ldr	r3, [pc, #52]	; (20a5c <_is_thread_time_slicing+0x38>)
   20a26:	681b      	ldr	r3, [r3, #0]
   20a28:	2b00      	cmp	r3, #0
   20a2a:	dd14      	ble.n	20a56 <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
   20a2c:	4b0c      	ldr	r3, [pc, #48]	; (20a60 <_is_thread_time_slicing+0x3c>)
   20a2e:	681b      	ldr	r3, [r3, #0]
   20a30:	4298      	cmp	r0, r3
   20a32:	d010      	beq.n	20a56 <_is_thread_time_slicing+0x32>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   20a34:	4a0b      	ldr	r2, [pc, #44]	; (20a64 <_is_thread_time_slicing+0x40>)
   20a36:	f990 300a 	ldrsb.w	r3, [r0, #10]
   20a3a:	6812      	ldr	r2, [r2, #0]
   20a3c:	4293      	cmp	r3, r2
   20a3e:	db0a      	blt.n	20a56 <_is_thread_time_slicing+0x32>
	return list->head != list->tail;
   20a40:	f103 0214 	add.w	r2, r3, #20
   20a44:	4b08      	ldr	r3, [pc, #32]	; (20a68 <_is_thread_time_slicing+0x44>)
   20a46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   20a4a:	6858      	ldr	r0, [r3, #4]
   20a4c:	689b      	ldr	r3, [r3, #8]
   20a4e:	1ac0      	subs	r0, r0, r3
   20a50:	bf18      	it	ne
   20a52:	2001      	movne	r0, #1
	return sys_dlist_has_multiple_nodes(q);
   20a54:	4770      	bx	lr
		return 0;
   20a56:	2000      	movs	r0, #0
}
   20a58:	4770      	bx	lr
   20a5a:	bf00      	nop
   20a5c:	2000359c 	.word	0x2000359c
   20a60:	00023ac4 	.word	0x00023ac4
   20a64:	200035a0 	.word	0x200035a0
   20a68:	20003478 	.word	0x20003478

00020a6c <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
   20a6c:	4b01      	ldr	r3, [pc, #4]	; (20a74 <_update_time_slice_before_swap+0x8>)
   20a6e:	2200      	movs	r2, #0
   20a70:	601a      	str	r2, [r3, #0]
   20a72:	4770      	bx	lr
   20a74:	20005294 	.word	0x20005294

00020a78 <_unpend_first_thread>:
	if (_handling_timeouts) {
   20a78:	4a10      	ldr	r2, [pc, #64]	; (20abc <_unpend_first_thread+0x44>)
   20a7a:	6812      	ldr	r2, [r2, #0]
{
   20a7c:	4603      	mov	r3, r0
   20a7e:	6800      	ldr	r0, [r0, #0]
	if (_handling_timeouts) {
   20a80:	b16a      	cbz	r2, 20a9e <_unpend_first_thread+0x26>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20a82:	4283      	cmp	r3, r0
   20a84:	bf08      	it	eq
   20a86:	2000      	moveq	r0, #0
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   20a88:	b908      	cbnz	r0, 20a8e <_unpend_first_thread+0x16>
   20a8a:	2000      	movs	r0, #0
   20a8c:	4770      	bx	lr
			if (_is_thread_timeout_expired(thread)) {
   20a8e:	6a02      	ldr	r2, [r0, #32]
   20a90:	3202      	adds	r2, #2
   20a92:	d107      	bne.n	20aa4 <_unpend_first_thread+0x2c>
	return (node == list->tail) ? NULL : node->next;
   20a94:	685a      	ldr	r2, [r3, #4]
   20a96:	4290      	cmp	r0, r2
   20a98:	d0f7      	beq.n	20a8a <_unpend_first_thread+0x12>
   20a9a:	6800      	ldr	r0, [r0, #0]
   20a9c:	e7f4      	b.n	20a88 <_unpend_first_thread+0x10>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20a9e:	4283      	cmp	r3, r0
   20aa0:	d00a      	beq.n	20ab8 <_unpend_first_thread+0x40>
	if (thread) {
   20aa2:	b150      	cbz	r0, 20aba <_unpend_first_thread+0x42>
	node->prev->next = node->next;
   20aa4:	e890 000c 	ldmia.w	r0, {r2, r3}
   20aa8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   20aaa:	6802      	ldr	r2, [r0, #0]
   20aac:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   20aae:	7a43      	ldrb	r3, [r0, #9]
   20ab0:	f023 0302 	bic.w	r3, r3, #2
   20ab4:	7243      	strb	r3, [r0, #9]
   20ab6:	4770      	bx	lr
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20ab8:	4610      	mov	r0, r2
		_unpend_thread(thread);
	}

	return thread;
}
   20aba:	4770      	bx	lr
   20abc:	20005290 	.word	0x20005290

00020ac0 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   20ac0:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
   20ac4:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   20ac6:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   20ac8:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   20aca:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
   20acc:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   20ace:	6143      	str	r3, [r0, #20]
   20ad0:	4770      	bx	lr
	...

00020ad4 <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   20ad4:	b570      	push	{r4, r5, r6, lr}
   20ad6:	4605      	mov	r5, r0
	__asm__ volatile(
   20ad8:	f04f 0320 	mov.w	r3, #32
   20adc:	f3ef 8611 	mrs	r6, BASEPRI
   20ae0:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   20ae4:	f7ff ffc8 	bl	20a78 <_unpend_first_thread>
	if (!thread) {
   20ae8:	4604      	mov	r4, r0
   20aea:	b998      	cbnz	r0, 20b14 <_impl_k_sem_give+0x40>
	sem->count += (sem->count != sem->limit);
   20aec:	68ab      	ldr	r3, [r5, #8]
   20aee:	68ea      	ldr	r2, [r5, #12]
   20af0:	429a      	cmp	r2, r3
   20af2:	bf18      	it	ne
   20af4:	3301      	addne	r3, #1
   20af6:	60ab      	str	r3, [r5, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
   20af8:	2102      	movs	r1, #2
   20afa:	f105 0010 	add.w	r0, r5, #16
   20afe:	f000 fe01 	bl	21704 <_handle_obj_poll_events>
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
   20b02:	2800      	cmp	r0, #0
   20b04:	d03b      	beq.n	20b7e <_impl_k_sem_give+0xaa>
	_update_time_slice_before_swap();
   20b06:	f7ff ffb1 	bl	20a6c <_update_time_slice_before_swap>
	return __swap(key);
   20b0a:	4630      	mov	r0, r6
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
   20b0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20b10:	f7e0 b96a 	b.w	de8 <__swap>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   20b14:	6a01      	ldr	r1, [r0, #32]
	return _abort_timeout(&thread->base.timeout);
   20b16:	f100 0210 	add.w	r2, r0, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   20b1a:	1c48      	adds	r0, r1, #1
   20b1c:	d00f      	beq.n	20b3e <_impl_k_sem_give+0x6a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   20b1e:	4b1b      	ldr	r3, [pc, #108]	; (20b8c <_impl_k_sem_give+0xb8>)
   20b20:	695b      	ldr	r3, [r3, #20]
   20b22:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
   20b24:	bf1f      	itttt	ne
   20b26:	6922      	ldrne	r2, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   20b28:	6913      	ldrne	r3, [r2, #16]
   20b2a:	185b      	addne	r3, r3, r1
   20b2c:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   20b2e:	6963      	ldr	r3, [r4, #20]
   20b30:	6922      	ldr	r2, [r4, #16]
   20b32:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   20b34:	6922      	ldr	r2, [r4, #16]
   20b36:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   20b38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20b3c:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20b3e:	7a63      	ldrb	r3, [r4, #9]
   20b40:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   20b44:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20b48:	7262      	strb	r2, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   20b4a:	d102      	bne.n	20b52 <_impl_k_sem_give+0x7e>
   20b4c:	6a23      	ldr	r3, [r4, #32]
   20b4e:	3301      	adds	r3, #1
   20b50:	d018      	beq.n	20b84 <_impl_k_sem_give+0xb0>
   20b52:	2300      	movs	r3, #0
   20b54:	6663      	str	r3, [r4, #100]	; 0x64
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   20b56:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   20b5a:	2b0d      	cmp	r3, #13
   20b5c:	d80f      	bhi.n	20b7e <_impl_k_sem_give+0xaa>
   20b5e:	b11b      	cbz	r3, 20b68 <_impl_k_sem_give+0x94>
   20b60:	4b0b      	ldr	r3, [pc, #44]	; (20b90 <_impl_k_sem_give+0xbc>)
   20b62:	685b      	ldr	r3, [r3, #4]
   20b64:	051b      	lsls	r3, r3, #20
   20b66:	d50a      	bpl.n	20b7e <_impl_k_sem_give+0xaa>
	return _is_preempt(_current) && __must_switch_threads();
   20b68:	4b08      	ldr	r3, [pc, #32]	; (20b8c <_impl_k_sem_give+0xb8>)
   20b6a:	689b      	ldr	r3, [r3, #8]
   20b6c:	895b      	ldrh	r3, [r3, #10]
   20b6e:	2b7f      	cmp	r3, #127	; 0x7f
   20b70:	d805      	bhi.n	20b7e <_impl_k_sem_give+0xaa>
   20b72:	f7ff fec9 	bl	20908 <__must_switch_threads>
   20b76:	3000      	adds	r0, #0
   20b78:	bf18      	it	ne
   20b7a:	2001      	movne	r0, #1
   20b7c:	e7c1      	b.n	20b02 <_impl_k_sem_give+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   20b7e:	f386 8811 	msr	BASEPRI, r6
   20b82:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   20b84:	4620      	mov	r0, r4
   20b86:	f7ff fdc5 	bl	20714 <_add_thread_to_ready_q>
   20b8a:	e7e2      	b.n	20b52 <_impl_k_sem_give+0x7e>
   20b8c:	20003478 	.word	0x20003478
   20b90:	e000ed00 	.word	0xe000ed00

00020b94 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   20b94:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   20b96:	f04f 0320 	mov.w	r3, #32
   20b9a:	f3ef 8411 	mrs	r4, BASEPRI
   20b9e:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   20ba2:	6883      	ldr	r3, [r0, #8]
   20ba4:	b12b      	cbz	r3, 20bb2 <_impl_k_sem_take+0x1e>
		sem->count--;
   20ba6:	3b01      	subs	r3, #1
   20ba8:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   20baa:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
   20bae:	2000      	movs	r0, #0
   20bb0:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (timeout == K_NO_WAIT) {
   20bb2:	b921      	cbnz	r1, 20bbe <_impl_k_sem_take+0x2a>
   20bb4:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return -EBUSY;
   20bb8:	f06f 000f 	mvn.w	r0, #15
   20bbc:	bd38      	pop	{r3, r4, r5, pc}
	}

	_pend_current_thread(&sem->wait_q, timeout);
   20bbe:	f7ff fe93 	bl	208e8 <_pend_current_thread>
	_update_time_slice_before_swap();
   20bc2:	f7ff ff53 	bl	20a6c <_update_time_slice_before_swap>
	return __swap(key);
   20bc6:	4620      	mov	r0, r4

	return _Swap(key);
}
   20bc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   20bcc:	f7e0 b90c 	b.w	de8 <__swap>

00020bd0 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
   20bd0:	4b03      	ldr	r3, [pc, #12]	; (20be0 <_impl_k_uptime_get_32+0x10>)
   20bd2:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
   20bd6:	230a      	movs	r3, #10
   20bd8:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
   20bdc:	4770      	bx	lr
   20bde:	bf00      	nop
   20be0:	20005298 	.word	0x20005298

00020be4 <_tick_get>:
	__asm__ volatile(
   20be4:	f04f 0220 	mov.w	r2, #32
   20be8:	f3ef 8311 	mrs	r3, BASEPRI
   20bec:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   20bf0:	4a02      	ldr	r2, [pc, #8]	; (20bfc <_tick_get+0x18>)
   20bf2:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   20bf6:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   20bfa:	4770      	bx	lr
   20bfc:	20005298 	.word	0x20005298

00020c00 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
   20c00:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   20c02:	f7ff ffef 	bl	20be4 <_tick_get>
   20c06:	240a      	movs	r4, #10
   20c08:	fba0 2304 	umull	r2, r3, r0, r4
   20c0c:	fb04 3301 	mla	r3, r4, r1, r3
}
   20c10:	4610      	mov	r0, r2
   20c12:	4619      	mov	r1, r3
   20c14:	bd10      	pop	{r4, pc}
	...

00020c18 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   20c18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c1c:	4607      	mov	r7, r0
	__asm__ volatile(
   20c1e:	f04f 0320 	mov.w	r3, #32
   20c22:	f3ef 8011 	mrs	r0, BASEPRI
   20c26:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   20c2a:	4963      	ldr	r1, [pc, #396]	; (20db8 <_nano_sys_clock_tick_announce+0x1a0>)
   20c2c:	e9d1 4500 	ldrd	r4, r5, [r1]
   20c30:	19e2      	adds	r2, r4, r7
   20c32:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
   20c36:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   20c3a:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   20c3e:	466e      	mov	r6, sp
   20c40:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
   20c44:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
   20c48:	f04f 0320 	mov.w	r3, #32
   20c4c:	f3ef 8011 	mrs	r0, BASEPRI
   20c50:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   20c54:	4c59      	ldr	r4, [pc, #356]	; (20dbc <_nano_sys_clock_tick_announce+0x1a4>)
   20c56:	4621      	mov	r1, r4
   20c58:	4602      	mov	r2, r0
   20c5a:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20c5e:	428b      	cmp	r3, r1
   20c60:	d000      	beq.n	20c64 <_nano_sys_clock_tick_announce+0x4c>
	if (!next) {
   20c62:	b9fb      	cbnz	r3, 20ca4 <_nano_sys_clock_tick_announce+0x8c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   20c64:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
   20c68:	68a0      	ldr	r0, [r4, #8]
   20c6a:	f7ff fedb 	bl	20a24 <_is_thread_time_slicing>
   20c6e:	b1b0      	cbz	r0, 20c9e <_nano_sys_clock_tick_announce+0x86>
	_time_slice_elapsed += __ticks_to_ms(ticks);
   20c70:	4a53      	ldr	r2, [pc, #332]	; (20dc0 <_nano_sys_clock_tick_announce+0x1a8>)
   20c72:	6811      	ldr	r1, [r2, #0]
   20c74:	230a      	movs	r3, #10
   20c76:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
   20c7a:	4b52      	ldr	r3, [pc, #328]	; (20dc4 <_nano_sys_clock_tick_announce+0x1ac>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
   20c7c:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   20c7e:	681b      	ldr	r3, [r3, #0]
   20c80:	429f      	cmp	r7, r3
   20c82:	db0c      	blt.n	20c9e <_nano_sys_clock_tick_announce+0x86>
		_time_slice_elapsed = 0;
   20c84:	2300      	movs	r3, #0
   20c86:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   20c88:	f04f 0320 	mov.w	r3, #32
   20c8c:	f3ef 8511 	mrs	r5, BASEPRI
   20c90:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
   20c94:	68a0      	ldr	r0, [r4, #8]
   20c96:	f7ff fe77 	bl	20988 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   20c9a:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   20c9e:	b003      	add	sp, #12
   20ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
   20ca4:	4d48      	ldr	r5, [pc, #288]	; (20dc8 <_nano_sys_clock_tick_announce+0x1b0>)
   20ca6:	2101      	movs	r1, #1
   20ca8:	6029      	str	r1, [r5, #0]
   20caa:	46ab      	mov	fp, r5
   20cac:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = 0;
   20cae:	f04f 0e00 	mov.w	lr, #0
			timeout->delta_ticks_from_prev = _EXPIRED;
   20cb2:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
   20cb6:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
   20cb8:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
   20cba:	bfaa      	itet	ge
   20cbc:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
   20cc0:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
   20cc4:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
   20cc8:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   20cca:	6960      	ldr	r0, [r4, #20]
		if (timeout->delta_ticks_from_prev == 0) {
   20ccc:	691d      	ldr	r5, [r3, #16]
   20cce:	4298      	cmp	r0, r3
   20cd0:	bf14      	ite	ne
   20cd2:	6818      	ldrne	r0, [r3, #0]
   20cd4:	2000      	moveq	r0, #0
   20cd6:	b9d5      	cbnz	r5, 20d0e <_nano_sys_clock_tick_announce+0xf6>
	node->prev->next = node->next;
   20cd8:	e893 0220 	ldmia.w	r3, {r5, r9}
   20cdc:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
   20ce0:	681d      	ldr	r5, [r3, #0]
   20ce2:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
   20ce6:	9d00      	ldr	r5, [sp, #0]
	node->prev = list;
   20ce8:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
   20cec:	9d00      	ldr	r5, [sp, #0]
	list->head = node;
   20cee:	9300      	str	r3, [sp, #0]
	list->head->prev = node;
   20cf0:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
   20cf2:	f8c3 c010 	str.w	ip, [r3, #16]
   20cf6:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   20cfa:	f04f 0320 	mov.w	r3, #32
   20cfe:	f3ef 8211 	mrs	r2, BASEPRI
   20d02:	f383 8811 	msr	BASEPRI, r3
	while (next) {
   20d06:	4603      	mov	r3, r0
   20d08:	2800      	cmp	r0, #0
   20d0a:	d1d4      	bne.n	20cb6 <_nano_sys_clock_tick_announce+0x9e>
   20d0c:	e001      	b.n	20d12 <_nano_sys_clock_tick_announce+0xfa>
		} else if (ticks <= 0) {
   20d0e:	2900      	cmp	r1, #0
   20d10:	dcf1      	bgt.n	20cf6 <_nano_sys_clock_tick_announce+0xde>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   20d12:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   20d16:	9800      	ldr	r0, [sp, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20d18:	42b0      	cmp	r0, r6
   20d1a:	d103      	bne.n	20d24 <_nano_sys_clock_tick_announce+0x10c>
	_handling_timeouts = 0;
   20d1c:	2300      	movs	r3, #0
   20d1e:	f8cb 3000 	str.w	r3, [fp]
   20d22:	e7a1      	b.n	20c68 <_nano_sys_clock_tick_announce+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   20d24:	2800      	cmp	r0, #0
   20d26:	d0f9      	beq.n	20d1c <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
   20d28:	9b01      	ldr	r3, [sp, #4]
   20d2a:	4298      	cmp	r0, r3
   20d2c:	d101      	bne.n	20d32 <_nano_sys_clock_tick_announce+0x11a>
   20d2e:	2600      	movs	r6, #0
   20d30:	e000      	b.n	20d34 <_nano_sys_clock_tick_announce+0x11c>
   20d32:	6806      	ldr	r6, [r0, #0]
	timeout->delta_ticks_from_prev = _INACTIVE;
   20d34:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
   20d38:	f04f 0900 	mov.w	r9, #0
	node->prev->next = node->next;
   20d3c:	e890 000c 	ldmia.w	r0, {r2, r3}
   20d40:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   20d42:	6802      	ldr	r2, [r0, #0]
   20d44:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
   20d46:	6883      	ldr	r3, [r0, #8]
	__asm__ volatile(
   20d48:	f04f 0220 	mov.w	r2, #32
   20d4c:	f3ef 8a11 	mrs	sl, BASEPRI
   20d50:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   20d54:	f8c0 8010 	str.w	r8, [r0, #16]
	if (thread) {
   20d58:	b1fb      	cbz	r3, 20d9a <_nano_sys_clock_tick_announce+0x182>
	if (timeout_obj->wait_q) {
   20d5a:	68c2      	ldr	r2, [r0, #12]
   20d5c:	b152      	cbz	r2, 20d74 <_nano_sys_clock_tick_announce+0x15c>
	node->prev->next = node->next;
   20d5e:	6859      	ldr	r1, [r3, #4]
   20d60:	681a      	ldr	r2, [r3, #0]
   20d62:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
   20d64:	681a      	ldr	r2, [r3, #0]
   20d66:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   20d68:	7a5a      	ldrb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
   20d6a:	f8c3 901c 	str.w	r9, [r3, #28]
   20d6e:	f022 0202 	bic.w	r2, r2, #2
   20d72:	725a      	strb	r2, [r3, #9]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20d74:	7a5a      	ldrb	r2, [r3, #9]
   20d76:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
   20d7a:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20d7e:	7259      	strb	r1, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   20d80:	d102      	bne.n	20d88 <_nano_sys_clock_tick_announce+0x170>
   20d82:	6a1a      	ldr	r2, [r3, #32]
   20d84:	3201      	adds	r2, #1
   20d86:	d013      	beq.n	20db0 <_nano_sys_clock_tick_announce+0x198>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   20d88:	f38a 8811 	msr	BASEPRI, sl
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   20d8c:	2e00      	cmp	r6, #0
   20d8e:	d0c5      	beq.n	20d1c <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
   20d90:	9b01      	ldr	r3, [sp, #4]
   20d92:	42b3      	cmp	r3, r6
   20d94:	d108      	bne.n	20da8 <_nano_sys_clock_tick_announce+0x190>
   20d96:	2300      	movs	r3, #0
   20d98:	e007      	b.n	20daa <_nano_sys_clock_tick_announce+0x192>
   20d9a:	f38a 8811 	msr	BASEPRI, sl
		if (timeout->func) {
   20d9e:	6943      	ldr	r3, [r0, #20]
   20da0:	2b00      	cmp	r3, #0
   20da2:	d0f3      	beq.n	20d8c <_nano_sys_clock_tick_announce+0x174>
			timeout->func(timeout);
   20da4:	4798      	blx	r3
   20da6:	e7f1      	b.n	20d8c <_nano_sys_clock_tick_announce+0x174>
   20da8:	6833      	ldr	r3, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   20daa:	4630      	mov	r0, r6
   20dac:	461e      	mov	r6, r3
   20dae:	e7c5      	b.n	20d3c <_nano_sys_clock_tick_announce+0x124>
		_add_thread_to_ready_q(thread);
   20db0:	4618      	mov	r0, r3
   20db2:	f7ff fcaf 	bl	20714 <_add_thread_to_ready_q>
   20db6:	e7e7      	b.n	20d88 <_nano_sys_clock_tick_announce+0x170>
   20db8:	20005298 	.word	0x20005298
   20dbc:	20003478 	.word	0x20003478
   20dc0:	20005294 	.word	0x20005294
   20dc4:	2000359c 	.word	0x2000359c
   20dc8:	20005290 	.word	0x20005290

00020dcc <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   20dcc:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   20dce:	f44f 6280 	mov.w	r2, #1024	; 0x400
   20dd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20dd6:	4903      	ldr	r1, [pc, #12]	; (20de4 <k_sys_work_q_init+0x18>)
   20dd8:	4803      	ldr	r0, [pc, #12]	; (20de8 <k_sys_work_q_init+0x1c>)
   20dda:	f000 f98d 	bl	210f8 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   20dde:	2000      	movs	r0, #0
   20de0:	bd08      	pop	{r3, pc}
   20de2:	bf00      	nop
   20de4:	2000d9c8 	.word	0x2000d9c8
   20de8:	200052a0 	.word	0x200052a0

00020dec <_is_thread_ready>:
	return !(_is_thread_prevented_from_running(thread) ||
   20dec:	7a43      	ldrb	r3, [r0, #9]
   20dee:	06da      	lsls	r2, r3, #27
   20df0:	d104      	bne.n	20dfc <_is_thread_ready+0x10>
   20df2:	6a00      	ldr	r0, [r0, #32]
   20df4:	1c43      	adds	r3, r0, #1
   20df6:	4258      	negs	r0, r3
   20df8:	4158      	adcs	r0, r3
   20dfa:	4770      	bx	lr
   20dfc:	2000      	movs	r0, #0
}
   20dfe:	4770      	bx	lr

00020e00 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   20e00:	6903      	ldr	r3, [r0, #16]
   20e02:	1c5a      	adds	r2, r3, #1
   20e04:	d011      	beq.n	20e2a <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   20e06:	4a0a      	ldr	r2, [pc, #40]	; (20e30 <_abort_timeout+0x30>)
   20e08:	6952      	ldr	r2, [r2, #20]
   20e0a:	4290      	cmp	r0, r2
   20e0c:	bf1f      	itttt	ne
   20e0e:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   20e10:	690a      	ldrne	r2, [r1, #16]
   20e12:	189b      	addne	r3, r3, r2
   20e14:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   20e16:	e890 000c 	ldmia.w	r0, {r2, r3}
   20e1a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   20e1c:	6802      	ldr	r2, [r0, #0]
   20e1e:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   20e20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20e24:	6103      	str	r3, [r0, #16]
	return 0;
   20e26:	2000      	movs	r0, #0
   20e28:	4770      	bx	lr
		return _INACTIVE;
   20e2a:	4618      	mov	r0, r3
}
   20e2c:	4770      	bx	lr
   20e2e:	bf00      	nop
   20e30:	20003478 	.word	0x20003478

00020e34 <schedule_new_thread.part.13>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   20e34:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   20e36:	f04f 0320 	mov.w	r3, #32
   20e3a:	f3ef 8611 	mrs	r6, BASEPRI
   20e3e:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   20e42:	4a19      	ldr	r2, [pc, #100]	; (20ea8 <schedule_new_thread.part.13+0x74>)
	timeout->thread = thread;
   20e44:	6180      	str	r0, [r0, #24]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   20e46:	230a      	movs	r3, #10
   20e48:	3109      	adds	r1, #9
   20e4a:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   20e4e:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   20e50:	6201      	str	r1, [r0, #32]
   20e52:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
   20e54:	2300      	movs	r3, #0
   20e56:	61c3      	str	r3, [r0, #28]
   20e58:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20e5c:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   20e5e:	f100 0510 	add.w	r5, r0, #16
   20e62:	d108      	bne.n	20e76 <schedule_new_thread.part.13+0x42>
	node->next = list;
   20e64:	6101      	str	r1, [r0, #16]
	node->prev = list->tail;
   20e66:	6953      	ldr	r3, [r2, #20]
   20e68:	6143      	str	r3, [r0, #20]
	list->tail->next = node;
   20e6a:	6953      	ldr	r3, [r2, #20]
   20e6c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   20e6e:	6155      	str	r5, [r2, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   20e70:	f386 8811 	msr	BASEPRI, r6
   20e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   20e76:	2b00      	cmp	r3, #0
   20e78:	d0f4      	beq.n	20e64 <schedule_new_thread.part.13+0x30>
   20e7a:	f8d2 e014 	ldr.w	lr, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
   20e7e:	6a04      	ldr	r4, [r0, #32]
   20e80:	691f      	ldr	r7, [r3, #16]
   20e82:	42bc      	cmp	r4, r7
   20e84:	dc08      	bgt.n	20e98 <schedule_new_thread.part.13+0x64>
		node->prev = insert_point->prev;
   20e86:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   20e88:	1b3c      	subs	r4, r7, r4
   20e8a:	611c      	str	r4, [r3, #16]
   20e8c:	6142      	str	r2, [r0, #20]
		node->next = insert_point;
   20e8e:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   20e90:	685a      	ldr	r2, [r3, #4]
   20e92:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   20e94:	605d      	str	r5, [r3, #4]
   20e96:	e7eb      	b.n	20e70 <schedule_new_thread.part.13+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
   20e98:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
   20e9a:	4573      	cmp	r3, lr
   20e9c:	6204      	str	r4, [r0, #32]
   20e9e:	d0e1      	beq.n	20e64 <schedule_new_thread.part.13+0x30>
   20ea0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   20ea2:	2b00      	cmp	r3, #0
   20ea4:	d1eb      	bne.n	20e7e <schedule_new_thread.part.13+0x4a>
   20ea6:	e7dd      	b.n	20e64 <schedule_new_thread.part.13+0x30>
   20ea8:	20003478 	.word	0x20003478

00020eac <k_is_in_isr>:
   20eac:	f3ef 8005 	mrs	r0, IPSR
   20eb0:	280d      	cmp	r0, #13
   20eb2:	d807      	bhi.n	20ec4 <k_is_in_isr+0x18>
   20eb4:	b138      	cbz	r0, 20ec6 <k_is_in_isr+0x1a>
   20eb6:	4b04      	ldr	r3, [pc, #16]	; (20ec8 <k_is_in_isr+0x1c>)
   20eb8:	6858      	ldr	r0, [r3, #4]
   20eba:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   20ebe:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   20ec2:	4770      	bx	lr
   20ec4:	2001      	movs	r0, #1
}
   20ec6:	4770      	bx	lr
   20ec8:	e000ed00 	.word	0xe000ed00

00020ecc <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   20ecc:	4b02      	ldr	r3, [pc, #8]	; (20ed8 <_is_thread_essential+0xc>)
   20ece:	689b      	ldr	r3, [r3, #8]
   20ed0:	7a18      	ldrb	r0, [r3, #8]
}
   20ed2:	f000 0001 	and.w	r0, r0, #1
   20ed6:	4770      	bx	lr
   20ed8:	20003478 	.word	0x20003478

00020edc <_thread_entry>:
{
   20edc:	b508      	push	{r3, lr}
   20ede:	4604      	mov	r4, r0
   20ee0:	4608      	mov	r0, r1
   20ee2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   20ee4:	461a      	mov	r2, r3
   20ee6:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   20ee8:	f7ff fd96 	bl	20a18 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   20eec:	f7e0 fa30 	bl	1350 <_impl_k_thread_abort>

00020ef0 <_impl_k_thread_start>:
{
   20ef0:	b510      	push	{r4, lr}
   20ef2:	4601      	mov	r1, r0
	__asm__ volatile(
   20ef4:	f04f 0320 	mov.w	r3, #32
   20ef8:	f3ef 8411 	mrs	r4, BASEPRI
   20efc:	f383 8811 	msr	BASEPRI, r3
   20f00:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
   20f02:	075a      	lsls	r2, r3, #29
   20f04:	d402      	bmi.n	20f0c <_impl_k_thread_start+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   20f06:	f384 8811 	msr	BASEPRI, r4
   20f0a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20f0c:	f023 0304 	bic.w	r3, r3, #4
   20f10:	7243      	strb	r3, [r0, #9]
	if (_is_thread_ready(thread)) {
   20f12:	f7ff ff6b 	bl	20dec <_is_thread_ready>
   20f16:	2800      	cmp	r0, #0
   20f18:	d0f5      	beq.n	20f06 <_impl_k_thread_start+0x16>
		_add_thread_to_ready_q(thread);
   20f1a:	4608      	mov	r0, r1
   20f1c:	f7ff fbfa 	bl	20714 <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
   20f20:	4b07      	ldr	r3, [pc, #28]	; (20f40 <_impl_k_thread_start+0x50>)
   20f22:	689b      	ldr	r3, [r3, #8]
   20f24:	895b      	ldrh	r3, [r3, #10]
   20f26:	2b7f      	cmp	r3, #127	; 0x7f
   20f28:	d8ed      	bhi.n	20f06 <_impl_k_thread_start+0x16>
   20f2a:	f7ff fced 	bl	20908 <__must_switch_threads>
   20f2e:	2800      	cmp	r0, #0
   20f30:	d0e9      	beq.n	20f06 <_impl_k_thread_start+0x16>
	_update_time_slice_before_swap();
   20f32:	f7ff fd9b 	bl	20a6c <_update_time_slice_before_swap>
	return __swap(key);
   20f36:	4620      	mov	r0, r4
}
   20f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20f3c:	f7df bf54 	b.w	de8 <__swap>
   20f40:	20003478 	.word	0x20003478

00020f44 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   20f44:	b410      	push	{r4}

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
   20f46:	bc10      	pop	{r4}
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   20f48:	f7e0 b95a 	b.w	1200 <_new_thread>

00020f4c <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   20f4c:	b570      	push	{r4, r5, r6, lr}
   20f4e:	b086      	sub	sp, #24
   20f50:	4604      	mov	r4, r0
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   20f52:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   20f54:	9604      	str	r6, [sp, #16]
   20f56:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   20f58:	9603      	str	r6, [sp, #12]
   20f5a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   20f5c:	9602      	str	r6, [sp, #8]
   20f5e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   20f60:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   20f62:	9601      	str	r6, [sp, #4]
   20f64:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   20f66:	9600      	str	r6, [sp, #0]
   20f68:	f7e0 f94a 	bl	1200 <_new_thread>
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
			  prio, options);

	if (delay != K_FOREVER) {
   20f6c:	1c6b      	adds	r3, r5, #1
   20f6e:	d003      	beq.n	20f78 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
   20f70:	b92d      	cbnz	r5, 20f7e <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   20f72:	4620      	mov	r0, r4
   20f74:	f7ff ffbc 	bl	20ef0 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
   20f78:	4620      	mov	r0, r4
   20f7a:	b006      	add	sp, #24
   20f7c:	bd70      	pop	{r4, r5, r6, pc}
   20f7e:	4629      	mov	r1, r5
   20f80:	4620      	mov	r0, r4
   20f82:	f7ff ff57 	bl	20e34 <schedule_new_thread.part.13>
   20f86:	e7f7      	b.n	20f78 <_impl_k_thread_create+0x2c>

00020f88 <_k_thread_single_abort>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   20f88:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   20f8a:	b510      	push	{r4, lr}
   20f8c:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   20f8e:	b103      	cbz	r3, 20f92 <_k_thread_single_abort+0xa>
		thread->fn_abort();
   20f90:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
   20f92:	4620      	mov	r0, r4
   20f94:	f7ff ff2a 	bl	20dec <_is_thread_ready>
   20f98:	b138      	cbz	r0, 20faa <_k_thread_single_abort+0x22>
		_remove_thread_from_ready_q(thread);
   20f9a:	4620      	mov	r0, r4
   20f9c:	f7ff fc3e 	bl	2081c <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   20fa0:	7a63      	ldrb	r3, [r4, #9]
   20fa2:	f043 0308 	orr.w	r3, r3, #8
   20fa6:	7263      	strb	r3, [r4, #9]
   20fa8:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
   20faa:	7a63      	ldrb	r3, [r4, #9]
   20fac:	079b      	lsls	r3, r3, #30
   20fae:	d508      	bpl.n	20fc2 <_k_thread_single_abort+0x3a>
	node->prev->next = node->next;
   20fb0:	e894 000c 	ldmia.w	r4, {r2, r3}
   20fb4:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   20fb6:	6822      	ldr	r2, [r4, #0]
   20fb8:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   20fba:	7a63      	ldrb	r3, [r4, #9]
   20fbc:	f023 0302 	bic.w	r3, r3, #2
   20fc0:	7263      	strb	r3, [r4, #9]
		if (_is_thread_timeout_active(thread)) {
   20fc2:	6a23      	ldr	r3, [r4, #32]
   20fc4:	3301      	adds	r3, #1
   20fc6:	d0eb      	beq.n	20fa0 <_k_thread_single_abort+0x18>
	return _abort_timeout(&thread->base.timeout);
   20fc8:	f104 0010 	add.w	r0, r4, #16
   20fcc:	f7ff ff18 	bl	20e00 <_abort_timeout>
   20fd0:	e7e6      	b.n	20fa0 <_k_thread_single_abort+0x18>
	...

00020fd4 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   20fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   20fd6:	4f21      	ldr	r7, [pc, #132]	; (2105c <_init_static_threads+0x88>)
   20fd8:	4d21      	ldr	r5, [pc, #132]	; (21060 <_init_static_threads+0x8c>)
{
   20fda:	b087      	sub	sp, #28
   20fdc:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   20fde:	42bd      	cmp	r5, r7
   20fe0:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   20fe4:	d314      	bcc.n	21010 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
   20fe6:	4b1f      	ldr	r3, [pc, #124]	; (21064 <_init_static_threads+0x90>)
   20fe8:	689a      	ldr	r2, [r3, #8]
   20fea:	7ad3      	ldrb	r3, [r2, #11]
   20fec:	3b01      	subs	r3, #1
   20fee:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   20ff0:	f04f 0320 	mov.w	r3, #32
   20ff4:	f3ef 8511 	mrs	r5, BASEPRI
   20ff8:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   20ffc:	4c18      	ldr	r4, [pc, #96]	; (21060 <_init_static_threads+0x8c>)
   20ffe:	42b4      	cmp	r4, r6
   21000:	d31f      	bcc.n	21042 <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21002:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   21006:	b007      	add	sp, #28
   21008:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   2100c:	f7ff bcac 	b.w	20968 <k_sched_unlock>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   21010:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   21014:	9304      	str	r3, [sp, #16]
   21016:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2101a:	9303      	str	r3, [sp, #12]
   2101c:	f854 3c14 	ldr.w	r3, [r4, #-20]
   21020:	9302      	str	r3, [sp, #8]
   21022:	f854 3c18 	ldr.w	r3, [r4, #-24]
   21026:	9301      	str	r3, [sp, #4]
   21028:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2102c:	9300      	str	r3, [sp, #0]
   2102e:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
   21032:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   21034:	f7e0 f8e4 	bl	1200 <_new_thread>
		thread_data->init_thread->init_data = thread_data;
   21038:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   2103c:	64dd      	str	r5, [r3, #76]	; 0x4c
   2103e:	4625      	mov	r5, r4
   21040:	e7cd      	b.n	20fde <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
   21042:	6a61      	ldr	r1, [r4, #36]	; 0x24
   21044:	1c4b      	adds	r3, r1, #1
   21046:	d003      	beq.n	21050 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
   21048:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   2104a:	b919      	cbnz	r1, 21054 <_init_static_threads+0x80>
   2104c:	f7ff ff50 	bl	20ef0 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   21050:	342c      	adds	r4, #44	; 0x2c
   21052:	e7d4      	b.n	20ffe <_init_static_threads+0x2a>
   21054:	f7ff feee 	bl	20e34 <schedule_new_thread.part.13>
   21058:	e7fa      	b.n	21050 <_init_static_threads+0x7c>
   2105a:	bf00      	nop
   2105c:	2000ec20 	.word	0x2000ec20
   21060:	2000ec20 	.word	0x2000ec20
   21064:	20003478 	.word	0x20003478

00021068 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   21068:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   2106a:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   2106c:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
   2106e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
   21072:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
   21074:	72c3      	strb	r3, [r0, #11]
   21076:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
   21078:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
   2107a:	6183      	str	r3, [r0, #24]
	t->func = func;
   2107c:	6243      	str	r3, [r0, #36]	; 0x24
   2107e:	4770      	bx	lr

00021080 <k_work_submit_to_queue>:
{
   21080:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21082:	f101 0308 	add.w	r3, r1, #8
   21086:	f3bf 8f5b 	dmb	ish
   2108a:	e853 2f00 	ldrex	r2, [r3]
   2108e:	f042 0e01 	orr.w	lr, r2, #1
   21092:	e843 ec00 	strex	ip, lr, [r3]
   21096:	f1bc 0f00 	cmp.w	ip, #0
   2109a:	d1f6      	bne.n	2108a <k_work_submit_to_queue+0xa>
   2109c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   210a0:	07d3      	lsls	r3, r2, #31
   210a2:	d403      	bmi.n	210ac <k_work_submit_to_queue+0x2c>
}
   210a4:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   210a8:	f7ff bac9 	b.w	2063e <k_queue_append>
   210ac:	f85d fb04 	ldr.w	pc, [sp], #4

000210b0 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   210b0:	f1a0 010c 	sub.w	r1, r0, #12
   210b4:	6980      	ldr	r0, [r0, #24]
   210b6:	f7ff bfe3 	b.w	21080 <k_work_submit_to_queue>

000210ba <work_q_main>:
{
   210ba:	b510      	push	{r4, lr}
   210bc:	4604      	mov	r4, r0
		work = k_queue_get(&work_q->queue, K_FOREVER);
   210be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   210c2:	4620      	mov	r0, r4
   210c4:	f7ff fadf 	bl	20686 <k_queue_get>
		if (!work) {
   210c8:	4603      	mov	r3, r0
   210ca:	2800      	cmp	r0, #0
   210cc:	d0f7      	beq.n	210be <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   210ce:	3308      	adds	r3, #8
		handler = work->handler;
   210d0:	6842      	ldr	r2, [r0, #4]
   210d2:	f3bf 8f5b 	dmb	ish
   210d6:	e853 1f00 	ldrex	r1, [r3]
   210da:	f021 0e01 	bic.w	lr, r1, #1
   210de:	e843 ec00 	strex	ip, lr, [r3]
   210e2:	f1bc 0f00 	cmp.w	ip, #0
   210e6:	d1f6      	bne.n	210d6 <work_q_main+0x1c>
   210e8:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   210ec:	07cb      	lsls	r3, r1, #31
   210ee:	d500      	bpl.n	210f2 <work_q_main+0x38>
			handler(work);
   210f0:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   210f2:	f7ff fc73 	bl	209dc <_impl_k_yield>
   210f6:	e7e2      	b.n	210be <work_q_main+0x4>

000210f8 <k_work_q_start>:
{
   210f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   210fa:	b087      	sub	sp, #28
   210fc:	4604      	mov	r4, r0
   210fe:	461f      	mov	r7, r3
   21100:	460d      	mov	r5, r1
   21102:	4616      	mov	r6, r2
	k_queue_init(&work_q->queue);
   21104:	f7ff fa6a 	bl	205dc <k_queue_init>

   21108:	2000      	movs	r0, #0
   2110a:	9005      	str	r0, [sp, #20]
   2110c:	9004      	str	r0, [sp, #16]
   2110e:	9002      	str	r0, [sp, #8]
   21110:	9001      	str	r0, [sp, #4]
   21112:	9703      	str	r7, [sp, #12]
   21114:	9400      	str	r4, [sp, #0]
   21116:	4b04      	ldr	r3, [pc, #16]	; (21128 <k_work_q_start+0x30>)
   21118:	4632      	mov	r2, r6
   2111a:	4629      	mov	r1, r5
   2111c:	f104 0010 	add.w	r0, r4, #16
   21120:	f7ff ff14 	bl	20f4c <_impl_k_thread_create>
}
   21124:	b007      	add	sp, #28
   21126:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21128:	000210bb 	.word	0x000210bb

0002112c <k_delayed_work_init>:
}

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
   2112c:	b500      	push	{lr}
   2112e:	f100 0308 	add.w	r3, r0, #8
   21132:	f3bf 8f5b 	dmb	ish
   21136:	e853 2f00 	ldrex	r2, [r3]
   2113a:	f022 0201 	bic.w	r2, r2, #1
   2113e:	e843 2e00 	strex	lr, r2, [r3]
   21142:	f1be 0f00 	cmp.w	lr, #0
   21146:	d1f6      	bne.n	21136 <k_delayed_work_init+0xa>
   21148:	f3bf 8f5b 	dmb	ish
	t->delta_ticks_from_prev = _INACTIVE;
   2114c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21150:	61c3      	str	r3, [r0, #28]
	t->func = func;
   21152:	4a04      	ldr	r2, [pc, #16]	; (21164 <k_delayed_work_init+0x38>)
	work->handler = handler;
   21154:	6041      	str	r1, [r0, #4]
	t->wait_q = NULL;
   21156:	2300      	movs	r3, #0
   21158:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   2115a:	6143      	str	r3, [r0, #20]
	t->func = func;
   2115c:	6202      	str	r2, [r0, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   2115e:	6243      	str	r3, [r0, #36]	; 0x24
   21160:	f85d fb04 	ldr.w	pc, [sp], #4
   21164:	000210b1 	.word	0x000210b1

00021168 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   21168:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   2116a:	f04f 0320 	mov.w	r3, #32
   2116e:	f3ef 8411 	mrs	r4, BASEPRI
   21172:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   21176:	6a43      	ldr	r3, [r0, #36]	; 0x24
   21178:	b923      	cbnz	r3, 21184 <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2117a:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   2117e:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   21182:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21184:	f3bf 8f5b 	dmb	ish
   21188:	6883      	ldr	r3, [r0, #8]
   2118a:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   2118e:	07da      	lsls	r2, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   21190:	f100 0508 	add.w	r5, r0, #8
   21194:	d529      	bpl.n	211ea <k_delayed_work_cancel+0x82>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   21196:	6a42      	ldr	r2, [r0, #36]	; 0x24
   21198:	6813      	ldr	r3, [r2, #0]
	sys_snode_t *prev = NULL;
   2119a:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   2119c:	2b00      	cmp	r3, #0
   2119e:	d0ec      	beq.n	2117a <k_delayed_work_cancel+0x12>
		if (test == node) {
   211a0:	4298      	cmp	r0, r3
   211a2:	d11f      	bne.n	211e4 <k_delayed_work_cancel+0x7c>
   211a4:	6803      	ldr	r3, [r0, #0]
   211a6:	6856      	ldr	r6, [r2, #4]
	if (!prev_node) {
   211a8:	b9b9      	cbnz	r1, 211da <k_delayed_work_cancel+0x72>
		if (list->tail == node) {
   211aa:	42b0      	cmp	r0, r6
		list->head = node->next;
   211ac:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   211ae:	d100      	bne.n	211b2 <k_delayed_work_cancel+0x4a>
			list->tail = list->head;
   211b0:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   211b2:	2300      	movs	r3, #0
   211b4:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   211b6:	2300      	movs	r3, #0
   211b8:	6243      	str	r3, [r0, #36]	; 0x24
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   211ba:	f3bf 8f5b 	dmb	ish
   211be:	e855 2f00 	ldrex	r2, [r5]
   211c2:	f022 0201 	bic.w	r2, r2, #1
   211c6:	e845 2100 	strex	r1, r2, [r5]
   211ca:	2900      	cmp	r1, #0
   211cc:	d1f7      	bne.n	211be <k_delayed_work_cancel+0x56>
   211ce:	f3bf 8f5b 	dmb	ish
   211d2:	f384 8811 	msr	BASEPRI, r4
	return 0;
   211d6:	4618      	mov	r0, r3
   211d8:	bd70      	pop	{r4, r5, r6, pc}
		if (list->tail == node) {
   211da:	42b0      	cmp	r0, r6
		prev_node->next = node->next;
   211dc:	600b      	str	r3, [r1, #0]
			list->tail = prev_node;
   211de:	bf08      	it	eq
   211e0:	6051      	streq	r1, [r2, #4]
   211e2:	e7e6      	b.n	211b2 <k_delayed_work_cancel+0x4a>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   211e4:	4619      	mov	r1, r3
   211e6:	681b      	ldr	r3, [r3, #0]
   211e8:	e7d8      	b.n	2119c <k_delayed_work_cancel+0x34>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   211ea:	69c1      	ldr	r1, [r0, #28]
   211ec:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   211ee:	f100 020c 	add.w	r2, r0, #12
   211f2:	d0e0      	beq.n	211b6 <k_delayed_work_cancel+0x4e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   211f4:	4b08      	ldr	r3, [pc, #32]	; (21218 <k_delayed_work_cancel+0xb0>)
   211f6:	695b      	ldr	r3, [r3, #20]
   211f8:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
   211fa:	bf1f      	itttt	ne
   211fc:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   211fe:	6913      	ldrne	r3, [r2, #16]
   21200:	185b      	addne	r3, r3, r1
   21202:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   21204:	6903      	ldr	r3, [r0, #16]
   21206:	68c2      	ldr	r2, [r0, #12]
   21208:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2120a:	68c2      	ldr	r2, [r0, #12]
   2120c:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   2120e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21212:	61c3      	str	r3, [r0, #28]
   21214:	e7cf      	b.n	211b6 <k_delayed_work_cancel+0x4e>
   21216:	bf00      	nop
   21218:	20003478 	.word	0x20003478

0002121c <k_delayed_work_submit_to_queue>:
{
   2121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2121e:	4607      	mov	r7, r0
   21220:	460c      	mov	r4, r1
   21222:	4615      	mov	r5, r2
	__asm__ volatile(
   21224:	f04f 0320 	mov.w	r3, #32
   21228:	f3ef 8611 	mrs	r6, BASEPRI
   2122c:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   21230:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   21232:	b123      	cbz	r3, 2123e <k_delayed_work_submit_to_queue+0x22>
   21234:	4283      	cmp	r3, r0
   21236:	d00b      	beq.n	21250 <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   21238:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   2123c:	e00d      	b.n	2125a <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   2123e:	b138      	cbz	r0, 21250 <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   21240:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   21242:	b96d      	cbnz	r5, 21260 <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   21244:	4621      	mov	r1, r4
   21246:	4638      	mov	r0, r7
   21248:	f7ff ff1a 	bl	21080 <k_work_submit_to_queue>
	err = 0;
   2124c:	2000      	movs	r0, #0
   2124e:	e004      	b.n	2125a <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   21250:	4620      	mov	r0, r4
   21252:	f7ff ff89 	bl	21168 <k_delayed_work_cancel>
		if (err < 0) {
   21256:	2800      	cmp	r0, #0
   21258:	daf2      	bge.n	21240 <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2125a:	f386 8811 	msr	BASEPRI, r6
}
   2125e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   21260:	220a      	movs	r2, #10
   21262:	3509      	adds	r5, #9
   21264:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   21268:	4a16      	ldr	r2, [pc, #88]	; (212c4 <k_delayed_work_submit_to_queue+0xa8>)
   2126a:	4611      	mov	r1, r2
	timeout->thread = thread;
   2126c:	2300      	movs	r3, #0
   2126e:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   21270:	61a3      	str	r3, [r4, #24]
   21272:	f851 3f10 	ldr.w	r3, [r1, #16]!
		_add_timeout(NULL, &work->timeout, NULL,
   21276:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21278:	428b      	cmp	r3, r1
   2127a:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   2127e:	61e5      	str	r5, [r4, #28]
   21280:	d106      	bne.n	21290 <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   21282:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   21284:	6953      	ldr	r3, [r2, #20]
   21286:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   21288:	6953      	ldr	r3, [r2, #20]
   2128a:	601f      	str	r7, [r3, #0]
	list->tail = node;
   2128c:	6157      	str	r7, [r2, #20]
   2128e:	e7dd      	b.n	2124c <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   21290:	2b00      	cmp	r3, #0
   21292:	d0f6      	beq.n	21282 <k_delayed_work_submit_to_queue+0x66>
   21294:	f8d2 e014 	ldr.w	lr, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
   21298:	69e0      	ldr	r0, [r4, #28]
   2129a:	691d      	ldr	r5, [r3, #16]
   2129c:	42a8      	cmp	r0, r5
   2129e:	dc08      	bgt.n	212b2 <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   212a0:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   212a2:	1a28      	subs	r0, r5, r0
   212a4:	6118      	str	r0, [r3, #16]
   212a6:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   212a8:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   212aa:	685a      	ldr	r2, [r3, #4]
   212ac:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   212ae:	605f      	str	r7, [r3, #4]
   212b0:	e7cc      	b.n	2124c <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   212b2:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   212b4:	4573      	cmp	r3, lr
   212b6:	61e0      	str	r0, [r4, #28]
   212b8:	d0e3      	beq.n	21282 <k_delayed_work_submit_to_queue+0x66>
   212ba:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   212bc:	2b00      	cmp	r3, #0
   212be:	d1eb      	bne.n	21298 <k_delayed_work_submit_to_queue+0x7c>
   212c0:	e7df      	b.n	21282 <k_delayed_work_submit_to_queue+0x66>
   212c2:	bf00      	nop
   212c4:	20003478 	.word	0x20003478

000212c8 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
   212c8:	7a42      	ldrb	r2, [r0, #9]
   212ca:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
   212ce:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   212d2:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   212d4:	d104      	bne.n	212e0 <_ready_thread+0x18>
   212d6:	6a03      	ldr	r3, [r0, #32]
   212d8:	3301      	adds	r3, #1
   212da:	d101      	bne.n	212e0 <_ready_thread+0x18>
		_add_thread_to_ready_q(thread);
   212dc:	f7ff ba1a 	b.w	20714 <_add_thread_to_ready_q>
   212e0:	4770      	bx	lr

000212e2 <_unpend_thread>:
	node->prev->next = node->next;
   212e2:	e890 000c 	ldmia.w	r0, {r2, r3}
   212e6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   212e8:	6802      	ldr	r2, [r0, #0]
   212ea:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   212ec:	7a43      	ldrb	r3, [r0, #9]
   212ee:	f023 0302 	bic.w	r3, r3, #2
   212f2:	7243      	strb	r3, [r0, #9]
   212f4:	4770      	bx	lr
	...

000212f8 <_add_timeout.constprop.9>:
static inline void _add_timeout(struct k_thread *thread,
   212f8:	b430      	push	{r4, r5}
	timeout->thread = thread;
   212fa:	2400      	movs	r4, #0
static inline void _add_timeout(struct k_thread *thread,
   212fc:	4603      	mov	r3, r0
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   212fe:	6102      	str	r2, [r0, #16]
	timeout->thread = thread;
   21300:	6084      	str	r4, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   21302:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
   21304:	b972      	cbnz	r2, 21324 <_add_timeout.constprop.9+0x2c>
	__asm__ volatile(
   21306:	f04f 0120 	mov.w	r1, #32
   2130a:	f3ef 8211 	mrs	r2, BASEPRI
   2130e:	f381 8811 	msr	BASEPRI, r1
	timeout->delta_ticks_from_prev = _INACTIVE;
   21312:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21316:	6101      	str	r1, [r0, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21318:	f382 8811 	msr	BASEPRI, r2
		if (timeout->func) {
   2131c:	6943      	ldr	r3, [r0, #20]
   2131e:	b16b      	cbz	r3, 2133c <_add_timeout.constprop.9+0x44>
}
   21320:	bc30      	pop	{r4, r5}
			timeout->func(timeout);
   21322:	4718      	bx	r3
	return list->head == list;
   21324:	4911      	ldr	r1, [pc, #68]	; (2136c <_add_timeout.constprop.9+0x74>)
   21326:	4608      	mov	r0, r1
   21328:	f850 2f10 	ldr.w	r2, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2132c:	4282      	cmp	r2, r0
   2132e:	d10d      	bne.n	2134c <_add_timeout.constprop.9+0x54>
	node->next = list;
   21330:	6018      	str	r0, [r3, #0]
	node->prev = list->tail;
   21332:	694a      	ldr	r2, [r1, #20]
   21334:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   21336:	694a      	ldr	r2, [r1, #20]
   21338:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2133a:	614b      	str	r3, [r1, #20]
}
   2133c:	bc30      	pop	{r4, r5}
   2133e:	4770      	bx	lr
		*delta -= in_q->delta_ticks_from_prev;
   21340:	1b64      	subs	r4, r4, r5
   21342:	611c      	str	r4, [r3, #16]
	return (node == list->tail) ? NULL : node->next;
   21344:	694c      	ldr	r4, [r1, #20]
   21346:	42a2      	cmp	r2, r4
   21348:	d0f2      	beq.n	21330 <_add_timeout.constprop.9+0x38>
   2134a:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2134c:	2a00      	cmp	r2, #0
   2134e:	d0ef      	beq.n	21330 <_add_timeout.constprop.9+0x38>
		if (*delta <= in_q->delta_ticks_from_prev) {
   21350:	691c      	ldr	r4, [r3, #16]
   21352:	6915      	ldr	r5, [r2, #16]
   21354:	42ac      	cmp	r4, r5
   21356:	dcf3      	bgt.n	21340 <_add_timeout.constprop.9+0x48>
		node->prev = insert_point->prev;
   21358:	6851      	ldr	r1, [r2, #4]
			in_q->delta_ticks_from_prev -= *delta;
   2135a:	1b2c      	subs	r4, r5, r4
   2135c:	6114      	str	r4, [r2, #16]
   2135e:	6059      	str	r1, [r3, #4]
		node->next = insert_point;
   21360:	601a      	str	r2, [r3, #0]
		insert_point->prev->next = node;
   21362:	6851      	ldr	r1, [r2, #4]
   21364:	600b      	str	r3, [r1, #0]
		insert_point->prev = node;
   21366:	6053      	str	r3, [r2, #4]
   21368:	e7e8      	b.n	2133c <_add_timeout.constprop.9+0x44>
   2136a:	bf00      	nop
   2136c:	20003478 	.word	0x20003478

00021370 <_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   21370:	6a83      	ldr	r3, [r0, #40]	; 0x28
   21372:	2b00      	cmp	r3, #0
{
   21374:	b570      	push	{r4, r5, r6, lr}
   21376:	4604      	mov	r4, r0
   21378:	f100 0518 	add.w	r5, r0, #24
	if (timer->period > 0) {
   2137c:	dd0b      	ble.n	21396 <_timer_expiration_handler+0x26>
	__asm__ volatile(
   2137e:	f04f 0320 	mov.w	r3, #32
   21382:	f3ef 8611 	mrs	r6, BASEPRI
   21386:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
   2138a:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2138c:	4629      	mov	r1, r5
   2138e:	f7ff ffb3 	bl	212f8 <_add_timeout.constprop.9>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21392:	f386 8811 	msr	BASEPRI, r6
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
   21396:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   21398:	3301      	adds	r3, #1
   2139a:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
   2139c:	6a23      	ldr	r3, [r4, #32]
   2139e:	b10b      	cbz	r3, 213a4 <_timer_expiration_handler+0x34>
		timer->expiry_fn(timer);
   213a0:	4620      	mov	r0, r4
   213a2:	4798      	blx	r3
	return list->head == list;
   213a4:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   213a6:	42ac      	cmp	r4, r5
   213a8:	d010      	beq.n	213cc <_timer_expiration_handler+0x5c>
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);

	if (!thread) {
   213aa:	b17c      	cbz	r4, 213cc <_timer_expiration_handler+0x5c>
	 * calling _unpend_thread() because a) this is the only place a thread
	 * can be taken off this pend queue, and b) the only place a thread
	 * can be put on the pend queue is at thread level, which of course
	 * cannot interrupt the current context.
	 */
	_unpend_thread(thread);
   213ac:	4620      	mov	r0, r4
   213ae:	f7ff ff98 	bl	212e2 <_unpend_thread>
	__asm__ volatile(
   213b2:	f04f 0320 	mov.w	r3, #32
   213b6:	f3ef 8511 	mrs	r5, BASEPRI
   213ba:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();
	_ready_thread(thread);
   213be:	4620      	mov	r0, r4
   213c0:	f7ff ff82 	bl	212c8 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   213c4:	f385 8811 	msr	BASEPRI, r5
   213c8:	2300      	movs	r3, #0
   213ca:	6663      	str	r3, [r4, #100]	; 0x64
   213cc:	bd70      	pop	{r4, r5, r6, pc}
	...

000213d0 <_timeout_remaining_get>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE(k_timer_status_sync, K_OBJ_TIMER, struct k_timer *);
#endif

s32_t _timeout_remaining_get(struct _timeout *timeout)
{
   213d0:	b530      	push	{r4, r5, lr}
	__asm__ volatile(
   213d2:	f04f 0320 	mov.w	r3, #32
   213d6:	f3ef 8411 	mrs	r4, BASEPRI
   213da:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	s32_t remaining_ticks;

	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   213de:	6903      	ldr	r3, [r0, #16]
   213e0:	3301      	adds	r3, #1
   213e2:	d016      	beq.n	21412 <_timeout_remaining_get+0x42>
	return list->head == list;
   213e4:	490d      	ldr	r1, [pc, #52]	; (2141c <_timeout_remaining_get+0x4c>)
   213e6:	460a      	mov	r2, r1
   213e8:	f852 3f10 	ldr.w	r3, [r2, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   213ec:	4293      	cmp	r3, r2
   213ee:	d012      	beq.n	21416 <_timeout_remaining_get+0x46>
		 * and summing up the various tick deltas involved
		 */
		struct _timeout *t =
			(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

		remaining_ticks = t->delta_ticks_from_prev;
   213f0:	691a      	ldr	r2, [r3, #16]
   213f2:	6949      	ldr	r1, [r1, #20]
		while (t != timeout) {
   213f4:	4283      	cmp	r3, r0
   213f6:	d105      	bne.n	21404 <_timeout_remaining_get+0x34>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   213f8:	f384 8811 	msr	BASEPRI, r4
	return (u64_t)ticks * _ms_per_tick;
   213fc:	200a      	movs	r0, #10
   213fe:	fb82 0100 	smull	r0, r1, r2, r0
		}
	}

	irq_unlock(key);
	return __ticks_to_ms(remaining_ticks);
}
   21402:	bd30      	pop	{r4, r5, pc}
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   21404:	b13b      	cbz	r3, 21416 <_timeout_remaining_get+0x46>
	return (node == list->tail) ? NULL : node->next;
   21406:	428b      	cmp	r3, r1
   21408:	d005      	beq.n	21416 <_timeout_remaining_get+0x46>
   2140a:	681b      	ldr	r3, [r3, #0]
			remaining_ticks += t->delta_ticks_from_prev;
   2140c:	691d      	ldr	r5, [r3, #16]
   2140e:	442a      	add	r2, r5
   21410:	e7f0      	b.n	213f4 <_timeout_remaining_get+0x24>
		remaining_ticks = 0;
   21412:	2200      	movs	r2, #0
   21414:	e7f0      	b.n	213f8 <_timeout_remaining_get+0x28>
			remaining_ticks += t->delta_ticks_from_prev;
   21416:	2300      	movs	r3, #0
   21418:	691b      	ldr	r3, [r3, #16]
   2141a:	deff      	udf	#255	; 0xff
   2141c:	20003478 	.word	0x20003478

00021420 <sys_dlist_remove>:
	node->prev->next = node->next;
   21420:	e890 000c 	ldmia.w	r0, {r2, r3}
   21424:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   21426:	6802      	ldr	r2, [r0, #0]
   21428:	6053      	str	r3, [r2, #4]
   2142a:	4770      	bx	lr

0002142c <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   2142c:	b570      	push	{r4, r5, r6, lr}
   2142e:	2414      	movs	r4, #20
   21430:	4615      	mov	r5, r2
   21432:	fb04 0401 	mla	r4, r4, r1, r0
	event->poller = NULL;
   21436:	2600      	movs	r6, #0
	for (; last_registered >= 0; last_registered--) {
   21438:	2900      	cmp	r1, #0
   2143a:	da00      	bge.n	2143e <clear_event_registrations+0x12>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   2143c:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   2143e:	7b63      	ldrb	r3, [r4, #13]
	event->poller = NULL;
   21440:	60a6      	str	r6, [r4, #8]
	switch (event->type) {
   21442:	f003 030f 	and.w	r3, r3, #15
   21446:	2b02      	cmp	r3, #2
   21448:	d003      	beq.n	21452 <clear_event_registrations+0x26>
   2144a:	2b04      	cmp	r3, #4
   2144c:	d001      	beq.n	21452 <clear_event_registrations+0x26>
   2144e:	2b01      	cmp	r3, #1
   21450:	d102      	bne.n	21458 <clear_event_registrations+0x2c>
		sys_dlist_remove(&event->_node);
   21452:	4620      	mov	r0, r4
   21454:	f7ff ffe4 	bl	21420 <sys_dlist_remove>
   21458:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
   2145c:	f04f 0320 	mov.w	r3, #32
   21460:	f3ef 8511 	mrs	r5, BASEPRI
   21464:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   21468:	3901      	subs	r1, #1
   2146a:	3c14      	subs	r4, #20
   2146c:	e7e4      	b.n	21438 <clear_event_registrations+0xc>
	...

00021470 <signal_poll_event>:
}

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   21470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*must_reschedule = 0;
   21472:	2300      	movs	r3, #0
   21474:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
   21476:	6883      	ldr	r3, [r0, #8]
{
   21478:	4605      	mov	r5, r0
   2147a:	460e      	mov	r6, r1
   2147c:	4617      	mov	r7, r2
	if (!event->poller) {
   2147e:	2b00      	cmp	r3, #0
   21480:	d049      	beq.n	21516 <signal_poll_event+0xa6>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   21482:	6819      	ldr	r1, [r3, #0]
	thread->base.thread_state &= ~states;
   21484:	7a4b      	ldrb	r3, [r1, #9]
   21486:	f023 0220 	bic.w	r2, r3, #32

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
   2148a:	0798      	lsls	r0, r3, #30
   2148c:	724a      	strb	r2, [r1, #9]
   2148e:	d542      	bpl.n	21516 <signal_poll_event+0xa6>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   21490:	6a0b      	ldr	r3, [r1, #32]
   21492:	3302      	adds	r3, #2
   21494:	d04a      	beq.n	2152c <signal_poll_event+0xbc>
	sys_dlist_remove(&thread->base.k_q_node);
   21496:	4608      	mov	r0, r1
   21498:	f7ff ffc2 	bl	21420 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2149c:	7a4b      	ldrb	r3, [r1, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2149e:	6a0c      	ldr	r4, [r1, #32]
   214a0:	f023 0302 	bic.w	r3, r3, #2
   214a4:	1c62      	adds	r2, r4, #1
   214a6:	724b      	strb	r3, [r1, #9]
	return _abort_timeout(&thread->base.timeout);
   214a8:	f101 0010 	add.w	r0, r1, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   214ac:	d00c      	beq.n	214c8 <signal_poll_event+0x58>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   214ae:	4b21      	ldr	r3, [pc, #132]	; (21534 <signal_poll_event+0xc4>)
   214b0:	695b      	ldr	r3, [r3, #20]
   214b2:	4298      	cmp	r0, r3
	return (node == list->tail) ? NULL : node->next;
   214b4:	bf1f      	itttt	ne
   214b6:	690a      	ldrne	r2, [r1, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   214b8:	6913      	ldrne	r3, [r2, #16]
   214ba:	191b      	addne	r3, r3, r4
   214bc:	6113      	strne	r3, [r2, #16]
	sys_dlist_remove(&timeout->node);
   214be:	f7ff ffaf 	bl	21420 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
   214c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   214c6:	620b      	str	r3, [r1, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   214c8:	7a48      	ldrb	r0, [r1, #9]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
   214ca:	2e00      	cmp	r6, #0
   214cc:	bf0c      	ite	eq
   214ce:	f06f 0303 	mvneq.w	r3, #3
   214d2:	2300      	movne	r3, #0
   214d4:	f010 041f 	ands.w	r4, r0, #31
   214d8:	664b      	str	r3, [r1, #100]	; 0x64
   214da:	d11c      	bne.n	21516 <signal_poll_event+0xa6>
   214dc:	6a0b      	ldr	r3, [r1, #32]
   214de:	3301      	adds	r3, #1
   214e0:	d119      	bne.n	21516 <signal_poll_event+0xa6>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
   214e2:	4608      	mov	r0, r1
   214e4:	f7ff f916 	bl	20714 <_add_thread_to_ready_q>
   214e8:	f3ef 8305 	mrs	r3, IPSR
   214ec:	2b0d      	cmp	r3, #13
   214ee:	d81b      	bhi.n	21528 <signal_poll_event+0xb8>
   214f0:	b123      	cbz	r3, 214fc <signal_poll_event+0x8c>
   214f2:	4b11      	ldr	r3, [pc, #68]	; (21538 <signal_poll_event+0xc8>)
   214f4:	6858      	ldr	r0, [r3, #4]
   214f6:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
   214fa:	d00b      	beq.n	21514 <signal_poll_event+0xa4>
	return _is_preempt(_current) && __must_switch_threads();
   214fc:	4b0d      	ldr	r3, [pc, #52]	; (21534 <signal_poll_event+0xc4>)
   214fe:	689b      	ldr	r3, [r3, #8]
   21500:	895b      	ldrh	r3, [r3, #10]
   21502:	2b7f      	cmp	r3, #127	; 0x7f
   21504:	d901      	bls.n	2150a <signal_poll_event+0x9a>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   21506:	2000      	movs	r0, #0
   21508:	e004      	b.n	21514 <signal_poll_event+0xa4>
   2150a:	f7ff f9fd 	bl	20908 <__must_switch_threads>
   2150e:	3000      	adds	r0, #0
   21510:	bf18      	it	ne
   21512:	2001      	movne	r0, #1
   21514:	6038      	str	r0, [r7, #0]
	event->state |= state;
   21516:	7b6b      	ldrb	r3, [r5, #13]
   21518:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   2151c:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   21520:	2000      	movs	r0, #0
	event->state |= state;
   21522:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   21524:	60a8      	str	r0, [r5, #8]

ready_event:
	set_event_ready(event, state);
	return 0;
   21526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   21528:	4620      	mov	r0, r4
   2152a:	e7f3      	b.n	21514 <signal_poll_event+0xa4>
		return -EAGAIN;
   2152c:	f06f 000a 	mvn.w	r0, #10
   21530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21532:	bf00      	nop
   21534:	20003478 	.word	0x20003478
   21538:	e000ed00 	.word	0xe000ed00

0002153c <add_event>:
	return list->head == list;
   2153c:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2153e:	4298      	cmp	r0, r3
{
   21540:	b530      	push	{r4, r5, lr}
   21542:	d00a      	beq.n	2155a <add_event+0x1e>
   21544:	6844      	ldr	r4, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   21546:	b144      	cbz	r4, 2155a <add_event+0x1e>
   21548:	68a5      	ldr	r5, [r4, #8]
   2154a:	6812      	ldr	r2, [r2, #0]
   2154c:	682d      	ldr	r5, [r5, #0]
   2154e:	f992 200a 	ldrsb.w	r2, [r2, #10]
   21552:	f995 500a 	ldrsb.w	r5, [r5, #10]
   21556:	4295      	cmp	r5, r2
   21558:	da17      	bge.n	2158a <add_event+0x4e>
	node->next = list;
   2155a:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   2155c:	6843      	ldr	r3, [r0, #4]
   2155e:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   21560:	6843      	ldr	r3, [r0, #4]
   21562:	6019      	str	r1, [r3, #0]
	list->tail = node;
   21564:	6041      	str	r1, [r0, #4]
   21566:	bd30      	pop	{r4, r5, pc}
		if (_is_t1_higher_prio_than_t2(poller->thread,
   21568:	689d      	ldr	r5, [r3, #8]
   2156a:	682d      	ldr	r5, [r5, #0]
   2156c:	f995 500a 	ldrsb.w	r5, [r5, #10]
   21570:	4295      	cmp	r5, r2
   21572:	dd06      	ble.n	21582 <add_event+0x46>
		node->prev = insert_point->prev;
   21574:	685a      	ldr	r2, [r3, #4]
   21576:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   21578:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   2157a:	685a      	ldr	r2, [r3, #4]
   2157c:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   2157e:	6059      	str	r1, [r3, #4]
   21580:	bd30      	pop	{r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   21582:	42a3      	cmp	r3, r4
   21584:	d003      	beq.n	2158e <add_event+0x52>
   21586:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   21588:	b10b      	cbz	r3, 2158e <add_event+0x52>
   2158a:	2b00      	cmp	r3, #0
   2158c:	d1ec      	bne.n	21568 <add_event+0x2c>
	node->prev = list->tail;
   2158e:	e881 0011 	stmia.w	r1, {r0, r4}
   21592:	e7e5      	b.n	21560 <add_event+0x24>

00021594 <k_poll_event_init>:
{
   21594:	b530      	push	{r4, r5, lr}
	event->type = type;
   21596:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   21598:	6103      	str	r3, [r0, #16]
	event->type = type;
   2159a:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
   2159e:	7b81      	ldrb	r1, [r0, #14]
   215a0:	f362 0100 	bfi	r1, r2, #0, #1
   215a4:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   215a6:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   215a8:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
   215aa:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
   215ae:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
   215b2:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   215b4:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
   215b6:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   215b8:	bd30      	pop	{r4, r5, pc}
	...

000215bc <k_poll>:
{
   215bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   215c0:	b087      	sub	sp, #28
   215c2:	4680      	mov	r8, r0
   215c4:	9101      	str	r1, [sp, #4]
   215c6:	4691      	mov	r9, r2
   215c8:	f04f 0320 	mov.w	r3, #32
   215cc:	f3ef 8111 	mrs	r1, BASEPRI
   215d0:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
   215d4:	4d4a      	ldr	r5, [pc, #296]	; (21700 <k_poll+0x144>)
   215d6:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= states;
   215d8:	7a53      	ldrb	r3, [r2, #9]
   215da:	f043 0320 	orr.w	r3, r3, #32
   215de:	7253      	strb	r3, [r2, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   215e0:	f381 8811 	msr	BASEPRI, r1
	struct _poller poller = { .thread = _current };
   215e4:	f10d 0a18 	add.w	sl, sp, #24
   215e8:	68aa      	ldr	r2, [r5, #8]
   215ea:	f84a 2d0c 	str.w	r2, [sl, #-12]!
   215ee:	4604      	mov	r4, r0
	for (int ii = 0; ii < num_events; ii++) {
   215f0:	2700      	movs	r7, #0
	int last_registered = -1, rc;
   215f2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
   215f6:	9b01      	ldr	r3, [sp, #4]
   215f8:	429f      	cmp	r7, r3
   215fa:	db15      	blt.n	21628 <k_poll+0x6c>
	__asm__ volatile(
   215fc:	f04f 0320 	mov.w	r3, #32
   21600:	f3ef 8711 	mrs	r7, BASEPRI
   21604:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
   21608:	68aa      	ldr	r2, [r5, #8]
   2160a:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
   2160c:	f013 0420 	ands.w	r4, r3, #32
   21610:	d144      	bne.n	2169c <k_poll+0xe0>
		clear_event_registrations(events, last_registered, key);
   21612:	463a      	mov	r2, r7
   21614:	4631      	mov	r1, r6
   21616:	4640      	mov	r0, r8
   21618:	f7ff ff08 	bl	2142c <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2161c:	f387 8811 	msr	BASEPRI, r7
}
   21620:	4620      	mov	r0, r4
   21622:	b007      	add	sp, #28
   21624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   21628:	f04f 0220 	mov.w	r2, #32
   2162c:	f3ef 8b11 	mrs	fp, BASEPRI
   21630:	f382 8811 	msr	BASEPRI, r2
	switch (event->type) {
   21634:	7b61      	ldrb	r1, [r4, #13]
   21636:	f001 020f 	and.w	r2, r1, #15
   2163a:	2a02      	cmp	r2, #2
   2163c:	d003      	beq.n	21646 <k_poll+0x8a>
   2163e:	2a04      	cmp	r2, #4
   21640:	d004      	beq.n	2164c <k_poll+0x90>
   21642:	2a01      	cmp	r2, #1
   21644:	d106      	bne.n	21654 <k_poll+0x98>
		if (event->signal->signaled) {
   21646:	6920      	ldr	r0, [r4, #16]
   21648:	6880      	ldr	r0, [r0, #8]
   2164a:	e001      	b.n	21650 <k_poll+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2164c:	6920      	ldr	r0, [r4, #16]
   2164e:	6800      	ldr	r0, [r0, #0]
		if (event->signal->signaled) {
   21650:	2800      	cmp	r0, #0
   21652:	d148      	bne.n	216e6 <k_poll+0x12a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
   21654:	f1b9 0f00 	cmp.w	r9, #0
   21658:	d016      	beq.n	21688 <k_poll+0xcc>
   2165a:	68a9      	ldr	r1, [r5, #8]
   2165c:	7a49      	ldrb	r1, [r1, #9]
   2165e:	068b      	lsls	r3, r1, #26
   21660:	d512      	bpl.n	21688 <k_poll+0xcc>
	switch (event->type) {
   21662:	2a02      	cmp	r2, #2
   21664:	d007      	beq.n	21676 <k_poll+0xba>
   21666:	2a04      	cmp	r2, #4
   21668:	d013      	beq.n	21692 <k_poll+0xd6>
   2166a:	2a01      	cmp	r2, #1
   2166c:	d109      	bne.n	21682 <k_poll+0xc6>
		add_event(&event->signal->poll_events, event, poller);
   2166e:	4652      	mov	r2, sl
   21670:	4621      	mov	r1, r4
   21672:	6920      	ldr	r0, [r4, #16]
   21674:	e003      	b.n	2167e <k_poll+0xc2>
		add_event(&event->sem->poll_events, event, poller);
   21676:	6920      	ldr	r0, [r4, #16]
   21678:	4652      	mov	r2, sl
   2167a:	4621      	mov	r1, r4
   2167c:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   2167e:	f7ff ff5d 	bl	2153c <add_event>
	event->poller = poller;
   21682:	f8c4 a008 	str.w	sl, [r4, #8]
				++last_registered;
   21686:	3601      	adds	r6, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21688:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   2168c:	3701      	adds	r7, #1
   2168e:	3414      	adds	r4, #20
   21690:	e7b1      	b.n	215f6 <k_poll+0x3a>
		add_event(&event->queue->poll_events, event, poller);
   21692:	6920      	ldr	r0, [r4, #16]
   21694:	4652      	mov	r2, sl
   21696:	4621      	mov	r1, r4
   21698:	3008      	adds	r0, #8
   2169a:	e7f0      	b.n	2167e <k_poll+0xc2>
	thread->base.thread_state &= ~states;
   2169c:	f023 0320 	bic.w	r3, r3, #32
   216a0:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
   216a2:	f1b9 0f00 	cmp.w	r9, #0
   216a6:	d104      	bne.n	216b2 <k_poll+0xf6>
   216a8:	f387 8811 	msr	BASEPRI, r7
		return -EAGAIN;
   216ac:	f06f 040a 	mvn.w	r4, #10
   216b0:	e7b6      	b.n	21620 <k_poll+0x64>
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   216b2:	a804      	add	r0, sp, #16
	_pend_current_thread(&wait_q, timeout);
   216b4:	4649      	mov	r1, r9
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   216b6:	9004      	str	r0, [sp, #16]
   216b8:	9005      	str	r0, [sp, #20]
	_pend_current_thread(&wait_q, timeout);
   216ba:	f7ff f915 	bl	208e8 <_pend_current_thread>
	_update_time_slice_before_swap();
   216be:	f7ff f9d5 	bl	20a6c <_update_time_slice_before_swap>
	return __swap(key);
   216c2:	4638      	mov	r0, r7
   216c4:	f7df fb90 	bl	de8 <__swap>
   216c8:	4604      	mov	r4, r0
	__asm__ volatile(
   216ca:	f04f 0320 	mov.w	r3, #32
   216ce:	f3ef 8511 	mrs	r5, BASEPRI
   216d2:	f383 8811 	msr	BASEPRI, r3
	clear_event_registrations(events, last_registered, key);
   216d6:	462a      	mov	r2, r5
   216d8:	4631      	mov	r1, r6
   216da:	4640      	mov	r0, r8
   216dc:	f7ff fea6 	bl	2142c <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   216e0:	f385 8811 	msr	BASEPRI, r5
	return swap_rc;
   216e4:	e79c      	b.n	21620 <k_poll+0x64>
	event->state |= state;
   216e6:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
   216ea:	f362 1107 	bfi	r1, r2, #4, #4
	event->poller = NULL;
   216ee:	2300      	movs	r3, #0
   216f0:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   216f2:	7361      	strb	r1, [r4, #13]
			clear_polling_state(_current);
   216f4:	68a9      	ldr	r1, [r5, #8]
   216f6:	7a4a      	ldrb	r2, [r1, #9]
   216f8:	f022 0220 	bic.w	r2, r2, #32
   216fc:	724a      	strb	r2, [r1, #9]
   216fe:	e7c3      	b.n	21688 <k_poll+0xcc>
   21700:	20003478 	.word	0x20003478

00021704 <_handle_obj_poll_events>:
}

/* returns 1 if a reschedule must take place, 0 otherwise */
int _handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
   21704:	b513      	push	{r0, r1, r4, lr}
	return list->head == list;
   21706:	6804      	ldr	r4, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
   21708:	42a0      	cmp	r0, r4
   2170a:	d102      	bne.n	21712 <_handle_obj_poll_events+0xe>
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
		return 0;
   2170c:	2000      	movs	r0, #0
	}

	(void) signal_poll_event(poll_event, state, &must_reschedule);
	return must_reschedule;
}
   2170e:	b002      	add	sp, #8
   21710:	bd10      	pop	{r4, pc}
		return NULL;
	}

	node = list->head;
	sys_dlist_remove(node);
   21712:	4620      	mov	r0, r4
   21714:	f7ff fe84 	bl	21420 <sys_dlist_remove>
	if (!poll_event) {
   21718:	2c00      	cmp	r4, #0
   2171a:	d0f7      	beq.n	2170c <_handle_obj_poll_events+0x8>
	(void) signal_poll_event(poll_event, state, &must_reschedule);
   2171c:	aa01      	add	r2, sp, #4
   2171e:	4620      	mov	r0, r4
   21720:	f7ff fea6 	bl	21470 <signal_poll_event>
	return must_reschedule;
   21724:	9801      	ldr	r0, [sp, #4]
   21726:	e7f2      	b.n	2170e <_handle_obj_poll_events+0xa>

00021728 <k_poll_signal>:
	signal->signaled = 0;
	/* signal->result is left unitialized */
}

int k_poll_signal(struct k_poll_signal *signal, int result)
{
   21728:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__asm__ volatile(
   2172a:	f04f 0320 	mov.w	r3, #32
   2172e:	f3ef 8511 	mrs	r5, BASEPRI
   21732:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   21736:	6804      	ldr	r4, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;
	int must_reschedule;

	signal->result = result;
   21738:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   2173a:	42a0      	cmp	r0, r4
	signal->signaled = 1;
   2173c:	f04f 0101 	mov.w	r1, #1
   21740:	6081      	str	r1, [r0, #8]
   21742:	d105      	bne.n	21750 <k_poll_signal+0x28>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21744:	f385 8811 	msr	BASEPRI, r5

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (!poll_event) {
		irq_unlock(key);
		return 0;
   21748:	2400      	movs	r4, #0
	} else {
		irq_unlock(key);
	}

	return rc;
}
   2174a:	4620      	mov	r0, r4
   2174c:	b003      	add	sp, #12
   2174e:	bd30      	pop	{r4, r5, pc}
	sys_dlist_remove(node);
   21750:	4620      	mov	r0, r4
   21752:	f7ff fe65 	bl	21420 <sys_dlist_remove>
	if (!poll_event) {
   21756:	2c00      	cmp	r4, #0
   21758:	d0f4      	beq.n	21744 <k_poll_signal+0x1c>
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   2175a:	4620      	mov	r0, r4
   2175c:	aa01      	add	r2, sp, #4
   2175e:	f7ff fe87 	bl	21470 <signal_poll_event>
	if (must_reschedule) {
   21762:	9b01      	ldr	r3, [sp, #4]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   21764:	4604      	mov	r4, r0
	if (must_reschedule) {
   21766:	b12b      	cbz	r3, 21774 <k_poll_signal+0x4c>
	_update_time_slice_before_swap();
   21768:	f7ff f980 	bl	20a6c <_update_time_slice_before_swap>
	return __swap(key);
   2176c:	4628      	mov	r0, r5
   2176e:	f7df fb3b 	bl	de8 <__swap>
   21772:	e7ea      	b.n	2174a <k_poll_signal+0x22>
   21774:	f385 8811 	msr	BASEPRI, r5
   21778:	e7e7      	b.n	2174a <k_poll_signal+0x22>

0002177a <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   2177a:	4770      	bx	lr
